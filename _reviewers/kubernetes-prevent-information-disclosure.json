[
  {
    "discussion_id": "2177870220",
    "pr_number": 132593,
    "pr_file": "vendor/sigs.k8s.io/kustomize/kyaml/fn/runtime/exec/exec.go",
    "created_at": "2025-07-01T15:13:42+00:00",
    "commented_code": "// Args are the arguments to the executable\n \tArgs []string `yaml:\"args,omitempty\"`\n \n+\t// Env is exposed to the environment\n+\tEnv []string `yaml:\"env,omitempty\"`",
    "repo_full_name": "kubernetes/kubernetes",
    "discussion_comments": [
      {
        "comment_id": "2177870220",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 132593,
        "pr_file": "vendor/sigs.k8s.io/kustomize/kyaml/fn/runtime/exec/exec.go",
        "discussion_id": "2177870220",
        "commented_code": "@@ -21,6 +21,9 @@ type Filter struct {\n \t// Args are the arguments to the executable\n \tArgs []string `yaml:\"args,omitempty\"`\n \n+\t// Env is exposed to the environment\n+\tEnv []string `yaml:\"env,omitempty\"`",
        "comment_created_at": "2025-07-01T15:13:42+00:00",
        "comment_author": "liggitt",
        "comment_body": "@soltysh is this active / exercisable in embedded kustomize? if not, is there a way to avoid vendoring this? it is very difficult to reason about the execution of arbitrary paths with arbitrary envs\r\n\r\nallowing env overrides opens the door for some crazy things like messing with PATH, LD_LIBRARY_PATH, etc",
        "pr_file_module": null
      },
      {
        "comment_id": "2201644914",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 132593,
        "pr_file": "vendor/sigs.k8s.io/kustomize/kyaml/fn/runtime/exec/exec.go",
        "discussion_id": "2177870220",
        "commented_code": "@@ -21,6 +21,9 @@ type Filter struct {\n \t// Args are the arguments to the executable\n \tArgs []string `yaml:\"args,omitempty\"`\n \n+\t// Env is exposed to the environment\n+\tEnv []string `yaml:\"env,omitempty\"`",
        "comment_created_at": "2025-07-11T19:24:08+00:00",
        "comment_author": "koba1t",
        "comment_body": "These configuration options specify settings for the KRM exec plugin, which kustomize uses to execute executable binaries as exec functions. In the kustomize-in-kubectl environment, the krm exec plugin is disabled and cannot be executed.\r\nhttps://kubectl.docs.kubernetes.io/guides/extending_kustomize/exec_krm_functions/#authoring-exec-krm-functions\r\n\r\n> allowing env overrides opens the door for some crazy things like messing with PATH, LD_LIBRARY_PATH, etc\r\n\r\nMay I ask more about what specifically concerns you about environment variables being configurable from manifests?\r\nThe security risks of the krm exec plugin were recognized by the kustomize development team, and they are only executable now with special flags. I always understood that users who configure this setting would be aware of the risk of overwriting environment variables, so this wasn't considered a major issue.",
        "pr_file_module": null
      },
      {
        "comment_id": "2206059376",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 132593,
        "pr_file": "vendor/sigs.k8s.io/kustomize/kyaml/fn/runtime/exec/exec.go",
        "discussion_id": "2177870220",
        "commented_code": "@@ -21,6 +21,9 @@ type Filter struct {\n \t// Args are the arguments to the executable\n \tArgs []string `yaml:\"args,omitempty\"`\n \n+\t// Env is exposed to the environment\n+\tEnv []string `yaml:\"env,omitempty\"`",
        "comment_created_at": "2025-07-15T00:47:43+00:00",
        "comment_author": "liggitt",
        "comment_body": "> In the kustomize-in-kubectl environment, the krm exec plugin is disabled and cannot be executed.\r\n\r\nCan you remind me how that is done, just so I can rest easy that this entire config is completely inert for kubectl?\r\n\r\n> May I ask more about what specifically concerns you about environment variables being configurable from manifests?\r\n\r\nSomething that currently scans manifests, and only allows specific path / args, thinking that protects them and makes it safe to call exec plugins, could be circumvented by custom envs that change PATH, LD_LIBRARY_PATH, etc.",
        "pr_file_module": null
      },
      {
        "comment_id": "2225685842",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 132593,
        "pr_file": "vendor/sigs.k8s.io/kustomize/kyaml/fn/runtime/exec/exec.go",
        "discussion_id": "2177870220",
        "commented_code": "@@ -21,6 +21,9 @@ type Filter struct {\n \t// Args are the arguments to the executable\n \tArgs []string `yaml:\"args,omitempty\"`\n \n+\t// Env is exposed to the environment\n+\tEnv []string `yaml:\"env,omitempty\"`",
        "comment_created_at": "2025-07-23T13:50:27+00:00",
        "comment_author": "liggitt",
        "comment_body": "> > In the kustomize-in-kubectl environment, the krm exec plugin is disabled and cannot be executed.\r\n> \r\n> Can you remind me how that is done, just so I can rest easy that this entire config is completely inert for kubectl?\r\n\r\nStill outstanding, can you point to where and how we disable that plugin in kubectl?",
        "pr_file_module": null
      },
      {
        "comment_id": "2226805144",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 132593,
        "pr_file": "vendor/sigs.k8s.io/kustomize/kyaml/fn/runtime/exec/exec.go",
        "discussion_id": "2177870220",
        "commented_code": "@@ -21,6 +21,9 @@ type Filter struct {\n \t// Args are the arguments to the executable\n \tArgs []string `yaml:\"args,omitempty\"`\n \n+\t// Env is exposed to the environment\n+\tEnv []string `yaml:\"env,omitempty\"`",
        "comment_created_at": "2025-07-23T22:03:45+00:00",
        "comment_author": "koba1t",
        "comment_body": "@liggitt \r\n\r\nTo enable the krm exec plugin with kustomize, user must pass the `--enable-exec` flag at runtime.\r\nThe interface design prevents specifying this flag with `kubectl kustomize`, effectively blocking execution of the krm exec plugin.\r\nhttps://kubectl.docs.kubernetes.io/guides/extending_kustomize/exec_krm_functions/\r\n\r\n## current command line options\r\n\r\n### flag of kustomize\r\n```\r\nkob@K4PF ~ % kustomize build --help | grep enable-exec\r\n      --enable-exec                     enable support for exec functions (raw executables); do not use for untrusted configs! (Alpha)\r\n```\r\n\r\n### flag of kubectl\r\n```\r\nkob@K4PF ~ % kubectl kustomize --help | grep enable-exec\r\nkob@K4PF ~ % \r\n```\r\n\r\n## flag parameter code\r\n\r\n### command line flag define\r\nhttps://github.com/kubernetes-sigs/kustomize/blob/2859474e3ce0c63907af5eb1a94721ad7ebb56ea/kyaml/runfn/runfn.go#L516\r\n\r\n### conditional branch for executing the exec plugin\r\nhttps://github.com/kubernetes-sigs/kustomize/blob/2859474e3ce0c63907af5eb1a94721ad7ebb56ea/kustomize/commands/build/flagsforfunctions.go#L28-L33\r\n\r\n\r\n## more detail\r\n\r\n### kubectl\r\n\r\n`kubectl kustomize` is direct import to `build.NewCmdBuild()` function\r\n\r\nhttps://github.com/kubernetes/kubectl/blob/e7f17cb570ea0291a7543388119359d6a51d198f/pkg/cmd/kustomize/kustomize.go#L32\r\n\r\n### kustomize\r\n\r\n`kustomize build` is execute `commands.NewDefaultCommand()` function on\r\nhttps://github.com/kubernetes-sigs/kustomize/blob/2859474e3ce0c63907af5eb1a94721ad7ebb56ea/kustomize/main.go#L14C21-L14C38 line.\r\n\r\n`commands.NewDefaultCommand()` that called by `kustomize build` command is using `build.NewCmdBuild()` via `makeBuildCommand()` function that add a special flag to enable `exec` plugin.\r\nhttps://github.com/kubernetes-sigs/kustomize/blob/2859474e3ce0c63907af5eb1a94721ad7ebb56ea/kustomize/commands/commands.go#L51\r\nhttps://github.com/kubernetes-sigs/kustomize/blob/2859474e3ce0c63907af5eb1a94721ad7ebb56ea/kustomize/commands/commands.go#L30",
        "pr_file_module": null
      },
      {
        "comment_id": "2228004241",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 132593,
        "pr_file": "vendor/sigs.k8s.io/kustomize/kyaml/fn/runtime/exec/exec.go",
        "discussion_id": "2177870220",
        "commented_code": "@@ -21,6 +21,9 @@ type Filter struct {\n \t// Args are the arguments to the executable\n \tArgs []string `yaml:\"args,omitempty\"`\n \n+\t// Env is exposed to the environment\n+\tEnv []string `yaml:\"env,omitempty\"`",
        "comment_created_at": "2025-07-24T09:38:56+00:00",
        "comment_author": "soltysh",
        "comment_body": "I believe for now that is sufficient, although [these 2 lines](https://github.com/kubernetes-sigs/kustomize/blob/2859474e3ce0c63907af5eb1a94721ad7ebb56ea/kustomize/commands/commands.go#L29-L30)\r\n```golang\r\n// Add build flags that don't appear in kubectl.\r\nbuild.AddFunctionAlphaEnablementFlags(cmd.Flags())\r\n```\r\nmight be confusing, and accidentally enabled once that functionality promotes out of alpha. I believe an explicit option on `build.NewCmdBuild` would be best to ensure this doesn't happen. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2207813877",
    "pr_number": 125271,
    "pr_file": "staging/src/k8s.io/pod-security-admission/policy/check_hostProbesAndhostLifecycle.go",
    "created_at": "2025-07-15T15:18:03+00:00",
    "commented_code": "+/*\n+Copyright 2024 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package policy\n+\n+import (\n+\t\"fmt\"\n+\n+\tcorev1 \"k8s.io/api/core/v1\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\t\"k8s.io/pod-security-admission/api\"\n+)\n+\n+/*\n+Host field is restricted in the probes and lifecycle handlers.\n+\n+**Restricted Fields:**\n+\n+* spec.containers[*].livenessProbe.httpGet.host\n+* spec.containers[*].readinessProbe.httpGet.host\n+* spec.containers[*].startupProbe.httpGet.host\n+* spec.containers[*].livenessProbe.tcpSocket.host\n+* spec.containers[*].readinessProbe.tcpSocket.host\n+* spec.containers[*].startupProbe.tcpSocket.host\n+* spec.containers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.postStart.httpGet.host\n+* spec.containers[*].lifecycle.preStop.httpGet.host\n+* spec.initContainers[*].livenessProbe.httpGet.host\n+* spec.initContainers[*].readinessProbe.httpGet.host\n+* spec.initContainers[*].startupProbe.httpGet.host\n+* spec.initContainers[*].livenessProbe.tcpSocket.host\n+* spec.initContainers[*].readinessProbe.tcpSocket.host\n+* spec.initContainers[*].startupProbe.tcpSocket.host\n+* spec.initContainers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.postStart.httpGet.host\n+* spec.initContainers[*].lifecycle.preStop.httpGet.host\n+\n+\n+**Allowed Values:** \"127.0.0.1\", \"::1\"\n+*/\n+\n+const (\n+\tallowedLocalHostIPv4 = \"127.0.0.1\"",
    "repo_full_name": "kubernetes/kubernetes",
    "discussion_comments": [
      {
        "comment_id": "2207813877",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 125271,
        "pr_file": "staging/src/k8s.io/pod-security-admission/policy/check_hostProbesAndhostLifecycle.go",
        "discussion_id": "2207813877",
        "commented_code": "@@ -0,0 +1,159 @@\n+/*\n+Copyright 2024 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package policy\n+\n+import (\n+\t\"fmt\"\n+\n+\tcorev1 \"k8s.io/api/core/v1\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\t\"k8s.io/pod-security-admission/api\"\n+)\n+\n+/*\n+Host field is restricted in the probes and lifecycle handlers.\n+\n+**Restricted Fields:**\n+\n+* spec.containers[*].livenessProbe.httpGet.host\n+* spec.containers[*].readinessProbe.httpGet.host\n+* spec.containers[*].startupProbe.httpGet.host\n+* spec.containers[*].livenessProbe.tcpSocket.host\n+* spec.containers[*].readinessProbe.tcpSocket.host\n+* spec.containers[*].startupProbe.tcpSocket.host\n+* spec.containers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.postStart.httpGet.host\n+* spec.containers[*].lifecycle.preStop.httpGet.host\n+* spec.initContainers[*].livenessProbe.httpGet.host\n+* spec.initContainers[*].readinessProbe.httpGet.host\n+* spec.initContainers[*].startupProbe.httpGet.host\n+* spec.initContainers[*].livenessProbe.tcpSocket.host\n+* spec.initContainers[*].readinessProbe.tcpSocket.host\n+* spec.initContainers[*].startupProbe.tcpSocket.host\n+* spec.initContainers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.postStart.httpGet.host\n+* spec.initContainers[*].lifecycle.preStop.httpGet.host\n+\n+\n+**Allowed Values:** \"127.0.0.1\", \"::1\"\n+*/\n+\n+const (\n+\tallowedLocalHostIPv4 = \"127.0.0.1\"",
        "comment_created_at": "2025-07-15T15:18:03+00:00",
        "comment_author": "liggitt",
        "comment_body": "what about the literal `localhost`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2218333566",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 125271,
        "pr_file": "staging/src/k8s.io/pod-security-admission/policy/check_hostProbesAndhostLifecycle.go",
        "discussion_id": "2207813877",
        "commented_code": "@@ -0,0 +1,159 @@\n+/*\n+Copyright 2024 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package policy\n+\n+import (\n+\t\"fmt\"\n+\n+\tcorev1 \"k8s.io/api/core/v1\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\t\"k8s.io/pod-security-admission/api\"\n+)\n+\n+/*\n+Host field is restricted in the probes and lifecycle handlers.\n+\n+**Restricted Fields:**\n+\n+* spec.containers[*].livenessProbe.httpGet.host\n+* spec.containers[*].readinessProbe.httpGet.host\n+* spec.containers[*].startupProbe.httpGet.host\n+* spec.containers[*].livenessProbe.tcpSocket.host\n+* spec.containers[*].readinessProbe.tcpSocket.host\n+* spec.containers[*].startupProbe.tcpSocket.host\n+* spec.containers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.postStart.httpGet.host\n+* spec.containers[*].lifecycle.preStop.httpGet.host\n+* spec.initContainers[*].livenessProbe.httpGet.host\n+* spec.initContainers[*].readinessProbe.httpGet.host\n+* spec.initContainers[*].startupProbe.httpGet.host\n+* spec.initContainers[*].livenessProbe.tcpSocket.host\n+* spec.initContainers[*].readinessProbe.tcpSocket.host\n+* spec.initContainers[*].startupProbe.tcpSocket.host\n+* spec.initContainers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.postStart.httpGet.host\n+* spec.initContainers[*].lifecycle.preStop.httpGet.host\n+\n+\n+**Allowed Values:** \"127.0.0.1\", \"::1\"\n+*/\n+\n+const (\n+\tallowedLocalHostIPv4 = \"127.0.0.1\"",
        "comment_created_at": "2025-07-21T06:45:12+00:00",
        "comment_author": "tssurya",
        "comment_body": "hmm good catch I think we should include `localhost` as well",
        "pr_file_module": null
      },
      {
        "comment_id": "2223805103",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 125271,
        "pr_file": "staging/src/k8s.io/pod-security-admission/policy/check_hostProbesAndhostLifecycle.go",
        "discussion_id": "2207813877",
        "commented_code": "@@ -0,0 +1,159 @@\n+/*\n+Copyright 2024 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package policy\n+\n+import (\n+\t\"fmt\"\n+\n+\tcorev1 \"k8s.io/api/core/v1\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\t\"k8s.io/pod-security-admission/api\"\n+)\n+\n+/*\n+Host field is restricted in the probes and lifecycle handlers.\n+\n+**Restricted Fields:**\n+\n+* spec.containers[*].livenessProbe.httpGet.host\n+* spec.containers[*].readinessProbe.httpGet.host\n+* spec.containers[*].startupProbe.httpGet.host\n+* spec.containers[*].livenessProbe.tcpSocket.host\n+* spec.containers[*].readinessProbe.tcpSocket.host\n+* spec.containers[*].startupProbe.tcpSocket.host\n+* spec.containers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.postStart.httpGet.host\n+* spec.containers[*].lifecycle.preStop.httpGet.host\n+* spec.initContainers[*].livenessProbe.httpGet.host\n+* spec.initContainers[*].readinessProbe.httpGet.host\n+* spec.initContainers[*].startupProbe.httpGet.host\n+* spec.initContainers[*].livenessProbe.tcpSocket.host\n+* spec.initContainers[*].readinessProbe.tcpSocket.host\n+* spec.initContainers[*].startupProbe.tcpSocket.host\n+* spec.initContainers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.postStart.httpGet.host\n+* spec.initContainers[*].lifecycle.preStop.httpGet.host\n+\n+\n+**Allowed Values:** \"127.0.0.1\", \"::1\"\n+*/\n+\n+const (\n+\tallowedLocalHostIPv4 = \"127.0.0.1\"",
        "comment_created_at": "2025-07-22T20:52:14+00:00",
        "comment_author": "liggitt",
        "comment_body": "looking at the kubelet probe code, doesn't 127.0.0.1 mean the kubelet is making requests to the host network, not the pod IP? remind me why 127.0.0.1 / localhost is fine for pods which aren't supposed to have host network access?",
        "pr_file_module": null
      },
      {
        "comment_id": "2225088823",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 125271,
        "pr_file": "staging/src/k8s.io/pod-security-admission/policy/check_hostProbesAndhostLifecycle.go",
        "discussion_id": "2207813877",
        "commented_code": "@@ -0,0 +1,159 @@\n+/*\n+Copyright 2024 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package policy\n+\n+import (\n+\t\"fmt\"\n+\n+\tcorev1 \"k8s.io/api/core/v1\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\t\"k8s.io/pod-security-admission/api\"\n+)\n+\n+/*\n+Host field is restricted in the probes and lifecycle handlers.\n+\n+**Restricted Fields:**\n+\n+* spec.containers[*].livenessProbe.httpGet.host\n+* spec.containers[*].readinessProbe.httpGet.host\n+* spec.containers[*].startupProbe.httpGet.host\n+* spec.containers[*].livenessProbe.tcpSocket.host\n+* spec.containers[*].readinessProbe.tcpSocket.host\n+* spec.containers[*].startupProbe.tcpSocket.host\n+* spec.containers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.postStart.httpGet.host\n+* spec.containers[*].lifecycle.preStop.httpGet.host\n+* spec.initContainers[*].livenessProbe.httpGet.host\n+* spec.initContainers[*].readinessProbe.httpGet.host\n+* spec.initContainers[*].startupProbe.httpGet.host\n+* spec.initContainers[*].livenessProbe.tcpSocket.host\n+* spec.initContainers[*].readinessProbe.tcpSocket.host\n+* spec.initContainers[*].startupProbe.tcpSocket.host\n+* spec.initContainers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.postStart.httpGet.host\n+* spec.initContainers[*].lifecycle.preStop.httpGet.host\n+\n+\n+**Allowed Values:** \"127.0.0.1\", \"::1\"\n+*/\n+\n+const (\n+\tallowedLocalHostIPv4 = \"127.0.0.1\"",
        "comment_created_at": "2025-07-23T10:23:14+00:00",
        "comment_author": "tssurya",
        "comment_body": "correct the 127.0.0.1 is localhost of the host-network and not the pod's localhost.\r\nReasoning behind allowing this specific probe was because there is a use case where people are using localhost probes where public IP of the node might be blocked by firewall but apiserver being host-networked is created with such healthcheck probes in our tests: https://github.com/kubernetes/kops/blob/5dd2f468b46fda43f3a63ba1e6dc7c55c21919eb/nodeup/pkg/model/kube_apiserver.go#L603 \r\n\r\nhttps://github.com/kubernetes/enhancements/pull/4942#discussion_r2123759432 was the discussion which lead to https://github.com/kubernetes/enhancements/pull/5444\r\n\r\nwe didn't want to lock folks in for this use case",
        "pr_file_module": null
      },
      {
        "comment_id": "2225641840",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 125271,
        "pr_file": "staging/src/k8s.io/pod-security-admission/policy/check_hostProbesAndhostLifecycle.go",
        "discussion_id": "2207813877",
        "commented_code": "@@ -0,0 +1,159 @@\n+/*\n+Copyright 2024 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package policy\n+\n+import (\n+\t\"fmt\"\n+\n+\tcorev1 \"k8s.io/api/core/v1\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\t\"k8s.io/pod-security-admission/api\"\n+)\n+\n+/*\n+Host field is restricted in the probes and lifecycle handlers.\n+\n+**Restricted Fields:**\n+\n+* spec.containers[*].livenessProbe.httpGet.host\n+* spec.containers[*].readinessProbe.httpGet.host\n+* spec.containers[*].startupProbe.httpGet.host\n+* spec.containers[*].livenessProbe.tcpSocket.host\n+* spec.containers[*].readinessProbe.tcpSocket.host\n+* spec.containers[*].startupProbe.tcpSocket.host\n+* spec.containers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.postStart.httpGet.host\n+* spec.containers[*].lifecycle.preStop.httpGet.host\n+* spec.initContainers[*].livenessProbe.httpGet.host\n+* spec.initContainers[*].readinessProbe.httpGet.host\n+* spec.initContainers[*].startupProbe.httpGet.host\n+* spec.initContainers[*].livenessProbe.tcpSocket.host\n+* spec.initContainers[*].readinessProbe.tcpSocket.host\n+* spec.initContainers[*].startupProbe.tcpSocket.host\n+* spec.initContainers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.postStart.httpGet.host\n+* spec.initContainers[*].lifecycle.preStop.httpGet.host\n+\n+\n+**Allowed Values:** \"127.0.0.1\", \"::1\"\n+*/\n+\n+const (\n+\tallowedLocalHostIPv4 = \"127.0.0.1\"",
        "comment_created_at": "2025-07-23T13:35:38+00:00",
        "comment_author": "liggitt",
        "comment_body": "I left a comment at https://github.com/kubernetes/enhancements/pull/5444/files#r2225633269, but I don't think that scenario makes sense.\r\n\r\nThe linked example of the kube-apiserver pod used `hostNetwork: true`, and that pod would be rejected by the baseline policy. hostNetwork and hostPort pods are not allowed in the baseline policy.\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/9148694d4bcaf620a5190899f040213f8f44561c/staging/src/k8s.io/pod-security-admission/policy/check_hostNamespaces.go#L32\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/9148694d4bcaf620a5190899f040213f8f44561c/staging/src/k8s.io/pod-security-admission/policy/check_hostPorts.go#L35-L36",
        "pr_file_module": null
      },
      {
        "comment_id": "2225664705",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 125271,
        "pr_file": "staging/src/k8s.io/pod-security-admission/policy/check_hostProbesAndhostLifecycle.go",
        "discussion_id": "2207813877",
        "commented_code": "@@ -0,0 +1,159 @@\n+/*\n+Copyright 2024 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package policy\n+\n+import (\n+\t\"fmt\"\n+\n+\tcorev1 \"k8s.io/api/core/v1\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\t\"k8s.io/pod-security-admission/api\"\n+)\n+\n+/*\n+Host field is restricted in the probes and lifecycle handlers.\n+\n+**Restricted Fields:**\n+\n+* spec.containers[*].livenessProbe.httpGet.host\n+* spec.containers[*].readinessProbe.httpGet.host\n+* spec.containers[*].startupProbe.httpGet.host\n+* spec.containers[*].livenessProbe.tcpSocket.host\n+* spec.containers[*].readinessProbe.tcpSocket.host\n+* spec.containers[*].startupProbe.tcpSocket.host\n+* spec.containers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.postStart.httpGet.host\n+* spec.containers[*].lifecycle.preStop.httpGet.host\n+* spec.initContainers[*].livenessProbe.httpGet.host\n+* spec.initContainers[*].readinessProbe.httpGet.host\n+* spec.initContainers[*].startupProbe.httpGet.host\n+* spec.initContainers[*].livenessProbe.tcpSocket.host\n+* spec.initContainers[*].readinessProbe.tcpSocket.host\n+* spec.initContainers[*].startupProbe.tcpSocket.host\n+* spec.initContainers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.postStart.httpGet.host\n+* spec.initContainers[*].lifecycle.preStop.httpGet.host\n+\n+\n+**Allowed Values:** \"127.0.0.1\", \"::1\"\n+*/\n+\n+const (\n+\tallowedLocalHostIPv4 = \"127.0.0.1\"",
        "comment_created_at": "2025-07-23T13:43:00+00:00",
        "comment_author": "tssurya",
        "comment_body": "oh! I wasn't aware `hostNetwork:true` was totally blocked in baseline (makes total sense from security standpoint they are..and outside of host-networked pods use case can't think of anything that would require allowing localhost)... hmm then I'm not sure if we need to carry these exceptions around for localhost.. - to me sounds like we can block this field totally with no allowed values\r\n\r\nI'm not very familiar with \"kops\" is that a specific SIG or do those tests run somewhere in CI to ensure I don't break them? I'm sure I didn't hit those in CI\r\n\r\n@danwinship thoughts?",
        "pr_file_module": null
      },
      {
        "comment_id": "2225684041",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 125271,
        "pr_file": "staging/src/k8s.io/pod-security-admission/policy/check_hostProbesAndhostLifecycle.go",
        "discussion_id": "2207813877",
        "commented_code": "@@ -0,0 +1,159 @@\n+/*\n+Copyright 2024 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package policy\n+\n+import (\n+\t\"fmt\"\n+\n+\tcorev1 \"k8s.io/api/core/v1\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\t\"k8s.io/pod-security-admission/api\"\n+)\n+\n+/*\n+Host field is restricted in the probes and lifecycle handlers.\n+\n+**Restricted Fields:**\n+\n+* spec.containers[*].livenessProbe.httpGet.host\n+* spec.containers[*].readinessProbe.httpGet.host\n+* spec.containers[*].startupProbe.httpGet.host\n+* spec.containers[*].livenessProbe.tcpSocket.host\n+* spec.containers[*].readinessProbe.tcpSocket.host\n+* spec.containers[*].startupProbe.tcpSocket.host\n+* spec.containers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.postStart.httpGet.host\n+* spec.containers[*].lifecycle.preStop.httpGet.host\n+* spec.initContainers[*].livenessProbe.httpGet.host\n+* spec.initContainers[*].readinessProbe.httpGet.host\n+* spec.initContainers[*].startupProbe.httpGet.host\n+* spec.initContainers[*].livenessProbe.tcpSocket.host\n+* spec.initContainers[*].readinessProbe.tcpSocket.host\n+* spec.initContainers[*].startupProbe.tcpSocket.host\n+* spec.initContainers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.postStart.httpGet.host\n+* spec.initContainers[*].lifecycle.preStop.httpGet.host\n+\n+\n+**Allowed Values:** \"127.0.0.1\", \"::1\"\n+*/\n+\n+const (\n+\tallowedLocalHostIPv4 = \"127.0.0.1\"",
        "comment_created_at": "2025-07-23T13:49:50+00:00",
        "comment_author": "liggitt",
        "comment_body": "Any pod using hostNetwork or hostPorts must already not be using baseline or restricted pod security profiles, so the only scenario I can see they would use `host: localhost` or `host: 127.0.0.1` is if they are setting up a probe to pay attention to something else on the node host, which is in bounds to block in the baseline and restricted profiles. If a test scenario starts to fail as a result, they can decide whether to stop using a probe that way or opt the namespace into the privileged profile.\r\n\r\nI would recommend forbidding any value in the host field. That will simplify the error reporting a lot, since we no longer need to track which specific host values were used, and can just mention the container names.",
        "pr_file_module": null
      },
      {
        "comment_id": "2225712489",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 125271,
        "pr_file": "staging/src/k8s.io/pod-security-admission/policy/check_hostProbesAndhostLifecycle.go",
        "discussion_id": "2207813877",
        "commented_code": "@@ -0,0 +1,159 @@\n+/*\n+Copyright 2024 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package policy\n+\n+import (\n+\t\"fmt\"\n+\n+\tcorev1 \"k8s.io/api/core/v1\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\t\"k8s.io/pod-security-admission/api\"\n+)\n+\n+/*\n+Host field is restricted in the probes and lifecycle handlers.\n+\n+**Restricted Fields:**\n+\n+* spec.containers[*].livenessProbe.httpGet.host\n+* spec.containers[*].readinessProbe.httpGet.host\n+* spec.containers[*].startupProbe.httpGet.host\n+* spec.containers[*].livenessProbe.tcpSocket.host\n+* spec.containers[*].readinessProbe.tcpSocket.host\n+* spec.containers[*].startupProbe.tcpSocket.host\n+* spec.containers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.postStart.httpGet.host\n+* spec.containers[*].lifecycle.preStop.httpGet.host\n+* spec.initContainers[*].livenessProbe.httpGet.host\n+* spec.initContainers[*].readinessProbe.httpGet.host\n+* spec.initContainers[*].startupProbe.httpGet.host\n+* spec.initContainers[*].livenessProbe.tcpSocket.host\n+* spec.initContainers[*].readinessProbe.tcpSocket.host\n+* spec.initContainers[*].startupProbe.tcpSocket.host\n+* spec.initContainers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.postStart.httpGet.host\n+* spec.initContainers[*].lifecycle.preStop.httpGet.host\n+\n+\n+**Allowed Values:** \"127.0.0.1\", \"::1\"\n+*/\n+\n+const (\n+\tallowedLocalHostIPv4 = \"127.0.0.1\"",
        "comment_created_at": "2025-07-23T13:59:41+00:00",
        "comment_author": "danwinship",
        "comment_body": "Ben mentioned \"kops\" as an example but then we noticed that the deployment stuff in k/k/cluster/gce uses probes with `host: 127.0.0.1` too. (We just hadn't noticed originally because I was grepping for YAML but it uses JSON.) Anyway, you can see in the `pull-kubernetes-e2e-gce` logs that it _is_ using that configuration:\r\n\r\n```text\r\nJul 23 11:01:55.391392 bootstrap-e2e-master kubelet[9706]: I0723 11:01:55.391283    9706 http.go:116] Probe succeeded for https://127.0.0.1:443/readyz, Response: {200 OK 200 HTTP/2.0 2 0 map[Audit-Id:[543b32c6-a277-4ab1-8a7b-6d4c6deecf44] Cache-Control:[no-cache, private] Content-Length:[2] Content-Type:[text/plain; charset=utf-8] Date:[Wed, 23 Jul 2025 11:01:55 GMT] X-Content-Type-Options:[nosniff] X-Kubernetes-Pf-Flowschema-Uid:[df4ea8eb-1728-43f3-bc92-a5a7d5f80319] X-Kubernetes-Pf-Prioritylevel-Uid:[46858e6e-6650-4df6-92fc-4887e2df4dfe]] 0xc0008a43e0 2 [] false false map[] 0xc0004423c0 0xc0015dc240}\r\nJul 23 11:01:55.392031 bootstrap-e2e-master kubelet[9706]: I0723 11:01:55.391990    9706 prober.go:111] \"Probe succeeded\" probeType=\"Readiness\" pod=\"kube-system/kube-apiserver-bootstrap-e2e-master\" podUID=\"e3d9a1ab458c329cf1ba12d4d6721aff\" containerName=\"kube-apiserver\"\r\n```\r\n\r\nso, if e2e passes here with all `host`-in-probes blocked, then we're not breaking that use case.",
        "pr_file_module": null
      },
      {
        "comment_id": "2225725892",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 125271,
        "pr_file": "staging/src/k8s.io/pod-security-admission/policy/check_hostProbesAndhostLifecycle.go",
        "discussion_id": "2207813877",
        "commented_code": "@@ -0,0 +1,159 @@\n+/*\n+Copyright 2024 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package policy\n+\n+import (\n+\t\"fmt\"\n+\n+\tcorev1 \"k8s.io/api/core/v1\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\t\"k8s.io/pod-security-admission/api\"\n+)\n+\n+/*\n+Host field is restricted in the probes and lifecycle handlers.\n+\n+**Restricted Fields:**\n+\n+* spec.containers[*].livenessProbe.httpGet.host\n+* spec.containers[*].readinessProbe.httpGet.host\n+* spec.containers[*].startupProbe.httpGet.host\n+* spec.containers[*].livenessProbe.tcpSocket.host\n+* spec.containers[*].readinessProbe.tcpSocket.host\n+* spec.containers[*].startupProbe.tcpSocket.host\n+* spec.containers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.postStart.httpGet.host\n+* spec.containers[*].lifecycle.preStop.httpGet.host\n+* spec.initContainers[*].livenessProbe.httpGet.host\n+* spec.initContainers[*].readinessProbe.httpGet.host\n+* spec.initContainers[*].startupProbe.httpGet.host\n+* spec.initContainers[*].livenessProbe.tcpSocket.host\n+* spec.initContainers[*].readinessProbe.tcpSocket.host\n+* spec.initContainers[*].startupProbe.tcpSocket.host\n+* spec.initContainers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.postStart.httpGet.host\n+* spec.initContainers[*].lifecycle.preStop.httpGet.host\n+\n+\n+**Allowed Values:** \"127.0.0.1\", \"::1\"\n+*/\n+\n+const (\n+\tallowedLocalHostIPv4 = \"127.0.0.1\"",
        "comment_created_at": "2025-07-23T14:04:56+00:00",
        "comment_author": "tssurya",
        "comment_body": "I'll do a parallel WIP PR and run tests such that the whole `.Host` field is blocked.. and see if CI passes on that one. If so we can be sure we are not breaking something we shouldn't be and we can confidently remove all allowed values and totally block this field.",
        "pr_file_module": null
      },
      {
        "comment_id": "2225751241",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 125271,
        "pr_file": "staging/src/k8s.io/pod-security-admission/policy/check_hostProbesAndhostLifecycle.go",
        "discussion_id": "2207813877",
        "commented_code": "@@ -0,0 +1,159 @@\n+/*\n+Copyright 2024 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package policy\n+\n+import (\n+\t\"fmt\"\n+\n+\tcorev1 \"k8s.io/api/core/v1\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\t\"k8s.io/pod-security-admission/api\"\n+)\n+\n+/*\n+Host field is restricted in the probes and lifecycle handlers.\n+\n+**Restricted Fields:**\n+\n+* spec.containers[*].livenessProbe.httpGet.host\n+* spec.containers[*].readinessProbe.httpGet.host\n+* spec.containers[*].startupProbe.httpGet.host\n+* spec.containers[*].livenessProbe.tcpSocket.host\n+* spec.containers[*].readinessProbe.tcpSocket.host\n+* spec.containers[*].startupProbe.tcpSocket.host\n+* spec.containers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.postStart.httpGet.host\n+* spec.containers[*].lifecycle.preStop.httpGet.host\n+* spec.initContainers[*].livenessProbe.httpGet.host\n+* spec.initContainers[*].readinessProbe.httpGet.host\n+* spec.initContainers[*].startupProbe.httpGet.host\n+* spec.initContainers[*].livenessProbe.tcpSocket.host\n+* spec.initContainers[*].readinessProbe.tcpSocket.host\n+* spec.initContainers[*].startupProbe.tcpSocket.host\n+* spec.initContainers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.postStart.httpGet.host\n+* spec.initContainers[*].lifecycle.preStop.httpGet.host\n+\n+\n+**Allowed Values:** \"127.0.0.1\", \"::1\"\n+*/\n+\n+const (\n+\tallowedLocalHostIPv4 = \"127.0.0.1\"",
        "comment_created_at": "2025-07-23T14:14:30+00:00",
        "comment_author": "liggitt",
        "comment_body": "yeah, that deployment uses hostNetwork pods, so it cannot be running in baseline-constrained namespaces already:\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/49af85d86a1a265e53753edee1a1214e29cbbabd/cluster/gce/manifests/kube-apiserver.manifest#L23\r\n\r\nso nothing we add to the baseline policy will impact that in any way",
        "pr_file_module": null
      },
      {
        "comment_id": "2226307924",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 125271,
        "pr_file": "staging/src/k8s.io/pod-security-admission/policy/check_hostProbesAndhostLifecycle.go",
        "discussion_id": "2207813877",
        "commented_code": "@@ -0,0 +1,159 @@\n+/*\n+Copyright 2024 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package policy\n+\n+import (\n+\t\"fmt\"\n+\n+\tcorev1 \"k8s.io/api/core/v1\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\t\"k8s.io/pod-security-admission/api\"\n+)\n+\n+/*\n+Host field is restricted in the probes and lifecycle handlers.\n+\n+**Restricted Fields:**\n+\n+* spec.containers[*].livenessProbe.httpGet.host\n+* spec.containers[*].readinessProbe.httpGet.host\n+* spec.containers[*].startupProbe.httpGet.host\n+* spec.containers[*].livenessProbe.tcpSocket.host\n+* spec.containers[*].readinessProbe.tcpSocket.host\n+* spec.containers[*].startupProbe.tcpSocket.host\n+* spec.containers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.containers[*].lifecycle.postStart.httpGet.host\n+* spec.containers[*].lifecycle.preStop.httpGet.host\n+* spec.initContainers[*].livenessProbe.httpGet.host\n+* spec.initContainers[*].readinessProbe.httpGet.host\n+* spec.initContainers[*].startupProbe.httpGet.host\n+* spec.initContainers[*].livenessProbe.tcpSocket.host\n+* spec.initContainers[*].readinessProbe.tcpSocket.host\n+* spec.initContainers[*].startupProbe.tcpSocket.host\n+* spec.initContainers[*].lifecycle.postStart.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.preStop.tcpSocket.host // Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility.\n+* spec.initContainers[*].lifecycle.postStart.httpGet.host\n+* spec.initContainers[*].lifecycle.preStop.httpGet.host\n+\n+\n+**Allowed Values:** \"127.0.0.1\", \"::1\"\n+*/\n+\n+const (\n+\tallowedLocalHostIPv4 = \"127.0.0.1\"",
        "comment_created_at": "2025-07-23T18:12:32+00:00",
        "comment_author": "tssurya",
        "comment_body": "In my latest push I removed support for allowing localhost values. I think we are looking good in CI e2e's. I'll clean up the PR and do a final push and also close the enhancement update PR",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2210525855",
    "pr_number": 132626,
    "pr_file": "pkg/kubelet/util/env/env_util.go",
    "created_at": "2025-07-16T13:57:56+00:00",
    "commented_code": "+/*\n+Copyright 2025 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package env\n+\n+import (\n+\t\"bufio\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+// ParseEnv implements a strict parser for .env environment files,\n+// adhering to the format defined in the RFC documentation at https://smartmob-rfc.readthedocs.io/en/latest/2-dotenv.html.\n+//\n+// This function implements a strict parser for environment files similar to the requirements in the OCI and Docker env file RFCs:\n+//   - Leading whitespace is ignored for all lines.\n+//   - Blank lines (including those with only whitespace) are ignored.\n+//   - Lines starting with '#' are treated as comments and ignored.\n+//   - Each variable must be declared as VAR=VAL. Whitespace around '=' and at the end of the line is ignored.\n+//   - A backslash ('\\') at the end of a variable declaration line indicates the value continues on the next line. The lines are joined with a single space, and the backslash is not included.\n+//   - If a continuation line is interrupted by a blank line or comment, it is considered invalid and an error is returned.\n+func ParseEnv(envFilePath, key string) (string, error) {\n+\tfile, err := os.Open(envFilePath)\n+\tif err != nil {\n+\t\treturn \"\", fmt.Errorf(\"failed to open environment variable file %q: %w\", envFilePath, err)\n+\t}\n+\tdefer func() { _ = file.Close() }()\n+\n+\tscanner := bufio.NewScanner(file)\n+\tvar (\n+\t\tcurrentLine    string\n+\t\tinContinuation bool\n+\t)\n+\n+\tfor scanner.Scan() {\n+\t\tline := scanner.Text()\n+\t\tline = strings.TrimLeft(line, \" \\t\")\n+\n+\t\tif line == \"\" {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: blank line in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\t\tif strings.HasPrefix(line, \"#\") {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: comment in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif inContinuation {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine += \" \" + strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tcontinue\n+\t\t\t} else {\n+\t\t\t\tcurrentLine += \" \" + trimmed\n+\t\t\t\tline = currentLine\n+\t\t\t\tinContinuation = false\n+\t\t\t\tcurrentLine = \"\"\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine = strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tinContinuation = true\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t}\n+\n+\t\teqIdx := strings.Index(line, \"=\")\n+\t\tif eqIdx == -1 {\n+\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: %s\", line)",
    "repo_full_name": "kubernetes/kubernetes",
    "discussion_comments": [
      {
        "comment_id": "2210525855",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 132626,
        "pr_file": "pkg/kubelet/util/env/env_util.go",
        "discussion_id": "2210525855",
        "commented_code": "@@ -0,0 +1,110 @@\n+/*\n+Copyright 2025 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package env\n+\n+import (\n+\t\"bufio\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+// ParseEnv implements a strict parser for .env environment files,\n+// adhering to the format defined in the RFC documentation at https://smartmob-rfc.readthedocs.io/en/latest/2-dotenv.html.\n+//\n+// This function implements a strict parser for environment files similar to the requirements in the OCI and Docker env file RFCs:\n+//   - Leading whitespace is ignored for all lines.\n+//   - Blank lines (including those with only whitespace) are ignored.\n+//   - Lines starting with '#' are treated as comments and ignored.\n+//   - Each variable must be declared as VAR=VAL. Whitespace around '=' and at the end of the line is ignored.\n+//   - A backslash ('\\') at the end of a variable declaration line indicates the value continues on the next line. The lines are joined with a single space, and the backslash is not included.\n+//   - If a continuation line is interrupted by a blank line or comment, it is considered invalid and an error is returned.\n+func ParseEnv(envFilePath, key string) (string, error) {\n+\tfile, err := os.Open(envFilePath)\n+\tif err != nil {\n+\t\treturn \"\", fmt.Errorf(\"failed to open environment variable file %q: %w\", envFilePath, err)\n+\t}\n+\tdefer func() { _ = file.Close() }()\n+\n+\tscanner := bufio.NewScanner(file)\n+\tvar (\n+\t\tcurrentLine    string\n+\t\tinContinuation bool\n+\t)\n+\n+\tfor scanner.Scan() {\n+\t\tline := scanner.Text()\n+\t\tline = strings.TrimLeft(line, \" \\t\")\n+\n+\t\tif line == \"\" {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: blank line in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\t\tif strings.HasPrefix(line, \"#\") {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: comment in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif inContinuation {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine += \" \" + strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tcontinue\n+\t\t\t} else {\n+\t\t\t\tcurrentLine += \" \" + trimmed\n+\t\t\t\tline = currentLine\n+\t\t\t\tinContinuation = false\n+\t\t\t\tcurrentLine = \"\"\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine = strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tinContinuation = true\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t}\n+\n+\t\teqIdx := strings.Index(line, \"=\")\n+\t\tif eqIdx == -1 {\n+\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: %s\", line)",
        "comment_created_at": "2025-07-16T13:57:56+00:00",
        "comment_author": "toVersus",
        "comment_body": "In the end, the error from `ParseEnv()` will be included in the `FailedToCreateContainer` event message here, so even if the issue is caused by a broken .env line, we might not include the line's content in the error, since it could contain sensitive data.\r\nhttps://github.com/kubernetes/kubernetes/blob/485528d6ca1575c6be46ae7b6086a2cc7b525f8f/pkg/kubelet/kuberuntime/kuberuntime_container.go#L257",
        "pr_file_module": null
      },
      {
        "comment_id": "2210597672",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 132626,
        "pr_file": "pkg/kubelet/util/env/env_util.go",
        "discussion_id": "2210525855",
        "commented_code": "@@ -0,0 +1,110 @@\n+/*\n+Copyright 2025 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package env\n+\n+import (\n+\t\"bufio\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+// ParseEnv implements a strict parser for .env environment files,\n+// adhering to the format defined in the RFC documentation at https://smartmob-rfc.readthedocs.io/en/latest/2-dotenv.html.\n+//\n+// This function implements a strict parser for environment files similar to the requirements in the OCI and Docker env file RFCs:\n+//   - Leading whitespace is ignored for all lines.\n+//   - Blank lines (including those with only whitespace) are ignored.\n+//   - Lines starting with '#' are treated as comments and ignored.\n+//   - Each variable must be declared as VAR=VAL. Whitespace around '=' and at the end of the line is ignored.\n+//   - A backslash ('\\') at the end of a variable declaration line indicates the value continues on the next line. The lines are joined with a single space, and the backslash is not included.\n+//   - If a continuation line is interrupted by a blank line or comment, it is considered invalid and an error is returned.\n+func ParseEnv(envFilePath, key string) (string, error) {\n+\tfile, err := os.Open(envFilePath)\n+\tif err != nil {\n+\t\treturn \"\", fmt.Errorf(\"failed to open environment variable file %q: %w\", envFilePath, err)\n+\t}\n+\tdefer func() { _ = file.Close() }()\n+\n+\tscanner := bufio.NewScanner(file)\n+\tvar (\n+\t\tcurrentLine    string\n+\t\tinContinuation bool\n+\t)\n+\n+\tfor scanner.Scan() {\n+\t\tline := scanner.Text()\n+\t\tline = strings.TrimLeft(line, \" \\t\")\n+\n+\t\tif line == \"\" {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: blank line in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\t\tif strings.HasPrefix(line, \"#\") {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: comment in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif inContinuation {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine += \" \" + strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tcontinue\n+\t\t\t} else {\n+\t\t\t\tcurrentLine += \" \" + trimmed\n+\t\t\t\tline = currentLine\n+\t\t\t\tinContinuation = false\n+\t\t\t\tcurrentLine = \"\"\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine = strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tinContinuation = true\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t}\n+\n+\t\teqIdx := strings.Index(line, \"=\")\n+\t\tif eqIdx == -1 {\n+\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: %s\", line)",
        "comment_created_at": "2025-07-16T14:26:32+00:00",
        "comment_author": "HirazawaUi",
        "comment_body": "Are you concerned that the contents of the environment variables file might leak into events and cause security issues?",
        "pr_file_module": null
      },
      {
        "comment_id": "2210616986",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 132626,
        "pr_file": "pkg/kubelet/util/env/env_util.go",
        "discussion_id": "2210525855",
        "commented_code": "@@ -0,0 +1,110 @@\n+/*\n+Copyright 2025 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package env\n+\n+import (\n+\t\"bufio\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+// ParseEnv implements a strict parser for .env environment files,\n+// adhering to the format defined in the RFC documentation at https://smartmob-rfc.readthedocs.io/en/latest/2-dotenv.html.\n+//\n+// This function implements a strict parser for environment files similar to the requirements in the OCI and Docker env file RFCs:\n+//   - Leading whitespace is ignored for all lines.\n+//   - Blank lines (including those with only whitespace) are ignored.\n+//   - Lines starting with '#' are treated as comments and ignored.\n+//   - Each variable must be declared as VAR=VAL. Whitespace around '=' and at the end of the line is ignored.\n+//   - A backslash ('\\') at the end of a variable declaration line indicates the value continues on the next line. The lines are joined with a single space, and the backslash is not included.\n+//   - If a continuation line is interrupted by a blank line or comment, it is considered invalid and an error is returned.\n+func ParseEnv(envFilePath, key string) (string, error) {\n+\tfile, err := os.Open(envFilePath)\n+\tif err != nil {\n+\t\treturn \"\", fmt.Errorf(\"failed to open environment variable file %q: %w\", envFilePath, err)\n+\t}\n+\tdefer func() { _ = file.Close() }()\n+\n+\tscanner := bufio.NewScanner(file)\n+\tvar (\n+\t\tcurrentLine    string\n+\t\tinContinuation bool\n+\t)\n+\n+\tfor scanner.Scan() {\n+\t\tline := scanner.Text()\n+\t\tline = strings.TrimLeft(line, \" \\t\")\n+\n+\t\tif line == \"\" {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: blank line in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\t\tif strings.HasPrefix(line, \"#\") {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: comment in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif inContinuation {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine += \" \" + strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tcontinue\n+\t\t\t} else {\n+\t\t\t\tcurrentLine += \" \" + trimmed\n+\t\t\t\tline = currentLine\n+\t\t\t\tinContinuation = false\n+\t\t\t\tcurrentLine = \"\"\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine = strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tinContinuation = true\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t}\n+\n+\t\teqIdx := strings.Index(line, \"=\")\n+\t\tif eqIdx == -1 {\n+\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: %s\", line)",
        "comment_created_at": "2025-07-16T14:33:53+00:00",
        "comment_author": "toVersus",
        "comment_body": "Yes, that's exactly what I'm concerned about.",
        "pr_file_module": null
      },
      {
        "comment_id": "2210638042",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 132626,
        "pr_file": "pkg/kubelet/util/env/env_util.go",
        "discussion_id": "2210525855",
        "commented_code": "@@ -0,0 +1,110 @@\n+/*\n+Copyright 2025 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package env\n+\n+import (\n+\t\"bufio\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+// ParseEnv implements a strict parser for .env environment files,\n+// adhering to the format defined in the RFC documentation at https://smartmob-rfc.readthedocs.io/en/latest/2-dotenv.html.\n+//\n+// This function implements a strict parser for environment files similar to the requirements in the OCI and Docker env file RFCs:\n+//   - Leading whitespace is ignored for all lines.\n+//   - Blank lines (including those with only whitespace) are ignored.\n+//   - Lines starting with '#' are treated as comments and ignored.\n+//   - Each variable must be declared as VAR=VAL. Whitespace around '=' and at the end of the line is ignored.\n+//   - A backslash ('\\') at the end of a variable declaration line indicates the value continues on the next line. The lines are joined with a single space, and the backslash is not included.\n+//   - If a continuation line is interrupted by a blank line or comment, it is considered invalid and an error is returned.\n+func ParseEnv(envFilePath, key string) (string, error) {\n+\tfile, err := os.Open(envFilePath)\n+\tif err != nil {\n+\t\treturn \"\", fmt.Errorf(\"failed to open environment variable file %q: %w\", envFilePath, err)\n+\t}\n+\tdefer func() { _ = file.Close() }()\n+\n+\tscanner := bufio.NewScanner(file)\n+\tvar (\n+\t\tcurrentLine    string\n+\t\tinContinuation bool\n+\t)\n+\n+\tfor scanner.Scan() {\n+\t\tline := scanner.Text()\n+\t\tline = strings.TrimLeft(line, \" \\t\")\n+\n+\t\tif line == \"\" {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: blank line in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\t\tif strings.HasPrefix(line, \"#\") {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: comment in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif inContinuation {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine += \" \" + strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tcontinue\n+\t\t\t} else {\n+\t\t\t\tcurrentLine += \" \" + trimmed\n+\t\t\t\tline = currentLine\n+\t\t\t\tinContinuation = false\n+\t\t\t\tcurrentLine = \"\"\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine = strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tinContinuation = true\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t}\n+\n+\t\teqIdx := strings.Index(line, \"=\")\n+\t\tif eqIdx == -1 {\n+\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: %s\", line)",
        "comment_created_at": "2025-07-16T14:42:08+00:00",
        "comment_author": "HirazawaUi",
        "comment_body": "Fair.",
        "pr_file_module": null
      },
      {
        "comment_id": "2210647861",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 132626,
        "pr_file": "pkg/kubelet/util/env/env_util.go",
        "discussion_id": "2210525855",
        "commented_code": "@@ -0,0 +1,110 @@\n+/*\n+Copyright 2025 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package env\n+\n+import (\n+\t\"bufio\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+// ParseEnv implements a strict parser for .env environment files,\n+// adhering to the format defined in the RFC documentation at https://smartmob-rfc.readthedocs.io/en/latest/2-dotenv.html.\n+//\n+// This function implements a strict parser for environment files similar to the requirements in the OCI and Docker env file RFCs:\n+//   - Leading whitespace is ignored for all lines.\n+//   - Blank lines (including those with only whitespace) are ignored.\n+//   - Lines starting with '#' are treated as comments and ignored.\n+//   - Each variable must be declared as VAR=VAL. Whitespace around '=' and at the end of the line is ignored.\n+//   - A backslash ('\\') at the end of a variable declaration line indicates the value continues on the next line. The lines are joined with a single space, and the backslash is not included.\n+//   - If a continuation line is interrupted by a blank line or comment, it is considered invalid and an error is returned.\n+func ParseEnv(envFilePath, key string) (string, error) {\n+\tfile, err := os.Open(envFilePath)\n+\tif err != nil {\n+\t\treturn \"\", fmt.Errorf(\"failed to open environment variable file %q: %w\", envFilePath, err)\n+\t}\n+\tdefer func() { _ = file.Close() }()\n+\n+\tscanner := bufio.NewScanner(file)\n+\tvar (\n+\t\tcurrentLine    string\n+\t\tinContinuation bool\n+\t)\n+\n+\tfor scanner.Scan() {\n+\t\tline := scanner.Text()\n+\t\tline = strings.TrimLeft(line, \" \\t\")\n+\n+\t\tif line == \"\" {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: blank line in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\t\tif strings.HasPrefix(line, \"#\") {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: comment in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif inContinuation {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine += \" \" + strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tcontinue\n+\t\t\t} else {\n+\t\t\t\tcurrentLine += \" \" + trimmed\n+\t\t\t\tline = currentLine\n+\t\t\t\tinContinuation = false\n+\t\t\t\tcurrentLine = \"\"\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine = strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tinContinuation = true\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t}\n+\n+\t\teqIdx := strings.Index(line, \"=\")\n+\t\tif eqIdx == -1 {\n+\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: %s\", line)",
        "comment_created_at": "2025-07-16T14:45:51+00:00",
        "comment_author": "HirazawaUi",
        "comment_body": "Log the errors from ParseEnv, and return custom messages as the error.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2211944473",
    "pr_number": 132626,
    "pr_file": "pkg/kubelet/util/env/env_util.go",
    "created_at": "2025-07-17T01:26:24+00:00",
    "commented_code": "+/*\n+Copyright 2025 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package env\n+\n+import (\n+\t\"bufio\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+// ParseEnv implements a strict parser for .env environment files,\n+// adhering to the format defined in the RFC documentation at https://smartmob-rfc.readthedocs.io/en/latest/2-dotenv.html.\n+//\n+// This function implements a strict parser for environment files similar to the requirements in the OCI and Docker env file RFCs:\n+//   - Leading whitespace is ignored for all lines.\n+//   - Blank lines (including those with only whitespace) are ignored.\n+//   - Lines starting with '#' are treated as comments and ignored.\n+//   - Each variable must be declared as VAR=VAL. Whitespace around '=' and at the end of the line is ignored.\n+//   - A backslash ('\\') at the end of a variable declaration line indicates the value continues on the next line. The lines are joined with a single space, and the backslash is not included.\n+//   - If a continuation line is interrupted by a blank line or comment, it is considered invalid and an error is returned.\n+func ParseEnv(envFilePath, key string) (string, error) {\n+\tfile, err := os.Open(envFilePath)\n+\tif err != nil {\n+\t\treturn \"\", fmt.Errorf(\"failed to open environment variable file %q: %w\", envFilePath, err)\n+\t}\n+\tdefer func() { _ = file.Close() }()\n+\n+\tscanner := bufio.NewScanner(file)\n+\tvar (\n+\t\tcurrentLine    string\n+\t\tinContinuation bool\n+\t)\n+\n+\tfor scanner.Scan() {\n+\t\tline := scanner.Text()\n+\t\tline = strings.TrimLeft(line, \" \\t\")\n+\n+\t\tif line == \"\" {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: blank line in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\t\tif strings.HasPrefix(line, \"#\") {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: comment in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif inContinuation {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine += \" \" + strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tcontinue\n+\t\t\t} else {\n+\t\t\t\tcurrentLine += \" \" + trimmed\n+\t\t\t\tline = currentLine\n+\t\t\t\tinContinuation = false\n+\t\t\t\tcurrentLine = \"\"\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine = strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tinContinuation = true\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t}\n+\n+\t\teqIdx := strings.Index(line, \"=\")\n+\t\tif eqIdx == -1 {\n+\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: %s\", line)",
    "repo_full_name": "kubernetes/kubernetes",
    "discussion_comments": [
      {
        "comment_id": "2211944473",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 132626,
        "pr_file": "pkg/kubelet/util/env/env_util.go",
        "discussion_id": "2211944473",
        "commented_code": "@@ -0,0 +1,110 @@\n+/*\n+Copyright 2025 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package env\n+\n+import (\n+\t\"bufio\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+// ParseEnv implements a strict parser for .env environment files,\n+// adhering to the format defined in the RFC documentation at https://smartmob-rfc.readthedocs.io/en/latest/2-dotenv.html.\n+//\n+// This function implements a strict parser for environment files similar to the requirements in the OCI and Docker env file RFCs:\n+//   - Leading whitespace is ignored for all lines.\n+//   - Blank lines (including those with only whitespace) are ignored.\n+//   - Lines starting with '#' are treated as comments and ignored.\n+//   - Each variable must be declared as VAR=VAL. Whitespace around '=' and at the end of the line is ignored.\n+//   - A backslash ('\\') at the end of a variable declaration line indicates the value continues on the next line. The lines are joined with a single space, and the backslash is not included.\n+//   - If a continuation line is interrupted by a blank line or comment, it is considered invalid and an error is returned.\n+func ParseEnv(envFilePath, key string) (string, error) {\n+\tfile, err := os.Open(envFilePath)\n+\tif err != nil {\n+\t\treturn \"\", fmt.Errorf(\"failed to open environment variable file %q: %w\", envFilePath, err)\n+\t}\n+\tdefer func() { _ = file.Close() }()\n+\n+\tscanner := bufio.NewScanner(file)\n+\tvar (\n+\t\tcurrentLine    string\n+\t\tinContinuation bool\n+\t)\n+\n+\tfor scanner.Scan() {\n+\t\tline := scanner.Text()\n+\t\tline = strings.TrimLeft(line, \" \\t\")\n+\n+\t\tif line == \"\" {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: blank line in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\t\tif strings.HasPrefix(line, \"#\") {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: comment in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif inContinuation {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine += \" \" + strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tcontinue\n+\t\t\t} else {\n+\t\t\t\tcurrentLine += \" \" + trimmed\n+\t\t\t\tline = currentLine\n+\t\t\t\tinContinuation = false\n+\t\t\t\tcurrentLine = \"\"\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine = strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tinContinuation = true\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t}\n+\n+\t\teqIdx := strings.Index(line, \"=\")\n+\t\tif eqIdx == -1 {\n+\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: %s\", line)",
        "comment_created_at": "2025-07-17T01:26:24+00:00",
        "comment_author": "toVersus",
        "comment_body": "It looks like this was pointed out during the [KEP review](https://github.com/kubernetes/enhancements/pull/5384#discussion_r2133005946), but thinking about it more carefully, leaking the contents of the environment variable file into the kubelet logs might be a security issue, since those logs can be accessed by people other than the end users, such as cluster administrators or operators.\r\n\r\nThere appear to be use cases where a Pod needs to load environment variables from a file written by an initContainer (e.g. [one that retrieves secrets using HashiCorp Vault](https://github.com/kubernetes/kubernetes/issues/132140)), so we should be especially careful in such scenarios.\r\n\r\n@SergeyKanzhelev \r\nWDYT?",
        "pr_file_module": null
      },
      {
        "comment_id": "2213208293",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 132626,
        "pr_file": "pkg/kubelet/util/env/env_util.go",
        "discussion_id": "2211944473",
        "commented_code": "@@ -0,0 +1,110 @@\n+/*\n+Copyright 2025 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package env\n+\n+import (\n+\t\"bufio\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+// ParseEnv implements a strict parser for .env environment files,\n+// adhering to the format defined in the RFC documentation at https://smartmob-rfc.readthedocs.io/en/latest/2-dotenv.html.\n+//\n+// This function implements a strict parser for environment files similar to the requirements in the OCI and Docker env file RFCs:\n+//   - Leading whitespace is ignored for all lines.\n+//   - Blank lines (including those with only whitespace) are ignored.\n+//   - Lines starting with '#' are treated as comments and ignored.\n+//   - Each variable must be declared as VAR=VAL. Whitespace around '=' and at the end of the line is ignored.\n+//   - A backslash ('\\') at the end of a variable declaration line indicates the value continues on the next line. The lines are joined with a single space, and the backslash is not included.\n+//   - If a continuation line is interrupted by a blank line or comment, it is considered invalid and an error is returned.\n+func ParseEnv(envFilePath, key string) (string, error) {\n+\tfile, err := os.Open(envFilePath)\n+\tif err != nil {\n+\t\treturn \"\", fmt.Errorf(\"failed to open environment variable file %q: %w\", envFilePath, err)\n+\t}\n+\tdefer func() { _ = file.Close() }()\n+\n+\tscanner := bufio.NewScanner(file)\n+\tvar (\n+\t\tcurrentLine    string\n+\t\tinContinuation bool\n+\t)\n+\n+\tfor scanner.Scan() {\n+\t\tline := scanner.Text()\n+\t\tline = strings.TrimLeft(line, \" \\t\")\n+\n+\t\tif line == \"\" {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: blank line in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\t\tif strings.HasPrefix(line, \"#\") {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: comment in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif inContinuation {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine += \" \" + strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tcontinue\n+\t\t\t} else {\n+\t\t\t\tcurrentLine += \" \" + trimmed\n+\t\t\t\tline = currentLine\n+\t\t\t\tinContinuation = false\n+\t\t\t\tcurrentLine = \"\"\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine = strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tinContinuation = true\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t}\n+\n+\t\teqIdx := strings.Index(line, \"=\")\n+\t\tif eqIdx == -1 {\n+\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: %s\", line)",
        "comment_created_at": "2025-07-17T12:30:05+00:00",
        "comment_author": "HirazawaUi",
        "comment_body": "I modified the error returned by `ParseEnv` to include the line number where the error occurred, instead of the line's content.\r\n\r\nHowever, regardless, using this feature to set secrets is a strongly discouraged use case because cluster administrators can easily access the contents of the environment variable file via the emptyDir path on the node.",
        "pr_file_module": null
      },
      {
        "comment_id": "2222854083",
        "repo_full_name": "kubernetes/kubernetes",
        "pr_number": 132626,
        "pr_file": "pkg/kubelet/util/env/env_util.go",
        "discussion_id": "2211944473",
        "commented_code": "@@ -0,0 +1,110 @@\n+/*\n+Copyright 2025 The Kubernetes Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package env\n+\n+import (\n+\t\"bufio\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+// ParseEnv implements a strict parser for .env environment files,\n+// adhering to the format defined in the RFC documentation at https://smartmob-rfc.readthedocs.io/en/latest/2-dotenv.html.\n+//\n+// This function implements a strict parser for environment files similar to the requirements in the OCI and Docker env file RFCs:\n+//   - Leading whitespace is ignored for all lines.\n+//   - Blank lines (including those with only whitespace) are ignored.\n+//   - Lines starting with '#' are treated as comments and ignored.\n+//   - Each variable must be declared as VAR=VAL. Whitespace around '=' and at the end of the line is ignored.\n+//   - A backslash ('\\') at the end of a variable declaration line indicates the value continues on the next line. The lines are joined with a single space, and the backslash is not included.\n+//   - If a continuation line is interrupted by a blank line or comment, it is considered invalid and an error is returned.\n+func ParseEnv(envFilePath, key string) (string, error) {\n+\tfile, err := os.Open(envFilePath)\n+\tif err != nil {\n+\t\treturn \"\", fmt.Errorf(\"failed to open environment variable file %q: %w\", envFilePath, err)\n+\t}\n+\tdefer func() { _ = file.Close() }()\n+\n+\tscanner := bufio.NewScanner(file)\n+\tvar (\n+\t\tcurrentLine    string\n+\t\tinContinuation bool\n+\t)\n+\n+\tfor scanner.Scan() {\n+\t\tline := scanner.Text()\n+\t\tline = strings.TrimLeft(line, \" \\t\")\n+\n+\t\tif line == \"\" {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: blank line in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\t\tif strings.HasPrefix(line, \"#\") {\n+\t\t\tif inContinuation {\n+\t\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: comment in continuation\")\n+\t\t\t}\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif inContinuation {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine += \" \" + strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tcontinue\n+\t\t\t} else {\n+\t\t\t\tcurrentLine += \" \" + trimmed\n+\t\t\t\tline = currentLine\n+\t\t\t\tinContinuation = false\n+\t\t\t\tcurrentLine = \"\"\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttrimmed := strings.TrimRight(line, \" \\t\")\n+\t\t\tif strings.HasSuffix(trimmed, \"\\\\\") {\n+\t\t\t\tcurrentLine = strings.TrimRight(trimmed[:len(trimmed)-1], \" \\t\")\n+\t\t\t\tinContinuation = true\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t}\n+\n+\t\teqIdx := strings.Index(line, \"=\")\n+\t\tif eqIdx == -1 {\n+\t\t\treturn \"\", fmt.Errorf(\"invalid environment variable format: %s\", line)",
        "comment_created_at": "2025-07-22T15:05:31+00:00",
        "comment_author": "gallyamb",
        "comment_body": "I think it's heavily depends on the company's security policy. If cluster admins already have access to the secrets (e.g. at HashiCorp Vault), then this might not be an issue. Also cluster admins could have a restricted access by default, and only special role assigned by explicit auditable intent may grant them privileges to access the node directly (if I wrong here and such setup is not supported at all, could anyone correct me please)",
        "pr_file_module": null
      }
    ]
  }
]