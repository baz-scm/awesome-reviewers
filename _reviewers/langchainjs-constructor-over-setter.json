[
  {
    "discussion_id": "1414368375",
    "pr_number": 3448,
    "pr_file": "docs/core_docs/docs/integrations/chat/azure_ml.mdx",
    "created_at": "2023-12-04T19:16:07+00:00",
    "commented_code": "# Azure Machine Learning Chat\n\nYou can deploy models on Azure with the endpointUrl, apiKey, and deploymentName\nwhen creating the AzureMLChatParams to call upon later. Must import a ContentFormatter\nor create your own using the ChatContentFormatter interface.\n\n```typescript\nimport { AzureMLChatParams, LlamaContentFormatter } from \"langchain/chat_models/azure_ml\";\n\nconst model = new AzureMLModel({\n    endpointUrl: \"YOUR_ENDPOINT_URL\", \n    endpointApiKey: \"YOUR_ENDPOINT_API_KEY\", \n    deploymentName: \"YOUR_MODEL_DEPLOYMENT_NAME\",\n    contentFormatter: new LlamaContentFormatter()\n});\n\nconst res = model.call([\"Foo\"]);",
    "repo_full_name": "langchain-ai/langchainjs",
    "discussion_comments": [
      {
        "comment_id": "1414368375",
        "repo_full_name": "langchain-ai/langchainjs",
        "pr_number": 3448,
        "pr_file": "docs/core_docs/docs/integrations/chat/azure_ml.mdx",
        "discussion_id": "1414368375",
        "commented_code": "@@ -0,0 +1,19 @@\n+# Azure Machine Learning Chat\n+\n+You can deploy models on Azure with the endpointUrl, apiKey, and deploymentName\n+when creating the AzureMLChatParams to call upon later. Must import a ContentFormatter\n+or create your own using the ChatContentFormatter interface.\n+\n+```typescript\n+import { AzureMLChatParams, LlamaContentFormatter } from \"langchain/chat_models/azure_ml\";\n+\n+const model = new AzureMLModel({\n+    endpointUrl: \"YOUR_ENDPOINT_URL\", \n+    endpointApiKey: \"YOUR_ENDPOINT_API_KEY\", \n+    deploymentName: \"YOUR_MODEL_DEPLOYMENT_NAME\",\n+    contentFormatter: new LlamaContentFormatter()\n+});\n+\n+const res = model.call([\"Foo\"]);",
        "comment_created_at": "2023-12-04T19:16:07+00:00",
        "comment_author": "jacoblee93",
        "comment_body": "Prefer `.invoke()`",
        "pr_file_module": null
      },
      {
        "comment_id": "1414368463",
        "repo_full_name": "langchain-ai/langchainjs",
        "pr_number": 3448,
        "pr_file": "docs/core_docs/docs/integrations/chat/azure_ml.mdx",
        "discussion_id": "1414368375",
        "commented_code": "@@ -0,0 +1,19 @@\n+# Azure Machine Learning Chat\n+\n+You can deploy models on Azure with the endpointUrl, apiKey, and deploymentName\n+when creating the AzureMLChatParams to call upon later. Must import a ContentFormatter\n+or create your own using the ChatContentFormatter interface.\n+\n+```typescript\n+import { AzureMLChatParams, LlamaContentFormatter } from \"langchain/chat_models/azure_ml\";\n+\n+const model = new AzureMLModel({\n+    endpointUrl: \"YOUR_ENDPOINT_URL\", \n+    endpointApiKey: \"YOUR_ENDPOINT_API_KEY\", \n+    deploymentName: \"YOUR_MODEL_DEPLOYMENT_NAME\",\n+    contentFormatter: new LlamaContentFormatter()\n+});\n+\n+const res = model.call([\"Foo\"]);",
        "comment_created_at": "2023-12-04T19:16:13+00:00",
        "comment_author": "jacoblee93",
        "comment_body": "Also make sure this is tested",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1884574750",
    "pr_number": 7358,
    "pr_file": "docs/core_docs/docs/tutorials/retrievers.ipynb",
    "created_at": "2024-12-13T21:43:59+00:00",
    "commented_code": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"bf37a837-7a6a-447b-8779-38f26c585887\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Build a semantic search engine\\n\",\n    \"\\n\",\n    \"This tutorial will familiarize you with LangChain's [document loader](/docs/concepts/document_loaders), [embedding](/docs/concepts/embedding_models), and [vector store](/docs/concepts/vectorstores) abstractions. These abstractions are designed to support retrieval of data--  from (vector) databases and other sources--  for integration with LLM workflows. They are important for applications that fetch data to be reasoned over as part of model inference, as in the case of retrieval-augmented generation, or [RAG](/docs/concepts/rag) (see our RAG tutorial [here](/docs/tutorials/rag)).\\n\",\n    \"\\n\",\n    \"Here we will build a search engine over a PDF document. This will allow us to retrieve passages in the PDF that are similar to an input query.\\n\",\n    \"\\n\",\n    \"## Concepts\\n\",\n    \"\\n\",\n    \"This guide focuses on retrieval of text data. We will cover the following concepts:\\n\",\n    \"\\n\",\n    \"- Documents and document loaders;\\n\",\n    \"- Text splitters;\\n\",\n    \"- Embeddings;\\n\",\n    \"- Vector stores and retrievers.\\n\",\n    \"\\n\",\n    \"## Setup\\n\",\n    \"\\n\",\n    \"### Jupyter Notebook\\n\",\n    \"\\n\",\n    \"This and other tutorials are perhaps most conveniently run in a Jupyter notebook. See [here](https://jupyter.org/install) for instructions on how to install.\\n\",\n    \"\\n\",\n    \"### Installation\\n\",\n    \"\\n\",\n    \"This guide requires `@langchain/community` and `pdf-parse`:\\n\",\n    \"\\n\",\n    \"```{=mdx}\\n\",\n    \"import Npm2Yarn from '@theme/Npm2Yarn';\\n\",\n    \"import TabItem from '@theme/TabItem';\\n\",\n    \"import CodeBlock from \\\"@theme/CodeBlock\\\";\\n\",\n    \"\\n\",\n    \"<Npm2Yarn>\\n\",\n    \"  @langchain/community pdf-parse\\n\",\n    \"</Npm2Yarn>\\n\",\n    \"```\\n\",\n    \"\\n\",\n    \"For more details, see our [Installation guide](/docs/how_to/installation/).\\n\",\n    \"\\n\",\n    \"### LangSmith\\n\",\n    \"\\n\",\n    \"Many of the applications you build with LangChain will contain multiple steps with multiple invocations of LLM calls.\\n\",\n    \"As these applications get more and more complex, it becomes crucial to be able to inspect what exactly is going on inside your chain or agent.\\n\",\n    \"The best way to do this is with [LangSmith](https://smith.langchain.com).\\n\",\n    \"\\n\",\n    \"After you sign up at the link above, make sure to set your environment variables to start logging traces:\\n\",\n    \"\\n\",\n    \"```shell\\n\",\n    \"export LANGCHAIN_TRACING_V2=\\\"true\\\"\\n\",\n    \"export LANGCHAIN_API_KEY=\\\"...\\\"\\n\",\n    \"\\n\",\n    \"# Reduce tracing latency if you are not in a serverless environment\\n\",\n    \"# export LANGCHAIN_CALLBACKS_BACKGROUND=true\\n\",\n    \"```\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"## Documents and Document Loaders\\n\",\n    \"\\n\",\n    \"LangChain implements a [Document](https://v03.api.js.langchain.com/classes/_langchain_core.documents.Document.html) abstraction, which is intended to represent a unit of text and associated metadata. It has three attributes:\\n\",\n    \"\\n\",\n    \"- `pageContent`: a string representing the content;\\n\",\n    \"- `metadata`: records of arbitrary metadata;\\n\",\n    \"- `id`: (optional) a string identifier for the document.\\n\",\n    \"\\n\",\n    \"The `metadata` attribute can capture information about the source of the document, its relationship to other documents, and other information. Note that an individual `Document` object often represents a chunk of a larger document.\\n\",\n    \"\\n\",\n    \"We can generate sample documents when desired:\\n\",\n    \"```javascript\\n\",\n    \"import { Document } from \\\"@langchain/core/documents\\\";\\n\",\n    \"\\n\",\n    \"const documents = [\\n\",\n    \"    new Document({\\n\",\n    \"        pageContent: \\\"Dogs are great companions, known for their loyalty and friendliness.\\\",\\n\",\n    \"        metadata: {\\\"source\\\": \\\"mammal-pets-doc\\\"},\\n\",\n    \"    }),\\n\",\n    \"    new Document({\\n\",\n    \"        pageContent: \\\"Cats are independent pets that often enjoy their own space.\\\",\\n\",\n    \"        metadata: {\\\"source\\\": \\\"mammal-pets-doc\\\"},\\n\",\n    \"    }),\\n\",\n    \"]\\n\",\n    \"```\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"f8593578-5699-4b19-96c4-7c990d37a2ec\",\n   \"metadata\": {},\n   \"source\": [\n    \"However, the LangChain ecosystem implements [document loaders](/docs/concepts/document_loaders) that [integrate with hundreds of common sources](/docs/integrations/document_loaders/). This makes it easy to incorporate data from these sources into your AI application.\\n\",\n    \"\\n\",\n    \"### Loading documents\\n\",\n    \"\\n\",\n    \"Let's load a PDF into a sequence of `Document` objects. There is a sample PDF in the LangChain repo [here](https://github.com/langchain-ai/langchainjs/blob/main/docs/core_docs/data/nke-10k-2023.pdf) -- a 10-k filing for Nike from 2023. LangChain implements a [PDFLoader](/docs/integrations/document_loaders/file_loaders/pdf/) that we can use to parse the PDF:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"id\": \"67c39f96-b1f0-4610-979f-fe2d4d164e08\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\u001b[33m107\\u001b[39m\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import { PDFLoader } from \\\"@langchain/community/document_loaders/fs/pdf\\\";\\n\",\n    \"\\n\",\n    \"const loader = new PDFLoader(\\\"../../data/nke-10k-2023.pdf\\\");\\n\",\n    \"\\n\",\n    \"const docs = await loader.load();\\n\",\n    \"console.log(docs.length)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"b90f4800-bb82-416b-beba-f42ae88a5c66\",\n   \"metadata\": {},\n   \"source\": [\n    \"```{=mdx}\\n\",\n    \":::tip\\n\",\n    \"\\n\",\n    \"See [this guide](/docs/how_to/document_loader_pdf/) for more detail on PDF document loaders.\\n\",\n    \"\\n\",\n    \":::\\n\",\n    \"```\\n\",\n    \"\\n\",\n    \"`PyPDFLoader` loads one `Document` object per PDF page. For each, we can easily access:\\n\",",
    "repo_full_name": "langchain-ai/langchainjs",
    "discussion_comments": [
      {
        "comment_id": "1884574750",
        "repo_full_name": "langchain-ai/langchainjs",
        "pr_number": 7358,
        "pr_file": "docs/core_docs/docs/tutorials/retrievers.ipynb",
        "discussion_id": "1884574750",
        "commented_code": "@@ -0,0 +1,709 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"id\": \"bf37a837-7a6a-447b-8779-38f26c585887\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# Build a semantic search engine\\n\",\n+    \"\\n\",\n+    \"This tutorial will familiarize you with LangChain's [document loader](/docs/concepts/document_loaders), [embedding](/docs/concepts/embedding_models), and [vector store](/docs/concepts/vectorstores) abstractions. These abstractions are designed to support retrieval of data--  from (vector) databases and other sources--  for integration with LLM workflows. They are important for applications that fetch data to be reasoned over as part of model inference, as in the case of retrieval-augmented generation, or [RAG](/docs/concepts/rag) (see our RAG tutorial [here](/docs/tutorials/rag)).\\n\",\n+    \"\\n\",\n+    \"Here we will build a search engine over a PDF document. This will allow us to retrieve passages in the PDF that are similar to an input query.\\n\",\n+    \"\\n\",\n+    \"## Concepts\\n\",\n+    \"\\n\",\n+    \"This guide focuses on retrieval of text data. We will cover the following concepts:\\n\",\n+    \"\\n\",\n+    \"- Documents and document loaders;\\n\",\n+    \"- Text splitters;\\n\",\n+    \"- Embeddings;\\n\",\n+    \"- Vector stores and retrievers.\\n\",\n+    \"\\n\",\n+    \"## Setup\\n\",\n+    \"\\n\",\n+    \"### Jupyter Notebook\\n\",\n+    \"\\n\",\n+    \"This and other tutorials are perhaps most conveniently run in a Jupyter notebook. See [here](https://jupyter.org/install) for instructions on how to install.\\n\",\n+    \"\\n\",\n+    \"### Installation\\n\",\n+    \"\\n\",\n+    \"This guide requires `@langchain/community` and `pdf-parse`:\\n\",\n+    \"\\n\",\n+    \"```{=mdx}\\n\",\n+    \"import Npm2Yarn from '@theme/Npm2Yarn';\\n\",\n+    \"import TabItem from '@theme/TabItem';\\n\",\n+    \"import CodeBlock from \\\"@theme/CodeBlock\\\";\\n\",\n+    \"\\n\",\n+    \"<Npm2Yarn>\\n\",\n+    \"  @langchain/community pdf-parse\\n\",\n+    \"</Npm2Yarn>\\n\",\n+    \"```\\n\",\n+    \"\\n\",\n+    \"For more details, see our [Installation guide](/docs/how_to/installation/).\\n\",\n+    \"\\n\",\n+    \"### LangSmith\\n\",\n+    \"\\n\",\n+    \"Many of the applications you build with LangChain will contain multiple steps with multiple invocations of LLM calls.\\n\",\n+    \"As these applications get more and more complex, it becomes crucial to be able to inspect what exactly is going on inside your chain or agent.\\n\",\n+    \"The best way to do this is with [LangSmith](https://smith.langchain.com).\\n\",\n+    \"\\n\",\n+    \"After you sign up at the link above, make sure to set your environment variables to start logging traces:\\n\",\n+    \"\\n\",\n+    \"```shell\\n\",\n+    \"export LANGCHAIN_TRACING_V2=\\\"true\\\"\\n\",\n+    \"export LANGCHAIN_API_KEY=\\\"...\\\"\\n\",\n+    \"\\n\",\n+    \"# Reduce tracing latency if you are not in a serverless environment\\n\",\n+    \"# export LANGCHAIN_CALLBACKS_BACKGROUND=true\\n\",\n+    \"```\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"## Documents and Document Loaders\\n\",\n+    \"\\n\",\n+    \"LangChain implements a [Document](https://v03.api.js.langchain.com/classes/_langchain_core.documents.Document.html) abstraction, which is intended to represent a unit of text and associated metadata. It has three attributes:\\n\",\n+    \"\\n\",\n+    \"- `pageContent`: a string representing the content;\\n\",\n+    \"- `metadata`: records of arbitrary metadata;\\n\",\n+    \"- `id`: (optional) a string identifier for the document.\\n\",\n+    \"\\n\",\n+    \"The `metadata` attribute can capture information about the source of the document, its relationship to other documents, and other information. Note that an individual `Document` object often represents a chunk of a larger document.\\n\",\n+    \"\\n\",\n+    \"We can generate sample documents when desired:\\n\",\n+    \"```javascript\\n\",\n+    \"import { Document } from \\\"@langchain/core/documents\\\";\\n\",\n+    \"\\n\",\n+    \"const documents = [\\n\",\n+    \"    new Document({\\n\",\n+    \"        pageContent: \\\"Dogs are great companions, known for their loyalty and friendliness.\\\",\\n\",\n+    \"        metadata: {\\\"source\\\": \\\"mammal-pets-doc\\\"},\\n\",\n+    \"    }),\\n\",\n+    \"    new Document({\\n\",\n+    \"        pageContent: \\\"Cats are independent pets that often enjoy their own space.\\\",\\n\",\n+    \"        metadata: {\\\"source\\\": \\\"mammal-pets-doc\\\"},\\n\",\n+    \"    }),\\n\",\n+    \"]\\n\",\n+    \"```\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"id\": \"f8593578-5699-4b19-96c4-7c990d37a2ec\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"However, the LangChain ecosystem implements [document loaders](/docs/concepts/document_loaders) that [integrate with hundreds of common sources](/docs/integrations/document_loaders/). This makes it easy to incorporate data from these sources into your AI application.\\n\",\n+    \"\\n\",\n+    \"### Loading documents\\n\",\n+    \"\\n\",\n+    \"Let's load a PDF into a sequence of `Document` objects. There is a sample PDF in the LangChain repo [here](https://github.com/langchain-ai/langchainjs/blob/main/docs/core_docs/data/nke-10k-2023.pdf) -- a 10-k filing for Nike from 2023. LangChain implements a [PDFLoader](/docs/integrations/document_loaders/file_loaders/pdf/) that we can use to parse the PDF:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 1,\n+   \"id\": \"67c39f96-b1f0-4610-979f-fe2d4d164e08\",\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"\\u001b[33m107\\u001b[39m\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"import { PDFLoader } from \\\"@langchain/community/document_loaders/fs/pdf\\\";\\n\",\n+    \"\\n\",\n+    \"const loader = new PDFLoader(\\\"../../data/nke-10k-2023.pdf\\\");\\n\",\n+    \"\\n\",\n+    \"const docs = await loader.load();\\n\",\n+    \"console.log(docs.length)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"id\": \"b90f4800-bb82-416b-beba-f42ae88a5c66\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"```{=mdx}\\n\",\n+    \":::tip\\n\",\n+    \"\\n\",\n+    \"See [this guide](/docs/how_to/document_loader_pdf/) for more detail on PDF document loaders.\\n\",\n+    \"\\n\",\n+    \":::\\n\",\n+    \"```\\n\",\n+    \"\\n\",\n+    \"`PyPDFLoader` loads one `Document` object per PDF page. For each, we can easily access:\\n\",",
        "comment_created_at": "2024-12-13T21:43:59+00:00",
        "comment_author": "jacoblee93",
        "comment_body": "`PyPDFLoader` isn't in JS",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1435420736",
    "pr_number": 3465,
    "pr_file": "docs/core_docs/docs/integrations/toolkits/outlook.mdx",
    "created_at": "2023-12-23T01:10:04+00:00",
    "commented_code": "# Outlook Toolkit\n\n## Overview\n\nUsing this toolkit, you can integrate Microsoft Graph API functionalities into your applications to manage email interactions.\n\n## Learn Microsoft Graph\n\nMicrosoft Graph is a RESTful web API that enables you to access Microsoft Cloud service resources. With Microsoft Graph, you can integrate various Microsoft services and data, including users' emails, calendar, contacts, and more, into your applications.\n\nAfter you register your app and get authentication tokens for a user or service, you can make requests to the Microsoft Graph API.\n\nHow to get authentication tokens for a user:   \nhttps://learn.microsoft.com/en-us/graph/auth-v2-user\n\n## App register and set environment variables\nAzure App Registration for Microsoft Outlook API Integration\n\n1. Register an Application:\n   - Go to Azure Portal.\n   - Navigate to Azure Active Directory -> App registrations.\n   - Register a new application, note down the Client ID.\n\n2. Generate Client Secret:\n   - In the application settings, go to Certificates & Secrets.\n   - Create a new client secret and note down the Client Secret.\n\n3. Configure Redirect URI:\n   - In the application settings, go to Authentication.\n   - Add a Redirect URI and note down the Redirect URI.\n\n4. Permissions and Admin Consent:\n   - In API permissions, grant necessary permissions for Microsoft Graph API or Outlook API.\n   - Grant admin consent for the added permissions.\n\n6. Environment Variables:\n   - Set the following environment variables:\n\n     ```env\n     OUTLOOK_CLIENT_ID=your_client_id\n     OUTLOOK_CLIENT_SECRET=your_client_secret\n     OUTLOOK_REDIRECT_URI=your_redirect_uri\n     OUTLOOK_ACCESS_TOKEN=your_access_token\n     OUTLOOK_REFRESH_TOKEN=your_refresh_token\n\n     ```\n\n   **Keep these values secure and avoid exposing them in public repositories.**\n\n## Setup\n\nYou only need an `accessToken` to use the Outlook Toolkit, but they expire after an hour.",
    "repo_full_name": "langchain-ai/langchainjs",
    "discussion_comments": [
      {
        "comment_id": "1435420736",
        "repo_full_name": "langchain-ai/langchainjs",
        "pr_number": 3465,
        "pr_file": "docs/core_docs/docs/integrations/toolkits/outlook.mdx",
        "discussion_id": "1435420736",
        "commented_code": "@@ -0,0 +1,143 @@\n+# Outlook Toolkit\n+\n+## Overview\n+\n+Using this toolkit, you can integrate Microsoft Graph API functionalities into your applications to manage email interactions.\n+\n+## Learn Microsoft Graph\n+\n+Microsoft Graph is a RESTful web API that enables you to access Microsoft Cloud service resources. With Microsoft Graph, you can integrate various Microsoft services and data, including users' emails, calendar, contacts, and more, into your applications.\n+\n+After you register your app and get authentication tokens for a user or service, you can make requests to the Microsoft Graph API.\n+\n+How to get authentication tokens for a user:   \n+https://learn.microsoft.com/en-us/graph/auth-v2-user\n+\n+## App register and set environment variables\n+Azure App Registration for Microsoft Outlook API Integration\n+\n+1. Register an Application:\n+   - Go to Azure Portal.\n+   - Navigate to Azure Active Directory -> App registrations.\n+   - Register a new application, note down the Client ID.\n+\n+2. Generate Client Secret:\n+   - In the application settings, go to Certificates & Secrets.\n+   - Create a new client secret and note down the Client Secret.\n+\n+3. Configure Redirect URI:\n+   - In the application settings, go to Authentication.\n+   - Add a Redirect URI and note down the Redirect URI.\n+\n+4. Permissions and Admin Consent:\n+   - In API permissions, grant necessary permissions for Microsoft Graph API or Outlook API.\n+   - Grant admin consent for the added permissions.\n+\n+6. Environment Variables:\n+   - Set the following environment variables:\n+\n+     ```env\n+     OUTLOOK_CLIENT_ID=your_client_id\n+     OUTLOOK_CLIENT_SECRET=your_client_secret\n+     OUTLOOK_REDIRECT_URI=your_redirect_uri\n+     OUTLOOK_ACCESS_TOKEN=your_access_token\n+     OUTLOOK_REFRESH_TOKEN=your_refresh_token\n+\n+     ```\n+\n+   **Keep these values secure and avoid exposing them in public repositories.**\n+\n+## Setup\n+\n+You only need an `accessToken` to use the Outlook Toolkit, but they expire after an hour.",
        "comment_created_at": "2023-12-23T01:10:04+00:00",
        "comment_author": "jacoblee93",
        "comment_body": "So you need to click a link every hour to use this integration?",
        "pr_file_module": null
      },
      {
        "comment_id": "1435422188",
        "repo_full_name": "langchain-ai/langchainjs",
        "pr_number": 3465,
        "pr_file": "docs/core_docs/docs/integrations/toolkits/outlook.mdx",
        "discussion_id": "1435420736",
        "commented_code": "@@ -0,0 +1,143 @@\n+# Outlook Toolkit\n+\n+## Overview\n+\n+Using this toolkit, you can integrate Microsoft Graph API functionalities into your applications to manage email interactions.\n+\n+## Learn Microsoft Graph\n+\n+Microsoft Graph is a RESTful web API that enables you to access Microsoft Cloud service resources. With Microsoft Graph, you can integrate various Microsoft services and data, including users' emails, calendar, contacts, and more, into your applications.\n+\n+After you register your app and get authentication tokens for a user or service, you can make requests to the Microsoft Graph API.\n+\n+How to get authentication tokens for a user:   \n+https://learn.microsoft.com/en-us/graph/auth-v2-user\n+\n+## App register and set environment variables\n+Azure App Registration for Microsoft Outlook API Integration\n+\n+1. Register an Application:\n+   - Go to Azure Portal.\n+   - Navigate to Azure Active Directory -> App registrations.\n+   - Register a new application, note down the Client ID.\n+\n+2. Generate Client Secret:\n+   - In the application settings, go to Certificates & Secrets.\n+   - Create a new client secret and note down the Client Secret.\n+\n+3. Configure Redirect URI:\n+   - In the application settings, go to Authentication.\n+   - Add a Redirect URI and note down the Redirect URI.\n+\n+4. Permissions and Admin Consent:\n+   - In API permissions, grant necessary permissions for Microsoft Graph API or Outlook API.\n+   - Grant admin consent for the added permissions.\n+\n+6. Environment Variables:\n+   - Set the following environment variables:\n+\n+     ```env\n+     OUTLOOK_CLIENT_ID=your_client_id\n+     OUTLOOK_CLIENT_SECRET=your_client_secret\n+     OUTLOOK_REDIRECT_URI=your_redirect_uri\n+     OUTLOOK_ACCESS_TOKEN=your_access_token\n+     OUTLOOK_REFRESH_TOKEN=your_refresh_token\n+\n+     ```\n+\n+   **Keep these values secure and avoid exposing them in public repositories.**\n+\n+## Setup\n+\n+You only need an `accessToken` to use the Outlook Toolkit, but they expire after an hour.",
        "comment_created_at": "2023-12-23T01:16:12+00:00",
        "comment_author": "Qi123123Li",
        "comment_body": "Typically, with the integration, you don't need to manually click a link every hour. Instead, once you obtain an accessToken, there is usually a corresponding refreshToken provided. The AuthFlowREST class can utilize this refreshToken along with clientId, clientSecret, and redirectUri to refresh the expired accessToken automatically. This eliminates the need for manual intervention and keeps the process secure without the necessity for a continuous login or keeping a server open.",
        "pr_file_module": null
      },
      {
        "comment_id": "1435422366",
        "repo_full_name": "langchain-ai/langchainjs",
        "pr_number": 3465,
        "pr_file": "docs/core_docs/docs/integrations/toolkits/outlook.mdx",
        "discussion_id": "1435420736",
        "commented_code": "@@ -0,0 +1,143 @@\n+# Outlook Toolkit\n+\n+## Overview\n+\n+Using this toolkit, you can integrate Microsoft Graph API functionalities into your applications to manage email interactions.\n+\n+## Learn Microsoft Graph\n+\n+Microsoft Graph is a RESTful web API that enables you to access Microsoft Cloud service resources. With Microsoft Graph, you can integrate various Microsoft services and data, including users' emails, calendar, contacts, and more, into your applications.\n+\n+After you register your app and get authentication tokens for a user or service, you can make requests to the Microsoft Graph API.\n+\n+How to get authentication tokens for a user:   \n+https://learn.microsoft.com/en-us/graph/auth-v2-user\n+\n+## App register and set environment variables\n+Azure App Registration for Microsoft Outlook API Integration\n+\n+1. Register an Application:\n+   - Go to Azure Portal.\n+   - Navigate to Azure Active Directory -> App registrations.\n+   - Register a new application, note down the Client ID.\n+\n+2. Generate Client Secret:\n+   - In the application settings, go to Certificates & Secrets.\n+   - Create a new client secret and note down the Client Secret.\n+\n+3. Configure Redirect URI:\n+   - In the application settings, go to Authentication.\n+   - Add a Redirect URI and note down the Redirect URI.\n+\n+4. Permissions and Admin Consent:\n+   - In API permissions, grant necessary permissions for Microsoft Graph API or Outlook API.\n+   - Grant admin consent for the added permissions.\n+\n+6. Environment Variables:\n+   - Set the following environment variables:\n+\n+     ```env\n+     OUTLOOK_CLIENT_ID=your_client_id\n+     OUTLOOK_CLIENT_SECRET=your_client_secret\n+     OUTLOOK_REDIRECT_URI=your_redirect_uri\n+     OUTLOOK_ACCESS_TOKEN=your_access_token\n+     OUTLOOK_REFRESH_TOKEN=your_refresh_token\n+\n+     ```\n+\n+   **Keep these values secure and avoid exposing them in public repositories.**\n+\n+## Setup\n+\n+You only need an `accessToken` to use the Outlook Toolkit, but they expire after an hour.",
        "comment_created_at": "2023-12-23T01:16:58+00:00",
        "comment_author": "oscarchen178",
        "comment_body": "No, I don't need to click the link every hour. If you have refreshToken and other credentials, the authFlowRefresh class will get a new valid token for you without the login step. Or if using authFlowToken, the same instance of the class only need to login once and then it will make use of the refreshToken.",
        "pr_file_module": null
      },
      {
        "comment_id": "1435433693",
        "repo_full_name": "langchain-ai/langchainjs",
        "pr_number": 3465,
        "pr_file": "docs/core_docs/docs/integrations/toolkits/outlook.mdx",
        "discussion_id": "1435420736",
        "commented_code": "@@ -0,0 +1,143 @@\n+# Outlook Toolkit\n+\n+## Overview\n+\n+Using this toolkit, you can integrate Microsoft Graph API functionalities into your applications to manage email interactions.\n+\n+## Learn Microsoft Graph\n+\n+Microsoft Graph is a RESTful web API that enables you to access Microsoft Cloud service resources. With Microsoft Graph, you can integrate various Microsoft services and data, including users' emails, calendar, contacts, and more, into your applications.\n+\n+After you register your app and get authentication tokens for a user or service, you can make requests to the Microsoft Graph API.\n+\n+How to get authentication tokens for a user:   \n+https://learn.microsoft.com/en-us/graph/auth-v2-user\n+\n+## App register and set environment variables\n+Azure App Registration for Microsoft Outlook API Integration\n+\n+1. Register an Application:\n+   - Go to Azure Portal.\n+   - Navigate to Azure Active Directory -> App registrations.\n+   - Register a new application, note down the Client ID.\n+\n+2. Generate Client Secret:\n+   - In the application settings, go to Certificates & Secrets.\n+   - Create a new client secret and note down the Client Secret.\n+\n+3. Configure Redirect URI:\n+   - In the application settings, go to Authentication.\n+   - Add a Redirect URI and note down the Redirect URI.\n+\n+4. Permissions and Admin Consent:\n+   - In API permissions, grant necessary permissions for Microsoft Graph API or Outlook API.\n+   - Grant admin consent for the added permissions.\n+\n+6. Environment Variables:\n+   - Set the following environment variables:\n+\n+     ```env\n+     OUTLOOK_CLIENT_ID=your_client_id\n+     OUTLOOK_CLIENT_SECRET=your_client_secret\n+     OUTLOOK_REDIRECT_URI=your_redirect_uri\n+     OUTLOOK_ACCESS_TOKEN=your_access_token\n+     OUTLOOK_REFRESH_TOKEN=your_refresh_token\n+\n+     ```\n+\n+   **Keep these values secure and avoid exposing them in public repositories.**\n+\n+## Setup\n+\n+You only need an `accessToken` to use the Outlook Toolkit, but they expire after an hour.",
        "comment_created_at": "2023-12-23T01:59:58+00:00",
        "comment_author": "jacoblee93",
        "comment_body": "I don't fully understand from the docs -  is there a way to just get tht refresh token during setup and just use that?",
        "pr_file_module": null
      },
      {
        "comment_id": "1435445127",
        "repo_full_name": "langchain-ai/langchainjs",
        "pr_number": 3465,
        "pr_file": "docs/core_docs/docs/integrations/toolkits/outlook.mdx",
        "discussion_id": "1435420736",
        "commented_code": "@@ -0,0 +1,143 @@\n+# Outlook Toolkit\n+\n+## Overview\n+\n+Using this toolkit, you can integrate Microsoft Graph API functionalities into your applications to manage email interactions.\n+\n+## Learn Microsoft Graph\n+\n+Microsoft Graph is a RESTful web API that enables you to access Microsoft Cloud service resources. With Microsoft Graph, you can integrate various Microsoft services and data, including users' emails, calendar, contacts, and more, into your applications.\n+\n+After you register your app and get authentication tokens for a user or service, you can make requests to the Microsoft Graph API.\n+\n+How to get authentication tokens for a user:   \n+https://learn.microsoft.com/en-us/graph/auth-v2-user\n+\n+## App register and set environment variables\n+Azure App Registration for Microsoft Outlook API Integration\n+\n+1. Register an Application:\n+   - Go to Azure Portal.\n+   - Navigate to Azure Active Directory -> App registrations.\n+   - Register a new application, note down the Client ID.\n+\n+2. Generate Client Secret:\n+   - In the application settings, go to Certificates & Secrets.\n+   - Create a new client secret and note down the Client Secret.\n+\n+3. Configure Redirect URI:\n+   - In the application settings, go to Authentication.\n+   - Add a Redirect URI and note down the Redirect URI.\n+\n+4. Permissions and Admin Consent:\n+   - In API permissions, grant necessary permissions for Microsoft Graph API or Outlook API.\n+   - Grant admin consent for the added permissions.\n+\n+6. Environment Variables:\n+   - Set the following environment variables:\n+\n+     ```env\n+     OUTLOOK_CLIENT_ID=your_client_id\n+     OUTLOOK_CLIENT_SECRET=your_client_secret\n+     OUTLOOK_REDIRECT_URI=your_redirect_uri\n+     OUTLOOK_ACCESS_TOKEN=your_access_token\n+     OUTLOOK_REFRESH_TOKEN=your_refresh_token\n+\n+     ```\n+\n+   **Keep these values secure and avoid exposing them in public repositories.**\n+\n+## Setup\n+\n+You only need an `accessToken` to use the Outlook Toolkit, but they expire after an hour.",
        "comment_created_at": "2023-12-23T02:42:15+00:00",
        "comment_author": "oscarchen178",
        "comment_body": "Sorry for the confusion, the athentication flow to get the refresh token is to send request with clientId, clientSecret and redirectUri, and then open the link from response and login, after that the server will receive a code, then you send the code with other credentials to request refreshToken and accessToken. The authFlowREST implements this flow, so for this class only need clientId, clientSecret and redirectUri in .env. But this class does not store the tokens in env. You can use other ways like postman to get the refreshToken. The default expiry time of refresh token is much longer.\r\nThis video may help, https://www.youtube.com/watch?v=NAtiNpwnivI&t=309s",
        "pr_file_module": null
      }
    ]
  }
]