[
  {
    "discussion_id": "2246241680",
    "pr_number": 9226,
    "pr_file": "docs/docs/Deployment/deployment-enterprise-database.mdx",
    "created_at": "2025-07-31T19:44:10+00:00",
    "commented_code": "+---\n+title: Langflow database guide for enterprise DBAs\n+slug: /deployment-enterprise-database\n+---\n+\n+import Tabs from '@theme/Tabs';\n+import TabItem from '@theme/TabItem';\n+\n+This guide is designed for enterprise database administrators (DBAs) and operators responsible for deploying and managing Langflow in production environments.\n+\n+Langflow relies on a database to store critical data such as flow configurations, user accounts, project collections, configuration settings, and execution logs.\n+While SQLite is the default database, PostgreSQL is recommended for production due to its scalability, performance, and robustness.\n+\n+## Langflow database usage\n+\n+Langflow uses its database to manage core internal functions essential for both the IDE (used by developers through the Langflow UI) and runtime (for production flows). The database is integral to the application's operation because it stores the following information:\n+\n+* **Flow Configurations**: Definitions of flows, including nodes, edges, and components, stored as JSON or database records.\n+* **User Data**: User accounts, permissions, and settings for multi-user environments.\n+* **Project Collections**: Metadata for community and custom projects shared across users.\n+* **Configuration Settings**: Application settings, such as API keys and environment variables.\n+* **Execution Logs**: Records of flow execution and system activity for monitoring and debugging.\n+\n+The database is accessed during startup, flow execution, user interactions, and administrative tasks. Its availability critical for most Langflow operations.\n+\n+## Configure Langflow with PostgreSQL\n+\n+Langflow defaults to SQLite but supports PostgreSQL for production environments, offering better performance and scalability. Below are the steps to configure Langflow to use PostgreSQL, suitable for standalone or containerized deployments.\n+\n+1. Set up PostgreSQL:\n+   Deploy a PostgreSQL instance (version 12 or higher recommended) using a local server, Docker, or a managed cloud service. Create a database for Langflow and a user with appropriate permissions.\n+\n+2. Obtain the connection string in the format `postgresql://user:password@host:port/dbname`, such as`postgresql://langflow:securepassword@postgres:5432/langflow`.\n+\n+   For High Availability setups, use a virtual IP or proxy hostname. For more information, see [High Availability for PostgreSQL](#high-availability-ha-for-postgresql).\n+\n+3. Configure Langflow with the `.env` or `docker-compose.yml` files.\n+\n+    <Tabs groupId=\"environment\">\n+      <TabItem value=\".env\" label=\".env\" default>\n+\n+        i. Create a `.env` file in the Langflow directory: `touch .env`.\n+\n+        ii. Add the connection string to the `.env` file: `LANGFLOW_DATABASE_URL=\"postgresql://langflow:securepassword@postgres:5432/langflow\"`.\n+\n+        Reference the `.env.example` file from the Langflow GitHub Repository for additional settings.\n+\n+      </TabItem>\n+      <TabItem value=\"docker-compose.yml\" label=\"docker-compose.yml\">\n+\n+        Use or modify the example `docker-compose.yml` from the Langflow GitHub Repository.\n+\n+        ```yaml\n+        version: '3'\n+        services:\n+          langflow:\n+            image: langflowai/langflow:latest\n+            ports:\n+              - \"7860:7860\"\n+            environment:\n+              - LANGFLOW_DATABASE_URL=postgresql://langflow:langflow@postgres:5432/langflow\n+          postgres:\n+            image: postgres:16\n+            ports:\n+              - \"5432:5432\"\n+            environment:\n+              - POSTGRES_USER=langflow\n+              - POSTGRES_PASSWORD=langflow\n+              - POSTGRES_DB=langflow\n+            volumes:\n+              - langflow-postgres:/var/lib/postgresql/data\n+        volumes:\n+          - langflow-postgres:\n+        ```\n+\n+      </TabItem>\n+    </Tabs>\n+\n+\n+4. Start Langflow with the value for the connection string.\n+\n+    <Tabs groupId=\"environment\">\n+      <TabItem value=\".env\" label=\".env\" default>\n+\n+      `uv run langflow run --env-file .env`\n+\n+      </TabItem>\n+      <TabItem value=\"docker-compose.yml\" label=\"docker-compose.yml\">\n+\n+      Navigate to the directory containing `docker-compose.yml` and run `docker-compose up`.\n+\n+      </TabItem>\n+    </Tabs>\n+\n+5. Optional: Run migrations.\n+   Langflow uses SQLAlchemy and Alembic to manage its database schema. When you first connect to PostgreSQL, Langflow will automatically run migrations to create the necessary tables. To manually run migrations, use `langflow migration --no-test`. To preview changes before applying them, use `langflow migration --test`.\n+\n+5. To verify the configuration, create a test flow using the UI or API and inspect the PostgreSQL database to confirm new tables and activity. You can query the database container with `docker exec -it <postgres-container> psql -U langflow -d langflow` or use `SELECT * FROM pg_stat_activity WHERE datname = 'langflow';` to verify connectivity.",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2246241680",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 9226,
        "pr_file": "docs/docs/Deployment/deployment-enterprise-database.mdx",
        "discussion_id": "2246241680",
        "commented_code": "@@ -0,0 +1,271 @@\n+---\n+title: Langflow database guide for enterprise DBAs\n+slug: /deployment-enterprise-database\n+---\n+\n+import Tabs from '@theme/Tabs';\n+import TabItem from '@theme/TabItem';\n+\n+This guide is designed for enterprise database administrators (DBAs) and operators responsible for deploying and managing Langflow in production environments.\n+\n+Langflow relies on a database to store critical data such as flow configurations, user accounts, project collections, configuration settings, and execution logs.\n+While SQLite is the default database, PostgreSQL is recommended for production due to its scalability, performance, and robustness.\n+\n+## Langflow database usage\n+\n+Langflow uses its database to manage core internal functions essential for both the IDE (used by developers through the Langflow UI) and runtime (for production flows). The database is integral to the application's operation because it stores the following information:\n+\n+* **Flow Configurations**: Definitions of flows, including nodes, edges, and components, stored as JSON or database records.\n+* **User Data**: User accounts, permissions, and settings for multi-user environments.\n+* **Project Collections**: Metadata for community and custom projects shared across users.\n+* **Configuration Settings**: Application settings, such as API keys and environment variables.\n+* **Execution Logs**: Records of flow execution and system activity for monitoring and debugging.\n+\n+The database is accessed during startup, flow execution, user interactions, and administrative tasks. Its availability critical for most Langflow operations.\n+\n+## Configure Langflow with PostgreSQL\n+\n+Langflow defaults to SQLite but supports PostgreSQL for production environments, offering better performance and scalability. Below are the steps to configure Langflow to use PostgreSQL, suitable for standalone or containerized deployments.\n+\n+1. Set up PostgreSQL:\n+   Deploy a PostgreSQL instance (version 12 or higher recommended) using a local server, Docker, or a managed cloud service. Create a database for Langflow and a user with appropriate permissions.\n+\n+2. Obtain the connection string in the format `postgresql://user:password@host:port/dbname`, such as`postgresql://langflow:securepassword@postgres:5432/langflow`.\n+\n+   For High Availability setups, use a virtual IP or proxy hostname. For more information, see [High Availability for PostgreSQL](#high-availability-ha-for-postgresql).\n+\n+3. Configure Langflow with the `.env` or `docker-compose.yml` files.\n+\n+    <Tabs groupId=\"environment\">\n+      <TabItem value=\".env\" label=\".env\" default>\n+\n+        i. Create a `.env` file in the Langflow directory: `touch .env`.\n+\n+        ii. Add the connection string to the `.env` file: `LANGFLOW_DATABASE_URL=\"postgresql://langflow:securepassword@postgres:5432/langflow\"`.\n+\n+        Reference the `.env.example` file from the Langflow GitHub Repository for additional settings.\n+\n+      </TabItem>\n+      <TabItem value=\"docker-compose.yml\" label=\"docker-compose.yml\">\n+\n+        Use or modify the example `docker-compose.yml` from the Langflow GitHub Repository.\n+\n+        ```yaml\n+        version: '3'\n+        services:\n+          langflow:\n+            image: langflowai/langflow:latest\n+            ports:\n+              - \"7860:7860\"\n+            environment:\n+              - LANGFLOW_DATABASE_URL=postgresql://langflow:langflow@postgres:5432/langflow\n+          postgres:\n+            image: postgres:16\n+            ports:\n+              - \"5432:5432\"\n+            environment:\n+              - POSTGRES_USER=langflow\n+              - POSTGRES_PASSWORD=langflow\n+              - POSTGRES_DB=langflow\n+            volumes:\n+              - langflow-postgres:/var/lib/postgresql/data\n+        volumes:\n+          - langflow-postgres:\n+        ```\n+\n+      </TabItem>\n+    </Tabs>\n+\n+\n+4. Start Langflow with the value for the connection string.\n+\n+    <Tabs groupId=\"environment\">\n+      <TabItem value=\".env\" label=\".env\" default>\n+\n+      `uv run langflow run --env-file .env`\n+\n+      </TabItem>\n+      <TabItem value=\"docker-compose.yml\" label=\"docker-compose.yml\">\n+\n+      Navigate to the directory containing `docker-compose.yml` and run `docker-compose up`.\n+\n+      </TabItem>\n+    </Tabs>\n+\n+5. Optional: Run migrations.\n+   Langflow uses SQLAlchemy and Alembic to manage its database schema. When you first connect to PostgreSQL, Langflow will automatically run migrations to create the necessary tables. To manually run migrations, use `langflow migration --no-test`. To preview changes before applying them, use `langflow migration --test`.\n+\n+5. To verify the configuration, create a test flow using the UI or API and inspect the PostgreSQL database to confirm new tables and activity. You can query the database container with `docker exec -it <postgres-container> psql -U langflow -d langflow` or use `SELECT * FROM pg_stat_activity WHERE datname = 'langflow';` to verify connectivity.",
        "comment_created_at": "2025-07-31T19:44:10+00:00",
        "comment_author": "aimurphy",
        "comment_body": "~~~suggestion\r\n5. To verify the configuration, create any flow using the Langflow UI or API, and then query your database to confirm new tables and activity. The content of the flow doesn't matter; you only need to confirm that the flow is stored in your PostgreSQL database.\r\n    \r\n    * Query the database container:\r\n    \r\n        ```\r\n        docker exec -it <postgres-container> psql -U langflow -d langflow\r\n        ```\r\n    \r\n    * Use SQL:\r\n    \r\n        ```\r\n        SELECT * FROM pg_stat_activity WHERE datname = 'langflow';\r\n        ```\r\n~~~",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2229360650",
    "pr_number": 9174,
    "pr_file": "docs/docs/Configuration/configuration-custom-database.mdx",
    "created_at": "2025-07-24T19:14:08+00:00",
    "commented_code": "---\n Langflow's default database is [SQLite](https://www.sqlite.org/docs.html), but you can configure Langflow to use PostgreSQL instead.\n \n-This guide walks you through setting up an external database for Langflow by replacing the default SQLite connection string `sqlite:///./langflow.db` with PostgreSQL.\n+This guide walks you through setting up an external database for Langflow by replacing the default SQLite connection string `sqlite:///./langflow.db` with PostgreSQL, both in local and containerized environments.\n \n-## Prerequisite\n+In this configuration, all structured application data from Langflow including flows, message history, and logs, is instead managed by PostgreSQL.\n+PostgreSQL is better suited for production environments due to its robust support for concurrent users, advanced data integrity features, and scalability.\n+Langflow can more efficiently handle multiple users and larger workloads by using PostgreSQL as the database.\n \n-* A [PostgreSQL](https://www.pgadmin.org/download/) database\n+## Prerequisites\n \n-## Connect Langflow to PostgreSQL\n+- [Install and start Langflow](/get-started-installation)\n+- A [PostgreSQL](https://www.pgadmin.org/download/) database",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2229360650",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 9174,
        "pr_file": "docs/docs/Configuration/configuration-custom-database.mdx",
        "discussion_id": "2229360650",
        "commented_code": "@@ -4,174 +4,154 @@ slug: /configuration-custom-database\n ---\n Langflow's default database is [SQLite](https://www.sqlite.org/docs.html), but you can configure Langflow to use PostgreSQL instead.\n \n-This guide walks you through setting up an external database for Langflow by replacing the default SQLite connection string `sqlite:///./langflow.db` with PostgreSQL.\n+This guide walks you through setting up an external database for Langflow by replacing the default SQLite connection string `sqlite:///./langflow.db` with PostgreSQL, both in local and containerized environments.\n \n-## Prerequisite\n+In this configuration, all structured application data from Langflow including flows, message history, and logs, is instead managed by PostgreSQL.\n+PostgreSQL is better suited for production environments due to its robust support for concurrent users, advanced data integrity features, and scalability.\n+Langflow can more efficiently handle multiple users and larger workloads by using PostgreSQL as the database.\n \n-* A [PostgreSQL](https://www.pgadmin.org/download/) database\n+## Prerequisites\n \n-## Connect Langflow to PostgreSQL\n+- [Install and start Langflow](/get-started-installation)\n+- A [PostgreSQL](https://www.pgadmin.org/download/) database",
        "comment_created_at": "2025-07-24T19:14:08+00:00",
        "comment_author": "aimurphy",
        "comment_body": "```suggestion\r\n- Create a [PostgreSQL](https://www.pgadmin.org/download/) database\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2229382659",
    "pr_number": 9174,
    "pr_file": "docs/docs/Configuration/configuration-custom-database.mdx",
    "created_at": "2025-07-24T19:21:51+00:00",
    "commented_code": "---\n Langflow's default database is [SQLite](https://www.sqlite.org/docs.html), but you can configure Langflow to use PostgreSQL instead.\n \n-This guide walks you through setting up an external database for Langflow by replacing the default SQLite connection string `sqlite:///./langflow.db` with PostgreSQL.\n+This guide walks you through setting up an external database for Langflow by replacing the default SQLite connection string `sqlite:///./langflow.db` with PostgreSQL, both in local and containerized environments.\n \n-## Prerequisite\n+In this configuration, all structured application data from Langflow including flows, message history, and logs, is instead managed by PostgreSQL.\n+PostgreSQL is better suited for production environments due to its robust support for concurrent users, advanced data integrity features, and scalability.\n+Langflow can more efficiently handle multiple users and larger workloads by using PostgreSQL as the database.\n \n-* A [PostgreSQL](https://www.pgadmin.org/download/) database\n+## Prerequisites\n \n-## Connect Langflow to PostgreSQL\n+- [Install and start Langflow](/get-started-installation)\n+- A [PostgreSQL](https://www.pgadmin.org/download/) database\n \n-1. If Langflow is running, quit Langflow.\n+## Connect Langflow to a local PostgreSQL database\n+\n+1. If Langflow is running, stop Langflow with <kbd>Ctrl+C</kbd>.\n \n 2. Find your PostgreSQL database's connection string in the format `postgresql://user:password@host:port/dbname`.\n \n-  The hostname in your connection string depends on how you're running PostgreSQL:\n+    The hostname in your connection string depends on how you're running PostgreSQL:\n \n-  - If you're running PostgreSQL directly on your machine, use `localhost`.\n-  - If you're running PostgreSQL in Docker Compose, use the service name, such as `postgres`.\n-  - If you're running PostgreSQL in a separate Docker container with `docker run`, use the container's IP address or network alias.\n+    - If you're running PostgreSQL directly on your machine, use `localhost`.\n+    - If you're running PostgreSQL in Docker Compose, use the service name, such as `postgres`.\n+    - If you're running PostgreSQL in a separate Docker container with `docker run`, use the container's IP address or network alias.\n+    - If you're running a cloud-hosted PostgreSQL, your provider will share your connection string, which includes a username and password.\n \n-3. Create a Langflow `.env` file if you don't already have one:\n+3. Create a Langflow `.env` file.\n \n     ```\n     touch .env\n     ```\n \n     You can use the [`.env.example`](https://github.com/langflow-ai/langflow/blob/main/.env.example) file in the Langflow repository as a template for your own `.env` file.\n \n-4. In your `.env` file, set `LANGFLOW_DATABASE_URL` to your your PostgreSQL connection string:\n+4. In your `.env` file, set `LANGFLOW_DATABASE_URL` to your PostgreSQL connection string.\n \n     ```text\n     LANGFLOW_DATABASE_URL=\"postgresql://user:password@localhost:5432/dbname\"\n     ```\n \n-5. Save your changes, and then start Langflow with your `.env` file:\n+5. Save your changes, and then start Langflow with your `.env` file.\n \n     ```bash\n     uv run langflow run --env-file .env\n     ```\n \n 6. In Langflow, run any flow to create traffic.\n \n-7. Inspect your PostgreSQL deployment's tables and activity to verify that new tables and traffic were created after you ran a flow.\n+7. Inspect your PostgreSQL database's tables and activity to verify that new tables and traffic were created after you ran a flow.\n \n-## Example Langflow and PostgreSQL docker-compose.yml\n+## Deploy Langflow and PostgreSQL containers with docker-compose.yml\n \n-Docker Compose creates an isolated network for all services defined in `docker-compose.yml`. This ensures that the services can communicate with each other using their service names as hostnames, such as `postgres` in the database URL.\n-In contrast, if you run PostgreSQL separately with `docker run`, it launches in a different network than the Langflow container, and this prevents Langflow from connecting to PostgreSQL using the service name.\n+Use the [`docker-compose.yml`](https://github.com/langflow-ai/langflow/blob/main/docker_example/docker-compose.yml) file in the Langflow repository to launch Langflow and PostgreSQL containers in the same Docker network, ensuring proper connectivity between services.\n \n-You can use the [`docker-compose.yml`](https://github.com/langflow-ai/langflow/blob/main/docker_example/docker-compose.yml) file in the Langflow repository to launches Langflow and PostgreSQL containers in the same Docker network, ensuring proper connectivity between services.\n This configuration also sets up persistent volumes for both Langflow and PostgreSQL data.\n+Persistent volumes map directories inside of containers to storage on the host machine, so c data survives container restarts.\n \n-To start the services, navigate to the `/docker_example` directory, and then run `docker-compose up`:\n-\n-```yaml\n-services:\n-  langflow:\n-    image: langflowai/langflow:latest    # or another version tag on https://hub.docker.com/r/langflowai/langflow\n-    pull_policy: always                   # set to 'always' when using 'latest' image\n-    ports:\n-      - \"7860:7860\"\n-    depends_on:\n-      - postgres\n-    environment:\n-      - LANGFLOW_DATABASE_URL=postgresql://langflow:langflow@postgres:5432/langflow\n-      # This variable defines where the logs, file storage, monitor data, and secret keys are stored.\n-      - LANGFLOW_CONFIG_DIR=app/langflow\n-    volumes:\n-      - langflow-data:/app/langflow\n-\n-  postgres:\n-    image: postgres:16\n-    environment:\n-      POSTGRES_USER: langflow\n-      POSTGRES_PASSWORD: langflow\n-      POSTGRES_DB: langflow\n-    ports:\n-      - \"5432:5432\"\n-    volumes:\n-      - langflow-postgres:/var/lib/postgresql/data\n+Docker Compose creates an isolated network for all services defined in `docker-compose.yml`. This ensures that the services can communicate with each other using their service names as hostnames, such as `postgres` in the database URL.\n+In contrast, if you run PostgreSQL separately with `docker run`, it launches in a different network than the Langflow container, and this prevents Langflow from connecting to PostgreSQL using the service name.\n \n-volumes:\n-  langflow-postgres:    # Persistent volume for PostgreSQL data\n-  langflow-data:        # Persistent volume for Langflow data\n-```\n+To start the Langflow and PostgreSQL services, navigate to the `langflow/docker_example` directory, and then run `docker-compose up`.\n \n-## Deploy multiple Langflow instances with a shared database\n+## Deploy multiple Langflow instances with a shared PostgreSQL database\n \n To configure multiple Langflow instances that share the same PostgreSQL database, modify your `docker-compose.yml` file to include multiple Langflow services.\n \n-Use environment variables for more centralized configuration management:\n+This example populates the values in `docker-compose.yml` with values from your `.env` file.",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2229382659",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 9174,
        "pr_file": "docs/docs/Configuration/configuration-custom-database.mdx",
        "discussion_id": "2229382659",
        "commented_code": "@@ -4,174 +4,154 @@ slug: /configuration-custom-database\n ---\n Langflow's default database is [SQLite](https://www.sqlite.org/docs.html), but you can configure Langflow to use PostgreSQL instead.\n \n-This guide walks you through setting up an external database for Langflow by replacing the default SQLite connection string `sqlite:///./langflow.db` with PostgreSQL.\n+This guide walks you through setting up an external database for Langflow by replacing the default SQLite connection string `sqlite:///./langflow.db` with PostgreSQL, both in local and containerized environments.\n \n-## Prerequisite\n+In this configuration, all structured application data from Langflow including flows, message history, and logs, is instead managed by PostgreSQL.\n+PostgreSQL is better suited for production environments due to its robust support for concurrent users, advanced data integrity features, and scalability.\n+Langflow can more efficiently handle multiple users and larger workloads by using PostgreSQL as the database.\n \n-* A [PostgreSQL](https://www.pgadmin.org/download/) database\n+## Prerequisites\n \n-## Connect Langflow to PostgreSQL\n+- [Install and start Langflow](/get-started-installation)\n+- A [PostgreSQL](https://www.pgadmin.org/download/) database\n \n-1. If Langflow is running, quit Langflow.\n+## Connect Langflow to a local PostgreSQL database\n+\n+1. If Langflow is running, stop Langflow with <kbd>Ctrl+C</kbd>.\n \n 2. Find your PostgreSQL database's connection string in the format `postgresql://user:password@host:port/dbname`.\n \n-  The hostname in your connection string depends on how you're running PostgreSQL:\n+    The hostname in your connection string depends on how you're running PostgreSQL:\n \n-  - If you're running PostgreSQL directly on your machine, use `localhost`.\n-  - If you're running PostgreSQL in Docker Compose, use the service name, such as `postgres`.\n-  - If you're running PostgreSQL in a separate Docker container with `docker run`, use the container's IP address or network alias.\n+    - If you're running PostgreSQL directly on your machine, use `localhost`.\n+    - If you're running PostgreSQL in Docker Compose, use the service name, such as `postgres`.\n+    - If you're running PostgreSQL in a separate Docker container with `docker run`, use the container's IP address or network alias.\n+    - If you're running a cloud-hosted PostgreSQL, your provider will share your connection string, which includes a username and password.\n \n-3. Create a Langflow `.env` file if you don't already have one:\n+3. Create a Langflow `.env` file.\n \n     ```\n     touch .env\n     ```\n \n     You can use the [`.env.example`](https://github.com/langflow-ai/langflow/blob/main/.env.example) file in the Langflow repository as a template for your own `.env` file.\n \n-4. In your `.env` file, set `LANGFLOW_DATABASE_URL` to your your PostgreSQL connection string:\n+4. In your `.env` file, set `LANGFLOW_DATABASE_URL` to your PostgreSQL connection string.\n \n     ```text\n     LANGFLOW_DATABASE_URL=\"postgresql://user:password@localhost:5432/dbname\"\n     ```\n \n-5. Save your changes, and then start Langflow with your `.env` file:\n+5. Save your changes, and then start Langflow with your `.env` file.\n \n     ```bash\n     uv run langflow run --env-file .env\n     ```\n \n 6. In Langflow, run any flow to create traffic.\n \n-7. Inspect your PostgreSQL deployment's tables and activity to verify that new tables and traffic were created after you ran a flow.\n+7. Inspect your PostgreSQL database's tables and activity to verify that new tables and traffic were created after you ran a flow.\n \n-## Example Langflow and PostgreSQL docker-compose.yml\n+## Deploy Langflow and PostgreSQL containers with docker-compose.yml\n \n-Docker Compose creates an isolated network for all services defined in `docker-compose.yml`. This ensures that the services can communicate with each other using their service names as hostnames, such as `postgres` in the database URL.\n-In contrast, if you run PostgreSQL separately with `docker run`, it launches in a different network than the Langflow container, and this prevents Langflow from connecting to PostgreSQL using the service name.\n+Use the [`docker-compose.yml`](https://github.com/langflow-ai/langflow/blob/main/docker_example/docker-compose.yml) file in the Langflow repository to launch Langflow and PostgreSQL containers in the same Docker network, ensuring proper connectivity between services.\n \n-You can use the [`docker-compose.yml`](https://github.com/langflow-ai/langflow/blob/main/docker_example/docker-compose.yml) file in the Langflow repository to launches Langflow and PostgreSQL containers in the same Docker network, ensuring proper connectivity between services.\n This configuration also sets up persistent volumes for both Langflow and PostgreSQL data.\n+Persistent volumes map directories inside of containers to storage on the host machine, so c data survives container restarts.\n \n-To start the services, navigate to the `/docker_example` directory, and then run `docker-compose up`:\n-\n-```yaml\n-services:\n-  langflow:\n-    image: langflowai/langflow:latest    # or another version tag on https://hub.docker.com/r/langflowai/langflow\n-    pull_policy: always                   # set to 'always' when using 'latest' image\n-    ports:\n-      - \"7860:7860\"\n-    depends_on:\n-      - postgres\n-    environment:\n-      - LANGFLOW_DATABASE_URL=postgresql://langflow:langflow@postgres:5432/langflow\n-      # This variable defines where the logs, file storage, monitor data, and secret keys are stored.\n-      - LANGFLOW_CONFIG_DIR=app/langflow\n-    volumes:\n-      - langflow-data:/app/langflow\n-\n-  postgres:\n-    image: postgres:16\n-    environment:\n-      POSTGRES_USER: langflow\n-      POSTGRES_PASSWORD: langflow\n-      POSTGRES_DB: langflow\n-    ports:\n-      - \"5432:5432\"\n-    volumes:\n-      - langflow-postgres:/var/lib/postgresql/data\n+Docker Compose creates an isolated network for all services defined in `docker-compose.yml`. This ensures that the services can communicate with each other using their service names as hostnames, such as `postgres` in the database URL.\n+In contrast, if you run PostgreSQL separately with `docker run`, it launches in a different network than the Langflow container, and this prevents Langflow from connecting to PostgreSQL using the service name.\n \n-volumes:\n-  langflow-postgres:    # Persistent volume for PostgreSQL data\n-  langflow-data:        # Persistent volume for Langflow data\n-```\n+To start the Langflow and PostgreSQL services, navigate to the `langflow/docker_example` directory, and then run `docker-compose up`.\n \n-## Deploy multiple Langflow instances with a shared database\n+## Deploy multiple Langflow instances with a shared PostgreSQL database\n \n To configure multiple Langflow instances that share the same PostgreSQL database, modify your `docker-compose.yml` file to include multiple Langflow services.\n \n-Use environment variables for more centralized configuration management:\n+This example populates the values in `docker-compose.yml` with values from your `.env` file.",
        "comment_created_at": "2025-07-24T19:21:51+00:00",
        "comment_author": "aimurphy",
        "comment_body": "```suggestion\r\nThis example populates the values in `docker-compose.yml` with values from your Langflow `.env` file.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2220034895",
    "pr_number": 9122,
    "pr_file": "docs/docs/Agents/agents.mdx",
    "created_at": "2025-07-21T19:13:43+00:00",
    "commented_code": "These instructions are applied in addition to the **Input**, which is provided at runtime.\n \n+### Agent memory\n+\n+Langflow Agents have built-in memory enabled by default that allows them to remember previous messages in a conversation.\n+This memory acts as a rolling chat history window, ensuring the Agent can reference earlier exchanges and maintain context without requiring a separate [Message History](/components-helpers#message-history) component.\n+\n+The Agent\u2019s internal chat history is stored in the Langflow database, just like the [Message History](/components-helpers#message-history) helper component. The default storage option in Langflow is a [SQLite](https://www.sqlite.org/) database stored in your system's cache directory:\n+\n+- Linux/WSL: `~/.cache/langflow/langflow.db`\n+- macOS: `/Users/<username>/Library/Caches/langflow/langflow.db`\n+- Windows: `%LOCALAPPDATA%\\langflow\\langflow\\Cache\\langflow.db`\n+\n+Each conversation is associated with a session ID, so messages are grouped and retrieved per session.\n+This means your chat history is saved and can be accessed or retrieved later, even if you refresh or revisit the flow.\n+\n+The number of stored messages can be configured in the **Number of Chat History Messages** field in the Agent component.",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2220034895",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 9122,
        "pr_file": "docs/docs/Agents/agents.mdx",
        "discussion_id": "2220034895",
        "commented_code": "@@ -27,6 +27,22 @@ In the **Agent Instructions** field, you can provide custom instructions that yo\n \n These instructions are applied in addition to the **Input**, which is provided at runtime.\n \n+### Agent memory\n+\n+Langflow Agents have built-in memory enabled by default that allows them to remember previous messages in a conversation.\n+This memory acts as a rolling chat history window, ensuring the Agent can reference earlier exchanges and maintain context without requiring a separate [Message History](/components-helpers#message-history) component.\n+\n+The Agent\u2019s internal chat history is stored in the Langflow database, just like the [Message History](/components-helpers#message-history) helper component. The default storage option in Langflow is a [SQLite](https://www.sqlite.org/) database stored in your system's cache directory:\n+\n+- Linux/WSL: `~/.cache/langflow/langflow.db`\n+- macOS: `/Users/<username>/Library/Caches/langflow/langflow.db`\n+- Windows: `%LOCALAPPDATA%\\langflow\\langflow\\Cache\\langflow.db`\n+\n+Each conversation is associated with a session ID, so messages are grouped and retrieved per session.\n+This means your chat history is saved and can be accessed or retrieved later, even if you refresh or revisit the flow.\n+\n+The number of stored messages can be configured in the **Number of Chat History Messages** field in the Agent component.",
        "comment_created_at": "2025-07-21T19:13:43+00:00",
        "comment_author": "aimurphy",
        "comment_body": "does this mean you dont need message history component with agent? or you should only use message history with agent if you want to connect external storage or use more fine grained memory settings?",
        "pr_file_module": null
      },
      {
        "comment_id": "2222681098",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 9122,
        "pr_file": "docs/docs/Agents/agents.mdx",
        "discussion_id": "2220034895",
        "commented_code": "@@ -27,6 +27,22 @@ In the **Agent Instructions** field, you can provide custom instructions that yo\n \n These instructions are applied in addition to the **Input**, which is provided at runtime.\n \n+### Agent memory\n+\n+Langflow Agents have built-in memory enabled by default that allows them to remember previous messages in a conversation.\n+This memory acts as a rolling chat history window, ensuring the Agent can reference earlier exchanges and maintain context without requiring a separate [Message History](/components-helpers#message-history) component.\n+\n+The Agent\u2019s internal chat history is stored in the Langflow database, just like the [Message History](/components-helpers#message-history) helper component. The default storage option in Langflow is a [SQLite](https://www.sqlite.org/) database stored in your system's cache directory:\n+\n+- Linux/WSL: `~/.cache/langflow/langflow.db`\n+- macOS: `/Users/<username>/Library/Caches/langflow/langflow.db`\n+- Windows: `%LOCALAPPDATA%\\langflow\\langflow\\Cache\\langflow.db`\n+\n+Each conversation is associated with a session ID, so messages are grouped and retrieved per session.\n+This means your chat history is saved and can be accessed or retrieved later, even if you refresh or revisit the flow.\n+\n+The number of stored messages can be configured in the **Number of Chat History Messages** field in the Agent component.",
        "comment_created_at": "2025-07-22T14:15:03+00:00",
        "comment_author": "mendonk",
        "comment_body": "Per @edwinjosechittilappilly if you are using Postgres as the db with LANGFLOW_DATABASE_URL the Agent memory will use Postgres instead.\r\nYou don't need the external memory component",
        "pr_file_module": null
      },
      {
        "comment_id": "2222681511",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 9122,
        "pr_file": "docs/docs/Agents/agents.mdx",
        "discussion_id": "2220034895",
        "commented_code": "@@ -27,6 +27,22 @@ In the **Agent Instructions** field, you can provide custom instructions that yo\n \n These instructions are applied in addition to the **Input**, which is provided at runtime.\n \n+### Agent memory\n+\n+Langflow Agents have built-in memory enabled by default that allows them to remember previous messages in a conversation.\n+This memory acts as a rolling chat history window, ensuring the Agent can reference earlier exchanges and maintain context without requiring a separate [Message History](/components-helpers#message-history) component.\n+\n+The Agent\u2019s internal chat history is stored in the Langflow database, just like the [Message History](/components-helpers#message-history) helper component. The default storage option in Langflow is a [SQLite](https://www.sqlite.org/) database stored in your system's cache directory:\n+\n+- Linux/WSL: `~/.cache/langflow/langflow.db`\n+- macOS: `/Users/<username>/Library/Caches/langflow/langflow.db`\n+- Windows: `%LOCALAPPDATA%\\langflow\\langflow\\Cache\\langflow.db`\n+\n+Each conversation is associated with a session ID, so messages are grouped and retrieved per session.\n+This means your chat history is saved and can be accessed or retrieved later, even if you refresh or revisit the flow.\n+\n+The number of stored messages can be configured in the **Number of Chat History Messages** field in the Agent component.",
        "comment_created_at": "2025-07-22T14:15:13+00:00",
        "comment_author": "mendonk",
        "comment_body": "Added info on this",
        "pr_file_module": null
      },
      {
        "comment_id": "2223075473",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 9122,
        "pr_file": "docs/docs/Agents/agents.mdx",
        "discussion_id": "2220034895",
        "commented_code": "@@ -27,6 +27,22 @@ In the **Agent Instructions** field, you can provide custom instructions that yo\n \n These instructions are applied in addition to the **Input**, which is provided at runtime.\n \n+### Agent memory\n+\n+Langflow Agents have built-in memory enabled by default that allows them to remember previous messages in a conversation.\n+This memory acts as a rolling chat history window, ensuring the Agent can reference earlier exchanges and maintain context without requiring a separate [Message History](/components-helpers#message-history) component.\n+\n+The Agent\u2019s internal chat history is stored in the Langflow database, just like the [Message History](/components-helpers#message-history) helper component. The default storage option in Langflow is a [SQLite](https://www.sqlite.org/) database stored in your system's cache directory:\n+\n+- Linux/WSL: `~/.cache/langflow/langflow.db`\n+- macOS: `/Users/<username>/Library/Caches/langflow/langflow.db`\n+- Windows: `%LOCALAPPDATA%\\langflow\\langflow\\Cache\\langflow.db`\n+\n+Each conversation is associated with a session ID, so messages are grouped and retrieved per session.\n+This means your chat history is saved and can be accessed or retrieved later, even if you refresh or revisit the flow.\n+\n+The number of stored messages can be configured in the **Number of Chat History Messages** field in the Agent component.",
        "comment_created_at": "2025-07-22T16:13:21+00:00",
        "comment_author": "edwinjosechittilappilly",
        "comment_body": "@mendonk  if time permits can you test this out too?",
        "pr_file_module": null
      }
    ]
  }
]