[
  {
    "discussion_id": "2291892025",
    "pr_number": 9458,
    "pr_file": "src/backend/base/langflow/components/data/kb_ingest.py",
    "created_at": "2025-08-21T18:57:20+00:00",
    "commented_code": "self.status = f\"\u274c KB ingestion failed: {e}\"\n             return Data(data={\"error\": str(e), \"kb_name\": self.knowledge_base})\n \n-    def _get_knowledge_bases(self) -> list[str]:\n-        \"\"\"Retrieve a list of available knowledge bases.\n-\n-        Returns:\n-            A list of knowledge base names.\n-        \"\"\"\n-        # Return the list of directories in the knowledge base root path\n-        kb_root_path = self._get_kb_root()\n-\n-        if not kb_root_path.exists():\n-            return []\n-\n-        return [str(d.name) for d in kb_root_path.iterdir() if not d.name.startswith(\".\") and d.is_dir()]\n+    async def _get_api_key_variable(self, field_value: dict[str, Any]):\n+        async with session_scope() as db:\n+            current_user = await get_user_by_id(db, self.user_id)\n+            variable_service = get_variable_service()\n+\n+            # Process the api_key field variable\n+            return await variable_service.get_variable(\n+                user_id=current_user.id,\n+                name=field_value[\"03_api_key\"],\n+                field=\"\",\n+                session=db,\n+            )\n+        return None\n \n-    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None) -> dotdict:\n+    async def update_build_config(\n+        self,\n+        build_config: dotdict,\n+        field_value: Any,\n+        field_name: str | None = None,\n+    ) -> dotdict:\n         \"\"\"Update build configuration based on provider selection.\"\"\"\n         # Create a new knowledge base\n         if field_name == \"knowledge_base\":\n+            async with session_scope() as db:\n+                current_user = await get_user_by_id(db, self.user_id)\n+            kb_user = current_user.username",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2291892025",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 9458,
        "pr_file": "src/backend/base/langflow/components/data/kb_ingest.py",
        "discussion_id": "2291892025",
        "commented_code": "@@ -532,52 +552,78 @@ def build_kb_info(self) -> Data:\n             self.status = f\"\u274c KB ingestion failed: {e}\"\n             return Data(data={\"error\": str(e), \"kb_name\": self.knowledge_base})\n \n-    def _get_knowledge_bases(self) -> list[str]:\n-        \"\"\"Retrieve a list of available knowledge bases.\n-\n-        Returns:\n-            A list of knowledge base names.\n-        \"\"\"\n-        # Return the list of directories in the knowledge base root path\n-        kb_root_path = self._get_kb_root()\n-\n-        if not kb_root_path.exists():\n-            return []\n-\n-        return [str(d.name) for d in kb_root_path.iterdir() if not d.name.startswith(\".\") and d.is_dir()]\n+    async def _get_api_key_variable(self, field_value: dict[str, Any]):\n+        async with session_scope() as db:\n+            current_user = await get_user_by_id(db, self.user_id)\n+            variable_service = get_variable_service()\n+\n+            # Process the api_key field variable\n+            return await variable_service.get_variable(\n+                user_id=current_user.id,\n+                name=field_value[\"03_api_key\"],\n+                field=\"\",\n+                session=db,\n+            )\n+        return None\n \n-    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None) -> dotdict:\n+    async def update_build_config(\n+        self,\n+        build_config: dotdict,\n+        field_value: Any,\n+        field_name: str | None = None,\n+    ) -> dotdict:\n         \"\"\"Update build configuration based on provider selection.\"\"\"\n         # Create a new knowledge base\n         if field_name == \"knowledge_base\":\n+            async with session_scope() as db:\n+                current_user = await get_user_by_id(db, self.user_id)\n+            kb_user = current_user.username",
        "comment_created_at": "2025-08-21T18:57:20+00:00",
        "comment_author": "ogabrielluiz",
        "comment_body": "I'm not 100% you'll be able to get the username after the session is closed.",
        "pr_file_module": null
      },
      {
        "comment_id": "2291909309",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 9458,
        "pr_file": "src/backend/base/langflow/components/data/kb_ingest.py",
        "discussion_id": "2291892025",
        "commented_code": "@@ -532,52 +552,78 @@ def build_kb_info(self) -> Data:\n             self.status = f\"\u274c KB ingestion failed: {e}\"\n             return Data(data={\"error\": str(e), \"kb_name\": self.knowledge_base})\n \n-    def _get_knowledge_bases(self) -> list[str]:\n-        \"\"\"Retrieve a list of available knowledge bases.\n-\n-        Returns:\n-            A list of knowledge base names.\n-        \"\"\"\n-        # Return the list of directories in the knowledge base root path\n-        kb_root_path = self._get_kb_root()\n-\n-        if not kb_root_path.exists():\n-            return []\n-\n-        return [str(d.name) for d in kb_root_path.iterdir() if not d.name.startswith(\".\") and d.is_dir()]\n+    async def _get_api_key_variable(self, field_value: dict[str, Any]):\n+        async with session_scope() as db:\n+            current_user = await get_user_by_id(db, self.user_id)\n+            variable_service = get_variable_service()\n+\n+            # Process the api_key field variable\n+            return await variable_service.get_variable(\n+                user_id=current_user.id,\n+                name=field_value[\"03_api_key\"],\n+                field=\"\",\n+                session=db,\n+            )\n+        return None\n \n-    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None) -> dotdict:\n+    async def update_build_config(\n+        self,\n+        build_config: dotdict,\n+        field_value: Any,\n+        field_name: str | None = None,\n+    ) -> dotdict:\n         \"\"\"Update build configuration based on provider selection.\"\"\"\n         # Create a new knowledge base\n         if field_name == \"knowledge_base\":\n+            async with session_scope() as db:\n+                current_user = await get_user_by_id(db, self.user_id)\n+            kb_user = current_user.username",
        "comment_created_at": "2025-08-21T19:07:18+00:00",
        "comment_author": "erichare",
        "comment_body": "It seemed to work, however probably better just to be safe - i updated all retrievals of attributes from the current user to be within the session scope",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2179234144",
    "pr_number": 8350,
    "pr_file": "src/backend/base/langflow/services/database/service.py",
    "created_at": "2025-07-02T06:34:02+00:00",
    "commented_code": "logger.debug(\"Alembic not initialized\")\n                 should_initialize_alembic = True\n         await asyncio.to_thread(self._run_migrations, should_initialize_alembic, fix)\n+        self._database_available = await self._is_database_available()",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2179234144",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 8350,
        "pr_file": "src/backend/base/langflow/services/database/service.py",
        "discussion_id": "2179234144",
        "commented_code": "@@ -369,6 +388,7 @@ async def run_migrations(self, *, fix=False) -> None:\n                 logger.debug(\"Alembic not initialized\")\n                 should_initialize_alembic = True\n         await asyncio.to_thread(self._run_migrations, should_initialize_alembic, fix)\n+        self._database_available = await self._is_database_available()",
        "comment_created_at": "2025-07-02T06:34:02+00:00",
        "comment_author": "jordanrfrazier",
        "comment_body": "Is there a reason this is checked here rather than in init? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2198403245",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 8350,
        "pr_file": "src/backend/base/langflow/services/database/service.py",
        "discussion_id": "2179234144",
        "commented_code": "@@ -369,6 +388,7 @@ async def run_migrations(self, *, fix=False) -> None:\n                 logger.debug(\"Alembic not initialized\")\n                 should_initialize_alembic = True\n         await asyncio.to_thread(self._run_migrations, should_initialize_alembic, fix)\n+        self._database_available = await self._is_database_available()",
        "comment_created_at": "2025-07-10T18:22:50+00:00",
        "comment_author": "ogabrielluiz",
        "comment_body": "The function checks if the `message` table exists, so in init it would not exist the first time Langflow runs. ",
        "pr_file_module": null
      }
    ]
  }
]