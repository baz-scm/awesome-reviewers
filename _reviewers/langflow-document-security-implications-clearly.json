[
  {
    "discussion_id": "2180058061",
    "pr_number": 8813,
    "pr_file": "docs/docs/Tutorials/chat-with-files.md",
    "created_at": "2025-07-02T13:22:59+00:00",
    "commented_code": "+---\n+title: Create a chatbot with your own files\n+slug: /chat-with-files\n+---\n+\n+import Icon from \"@site/src/components/icon\";\n+import Tabs from '@theme/Tabs';\n+import TabItem from '@theme/TabItem';\n+\n+Create a chatbot application that chats with files loaded from your local machine.\n+\n+## Prerequisites\n+\n+- [A running Langflow instance](/get-started-installation)\n+- [An OpenAI API key](https://platform.openai.com/api-keys)\n+\n+## Create a file loader chat flow\n+\n+1. In Langflow, click **New Flow**, and then select the **Basic prompting** template.\n+2. Add your **OpenAI** API key to the **Language Model** component.\n+3. To confirm that the chatbot responds as expected, open the <Icon name=\"Play\" aria-hidden=\"true\" /> **Playground** and then ask a question.\n+The LLM should respond as the **Prompt** component specifies.\n+With the basic flow responding correctly, modify the **Prompt** component to accept additional inputs.\n+4. In the **Prompt** component, open the **Template** field, and replace the current prompt with the following text:\n+    ```text\n+    ChatInput:\n+    {chat-input}\n+    File:\n+    {file}\n+    ```\n+    The **Prompt** component adds ports to accept new inputs for each value with curly braces, in this case, a chat input and a file.\n+\n+    :::tip\n+    The port names are for illustrative purposes. You don't have to name them after the component they're connected to.\n+    :::\n+\n+5. Add a [File component](/components-data#file) to the flow, and connect the **Raw Content** output to the Prompt component's `file` input.\n+\n+    Your flow should look like this:\n+\n+    ![File loader chat flow](/img/tutorial-chat-file-loader.png)\n+\n+    The flow is complete.\n+    If you'd like, add files to the File component and chat with it within the Langflow IDE.\n+    In the next section, you will load files and chat with your flow from a Python application.\n+\n+## Send requests to your flow from a Python application\n+\n+With your flow running locally, send a request to `POST /run` to load a file to your flow, send a chat message, and get a result back.\n+\n+:::tip\n+To easily construct file upload requests in Python, JavaScript, and curl templates, check out the [Langflow File Upload Utility](https://langflow-file-upload-examples.onrender.com).\n+:::\n+\n+1. To construct the request, gather the following values from Langflow.\n+\n+    * `LANGFLOW_SERVER_ADDRESS`: The default value is `127.0.0.1:7860`.\n+    * `FLOW_ID`: The UUID of your flow, or the endpoint name you've chosen.\n+    * File Component name: To find the ID of your file component, in the File component, click **Controls**. For this example, the component name is `File-KZP68`.\n+    * Input value: This is the message you want to send to the Chat Input of your flow, such as `Evaluate this resume for a job opening in my Marketing department.`\n+    * File path: The path to the local file you want to load with your request. This example is loading `fake-resume.txt` from the same file location as the script.\n+    * Session ID: Optional. For more information, see [session ID](/session-id).\n+    * Langflow API key: Required. To create an API key, see [API keys](/configuration-api-keys).\n+\n+2. Replace the values in the script below.\n+\n+    <details open>\n+        <summary>Python</summary>\n+\n+    ```python\n+    # Python example using requests\n+    import requests\n+    import json\n+\n+    # 1. Set the upload URL\n+    url = \"http://LANGFLOW_SERVER_ADDRESS/api/v2/files/\"\n+\n+    # 2. Prepare the file and payload\n+    payload = {}\n+    files = [\n+      ('file', ('fake-resume.txt', open('fake-resume.txt', 'rb'), 'application/octet-stream'))\n+    ]\n+    headers = {\n+      'Accept': 'application/json',\n+      'x-api-key': 'LANGFLOW_API_KEY'\n+    }\n+\n+    # 3. Upload the file to Langflow\n+    response = requests.request(\"POST\", url, headers=headers, data=payload, files=files)\n+    print(response.text)\n+\n+    # 4. Get the uploaded file path from the response\n+    uploaded_data = response.json()\n+    uploaded_path = uploaded_data.get('path')\n+\n+    # 5. Call the Langflow run endpoint with the uploaded file path\n+    run_url = \"http://LANGFLOW_SERVER_ADDRESS/api/v1/run/FLOW_ID\"\n+    run_payload = {\n+        \"input_value\": \"Evaluate this resume for a job opening in my Marketing department.\",\n+        \"output_type\": \"chat\",\n+        \"input_type\": \"chat\",\n+        \"tweaks\": {\n+            \"File-KZP68\": {\n+                \"path\": uploaded_path\n+            }\n+        }\n+    }\n+    run_headers = {\n+        'Content-Type': 'application/json',\n+        'Accept': 'application/json',\n+        'x-api-key': 'LANGFLOW_API_KEY'\n+    }\n+    run_response = requests.post(run_url, headers=run_headers, data=json.dumps(run_payload))\n+    langflow_data = run_response.json()\n+    # Output only the message\n+    message = None\n+    try:\n+        message = langflow_data['outputs'][0]['outputs'][0]['results']['message']['data']['text']\n+    except (KeyError, IndexError, TypeError):\n+        pass\n+    print(message)\n+\n+    ```\n+    </details>\n+\n+    This script contains two requests.\n+\n+    The first request uploads `fake-resume.txt` to your Langflow server at the `/api/v2/files` endpoint, which returns a file path that can be referenced in subsequent Langflow requests, `02791d46-812f-4988-ab1c-7c430214f8d5/fake-resume.txt`.\n+\n+    The second request sends a chat message to the Langflow flow at the `/api/v1/run/` endpoint.\n+    The `tweaks` parameter includes the path to the uploaded file as the variable `uploaded_path`.\n+\n+3. Run the script to send the request.\n+\n+    <details open>\n+    <summary>Response</summary>\n+\n+    ```\n+    {\"id\":\"793ba3d8-5e7a-4499-8b89-d9a7b6325fee\",\"name\":\"fake-resume (1)\",\"path\":\"02791d46-812f-4988-ab1c-7c430214f8d5/fake-resume.txt\",\"size\":1779,\"provider\":null}\n+    The resume for Emily J. Wilson presents a strong candidate for a position in your Marketing department. Here are some key points to consider:\n+\n+    ### Strengths:\n+    1. **Experience**: With over 8 years in marketing, Emily has held progressively responsible positions, culminating in her current role as Marketing Director. This indicates a solid foundation in the field.\n+\n+    2. **Quantifiable Achievements**: The resume highlights specific accomplishments, such as a 25% increase in brand recognition and a 30% sales increase after launching new product lines. These metrics demonstrate her ability to drive results.\n+\n+    3. **Diverse Skill Set**: Emily's skills encompass various aspects of marketing, including strategy development, team management, social media marketing, event planning, and data analysis. This versatility can be beneficial in a dynamic marketing environment.\n+\n+    4. **Educational Background**: Her MBA and a Bachelor's degree in Marketing provide a strong academic foundation, which is often valued in marketing roles.\n+\n+    5. **Certifications**: The Certified Marketing Professional (CMP) and Google Analytics Certification indicate a commitment to professional development and staying current with industry standards.\n+\n+    ### Areas for Improvement:\n+    1. **Specificity in Skills**: While the skills listed are relevant, providing examples of how she has applied these skills in her previous roles could strengthen her resume further.\n+\n+    2. **References**: While stating that references are available upon request is standard, including a couple of testimonials or notable endorsements could enhance credibility.\n+\n+    3. **Formatting**: Ensure that the resume is visually appealing and easy to read. Clear headings and bullet points help in quickly identifying key information.\n+\n+    ### Conclusion:\n+    Overall, Emily J. Wilson's resume reflects a well-rounded marketing professional with a proven track record of success. If her experience aligns with the specific needs of your Marketing department, she could be a valuable addition to your team. Consider inviting her for an interview to further assess her fit for the role.\n+    ```\n+\n+    </details>\n+\n+    The initial output contains the JSON response object from the file upload endpoint, with the internal path where Langflow stores the file.\n+\n+    The LLM then retrieves this file and correctly evaluates its content, in this case the suitability of the resume for a job position.",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2180058061",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 8813,
        "pr_file": "docs/docs/Tutorials/chat-with-files.md",
        "discussion_id": "2180058061",
        "commented_code": "@@ -0,0 +1,173 @@\n+---\n+title: Create a chatbot with your own files\n+slug: /chat-with-files\n+---\n+\n+import Icon from \"@site/src/components/icon\";\n+import Tabs from '@theme/Tabs';\n+import TabItem from '@theme/TabItem';\n+\n+Create a chatbot application that chats with files loaded from your local machine.\n+\n+## Prerequisites\n+\n+- [A running Langflow instance](/get-started-installation)\n+- [An OpenAI API key](https://platform.openai.com/api-keys)\n+\n+## Create a file loader chat flow\n+\n+1. In Langflow, click **New Flow**, and then select the **Basic prompting** template.\n+2. Add your **OpenAI** API key to the **Language Model** component.\n+3. To confirm that the chatbot responds as expected, open the <Icon name=\"Play\" aria-hidden=\"true\" /> **Playground** and then ask a question.\n+The LLM should respond as the **Prompt** component specifies.\n+With the basic flow responding correctly, modify the **Prompt** component to accept additional inputs.\n+4. In the **Prompt** component, open the **Template** field, and replace the current prompt with the following text:\n+    ```text\n+    ChatInput:\n+    {chat-input}\n+    File:\n+    {file}\n+    ```\n+    The **Prompt** component adds ports to accept new inputs for each value with curly braces, in this case, a chat input and a file.\n+\n+    :::tip\n+    The port names are for illustrative purposes. You don't have to name them after the component they're connected to.\n+    :::\n+\n+5. Add a [File component](/components-data#file) to the flow, and connect the **Raw Content** output to the Prompt component's `file` input.\n+\n+    Your flow should look like this:\n+\n+    ![File loader chat flow](/img/tutorial-chat-file-loader.png)\n+\n+    The flow is complete.\n+    If you'd like, add files to the File component and chat with it within the Langflow IDE.\n+    In the next section, you will load files and chat with your flow from a Python application.\n+\n+## Send requests to your flow from a Python application\n+\n+With your flow running locally, send a request to `POST /run` to load a file to your flow, send a chat message, and get a result back.\n+\n+:::tip\n+To easily construct file upload requests in Python, JavaScript, and curl templates, check out the [Langflow File Upload Utility](https://langflow-file-upload-examples.onrender.com).\n+:::\n+\n+1. To construct the request, gather the following values from Langflow.\n+\n+    * `LANGFLOW_SERVER_ADDRESS`: The default value is `127.0.0.1:7860`.\n+    * `FLOW_ID`: The UUID of your flow, or the endpoint name you've chosen.\n+    * File Component name: To find the ID of your file component, in the File component, click **Controls**. For this example, the component name is `File-KZP68`.\n+    * Input value: This is the message you want to send to the Chat Input of your flow, such as `Evaluate this resume for a job opening in my Marketing department.`\n+    * File path: The path to the local file you want to load with your request. This example is loading `fake-resume.txt` from the same file location as the script.\n+    * Session ID: Optional. For more information, see [session ID](/session-id).\n+    * Langflow API key: Required. To create an API key, see [API keys](/configuration-api-keys).\n+\n+2. Replace the values in the script below.\n+\n+    <details open>\n+        <summary>Python</summary>\n+\n+    ```python\n+    # Python example using requests\n+    import requests\n+    import json\n+\n+    # 1. Set the upload URL\n+    url = \"http://LANGFLOW_SERVER_ADDRESS/api/v2/files/\"\n+\n+    # 2. Prepare the file and payload\n+    payload = {}\n+    files = [\n+      ('file', ('fake-resume.txt', open('fake-resume.txt', 'rb'), 'application/octet-stream'))\n+    ]\n+    headers = {\n+      'Accept': 'application/json',\n+      'x-api-key': 'LANGFLOW_API_KEY'\n+    }\n+\n+    # 3. Upload the file to Langflow\n+    response = requests.request(\"POST\", url, headers=headers, data=payload, files=files)\n+    print(response.text)\n+\n+    # 4. Get the uploaded file path from the response\n+    uploaded_data = response.json()\n+    uploaded_path = uploaded_data.get('path')\n+\n+    # 5. Call the Langflow run endpoint with the uploaded file path\n+    run_url = \"http://LANGFLOW_SERVER_ADDRESS/api/v1/run/FLOW_ID\"\n+    run_payload = {\n+        \"input_value\": \"Evaluate this resume for a job opening in my Marketing department.\",\n+        \"output_type\": \"chat\",\n+        \"input_type\": \"chat\",\n+        \"tweaks\": {\n+            \"File-KZP68\": {\n+                \"path\": uploaded_path\n+            }\n+        }\n+    }\n+    run_headers = {\n+        'Content-Type': 'application/json',\n+        'Accept': 'application/json',\n+        'x-api-key': 'LANGFLOW_API_KEY'\n+    }\n+    run_response = requests.post(run_url, headers=run_headers, data=json.dumps(run_payload))\n+    langflow_data = run_response.json()\n+    # Output only the message\n+    message = None\n+    try:\n+        message = langflow_data['outputs'][0]['outputs'][0]['results']['message']['data']['text']\n+    except (KeyError, IndexError, TypeError):\n+        pass\n+    print(message)\n+\n+    ```\n+    </details>\n+\n+    This script contains two requests.\n+\n+    The first request uploads `fake-resume.txt` to your Langflow server at the `/api/v2/files` endpoint, which returns a file path that can be referenced in subsequent Langflow requests, `02791d46-812f-4988-ab1c-7c430214f8d5/fake-resume.txt`.\n+\n+    The second request sends a chat message to the Langflow flow at the `/api/v1/run/` endpoint.\n+    The `tweaks` parameter includes the path to the uploaded file as the variable `uploaded_path`.\n+\n+3. Run the script to send the request.\n+\n+    <details open>\n+    <summary>Response</summary>\n+\n+    ```\n+    {\"id\":\"793ba3d8-5e7a-4499-8b89-d9a7b6325fee\",\"name\":\"fake-resume (1)\",\"path\":\"02791d46-812f-4988-ab1c-7c430214f8d5/fake-resume.txt\",\"size\":1779,\"provider\":null}\n+    The resume for Emily J. Wilson presents a strong candidate for a position in your Marketing department. Here are some key points to consider:\n+\n+    ### Strengths:\n+    1. **Experience**: With over 8 years in marketing, Emily has held progressively responsible positions, culminating in her current role as Marketing Director. This indicates a solid foundation in the field.\n+\n+    2. **Quantifiable Achievements**: The resume highlights specific accomplishments, such as a 25% increase in brand recognition and a 30% sales increase after launching new product lines. These metrics demonstrate her ability to drive results.\n+\n+    3. **Diverse Skill Set**: Emily's skills encompass various aspects of marketing, including strategy development, team management, social media marketing, event planning, and data analysis. This versatility can be beneficial in a dynamic marketing environment.\n+\n+    4. **Educational Background**: Her MBA and a Bachelor's degree in Marketing provide a strong academic foundation, which is often valued in marketing roles.\n+\n+    5. **Certifications**: The Certified Marketing Professional (CMP) and Google Analytics Certification indicate a commitment to professional development and staying current with industry standards.\n+\n+    ### Areas for Improvement:\n+    1. **Specificity in Skills**: While the skills listed are relevant, providing examples of how she has applied these skills in her previous roles could strengthen her resume further.\n+\n+    2. **References**: While stating that references are available upon request is standard, including a couple of testimonials or notable endorsements could enhance credibility.\n+\n+    3. **Formatting**: Ensure that the resume is visually appealing and easy to read. Clear headings and bullet points help in quickly identifying key information.\n+\n+    ### Conclusion:\n+    Overall, Emily J. Wilson's resume reflects a well-rounded marketing professional with a proven track record of success. If her experience aligns with the specific needs of your Marketing department, she could be a valuable addition to your team. Consider inviting her for an interview to further assess her fit for the role.\n+    ```\n+\n+    </details>\n+\n+    The initial output contains the JSON response object from the file upload endpoint, with the internal path where Langflow stores the file.\n+\n+    The LLM then retrieves this file and correctly evaluates its content, in this case the suitability of the resume for a job position.",
        "comment_created_at": "2025-07-02T13:22:59+00:00",
        "comment_author": "aimurphy",
        "comment_body": "```suggestion\r\n    The initial output contains the JSON response object from the file upload endpoint, with the internal path where Langflow stores the file.\r\n\r\n    The LLM then retrieves the file and uses it as context to produce a response. In this tutorial, the text input instructed the LLM to evaluate the suitability of a sample resume.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2180062189",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 8813,
        "pr_file": "docs/docs/Tutorials/chat-with-files.md",
        "discussion_id": "2180058061",
        "commented_code": "@@ -0,0 +1,173 @@\n+---\n+title: Create a chatbot with your own files\n+slug: /chat-with-files\n+---\n+\n+import Icon from \"@site/src/components/icon\";\n+import Tabs from '@theme/Tabs';\n+import TabItem from '@theme/TabItem';\n+\n+Create a chatbot application that chats with files loaded from your local machine.\n+\n+## Prerequisites\n+\n+- [A running Langflow instance](/get-started-installation)\n+- [An OpenAI API key](https://platform.openai.com/api-keys)\n+\n+## Create a file loader chat flow\n+\n+1. In Langflow, click **New Flow**, and then select the **Basic prompting** template.\n+2. Add your **OpenAI** API key to the **Language Model** component.\n+3. To confirm that the chatbot responds as expected, open the <Icon name=\"Play\" aria-hidden=\"true\" /> **Playground** and then ask a question.\n+The LLM should respond as the **Prompt** component specifies.\n+With the basic flow responding correctly, modify the **Prompt** component to accept additional inputs.\n+4. In the **Prompt** component, open the **Template** field, and replace the current prompt with the following text:\n+    ```text\n+    ChatInput:\n+    {chat-input}\n+    File:\n+    {file}\n+    ```\n+    The **Prompt** component adds ports to accept new inputs for each value with curly braces, in this case, a chat input and a file.\n+\n+    :::tip\n+    The port names are for illustrative purposes. You don't have to name them after the component they're connected to.\n+    :::\n+\n+5. Add a [File component](/components-data#file) to the flow, and connect the **Raw Content** output to the Prompt component's `file` input.\n+\n+    Your flow should look like this:\n+\n+    ![File loader chat flow](/img/tutorial-chat-file-loader.png)\n+\n+    The flow is complete.\n+    If you'd like, add files to the File component and chat with it within the Langflow IDE.\n+    In the next section, you will load files and chat with your flow from a Python application.\n+\n+## Send requests to your flow from a Python application\n+\n+With your flow running locally, send a request to `POST /run` to load a file to your flow, send a chat message, and get a result back.\n+\n+:::tip\n+To easily construct file upload requests in Python, JavaScript, and curl templates, check out the [Langflow File Upload Utility](https://langflow-file-upload-examples.onrender.com).\n+:::\n+\n+1. To construct the request, gather the following values from Langflow.\n+\n+    * `LANGFLOW_SERVER_ADDRESS`: The default value is `127.0.0.1:7860`.\n+    * `FLOW_ID`: The UUID of your flow, or the endpoint name you've chosen.\n+    * File Component name: To find the ID of your file component, in the File component, click **Controls**. For this example, the component name is `File-KZP68`.\n+    * Input value: This is the message you want to send to the Chat Input of your flow, such as `Evaluate this resume for a job opening in my Marketing department.`\n+    * File path: The path to the local file you want to load with your request. This example is loading `fake-resume.txt` from the same file location as the script.\n+    * Session ID: Optional. For more information, see [session ID](/session-id).\n+    * Langflow API key: Required. To create an API key, see [API keys](/configuration-api-keys).\n+\n+2. Replace the values in the script below.\n+\n+    <details open>\n+        <summary>Python</summary>\n+\n+    ```python\n+    # Python example using requests\n+    import requests\n+    import json\n+\n+    # 1. Set the upload URL\n+    url = \"http://LANGFLOW_SERVER_ADDRESS/api/v2/files/\"\n+\n+    # 2. Prepare the file and payload\n+    payload = {}\n+    files = [\n+      ('file', ('fake-resume.txt', open('fake-resume.txt', 'rb'), 'application/octet-stream'))\n+    ]\n+    headers = {\n+      'Accept': 'application/json',\n+      'x-api-key': 'LANGFLOW_API_KEY'\n+    }\n+\n+    # 3. Upload the file to Langflow\n+    response = requests.request(\"POST\", url, headers=headers, data=payload, files=files)\n+    print(response.text)\n+\n+    # 4. Get the uploaded file path from the response\n+    uploaded_data = response.json()\n+    uploaded_path = uploaded_data.get('path')\n+\n+    # 5. Call the Langflow run endpoint with the uploaded file path\n+    run_url = \"http://LANGFLOW_SERVER_ADDRESS/api/v1/run/FLOW_ID\"\n+    run_payload = {\n+        \"input_value\": \"Evaluate this resume for a job opening in my Marketing department.\",\n+        \"output_type\": \"chat\",\n+        \"input_type\": \"chat\",\n+        \"tweaks\": {\n+            \"File-KZP68\": {\n+                \"path\": uploaded_path\n+            }\n+        }\n+    }\n+    run_headers = {\n+        'Content-Type': 'application/json',\n+        'Accept': 'application/json',\n+        'x-api-key': 'LANGFLOW_API_KEY'\n+    }\n+    run_response = requests.post(run_url, headers=run_headers, data=json.dumps(run_payload))\n+    langflow_data = run_response.json()\n+    # Output only the message\n+    message = None\n+    try:\n+        message = langflow_data['outputs'][0]['outputs'][0]['results']['message']['data']['text']\n+    except (KeyError, IndexError, TypeError):\n+        pass\n+    print(message)\n+\n+    ```\n+    </details>\n+\n+    This script contains two requests.\n+\n+    The first request uploads `fake-resume.txt` to your Langflow server at the `/api/v2/files` endpoint, which returns a file path that can be referenced in subsequent Langflow requests, `02791d46-812f-4988-ab1c-7c430214f8d5/fake-resume.txt`.\n+\n+    The second request sends a chat message to the Langflow flow at the `/api/v1/run/` endpoint.\n+    The `tweaks` parameter includes the path to the uploaded file as the variable `uploaded_path`.\n+\n+3. Run the script to send the request.\n+\n+    <details open>\n+    <summary>Response</summary>\n+\n+    ```\n+    {\"id\":\"793ba3d8-5e7a-4499-8b89-d9a7b6325fee\",\"name\":\"fake-resume (1)\",\"path\":\"02791d46-812f-4988-ab1c-7c430214f8d5/fake-resume.txt\",\"size\":1779,\"provider\":null}\n+    The resume for Emily J. Wilson presents a strong candidate for a position in your Marketing department. Here are some key points to consider:\n+\n+    ### Strengths:\n+    1. **Experience**: With over 8 years in marketing, Emily has held progressively responsible positions, culminating in her current role as Marketing Director. This indicates a solid foundation in the field.\n+\n+    2. **Quantifiable Achievements**: The resume highlights specific accomplishments, such as a 25% increase in brand recognition and a 30% sales increase after launching new product lines. These metrics demonstrate her ability to drive results.\n+\n+    3. **Diverse Skill Set**: Emily's skills encompass various aspects of marketing, including strategy development, team management, social media marketing, event planning, and data analysis. This versatility can be beneficial in a dynamic marketing environment.\n+\n+    4. **Educational Background**: Her MBA and a Bachelor's degree in Marketing provide a strong academic foundation, which is often valued in marketing roles.\n+\n+    5. **Certifications**: The Certified Marketing Professional (CMP) and Google Analytics Certification indicate a commitment to professional development and staying current with industry standards.\n+\n+    ### Areas for Improvement:\n+    1. **Specificity in Skills**: While the skills listed are relevant, providing examples of how she has applied these skills in her previous roles could strengthen her resume further.\n+\n+    2. **References**: While stating that references are available upon request is standard, including a couple of testimonials or notable endorsements could enhance credibility.\n+\n+    3. **Formatting**: Ensure that the resume is visually appealing and easy to read. Clear headings and bullet points help in quickly identifying key information.\n+\n+    ### Conclusion:\n+    Overall, Emily J. Wilson's resume reflects a well-rounded marketing professional with a proven track record of success. If her experience aligns with the specific needs of your Marketing department, she could be a valuable addition to your team. Consider inviting her for an interview to further assess her fit for the role.\n+    ```\n+\n+    </details>\n+\n+    The initial output contains the JSON response object from the file upload endpoint, with the internal path where Langflow stores the file.\n+\n+    The LLM then retrieves this file and correctly evaluates its content, in this case the suitability of the resume for a job position.",
        "comment_created_at": "2025-07-02T13:24:16+00:00",
        "comment_author": "aimurphy",
        "comment_body": "You might want to add something more about file storage, since there could potentially be privacy concerns. For example, loading medical records or something.\r\n\r\nAre there protections in place for sensitive files? Who has access to the files? And how can I delete them (can my script include a step to discard files at the end of the conversation)?",
        "pr_file_module": null
      },
      {
        "comment_id": "2183839822",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 8813,
        "pr_file": "docs/docs/Tutorials/chat-with-files.md",
        "discussion_id": "2180058061",
        "commented_code": "@@ -0,0 +1,173 @@\n+---\n+title: Create a chatbot with your own files\n+slug: /chat-with-files\n+---\n+\n+import Icon from \"@site/src/components/icon\";\n+import Tabs from '@theme/Tabs';\n+import TabItem from '@theme/TabItem';\n+\n+Create a chatbot application that chats with files loaded from your local machine.\n+\n+## Prerequisites\n+\n+- [A running Langflow instance](/get-started-installation)\n+- [An OpenAI API key](https://platform.openai.com/api-keys)\n+\n+## Create a file loader chat flow\n+\n+1. In Langflow, click **New Flow**, and then select the **Basic prompting** template.\n+2. Add your **OpenAI** API key to the **Language Model** component.\n+3. To confirm that the chatbot responds as expected, open the <Icon name=\"Play\" aria-hidden=\"true\" /> **Playground** and then ask a question.\n+The LLM should respond as the **Prompt** component specifies.\n+With the basic flow responding correctly, modify the **Prompt** component to accept additional inputs.\n+4. In the **Prompt** component, open the **Template** field, and replace the current prompt with the following text:\n+    ```text\n+    ChatInput:\n+    {chat-input}\n+    File:\n+    {file}\n+    ```\n+    The **Prompt** component adds ports to accept new inputs for each value with curly braces, in this case, a chat input and a file.\n+\n+    :::tip\n+    The port names are for illustrative purposes. You don't have to name them after the component they're connected to.\n+    :::\n+\n+5. Add a [File component](/components-data#file) to the flow, and connect the **Raw Content** output to the Prompt component's `file` input.\n+\n+    Your flow should look like this:\n+\n+    ![File loader chat flow](/img/tutorial-chat-file-loader.png)\n+\n+    The flow is complete.\n+    If you'd like, add files to the File component and chat with it within the Langflow IDE.\n+    In the next section, you will load files and chat with your flow from a Python application.\n+\n+## Send requests to your flow from a Python application\n+\n+With your flow running locally, send a request to `POST /run` to load a file to your flow, send a chat message, and get a result back.\n+\n+:::tip\n+To easily construct file upload requests in Python, JavaScript, and curl templates, check out the [Langflow File Upload Utility](https://langflow-file-upload-examples.onrender.com).\n+:::\n+\n+1. To construct the request, gather the following values from Langflow.\n+\n+    * `LANGFLOW_SERVER_ADDRESS`: The default value is `127.0.0.1:7860`.\n+    * `FLOW_ID`: The UUID of your flow, or the endpoint name you've chosen.\n+    * File Component name: To find the ID of your file component, in the File component, click **Controls**. For this example, the component name is `File-KZP68`.\n+    * Input value: This is the message you want to send to the Chat Input of your flow, such as `Evaluate this resume for a job opening in my Marketing department.`\n+    * File path: The path to the local file you want to load with your request. This example is loading `fake-resume.txt` from the same file location as the script.\n+    * Session ID: Optional. For more information, see [session ID](/session-id).\n+    * Langflow API key: Required. To create an API key, see [API keys](/configuration-api-keys).\n+\n+2. Replace the values in the script below.\n+\n+    <details open>\n+        <summary>Python</summary>\n+\n+    ```python\n+    # Python example using requests\n+    import requests\n+    import json\n+\n+    # 1. Set the upload URL\n+    url = \"http://LANGFLOW_SERVER_ADDRESS/api/v2/files/\"\n+\n+    # 2. Prepare the file and payload\n+    payload = {}\n+    files = [\n+      ('file', ('fake-resume.txt', open('fake-resume.txt', 'rb'), 'application/octet-stream'))\n+    ]\n+    headers = {\n+      'Accept': 'application/json',\n+      'x-api-key': 'LANGFLOW_API_KEY'\n+    }\n+\n+    # 3. Upload the file to Langflow\n+    response = requests.request(\"POST\", url, headers=headers, data=payload, files=files)\n+    print(response.text)\n+\n+    # 4. Get the uploaded file path from the response\n+    uploaded_data = response.json()\n+    uploaded_path = uploaded_data.get('path')\n+\n+    # 5. Call the Langflow run endpoint with the uploaded file path\n+    run_url = \"http://LANGFLOW_SERVER_ADDRESS/api/v1/run/FLOW_ID\"\n+    run_payload = {\n+        \"input_value\": \"Evaluate this resume for a job opening in my Marketing department.\",\n+        \"output_type\": \"chat\",\n+        \"input_type\": \"chat\",\n+        \"tweaks\": {\n+            \"File-KZP68\": {\n+                \"path\": uploaded_path\n+            }\n+        }\n+    }\n+    run_headers = {\n+        'Content-Type': 'application/json',\n+        'Accept': 'application/json',\n+        'x-api-key': 'LANGFLOW_API_KEY'\n+    }\n+    run_response = requests.post(run_url, headers=run_headers, data=json.dumps(run_payload))\n+    langflow_data = run_response.json()\n+    # Output only the message\n+    message = None\n+    try:\n+        message = langflow_data['outputs'][0]['outputs'][0]['results']['message']['data']['text']\n+    except (KeyError, IndexError, TypeError):\n+        pass\n+    print(message)\n+\n+    ```\n+    </details>\n+\n+    This script contains two requests.\n+\n+    The first request uploads `fake-resume.txt` to your Langflow server at the `/api/v2/files` endpoint, which returns a file path that can be referenced in subsequent Langflow requests, `02791d46-812f-4988-ab1c-7c430214f8d5/fake-resume.txt`.\n+\n+    The second request sends a chat message to the Langflow flow at the `/api/v1/run/` endpoint.\n+    The `tweaks` parameter includes the path to the uploaded file as the variable `uploaded_path`.\n+\n+3. Run the script to send the request.\n+\n+    <details open>\n+    <summary>Response</summary>\n+\n+    ```\n+    {\"id\":\"793ba3d8-5e7a-4499-8b89-d9a7b6325fee\",\"name\":\"fake-resume (1)\",\"path\":\"02791d46-812f-4988-ab1c-7c430214f8d5/fake-resume.txt\",\"size\":1779,\"provider\":null}\n+    The resume for Emily J. Wilson presents a strong candidate for a position in your Marketing department. Here are some key points to consider:\n+\n+    ### Strengths:\n+    1. **Experience**: With over 8 years in marketing, Emily has held progressively responsible positions, culminating in her current role as Marketing Director. This indicates a solid foundation in the field.\n+\n+    2. **Quantifiable Achievements**: The resume highlights specific accomplishments, such as a 25% increase in brand recognition and a 30% sales increase after launching new product lines. These metrics demonstrate her ability to drive results.\n+\n+    3. **Diverse Skill Set**: Emily's skills encompass various aspects of marketing, including strategy development, team management, social media marketing, event planning, and data analysis. This versatility can be beneficial in a dynamic marketing environment.\n+\n+    4. **Educational Background**: Her MBA and a Bachelor's degree in Marketing provide a strong academic foundation, which is often valued in marketing roles.\n+\n+    5. **Certifications**: The Certified Marketing Professional (CMP) and Google Analytics Certification indicate a commitment to professional development and staying current with industry standards.\n+\n+    ### Areas for Improvement:\n+    1. **Specificity in Skills**: While the skills listed are relevant, providing examples of how she has applied these skills in her previous roles could strengthen her resume further.\n+\n+    2. **References**: While stating that references are available upon request is standard, including a couple of testimonials or notable endorsements could enhance credibility.\n+\n+    3. **Formatting**: Ensure that the resume is visually appealing and easy to read. Clear headings and bullet points help in quickly identifying key information.\n+\n+    ### Conclusion:\n+    Overall, Emily J. Wilson's resume reflects a well-rounded marketing professional with a proven track record of success. If her experience aligns with the specific needs of your Marketing department, she could be a valuable addition to your team. Consider inviting her for an interview to further assess her fit for the role.\n+    ```\n+\n+    </details>\n+\n+    The initial output contains the JSON response object from the file upload endpoint, with the internal path where Langflow stores the file.\n+\n+    The LLM then retrieves this file and correctly evaluates its content, in this case the suitability of the resume for a job position.",
        "comment_created_at": "2025-07-03T22:08:26+00:00",
        "comment_author": "mendonk",
        "comment_body": "That would be a good idea",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2183764926",
    "pr_number": 8721,
    "pr_file": "docs/docs/Configuration/configuration-api-keys.md",
    "created_at": "2025-07-03T21:16:39+00:00",
    "commented_code": "import TabItem from '@theme/TabItem';\n import Icon from \"@site/src/components/icon\";\n \n-Langflow provides an API key functionality that allows users to access their individual components and flows without traditional login authentication.\n+You can use Langflow API keys to interact with Langflow programmatically.\n+\n+The API key has the same permissions and access as you do when you launch Langflow. This means your API key can only access your own flows, components, and data. You cannot access other users' resources with your own Langflow API keys.\n+The API key represents the user who created them. If you create your key as a superuser, you will have superuser privileges and can manage other users, but will do so with your API key.",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2183764926",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 8721,
        "pr_file": "docs/docs/Configuration/configuration-api-keys.md",
        "discussion_id": "2183764926",
        "commented_code": "@@ -7,66 +7,128 @@ import Tabs from '@theme/Tabs';\n import TabItem from '@theme/TabItem';\n import Icon from \"@site/src/components/icon\";\n \n-Langflow provides an API key functionality that allows users to access their individual components and flows without traditional login authentication.\n+You can use Langflow API keys to interact with Langflow programmatically.\n+\n+The API key has the same permissions and access as you do when you launch Langflow. This means your API key can only access your own flows, components, and data. You cannot access other users' resources with your own Langflow API keys.\n+The API key represents the user who created them. If you create your key as a superuser, you will have superuser privileges and can manage other users, but will do so with your API key.",
        "comment_created_at": "2025-07-03T21:16:39+00:00",
        "comment_author": "aimurphy",
        "comment_body": "```suggestion\r\nAn API key represents the user who created it. If you create a key as a superuser, then that key will have superuser privileges.\r\nAnyone who has that key can authorize superuser actions through the Langflow API, including user management and flow management.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2177937023",
    "pr_number": 8387,
    "pr_file": "docs/docs/Concepts/concepts-flows.md",
    "created_at": "2025-07-01T15:45:06+00:00",
    "commented_code": "slug: /concepts-flows\n ---\n \n-Flows in Langflow are fully serializable and can be saved and loaded from the file system. In this guide, we'll explore how to import and export flows.\n+import Icon from \"@site/src/components/icon\";\n \n-## Import Flow\n+Flows in Langflow are fully serializable and can be saved and loaded from the file system. In this guide, we'll explore how to import and export flows.\n \n-If you've already got a Langflow JSON file, import it into Langflow by clicking on the project name and choosing **Import Flow**.\n+## Import flow\n \n-![Import Flow](../../static/img/flows/import.gif)\n+If you already have a Langflow JSON file on your local machine, from the **Projects** page, click <Icon name=\"Upload\" aria-hidden=\"true\"/> **Upload a flow**.\n \n Once imported, your flow is ready to use.\n \n :::tip\n You can drag and drop Langflow JSON files directly from your file system into the Langflow window to import a flow, even into the initial Langflow splash screen.\n :::\n \n-## Export Flow\n+## Export flow\n+\n+To **Export** your flow, in the **Playground**, click **Share**, and then click **Export**.\n+\n+Select **Save with my API keys** to save the flow with any **Global variables** included.\n+\n+:::important",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2177937023",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 8387,
        "pr_file": "docs/docs/Concepts/concepts-flows.md",
        "discussion_id": "2177937023",
        "commented_code": "@@ -3,23 +3,34 @@ title: Flows\n slug: /concepts-flows\n ---\n \n-Flows in Langflow are fully serializable and can be saved and loaded from the file system. In this guide, we'll explore how to import and export flows.\n+import Icon from \"@site/src/components/icon\";\n \n-## Import Flow\n+Flows in Langflow are fully serializable and can be saved and loaded from the file system. In this guide, we'll explore how to import and export flows.\n \n-If you've already got a Langflow JSON file, import it into Langflow by clicking on the project name and choosing **Import Flow**.\n+## Import flow\n \n-![Import Flow](../../static/img/flows/import.gif)\n+If you already have a Langflow JSON file on your local machine, from the **Projects** page, click <Icon name=\"Upload\" aria-hidden=\"true\"/> **Upload a flow**.\n \n Once imported, your flow is ready to use.\n \n :::tip\n You can drag and drop Langflow JSON files directly from your file system into the Langflow window to import a flow, even into the initial Langflow splash screen.\n :::\n \n-## Export Flow\n+## Export flow\n+\n+To **Export** your flow, in the **Playground**, click **Share**, and then click **Export**.\n+\n+Select **Save with my API keys** to save the flow with any **Global variables** included.\n+\n+:::important",
        "comment_created_at": "2025-07-01T15:45:06+00:00",
        "comment_author": "aimurphy",
        "comment_body": "```suggestion\r\n:::warning\r\n```\r\n\r\nI would increase this to warning because it potentially exposes the literal key.",
        "pr_file_module": null
      }
    ]
  }
]