[
  {
    "discussion_id": "2298519605",
    "pr_number": 9520,
    "pr_file": "src/frontend/src/pages/MainPage/pages/filesPage/components/KnowledgeBaseEmptyState.tsx",
    "created_at": "2025-08-25T16:08:34+00:00",
    "commented_code": "-import { useParams } from \"react-router-dom\";\n import ForwardedIconComponent from \"@/components/common/genericIconComponent\";\n import { Button } from \"@/components/ui/button\";\n-import { useCustomNavigate } from \"@/customization/hooks/use-custom-navigate\";\n-import { track } from \"@/customization/utils/analytics\";\n-import useAddFlow from \"@/hooks/flows/use-add-flow\";\n-import useFlowsManagerStore from \"@/stores/flowsManagerStore\";\n-import { useFolderStore } from \"@/stores/foldersStore\";\n-import { updateIds } from \"@/utils/reactflowUtils\";\n-\n-const KnowledgeBaseEmptyState = () => {\n-  const examples = useFlowsManagerStore((state) => state.examples);\n-  const addFlow = useAddFlow();\n-  const navigate = useCustomNavigate();\n-  const { folderId } = useParams();\n-  const myCollectionId = useFolderStore((state) => state.myCollectionId);\n-\n-  const folderIdUrl = folderId ?? myCollectionId;\n-\n-  const handleCreateKnowledge = async () => {\n-    const knowledgeBasesExample = examples.find(\n-      (example) => example.name === \"Knowledge Ingestion\",\n-    );\n-\n-    if (knowledgeBasesExample && knowledgeBasesExample.data) {\n-      updateIds(knowledgeBasesExample.data);\n-      addFlow({ flow: knowledgeBasesExample }).then((id) => {\n-        navigate(`/flow/${id}/folder/${folderIdUrl}`);\n-      });\n-      track(\"New Flow Created\", {\n-        template: `${knowledgeBasesExample.name} Template`,\n-      });\n-    }\n-  };",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2298519605",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 9520,
        "pr_file": "src/frontend/src/pages/MainPage/pages/filesPage/components/KnowledgeBaseEmptyState.tsx",
        "discussion_id": "2298519605",
        "commented_code": "@@ -1,38 +1,11 @@\n-import { useParams } from \"react-router-dom\";\n import ForwardedIconComponent from \"@/components/common/genericIconComponent\";\n import { Button } from \"@/components/ui/button\";\n-import { useCustomNavigate } from \"@/customization/hooks/use-custom-navigate\";\n-import { track } from \"@/customization/utils/analytics\";\n-import useAddFlow from \"@/hooks/flows/use-add-flow\";\n-import useFlowsManagerStore from \"@/stores/flowsManagerStore\";\n-import { useFolderStore } from \"@/stores/foldersStore\";\n-import { updateIds } from \"@/utils/reactflowUtils\";\n-\n-const KnowledgeBaseEmptyState = () => {\n-  const examples = useFlowsManagerStore((state) => state.examples);\n-  const addFlow = useAddFlow();\n-  const navigate = useCustomNavigate();\n-  const { folderId } = useParams();\n-  const myCollectionId = useFolderStore((state) => state.myCollectionId);\n-\n-  const folderIdUrl = folderId ?? myCollectionId;\n-\n-  const handleCreateKnowledge = async () => {\n-    const knowledgeBasesExample = examples.find(\n-      (example) => example.name === \"Knowledge Ingestion\",\n-    );\n-\n-    if (knowledgeBasesExample && knowledgeBasesExample.data) {\n-      updateIds(knowledgeBasesExample.data);\n-      addFlow({ flow: knowledgeBasesExample }).then((id) => {\n-        navigate(`/flow/${id}/folder/${folderIdUrl}`);\n-      });\n-      track(\"New Flow Created\", {\n-        template: `${knowledgeBasesExample.name} Template`,\n-      });\n-    }\n-  };",
        "comment_created_at": "2025-08-25T16:08:34+00:00",
        "comment_author": "deon-sanchez",
        "comment_body": "moved this to the parent component because both empty and header buttons do the same thing.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2201455748",
    "pr_number": 9018,
    "pr_file": "src/frontend/src/modals/apiModal/utils/get-curl-code.tsx",
    "created_at": "2025-07-11T21:32:03+00:00",
    "commented_code": "? \"powershell\"\n       : \"unix\");\n \n-  const singleLinePayload = JSON.stringify(processedPayload);\n+  // Check if there are file uploads\n+  const tweaks = processedPayload.tweaks || {};\n+  const hasFiles = hasFileTweaks(tweaks);\n+  const hasChatFiles = hasChatInputFiles(tweaks);\n \n-  if (detectedPlatform === \"powershell\") {\n-    // PowerShell with here-string (most robust for complex JSON)\n-    return `if (-not $env:LANGFLOW_API_KEY) {\n-    Write-Error \"LANGFLOW_API_KEY environment variable not found\"\n-    exit 1\n-}\n+  // If no file uploads, use existing logic\n+  if (!hasFiles) {\n+    if (detectedPlatform === \"powershell\") {\n+      const payloadWithSession = {\n+        ...processedPayload,\n+        session_id: \"$(New-Guid).Guid\",\n+      };\n+      const singleLinePayload = JSON.stringify(payloadWithSession);\n+      // PowerShell with here-string (most robust for complex JSON)\n+      const authHeader = ` --header \"x-api-key: YOUR_API_KEY_HERE\"`;\n \n-$jsonData = @'\n+      return `$jsonData = @'\n ${singleLinePayload}\n '@\n \n curl --request POST \\`\n      --url \"${apiUrl}?stream=false\" \\`\n-     --header \"Content-Type: application/json\" \\`\n-     --header \"x-api-key: $env:LANGFLOW_API_KEY\" \\`\n+     --header \"Content-Type: application/json\" \\`${authHeader ? \"\n\" + authHeader : \"\"}\n      --data $jsonData`;\n-  } else {\n-    // Unix-like systems (Linux, Mac, WSL2)\n-    const unixFormattedPayload = JSON.stringify(processedPayload, null, 2)\n-      .split(\"\n\")\n-      .map((line, index) => (index === 0 ? line : \"         \" + line))\n-      .join(\"\n\\t\\t\");\n-\n-    return `# Get API key from environment variable\n-if [ -z \"$LANGFLOW_API_KEY\" ]; then\n-    echo \"Error: LANGFLOW_API_KEY environment variable not found. Please set your API key in the environment variables.\"\n-    exit 1\n-fi\n-\n-curl --request POST \\\\\n+    } else {\n+      const payloadWithSession = {\n+        ...processedPayload,\n+        session_id: \"$(uuidgen || cat /proc/sys/kernel/random/uuid)\",\n+      };\n+      const singleLinePayload = JSON.stringify(payloadWithSession);\n+      // Unix-like systems (Linux, Mac, WSL2)\n+      const unixFormattedPayload = JSON.stringify(payloadWithSession, null, 2)\n+        .split(\"\n\")\n+        .map((line, index) => (index === 0 ? line : \"         \" + line))\n+        .join(\"\n\\t\\t\");\n+\n+      const authHeader = ` --header \"x-api-key: YOUR_API_KEY_HERE\"`;\n+\n+      return `curl --request POST \\\\\n      --url '${apiUrl}?stream=false' \\\\\n-     --header 'Content-Type: application/json' \\\\\n-     --header \"x-api-key: $LANGFLOW_API_KEY\" \\\\\n+     --header 'Content-Type: application/json' \\\\${authHeader ? \"\n\" + authHeader : \"\"}\n      --data '${unixFormattedPayload}'`;\n+    }\n+  }\n+\n+  // File upload logic - handle multiple file types additively\n+  const chatInputNodeIds = getAllChatInputNodeIds(tweaks);\n+  const fileNodeIds = getAllFileNodeIds(tweaks);\n+  const nonFileTweaks = getNonFileTypeTweaks(tweaks);\n+\n+  if (chatInputNodeIds.length === 0 && fileNodeIds.length === 0) {\n+    // Fallback to non-file logic if no file nodes detected (edge case)\n+    return getNewCurlCode({\n+      flowId,\n+      endpointName,\n+      processedPayload: { ...processedPayload, tweaks: nonFileTweaks },\n+      platform,\n+    });\n+  }\n+\n+  // Build upload commands and tweak entries\n+  const uploadCommands: string[] = [];\n+  const tweakEntries: string[] = [];\n+  let uploadCounter = 1;\n+\n+  // Add ChatInput file uploads (v1 API)\n+  chatInputNodeIds.forEach((nodeId, index) => {\n+    if (detectedPlatform === \"powershell\") {\n+      const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\n+      uploadCommands.push(\n+        `curl -X POST \"${baseUrl}/api/v1/files/upload/${flowId}\"${authHeader} -F \"file=@your_image_${uploadCounter}.jpg\"`,\n+      );\n+    } else {\n+      const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\n+      uploadCommands.push(\n+        `curl -X POST \"${baseUrl}/api/v1/files/upload/${flowId}\"${authHeader} -F \"file=@your_image_${uploadCounter}.jpg\"`,\n+      );\n+    }\n+    const originalTweak = tweaks[nodeId];\n+    const modifiedTweak = { ...originalTweak };\n+    modifiedTweak.files = `REPLACE_WITH_FILE_PATH_FROM_UPLOAD_${uploadCounter}`;\n+    const tweakEntry = `    \"${nodeId}\": ${JSON.stringify(modifiedTweak, null, 6).split(\"\n\").join(\"\n    \")}`;\n+    tweakEntries.push(tweakEntry);\n+    uploadCounter++;\n+  });\n+\n+  // Add File/VideoFile uploads (v2 API)\n+  fileNodeIds.forEach((nodeId, index) => {\n+    if (detectedPlatform === \"powershell\") {\n+      const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\n+      uploadCommands.push(\n+        `curl -X POST \"${baseUrl}/api/v2/files\"${authHeader} -F \"file=@your_file_${uploadCounter}.pdf\"`,\n+      );\n+    } else {\n+      const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\n+      uploadCommands.push(\n+        `curl -X POST \"${baseUrl}/api/v2/files\"${authHeader} -F \"file=@your_file_${uploadCounter}.pdf\"`,\n+      );\n+    }\n+    const originalTweak = tweaks[nodeId];\n+    const modifiedTweak = { ...originalTweak };\n+    if (\"path\" in originalTweak) {\n+      modifiedTweak.path = [\n+        `REPLACE_WITH_FILE_PATH_FROM_UPLOAD_${uploadCounter}`,\n+      ];\n+    } else if (\"file_path\" in originalTweak) {\n+      modifiedTweak.file_path = `REPLACE_WITH_FILE_PATH_FROM_UPLOAD_${uploadCounter}`;\n+    }\n+    const tweakEntry = `    \"${nodeId}\": ${JSON.stringify(modifiedTweak, null, 6).split(\"\n\").join(\"\n    \")}`;\n+    tweakEntries.push(tweakEntry);\n+    uploadCounter++;\n+  });",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2201913507",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 9018,
        "pr_file": "src/frontend/src/modals/apiModal/utils/get-curl-code.tsx",
        "discussion_id": "2201455748",
        "commented_code": "@@ -59,41 +70,168 @@ export function getNewCurlCode({\n       ? \"powershell\"\n       : \"unix\");\n \n-  const singleLinePayload = JSON.stringify(processedPayload);\n+  // Check if there are file uploads\n+  const tweaks = processedPayload.tweaks || {};\n+  const hasFiles = hasFileTweaks(tweaks);\n+  const hasChatFiles = hasChatInputFiles(tweaks);\n \n-  if (detectedPlatform === \"powershell\") {\n-    // PowerShell with here-string (most robust for complex JSON)\n-    return `if (-not $env:LANGFLOW_API_KEY) {\n-    Write-Error \"LANGFLOW_API_KEY environment variable not found\"\n-    exit 1\n-}\n+  // If no file uploads, use existing logic\n+  if (!hasFiles) {\n+    if (detectedPlatform === \"powershell\") {\n+      const payloadWithSession = {\n+        ...processedPayload,\n+        session_id: \"$(New-Guid).Guid\",\n+      };\n+      const singleLinePayload = JSON.stringify(payloadWithSession);\n+      // PowerShell with here-string (most robust for complex JSON)\n+      const authHeader = ` --header \"x-api-key: YOUR_API_KEY_HERE\"`;\n \n-$jsonData = @'\n+      return `$jsonData = @'\n ${singleLinePayload}\n '@\n \n curl --request POST \\`\n      --url \"${apiUrl}?stream=false\" \\`\n-     --header \"Content-Type: application/json\" \\`\n-     --header \"x-api-key: $env:LANGFLOW_API_KEY\" \\`\n+     --header \"Content-Type: application/json\" \\`${authHeader ? \"\\n\" + authHeader : \"\"}\n      --data $jsonData`;\n-  } else {\n-    // Unix-like systems (Linux, Mac, WSL2)\n-    const unixFormattedPayload = JSON.stringify(processedPayload, null, 2)\n-      .split(\"\\n\")\n-      .map((line, index) => (index === 0 ? line : \"         \" + line))\n-      .join(\"\\n\\t\\t\");\n-\n-    return `# Get API key from environment variable\n-if [ -z \"$LANGFLOW_API_KEY\" ]; then\n-    echo \"Error: LANGFLOW_API_KEY environment variable not found. Please set your API key in the environment variables.\"\n-    exit 1\n-fi\n-\n-curl --request POST \\\\\n+    } else {\n+      const payloadWithSession = {\n+        ...processedPayload,\n+        session_id: \"$(uuidgen || cat /proc/sys/kernel/random/uuid)\",\n+      };\n+      const singleLinePayload = JSON.stringify(payloadWithSession);\n+      // Unix-like systems (Linux, Mac, WSL2)\n+      const unixFormattedPayload = JSON.stringify(payloadWithSession, null, 2)\n+        .split(\"\\n\")\n+        .map((line, index) => (index === 0 ? line : \"         \" + line))\n+        .join(\"\\n\\t\\t\");\n+\n+      const authHeader = ` --header \"x-api-key: YOUR_API_KEY_HERE\"`;\n+\n+      return `curl --request POST \\\\\n      --url '${apiUrl}?stream=false' \\\\\n-     --header 'Content-Type: application/json' \\\\\n-     --header \"x-api-key: $LANGFLOW_API_KEY\" \\\\\n+     --header 'Content-Type: application/json' \\\\${authHeader ? \"\\n\" + authHeader : \"\"}\n      --data '${unixFormattedPayload}'`;\n+    }\n+  }\n+\n+  // File upload logic - handle multiple file types additively\n+  const chatInputNodeIds = getAllChatInputNodeIds(tweaks);\n+  const fileNodeIds = getAllFileNodeIds(tweaks);\n+  const nonFileTweaks = getNonFileTypeTweaks(tweaks);\n+\n+  if (chatInputNodeIds.length === 0 && fileNodeIds.length === 0) {\n+    // Fallback to non-file logic if no file nodes detected (edge case)\n+    return getNewCurlCode({\n+      flowId,\n+      endpointName,\n+      processedPayload: { ...processedPayload, tweaks: nonFileTweaks },\n+      platform,\n+    });\n+  }\n+\n+  // Build upload commands and tweak entries\n+  const uploadCommands: string[] = [];\n+  const tweakEntries: string[] = [];\n+  let uploadCounter = 1;\n+\n+  // Add ChatInput file uploads (v1 API)\n+  chatInputNodeIds.forEach((nodeId, index) => {\n+    if (detectedPlatform === \"powershell\") {\n+      const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\n+      uploadCommands.push(\n+        `curl -X POST \"${baseUrl}/api/v1/files/upload/${flowId}\"${authHeader} -F \"file=@your_image_${uploadCounter}.jpg\"`,\n+      );\n+    } else {\n+      const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\n+      uploadCommands.push(\n+        `curl -X POST \"${baseUrl}/api/v1/files/upload/${flowId}\"${authHeader} -F \"file=@your_image_${uploadCounter}.jpg\"`,\n+      );\n+    }\n+    const originalTweak = tweaks[nodeId];\n+    const modifiedTweak = { ...originalTweak };\n+    modifiedTweak.files = `REPLACE_WITH_FILE_PATH_FROM_UPLOAD_${uploadCounter}`;\n+    const tweakEntry = `    \"${nodeId}\": ${JSON.stringify(modifiedTweak, null, 6).split(\"\\n\").join(\"\\n    \")}`;\n+    tweakEntries.push(tweakEntry);\n+    uploadCounter++;\n+  });\n+\n+  // Add File/VideoFile uploads (v2 API)\n+  fileNodeIds.forEach((nodeId, index) => {\n+    if (detectedPlatform === \"powershell\") {\n+      const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\n+      uploadCommands.push(\n+        `curl -X POST \"${baseUrl}/api/v2/files\"${authHeader} -F \"file=@your_file_${uploadCounter}.pdf\"`,\n+      );\n+    } else {\n+      const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\n+      uploadCommands.push(\n+        `curl -X POST \"${baseUrl}/api/v2/files\"${authHeader} -F \"file=@your_file_${uploadCounter}.pdf\"`,\n+      );\n+    }\n+    const originalTweak = tweaks[nodeId];\n+    const modifiedTweak = { ...originalTweak };\n+    if (\"path\" in originalTweak) {\n+      modifiedTweak.path = [\n+        `REPLACE_WITH_FILE_PATH_FROM_UPLOAD_${uploadCounter}`,\n+      ];\n+    } else if (\"file_path\" in originalTweak) {\n+      modifiedTweak.file_path = `REPLACE_WITH_FILE_PATH_FROM_UPLOAD_${uploadCounter}`;\n+    }\n+    const tweakEntry = `    \"${nodeId}\": ${JSON.stringify(modifiedTweak, null, 6).split(\"\\n\").join(\"\\n    \")}`;\n+    tweakEntries.push(tweakEntry);\n+    uploadCounter++;\n+  });",
        "comment_created_at": "2025-07-11T21:32:03+00:00",
        "comment_author": "namastex888",
        "comment_body": "> _\ud83d\udee0\ufe0f Refactor suggestion_\r\n> \r\n> **Simplify duplicated upload command generation.**\r\n> \r\n> The upload commands are identical for both platforms, creating unnecessary duplication.\r\n> \r\n> Extract the command generation:\r\n> \r\n> ```diff\r\n> -    if (detectedPlatform === \"powershell\") {\r\n> -      const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\r\n> -      uploadCommands.push(\r\n> -        `curl -X POST \"${baseUrl}/api/v1/files/upload/${flowId}\"${authHeader} -F \"file=@your_image_${uploadCounter}.jpg\"`,\r\n> -      );\r\n> -    } else {\r\n> -      const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\r\n> -      uploadCommands.push(\r\n> -        `curl -X POST \"${baseUrl}/api/v1/files/upload/${flowId}\"${authHeader} -F \"file=@your_image_${uploadCounter}.jpg\"`,\r\n> -      );\r\n> -    }\r\n> +    const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\r\n> +    uploadCommands.push(\r\n> +      `curl -X POST \"${baseUrl}/api/v1/files/upload/${flowId}\"${authHeader} -F \"file=@your_image_${uploadCounter}.jpg\"`,\r\n> +    );\r\n> ```\r\n> \r\n> Apply the same simplification to the File/VideoFile upload section.\r\n> \r\n> \ud83d\udcdd Committable suggestion\r\n> \ud83e\uddf0 Tools\r\n> \ud83e\udd16 Prompt for AI Agents\r\n\r\nneither is correct @coderabbitai, this is the correct pattern for powershell \r\n\r\n```\r\n$jsonData = @'\r\n{\"output_type\":\"chat\",\"input_type\":\"chat\",\"input_value\":\"hello world!\",\"session_id\":\"$(New-Guid).Guid\"}\r\n'@\r\n\r\ncurl --request POST `\r\n     --url \"http://localhost:3000/api/v1/run/1a616b45-5ef3-4141-8dc2-7ab2d973be79?stream=false\" `\r\n     --header \"Content-Type: application/json\" `\r\n --header \"x-api-key: YOUR_API_KEY_HERE\"\r\n     --data $jsonData\r\n     ```",
        "pr_file_module": null
      },
      {
        "comment_id": "2201924989",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 9018,
        "pr_file": "src/frontend/src/modals/apiModal/utils/get-curl-code.tsx",
        "discussion_id": "2201455748",
        "commented_code": "@@ -59,41 +70,168 @@ export function getNewCurlCode({\n       ? \"powershell\"\n       : \"unix\");\n \n-  const singleLinePayload = JSON.stringify(processedPayload);\n+  // Check if there are file uploads\n+  const tweaks = processedPayload.tweaks || {};\n+  const hasFiles = hasFileTweaks(tweaks);\n+  const hasChatFiles = hasChatInputFiles(tweaks);\n \n-  if (detectedPlatform === \"powershell\") {\n-    // PowerShell with here-string (most robust for complex JSON)\n-    return `if (-not $env:LANGFLOW_API_KEY) {\n-    Write-Error \"LANGFLOW_API_KEY environment variable not found\"\n-    exit 1\n-}\n+  // If no file uploads, use existing logic\n+  if (!hasFiles) {\n+    if (detectedPlatform === \"powershell\") {\n+      const payloadWithSession = {\n+        ...processedPayload,\n+        session_id: \"$(New-Guid).Guid\",\n+      };\n+      const singleLinePayload = JSON.stringify(payloadWithSession);\n+      // PowerShell with here-string (most robust for complex JSON)\n+      const authHeader = ` --header \"x-api-key: YOUR_API_KEY_HERE\"`;\n \n-$jsonData = @'\n+      return `$jsonData = @'\n ${singleLinePayload}\n '@\n \n curl --request POST \\`\n      --url \"${apiUrl}?stream=false\" \\`\n-     --header \"Content-Type: application/json\" \\`\n-     --header \"x-api-key: $env:LANGFLOW_API_KEY\" \\`\n+     --header \"Content-Type: application/json\" \\`${authHeader ? \"\\n\" + authHeader : \"\"}\n      --data $jsonData`;\n-  } else {\n-    // Unix-like systems (Linux, Mac, WSL2)\n-    const unixFormattedPayload = JSON.stringify(processedPayload, null, 2)\n-      .split(\"\\n\")\n-      .map((line, index) => (index === 0 ? line : \"         \" + line))\n-      .join(\"\\n\\t\\t\");\n-\n-    return `# Get API key from environment variable\n-if [ -z \"$LANGFLOW_API_KEY\" ]; then\n-    echo \"Error: LANGFLOW_API_KEY environment variable not found. Please set your API key in the environment variables.\"\n-    exit 1\n-fi\n-\n-curl --request POST \\\\\n+    } else {\n+      const payloadWithSession = {\n+        ...processedPayload,\n+        session_id: \"$(uuidgen || cat /proc/sys/kernel/random/uuid)\",\n+      };\n+      const singleLinePayload = JSON.stringify(payloadWithSession);\n+      // Unix-like systems (Linux, Mac, WSL2)\n+      const unixFormattedPayload = JSON.stringify(payloadWithSession, null, 2)\n+        .split(\"\\n\")\n+        .map((line, index) => (index === 0 ? line : \"         \" + line))\n+        .join(\"\\n\\t\\t\");\n+\n+      const authHeader = ` --header \"x-api-key: YOUR_API_KEY_HERE\"`;\n+\n+      return `curl --request POST \\\\\n      --url '${apiUrl}?stream=false' \\\\\n-     --header 'Content-Type: application/json' \\\\\n-     --header \"x-api-key: $LANGFLOW_API_KEY\" \\\\\n+     --header 'Content-Type: application/json' \\\\${authHeader ? \"\\n\" + authHeader : \"\"}\n      --data '${unixFormattedPayload}'`;\n+    }\n+  }\n+\n+  // File upload logic - handle multiple file types additively\n+  const chatInputNodeIds = getAllChatInputNodeIds(tweaks);\n+  const fileNodeIds = getAllFileNodeIds(tweaks);\n+  const nonFileTweaks = getNonFileTypeTweaks(tweaks);\n+\n+  if (chatInputNodeIds.length === 0 && fileNodeIds.length === 0) {\n+    // Fallback to non-file logic if no file nodes detected (edge case)\n+    return getNewCurlCode({\n+      flowId,\n+      endpointName,\n+      processedPayload: { ...processedPayload, tweaks: nonFileTweaks },\n+      platform,\n+    });\n+  }\n+\n+  // Build upload commands and tweak entries\n+  const uploadCommands: string[] = [];\n+  const tweakEntries: string[] = [];\n+  let uploadCounter = 1;\n+\n+  // Add ChatInput file uploads (v1 API)\n+  chatInputNodeIds.forEach((nodeId, index) => {\n+    if (detectedPlatform === \"powershell\") {\n+      const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\n+      uploadCommands.push(\n+        `curl -X POST \"${baseUrl}/api/v1/files/upload/${flowId}\"${authHeader} -F \"file=@your_image_${uploadCounter}.jpg\"`,\n+      );\n+    } else {\n+      const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\n+      uploadCommands.push(\n+        `curl -X POST \"${baseUrl}/api/v1/files/upload/${flowId}\"${authHeader} -F \"file=@your_image_${uploadCounter}.jpg\"`,\n+      );\n+    }\n+    const originalTweak = tweaks[nodeId];\n+    const modifiedTweak = { ...originalTweak };\n+    modifiedTweak.files = `REPLACE_WITH_FILE_PATH_FROM_UPLOAD_${uploadCounter}`;\n+    const tweakEntry = `    \"${nodeId}\": ${JSON.stringify(modifiedTweak, null, 6).split(\"\\n\").join(\"\\n    \")}`;\n+    tweakEntries.push(tweakEntry);\n+    uploadCounter++;\n+  });\n+\n+  // Add File/VideoFile uploads (v2 API)\n+  fileNodeIds.forEach((nodeId, index) => {\n+    if (detectedPlatform === \"powershell\") {\n+      const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\n+      uploadCommands.push(\n+        `curl -X POST \"${baseUrl}/api/v2/files\"${authHeader} -F \"file=@your_file_${uploadCounter}.pdf\"`,\n+      );\n+    } else {\n+      const authHeader = ` -H \"x-api-key: YOUR_API_KEY_HERE\"`;\n+      uploadCommands.push(\n+        `curl -X POST \"${baseUrl}/api/v2/files\"${authHeader} -F \"file=@your_file_${uploadCounter}.pdf\"`,\n+      );\n+    }\n+    const originalTweak = tweaks[nodeId];\n+    const modifiedTweak = { ...originalTweak };\n+    if (\"path\" in originalTweak) {\n+      modifiedTweak.path = [\n+        `REPLACE_WITH_FILE_PATH_FROM_UPLOAD_${uploadCounter}`,\n+      ];\n+    } else if (\"file_path\" in originalTweak) {\n+      modifiedTweak.file_path = `REPLACE_WITH_FILE_PATH_FROM_UPLOAD_${uploadCounter}`;\n+    }\n+    const tweakEntry = `    \"${nodeId}\": ${JSON.stringify(modifiedTweak, null, 6).split(\"\\n\").join(\"\\n    \")}`;\n+    tweakEntries.push(tweakEntry);\n+    uploadCounter++;\n+  });",
        "comment_created_at": "2025-07-11T21:39:25+00:00",
        "comment_author": "namastex888",
        "comment_body": "@coderabbitai implement the correct powershell formatting, using the example I gave you.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2219917589",
    "pr_number": 9095,
    "pr_file": "src/frontend/src/pages/MainPage/pages/homePage/components/McpServerTab.tsx",
    "created_at": "2025-07-21T18:11:46+00:00",
    "commented_code": "const apiUrl = customGetMCPUrl(projectId);\n \n+  // Generate auth headers based on the authentication type\n+  const getAuthHeaders = () => {\n+    // If MCP auth is disabled, use the previous API key behavior\n+    if (!ENABLE_MCP_AUTH) {\n+      if (isAutoLogin) return \"\";\n+      return `\n+        \"--headers\",\n+        \"x-api-key\",\n+        \"${apiKey || \"YOUR_API_KEY\"}\",`;\n+    }\n+\n+    if (!currentAuthSettings || currentAuthSettings.auth_type === \"none\") {\n+      return \"\";\n+    }\n+\n+    switch (currentAuthSettings.auth_type) {\n+      case \"apikey\":\n+        return `\n+        \"--headers\",\n+        \"x-api-key\",\n+        \"${currentAuthSettings.api_key || \"YOUR_API_KEY\"}\",`;\n+      case \"userpass\":\n+        return `\n+        \"--headers\",\n+        \"Authorization\",\n+        \"Basic ${btoa(\n+          `${currentAuthSettings.username || \"USERNAME\"}:${\n+            currentAuthSettings.password || \"PASSWORD\"\n+          }`,\n+        )}\",`;\n+      case \"bearer\":\n+        return `\n+        \"--headers\",\n+        \"Authorization\",\n+        \"Bearer ${currentAuthSettings.bearer_token || \"YOUR_BEARER_TOKEN\"}\",`;\n+      case \"iam\":\n+        return `\n+        \"--headers\",\n+        \"x-api-key\",\n+        \"${currentAuthSettings.api_key || \"YOUR_IAM_TOKEN\"}\",\n+        \"--headers\",\n+        \"x-iam-endpoint\",\n+        \"${currentAuthSettings.iam_endpoint || \"YOUR_IAM_ENDPOINT\"}\",`;\n+      default:\n+        return \"\";\n+    }\n+  };\n+\n   const MCP_SERVER_JSON = `{\n   \"mcpServers\": {\n-    \"lf-${parseString(folderName ?? \"project\", [\"snake_case\", \"no_blank\", \"lowercase\"]).slice(0, MAX_MCP_SERVER_NAME_LENGTH - 4)}\": {\n-      \"command\": \"${selectedPlatform === \"windows\" ? \"cmd\" : selectedPlatform === \"wsl\" ? \"wsl\" : \"uvx\"}\",\n+    \"lf-${parseString(folderName ?? \"project\", [\n+      \"snake_case\",\n+      \"no_blank\",\n+      \"lowercase\",\n+    ]).slice(0, MAX_MCP_SERVER_NAME_LENGTH - 4)}\": {\n+      \"command\": \"${\n+        selectedPlatform === \"windows\"\n+          ? \"cmd\"\n+          : selectedPlatform === \"wsl\"\n+            ? \"wsl\"\n+            : \"uvx\"\n+      }\",",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2219917589",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 9095,
        "pr_file": "src/frontend/src/pages/MainPage/pages/homePage/components/McpServerTab.tsx",
        "discussion_id": "2219917589",
        "commented_code": "@@ -187,10 +225,68 @@ const McpServerTab = ({ folderName }: { folderName: string }) => {\n \n   const apiUrl = customGetMCPUrl(projectId);\n \n+  // Generate auth headers based on the authentication type\n+  const getAuthHeaders = () => {\n+    // If MCP auth is disabled, use the previous API key behavior\n+    if (!ENABLE_MCP_AUTH) {\n+      if (isAutoLogin) return \"\";\n+      return `\n+        \"--headers\",\n+        \"x-api-key\",\n+        \"${apiKey || \"YOUR_API_KEY\"}\",`;\n+    }\n+\n+    if (!currentAuthSettings || currentAuthSettings.auth_type === \"none\") {\n+      return \"\";\n+    }\n+\n+    switch (currentAuthSettings.auth_type) {\n+      case \"apikey\":\n+        return `\n+        \"--headers\",\n+        \"x-api-key\",\n+        \"${currentAuthSettings.api_key || \"YOUR_API_KEY\"}\",`;\n+      case \"userpass\":\n+        return `\n+        \"--headers\",\n+        \"Authorization\",\n+        \"Basic ${btoa(\n+          `${currentAuthSettings.username || \"USERNAME\"}:${\n+            currentAuthSettings.password || \"PASSWORD\"\n+          }`,\n+        )}\",`;\n+      case \"bearer\":\n+        return `\n+        \"--headers\",\n+        \"Authorization\",\n+        \"Bearer ${currentAuthSettings.bearer_token || \"YOUR_BEARER_TOKEN\"}\",`;\n+      case \"iam\":\n+        return `\n+        \"--headers\",\n+        \"x-api-key\",\n+        \"${currentAuthSettings.api_key || \"YOUR_IAM_TOKEN\"}\",\n+        \"--headers\",\n+        \"x-iam-endpoint\",\n+        \"${currentAuthSettings.iam_endpoint || \"YOUR_IAM_ENDPOINT\"}\",`;\n+      default:\n+        return \"\";\n+    }\n+  };\n+\n   const MCP_SERVER_JSON = `{\n   \"mcpServers\": {\n-    \"lf-${parseString(folderName ?? \"project\", [\"snake_case\", \"no_blank\", \"lowercase\"]).slice(0, MAX_MCP_SERVER_NAME_LENGTH - 4)}\": {\n-      \"command\": \"${selectedPlatform === \"windows\" ? \"cmd\" : selectedPlatform === \"wsl\" ? \"wsl\" : \"uvx\"}\",\n+    \"lf-${parseString(folderName ?? \"project\", [\n+      \"snake_case\",\n+      \"no_blank\",\n+      \"lowercase\",\n+    ]).slice(0, MAX_MCP_SERVER_NAME_LENGTH - 4)}\": {\n+      \"command\": \"${\n+        selectedPlatform === \"windows\"\n+          ? \"cmd\"\n+          : selectedPlatform === \"wsl\"\n+            ? \"wsl\"\n+            : \"uvx\"\n+      }\",",
        "comment_created_at": "2025-07-21T18:11:46+00:00",
        "comment_author": "Cristhianzl",
        "comment_body": "This component is getting quite large.\r\nCan we break it into smaller pieces?\r\nI\u2019d suggest creating small components and moving helper functions outside the main component as well.",
        "pr_file_module": null
      }
    ]
  }
]