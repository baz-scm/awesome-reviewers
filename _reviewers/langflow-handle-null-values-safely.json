[
  {
    "discussion_id": "2024678291",
    "pr_number": 7183,
    "pr_file": "src/backend/base/langflow/graph/graph/base.py",
    "created_at": "2025-04-02T11:59:33+00:00",
    "commented_code": "self._run_id = str(run_id)\n \n-    async def initialize_run(self) -> None:\n+    async def initialize_run(self, session: AsyncSession) -> None:",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2024678291",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 7183,
        "pr_file": "src/backend/base/langflow/graph/graph/base.py",
        "discussion_id": "2024678291",
        "commented_code": "@@ -651,12 +653,13 @@ def set_run_id(self, run_id: uuid.UUID | None = None) -> None:\n \n         self._run_id = str(run_id)\n \n-    async def initialize_run(self) -> None:\n+    async def initialize_run(self, session: AsyncSession) -> None:",
        "comment_created_at": "2025-04-02T11:59:33+00:00",
        "comment_author": "ogabrielluiz",
        "comment_body": "We should make this optional or even use the `session_scope` in the `start_tracers` method. I'm not sure adding the session to the Graph is a good idea.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2216393700",
    "pr_number": 8737,
    "pr_file": "src/backend/base/langflow/custom/utils.py",
    "created_at": "2025-07-18T15:56:33+00:00",
    "commented_code": "def build_custom_component_template_from_inputs(\n-    custom_component: Component | CustomComponent, user_id: str | UUID | None = None\n+    custom_component: Component | CustomComponent, user_id: str | UUID | None = None, module_name: str | None = None",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2216393700",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 8737,
        "pr_file": "src/backend/base/langflow/custom/utils.py",
        "discussion_id": "2216393700",
        "commented_code": "@@ -415,7 +443,7 @@ def add_code_field_to_build_config(build_config: dict, raw_code: str):\n \n \n def build_custom_component_template_from_inputs(\n-    custom_component: Component | CustomComponent, user_id: str | UUID | None = None\n+    custom_component: Component | CustomComponent, user_id: str | UUID | None = None, module_name: str | None = None",
        "comment_created_at": "2025-07-18T15:56:33+00:00",
        "comment_author": "jordanrfrazier",
        "comment_body": "Should we expect a non null module name? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2216569358",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 8737,
        "pr_file": "src/backend/base/langflow/custom/utils.py",
        "discussion_id": "2216393700",
        "commented_code": "@@ -415,7 +443,7 @@ def add_code_field_to_build_config(build_config: dict, raw_code: str):\n \n \n def build_custom_component_template_from_inputs(\n-    custom_component: Component | CustomComponent, user_id: str | UUID | None = None\n+    custom_component: Component | CustomComponent, user_id: str | UUID | None = None, module_name: str | None = None",
        "comment_created_at": "2025-07-18T17:29:56+00:00",
        "comment_author": "ogabrielluiz",
        "comment_body": "In this case we don't always have that info for this function.",
        "pr_file_module": null
      },
      {
        "comment_id": "2216577414",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 8737,
        "pr_file": "src/backend/base/langflow/custom/utils.py",
        "discussion_id": "2216393700",
        "commented_code": "@@ -415,7 +443,7 @@ def add_code_field_to_build_config(build_config: dict, raw_code: str):\n \n \n def build_custom_component_template_from_inputs(\n-    custom_component: Component | CustomComponent, user_id: str | UUID | None = None\n+    custom_component: Component | CustomComponent, user_id: str | UUID | None = None, module_name: str | None = None",
        "comment_created_at": "2025-07-18T17:35:23+00:00",
        "comment_author": "ogabrielluiz",
        "comment_body": "When we are processing a CustomComponent there's no module to reference. We may have a generic one (e.g. `MyCustomComponentClass` -> `langflow.components.custom_component.my_custom_component_class.py`) as we prepare for the new export.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2213141021",
    "pr_number": 9087,
    "pr_file": "src/backend/base/langflow/inputs/inputs.py",
    "created_at": "2025-07-17T11:56:13+00:00",
    "commented_code": "\"\"\"Represents a multiselect input field.\n \n     This class represents a multiselect input field and provides functionality for handling multiselect values.\n-    It inherits from the `BaseInputMixin`, `ListableInputMixin` and `DropDownMixin` classes.\n+    It inherits from the `BaseInputMixin`, `ListableInputMixin`, and `DropDownMixin` classes.\n \n     Attributes:\n         field_type (SerializableFieldTypes): The field type of the input. Defaults to FieldTypes.TEXT.\n-        options (Optional[Union[list[str], Callable]]): List of options for the field. Only used when is_list=True.\n-            Default is None.\n+        options (list[str]): List of options for the field. Only used when is_list=True. Defaults to empty list.\n+        value (list[str]): The selected values. Defaults to empty list. Must always be a list of strings.\n     \"\"\"\n \n     field_type: SerializableFieldTypes = FieldTypes.TEXT\n     options: list[str] = Field(default_factory=list)\n     is_list: bool = Field(default=True, serialization_alias=\"list\")\n     combobox: CoalesceBool = False\n+    value: list[str] = Field(default_factory=list)\n \n-    @field_validator(\"value\")\n+    @field_validator(\"value\", mode=\"before\")\n     @classmethod\n     def validate_value(cls, v: Any, _info):\n-        # Check if value is a list of dicts\n+        # Ensure value is a list of strings; handle None safely during custom node construction.\n+        if v is None:\n+            return []\n+\n         if not isinstance(v, list):\n-            msg = f\"MultiselectInput value must be a list. Value: '{v}'\"\n-            raise ValueError(msg)  # noqa: TRY004\n+            msg = f\"MultiselectInput value must be a list. Got: {type(v)}\"\n+            raise TypeError(msg)\n+\n         for item in v:\n             if not isinstance(item, str):\n-                msg = f\"MultiselectInput value must be a list of strings. Item: '{item}' is not a string\"\n-                raise ValueError(msg)  # noqa: TRY004\n+                msg = f\"MultiselectInput value must be a list of strings. Item {item!r} is of type {type(item)}\"\n+                raise TypeError(msg)",
    "repo_full_name": "langflow-ai/langflow",
    "discussion_comments": [
      {
        "comment_id": "2213141021",
        "repo_full_name": "langflow-ai/langflow",
        "pr_number": 9087,
        "pr_file": "src/backend/base/langflow/inputs/inputs.py",
        "discussion_id": "2213141021",
        "commented_code": "@@ -582,30 +582,35 @@ class MultiselectInput(BaseInputMixin, ListableInputMixin, DropDownMixin, Metada\n     \"\"\"Represents a multiselect input field.\n \n     This class represents a multiselect input field and provides functionality for handling multiselect values.\n-    It inherits from the `BaseInputMixin`, `ListableInputMixin` and `DropDownMixin` classes.\n+    It inherits from the `BaseInputMixin`, `ListableInputMixin`, and `DropDownMixin` classes.\n \n     Attributes:\n         field_type (SerializableFieldTypes): The field type of the input. Defaults to FieldTypes.TEXT.\n-        options (Optional[Union[list[str], Callable]]): List of options for the field. Only used when is_list=True.\n-            Default is None.\n+        options (list[str]): List of options for the field. Only used when is_list=True. Defaults to empty list.\n+        value (list[str]): The selected values. Defaults to empty list. Must always be a list of strings.\n     \"\"\"\n \n     field_type: SerializableFieldTypes = FieldTypes.TEXT\n     options: list[str] = Field(default_factory=list)\n     is_list: bool = Field(default=True, serialization_alias=\"list\")\n     combobox: CoalesceBool = False\n+    value: list[str] = Field(default_factory=list)\n \n-    @field_validator(\"value\")\n+    @field_validator(\"value\", mode=\"before\")\n     @classmethod\n     def validate_value(cls, v: Any, _info):\n-        # Check if value is a list of dicts\n+        # Ensure value is a list of strings; handle None safely during custom node construction.\n+        if v is None:\n+            return []\n+\n         if not isinstance(v, list):\n-            msg = f\"MultiselectInput value must be a list. Value: '{v}'\"\n-            raise ValueError(msg)  # noqa: TRY004\n+            msg = f\"MultiselectInput value must be a list. Got: {type(v)}\"\n+            raise TypeError(msg)\n+\n         for item in v:\n             if not isinstance(item, str):\n-                msg = f\"MultiselectInput value must be a list of strings. Item: '{item}' is not a string\"\n-                raise ValueError(msg)  # noqa: TRY004\n+                msg = f\"MultiselectInput value must be a list of strings. Item {item!r} is of type {type(item)}\"\n+                raise TypeError(msg)",
        "comment_created_at": "2025-07-17T11:56:13+00:00",
        "comment_author": "ogabrielluiz",
        "comment_body": "```suggestion\n                msg = f\"MultiselectInput value must be a list of strings. Item {item!r} is of type {type(item)}\"\n                raise ValueError(msg)\n```",
        "pr_file_module": null
      }
    ]
  }
]