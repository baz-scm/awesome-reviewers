[
  {
    "discussion_id": "2167182245",
    "pr_number": 7508,
    "pr_file": "web/src/ee/features/billing/components/UsageTracker.tsx",
    "created_at": "2025-06-25T16:50:51+00:00",
    "commented_code": "const usage = usageQuery.data.usageCount || 0;\n   const usageType = usageQuery.data.usageType;\n-  const percentage = (usage / MAX_EVENTS_FREE_PLAN) * 100;\n+  const percentage = 300 + (usage / MAX_EVENTS_FREE_PLAN) * 100;",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2167182245",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7508,
        "pr_file": "web/src/ee/features/billing/components/UsageTracker.tsx",
        "discussion_id": "2167182245",
        "commented_code": "@@ -45,30 +49,52 @@ export const UsageTracker = () => {\n \n   const usage = usageQuery.data.usageCount || 0;\n   const usageType = usageQuery.data.usageType;\n-  const percentage = (usage / MAX_EVENTS_FREE_PLAN) * 100;\n+  const percentage = 300 + (usage / MAX_EVENTS_FREE_PLAN) * 100;",
        "comment_created_at": "2025-06-25T16:50:51+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The percentage is calculated with an added constant (300), which causes it to always be above the threshold (<90) and always meets the 'critical' condition (>200). This may be unintentional.\n```suggestion\n  const percentage = (usage / MAX_EVENTS_FREE_PLAN) * 100;\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2151750836",
    "pr_number": 7358,
    "pr_file": "web/src/features/prompts/components/prompt-detail.tsx",
    "created_at": "2025-06-17T09:11:06+00:00",
    "commented_code": ": (() => {\n         const folder = router.query.folder;\n         if (Array.isArray(folder)) {\n-          return folder.join('/');\n+          // Remove 'metrics' if present, it's not part of the prompt name\n+          const segments = folder.filter(segment => segment !== 'metrics');",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2151750836",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7358,
        "pr_file": "web/src/features/prompts/components/prompt-detail.tsx",
        "discussion_id": "2151750836",
        "commented_code": "@@ -106,7 +106,9 @@ export const PromptDetail = () => {\n     : (() => {\n         const folder = router.query.folder;\n         if (Array.isArray(folder)) {\n-          return folder.join('/');\n+          // Remove 'metrics' if present, it's not part of the prompt name\n+          const segments = folder.filter(segment => segment !== 'metrics');",
        "comment_created_at": "2025-06-17T09:11:06+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "If you intend to remove only a trailing 'metrics' segment\u2014not any occurrence\u2014consider checking if the last element equals 'metrics' (e.g. using a slice or pop) rather than filtering out all 'metrics' segments. This avoids inadvertently removing valid parts of a prompt name.\n```suggestion\n          const segments = folder[folder.length - 1] === 'metrics' ? folder.slice(0, -1) : folder;\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2101964539",
    "pr_number": 6966,
    "pr_file": "web/src/features/dashboard/components/BaseTimeSeriesChart.tsx",
    "created_at": "2025-05-22T08:31:57+00:00",
    "commented_code": ");\n   const colors = getColorsForCategories(Array.from(labels));\n \n+  // Calculate dynamic maxValue based on the maximum value in the data plus 10%\n+  const calculateMaxValue = (): number | undefined => {\n+    if (props.data.length === 0) return undefined;\n+\n+    const maxValue = Math.max(\n+      ...props.data.flatMap((point) => point.values.map((v) => v.value ?? 0)),\n+    );\n+\n+    if (maxValue <= 0) return undefined;\n+\n+    // Add 10% buffer\n+    const bufferedValue = maxValue * 1.1;\n+\n+    // Get order of magnitude and rounding goal\n+    const magnitude = Math.floor(Math.log10(bufferedValue));\n+    const roundTo = Math.max(1, Math.pow(10, magnitude) / 5);",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2101964539",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6966,
        "pr_file": "web/src/features/dashboard/components/BaseTimeSeriesChart.tsx",
        "discussion_id": "2101964539",
        "commented_code": "@@ -77,6 +77,29 @@ export function BaseTimeSeriesChart(props: {\n   );\n   const colors = getColorsForCategories(Array.from(labels));\n \n+  // Calculate dynamic maxValue based on the maximum value in the data plus 10%\n+  const calculateMaxValue = (): number | undefined => {\n+    if (props.data.length === 0) return undefined;\n+\n+    const maxValue = Math.max(\n+      ...props.data.flatMap((point) => point.values.map((v) => v.value ?? 0)),\n+    );\n+\n+    if (maxValue <= 0) return undefined;\n+\n+    // Add 10% buffer\n+    const bufferedValue = maxValue * 1.1;\n+\n+    // Get order of magnitude and rounding goal\n+    const magnitude = Math.floor(Math.log10(bufferedValue));\n+    const roundTo = Math.max(1, Math.pow(10, magnitude) / 5);",
        "comment_created_at": "2025-05-22T08:31:57+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Review use of `Math.max(1, ...)` for `roundTo`; this forces a minimum of 1 and may not suit charts with fractional values.\n```suggestion\n    const roundTo = Math.pow(10, magnitude) / 5;\n```\n",
        "pr_file_module": null
      }
    ]
  }
]