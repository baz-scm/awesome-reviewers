[
  {
    "discussion_id": "2167115222",
    "pr_number": 7507,
    "pr_file": "web/src/components/ui/CodeJsonViewer.tsx",
    "created_at": "2025-06-25T16:17:21+00:00",
    "commented_code": "return <JsonSkeleton className=\"h-full w-full overflow-hidden px-2 py-1\" />;\n   }\n \n-  const stringifiedJson = data ? stringifyJsonNode(data) : undefined;\n+  const stringifiedJson = data !== null && data !== undefined ? stringifyJsonNode(data) : undefined;",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2167115222",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7507,
        "pr_file": "web/src/components/ui/CodeJsonViewer.tsx",
        "discussion_id": "2167115222",
        "commented_code": "@@ -257,7 +257,7 @@ export const IOTableCell = ({\n     return <JsonSkeleton className=\"h-full w-full overflow-hidden px-2 py-1\" />;\n   }\n \n-  const stringifiedJson = data ? stringifyJsonNode(data) : undefined;\n+  const stringifiedJson = data !== null && data !== undefined ? stringifyJsonNode(data) : undefined;",
        "comment_created_at": "2025-06-25T16:17:21+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Good fix! Now falsy values like 0, false, or empty string are stringified. Consider using `data != null` for a more concise check.\n```suggestion\n  const stringifiedJson = data != null ? stringifyJsonNode(data) : undefined;\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2161237321",
    "pr_number": 7447,
    "pr_file": "web/src/components/trace/ObservationPreview.tsx",
    "created_at": "2025-06-23T10:13:54+00:00",
    "commented_code": "{preloadedObservation.modelParameters &&\n                     typeof preloadedObservation.modelParameters === \"object\"\n                       ? Object.entries(preloadedObservation.modelParameters)\n-                          .filter(Boolean)\n+                          .filter(([_, value]) => value !== null)",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2161237321",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7447,
        "pr_file": "web/src/components/trace/ObservationPreview.tsx",
        "discussion_id": "2161237321",
        "commented_code": "@@ -325,7 +325,7 @@ export const ObservationPreview = ({\n                     {preloadedObservation.modelParameters &&\n                     typeof preloadedObservation.modelParameters === \"object\"\n                       ? Object.entries(preloadedObservation.modelParameters)\n-                          .filter(Boolean)\n+                          .filter(([_, value]) => value !== null)",
        "comment_created_at": "2025-06-23T10:13:54+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Good improvement. Using .filter(([_, value]) => value !== null) now preserves falsy values like 0 or false. If undefined should also be omitted, consider using value != null.\n```suggestion\n                          .filter(([_, value]) => value != null)\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2142075101",
    "pr_number": 7265,
    "pr_file": "web/src/features/datasets/components/NewDatasetItemForm.tsx",
    "created_at": "2025-06-12T08:41:21+00:00",
    "commented_code": "),\n });\n \n+const formatJsonValue = (value: Prisma.JsonValue | undefined): string => {\n+  if (!value) return \"\";",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2142075101",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7265,
        "pr_file": "web/src/features/datasets/components/NewDatasetItemForm.tsx",
        "discussion_id": "2142075101",
        "commented_code": "@@ -82,6 +82,22 @@ const formSchema = z.object({\n   ),\n });\n \n+const formatJsonValue = (value: Prisma.JsonValue | undefined): string => {\n+  if (!value) return \"\";",
        "comment_created_at": "2025-06-12T08:41:21+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Avoid using `!value` to check for absence. Use explicit checks (e.g., `value === undefined || value === null`) so falsy but valid JSON values (like `false` or `0`) are handled correctly.\n```suggestion\n  if (value === undefined || value === null) return \"\";\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1926779701",
    "pr_number": 5178,
    "pr_file": "web/src/features/projects/components/ConfigureRetention.tsx",
    "created_at": "2025-01-23T10:54:34+00:00",
    "commented_code": "+import { Card } from \"@/src/components/ui/card\";\n+import { Button } from \"@/src/components/ui/button\";\n+import { Input } from \"@/src/components/ui/input\";\n+import { api } from \"@/src/utils/api\";\n+import type * as z from \"zod\";\n+import { zodResolver } from \"@hookform/resolvers/zod\";\n+import { useForm } from \"react-hook-form\";\n+import {\n+  Form,\n+  FormControl,\n+  FormField,\n+  FormItem,\n+  FormMessage,\n+} from \"@/src/components/ui/form\";\n+import Header from \"@/src/components/layouts/header\";\n+import { usePostHogClientCapture } from \"@/src/features/posthog-analytics/usePostHogClientCapture\";\n+import { LockIcon } from \"lucide-react\";\n+import { useQueryProject } from \"@/src/features/projects/hooks\";\n+import { useSession } from \"next-auth/react\";\n+import { useHasProjectAccess } from \"@/src/features/rbac/utils/checkProjectAccess\";\n+import { projectRetentionSchema } from \"@/src/features/auth/lib/projectRetentionSchema\";\n+import { ActionButton } from \"@/src/components/ActionButton\";\n+import { useHasEntitlement } from \"@/src/features/entitlements/hooks\";\n+\n+export default function ConfigureRetention() {\n+  const { update: updateSession } = useSession();\n+  const { project } = useQueryProject();\n+  const capture = usePostHogClientCapture();\n+  const hasAccess = useHasProjectAccess({\n+    projectId: project?.id,\n+    scope: \"project:update\",\n+  });\n+  const hasEntitlement = useHasEntitlement(\"data-retention\");\n+\n+  const form = useForm<z.infer<typeof projectRetentionSchema>>({\n+    resolver: zodResolver(projectRetentionSchema),\n+    defaultValues: {\n+      retention: project?.retentionDays ?? 0,\n+    },\n+  });\n+  const setRetention = api.projects.setRetention.useMutation({\n+    onSuccess: (_) => {\n+      void updateSession();\n+    },\n+    onError: (error) => form.setError(\"retention\", { message: error.message }),\n+  });\n+\n+  function onSubmit(values: z.infer<typeof projectRetentionSchema>) {\n+    if (!hasAccess || !project) return;\n+    capture(\"project_settings:retention_form_submit\");\n+    setRetention\n+      .mutateAsync({\n+        projectId: project.id,\n+        retention: values.retention || null, // Fallback to null for indefinite retention",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "1926779701",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 5178,
        "pr_file": "web/src/features/projects/components/ConfigureRetention.tsx",
        "discussion_id": "1926779701",
        "commented_code": "@@ -0,0 +1,145 @@\n+import { Card } from \"@/src/components/ui/card\";\n+import { Button } from \"@/src/components/ui/button\";\n+import { Input } from \"@/src/components/ui/input\";\n+import { api } from \"@/src/utils/api\";\n+import type * as z from \"zod\";\n+import { zodResolver } from \"@hookform/resolvers/zod\";\n+import { useForm } from \"react-hook-form\";\n+import {\n+  Form,\n+  FormControl,\n+  FormField,\n+  FormItem,\n+  FormMessage,\n+} from \"@/src/components/ui/form\";\n+import Header from \"@/src/components/layouts/header\";\n+import { usePostHogClientCapture } from \"@/src/features/posthog-analytics/usePostHogClientCapture\";\n+import { LockIcon } from \"lucide-react\";\n+import { useQueryProject } from \"@/src/features/projects/hooks\";\n+import { useSession } from \"next-auth/react\";\n+import { useHasProjectAccess } from \"@/src/features/rbac/utils/checkProjectAccess\";\n+import { projectRetentionSchema } from \"@/src/features/auth/lib/projectRetentionSchema\";\n+import { ActionButton } from \"@/src/components/ActionButton\";\n+import { useHasEntitlement } from \"@/src/features/entitlements/hooks\";\n+\n+export default function ConfigureRetention() {\n+  const { update: updateSession } = useSession();\n+  const { project } = useQueryProject();\n+  const capture = usePostHogClientCapture();\n+  const hasAccess = useHasProjectAccess({\n+    projectId: project?.id,\n+    scope: \"project:update\",\n+  });\n+  const hasEntitlement = useHasEntitlement(\"data-retention\");\n+\n+  const form = useForm<z.infer<typeof projectRetentionSchema>>({\n+    resolver: zodResolver(projectRetentionSchema),\n+    defaultValues: {\n+      retention: project?.retentionDays ?? 0,\n+    },\n+  });\n+  const setRetention = api.projects.setRetention.useMutation({\n+    onSuccess: (_) => {\n+      void updateSession();\n+    },\n+    onError: (error) => form.setError(\"retention\", { message: error.message }),\n+  });\n+\n+  function onSubmit(values: z.infer<typeof projectRetentionSchema>) {\n+    if (!hasAccess || !project) return;\n+    capture(\"project_settings:retention_form_submit\");\n+    setRetention\n+      .mutateAsync({\n+        projectId: project.id,\n+        retention: values.retention || null, // Fallback to null for indefinite retention",
        "comment_created_at": "2025-01-23T10:54:34+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Using `values.retention || null` will convert 0 to null, which is incorrect. Use `values.retention ?? null` to handle only `undefined` values.\n```suggestion\n        retention: values.retention ?? null, // Fallback to null for indefinite retention\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1926780337",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 5178,
        "pr_file": "web/src/features/projects/components/ConfigureRetention.tsx",
        "discussion_id": "1926779701",
        "commented_code": "@@ -0,0 +1,145 @@\n+import { Card } from \"@/src/components/ui/card\";\n+import { Button } from \"@/src/components/ui/button\";\n+import { Input } from \"@/src/components/ui/input\";\n+import { api } from \"@/src/utils/api\";\n+import type * as z from \"zod\";\n+import { zodResolver } from \"@hookform/resolvers/zod\";\n+import { useForm } from \"react-hook-form\";\n+import {\n+  Form,\n+  FormControl,\n+  FormField,\n+  FormItem,\n+  FormMessage,\n+} from \"@/src/components/ui/form\";\n+import Header from \"@/src/components/layouts/header\";\n+import { usePostHogClientCapture } from \"@/src/features/posthog-analytics/usePostHogClientCapture\";\n+import { LockIcon } from \"lucide-react\";\n+import { useQueryProject } from \"@/src/features/projects/hooks\";\n+import { useSession } from \"next-auth/react\";\n+import { useHasProjectAccess } from \"@/src/features/rbac/utils/checkProjectAccess\";\n+import { projectRetentionSchema } from \"@/src/features/auth/lib/projectRetentionSchema\";\n+import { ActionButton } from \"@/src/components/ActionButton\";\n+import { useHasEntitlement } from \"@/src/features/entitlements/hooks\";\n+\n+export default function ConfigureRetention() {\n+  const { update: updateSession } = useSession();\n+  const { project } = useQueryProject();\n+  const capture = usePostHogClientCapture();\n+  const hasAccess = useHasProjectAccess({\n+    projectId: project?.id,\n+    scope: \"project:update\",\n+  });\n+  const hasEntitlement = useHasEntitlement(\"data-retention\");\n+\n+  const form = useForm<z.infer<typeof projectRetentionSchema>>({\n+    resolver: zodResolver(projectRetentionSchema),\n+    defaultValues: {\n+      retention: project?.retentionDays ?? 0,\n+    },\n+  });\n+  const setRetention = api.projects.setRetention.useMutation({\n+    onSuccess: (_) => {\n+      void updateSession();\n+    },\n+    onError: (error) => form.setError(\"retention\", { message: error.message }),\n+  });\n+\n+  function onSubmit(values: z.infer<typeof projectRetentionSchema>) {\n+    if (!hasAccess || !project) return;\n+    capture(\"project_settings:retention_form_submit\");\n+    setRetention\n+      .mutateAsync({\n+        projectId: project.id,\n+        retention: values.retention || null, // Fallback to null for indefinite retention",
        "comment_created_at": "2025-01-23T10:54:58+00:00",
        "comment_author": "Steffen911",
        "comment_body": "This is expected behaviour.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2048990741",
    "pr_number": 6503,
    "pr_file": "web/src/hooks/useUniqueNameValidation.tsx",
    "created_at": "2025-04-17T13:45:45+00:00",
    "commented_code": "+import { useEffect } from \"react\";\n+import { type UseFormReturn } from \"react-hook-form\";\n+\n+interface UseUniqueNameValidationProps {\n+  currentName?: string;\n+  allNames: { value: string }[];\n+  form: UseFormReturn<any>;\n+  errorMessage: string;\n+}\n+\n+export const useUniqueNameValidation = ({\n+  currentName,\n+  allNames,\n+  form,\n+  errorMessage,\n+}: UseUniqueNameValidationProps) => {\n+  useEffect(() => {\n+    if (!currentName) {\n+      form.clearErrors(\"name\");\n+      return;\n+    }\n+\n+    const isNewName = !allNames\n+      ?.map((name) => name.value)",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2048990741",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6503,
        "pr_file": "web/src/hooks/useUniqueNameValidation.tsx",
        "discussion_id": "2048990741",
        "commented_code": "@@ -0,0 +1,35 @@\n+import { useEffect } from \"react\";\n+import { type UseFormReturn } from \"react-hook-form\";\n+\n+interface UseUniqueNameValidationProps {\n+  currentName?: string;\n+  allNames: { value: string }[];\n+  form: UseFormReturn<any>;\n+  errorMessage: string;\n+}\n+\n+export const useUniqueNameValidation = ({\n+  currentName,\n+  allNames,\n+  form,\n+  errorMessage,\n+}: UseUniqueNameValidationProps) => {\n+  useEffect(() => {\n+    if (!currentName) {\n+      form.clearErrors(\"name\");\n+      return;\n+    }\n+\n+    const isNewName = !allNames\n+      ?.map((name) => name.value)",
        "comment_created_at": "2025-04-17T13:45:45+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The optional chaining in `allNames?.map(...)` is unnecessary as `allNames` is a required prop; consider removing `?` for clarity.\n```suggestion\n      .map((name) => name.value)\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2046408536",
    "pr_number": 6480,
    "pr_file": "web/src/features/datasets/components/DatasetsTable.tsx",
    "created_at": "2025-04-16T08:40:02+00:00",
    "commented_code": "lastRunAt: item.lastRunAt ?? undefined,\n       countItems: item.countDatasetItems,\n       countRuns: item.countDatasetRuns,\n-      metadata: item.metadata,\n+      metadata: \"\",",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2046408536",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6480,
        "pr_file": "web/src/features/datasets/components/DatasetsTable.tsx",
        "discussion_id": "2046408536",
        "commented_code": "@@ -194,7 +194,7 @@ export function DatasetsTable(props: { projectId: string }) {\n       lastRunAt: item.lastRunAt ?? undefined,\n       countItems: item.countDatasetItems,\n       countRuns: item.countDatasetRuns,\n-      metadata: item.metadata,\n+      metadata: \"\",",
        "comment_created_at": "2025-04-16T08:40:02+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Hotfix: Metadata is forced to an empty string. Please add a TODO comment explaining this temporary workaround and consider using null or an empty object for consistent JSON handling.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2034717444",
    "pr_number": 6376,
    "pr_file": "web/src/pages/project/[projectId]/dashboards/[dashboardId]/index.tsx",
    "created_at": "2025-04-09T07:53:00+00:00",
    "commented_code": "+import { useRouter } from \"next/router\";\n+import { api } from \"@/src/utils/api\";\n+import Page from \"@/src/components/layouts/page\";\n+import { NoDataOrLoading } from \"@/src/components/NoDataOrLoading\";\n+import { DashboardWidget } from \"@/src/features/widgets\";\n+import { DatePickerWithRange } from \"@/src/components/date-picker\";\n+import { PopoverFilterBuilder } from \"@/src/features/filters/components/filter-builder\";\n+import { useDashboardDateRange } from \"@/src/hooks/useDashboardDateRange\";\n+import { useEffect, useState } from \"react\";\n+import type { ColumnDefinition, FilterState } from \"@langfuse/shared\";\n+import { Button } from \"@/src/components/ui/button\";\n+import { PlusIcon } from \"lucide-react\";\n+import { showSuccessToast } from \"@/src/features/notifications/showSuccessToast\";\n+import { showErrorToast } from \"@/src/features/notifications/showErrorToast\";\n+\n+interface WidgetPlacement {\n+  id: string;\n+  widgetId: string;\n+  x: number;\n+  y: number;\n+  x_size: number;\n+  y_size: number;\n+}\n+\n+export default function DashboardDetail() {\n+  const router = useRouter();\n+  const { projectId, dashboardId } = router.query as {\n+    projectId: string;\n+    dashboardId: string;\n+  };\n+\n+  // Filter state\n+  const { selectedOption, dateRange, setDateRangeAndOption } =\n+    useDashboardDateRange();\n+  const [userFilterState, setUserFilterState] = useState<FilterState>([]);\n+\n+  // State for handling widget deletion\n+  const [localDashboardDefinition, setLocalDashboardDefinition] = useState<{\n+    widgets: WidgetPlacement[];\n+  } | null>(null);\n+  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n+\n+  // Mutation for updating dashboard definition\n+  const updateDashboardDefinition =\n+    api.dashboard.updateDashboardDefinition.useMutation({\n+      onSuccess: () => {\n+        showSuccessToast({\n+          title: \"Dashboard updated\",\n+          description: \"Your changes have been saved successfully\",\n+        });\n+        setHasUnsavedChanges(false);\n+        // Invalidate the dashboard query to refetch the data\n+        dashboard.refetch();\n+      },\n+      onError: (error) => {\n+        showErrorToast(\"Error updating dashboard\", error.message);\n+      },\n+    });\n+\n+  const traceFilterOptions = api.traces.filterOptions.useQuery(\n+    {\n+      projectId,\n+    },\n+    {\n+      trpc: {\n+        context: {\n+          skipBatch: true,\n+        },\n+      },\n+      refetchOnMount: false,\n+      refetchOnWindowFocus: false,\n+      refetchOnReconnect: false,\n+      staleTime: Infinity,\n+    },\n+  );\n+\n+  const environmentFilterOptions =\n+    api.projects.environmentFilterOptions.useQuery(\n+      { projectId },\n+      {\n+        trpc: {\n+          context: {\n+            skipBatch: true,\n+          },\n+        },\n+        refetchOnMount: false,\n+        refetchOnWindowFocus: false,\n+        refetchOnReconnect: false,\n+        staleTime: Infinity,\n+      },\n+    );\n+  const environmentOptions =\n+    environmentFilterOptions.data?.map((value) => ({\n+      value: value.environment,\n+    })) || [];\n+  const nameOptions = traceFilterOptions.data?.name || [];\n+  const tagsOptions = traceFilterOptions.data?.tags || [];\n+\n+  // Filter columns for PopoverFilterBuilder\n+  const filterColumns: ColumnDefinition[] = [\n+    {\n+      name: \"Environment\",\n+      id: \"environment\",\n+      type: \"stringOptions\",\n+      options: environmentOptions,\n+      internal: \"internalValue\",\n+    },\n+    {\n+      name: \"Trace Name\",\n+      id: \"traceName\",\n+      type: \"stringOptions\",\n+      options: nameOptions,\n+      internal: \"internalValue\",\n+    },\n+    {\n+      name: \"Tags\",\n+      id: \"tags\",\n+      type: \"arrayOptions\",\n+      options: tagsOptions,\n+      internal: \"internalValue\",\n+    },\n+    {\n+      name: \"User\",\n+      id: \"user\",\n+      type: \"string\",\n+      internal: \"internalValue\",\n+    },\n+    {\n+      name: \"Session\",\n+      id: \"session\",\n+      type: \"string\",\n+      internal: \"internalValue\",\n+    },\n+    {\n+      name: \"Release\",\n+      id: \"release\",\n+      type: \"string\",\n+      internal: \"internalValue\",\n+    },\n+    {\n+      name: \"Version\",\n+      id: \"version\",\n+      type: \"string\",\n+      internal: \"internalValue\",\n+    },\n+  ];\n+\n+  // Fetch dashboard data\n+  const dashboard = api.dashboard.getDashboard.useQuery(\n+    { projectId, dashboardId },\n+    {\n+      enabled: Boolean(projectId) && Boolean(dashboardId),\n+    },\n+  );\n+\n+  useEffect(() => {\n+    if (dashboard.data && !localDashboardDefinition) {\n+      setLocalDashboardDefinition(dashboard.data.definition);\n+    }\n+  }, [dashboard.data]);\n+\n+  // Handle deleting a widget\n+  const handleDeleteWidget = (tileId: string) => {\n+    if (localDashboardDefinition) {\n+      const updatedWidgets = localDashboardDefinition.widgets.filter(\n+        (widget) => widget.id !== tileId,\n+      );\n+\n+      setLocalDashboardDefinition({\n+        ...localDashboardDefinition,\n+        widgets: updatedWidgets,\n+      });\n+\n+      setHasUnsavedChanges(true);\n+    }\n+  };\n+\n+  // Handle adding a widget\n+  const handleAddWidget = () => {\n+    showSuccessToast({\n+      title: \"Add Widget\",\n+      description: \"Add widget button clicked\",\n+    });\n+  };\n+\n+  // Handle saving the dashboard\n+  const handleSaveDashboard = () => {\n+    if (localDashboardDefinition && hasUnsavedChanges) {\n+      updateDashboardDefinition.mutate({\n+        projectId,\n+        dashboardId,\n+        definition: localDashboardDefinition,\n+      });\n+    }\n+  };\n+\n+  return (\n+    <Page\n+      withPadding\n+      headerProps={{\n+        title: dashboard.data?.name || \"Dashboard\",\n+        help: {\n+          description:\n+            dashboard.data?.description || \"No description available\",\n+        },\n+        actionButtonsRight: (\n+          <>\n+            <Button onClick={handleAddWidget}>\n+              <PlusIcon size={16} />\n+              Add Widget\n+            </Button>\n+            <Button\n+              onClick={handleSaveDashboard}\n+              disabled={\n+                !hasUnsavedChanges || updateDashboardDefinition.isLoading\n+              }\n+              loading={updateDashboardDefinition.isLoading}\n+            >\n+              Save\n+            </Button>\n+          </>\n+        ),\n+      }}\n+    >\n+      {dashboard.isLoading || !localDashboardDefinition ? (\n+        <NoDataOrLoading isLoading={true} />\n+      ) : dashboard.isError ? (\n+        <div className=\"flex h-64 items-center justify-center\">\n+          <div className=\"text-destructive\">\n+            Error: {dashboard.error.message}\n+          </div>\n+        </div>\n+      ) : (\n+        <div>\n+          <div className=\"my-3 flex flex-wrap items-center justify-between gap-2\">\n+            <div className=\"flex flex-col gap-2 lg:flex-row lg:gap-3\">\n+              <DatePickerWithRange\n+                dateRange={dateRange}\n+                setDateRangeAndOption={setDateRangeAndOption}\n+                selectedOption={selectedOption}\n+                className=\"my-0 max-w-full overflow-x-auto\"\n+              />\n+              <PopoverFilterBuilder\n+                columns={filterColumns}\n+                filterState={userFilterState}\n+                onChange={setUserFilterState}\n+              />\n+            </div>\n+          </div>\n+          <div\n+            className=\"grid auto-rows-[minmax(200px,auto)] grid-cols-12 gap-4\"\n+            style={{\n+              gridTemplateRows: `repeat(${Math.max(",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2034717444",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6376,
        "pr_file": "web/src/pages/project/[projectId]/dashboards/[dashboardId]/index.tsx",
        "discussion_id": "2034717444",
        "commented_code": "@@ -0,0 +1,273 @@\n+import { useRouter } from \"next/router\";\n+import { api } from \"@/src/utils/api\";\n+import Page from \"@/src/components/layouts/page\";\n+import { NoDataOrLoading } from \"@/src/components/NoDataOrLoading\";\n+import { DashboardWidget } from \"@/src/features/widgets\";\n+import { DatePickerWithRange } from \"@/src/components/date-picker\";\n+import { PopoverFilterBuilder } from \"@/src/features/filters/components/filter-builder\";\n+import { useDashboardDateRange } from \"@/src/hooks/useDashboardDateRange\";\n+import { useEffect, useState } from \"react\";\n+import type { ColumnDefinition, FilterState } from \"@langfuse/shared\";\n+import { Button } from \"@/src/components/ui/button\";\n+import { PlusIcon } from \"lucide-react\";\n+import { showSuccessToast } from \"@/src/features/notifications/showSuccessToast\";\n+import { showErrorToast } from \"@/src/features/notifications/showErrorToast\";\n+\n+interface WidgetPlacement {\n+  id: string;\n+  widgetId: string;\n+  x: number;\n+  y: number;\n+  x_size: number;\n+  y_size: number;\n+}\n+\n+export default function DashboardDetail() {\n+  const router = useRouter();\n+  const { projectId, dashboardId } = router.query as {\n+    projectId: string;\n+    dashboardId: string;\n+  };\n+\n+  // Filter state\n+  const { selectedOption, dateRange, setDateRangeAndOption } =\n+    useDashboardDateRange();\n+  const [userFilterState, setUserFilterState] = useState<FilterState>([]);\n+\n+  // State for handling widget deletion\n+  const [localDashboardDefinition, setLocalDashboardDefinition] = useState<{\n+    widgets: WidgetPlacement[];\n+  } | null>(null);\n+  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n+\n+  // Mutation for updating dashboard definition\n+  const updateDashboardDefinition =\n+    api.dashboard.updateDashboardDefinition.useMutation({\n+      onSuccess: () => {\n+        showSuccessToast({\n+          title: \"Dashboard updated\",\n+          description: \"Your changes have been saved successfully\",\n+        });\n+        setHasUnsavedChanges(false);\n+        // Invalidate the dashboard query to refetch the data\n+        dashboard.refetch();\n+      },\n+      onError: (error) => {\n+        showErrorToast(\"Error updating dashboard\", error.message);\n+      },\n+    });\n+\n+  const traceFilterOptions = api.traces.filterOptions.useQuery(\n+    {\n+      projectId,\n+    },\n+    {\n+      trpc: {\n+        context: {\n+          skipBatch: true,\n+        },\n+      },\n+      refetchOnMount: false,\n+      refetchOnWindowFocus: false,\n+      refetchOnReconnect: false,\n+      staleTime: Infinity,\n+    },\n+  );\n+\n+  const environmentFilterOptions =\n+    api.projects.environmentFilterOptions.useQuery(\n+      { projectId },\n+      {\n+        trpc: {\n+          context: {\n+            skipBatch: true,\n+          },\n+        },\n+        refetchOnMount: false,\n+        refetchOnWindowFocus: false,\n+        refetchOnReconnect: false,\n+        staleTime: Infinity,\n+      },\n+    );\n+  const environmentOptions =\n+    environmentFilterOptions.data?.map((value) => ({\n+      value: value.environment,\n+    })) || [];\n+  const nameOptions = traceFilterOptions.data?.name || [];\n+  const tagsOptions = traceFilterOptions.data?.tags || [];\n+\n+  // Filter columns for PopoverFilterBuilder\n+  const filterColumns: ColumnDefinition[] = [\n+    {\n+      name: \"Environment\",\n+      id: \"environment\",\n+      type: \"stringOptions\",\n+      options: environmentOptions,\n+      internal: \"internalValue\",\n+    },\n+    {\n+      name: \"Trace Name\",\n+      id: \"traceName\",\n+      type: \"stringOptions\",\n+      options: nameOptions,\n+      internal: \"internalValue\",\n+    },\n+    {\n+      name: \"Tags\",\n+      id: \"tags\",\n+      type: \"arrayOptions\",\n+      options: tagsOptions,\n+      internal: \"internalValue\",\n+    },\n+    {\n+      name: \"User\",\n+      id: \"user\",\n+      type: \"string\",\n+      internal: \"internalValue\",\n+    },\n+    {\n+      name: \"Session\",\n+      id: \"session\",\n+      type: \"string\",\n+      internal: \"internalValue\",\n+    },\n+    {\n+      name: \"Release\",\n+      id: \"release\",\n+      type: \"string\",\n+      internal: \"internalValue\",\n+    },\n+    {\n+      name: \"Version\",\n+      id: \"version\",\n+      type: \"string\",\n+      internal: \"internalValue\",\n+    },\n+  ];\n+\n+  // Fetch dashboard data\n+  const dashboard = api.dashboard.getDashboard.useQuery(\n+    { projectId, dashboardId },\n+    {\n+      enabled: Boolean(projectId) && Boolean(dashboardId),\n+    },\n+  );\n+\n+  useEffect(() => {\n+    if (dashboard.data && !localDashboardDefinition) {\n+      setLocalDashboardDefinition(dashboard.data.definition);\n+    }\n+  }, [dashboard.data]);\n+\n+  // Handle deleting a widget\n+  const handleDeleteWidget = (tileId: string) => {\n+    if (localDashboardDefinition) {\n+      const updatedWidgets = localDashboardDefinition.widgets.filter(\n+        (widget) => widget.id !== tileId,\n+      );\n+\n+      setLocalDashboardDefinition({\n+        ...localDashboardDefinition,\n+        widgets: updatedWidgets,\n+      });\n+\n+      setHasUnsavedChanges(true);\n+    }\n+  };\n+\n+  // Handle adding a widget\n+  const handleAddWidget = () => {\n+    showSuccessToast({\n+      title: \"Add Widget\",\n+      description: \"Add widget button clicked\",\n+    });\n+  };\n+\n+  // Handle saving the dashboard\n+  const handleSaveDashboard = () => {\n+    if (localDashboardDefinition && hasUnsavedChanges) {\n+      updateDashboardDefinition.mutate({\n+        projectId,\n+        dashboardId,\n+        definition: localDashboardDefinition,\n+      });\n+    }\n+  };\n+\n+  return (\n+    <Page\n+      withPadding\n+      headerProps={{\n+        title: dashboard.data?.name || \"Dashboard\",\n+        help: {\n+          description:\n+            dashboard.data?.description || \"No description available\",\n+        },\n+        actionButtonsRight: (\n+          <>\n+            <Button onClick={handleAddWidget}>\n+              <PlusIcon size={16} />\n+              Add Widget\n+            </Button>\n+            <Button\n+              onClick={handleSaveDashboard}\n+              disabled={\n+                !hasUnsavedChanges || updateDashboardDefinition.isLoading\n+              }\n+              loading={updateDashboardDefinition.isLoading}\n+            >\n+              Save\n+            </Button>\n+          </>\n+        ),\n+      }}\n+    >\n+      {dashboard.isLoading || !localDashboardDefinition ? (\n+        <NoDataOrLoading isLoading={true} />\n+      ) : dashboard.isError ? (\n+        <div className=\"flex h-64 items-center justify-center\">\n+          <div className=\"text-destructive\">\n+            Error: {dashboard.error.message}\n+          </div>\n+        </div>\n+      ) : (\n+        <div>\n+          <div className=\"my-3 flex flex-wrap items-center justify-between gap-2\">\n+            <div className=\"flex flex-col gap-2 lg:flex-row lg:gap-3\">\n+              <DatePickerWithRange\n+                dateRange={dateRange}\n+                setDateRangeAndOption={setDateRangeAndOption}\n+                selectedOption={selectedOption}\n+                className=\"my-0 max-w-full overflow-x-auto\"\n+              />\n+              <PopoverFilterBuilder\n+                columns={filterColumns}\n+                filterState={userFilterState}\n+                onChange={setUserFilterState}\n+              />\n+            </div>\n+          </div>\n+          <div\n+            className=\"grid auto-rows-[minmax(200px,auto)] grid-cols-12 gap-4\"\n+            style={{\n+              gridTemplateRows: `repeat(${Math.max(",
        "comment_created_at": "2025-04-09T07:53:00+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Potential issue: If `localDashboardDefinition.widgets` is empty, `Math.max` returns `-Infinity`. Consider providing a default value.\n```suggestion\n              gridTemplateRows: `repeat(${Math.max(0, ...localDashboardDefinition.widgets.map((w) => w.y + w.y_size))}, minmax(200px, auto))`,\n```",
        "pr_file_module": null
      }
    ]
  }
]