[
  {
    "discussion_id": "1926779701",
    "pr_number": 5178,
    "pr_file": "web/src/features/projects/components/ConfigureRetention.tsx",
    "created_at": "2025-01-23T10:54:34+00:00",
    "commented_code": "+import { Card } from \"@/src/components/ui/card\";\n+import { Button } from \"@/src/components/ui/button\";\n+import { Input } from \"@/src/components/ui/input\";\n+import { api } from \"@/src/utils/api\";\n+import type * as z from \"zod\";\n+import { zodResolver } from \"@hookform/resolvers/zod\";\n+import { useForm } from \"react-hook-form\";\n+import {\n+  Form,\n+  FormControl,\n+  FormField,\n+  FormItem,\n+  FormMessage,\n+} from \"@/src/components/ui/form\";\n+import Header from \"@/src/components/layouts/header\";\n+import { usePostHogClientCapture } from \"@/src/features/posthog-analytics/usePostHogClientCapture\";\n+import { LockIcon } from \"lucide-react\";\n+import { useQueryProject } from \"@/src/features/projects/hooks\";\n+import { useSession } from \"next-auth/react\";\n+import { useHasProjectAccess } from \"@/src/features/rbac/utils/checkProjectAccess\";\n+import { projectRetentionSchema } from \"@/src/features/auth/lib/projectRetentionSchema\";\n+import { ActionButton } from \"@/src/components/ActionButton\";\n+import { useHasEntitlement } from \"@/src/features/entitlements/hooks\";\n+\n+export default function ConfigureRetention() {\n+  const { update: updateSession } = useSession();\n+  const { project } = useQueryProject();\n+  const capture = usePostHogClientCapture();\n+  const hasAccess = useHasProjectAccess({\n+    projectId: project?.id,\n+    scope: \"project:update\",\n+  });\n+  const hasEntitlement = useHasEntitlement(\"data-retention\");\n+\n+  const form = useForm<z.infer<typeof projectRetentionSchema>>({\n+    resolver: zodResolver(projectRetentionSchema),\n+    defaultValues: {\n+      retention: project?.retentionDays ?? 0,\n+    },\n+  });\n+  const setRetention = api.projects.setRetention.useMutation({\n+    onSuccess: (_) => {\n+      void updateSession();\n+    },\n+    onError: (error) => form.setError(\"retention\", { message: error.message }),\n+  });\n+\n+  function onSubmit(values: z.infer<typeof projectRetentionSchema>) {\n+    if (!hasAccess || !project) return;\n+    capture(\"project_settings:retention_form_submit\");\n+    setRetention\n+      .mutateAsync({\n+        projectId: project.id,\n+        retention: values.retention || null, // Fallback to null for indefinite retention",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "1926780337",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 5178,
        "pr_file": "web/src/features/projects/components/ConfigureRetention.tsx",
        "discussion_id": "1926779701",
        "commented_code": "@@ -0,0 +1,145 @@\n+import { Card } from \"@/src/components/ui/card\";\n+import { Button } from \"@/src/components/ui/button\";\n+import { Input } from \"@/src/components/ui/input\";\n+import { api } from \"@/src/utils/api\";\n+import type * as z from \"zod\";\n+import { zodResolver } from \"@hookform/resolvers/zod\";\n+import { useForm } from \"react-hook-form\";\n+import {\n+  Form,\n+  FormControl,\n+  FormField,\n+  FormItem,\n+  FormMessage,\n+} from \"@/src/components/ui/form\";\n+import Header from \"@/src/components/layouts/header\";\n+import { usePostHogClientCapture } from \"@/src/features/posthog-analytics/usePostHogClientCapture\";\n+import { LockIcon } from \"lucide-react\";\n+import { useQueryProject } from \"@/src/features/projects/hooks\";\n+import { useSession } from \"next-auth/react\";\n+import { useHasProjectAccess } from \"@/src/features/rbac/utils/checkProjectAccess\";\n+import { projectRetentionSchema } from \"@/src/features/auth/lib/projectRetentionSchema\";\n+import { ActionButton } from \"@/src/components/ActionButton\";\n+import { useHasEntitlement } from \"@/src/features/entitlements/hooks\";\n+\n+export default function ConfigureRetention() {\n+  const { update: updateSession } = useSession();\n+  const { project } = useQueryProject();\n+  const capture = usePostHogClientCapture();\n+  const hasAccess = useHasProjectAccess({\n+    projectId: project?.id,\n+    scope: \"project:update\",\n+  });\n+  const hasEntitlement = useHasEntitlement(\"data-retention\");\n+\n+  const form = useForm<z.infer<typeof projectRetentionSchema>>({\n+    resolver: zodResolver(projectRetentionSchema),\n+    defaultValues: {\n+      retention: project?.retentionDays ?? 0,\n+    },\n+  });\n+  const setRetention = api.projects.setRetention.useMutation({\n+    onSuccess: (_) => {\n+      void updateSession();\n+    },\n+    onError: (error) => form.setError(\"retention\", { message: error.message }),\n+  });\n+\n+  function onSubmit(values: z.infer<typeof projectRetentionSchema>) {\n+    if (!hasAccess || !project) return;\n+    capture(\"project_settings:retention_form_submit\");\n+    setRetention\n+      .mutateAsync({\n+        projectId: project.id,\n+        retention: values.retention || null, // Fallback to null for indefinite retention",
        "comment_created_at": "2025-01-23T10:54:58+00:00",
        "comment_author": "Steffen911",
        "comment_body": "This is expected behaviour.",
        "pr_file_module": null
      }
    ]
  }
]