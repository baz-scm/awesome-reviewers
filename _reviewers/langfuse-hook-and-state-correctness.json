[
  {
    "discussion_id": "2084066219",
    "pr_number": 6729,
    "pr_file": "web/src/features/public-api/components/ApiKeyList.tsx",
    "created_at": "2025-05-12T08:01:37+00:00",
    "commented_code": "import { usePostHogClientCapture } from \"@/src/features/posthog-analytics/usePostHogClientCapture\";\n import { CreateApiKeyButton } from \"@/src/features/public-api/components/CreateApiKeyButton\";\n import { useHasProjectAccess } from \"@/src/features/rbac/utils/checkProjectAccess\";\n+import { useHasOrganizationAccess } from \"@/src/features/rbac/utils/checkOrganizationAccess\";\n import { api } from \"@/src/utils/api\";\n import { DialogDescription } from \"@radix-ui/react-dialog\";\n import { TrashIcon } from \"lucide-react\";\n import { useState } from \"react\";\n import { Alert, AlertDescription, AlertTitle } from \"@/src/components/ui/alert\";\n+import { startCase } from \"lodash\";\n \n-export function ApiKeyList(props: { projectId: string }) {\n-  const hasAccess = useHasProjectAccess({\n-    projectId: props.projectId,\n-    scope: \"apiKeys:read\",\n+type ApiKeyScope = \"project\" | \"organization\";\n+type ApiKeyEntity = { id: string; note: string | null };\n+\n+export function ApiKeyList(props: { entityId: string; scope: ApiKeyScope }) {\n+  const { entityId, scope } = props;\n+  if (!entityId) {\n+    throw new Error(\n+      `${scope}Id is required for ApiKeyList with scope ${scope}`,\n+    );\n+  }\n+\n+  const hasProjectAccess = useHasProjectAccess({\n+    projectId: props.entityId,\n+    scope: \"apiKeys:CUD\",\n+  });\n+  const hasOrganizationAccess = useHasOrganizationAccess({\n+    organizationId: props.entityId,\n+    scope: \"organization:CRUD_apiKeys\",\n   });\n \n-  const apiKeys = api.projectApiKeys.byProjectId.useQuery(\n-    {\n-      projectId: props.projectId,\n-    },\n-    {\n-      enabled: hasAccess,\n-    },\n-  );\n+  const hasAccess =\n+    props.scope === \"project\" ? hasProjectAccess : hasOrganizationAccess;\n+\n+  const apiKeysQuery =\n+    scope === \"project\"\n+      ? api.projectApiKeys.byProjectId.useQuery(\n+          { projectId: entityId },\n+          { enabled: hasAccess },\n+        )\n+      : api.organizationApiKeys.byOrganizationId.useQuery(\n+          { orgId: entityId },\n+          { enabled: hasAccess },\n+        );",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2084066219",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6729,
        "pr_file": "web/src/features/public-api/components/ApiKeyList.tsx",
        "discussion_id": "2084066219",
        "commented_code": "@@ -22,26 +22,47 @@ import {\n import { usePostHogClientCapture } from \"@/src/features/posthog-analytics/usePostHogClientCapture\";\n import { CreateApiKeyButton } from \"@/src/features/public-api/components/CreateApiKeyButton\";\n import { useHasProjectAccess } from \"@/src/features/rbac/utils/checkProjectAccess\";\n+import { useHasOrganizationAccess } from \"@/src/features/rbac/utils/checkOrganizationAccess\";\n import { api } from \"@/src/utils/api\";\n import { DialogDescription } from \"@radix-ui/react-dialog\";\n import { TrashIcon } from \"lucide-react\";\n import { useState } from \"react\";\n import { Alert, AlertDescription, AlertTitle } from \"@/src/components/ui/alert\";\n+import { startCase } from \"lodash\";\n \n-export function ApiKeyList(props: { projectId: string }) {\n-  const hasAccess = useHasProjectAccess({\n-    projectId: props.projectId,\n-    scope: \"apiKeys:read\",\n+type ApiKeyScope = \"project\" | \"organization\";\n+type ApiKeyEntity = { id: string; note: string | null };\n+\n+export function ApiKeyList(props: { entityId: string; scope: ApiKeyScope }) {\n+  const { entityId, scope } = props;\n+  if (!entityId) {\n+    throw new Error(\n+      `${scope}Id is required for ApiKeyList with scope ${scope}`,\n+    );\n+  }\n+\n+  const hasProjectAccess = useHasProjectAccess({\n+    projectId: props.entityId,\n+    scope: \"apiKeys:CUD\",\n+  });\n+  const hasOrganizationAccess = useHasOrganizationAccess({\n+    organizationId: props.entityId,\n+    scope: \"organization:CRUD_apiKeys\",\n   });\n \n-  const apiKeys = api.projectApiKeys.byProjectId.useQuery(\n-    {\n-      projectId: props.projectId,\n-    },\n-    {\n-      enabled: hasAccess,\n-    },\n-  );\n+  const hasAccess =\n+    props.scope === \"project\" ? hasProjectAccess : hasOrganizationAccess;\n+\n+  const apiKeysQuery =\n+    scope === \"project\"\n+      ? api.projectApiKeys.byProjectId.useQuery(\n+          { projectId: entityId },\n+          { enabled: hasAccess },\n+        )\n+      : api.organizationApiKeys.byOrganizationId.useQuery(\n+          { orgId: entityId },\n+          { enabled: hasAccess },\n+        );",
        "comment_created_at": "2025-05-12T08:01:37+00:00",
        "comment_author": "marliessophie",
        "comment_body": "Hooks cannot be called conditionally, see [docs](https://react.dev/warnings/invalid-hook-call-warning). We'll need to call both hooks each time. You can further use the `enabled` prop to call only if the scope matches. ",
        "pr_file_module": null
      }
    ]
  }
]