[
  {
    "discussion_id": "2104089171",
    "pr_number": 6991,
    "pr_file": "web/src/components/ui/sidebar.tsx",
    "created_at": "2025-05-23T08:25:30+00:00",
    "commented_code": "// This is the internal state of the sidebar.\n     // We use openProp and setOpenProp for control from outside the component.\n-    const [_open, _setOpen] = React.useState(defaultOpen);\n+    // Persist the state in localStorage so it is retained across sessions.\n+    const [_open, _setOpen] = useLocalStorage<boolean>(\n+      SIDEBAR_LOCAL_STORAGE_KEY,\n+      defaultOpen,\n+    );\n     const open = openProp ?? _open;\n     const setOpen = React.useCallback(\n       (value: boolean | ((value: boolean) => boolean)) => {\n+        const newValue = typeof value === \"function\" ? value(open) : value;",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2104089171",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6991,
        "pr_file": "web/src/components/ui/sidebar.tsx",
        "discussion_id": "2104089171",
        "commented_code": "@@ -73,22 +75,26 @@ const SidebarProvider = React.forwardRef<\n \n     // This is the internal state of the sidebar.\n     // We use openProp and setOpenProp for control from outside the component.\n-    const [_open, _setOpen] = React.useState(defaultOpen);\n+    // Persist the state in localStorage so it is retained across sessions.\n+    const [_open, _setOpen] = useLocalStorage<boolean>(\n+      SIDEBAR_LOCAL_STORAGE_KEY,\n+      defaultOpen,\n+    );\n     const open = openProp ?? _open;\n     const setOpen = React.useCallback(\n       (value: boolean | ((value: boolean) => boolean)) => {\n+        const newValue = typeof value === \"function\" ? value(open) : value;",
        "comment_created_at": "2025-05-23T08:25:30+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Potential bug: when using the functional form (i.e. `setOpen(prev => !prev)`), the updater uses the captured 'open' value instead of the latest state. This may lead to stale state in rapid updates. Consider passing the updater function directly to `_setOpen` (e.g. `_setOpen(prev => { const newValue = value(prev); update cookie; return newValue; })`) to ensure you always get the latest state.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2124369212",
    "pr_number": 7126,
    "pr_file": "web/src/components/table/use-cases/traces.tsx",
    "created_at": "2025-06-03T16:23:23+00:00",
    "commented_code": "? `/project/${projectId}/users/${userId}`\n     : `/project/${projectId}/traces`;\n \n-  const { getNavigationPath, expandPeek } = useTracePeekNavigation(urlPathname);\n-  const { setPeekView } = useTracePeekState(urlPathname);\n+  const PeekConfig = useMemo(\n+    () =>\n+      ({",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2124369212",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7126,
        "pr_file": "web/src/components/table/use-cases/traces.tsx",
        "discussion_id": "2124369212",
        "commented_code": "@@ -993,8 +997,40 @@ export default function TracesTable({\n     ? `/project/${projectId}/users/${userId}`\n     : `/project/${projectId}/traces`;\n \n-  const { getNavigationPath, expandPeek } = useTracePeekNavigation(urlPathname);\n-  const { setPeekView } = useTracePeekState(urlPathname);\n+  const PeekConfig = useMemo(\n+    () =>\n+      ({",
        "comment_created_at": "2025-06-03T16:23:23+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Avoid calling hooks (`useTracePeekNavigation`, `useTracePeekState`) inside a memoized function. Hooks must be called unconditionally at the top level of a component or custom hook.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2115361932",
    "pr_number": 7089,
    "pr_file": "web/src/features/widgets/components/DashboardGrid.tsx",
    "created_at": "2025-05-30T08:03:49+00:00",
    "commented_code": "dashboardOwner: \"LANGFUSE\" | \"PROJECT\" | undefined;\n }) {\n   const [rowHeight, setRowHeight] = useState(150);\n-\n-  // Detect if screen is medium or smaller (1024px and below)\n-  const isSmallScreen = useMediaQuery(\"(max-width: 1024px)\");\n+  const [editable, setEditable] = useState(canEdit);\n \n   const handleWidthChange = useCallback(\n-    (containerWidth: number) => {\n-      const calculatedRowHeight = ((containerWidth / 12) * 9) / 16;\n+    (containerWidth: number, _margin: [number, number], cols: number) => {\n+      setEditable(canEdit && cols === 12);\n+\n+      // Calculate row height based on actual column count for current breakpoint\n+      const calculatedRowHeight = ((containerWidth / cols) * 9) / 16;\n       if (calculatedRowHeight !== rowHeight) {\n         setRowHeight(calculatedRowHeight);\n       }\n     },\n-    [rowHeight],\n+    [rowHeight, editable],",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2115361932",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7089,
        "pr_file": "web/src/features/widgets/components/DashboardGrid.tsx",
        "discussion_id": "2115361932",
        "commented_code": "@@ -48,18 +30,19 @@ export function DashboardGrid({\n   dashboardOwner: \"LANGFUSE\" | \"PROJECT\" | undefined;\n }) {\n   const [rowHeight, setRowHeight] = useState(150);\n-\n-  // Detect if screen is medium or smaller (1024px and below)\n-  const isSmallScreen = useMediaQuery(\"(max-width: 1024px)\");\n+  const [editable, setEditable] = useState(canEdit);\n \n   const handleWidthChange = useCallback(\n-    (containerWidth: number) => {\n-      const calculatedRowHeight = ((containerWidth / 12) * 9) / 16;\n+    (containerWidth: number, _margin: [number, number], cols: number) => {\n+      setEditable(canEdit && cols === 12);\n+\n+      // Calculate row height based on actual column count for current breakpoint\n+      const calculatedRowHeight = ((containerWidth / cols) * 9) / 16;\n       if (calculatedRowHeight !== rowHeight) {\n         setRowHeight(calculatedRowHeight);\n       }\n     },\n-    [rowHeight],\n+    [rowHeight, editable],",
        "comment_created_at": "2025-05-30T08:03:49+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The `useCallback` uses the `canEdit` prop in `setEditable` but it's not included in the dependency array. Add `canEdit` to the dependency list to avoid stale closures.\n```suggestion\n    [rowHeight, editable, canEdit],\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2114223843",
    "pr_number": 7082,
    "pr_file": "web/src/features/widgets/components/DashboardGrid.tsx",
    "created_at": "2025-05-29T15:36:37+00:00",
    "commented_code": "import { type WidgetPlacement } from \"../components/DashboardWidget\";\n import { DashboardWidget } from \"@/src/features/widgets\";\n import { type FilterState } from \"@langfuse/shared\";\n-import { useState, useCallback } from \"react\";\n+import { useState, useCallback, useEffect } from \"react\";\n \n const ResponsiveGridLayout = WidthProvider(Responsive);\n \n+// Hook to detect screen size\n+function useMediaQuery(query: string) {\n+  const [matches, setMatches] = useState(false);\n+\n+  useEffect(() => {\n+    const media = window.matchMedia(query);\n+    if (media.matches !== matches) {\n+      setMatches(media.matches);\n+    }\n+    const listener = () => setMatches(media.matches);\n+    media.addEventListener(\"change\", listener);\n+    return () => media.removeEventListener(\"change\", listener);\n+  }, [matches, query]);",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2114223843",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7082,
        "pr_file": "web/src/features/widgets/components/DashboardGrid.tsx",
        "discussion_id": "2114223843",
        "commented_code": "@@ -4,10 +4,27 @@ import \"react-resizable/css/styles.css\";\n import { type WidgetPlacement } from \"../components/DashboardWidget\";\n import { DashboardWidget } from \"@/src/features/widgets\";\n import { type FilterState } from \"@langfuse/shared\";\n-import { useState, useCallback } from \"react\";\n+import { useState, useCallback, useEffect } from \"react\";\n \n const ResponsiveGridLayout = WidthProvider(Responsive);\n \n+// Hook to detect screen size\n+function useMediaQuery(query: string) {\n+  const [matches, setMatches] = useState(false);\n+\n+  useEffect(() => {\n+    const media = window.matchMedia(query);\n+    if (media.matches !== matches) {\n+      setMatches(media.matches);\n+    }\n+    const listener = () => setMatches(media.matches);\n+    media.addEventListener(\"change\", listener);\n+    return () => media.removeEventListener(\"change\", listener);\n+  }, [matches, query]);",
        "comment_created_at": "2025-05-29T15:36:37+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The `useMediaQuery` hook includes `matches` in its dependency array which may cause unnecessary effect re-renders. Consider using `[query]` only.\n```suggestion\n  }, [query]);\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2084066219",
    "pr_number": 6729,
    "pr_file": "web/src/features/public-api/components/ApiKeyList.tsx",
    "created_at": "2025-05-12T08:01:37+00:00",
    "commented_code": "import { usePostHogClientCapture } from \"@/src/features/posthog-analytics/usePostHogClientCapture\";\n import { CreateApiKeyButton } from \"@/src/features/public-api/components/CreateApiKeyButton\";\n import { useHasProjectAccess } from \"@/src/features/rbac/utils/checkProjectAccess\";\n+import { useHasOrganizationAccess } from \"@/src/features/rbac/utils/checkOrganizationAccess\";\n import { api } from \"@/src/utils/api\";\n import { DialogDescription } from \"@radix-ui/react-dialog\";\n import { TrashIcon } from \"lucide-react\";\n import { useState } from \"react\";\n import { Alert, AlertDescription, AlertTitle } from \"@/src/components/ui/alert\";\n+import { startCase } from \"lodash\";\n \n-export function ApiKeyList(props: { projectId: string }) {\n-  const hasAccess = useHasProjectAccess({\n-    projectId: props.projectId,\n-    scope: \"apiKeys:read\",\n+type ApiKeyScope = \"project\" | \"organization\";\n+type ApiKeyEntity = { id: string; note: string | null };\n+\n+export function ApiKeyList(props: { entityId: string; scope: ApiKeyScope }) {\n+  const { entityId, scope } = props;\n+  if (!entityId) {\n+    throw new Error(\n+      `${scope}Id is required for ApiKeyList with scope ${scope}`,\n+    );\n+  }\n+\n+  const hasProjectAccess = useHasProjectAccess({\n+    projectId: props.entityId,\n+    scope: \"apiKeys:CUD\",\n+  });\n+  const hasOrganizationAccess = useHasOrganizationAccess({\n+    organizationId: props.entityId,\n+    scope: \"organization:CRUD_apiKeys\",\n   });\n \n-  const apiKeys = api.projectApiKeys.byProjectId.useQuery(\n-    {\n-      projectId: props.projectId,\n-    },\n-    {\n-      enabled: hasAccess,\n-    },\n-  );\n+  const hasAccess =\n+    props.scope === \"project\" ? hasProjectAccess : hasOrganizationAccess;\n+\n+  const apiKeysQuery =\n+    scope === \"project\"\n+      ? api.projectApiKeys.byProjectId.useQuery(\n+          { projectId: entityId },\n+          { enabled: hasAccess },\n+        )\n+      : api.organizationApiKeys.byOrganizationId.useQuery(\n+          { orgId: entityId },\n+          { enabled: hasAccess },\n+        );",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2084066219",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6729,
        "pr_file": "web/src/features/public-api/components/ApiKeyList.tsx",
        "discussion_id": "2084066219",
        "commented_code": "@@ -22,26 +22,47 @@ import {\n import { usePostHogClientCapture } from \"@/src/features/posthog-analytics/usePostHogClientCapture\";\n import { CreateApiKeyButton } from \"@/src/features/public-api/components/CreateApiKeyButton\";\n import { useHasProjectAccess } from \"@/src/features/rbac/utils/checkProjectAccess\";\n+import { useHasOrganizationAccess } from \"@/src/features/rbac/utils/checkOrganizationAccess\";\n import { api } from \"@/src/utils/api\";\n import { DialogDescription } from \"@radix-ui/react-dialog\";\n import { TrashIcon } from \"lucide-react\";\n import { useState } from \"react\";\n import { Alert, AlertDescription, AlertTitle } from \"@/src/components/ui/alert\";\n+import { startCase } from \"lodash\";\n \n-export function ApiKeyList(props: { projectId: string }) {\n-  const hasAccess = useHasProjectAccess({\n-    projectId: props.projectId,\n-    scope: \"apiKeys:read\",\n+type ApiKeyScope = \"project\" | \"organization\";\n+type ApiKeyEntity = { id: string; note: string | null };\n+\n+export function ApiKeyList(props: { entityId: string; scope: ApiKeyScope }) {\n+  const { entityId, scope } = props;\n+  if (!entityId) {\n+    throw new Error(\n+      `${scope}Id is required for ApiKeyList with scope ${scope}`,\n+    );\n+  }\n+\n+  const hasProjectAccess = useHasProjectAccess({\n+    projectId: props.entityId,\n+    scope: \"apiKeys:CUD\",\n+  });\n+  const hasOrganizationAccess = useHasOrganizationAccess({\n+    organizationId: props.entityId,\n+    scope: \"organization:CRUD_apiKeys\",\n   });\n \n-  const apiKeys = api.projectApiKeys.byProjectId.useQuery(\n-    {\n-      projectId: props.projectId,\n-    },\n-    {\n-      enabled: hasAccess,\n-    },\n-  );\n+  const hasAccess =\n+    props.scope === \"project\" ? hasProjectAccess : hasOrganizationAccess;\n+\n+  const apiKeysQuery =\n+    scope === \"project\"\n+      ? api.projectApiKeys.byProjectId.useQuery(\n+          { projectId: entityId },\n+          { enabled: hasAccess },\n+        )\n+      : api.organizationApiKeys.byOrganizationId.useQuery(\n+          { orgId: entityId },\n+          { enabled: hasAccess },\n+        );",
        "comment_created_at": "2025-05-12T08:01:37+00:00",
        "comment_author": "marliessophie",
        "comment_body": "Hooks cannot be called conditionally, see [docs](https://react.dev/warnings/invalid-hook-call-warning). We'll need to call both hooks each time. You can further use the `enabled` prop to call only if the scope matches. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2006436876",
    "pr_number": 6127,
    "pr_file": "web/src/features/table/components/TableActionDialog.tsx",
    "created_at": "2025-03-20T20:51:47+00:00",
    "commented_code": "hasAccess={hasAccess}\n                   hasEntitlement={hasEntitlement}\n                   loading={isInProgress.isLoading}\n-                  disabled={isInProgress.data}\n+                  disabled={isInProgress.data || !form.getValues().targetId}",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2006436876",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6127,
        "pr_file": "web/src/features/table/components/TableActionDialog.tsx",
        "discussion_id": "2006436876",
        "commented_code": "@@ -123,7 +123,7 @@ export function TableActionDialog({\n                   hasAccess={hasAccess}\n                   hasEntitlement={hasEntitlement}\n                   loading={isInProgress.isLoading}\n-                  disabled={isInProgress.data}\n+                  disabled={isInProgress.data || !form.getValues().targetId}",
        "comment_created_at": "2025-03-20T20:51:47+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Consider using `form.watch('targetId')` instead of `form.getValues().targetId` for a reactive check. `getValues()` won\u2019t trigger re-renders when the field changes.\n```suggestion\n                  disabled={isInProgress.data || !form.watch('targetId')}\n```",
        "pr_file_module": null
      }
    ]
  }
]