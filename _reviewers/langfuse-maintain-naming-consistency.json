[
  {
    "discussion_id": "2100179878",
    "pr_number": 6957,
    "pr_file": "web/src/ee/features/playground/page/components/JumpToPlaygroundButton.tsx",
    "created_at": "2025-05-21T12:35:07+00:00",
    "commented_code": "const [isAvailable, setIsAvailable] = useState<boolean>(false);\n   const isEntitled = useHasEntitlement(\"playground\");\n \n+  const apiKeys = api.llmApiKey.all.useQuery(\n+    {\n+      projectId: projectId as string,\n+    },\n+    { enabled: Boolean(projectId) },\n+  );\n+\n+  const modelToProviderMap = useMemo(() => {\n+    const modelProviderMap: Record<string, string> = {};",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2100179878",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6957,
        "pr_file": "web/src/ee/features/playground/page/components/JumpToPlaygroundButton.tsx",
        "discussion_id": "2100179878",
        "commented_code": "@@ -62,11 +63,38 @@ export const JumpToPlaygroundButton: React.FC<JumpToPlaygroundButtonProps> = (\n   const [isAvailable, setIsAvailable] = useState<boolean>(false);\n   const isEntitled = useHasEntitlement(\"playground\");\n \n+  const apiKeys = api.llmApiKey.all.useQuery(\n+    {\n+      projectId: projectId as string,\n+    },\n+    { enabled: Boolean(projectId) },\n+  );\n+\n+  const modelToProviderMap = useMemo(() => {\n+    const modelProviderMap: Record<string, string> = {};",
        "comment_created_at": "2025-05-21T12:35:07+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The outer variable is still named `modelToProviderMap`, while inside the `useMemo` hook it's renamed to `modelProviderMap`. Consider using a consistent name to avoid confusion.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2100065685",
    "pr_number": 6955,
    "pr_file": "web/src/ee/features/playground/page/components/JumpToPlaygroundButton.tsx",
    "created_at": "2025-05-21T11:42:03+00:00",
    "commented_code": "schema: parseStructuredOutputSchema.data.json_schema.schema,\n         };\n     }\n+\n+    // LiteLLM records response_format in model params\n+    const modelParams = generation.modelParameters;\n+\n+    if (\n+      modelParams &&\n+      typeof modelParams === \"object\" &&\n+      \"response_format\" in modelParams &&\n+      typeof modelParams[\"response_format\"] === \"string\"\n+    ) {\n+      const parsedResponseFormat = JSON.parse(modelParams[\"response_format\"]);\n+\n+      const parseStructuredOutputSchema =",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2100065685",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6955,
        "pr_file": "web/src/ee/features/playground/page/components/JumpToPlaygroundButton.tsx",
        "discussion_id": "2100065685",
        "commented_code": "@@ -423,6 +423,29 @@ function parseStructuredOutputSchema(\n           schema: parseStructuredOutputSchema.data.json_schema.schema,\n         };\n     }\n+\n+    // LiteLLM records response_format in model params\n+    const modelParams = generation.modelParameters;\n+\n+    if (\n+      modelParams &&\n+      typeof modelParams === \"object\" &&\n+      \"response_format\" in modelParams &&\n+      typeof modelParams[\"response_format\"] === \"string\"\n+    ) {\n+      const parsedResponseFormat = JSON.parse(modelParams[\"response_format\"]);\n+\n+      const parseStructuredOutputSchema =",
        "comment_created_at": "2025-05-21T11:42:03+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Avoid reusing the function name `parseStructuredOutputSchema` as a local variable. Rename the parsed result (e.g., to `parsedResult`) for clarity.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2152561508",
    "pr_number": 7364,
    "pr_file": "web/src/features/widgets/chart-library/DownloadDropdown.tsx",
    "created_at": "2025-06-17T15:24:32+00:00",
    "commented_code": "+import { Download } from \"lucide-react\";\n+\n+export function DownloadDropdown({",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2152561508",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7364,
        "pr_file": "web/src/features/widgets/chart-library/DownloadDropdown.tsx",
        "discussion_id": "2152561508",
        "commented_code": "@@ -0,0 +1,68 @@\n+import { Download } from \"lucide-react\";\n+\n+export function DownloadDropdown({",
        "comment_created_at": "2025-06-17T15:24:32+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "This component now renders a single CSV download button instead of a dropdown. For clarity, consider renaming it (e.g. to `DownloadButton`) if no dropdown behavior is planned.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094115117",
    "pr_number": 6890,
    "pr_file": "web/src/features/widgets/components/WidgetForm.tsx",
    "created_at": "2025-05-17T12:51:04+00:00",
    "commented_code": "chartType: DashboardWidgetChartType;\n     chartConfig: { type: DashboardWidgetChartType; row_limit?: number };\n   }) => void;\n+  widgetId?: string;\n }) {\n   // State for form fields\n   const [widgetName, setWidgetName] = useState<string>(initialValues.name);\n   const [widgetDescription, setWidgetDescription] = useState<string>(\n     initialValues.description,\n   );\n+\n+  // Determine if this is an existing widget (editing mode)\n+  const isExistingWidget = Boolean(widgetId);\n+\n+  // Disables further auto-updates once the user edits name or description\n+  const [autoLocked, setAutoLocked] = useState<boolean>(isExistingWidget);",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2094115117",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6890,
        "pr_file": "web/src/features/widgets/components/WidgetForm.tsx",
        "discussion_id": "2094115117",
        "commented_code": "@@ -74,12 +79,20 @@ export function WidgetForm({\n     chartType: DashboardWidgetChartType;\n     chartConfig: { type: DashboardWidgetChartType; row_limit?: number };\n   }) => void;\n+  widgetId?: string;\n }) {\n   // State for form fields\n   const [widgetName, setWidgetName] = useState<string>(initialValues.name);\n   const [widgetDescription, setWidgetDescription] = useState<string>(\n     initialValues.description,\n   );\n+\n+  // Determine if this is an existing widget (editing mode)\n+  const isExistingWidget = Boolean(widgetId);\n+\n+  // Disables further auto-updates once the user edits name or description\n+  const [autoLocked, setAutoLocked] = useState<boolean>(isExistingWidget);",
        "comment_created_at": "2025-05-17T12:51:04+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Consider renaming `autoLocked` to `isAutoLocked` for clarity, since it represents a boolean state.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2029905464",
    "pr_number": 6353,
    "pr_file": "web/src/components/token-usage-badge.tsx",
    "created_at": "2025-04-05T16:03:02+00:00",
    "commented_code": "variant?: \"default\" | \"secondary\" | \"destructive\" | \"outline\" | \"tertiary\";\n }) => {\n   const usage = {\n-    promptTokens: props.observations\n-      .map((o) => o.promptTokens)\n+    inputUsage: props.observations\n+      .map((o) => o.inputUsage)\n       .reduce((a, b) => a + b, 0),\n-    completionTokens: props.observations\n-      .map((o) => o.completionTokens)\n+    outputUsage: props.observations\n+      .map((o) => o.outputUsage)\n       .reduce((a, b) => a + b, 0),\n     totalTokens: props.observations",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2029905464",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6353,
        "pr_file": "web/src/components/token-usage-badge.tsx",
        "discussion_id": "2029905464",
        "commented_code": "@@ -9,14 +9,14 @@ export const AggUsageBadge = (props: {\n   variant?: \"default\" | \"secondary\" | \"destructive\" | \"outline\" | \"tertiary\";\n }) => {\n   const usage = {\n-    promptTokens: props.observations\n-      .map((o) => o.promptTokens)\n+    inputUsage: props.observations\n+      .map((o) => o.inputUsage)\n       .reduce((a, b) => a + b, 0),\n-    completionTokens: props.observations\n-      .map((o) => o.completionTokens)\n+    outputUsage: props.observations\n+      .map((o) => o.outputUsage)\n       .reduce((a, b) => a + b, 0),\n     totalTokens: props.observations",
        "comment_created_at": "2025-04-05T16:03:02+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Typographical Error: In the `AggUsageBadge` component, the property `totalTokens` should be renamed to `totalUsage` to match the usage expected in `TokenUsageBadge`. This naming inconsistency might lead to issues when consuming the property.\n```suggestion\n    totalUsage: props.observations\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2024515668",
    "pr_number": 6296,
    "pr_file": "web/src/components/table/peek/peek-trace-detail.tsx",
    "created_at": "2025-04-02T10:05:08+00:00",
    "commented_code": "+import { usePeekData } from \"@/src/components/table/peek/hooks/useTracePeekState\";\n+import { useTracePeekState } from \"@/src/components/table/peek/hooks/useTracePeekState\";\n+import { Trace } from \"@/src/components/trace\";\n+import { Skeleton } from \"@/src/components/ui/skeleton\";\n+\n+export const PeakViewTraceDetail = ({ projectId }: { projectId: string }) => {",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2024515668",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6296,
        "pr_file": "web/src/components/table/peek/peek-trace-detail.tsx",
        "discussion_id": "2024515668",
        "commented_code": "@@ -0,0 +1,21 @@\n+import { usePeekData } from \"@/src/components/table/peek/hooks/useTracePeekState\";\n+import { useTracePeekState } from \"@/src/components/table/peek/hooks/useTracePeekState\";\n+import { Trace } from \"@/src/components/trace\";\n+import { Skeleton } from \"@/src/components/ui/skeleton\";\n+\n+export const PeakViewTraceDetail = ({ projectId }: { projectId: string }) => {",
        "comment_created_at": "2025-04-02T10:05:08+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Typographical Error: The component name `PeakViewTraceDetail` appears to be a typo. Considering the context of 'peek' in the file and imports, it likely should be `PeekViewTraceDetail`. Please correct the component name for consistency.",
        "pr_file_module": null
      }
    ]
  }
]