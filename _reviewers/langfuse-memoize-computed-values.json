[
  {
    "discussion_id": "2124369205",
    "pr_number": 7126,
    "pr_file": "web/src/components/table/peek.tsx",
    "created_at": "2025-06-03T16:23:23+00:00",
    "commented_code": "};\n };\n \n-export function TablePeekView<TData>({\n-  itemType,\n-  selectedRowId,\n-  onOpenChange,\n-  onExpand,\n-  getNavigationPath,\n-  children,\n-  listKey,\n-  peekEventOptions,\n-  row,\n-  customTitlePrefix,\n-}: DataTablePeekViewProps<TData>) {\n-  const eventHandler = createPeekEventHandler(peekEventOptions);\n-\n-  if (!selectedRowId) return null;\n-\n-  const handleOpenChange = (open: boolean) => {\n-    if (!open && eventHandler()) {\n-      return;\n-    }\n-    if (!!row && typeof row === \"object\" && \"timestamp\" in row) {\n-      onOpenChange(open, selectedRowId, (row as any).timestamp.toISOString());\n-    } else {\n-      onOpenChange(open, selectedRowId);\n-    }\n-  };\n+export const TablePeekView = memo(\n+  function TablePeekView<TData>({\n+    peekView,\n+    row,\n+    selectedRowId,\n+  }: {\n+    peekView: DataTablePeekViewProps<TData>;\n+    row?: TData;\n+    selectedRowId?: string | null;\n+  }) {\n+    const eventHandler = createPeekEventHandler(peekView.peekEventOptions);\n+\n+    if (!selectedRowId) return null;\n+\n+    const handleOpenChange = (open: boolean) => {\n+      if (!open && eventHandler()) {\n+        return;\n+      }\n+      if (!!row && typeof row === \"object\" && \"timestamp\" in row) {\n+        peekView.onOpenChange(\n+          open,\n+          selectedRowId,\n+          (row as any).timestamp.toISOString(),\n+        );\n+      } else {\n+        peekView.onOpenChange(open, selectedRowId);\n+      }\n+    };\n \n-  const canExpand = typeof onExpand === \"function\";\n+    const canExpand = typeof peekView.onExpand === \"function\";\n \n-  return (\n-    <Sheet open={!!selectedRowId} onOpenChange={handleOpenChange} modal={false}>\n-      <SheetContent\n-        onPointerDownOutside={(e) => {\n-          // Prevent the default behavior of closing when clicking outside when we set modal={false}\n-          e.preventDefault();\n-        }}\n-        side=\"right\"\n-        className=\"flex max-h-full min-h-0 min-w-[60vw] flex-col gap-0 overflow-hidden rounded-l-xl p-0\"\n+    return (\n+      <Sheet\n+        open={!!selectedRowId}\n+        onOpenChange={handleOpenChange}\n+        modal={false}\n       >\n-        <SheetHeader className=\"flex min-h-12 flex-row flex-nowrap items-center justify-between rounded-t-xl bg-header px-2\">\n-          <SheetTitle className=\"!mt-0 ml-2 flex min-w-0 flex-row items-center gap-2\">\n-            <ItemBadge type={itemType} showLabel />\n-            <span\n-              className=\"truncate text-sm font-medium focus:outline-none\"\n-              tabIndex={0}\n+        <SheetContent\n+          onPointerDownOutside={(e) => {\n+            // Prevent the default behavior of closing when clicking outside when we set modal={false}\n+            e.preventDefault();\n+          }}\n+          side=\"right\"\n+          className=\"flex max-h-full min-h-0 min-w-[60vw] flex-col gap-0 overflow-hidden rounded-l-xl p-0\"\n+        >\n+          <SheetHeader className=\"flex min-h-12 flex-row flex-nowrap items-center justify-between rounded-t-xl bg-header px-2\">\n+            <SheetTitle className=\"!mt-0 ml-2 flex min-w-0 flex-row items-center gap-2\">\n+              <ItemBadge type={peekView.itemType} showLabel />\n+              <span\n+                className=\"truncate text-sm font-medium focus:outline-none\"\n+                tabIndex={0}\n+              >\n+                {peekView.customTitlePrefix\n+                  ? `${peekView.customTitlePrefix} ${selectedRowId}`\n+                  : selectedRowId}\n+              </span>\n+            </SheetTitle>\n+            <div\n+              className={cn(\n+                \"!mt-0 flex flex-shrink-0 flex-row items-center gap-2\",\n+                !canExpand && \"mr-8\",\n+              )}\n             >\n-              {customTitlePrefix\n-                ? `${customTitlePrefix} ${selectedRowId}`\n-                : selectedRowId}\n-            </span>\n-          </SheetTitle>\n-          <div\n-            className={cn(\n-              \"!mt-0 flex flex-shrink-0 flex-row items-center gap-2\",\n-              !canExpand && \"mr-8\",\n-            )}\n-          >\n-            {selectedRowId && listKey && getNavigationPath && (\n-              <DetailPageNav\n-                currentId={selectedRowId}\n-                path={getNavigationPath}\n-                listKey={listKey}\n-              />\n-            )}\n-            {canExpand && (\n-              <div className=\"!mt-0 mr-8 flex h-full flex-row items-center gap-1 border-l\">\n-                <Button\n-                  variant=\"ghost\"\n-                  size=\"icon-xs\"\n-                  title=\"Open in current tab\"\n-                  className=\"ml-2\"\n-                  onClick={() => onExpand?.(false, row)}\n-                >\n-                  <Expand className=\"h-4 w-4\" />\n-                </Button>\n-                <Button\n-                  variant=\"ghost\"\n-                  size=\"icon-xs\"\n-                  title=\"Open in new tab\"\n-                  onClick={() => onExpand?.(true, row)}\n-                >\n-                  <ExternalLink className=\"h-4 w-4\" />\n-                </Button>\n-              </div>\n-            )}\n-          </div>\n-        </SheetHeader>\n-        <Separator />\n-        <div className=\"flex max-h-full min-h-0 flex-1 flex-col\">\n-          <div className=\"flex-1 overflow-auto\">\n-            {typeof children === \"function\" ? children(row) : children}\n+              {selectedRowId &&\n+                peekView.listKey &&\n+                peekView.getNavigationPath && (\n+                  <DetailPageNav\n+                    currentId={selectedRowId}\n+                    path={peekView.getNavigationPath}\n+                    listKey={peekView.listKey}\n+                  />\n+                )}\n+              {canExpand && (\n+                <div className=\"!mt-0 mr-8 flex h-full flex-row items-center gap-1 border-l\">\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"icon-xs\"\n+                    title=\"Open in current tab\"\n+                    className=\"ml-2\"\n+                    onClick={() => peekView.onExpand?.(false, row)}\n+                  >\n+                    <Expand className=\"h-4 w-4\" />\n+                  </Button>\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"icon-xs\"\n+                    title=\"Open in new tab\"\n+                    onClick={() => peekView.onExpand?.(true, row)}\n+                  >\n+                    <ExternalLink className=\"h-4 w-4\" />\n+                  </Button>\n+                </div>\n+              )}\n+            </div>\n+          </SheetHeader>\n+          <Separator />\n+          <div className=\"flex max-h-full min-h-0 flex-1 flex-col\">\n+            <div className=\"flex-1 overflow-auto\" key={selectedRowId}>\n+              {typeof peekView.children === \"function\"\n+                ? peekView.children(row)\n+                : peekView.children}\n+            </div>\n           </div>\n-        </div>\n-      </SheetContent>\n-    </Sheet>\n-  );\n-}\n+        </SheetContent>\n+      </Sheet>\n+    );\n+  },\n+  (prev, next) => {\n+    return prev.selectedRowId === next.selectedRowId;",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2124369205",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7126,
        "pr_file": "web/src/components/table/peek.tsx",
        "discussion_id": "2124369205",
        "commented_code": "@@ -87,100 +82,114 @@ export const createPeekEventHandler = (options?: PeekEventControlOptions) => {\n   };\n };\n \n-export function TablePeekView<TData>({\n-  itemType,\n-  selectedRowId,\n-  onOpenChange,\n-  onExpand,\n-  getNavigationPath,\n-  children,\n-  listKey,\n-  peekEventOptions,\n-  row,\n-  customTitlePrefix,\n-}: DataTablePeekViewProps<TData>) {\n-  const eventHandler = createPeekEventHandler(peekEventOptions);\n-\n-  if (!selectedRowId) return null;\n-\n-  const handleOpenChange = (open: boolean) => {\n-    if (!open && eventHandler()) {\n-      return;\n-    }\n-    if (!!row && typeof row === \"object\" && \"timestamp\" in row) {\n-      onOpenChange(open, selectedRowId, (row as any).timestamp.toISOString());\n-    } else {\n-      onOpenChange(open, selectedRowId);\n-    }\n-  };\n+export const TablePeekView = memo(\n+  function TablePeekView<TData>({\n+    peekView,\n+    row,\n+    selectedRowId,\n+  }: {\n+    peekView: DataTablePeekViewProps<TData>;\n+    row?: TData;\n+    selectedRowId?: string | null;\n+  }) {\n+    const eventHandler = createPeekEventHandler(peekView.peekEventOptions);\n+\n+    if (!selectedRowId) return null;\n+\n+    const handleOpenChange = (open: boolean) => {\n+      if (!open && eventHandler()) {\n+        return;\n+      }\n+      if (!!row && typeof row === \"object\" && \"timestamp\" in row) {\n+        peekView.onOpenChange(\n+          open,\n+          selectedRowId,\n+          (row as any).timestamp.toISOString(),\n+        );\n+      } else {\n+        peekView.onOpenChange(open, selectedRowId);\n+      }\n+    };\n \n-  const canExpand = typeof onExpand === \"function\";\n+    const canExpand = typeof peekView.onExpand === \"function\";\n \n-  return (\n-    <Sheet open={!!selectedRowId} onOpenChange={handleOpenChange} modal={false}>\n-      <SheetContent\n-        onPointerDownOutside={(e) => {\n-          // Prevent the default behavior of closing when clicking outside when we set modal={false}\n-          e.preventDefault();\n-        }}\n-        side=\"right\"\n-        className=\"flex max-h-full min-h-0 min-w-[60vw] flex-col gap-0 overflow-hidden rounded-l-xl p-0\"\n+    return (\n+      <Sheet\n+        open={!!selectedRowId}\n+        onOpenChange={handleOpenChange}\n+        modal={false}\n       >\n-        <SheetHeader className=\"flex min-h-12 flex-row flex-nowrap items-center justify-between rounded-t-xl bg-header px-2\">\n-          <SheetTitle className=\"!mt-0 ml-2 flex min-w-0 flex-row items-center gap-2\">\n-            <ItemBadge type={itemType} showLabel />\n-            <span\n-              className=\"truncate text-sm font-medium focus:outline-none\"\n-              tabIndex={0}\n+        <SheetContent\n+          onPointerDownOutside={(e) => {\n+            // Prevent the default behavior of closing when clicking outside when we set modal={false}\n+            e.preventDefault();\n+          }}\n+          side=\"right\"\n+          className=\"flex max-h-full min-h-0 min-w-[60vw] flex-col gap-0 overflow-hidden rounded-l-xl p-0\"\n+        >\n+          <SheetHeader className=\"flex min-h-12 flex-row flex-nowrap items-center justify-between rounded-t-xl bg-header px-2\">\n+            <SheetTitle className=\"!mt-0 ml-2 flex min-w-0 flex-row items-center gap-2\">\n+              <ItemBadge type={peekView.itemType} showLabel />\n+              <span\n+                className=\"truncate text-sm font-medium focus:outline-none\"\n+                tabIndex={0}\n+              >\n+                {peekView.customTitlePrefix\n+                  ? `${peekView.customTitlePrefix} ${selectedRowId}`\n+                  : selectedRowId}\n+              </span>\n+            </SheetTitle>\n+            <div\n+              className={cn(\n+                \"!mt-0 flex flex-shrink-0 flex-row items-center gap-2\",\n+                !canExpand && \"mr-8\",\n+              )}\n             >\n-              {customTitlePrefix\n-                ? `${customTitlePrefix} ${selectedRowId}`\n-                : selectedRowId}\n-            </span>\n-          </SheetTitle>\n-          <div\n-            className={cn(\n-              \"!mt-0 flex flex-shrink-0 flex-row items-center gap-2\",\n-              !canExpand && \"mr-8\",\n-            )}\n-          >\n-            {selectedRowId && listKey && getNavigationPath && (\n-              <DetailPageNav\n-                currentId={selectedRowId}\n-                path={getNavigationPath}\n-                listKey={listKey}\n-              />\n-            )}\n-            {canExpand && (\n-              <div className=\"!mt-0 mr-8 flex h-full flex-row items-center gap-1 border-l\">\n-                <Button\n-                  variant=\"ghost\"\n-                  size=\"icon-xs\"\n-                  title=\"Open in current tab\"\n-                  className=\"ml-2\"\n-                  onClick={() => onExpand?.(false, row)}\n-                >\n-                  <Expand className=\"h-4 w-4\" />\n-                </Button>\n-                <Button\n-                  variant=\"ghost\"\n-                  size=\"icon-xs\"\n-                  title=\"Open in new tab\"\n-                  onClick={() => onExpand?.(true, row)}\n-                >\n-                  <ExternalLink className=\"h-4 w-4\" />\n-                </Button>\n-              </div>\n-            )}\n-          </div>\n-        </SheetHeader>\n-        <Separator />\n-        <div className=\"flex max-h-full min-h-0 flex-1 flex-col\">\n-          <div className=\"flex-1 overflow-auto\">\n-            {typeof children === \"function\" ? children(row) : children}\n+              {selectedRowId &&\n+                peekView.listKey &&\n+                peekView.getNavigationPath && (\n+                  <DetailPageNav\n+                    currentId={selectedRowId}\n+                    path={peekView.getNavigationPath}\n+                    listKey={peekView.listKey}\n+                  />\n+                )}\n+              {canExpand && (\n+                <div className=\"!mt-0 mr-8 flex h-full flex-row items-center gap-1 border-l\">\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"icon-xs\"\n+                    title=\"Open in current tab\"\n+                    className=\"ml-2\"\n+                    onClick={() => peekView.onExpand?.(false, row)}\n+                  >\n+                    <Expand className=\"h-4 w-4\" />\n+                  </Button>\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"icon-xs\"\n+                    title=\"Open in new tab\"\n+                    onClick={() => peekView.onExpand?.(true, row)}\n+                  >\n+                    <ExternalLink className=\"h-4 w-4\" />\n+                  </Button>\n+                </div>\n+              )}\n+            </div>\n+          </SheetHeader>\n+          <Separator />\n+          <div className=\"flex max-h-full min-h-0 flex-1 flex-col\">\n+            <div className=\"flex-1 overflow-auto\" key={selectedRowId}>\n+              {typeof peekView.children === \"function\"\n+                ? peekView.children(row)\n+                : peekView.children}\n+            </div>\n           </div>\n-        </div>\n-      </SheetContent>\n-    </Sheet>\n-  );\n-}\n+        </SheetContent>\n+      </Sheet>\n+    );\n+  },\n+  (prev, next) => {\n+    return prev.selectedRowId === next.selectedRowId;",
        "comment_created_at": "2025-06-03T16:23:23+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Memo comparison only checks `selectedRowId`; consider including `peekView` in the equality check to avoid stale prop issues.\n```suggestion\n    return prev.selectedRowId === next.selectedRowId && prev.peekView === next.peekView;\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2086800589",
    "pr_number": 6799,
    "pr_file": "web/src/features/widgets/chart-library/Chart.tsx",
    "created_at": "2025-05-13T13:13:55+00:00",
    "commented_code": "const [forceRender, setForceRender] = useState(false);\n   const shouldWarn = data.length > 2000 && !forceRender;\n \n+  const renderedData = data.map((item) => {",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2086800589",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6799,
        "pr_file": "web/src/features/widgets/chart-library/Chart.tsx",
        "discussion_id": "2086800589",
        "commented_code": "@@ -22,20 +22,35 @@ export const Chart = ({\n   const [forceRender, setForceRender] = useState(false);\n   const shouldWarn = data.length > 2000 && !forceRender;\n \n+  const renderedData = data.map((item) => {",
        "comment_created_at": "2025-05-13T13:13:55+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Consider memoizing `renderedData` (e.g. using `React.useMemo`) to avoid re-computation on every render, especially with large datasets.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2073905788",
    "pr_number": 6690,
    "pr_file": "web/src/components/table/data-table.tsx",
    "created_at": "2025-05-05T17:51:00+00:00",
    "commented_code": ");\n }\n \n-// memo tables for performance, should only re-render when data changes\n-// https://tanstack.com/table/v8/docs/guide/column-sizing#advanced-column-resizing-performance\n+// Optimize table rendering performance by memoizing the table body\n+// This is critical for two high-frequency re-render scenarios:\n+// 1. During column resizing: When users drag column headers, it can trigger\n+//    many state updates that would otherwise cause the entire table to re-render.\n+// 2. When using peek views: URL/state changes from peek view navigation would\n+//    otherwise cause unnecessary table re-renders.\n+//\n+// We need to ensure the table re-renders when:\n+// - The actual data changes (including metrics loaded asynchronously and pagination state)\n+// - The loading state changes\n+// - The new column widths are computed\n+// - The row height changes\n+// - The number of visible cells changes\n+// - The column order changes\n+//\n+// See: https://tanstack.com/table/v8/docs/guide/column-sizing#advanced-column-resizing-performance\n const MemoizedTableBody = React.memo(TableBodyComponent, (prev, next) => {\n-  return prev.table.options.data === next.table.options.data;\n+  if (!prev.tableSnapshot || !next.tableSnapshot) return true;",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2073905788",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6690,
        "pr_file": "web/src/components/table/data-table.tsx",
        "discussion_id": "2073905788",
        "commented_code": "@@ -479,8 +518,50 @@ function TableBodyComponent<TData>({\n   );\n }\n \n-// memo tables for performance, should only re-render when data changes\n-// https://tanstack.com/table/v8/docs/guide/column-sizing#advanced-column-resizing-performance\n+// Optimize table rendering performance by memoizing the table body\n+// This is critical for two high-frequency re-render scenarios:\n+// 1. During column resizing: When users drag column headers, it can trigger\n+//    many state updates that would otherwise cause the entire table to re-render.\n+// 2. When using peek views: URL/state changes from peek view navigation would\n+//    otherwise cause unnecessary table re-renders.\n+//\n+// We need to ensure the table re-renders when:\n+// - The actual data changes (including metrics loaded asynchronously and pagination state)\n+// - The loading state changes\n+// - The new column widths are computed\n+// - The row height changes\n+// - The number of visible cells changes\n+// - The column order changes\n+//\n+// See: https://tanstack.com/table/v8/docs/guide/column-sizing#advanced-column-resizing-performance\n const MemoizedTableBody = React.memo(TableBodyComponent, (prev, next) => {\n-  return prev.table.options.data === next.table.options.data;\n+  if (!prev.tableSnapshot || !next.tableSnapshot) return true;",
        "comment_created_at": "2025-05-05T17:51:00+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Early return when either `tableSnapshot` is missing may mask differences. If only one snapshot is defined, returning true (no update) might be incorrect.\n```suggestion\n  if (!prev.tableSnapshot || !next.tableSnapshot) return !prev.tableSnapshot && !next.tableSnapshot;\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2024999147",
    "pr_number": 6314,
    "pr_file": "web/src/ee/features/playground/page/components/JumpToPlaygroundButton.tsx",
    "created_at": "2025-04-02T14:51:46+00:00",
    "commented_code": "}\n   } catch {}\n \n+  // Langchain Schema\n+  try {\n+    const input = JSON.parse(generation.input as string);\n+\n+    if (typeof input === \"object\" && input !== null) {\n+      const parsedMessages = ParsedChatMessageListSchema.safeParse(\n+        \"messages\" in input ? input[\"messages\"] : input,\n+      );\n+\n+      if (parsedMessages.success)\n+        return parsedMessages.data",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2024999147",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6314,
        "pr_file": "web/src/ee/features/playground/page/components/JumpToPlaygroundButton.tsx",
        "discussion_id": "2024999147",
        "commented_code": "@@ -338,6 +366,25 @@ function parseTools(generation: Observation): PlaygroundTool[] {\n     }\n   } catch {}\n \n+  // Langchain Schema\n+  try {\n+    const input = JSON.parse(generation.input as string);\n+\n+    if (typeof input === \"object\" && input !== null) {\n+      const parsedMessages = ParsedChatMessageListSchema.safeParse(\n+        \"messages\" in input ? input[\"messages\"] : input,\n+      );\n+\n+      if (parsedMessages.success)\n+        return parsedMessages.data",
        "comment_created_at": "2025-04-02T14:51:46+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "In the `parseTools` function for the Langchain schema, `JSON.parse` is used within the filter predicate (in `isLangchainToolDefinitionMessage`) and then again during the mapping. To improve performance and avoid potential duplicate parsing, consider refactoring so that the parsing result is reused.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1988852026",
    "pr_number": 5956,
    "pr_file": "web/src/components/table/use-cases/scores.tsx",
    "created_at": "2025-03-11T09:55:18+00:00",
    "commented_code": "const totalScoreCountQuery = api.scores.countAll.useQuery(getCountPayload);\n   const totalCount = totalScoreCountQuery.data?.totalCount ?? null;\n \n+  // TODO: Implement\n+  const scoreDeleteMutation = api.scores.deleteMany.useMutation({\n+    onSuccess: () => {\n+      showSuccessToast({\n+        title: \"Scores deleted\",\n+        description:\n+          \"Selected scores will be deleted. Scores are removed asynchronously and may continue to be visible for up to 15 minutes.\",\n+      });\n+    },\n+    onSettled: () => {\n+      void utils.scores.all.invalidate();\n+    },\n+  });\n+\n+  const hasTraceDeletionEntitlement = useHasEntitlement(\"trace-deletion\");\n+\n+  const handleDeleteScores = async ({ projectId }: { projectId: string }) => {\n+    const selectedScoreIds = Object.keys(selectedRows).filter((scoreId) =>\n+      scores.data?.scores.map((s) => s.id).includes(scoreId),",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "1988852026",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 5956,
        "pr_file": "web/src/components/table/use-cases/scores.tsx",
        "discussion_id": "1988852026",
        "commented_code": "@@ -173,6 +186,39 @@ export default function ScoresTable({\n   const totalScoreCountQuery = api.scores.countAll.useQuery(getCountPayload);\n   const totalCount = totalScoreCountQuery.data?.totalCount ?? null;\n \n+  // TODO: Implement\n+  const scoreDeleteMutation = api.scores.deleteMany.useMutation({\n+    onSuccess: () => {\n+      showSuccessToast({\n+        title: \"Scores deleted\",\n+        description:\n+          \"Selected scores will be deleted. Scores are removed asynchronously and may continue to be visible for up to 15 minutes.\",\n+      });\n+    },\n+    onSettled: () => {\n+      void utils.scores.all.invalidate();\n+    },\n+  });\n+\n+  const hasTraceDeletionEntitlement = useHasEntitlement(\"trace-deletion\");\n+\n+  const handleDeleteScores = async ({ projectId }: { projectId: string }) => {\n+    const selectedScoreIds = Object.keys(selectedRows).filter((scoreId) =>\n+      scores.data?.scores.map((s) => s.id).includes(scoreId),",
        "comment_created_at": "2025-03-11T09:55:18+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Using the scores id list via repeated mapping inside filter may be inefficient. Consider caching the list of valid score ids to improve performance/readability.",
        "pr_file_module": null
      }
    ]
  }
]