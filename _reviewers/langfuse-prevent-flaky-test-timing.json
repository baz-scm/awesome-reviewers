[
  {
    "discussion_id": "2042086753",
    "pr_number": 6450,
    "pr_file": "worker/src/__tests__/evalService.filtering.test.ts",
    "created_at": "2025-04-14T12:57:21+00:00",
    "commented_code": "traceId: traceId1,\n           ...event1,\n         },\n+        jobTimestamp: new Date(),",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2042086753",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6450,
        "pr_file": "worker/src/__tests__/evalService.filtering.test.ts",
        "discussion_id": "2042086753",
        "commented_code": "@@ -157,13 +157,15 @@ const test = baseTest.extend<{\n           traceId: traceId1,\n           ...event1,\n         },\n+        jobTimestamp: new Date(),",
        "comment_created_at": "2025-04-14T12:57:21+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Consider using a fixed timestamp for `jobTimestamp` in tests to avoid flakiness due to rapid successive calls to `new Date()`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2030175523",
    "pr_number": 6359,
    "pr_file": "web/src/__e2e__/create-project.spec.ts",
    "created_at": "2025-04-06T14:57:32+00:00",
    "commented_code": "-import { test, expect } from \"@playwright/test\";\n+import { test, expect, type Page } from \"@playwright/test\";\n \n-test(\"Sign in, create an organization, create a project\", async ({ page }) => {\n-  test.setTimeout(60000);\n+test.describe(\"Create project\", () => {\n+  test(\"Sign in, create an organization, create a project\", async ({\n+    page,\n+  }) => {\n+    test.setTimeout(60000);\n \n-  // Sign in\n+    // Sign in\n+    await page.goto(\"/auth/sign-in\");\n+    await page.fill('input[name=\"email\"]', \"demo@langfuse.com\");\n+    await page.fill('input[type=\"password\"]', \"password\");\n+    await page.click(\n+      'button[data-testid=\"submit-email-password-sign-in-form\"]',\n+    );\n+    await page.waitForTimeout(2000);",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2030175523",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6359,
        "pr_file": "web/src/__e2e__/create-project.spec.ts",
        "discussion_id": "2030175523",
        "commented_code": "@@ -1,59 +1,129 @@\n-import { test, expect } from \"@playwright/test\";\n+import { test, expect, type Page } from \"@playwright/test\";\n \n-test(\"Sign in, create an organization, create a project\", async ({ page }) => {\n-  test.setTimeout(60000);\n+test.describe(\"Create project\", () => {\n+  test(\"Sign in, create an organization, create a project\", async ({\n+    page,\n+  }) => {\n+    test.setTimeout(60000);\n \n-  // Sign in\n+    // Sign in\n+    await page.goto(\"/auth/sign-in\");\n+    await page.fill('input[name=\"email\"]', \"demo@langfuse.com\");\n+    await page.fill('input[type=\"password\"]', \"password\");\n+    await page.click(\n+      'button[data-testid=\"submit-email-password-sign-in-form\"]',\n+    );\n+    await page.waitForTimeout(2000);",
        "comment_created_at": "2025-04-06T14:57:32+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Avoid fixed waits like `waitForTimeout`; consider waiting for specific element states to improve test reliability.\n```suggestion\n    await page.waitForSelector('button[data-testid=\"create-organization-btn\"]', { state: 'visible' });\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2030187185",
    "pr_number": 6359,
    "pr_file": "web/src/__e2e__/create-project.spec.ts",
    "created_at": "2025-04-06T15:43:04+00:00",
    "commented_code": "-import { test, expect } from \"@playwright/test\";\n+import { test, expect, type Page } from \"@playwright/test\";\n+import { prisma } from \"@langfuse/shared/src/db\";\n \n-test(\"Sign in, create an organization, create a project\", async ({ page }) => {\n-  test.setTimeout(60000);\n+const checkConsoleErrors = async (page: Page) => {\n+  const errors: string[] = [];\n+  page.on(\"pageerror\", (err) => {\n+    errors.push(err.message);\n+  });\n+  page.on(\"console\", (msg) => {\n+    if (msg.type() === \"error\") {\n+      errors.push(msg.text());\n+    }\n+  });\n \n-  // Sign in\n+  page.on(\"response\", (response) => {\n+    if (response.status() === 500) {\n+      console.error(response.text());\n+    }\n+  });\n+\n+  return errors;\n+};\n+\n+const cleanUpConsoleEventListeners = (page: Page) => {\n+  page.removeAllListeners(\"pageerror\");\n+  page.removeAllListeners(\"console\");\n+};\n+\n+test.describe(\"Create project\", () => {\n+  test(\"Sign in, create an organization, create a project\", async ({\n+    page,\n+  }) => {\n+    test.setTimeout(60000);\n+    const errors = await checkConsoleErrors(page);\n+\n+    // Sign in\n+    await page.goto(\"/auth/sign-in\");\n+    await page.fill('input[name=\"email\"]', \"demo@langfuse.com\");\n+    await page.fill('input[type=\"password\"]', \"password\");\n+    await page.click(\n+      'button[data-testid=\"submit-email-password-sign-in-form\"]',\n+    );\n+    await page.waitForTimeout(2000);",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2030187185",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6359,
        "pr_file": "web/src/__e2e__/create-project.spec.ts",
        "discussion_id": "2030187185",
        "commented_code": "@@ -1,59 +1,172 @@\n-import { test, expect } from \"@playwright/test\";\n+import { test, expect, type Page } from \"@playwright/test\";\n+import { prisma } from \"@langfuse/shared/src/db\";\n \n-test(\"Sign in, create an organization, create a project\", async ({ page }) => {\n-  test.setTimeout(60000);\n+const checkConsoleErrors = async (page: Page) => {\n+  const errors: string[] = [];\n+  page.on(\"pageerror\", (err) => {\n+    errors.push(err.message);\n+  });\n+  page.on(\"console\", (msg) => {\n+    if (msg.type() === \"error\") {\n+      errors.push(msg.text());\n+    }\n+  });\n \n-  // Sign in\n+  page.on(\"response\", (response) => {\n+    if (response.status() === 500) {\n+      console.error(response.text());\n+    }\n+  });\n+\n+  return errors;\n+};\n+\n+const cleanUpConsoleEventListeners = (page: Page) => {\n+  page.removeAllListeners(\"pageerror\");\n+  page.removeAllListeners(\"console\");\n+};\n+\n+test.describe(\"Create project\", () => {\n+  test(\"Sign in, create an organization, create a project\", async ({\n+    page,\n+  }) => {\n+    test.setTimeout(60000);\n+    const errors = await checkConsoleErrors(page);\n+\n+    // Sign in\n+    await page.goto(\"/auth/sign-in\");\n+    await page.fill('input[name=\"email\"]', \"demo@langfuse.com\");\n+    await page.fill('input[type=\"password\"]', \"password\");\n+    await page.click(\n+      'button[data-testid=\"submit-email-password-sign-in-form\"]',\n+    );\n+    await page.waitForTimeout(2000);",
        "comment_created_at": "2025-04-06T15:43:04+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Use an element-based wait (e.g., `waitForSelector`) instead of a fixed timeout to avoid test flakiness.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1989288900",
    "pr_number": 5949,
    "pr_file": "worker/src/__tests__/batchExport.test.ts",
    "created_at": "2025-03-11T13:32:49+00:00",
    "commented_code": "]),\n     );\n   });\n+\n+  it(\"should export scores with filter and sorting\", async () => {\n+    const { projectId } = await createOrgProjectAndApiKey();\n+\n+    // Create traces to associate scores with\n+    const traces = [\n+      createTrace({\n+        project_id: projectId,\n+        id: randomUUID(),\n+        name: \"trace-for-scores-1\",\n+        timestamp: new Date(\"2024-01-01\").getTime(),\n+      }),\n+      createTrace({\n+        project_id: projectId,\n+        id: randomUUID(),\n+        name: \"trace-for-scores-2\",\n+        timestamp: new Date(\"2024-01-02\").getTime(),\n+      }),\n+    ];\n+\n+    await createTracesCh(traces);\n+\n+    // Create observations to associate scores with\n+    const observations = [\n+      createObservation({\n+        project_id: projectId,\n+        trace_id: traces[0].id,\n+        id: randomUUID(),\n+        type: \"GENERATION\",\n+        name: \"observation-for-scores-1\",\n+      }),\n+      createObservation({\n+        project_id: projectId,\n+        trace_id: traces[1].id,\n+        id: randomUUID(),\n+        type: \"GENERATION\",\n+        name: \"observation-for-scores-2\",\n+      }),\n+    ];\n+\n+    await createObservationsCh(observations);\n+\n+    // Create scores with different names and values\n+    const scores = [\n+      createScore({\n+        project_id: projectId,\n+        trace_id: traces[0].id,\n+        observation_id: observations[0].id,\n+        name: \"accuracy\",\n+        value: 0.85,\n+        timestamp: new Date(\"2024-01-01\").getTime(),\n+      }),\n+      createScore({\n+        project_id: projectId,\n+        trace_id: traces[0].id,\n+        observation_id: observations[0].id,\n+        name: \"relevance\",\n+        value: 0.75,\n+        timestamp: new Date(\"2024-01-01\").getTime(),\n+      }),\n+      createScore({\n+        project_id: projectId,\n+        trace_id: traces[1].id,\n+        observation_id: observations[1].id,\n+        name: \"accuracy\",\n+        value: 0.92,\n+        timestamp: new Date(\"2024-01-02\").getTime(),\n+      }),\n+      createScore({\n+        project_id: projectId,\n+        trace_id: traces[1].id,\n+        observation_id: observations[1].id,\n+        name: \"helpfulness\",\n+        value: 0.88,\n+        timestamp: new Date(\"2024-01-02\").getTime(),\n+      }),\n+    ];\n+\n+    await createScoresCh(scores);\n+\n+    // Export scores with filter on name and sort by timestamp\n+    const stream = await getDatabaseReadStream({\n+      projectId: projectId,\n+      tableName: BatchExportTableName.Scores,\n+      cutoffCreatedAt: new Date(Date.now() + 1000 * 60 * 60 * 24),",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "1989288900",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 5949,
        "pr_file": "worker/src/__tests__/batchExport.test.ts",
        "discussion_id": "1989288900",
        "commented_code": "@@ -501,4 +501,414 @@ describe(\"batch export test suite\", () => {\n       ]),\n     );\n   });\n+\n+  it(\"should export scores with filter and sorting\", async () => {\n+    const { projectId } = await createOrgProjectAndApiKey();\n+\n+    // Create traces to associate scores with\n+    const traces = [\n+      createTrace({\n+        project_id: projectId,\n+        id: randomUUID(),\n+        name: \"trace-for-scores-1\",\n+        timestamp: new Date(\"2024-01-01\").getTime(),\n+      }),\n+      createTrace({\n+        project_id: projectId,\n+        id: randomUUID(),\n+        name: \"trace-for-scores-2\",\n+        timestamp: new Date(\"2024-01-02\").getTime(),\n+      }),\n+    ];\n+\n+    await createTracesCh(traces);\n+\n+    // Create observations to associate scores with\n+    const observations = [\n+      createObservation({\n+        project_id: projectId,\n+        trace_id: traces[0].id,\n+        id: randomUUID(),\n+        type: \"GENERATION\",\n+        name: \"observation-for-scores-1\",\n+      }),\n+      createObservation({\n+        project_id: projectId,\n+        trace_id: traces[1].id,\n+        id: randomUUID(),\n+        type: \"GENERATION\",\n+        name: \"observation-for-scores-2\",\n+      }),\n+    ];\n+\n+    await createObservationsCh(observations);\n+\n+    // Create scores with different names and values\n+    const scores = [\n+      createScore({\n+        project_id: projectId,\n+        trace_id: traces[0].id,\n+        observation_id: observations[0].id,\n+        name: \"accuracy\",\n+        value: 0.85,\n+        timestamp: new Date(\"2024-01-01\").getTime(),\n+      }),\n+      createScore({\n+        project_id: projectId,\n+        trace_id: traces[0].id,\n+        observation_id: observations[0].id,\n+        name: \"relevance\",\n+        value: 0.75,\n+        timestamp: new Date(\"2024-01-01\").getTime(),\n+      }),\n+      createScore({\n+        project_id: projectId,\n+        trace_id: traces[1].id,\n+        observation_id: observations[1].id,\n+        name: \"accuracy\",\n+        value: 0.92,\n+        timestamp: new Date(\"2024-01-02\").getTime(),\n+      }),\n+      createScore({\n+        project_id: projectId,\n+        trace_id: traces[1].id,\n+        observation_id: observations[1].id,\n+        name: \"helpfulness\",\n+        value: 0.88,\n+        timestamp: new Date(\"2024-01-02\").getTime(),\n+      }),\n+    ];\n+\n+    await createScoresCh(scores);\n+\n+    // Export scores with filter on name and sort by timestamp\n+    const stream = await getDatabaseReadStream({\n+      projectId: projectId,\n+      tableName: BatchExportTableName.Scores,\n+      cutoffCreatedAt: new Date(Date.now() + 1000 * 60 * 60 * 24),",
        "comment_created_at": "2025-03-11T13:32:49+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Using `new Date(Date.now() + 1000 * 60 * 60 * 24)` for cutoff may cause flakiness. Consider using a fixed date or mock the time.\n```suggestion\n      cutoffCreatedAt: new Date(\"2024-01-01\"),\n```",
        "pr_file_module": null
      }
    ]
  }
]