[
  {
    "discussion_id": "2192889888",
    "pr_number": 7748,
    "pr_file": "web/src/__tests__/async/blob-storage-integration-api.servertest.ts",
    "created_at": "2025-07-08T15:54:02+00:00",
    "commented_code": "+import { makeZodVerifiedAPICall } from \"@/src/__tests__/test-utils\";\n+import { createOrgProjectAndApiKey } from \"@/src/__tests__/test-utils\";\n+import {\n+  BlobStorageIntegrationV1Response,\n+  type PostBlobStorageIntegrationV1Body,\n+  type PutBlobStorageIntegrationV1Body,\n+} from \"@/src/features/public-api/types/blob-storage-integration\";\n+import {\n+  BlobStorageIntegrationType,\n+  BlobStorageIntegrationFileType,\n+} from \"@langfuse/shared\";\n+\n+describe(\"/api/public/integrations/blob-storage API Endpoints\", () => {\n+  let auth: string;\n+  let projectId: string;\n+\n+  beforeEach(async () => {\n+    const { auth: newAuth, projectId: newProjectId } =\n+      await createOrgProjectAndApiKey();\n+    auth = newAuth;\n+    projectId = newProjectId;\n+  });\n+\n+  describe(\"GET /api/public/integrations/blob-storage\", () => {\n+    it(\"should return 404 when no integration exists\", async () => {\n+      const response = await makeZodVerifiedAPICall(\n+        BlobStorageIntegrationV1Response,\n+        \"GET\",\n+        \"/api/public/integrations/blob-storage\",\n+        undefined,\n+        auth,\n+      );\n+\n+      expect(response.status).toBe(404);\n+    });\n+\n+    it(\"should return the integration when it exists\", async () => {\n+      // First create an integration\n+      const createBody: PostBlobStorageIntegrationV1Body = {\n+        type: BlobStorageIntegrationType.S3,\n+        bucketName: \"test-bucket\",\n+        region: \"us-east-1\",\n+        accessKeyId: \"AKIAIOSFODNN7EXAMPLE\",\n+        secretAccessKey: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n+        prefix: \"test/\",\n+        exportFrequency: \"daily\",\n+        enabled: true,\n+        forcePathStyle: false,\n+        fileType: BlobStorageIntegrationFileType.JSONL,\n+      };\n+\n+      await makeZodVerifiedAPICall(\n+        BlobStorageIntegrationV1Response,\n+        \"POST\",\n+        \"/api/public/integrations/blob-storage\",\n+        createBody,\n+        auth,\n+      );\n+\n+      // Now get the integration\n+      const getResponse = await makeZodVerifiedAPICall(\n+        BlobStorageIntegrationV1Response,\n+        \"GET\",\n+        \"/api/public/integrations/blob-storage\",\n+        undefined,\n+        auth,\n+      );\n+\n+      expect(getResponse.status).toBe(200);\n+      expect(getResponse.body).toMatchObject({\n+        projectId,\n+        type: BlobStorageIntegrationType.S3,\n+        bucketName: \"test-bucket\",\n+        region: \"us-east-1\",\n+        accessKeyId: \"AKIAIOSFODNN7EXAMPLE\",\n+        prefix: \"test/\",\n+        exportFrequency: \"daily\",\n+        enabled: true,\n+        forcePathStyle: false,\n+        fileType: BlobStorageIntegrationFileType.JSONL,\n+      });\n+      expect(getResponse.body.createdAt).toBeTruthy();\n+      expect(getResponse.body.updatedAt).toBeTruthy();\n+      // Ensure secretAccessKey is not returned\n+      expect(getResponse.body).not.toHaveProperty(\"secretAccessKey\");\n+    });\n+  });\n+\n+  describe(\"POST /api/public/integrations/blob-storage\", () => {\n+    it(\"should create a new blob storage integration\", async () => {\n+      const createBody: PostBlobStorageIntegrationV1Body = {\n+        type: BlobStorageIntegrationType.S3,\n+        bucketName: \"test-bucket\",\n+        region: \"us-east-1\",\n+        accessKeyId: \"AKIAIOSFODNN7EXAMPLE\",\n+        secretAccessKey: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n+        prefix: \"test/\",\n+        exportFrequency: \"daily\",\n+        enabled: true,\n+        forcePathStyle: false,\n+        fileType: BlobStorageIntegrationFileType.JSONL,\n+      };\n+\n+      const response = await makeZodVerifiedAPICall(\n+        BlobStorageIntegrationV1Response,\n+        \"POST\",\n+        \"/api/public/integrations/blob-storage\",\n+        createBody,\n+        auth,\n+      );\n+\n+      expect(response.status).toBe(201);\n+      expect(response.body).toMatchObject({\n+        projectId,\n+        type: BlobStorageIntegrationType.S3,\n+        bucketName: \"test-bucket\",\n+        region: \"us-east-1\",\n+        accessKeyId: \"AKIAIOSFODNN7EXAMPLE\",\n+        prefix: \"test/\",\n+        exportFrequency: \"daily\",\n+        enabled: true,\n+        forcePathStyle: false,\n+        fileType: BlobStorageIntegrationFileType.JSONL,\n+      });\n+      expect(response.body.createdAt).toBeTruthy();\n+      expect(response.body.updatedAt).toBeTruthy();\n+      // Ensure secretAccessKey is not returned\n+      expect(response.body).not.toHaveProperty(\"secretAccessKey\");\n+    });\n+\n+    it(\"should create integration with minimal required fields\", async () => {\n+      const createBody: PostBlobStorageIntegrationV1Body = {\n+        type: BlobStorageIntegrationType.S3,\n+        bucketName: \"minimal-bucket\",\n+        accessKeyId: \"AKIAIOSFODNN7EXAMPLE\",\n+        secretAccessKey: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n+      };\n+\n+      const response = await makeZodVerifiedAPICall(\n+        BlobStorageIntegrationV1Response,\n+        \"POST\",\n+        \"/api/public/integrations/blob-storage\",\n+        createBody,\n+        auth,\n+      );\n+\n+      expect(response.status).toBe(201);\n+      expect(response.body).toMatchObject({\n+        projectId,\n+        type: BlobStorageIntegrationType.S3,\n+        bucketName: \"minimal-bucket\",\n+        region: \"auto\", // default value\n+        accessKeyId: \"AKIAIOSFODNN7EXAMPLE\",\n+        prefix: \"\", // default value\n+        exportFrequency: \"daily\", // default value\n+        enabled: true, // default value\n+        forcePathStyle: false, // default value\n+        fileType: BlobStorageIntegrationFileType.JSONL, // default value\n+      });\n+    });\n+\n+    it(\"should fail when integration already exists\", async () => {\n+      const createBody: PostBlobStorageIntegrationV1Body = {\n+        type: BlobStorageIntegrationType.S3,\n+        bucketName: \"test-bucket\",\n+        region: \"us-east-1\",\n+        accessKeyId: \"AKIAIOSFODNN7EXAMPLE\",\n+        secretAccessKey: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n+      };\n+\n+      // Create first integration\n+      await makeZodVerifiedAPICall(\n+        BlobStorageIntegrationV1Response,\n+        \"POST\",\n+        \"/api/public/integrations/blob-storage\",\n+        createBody,\n+        auth,\n+      );\n+\n+      // Try to create second integration should fail\n+      const response = await makeZodVerifiedAPICall(\n+        BlobStorageIntegrationV1Response,\n+        \"POST\",\n+        \"/api/public/integrations/blob-storage\",\n+        createBody,\n+        auth,\n+      );\n+\n+      expect(response.status).toBe(404);",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2192889888",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7748,
        "pr_file": "web/src/__tests__/async/blob-storage-integration-api.servertest.ts",
        "discussion_id": "2192889888",
        "commented_code": "@@ -0,0 +1,523 @@\n+import { makeZodVerifiedAPICall } from \"@/src/__tests__/test-utils\";\n+import { createOrgProjectAndApiKey } from \"@/src/__tests__/test-utils\";\n+import {\n+  BlobStorageIntegrationV1Response,\n+  type PostBlobStorageIntegrationV1Body,\n+  type PutBlobStorageIntegrationV1Body,\n+} from \"@/src/features/public-api/types/blob-storage-integration\";\n+import {\n+  BlobStorageIntegrationType,\n+  BlobStorageIntegrationFileType,\n+} from \"@langfuse/shared\";\n+\n+describe(\"/api/public/integrations/blob-storage API Endpoints\", () => {\n+  let auth: string;\n+  let projectId: string;\n+\n+  beforeEach(async () => {\n+    const { auth: newAuth, projectId: newProjectId } =\n+      await createOrgProjectAndApiKey();\n+    auth = newAuth;\n+    projectId = newProjectId;\n+  });\n+\n+  describe(\"GET /api/public/integrations/blob-storage\", () => {\n+    it(\"should return 404 when no integration exists\", async () => {\n+      const response = await makeZodVerifiedAPICall(\n+        BlobStorageIntegrationV1Response,\n+        \"GET\",\n+        \"/api/public/integrations/blob-storage\",\n+        undefined,\n+        auth,\n+      );\n+\n+      expect(response.status).toBe(404);\n+    });\n+\n+    it(\"should return the integration when it exists\", async () => {\n+      // First create an integration\n+      const createBody: PostBlobStorageIntegrationV1Body = {\n+        type: BlobStorageIntegrationType.S3,\n+        bucketName: \"test-bucket\",\n+        region: \"us-east-1\",\n+        accessKeyId: \"AKIAIOSFODNN7EXAMPLE\",\n+        secretAccessKey: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n+        prefix: \"test/\",\n+        exportFrequency: \"daily\",\n+        enabled: true,\n+        forcePathStyle: false,\n+        fileType: BlobStorageIntegrationFileType.JSONL,\n+      };\n+\n+      await makeZodVerifiedAPICall(\n+        BlobStorageIntegrationV1Response,\n+        \"POST\",\n+        \"/api/public/integrations/blob-storage\",\n+        createBody,\n+        auth,\n+      );\n+\n+      // Now get the integration\n+      const getResponse = await makeZodVerifiedAPICall(\n+        BlobStorageIntegrationV1Response,\n+        \"GET\",\n+        \"/api/public/integrations/blob-storage\",\n+        undefined,\n+        auth,\n+      );\n+\n+      expect(getResponse.status).toBe(200);\n+      expect(getResponse.body).toMatchObject({\n+        projectId,\n+        type: BlobStorageIntegrationType.S3,\n+        bucketName: \"test-bucket\",\n+        region: \"us-east-1\",\n+        accessKeyId: \"AKIAIOSFODNN7EXAMPLE\",\n+        prefix: \"test/\",\n+        exportFrequency: \"daily\",\n+        enabled: true,\n+        forcePathStyle: false,\n+        fileType: BlobStorageIntegrationFileType.JSONL,\n+      });\n+      expect(getResponse.body.createdAt).toBeTruthy();\n+      expect(getResponse.body.updatedAt).toBeTruthy();\n+      // Ensure secretAccessKey is not returned\n+      expect(getResponse.body).not.toHaveProperty(\"secretAccessKey\");\n+    });\n+  });\n+\n+  describe(\"POST /api/public/integrations/blob-storage\", () => {\n+    it(\"should create a new blob storage integration\", async () => {\n+      const createBody: PostBlobStorageIntegrationV1Body = {\n+        type: BlobStorageIntegrationType.S3,\n+        bucketName: \"test-bucket\",\n+        region: \"us-east-1\",\n+        accessKeyId: \"AKIAIOSFODNN7EXAMPLE\",\n+        secretAccessKey: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n+        prefix: \"test/\",\n+        exportFrequency: \"daily\",\n+        enabled: true,\n+        forcePathStyle: false,\n+        fileType: BlobStorageIntegrationFileType.JSONL,\n+      };\n+\n+      const response = await makeZodVerifiedAPICall(\n+        BlobStorageIntegrationV1Response,\n+        \"POST\",\n+        \"/api/public/integrations/blob-storage\",\n+        createBody,\n+        auth,\n+      );\n+\n+      expect(response.status).toBe(201);\n+      expect(response.body).toMatchObject({\n+        projectId,\n+        type: BlobStorageIntegrationType.S3,\n+        bucketName: \"test-bucket\",\n+        region: \"us-east-1\",\n+        accessKeyId: \"AKIAIOSFODNN7EXAMPLE\",\n+        prefix: \"test/\",\n+        exportFrequency: \"daily\",\n+        enabled: true,\n+        forcePathStyle: false,\n+        fileType: BlobStorageIntegrationFileType.JSONL,\n+      });\n+      expect(response.body.createdAt).toBeTruthy();\n+      expect(response.body.updatedAt).toBeTruthy();\n+      // Ensure secretAccessKey is not returned\n+      expect(response.body).not.toHaveProperty(\"secretAccessKey\");\n+    });\n+\n+    it(\"should create integration with minimal required fields\", async () => {\n+      const createBody: PostBlobStorageIntegrationV1Body = {\n+        type: BlobStorageIntegrationType.S3,\n+        bucketName: \"minimal-bucket\",\n+        accessKeyId: \"AKIAIOSFODNN7EXAMPLE\",\n+        secretAccessKey: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n+      };\n+\n+      const response = await makeZodVerifiedAPICall(\n+        BlobStorageIntegrationV1Response,\n+        \"POST\",\n+        \"/api/public/integrations/blob-storage\",\n+        createBody,\n+        auth,\n+      );\n+\n+      expect(response.status).toBe(201);\n+      expect(response.body).toMatchObject({\n+        projectId,\n+        type: BlobStorageIntegrationType.S3,\n+        bucketName: \"minimal-bucket\",\n+        region: \"auto\", // default value\n+        accessKeyId: \"AKIAIOSFODNN7EXAMPLE\",\n+        prefix: \"\", // default value\n+        exportFrequency: \"daily\", // default value\n+        enabled: true, // default value\n+        forcePathStyle: false, // default value\n+        fileType: BlobStorageIntegrationFileType.JSONL, // default value\n+      });\n+    });\n+\n+    it(\"should fail when integration already exists\", async () => {\n+      const createBody: PostBlobStorageIntegrationV1Body = {\n+        type: BlobStorageIntegrationType.S3,\n+        bucketName: \"test-bucket\",\n+        region: \"us-east-1\",\n+        accessKeyId: \"AKIAIOSFODNN7EXAMPLE\",\n+        secretAccessKey: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n+      };\n+\n+      // Create first integration\n+      await makeZodVerifiedAPICall(\n+        BlobStorageIntegrationV1Response,\n+        \"POST\",\n+        \"/api/public/integrations/blob-storage\",\n+        createBody,\n+        auth,\n+      );\n+\n+      // Try to create second integration should fail\n+      const response = await makeZodVerifiedAPICall(\n+        BlobStorageIntegrationV1Response,\n+        \"POST\",\n+        \"/api/public/integrations/blob-storage\",\n+        createBody,\n+        auth,\n+      );\n+\n+      expect(response.status).toBe(404);",
        "comment_created_at": "2025-07-08T15:54:02+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The test for duplicate integration expects a 404 error, but semantically a conflict (409) might be more appropriate. Consider aligning the error code with standard HTTP semantics.\n```suggestion\n      expect(response.status).toBe(409);\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2195601489",
    "pr_number": 7748,
    "pr_file": "web/src/pages/api/public/integrations/blob-storage/index.ts",
    "created_at": "2025-07-09T17:32:40+00:00",
    "commented_code": "+import { auditLog } from \"@/src/features/audit-logs/auditLog\";\n+import { createAuthedProjectAPIRoute } from \"@/src/features/public-api/server/createAuthedProjectAPIRoute\";\n+import {\n+  UpsertBlobStorageIntegrationV1Body,\n+  BlobStorageIntegrationV1Response,\n+  transformBlobStorageIntegrationToAPIResponse,\n+} from \"@/src/features/public-api/types/blob-storage-integration\";\n+import { withMiddlewares } from \"@/src/features/public-api/server/withMiddlewares\";\n+import { LangfuseNotFoundError } from \"@langfuse/shared\";\n+import { encrypt } from \"@langfuse/shared/encryption\";\n+import { env } from \"@/src/env.mjs\";\n+import {\n+  BlobStorageIntegrationType,\n+  BlobStorageExportMode,\n+} from \"@langfuse/shared\";\n+import { prisma } from \"@langfuse/shared/src/db\";\n+\n+// Unified upsert function for blob storage integration\n+const upsertBlobStorageIntegration = async ({\n+  body,\n+  auth,\n+  auditAction = \"update\",\n+}: {\n+  body: UpsertBlobStorageIntegrationV1Body;\n+  auth: any;\n+  auditAction?: \"create\" | \"update\";\n+}) => {\n+  // Audit log\n+  await auditLog({\n+    action: auditAction,\n+    resourceType: \"blobStorageIntegration\",\n+    resourceId: auth.scope.projectId,\n+    projectId: auth.scope.projectId,\n+    orgId: auth.scope.orgId,\n+    apiKeyId: auth.scope.apiKeyId,\n+  });\n+\n+  const {\n+    type,\n+    bucketName,\n+    endpoint,\n+    region,\n+    accessKeyId,\n+    secretAccessKey,\n+    prefix,\n+    exportFrequency,\n+    enabled,\n+    forcePathStyle,\n+    fileType,\n+    exportMode,\n+    exportStartDate,\n+  } = body;\n+\n+  // Check if integration already exists\n+  const existingIntegration = await prisma.blobStorageIntegration.findUnique({\n+    where: {\n+      projectId: auth.scope.projectId,\n+    },\n+  });\n+\n+  // Validate credentials based on environment and type\n+  const isSelfHosted = !env.NEXT_PUBLIC_LANGFUSE_CLOUD_REGION;\n+  const canUseHostCredentials =\n+    isSelfHosted &&\n+    (type === BlobStorageIntegrationType.S3 ||\n+      existingIntegration?.type === BlobStorageIntegrationType.S3);\n+  const isUsingHostCredentials =\n+    canUseHostCredentials && (!accessKeyId || !secretAccessKey);\n+\n+  if (!canUseHostCredentials && !accessKeyId) {\n+    throw new LangfuseNotFoundError(\n+      \"Access Key ID and Secret Access Key are required\",\n+    );\n+  }\n+\n+  if (!isUsingHostCredentials && !secretAccessKey && !existingIntegration) {\n+    throw new LangfuseNotFoundError(\n+      \"Secret access key is required for new configuration when not using host credentials\",\n+    );\n+  }\n+\n+  // Prepare data for create/update\n+  const data: any = {\n+    projectId: auth.scope.projectId,\n+    type,\n+    bucketName,\n+    endpoint: endpoint || null,\n+    region,\n+    accessKeyId,\n+    prefix: prefix ?? \"\",\n+    exportFrequency,\n+    enabled,\n+    forcePathStyle,\n+    fileType,\n+    exportMode: exportMode || BlobStorageExportMode.FULL_HISTORY,\n+    exportStartDate: exportStartDate || null,\n+  };\n+\n+  // Handle secret access key encryption if provided\n+  if (secretAccessKey !== undefined) {\n+    data.secretAccessKey = secretAccessKey\n+      ? encrypt(secretAccessKey)\n+      : undefined;\n+  }\n+\n+  // Perform upsert operation\n+  const integration = await prisma.blobStorageIntegration.upsert({\n+    where: {\n+      projectId: auth.scope.projectId,\n+    },\n+    create: data,\n+    update: Object.fromEntries(\n+      Object.entries(data).filter(([key]) => key !== \"projectId\"),\n+    ),\n+    omit: {\n+      secretAccessKey: true,\n+    },\n+  });\n+\n+  return transformBlobStorageIntegrationToAPIResponse(integration);\n+};\n+\n+export default withMiddlewares({\n+  GET: createAuthedProjectAPIRoute({\n+    name: \"Get Blob Storage Integration\",\n+    responseSchema: BlobStorageIntegrationV1Response,\n+    fn: async ({ auth }) => {\n+      const integration = await prisma.blobStorageIntegration.findUnique({\n+        where: {\n+          projectId: auth.scope.projectId,\n+        },\n+        omit: {\n+          secretAccessKey: true,\n+        },\n+      });\n+\n+      if (!integration) {\n+        throw new LangfuseNotFoundError(\"Blob storage integration not found\");\n+      }\n+\n+      return transformBlobStorageIntegrationToAPIResponse(integration);\n+    },\n+  }),\n+\n+  PUT: createAuthedProjectAPIRoute({",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2195601489",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7748,
        "pr_file": "web/src/pages/api/public/integrations/blob-storage/index.ts",
        "discussion_id": "2195601489",
        "commented_code": "@@ -0,0 +1,206 @@\n+import { auditLog } from \"@/src/features/audit-logs/auditLog\";\n+import { createAuthedProjectAPIRoute } from \"@/src/features/public-api/server/createAuthedProjectAPIRoute\";\n+import {\n+  UpsertBlobStorageIntegrationV1Body,\n+  BlobStorageIntegrationV1Response,\n+  transformBlobStorageIntegrationToAPIResponse,\n+} from \"@/src/features/public-api/types/blob-storage-integration\";\n+import { withMiddlewares } from \"@/src/features/public-api/server/withMiddlewares\";\n+import { LangfuseNotFoundError } from \"@langfuse/shared\";\n+import { encrypt } from \"@langfuse/shared/encryption\";\n+import { env } from \"@/src/env.mjs\";\n+import {\n+  BlobStorageIntegrationType,\n+  BlobStorageExportMode,\n+} from \"@langfuse/shared\";\n+import { prisma } from \"@langfuse/shared/src/db\";\n+\n+// Unified upsert function for blob storage integration\n+const upsertBlobStorageIntegration = async ({\n+  body,\n+  auth,\n+  auditAction = \"update\",\n+}: {\n+  body: UpsertBlobStorageIntegrationV1Body;\n+  auth: any;\n+  auditAction?: \"create\" | \"update\";\n+}) => {\n+  // Audit log\n+  await auditLog({\n+    action: auditAction,\n+    resourceType: \"blobStorageIntegration\",\n+    resourceId: auth.scope.projectId,\n+    projectId: auth.scope.projectId,\n+    orgId: auth.scope.orgId,\n+    apiKeyId: auth.scope.apiKeyId,\n+  });\n+\n+  const {\n+    type,\n+    bucketName,\n+    endpoint,\n+    region,\n+    accessKeyId,\n+    secretAccessKey,\n+    prefix,\n+    exportFrequency,\n+    enabled,\n+    forcePathStyle,\n+    fileType,\n+    exportMode,\n+    exportStartDate,\n+  } = body;\n+\n+  // Check if integration already exists\n+  const existingIntegration = await prisma.blobStorageIntegration.findUnique({\n+    where: {\n+      projectId: auth.scope.projectId,\n+    },\n+  });\n+\n+  // Validate credentials based on environment and type\n+  const isSelfHosted = !env.NEXT_PUBLIC_LANGFUSE_CLOUD_REGION;\n+  const canUseHostCredentials =\n+    isSelfHosted &&\n+    (type === BlobStorageIntegrationType.S3 ||\n+      existingIntegration?.type === BlobStorageIntegrationType.S3);\n+  const isUsingHostCredentials =\n+    canUseHostCredentials && (!accessKeyId || !secretAccessKey);\n+\n+  if (!canUseHostCredentials && !accessKeyId) {\n+    throw new LangfuseNotFoundError(\n+      \"Access Key ID and Secret Access Key are required\",\n+    );\n+  }\n+\n+  if (!isUsingHostCredentials && !secretAccessKey && !existingIntegration) {\n+    throw new LangfuseNotFoundError(\n+      \"Secret access key is required for new configuration when not using host credentials\",\n+    );\n+  }\n+\n+  // Prepare data for create/update\n+  const data: any = {\n+    projectId: auth.scope.projectId,\n+    type,\n+    bucketName,\n+    endpoint: endpoint || null,\n+    region,\n+    accessKeyId,\n+    prefix: prefix ?? \"\",\n+    exportFrequency,\n+    enabled,\n+    forcePathStyle,\n+    fileType,\n+    exportMode: exportMode || BlobStorageExportMode.FULL_HISTORY,\n+    exportStartDate: exportStartDate || null,\n+  };\n+\n+  // Handle secret access key encryption if provided\n+  if (secretAccessKey !== undefined) {\n+    data.secretAccessKey = secretAccessKey\n+      ? encrypt(secretAccessKey)\n+      : undefined;\n+  }\n+\n+  // Perform upsert operation\n+  const integration = await prisma.blobStorageIntegration.upsert({\n+    where: {\n+      projectId: auth.scope.projectId,\n+    },\n+    create: data,\n+    update: Object.fromEntries(\n+      Object.entries(data).filter(([key]) => key !== \"projectId\"),\n+    ),\n+    omit: {\n+      secretAccessKey: true,\n+    },\n+  });\n+\n+  return transformBlobStorageIntegrationToAPIResponse(integration);\n+};\n+\n+export default withMiddlewares({\n+  GET: createAuthedProjectAPIRoute({\n+    name: \"Get Blob Storage Integration\",\n+    responseSchema: BlobStorageIntegrationV1Response,\n+    fn: async ({ auth }) => {\n+      const integration = await prisma.blobStorageIntegration.findUnique({\n+        where: {\n+          projectId: auth.scope.projectId,\n+        },\n+        omit: {\n+          secretAccessKey: true,\n+        },\n+      });\n+\n+      if (!integration) {\n+        throw new LangfuseNotFoundError(\"Blob storage integration not found\");\n+      }\n+\n+      return transformBlobStorageIntegrationToAPIResponse(integration);\n+    },\n+  }),\n+\n+  PUT: createAuthedProjectAPIRoute({",
        "comment_created_at": "2025-07-09T17:32:40+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The PUT upsert endpoint does not explicitly set a success status code differentiating create (201) from update (200). This might conflict with some test expectations.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1999287840",
    "pr_number": 6043,
    "pr_file": "web/src/pages/api/public/traces/[traceId].ts",
    "created_at": "2025-03-17T17:23:00+00:00",
    "commented_code": "return { message: \"Trace deleted successfully\" };\n     },\n   }),\n+\n+  PATCH: createAuthedAPIRoute({",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "1999287840",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6043,
        "pr_file": "web/src/pages/api/public/traces/[traceId].ts",
        "discussion_id": "1999287840",
        "commented_code": "@@ -173,4 +178,81 @@ export default withMiddlewares({\n       return { message: \"Trace deleted successfully\" };\n     },\n   }),\n+\n+  PATCH: createAuthedAPIRoute({",
        "comment_created_at": "2025-03-17T17:23:00+00:00",
        "comment_author": "Steffen911",
        "comment_body": "Return 202 Accepted status code and document that this is processed async.",
        "pr_file_module": null
      }
    ]
  }
]