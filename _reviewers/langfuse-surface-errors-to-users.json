[
  {
    "discussion_id": "2088495885",
    "pr_number": 6824,
    "pr_file": "web/src/features/dashboard/components/DashboardTable.tsx",
    "created_at": "2025-05-14T09:27:24+00:00",
    "commented_code": ");\n }\n \n+function CloneDashboard({ dashboardId }: { dashboardId: string }) {\n+  const projectId = useProjectIdFromURL();\n+  const utils = api.useUtils();\n+  const hasAccess = useHasProjectAccess({ projectId, scope: \"dashboards:CUD\" });\n+  const capture = usePostHogClientCapture();\n+\n+  const mutCloneDashboard = api.dashboard.cloneDashboard.useMutation({\n+    onSuccess: () => {\n+      void utils.dashboard.invalidate();\n+      capture(\"dashboard:clone_dashboard\");\n+      showSuccessToast({\n+        title: \"Dashboard cloned\",\n+        description: \"The dashboard has been cloned successfully\",\n+      });\n+    },\n+    onError: (e) => {\n+      showErrorToast(\"Failed to clone dashboard\", e.message);\n+    },\n+  });\n+\n+  const handleCloneDashboard = () => {\n+    if (!projectId) {\n+      console.error(\"Project ID is missing\");",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2088495885",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6824,
        "pr_file": "web/src/features/dashboard/components/DashboardTable.tsx",
        "discussion_id": "2088495885",
        "commented_code": "@@ -84,6 +85,51 @@ function DeleteDashboard({ dashboardId }: { dashboardId: string }) {\n   );\n }\n \n+function CloneDashboard({ dashboardId }: { dashboardId: string }) {\n+  const projectId = useProjectIdFromURL();\n+  const utils = api.useUtils();\n+  const hasAccess = useHasProjectAccess({ projectId, scope: \"dashboards:CUD\" });\n+  const capture = usePostHogClientCapture();\n+\n+  const mutCloneDashboard = api.dashboard.cloneDashboard.useMutation({\n+    onSuccess: () => {\n+      void utils.dashboard.invalidate();\n+      capture(\"dashboard:clone_dashboard\");\n+      showSuccessToast({\n+        title: \"Dashboard cloned\",\n+        description: \"The dashboard has been cloned successfully\",\n+      });\n+    },\n+    onError: (e) => {\n+      showErrorToast(\"Failed to clone dashboard\", e.message);\n+    },\n+  });\n+\n+  const handleCloneDashboard = () => {\n+    if (!projectId) {\n+      console.error(\"Project ID is missing\");",
        "comment_created_at": "2025-05-14T09:27:24+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "If `projectId` is missing, only a console error is logged. Consider providing an immediate user-visible error (e.g. via a toast) so the user knows something went wrong.\n```suggestion\n      showErrorToast(\"Project ID is missing\");\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2024629386",
    "pr_number": 6306,
    "pr_file": "web/src/features/prompts/components/SetPromptVersionLabels/index.tsx",
    "created_at": "2025-04-02T11:25:34+00:00",
    "commented_code": "});\n \n   const handleSubmitLabels = async () => {\n-    if (!projectId) {\n-      alert(\"Project ID is missing\");\n-      return;\n-    }\n+    try {\n+      if (!projectId) {\n+        alert(\"Project ID is missing\");\n+        return;\n+      }\n \n-    await mutatePromptVersionLabels.mutateAsync({\n-      projectId: projectId as string,\n-      promptId: prompt.id,\n-      labels: selectedLabels,\n-    });\n+      await mutatePromptVersionLabels.mutateAsync({\n+        projectId: projectId as string,\n+        promptId: prompt.id,\n+        labels: selectedLabels,\n+      });\n \n-    capture(\"prompt_detail:apply_labels\", { labels: selectedLabels });\n-    setIsOpen(false);\n+      capture(\"prompt_detail:apply_labels\", { labels: selectedLabels });\n+      setIsOpen(false);\n+    } catch (err) {\n+      console.error(err);",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2024629386",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6306,
        "pr_file": "web/src/features/prompts/components/SetPromptVersionLabels/index.tsx",
        "discussion_id": "2024629386",
        "commented_code": "@@ -87,19 +87,23 @@ export function SetPromptVersionLabels({\n   });\n \n   const handleSubmitLabels = async () => {\n-    if (!projectId) {\n-      alert(\"Project ID is missing\");\n-      return;\n-    }\n+    try {\n+      if (!projectId) {\n+        alert(\"Project ID is missing\");\n+        return;\n+      }\n \n-    await mutatePromptVersionLabels.mutateAsync({\n-      projectId: projectId as string,\n-      promptId: prompt.id,\n-      labels: selectedLabels,\n-    });\n+      await mutatePromptVersionLabels.mutateAsync({\n+        projectId: projectId as string,\n+        promptId: prompt.id,\n+        labels: selectedLabels,\n+      });\n \n-    capture(\"prompt_detail:apply_labels\", { labels: selectedLabels });\n-    setIsOpen(false);\n+      capture(\"prompt_detail:apply_labels\", { labels: selectedLabels });\n+      setIsOpen(false);\n+    } catch (err) {\n+      console.error(err);",
        "comment_created_at": "2025-04-02T11:25:34+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Consider notifying the user of errors instead of only logging them to the console to improve error visibility in a production environment.\n```suggestion\n      alert('An error occurred. Please try again.'); console.error(err);\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2007655477",
    "pr_number": 6149,
    "pr_file": "web/src/features/setup/components/SetupPage.tsx",
    "created_at": "2025-03-21T14:03:43+00:00",
    "commented_code": ">(null);\n   const utils = api.useUtils();\n   const mutCreateApiKey = api.apiKeys.create.useMutation({\n-    onSuccess: () => {\n+    onSuccess: (data) => {\n       utils.apiKeys.invalidate();\n+      setApiKeys(data);\n       showChat();\n     },\n   });\n-  const isLoadingRef = useRef(false);\n \n-  useEffect(() => {\n-    const createApiKey = async () => {\n-      if (projectId && !isLoadingRef.current && !apiKeys) {\n-        isLoadingRef.current = true;\n-        try {\n-          const apiKey = await mutCreateApiKey.mutateAsync({ projectId });\n-          setApiKeys(apiKey);\n-        } catch (error) {\n-          console.error(\"Error creating API key:\", error);\n-        } finally {\n-          isLoadingRef.current = false;\n-        }\n-      }\n-    };\n-    if (!apiKeys) {\n-      createApiKey();\n+  const createApiKey = async () => {\n+    try {\n+      await mutCreateApiKey.mutateAsync({ projectId });\n+    } catch (error) {\n+      console.error(\"Error creating API key:\", error);",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2007655477",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6149,
        "pr_file": "web/src/features/setup/components/SetupPage.tsx",
        "discussion_id": "2007655477",
        "commented_code": "@@ -254,54 +246,61 @@ const TracingSetup = ({\n   >(null);\n   const utils = api.useUtils();\n   const mutCreateApiKey = api.apiKeys.create.useMutation({\n-    onSuccess: () => {\n+    onSuccess: (data) => {\n       utils.apiKeys.invalidate();\n+      setApiKeys(data);\n       showChat();\n     },\n   });\n-  const isLoadingRef = useRef(false);\n \n-  useEffect(() => {\n-    const createApiKey = async () => {\n-      if (projectId && !isLoadingRef.current && !apiKeys) {\n-        isLoadingRef.current = true;\n-        try {\n-          const apiKey = await mutCreateApiKey.mutateAsync({ projectId });\n-          setApiKeys(apiKey);\n-        } catch (error) {\n-          console.error(\"Error creating API key:\", error);\n-        } finally {\n-          isLoadingRef.current = false;\n-        }\n-      }\n-    };\n-    if (!apiKeys) {\n-      createApiKey();\n+  const createApiKey = async () => {\n+    try {\n+      await mutCreateApiKey.mutateAsync({ projectId });\n+    } catch (error) {\n+      console.error(\"Error creating API key:\", error);",
        "comment_created_at": "2025-03-21T14:03:43+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Error handling could be improved by surfacing user feedback rather than only logging to the console when creating an API key via the 'Create API Key' button.\n```suggestion\n      alert('Failed to create API key. Please try again.'); console.error(\"Error creating API key:\", error);\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2092973437",
    "pr_number": 6873,
    "pr_file": "web/src/features/widgets/components/DashboardWidget.tsx",
    "created_at": "2025-05-16T12:41:43+00:00",
    "commented_code": "});\n   }, [queryResult.data, widget.data]);\n \n+  const handleEdit = () => {\n+    router.push(`/project/${projectId}/widgets/${placement.widgetId}`);\n+  };\n+\n+  const copyMutation = api.dashboardWidgets.copyToProject.useMutation({",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2092973437",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6873,
        "pr_file": "web/src/features/widgets/components/DashboardWidget.tsx",
        "discussion_id": "2092973437",
        "commented_code": "@@ -129,6 +130,30 @@ export function DashboardWidget({\n     });\n   }, [queryResult.data, widget.data]);\n \n+  const handleEdit = () => {\n+    router.push(`/project/${projectId}/widgets/${placement.widgetId}`);\n+  };\n+\n+  const copyMutation = api.dashboardWidgets.copyToProject.useMutation({",
        "comment_created_at": "2025-05-16T12:41:43+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The copy mutation\u2019s `onSuccess` handler (lines 138\u2013141) immediately routes to the new widget page. Consider adding an `onError` callback (and possibly using `showErrorToast`) to provide user feedback in case the copy fails.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094104520",
    "pr_number": 6873,
    "pr_file": "web/src/pages/project/[projectId]/dashboards/[dashboardId]/index.tsx",
    "created_at": "2025-05-17T11:51:41+00:00",
    "commented_code": "addWidgetToDashboard(widget);\n   };\n \n+  const mutateCloneDashboard = api.dashboard.cloneDashboard.useMutation({\n+    onSuccess: (data) => {\n+      void utils.dashboard.invalidate();\n+      capture(\"dashboard:clone_dashboard\");\n+      // Redirect to new dashboard",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2094104520",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6873,
        "pr_file": "web/src/pages/project/[projectId]/dashboards/[dashboardId]/index.tsx",
        "discussion_id": "2094104520",
        "commented_code": "@@ -303,75 +314,110 @@ export default function DashboardDetail() {\n     addWidgetToDashboard(widget);\n   };\n \n+  const mutateCloneDashboard = api.dashboard.cloneDashboard.useMutation({\n+    onSuccess: (data) => {\n+      void utils.dashboard.invalidate();\n+      capture(\"dashboard:clone_dashboard\");\n+      // Redirect to new dashboard",
        "comment_created_at": "2025-05-17T11:51:41+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "In the clone mutation's `onSuccess` callback, after invalidating and capturing analytics, consider adding a success toast for clearer user feedback before redirecting.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1997679391",
    "pr_number": 6034,
    "pr_file": "web/src/components/publish-object-switch.tsx",
    "created_at": "2025-03-16T18:33:59+00:00",
    "commented_code": "const copyUrl = () => {\n     setIsCopied(true);\n-    void navigator.clipboard.writeText(window.location.href);\n+    void copyTextToClipboard(window.location.href);",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "1997679391",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6034,
        "pr_file": "web/src/components/publish-object-switch.tsx",
        "discussion_id": "1997679391",
        "commented_code": "@@ -96,7 +97,7 @@ const Base = (props: {\n \n   const copyUrl = () => {\n     setIsCopied(true);\n-    void navigator.clipboard.writeText(window.location.href);\n+    void copyTextToClipboard(window.location.href);",
        "comment_created_at": "2025-03-16T18:33:59+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Consider handling promise rejections (e.g., adding a `.catch` block) in case clipboard copying fails.\n```suggestion\n    void copyTextToClipboard(window.location.href).catch(console.error);\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2050522528",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6034,
        "pr_file": "web/src/components/publish-object-switch.tsx",
        "discussion_id": "1997679391",
        "commented_code": "@@ -96,7 +97,7 @@ const Base = (props: {\n \n   const copyUrl = () => {\n     setIsCopied(true);\n-    void navigator.clipboard.writeText(window.location.href);\n+    void copyTextToClipboard(window.location.href);",
        "comment_created_at": "2025-04-18T11:47:04+00:00",
        "comment_author": "akshitvijay",
        "comment_body": "Not modifying the existing behavior to avoid unintended effects",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2068276904",
    "pr_number": 6651,
    "pr_file": "web/src/components/trace/CopyIdsPopover.tsx",
    "created_at": "2025-04-30T09:28:55+00:00",
    "commented_code": "+import { Button } from \"@/src/components/ui/button\";\n+import { CopyIcon, CheckIcon } from \"lucide-react\";\n+import { useState } from \"react\";\n+import {\n+  Popover,\n+  PopoverContent,\n+  PopoverTrigger,\n+} from \"@/src/components/ui/popover\";\n+import { cn } from \"@/src/utils/tailwind\";\n+import { Label } from \"@/src/components/ui/label\";\n+\n+interface IdItem {\n+  name: string;\n+  id: string;\n+}\n+\n+export const CopyIdsPopover = ({\n+  idItems,\n+  className,\n+}: {\n+  idItems: IdItem[];\n+  className?: string;\n+}) => {\n+  const [copiedId, setCopiedId] = useState<string | null>(null);\n+\n+  const handleCopy = (textToCopy: string) => {\n+    navigator.clipboard.writeText(textToCopy);",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2068276904",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6651,
        "pr_file": "web/src/components/trace/CopyIdsPopover.tsx",
        "discussion_id": "2068276904",
        "commented_code": "@@ -0,0 +1,107 @@\n+import { Button } from \"@/src/components/ui/button\";\n+import { CopyIcon, CheckIcon } from \"lucide-react\";\n+import { useState } from \"react\";\n+import {\n+  Popover,\n+  PopoverContent,\n+  PopoverTrigger,\n+} from \"@/src/components/ui/popover\";\n+import { cn } from \"@/src/utils/tailwind\";\n+import { Label } from \"@/src/components/ui/label\";\n+\n+interface IdItem {\n+  name: string;\n+  id: string;\n+}\n+\n+export const CopyIdsPopover = ({\n+  idItems,\n+  className,\n+}: {\n+  idItems: IdItem[];\n+  className?: string;\n+}) => {\n+  const [copiedId, setCopiedId] = useState<string | null>(null);\n+\n+  const handleCopy = (textToCopy: string) => {\n+    navigator.clipboard.writeText(textToCopy);",
        "comment_created_at": "2025-04-30T09:28:55+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Consider making the clipboard write asynchronous and adding error handling in `handleCopy` to avoid silent failures.\n",
        "pr_file_module": null
      }
    ]
  }
]