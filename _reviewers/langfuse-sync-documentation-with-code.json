[
  {
    "discussion_id": "2194873516",
    "pr_number": 7745,
    "pr_file": "worker/src/__tests__/blobStorageIntegrationProcessing.test.ts",
    "created_at": "2025-07-09T12:16:36+00:00",
    "commented_code": "}\n     }\n   });\n+\n+  describe(\"BlobStorageExportMode minTimestamp behavior\", () => {\n+    it(\"should use epoch date for FULL_HISTORY mode on first export\", async () => {\n+      const { projectId } = await createOrgProjectAndApiKey();\n+      const now = new Date();\n+\n+      // Create trace with old timestamp\n+      const epochTrace = createTrace({\n+        project_id: projectId,\n+        timestamp: 1000, // Very old timestamp\n+        name: \"Epoch Trace\",\n+      });\n+      await createTracesCh([epochTrace]);\n+\n+      // Create integration with FULL_HISTORY mode and no lastSyncAt\n+      await prisma.blobStorageIntegration.create({\n+        data: {\n+          projectId,\n+          type: BlobStorageIntegrationType.S3,\n+          bucketName,\n+          prefix: \"test-full-history/\",\n+          accessKeyId,\n+          secretAccessKey: encrypt(secretAccessKey),\n+          region: region ? region : \"auto\",\n+          endpoint: endpoint ? endpoint : null,\n+          forcePathStyle:\n+            env.LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE === \"true\",\n+          enabled: true,\n+          exportFrequency: \"hourly\",\n+          exportMode: \"FULL_HISTORY\",\n+          exportStartDate: null,\n+          lastSyncAt: null, // First export\n+        },\n+      });\n+\n+      await handleBlobStorageIntegrationProjectJob({\n+        data: { payload: { projectId } },\n+      } as Job);\n+\n+      // Check that the trace file exists (indicating it found data from epoch)\n+      const files = await storageService.listFiles(\"test-full-history/\");\n+      const projectFiles = files.filter((f) => f.file.includes(projectId));\n+      const traceFile = projectFiles.find((f) => f.file.includes(\"/traces/\"));\n+\n+      expect(traceFile).toBeDefined();\n+\n+      // Verify the file contains the old trace data\n+      if (traceFile) {\n+        const content = await storageService.download(traceFile.file);\n+        expect(content).toContain(epochTrace.id);\n+      }\n+    });\n+\n+    it(\"should use current date for FROM_TODAY mode on first export\", async () => {\n+      const { projectId } = await createOrgProjectAndApiKey();\n+      const now = new Date();\n+      const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n+      const veryOldTrace = new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000); // 2 days ago\n+\n+      // Create traces from different time periods\n+      const oldTrace = createTrace({\n+        project_id: projectId,\n+        timestamp: yesterday.getTime(),\n+        name: \"Old Trace\",\n+      });\n+      const veryOldTraceObj = createTrace({\n+        project_id: projectId,\n+        timestamp: veryOldTrace.getTime(),\n+        name: \"Very Old Trace\",\n+      });\n+      await createTracesCh([oldTrace, veryOldTraceObj]);\n+\n+      // Create integration with FROM_TODAY mode\n+      await prisma.blobStorageIntegration.create({\n+        data: {\n+          projectId,\n+          type: BlobStorageIntegrationType.S3,\n+          bucketName,\n+          prefix: \"test-from-today/\",\n+          accessKeyId,\n+          secretAccessKey: encrypt(secretAccessKey),\n+          region: region ? region : \"auto\",\n+          endpoint: endpoint ? endpoint : null,\n+          forcePathStyle:\n+            env.LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE === \"true\",\n+          enabled: true,\n+          exportFrequency: \"hourly\",\n+          exportMode: \"FROM_TODAY\" as any,\n+          exportStartDate: new Date(), // Use current date\n+          lastSyncAt: null, // First export\n+        },\n+      });\n+\n+      await handleBlobStorageIntegrationProjectJob({\n+        data: { payload: { projectId } },\n+      } as Job);\n+\n+      const files = await storageService.listFiles(\"test-from-today/\");\n+      const projectFiles = files.filter((f) => f.file.includes(projectId));\n+      const traceFile = projectFiles.find((f) => f.file.includes(\"/traces/\"));\n+\n+      expect(traceFile).toBeDefined();\n+\n+      if (traceFile) {\n+        const content = await storageService.download(traceFile.file);\n+        // With FROM_TODAY mode and null exportStartDate, the minTimestamp is set to current time",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2194873516",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7745,
        "pr_file": "worker/src/__tests__/blobStorageIntegrationProcessing.test.ts",
        "discussion_id": "2194873516",
        "commented_code": "@@ -439,4 +439,178 @@ describe(\"BlobStorageIntegrationProcessingJob\", () => {\n       }\n     }\n   });\n+\n+  describe(\"BlobStorageExportMode minTimestamp behavior\", () => {\n+    it(\"should use epoch date for FULL_HISTORY mode on first export\", async () => {\n+      const { projectId } = await createOrgProjectAndApiKey();\n+      const now = new Date();\n+\n+      // Create trace with old timestamp\n+      const epochTrace = createTrace({\n+        project_id: projectId,\n+        timestamp: 1000, // Very old timestamp\n+        name: \"Epoch Trace\",\n+      });\n+      await createTracesCh([epochTrace]);\n+\n+      // Create integration with FULL_HISTORY mode and no lastSyncAt\n+      await prisma.blobStorageIntegration.create({\n+        data: {\n+          projectId,\n+          type: BlobStorageIntegrationType.S3,\n+          bucketName,\n+          prefix: \"test-full-history/\",\n+          accessKeyId,\n+          secretAccessKey: encrypt(secretAccessKey),\n+          region: region ? region : \"auto\",\n+          endpoint: endpoint ? endpoint : null,\n+          forcePathStyle:\n+            env.LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE === \"true\",\n+          enabled: true,\n+          exportFrequency: \"hourly\",\n+          exportMode: \"FULL_HISTORY\",\n+          exportStartDate: null,\n+          lastSyncAt: null, // First export\n+        },\n+      });\n+\n+      await handleBlobStorageIntegrationProjectJob({\n+        data: { payload: { projectId } },\n+      } as Job);\n+\n+      // Check that the trace file exists (indicating it found data from epoch)\n+      const files = await storageService.listFiles(\"test-full-history/\");\n+      const projectFiles = files.filter((f) => f.file.includes(projectId));\n+      const traceFile = projectFiles.find((f) => f.file.includes(\"/traces/\"));\n+\n+      expect(traceFile).toBeDefined();\n+\n+      // Verify the file contains the old trace data\n+      if (traceFile) {\n+        const content = await storageService.download(traceFile.file);\n+        expect(content).toContain(epochTrace.id);\n+      }\n+    });\n+\n+    it(\"should use current date for FROM_TODAY mode on first export\", async () => {\n+      const { projectId } = await createOrgProjectAndApiKey();\n+      const now = new Date();\n+      const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n+      const veryOldTrace = new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000); // 2 days ago\n+\n+      // Create traces from different time periods\n+      const oldTrace = createTrace({\n+        project_id: projectId,\n+        timestamp: yesterday.getTime(),\n+        name: \"Old Trace\",\n+      });\n+      const veryOldTraceObj = createTrace({\n+        project_id: projectId,\n+        timestamp: veryOldTrace.getTime(),\n+        name: \"Very Old Trace\",\n+      });\n+      await createTracesCh([oldTrace, veryOldTraceObj]);\n+\n+      // Create integration with FROM_TODAY mode\n+      await prisma.blobStorageIntegration.create({\n+        data: {\n+          projectId,\n+          type: BlobStorageIntegrationType.S3,\n+          bucketName,\n+          prefix: \"test-from-today/\",\n+          accessKeyId,\n+          secretAccessKey: encrypt(secretAccessKey),\n+          region: region ? region : \"auto\",\n+          endpoint: endpoint ? endpoint : null,\n+          forcePathStyle:\n+            env.LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE === \"true\",\n+          enabled: true,\n+          exportFrequency: \"hourly\",\n+          exportMode: \"FROM_TODAY\" as any,\n+          exportStartDate: new Date(), // Use current date\n+          lastSyncAt: null, // First export\n+        },\n+      });\n+\n+      await handleBlobStorageIntegrationProjectJob({\n+        data: { payload: { projectId } },\n+      } as Job);\n+\n+      const files = await storageService.listFiles(\"test-from-today/\");\n+      const projectFiles = files.filter((f) => f.file.includes(projectId));\n+      const traceFile = projectFiles.find((f) => f.file.includes(\"/traces/\"));\n+\n+      expect(traceFile).toBeDefined();\n+\n+      if (traceFile) {\n+        const content = await storageService.download(traceFile.file);\n+        // With FROM_TODAY mode and null exportStartDate, the minTimestamp is set to current time",
        "comment_created_at": "2025-07-09T12:16:36+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The inline comment mentions 'null exportStartDate' for FROM_TODAY mode, but a current date is provided in the test. Please update the comment to reflect the actual behavior.\n```suggestion\n        // With FROM_TODAY mode and a current exportStartDate, the minTimestamp is set to the provided date (current time)\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167062684",
    "pr_number": 7506,
    "pr_file": "web/src/utils/numbers.ts",
    "created_at": "2025-06-25T15:51:53+00:00",
    "commented_code": "}).format(number ?? 0);\n };\n \n+/**\n+ * Specialized formatter for very small numbers (10^-6 to 10^-15 range)",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2167062684",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7506,
        "pr_file": "web/src/utils/numbers.ts",
        "discussion_id": "2167062684",
        "commented_code": "@@ -11,6 +11,29 @@ export const compactNumberFormatter = (\n   }).format(number ?? 0);\n };\n \n+/**\n+ * Specialized formatter for very small numbers (10^-6 to 10^-15 range)",
        "comment_created_at": "2025-06-25T15:51:53+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The JSDoc suggests handling numbers 10^-6 to 10^-15, yet the condition applies for numbers < 1e-3; consider aligning docs with the actual threshold.\n```suggestion\n * Specialized formatter for very small numbers (10^-3 to 10^-15 range)\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2077723581",
    "pr_number": 6595,
    "pr_file": "packages/shared/src/server/services/TableViewService/TableViewService.ts",
    "created_at": "2025-05-07T14:08:06+00:00",
    "commented_code": "+import { prisma } from \"../../../db\";\n+import {\n+  TableViewPresetTableName,\n+  type TableViewPresetDomain,\n+} from \"../../../domain/table-view-presets\";\n+import { LangfuseNotFoundError } from \"../../../errors\";\n+import {\n+  TableViewPresetsNamesCreatorList,\n+  TableViewPresetsNamesCreatorListSchema,\n+  UpdateTableViewPresetsNameInput,\n+  type CreateTableViewPresetsInput,\n+  type UpdateTableViewPresetsInput,\n+} from \"./types\";\n+\n+const TABLE_NAME_TO_URL_MAP = <Record<TableViewPresetTableName, string>>{\n+  [TableViewPresetTableName.Traces]: \"traces\",\n+  [TableViewPresetTableName.Observations]: \"observations\",\n+  [TableViewPresetTableName.Scores]: \"scores\",\n+  [TableViewPresetTableName.Sessions]: \"sessions\",\n+};\n+\n+export class TableViewService {\n+  /**\n+   * Creates a saved view",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2077723581",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6595,
        "pr_file": "packages/shared/src/server/services/TableViewService/TableViewService.ts",
        "discussion_id": "2077723581",
        "commented_code": "@@ -0,0 +1,192 @@\n+import { prisma } from \"../../../db\";\n+import {\n+  TableViewPresetTableName,\n+  type TableViewPresetDomain,\n+} from \"../../../domain/table-view-presets\";\n+import { LangfuseNotFoundError } from \"../../../errors\";\n+import {\n+  TableViewPresetsNamesCreatorList,\n+  TableViewPresetsNamesCreatorListSchema,\n+  UpdateTableViewPresetsNameInput,\n+  type CreateTableViewPresetsInput,\n+  type UpdateTableViewPresetsInput,\n+} from \"./types\";\n+\n+const TABLE_NAME_TO_URL_MAP = <Record<TableViewPresetTableName, string>>{\n+  [TableViewPresetTableName.Traces]: \"traces\",\n+  [TableViewPresetTableName.Observations]: \"observations\",\n+  [TableViewPresetTableName.Scores]: \"scores\",\n+  [TableViewPresetTableName.Sessions]: \"sessions\",\n+};\n+\n+export class TableViewService {\n+  /**\n+   * Creates a saved view",
        "comment_created_at": "2025-05-07T14:08:06+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Update comment from 'Creates a saved view' to 'Creates a table view preset'.\n```suggestion\n   * Creates a table view preset\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2058759751",
    "pr_number": 6593,
    "pr_file": "packages/shared/src/server/repositories/observations.ts",
    "created_at": "2025-04-24T15:47:23+00:00",
    "commented_code": "projectId,\n   };\n \n-  // If no fromStartTime or startTime is provided, use a 7-day lookback for a faster query\n+  // If no fromStartTime or startTime is provided, use a lookback for a faster query",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2058759751",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6593,
        "pr_file": "packages/shared/src/server/repositories/observations.ts",
        "discussion_id": "2058759751",
        "commented_code": "@@ -413,9 +413,9 @@ const getObservationByIdInternal = async (\n     projectId,\n   };\n \n-  // If no fromStartTime or startTime is provided, use a 7-day lookback for a faster query\n+  // If no fromStartTime or startTime is provided, use a lookback for a faster query",
        "comment_created_at": "2025-04-24T15:47:23+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The comment still does not indicate the lookback period (1 day) that is being used. Consider updating it (or extracting a named constant) for clarity and maintainability.\n```suggestion\n  // If no fromStartTime or startTime is provided, use a 1-day lookback for a faster query\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2042232041",
    "pr_number": 6450,
    "pr_file": "packages/shared/src/server/repositories/observations.ts",
    "created_at": "2025-04-14T14:13:55+00:00",
    "commented_code": "import { env } from \"../../env\";\n import { ClickHouseClientConfigOptions } from \"@clickhouse/client\";\n \n+/**\n+ * Checks if observation exists in clickhouse.\n+ *\n+ * @param {Object} projectId - Project ID for the observation",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2042232041",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6450,
        "pr_file": "packages/shared/src/server/repositories/observations.ts",
        "discussion_id": "2042232041",
        "commented_code": "@@ -35,6 +35,18 @@ import {\n import { env } from \"../../env\";\n import { ClickHouseClientConfigOptions } from \"@clickhouse/client\";\n \n+/**\n+ * Checks if observation exists in clickhouse.\n+ *\n+ * @param {Object} projectId - Project ID for the observation",
        "comment_created_at": "2025-04-14T14:13:55+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Typographical issue: In the JSDoc for `checkObservationExists`, the `@param` for `projectId` states it is an object, but the type is actually `string`. Please update the JSDoc to indicate the correct type.\n```suggestion\n * @param {string} projectId - Project ID for the observation\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2042232047",
    "pr_number": 6450,
    "pr_file": "packages/shared/src/server/repositories/traces.ts",
    "created_at": "2025-04-14T14:13:55+00:00",
    "commented_code": "import { env } from \"../../env\";\n import { ClickHouseClientConfigOptions } from \"@clickhouse/client\";\n \n+/**\n+ * Checks if trace exists in clickhouse.\n+ *\n+ * @param {Object} projectId - Project ID for the trace",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2042232047",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6450,
        "pr_file": "packages/shared/src/server/repositories/traces.ts",
        "discussion_id": "2042232047",
        "commented_code": "@@ -28,6 +28,18 @@ import {\n import { env } from \"../../env\";\n import { ClickHouseClientConfigOptions } from \"@clickhouse/client\";\n \n+/**\n+ * Checks if trace exists in clickhouse.\n+ *\n+ * @param {Object} projectId - Project ID for the trace",
        "comment_created_at": "2025-04-14T14:13:55+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The doc comment for `checkTraceExists` incorrectly states that `projectId` is of type Object. Since the function signature uses `projectId: string`, please update the doc comment to use `{string}` instead of `{Object}`.\n```suggestion\n * @param {string} projectId - Project ID for the trace\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2019799300",
    "pr_number": 6274,
    "pr_file": "worker/src/app.ts",
    "created_at": "2025-03-29T13:40:55+00:00",
    "commented_code": "limiter: {\n         // Process at most `max` jobs per 30 seconds",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2019799300",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6274,
        "pr_file": "worker/src/app.ts",
        "discussion_id": "2019799300",
        "commented_code": "@@ -114,7 +114,7 @@ if (env.LANGFUSE_POSTGRES_METERING_DATA_EXPORT_IS_ENABLED === \"true\") {\n       limiter: {\n         // Process at most `max` jobs per 30 seconds",
        "comment_created_at": "2025-03-29T13:40:55+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The limiter duration was changed to 120_000 ms, but the comment still says '30 seconds'. Please update the comment to reflect a 120-second (2 minute) window.\n```suggestion\n        // Process at most `max` jobs per 120 seconds\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2019799303",
    "pr_number": 6274,
    "pr_file": "worker/src/app.ts",
    "created_at": "2025-03-29T13:40:56+00:00",
    "commented_code": "limiter: {\n       // Process at most `max` delete jobs per 15 seconds",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2019799303",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6274,
        "pr_file": "worker/src/app.ts",
        "discussion_id": "2019799303",
        "commented_code": "@@ -126,7 +126,7 @@\n     limiter: {\n       // Process at most `max` delete jobs per 15 seconds",
        "comment_created_at": "2025-03-29T13:40:56+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The trace deletion limiter now uses 120_000 ms instead of 30_000 ms, but the comment still indicates '15 seconds'. Please update the comment to match the new duration.\n```suggestion\n      // Process at most `max` delete jobs per 120 seconds\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2019797207",
    "pr_number": 6273,
    "pr_file": "worker/src/app.ts",
    "created_at": "2025-03-29T13:29:25+00:00",
    "commented_code": "limiter: {\n       // Process at most `max` delete jobs per 3 seconds",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2019797207",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6273,
        "pr_file": "worker/src/app.ts",
        "discussion_id": "2019797207",
        "commented_code": "@@ -148,7 +148,7 @@\n     limiter: {\n       // Process at most `max` delete jobs per 3 seconds",
        "comment_created_at": "2025-03-29T13:29:25+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The comment for project delete still says '3 seconds' while the duration was updated to 30_000. Please update the comment and confirm this change is intended.\n```suggestion\n      // Process at most `max` delete jobs per 30 seconds\n```",
        "pr_file_module": null
      }
    ]
  }
]