[
  {
    "discussion_id": "2183049745",
    "pr_number": 7631,
    "pr_file": "packages/shared/src/env.ts",
    "created_at": "2025-07-03T15:14:11+00:00",
    "commented_code": "LANGFUSE_CLICKHOUSE_DELETION_TIMEOUT_MS: z.coerce.number().default(240_000), // 4 minutes\n   LANGFUSE_CLICKHOUSE_QUERY_MAX_ATTEMPTS: z.coerce.number().default(3), // Maximum attempts for socket hang up errors\n   LANGFUSE_SKIP_S3_LIST_FOR_OBSERVATIONS_PROJECT_IDS: z.string().optional(),\n+\n+  LANGFUSE_EXPERIMENT_COMPARE_READ_FROM_AGGREGATING_MERGE_TREES: z\n+    .enum([\"true\", \"false\"])\n+    .default(\"false\"),\n+  LANGFUSE_EXPERIMENT_ADD_QUERY_RESULT_TO_SPAN_PROJECT_IDS: z\n+    .string()\n+    .optional()\n+    .transform((s) =>\n+      s ? s.split(\",\").map((s) => s.toLowerCase().trim()) : [],\n+    ),\n+  LANGFUSE_EXPERIMENT_SAMPLING_RATE: z.coerce\n+    .number()\n+    .min(0)\n+    .max(1)\n+    .default(0.1),\n+  LANGFUSE_EXPERIMENT_WHITELISTED_PROJECT_IDS: z\n+    .string()\n+    .optional()\n+    .transform((s) =>\n+      s ? s.split(\",\").map((s) => s.toLowerCase().trim()) : [],\n+    ),\n+  LANGFUSE_EXPERIMENT_RETURN_NEW_RESULT: z\n+    .enum([\"true\", \"false\"])",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2183049745",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 7631,
        "pr_file": "packages/shared/src/env.ts",
        "discussion_id": "2183049745",
        "commented_code": "@@ -107,6 +107,30 @@ const EnvSchema = z.object({\n   LANGFUSE_CLICKHOUSE_DELETION_TIMEOUT_MS: z.coerce.number().default(240_000), // 4 minutes\n   LANGFUSE_CLICKHOUSE_QUERY_MAX_ATTEMPTS: z.coerce.number().default(3), // Maximum attempts for socket hang up errors\n   LANGFUSE_SKIP_S3_LIST_FOR_OBSERVATIONS_PROJECT_IDS: z.string().optional(),\n+\n+  LANGFUSE_EXPERIMENT_COMPARE_READ_FROM_AGGREGATING_MERGE_TREES: z\n+    .enum([\"true\", \"false\"])\n+    .default(\"false\"),\n+  LANGFUSE_EXPERIMENT_ADD_QUERY_RESULT_TO_SPAN_PROJECT_IDS: z\n+    .string()\n+    .optional()\n+    .transform((s) =>\n+      s ? s.split(\",\").map((s) => s.toLowerCase().trim()) : [],\n+    ),\n+  LANGFUSE_EXPERIMENT_SAMPLING_RATE: z.coerce\n+    .number()\n+    .min(0)\n+    .max(1)\n+    .default(0.1),\n+  LANGFUSE_EXPERIMENT_WHITELISTED_PROJECT_IDS: z\n+    .string()\n+    .optional()\n+    .transform((s) =>\n+      s ? s.split(\",\").map((s) => s.toLowerCase().trim()) : [],\n+    ),\n+  LANGFUSE_EXPERIMENT_RETURN_NEW_RESULT: z\n+    .enum([\"true\", \"false\"])",
        "comment_created_at": "2025-07-03T15:14:11+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Consider using a boolean type for LANGFUSE_EXPERIMENT_RETURN_NEW_RESULT instead of an enum of strings to simplify condition checks.\n```suggestion\n    .coerce.boolean()\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2101907425",
    "pr_number": 6965,
    "pr_file": "packages/shared/src/env.ts",
    "created_at": "2025-05-22T08:01:45+00:00",
    "commented_code": "LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: z\n     .enum([\"true\", \"false\"])\n     .default(\"false\"),\n+  LANGFUSE_S3_MEDIA_UPLOAD_SSE: z.enum([\"AES256\", \"aws:kms\"]).optional(),",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2101907425",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6965,
        "pr_file": "packages/shared/src/env.ts",
        "discussion_id": "2101907425",
        "commented_code": "@@ -74,6 +76,8 @@ const EnvSchema = z.object({\n   LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: z\n     .enum([\"true\", \"false\"])\n     .default(\"false\"),\n+  LANGFUSE_S3_MEDIA_UPLOAD_SSE: z.enum([\"AES256\", \"aws:kms\"]).optional(),",
        "comment_created_at": "2025-05-22T08:01:45+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Restricting SSE config to valid options (`'AES256'` or `'aws:kms'`) improves robustness. Consider adding a conditional check that if `'aws:kms'` is used then the corresponding KMS key ID (e.g. `LANGFUSE_S3_MEDIA_UPLOAD_SSE_KMS_KEY_ID` or `LANGFUSE_S3_CORE_DATA_EXPORT_SSE_KMS_KEY_ID`) is provided.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2079528816",
    "pr_number": 6743,
    "pr_file": "web/sentry.client.config.ts",
    "created_at": "2025-05-08T11:25:12+00:00",
    "commented_code": "Sentry.init({\n   dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n   environment: process.env.NEXT_PUBLIC_SENTRY_ENVIRONMENT,\n+  release: process.env.NEXT_PUBLIC_BUILD_ID,",
    "repo_full_name": "langfuse/langfuse",
    "discussion_comments": [
      {
        "comment_id": "2079528816",
        "repo_full_name": "langfuse/langfuse",
        "pr_number": 6743,
        "pr_file": "web/sentry.client.config.ts",
        "discussion_id": "2079528816",
        "commented_code": "@@ -3,6 +3,7 @@ import * as Sentry from \"@sentry/nextjs\";\n Sentry.init({\n   dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n   environment: process.env.NEXT_PUBLIC_SENTRY_ENVIRONMENT,\n+  release: process.env.NEXT_PUBLIC_BUILD_ID,",
        "comment_created_at": "2025-05-08T11:25:12+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The release field is set to `process.env.NEXT_PUBLIC_BUILD_ID`, but the comment suggests using `SENTRY_RELEASE` for proper source map tagging. Consider using `process.env.SENTRY_RELEASE` (or a fallback) to allow overrides.\n```suggestion\n  release: process.env.SENTRY_RELEASE || process.env.NEXT_PUBLIC_BUILD_ID,\n```\n",
        "pr_file_module": null
      }
    ]
  }
]