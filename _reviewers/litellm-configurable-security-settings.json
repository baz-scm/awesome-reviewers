[
  {
    "discussion_id": "2173121251",
    "pr_number": 11744,
    "pr_file": "litellm/proxy/proxy_server.py",
    "created_at": "2025-06-28T04:41:52+00:00",
    "commented_code": "allow_methods=[\"*\"],\n     allow_headers=[\"*\"],\n )\n+@app.middleware(\"http\")\n+async def add_headers(request: Request, call_next: Callable[[Request], Awaitable[Response]]) -> Response:\n+    origin = request.headers.get(\"origin\")\n+    if origin and origin not in origins:\n+        return JSONResponse(\n+            status_code=status.HTTP_403_FORBIDDEN, content={\"detail\": f\"Origin '{origin}' is not allowed.\"}\n+        )\n+    response = await call_next(request)\n+    if origin:\n+        response.headers[\"Access-Control-Allow-Origin\"] = origin\n+    if not (\n+        request.url.path.endswith(\"/docs\")\n+        or request.url.path.endswith(\"/redoc\")\n+        or request.url.path.endswith(\"/openapi.json\")\n+    ):\n+        response.headers[\"Content-Security-Policy\"] = \"default-src 'none'\"\n+    response.headers[\"Cache-Control\"] = \"no-store, no-cache, must-revalidate\"",
    "repo_full_name": "BerriAI/litellm",
    "discussion_comments": [
      {
        "comment_id": "2173121251",
        "repo_full_name": "BerriAI/litellm",
        "pr_number": 11744,
        "pr_file": "litellm/proxy/proxy_server.py",
        "discussion_id": "2173121251",
        "commented_code": "@@ -833,6 +834,35 @@ async def openai_exception_handler(request: Request, exc: ProxyException):\n     allow_methods=[\"*\"],\n     allow_headers=[\"*\"],\n )\n+@app.middleware(\"http\")\n+async def add_headers(request: Request, call_next: Callable[[Request], Awaitable[Response]]) -> Response:\n+    origin = request.headers.get(\"origin\")\n+    if origin and origin not in origins:\n+        return JSONResponse(\n+            status_code=status.HTTP_403_FORBIDDEN, content={\"detail\": f\"Origin '{origin}' is not allowed.\"}\n+        )\n+    response = await call_next(request)\n+    if origin:\n+        response.headers[\"Access-Control-Allow-Origin\"] = origin\n+    if not (\n+        request.url.path.endswith(\"/docs\")\n+        or request.url.path.endswith(\"/redoc\")\n+        or request.url.path.endswith(\"/openapi.json\")\n+    ):\n+        response.headers[\"Content-Security-Policy\"] = \"default-src 'none'\"\n+    response.headers[\"Cache-Control\"] = \"no-store, no-cache, must-revalidate\"",
        "comment_created_at": "2025-06-28T04:41:52+00:00",
        "comment_author": "krrishdholakia",
        "comment_body": "why set all these headers? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2228135164",
        "repo_full_name": "BerriAI/litellm",
        "pr_number": 11744,
        "pr_file": "litellm/proxy/proxy_server.py",
        "discussion_id": "2173121251",
        "commented_code": "@@ -833,6 +834,35 @@ async def openai_exception_handler(request: Request, exc: ProxyException):\n     allow_methods=[\"*\"],\n     allow_headers=[\"*\"],\n )\n+@app.middleware(\"http\")\n+async def add_headers(request: Request, call_next: Callable[[Request], Awaitable[Response]]) -> Response:\n+    origin = request.headers.get(\"origin\")\n+    if origin and origin not in origins:\n+        return JSONResponse(\n+            status_code=status.HTTP_403_FORBIDDEN, content={\"detail\": f\"Origin '{origin}' is not allowed.\"}\n+        )\n+    response = await call_next(request)\n+    if origin:\n+        response.headers[\"Access-Control-Allow-Origin\"] = origin\n+    if not (\n+        request.url.path.endswith(\"/docs\")\n+        or request.url.path.endswith(\"/redoc\")\n+        or request.url.path.endswith(\"/openapi.json\")\n+    ):\n+        response.headers[\"Content-Security-Policy\"] = \"default-src 'none'\"\n+    response.headers[\"Cache-Control\"] = \"no-store, no-cache, must-revalidate\"",
        "comment_created_at": "2025-07-24T10:35:14+00:00",
        "comment_author": "satendrakumar",
        "comment_body": "Hi @krrishdholakia \r\nI\u2019ve removed the headers from the code and moved them to environment variables.\r\n\r\nThese security headers are typically required in financial institutions to comply with regulatory standards.\r\n\r\nWould it make sense to keep them configurable via ENV variables, so users can enable them if needed?\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2188416915",
    "pr_number": 12278,
    "pr_file": "litellm/llms/anthropic/experimental_pass_through/adapters/transformation.py",
    "created_at": "2025-07-06T15:49:16+00:00",
    "commented_code": "if \"metadata\" in anthropic_message_request:\n             metadata = anthropic_message_request[\"metadata\"]\n             if metadata and \"user_id\" in metadata:\n-                new_kwargs[\"user\"] = metadata[\"user_id\"]\n+                # Only pass user_id if it's valid (not an email or phone number)\n+                if _valid_user_id(metadata[\"user_id\"]):",
    "repo_full_name": "BerriAI/litellm",
    "discussion_comments": [
      {
        "comment_id": "2188416915",
        "repo_full_name": "BerriAI/litellm",
        "pr_number": 12278,
        "pr_file": "litellm/llms/anthropic/experimental_pass_through/adapters/transformation.py",
        "discussion_id": "2188416915",
        "commented_code": "@@ -349,7 +350,9 @@ def translate_anthropic_to_openai(\n         if \"metadata\" in anthropic_message_request:\n             metadata = anthropic_message_request[\"metadata\"]\n             if metadata and \"user_id\" in metadata:\n-                new_kwargs[\"user\"] = metadata[\"user_id\"]\n+                # Only pass user_id if it's valid (not an email or phone number)\n+                if _valid_user_id(metadata[\"user_id\"]):",
        "comment_created_at": "2025-07-06T15:49:16+00:00",
        "comment_author": "krrishdholakia",
        "comment_body": "Why add this on the anthropic to openai bridge?\n\nI don't think openai has the same restrictions",
        "pr_file_module": null
      },
      {
        "comment_id": "2188535239",
        "repo_full_name": "BerriAI/litellm",
        "pr_number": 12278,
        "pr_file": "litellm/llms/anthropic/experimental_pass_through/adapters/transformation.py",
        "discussion_id": "2188416915",
        "commented_code": "@@ -349,7 +350,9 @@ def translate_anthropic_to_openai(\n         if \"metadata\" in anthropic_message_request:\n             metadata = anthropic_message_request[\"metadata\"]\n             if metadata and \"user_id\" in metadata:\n-                new_kwargs[\"user\"] = metadata[\"user_id\"]\n+                # Only pass user_id if it's valid (not an email or phone number)\n+                if _valid_user_id(metadata[\"user_id\"]):",
        "comment_created_at": "2025-07-06T19:42:29+00:00",
        "comment_author": "raz-alon",
        "comment_body": "@krrishdholakia After build the entire image locally and test it out e2e, with this changes, this one blocks me. It pass the user_id even if it was invalid and continue the process with broken user_id (because it's included in kwargs and pass through).  Without it we will gets the same error with 400 bad req from Antropic",
        "pr_file_module": null
      }
    ]
  }
]