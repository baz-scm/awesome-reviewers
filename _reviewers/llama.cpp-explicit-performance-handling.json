[
  {
    "discussion_id": "2190427658",
    "pr_number": 14392,
    "pr_file": "scripts/compare-llama-bench.py",
    "created_at": "2025-07-07T15:38:29+00:00",
    "commented_code": "\"INTEGER\", \"INTEGER\", \"INTEGER\", \"INTEGER\", \"INTEGER\", \"INTEGER\",\n     \"TEXT\",    \"INTEGER\", \"INTEGER\", \"REAL\",    \"REAL\",\n ]\n-assert len(DB_FIELDS) == len(DB_TYPES)\n \n-# Properties by which to differentiate results per commit:\n-KEY_PROPERTIES = [\n+# All test-backend-ops SQL fields\n+TEST_BACKEND_OPS_DB_FIELDS = [\n+    \"test_time\", \"build_commit\", \"backend_name\",  \"op_name\", \"op_params\", \"test_mode\",\n+    \"supported\", \"passed\",       \"error_message\", \"time_us\", \"flops\",     \"bandwidth_gb_s\",\n+    \"memory_kb\", \"n_runs\"\n+]\n+\n+TEST_BACKEND_OPS_DB_TYPES = [\n+    \"TEXT\",    \"TEXT\",    \"TEXT\", \"TEXT\", \"TEXT\", \"TEXT\",\n+    \"INTEGER\", \"INTEGER\", \"TEXT\", \"REAL\", \"REAL\", \"REAL\",\n+    \"INTEGER\", \"INTEGER\"\n+]\n+\n+# Legacy aliases for backward compatibility\n+DB_FIELDS = LLAMA_BENCH_DB_FIELDS\n+DB_TYPES = LLAMA_BENCH_DB_TYPES\n+\n+assert len(LLAMA_BENCH_DB_FIELDS) == len(LLAMA_BENCH_DB_TYPES)\n+assert len(TEST_BACKEND_OPS_DB_FIELDS) == len(TEST_BACKEND_OPS_DB_TYPES)\n+\n+# Properties by which to differentiate results per commit for llama-bench:\n+LLAMA_BENCH_KEY_PROPERTIES = [\n     \"cpu_info\", \"gpu_info\", \"backends\", \"n_gpu_layers\", \"tensor_buft_overrides\", \"model_filename\", \"model_type\",\n     \"n_batch\", \"n_ubatch\", \"embeddings\", \"cpu_mask\", \"cpu_strict\", \"poll\", \"n_threads\", \"type_k\", \"type_v\",\n     \"use_mmap\", \"no_kv_offload\", \"split_mode\", \"main_gpu\", \"tensor_split\", \"flash_attn\", \"n_prompt\", \"n_gen\", \"n_depth\"\n ]\n \n-# Properties that are boolean and are converted to Yes/No for the table:\n-BOOL_PROPERTIES = [\"embeddings\", \"cpu_strict\", \"use_mmap\", \"no_kv_offload\", \"flash_attn\"]\n+# Properties by which to differentiate results per commit for test-backend-ops:\n+TEST_BACKEND_OPS_KEY_PROPERTIES = [\n+    \"backend_name\", \"op_name\", \"op_params\", \"test_mode\"\n+]\n+\n+# Legacy alias for backward compatibility\n+KEY_PROPERTIES = LLAMA_BENCH_KEY_PROPERTIES\n \n-# Header names for the table:\n-PRETTY_NAMES = {\n+# Properties that are boolean and are converted to Yes/No for the table (llama-bench):\n+LLAMA_BENCH_BOOL_PROPERTIES = [\"embeddings\", \"cpu_strict\", \"use_mmap\", \"no_kv_offload\", \"flash_attn\"]\n+\n+# Properties that are boolean and are converted to Yes/No for the table (test-backend-ops):\n+TEST_BACKEND_OPS_BOOL_PROPERTIES = [\"supported\", \"passed\"]\n+\n+# Legacy alias for backward compatibility\n+BOOL_PROPERTIES = LLAMA_BENCH_BOOL_PROPERTIES",
    "repo_full_name": "ggml-org/llama.cpp",
    "discussion_comments": [
      {
        "comment_id": "2190427658",
        "repo_full_name": "ggml-org/llama.cpp",
        "pr_number": 14392,
        "pr_file": "scripts/compare-llama-bench.py",
        "discussion_id": "2190427658",
        "commented_code": "@@ -42,20 +42,53 @@\n     \"INTEGER\", \"INTEGER\", \"INTEGER\", \"INTEGER\", \"INTEGER\", \"INTEGER\",\n     \"TEXT\",    \"INTEGER\", \"INTEGER\", \"REAL\",    \"REAL\",\n ]\n-assert len(DB_FIELDS) == len(DB_TYPES)\n \n-# Properties by which to differentiate results per commit:\n-KEY_PROPERTIES = [\n+# All test-backend-ops SQL fields\n+TEST_BACKEND_OPS_DB_FIELDS = [\n+    \"test_time\", \"build_commit\", \"backend_name\",  \"op_name\", \"op_params\", \"test_mode\",\n+    \"supported\", \"passed\",       \"error_message\", \"time_us\", \"flops\",     \"bandwidth_gb_s\",\n+    \"memory_kb\", \"n_runs\"\n+]\n+\n+TEST_BACKEND_OPS_DB_TYPES = [\n+    \"TEXT\",    \"TEXT\",    \"TEXT\", \"TEXT\", \"TEXT\", \"TEXT\",\n+    \"INTEGER\", \"INTEGER\", \"TEXT\", \"REAL\", \"REAL\", \"REAL\",\n+    \"INTEGER\", \"INTEGER\"\n+]\n+\n+# Legacy aliases for backward compatibility\n+DB_FIELDS = LLAMA_BENCH_DB_FIELDS\n+DB_TYPES = LLAMA_BENCH_DB_TYPES\n+\n+assert len(LLAMA_BENCH_DB_FIELDS) == len(LLAMA_BENCH_DB_TYPES)\n+assert len(TEST_BACKEND_OPS_DB_FIELDS) == len(TEST_BACKEND_OPS_DB_TYPES)\n+\n+# Properties by which to differentiate results per commit for llama-bench:\n+LLAMA_BENCH_KEY_PROPERTIES = [\n     \"cpu_info\", \"gpu_info\", \"backends\", \"n_gpu_layers\", \"tensor_buft_overrides\", \"model_filename\", \"model_type\",\n     \"n_batch\", \"n_ubatch\", \"embeddings\", \"cpu_mask\", \"cpu_strict\", \"poll\", \"n_threads\", \"type_k\", \"type_v\",\n     \"use_mmap\", \"no_kv_offload\", \"split_mode\", \"main_gpu\", \"tensor_split\", \"flash_attn\", \"n_prompt\", \"n_gen\", \"n_depth\"\n ]\n \n-# Properties that are boolean and are converted to Yes/No for the table:\n-BOOL_PROPERTIES = [\"embeddings\", \"cpu_strict\", \"use_mmap\", \"no_kv_offload\", \"flash_attn\"]\n+# Properties by which to differentiate results per commit for test-backend-ops:\n+TEST_BACKEND_OPS_KEY_PROPERTIES = [\n+    \"backend_name\", \"op_name\", \"op_params\", \"test_mode\"\n+]\n+\n+# Legacy alias for backward compatibility\n+KEY_PROPERTIES = LLAMA_BENCH_KEY_PROPERTIES\n \n-# Header names for the table:\n-PRETTY_NAMES = {\n+# Properties that are boolean and are converted to Yes/No for the table (llama-bench):\n+LLAMA_BENCH_BOOL_PROPERTIES = [\"embeddings\", \"cpu_strict\", \"use_mmap\", \"no_kv_offload\", \"flash_attn\"]\n+\n+# Properties that are boolean and are converted to Yes/No for the table (test-backend-ops):\n+TEST_BACKEND_OPS_BOOL_PROPERTIES = [\"supported\", \"passed\"]\n+\n+# Legacy alias for backward compatibility\n+BOOL_PROPERTIES = LLAMA_BENCH_BOOL_PROPERTIES",
        "comment_created_at": "2025-07-07T15:38:29+00:00",
        "comment_author": "JohannesGaessler",
        "comment_body": "```suggestion\r\n# Properties that are boolean and are converted to Yes/No for the table:\r\nLLAMA_BENCH_BOOL_PROPERTIES = [\"embeddings\", \"cpu_strict\", \"use_mmap\", \"no_kv_offload\", \"flash_attn\"]\r\nTEST_BACKEND_OPS_BOOL_PROPERTIES = [\"supported\", \"passed\"]\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2163793651",
    "pr_number": 14354,
    "pr_file": "scripts/compare-test-backend-ops-perf.py",
    "created_at": "2025-06-24T12:08:53+00:00",
    "commented_code": "+#!/usr/bin/env python3\n+\n+import argparse\n+import logging\n+import re\n+import sys\n+from pathlib import Path\n+\n+# Set up logging\n+logger = logging.getLogger(__name__)\n+logging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n+\n+\n+def parse_benchmark_line(line: str):\n+    \"\"\"\n+    Parses a single line of benchmark output.\n+\n+    Example line:\n+    MUL_MAT(...): 744 runs - 1660.11 us/run - 134.48 MFLOP/run - 81.01 GFLOPS\n+\n+    Returns a tuple of (key, gflops) or (None, None) if parsing fails.\n+    \"\"\"\n+    line = line.strip()\n+    if \":\" not in line:\n+        return None, None\n+\n+    key, data_part = line.split(\":\", 1)\n+    key = key.strip()\n+\n+    # Remove ANSI color codes from the data part\n+    data_part = re.sub(r\"\\x1b\\[[0-9;]*m\", \"\", data_part)\n+\n+    # Find the last number and unit in the data part\n+    match = re.search(r\"([\\d\\.]+)\\s+(GFLOPS|TFLOPS|MFLOPS)\\s*$\", data_part.strip())\n+    if not match:\n+        return None, None\n+\n+    value_str, unit = match.groups()\n+    value = float(value_str)\n+\n+    # Normalize everything to GFLOPS\n+    if unit == \"TFLOPS\":\n+        gflops = value * 1000\n+    elif unit == \"MFLOPS\":\n+        gflops = value / 1000\n+    else:  # GFLOPS\n+        gflops = value",
    "repo_full_name": "ggml-org/llama.cpp",
    "discussion_comments": [
      {
        "comment_id": "2163793651",
        "repo_full_name": "ggml-org/llama.cpp",
        "pr_number": 14354,
        "pr_file": "scripts/compare-test-backend-ops-perf.py",
        "discussion_id": "2163793651",
        "commented_code": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python3\n+\n+import argparse\n+import logging\n+import re\n+import sys\n+from pathlib import Path\n+\n+# Set up logging\n+logger = logging.getLogger(__name__)\n+logging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n+\n+\n+def parse_benchmark_line(line: str):\n+    \"\"\"\n+    Parses a single line of benchmark output.\n+\n+    Example line:\n+    MUL_MAT(...): 744 runs - 1660.11 us/run - 134.48 MFLOP/run - 81.01 GFLOPS\n+\n+    Returns a tuple of (key, gflops) or (None, None) if parsing fails.\n+    \"\"\"\n+    line = line.strip()\n+    if \":\" not in line:\n+        return None, None\n+\n+    key, data_part = line.split(\":\", 1)\n+    key = key.strip()\n+\n+    # Remove ANSI color codes from the data part\n+    data_part = re.sub(r\"\\x1b\\[[0-9;]*m\", \"\", data_part)\n+\n+    # Find the last number and unit in the data part\n+    match = re.search(r\"([\\d\\.]+)\\s+(GFLOPS|TFLOPS|MFLOPS)\\s*$\", data_part.strip())\n+    if not match:\n+        return None, None\n+\n+    value_str, unit = match.groups()\n+    value = float(value_str)\n+\n+    # Normalize everything to GFLOPS\n+    if unit == \"TFLOPS\":\n+        gflops = value * 1000\n+    elif unit == \"MFLOPS\":\n+        gflops = value / 1000\n+    else:  # GFLOPS\n+        gflops = value",
        "comment_created_at": "2025-06-24T12:08:53+00:00",
        "comment_author": "JohannesGaessler",
        "comment_body": "```suggestion\r\n    elif unit == \"GFLOPS\":\r\n        gflops = value\r\n    else:\r\n        assert False\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2165215436",
        "repo_full_name": "ggml-org/llama.cpp",
        "pr_number": 14354,
        "pr_file": "scripts/compare-test-backend-ops-perf.py",
        "discussion_id": "2163793651",
        "commented_code": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python3\n+\n+import argparse\n+import logging\n+import re\n+import sys\n+from pathlib import Path\n+\n+# Set up logging\n+logger = logging.getLogger(__name__)\n+logging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n+\n+\n+def parse_benchmark_line(line: str):\n+    \"\"\"\n+    Parses a single line of benchmark output.\n+\n+    Example line:\n+    MUL_MAT(...): 744 runs - 1660.11 us/run - 134.48 MFLOP/run - 81.01 GFLOPS\n+\n+    Returns a tuple of (key, gflops) or (None, None) if parsing fails.\n+    \"\"\"\n+    line = line.strip()\n+    if \":\" not in line:\n+        return None, None\n+\n+    key, data_part = line.split(\":\", 1)\n+    key = key.strip()\n+\n+    # Remove ANSI color codes from the data part\n+    data_part = re.sub(r\"\\x1b\\[[0-9;]*m\", \"\", data_part)\n+\n+    # Find the last number and unit in the data part\n+    match = re.search(r\"([\\d\\.]+)\\s+(GFLOPS|TFLOPS|MFLOPS)\\s*$\", data_part.strip())\n+    if not match:\n+        return None, None\n+\n+    value_str, unit = match.groups()\n+    value = float(value_str)\n+\n+    # Normalize everything to GFLOPS\n+    if unit == \"TFLOPS\":\n+        gflops = value * 1000\n+    elif unit == \"MFLOPS\":\n+        gflops = value / 1000\n+    else:  # GFLOPS\n+        gflops = value",
        "comment_created_at": "2025-06-25T00:46:44+00:00",
        "comment_author": "yeahdongcn",
        "comment_body": "Updated.",
        "pr_file_module": null
      }
    ]
  }
]