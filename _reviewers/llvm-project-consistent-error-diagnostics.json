[
  {
    "discussion_id": "2093858308",
    "pr_number": 140282,
    "pr_file": "clang/include/clang/Basic/DiagnosticSemaKinds.td",
    "created_at": "2025-05-17T03:07:56+00:00",
    "commented_code": "\"types with 'sycl_special_class' attribute must have one and only one '__init' \"\n   \"method defined\">;\n \n+//SYCL external attribute diagnostics\n+def err_sycl_attribute_internal_decl\n+    : Error<\"%0 attribute cannot be applied to a %select{function|variable}1\"\n+            \" without external linkage\">;",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2093858308",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 140282,
        "pr_file": "clang/include/clang/Basic/DiagnosticSemaKinds.td",
        "discussion_id": "2093858308",
        "commented_code": "@@ -12746,6 +12746,11 @@ def err_sycl_special_type_num_init_method : Error<\n   \"types with 'sycl_special_class' attribute must have one and only one '__init' \"\n   \"method defined\">;\n \n+//SYCL external attribute diagnostics\n+def err_sycl_attribute_internal_decl\n+    : Error<\"%0 attribute cannot be applied to a %select{function|variable}1\"\n+            \" without external linkage\">;",
        "comment_created_at": "2025-05-17T03:07:56+00:00",
        "comment_author": "tahonermann",
        "comment_body": "The only other uses of this diagnostic in downstream Intel repositories are for Intel extensions, so I don't think we need a generalized diagnostic.\r\n\r\nThe SYCL 2020 specification doesn't support use of the `SYCL_EXTERNAL` macro with variables, so we don't need to support that (if we need such an extension, we might want to introduce a different attribute for it later).\r\n\r\nThe suggested change below includes renaming, removal of applicability to variables, rephrasing inspired from `err_attribute_selectany_non_extern_data`, and style changes to match other nearby declarations.\r\n```suggestion\r\ndef err_sycl_external_invalid_linkage : Error<\r\n  \"'sycl_external' can only be applied to functions with external linkage\">;\r\n```\r\n\r\nWe'll eventually need to add diagnostics for at least the following scenarios as indicated in the SYCL 2020 specification in section [5.10.1](https://registry.khronos.org/SYCL/specs/sycl-2020/html/sycl-2020.html#subsec:syclexternal). I haven't checked whether diagnostics are already present in downstream Intel report. For scenarios that are straight forward to diagnose, we should add diagnostics now. For others, we need to ensure we file an issue or somehow track adding diagnostics later. Ideally, we would add tests for each of these now with appropriate FIXME annotations as needed.\r\n- The `sycl_external` attribute must be present on the first declaration of a function and may optionally be present on subsequent declarations.\r\n- If the device target does not support the generic address space, then functions declared with `sycl_external` cannot have parameter types or a return type that involves a raw pointer.\r\n- Functions declared with `sycl_external` cannot call `group::parallel_for_work_item()`.\r\n- Functions declared with `sycl_external` cannot be called from a `parallel_for_work_group` scope.",
        "pr_file_module": null
      },
      {
        "comment_id": "2138283949",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 140282,
        "pr_file": "clang/include/clang/Basic/DiagnosticSemaKinds.td",
        "discussion_id": "2093858308",
        "commented_code": "@@ -12746,6 +12746,11 @@ def err_sycl_special_type_num_init_method : Error<\n   \"types with 'sycl_special_class' attribute must have one and only one '__init' \"\n   \"method defined\">;\n \n+//SYCL external attribute diagnostics\n+def err_sycl_attribute_internal_decl\n+    : Error<\"%0 attribute cannot be applied to a %select{function|variable}1\"\n+            \" without external linkage\">;",
        "comment_created_at": "2025-06-10T16:02:56+00:00",
        "comment_author": "schittir",
        "comment_body": "Planning to address this and add missing diagnostics in a subsequent PR. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2148812430",
    "pr_number": 140282,
    "pr_file": "clang/include/clang/Basic/Attr.td",
    "created_at": "2025-06-15T20:02:14+00:00",
    "commented_code": "}];\n }\n \n+def SYCLExternal : InheritableAttr {\n+  let Spellings = [Clang<\"sycl_external\">];\n+  let Subjects = SubjectList<[Function]>;",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2148812430",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 140282,
        "pr_file": "clang/include/clang/Basic/Attr.td",
        "discussion_id": "2148812430",
        "commented_code": "@@ -1621,6 +1621,13 @@ def DeviceKernel : DeclOrTypeAttr {\n }];\n }\n \n+def SYCLExternal : InheritableAttr {\n+  let Spellings = [Clang<\"sycl_external\">];\n+  let Subjects = SubjectList<[Function]>;",
        "comment_created_at": "2025-06-15T20:02:14+00:00",
        "comment_author": "tahonermann",
        "comment_body": "Error diagnostics are explicitly requested for many other attributes including `sycl_kernel_entry_point`. I think the default is to emit a warning if an attribute is used with an entity for which it does not appertain; we should be consistent.\r\n```suggestion\r\n  let Subjects = SubjectList<[Function], ErrorDiag>;\r\n```",
        "pr_file_module": null
      }
    ]
  }
]