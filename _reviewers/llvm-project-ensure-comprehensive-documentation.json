[
  {
    "discussion_id": "2157555288",
    "pr_number": 140282,
    "pr_file": "clang/include/clang/Basic/AttrDocs.td",
    "created_at": "2025-06-19T19:25:55+00:00",
    "commented_code": "}];\n }\n \n+def SYCLExternalDocs : Documentation {\n+  let Category = DocCatFunction;\n+  let Heading = \"sycl_external\";\n+  let Content = [{\n+The ``sycl_external`` attribute indicates that a function defined in another\n+translation unit may be called by a device function defined in the current\n+translation unit or, if defined in the current translation unit, the function\n+may be called by device functions defined in other translation units.\n+The attribute is intended for use in the implementation of the ``SYCL_EXTERNAL``\n+macro as specified in section 5.10.1, \"SYCL functions and member functions\n+linkage\", of the SYCL 2020 specification.\n+The attribute only appertains to functions and only those that meet the\n+following requirements.\n+* Has external linkage.\n+* Is not explicitly defined as deleted (the function may be an explicitly\n+  defaulted function that is defined as deleted).\n+The attribute shall be present on the first declaration of a function and\n+may optionally be present on subsequent declarations.\n+When compiling for a SYCL device target that does not support the generic\n+address space, the function shall not specify a raw pointer or reference type\n+as the return type or as a parameter type.\n+See section 5.9, \"Address-space deduction\", of the SYCL 2020 specification.\n+The following examples demonstrate the use of this attribute:\n+\n+.. code-block:: c++\n+\n+[[clang::sycl_external]] void Foo();\n+\n+[[clang::sycl_external]] void Bar() { /* ... */ }\n+\n+[[clang::sycl_external]] extern void Baz();\n+",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2157555288",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 140282,
        "pr_file": "clang/include/clang/Basic/AttrDocs.td",
        "discussion_id": "2157555288",
        "commented_code": "@@ -476,6 +476,41 @@ The SYCL kernel in the previous code sample meets these expectations.\n   }];\n }\n \n+def SYCLExternalDocs : Documentation {\n+  let Category = DocCatFunction;\n+  let Heading = \"sycl_external\";\n+  let Content = [{\n+The ``sycl_external`` attribute indicates that a function defined in another\n+translation unit may be called by a device function defined in the current\n+translation unit or, if defined in the current translation unit, the function\n+may be called by device functions defined in other translation units.\n+The attribute is intended for use in the implementation of the ``SYCL_EXTERNAL``\n+macro as specified in section 5.10.1, \"SYCL functions and member functions\n+linkage\", of the SYCL 2020 specification.\n+The attribute only appertains to functions and only those that meet the\n+following requirements.\n+* Has external linkage.\n+* Is not explicitly defined as deleted (the function may be an explicitly\n+  defaulted function that is defined as deleted).\n+The attribute shall be present on the first declaration of a function and\n+may optionally be present on subsequent declarations.\n+When compiling for a SYCL device target that does not support the generic\n+address space, the function shall not specify a raw pointer or reference type\n+as the return type or as a parameter type.\n+See section 5.9, \"Address-space deduction\", of the SYCL 2020 specification.\n+The following examples demonstrate the use of this attribute:\n+\n+.. code-block:: c++\n+\n+[[clang::sycl_external]] void Foo();\n+\n+[[clang::sycl_external]] void Bar() { /* ... */ }\n+\n+[[clang::sycl_external]] extern void Baz();\n+",
        "comment_created_at": "2025-06-19T19:25:55+00:00",
        "comment_author": "tahonermann",
        "comment_body": "I'm not sure, but I think the code needs to be indented to match the \"..\" from the code-block. I think an additional example to illustrate the external linkage requirement would be useful too.\r\n```suggestion\r\n  [[clang::sycl_external]] void Foo(); // Ok.\r\n\r\n  [[clang::sycl_external]] void Bar() { /* ... */ } // Ok.\r\n\r\n  [[clang::sycl_external]] extern void Baz(); // Ok.\r\n\r\n  [[clang::sycl_external]] static void Quux() { /* ... */ } // error:  Quux() has internal linkage.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1961769445",
    "pr_number": 126088,
    "pr_file": "clang/include/clang/Sema/Sema.h",
    "created_at": "2025-02-19T14:19:19+00:00",
    "commented_code": "bool PartialOrdering,\n                                      bool *StrictPackMatch);\n \n+  SmallString<128> toTerseString(const NamedDecl &D) const;",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "1961769445",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 126088,
        "pr_file": "clang/include/clang/Sema/Sema.h",
        "discussion_id": "1961769445",
        "commented_code": "@@ -11802,9 +11817,10 @@ class Sema final : public SemaBase {\n                                      bool PartialOrdering,\n                                      bool *StrictPackMatch);\n \n+  SmallString<128> toTerseString(const NamedDecl &D) const;",
        "comment_created_at": "2025-02-19T14:19:19+00:00",
        "comment_author": "erichkeane",
        "comment_body": "would love a comment that tells what 'terse string' means here.  'terse' is actually a pretty loaded word in C++, so explainations need to be pretty sizable here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1963377912",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 126088,
        "pr_file": "clang/include/clang/Sema/Sema.h",
        "discussion_id": "1961769445",
        "commented_code": "@@ -11802,9 +11817,10 @@ class Sema final : public SemaBase {\n                                      bool PartialOrdering,\n                                      bool *StrictPackMatch);\n \n+  SmallString<128> toTerseString(const NamedDecl &D) const;",
        "comment_created_at": "2025-02-20T11:13:20+00:00",
        "comment_author": "cor3ntin",
        "comment_body": "Given this is used 2 times, i wonder if it's actually useful. especially in Sema.\r\nIf we really think we need thar, I'd rather have it be a new overload of Decl::print, or `Decl::printTerse` or something like that",
        "pr_file_module": null
      },
      {
        "comment_id": "1964034437",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 126088,
        "pr_file": "clang/include/clang/Sema/Sema.h",
        "discussion_id": "1961769445",
        "commented_code": "@@ -11802,9 +11817,10 @@ class Sema final : public SemaBase {\n                                      bool PartialOrdering,\n                                      bool *StrictPackMatch);\n \n+  SmallString<128> toTerseString(const NamedDecl &D) const;",
        "comment_created_at": "2025-02-20T17:12:02+00:00",
        "comment_author": "mizvekov",
        "comment_body": "Added comment.\r\n\r\nThe helper is still useful as it returns a string we can pass directly to diagnostic engine, versus a print overload which should operate on streams, as otherwise it would be a bit user hostile for print to mean two different things.\r\n\r\nI believe this helper will be temporary as I will remove its other user in a future patch.",
        "pr_file_module": null
      }
    ]
  }
]