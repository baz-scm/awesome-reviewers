[
  {
    "discussion_id": "2232153330",
    "pr_number": 148948,
    "pr_file": "libc/src/__support/threads/linux/barrier.h",
    "created_at": "2025-07-25T23:02:30+00:00",
    "commented_code": "+//===-- A platform independent abstraction layer for barriers --*- C++ -*-===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef LLVM_LIBC___SUPPORT_SRC_THREADS_LINUX_BARRIER_H\n+#define LLVM_LIBC___SUPPORT_SRC_THREADS_LINUX_BARRIER_H\n+\n+#include \"hdr/pthread_macros.h\"\n+#include \"include/llvm-libc-types/pthread_barrier_t.h\"\n+#include \"include/llvm-libc-types/pthread_barrierattr_t.h\"\n+#include \"src/__support/threads/CndVar.h\"\n+#include \"src/__support/threads/mutex.h\"\n+\n+namespace LIBC_NAMESPACE_DECL {\n+\n+// NOTE: if the size of this class changes, you must ensure that the size of\n+// pthread_barrier_t (found in include/llvm-libc/types/pthread_barrier_t.h) is\n+// the same size\n+class Barrier {\n+private:\n+  unsigned expected;\n+  unsigned waiting;\n+  bool blocking;\n+  CndVar entering;\n+  CndVar exiting;\n+  Mutex m;\n+\n+public:\n+  static int init(Barrier *b, const pthread_barrierattr_t *attr,\n+                  unsigned count);\n+  static int destroy(Barrier *b);\n+  int wait();\n+};\n+\n+static_assert(\n+    sizeof(Barrier) <= sizeof(pthread_barrier_t),\n+    \"The public pthread_barrier_t type cannot accommodate the internal \"\n+    \"barrier type.\");",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2232153330",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 148948,
        "pr_file": "libc/src/__support/threads/linux/barrier.h",
        "discussion_id": "2232153330",
        "commented_code": "@@ -0,0 +1,50 @@\n+//===-- A platform independent abstraction layer for barriers --*- C++ -*-===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef LLVM_LIBC___SUPPORT_SRC_THREADS_LINUX_BARRIER_H\n+#define LLVM_LIBC___SUPPORT_SRC_THREADS_LINUX_BARRIER_H\n+\n+#include \"hdr/pthread_macros.h\"\n+#include \"include/llvm-libc-types/pthread_barrier_t.h\"\n+#include \"include/llvm-libc-types/pthread_barrierattr_t.h\"\n+#include \"src/__support/threads/CndVar.h\"\n+#include \"src/__support/threads/mutex.h\"\n+\n+namespace LIBC_NAMESPACE_DECL {\n+\n+// NOTE: if the size of this class changes, you must ensure that the size of\n+// pthread_barrier_t (found in include/llvm-libc/types/pthread_barrier_t.h) is\n+// the same size\n+class Barrier {\n+private:\n+  unsigned expected;\n+  unsigned waiting;\n+  bool blocking;\n+  CndVar entering;\n+  CndVar exiting;\n+  Mutex m;\n+\n+public:\n+  static int init(Barrier *b, const pthread_barrierattr_t *attr,\n+                  unsigned count);\n+  static int destroy(Barrier *b);\n+  int wait();\n+};\n+\n+static_assert(\n+    sizeof(Barrier) <= sizeof(pthread_barrier_t),\n+    \"The public pthread_barrier_t type cannot accommodate the internal \"\n+    \"barrier type.\");",
        "comment_created_at": "2025-07-25T23:02:30+00:00",
        "comment_author": "michaelrj-google",
        "comment_body": "since you're casting between these types, you should probably assert that they are equal.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2228008157",
    "pr_number": 150143,
    "pr_file": "lldb/source/Plugins/Process/wasm/ProcessWasm.h",
    "created_at": "2025-07-24T09:40:20+00:00",
    "commented_code": "+//===----------------------------------------------------------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+#define LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+\n+#include \"Plugins/Process/gdb-remote/ProcessGDBRemote.h\"\n+\n+namespace lldb_private {\n+namespace wasm {\n+\n+/// Each WebAssembly module has separated address spaces for Code and Memory.\n+/// A WebAssembly module also has a Data section which, when the module is\n+/// loaded, gets mapped into a region in the module Memory.\n+enum WasmAddressType { Memory = 0x00, Object = 0x01, Invalid = 0x03 };",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2228008157",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150143,
        "pr_file": "lldb/source/Plugins/Process/wasm/ProcessWasm.h",
        "discussion_id": "2228008157",
        "commented_code": "@@ -0,0 +1,89 @@\n+//===----------------------------------------------------------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+#define LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+\n+#include \"Plugins/Process/gdb-remote/ProcessGDBRemote.h\"\n+\n+namespace lldb_private {\n+namespace wasm {\n+\n+/// Each WebAssembly module has separated address spaces for Code and Memory.\n+/// A WebAssembly module also has a Data section which, when the module is\n+/// loaded, gets mapped into a region in the module Memory.\n+enum WasmAddressType { Memory = 0x00, Object = 0x01, Invalid = 0x03 };",
        "comment_created_at": "2025-07-24T09:40:20+00:00",
        "comment_author": "DavidSpickett",
        "comment_body": "Why do we skip 2 here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2228083685",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150143,
        "pr_file": "lldb/source/Plugins/Process/wasm/ProcessWasm.h",
        "discussion_id": "2228008157",
        "commented_code": "@@ -0,0 +1,89 @@\n+//===----------------------------------------------------------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+#define LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+\n+#include \"Plugins/Process/gdb-remote/ProcessGDBRemote.h\"\n+\n+namespace lldb_private {\n+namespace wasm {\n+\n+/// Each WebAssembly module has separated address spaces for Code and Memory.\n+/// A WebAssembly module also has a Data section which, when the module is\n+/// loaded, gets mapped into a region in the module Memory.\n+enum WasmAddressType { Memory = 0x00, Object = 0x01, Invalid = 0x03 };",
        "comment_created_at": "2025-07-24T10:11:58+00:00",
        "comment_author": "DavidSpickett",
        "comment_body": "Also would it be better to add an explicit \"invalid\" for the unused value? Instead of \"if the cast results in weird out of range enum value then...\".",
        "pr_file_module": null
      },
      {
        "comment_id": "2235388976",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150143,
        "pr_file": "lldb/source/Plugins/Process/wasm/ProcessWasm.h",
        "discussion_id": "2228008157",
        "commented_code": "@@ -0,0 +1,89 @@\n+//===----------------------------------------------------------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+#define LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+\n+#include \"Plugins/Process/gdb-remote/ProcessGDBRemote.h\"\n+\n+namespace lldb_private {\n+namespace wasm {\n+\n+/// Each WebAssembly module has separated address spaces for Code and Memory.\n+/// A WebAssembly module also has a Data section which, when the module is\n+/// loaded, gets mapped into a region in the module Memory.\n+enum WasmAddressType { Memory = 0x00, Object = 0x01, Invalid = 0x03 };",
        "comment_created_at": "2025-07-28T08:49:43+00:00",
        "comment_author": "DavidSpickett",
        "comment_body": "Ping on this.",
        "pr_file_module": null
      },
      {
        "comment_id": "2236957485",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150143,
        "pr_file": "lldb/source/Plugins/Process/wasm/ProcessWasm.h",
        "discussion_id": "2228008157",
        "commented_code": "@@ -0,0 +1,89 @@\n+//===----------------------------------------------------------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+#define LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+\n+#include \"Plugins/Process/gdb-remote/ProcessGDBRemote.h\"\n+\n+namespace lldb_private {\n+namespace wasm {\n+\n+/// Each WebAssembly module has separated address spaces for Code and Memory.\n+/// A WebAssembly module also has a Data section which, when the module is\n+/// loaded, gets mapped into a region in the module Memory.\n+enum WasmAddressType { Memory = 0x00, Object = 0x01, Invalid = 0x03 };",
        "comment_created_at": "2025-07-28T15:28:58+00:00",
        "comment_author": "JDevlieghere",
        "comment_body": "There are only two valid types and `Invalid` is just an arbitrary value. I'll make it `0xff` so it stands out more. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2228008157",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150143,
        "pr_file": "lldb/source/Plugins/Process/wasm/ProcessWasm.h",
        "discussion_id": "2228008157",
        "commented_code": "@@ -0,0 +1,89 @@\n+//===----------------------------------------------------------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+#define LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+\n+#include \"Plugins/Process/gdb-remote/ProcessGDBRemote.h\"\n+\n+namespace lldb_private {\n+namespace wasm {\n+\n+/// Each WebAssembly module has separated address spaces for Code and Memory.\n+/// A WebAssembly module also has a Data section which, when the module is\n+/// loaded, gets mapped into a region in the module Memory.\n+enum WasmAddressType { Memory = 0x00, Object = 0x01, Invalid = 0x03 };",
        "comment_created_at": "2025-07-24T09:40:20+00:00",
        "comment_author": "DavidSpickett",
        "comment_body": "Why do we skip 2 here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2228083685",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150143,
        "pr_file": "lldb/source/Plugins/Process/wasm/ProcessWasm.h",
        "discussion_id": "2228008157",
        "commented_code": "@@ -0,0 +1,89 @@\n+//===----------------------------------------------------------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+#define LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+\n+#include \"Plugins/Process/gdb-remote/ProcessGDBRemote.h\"\n+\n+namespace lldb_private {\n+namespace wasm {\n+\n+/// Each WebAssembly module has separated address spaces for Code and Memory.\n+/// A WebAssembly module also has a Data section which, when the module is\n+/// loaded, gets mapped into a region in the module Memory.\n+enum WasmAddressType { Memory = 0x00, Object = 0x01, Invalid = 0x03 };",
        "comment_created_at": "2025-07-24T10:11:58+00:00",
        "comment_author": "DavidSpickett",
        "comment_body": "Also would it be better to add an explicit \"invalid\" for the unused value? Instead of \"if the cast results in weird out of range enum value then...\".",
        "pr_file_module": null
      },
      {
        "comment_id": "2235388976",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150143,
        "pr_file": "lldb/source/Plugins/Process/wasm/ProcessWasm.h",
        "discussion_id": "2228008157",
        "commented_code": "@@ -0,0 +1,89 @@\n+//===----------------------------------------------------------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+#define LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+\n+#include \"Plugins/Process/gdb-remote/ProcessGDBRemote.h\"\n+\n+namespace lldb_private {\n+namespace wasm {\n+\n+/// Each WebAssembly module has separated address spaces for Code and Memory.\n+/// A WebAssembly module also has a Data section which, when the module is\n+/// loaded, gets mapped into a region in the module Memory.\n+enum WasmAddressType { Memory = 0x00, Object = 0x01, Invalid = 0x03 };",
        "comment_created_at": "2025-07-28T08:49:43+00:00",
        "comment_author": "DavidSpickett",
        "comment_body": "Ping on this.",
        "pr_file_module": null
      },
      {
        "comment_id": "2236957485",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150143,
        "pr_file": "lldb/source/Plugins/Process/wasm/ProcessWasm.h",
        "discussion_id": "2228008157",
        "commented_code": "@@ -0,0 +1,89 @@\n+//===----------------------------------------------------------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+#define LLDB_SOURCE_PLUGINS_PROCESS_WASM_PROCESSWASM_H\n+\n+#include \"Plugins/Process/gdb-remote/ProcessGDBRemote.h\"\n+\n+namespace lldb_private {\n+namespace wasm {\n+\n+/// Each WebAssembly module has separated address spaces for Code and Memory.\n+/// A WebAssembly module also has a Data section which, when the module is\n+/// loaded, gets mapped into a region in the module Memory.\n+enum WasmAddressType { Memory = 0x00, Object = 0x01, Invalid = 0x03 };",
        "comment_created_at": "2025-07-28T15:28:58+00:00",
        "comment_author": "JDevlieghere",
        "comment_body": "There are only two valid types and `Invalid` is just an arbitrary value. I'll make it `0xff` so it stands out more. ",
        "pr_file_module": null
      }
    ]
  }
]