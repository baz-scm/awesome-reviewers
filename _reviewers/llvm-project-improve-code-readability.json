[
  {
    "discussion_id": "2219805242",
    "pr_number": 148278,
    "pr_file": "compiler-rt/lib/asan/scripts/asan_symbolize.py",
    "created_at": "2025-07-21T17:20:43+00:00",
    "commented_code": "assert result\n         return result\n \n-    def get_symbolized_lines(self, symbolized_lines, inc_frame_counter=True):\n+    def get_symbolized_lines(self, symbolized_lines):\n         if not symbolized_lines:\n-            if inc_frame_counter:\n-                self.frame_no += 1\n-            return [self.current_line]\n-        else:\n-            assert inc_frame_counter\n-            result = []\n-            for symbolized_frame in symbolized_lines:\n-                result.append(\n-                    \"    #%s %s\" % (str(self.frame_no), symbolized_frame.rstrip())\n+            # If it is an unparsable frame, but contains a frame counter and address\n+            # replace the frame counter so the stack is still consistent.\n+            unknown_stack_frame_format = r\"^( *#([0-9]+) +)(0x[0-9a-f]+) +.*\"\n+            match = re.match(unknown_stack_frame_format, self.current_line)\n+            if match:\n+                rewritten_line = (\n+                    self.current_line[: match.start(2)]\n+                    + str(self.frame_no)\n+                    + self.current_line[match.end(2) :]",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2219805242",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 148278,
        "pr_file": "compiler-rt/lib/asan/scripts/asan_symbolize.py",
        "discussion_id": "2219805242",
        "commented_code": "@@ -507,20 +507,29 @@ def symbolize_address(self, addr, binary, offset, arch):\n         assert result\n         return result\n \n-    def get_symbolized_lines(self, symbolized_lines, inc_frame_counter=True):\n+    def get_symbolized_lines(self, symbolized_lines):\n         if not symbolized_lines:\n-            if inc_frame_counter:\n-                self.frame_no += 1\n-            return [self.current_line]\n-        else:\n-            assert inc_frame_counter\n-            result = []\n-            for symbolized_frame in symbolized_lines:\n-                result.append(\n-                    \"    #%s %s\" % (str(self.frame_no), symbolized_frame.rstrip())\n+            # If it is an unparsable frame, but contains a frame counter and address\n+            # replace the frame counter so the stack is still consistent.\n+            unknown_stack_frame_format = r\"^( *#([0-9]+) +)(0x[0-9a-f]+) +.*\"\n+            match = re.match(unknown_stack_frame_format, self.current_line)\n+            if match:\n+                rewritten_line = (\n+                    self.current_line[: match.start(2)]\n+                    + str(self.frame_no)\n+                    + self.current_line[match.end(2) :]",
        "comment_created_at": "2025-07-21T17:20:43+00:00",
        "comment_author": "davidmrdavid",
        "comment_body": "dismissible nit, I would recommend introducing a variable for `match.start(2)`, to help with readability. The expression is already a bit complex, _in my opinion_.\n\n```python\n           if match:\n                # update the frame counter\n                frame_no_index = match.start(2)\n                rewritten_line= (\n                    self.current_line[: frame_no_index ]\n                    + str(self.frame_no)\n                    + self.current_line[frame_no_index  :]\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2220216986",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 148278,
        "pr_file": "compiler-rt/lib/asan/scripts/asan_symbolize.py",
        "discussion_id": "2219805242",
        "commented_code": "@@ -507,20 +507,29 @@ def symbolize_address(self, addr, binary, offset, arch):\n         assert result\n         return result\n \n-    def get_symbolized_lines(self, symbolized_lines, inc_frame_counter=True):\n+    def get_symbolized_lines(self, symbolized_lines):\n         if not symbolized_lines:\n-            if inc_frame_counter:\n-                self.frame_no += 1\n-            return [self.current_line]\n-        else:\n-            assert inc_frame_counter\n-            result = []\n-            for symbolized_frame in symbolized_lines:\n-                result.append(\n-                    \"    #%s %s\" % (str(self.frame_no), symbolized_frame.rstrip())\n+            # If it is an unparsable frame, but contains a frame counter and address\n+            # replace the frame counter so the stack is still consistent.\n+            unknown_stack_frame_format = r\"^( *#([0-9]+) +)(0x[0-9a-f]+) +.*\"\n+            match = re.match(unknown_stack_frame_format, self.current_line)\n+            if match:\n+                rewritten_line = (\n+                    self.current_line[: match.start(2)]\n+                    + str(self.frame_no)\n+                    + self.current_line[match.end(2) :]",
        "comment_created_at": "2025-07-21T20:17:59+00:00",
        "comment_author": "jschwartzentruber",
        "comment_body": "It would be better to use a named match group, so the calls would be `match.start(\"frame_no\")` and `match.end(\"frame_no\")`. This clutters the regex though, which is usually the harder bit to understand.",
        "pr_file_module": null
      },
      {
        "comment_id": "2220466577",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 148278,
        "pr_file": "compiler-rt/lib/asan/scripts/asan_symbolize.py",
        "discussion_id": "2219805242",
        "commented_code": "@@ -507,20 +507,29 @@ def symbolize_address(self, addr, binary, offset, arch):\n         assert result\n         return result\n \n-    def get_symbolized_lines(self, symbolized_lines, inc_frame_counter=True):\n+    def get_symbolized_lines(self, symbolized_lines):\n         if not symbolized_lines:\n-            if inc_frame_counter:\n-                self.frame_no += 1\n-            return [self.current_line]\n-        else:\n-            assert inc_frame_counter\n-            result = []\n-            for symbolized_frame in symbolized_lines:\n-                result.append(\n-                    \"    #%s %s\" % (str(self.frame_no), symbolized_frame.rstrip())\n+            # If it is an unparsable frame, but contains a frame counter and address\n+            # replace the frame counter so the stack is still consistent.\n+            unknown_stack_frame_format = r\"^( *#([0-9]+) +)(0x[0-9a-f]+) +.*\"\n+            match = re.match(unknown_stack_frame_format, self.current_line)\n+            if match:\n+                rewritten_line = (\n+                    self.current_line[: match.start(2)]\n+                    + str(self.frame_no)\n+                    + self.current_line[match.end(2) :]",
        "comment_created_at": "2025-07-21T22:13:28+00:00",
        "comment_author": "davidmrdavid",
        "comment_body": "No strong preference one way or another. Feel free to dismiss, just wanted to provide my 2 cents.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2233236243",
    "pr_number": 150791,
    "pr_file": "clang-tools-extra/test/clang-tidy/check_clang_tidy.py",
    "created_at": "2025-07-26T19:55:28+00:00",
    "commented_code": "parser.add_argument(\n         \"-std\",\n         type=csv,\n-        default=[\"c++11-or-later\"],\n+        default=None,\n         help=\"Passed to clang. Special -or-later values are expanded.\",\n     )\n     parser.add_argument(\n         \"--match-partial-fixes\",\n         action=\"store_true\",\n         help=\"allow partial line matches for fixes\",\n     )\n-    return parser.parse_known_args()\n+\n+    args, extra_args = parser.parse_known_args()\n+    if args.std is None:\n+        _, extension = os.path.splitext(args.assume_filename or args.input_file_name)\n+        args.std = (\n+            [\"c++11-or-later\"]\n+            if extension in [\".cpp\", \".hpp\", \".mm\"]\n+            else [\"c99-or-later\"]",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2233236243",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150791,
        "pr_file": "clang-tools-extra/test/clang-tidy/check_clang_tidy.py",
        "discussion_id": "2233236243",
        "commented_code": "@@ -374,15 +373,25 @@ def parse_arguments() -> Tuple[argparse.Namespace, List[str]]:\n     parser.add_argument(\n         \"-std\",\n         type=csv,\n-        default=[\"c++11-or-later\"],\n+        default=None,\n         help=\"Passed to clang. Special -or-later values are expanded.\",\n     )\n     parser.add_argument(\n         \"--match-partial-fixes\",\n         action=\"store_true\",\n         help=\"allow partial line matches for fixes\",\n     )\n-    return parser.parse_known_args()\n+\n+    args, extra_args = parser.parse_known_args()\n+    if args.std is None:\n+        _, extension = os.path.splitext(args.assume_filename or args.input_file_name)\n+        args.std = (\n+            [\"c++11-or-later\"]\n+            if extension in [\".cpp\", \".hpp\", \".mm\"]\n+            else [\"c99-or-later\"]",
        "comment_created_at": "2025-07-26T19:55:28+00:00",
        "comment_author": "vbvictor",
        "comment_body": "Could you please format python code with [black](https://github.com/psf/black). This part seems odd.\r\nhttps://llvm.org/docs/CodingStandards.html#python-version-and-source-code-formatting",
        "pr_file_module": null
      },
      {
        "comment_id": "2233658259",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150791,
        "pr_file": "clang-tools-extra/test/clang-tidy/check_clang_tidy.py",
        "discussion_id": "2233236243",
        "commented_code": "@@ -374,15 +373,25 @@ def parse_arguments() -> Tuple[argparse.Namespace, List[str]]:\n     parser.add_argument(\n         \"-std\",\n         type=csv,\n-        default=[\"c++11-or-later\"],\n+        default=None,\n         help=\"Passed to clang. Special -or-later values are expanded.\",\n     )\n     parser.add_argument(\n         \"--match-partial-fixes\",\n         action=\"store_true\",\n         help=\"allow partial line matches for fixes\",\n     )\n-    return parser.parse_known_args()\n+\n+    args, extra_args = parser.parse_known_args()\n+    if args.std is None:\n+        _, extension = os.path.splitext(args.assume_filename or args.input_file_name)\n+        args.std = (\n+            [\"c++11-or-later\"]\n+            if extension in [\".cpp\", \".hpp\", \".mm\"]\n+            else [\"c99-or-later\"]",
        "comment_created_at": "2025-07-27T04:28:16+00:00",
        "comment_author": "localspook",
        "comment_body": "That's just how black seems to format it \ud83e\udd14",
        "pr_file_module": null
      },
      {
        "comment_id": "2233694987",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150791,
        "pr_file": "clang-tools-extra/test/clang-tidy/check_clang_tidy.py",
        "discussion_id": "2233236243",
        "commented_code": "@@ -374,15 +373,25 @@ def parse_arguments() -> Tuple[argparse.Namespace, List[str]]:\n     parser.add_argument(\n         \"-std\",\n         type=csv,\n-        default=[\"c++11-or-later\"],\n+        default=None,\n         help=\"Passed to clang. Special -or-later values are expanded.\",\n     )\n     parser.add_argument(\n         \"--match-partial-fixes\",\n         action=\"store_true\",\n         help=\"allow partial line matches for fixes\",\n     )\n-    return parser.parse_known_args()\n+\n+    args, extra_args = parser.parse_known_args()\n+    if args.std is None:\n+        _, extension = os.path.splitext(args.assume_filename or args.input_file_name)\n+        args.std = (\n+            [\"c++11-or-later\"]\n+            if extension in [\".cpp\", \".hpp\", \".mm\"]\n+            else [\"c99-or-later\"]",
        "comment_created_at": "2025-07-27T05:08:42+00:00",
        "comment_author": "nicovank",
        "comment_body": "Maybe you think this is better.\r\n```python\r\nargs.std = [\r\n    \"c++11-or-later\" if extension in [\".cpp\", \".hpp\", \".mm\"] else \"c99-or-later\"\r\n]\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2233968276",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150791,
        "pr_file": "clang-tools-extra/test/clang-tidy/check_clang_tidy.py",
        "discussion_id": "2233236243",
        "commented_code": "@@ -374,15 +373,25 @@ def parse_arguments() -> Tuple[argparse.Namespace, List[str]]:\n     parser.add_argument(\n         \"-std\",\n         type=csv,\n-        default=[\"c++11-or-later\"],\n+        default=None,\n         help=\"Passed to clang. Special -or-later values are expanded.\",\n     )\n     parser.add_argument(\n         \"--match-partial-fixes\",\n         action=\"store_true\",\n         help=\"allow partial line matches for fixes\",\n     )\n-    return parser.parse_known_args()\n+\n+    args, extra_args = parser.parse_known_args()\n+    if args.std is None:\n+        _, extension = os.path.splitext(args.assume_filename or args.input_file_name)\n+        args.std = (\n+            [\"c++11-or-later\"]\n+            if extension in [\".cpp\", \".hpp\", \".mm\"]\n+            else [\"c99-or-later\"]",
        "comment_created_at": "2025-07-27T12:50:57+00:00",
        "comment_author": "vbvictor",
        "comment_body": "> Maybe you think this is better.\r\n> \r\n> ```python\r\n> args.std = [\r\n>     \"c++11-or-later\" if extension in [\".cpp\", \".hpp\", \".mm\"] else \"c99-or-later\"\r\n> ]\r\n> ```\r\n\r\nThis one is more readable IMO, if it passes formatting.",
        "pr_file_module": null
      }
    ]
  }
]