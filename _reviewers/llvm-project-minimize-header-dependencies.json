[
  {
    "discussion_id": "2211566093",
    "pr_number": 148013,
    "pr_file": "llvm/tools/llvm-profgen/PerfReader.h",
    "created_at": "2025-07-16T20:43:19+00:00",
    "commented_code": "// Entry of the reader to parse multiple perf traces\n   void parsePerfTraces() override;\n+\n+  // Parse a single line of a PERF_RECORD_MMAP event looking for a\n+  // mapping between the binary name and its memory layout.\n+  static bool extractMMapEventForBinary(ProfiledBinary *Binary, StringRef Line,",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2211566093",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 148013,
        "pr_file": "llvm/tools/llvm-profgen/PerfReader.h",
        "discussion_id": "2211566093",
        "commented_code": "@@ -598,6 +612,12 @@ class PerfScriptReader : public PerfReaderBase {\n \n   // Entry of the reader to parse multiple perf traces\n   void parsePerfTraces() override;\n+\n+  // Parse a single line of a PERF_RECORD_MMAP event looking for a\n+  // mapping between the binary name and its memory layout.\n+  static bool extractMMapEventForBinary(ProfiledBinary *Binary, StringRef Line,",
        "comment_created_at": "2025-07-16T20:43:19+00:00",
        "comment_author": "snehasish",
        "comment_body": "It's a bit strange to use a static method from the inherited class in the base class. Can you make this a base class method and update the usage? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2216957932",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 148013,
        "pr_file": "llvm/tools/llvm-profgen/PerfReader.h",
        "discussion_id": "2211566093",
        "commented_code": "@@ -598,6 +612,12 @@ class PerfScriptReader : public PerfReaderBase {\n \n   // Entry of the reader to parse multiple perf traces\n   void parsePerfTraces() override;\n+\n+  // Parse a single line of a PERF_RECORD_MMAP event looking for a\n+  // mapping between the binary name and its memory layout.\n+  static bool extractMMapEventForBinary(ProfiledBinary *Binary, StringRef Line,",
        "comment_created_at": "2025-07-18T21:42:31+00:00",
        "comment_author": "mingmingl-llvm",
        "comment_body": "Sure. How does it sound if I do this in a separate change to minimize the code diff? Added a TODO in the comment if that's fine.",
        "pr_file_module": null
      },
      {
        "comment_id": "2216987312",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 148013,
        "pr_file": "llvm/tools/llvm-profgen/PerfReader.h",
        "discussion_id": "2211566093",
        "commented_code": "@@ -598,6 +612,12 @@ class PerfScriptReader : public PerfReaderBase {\n \n   // Entry of the reader to parse multiple perf traces\n   void parsePerfTraces() override;\n+\n+  // Parse a single line of a PERF_RECORD_MMAP event looking for a\n+  // mapping between the binary name and its memory layout.\n+  static bool extractMMapEventForBinary(ProfiledBinary *Binary, StringRef Line,",
        "comment_created_at": "2025-07-18T22:14:19+00:00",
        "comment_author": "snehasish",
        "comment_body": "Sounds good to cleanup after.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2219658072",
    "pr_number": 148398,
    "pr_file": "libc/src/math/fabsbf16.h",
    "created_at": "2025-07-21T16:15:42+00:00",
    "commented_code": "+//===-- Implementation header for fabsbf16 ----------------------*- C++ -*-===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef LLVM_LIBC_SRC_MATH_FABSBF16_H\n+#define LLVM_LIBC_SRC_MATH_FABSBF16_H\n+\n+#include \"src/__support/FPUtil/bfloat16.h\"",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2219658072",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 148398,
        "pr_file": "libc/src/math/fabsbf16.h",
        "discussion_id": "2219658072",
        "commented_code": "@@ -0,0 +1,21 @@\n+//===-- Implementation header for fabsbf16 ----------------------*- C++ -*-===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#ifndef LLVM_LIBC_SRC_MATH_FABSBF16_H\n+#define LLVM_LIBC_SRC_MATH_FABSBF16_H\n+\n+#include \"src/__support/FPUtil/bfloat16.h\"",
        "comment_created_at": "2025-07-21T16:15:42+00:00",
        "comment_author": "overmighty",
        "comment_body": "iirc during our last meeting @lntue said the implementation header should only include types.h and the implementation file (.cpp) should only include bfloat16.h.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2231686857",
    "pr_number": 145899,
    "pr_file": "mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h",
    "created_at": "2025-07-25T17:38:36+00:00",
    "commented_code": "#ifndef MLIR_DIALECT_LLVMIR_LLVMATTRS_H_\n #define MLIR_DIALECT_LLVMIR_LLVMATTRS_H_\n \n-#include \"mlir/Dialect/LLVMIR/LLVMTypes.h\"\n #include \"mlir/IR/OpImplementation.h\"\n+#include \"mlir/Interfaces/DataLayoutInterfaces.h\"\n #include <optional>\n \n #include \"mlir/Dialect/LLVMIR/LLVMOpsEnums.h.inc\"\n \n+#include \"llvm/IR/DataLayout.h\"\n+#include \"llvm/Target/TargetMachine.h\"",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2231686857",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 145899,
        "pr_file": "mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h",
        "discussion_id": "2231686857",
        "commented_code": "@@ -14,12 +14,15 @@\n #ifndef MLIR_DIALECT_LLVMIR_LLVMATTRS_H_\n #define MLIR_DIALECT_LLVMIR_LLVMATTRS_H_\n \n-#include \"mlir/Dialect/LLVMIR/LLVMTypes.h\"\n #include \"mlir/IR/OpImplementation.h\"\n+#include \"mlir/Interfaces/DataLayoutInterfaces.h\"\n #include <optional>\n \n #include \"mlir/Dialect/LLVMIR/LLVMOpsEnums.h.inc\"\n \n+#include \"llvm/IR/DataLayout.h\"\n+#include \"llvm/Target/TargetMachine.h\"",
        "comment_created_at": "2025-07-25T17:38:36+00:00",
        "comment_author": "fabianmcg",
        "comment_body": "Why do we need these?\n```suggestion\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2231737652",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 145899,
        "pr_file": "mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h",
        "discussion_id": "2231686857",
        "commented_code": "@@ -14,12 +14,15 @@\n #ifndef MLIR_DIALECT_LLVMIR_LLVMATTRS_H_\n #define MLIR_DIALECT_LLVMIR_LLVMATTRS_H_\n \n-#include \"mlir/Dialect/LLVMIR/LLVMTypes.h\"\n #include \"mlir/IR/OpImplementation.h\"\n+#include \"mlir/Interfaces/DataLayoutInterfaces.h\"\n #include <optional>\n \n #include \"mlir/Dialect/LLVMIR/LLVMOpsEnums.h.inc\"\n \n+#include \"llvm/IR/DataLayout.h\"\n+#include \"llvm/Target/TargetMachine.h\"",
        "comment_created_at": "2025-07-25T18:08:20+00:00",
        "comment_author": "rolfmorel",
        "comment_body": "As the `mlir::LLVM::TargetAttrInterface` has methods that return the DataLayout and TargetMachine.\r\n\r\nLook at `mlir/include/mlir/Dialect/LLVMIR/LLVMDialect.h` to see that having dependency on LLVM's headers is not a big deal. For clarity's sake, due moving the parts that require linking to `mlir/Target` the `LLVM` dialect does not gain any linking dependencies. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2231978586",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 145899,
        "pr_file": "mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h",
        "discussion_id": "2231686857",
        "commented_code": "@@ -14,12 +14,15 @@\n #ifndef MLIR_DIALECT_LLVMIR_LLVMATTRS_H_\n #define MLIR_DIALECT_LLVMIR_LLVMATTRS_H_\n \n-#include \"mlir/Dialect/LLVMIR/LLVMTypes.h\"\n #include \"mlir/IR/OpImplementation.h\"\n+#include \"mlir/Interfaces/DataLayoutInterfaces.h\"\n #include <optional>\n \n #include \"mlir/Dialect/LLVMIR/LLVMOpsEnums.h.inc\"\n \n+#include \"llvm/IR/DataLayout.h\"\n+#include \"llvm/Target/TargetMachine.h\"",
        "comment_created_at": "2025-07-25T20:46:30+00:00",
        "comment_author": "fabianmcg",
        "comment_body": "Actually those dependencies there are spurious and legacy, see https://github.com/llvm/llvm-project/pull/150692 for removal\n\nIdeally the LLVM dialect shouldn't depend on `llvm/IR`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2236978052",
    "pr_number": 142541,
    "pr_file": "clang/include/clang/AST/Expr.h",
    "created_at": "2025-07-28T15:33:23+00:00",
    "commented_code": "#include \"clang/AST/APNumericStorage.h\"\n #include \"clang/AST/APValue.h\"\n #include \"clang/AST/ASTVector.h\"\n+#include \"clang/AST/Attr.h\"",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2236978052",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 142541,
        "pr_file": "clang/include/clang/AST/Expr.h",
        "discussion_id": "2236978052",
        "commented_code": "@@ -16,6 +16,7 @@\n #include \"clang/AST/APNumericStorage.h\"\n #include \"clang/AST/APValue.h\"\n #include \"clang/AST/ASTVector.h\"\n+#include \"clang/AST/Attr.h\"",
        "comment_created_at": "2025-07-28T15:33:23+00:00",
        "comment_author": "nikic",
        "comment_body": "Can you forward-declare WarnUnusedResultAttr instead?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2231051250",
    "pr_number": 145382,
    "pr_file": "lldb/source/Plugins/Platform/Android/AdbClientUtils.h",
    "created_at": "2025-07-25T13:12:10+00:00",
    "commented_code": "+//===-- AdbClientUtils.h --------------------------------------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+#ifndef LLDB_SOURCE_PLUGINS_PLATFORM_ANDROID_ADBCLIENTUTILS_H\n+#define LLDB_SOURCE_PLUGINS_PLATFORM_ANDROID_ADBCLIENTUTILS_H\n+\n+#include \"lldb/Utility/Status.h\"\n+#include <string>\n+\n+namespace lldb_private {\n+class Connection;\n+\n+namespace platform_android {\n+\n+const std::chrono::seconds kReadTimeout(20);\n+const static char *kOKAY = \"OKAY\";\n+const static char *kFAIL = \"FAIL\";\n+const static char *kDATA = \"DATA\";\n+const static char *kDONE = \"DONE\";\n+const static char *kSEND = \"SEND\";\n+const static char *kRECV = \"RECV\";\n+const static char *kSTAT = \"STAT\";\n+const static size_t kSyncPacketLen = 8;\n+const static size_t kMaxPushData = 2 * 1024;\n+const static uint32_t kDefaultMode = 0100770;",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2231051250",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 145382,
        "pr_file": "lldb/source/Plugins/Platform/Android/AdbClientUtils.h",
        "discussion_id": "2231051250",
        "commented_code": "@@ -0,0 +1,46 @@\n+//===-- AdbClientUtils.h --------------------------------------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+#ifndef LLDB_SOURCE_PLUGINS_PLATFORM_ANDROID_ADBCLIENTUTILS_H\n+#define LLDB_SOURCE_PLUGINS_PLATFORM_ANDROID_ADBCLIENTUTILS_H\n+\n+#include \"lldb/Utility/Status.h\"\n+#include <string>\n+\n+namespace lldb_private {\n+class Connection;\n+\n+namespace platform_android {\n+\n+const std::chrono::seconds kReadTimeout(20);\n+const static char *kOKAY = \"OKAY\";\n+const static char *kFAIL = \"FAIL\";\n+const static char *kDATA = \"DATA\";\n+const static char *kDONE = \"DONE\";\n+const static char *kSEND = \"SEND\";\n+const static char *kRECV = \"RECV\";\n+const static char *kSTAT = \"STAT\";\n+const static size_t kSyncPacketLen = 8;\n+const static size_t kMaxPushData = 2 * 1024;\n+const static uint32_t kDefaultMode = 0100770;",
        "comment_created_at": "2025-07-25T13:12:10+00:00",
        "comment_author": "labath",
        "comment_body": "`static` in a header is a no-no.",
        "pr_file_module": null
      }
    ]
  }
]