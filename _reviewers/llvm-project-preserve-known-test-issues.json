[
  {
    "discussion_id": "2233248868",
    "pr_number": 150791,
    "pr_file": "clang-tools-extra/test/clang-tidy/checkers/bugprone/easily-swappable-parameters-relatedness.c",
    "created_at": "2025-07-26T20:21:26+00:00",
    "commented_code": "int addedTogether(int A, int B) { return add(A, B); } // NO-WARN: Passed to same function.\n \n+// FIXME: This triggers a false positive: the \"passed to same function\" heuristic\n+// can't map the parameter index 1 to A and B because myprint() has no\n+// parameters.\n+//     warning: 2 adjacent parameters of 'passedToSameKNRFunction' of similar type ('int')\n+//     note: the first parameter in the range is 'A'\n+//     note: the last parameter in the range is 'B'\n+#if 0\n+int myprint();",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2233248868",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150791,
        "pr_file": "clang-tools-extra/test/clang-tidy/checkers/bugprone/easily-swappable-parameters-relatedness.c",
        "discussion_id": "2233248868",
        "commented_code": "@@ -19,13 +18,16 @@ void notRelated(int A, int B) {}\n \n int addedTogether(int A, int B) { return add(A, B); } // NO-WARN: Passed to same function.\n \n+// FIXME: This triggers a false positive: the \"passed to same function\" heuristic\n+// can't map the parameter index 1 to A and B because myprint() has no\n+// parameters.\n+//     warning: 2 adjacent parameters of 'passedToSameKNRFunction' of similar type ('int')\n+//     note: the first parameter in the range is 'A'\n+//     note: the last parameter in the range is 'B'\n+#if 0\n+int myprint();",
        "comment_created_at": "2025-07-26T20:21:26+00:00",
        "comment_author": "vbvictor",
        "comment_body": "Can we make `int myprint(char*, int)` to correctly map parameters?\r\nOr make this case only for pre-C23 and make `int myprint(char*, int)` for post-C23?",
        "pr_file_module": null
      },
      {
        "comment_id": "2233658634",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150791,
        "pr_file": "clang-tools-extra/test/clang-tidy/checkers/bugprone/easily-swappable-parameters-relatedness.c",
        "discussion_id": "2233248868",
        "commented_code": "@@ -19,13 +18,16 @@ void notRelated(int A, int B) {}\n \n int addedTogether(int A, int B) { return add(A, B); } // NO-WARN: Passed to same function.\n \n+// FIXME: This triggers a false positive: the \"passed to same function\" heuristic\n+// can't map the parameter index 1 to A and B because myprint() has no\n+// parameters.\n+//     warning: 2 adjacent parameters of 'passedToSameKNRFunction' of similar type ('int')\n+//     note: the first parameter in the range is 'A'\n+//     note: the last parameter in the range is 'B'\n+#if 0\n+int myprint();",
        "comment_created_at": "2025-07-27T04:28:54+00:00",
        "comment_author": "localspook",
        "comment_body": "Writing out `int myprint(char*, int)` doesn't trigger the false positive. In general, I don't see why we should go out of our way to test incorrect behaviour.",
        "pr_file_module": null
      },
      {
        "comment_id": "2233973544",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150791,
        "pr_file": "clang-tools-extra/test/clang-tidy/checkers/bugprone/easily-swappable-parameters-relatedness.c",
        "discussion_id": "2233248868",
        "commented_code": "@@ -19,13 +18,16 @@ void notRelated(int A, int B) {}\n \n int addedTogether(int A, int B) { return add(A, B); } // NO-WARN: Passed to same function.\n \n+// FIXME: This triggers a false positive: the \"passed to same function\" heuristic\n+// can't map the parameter index 1 to A and B because myprint() has no\n+// parameters.\n+//     warning: 2 adjacent parameters of 'passedToSameKNRFunction' of similar type ('int')\n+//     note: the first parameter in the range is 'A'\n+//     note: the last parameter in the range is 'B'\n+#if 0\n+int myprint();",
        "comment_created_at": "2025-07-27T13:01:54+00:00",
        "comment_author": "vbvictor",
        "comment_body": "We should preserve false-positives in code, because someone could make a refactor/speedup patch of the check and accidentally fix FP. Without this test, developer wouldn't know he fixed a FP with an NFC patch.",
        "pr_file_module": null
      },
      {
        "comment_id": "2233974742",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150791,
        "pr_file": "clang-tools-extra/test/clang-tidy/checkers/bugprone/easily-swappable-parameters-relatedness.c",
        "discussion_id": "2233248868",
        "commented_code": "@@ -19,13 +18,16 @@ void notRelated(int A, int B) {}\n \n int addedTogether(int A, int B) { return add(A, B); } // NO-WARN: Passed to same function.\n \n+// FIXME: This triggers a false positive: the \"passed to same function\" heuristic\n+// can't map the parameter index 1 to A and B because myprint() has no\n+// parameters.\n+//     warning: 2 adjacent parameters of 'passedToSameKNRFunction' of similar type ('int')\n+//     note: the first parameter in the range is 'A'\n+//     note: the last parameter in the range is 'B'\n+#if 0\n+int myprint();",
        "comment_created_at": "2025-07-27T13:05:50+00:00",
        "comment_author": "vbvictor",
        "comment_body": "I didn't look at the nature of this FP. If it is unfixable in theory then we could disable it forever. If there is a chance to fix it, I'd leave the test to give warnings.",
        "pr_file_module": null
      },
      {
        "comment_id": "2236460126",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150791,
        "pr_file": "clang-tools-extra/test/clang-tidy/checkers/bugprone/easily-swappable-parameters-relatedness.c",
        "discussion_id": "2233248868",
        "commented_code": "@@ -19,13 +18,16 @@ void notRelated(int A, int B) {}\n \n int addedTogether(int A, int B) { return add(A, B); } // NO-WARN: Passed to same function.\n \n+// FIXME: This triggers a false positive: the \"passed to same function\" heuristic\n+// can't map the parameter index 1 to A and B because myprint() has no\n+// parameters.\n+//     warning: 2 adjacent parameters of 'passedToSameKNRFunction' of similar type ('int')\n+//     note: the first parameter in the range is 'A'\n+//     note: the last parameter in the range is 'B'\n+#if 0\n+int myprint();",
        "comment_created_at": "2025-07-28T13:25:08+00:00",
        "comment_author": "localspook",
        "comment_body": "That makes sense. I've restored the test.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2233978417",
    "pr_number": 150791,
    "pr_file": "clang-tools-extra/test/clang-tidy/checkers/readability/bitint-no-crash.c",
    "created_at": "2025-07-27T13:14:17+00:00",
    "commented_code": "-// RUN: %check_clang_tidy %s readability-magic-numbers %t --\n+// RUN: %check_clang_tidy -std=c23-or-later %s readability-magic-numbers %t\n \n // Don't crash\n \n _BitInt(128) A = 4533629751480627964421wb;\n-// CHECK-MESSAGES: warning",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2233978417",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150791,
        "pr_file": "clang-tools-extra/test/clang-tidy/checkers/readability/bitint-no-crash.c",
        "discussion_id": "2233978417",
        "commented_code": "@@ -1,6 +1,5 @@\n-// RUN: %check_clang_tidy %s readability-magic-numbers %t --\n+// RUN: %check_clang_tidy -std=c23-or-later %s readability-magic-numbers %t\n \n // Don't crash\n \n _BitInt(128) A = 4533629751480627964421wb;\n-// CHECK-MESSAGES: warning",
        "comment_created_at": "2025-07-27T13:14:17+00:00",
        "comment_author": "vbvictor",
        "comment_body": "Could you elaborate why this warning is removed? Is this a new false-negative?",
        "pr_file_module": null
      },
      {
        "comment_id": "2236455258",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150791,
        "pr_file": "clang-tools-extra/test/clang-tidy/checkers/readability/bitint-no-crash.c",
        "discussion_id": "2233978417",
        "commented_code": "@@ -1,6 +1,5 @@\n-// RUN: %check_clang_tidy %s readability-magic-numbers %t --\n+// RUN: %check_clang_tidy -std=c23-or-later %s readability-magic-numbers %t\n \n // Don't crash\n \n _BitInt(128) A = 4533629751480627964421wb;\n-// CHECK-MESSAGES: warning",
        "comment_created_at": "2025-07-28T13:24:03+00:00",
        "comment_author": "localspook",
        "comment_body": "This is an existing false negative: #65888 disabled this check for `_BitInt`. The warning you see here is (I think) for using extensions, which disappears now that the test is only run in C23+ mode.",
        "pr_file_module": null
      },
      {
        "comment_id": "2236943618",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150791,
        "pr_file": "clang-tools-extra/test/clang-tidy/checkers/readability/bitint-no-crash.c",
        "discussion_id": "2233978417",
        "commented_code": "@@ -1,6 +1,5 @@\n-// RUN: %check_clang_tidy %s readability-magic-numbers %t --\n+// RUN: %check_clang_tidy -std=c23-or-later %s readability-magic-numbers %t\n \n // Don't crash\n \n _BitInt(128) A = 4533629751480627964421wb;\n-// CHECK-MESSAGES: warning",
        "comment_created_at": "2025-07-28T15:25:28+00:00",
        "comment_author": "vbvictor",
        "comment_body": "Thank you",
        "pr_file_module": null
      }
    ]
  }
]