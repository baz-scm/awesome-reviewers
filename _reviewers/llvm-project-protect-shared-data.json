[
  {
    "discussion_id": "2214020177",
    "pr_number": 148948,
    "pr_file": "libc/src/__support/threads/barrier.cpp",
    "created_at": "2025-07-17T18:29:34+00:00",
    "commented_code": "+//===-- Implementation of Barrier class ------------- ---------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#include \"src/__support/threads/barrier.h\"\n+#include \"barrier.h\"\n+#include \"hdr/errno_macros.h\"\n+#include \"src/__support/threads/mutex.h\"\n+\n+namespace LIBC_NAMESPACE_DECL {\n+\n+const int BARRIER_FIRST_EXITED = -1;",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2214020177",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 148948,
        "pr_file": "libc/src/__support/threads/barrier.cpp",
        "discussion_id": "2214020177",
        "commented_code": "@@ -0,0 +1,83 @@\n+//===-- Implementation of Barrier class ------------- ---------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#include \"src/__support/threads/barrier.h\"\n+#include \"barrier.h\"\n+#include \"hdr/errno_macros.h\"\n+#include \"src/__support/threads/mutex.h\"\n+\n+namespace LIBC_NAMESPACE_DECL {\n+\n+const int BARRIER_FIRST_EXITED = -1;",
        "comment_created_at": "2025-07-17T18:29:34+00:00",
        "comment_author": "brooksmoses",
        "comment_body": "Why not just use `PTHREAD_BARRIER_SERIAL_THREAD` here, and avoid the special-case logic in `pthread_barrier_wait`?\r\n\r\nAlso note that by defining it this way, you're using global storage to store the value (and then loading it from memory every time `pthread_barrier_wait` is called), rather than just inlining it in the code.  That's a bit unnecessary, and introduces the possibility that something could cast away the const-ness and change it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2214492064",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 148948,
        "pr_file": "libc/src/__support/threads/barrier.cpp",
        "discussion_id": "2214020177",
        "commented_code": "@@ -0,0 +1,83 @@\n+//===-- Implementation of Barrier class ------------- ---------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#include \"src/__support/threads/barrier.h\"\n+#include \"barrier.h\"\n+#include \"hdr/errno_macros.h\"\n+#include \"src/__support/threads/mutex.h\"\n+\n+namespace LIBC_NAMESPACE_DECL {\n+\n+const int BARRIER_FIRST_EXITED = -1;",
        "comment_created_at": "2025-07-17T23:32:39+00:00",
        "comment_author": "uzairnawaz",
        "comment_body": "My thought process for this was to decouple the threads support implementation from pthreads since the __support/threads folder is used by both C11 threads and pthreads. Although there is not technically a C11 barrier type, I don't like the idea of certain classes in the folder being generic while others are designed with only pthreads in mind. This may not be a real issue; I'd be happy to hear if you disagree (especially since this concept of one thread returning a special value might be unique to pthreads anyway).\r\n\r\nAs for the second point, isn't it likely that the compiler will inline the value anyway since it's a compile-time constant? Or is there a better way for me to do this? (`constexpr` probably makes more sense)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2216939002",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 148948,
        "pr_file": "libc/src/__support/threads/barrier.cpp",
        "discussion_id": "2214020177",
        "commented_code": "@@ -0,0 +1,83 @@\n+//===-- Implementation of Barrier class ------------- ---------------------===//\n+//\n+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n+// See https://llvm.org/LICENSE.txt for license information.\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#include \"src/__support/threads/barrier.h\"\n+#include \"barrier.h\"\n+#include \"hdr/errno_macros.h\"\n+#include \"src/__support/threads/mutex.h\"\n+\n+namespace LIBC_NAMESPACE_DECL {\n+\n+const int BARRIER_FIRST_EXITED = -1;",
        "comment_created_at": "2025-07-18T21:23:17+00:00",
        "comment_author": "brooksmoses",
        "comment_body": "(Repeating offline conversation, for the record.)\r\n\r\nI think the concept of one thread returning a special value is fairly pthreads-specific.  C11 `threads.h` doesn't have a barrier functionality, and C++20's `std::barrier` doesn't return a value.  And if this does end up needing to be used by a different threading API, it might be a different return value like returning the decremented thread count.  So I would personally use the pthreads constant for it, until we find another thing that needs this return value.\r\n\r\nFor the second point -- you need to declare the variable as `static` to keep it from getting global linkage.  With global linkage, it's no longer a compile-time constant since some other compilation unit could access it and change it.\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2228511349",
    "pr_number": 148877,
    "pr_file": "lldb/source/Core/Module.cpp",
    "created_at": "2025-07-24T13:22:16+00:00",
    "commented_code": "return nullptr;\n }\n \n+// TODO: needs a mutex",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2228511349",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 148877,
        "pr_file": "lldb/source/Core/Module.cpp",
        "discussion_id": "2228511349",
        "commented_code": "@@ -130,8 +139,11 @@ Module *Module::GetAllocatedModuleAtIndex(size_t idx) {\n   return nullptr;\n }\n \n+// TODO: needs a mutex",
        "comment_created_at": "2025-07-24T13:22:16+00:00",
        "comment_author": "labath",
        "comment_body": ".. or you can make it an atomic.",
        "pr_file_module": null
      }
    ]
  }
]