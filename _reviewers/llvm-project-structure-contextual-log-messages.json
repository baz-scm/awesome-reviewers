[
  {
    "discussion_id": "2231581962",
    "pr_number": 149232,
    "pr_file": "llvm/include/llvm/Frontend/HLSL/RootSignatureMetadata.h",
    "created_at": "2025-07-25T16:39:45+00:00",
    "commented_code": "namespace hlsl {\n namespace rootsig {\n \n+template <typename T>\n+class RootSignatureValidationError\n+    : public ErrorInfo<RootSignatureValidationError<T>> {\n+public:\n+  static char ID;\n+  std::string ParamName;\n+  T Value;\n+\n+  RootSignatureValidationError(StringRef ParamName, T Value)\n+      : ParamName(ParamName.str()), Value(Value) {}\n+\n+  void log(raw_ostream &OS) const override {\n+    OS << \"Invalid value for \" << ParamName << \": \" << Value;\n+  }\n+\n+  std::error_code convertToErrorCode() const override {\n+    return llvm::inconvertibleErrorCode();\n+  }\n+};\n+\n+class GenericRSMetadataError : public ErrorInfo<GenericRSMetadataError> {\n+public:\n+  static char ID;\n+  std::string Message;\n+\n+  GenericRSMetadataError(Twine Message) : Message(Message.str()) {}",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2231581962",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 149232,
        "pr_file": "llvm/include/llvm/Frontend/HLSL/RootSignatureMetadata.h",
        "discussion_id": "2231581962",
        "commented_code": "@@ -26,6 +28,73 @@ class Metadata;\n namespace hlsl {\n namespace rootsig {\n \n+template <typename T>\n+class RootSignatureValidationError\n+    : public ErrorInfo<RootSignatureValidationError<T>> {\n+public:\n+  static char ID;\n+  std::string ParamName;\n+  T Value;\n+\n+  RootSignatureValidationError(StringRef ParamName, T Value)\n+      : ParamName(ParamName.str()), Value(Value) {}\n+\n+  void log(raw_ostream &OS) const override {\n+    OS << \"Invalid value for \" << ParamName << \": \" << Value;\n+  }\n+\n+  std::error_code convertToErrorCode() const override {\n+    return llvm::inconvertibleErrorCode();\n+  }\n+};\n+\n+class GenericRSMetadataError : public ErrorInfo<GenericRSMetadataError> {\n+public:\n+  static char ID;\n+  std::string Message;\n+\n+  GenericRSMetadataError(Twine Message) : Message(Message.str()) {}",
        "comment_created_at": "2025-07-25T16:39:45+00:00",
        "comment_author": "llvm-beanz",
        "comment_body": "Why not make this take a `StringRef` and the pointer to the metadata node that the error refers to? Then the message formatting can be something like:\r\n\r\n```\r\nvoid log(raw_ostream &OS) const override {\r\n  OS << Message;\r\n  if (MD)\r\n    MD->printTree(OS);\r\n}",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2235922700",
    "pr_number": 150855,
    "pr_file": "llvm/include/llvm/Support/DebugLog.h",
    "created_at": "2025-07-28T11:11:49+00:00",
    "commented_code": "/// \"[DebugType] File:Line \"\n /// Where the File is the file name without the path prefix.\n static LLVM_ATTRIBUTE_UNUSED std::string\n-computePrefix(const char *DebugType, const char *File, int Line) {\n+computePrefix(const char *DebugType, const char *File, int Line, int Level) {\n   std::string Prefix;\n   raw_string_ostream OsPrefix(Prefix);\n-  if (DebugType)\n-    OsPrefix << \"[\" << DebugType << \"] \";\n+  if (DebugType) {\n+    if (Level == 0)\n+      Level = 1;\n+    OsPrefix << \"[\" << DebugType << \":\" << Level << \"] \";",
    "repo_full_name": "llvm/llvm-project",
    "discussion_comments": [
      {
        "comment_id": "2235922700",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150855,
        "pr_file": "llvm/include/llvm/Support/DebugLog.h",
        "discussion_id": "2235922700",
        "commented_code": "@@ -119,19 +155,22 @@ getShortFileName(const char *path) {\n /// \"[DebugType] File:Line \"\n /// Where the File is the file name without the path prefix.\n static LLVM_ATTRIBUTE_UNUSED std::string\n-computePrefix(const char *DebugType, const char *File, int Line) {\n+computePrefix(const char *DebugType, const char *File, int Line, int Level) {\n   std::string Prefix;\n   raw_string_ostream OsPrefix(Prefix);\n-  if (DebugType)\n-    OsPrefix << \"[\" << DebugType << \"] \";\n+  if (DebugType) {\n+    if (Level == 0)\n+      Level = 1;\n+    OsPrefix << \"[\" << DebugType << \":\" << Level << \"] \";",
        "comment_created_at": "2025-07-28T11:11:49+00:00",
        "comment_author": "jpienaar",
        "comment_body": "I'm not sure about level here - it is more complete, but I see it more as enabling logging rather than a grouping mechanism. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2235973496",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150855,
        "pr_file": "llvm/include/llvm/Support/DebugLog.h",
        "discussion_id": "2235922700",
        "commented_code": "@@ -119,19 +155,22 @@ getShortFileName(const char *path) {\n /// \"[DebugType] File:Line \"\n /// Where the File is the file name without the path prefix.\n static LLVM_ATTRIBUTE_UNUSED std::string\n-computePrefix(const char *DebugType, const char *File, int Line) {\n+computePrefix(const char *DebugType, const char *File, int Line, int Level) {\n   std::string Prefix;\n   raw_string_ostream OsPrefix(Prefix);\n-  if (DebugType)\n-    OsPrefix << \"[\" << DebugType << \"] \";\n+  if (DebugType) {\n+    if (Level == 0)\n+      Level = 1;\n+    OsPrefix << \"[\" << DebugType << \":\" << Level << \"] \";",
        "comment_created_at": "2025-07-28T11:26:21+00:00",
        "comment_author": "joker-eph",
        "comment_body": "I was looking to provide the user with an easy way to filter from a debug output. If you have it here and your output is a bit too verbose you can easily see the level you need to filter on.",
        "pr_file_module": null
      },
      {
        "comment_id": "2236452410",
        "repo_full_name": "llvm/llvm-project",
        "pr_number": 150855,
        "pr_file": "llvm/include/llvm/Support/DebugLog.h",
        "discussion_id": "2235922700",
        "commented_code": "@@ -119,19 +155,22 @@ getShortFileName(const char *path) {\n /// \"[DebugType] File:Line \"\n /// Where the File is the file name without the path prefix.\n static LLVM_ATTRIBUTE_UNUSED std::string\n-computePrefix(const char *DebugType, const char *File, int Line) {\n+computePrefix(const char *DebugType, const char *File, int Line, int Level) {\n   std::string Prefix;\n   raw_string_ostream OsPrefix(Prefix);\n-  if (DebugType)\n-    OsPrefix << \"[\" << DebugType << \"] \";\n+  if (DebugType) {\n+    if (Level == 0)\n+      Level = 1;\n+    OsPrefix << \"[\" << DebugType << \":\" << Level << \"] \";",
        "comment_created_at": "2025-07-28T13:23:22+00:00",
        "comment_author": "joker-eph",
        "comment_body": "Added a unit-test showing it.",
        "pr_file_module": null
      }
    ]
  }
]