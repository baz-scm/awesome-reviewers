[
  {
    "discussion_id": "2223048589",
    "pr_number": 1112,
    "pr_file": "lmcache/v1/cache_engine.py",
    "created_at": "2025-07-22T16:00:42+00:00",
    "commented_code": ")\n \n         # HACK: remove this in the future\n-        self.remove_after_retrieve = config.enable_nixl\n+        # NOTE (Jiayi): This is currently used to support\n+        # dropping the kv cache in nixl backend at decoder.\n+        self.remove_after_retrieve = config.nixl_role == \"receiver\"",
    "repo_full_name": "LMCache/LMCache",
    "discussion_comments": [
      {
        "comment_id": "2223048589",
        "repo_full_name": "LMCache/LMCache",
        "pr_number": 1112,
        "pr_file": "lmcache/v1/cache_engine.py",
        "discussion_id": "2223048589",
        "commented_code": "@@ -119,7 +119,9 @@ def __init__(\n         )\n \n         # HACK: remove this in the future\n-        self.remove_after_retrieve = config.enable_nixl\n+        # NOTE (Jiayi): This is currently used to support\n+        # dropping the kv cache in nixl backend at decoder.\n+        self.remove_after_retrieve = config.nixl_role == \"receiver\"",
        "comment_created_at": "2025-07-22T16:00:42+00:00",
        "comment_author": "vladnosiv",
        "comment_body": "nitpick: it's safer to check both conditions here: config.enable_nixl and config.nixl_role == \"receiver\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1879004786",
    "pr_number": 256,
    "pr_file": "lmcache/config.py",
    "created_at": "2024-12-10T22:30:48+00:00",
    "commented_code": "chunk_size: int = 256,\n         local_device: str = \"cuda\",\n         max_local_cache_size: int = 5,\n+        disk_url: str = \"\",",
    "repo_full_name": "LMCache/LMCache",
    "discussion_comments": [
      {
        "comment_id": "1879004786",
        "repo_full_name": "LMCache/LMCache",
        "pr_number": 256,
        "pr_file": "lmcache/config.py",
        "discussion_id": "1879004786",
        "commented_code": "@@ -53,6 +54,7 @@ def from_defaults(\n         chunk_size: int = 256,\n         local_device: str = \"cuda\",\n         max_local_cache_size: int = 5,\n+        disk_url: str = \"\",",
        "comment_created_at": "2024-12-10T22:30:48+00:00",
        "comment_author": "ApostaC",
        "comment_body": "A few quick comments about `disk_url` here.\r\n- The name of `disk_url` itself is a bit ambiguous. Is it the URL of the disk manager process? Then maybe we should use something like `disk_manager_url`\r\n- If it's an optional configuration, it's clearer to use `None` as the default value, instead of `\"\"`\r\n- In the `from_file` code, `disk_url` is first set by `disk_url = config.get(\"disk_url\", None)`, and then be changed again when `if re.match(r\"disk_url://(.*)\", local_device)`. This is pretty confusing. Why changing the value of `local_device` can overwrite the `disk_url`? Does this mean `disk_url` in the yaml config is useless?",
        "pr_file_module": null
      },
      {
        "comment_id": "1882671484",
        "repo_full_name": "LMCache/LMCache",
        "pr_number": 256,
        "pr_file": "lmcache/config.py",
        "discussion_id": "1879004786",
        "commented_code": "@@ -53,6 +54,7 @@ def from_defaults(\n         chunk_size: int = 256,\n         local_device: str = \"cuda\",\n         max_local_cache_size: int = 5,\n+        disk_url: str = \"\",",
        "comment_created_at": "2024-12-12T18:16:30+00:00",
        "comment_author": "qyy2003",
        "comment_body": "Actually, the `disk_url`  in yaml config means `disk folder path` in disk_address_manager and `address manager url` in LMCache backend. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2146280752",
    "pr_number": 811,
    "pr_file": "lmcache/v1/storage_backend/gds_backend.py",
    "created_at": "2025-06-13T23:45:20+00:00",
    "commented_code": "f\"GDS backend using fstype '{self.fstype}' on path '{self.gds_path}'\"\n         )\n \n+        self.use_cufile = True\n+        use_cufile_from_config = False\n+\n+        if config.extra_config is not None:\n+            use_cufile = config.extra_config.get(\"use_cufile\", None)\n+            if use_cufile is not None:\n+                if use_cufile in [False, True]:",
    "repo_full_name": "LMCache/LMCache",
    "discussion_comments": [
      {
        "comment_id": "2146280752",
        "repo_full_name": "LMCache/LMCache",
        "pr_number": 811,
        "pr_file": "lmcache/v1/storage_backend/gds_backend.py",
        "discussion_id": "2146280752",
        "commented_code": "@@ -198,6 +193,46 @@ def __init__(\n             f\"GDS backend using fstype '{self.fstype}' on path '{self.gds_path}'\"\n         )\n \n+        self.use_cufile = True\n+        use_cufile_from_config = False\n+\n+        if config.extra_config is not None:\n+            use_cufile = config.extra_config.get(\"use_cufile\", None)\n+            if use_cufile is not None:\n+                if use_cufile in [False, True]:",
        "comment_created_at": "2025-06-13T23:45:20+00:00",
        "comment_author": "sammshen",
        "comment_body": "tiny suggestion:\r\n\r\n```python\r\nif isinstance(use_cufile, str):\r\n    use_cufile = use_cufile.lower() == \"true\"\r\n    \r\nelif use_cufile in [False, True]: \r\n\r\n...\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2149720428",
        "repo_full_name": "LMCache/LMCache",
        "pr_number": 811,
        "pr_file": "lmcache/v1/storage_backend/gds_backend.py",
        "discussion_id": "2146280752",
        "commented_code": "@@ -198,6 +193,46 @@ def __init__(\n             f\"GDS backend using fstype '{self.fstype}' on path '{self.gds_path}'\"\n         )\n \n+        self.use_cufile = True\n+        use_cufile_from_config = False\n+\n+        if config.extra_config is not None:\n+            use_cufile = config.extra_config.get(\"use_cufile\", None)\n+            if use_cufile is not None:\n+                if use_cufile in [False, True]:",
        "comment_created_at": "2025-06-16T11:32:00+00:00",
        "comment_author": "da-x",
        "comment_body": "Taking this. Thanks!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1901317728",
    "pr_number": 289,
    "pr_file": "lmcache/experimental/config.py",
    "created_at": "2025-01-02T22:31:06+00:00",
    "commented_code": "chunk_size: int = 256,\n         local_cpu: bool = True,\n         max_local_cpu_size=5,\n-        local_disk: str = \"local_disk/\",\n+        local_disk: str = \"/local/disk_test/local_disk/\",",
    "repo_full_name": "LMCache/LMCache",
    "discussion_comments": [
      {
        "comment_id": "1901317728",
        "repo_full_name": "LMCache/LMCache",
        "pr_number": 289,
        "pr_file": "lmcache/experimental/config.py",
        "discussion_id": "1901317728",
        "commented_code": "@@ -29,7 +29,7 @@ def from_defaults(\n         chunk_size: int = 256,\n         local_cpu: bool = True,\n         max_local_cpu_size=5,\n-        local_disk: str = \"local_disk/\",\n+        local_disk: str = \"/local/disk_test/local_disk/\",",
        "comment_created_at": "2025-01-02T22:31:06+00:00",
        "comment_author": "ApostaC",
        "comment_body": "Actually, should we use \"None\" as the default value in the `from_defaults` function? (This is also for other configuration items.)\r\nHow about `from_defaults` initializing the configuration to only support CPU offloading?",
        "pr_file_module": null
      }
    ]
  }
]