[
  {
    "discussion_id": "2299585872",
    "pr_number": 8853,
    "pr_file": "packages/model-runtime/src/comfyui/index.ts",
    "created_at": "2025-08-26T02:37:02+00:00",
    "commented_code": "+import { CallWrapper, ComfyApi, PromptBuilder } from '@saintno/comfyui-sdk';\n+import type {\n+  BasicCredentials,\n+  BearerTokenCredentials,\n+  CustomCredentials,\n+} from '@saintno/comfyui-sdk';\n+import debug from 'debug';\n+\n+import { ChatModelCard } from '@/types/llm';\n+import { ComfyUIKeyVault } from '@/types/user/settings';\n+\n+import { LobeRuntimeAI } from '../BaseAI';\n+import { AgentRuntimeErrorType } from '../error';\n+import { CreateImagePayload, CreateImageResponse } from '../types/image';\n+import { parseComfyUIErrorMessage } from '../utils/comfyuiErrorParser';\n+import { AgentRuntimeError } from '../utils/createError';\n+import { MODEL_LIST_CONFIGS, processModelList } from '../utils/modelParse';\n+import { COMFYUI_DEFAULTS, COMFYUI_ERROR_TYPES } from './constants';\n+import { ModelResolver } from './utils/modelResolver';\n+import { WorkflowDetector } from './utils/workflowDetector';\n+import { WorkflowRouter } from './utils/workflowRouter';\n+\n+const log = debug('lobe-image:comfyui');\n+// Removed unused debugVerbose variable\n+\n+/**\n+ * ComfyUI Runtime implementation / ComfyUI Runtime \u5b9e\u73b0\n+ * Supports text-to-image and image editing for FLUX series models / \u652f\u6301 FLUX \u7cfb\u5217\u6a21\u578b\u7684\u6587\u751f\u56fe\u548c\u56fe\u50cf\u7f16\u8f91\n+ */\n+// Export ComfyUI utilities and types\n+export { ModelResolver as ComfyUIModelResolver } from './utils/modelResolver';\n+export * from './workflows';\n+\n+export class LobeComfyUI implements LobeRuntimeAI {\n+  private client: ComfyApi;\n+  private options: ComfyUIKeyVault;\n+  private modelResolver: ModelResolver;\n+\n+  private connectionValidated: boolean;\n+  baseURL: string;\n+\n+  constructor(options: ComfyUIKeyVault = {}) {\n+    console.log('\ud83c\udfd7\ufe0f ComfyUI Constructor called with options:', {\n+      authType: options.authType,\n+      baseURL: options.baseURL,\n+    });\n+    const { baseURL, authType = 'none', apiKey, username, password, customHeaders } = options;\n+\n+    const resolvedBaseURL = baseURL || process.env.COMFYUI_DEFAULT_URL || COMFYUI_DEFAULTS.BASE_URL;\n+\n+    if (authType === 'basic' && (!username || !password)) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidComfyUIArgs);\n+    }\n+    if (authType === 'bearer' && !apiKey) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidProviderAPIKey);\n+    }\n+    if (authType === 'custom' && (!customHeaders || Object.keys(customHeaders).length === 0)) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidComfyUIArgs);\n+    }\n+\n+    this.options = options;\n+    this.baseURL = resolvedBaseURL;\n+    const credentials = this.createCredentials(this.options);\n+    this.connectionValidated = false;\n+\n+    this.client = new ComfyApi(this.baseURL, undefined, { credentials });\n+    this.client.init();\n+\n+    this.modelResolver = new ModelResolver(this.client);\n+  }\n+\n+  /**\n+   * \u786e\u4fdd ComfyUI \u8fde\u63a5\u6709\u6548\uff0c\u4f7f\u7528\u73b0\u6709\u7684\u9519\u8bef\u5904\u7406\u5668\n+   */\n+  private async ensureConnection(): Promise<void> {\n+    console.log('\ud83d\ude80\ud83d\ude80\ud83d\ude80 ensureConnection() CALLED - Starting connection validation');\n+    if (this.connectionValidated) {\n+      console.log('\u2705 Connection already validated, skipping');\n+      return;\n+    }\n+\n+    try {\n+      const models = await this.modelResolver.getAvailableModelFiles();\n+\n+      if (!Array.isArray(models)) {\n+        throw new Error('Invalid response from ComfyUI server');\n+      }\n+\n+      this.connectionValidated = true;\n+    } catch (error: unknown) {\n+      console.log('\ud83d\udd25\ud83d\udd25\ud83d\udd25 ComfyUI Connection Error Caught:', {\n+        error: error,\n+        errorConstructor: (error as any)?.constructor?.name,\n+        errorMessage: error instanceof Error ? error.message : 'Unknown error',\n+        errorStatus: (error as any)?.status,\n+        errorStatusCode: (error as any)?.statusCode,\n+        errorType: typeof error,\n+      });\n+      log('Connection error caught:', error);\n+\n+      const { error: parsedError, errorType } = parseComfyUIErrorMessage(error);\n+      throw AgentRuntimeError.createImage({\n+        error: parsedError,\n+        errorType,\n+        provider: 'comfyui',\n+      });\n+    }\n+  }\n+\n+  /**\n+   * Discover available models from ComfyUI server\n+   */\n+  async models(): Promise<ChatModelCard[]> {\n+    await this.ensureConnection();",
    "repo_full_name": "lobehub/lobe-chat",
    "discussion_comments": [
      {
        "comment_id": "2299585872",
        "repo_full_name": "lobehub/lobe-chat",
        "pr_number": 8853,
        "pr_file": "packages/model-runtime/src/comfyui/index.ts",
        "discussion_id": "2299585872",
        "commented_code": "@@ -0,0 +1,298 @@\n+import { CallWrapper, ComfyApi, PromptBuilder } from '@saintno/comfyui-sdk';\n+import type {\n+  BasicCredentials,\n+  BearerTokenCredentials,\n+  CustomCredentials,\n+} from '@saintno/comfyui-sdk';\n+import debug from 'debug';\n+\n+import { ChatModelCard } from '@/types/llm';\n+import { ComfyUIKeyVault } from '@/types/user/settings';\n+\n+import { LobeRuntimeAI } from '../BaseAI';\n+import { AgentRuntimeErrorType } from '../error';\n+import { CreateImagePayload, CreateImageResponse } from '../types/image';\n+import { parseComfyUIErrorMessage } from '../utils/comfyuiErrorParser';\n+import { AgentRuntimeError } from '../utils/createError';\n+import { MODEL_LIST_CONFIGS, processModelList } from '../utils/modelParse';\n+import { COMFYUI_DEFAULTS, COMFYUI_ERROR_TYPES } from './constants';\n+import { ModelResolver } from './utils/modelResolver';\n+import { WorkflowDetector } from './utils/workflowDetector';\n+import { WorkflowRouter } from './utils/workflowRouter';\n+\n+const log = debug('lobe-image:comfyui');\n+// Removed unused debugVerbose variable\n+\n+/**\n+ * ComfyUI Runtime implementation / ComfyUI Runtime \u5b9e\u73b0\n+ * Supports text-to-image and image editing for FLUX series models / \u652f\u6301 FLUX \u7cfb\u5217\u6a21\u578b\u7684\u6587\u751f\u56fe\u548c\u56fe\u50cf\u7f16\u8f91\n+ */\n+// Export ComfyUI utilities and types\n+export { ModelResolver as ComfyUIModelResolver } from './utils/modelResolver';\n+export * from './workflows';\n+\n+export class LobeComfyUI implements LobeRuntimeAI {\n+  private client: ComfyApi;\n+  private options: ComfyUIKeyVault;\n+  private modelResolver: ModelResolver;\n+\n+  private connectionValidated: boolean;\n+  baseURL: string;\n+\n+  constructor(options: ComfyUIKeyVault = {}) {\n+    console.log('\ud83c\udfd7\ufe0f ComfyUI Constructor called with options:', {\n+      authType: options.authType,\n+      baseURL: options.baseURL,\n+    });\n+    const { baseURL, authType = 'none', apiKey, username, password, customHeaders } = options;\n+\n+    const resolvedBaseURL = baseURL || process.env.COMFYUI_DEFAULT_URL || COMFYUI_DEFAULTS.BASE_URL;\n+\n+    if (authType === 'basic' && (!username || !password)) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidComfyUIArgs);\n+    }\n+    if (authType === 'bearer' && !apiKey) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidProviderAPIKey);\n+    }\n+    if (authType === 'custom' && (!customHeaders || Object.keys(customHeaders).length === 0)) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidComfyUIArgs);\n+    }\n+\n+    this.options = options;\n+    this.baseURL = resolvedBaseURL;\n+    const credentials = this.createCredentials(this.options);\n+    this.connectionValidated = false;\n+\n+    this.client = new ComfyApi(this.baseURL, undefined, { credentials });\n+    this.client.init();\n+\n+    this.modelResolver = new ModelResolver(this.client);\n+  }\n+\n+  /**\n+   * \u786e\u4fdd ComfyUI \u8fde\u63a5\u6709\u6548\uff0c\u4f7f\u7528\u73b0\u6709\u7684\u9519\u8bef\u5904\u7406\u5668\n+   */\n+  private async ensureConnection(): Promise<void> {\n+    console.log('\ud83d\ude80\ud83d\ude80\ud83d\ude80 ensureConnection() CALLED - Starting connection validation');\n+    if (this.connectionValidated) {\n+      console.log('\u2705 Connection already validated, skipping');\n+      return;\n+    }\n+\n+    try {\n+      const models = await this.modelResolver.getAvailableModelFiles();\n+\n+      if (!Array.isArray(models)) {\n+        throw new Error('Invalid response from ComfyUI server');\n+      }\n+\n+      this.connectionValidated = true;\n+    } catch (error: unknown) {\n+      console.log('\ud83d\udd25\ud83d\udd25\ud83d\udd25 ComfyUI Connection Error Caught:', {\n+        error: error,\n+        errorConstructor: (error as any)?.constructor?.name,\n+        errorMessage: error instanceof Error ? error.message : 'Unknown error',\n+        errorStatus: (error as any)?.status,\n+        errorStatusCode: (error as any)?.statusCode,\n+        errorType: typeof error,\n+      });\n+      log('Connection error caught:', error);\n+\n+      const { error: parsedError, errorType } = parseComfyUIErrorMessage(error);\n+      throw AgentRuntimeError.createImage({\n+        error: parsedError,\n+        errorType,\n+        provider: 'comfyui',\n+      });\n+    }\n+  }\n+\n+  /**\n+   * Discover available models from ComfyUI server\n+   */\n+  async models(): Promise<ChatModelCard[]> {\n+    await this.ensureConnection();",
        "comment_created_at": "2025-08-26T02:37:02+00:00",
        "comment_author": "tjx666",
        "comment_body": "\u5982\u679c\u62ff\u5230\u6a21\u578b\u4e0d\u80fd\u5728\u751f\u56fe\u4e2d\u4f7f\u7528\u7684\u5316\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u5148\u4e0d\u5b9e\u73b0",
        "pr_file_module": null
      },
      {
        "comment_id": "2299612278",
        "repo_full_name": "lobehub/lobe-chat",
        "pr_number": 8853,
        "pr_file": "packages/model-runtime/src/comfyui/index.ts",
        "discussion_id": "2299585872",
        "commented_code": "@@ -0,0 +1,298 @@\n+import { CallWrapper, ComfyApi, PromptBuilder } from '@saintno/comfyui-sdk';\n+import type {\n+  BasicCredentials,\n+  BearerTokenCredentials,\n+  CustomCredentials,\n+} from '@saintno/comfyui-sdk';\n+import debug from 'debug';\n+\n+import { ChatModelCard } from '@/types/llm';\n+import { ComfyUIKeyVault } from '@/types/user/settings';\n+\n+import { LobeRuntimeAI } from '../BaseAI';\n+import { AgentRuntimeErrorType } from '../error';\n+import { CreateImagePayload, CreateImageResponse } from '../types/image';\n+import { parseComfyUIErrorMessage } from '../utils/comfyuiErrorParser';\n+import { AgentRuntimeError } from '../utils/createError';\n+import { MODEL_LIST_CONFIGS, processModelList } from '../utils/modelParse';\n+import { COMFYUI_DEFAULTS, COMFYUI_ERROR_TYPES } from './constants';\n+import { ModelResolver } from './utils/modelResolver';\n+import { WorkflowDetector } from './utils/workflowDetector';\n+import { WorkflowRouter } from './utils/workflowRouter';\n+\n+const log = debug('lobe-image:comfyui');\n+// Removed unused debugVerbose variable\n+\n+/**\n+ * ComfyUI Runtime implementation / ComfyUI Runtime \u5b9e\u73b0\n+ * Supports text-to-image and image editing for FLUX series models / \u652f\u6301 FLUX \u7cfb\u5217\u6a21\u578b\u7684\u6587\u751f\u56fe\u548c\u56fe\u50cf\u7f16\u8f91\n+ */\n+// Export ComfyUI utilities and types\n+export { ModelResolver as ComfyUIModelResolver } from './utils/modelResolver';\n+export * from './workflows';\n+\n+export class LobeComfyUI implements LobeRuntimeAI {\n+  private client: ComfyApi;\n+  private options: ComfyUIKeyVault;\n+  private modelResolver: ModelResolver;\n+\n+  private connectionValidated: boolean;\n+  baseURL: string;\n+\n+  constructor(options: ComfyUIKeyVault = {}) {\n+    console.log('\ud83c\udfd7\ufe0f ComfyUI Constructor called with options:', {\n+      authType: options.authType,\n+      baseURL: options.baseURL,\n+    });\n+    const { baseURL, authType = 'none', apiKey, username, password, customHeaders } = options;\n+\n+    const resolvedBaseURL = baseURL || process.env.COMFYUI_DEFAULT_URL || COMFYUI_DEFAULTS.BASE_URL;\n+\n+    if (authType === 'basic' && (!username || !password)) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidComfyUIArgs);\n+    }\n+    if (authType === 'bearer' && !apiKey) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidProviderAPIKey);\n+    }\n+    if (authType === 'custom' && (!customHeaders || Object.keys(customHeaders).length === 0)) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidComfyUIArgs);\n+    }\n+\n+    this.options = options;\n+    this.baseURL = resolvedBaseURL;\n+    const credentials = this.createCredentials(this.options);\n+    this.connectionValidated = false;\n+\n+    this.client = new ComfyApi(this.baseURL, undefined, { credentials });\n+    this.client.init();\n+\n+    this.modelResolver = new ModelResolver(this.client);\n+  }\n+\n+  /**\n+   * \u786e\u4fdd ComfyUI \u8fde\u63a5\u6709\u6548\uff0c\u4f7f\u7528\u73b0\u6709\u7684\u9519\u8bef\u5904\u7406\u5668\n+   */\n+  private async ensureConnection(): Promise<void> {\n+    console.log('\ud83d\ude80\ud83d\ude80\ud83d\ude80 ensureConnection() CALLED - Starting connection validation');\n+    if (this.connectionValidated) {\n+      console.log('\u2705 Connection already validated, skipping');\n+      return;\n+    }\n+\n+    try {\n+      const models = await this.modelResolver.getAvailableModelFiles();\n+\n+      if (!Array.isArray(models)) {\n+        throw new Error('Invalid response from ComfyUI server');\n+      }\n+\n+      this.connectionValidated = true;\n+    } catch (error: unknown) {\n+      console.log('\ud83d\udd25\ud83d\udd25\ud83d\udd25 ComfyUI Connection Error Caught:', {\n+        error: error,\n+        errorConstructor: (error as any)?.constructor?.name,\n+        errorMessage: error instanceof Error ? error.message : 'Unknown error',\n+        errorStatus: (error as any)?.status,\n+        errorStatusCode: (error as any)?.statusCode,\n+        errorType: typeof error,\n+      });\n+      log('Connection error caught:', error);\n+\n+      const { error: parsedError, errorType } = parseComfyUIErrorMessage(error);\n+      throw AgentRuntimeError.createImage({\n+        error: parsedError,\n+        errorType,\n+        provider: 'comfyui',\n+      });\n+    }\n+  }\n+\n+  /**\n+   * Discover available models from ComfyUI server\n+   */\n+  async models(): Promise<ChatModelCard[]> {\n+    await this.ensureConnection();",
        "comment_created_at": "2025-08-26T02:58:29+00:00",
        "comment_author": "MapleEve",
        "comment_body": "\u8fd9\u4e2a\u662f\u56e0\u4e3a\u76ee\u524d\u7684\u6d41\u7a0b\u662f\uff1a\r\n\r\n```\r\n1. Network/Connection Error Flow:\r\n   SDK throws error (ECONNREFUSED/ENOTFOUND/ETIMEDOUT)\r\n   \u2193\r\n   modelResolver.getAvailableModelFiles() catch block\r\n   \u2193\r\n   parseComfyUIErrorMessage() detects isNetworkError()\r\n   \u2193\r\n   Returns errorType: ComfyUIServiceUnavailable\r\n   \u2193\r\n   modelResolver throws AgentRuntimeError with ComfyUIServiceUnavailable\r\n   \u2193\r\n   ensureConnection() catches and re-parses (calls parseComfyUIErrorMessage again)\r\n   \u2193\r\n   async/image.ts categorizeError() maps ComfyUIServiceUnavailable \u2192 ServerError\r\n   \u2193\r\n   Frontend receives AsyncTaskErrorType.ServerError\r\n\r\n2. Model Not Found Flow:\r\n   modelResolver.resolveModelFileName() fails to find model\r\n   \u2193\r\n   Throws AgentRuntimeError with ModelNotFound\r\n   \u2193\r\n   validateModel() re-throws the typed error\r\n   \u2193\r\n   async/image.ts categorizeError() maps ModelNotFound \u2192 ModelNotFound\r\n   \u2193\r\n   Frontend receives AsyncTaskErrorType.ModelNotFound\r\n\r\n3. Authentication Error Flow (401/403):\r\n   SDK returns HTTP 401/403 response\r\n   \u2193\r\n   modelResolver.getAvailableModelFiles() checks response.status\r\n   \u2193\r\n   Throws AgentRuntimeError with InvalidProviderAPIKey/PermissionDenied\r\n   \u2193\r\n   async/image.ts categorizeError() maps to appropriate AsyncTaskErrorType\r\n   \u2193\r\n   Frontend receives InvalidProviderAPIKey/PermissionDenied\r\n```\r\n\r\n\u7531\u4e8e Comfy \u7684\u6267\u884c\u548c\u53d8\u4f53\u5b58\u5728\uff0c\u5728\u6211\u4eec\u8fd8\u6ca1\u6709\u8ba1\u5212\u652f\u6301\u8ba9\u7528\u6237\u4fa7\u9009\u62e9\u670d\u52a1\u5668\u6a21\u578b\u7684\u65f6\u5019\uff0c\u9996\u5148\u8fd8\u662f\u9700\u8981\u652f\u6301\u4e00\u4e2a\u6a21\u578b\u5217\u8868\u7f13\u5b58\uff0c\u800c\u4e14\u8be6\u7ec6\u7684 FLUX \u793e\u533a\u6a21\u578b\u6570\u636e\u7edf\u8ba1\u8868\u6211\u6628\u5929\u66f4\u65b0\u5230 RFC-128 \u7684\u6587\u6863\u9876\u4e86\u3002\r\n\r\n\u76ee\u524d\u914d\u7f6e\u529f\u80fd\u4e0a\u5df2\u7ecf\u652f\u6301\u6240\u6709\u7684\u6a21\u578b\u53d8\u4f53\uff0c\u8fbe\u5230\u53ef\u4ee51\u4e2a\u5de5\u4f5c\u6d41\u5bf9\u5e94\u591a\u4e2a\u53d8\u4f53\u5bb6\u65cf\u6a21\u578b\u3002\u540e\u7eed\u5982\u679c\u8981\u628a\u6a21\u578b\u9009\u62e9\u3001\u83b7\u53d6\u529f\u80fd\u505a\u5230 /image \u91cc\u9762\u7684\u8bdd\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u5355\u72ec\u62bd\u8c61\u51fa\u6765\u548c\u524d\u7aef\u6253\u901a\u3002",
        "pr_file_module": null
      },
      {
        "comment_id": "2299886494",
        "repo_full_name": "lobehub/lobe-chat",
        "pr_number": 8853,
        "pr_file": "packages/model-runtime/src/comfyui/index.ts",
        "discussion_id": "2299585872",
        "commented_code": "@@ -0,0 +1,298 @@\n+import { CallWrapper, ComfyApi, PromptBuilder } from '@saintno/comfyui-sdk';\n+import type {\n+  BasicCredentials,\n+  BearerTokenCredentials,\n+  CustomCredentials,\n+} from '@saintno/comfyui-sdk';\n+import debug from 'debug';\n+\n+import { ChatModelCard } from '@/types/llm';\n+import { ComfyUIKeyVault } from '@/types/user/settings';\n+\n+import { LobeRuntimeAI } from '../BaseAI';\n+import { AgentRuntimeErrorType } from '../error';\n+import { CreateImagePayload, CreateImageResponse } from '../types/image';\n+import { parseComfyUIErrorMessage } from '../utils/comfyuiErrorParser';\n+import { AgentRuntimeError } from '../utils/createError';\n+import { MODEL_LIST_CONFIGS, processModelList } from '../utils/modelParse';\n+import { COMFYUI_DEFAULTS, COMFYUI_ERROR_TYPES } from './constants';\n+import { ModelResolver } from './utils/modelResolver';\n+import { WorkflowDetector } from './utils/workflowDetector';\n+import { WorkflowRouter } from './utils/workflowRouter';\n+\n+const log = debug('lobe-image:comfyui');\n+// Removed unused debugVerbose variable\n+\n+/**\n+ * ComfyUI Runtime implementation / ComfyUI Runtime \u5b9e\u73b0\n+ * Supports text-to-image and image editing for FLUX series models / \u652f\u6301 FLUX \u7cfb\u5217\u6a21\u578b\u7684\u6587\u751f\u56fe\u548c\u56fe\u50cf\u7f16\u8f91\n+ */\n+// Export ComfyUI utilities and types\n+export { ModelResolver as ComfyUIModelResolver } from './utils/modelResolver';\n+export * from './workflows';\n+\n+export class LobeComfyUI implements LobeRuntimeAI {\n+  private client: ComfyApi;\n+  private options: ComfyUIKeyVault;\n+  private modelResolver: ModelResolver;\n+\n+  private connectionValidated: boolean;\n+  baseURL: string;\n+\n+  constructor(options: ComfyUIKeyVault = {}) {\n+    console.log('\ud83c\udfd7\ufe0f ComfyUI Constructor called with options:', {\n+      authType: options.authType,\n+      baseURL: options.baseURL,\n+    });\n+    const { baseURL, authType = 'none', apiKey, username, password, customHeaders } = options;\n+\n+    const resolvedBaseURL = baseURL || process.env.COMFYUI_DEFAULT_URL || COMFYUI_DEFAULTS.BASE_URL;\n+\n+    if (authType === 'basic' && (!username || !password)) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidComfyUIArgs);\n+    }\n+    if (authType === 'bearer' && !apiKey) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidProviderAPIKey);\n+    }\n+    if (authType === 'custom' && (!customHeaders || Object.keys(customHeaders).length === 0)) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidComfyUIArgs);\n+    }\n+\n+    this.options = options;\n+    this.baseURL = resolvedBaseURL;\n+    const credentials = this.createCredentials(this.options);\n+    this.connectionValidated = false;\n+\n+    this.client = new ComfyApi(this.baseURL, undefined, { credentials });\n+    this.client.init();\n+\n+    this.modelResolver = new ModelResolver(this.client);\n+  }\n+\n+  /**\n+   * \u786e\u4fdd ComfyUI \u8fde\u63a5\u6709\u6548\uff0c\u4f7f\u7528\u73b0\u6709\u7684\u9519\u8bef\u5904\u7406\u5668\n+   */\n+  private async ensureConnection(): Promise<void> {\n+    console.log('\ud83d\ude80\ud83d\ude80\ud83d\ude80 ensureConnection() CALLED - Starting connection validation');\n+    if (this.connectionValidated) {\n+      console.log('\u2705 Connection already validated, skipping');\n+      return;\n+    }\n+\n+    try {\n+      const models = await this.modelResolver.getAvailableModelFiles();\n+\n+      if (!Array.isArray(models)) {\n+        throw new Error('Invalid response from ComfyUI server');\n+      }\n+\n+      this.connectionValidated = true;\n+    } catch (error: unknown) {\n+      console.log('\ud83d\udd25\ud83d\udd25\ud83d\udd25 ComfyUI Connection Error Caught:', {\n+        error: error,\n+        errorConstructor: (error as any)?.constructor?.name,\n+        errorMessage: error instanceof Error ? error.message : 'Unknown error',\n+        errorStatus: (error as any)?.status,\n+        errorStatusCode: (error as any)?.statusCode,\n+        errorType: typeof error,\n+      });\n+      log('Connection error caught:', error);\n+\n+      const { error: parsedError, errorType } = parseComfyUIErrorMessage(error);\n+      throw AgentRuntimeError.createImage({\n+        error: parsedError,\n+        errorType,\n+        provider: 'comfyui',\n+      });\n+    }\n+  }\n+\n+  /**\n+   * Discover available models from ComfyUI server\n+   */\n+  async models(): Promise<ChatModelCard[]> {\n+    await this.ensureConnection();",
        "comment_created_at": "2025-08-26T06:10:55+00:00",
        "comment_author": "MapleEve",
        "comment_body": "\u5b9e\u9645\u4e0a\u7528\u6237\u5728 settings \u91cc\u9762\u9009\u62e9\u7684\u662f\u201c\u5de5\u4f5c\u6d41\u201d\u800c\u4e0d\u662f\u201c\u6a21\u578b\u201d",
        "pr_file_module": null
      },
      {
        "comment_id": "2299887384",
        "repo_full_name": "lobehub/lobe-chat",
        "pr_number": 8853,
        "pr_file": "packages/model-runtime/src/comfyui/index.ts",
        "discussion_id": "2299585872",
        "commented_code": "@@ -0,0 +1,298 @@\n+import { CallWrapper, ComfyApi, PromptBuilder } from '@saintno/comfyui-sdk';\n+import type {\n+  BasicCredentials,\n+  BearerTokenCredentials,\n+  CustomCredentials,\n+} from '@saintno/comfyui-sdk';\n+import debug from 'debug';\n+\n+import { ChatModelCard } from '@/types/llm';\n+import { ComfyUIKeyVault } from '@/types/user/settings';\n+\n+import { LobeRuntimeAI } from '../BaseAI';\n+import { AgentRuntimeErrorType } from '../error';\n+import { CreateImagePayload, CreateImageResponse } from '../types/image';\n+import { parseComfyUIErrorMessage } from '../utils/comfyuiErrorParser';\n+import { AgentRuntimeError } from '../utils/createError';\n+import { MODEL_LIST_CONFIGS, processModelList } from '../utils/modelParse';\n+import { COMFYUI_DEFAULTS, COMFYUI_ERROR_TYPES } from './constants';\n+import { ModelResolver } from './utils/modelResolver';\n+import { WorkflowDetector } from './utils/workflowDetector';\n+import { WorkflowRouter } from './utils/workflowRouter';\n+\n+const log = debug('lobe-image:comfyui');\n+// Removed unused debugVerbose variable\n+\n+/**\n+ * ComfyUI Runtime implementation / ComfyUI Runtime \u5b9e\u73b0\n+ * Supports text-to-image and image editing for FLUX series models / \u652f\u6301 FLUX \u7cfb\u5217\u6a21\u578b\u7684\u6587\u751f\u56fe\u548c\u56fe\u50cf\u7f16\u8f91\n+ */\n+// Export ComfyUI utilities and types\n+export { ModelResolver as ComfyUIModelResolver } from './utils/modelResolver';\n+export * from './workflows';\n+\n+export class LobeComfyUI implements LobeRuntimeAI {\n+  private client: ComfyApi;\n+  private options: ComfyUIKeyVault;\n+  private modelResolver: ModelResolver;\n+\n+  private connectionValidated: boolean;\n+  baseURL: string;\n+\n+  constructor(options: ComfyUIKeyVault = {}) {\n+    console.log('\ud83c\udfd7\ufe0f ComfyUI Constructor called with options:', {\n+      authType: options.authType,\n+      baseURL: options.baseURL,\n+    });\n+    const { baseURL, authType = 'none', apiKey, username, password, customHeaders } = options;\n+\n+    const resolvedBaseURL = baseURL || process.env.COMFYUI_DEFAULT_URL || COMFYUI_DEFAULTS.BASE_URL;\n+\n+    if (authType === 'basic' && (!username || !password)) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidComfyUIArgs);\n+    }\n+    if (authType === 'bearer' && !apiKey) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidProviderAPIKey);\n+    }\n+    if (authType === 'custom' && (!customHeaders || Object.keys(customHeaders).length === 0)) {\n+      throw AgentRuntimeError.createError(AgentRuntimeErrorType.InvalidComfyUIArgs);\n+    }\n+\n+    this.options = options;\n+    this.baseURL = resolvedBaseURL;\n+    const credentials = this.createCredentials(this.options);\n+    this.connectionValidated = false;\n+\n+    this.client = new ComfyApi(this.baseURL, undefined, { credentials });\n+    this.client.init();\n+\n+    this.modelResolver = new ModelResolver(this.client);\n+  }\n+\n+  /**\n+   * \u786e\u4fdd ComfyUI \u8fde\u63a5\u6709\u6548\uff0c\u4f7f\u7528\u73b0\u6709\u7684\u9519\u8bef\u5904\u7406\u5668\n+   */\n+  private async ensureConnection(): Promise<void> {\n+    console.log('\ud83d\ude80\ud83d\ude80\ud83d\ude80 ensureConnection() CALLED - Starting connection validation');\n+    if (this.connectionValidated) {\n+      console.log('\u2705 Connection already validated, skipping');\n+      return;\n+    }\n+\n+    try {\n+      const models = await this.modelResolver.getAvailableModelFiles();\n+\n+      if (!Array.isArray(models)) {\n+        throw new Error('Invalid response from ComfyUI server');\n+      }\n+\n+      this.connectionValidated = true;\n+    } catch (error: unknown) {\n+      console.log('\ud83d\udd25\ud83d\udd25\ud83d\udd25 ComfyUI Connection Error Caught:', {\n+        error: error,\n+        errorConstructor: (error as any)?.constructor?.name,\n+        errorMessage: error instanceof Error ? error.message : 'Unknown error',\n+        errorStatus: (error as any)?.status,\n+        errorStatusCode: (error as any)?.statusCode,\n+        errorType: typeof error,\n+      });\n+      log('Connection error caught:', error);\n+\n+      const { error: parsedError, errorType } = parseComfyUIErrorMessage(error);\n+      throw AgentRuntimeError.createImage({\n+        error: parsedError,\n+        errorType,\n+        provider: 'comfyui',\n+      });\n+    }\n+  }\n+\n+  /**\n+   * Discover available models from ComfyUI server\n+   */\n+  async models(): Promise<ChatModelCard[]> {\n+    await this.ensureConnection();",
        "comment_created_at": "2025-08-26T06:11:27+00:00",
        "comment_author": "MapleEve",
        "comment_body": "\u6a21\u578b\u662f\u901a\u8fc7\u5de5\u4f5c\u6d41\u5339\u914d\u4e0a\u7684\uff0c\u540e\u7eed\u518d\u505a\u6210\u53ef\u9009\u9879\r\n\r\n\u76ee\u524d\u67b6\u6784\u6bd4\u8f83\u6e05\u6670\uff0c\u652f\u6301\u65b9\u4fbf\u7684\u5e73\u884c\u6269\u5bb9",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2197205189",
    "pr_number": 8335,
    "pr_file": "src/server/services/document/index.ts",
    "created_at": "2025-07-10T10:03:07+00:00",
    "commented_code": "* \u89e3\u6790\u6587\u4ef6\u5185\u5bb9\n    *\n    */\n-  async parseFile(fileId: string): Promise<LobeDocument> {\n-    const { filePath, file, cleanup } = await this.fileService.downloadFileToLocal(fileId);\n+  async parseFile(fileId: string, hash: string): Promise<LobeDocument> {\n+    try {\n+      const { filePath, file, cleanup } = await this.fileService.downloadFileToLocal(fileId);\n \n-    const logPrefix = `[${file.name}]`;\n-    log(`${logPrefix} \u5f00\u59cb\u89e3\u6790\u6587\u4ef6, \u8def\u5f84: ${filePath}`);\n+      const logPrefix = `[${file.name}]`;\n+      log(`${logPrefix} \u5f00\u59cb\u89e3\u6790\u6587\u4ef6, \u8def\u5f84: ${filePath}`);\n \n-    try {\n-      // \u4f7f\u7528loadFile\u52a0\u8f7d\u6587\u4ef6\u5185\u5bb9\n-      const fileDocument = await loadFile(filePath);\n+      try {\n+        // \u4f7f\u7528loadFile\u52a0\u8f7d\u6587\u4ef6\u5185\u5bb9\n+        const fileDocument = await loadFile(filePath);\n \n-      log(`${logPrefix} \u6587\u4ef6\u89e3\u6790\u6210\u529f %O`, {\n-        fileType: fileDocument.fileType,\n-        size: fileDocument.content.length,\n-      });\n+        log(`${logPrefix} \u6587\u4ef6\u89e3\u6790\u6210\u529f %O`, {\n+          fileType: fileDocument.fileType,\n+          size: fileDocument.content.length,\n+        });\n \n-      const document = await this.documentModel.create({\n-        content: fileDocument.content,\n-        fileId,\n-        fileType: file.fileType,\n-        metadata: fileDocument.metadata,\n-        pages: fileDocument.pages,\n-        source: file.url,\n-        sourceType: 'file',\n-        title: fileDocument.metadata?.title,\n-        totalCharCount: fileDocument.totalCharCount,\n-        totalLineCount: fileDocument.totalLineCount,\n-      });\n+        const document = await this.documentModel.create({\n+          content: fileDocument.content,\n+          fileId,\n+          fileType: file.fileType,\n+          metadata: fileDocument.metadata,\n+          pages: fileDocument.pages,\n+          source: file.url,\n+          sourceType: 'file',\n+          title: fileDocument.metadata?.title,\n+          totalCharCount: fileDocument.totalCharCount,\n+          totalLineCount: fileDocument.totalLineCount,\n+        });\n \n-      return document as LobeDocument;\n+        return document as LobeDocument;\n+      } catch (error) {\n+        console.error(`${logPrefix} \u6587\u4ef6\u89e3\u6790\u5931\u8d25:`, error);\n+        throw error;\n+      } finally {\n+        cleanup();\n+      }\n     } catch (error) {\n-      console.error(`${logPrefix} \u6587\u4ef6\u89e3\u6790\u5931\u8d25:`, error);\n+      console.error(`\u6587\u4ef6\u89e3\u6790\u5931\u8d25-\u8fdc\u7aef\u627e\u4e0d\u5230\u6587\u4ef6:`, error);",
    "repo_full_name": "lobehub/lobe-chat",
    "discussion_comments": [
      {
        "comment_id": "2197205189",
        "repo_full_name": "lobehub/lobe-chat",
        "pr_number": 8335,
        "pr_file": "src/server/services/document/index.ts",
        "discussion_id": "2197205189",
        "commented_code": "@@ -27,40 +27,50 @@ export class DocumentService {\n    * \u89e3\u6790\u6587\u4ef6\u5185\u5bb9\n    *\n    */\n-  async parseFile(fileId: string): Promise<LobeDocument> {\n-    const { filePath, file, cleanup } = await this.fileService.downloadFileToLocal(fileId);\n+  async parseFile(fileId: string, hash: string): Promise<LobeDocument> {\n+    try {\n+      const { filePath, file, cleanup } = await this.fileService.downloadFileToLocal(fileId);\n \n-    const logPrefix = `[${file.name}]`;\n-    log(`${logPrefix} \u5f00\u59cb\u89e3\u6790\u6587\u4ef6, \u8def\u5f84: ${filePath}`);\n+      const logPrefix = `[${file.name}]`;\n+      log(`${logPrefix} \u5f00\u59cb\u89e3\u6790\u6587\u4ef6, \u8def\u5f84: ${filePath}`);\n \n-    try {\n-      // \u4f7f\u7528loadFile\u52a0\u8f7d\u6587\u4ef6\u5185\u5bb9\n-      const fileDocument = await loadFile(filePath);\n+      try {\n+        // \u4f7f\u7528loadFile\u52a0\u8f7d\u6587\u4ef6\u5185\u5bb9\n+        const fileDocument = await loadFile(filePath);\n \n-      log(`${logPrefix} \u6587\u4ef6\u89e3\u6790\u6210\u529f %O`, {\n-        fileType: fileDocument.fileType,\n-        size: fileDocument.content.length,\n-      });\n+        log(`${logPrefix} \u6587\u4ef6\u89e3\u6790\u6210\u529f %O`, {\n+          fileType: fileDocument.fileType,\n+          size: fileDocument.content.length,\n+        });\n \n-      const document = await this.documentModel.create({\n-        content: fileDocument.content,\n-        fileId,\n-        fileType: file.fileType,\n-        metadata: fileDocument.metadata,\n-        pages: fileDocument.pages,\n-        source: file.url,\n-        sourceType: 'file',\n-        title: fileDocument.metadata?.title,\n-        totalCharCount: fileDocument.totalCharCount,\n-        totalLineCount: fileDocument.totalLineCount,\n-      });\n+        const document = await this.documentModel.create({\n+          content: fileDocument.content,\n+          fileId,\n+          fileType: file.fileType,\n+          metadata: fileDocument.metadata,\n+          pages: fileDocument.pages,\n+          source: file.url,\n+          sourceType: 'file',\n+          title: fileDocument.metadata?.title,\n+          totalCharCount: fileDocument.totalCharCount,\n+          totalLineCount: fileDocument.totalLineCount,\n+        });\n \n-      return document as LobeDocument;\n+        return document as LobeDocument;\n+      } catch (error) {\n+        console.error(`${logPrefix} \u6587\u4ef6\u89e3\u6790\u5931\u8d25:`, error);\n+        throw error;\n+      } finally {\n+        cleanup();\n+      }\n     } catch (error) {\n-      console.error(`${logPrefix} \u6587\u4ef6\u89e3\u6790\u5931\u8d25:`, error);\n+      console.error(`\u6587\u4ef6\u89e3\u6790\u5931\u8d25-\u8fdc\u7aef\u627e\u4e0d\u5230\u6587\u4ef6:`, error);",
        "comment_created_at": "2025-07-10T10:03:07+00:00",
        "comment_author": "arvinxx",
        "comment_body": "\u8fd9\u91cc\u5957\u4e24\u5c42error \u6709\u70b9\u6076\u5fc3\uff0cOrigin File Not Found \u662f\u4e0d\u662f\u53ea\u6709\u5728\n\n```ts\n      const { filePath, file, cleanup } = await this.fileService.downloadFileToLocal(fileId);\n```\n\n\u8fd9\u91cc\u624d\u4f1a\u51fa\u73b0\uff1f\u5982\u679c\u662f\u7684\u8bdd\u662f\u4e0d\u662f\u53ef\u4ee5\u53ea\u5305\u5230\u8fd9\u4e2a\u5c42\u9762\uff1f\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2214843564",
        "repo_full_name": "lobehub/lobe-chat",
        "pr_number": 8335,
        "pr_file": "src/server/services/document/index.ts",
        "discussion_id": "2197205189",
        "commented_code": "@@ -27,40 +27,50 @@ export class DocumentService {\n    * \u89e3\u6790\u6587\u4ef6\u5185\u5bb9\n    *\n    */\n-  async parseFile(fileId: string): Promise<LobeDocument> {\n-    const { filePath, file, cleanup } = await this.fileService.downloadFileToLocal(fileId);\n+  async parseFile(fileId: string, hash: string): Promise<LobeDocument> {\n+    try {\n+      const { filePath, file, cleanup } = await this.fileService.downloadFileToLocal(fileId);\n \n-    const logPrefix = `[${file.name}]`;\n-    log(`${logPrefix} \u5f00\u59cb\u89e3\u6790\u6587\u4ef6, \u8def\u5f84: ${filePath}`);\n+      const logPrefix = `[${file.name}]`;\n+      log(`${logPrefix} \u5f00\u59cb\u89e3\u6790\u6587\u4ef6, \u8def\u5f84: ${filePath}`);\n \n-    try {\n-      // \u4f7f\u7528loadFile\u52a0\u8f7d\u6587\u4ef6\u5185\u5bb9\n-      const fileDocument = await loadFile(filePath);\n+      try {\n+        // \u4f7f\u7528loadFile\u52a0\u8f7d\u6587\u4ef6\u5185\u5bb9\n+        const fileDocument = await loadFile(filePath);\n \n-      log(`${logPrefix} \u6587\u4ef6\u89e3\u6790\u6210\u529f %O`, {\n-        fileType: fileDocument.fileType,\n-        size: fileDocument.content.length,\n-      });\n+        log(`${logPrefix} \u6587\u4ef6\u89e3\u6790\u6210\u529f %O`, {\n+          fileType: fileDocument.fileType,\n+          size: fileDocument.content.length,\n+        });\n \n-      const document = await this.documentModel.create({\n-        content: fileDocument.content,\n-        fileId,\n-        fileType: file.fileType,\n-        metadata: fileDocument.metadata,\n-        pages: fileDocument.pages,\n-        source: file.url,\n-        sourceType: 'file',\n-        title: fileDocument.metadata?.title,\n-        totalCharCount: fileDocument.totalCharCount,\n-        totalLineCount: fileDocument.totalLineCount,\n-      });\n+        const document = await this.documentModel.create({\n+          content: fileDocument.content,\n+          fileId,\n+          fileType: file.fileType,\n+          metadata: fileDocument.metadata,\n+          pages: fileDocument.pages,\n+          source: file.url,\n+          sourceType: 'file',\n+          title: fileDocument.metadata?.title,\n+          totalCharCount: fileDocument.totalCharCount,\n+          totalLineCount: fileDocument.totalLineCount,\n+        });\n \n-      return document as LobeDocument;\n+        return document as LobeDocument;\n+      } catch (error) {\n+        console.error(`${logPrefix} \u6587\u4ef6\u89e3\u6790\u5931\u8d25:`, error);\n+        throw error;\n+      } finally {\n+        cleanup();\n+      }\n     } catch (error) {\n-      console.error(`${logPrefix} \u6587\u4ef6\u89e3\u6790\u5931\u8d25:`, error);\n+      console.error(`\u6587\u4ef6\u89e3\u6790\u5931\u8d25-\u8fdc\u7aef\u627e\u4e0d\u5230\u6587\u4ef6:`, error);",
        "comment_created_at": "2025-07-18T04:06:49+00:00",
        "comment_author": "ONLY-yours",
        "comment_body": "\u4e0d\u592a\u884c\uff0c\u4e00\u4e2a\u662f createFiles \u65f6\u5019\u7684\u515c\u5e95\uff08\u867d\u7136\u611f\u89c9\u6ca1\u89e6\u53d1\u8fc7\u8fd9\u4e2a\u521b\u5efa\u5931\u8d25\u7684\uff09\r\n\r\n\u5916\u5c42\u7684\u624d\u662f\u627e\u4e0d\u5230\u6587\u4ef6",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1639351332",
    "pr_number": 2867,
    "pr_file": "src/services/ollama.ts",
    "created_at": "2024-06-14T06:49:57+00:00",
    "commented_code": "this._client.abort();\n   };\n \n-  pullModel = async (model: string): Promise<AsyncGenerator<ProgressResponse>> => {\n-    let response: Response | AsyncGenerator<ProgressResponse>;\n+  pullModel = async (model: string): Promise<AsyncIterable<ProgressResponse>> => {\n+    let response: AsyncIterable<ProgressResponse>;\n     try {\n       response = await this.getOllamaClient().pull({ insecure: true, model, stream: true });\n       return response;\n     } catch {\n-      response = createErrorResponse(ChatErrorType.OllamaServiceUnavailable, {\n+      throw createErrorResponse(ChatErrorType.OllamaServiceUnavailable, {",
    "repo_full_name": "lobehub/lobe-chat",
    "discussion_comments": [
      {
        "comment_id": "1639351332",
        "repo_full_name": "lobehub/lobe-chat",
        "pr_number": 2867,
        "pr_file": "src/services/ollama.ts",
        "discussion_id": "1639351332",
        "commented_code": "@@ -42,23 +42,18 @@ export class OllamaService {\n     this._client.abort();\n   };\n \n-  pullModel = async (model: string): Promise<AsyncGenerator<ProgressResponse>> => {\n-    let response: Response | AsyncGenerator<ProgressResponse>;\n+  pullModel = async (model: string): Promise<AsyncIterable<ProgressResponse>> => {\n+    let response: AsyncIterable<ProgressResponse>;\n     try {\n       response = await this.getOllamaClient().pull({ insecure: true, model, stream: true });\n       return response;\n     } catch {\n-      response = createErrorResponse(ChatErrorType.OllamaServiceUnavailable, {\n+      throw createErrorResponse(ChatErrorType.OllamaServiceUnavailable, {",
        "comment_created_at": "2024-06-14T06:49:57+00:00",
        "comment_author": "arvinxx",
        "comment_body": "\u5982\u679c\u53ea\u662f\u7c7b\u578b\u53d8\u5316\uff0c\u4e0d\u5e94\u8be5\u53d8\u66f4\u8fd9\u4e00\u5904\u7684\u529f\u80fd\u5b9e\u73b0\u5427",
        "pr_file_module": null
      },
      {
        "comment_id": "1639383437",
        "repo_full_name": "lobehub/lobe-chat",
        "pr_number": 2867,
        "pr_file": "src/services/ollama.ts",
        "discussion_id": "1639351332",
        "commented_code": "@@ -42,23 +42,18 @@ export class OllamaService {\n     this._client.abort();\n   };\n \n-  pullModel = async (model: string): Promise<AsyncGenerator<ProgressResponse>> => {\n-    let response: Response | AsyncGenerator<ProgressResponse>;\n+  pullModel = async (model: string): Promise<AsyncIterable<ProgressResponse>> => {\n+    let response: AsyncIterable<ProgressResponse>;\n     try {\n       response = await this.getOllamaClient().pull({ insecure: true, model, stream: true });\n       return response;\n     } catch {\n-      response = createErrorResponse(ChatErrorType.OllamaServiceUnavailable, {\n+      throw createErrorResponse(ChatErrorType.OllamaServiceUnavailable, {",
        "comment_created_at": "2024-06-14T07:19:34+00:00",
        "comment_author": "RubuJam",
        "comment_body": "\u53ef\u4ee5\u4e0d\u53d8\u66f4\uff0c\u4f46\u6539\u5199\u540e\u4f1a\u66f4\u52a0\u6e05\u6670\uff0c\u5982\u679c\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u53ef\u4ee5\u7acb\u5373\u7ec8\u6b62\u51fd\u6570\u7684\u6267\u884c\u5e76\u5c06\u9519\u8bef\u629b\u51fa\uff0c\u540c\u65f6\u5728 `catch` \u5757\u4e4b\u540e,\u6709\u4e00\u4e2a `if` \u8bed\u53e5\u7528\u4e8e\u68c0\u67e5 `response.ok`\u3002\u4f46\u5982\u679c\u5728 `catch` \u5757\u4e2d\u5c06\u9519\u8bef\u54cd\u5e94\u8d4b\u503c\u7ed9 `response`\uff0c\u90a3\u4e48\u8fd9\u4e2a `if` \u8bed\u53e5\u5c31\u6ca1\u6709\u610f\u4e49\u4e86\uff0c\u56e0\u4e3a `response` \u5c06\u59cb\u7ec8\u662f\u4e00\u4e2a\u9519\u8bef\u54cd\u5e94\uff0c\u5e76\u4e14 `response.ok` \u5c06\u59cb\u7ec8\u4e3a `false`",
        "pr_file_module": null
      },
      {
        "comment_id": "1639412460",
        "repo_full_name": "lobehub/lobe-chat",
        "pr_number": 2867,
        "pr_file": "src/services/ollama.ts",
        "discussion_id": "1639351332",
        "commented_code": "@@ -42,23 +42,18 @@ export class OllamaService {\n     this._client.abort();\n   };\n \n-  pullModel = async (model: string): Promise<AsyncGenerator<ProgressResponse>> => {\n-    let response: Response | AsyncGenerator<ProgressResponse>;\n+  pullModel = async (model: string): Promise<AsyncIterable<ProgressResponse>> => {\n+    let response: AsyncIterable<ProgressResponse>;\n     try {\n       response = await this.getOllamaClient().pull({ insecure: true, model, stream: true });\n       return response;\n     } catch {\n-      response = createErrorResponse(ChatErrorType.OllamaServiceUnavailable, {\n+      throw createErrorResponse(ChatErrorType.OllamaServiceUnavailable, {",
        "comment_created_at": "2024-06-14T07:45:11+00:00",
        "comment_author": "arvinxx",
        "comment_body": "\u4e0d\u5bf9\u7684\uff0c\u540e\u9762\u7684response.ok= false \u5c31\u662f\u4e3a\u4e86\u5c06\u6b64\u5904\u7684\u9519\u8bef response \u8f6c\u53d8\u6210json error\u3002 \u4f60\u73b0\u5728\u8fd9\u6837\u76f4\u63a5 throw error response \u53cd\u800c\u662f\u6539\u574f\u4e86",
        "pr_file_module": null
      },
      {
        "comment_id": "1639420030",
        "repo_full_name": "lobehub/lobe-chat",
        "pr_number": 2867,
        "pr_file": "src/services/ollama.ts",
        "discussion_id": "1639351332",
        "commented_code": "@@ -42,23 +42,18 @@ export class OllamaService {\n     this._client.abort();\n   };\n \n-  pullModel = async (model: string): Promise<AsyncGenerator<ProgressResponse>> => {\n-    let response: Response | AsyncGenerator<ProgressResponse>;\n+  pullModel = async (model: string): Promise<AsyncIterable<ProgressResponse>> => {\n+    let response: AsyncIterable<ProgressResponse>;\n     try {\n       response = await this.getOllamaClient().pull({ insecure: true, model, stream: true });\n       return response;\n     } catch {\n-      response = createErrorResponse(ChatErrorType.OllamaServiceUnavailable, {\n+      throw createErrorResponse(ChatErrorType.OllamaServiceUnavailable, {",
        "comment_created_at": "2024-06-14T07:51:37+00:00",
        "comment_author": "RubuJam",
        "comment_body": "\u4fee\u6539\u5b8c\u6bd5 @arvinxx ",
        "pr_file_module": null
      }
    ]
  }
]