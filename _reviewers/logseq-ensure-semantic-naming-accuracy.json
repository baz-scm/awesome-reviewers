[
  {
    "discussion_id": "1966472462",
    "pr_number": 11739,
    "pr_file": "deps/db/src/logseq/db/frontend/property.cljs",
    "created_at": "2025-02-22T08:30:27+00:00",
    "commented_code": ":rtc/ignore-attr-when-init-download true\n             :rtc/ignore-attr-when-syncing true}}\n \n+     :logseq.property.view/identity",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1966472462",
        "repo_full_name": "logseq/logseq",
        "pr_number": 11739,
        "pr_file": "deps/db/src/logseq/db/frontend/property.cljs",
        "discussion_id": "1966472462",
        "commented_code": "@@ -407,6 +407,17 @@\n             :rtc/ignore-attr-when-init-download true\n             :rtc/ignore-attr-when-syncing true}}\n \n+     :logseq.property.view/identity",
        "comment_created_at": "2025-02-22T08:30:27+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "I found this name confusing as I thought they were going to be unique per view but instead it's acting like another type. Some possible suggestions: ui-type, feature-type, feature",
        "pr_file_module": null
      },
      {
        "comment_id": "1967106566",
        "repo_full_name": "logseq/logseq",
        "pr_number": 11739,
        "pr_file": "deps/db/src/logseq/db/frontend/property.cljs",
        "discussion_id": "1966472462",
        "commented_code": "@@ -407,6 +407,17 @@\n             :rtc/ignore-attr-when-init-download true\n             :rtc/ignore-attr-when-syncing true}}\n \n+     :logseq.property.view/identity",
        "comment_created_at": "2025-02-24T06:52:18+00:00",
        "comment_author": "tiensonqin",
        "comment_body": "Indeed! Handled by https://github.com/logseq/logseq/commit/3761194ff4f728eb8299e7457cb67581ba1dc148.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1851085252",
    "pr_number": 11606,
    "pr_file": "deps/db/src/logseq/db/frontend/property.cljs",
    "created_at": "2024-11-20T22:51:54+00:00",
    "commented_code": ":public? true\n                                      :view-context :page}\n                             :queryable? true}\n-   ;; :logseq.property/default-value {:title \"Default value\"\n-   ;;                                 :schema {:type :any\n-   ;;                                          :public? true\n-   ;;                                          :view-context :property}}\n+   :logseq.property/default-value {:title \"Default value\"\n+                                   :schema {:type :entity\n+                                            :public? false\n+                                            :hide? true\n+                                            :view-context :property}}\n+   :logseq.property/checkbox-default-value {:title \"Checkbox default value\"",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1851085252",
        "repo_full_name": "logseq/logseq",
        "pr_number": 11606,
        "pr_file": "deps/db/src/logseq/db/frontend/property.cljs",
        "discussion_id": "1851085252",
        "commented_code": "@@ -147,10 +147,16 @@\n                                      :public? true\n                                      :view-context :page}\n                             :queryable? true}\n-   ;; :logseq.property/default-value {:title \"Default value\"\n-   ;;                                 :schema {:type :any\n-   ;;                                          :public? true\n-   ;;                                          :view-context :property}}\n+   :logseq.property/default-value {:title \"Default value\"\n+                                   :schema {:type :entity\n+                                            :public? false\n+                                            :hide? true\n+                                            :view-context :property}}\n+   :logseq.property/checkbox-default-value {:title \"Checkbox default value\"",
        "comment_created_at": "2024-11-20T22:51:54+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "Are there any other types that won't have ref default values? Maybe :datetime? If there are other non-ref values should we generalize the name and :type e.g. scalar-default-value and :any so we don't have to keep modifying all the places this is used",
        "pr_file_module": null
      },
      {
        "comment_id": "1855919466",
        "repo_full_name": "logseq/logseq",
        "pr_number": 11606,
        "pr_file": "deps/db/src/logseq/db/frontend/property.cljs",
        "discussion_id": "1851085252",
        "commented_code": "@@ -147,10 +147,16 @@\n                                      :public? true\n                                      :view-context :page}\n                             :queryable? true}\n-   ;; :logseq.property/default-value {:title \"Default value\"\n-   ;;                                 :schema {:type :any\n-   ;;                                          :public? true\n-   ;;                                          :view-context :property}}\n+   :logseq.property/default-value {:title \"Default value\"\n+                                   :schema {:type :entity\n+                                            :public? false\n+                                            :hide? true\n+                                            :view-context :property}}\n+   :logseq.property/checkbox-default-value {:title \"Checkbox default value\"",
        "comment_created_at": "2024-11-25T06:46:11+00:00",
        "comment_author": "tiensonqin",
        "comment_body": "Nice suggestion! We may have other types that have non-ref default values, I renamed it to `:logseq.property/scalar-default-value`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1581220567",
    "pr_number": 11149,
    "pr_file": "deps/publishing/src/logseq/publishing/html.cljs",
    "created_at": "2024-04-26T15:46:55+00:00",
    "commented_code": ";; Copied from https://github.com/babashka/babashka/blob/8c1077af00c818ade9e646dfe1297bbe24b17f4d/examples/notes.clj#L21\n (defn- html [v]\n   (cond (vector? v)\n-    (let [tag (first v)\n-          attrs (second v)\n-          attrs (when (map? attrs) attrs)\n-          elts (if attrs (nnext v) (next v))\n-          tag-name (name tag)]\n-      (gstring/format \"<%s%s>%s</%s>\n\" tag-name (html attrs) (html elts) tag-name))\n-    (map? v)\n-    (string/join \"\"\n-                 (keep (fn [[k v]]\n+        (let [tag (first v)\n+              attrs (second v)\n+              attrs (when (map? attrs) attrs)\n+              elts (if attrs (nnext v) (next v))\n+              tag-name (name tag)]\n+          (gstring/format \"<%s%s>%s</%s>\n\" tag-name (html attrs) (html elts) tag-name))\n+        (map? v)\n+        (string/join \"\"\n+                     (keep (fn [[k v]]\n                          ;; Skip nil values because some html tags haven't been\n                          ;; given values through html-options\n-                         (when (some? v)\n-                           (gstring/format \" %s=\\\"%s\\\"\" (name k) v))) v))\n-    (seq? v)\n-    (string/join \" \" (map html v))\n-    :else (str v)))\n+                             (when (some? v)\n+                               (gstring/format \" %s=\\\"%s\\\"\" (name k) v))) v))\n+        (seq? v)\n+        (string/join \" \" (map html v))\n+        :else (str v)))\n \n (defn- ^:large-vars/html publishing-html\n   [transit-db app-state options]\n-  (let [{:keys [icon name alias title description url]} options",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1581220567",
        "repo_full_name": "logseq/logseq",
        "pr_number": 11149,
        "pr_file": "deps/publishing/src/logseq/publishing/html.cljs",
        "discussion_id": "1581220567",
        "commented_code": "@@ -22,26 +22,26 @@ necessary db filtering\"\n ;; Copied from https://github.com/babashka/babashka/blob/8c1077af00c818ade9e646dfe1297bbe24b17f4d/examples/notes.clj#L21\n (defn- html [v]\n   (cond (vector? v)\n-    (let [tag (first v)\n-          attrs (second v)\n-          attrs (when (map? attrs) attrs)\n-          elts (if attrs (nnext v) (next v))\n-          tag-name (name tag)]\n-      (gstring/format \"<%s%s>%s</%s>\\n\" tag-name (html attrs) (html elts) tag-name))\n-    (map? v)\n-    (string/join \"\"\n-                 (keep (fn [[k v]]\n+        (let [tag (first v)\n+              attrs (second v)\n+              attrs (when (map? attrs) attrs)\n+              elts (if attrs (nnext v) (next v))\n+              tag-name (name tag)]\n+          (gstring/format \"<%s%s>%s</%s>\\n\" tag-name (html attrs) (html elts) tag-name))\n+        (map? v)\n+        (string/join \"\"\n+                     (keep (fn [[k v]]\n                          ;; Skip nil values because some html tags haven't been\n                          ;; given values through html-options\n-                         (when (some? v)\n-                           (gstring/format \" %s=\\\"%s\\\"\" (name k) v))) v))\n-    (seq? v)\n-    (string/join \" \" (map html v))\n-    :else (str v)))\n+                             (when (some? v)\n+                               (gstring/format \" %s=\\\"%s\\\"\" (name k) v))) v))\n+        (seq? v)\n+        (string/join \" \" (map html v))\n+        :else (str v)))\n \n (defn- ^:large-vars/html publishing-html\n   [transit-db app-state options]\n-  (let [{:keys [icon name alias title description url]} options",
        "comment_created_at": "2024-04-26T15:46:55+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "Can we rename this to before-scripts or scripts-before? At some point someone will also want to inject scripts at the end to override logseq js",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "760703375",
    "pr_number": 3328,
    "pr_file": "src/main/frontend/components/block.cljs",
    "created_at": "2021-12-02T01:49:16+00:00",
    "commented_code": "[frontend.components.lazy-editor :as lazy-editor]\n             [frontend.components.svg :as svg]\n             [frontend.components.macro :as macro]\n+            [frontend.encrypt :as e]",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "760703375",
        "repo_full_name": "logseq/logseq",
        "pr_number": 3328,
        "pr_file": "src/main/frontend/components/block.cljs",
        "discussion_id": "760703375",
        "commented_code": "@@ -14,6 +14,7 @@\n             [frontend.components.lazy-editor :as lazy-editor]\n             [frontend.components.svg :as svg]\n             [frontend.components.macro :as macro]\n+            [frontend.encrypt :as e]",
        "comment_created_at": "2021-12-02T01:49:16+00:00",
        "comment_author": "llcc",
        "comment_body": "In logseq,  `e` could be `event` or `error`, so using `encrypt` might be easier to understand than `e` here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1447847668",
    "pr_number": 10793,
    "pr_file": "src/main/frontend/db_worker.cljs",
    "created_at": "2024-01-10T19:21:05+00:00",
    "commented_code": "(defn- get-search-db\n   [repo]\n-  (get-sqlite-conn repo {:search? true}))\n+  (state/get-sqlite-conn repo {:search? true}))\n \n \n #_:clj-kondo/ignore\n-(defclass SQLiteDB\n+(defclass DBWorker",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1447847668",
        "repo_full_name": "logseq/logseq",
        "pr_number": 10793,
        "pr_file": "src/main/frontend/db_worker.cljs",
        "discussion_id": "1447847668",
        "commented_code": "@@ -200,11 +196,11 @@\n \n (defn- get-search-db\n   [repo]\n-  (get-sqlite-conn repo {:search? true}))\n+  (state/get-sqlite-conn repo {:search? true}))\n \n \n #_:clj-kondo/ignore\n-(defclass SQLiteDB\n+(defclass DBWorker",
        "comment_created_at": "2024-01-10T19:21:05+00:00",
        "comment_author": "tiensonqin",
        "comment_body": "`SQLiteDB` was renamed to `DBWorker` because it exposes other functions such as rtc-related to the main thread.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1234516213",
    "pr_number": 9695,
    "pr_file": "src/main/frontend/commands.cljs",
    "created_at": "2023-06-19T22:14:35+00:00",
    "commented_code": "[[\"Query\" [[:editor/input \"{{query }}\" {:backward-pos 2}]\n                [:editor/exit]] query-doc]\n      [\"Zotero\" (zotero-steps) \"Import Zotero journal article\"]\n-     [\"Query table function\" [[:editor/input \"{{function }}\" {:backward-pos 2}]] \"Create a query table function\"]\n+     [\"Query function\" [[:editor/input \"{{function }}\" {:backward-pos 2}]] \"Create a query function\"]",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1234516213",
        "repo_full_name": "logseq/logseq",
        "pr_number": 9695,
        "pr_file": "src/main/frontend/commands.cljs",
        "discussion_id": "1234516213",
        "commented_code": "@@ -278,7 +278,7 @@\n     [[\"Query\" [[:editor/input \"{{query }}\" {:backward-pos 2}]\n                [:editor/exit]] query-doc]\n      [\"Zotero\" (zotero-steps) \"Import Zotero journal article\"]\n-     [\"Query table function\" [[:editor/input \"{{function }}\" {:backward-pos 2}]] \"Create a query table function\"]\n+     [\"Query function\" [[:editor/input \"{{function }}\" {:backward-pos 2}]] \"Create a query function\"]",
        "comment_created_at": "2023-06-19T22:14:35+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "Since we're fixing a bug from #9563, I tweaked the name here since that PR also enhanced the command so that it can be used outside of query tables",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1197870603",
    "pr_number": 9406,
    "pr_file": "src/main/frontend/handler/editor.cljs",
    "created_at": "2023-05-18T14:03:07+00:00",
    "commented_code": "block (apply dissoc block db-schema/retract-attributes)]\n     (profile\n      \"Save block: \"\n-     (let [block' (wrap-parse-block block)\n-           opts' (merge opts {:outliner-op :save-block})]\n+     (let [original-uuid (:block/uuid (db/entity (:db/id block)))\n+           uuid-changed? (not= (:block/uuid block) original-uuid)\n+           block' (-> (wrap-parse-block block)\n+                      ;; :block/uuid might be changed when backspace/delete\n+                      ;; a block that has been refed\n+                      (assoc :block/uuid (:block/uuid block)))\n+           opts' (merge opts (cond-> {:outliner-op :save-block}\n+                               uuid-changed?\n+                               (assoc :uuid-changed {:kept (:block/uuid block)",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1197870603",
        "repo_full_name": "logseq/logseq",
        "pr_number": 9406,
        "pr_file": "src/main/frontend/handler/editor.cljs",
        "discussion_id": "1197870603",
        "commented_code": "@@ -353,8 +346,16 @@\n         block (apply dissoc block db-schema/retract-attributes)]\n     (profile\n      \"Save block: \"\n-     (let [block' (wrap-parse-block block)\n-           opts' (merge opts {:outliner-op :save-block})]\n+     (let [original-uuid (:block/uuid (db/entity (:db/id block)))\n+           uuid-changed? (not= (:block/uuid block) original-uuid)\n+           block' (-> (wrap-parse-block block)\n+                      ;; :block/uuid might be changed when backspace/delete\n+                      ;; a block that has been refed\n+                      (assoc :block/uuid (:block/uuid block)))\n+           opts' (merge opts (cond-> {:outliner-op :save-block}\n+                               uuid-changed?\n+                               (assoc :uuid-changed {:kept (:block/uuid block)",
        "comment_created_at": "2023-05-18T14:03:07+00:00",
        "comment_author": "RCmerci",
        "comment_body": "better name for :kept & :deleted?",
        "pr_file_module": null
      },
      {
        "comment_id": "1197987189",
        "repo_full_name": "logseq/logseq",
        "pr_number": 9406,
        "pr_file": "src/main/frontend/handler/editor.cljs",
        "discussion_id": "1197870603",
        "commented_code": "@@ -353,8 +346,16 @@\n         block (apply dissoc block db-schema/retract-attributes)]\n     (profile\n      \"Save block: \"\n-     (let [block' (wrap-parse-block block)\n-           opts' (merge opts {:outliner-op :save-block})]\n+     (let [original-uuid (:block/uuid (db/entity (:db/id block)))\n+           uuid-changed? (not= (:block/uuid block) original-uuid)\n+           block' (-> (wrap-parse-block block)\n+                      ;; :block/uuid might be changed when backspace/delete\n+                      ;; a block that has been refed\n+                      (assoc :block/uuid (:block/uuid block)))\n+           opts' (merge opts (cond-> {:outliner-op :save-block}\n+                               uuid-changed?\n+                               (assoc :uuid-changed {:kept (:block/uuid block)",
        "comment_created_at": "2023-05-18T15:48:03+00:00",
        "comment_author": "tiensonqin",
        "comment_body": "Kept and deleted have been changed to from and to.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1041131351",
    "pr_number": 7617,
    "pr_file": "src/main/frontend/db/model.cljs",
    "created_at": "2022-12-06T15:36:18+00:00",
    "commented_code": ":else false))\n \n+(defn block-or-page?",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1041131351",
        "repo_full_name": "logseq/logseq",
        "pr_number": 7617,
        "pr_file": "src/main/frontend/db/model.cljs",
        "discussion_id": "1041131351",
        "commented_code": "@@ -1680,6 +1680,11 @@\n \n     :else false))\n \n+(defn block-or-page?",
        "comment_created_at": "2022-12-06T15:36:18+00:00",
        "comment_author": "sprocketc",
        "comment_body": "`?` is used at the end of predicate function names by convention. This name indicates that the function will return true, if the provided id is a page or a block, but returns a key instead.\r\n\r\nWe can either remove the question mark and rename the function, or create a `block?` function. I think I would go with the second option.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "951798249",
    "pr_number": 6134,
    "pr_file": "deps/graph-parser/src/logseq/graph_parser/util.cljs",
    "created_at": "2022-08-22T18:54:12+00:00",
    "commented_code": "(conj result (str prev \"/\" (first others)))))\n         result))))\n \n+(defn decode-namespace-underlines\n+  \"Decode namespace underlines to slashed;\n+   If continuous underlines, only decode at start;\n+   Having empty namespace is invalid.\"\n+  [string]\n+  (string/replace string \"__\" \"/\"))\n+\n (defn page-name-sanity\n-  \"Sanitize the page-name.\"\n-  ([page-name]\n-   (page-name-sanity page-name false))\n-  ([page-name replace-slash?]\n-   (let [page (some-> page-name\n-                      (remove-boundary-slashes)\n-                      (path-normalize))]\n-     (if replace-slash?\n-       (string/replace page #\"/\" \"%2F\")\n-       page))))\n+  \"Sanitize the page-name. Unify different diacritics and other visual differences.\n+   Two objectives:\n+   1. To be the same as in the filesystem;\n+   2. To be easier to search\"\n+  [page-name]\n+  (some-> page-name\n+          (remove-boundary-slashes)\n+          (path-normalize)))\n+\n+(defn validize-namespaces",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "951798249",
        "repo_full_name": "logseq/logseq",
        "pr_number": 6134,
        "pr_file": "deps/graph-parser/src/logseq/graph_parser/util.cljs",
        "discussion_id": "951798249",
        "commented_code": "@@ -107,17 +107,39 @@\n                  (conj result (str prev \"/\" (first others)))))\n         result))))\n \n+(defn decode-namespace-underlines\n+  \"Decode namespace underlines to slashed;\n+   If continuous underlines, only decode at start;\n+   Having empty namespace is invalid.\"\n+  [string]\n+  (string/replace string \"__\" \"/\"))\n+\n (defn page-name-sanity\n-  \"Sanitize the page-name.\"\n-  ([page-name]\n-   (page-name-sanity page-name false))\n-  ([page-name replace-slash?]\n-   (let [page (some-> page-name\n-                      (remove-boundary-slashes)\n-                      (path-normalize))]\n-     (if replace-slash?\n-       (string/replace page #\"/\" \"%2F\")\n-       page))))\n+  \"Sanitize the page-name. Unify different diacritics and other visual differences.\n+   Two objectives:\n+   1. To be the same as in the filesystem;\n+   2. To be easier to search\"\n+  [page-name]\n+  (some-> page-name\n+          (remove-boundary-slashes)\n+          (path-normalize)))\n+\n+(defn validize-namespaces",
        "comment_created_at": "2022-08-22T18:54:12+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "I think you wanted `validate-namespaces` but that doesn't usually mean modification. How about `make-valid-namespaces`?",
        "pr_file_module": null
      }
    ]
  }
]