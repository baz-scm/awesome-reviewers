[
  {
    "discussion_id": "1082096435",
    "pr_number": 8399,
    "pr_file": "src/main/frontend/components/find_in_page.cljs",
    "created_at": "2023-01-20T04:18:26+00:00",
    "commented_code": "[frontend.ui :as ui]\n             [frontend.state :as state]\n             [frontend.util :as util]\n-            [frontend.handler.search :as search-handler :refer [debounced-search]]\n+            [frontend.handler.search :as search-handler :refer [debounced-search, stop-debounced-search!]]\n+            [goog.object :as gobj]\n             [goog.dom :as gdom]\n             [frontend.mixins :as mixins]\n             [clojure.string :as string]))\n \n (rum/defc search-input\n   [q matches]\n-  [:div.flex.w-48.relative\n-   [:input#search-in-page-input.form-input.block.sm:text-sm.sm:leading-5.my-2.border-none.mr-4.outline-none\n-    {:auto-focus true\n-     :placeholder \"Find in page\"\n-     :aria-label \"Find in page\"\n-     :value q\n-     :on-change (fn [e]\n-                  (let [value (util/evalue e)]\n-                    (state/set-state! [:ui/find-in-page :q] value)\n-                    (debounced-search)))}]\n-   (when-not (string/blank? q)\n-     (when-let [total (:matches matches)]\n-      [:div.text-sm.absolute.top-2.right-0.py-2.px-4\n-       (:activeMatchOrdinal matches 0)\n-       \"/\"\n-       total]))\n-   [:div#search-in-page-placeholder.absolute.top-2.left-0.p-2.sm:text-sm]])\n+  (let [*composing? (rum/use-ref false)\n+        on-change-fn (fn [e]\n+                       (let [value (util/evalue e)\n+                             e-type (gobj/getValueByKeys e \"type\")]\n+                         (state/set-state! [:ui/find-in-page :q] value)\n+                         (cond (= e-type \"compositionstart\")\n+                               (do (rum/set-ref! *composing? true)\n+                                   (stop-debounced-search!))\n+\n+                               (= e-type \"compositionend\")\n+                               (rum/set-ref! *composing? false))\n+                         (when-not (rum/deref *composing?)\n+                           (debounced-search))))]",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1082096435",
        "repo_full_name": "logseq/logseq",
        "pr_number": 8399,
        "pr_file": "src/main/frontend/components/find_in_page.cljs",
        "discussion_id": "1082096435",
        "commented_code": "@@ -3,30 +3,43 @@\n             [frontend.ui :as ui]\n             [frontend.state :as state]\n             [frontend.util :as util]\n-            [frontend.handler.search :as search-handler :refer [debounced-search]]\n+            [frontend.handler.search :as search-handler :refer [debounced-search, stop-debounced-search!]]\n+            [goog.object :as gobj]\n             [goog.dom :as gdom]\n             [frontend.mixins :as mixins]\n             [clojure.string :as string]))\n \n (rum/defc search-input\n   [q matches]\n-  [:div.flex.w-48.relative\n-   [:input#search-in-page-input.form-input.block.sm:text-sm.sm:leading-5.my-2.border-none.mr-4.outline-none\n-    {:auto-focus true\n-     :placeholder \"Find in page\"\n-     :aria-label \"Find in page\"\n-     :value q\n-     :on-change (fn [e]\n-                  (let [value (util/evalue e)]\n-                    (state/set-state! [:ui/find-in-page :q] value)\n-                    (debounced-search)))}]\n-   (when-not (string/blank? q)\n-     (when-let [total (:matches matches)]\n-      [:div.text-sm.absolute.top-2.right-0.py-2.px-4\n-       (:activeMatchOrdinal matches 0)\n-       \"/\"\n-       total]))\n-   [:div#search-in-page-placeholder.absolute.top-2.left-0.p-2.sm:text-sm]])\n+  (let [*composing? (rum/use-ref false)\n+        on-change-fn (fn [e]\n+                       (let [value (util/evalue e)\n+                             e-type (gobj/getValueByKeys e \"type\")]\n+                         (state/set-state! [:ui/find-in-page :q] value)\n+                         (cond (= e-type \"compositionstart\")\n+                               (do (rum/set-ref! *composing? true)\n+                                   (stop-debounced-search!))\n+\n+                               (= e-type \"compositionend\")\n+                               (rum/set-ref! *composing? false))\n+                         (when-not (rum/deref *composing?)\n+                           (debounced-search))))]",
        "comment_created_at": "2023-01-20T04:18:26+00:00",
        "comment_author": "situ2001",
        "comment_body": "This logic can be extracted and used as a separate custom react hook.\u00a0",
        "pr_file_module": null
      },
      {
        "comment_id": "1082099746",
        "repo_full_name": "logseq/logseq",
        "pr_number": 8399,
        "pr_file": "src/main/frontend/components/find_in_page.cljs",
        "discussion_id": "1082096435",
        "commented_code": "@@ -3,30 +3,43 @@\n             [frontend.ui :as ui]\n             [frontend.state :as state]\n             [frontend.util :as util]\n-            [frontend.handler.search :as search-handler :refer [debounced-search]]\n+            [frontend.handler.search :as search-handler :refer [debounced-search, stop-debounced-search!]]\n+            [goog.object :as gobj]\n             [goog.dom :as gdom]\n             [frontend.mixins :as mixins]\n             [clojure.string :as string]))\n \n (rum/defc search-input\n   [q matches]\n-  [:div.flex.w-48.relative\n-   [:input#search-in-page-input.form-input.block.sm:text-sm.sm:leading-5.my-2.border-none.mr-4.outline-none\n-    {:auto-focus true\n-     :placeholder \"Find in page\"\n-     :aria-label \"Find in page\"\n-     :value q\n-     :on-change (fn [e]\n-                  (let [value (util/evalue e)]\n-                    (state/set-state! [:ui/find-in-page :q] value)\n-                    (debounced-search)))}]\n-   (when-not (string/blank? q)\n-     (when-let [total (:matches matches)]\n-      [:div.text-sm.absolute.top-2.right-0.py-2.px-4\n-       (:activeMatchOrdinal matches 0)\n-       \"/\"\n-       total]))\n-   [:div#search-in-page-placeholder.absolute.top-2.left-0.p-2.sm:text-sm]])\n+  (let [*composing? (rum/use-ref false)\n+        on-change-fn (fn [e]\n+                       (let [value (util/evalue e)\n+                             e-type (gobj/getValueByKeys e \"type\")]\n+                         (state/set-state! [:ui/find-in-page :q] value)\n+                         (cond (= e-type \"compositionstart\")\n+                               (do (rum/set-ref! *composing? true)\n+                                   (stop-debounced-search!))\n+\n+                               (= e-type \"compositionend\")\n+                               (rum/set-ref! *composing? false))\n+                         (when-not (rum/deref *composing?)\n+                           (debounced-search))))]",
        "comment_created_at": "2023-01-20T04:28:46+00:00",
        "comment_author": "situ2001",
        "comment_body": "and can be applied here, resulting in reduced resource usage because it won't perform searches when you type using IME.\r\n\r\nhttps://github.com/logseq/logseq/blob/f223ef535c03275eb1b7b09583eaad4a6c6560ce/src/main/frontend/components/search.cljs#L482",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "974691280",
    "pr_number": 6765,
    "pr_file": "src/main/frontend/components/query_table.cljs",
    "created_at": "2022-09-19T21:07:56+00:00",
    "commented_code": ":else\n     true))\n \n+(defn- get-sort-state\n+  \"Return current sort direction and column (item) being sorted, respectively\n+  :sort-desc? and :sort-by-item. :sort-by-item is nil if no sorting is to be\n+  done\"\n+  [state current-block]\n+  (let [*sort-by-item (get state ::sort-by-item)\n+        *desc? (get state ::desc?)\n+        p-desc? (get-in current-block [:block/properties :query-sort-desc])\n+        desc? (desc? *desc? p-desc?)\n+        p-sort-by (keyword (get-in current-block [:block/properties :query-sort-by]))\n+        sort-by-item (or @*sort-by-item\n+                         (some-> p-sort-by keyword)\n+                         (if (query-dsl/query-contains-filter? (:block/content current-block) \"sort-by\")\n+                           nil\n+                           :updated-at))]\n+    {:sort-desc? desc?\n+     :sort-by-item sort-by-item}))\n+\n+(defn- sort-result [result {:keys [sort-by-item sort-desc?]}]\n+  (if (some? sort-by-item)\n+    (let [comp (if sort-desc? > <)]\n+      (sort-by (fn [item]\n+                 (block/normalize-block (sort-by-fn sort-by-item item)))\n+               comp\n+               result))\n+    result))\n+\n+;; Components and public fns\n+;; =========================\n+(rum/defc sortable-title\n+  [title key state {:keys [sort-by-item sort-desc?]} block-id]\n+  (let [*sort-by-item (get state ::sort-by-item)\n+        *desc? (get state ::desc?)]\n+    [:th.whitespace-nowrap\n+     [:a {:on-click (fn []\n+                      ;; The two local state atom changes have no effect on",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "974691280",
        "repo_full_name": "logseq/logseq",
        "pr_number": 6765,
        "pr_file": "src/main/frontend/components/query_table.cljs",
        "discussion_id": "974691280",
        "commented_code": "@@ -77,19 +49,73 @@\n     :else\n     true))\n \n+(defn- get-sort-state\n+  \"Return current sort direction and column (item) being sorted, respectively\n+  :sort-desc? and :sort-by-item. :sort-by-item is nil if no sorting is to be\n+  done\"\n+  [state current-block]\n+  (let [*sort-by-item (get state ::sort-by-item)\n+        *desc? (get state ::desc?)\n+        p-desc? (get-in current-block [:block/properties :query-sort-desc])\n+        desc? (desc? *desc? p-desc?)\n+        p-sort-by (keyword (get-in current-block [:block/properties :query-sort-by]))\n+        sort-by-item (or @*sort-by-item\n+                         (some-> p-sort-by keyword)\n+                         (if (query-dsl/query-contains-filter? (:block/content current-block) \"sort-by\")\n+                           nil\n+                           :updated-at))]\n+    {:sort-desc? desc?\n+     :sort-by-item sort-by-item}))\n+\n+(defn- sort-result [result {:keys [sort-by-item sort-desc?]}]\n+  (if (some? sort-by-item)\n+    (let [comp (if sort-desc? > <)]\n+      (sort-by (fn [item]\n+                 (block/normalize-block (sort-by-fn sort-by-item item)))\n+               comp\n+               result))\n+    result))\n+\n+;; Components and public fns\n+;; =========================\n+(rum/defc sortable-title\n+  [title key state {:keys [sort-by-item sort-desc?]} block-id]\n+  (let [*sort-by-item (get state ::sort-by-item)\n+        *desc? (get state ::desc?)]\n+    [:th.whitespace-nowrap\n+     [:a {:on-click (fn []\n+                      ;; The two local state atom changes have no effect on",
        "comment_created_at": "2022-09-19T21:07:56+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "@tiensonqin When I disable the two local state atoms for simple queries, it has no effect on preserving sorting state as that is handled by the block property. Do we know what local state is needed for here? The `block/*custom-query` component is used in so many contexts that I left the local atoms in order to not accidentally break something",
        "pr_file_module": null
      },
      {
        "comment_id": "975021453",
        "repo_full_name": "logseq/logseq",
        "pr_number": 6765,
        "pr_file": "src/main/frontend/components/query_table.cljs",
        "discussion_id": "974691280",
        "commented_code": "@@ -77,19 +49,73 @@\n     :else\n     true))\n \n+(defn- get-sort-state\n+  \"Return current sort direction and column (item) being sorted, respectively\n+  :sort-desc? and :sort-by-item. :sort-by-item is nil if no sorting is to be\n+  done\"\n+  [state current-block]\n+  (let [*sort-by-item (get state ::sort-by-item)\n+        *desc? (get state ::desc?)\n+        p-desc? (get-in current-block [:block/properties :query-sort-desc])\n+        desc? (desc? *desc? p-desc?)\n+        p-sort-by (keyword (get-in current-block [:block/properties :query-sort-by]))\n+        sort-by-item (or @*sort-by-item\n+                         (some-> p-sort-by keyword)\n+                         (if (query-dsl/query-contains-filter? (:block/content current-block) \"sort-by\")\n+                           nil\n+                           :updated-at))]\n+    {:sort-desc? desc?\n+     :sort-by-item sort-by-item}))\n+\n+(defn- sort-result [result {:keys [sort-by-item sort-desc?]}]\n+  (if (some? sort-by-item)\n+    (let [comp (if sort-desc? > <)]\n+      (sort-by (fn [item]\n+                 (block/normalize-block (sort-by-fn sort-by-item item)))\n+               comp\n+               result))\n+    result))\n+\n+;; Components and public fns\n+;; =========================\n+(rum/defc sortable-title\n+  [title key state {:keys [sort-by-item sort-desc?]} block-id]\n+  (let [*sort-by-item (get state ::sort-by-item)\n+        *desc? (get state ::desc?)]\n+    [:th.whitespace-nowrap\n+     [:a {:on-click (fn []\n+                      ;; The two local state atom changes have no effect on",
        "comment_created_at": "2022-09-20T08:08:13+00:00",
        "comment_author": "tiensonqin",
        "comment_body": "I think they're not needed anymore because updating either :query-sort-by or :query-sort-desc will trigger react/refresh! which will re-run the query and rerender the component.",
        "pr_file_module": null
      },
      {
        "comment_id": "975357708",
        "repo_full_name": "logseq/logseq",
        "pr_number": 6765,
        "pr_file": "src/main/frontend/components/query_table.cljs",
        "discussion_id": "974691280",
        "commented_code": "@@ -77,19 +49,73 @@\n     :else\n     true))\n \n+(defn- get-sort-state\n+  \"Return current sort direction and column (item) being sorted, respectively\n+  :sort-desc? and :sort-by-item. :sort-by-item is nil if no sorting is to be\n+  done\"\n+  [state current-block]\n+  (let [*sort-by-item (get state ::sort-by-item)\n+        *desc? (get state ::desc?)\n+        p-desc? (get-in current-block [:block/properties :query-sort-desc])\n+        desc? (desc? *desc? p-desc?)\n+        p-sort-by (keyword (get-in current-block [:block/properties :query-sort-by]))\n+        sort-by-item (or @*sort-by-item\n+                         (some-> p-sort-by keyword)\n+                         (if (query-dsl/query-contains-filter? (:block/content current-block) \"sort-by\")\n+                           nil\n+                           :updated-at))]\n+    {:sort-desc? desc?\n+     :sort-by-item sort-by-item}))\n+\n+(defn- sort-result [result {:keys [sort-by-item sort-desc?]}]\n+  (if (some? sort-by-item)\n+    (let [comp (if sort-desc? > <)]\n+      (sort-by (fn [item]\n+                 (block/normalize-block (sort-by-fn sort-by-item item)))\n+               comp\n+               result))\n+    result))\n+\n+;; Components and public fns\n+;; =========================\n+(rum/defc sortable-title\n+  [title key state {:keys [sort-by-item sort-desc?]} block-id]\n+  (let [*sort-by-item (get state ::sort-by-item)\n+        *desc? (get state ::desc?)]\n+    [:th.whitespace-nowrap\n+     [:a {:on-click (fn []\n+                      ;; The two local state atom changes have no effect on",
        "comment_created_at": "2022-09-20T13:22:28+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "Thanks. Makes sense. Will remove",
        "pr_file_module": null
      }
    ]
  }
]