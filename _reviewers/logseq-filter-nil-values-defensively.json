[
  {
    "discussion_id": "1158703984",
    "pr_number": 8816,
    "pr_file": "src/main/frontend/state.cljs",
    "created_at": "2023-04-05T15:45:22+00:00",
    "commented_code": "[id]\n   (sub [:editor/content id]))\n \n+(defn get-block-id\n+  [el]\n+  (when el",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1158703984",
        "repo_full_name": "logseq/logseq",
        "pr_number": 8816,
        "pr_file": "src/main/frontend/state.cljs",
        "discussion_id": "1158703984",
        "commented_code": "@@ -623,11 +623,16 @@ Similar to re-frame subscriptions\"\n   [id]\n   (sub [:editor/content id]))\n \n+(defn get-block-id\n+  [el]\n+  (when el",
        "comment_created_at": "2023-04-05T15:45:22+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "Some food for thought on \"safe\" fns (a pattern that I've seen rarely outside of this codebase). Two downsides I see:\r\n- It forces all callers to handle a nil state where they previously may not have had to. This additional complexity is one reason we have `(remove nil?)` throughout our codebase\r\n- It propagates and creates secondary error states by returning nils instead of letting the error happen\r\n   For example, see the two calls of `(-> (state/get-block-id dom) uuid ...` in [the editor handler](https://github.com/logseq/logseq/pull/8816/files?diff=unified&w=1#diff-2f055ca9c790c38c4cbe601146ca7c19ad359f36a73554039581c2e5fae428d6). If el was `nil` we'd get the original error of `Cannot read properties of null (reading 'getAttribute')` but because we forgot to handle nil here we get `Assert failed: (string? s)`.  We've made it harder to determine the root cause of failure by propagating a nil. Thankfully this one is close to the original but there's no guarantee other secondary errors will be as easy to diagnose. We can of course fix these with `some->` but it's an ongoing issue we've forced on ourselves as described in the previous point\r\n                     \r\nIf wanting to stick with safe usage would recommend renaming to `get-safe-block-id` so callers know they should handle nils accordingly",
        "pr_file_module": null
      },
      {
        "comment_id": "1159468547",
        "repo_full_name": "logseq/logseq",
        "pr_number": 8816,
        "pr_file": "src/main/frontend/state.cljs",
        "discussion_id": "1158703984",
        "commented_code": "@@ -623,11 +623,16 @@ Similar to re-frame subscriptions\"\n   [id]\n   (sub [:editor/content id]))\n \n+(defn get-block-id\n+  [el]\n+  (when el",
        "comment_created_at": "2023-04-06T08:36:24+00:00",
        "comment_author": "sprocketc",
        "comment_body": "Removed. Thanks for taking the time to explain your reasoning in detail.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1059240520",
    "pr_number": 8165,
    "pr_file": "src/main/frontend/state.cljs",
    "created_at": "2022-12-30T04:43:29+00:00",
    "commented_code": "(set-selection-blocks! blocks :down))\n   ([blocks direction]\n    (when (seq blocks)\n-     (let [blocks (util/sort-by-height blocks)]\n+     (let [blocks (util/sort-by-height (remove nil? blocks))]",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1059240520",
        "repo_full_name": "logseq/logseq",
        "pr_number": 8165,
        "pr_file": "src/main/frontend/state.cljs",
        "discussion_id": "1059240520",
        "commented_code": "@@ -953,7 +953,7 @@ Similar to re-frame subscriptions\"\n    (set-selection-blocks! blocks :down))\n   ([blocks direction]\n    (when (seq blocks)\n-     (let [blocks (util/sort-by-height blocks)]\n+     (let [blocks (util/sort-by-height (remove nil? blocks))]",
        "comment_created_at": "2022-12-30T04:43:29+00:00",
        "comment_author": "andelf",
        "comment_body": "Avoids:\r\n```\r\nUncaught TypeError: Cannot read properties of null (reading 'getBoundingClientRect')\r\n    at Object.frontend$util$get_dom_top [as get_dom_top]\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1030351176",
    "pr_number": 7432,
    "pr_file": "src/main/frontend/handler/events.cljs",
    "created_at": "2022-11-23T11:53:26+00:00",
    "commented_code": "[:div\n       [:p\n        \"We suggest you upgrade now to avoid some potential bugs.\"]\n-      [:p\n-       \"For example, the files below have reserved characters can't be synced on some platforms.\"]]\n+      (when (seq? paths)",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1030351176",
        "repo_full_name": "logseq/logseq",
        "pr_number": 7432,
        "pr_file": "src/main/frontend/handler/events.cljs",
        "discussion_id": "1030351176",
        "commented_code": "@@ -747,8 +754,9 @@\n      [:div\n       [:p\n        \"We suggest you upgrade now to avoid some potential bugs.\"]\n-      [:p\n-       \"For example, the files below have reserved characters can't be synced on some platforms.\"]]\n+      (when (seq? paths)",
        "comment_created_at": "2022-11-23T11:53:26+00:00",
        "comment_author": "tiensonqin",
        "comment_body": "Should be `seq` here to check whether paths are not empty.",
        "pr_file_module": null
      }
    ]
  }
]