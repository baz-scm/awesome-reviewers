[
  {
    "discussion_id": "1023235860",
    "pr_number": 7287,
    "pr_file": "src/main/frontend/extensions/sci.cljs",
    "created_at": "2022-11-15T20:37:03+00:00",
    "commented_code": "(/ (reduce + coll) (count coll)))\n \n (defn eval-string\n-  [s]\n+  ([s]\n+   (eval-string s {}))\n+  ([s ns]\n   (try\n     (sci/eval-string s {:bindings {'sum sum\n                                    'average average\n                                    'parseFloat js/parseFloat\n+                                   'custom-js (if (exists? js/customJs) js/customJs (Empty.))\n                                    'isNaN js/isNaN\n                                    'log js/console.log\n-                                   'pprint util/pp-str}})\n+                                   'pprint util/pp-str}\n+                        :namespaces ns",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1023235860",
        "repo_full_name": "logseq/logseq",
        "pr_number": 7287,
        "pr_file": "src/main/frontend/extensions/sci.cljs",
        "discussion_id": "1023235860",
        "commented_code": "@@ -9,27 +9,33 @@\n   (/ (reduce + coll) (count coll)))\n \n (defn eval-string\n-  [s]\n+  ([s]\n+   (eval-string s {}))\n+  ([s ns]\n   (try\n     (sci/eval-string s {:bindings {'sum sum\n                                    'average average\n                                    'parseFloat js/parseFloat\n+                                   'custom-js (if (exists? js/customJs) js/customJs (Empty.))\n                                    'isNaN js/isNaN\n                                    'log js/console.log\n-                                   'pprint util/pp-str}})\n+                                   'pprint util/pp-str}\n+                        :namespaces ns",
        "comment_created_at": "2022-11-15T20:37:03+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "`eval-string` is used in other places besides `<src` so this would be adding this configuration in other features that would be confusing. Let's only pass them as args from `eval-result` for now",
        "pr_file_module": null
      },
      {
        "comment_id": "1023497661",
        "repo_full_name": "logseq/logseq",
        "pr_number": 7287,
        "pr_file": "src/main/frontend/extensions/sci.cljs",
        "discussion_id": "1023235860",
        "commented_code": "@@ -9,27 +9,33 @@\n   (/ (reduce + coll) (count coll)))\n \n (defn eval-string\n-  [s]\n+  ([s]\n+   (eval-string s {}))\n+  ([s ns]\n   (try\n     (sci/eval-string s {:bindings {'sum sum\n                                    'average average\n                                    'parseFloat js/parseFloat\n+                                   'custom-js (if (exists? js/customJs) js/customJs (Empty.))\n                                    'isNaN js/isNaN\n                                    'log js/console.log\n-                                   'pprint util/pp-str}})\n+                                   'pprint util/pp-str}\n+                        :namespaces ns",
        "comment_created_at": "2022-11-16T04:41:56+00:00",
        "comment_author": "darwis059",
        "comment_body": "I think this addition will not affect the usage of `eval-string` because I change it into Multi-Arity function that accept single arguments as before and accept two arguments for injecting current block as a namespace in sci. the current block must passed into `eval-string` to make it possible to be evaluated by logseq user in sci scope.",
        "pr_file_module": null
      },
      {
        "comment_id": "1024158656",
        "repo_full_name": "logseq/logseq",
        "pr_number": 7287,
        "pr_file": "src/main/frontend/extensions/sci.cljs",
        "discussion_id": "1023235860",
        "commented_code": "@@ -9,27 +9,33 @@\n   (/ (reduce + coll) (count coll)))\n \n (defn eval-string\n-  [s]\n+  ([s]\n+   (eval-string s {}))\n+  ([s ns]\n   (try\n     (sci/eval-string s {:bindings {'sum sum\n                                    'average average\n                                    'parseFloat js/parseFloat\n+                                   'custom-js (if (exists? js/customJs) js/customJs (Empty.))\n                                    'isNaN js/isNaN\n                                    'log js/console.log\n-                                   'pprint util/pp-str}})\n+                                   'pprint util/pp-str}\n+                        :namespaces ns",
        "comment_created_at": "2022-11-16T15:28:57+00:00",
        "comment_author": "darwis059",
        "comment_body": "I found a way to not pass them into `eval-string in last commit",
        "pr_file_module": null
      },
      {
        "comment_id": "1024458404",
        "repo_full_name": "logseq/logseq",
        "pr_number": 7287,
        "pr_file": "src/main/frontend/extensions/sci.cljs",
        "discussion_id": "1023235860",
        "commented_code": "@@ -9,27 +9,33 @@\n   (/ (reduce + coll) (count coll)))\n \n (defn eval-string\n-  [s]\n+  ([s]\n+   (eval-string s {}))\n+  ([s ns]\n   (try\n     (sci/eval-string s {:bindings {'sum sum\n                                    'average average\n                                    'parseFloat js/parseFloat\n+                                   'custom-js (if (exists? js/customJs) js/customJs (Empty.))\n                                    'isNaN js/isNaN\n                                    'log js/console.log\n-                                   'pprint util/pp-str}})\n+                                   'pprint util/pp-str}\n+                        :namespaces ns",
        "comment_created_at": "2022-11-16T20:07:54+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "My concern wasn't arguments being passed but that other features have additional configuration that are specific to the src feature. I've addressed this",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1160912284",
    "pr_number": 8974,
    "pr_file": "src/main/frontend/handler/editor.cljs",
    "created_at": "2023-04-07T19:19:36+00:00",
    "commented_code": "(outliner-core/delete-blocks! [block] {:children? children?})))))\n \n (defn- move-to-prev-block\n-  [repo sibling-block format id value]\n-  (when (and repo sibling-block)\n-    (when-let [sibling-block-id (dom/attr sibling-block \"blockid\")]\n-      (when-let [block (db/pull repo '[*] [:block/uuid (uuid sibling-block-id)])]\n-        (let [original-content (util/trim-safe (:block/content block))\n-              value' (-> (property/remove-built-in-properties format original-content)\n-                         (drawer/remove-logbook))\n-              new-value (str value' value)\n-              tail-len (count value)\n-              pos (max\n-                   (if original-content\n-                     (gobj/get (utf8/encode original-content) \"length\")\n-                     0)\n-                   0)]\n-          (edit-block! block pos id\n-                       {:custom-content new-value\n-                        :tail-len tail-len\n-                        :move-cursor? false})\n-          {:prev-block block\n-           :new-content new-value})))))\n+  ([repo sibling-block format id value]\n+   (move-to-prev-block repo sibling-block format id value true))\n+  ([repo sibling-block format id value edit?]\n+   (when (and repo sibling-block)\n+     (when-let [sibling-block-id (dom/attr sibling-block \"blockid\")]\n+       (when-let [block (db/pull repo '[*] [:block/uuid (uuid sibling-block-id)])]\n+         (let [original-content (util/trim-safe (:block/content block))\n+               value' (-> (property/remove-built-in-properties format original-content)\n+                          (drawer/remove-logbook))\n+               new-value (str value' value)\n+               tail-len (count value)\n+               pos (max\n+                    (if original-content\n+                      (gobj/get (utf8/encode original-content) \"length\")\n+                      0)\n+                    0)]\n+           (when edit?\n+             (edit-block! block pos id\n+                          {:custom-content new-value\n+                           :tail-len tail-len\n+                           :move-cursor? false}))\n+           {:prev-block block\n+            :new-content new-value\n+            :pos pos}))))))\n \n (declare save-block!)\n \n+(defn- block-has-no-ref?\n+  [block-or-uuid]",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1160912284",
        "repo_full_name": "logseq/logseq",
        "pr_number": 8974,
        "pr_file": "src/main/frontend/handler/editor.cljs",
        "discussion_id": "1160912284",
        "commented_code": "@@ -778,41 +779,49 @@\n        (outliner-core/delete-blocks! [block] {:children? children?})))))\n \n (defn- move-to-prev-block\n-  [repo sibling-block format id value]\n-  (when (and repo sibling-block)\n-    (when-let [sibling-block-id (dom/attr sibling-block \"blockid\")]\n-      (when-let [block (db/pull repo '[*] [:block/uuid (uuid sibling-block-id)])]\n-        (let [original-content (util/trim-safe (:block/content block))\n-              value' (-> (property/remove-built-in-properties format original-content)\n-                         (drawer/remove-logbook))\n-              new-value (str value' value)\n-              tail-len (count value)\n-              pos (max\n-                   (if original-content\n-                     (gobj/get (utf8/encode original-content) \"length\")\n-                     0)\n-                   0)]\n-          (edit-block! block pos id\n-                       {:custom-content new-value\n-                        :tail-len tail-len\n-                        :move-cursor? false})\n-          {:prev-block block\n-           :new-content new-value})))))\n+  ([repo sibling-block format id value]\n+   (move-to-prev-block repo sibling-block format id value true))\n+  ([repo sibling-block format id value edit?]\n+   (when (and repo sibling-block)\n+     (when-let [sibling-block-id (dom/attr sibling-block \"blockid\")]\n+       (when-let [block (db/pull repo '[*] [:block/uuid (uuid sibling-block-id)])]\n+         (let [original-content (util/trim-safe (:block/content block))\n+               value' (-> (property/remove-built-in-properties format original-content)\n+                          (drawer/remove-logbook))\n+               new-value (str value' value)\n+               tail-len (count value)\n+               pos (max\n+                    (if original-content\n+                      (gobj/get (utf8/encode original-content) \"length\")\n+                      0)\n+                    0)]\n+           (when edit?\n+             (edit-block! block pos id\n+                          {:custom-content new-value\n+                           :tail-len tail-len\n+                           :move-cursor? false}))\n+           {:prev-block block\n+            :new-content new-value\n+            :pos pos}))))))\n \n (declare save-block!)\n \n+(defn- block-has-no-ref?\n+  [block-or-uuid]",
        "comment_created_at": "2023-04-07T19:19:36+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "Optional: It could be nice to keep this fn simpler and have it just take an entity id (eid) like db/pull or https://cljdoc.org/d/datascript/datascript/1.4.2/api/datascript.core#entity. This would mean passing in the `db/entity` arg",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "897340204",
    "pr_number": 5674,
    "pr_file": "src/main/frontend/db/query_react.cljs",
    "created_at": "2022-06-14T21:32:12+00:00",
    "commented_code": "[lambdaisland.glogi :as log]))\n \n (defn resolve-input\n-  [input]\n-  (cond\n-    (= :right-now-ms input) (util/time-ms)\n-    (= :start-of-today-ms input) (util/today-at-local-ms 0 0 0 0)\n-    (= :end-of-today-ms input) (util/today-at-local-ms 24 0 0 0)\n+  ([input]\n+   (resolve-input input nil))\n+  ([input current-block-uuid]\n+   (cond\n+     (= :right-now-ms input) (util/time-ms)\n+     (= :start-of-today-ms input) (util/date-at-local-ms 0 0 0 0)\n+     (= :end-of-today-ms input) (util/date-at-local-ms 24 0 0 0)\n \n-    (= :today input)\n-    (date->int (t/today))\n-    (= :yesterday input)\n-    (date->int (t/minus (t/today) (t/days 1)))\n-    (= :tomorrow input)\n-    (date->int (t/plus (t/today) (t/days 1)))\n-    (= :current-page input)\n-    (some-> (or (state/get-current-page)\n-                (:page (state/get-default-home))\n-                (date/today)) string/lower-case)\n+     (= :today input)\n+     (date->int (t/today))\n+     (= :yesterday input)\n+     (date->int (t/minus (t/today) (t/days 1)))\n+     (= :tomorrow input)\n+     (date->int (t/plus (t/today) (t/days 1)))\n+     (= :current-page input)\n+     (some-> (or (state/get-current-page)\n+                 (:page (state/get-default-home))\n+                 (date/today)) string/lower-case)\n+     (= :current-block input)",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "897340204",
        "repo_full_name": "logseq/logseq",
        "pr_number": 5674,
        "pr_file": "src/main/frontend/db/query_react.cljs",
        "discussion_id": "897340204",
        "commented_code": "@@ -16,40 +16,56 @@\n             [lambdaisland.glogi :as log]))\n \n (defn resolve-input\n-  [input]\n-  (cond\n-    (= :right-now-ms input) (util/time-ms)\n-    (= :start-of-today-ms input) (util/today-at-local-ms 0 0 0 0)\n-    (= :end-of-today-ms input) (util/today-at-local-ms 24 0 0 0)\n+  ([input]\n+   (resolve-input input nil))\n+  ([input current-block-uuid]\n+   (cond\n+     (= :right-now-ms input) (util/time-ms)\n+     (= :start-of-today-ms input) (util/date-at-local-ms 0 0 0 0)\n+     (= :end-of-today-ms input) (util/date-at-local-ms 24 0 0 0)\n \n-    (= :today input)\n-    (date->int (t/today))\n-    (= :yesterday input)\n-    (date->int (t/minus (t/today) (t/days 1)))\n-    (= :tomorrow input)\n-    (date->int (t/plus (t/today) (t/days 1)))\n-    (= :current-page input)\n-    (some-> (or (state/get-current-page)\n-                (:page (state/get-default-home))\n-                (date/today)) string/lower-case)\n+     (= :today input)\n+     (date->int (t/today))\n+     (= :yesterday input)\n+     (date->int (t/minus (t/today) (t/days 1)))\n+     (= :tomorrow input)\n+     (date->int (t/plus (t/today) (t/days 1)))\n+     (= :current-page input)\n+     (some-> (or (state/get-current-page)\n+                 (:page (state/get-default-home))\n+                 (date/today)) string/lower-case)\n+     (= :current-block input)",
        "comment_created_at": "2022-06-14T21:32:12+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "The logseq.api also uses `resolve-input`. Since `current-block-uuid` is nil for it, these next two `cond` conditions would fail and possibly confuse plugin authors. Could you update them to also check for `current-block-uuid`?",
        "pr_file_module": null
      }
    ]
  }
]