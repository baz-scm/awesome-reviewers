[
  {
    "discussion_id": "1901078434",
    "pr_number": 11634,
    "pr_file": "src/main/frontend/components/property.cljs",
    "created_at": "2025-01-02T17:00:24+00:00",
    "commented_code": "(rum/defc property-select\n   [exclude-properties select-opts]\n   (let [[properties set-properties!] (rum/use-state nil)\n+        [classes set-classes!] (rum/use-state nil)\n         [excluded-properties set-excluded-properties!] (rum/use-state nil)]\n     (rum/use-effect!\n      (fn []\n-       (p/let [properties (db-async/<db-based-get-all-properties (state/get-current-repo))]\n+       (p/let [repo (state/get-current-repo)\n+               properties (db-async/<db-based-get-all-properties repo)\n+               classes (->> (db-model/get-all-classes repo)",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1901078434",
        "repo_full_name": "logseq/logseq",
        "pr_number": 11634,
        "pr_file": "src/main/frontend/components/property.cljs",
        "discussion_id": "1901078434",
        "commented_code": "@@ -142,30 +144,42 @@\n (rum/defc property-select\n   [exclude-properties select-opts]\n   (let [[properties set-properties!] (rum/use-state nil)\n+        [classes set-classes!] (rum/use-state nil)\n         [excluded-properties set-excluded-properties!] (rum/use-state nil)]\n     (rum/use-effect!\n      (fn []\n-       (p/let [properties (db-async/<db-based-get-all-properties (state/get-current-repo))]\n+       (p/let [repo (state/get-current-repo)\n+               properties (db-async/<db-based-get-all-properties repo)\n+               classes (->> (db-model/get-all-classes repo)",
        "comment_created_at": "2025-01-02T17:00:24+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "While I'm glad this PR allows for workflows that weren't possible before e.g. classes as properties, I don't think we should be encouraging it as common practice. Doing so muddles two important concepts in the DB version and encourages poor modeling practices i.e. one identity that behaves both as a class and a property. For most users who won't use this feature, it also makes an irreversible mistake easier i.e. turning a class into a property with no ability to undo. I also noticed for large class graphs like schema.org graphs, the property dropdown is laggy because it fetches all classes.\r\n\r\nIf we still want this classes in properties behavior, I could put it behind a config option if there's no objection",
        "pr_file_module": null
      },
      {
        "comment_id": "1901811966",
        "repo_full_name": "logseq/logseq",
        "pr_number": 11634,
        "pr_file": "src/main/frontend/components/property.cljs",
        "discussion_id": "1901078434",
        "commented_code": "@@ -142,30 +144,42 @@\n (rum/defc property-select\n   [exclude-properties select-opts]\n   (let [[properties set-properties!] (rum/use-state nil)\n+        [classes set-classes!] (rum/use-state nil)\n         [excluded-properties set-excluded-properties!] (rum/use-state nil)]\n     (rum/use-effect!\n      (fn []\n-       (p/let [properties (db-async/<db-based-get-all-properties (state/get-current-repo))]\n+       (p/let [repo (state/get-current-repo)\n+               properties (db-async/<db-based-get-all-properties repo)\n+               classes (->> (db-model/get-all-classes repo)",
        "comment_created_at": "2025-01-03T14:00:35+00:00",
        "comment_author": "tiensonqin",
        "comment_body": "It'll be really hard to use if classes as properties are not the default behavior. Suppose we will have classes #Movie and #Album, now we have to create properties like `Movies` and `Albums`, and those properties are not related to the classes. \r\n\r\n> Doing so muddles two important concepts in the DB version \r\n\r\nI'm not sure about this because using a class as a property means this property's value needs to be an object of this class, this reveals the connection between classes. If a class is another class's property, e.g. #Actor used as a property for #Movie,  then we know #Movie has #Actor(s).\r\nBut I'm not familiar with RDF/Ontology, so happy to know more details about the concepts.\r\n\r\n> turning a class into a property with no ability to undo.\r\n\r\nUndo might be dangerous for properties, but we can allow people to delete the #Property tag for non-built-in class.\r\n\r\n> the property dropdown is laggy because it fetches all classes.\r\n\r\nI suspect it's a rendering issue, the property dropdown is not virtualized, we can improve the performance by virtualizing the properties and displaying matched tags after inputting something.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1899125769",
    "pr_number": 11654,
    "pr_file": "src/main/frontend/worker/commands.cljs",
    "created_at": "2024-12-29T12:52:27+00:00",
    "commented_code": "+(ns frontend.worker.commands\n+  \"Invoke commands based on user settings\"\n+  (:require [datascript.core :as d]\n+            [logseq.db.frontend.property.type :as db-property-type]\n+            [cljs-time.core :as t]\n+            [cljs-time.coerce :as tc]\n+            [logseq.db.frontend.property :as db-property]\n+            [logseq.outliner.pipeline :as outliner-pipeline]\n+            [frontend.worker.handler.page.db-based.page :as worker-db-page]\n+            [logseq.common.util.date-time :as date-time-util]))\n+\n+;; TODO: allow users to add command or configure it through #Command (which parent should be #Code)",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1899125769",
        "repo_full_name": "logseq/logseq",
        "pr_number": 11654,
        "pr_file": "src/main/frontend/worker/commands.cljs",
        "discussion_id": "1899125769",
        "commented_code": "@@ -0,0 +1,179 @@\n+(ns frontend.worker.commands\n+  \"Invoke commands based on user settings\"\n+  (:require [datascript.core :as d]\n+            [logseq.db.frontend.property.type :as db-property-type]\n+            [cljs-time.core :as t]\n+            [cljs-time.coerce :as tc]\n+            [logseq.db.frontend.property :as db-property]\n+            [logseq.outliner.pipeline :as outliner-pipeline]\n+            [frontend.worker.handler.page.db-based.page :as worker-db-page]\n+            [logseq.common.util.date-time :as date-time-util]))\n+\n+;; TODO: allow users to add command or configure it through #Command (which parent should be #Code)",
        "comment_created_at": "2024-12-29T12:52:27+00:00",
        "comment_author": "RCmerci",
        "comment_body": "if users can add/delete commands, it should be graph-level. so make this atom: *repo->commands",
        "pr_file_module": null
      },
      {
        "comment_id": "1899200109",
        "repo_full_name": "logseq/logseq",
        "pr_number": 11654,
        "pr_file": "src/main/frontend/worker/commands.cljs",
        "discussion_id": "1899125769",
        "commented_code": "@@ -0,0 +1,179 @@\n+(ns frontend.worker.commands\n+  \"Invoke commands based on user settings\"\n+  (:require [datascript.core :as d]\n+            [logseq.db.frontend.property.type :as db-property-type]\n+            [cljs-time.core :as t]\n+            [cljs-time.coerce :as tc]\n+            [logseq.db.frontend.property :as db-property]\n+            [logseq.outliner.pipeline :as outliner-pipeline]\n+            [frontend.worker.handler.page.db-based.page :as worker-db-page]\n+            [logseq.common.util.date-time :as date-time-util]))\n+\n+;; TODO: allow users to add command or configure it through #Command (which parent should be #Code)",
        "comment_created_at": "2024-12-29T22:11:51+00:00",
        "comment_author": "tiensonqin",
        "comment_body": "I plan to store commands using blocks; when the DB changes, we'll know which commands should be executed, e.g., commands for changed blocks, and commands for changed blocks' tags.  \r\nWe probably still need to separate it by graphs if we want to cache the commands to avoid querying from the db.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1828058447",
    "pr_number": 11565,
    "pr_file": "deps/db/src/logseq/db/frontend/property.cljs",
    "created_at": "2024-11-04T16:52:54+00:00",
    "commented_code": ":cardinality :many\n                                    :public? true\n                                    :classes #{:logseq.class/Root}}}\n+   :kv/value             {:title \"KV value\"\n+                          :attribute :kv/value\n+                          :schema {:type :any\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/type           {:title \"Node type\"\n+                          :attribute :block/type\n+                          :schema {:type :string\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/schema         {:title \"Node schema\"\n+                          :attribute :block/schema\n+                          :schema {:type :map\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/parent         {:title \"Node parent\"\n+                          :attribute :block/parent\n+                          :schema {:type :entity\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/order          {:title \"Node order\"",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1828058447",
        "repo_full_name": "logseq/logseq",
        "pr_number": 11565,
        "pr_file": "deps/db/src/logseq/db/frontend/property.cljs",
        "discussion_id": "1828058447",
        "commented_code": "@@ -38,6 +38,90 @@\n                                    :cardinality :many\n                                    :public? true\n                                    :classes #{:logseq.class/Root}}}\n+   :kv/value             {:title \"KV value\"\n+                          :attribute :kv/value\n+                          :schema {:type :any\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/type           {:title \"Node type\"\n+                          :attribute :block/type\n+                          :schema {:type :string\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/schema         {:title \"Node schema\"\n+                          :attribute :block/schema\n+                          :schema {:type :map\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/parent         {:title \"Node parent\"\n+                          :attribute :block/parent\n+                          :schema {:type :entity\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/order          {:title \"Node order\"",
        "comment_created_at": "2024-11-04T16:52:54+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "Using this in the builder autocompletes to meaningless strings for users. This feels buggy\r\n\r\nI haven't looked at the rest of these attributes but there is probably a lot more to be said about them...",
        "pr_file_module": null
      },
      {
        "comment_id": "1829084336",
        "repo_full_name": "logseq/logseq",
        "pr_number": 11565,
        "pr_file": "deps/db/src/logseq/db/frontend/property.cljs",
        "discussion_id": "1828058447",
        "commented_code": "@@ -38,6 +38,90 @@\n                                    :cardinality :many\n                                    :public? true\n                                    :classes #{:logseq.class/Root}}}\n+   :kv/value             {:title \"KV value\"\n+                          :attribute :kv/value\n+                          :schema {:type :any\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/type           {:title \"Node type\"\n+                          :attribute :block/type\n+                          :schema {:type :string\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/schema         {:title \"Node schema\"\n+                          :attribute :block/schema\n+                          :schema {:type :map\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/parent         {:title \"Node parent\"\n+                          :attribute :block/parent\n+                          :schema {:type :entity\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/order          {:title \"Node order\"",
        "comment_created_at": "2024-11-05T10:13:34+00:00",
        "comment_author": "tiensonqin",
        "comment_body": ":block/order is no longer a queryable property.",
        "pr_file_module": null
      },
      {
        "comment_id": "1831825260",
        "repo_full_name": "logseq/logseq",
        "pr_number": 11565,
        "pr_file": "deps/db/src/logseq/db/frontend/property.cljs",
        "discussion_id": "1828058447",
        "commented_code": "@@ -38,6 +38,90 @@\n                                    :cardinality :many\n                                    :public? true\n                                    :classes #{:logseq.class/Root}}}\n+   :kv/value             {:title \"KV value\"\n+                          :attribute :kv/value\n+                          :schema {:type :any\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/type           {:title \"Node type\"\n+                          :attribute :block/type\n+                          :schema {:type :string\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/schema         {:title \"Node schema\"\n+                          :attribute :block/schema\n+                          :schema {:type :map\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/parent         {:title \"Node parent\"\n+                          :attribute :block/parent\n+                          :schema {:type :entity\n+                                   :public? false\n+                                   :hide? true}}\n+   :block/order          {:title \"Node order\"",
        "comment_created_at": "2024-11-06T23:10:08+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "> I haven't looked at the rest of these attributes but there is probably a lot more to be said about them...\r\n\r\nI looked at the rest of these and disabled more that are implementation details that could change. I would've disabled :block/type as it's still a work in progress e.g. :block/type \"journal\" nodes tagged with `#Journal`  but left it alone since you wanted to make it queryable with https://github.com/logseq/logseq/commit/94773db6f3e17a3e4f0ca42d8e9dcf0193d9c7f5",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "979177004",
    "pr_number": 5341,
    "pr_file": "src/main/frontend/db/model.cljs",
    "created_at": "2022-09-24T06:52:21+00:00",
    "commented_code": "(defn get-all-properties\n   []\n   (let [properties (d/q\n-                     '[:find [?p ...]\n-                       :where\n-                       [_ :block/properties ?p]]\n-                     (conn/get-db))\n-        properties (remove (fn [m] (empty? m)) properties)]\n+                    '[:find [?p ...]\n+                      :where\n+                      [_ :block/properties ?p]]\n+                    (conn/get-db))\n+        properties (remove (fn [m] (or (empty? m) \n+                                       (gp-block/whiteboard-properties? m))) properties)]",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "979177004",
        "repo_full_name": "logseq/logseq",
        "pr_number": 5341,
        "pr_file": "src/main/frontend/db/model.cljs",
        "discussion_id": "979177004",
        "commented_code": "@@ -1350,11 +1352,12 @@\n (defn get-all-properties\n   []\n   (let [properties (d/q\n-                     '[:find [?p ...]\n-                       :where\n-                       [_ :block/properties ?p]]\n-                     (conn/get-db))\n-        properties (remove (fn [m] (empty? m)) properties)]\n+                    '[:find [?p ...]\n+                      :where\n+                      [_ :block/properties ?p]]\n+                    (conn/get-db))\n+        properties (remove (fn [m] (or (empty? m) \n+                                       (gp-block/whiteboard-properties? m))) properties)]",
        "comment_created_at": "2022-09-24T06:52:21+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "I don't think ignoring whiteboard properties by feature is a sustainable approach. Currently I'm seeing unwanted results in a query for the `type` property, see below. Even if we could find every feature that uses `:block/properties`, fix it and ensure future features filter whiteboard properties, this would break user queries if they use a whiteboard property. From lambda, I'm seeing the following whiteboard properties that could potentially break user queries (except :collapsed) :\r\n\r\n```\r\n$ bb '(->> (fs/glob \"whiteboards\" \"*.edn\") (map #(-> % str slurp edn/read-string)) (mapcat #(-> % :blocks first :block/properties keys)) distinct sort)'\r\n(:blockType :collapsed :collapsedHeight :compact :fill :id :index :isAutoResizing :ls-type :noFill :nonce :opacity :pageId :parentId :point :scale :scaleLevel :size :stroke :strokeType :strokeWidth :type)\r\n```\r\n\r\nI see a couple solutions to the problem:\r\n1. If the all the whiteboard properties are known, put them under a namespace like we did with [macros](https://github.com/logseq/logseq/pull/6105#discussion_r934914562). Then add those whiteboard properties in `gp-property/hidden-built-in-properties`\r\n2. Introduce a new block attribute just for this purpose for whiteboards e.g. `:block/whiteboard-properties`\r\n3. Introduce a new block attribute that can be used by whiteboards and third parties that have the same need to store feature-generated properties. Perhaps `:block/{non-user-properties,feature-properties,data-properties}`. Over time we could migrate some of our built-in properties to use this block attribute instead\r\n\r\nI'd suggest solution 3 or 1 depending on if all the whiteboard properties are known, as they both seem like longer term solutions.\r\n@tiensonqin I'd be interested to hear what you think of this and what solutions you see and prefer\r\n\r\n<img width=\"612\" alt=\"Screen Shot 2022-09-24 at 2 27 03 AM\" src=\"https://user-images.githubusercontent.com/97210743/192083425-6502f48c-f864-4ad7-8197-e61532050bf8.png\">\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "981909587",
        "repo_full_name": "logseq/logseq",
        "pr_number": 5341,
        "pr_file": "src/main/frontend/db/model.cljs",
        "discussion_id": "979177004",
        "commented_code": "@@ -1350,11 +1352,12 @@\n (defn get-all-properties\n   []\n   (let [properties (d/q\n-                     '[:find [?p ...]\n-                       :where\n-                       [_ :block/properties ?p]]\n-                     (conn/get-db))\n-        properties (remove (fn [m] (empty? m)) properties)]\n+                    '[:find [?p ...]\n+                      :where\n+                      [_ :block/properties ?p]]\n+                    (conn/get-db))\n+        properties (remove (fn [m] (or (empty? m) \n+                                       (gp-block/whiteboard-properties? m))) properties)]",
        "comment_created_at": "2022-09-28T03:34:44+00:00",
        "comment_author": "pengx17",
        "comment_body": "Yeah, the current implementation of putting all tldraw shape properties to `block/properties` is not being thought through indeed!  I prefer no.3 or no.2 which could make the data structure more explicitly expose its purpose.",
        "pr_file_module": null
      },
      {
        "comment_id": "982427939",
        "repo_full_name": "logseq/logseq",
        "pr_number": 5341,
        "pr_file": "src/main/frontend/db/model.cljs",
        "discussion_id": "979177004",
        "commented_code": "@@ -1350,11 +1352,12 @@\n (defn get-all-properties\n   []\n   (let [properties (d/q\n-                     '[:find [?p ...]\n-                       :where\n-                       [_ :block/properties ?p]]\n-                     (conn/get-db))\n-        properties (remove (fn [m] (empty? m)) properties)]\n+                    '[:find [?p ...]\n+                      :where\n+                      [_ :block/properties ?p]]\n+                    (conn/get-db))\n+        properties (remove (fn [m] (or (empty? m) \n+                                       (gp-block/whiteboard-properties? m))) properties)]",
        "comment_created_at": "2022-09-28T13:45:12+00:00",
        "comment_author": "tiensonqin",
        "comment_body": "I also prefer no.3.",
        "pr_file_module": null
      },
      {
        "comment_id": "983015058",
        "repo_full_name": "logseq/logseq",
        "pr_number": 5341,
        "pr_file": "src/main/frontend/db/model.cljs",
        "discussion_id": "979177004",
        "commented_code": "@@ -1350,11 +1352,12 @@\n (defn get-all-properties\n   []\n   (let [properties (d/q\n-                     '[:find [?p ...]\n-                       :where\n-                       [_ :block/properties ?p]]\n-                     (conn/get-db))\n-        properties (remove (fn [m] (empty? m)) properties)]\n+                    '[:find [?p ...]\n+                      :where\n+                      [_ :block/properties ?p]]\n+                    (conn/get-db))\n+        properties (remove (fn [m] (or (empty? m) \n+                                       (gp-block/whiteboard-properties? m))) properties)]",
        "comment_created_at": "2022-09-29T02:47:52+00:00",
        "comment_author": "pengx17",
        "comment_body": "@logseq-cldwalker @tiensonqin I believe we should make the decision asap. It will be getting harder to make the migration when this feature gets more users.",
        "pr_file_module": null
      },
      {
        "comment_id": "983030118",
        "repo_full_name": "logseq/logseq",
        "pr_number": 5341,
        "pr_file": "src/main/frontend/db/model.cljs",
        "discussion_id": "979177004",
        "commented_code": "@@ -1350,11 +1352,12 @@\n (defn get-all-properties\n   []\n   (let [properties (d/q\n-                     '[:find [?p ...]\n-                       :where\n-                       [_ :block/properties ?p]]\n-                     (conn/get-db))\n-        properties (remove (fn [m] (empty? m)) properties)]\n+                    '[:find [?p ...]\n+                      :where\n+                      [_ :block/properties ?p]]\n+                    (conn/get-db))\n+        properties (remove (fn [m] (or (empty? m) \n+                                       (gp-block/whiteboard-properties? m))) properties)]",
        "comment_created_at": "2022-09-29T03:28:18+00:00",
        "comment_author": "tiensonqin",
        "comment_body": "Let's go with solution 1 for now.\r\n![CleanShot 2022-09-29 at 11 25 23](https://user-images.githubusercontent.com/479169/192931699-e18433c2-92e8-4843-b0fe-2e2ceb11002f.png)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "983035702",
        "repo_full_name": "logseq/logseq",
        "pr_number": 5341,
        "pr_file": "src/main/frontend/db/model.cljs",
        "discussion_id": "979177004",
        "commented_code": "@@ -1350,11 +1352,12 @@\n (defn get-all-properties\n   []\n   (let [properties (d/q\n-                     '[:find [?p ...]\n-                       :where\n-                       [_ :block/properties ?p]]\n-                     (conn/get-db))\n-        properties (remove (fn [m] (empty? m)) properties)]\n+                    '[:find [?p ...]\n+                      :where\n+                      [_ :block/properties ?p]]\n+                    (conn/get-db))\n+        properties (remove (fn [m] (or (empty? m) \n+                                       (gp-block/whiteboard-properties? m))) properties)]",
        "comment_created_at": "2022-09-29T03:42:29+00:00",
        "comment_author": "pengx17",
        "comment_body": "Should I put all shape props into a single `:logseq.tldraw.shape` keyword, or renaming every prop key's with a prefixed namespace?\r\n\r\neg., \r\n```edn\r\n{:block/properties\r\n {:logseq.tldraw.shape {:id \"63346ddf-6c58-48c3-ae83-f6d1cbabd937\"\r\n                        :fill \"black\"}}}\r\n```\r\nvs\r\n```edn\r\n{:block/properties\r\n {:logseq.tldraw.id  \"63346ddf-6c58-48c3-ae83-f6d1cbabd937\"\r\n  :logseq.tldraw.fill \"black\"}}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "983041354",
        "repo_full_name": "logseq/logseq",
        "pr_number": 5341,
        "pr_file": "src/main/frontend/db/model.cljs",
        "discussion_id": "979177004",
        "commented_code": "@@ -1350,11 +1352,12 @@\n (defn get-all-properties\n   []\n   (let [properties (d/q\n-                     '[:find [?p ...]\n-                       :where\n-                       [_ :block/properties ?p]]\n-                     (conn/get-db))\n-        properties (remove (fn [m] (empty? m)) properties)]\n+                    '[:find [?p ...]\n+                      :where\n+                      [_ :block/properties ?p]]\n+                    (conn/get-db))\n+        properties (remove (fn [m] (or (empty? m) \n+                                       (gp-block/whiteboard-properties? m))) properties)]",
        "comment_created_at": "2022-09-29T03:57:58+00:00",
        "comment_author": "tiensonqin",
        "comment_body": "I prefer the first solution here because tldraw shape's properties could be a lot compared to the outliner blocks, grouping all the shape props into a single `:logseq.tldraw.shape` keyword also makes it easy to handle when this block needs to be converted to another type in the future. \r\nThe bad part is that it's impossible to query nested properties at this moment, for example `(property [:logseq.tldraw.shape :fill] \"black\")`, but we can address this later.",
        "pr_file_module": null
      },
      {
        "comment_id": "983043297",
        "repo_full_name": "logseq/logseq",
        "pr_number": 5341,
        "pr_file": "src/main/frontend/db/model.cljs",
        "discussion_id": "979177004",
        "commented_code": "@@ -1350,11 +1352,12 @@\n (defn get-all-properties\n   []\n   (let [properties (d/q\n-                     '[:find [?p ...]\n-                       :where\n-                       [_ :block/properties ?p]]\n-                     (conn/get-db))\n-        properties (remove (fn [m] (empty? m)) properties)]\n+                    '[:find [?p ...]\n+                      :where\n+                      [_ :block/properties ?p]]\n+                    (conn/get-db))\n+        properties (remove (fn [m] (or (empty? m) \n+                                       (gp-block/whiteboard-properties? m))) properties)]",
        "comment_created_at": "2022-09-29T04:03:34+00:00",
        "comment_author": "pengx17",
        "comment_body": "Let's do this!",
        "pr_file_module": null
      },
      {
        "comment_id": "983137400",
        "repo_full_name": "logseq/logseq",
        "pr_number": 5341,
        "pr_file": "src/main/frontend/db/model.cljs",
        "discussion_id": "979177004",
        "commented_code": "@@ -1350,11 +1352,12 @@\n (defn get-all-properties\n   []\n   (let [properties (d/q\n-                     '[:find [?p ...]\n-                       :where\n-                       [_ :block/properties ?p]]\n-                     (conn/get-db))\n-        properties (remove (fn [m] (empty? m)) properties)]\n+                    '[:find [?p ...]\n+                      :where\n+                      [_ :block/properties ?p]]\n+                    (conn/get-db))\n+        properties (remove (fn [m] (or (empty? m) \n+                                       (gp-block/whiteboard-properties? m))) properties)]",
        "comment_created_at": "2022-09-29T07:00:29+00:00",
        "comment_author": "pengx17",
        "comment_body": "An example edn after refactor:\r\n\r\n```edn\r\n{:blocks\r\n (#:block{:properties\r\n          {:ls-type :whiteboard-shape,\r\n           :logseq.tldraw.shape\r\n           {:stroke \"#ababab\",\r\n            :rotation 0,\r\n            :borderRadius 2,\r\n            :index 0,\r\n            :scale [1 1],\r\n            :ls-type \"whiteboard-shape\",\r\n            :fill \"var(--ls-secondary-background-color)\",\r\n            :type \"box\",\r\n            :size [286.6484375 131.13671875],\r\n            :strokeType \"line\",\r\n            :strokeWidth 2,\r\n            :opacity 1,\r\n            :id \"20c065e0-3faf-11ed-8659-3bc89882da7a\",\r\n            :noFill false,\r\n            :point [452.74609375 212.99609375],\r\n            :parentId \"63346ddf-6c58-48c3-ae83-f6d1cbabd937\",\r\n            :nonce 1664425692188}}}\r\n  #:block{:properties\r\n          {:ls-type :whiteboard-shape,\r\n           :logseq.tldraw.shape\r\n           {:stroke \"#ababab\",\r\n            :rotation 0,\r\n            :borderRadius 2,\r\n            :index 1,\r\n            :scale [1 1],\r\n            :ls-type \"whiteboard-shape\",\r\n            :fill \"var(--ls-secondary-b\r\nackground-color)\",\r\n            :type \"box\",\r\n            :size [286.6484375 131.13671875],\r\n            :strokeType \"line\",\r\n            :strokeWidth 2,\r\n            :opacity 1,\r\n            :id \"c9c958c0-3fc0-11ed-8215-9d39149053a1\",\r\n            :noFill false,\r\n            :point [624.57421875 246.927734375],\r\n            :parentId \"63346ddf-6c58-48c3-ae83-f6d1cbabd937\",\r\n            :nonce 1664425692232}}}),\r\n :pages\r\n (#:block{:uuid #uuid \"63346ddf-6c58-48c3-ae83-f6d1cbabd937\",\r\n          :properties\r\n          {:ls-type :whiteboard-page,\r\n           :logseq.tldraw.page\r\n           {:id \"63346ddf-6c58-48c3-ae83-f6d1cbabd937\",\r\n            :name \"page\",\r\n            :bindings {},\r\n            :nonce 141,\r\n            :assets []}},\r\n          :updated-at 1664433432479,\r\n          :created-at 1664380383263,\r\n          :type \"whiteboard\",\r\n          :name \"asdfasdfwwww\",\r\n          :original-name \"asdfasdfwwww\"})}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "983688675",
        "repo_full_name": "logseq/logseq",
        "pr_number": 5341,
        "pr_file": "src/main/frontend/db/model.cljs",
        "discussion_id": "979177004",
        "commented_code": "@@ -1350,11 +1352,12 @@\n (defn get-all-properties\n   []\n   (let [properties (d/q\n-                     '[:find [?p ...]\n-                       :where\n-                       [_ :block/properties ?p]]\n-                     (conn/get-db))\n-        properties (remove (fn [m] (empty? m)) properties)]\n+                    '[:find [?p ...]\n+                      :where\n+                      [_ :block/properties ?p]]\n+                    (conn/get-db))\n+        properties (remove (fn [m] (or (empty? m) \n+                                       (gp-block/whiteboard-properties? m))) properties)]",
        "comment_created_at": "2022-09-29T15:21:41+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "Also prefer solution 1 as it made it easy to hide it from autocompletion",
        "pr_file_module": null
      },
      {
        "comment_id": "983691655",
        "repo_full_name": "logseq/logseq",
        "pr_number": 5341,
        "pr_file": "src/main/frontend/db/model.cljs",
        "discussion_id": "979177004",
        "commented_code": "@@ -1350,11 +1352,12 @@\n (defn get-all-properties\n   []\n   (let [properties (d/q\n-                     '[:find [?p ...]\n-                       :where\n-                       [_ :block/properties ?p]]\n-                     (conn/get-db))\n-        properties (remove (fn [m] (empty? m)) properties)]\n+                    '[:find [?p ...]\n+                      :where\n+                      [_ :block/properties ?p]]\n+                    (conn/get-db))\n+        properties (remove (fn [m] (or (empty? m) \n+                                       (gp-block/whiteboard-properties? m))) properties)]",
        "comment_created_at": "2022-09-29T15:24:13+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "No longer seeing query issue for new whiteboards \ud83d\ude04 ",
        "pr_file_module": null
      }
    ]
  }
]