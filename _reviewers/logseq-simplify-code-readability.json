[
  {
    "discussion_id": "1419046230",
    "pr_number": 10643,
    "pr_file": "src/resources/dicts/en.edn",
    "created_at": "2023-12-07T14:25:03+00:00",
    "commented_code": ":page/updated-at \"Updated At\"\n  :page/backlinks \"Backlinks\"\n  :linked-references/filter-search \"Search in linked pages\"\n+ :linked-references/unexpected-error \"Linked References: Unexpected error. Please re-index your graph first.\"\n+ :linked-references/filter-heading \"Filter\"\n+ :linked-references/filter-directions \"Click to include and shift-click to exclude. Click again to remove.\"\n+ :linked-references/filter-includes \"Includes: \"\n+ :linked-references/filter-excludes \"Excludes: \"\n+ :linked-references/reference-count (fn [filters? filter-n total]",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1419046230",
        "repo_full_name": "logseq/logseq",
        "pr_number": 10643,
        "pr_file": "src/resources/dicts/en.edn",
        "discussion_id": "1419046230",
        "commented_code": "@@ -221,6 +221,23 @@\n  :page/updated-at \"Updated At\"\n  :page/backlinks \"Backlinks\"\n  :linked-references/filter-search \"Search in linked pages\"\n+ :linked-references/unexpected-error \"Linked References: Unexpected error. Please re-index your graph first.\"\n+ :linked-references/filter-heading \"Filter\"\n+ :linked-references/filter-directions \"Click to include and shift-click to exclude. Click again to remove.\"\n+ :linked-references/filter-includes \"Includes: \"\n+ :linked-references/filter-excludes \"Excludes: \"\n+ :linked-references/reference-count (fn [filters? filter-n total]",
        "comment_created_at": "2023-12-07T14:25:03+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "Let's simplify this fn as it only needs 2 args, the filtered-count and total-count, as we can pass nil for filtered-count if filters? isn't present in the calling fn. Since most translators aren't coders would be good to show examples in comments of different strings one can see",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1419062060",
    "pr_number": 10643,
    "pr_file": "src/resources/dicts/en.edn",
    "created_at": "2023-12-07T14:35:23+00:00",
    "commented_code": ":page/updated-at \"Updated At\"\n  :page/backlinks \"Backlinks\"\n  :linked-references/filter-search \"Search in linked pages\"\n+ :linked-references/unexpected-error \"Linked References: Unexpected error. Please re-index your graph first.\"\n+ :linked-references/filter-heading \"Filter\"\n+ :linked-references/filter-directions \"Click to include and shift-click to exclude. Click again to remove.\"\n+ :linked-references/filter-includes \"Includes: \"\n+ :linked-references/filter-excludes \"Excludes: \"\n+ :linked-references/reference-count (fn [filters? filter-n total]\n+                                      (str\n+                                       (when filters?\n+                                         (str filter-n \" of \"))\n+                                       total\n+                                       \" Linked Reference\"\n+                                       (when (not= total 1) \"s\")))",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1419062060",
        "repo_full_name": "logseq/logseq",
        "pr_number": 10643,
        "pr_file": "src/resources/dicts/en.edn",
        "discussion_id": "1419062060",
        "commented_code": "@@ -221,6 +221,23 @@\n  :page/updated-at \"Updated At\"\n  :page/backlinks \"Backlinks\"\n  :linked-references/filter-search \"Search in linked pages\"\n+ :linked-references/unexpected-error \"Linked References: Unexpected error. Please re-index your graph first.\"\n+ :linked-references/filter-heading \"Filter\"\n+ :linked-references/filter-directions \"Click to include and shift-click to exclude. Click again to remove.\"\n+ :linked-references/filter-includes \"Includes: \"\n+ :linked-references/filter-excludes \"Excludes: \"\n+ :linked-references/reference-count (fn [filters? filter-n total]\n+                                      (str\n+                                       (when filters?\n+                                         (str filter-n \" of \"))\n+                                       total\n+                                       \" Linked Reference\"\n+                                       (when (not= total 1) \"s\")))",
        "comment_created_at": "2023-12-07T14:35:23+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "```suggestion\r\n                                       (if (= total 1) \" Linked Reference\" \" Linked References\")\r\n```\r\nLet's simplify logic to `if` and `str` for the non-coders where possible",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1367971985",
    "pr_number": 10390,
    "pr_file": "src/main/frontend/extensions/pdf/core.cljs",
    "created_at": "2023-10-22T21:25:38+00:00",
    "commented_code": "[:ul.extensions__pdf-hls-ctx-menu\n      {:ref      *el\n-      :style    {:top top :left left :visibility (if (and @*highlight-mode? new?) \"hidden\" \"visible\")}\n+      :style    {:top top :left left :visibility (if (or (not can-open?) (and @*highlight-mode? new?)) \"hidden\" \"visible\")}",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1367971985",
        "repo_full_name": "logseq/logseq",
        "pr_number": 10390,
        "pr_file": "src/main/frontend/extensions/pdf/core.cljs",
        "discussion_id": "1367971985",
        "commented_code": "@@ -189,7 +190,7 @@\n \n     [:ul.extensions__pdf-hls-ctx-menu\n      {:ref      *el\n-      :style    {:top top :left left :visibility (if (and @*highlight-mode? new?) \"hidden\" \"visible\")}\n+      :style    {:top top :left left :visibility (if (or (not can-open?) (and @*highlight-mode? new?)) \"hidden\" \"visible\")}",
        "comment_created_at": "2023-10-22T21:25:38+00:00",
        "comment_author": "udkl",
        "comment_body": "Something like this is probably cleaner :\r\n\r\n```clj\r\n(let [is-new-highlight (and selection @*highlight-mode? new?)\r\n        is-existing-highlight (and selection @*highlight-mode? (not new?))\r\n        should-display-for-new-highlight (and is-new-highlight (state/sub :pdf/auto-open-ctx-menu?))\r\n       ....]\r\n  ......\r\n    :style    {:top top :left left :visibility (if (or is-existing-highlight should-display-for-new-highlight) \"visible\" \"hidden\")}\r\n  \r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1368745108",
        "repo_full_name": "logseq/logseq",
        "pr_number": 10390,
        "pr_file": "src/main/frontend/extensions/pdf/core.cljs",
        "discussion_id": "1367971985",
        "commented_code": "@@ -189,7 +190,7 @@\n \n     [:ul.extensions__pdf-hls-ctx-menu\n      {:ref      *el\n-      :style    {:top top :left left :visibility (if (and @*highlight-mode? new?) \"hidden\" \"visible\")}\n+      :style    {:top top :left left :visibility (if (or (not can-open?) (and @*highlight-mode? new?)) \"hidden\" \"visible\")}",
        "comment_created_at": "2023-10-23T14:09:58+00:00",
        "comment_author": "xyhp915",
        "comment_body": "Thanks for your suggestion!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1322417691",
    "pr_number": 10200,
    "pr_file": "src/main/frontend/components/header.cljs",
    "created_at": "2023-09-12T05:46:01+00:00",
    "commented_code": "platform (str \"App Version: \" version \"\n\"\n                       \"Git Revision: \" config/REVISION \"\n\"\n                       \"Platform: \" safe-ua \"\n\"\n-                      \"Language: \" (.-language js/navigator))]\n+                      \"Language: \" (.-language js/navigator) \"\n\"\n+                      \"Plugins: \" (str (keys (:plugin/installed-plugins @state/state))))]",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1322417691",
        "repo_full_name": "logseq/logseq",
        "pr_number": 10200,
        "pr_file": "src/main/frontend/components/header.cljs",
        "discussion_id": "1322417691",
        "commented_code": "@@ -68,7 +68,8 @@\n         platform (str \"App Version: \" version \"\\n\"\n                       \"Git Revision: \" config/REVISION \"\\n\"\n                       \"Platform: \" safe-ua \"\\n\"\n-                      \"Language: \" (.-language js/navigator))]\n+                      \"Language: \" (.-language js/navigator) \"\\n\"\n+                      \"Plugins: \" (str (keys (:plugin/installed-plugins @state/state))))]",
        "comment_created_at": "2023-09-12T05:46:01+00:00",
        "comment_author": "sprocketc",
        "comment_body": "Non blocking nit: This is already wrapped in a `str` function. We can remove the nested`str`, or maybe replace it with something like `(string/join \", \" (map name (keys (:plugin/installed-plugins @state/state))))` for readability.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "548011016",
    "pr_number": 733,
    "pr_file": "src/main/frontend/filtering.cljs",
    "created_at": "2020-12-23T15:24:10+00:00",
    "commented_code": "+(ns frontend.filtering\n+  (:require [frontend.util :as util]\n+            [frontend.state :as state]\n+            [frontend.db :as db]))\n+\n+(defn get-block-references\n+  [block]\n+  (map #(if (= (first %) \"Tag\") (second %) (second (:url (second %))))\n+       (filter #(and (some (partial = (first %)) [\"Tag\" \"Link\"])\n+                     (or (= (first %) \"Tag\")\n+                         (= (first (:url (second %))) \"Search\")))\n+               (:block/title block))))\n+\n+(defn get-nested-block-references\n+  [block]\n+  (let [repo (state/get-current-repo)\n+        children (-> (db/get-block-immediate-children repo (:block/uuid block))\n+                     db/sort-by-pos)\n+        child-refs (map get-nested-block-references children)\n+        block-refs (get-block-references block)]\n+    (flatten (concat child-refs block-refs))))\n+\n+(defn matches-filter\n+  [references filter-state]\n+  (every? #(= (util/in? (first %) references) (second %)) filter-state))\n+\n+(defn block-matches-filter\n+  [block filter-state]\n+  (let [repo (state/get-current-repo)\n+        children (-> (db/get-block-immediate-children repo (:block/uuid block))\n+                     db/sort-by-pos)\n+        block-matches (matches-filter (get-block-references block) filter-state)\n+        child-matches (delay (some #(block-matches-filter % filter-state) children))]\n+    (or block-matches @child-matches)))",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "548011016",
        "repo_full_name": "logseq/logseq",
        "pr_number": 733,
        "pr_file": "src/main/frontend/filtering.cljs",
        "discussion_id": "548011016",
        "commented_code": "@@ -0,0 +1,43 @@\n+(ns frontend.filtering\n+  (:require [frontend.util :as util]\n+            [frontend.state :as state]\n+            [frontend.db :as db]))\n+\n+(defn get-block-references\n+  [block]\n+  (map #(if (= (first %) \"Tag\") (second %) (second (:url (second %))))\n+       (filter #(and (some (partial = (first %)) [\"Tag\" \"Link\"])\n+                     (or (= (first %) \"Tag\")\n+                         (= (first (:url (second %))) \"Search\")))\n+               (:block/title block))))\n+\n+(defn get-nested-block-references\n+  [block]\n+  (let [repo (state/get-current-repo)\n+        children (-> (db/get-block-immediate-children repo (:block/uuid block))\n+                     db/sort-by-pos)\n+        child-refs (map get-nested-block-references children)\n+        block-refs (get-block-references block)]\n+    (flatten (concat child-refs block-refs))))\n+\n+(defn matches-filter\n+  [references filter-state]\n+  (every? #(= (util/in? (first %) references) (second %)) filter-state))\n+\n+(defn block-matches-filter\n+  [block filter-state]\n+  (let [repo (state/get-current-repo)\n+        children (-> (db/get-block-immediate-children repo (:block/uuid block))\n+                     db/sort-by-pos)\n+        block-matches (matches-filter (get-block-references block) filter-state)\n+        child-matches (delay (some #(block-matches-filter % filter-state) children))]\n+    (or block-matches @child-matches)))",
        "comment_created_at": "2020-12-23T15:24:10+00:00",
        "comment_author": "tiensonqin",
        "comment_body": "The code could be rewritten as below to avoid the `delay` fn:\r\n```\r\n(or block-matches \r\n   (some #(block-matches-filter % filter-state) children))\r\n```\r\nWe can introduce a let binding if we want to make the code easier to read.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "548011702",
    "pr_number": 733,
    "pr_file": "src/main/frontend/components/reference.cljs",
    "created_at": "2020-12-23T15:25:41+00:00",
    "commented_code": "scheduled-or-deadlines (if journal?\n                                    (db/get-date-scheduled-or-deadlines (string/capitalize page-name))\n                                    nil)\n+          references (remove #{page-name} (distinct (flatten (map filtering/get-nested-block-references (flatten (map val ref-blocks))))))",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "548011702",
        "repo_full_name": "logseq/logseq",
        "pr_number": 733,
        "pr_file": "src/main/frontend/components/reference.cljs",
        "discussion_id": "548011702",
        "commented_code": "@@ -32,6 +67,9 @@\n           scheduled-or-deadlines (if journal?\n                                    (db/get-date-scheduled-or-deadlines (string/capitalize page-name))\n                                    nil)\n+          references (remove #{page-name} (distinct (flatten (map filtering/get-nested-block-references (flatten (map val ref-blocks))))))",
        "comment_created_at": "2020-12-23T15:25:41+00:00",
        "comment_author": "tiensonqin",
        "comment_body": "Consider using thread macros `->>` to make it easier to read :)\r\nhttps://clojuredocs.org/clojure.core/-%3E%3E",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1138576183",
    "pr_number": 8792,
    "pr_file": "src/electron/electron/utils.cljs",
    "created_at": "2023-03-16T12:27:16+00:00",
    "commented_code": "(defn fix-win-path!\n   [path]\n-  (when path\n+  (when (not-empty path)",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1138576183",
        "repo_full_name": "logseq/logseq",
        "pr_number": 8792,
        "pr_file": "src/electron/electron/utils.cljs",
        "discussion_id": "1138576183",
        "commented_code": "@@ -37,7 +37,7 @@\n \n (defn fix-win-path!\n   [path]\n-  (when path\n+  (when (not-empty path)",
        "comment_created_at": "2023-03-16T12:27:16+00:00",
        "comment_author": "RCmerci",
        "comment_body": "can just use `seq`: (when (seq path) ...)",
        "pr_file_module": null
      },
      {
        "comment_id": "1139795140",
        "repo_full_name": "logseq/logseq",
        "pr_number": 8792,
        "pr_file": "src/electron/electron/utils.cljs",
        "discussion_id": "1138576183",
        "commented_code": "@@ -37,7 +37,7 @@\n \n (defn fix-win-path!\n   [path]\n-  (when path\n+  (when (not-empty path)",
        "comment_created_at": "2023-03-17T05:57:58+00:00",
        "comment_author": "andelf",
        "comment_body": "I prefer to use them interchangeably. Since `non-empty` is more semanticly meaningful.\r\n",
        "pr_file_module": null
      }
    ]
  }
]