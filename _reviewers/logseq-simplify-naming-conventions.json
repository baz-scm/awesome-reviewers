[
  {
    "discussion_id": "1088332709",
    "pr_number": 8222,
    "pr_file": "CONTRIBUTING.md",
    "created_at": "2023-01-26T20:57:44+00:00",
    "commented_code": "+# Contributing to Logseq\n+\n+We would love for you to contribute to Logseq and help make it even better than it is today!\n+As a contributor, here are the guidelines we would like you to follow:\n+\n+ - [Code of Conduct](#coc)\n+ - [Question or Problem?](#question)\n+ - [Issues and Bugs](#issue)\n+ - [Feature Requests](#feature)\n+ - [Submission Guidelines](#submit)\n+ - [Coding Rules](#rules)\n+ - [Commit Message Guidelines](#commit)\n+ - [Signing the CLA](#cla)\n+\n+\n+## <a name=\"coc\"></a> Code of Conduct\n+\n+Help us keep Logseq open and inclusive.\n+Please read and follow our [Code of Conduct][coc].\n+\n+\n+## <a name=\"question\"></a> Got a Question or a Problem?\n+\n+Do not open issues for general support questions or feature requests as we want to keep GitHub issues for bug reports.\n+Instead, we recommend using [Logseq forum][forum] to ask support-related questions. \n+\n+The Logseq forum is a much better place to ask questions since:\n+\n+- there are more people willing to help on the forum\n+- questions and answers stay available for public viewing so your question/answer might help someone else\n+- The forum's voting system assures that the best answers are prominently visible.\n+\n+To save your and our time, we will systematically close all issues that are requests for general support and redirect people to the forum.\n+\n+If you would like to chat about the question in real-time, you can reach out via [our Discord server][discord].\n+\n+\n+## <a name=\"issue\"></a> Found a Bug?\n+\n+If you find a bug in the source code, you can help us by [submitting an issue](#submit-issue) to our [GitHub Repository][github].\n+Even better, you can [submit a Pull Request](#submit-pr) with a fix.\n+\n+\n+## <a name=\"feature\"></a> Missing a Feature?\n+You can *request* a new feature by [Creating a thread][feature-request] in our forum.\n+If you would like to *implement* a new feature, please consider the size of the change in order to determine the right steps to proceed:\n+\n+* For a **Major Feature**, first open an issue and outline your proposal so that it can be discussed.\n+  This process allows us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.\n+\n+  **Note**: Adding a new topic to the documentation, or significantly re-writing a topic, counts as a major feature.\n+\n+* **Small Features** can be crafted and directly [submitted as a Pull Request](#submit-pr).\n+\n+\n+## <a name=\"submit\"></a> Submission Guidelines\n+\n+\n+### <a name=\"submit-issue\"></a> Submitting an Issue\n+\n+Before you submit an issue, please search the [issue tracker][issue-tracker]. An issue for your problem might already exist and the discussion might inform you of workarounds readily available.\n+\n+Please include the following with each issue:\n+\n+- Version of Logseq\n+- Your operating system\n+- List of extensions that you have installed. Attempt to recreate the issue after disabling all extensions.\n+- Reproducible steps (1... 2... 3...) that cause the issue\n+- What you expected to see, versus what you actually saw\n+- Images, animations, or a link to a video showing the issue occurring\n+- A code snippet that demonstrates the issue or a link to a  code repository the developers can easily pull down to recreate the  issue locally\n+  - **Note:** Because the developers need to copy and paste the code snippet, including a code snippet as a media file (i.e. .gif)  is not sufficient.\n+- Errors from the Dev Tools Console (open from the menu: View > Toggle Developer Tools or press CTRL + Shift + i)\n+\n+You can file new issues by selecting from our [new issue templates][new-issue] and filling out the issue template.\n+\n+\n+### <a name=\"submit-pr\"></a> Submitting a Pull Request (PR)\n+\n+Before you submit your Pull Request (PR) consider the following guidelines:\n+\n+1. Search [GitHub][search-pr] for an open or closed PR that relates to your submission.\n+   You don't want to duplicate existing efforts.\n+\n+2. Be sure that an issue describes the problem you're fixing, or documents the design for the feature you'd like to add.\n+   Discussing the design upfront helps to ensure that we're ready to accept your work.\n+\n+3. Please sign our [Contributor License Agreement (CLA)](#cla) before sending PRs.\n+   We cannot accept code without a signed CLA.\n+   Make sure you author all contributed Git commits with email address associated with your CLA signature.\n+\n+4. [Fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) the logseq/logseq repo.\n+\n+5. In your forked repository, make your changes in a new git branch:\n+\n+     ```shell\n+     git checkout -b my-fix-branch master\n+     ```\n+\n+6. Create your patch, **including appropriate test cases**.\n+\n+7. Follow our [Coding Rules](#rules).\n+\n+8. Run the full Logseq test suite, as described in the [developer documentation][dev-doc], and ensure that all tests pass.\n+\n+9. Commit your changes using a descriptive commit message that follows our [commit message conventions](#commit).\n+   Adherence to these conventions is necessary because release notes are automatically generated from these messages.\n+\n+     ```shell\n+     git commit --all\n+     ```\n+    Note: the optional commit `-a` command line option will automatically \"add\" and \"rm\" edited files.\n+\n+10. Push your branch to GitHub:\n+\n+    ```shell\n+    git push origin my-fix-branch\n+    ```\n+\n+11. In GitHub, send a pull request to `logseq:master`.\n+\n+### Reviewing a Pull Request\n+\n+The Logseq team reserves the right not to accept pull requests from community members who haven't been good citizens of the community. Such behavior includes not following the [Logseq code of conduct][coc] and applies within or outside of Logseq managed channels.\n+\n+#### Addressing review feedback\n+\n+If we ask for changes via code reviews then:\n+\n+1. Make the required updates to the code.\n+\n+2. Re-run the Logseq test suites to ensure tests are still passing.\n+\n+3. Create a fixup commit and push to your GitHub repository (this will update your Pull Request):\n+\n+    ```shell\n+    git commit --all --fixup HEAD\n+    git push\n+    ```\n+\n+    For more info on working with fixup commits see [here][fixup-commits].\n+\n+That's it! Thank you for your contribution!\n+\n+\n+##### Updating the commit message\n+\n+A reviewer might often suggest changes to a commit message (for example, to add more context for a change or adhere to our [commit message guidelines](#commit)).\n+In order to update the commit message of the last commit on your branch:\n+\n+1. Check out your branch:\n+\n+    ```shell\n+    git checkout my-fix-branch\n+    ```\n+\n+2. Amend the last commit and modify the commit message:\n+\n+    ```shell\n+    git commit --amend\n+    ```\n+\n+3. Push to your GitHub repository:\n+\n+    ```shell\n+    git push --force-with-lease\n+    ```\n+\n+> NOTE:<br />\n+> If you need to update the commit message of an earlier commit, you can use `git rebase` in interactive mode.\n+> See the [git docs](https://git-scm.com/docs/git-rebase#_interactive_mode) for more details.\n+\n+\n+#### After your pull request is merged\n+\n+After your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository:\n+\n+* Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\n+\n+    ```shell\n+    git push origin --delete my-fix-branch\n+    ```\n+\n+* Check out the master branch:\n+\n+    ```shell\n+    git checkout master -f\n+    ```\n+\n+* Delete the local branch:\n+\n+    ```shell\n+    git branch -D my-fix-branch\n+    ```\n+\n+* Update your local `master` with the latest upstream version:\n+\n+    ```shell\n+    git pull --ff upstream master\n+    ```\n+\n+\n+## <a name=\"rules\"></a> Coding Rules\n+To ensure consistency throughout the source code, keep these rules in mind as you are working:\n+\n+* All features or bug fixes **must be tested** by one or more specs (unit-tests).\n+* All public API methods **must be documented**.\n+* We follow [The Clojure Style Guide][clojure-style-guide]\n+   * For more information on formatting see [developer documentation][dev-doc]\n+\n+\n+\n+## <a name=\"commit\"></a> Commit Message Format",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1088332709",
        "repo_full_name": "logseq/logseq",
        "pr_number": 8222,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "1088332709",
        "commented_code": "@@ -0,0 +1,402 @@\n+# Contributing to Logseq\n+\n+We would love for you to contribute to Logseq and help make it even better than it is today!\n+As a contributor, here are the guidelines we would like you to follow:\n+\n+ - [Code of Conduct](#coc)\n+ - [Question or Problem?](#question)\n+ - [Issues and Bugs](#issue)\n+ - [Feature Requests](#feature)\n+ - [Submission Guidelines](#submit)\n+ - [Coding Rules](#rules)\n+ - [Commit Message Guidelines](#commit)\n+ - [Signing the CLA](#cla)\n+\n+\n+## <a name=\"coc\"></a> Code of Conduct\n+\n+Help us keep Logseq open and inclusive.\n+Please read and follow our [Code of Conduct][coc].\n+\n+\n+## <a name=\"question\"></a> Got a Question or a Problem?\n+\n+Do not open issues for general support questions or feature requests as we want to keep GitHub issues for bug reports.\n+Instead, we recommend using [Logseq forum][forum] to ask support-related questions. \n+\n+The Logseq forum is a much better place to ask questions since:\n+\n+- there are more people willing to help on the forum\n+- questions and answers stay available for public viewing so your question/answer might help someone else\n+- The forum's voting system assures that the best answers are prominently visible.\n+\n+To save your and our time, we will systematically close all issues that are requests for general support and redirect people to the forum.\n+\n+If you would like to chat about the question in real-time, you can reach out via [our Discord server][discord].\n+\n+\n+## <a name=\"issue\"></a> Found a Bug?\n+\n+If you find a bug in the source code, you can help us by [submitting an issue](#submit-issue) to our [GitHub Repository][github].\n+Even better, you can [submit a Pull Request](#submit-pr) with a fix.\n+\n+\n+## <a name=\"feature\"></a> Missing a Feature?\n+You can *request* a new feature by [Creating a thread][feature-request] in our forum.\n+If you would like to *implement* a new feature, please consider the size of the change in order to determine the right steps to proceed:\n+\n+* For a **Major Feature**, first open an issue and outline your proposal so that it can be discussed.\n+  This process allows us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.\n+\n+  **Note**: Adding a new topic to the documentation, or significantly re-writing a topic, counts as a major feature.\n+\n+* **Small Features** can be crafted and directly [submitted as a Pull Request](#submit-pr).\n+\n+\n+## <a name=\"submit\"></a> Submission Guidelines\n+\n+\n+### <a name=\"submit-issue\"></a> Submitting an Issue\n+\n+Before you submit an issue, please search the [issue tracker][issue-tracker]. An issue for your problem might already exist and the discussion might inform you of workarounds readily available.\n+\n+Please include the following with each issue:\n+\n+- Version of Logseq\n+- Your operating system\n+- List of extensions that you have installed. Attempt to recreate the issue after disabling all extensions.\n+- Reproducible steps (1... 2... 3...) that cause the issue\n+- What you expected to see, versus what you actually saw\n+- Images, animations, or a link to a video showing the issue occurring\n+- A code snippet that demonstrates the issue or a link to a  code repository the developers can easily pull down to recreate the  issue locally\n+  - **Note:** Because the developers need to copy and paste the code snippet, including a code snippet as a media file (i.e. .gif)  is not sufficient.\n+- Errors from the Dev Tools Console (open from the menu: View > Toggle Developer Tools or press CTRL + Shift + i)\n+\n+You can file new issues by selecting from our [new issue templates][new-issue] and filling out the issue template.\n+\n+\n+### <a name=\"submit-pr\"></a> Submitting a Pull Request (PR)\n+\n+Before you submit your Pull Request (PR) consider the following guidelines:\n+\n+1. Search [GitHub][search-pr] for an open or closed PR that relates to your submission.\n+   You don't want to duplicate existing efforts.\n+\n+2. Be sure that an issue describes the problem you're fixing, or documents the design for the feature you'd like to add.\n+   Discussing the design upfront helps to ensure that we're ready to accept your work.\n+\n+3. Please sign our [Contributor License Agreement (CLA)](#cla) before sending PRs.\n+   We cannot accept code without a signed CLA.\n+   Make sure you author all contributed Git commits with email address associated with your CLA signature.\n+\n+4. [Fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) the logseq/logseq repo.\n+\n+5. In your forked repository, make your changes in a new git branch:\n+\n+     ```shell\n+     git checkout -b my-fix-branch master\n+     ```\n+\n+6. Create your patch, **including appropriate test cases**.\n+\n+7. Follow our [Coding Rules](#rules).\n+\n+8. Run the full Logseq test suite, as described in the [developer documentation][dev-doc], and ensure that all tests pass.\n+\n+9. Commit your changes using a descriptive commit message that follows our [commit message conventions](#commit).\n+   Adherence to these conventions is necessary because release notes are automatically generated from these messages.\n+\n+     ```shell\n+     git commit --all\n+     ```\n+    Note: the optional commit `-a` command line option will automatically \"add\" and \"rm\" edited files.\n+\n+10. Push your branch to GitHub:\n+\n+    ```shell\n+    git push origin my-fix-branch\n+    ```\n+\n+11. In GitHub, send a pull request to `logseq:master`.\n+\n+### Reviewing a Pull Request\n+\n+The Logseq team reserves the right not to accept pull requests from community members who haven't been good citizens of the community. Such behavior includes not following the [Logseq code of conduct][coc] and applies within or outside of Logseq managed channels.\n+\n+#### Addressing review feedback\n+\n+If we ask for changes via code reviews then:\n+\n+1. Make the required updates to the code.\n+\n+2. Re-run the Logseq test suites to ensure tests are still passing.\n+\n+3. Create a fixup commit and push to your GitHub repository (this will update your Pull Request):\n+\n+    ```shell\n+    git commit --all --fixup HEAD\n+    git push\n+    ```\n+\n+    For more info on working with fixup commits see [here][fixup-commits].\n+\n+That's it! Thank you for your contribution!\n+\n+\n+##### Updating the commit message\n+\n+A reviewer might often suggest changes to a commit message (for example, to add more context for a change or adhere to our [commit message guidelines](#commit)).\n+In order to update the commit message of the last commit on your branch:\n+\n+1. Check out your branch:\n+\n+    ```shell\n+    git checkout my-fix-branch\n+    ```\n+\n+2. Amend the last commit and modify the commit message:\n+\n+    ```shell\n+    git commit --amend\n+    ```\n+\n+3. Push to your GitHub repository:\n+\n+    ```shell\n+    git push --force-with-lease\n+    ```\n+\n+> NOTE:<br />\n+> If you need to update the commit message of an earlier commit, you can use `git rebase` in interactive mode.\n+> See the [git docs](https://git-scm.com/docs/git-rebase#_interactive_mode) for more details.\n+\n+\n+#### After your pull request is merged\n+\n+After your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository:\n+\n+* Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\n+\n+    ```shell\n+    git push origin --delete my-fix-branch\n+    ```\n+\n+* Check out the master branch:\n+\n+    ```shell\n+    git checkout master -f\n+    ```\n+\n+* Delete the local branch:\n+\n+    ```shell\n+    git branch -D my-fix-branch\n+    ```\n+\n+* Update your local `master` with the latest upstream version:\n+\n+    ```shell\n+    git pull --ff upstream master\n+    ```\n+\n+\n+## <a name=\"rules\"></a> Coding Rules\n+To ensure consistency throughout the source code, keep these rules in mind as you are working:\n+\n+* All features or bug fixes **must be tested** by one or more specs (unit-tests).\n+* All public API methods **must be documented**.\n+* We follow [The Clojure Style Guide][clojure-style-guide]\n+   * For more information on formatting see [developer documentation][dev-doc]\n+\n+\n+\n+## <a name=\"commit\"></a> Commit Message Format",
        "comment_created_at": "2023-01-26T20:57:44+00:00",
        "comment_author": "logseq-cldwalker",
        "comment_body": "I have not seen most of this section consistently adhered to and I've never seen it enforced on a PR. Personally I'd be ok with removing this section or just putting a brief mention of the header which is the only part of the commit style that is intermittently followed. Curious to hear what the rest of the team thinks",
        "pr_file_module": null
      },
      {
        "comment_id": "1090928632",
        "repo_full_name": "logseq/logseq",
        "pr_number": 8222,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "1088332709",
        "commented_code": "@@ -0,0 +1,402 @@\n+# Contributing to Logseq\n+\n+We would love for you to contribute to Logseq and help make it even better than it is today!\n+As a contributor, here are the guidelines we would like you to follow:\n+\n+ - [Code of Conduct](#coc)\n+ - [Question or Problem?](#question)\n+ - [Issues and Bugs](#issue)\n+ - [Feature Requests](#feature)\n+ - [Submission Guidelines](#submit)\n+ - [Coding Rules](#rules)\n+ - [Commit Message Guidelines](#commit)\n+ - [Signing the CLA](#cla)\n+\n+\n+## <a name=\"coc\"></a> Code of Conduct\n+\n+Help us keep Logseq open and inclusive.\n+Please read and follow our [Code of Conduct][coc].\n+\n+\n+## <a name=\"question\"></a> Got a Question or a Problem?\n+\n+Do not open issues for general support questions or feature requests as we want to keep GitHub issues for bug reports.\n+Instead, we recommend using [Logseq forum][forum] to ask support-related questions. \n+\n+The Logseq forum is a much better place to ask questions since:\n+\n+- there are more people willing to help on the forum\n+- questions and answers stay available for public viewing so your question/answer might help someone else\n+- The forum's voting system assures that the best answers are prominently visible.\n+\n+To save your and our time, we will systematically close all issues that are requests for general support and redirect people to the forum.\n+\n+If you would like to chat about the question in real-time, you can reach out via [our Discord server][discord].\n+\n+\n+## <a name=\"issue\"></a> Found a Bug?\n+\n+If you find a bug in the source code, you can help us by [submitting an issue](#submit-issue) to our [GitHub Repository][github].\n+Even better, you can [submit a Pull Request](#submit-pr) with a fix.\n+\n+\n+## <a name=\"feature\"></a> Missing a Feature?\n+You can *request* a new feature by [Creating a thread][feature-request] in our forum.\n+If you would like to *implement* a new feature, please consider the size of the change in order to determine the right steps to proceed:\n+\n+* For a **Major Feature**, first open an issue and outline your proposal so that it can be discussed.\n+  This process allows us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.\n+\n+  **Note**: Adding a new topic to the documentation, or significantly re-writing a topic, counts as a major feature.\n+\n+* **Small Features** can be crafted and directly [submitted as a Pull Request](#submit-pr).\n+\n+\n+## <a name=\"submit\"></a> Submission Guidelines\n+\n+\n+### <a name=\"submit-issue\"></a> Submitting an Issue\n+\n+Before you submit an issue, please search the [issue tracker][issue-tracker]. An issue for your problem might already exist and the discussion might inform you of workarounds readily available.\n+\n+Please include the following with each issue:\n+\n+- Version of Logseq\n+- Your operating system\n+- List of extensions that you have installed. Attempt to recreate the issue after disabling all extensions.\n+- Reproducible steps (1... 2... 3...) that cause the issue\n+- What you expected to see, versus what you actually saw\n+- Images, animations, or a link to a video showing the issue occurring\n+- A code snippet that demonstrates the issue or a link to a  code repository the developers can easily pull down to recreate the  issue locally\n+  - **Note:** Because the developers need to copy and paste the code snippet, including a code snippet as a media file (i.e. .gif)  is not sufficient.\n+- Errors from the Dev Tools Console (open from the menu: View > Toggle Developer Tools or press CTRL + Shift + i)\n+\n+You can file new issues by selecting from our [new issue templates][new-issue] and filling out the issue template.\n+\n+\n+### <a name=\"submit-pr\"></a> Submitting a Pull Request (PR)\n+\n+Before you submit your Pull Request (PR) consider the following guidelines:\n+\n+1. Search [GitHub][search-pr] for an open or closed PR that relates to your submission.\n+   You don't want to duplicate existing efforts.\n+\n+2. Be sure that an issue describes the problem you're fixing, or documents the design for the feature you'd like to add.\n+   Discussing the design upfront helps to ensure that we're ready to accept your work.\n+\n+3. Please sign our [Contributor License Agreement (CLA)](#cla) before sending PRs.\n+   We cannot accept code without a signed CLA.\n+   Make sure you author all contributed Git commits with email address associated with your CLA signature.\n+\n+4. [Fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) the logseq/logseq repo.\n+\n+5. In your forked repository, make your changes in a new git branch:\n+\n+     ```shell\n+     git checkout -b my-fix-branch master\n+     ```\n+\n+6. Create your patch, **including appropriate test cases**.\n+\n+7. Follow our [Coding Rules](#rules).\n+\n+8. Run the full Logseq test suite, as described in the [developer documentation][dev-doc], and ensure that all tests pass.\n+\n+9. Commit your changes using a descriptive commit message that follows our [commit message conventions](#commit).\n+   Adherence to these conventions is necessary because release notes are automatically generated from these messages.\n+\n+     ```shell\n+     git commit --all\n+     ```\n+    Note: the optional commit `-a` command line option will automatically \"add\" and \"rm\" edited files.\n+\n+10. Push your branch to GitHub:\n+\n+    ```shell\n+    git push origin my-fix-branch\n+    ```\n+\n+11. In GitHub, send a pull request to `logseq:master`.\n+\n+### Reviewing a Pull Request\n+\n+The Logseq team reserves the right not to accept pull requests from community members who haven't been good citizens of the community. Such behavior includes not following the [Logseq code of conduct][coc] and applies within or outside of Logseq managed channels.\n+\n+#### Addressing review feedback\n+\n+If we ask for changes via code reviews then:\n+\n+1. Make the required updates to the code.\n+\n+2. Re-run the Logseq test suites to ensure tests are still passing.\n+\n+3. Create a fixup commit and push to your GitHub repository (this will update your Pull Request):\n+\n+    ```shell\n+    git commit --all --fixup HEAD\n+    git push\n+    ```\n+\n+    For more info on working with fixup commits see [here][fixup-commits].\n+\n+That's it! Thank you for your contribution!\n+\n+\n+##### Updating the commit message\n+\n+A reviewer might often suggest changes to a commit message (for example, to add more context for a change or adhere to our [commit message guidelines](#commit)).\n+In order to update the commit message of the last commit on your branch:\n+\n+1. Check out your branch:\n+\n+    ```shell\n+    git checkout my-fix-branch\n+    ```\n+\n+2. Amend the last commit and modify the commit message:\n+\n+    ```shell\n+    git commit --amend\n+    ```\n+\n+3. Push to your GitHub repository:\n+\n+    ```shell\n+    git push --force-with-lease\n+    ```\n+\n+> NOTE:<br />\n+> If you need to update the commit message of an earlier commit, you can use `git rebase` in interactive mode.\n+> See the [git docs](https://git-scm.com/docs/git-rebase#_interactive_mode) for more details.\n+\n+\n+#### After your pull request is merged\n+\n+After your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository:\n+\n+* Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\n+\n+    ```shell\n+    git push origin --delete my-fix-branch\n+    ```\n+\n+* Check out the master branch:\n+\n+    ```shell\n+    git checkout master -f\n+    ```\n+\n+* Delete the local branch:\n+\n+    ```shell\n+    git branch -D my-fix-branch\n+    ```\n+\n+* Update your local `master` with the latest upstream version:\n+\n+    ```shell\n+    git pull --ff upstream master\n+    ```\n+\n+\n+## <a name=\"rules\"></a> Coding Rules\n+To ensure consistency throughout the source code, keep these rules in mind as you are working:\n+\n+* All features or bug fixes **must be tested** by one or more specs (unit-tests).\n+* All public API methods **must be documented**.\n+* We follow [The Clojure Style Guide][clojure-style-guide]\n+   * For more information on formatting see [developer documentation][dev-doc]\n+\n+\n+\n+## <a name=\"commit\"></a> Commit Message Format",
        "comment_created_at": "2023-01-30T17:25:37+00:00",
        "comment_author": "sprocketc",
        "comment_body": "I agree with this. I personally prefer commit squashing based on pull request titles. Enforcing guidelines for PR titles sounds a lot easier and can produce a clean commit history.",
        "pr_file_module": null
      },
      {
        "comment_id": "1091068491",
        "repo_full_name": "logseq/logseq",
        "pr_number": 8222,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "1088332709",
        "commented_code": "@@ -0,0 +1,402 @@\n+# Contributing to Logseq\n+\n+We would love for you to contribute to Logseq and help make it even better than it is today!\n+As a contributor, here are the guidelines we would like you to follow:\n+\n+ - [Code of Conduct](#coc)\n+ - [Question or Problem?](#question)\n+ - [Issues and Bugs](#issue)\n+ - [Feature Requests](#feature)\n+ - [Submission Guidelines](#submit)\n+ - [Coding Rules](#rules)\n+ - [Commit Message Guidelines](#commit)\n+ - [Signing the CLA](#cla)\n+\n+\n+## <a name=\"coc\"></a> Code of Conduct\n+\n+Help us keep Logseq open and inclusive.\n+Please read and follow our [Code of Conduct][coc].\n+\n+\n+## <a name=\"question\"></a> Got a Question or a Problem?\n+\n+Do not open issues for general support questions or feature requests as we want to keep GitHub issues for bug reports.\n+Instead, we recommend using [Logseq forum][forum] to ask support-related questions. \n+\n+The Logseq forum is a much better place to ask questions since:\n+\n+- there are more people willing to help on the forum\n+- questions and answers stay available for public viewing so your question/answer might help someone else\n+- The forum's voting system assures that the best answers are prominently visible.\n+\n+To save your and our time, we will systematically close all issues that are requests for general support and redirect people to the forum.\n+\n+If you would like to chat about the question in real-time, you can reach out via [our Discord server][discord].\n+\n+\n+## <a name=\"issue\"></a> Found a Bug?\n+\n+If you find a bug in the source code, you can help us by [submitting an issue](#submit-issue) to our [GitHub Repository][github].\n+Even better, you can [submit a Pull Request](#submit-pr) with a fix.\n+\n+\n+## <a name=\"feature\"></a> Missing a Feature?\n+You can *request* a new feature by [Creating a thread][feature-request] in our forum.\n+If you would like to *implement* a new feature, please consider the size of the change in order to determine the right steps to proceed:\n+\n+* For a **Major Feature**, first open an issue and outline your proposal so that it can be discussed.\n+  This process allows us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.\n+\n+  **Note**: Adding a new topic to the documentation, or significantly re-writing a topic, counts as a major feature.\n+\n+* **Small Features** can be crafted and directly [submitted as a Pull Request](#submit-pr).\n+\n+\n+## <a name=\"submit\"></a> Submission Guidelines\n+\n+\n+### <a name=\"submit-issue\"></a> Submitting an Issue\n+\n+Before you submit an issue, please search the [issue tracker][issue-tracker]. An issue for your problem might already exist and the discussion might inform you of workarounds readily available.\n+\n+Please include the following with each issue:\n+\n+- Version of Logseq\n+- Your operating system\n+- List of extensions that you have installed. Attempt to recreate the issue after disabling all extensions.\n+- Reproducible steps (1... 2... 3...) that cause the issue\n+- What you expected to see, versus what you actually saw\n+- Images, animations, or a link to a video showing the issue occurring\n+- A code snippet that demonstrates the issue or a link to a  code repository the developers can easily pull down to recreate the  issue locally\n+  - **Note:** Because the developers need to copy and paste the code snippet, including a code snippet as a media file (i.e. .gif)  is not sufficient.\n+- Errors from the Dev Tools Console (open from the menu: View > Toggle Developer Tools or press CTRL + Shift + i)\n+\n+You can file new issues by selecting from our [new issue templates][new-issue] and filling out the issue template.\n+\n+\n+### <a name=\"submit-pr\"></a> Submitting a Pull Request (PR)\n+\n+Before you submit your Pull Request (PR) consider the following guidelines:\n+\n+1. Search [GitHub][search-pr] for an open or closed PR that relates to your submission.\n+   You don't want to duplicate existing efforts.\n+\n+2. Be sure that an issue describes the problem you're fixing, or documents the design for the feature you'd like to add.\n+   Discussing the design upfront helps to ensure that we're ready to accept your work.\n+\n+3. Please sign our [Contributor License Agreement (CLA)](#cla) before sending PRs.\n+   We cannot accept code without a signed CLA.\n+   Make sure you author all contributed Git commits with email address associated with your CLA signature.\n+\n+4. [Fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) the logseq/logseq repo.\n+\n+5. In your forked repository, make your changes in a new git branch:\n+\n+     ```shell\n+     git checkout -b my-fix-branch master\n+     ```\n+\n+6. Create your patch, **including appropriate test cases**.\n+\n+7. Follow our [Coding Rules](#rules).\n+\n+8. Run the full Logseq test suite, as described in the [developer documentation][dev-doc], and ensure that all tests pass.\n+\n+9. Commit your changes using a descriptive commit message that follows our [commit message conventions](#commit).\n+   Adherence to these conventions is necessary because release notes are automatically generated from these messages.\n+\n+     ```shell\n+     git commit --all\n+     ```\n+    Note: the optional commit `-a` command line option will automatically \"add\" and \"rm\" edited files.\n+\n+10. Push your branch to GitHub:\n+\n+    ```shell\n+    git push origin my-fix-branch\n+    ```\n+\n+11. In GitHub, send a pull request to `logseq:master`.\n+\n+### Reviewing a Pull Request\n+\n+The Logseq team reserves the right not to accept pull requests from community members who haven't been good citizens of the community. Such behavior includes not following the [Logseq code of conduct][coc] and applies within or outside of Logseq managed channels.\n+\n+#### Addressing review feedback\n+\n+If we ask for changes via code reviews then:\n+\n+1. Make the required updates to the code.\n+\n+2. Re-run the Logseq test suites to ensure tests are still passing.\n+\n+3. Create a fixup commit and push to your GitHub repository (this will update your Pull Request):\n+\n+    ```shell\n+    git commit --all --fixup HEAD\n+    git push\n+    ```\n+\n+    For more info on working with fixup commits see [here][fixup-commits].\n+\n+That's it! Thank you for your contribution!\n+\n+\n+##### Updating the commit message\n+\n+A reviewer might often suggest changes to a commit message (for example, to add more context for a change or adhere to our [commit message guidelines](#commit)).\n+In order to update the commit message of the last commit on your branch:\n+\n+1. Check out your branch:\n+\n+    ```shell\n+    git checkout my-fix-branch\n+    ```\n+\n+2. Amend the last commit and modify the commit message:\n+\n+    ```shell\n+    git commit --amend\n+    ```\n+\n+3. Push to your GitHub repository:\n+\n+    ```shell\n+    git push --force-with-lease\n+    ```\n+\n+> NOTE:<br />\n+> If you need to update the commit message of an earlier commit, you can use `git rebase` in interactive mode.\n+> See the [git docs](https://git-scm.com/docs/git-rebase#_interactive_mode) for more details.\n+\n+\n+#### After your pull request is merged\n+\n+After your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository:\n+\n+* Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\n+\n+    ```shell\n+    git push origin --delete my-fix-branch\n+    ```\n+\n+* Check out the master branch:\n+\n+    ```shell\n+    git checkout master -f\n+    ```\n+\n+* Delete the local branch:\n+\n+    ```shell\n+    git branch -D my-fix-branch\n+    ```\n+\n+* Update your local `master` with the latest upstream version:\n+\n+    ```shell\n+    git pull --ff upstream master\n+    ```\n+\n+\n+## <a name=\"rules\"></a> Coding Rules\n+To ensure consistency throughout the source code, keep these rules in mind as you are working:\n+\n+* All features or bug fixes **must be tested** by one or more specs (unit-tests).\n+* All public API methods **must be documented**.\n+* We follow [The Clojure Style Guide][clojure-style-guide]\n+   * For more information on formatting see [developer documentation][dev-doc]\n+\n+\n+\n+## <a name=\"commit\"></a> Commit Message Format",
        "comment_created_at": "2023-01-30T19:43:33+00:00",
        "comment_author": "bendyorke",
        "comment_body": "agree with @logseq-cldwalker and @sprocketc - naming things is hard, the less the better \ud83d\ude02 \r\n\r\nespecially if we use the PR titles for the changelog, squashing down to those sounds fantastic",
        "pr_file_module": null
      },
      {
        "comment_id": "1092597937",
        "repo_full_name": "logseq/logseq",
        "pr_number": 8222,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "1088332709",
        "commented_code": "@@ -0,0 +1,402 @@\n+# Contributing to Logseq\n+\n+We would love for you to contribute to Logseq and help make it even better than it is today!\n+As a contributor, here are the guidelines we would like you to follow:\n+\n+ - [Code of Conduct](#coc)\n+ - [Question or Problem?](#question)\n+ - [Issues and Bugs](#issue)\n+ - [Feature Requests](#feature)\n+ - [Submission Guidelines](#submit)\n+ - [Coding Rules](#rules)\n+ - [Commit Message Guidelines](#commit)\n+ - [Signing the CLA](#cla)\n+\n+\n+## <a name=\"coc\"></a> Code of Conduct\n+\n+Help us keep Logseq open and inclusive.\n+Please read and follow our [Code of Conduct][coc].\n+\n+\n+## <a name=\"question\"></a> Got a Question or a Problem?\n+\n+Do not open issues for general support questions or feature requests as we want to keep GitHub issues for bug reports.\n+Instead, we recommend using [Logseq forum][forum] to ask support-related questions. \n+\n+The Logseq forum is a much better place to ask questions since:\n+\n+- there are more people willing to help on the forum\n+- questions and answers stay available for public viewing so your question/answer might help someone else\n+- The forum's voting system assures that the best answers are prominently visible.\n+\n+To save your and our time, we will systematically close all issues that are requests for general support and redirect people to the forum.\n+\n+If you would like to chat about the question in real-time, you can reach out via [our Discord server][discord].\n+\n+\n+## <a name=\"issue\"></a> Found a Bug?\n+\n+If you find a bug in the source code, you can help us by [submitting an issue](#submit-issue) to our [GitHub Repository][github].\n+Even better, you can [submit a Pull Request](#submit-pr) with a fix.\n+\n+\n+## <a name=\"feature\"></a> Missing a Feature?\n+You can *request* a new feature by [Creating a thread][feature-request] in our forum.\n+If you would like to *implement* a new feature, please consider the size of the change in order to determine the right steps to proceed:\n+\n+* For a **Major Feature**, first open an issue and outline your proposal so that it can be discussed.\n+  This process allows us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.\n+\n+  **Note**: Adding a new topic to the documentation, or significantly re-writing a topic, counts as a major feature.\n+\n+* **Small Features** can be crafted and directly [submitted as a Pull Request](#submit-pr).\n+\n+\n+## <a name=\"submit\"></a> Submission Guidelines\n+\n+\n+### <a name=\"submit-issue\"></a> Submitting an Issue\n+\n+Before you submit an issue, please search the [issue tracker][issue-tracker]. An issue for your problem might already exist and the discussion might inform you of workarounds readily available.\n+\n+Please include the following with each issue:\n+\n+- Version of Logseq\n+- Your operating system\n+- List of extensions that you have installed. Attempt to recreate the issue after disabling all extensions.\n+- Reproducible steps (1... 2... 3...) that cause the issue\n+- What you expected to see, versus what you actually saw\n+- Images, animations, or a link to a video showing the issue occurring\n+- A code snippet that demonstrates the issue or a link to a  code repository the developers can easily pull down to recreate the  issue locally\n+  - **Note:** Because the developers need to copy and paste the code snippet, including a code snippet as a media file (i.e. .gif)  is not sufficient.\n+- Errors from the Dev Tools Console (open from the menu: View > Toggle Developer Tools or press CTRL + Shift + i)\n+\n+You can file new issues by selecting from our [new issue templates][new-issue] and filling out the issue template.\n+\n+\n+### <a name=\"submit-pr\"></a> Submitting a Pull Request (PR)\n+\n+Before you submit your Pull Request (PR) consider the following guidelines:\n+\n+1. Search [GitHub][search-pr] for an open or closed PR that relates to your submission.\n+   You don't want to duplicate existing efforts.\n+\n+2. Be sure that an issue describes the problem you're fixing, or documents the design for the feature you'd like to add.\n+   Discussing the design upfront helps to ensure that we're ready to accept your work.\n+\n+3. Please sign our [Contributor License Agreement (CLA)](#cla) before sending PRs.\n+   We cannot accept code without a signed CLA.\n+   Make sure you author all contributed Git commits with email address associated with your CLA signature.\n+\n+4. [Fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) the logseq/logseq repo.\n+\n+5. In your forked repository, make your changes in a new git branch:\n+\n+     ```shell\n+     git checkout -b my-fix-branch master\n+     ```\n+\n+6. Create your patch, **including appropriate test cases**.\n+\n+7. Follow our [Coding Rules](#rules).\n+\n+8. Run the full Logseq test suite, as described in the [developer documentation][dev-doc], and ensure that all tests pass.\n+\n+9. Commit your changes using a descriptive commit message that follows our [commit message conventions](#commit).\n+   Adherence to these conventions is necessary because release notes are automatically generated from these messages.\n+\n+     ```shell\n+     git commit --all\n+     ```\n+    Note: the optional commit `-a` command line option will automatically \"add\" and \"rm\" edited files.\n+\n+10. Push your branch to GitHub:\n+\n+    ```shell\n+    git push origin my-fix-branch\n+    ```\n+\n+11. In GitHub, send a pull request to `logseq:master`.\n+\n+### Reviewing a Pull Request\n+\n+The Logseq team reserves the right not to accept pull requests from community members who haven't been good citizens of the community. Such behavior includes not following the [Logseq code of conduct][coc] and applies within or outside of Logseq managed channels.\n+\n+#### Addressing review feedback\n+\n+If we ask for changes via code reviews then:\n+\n+1. Make the required updates to the code.\n+\n+2. Re-run the Logseq test suites to ensure tests are still passing.\n+\n+3. Create a fixup commit and push to your GitHub repository (this will update your Pull Request):\n+\n+    ```shell\n+    git commit --all --fixup HEAD\n+    git push\n+    ```\n+\n+    For more info on working with fixup commits see [here][fixup-commits].\n+\n+That's it! Thank you for your contribution!\n+\n+\n+##### Updating the commit message\n+\n+A reviewer might often suggest changes to a commit message (for example, to add more context for a change or adhere to our [commit message guidelines](#commit)).\n+In order to update the commit message of the last commit on your branch:\n+\n+1. Check out your branch:\n+\n+    ```shell\n+    git checkout my-fix-branch\n+    ```\n+\n+2. Amend the last commit and modify the commit message:\n+\n+    ```shell\n+    git commit --amend\n+    ```\n+\n+3. Push to your GitHub repository:\n+\n+    ```shell\n+    git push --force-with-lease\n+    ```\n+\n+> NOTE:<br />\n+> If you need to update the commit message of an earlier commit, you can use `git rebase` in interactive mode.\n+> See the [git docs](https://git-scm.com/docs/git-rebase#_interactive_mode) for more details.\n+\n+\n+#### After your pull request is merged\n+\n+After your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository:\n+\n+* Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\n+\n+    ```shell\n+    git push origin --delete my-fix-branch\n+    ```\n+\n+* Check out the master branch:\n+\n+    ```shell\n+    git checkout master -f\n+    ```\n+\n+* Delete the local branch:\n+\n+    ```shell\n+    git branch -D my-fix-branch\n+    ```\n+\n+* Update your local `master` with the latest upstream version:\n+\n+    ```shell\n+    git pull --ff upstream master\n+    ```\n+\n+\n+## <a name=\"rules\"></a> Coding Rules\n+To ensure consistency throughout the source code, keep these rules in mind as you are working:\n+\n+* All features or bug fixes **must be tested** by one or more specs (unit-tests).\n+* All public API methods **must be documented**.\n+* We follow [The Clojure Style Guide][clojure-style-guide]\n+   * For more information on formatting see [developer documentation][dev-doc]\n+\n+\n+\n+## <a name=\"commit\"></a> Commit Message Format",
        "comment_created_at": "2023-01-31T23:39:14+00:00",
        "comment_author": "Bad3r",
        "comment_body": "sounds good. I'll add instructions for PR titles instead",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1091071913",
    "pr_number": 8222,
    "pr_file": "CONTRIBUTING.md",
    "created_at": "2023-01-30T19:47:32+00:00",
    "commented_code": "+# Contributing to Logseq\n+\n+We would love for you to contribute to Logseq and help make it even better than it is today!\n+As a contributor, here are the guidelines we would like you to follow:\n+\n+ - [Code of Conduct](#coc)\n+ - [Question or Problem?](#question)\n+ - [Issues and Bugs](#issue)\n+ - [Feature Requests](#feature)\n+ - [Submission Guidelines](#submit)\n+ - [Coding Rules](#rules)\n+ - [Commit Message Guidelines](#commit)\n+ - [Signing the CLA](#cla)\n+\n+\n+## <a name=\"coc\"></a> Code of Conduct\n+\n+Help us keep Logseq open and inclusive.\n+Please read and follow our [Code of Conduct][coc].\n+\n+\n+## <a name=\"question\"></a> Got a Question or a Problem?\n+\n+Do not open issues for general support questions or feature requests as we want to keep GitHub issues for bug reports.\n+Instead, we recommend using [Logseq forum][forum] to ask support-related questions. \n+\n+The Logseq forum is a much better place to ask questions since:\n+\n+- there are more people willing to help on the forum\n+- questions and answers stay available for public viewing so your question/answer might help someone else\n+- The forum's voting system assures that the best answers are prominently visible.\n+\n+To save your and our time, we will systematically close all issues that are requests for general support and redirect people to the forum.\n+\n+If you would like to chat about the question in real-time, you can reach out via [our Discord server][discord].\n+\n+\n+## <a name=\"issue\"></a> Found a Bug?\n+\n+If you find a bug in the source code, you can help us by [submitting an issue](#submit-issue) to our [GitHub Repository][github].\n+Even better, you can [submit a Pull Request](#submit-pr) with a fix.\n+\n+\n+## <a name=\"feature\"></a> Missing a Feature?\n+You can *request* a new feature by [Creating a thread][feature-request] in our forum.\n+If you would like to *implement* a new feature, please consider the size of the change in order to determine the right steps to proceed:\n+\n+* For a **Major Feature**, first open an issue and outline your proposal so that it can be discussed.\n+  This process allows us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.\n+\n+  **Note**: Adding a new topic to the documentation, or significantly re-writing a topic, counts as a major feature.\n+\n+* **Small Features** can be crafted and directly [submitted as a Pull Request](#submit-pr).\n+\n+\n+## <a name=\"submit\"></a> Submission Guidelines\n+\n+\n+### <a name=\"submit-issue\"></a> Submitting an Issue\n+\n+Before you submit an issue, please search the [issue tracker][issue-tracker]. An issue for your problem might already exist and the discussion might inform you of workarounds readily available.\n+\n+Please include the following with each issue:\n+\n+- Version of Logseq\n+- Your operating system\n+- List of extensions that you have installed. Attempt to recreate the issue after disabling all extensions.\n+- Reproducible steps (1... 2... 3...) that cause the issue\n+- What you expected to see, versus what you actually saw\n+- Images, animations, or a link to a video showing the issue occurring\n+- A code snippet that demonstrates the issue or a link to a  code repository the developers can easily pull down to recreate the  issue locally\n+  - **Note:** Because the developers need to copy and paste the code snippet, including a code snippet as a media file (i.e. .gif)  is not sufficient.\n+- Errors from the Dev Tools Console (open from the menu: View > Toggle Developer Tools or press CTRL + Shift + i)\n+\n+You can file new issues by selecting from our [new issue templates][new-issue] and filling out the issue template.\n+\n+\n+### <a name=\"submit-pr\"></a> Submitting a Pull Request (PR)\n+\n+Before you submit your Pull Request (PR) consider the following guidelines:\n+\n+1. Search [GitHub][search-pr] for an open or closed PR that relates to your submission.\n+   You don't want to duplicate existing efforts.\n+\n+2. Be sure that an issue describes the problem you're fixing, or documents the design for the feature you'd like to add.\n+   Discussing the design upfront helps to ensure that we're ready to accept your work.\n+\n+3. Please sign our [Contributor License Agreement (CLA)](#cla) before sending PRs.\n+   We cannot accept code without a signed CLA.\n+   Make sure you author all contributed Git commits with email address associated with your CLA signature.\n+\n+4. [Fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) the logseq/logseq repo.\n+\n+5. In your forked repository, make your changes in a new git branch:\n+\n+     ```shell\n+     git checkout -b my-fix-branch master\n+     ```\n+\n+6. Create your patch, **including appropriate test cases**.\n+\n+7. Follow our [Coding Rules](#rules).\n+\n+8. Run the full Logseq test suite, as described in the [developer documentation][dev-doc], and ensure that all tests pass.\n+\n+9. Commit your changes using a descriptive commit message that follows our [commit message conventions](#commit).\n+   Adherence to these conventions is necessary because release notes are automatically generated from these messages.\n+\n+     ```shell\n+     git commit --all\n+     ```\n+    Note: the optional commit `-a` command line option will automatically \"add\" and \"rm\" edited files.\n+\n+10. Push your branch to GitHub:\n+\n+    ```shell\n+    git push origin my-fix-branch\n+    ```\n+\n+11. In GitHub, send a pull request to `logseq:master`.",
    "repo_full_name": "logseq/logseq",
    "discussion_comments": [
      {
        "comment_id": "1091071913",
        "repo_full_name": "logseq/logseq",
        "pr_number": 8222,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "1091071913",
        "commented_code": "@@ -0,0 +1,402 @@\n+# Contributing to Logseq\n+\n+We would love for you to contribute to Logseq and help make it even better than it is today!\n+As a contributor, here are the guidelines we would like you to follow:\n+\n+ - [Code of Conduct](#coc)\n+ - [Question or Problem?](#question)\n+ - [Issues and Bugs](#issue)\n+ - [Feature Requests](#feature)\n+ - [Submission Guidelines](#submit)\n+ - [Coding Rules](#rules)\n+ - [Commit Message Guidelines](#commit)\n+ - [Signing the CLA](#cla)\n+\n+\n+## <a name=\"coc\"></a> Code of Conduct\n+\n+Help us keep Logseq open and inclusive.\n+Please read and follow our [Code of Conduct][coc].\n+\n+\n+## <a name=\"question\"></a> Got a Question or a Problem?\n+\n+Do not open issues for general support questions or feature requests as we want to keep GitHub issues for bug reports.\n+Instead, we recommend using [Logseq forum][forum] to ask support-related questions. \n+\n+The Logseq forum is a much better place to ask questions since:\n+\n+- there are more people willing to help on the forum\n+- questions and answers stay available for public viewing so your question/answer might help someone else\n+- The forum's voting system assures that the best answers are prominently visible.\n+\n+To save your and our time, we will systematically close all issues that are requests for general support and redirect people to the forum.\n+\n+If you would like to chat about the question in real-time, you can reach out via [our Discord server][discord].\n+\n+\n+## <a name=\"issue\"></a> Found a Bug?\n+\n+If you find a bug in the source code, you can help us by [submitting an issue](#submit-issue) to our [GitHub Repository][github].\n+Even better, you can [submit a Pull Request](#submit-pr) with a fix.\n+\n+\n+## <a name=\"feature\"></a> Missing a Feature?\n+You can *request* a new feature by [Creating a thread][feature-request] in our forum.\n+If you would like to *implement* a new feature, please consider the size of the change in order to determine the right steps to proceed:\n+\n+* For a **Major Feature**, first open an issue and outline your proposal so that it can be discussed.\n+  This process allows us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.\n+\n+  **Note**: Adding a new topic to the documentation, or significantly re-writing a topic, counts as a major feature.\n+\n+* **Small Features** can be crafted and directly [submitted as a Pull Request](#submit-pr).\n+\n+\n+## <a name=\"submit\"></a> Submission Guidelines\n+\n+\n+### <a name=\"submit-issue\"></a> Submitting an Issue\n+\n+Before you submit an issue, please search the [issue tracker][issue-tracker]. An issue for your problem might already exist and the discussion might inform you of workarounds readily available.\n+\n+Please include the following with each issue:\n+\n+- Version of Logseq\n+- Your operating system\n+- List of extensions that you have installed. Attempt to recreate the issue after disabling all extensions.\n+- Reproducible steps (1... 2... 3...) that cause the issue\n+- What you expected to see, versus what you actually saw\n+- Images, animations, or a link to a video showing the issue occurring\n+- A code snippet that demonstrates the issue or a link to a  code repository the developers can easily pull down to recreate the  issue locally\n+  - **Note:** Because the developers need to copy and paste the code snippet, including a code snippet as a media file (i.e. .gif)  is not sufficient.\n+- Errors from the Dev Tools Console (open from the menu: View > Toggle Developer Tools or press CTRL + Shift + i)\n+\n+You can file new issues by selecting from our [new issue templates][new-issue] and filling out the issue template.\n+\n+\n+### <a name=\"submit-pr\"></a> Submitting a Pull Request (PR)\n+\n+Before you submit your Pull Request (PR) consider the following guidelines:\n+\n+1. Search [GitHub][search-pr] for an open or closed PR that relates to your submission.\n+   You don't want to duplicate existing efforts.\n+\n+2. Be sure that an issue describes the problem you're fixing, or documents the design for the feature you'd like to add.\n+   Discussing the design upfront helps to ensure that we're ready to accept your work.\n+\n+3. Please sign our [Contributor License Agreement (CLA)](#cla) before sending PRs.\n+   We cannot accept code without a signed CLA.\n+   Make sure you author all contributed Git commits with email address associated with your CLA signature.\n+\n+4. [Fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) the logseq/logseq repo.\n+\n+5. In your forked repository, make your changes in a new git branch:\n+\n+     ```shell\n+     git checkout -b my-fix-branch master\n+     ```\n+\n+6. Create your patch, **including appropriate test cases**.\n+\n+7. Follow our [Coding Rules](#rules).\n+\n+8. Run the full Logseq test suite, as described in the [developer documentation][dev-doc], and ensure that all tests pass.\n+\n+9. Commit your changes using a descriptive commit message that follows our [commit message conventions](#commit).\n+   Adherence to these conventions is necessary because release notes are automatically generated from these messages.\n+\n+     ```shell\n+     git commit --all\n+     ```\n+    Note: the optional commit `-a` command line option will automatically \"add\" and \"rm\" edited files.\n+\n+10. Push your branch to GitHub:\n+\n+    ```shell\n+    git push origin my-fix-branch\n+    ```\n+\n+11. In GitHub, send a pull request to `logseq:master`.",
        "comment_created_at": "2023-01-30T19:47:32+00:00",
        "comment_author": "bendyorke",
        "comment_body": "It should be mentioned here that Pull Request titles will be used in the changelog, so try to be as descriptive as possible, and that a moderator may edit the title of your pull request.",
        "pr_file_module": null
      },
      {
        "comment_id": "1092592347",
        "repo_full_name": "logseq/logseq",
        "pr_number": 8222,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "1091071913",
        "commented_code": "@@ -0,0 +1,402 @@\n+# Contributing to Logseq\n+\n+We would love for you to contribute to Logseq and help make it even better than it is today!\n+As a contributor, here are the guidelines we would like you to follow:\n+\n+ - [Code of Conduct](#coc)\n+ - [Question or Problem?](#question)\n+ - [Issues and Bugs](#issue)\n+ - [Feature Requests](#feature)\n+ - [Submission Guidelines](#submit)\n+ - [Coding Rules](#rules)\n+ - [Commit Message Guidelines](#commit)\n+ - [Signing the CLA](#cla)\n+\n+\n+## <a name=\"coc\"></a> Code of Conduct\n+\n+Help us keep Logseq open and inclusive.\n+Please read and follow our [Code of Conduct][coc].\n+\n+\n+## <a name=\"question\"></a> Got a Question or a Problem?\n+\n+Do not open issues for general support questions or feature requests as we want to keep GitHub issues for bug reports.\n+Instead, we recommend using [Logseq forum][forum] to ask support-related questions. \n+\n+The Logseq forum is a much better place to ask questions since:\n+\n+- there are more people willing to help on the forum\n+- questions and answers stay available for public viewing so your question/answer might help someone else\n+- The forum's voting system assures that the best answers are prominently visible.\n+\n+To save your and our time, we will systematically close all issues that are requests for general support and redirect people to the forum.\n+\n+If you would like to chat about the question in real-time, you can reach out via [our Discord server][discord].\n+\n+\n+## <a name=\"issue\"></a> Found a Bug?\n+\n+If you find a bug in the source code, you can help us by [submitting an issue](#submit-issue) to our [GitHub Repository][github].\n+Even better, you can [submit a Pull Request](#submit-pr) with a fix.\n+\n+\n+## <a name=\"feature\"></a> Missing a Feature?\n+You can *request* a new feature by [Creating a thread][feature-request] in our forum.\n+If you would like to *implement* a new feature, please consider the size of the change in order to determine the right steps to proceed:\n+\n+* For a **Major Feature**, first open an issue and outline your proposal so that it can be discussed.\n+  This process allows us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.\n+\n+  **Note**: Adding a new topic to the documentation, or significantly re-writing a topic, counts as a major feature.\n+\n+* **Small Features** can be crafted and directly [submitted as a Pull Request](#submit-pr).\n+\n+\n+## <a name=\"submit\"></a> Submission Guidelines\n+\n+\n+### <a name=\"submit-issue\"></a> Submitting an Issue\n+\n+Before you submit an issue, please search the [issue tracker][issue-tracker]. An issue for your problem might already exist and the discussion might inform you of workarounds readily available.\n+\n+Please include the following with each issue:\n+\n+- Version of Logseq\n+- Your operating system\n+- List of extensions that you have installed. Attempt to recreate the issue after disabling all extensions.\n+- Reproducible steps (1... 2... 3...) that cause the issue\n+- What you expected to see, versus what you actually saw\n+- Images, animations, or a link to a video showing the issue occurring\n+- A code snippet that demonstrates the issue or a link to a  code repository the developers can easily pull down to recreate the  issue locally\n+  - **Note:** Because the developers need to copy and paste the code snippet, including a code snippet as a media file (i.e. .gif)  is not sufficient.\n+- Errors from the Dev Tools Console (open from the menu: View > Toggle Developer Tools or press CTRL + Shift + i)\n+\n+You can file new issues by selecting from our [new issue templates][new-issue] and filling out the issue template.\n+\n+\n+### <a name=\"submit-pr\"></a> Submitting a Pull Request (PR)\n+\n+Before you submit your Pull Request (PR) consider the following guidelines:\n+\n+1. Search [GitHub][search-pr] for an open or closed PR that relates to your submission.\n+   You don't want to duplicate existing efforts.\n+\n+2. Be sure that an issue describes the problem you're fixing, or documents the design for the feature you'd like to add.\n+   Discussing the design upfront helps to ensure that we're ready to accept your work.\n+\n+3. Please sign our [Contributor License Agreement (CLA)](#cla) before sending PRs.\n+   We cannot accept code without a signed CLA.\n+   Make sure you author all contributed Git commits with email address associated with your CLA signature.\n+\n+4. [Fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) the logseq/logseq repo.\n+\n+5. In your forked repository, make your changes in a new git branch:\n+\n+     ```shell\n+     git checkout -b my-fix-branch master\n+     ```\n+\n+6. Create your patch, **including appropriate test cases**.\n+\n+7. Follow our [Coding Rules](#rules).\n+\n+8. Run the full Logseq test suite, as described in the [developer documentation][dev-doc], and ensure that all tests pass.\n+\n+9. Commit your changes using a descriptive commit message that follows our [commit message conventions](#commit).\n+   Adherence to these conventions is necessary because release notes are automatically generated from these messages.\n+\n+     ```shell\n+     git commit --all\n+     ```\n+    Note: the optional commit `-a` command line option will automatically \"add\" and \"rm\" edited files.\n+\n+10. Push your branch to GitHub:\n+\n+    ```shell\n+    git push origin my-fix-branch\n+    ```\n+\n+11. In GitHub, send a pull request to `logseq:master`.",
        "comment_created_at": "2023-01-31T23:28:48+00:00",
        "comment_author": "Bad3r",
        "comment_body": "@bendyorke good point. Hopefully with this document, we can make the naming and taging process clear. \r\n\r\nI have been editing the PR titles based on tribal knowledge (tacit knowledge). Having it written down will make it easier for everyone. \r\n",
        "pr_file_module": null
      }
    ]
  }
]