[
  {
    "discussion_id": "1793617820",
    "pr_number": 2902,
    "pr_file": "platform/android/buildSrc/src/main/kotlin/maplibre.download-vulkan-validation.gradle.kts",
    "created_at": "2024-10-09T14:18:34+00:00",
    "commented_code": "+import java.net.URL\n+",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1793617820",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2902,
        "pr_file": "platform/android/buildSrc/src/main/kotlin/maplibre.download-vulkan-validation.gradle.kts",
        "discussion_id": "1793617820",
        "commented_code": "@@ -0,0 +1,50 @@\n+import java.net.URL\n+",
        "comment_created_at": "2024-10-09T14:18:34+00:00",
        "comment_author": "westnordost",
        "comment_body": "The groovy version included a long documentation comment with a link to some Github Repo of the KhronosGroup. Doesn't it make sense to include that comment?",
        "pr_file_module": null
      },
      {
        "comment_id": "1793685764",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2902,
        "pr_file": "platform/android/buildSrc/src/main/kotlin/maplibre.download-vulkan-validation.gradle.kts",
        "discussion_id": "1793617820",
        "commented_code": "@@ -0,0 +1,50 @@\n+import java.net.URL\n+",
        "comment_created_at": "2024-10-09T14:58:08+00:00",
        "comment_author": "kaushalbx",
        "comment_body": "@westnordost ya, it will be better to add.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1304391612",
    "pr_number": 1552,
    "pr_file": "platform/android/MapboxGLAndroidSDK/src/main/java/org/maplibre/android/annotations/CircleManager.kt",
    "created_at": "2023-08-24T14:05:45+00:00",
    "commented_code": "+package org.maplibre.android.annotations\n+\n+import androidx.annotation.UiThread\n+import com.mapbox.geojson.FeatureCollection\n+import org.maplibre.android.maps.MapLibreMap\n+import org.maplibre.android.maps.MapView\n+import org.maplibre.android.maps.Style\n+import org.maplibre.android.style.expressions.Expression\n+import org.maplibre.android.style.layers.CircleLayer\n+import org.maplibre.android.style.layers.PropertyFactory\n+import org.maplibre.android.style.layers.PropertyValue\n+import org.maplibre.android.style.sources.GeoJsonOptions\n+\n+/**\n+ * The circle manager allows to add circles to a map.\n+ *\n+ * @param maplibreMap    the map object to add circles to\n+ * @param style          a valid a fully loaded style object\n+ * @param belowLayerId   the id of the layer above the circle layer\n+ * @param aboveLayerId   the id of the layer below the circle layer\n+ * @param geoJsonOptions options for the internal source\n+ */\n+class CircleManager @UiThread internal constructor(\n+    mapView: MapView,\n+    maplibreMap: MapLibreMap,\n+    style: Style,\n+    coreElementProvider: CoreElementProvider<CircleLayer> = CircleElementProvider(),\n+    belowLayerId: String? = null,\n+    aboveLayerId: String? = null,\n+    geoJsonOptions: GeoJsonOptions? = null,\n+    draggableAnnotationController: DraggableAnnotationController = DraggableAnnotationController.getInstance(\n+        mapView,\n+        maplibreMap\n+    )\n+) : AnnotationManager<CircleLayer, Circle, CircleOptions, OnCircleDragListener, OnCircleClickListener, OnCircleLongClickListener>(\n+    mapView,\n+    maplibreMap,\n+    style,\n+    coreElementProvider,\n+    draggableAnnotationController,\n+    belowLayerId,\n+    aboveLayerId,\n+    geoJsonOptions\n+) {\n+    @JvmOverloads\n+    @UiThread\n+    constructor(\n+        mapView: MapView,\n+        maplibreMap: MapLibreMap,\n+        style: Style,\n+        belowLayerId: String? = null,\n+        aboveLayerId: String? = null,\n+        geoJsonOptions: GeoJsonOptions? = null\n+    ) : this(\n+        mapView = mapView,\n+        maplibreMap = maplibreMap,\n+        style = style,\n+        coreElementProvider = CircleElementProvider(),\n+        belowLayerId = belowLayerId,\n+        aboveLayerId = aboveLayerId,\n+        geoJsonOptions = geoJsonOptions\n+    )\n+\n+    override fun initializeDataDrivenPropertyMap() = listOf(\n+        CircleOptions.PROPERTY_CIRCLE_RADIUS,\n+        CircleOptions.PROPERTY_CIRCLE_COLOR,\n+        CircleOptions.PROPERTY_CIRCLE_BLUR,\n+        CircleOptions.PROPERTY_CIRCLE_OPACITY,\n+        CircleOptions.PROPERTY_CIRCLE_STROKE_WIDTH,\n+        CircleOptions.PROPERTY_CIRCLE_STROKE_COLOR,\n+        CircleOptions.PROPERTY_CIRCLE_STROKE_OPACITY\n+    ).associateWith { false }.let { dataDrivenPropertyUsageMap.putAll(it) }\n+\n+    override fun setDataDrivenPropertyIsUsed(property: String) {\n+        when (property) {\n+            CircleOptions.PROPERTY_CIRCLE_RADIUS -> layer.setProperties(\n+                PropertyFactory.circleRadius(\n+                    Expression.get(CircleOptions.PROPERTY_CIRCLE_RADIUS)\n+                )\n+            )\n+\n+            CircleOptions.PROPERTY_CIRCLE_COLOR -> layer.setProperties(\n+                PropertyFactory.circleColor(\n+                    Expression.get(CircleOptions.PROPERTY_CIRCLE_COLOR)\n+                )\n+            )\n+\n+            CircleOptions.PROPERTY_CIRCLE_BLUR -> layer.setProperties(\n+                PropertyFactory.circleBlur(\n+                    Expression.get(CircleOptions.PROPERTY_CIRCLE_BLUR)\n+                )\n+            )\n+\n+            CircleOptions.PROPERTY_CIRCLE_OPACITY -> layer.setProperties(\n+                PropertyFactory.circleOpacity(\n+                    Expression.get(CircleOptions.PROPERTY_CIRCLE_OPACITY)\n+                )\n+            )\n+\n+            CircleOptions.PROPERTY_CIRCLE_STROKE_WIDTH -> layer.setProperties(\n+                PropertyFactory.circleStrokeWidth(\n+                    Expression.get(CircleOptions.PROPERTY_CIRCLE_STROKE_WIDTH)\n+                )\n+            )\n+\n+            CircleOptions.PROPERTY_CIRCLE_STROKE_COLOR -> layer.setProperties(\n+                PropertyFactory.circleStrokeColor(\n+                    Expression.get(CircleOptions.PROPERTY_CIRCLE_STROKE_COLOR)\n+                )\n+            )\n+\n+            CircleOptions.PROPERTY_CIRCLE_STROKE_OPACITY -> layer.setProperties(\n+                PropertyFactory.circleStrokeOpacity(\n+                    Expression.get(CircleOptions.PROPERTY_CIRCLE_STROKE_OPACITY)\n+                )\n+            )\n+        }\n+    }\n+\n+    /**\n+     * Create a list of circles on the map.\n+     *\n+     *\n+     * Circles are going to be created only for features with a matching geometry.\n+     *\n+     *\n+     * All supported properties are:<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_RADIUS - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_COLOR - String<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_BLUR - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_OPACITY - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_STROKE_WIDTH - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_STROKE_COLOR - String<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_STROKE_OPACITY - Float<br></br>\n+     * Learn more about above properties in the [Style specification](https://www.mapbox.com/mapbox-gl-js/style-spec/).\n+     *\n+     *\n+     * Out of spec properties:<br></br>\n+     * \"is-draggable\" - Boolean, true if the circle should be draggable, false otherwise\n+     *\n+     * @param json the GeoJSON defining the list of circles to build\n+     * @return the list of built circles\n+     */\n+    @UiThread\n+    fun create(json: String): List<Circle> = create(FeatureCollection.fromJson(json))\n+\n+    /**\n+     * Create a list of circles on the map.\n+     *\n+     *\n+     * Circles are going to be created only for features with a matching geometry.\n+     *\n+     *\n+     * All supported properties are:<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_RADIUS - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_COLOR - String<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_BLUR - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_OPACITY - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_STROKE_WIDTH - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_STROKE_COLOR - String<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_STROKE_OPACITY - Float<br></br>\n+     * Learn more about above properties in the [Style specification](https://www.mapbox.com/mapbox-gl-js/style-spec/).",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1304391612",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1552,
        "pr_file": "platform/android/MapboxGLAndroidSDK/src/main/java/org/maplibre/android/annotations/CircleManager.kt",
        "discussion_id": "1304391612",
        "commented_code": "@@ -0,0 +1,250 @@\n+package org.maplibre.android.annotations\n+\n+import androidx.annotation.UiThread\n+import com.mapbox.geojson.FeatureCollection\n+import org.maplibre.android.maps.MapLibreMap\n+import org.maplibre.android.maps.MapView\n+import org.maplibre.android.maps.Style\n+import org.maplibre.android.style.expressions.Expression\n+import org.maplibre.android.style.layers.CircleLayer\n+import org.maplibre.android.style.layers.PropertyFactory\n+import org.maplibre.android.style.layers.PropertyValue\n+import org.maplibre.android.style.sources.GeoJsonOptions\n+\n+/**\n+ * The circle manager allows to add circles to a map.\n+ *\n+ * @param maplibreMap    the map object to add circles to\n+ * @param style          a valid a fully loaded style object\n+ * @param belowLayerId   the id of the layer above the circle layer\n+ * @param aboveLayerId   the id of the layer below the circle layer\n+ * @param geoJsonOptions options for the internal source\n+ */\n+class CircleManager @UiThread internal constructor(\n+    mapView: MapView,\n+    maplibreMap: MapLibreMap,\n+    style: Style,\n+    coreElementProvider: CoreElementProvider<CircleLayer> = CircleElementProvider(),\n+    belowLayerId: String? = null,\n+    aboveLayerId: String? = null,\n+    geoJsonOptions: GeoJsonOptions? = null,\n+    draggableAnnotationController: DraggableAnnotationController = DraggableAnnotationController.getInstance(\n+        mapView,\n+        maplibreMap\n+    )\n+) : AnnotationManager<CircleLayer, Circle, CircleOptions, OnCircleDragListener, OnCircleClickListener, OnCircleLongClickListener>(\n+    mapView,\n+    maplibreMap,\n+    style,\n+    coreElementProvider,\n+    draggableAnnotationController,\n+    belowLayerId,\n+    aboveLayerId,\n+    geoJsonOptions\n+) {\n+    @JvmOverloads\n+    @UiThread\n+    constructor(\n+        mapView: MapView,\n+        maplibreMap: MapLibreMap,\n+        style: Style,\n+        belowLayerId: String? = null,\n+        aboveLayerId: String? = null,\n+        geoJsonOptions: GeoJsonOptions? = null\n+    ) : this(\n+        mapView = mapView,\n+        maplibreMap = maplibreMap,\n+        style = style,\n+        coreElementProvider = CircleElementProvider(),\n+        belowLayerId = belowLayerId,\n+        aboveLayerId = aboveLayerId,\n+        geoJsonOptions = geoJsonOptions\n+    )\n+\n+    override fun initializeDataDrivenPropertyMap() = listOf(\n+        CircleOptions.PROPERTY_CIRCLE_RADIUS,\n+        CircleOptions.PROPERTY_CIRCLE_COLOR,\n+        CircleOptions.PROPERTY_CIRCLE_BLUR,\n+        CircleOptions.PROPERTY_CIRCLE_OPACITY,\n+        CircleOptions.PROPERTY_CIRCLE_STROKE_WIDTH,\n+        CircleOptions.PROPERTY_CIRCLE_STROKE_COLOR,\n+        CircleOptions.PROPERTY_CIRCLE_STROKE_OPACITY\n+    ).associateWith { false }.let { dataDrivenPropertyUsageMap.putAll(it) }\n+\n+    override fun setDataDrivenPropertyIsUsed(property: String) {\n+        when (property) {\n+            CircleOptions.PROPERTY_CIRCLE_RADIUS -> layer.setProperties(\n+                PropertyFactory.circleRadius(\n+                    Expression.get(CircleOptions.PROPERTY_CIRCLE_RADIUS)\n+                )\n+            )\n+\n+            CircleOptions.PROPERTY_CIRCLE_COLOR -> layer.setProperties(\n+                PropertyFactory.circleColor(\n+                    Expression.get(CircleOptions.PROPERTY_CIRCLE_COLOR)\n+                )\n+            )\n+\n+            CircleOptions.PROPERTY_CIRCLE_BLUR -> layer.setProperties(\n+                PropertyFactory.circleBlur(\n+                    Expression.get(CircleOptions.PROPERTY_CIRCLE_BLUR)\n+                )\n+            )\n+\n+            CircleOptions.PROPERTY_CIRCLE_OPACITY -> layer.setProperties(\n+                PropertyFactory.circleOpacity(\n+                    Expression.get(CircleOptions.PROPERTY_CIRCLE_OPACITY)\n+                )\n+            )\n+\n+            CircleOptions.PROPERTY_CIRCLE_STROKE_WIDTH -> layer.setProperties(\n+                PropertyFactory.circleStrokeWidth(\n+                    Expression.get(CircleOptions.PROPERTY_CIRCLE_STROKE_WIDTH)\n+                )\n+            )\n+\n+            CircleOptions.PROPERTY_CIRCLE_STROKE_COLOR -> layer.setProperties(\n+                PropertyFactory.circleStrokeColor(\n+                    Expression.get(CircleOptions.PROPERTY_CIRCLE_STROKE_COLOR)\n+                )\n+            )\n+\n+            CircleOptions.PROPERTY_CIRCLE_STROKE_OPACITY -> layer.setProperties(\n+                PropertyFactory.circleStrokeOpacity(\n+                    Expression.get(CircleOptions.PROPERTY_CIRCLE_STROKE_OPACITY)\n+                )\n+            )\n+        }\n+    }\n+\n+    /**\n+     * Create a list of circles on the map.\n+     *\n+     *\n+     * Circles are going to be created only for features with a matching geometry.\n+     *\n+     *\n+     * All supported properties are:<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_RADIUS - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_COLOR - String<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_BLUR - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_OPACITY - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_STROKE_WIDTH - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_STROKE_COLOR - String<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_STROKE_OPACITY - Float<br></br>\n+     * Learn more about above properties in the [Style specification](https://www.mapbox.com/mapbox-gl-js/style-spec/).\n+     *\n+     *\n+     * Out of spec properties:<br></br>\n+     * \"is-draggable\" - Boolean, true if the circle should be draggable, false otherwise\n+     *\n+     * @param json the GeoJSON defining the list of circles to build\n+     * @return the list of built circles\n+     */\n+    @UiThread\n+    fun create(json: String): List<Circle> = create(FeatureCollection.fromJson(json))\n+\n+    /**\n+     * Create a list of circles on the map.\n+     *\n+     *\n+     * Circles are going to be created only for features with a matching geometry.\n+     *\n+     *\n+     * All supported properties are:<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_RADIUS - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_COLOR - String<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_BLUR - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_OPACITY - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_STROKE_WIDTH - Float<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_STROKE_COLOR - String<br></br>\n+     * CircleOptions.PROPERTY_CIRCLE_STROKE_OPACITY - Float<br></br>\n+     * Learn more about above properties in the [Style specification](https://www.mapbox.com/mapbox-gl-js/style-spec/).",
        "comment_created_at": "2023-08-24T14:05:45+00:00",
        "comment_author": "louwers",
        "comment_body": "```suggestion\r\n     * Learn more about above properties in the [Style specification](https://maplibre.org/maplibre-style-spec/).\r\n```",
        "pr_file_module": null
      }
    ]
  }
]