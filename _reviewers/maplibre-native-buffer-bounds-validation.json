[
  {
    "discussion_id": "1323362759",
    "pr_number": 1616,
    "pr_file": "src/mbgl/mtl/buffer_resource.cpp",
    "created_at": "2023-09-12T17:35:39+00:00",
    "commented_code": "+#include <mbgl/mtl/buffer_resource.hpp>\n+\n+#include <Metal/MTLDevice.hpp>\n+\n+namespace mbgl {\n+namespace mtl {\n+\n+BufferResource::BufferResource(MTLDevicePtr device_, const void* data, std::size_t size, MTL::ResourceOptions usage_)\n+    : device(std::move(device_)),\n+      usage(usage_) {\n+    if (data && size) {\n+        buffer = NS::TransferPtr(device->newBuffer(data, static_cast<NS::UInteger>(size), usage));\n+    } else {\n+        buffer = NS::TransferPtr(device->newBuffer(static_cast<NS::UInteger>(size), usage));\n+    }\n+}\n+\n+BufferResource::BufferResource(const BufferResource& other)\n+    : device(other.device),\n+      usage(other.usage) {\n+    if (other.buffer) {\n+        buffer = NS::TransferPtr(device->newBuffer(other.buffer->contents(), other.buffer->length(), other.usage));\n+    }\n+}\n+\n+BufferResource::BufferResource(BufferResource&& other)\n+    : device(std::move(other.device)),\n+      buffer(std::move(other.buffer)),\n+      usage(other.usage) {}\n+\n+void BufferResource::update(const void* data, std::size_t size, std::size_t offset) {\n+    if (buffer && data) {\n+        if (void* content = buffer->contents()) {\n+            std::memcpy(static_cast<uint8_t*>(content) + offset, data, size);",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1323362759",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1616,
        "pr_file": "src/mbgl/mtl/buffer_resource.cpp",
        "discussion_id": "1323362759",
        "commented_code": "@@ -0,0 +1,40 @@\n+#include <mbgl/mtl/buffer_resource.hpp>\n+\n+#include <Metal/MTLDevice.hpp>\n+\n+namespace mbgl {\n+namespace mtl {\n+\n+BufferResource::BufferResource(MTLDevicePtr device_, const void* data, std::size_t size, MTL::ResourceOptions usage_)\n+    : device(std::move(device_)),\n+      usage(usage_) {\n+    if (data && size) {\n+        buffer = NS::TransferPtr(device->newBuffer(data, static_cast<NS::UInteger>(size), usage));\n+    } else {\n+        buffer = NS::TransferPtr(device->newBuffer(static_cast<NS::UInteger>(size), usage));\n+    }\n+}\n+\n+BufferResource::BufferResource(const BufferResource& other)\n+    : device(other.device),\n+      usage(other.usage) {\n+    if (other.buffer) {\n+        buffer = NS::TransferPtr(device->newBuffer(other.buffer->contents(), other.buffer->length(), other.usage));\n+    }\n+}\n+\n+BufferResource::BufferResource(BufferResource&& other)\n+    : device(std::move(other.device)),\n+      buffer(std::move(other.buffer)),\n+      usage(other.usage) {}\n+\n+void BufferResource::update(const void* data, std::size_t size, std::size_t offset) {\n+    if (buffer && data) {\n+        if (void* content = buffer->contents()) {\n+            std::memcpy(static_cast<uint8_t*>(content) + offset, data, size);",
        "comment_created_at": "2023-09-12T17:35:39+00:00",
        "comment_author": "mwilsnd",
        "comment_body": "Do we want to check that `size + offset` is within the buffer bounds here?",
        "pr_file_module": null
      }
    ]
  }
]