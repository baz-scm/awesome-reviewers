[
  {
    "discussion_id": "1233220424",
    "pr_number": 1254,
    "pr_file": "design-proposals/2023-06-17-ffi.md",
    "created_at": "2023-06-18T07:55:02+00:00",
    "commented_code": "+# Foreign Function Interface (FFI) Library\n+\n+## Motivation\n+\n+Enable FFI bindings (C API) with MapLibre API for Rust and Dart (Flutter) using a Foreign Function Interface (FFI) Library.\n+\n+## Proposed Change\n+\n+Add a C API to the MapLibre source tree in the form of a FFI library.  This library would be integrated into CMake as an optional target.  The external FFI API would be exposed using a C header file.  This header file would be consumed by Rust and Dart interface generation tools.\n+\n+A longer term strategy could be to expose extern C interfaces directly in the common source tree.  This would decrease the long term cost of ownership.\n+\n+The approach that evolved to this proposed solution involved decoupling GLFW from the GLFW app, then abstracting out platform and backend code.  This was initialy done targeting Flutter, after which the same API was used to create a Rust app that behaves similar to the GLFW application.\n+\n+### Common Interface\n+\n+* version - returns FFI interface version\n+* initialize - returns unique context pointer\n+* de_initialize - tears down map instance and frees context\n+* draw_frame - renders a single frame\n+* resize - resizes the map\n+* run_task - used for housekeeping tasks independent of render path\n+* load_gl_functions - function pointer callback for resolving GL functions\n+\n+### Map Instance Lifecycle\n+\n+It is expected to dynamically control the lifecycle of one or many map instances at runtime.\n+\n+### Multiple Maps\n+\n+* Multiple maps are run in the same process.  This enables sharing of a single ambient cache.\n+\n+* Some use cases require four simultaneous map instances\n+\n+Multiple map instances are enabled using a unique context pointer.  A unique context pointer is passed back for every initialize invocation. The context pointer is release on de_initialized or when the library reference is destroyed.",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1233220424",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1254,
        "pr_file": "design-proposals/2023-06-17-ffi.md",
        "discussion_id": "1233220424",
        "commented_code": "@@ -0,0 +1,69 @@\n+# Foreign Function Interface (FFI) Library\n+\n+## Motivation\n+\n+Enable FFI bindings (C API) with MapLibre API for Rust and Dart (Flutter) using a Foreign Function Interface (FFI) Library.\n+\n+## Proposed Change\n+\n+Add a C API to the MapLibre source tree in the form of a FFI library.  This library would be integrated into CMake as an optional target.  The external FFI API would be exposed using a C header file.  This header file would be consumed by Rust and Dart interface generation tools.\n+\n+A longer term strategy could be to expose extern C interfaces directly in the common source tree.  This would decrease the long term cost of ownership.\n+\n+The approach that evolved to this proposed solution involved decoupling GLFW from the GLFW app, then abstracting out platform and backend code.  This was initialy done targeting Flutter, after which the same API was used to create a Rust app that behaves similar to the GLFW application.\n+\n+### Common Interface\n+\n+* version - returns FFI interface version\n+* initialize - returns unique context pointer\n+* de_initialize - tears down map instance and frees context\n+* draw_frame - renders a single frame\n+* resize - resizes the map\n+* run_task - used for housekeeping tasks independent of render path\n+* load_gl_functions - function pointer callback for resolving GL functions\n+\n+### Map Instance Lifecycle\n+\n+It is expected to dynamically control the lifecycle of one or many map instances at runtime.\n+\n+### Multiple Maps\n+\n+* Multiple maps are run in the same process.  This enables sharing of a single ambient cache.\n+\n+* Some use cases require four simultaneous map instances\n+\n+Multiple map instances are enabled using a unique context pointer.  A unique context pointer is passed back for every initialize invocation. The context pointer is release on de_initialized or when the library reference is destroyed.",
        "comment_created_at": "2023-06-18T07:55:02+00:00",
        "comment_author": "louwers",
        "comment_body": "```suggestion\r\nMultiple map instances are enabled using a unique context pointer.  A unique context pointer is passed back for every `initialize` invocation. The context pointer is released on `de_initialized` or when the library reference is destroyed.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1233221056",
    "pr_number": 1254,
    "pr_file": "design-proposals/2023-06-17-ffi.md",
    "created_at": "2023-06-18T07:56:10+00:00",
    "commented_code": "+# Foreign Function Interface (FFI) Library\n+\n+## Motivation\n+\n+Enable FFI bindings (C API) with MapLibre API for Rust and Dart (Flutter) using a Foreign Function Interface (FFI) Library.\n+\n+## Proposed Change\n+\n+Add a C API to the MapLibre source tree in the form of a FFI library.  This library would be integrated into CMake as an optional target.  The external FFI API would be exposed using a C header file.  This header file would be consumed by Rust and Dart interface generation tools.\n+\n+A longer term strategy could be to expose extern C interfaces directly in the common source tree.  This would decrease the long term cost of ownership.\n+\n+The approach that evolved to this proposed solution involved decoupling GLFW from the GLFW app, then abstracting out platform and backend code.  This was initialy done targeting Flutter, after which the same API was used to create a Rust app that behaves similar to the GLFW application.\n+\n+### Common Interface\n+\n+* version - returns FFI interface version\n+* initialize - returns unique context pointer\n+* de_initialize - tears down map instance and frees context\n+* draw_frame - renders a single frame\n+* resize - resizes the map\n+* run_task - used for housekeeping tasks independent of render path\n+* load_gl_functions - function pointer callback for resolving GL functions\n+\n+### Map Instance Lifecycle\n+\n+It is expected to dynamically control the lifecycle of one or many map instances at runtime.\n+\n+### Multiple Maps\n+\n+* Multiple maps are run in the same process.  This enables sharing of a single ambient cache.\n+\n+* Some use cases require four simultaneous map instances\n+\n+Multiple map instances are enabled using a unique context pointer.  A unique context pointer is passed back for every initialize invocation. The context pointer is release on de_initialized or when the library reference is destroyed.\n+\n+Each instance requires a unique FBO, which is passed into draw_frame.\n+\n+The `draw_frame` call is optimally tied to the host compositor \"onFrame\" callback.\n+\n+A housekeeping thread in the primary app is used to call `run_task` for each map instance.  This prevents introducing variability to the render path.\n+\n+### Global Functions\n+\n+Functions that impact all map instances are implemented as static functions, and do not require a context.\n+\n+* Telemetry on/off\n+* NetworkStatus on/off\n+* InvalidateAmbientCache\n+\n+### Backend Selection\n+\n+* Build flags determine the backend\n+\n+The environment that consumes the FFI library is responsible for initializing it's own graphics backend.  This limits a library artifact to a specific platform (Mac, Window, Linux) and runtime revision.  The required parts are passed into the FFI initialize call using an opaque data pointer (nativeWindow).  Backend/Platform build flags determine how this opaque data pointer is cast/used.",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1233221056",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1254,
        "pr_file": "design-proposals/2023-06-17-ffi.md",
        "discussion_id": "1233221056",
        "commented_code": "@@ -0,0 +1,69 @@\n+# Foreign Function Interface (FFI) Library\n+\n+## Motivation\n+\n+Enable FFI bindings (C API) with MapLibre API for Rust and Dart (Flutter) using a Foreign Function Interface (FFI) Library.\n+\n+## Proposed Change\n+\n+Add a C API to the MapLibre source tree in the form of a FFI library.  This library would be integrated into CMake as an optional target.  The external FFI API would be exposed using a C header file.  This header file would be consumed by Rust and Dart interface generation tools.\n+\n+A longer term strategy could be to expose extern C interfaces directly in the common source tree.  This would decrease the long term cost of ownership.\n+\n+The approach that evolved to this proposed solution involved decoupling GLFW from the GLFW app, then abstracting out platform and backend code.  This was initialy done targeting Flutter, after which the same API was used to create a Rust app that behaves similar to the GLFW application.\n+\n+### Common Interface\n+\n+* version - returns FFI interface version\n+* initialize - returns unique context pointer\n+* de_initialize - tears down map instance and frees context\n+* draw_frame - renders a single frame\n+* resize - resizes the map\n+* run_task - used for housekeeping tasks independent of render path\n+* load_gl_functions - function pointer callback for resolving GL functions\n+\n+### Map Instance Lifecycle\n+\n+It is expected to dynamically control the lifecycle of one or many map instances at runtime.\n+\n+### Multiple Maps\n+\n+* Multiple maps are run in the same process.  This enables sharing of a single ambient cache.\n+\n+* Some use cases require four simultaneous map instances\n+\n+Multiple map instances are enabled using a unique context pointer.  A unique context pointer is passed back for every initialize invocation. The context pointer is release on de_initialized or when the library reference is destroyed.\n+\n+Each instance requires a unique FBO, which is passed into draw_frame.\n+\n+The `draw_frame` call is optimally tied to the host compositor \"onFrame\" callback.\n+\n+A housekeeping thread in the primary app is used to call `run_task` for each map instance.  This prevents introducing variability to the render path.\n+\n+### Global Functions\n+\n+Functions that impact all map instances are implemented as static functions, and do not require a context.\n+\n+* Telemetry on/off\n+* NetworkStatus on/off\n+* InvalidateAmbientCache\n+\n+### Backend Selection\n+\n+* Build flags determine the backend\n+\n+The environment that consumes the FFI library is responsible for initializing it's own graphics backend.  This limits a library artifact to a specific platform (Mac, Window, Linux) and runtime revision.  The required parts are passed into the FFI initialize call using an opaque data pointer (nativeWindow).  Backend/Platform build flags determine how this opaque data pointer is cast/used.",
        "comment_created_at": "2023-06-18T07:56:10+00:00",
        "comment_author": "louwers",
        "comment_body": "```suggestion\r\nThe environment that consumes the FFI library is responsible for initializing its own graphics backend.  This limits a library artifact to a specific platform (Mac, Window, Linux) and runtime revision.  The required parts are passed into the FFI initialize call using an opaque data pointer (nativeWindow).  Backend/Platform build flags determine how this opaque data pointer is cast/used.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1392487900",
    "pr_number": 1851,
    "pr_file": "design-proposals/2023-11-08-complex-animatable-interactive-annotations.md",
    "created_at": "2023-11-14T12:06:22+00:00",
    "commented_code": "+# Complex, Animatable, Interactive Annotations Proposal\n+\n+An annotation as described in this proposal is a piece of UI that is drawn on the map at a single coordinate. In Apple MapKit this would be an MKAnnotationView, and in Google world this would be similar to a Marker. Annotations are expected to be user interactable, animatable and allow for complex ui to be represented.\n+\n+## Motivation\n+\n+Most mobile map experiences display some sort of custom content on the map, often in the form of annotations. MapLibre\u2019s current annotation system is difficult to use, performs poorly, and lacks many of the features developers expect from modern mapping libraries.\n+\n+This proposal introduces the concept annotations that are complex, animatable and interactive to maplibre\u2019s core. The first phase allows bitmap backed annotations to be rendered. The second phase will enable native platform views (ios, android) to be rendered directly by maplibre-gl.\n+\n+These new annotations will provide a more flexible tool for drawing user content on the map that is more inline with what developers expect from the built-in mobile map toolkits. The focus on animations and interactivity allows developers to create differentiated map experiences that feel made for mobile.\n+\n+By introducing a specialized rendering path for annotations, we bypass some of the limitations of the current layer-based system. This leads to better performance, especially in scenarios with many dynamic elements, where full layout re-calculations would otherwise cause noticeable lag and degrade the user experience.\n+\n+The customization options that these annotations will provide, together with the existing MapLibre stack, aim to offer a system that is more adaptable and robust than those from Google or Apple.\n+\n+## Proposed Change\n+\n+### Phase 1\n+For this phase we would like to just build our support for bitmaps. The idea being that all native views eventually become bitmaps and supporting them robustly will eventually allow the renderer to draw native views correctly.\n+\n+* Introduce \u201cAnnotation\u201d as a first class citizen of maplibre-gl core c++ layer. This feature would only be available to native clients and platforms and not maplibre-js.",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1392487900",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1851,
        "pr_file": "design-proposals/2023-11-08-complex-animatable-interactive-annotations.md",
        "discussion_id": "1392487900",
        "commented_code": "@@ -0,0 +1,55 @@\n+# Complex, Animatable, Interactive Annotations Proposal\n+\n+An annotation as described in this proposal is a piece of UI that is drawn on the map at a single coordinate. In Apple MapKit this would be an MKAnnotationView, and in Google world this would be similar to a Marker. Annotations are expected to be user interactable, animatable and allow for complex ui to be represented.\n+\n+## Motivation\n+\n+Most mobile map experiences display some sort of custom content on the map, often in the form of annotations. MapLibre\u2019s current annotation system is difficult to use, performs poorly, and lacks many of the features developers expect from modern mapping libraries.\n+\n+This proposal introduces the concept annotations that are complex, animatable and interactive to maplibre\u2019s core. The first phase allows bitmap backed annotations to be rendered. The second phase will enable native platform views (ios, android) to be rendered directly by maplibre-gl.\n+\n+These new annotations will provide a more flexible tool for drawing user content on the map that is more inline with what developers expect from the built-in mobile map toolkits. The focus on animations and interactivity allows developers to create differentiated map experiences that feel made for mobile.\n+\n+By introducing a specialized rendering path for annotations, we bypass some of the limitations of the current layer-based system. This leads to better performance, especially in scenarios with many dynamic elements, where full layout re-calculations would otherwise cause noticeable lag and degrade the user experience.\n+\n+The customization options that these annotations will provide, together with the existing MapLibre stack, aim to offer a system that is more adaptable and robust than those from Google or Apple.\n+\n+## Proposed Change\n+\n+### Phase 1\n+For this phase we would like to just build our support for bitmaps. The idea being that all native views eventually become bitmaps and supporting them robustly will eventually allow the renderer to draw native views correctly.\n+\n+* Introduce \u201cAnnotation\u201d as a first class citizen of maplibre-gl core c++ layer. This feature would only be available to native clients and platforms and not maplibre-js.",
        "comment_created_at": "2023-11-14T12:06:22+00:00",
        "comment_author": "louwers",
        "comment_body": "```suggestion\r\n* Introduce \u201cAnnotation\u201d as a first class citizen of the MapLibre Native C++ Core.\r\n```\r\n\r\nSince this design proposal is for the MapLibre Native repo, it is understood that it does not apply to MapLibre GL JS.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1392501864",
    "pr_number": 1851,
    "pr_file": "design-proposals/2023-11-08-complex-animatable-interactive-annotations.md",
    "created_at": "2023-11-14T12:17:49+00:00",
    "commented_code": "+# Complex, Animatable, Interactive Annotations Proposal\n+\n+An annotation as described in this proposal is a piece of UI that is drawn on the map at a single coordinate. In Apple MapKit this would be an MKAnnotationView, and in Google world this would be similar to a Marker. Annotations are expected to be user interactable, animatable and allow for complex ui to be represented.\n+\n+## Motivation\n+\n+Most mobile map experiences display some sort of custom content on the map, often in the form of annotations. MapLibre\u2019s current annotation system is difficult to use, performs poorly, and lacks many of the features developers expect from modern mapping libraries.\n+\n+This proposal introduces the concept annotations that are complex, animatable and interactive to maplibre\u2019s core. The first phase allows bitmap backed annotations to be rendered. The second phase will enable native platform views (ios, android) to be rendered directly by maplibre-gl.",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1392501864",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1851,
        "pr_file": "design-proposals/2023-11-08-complex-animatable-interactive-annotations.md",
        "discussion_id": "1392501864",
        "commented_code": "@@ -0,0 +1,55 @@\n+# Complex, Animatable, Interactive Annotations Proposal\n+\n+An annotation as described in this proposal is a piece of UI that is drawn on the map at a single coordinate. In Apple MapKit this would be an MKAnnotationView, and in Google world this would be similar to a Marker. Annotations are expected to be user interactable, animatable and allow for complex ui to be represented.\n+\n+## Motivation\n+\n+Most mobile map experiences display some sort of custom content on the map, often in the form of annotations. MapLibre\u2019s current annotation system is difficult to use, performs poorly, and lacks many of the features developers expect from modern mapping libraries.\n+\n+This proposal introduces the concept annotations that are complex, animatable and interactive to maplibre\u2019s core. The first phase allows bitmap backed annotations to be rendered. The second phase will enable native platform views (ios, android) to be rendered directly by maplibre-gl.",
        "comment_created_at": "2023-11-14T12:17:49+00:00",
        "comment_author": "louwers",
        "comment_body": "```suggestion\r\nThis proposal introduces the concept of annotations that are complex, animatable and interactive to MapLibre\u2019s core. The first phase allows bitmap backed annotations to be rendered. The second phase will enable native platform views (iOS, Android) to be rendered directly by MapLibre Native.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1392503573",
    "pr_number": 1851,
    "pr_file": "design-proposals/2023-11-08-complex-animatable-interactive-annotations.md",
    "created_at": "2023-11-14T12:19:15+00:00",
    "commented_code": "+# Complex, Animatable, Interactive Annotations Proposal\n+\n+An annotation as described in this proposal is a piece of UI that is drawn on the map at a single coordinate. In Apple MapKit this would be an MKAnnotationView, and in Google world this would be similar to a Marker. Annotations are expected to be user interactable, animatable and allow for complex ui to be represented.\n+\n+## Motivation\n+\n+Most mobile map experiences display some sort of custom content on the map, often in the form of annotations. MapLibre\u2019s current annotation system is difficult to use, performs poorly, and lacks many of the features developers expect from modern mapping libraries.\n+\n+This proposal introduces the concept annotations that are complex, animatable and interactive to maplibre\u2019s core. The first phase allows bitmap backed annotations to be rendered. The second phase will enable native platform views (ios, android) to be rendered directly by maplibre-gl.\n+\n+These new annotations will provide a more flexible tool for drawing user content on the map that is more inline with what developers expect from the built-in mobile map toolkits. The focus on animations and interactivity allows developers to create differentiated map experiences that feel made for mobile.",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1392503573",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1851,
        "pr_file": "design-proposals/2023-11-08-complex-animatable-interactive-annotations.md",
        "discussion_id": "1392503573",
        "commented_code": "@@ -0,0 +1,55 @@\n+# Complex, Animatable, Interactive Annotations Proposal\n+\n+An annotation as described in this proposal is a piece of UI that is drawn on the map at a single coordinate. In Apple MapKit this would be an MKAnnotationView, and in Google world this would be similar to a Marker. Annotations are expected to be user interactable, animatable and allow for complex ui to be represented.\n+\n+## Motivation\n+\n+Most mobile map experiences display some sort of custom content on the map, often in the form of annotations. MapLibre\u2019s current annotation system is difficult to use, performs poorly, and lacks many of the features developers expect from modern mapping libraries.\n+\n+This proposal introduces the concept annotations that are complex, animatable and interactive to maplibre\u2019s core. The first phase allows bitmap backed annotations to be rendered. The second phase will enable native platform views (ios, android) to be rendered directly by maplibre-gl.\n+\n+These new annotations will provide a more flexible tool for drawing user content on the map that is more inline with what developers expect from the built-in mobile map toolkits. The focus on animations and interactivity allows developers to create differentiated map experiences that feel made for mobile.",
        "comment_created_at": "2023-11-14T12:19:15+00:00",
        "comment_author": "louwers",
        "comment_body": "```suggestion\r\nThese new annotations will provide a more flexible tool for drawing user content on the map that is more in line with what developers expect from the built-in mobile map toolkits. The focus on animations and interactivity allows developers to create differentiated map experiences that feel made for mobile.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1192507594",
    "pr_number": 1133,
    "pr_file": "platform/android/CHANGELOG.md",
    "created_at": "2023-05-12T15:18:16+00:00",
    "commented_code": "## main\n \n ### \u2728 Features and improvements\n+* Add support for the [`slice` expression](https://maplibre.org/maplibre-style-spec/expressions/#slice) ([#1113](https://github.com/maplibre/maplibre-native/pull/1133))",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1192507594",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1133,
        "pr_file": "platform/android/CHANGELOG.md",
        "discussion_id": "1192507594",
        "commented_code": "@@ -5,6 +5,7 @@ MapLibre welcomes participation and contributions from everyone. Please read [`C\n ## main\n \n ### \u2728 Features and improvements\n+* Add support for the [`slice` expression](https://maplibre.org/maplibre-style-spec/expressions/#slice) ([#1113](https://github.com/maplibre/maplibre-native/pull/1133))",
        "comment_created_at": "2023-05-12T15:18:16+00:00",
        "comment_author": "SiarheiFedartsou",
        "comment_body": "Again, doing it for Android only...",
        "pr_file_module": null
      },
      {
        "comment_id": "1199728715",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1133,
        "pr_file": "platform/android/CHANGELOG.md",
        "discussion_id": "1192507594",
        "commented_code": "@@ -5,6 +5,7 @@ MapLibre welcomes participation and contributions from everyone. Please read [`C\n ## main\n \n ### \u2728 Features and improvements\n+* Add support for the [`slice` expression](https://maplibre.org/maplibre-style-spec/expressions/#slice) ([#1113](https://github.com/maplibre/maplibre-native/pull/1133))",
        "comment_created_at": "2023-05-21T09:20:05+00:00",
        "comment_author": "ovivoda",
        "comment_body": "@SiarheiFedartsou any reason why this is Android only?",
        "pr_file_module": null
      },
      {
        "comment_id": "1199772134",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1133,
        "pr_file": "platform/android/CHANGELOG.md",
        "discussion_id": "1192507594",
        "commented_code": "@@ -5,6 +5,7 @@ MapLibre welcomes participation and contributions from everyone. Please read [`C\n ## main\n \n ### \u2728 Features and improvements\n+* Add support for the [`slice` expression](https://maplibre.org/maplibre-style-spec/expressions/#slice) ([#1113](https://github.com/maplibre/maplibre-native/pull/1133))",
        "comment_created_at": "2023-05-21T13:59:49+00:00",
        "comment_author": "SiarheiFedartsou",
        "comment_body": "Yes, it should be quite easy to do that for iOS as well, but tbh I had no enough time and enough experience with iOS API of Maplibre in order to do that for iOS as well. I think it can be done in separate PR in the future. But if you can guide me to make this change available for iOS as well I would be happy to help.",
        "pr_file_module": null
      }
    ]
  }
]