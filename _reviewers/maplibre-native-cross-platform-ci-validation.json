[
  {
    "discussion_id": "2138563939",
    "pr_number": 3430,
    "pr_file": "include/mbgl/style/layer.hpp",
    "created_at": "2025-06-10T18:45:24+00:00",
    "commented_code": "} tileKind;\n };\n \n+// Added this to support plugins and that their LayerTypeInfo isn't the same point\n+// across the board\n+static bool layerTypeInfoEquals(const mbgl::style::LayerTypeInfo* one, const mbgl::style::LayerTypeInfo* other) {",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "2138563939",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3430,
        "pr_file": "include/mbgl/style/layer.hpp",
        "discussion_id": "2138563939",
        "commented_code": "@@ -90,6 +90,14 @@ struct LayerTypeInfo {\n     } tileKind;\n };\n \n+// Added this to support plugins and that their LayerTypeInfo isn't the same point\n+// across the board\n+static bool layerTypeInfoEquals(const mbgl::style::LayerTypeInfo* one, const mbgl::style::LayerTypeInfo* other) {",
        "comment_created_at": "2025-06-10T18:45:24+00:00",
        "comment_author": "louwers",
        "comment_body": "CI is complaining that this function is not used.",
        "pr_file_module": null
      },
      {
        "comment_id": "2140122784",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3430,
        "pr_file": "include/mbgl/style/layer.hpp",
        "discussion_id": "2138563939",
        "commented_code": "@@ -90,6 +90,14 @@ struct LayerTypeInfo {\n     } tileKind;\n };\n \n+// Added this to support plugins and that their LayerTypeInfo isn't the same point\n+// across the board\n+static bool layerTypeInfoEquals(const mbgl::style::LayerTypeInfo* one, const mbgl::style::LayerTypeInfo* other) {",
        "comment_created_at": "2025-06-11T13:22:07+00:00",
        "comment_author": "AtlasProgramming",
        "comment_body": "This is only used on the darwin side for now.   So, if CI isn't building the darwin layer manager then it won't be used.  Could wrap in some kind of ifdef if that's helpful.  If so, what's the standard ifdef for removing code that is darwin only?\r\n\r\n<img width=\"674\" alt=\"Screenshot 2025-06-11 at 9 20 37â€¯AM\" src=\"https://github.com/user-attachments/assets/d5ba2896-50f6-48c3-abff-6c1e403fcbc7\" />\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2140131469",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3430,
        "pr_file": "include/mbgl/style/layer.hpp",
        "discussion_id": "2138563939",
        "commented_code": "@@ -90,6 +90,14 @@ struct LayerTypeInfo {\n     } tileKind;\n };\n \n+// Added this to support plugins and that their LayerTypeInfo isn't the same point\n+// across the board\n+static bool layerTypeInfoEquals(const mbgl::style::LayerTypeInfo* one, const mbgl::style::LayerTypeInfo* other) {",
        "comment_created_at": "2025-06-11T13:25:53+00:00",
        "comment_author": "AtlasProgramming",
        "comment_body": "nm..  Moving to a standard function which I think will resolve the issue..",
        "pr_file_module": null
      },
      {
        "comment_id": "2140307776",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3430,
        "pr_file": "include/mbgl/style/layer.hpp",
        "discussion_id": "2138563939",
        "commented_code": "@@ -90,6 +90,14 @@ struct LayerTypeInfo {\n     } tileKind;\n };\n \n+// Added this to support plugins and that their LayerTypeInfo isn't the same point\n+// across the board\n+static bool layerTypeInfoEquals(const mbgl::style::LayerTypeInfo* one, const mbgl::style::LayerTypeInfo* other) {",
        "comment_created_at": "2025-06-11T14:13:06+00:00",
        "comment_author": "adrian-cojocaru",
        "comment_body": "I think the main problem is that it's marked as static and it's part of the header. Removing it and/or moving the implementation in .cpp should fix it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1794559462",
    "pr_number": 2921,
    "pr_file": "include/mbgl/util/variable_anchor_offset_collection.hpp",
    "created_at": "2024-10-10T03:20:24+00:00",
    "commented_code": "+#pragma once\n+\n+#include <mbgl/style/types.hpp>\n+#include <mbgl/util/feature.hpp>\n+#include <mbgl/util/geometry.hpp>\n+\n+#include <string>\n+#include <unordered_map>\n+#include <vector>",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1794559462",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2921,
        "pr_file": "include/mbgl/util/variable_anchor_offset_collection.hpp",
        "discussion_id": "1794559462",
        "commented_code": "@@ -0,0 +1,61 @@\n+#pragma once\n+\n+#include <mbgl/style/types.hpp>\n+#include <mbgl/util/feature.hpp>\n+#include <mbgl/util/geometry.hpp>\n+\n+#include <string>\n+#include <unordered_map>\n+#include <vector>",
        "comment_created_at": "2024-10-10T03:20:24+00:00",
        "comment_author": "random3940",
        "comment_body": "It looks like we need `#include <array>` here to fix node.js CI.",
        "pr_file_module": null
      },
      {
        "comment_id": "1794560405",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2921,
        "pr_file": "include/mbgl/util/variable_anchor_offset_collection.hpp",
        "discussion_id": "1794559462",
        "commented_code": "@@ -0,0 +1,61 @@\n+#pragma once\n+\n+#include <mbgl/style/types.hpp>\n+#include <mbgl/util/feature.hpp>\n+#include <mbgl/util/geometry.hpp>\n+\n+#include <string>\n+#include <unordered_map>\n+#include <vector>",
        "comment_created_at": "2024-10-10T03:22:26+00:00",
        "comment_author": "random3940",
        "comment_body": "I think it can also fix qt-ci build.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1300770239",
    "pr_number": 1534,
    "pr_file": "platform/ios/BUILD.bazel",
    "created_at": "2023-08-22T00:05:14+00:00",
    "commented_code": "xcodeproj(\n     name = \"xcodeproj\",\n     bazel_env = {\"PATH\": \"/bin:/usr/bin:/usr/local/bin:/opt/homebrew/bin\"},\n-    build_mode = \"xcode\",\n+    build_mode = \"bazel\",",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1300770239",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1534,
        "pr_file": "platform/ios/BUILD.bazel",
        "discussion_id": "1300770239",
        "commented_code": "@@ -213,7 +213,7 @@ genrule(\n xcodeproj(\n     name = \"xcodeproj\",\n     bazel_env = {\"PATH\": \"/bin:/usr/bin:/usr/local/bin:/opt/homebrew/bin\"},\n-    build_mode = \"xcode\",\n+    build_mode = \"bazel\",",
        "comment_created_at": "2023-08-22T00:05:14+00:00",
        "comment_author": "mwilsnd",
        "comment_body": "A couple things:\r\n- bwb is really slow, it isn't building in parallel. There might be a way to fix that though.\r\n- bwb fails to locate a provisioning profile which is why we switched to bwx. I tested building the demo app and it still fails here in bwb mode.",
        "pr_file_module": null
      },
      {
        "comment_id": "1301266610",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1534,
        "pr_file": "platform/ios/BUILD.bazel",
        "discussion_id": "1300770239",
        "commented_code": "@@ -213,7 +213,7 @@ genrule(\n xcodeproj(\n     name = \"xcodeproj\",\n     bazel_env = {\"PATH\": \"/bin:/usr/bin:/usr/local/bin:/opt/homebrew/bin\"},\n-    build_mode = \"xcode\",\n+    build_mode = \"bazel\",",
        "comment_created_at": "2023-08-22T08:41:06+00:00",
        "comment_author": "louwers",
        "comment_body": "It does find the provisioning profile for me now. Could we make a bug report over at https://github.com/MobileNativeFoundation/rules_xcodeproj ?\r\n\r\nBwX does not have first-class support from rules_xcodeproj and support for it might be removed altogether in the future. I will add your comment to the discussion [here](https://github.com/MobileNativeFoundation/rules_xcodeproj/discussions/2391).\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1301289088",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1534,
        "pr_file": "platform/ios/BUILD.bazel",
        "discussion_id": "1300770239",
        "commented_code": "@@ -213,7 +213,7 @@ genrule(\n xcodeproj(\n     name = \"xcodeproj\",\n     bazel_env = {\"PATH\": \"/bin:/usr/bin:/usr/local/bin:/opt/homebrew/bin\"},\n-    build_mode = \"xcode\",\n+    build_mode = \"bazel\",",
        "comment_created_at": "2023-08-22T08:55:38+00:00",
        "comment_author": "louwers",
        "comment_body": "I made the `BUILD_MODE` configurable. You can set it to your liking in your `config.bzl`.",
        "pr_file_module": null
      }
    ]
  }
]