[
  {
    "discussion_id": "1598700290",
    "pr_number": 2393,
    "pr_file": "platform/ios/app-swift/Sources/LocationPrivacyExample.swift",
    "created_at": "2024-05-13T15:52:17+00:00",
    "commented_code": "case fullAccuracy\n }\n \n-class Coordinator: NSObject, MLNMapViewDelegate {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-    var pannedToUserLocation = false\n-\n-    init(mapView: Binding<MLNMapView>, locationAccuracy: Binding<LocationAccuracyState>) {\n-        _mapView = mapView\n-        _locationAccuracy = locationAccuracy\n+class MapViewModel: NSObject, ObservableObject {\n+    // Weak because the coordinator has a strong reference to the view model\n+    weak var mapCoordinater: MapLibreRepresentableCoordinator?\n+    @MainActor @Published var locationAccuracy: LocationAccuracyState = .unknown\n+\n+    @MainActor func requestTemporaryLocationAuthorization() {\n+        print(\"Requesting precice location\")\n+\n+        switch locationAccuracy {\n+        case .reducedAccuracy:\n+            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\n+            mapCoordinater?.mapView?.locationManager.requestTemporaryFullAccuracyAuthorization!(withPurposeKey: purposeKey)\n+        default:\n+            break\n+        }\n     }\n+}\n \n-    func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n+class MapLibreRepresentableCoordinator: NSObject, MLNMapViewDelegate {\n+    private var mapViewModel: MapViewModel\n+    // Weak reference because SwiftUI owns the strong reference\n+    private(set) weak var mapView: MLNMapView?\n+    private var pannedToUserLocation = false\n+\n+    init(mapViewModel: MapViewModel) {\n+        self.mapViewModel = mapViewModel\n+        super.init()\n+        self.mapViewModel.mapCoordinater = self\n+    }\n+\n+    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n         guard let accuracySetting = manager.accuracyAuthorization else {\n             return\n         }\n \n         switch accuracySetting() {\n         case .fullAccuracy:\n-            locationAccuracy = .fullAccuracy\n+            mapViewModel.locationAccuracy = .fullAccuracy\n         case .reducedAccuracy:\n-            locationAccuracy = .reducedAccuracy\n+            mapViewModel.locationAccuracy = .reducedAccuracy\n         @unknown default:\n-            locationAccuracy = .unknown\n+            mapViewModel.locationAccuracy = .unknown\n         }\n     }\n \n     // when a location is available for the first time, we fly to it\n     func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {\n-        if pannedToUserLocation {\n-            return\n-        }\n+        guard !pannedToUserLocation else { return }\n         guard let userLocation = mapView.userLocation else {\n             print(\"User location is currently not available.\")\n             return\n         }\n         mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))\n+        pannedToUserLocation = true\n+    }\n+\n+    func mapView(_ mapView: MLNMapView, didFinishLoading _: MLNStyle) {\n+        if self.mapView != mapView {\n+            self.mapView = mapView\n+        }\n+    }\n+\n+    func mapViewDidFinishLoadingMap(_ mapView: MLNMapView) {\n+        if self.mapView != mapView {\n+            self.mapView = mapView\n+        }\n+    }\n+\n+    deinit {\n+        // Ensure the coordinator is deallocated if MapLibreViewRepresentable.dismantleUIView was called\n     }\n }\n \n-struct LocationPrivacyExample: UIViewRepresentable {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n+struct MapLibreViewRepresentable: UIViewRepresentable {\n+    let mapViewModel: MapViewModel\n \n-    func makeCoordinator() -> Coordinator {\n-        Coordinator(mapView: $mapView, locationAccuracy: $locationAccuracy)\n+    func makeCoordinator() -> MapLibreRepresentableCoordinator {\n+        MapLibreRepresentableCoordinator(mapViewModel: mapViewModel)\n     }\n \n     func makeUIView(context: Context) -> MLNMapView {\n         let mapView = MLNMapView()\n-        mapView.showsUserLocation = true\n+        // Set delegate first, otherwise delegate callbacks can be missed. For example, setting showsUserLocation calls mapView:didUpdate:userLocation\n         mapView.delegate = context.coordinator\n-\n+        mapView.showsUserLocation = true",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1598700290",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2393,
        "pr_file": "platform/ios/app-swift/Sources/LocationPrivacyExample.swift",
        "discussion_id": "1598700290",
        "commented_code": "@@ -9,75 +9,114 @@ enum LocationAccuracyState {\n     case fullAccuracy\n }\n \n-class Coordinator: NSObject, MLNMapViewDelegate {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-    var pannedToUserLocation = false\n-\n-    init(mapView: Binding<MLNMapView>, locationAccuracy: Binding<LocationAccuracyState>) {\n-        _mapView = mapView\n-        _locationAccuracy = locationAccuracy\n+class MapViewModel: NSObject, ObservableObject {\n+    // Weak because the coordinator has a strong reference to the view model\n+    weak var mapCoordinater: MapLibreRepresentableCoordinator?\n+    @MainActor @Published var locationAccuracy: LocationAccuracyState = .unknown\n+\n+    @MainActor func requestTemporaryLocationAuthorization() {\n+        print(\"Requesting precice location\")\n+\n+        switch locationAccuracy {\n+        case .reducedAccuracy:\n+            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\n+            mapCoordinater?.mapView?.locationManager.requestTemporaryFullAccuracyAuthorization!(withPurposeKey: purposeKey)\n+        default:\n+            break\n+        }\n     }\n+}\n \n-    func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n+class MapLibreRepresentableCoordinator: NSObject, MLNMapViewDelegate {\n+    private var mapViewModel: MapViewModel\n+    // Weak reference because SwiftUI owns the strong reference\n+    private(set) weak var mapView: MLNMapView?\n+    private var pannedToUserLocation = false\n+\n+    init(mapViewModel: MapViewModel) {\n+        self.mapViewModel = mapViewModel\n+        super.init()\n+        self.mapViewModel.mapCoordinater = self\n+    }\n+\n+    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n         guard let accuracySetting = manager.accuracyAuthorization else {\n             return\n         }\n \n         switch accuracySetting() {\n         case .fullAccuracy:\n-            locationAccuracy = .fullAccuracy\n+            mapViewModel.locationAccuracy = .fullAccuracy\n         case .reducedAccuracy:\n-            locationAccuracy = .reducedAccuracy\n+            mapViewModel.locationAccuracy = .reducedAccuracy\n         @unknown default:\n-            locationAccuracy = .unknown\n+            mapViewModel.locationAccuracy = .unknown\n         }\n     }\n \n     // when a location is available for the first time, we fly to it\n     func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {\n-        if pannedToUserLocation {\n-            return\n-        }\n+        guard !pannedToUserLocation else { return }\n         guard let userLocation = mapView.userLocation else {\n             print(\"User location is currently not available.\")\n             return\n         }\n         mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))\n+        pannedToUserLocation = true\n+    }\n+\n+    func mapView(_ mapView: MLNMapView, didFinishLoading _: MLNStyle) {\n+        if self.mapView != mapView {\n+            self.mapView = mapView\n+        }\n+    }\n+\n+    func mapViewDidFinishLoadingMap(_ mapView: MLNMapView) {\n+        if self.mapView != mapView {\n+            self.mapView = mapView\n+        }\n+    }\n+\n+    deinit {\n+        // Ensure the coordinator is deallocated if MapLibreViewRepresentable.dismantleUIView was called\n     }\n }\n \n-struct LocationPrivacyExample: UIViewRepresentable {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n+struct MapLibreViewRepresentable: UIViewRepresentable {\n+    let mapViewModel: MapViewModel\n \n-    func makeCoordinator() -> Coordinator {\n-        Coordinator(mapView: $mapView, locationAccuracy: $locationAccuracy)\n+    func makeCoordinator() -> MapLibreRepresentableCoordinator {\n+        MapLibreRepresentableCoordinator(mapViewModel: mapViewModel)\n     }\n \n     func makeUIView(context: Context) -> MLNMapView {\n         let mapView = MLNMapView()\n-        mapView.showsUserLocation = true\n+        // Set delegate first, otherwise delegate callbacks can be missed. For example, setting showsUserLocation calls mapView:didUpdate:userLocation\n         mapView.delegate = context.coordinator\n-\n+        mapView.showsUserLocation = true",
        "comment_created_at": "2024-05-13T15:52:17+00:00",
        "comment_author": "hactar",
        "comment_body": "As far as I remember, setting showUserLocation to true immediately triggers a permission request?",
        "pr_file_module": null
      },
      {
        "comment_id": "1603618504",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2393,
        "pr_file": "platform/ios/app-swift/Sources/LocationPrivacyExample.swift",
        "discussion_id": "1598700290",
        "commented_code": "@@ -9,75 +9,114 @@ enum LocationAccuracyState {\n     case fullAccuracy\n }\n \n-class Coordinator: NSObject, MLNMapViewDelegate {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-    var pannedToUserLocation = false\n-\n-    init(mapView: Binding<MLNMapView>, locationAccuracy: Binding<LocationAccuracyState>) {\n-        _mapView = mapView\n-        _locationAccuracy = locationAccuracy\n+class MapViewModel: NSObject, ObservableObject {\n+    // Weak because the coordinator has a strong reference to the view model\n+    weak var mapCoordinater: MapLibreRepresentableCoordinator?\n+    @MainActor @Published var locationAccuracy: LocationAccuracyState = .unknown\n+\n+    @MainActor func requestTemporaryLocationAuthorization() {\n+        print(\"Requesting precice location\")\n+\n+        switch locationAccuracy {\n+        case .reducedAccuracy:\n+            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\n+            mapCoordinater?.mapView?.locationManager.requestTemporaryFullAccuracyAuthorization!(withPurposeKey: purposeKey)\n+        default:\n+            break\n+        }\n     }\n+}\n \n-    func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n+class MapLibreRepresentableCoordinator: NSObject, MLNMapViewDelegate {\n+    private var mapViewModel: MapViewModel\n+    // Weak reference because SwiftUI owns the strong reference\n+    private(set) weak var mapView: MLNMapView?\n+    private var pannedToUserLocation = false\n+\n+    init(mapViewModel: MapViewModel) {\n+        self.mapViewModel = mapViewModel\n+        super.init()\n+        self.mapViewModel.mapCoordinater = self\n+    }\n+\n+    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n         guard let accuracySetting = manager.accuracyAuthorization else {\n             return\n         }\n \n         switch accuracySetting() {\n         case .fullAccuracy:\n-            locationAccuracy = .fullAccuracy\n+            mapViewModel.locationAccuracy = .fullAccuracy\n         case .reducedAccuracy:\n-            locationAccuracy = .reducedAccuracy\n+            mapViewModel.locationAccuracy = .reducedAccuracy\n         @unknown default:\n-            locationAccuracy = .unknown\n+            mapViewModel.locationAccuracy = .unknown\n         }\n     }\n \n     // when a location is available for the first time, we fly to it\n     func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {\n-        if pannedToUserLocation {\n-            return\n-        }\n+        guard !pannedToUserLocation else { return }\n         guard let userLocation = mapView.userLocation else {\n             print(\"User location is currently not available.\")\n             return\n         }\n         mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))\n+        pannedToUserLocation = true\n+    }\n+\n+    func mapView(_ mapView: MLNMapView, didFinishLoading _: MLNStyle) {\n+        if self.mapView != mapView {\n+            self.mapView = mapView\n+        }\n+    }\n+\n+    func mapViewDidFinishLoadingMap(_ mapView: MLNMapView) {\n+        if self.mapView != mapView {\n+            self.mapView = mapView\n+        }\n+    }\n+\n+    deinit {\n+        // Ensure the coordinator is deallocated if MapLibreViewRepresentable.dismantleUIView was called\n     }\n }\n \n-struct LocationPrivacyExample: UIViewRepresentable {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n+struct MapLibreViewRepresentable: UIViewRepresentable {\n+    let mapViewModel: MapViewModel\n \n-    func makeCoordinator() -> Coordinator {\n-        Coordinator(mapView: $mapView, locationAccuracy: $locationAccuracy)\n+    func makeCoordinator() -> MapLibreRepresentableCoordinator {\n+        MapLibreRepresentableCoordinator(mapViewModel: mapViewModel)\n     }\n \n     func makeUIView(context: Context) -> MLNMapView {\n         let mapView = MLNMapView()\n-        mapView.showsUserLocation = true\n+        // Set delegate first, otherwise delegate callbacks can be missed. For example, setting showsUserLocation calls mapView:didUpdate:userLocation\n         mapView.delegate = context.coordinator\n-\n+        mapView.showsUserLocation = true",
        "comment_created_at": "2024-05-16T15:39:33+00:00",
        "comment_author": "voncannon",
        "comment_body": "Yes that is correct. This is something that was already here with @louwers example so I left it alone. I think the example was to just show requesting temporary precise access. But if we wanted to expand this example we could add two buttons on this example. But I'll let @louwers make that call. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1603646773",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2393,
        "pr_file": "platform/ios/app-swift/Sources/LocationPrivacyExample.swift",
        "discussion_id": "1598700290",
        "commented_code": "@@ -9,75 +9,114 @@ enum LocationAccuracyState {\n     case fullAccuracy\n }\n \n-class Coordinator: NSObject, MLNMapViewDelegate {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-    var pannedToUserLocation = false\n-\n-    init(mapView: Binding<MLNMapView>, locationAccuracy: Binding<LocationAccuracyState>) {\n-        _mapView = mapView\n-        _locationAccuracy = locationAccuracy\n+class MapViewModel: NSObject, ObservableObject {\n+    // Weak because the coordinator has a strong reference to the view model\n+    weak var mapCoordinater: MapLibreRepresentableCoordinator?\n+    @MainActor @Published var locationAccuracy: LocationAccuracyState = .unknown\n+\n+    @MainActor func requestTemporaryLocationAuthorization() {\n+        print(\"Requesting precice location\")\n+\n+        switch locationAccuracy {\n+        case .reducedAccuracy:\n+            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\n+            mapCoordinater?.mapView?.locationManager.requestTemporaryFullAccuracyAuthorization!(withPurposeKey: purposeKey)\n+        default:\n+            break\n+        }\n     }\n+}\n \n-    func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n+class MapLibreRepresentableCoordinator: NSObject, MLNMapViewDelegate {\n+    private var mapViewModel: MapViewModel\n+    // Weak reference because SwiftUI owns the strong reference\n+    private(set) weak var mapView: MLNMapView?\n+    private var pannedToUserLocation = false\n+\n+    init(mapViewModel: MapViewModel) {\n+        self.mapViewModel = mapViewModel\n+        super.init()\n+        self.mapViewModel.mapCoordinater = self\n+    }\n+\n+    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n         guard let accuracySetting = manager.accuracyAuthorization else {\n             return\n         }\n \n         switch accuracySetting() {\n         case .fullAccuracy:\n-            locationAccuracy = .fullAccuracy\n+            mapViewModel.locationAccuracy = .fullAccuracy\n         case .reducedAccuracy:\n-            locationAccuracy = .reducedAccuracy\n+            mapViewModel.locationAccuracy = .reducedAccuracy\n         @unknown default:\n-            locationAccuracy = .unknown\n+            mapViewModel.locationAccuracy = .unknown\n         }\n     }\n \n     // when a location is available for the first time, we fly to it\n     func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {\n-        if pannedToUserLocation {\n-            return\n-        }\n+        guard !pannedToUserLocation else { return }\n         guard let userLocation = mapView.userLocation else {\n             print(\"User location is currently not available.\")\n             return\n         }\n         mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))\n+        pannedToUserLocation = true\n+    }\n+\n+    func mapView(_ mapView: MLNMapView, didFinishLoading _: MLNStyle) {\n+        if self.mapView != mapView {\n+            self.mapView = mapView\n+        }\n+    }\n+\n+    func mapViewDidFinishLoadingMap(_ mapView: MLNMapView) {\n+        if self.mapView != mapView {\n+            self.mapView = mapView\n+        }\n+    }\n+\n+    deinit {\n+        // Ensure the coordinator is deallocated if MapLibreViewRepresentable.dismantleUIView was called\n     }\n }\n \n-struct LocationPrivacyExample: UIViewRepresentable {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n+struct MapLibreViewRepresentable: UIViewRepresentable {\n+    let mapViewModel: MapViewModel\n \n-    func makeCoordinator() -> Coordinator {\n-        Coordinator(mapView: $mapView, locationAccuracy: $locationAccuracy)\n+    func makeCoordinator() -> MapLibreRepresentableCoordinator {\n+        MapLibreRepresentableCoordinator(mapViewModel: mapViewModel)\n     }\n \n     func makeUIView(context: Context) -> MLNMapView {\n         let mapView = MLNMapView()\n-        mapView.showsUserLocation = true\n+        // Set delegate first, otherwise delegate callbacks can be missed. For example, setting showsUserLocation calls mapView:didUpdate:userLocation\n         mapView.delegate = context.coordinator\n-\n+        mapView.showsUserLocation = true",
        "comment_created_at": "2024-05-16T15:57:47+00:00",
        "comment_author": "hactar",
        "comment_body": "If you've tested this and it doesn't clash with that temporary request then fine, I was just worried that this would trigger an auth request on app launch, making your button obsolete...",
        "pr_file_module": null
      },
      {
        "comment_id": "1603702719",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2393,
        "pr_file": "platform/ios/app-swift/Sources/LocationPrivacyExample.swift",
        "discussion_id": "1598700290",
        "commented_code": "@@ -9,75 +9,114 @@ enum LocationAccuracyState {\n     case fullAccuracy\n }\n \n-class Coordinator: NSObject, MLNMapViewDelegate {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-    var pannedToUserLocation = false\n-\n-    init(mapView: Binding<MLNMapView>, locationAccuracy: Binding<LocationAccuracyState>) {\n-        _mapView = mapView\n-        _locationAccuracy = locationAccuracy\n+class MapViewModel: NSObject, ObservableObject {\n+    // Weak because the coordinator has a strong reference to the view model\n+    weak var mapCoordinater: MapLibreRepresentableCoordinator?\n+    @MainActor @Published var locationAccuracy: LocationAccuracyState = .unknown\n+\n+    @MainActor func requestTemporaryLocationAuthorization() {\n+        print(\"Requesting precice location\")\n+\n+        switch locationAccuracy {\n+        case .reducedAccuracy:\n+            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\n+            mapCoordinater?.mapView?.locationManager.requestTemporaryFullAccuracyAuthorization!(withPurposeKey: purposeKey)\n+        default:\n+            break\n+        }\n     }\n+}\n \n-    func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n+class MapLibreRepresentableCoordinator: NSObject, MLNMapViewDelegate {\n+    private var mapViewModel: MapViewModel\n+    // Weak reference because SwiftUI owns the strong reference\n+    private(set) weak var mapView: MLNMapView?\n+    private var pannedToUserLocation = false\n+\n+    init(mapViewModel: MapViewModel) {\n+        self.mapViewModel = mapViewModel\n+        super.init()\n+        self.mapViewModel.mapCoordinater = self\n+    }\n+\n+    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n         guard let accuracySetting = manager.accuracyAuthorization else {\n             return\n         }\n \n         switch accuracySetting() {\n         case .fullAccuracy:\n-            locationAccuracy = .fullAccuracy\n+            mapViewModel.locationAccuracy = .fullAccuracy\n         case .reducedAccuracy:\n-            locationAccuracy = .reducedAccuracy\n+            mapViewModel.locationAccuracy = .reducedAccuracy\n         @unknown default:\n-            locationAccuracy = .unknown\n+            mapViewModel.locationAccuracy = .unknown\n         }\n     }\n \n     // when a location is available for the first time, we fly to it\n     func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {\n-        if pannedToUserLocation {\n-            return\n-        }\n+        guard !pannedToUserLocation else { return }\n         guard let userLocation = mapView.userLocation else {\n             print(\"User location is currently not available.\")\n             return\n         }\n         mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))\n+        pannedToUserLocation = true\n+    }\n+\n+    func mapView(_ mapView: MLNMapView, didFinishLoading _: MLNStyle) {\n+        if self.mapView != mapView {\n+            self.mapView = mapView\n+        }\n+    }\n+\n+    func mapViewDidFinishLoadingMap(_ mapView: MLNMapView) {\n+        if self.mapView != mapView {\n+            self.mapView = mapView\n+        }\n+    }\n+\n+    deinit {\n+        // Ensure the coordinator is deallocated if MapLibreViewRepresentable.dismantleUIView was called\n     }\n }\n \n-struct LocationPrivacyExample: UIViewRepresentable {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n+struct MapLibreViewRepresentable: UIViewRepresentable {\n+    let mapViewModel: MapViewModel\n \n-    func makeCoordinator() -> Coordinator {\n-        Coordinator(mapView: $mapView, locationAccuracy: $locationAccuracy)\n+    func makeCoordinator() -> MapLibreRepresentableCoordinator {\n+        MapLibreRepresentableCoordinator(mapViewModel: mapViewModel)\n     }\n \n     func makeUIView(context: Context) -> MLNMapView {\n         let mapView = MLNMapView()\n-        mapView.showsUserLocation = true\n+        // Set delegate first, otherwise delegate callbacks can be missed. For example, setting showsUserLocation calls mapView:didUpdate:userLocation\n         mapView.delegate = context.coordinator\n-\n+        mapView.showsUserLocation = true",
        "comment_created_at": "2024-05-16T16:35:00+00:00",
        "comment_author": "voncannon",
        "comment_body": "I have tested it, but I see your point. I will double check and I think this will come down to what is in the host apps Info.plist. If the host app by default has `nslocationdefaultaccuracyreduced` set.\r\n\r\nhttps://developer.apple.com/documentation/bundleresources/information_property_list/nslocationdefaultaccuracyreduced\r\n\r\nThis example was originally created by @louwers , but maybe we should just change the example from requesting temporary precise location access we instead change this example to requesting and showing their location on the map\r\n\r\nLet me know @louwers ",
        "pr_file_module": null
      },
      {
        "comment_id": "1606770198",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2393,
        "pr_file": "platform/ios/app-swift/Sources/LocationPrivacyExample.swift",
        "discussion_id": "1598700290",
        "commented_code": "@@ -9,75 +9,114 @@ enum LocationAccuracyState {\n     case fullAccuracy\n }\n \n-class Coordinator: NSObject, MLNMapViewDelegate {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-    var pannedToUserLocation = false\n-\n-    init(mapView: Binding<MLNMapView>, locationAccuracy: Binding<LocationAccuracyState>) {\n-        _mapView = mapView\n-        _locationAccuracy = locationAccuracy\n+class MapViewModel: NSObject, ObservableObject {\n+    // Weak because the coordinator has a strong reference to the view model\n+    weak var mapCoordinater: MapLibreRepresentableCoordinator?\n+    @MainActor @Published var locationAccuracy: LocationAccuracyState = .unknown\n+\n+    @MainActor func requestTemporaryLocationAuthorization() {\n+        print(\"Requesting precice location\")\n+\n+        switch locationAccuracy {\n+        case .reducedAccuracy:\n+            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\n+            mapCoordinater?.mapView?.locationManager.requestTemporaryFullAccuracyAuthorization!(withPurposeKey: purposeKey)\n+        default:\n+            break\n+        }\n     }\n+}\n \n-    func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n+class MapLibreRepresentableCoordinator: NSObject, MLNMapViewDelegate {\n+    private var mapViewModel: MapViewModel\n+    // Weak reference because SwiftUI owns the strong reference\n+    private(set) weak var mapView: MLNMapView?\n+    private var pannedToUserLocation = false\n+\n+    init(mapViewModel: MapViewModel) {\n+        self.mapViewModel = mapViewModel\n+        super.init()\n+        self.mapViewModel.mapCoordinater = self\n+    }\n+\n+    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n         guard let accuracySetting = manager.accuracyAuthorization else {\n             return\n         }\n \n         switch accuracySetting() {\n         case .fullAccuracy:\n-            locationAccuracy = .fullAccuracy\n+            mapViewModel.locationAccuracy = .fullAccuracy\n         case .reducedAccuracy:\n-            locationAccuracy = .reducedAccuracy\n+            mapViewModel.locationAccuracy = .reducedAccuracy\n         @unknown default:\n-            locationAccuracy = .unknown\n+            mapViewModel.locationAccuracy = .unknown\n         }\n     }\n \n     // when a location is available for the first time, we fly to it\n     func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {\n-        if pannedToUserLocation {\n-            return\n-        }\n+        guard !pannedToUserLocation else { return }\n         guard let userLocation = mapView.userLocation else {\n             print(\"User location is currently not available.\")\n             return\n         }\n         mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))\n+        pannedToUserLocation = true\n+    }\n+\n+    func mapView(_ mapView: MLNMapView, didFinishLoading _: MLNStyle) {\n+        if self.mapView != mapView {\n+            self.mapView = mapView\n+        }\n+    }\n+\n+    func mapViewDidFinishLoadingMap(_ mapView: MLNMapView) {\n+        if self.mapView != mapView {\n+            self.mapView = mapView\n+        }\n+    }\n+\n+    deinit {\n+        // Ensure the coordinator is deallocated if MapLibreViewRepresentable.dismantleUIView was called\n     }\n }\n \n-struct LocationPrivacyExample: UIViewRepresentable {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n+struct MapLibreViewRepresentable: UIViewRepresentable {\n+    let mapViewModel: MapViewModel\n \n-    func makeCoordinator() -> Coordinator {\n-        Coordinator(mapView: $mapView, locationAccuracy: $locationAccuracy)\n+    func makeCoordinator() -> MapLibreRepresentableCoordinator {\n+        MapLibreRepresentableCoordinator(mapViewModel: mapViewModel)\n     }\n \n     func makeUIView(context: Context) -> MLNMapView {\n         let mapView = MLNMapView()\n-        mapView.showsUserLocation = true\n+        // Set delegate first, otherwise delegate callbacks can be missed. For example, setting showsUserLocation calls mapView:didUpdate:userLocation\n         mapView.delegate = context.coordinator\n-\n+        mapView.showsUserLocation = true",
        "comment_created_at": "2024-05-20T13:17:54+00:00",
        "comment_author": "voncannon",
        "comment_body": "I added `NSLocationDefaultAccuracyReduced` to this example in the setup steps to make this example clear. This fixes the scenario where the user might inadvertently allow precise location on the initial pop-up and thus this example wouldn't make sense. ",
        "pr_file_module": null
      }
    ]
  }
]