[
  {
    "discussion_id": "2057130001",
    "pr_number": 3409,
    "pr_file": "include/mbgl/util/action_journal.hpp",
    "created_at": "2025-04-24T00:58:41+00:00",
    "commented_code": "+#pragma once\n+\n+#include <mbgl/map/map.hpp>\n+#include <string>\n+#include <vector>\n+#include <memory>\n+#include <filesystem>\n+\n+namespace mbgl {\n+\n+namespace util {\n+\n+class ActionJournalOptions;\n+\n+class ActionJournal {",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "2057130001",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3409,
        "pr_file": "include/mbgl/util/action_journal.hpp",
        "discussion_id": "2057130001",
        "commented_code": "@@ -0,0 +1,28 @@\n+#pragma once\n+\n+#include <mbgl/map/map.hpp>\n+#include <string>\n+#include <vector>\n+#include <memory>\n+#include <filesystem>\n+\n+namespace mbgl {\n+\n+namespace util {\n+\n+class ActionJournalOptions;\n+\n+class ActionJournal {",
        "comment_created_at": "2025-04-24T00:58:41+00:00",
        "comment_author": "louwers",
        "comment_body": "Public APIs could use some docstrings. Adding them to private APIs also does not hurt.",
        "pr_file_module": null
      },
      {
        "comment_id": "2109163598",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3409,
        "pr_file": "include/mbgl/util/action_journal.hpp",
        "discussion_id": "2057130001",
        "commented_code": "@@ -0,0 +1,28 @@\n+#pragma once\n+\n+#include <mbgl/map/map.hpp>\n+#include <string>\n+#include <vector>\n+#include <memory>\n+#include <filesystem>\n+\n+namespace mbgl {\n+\n+namespace util {\n+\n+class ActionJournalOptions;\n+\n+class ActionJournal {",
        "comment_created_at": "2025-05-27T13:14:27+00:00",
        "comment_author": "adrian-cojocaru",
        "comment_body": "Added string for the public api (+ some comments for private methods)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1162447000",
    "pr_number": 991,
    "pr_file": "include/mbgl/util/overloaded.hpp",
    "created_at": "2023-04-11T08:05:56+00:00",
    "commented_code": "+#pragma once\n+\n+namespace mbgl\n+{\n+namespace util\n+{\n+    \n+template <typename... Ts>",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1162447000",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 991,
        "pr_file": "include/mbgl/util/overloaded.hpp",
        "discussion_id": "1162447000",
        "commented_code": "@@ -0,0 +1,17 @@\n+#pragma once\n+\n+namespace mbgl\n+{\n+namespace util\n+{\n+    \n+template <typename... Ts>",
        "comment_created_at": "2023-04-11T08:05:56+00:00",
        "comment_author": "louwers",
        "comment_body": "Everything in `include` will become part of our public API. Is this intended? Can you add some triple slash comments to indicate what this template struct is for?",
        "pr_file_module": null
      },
      {
        "comment_id": "1162482897",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 991,
        "pr_file": "include/mbgl/util/overloaded.hpp",
        "discussion_id": "1162447000",
        "commented_code": "@@ -0,0 +1,17 @@\n+#pragma once\n+\n+namespace mbgl\n+{\n+namespace util\n+{\n+    \n+template <typename... Ts>",
        "comment_created_at": "2023-04-11T08:37:36+00:00",
        "comment_author": "bencsikandrei",
        "comment_body": "on it",
        "pr_file_module": null
      },
      {
        "comment_id": "1163012714",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 991,
        "pr_file": "include/mbgl/util/overloaded.hpp",
        "discussion_id": "1162447000",
        "commented_code": "@@ -0,0 +1,17 @@\n+#pragma once\n+\n+namespace mbgl\n+{\n+namespace util\n+{\n+    \n+template <typename... Ts>",
        "comment_created_at": "2023-04-11T15:43:53+00:00",
        "comment_author": "louwers",
        "comment_body": "It may make sense to make it internal, in that case you can move it to `/src`.\r\n\r\nSome comments (and a link to cppreference) would still be a good idea in that case.",
        "pr_file_module": null
      },
      {
        "comment_id": "1163016853",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 991,
        "pr_file": "include/mbgl/util/overloaded.hpp",
        "discussion_id": "1162447000",
        "commented_code": "@@ -0,0 +1,17 @@\n+#pragma once\n+\n+namespace mbgl\n+{\n+namespace util\n+{\n+    \n+template <typename... Ts>",
        "comment_created_at": "2023-04-11T15:46:43+00:00",
        "comment_author": "bencsikandrei",
        "comment_body": "agreed! I believe there's not need for it to be public but I have to check",
        "pr_file_module": null
      },
      {
        "comment_id": "1167218054",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 991,
        "pr_file": "include/mbgl/util/overloaded.hpp",
        "discussion_id": "1162447000",
        "commented_code": "@@ -0,0 +1,17 @@\n+#pragma once\n+\n+namespace mbgl\n+{\n+namespace util\n+{\n+    \n+template <typename... Ts>",
        "comment_created_at": "2023-04-14T19:39:53+00:00",
        "comment_author": "bencsikandrei",
        "comment_body": "done, I moved it to src/mbgl/util",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1739026226",
    "pr_number": 2694,
    "pr_file": "include/mbgl/tile/tile_operation.hpp",
    "created_at": "2024-08-30T16:04:34+00:00",
    "commented_code": "+#pragma once\n+#include <cstdint>\n+\n+namespace mbgl {\n+enum class TileOperation : uint8_t {",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1739026226",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2694,
        "pr_file": "include/mbgl/tile/tile_operation.hpp",
        "discussion_id": "1739026226",
        "commented_code": "@@ -0,0 +1,16 @@\n+#pragma once\n+#include <cstdint>\n+\n+namespace mbgl {\n+enum class TileOperation : uint8_t {",
        "comment_created_at": "2024-08-30T16:04:34+00:00",
        "comment_author": "louwers",
        "comment_body": "These could use some Doxygen comments.\r\n\r\n```\r\n    RequestedFromCache ///< like this\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1269695115",
    "pr_number": 1355,
    "pr_file": "include/mbgl/gfx/types.hpp",
    "created_at": "2023-07-20T16:19:47+00:00",
    "commented_code": "+#pragma once\n+\n+#include <mbgl/gfx/gfx_types.hpp>\n+\n+#include <cstdint>\n+\n+namespace mbgl {\n+namespace gfx {\n+\n+enum class ColorBlendEquationType : uint8_t {\n+    Add,\n+    Subtract,\n+    ReverseSubtract,\n+};\n+\n+enum class ColorBlendFactorType : uint8_t {",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1269695115",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1355,
        "pr_file": "include/mbgl/gfx/types.hpp",
        "discussion_id": "1269695115",
        "commented_code": "@@ -0,0 +1,124 @@\n+#pragma once\n+\n+#include <mbgl/gfx/gfx_types.hpp>\n+\n+#include <cstdint>\n+\n+namespace mbgl {\n+namespace gfx {\n+\n+enum class ColorBlendEquationType : uint8_t {\n+    Add,\n+    Subtract,\n+    ReverseSubtract,\n+};\n+\n+enum class ColorBlendFactorType : uint8_t {",
        "comment_created_at": "2023-07-20T16:19:47+00:00",
        "comment_author": "louwers",
        "comment_body": "Suggestion: add a triple slash comment to each enum in the PR, describing what it does.\r\n\r\nIt is also possible to add descriptions to enum values.\r\n\r\n````\r\n/// This is an enum class\r\nenum class fooenum {\r\n    FOO, ///< this is foo\r\n    BAR, ///< this is bar\r\n};\r\n````",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1269699422",
    "pr_number": 1355,
    "pr_file": "include/mbgl/gfx/vertex_attribute.hpp",
    "created_at": "2023-07-20T16:23:58+00:00",
    "commented_code": "+#pragma once\n+\n+#include <mbgl/gfx/gfx_types.hpp>\n+#include <mbgl/renderer/paint_property_binder.hpp>\n+\n+#include <algorithm>\n+#include <array>\n+#include <cstdint>\n+#include <functional>\n+#include <memory>\n+#include <string>\n+#include <unordered_map>\n+#include <variant>\n+#include <vector>\n+\n+namespace mbgl {\n+\n+using mat2 = std::array<double, 2 * 2>;\n+using mat3 = std::array<double, 3 * 3>;\n+using mat4 = std::array<double, 4 * 4>;\n+\n+namespace gfx {\n+\n+class ShaderProgramBase;\n+class VertexVectorBase;\n+\n+class VertexAttribute {",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1269699422",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1355,
        "pr_file": "include/mbgl/gfx/vertex_attribute.hpp",
        "discussion_id": "1269699422",
        "commented_code": "@@ -0,0 +1,359 @@\n+#pragma once\n+\n+#include <mbgl/gfx/gfx_types.hpp>\n+#include <mbgl/renderer/paint_property_binder.hpp>\n+\n+#include <algorithm>\n+#include <array>\n+#include <cstdint>\n+#include <functional>\n+#include <memory>\n+#include <string>\n+#include <unordered_map>\n+#include <variant>\n+#include <vector>\n+\n+namespace mbgl {\n+\n+using mat2 = std::array<double, 2 * 2>;\n+using mat3 = std::array<double, 3 * 3>;\n+using mat4 = std::array<double, 4 * 4>;\n+\n+namespace gfx {\n+\n+class ShaderProgramBase;\n+class VertexVectorBase;\n+\n+class VertexAttribute {",
        "comment_created_at": "2023-07-20T16:23:58+00:00",
        "comment_author": "louwers",
        "comment_body": "A documentation comment should be added to this class.\r\n\r\nSome (public) methods including the constructors might also benefit from documentation comments, although they are relatively straightforward.",
        "pr_file_module": null
      }
    ]
  }
]