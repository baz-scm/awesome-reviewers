[
  {
    "discussion_id": "2107547404",
    "pr_number": 3430,
    "pr_file": "platform/darwin/src/MLNPluginLayer.h",
    "created_at": "2025-05-26T15:13:35+00:00",
    "commented_code": "+//\n+//  MLNPluginLayer.h\n+//  App\n+//\n+//  Created by Malcolm Toon on 4/23/25.\n+//\n+\n+#import <Foundation/Foundation.h>\n+#import <Metal/Metal.h>\n+#import <UIKit/UIKit.h>\n+#import \"MLNFoundation.h\"\n+#import \"MLNGeometry.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+typedef enum {\n+  MLNPluginLayerPropertyTypeUnknown,\n+  MLNPluginLayerPropertyTypeSingleFloat,\n+  MLNPluginLayerPropertyTypeColor\n+} MLNPluginLayerPropertyType;\n+\n+MLN_EXPORT\n+@interface MLNPluginLayerProperty : NSObject\n+\n++ (MLNPluginLayerProperty *)propertyWithName:(NSString *)propertyName\n+                                propertyType:(MLNPluginLayerPropertyType)propertyType\n+                                defaultValue:(id)defaultValue;\n+\n+// The name of the property\n+@property NSString *propertyName;\n+\n+// The type of property\n+@property MLNPluginLayerPropertyType propertyType;\n+\n+// Single float default value\n+@property float singleFloatDefaultValue;\n+\n+// Color default value\n+@property UIColor *colorDefaultValue;\n+\n+@end\n+\n+typedef enum {\n+  MLNPluginLayerTileKindGeometry,\n+  MLNPluginLayerTileKindRaster,\n+  MLNPluginLayerTileKindRasterDEM,\n+  MLNPluginLayerTileKindNotRequired\n+} MLNPluginLayerTileKind;\n+\n+MLN_EXPORT\n+@interface MLNPluginLayerCapabilities : NSObject\n+\n+@property NSString *layerID;\n+@property BOOL requiresSource;\n+@property BOOL requiresPass3D;\n+@property BOOL requiresLayout;\n+@property BOOL requiresRenderingFadingTiles;\n+@property BOOL requiresCrossTileIndex;\n+@property MLNPluginLayerTileKind tileKind;\n+\n+//! This is a list of layer properties that this layer supports.\n+@property NSArray<MLNPluginLayerProperty *> *layerProperties;\n+\n+@end\n+\n+@class MLNMapView;\n+\n+// Copied initially from MLNStyleLayerDrawingContext.  Decided to copy instead of use since we\n+// might add additional properties here",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "2107547404",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3430,
        "pr_file": "platform/darwin/src/MLNPluginLayer.h",
        "discussion_id": "2107547404",
        "commented_code": "@@ -0,0 +1,112 @@\n+//\n+//  MLNPluginLayer.h\n+//  App\n+//\n+//  Created by Malcolm Toon on 4/23/25.\n+//\n+\n+#import <Foundation/Foundation.h>\n+#import <Metal/Metal.h>\n+#import <UIKit/UIKit.h>\n+#import \"MLNFoundation.h\"\n+#import \"MLNGeometry.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+typedef enum {\n+  MLNPluginLayerPropertyTypeUnknown,\n+  MLNPluginLayerPropertyTypeSingleFloat,\n+  MLNPluginLayerPropertyTypeColor\n+} MLNPluginLayerPropertyType;\n+\n+MLN_EXPORT\n+@interface MLNPluginLayerProperty : NSObject\n+\n++ (MLNPluginLayerProperty *)propertyWithName:(NSString *)propertyName\n+                                propertyType:(MLNPluginLayerPropertyType)propertyType\n+                                defaultValue:(id)defaultValue;\n+\n+// The name of the property\n+@property NSString *propertyName;\n+\n+// The type of property\n+@property MLNPluginLayerPropertyType propertyType;\n+\n+// Single float default value\n+@property float singleFloatDefaultValue;\n+\n+// Color default value\n+@property UIColor *colorDefaultValue;\n+\n+@end\n+\n+typedef enum {\n+  MLNPluginLayerTileKindGeometry,\n+  MLNPluginLayerTileKindRaster,\n+  MLNPluginLayerTileKindRasterDEM,\n+  MLNPluginLayerTileKindNotRequired\n+} MLNPluginLayerTileKind;\n+\n+MLN_EXPORT\n+@interface MLNPluginLayerCapabilities : NSObject\n+\n+@property NSString *layerID;\n+@property BOOL requiresSource;\n+@property BOOL requiresPass3D;\n+@property BOOL requiresLayout;\n+@property BOOL requiresRenderingFadingTiles;\n+@property BOOL requiresCrossTileIndex;\n+@property MLNPluginLayerTileKind tileKind;\n+\n+//! This is a list of layer properties that this layer supports.\n+@property NSArray<MLNPluginLayerProperty *> *layerProperties;\n+\n+@end\n+\n+@class MLNMapView;\n+\n+// Copied initially from MLNStyleLayerDrawingContext.  Decided to copy instead of use since we\n+// might add additional properties here",
        "comment_created_at": "2025-05-26T15:13:35+00:00",
        "comment_author": "louwers",
        "comment_body": "What kind of extra properties would be relevant for `MLNPluginLayerDrawingContext` but not `MLNStyleLayerDrawingContext`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2109583817",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3430,
        "pr_file": "platform/darwin/src/MLNPluginLayer.h",
        "discussion_id": "2107547404",
        "commented_code": "@@ -0,0 +1,112 @@\n+//\n+//  MLNPluginLayer.h\n+//  App\n+//\n+//  Created by Malcolm Toon on 4/23/25.\n+//\n+\n+#import <Foundation/Foundation.h>\n+#import <Metal/Metal.h>\n+#import <UIKit/UIKit.h>\n+#import \"MLNFoundation.h\"\n+#import \"MLNGeometry.h\"\n+\n+NS_ASSUME_NONNULL_BEGIN\n+\n+typedef enum {\n+  MLNPluginLayerPropertyTypeUnknown,\n+  MLNPluginLayerPropertyTypeSingleFloat,\n+  MLNPluginLayerPropertyTypeColor\n+} MLNPluginLayerPropertyType;\n+\n+MLN_EXPORT\n+@interface MLNPluginLayerProperty : NSObject\n+\n++ (MLNPluginLayerProperty *)propertyWithName:(NSString *)propertyName\n+                                propertyType:(MLNPluginLayerPropertyType)propertyType\n+                                defaultValue:(id)defaultValue;\n+\n+// The name of the property\n+@property NSString *propertyName;\n+\n+// The type of property\n+@property MLNPluginLayerPropertyType propertyType;\n+\n+// Single float default value\n+@property float singleFloatDefaultValue;\n+\n+// Color default value\n+@property UIColor *colorDefaultValue;\n+\n+@end\n+\n+typedef enum {\n+  MLNPluginLayerTileKindGeometry,\n+  MLNPluginLayerTileKindRaster,\n+  MLNPluginLayerTileKindRasterDEM,\n+  MLNPluginLayerTileKindNotRequired\n+} MLNPluginLayerTileKind;\n+\n+MLN_EXPORT\n+@interface MLNPluginLayerCapabilities : NSObject\n+\n+@property NSString *layerID;\n+@property BOOL requiresSource;\n+@property BOOL requiresPass3D;\n+@property BOOL requiresLayout;\n+@property BOOL requiresRenderingFadingTiles;\n+@property BOOL requiresCrossTileIndex;\n+@property MLNPluginLayerTileKind tileKind;\n+\n+//! This is a list of layer properties that this layer supports.\n+@property NSArray<MLNPluginLayerProperty *> *layerProperties;\n+\n+@end\n+\n+@class MLNMapView;\n+\n+// Copied initially from MLNStyleLayerDrawingContext.  Decided to copy instead of use since we\n+// might add additional properties here",
        "comment_created_at": "2025-05-27T15:54:12+00:00",
        "comment_author": "AtlasProgramming",
        "comment_body": "Good question.  Mainly just trying to keep the footprint of the custom layer and the plug in layer from overlapping too much since they provide different functionality.  IOW, once we add things like shadow maps, possibly animation timing, expose more of the core to the plugin API, would add it here and it might not be applicable to the custom layer.  ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1373247882",
    "pr_number": 1754,
    "pr_file": "include/mbgl/style/layers/custom_drawable_layer.hpp",
    "created_at": "2023-10-26T14:10:43+00:00",
    "commented_code": "#include <mbgl/renderer/update_parameters.hpp>\n #include <mbgl/renderer/render_tree.hpp>\n #include <mbgl/renderer/change_request.hpp>\n+#include <mbgl/gfx/drawable_builder.hpp>\n \n #include <array>\n #include <memory>\n+#include <optional>\n \n namespace mbgl {\n namespace style {\n \n class CustomDrawableLayerHost {\n+public:\n+    class Interface;\n+\n public:\n     virtual ~CustomDrawableLayerHost() = default;\n \n     virtual void initialize() = 0;\n \n-    virtual void update(RenderLayer& proxyLayer,\n-                        gfx::ShaderRegistry& shaders,\n-                        gfx::Context& context,\n-                        const TransformState& state,\n-                        const std::shared_ptr<UpdateParameters>&,\n-                        const RenderTree& renderTree,\n-                        UniqueChangeRequestVec& changes) = 0;\n+    virtual void update(Interface& interface) = 0;\n \n     virtual void deinitialize() = 0;\n };\n \n+class CustomDrawableLayerHost::Interface {\n+public:\n+    /// @brief Construct a new Interface object (internal core use only)\n+    Interface(RenderLayer& layer,\n+              LayerGroupBasePtr& layerGroup,\n+              gfx::ShaderRegistry& shaders,\n+              gfx::Context& context,\n+              const TransformState& state,\n+              const std::shared_ptr<UpdateParameters>& updateParameters,\n+              const RenderTree& renderTree,\n+              UniqueChangeRequestVec& changes);\n+    /**\n+     * @brief Get the drawable count\n+     *\n+     * @return std::size_t\n+     */\n+    std::size_t getDrawableCount() const;\n+\n+    /**\n+     * @brief Set the Tile ID\n+     *\n+     * @param tileID\n+     */\n+    void setTileID(OverscaledTileID tileID);\n+\n+    void setColor(Color color);\n+    void setBlur(float blur);",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1373247882",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1754,
        "pr_file": "include/mbgl/style/layers/custom_drawable_layer.hpp",
        "discussion_id": "1373247882",
        "commented_code": "@@ -6,30 +6,101 @@\n #include <mbgl/renderer/update_parameters.hpp>\n #include <mbgl/renderer/render_tree.hpp>\n #include <mbgl/renderer/change_request.hpp>\n+#include <mbgl/gfx/drawable_builder.hpp>\n \n #include <array>\n #include <memory>\n+#include <optional>\n \n namespace mbgl {\n namespace style {\n \n class CustomDrawableLayerHost {\n+public:\n+    class Interface;\n+\n public:\n     virtual ~CustomDrawableLayerHost() = default;\n \n     virtual void initialize() = 0;\n \n-    virtual void update(RenderLayer& proxyLayer,\n-                        gfx::ShaderRegistry& shaders,\n-                        gfx::Context& context,\n-                        const TransformState& state,\n-                        const std::shared_ptr<UpdateParameters>&,\n-                        const RenderTree& renderTree,\n-                        UniqueChangeRequestVec& changes) = 0;\n+    virtual void update(Interface& interface) = 0;\n \n     virtual void deinitialize() = 0;\n };\n \n+class CustomDrawableLayerHost::Interface {\n+public:\n+    /// @brief Construct a new Interface object (internal core use only)\n+    Interface(RenderLayer& layer,\n+              LayerGroupBasePtr& layerGroup,\n+              gfx::ShaderRegistry& shaders,\n+              gfx::Context& context,\n+              const TransformState& state,\n+              const std::shared_ptr<UpdateParameters>& updateParameters,\n+              const RenderTree& renderTree,\n+              UniqueChangeRequestVec& changes);\n+    /**\n+     * @brief Get the drawable count\n+     *\n+     * @return std::size_t\n+     */\n+    std::size_t getDrawableCount() const;\n+\n+    /**\n+     * @brief Set the Tile ID\n+     *\n+     * @param tileID\n+     */\n+    void setTileID(OverscaledTileID tileID);\n+\n+    void setColor(Color color);\n+    void setBlur(float blur);",
        "comment_created_at": "2023-10-26T14:10:43+00:00",
        "comment_author": "mwilsnd",
        "comment_body": "Is the intention here to only do polylines? I think this could be made a bit more clear what \"mode\" we're in, perhaps break these parameters out to a struct and pass it to `addPolyline` instead of having them here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1373277463",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1754,
        "pr_file": "include/mbgl/style/layers/custom_drawable_layer.hpp",
        "discussion_id": "1373247882",
        "commented_code": "@@ -6,30 +6,101 @@\n #include <mbgl/renderer/update_parameters.hpp>\n #include <mbgl/renderer/render_tree.hpp>\n #include <mbgl/renderer/change_request.hpp>\n+#include <mbgl/gfx/drawable_builder.hpp>\n \n #include <array>\n #include <memory>\n+#include <optional>\n \n namespace mbgl {\n namespace style {\n \n class CustomDrawableLayerHost {\n+public:\n+    class Interface;\n+\n public:\n     virtual ~CustomDrawableLayerHost() = default;\n \n     virtual void initialize() = 0;\n \n-    virtual void update(RenderLayer& proxyLayer,\n-                        gfx::ShaderRegistry& shaders,\n-                        gfx::Context& context,\n-                        const TransformState& state,\n-                        const std::shared_ptr<UpdateParameters>&,\n-                        const RenderTree& renderTree,\n-                        UniqueChangeRequestVec& changes) = 0;\n+    virtual void update(Interface& interface) = 0;\n \n     virtual void deinitialize() = 0;\n };\n \n+class CustomDrawableLayerHost::Interface {\n+public:\n+    /// @brief Construct a new Interface object (internal core use only)\n+    Interface(RenderLayer& layer,\n+              LayerGroupBasePtr& layerGroup,\n+              gfx::ShaderRegistry& shaders,\n+              gfx::Context& context,\n+              const TransformState& state,\n+              const std::shared_ptr<UpdateParameters>& updateParameters,\n+              const RenderTree& renderTree,\n+              UniqueChangeRequestVec& changes);\n+    /**\n+     * @brief Get the drawable count\n+     *\n+     * @return std::size_t\n+     */\n+    std::size_t getDrawableCount() const;\n+\n+    /**\n+     * @brief Set the Tile ID\n+     *\n+     * @param tileID\n+     */\n+    void setTileID(OverscaledTileID tileID);\n+\n+    void setColor(Color color);\n+    void setBlur(float blur);",
        "comment_created_at": "2023-10-26T14:30:23+00:00",
        "comment_author": "stefankarschti",
        "comment_body": "Polylines and other primitives could share some properties ([example: Fill picks up Color and Opacity](https://github.com/stefankarschti/maplibre-native/blob/a6876cad7dabdeef7c6e5598b852e62d43b5824e/platform/darwin/app/ExampleCustomDrawableStyleLayer.mm#L52C1-L132C6))\r\n\r\nI agree that I clear mapping should be done, if a property is only applicable to lines we should call it `*LineProperty', for example.",
        "pr_file_module": null
      },
      {
        "comment_id": "1373307384",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1754,
        "pr_file": "include/mbgl/style/layers/custom_drawable_layer.hpp",
        "discussion_id": "1373247882",
        "commented_code": "@@ -6,30 +6,101 @@\n #include <mbgl/renderer/update_parameters.hpp>\n #include <mbgl/renderer/render_tree.hpp>\n #include <mbgl/renderer/change_request.hpp>\n+#include <mbgl/gfx/drawable_builder.hpp>\n \n #include <array>\n #include <memory>\n+#include <optional>\n \n namespace mbgl {\n namespace style {\n \n class CustomDrawableLayerHost {\n+public:\n+    class Interface;\n+\n public:\n     virtual ~CustomDrawableLayerHost() = default;\n \n     virtual void initialize() = 0;\n \n-    virtual void update(RenderLayer& proxyLayer,\n-                        gfx::ShaderRegistry& shaders,\n-                        gfx::Context& context,\n-                        const TransformState& state,\n-                        const std::shared_ptr<UpdateParameters>&,\n-                        const RenderTree& renderTree,\n-                        UniqueChangeRequestVec& changes) = 0;\n+    virtual void update(Interface& interface) = 0;\n \n     virtual void deinitialize() = 0;\n };\n \n+class CustomDrawableLayerHost::Interface {\n+public:\n+    /// @brief Construct a new Interface object (internal core use only)\n+    Interface(RenderLayer& layer,\n+              LayerGroupBasePtr& layerGroup,\n+              gfx::ShaderRegistry& shaders,\n+              gfx::Context& context,\n+              const TransformState& state,\n+              const std::shared_ptr<UpdateParameters>& updateParameters,\n+              const RenderTree& renderTree,\n+              UniqueChangeRequestVec& changes);\n+    /**\n+     * @brief Get the drawable count\n+     *\n+     * @return std::size_t\n+     */\n+    std::size_t getDrawableCount() const;\n+\n+    /**\n+     * @brief Set the Tile ID\n+     *\n+     * @param tileID\n+     */\n+    void setTileID(OverscaledTileID tileID);\n+\n+    void setColor(Color color);\n+    void setBlur(float blur);",
        "comment_created_at": "2023-10-26T14:50:03+00:00",
        "comment_author": "stefankarschti",
        "comment_body": "I see your point, we could have `Interface::LineOptions` and `Interface::FillOptions` as separate structures that contain all the related properties of a primitive.\r\nFuture extensions could be `Interface::SymbolOptions` with a corresponding method `addSymbol`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1373376926",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1754,
        "pr_file": "include/mbgl/style/layers/custom_drawable_layer.hpp",
        "discussion_id": "1373247882",
        "commented_code": "@@ -6,30 +6,101 @@\n #include <mbgl/renderer/update_parameters.hpp>\n #include <mbgl/renderer/render_tree.hpp>\n #include <mbgl/renderer/change_request.hpp>\n+#include <mbgl/gfx/drawable_builder.hpp>\n \n #include <array>\n #include <memory>\n+#include <optional>\n \n namespace mbgl {\n namespace style {\n \n class CustomDrawableLayerHost {\n+public:\n+    class Interface;\n+\n public:\n     virtual ~CustomDrawableLayerHost() = default;\n \n     virtual void initialize() = 0;\n \n-    virtual void update(RenderLayer& proxyLayer,\n-                        gfx::ShaderRegistry& shaders,\n-                        gfx::Context& context,\n-                        const TransformState& state,\n-                        const std::shared_ptr<UpdateParameters>&,\n-                        const RenderTree& renderTree,\n-                        UniqueChangeRequestVec& changes) = 0;\n+    virtual void update(Interface& interface) = 0;\n \n     virtual void deinitialize() = 0;\n };\n \n+class CustomDrawableLayerHost::Interface {\n+public:\n+    /// @brief Construct a new Interface object (internal core use only)\n+    Interface(RenderLayer& layer,\n+              LayerGroupBasePtr& layerGroup,\n+              gfx::ShaderRegistry& shaders,\n+              gfx::Context& context,\n+              const TransformState& state,\n+              const std::shared_ptr<UpdateParameters>& updateParameters,\n+              const RenderTree& renderTree,\n+              UniqueChangeRequestVec& changes);\n+    /**\n+     * @brief Get the drawable count\n+     *\n+     * @return std::size_t\n+     */\n+    std::size_t getDrawableCount() const;\n+\n+    /**\n+     * @brief Set the Tile ID\n+     *\n+     * @param tileID\n+     */\n+    void setTileID(OverscaledTileID tileID);\n+\n+    void setColor(Color color);\n+    void setBlur(float blur);",
        "comment_created_at": "2023-10-26T15:39:08+00:00",
        "comment_author": "stefankarschti",
        "comment_body": "in regards to \"mode\", the interface will allow mixing different primitive types transparently. new drawables will be generated and tweakers attached when primitive type or properties change.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2057129095",
    "pr_number": 3409,
    "pr_file": "include/mbgl/util/action_journal_options.hpp",
    "created_at": "2025-04-24T00:57:51+00:00",
    "commented_code": "+#pragma once\n+\n+#include <string>\n+\n+namespace mbgl {\n+\n+namespace util {\n+\n+class ActionJournalOptions {\n+public:\n+    ActionJournalOptions() = default;\n+    ~ActionJournalOptions() = default;\n+\n+    ActionJournalOptions& enable(bool value) {",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "2057129095",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3409,
        "pr_file": "include/mbgl/util/action_journal_options.hpp",
        "discussion_id": "2057129095",
        "commented_code": "@@ -0,0 +1,53 @@\n+#pragma once\n+\n+#include <string>\n+\n+namespace mbgl {\n+\n+namespace util {\n+\n+class ActionJournalOptions {\n+public:\n+    ActionJournalOptions() = default;\n+    ~ActionJournalOptions() = default;\n+\n+    ActionJournalOptions& enable(bool value) {",
        "comment_created_at": "2025-04-24T00:57:51+00:00",
        "comment_author": "louwers",
        "comment_body": "Honestly I would make `ActionJournalOptions` objects immutable if possible. You could return a new `ActionJournalOptions` if you think that is a good API.",
        "pr_file_module": null
      },
      {
        "comment_id": "2058156335",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3409,
        "pr_file": "include/mbgl/util/action_journal_options.hpp",
        "discussion_id": "2057129095",
        "commented_code": "@@ -0,0 +1,53 @@\n+#pragma once\n+\n+#include <string>\n+\n+namespace mbgl {\n+\n+namespace util {\n+\n+class ActionJournalOptions {\n+public:\n+    ActionJournalOptions() = default;\n+    ~ActionJournalOptions() = default;\n+\n+    ActionJournalOptions& enable(bool value) {",
        "comment_created_at": "2025-04-24T11:24:00+00:00",
        "comment_author": "adrian-cojocaru",
        "comment_body": "I've been mirroring `MapOptions` and `ClientOptions` since all of them are passed in the same place and to be consistent with the different types of options.",
        "pr_file_module": null
      }
    ]
  }
]