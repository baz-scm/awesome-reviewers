[
  {
    "discussion_id": "2143177235",
    "pr_number": 3547,
    "pr_file": "src/mbgl/style/layers/custom_drawable_layer.cpp",
    "created_at": "2025-06-12T16:25:44+00:00",
    "commented_code": "switch (shaderType) {\n         case LineShaderType::Classic: {\n-            // TODO: build classic polyline with Geo coordinates\n-            return util::SimpleIdentity::Empty;\n+            // build classic polyline with Geo coordinates",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "2143177235",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3547,
        "pr_file": "src/mbgl/style/layers/custom_drawable_layer.cpp",
        "discussion_id": "2143177235",
        "commented_code": "@@ -519,8 +519,23 @@ util::SimpleIdentity CustomDrawableLayerHost::Interface::addPolyline(const LineS\n \n     switch (shaderType) {\n         case LineShaderType::Classic: {\n-            // TODO: build classic polyline with Geo coordinates\n-            return util::SimpleIdentity::Empty;\n+            // build classic polyline with Geo coordinates",
        "comment_created_at": "2025-06-12T16:25:44+00:00",
        "comment_author": "stefankarschti",
        "comment_body": "This was left out because the transformation matrixes don't have enough precision at global scale with the standard shader, but it's handled in the Wide Vector.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2143185843",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3547,
        "pr_file": "src/mbgl/style/layers/custom_drawable_layer.cpp",
        "discussion_id": "2143177235",
        "commented_code": "@@ -519,8 +519,23 @@ util::SimpleIdentity CustomDrawableLayerHost::Interface::addPolyline(const LineS\n \n     switch (shaderType) {\n         case LineShaderType::Classic: {\n-            // TODO: build classic polyline with Geo coordinates\n-            return util::SimpleIdentity::Empty;\n+            // build classic polyline with Geo coordinates",
        "comment_created_at": "2025-06-12T16:30:54+00:00",
        "comment_author": "stefankarschti",
        "comment_body": "check out the usage of diff matrixes to enhance precision in wide vector metal shader\r\nhttps://github.com/maplibre/maplibre-native/blob/1e78e146f1066320f195496ce9f43825f26488b6/include/mbgl/shaders/mtl/widevector.hpp#L59",
        "pr_file_module": null
      },
      {
        "comment_id": "2143190525",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3547,
        "pr_file": "src/mbgl/style/layers/custom_drawable_layer.cpp",
        "discussion_id": "2143177235",
        "commented_code": "@@ -519,8 +519,23 @@ util::SimpleIdentity CustomDrawableLayerHost::Interface::addPolyline(const LineS\n \n     switch (shaderType) {\n         case LineShaderType::Classic: {\n-            // TODO: build classic polyline with Geo coordinates\n-            return util::SimpleIdentity::Empty;\n+            // build classic polyline with Geo coordinates",
        "comment_created_at": "2025-06-12T16:33:20+00:00",
        "comment_author": "adrian-cojocaru",
        "comment_body": "This is mostly a backup for platforms/backends that don't have WideVector implementations (yet).",
        "pr_file_module": null
      },
      {
        "comment_id": "2143275797",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3547,
        "pr_file": "src/mbgl/style/layers/custom_drawable_layer.cpp",
        "discussion_id": "2143177235",
        "commented_code": "@@ -519,8 +519,23 @@ util::SimpleIdentity CustomDrawableLayerHost::Interface::addPolyline(const LineS\n \n     switch (shaderType) {\n         case LineShaderType::Classic: {\n-            // TODO: build classic polyline with Geo coordinates\n-            return util::SimpleIdentity::Empty;\n+            // build classic polyline with Geo coordinates",
        "comment_created_at": "2025-06-12T17:26:57+00:00",
        "comment_author": "stefankarschti",
        "comment_body": "ok, but you should check the results, as the lack of precision makes it really unusable past a certain zoom level.",
        "pr_file_module": null
      },
      {
        "comment_id": "2143277884",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3547,
        "pr_file": "src/mbgl/style/layers/custom_drawable_layer.cpp",
        "discussion_id": "2143177235",
        "commented_code": "@@ -519,8 +519,23 @@ util::SimpleIdentity CustomDrawableLayerHost::Interface::addPolyline(const LineS\n \n     switch (shaderType) {\n         case LineShaderType::Classic: {\n-            // TODO: build classic polyline with Geo coordinates\n-            return util::SimpleIdentity::Empty;\n+            // build classic polyline with Geo coordinates",
        "comment_created_at": "2025-06-12T17:28:04+00:00",
        "comment_author": "stefankarschti",
        "comment_body": "could we document this limitation, in code comments or other docs?",
        "pr_file_module": null
      },
      {
        "comment_id": "2143302590",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3547,
        "pr_file": "src/mbgl/style/layers/custom_drawable_layer.cpp",
        "discussion_id": "2143177235",
        "commented_code": "@@ -519,8 +519,23 @@ util::SimpleIdentity CustomDrawableLayerHost::Interface::addPolyline(const LineS\n \n     switch (shaderType) {\n         case LineShaderType::Classic: {\n-            // TODO: build classic polyline with Geo coordinates\n-            return util::SimpleIdentity::Empty;\n+            // build classic polyline with Geo coordinates",
        "comment_created_at": "2025-06-12T17:40:30+00:00",
        "comment_author": "adrian-cojocaru",
        "comment_body": "I'm thinking of moving this bit in the example code (with comments) and removing the line type selection on `addPolyline` (global) for now.",
        "pr_file_module": null
      },
      {
        "comment_id": "2144525248",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3547,
        "pr_file": "src/mbgl/style/layers/custom_drawable_layer.cpp",
        "discussion_id": "2143177235",
        "commented_code": "@@ -519,8 +519,23 @@ util::SimpleIdentity CustomDrawableLayerHost::Interface::addPolyline(const LineS\n \n     switch (shaderType) {\n         case LineShaderType::Classic: {\n-            // TODO: build classic polyline with Geo coordinates\n-            return util::SimpleIdentity::Empty;\n+            // build classic polyline with Geo coordinates",
        "comment_created_at": "2025-06-13T08:50:49+00:00",
        "comment_author": "adrian-cojocaru",
        "comment_body": "I've been looking over the different matrices, but only `mvpMatrix` is used in the shader and this should be the tile matrix (same as the line shader). Is there something else that I'm missing or the extra precision is from the different input types (float3 vs short2)?",
        "pr_file_module": null
      },
      {
        "comment_id": "2149698721",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3547,
        "pr_file": "src/mbgl/style/layers/custom_drawable_layer.cpp",
        "discussion_id": "2143177235",
        "commented_code": "@@ -519,8 +519,23 @@ util::SimpleIdentity CustomDrawableLayerHost::Interface::addPolyline(const LineS\n \n     switch (shaderType) {\n         case LineShaderType::Classic: {\n-            // TODO: build classic polyline with Geo coordinates\n-            return util::SimpleIdentity::Empty;\n+            // build classic polyline with Geo coordinates",
        "comment_created_at": "2025-06-16T11:18:39+00:00",
        "comment_author": "stefankarschti",
        "comment_body": "indeed, looks like the diff is not used in the final version.\r\nif the geometry is stable at `zoom >= 20` then go ahead with the changes",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1300066109",
    "pr_number": 1534,
    "pr_file": "src/mbgl/util/bounding_volumes.cpp",
    "created_at": "2023-08-21T12:48:51+00:00",
    "commented_code": "bool fullyInside = true;\n \n+    const auto epsilon = 1e-10;",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1300066109",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1534,
        "pr_file": "src/mbgl/util/bounding_volumes.cpp",
        "discussion_id": "1300066109",
        "commented_code": "@@ -213,13 +213,15 @@ IntersectionResult Frustum::intersects(const AABB& aabb) const {\n \n     bool fullyInside = true;\n \n+    const auto epsilon = 1e-10;",
        "comment_created_at": "2023-08-21T12:48:51+00:00",
        "comment_author": "louwers",
        "comment_body": "`std::numeric_limits<double>::epsilon()` was too small.\r\n\r\nMaybe we should define this globally somewhere.",
        "pr_file_module": null
      },
      {
        "comment_id": "1300769896",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1534,
        "pr_file": "src/mbgl/util/bounding_volumes.cpp",
        "discussion_id": "1300066109",
        "commented_code": "@@ -213,13 +213,15 @@ IntersectionResult Frustum::intersects(const AABB& aabb) const {\n \n     bool fullyInside = true;\n \n+    const auto epsilon = 1e-10;",
        "comment_created_at": "2023-08-22T00:04:26+00:00",
        "comment_author": "mwilsnd",
        "comment_body": "I think it's fine for now, if we start having to do this in other places we should add some test constants though.",
        "pr_file_module": null
      }
    ]
  }
]