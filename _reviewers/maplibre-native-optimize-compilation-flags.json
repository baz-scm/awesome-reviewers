[
  {
    "discussion_id": "1018245067",
    "pr_number": 535,
    "pr_file": ".github/workflows/node-ci.yml",
    "created_at": "2022-11-09T17:47:59+00:00",
    "commented_code": "libc++abi-9-dev\n           /usr/sbin/update-ccache-symlinks\n \n-      - name: npm ci\n-        run: npm ci --ignore-scripts\n-\n-      - name: Prepare ccache\n-        run: ccache --clear --set-config cache_dir=~/.ccache\n-\n-      - name: Cache ccache\n-        uses: actions/cache@v3\n-        env:\n-          cache-name: ccache-v1\n-        with:\n-          path: ~/.ccache\n-          key: ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}\n-          restore-keys: |\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}\n-\n-      - name: Clear ccache statistics\n-        run: |\n-          ccache --zero-stats --set-config cache_dir=~/.ccache\n-          ccache --max-size=2G --set-config cache_dir=~/.ccache\n-          ccache --show-stats --set-config cache_dir=~/.ccache\n-\n-      - name: CMake\n-        if: runner.os == 'MacOS'\n-        run: |\n-          cmake . -B build -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }}\n-\n-      - name: CMake\n-        if: runner.os == 'Linux'\n-        run: |\n-          cmake . -B build -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }} -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10\n-\n-      - name: Build\n-        run: |\n-          cmake --build build -j $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null)\n+      - name: npm build",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1018245067",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 535,
        "pr_file": ".github/workflows/node-ci.yml",
        "discussion_id": "1018245067",
        "commented_code": "@@ -140,43 +140,8 @@ jobs:\n             libc++abi-9-dev\n           /usr/sbin/update-ccache-symlinks\n \n-      - name: npm ci\n-        run: npm ci --ignore-scripts\n-\n-      - name: Prepare ccache\n-        run: ccache --clear --set-config cache_dir=~/.ccache\n-\n-      - name: Cache ccache\n-        uses: actions/cache@v3\n-        env:\n-          cache-name: ccache-v1\n-        with:\n-          path: ~/.ccache\n-          key: ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}\n-          restore-keys: |\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}\n-\n-      - name: Clear ccache statistics\n-        run: |\n-          ccache --zero-stats --set-config cache_dir=~/.ccache\n-          ccache --max-size=2G --set-config cache_dir=~/.ccache\n-          ccache --show-stats --set-config cache_dir=~/.ccache\n-\n-      - name: CMake\n-        if: runner.os == 'MacOS'\n-        run: |\n-          cmake . -B build -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }}\n-\n-      - name: CMake\n-        if: runner.os == 'Linux'\n-        run: |\n-          cmake . -B build -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }} -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10\n-\n-      - name: Build\n-        run: |\n-          cmake --build build -j $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null)\n+      - name: npm build",
        "comment_created_at": "2022-11-09T17:47:59+00:00",
        "comment_author": "ntadej",
        "comment_body": "Is `ccache` supported by `npm build` (did it actually work now)?",
        "pr_file_module": null
      },
      {
        "comment_id": "1018289688",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 535,
        "pr_file": ".github/workflows/node-ci.yml",
        "discussion_id": "1018245067",
        "commented_code": "@@ -140,43 +140,8 @@ jobs:\n             libc++abi-9-dev\n           /usr/sbin/update-ccache-symlinks\n \n-      - name: npm ci\n-        run: npm ci --ignore-scripts\n-\n-      - name: Prepare ccache\n-        run: ccache --clear --set-config cache_dir=~/.ccache\n-\n-      - name: Cache ccache\n-        uses: actions/cache@v3\n-        env:\n-          cache-name: ccache-v1\n-        with:\n-          path: ~/.ccache\n-          key: ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}\n-          restore-keys: |\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}\n-\n-      - name: Clear ccache statistics\n-        run: |\n-          ccache --zero-stats --set-config cache_dir=~/.ccache\n-          ccache --max-size=2G --set-config cache_dir=~/.ccache\n-          ccache --show-stats --set-config cache_dir=~/.ccache\n-\n-      - name: CMake\n-        if: runner.os == 'MacOS'\n-        run: |\n-          cmake . -B build -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }}\n-\n-      - name: CMake\n-        if: runner.os == 'Linux'\n-        run: |\n-          cmake . -B build -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }} -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10\n-\n-      - name: Build\n-        run: |\n-          cmake --build build -j $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null)\n+      - name: npm build",
        "comment_created_at": "2022-11-09T18:36:32+00:00",
        "comment_author": "acalcutt",
        "comment_body": "I'd say right now this is not using ccache, the cmake-js options it is using looks like this\r\n\r\n```\r\n[\r\n  '/root/.nvm/versions/node/v16.15.0/bin/node',\r\n  '/opt/test7/cmake/node_modules/.bin/cmake-js',\r\n  'compile'\r\n]\r\ninfo TOOL Using Ninja generator, because ninja is available.\r\ninfo CMD CONFIGURE\r\ninfo RUN [\r\ninfo RUN   'cmake',\r\ninfo RUN   '/opt/test7/cmake',\r\ninfo RUN   '--no-warn-unused-cli',\r\ninfo RUN   '-G',\r\ninfo RUN   'Ninja',\r\ninfo RUN   '-DCMAKE_JS_VERSION=undefined',\r\ninfo RUN   '-DCMAKE_BUILD_TYPE=Release',\r\ninfo RUN   '-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=/opt/test7/cmake/build/Release',\r\ninfo RUN   '-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded$<$<CONFIG:Debug>:Debug>',\r\ninfo RUN   '-DCMAKE_JS_INC=/root/.cmake-js/node-x64/v16.15.0/include/node',\r\ninfo RUN   '-DCMAKE_JS_SRC=',\r\ninfo RUN   '-DNODE_RUNTIME=node',\r\ninfo RUN   '-DNODE_RUNTIMEVERSION=16.15.0',\r\ninfo RUN   '-DNODE_ARCH=x64',\r\ninfo RUN   '-DCMAKE_CXX_FLAGS=-DBUILDING_NODE_EXTENSION'\r\ninfo RUN ]\r\n```\r\n\r\nI think I could add the ccache commands back to the workflow and set the option to use it in cmake with \r\n`npm config set cmake_CMAKE_CXX_COMPILER_LAUNCHER ccache`\r\n\r\nwhich adds -DCMAKE_CXX_COMPILER_LAUNCHER=ccache to the options\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1018296235",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 535,
        "pr_file": ".github/workflows/node-ci.yml",
        "discussion_id": "1018245067",
        "commented_code": "@@ -140,43 +140,8 @@ jobs:\n             libc++abi-9-dev\n           /usr/sbin/update-ccache-symlinks\n \n-      - name: npm ci\n-        run: npm ci --ignore-scripts\n-\n-      - name: Prepare ccache\n-        run: ccache --clear --set-config cache_dir=~/.ccache\n-\n-      - name: Cache ccache\n-        uses: actions/cache@v3\n-        env:\n-          cache-name: ccache-v1\n-        with:\n-          path: ~/.ccache\n-          key: ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}\n-          restore-keys: |\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}\n-\n-      - name: Clear ccache statistics\n-        run: |\n-          ccache --zero-stats --set-config cache_dir=~/.ccache\n-          ccache --max-size=2G --set-config cache_dir=~/.ccache\n-          ccache --show-stats --set-config cache_dir=~/.ccache\n-\n-      - name: CMake\n-        if: runner.os == 'MacOS'\n-        run: |\n-          cmake . -B build -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }}\n-\n-      - name: CMake\n-        if: runner.os == 'Linux'\n-        run: |\n-          cmake . -B build -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }} -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10\n-\n-      - name: Build\n-        run: |\n-          cmake --build build -j $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null)\n+      - name: npm build",
        "comment_created_at": "2022-11-09T18:44:03+00:00",
        "comment_author": "ntadej",
        "comment_body": "I think given the size of the project, `ccache` support may be useful (especially for the CI).",
        "pr_file_module": null
      },
      {
        "comment_id": "1018541546",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 535,
        "pr_file": ".github/workflows/node-ci.yml",
        "discussion_id": "1018245067",
        "commented_code": "@@ -140,43 +140,8 @@ jobs:\n             libc++abi-9-dev\n           /usr/sbin/update-ccache-symlinks\n \n-      - name: npm ci\n-        run: npm ci --ignore-scripts\n-\n-      - name: Prepare ccache\n-        run: ccache --clear --set-config cache_dir=~/.ccache\n-\n-      - name: Cache ccache\n-        uses: actions/cache@v3\n-        env:\n-          cache-name: ccache-v1\n-        with:\n-          path: ~/.ccache\n-          key: ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}\n-          restore-keys: |\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}\n-\n-      - name: Clear ccache statistics\n-        run: |\n-          ccache --zero-stats --set-config cache_dir=~/.ccache\n-          ccache --max-size=2G --set-config cache_dir=~/.ccache\n-          ccache --show-stats --set-config cache_dir=~/.ccache\n-\n-      - name: CMake\n-        if: runner.os == 'MacOS'\n-        run: |\n-          cmake . -B build -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }}\n-\n-      - name: CMake\n-        if: runner.os == 'Linux'\n-        run: |\n-          cmake . -B build -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }} -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10\n-\n-      - name: Build\n-        run: |\n-          cmake --build build -j $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null)\n+      - name: npm build",
        "comment_created_at": "2022-11-10T00:34:48+00:00",
        "comment_author": "acalcutt",
        "comment_body": "well i made the changes to include that build option, and can see it is there now, but beyond that I'm not sure how I tell it is being used.\r\n\r\nnot sure why the macos ci is failing...i don't think it is related to this PR.",
        "pr_file_module": null
      },
      {
        "comment_id": "1089719695",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 535,
        "pr_file": ".github/workflows/node-ci.yml",
        "discussion_id": "1018245067",
        "commented_code": "@@ -140,43 +140,8 @@ jobs:\n             libc++abi-9-dev\n           /usr/sbin/update-ccache-symlinks\n \n-      - name: npm ci\n-        run: npm ci --ignore-scripts\n-\n-      - name: Prepare ccache\n-        run: ccache --clear --set-config cache_dir=~/.ccache\n-\n-      - name: Cache ccache\n-        uses: actions/cache@v3\n-        env:\n-          cache-name: ccache-v1\n-        with:\n-          path: ~/.ccache\n-          key: ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}-${{ github.head_ref }}\n-          restore-keys: |\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}-${{ github.ref }}\n-            ${{ env.cache-name }}-${{ matrix.os }}-${{ github.job }}\n-\n-      - name: Clear ccache statistics\n-        run: |\n-          ccache --zero-stats --set-config cache_dir=~/.ccache\n-          ccache --max-size=2G --set-config cache_dir=~/.ccache\n-          ccache --show-stats --set-config cache_dir=~/.ccache\n-\n-      - name: CMake\n-        if: runner.os == 'MacOS'\n-        run: |\n-          cmake . -B build -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }}\n-\n-      - name: CMake\n-        if: runner.os == 'Linux'\n-        run: |\n-          cmake . -B build -G Ninja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{ env.BUILDTYPE }} -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10\n-\n-      - name: Build\n-        run: |\n-          cmake --build build -j $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null)\n+      - name: npm build",
        "comment_created_at": "2023-01-28T11:28:22+00:00",
        "comment_author": "ovivoda",
        "comment_body": "@ntadej @acalcutt CI looks like it is passing now. Should we mark this as resolved? ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1429208751",
    "pr_number": 1966,
    "pr_file": ".github/workflows/ios-ci.yml",
    "created_at": "2023-12-17T16:43:59+00:00",
    "commented_code": "${{ env.ios_cpp_test_artifacts_dir }}/CppUnitTests.xctest.zip\n             ${{ env.ios_cpp_test_artifacts_dir }}/CppUnitTestsApp.ipa\n \n+      # Size test (Bloaty)\n+\n+      - name: Build dynamic library for size test (Bloaty)\n+        if: matrix.renderer == 'drawable'\n+        run: |\n+          bazel build //platform/ios:MapLibre.dynamic --//:renderer=metal --//:maplibre_platform=ios --compilation_mode=\"opt\" --copt -g --strip never --output_groups=+dsyms --apple_generate_dsym",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1429208751",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1966,
        "pr_file": ".github/workflows/ios-ci.yml",
        "discussion_id": "1429208751",
        "commented_code": "@@ -164,6 +164,45 @@ jobs:\n             ${{ env.ios_cpp_test_artifacts_dir }}/CppUnitTests.xctest.zip\n             ${{ env.ios_cpp_test_artifacts_dir }}/CppUnitTestsApp.ipa\n \n+      # Size test (Bloaty)\n+\n+      - name: Build dynamic library for size test (Bloaty)\n+        if: matrix.renderer == 'drawable'\n+        run: |\n+          bazel build //platform/ios:MapLibre.dynamic --//:renderer=metal --//:maplibre_platform=ios --compilation_mode=\"opt\" --copt -g --strip never --output_groups=+dsyms --apple_generate_dsym",
        "comment_created_at": "2023-12-17T16:43:59+00:00",
        "comment_author": "mwilsnd",
        "comment_body": "Build with `-Oz` here to prevent the inliner behavior from distorting the optimal size configuration. Otherwise things may get aggressively inlined which distorts the metric we're interested in.\r\n\r\nAdditionally, if we can, build only for armv8/AArch64. By default I think the xcframework should have both binaries in it (x86-64 and armv8). Bloaty gets confused by that and tends to pick one, usually x86-64 in my testing. Arm binaries are going to be bigger just by virtue of the instruction set, so make sure we're comparing arm.",
        "pr_file_module": null
      },
      {
        "comment_id": "1429212211",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1966,
        "pr_file": ".github/workflows/ios-ci.yml",
        "discussion_id": "1429208751",
        "commented_code": "@@ -164,6 +164,45 @@ jobs:\n             ${{ env.ios_cpp_test_artifacts_dir }}/CppUnitTests.xctest.zip\n             ${{ env.ios_cpp_test_artifacts_dir }}/CppUnitTestsApp.ipa\n \n+      # Size test (Bloaty)\n+\n+      - name: Build dynamic library for size test (Bloaty)\n+        if: matrix.renderer == 'drawable'\n+        run: |\n+          bazel build //platform/ios:MapLibre.dynamic --//:renderer=metal --//:maplibre_platform=ios --compilation_mode=\"opt\" --copt -g --strip never --output_groups=+dsyms --apple_generate_dsym",
        "comment_created_at": "2023-12-17T16:58:59+00:00",
        "comment_author": "louwers",
        "comment_body": "Yes it contains both:\r\n\r\n```\r\n$ ls MapLibre.xcframework\r\nInfo.plist*                  ios-arm64/                   ios-arm64_x86_64-simulator/\r\n```\r\n\r\nBut I am extracting the armv8 dynamic library from the XCFramework:\r\n\r\n```\r\ncp MapLibre.xcframework/ios-arm64/MapLibre.framework/MapLibre MapLibre_dynamic\r\n```\r\n\r\n```\r\n $ file MapLibre_dynamic\r\nMapLibre_dynamic: Mach-O 64-bit dynamically linked shared library arm64\r\n```\r\n\r\nSo should be fine.",
        "pr_file_module": null
      }
    ]
  }
]