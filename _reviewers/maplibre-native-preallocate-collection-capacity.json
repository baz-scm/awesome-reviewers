[
  {
    "discussion_id": "1794259577",
    "pr_number": 2921,
    "pr_file": "src/mbgl/layout/symbol_instance.cpp",
    "created_at": "2024-10-09T21:36:05+00:00",
    "commented_code": "return symbolContent & SymbolContent::IconSDF;\n }\n \n+std::vector<style::SymbolAnchorType> SymbolInstance::getTextAnchors() const {\n+    std::vector<style::SymbolAnchorType> result;\n+    if (textVariableAnchorOffset) {\n+        for (const auto& anchorOffset : *textVariableAnchorOffset) {",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1794259577",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2921,
        "pr_file": "src/mbgl/layout/symbol_instance.cpp",
        "discussion_id": "1794259577",
        "commented_code": "@@ -206,6 +206,17 @@ bool SymbolInstance::hasSdfIcon() const {\n     return symbolContent & SymbolContent::IconSDF;\n }\n \n+std::vector<style::SymbolAnchorType> SymbolInstance::getTextAnchors() const {\n+    std::vector<style::SymbolAnchorType> result;\n+    if (textVariableAnchorOffset) {\n+        for (const auto& anchorOffset : *textVariableAnchorOffset) {",
        "comment_created_at": "2024-10-09T21:36:05+00:00",
        "comment_author": "random3940",
        "comment_body": "It would be good to call vector.reserve() upfront.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1794261954",
    "pr_number": 2921,
    "pr_file": "src/mbgl/layout/symbol_layout.cpp",
    "created_at": "2024-10-09T21:38:55+00:00",
    "commented_code": "return result;\n }\n \n+std::optional<VariableAnchorOffsetCollection> SymbolLayout::getTextVariableAnchorOffset(const SymbolFeature& feature) {\n+    std::optional<VariableAnchorOffsetCollection> result;\n+\n+    // If style specifies text-variable-anchor-offset, just return it\n+    if (!textVariableAnchorOffset.isUndefined()) {\n+        std::vector<AnchorOffsetPair> anchorOffsets;\n+        auto variableAnchorOffset = layout->evaluate<TextVariableAnchorOffset>(zoom, feature, canonicalID);\n+        if (!variableAnchorOffset.empty()) {\n+            // Convert offsets from EM to PX, and apply baseline shift\n+            for (const auto& anchorOffset : variableAnchorOffset) {",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1794261954",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2921,
        "pr_file": "src/mbgl/layout/symbol_layout.cpp",
        "discussion_id": "1794261954",
        "commented_code": "@@ -358,6 +359,67 @@ std::array<float, 2> SymbolLayout::evaluateVariableOffset(style::SymbolAnchorTyp\n     return result;\n }\n \n+std::optional<VariableAnchorOffsetCollection> SymbolLayout::getTextVariableAnchorOffset(const SymbolFeature& feature) {\n+    std::optional<VariableAnchorOffsetCollection> result;\n+\n+    // If style specifies text-variable-anchor-offset, just return it\n+    if (!textVariableAnchorOffset.isUndefined()) {\n+        std::vector<AnchorOffsetPair> anchorOffsets;\n+        auto variableAnchorOffset = layout->evaluate<TextVariableAnchorOffset>(zoom, feature, canonicalID);\n+        if (!variableAnchorOffset.empty()) {\n+            // Convert offsets from EM to PX, and apply baseline shift\n+            for (const auto& anchorOffset : variableAnchorOffset) {",
        "comment_created_at": "2024-10-09T21:38:55+00:00",
        "comment_author": "random3940",
        "comment_body": "And here too vector::reserve() might help. Check other places where we know size ahead of time? I expect those arrays to be small, but it's still a good practice to do where we can.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1802086156",
    "pr_number": 2921,
    "pr_file": "src/mbgl/style/conversion/constant.cpp",
    "created_at": "2024-10-15T22:28:08+00:00",
    "commented_code": "return result;\n }\n \n+std::optional<VariableAnchorOffsetCollection> Converter<VariableAnchorOffsetCollection>::operator()(\n+    const Convertible& value, Error& error) const {\n+    if (!isArray(value)) {\n+        error.message = \"value must be an array\";\n+        return std::nullopt;\n+    }\n+\n+    const auto arraySize = arrayLength(value);\n+    if (arraySize < 1 || arraySize % 2 != 0) {\n+        return std::nullopt;\n+    }\n+\n+    std::vector<AnchorOffsetPair> collection;",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1802086156",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2921,
        "pr_file": "src/mbgl/style/conversion/constant.cpp",
        "discussion_id": "1802086156",
        "commented_code": "@@ -136,6 +136,53 @@ std::optional<Padding> Converter<Padding>::operator()(const Convertible& value,\n     return result;\n }\n \n+std::optional<VariableAnchorOffsetCollection> Converter<VariableAnchorOffsetCollection>::operator()(\n+    const Convertible& value, Error& error) const {\n+    if (!isArray(value)) {\n+        error.message = \"value must be an array\";\n+        return std::nullopt;\n+    }\n+\n+    const auto arraySize = arrayLength(value);\n+    if (arraySize < 1 || arraySize % 2 != 0) {\n+        return std::nullopt;\n+    }\n+\n+    std::vector<AnchorOffsetPair> collection;",
        "comment_created_at": "2024-10-15T22:28:08+00:00",
        "comment_author": "random3940",
        "comment_body": "Can do reserve() here too.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1330704707",
    "pr_number": 1666,
    "pr_file": "src/mbgl/util/string_indexer.cpp",
    "created_at": "2023-09-19T21:11:23+00:00",
    "commented_code": "if (const auto it = stringToIdentity.find(string); it == stringToIdentity.end()) {\n             // this writer to insert\n-            const StringIdentity id = identityToString.size();\n-            identityToString.push_back(std::string(string));\n-\n-            [[maybe_unused]] auto result = stringToIdentity.insert(\n-                {std::string_view(identityToString.back().data(), identityToString.back().length()), id});\n-            assert(result.second);\n+            auto& buffer = instance().buffer;\n+            const auto previousCapacity = buffer.capacity();\n \n+            const StringIdentity id = identityToString.size();\n+            identityToString.push_back(buffer.size());\n+            buffer.insert(buffer.end(), string.begin(), string.end());\n+            buffer.push_back(0);\n+            if (buffer.capacity() != previousCapacity) {\n+                // reallocation happened",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1330704707",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1666,
        "pr_file": "src/mbgl/util/string_indexer.cpp",
        "discussion_id": "1330704707",
        "commented_code": "@@ -36,13 +39,25 @@ StringIdentity StringIndexer::get(std::string_view string) {\n \n         if (const auto it = stringToIdentity.find(string); it == stringToIdentity.end()) {\n             // this writer to insert\n-            const StringIdentity id = identityToString.size();\n-            identityToString.push_back(std::string(string));\n-\n-            [[maybe_unused]] auto result = stringToIdentity.insert(\n-                {std::string_view(identityToString.back().data(), identityToString.back().length()), id});\n-            assert(result.second);\n+            auto& buffer = instance().buffer;\n+            const auto previousCapacity = buffer.capacity();\n \n+            const StringIdentity id = identityToString.size();\n+            identityToString.push_back(buffer.size());\n+            buffer.insert(buffer.end(), string.begin(), string.end());\n+            buffer.push_back(0);\n+            if (buffer.capacity() != previousCapacity) {\n+                // reallocation happened",
        "comment_created_at": "2023-09-19T21:11:23+00:00",
        "comment_author": "mwilsnd",
        "comment_body": "How often do we actually see reallocation happening here?",
        "pr_file_module": null
      },
      {
        "comment_id": "1330715003",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 1666,
        "pr_file": "src/mbgl/util/string_indexer.cpp",
        "discussion_id": "1330704707",
        "commented_code": "@@ -36,13 +39,25 @@ StringIdentity StringIndexer::get(std::string_view string) {\n \n         if (const auto it = stringToIdentity.find(string); it == stringToIdentity.end()) {\n             // this writer to insert\n-            const StringIdentity id = identityToString.size();\n-            identityToString.push_back(std::string(string));\n-\n-            [[maybe_unused]] auto result = stringToIdentity.insert(\n-                {std::string_view(identityToString.back().data(), identityToString.back().length()), id});\n-            assert(result.second);\n+            auto& buffer = instance().buffer;\n+            const auto previousCapacity = buffer.capacity();\n \n+            const StringIdentity id = identityToString.size();\n+            identityToString.push_back(buffer.size());\n+            buffer.insert(buffer.end(), string.begin(), string.end());\n+            buffer.push_back(0);\n+            if (buffer.capacity() != previousCapacity) {\n+                // reallocation happened",
        "comment_created_at": "2023-09-19T21:19:51+00:00",
        "comment_author": "stefankarschti",
        "comment_body": "not that often, as `std::vector`'s default strategy afaik is exponential growth.\r\nwe could tune the `initialCapacity` so that it never happens, depending on the amount and length of strings to be indexed.",
        "pr_file_module": null
      }
    ]
  }
]