[
  {
    "discussion_id": "1912670099",
    "pr_number": 3137,
    "pr_file": ".github/workflows/android-ci.yml",
    "created_at": "2025-01-13T05:13:51+00:00",
    "commented_code": "distribution: \"temurin\"\n           java-version: \"17\"\n \n+      - name: Add aarch64-linux-android for Rust toolchain\n+        if: ${{ github.ref == 'refs/heads/rust' || github.event.pull_request.base.ref == 'rust' }}\n+        run: rustup target add --toolchain stable-x86_64-unknown-linux-gnu aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1912670099",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3137,
        "pr_file": ".github/workflows/android-ci.yml",
        "discussion_id": "1912670099",
        "commented_code": "@@ -71,6 +71,10 @@ jobs:\n           distribution: \"temurin\"\n           java-version: \"17\"\n \n+      - name: Add aarch64-linux-android for Rust toolchain\n+        if: ${{ github.ref == 'refs/heads/rust' || github.event.pull_request.base.ref == 'rust' }}\n+        run: rustup target add --toolchain stable-x86_64-unknown-linux-gnu aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android",
        "comment_created_at": "2025-01-13T05:13:51+00:00",
        "comment_author": "ianthetechie",
        "comment_body": "I'm not sure if this is at odds with other conventions in how the repo works, but since we're using rustup, maybe we should specify these in [rust-toolchain.toml](https://rust-lang.github.io/rustup/overrides.html#the-toolchain-file)? (This is a rather under-utilized feature IMO, since it applies to CI and local dev setup alike. [Here's how we use it in Ferrostar as a canonical list of cross-compilation targets](https://github.com/stadiamaps/ferrostar/blob/main/common/rust-toolchain.toml).)\r\n\r\nThe benefits:\r\n\r\n* You never have to guess what targets you need to do a full build.\r\n* It's in a standard location rather than buried in CI configs.\r\n* Most tools (even Nix) can understand a toolchain file and, for most users, it'll auto-download targets. One less thing to document!\r\n\r\nThe drawbacks:\r\n\r\n* I *think* this means that most users will automatically download, say the Android target, even if they don't really need it. This isn't a big deal IMO, but worth noting.",
        "pr_file_module": null
      },
      {
        "comment_id": "1915492685",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3137,
        "pr_file": ".github/workflows/android-ci.yml",
        "discussion_id": "1912670099",
        "commented_code": "@@ -71,6 +71,10 @@ jobs:\n           distribution: \"temurin\"\n           java-version: \"17\"\n \n+      - name: Add aarch64-linux-android for Rust toolchain\n+        if: ${{ github.ref == 'refs/heads/rust' || github.event.pull_request.base.ref == 'rust' }}\n+        run: rustup target add --toolchain stable-x86_64-unknown-linux-gnu aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android",
        "comment_created_at": "2025-01-14T19:30:33+00:00",
        "comment_author": "louwers",
        "comment_body": "Toolchain is already installed on the default image.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1704028431",
    "pr_number": 2647,
    "pr_file": ".github/workflows/android-ci.yml",
    "created_at": "2024-08-05T12:20:00+00:00",
    "commented_code": "distribution: \"temurin\"\n           java-version: \"17\"\n \n+      - name: Add aarch64-linux-android for Rust toolchian\n+        run: rustup target add --toolchain stable-x86_64-unknown-linux-gnu aarch64-linux-android armv7-linux-androideabi i686-linux-android",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1704028431",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2647,
        "pr_file": ".github/workflows/android-ci.yml",
        "discussion_id": "1704028431",
        "commented_code": "@@ -70,6 +70,9 @@ jobs:\n           distribution: \"temurin\"\n           java-version: \"17\"\n \n+      - name: Add aarch64-linux-android for Rust toolchian\n+        run: rustup target add --toolchain stable-x86_64-unknown-linux-gnu aarch64-linux-android armv7-linux-androideabi i686-linux-android",
        "comment_created_at": "2024-08-05T12:20:00+00:00",
        "comment_author": "maxammann",
        "comment_body": "The dependency to rustup is not hight right now, so this is fine. However, we should make sure not to depend too much on rustup. This is a mistake that I made in maplibre-rs. The mistake later shows up e.g. when integrating into other build systems.\r\n\r\nIdeally, the only required dependency is `rustc`. Realstically there is no way around `cargo`. However, a strict requirement for `rustup` can be easily avoided.\r\n\r\nUsing rustup in the CI is totalyl fine! (always!) We should just avoid depending on rustup in e.g. cmake scripts.",
        "pr_file_module": null
      },
      {
        "comment_id": "1704351558",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2647,
        "pr_file": ".github/workflows/android-ci.yml",
        "discussion_id": "1704028431",
        "commented_code": "@@ -70,6 +70,9 @@ jobs:\n           distribution: \"temurin\"\n           java-version: \"17\"\n \n+      - name: Add aarch64-linux-android for Rust toolchian\n+        run: rustup target add --toolchain stable-x86_64-unknown-linux-gnu aarch64-linux-android armv7-linux-androideabi i686-linux-android",
        "comment_created_at": "2024-08-05T16:09:27+00:00",
        "comment_author": "nyurik",
        "comment_body": "thx, wasn't aware that rustup is a problem in cmake/bazel, so will make sure to avoid it there",
        "pr_file_module": null
      },
      {
        "comment_id": "1704576385",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2647,
        "pr_file": ".github/workflows/android-ci.yml",
        "discussion_id": "1704028431",
        "commented_code": "@@ -70,6 +70,9 @@ jobs:\n           distribution: \"temurin\"\n           java-version: \"17\"\n \n+      - name: Add aarch64-linux-android for Rust toolchian\n+        run: rustup target add --toolchain stable-x86_64-unknown-linux-gnu aarch64-linux-android armv7-linux-androideabi i686-linux-android",
        "comment_created_at": "2024-08-05T20:03:30+00:00",
        "comment_author": "maxammann",
        "comment_body": "Not neccassarily a problem, but rustup is just one way of installing Rust.\r\n\r\nNote that the rust-toolchain.toml is for example a feature of rustup. It might just cause frictioin to depend on rustup early on :) ",
        "pr_file_module": null
      },
      {
        "comment_id": "1708422209",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2647,
        "pr_file": ".github/workflows/android-ci.yml",
        "discussion_id": "1704028431",
        "commented_code": "@@ -70,6 +70,9 @@ jobs:\n           distribution: \"temurin\"\n           java-version: \"17\"\n \n+      - name: Add aarch64-linux-android for Rust toolchian\n+        run: rustup target add --toolchain stable-x86_64-unknown-linux-gnu aarch64-linux-android armv7-linux-androideabi i686-linux-android",
        "comment_created_at": "2024-08-08T02:07:40+00:00",
        "comment_author": "ianthetechie",
        "comment_body": "heh I love that you mention `rust-toolchain.toml` @maxammann ;) I think that this is one of the most underrated features for cross-platform development Ind I do use it in my projects. That said, your concern is completely correct in the case of MapLibre and other projects which use Bazel for build orchestration.",
        "pr_file_module": null
      }
    ]
  }
]