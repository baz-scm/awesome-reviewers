[
  {
    "discussion_id": "1826602083",
    "pr_number": 2977,
    "pr_file": "docs/mdbook/src/android/geojson-guide.md",
    "created_at": "2024-11-02T16:58:16+00:00",
    "commented_code": "+# Introduction\n+\n+This guide will teach you how to use [`GeoJsonSource`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-geo-json-source/index.html\") by deep diving into [`GeoJSON`](\"https://geojson.org/\") file format.\n+You will start with fundamentals of how a map renders data internally and why you should prefer [JSON](\"https://en.wikipedia.org/wiki/JSON\") format in storing geospatial data\n+\n+# Goals\n+After finishing  this documentation you should be able to:\n+1. understand how [`Style`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.maps/-style/index.html?query=open%20class%20Style\"), [`Layer`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.layers/-layer/index.html?query=abstract%20class%20Layer\"), and [`Data source`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-source/index.html?query=abstract%20class%20Source\") interact with each other\n+2. describe JSON files\n+3. explore building blocks of `GeoJSON` data\n+4. use `GeoJSON` files in constructing [`GeoJsonSource`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-source/index.html?query=abstract%20class%20Source\")s\n+5. update data at runtime\n+\n+### 1. Styles, Layers, and Data source\n+- `Style ` defines the visual representation of the map such as colors and appearance.\n+- `Layer` controls how data should be presented to the user\n+- `Data source`  holds actual data and provides layers with it\n+\n+Styles consist of collections of layers and data source. Layers reference data source. Hence they require a unique source ID when you construct them.\n+It would be meaningless if we don't have any data to show, so we need know how to supply data through a data source.\n+Firstly, we need to understand how to store data and pass it into a data source; therefore, we will discuss JSON in the next session.\n+\n+### 2. JSON",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1826602083",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2977,
        "pr_file": "docs/mdbook/src/android/geojson-guide.md",
        "discussion_id": "1826602083",
        "commented_code": "@@ -0,0 +1,349 @@\n+# Introduction\n+\n+This guide will teach you how to use [`GeoJsonSource`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-geo-json-source/index.html\") by deep diving into [`GeoJSON`](\"https://geojson.org/\") file format.\n+You will start with fundamentals of how a map renders data internally and why you should prefer [JSON](\"https://en.wikipedia.org/wiki/JSON\") format in storing geospatial data\n+\n+# Goals\n+After finishing  this documentation you should be able to:\n+1. understand how [`Style`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.maps/-style/index.html?query=open%20class%20Style\"), [`Layer`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.layers/-layer/index.html?query=abstract%20class%20Layer\"), and [`Data source`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-source/index.html?query=abstract%20class%20Source\") interact with each other\n+2. describe JSON files\n+3. explore building blocks of `GeoJSON` data\n+4. use `GeoJSON` files in constructing [`GeoJsonSource`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-source/index.html?query=abstract%20class%20Source\")s\n+5. update data at runtime\n+\n+### 1. Styles, Layers, and Data source\n+- `Style ` defines the visual representation of the map such as colors and appearance.\n+- `Layer` controls how data should be presented to the user\n+- `Data source`  holds actual data and provides layers with it\n+\n+Styles consist of collections of layers and data source. Layers reference data source. Hence they require a unique source ID when you construct them.\n+It would be meaningless if we don't have any data to show, so we need know how to supply data through a data source.\n+Firstly, we need to understand how to store data and pass it into a data source; therefore, we will discuss JSON in the next session.\n+\n+### 2. JSON",
        "comment_created_at": "2024-11-02T16:58:16+00:00",
        "comment_author": "louwers",
        "comment_body": "I think we can assume that everyone knows JSON...\r\n\r\nWe can probably link to an explanation of GeoJSON elsewhere and focus on concepts that are specific to MapLibre Android.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1826602140",
    "pr_number": 2977,
    "pr_file": "docs/mdbook/src/android/geojson-guide.md",
    "created_at": "2024-11-02T16:58:48+00:00",
    "commented_code": "+# Introduction\n+\n+This guide will teach you how to use [`GeoJsonSource`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-geo-json-source/index.html\") by deep diving into [`GeoJSON`](\"https://geojson.org/\") file format.\n+You will start with fundamentals of how a map renders data internally and why you should prefer [JSON](\"https://en.wikipedia.org/wiki/JSON\") format in storing geospatial data\n+\n+# Goals\n+After finishing  this documentation you should be able to:\n+1. understand how [`Style`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.maps/-style/index.html?query=open%20class%20Style\"), [`Layer`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.layers/-layer/index.html?query=abstract%20class%20Layer\"), and [`Data source`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-source/index.html?query=abstract%20class%20Source\") interact with each other\n+2. describe JSON files\n+3. explore building blocks of `GeoJSON` data\n+4. use `GeoJSON` files in constructing [`GeoJsonSource`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-source/index.html?query=abstract%20class%20Source\")s\n+5. update data at runtime\n+\n+### 1. Styles, Layers, and Data source\n+- `Style ` defines the visual representation of the map such as colors and appearance.\n+- `Layer` controls how data should be presented to the user\n+- `Data source`  holds actual data and provides layers with it\n+\n+Styles consist of collections of layers and data source. Layers reference data source. Hence they require a unique source ID when you construct them.\n+It would be meaningless if we don't have any data to show, so we need know how to supply data through a data source.\n+Firstly, we need to understand how to store data and pass it into a data source; therefore, we will discuss JSON in the next session.\n+\n+### 2. JSON\n+JSON stands for JavaScript Object Notation. It is a key-value pair text format for storing and retrieving data between client and server.\n+It is popular because it is human readable and easy to parse into objects.\n+The system treats JSON content as a string, making it easy to transmit data across clients, and saves it as a .json extension\n+\n+A sample JSON file:\n+```json\n+{\n+  \"name\": \"John Doe\",\n+  \"age\": 30,\n+  \"isStudent\": false,\n+  \"contact\": {\n+    \"email\": \"johndoe@example.com\",\n+    \"phone\": \"123-456-7890\"\n+  },\n+  \"hobbies\": [\"reading\", \"traveling\", \"coding\"]\n+}\n+\n+```\n+With its straightforward syntax, we can benefit from it by describing our geospatial data inside JSON\n+\n+### 3. GeoJSON \n+[`GeoJSON`](\"https://geojson.org/\") is a JSON file for encoding various geographical data structures.\n+It defines several JSON objects to represent geospatial information. We use the`.geojson` extension for GeoJSON files.\n+We define the most fundamental objects:\n+- `Geometry` refers to a single geometric shape that contains one or more coordinates. These shapes are visual objects displayed on a map. A geometry can be one of the following six types:\n+  - Point\n+  - MultiPoint\n+  - LineString\n+  - MultilineString\n+  - Polygon\n+  - MultiPolygon\n+- `Feautue` is a compound object that combines a single geometry with user-defined attributes, such as name, color.\n+- `FeatureCollection` is set of features stored in an array. It is a root object that introduces all other features.\n+\n+A typical GeoJSON file might look like:\n+```json\n+ {\n+  \"type\": \"FeatureCollection\",\n+  \"features\": [\n+    {\n+      \"type\": \"Feature\",\n+      \"properties\": {},\n+      \"geometry\": {\n+        \"type\": \"Polygon\",\n+        \"coordinates\": [\n+          [\n+            [\n+              -77.06867337226866,\n+              38.90467655551809\n+            ],\n+            [\n+              -77.06233263015747,\n+              38.90479344272695\n+            ],\n+            [\n+              -77.06234335899353,\n+              38.906463238984344\n+            ],\n+            [\n+              -77.06290125846863,\n+              38.907206285691615\n+            ],\n+            [\n+              -77.06364154815674,\n+              38.90684728656818\n+            ],\n+            [\n+              -77.06326603889465,\n+              38.90637140121084\n+            ],\n+            [\n+              -77.06321239471436,\n+              38.905561553883246\n+            ],\n+            [\n+              -77.0691454410553,\n+              38.905436318935635\n+            ],\n+            [\n+              -77.06912398338318,\n+              38.90466820642439\n+            ],\n+            [\n+              -77.06867337226866,\n+              38.90467655551809\n+            ]\n+          ]\n+        ]\n+      }\n+    }\n+  ]\n+}\n+```\n+So far we learned describing Geospatial data in GeoJSON files. We will start applying this knowledge into our map applications \n+\n+### 4. GeoJsonSource\n+As we discussed before, map requires some sort data to be rendered. We use different sources such as [`Vector`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-vector-source/index.html?query=class%20VectorSource%20:%20Source\"), [`Raster`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-raster-source/index.html?query=class%20RasterSource%20:%20Source\") and `GeoJSON`.\n+We will focus exclusively on `GeoJsonSource` and will not address other sources.\n+`GeoJsonSource` is a type of source that has a unique `String` ID and GeoJSON data.\n+\n+There are several ways to construct a `GeoJsonSource`:\n+- Locally stored files such as assets and raw folders\n+- Remote services \n+- Raw string  parsed into FeatureCollections objects\n+- Geometry, Feature, and FeatureCollection objects that map to GeoJSON Base builders\n+\n+A sample GeoJsonSource:\n+```kotlin\n+val source = GeoJsonSource(\"source\", featureCollection)\n+val lineLayer = LineLayer(\"layer\", \"source\")\n+    .withProperties(\n+        PropertyFactory.lineColor(Color.RED),\n+        PropertyFactory.lineWidth(10f)\n+    )\n+\n+style.addSource(source)\n+style.addLayer(lineLayer)\n+```\n+\n+Note that you can not simply show data on a map. Layers must reference them.\n+Therefore, you create a layer that gives visual appearance to it.\n+\n+- Loading from local files\n+\n+with assets folder file\n+```kotlin",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1826602140",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2977,
        "pr_file": "docs/mdbook/src/android/geojson-guide.md",
        "discussion_id": "1826602140",
        "commented_code": "@@ -0,0 +1,349 @@\n+# Introduction\n+\n+This guide will teach you how to use [`GeoJsonSource`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-geo-json-source/index.html\") by deep diving into [`GeoJSON`](\"https://geojson.org/\") file format.\n+You will start with fundamentals of how a map renders data internally and why you should prefer [JSON](\"https://en.wikipedia.org/wiki/JSON\") format in storing geospatial data\n+\n+# Goals\n+After finishing  this documentation you should be able to:\n+1. understand how [`Style`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.maps/-style/index.html?query=open%20class%20Style\"), [`Layer`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.layers/-layer/index.html?query=abstract%20class%20Layer\"), and [`Data source`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-source/index.html?query=abstract%20class%20Source\") interact with each other\n+2. describe JSON files\n+3. explore building blocks of `GeoJSON` data\n+4. use `GeoJSON` files in constructing [`GeoJsonSource`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-source/index.html?query=abstract%20class%20Source\")s\n+5. update data at runtime\n+\n+### 1. Styles, Layers, and Data source\n+- `Style ` defines the visual representation of the map such as colors and appearance.\n+- `Layer` controls how data should be presented to the user\n+- `Data source`  holds actual data and provides layers with it\n+\n+Styles consist of collections of layers and data source. Layers reference data source. Hence they require a unique source ID when you construct them.\n+It would be meaningless if we don't have any data to show, so we need know how to supply data through a data source.\n+Firstly, we need to understand how to store data and pass it into a data source; therefore, we will discuss JSON in the next session.\n+\n+### 2. JSON\n+JSON stands for JavaScript Object Notation. It is a key-value pair text format for storing and retrieving data between client and server.\n+It is popular because it is human readable and easy to parse into objects.\n+The system treats JSON content as a string, making it easy to transmit data across clients, and saves it as a .json extension\n+\n+A sample JSON file:\n+```json\n+{\n+  \"name\": \"John Doe\",\n+  \"age\": 30,\n+  \"isStudent\": false,\n+  \"contact\": {\n+    \"email\": \"johndoe@example.com\",\n+    \"phone\": \"123-456-7890\"\n+  },\n+  \"hobbies\": [\"reading\", \"traveling\", \"coding\"]\n+}\n+\n+```\n+With its straightforward syntax, we can benefit from it by describing our geospatial data inside JSON\n+\n+### 3. GeoJSON \n+[`GeoJSON`](\"https://geojson.org/\") is a JSON file for encoding various geographical data structures.\n+It defines several JSON objects to represent geospatial information. We use the`.geojson` extension for GeoJSON files.\n+We define the most fundamental objects:\n+- `Geometry` refers to a single geometric shape that contains one or more coordinates. These shapes are visual objects displayed on a map. A geometry can be one of the following six types:\n+  - Point\n+  - MultiPoint\n+  - LineString\n+  - MultilineString\n+  - Polygon\n+  - MultiPolygon\n+- `Feautue` is a compound object that combines a single geometry with user-defined attributes, such as name, color.\n+- `FeatureCollection` is set of features stored in an array. It is a root object that introduces all other features.\n+\n+A typical GeoJSON file might look like:\n+```json\n+ {\n+  \"type\": \"FeatureCollection\",\n+  \"features\": [\n+    {\n+      \"type\": \"Feature\",\n+      \"properties\": {},\n+      \"geometry\": {\n+        \"type\": \"Polygon\",\n+        \"coordinates\": [\n+          [\n+            [\n+              -77.06867337226866,\n+              38.90467655551809\n+            ],\n+            [\n+              -77.06233263015747,\n+              38.90479344272695\n+            ],\n+            [\n+              -77.06234335899353,\n+              38.906463238984344\n+            ],\n+            [\n+              -77.06290125846863,\n+              38.907206285691615\n+            ],\n+            [\n+              -77.06364154815674,\n+              38.90684728656818\n+            ],\n+            [\n+              -77.06326603889465,\n+              38.90637140121084\n+            ],\n+            [\n+              -77.06321239471436,\n+              38.905561553883246\n+            ],\n+            [\n+              -77.0691454410553,\n+              38.905436318935635\n+            ],\n+            [\n+              -77.06912398338318,\n+              38.90466820642439\n+            ],\n+            [\n+              -77.06867337226866,\n+              38.90467655551809\n+            ]\n+          ]\n+        ]\n+      }\n+    }\n+  ]\n+}\n+```\n+So far we learned describing Geospatial data in GeoJSON files. We will start applying this knowledge into our map applications \n+\n+### 4. GeoJsonSource\n+As we discussed before, map requires some sort data to be rendered. We use different sources such as [`Vector`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-vector-source/index.html?query=class%20VectorSource%20:%20Source\"), [`Raster`](\"https://maplibre.org/maplibre-native/android/api/-map-libre%20-native%20-android/org.maplibre.android.style.sources/-raster-source/index.html?query=class%20RasterSource%20:%20Source\") and `GeoJSON`.\n+We will focus exclusively on `GeoJsonSource` and will not address other sources.\n+`GeoJsonSource` is a type of source that has a unique `String` ID and GeoJSON data.\n+\n+There are several ways to construct a `GeoJsonSource`:\n+- Locally stored files such as assets and raw folders\n+- Remote services \n+- Raw string  parsed into FeatureCollections objects\n+- Geometry, Feature, and FeatureCollection objects that map to GeoJSON Base builders\n+\n+A sample GeoJsonSource:\n+```kotlin\n+val source = GeoJsonSource(\"source\", featureCollection)\n+val lineLayer = LineLayer(\"layer\", \"source\")\n+    .withProperties(\n+        PropertyFactory.lineColor(Color.RED),\n+        PropertyFactory.lineWidth(10f)\n+    )\n+\n+style.addSource(source)\n+style.addLayer(lineLayer)\n+```\n+\n+Note that you can not simply show data on a map. Layers must reference them.\n+Therefore, you create a layer that gives visual appearance to it.\n+\n+- Loading from local files\n+\n+with assets folder file\n+```kotlin",
        "comment_created_at": "2024-11-02T16:58:48+00:00",
        "comment_author": "louwers",
        "comment_body": "All code snippets (except really small ones) should be referenced so that we can be sure they compile in the future.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1687786052",
    "pr_number": 2646,
    "pr_file": "docs/mdbook/src/android/map-options-guide.md",
    "created_at": "2024-07-23T10:00:22+00:00",
    "commented_code": "+# MapLibreMapOptions\n+This guide will explain different ways to create a map\n+\n+When working with maps there are chances of providing default values for MapView to render.\n+There are several ways to build MapView:\n+1. Providing existing XML namespace tags of MapView in layout\n+2. Creating `MapLibreMapOptions` and providing builder function values into MapView\n+3. Creating `SupportMapFragment` with the help of `MapLibreMapOptions`\n+\n+Before explaining MapView configurations we need to know what we can do with both XML namespaces and `MapLibreMaptions`\n+\n+\n+Common configurations can be set:\n+- Map base uri\n+- Camera\n+- Zoom\n+- Pitch\n+- Gestures\n+- Compass\n+- Logo\n+- Attribution\n+- Placement of above elements on the Map and more\n+\n+We will see how to achieve these configurations in XML layout and programmatically in Activity code step by step",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1687786052",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2646,
        "pr_file": "docs/mdbook/src/android/map-options-guide.md",
        "discussion_id": "1687786052",
        "commented_code": "@@ -0,0 +1,308 @@\n+# MapLibreMapOptions\n+This guide will explain different ways to create a map\n+\n+When working with maps there are chances of providing default values for MapView to render.\n+There are several ways to build MapView:\n+1. Providing existing XML namespace tags of MapView in layout\n+2. Creating `MapLibreMapOptions` and providing builder function values into MapView\n+3. Creating `SupportMapFragment` with the help of `MapLibreMapOptions`\n+\n+Before explaining MapView configurations we need to know what we can do with both XML namespaces and `MapLibreMaptions`\n+\n+\n+Common configurations can be set:\n+- Map base uri\n+- Camera\n+- Zoom\n+- Pitch\n+- Gestures\n+- Compass\n+- Logo\n+- Attribution\n+- Placement of above elements on the Map and more\n+\n+We will see how to achieve these configurations in XML layout and programmatically in Activity code step by step",
        "comment_created_at": "2024-07-23T10:00:22+00:00",
        "comment_author": "louwers",
        "comment_body": "Each section of the article should have a descriptive heading so people can easily skip to the part they are interested in.",
        "pr_file_module": null
      },
      {
        "comment_id": "1687789759",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2646,
        "pr_file": "docs/mdbook/src/android/map-options-guide.md",
        "discussion_id": "1687786052",
        "commented_code": "@@ -0,0 +1,308 @@\n+# MapLibreMapOptions\n+This guide will explain different ways to create a map\n+\n+When working with maps there are chances of providing default values for MapView to render.\n+There are several ways to build MapView:\n+1. Providing existing XML namespace tags of MapView in layout\n+2. Creating `MapLibreMapOptions` and providing builder function values into MapView\n+3. Creating `SupportMapFragment` with the help of `MapLibreMapOptions`\n+\n+Before explaining MapView configurations we need to know what we can do with both XML namespaces and `MapLibreMaptions`\n+\n+\n+Common configurations can be set:\n+- Map base uri\n+- Camera\n+- Zoom\n+- Pitch\n+- Gestures\n+- Compass\n+- Logo\n+- Attribution\n+- Placement of above elements on the Map and more\n+\n+We will see how to achieve these configurations in XML layout and programmatically in Activity code step by step",
        "comment_created_at": "2024-07-23T10:03:00+00:00",
        "comment_author": "jDilshodbek",
        "comment_body": "There are 3 sections of The Sample app. but  list of common configurations part is not detailed, is that ok to leave them as it is and , adding navigation to 3 sections on the heading section?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1687795262",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2646,
        "pr_file": "docs/mdbook/src/android/map-options-guide.md",
        "discussion_id": "1687786052",
        "commented_code": "@@ -0,0 +1,308 @@\n+# MapLibreMapOptions\n+This guide will explain different ways to create a map\n+\n+When working with maps there are chances of providing default values for MapView to render.\n+There are several ways to build MapView:\n+1. Providing existing XML namespace tags of MapView in layout\n+2. Creating `MapLibreMapOptions` and providing builder function values into MapView\n+3. Creating `SupportMapFragment` with the help of `MapLibreMapOptions`\n+\n+Before explaining MapView configurations we need to know what we can do with both XML namespaces and `MapLibreMaptions`\n+\n+\n+Common configurations can be set:\n+- Map base uri\n+- Camera\n+- Zoom\n+- Pitch\n+- Gestures\n+- Compass\n+- Logo\n+- Attribution\n+- Placement of above elements on the Map and more\n+\n+We will see how to achieve these configurations in XML layout and programmatically in Activity code step by step",
        "comment_created_at": "2024-07-23T10:07:15+00:00",
        "comment_author": "louwers",
        "comment_body": "Sections can be short, that is not a problem. But we should have a heading for each part of the article that covers a different concept.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1687791893",
    "pr_number": 2646,
    "pr_file": "docs/mdbook/src/android/map-options-guide.md",
    "created_at": "2024-07-23T10:04:34+00:00",
    "commented_code": "+# MapLibreMapOptions",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1687791893",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2646,
        "pr_file": "docs/mdbook/src/android/map-options-guide.md",
        "discussion_id": "1687791893",
        "commented_code": "@@ -0,0 +1,308 @@\n+# MapLibreMapOptions",
        "comment_created_at": "2024-07-23T10:04:34+00:00",
        "comment_author": "louwers",
        "comment_body": "Give the article a descriptive name that explains the contents of the article. \"Ways to Configure the Map\" or something similar.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1910627984",
    "pr_number": 3137,
    "pr_file": "docs/mdbook/src/rust.md",
    "created_at": "2025-01-10T16:31:09+00:00",
    "commented_code": "+# Rust\n+\n+We have added experimental support for intergrating Rust code into the source tree.\n+\n+## Rust Bridge\n+\n+The Rust bridge lives in `rustutils`. To regenerate the C++ bridge run the following script from the root of the repository.\n+\n+```\n+rustutils/cpp/generate.sh\n+```\n+\n+Check in the generated files under `rustutils/cpp`.\n+\n+We might intergrate this generation process into the build, but the tools to do so are experimental and immature as of January 2025.\n+\n+## Building\n+\n+You need to have the correct Rust toolchain(s) installed.",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1910627984",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 3137,
        "pr_file": "docs/mdbook/src/rust.md",
        "discussion_id": "1910627984",
        "commented_code": "@@ -0,0 +1,27 @@\n+# Rust\n+\n+We have added experimental support for intergrating Rust code into the source tree.\n+\n+## Rust Bridge\n+\n+The Rust bridge lives in `rustutils`. To regenerate the C++ bridge run the following script from the root of the repository.\n+\n+```\n+rustutils/cpp/generate.sh\n+```\n+\n+Check in the generated files under `rustutils/cpp`.\n+\n+We might intergrate this generation process into the build, but the tools to do so are experimental and immature as of January 2025.\n+\n+## Building\n+\n+You need to have the correct Rust toolchain(s) installed.",
        "comment_created_at": "2025-01-10T16:31:09+00:00",
        "comment_author": "nyurik",
        "comment_body": "We need to spell out the commands to install the needed rust toolchain here. \"needed\" is not clear.",
        "pr_file_module": null
      }
    ]
  }
]