[
  {
    "discussion_id": "1706984615",
    "pr_number": 2695,
    "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/http/LocalRequestTask.kt",
    "created_at": "2024-08-07T13:17:08+00:00",
    "commented_code": "+package org.maplibre.android.http\n+\n+import android.content.res.AssetManager\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+import org.maplibre.android.MapLibre\n+import org.maplibre.android.MapStrictMode\n+import org.maplibre.android.log.Logger\n+import java.io.IOException\n+import java.io.InputStream\n+\n+internal class LocalRequestTask(private val scope: CoroutineScope, private val onCompletion: ((ByteArray?) -> Unit)?) {\n+\n+\tfun execute(url: String) {\n+\t\tscope.launch(Dispatchers.IO) {",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1706984615",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2695,
        "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/http/LocalRequestTask.kt",
        "discussion_id": "1706984615",
        "commented_code": "@@ -0,0 +1,62 @@\n+package org.maplibre.android.http\n+\n+import android.content.res.AssetManager\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+import org.maplibre.android.MapLibre\n+import org.maplibre.android.MapStrictMode\n+import org.maplibre.android.log.Logger\n+import java.io.IOException\n+import java.io.InputStream\n+\n+internal class LocalRequestTask(private val scope: CoroutineScope, private val onCompletion: ((ByteArray?) -> Unit)?) {\n+\n+\tfun execute(url: String) {\n+\t\tscope.launch(Dispatchers.IO) {",
        "comment_created_at": "2024-08-07T13:17:08+00:00",
        "comment_author": "westnordost",
        "comment_body": "(This comment applies to other Tasks, too)\r\n\r\nThis task has no state and is internal to MapLibre, i.e. potentially does not interface with Java code. The idiomatic Kotlin way for this would look like this, i.e. not a class but a suspending function)\r\n\r\n```suggestion\r\nsuspend fun requestLocalUrl(url: String): ByteArray? = withContext(IO) {\r\n   loadFile(...)\r\n}\r\n```\r\n\r\nThe current approach causes a leak of the coroutine scope because the `LocalRequestTask` is not garbage collected as long as the owner of `LocalRequestTask` is not. No idea how serious it is, my guess would be: not at all, but 🤷‍♂️ - it is quite similar to the problem with `AsyncTask`, i.e. why that class was deprecated.\r\n\r\nNow, it seems like (currently) it does interface with Java code (`NativeHttpRequest.java`). Actually, not sure how suspending functions look like from Java-code, but according to [stackoverflow answers](https://www.google.de/search?q=suspend+functions+in+java+code+site:stackoverflow.com&sca_esv=1c866aa5bb9857de&sa=X&ved=2ahUKEwjfmfm5-eKHAxVEwAIHHUW7F40QrQIoBHoECCMQBQ&biw=2048&bih=999&dpr=1.25), one can wrap it quite easily in a Java `CompletableFuture`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1710211999",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2695,
        "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/http/LocalRequestTask.kt",
        "discussion_id": "1706984615",
        "commented_code": "@@ -0,0 +1,62 @@\n+package org.maplibre.android.http\n+\n+import android.content.res.AssetManager\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+import org.maplibre.android.MapLibre\n+import org.maplibre.android.MapStrictMode\n+import org.maplibre.android.log.Logger\n+import java.io.IOException\n+import java.io.InputStream\n+\n+internal class LocalRequestTask(private val scope: CoroutineScope, private val onCompletion: ((ByteArray?) -> Unit)?) {\n+\n+\tfun execute(url: String) {\n+\t\tscope.launch(Dispatchers.IO) {",
        "comment_created_at": "2024-08-08T20:07:24+00:00",
        "comment_author": "tarkvara",
        "comment_body": "If did look at the same StackOverflow article, and came to the conclusion that we could **not** easily do this.  The most promising approach required 1) an extra library and 2) SDK version 24+.  I didn't want to commit a change which bumped up our SDK version.\r\n\r\nIn any event, this code is only called from _NativeHttpRequest.java_, which is never used anywhere (hence the `@Keep` annotation).",
        "pr_file_module": null
      },
      {
        "comment_id": "1710279252",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2695,
        "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/http/LocalRequestTask.kt",
        "discussion_id": "1706984615",
        "commented_code": "@@ -0,0 +1,62 @@\n+package org.maplibre.android.http\n+\n+import android.content.res.AssetManager\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+import org.maplibre.android.MapLibre\n+import org.maplibre.android.MapStrictMode\n+import org.maplibre.android.log.Logger\n+import java.io.IOException\n+import java.io.InputStream\n+\n+internal class LocalRequestTask(private val scope: CoroutineScope, private val onCompletion: ((ByteArray?) -> Unit)?) {\n+\n+\tfun execute(url: String) {\n+\t\tscope.launch(Dispatchers.IO) {",
        "comment_created_at": "2024-08-08T20:48:57+00:00",
        "comment_author": "westnordost",
        "comment_body": "Try this. Doesn't it work? It is included in kotlinx-coroutines-core. \r\n\r\nhttps://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.future/\r\n\r\nI think that `org.jetbrains.kotlinx:kotlinx-coroutines-jdk8` library you probably meant is obsolete or something, at least the current version of it is completely empty. Note that that stackoverflow answer is more 6 years or so old.",
        "pr_file_module": null
      },
      {
        "comment_id": "1710320875",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2695,
        "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/http/LocalRequestTask.kt",
        "discussion_id": "1706984615",
        "commented_code": "@@ -0,0 +1,62 @@\n+package org.maplibre.android.http\n+\n+import android.content.res.AssetManager\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+import org.maplibre.android.MapLibre\n+import org.maplibre.android.MapStrictMode\n+import org.maplibre.android.log.Logger\n+import java.io.IOException\n+import java.io.InputStream\n+\n+internal class LocalRequestTask(private val scope: CoroutineScope, private val onCompletion: ((ByteArray?) -> Unit)?) {\n+\n+\tfun execute(url: String) {\n+\t\tscope.launch(Dispatchers.IO) {",
        "comment_created_at": "2024-08-08T21:27:45+00:00",
        "comment_author": "tarkvara",
        "comment_body": "Let me give that a try.  I'm not having any success getting that to compile.\r\n\r\nAre you sure it's supported back to SDK 21?",
        "pr_file_module": null
      },
      {
        "comment_id": "1710373128",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2695,
        "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/http/LocalRequestTask.kt",
        "discussion_id": "1706984615",
        "commented_code": "@@ -0,0 +1,62 @@\n+package org.maplibre.android.http\n+\n+import android.content.res.AssetManager\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+import org.maplibre.android.MapLibre\n+import org.maplibre.android.MapStrictMode\n+import org.maplibre.android.log.Logger\n+import java.io.IOException\n+import java.io.InputStream\n+\n+internal class LocalRequestTask(private val scope: CoroutineScope, private val onCompletion: ((ByteArray?) -> Unit)?) {\n+\n+\tfun execute(url: String) {\n+\t\tscope.launch(Dispatchers.IO) {",
        "comment_created_at": "2024-08-08T22:29:35+00:00",
        "comment_author": "westnordost",
        "comment_body": "Hm no, on a second look, it appears that `CompletableFuture` in Android is only supported starting with SDK 24, after all:\r\n\r\nhttps://developer.android.com/reference/java/util/concurrent/CompletableFuture\r\n\r\nSo it is not an issue with the coroutines library, but with Android.",
        "pr_file_module": null
      },
      {
        "comment_id": "1711249715",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2695,
        "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/http/LocalRequestTask.kt",
        "discussion_id": "1706984615",
        "commented_code": "@@ -0,0 +1,62 @@\n+package org.maplibre.android.http\n+\n+import android.content.res.AssetManager\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+import org.maplibre.android.MapLibre\n+import org.maplibre.android.MapStrictMode\n+import org.maplibre.android.log.Logger\n+import java.io.IOException\n+import java.io.InputStream\n+\n+internal class LocalRequestTask(private val scope: CoroutineScope, private val onCompletion: ((ByteArray?) -> Unit)?) {\n+\n+\tfun execute(url: String) {\n+\t\tscope.launch(Dispatchers.IO) {",
        "comment_created_at": "2024-08-09T10:51:55+00:00",
        "comment_author": "westnordost",
        "comment_body": "So, it looks like there is no easy way to interface suspending code to Android Java API 21+. \r\n\r\nOnly when the code that uses this has also been migrated to Kotlin it could be made more Kotlin-idiomatic.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1707001950",
    "pr_number": 2695,
    "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/maps/BitmapImageConversionTask.kt",
    "created_at": "2024-08-07T13:28:34+00:00",
    "commented_code": "+package org.maplibre.android.maps\n+\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.Job\n+import kotlinx.coroutines.SupervisorJob\n+import kotlinx.coroutines.launch\n+import org.maplibre.android.maps.Style.Builder.ImageWrapper\n+import java.lang.ref.WeakReference\n+\n+internal class BitmapImageConversionTask(\n+\tnativeMap: NativeMap,\n+) {\n+\tprivate val nativeMap = WeakReference(nativeMap)\n+\tprivate val job: Job = SupervisorJob(null)\n+\tprivate val scope = CoroutineScope(Dispatchers.IO + job)\n+\n+\tfun execute(vararg params: ImageWrapper) {\n+\t\tscope.launch {\n+\t\t\tval images = params.map { Style.toImage(it) }\n+\t\t\tval nativeMap = nativeMap.get()\n+\t\t\tif (nativeMap != null && !nativeMap.isDestroyed) {\n+\t\t\t\tnativeMap.addImages(images.toTypedArray())\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tfun cancel() {\n+\t\tjob.cancel()\n+\t}",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1707001950",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2695,
        "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/maps/BitmapImageConversionTask.kt",
        "discussion_id": "1707001950",
        "commented_code": "@@ -0,0 +1,31 @@\n+package org.maplibre.android.maps\n+\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.Job\n+import kotlinx.coroutines.SupervisorJob\n+import kotlinx.coroutines.launch\n+import org.maplibre.android.maps.Style.Builder.ImageWrapper\n+import java.lang.ref.WeakReference\n+\n+internal class BitmapImageConversionTask(\n+\tnativeMap: NativeMap,\n+) {\n+\tprivate val nativeMap = WeakReference(nativeMap)\n+\tprivate val job: Job = SupervisorJob(null)\n+\tprivate val scope = CoroutineScope(Dispatchers.IO + job)\n+\n+\tfun execute(vararg params: ImageWrapper) {\n+\t\tscope.launch {\n+\t\t\tval images = params.map { Style.toImage(it) }\n+\t\t\tval nativeMap = nativeMap.get()\n+\t\t\tif (nativeMap != null && !nativeMap.isDestroyed) {\n+\t\t\t\tnativeMap.addImages(images.toTypedArray())\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tfun cancel() {\n+\t\tjob.cancel()\n+\t}",
        "comment_created_at": "2024-08-07T13:28:34+00:00",
        "comment_author": "westnordost",
        "comment_body": "`launch` returns a `Job`. You could also return it in `execute`.\r\n\r\nIn any case, (separate issue), here you cancel the `SupervisorJob`, i.e. the parent job. After the `SupervisorJob` is cancelled, IIRC no new jobs can be launched in that job. IIRC subsequent calls to `execute` would then just immediately cancel. (But I didn't test this, maybe it would throw an IllegalStateException when trying to launch a new job in a cancelled supervisor job?)\r\nThat would be fine if the `BitmapImageConversionTask` is a single-use object, but then, why does it need a `SupervisorJob`? In any case, needs documentation.",
        "pr_file_module": null
      },
      {
        "comment_id": "1710228172",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2695,
        "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/maps/BitmapImageConversionTask.kt",
        "discussion_id": "1707001950",
        "commented_code": "@@ -0,0 +1,31 @@\n+package org.maplibre.android.maps\n+\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.Job\n+import kotlinx.coroutines.SupervisorJob\n+import kotlinx.coroutines.launch\n+import org.maplibre.android.maps.Style.Builder.ImageWrapper\n+import java.lang.ref.WeakReference\n+\n+internal class BitmapImageConversionTask(\n+\tnativeMap: NativeMap,\n+) {\n+\tprivate val nativeMap = WeakReference(nativeMap)\n+\tprivate val job: Job = SupervisorJob(null)\n+\tprivate val scope = CoroutineScope(Dispatchers.IO + job)\n+\n+\tfun execute(vararg params: ImageWrapper) {\n+\t\tscope.launch {\n+\t\t\tval images = params.map { Style.toImage(it) }\n+\t\t\tval nativeMap = nativeMap.get()\n+\t\t\tif (nativeMap != null && !nativeMap.isDestroyed) {\n+\t\t\t\tnativeMap.addImages(images.toTypedArray())\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tfun cancel() {\n+\t\tjob.cancel()\n+\t}",
        "comment_created_at": "2024-08-08T20:16:54+00:00",
        "comment_author": "tarkvara",
        "comment_body": "The `execute` call could potentially be launched several times.  The intent was that the `SupervisorJob` would cancel all of them.  Note that `BitmapImageConversionTask.cancel` is only called when the `Style` is cleared.\r\n\r\nI'll add a comment to clarify that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1707023158",
    "pr_number": 2695,
    "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/storage/FileDirsPathsTask.kt",
    "created_at": "2024-08-07T13:41:42+00:00",
    "commented_code": "+package org.maplibre.android.storage\n+\n+import android.content.Context\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+\n+class FileDirsPathsTask(\n+\tprivate val onCompletion: (resourcesCachePath: String, internalCachePath: String) -> Unit\n+) {\n+\tfun execute(context: Context) {\n+\t\tCoroutineScope(Dispatchers.IO).launch {",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1707023158",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2695,
        "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/storage/FileDirsPathsTask.kt",
        "discussion_id": "1707023158",
        "commented_code": "@@ -0,0 +1,25 @@\n+package org.maplibre.android.storage\n+\n+import android.content.Context\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+\n+class FileDirsPathsTask(\n+\tprivate val onCompletion: (resourcesCachePath: String, internalCachePath: String) -> Unit\n+) {\n+\tfun execute(context: Context) {\n+\t\tCoroutineScope(Dispatchers.IO).launch {",
        "comment_created_at": "2024-08-07T13:41:42+00:00",
        "comment_author": "westnordost",
        "comment_body": "Hmm, this reads a bit odd. I have to look up what it does... this is a global coroutine scope, right?\r\n\r\nI.e. it runs app-wide, independent of any e.g. view lifecycle. Is this what you want to do? Because, like other Tasks, this one has a callback. So, the callback is fired no matter what, even if the listener should have been removed already (out of lifecycle).\r\n\r\n(As for the other tasks, the Kotlin-idiomatic way would be to have this as a suspend function, i.e.\r\n```kotlin\r\nsuspend fun getResourcesCachePath(context: Context): String = \r\n    withContext(IO) { FileSource.getCachePath(context) }\r\n```\r\n(etc)",
        "pr_file_module": null
      },
      {
        "comment_id": "1710235586",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2695,
        "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/storage/FileDirsPathsTask.kt",
        "discussion_id": "1707023158",
        "commented_code": "@@ -0,0 +1,25 @@\n+package org.maplibre.android.storage\n+\n+import android.content.Context\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+\n+class FileDirsPathsTask(\n+\tprivate val onCompletion: (resourcesCachePath: String, internalCachePath: String) -> Unit\n+) {\n+\tfun execute(context: Context) {\n+\t\tCoroutineScope(Dispatchers.IO).launch {",
        "comment_created_at": "2024-08-08T20:21:42+00:00",
        "comment_author": "tarkvara",
        "comment_body": "I agree.  If we weren't trying to support SDK 21, the suspend function approach would be much more elegant.\r\n\r\nThe reason it has this weird scope is that there is no lifecycle object handy.  However, `FileSource` is a singleton which is never destroyed, so this seemed like the least-bad approach.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1707026269",
    "pr_number": 2695,
    "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/utils/FileUtils.kt",
    "created_at": "2024-08-07T13:43:16+00:00",
    "commented_code": "+package org.maplibre.android.utils\n+\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+import org.maplibre.android.log.Logger\n+import java.io.File\n+\n+object FileUtils {\n+\tprivate const val TAG = \"Mbgl-FileUtils\"\n+\n+\t/**\n+\t * Deletes a file asynchronously in a separate thread.\n+\t *\n+\t * @param path the path of the file that should be deleted\n+\t */\n+\tfun deleteFile(path: String) {\n+\t\t// Delete the file in a separate thread to avoid affecting the UI\n+\t\tThread {",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1707026269",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2695,
        "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/utils/FileUtils.kt",
        "discussion_id": "1707026269",
        "commented_code": "@@ -0,0 +1,75 @@\n+package org.maplibre.android.utils\n+\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+import org.maplibre.android.log.Logger\n+import java.io.File\n+\n+object FileUtils {\n+\tprivate const val TAG = \"Mbgl-FileUtils\"\n+\n+\t/**\n+\t * Deletes a file asynchronously in a separate thread.\n+\t *\n+\t * @param path the path of the file that should be deleted\n+\t */\n+\tfun deleteFile(path: String) {\n+\t\t// Delete the file in a separate thread to avoid affecting the UI\n+\t\tThread {",
        "comment_created_at": "2024-08-07T13:43:16+00:00",
        "comment_author": "westnordost",
        "comment_body": "Inconsistency. You should use a coroutine with IO dispatcher.",
        "pr_file_module": null
      },
      {
        "comment_id": "1710248019",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2695,
        "pr_file": "platform/android/MapLibreAndroid/src/main/java/org/maplibre/android/utils/FileUtils.kt",
        "discussion_id": "1707026269",
        "commented_code": "@@ -0,0 +1,75 @@\n+package org.maplibre.android.utils\n+\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+import org.maplibre.android.log.Logger\n+import java.io.File\n+\n+object FileUtils {\n+\tprivate const val TAG = \"Mbgl-FileUtils\"\n+\n+\t/**\n+\t * Deletes a file asynchronously in a separate thread.\n+\t *\n+\t * @param path the path of the file that should be deleted\n+\t */\n+\tfun deleteFile(path: String) {\n+\t\t// Delete the file in a separate thread to avoid affecting the UI\n+\t\tThread {",
        "comment_created_at": "2024-08-08T20:27:31+00:00",
        "comment_author": "tarkvara",
        "comment_body": "Missed this because I was only dealing with `AsyncTask` calls.  I'll fix it to be consistent.",
        "pr_file_module": null
      }
    ]
  }
]