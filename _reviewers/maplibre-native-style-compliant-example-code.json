[
  {
    "discussion_id": "1687792743",
    "pr_number": 2646,
    "pr_file": "docs/mdbook/src/android/map-options-guide.md",
    "created_at": "2024-07-23T10:05:13+00:00",
    "commented_code": "+# MapLibreMapOptions\n+This guide will explain different ways to create a map\n+\n+When working with maps there are chances of providing default values for MapView to render.\n+There are several ways to build MapView:\n+1. Providing existing XML namespace tags of MapView in layout\n+2. Creating `MapLibreMapOptions` and providing builder function values into MapView\n+3. Creating `SupportMapFragment` with the help of `MapLibreMapOptions`\n+\n+Before explaining MapView configurations we need to know what we can do with both XML namespaces and `MapLibreMaptions`\n+\n+\n+Common configurations can be set:\n+- Map base uri\n+- Camera\n+- Zoom\n+- Pitch\n+- Gestures\n+- Compass\n+- Logo\n+- Attribution\n+- Placement of above elements on the Map and more\n+\n+We will see how to achieve these configurations in XML layout and programmatically in Activity code step by step\n+\n+1. Creating MapView namespace and provide some data in layout file\n+  ```xml\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:id=\"@+id/main\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    tools:context=\".activity.options.MapOptionsXmlActivity\">\n+\n+    <org.maplibre.android.maps.MapView\n+        android:id=\"@+id/mapView\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"match_parent\"\n+        app:maplibre_apiBaseUri=\"https://api.maplibre.org\"\n+        app:maplibre_cameraBearing=\"34.0\"\n+        app:maplibre_cameraPitchMax=\"90.0\"\n+        app:maplibre_cameraPitchMin=\"0.0\"\n+        app:maplibre_cameraTargetLat=\"52.519003\"\n+        app:maplibre_cameraTargetLng=\"13.400972\"\n+        app:maplibre_cameraTilt=\"25.0\"\n+        app:maplibre_cameraZoom=\"16\"\n+        app:maplibre_cameraZoomMax=\"34.0\"\n+        app:maplibre_cameraZoomMin=\"15.0\"\n+        app:maplibre_localIdeographFontFamilies=\"@array/array_local_ideograph_family_test\"\n+        app:maplibre_localIdeographFontFamily=\"Droid Sans\"\n+        app:maplibre_uiCompass=\"true\"\n+        app:maplibre_uiCompassFadeFacingNorth=\"true\"\n+        app:maplibre_uiCompassGravity=\"top|end\"\n+        app:maplibre_uiDoubleTapGestures=\"true\"\n+        app:maplibre_uiHorizontalScrollGestures=\"true\"\n+        app:maplibre_uiRotateGestures=\"true\"\n+        app:maplibre_uiScrollGestures=\"true\"\n+        app:maplibre_uiTiltGestures=\"true\"\n+        app:maplibre_uiZoomGestures=\"true\" />\n+\n+</androidx.constraintlayout.widget.ConstraintLayout>\n+```\n+We can give any other existing values to `maplibre` tags and  only need to create Mapview and MapLibreMap objects with simple setup in Activity\n+```kotlin\n+class MapOptionsXmlActivity : AppCompatActivity(), OnMapReadyCallback {\n+    private lateinit var mapView: MapView\n+    private lateinit var maplibreMap: MapLibreMap\n+\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        setContentView(R.layout.activity_map_options_xml)\n+        mapView = findViewById(R.id.mapView)\n+        mapView.onCreate(savedInstanceState)\n+        mapView.getMapAsync(this)\n+    }\n+\n+    override fun onMapReady(maplibreMap: MapLibreMap) {\n+        this.maplibreMap = maplibreMap\n+        this.maplibreMap.setStyle(\n+            Style.Builder().fromUri(TestStyles.getPredefinedStyleWithFallback(\"Streets\"))",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1687792743",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2646,
        "pr_file": "docs/mdbook/src/android/map-options-guide.md",
        "discussion_id": "1687792743",
        "commented_code": "@@ -0,0 +1,308 @@\n+# MapLibreMapOptions\n+This guide will explain different ways to create a map\n+\n+When working with maps there are chances of providing default values for MapView to render.\n+There are several ways to build MapView:\n+1. Providing existing XML namespace tags of MapView in layout\n+2. Creating `MapLibreMapOptions` and providing builder function values into MapView\n+3. Creating `SupportMapFragment` with the help of `MapLibreMapOptions`\n+\n+Before explaining MapView configurations we need to know what we can do with both XML namespaces and `MapLibreMaptions`\n+\n+\n+Common configurations can be set:\n+- Map base uri\n+- Camera\n+- Zoom\n+- Pitch\n+- Gestures\n+- Compass\n+- Logo\n+- Attribution\n+- Placement of above elements on the Map and more\n+\n+We will see how to achieve these configurations in XML layout and programmatically in Activity code step by step\n+\n+1. Creating MapView namespace and provide some data in layout file\n+  ```xml\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:id=\"@+id/main\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    tools:context=\".activity.options.MapOptionsXmlActivity\">\n+\n+    <org.maplibre.android.maps.MapView\n+        android:id=\"@+id/mapView\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"match_parent\"\n+        app:maplibre_apiBaseUri=\"https://api.maplibre.org\"\n+        app:maplibre_cameraBearing=\"34.0\"\n+        app:maplibre_cameraPitchMax=\"90.0\"\n+        app:maplibre_cameraPitchMin=\"0.0\"\n+        app:maplibre_cameraTargetLat=\"52.519003\"\n+        app:maplibre_cameraTargetLng=\"13.400972\"\n+        app:maplibre_cameraTilt=\"25.0\"\n+        app:maplibre_cameraZoom=\"16\"\n+        app:maplibre_cameraZoomMax=\"34.0\"\n+        app:maplibre_cameraZoomMin=\"15.0\"\n+        app:maplibre_localIdeographFontFamilies=\"@array/array_local_ideograph_family_test\"\n+        app:maplibre_localIdeographFontFamily=\"Droid Sans\"\n+        app:maplibre_uiCompass=\"true\"\n+        app:maplibre_uiCompassFadeFacingNorth=\"true\"\n+        app:maplibre_uiCompassGravity=\"top|end\"\n+        app:maplibre_uiDoubleTapGestures=\"true\"\n+        app:maplibre_uiHorizontalScrollGestures=\"true\"\n+        app:maplibre_uiRotateGestures=\"true\"\n+        app:maplibre_uiScrollGestures=\"true\"\n+        app:maplibre_uiTiltGestures=\"true\"\n+        app:maplibre_uiZoomGestures=\"true\" />\n+\n+</androidx.constraintlayout.widget.ConstraintLayout>\n+```\n+We can give any other existing values to `maplibre` tags and  only need to create Mapview and MapLibreMap objects with simple setup in Activity\n+```kotlin\n+class MapOptionsXmlActivity : AppCompatActivity(), OnMapReadyCallback {\n+    private lateinit var mapView: MapView\n+    private lateinit var maplibreMap: MapLibreMap\n+\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        setContentView(R.layout.activity_map_options_xml)\n+        mapView = findViewById(R.id.mapView)\n+        mapView.onCreate(savedInstanceState)\n+        mapView.getMapAsync(this)\n+    }\n+\n+    override fun onMapReady(maplibreMap: MapLibreMap) {\n+        this.maplibreMap = maplibreMap\n+        this.maplibreMap.setStyle(\n+            Style.Builder().fromUri(TestStyles.getPredefinedStyleWithFallback(\"Streets\"))",
        "comment_created_at": "2024-07-23T10:05:13+00:00",
        "comment_author": "louwers",
        "comment_body": "Maybe don't use this because it is an internal class to the test app. Instead use something that users could copy paste in their own apps.",
        "pr_file_module": null
      },
      {
        "comment_id": "1687904981",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2646,
        "pr_file": "docs/mdbook/src/android/map-options-guide.md",
        "discussion_id": "1687792743",
        "commented_code": "@@ -0,0 +1,308 @@\n+# MapLibreMapOptions\n+This guide will explain different ways to create a map\n+\n+When working with maps there are chances of providing default values for MapView to render.\n+There are several ways to build MapView:\n+1. Providing existing XML namespace tags of MapView in layout\n+2. Creating `MapLibreMapOptions` and providing builder function values into MapView\n+3. Creating `SupportMapFragment` with the help of `MapLibreMapOptions`\n+\n+Before explaining MapView configurations we need to know what we can do with both XML namespaces and `MapLibreMaptions`\n+\n+\n+Common configurations can be set:\n+- Map base uri\n+- Camera\n+- Zoom\n+- Pitch\n+- Gestures\n+- Compass\n+- Logo\n+- Attribution\n+- Placement of above elements on the Map and more\n+\n+We will see how to achieve these configurations in XML layout and programmatically in Activity code step by step\n+\n+1. Creating MapView namespace and provide some data in layout file\n+  ```xml\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:id=\"@+id/main\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    tools:context=\".activity.options.MapOptionsXmlActivity\">\n+\n+    <org.maplibre.android.maps.MapView\n+        android:id=\"@+id/mapView\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"match_parent\"\n+        app:maplibre_apiBaseUri=\"https://api.maplibre.org\"\n+        app:maplibre_cameraBearing=\"34.0\"\n+        app:maplibre_cameraPitchMax=\"90.0\"\n+        app:maplibre_cameraPitchMin=\"0.0\"\n+        app:maplibre_cameraTargetLat=\"52.519003\"\n+        app:maplibre_cameraTargetLng=\"13.400972\"\n+        app:maplibre_cameraTilt=\"25.0\"\n+        app:maplibre_cameraZoom=\"16\"\n+        app:maplibre_cameraZoomMax=\"34.0\"\n+        app:maplibre_cameraZoomMin=\"15.0\"\n+        app:maplibre_localIdeographFontFamilies=\"@array/array_local_ideograph_family_test\"\n+        app:maplibre_localIdeographFontFamily=\"Droid Sans\"\n+        app:maplibre_uiCompass=\"true\"\n+        app:maplibre_uiCompassFadeFacingNorth=\"true\"\n+        app:maplibre_uiCompassGravity=\"top|end\"\n+        app:maplibre_uiDoubleTapGestures=\"true\"\n+        app:maplibre_uiHorizontalScrollGestures=\"true\"\n+        app:maplibre_uiRotateGestures=\"true\"\n+        app:maplibre_uiScrollGestures=\"true\"\n+        app:maplibre_uiTiltGestures=\"true\"\n+        app:maplibre_uiZoomGestures=\"true\" />\n+\n+</androidx.constraintlayout.widget.ConstraintLayout>\n+```\n+We can give any other existing values to `maplibre` tags and  only need to create Mapview and MapLibreMap objects with simple setup in Activity\n+```kotlin\n+class MapOptionsXmlActivity : AppCompatActivity(), OnMapReadyCallback {\n+    private lateinit var mapView: MapView\n+    private lateinit var maplibreMap: MapLibreMap\n+\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        setContentView(R.layout.activity_map_options_xml)\n+        mapView = findViewById(R.id.mapView)\n+        mapView.onCreate(savedInstanceState)\n+        mapView.getMapAsync(this)\n+    }\n+\n+    override fun onMapReady(maplibreMap: MapLibreMap) {\n+        this.maplibreMap = maplibreMap\n+        this.maplibreMap.setStyle(\n+            Style.Builder().fromUri(TestStyles.getPredefinedStyleWithFallback(\"Streets\"))",
        "comment_created_at": "2024-07-23T11:39:23+00:00",
        "comment_author": "jDilshodbek",
        "comment_body": "Do you mean I need to change how to apply style here , or full code here is inappropriate?",
        "pr_file_module": null
      },
      {
        "comment_id": "1687947499",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2646,
        "pr_file": "docs/mdbook/src/android/map-options-guide.md",
        "discussion_id": "1687792743",
        "commented_code": "@@ -0,0 +1,308 @@\n+# MapLibreMapOptions\n+This guide will explain different ways to create a map\n+\n+When working with maps there are chances of providing default values for MapView to render.\n+There are several ways to build MapView:\n+1. Providing existing XML namespace tags of MapView in layout\n+2. Creating `MapLibreMapOptions` and providing builder function values into MapView\n+3. Creating `SupportMapFragment` with the help of `MapLibreMapOptions`\n+\n+Before explaining MapView configurations we need to know what we can do with both XML namespaces and `MapLibreMaptions`\n+\n+\n+Common configurations can be set:\n+- Map base uri\n+- Camera\n+- Zoom\n+- Pitch\n+- Gestures\n+- Compass\n+- Logo\n+- Attribution\n+- Placement of above elements on the Map and more\n+\n+We will see how to achieve these configurations in XML layout and programmatically in Activity code step by step\n+\n+1. Creating MapView namespace and provide some data in layout file\n+  ```xml\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:id=\"@+id/main\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    tools:context=\".activity.options.MapOptionsXmlActivity\">\n+\n+    <org.maplibre.android.maps.MapView\n+        android:id=\"@+id/mapView\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"match_parent\"\n+        app:maplibre_apiBaseUri=\"https://api.maplibre.org\"\n+        app:maplibre_cameraBearing=\"34.0\"\n+        app:maplibre_cameraPitchMax=\"90.0\"\n+        app:maplibre_cameraPitchMin=\"0.0\"\n+        app:maplibre_cameraTargetLat=\"52.519003\"\n+        app:maplibre_cameraTargetLng=\"13.400972\"\n+        app:maplibre_cameraTilt=\"25.0\"\n+        app:maplibre_cameraZoom=\"16\"\n+        app:maplibre_cameraZoomMax=\"34.0\"\n+        app:maplibre_cameraZoomMin=\"15.0\"\n+        app:maplibre_localIdeographFontFamilies=\"@array/array_local_ideograph_family_test\"\n+        app:maplibre_localIdeographFontFamily=\"Droid Sans\"\n+        app:maplibre_uiCompass=\"true\"\n+        app:maplibre_uiCompassFadeFacingNorth=\"true\"\n+        app:maplibre_uiCompassGravity=\"top|end\"\n+        app:maplibre_uiDoubleTapGestures=\"true\"\n+        app:maplibre_uiHorizontalScrollGestures=\"true\"\n+        app:maplibre_uiRotateGestures=\"true\"\n+        app:maplibre_uiScrollGestures=\"true\"\n+        app:maplibre_uiTiltGestures=\"true\"\n+        app:maplibre_uiZoomGestures=\"true\" />\n+\n+</androidx.constraintlayout.widget.ConstraintLayout>\n+```\n+We can give any other existing values to `maplibre` tags and  only need to create Mapview and MapLibreMap objects with simple setup in Activity\n+```kotlin\n+class MapOptionsXmlActivity : AppCompatActivity(), OnMapReadyCallback {\n+    private lateinit var mapView: MapView\n+    private lateinit var maplibreMap: MapLibreMap\n+\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        setContentView(R.layout.activity_map_options_xml)\n+        mapView = findViewById(R.id.mapView)\n+        mapView.onCreate(savedInstanceState)\n+        mapView.getMapAsync(this)\n+    }\n+\n+    override fun onMapReady(maplibreMap: MapLibreMap) {\n+        this.maplibreMap = maplibreMap\n+        this.maplibreMap.setStyle(\n+            Style.Builder().fromUri(TestStyles.getPredefinedStyleWithFallback(\"Streets\"))",
        "comment_created_at": "2024-07-23T12:08:17+00:00",
        "comment_author": "louwers",
        "comment_body": "Yes just use a hardcoded style URL like demotiles.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1603645024",
    "pr_number": 2393,
    "pr_file": "platform/ios/MapLibre.docc/LocationPrivacyExample.md",
    "created_at": "2024-05-16T15:56:34+00:00",
    "commented_code": "case fullAccuracy\n }\n \n-class Coordinator: NSObject, MLNMapViewDelegate {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-    var pannedToUserLocation = false\n-\n-    init(mapView: Binding<MLNMapView>, locationAccuracy: Binding<LocationAccuracyState>) {\n-        _mapView = mapView\n-        _locationAccuracy = locationAccuracy\n-    }\n+@MainActor\n+class PrivacyExampleViewModel: NSObject, ObservableObject {\n+    @Published var locationAccuracy: LocationAccuracyState = .unknown\n+    @Published var showTemporaryLocationAuthorization = false\n+}\n \n-    func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n+class PrivacyExampleCoordinator: NSObject, MLNMapViewDelegate {\n+    @ObservedObject private var mapViewModel: PrivacyExampleViewModel\n+    private var pannedToUserLocation = false\n+    \n+    init(mapViewModel: PrivacyExampleViewModel) {\n+        self.mapViewModel = mapViewModel\n+        super.init()\n+    }\n+    \n+    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n         guard let accuracySetting = manager.accuracyAuthorization else {\n             return\n         }\n-\n+        \n         switch accuracySetting() {\n         case .fullAccuracy:\n-            locationAccuracy = .fullAccuracy\n+            mapViewModel.locationAccuracy = .fullAccuracy\n         case .reducedAccuracy:\n-            locationAccuracy = .reducedAccuracy\n+            mapViewModel.locationAccuracy = .reducedAccuracy\n         @unknown default:\n-            locationAccuracy = .unknown\n+            mapViewModel.locationAccuracy = .unknown\n         }\n     }\n \n     // when a location is available for the first time, we fly to it\n     func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {\n-        if pannedToUserLocation {\n-            return\n-        }\n+        guard !pannedToUserLocation else { return }\n         guard let userLocation = mapView.userLocation else {\n             print(\"User location is currently not available.\")\n             return\n         }\n         mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))\n+        pannedToUserLocation = true\n     }\n }\n \n-struct LocationPrivacyExample: UIViewRepresentable {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-\n-    func makeCoordinator() -> Coordinator {\n-        Coordinator(mapView: $mapView, locationAccuracy: $locationAccuracy)\n+struct PrivacyExampleRepresentable: UIViewRepresentable {\n+    @ObservedObject var mapViewModel: PrivacyExampleViewModel\n+    \n+    func makeCoordinator() -> PrivacyExampleCoordinator {\n+        PrivacyExampleCoordinator(mapViewModel: mapViewModel)\n     }\n \n     func makeUIView(context: Context) -> MLNMapView {\n         let mapView = MLNMapView()\n-        mapView.showsUserLocation = true\n         mapView.delegate = context.coordinator\n-\n+        mapView.showsUserLocation = true\n         return mapView\n     }\n \n-    func updateUIView(_: MLNMapView, context _: Context) {}\n+    func updateUIView(_ mapView: MLNMapView, context _: Context) {\n+        if mapViewModel.showTemporaryLocationAuthorization {\n+            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\n+            mapView.locationManager.requestTemporaryFullAccuracyAuthorization?(withPurposeKey: purposeKey)",
    "repo_full_name": "maplibre/maplibre-native",
    "discussion_comments": [
      {
        "comment_id": "1603645024",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2393,
        "pr_file": "platform/ios/MapLibre.docc/LocationPrivacyExample.md",
        "discussion_id": "1603645024",
        "commented_code": "@@ -40,75 +40,81 @@ enum LocationAccuracyState {\n     case fullAccuracy\n }\n \n-class Coordinator: NSObject, MLNMapViewDelegate {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-    var pannedToUserLocation = false\n-\n-    init(mapView: Binding<MLNMapView>, locationAccuracy: Binding<LocationAccuracyState>) {\n-        _mapView = mapView\n-        _locationAccuracy = locationAccuracy\n-    }\n+@MainActor\n+class PrivacyExampleViewModel: NSObject, ObservableObject {\n+    @Published var locationAccuracy: LocationAccuracyState = .unknown\n+    @Published var showTemporaryLocationAuthorization = false\n+}\n \n-    func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n+class PrivacyExampleCoordinator: NSObject, MLNMapViewDelegate {\n+    @ObservedObject private var mapViewModel: PrivacyExampleViewModel\n+    private var pannedToUserLocation = false\n+    \n+    init(mapViewModel: PrivacyExampleViewModel) {\n+        self.mapViewModel = mapViewModel\n+        super.init()\n+    }\n+    \n+    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n         guard let accuracySetting = manager.accuracyAuthorization else {\n             return\n         }\n-\n+        \n         switch accuracySetting() {\n         case .fullAccuracy:\n-            locationAccuracy = .fullAccuracy\n+            mapViewModel.locationAccuracy = .fullAccuracy\n         case .reducedAccuracy:\n-            locationAccuracy = .reducedAccuracy\n+            mapViewModel.locationAccuracy = .reducedAccuracy\n         @unknown default:\n-            locationAccuracy = .unknown\n+            mapViewModel.locationAccuracy = .unknown\n         }\n     }\n \n     // when a location is available for the first time, we fly to it\n     func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {\n-        if pannedToUserLocation {\n-            return\n-        }\n+        guard !pannedToUserLocation else { return }\n         guard let userLocation = mapView.userLocation else {\n             print(\"User location is currently not available.\")\n             return\n         }\n         mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))\n+        pannedToUserLocation = true\n     }\n }\n \n-struct LocationPrivacyExample: UIViewRepresentable {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-\n-    func makeCoordinator() -> Coordinator {\n-        Coordinator(mapView: $mapView, locationAccuracy: $locationAccuracy)\n+struct PrivacyExampleRepresentable: UIViewRepresentable {\n+    @ObservedObject var mapViewModel: PrivacyExampleViewModel\n+    \n+    func makeCoordinator() -> PrivacyExampleCoordinator {\n+        PrivacyExampleCoordinator(mapViewModel: mapViewModel)\n     }\n \n     func makeUIView(context: Context) -> MLNMapView {\n         let mapView = MLNMapView()\n-        mapView.showsUserLocation = true\n         mapView.delegate = context.coordinator\n-\n+        mapView.showsUserLocation = true\n         return mapView\n     }\n \n-    func updateUIView(_: MLNMapView, context _: Context) {}\n+    func updateUIView(_ mapView: MLNMapView, context _: Context) {\n+        if mapViewModel.showTemporaryLocationAuthorization {\n+            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\n+            mapView.locationManager.requestTemporaryFullAccuracyAuthorization?(withPurposeKey: purposeKey)",
        "comment_created_at": "2024-05-16T15:56:34+00:00",
        "comment_author": "hactar",
        "comment_body": "Nothing sets showTemporaryLocationAuthorization to false again, so any update will call that request function again once set to true. According to https://developer.apple.com/documentation/corelocation/cllocationmanager/3600217-requesttemporaryfullaccuracyauth there is a completion function, I think we should use that and set it back to false?",
        "pr_file_module": null
      },
      {
        "comment_id": "1603696327",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2393,
        "pr_file": "platform/ios/MapLibre.docc/LocationPrivacyExample.md",
        "discussion_id": "1603645024",
        "commented_code": "@@ -40,75 +40,81 @@ enum LocationAccuracyState {\n     case fullAccuracy\n }\n \n-class Coordinator: NSObject, MLNMapViewDelegate {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-    var pannedToUserLocation = false\n-\n-    init(mapView: Binding<MLNMapView>, locationAccuracy: Binding<LocationAccuracyState>) {\n-        _mapView = mapView\n-        _locationAccuracy = locationAccuracy\n-    }\n+@MainActor\n+class PrivacyExampleViewModel: NSObject, ObservableObject {\n+    @Published var locationAccuracy: LocationAccuracyState = .unknown\n+    @Published var showTemporaryLocationAuthorization = false\n+}\n \n-    func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n+class PrivacyExampleCoordinator: NSObject, MLNMapViewDelegate {\n+    @ObservedObject private var mapViewModel: PrivacyExampleViewModel\n+    private var pannedToUserLocation = false\n+    \n+    init(mapViewModel: PrivacyExampleViewModel) {\n+        self.mapViewModel = mapViewModel\n+        super.init()\n+    }\n+    \n+    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n         guard let accuracySetting = manager.accuracyAuthorization else {\n             return\n         }\n-\n+        \n         switch accuracySetting() {\n         case .fullAccuracy:\n-            locationAccuracy = .fullAccuracy\n+            mapViewModel.locationAccuracy = .fullAccuracy\n         case .reducedAccuracy:\n-            locationAccuracy = .reducedAccuracy\n+            mapViewModel.locationAccuracy = .reducedAccuracy\n         @unknown default:\n-            locationAccuracy = .unknown\n+            mapViewModel.locationAccuracy = .unknown\n         }\n     }\n \n     // when a location is available for the first time, we fly to it\n     func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {\n-        if pannedToUserLocation {\n-            return\n-        }\n+        guard !pannedToUserLocation else { return }\n         guard let userLocation = mapView.userLocation else {\n             print(\"User location is currently not available.\")\n             return\n         }\n         mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))\n+        pannedToUserLocation = true\n     }\n }\n \n-struct LocationPrivacyExample: UIViewRepresentable {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-\n-    func makeCoordinator() -> Coordinator {\n-        Coordinator(mapView: $mapView, locationAccuracy: $locationAccuracy)\n+struct PrivacyExampleRepresentable: UIViewRepresentable {\n+    @ObservedObject var mapViewModel: PrivacyExampleViewModel\n+    \n+    func makeCoordinator() -> PrivacyExampleCoordinator {\n+        PrivacyExampleCoordinator(mapViewModel: mapViewModel)\n     }\n \n     func makeUIView(context: Context) -> MLNMapView {\n         let mapView = MLNMapView()\n-        mapView.showsUserLocation = true\n         mapView.delegate = context.coordinator\n-\n+        mapView.showsUserLocation = true\n         return mapView\n     }\n \n-    func updateUIView(_: MLNMapView, context _: Context) {}\n+    func updateUIView(_ mapView: MLNMapView, context _: Context) {\n+        if mapViewModel.showTemporaryLocationAuthorization {\n+            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\n+            mapView.locationManager.requestTemporaryFullAccuracyAuthorization?(withPurposeKey: purposeKey)",
        "comment_created_at": "2024-05-16T16:30:22+00:00",
        "comment_author": "voncannon",
        "comment_body": "That is part of the problem I have with `UIViewRepresentable` \r\n\r\nWe have a published prop `showTemporaryLocationAuthorization` that will trigger a `updateUIView` update, but then inside `updateUIView` if we yet set `showTemporaryLocationAuthorization` back to false, it technically triggers another `updateUIView`. Now in this case, we have a bool we can check, but still. It just feels \"meh\" to me.\r\n\r\nSo let's take this as an example of setting `showTemporaryLocationAuthorization` back to false:\r\n\r\n```\r\nfunc updateUIView(_ mapView: MLNMapView, context _: Context) {\r\n        if mapViewModel.showTemporaryLocationAuthorization {\r\n            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\r\n            mapView.locationManager.requestTemporaryFullAccuracyAuthorization?(withPurposeKey: purposeKey)\r\n            mapViewModel.showTemporaryLocationAuthorization = false\r\n        }\r\n    }\r\n```\r\nWhen try that, we even get a warning about it:\r\n\r\n<img width=\"1530\" alt=\"tears\" src=\"https://github.com/maplibre/maplibre-native/assets/2292621/153bea6d-a0aa-47b1-9f69-90141097ac66\">\r\n\r\nI have read so people dealing and fighting with `UIViewRepresentable` like this, examples:\r\n\r\n1. https://stackoverflow.com/a/76919202\r\n2. https://www.reddit.com/r/SwiftUI/comments/kti9r9/uiviewrepresentable_how_to_update_bindings/\r\n3. there are millions more I won't link to\r\n\r\nSo to fix that warning people are wrapping it in a dispatch to main, which I don't like personally:\r\n\r\n```\r\n    func updateUIView(_ mapView: MLNMapView, context _: Context) {\r\n        if mapViewModel.showTemporaryLocationAuthorization {\r\n            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\r\n            mapView.locationManager.requestTemporaryFullAccuracyAuthorization?(withPurposeKey: purposeKey)\r\n            DispatchQueue.main.async {\r\n                mapViewModel.showTemporaryLocationAuthorization = false\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n\r\nAnd also, to your comment about `CLLocationManager` having a completion callback, this example uses `MLNLocationManager` which wraps `CLLocatonManager`, and maplbire MLNLocationManager's version of  `requestTemporaryFullAccuracyAuthorization` hasn't been updated to support the completion callback from what I can tell... unless I'm just missing it for some reason... can you double check please?\r\n\r\nAlso, this brings up one of your points in  our [Slack discussion](https://osmus.slack.com/archives/C06U5MM097B/p1715614940371019?thread_ts=1715612553.323529&cid=C06U5MM097B) about most apps they have their own Location Manager functionality, but I think @louwers intention was to keep these examples small and to the point and adding yet another class / code to handle location manager increases the complexity of the example.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1603714831",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2393,
        "pr_file": "platform/ios/MapLibre.docc/LocationPrivacyExample.md",
        "discussion_id": "1603645024",
        "commented_code": "@@ -40,75 +40,81 @@ enum LocationAccuracyState {\n     case fullAccuracy\n }\n \n-class Coordinator: NSObject, MLNMapViewDelegate {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-    var pannedToUserLocation = false\n-\n-    init(mapView: Binding<MLNMapView>, locationAccuracy: Binding<LocationAccuracyState>) {\n-        _mapView = mapView\n-        _locationAccuracy = locationAccuracy\n-    }\n+@MainActor\n+class PrivacyExampleViewModel: NSObject, ObservableObject {\n+    @Published var locationAccuracy: LocationAccuracyState = .unknown\n+    @Published var showTemporaryLocationAuthorization = false\n+}\n \n-    func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n+class PrivacyExampleCoordinator: NSObject, MLNMapViewDelegate {\n+    @ObservedObject private var mapViewModel: PrivacyExampleViewModel\n+    private var pannedToUserLocation = false\n+    \n+    init(mapViewModel: PrivacyExampleViewModel) {\n+        self.mapViewModel = mapViewModel\n+        super.init()\n+    }\n+    \n+    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n         guard let accuracySetting = manager.accuracyAuthorization else {\n             return\n         }\n-\n+        \n         switch accuracySetting() {\n         case .fullAccuracy:\n-            locationAccuracy = .fullAccuracy\n+            mapViewModel.locationAccuracy = .fullAccuracy\n         case .reducedAccuracy:\n-            locationAccuracy = .reducedAccuracy\n+            mapViewModel.locationAccuracy = .reducedAccuracy\n         @unknown default:\n-            locationAccuracy = .unknown\n+            mapViewModel.locationAccuracy = .unknown\n         }\n     }\n \n     // when a location is available for the first time, we fly to it\n     func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {\n-        if pannedToUserLocation {\n-            return\n-        }\n+        guard !pannedToUserLocation else { return }\n         guard let userLocation = mapView.userLocation else {\n             print(\"User location is currently not available.\")\n             return\n         }\n         mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))\n+        pannedToUserLocation = true\n     }\n }\n \n-struct LocationPrivacyExample: UIViewRepresentable {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-\n-    func makeCoordinator() -> Coordinator {\n-        Coordinator(mapView: $mapView, locationAccuracy: $locationAccuracy)\n+struct PrivacyExampleRepresentable: UIViewRepresentable {\n+    @ObservedObject var mapViewModel: PrivacyExampleViewModel\n+    \n+    func makeCoordinator() -> PrivacyExampleCoordinator {\n+        PrivacyExampleCoordinator(mapViewModel: mapViewModel)\n     }\n \n     func makeUIView(context: Context) -> MLNMapView {\n         let mapView = MLNMapView()\n-        mapView.showsUserLocation = true\n         mapView.delegate = context.coordinator\n-\n+        mapView.showsUserLocation = true\n         return mapView\n     }\n \n-    func updateUIView(_: MLNMapView, context _: Context) {}\n+    func updateUIView(_ mapView: MLNMapView, context _: Context) {\n+        if mapViewModel.showTemporaryLocationAuthorization {\n+            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\n+            mapView.locationManager.requestTemporaryFullAccuracyAuthorization?(withPurposeKey: purposeKey)",
        "comment_created_at": "2024-05-16T16:43:21+00:00",
        "comment_author": "voncannon",
        "comment_body": "But to your comment regarding `I think we should use that and set it back to false?`, I agree \ud83d\udcaf  ... but what am I missing with `UIViewRepresentable`?\r\n\r\nThis is why In my app I do not use `updateUIView`, but instead keep a weak reference to the underlying view. I know that seems worse, but it actually makes it so much cleaner.\r\n\r\nFor example, [look at this where people are using MKMapView](https://stackoverflow.com/a/73041182) and their implementation removes/adds annotations each update!\r\n\r\nI mean that will work, but that seems highly unnecessary. \r\n\r\nAnd in most large apps we are going to have so many computed props and bindings that need to interface with `MLNMapView`, imagine how much unnecessary work will be done.\r\n\r\nThoughts? Suggestions? \r\n\r\n\ud83d\ude04 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1604032000",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2393,
        "pr_file": "platform/ios/MapLibre.docc/LocationPrivacyExample.md",
        "discussion_id": "1603645024",
        "commented_code": "@@ -40,75 +40,81 @@ enum LocationAccuracyState {\n     case fullAccuracy\n }\n \n-class Coordinator: NSObject, MLNMapViewDelegate {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-    var pannedToUserLocation = false\n-\n-    init(mapView: Binding<MLNMapView>, locationAccuracy: Binding<LocationAccuracyState>) {\n-        _mapView = mapView\n-        _locationAccuracy = locationAccuracy\n-    }\n+@MainActor\n+class PrivacyExampleViewModel: NSObject, ObservableObject {\n+    @Published var locationAccuracy: LocationAccuracyState = .unknown\n+    @Published var showTemporaryLocationAuthorization = false\n+}\n \n-    func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n+class PrivacyExampleCoordinator: NSObject, MLNMapViewDelegate {\n+    @ObservedObject private var mapViewModel: PrivacyExampleViewModel\n+    private var pannedToUserLocation = false\n+    \n+    init(mapViewModel: PrivacyExampleViewModel) {\n+        self.mapViewModel = mapViewModel\n+        super.init()\n+    }\n+    \n+    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n         guard let accuracySetting = manager.accuracyAuthorization else {\n             return\n         }\n-\n+        \n         switch accuracySetting() {\n         case .fullAccuracy:\n-            locationAccuracy = .fullAccuracy\n+            mapViewModel.locationAccuracy = .fullAccuracy\n         case .reducedAccuracy:\n-            locationAccuracy = .reducedAccuracy\n+            mapViewModel.locationAccuracy = .reducedAccuracy\n         @unknown default:\n-            locationAccuracy = .unknown\n+            mapViewModel.locationAccuracy = .unknown\n         }\n     }\n \n     // when a location is available for the first time, we fly to it\n     func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {\n-        if pannedToUserLocation {\n-            return\n-        }\n+        guard !pannedToUserLocation else { return }\n         guard let userLocation = mapView.userLocation else {\n             print(\"User location is currently not available.\")\n             return\n         }\n         mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))\n+        pannedToUserLocation = true\n     }\n }\n \n-struct LocationPrivacyExample: UIViewRepresentable {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-\n-    func makeCoordinator() -> Coordinator {\n-        Coordinator(mapView: $mapView, locationAccuracy: $locationAccuracy)\n+struct PrivacyExampleRepresentable: UIViewRepresentable {\n+    @ObservedObject var mapViewModel: PrivacyExampleViewModel\n+    \n+    func makeCoordinator() -> PrivacyExampleCoordinator {\n+        PrivacyExampleCoordinator(mapViewModel: mapViewModel)\n     }\n \n     func makeUIView(context: Context) -> MLNMapView {\n         let mapView = MLNMapView()\n-        mapView.showsUserLocation = true\n         mapView.delegate = context.coordinator\n-\n+        mapView.showsUserLocation = true\n         return mapView\n     }\n \n-    func updateUIView(_: MLNMapView, context _: Context) {}\n+    func updateUIView(_ mapView: MLNMapView, context _: Context) {\n+        if mapViewModel.showTemporaryLocationAuthorization {\n+            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\n+            mapView.locationManager.requestTemporaryFullAccuracyAuthorization?(withPurposeKey: purposeKey)",
        "comment_created_at": "2024-05-16T20:57:40+00:00",
        "comment_author": "voncannon",
        "comment_body": "More links:\r\n\r\n1. https://stackoverflow.com/questions/58460847/calling-a-local-uiviewcontroller-function-from-a-swiftui-view#comment113325151_61099536\r\n2. https://stackoverflow.com/questions/58039286/how-do-you-call-a-method-on-a-uiview-from-outside-the-uiviewrepresentable-in-swi\r\n3. https://stackoverflow.com/questions/56584059/send-tapaction-from-swiftui-button-action-to-uiview-function\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1604046059",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2393,
        "pr_file": "platform/ios/MapLibre.docc/LocationPrivacyExample.md",
        "discussion_id": "1603645024",
        "commented_code": "@@ -40,75 +40,81 @@ enum LocationAccuracyState {\n     case fullAccuracy\n }\n \n-class Coordinator: NSObject, MLNMapViewDelegate {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-    var pannedToUserLocation = false\n-\n-    init(mapView: Binding<MLNMapView>, locationAccuracy: Binding<LocationAccuracyState>) {\n-        _mapView = mapView\n-        _locationAccuracy = locationAccuracy\n-    }\n+@MainActor\n+class PrivacyExampleViewModel: NSObject, ObservableObject {\n+    @Published var locationAccuracy: LocationAccuracyState = .unknown\n+    @Published var showTemporaryLocationAuthorization = false\n+}\n \n-    func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n+class PrivacyExampleCoordinator: NSObject, MLNMapViewDelegate {\n+    @ObservedObject private var mapViewModel: PrivacyExampleViewModel\n+    private var pannedToUserLocation = false\n+    \n+    init(mapViewModel: PrivacyExampleViewModel) {\n+        self.mapViewModel = mapViewModel\n+        super.init()\n+    }\n+    \n+    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n         guard let accuracySetting = manager.accuracyAuthorization else {\n             return\n         }\n-\n+        \n         switch accuracySetting() {\n         case .fullAccuracy:\n-            locationAccuracy = .fullAccuracy\n+            mapViewModel.locationAccuracy = .fullAccuracy\n         case .reducedAccuracy:\n-            locationAccuracy = .reducedAccuracy\n+            mapViewModel.locationAccuracy = .reducedAccuracy\n         @unknown default:\n-            locationAccuracy = .unknown\n+            mapViewModel.locationAccuracy = .unknown\n         }\n     }\n \n     // when a location is available for the first time, we fly to it\n     func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {\n-        if pannedToUserLocation {\n-            return\n-        }\n+        guard !pannedToUserLocation else { return }\n         guard let userLocation = mapView.userLocation else {\n             print(\"User location is currently not available.\")\n             return\n         }\n         mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))\n+        pannedToUserLocation = true\n     }\n }\n \n-struct LocationPrivacyExample: UIViewRepresentable {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-\n-    func makeCoordinator() -> Coordinator {\n-        Coordinator(mapView: $mapView, locationAccuracy: $locationAccuracy)\n+struct PrivacyExampleRepresentable: UIViewRepresentable {\n+    @ObservedObject var mapViewModel: PrivacyExampleViewModel\n+    \n+    func makeCoordinator() -> PrivacyExampleCoordinator {\n+        PrivacyExampleCoordinator(mapViewModel: mapViewModel)\n     }\n \n     func makeUIView(context: Context) -> MLNMapView {\n         let mapView = MLNMapView()\n-        mapView.showsUserLocation = true\n         mapView.delegate = context.coordinator\n-\n+        mapView.showsUserLocation = true\n         return mapView\n     }\n \n-    func updateUIView(_: MLNMapView, context _: Context) {}\n+    func updateUIView(_ mapView: MLNMapView, context _: Context) {\n+        if mapViewModel.showTemporaryLocationAuthorization {\n+            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\n+            mapView.locationManager.requestTemporaryFullAccuracyAuthorization?(withPurposeKey: purposeKey)",
        "comment_created_at": "2024-05-16T21:09:57+00:00",
        "comment_author": "hactar",
        "comment_body": "This \"inefficient\" recreation is completely normal in SwiftUI. At the end of the day, it doesn't matter if update is called a few times - per runloop iteration its grouped together, so will only be called once - and as long as the recreation takes microseconds, it will have no impact on users. I know at every developers heart is efficiency - it took me quite a while to get used to this new paradigm too, but SwiftUI takes the \"premature optimization is the root of all evil\" approach: don't worry about it until you actually have a perceivable impact on performance, and if you ever do, then you can start optimizing - in our case this will have no perceivable impact.\r\n\r\nBut you are right, we need to remove that \"Publishing changes from within view updates is not allowed, this will cause undefined behavior.\" issue. I assume that if we did have access to the \"completion\" version of requestTemporaryFullAccuracyAuthorization and call showTemporaryLocationAuthorization = false there, this error would not appear. So we either need to expose that function or, if we're looking for a quick and dirty solution, then yes we need to do the workaround with DispatchQueue.main.async.\r\n\r\nAs mentioned, I use my own location manager instead of maplibre's - a modified version of https://github.com/malcommac/SwiftLocation, this allows me to create this code for permission requests:\r\n\r\n```Swift\r\n MapView(styleURL: styleURL, camera: $camera) // this is based on maplibre-swiftui-dsl-playground\r\n            .task {\r\n                for await event in await locationManager.startMonitoringAuthorization() {\r\n                    print(\"Authorization status did change: \\(event.authorizationStatus)\")\r\n                    // break to interrupt the stream\r\n                    if event.authorizationStatus == .authorizedWhenInUse {\r\n                        showUserLocation = true\r\n                    } else {\r\n                        showUserLocation = false\r\n                    }\r\n                }\r\n            }\r\n            .task {\r\n                showUserLocation = locationManager.authorizationStatus == .authorizedWhenInUse\r\n            }\r\n```\r\n\r\nAnd this is then a button to get the current location:\r\n\r\n```Swift\r\n        Button {\r\n            Task {\r\n                do {\r\n                    location.accuracy = .threeKilometers\r\n                    try await location.requestPermission(.whenInUse) // obtain the permissions\r\n                    let userLocation = try await location.requestLocation()\r\n                    \r\n                    if let coordinates = userLocation.location?.coordinate {\r\n                        withAnimation {\r\n                            camera = MapViewCamera.center(coordinates, zoom: 17)\r\n                            \r\n                        }\r\n                    } else {\r\n                        print(\"location error: got no coordinates\")\r\n                    }\r\n                } catch {\r\n                    print(\"location error: \\(error)\")\r\n                }\r\n            }\r\n        } label: {\r\n            Image(systemName: \"location\")\r\n        }\r\n```\r\nThe code is clean, uses async/await, and changes \"showUserLocation\" based on changes to permissions - with permissions its on, without permissions its off and does not trigger a permission request.\r\n\r\nI'm not suggesting we use https://github.com/malcommac/SwiftLocation in the official maplibre examples, but if we have an example, we need to decide if its supposed to be a \"best practice\" example or a \"quick and dirty get it up and running\" example. Personally I'd argue for \"best practice, even if more complicated\" because people will copy and paste our examples into their code and location management is not an easy task. But I do understand that complicated examples could scare off devs too. \ud83e\udd37\u200d\u2642\ufe0f",
        "pr_file_module": null
      },
      {
        "comment_id": "1604147813",
        "repo_full_name": "maplibre/maplibre-native",
        "pr_number": 2393,
        "pr_file": "platform/ios/MapLibre.docc/LocationPrivacyExample.md",
        "discussion_id": "1603645024",
        "commented_code": "@@ -40,75 +40,81 @@ enum LocationAccuracyState {\n     case fullAccuracy\n }\n \n-class Coordinator: NSObject, MLNMapViewDelegate {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-    var pannedToUserLocation = false\n-\n-    init(mapView: Binding<MLNMapView>, locationAccuracy: Binding<LocationAccuracyState>) {\n-        _mapView = mapView\n-        _locationAccuracy = locationAccuracy\n-    }\n+@MainActor\n+class PrivacyExampleViewModel: NSObject, ObservableObject {\n+    @Published var locationAccuracy: LocationAccuracyState = .unknown\n+    @Published var showTemporaryLocationAuthorization = false\n+}\n \n-    func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n+class PrivacyExampleCoordinator: NSObject, MLNMapViewDelegate {\n+    @ObservedObject private var mapViewModel: PrivacyExampleViewModel\n+    private var pannedToUserLocation = false\n+    \n+    init(mapViewModel: PrivacyExampleViewModel) {\n+        self.mapViewModel = mapViewModel\n+        super.init()\n+    }\n+    \n+    @MainActor func mapView(_: MLNMapView, didChangeLocationManagerAuthorization manager: MLNLocationManager) {\n         guard let accuracySetting = manager.accuracyAuthorization else {\n             return\n         }\n-\n+        \n         switch accuracySetting() {\n         case .fullAccuracy:\n-            locationAccuracy = .fullAccuracy\n+            mapViewModel.locationAccuracy = .fullAccuracy\n         case .reducedAccuracy:\n-            locationAccuracy = .reducedAccuracy\n+            mapViewModel.locationAccuracy = .reducedAccuracy\n         @unknown default:\n-            locationAccuracy = .unknown\n+            mapViewModel.locationAccuracy = .unknown\n         }\n     }\n \n     // when a location is available for the first time, we fly to it\n     func mapView(_ mapView: MLNMapView, didUpdate _: MLNUserLocation?) {\n-        if pannedToUserLocation {\n-            return\n-        }\n+        guard !pannedToUserLocation else { return }\n         guard let userLocation = mapView.userLocation else {\n             print(\"User location is currently not available.\")\n             return\n         }\n         mapView.fly(to: MLNMapCamera(lookingAtCenter: userLocation.coordinate, altitude: 100_000, pitch: 0, heading: 0))\n+        pannedToUserLocation = true\n     }\n }\n \n-struct LocationPrivacyExample: UIViewRepresentable {\n-    @Binding var mapView: MLNMapView\n-    @Binding var locationAccuracy: LocationAccuracyState\n-\n-    func makeCoordinator() -> Coordinator {\n-        Coordinator(mapView: $mapView, locationAccuracy: $locationAccuracy)\n+struct PrivacyExampleRepresentable: UIViewRepresentable {\n+    @ObservedObject var mapViewModel: PrivacyExampleViewModel\n+    \n+    func makeCoordinator() -> PrivacyExampleCoordinator {\n+        PrivacyExampleCoordinator(mapViewModel: mapViewModel)\n     }\n \n     func makeUIView(context: Context) -> MLNMapView {\n         let mapView = MLNMapView()\n-        mapView.showsUserLocation = true\n         mapView.delegate = context.coordinator\n-\n+        mapView.showsUserLocation = true\n         return mapView\n     }\n \n-    func updateUIView(_: MLNMapView, context _: Context) {}\n+    func updateUIView(_ mapView: MLNMapView, context _: Context) {\n+        if mapViewModel.showTemporaryLocationAuthorization {\n+            let purposeKey = \"MLNAccuracyAuthorizationDescription\"\n+            mapView.locationManager.requestTemporaryFullAccuracyAuthorization?(withPurposeKey: purposeKey)",
        "comment_created_at": "2024-05-16T23:00:17+00:00",
        "comment_author": "louwers",
        "comment_body": "> Personally I'd argue for \"best practice, even if more complicated\" because people will copy and paste our examples into their code and location management is not an easy task.\r\n\r\nFully agreed. Even an example with an external dependency would be fine by me. Let's not forget the iOS MapLibre codebase is quite rusty, so it should not be surprising some things are not very modern anymore.\r\n\r\nI'm just transplanting some examples from https://github.com/mapbox/ios-sdk-examples, I'm not a veteran iOS developer like you, so I am happy for your critical eye!",
        "pr_file_module": null
      }
    ]
  }
]