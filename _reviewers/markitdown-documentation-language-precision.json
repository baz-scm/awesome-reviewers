[
  {
    "discussion_id": "1949735490",
    "pr_number": 318,
    "pr_file": "packages/markitdown/README.md",
    "created_at": "2025-02-10T19:14:31+00:00",
    "commented_code": null,
    "repo_full_name": "microsoft/markitdown",
    "discussion_comments": [
      {
        "comment_id": "1949735490",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 318,
        "pr_file": "packages/markitdown/README.md",
        "discussion_id": "1949735490",
        "commented_code": null,
        "comment_created_at": "2025-02-10T19:14:31+00:00",
        "comment_author": "gagb",
        "comment_body": "This is a copy of root README, which does not seem right. This README need to just explain this package and point back to root README for more info.",
        "pr_file_module": null
      },
      {
        "comment_id": "1949782255",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 318,
        "pr_file": "packages/markitdown/README.md",
        "discussion_id": "1949735490",
        "commented_code": null,
        "comment_created_at": "2025-02-10T19:46:50+00:00",
        "comment_author": "afourney",
        "comment_body": "It's a little challenging, because the README for markitdown is what get sent to PyPi... so I want it to be complete. Meanwhile the README for the repo, is what shows for github, so I want that to be complete too. Open to suggestions. Ideally, the PyPi readme would load from the root, but this is not possible.",
        "pr_file_module": null
      },
      {
        "comment_id": "1949931898",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 318,
        "pr_file": "packages/markitdown/README.md",
        "discussion_id": "1949735490",
        "commented_code": null,
        "comment_created_at": "2025-02-10T21:39:13+00:00",
        "comment_author": "gagb",
        "comment_body": "Sounds good. They could be mirrors. But update install instructions and add details about plugins.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1890772614",
    "pr_number": 91,
    "pr_file": "README.md",
    "created_at": "2024-12-18T20:01:49+00:00",
    "commented_code": "docker build -t markitdown:latest .\n docker run --rm -i markitdown:latest < ~/your-file.pdf > output.md\n ```\n+<details>\n+    \n+<summary>Batch Processing Multiple Files</summary>\n \n+This extension allows you to convert multiple files to markdown format in a single run. The script processes all supported files in a directory and creates corresponding markdown files.",
    "repo_full_name": "microsoft/markitdown",
    "discussion_comments": [
      {
        "comment_id": "1890772614",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 91,
        "pr_file": "README.md",
        "discussion_id": "1890772614",
        "commented_code": "@@ -60,7 +60,55 @@ print(result.text_content)\n docker build -t markitdown:latest .\n docker run --rm -i markitdown:latest < ~/your-file.pdf > output.md\n ```\n+<details>\n+    \n+<summary>Batch Processing Multiple Files</summary>\n \n+This extension allows you to convert multiple files to markdown format in a single run. The script processes all supported files in a directory and creates corresponding markdown files.",
        "comment_created_at": "2024-12-18T20:01:49+00:00",
        "comment_author": "gagb",
        "comment_body": "```suggestion\r\nThis example shows how to convert multiple files to markdown format in a single run. The script processes all supported files in a directory and creates corresponding markdown files.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1890774428",
    "pr_number": 91,
    "pr_file": "README.md",
    "created_at": "2024-12-18T20:03:34+00:00",
    "commented_code": "docker build -t markitdown:latest .\n docker run --rm -i markitdown:latest < ~/your-file.pdf > output.md\n ```\n+<details>\n+    \n+<summary>Batch Processing Multiple Files</summary>\n \n+This extension allows you to convert multiple files to markdown format in a single run. The script processes all supported files in a directory and creates corresponding markdown files.\n+\n+### Features\n+\n+- Converts multiple files in one operation\n+- Supports various file formats (.pptx, .docx, .pdf, .jpg, .jpeg, .png etc. you can change it)\n+- Maintains original filenames (changes extension to .md)\n+- Includes GPT-4o-latest image descriptions when available\n+- Continues processing if individual files fail\n+\n+### Usage\n+1. Create a Python script (e.g., convert.py):\n+```python\n+from markitdown import MarkItDown\n+from openai import OpenAI\n+import os\n+client = OpenAI(api_key=\"your-api-key-here\")\n+md = MarkItDown(mlm_client=client, mlm_model=\"gpt-4o-2024-11-20\")\n+supported_extensions = ('.pptx', '.docx', '.pdf', '.jpg', '.jpeg', '.png')\n+files_to_convert = [f for f in os.listdir('.') if f.lower().endswith(supported_extensions)]\n+for file in files_to_convert:\n+    print(f\"\nConverting {file}...\")\n+    try:\n+        md_file = os.path.splitext(file)[0] + '.md'\n+        result = md.convert(file)\n+        with open(md_file, 'w') as f:\n+            f.write(result.text_content)\n+        \n+        print(f\"Successfully converted {file} to {md_file}\")\n+    except Exception as e:\n+        print(f\"Error converting {file}: {str(e)}\")\n+\n+print(\"\nAll conversions completed!\")\n+```\n+2. Place the script in the same directory as your files\n+3. Install required packages: like openai\n+4. Run script ```bash python3 convert.py ```\n+\n+- The script processes all supported files in the current directory\n+- Original files remain unchanged\n+- New markdown files are created with the same base name\n+- Progress and any errors are displayed during conversion",
    "repo_full_name": "microsoft/markitdown",
    "discussion_comments": [
      {
        "comment_id": "1890774428",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 91,
        "pr_file": "README.md",
        "discussion_id": "1890774428",
        "commented_code": "@@ -60,7 +60,55 @@ print(result.text_content)\n docker build -t markitdown:latest .\n docker run --rm -i markitdown:latest < ~/your-file.pdf > output.md\n ```\n+<details>\n+    \n+<summary>Batch Processing Multiple Files</summary>\n \n+This extension allows you to convert multiple files to markdown format in a single run. The script processes all supported files in a directory and creates corresponding markdown files.\n+\n+### Features\n+\n+- Converts multiple files in one operation\n+- Supports various file formats (.pptx, .docx, .pdf, .jpg, .jpeg, .png etc. you can change it)\n+- Maintains original filenames (changes extension to .md)\n+- Includes GPT-4o-latest image descriptions when available\n+- Continues processing if individual files fail\n+\n+### Usage\n+1. Create a Python script (e.g., convert.py):\n+```python\n+from markitdown import MarkItDown\n+from openai import OpenAI\n+import os\n+client = OpenAI(api_key=\"your-api-key-here\")\n+md = MarkItDown(mlm_client=client, mlm_model=\"gpt-4o-2024-11-20\")\n+supported_extensions = ('.pptx', '.docx', '.pdf', '.jpg', '.jpeg', '.png')\n+files_to_convert = [f for f in os.listdir('.') if f.lower().endswith(supported_extensions)]\n+for file in files_to_convert:\n+    print(f\"\\nConverting {file}...\")\n+    try:\n+        md_file = os.path.splitext(file)[0] + '.md'\n+        result = md.convert(file)\n+        with open(md_file, 'w') as f:\n+            f.write(result.text_content)\n+        \n+        print(f\"Successfully converted {file} to {md_file}\")\n+    except Exception as e:\n+        print(f\"Error converting {file}: {str(e)}\")\n+\n+print(\"\\nAll conversions completed!\")\n+```\n+2. Place the script in the same directory as your files\n+3. Install required packages: like openai\n+4. Run script ```bash python3 convert.py ```\n+\n+- The script processes all supported files in the current directory\n+- Original files remain unchanged\n+- New markdown files are created with the same base name\n+- Progress and any errors are displayed during conversion",
        "comment_created_at": "2024-12-18T20:03:34+00:00",
        "comment_author": "gagb",
        "comment_body": "```suggestion\r\nNote that original files will remain unchanged and new markdown files are created with the same base name.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]