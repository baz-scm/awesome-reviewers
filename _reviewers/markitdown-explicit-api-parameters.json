[
  {
    "discussion_id": "1896631288",
    "pr_number": 139,
    "pr_file": "src/markitdown/_markitdown.py",
    "created_at": "2024-12-24T10:25:46+00:00",
    "commented_code": "class PdfConverter(DocumentConverter):\n     \"\"\"\n-    Converts PDFs to Markdown. Most style information is ignored, so the results are essentially plain-text.\n+    Converts PDFs to Markdown. Most style information is ignored, so the results are essentially plain-text.    \n     \"\"\"\n \n     def convert(self, local_path, **kwargs) -> Union[None, DocumentConverterResult]:\n+        \"\"\"",
    "repo_full_name": "microsoft/markitdown",
    "discussion_comments": [
      {
        "comment_id": "1896631288",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 139,
        "pr_file": "src/markitdown/_markitdown.py",
        "discussion_id": "1896631288",
        "commented_code": "@@ -676,19 +677,27 @@ def convert(self, local_path, **kwargs) -> Union[None, DocumentConverterResult]:\n \n class PdfConverter(DocumentConverter):\n     \"\"\"\n-    Converts PDFs to Markdown. Most style information is ignored, so the results are essentially plain-text.\n+    Converts PDFs to Markdown. Most style information is ignored, so the results are essentially plain-text.    \n     \"\"\"\n \n     def convert(self, local_path, **kwargs) -> Union[None, DocumentConverterResult]:\n+        \"\"\"",
        "comment_created_at": "2024-12-24T10:25:46+00:00",
        "comment_author": "l-lumin",
        "comment_body": "I think `pdf_engine` should be a named parameter in the function instead of being accessed via `kwargs`. This provides more clarity and ensures better handling of default values",
        "pr_file_module": null
      },
      {
        "comment_id": "1897158077",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 139,
        "pr_file": "src/markitdown/_markitdown.py",
        "discussion_id": "1896631288",
        "commented_code": "@@ -676,19 +677,27 @@ def convert(self, local_path, **kwargs) -> Union[None, DocumentConverterResult]:\n \n class PdfConverter(DocumentConverter):\n     \"\"\"\n-    Converts PDFs to Markdown. Most style information is ignored, so the results are essentially plain-text.\n+    Converts PDFs to Markdown. Most style information is ignored, so the results are essentially plain-text.    \n     \"\"\"\n \n     def convert(self, local_path, **kwargs) -> Union[None, DocumentConverterResult]:\n+        \"\"\"",
        "comment_created_at": "2024-12-25T07:09:42+00:00",
        "comment_author": "tungsten106",
        "comment_body": "Thanks for you suggestion. I have added it to a named parameters ( I was meant to align with other converters' parameter definition), and added the exception case when `pdf_engine` is not valid. The new test cases could be seen on my new commit. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1897312383",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 139,
        "pr_file": "src/markitdown/_markitdown.py",
        "discussion_id": "1896631288",
        "commented_code": "@@ -676,19 +677,27 @@ def convert(self, local_path, **kwargs) -> Union[None, DocumentConverterResult]:\n \n class PdfConverter(DocumentConverter):\n     \"\"\"\n-    Converts PDFs to Markdown. Most style information is ignored, so the results are essentially plain-text.\n+    Converts PDFs to Markdown. Most style information is ignored, so the results are essentially plain-text.    \n     \"\"\"\n \n     def convert(self, local_path, **kwargs) -> Union[None, DocumentConverterResult]:\n+        \"\"\"",
        "comment_created_at": "2024-12-25T10:41:16+00:00",
        "comment_author": "l-lumin",
        "comment_body": "This is optional, but adding one more named parameter could make this more customizable, like:\r\n\r\n```py\r\ndef convert(self, local_path, engine: Literal['pdfminer', 'pymupdf4llm']='pdfminer', engine_kwargs=None, **kwargs) -> Union[None, DocumentConverterResult]:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1897314005",
    "pr_number": 139,
    "pr_file": "src/markitdown/_markitdown.py",
    "created_at": "2024-12-25T10:46:27+00:00",
    "commented_code": "class PdfConverter(DocumentConverter):\n     \"\"\"\n-    Converts PDFs to Markdown. Most style information is ignored, so the results are essentially plain-text.\n+    Converts PDFs to Markdown. Most style information is ignored, so the results are essentially plain-text.    \n     \"\"\"\n \n-    def convert(self, local_path, **kwargs) -> Union[None, DocumentConverterResult]:\n+    def convert(self, local_path, pdf_engine: Literal['pdfminer', 'pymupdf4llm']='pdfminer', **kwargs) -> Union[None, DocumentConverterResult]:\n+        \"\"\"\n+        Example:\n+        >>> source = \"https://arxiv.org/pdf/2308.08155v2.pdf\"\n+        >>> markitdown.convert(source, pdf_engine=\"pymupdf4llm\")\n+        \"\"\"\n         # Bail if not a PDF\n         extension = kwargs.get(\"file_extension\", \"\")\n         if extension.lower() != \".pdf\":\n             return None\n-\n-        return DocumentConverterResult(\n-            title=None,\n-            text_content=pdfminer.high_level.extract_text(local_path),\n-        )\n+        if pdf_engine == \"pdfminer\":\n+            text_content = pdfminer.high_level.extract_text(local_path)\n+        elif pdf_engine == \"pymupdf4llm\":\n+            text_content = pymupdf4llm.to_markdown(local_path, show_progress=False)\n+        else:\n+            # return None     # unknown method\n+            raise FileConversionException(\"'pdf_engine' not valid. Please choose between ['pdfminer', 'pymupdf4llm'].\")",
    "repo_full_name": "microsoft/markitdown",
    "discussion_comments": [
      {
        "comment_id": "1897314005",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 139,
        "pr_file": "src/markitdown/_markitdown.py",
        "discussion_id": "1897314005",
        "commented_code": "@@ -676,19 +677,27 @@ def convert(self, local_path, **kwargs) -> Union[None, DocumentConverterResult]:\n \n class PdfConverter(DocumentConverter):\n     \"\"\"\n-    Converts PDFs to Markdown. Most style information is ignored, so the results are essentially plain-text.\n+    Converts PDFs to Markdown. Most style information is ignored, so the results are essentially plain-text.    \n     \"\"\"\n \n-    def convert(self, local_path, **kwargs) -> Union[None, DocumentConverterResult]:\n+    def convert(self, local_path, pdf_engine: Literal['pdfminer', 'pymupdf4llm']='pdfminer', **kwargs) -> Union[None, DocumentConverterResult]:\n+        \"\"\"\n+        Example:\n+        >>> source = \"https://arxiv.org/pdf/2308.08155v2.pdf\"\n+        >>> markitdown.convert(source, pdf_engine=\"pymupdf4llm\")\n+        \"\"\"\n         # Bail if not a PDF\n         extension = kwargs.get(\"file_extension\", \"\")\n         if extension.lower() != \".pdf\":\n             return None\n-\n-        return DocumentConverterResult(\n-            title=None,\n-            text_content=pdfminer.high_level.extract_text(local_path),\n-        )\n+        if pdf_engine == \"pdfminer\":\n+            text_content = pdfminer.high_level.extract_text(local_path)\n+        elif pdf_engine == \"pymupdf4llm\":\n+            text_content = pymupdf4llm.to_markdown(local_path, show_progress=False)\n+        else:\n+            # return None     # unknown method\n+            raise FileConversionException(\"'pdf_engine' not valid. Please choose between ['pdfminer', 'pymupdf4llm'].\")",
        "comment_created_at": "2024-12-25T10:46:27+00:00",
        "comment_author": "l-lumin",
        "comment_body": "I'd suggest checking the engine first. You could use `_engines` to define the allowed engines\r\n\r\n```py\r\n_engines: Mapping[str, Any] = {\r\n        \"pdfminer\": pdfminer,\r\n        \"pymupdf4llm\": pymupdf4llm,\r\n    }\r\n    \r\n###\r\nif engine is not None and engine not in self._engines:\r\n    raise\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1897676937",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 139,
        "pr_file": "src/markitdown/_markitdown.py",
        "discussion_id": "1897314005",
        "commented_code": "@@ -676,19 +677,27 @@ def convert(self, local_path, **kwargs) -> Union[None, DocumentConverterResult]:\n \n class PdfConverter(DocumentConverter):\n     \"\"\"\n-    Converts PDFs to Markdown. Most style information is ignored, so the results are essentially plain-text.\n+    Converts PDFs to Markdown. Most style information is ignored, so the results are essentially plain-text.    \n     \"\"\"\n \n-    def convert(self, local_path, **kwargs) -> Union[None, DocumentConverterResult]:\n+    def convert(self, local_path, pdf_engine: Literal['pdfminer', 'pymupdf4llm']='pdfminer', **kwargs) -> Union[None, DocumentConverterResult]:\n+        \"\"\"\n+        Example:\n+        >>> source = \"https://arxiv.org/pdf/2308.08155v2.pdf\"\n+        >>> markitdown.convert(source, pdf_engine=\"pymupdf4llm\")\n+        \"\"\"\n         # Bail if not a PDF\n         extension = kwargs.get(\"file_extension\", \"\")\n         if extension.lower() != \".pdf\":\n             return None\n-\n-        return DocumentConverterResult(\n-            title=None,\n-            text_content=pdfminer.high_level.extract_text(local_path),\n-        )\n+        if pdf_engine == \"pdfminer\":\n+            text_content = pdfminer.high_level.extract_text(local_path)\n+        elif pdf_engine == \"pymupdf4llm\":\n+            text_content = pymupdf4llm.to_markdown(local_path, show_progress=False)\n+        else:\n+            # return None     # unknown method\n+            raise FileConversionException(\"'pdf_engine' not valid. Please choose between ['pdfminer', 'pymupdf4llm'].\")",
        "comment_created_at": "2024-12-26T06:34:39+00:00",
        "comment_author": "tungsten106",
        "comment_body": "It is a good idea for the ease of adding further engines. I have updated those changes in the latest commit. An example of using `engine_kwargs` for pdf imeges extraction could also be found in the test file.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1982108907",
    "pr_number": 1088,
    "pr_file": "packages/markitdown/src/markitdown/_base_converter.py",
    "created_at": "2025-03-05T20:01:00+00:00",
    "commented_code": "+import os\n+import tempfile\n+from warnings import warn\n+from typing import Any, Union, BinaryIO, Optional, List\n+from ._stream_info import StreamInfo\n+\n+\n+class DocumentConverterResult:\n+    \"\"\"The result of converting a document to Markdown.\"\"\"\n+\n+    def __init__(\n+        self,\n+        markdown: str,\n+        *,\n+        title: Optional[str] = None,\n+    ):\n+        \"\"\"\n+        Initialize the DocumentConverterResult.\n+\n+        The only required parameter is the converted Markdown text.\n+        The title, and any other metadata that may be added in the future, are optional.\n+\n+        Parameters:\n+        - markdown: The converted Markdown text.\n+        - title: Optional title of the document.\n+        \"\"\"\n+        self.markdown = markdown\n+        self.title = title\n+\n+    @property\n+    def text_content(self) -> str:\n+        \"\"\"Soft-deprecated alias for `markdown`. New code should migrate to using `markdown` or __str__.\"\"\"\n+        return self.markdown\n+\n+    @text_content.setter\n+    def text_content(self, markdown: str):\n+        \"\"\"Soft-deprecated alias for `markdown`. New code should migrate to using `markdown` or __str__.\"\"\"\n+        self.markdown = markdown\n+\n+    def __str__(self) -> str:\n+        \"\"\"Return the converted Markdown text.\"\"\"\n+        return self.markdown\n+\n+\n+class DocumentConverter:\n+    \"\"\"Abstract superclass of all DocumentConverters.\"\"\"\n+\n+    # Lower priority values are tried first.\n+    PRIORITY_SPECIFIC_FILE_FORMAT = (\n+        0.0  # e.g., .docx, .pdf, .xlsx, Or specific pages, e.g., wikipedia\n+    )\n+    PRIORITY_GENERIC_FILE_FORMAT = (\n+        10.0  # Near catch-all converters for mimetypes like text/*, etc.\n+    )\n+\n+    def __init__(self, priority: float = PRIORITY_SPECIFIC_FILE_FORMAT):\n+        \"\"\"\n+        Initialize the DocumentConverter with a given priority.\n+\n+        Priorities work as follows: By default, most converters get priority\n+        DocumentConverter.PRIORITY_SPECIFIC_FILE_FORMAT (== 0). The exception\n+        is the PlainTextConverter, which gets priority PRIORITY_SPECIFIC_FILE_FORMAT (== 10),\n+        with lower values being tried first (i.e., higher priority).\n+\n+        Just prior to conversion, the converters are sorted by priority, using\n+        a stable sort. This means that converters with the same priority will\n+        remain in the same order, with the most recently registered converters\n+        appearing first.\n+\n+        We have tight control over the order of built-in converters, but\n+        plugins can register converters in any order. A converter's priority\n+        field reasserts some control over the order of converters.\n+\n+        Plugins can register converters with any priority, to appear before or\n+        after the built-ins. For example, a plugin with priority 9 will run\n+        before the PlainTextConverter, but after the built-in converters.\n+        \"\"\"\n+        self._priority = priority\n+\n+    def accepts(",
    "repo_full_name": "microsoft/markitdown",
    "discussion_comments": [
      {
        "comment_id": "1982108907",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 1088,
        "pr_file": "packages/markitdown/src/markitdown/_base_converter.py",
        "discussion_id": "1982108907",
        "commented_code": "@@ -0,0 +1,142 @@\n+import os\n+import tempfile\n+from warnings import warn\n+from typing import Any, Union, BinaryIO, Optional, List\n+from ._stream_info import StreamInfo\n+\n+\n+class DocumentConverterResult:\n+    \"\"\"The result of converting a document to Markdown.\"\"\"\n+\n+    def __init__(\n+        self,\n+        markdown: str,\n+        *,\n+        title: Optional[str] = None,\n+    ):\n+        \"\"\"\n+        Initialize the DocumentConverterResult.\n+\n+        The only required parameter is the converted Markdown text.\n+        The title, and any other metadata that may be added in the future, are optional.\n+\n+        Parameters:\n+        - markdown: The converted Markdown text.\n+        - title: Optional title of the document.\n+        \"\"\"\n+        self.markdown = markdown\n+        self.title = title\n+\n+    @property\n+    def text_content(self) -> str:\n+        \"\"\"Soft-deprecated alias for `markdown`. New code should migrate to using `markdown` or __str__.\"\"\"\n+        return self.markdown\n+\n+    @text_content.setter\n+    def text_content(self, markdown: str):\n+        \"\"\"Soft-deprecated alias for `markdown`. New code should migrate to using `markdown` or __str__.\"\"\"\n+        self.markdown = markdown\n+\n+    def __str__(self) -> str:\n+        \"\"\"Return the converted Markdown text.\"\"\"\n+        return self.markdown\n+\n+\n+class DocumentConverter:\n+    \"\"\"Abstract superclass of all DocumentConverters.\"\"\"\n+\n+    # Lower priority values are tried first.\n+    PRIORITY_SPECIFIC_FILE_FORMAT = (\n+        0.0  # e.g., .docx, .pdf, .xlsx, Or specific pages, e.g., wikipedia\n+    )\n+    PRIORITY_GENERIC_FILE_FORMAT = (\n+        10.0  # Near catch-all converters for mimetypes like text/*, etc.\n+    )\n+\n+    def __init__(self, priority: float = PRIORITY_SPECIFIC_FILE_FORMAT):\n+        \"\"\"\n+        Initialize the DocumentConverter with a given priority.\n+\n+        Priorities work as follows: By default, most converters get priority\n+        DocumentConverter.PRIORITY_SPECIFIC_FILE_FORMAT (== 0). The exception\n+        is the PlainTextConverter, which gets priority PRIORITY_SPECIFIC_FILE_FORMAT (== 10),\n+        with lower values being tried first (i.e., higher priority).\n+\n+        Just prior to conversion, the converters are sorted by priority, using\n+        a stable sort. This means that converters with the same priority will\n+        remain in the same order, with the most recently registered converters\n+        appearing first.\n+\n+        We have tight control over the order of built-in converters, but\n+        plugins can register converters in any order. A converter's priority\n+        field reasserts some control over the order of converters.\n+\n+        Plugins can register converters with any priority, to appear before or\n+        after the built-ins. For example, a plugin with priority 9 will run\n+        before the PlainTextConverter, but after the built-in converters.\n+        \"\"\"\n+        self._priority = priority\n+\n+    def accepts(",
        "comment_created_at": "2025-03-05T20:01:00+00:00",
        "comment_author": "gagb",
        "comment_body": "Is there a reason you didn't make it a class method?",
        "pr_file_module": null
      },
      {
        "comment_id": "1982209594",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 1088,
        "pr_file": "packages/markitdown/src/markitdown/_base_converter.py",
        "discussion_id": "1982108907",
        "commented_code": "@@ -0,0 +1,142 @@\n+import os\n+import tempfile\n+from warnings import warn\n+from typing import Any, Union, BinaryIO, Optional, List\n+from ._stream_info import StreamInfo\n+\n+\n+class DocumentConverterResult:\n+    \"\"\"The result of converting a document to Markdown.\"\"\"\n+\n+    def __init__(\n+        self,\n+        markdown: str,\n+        *,\n+        title: Optional[str] = None,\n+    ):\n+        \"\"\"\n+        Initialize the DocumentConverterResult.\n+\n+        The only required parameter is the converted Markdown text.\n+        The title, and any other metadata that may be added in the future, are optional.\n+\n+        Parameters:\n+        - markdown: The converted Markdown text.\n+        - title: Optional title of the document.\n+        \"\"\"\n+        self.markdown = markdown\n+        self.title = title\n+\n+    @property\n+    def text_content(self) -> str:\n+        \"\"\"Soft-deprecated alias for `markdown`. New code should migrate to using `markdown` or __str__.\"\"\"\n+        return self.markdown\n+\n+    @text_content.setter\n+    def text_content(self, markdown: str):\n+        \"\"\"Soft-deprecated alias for `markdown`. New code should migrate to using `markdown` or __str__.\"\"\"\n+        self.markdown = markdown\n+\n+    def __str__(self) -> str:\n+        \"\"\"Return the converted Markdown text.\"\"\"\n+        return self.markdown\n+\n+\n+class DocumentConverter:\n+    \"\"\"Abstract superclass of all DocumentConverters.\"\"\"\n+\n+    # Lower priority values are tried first.\n+    PRIORITY_SPECIFIC_FILE_FORMAT = (\n+        0.0  # e.g., .docx, .pdf, .xlsx, Or specific pages, e.g., wikipedia\n+    )\n+    PRIORITY_GENERIC_FILE_FORMAT = (\n+        10.0  # Near catch-all converters for mimetypes like text/*, etc.\n+    )\n+\n+    def __init__(self, priority: float = PRIORITY_SPECIFIC_FILE_FORMAT):\n+        \"\"\"\n+        Initialize the DocumentConverter with a given priority.\n+\n+        Priorities work as follows: By default, most converters get priority\n+        DocumentConverter.PRIORITY_SPECIFIC_FILE_FORMAT (== 0). The exception\n+        is the PlainTextConverter, which gets priority PRIORITY_SPECIFIC_FILE_FORMAT (== 10),\n+        with lower values being tried first (i.e., higher priority).\n+\n+        Just prior to conversion, the converters are sorted by priority, using\n+        a stable sort. This means that converters with the same priority will\n+        remain in the same order, with the most recently registered converters\n+        appearing first.\n+\n+        We have tight control over the order of built-in converters, but\n+        plugins can register converters in any order. A converter's priority\n+        field reasserts some control over the order of converters.\n+\n+        Plugins can register converters with any priority, to appear before or\n+        after the built-ins. For example, a plugin with priority 9 will run\n+        before the PlainTextConverter, but after the built-in converters.\n+        \"\"\"\n+        self._priority = priority\n+\n+    def accepts(",
        "comment_created_at": "2025-03-05T21:28:29+00:00",
        "comment_author": "afourney",
        "comment_body": "MarkItDown registers converters as instances (this -- in theory -- allows the converters to be configured to take important parameters like API keys, etc). The decision to accept a `file_stream` may depend on this configuration. In general `accepts` and `convert`, take exactly the same parameters by design, so that exactly the same information is available at both stages of execution.",
        "pr_file_module": null
      },
      {
        "comment_id": "1982294951",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 1088,
        "pr_file": "packages/markitdown/src/markitdown/_base_converter.py",
        "discussion_id": "1982108907",
        "commented_code": "@@ -0,0 +1,142 @@\n+import os\n+import tempfile\n+from warnings import warn\n+from typing import Any, Union, BinaryIO, Optional, List\n+from ._stream_info import StreamInfo\n+\n+\n+class DocumentConverterResult:\n+    \"\"\"The result of converting a document to Markdown.\"\"\"\n+\n+    def __init__(\n+        self,\n+        markdown: str,\n+        *,\n+        title: Optional[str] = None,\n+    ):\n+        \"\"\"\n+        Initialize the DocumentConverterResult.\n+\n+        The only required parameter is the converted Markdown text.\n+        The title, and any other metadata that may be added in the future, are optional.\n+\n+        Parameters:\n+        - markdown: The converted Markdown text.\n+        - title: Optional title of the document.\n+        \"\"\"\n+        self.markdown = markdown\n+        self.title = title\n+\n+    @property\n+    def text_content(self) -> str:\n+        \"\"\"Soft-deprecated alias for `markdown`. New code should migrate to using `markdown` or __str__.\"\"\"\n+        return self.markdown\n+\n+    @text_content.setter\n+    def text_content(self, markdown: str):\n+        \"\"\"Soft-deprecated alias for `markdown`. New code should migrate to using `markdown` or __str__.\"\"\"\n+        self.markdown = markdown\n+\n+    def __str__(self) -> str:\n+        \"\"\"Return the converted Markdown text.\"\"\"\n+        return self.markdown\n+\n+\n+class DocumentConverter:\n+    \"\"\"Abstract superclass of all DocumentConverters.\"\"\"\n+\n+    # Lower priority values are tried first.\n+    PRIORITY_SPECIFIC_FILE_FORMAT = (\n+        0.0  # e.g., .docx, .pdf, .xlsx, Or specific pages, e.g., wikipedia\n+    )\n+    PRIORITY_GENERIC_FILE_FORMAT = (\n+        10.0  # Near catch-all converters for mimetypes like text/*, etc.\n+    )\n+\n+    def __init__(self, priority: float = PRIORITY_SPECIFIC_FILE_FORMAT):\n+        \"\"\"\n+        Initialize the DocumentConverter with a given priority.\n+\n+        Priorities work as follows: By default, most converters get priority\n+        DocumentConverter.PRIORITY_SPECIFIC_FILE_FORMAT (== 0). The exception\n+        is the PlainTextConverter, which gets priority PRIORITY_SPECIFIC_FILE_FORMAT (== 10),\n+        with lower values being tried first (i.e., higher priority).\n+\n+        Just prior to conversion, the converters are sorted by priority, using\n+        a stable sort. This means that converters with the same priority will\n+        remain in the same order, with the most recently registered converters\n+        appearing first.\n+\n+        We have tight control over the order of built-in converters, but\n+        plugins can register converters in any order. A converter's priority\n+        field reasserts some control over the order of converters.\n+\n+        Plugins can register converters with any priority, to appear before or\n+        after the built-ins. For example, a plugin with priority 9 will run\n+        before the PlainTextConverter, but after the built-in converters.\n+        \"\"\"\n+        self._priority = priority\n+\n+    def accepts(",
        "comment_created_at": "2025-03-05T22:47:50+00:00",
        "comment_author": "gagb",
        "comment_body": "I see that makes sense -- the decision to accept may depend on the instance specific parameters.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1897974491",
    "pr_number": 218,
    "pr_file": "src/markitdown/_markitdown.py",
    "created_at": "2024-12-26T15:11:29+00:00",
    "commented_code": "separator = \"|\" + \"|\".join([\"---\"] * len(data[0])) + \"|\"\n         return md + \"\n\".join([header, separator] + markdown_table[1:])\n \n+    def _get_llm_description(self, image_blob, client, model, prompt=None):\n+        if prompt is None or prompt.strip() == \"\":\n+            prompt = \"Write a caption for this image.\"\n+        content_type = \"image/jpeg\"",
    "repo_full_name": "microsoft/markitdown",
    "discussion_comments": [
      {
        "comment_id": "1897974491",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 218,
        "pr_file": "src/markitdown/_markitdown.py",
        "discussion_id": "1897974491",
        "commented_code": "@@ -857,6 +868,31 @@ def _convert_chart_to_markdown(self, chart):\n         separator = \"|\" + \"|\".join([\"---\"] * len(data[0])) + \"|\"\n         return md + \"\\n\".join([header, separator] + markdown_table[1:])\n \n+    def _get_llm_description(self, image_blob, client, model, prompt=None):\n+        if prompt is None or prompt.strip() == \"\":\n+            prompt = \"Write a caption for this image.\"\n+        content_type = \"image/jpeg\"",
        "comment_created_at": "2024-12-26T15:11:29+00:00",
        "comment_author": "Viddesh1",
        "comment_body": "Does ```content_type = \"image/jpeg\"``` assumes that the file is only jpeg ?\r\n\r\nIt can be anything, Including below too, Yes?\r\n\r\nJPEG Images: \"image/jpeg\"\r\nPNG Images: \"image/png\"\r\nGIF Images: \"image/gif\"",
        "pr_file_module": null
      },
      {
        "comment_id": "1898315213",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 218,
        "pr_file": "src/markitdown/_markitdown.py",
        "discussion_id": "1897974491",
        "commented_code": "@@ -857,6 +868,31 @@ def _convert_chart_to_markdown(self, chart):\n         separator = \"|\" + \"|\".join([\"---\"] * len(data[0])) + \"|\"\n         return md + \"\\n\".join([header, separator] + markdown_table[1:])\n \n+    def _get_llm_description(self, image_blob, client, model, prompt=None):\n+        if prompt is None or prompt.strip() == \"\":\n+            prompt = \"Write a caption for this image.\"\n+        content_type = \"image/jpeg\"",
        "comment_created_at": "2024-12-27T07:09:40+00:00",
        "comment_author": "keenranger",
        "comment_body": "Found out the \u2018image\u2019 object has content_type. Using it directly for the API call. TY!",
        "pr_file_module": null
      }
    ]
  }
]