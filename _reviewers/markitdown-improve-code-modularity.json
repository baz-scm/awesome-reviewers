[
  {
    "discussion_id": "2217494209",
    "pr_number": 1372,
    "pr_file": "packages/markitdown/src/markitdown/__main__.py",
    "created_at": "2025-07-19T22:46:22+00:00",
    "commented_code": "sys.exit(1)\n \n \n+def _handle_batch_processing(args, markitdown: MarkItDown, stream_info):\n+    \"\"\"Handle batch processing of files in a directory\"\"\"\n+    import os\n+    from pathlib import Path\n+    \n+    input_dir = Path(args.filename)\n+    if not input_dir.exists():\n+        _exit_with_error(f\"Directory does not exist: {input_dir}\")\n+    if not input_dir.is_dir():\n+        _exit_with_error(f\"Path is not a directory: {input_dir}\")\n+    \n+    # Determine output directory\n+    output_dir = Path(args.output) if args.output else input_dir / \"converted\"\n+    output_dir.mkdir(parents=True, exist_ok=True)\n+    \n+    # Get supported file types\n+    supported_extensions = {\n+        'pdf', 'docx', 'pptx', 'xlsx', 'xls', 'csv', 'txt', 'html', 'htm',\n+        'json', 'xml', 'rss', 'msg', 'zip', 'epub', 'jpg', 'jpeg', 'png',\n+        'gif', 'bmp', 'tiff', 'wav', 'mp3', 'm4a', 'mp4'\n+    }\n+    \n+    # Parse user-specified types\n+    if args.types:\n+        user_types = {ext.strip().lower().lstrip('.') for ext in args.types.split(',')}\n+        supported_extensions = supported_extensions.intersection(user_types)\n+    \n+    # Find files to process\n+    pattern = \"**/*\" if args.recursive else \"*\"\n+    files_to_process = []\n+    \n+    for file_path in input_dir.glob(pattern):\n+        if file_path.is_file():\n+            extension = file_path.suffix.lower().lstrip('.')",
    "repo_full_name": "microsoft/markitdown",
    "discussion_comments": [
      {
        "comment_id": "2217494209",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 1372,
        "pr_file": "packages/markitdown/src/markitdown/__main__.py",
        "discussion_id": "2217494209",
        "commented_code": "@@ -219,5 +243,85 @@ def _exit_with_error(message: str):\n     sys.exit(1)\n \n \n+def _handle_batch_processing(args, markitdown: MarkItDown, stream_info):\n+    \"\"\"Handle batch processing of files in a directory\"\"\"\n+    import os\n+    from pathlib import Path\n+    \n+    input_dir = Path(args.filename)\n+    if not input_dir.exists():\n+        _exit_with_error(f\"Directory does not exist: {input_dir}\")\n+    if not input_dir.is_dir():\n+        _exit_with_error(f\"Path is not a directory: {input_dir}\")\n+    \n+    # Determine output directory\n+    output_dir = Path(args.output) if args.output else input_dir / \"converted\"\n+    output_dir.mkdir(parents=True, exist_ok=True)\n+    \n+    # Get supported file types\n+    supported_extensions = {\n+        'pdf', 'docx', 'pptx', 'xlsx', 'xls', 'csv', 'txt', 'html', 'htm',\n+        'json', 'xml', 'rss', 'msg', 'zip', 'epub', 'jpg', 'jpeg', 'png',\n+        'gif', 'bmp', 'tiff', 'wav', 'mp3', 'm4a', 'mp4'\n+    }\n+    \n+    # Parse user-specified types\n+    if args.types:\n+        user_types = {ext.strip().lower().lstrip('.') for ext in args.types.split(',')}\n+        supported_extensions = supported_extensions.intersection(user_types)\n+    \n+    # Find files to process\n+    pattern = \"**/*\" if args.recursive else \"*\"\n+    files_to_process = []\n+    \n+    for file_path in input_dir.glob(pattern):\n+        if file_path.is_file():\n+            extension = file_path.suffix.lower().lstrip('.')",
        "comment_created_at": "2025-07-19T22:46:22+00:00",
        "comment_author": "tifilipebr",
        "comment_body": "Wouldn't it be better to have a separate function just to check if the file is valid? That is, validating the file path and the extension.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2004817791",
    "pr_number": 1140,
    "pr_file": "packages/markitdown/src/markitdown/converters/_bing_serp_converter.py",
    "created_at": "2025-03-20T05:06:27+00:00",
    "commented_code": "slug.extract()\n \n         # Parse the algorithmic results\n-        _markdownify = _CustomMarkdownify()\n+        _markdownify = _CustomMarkdownify(\n+            keep_data_uris=kwargs.get(\"keep_data_uris\", False)\n+        )",
    "repo_full_name": "microsoft/markitdown",
    "discussion_comments": [
      {
        "comment_id": "2004817791",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 1140,
        "pr_file": "packages/markitdown/src/markitdown/converters/_bing_serp_converter.py",
        "discussion_id": "2004817791",
        "commented_code": "@@ -79,7 +79,9 @@ def convert(\n             slug.extract()\n \n         # Parse the algorithmic results\n-        _markdownify = _CustomMarkdownify()\n+        _markdownify = _CustomMarkdownify(\n+            keep_data_uris=kwargs.get(\"keep_data_uris\", False)\n+        )",
        "comment_created_at": "2025-03-20T05:06:27+00:00",
        "comment_author": "hoangquochung1110",
        "comment_body": "```suggestion\r\n        _markdownify = _CustomMarkdownify(\r\n            **kwargs\r\n        )\r\n```\r\nBy this way, we lay a \"foundation\" so that we can easily add new options to `_CustomMarkdownify` in the future without changing too much in upstream objects",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1894565965",
    "pr_number": 157,
    "pr_file": "src/markitdown/_markitdown.py",
    "created_at": "2024-12-21T05:46:50+00:00",
    "commented_code": "self.title: Union[str, None] = title\n         self.text_content: str = text_content\n \n+    def save(self, file_path: str, encoding: str = \"utf-8\") -> None:\n+        \"\"\"\n+        Save the converted document result `text_content` to a file.\n+\n+        params:\n+            file_path: The path to save the document result to.\n+            encoding: The encoding to use when writing the document.\n+        \"\"\"\n+        with open(file_path, \"w\", encoding=encoding) as f:\n+            f.write(self.text_content)\n+",
    "repo_full_name": "microsoft/markitdown",
    "discussion_comments": [
      {
        "comment_id": "1894565965",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 157,
        "pr_file": "src/markitdown/_markitdown.py",
        "discussion_id": "1894565965",
        "commented_code": "@@ -146,6 +146,17 @@ def __init__(self, title: Union[str, None] = None, text_content: str = \"\"):\n         self.title: Union[str, None] = title\n         self.text_content: str = text_content\n \n+    def save(self, file_path: str, encoding: str = \"utf-8\") -> None:\n+        \"\"\"\n+        Save the converted document result `text_content` to a file.\n+\n+        params:\n+            file_path: The path to save the document result to.\n+            encoding: The encoding to use when writing the document.\n+        \"\"\"\n+        with open(file_path, \"w\", encoding=encoding) as f:\n+            f.write(self.text_content)\n+",
        "comment_created_at": "2024-12-21T05:46:50+00:00",
        "comment_author": "l-lumin",
        "comment_body": "it serves the same purpose as #116. could you refactor the code to use a single function for better reusability? \r\n- #116 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1894670474",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 157,
        "pr_file": "src/markitdown/_markitdown.py",
        "discussion_id": "1894565965",
        "commented_code": "@@ -146,6 +146,17 @@ def __init__(self, title: Union[str, None] = None, text_content: str = \"\"):\n         self.title: Union[str, None] = title\n         self.text_content: str = text_content\n \n+    def save(self, file_path: str, encoding: str = \"utf-8\") -> None:\n+        \"\"\"\n+        Save the converted document result `text_content` to a file.\n+\n+        params:\n+            file_path: The path to save the document result to.\n+            encoding: The encoding to use when writing the document.\n+        \"\"\"\n+        with open(file_path, \"w\", encoding=encoding) as f:\n+            f.write(self.text_content)\n+",
        "comment_created_at": "2024-12-21T18:42:41+00:00",
        "comment_author": "absadiki",
        "comment_body": "sure @l-lumin,\r\n\r\nI think it makes more sense to have the function to save the result into a file inside the `DocumentConverterResult`.\r\n\r\n* I refactored the CLI to use this function.\r\n* I also added an `encoding` parameter to the arguments. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1894829315",
        "repo_full_name": "microsoft/markitdown",
        "pr_number": 157,
        "pr_file": "src/markitdown/_markitdown.py",
        "discussion_id": "1894565965",
        "commented_code": "@@ -146,6 +146,17 @@ def __init__(self, title: Union[str, None] = None, text_content: str = \"\"):\n         self.title: Union[str, None] = title\n         self.text_content: str = text_content\n \n+    def save(self, file_path: str, encoding: str = \"utf-8\") -> None:\n+        \"\"\"\n+        Save the converted document result `text_content` to a file.\n+\n+        params:\n+            file_path: The path to save the document result to.\n+            encoding: The encoding to use when writing the document.\n+        \"\"\"\n+        with open(file_path, \"w\", encoding=encoding) as f:\n+            f.write(self.text_content)\n+",
        "comment_created_at": "2024-12-22T07:55:16+00:00",
        "comment_author": "l-lumin",
        "comment_body": "Thank you. I think so too. Look good",
        "pr_file_module": null
      }
    ]
  }
]