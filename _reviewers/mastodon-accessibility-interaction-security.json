[
  {
    "discussion_id": "2145344148",
    "pr_number": 35037,
    "pr_file": "app/javascript/mastodon/components/status_banner.tsx",
    "created_at": "2025-06-13T15:30:24+00:00",
    "commented_code": "variant: BannerVariant;\n   expanded?: boolean;\n   onClick?: () => void;\n-}> = ({ children, variant, expanded, onClick }) => (\n-  <label\n-    className={\n-      variant === BannerVariant.Warning\n-        ? 'content-warning'\n-        : 'content-warning content-warning--filter'\n+}> = ({ children, variant, expanded, onClick }) => {\n+  const descriptionId = useId();\n+\n+  const buttonRef = useRef<HTMLButtonElement>(null);\n+  const forwardClick = useCallback<MouseEventHandler>((e) => {\n+    if (buttonRef.current && e.target !== buttonRef.current) {\n+      buttonRef.current.click();\n     }\n-  >\n-    {children}\n+  }, []);\n+\n+  return (\n+    // Element clicks are passed on to button\n+    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n+    <div\n+      className={\n+        variant === BannerVariant.Warning\n+          ? 'content-warning'\n+          : 'content-warning content-warning--filter'\n+      }\n+      onClick={forwardClick}\n+    >\n+      <p id={descriptionId}>{children}</p>\n \n-    <button className='link-button' onClick={onClick}>\n-      {expanded ? (\n-        <FormattedMessage\n-          id='content_warning.hide'\n-          defaultMessage='Hide post'\n-        />\n-      ) : variant === BannerVariant.Warning ? (\n-        <FormattedMessage\n-          id='content_warning.show_more'\n-          defaultMessage='Show more'\n-        />\n-      ) : (\n-        <FormattedMessage\n-          id='content_warning.show'\n-          defaultMessage='Show anyway'\n-        />\n-      )}\n-    </button>\n-  </label>\n-);\n+      <button\n+        ref={buttonRef}\n+        className='link-button'\n+        onClick={onClick}\n+        aria-describedby={descriptionId}",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2145344148",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 35037,
        "pr_file": "app/javascript/mastodon/components/status_banner.tsx",
        "discussion_id": "2145344148",
        "commented_code": "@@ -10,33 +13,52 @@ export const StatusBanner: React.FC<{\n   variant: BannerVariant;\n   expanded?: boolean;\n   onClick?: () => void;\n-}> = ({ children, variant, expanded, onClick }) => (\n-  <label\n-    className={\n-      variant === BannerVariant.Warning\n-        ? 'content-warning'\n-        : 'content-warning content-warning--filter'\n+}> = ({ children, variant, expanded, onClick }) => {\n+  const descriptionId = useId();\n+\n+  const buttonRef = useRef<HTMLButtonElement>(null);\n+  const forwardClick = useCallback<MouseEventHandler>((e) => {\n+    if (buttonRef.current && e.target !== buttonRef.current) {\n+      buttonRef.current.click();\n     }\n-  >\n-    {children}\n+  }, []);\n+\n+  return (\n+    // Element clicks are passed on to button\n+    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n+    <div\n+      className={\n+        variant === BannerVariant.Warning\n+          ? 'content-warning'\n+          : 'content-warning content-warning--filter'\n+      }\n+      onClick={forwardClick}\n+    >\n+      <p id={descriptionId}>{children}</p>\n \n-    <button className='link-button' onClick={onClick}>\n-      {expanded ? (\n-        <FormattedMessage\n-          id='content_warning.hide'\n-          defaultMessage='Hide post'\n-        />\n-      ) : variant === BannerVariant.Warning ? (\n-        <FormattedMessage\n-          id='content_warning.show_more'\n-          defaultMessage='Show more'\n-        />\n-      ) : (\n-        <FormattedMessage\n-          id='content_warning.show'\n-          defaultMessage='Show anyway'\n-        />\n-      )}\n-    </button>\n-  </label>\n-);\n+      <button\n+        ref={buttonRef}\n+        className='link-button'\n+        onClick={onClick}\n+        aria-describedby={descriptionId}",
        "comment_created_at": "2025-06-13T15:30:24+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "> The `aria-describedby` property is appropriate when the associated content contains plain text. If the content is extensive, contains useful semantics, or has a complex structure requiring user navigation, use [aria-details](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-details) instead.\r\n\r\nContent warnings are mostly textual but they are allowed to include emojis, including custom ones, so I wonder if we should use `aria-details` instead?",
        "pr_file_module": null
      },
      {
        "comment_id": "2145378821",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 35037,
        "pr_file": "app/javascript/mastodon/components/status_banner.tsx",
        "discussion_id": "2145344148",
        "commented_code": "@@ -10,33 +13,52 @@ export const StatusBanner: React.FC<{\n   variant: BannerVariant;\n   expanded?: boolean;\n   onClick?: () => void;\n-}> = ({ children, variant, expanded, onClick }) => (\n-  <label\n-    className={\n-      variant === BannerVariant.Warning\n-        ? 'content-warning'\n-        : 'content-warning content-warning--filter'\n+}> = ({ children, variant, expanded, onClick }) => {\n+  const descriptionId = useId();\n+\n+  const buttonRef = useRef<HTMLButtonElement>(null);\n+  const forwardClick = useCallback<MouseEventHandler>((e) => {\n+    if (buttonRef.current && e.target !== buttonRef.current) {\n+      buttonRef.current.click();\n     }\n-  >\n-    {children}\n+  }, []);\n+\n+  return (\n+    // Element clicks are passed on to button\n+    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n+    <div\n+      className={\n+        variant === BannerVariant.Warning\n+          ? 'content-warning'\n+          : 'content-warning content-warning--filter'\n+      }\n+      onClick={forwardClick}\n+    >\n+      <p id={descriptionId}>{children}</p>\n \n-    <button className='link-button' onClick={onClick}>\n-      {expanded ? (\n-        <FormattedMessage\n-          id='content_warning.hide'\n-          defaultMessage='Hide post'\n-        />\n-      ) : variant === BannerVariant.Warning ? (\n-        <FormattedMessage\n-          id='content_warning.show_more'\n-          defaultMessage='Show more'\n-        />\n-      ) : (\n-        <FormattedMessage\n-          id='content_warning.show'\n-          defaultMessage='Show anyway'\n-        />\n-      )}\n-    </button>\n-  </label>\n-);\n+      <button\n+        ref={buttonRef}\n+        className='link-button'\n+        onClick={onClick}\n+        aria-describedby={descriptionId}",
        "comment_created_at": "2025-06-13T15:42:36+00:00",
        "comment_author": "diondiondion",
        "comment_body": "Emojis and other images that have alt text should resolve fine as a description, as far as I know. I'll do a quick test to confirm.",
        "pr_file_module": null
      },
      {
        "comment_id": "2145402792",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 35037,
        "pr_file": "app/javascript/mastodon/components/status_banner.tsx",
        "discussion_id": "2145344148",
        "commented_code": "@@ -10,33 +13,52 @@ export const StatusBanner: React.FC<{\n   variant: BannerVariant;\n   expanded?: boolean;\n   onClick?: () => void;\n-}> = ({ children, variant, expanded, onClick }) => (\n-  <label\n-    className={\n-      variant === BannerVariant.Warning\n-        ? 'content-warning'\n-        : 'content-warning content-warning--filter'\n+}> = ({ children, variant, expanded, onClick }) => {\n+  const descriptionId = useId();\n+\n+  const buttonRef = useRef<HTMLButtonElement>(null);\n+  const forwardClick = useCallback<MouseEventHandler>((e) => {\n+    if (buttonRef.current && e.target !== buttonRef.current) {\n+      buttonRef.current.click();\n     }\n-  >\n-    {children}\n+  }, []);\n+\n+  return (\n+    // Element clicks are passed on to button\n+    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n+    <div\n+      className={\n+        variant === BannerVariant.Warning\n+          ? 'content-warning'\n+          : 'content-warning content-warning--filter'\n+      }\n+      onClick={forwardClick}\n+    >\n+      <p id={descriptionId}>{children}</p>\n \n-    <button className='link-button' onClick={onClick}>\n-      {expanded ? (\n-        <FormattedMessage\n-          id='content_warning.hide'\n-          defaultMessage='Hide post'\n-        />\n-      ) : variant === BannerVariant.Warning ? (\n-        <FormattedMessage\n-          id='content_warning.show_more'\n-          defaultMessage='Show more'\n-        />\n-      ) : (\n-        <FormattedMessage\n-          id='content_warning.show'\n-          defaultMessage='Show anyway'\n-        />\n-      )}\n-    </button>\n-  </label>\n-);\n+      <button\n+        ref={buttonRef}\n+        className='link-button'\n+        onClick={onClick}\n+        aria-describedby={descriptionId}",
        "comment_created_at": "2025-06-13T15:52:41+00:00",
        "comment_author": "diondiondion",
        "comment_body": "The name (shortcode) of custom emojis is read out normally, so I think `aria-describedby` works here. But thanks for looking into this! \ud83d\ude4f \r\n\r\nhttps://github.com/user-attachments/assets/775f9180-c666-48bb-abec-711f7b479807\r\n\r\nIn the future it would be good to allow defining dedicated alt text for custom emojis where the shortcode might not be very descriptive.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2100230314",
    "pr_number": 34754,
    "pr_file": "app/javascript/mastodon/components/featured_carousel.tsx",
    "created_at": "2025-05-21T12:57:45+00:00",
    "commented_code": "+import { useCallback, useEffect, useRef, useState } from 'react';\n+\n+import { defineMessages, FormattedMessage, useIntl } from 'react-intl';\n+\n+import type { Map as ImmutableMap } from 'immutable';\n+import { List as ImmutableList } from 'immutable';\n+\n+import { animated, useSpring } from '@react-spring/web';\n+import { useDrag } from '@use-gesture/react';\n+\n+import { expandAccountFeaturedTimeline } from '@/mastodon/actions/timelines';\n+import { IconButton } from '@/mastodon/components/icon_button';\n+import StatusContainer from '@/mastodon/containers/status_container';\n+import { useAppDispatch, useAppSelector } from '@/mastodon/store';\n+import ChevronLeftIcon from '@/material-icons/400-24px/chevron_left.svg?react';\n+import ChevronRightIcon from '@/material-icons/400-24px/chevron_right.svg?react';\n+\n+const messages = defineMessages({\n+  previous: { id: 'featured_carousel.previous', defaultMessage: 'Previous' },\n+  next: { id: 'featured_carousel.next', defaultMessage: 'Next' },\n+});\n+\n+export const FeaturedCarousel: React.FC<{\n+  accountId: string;\n+  tagged?: string;\n+}> = ({ accountId, tagged }) => {\n+  const intl = useIntl();\n+\n+  // Load pinned statuses\n+  const dispatch = useAppDispatch();\n+  useEffect(() => {\n+    if (accountId) {\n+      void dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n+    }\n+  }, [accountId, dispatch, tagged]);\n+  const pinnedStatuses = useAppSelector(\n+    (state) =>\n+      (state.timelines as ImmutableMap<string, unknown>).getIn(\n+        [`account:${accountId}:pinned${tagged ? `:${tagged}` : ''}`, 'items'],\n+        ImmutableList(),\n+      ) as ImmutableList<string>,\n+  );\n+\n+  // Handle slide change\n+  const [slideIndex, setSlideIndex] = useState(0);\n+  const handleSlideChange = useCallback(\n+    (direction: number) => {\n+      const max = pinnedStatuses.size - 1;\n+      setSlideIndex((prev) => {\n+        const newIndex = prev + direction;\n+        if (newIndex < 0) {\n+          return max;\n+        } else if (newIndex > max) {\n+          return 0;\n+        }\n+        return newIndex;\n+      });\n+    },\n+    [pinnedStatuses.size],\n+  );\n+\n+  // Handle swiping animations\n+  const { x } = useSpring({ x: `-${slideIndex * 100}%` });\n+  const bind = useDrag(({ swipe: [swipeX] }) => {\n+    handleSlideChange(swipeX * -1); // Invert swipe as swiping left loads the next slide.\n+  });\n+  const handlePrev = useCallback(() => {\n+    handleSlideChange(-1);\n+  }, [handleSlideChange]);\n+  const handleNext = useCallback(() => {\n+    handleSlideChange(1);\n+  }, [handleSlideChange]);\n+\n+  // Handle wrapper height animation\n+  const [wrapperStyles, wrapperSpringApi] = useSpring(() => ({\n+    height: 0,\n+  }));\n+  const wrapperRef = useRef<HTMLDivElement>(null);\n+  const wrapperEle = wrapperRef.current;\n+  useEffect(() => {\n+    if (!wrapperEle) {\n+      return;\n+    }\n+    const currentSlideEle = wrapperEle.querySelector(\n+      `[data-index=\"${slideIndex}\"] > div`,\n+    );\n+\n+    if (!currentSlideEle) {\n+      return;\n+    }\n+\n+    void wrapperSpringApi.start({ height: currentSlideEle.scrollHeight });\n+  }, [slideIndex, wrapperSpringApi, wrapperEle]);\n+\n+  if (!accountId || pinnedStatuses.isEmpty()) {\n+    return null;\n+  }\n+\n+  return (\n+    <div className='featured-carousel' {...bind()}>\n+      <div className='featured-carousel__header'>\n+        <h4 className='featured-carousel__title'>\n+          <FormattedMessage\n+            id='pinned_carousel.header'\n+            defaultMessage='Pinned Posts'\n+          />\n+        </h4>\n+        {pinnedStatuses.size > 1 && (\n+          <>\n+            <IconButton\n+              title={intl.formatMessage(messages.previous)}\n+              icon='chevron-left'\n+              iconComponent={ChevronLeftIcon}\n+              onClick={handlePrev}\n+            />\n+            <span>\n+              {slideIndex + 1} / {pinnedStatuses.size}\n+            </span>\n+            <IconButton\n+              title={intl.formatMessage(messages.next)}\n+              icon='chevron-right'\n+              iconComponent={ChevronRightIcon}\n+              onClick={handleNext}\n+            />\n+          </>\n+        )}\n+      </div>\n+      <animated.div\n+        className='featured-carousel__slides'\n+        ref={wrapperRef}\n+        style={wrapperStyles}\n+      >\n+        {pinnedStatuses.map((statusId, index) => (\n+          <animated.div\n+            key={`f-${statusId}`}\n+            style={{ x }}\n+            className='featured-carousel__slide'\n+            data-index={index}\n+          >\n+            <StatusContainer\n+              // @ts-expect-error inferred props are wrong\n+              id={statusId}\n+              contextType='account'\n+            />\n+          </animated.div>",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2100230314",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34754,
        "pr_file": "app/javascript/mastodon/components/featured_carousel.tsx",
        "discussion_id": "2100230314",
        "commented_code": "@@ -0,0 +1,150 @@\n+import { useCallback, useEffect, useRef, useState } from 'react';\n+\n+import { defineMessages, FormattedMessage, useIntl } from 'react-intl';\n+\n+import type { Map as ImmutableMap } from 'immutable';\n+import { List as ImmutableList } from 'immutable';\n+\n+import { animated, useSpring } from '@react-spring/web';\n+import { useDrag } from '@use-gesture/react';\n+\n+import { expandAccountFeaturedTimeline } from '@/mastodon/actions/timelines';\n+import { IconButton } from '@/mastodon/components/icon_button';\n+import StatusContainer from '@/mastodon/containers/status_container';\n+import { useAppDispatch, useAppSelector } from '@/mastodon/store';\n+import ChevronLeftIcon from '@/material-icons/400-24px/chevron_left.svg?react';\n+import ChevronRightIcon from '@/material-icons/400-24px/chevron_right.svg?react';\n+\n+const messages = defineMessages({\n+  previous: { id: 'featured_carousel.previous', defaultMessage: 'Previous' },\n+  next: { id: 'featured_carousel.next', defaultMessage: 'Next' },\n+});\n+\n+export const FeaturedCarousel: React.FC<{\n+  accountId: string;\n+  tagged?: string;\n+}> = ({ accountId, tagged }) => {\n+  const intl = useIntl();\n+\n+  // Load pinned statuses\n+  const dispatch = useAppDispatch();\n+  useEffect(() => {\n+    if (accountId) {\n+      void dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n+    }\n+  }, [accountId, dispatch, tagged]);\n+  const pinnedStatuses = useAppSelector(\n+    (state) =>\n+      (state.timelines as ImmutableMap<string, unknown>).getIn(\n+        [`account:${accountId}:pinned${tagged ? `:${tagged}` : ''}`, 'items'],\n+        ImmutableList(),\n+      ) as ImmutableList<string>,\n+  );\n+\n+  // Handle slide change\n+  const [slideIndex, setSlideIndex] = useState(0);\n+  const handleSlideChange = useCallback(\n+    (direction: number) => {\n+      const max = pinnedStatuses.size - 1;\n+      setSlideIndex((prev) => {\n+        const newIndex = prev + direction;\n+        if (newIndex < 0) {\n+          return max;\n+        } else if (newIndex > max) {\n+          return 0;\n+        }\n+        return newIndex;\n+      });\n+    },\n+    [pinnedStatuses.size],\n+  );\n+\n+  // Handle swiping animations\n+  const { x } = useSpring({ x: `-${slideIndex * 100}%` });\n+  const bind = useDrag(({ swipe: [swipeX] }) => {\n+    handleSlideChange(swipeX * -1); // Invert swipe as swiping left loads the next slide.\n+  });\n+  const handlePrev = useCallback(() => {\n+    handleSlideChange(-1);\n+  }, [handleSlideChange]);\n+  const handleNext = useCallback(() => {\n+    handleSlideChange(1);\n+  }, [handleSlideChange]);\n+\n+  // Handle wrapper height animation\n+  const [wrapperStyles, wrapperSpringApi] = useSpring(() => ({\n+    height: 0,\n+  }));\n+  const wrapperRef = useRef<HTMLDivElement>(null);\n+  const wrapperEle = wrapperRef.current;\n+  useEffect(() => {\n+    if (!wrapperEle) {\n+      return;\n+    }\n+    const currentSlideEle = wrapperEle.querySelector(\n+      `[data-index=\"${slideIndex}\"] > div`,\n+    );\n+\n+    if (!currentSlideEle) {\n+      return;\n+    }\n+\n+    void wrapperSpringApi.start({ height: currentSlideEle.scrollHeight });\n+  }, [slideIndex, wrapperSpringApi, wrapperEle]);\n+\n+  if (!accountId || pinnedStatuses.isEmpty()) {\n+    return null;\n+  }\n+\n+  return (\n+    <div className='featured-carousel' {...bind()}>\n+      <div className='featured-carousel__header'>\n+        <h4 className='featured-carousel__title'>\n+          <FormattedMessage\n+            id='pinned_carousel.header'\n+            defaultMessage='Pinned Posts'\n+          />\n+        </h4>\n+        {pinnedStatuses.size > 1 && (\n+          <>\n+            <IconButton\n+              title={intl.formatMessage(messages.previous)}\n+              icon='chevron-left'\n+              iconComponent={ChevronLeftIcon}\n+              onClick={handlePrev}\n+            />\n+            <span>\n+              {slideIndex + 1} / {pinnedStatuses.size}\n+            </span>\n+            <IconButton\n+              title={intl.formatMessage(messages.next)}\n+              icon='chevron-right'\n+              iconComponent={ChevronRightIcon}\n+              onClick={handleNext}\n+            />\n+          </>\n+        )}\n+      </div>\n+      <animated.div\n+        className='featured-carousel__slides'\n+        ref={wrapperRef}\n+        style={wrapperStyles}\n+      >\n+        {pinnedStatuses.map((statusId, index) => (\n+          <animated.div\n+            key={`f-${statusId}`}\n+            style={{ x }}\n+            className='featured-carousel__slide'\n+            data-index={index}\n+          >\n+            <StatusContainer\n+              // @ts-expect-error inferred props are wrong\n+              id={statusId}\n+              contextType='account'\n+            />\n+          </animated.div>",
        "comment_created_at": "2025-05-21T12:57:45+00:00",
        "comment_author": "diondiondion",
        "comment_body": "We should make sure that inactive slides can't be focused or interacted with using a screen reader. Not sure if this needs to be part of this PR or retrofitted",
        "pr_file_module": null
      },
      {
        "comment_id": "2100340565",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34754,
        "pr_file": "app/javascript/mastodon/components/featured_carousel.tsx",
        "discussion_id": "2100230314",
        "commented_code": "@@ -0,0 +1,150 @@\n+import { useCallback, useEffect, useRef, useState } from 'react';\n+\n+import { defineMessages, FormattedMessage, useIntl } from 'react-intl';\n+\n+import type { Map as ImmutableMap } from 'immutable';\n+import { List as ImmutableList } from 'immutable';\n+\n+import { animated, useSpring } from '@react-spring/web';\n+import { useDrag } from '@use-gesture/react';\n+\n+import { expandAccountFeaturedTimeline } from '@/mastodon/actions/timelines';\n+import { IconButton } from '@/mastodon/components/icon_button';\n+import StatusContainer from '@/mastodon/containers/status_container';\n+import { useAppDispatch, useAppSelector } from '@/mastodon/store';\n+import ChevronLeftIcon from '@/material-icons/400-24px/chevron_left.svg?react';\n+import ChevronRightIcon from '@/material-icons/400-24px/chevron_right.svg?react';\n+\n+const messages = defineMessages({\n+  previous: { id: 'featured_carousel.previous', defaultMessage: 'Previous' },\n+  next: { id: 'featured_carousel.next', defaultMessage: 'Next' },\n+});\n+\n+export const FeaturedCarousel: React.FC<{\n+  accountId: string;\n+  tagged?: string;\n+}> = ({ accountId, tagged }) => {\n+  const intl = useIntl();\n+\n+  // Load pinned statuses\n+  const dispatch = useAppDispatch();\n+  useEffect(() => {\n+    if (accountId) {\n+      void dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n+    }\n+  }, [accountId, dispatch, tagged]);\n+  const pinnedStatuses = useAppSelector(\n+    (state) =>\n+      (state.timelines as ImmutableMap<string, unknown>).getIn(\n+        [`account:${accountId}:pinned${tagged ? `:${tagged}` : ''}`, 'items'],\n+        ImmutableList(),\n+      ) as ImmutableList<string>,\n+  );\n+\n+  // Handle slide change\n+  const [slideIndex, setSlideIndex] = useState(0);\n+  const handleSlideChange = useCallback(\n+    (direction: number) => {\n+      const max = pinnedStatuses.size - 1;\n+      setSlideIndex((prev) => {\n+        const newIndex = prev + direction;\n+        if (newIndex < 0) {\n+          return max;\n+        } else if (newIndex > max) {\n+          return 0;\n+        }\n+        return newIndex;\n+      });\n+    },\n+    [pinnedStatuses.size],\n+  );\n+\n+  // Handle swiping animations\n+  const { x } = useSpring({ x: `-${slideIndex * 100}%` });\n+  const bind = useDrag(({ swipe: [swipeX] }) => {\n+    handleSlideChange(swipeX * -1); // Invert swipe as swiping left loads the next slide.\n+  });\n+  const handlePrev = useCallback(() => {\n+    handleSlideChange(-1);\n+  }, [handleSlideChange]);\n+  const handleNext = useCallback(() => {\n+    handleSlideChange(1);\n+  }, [handleSlideChange]);\n+\n+  // Handle wrapper height animation\n+  const [wrapperStyles, wrapperSpringApi] = useSpring(() => ({\n+    height: 0,\n+  }));\n+  const wrapperRef = useRef<HTMLDivElement>(null);\n+  const wrapperEle = wrapperRef.current;\n+  useEffect(() => {\n+    if (!wrapperEle) {\n+      return;\n+    }\n+    const currentSlideEle = wrapperEle.querySelector(\n+      `[data-index=\"${slideIndex}\"] > div`,\n+    );\n+\n+    if (!currentSlideEle) {\n+      return;\n+    }\n+\n+    void wrapperSpringApi.start({ height: currentSlideEle.scrollHeight });\n+  }, [slideIndex, wrapperSpringApi, wrapperEle]);\n+\n+  if (!accountId || pinnedStatuses.isEmpty()) {\n+    return null;\n+  }\n+\n+  return (\n+    <div className='featured-carousel' {...bind()}>\n+      <div className='featured-carousel__header'>\n+        <h4 className='featured-carousel__title'>\n+          <FormattedMessage\n+            id='pinned_carousel.header'\n+            defaultMessage='Pinned Posts'\n+          />\n+        </h4>\n+        {pinnedStatuses.size > 1 && (\n+          <>\n+            <IconButton\n+              title={intl.formatMessage(messages.previous)}\n+              icon='chevron-left'\n+              iconComponent={ChevronLeftIcon}\n+              onClick={handlePrev}\n+            />\n+            <span>\n+              {slideIndex + 1} / {pinnedStatuses.size}\n+            </span>\n+            <IconButton\n+              title={intl.formatMessage(messages.next)}\n+              icon='chevron-right'\n+              iconComponent={ChevronRightIcon}\n+              onClick={handleNext}\n+            />\n+          </>\n+        )}\n+      </div>\n+      <animated.div\n+        className='featured-carousel__slides'\n+        ref={wrapperRef}\n+        style={wrapperStyles}\n+      >\n+        {pinnedStatuses.map((statusId, index) => (\n+          <animated.div\n+            key={`f-${statusId}`}\n+            style={{ x }}\n+            className='featured-carousel__slide'\n+            data-index={index}\n+          >\n+            <StatusContainer\n+              // @ts-expect-error inferred props are wrong\n+              id={statusId}\n+              contextType='account'\n+            />\n+          </animated.div>",
        "comment_created_at": "2025-05-21T13:44:54+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "i took a look at the ARIA authoring guide and that's not suggested. are you sure that's helpful?\n\nhttps://www.w3.org/WAI/ARIA/apg/patterns/carousel/",
        "pr_file_module": null
      },
      {
        "comment_id": "2100449337",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34754,
        "pr_file": "app/javascript/mastodon/components/featured_carousel.tsx",
        "discussion_id": "2100230314",
        "commented_code": "@@ -0,0 +1,150 @@\n+import { useCallback, useEffect, useRef, useState } from 'react';\n+\n+import { defineMessages, FormattedMessage, useIntl } from 'react-intl';\n+\n+import type { Map as ImmutableMap } from 'immutable';\n+import { List as ImmutableList } from 'immutable';\n+\n+import { animated, useSpring } from '@react-spring/web';\n+import { useDrag } from '@use-gesture/react';\n+\n+import { expandAccountFeaturedTimeline } from '@/mastodon/actions/timelines';\n+import { IconButton } from '@/mastodon/components/icon_button';\n+import StatusContainer from '@/mastodon/containers/status_container';\n+import { useAppDispatch, useAppSelector } from '@/mastodon/store';\n+import ChevronLeftIcon from '@/material-icons/400-24px/chevron_left.svg?react';\n+import ChevronRightIcon from '@/material-icons/400-24px/chevron_right.svg?react';\n+\n+const messages = defineMessages({\n+  previous: { id: 'featured_carousel.previous', defaultMessage: 'Previous' },\n+  next: { id: 'featured_carousel.next', defaultMessage: 'Next' },\n+});\n+\n+export const FeaturedCarousel: React.FC<{\n+  accountId: string;\n+  tagged?: string;\n+}> = ({ accountId, tagged }) => {\n+  const intl = useIntl();\n+\n+  // Load pinned statuses\n+  const dispatch = useAppDispatch();\n+  useEffect(() => {\n+    if (accountId) {\n+      void dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n+    }\n+  }, [accountId, dispatch, tagged]);\n+  const pinnedStatuses = useAppSelector(\n+    (state) =>\n+      (state.timelines as ImmutableMap<string, unknown>).getIn(\n+        [`account:${accountId}:pinned${tagged ? `:${tagged}` : ''}`, 'items'],\n+        ImmutableList(),\n+      ) as ImmutableList<string>,\n+  );\n+\n+  // Handle slide change\n+  const [slideIndex, setSlideIndex] = useState(0);\n+  const handleSlideChange = useCallback(\n+    (direction: number) => {\n+      const max = pinnedStatuses.size - 1;\n+      setSlideIndex((prev) => {\n+        const newIndex = prev + direction;\n+        if (newIndex < 0) {\n+          return max;\n+        } else if (newIndex > max) {\n+          return 0;\n+        }\n+        return newIndex;\n+      });\n+    },\n+    [pinnedStatuses.size],\n+  );\n+\n+  // Handle swiping animations\n+  const { x } = useSpring({ x: `-${slideIndex * 100}%` });\n+  const bind = useDrag(({ swipe: [swipeX] }) => {\n+    handleSlideChange(swipeX * -1); // Invert swipe as swiping left loads the next slide.\n+  });\n+  const handlePrev = useCallback(() => {\n+    handleSlideChange(-1);\n+  }, [handleSlideChange]);\n+  const handleNext = useCallback(() => {\n+    handleSlideChange(1);\n+  }, [handleSlideChange]);\n+\n+  // Handle wrapper height animation\n+  const [wrapperStyles, wrapperSpringApi] = useSpring(() => ({\n+    height: 0,\n+  }));\n+  const wrapperRef = useRef<HTMLDivElement>(null);\n+  const wrapperEle = wrapperRef.current;\n+  useEffect(() => {\n+    if (!wrapperEle) {\n+      return;\n+    }\n+    const currentSlideEle = wrapperEle.querySelector(\n+      `[data-index=\"${slideIndex}\"] > div`,\n+    );\n+\n+    if (!currentSlideEle) {\n+      return;\n+    }\n+\n+    void wrapperSpringApi.start({ height: currentSlideEle.scrollHeight });\n+  }, [slideIndex, wrapperSpringApi, wrapperEle]);\n+\n+  if (!accountId || pinnedStatuses.isEmpty()) {\n+    return null;\n+  }\n+\n+  return (\n+    <div className='featured-carousel' {...bind()}>\n+      <div className='featured-carousel__header'>\n+        <h4 className='featured-carousel__title'>\n+          <FormattedMessage\n+            id='pinned_carousel.header'\n+            defaultMessage='Pinned Posts'\n+          />\n+        </h4>\n+        {pinnedStatuses.size > 1 && (\n+          <>\n+            <IconButton\n+              title={intl.formatMessage(messages.previous)}\n+              icon='chevron-left'\n+              iconComponent={ChevronLeftIcon}\n+              onClick={handlePrev}\n+            />\n+            <span>\n+              {slideIndex + 1} / {pinnedStatuses.size}\n+            </span>\n+            <IconButton\n+              title={intl.formatMessage(messages.next)}\n+              icon='chevron-right'\n+              iconComponent={ChevronRightIcon}\n+              onClick={handleNext}\n+            />\n+          </>\n+        )}\n+      </div>\n+      <animated.div\n+        className='featured-carousel__slides'\n+        ref={wrapperRef}\n+        style={wrapperStyles}\n+      >\n+        {pinnedStatuses.map((statusId, index) => (\n+          <animated.div\n+            key={`f-${statusId}`}\n+            style={{ x }}\n+            className='featured-carousel__slide'\n+            data-index={index}\n+          >\n+            <StatusContainer\n+              // @ts-expect-error inferred props are wrong\n+              id={statusId}\n+              contextType='account'\n+            />\n+          </animated.div>",
        "comment_created_at": "2025-05-21T14:29:16+00:00",
        "comment_author": "diondiondion",
        "comment_body": "Yeah, being able to focus or interact with obscured elements is never good. I'm surprised they don't explicitly mention this in their guide, but I suspect it's because their sample implementations simply set inactive slides to `display: none`.\r\n\r\nThe alternative to making these slides inert would be sliding them into view as they're focused, but that won't work for a screen reader cursor.",
        "pr_file_module": null
      },
      {
        "comment_id": "2100461038",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34754,
        "pr_file": "app/javascript/mastodon/components/featured_carousel.tsx",
        "discussion_id": "2100230314",
        "commented_code": "@@ -0,0 +1,150 @@\n+import { useCallback, useEffect, useRef, useState } from 'react';\n+\n+import { defineMessages, FormattedMessage, useIntl } from 'react-intl';\n+\n+import type { Map as ImmutableMap } from 'immutable';\n+import { List as ImmutableList } from 'immutable';\n+\n+import { animated, useSpring } from '@react-spring/web';\n+import { useDrag } from '@use-gesture/react';\n+\n+import { expandAccountFeaturedTimeline } from '@/mastodon/actions/timelines';\n+import { IconButton } from '@/mastodon/components/icon_button';\n+import StatusContainer from '@/mastodon/containers/status_container';\n+import { useAppDispatch, useAppSelector } from '@/mastodon/store';\n+import ChevronLeftIcon from '@/material-icons/400-24px/chevron_left.svg?react';\n+import ChevronRightIcon from '@/material-icons/400-24px/chevron_right.svg?react';\n+\n+const messages = defineMessages({\n+  previous: { id: 'featured_carousel.previous', defaultMessage: 'Previous' },\n+  next: { id: 'featured_carousel.next', defaultMessage: 'Next' },\n+});\n+\n+export const FeaturedCarousel: React.FC<{\n+  accountId: string;\n+  tagged?: string;\n+}> = ({ accountId, tagged }) => {\n+  const intl = useIntl();\n+\n+  // Load pinned statuses\n+  const dispatch = useAppDispatch();\n+  useEffect(() => {\n+    if (accountId) {\n+      void dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n+    }\n+  }, [accountId, dispatch, tagged]);\n+  const pinnedStatuses = useAppSelector(\n+    (state) =>\n+      (state.timelines as ImmutableMap<string, unknown>).getIn(\n+        [`account:${accountId}:pinned${tagged ? `:${tagged}` : ''}`, 'items'],\n+        ImmutableList(),\n+      ) as ImmutableList<string>,\n+  );\n+\n+  // Handle slide change\n+  const [slideIndex, setSlideIndex] = useState(0);\n+  const handleSlideChange = useCallback(\n+    (direction: number) => {\n+      const max = pinnedStatuses.size - 1;\n+      setSlideIndex((prev) => {\n+        const newIndex = prev + direction;\n+        if (newIndex < 0) {\n+          return max;\n+        } else if (newIndex > max) {\n+          return 0;\n+        }\n+        return newIndex;\n+      });\n+    },\n+    [pinnedStatuses.size],\n+  );\n+\n+  // Handle swiping animations\n+  const { x } = useSpring({ x: `-${slideIndex * 100}%` });\n+  const bind = useDrag(({ swipe: [swipeX] }) => {\n+    handleSlideChange(swipeX * -1); // Invert swipe as swiping left loads the next slide.\n+  });\n+  const handlePrev = useCallback(() => {\n+    handleSlideChange(-1);\n+  }, [handleSlideChange]);\n+  const handleNext = useCallback(() => {\n+    handleSlideChange(1);\n+  }, [handleSlideChange]);\n+\n+  // Handle wrapper height animation\n+  const [wrapperStyles, wrapperSpringApi] = useSpring(() => ({\n+    height: 0,\n+  }));\n+  const wrapperRef = useRef<HTMLDivElement>(null);\n+  const wrapperEle = wrapperRef.current;\n+  useEffect(() => {\n+    if (!wrapperEle) {\n+      return;\n+    }\n+    const currentSlideEle = wrapperEle.querySelector(\n+      `[data-index=\"${slideIndex}\"] > div`,\n+    );\n+\n+    if (!currentSlideEle) {\n+      return;\n+    }\n+\n+    void wrapperSpringApi.start({ height: currentSlideEle.scrollHeight });\n+  }, [slideIndex, wrapperSpringApi, wrapperEle]);\n+\n+  if (!accountId || pinnedStatuses.isEmpty()) {\n+    return null;\n+  }\n+\n+  return (\n+    <div className='featured-carousel' {...bind()}>\n+      <div className='featured-carousel__header'>\n+        <h4 className='featured-carousel__title'>\n+          <FormattedMessage\n+            id='pinned_carousel.header'\n+            defaultMessage='Pinned Posts'\n+          />\n+        </h4>\n+        {pinnedStatuses.size > 1 && (\n+          <>\n+            <IconButton\n+              title={intl.formatMessage(messages.previous)}\n+              icon='chevron-left'\n+              iconComponent={ChevronLeftIcon}\n+              onClick={handlePrev}\n+            />\n+            <span>\n+              {slideIndex + 1} / {pinnedStatuses.size}\n+            </span>\n+            <IconButton\n+              title={intl.formatMessage(messages.next)}\n+              icon='chevron-right'\n+              iconComponent={ChevronRightIcon}\n+              onClick={handleNext}\n+            />\n+          </>\n+        )}\n+      </div>\n+      <animated.div\n+        className='featured-carousel__slides'\n+        ref={wrapperRef}\n+        style={wrapperStyles}\n+      >\n+        {pinnedStatuses.map((statusId, index) => (\n+          <animated.div\n+            key={`f-${statusId}`}\n+            style={{ x }}\n+            className='featured-carousel__slide'\n+            data-index={index}\n+          >\n+            <StatusContainer\n+              // @ts-expect-error inferred props are wrong\n+              id={statusId}\n+              contextType='account'\n+            />\n+          </animated.div>",
        "comment_created_at": "2025-05-21T14:34:29+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "ah gotcha. so `aria-disabled`? or something else?",
        "pr_file_module": null
      },
      {
        "comment_id": "2100481138",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34754,
        "pr_file": "app/javascript/mastodon/components/featured_carousel.tsx",
        "discussion_id": "2100230314",
        "commented_code": "@@ -0,0 +1,150 @@\n+import { useCallback, useEffect, useRef, useState } from 'react';\n+\n+import { defineMessages, FormattedMessage, useIntl } from 'react-intl';\n+\n+import type { Map as ImmutableMap } from 'immutable';\n+import { List as ImmutableList } from 'immutable';\n+\n+import { animated, useSpring } from '@react-spring/web';\n+import { useDrag } from '@use-gesture/react';\n+\n+import { expandAccountFeaturedTimeline } from '@/mastodon/actions/timelines';\n+import { IconButton } from '@/mastodon/components/icon_button';\n+import StatusContainer from '@/mastodon/containers/status_container';\n+import { useAppDispatch, useAppSelector } from '@/mastodon/store';\n+import ChevronLeftIcon from '@/material-icons/400-24px/chevron_left.svg?react';\n+import ChevronRightIcon from '@/material-icons/400-24px/chevron_right.svg?react';\n+\n+const messages = defineMessages({\n+  previous: { id: 'featured_carousel.previous', defaultMessage: 'Previous' },\n+  next: { id: 'featured_carousel.next', defaultMessage: 'Next' },\n+});\n+\n+export const FeaturedCarousel: React.FC<{\n+  accountId: string;\n+  tagged?: string;\n+}> = ({ accountId, tagged }) => {\n+  const intl = useIntl();\n+\n+  // Load pinned statuses\n+  const dispatch = useAppDispatch();\n+  useEffect(() => {\n+    if (accountId) {\n+      void dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n+    }\n+  }, [accountId, dispatch, tagged]);\n+  const pinnedStatuses = useAppSelector(\n+    (state) =>\n+      (state.timelines as ImmutableMap<string, unknown>).getIn(\n+        [`account:${accountId}:pinned${tagged ? `:${tagged}` : ''}`, 'items'],\n+        ImmutableList(),\n+      ) as ImmutableList<string>,\n+  );\n+\n+  // Handle slide change\n+  const [slideIndex, setSlideIndex] = useState(0);\n+  const handleSlideChange = useCallback(\n+    (direction: number) => {\n+      const max = pinnedStatuses.size - 1;\n+      setSlideIndex((prev) => {\n+        const newIndex = prev + direction;\n+        if (newIndex < 0) {\n+          return max;\n+        } else if (newIndex > max) {\n+          return 0;\n+        }\n+        return newIndex;\n+      });\n+    },\n+    [pinnedStatuses.size],\n+  );\n+\n+  // Handle swiping animations\n+  const { x } = useSpring({ x: `-${slideIndex * 100}%` });\n+  const bind = useDrag(({ swipe: [swipeX] }) => {\n+    handleSlideChange(swipeX * -1); // Invert swipe as swiping left loads the next slide.\n+  });\n+  const handlePrev = useCallback(() => {\n+    handleSlideChange(-1);\n+  }, [handleSlideChange]);\n+  const handleNext = useCallback(() => {\n+    handleSlideChange(1);\n+  }, [handleSlideChange]);\n+\n+  // Handle wrapper height animation\n+  const [wrapperStyles, wrapperSpringApi] = useSpring(() => ({\n+    height: 0,\n+  }));\n+  const wrapperRef = useRef<HTMLDivElement>(null);\n+  const wrapperEle = wrapperRef.current;\n+  useEffect(() => {\n+    if (!wrapperEle) {\n+      return;\n+    }\n+    const currentSlideEle = wrapperEle.querySelector(\n+      `[data-index=\"${slideIndex}\"] > div`,\n+    );\n+\n+    if (!currentSlideEle) {\n+      return;\n+    }\n+\n+    void wrapperSpringApi.start({ height: currentSlideEle.scrollHeight });\n+  }, [slideIndex, wrapperSpringApi, wrapperEle]);\n+\n+  if (!accountId || pinnedStatuses.isEmpty()) {\n+    return null;\n+  }\n+\n+  return (\n+    <div className='featured-carousel' {...bind()}>\n+      <div className='featured-carousel__header'>\n+        <h4 className='featured-carousel__title'>\n+          <FormattedMessage\n+            id='pinned_carousel.header'\n+            defaultMessage='Pinned Posts'\n+          />\n+        </h4>\n+        {pinnedStatuses.size > 1 && (\n+          <>\n+            <IconButton\n+              title={intl.formatMessage(messages.previous)}\n+              icon='chevron-left'\n+              iconComponent={ChevronLeftIcon}\n+              onClick={handlePrev}\n+            />\n+            <span>\n+              {slideIndex + 1} / {pinnedStatuses.size}\n+            </span>\n+            <IconButton\n+              title={intl.formatMessage(messages.next)}\n+              icon='chevron-right'\n+              iconComponent={ChevronRightIcon}\n+              onClick={handleNext}\n+            />\n+          </>\n+        )}\n+      </div>\n+      <animated.div\n+        className='featured-carousel__slides'\n+        ref={wrapperRef}\n+        style={wrapperStyles}\n+      >\n+        {pinnedStatuses.map((statusId, index) => (\n+          <animated.div\n+            key={`f-${statusId}`}\n+            style={{ x }}\n+            className='featured-carousel__slide'\n+            data-index={index}\n+          >\n+            <StatusContainer\n+              // @ts-expect-error inferred props are wrong\n+              id={statusId}\n+              contextType='account'\n+            />\n+          </animated.div>",
        "comment_created_at": "2025-05-21T14:42:56+00:00",
        "comment_author": "diondiondion",
        "comment_body": "I added a suggestion in my review below, the `inert` attribute should do the trick",
        "pr_file_module": null
      }
    ]
  }
]