[
  {
    "discussion_id": "2217986922",
    "pr_number": 35409,
    "pr_file": "app/controllers/concerns/mfa_force_concern.rb",
    "created_at": "2025-07-20T22:36:27+00:00",
    "commented_code": "+# frozen_string_literal: true\n+\n+module MfaForceConcern\n+  extend ActiveSupport::Concern\n+\n+  included do\n+    before_action :check_mfa_requirement, if: :user_signed_in?\n+  end\n+\n+  private\n+\n+  def check_mfa_requirement\n+    return unless mfa_force_enabled?\n+    return if current_user.otp_enabled?\n+    return if mfa_setup_allowed_paths?\n+\n+    flash[:warning] = I18n.t('mfa_force.required_message')\n+    redirect_to settings_otp_authentication_path\n+  end\n+\n+  def mfa_force_enabled?\n+    ENV['MFA_FORCE'] == 'true'",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2217986922",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 35409,
        "pr_file": "app/controllers/concerns/mfa_force_concern.rb",
        "discussion_id": "2217986922",
        "commented_code": "@@ -0,0 +1,39 @@\n+# frozen_string_literal: true\n+\n+module MfaForceConcern\n+  extend ActiveSupport::Concern\n+\n+  included do\n+    before_action :check_mfa_requirement, if: :user_signed_in?\n+  end\n+\n+  private\n+\n+  def check_mfa_requirement\n+    return unless mfa_force_enabled?\n+    return if current_user.otp_enabled?\n+    return if mfa_setup_allowed_paths?\n+\n+    flash[:warning] = I18n.t('mfa_force.required_message')\n+    redirect_to settings_otp_authentication_path\n+  end\n+\n+  def mfa_force_enabled?\n+    ENV['MFA_FORCE'] == 'true'",
        "comment_created_at": "2025-07-20T22:36:27+00:00",
        "comment_author": "mjankowski",
        "comment_body": "This is fine as first-pass, but could also be migrated to one of the relevant `config_for` sections.",
        "pr_file_module": null
      },
      {
        "comment_id": "2218207647",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 35409,
        "pr_file": "app/controllers/concerns/mfa_force_concern.rb",
        "discussion_id": "2217986922",
        "commented_code": "@@ -0,0 +1,39 @@\n+# frozen_string_literal: true\n+\n+module MfaForceConcern\n+  extend ActiveSupport::Concern\n+\n+  included do\n+    before_action :check_mfa_requirement, if: :user_signed_in?\n+  end\n+\n+  private\n+\n+  def check_mfa_requirement\n+    return unless mfa_force_enabled?\n+    return if current_user.otp_enabled?\n+    return if mfa_setup_allowed_paths?\n+\n+    flash[:warning] = I18n.t('mfa_force.required_message')\n+    redirect_to settings_otp_authentication_path\n+  end\n+\n+  def mfa_force_enabled?\n+    ENV['MFA_FORCE'] == 'true'",
        "comment_created_at": "2025-07-21T05:16:41+00:00",
        "comment_author": "alkemist17",
        "comment_body": "Okay, I\u2019ll move it to a config_for section in this PR to align with the rest of the app.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1758852709",
    "pr_number": 31804,
    "pr_file": "config/initializers/time_zone.rb",
    "created_at": "2024-09-13T13:15:25+00:00",
    "commented_code": "+# frozen_string_literal: true\n+\n+# Raise if invalid zone is specified\n+Time.find_zone!(ENV.fetch('DEFAULT_TIME_ZONE', nil))",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1758852709",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 31804,
        "pr_file": "config/initializers/time_zone.rb",
        "discussion_id": "1758852709",
        "commented_code": "@@ -0,0 +1,4 @@\n+# frozen_string_literal: true\n+\n+# Raise if invalid zone is specified\n+Time.find_zone!(ENV.fetch('DEFAULT_TIME_ZONE', nil))",
        "comment_created_at": "2024-09-13T13:15:25+00:00",
        "comment_author": "mjankowski",
        "comment_body": "Future refactor here -- we have a series of open PRs to move app wide config like this into yml files that are loaded/validated once at app launch time (via `config_for`) ... if/when those are merged, this is a good setting to go into something like that as well.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1977722744",
    "pr_number": 34038,
    "pr_file": "lib/mastodon/feature.rb",
    "created_at": "2025-03-03T15:30:08+00:00",
    "commented_code": "+# frozen_string_literal: true\n+\n+module Mastodon::Feature\n+  class << self\n+    def enabled_features\n+      @enabled_features ||=\n+        (ENV['EXPERIMENTAL_FEATURES'] || '').split(',').map(&:strip)",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1977722744",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34038,
        "pr_file": "lib/mastodon/feature.rb",
        "discussion_id": "1977722744",
        "commented_code": "@@ -0,0 +1,26 @@\n+# frozen_string_literal: true\n+\n+module Mastodon::Feature\n+  class << self\n+    def enabled_features\n+      @enabled_features ||=\n+        (ENV['EXPERIMENTAL_FEATURES'] || '').split(',').map(&:strip)",
        "comment_created_at": "2025-03-03T15:30:08+00:00",
        "comment_author": "mjankowski",
        "comment_body": "Is the idea that this is loaded once at launch time and would require a restart to reload the features? (ie, no dynamic changing w/out restart) - if so, could shove this into one of the `config_for` namespaces?\r\n\r\nSeparately, maybe `ENV.fetch...`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1981142315",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34038,
        "pr_file": "lib/mastodon/feature.rb",
        "discussion_id": "1977722744",
        "commented_code": "@@ -0,0 +1,26 @@\n+# frozen_string_literal: true\n+\n+module Mastodon::Feature\n+  class << self\n+    def enabled_features\n+      @enabled_features ||=\n+        (ENV['EXPERIMENTAL_FEATURES'] || '').split(',').map(&:strip)",
        "comment_created_at": "2025-03-05T10:40:48+00:00",
        "comment_author": "oneiros",
        "comment_body": "> Separately, maybe ENV.fetch...?\r\n\r\nDefinitely! Thanks a lot.\r\n\r\n> Is the idea that this is loaded once at launch time and would require a restart to reload the features? (ie, no dynamic changing w/out restart) \r\n\r\nYes, that is all we need for now.\r\n\r\n> if so, could shove this into one of the config_for namespaces?\r\n\r\nI am not sure. I should maybe add that one of the requirements was that toggling of multiple features should be possible via a single environment variable. I believe it would be awkward to implement this as ERB within a yaml file.\r\n\r\nOr what is it you are proposing here exactly?",
        "pr_file_module": null
      },
      {
        "comment_id": "1981345431",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34038,
        "pr_file": "lib/mastodon/feature.rb",
        "discussion_id": "1977722744",
        "commented_code": "@@ -0,0 +1,26 @@\n+# frozen_string_literal: true\n+\n+module Mastodon::Feature\n+  class << self\n+    def enabled_features\n+      @enabled_features ||=\n+        (ENV['EXPERIMENTAL_FEATURES'] || '').split(',').map(&:strip)",
        "comment_created_at": "2025-03-05T12:54:20+00:00",
        "comment_author": "mjankowski",
        "comment_body": "> I am not sure. I should maybe add that one of the requirements was that toggling of multiple features should be possible via a single environment variable. I believe it would be awkward to implement this as ERB within a yaml file.\r\n\r\nI agree that once you start to cross the line from \"just loading some env vars\" into \"processing strings and running ruby code\" in a yaml file it starts to feel awkward. I'm not sure where that line is exactly.\r\n\r\nSo far we mostly just have the env var loading in the yml - https://github.com/mastodon/mastodon/blob/main/config/mastodon.yml - and I think most scenarios that need additional parsing/processing do it in private methods where they are used?\r\n\r\nOne side goal of the `config_for` migration was to eventually enable https://docs.rubocop.org/rubocop-rails/cops_rails.html#railsenvironmentvariableaccess and enforce the \"configure at load time\" practice.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1981355645",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34038,
        "pr_file": "lib/mastodon/feature.rb",
        "discussion_id": "1977722744",
        "commented_code": "@@ -0,0 +1,26 @@\n+# frozen_string_literal: true\n+\n+module Mastodon::Feature\n+  class << self\n+    def enabled_features\n+      @enabled_features ||=\n+        (ENV['EXPERIMENTAL_FEATURES'] || '').split(',').map(&:strip)",
        "comment_created_at": "2025-03-05T13:01:18+00:00",
        "comment_author": "oneiros",
        "comment_body": "So, as a compromise I could move the `ENV.fetch` in, say, `config/mastodon.yml` and keep the parsing and making sense of this variable in `Mastodon::Feature`.\r\n\r\nI would need to actually try this. I am a bit worried about the order in which things are loaded. But this would enable us to use the cop you mentioned. Would this work for you?",
        "pr_file_module": null
      },
      {
        "comment_id": "1981401581",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34038,
        "pr_file": "lib/mastodon/feature.rb",
        "discussion_id": "1977722744",
        "commented_code": "@@ -0,0 +1,26 @@\n+# frozen_string_literal: true\n+\n+module Mastodon::Feature\n+  class << self\n+    def enabled_features\n+      @enabled_features ||=\n+        (ENV['EXPERIMENTAL_FEATURES'] || '').split(',').map(&:strip)",
        "comment_created_at": "2025-03-05T13:32:37+00:00",
        "comment_author": "mjankowski",
        "comment_body": "Yup, exactly that - just the bare minimum of nudging the env load into `config_for`, and leaving any parsing/formatting/etc in the classes.",
        "pr_file_module": null
      },
      {
        "comment_id": "1981484563",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34038,
        "pr_file": "lib/mastodon/feature.rb",
        "discussion_id": "1977722744",
        "commented_code": "@@ -0,0 +1,26 @@\n+# frozen_string_literal: true\n+\n+module Mastodon::Feature\n+  class << self\n+    def enabled_features\n+      @enabled_features ||=\n+        (ENV['EXPERIMENTAL_FEATURES'] || '').split(',').map(&:strip)",
        "comment_created_at": "2025-03-05T14:11:33+00:00",
        "comment_author": "oneiros",
        "comment_body": "I gave it a try and it seems to work.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1914424815",
    "pr_number": 33577,
    "pr_file": "spec/presenters/instance_presenter_spec.rb",
    "created_at": "2025-01-14T08:28:20+00:00",
    "commented_code": null,
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1914424815",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33577,
        "pr_file": "spec/presenters/instance_presenter_spec.rb",
        "discussion_id": "1914424815",
        "commented_code": null,
        "comment_created_at": "2025-01-14T08:28:20+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "One thing I'm kind of worried about is that we don't test for the environment variables' effect anymore, although they are the documented way to do this.",
        "pr_file_module": null
      },
      {
        "comment_id": "1914611269",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33577,
        "pr_file": "spec/presenters/instance_presenter_spec.rb",
        "discussion_id": "1914424815",
        "commented_code": null,
        "comment_created_at": "2025-01-14T10:45:03+00:00",
        "comment_author": "mjankowski",
        "comment_body": "Yeah... agreed it would be nice to preserve the env->config assertions while also getting the load early benefits. \n\nI wonder if there's a \"reload configs\" we could use just in spec. Will review that. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1914846358",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33577,
        "pr_file": "spec/presenters/instance_presenter_spec.rb",
        "discussion_id": "1914424815",
        "commented_code": null,
        "comment_created_at": "2025-01-14T13:49:45+00:00",
        "comment_author": "mjankowski",
        "comment_body": "Wait ... we can just have it re-assign the config, and preserve the climate control approach ... updated here to do that in the one spec which was changed.\r\n\r\nMight do a follow-up here to add more of these for the ones previously updated. I agree that \"when I set the env var, the config is correct\" is a worthwhile thing to capture in these.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1889346277",
    "pr_number": 33342,
    "pr_file": "config/application.rb",
    "created_at": "2024-12-17T22:56:53+00:00",
    "commented_code": "config.x.mastodon = config_for(:mastodon)\n     config.x.translation = config_for(:translation)\n \n+    if ENV.fetch('QUERY_LOG_TAGS_ENABLED', 'false') == 'true'",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1889346277",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33342,
        "pr_file": "config/application.rb",
        "discussion_id": "1889346277",
        "commented_code": "@@ -108,6 +108,11 @@ class Application < Rails::Application\n     config.x.mastodon = config_for(:mastodon)\n     config.x.translation = config_for(:translation)\n \n+    if ENV.fetch('QUERY_LOG_TAGS_ENABLED', 'false') == 'true'",
        "comment_created_at": "2024-12-17T22:56:53+00:00",
        "comment_author": "renchap",
        "comment_body": "I added this to `application.rb`, because putting it into an initializer caused the `namespaced_controller` and `action` attributes to not be inserted. `sidekiq_job_class` was correctly there.\r\n\r\nI am not sure what is happening here, I suspect this is a load order issue. \r\n\r\nhttps://github.com/rails/rails/issues/46103 mentions a similar issue and the docs have been updated after this, but they still say that having it in an initializer should work, so I am unsure of what is happening here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1889964025",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33342,
        "pr_file": "config/application.rb",
        "discussion_id": "1889346277",
        "commented_code": "@@ -108,6 +108,11 @@ class Application < Rails::Application\n     config.x.mastodon = config_for(:mastodon)\n     config.x.translation = config_for(:translation)\n \n+    if ENV.fetch('QUERY_LOG_TAGS_ENABLED', 'false') == 'true'",
        "comment_created_at": "2024-12-18T10:04:54+00:00",
        "comment_author": "renchap",
        "comment_body": "Looks like this explicitely needs to be defined either in `application.rb` or `environment/*.rb`, due to loading order conflicts.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1624053176",
    "pr_number": 30507,
    "pr_file": "config/application.rb",
    "created_at": "2024-06-03T08:49:32+00:00",
    "commented_code": "require 'mastodon/redis_config'\n     end\n \n+    # Load config/omniauth.yml settings\n+    config.omniauth = config_for(:omniauth)",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1624053176",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 30507,
        "pr_file": "config/application.rb",
        "discussion_id": "1624053176",
        "commented_code": "@@ -100,6 +100,9 @@ class Application < Rails::Application\n       require 'mastodon/redis_config'\n     end\n \n+    # Load config/omniauth.yml settings\n+    config.omniauth = config_for(:omniauth)",
        "comment_created_at": "2024-06-03T08:49:32+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "I am not sure how clean and future-proof adding our own stuff directly in `config` is. Otherwise, this looks good.",
        "pr_file_module": null
      },
      {
        "comment_id": "1624486720",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 30507,
        "pr_file": "config/application.rb",
        "discussion_id": "1624053176",
        "commented_code": "@@ -100,6 +100,9 @@ class Application < Rails::Application\n       require 'mastodon/redis_config'\n     end\n \n+    # Load config/omniauth.yml settings\n+    config.omniauth = config_for(:omniauth)",
        "comment_created_at": "2024-06-03T13:42:53+00:00",
        "comment_author": "mjankowski",
        "comment_body": "Do you mean \"putting files in the `config` dir\", or \"putting values right on the top-level Rails `configuration` namespace?\r\n\r\nIn either case - I think unless the framework dropped the feature for some reason, it's probably safe. You avoid collisions because the key comes from the file name ... so as long you don't name (and load via config_for) some file that is named after an already-existing rails configuration value, its probably ok. In this specific case, I think \"omniauth\" is safe.",
        "pr_file_module": null
      },
      {
        "comment_id": "1634399742",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 30507,
        "pr_file": "config/application.rb",
        "discussion_id": "1624053176",
        "commented_code": "@@ -100,6 +100,9 @@ class Application < Rails::Application\n       require 'mastodon/redis_config'\n     end\n \n+    # Load config/omniauth.yml settings\n+    config.omniauth = config_for(:omniauth)",
        "comment_created_at": "2024-06-11T08:10:20+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "I meant the use of the top-level Rails `configuration` namespace. `omniauth` is probably safe indeed, though.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1194130658",
    "pr_number": 22273,
    "pr_file": "app/controllers/accounts_controller.rb",
    "created_at": "2023-05-15T17:16:37+00:00",
    "commented_code": "format.json do\n         expires_in 3.minutes, public: !(authorized_fetch_mode? && signed_request_account.present?)\n+\n+        record_reach!\n+\n         render_with_cache json: @account, content_type: 'application/activity+json', serializer: ActivityPub::ActorSerializer, adapter: ActivityPub::Adapter\n       end\n     end\n   end\n \n   private\n \n+  def record_reach!\n+    unless authorized_fetch_mode?\n+      AccountReachFilter.where(account_id: @account.id).delete_all\n+      return\n+    end\n+\n+    # It's not ideal, but we have no way to tell the remote account about it\u2026\n+    return if signed_request_account.preferred_inbox_url.blank?\n+\n+    account_reach_filter_id = AccountReachFilter.where(account_id: @account.id).pick(:id)\n+    return if account_reach_filter_id.nil?\n+\n+    with_redis do |redis|\n+      redis.sadd(\"account_reach:#{account_reach_filter_id}:to_add\", Addressable::URI.parse(signed_request_account.preferred_inbox_url).normalized_host)\n+    end\n+\n+    UpdateAccountReachWorker.perform_async(account_reach_filter_id)\n+  end\n+\n+  def authorized_fetch_actors?\n+    %w(true all actors).include?(ENV.fetch('AUTHORIZED_FETCH', 'false')) || Rails.configuration.x.whitelist_mode",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1194130658",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 22273,
        "pr_file": "app/controllers/accounts_controller.rb",
        "discussion_id": "1194130658",
        "commented_code": "@@ -32,13 +33,39 @@ def show\n \n       format.json do\n         expires_in 3.minutes, public: !(authorized_fetch_mode? && signed_request_account.present?)\n+\n+        record_reach!\n+\n         render_with_cache json: @account, content_type: 'application/activity+json', serializer: ActivityPub::ActorSerializer, adapter: ActivityPub::Adapter\n       end\n     end\n   end\n \n   private\n \n+  def record_reach!\n+    unless authorized_fetch_mode?\n+      AccountReachFilter.where(account_id: @account.id).delete_all\n+      return\n+    end\n+\n+    # It's not ideal, but we have no way to tell the remote account about it\u2026\n+    return if signed_request_account.preferred_inbox_url.blank?\n+\n+    account_reach_filter_id = AccountReachFilter.where(account_id: @account.id).pick(:id)\n+    return if account_reach_filter_id.nil?\n+\n+    with_redis do |redis|\n+      redis.sadd(\"account_reach:#{account_reach_filter_id}:to_add\", Addressable::URI.parse(signed_request_account.preferred_inbox_url).normalized_host)\n+    end\n+\n+    UpdateAccountReachWorker.perform_async(account_reach_filter_id)\n+  end\n+\n+  def authorized_fetch_actors?\n+    %w(true all actors).include?(ENV.fetch('AUTHORIZED_FETCH', 'false')) || Rails.configuration.x.whitelist_mode",
        "comment_created_at": "2023-05-15T17:16:37+00:00",
        "comment_author": "ThisIsMissEm",
        "comment_body": "This line is a close copy of line 54 in application_controller, would it be better to lift it up to the application configuration layer instead? e.g., a `Rails.configuration.x.fetch_mode` and then set it to `none | actors | all`?",
        "pr_file_module": null
      }
    ]
  }
]