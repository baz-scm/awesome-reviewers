[
  {
    "discussion_id": "1824336372",
    "pr_number": 32709,
    "pr_file": "app/javascript/mastodon/features/annual_report/percentile.tsx",
    "created_at": "2024-10-31T12:02:35+00:00",
    "commented_code": null,
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1824336372",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 32709,
        "pr_file": "app/javascript/mastodon/features/annual_report/percentile.tsx",
        "discussion_id": "1824336372",
        "commented_code": null,
        "comment_created_at": "2024-10-31T12:02:35+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "I am again concerned, with this panel in particular, that we are encouraging clout-chasing and popularity contests where we really should not be.\r\n\r\nIn addition, I have a few other concerns about this panel:\r\n- I'm afraid that breaking up the sentence in a few translatable strings and making layout assumptions based on the shape of the sentence is going to make that hard or even impossible to translate in some languages\r\n- \u201cThat puts you in the top X of Mastodon users\u201d can be fairly confusing and misleading. What's the metric used here? Is that Mastodon users in general, fediverse users known to your server, or local users on your server?\r\n- (I vaguely understand what the Bernie thing is supposed to mean, but this doesn't land for me; maybe it's some kind of cultural reference I'm missing?)",
        "pr_file_module": null
      },
      {
        "comment_id": "1824677829",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 32709,
        "pr_file": "app/javascript/mastodon/features/annual_report/percentile.tsx",
        "discussion_id": "1824336372",
        "commented_code": null,
        "comment_created_at": "2024-10-31T15:28:35+00:00",
        "comment_author": "Gargron",
        "comment_body": "I really doubt that a number you can check once per year will encourage any kind of day-to-day behaviour change. This feature is meant to be fun rather than simply a collection of metrics, so presentation matters a lot. But \"fun\" is difficult to localize equally to all languages and cultures. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1827904955",
    "pr_number": 32709,
    "pr_file": "app/javascript/mastodon/features/annual_report/percentile.tsx",
    "created_at": "2024-11-04T15:17:04+00:00",
    "commented_code": "+import { FormattedMessage, FormattedNumber } from 'react-intl';\n+\n+import type { Percentiles } from 'mastodon/models/annual_report';\n+\n+export const Percentile: React.FC<{\n+  data: Percentiles;\n+}> = ({ data }) => {\n+  const percentile = data.statuses;\n+\n+  return (\n+    <div className='annual-report__bento__box annual-report__summary__percentile'>\n+      <div className='annual-report__summary__percentile__label'>\n+        <FormattedMessage\n+          id='annual_report.summary.percentile.that_puts_you_in_the_top'\n+          defaultMessage='That puts you in the top'\n+        />\n+      </div>\n+      <div className='annual-report__summary__percentile__number'>\n+        <FormattedNumber\n+          value={percentile / 100}\n+          style='percent'\n+          maximumFractionDigits={1}\n+        />\n+      </div>\n+      <div>\n+        <div className='annual-report__summary__percentile__label'>\n+          <FormattedMessage\n+            id='annual_report.summary.percentile.of_mastodon_users'\n+            defaultMessage='of Mastodon users.'\n+          />\n+        </div>\n+        {percentile < 6 && (\n+          <div className='annual-report__summary__percentile__footnote'>\n+            <FormattedMessage\n+              id='annual_report.summary.percentile.we_wont_tell_bernie'\n+              defaultMessage=\"We won't tell Bernie.\"\n+            />\n+          </div>\n+        )}\n+      </div>",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1827904955",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 32709,
        "pr_file": "app/javascript/mastodon/features/annual_report/percentile.tsx",
        "discussion_id": "1827904955",
        "commented_code": "@@ -0,0 +1,43 @@\n+import { FormattedMessage, FormattedNumber } from 'react-intl';\n+\n+import type { Percentiles } from 'mastodon/models/annual_report';\n+\n+export const Percentile: React.FC<{\n+  data: Percentiles;\n+}> = ({ data }) => {\n+  const percentile = data.statuses;\n+\n+  return (\n+    <div className='annual-report__bento__box annual-report__summary__percentile'>\n+      <div className='annual-report__summary__percentile__label'>\n+        <FormattedMessage\n+          id='annual_report.summary.percentile.that_puts_you_in_the_top'\n+          defaultMessage='That puts you in the top'\n+        />\n+      </div>\n+      <div className='annual-report__summary__percentile__number'>\n+        <FormattedNumber\n+          value={percentile / 100}\n+          style='percent'\n+          maximumFractionDigits={1}\n+        />\n+      </div>\n+      <div>\n+        <div className='annual-report__summary__percentile__label'>\n+          <FormattedMessage\n+            id='annual_report.summary.percentile.of_mastodon_users'\n+            defaultMessage='of Mastodon users.'\n+          />\n+        </div>\n+        {percentile < 6 && (\n+          <div className='annual-report__summary__percentile__footnote'>\n+            <FormattedMessage\n+              id='annual_report.summary.percentile.we_wont_tell_bernie'\n+              defaultMessage=\"We won't tell Bernie.\"\n+            />\n+          </div>\n+        )}\n+      </div>",
        "comment_created_at": "2024-11-04T15:17:04+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "What if the whole thing was one translatable string with various placeholders?\r\n\r\nSomething like (untested):\r\n\r\n```jsx\r\n<FormattedMessage\r\n  id='annual_report.summary.percentile_text'\r\n  defaultMessage='<label>That puts you in the top</label><percentage /><label>of Mastodon users.</label>'\r\n  values={{\r\n   label: (text) => <div className='annual-report__summary__percentile__label'>{text}</div>,\r\n   percentage: () => <div className='annual-report__summary__percentile__number'><FormattedNumber value={percentile / 100} style='percent' maximumFractionDigits={1} /></div>,\r\n  }}\r\n/>\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1829326550",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 32709,
        "pr_file": "app/javascript/mastodon/features/annual_report/percentile.tsx",
        "discussion_id": "1827904955",
        "commented_code": "@@ -0,0 +1,43 @@\n+import { FormattedMessage, FormattedNumber } from 'react-intl';\n+\n+import type { Percentiles } from 'mastodon/models/annual_report';\n+\n+export const Percentile: React.FC<{\n+  data: Percentiles;\n+}> = ({ data }) => {\n+  const percentile = data.statuses;\n+\n+  return (\n+    <div className='annual-report__bento__box annual-report__summary__percentile'>\n+      <div className='annual-report__summary__percentile__label'>\n+        <FormattedMessage\n+          id='annual_report.summary.percentile.that_puts_you_in_the_top'\n+          defaultMessage='That puts you in the top'\n+        />\n+      </div>\n+      <div className='annual-report__summary__percentile__number'>\n+        <FormattedNumber\n+          value={percentile / 100}\n+          style='percent'\n+          maximumFractionDigits={1}\n+        />\n+      </div>\n+      <div>\n+        <div className='annual-report__summary__percentile__label'>\n+          <FormattedMessage\n+            id='annual_report.summary.percentile.of_mastodon_users'\n+            defaultMessage='of Mastodon users.'\n+          />\n+        </div>\n+        {percentile < 6 && (\n+          <div className='annual-report__summary__percentile__footnote'>\n+            <FormattedMessage\n+              id='annual_report.summary.percentile.we_wont_tell_bernie'\n+              defaultMessage=\"We won't tell Bernie.\"\n+            />\n+          </div>\n+        )}\n+      </div>",
        "comment_created_at": "2024-11-05T13:10:01+00:00",
        "comment_author": "Gargron",
        "comment_body": "Okay, it's a bit clunky but it works.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1886499969",
    "pr_number": 33278,
    "pr_file": "app/javascript/mastodon/features/interaction_modal/index.tsx",
    "created_at": "2024-12-16T09:46:25+00:00",
    "commented_code": "+import { useCallback, useEffect, useState, useRef } from 'react';\n+\n+import { FormattedMessage, defineMessages, useIntl } from 'react-intl';\n+\n+import classNames from 'classnames';\n+\n+import { escapeRegExp } from 'lodash';\n+import { useDebouncedCallback } from 'use-debounce';\n+\n+import InsertChartIcon from '@/material-icons/400-24px/insert_chart.svg?react';\n+import PersonAddIcon from '@/material-icons/400-24px/person_add.svg?react';\n+import RepeatIcon from '@/material-icons/400-24px/repeat.svg?react';\n+import ReplyIcon from '@/material-icons/400-24px/reply.svg?react';\n+import StarIcon from '@/material-icons/400-24px/star.svg?react';\n+import { openModal, closeModal } from 'mastodon/actions/modal';\n+import { apiRequest } from 'mastodon/api';\n+import { Button } from 'mastodon/components/button';\n+import { Icon } from 'mastodon/components/icon';\n+import {\n+  domain as localDomain,\n+  registrationsOpen,\n+  sso_redirect,\n+} from 'mastodon/initial_state';\n+import { useAppSelector, useAppDispatch } from 'mastodon/store';\n+\n+const messages = defineMessages({\n+  loginPrompt: {\n+    id: 'interaction_modal.username_prompt',\n+    defaultMessage: 'E.g. {example}',\n+  },\n+});\n+\n+interface LoginFormMessage {\n+  type:\n+    | 'fetchInteractionURL'\n+    | 'fetchInteractionURL-failure'\n+    | 'fetchInteractionURL-success';\n+  uri_or_domain: string;\n+  template?: string;\n+}\n+\n+const PERSISTENCE_KEY = 'mastodon_home';\n+\n+const EXAMPLE_VALUE = 'username@mastodon.social';\n+\n+const isValidDomain = (value: string) => {\n+  const url = new URL('https:///path');\n+  url.hostname = value;\n+  return url.hostname === value;\n+};\n+\n+const valueToDomain = (value: string): string | null => {\n+  // If the user starts typing an URL\n+  if (/^https?:\\/\\//.test(value)) {\n+    try {\n+      const url = new URL(value);\n+\n+      return url.host;\n+    } catch {\n+      return null;\n+    }\n+    // If the user writes their full handle including username\n+  } else if (value.includes('@')) {\n+    const [_, domain, ...other] = value.replace(/^@/, '').split('@');\n+\n+    if (!domain || other.length > 0) {\n+      return null;\n+    }\n+\n+    return valueToDomain(domain);\n+  }\n+\n+  return value;\n+};\n+\n+const addInputToOptions = (value: string, options: string[]) => {\n+  value = value.trim();\n+\n+  if (value.includes('.') && isValidDomain(value)) {\n+    return [value].concat(options.filter((x) => x !== value));\n+  }\n+\n+  return options;\n+};\n+\n+const isValueValid = (value: string) => {\n+  let likelyAcct = false;\n+  let url = null;\n+\n+  if (value.startsWith('/')) {\n+    return false;\n+  }\n+\n+  if (value.startsWith('@')) {\n+    value = value.slice(1);\n+    likelyAcct = true;\n+  }\n+\n+  // The user is in the middle of typing something, do not error out\n+  if (value === '') {\n+    return true;\n+  }\n+\n+  if (/^https?:\\/\\//.test(value) && !likelyAcct) {\n+    url = value;\n+  } else {\n+    url = `https://${value}`;\n+  }\n+\n+  try {\n+    new URL(url);\n+    return true;\n+  } catch {\n+    return false;\n+  }\n+};\n+\n+const sendToFrame = (frame: HTMLIFrameElement | null, value: string): void => {\n+  if (valueToDomain(value.trim()) === localDomain) {\n+    window.location.href = '/auth/sign_in';\n+    return;\n+  }\n+\n+  frame?.contentWindow?.postMessage(\n+    {\n+      type: 'fetchInteractionURL',\n+      uri_or_domain: value.trim(),\n+    },\n+    window.origin,\n+  );\n+};\n+\n+const LoginForm: React.FC<{\n+  resourceUrl: string;\n+}> = ({ resourceUrl }) => {\n+  const intl = useIntl();\n+  const [value, setValue] = useState(\n+    localStorage.getItem(PERSISTENCE_KEY) ?? '',\n+  );\n+  const [expanded, setExpanded] = useState(false);\n+  const [selectedOption, setSelectedOption] = useState(-1);\n+  const [isSubmitting, setIsSubmitting] = useState(false);\n+  const [error, setError] = useState(false);\n+  const [options, setOptions] = useState<string[]>([]);\n+  const [networkOptions, setNetworkOptions] = useState<string[]>([]);\n+  const [valueChanged, setValueChanged] = useState(false);\n+\n+  const inputRef = useRef<HTMLInputElement>(null);\n+  const iframeRef = useRef<HTMLIFrameElement>(null);\n+  const searchRequestRef = useRef<AbortController | null>(null);\n+\n+  useEffect(() => {\n+    const handleMessage = (event: MessageEvent<LoginFormMessage>) => {\n+      if (\n+        event.origin !== window.origin ||\n+        event.source !== iframeRef.current?.contentWindow\n+      ) {\n+        return;\n+      }\n+\n+      if (event.data.type === 'fetchInteractionURL-failure') {\n+        setIsSubmitting(false);\n+        setError(true);\n+      } else if (event.data.type === 'fetchInteractionURL-success') {\n+        if (event.data.template && /^https?:\\/\\//.test(event.data.template)) {\n+          try {\n+            const url = new URL(\n+              event.data.template.replace(\n+                '{uri}',\n+                encodeURIComponent(resourceUrl),\n+              ),\n+            );\n+\n+            localStorage.setItem(PERSISTENCE_KEY, event.data.uri_or_domain);\n+\n+            window.location.href = url.toString();\n+          } catch {\n+            setIsSubmitting(false);\n+            setError(true);\n+          }\n+        } else {\n+          setIsSubmitting(false);\n+          setError(true);\n+        }\n+      }\n+    };\n+\n+    window.addEventListener('message', handleMessage);\n+\n+    return () => {\n+      window.removeEventListener('message', handleMessage);\n+    };\n+  }, [resourceUrl, setIsSubmitting, setError]);\n+\n+  const handleSearch = useDebouncedCallback(\n+    (value: string) => {\n+      if (searchRequestRef.current) {\n+        searchRequestRef.current.abort();\n+      }\n+\n+      const domain = valueToDomain(value.trim());\n+\n+      if (domain === null || domain.length === 0) {\n+        setOptions([]);\n+        setNetworkOptions([]);\n+        return;\n+      }\n+\n+      searchRequestRef.current = new AbortController();\n+\n+      void apiRequest<string[] | null>('GET', 'v1/peers/search', {\n+        signal: searchRequestRef.current.signal,\n+        params: {\n+          q: domain,\n+        },\n+      })\n+        .then((data) => {\n+          setNetworkOptions(data ?? []);\n+          setOptions(addInputToOptions(value, data ?? []));\n+          return '';\n+        })\n+        .catch(() => {\n+          // Nothing\n+        });\n+    },\n+    500,\n+    { leading: true, trailing: true },\n+  );\n+\n+  const handleChange = useCallback(\n+    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n+      setValue(value);\n+      setValueChanged(true);\n+      setError(!isValueValid(value));\n+      setOptions(addInputToOptions(value, networkOptions));\n+      handleSearch(value);\n+    },\n+    [\n+      setError,\n+      setValue,\n+      setValueChanged,\n+      setOptions,\n+      networkOptions,\n+      handleSearch,\n+    ],\n+  );\n+\n+  const handleSubmit = useCallback(() => {\n+    setIsSubmitting(true);\n+    sendToFrame(iframeRef.current, value);\n+  }, [setIsSubmitting, value]);\n+\n+  const handleFocus = useCallback(() => {\n+    setExpanded(true);\n+  }, [setExpanded]);\n+\n+  const handleBlur = useCallback(() => {\n+    setExpanded(false);\n+  }, [setExpanded]);\n+\n+  const handleKeyDown = useCallback(\n+    (e: React.KeyboardEvent) => {\n+      const selectedOptionValue = options[selectedOption];\n+\n+      switch (e.key) {\n+        case 'ArrowDown':\n+          e.preventDefault();\n+\n+          if (options.length > 0) {\n+            setSelectedOption((selectedOption) =>\n+              Math.min(selectedOption + 1, options.length - 1),\n+            );\n+          }\n+\n+          break;\n+        case 'ArrowUp':\n+          e.preventDefault();\n+\n+          if (options.length > 0) {\n+            setSelectedOption((selectedOption) =>\n+              Math.max(selectedOption - 1, -1),\n+            );\n+          }\n+\n+          break;\n+        case 'Enter':\n+          e.preventDefault();\n+\n+          if (selectedOption === -1) {\n+            handleSubmit();\n+          } else if (options.length > 0 && selectedOptionValue) {\n+            setError(false);\n+            setValue(selectedOptionValue);\n+            setIsSubmitting(true);\n+            sendToFrame(iframeRef.current, selectedOptionValue);\n+          }\n+\n+          break;\n+      }\n+    },\n+    [\n+      handleSubmit,\n+      setSelectedOption,\n+      setError,\n+      setValue,\n+      selectedOption,\n+      options,\n+    ],\n+  );\n+\n+  const handleOptionClick = useCallback(\n+    (e: React.MouseEvent) => {\n+      e.preventDefault();\n+\n+      const index = Number(e.currentTarget.getAttribute('data-index'));\n+      const option = options[index];\n+\n+      if (!option) {\n+        return;\n+      }\n+\n+      setSelectedOption(index);\n+      setValue(option);\n+      setError(false);\n+      setIsSubmitting(true);\n+      sendToFrame(iframeRef.current, option);\n+    },\n+    [options, setSelectedOption, setValue, setError],\n+  );\n+\n+  const domain = (valueToDomain(value) ?? '').trim();\n+  const domainRegExp = new RegExp(`(${escapeRegExp(domain)})`, 'gi');\n+  const hasPopOut = valueChanged && domain.length > 0 && options.length > 0;\n+\n+  return (\n+    <div\n+      className={classNames('interaction-modal__login', {\n+        focused: expanded,\n+        expanded: hasPopOut,\n+        invalid: error,\n+      })}\n+    >\n+      <iframe\n+        ref={iframeRef}\n+        style={{ display: 'none' }}\n+        src='/remote_interaction_helper'\n+        sandbox='allow-scripts allow-same-origin'\n+        title='remote interaction helper'\n+      />\n+\n+      <div className='interaction-modal__login__input'>\n+        <input\n+          ref={inputRef}\n+          type='text'\n+          value={value}\n+          placeholder={intl.formatMessage(messages.loginPrompt, {\n+            example: EXAMPLE_VALUE,\n+          })}\n+          aria-label={intl.formatMessage(messages.loginPrompt, {\n+            example: EXAMPLE_VALUE,\n+          })}\n+          // eslint-disable-next-line jsx-a11y/no-autofocus\n+          autoFocus\n+          onChange={handleChange}\n+          onFocus={handleFocus}\n+          onBlur={handleBlur}\n+          onKeyDown={handleKeyDown}\n+          autoComplete='off'\n+          autoCapitalize='off'\n+          spellCheck='false'\n+        />\n+\n+        <Button onClick={handleSubmit} disabled={isSubmitting || error}>\n+          <FormattedMessage id='interaction_modal.go' defaultMessage='Go' />\n+        </Button>\n+      </div>\n+\n+      {hasPopOut && (\n+        <div className='search__popout'>\n+          <div className='search__popout__menu'>\n+            {options.map((option, i) => (\n+              <button\n+                key={option}\n+                onMouseDown={handleOptionClick}\n+                data-index={i}\n+                className={classNames('search__popout__menu__item', {\n+                  selected: selectedOption === i,\n+                })}\n+              >\n+                {option\n+                  .split(domainRegExp)\n+                  .map((part, i) =>\n+                    part.toLowerCase() === domain.toLowerCase() ? (\n+                      <mark key={i}>{part}</mark>\n+                    ) : (\n+                      <span key={i}>{part}</span>\n+                    ),\n+                  )}\n+              </button>\n+            ))}\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+const InteractionModal: React.FC<{\n+  accountId: string;\n+  url: string;\n+  type: 'reply' | 'reblog' | 'favourite' | 'follow' | 'vote';\n+}> = ({ accountId, url, type }) => {\n+  const dispatch = useAppDispatch();\n+  const displayNameHtml = useAppSelector(\n+    (state) => state.accounts.get(accountId)?.display_name_html ?? '',\n+  );\n+  const signupUrl = useAppSelector(\n+    (state) =>\n+      (state.server.getIn(['server', 'registrations', 'url'], null) ||\n+        '/auth/sign_up') as string,\n+  );\n+  const name = <bdi dangerouslySetInnerHTML={{ __html: displayNameHtml }} />;\n+\n+  const handleSignupClick = useCallback(() => {\n+    dispatch(\n+      closeModal({\n+        modalType: undefined,\n+        ignoreFocus: false,\n+      }),\n+    );\n+\n+    dispatch(\n+      openModal({\n+        modalType: 'CLOSED_REGISTRATIONS',\n+        modalProps: {},\n+      }),\n+    );\n+  }, [dispatch]);\n+\n+  let title: React.ReactNode, icon: React.ReactNode, action: React.ReactNode;\n+\n+  switch (type) {\n+    case 'reply':\n+      icon = <Icon id='reply' icon={ReplyIcon} />;\n+      title = (\n+        <FormattedMessage\n+          id='interaction_modal.title.reply'\n+          defaultMessage=\"Reply to {name}'s post\"\n+          values={{ name }}\n+        />\n+      );\n+      action = (\n+        <FormattedMessage\n+          id='interaction_modal.action.reply'\n+          defaultMessage='reply'\n+        />\n+      );\n+      break;\n+    case 'reblog':\n+      icon = <Icon id='retweet' icon={RepeatIcon} />;\n+      title = (\n+        <FormattedMessage\n+          id='interaction_modal.title.reblog'\n+          defaultMessage=\"Boost {name}'s post\"\n+          values={{ name }}\n+        />\n+      );\n+      action = (\n+        <FormattedMessage\n+          id='interaction_modal.action.reblog'\n+          defaultMessage='boost'\n+        />\n+      );\n+      break;\n+    case 'favourite':\n+      icon = <Icon id='star' icon={StarIcon} />;\n+      title = (\n+        <FormattedMessage\n+          id='interaction_modal.title.favourite'\n+          defaultMessage=\"Favorite {name}'s post\"\n+          values={{ name }}\n+        />\n+      );\n+      action = (\n+        <FormattedMessage\n+          id='interaction_modal.action.favourite'\n+          defaultMessage='favorite'\n+        />\n+      );\n+      break;\n+    case 'follow':\n+      icon = <Icon id='user-plus' icon={PersonAddIcon} />;\n+      title = (\n+        <FormattedMessage\n+          id='interaction_modal.title.follow'\n+          defaultMessage='Follow {name}'\n+          values={{ name }}\n+        />\n+      );\n+      action = (\n+        <FormattedMessage\n+          id='interaction_modal.action.follow'\n+          defaultMessage='follow'\n+        />\n+      );\n+      break;\n+    case 'vote':\n+      icon = <Icon id='tasks' icon={InsertChartIcon} />;\n+      title = (\n+        <FormattedMessage\n+          id='interaction_modal.title.vote'\n+          defaultMessage=\"Vote in {name}'s poll\"\n+          values={{ name }}\n+        />\n+      );\n+      action = (\n+        <FormattedMessage\n+          id='interaction_modal.action.vote'\n+          defaultMessage='vote'\n+        />\n+      );\n+      break;\n+  }\n+\n+  let signupButton;\n+\n+  if (sso_redirect) {\n+    signupButton = (\n+      <a href={sso_redirect} data-method='post' className='link-button'>\n+        <FormattedMessage\n+          id='sign_in_banner.create_account'\n+          defaultMessage='Create account'\n+        />\n+      </a>\n+    );\n+  } else if (registrationsOpen) {\n+    signupButton = (\n+      <a href={signupUrl} className='link-button'>\n+        <FormattedMessage\n+          id='sign_in_banner.create_account'\n+          defaultMessage='Create account'\n+        />\n+      </a>\n+    );\n+  } else {\n+    signupButton = (\n+      <button className='link-button' onClick={handleSignupClick}>\n+        <FormattedMessage\n+          id='sign_in_banner.create_account'\n+          defaultMessage='Create account'\n+        />\n+      </button>\n+    );\n+  }\n+\n+  return (\n+    <div className='modal-root__modal interaction-modal'>\n+      <div className='interaction-modal__lead'>\n+        <h3>\n+          <span className='interaction-modal__icon'>{icon}</span> {title}\n+        </h3>\n+        <p>\n+          <FormattedMessage\n+            id='interaction_modal.to_continue_prompt'\n+            defaultMessage='To continue, you need to {action} from your account.'\n+            values={{ action }}\n+          />",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1886499969",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33278,
        "pr_file": "app/javascript/mastodon/features/interaction_modal/index.tsx",
        "discussion_id": "1886499969",
        "commented_code": "@@ -0,0 +1,585 @@\n+import { useCallback, useEffect, useState, useRef } from 'react';\n+\n+import { FormattedMessage, defineMessages, useIntl } from 'react-intl';\n+\n+import classNames from 'classnames';\n+\n+import { escapeRegExp } from 'lodash';\n+import { useDebouncedCallback } from 'use-debounce';\n+\n+import InsertChartIcon from '@/material-icons/400-24px/insert_chart.svg?react';\n+import PersonAddIcon from '@/material-icons/400-24px/person_add.svg?react';\n+import RepeatIcon from '@/material-icons/400-24px/repeat.svg?react';\n+import ReplyIcon from '@/material-icons/400-24px/reply.svg?react';\n+import StarIcon from '@/material-icons/400-24px/star.svg?react';\n+import { openModal, closeModal } from 'mastodon/actions/modal';\n+import { apiRequest } from 'mastodon/api';\n+import { Button } from 'mastodon/components/button';\n+import { Icon } from 'mastodon/components/icon';\n+import {\n+  domain as localDomain,\n+  registrationsOpen,\n+  sso_redirect,\n+} from 'mastodon/initial_state';\n+import { useAppSelector, useAppDispatch } from 'mastodon/store';\n+\n+const messages = defineMessages({\n+  loginPrompt: {\n+    id: 'interaction_modal.username_prompt',\n+    defaultMessage: 'E.g. {example}',\n+  },\n+});\n+\n+interface LoginFormMessage {\n+  type:\n+    | 'fetchInteractionURL'\n+    | 'fetchInteractionURL-failure'\n+    | 'fetchInteractionURL-success';\n+  uri_or_domain: string;\n+  template?: string;\n+}\n+\n+const PERSISTENCE_KEY = 'mastodon_home';\n+\n+const EXAMPLE_VALUE = 'username@mastodon.social';\n+\n+const isValidDomain = (value: string) => {\n+  const url = new URL('https:///path');\n+  url.hostname = value;\n+  return url.hostname === value;\n+};\n+\n+const valueToDomain = (value: string): string | null => {\n+  // If the user starts typing an URL\n+  if (/^https?:\\/\\//.test(value)) {\n+    try {\n+      const url = new URL(value);\n+\n+      return url.host;\n+    } catch {\n+      return null;\n+    }\n+    // If the user writes their full handle including username\n+  } else if (value.includes('@')) {\n+    const [_, domain, ...other] = value.replace(/^@/, '').split('@');\n+\n+    if (!domain || other.length > 0) {\n+      return null;\n+    }\n+\n+    return valueToDomain(domain);\n+  }\n+\n+  return value;\n+};\n+\n+const addInputToOptions = (value: string, options: string[]) => {\n+  value = value.trim();\n+\n+  if (value.includes('.') && isValidDomain(value)) {\n+    return [value].concat(options.filter((x) => x !== value));\n+  }\n+\n+  return options;\n+};\n+\n+const isValueValid = (value: string) => {\n+  let likelyAcct = false;\n+  let url = null;\n+\n+  if (value.startsWith('/')) {\n+    return false;\n+  }\n+\n+  if (value.startsWith('@')) {\n+    value = value.slice(1);\n+    likelyAcct = true;\n+  }\n+\n+  // The user is in the middle of typing something, do not error out\n+  if (value === '') {\n+    return true;\n+  }\n+\n+  if (/^https?:\\/\\//.test(value) && !likelyAcct) {\n+    url = value;\n+  } else {\n+    url = `https://${value}`;\n+  }\n+\n+  try {\n+    new URL(url);\n+    return true;\n+  } catch {\n+    return false;\n+  }\n+};\n+\n+const sendToFrame = (frame: HTMLIFrameElement | null, value: string): void => {\n+  if (valueToDomain(value.trim()) === localDomain) {\n+    window.location.href = '/auth/sign_in';\n+    return;\n+  }\n+\n+  frame?.contentWindow?.postMessage(\n+    {\n+      type: 'fetchInteractionURL',\n+      uri_or_domain: value.trim(),\n+    },\n+    window.origin,\n+  );\n+};\n+\n+const LoginForm: React.FC<{\n+  resourceUrl: string;\n+}> = ({ resourceUrl }) => {\n+  const intl = useIntl();\n+  const [value, setValue] = useState(\n+    localStorage.getItem(PERSISTENCE_KEY) ?? '',\n+  );\n+  const [expanded, setExpanded] = useState(false);\n+  const [selectedOption, setSelectedOption] = useState(-1);\n+  const [isSubmitting, setIsSubmitting] = useState(false);\n+  const [error, setError] = useState(false);\n+  const [options, setOptions] = useState<string[]>([]);\n+  const [networkOptions, setNetworkOptions] = useState<string[]>([]);\n+  const [valueChanged, setValueChanged] = useState(false);\n+\n+  const inputRef = useRef<HTMLInputElement>(null);\n+  const iframeRef = useRef<HTMLIFrameElement>(null);\n+  const searchRequestRef = useRef<AbortController | null>(null);\n+\n+  useEffect(() => {\n+    const handleMessage = (event: MessageEvent<LoginFormMessage>) => {\n+      if (\n+        event.origin !== window.origin ||\n+        event.source !== iframeRef.current?.contentWindow\n+      ) {\n+        return;\n+      }\n+\n+      if (event.data.type === 'fetchInteractionURL-failure') {\n+        setIsSubmitting(false);\n+        setError(true);\n+      } else if (event.data.type === 'fetchInteractionURL-success') {\n+        if (event.data.template && /^https?:\\/\\//.test(event.data.template)) {\n+          try {\n+            const url = new URL(\n+              event.data.template.replace(\n+                '{uri}',\n+                encodeURIComponent(resourceUrl),\n+              ),\n+            );\n+\n+            localStorage.setItem(PERSISTENCE_KEY, event.data.uri_or_domain);\n+\n+            window.location.href = url.toString();\n+          } catch {\n+            setIsSubmitting(false);\n+            setError(true);\n+          }\n+        } else {\n+          setIsSubmitting(false);\n+          setError(true);\n+        }\n+      }\n+    };\n+\n+    window.addEventListener('message', handleMessage);\n+\n+    return () => {\n+      window.removeEventListener('message', handleMessage);\n+    };\n+  }, [resourceUrl, setIsSubmitting, setError]);\n+\n+  const handleSearch = useDebouncedCallback(\n+    (value: string) => {\n+      if (searchRequestRef.current) {\n+        searchRequestRef.current.abort();\n+      }\n+\n+      const domain = valueToDomain(value.trim());\n+\n+      if (domain === null || domain.length === 0) {\n+        setOptions([]);\n+        setNetworkOptions([]);\n+        return;\n+      }\n+\n+      searchRequestRef.current = new AbortController();\n+\n+      void apiRequest<string[] | null>('GET', 'v1/peers/search', {\n+        signal: searchRequestRef.current.signal,\n+        params: {\n+          q: domain,\n+        },\n+      })\n+        .then((data) => {\n+          setNetworkOptions(data ?? []);\n+          setOptions(addInputToOptions(value, data ?? []));\n+          return '';\n+        })\n+        .catch(() => {\n+          // Nothing\n+        });\n+    },\n+    500,\n+    { leading: true, trailing: true },\n+  );\n+\n+  const handleChange = useCallback(\n+    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n+      setValue(value);\n+      setValueChanged(true);\n+      setError(!isValueValid(value));\n+      setOptions(addInputToOptions(value, networkOptions));\n+      handleSearch(value);\n+    },\n+    [\n+      setError,\n+      setValue,\n+      setValueChanged,\n+      setOptions,\n+      networkOptions,\n+      handleSearch,\n+    ],\n+  );\n+\n+  const handleSubmit = useCallback(() => {\n+    setIsSubmitting(true);\n+    sendToFrame(iframeRef.current, value);\n+  }, [setIsSubmitting, value]);\n+\n+  const handleFocus = useCallback(() => {\n+    setExpanded(true);\n+  }, [setExpanded]);\n+\n+  const handleBlur = useCallback(() => {\n+    setExpanded(false);\n+  }, [setExpanded]);\n+\n+  const handleKeyDown = useCallback(\n+    (e: React.KeyboardEvent) => {\n+      const selectedOptionValue = options[selectedOption];\n+\n+      switch (e.key) {\n+        case 'ArrowDown':\n+          e.preventDefault();\n+\n+          if (options.length > 0) {\n+            setSelectedOption((selectedOption) =>\n+              Math.min(selectedOption + 1, options.length - 1),\n+            );\n+          }\n+\n+          break;\n+        case 'ArrowUp':\n+          e.preventDefault();\n+\n+          if (options.length > 0) {\n+            setSelectedOption((selectedOption) =>\n+              Math.max(selectedOption - 1, -1),\n+            );\n+          }\n+\n+          break;\n+        case 'Enter':\n+          e.preventDefault();\n+\n+          if (selectedOption === -1) {\n+            handleSubmit();\n+          } else if (options.length > 0 && selectedOptionValue) {\n+            setError(false);\n+            setValue(selectedOptionValue);\n+            setIsSubmitting(true);\n+            sendToFrame(iframeRef.current, selectedOptionValue);\n+          }\n+\n+          break;\n+      }\n+    },\n+    [\n+      handleSubmit,\n+      setSelectedOption,\n+      setError,\n+      setValue,\n+      selectedOption,\n+      options,\n+    ],\n+  );\n+\n+  const handleOptionClick = useCallback(\n+    (e: React.MouseEvent) => {\n+      e.preventDefault();\n+\n+      const index = Number(e.currentTarget.getAttribute('data-index'));\n+      const option = options[index];\n+\n+      if (!option) {\n+        return;\n+      }\n+\n+      setSelectedOption(index);\n+      setValue(option);\n+      setError(false);\n+      setIsSubmitting(true);\n+      sendToFrame(iframeRef.current, option);\n+    },\n+    [options, setSelectedOption, setValue, setError],\n+  );\n+\n+  const domain = (valueToDomain(value) ?? '').trim();\n+  const domainRegExp = new RegExp(`(${escapeRegExp(domain)})`, 'gi');\n+  const hasPopOut = valueChanged && domain.length > 0 && options.length > 0;\n+\n+  return (\n+    <div\n+      className={classNames('interaction-modal__login', {\n+        focused: expanded,\n+        expanded: hasPopOut,\n+        invalid: error,\n+      })}\n+    >\n+      <iframe\n+        ref={iframeRef}\n+        style={{ display: 'none' }}\n+        src='/remote_interaction_helper'\n+        sandbox='allow-scripts allow-same-origin'\n+        title='remote interaction helper'\n+      />\n+\n+      <div className='interaction-modal__login__input'>\n+        <input\n+          ref={inputRef}\n+          type='text'\n+          value={value}\n+          placeholder={intl.formatMessage(messages.loginPrompt, {\n+            example: EXAMPLE_VALUE,\n+          })}\n+          aria-label={intl.formatMessage(messages.loginPrompt, {\n+            example: EXAMPLE_VALUE,\n+          })}\n+          // eslint-disable-next-line jsx-a11y/no-autofocus\n+          autoFocus\n+          onChange={handleChange}\n+          onFocus={handleFocus}\n+          onBlur={handleBlur}\n+          onKeyDown={handleKeyDown}\n+          autoComplete='off'\n+          autoCapitalize='off'\n+          spellCheck='false'\n+        />\n+\n+        <Button onClick={handleSubmit} disabled={isSubmitting || error}>\n+          <FormattedMessage id='interaction_modal.go' defaultMessage='Go' />\n+        </Button>\n+      </div>\n+\n+      {hasPopOut && (\n+        <div className='search__popout'>\n+          <div className='search__popout__menu'>\n+            {options.map((option, i) => (\n+              <button\n+                key={option}\n+                onMouseDown={handleOptionClick}\n+                data-index={i}\n+                className={classNames('search__popout__menu__item', {\n+                  selected: selectedOption === i,\n+                })}\n+              >\n+                {option\n+                  .split(domainRegExp)\n+                  .map((part, i) =>\n+                    part.toLowerCase() === domain.toLowerCase() ? (\n+                      <mark key={i}>{part}</mark>\n+                    ) : (\n+                      <span key={i}>{part}</span>\n+                    ),\n+                  )}\n+              </button>\n+            ))}\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+const InteractionModal: React.FC<{\n+  accountId: string;\n+  url: string;\n+  type: 'reply' | 'reblog' | 'favourite' | 'follow' | 'vote';\n+}> = ({ accountId, url, type }) => {\n+  const dispatch = useAppDispatch();\n+  const displayNameHtml = useAppSelector(\n+    (state) => state.accounts.get(accountId)?.display_name_html ?? '',\n+  );\n+  const signupUrl = useAppSelector(\n+    (state) =>\n+      (state.server.getIn(['server', 'registrations', 'url'], null) ||\n+        '/auth/sign_up') as string,\n+  );\n+  const name = <bdi dangerouslySetInnerHTML={{ __html: displayNameHtml }} />;\n+\n+  const handleSignupClick = useCallback(() => {\n+    dispatch(\n+      closeModal({\n+        modalType: undefined,\n+        ignoreFocus: false,\n+      }),\n+    );\n+\n+    dispatch(\n+      openModal({\n+        modalType: 'CLOSED_REGISTRATIONS',\n+        modalProps: {},\n+      }),\n+    );\n+  }, [dispatch]);\n+\n+  let title: React.ReactNode, icon: React.ReactNode, action: React.ReactNode;\n+\n+  switch (type) {\n+    case 'reply':\n+      icon = <Icon id='reply' icon={ReplyIcon} />;\n+      title = (\n+        <FormattedMessage\n+          id='interaction_modal.title.reply'\n+          defaultMessage=\"Reply to {name}'s post\"\n+          values={{ name }}\n+        />\n+      );\n+      action = (\n+        <FormattedMessage\n+          id='interaction_modal.action.reply'\n+          defaultMessage='reply'\n+        />\n+      );\n+      break;\n+    case 'reblog':\n+      icon = <Icon id='retweet' icon={RepeatIcon} />;\n+      title = (\n+        <FormattedMessage\n+          id='interaction_modal.title.reblog'\n+          defaultMessage=\"Boost {name}'s post\"\n+          values={{ name }}\n+        />\n+      );\n+      action = (\n+        <FormattedMessage\n+          id='interaction_modal.action.reblog'\n+          defaultMessage='boost'\n+        />\n+      );\n+      break;\n+    case 'favourite':\n+      icon = <Icon id='star' icon={StarIcon} />;\n+      title = (\n+        <FormattedMessage\n+          id='interaction_modal.title.favourite'\n+          defaultMessage=\"Favorite {name}'s post\"\n+          values={{ name }}\n+        />\n+      );\n+      action = (\n+        <FormattedMessage\n+          id='interaction_modal.action.favourite'\n+          defaultMessage='favorite'\n+        />\n+      );\n+      break;\n+    case 'follow':\n+      icon = <Icon id='user-plus' icon={PersonAddIcon} />;\n+      title = (\n+        <FormattedMessage\n+          id='interaction_modal.title.follow'\n+          defaultMessage='Follow {name}'\n+          values={{ name }}\n+        />\n+      );\n+      action = (\n+        <FormattedMessage\n+          id='interaction_modal.action.follow'\n+          defaultMessage='follow'\n+        />\n+      );\n+      break;\n+    case 'vote':\n+      icon = <Icon id='tasks' icon={InsertChartIcon} />;\n+      title = (\n+        <FormattedMessage\n+          id='interaction_modal.title.vote'\n+          defaultMessage=\"Vote in {name}'s poll\"\n+          values={{ name }}\n+        />\n+      );\n+      action = (\n+        <FormattedMessage\n+          id='interaction_modal.action.vote'\n+          defaultMessage='vote'\n+        />\n+      );\n+      break;\n+  }\n+\n+  let signupButton;\n+\n+  if (sso_redirect) {\n+    signupButton = (\n+      <a href={sso_redirect} data-method='post' className='link-button'>\n+        <FormattedMessage\n+          id='sign_in_banner.create_account'\n+          defaultMessage='Create account'\n+        />\n+      </a>\n+    );\n+  } else if (registrationsOpen) {\n+    signupButton = (\n+      <a href={signupUrl} className='link-button'>\n+        <FormattedMessage\n+          id='sign_in_banner.create_account'\n+          defaultMessage='Create account'\n+        />\n+      </a>\n+    );\n+  } else {\n+    signupButton = (\n+      <button className='link-button' onClick={handleSignupClick}>\n+        <FormattedMessage\n+          id='sign_in_banner.create_account'\n+          defaultMessage='Create account'\n+        />\n+      </button>\n+    );\n+  }\n+\n+  return (\n+    <div className='modal-root__modal interaction-modal'>\n+      <div className='interaction-modal__lead'>\n+        <h3>\n+          <span className='interaction-modal__icon'>{icon}</span> {title}\n+        </h3>\n+        <p>\n+          <FormattedMessage\n+            id='interaction_modal.to_continue_prompt'\n+            defaultMessage='To continue, you need to {action} from your account.'\n+            values={{ action }}\n+          />",
        "comment_created_at": "2024-12-16T09:46:25+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "This is *probably* fine, but I'd be careful with this. It's usually way better to have full sentences in translatable strings, even if similar strings end up repeating themselves. This gives translators more context and helps with languages which have a different grammatical structure.",
        "pr_file_module": null
      }
    ]
  }
]