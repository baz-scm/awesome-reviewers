[
  {
    "discussion_id": "2049693285",
    "pr_number": 34187,
    "pr_file": "app/models/concerns/user/omniauthable.rb",
    "created_at": "2025-04-17T21:50:25+00:00",
    "commented_code": "end\n \n     def user_params_from_auth(email, auth)\n+      display_name = nil\n+\n+      provider_config = Devise.omniauth_configs[auth.provider.to_sym]\n+      display_name_claim = nil\n+\n+      display_name_claim = provider_config.options[:display_name_claim] if provider_config.present? && provider_config.options.is_a?(Hash)\n+\n+      if display_name_claim.present?\n+        if auth.extra.respond_to?(:raw_info) && auth.extra.raw_info.present?\n+          if auth.extra.raw_info.respond_to?(display_name_claim)\n+            display_name = auth.extra.raw_info.send(display_name_claim)\n+          elsif auth.extra.raw_info.respond_to?(:[])\n+            display_name = auth.extra.raw_info[display_name_claim.to_s] || auth.extra.raw_info[display_name_claim.to_sym]\n+          end\n+        end\n+\n+        if display_name.blank? && auth.info.present?\n+          if auth.info.respond_to?(display_name_claim)\n+            display_name = auth.info.send(display_name_claim)\n+          elsif auth.info.respond_to?(:[])\n+            display_name = auth.info[display_name_claim.to_s] || auth.info[display_name_claim.to_sym]\n+          end\n+        end\n+      end\n+\n+      display_name = auth.info.full_name || auth.info.name || [auth.info.first_name, auth.info.last_name].join(' ') if display_name.blank?\n+",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2049693285",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34187,
        "pr_file": "app/models/concerns/user/omniauthable.rb",
        "discussion_id": "2049693285",
        "commented_code": "@@ -93,13 +93,40 @@ def email_from_auth(auth)\n     end\n \n     def user_params_from_auth(email, auth)\n+      display_name = nil\n+\n+      provider_config = Devise.omniauth_configs[auth.provider.to_sym]\n+      display_name_claim = nil\n+\n+      display_name_claim = provider_config.options[:display_name_claim] if provider_config.present? && provider_config.options.is_a?(Hash)\n+\n+      if display_name_claim.present?\n+        if auth.extra.respond_to?(:raw_info) && auth.extra.raw_info.present?\n+          if auth.extra.raw_info.respond_to?(display_name_claim)\n+            display_name = auth.extra.raw_info.send(display_name_claim)\n+          elsif auth.extra.raw_info.respond_to?(:[])\n+            display_name = auth.extra.raw_info[display_name_claim.to_s] || auth.extra.raw_info[display_name_claim.to_sym]\n+          end\n+        end\n+\n+        if display_name.blank? && auth.info.present?\n+          if auth.info.respond_to?(display_name_claim)\n+            display_name = auth.info.send(display_name_claim)\n+          elsif auth.info.respond_to?(:[])\n+            display_name = auth.info[display_name_claim.to_s] || auth.info[display_name_claim.to_sym]\n+          end\n+        end\n+      end\n+\n+      display_name = auth.info.full_name || auth.info.name || [auth.info.first_name, auth.info.last_name].join(' ') if display_name.blank?\n+",
        "comment_created_at": "2025-04-17T21:50:25+00:00",
        "comment_author": "ThisIsMissEm",
        "comment_body": "the above block should probably be moved into a separate `def`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1900916118",
    "pr_number": 33421,
    "pr_file": "app/validators/empty_profile_field_names_validator.rb",
    "created_at": "2025-01-02T14:11:22+00:00",
    "commented_code": "+# frozen_string_literal: true\n+\n+class EmptyProfileFieldNamesValidator < ActiveModel::Validator\n+  def validate(account)\n+    return if account.fields.empty?\n+\n+    field_names_valid = true\n+    account.fields.each do |field|\n+      field_names_valid = false if field.name.blank? && field.value.present?\n+    end\n+    return if field_names_valid",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1900916118",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33421,
        "pr_file": "app/validators/empty_profile_field_names_validator.rb",
        "discussion_id": "1900916118",
        "commented_code": "@@ -0,0 +1,15 @@\n+# frozen_string_literal: true\n+\n+class EmptyProfileFieldNamesValidator < ActiveModel::Validator\n+  def validate(account)\n+    return if account.fields.empty?\n+\n+    field_names_valid = true\n+    account.fields.each do |field|\n+      field_names_valid = false if field.name.blank? && field.value.present?\n+    end\n+    return if field_names_valid",
        "comment_created_at": "2025-01-02T14:11:22+00:00",
        "comment_author": "mjankowski",
        "comment_body": "Instead of the local var and explicit return here, might be a little cleaner to have something like `unless fields_with_values_missing_names?(account) ...` (or whatever on naming) and relying on one path of that to add the errors and an implicit return to not add when all is well?",
        "pr_file_module": null
      },
      {
        "comment_id": "1901319132",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33421,
        "pr_file": "app/validators/empty_profile_field_names_validator.rb",
        "discussion_id": "1900916118",
        "commented_code": "@@ -0,0 +1,15 @@\n+# frozen_string_literal: true\n+\n+class EmptyProfileFieldNamesValidator < ActiveModel::Validator\n+  def validate(account)\n+    return if account.fields.empty?\n+\n+    field_names_valid = true\n+    account.fields.each do |field|\n+      field_names_valid = false if field.name.blank? && field.value.present?\n+    end\n+    return if field_names_valid",
        "comment_created_at": "2025-01-02T22:33:40+00:00",
        "comment_author": "timothyjrogers",
        "comment_body": "Thanks! Still getting used to Ruby semantics. I've updated this accordingly, please let me know if that doesn't match your intention.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1853063028",
    "pr_number": 28958,
    "pr_file": "app/services/unblock_service.rb",
    "created_at": "2024-11-21T23:04:32+00:00",
    "commented_code": "return unless account.blocking?(target_account)\n \n     unblock = account.unblock!(target_account)\n+\n+    TriggerWebhookWithObjectWorker.perform_async('block.removed',\n+                                                 Oj.to_json({ account_id: unblock.account_id,",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1853063028",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 28958,
        "pr_file": "app/services/unblock_service.rb",
        "discussion_id": "1853063028",
        "commented_code": "@@ -7,6 +7,12 @@ def call(account, target_account)\n     return unless account.blocking?(target_account)\n \n     unblock = account.unblock!(target_account)\n+\n+    TriggerWebhookWithObjectWorker.perform_async('block.removed',\n+                                                 Oj.to_json({ account_id: unblock.account_id,",
        "comment_created_at": "2024-11-21T23:04:32+00:00",
        "comment_author": "mjankowski",
        "comment_body": "Maybe pull these json/hash wrappers into private method?\r\n\r\n`webhook_payload(unblock)` or something?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1847385896",
    "pr_number": 32967,
    "pr_file": "app/controllers/concerns/cache_concern.rb",
    "created_at": "2024-11-18T22:55:18+00:00",
    "commented_code": "def render_with_cache(**options)\n     raise ArgumentError, 'Only JSON render calls are supported' unless options.key?(:json) || block_given?\n \n-    key        = options.delete(:key) || [[params[:controller], params[:action]].join('/'), options[:json].respond_to?(:cache_key) ? options[:json].cache_key : nil, options[:fields].nil? ? nil : options[:fields].join(',')].compact.join(':')\n+    key        = options.delete(:key) || [[params[:controller], params[:action]].join('/'), options[:json].respond_to?(:cache_key) ? options[:json].cache_key : nil, options[:fields]&.join(',')].compact.join(':')",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1847385896",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 32967,
        "pr_file": "app/controllers/concerns/cache_concern.rb",
        "discussion_id": "1847385896",
        "commented_code": "@@ -28,7 +28,7 @@ def enforce_cache_control!\n   def render_with_cache(**options)\n     raise ArgumentError, 'Only JSON render calls are supported' unless options.key?(:json) || block_given?\n \n-    key        = options.delete(:key) || [[params[:controller], params[:action]].join('/'), options[:json].respond_to?(:cache_key) ? options[:json].cache_key : nil, options[:fields].nil? ? nil : options[:fields].join(',')].compact.join(':')\n+    key        = options.delete(:key) || [[params[:controller], params[:action]].join('/'), options[:json].respond_to?(:cache_key) ? options[:json].cache_key : nil, options[:fields]&.join(',')].compact.join(':')",
        "comment_created_at": "2024-11-18T22:55:18+00:00",
        "comment_author": "mjankowski",
        "comment_body": "I think this is safe by itself, but also the `compact` on the end.\r\n\r\nThe entire second half of this method (how to handle when `options[:key]` isnt present) - should be a separate method.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1847387794",
    "pr_number": 32967,
    "pr_file": "app/services/notify_service.rb",
    "created_at": "2024-11-18T22:57:41+00:00",
    "commented_code": "end\n \n     def from_staff?\n-      @sender.local? && @sender.user.present? && @sender.user_role&.overrides?(@recipient.user_role) && @sender.user_role&.highlighted? && @sender.user_role&.can?(*UserRole::Flags::CATEGORIES[:moderation])\n+      @sender.local? && @sender.user.present? && @sender.user_role&.overrides?(@recipient.user_role) && @sender.user_role.highlighted? && @sender.user_role.can?(*UserRole::Flags::CATEGORIES[:moderation])",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1847387794",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 32967,
        "pr_file": "app/services/notify_service.rb",
        "discussion_id": "1847387794",
        "commented_code": "@@ -134,7 +134,7 @@ def message?\n     end\n \n     def from_staff?\n-      @sender.local? && @sender.user.present? && @sender.user_role&.overrides?(@recipient.user_role) && @sender.user_role&.highlighted? && @sender.user_role&.can?(*UserRole::Flags::CATEGORIES[:moderation])\n+      @sender.local? && @sender.user.present? && @sender.user_role&.overrides?(@recipient.user_role) && @sender.user_role.highlighted? && @sender.user_role.can?(*UserRole::Flags::CATEGORIES[:moderation])",
        "comment_created_at": "2024-11-18T22:57:41+00:00",
        "comment_author": "mjankowski",
        "comment_body": "This could also probably use a method extraction, and/or delegate some of this to the user role.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1874499427",
    "pr_number": 33209,
    "pr_file": "app/controllers/application_controller.rb",
    "created_at": "2024-12-07T14:48:29+00:00",
    "commented_code": "end\n \n   def require_functional!\n-    redirect_to edit_user_registration_path unless current_user.functional?\n+    if current_user.functional?\n+      nil\n+    elsif !current_user.confirmed?",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1874499427",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33209,
        "pr_file": "app/controllers/application_controller.rb",
        "discussion_id": "1874499427",
        "commented_code": "@@ -70,7 +70,13 @@ def store_referrer\n   end\n \n   def require_functional!\n-    redirect_to edit_user_registration_path unless current_user.functional?\n+    if current_user.functional?\n+      nil\n+    elsif !current_user.confirmed?",
        "comment_created_at": "2024-12-07T14:48:29+00:00",
        "comment_author": "mjankowski",
        "comment_body": "Minor style thing -- could pull out this 5 line block to a `non_functional_user_setup_path` (or something) private method, and keep this filter as a one-liner. The explicit `nil` return above this feels odd.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1875534698",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33209,
        "pr_file": "app/controllers/application_controller.rb",
        "discussion_id": "1874499427",
        "commented_code": "@@ -70,7 +70,13 @@ def store_referrer\n   end\n \n   def require_functional!\n-    redirect_to edit_user_registration_path unless current_user.functional?\n+    if current_user.functional?\n+      nil\n+    elsif !current_user.confirmed?",
        "comment_created_at": "2024-12-09T08:05:40+00:00",
        "comment_author": "oneiros",
        "comment_body": "I agree, especially to the last bit. Maybe return early if the user is \"functional\"?",
        "pr_file_module": null
      }
    ]
  }
]