[
  {
    "discussion_id": "2201133950",
    "pr_number": 35349,
    "pr_file": "app/javascript/mastodon/components/account_bio.tsx",
    "created_at": "2025-07-11T16:06:33+00:00",
    "commented_code": "className={`${className} translate`}\n       dangerouslySetInnerHTML={{ __html: note }}\n       onClickCapture={handleClick}\n+      ref={handleNodeChange}\n     />\n   );\n };\n+\n+function addDropdownToHashtags(node: HTMLElement | null, accountId: string) {",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2201133950",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 35349,
        "pr_file": "app/javascript/mastodon/components/account_bio.tsx",
        "discussion_id": "2201133950",
        "commented_code": "@@ -15,6 +33,28 @@ export const AccountBio: React.FC<{\n       className={`${className} translate`}\n       dangerouslySetInnerHTML={{ __html: note }}\n       onClickCapture={handleClick}\n+      ref={handleNodeChange}\n     />\n   );\n };\n+\n+function addDropdownToHashtags(node: HTMLElement | null, accountId: string) {",
        "comment_created_at": "2025-07-11T16:06:33+00:00",
        "comment_author": "Gargron",
        "comment_body": "Maybe this could've been part of `useLinks`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2201536103",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 35349,
        "pr_file": "app/javascript/mastodon/components/account_bio.tsx",
        "discussion_id": "2201133950",
        "commented_code": "@@ -15,6 +33,28 @@ export const AccountBio: React.FC<{\n       className={`${className} translate`}\n       dangerouslySetInnerHTML={{ __html: note }}\n       onClickCapture={handleClick}\n+      ref={handleNodeChange}\n     />\n   );\n };\n+\n+function addDropdownToHashtags(node: HTMLElement | null, accountId: string) {",
        "comment_created_at": "2025-07-11T18:48:19+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "i thought about that. my main hesitation was that `useLinks` seems to be more about handling click events instead of changing the dom. if i was to convert that i'd need to update `useLinks` to accept the DOM node _and_ the account ID, which i felt was perhaps better suited to a new hook (that itself could call `useLinks` perhaps) or even better it's own component like `Linkify` or something.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2164132025",
    "pr_number": 35153,
    "pr_file": "app/javascript/mastodon/components/button/index.tsx",
    "created_at": "2025-06-24T14:09:29+00:00",
    "commented_code": "}) => {\n   const handleClick = useCallback<React.MouseEventHandler<HTMLButtonElement>>(\n     (e) => {\n-      if (!disabled && onClick) {\n+      if (disabled || loading) {\n+        e.stopPropagation();\n+        e.preventDefault();\n+      } else if (onClick) {\n         onClick(e);\n       }",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2164132025",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 35153,
        "pr_file": "app/javascript/mastodon/components/button/index.tsx",
        "discussion_id": "2164132025",
        "commented_code": "@@ -42,28 +46,46 @@ export const Button: React.FC<Props> = ({\n }) => {\n   const handleClick = useCallback<React.MouseEventHandler<HTMLButtonElement>>(\n     (e) => {\n-      if (!disabled && onClick) {\n+      if (disabled || loading) {\n+        e.stopPropagation();\n+        e.preventDefault();\n+      } else if (onClick) {\n         onClick(e);\n       }",
        "comment_created_at": "2025-06-24T14:09:29+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "why isn't this preventing default and stopping propagation always?",
        "pr_file_module": null
      },
      {
        "comment_id": "2164186587",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 35153,
        "pr_file": "app/javascript/mastodon/components/button/index.tsx",
        "discussion_id": "2164132025",
        "commented_code": "@@ -42,28 +46,46 @@ export const Button: React.FC<Props> = ({\n }) => {\n   const handleClick = useCallback<React.MouseEventHandler<HTMLButtonElement>>(\n     (e) => {\n-      if (!disabled && onClick) {\n+      if (disabled || loading) {\n+        e.stopPropagation();\n+        e.preventDefault();\n+      } else if (onClick) {\n         onClick(e);\n       }",
        "comment_created_at": "2025-06-24T14:30:23+00:00",
        "comment_author": "diondiondion",
        "comment_body": "It probably wouldn't do much harm but I'd expect a `Button` to be as thin a wrapper around the native `<button>` element as possible, so doing anything extra here wouldn't feel right.\r\n\r\nEven the `disabled` check shouldn't strictly have been necessary as `onClick` should never be called for a properly disabled button. I believe the opt-out is only really needed for the new `loading` prop, and previously the `onClick` prop could've just been passed through untouched.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1902193716",
    "pr_number": 33431,
    "pr_file": "app/javascript/mastodon/features/compose/components/search.tsx",
    "created_at": "2025-01-03T21:49:50+00:00",
    "commented_code": "setSelectedOption(-1);\n   }, [setExpanded, setSelectedOption]);\n \n+  const handleDragOver = useCallback(\n+    (event: React.DragEvent<HTMLInputElement>) => {\n+      event.preventDefault();\n+    },\n+    [],\n+  );\n+  const handleDrop = useCallback(\n+    (event: React.DragEvent<HTMLInputElement>) => {\n+      event.preventDefault();\n+\n+      handleClear();\n+\n+      const query =\n+        event.dataTransfer.getData('URL') ||\n+        event.dataTransfer.getData('text/plain');\n+\n+      Object.getOwnPropertyDescriptor(\n+        window.HTMLInputElement.prototype,\n+        'value',\n+      )?.set?.call(event.target, query);\n+\n+      event.currentTarget.focus();\n+      event.target.dispatchEvent(new Event('change', { bubbles: true }));\n+    },\n+    [handleClear],",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1902193716",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33431,
        "pr_file": "app/javascript/mastodon/features/compose/components/search.tsx",
        "discussion_id": "1902193716",
        "commented_code": "@@ -451,6 +498,33 @@ export const Search: React.FC<{\n     setSelectedOption(-1);\n   }, [setExpanded, setSelectedOption]);\n \n+  const handleDragOver = useCallback(\n+    (event: React.DragEvent<HTMLInputElement>) => {\n+      event.preventDefault();\n+    },\n+    [],\n+  );\n+  const handleDrop = useCallback(\n+    (event: React.DragEvent<HTMLInputElement>) => {\n+      event.preventDefault();\n+\n+      handleClear();\n+\n+      const query =\n+        event.dataTransfer.getData('URL') ||\n+        event.dataTransfer.getData('text/plain');\n+\n+      Object.getOwnPropertyDescriptor(\n+        window.HTMLInputElement.prototype,\n+        'value',\n+      )?.set?.call(event.target, query);\n+\n+      event.currentTarget.focus();\n+      event.target.dispatchEvent(new Event('change', { bubbles: true }));\n+    },\n+    [handleClear],",
        "comment_created_at": "2025-01-03T21:49:50+00:00",
        "comment_author": "Gargron",
        "comment_body": "I see that you have to \"fake\" typing into the input here because most of the logic happens in the `handleChange` handler. Perhaps it is a sign that some of that logic should be moved out to a `useEffect`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2018324741",
    "pr_number": 34284,
    "pr_file": "app/javascript/mastodon/features/video/index.tsx",
    "created_at": "2025-03-28T10:23:08+00:00",
    "commented_code": "+import { useEffect, useCallback, useRef, useState } from 'react';\n+\n+import { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n+\n+import classNames from 'classnames';\n+\n+import { useSpring, animated, config } from '@react-spring/web';\n+import { throttle } from 'lodash';\n+\n+import Forward5Icon from '@/material-icons/400-24px/forward_5-fill.svg?react';\n+import FullscreenIcon from '@/material-icons/400-24px/fullscreen.svg?react';\n+import FullscreenExitIcon from '@/material-icons/400-24px/fullscreen_exit.svg?react';\n+import PauseIcon from '@/material-icons/400-24px/pause-fill.svg?react';\n+import PlayArrowIcon from '@/material-icons/400-24px/play_arrow-fill.svg?react';\n+import RectangleIcon from '@/material-icons/400-24px/rectangle.svg?react';\n+import Replay5Icon from '@/material-icons/400-24px/replay_5-fill.svg?react';\n+import VolumeDownIcon from '@/material-icons/400-24px/volume_down-fill.svg?react';\n+import VolumeOffIcon from '@/material-icons/400-24px/volume_off-fill.svg?react';\n+import VolumeUpIcon from '@/material-icons/400-24px/volume_up-fill.svg?react';\n+import { Blurhash } from 'mastodon/components/blurhash';\n+import { Icon } from 'mastodon/components/icon';\n+import { SpoilerButton } from 'mastodon/components/spoiler_button';\n+import {\n+  isFullscreen,\n+  requestFullscreen,\n+  exitFullscreen,\n+  attachFullscreenListener,\n+  detachFullscreenListener,\n+} from 'mastodon/features/ui/util/fullscreen';\n+import {\n+  displayMedia,\n+  useBlurhash,\n+  reduceMotion,\n+} from 'mastodon/initial_state';\n+import { playerSettings } from 'mastodon/settings';\n+\n+import { HotkeyIndicator } from './components/hotkey_indicator';\n+import type { HotkeyEvent } from './components/hotkey_indicator';\n+\n+const messages = defineMessages({\n+  play: { id: 'video.play', defaultMessage: 'Play' },\n+  pause: { id: 'video.pause', defaultMessage: 'Pause' },\n+  mute: { id: 'video.mute', defaultMessage: 'Mute' },\n+  unmute: { id: 'video.unmute', defaultMessage: 'Unmute' },\n+  hide: { id: 'video.hide', defaultMessage: 'Hide video' },\n+  expand: { id: 'video.expand', defaultMessage: 'Expand video' },\n+  close: { id: 'video.close', defaultMessage: 'Close video' },\n+  fullscreen: { id: 'video.fullscreen', defaultMessage: 'Full screen' },\n+  exit_fullscreen: {\n+    id: 'video.exit_fullscreen',\n+    defaultMessage: 'Exit full screen',\n+  },\n+  volumeUp: { id: 'video.volume_up', defaultMessage: 'Volume up' },\n+  volumeDown: { id: 'video.volume_down', defaultMessage: 'Volume down' },\n+  skipForward: { id: 'video.skip_forward', defaultMessage: 'Skip forward' },\n+  skipBackward: { id: 'video.skip_backward', defaultMessage: 'Skip backward' },\n+});\n+\n+const DOUBLE_CLICK_THRESHOLD = 250;\n+\n+export const formatTime = (secondsNum: number) => {\n+  const hours = Math.floor(secondsNum / 3600);\n+  const minutes = Math.floor((secondsNum - hours * 3600) / 60);\n+  const seconds = secondsNum - hours * 3600 - minutes * 60;\n+\n+  const formattedHours = `${hours < 10 ? '0' : ''}${hours}`;\n+  const formattedMinutes = `${minutes < 10 ? '0' : ''}${minutes}`;\n+  const formattedSeconds = `${seconds < 10 ? '0' : ''}${seconds}`;\n+\n+  return (\n+    (formattedHours === '00' ? '' : `${formattedHours}:`) +\n+    `${formattedMinutes}:${formattedSeconds}`\n+  );\n+};\n+\n+export const findElementPosition = (el: HTMLElement) => {\n+  const box = el.getBoundingClientRect();\n+  const docEl = document.documentElement;\n+  const body = document.body;\n+\n+  const clientLeft = docEl.clientLeft || body.clientLeft || 0;\n+  const scrollLeft = window.scrollX || body.scrollLeft;\n+  const left = box.left + scrollLeft - clientLeft;\n+\n+  const clientTop = docEl.clientTop || body.clientTop || 0;\n+  const scrollTop = window.scrollY || body.scrollTop;\n+  const top = box.top + scrollTop - clientTop;\n+\n+  return {\n+    left: Math.round(left),\n+    top: Math.round(top),\n+  };\n+};\n+\n+export const getPointerPosition = (\n+  el: HTMLElement | null,\n+  event: MouseEvent,\n+) => {\n+  if (!el) {\n+    return {\n+      y: 0,\n+      x: 0,\n+    };\n+  }\n+\n+  const box = findElementPosition(el);\n+  const boxW = el.offsetWidth;\n+  const boxH = el.offsetHeight;\n+  const boxY = box.top;\n+  const boxX = box.left;\n+\n+  const { pageY, pageX } = event;\n+\n+  return {\n+    y: Math.max(0, Math.min(1, (pageY - boxY) / boxH)),\n+    x: Math.max(0, Math.min(1, (pageX - boxX) / boxW)),\n+  };\n+};\n+\n+export const fileNameFromURL = (str: string) => {\n+  const url = new URL(str);\n+  const pathname = url.pathname;\n+  const index = pathname.lastIndexOf('/');\n+\n+  return pathname.slice(index + 1);\n+};\n+\n+const frameRateAsNumber = (frameRate: string): number => {\n+  if (frameRate.includes('/')) {\n+    return frameRate\n+      .split('/')\n+      .map((c) => parseInt(c))\n+      .reduce((p, c) => p / c);\n+  }\n+\n+  return parseInt(frameRate);\n+};\n+\n+const persistVolume = (volume: number, muted: boolean) => {\n+  playerSettings.set('volume', volume);\n+  playerSettings.set('muted', muted);\n+};\n+\n+const restoreVolume = (video: HTMLVideoElement) => {\n+  const volume = (playerSettings.get('volume') as number | undefined) ?? 0.5;\n+  const muted = (playerSettings.get('muted') as boolean | undefined) ?? false;\n+\n+  video.volume = volume;\n+  video.muted = muted;\n+};\n+\n+let hotkeyEventId = 0;\n+\n+const registerHotkeyEvent = (\n+  setHotkeyEvents: React.Dispatch<React.SetStateAction<HotkeyEvent[]>>,\n+  event: Omit<HotkeyEvent, 'key'>,\n+) => {\n+  setHotkeyEvents(() => [{ key: hotkeyEventId++, ...event }]);\n+};",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2018324741",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34284,
        "pr_file": "app/javascript/mastodon/features/video/index.tsx",
        "discussion_id": "2018324741",
        "commented_code": "@@ -0,0 +1,1022 @@\n+import { useEffect, useCallback, useRef, useState } from 'react';\n+\n+import { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n+\n+import classNames from 'classnames';\n+\n+import { useSpring, animated, config } from '@react-spring/web';\n+import { throttle } from 'lodash';\n+\n+import Forward5Icon from '@/material-icons/400-24px/forward_5-fill.svg?react';\n+import FullscreenIcon from '@/material-icons/400-24px/fullscreen.svg?react';\n+import FullscreenExitIcon from '@/material-icons/400-24px/fullscreen_exit.svg?react';\n+import PauseIcon from '@/material-icons/400-24px/pause-fill.svg?react';\n+import PlayArrowIcon from '@/material-icons/400-24px/play_arrow-fill.svg?react';\n+import RectangleIcon from '@/material-icons/400-24px/rectangle.svg?react';\n+import Replay5Icon from '@/material-icons/400-24px/replay_5-fill.svg?react';\n+import VolumeDownIcon from '@/material-icons/400-24px/volume_down-fill.svg?react';\n+import VolumeOffIcon from '@/material-icons/400-24px/volume_off-fill.svg?react';\n+import VolumeUpIcon from '@/material-icons/400-24px/volume_up-fill.svg?react';\n+import { Blurhash } from 'mastodon/components/blurhash';\n+import { Icon } from 'mastodon/components/icon';\n+import { SpoilerButton } from 'mastodon/components/spoiler_button';\n+import {\n+  isFullscreen,\n+  requestFullscreen,\n+  exitFullscreen,\n+  attachFullscreenListener,\n+  detachFullscreenListener,\n+} from 'mastodon/features/ui/util/fullscreen';\n+import {\n+  displayMedia,\n+  useBlurhash,\n+  reduceMotion,\n+} from 'mastodon/initial_state';\n+import { playerSettings } from 'mastodon/settings';\n+\n+import { HotkeyIndicator } from './components/hotkey_indicator';\n+import type { HotkeyEvent } from './components/hotkey_indicator';\n+\n+const messages = defineMessages({\n+  play: { id: 'video.play', defaultMessage: 'Play' },\n+  pause: { id: 'video.pause', defaultMessage: 'Pause' },\n+  mute: { id: 'video.mute', defaultMessage: 'Mute' },\n+  unmute: { id: 'video.unmute', defaultMessage: 'Unmute' },\n+  hide: { id: 'video.hide', defaultMessage: 'Hide video' },\n+  expand: { id: 'video.expand', defaultMessage: 'Expand video' },\n+  close: { id: 'video.close', defaultMessage: 'Close video' },\n+  fullscreen: { id: 'video.fullscreen', defaultMessage: 'Full screen' },\n+  exit_fullscreen: {\n+    id: 'video.exit_fullscreen',\n+    defaultMessage: 'Exit full screen',\n+  },\n+  volumeUp: { id: 'video.volume_up', defaultMessage: 'Volume up' },\n+  volumeDown: { id: 'video.volume_down', defaultMessage: 'Volume down' },\n+  skipForward: { id: 'video.skip_forward', defaultMessage: 'Skip forward' },\n+  skipBackward: { id: 'video.skip_backward', defaultMessage: 'Skip backward' },\n+});\n+\n+const DOUBLE_CLICK_THRESHOLD = 250;\n+\n+export const formatTime = (secondsNum: number) => {\n+  const hours = Math.floor(secondsNum / 3600);\n+  const minutes = Math.floor((secondsNum - hours * 3600) / 60);\n+  const seconds = secondsNum - hours * 3600 - minutes * 60;\n+\n+  const formattedHours = `${hours < 10 ? '0' : ''}${hours}`;\n+  const formattedMinutes = `${minutes < 10 ? '0' : ''}${minutes}`;\n+  const formattedSeconds = `${seconds < 10 ? '0' : ''}${seconds}`;\n+\n+  return (\n+    (formattedHours === '00' ? '' : `${formattedHours}:`) +\n+    `${formattedMinutes}:${formattedSeconds}`\n+  );\n+};\n+\n+export const findElementPosition = (el: HTMLElement) => {\n+  const box = el.getBoundingClientRect();\n+  const docEl = document.documentElement;\n+  const body = document.body;\n+\n+  const clientLeft = docEl.clientLeft || body.clientLeft || 0;\n+  const scrollLeft = window.scrollX || body.scrollLeft;\n+  const left = box.left + scrollLeft - clientLeft;\n+\n+  const clientTop = docEl.clientTop || body.clientTop || 0;\n+  const scrollTop = window.scrollY || body.scrollTop;\n+  const top = box.top + scrollTop - clientTop;\n+\n+  return {\n+    left: Math.round(left),\n+    top: Math.round(top),\n+  };\n+};\n+\n+export const getPointerPosition = (\n+  el: HTMLElement | null,\n+  event: MouseEvent,\n+) => {\n+  if (!el) {\n+    return {\n+      y: 0,\n+      x: 0,\n+    };\n+  }\n+\n+  const box = findElementPosition(el);\n+  const boxW = el.offsetWidth;\n+  const boxH = el.offsetHeight;\n+  const boxY = box.top;\n+  const boxX = box.left;\n+\n+  const { pageY, pageX } = event;\n+\n+  return {\n+    y: Math.max(0, Math.min(1, (pageY - boxY) / boxH)),\n+    x: Math.max(0, Math.min(1, (pageX - boxX) / boxW)),\n+  };\n+};\n+\n+export const fileNameFromURL = (str: string) => {\n+  const url = new URL(str);\n+  const pathname = url.pathname;\n+  const index = pathname.lastIndexOf('/');\n+\n+  return pathname.slice(index + 1);\n+};\n+\n+const frameRateAsNumber = (frameRate: string): number => {\n+  if (frameRate.includes('/')) {\n+    return frameRate\n+      .split('/')\n+      .map((c) => parseInt(c))\n+      .reduce((p, c) => p / c);\n+  }\n+\n+  return parseInt(frameRate);\n+};\n+\n+const persistVolume = (volume: number, muted: boolean) => {\n+  playerSettings.set('volume', volume);\n+  playerSettings.set('muted', muted);\n+};\n+\n+const restoreVolume = (video: HTMLVideoElement) => {\n+  const volume = (playerSettings.get('volume') as number | undefined) ?? 0.5;\n+  const muted = (playerSettings.get('muted') as boolean | undefined) ?? false;\n+\n+  video.volume = volume;\n+  video.muted = muted;\n+};\n+\n+let hotkeyEventId = 0;\n+\n+const registerHotkeyEvent = (\n+  setHotkeyEvents: React.Dispatch<React.SetStateAction<HotkeyEvent[]>>,\n+  event: Omit<HotkeyEvent, 'key'>,\n+) => {\n+  setHotkeyEvents(() => [{ key: hotkeyEventId++, ...event }]);\n+};",
        "comment_created_at": "2025-03-28T10:23:08+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "nit: perhaps this should be moved inside Video so the code doesn't need to pass `setHotkeyEvents` every time?",
        "pr_file_module": null
      },
      {
        "comment_id": "2018545019",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34284,
        "pr_file": "app/javascript/mastodon/features/video/index.tsx",
        "discussion_id": "2018324741",
        "commented_code": "@@ -0,0 +1,1022 @@\n+import { useEffect, useCallback, useRef, useState } from 'react';\n+\n+import { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n+\n+import classNames from 'classnames';\n+\n+import { useSpring, animated, config } from '@react-spring/web';\n+import { throttle } from 'lodash';\n+\n+import Forward5Icon from '@/material-icons/400-24px/forward_5-fill.svg?react';\n+import FullscreenIcon from '@/material-icons/400-24px/fullscreen.svg?react';\n+import FullscreenExitIcon from '@/material-icons/400-24px/fullscreen_exit.svg?react';\n+import PauseIcon from '@/material-icons/400-24px/pause-fill.svg?react';\n+import PlayArrowIcon from '@/material-icons/400-24px/play_arrow-fill.svg?react';\n+import RectangleIcon from '@/material-icons/400-24px/rectangle.svg?react';\n+import Replay5Icon from '@/material-icons/400-24px/replay_5-fill.svg?react';\n+import VolumeDownIcon from '@/material-icons/400-24px/volume_down-fill.svg?react';\n+import VolumeOffIcon from '@/material-icons/400-24px/volume_off-fill.svg?react';\n+import VolumeUpIcon from '@/material-icons/400-24px/volume_up-fill.svg?react';\n+import { Blurhash } from 'mastodon/components/blurhash';\n+import { Icon } from 'mastodon/components/icon';\n+import { SpoilerButton } from 'mastodon/components/spoiler_button';\n+import {\n+  isFullscreen,\n+  requestFullscreen,\n+  exitFullscreen,\n+  attachFullscreenListener,\n+  detachFullscreenListener,\n+} from 'mastodon/features/ui/util/fullscreen';\n+import {\n+  displayMedia,\n+  useBlurhash,\n+  reduceMotion,\n+} from 'mastodon/initial_state';\n+import { playerSettings } from 'mastodon/settings';\n+\n+import { HotkeyIndicator } from './components/hotkey_indicator';\n+import type { HotkeyEvent } from './components/hotkey_indicator';\n+\n+const messages = defineMessages({\n+  play: { id: 'video.play', defaultMessage: 'Play' },\n+  pause: { id: 'video.pause', defaultMessage: 'Pause' },\n+  mute: { id: 'video.mute', defaultMessage: 'Mute' },\n+  unmute: { id: 'video.unmute', defaultMessage: 'Unmute' },\n+  hide: { id: 'video.hide', defaultMessage: 'Hide video' },\n+  expand: { id: 'video.expand', defaultMessage: 'Expand video' },\n+  close: { id: 'video.close', defaultMessage: 'Close video' },\n+  fullscreen: { id: 'video.fullscreen', defaultMessage: 'Full screen' },\n+  exit_fullscreen: {\n+    id: 'video.exit_fullscreen',\n+    defaultMessage: 'Exit full screen',\n+  },\n+  volumeUp: { id: 'video.volume_up', defaultMessage: 'Volume up' },\n+  volumeDown: { id: 'video.volume_down', defaultMessage: 'Volume down' },\n+  skipForward: { id: 'video.skip_forward', defaultMessage: 'Skip forward' },\n+  skipBackward: { id: 'video.skip_backward', defaultMessage: 'Skip backward' },\n+});\n+\n+const DOUBLE_CLICK_THRESHOLD = 250;\n+\n+export const formatTime = (secondsNum: number) => {\n+  const hours = Math.floor(secondsNum / 3600);\n+  const minutes = Math.floor((secondsNum - hours * 3600) / 60);\n+  const seconds = secondsNum - hours * 3600 - minutes * 60;\n+\n+  const formattedHours = `${hours < 10 ? '0' : ''}${hours}`;\n+  const formattedMinutes = `${minutes < 10 ? '0' : ''}${minutes}`;\n+  const formattedSeconds = `${seconds < 10 ? '0' : ''}${seconds}`;\n+\n+  return (\n+    (formattedHours === '00' ? '' : `${formattedHours}:`) +\n+    `${formattedMinutes}:${formattedSeconds}`\n+  );\n+};\n+\n+export const findElementPosition = (el: HTMLElement) => {\n+  const box = el.getBoundingClientRect();\n+  const docEl = document.documentElement;\n+  const body = document.body;\n+\n+  const clientLeft = docEl.clientLeft || body.clientLeft || 0;\n+  const scrollLeft = window.scrollX || body.scrollLeft;\n+  const left = box.left + scrollLeft - clientLeft;\n+\n+  const clientTop = docEl.clientTop || body.clientTop || 0;\n+  const scrollTop = window.scrollY || body.scrollTop;\n+  const top = box.top + scrollTop - clientTop;\n+\n+  return {\n+    left: Math.round(left),\n+    top: Math.round(top),\n+  };\n+};\n+\n+export const getPointerPosition = (\n+  el: HTMLElement | null,\n+  event: MouseEvent,\n+) => {\n+  if (!el) {\n+    return {\n+      y: 0,\n+      x: 0,\n+    };\n+  }\n+\n+  const box = findElementPosition(el);\n+  const boxW = el.offsetWidth;\n+  const boxH = el.offsetHeight;\n+  const boxY = box.top;\n+  const boxX = box.left;\n+\n+  const { pageY, pageX } = event;\n+\n+  return {\n+    y: Math.max(0, Math.min(1, (pageY - boxY) / boxH)),\n+    x: Math.max(0, Math.min(1, (pageX - boxX) / boxW)),\n+  };\n+};\n+\n+export const fileNameFromURL = (str: string) => {\n+  const url = new URL(str);\n+  const pathname = url.pathname;\n+  const index = pathname.lastIndexOf('/');\n+\n+  return pathname.slice(index + 1);\n+};\n+\n+const frameRateAsNumber = (frameRate: string): number => {\n+  if (frameRate.includes('/')) {\n+    return frameRate\n+      .split('/')\n+      .map((c) => parseInt(c))\n+      .reduce((p, c) => p / c);\n+  }\n+\n+  return parseInt(frameRate);\n+};\n+\n+const persistVolume = (volume: number, muted: boolean) => {\n+  playerSettings.set('volume', volume);\n+  playerSettings.set('muted', muted);\n+};\n+\n+const restoreVolume = (video: HTMLVideoElement) => {\n+  const volume = (playerSettings.get('volume') as number | undefined) ?? 0.5;\n+  const muted = (playerSettings.get('muted') as boolean | undefined) ?? false;\n+\n+  video.volume = volume;\n+  video.muted = muted;\n+};\n+\n+let hotkeyEventId = 0;\n+\n+const registerHotkeyEvent = (\n+  setHotkeyEvents: React.Dispatch<React.SetStateAction<HotkeyEvent[]>>,\n+  event: Omit<HotkeyEvent, 'key'>,\n+) => {\n+  setHotkeyEvents(() => [{ key: hotkeyEventId++, ...event }]);\n+};",
        "comment_created_at": "2025-03-28T12:07:31+00:00",
        "comment_author": "Gargron",
        "comment_body": "I still get a bit confused about `useCallback` depending on another `useCallback` so wanted to avoid that by extracting the helper function outside the component. The most important bit here (and I think I should've left a comment maybe) is that it's important the `event` literal is instantiated *outside* the `setHotkeyEvents` callback because it runs at a later time and so the `videoRef.current.paused` value will already be different. By passing the `event` literal to this function instead, I keep it all on one line where it's called, and the `event` value is static.",
        "pr_file_module": null
      }
    ]
  }
]