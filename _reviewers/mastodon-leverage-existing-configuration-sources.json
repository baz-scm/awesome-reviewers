[
  {
    "discussion_id": "2161180808",
    "pr_number": 35101,
    "pr_file": "app/javascript/mastodon/actions/tags_typed.ts",
    "created_at": "2025-06-23T09:45:37+00:00",
    "commented_code": "+import { createAction } from '@reduxjs/toolkit';\n+\n import {\n   apiGetTag,\n   apiFollowTag,\n   apiUnfollowTag,\n   apiFeatureTag,\n   apiUnfeatureTag,\n+  apiGetFollowedTags,\n } from 'mastodon/api/tags';\n import { createDataLoadingThunk } from 'mastodon/store/typed_functions';\n \n+export const fetchFollowedHashtags = createDataLoadingThunk(\n+  'tags/fetch-followed',\n+  async ({\n+    context,\n+    limit,\n+    next,\n+  }: {\n+    context: 'full' | 'sidebar';",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2161180808",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 35101,
        "pr_file": "app/javascript/mastodon/actions/tags_typed.ts",
        "discussion_id": "2161180808",
        "commented_code": "@@ -1,12 +1,39 @@\n+import { createAction } from '@reduxjs/toolkit';\n+\n import {\n   apiGetTag,\n   apiFollowTag,\n   apiUnfollowTag,\n   apiFeatureTag,\n   apiUnfeatureTag,\n+  apiGetFollowedTags,\n } from 'mastodon/api/tags';\n import { createDataLoadingThunk } from 'mastodon/store/typed_functions';\n \n+export const fetchFollowedHashtags = createDataLoadingThunk(\n+  'tags/fetch-followed',\n+  async ({\n+    context,\n+    limit,\n+    next,\n+  }: {\n+    context: 'full' | 'sidebar';",
        "comment_created_at": "2025-06-23T09:45:37+00:00",
        "comment_author": "Gargron",
        "comment_body": "I think it might be simpler to fetch a full page of tags from the API and limit to displaying the first 4 in the sidebar, if it means avoiding keeping track of \"where will this be displayed\" in actions/reducers. That's what we do with lists.",
        "pr_file_module": null
      },
      {
        "comment_id": "2161344012",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 35101,
        "pr_file": "app/javascript/mastodon/actions/tags_typed.ts",
        "discussion_id": "2161180808",
        "commented_code": "@@ -1,12 +1,39 @@\n+import { createAction } from '@reduxjs/toolkit';\n+\n import {\n   apiGetTag,\n   apiFollowTag,\n   apiUnfollowTag,\n   apiFeatureTag,\n   apiUnfeatureTag,\n+  apiGetFollowedTags,\n } from 'mastodon/api/tags';\n import { createDataLoadingThunk } from 'mastodon/store/typed_functions';\n \n+export const fetchFollowedHashtags = createDataLoadingThunk(\n+  'tags/fetch-followed',\n+  async ({\n+    context,\n+    limit,\n+    next,\n+  }: {\n+    context: 'full' | 'sidebar';",
        "comment_created_at": "2025-06-23T11:09:19+00:00",
        "comment_author": "diondiondion",
        "comment_body": "Done, simplified the state so that there's just a single list now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2106820556",
    "pr_number": 34808,
    "pr_file": "config/vite/plugin-mastodon-themes.ts",
    "created_at": "2025-05-26T08:25:00+00:00",
    "commented_code": "+/* This plugins handles Mastodon's theme system\n+ */\n+\n+import fs from 'node:fs';\n+import path from 'node:path';\n+\n+import yaml from 'js-yaml';\n+import type { Plugin } from 'vite';\n+\n+export function MastodonThemes(projectRoot: string): Plugin {\n+  return {\n+    name: 'mastodon-themes',\n+    config: () => {",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2106820556",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34808,
        "pr_file": "config/vite/plugin-mastodon-themes.ts",
        "discussion_id": "2106820556",
        "commented_code": "@@ -0,0 +1,52 @@\n+/* This plugins handles Mastodon's theme system\n+ */\n+\n+import fs from 'node:fs';\n+import path from 'node:path';\n+\n+import yaml from 'js-yaml';\n+import type { Plugin } from 'vite';\n+\n+export function MastodonThemes(projectRoot: string): Plugin {\n+  return {\n+    name: 'mastodon-themes',\n+    config: () => {",
        "comment_created_at": "2025-05-26T08:25:00+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "it's not required to pass in the project root, the first arg of `config` is the config before the plugin, so the code can pull `root` off of that instead of via `projectRoot`",
        "pr_file_module": null
      },
      {
        "comment_id": "2106913748",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34808,
        "pr_file": "config/vite/plugin-mastodon-themes.ts",
        "discussion_id": "2106820556",
        "commented_code": "@@ -0,0 +1,52 @@\n+/* This plugins handles Mastodon's theme system\n+ */\n+\n+import fs from 'node:fs';\n+import path from 'node:path';\n+\n+import yaml from 'js-yaml';\n+import type { Plugin } from 'vite';\n+\n+export function MastodonThemes(projectRoot: string): Plugin {\n+  return {\n+    name: 'mastodon-themes',\n+    config: () => {",
        "comment_created_at": "2025-05-26T09:18:41+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "Oh, that's good to know and it would indeed be appropriate to replace the computed `jsRoot`!\r\n\r\nHowever, it's not (in general) guaranteed to be set, so I'm not sure how to handle the case where `config.root` is `undefined`.\r\n\r\nFurthermore, it would mean that `themesFile` would be defined as something like `path.resolve(config.root, '../../config/themes.yml')`, which is rather awkward and brittle.",
        "pr_file_module": null
      },
      {
        "comment_id": "2106924659",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34808,
        "pr_file": "config/vite/plugin-mastodon-themes.ts",
        "discussion_id": "2106820556",
        "commented_code": "@@ -0,0 +1,52 @@\n+/* This plugins handles Mastodon's theme system\n+ */\n+\n+import fs from 'node:fs';\n+import path from 'node:path';\n+\n+import yaml from 'js-yaml';\n+import type { Plugin } from 'vite';\n+\n+export function MastodonThemes(projectRoot: string): Plugin {\n+  return {\n+    name: 'mastodon-themes',\n+    config: () => {",
        "comment_created_at": "2025-05-26T09:25:10+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "hrm, i see what you mean. i think `../../config` is better than passing `__dirname` in as i don't think the relative paths are that brittle, but that's my personal taste.",
        "pr_file_module": null
      },
      {
        "comment_id": "2107440348",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34808,
        "pr_file": "config/vite/plugin-mastodon-themes.ts",
        "discussion_id": "2106820556",
        "commented_code": "@@ -0,0 +1,52 @@\n+/* This plugins handles Mastodon's theme system\n+ */\n+\n+import fs from 'node:fs';\n+import path from 'node:path';\n+\n+import yaml from 'js-yaml';\n+import type { Plugin } from 'vite';\n+\n+export function MastodonThemes(projectRoot: string): Plugin {\n+  return {\n+    name: 'mastodon-themes',\n+    config: () => {",
        "comment_created_at": "2025-05-26T14:14:03+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "Seems like we could use `config.root` and `config.envDir`. However, they both can be `undefined`, I am not sure what the behavior of the plugin should be in this case.",
        "pr_file_module": null
      },
      {
        "comment_id": "2107494971",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34808,
        "pr_file": "config/vite/plugin-mastodon-themes.ts",
        "discussion_id": "2106820556",
        "commented_code": "@@ -0,0 +1,52 @@\n+/* This plugins handles Mastodon's theme system\n+ */\n+\n+import fs from 'node:fs';\n+import path from 'node:path';\n+\n+import yaml from 'js-yaml';\n+import type { Plugin } from 'vite';\n+\n+export function MastodonThemes(projectRoot: string): Plugin {\n+  return {\n+    name: 'mastodon-themes',\n+    config: () => {",
        "comment_created_at": "2025-05-26T14:47:47+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "personally i'd throw, as that's what is being done with an invalid `themes.yaml` anyway?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2107496148",
    "pr_number": 34808,
    "pr_file": "config/vite/plugin-mastodon-themes.ts",
    "created_at": "2025-05-26T14:48:31+00:00",
    "commented_code": "+/* This plugins handles Mastodon's theme system\n+ */\n+\n+import fs from 'node:fs/promises';\n+import path from 'node:path';\n+\n+import yaml from 'js-yaml';\n+import type { Plugin, UserConfig } from 'vite';\n+\n+export function MastodonThemes(): Plugin {\n+  return {\n+    name: 'mastodon-themes',\n+    config: async (userConfig: UserConfig) => {",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2107496148",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34808,
        "pr_file": "config/vite/plugin-mastodon-themes.ts",
        "discussion_id": "2107496148",
        "commented_code": "@@ -0,0 +1,58 @@\n+/* This plugins handles Mastodon's theme system\n+ */\n+\n+import fs from 'node:fs/promises';\n+import path from 'node:path';\n+\n+import yaml from 'js-yaml';\n+import type { Plugin, UserConfig } from 'vite';\n+\n+export function MastodonThemes(): Plugin {\n+  return {\n+    name: 'mastodon-themes',\n+    config: async (userConfig: UserConfig) => {",
        "comment_created_at": "2025-05-26T14:48:31+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "this format doesn't require specifying the type, as it comes from `Plugin`.\r\n```suggestion\r\n    async config(userConfig) {\r\n```",
        "pr_file_module": null
      }
    ]
  }
]