[
  {
    "discussion_id": "1927240425",
    "pr_number": 33704,
    "pr_file": "app/javascript/mastodon/features/compose/components/language_dropdown.jsx",
    "created_at": "2025-01-23T16:05:41+00:00",
    "commented_code": "break;\n     }\n-  };\n+  }, [listNodeRef, onChange, onClose, searchValue]);\n \n-  handleClear = () => {\n-    this.setState({ searchValue: '' });\n-  };\n+  const handleClear = useCallback(() => {\n+    setSearchValue('');\n+  }, [setSearchValue]);\n \n-  renderItem = lang => {\n-    const { value } = this.props;\n+  const isSearching = searchValue !== '';\n \n-    return (\n-      <div key={lang[0]} role='option' tabIndex={0} data-index={lang[0]} className={classNames('language-dropdown__dropdown__results__item', { active: lang[0] === value })} aria-selected={lang[0] === value} onClick={this.handleClick} onKeyDown={this.handleKeyDown}>\n-        <span className='language-dropdown__dropdown__results__item__native-name' lang={lang[0]}>{lang[2]}</span> <span className='language-dropdown__dropdown__results__item__common-name'>({lang[1]})</span>\n-      </div>\n-    );\n-  };\n-\n-  render () {\n-    const { intl } = this.props;\n-    const { searchValue } = this.state;\n-    const isSearching = searchValue !== '';\n-    const results = this.search();\n-\n-    return (\n-      <div ref={this.setRef}>\n-        <div className='emoji-mart-search'>\n-          <input type='search' value={searchValue} onChange={this.handleSearchChange} onKeyDown={this.handleSearchKeyDown} placeholder={intl.formatMessage(messages.search)} />\n-          <button type='button' className='emoji-mart-search-icon' disabled={!isSearching} aria-label={intl.formatMessage(messages.clear)} onClick={this.handleClear}><Icon icon={!isSearching ? SearchIcon : CancelIcon} /></button>\n-        </div>\n-\n-        <div className='language-dropdown__dropdown__results emoji-mart-scroll' role='listbox' ref={this.setListRef}>\n-          {results.map(this.renderItem)}\n-        </div>\n+  useEffect(() => {\n+    document.addEventListener('click', handleDocumentClick, { capture: true });",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1927240425",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33704,
        "pr_file": "app/javascript/mastodon/features/compose/components/language_dropdown.jsx",
        "discussion_id": "1927240425",
        "commented_code": "@@ -206,52 +138,89 @@ class LanguageDropdownMenu extends PureComponent {\n \n       break;\n     }\n-  };\n+  }, [listNodeRef, onChange, onClose, searchValue]);\n \n-  handleClear = () => {\n-    this.setState({ searchValue: '' });\n-  };\n+  const handleClear = useCallback(() => {\n+    setSearchValue('');\n+  }, [setSearchValue]);\n \n-  renderItem = lang => {\n-    const { value } = this.props;\n+  const isSearching = searchValue !== '';\n \n-    return (\n-      <div key={lang[0]} role='option' tabIndex={0} data-index={lang[0]} className={classNames('language-dropdown__dropdown__results__item', { active: lang[0] === value })} aria-selected={lang[0] === value} onClick={this.handleClick} onKeyDown={this.handleKeyDown}>\n-        <span className='language-dropdown__dropdown__results__item__native-name' lang={lang[0]}>{lang[2]}</span> <span className='language-dropdown__dropdown__results__item__common-name'>({lang[1]})</span>\n-      </div>\n-    );\n-  };\n-\n-  render () {\n-    const { intl } = this.props;\n-    const { searchValue } = this.state;\n-    const isSearching = searchValue !== '';\n-    const results = this.search();\n-\n-    return (\n-      <div ref={this.setRef}>\n-        <div className='emoji-mart-search'>\n-          <input type='search' value={searchValue} onChange={this.handleSearchChange} onKeyDown={this.handleSearchKeyDown} placeholder={intl.formatMessage(messages.search)} />\n-          <button type='button' className='emoji-mart-search-icon' disabled={!isSearching} aria-label={intl.formatMessage(messages.clear)} onClick={this.handleClear}><Icon icon={!isSearching ? SearchIcon : CancelIcon} /></button>\n-        </div>\n-\n-        <div className='language-dropdown__dropdown__results emoji-mart-scroll' role='listbox' ref={this.setListRef}>\n-          {results.map(this.renderItem)}\n-        </div>\n+  useEffect(() => {\n+    document.addEventListener('click', handleDocumentClick, { capture: true });",
        "comment_created_at": "2025-01-23T16:05:41+00:00",
        "comment_author": "Gargron",
        "comment_body": "You can define `handleDocumentClick` locally within the `useEffect` and avoid having to use `useCallback` for it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1927241887",
    "pr_number": 33704,
    "pr_file": "app/javascript/mastodon/features/compose/components/language_dropdown.jsx",
    "created_at": "2025-01-23T16:06:29+00:00",
    "commented_code": "break;\n     }\n-  };\n+  }, [listNodeRef, onChange, onClose, searchValue]);\n \n-  handleClear = () => {\n-    this.setState({ searchValue: '' });\n-  };\n+  const handleClear = useCallback(() => {\n+    setSearchValue('');\n+  }, [setSearchValue]);\n \n-  renderItem = lang => {\n-    const { value } = this.props;\n+  const isSearching = searchValue !== '';\n \n-    return (\n-      <div key={lang[0]} role='option' tabIndex={0} data-index={lang[0]} className={classNames('language-dropdown__dropdown__results__item', { active: lang[0] === value })} aria-selected={lang[0] === value} onClick={this.handleClick} onKeyDown={this.handleKeyDown}>\n-        <span className='language-dropdown__dropdown__results__item__native-name' lang={lang[0]}>{lang[2]}</span> <span className='language-dropdown__dropdown__results__item__common-name'>({lang[1]})</span>\n-      </div>\n-    );\n-  };\n-\n-  render () {\n-    const { intl } = this.props;\n-    const { searchValue } = this.state;\n-    const isSearching = searchValue !== '';\n-    const results = this.search();\n-\n-    return (\n-      <div ref={this.setRef}>\n-        <div className='emoji-mart-search'>\n-          <input type='search' value={searchValue} onChange={this.handleSearchChange} onKeyDown={this.handleSearchKeyDown} placeholder={intl.formatMessage(messages.search)} />\n-          <button type='button' className='emoji-mart-search-icon' disabled={!isSearching} aria-label={intl.formatMessage(messages.clear)} onClick={this.handleClear}><Icon icon={!isSearching ? SearchIcon : CancelIcon} /></button>\n-        </div>\n-\n-        <div className='language-dropdown__dropdown__results emoji-mart-scroll' role='listbox' ref={this.setListRef}>\n-          {results.map(this.renderItem)}\n-        </div>\n+  useEffect(() => {\n+    document.addEventListener('click', handleDocumentClick, { capture: true });\n+    document.addEventListener('touchend', handleDocumentClick, listenerOptions);\n+\n+    // Because of https://github.com/react-bootstrap/react-bootstrap/issues/2614 we need\n+    // to wait for a frame before focusing\n+    requestAnimationFrame(() => {\n+      if (nodeRef.current) {\n+        const element = nodeRef.current.querySelector('input[type=\"search\"]');\n+        if (element) element.focus();\n+      }\n+    });\n+\n+    return () => {\n+      document.removeEventListener('click', handleDocumentClick, { capture: true });\n+      document.removeEventListener('touchend', handleDocumentClick, listenerOptions);\n+    };\n+  }, [nodeRef, handleDocumentClick]);",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1927241887",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33704,
        "pr_file": "app/javascript/mastodon/features/compose/components/language_dropdown.jsx",
        "discussion_id": "1927241887",
        "commented_code": "@@ -206,52 +138,89 @@ class LanguageDropdownMenu extends PureComponent {\n \n       break;\n     }\n-  };\n+  }, [listNodeRef, onChange, onClose, searchValue]);\n \n-  handleClear = () => {\n-    this.setState({ searchValue: '' });\n-  };\n+  const handleClear = useCallback(() => {\n+    setSearchValue('');\n+  }, [setSearchValue]);\n \n-  renderItem = lang => {\n-    const { value } = this.props;\n+  const isSearching = searchValue !== '';\n \n-    return (\n-      <div key={lang[0]} role='option' tabIndex={0} data-index={lang[0]} className={classNames('language-dropdown__dropdown__results__item', { active: lang[0] === value })} aria-selected={lang[0] === value} onClick={this.handleClick} onKeyDown={this.handleKeyDown}>\n-        <span className='language-dropdown__dropdown__results__item__native-name' lang={lang[0]}>{lang[2]}</span> <span className='language-dropdown__dropdown__results__item__common-name'>({lang[1]})</span>\n-      </div>\n-    );\n-  };\n-\n-  render () {\n-    const { intl } = this.props;\n-    const { searchValue } = this.state;\n-    const isSearching = searchValue !== '';\n-    const results = this.search();\n-\n-    return (\n-      <div ref={this.setRef}>\n-        <div className='emoji-mart-search'>\n-          <input type='search' value={searchValue} onChange={this.handleSearchChange} onKeyDown={this.handleSearchKeyDown} placeholder={intl.formatMessage(messages.search)} />\n-          <button type='button' className='emoji-mart-search-icon' disabled={!isSearching} aria-label={intl.formatMessage(messages.clear)} onClick={this.handleClear}><Icon icon={!isSearching ? SearchIcon : CancelIcon} /></button>\n-        </div>\n-\n-        <div className='language-dropdown__dropdown__results emoji-mart-scroll' role='listbox' ref={this.setListRef}>\n-          {results.map(this.renderItem)}\n-        </div>\n+  useEffect(() => {\n+    document.addEventListener('click', handleDocumentClick, { capture: true });\n+    document.addEventListener('touchend', handleDocumentClick, listenerOptions);\n+\n+    // Because of https://github.com/react-bootstrap/react-bootstrap/issues/2614 we need\n+    // to wait for a frame before focusing\n+    requestAnimationFrame(() => {\n+      if (nodeRef.current) {\n+        const element = nodeRef.current.querySelector('input[type=\"search\"]');\n+        if (element) element.focus();\n+      }\n+    });\n+\n+    return () => {\n+      document.removeEventListener('click', handleDocumentClick, { capture: true });\n+      document.removeEventListener('touchend', handleDocumentClick, listenerOptions);\n+    };\n+  }, [nodeRef, handleDocumentClick]);",
        "comment_created_at": "2025-01-23T16:06:29+00:00",
        "comment_author": "Gargron",
        "comment_body": "Refs do not need to be passed as dependencies. This `useEffect` can have a dependency of `[]`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1928302270",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33704,
        "pr_file": "app/javascript/mastodon/features/compose/components/language_dropdown.jsx",
        "discussion_id": "1927241887",
        "commented_code": "@@ -206,52 +138,89 @@ class LanguageDropdownMenu extends PureComponent {\n \n       break;\n     }\n-  };\n+  }, [listNodeRef, onChange, onClose, searchValue]);\n \n-  handleClear = () => {\n-    this.setState({ searchValue: '' });\n-  };\n+  const handleClear = useCallback(() => {\n+    setSearchValue('');\n+  }, [setSearchValue]);\n \n-  renderItem = lang => {\n-    const { value } = this.props;\n+  const isSearching = searchValue !== '';\n \n-    return (\n-      <div key={lang[0]} role='option' tabIndex={0} data-index={lang[0]} className={classNames('language-dropdown__dropdown__results__item', { active: lang[0] === value })} aria-selected={lang[0] === value} onClick={this.handleClick} onKeyDown={this.handleKeyDown}>\n-        <span className='language-dropdown__dropdown__results__item__native-name' lang={lang[0]}>{lang[2]}</span> <span className='language-dropdown__dropdown__results__item__common-name'>({lang[1]})</span>\n-      </div>\n-    );\n-  };\n-\n-  render () {\n-    const { intl } = this.props;\n-    const { searchValue } = this.state;\n-    const isSearching = searchValue !== '';\n-    const results = this.search();\n-\n-    return (\n-      <div ref={this.setRef}>\n-        <div className='emoji-mart-search'>\n-          <input type='search' value={searchValue} onChange={this.handleSearchChange} onKeyDown={this.handleSearchKeyDown} placeholder={intl.formatMessage(messages.search)} />\n-          <button type='button' className='emoji-mart-search-icon' disabled={!isSearching} aria-label={intl.formatMessage(messages.clear)} onClick={this.handleClear}><Icon icon={!isSearching ? SearchIcon : CancelIcon} /></button>\n-        </div>\n-\n-        <div className='language-dropdown__dropdown__results emoji-mart-scroll' role='listbox' ref={this.setListRef}>\n-          {results.map(this.renderItem)}\n-        </div>\n+  useEffect(() => {\n+    document.addEventListener('click', handleDocumentClick, { capture: true });\n+    document.addEventListener('touchend', handleDocumentClick, listenerOptions);\n+\n+    // Because of https://github.com/react-bootstrap/react-bootstrap/issues/2614 we need\n+    // to wait for a frame before focusing\n+    requestAnimationFrame(() => {\n+      if (nodeRef.current) {\n+        const element = nodeRef.current.querySelector('input[type=\"search\"]');\n+        if (element) element.focus();\n+      }\n+    });\n+\n+    return () => {\n+      document.removeEventListener('click', handleDocumentClick, { capture: true });\n+      document.removeEventListener('touchend', handleDocumentClick, listenerOptions);\n+    };\n+  }, [nodeRef, handleDocumentClick]);",
        "comment_created_at": "2025-01-24T08:17:28+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "Oh, yeah, good point for the refs, I'm always confused by that. It can't have a dependency of `[]` since `handleDocumentClick` depends on `onClose`.",
        "pr_file_module": null
      }
    ]
  }
]