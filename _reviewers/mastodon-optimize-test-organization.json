[
  {
    "discussion_id": "1761825866",
    "pr_number": 31804,
    "pr_file": "spec/mailers/notification_mailer_spec.rb",
    "created_at": "2024-09-16T20:10:29+00:00",
    "commented_code": "RSpec.describe NotificationMailer do\n   let(:receiver)       { Fabricate(:user, account_attributes: { username: 'alice' }) }\n   let(:sender)         { Fabricate(:account, username: 'bob') }\n-  let(:foreign_status) { Fabricate(:status, account: sender, text: 'The body of the foreign status') }\n-  let(:own_status)     { Fabricate(:status, account: receiver.account, text: 'The body of the own status') }\n+  let(:foreign_status) { Fabricate(:status, account: sender, text: 'The body of the foreign status', created_at: '2024-01-01 12:01Z') }",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1761825866",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 31804,
        "pr_file": "spec/mailers/notification_mailer_spec.rb",
        "discussion_id": "1761825866",
        "commented_code": "@@ -5,8 +5,8 @@\n RSpec.describe NotificationMailer do\n   let(:receiver)       { Fabricate(:user, account_attributes: { username: 'alice' }) }\n   let(:sender)         { Fabricate(:account, username: 'bob') }\n-  let(:foreign_status) { Fabricate(:status, account: sender, text: 'The body of the foreign status') }\n-  let(:own_status)     { Fabricate(:status, account: receiver.account, text: 'The body of the own status') }\n+  let(:foreign_status) { Fabricate(:status, account: sender, text: 'The body of the foreign status', created_at: '2024-01-01 12:01Z') }",
        "comment_created_at": "2024-09-16T20:10:29+00:00",
        "comment_author": "mjankowski",
        "comment_body": "Given the repeated use of same datetime values here ... could we pull them all out to private method at bottom of this spec? (and same in other spec?)",
        "pr_file_module": null
      },
      {
        "comment_id": "1763548474",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 31804,
        "pr_file": "spec/mailers/notification_mailer_spec.rb",
        "discussion_id": "1761825866",
        "commented_code": "@@ -5,8 +5,8 @@\n RSpec.describe NotificationMailer do\n   let(:receiver)       { Fabricate(:user, account_attributes: { username: 'alice' }) }\n   let(:sender)         { Fabricate(:account, username: 'bob') }\n-  let(:foreign_status) { Fabricate(:status, account: sender, text: 'The body of the foreign status') }\n-  let(:own_status)     { Fabricate(:status, account: receiver.account, text: 'The body of the own status') }\n+  let(:foreign_status) { Fabricate(:status, account: sender, text: 'The body of the foreign status', created_at: '2024-01-01 12:01Z') }",
        "comment_created_at": "2024-09-17T16:32:31+00:00",
        "comment_author": "c960657",
        "comment_body": "I did this for the user_mailer_spec.rb.\r\n\r\nIn notification_mailer_spec.rb there are two different timestamps \u2014 one of them is referenced just once in the test body, and the other is referenced twice, so I don't think there is a lot duplication (compared to e.g. the name \u201cbob\u201d in the same file). Do you agree?. I have selected some new timestamps to make them more easily recognizable (2021-01-01 01:01 and 2022-02-02 02:02).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1892127645",
    "pr_number": 33364,
    "pr_file": "spec/system/admin/webhooks_spec.rb",
    "created_at": "2024-12-19T13:40:02+00:00",
    "commented_code": "+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+RSpec.describe 'Admin Webhooks' do\n+  describe 'Managing webhooks' do\n+    before { sign_in Fabricate(:user, role: UserRole.find_by(name: 'Admin')) }\n+\n+    describe 'Viewing webhooks' do\n+      let!(:webhook) { Fabricate :webhook }\n+\n+      it 'lists existing records' do\n+        visit admin_webhooks_path\n+\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+          .and have_content(webhook.url)\n+\n+        click_on(webhook.url)\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+      end\n+    end\n+\n+    describe 'Creating a new webhook' do\n+      it 'creates new record with valid attributes' do\n+        visit admin_webhooks_path\n+\n+        click_on I18n.t('admin.webhooks.add_new')\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.new'))\n+\n+        fill_in 'webhook_url', with: ''\n+        expect { submit_form }\n+          .to_not change(Webhook, :count)\n+        expect(page)\n+          .to have_content(/errors below/)",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1892127645",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33364,
        "pr_file": "spec/system/admin/webhooks_spec.rb",
        "discussion_id": "1892127645",
        "commented_code": "@@ -0,0 +1,100 @@\n+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+RSpec.describe 'Admin Webhooks' do\n+  describe 'Managing webhooks' do\n+    before { sign_in Fabricate(:user, role: UserRole.find_by(name: 'Admin')) }\n+\n+    describe 'Viewing webhooks' do\n+      let!(:webhook) { Fabricate :webhook }\n+\n+      it 'lists existing records' do\n+        visit admin_webhooks_path\n+\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+          .and have_content(webhook.url)\n+\n+        click_on(webhook.url)\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+      end\n+    end\n+\n+    describe 'Creating a new webhook' do\n+      it 'creates new record with valid attributes' do\n+        visit admin_webhooks_path\n+\n+        click_on I18n.t('admin.webhooks.add_new')\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.new'))\n+\n+        fill_in 'webhook_url', with: ''\n+        expect { submit_form }\n+          .to_not change(Webhook, :count)\n+        expect(page)\n+          .to have_content(/errors below/)",
        "comment_created_at": "2024-12-19T13:40:02+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "It's a minor thing, but we're not checking empty events anywhere.",
        "pr_file_module": null
      },
      {
        "comment_id": "1892161589",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33364,
        "pr_file": "spec/system/admin/webhooks_spec.rb",
        "discussion_id": "1892127645",
        "commented_code": "@@ -0,0 +1,100 @@\n+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+RSpec.describe 'Admin Webhooks' do\n+  describe 'Managing webhooks' do\n+    before { sign_in Fabricate(:user, role: UserRole.find_by(name: 'Admin')) }\n+\n+    describe 'Viewing webhooks' do\n+      let!(:webhook) { Fabricate :webhook }\n+\n+      it 'lists existing records' do\n+        visit admin_webhooks_path\n+\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+          .and have_content(webhook.url)\n+\n+        click_on(webhook.url)\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+      end\n+    end\n+\n+    describe 'Creating a new webhook' do\n+      it 'creates new record with valid attributes' do\n+        visit admin_webhooks_path\n+\n+        click_on I18n.t('admin.webhooks.add_new')\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.new'))\n+\n+        fill_in 'webhook_url', with: ''\n+        expect { submit_form }\n+          .to_not change(Webhook, :count)\n+        expect(page)\n+          .to have_content(/errors below/)",
        "comment_created_at": "2024-12-19T13:50:25+00:00",
        "comment_author": "mjankowski",
        "comment_body": "Well, we're _sending_ empty events in this invalid portion ... by not checking any boxes we wind up with something like `\"events\"=>[\"\"]` in the params ... but yes, we are not explicitly asserting about the events on the page being called out as missing.\r\n\r\nI didn't pay close attention to this, but I guess the previous controller spec was doing \"url present, events missing\" and I've done \"both missing\" here.\r\n\r\nLMK if fine as-is (we have model spec about all the validations, so I generally just try to do *something* to trigger the controller invalid path, but not every exhaustive way to do that) or you'd prefer something more direct on events.",
        "pr_file_module": null
      },
      {
        "comment_id": "1892185939",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33364,
        "pr_file": "spec/system/admin/webhooks_spec.rb",
        "discussion_id": "1892127645",
        "commented_code": "@@ -0,0 +1,100 @@\n+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+RSpec.describe 'Admin Webhooks' do\n+  describe 'Managing webhooks' do\n+    before { sign_in Fabricate(:user, role: UserRole.find_by(name: 'Admin')) }\n+\n+    describe 'Viewing webhooks' do\n+      let!(:webhook) { Fabricate :webhook }\n+\n+      it 'lists existing records' do\n+        visit admin_webhooks_path\n+\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+          .and have_content(webhook.url)\n+\n+        click_on(webhook.url)\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+      end\n+    end\n+\n+    describe 'Creating a new webhook' do\n+      it 'creates new record with valid attributes' do\n+        visit admin_webhooks_path\n+\n+        click_on I18n.t('admin.webhooks.add_new')\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.new'))\n+\n+        fill_in 'webhook_url', with: ''\n+        expect { submit_form }\n+          .to_not change(Webhook, :count)\n+        expect(page)\n+          .to have_content(/errors below/)",
        "comment_created_at": "2024-12-19T13:58:20+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "Oh yeah, it's testing empty URL and empty events at the same time. Maybe it should be split in two, and made a little more explicit with comments.",
        "pr_file_module": null
      },
      {
        "comment_id": "1892532676",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33364,
        "pr_file": "spec/system/admin/webhooks_spec.rb",
        "discussion_id": "1892127645",
        "commented_code": "@@ -0,0 +1,100 @@\n+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+RSpec.describe 'Admin Webhooks' do\n+  describe 'Managing webhooks' do\n+    before { sign_in Fabricate(:user, role: UserRole.find_by(name: 'Admin')) }\n+\n+    describe 'Viewing webhooks' do\n+      let!(:webhook) { Fabricate :webhook }\n+\n+      it 'lists existing records' do\n+        visit admin_webhooks_path\n+\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+          .and have_content(webhook.url)\n+\n+        click_on(webhook.url)\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+      end\n+    end\n+\n+    describe 'Creating a new webhook' do\n+      it 'creates new record with valid attributes' do\n+        visit admin_webhooks_path\n+\n+        click_on I18n.t('admin.webhooks.add_new')\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.new'))\n+\n+        fill_in 'webhook_url', with: ''\n+        expect { submit_form }\n+          .to_not change(Webhook, :count)\n+        expect(page)\n+          .to have_content(/errors below/)",
        "comment_created_at": "2024-12-19T15:41:29+00:00",
        "comment_author": "mjankowski",
        "comment_body": "Added some scattered comments to add some context about what's being exercised in a few spots.",
        "pr_file_module": null
      },
      {
        "comment_id": "1892725762",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33364,
        "pr_file": "spec/system/admin/webhooks_spec.rb",
        "discussion_id": "1892127645",
        "commented_code": "@@ -0,0 +1,100 @@\n+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+RSpec.describe 'Admin Webhooks' do\n+  describe 'Managing webhooks' do\n+    before { sign_in Fabricate(:user, role: UserRole.find_by(name: 'Admin')) }\n+\n+    describe 'Viewing webhooks' do\n+      let!(:webhook) { Fabricate :webhook }\n+\n+      it 'lists existing records' do\n+        visit admin_webhooks_path\n+\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+          .and have_content(webhook.url)\n+\n+        click_on(webhook.url)\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+      end\n+    end\n+\n+    describe 'Creating a new webhook' do\n+      it 'creates new record with valid attributes' do\n+        visit admin_webhooks_path\n+\n+        click_on I18n.t('admin.webhooks.add_new')\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.new'))\n+\n+        fill_in 'webhook_url', with: ''\n+        expect { submit_form }\n+          .to_not change(Webhook, :count)\n+        expect(page)\n+          .to have_content(/errors below/)",
        "comment_created_at": "2024-12-19T16:52:23+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "Sorry if I haven't been clear, but I was suggesting testing both case failures (empty events and empty URL) separately.",
        "pr_file_module": null
      },
      {
        "comment_id": "1892779935",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33364,
        "pr_file": "spec/system/admin/webhooks_spec.rb",
        "discussion_id": "1892127645",
        "commented_code": "@@ -0,0 +1,100 @@\n+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+RSpec.describe 'Admin Webhooks' do\n+  describe 'Managing webhooks' do\n+    before { sign_in Fabricate(:user, role: UserRole.find_by(name: 'Admin')) }\n+\n+    describe 'Viewing webhooks' do\n+      let!(:webhook) { Fabricate :webhook }\n+\n+      it 'lists existing records' do\n+        visit admin_webhooks_path\n+\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+          .and have_content(webhook.url)\n+\n+        click_on(webhook.url)\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+      end\n+    end\n+\n+    describe 'Creating a new webhook' do\n+      it 'creates new record with valid attributes' do\n+        visit admin_webhooks_path\n+\n+        click_on I18n.t('admin.webhooks.add_new')\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.new'))\n+\n+        fill_in 'webhook_url', with: ''\n+        expect { submit_form }\n+          .to_not change(Webhook, :count)\n+        expect(page)\n+          .to have_content(/errors below/)",
        "comment_created_at": "2024-12-19T17:12:00+00:00",
        "comment_author": "mjankowski",
        "comment_body": "Will do ... but out of curiosity (mostly to inform future PRs along these lines) ... why?\r\n\r\nGenerally speaking I'd try to be exhaustive on all combinations of how we can make a thing invalid at the model spec level; and then at any of the controller/system/request spec level, just make sure we hit the \"invalid path\" once to assert that some errors showed up and the invalid attrs did not save a record (exception here would be if there were multiple ways to be invalid, multiple filters, other edge cases, etc - to exercise them all) ... but in a way where it sort of doesnt matter which particular combination of making it invalid we used.\r\n\r\nAgain, no objection, just want to understand rationale for future of these. Will update this.",
        "pr_file_module": null
      },
      {
        "comment_id": "1892789431",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33364,
        "pr_file": "spec/system/admin/webhooks_spec.rb",
        "discussion_id": "1892127645",
        "commented_code": "@@ -0,0 +1,100 @@\n+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+RSpec.describe 'Admin Webhooks' do\n+  describe 'Managing webhooks' do\n+    before { sign_in Fabricate(:user, role: UserRole.find_by(name: 'Admin')) }\n+\n+    describe 'Viewing webhooks' do\n+      let!(:webhook) { Fabricate :webhook }\n+\n+      it 'lists existing records' do\n+        visit admin_webhooks_path\n+\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+          .and have_content(webhook.url)\n+\n+        click_on(webhook.url)\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+      end\n+    end\n+\n+    describe 'Creating a new webhook' do\n+      it 'creates new record with valid attributes' do\n+        visit admin_webhooks_path\n+\n+        click_on I18n.t('admin.webhooks.add_new')\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.new'))\n+\n+        fill_in 'webhook_url', with: ''\n+        expect { submit_form }\n+          .to_not change(Webhook, :count)\n+        expect(page)\n+          .to have_content(/errors below/)",
        "comment_created_at": "2024-12-19T17:15:38+00:00",
        "comment_author": "mjankowski",
        "comment_body": "Added special case for no events selected.",
        "pr_file_module": null
      },
      {
        "comment_id": "1893597245",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33364,
        "pr_file": "spec/system/admin/webhooks_spec.rb",
        "discussion_id": "1892127645",
        "commented_code": "@@ -0,0 +1,100 @@\n+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+RSpec.describe 'Admin Webhooks' do\n+  describe 'Managing webhooks' do\n+    before { sign_in Fabricate(:user, role: UserRole.find_by(name: 'Admin')) }\n+\n+    describe 'Viewing webhooks' do\n+      let!(:webhook) { Fabricate :webhook }\n+\n+      it 'lists existing records' do\n+        visit admin_webhooks_path\n+\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+          .and have_content(webhook.url)\n+\n+        click_on(webhook.url)\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.title'))\n+      end\n+    end\n+\n+    describe 'Creating a new webhook' do\n+      it 'creates new record with valid attributes' do\n+        visit admin_webhooks_path\n+\n+        click_on I18n.t('admin.webhooks.add_new')\n+        expect(page)\n+          .to have_content(I18n.t('admin.webhooks.new'))\n+\n+        fill_in 'webhook_url', with: ''\n+        expect { submit_form }\n+          .to_not change(Webhook, :count)\n+        expect(page)\n+          .to have_content(/errors below/)",
        "comment_created_at": "2024-12-20T07:58:24+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "Yeah, I suppose you're right, if the model tests cover this, it does not matter much.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1759535339",
    "pr_number": 31910,
    "pr_file": "spec/requests/api/v1/accounts_spec.rb",
    "created_at": "2024-09-13T21:23:46+00:00",
    "commented_code": "end\n     end\n \n+    context 'when user tries to follow their own account' do\n+      let(:locked) { false }\n+      let(:other_account) { user.account }\n+\n+      it 'returns http forbidden' do\n+        expect(response).to have_http_status(403)\n+      end\n+\n+      it 'returns JSON with an error message' do\n+        json = body_as_json",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1759535339",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 31910,
        "pr_file": "spec/requests/api/v1/accounts_spec.rb",
        "discussion_id": "1759535339",
        "commented_code": "@@ -147,6 +147,27 @@\n       end\n     end\n \n+    context 'when user tries to follow their own account' do\n+      let(:locked) { false }\n+      let(:other_account) { user.account }\n+\n+      it 'returns http forbidden' do\n+        expect(response).to have_http_status(403)\n+      end\n+\n+      it 'returns JSON with an error message' do\n+        json = body_as_json",
        "comment_created_at": "2024-09-13T21:23:46+00:00",
        "comment_author": "mjankowski",
        "comment_body": "You might want to rebase this -- the `body_as_json` helper is no longer available (use `response.parsed_body` directly).\r\n\r\nSeparatetly, you can you combine/chain the three assertions together so we can assert multiple things about the same response (avoid multiple round trips, multiple factories, etc).",
        "pr_file_module": null
      },
      {
        "comment_id": "1761469377",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 31910,
        "pr_file": "spec/requests/api/v1/accounts_spec.rb",
        "discussion_id": "1759535339",
        "commented_code": "@@ -147,6 +147,27 @@\n       end\n     end\n \n+    context 'when user tries to follow their own account' do\n+      let(:locked) { false }\n+      let(:other_account) { user.account }\n+\n+      it 'returns http forbidden' do\n+        expect(response).to have_http_status(403)\n+      end\n+\n+      it 'returns JSON with an error message' do\n+        json = body_as_json",
        "comment_created_at": "2024-09-16T16:27:51+00:00",
        "comment_author": "lenikadali",
        "comment_body": "Noted. Will do.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1866353335",
    "pr_number": 26325,
    "pr_file": "spec/lib/vacuum/invites_vacuum_spec.rb",
    "created_at": "2024-12-02T18:08:48+00:00",
    "commented_code": "+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+RSpec.describe Vacuum::InvitesVacuum do\n+  subject { described_class.new(retention_period, retention_max_uses) }\n+\n+  let(:retention_period) { 7.days }\n+  let(:retention_max_uses) { 10 }\n+\n+  let(:user) { Fabricate(:user) }\n+\n+  describe '#perform' do\n+    let!(:invite_unlimited) { Fabricate(:invite, user: user, max_uses: nil, created_at: 10.days.ago, expires_at: nil) }\n+    let!(:invite_huge_max_uses) { Fabricate(:invite, max_uses: 100, created_at: 10.days.ago, expires_at: nil) }\n+    let!(:invite_small_max_uses) { Fabricate(:invite, max_uses: 2, created_at: 10.days.ago, expires_at: nil) }\n+    let!(:invite_will_expires_later) { Fabricate(:invite, max_uses: nil, created_at: 1.hour.ago, expires_at: 1.hour.from_now) }\n+\n+    before do\n+      subject.perform",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1866353335",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 26325,
        "pr_file": "spec/lib/vacuum/invites_vacuum_spec.rb",
        "discussion_id": "1866353335",
        "commented_code": "@@ -0,0 +1,39 @@\n+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+RSpec.describe Vacuum::InvitesVacuum do\n+  subject { described_class.new(retention_period, retention_max_uses) }\n+\n+  let(:retention_period) { 7.days }\n+  let(:retention_max_uses) { 10 }\n+\n+  let(:user) { Fabricate(:user) }\n+\n+  describe '#perform' do\n+    let!(:invite_unlimited) { Fabricate(:invite, user: user, max_uses: nil, created_at: 10.days.ago, expires_at: nil) }\n+    let!(:invite_huge_max_uses) { Fabricate(:invite, max_uses: 100, created_at: 10.days.ago, expires_at: nil) }\n+    let!(:invite_small_max_uses) { Fabricate(:invite, max_uses: 2, created_at: 10.days.ago, expires_at: nil) }\n+    let!(:invite_will_expires_later) { Fabricate(:invite, max_uses: nil, created_at: 1.hour.ago, expires_at: 1.hour.from_now) }\n+\n+    before do\n+      subject.perform",
        "comment_created_at": "2024-12-02T18:08:48+00:00",
        "comment_author": "mjankowski",
        "comment_body": "I think as currently organized here, we'll wind up creating 20 factory records (5 lets across 4 examples).\r\n\r\nMaybe adjust to have one example that starts with `expect { subject.perform }...` and then chain on all the expected updates with `change` blocks?",
        "pr_file_module": null
      }
    ]
  }
]