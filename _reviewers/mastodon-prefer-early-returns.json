[
  {
    "discussion_id": "2137340567",
    "pr_number": 34910,
    "pr_file": "app/javascript/mastodon/features/ui/components/navigation_bar.tsx",
    "created_at": "2025-06-10T09:09:57+00:00",
    "commented_code": "+import { useCallback, useEffect } from 'react';\n+\n+import { useIntl, defineMessages, FormattedMessage } from 'react-intl';\n+\n+import classNames from 'classnames';\n+import { NavLink, useRouteMatch } from 'react-router-dom';\n+\n+import AddIcon from '@/material-icons/400-24px/add.svg?react';\n+import HomeActiveIcon from '@/material-icons/400-24px/home-fill.svg?react';\n+import HomeIcon from '@/material-icons/400-24px/home.svg?react';\n+import MenuIcon from '@/material-icons/400-24px/menu.svg?react';\n+import NotificationsActiveIcon from '@/material-icons/400-24px/notifications-fill.svg?react';\n+import NotificationsIcon from '@/material-icons/400-24px/notifications.svg?react';\n+import SearchIcon from '@/material-icons/400-24px/search.svg?react';\n+import { openModal } from 'mastodon/actions/modal';\n+import { toggleNavigation } from 'mastodon/actions/navigation';\n+import { fetchServer } from 'mastodon/actions/server';\n+import { Icon } from 'mastodon/components/icon';\n+import type { IconProp } from 'mastodon/components/icon';\n+import { IconWithBadge } from 'mastodon/components/icon_with_badge';\n+import { useIdentity } from 'mastodon/identity_context';\n+import { registrationsOpen, sso_redirect } from 'mastodon/initial_state';\n+import { selectUnreadNotificationGroupsCount } from 'mastodon/selectors/notifications';\n+import { useAppDispatch, useAppSelector } from 'mastodon/store';\n+\n+const messages = defineMessages({\n+  home: { id: 'tabs_bar.home', defaultMessage: 'Home' },\n+  search: { id: 'tabs_bar.search', defaultMessage: 'Search' },\n+  publish: { id: 'tabs_bar.publish', defaultMessage: 'New Post' },\n+  notifications: {\n+    id: 'tabs_bar.notifications',\n+    defaultMessage: 'Notifications',\n+  },\n+  menu: { id: 'tabs_bar.menu', defaultMessage: 'Menu' },\n+});\n+\n+const IconLabelButton: React.FC<{\n+  to: string;\n+  icon?: React.ReactNode;\n+  iconComponent?: IconProp;\n+  activeIcon?: React.ReactNode;\n+  activeIconComponent?: IconProp;\n+  title: string;\n+}> = ({ to, icon, iconComponent, activeIcon, activeIconComponent, title }) => {\n+  const match = useRouteMatch(to);\n+\n+  return (\n+    <NavLink\n+      className='ui__navigation-bar__item'\n+      activeClassName='active'\n+      to={to}\n+      aria-label={title}\n+    >\n+      {match?.isExact && activeIcon ? activeIcon : icon}\n+      {iconComponent && (\n+        <Icon\n+          id=''\n+          icon={\n+            match?.isExact && activeIconComponent\n+              ? activeIconComponent\n+              : iconComponent\n+          }\n+        />\n+      )}\n+    </NavLink>",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2137340567",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34910,
        "pr_file": "app/javascript/mastodon/features/ui/components/navigation_bar.tsx",
        "discussion_id": "2137340567",
        "commented_code": "@@ -0,0 +1,217 @@\n+import { useCallback, useEffect } from 'react';\n+\n+import { useIntl, defineMessages, FormattedMessage } from 'react-intl';\n+\n+import classNames from 'classnames';\n+import { NavLink, useRouteMatch } from 'react-router-dom';\n+\n+import AddIcon from '@/material-icons/400-24px/add.svg?react';\n+import HomeActiveIcon from '@/material-icons/400-24px/home-fill.svg?react';\n+import HomeIcon from '@/material-icons/400-24px/home.svg?react';\n+import MenuIcon from '@/material-icons/400-24px/menu.svg?react';\n+import NotificationsActiveIcon from '@/material-icons/400-24px/notifications-fill.svg?react';\n+import NotificationsIcon from '@/material-icons/400-24px/notifications.svg?react';\n+import SearchIcon from '@/material-icons/400-24px/search.svg?react';\n+import { openModal } from 'mastodon/actions/modal';\n+import { toggleNavigation } from 'mastodon/actions/navigation';\n+import { fetchServer } from 'mastodon/actions/server';\n+import { Icon } from 'mastodon/components/icon';\n+import type { IconProp } from 'mastodon/components/icon';\n+import { IconWithBadge } from 'mastodon/components/icon_with_badge';\n+import { useIdentity } from 'mastodon/identity_context';\n+import { registrationsOpen, sso_redirect } from 'mastodon/initial_state';\n+import { selectUnreadNotificationGroupsCount } from 'mastodon/selectors/notifications';\n+import { useAppDispatch, useAppSelector } from 'mastodon/store';\n+\n+const messages = defineMessages({\n+  home: { id: 'tabs_bar.home', defaultMessage: 'Home' },\n+  search: { id: 'tabs_bar.search', defaultMessage: 'Search' },\n+  publish: { id: 'tabs_bar.publish', defaultMessage: 'New Post' },\n+  notifications: {\n+    id: 'tabs_bar.notifications',\n+    defaultMessage: 'Notifications',\n+  },\n+  menu: { id: 'tabs_bar.menu', defaultMessage: 'Menu' },\n+});\n+\n+const IconLabelButton: React.FC<{\n+  to: string;\n+  icon?: React.ReactNode;\n+  iconComponent?: IconProp;\n+  activeIcon?: React.ReactNode;\n+  activeIconComponent?: IconProp;\n+  title: string;\n+}> = ({ to, icon, iconComponent, activeIcon, activeIconComponent, title }) => {\n+  const match = useRouteMatch(to);\n+\n+  return (\n+    <NavLink\n+      className='ui__navigation-bar__item'\n+      activeClassName='active'\n+      to={to}\n+      aria-label={title}\n+    >\n+      {match?.isExact && activeIcon ? activeIcon : icon}\n+      {iconComponent && (\n+        <Icon\n+          id=''\n+          icon={\n+            match?.isExact && activeIconComponent\n+              ? activeIconComponent\n+              : iconComponent\n+          }\n+        />\n+      )}\n+    </NavLink>",
        "comment_created_at": "2025-06-10T09:09:57+00:00",
        "comment_author": "diondiondion",
        "comment_body": "I found this bit of code hard to wrap my head around as just going by the internal logic it's entirely possible for two icons to be rendered in one link which seems unexpected. Might be simpler to forego the `iconComponent`/`activeIconComponent` shortcut and always passing in `ReactNodes`",
        "pr_file_module": null
      },
      {
        "comment_id": "2137524047",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34910,
        "pr_file": "app/javascript/mastodon/features/ui/components/navigation_bar.tsx",
        "discussion_id": "2137340567",
        "commented_code": "@@ -0,0 +1,217 @@\n+import { useCallback, useEffect } from 'react';\n+\n+import { useIntl, defineMessages, FormattedMessage } from 'react-intl';\n+\n+import classNames from 'classnames';\n+import { NavLink, useRouteMatch } from 'react-router-dom';\n+\n+import AddIcon from '@/material-icons/400-24px/add.svg?react';\n+import HomeActiveIcon from '@/material-icons/400-24px/home-fill.svg?react';\n+import HomeIcon from '@/material-icons/400-24px/home.svg?react';\n+import MenuIcon from '@/material-icons/400-24px/menu.svg?react';\n+import NotificationsActiveIcon from '@/material-icons/400-24px/notifications-fill.svg?react';\n+import NotificationsIcon from '@/material-icons/400-24px/notifications.svg?react';\n+import SearchIcon from '@/material-icons/400-24px/search.svg?react';\n+import { openModal } from 'mastodon/actions/modal';\n+import { toggleNavigation } from 'mastodon/actions/navigation';\n+import { fetchServer } from 'mastodon/actions/server';\n+import { Icon } from 'mastodon/components/icon';\n+import type { IconProp } from 'mastodon/components/icon';\n+import { IconWithBadge } from 'mastodon/components/icon_with_badge';\n+import { useIdentity } from 'mastodon/identity_context';\n+import { registrationsOpen, sso_redirect } from 'mastodon/initial_state';\n+import { selectUnreadNotificationGroupsCount } from 'mastodon/selectors/notifications';\n+import { useAppDispatch, useAppSelector } from 'mastodon/store';\n+\n+const messages = defineMessages({\n+  home: { id: 'tabs_bar.home', defaultMessage: 'Home' },\n+  search: { id: 'tabs_bar.search', defaultMessage: 'Search' },\n+  publish: { id: 'tabs_bar.publish', defaultMessage: 'New Post' },\n+  notifications: {\n+    id: 'tabs_bar.notifications',\n+    defaultMessage: 'Notifications',\n+  },\n+  menu: { id: 'tabs_bar.menu', defaultMessage: 'Menu' },\n+});\n+\n+const IconLabelButton: React.FC<{\n+  to: string;\n+  icon?: React.ReactNode;\n+  iconComponent?: IconProp;\n+  activeIcon?: React.ReactNode;\n+  activeIconComponent?: IconProp;\n+  title: string;\n+}> = ({ to, icon, iconComponent, activeIcon, activeIconComponent, title }) => {\n+  const match = useRouteMatch(to);\n+\n+  return (\n+    <NavLink\n+      className='ui__navigation-bar__item'\n+      activeClassName='active'\n+      to={to}\n+      aria-label={title}\n+    >\n+      {match?.isExact && activeIcon ? activeIcon : icon}\n+      {iconComponent && (\n+        <Icon\n+          id=''\n+          icon={\n+            match?.isExact && activeIconComponent\n+              ? activeIconComponent\n+              : iconComponent\n+          }\n+        />\n+      )}\n+    </NavLink>",
        "comment_created_at": "2025-06-10T10:38:32+00:00",
        "comment_author": "Gargron",
        "comment_body": "Refactored.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2102650954",
    "pr_number": 34773,
    "pr_file": "app/javascript/mastodon/components/status_quoted.tsx",
    "created_at": "2025-05-22T14:01:41+00:00",
    "commented_code": "*/\n \n export const StatusQuoteManager = (props: StatusQuoteManagerProps) => {\n-  const status = useAppSelector((state) => state.statuses.get(props.id));\n+  const status = useAppSelector((state) => {\n+    const status = state.statuses.get(props.id);\n+    const reblogId = status?.get('reblog') as string | undefined;\n+    return reblogId ? state.statuses.get(reblogId) : status;",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2102650954",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34773,
        "pr_file": "app/javascript/mastodon/components/status_quoted.tsx",
        "discussion_id": "2102650954",
        "commented_code": "@@ -158,7 +158,11 @@ interface StatusQuoteManagerProps {\n  */\n \n export const StatusQuoteManager = (props: StatusQuoteManagerProps) => {\n-  const status = useAppSelector((state) => state.statuses.get(props.id));\n+  const status = useAppSelector((state) => {\n+    const status = state.statuses.get(props.id);\n+    const reblogId = status?.get('reblog') as string | undefined;\n+    return reblogId ? state.statuses.get(reblogId) : status;",
        "comment_created_at": "2025-05-22T14:01:41+00:00",
        "comment_author": "diondiondion",
        "comment_body": "Would this be easier to read with a single call to `statuses.get()`?\r\n\r\n```suggestion\r\n    const reblogId = status?.get('reblog') as string | undefined;\r\n    return state.statuses.get(reblogId ?? props.id);\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2102695698",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34773,
        "pr_file": "app/javascript/mastodon/components/status_quoted.tsx",
        "discussion_id": "2102650954",
        "commented_code": "@@ -158,7 +158,11 @@ interface StatusQuoteManagerProps {\n  */\n \n export const StatusQuoteManager = (props: StatusQuoteManagerProps) => {\n-  const status = useAppSelector((state) => state.statuses.get(props.id));\n+  const status = useAppSelector((state) => {\n+    const status = state.statuses.get(props.id);\n+    const reblogId = status?.get('reblog') as string | undefined;\n+    return reblogId ? state.statuses.get(reblogId) : status;",
        "comment_created_at": "2025-05-22T14:21:29+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "Where is the `status` coming from in this snippet?",
        "pr_file_module": null
      },
      {
        "comment_id": "2102791274",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34773,
        "pr_file": "app/javascript/mastodon/components/status_quoted.tsx",
        "discussion_id": "2102650954",
        "commented_code": "@@ -158,7 +158,11 @@ interface StatusQuoteManagerProps {\n  */\n \n export const StatusQuoteManager = (props: StatusQuoteManagerProps) => {\n-  const status = useAppSelector((state) => state.statuses.get(props.id));\n+  const status = useAppSelector((state) => {\n+    const status = state.statuses.get(props.id);\n+    const reblogId = status?.get('reblog') as string | undefined;\n+    return reblogId ? state.statuses.get(reblogId) : status;",
        "comment_created_at": "2025-05-22T15:03:13+00:00",
        "comment_author": "diondiondion",
        "comment_body": "Sorry, looks like my brain is still a bit foggy from that cold. Disregard the comment \ud83e\udd26 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2037762577",
    "pr_number": 34393,
    "pr_file": "app/javascript/mastodon/features/ui/components/hashtag_menu_controller.tsx",
    "created_at": "2025-04-10T16:04:16+00:00",
    "commented_code": "+import { useEffect, useRef, useState, useCallback, useMemo } from 'react';\n+\n+import { useIntl, defineMessages } from 'react-intl';\n+\n+import { useLocation } from 'react-router-dom';\n+\n+import Overlay from 'react-overlays/Overlay';\n+import type {\n+  OffsetValue,\n+  UsePopperOptions,\n+} from 'react-overlays/esm/usePopper';\n+\n+import { DropdownMenu } from 'mastodon/components/dropdown_menu';\n+import { useAppSelector } from 'mastodon/store';\n+\n+const messages = defineMessages({\n+  browseHashtag: { id: '', defaultMessage: 'Browse posts in #{hashtag}' },\n+  browseHashtagFromAccount: {\n+    id: '',\n+    defaultMessage: 'Browse posts from @{name} in #{hashtag}',\n+  },\n+  muteHashtag: { id: '', defaultMessage: 'Mute #{hashtag}' },\n+});\n+\n+const offset = [5, 5] as OffsetValue;\n+const popperConfig = { strategy: 'fixed' } as UsePopperOptions;\n+\n+const isHashtagLink = (\n+  element: HTMLAnchorElement | null,\n+): element is HTMLAnchorElement => {\n+  if (!element) {\n+    return false;\n+  }\n+\n+  return element.matches('[data-menu-hashtag]');\n+};\n+\n+interface Params {\n+  hashtag?: string;\n+  accountId?: string;\n+}\n+\n+export const HashtagMenuController: React.FC = () => {\n+  const intl = useIntl();\n+  const [open, setOpen] = useState(false);\n+  const [params, setParams] = useState<Params>({});\n+  const targetRef = useRef<HTMLAnchorElement | null>(null);\n+  const location = useLocation();\n+  const account = useAppSelector((state) =>\n+    params.accountId ? state.accounts.get(params.accountId) : undefined,\n+  );\n+\n+  useEffect(() => {\n+    setOpen(false);\n+    targetRef.current = null;\n+  }, [setOpen, location]);\n+\n+  useEffect(() => {\n+    const handleClick = (e: MouseEvent) => {\n+      const target = (e.target as HTMLElement).closest('a');\n+\n+      if (e.button !== 0 || e.ctrlKey || e.metaKey) {\n+        return;\n+      }\n+\n+      if (isHashtagLink(target)) {",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2037762577",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34393,
        "pr_file": "app/javascript/mastodon/features/ui/components/hashtag_menu_controller.tsx",
        "discussion_id": "2037762577",
        "commented_code": "@@ -0,0 +1,157 @@\n+import { useEffect, useRef, useState, useCallback, useMemo } from 'react';\n+\n+import { useIntl, defineMessages } from 'react-intl';\n+\n+import { useLocation } from 'react-router-dom';\n+\n+import Overlay from 'react-overlays/Overlay';\n+import type {\n+  OffsetValue,\n+  UsePopperOptions,\n+} from 'react-overlays/esm/usePopper';\n+\n+import { DropdownMenu } from 'mastodon/components/dropdown_menu';\n+import { useAppSelector } from 'mastodon/store';\n+\n+const messages = defineMessages({\n+  browseHashtag: { id: '', defaultMessage: 'Browse posts in #{hashtag}' },\n+  browseHashtagFromAccount: {\n+    id: '',\n+    defaultMessage: 'Browse posts from @{name} in #{hashtag}',\n+  },\n+  muteHashtag: { id: '', defaultMessage: 'Mute #{hashtag}' },\n+});\n+\n+const offset = [5, 5] as OffsetValue;\n+const popperConfig = { strategy: 'fixed' } as UsePopperOptions;\n+\n+const isHashtagLink = (\n+  element: HTMLAnchorElement | null,\n+): element is HTMLAnchorElement => {\n+  if (!element) {\n+    return false;\n+  }\n+\n+  return element.matches('[data-menu-hashtag]');\n+};\n+\n+interface Params {\n+  hashtag?: string;\n+  accountId?: string;\n+}\n+\n+export const HashtagMenuController: React.FC = () => {\n+  const intl = useIntl();\n+  const [open, setOpen] = useState(false);\n+  const [params, setParams] = useState<Params>({});\n+  const targetRef = useRef<HTMLAnchorElement | null>(null);\n+  const location = useLocation();\n+  const account = useAppSelector((state) =>\n+    params.accountId ? state.accounts.get(params.accountId) : undefined,\n+  );\n+\n+  useEffect(() => {\n+    setOpen(false);\n+    targetRef.current = null;\n+  }, [setOpen, location]);\n+\n+  useEffect(() => {\n+    const handleClick = (e: MouseEvent) => {\n+      const target = (e.target as HTMLElement).closest('a');\n+\n+      if (e.button !== 0 || e.ctrlKey || e.metaKey) {\n+        return;\n+      }\n+\n+      if (isHashtagLink(target)) {",
        "comment_created_at": "2025-04-10T16:04:16+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "i generally favor something like `if (!isHashtagLink(target)) { return; }` to keep the nested conditionals to a minimum and improve readability of the code.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1963665595",
    "pr_number": 33956,
    "pr_file": "app/javascript/mastodon/features/account_timeline/components/header.tsx",
    "created_at": "2025-02-20T14:25:44+00:00",
    "commented_code": "+import { useCallback, useMemo } from 'react';\n+\n+import { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n+\n+import classNames from 'classnames';\n+import { Helmet } from 'react-helmet';\n+import { NavLink } from 'react-router-dom';\n+\n+import { useLinks } from '@/hooks/useLinks';\n+import CheckIcon from '@/material-icons/400-24px/check.svg?react';\n+import LockIcon from '@/material-icons/400-24px/lock.svg?react';\n+import MoreHorizIcon from '@/material-icons/400-24px/more_horiz.svg?react';\n+import NotificationsIcon from '@/material-icons/400-24px/notifications.svg?react';\n+import NotificationsActiveIcon from '@/material-icons/400-24px/notifications_active-fill.svg?react';\n+import ShareIcon from '@/material-icons/400-24px/share.svg?react';\n+import {\n+  followAccount,\n+  unblockAccount,\n+  unmuteAccount,\n+  pinAccount,\n+  unpinAccount,\n+} from 'mastodon/actions/accounts';\n+import { initBlockModal } from 'mastodon/actions/blocks';\n+import { mentionCompose, directCompose } from 'mastodon/actions/compose';\n+import {\n+  initDomainBlockModal,\n+  unblockDomain,\n+} from 'mastodon/actions/domain_blocks';\n+import { openModal } from 'mastodon/actions/modal';\n+import { initMuteModal } from 'mastodon/actions/mutes';\n+import { initReport } from 'mastodon/actions/reports';\n+import { Avatar } from 'mastodon/components/avatar';\n+import { Badge, AutomatedBadge, GroupBadge } from 'mastodon/components/badge';\n+import { Button } from 'mastodon/components/button';\n+import { CopyIconButton } from 'mastodon/components/copy_icon_button';\n+import {\n+  FollowersCounter,\n+  FollowingCounter,\n+  StatusesCounter,\n+} from 'mastodon/components/counters';\n+import { Icon } from 'mastodon/components/icon';\n+import { IconButton } from 'mastodon/components/icon_button';\n+import { LoadingIndicator } from 'mastodon/components/loading_indicator';\n+import { ShortNumber } from 'mastodon/components/short_number';\n+import DropdownMenuContainer from 'mastodon/containers/dropdown_menu_container';\n+import { DomainPill } from 'mastodon/features/account/components/domain_pill';\n+import AccountNoteContainer from 'mastodon/features/account/containers/account_note_container';\n+import FollowRequestNoteContainer from 'mastodon/features/account/containers/follow_request_note_container';\n+import { useIdentity } from 'mastodon/identity_context';\n+import { autoPlayGif, me, domain as localDomain } from 'mastodon/initial_state';\n+import type { Account } from 'mastodon/models/account';\n+import type { DropdownMenu } from 'mastodon/models/dropdown_menu';\n+import type { Relationship } from 'mastodon/models/relationship';\n+import {\n+  PERMISSION_MANAGE_USERS,\n+  PERMISSION_MANAGE_FEDERATION,\n+} from 'mastodon/permissions';\n+import { getAccountHidden } from 'mastodon/selectors/accounts';\n+import { useAppSelector, useAppDispatch } from 'mastodon/store';\n+\n+import MemorialNote from './memorial_note';\n+import MovedNote from './moved_note';\n+\n+const messages = defineMessages({\n+  unfollow: { id: 'account.unfollow', defaultMessage: 'Unfollow' },\n+  follow: { id: 'account.follow', defaultMessage: 'Follow' },\n+  followBack: { id: 'account.follow_back', defaultMessage: 'Follow back' },\n+  mutual: { id: 'account.mutual', defaultMessage: 'Mutual' },\n+  cancel_follow_request: {\n+    id: 'account.cancel_follow_request',\n+    defaultMessage: 'Withdraw follow request',\n+  },\n+  requested: {\n+    id: 'account.requested',\n+    defaultMessage: 'Awaiting approval. Click to cancel follow request',\n+  },\n+  unblock: { id: 'account.unblock', defaultMessage: 'Unblock @{name}' },\n+  edit_profile: { id: 'account.edit_profile', defaultMessage: 'Edit profile' },\n+  linkVerifiedOn: {\n+    id: 'account.link_verified_on',\n+    defaultMessage: 'Ownership of this link was checked on {date}',\n+  },\n+  account_locked: {\n+    id: 'account.locked_info',\n+    defaultMessage:\n+      'This account privacy status is set to locked. The owner manually reviews who can follow them.',\n+  },\n+  mention: { id: 'account.mention', defaultMessage: 'Mention @{name}' },\n+  direct: { id: 'account.direct', defaultMessage: 'Privately mention @{name}' },\n+  unmute: { id: 'account.unmute', defaultMessage: 'Unmute @{name}' },\n+  block: { id: 'account.block', defaultMessage: 'Block @{name}' },\n+  mute: { id: 'account.mute', defaultMessage: 'Mute @{name}' },\n+  report: { id: 'account.report', defaultMessage: 'Report @{name}' },\n+  share: { id: 'account.share', defaultMessage: \"Share @{name}'s profile\" },\n+  copy: { id: 'account.copy', defaultMessage: 'Copy link to profile' },\n+  media: { id: 'account.media', defaultMessage: 'Media' },\n+  blockDomain: {\n+    id: 'account.block_domain',\n+    defaultMessage: 'Block domain {domain}',\n+  },\n+  unblockDomain: {\n+    id: 'account.unblock_domain',\n+    defaultMessage: 'Unblock domain {domain}',\n+  },\n+  hideReblogs: {\n+    id: 'account.hide_reblogs',\n+    defaultMessage: 'Hide boosts from @{name}',\n+  },\n+  showReblogs: {\n+    id: 'account.show_reblogs',\n+    defaultMessage: 'Show boosts from @{name}',\n+  },\n+  enableNotifications: {\n+    id: 'account.enable_notifications',\n+    defaultMessage: 'Notify me when @{name} posts',\n+  },\n+  disableNotifications: {\n+    id: 'account.disable_notifications',\n+    defaultMessage: 'Stop notifying me when @{name} posts',\n+  },\n+  pins: { id: 'navigation_bar.pins', defaultMessage: 'Pinned posts' },\n+  preferences: {\n+    id: 'navigation_bar.preferences',\n+    defaultMessage: 'Preferences',\n+  },\n+  follow_requests: {\n+    id: 'navigation_bar.follow_requests',\n+    defaultMessage: 'Follow requests',\n+  },\n+  favourites: { id: 'navigation_bar.favourites', defaultMessage: 'Favorites' },\n+  lists: { id: 'navigation_bar.lists', defaultMessage: 'Lists' },\n+  followed_tags: {\n+    id: 'navigation_bar.followed_tags',\n+    defaultMessage: 'Followed hashtags',\n+  },\n+  blocks: { id: 'navigation_bar.blocks', defaultMessage: 'Blocked users' },\n+  domain_blocks: {\n+    id: 'navigation_bar.domain_blocks',\n+    defaultMessage: 'Blocked domains',\n+  },\n+  mutes: { id: 'navigation_bar.mutes', defaultMessage: 'Muted users' },\n+  endorse: { id: 'account.endorse', defaultMessage: 'Feature on profile' },\n+  unendorse: {\n+    id: 'account.unendorse',\n+    defaultMessage: \"Don't feature on profile\",\n+  },\n+  add_or_remove_from_list: {\n+    id: 'account.add_or_remove_from_list',\n+    defaultMessage: 'Add or Remove from lists',\n+  },\n+  admin_account: {\n+    id: 'status.admin_account',\n+    defaultMessage: 'Open moderation interface for @{name}',\n+  },\n+  admin_domain: {\n+    id: 'status.admin_domain',\n+    defaultMessage: 'Open moderation interface for {domain}',\n+  },\n+  languages: {\n+    id: 'account.languages',\n+    defaultMessage: 'Change subscribed languages',\n+  },\n+  openOriginalPage: {\n+    id: 'account.open_original_page',\n+    defaultMessage: 'Open original page',\n+  },\n+});\n+\n+const titleFromAccount = (account: Account) => {\n+  const displayName = account.display_name;\n+  const acct =\n+    account.acct === account.username\n+      ? `${account.username}@${localDomain}`\n+      : account.acct;\n+  const prefix =\n+    displayName.trim().length === 0 ? account.username : displayName;\n+\n+  return `${prefix} (@${acct})`;\n+};\n+\n+const messageForFollowButton = (relationship?: Relationship) => {\n+  if (!relationship) return messages.follow;\n+\n+  if (relationship.get('following') && relationship.get('followed_by')) {\n+    return messages.mutual;\n+  } else if (relationship.get('following') || relationship.get('requested')) {\n+    return messages.unfollow;\n+  } else if (relationship.get('followed_by')) {\n+    return messages.followBack;\n+  } else {\n+    return messages.follow;\n+  }\n+};\n+\n+const dateFormatOptions: Intl.DateTimeFormatOptions = {\n+  month: 'short',\n+  day: 'numeric',\n+  year: 'numeric',\n+  hour: '2-digit',\n+  minute: '2-digit',\n+};\n+\n+export const Header: React.FC<{\n+  accountId: string;\n+  hideTabs?: boolean;\n+}> = ({ accountId, hideTabs }) => {\n+  const dispatch = useAppDispatch();\n+  const intl = useIntl();\n+  const { signedIn, permissions } = useIdentity();\n+  const account = useAppSelector((state) => state.accounts.get(accountId));\n+  const relationship = useAppSelector((state) =>\n+    state.relationships.get(accountId),\n+  );\n+  const hidden = useAppSelector((state) => getAccountHidden(state, accountId));\n+  const handleLinkClick = useLinks();\n+\n+  const handleFollow = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    if (relationship?.following || relationship?.requested) {\n+      dispatch(\n+        openModal({ modalType: 'CONFIRM_UNFOLLOW', modalProps: { account } }),\n+      );\n+    } else {\n+      dispatch(followAccount(account.id));\n+    }\n+  }, [dispatch, account, relationship]);\n+\n+  const handleBlock = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    if (relationship?.blocking) {\n+      dispatch(unblockAccount(account.id));\n+    } else {\n+      dispatch(initBlockModal(account));\n+    }\n+  }, [dispatch, account, relationship]);\n+\n+  const handleMention = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    dispatch(mentionCompose(account));\n+  }, [dispatch, account]);\n+\n+  const handleDirect = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    dispatch(directCompose(account));\n+  }, [dispatch, account]);\n+\n+  const handleReport = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    dispatch(initReport(account));\n+  }, [dispatch, account]);\n+\n+  const handleReblogToggle = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    if (relationship?.showing_reblogs) {\n+      dispatch(followAccount(account.id, { reblogs: false }));\n+    } else {\n+      dispatch(followAccount(account.id, { reblogs: true }));\n+    }\n+  }, [dispatch, account, relationship]);\n+\n+  const handleNotifyToggle = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    if (relationship?.notifying) {\n+      dispatch(followAccount(account.id, { notify: false }));\n+    } else {\n+      dispatch(followAccount(account.id, { notify: true }));\n+    }\n+  }, [dispatch, account, relationship]);\n+\n+  const handleMute = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    if (relationship?.muting) {\n+      dispatch(unmuteAccount(account.id));\n+    } else {\n+      dispatch(initMuteModal(account));\n+    }\n+  }, [dispatch, account, relationship]);\n+\n+  const handleBlockDomain = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    dispatch(initDomainBlockModal(account));\n+  }, [dispatch, account]);\n+\n+  const handleUnblockDomain = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    const domain = account.acct.split('@')[1];\n+\n+    if (!domain) {\n+      return;\n+    }\n+\n+    dispatch(unblockDomain(domain));\n+  }, [dispatch, account]);\n+\n+  const handleEndorseToggle = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    if (relationship?.endorsed) {\n+      dispatch(unpinAccount(account.id));\n+    } else {\n+      dispatch(pinAccount(account.id));\n+    }\n+  }, [dispatch, account, relationship]);\n+\n+  const handleAddToList = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    dispatch(\n+      openModal({\n+        modalType: 'LIST_ADDER',\n+        modalProps: {\n+          accountId: account.id,\n+        },\n+      }),\n+    );\n+  }, [dispatch, account]);\n+\n+  const handleChangeLanguages = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    dispatch(\n+      openModal({\n+        modalType: 'SUBSCRIBED_LANGUAGES',\n+        modalProps: {\n+          accountId: account.id,\n+        },\n+      }),\n+    );\n+  }, [dispatch, account]);\n+\n+  const handleInteractionModal = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    dispatch(\n+      openModal({\n+        modalType: 'INTERACTION',\n+        modalProps: {\n+          type: 'follow',\n+          accountId: account.id,\n+          url: account.uri,\n+        },\n+      }),\n+    );\n+  }, [dispatch, account]);\n+\n+  const handleOpenAvatar = useCallback(\n+    (e: React.MouseEvent) => {\n+      if (e.button !== 0 || e.ctrlKey || e.metaKey) {\n+        return;\n+      }\n+\n+      e.preventDefault();\n+\n+      if (!account) {\n+        return;\n+      }\n+\n+      dispatch(\n+        openModal({\n+          modalType: 'IMAGE',\n+          modalProps: {\n+            src: account.avatar,\n+            alt: '',\n+          },\n+        }),\n+      );\n+    },\n+    [dispatch, account],\n+  );\n+\n+  const handleShare = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    void navigator.share({\n+      url: account.url,\n+    });\n+  }, [account]);\n+\n+  const handleEditProfile = useCallback(() => {\n+    window.open('/settings/profile', '_blank');\n+  }, []);\n+\n+  const handleMouseEnter = useCallback(\n+    ({ currentTarget }: React.MouseEvent) => {\n+      if (autoPlayGif) {\n+        return;\n+      }\n+\n+      const emojis =\n+        currentTarget.querySelectorAll<HTMLImageElement>('.custom-emoji');\n+\n+      for (const emoji of emojis) {",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1963665595",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 33956,
        "pr_file": "app/javascript/mastodon/features/account_timeline/components/header.tsx",
        "discussion_id": "1963665595",
        "commented_code": "@@ -0,0 +1,1059 @@\n+import { useCallback, useMemo } from 'react';\n+\n+import { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n+\n+import classNames from 'classnames';\n+import { Helmet } from 'react-helmet';\n+import { NavLink } from 'react-router-dom';\n+\n+import { useLinks } from '@/hooks/useLinks';\n+import CheckIcon from '@/material-icons/400-24px/check.svg?react';\n+import LockIcon from '@/material-icons/400-24px/lock.svg?react';\n+import MoreHorizIcon from '@/material-icons/400-24px/more_horiz.svg?react';\n+import NotificationsIcon from '@/material-icons/400-24px/notifications.svg?react';\n+import NotificationsActiveIcon from '@/material-icons/400-24px/notifications_active-fill.svg?react';\n+import ShareIcon from '@/material-icons/400-24px/share.svg?react';\n+import {\n+  followAccount,\n+  unblockAccount,\n+  unmuteAccount,\n+  pinAccount,\n+  unpinAccount,\n+} from 'mastodon/actions/accounts';\n+import { initBlockModal } from 'mastodon/actions/blocks';\n+import { mentionCompose, directCompose } from 'mastodon/actions/compose';\n+import {\n+  initDomainBlockModal,\n+  unblockDomain,\n+} from 'mastodon/actions/domain_blocks';\n+import { openModal } from 'mastodon/actions/modal';\n+import { initMuteModal } from 'mastodon/actions/mutes';\n+import { initReport } from 'mastodon/actions/reports';\n+import { Avatar } from 'mastodon/components/avatar';\n+import { Badge, AutomatedBadge, GroupBadge } from 'mastodon/components/badge';\n+import { Button } from 'mastodon/components/button';\n+import { CopyIconButton } from 'mastodon/components/copy_icon_button';\n+import {\n+  FollowersCounter,\n+  FollowingCounter,\n+  StatusesCounter,\n+} from 'mastodon/components/counters';\n+import { Icon } from 'mastodon/components/icon';\n+import { IconButton } from 'mastodon/components/icon_button';\n+import { LoadingIndicator } from 'mastodon/components/loading_indicator';\n+import { ShortNumber } from 'mastodon/components/short_number';\n+import DropdownMenuContainer from 'mastodon/containers/dropdown_menu_container';\n+import { DomainPill } from 'mastodon/features/account/components/domain_pill';\n+import AccountNoteContainer from 'mastodon/features/account/containers/account_note_container';\n+import FollowRequestNoteContainer from 'mastodon/features/account/containers/follow_request_note_container';\n+import { useIdentity } from 'mastodon/identity_context';\n+import { autoPlayGif, me, domain as localDomain } from 'mastodon/initial_state';\n+import type { Account } from 'mastodon/models/account';\n+import type { DropdownMenu } from 'mastodon/models/dropdown_menu';\n+import type { Relationship } from 'mastodon/models/relationship';\n+import {\n+  PERMISSION_MANAGE_USERS,\n+  PERMISSION_MANAGE_FEDERATION,\n+} from 'mastodon/permissions';\n+import { getAccountHidden } from 'mastodon/selectors/accounts';\n+import { useAppSelector, useAppDispatch } from 'mastodon/store';\n+\n+import MemorialNote from './memorial_note';\n+import MovedNote from './moved_note';\n+\n+const messages = defineMessages({\n+  unfollow: { id: 'account.unfollow', defaultMessage: 'Unfollow' },\n+  follow: { id: 'account.follow', defaultMessage: 'Follow' },\n+  followBack: { id: 'account.follow_back', defaultMessage: 'Follow back' },\n+  mutual: { id: 'account.mutual', defaultMessage: 'Mutual' },\n+  cancel_follow_request: {\n+    id: 'account.cancel_follow_request',\n+    defaultMessage: 'Withdraw follow request',\n+  },\n+  requested: {\n+    id: 'account.requested',\n+    defaultMessage: 'Awaiting approval. Click to cancel follow request',\n+  },\n+  unblock: { id: 'account.unblock', defaultMessage: 'Unblock @{name}' },\n+  edit_profile: { id: 'account.edit_profile', defaultMessage: 'Edit profile' },\n+  linkVerifiedOn: {\n+    id: 'account.link_verified_on',\n+    defaultMessage: 'Ownership of this link was checked on {date}',\n+  },\n+  account_locked: {\n+    id: 'account.locked_info',\n+    defaultMessage:\n+      'This account privacy status is set to locked. The owner manually reviews who can follow them.',\n+  },\n+  mention: { id: 'account.mention', defaultMessage: 'Mention @{name}' },\n+  direct: { id: 'account.direct', defaultMessage: 'Privately mention @{name}' },\n+  unmute: { id: 'account.unmute', defaultMessage: 'Unmute @{name}' },\n+  block: { id: 'account.block', defaultMessage: 'Block @{name}' },\n+  mute: { id: 'account.mute', defaultMessage: 'Mute @{name}' },\n+  report: { id: 'account.report', defaultMessage: 'Report @{name}' },\n+  share: { id: 'account.share', defaultMessage: \"Share @{name}'s profile\" },\n+  copy: { id: 'account.copy', defaultMessage: 'Copy link to profile' },\n+  media: { id: 'account.media', defaultMessage: 'Media' },\n+  blockDomain: {\n+    id: 'account.block_domain',\n+    defaultMessage: 'Block domain {domain}',\n+  },\n+  unblockDomain: {\n+    id: 'account.unblock_domain',\n+    defaultMessage: 'Unblock domain {domain}',\n+  },\n+  hideReblogs: {\n+    id: 'account.hide_reblogs',\n+    defaultMessage: 'Hide boosts from @{name}',\n+  },\n+  showReblogs: {\n+    id: 'account.show_reblogs',\n+    defaultMessage: 'Show boosts from @{name}',\n+  },\n+  enableNotifications: {\n+    id: 'account.enable_notifications',\n+    defaultMessage: 'Notify me when @{name} posts',\n+  },\n+  disableNotifications: {\n+    id: 'account.disable_notifications',\n+    defaultMessage: 'Stop notifying me when @{name} posts',\n+  },\n+  pins: { id: 'navigation_bar.pins', defaultMessage: 'Pinned posts' },\n+  preferences: {\n+    id: 'navigation_bar.preferences',\n+    defaultMessage: 'Preferences',\n+  },\n+  follow_requests: {\n+    id: 'navigation_bar.follow_requests',\n+    defaultMessage: 'Follow requests',\n+  },\n+  favourites: { id: 'navigation_bar.favourites', defaultMessage: 'Favorites' },\n+  lists: { id: 'navigation_bar.lists', defaultMessage: 'Lists' },\n+  followed_tags: {\n+    id: 'navigation_bar.followed_tags',\n+    defaultMessage: 'Followed hashtags',\n+  },\n+  blocks: { id: 'navigation_bar.blocks', defaultMessage: 'Blocked users' },\n+  domain_blocks: {\n+    id: 'navigation_bar.domain_blocks',\n+    defaultMessage: 'Blocked domains',\n+  },\n+  mutes: { id: 'navigation_bar.mutes', defaultMessage: 'Muted users' },\n+  endorse: { id: 'account.endorse', defaultMessage: 'Feature on profile' },\n+  unendorse: {\n+    id: 'account.unendorse',\n+    defaultMessage: \"Don't feature on profile\",\n+  },\n+  add_or_remove_from_list: {\n+    id: 'account.add_or_remove_from_list',\n+    defaultMessage: 'Add or Remove from lists',\n+  },\n+  admin_account: {\n+    id: 'status.admin_account',\n+    defaultMessage: 'Open moderation interface for @{name}',\n+  },\n+  admin_domain: {\n+    id: 'status.admin_domain',\n+    defaultMessage: 'Open moderation interface for {domain}',\n+  },\n+  languages: {\n+    id: 'account.languages',\n+    defaultMessage: 'Change subscribed languages',\n+  },\n+  openOriginalPage: {\n+    id: 'account.open_original_page',\n+    defaultMessage: 'Open original page',\n+  },\n+});\n+\n+const titleFromAccount = (account: Account) => {\n+  const displayName = account.display_name;\n+  const acct =\n+    account.acct === account.username\n+      ? `${account.username}@${localDomain}`\n+      : account.acct;\n+  const prefix =\n+    displayName.trim().length === 0 ? account.username : displayName;\n+\n+  return `${prefix} (@${acct})`;\n+};\n+\n+const messageForFollowButton = (relationship?: Relationship) => {\n+  if (!relationship) return messages.follow;\n+\n+  if (relationship.get('following') && relationship.get('followed_by')) {\n+    return messages.mutual;\n+  } else if (relationship.get('following') || relationship.get('requested')) {\n+    return messages.unfollow;\n+  } else if (relationship.get('followed_by')) {\n+    return messages.followBack;\n+  } else {\n+    return messages.follow;\n+  }\n+};\n+\n+const dateFormatOptions: Intl.DateTimeFormatOptions = {\n+  month: 'short',\n+  day: 'numeric',\n+  year: 'numeric',\n+  hour: '2-digit',\n+  minute: '2-digit',\n+};\n+\n+export const Header: React.FC<{\n+  accountId: string;\n+  hideTabs?: boolean;\n+}> = ({ accountId, hideTabs }) => {\n+  const dispatch = useAppDispatch();\n+  const intl = useIntl();\n+  const { signedIn, permissions } = useIdentity();\n+  const account = useAppSelector((state) => state.accounts.get(accountId));\n+  const relationship = useAppSelector((state) =>\n+    state.relationships.get(accountId),\n+  );\n+  const hidden = useAppSelector((state) => getAccountHidden(state, accountId));\n+  const handleLinkClick = useLinks();\n+\n+  const handleFollow = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    if (relationship?.following || relationship?.requested) {\n+      dispatch(\n+        openModal({ modalType: 'CONFIRM_UNFOLLOW', modalProps: { account } }),\n+      );\n+    } else {\n+      dispatch(followAccount(account.id));\n+    }\n+  }, [dispatch, account, relationship]);\n+\n+  const handleBlock = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    if (relationship?.blocking) {\n+      dispatch(unblockAccount(account.id));\n+    } else {\n+      dispatch(initBlockModal(account));\n+    }\n+  }, [dispatch, account, relationship]);\n+\n+  const handleMention = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    dispatch(mentionCompose(account));\n+  }, [dispatch, account]);\n+\n+  const handleDirect = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    dispatch(directCompose(account));\n+  }, [dispatch, account]);\n+\n+  const handleReport = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    dispatch(initReport(account));\n+  }, [dispatch, account]);\n+\n+  const handleReblogToggle = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    if (relationship?.showing_reblogs) {\n+      dispatch(followAccount(account.id, { reblogs: false }));\n+    } else {\n+      dispatch(followAccount(account.id, { reblogs: true }));\n+    }\n+  }, [dispatch, account, relationship]);\n+\n+  const handleNotifyToggle = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    if (relationship?.notifying) {\n+      dispatch(followAccount(account.id, { notify: false }));\n+    } else {\n+      dispatch(followAccount(account.id, { notify: true }));\n+    }\n+  }, [dispatch, account, relationship]);\n+\n+  const handleMute = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    if (relationship?.muting) {\n+      dispatch(unmuteAccount(account.id));\n+    } else {\n+      dispatch(initMuteModal(account));\n+    }\n+  }, [dispatch, account, relationship]);\n+\n+  const handleBlockDomain = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    dispatch(initDomainBlockModal(account));\n+  }, [dispatch, account]);\n+\n+  const handleUnblockDomain = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    const domain = account.acct.split('@')[1];\n+\n+    if (!domain) {\n+      return;\n+    }\n+\n+    dispatch(unblockDomain(domain));\n+  }, [dispatch, account]);\n+\n+  const handleEndorseToggle = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    if (relationship?.endorsed) {\n+      dispatch(unpinAccount(account.id));\n+    } else {\n+      dispatch(pinAccount(account.id));\n+    }\n+  }, [dispatch, account, relationship]);\n+\n+  const handleAddToList = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    dispatch(\n+      openModal({\n+        modalType: 'LIST_ADDER',\n+        modalProps: {\n+          accountId: account.id,\n+        },\n+      }),\n+    );\n+  }, [dispatch, account]);\n+\n+  const handleChangeLanguages = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    dispatch(\n+      openModal({\n+        modalType: 'SUBSCRIBED_LANGUAGES',\n+        modalProps: {\n+          accountId: account.id,\n+        },\n+      }),\n+    );\n+  }, [dispatch, account]);\n+\n+  const handleInteractionModal = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    dispatch(\n+      openModal({\n+        modalType: 'INTERACTION',\n+        modalProps: {\n+          type: 'follow',\n+          accountId: account.id,\n+          url: account.uri,\n+        },\n+      }),\n+    );\n+  }, [dispatch, account]);\n+\n+  const handleOpenAvatar = useCallback(\n+    (e: React.MouseEvent) => {\n+      if (e.button !== 0 || e.ctrlKey || e.metaKey) {\n+        return;\n+      }\n+\n+      e.preventDefault();\n+\n+      if (!account) {\n+        return;\n+      }\n+\n+      dispatch(\n+        openModal({\n+          modalType: 'IMAGE',\n+          modalProps: {\n+            src: account.avatar,\n+            alt: '',\n+          },\n+        }),\n+      );\n+    },\n+    [dispatch, account],\n+  );\n+\n+  const handleShare = useCallback(() => {\n+    if (!account) {\n+      return;\n+    }\n+\n+    void navigator.share({\n+      url: account.url,\n+    });\n+  }, [account]);\n+\n+  const handleEditProfile = useCallback(() => {\n+    window.open('/settings/profile', '_blank');\n+  }, []);\n+\n+  const handleMouseEnter = useCallback(\n+    ({ currentTarget }: React.MouseEvent) => {\n+      if (autoPlayGif) {\n+        return;\n+      }\n+\n+      const emojis =\n+        currentTarget.querySelectorAll<HTMLImageElement>('.custom-emoji');\n+\n+      for (const emoji of emojis) {",
        "comment_created_at": "2025-02-20T14:25:44+00:00",
        "comment_author": "renchap",
        "comment_body": "This works, but a more modern way is to use `querySelectorAll(\u2026).forEach(element => { \u2026 })`",
        "pr_file_module": null
      }
    ]
  }
]