[
  {
    "discussion_id": "1837867137",
    "pr_number": 32851,
    "pr_file": "streaming/index.js",
    "created_at": "2024-11-12T10:34:07+00:00",
    "commented_code": "});\n \n   const app = express();\n+  const trustProxy = proxyaddr.compile(\n+    process.env.TRUSTED_PROXY_IP ?\n+      process.env.TRUSTED_PROXY_IP.split(/(?:\\s*,\\s*|\\s+)/) :\n+      ['loopback', 'uniquelocal']\n+  );\n \n-  app.set('trust proxy', process.env.TRUSTED_PROXY_IP ? process.env.TRUSTED_PROXY_IP.split(/(?:\\s*,\\s*|\\s+)/) : 'loopback,uniquelocal');",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1837867137",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 32851,
        "pr_file": "streaming/index.js",
        "discussion_id": "1837867137",
        "commented_code": "@@ -145,8 +147,13 @@ const startServer = async () => {\n   });\n \n   const app = express();\n+  const trustProxy = proxyaddr.compile(\n+    process.env.TRUSTED_PROXY_IP ?\n+      process.env.TRUSTED_PROXY_IP.split(/(?:\\s*,\\s*|\\s+)/) :\n+      ['loopback', 'uniquelocal']\n+  );\n \n-  app.set('trust proxy', process.env.TRUSTED_PROXY_IP ? process.env.TRUSTED_PROXY_IP.split(/(?:\\s*,\\s*|\\s+)/) : 'loopback,uniquelocal');",
        "comment_created_at": "2024-11-12T10:34:07+00:00",
        "comment_author": "ThisIsMissEm",
        "comment_body": "This default of a string of multiple values actually caused proxyaddr to throw a server crashing error if the req.ip property was ever accessed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1837868513",
    "pr_number": 32851,
    "pr_file": "streaming/index.js",
    "created_at": "2024-11-12T10:35:02+00:00",
    "commented_code": "// logger. This decorates the `request` object.\n     attachWebsocketHttpLogger(request);\n \n+    // Define the `request.ip` property\n+    Object.defineProperty(request, 'ip', {\n+      configurable: true,\n+      enumerable: true,\n+      get() {\n+        return proxyaddr(this, trustProxy);\n+      }\n+    });",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "1837868513",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 32851,
        "pr_file": "streaming/index.js",
        "discussion_id": "1837868513",
        "commented_code": "@@ -160,6 +167,15 @@ const startServer = async () => {\n     // logger. This decorates the `request` object.\n     attachWebsocketHttpLogger(request);\n \n+    // Define the `request.ip` property\n+    Object.defineProperty(request, 'ip', {\n+      configurable: true,\n+      enumerable: true,\n+      get() {\n+        return proxyaddr(this, trustProxy);\n+      }\n+    });",
        "comment_created_at": "2024-11-12T10:35:02+00:00",
        "comment_author": "ThisIsMissEm",
        "comment_body": "This is exactly how Express adds ip onto requests",
        "pr_file_module": null
      },
      {
        "comment_id": "1837875442",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 32851,
        "pr_file": "streaming/index.js",
        "discussion_id": "1837868513",
        "commented_code": "@@ -160,6 +167,15 @@ const startServer = async () => {\n     // logger. This decorates the `request` object.\n     attachWebsocketHttpLogger(request);\n \n+    // Define the `request.ip` property\n+    Object.defineProperty(request, 'ip', {\n+      configurable: true,\n+      enumerable: true,\n+      get() {\n+        return proxyaddr(this, trustProxy);\n+      }\n+    });",
        "comment_created_at": "2024-11-12T10:39:53+00:00",
        "comment_author": "ThisIsMissEm",
        "comment_body": "Having request.ip both for http & websocket would allow us to support IP Blocks in streaming as well, should we want that",
        "pr_file_module": null
      }
    ]
  }
]