[
  {
    "discussion_id": "2137318643",
    "pr_number": 34910,
    "pr_file": "app/javascript/mastodon/features/ui/components/list_panel.tsx",
    "created_at": "2025-06-10T08:58:30+00:00",
    "commented_code": "+import { useEffect, useState, useCallback, useId } from 'react';\n+\n+import { useIntl, defineMessages } from 'react-intl';\n+\n+import ArrowDropDownIcon from '@/material-icons/400-24px/arrow_drop_down.svg?react';\n+import ArrowLeftIcon from '@/material-icons/400-24px/arrow_left.svg?react';\n+import ListAltActiveIcon from '@/material-icons/400-24px/list_alt-fill.svg?react';\n+import ListAltIcon from '@/material-icons/400-24px/list_alt.svg?react';\n+import { fetchLists } from 'mastodon/actions/lists';\n+import { IconButton } from 'mastodon/components/icon_button';\n+import { getOrderedLists } from 'mastodon/selectors/lists';\n+import { useAppDispatch, useAppSelector } from 'mastodon/store';\n+\n+import { ColumnLink } from './column_link';\n+\n+const messages = defineMessages({\n+  lists: { id: 'navigation_bar.lists', defaultMessage: 'Lists' },\n+  expand: { id: 'navigation_panel.expand_menu', defaultMessage: 'Expand menu' },\n+  collapse: {\n+    id: 'navigation_panel.collapse_menu',\n+    defaultMessage: 'Collapse menu',\n+  },",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2137318643",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34910,
        "pr_file": "app/javascript/mastodon/features/ui/components/list_panel.tsx",
        "discussion_id": "2137318643",
        "commented_code": "@@ -0,0 +1,89 @@\n+import { useEffect, useState, useCallback, useId } from 'react';\n+\n+import { useIntl, defineMessages } from 'react-intl';\n+\n+import ArrowDropDownIcon from '@/material-icons/400-24px/arrow_drop_down.svg?react';\n+import ArrowLeftIcon from '@/material-icons/400-24px/arrow_left.svg?react';\n+import ListAltActiveIcon from '@/material-icons/400-24px/list_alt-fill.svg?react';\n+import ListAltIcon from '@/material-icons/400-24px/list_alt.svg?react';\n+import { fetchLists } from 'mastodon/actions/lists';\n+import { IconButton } from 'mastodon/components/icon_button';\n+import { getOrderedLists } from 'mastodon/selectors/lists';\n+import { useAppDispatch, useAppSelector } from 'mastodon/store';\n+\n+import { ColumnLink } from './column_link';\n+\n+const messages = defineMessages({\n+  lists: { id: 'navigation_bar.lists', defaultMessage: 'Lists' },\n+  expand: { id: 'navigation_panel.expand_menu', defaultMessage: 'Expand menu' },\n+  collapse: {\n+    id: 'navigation_panel.collapse_menu',\n+    defaultMessage: 'Collapse menu',\n+  },",
        "comment_created_at": "2025-06-10T08:58:30+00:00",
        "comment_author": "diondiondion",
        "comment_body": "These open/collapse labels should include their context (i.e. \"Expand/collapse lists menu\"), making them explicit should there ever be multiple menu buttons on a page.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2137365922",
    "pr_number": 34910,
    "pr_file": "app/javascript/mastodon/features/ui/hooks/useBreakpoint.tsx",
    "created_at": "2025-06-10T09:23:19+00:00",
    "commented_code": "+import { useState, useEffect } from 'react';\n+\n+const breakpoints = {\n+  openable: 759,",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2137365922",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34910,
        "pr_file": "app/javascript/mastodon/features/ui/hooks/useBreakpoint.tsx",
        "discussion_id": "2137365922",
        "commented_code": "@@ -0,0 +1,52 @@\n+import { useState, useEffect } from 'react';\n+\n+const breakpoints = {\n+  openable: 759,",
        "comment_created_at": "2025-06-10T09:23:19+00:00",
        "comment_author": "diondiondion",
        "comment_body": "Should this be `mobileMenuOpenable` for clarity when used in other contexts?",
        "pr_file_module": null
      },
      {
        "comment_id": "2137522872",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34910,
        "pr_file": "app/javascript/mastodon/features/ui/hooks/useBreakpoint.tsx",
        "discussion_id": "2137365922",
        "commented_code": "@@ -0,0 +1,52 @@\n+import { useState, useEffect } from 'react';\n+\n+const breakpoints = {\n+  openable: 759,",
        "comment_created_at": "2025-06-10T10:38:01+00:00",
        "comment_author": "Gargron",
        "comment_body": "I am not so sure about long variable names but I added a comment to clarify it in the code at least.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2036808717",
    "pr_number": 34393,
    "pr_file": "app/javascript/mastodon/features/ui/components/hashtag_menu_controller.tsx",
    "created_at": "2025-04-10T08:28:21+00:00",
    "commented_code": "+import { useEffect, useRef, useState, useCallback, useMemo } from 'react';\n+\n+import { useIntl, defineMessages } from 'react-intl';\n+\n+import { useLocation } from 'react-router-dom';\n+\n+import Overlay from 'react-overlays/Overlay';\n+import type {\n+  OffsetValue,\n+  UsePopperOptions,\n+} from 'react-overlays/esm/usePopper';\n+\n+import { DropdownMenu } from 'mastodon/components/dropdown_menu';\n+import { useAppSelector } from 'mastodon/store';\n+\n+const messages = defineMessages({\n+  browseHashtag: { id: '', defaultMessage: 'Browse posts in #{hashtag}' },\n+  browseHashtagFromAccount: {\n+    id: '',\n+    defaultMessage: 'Browse posts from @{name} in #{hashtag}',\n+  },\n+  muteHashtag: { id: '', defaultMessage: 'Mute #{hashtag}' },\n+});\n+\n+const offset = [5, 5] as OffsetValue;\n+const popperConfig = { strategy: 'fixed' } as UsePopperOptions;\n+\n+const isHashtagLink = (\n+  element: HTMLAnchorElement | null,\n+): element is HTMLAnchorElement => {\n+  if (!element) {\n+    return false;\n+  }\n+\n+  return element.matches('[data-menu-hashtag]');\n+};\n+\n+interface Params {\n+  hashtag?: string;\n+  accountId?: string;\n+}\n+\n+export const HashtagMenuController: React.FC = () => {\n+  const intl = useIntl();\n+  const [open, setOpen] = useState(false);\n+  const [params, setParams] = useState<Params>({});",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2036808717",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34393,
        "pr_file": "app/javascript/mastodon/features/ui/components/hashtag_menu_controller.tsx",
        "discussion_id": "2036808717",
        "commented_code": "@@ -0,0 +1,157 @@\n+import { useEffect, useRef, useState, useCallback, useMemo } from 'react';\n+\n+import { useIntl, defineMessages } from 'react-intl';\n+\n+import { useLocation } from 'react-router-dom';\n+\n+import Overlay from 'react-overlays/Overlay';\n+import type {\n+  OffsetValue,\n+  UsePopperOptions,\n+} from 'react-overlays/esm/usePopper';\n+\n+import { DropdownMenu } from 'mastodon/components/dropdown_menu';\n+import { useAppSelector } from 'mastodon/store';\n+\n+const messages = defineMessages({\n+  browseHashtag: { id: '', defaultMessage: 'Browse posts in #{hashtag}' },\n+  browseHashtagFromAccount: {\n+    id: '',\n+    defaultMessage: 'Browse posts from @{name} in #{hashtag}',\n+  },\n+  muteHashtag: { id: '', defaultMessage: 'Mute #{hashtag}' },\n+});\n+\n+const offset = [5, 5] as OffsetValue;\n+const popperConfig = { strategy: 'fixed' } as UsePopperOptions;\n+\n+const isHashtagLink = (\n+  element: HTMLAnchorElement | null,\n+): element is HTMLAnchorElement => {\n+  if (!element) {\n+    return false;\n+  }\n+\n+  return element.matches('[data-menu-hashtag]');\n+};\n+\n+interface Params {\n+  hashtag?: string;\n+  accountId?: string;\n+}\n+\n+export const HashtagMenuController: React.FC = () => {\n+  const intl = useIntl();\n+  const [open, setOpen] = useState(false);\n+  const [params, setParams] = useState<Params>({});",
        "comment_created_at": "2025-04-10T08:28:21+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "\"params\" made me thing this was `useParams` at first. could this be renamed to something else?",
        "pr_file_module": null
      },
      {
        "comment_id": "2037716829",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34393,
        "pr_file": "app/javascript/mastodon/features/ui/components/hashtag_menu_controller.tsx",
        "discussion_id": "2036808717",
        "commented_code": "@@ -0,0 +1,157 @@\n+import { useEffect, useRef, useState, useCallback, useMemo } from 'react';\n+\n+import { useIntl, defineMessages } from 'react-intl';\n+\n+import { useLocation } from 'react-router-dom';\n+\n+import Overlay from 'react-overlays/Overlay';\n+import type {\n+  OffsetValue,\n+  UsePopperOptions,\n+} from 'react-overlays/esm/usePopper';\n+\n+import { DropdownMenu } from 'mastodon/components/dropdown_menu';\n+import { useAppSelector } from 'mastodon/store';\n+\n+const messages = defineMessages({\n+  browseHashtag: { id: '', defaultMessage: 'Browse posts in #{hashtag}' },\n+  browseHashtagFromAccount: {\n+    id: '',\n+    defaultMessage: 'Browse posts from @{name} in #{hashtag}',\n+  },\n+  muteHashtag: { id: '', defaultMessage: 'Mute #{hashtag}' },\n+});\n+\n+const offset = [5, 5] as OffsetValue;\n+const popperConfig = { strategy: 'fixed' } as UsePopperOptions;\n+\n+const isHashtagLink = (\n+  element: HTMLAnchorElement | null,\n+): element is HTMLAnchorElement => {\n+  if (!element) {\n+    return false;\n+  }\n+\n+  return element.matches('[data-menu-hashtag]');\n+};\n+\n+interface Params {\n+  hashtag?: string;\n+  accountId?: string;\n+}\n+\n+export const HashtagMenuController: React.FC = () => {\n+  const intl = useIntl();\n+  const [open, setOpen] = useState(false);\n+  const [params, setParams] = useState<Params>({});",
        "comment_created_at": "2025-04-10T15:44:30+00:00",
        "comment_author": "Gargron",
        "comment_body": "It was somewhat intentional, since this is a global controller, I thought the name params would be fitting. But I can think of something else.",
        "pr_file_module": null
      },
      {
        "comment_id": "2037763719",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34393,
        "pr_file": "app/javascript/mastodon/features/ui/components/hashtag_menu_controller.tsx",
        "discussion_id": "2036808717",
        "commented_code": "@@ -0,0 +1,157 @@\n+import { useEffect, useRef, useState, useCallback, useMemo } from 'react';\n+\n+import { useIntl, defineMessages } from 'react-intl';\n+\n+import { useLocation } from 'react-router-dom';\n+\n+import Overlay from 'react-overlays/Overlay';\n+import type {\n+  OffsetValue,\n+  UsePopperOptions,\n+} from 'react-overlays/esm/usePopper';\n+\n+import { DropdownMenu } from 'mastodon/components/dropdown_menu';\n+import { useAppSelector } from 'mastodon/store';\n+\n+const messages = defineMessages({\n+  browseHashtag: { id: '', defaultMessage: 'Browse posts in #{hashtag}' },\n+  browseHashtagFromAccount: {\n+    id: '',\n+    defaultMessage: 'Browse posts from @{name} in #{hashtag}',\n+  },\n+  muteHashtag: { id: '', defaultMessage: 'Mute #{hashtag}' },\n+});\n+\n+const offset = [5, 5] as OffsetValue;\n+const popperConfig = { strategy: 'fixed' } as UsePopperOptions;\n+\n+const isHashtagLink = (\n+  element: HTMLAnchorElement | null,\n+): element is HTMLAnchorElement => {\n+  if (!element) {\n+    return false;\n+  }\n+\n+  return element.matches('[data-menu-hashtag]');\n+};\n+\n+interface Params {\n+  hashtag?: string;\n+  accountId?: string;\n+}\n+\n+export const HashtagMenuController: React.FC = () => {\n+  const intl = useIntl();\n+  const [open, setOpen] = useState(false);\n+  const [params, setParams] = useState<Params>({});",
        "comment_created_at": "2025-04-10T16:04:49+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "`target` perhaps? it's describing the target of the link and loading the appropriate state data from the hashtag.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2033288271",
    "pr_number": 34357,
    "pr_file": "app/javascript/mastodon/components/dropdown_menu.tsx",
    "created_at": "2025-04-08T14:08:43+00:00",
    "commented_code": "+import {\n+  useState,\n+  useEffect,\n+  useRef,\n+  useCallback,\n+  cloneElement,\n+  Children,\n+} from 'react';\n+\n+import classNames from 'classnames';\n+import { Link } from 'react-router-dom';\n+\n+import type { Map as ImmutableMap } from 'immutable';\n+\n+import Overlay from 'react-overlays/Overlay';\n+import type {\n+  OffsetValue,\n+  UsePopperOptions,\n+} from 'react-overlays/esm/usePopper';\n+\n+import { fetchRelationships } from 'mastodon/actions/accounts';\n+import {\n+  openDropdownMenu,\n+  closeDropdownMenu,\n+} from 'mastodon/actions/dropdown_menu';\n+import { openModal, closeModal } from 'mastodon/actions/modal';\n+import { CircularProgress } from 'mastodon/components/circular_progress';\n+import { isUserTouching } from 'mastodon/is_mobile';\n+import type {\n+  MenuItem,\n+  ActionMenuItem,\n+  ExternalLinkMenuItem,\n+} from 'mastodon/models/dropdown_menu';\n+import { useAppDispatch, useAppSelector } from 'mastodon/store';\n+\n+import type { IconProp } from './icon';\n+import { IconButton } from './icon_button';\n+\n+let id = 0;\n+\n+const isMenuItem = (item: unknown): item is MenuItem => {\n+  if (item === null) {\n+    return true;\n+  }\n+\n+  return !!(item as MenuItem)?.text;\n+};\n+\n+const isActionItem = (item: unknown): item is ActionMenuItem => {\n+  if (!item) {\n+    return false;\n+  }\n+\n+  return typeof (item as ActionMenuItem).action === 'function';\n+};\n+\n+const isExternalLinkItem = (item: unknown): item is ExternalLinkMenuItem => {\n+  if (!item) {\n+    return false;\n+  }\n+\n+  return !!(item as ExternalLinkMenuItem).href;\n+};\n+\n+type RenderItemFn<Item = MenuItem> = (\n+  arg0: Item,\n+  arg1: number,\n+  arg2: {\n+    onClick: (e: React.MouseEvent) => void;\n+    onKeyUp: (e: React.KeyboardEvent) => void;\n+  },",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2033288271",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34357,
        "pr_file": "app/javascript/mastodon/components/dropdown_menu.tsx",
        "discussion_id": "2033288271",
        "commented_code": "@@ -0,0 +1,532 @@\n+import {\n+  useState,\n+  useEffect,\n+  useRef,\n+  useCallback,\n+  cloneElement,\n+  Children,\n+} from 'react';\n+\n+import classNames from 'classnames';\n+import { Link } from 'react-router-dom';\n+\n+import type { Map as ImmutableMap } from 'immutable';\n+\n+import Overlay from 'react-overlays/Overlay';\n+import type {\n+  OffsetValue,\n+  UsePopperOptions,\n+} from 'react-overlays/esm/usePopper';\n+\n+import { fetchRelationships } from 'mastodon/actions/accounts';\n+import {\n+  openDropdownMenu,\n+  closeDropdownMenu,\n+} from 'mastodon/actions/dropdown_menu';\n+import { openModal, closeModal } from 'mastodon/actions/modal';\n+import { CircularProgress } from 'mastodon/components/circular_progress';\n+import { isUserTouching } from 'mastodon/is_mobile';\n+import type {\n+  MenuItem,\n+  ActionMenuItem,\n+  ExternalLinkMenuItem,\n+} from 'mastodon/models/dropdown_menu';\n+import { useAppDispatch, useAppSelector } from 'mastodon/store';\n+\n+import type { IconProp } from './icon';\n+import { IconButton } from './icon_button';\n+\n+let id = 0;\n+\n+const isMenuItem = (item: unknown): item is MenuItem => {\n+  if (item === null) {\n+    return true;\n+  }\n+\n+  return !!(item as MenuItem)?.text;\n+};\n+\n+const isActionItem = (item: unknown): item is ActionMenuItem => {\n+  if (!item) {\n+    return false;\n+  }\n+\n+  return typeof (item as ActionMenuItem).action === 'function';\n+};\n+\n+const isExternalLinkItem = (item: unknown): item is ExternalLinkMenuItem => {\n+  if (!item) {\n+    return false;\n+  }\n+\n+  return !!(item as ExternalLinkMenuItem).href;\n+};\n+\n+type RenderItemFn<Item = MenuItem> = (\n+  arg0: Item,\n+  arg1: number,\n+  arg2: {\n+    onClick: (e: React.MouseEvent) => void;\n+    onKeyUp: (e: React.KeyboardEvent) => void;\n+  },",
        "comment_created_at": "2025-04-08T14:08:43+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "nit: imo it'd be better to name the args. looking at this definition i don't know what `arg1` is, but `index` is clearer.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2024178137",
    "pr_number": 34345,
    "pr_file": "app/javascript/mastodon/features/alt_text_modal/index.tsx",
    "created_at": "2025-04-02T06:52:07+00:00",
    "commented_code": "position: FocalPoint;\n   onPositionChange: (arg0: FocalPoint) => void;\n }> = ({ mediaId, position, onPositionChange }) => {\n+  const [x, y] = position;\n+  const [style, api] = useSpring(() => ({\n+    left: `${x * 100}%`,\n+    top: `${y * 100}%`,\n+  }));",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2024178137",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34345,
        "pr_file": "app/javascript/mastodon/features/alt_text_modal/index.tsx",
        "discussion_id": "2024178137",
        "commented_code": "@@ -105,6 +106,11 @@ const Preview: React.FC<{\n   position: FocalPoint;\n   onPositionChange: (arg0: FocalPoint) => void;\n }> = ({ mediaId, position, onPositionChange }) => {\n+  const [x, y] = position;\n+  const [style, api] = useSpring(() => ({\n+    left: `${x * 100}%`,\n+    top: `${y * 100}%`,\n+  }));",
        "comment_created_at": "2025-04-02T06:52:07+00:00",
        "comment_author": "ClearlyClaire",
        "comment_body": "Should we use a different name than `api`? This is pretty non-specific and confusing.",
        "pr_file_module": null
      },
      {
        "comment_id": "2031624076",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34345,
        "pr_file": "app/javascript/mastodon/features/alt_text_modal/index.tsx",
        "discussion_id": "2024178137",
        "commented_code": "@@ -105,6 +106,11 @@ const Preview: React.FC<{\n   position: FocalPoint;\n   onPositionChange: (arg0: FocalPoint) => void;\n }> = ({ mediaId, position, onPositionChange }) => {\n+  const [x, y] = position;\n+  const [style, api] = useSpring(() => ({\n+    left: `${x * 100}%`,\n+    top: `${y * 100}%`,\n+  }));",
        "comment_created_at": "2025-04-07T16:40:44+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "ideally we wouldn't use `api` at all. this should provide similar behavior:\r\n```suggestion\r\n  const style = useSpring({\r\n    left: `${x * 100}%`,\r\n    top: `${y * 100}%`,\r\n    immediate: reduceMotion || draggingRef?.current === true,\r\n  });\r\n```\r\nhowever if we keep this pattern, i think `immediate` should be set to `reduceMotion`?",
        "pr_file_module": null
      }
    ]
  }
]