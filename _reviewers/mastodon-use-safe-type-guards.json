[
  {
    "discussion_id": "2033280937",
    "pr_number": 34357,
    "pr_file": "app/javascript/mastodon/components/dropdown_menu.tsx",
    "created_at": "2025-04-08T14:05:13+00:00",
    "commented_code": "+import {\n+  useState,\n+  useEffect,\n+  useRef,\n+  useCallback,\n+  cloneElement,\n+  Children,\n+} from 'react';\n+\n+import classNames from 'classnames';\n+import { Link } from 'react-router-dom';\n+\n+import type { Map as ImmutableMap } from 'immutable';\n+\n+import Overlay from 'react-overlays/Overlay';\n+import type {\n+  OffsetValue,\n+  UsePopperOptions,\n+} from 'react-overlays/esm/usePopper';\n+\n+import { fetchRelationships } from 'mastodon/actions/accounts';\n+import {\n+  openDropdownMenu,\n+  closeDropdownMenu,\n+} from 'mastodon/actions/dropdown_menu';\n+import { openModal, closeModal } from 'mastodon/actions/modal';\n+import { CircularProgress } from 'mastodon/components/circular_progress';\n+import { isUserTouching } from 'mastodon/is_mobile';\n+import type {\n+  MenuItem,\n+  ActionMenuItem,\n+  ExternalLinkMenuItem,\n+} from 'mastodon/models/dropdown_menu';\n+import { useAppDispatch, useAppSelector } from 'mastodon/store';\n+\n+import type { IconProp } from './icon';\n+import { IconButton } from './icon_button';\n+\n+let id = 0;\n+\n+const isMenuItem = (item: unknown): item is MenuItem => {\n+  if (item === null) {\n+    return true;\n+  }\n+\n+  return !!(item as MenuItem)?.text;",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2033280937",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34357,
        "pr_file": "app/javascript/mastodon/components/dropdown_menu.tsx",
        "discussion_id": "2033280937",
        "commented_code": "@@ -0,0 +1,532 @@\n+import {\n+  useState,\n+  useEffect,\n+  useRef,\n+  useCallback,\n+  cloneElement,\n+  Children,\n+} from 'react';\n+\n+import classNames from 'classnames';\n+import { Link } from 'react-router-dom';\n+\n+import type { Map as ImmutableMap } from 'immutable';\n+\n+import Overlay from 'react-overlays/Overlay';\n+import type {\n+  OffsetValue,\n+  UsePopperOptions,\n+} from 'react-overlays/esm/usePopper';\n+\n+import { fetchRelationships } from 'mastodon/actions/accounts';\n+import {\n+  openDropdownMenu,\n+  closeDropdownMenu,\n+} from 'mastodon/actions/dropdown_menu';\n+import { openModal, closeModal } from 'mastodon/actions/modal';\n+import { CircularProgress } from 'mastodon/components/circular_progress';\n+import { isUserTouching } from 'mastodon/is_mobile';\n+import type {\n+  MenuItem,\n+  ActionMenuItem,\n+  ExternalLinkMenuItem,\n+} from 'mastodon/models/dropdown_menu';\n+import { useAppDispatch, useAppSelector } from 'mastodon/store';\n+\n+import type { IconProp } from './icon';\n+import { IconButton } from './icon_button';\n+\n+let id = 0;\n+\n+const isMenuItem = (item: unknown): item is MenuItem => {\n+  if (item === null) {\n+    return true;\n+  }\n+\n+  return !!(item as MenuItem)?.text;",
        "comment_created_at": "2025-04-08T14:05:13+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "to do this without typecasting, this can return the following:\r\n```suggestion\r\n  return typeof item === 'object' && 'text' in item;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2033281831",
    "pr_number": 34357,
    "pr_file": "app/javascript/mastodon/components/dropdown_menu.tsx",
    "created_at": "2025-04-08T14:05:41+00:00",
    "commented_code": "+import {\n+  useState,\n+  useEffect,\n+  useRef,\n+  useCallback,\n+  cloneElement,\n+  Children,\n+} from 'react';\n+\n+import classNames from 'classnames';\n+import { Link } from 'react-router-dom';\n+\n+import type { Map as ImmutableMap } from 'immutable';\n+\n+import Overlay from 'react-overlays/Overlay';\n+import type {\n+  OffsetValue,\n+  UsePopperOptions,\n+} from 'react-overlays/esm/usePopper';\n+\n+import { fetchRelationships } from 'mastodon/actions/accounts';\n+import {\n+  openDropdownMenu,\n+  closeDropdownMenu,\n+} from 'mastodon/actions/dropdown_menu';\n+import { openModal, closeModal } from 'mastodon/actions/modal';\n+import { CircularProgress } from 'mastodon/components/circular_progress';\n+import { isUserTouching } from 'mastodon/is_mobile';\n+import type {\n+  MenuItem,\n+  ActionMenuItem,\n+  ExternalLinkMenuItem,\n+} from 'mastodon/models/dropdown_menu';\n+import { useAppDispatch, useAppSelector } from 'mastodon/store';\n+\n+import type { IconProp } from './icon';\n+import { IconButton } from './icon_button';\n+\n+let id = 0;\n+\n+const isMenuItem = (item: unknown): item is MenuItem => {\n+  if (item === null) {\n+    return true;\n+  }\n+\n+  return !!(item as MenuItem)?.text;\n+};\n+\n+const isActionItem = (item: unknown): item is ActionMenuItem => {\n+  if (!item) {\n+    return false;\n+  }\n+\n+  return typeof (item as ActionMenuItem).action === 'function';",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2033281831",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34357,
        "pr_file": "app/javascript/mastodon/components/dropdown_menu.tsx",
        "discussion_id": "2033281831",
        "commented_code": "@@ -0,0 +1,532 @@\n+import {\n+  useState,\n+  useEffect,\n+  useRef,\n+  useCallback,\n+  cloneElement,\n+  Children,\n+} from 'react';\n+\n+import classNames from 'classnames';\n+import { Link } from 'react-router-dom';\n+\n+import type { Map as ImmutableMap } from 'immutable';\n+\n+import Overlay from 'react-overlays/Overlay';\n+import type {\n+  OffsetValue,\n+  UsePopperOptions,\n+} from 'react-overlays/esm/usePopper';\n+\n+import { fetchRelationships } from 'mastodon/actions/accounts';\n+import {\n+  openDropdownMenu,\n+  closeDropdownMenu,\n+} from 'mastodon/actions/dropdown_menu';\n+import { openModal, closeModal } from 'mastodon/actions/modal';\n+import { CircularProgress } from 'mastodon/components/circular_progress';\n+import { isUserTouching } from 'mastodon/is_mobile';\n+import type {\n+  MenuItem,\n+  ActionMenuItem,\n+  ExternalLinkMenuItem,\n+} from 'mastodon/models/dropdown_menu';\n+import { useAppDispatch, useAppSelector } from 'mastodon/store';\n+\n+import type { IconProp } from './icon';\n+import { IconButton } from './icon_button';\n+\n+let id = 0;\n+\n+const isMenuItem = (item: unknown): item is MenuItem => {\n+  if (item === null) {\n+    return true;\n+  }\n+\n+  return !!(item as MenuItem)?.text;\n+};\n+\n+const isActionItem = (item: unknown): item is ActionMenuItem => {\n+  if (!item) {\n+    return false;\n+  }\n+\n+  return typeof (item as ActionMenuItem).action === 'function';",
        "comment_created_at": "2025-04-08T14:05:41+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "```suggestion\r\n  if (!item || !isMenuItem(item)) {\r\n    return false;\r\n  }\r\n\r\n  return 'action' in item;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2033283745",
    "pr_number": 34357,
    "pr_file": "app/javascript/mastodon/components/dropdown_menu.tsx",
    "created_at": "2025-04-08T14:06:35+00:00",
    "commented_code": "+import {\n+  useState,\n+  useEffect,\n+  useRef,\n+  useCallback,\n+  cloneElement,\n+  Children,\n+} from 'react';\n+\n+import classNames from 'classnames';\n+import { Link } from 'react-router-dom';\n+\n+import type { Map as ImmutableMap } from 'immutable';\n+\n+import Overlay from 'react-overlays/Overlay';\n+import type {\n+  OffsetValue,\n+  UsePopperOptions,\n+} from 'react-overlays/esm/usePopper';\n+\n+import { fetchRelationships } from 'mastodon/actions/accounts';\n+import {\n+  openDropdownMenu,\n+  closeDropdownMenu,\n+} from 'mastodon/actions/dropdown_menu';\n+import { openModal, closeModal } from 'mastodon/actions/modal';\n+import { CircularProgress } from 'mastodon/components/circular_progress';\n+import { isUserTouching } from 'mastodon/is_mobile';\n+import type {\n+  MenuItem,\n+  ActionMenuItem,\n+  ExternalLinkMenuItem,\n+} from 'mastodon/models/dropdown_menu';\n+import { useAppDispatch, useAppSelector } from 'mastodon/store';\n+\n+import type { IconProp } from './icon';\n+import { IconButton } from './icon_button';\n+\n+let id = 0;\n+\n+const isMenuItem = (item: unknown): item is MenuItem => {\n+  if (item === null) {\n+    return true;\n+  }\n+\n+  return !!(item as MenuItem)?.text;\n+};\n+\n+const isActionItem = (item: unknown): item is ActionMenuItem => {\n+  if (!item) {\n+    return false;\n+  }\n+\n+  return typeof (item as ActionMenuItem).action === 'function';\n+};\n+\n+const isExternalLinkItem = (item: unknown): item is ExternalLinkMenuItem => {\n+  if (!item) {\n+    return false;\n+  }\n+\n+  return !!(item as ExternalLinkMenuItem).href;",
    "repo_full_name": "mastodon/mastodon",
    "discussion_comments": [
      {
        "comment_id": "2033283745",
        "repo_full_name": "mastodon/mastodon",
        "pr_number": 34357,
        "pr_file": "app/javascript/mastodon/components/dropdown_menu.tsx",
        "discussion_id": "2033283745",
        "commented_code": "@@ -0,0 +1,532 @@\n+import {\n+  useState,\n+  useEffect,\n+  useRef,\n+  useCallback,\n+  cloneElement,\n+  Children,\n+} from 'react';\n+\n+import classNames from 'classnames';\n+import { Link } from 'react-router-dom';\n+\n+import type { Map as ImmutableMap } from 'immutable';\n+\n+import Overlay from 'react-overlays/Overlay';\n+import type {\n+  OffsetValue,\n+  UsePopperOptions,\n+} from 'react-overlays/esm/usePopper';\n+\n+import { fetchRelationships } from 'mastodon/actions/accounts';\n+import {\n+  openDropdownMenu,\n+  closeDropdownMenu,\n+} from 'mastodon/actions/dropdown_menu';\n+import { openModal, closeModal } from 'mastodon/actions/modal';\n+import { CircularProgress } from 'mastodon/components/circular_progress';\n+import { isUserTouching } from 'mastodon/is_mobile';\n+import type {\n+  MenuItem,\n+  ActionMenuItem,\n+  ExternalLinkMenuItem,\n+} from 'mastodon/models/dropdown_menu';\n+import { useAppDispatch, useAppSelector } from 'mastodon/store';\n+\n+import type { IconProp } from './icon';\n+import { IconButton } from './icon_button';\n+\n+let id = 0;\n+\n+const isMenuItem = (item: unknown): item is MenuItem => {\n+  if (item === null) {\n+    return true;\n+  }\n+\n+  return !!(item as MenuItem)?.text;\n+};\n+\n+const isActionItem = (item: unknown): item is ActionMenuItem => {\n+  if (!item) {\n+    return false;\n+  }\n+\n+  return typeof (item as ActionMenuItem).action === 'function';\n+};\n+\n+const isExternalLinkItem = (item: unknown): item is ExternalLinkMenuItem => {\n+  if (!item) {\n+    return false;\n+  }\n+\n+  return !!(item as ExternalLinkMenuItem).href;",
        "comment_created_at": "2025-04-08T14:06:35+00:00",
        "comment_author": "ChaosExAnima",
        "comment_body": "```suggestion\r\n  if (!item || !isMenuItem(item)) {\r\n    return false;\r\n  }\r\n\r\n  return 'href' in item;\r\n```",
        "pr_file_module": null
      }
    ]
  }
]