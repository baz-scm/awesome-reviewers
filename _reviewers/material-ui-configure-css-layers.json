[
  {
    "discussion_id": "2138224653",
    "pr_number": 46001,
    "pr_file": "docs/data/material/customization/css-layers/css-layers.md",
    "created_at": "2025-06-10T15:33:09+00:00",
    "commented_code": "+# CSS Layers\n+\n+<p class=\"description\">Learn how to generate Material\u00a0UI styles with cascade layers.</p>\n+\n+## Overview\n+\n+Cascade layers are a new CSS feature that allows you to control the order in which styles are applied to elements. If you are not familiar with cascade layers, we recommend reading the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade_layers) for a detailed overview.\n+\n+Some of the benefits of using cascade layers include:\n+\n+- **Improved specificity**: Cascade layers let you control the order of the styles, which can help avoid specificity conflicts. For example, you can theme a component without hitting the default specificity of the styles.\n+- **Better integration with CSS frameworks**: With cascade layers, you can use Tailwind\u00a0CSS v4 utility classes to override Material\u00a0UI styles without specifying `!important` directive.\n+- **Better debuggability**: Cascade layers appear in the browser's dev tools, making it easier to see which styles are applied and in what order.\n+\n+## Single layer\n+\n+This method creates a single layer, namely `@layer mui`, for all Material\u00a0UI components and global styles.\n+This method is suitable for integrating with other styling solutions, such as Tailwind\u00a0CSS v4, that use the `@layer` directive.\n+\n+### Next.js App Router\n+\n+Start by configuring Material\u00a0UI with Next.js in the [App Router integration guide](/material-ui/integrations/nextjs/#app-router).\n+Then follow these steps:\n+\n+1. Enable the [CSS layer feature](/material-ui/integrations/nextjs/#using-other-styling-solutions) in the root layout:\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+2. Configure the layer order at the top of a CSS file to work with Tailwind\u00a0CSS v4:\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+```\n+\n+### Next.js Pages Router\n+\n+Start by configuring Material\u00a0UI with Next.js in the [Pages Router integration guide](/material-ui/integrations/nextjs/#pages-router).\n+Then follow these steps:\n+\n+1. Enable the [CSS layer feature](/material-ui/integrations/nextjs/#configuration-2) in a custom `_document`:\n+\n+```tsx title=\"pages/_document.tsx\"\n+import {\n+  createCache,\n+  documentGetInitialProps,\n+} from '@mui/material-nextjs/v15-pagesRouter';\n+\n+// ...\n+\n+MyDocument.getInitialProps = async (ctx: DocumentContext) => {\n+  const finalProps = await documentGetInitialProps(ctx, {\n+    emotionCache: createCache({ enableCssLayer: true }),\n+  });\n+  return finalProps;\n+};\n+```\n+\n+2. Configure the layer order with the `GlobalStyles` component to work with Tailwind\u00a0CSS v4\u2014it must be the first child of the `AppCacheProvider`:\n+\n+```tsx title=\"pages/_app.tsx\"\n+import { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+export default function MyApp(props: AppProps) {\n+  const { Component, pageProps } = props;\n+  return (\n+    <AppCacheProvider {...props}>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      <Component {...pageProps} />\n+    </AppCacheProvider>\n+  );\n+}\n+```\n+\n+### Vite or any other SPA\n+\n+Make the following changes in `src/main.tsx`:\n+\n+1. Pass the `enableCssLayer` prop to the `StyledEngineProvider` component.\n+2. Configure the layer order with the `GlobalStyles` component to work with Tailwind\u00a0CSS v4.\n+\n+```tsx title=\"main.tsx\"\n+import { StyledEngineProvider } from '@mui/material/styles';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+ReactDOM.createRoot(document.getElementById('root')!).render(\n+  <React.StrictMode>\n+    <StyledEngineProvider enableCssLayer>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      {/* Your app */}\n+    </StyledEngineProvider>\n+  </React.StrictMode>,\n+);\n+```\n+\n+## Multiple layers\n+\n+On top of the [single layer](#single-layer), you can split styles into multiple layers to better organize them within Material\u00a0UI.\n+This makes theming and overriding styles through the `sx` prop easier.\n+\n+Follow the steps from the [previous section](#single-layer) to enable the CSS layer feature.\n+Then, create a new file and export the component that wraps the `ThemeProvider` from Material\u00a0UI.\n+Finally, pass the `modularCssLayers: true` option to the `createTheme` function:\n+\n+```tsx title=\"src/theme.tsx\"\n+import { createTheme, ThemeProvider } from '@mui/material/styles';\n+\n+const theme = createTheme({\n+  modularCssLayers: true,\n+});\n+\n+export default function AppTheme({ children }: { children: ReactNode }) {\n+  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n+}\n+```\n+\n+{{\"demo\": \"CssLayersInput.js\"}}\n+\n+When this feature is enabled, Material\u00a0UI generates these layers:\n+\n+- `@layer mui.global`: The global styles from `GlobalStyles` and `CssBaseline` components.\n+- `@layer mui.components`: The base styles for all Material\u00a0UI components.\n+- `@layer mui.theme`: The theme styles for all Material\u00a0UI components.\n+- `@layer mui.custom`: The custom styles for non-Material\u00a0UI styled components.\n+- `@layer mui.sx`: The styles from the `sx` prop.\n+\n+Below are code snippets of how to set up multiple layers in different frameworks.\n+\n+### Next.js App Router\n+\n+```tsx title=\"src/theme.tsx\"\n+'use client';\n+import { createTheme, ThemeProvider } from '@mui/material/styles';\n+\n+const theme = createTheme({\n+  modularCssLayers: true,\n+});\n+\n+export default function AppTheme({ children }: { children: ReactNode }) {\n+  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n+}\n+```\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import AppTheme from '../theme';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          <AppTheme>{/* Your app */}</AppTheme>\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+### Next.js Pages Router\n+\n+```tsx title=\"src/theme.tsx\"\n+import { createTheme, ThemeProvider } from '@mui/material/styles';\n+\n+const theme = createTheme({\n+  modularCssLayers: true,\n+});\n+\n+export default function AppTheme({ children }: { children: ReactNode }) {\n+  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n+}\n+```\n+\n+```tsx title=\"pages/_app.tsx\"\n+import AppTheme from '../src/theme';\n+\n+export default function MyApp(props: AppProps) {\n+  const { Component, pageProps } = props;\n+  return (\n+    <AppCacheProvider {...props}>\n+      <AppTheme>\n+        <Component {...pageProps} />\n+      </AppTheme>\n+    </AppCacheProvider>\n+  );\n+}\n+```\n+\n+```tsx title=\"pages/_document.tsx\"\n+import {\n+  createCache,\n+  documentGetInitialProps,\n+} from '@mui/material-nextjs/v15-pagesRouter';\n+\n+MyDocument.getInitialProps = async (ctx: DocumentContext) => {\n+  const finalProps = await documentGetInitialProps(ctx, {\n+    emotionCache: createCache({ enableCssLayer: true }),\n+  });\n+  return finalProps;\n+};\n+```\n+\n+### Vite or any other SPA\n+\n+```tsx title=\"src/theme.tsx\"\n+import { createTheme, ThemeProvider } from '@mui/material/styles';\n+\n+const theme = createTheme({\n+  modularCssLayers: true,\n+});\n+\n+export default function AppTheme({ children }: { children: ReactNode }) {\n+  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n+}\n+```\n+\n+```tsx title=\"src/main.tsx\"\n+import AppTheme from './theme';\n+\n+ReactDOM.createRoot(document.getElementById('root')!).render(\n+  <React.StrictMode>\n+    <StyledEngineProvider enableCssLayer>\n+      <AppTheme>{/* Your app */}</AppTheme>\n+    </StyledEngineProvider>\n+  </React.StrictMode>,\n+);\n+```\n+\n+### Usage with other styling solutions\n+\n+If you want to integrate with other styling solutions, such as Tailwind\u00a0CSS v4, replace the value with a string of layer order, Material\u00a0UI will look for the `mui` identifier and generate the correct order:",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2138224653",
        "repo_full_name": "mui/material-ui",
        "pr_number": 46001,
        "pr_file": "docs/data/material/customization/css-layers/css-layers.md",
        "discussion_id": "2138224653",
        "commented_code": "@@ -0,0 +1,258 @@\n+# CSS Layers\n+\n+<p class=\"description\">Learn how to generate Material\u00a0UI styles with cascade layers.</p>\n+\n+## Overview\n+\n+Cascade layers are a new CSS feature that allows you to control the order in which styles are applied to elements. If you are not familiar with cascade layers, we recommend reading the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade_layers) for a detailed overview.\n+\n+Some of the benefits of using cascade layers include:\n+\n+- **Improved specificity**: Cascade layers let you control the order of the styles, which can help avoid specificity conflicts. For example, you can theme a component without hitting the default specificity of the styles.\n+- **Better integration with CSS frameworks**: With cascade layers, you can use Tailwind\u00a0CSS v4 utility classes to override Material\u00a0UI styles without specifying `!important` directive.\n+- **Better debuggability**: Cascade layers appear in the browser's dev tools, making it easier to see which styles are applied and in what order.\n+\n+## Single layer\n+\n+This method creates a single layer, namely `@layer mui`, for all Material\u00a0UI components and global styles.\n+This method is suitable for integrating with other styling solutions, such as Tailwind\u00a0CSS v4, that use the `@layer` directive.\n+\n+### Next.js App Router\n+\n+Start by configuring Material\u00a0UI with Next.js in the [App Router integration guide](/material-ui/integrations/nextjs/#app-router).\n+Then follow these steps:\n+\n+1. Enable the [CSS layer feature](/material-ui/integrations/nextjs/#using-other-styling-solutions) in the root layout:\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+2. Configure the layer order at the top of a CSS file to work with Tailwind\u00a0CSS v4:\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+```\n+\n+### Next.js Pages Router\n+\n+Start by configuring Material\u00a0UI with Next.js in the [Pages Router integration guide](/material-ui/integrations/nextjs/#pages-router).\n+Then follow these steps:\n+\n+1. Enable the [CSS layer feature](/material-ui/integrations/nextjs/#configuration-2) in a custom `_document`:\n+\n+```tsx title=\"pages/_document.tsx\"\n+import {\n+  createCache,\n+  documentGetInitialProps,\n+} from '@mui/material-nextjs/v15-pagesRouter';\n+\n+// ...\n+\n+MyDocument.getInitialProps = async (ctx: DocumentContext) => {\n+  const finalProps = await documentGetInitialProps(ctx, {\n+    emotionCache: createCache({ enableCssLayer: true }),\n+  });\n+  return finalProps;\n+};\n+```\n+\n+2. Configure the layer order with the `GlobalStyles` component to work with Tailwind\u00a0CSS v4\u2014it must be the first child of the `AppCacheProvider`:\n+\n+```tsx title=\"pages/_app.tsx\"\n+import { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+export default function MyApp(props: AppProps) {\n+  const { Component, pageProps } = props;\n+  return (\n+    <AppCacheProvider {...props}>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      <Component {...pageProps} />\n+    </AppCacheProvider>\n+  );\n+}\n+```\n+\n+### Vite or any other SPA\n+\n+Make the following changes in `src/main.tsx`:\n+\n+1. Pass the `enableCssLayer` prop to the `StyledEngineProvider` component.\n+2. Configure the layer order with the `GlobalStyles` component to work with Tailwind\u00a0CSS v4.\n+\n+```tsx title=\"main.tsx\"\n+import { StyledEngineProvider } from '@mui/material/styles';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+ReactDOM.createRoot(document.getElementById('root')!).render(\n+  <React.StrictMode>\n+    <StyledEngineProvider enableCssLayer>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      {/* Your app */}\n+    </StyledEngineProvider>\n+  </React.StrictMode>,\n+);\n+```\n+\n+## Multiple layers\n+\n+On top of the [single layer](#single-layer), you can split styles into multiple layers to better organize them within Material\u00a0UI.\n+This makes theming and overriding styles through the `sx` prop easier.\n+\n+Follow the steps from the [previous section](#single-layer) to enable the CSS layer feature.\n+Then, create a new file and export the component that wraps the `ThemeProvider` from Material\u00a0UI.\n+Finally, pass the `modularCssLayers: true` option to the `createTheme` function:\n+\n+```tsx title=\"src/theme.tsx\"\n+import { createTheme, ThemeProvider } from '@mui/material/styles';\n+\n+const theme = createTheme({\n+  modularCssLayers: true,\n+});\n+\n+export default function AppTheme({ children }: { children: ReactNode }) {\n+  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n+}\n+```\n+\n+{{\"demo\": \"CssLayersInput.js\"}}\n+\n+When this feature is enabled, Material\u00a0UI generates these layers:\n+\n+- `@layer mui.global`: The global styles from `GlobalStyles` and `CssBaseline` components.\n+- `@layer mui.components`: The base styles for all Material\u00a0UI components.\n+- `@layer mui.theme`: The theme styles for all Material\u00a0UI components.\n+- `@layer mui.custom`: The custom styles for non-Material\u00a0UI styled components.\n+- `@layer mui.sx`: The styles from the `sx` prop.\n+\n+Below are code snippets of how to set up multiple layers in different frameworks.\n+\n+### Next.js App Router\n+\n+```tsx title=\"src/theme.tsx\"\n+'use client';\n+import { createTheme, ThemeProvider } from '@mui/material/styles';\n+\n+const theme = createTheme({\n+  modularCssLayers: true,\n+});\n+\n+export default function AppTheme({ children }: { children: ReactNode }) {\n+  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n+}\n+```\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import AppTheme from '../theme';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          <AppTheme>{/* Your app */}</AppTheme>\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+### Next.js Pages Router\n+\n+```tsx title=\"src/theme.tsx\"\n+import { createTheme, ThemeProvider } from '@mui/material/styles';\n+\n+const theme = createTheme({\n+  modularCssLayers: true,\n+});\n+\n+export default function AppTheme({ children }: { children: ReactNode }) {\n+  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n+}\n+```\n+\n+```tsx title=\"pages/_app.tsx\"\n+import AppTheme from '../src/theme';\n+\n+export default function MyApp(props: AppProps) {\n+  const { Component, pageProps } = props;\n+  return (\n+    <AppCacheProvider {...props}>\n+      <AppTheme>\n+        <Component {...pageProps} />\n+      </AppTheme>\n+    </AppCacheProvider>\n+  );\n+}\n+```\n+\n+```tsx title=\"pages/_document.tsx\"\n+import {\n+  createCache,\n+  documentGetInitialProps,\n+} from '@mui/material-nextjs/v15-pagesRouter';\n+\n+MyDocument.getInitialProps = async (ctx: DocumentContext) => {\n+  const finalProps = await documentGetInitialProps(ctx, {\n+    emotionCache: createCache({ enableCssLayer: true }),\n+  });\n+  return finalProps;\n+};\n+```\n+\n+### Vite or any other SPA\n+\n+```tsx title=\"src/theme.tsx\"\n+import { createTheme, ThemeProvider } from '@mui/material/styles';\n+\n+const theme = createTheme({\n+  modularCssLayers: true,\n+});\n+\n+export default function AppTheme({ children }: { children: ReactNode }) {\n+  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n+}\n+```\n+\n+```tsx title=\"src/main.tsx\"\n+import AppTheme from './theme';\n+\n+ReactDOM.createRoot(document.getElementById('root')!).render(\n+  <React.StrictMode>\n+    <StyledEngineProvider enableCssLayer>\n+      <AppTheme>{/* Your app */}</AppTheme>\n+    </StyledEngineProvider>\n+  </React.StrictMode>,\n+);\n+```\n+\n+### Usage with other styling solutions\n+\n+If you want to integrate with other styling solutions, such as Tailwind\u00a0CSS v4, replace the value with a string of layer order, Material\u00a0UI will look for the `mui` identifier and generate the correct order:",
        "comment_created_at": "2025-06-10T15:33:09+00:00",
        "comment_author": "mapache-salvaje",
        "comment_body": "```suggestion\r\nTo integrate with other styling solutions, such as Tailwind\u00a0CSS v4, replace the boolean value for `modularCssLayers` with a string specifying the layer order. \r\nMaterial\u00a0UI will look for the `mui` identifier and generate the layers in the correct order:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2043014924",
    "pr_number": 45906,
    "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
    "created_at": "2025-04-14T22:05:53+00:00",
    "commented_code": "+# Tailwind\u00a0CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material\u00a0UI with Tailwind\u00a0CSS v4.</p>\n+\n+## Frameworks\n+\n+There are 2 steps to integrate Tailwind\u00a0CSS v4 with Material\u00a0UI:\n+\n+1. Configure the styles to generate with `@layer` directive.",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2043014924",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45906,
        "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
        "discussion_id": "2043014924",
        "commented_code": "@@ -0,0 +1,129 @@\n+# Tailwind\u00a0CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material\u00a0UI with Tailwind\u00a0CSS v4.</p>\n+\n+## Frameworks\n+\n+There are 2 steps to integrate Tailwind\u00a0CSS v4 with Material\u00a0UI:\n+\n+1. Configure the styles to generate with `@layer` directive.",
        "comment_created_at": "2025-04-14T22:05:53+00:00",
        "comment_author": "mapache-salvaje",
        "comment_body": "```suggestion\r\n1. Configure the styles to generate with the `@layer` directive.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049182856",
    "pr_number": 45906,
    "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
    "created_at": "2025-04-17T15:19:43+00:00",
    "commented_code": "+# Tailwind\u00a0CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material\u00a0UI with Tailwind\u00a0CSS v4.</p>\n+\n+## Frameworks\n+\n+There are 2 steps to integrate Tailwind\u00a0CSS v4 with Material\u00a0UI:\n+\n+1. Configure the styles to generate with `@layer` directive.\n+2. Set up layer order to have `mui` comes before `utilities` layer so that Tailwind\u00a0CSS classes can override Material\u00a0UI styles.\n+\n+If you are using a framework, you can follow the instructions below to set up the integration.\n+\n+### Next.js App Router\n+\n+Follow the [App Router guide](/material-ui/integrations/nextjs/#app-router) and do the following steps:\n+\n+- enable the [CSS layer feature](/material-ui/integrations/nextjs/#using-other-styling-solutions) as shown below.\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+- configure layer order in the Tailwind\u00a0CSS file.\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+@import 'tailwindcss';\n+```\n+\n+### Next.js Pages Router\n+\n+Follow the [Pages Router guide](/material-ui/integrations/nextjs/#pages-router) and do the following steps:\n+\n+- enable the [CSS layer feature](/material-ui/integrations/nextjs/#configuration-2) as shown below.\n+\n+```tsx title=\"pages/_document.tsx\"\n+import {\n+  createCache,\n+  documentGetInitialProps,\n+} from '@mui/material-nextjs/v15-pagesRouter';\n+\n+// ...\n+\n+MyDocument.getInitialProps = async (ctx: DocumentContext) => {\n+  const finalProps = await documentGetInitialProps(ctx, {\n+    emotionCache: createCache({ enableCssLayer: true }),\n+  });\n+  return finalProps;\n+};\n+```\n+\n+- configure the layer order with `GlobalStyles` component (it must be the first child of `AppCacheProvider`).\n+\n+```tsx title=\"pages/_app.tsx\"\n+import { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+export default function MyApp(props: AppProps) {\n+  const { Component, pageProps } = props;\n+  return (\n+    <AppCacheProvider {...props}>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      {/* Your app */}\n+    </AppCacheProvider>\n+  );\n+}\n+```\n+\n+### Vite.js or any other SPA\n+\n+Open `src/main.tsx` and do the following steps:\n+\n+- set `enableCssLayer` prop to `StyledEngineProvider` component.\n+- configure the layer order with `GlobalStyles` component.",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2049182856",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45906,
        "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
        "discussion_id": "2049182856",
        "commented_code": "@@ -0,0 +1,128 @@\n+# Tailwind\u00a0CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material\u00a0UI with Tailwind\u00a0CSS v4.</p>\n+\n+## Frameworks\n+\n+There are 2 steps to integrate Tailwind\u00a0CSS v4 with Material\u00a0UI:\n+\n+1. Configure the styles to generate with `@layer` directive.\n+2. Set up layer order to have `mui` comes before `utilities` layer so that Tailwind\u00a0CSS classes can override Material\u00a0UI styles.\n+\n+If you are using a framework, you can follow the instructions below to set up the integration.\n+\n+### Next.js App Router\n+\n+Follow the [App Router guide](/material-ui/integrations/nextjs/#app-router) and do the following steps:\n+\n+- enable the [CSS layer feature](/material-ui/integrations/nextjs/#using-other-styling-solutions) as shown below.\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+- configure layer order in the Tailwind\u00a0CSS file.\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+@import 'tailwindcss';\n+```\n+\n+### Next.js Pages Router\n+\n+Follow the [Pages Router guide](/material-ui/integrations/nextjs/#pages-router) and do the following steps:\n+\n+- enable the [CSS layer feature](/material-ui/integrations/nextjs/#configuration-2) as shown below.\n+\n+```tsx title=\"pages/_document.tsx\"\n+import {\n+  createCache,\n+  documentGetInitialProps,\n+} from '@mui/material-nextjs/v15-pagesRouter';\n+\n+// ...\n+\n+MyDocument.getInitialProps = async (ctx: DocumentContext) => {\n+  const finalProps = await documentGetInitialProps(ctx, {\n+    emotionCache: createCache({ enableCssLayer: true }),\n+  });\n+  return finalProps;\n+};\n+```\n+\n+- configure the layer order with `GlobalStyles` component (it must be the first child of `AppCacheProvider`).\n+\n+```tsx title=\"pages/_app.tsx\"\n+import { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+export default function MyApp(props: AppProps) {\n+  const { Component, pageProps } = props;\n+  return (\n+    <AppCacheProvider {...props}>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      {/* Your app */}\n+    </AppCacheProvider>\n+  );\n+}\n+```\n+\n+### Vite.js or any other SPA\n+\n+Open `src/main.tsx` and do the following steps:\n+\n+- set `enableCssLayer` prop to `StyledEngineProvider` component.\n+- configure the layer order with `GlobalStyles` component.",
        "comment_created_at": "2025-04-17T15:19:43+00:00",
        "comment_author": "mapache-salvaje",
        "comment_body": "```suggestion\r\n2. Configure the layer order with the `GlobalStyles` component.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049185155",
    "pr_number": 45906,
    "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
    "created_at": "2025-04-17T15:21:11+00:00",
    "commented_code": "+# Tailwind\u00a0CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material\u00a0UI with Tailwind\u00a0CSS v4.</p>\n+\n+## Frameworks\n+\n+There are 2 steps to integrate Tailwind\u00a0CSS v4 with Material\u00a0UI:\n+\n+1. Configure the styles to generate with `@layer` directive.\n+2. Set up layer order to have `mui` comes before `utilities` layer so that Tailwind\u00a0CSS classes can override Material\u00a0UI styles.\n+\n+If you are using a framework, you can follow the instructions below to set up the integration.\n+\n+### Next.js App Router\n+\n+Follow the [App Router guide](/material-ui/integrations/nextjs/#app-router) and do the following steps:\n+\n+- enable the [CSS layer feature](/material-ui/integrations/nextjs/#using-other-styling-solutions) as shown below.\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+- configure layer order in the Tailwind\u00a0CSS file.\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+@import 'tailwindcss';\n+```\n+\n+### Next.js Pages Router\n+\n+Follow the [Pages Router guide](/material-ui/integrations/nextjs/#pages-router) and do the following steps:\n+\n+- enable the [CSS layer feature](/material-ui/integrations/nextjs/#configuration-2) as shown below.\n+\n+```tsx title=\"pages/_document.tsx\"\n+import {\n+  createCache,\n+  documentGetInitialProps,\n+} from '@mui/material-nextjs/v15-pagesRouter';\n+\n+// ...\n+\n+MyDocument.getInitialProps = async (ctx: DocumentContext) => {\n+  const finalProps = await documentGetInitialProps(ctx, {\n+    emotionCache: createCache({ enableCssLayer: true }),\n+  });\n+  return finalProps;\n+};\n+```\n+\n+- configure the layer order with `GlobalStyles` component (it must be the first child of `AppCacheProvider`).\n+\n+```tsx title=\"pages/_app.tsx\"\n+import { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+export default function MyApp(props: AppProps) {\n+  const { Component, pageProps } = props;\n+  return (\n+    <AppCacheProvider {...props}>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      {/* Your app */}\n+    </AppCacheProvider>\n+  );\n+}\n+```\n+\n+### Vite.js or any other SPA\n+\n+Open `src/main.tsx` and do the following steps:\n+\n+- set `enableCssLayer` prop to `StyledEngineProvider` component.\n+- configure the layer order with `GlobalStyles` component.\n+\n+```tsx title=\"main.tsx\"\n+import { StyledEngineProvider } from '@mui/material/styles';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+ReactDOM.createRoot(document.getElementById('root')!).render(\n+  <React.StrictMode>\n+    <StyledEngineProvider enableCssLayer>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      {/* Your app */}\n+    </StyledEngineProvider>\n+  </React.StrictMode>,\n+);\n+```\n+\n+## Tailwind IntelliSense for VS\u00a0Code\n+\n+Follow the [installation](https://tailwindcss.com/docs/editor-setup#intellisense-for-vs-code) and add the following configuration to your [`settings.json`](https://code.visualstudio.com/docs/editor/settings#_settings-json-file) file.",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2049185155",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45906,
        "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
        "discussion_id": "2049185155",
        "commented_code": "@@ -0,0 +1,128 @@\n+# Tailwind\u00a0CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material\u00a0UI with Tailwind\u00a0CSS v4.</p>\n+\n+## Frameworks\n+\n+There are 2 steps to integrate Tailwind\u00a0CSS v4 with Material\u00a0UI:\n+\n+1. Configure the styles to generate with `@layer` directive.\n+2. Set up layer order to have `mui` comes before `utilities` layer so that Tailwind\u00a0CSS classes can override Material\u00a0UI styles.\n+\n+If you are using a framework, you can follow the instructions below to set up the integration.\n+\n+### Next.js App Router\n+\n+Follow the [App Router guide](/material-ui/integrations/nextjs/#app-router) and do the following steps:\n+\n+- enable the [CSS layer feature](/material-ui/integrations/nextjs/#using-other-styling-solutions) as shown below.\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+- configure layer order in the Tailwind\u00a0CSS file.\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+@import 'tailwindcss';\n+```\n+\n+### Next.js Pages Router\n+\n+Follow the [Pages Router guide](/material-ui/integrations/nextjs/#pages-router) and do the following steps:\n+\n+- enable the [CSS layer feature](/material-ui/integrations/nextjs/#configuration-2) as shown below.\n+\n+```tsx title=\"pages/_document.tsx\"\n+import {\n+  createCache,\n+  documentGetInitialProps,\n+} from '@mui/material-nextjs/v15-pagesRouter';\n+\n+// ...\n+\n+MyDocument.getInitialProps = async (ctx: DocumentContext) => {\n+  const finalProps = await documentGetInitialProps(ctx, {\n+    emotionCache: createCache({ enableCssLayer: true }),\n+  });\n+  return finalProps;\n+};\n+```\n+\n+- configure the layer order with `GlobalStyles` component (it must be the first child of `AppCacheProvider`).\n+\n+```tsx title=\"pages/_app.tsx\"\n+import { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+export default function MyApp(props: AppProps) {\n+  const { Component, pageProps } = props;\n+  return (\n+    <AppCacheProvider {...props}>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      {/* Your app */}\n+    </AppCacheProvider>\n+  );\n+}\n+```\n+\n+### Vite.js or any other SPA\n+\n+Open `src/main.tsx` and do the following steps:\n+\n+- set `enableCssLayer` prop to `StyledEngineProvider` component.\n+- configure the layer order with `GlobalStyles` component.\n+\n+```tsx title=\"main.tsx\"\n+import { StyledEngineProvider } from '@mui/material/styles';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+ReactDOM.createRoot(document.getElementById('root')!).render(\n+  <React.StrictMode>\n+    <StyledEngineProvider enableCssLayer>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      {/* Your app */}\n+    </StyledEngineProvider>\n+  </React.StrictMode>,\n+);\n+```\n+\n+## Tailwind IntelliSense for VS\u00a0Code\n+\n+Follow the [installation](https://tailwindcss.com/docs/editor-setup#intellisense-for-vs-code) and add the following configuration to your [`settings.json`](https://code.visualstudio.com/docs/editor/settings#_settings-json-file) file.",
        "comment_created_at": "2025-04-17T15:21:11+00:00",
        "comment_author": "mapache-salvaje",
        "comment_body": "```suggestion\r\nFollow the [Tailwind\u00a0CSS IntelliSense installation guide](https://tailwindcss.com/docs/editor-setup#intellisense-for-vs-code) and then add the following configuration to your [VS Code `settings.json`](https://code.visualstudio.com/docs/editor/settings#_settings-json-file) file:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2008375775",
    "pr_number": 45624,
    "pr_file": "docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md",
    "created_at": "2025-03-21T21:48:15+00:00",
    "commented_code": "<p class=\"description\">This guide explains how to upgrade from Material\u00a0UI v6 to v7.</p>\n \n-## Start using the alpha release\n+## Why you should upgrade to Material\u00a0UI v7\n \n-In the `package.json` file, change the package version from `latest` to `next`.\n+### Improved ESM support\n \n-```diff title=\"package.json\"\n--\"@mui/material\": \"latest\",\n-+\"@mui/material\": \"next\",\n-```\n+Our package layout has been updated, we now unambiguously support both valid ESM and commonjs through the `exports` field in `package.json`.\n+You can read more about this in the [Node.js documentation](https://nodejs.org/api/packages.html#packages_exports).\n+\n+This update fixes several issues with popular bundlers like Vite and webpack, and makes it possible to load our packages from ESM modules under Node.js.\n+\n+### Quality-of-life improvements\n+\n+Material\u00a0UI v7 features other quality-of-life improvements, including:\n+\n+- Standardization of the slot pattern accross all components\n+- CSS layers support via the `enableCssLayer` prop in `StyledEngineProvider` for client-side apps and `AppRouterCacheProvider` Next.js App Router apps",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2008375775",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45624,
        "pr_file": "docs/data/material/migration/upgrade-to-v7/upgrade-to-v7.md",
        "discussion_id": "2008375775",
        "commented_code": "@@ -2,17 +2,44 @@\n \n <p class=\"description\">This guide explains how to upgrade from Material\u00a0UI v6 to v7.</p>\n \n-## Start using the alpha release\n+## Why you should upgrade to Material\u00a0UI v7\n \n-In the `package.json` file, change the package version from `latest` to `next`.\n+### Improved ESM support\n \n-```diff title=\"package.json\"\n--\"@mui/material\": \"latest\",\n-+\"@mui/material\": \"next\",\n-```\n+Our package layout has been updated, we now unambiguously support both valid ESM and commonjs through the `exports` field in `package.json`.\n+You can read more about this in the [Node.js documentation](https://nodejs.org/api/packages.html#packages_exports).\n+\n+This update fixes several issues with popular bundlers like Vite and webpack, and makes it possible to load our packages from ESM modules under Node.js.\n+\n+### Quality-of-life improvements\n+\n+Material\u00a0UI v7 features other quality-of-life improvements, including:\n+\n+- Standardization of the slot pattern accross all components\n+- CSS layers support via the `enableCssLayer` prop in `StyledEngineProvider` for client-side apps and `AppRouterCacheProvider` Next.js App Router apps",
        "comment_created_at": "2025-03-21T21:48:15+00:00",
        "comment_author": "mapache-salvaje",
        "comment_body": "```suggestion\r\n- CSS layers support via the `enableCssLayer` prop in `StyledEngineProvider` for client-side apps, and `AppRouterCacheProvider` for Next.js App Router apps\r\n```",
        "pr_file_module": null
      }
    ]
  }
]