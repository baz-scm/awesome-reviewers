[
  {
    "discussion_id": "1059805777",
    "pr_number": 35637,
    "pr_file": "packages/mui-icons-material/src/utils/SvgIcon.js",
    "created_at": "2023-01-01T23:37:07+00:00",
    "commented_code": "+import * as React from 'react';\n+import PropTypes from 'prop-types';\n+import clsx from 'clsx';\n+import {\n+  unstable_capitalize as capitalize,\n+  unstable_composeClasses as composeClasses,\n+} from '@mui/utils';\n+import { styled, useThemeProps } from '@mui/system';\n+import { getSvgIconUtilityClass } from './svgIconClasses';\n+\n+const useUtilityClasses = (ownerState) => {\n+  const { color, fontSize, classes } = ownerState;\n+\n+  const slots = {\n+    root: [\n+      'root',\n+      color !== 'inherit' && `color${capitalize(color)}`,\n+      `fontSize${capitalize(fontSize)}`,\n+    ],\n+  };\n+\n+  return composeClasses(slots, getSvgIconUtilityClass, classes);\n+};\n+\n+const defaultMaterialDesignColors = {\n+  inherit: undefined,\n+  action: 'rgba(0, 0, 0, 0.54)',\n+  disabled: 'rgba(0, 0, 0, 0.26)',\n+  primary: '#1976d2',\n+  secondary: '#9c27b0',\n+  error: '#d32f2f',\n+  info: '#0288d1',\n+  success: '#2e7d32',\n+  warning: '#ed6c02',\n+};\n+\n+const SvgIconRoot = styled('svg', {\n+  name: 'MuiSvgIcon',\n+  slot: 'Root',\n+  overridesResolver: (props, styles) => {\n+    const { ownerState } = props;\n+\n+    return [\n+      styles.root,\n+      ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`],\n+      styles[`fontSize${capitalize(ownerState.fontSize)}`],\n+    ];\n+  },\n+})(({ theme, ownerState }) => ({\n+  userSelect: 'none',\n+  width: '1em',\n+  height: '1em',\n+  display: 'inline-block',\n+  fill: 'currentColor',\n+  flexShrink: 0,\n+  transition:\n+    theme.transitions?.create?.('fill', {\n+      duration: theme.transitions?.duration?.shorter,\n+    }) ?? 'fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n+  fontSize: {\n+    inherit: 'inherit',\n+    small: theme.typography?.pxToRem?.(20) || '1.25rem',\n+    medium: theme.typography?.pxToRem?.(24) || '1.5rem',\n+    large: theme.typography?.pxToRem?.(35) || '2.1875rem',\n+  }[ownerState.fontSize],\n+  // TODO v5 deprecate, v6 remove for sx\n+  color:\n+    (theme.vars || theme).palette?.[ownerState.color]?.main ??\n+    {\n+      action: (theme.vars || theme).palette?.action?.active,\n+      disabled: (theme.vars || theme).palette?.action?.disabled,\n+      inherit: undefined,\n+    }[ownerState.color] ??\n+    defaultMaterialDesignColors[ownerState.color],\n+}));\n+\n+/**\n+ *\n+ * Demos:\n+ *\n+ * - [Icons](https://mui.com/material-ui/icons/)\n+ * - [Material Icons](https://mui.com/material-ui/material-icons/)\n+ *\n+ * API:\n+ *\n+ * - [SvgIcon API](https://mui.com/material-ui/api/svg-icon/)\n+ */\n+const SvgIcon = React.forwardRef(function SvgIcon(inProps, ref) {",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1059805777",
        "repo_full_name": "mui/material-ui",
        "pr_number": 35637,
        "pr_file": "packages/mui-icons-material/src/utils/SvgIcon.js",
        "discussion_id": "1059805777",
        "commented_code": "@@ -0,0 +1,237 @@\n+import * as React from 'react';\n+import PropTypes from 'prop-types';\n+import clsx from 'clsx';\n+import {\n+  unstable_capitalize as capitalize,\n+  unstable_composeClasses as composeClasses,\n+} from '@mui/utils';\n+import { styled, useThemeProps } from '@mui/system';\n+import { getSvgIconUtilityClass } from './svgIconClasses';\n+\n+const useUtilityClasses = (ownerState) => {\n+  const { color, fontSize, classes } = ownerState;\n+\n+  const slots = {\n+    root: [\n+      'root',\n+      color !== 'inherit' && `color${capitalize(color)}`,\n+      `fontSize${capitalize(fontSize)}`,\n+    ],\n+  };\n+\n+  return composeClasses(slots, getSvgIconUtilityClass, classes);\n+};\n+\n+const defaultMaterialDesignColors = {\n+  inherit: undefined,\n+  action: 'rgba(0, 0, 0, 0.54)',\n+  disabled: 'rgba(0, 0, 0, 0.26)',\n+  primary: '#1976d2',\n+  secondary: '#9c27b0',\n+  error: '#d32f2f',\n+  info: '#0288d1',\n+  success: '#2e7d32',\n+  warning: '#ed6c02',\n+};\n+\n+const SvgIconRoot = styled('svg', {\n+  name: 'MuiSvgIcon',\n+  slot: 'Root',\n+  overridesResolver: (props, styles) => {\n+    const { ownerState } = props;\n+\n+    return [\n+      styles.root,\n+      ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`],\n+      styles[`fontSize${capitalize(ownerState.fontSize)}`],\n+    ];\n+  },\n+})(({ theme, ownerState }) => ({\n+  userSelect: 'none',\n+  width: '1em',\n+  height: '1em',\n+  display: 'inline-block',\n+  fill: 'currentColor',\n+  flexShrink: 0,\n+  transition:\n+    theme.transitions?.create?.('fill', {\n+      duration: theme.transitions?.duration?.shorter,\n+    }) ?? 'fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n+  fontSize: {\n+    inherit: 'inherit',\n+    small: theme.typography?.pxToRem?.(20) || '1.25rem',\n+    medium: theme.typography?.pxToRem?.(24) || '1.5rem',\n+    large: theme.typography?.pxToRem?.(35) || '2.1875rem',\n+  }[ownerState.fontSize],\n+  // TODO v5 deprecate, v6 remove for sx\n+  color:\n+    (theme.vars || theme).palette?.[ownerState.color]?.main ??\n+    {\n+      action: (theme.vars || theme).palette?.action?.active,\n+      disabled: (theme.vars || theme).palette?.action?.disabled,\n+      inherit: undefined,\n+    }[ownerState.color] ??\n+    defaultMaterialDesignColors[ownerState.color],\n+}));\n+\n+/**\n+ *\n+ * Demos:\n+ *\n+ * - [Icons](https://mui.com/material-ui/icons/)\n+ * - [Material Icons](https://mui.com/material-ui/material-icons/)\n+ *\n+ * API:\n+ *\n+ * - [SvgIcon API](https://mui.com/material-ui/api/svg-icon/)\n+ */\n+const SvgIcon = React.forwardRef(function SvgIcon(inProps, ref) {",
        "comment_created_at": "2023-01-01T23:37:07+00:00",
        "comment_author": "oliviertassinari",
        "comment_body": "I would imagine that SvgIcon will eventually go inside `@mui/system` because once we add a new set of icons for Joy UI 1. Will we duplicate `SvgIcon` again? 2. Won't we want to have Material UI users be able to import these new icons without loading Joy UI?",
        "pr_file_module": null
      },
      {
        "comment_id": "1059923558",
        "repo_full_name": "mui/material-ui",
        "pr_number": 35637,
        "pr_file": "packages/mui-icons-material/src/utils/SvgIcon.js",
        "discussion_id": "1059805777",
        "commented_code": "@@ -0,0 +1,237 @@\n+import * as React from 'react';\n+import PropTypes from 'prop-types';\n+import clsx from 'clsx';\n+import {\n+  unstable_capitalize as capitalize,\n+  unstable_composeClasses as composeClasses,\n+} from '@mui/utils';\n+import { styled, useThemeProps } from '@mui/system';\n+import { getSvgIconUtilityClass } from './svgIconClasses';\n+\n+const useUtilityClasses = (ownerState) => {\n+  const { color, fontSize, classes } = ownerState;\n+\n+  const slots = {\n+    root: [\n+      'root',\n+      color !== 'inherit' && `color${capitalize(color)}`,\n+      `fontSize${capitalize(fontSize)}`,\n+    ],\n+  };\n+\n+  return composeClasses(slots, getSvgIconUtilityClass, classes);\n+};\n+\n+const defaultMaterialDesignColors = {\n+  inherit: undefined,\n+  action: 'rgba(0, 0, 0, 0.54)',\n+  disabled: 'rgba(0, 0, 0, 0.26)',\n+  primary: '#1976d2',\n+  secondary: '#9c27b0',\n+  error: '#d32f2f',\n+  info: '#0288d1',\n+  success: '#2e7d32',\n+  warning: '#ed6c02',\n+};\n+\n+const SvgIconRoot = styled('svg', {\n+  name: 'MuiSvgIcon',\n+  slot: 'Root',\n+  overridesResolver: (props, styles) => {\n+    const { ownerState } = props;\n+\n+    return [\n+      styles.root,\n+      ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`],\n+      styles[`fontSize${capitalize(ownerState.fontSize)}`],\n+    ];\n+  },\n+})(({ theme, ownerState }) => ({\n+  userSelect: 'none',\n+  width: '1em',\n+  height: '1em',\n+  display: 'inline-block',\n+  fill: 'currentColor',\n+  flexShrink: 0,\n+  transition:\n+    theme.transitions?.create?.('fill', {\n+      duration: theme.transitions?.duration?.shorter,\n+    }) ?? 'fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n+  fontSize: {\n+    inherit: 'inherit',\n+    small: theme.typography?.pxToRem?.(20) || '1.25rem',\n+    medium: theme.typography?.pxToRem?.(24) || '1.5rem',\n+    large: theme.typography?.pxToRem?.(35) || '2.1875rem',\n+  }[ownerState.fontSize],\n+  // TODO v5 deprecate, v6 remove for sx\n+  color:\n+    (theme.vars || theme).palette?.[ownerState.color]?.main ??\n+    {\n+      action: (theme.vars || theme).palette?.action?.active,\n+      disabled: (theme.vars || theme).palette?.action?.disabled,\n+      inherit: undefined,\n+    }[ownerState.color] ??\n+    defaultMaterialDesignColors[ownerState.color],\n+}));\n+\n+/**\n+ *\n+ * Demos:\n+ *\n+ * - [Icons](https://mui.com/material-ui/icons/)\n+ * - [Material Icons](https://mui.com/material-ui/material-icons/)\n+ *\n+ * API:\n+ *\n+ * - [SvgIcon API](https://mui.com/material-ui/api/svg-icon/)\n+ */\n+const SvgIcon = React.forwardRef(function SvgIcon(inProps, ref) {",
        "comment_created_at": "2023-01-02T09:45:14+00:00",
        "comment_author": "mnajdova",
        "comment_body": "This was my first implementation too, but honestly `SvgIcon` in different libraries, will likely have different styles, this is why I've decided to move it to the icons package. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1059994957",
        "repo_full_name": "mui/material-ui",
        "pr_number": 35637,
        "pr_file": "packages/mui-icons-material/src/utils/SvgIcon.js",
        "discussion_id": "1059805777",
        "commented_code": "@@ -0,0 +1,237 @@\n+import * as React from 'react';\n+import PropTypes from 'prop-types';\n+import clsx from 'clsx';\n+import {\n+  unstable_capitalize as capitalize,\n+  unstable_composeClasses as composeClasses,\n+} from '@mui/utils';\n+import { styled, useThemeProps } from '@mui/system';\n+import { getSvgIconUtilityClass } from './svgIconClasses';\n+\n+const useUtilityClasses = (ownerState) => {\n+  const { color, fontSize, classes } = ownerState;\n+\n+  const slots = {\n+    root: [\n+      'root',\n+      color !== 'inherit' && `color${capitalize(color)}`,\n+      `fontSize${capitalize(fontSize)}`,\n+    ],\n+  };\n+\n+  return composeClasses(slots, getSvgIconUtilityClass, classes);\n+};\n+\n+const defaultMaterialDesignColors = {\n+  inherit: undefined,\n+  action: 'rgba(0, 0, 0, 0.54)',\n+  disabled: 'rgba(0, 0, 0, 0.26)',\n+  primary: '#1976d2',\n+  secondary: '#9c27b0',\n+  error: '#d32f2f',\n+  info: '#0288d1',\n+  success: '#2e7d32',\n+  warning: '#ed6c02',\n+};\n+\n+const SvgIconRoot = styled('svg', {\n+  name: 'MuiSvgIcon',\n+  slot: 'Root',\n+  overridesResolver: (props, styles) => {\n+    const { ownerState } = props;\n+\n+    return [\n+      styles.root,\n+      ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`],\n+      styles[`fontSize${capitalize(ownerState.fontSize)}`],\n+    ];\n+  },\n+})(({ theme, ownerState }) => ({\n+  userSelect: 'none',\n+  width: '1em',\n+  height: '1em',\n+  display: 'inline-block',\n+  fill: 'currentColor',\n+  flexShrink: 0,\n+  transition:\n+    theme.transitions?.create?.('fill', {\n+      duration: theme.transitions?.duration?.shorter,\n+    }) ?? 'fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n+  fontSize: {\n+    inherit: 'inherit',\n+    small: theme.typography?.pxToRem?.(20) || '1.25rem',\n+    medium: theme.typography?.pxToRem?.(24) || '1.5rem',\n+    large: theme.typography?.pxToRem?.(35) || '2.1875rem',\n+  }[ownerState.fontSize],\n+  // TODO v5 deprecate, v6 remove for sx\n+  color:\n+    (theme.vars || theme).palette?.[ownerState.color]?.main ??\n+    {\n+      action: (theme.vars || theme).palette?.action?.active,\n+      disabled: (theme.vars || theme).palette?.action?.disabled,\n+      inherit: undefined,\n+    }[ownerState.color] ??\n+    defaultMaterialDesignColors[ownerState.color],\n+}));\n+\n+/**\n+ *\n+ * Demos:\n+ *\n+ * - [Icons](https://mui.com/material-ui/icons/)\n+ * - [Material Icons](https://mui.com/material-ui/material-icons/)\n+ *\n+ * API:\n+ *\n+ * - [SvgIcon API](https://mui.com/material-ui/api/svg-icon/)\n+ */\n+const SvgIcon = React.forwardRef(function SvgIcon(inProps, ref) {",
        "comment_created_at": "2023-01-02T12:08:53+00:00",
        "comment_author": "oliviertassinari",
        "comment_body": "But then, maybe it means that we should solve #21251 and let the developers import `SvgIcon` from the right package?\r\n\r\n```jsx\r\nimport SvgIconMd from '@mui/material/SvgIcon';\r\nimport SvgIconJoy from '@mui/joy/SvgIcon';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\n\r\n<SvgIconMd>\r\n  <EditIcon />\r\n</SvgIconMd>\r\n```\r\n\r\nIt's a fallback method of FontAwesome: https://fontawesome.com/docs/web/use-with/react/add-icons#add-individual-icons-explicitly.",
        "pr_file_module": null
      },
      {
        "comment_id": "1060126660",
        "repo_full_name": "mui/material-ui",
        "pr_number": 35637,
        "pr_file": "packages/mui-icons-material/src/utils/SvgIcon.js",
        "discussion_id": "1059805777",
        "commented_code": "@@ -0,0 +1,237 @@\n+import * as React from 'react';\n+import PropTypes from 'prop-types';\n+import clsx from 'clsx';\n+import {\n+  unstable_capitalize as capitalize,\n+  unstable_composeClasses as composeClasses,\n+} from '@mui/utils';\n+import { styled, useThemeProps } from '@mui/system';\n+import { getSvgIconUtilityClass } from './svgIconClasses';\n+\n+const useUtilityClasses = (ownerState) => {\n+  const { color, fontSize, classes } = ownerState;\n+\n+  const slots = {\n+    root: [\n+      'root',\n+      color !== 'inherit' && `color${capitalize(color)}`,\n+      `fontSize${capitalize(fontSize)}`,\n+    ],\n+  };\n+\n+  return composeClasses(slots, getSvgIconUtilityClass, classes);\n+};\n+\n+const defaultMaterialDesignColors = {\n+  inherit: undefined,\n+  action: 'rgba(0, 0, 0, 0.54)',\n+  disabled: 'rgba(0, 0, 0, 0.26)',\n+  primary: '#1976d2',\n+  secondary: '#9c27b0',\n+  error: '#d32f2f',\n+  info: '#0288d1',\n+  success: '#2e7d32',\n+  warning: '#ed6c02',\n+};\n+\n+const SvgIconRoot = styled('svg', {\n+  name: 'MuiSvgIcon',\n+  slot: 'Root',\n+  overridesResolver: (props, styles) => {\n+    const { ownerState } = props;\n+\n+    return [\n+      styles.root,\n+      ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`],\n+      styles[`fontSize${capitalize(ownerState.fontSize)}`],\n+    ];\n+  },\n+})(({ theme, ownerState }) => ({\n+  userSelect: 'none',\n+  width: '1em',\n+  height: '1em',\n+  display: 'inline-block',\n+  fill: 'currentColor',\n+  flexShrink: 0,\n+  transition:\n+    theme.transitions?.create?.('fill', {\n+      duration: theme.transitions?.duration?.shorter,\n+    }) ?? 'fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n+  fontSize: {\n+    inherit: 'inherit',\n+    small: theme.typography?.pxToRem?.(20) || '1.25rem',\n+    medium: theme.typography?.pxToRem?.(24) || '1.5rem',\n+    large: theme.typography?.pxToRem?.(35) || '2.1875rem',\n+  }[ownerState.fontSize],\n+  // TODO v5 deprecate, v6 remove for sx\n+  color:\n+    (theme.vars || theme).palette?.[ownerState.color]?.main ??\n+    {\n+      action: (theme.vars || theme).palette?.action?.active,\n+      disabled: (theme.vars || theme).palette?.action?.disabled,\n+      inherit: undefined,\n+    }[ownerState.color] ??\n+    defaultMaterialDesignColors[ownerState.color],\n+}));\n+\n+/**\n+ *\n+ * Demos:\n+ *\n+ * - [Icons](https://mui.com/material-ui/icons/)\n+ * - [Material Icons](https://mui.com/material-ui/material-icons/)\n+ *\n+ * API:\n+ *\n+ * - [SvgIcon API](https://mui.com/material-ui/api/svg-icon/)\n+ */\n+const SvgIcon = React.forwardRef(function SvgIcon(inProps, ref) {",
        "comment_created_at": "2023-01-02T16:45:48+00:00",
        "comment_author": "michaldudak",
        "comment_body": "I wouldn't put SvgIcon in the common package, at least in its current shape. It is tailored specifically for Material Design icons (sizes, viewport) and shouldn't be used with arbitrary icons (despite its generic name). If we create another icon set in the future, it can have its own SvgIcon. We could extract the common parts into a Base component if there is a lot of duplication between different packages' versions.\r\n\r\nIn general, I like the approach from #35652 a bit more. It's a change that shouldn't break anyone.",
        "pr_file_module": null
      },
      {
        "comment_id": "1061816233",
        "repo_full_name": "mui/material-ui",
        "pr_number": 35637,
        "pr_file": "packages/mui-icons-material/src/utils/SvgIcon.js",
        "discussion_id": "1059805777",
        "commented_code": "@@ -0,0 +1,237 @@\n+import * as React from 'react';\n+import PropTypes from 'prop-types';\n+import clsx from 'clsx';\n+import {\n+  unstable_capitalize as capitalize,\n+  unstable_composeClasses as composeClasses,\n+} from '@mui/utils';\n+import { styled, useThemeProps } from '@mui/system';\n+import { getSvgIconUtilityClass } from './svgIconClasses';\n+\n+const useUtilityClasses = (ownerState) => {\n+  const { color, fontSize, classes } = ownerState;\n+\n+  const slots = {\n+    root: [\n+      'root',\n+      color !== 'inherit' && `color${capitalize(color)}`,\n+      `fontSize${capitalize(fontSize)}`,\n+    ],\n+  };\n+\n+  return composeClasses(slots, getSvgIconUtilityClass, classes);\n+};\n+\n+const defaultMaterialDesignColors = {\n+  inherit: undefined,\n+  action: 'rgba(0, 0, 0, 0.54)',\n+  disabled: 'rgba(0, 0, 0, 0.26)',\n+  primary: '#1976d2',\n+  secondary: '#9c27b0',\n+  error: '#d32f2f',\n+  info: '#0288d1',\n+  success: '#2e7d32',\n+  warning: '#ed6c02',\n+};\n+\n+const SvgIconRoot = styled('svg', {\n+  name: 'MuiSvgIcon',\n+  slot: 'Root',\n+  overridesResolver: (props, styles) => {\n+    const { ownerState } = props;\n+\n+    return [\n+      styles.root,\n+      ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`],\n+      styles[`fontSize${capitalize(ownerState.fontSize)}`],\n+    ];\n+  },\n+})(({ theme, ownerState }) => ({\n+  userSelect: 'none',\n+  width: '1em',\n+  height: '1em',\n+  display: 'inline-block',\n+  fill: 'currentColor',\n+  flexShrink: 0,\n+  transition:\n+    theme.transitions?.create?.('fill', {\n+      duration: theme.transitions?.duration?.shorter,\n+    }) ?? 'fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n+  fontSize: {\n+    inherit: 'inherit',\n+    small: theme.typography?.pxToRem?.(20) || '1.25rem',\n+    medium: theme.typography?.pxToRem?.(24) || '1.5rem',\n+    large: theme.typography?.pxToRem?.(35) || '2.1875rem',\n+  }[ownerState.fontSize],\n+  // TODO v5 deprecate, v6 remove for sx\n+  color:\n+    (theme.vars || theme).palette?.[ownerState.color]?.main ??\n+    {\n+      action: (theme.vars || theme).palette?.action?.active,\n+      disabled: (theme.vars || theme).palette?.action?.disabled,\n+      inherit: undefined,\n+    }[ownerState.color] ??\n+    defaultMaterialDesignColors[ownerState.color],\n+}));\n+\n+/**\n+ *\n+ * Demos:\n+ *\n+ * - [Icons](https://mui.com/material-ui/icons/)\n+ * - [Material Icons](https://mui.com/material-ui/material-icons/)\n+ *\n+ * API:\n+ *\n+ * - [SvgIcon API](https://mui.com/material-ui/api/svg-icon/)\n+ */\n+const SvgIcon = React.forwardRef(function SvgIcon(inProps, ref) {",
        "comment_created_at": "2023-01-04T19:28:59+00:00",
        "comment_author": "oliviertassinari",
        "comment_body": "> It is tailored specifically for Material Design icons (sizes, viewport)\r\n\r\nI don't think that these are fundamentally specific to Material Design or Joy UI. We document how it can be used with random SVG path in https://mui.com/material-ui/icons/#font-awesome and are using it for the same use case as well. IMHO, the value of this component is to apply a few better default: attributes, a11y resets, CSS resets, that developer would want. It's also to provide the MUI System style helper. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1062430103",
        "repo_full_name": "mui/material-ui",
        "pr_number": 35637,
        "pr_file": "packages/mui-icons-material/src/utils/SvgIcon.js",
        "discussion_id": "1059805777",
        "commented_code": "@@ -0,0 +1,237 @@\n+import * as React from 'react';\n+import PropTypes from 'prop-types';\n+import clsx from 'clsx';\n+import {\n+  unstable_capitalize as capitalize,\n+  unstable_composeClasses as composeClasses,\n+} from '@mui/utils';\n+import { styled, useThemeProps } from '@mui/system';\n+import { getSvgIconUtilityClass } from './svgIconClasses';\n+\n+const useUtilityClasses = (ownerState) => {\n+  const { color, fontSize, classes } = ownerState;\n+\n+  const slots = {\n+    root: [\n+      'root',\n+      color !== 'inherit' && `color${capitalize(color)}`,\n+      `fontSize${capitalize(fontSize)}`,\n+    ],\n+  };\n+\n+  return composeClasses(slots, getSvgIconUtilityClass, classes);\n+};\n+\n+const defaultMaterialDesignColors = {\n+  inherit: undefined,\n+  action: 'rgba(0, 0, 0, 0.54)',\n+  disabled: 'rgba(0, 0, 0, 0.26)',\n+  primary: '#1976d2',\n+  secondary: '#9c27b0',\n+  error: '#d32f2f',\n+  info: '#0288d1',\n+  success: '#2e7d32',\n+  warning: '#ed6c02',\n+};\n+\n+const SvgIconRoot = styled('svg', {\n+  name: 'MuiSvgIcon',\n+  slot: 'Root',\n+  overridesResolver: (props, styles) => {\n+    const { ownerState } = props;\n+\n+    return [\n+      styles.root,\n+      ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`],\n+      styles[`fontSize${capitalize(ownerState.fontSize)}`],\n+    ];\n+  },\n+})(({ theme, ownerState }) => ({\n+  userSelect: 'none',\n+  width: '1em',\n+  height: '1em',\n+  display: 'inline-block',\n+  fill: 'currentColor',\n+  flexShrink: 0,\n+  transition:\n+    theme.transitions?.create?.('fill', {\n+      duration: theme.transitions?.duration?.shorter,\n+    }) ?? 'fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n+  fontSize: {\n+    inherit: 'inherit',\n+    small: theme.typography?.pxToRem?.(20) || '1.25rem',\n+    medium: theme.typography?.pxToRem?.(24) || '1.5rem',\n+    large: theme.typography?.pxToRem?.(35) || '2.1875rem',\n+  }[ownerState.fontSize],\n+  // TODO v5 deprecate, v6 remove for sx\n+  color:\n+    (theme.vars || theme).palette?.[ownerState.color]?.main ??\n+    {\n+      action: (theme.vars || theme).palette?.action?.active,\n+      disabled: (theme.vars || theme).palette?.action?.disabled,\n+      inherit: undefined,\n+    }[ownerState.color] ??\n+    defaultMaterialDesignColors[ownerState.color],\n+}));\n+\n+/**\n+ *\n+ * Demos:\n+ *\n+ * - [Icons](https://mui.com/material-ui/icons/)\n+ * - [Material Icons](https://mui.com/material-ui/material-icons/)\n+ *\n+ * API:\n+ *\n+ * - [SvgIcon API](https://mui.com/material-ui/api/svg-icon/)\n+ */\n+const SvgIcon = React.forwardRef(function SvgIcon(inProps, ref) {",
        "comment_created_at": "2023-01-05T12:41:23+00:00",
        "comment_author": "michaldudak",
        "comment_body": "We can publish a generic SvgIcon without the defaults tailored for Material Icons and icon set-specific versions so the sizes don't have to be overridden.",
        "pr_file_module": null
      },
      {
        "comment_id": "1065497664",
        "repo_full_name": "mui/material-ui",
        "pr_number": 35637,
        "pr_file": "packages/mui-icons-material/src/utils/SvgIcon.js",
        "discussion_id": "1059805777",
        "commented_code": "@@ -0,0 +1,237 @@\n+import * as React from 'react';\n+import PropTypes from 'prop-types';\n+import clsx from 'clsx';\n+import {\n+  unstable_capitalize as capitalize,\n+  unstable_composeClasses as composeClasses,\n+} from '@mui/utils';\n+import { styled, useThemeProps } from '@mui/system';\n+import { getSvgIconUtilityClass } from './svgIconClasses';\n+\n+const useUtilityClasses = (ownerState) => {\n+  const { color, fontSize, classes } = ownerState;\n+\n+  const slots = {\n+    root: [\n+      'root',\n+      color !== 'inherit' && `color${capitalize(color)}`,\n+      `fontSize${capitalize(fontSize)}`,\n+    ],\n+  };\n+\n+  return composeClasses(slots, getSvgIconUtilityClass, classes);\n+};\n+\n+const defaultMaterialDesignColors = {\n+  inherit: undefined,\n+  action: 'rgba(0, 0, 0, 0.54)',\n+  disabled: 'rgba(0, 0, 0, 0.26)',\n+  primary: '#1976d2',\n+  secondary: '#9c27b0',\n+  error: '#d32f2f',\n+  info: '#0288d1',\n+  success: '#2e7d32',\n+  warning: '#ed6c02',\n+};\n+\n+const SvgIconRoot = styled('svg', {\n+  name: 'MuiSvgIcon',\n+  slot: 'Root',\n+  overridesResolver: (props, styles) => {\n+    const { ownerState } = props;\n+\n+    return [\n+      styles.root,\n+      ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`],\n+      styles[`fontSize${capitalize(ownerState.fontSize)}`],\n+    ];\n+  },\n+})(({ theme, ownerState }) => ({\n+  userSelect: 'none',\n+  width: '1em',\n+  height: '1em',\n+  display: 'inline-block',\n+  fill: 'currentColor',\n+  flexShrink: 0,\n+  transition:\n+    theme.transitions?.create?.('fill', {\n+      duration: theme.transitions?.duration?.shorter,\n+    }) ?? 'fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n+  fontSize: {\n+    inherit: 'inherit',\n+    small: theme.typography?.pxToRem?.(20) || '1.25rem',\n+    medium: theme.typography?.pxToRem?.(24) || '1.5rem',\n+    large: theme.typography?.pxToRem?.(35) || '2.1875rem',\n+  }[ownerState.fontSize],\n+  // TODO v5 deprecate, v6 remove for sx\n+  color:\n+    (theme.vars || theme).palette?.[ownerState.color]?.main ??\n+    {\n+      action: (theme.vars || theme).palette?.action?.active,\n+      disabled: (theme.vars || theme).palette?.action?.disabled,\n+      inherit: undefined,\n+    }[ownerState.color] ??\n+    defaultMaterialDesignColors[ownerState.color],\n+}));\n+\n+/**\n+ *\n+ * Demos:\n+ *\n+ * - [Icons](https://mui.com/material-ui/icons/)\n+ * - [Material Icons](https://mui.com/material-ui/material-icons/)\n+ *\n+ * API:\n+ *\n+ * - [SvgIcon API](https://mui.com/material-ui/api/svg-icon/)\n+ */\n+const SvgIcon = React.forwardRef(function SvgIcon(inProps, ref) {",
        "comment_created_at": "2023-01-10T08:54:13+00:00",
        "comment_author": "mnajdova",
        "comment_body": "> But then, maybe it means that we should solve https://github.com/mui/material-ui/issues/21251 and let the developers import SvgIcon from the right package?\r\n> \r\n> ```\r\n> import SvgIconMd from '@mui/material/SvgIcon';\r\n> import SvgIconJoy from '@mui/joy/SvgIcon';\r\n> import EditIcon from '@mui/icons-material/Edit';\r\n> \r\n> <SvgIconMd>\r\n>   <EditIcon />\r\n> </SvgIconMd>\r\n> ```\r\n\r\nWhile this is great for a fallback method, I don't think this should be the default for a icons package we provide. I would rather have two icons packages for material & joy instead of this. However, compared to this, I think the PR's solution is still a good enough replacement.\r\n\r\n+1 for exporting an `SvgIcon` for itegrating with third party icon sets.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1771263041",
    "pr_number": 43606,
    "pr_file": "packages/mui-material/src/TextField/TextField.js",
    "created_at": "2024-09-23T11:52:57+00:00",
    "commented_code": "const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1771263041",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43606,
        "pr_file": "packages/mui-material/src/TextField/TextField.js",
        "discussion_id": "1771263041",
        "commented_code": "@@ -142,12 +142,30 @@ const TextField = React.forwardRef(function TextField(inProps, ref) {\n   const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
        "comment_created_at": "2024-09-23T11:52:57+00:00",
        "comment_author": "aarongarciah",
        "comment_body": "Are we doing these checks in other components as well? Do we have some kind of helper for this?",
        "pr_file_module": null
      },
      {
        "comment_id": "1771270831",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43606,
        "pr_file": "packages/mui-material/src/TextField/TextField.js",
        "discussion_id": "1771263041",
        "commented_code": "@@ -142,12 +142,30 @@ const TextField = React.forwardRef(function TextField(inProps, ref) {\n   const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
        "comment_created_at": "2024-09-23T11:58:21+00:00",
        "comment_author": "sai6855",
        "comment_body": "As far as I know, other components **don't** have these checks. (Also We don't have any issues reported yet on other components)\r\n\r\n Instead of creating new helper, I'm thinking it's better to handle this in useSlotProps hook, so that all slots related logic will be in one place",
        "pr_file_module": null
      },
      {
        "comment_id": "1780649969",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43606,
        "pr_file": "packages/mui-material/src/TextField/TextField.js",
        "discussion_id": "1771263041",
        "commented_code": "@@ -142,12 +142,30 @@ const TextField = React.forwardRef(function TextField(inProps, ref) {\n   const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
        "comment_created_at": "2024-09-30T08:26:12+00:00",
        "comment_author": "aarongarciah",
        "comment_body": "Thoughts @DiegoAndai?",
        "pr_file_module": null
      },
      {
        "comment_id": "1788087087",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43606,
        "pr_file": "packages/mui-material/src/TextField/TextField.js",
        "discussion_id": "1771263041",
        "commented_code": "@@ -142,12 +142,30 @@ const TextField = React.forwardRef(function TextField(inProps, ref) {\n   const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
        "comment_created_at": "2024-10-04T17:51:39+00:00",
        "comment_author": "DiegoAndai",
        "comment_body": "The `useSlot` hook already has merging strategies implemented, but I think the problem here is that the Autocomplete should handle the slot props better:\r\n\r\n- Refactor `Autocomplete` to use `slotProps` instead of `InputProps` and `inputProps`\r\n- Inside `Autocomplete`, merge `slotProps.input` and `slotProps.htmlInput`\r\n\r\n```js\r\nconst [HtmlInputSlot, htmlInputProps] = useSlot('htmlInput', {\r\n    elementType: 'input',\r\n    externalForwardedProps, // already defined above\r\n    additionalProps: {\r\n        disabled,\r\n        readOnly,\r\n        ...getInputProps(),\r\n    },\r\n    className: classes.input,\r\n    ownerState,\r\n  });\r\n\r\n// ...\r\n\r\n// line 730\r\n    {renderInput(\r\n     // ...\r\n     // line 778\r\n    slotProps: {\r\n        htmlInput: htmlInputProps,\r\n    },\r\n},\r\n```\r\n\r\nI haven't tested this, but it should be something similar to the code above.\r\n\r\nThis will be a complex PR, but in the end, the result should be the slots pattern properly implemented in the `Autocomplete` component.\r\n\r\nWe're still discussing if the slots pattern needs changes, cc: @aarongarciah, so this PR might require changes in the future given that decision.\r\n\r\nDoes that make sense @sai6855?",
        "pr_file_module": null
      },
      {
        "comment_id": "1788524132",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43606,
        "pr_file": "packages/mui-material/src/TextField/TextField.js",
        "discussion_id": "1771263041",
        "commented_code": "@@ -142,12 +142,30 @@ const TextField = React.forwardRef(function TextField(inProps, ref) {\n   const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
        "comment_created_at": "2024-10-05T06:39:46+00:00",
        "comment_author": "sai6855",
        "comment_body": "@DiegoAndai I'm bit confused with this approch. are you imagining `renderInput` would look something like this after refactoring?\r\n\r\n```diff\r\n\r\n  {renderInput({\r\n          id,\r\n          disabled,\r\n          fullWidth: true,\r\n          size: size === 'small' ? 'small' : undefined,\r\n-          InputLabelProps: getInputLabelProps(),\r\n-          InputProps: {\r\n-          },\r\n-         inputProps: {\r\n-        }\r\n+     slotProps:{\r\n+     htmlInput: htmlInputProps // derived from useSLot\r\n+    input: inputProps // derived from useSLot\r\n+    inputLable: inputLabelProps // derived from useSlot\r\n+ } \r\n)}\r\n\r\n```\r\n\r\nAssuming this is the approach you want to take, I'm not sure it is possible to merge `slotProps` from `renderInput` and `slotProps` defined in user land without doing any changes in userland.\r\n\r\nThis is how currently users use `Autocomplete`, after refactoring `params` will have `slotProps` key. If i understand your approch you want `slotProps` in `params` key and `slotProps` in highlighted line to be merged inside `Autocomplete`. As `Autocomplete` component don't have any control over `slotProps` in  highlighted line, is it possible to merge without changes to be done in userland?\r\n\r\n``` diff\r\n<Autocomplete\r\n      value=\"one\"\r\n      open\r\n      options={['one', 'two']}\r\n      renderInput={(params) => (\r\n+      <TextField {...params} autoFocus slotProps={{ htmlInput: { className: 'my-class' } }} />\r\n      )}\r\n    />\r\n```\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1793594835",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43606,
        "pr_file": "packages/mui-material/src/TextField/TextField.js",
        "discussion_id": "1771263041",
        "commented_code": "@@ -142,12 +142,30 @@ const TextField = React.forwardRef(function TextField(inProps, ref) {\n   const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
        "comment_created_at": "2024-10-09T14:05:32+00:00",
        "comment_author": "DiegoAndai",
        "comment_body": "> are you imagining renderInput would look something like this after refactoring?\r\n\r\nYes, exactly that\r\n\r\n> As Autocomplete component don't have any control over slotProps in highlighted line, is it possible to merge without changes to be done in userland?\r\n\r\nI don't understand the issue. Is it that `params` has a `slotProps` key as well, so it's overridden?",
        "pr_file_module": null
      },
      {
        "comment_id": "1793602896",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43606,
        "pr_file": "packages/mui-material/src/TextField/TextField.js",
        "discussion_id": "1771263041",
        "commented_code": "@@ -142,12 +142,30 @@ const TextField = React.forwardRef(function TextField(inProps, ref) {\n   const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
        "comment_created_at": "2024-10-09T14:10:04+00:00",
        "comment_author": "DiegoAndai",
        "comment_body": "Oh ok, I think I see the issue. The Autocomplete structure confused me. Yes, my suggestion is not correct, I was confusing `Autocomplete` slots with `TextField` slots.",
        "pr_file_module": null
      },
      {
        "comment_id": "1793718734",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43606,
        "pr_file": "packages/mui-material/src/TextField/TextField.js",
        "discussion_id": "1771263041",
        "commented_code": "@@ -142,12 +142,30 @@ const TextField = React.forwardRef(function TextField(inProps, ref) {\n   const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
        "comment_created_at": "2024-10-09T15:18:08+00:00",
        "comment_author": "DiegoAndai",
        "comment_body": "@sai6855 I think these should be merged in userland, this was always required, see: https://github.com/mui/material-ui/issues/43573#issuecomment-2402630864.\r\n\r\nLet's wait and see if we can move forward with migrating the usage of `InputProps`, `InputLabelProps` to slotProps in Autocomplete",
        "pr_file_module": null
      },
      {
        "comment_id": "1793755926",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43606,
        "pr_file": "packages/mui-material/src/TextField/TextField.js",
        "discussion_id": "1771263041",
        "commented_code": "@@ -142,12 +142,30 @@ const TextField = React.forwardRef(function TextField(inProps, ref) {\n   const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
        "comment_created_at": "2024-10-09T15:41:29+00:00",
        "comment_author": "sai6855",
        "comment_body": "Got it, apart from migrating *Props to slotProps, i think we should also improve migration guide and if possible add codemod. If `x` team has made a mistake in migrating then we can expect many such users also done same mistake",
        "pr_file_module": null
      },
      {
        "comment_id": "1827529136",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43606,
        "pr_file": "packages/mui-material/src/TextField/TextField.js",
        "discussion_id": "1771263041",
        "commented_code": "@@ -142,12 +142,30 @@ const TextField = React.forwardRef(function TextField(inProps, ref) {\n   const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
        "comment_created_at": "2024-11-04T10:43:02+00:00",
        "comment_author": "sai6855",
        "comment_body": "@DiegoAndai what do you think way forward to this PR?",
        "pr_file_module": null
      },
      {
        "comment_id": "1836705772",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43606,
        "pr_file": "packages/mui-material/src/TextField/TextField.js",
        "discussion_id": "1771263041",
        "commented_code": "@@ -142,12 +142,30 @@ const TextField = React.forwardRef(function TextField(inProps, ref) {\n   const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
        "comment_created_at": "2024-11-11T13:51:26+00:00",
        "comment_author": "DiegoAndai",
        "comment_body": "@sai6855 sorry for the late reply.\r\n\r\nThe path forward for this PR is what I commented here: https://github.com/mui/material-ui/issues/43573#issuecomment-2402630864. We should update Autocomplete to use `slotProps` internally to make it consistent but not merge anything on our side. We should also add documentation explaining what I explained in that same comment: \"When overriding `slotProps.input` for the Autocomplete's TextField, `params.slotProps.input` must be spread\"\r\n\r\nDoes that make sense?",
        "pr_file_module": null
      },
      {
        "comment_id": "1846404150",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43606,
        "pr_file": "packages/mui-material/src/TextField/TextField.js",
        "discussion_id": "1771263041",
        "commented_code": "@@ -142,12 +142,30 @@ const TextField = React.forwardRef(function TextField(inProps, ref) {\n   const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
        "comment_created_at": "2024-11-18T11:10:44+00:00",
        "comment_author": "sai6855",
        "comment_body": "Got it, before implementing i want to confirm one more thing. If we go with above approach we would be breaking `AutocompleteRenderInputParams` type, are you comfortable doing this change b/w majors?\r\n\r\nhttps://github.com/mui/material-ui/blob/5849e4d3b47fe32691a2313b8f18d5e8522a640d/packages/mui-material/src/Autocomplete/Autocomplete.d.ts#L73\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1858729619",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43606,
        "pr_file": "packages/mui-material/src/TextField/TextField.js",
        "discussion_id": "1771263041",
        "commented_code": "@@ -142,12 +142,30 @@ const TextField = React.forwardRef(function TextField(inProps, ref) {\n   const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
        "comment_created_at": "2024-11-26T15:13:23+00:00",
        "comment_author": "DiegoAndai",
        "comment_body": "> If we go with above approach we would be breaking AutocompleteRenderInputParams type\r\n\r\nCould we:\r\n\r\n- Add `slotProps`\r\n- Keep and deprecate `InputProps` and `inputProps`\r\n\r\nInternally, the Autocomplete would have to forward `InputProps` and `inputProps` to `slotProps` accordingly.\r\n\r\nIf that would work, it wouldn't require a breaking change, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "1860015118",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43606,
        "pr_file": "packages/mui-material/src/TextField/TextField.js",
        "discussion_id": "1771263041",
        "commented_code": "@@ -142,12 +142,30 @@ const TextField = React.forwardRef(function TextField(inProps, ref) {\n   const externalForwardedProps = {\n     slots,\n     slotProps: {\n-      input: InputPropsProp,\n-      inputLabel: InputLabelPropsProp,\n-      htmlInput: inputPropsProp,\n-      formHelperText: FormHelperTextPropsProp,\n-      select: SelectPropsProp,\n       ...slotProps,\n+      input:\n+        typeof slotProps.input === 'function'\n+          ? slotProps.input\n+          : { ...(InputPropsProp ?? {}), ...(slotProps.input ?? {}) },",
        "comment_created_at": "2024-11-27T06:34:02+00:00",
        "comment_author": "sai6855",
        "comment_body": "Tried adding `slotProps` here https://github.com/mui/material-ui/pull/43606/files#diff-d626958b0fab135d0026b2cf86b08f733dae8abb98fc406df247b3846dcf8589R788-R794\r\n\r\nI'm struggling to figure out how to add `slotProps` without breaking existing apps. \r\n\r\nFor example, assume currently `Autocomplete` is used as below, `ref` is passed to `InputProps` (on Line 7) and that `ref` is passed to TextField, now after [this](https://github.com/mui/material-ui/pull/43606/files#diff-d626958b0fab135d0026b2cf86b08f733dae8abb98fc406df247b3846dcf8589R788-R794) change , `TextField` doesn't consider `InputProps` on Line 7 since `params` will have `slotProps.input` and nothing gets attached to `ref` that's passed to `InputProps`\r\n\r\n```\r\n1      const ref = React.createRef();\r\n2     render(\r\n3        <Autocomplete\r\n4          onOpen={handleOpen}\r\n5         options={['one']}\r\n6          renderInput={(params) => (\r\n7            <TextField {...params} InputProps={{ ...params.InputProps, ref }} />\r\n          )}\r\n        />,\r\n      );\r\n```\r\n\r\nTo make above change work, users need to rewrite `Autocomplete` as below. I'd consider this as breaking change, what do you think, Are you comfortable pushing this change to prod?\r\n\r\n\r\n```\r\n1      const ref = React.createRef();\r\n2     render(\r\n3        <Autocomplete\r\n4          onOpen={handleOpen}\r\n5         options={['one']}\r\n6          renderInput={(params) => (\r\n7            <TextField {...params} slotProps={{...slotProps, input:{...slotProps.input, ref}}}  />\r\n          )}\r\n        />,\r\n      );\r\n```\r\n\r\n ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1101404542",
    "pr_number": 36116,
    "pr_file": "packages/mui-base/src/AutocompleteUnstyled/useAutocomplete.js",
    "created_at": "2023-02-09T12:33:02+00:00",
    "commented_code": "previousProps.filteredOptions &&\n       previousProps.filteredOptions.length !== filteredOptions.length &&\n       (multiple\n-        ? previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val))\n-        : getOptionLabel(previousProps.value ?? '') === getOptionLabel(value ?? ''))\n+        ? value.length === previousProps.value.length &&\n+          previousProps.value.every((val, i) => isOptionEqualToValue(value[i], val))\n+        : isOptionEqualToValue(previousProps.value ?? '', value ?? ''))\n     ) {\n       const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n \n       if (previousHighlightedOption) {\n         const previousHighlightedOptionExists = filteredOptions.some((option) => {\n-          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n+          return isOptionEqualToValue(option, previousHighlightedOption);",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1101404542",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36116,
        "pr_file": "packages/mui-base/src/AutocompleteUnstyled/useAutocomplete.js",
        "discussion_id": "1101404542",
        "commented_code": "@@ -470,14 +470,15 @@ export default function useAutocomplete(props) {\n       previousProps.filteredOptions &&\n       previousProps.filteredOptions.length !== filteredOptions.length &&\n       (multiple\n-        ? previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val))\n-        : getOptionLabel(previousProps.value ?? '') === getOptionLabel(value ?? ''))\n+        ? value.length === previousProps.value.length &&\n+          previousProps.value.every((val, i) => isOptionEqualToValue(value[i], val))\n+        : isOptionEqualToValue(previousProps.value ?? '', value ?? ''))\n     ) {\n       const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n \n       if (previousHighlightedOption) {\n         const previousHighlightedOptionExists = filteredOptions.some((option) => {\n-          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n+          return isOptionEqualToValue(option, previousHighlightedOption);",
        "comment_created_at": "2023-02-09T12:33:02+00:00",
        "comment_author": "oliviertassinari",
        "comment_body": "The second argument was meant to be called with a value, not an option. It's related to #23708 and #31192. Unclear what is right here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1101434027",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36116,
        "pr_file": "packages/mui-base/src/AutocompleteUnstyled/useAutocomplete.js",
        "discussion_id": "1101404542",
        "commented_code": "@@ -470,14 +470,15 @@ export default function useAutocomplete(props) {\n       previousProps.filteredOptions &&\n       previousProps.filteredOptions.length !== filteredOptions.length &&\n       (multiple\n-        ? previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val))\n-        : getOptionLabel(previousProps.value ?? '') === getOptionLabel(value ?? ''))\n+        ? value.length === previousProps.value.length &&\n+          previousProps.value.every((val, i) => isOptionEqualToValue(value[i], val))\n+        : isOptionEqualToValue(previousProps.value ?? '', value ?? ''))\n     ) {\n       const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n \n       if (previousHighlightedOption) {\n         const previousHighlightedOptionExists = filteredOptions.some((option) => {\n-          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n+          return isOptionEqualToValue(option, previousHighlightedOption);",
        "comment_created_at": "2023-02-09T13:01:32+00:00",
        "comment_author": "michaldudak",
        "comment_body": "Ah, ok. We could use something similar to `optionComparer` from Base's useListbox: https://github.com/mui/material-ui/blob/f800c835562da9cc8fa3f7615b32a8e6cc8b31d8/packages/mui-base/src/ListboxUnstyled/useListbox.ts#L35\r\nBut then introducing yet another prop looks like an overkill. I'll leave just the bare minimum to fix the issue here, and we can discuss the approach for changing `getOptionLabel` elsewhere.",
        "pr_file_module": null
      }
    ]
  }
]