[
  {
    "discussion_id": "2095514597",
    "pr_number": 46176,
    "pr_file": "docs/data/material/integrations/interoperability/interoperability.md",
    "created_at": "2025-05-19T11:39:24+00:00",
    "commented_code": "3. Add the `important` option, using the id of your app wrapper. For example, `#__next` for Next.js:\n \n+   For Next.js 13+ (App Router), you must manually add `id=\"__next\"` to your body element:\n+\n+   ```tsx\n+   // app/layout.tsx\n+   <body id=\"__next\">{children}</body>\n+   ```\n+\n+   For older Next.js versions (Pages Router), use `id=\"root\"` instead.",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2095514597",
        "repo_full_name": "mui/material-ui",
        "pr_number": 46176,
        "pr_file": "docs/data/material/integrations/interoperability/interoperability.md",
        "discussion_id": "2095514597",
        "commented_code": "@@ -635,6 +635,15 @@ If you use a different framework, or already have set up your project, follow th\n \n 3. Add the `important` option, using the id of your app wrapper. For example, `#__next` for Next.js:\n \n+   For Next.js 13+ (App Router), you must manually add `id=\"__next\"` to your body element:\n+\n+   ```tsx\n+   // app/layout.tsx\n+   <body id=\"__next\">{children}</body>\n+   ```\n+\n+   For older Next.js versions (Pages Router), use `id=\"root\"` instead.",
        "comment_created_at": "2025-05-19T11:39:24+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "This is incorrect. The difference isn\u2019t between the Next.js pages router and app router. The `id=\"__next\"` is used by **Next.js**, while `id=\"root\"` is used by **Vite** and other SPA frameworks.\r\n\r\nIt's that we need to mention that since Next.js 13+, you need to _manually_ add `id=\"__next\"` to the root element i.e `body`. It isn't automatically added like before. For Vite, the root element typically looks like this:\r\n\r\n```html\r\n<div id=\"root\"></div>\r\n```\r\nSo, the `important` option should use `#__next` for Next.js and `#root` for Vite.",
        "pr_file_module": null
      },
      {
        "comment_id": "2096883972",
        "repo_full_name": "mui/material-ui",
        "pr_number": 46176,
        "pr_file": "docs/data/material/integrations/interoperability/interoperability.md",
        "discussion_id": "2095514597",
        "commented_code": "@@ -635,6 +635,15 @@ If you use a different framework, or already have set up your project, follow th\n \n 3. Add the `important` option, using the id of your app wrapper. For example, `#__next` for Next.js:\n \n+   For Next.js 13+ (App Router), you must manually add `id=\"__next\"` to your body element:\n+\n+   ```tsx\n+   // app/layout.tsx\n+   <body id=\"__next\">{children}</body>\n+   ```\n+\n+   For older Next.js versions (Pages Router), use `id=\"root\"` instead.",
        "comment_created_at": "2025-05-20T04:21:37+00:00",
        "comment_author": "chaitanyasharma1011",
        "comment_body": "Thanks for the clarification @ZeeshanTamboli . Raising the updated PR shortly. Inclusion of Troubleshooting block is okay , or needs to be removed ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2097119552",
        "repo_full_name": "mui/material-ui",
        "pr_number": 46176,
        "pr_file": "docs/data/material/integrations/interoperability/interoperability.md",
        "discussion_id": "2095514597",
        "commented_code": "@@ -635,6 +635,15 @@ If you use a different framework, or already have set up your project, follow th\n \n 3. Add the `important` option, using the id of your app wrapper. For example, `#__next` for Next.js:\n \n+   For Next.js 13+ (App Router), you must manually add `id=\"__next\"` to your body element:\n+\n+   ```tsx\n+   // app/layout.tsx\n+   <body id=\"__next\">{children}</body>\n+   ```\n+\n+   For older Next.js versions (Pages Router), use `id=\"root\"` instead.",
        "comment_created_at": "2025-05-20T06:51:38+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "> Inclusion of Troubleshooting block is okay , or needs to be removed ?\r\n\r\nIt's fine. Just need to tweak point 2 by removing the mentioning of `root` as Next.js ID.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2050776654",
    "pr_number": 45927,
    "pr_file": "docs/data/material/components/init-color-scheme-script/init-color-scheme-script.md",
    "created_at": "2025-04-18T15:32:11+00:00",
    "commented_code": "+---\n+productId: material-ui\n+title: InitColorSchemeScript component\n+components: InitColorSchemeScript\n+githubSource: packages/mui-material/src/InitColorSchemeScript\n+---\n+\n+# InitColorSchemeScript\n+\n+<p class=\"description\">InitColorSchemeScript component removes the dark mode flicker for server-side rendering application.</p>\n+\n+## Introduction\n+\n+`InitColorSchemeScript` component is used to remove the dark mode flicker for server-side rendering (SSR) applications.\n+It is a script that runs before React to attach an attribute based on user preference.\n+\n+It is recommended to use this component whenever:\n+\n+- The application supports light and dark modes.\n+- The application is server rendered (SSR).\n+\n+## Basics\n+\n+You need to enable CSS variables with `colorSchemeSelector: 'data'` in your theme.\n+\n+```js\n+import { ThemeProvider, createTheme } from '@mui/material/styles';\n+\n+const theme = createTheme({\n+  cssVariables: {\n+    colorSchemeSelector: 'data',\n+  },\n+});\n+\n+function App() {\n+  return <ThemeProvider theme={theme}>{/* Your app */}</ThemeProvider>;\n+}\n+```\n+\n+Then, render the `InitColorSchemeScript` component as the first child of the `<body>` tag.\n+\n+Below are the location for rendering `InitColorSchemeScript` component for a specific framework.\n+\n+### Next.js App Router\n+\n+Place the `InitColorSchemeScript` component in the `layout.tsx` file:\n+\n+```js title=\"src/app/layout.tsx\"\n+import InitColorSchemeScript from '@mui/material/InitColorSchemeScript';\n+\n+export default function RootLayout(props: { children: React.ReactNode }) {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <InitColorSchemeScript attribute=\"class\" />\n+        {props.children}\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+### Next.js Pages Router\n+\n+Place the `InitColorSchemeScript` component in the `_document.tsx` file:",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2050776654",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45927,
        "pr_file": "docs/data/material/components/init-color-scheme-script/init-color-scheme-script.md",
        "discussion_id": "2050776654",
        "commented_code": "@@ -0,0 +1,140 @@\n+---\n+productId: material-ui\n+title: InitColorSchemeScript component\n+components: InitColorSchemeScript\n+githubSource: packages/mui-material/src/InitColorSchemeScript\n+---\n+\n+# InitColorSchemeScript\n+\n+<p class=\"description\">InitColorSchemeScript component removes the dark mode flicker for server-side rendering application.</p>\n+\n+## Introduction\n+\n+`InitColorSchemeScript` component is used to remove the dark mode flicker for server-side rendering (SSR) applications.\n+It is a script that runs before React to attach an attribute based on user preference.\n+\n+It is recommended to use this component whenever:\n+\n+- The application supports light and dark modes.\n+- The application is server rendered (SSR).\n+\n+## Basics\n+\n+You need to enable CSS variables with `colorSchemeSelector: 'data'` in your theme.\n+\n+```js\n+import { ThemeProvider, createTheme } from '@mui/material/styles';\n+\n+const theme = createTheme({\n+  cssVariables: {\n+    colorSchemeSelector: 'data',\n+  },\n+});\n+\n+function App() {\n+  return <ThemeProvider theme={theme}>{/* Your app */}</ThemeProvider>;\n+}\n+```\n+\n+Then, render the `InitColorSchemeScript` component as the first child of the `<body>` tag.\n+\n+Below are the location for rendering `InitColorSchemeScript` component for a specific framework.\n+\n+### Next.js App Router\n+\n+Place the `InitColorSchemeScript` component in the `layout.tsx` file:\n+\n+```js title=\"src/app/layout.tsx\"\n+import InitColorSchemeScript from '@mui/material/InitColorSchemeScript';\n+\n+export default function RootLayout(props: { children: React.ReactNode }) {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <InitColorSchemeScript attribute=\"class\" />\n+        {props.children}\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+### Next.js Pages Router\n+\n+Place the `InitColorSchemeScript` component in the `_document.tsx` file:",
        "comment_created_at": "2025-04-18T15:32:11+00:00",
        "comment_author": "mapache-salvaje",
        "comment_body": "nitpick: I think it's helpful to indicate that `_document` is a custom file that you have to create if you don't already have one.\r\n\r\n```suggestion\r\nPlace the `InitColorSchemeScript` component in a custom `_document` file:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2044474352",
    "pr_number": 45906,
    "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
    "created_at": "2025-04-15T12:59:30+00:00",
    "commented_code": "+# Tailwind\u00a0CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material\u00a0UI with Tailwind\u00a0CSS v4.</p>\n+\n+## Frameworks\n+\n+There are 2 steps to integrate Tailwind\u00a0CSS v4 with Material\u00a0UI:\n+\n+1. Configure the styles to generate with `@layer` directive.\n+2. Set up layer order to have `mui` comes before `utilities` layer so that Tailwind\u00a0CSS classes can override Material\u00a0UI styles.\n+\n+If you are using a framework, you can follow the instructions below to set up the integration.\n+\n+### Next.js App Router\n+\n+Follow the [App Router guide](/material-ui/integrations/nextjs/#app-router) and do the following steps:\n+\n+- pass `{ enableCssLayer: true }` to the `options` prop of `AppRouterCacheProvider` component.\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+- configure layer order in the Tailwind\u00a0CSS file.\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+@import 'tailwindcss';\n+```\n+\n+### Next.js Pages Router",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2044474352",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45906,
        "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
        "discussion_id": "2044474352",
        "commented_code": "@@ -0,0 +1,129 @@\n+# Tailwind\u00a0CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material\u00a0UI with Tailwind\u00a0CSS v4.</p>\n+\n+## Frameworks\n+\n+There are 2 steps to integrate Tailwind\u00a0CSS v4 with Material\u00a0UI:\n+\n+1. Configure the styles to generate with `@layer` directive.\n+2. Set up layer order to have `mui` comes before `utilities` layer so that Tailwind\u00a0CSS classes can override Material\u00a0UI styles.\n+\n+If you are using a framework, you can follow the instructions below to set up the integration.\n+\n+### Next.js App Router\n+\n+Follow the [App Router guide](/material-ui/integrations/nextjs/#app-router) and do the following steps:\n+\n+- pass `{ enableCssLayer: true }` to the `options` prop of `AppRouterCacheProvider` component.\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+- configure layer order in the Tailwind\u00a0CSS file.\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+@import 'tailwindcss';\n+```\n+\n+### Next.js Pages Router",
        "comment_created_at": "2025-04-15T12:59:30+00:00",
        "comment_author": "mnajdova",
        "comment_body": "I couldn't make this work, I tried to follow the steps from the Next.js guide and this one, but Tailwind classes were not overriding the MUI styles. It would be great if we can have an example to link (together with the guides), as combining the two guides it's kind of hard to follow. \r\n\r\nAlso, I've created https://github.com/mui/material-ui/issues/45922 with bunch of issues I found on the Next.js guide.",
        "pr_file_module": null
      },
      {
        "comment_id": "2045895900",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45906,
        "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
        "discussion_id": "2044474352",
        "commented_code": "@@ -0,0 +1,129 @@\n+# Tailwind\u00a0CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material\u00a0UI with Tailwind\u00a0CSS v4.</p>\n+\n+## Frameworks\n+\n+There are 2 steps to integrate Tailwind\u00a0CSS v4 with Material\u00a0UI:\n+\n+1. Configure the styles to generate with `@layer` directive.\n+2. Set up layer order to have `mui` comes before `utilities` layer so that Tailwind\u00a0CSS classes can override Material\u00a0UI styles.\n+\n+If you are using a framework, you can follow the instructions below to set up the integration.\n+\n+### Next.js App Router\n+\n+Follow the [App Router guide](/material-ui/integrations/nextjs/#app-router) and do the following steps:\n+\n+- pass `{ enableCssLayer: true }` to the `options` prop of `AppRouterCacheProvider` component.\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+- configure layer order in the Tailwind\u00a0CSS file.\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+@import 'tailwindcss';\n+```\n+\n+### Next.js Pages Router",
        "comment_created_at": "2025-04-16T02:36:47+00:00",
        "comment_author": "siriwatknp",
        "comment_body": "This is expected because we haven't release https://github.com/mui/material-ui/pull/45596.\r\n\r\nUpdated the PR description to make it clear what build to use.",
        "pr_file_module": null
      },
      {
        "comment_id": "2046235298",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45906,
        "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
        "discussion_id": "2044474352",
        "commented_code": "@@ -0,0 +1,129 @@\n+# Tailwind\u00a0CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material\u00a0UI with Tailwind\u00a0CSS v4.</p>\n+\n+## Frameworks\n+\n+There are 2 steps to integrate Tailwind\u00a0CSS v4 with Material\u00a0UI:\n+\n+1. Configure the styles to generate with `@layer` directive.\n+2. Set up layer order to have `mui` comes before `utilities` layer so that Tailwind\u00a0CSS classes can override Material\u00a0UI styles.\n+\n+If you are using a framework, you can follow the instructions below to set up the integration.\n+\n+### Next.js App Router\n+\n+Follow the [App Router guide](/material-ui/integrations/nextjs/#app-router) and do the following steps:\n+\n+- pass `{ enableCssLayer: true }` to the `options` prop of `AppRouterCacheProvider` component.\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+- configure layer order in the Tailwind\u00a0CSS file.\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+@import 'tailwindcss';\n+```\n+\n+### Next.js Pages Router",
        "comment_created_at": "2025-04-16T07:10:36+00:00",
        "comment_author": "mnajdova",
        "comment_body": "Ah, ok, I will update my testing app to use the build from that PR.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049151023",
    "pr_number": 45906,
    "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
    "created_at": "2025-04-17T15:03:24+00:00",
    "commented_code": "+# Tailwind\u00a0CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material\u00a0UI with Tailwind\u00a0CSS v4.</p>\n+\n+## Frameworks\n+\n+There are 2 steps to integrate Tailwind\u00a0CSS v4 with Material\u00a0UI:\n+\n+1. Configure the styles to generate with `@layer` directive.\n+2. Set up layer order to have `mui` comes before `utilities` layer so that Tailwind\u00a0CSS classes can override Material\u00a0UI styles.\n+\n+If you are using a framework, you can follow the instructions below to set up the integration.\n+\n+### Next.js App Router\n+\n+Follow the [App Router guide](/material-ui/integrations/nextjs/#app-router) and do the following steps:\n+\n+- enable the [CSS layer feature](/material-ui/integrations/nextjs/#using-other-styling-solutions) as shown below.\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+- configure layer order in the Tailwind\u00a0CSS file.\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+@import 'tailwindcss';\n+```\n+\n+### Next.js Pages Router\n+\n+Follow the [Pages Router guide](/material-ui/integrations/nextjs/#pages-router) and do the following steps:\n+\n+- enable the [CSS layer feature](/material-ui/integrations/nextjs/#configuration-2) as shown below.",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2049151023",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45906,
        "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
        "discussion_id": "2049151023",
        "commented_code": "@@ -0,0 +1,128 @@\n+# Tailwind\u00a0CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material\u00a0UI with Tailwind\u00a0CSS v4.</p>\n+\n+## Frameworks\n+\n+There are 2 steps to integrate Tailwind\u00a0CSS v4 with Material\u00a0UI:\n+\n+1. Configure the styles to generate with `@layer` directive.\n+2. Set up layer order to have `mui` comes before `utilities` layer so that Tailwind\u00a0CSS classes can override Material\u00a0UI styles.\n+\n+If you are using a framework, you can follow the instructions below to set up the integration.\n+\n+### Next.js App Router\n+\n+Follow the [App Router guide](/material-ui/integrations/nextjs/#app-router) and do the following steps:\n+\n+- enable the [CSS layer feature](/material-ui/integrations/nextjs/#using-other-styling-solutions) as shown below.\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+- configure layer order in the Tailwind\u00a0CSS file.\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+@import 'tailwindcss';\n+```\n+\n+### Next.js Pages Router\n+\n+Follow the [Pages Router guide](/material-ui/integrations/nextjs/#pages-router) and do the following steps:\n+\n+- enable the [CSS layer feature](/material-ui/integrations/nextjs/#configuration-2) as shown below.",
        "comment_created_at": "2025-04-17T15:03:24+00:00",
        "comment_author": "mapache-salvaje",
        "comment_body": "```suggestion\r\n1. Enable the [CSS layer feature](/material-ui/integrations/nextjs/#configuration-2) in a custom `_document`:\r\n```",
        "pr_file_module": null
      }
    ]
  }
]