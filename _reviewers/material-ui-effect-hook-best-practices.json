[
  {
    "discussion_id": "1901426074",
    "pr_number": 44897,
    "pr_file": "packages/mui-utils/src/useTimeout/useTimeout.ts",
    "created_at": "2025-01-03T02:30:14+00:00",
    "commented_code": "export default function useTimeout() {\n   const timeout = useLazyRef(Timeout.create).current;\n \n-  useOnMount(timeout.disposeEffect);\n+  // eslint-disable-next-line react-hooks/exhaustive-deps\n+  useEnhancedEffect(timeout.disposeEffect, []);",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1901426074",
        "repo_full_name": "mui/material-ui",
        "pr_number": 44897,
        "pr_file": "packages/mui-utils/src/useTimeout/useTimeout.ts",
        "discussion_id": "1901426074",
        "commented_code": "@@ -35,7 +35,8 @@ export class Timeout {\n export default function useTimeout() {\n   const timeout = useLazyRef(Timeout.create).current;\n \n-  useOnMount(timeout.disposeEffect);\n+  // eslint-disable-next-line react-hooks/exhaustive-deps\n+  useEnhancedEffect(timeout.disposeEffect, []);",
        "comment_created_at": "2025-01-03T02:30:14+00:00",
        "comment_author": "romgrk",
        "comment_body": "I would use a stable deps like `useOnMount` does:\r\n\r\n```\r\nconst EMPTY = [] as unknown[];\r\n// ...\r\nuseEnhancedEffect(effect, EMPTY);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1770425233",
    "pr_number": 43318,
    "pr_file": "packages/mui-material/src/Modal/useModal.ts",
    "created_at": "2024-09-22T10:10:17+00:00",
    "commented_code": "manager.remove(getModal(), ariaHiddenProp);\n   }, [ariaHiddenProp, manager]);\n \n-  React.useEffect(() => {\n+  // We need useLayoutEffect to make sure\n+  // aria-hidden tags have time to get cleaned up properly\n+  // in handleClose->manager.remove->ariaHiddenElements\n+  // in the case someone unmounts the Modal higher up the tree\n+  React.useLayoutEffect(() => {",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1770425233",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43318,
        "pr_file": "packages/mui-material/src/Modal/useModal.ts",
        "discussion_id": "1770425233",
        "commented_code": "@@ -113,7 +120,11 @@ function useModal(parameters: UseModalParameters): UseModalReturnValue {\n     manager.remove(getModal(), ariaHiddenProp);\n   }, [ariaHiddenProp, manager]);\n \n-  React.useEffect(() => {\n+  // We need useLayoutEffect to make sure\n+  // aria-hidden tags have time to get cleaned up properly\n+  // in handleClose->manager.remove->ariaHiddenElements\n+  // in the case someone unmounts the Modal higher up the tree\n+  React.useLayoutEffect(() => {",
        "comment_created_at": "2024-09-22T10:10:17+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "Are you sure layout effect is absolutely necessary here?",
        "pr_file_module": null
      },
      {
        "comment_id": "1771091493",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43318,
        "pr_file": "packages/mui-material/src/Modal/useModal.ts",
        "discussion_id": "1770425233",
        "commented_code": "@@ -113,7 +120,11 @@ function useModal(parameters: UseModalParameters): UseModalReturnValue {\n     manager.remove(getModal(), ariaHiddenProp);\n   }, [ariaHiddenProp, manager]);\n \n-  React.useEffect(() => {\n+  // We need useLayoutEffect to make sure\n+  // aria-hidden tags have time to get cleaned up properly\n+  // in handleClose->manager.remove->ariaHiddenElements\n+  // in the case someone unmounts the Modal higher up the tree\n+  React.useLayoutEffect(() => {",
        "comment_created_at": "2024-09-23T09:52:30+00:00",
        "comment_author": "Gr3q",
        "comment_body": "Yes, added a test for it in Modal.test.js.",
        "pr_file_module": null
      },
      {
        "comment_id": "1774518117",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43318,
        "pr_file": "packages/mui-material/src/Modal/useModal.ts",
        "discussion_id": "1770425233",
        "commented_code": "@@ -113,7 +120,11 @@ function useModal(parameters: UseModalParameters): UseModalReturnValue {\n     manager.remove(getModal(), ariaHiddenProp);\n   }, [ariaHiddenProp, manager]);\n \n-  React.useEffect(() => {\n+  // We need useLayoutEffect to make sure\n+  // aria-hidden tags have time to get cleaned up properly\n+  // in handleClose->manager.remove->ariaHiddenElements\n+  // in the case someone unmounts the Modal higher up the tree\n+  React.useLayoutEffect(() => {",
        "comment_created_at": "2024-09-25T05:25:56+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "I used our util `useEnhancedEffect` instead which handles SSR as well.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1501716573",
    "pr_number": 41223,
    "pr_file": "packages/mui-system/src/cssVars/useCurrentColorScheme.ts",
    "created_at": "2024-02-24T23:59:42+00:00",
    "commented_code": "// Intentionally use deprecated listener methods to support iOS & old browsers\n     media.addListener(handler);\n     handler(media);\n-\n-    return () => media.removeListener(handler);\n+    return () => {\n+      media.removeListener(handler);\n+    };\n   }, []);\n \n   // Handle when localStorage has changed\n   React.useEffect(() => {\n-    const handleStorage = (event: StorageEvent) => {\n-      const value = event.newValue;\n-      if (\n-        typeof event.key === 'string' &&\n-        event.key.startsWith(colorSchemeStorageKey) &&\n-        (!value || joinedColorSchemes.match(value))\n-      ) {\n-        // If the key is deleted, value will be null then reset color scheme to the default one.\n-        if (event.key.endsWith('light')) {\n-          setColorScheme({ light: value as SupportedColorScheme | null });\n+    if (storageWindow) {",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1501716573",
        "repo_full_name": "mui/material-ui",
        "pr_number": 41223,
        "pr_file": "packages/mui-system/src/cssVars/useCurrentColorScheme.ts",
        "discussion_id": "1501716573",
        "commented_code": "@@ -278,35 +283,41 @@ export default function useCurrentColorScheme<SupportedColorScheme extends strin\n     // Intentionally use deprecated listener methods to support iOS & old browsers\n     media.addListener(handler);\n     handler(media);\n-\n-    return () => media.removeListener(handler);\n+    return () => {\n+      media.removeListener(handler);\n+    };\n   }, []);\n \n   // Handle when localStorage has changed\n   React.useEffect(() => {\n-    const handleStorage = (event: StorageEvent) => {\n-      const value = event.newValue;\n-      if (\n-        typeof event.key === 'string' &&\n-        event.key.startsWith(colorSchemeStorageKey) &&\n-        (!value || joinedColorSchemes.match(value))\n-      ) {\n-        // If the key is deleted, value will be null then reset color scheme to the default one.\n-        if (event.key.endsWith('light')) {\n-          setColorScheme({ light: value as SupportedColorScheme | null });\n+    if (storageWindow) {",
        "comment_created_at": "2024-02-24T23:59:42+00:00",
        "comment_author": "oliviertassinari",
        "comment_body": "Moved this to wrap the maximum possible scope.",
        "pr_file_module": null
      },
      {
        "comment_id": "1502399904",
        "repo_full_name": "mui/material-ui",
        "pr_number": 41223,
        "pr_file": "packages/mui-system/src/cssVars/useCurrentColorScheme.ts",
        "discussion_id": "1501716573",
        "commented_code": "@@ -278,35 +283,41 @@ export default function useCurrentColorScheme<SupportedColorScheme extends strin\n     // Intentionally use deprecated listener methods to support iOS & old browsers\n     media.addListener(handler);\n     handler(media);\n-\n-    return () => media.removeListener(handler);\n+    return () => {\n+      media.removeListener(handler);\n+    };\n   }, []);\n \n   // Handle when localStorage has changed\n   React.useEffect(() => {\n-    const handleStorage = (event: StorageEvent) => {\n-      const value = event.newValue;\n-      if (\n-        typeof event.key === 'string' &&\n-        event.key.startsWith(colorSchemeStorageKey) &&\n-        (!value || joinedColorSchemes.match(value))\n-      ) {\n-        // If the key is deleted, value will be null then reset color scheme to the default one.\n-        if (event.key.endsWith('light')) {\n-          setColorScheme({ light: value as SupportedColorScheme | null });\n+    if (storageWindow) {",
        "comment_created_at": "2024-02-26T10:45:44+00:00",
        "comment_author": "Janpot",
        "comment_body": "Is this operating on the same key as `useLocalStorageState`? Can't it just use the hook instead? I don't think the storage value should be manipulated by anything else, it will definitely lead to bugs.",
        "pr_file_module": null
      },
      {
        "comment_id": "1502513435",
        "repo_full_name": "mui/material-ui",
        "pr_number": 41223,
        "pr_file": "packages/mui-system/src/cssVars/useCurrentColorScheme.ts",
        "discussion_id": "1501716573",
        "commented_code": "@@ -278,35 +283,41 @@ export default function useCurrentColorScheme<SupportedColorScheme extends strin\n     // Intentionally use deprecated listener methods to support iOS & old browsers\n     media.addListener(handler);\n     handler(media);\n-\n-    return () => media.removeListener(handler);\n+    return () => {\n+      media.removeListener(handler);\n+    };\n   }, []);\n \n   // Handle when localStorage has changed\n   React.useEffect(() => {\n-    const handleStorage = (event: StorageEvent) => {\n-      const value = event.newValue;\n-      if (\n-        typeof event.key === 'string' &&\n-        event.key.startsWith(colorSchemeStorageKey) &&\n-        (!value || joinedColorSchemes.match(value))\n-      ) {\n-        // If the key is deleted, value will be null then reset color scheme to the default one.\n-        if (event.key.endsWith('light')) {\n-          setColorScheme({ light: value as SupportedColorScheme | null });\n+    if (storageWindow) {",
        "comment_created_at": "2024-02-26T12:08:21+00:00",
        "comment_author": "oliviertassinari",
        "comment_body": "> Is this operating on the same key as useLocalStorageState?\r\n\r\nIt does, but the TODO comments I have left in the code are to move to a point where the mode is to be handled by `useCurrentColorScheme` and not `useLocalStorageState`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1502557315",
        "repo_full_name": "mui/material-ui",
        "pr_number": 41223,
        "pr_file": "packages/mui-system/src/cssVars/useCurrentColorScheme.ts",
        "discussion_id": "1501716573",
        "commented_code": "@@ -278,35 +283,41 @@ export default function useCurrentColorScheme<SupportedColorScheme extends strin\n     // Intentionally use deprecated listener methods to support iOS & old browsers\n     media.addListener(handler);\n     handler(media);\n-\n-    return () => media.removeListener(handler);\n+    return () => {\n+      media.removeListener(handler);\n+    };\n   }, []);\n \n   // Handle when localStorage has changed\n   React.useEffect(() => {\n-    const handleStorage = (event: StorageEvent) => {\n-      const value = event.newValue;\n-      if (\n-        typeof event.key === 'string' &&\n-        event.key.startsWith(colorSchemeStorageKey) &&\n-        (!value || joinedColorSchemes.match(value))\n-      ) {\n-        // If the key is deleted, value will be null then reset color scheme to the default one.\n-        if (event.key.endsWith('light')) {\n-          setColorScheme({ light: value as SupportedColorScheme | null });\n+    if (storageWindow) {",
        "comment_created_at": "2024-02-26T12:44:23+00:00",
        "comment_author": "Janpot",
        "comment_body": "The way I envisioned this was\r\n\r\n```tsx\r\n// have these hooks available in the docs\r\nfunction usePaletteModeUserPreference() {\r\n  const [mode, setMode] = useLocalStorageState('colorScheme', 'system');\r\n  return { mode, setMode };\r\n}\r\n\r\nfunction useCurrentPaletteMode() {\r\n  const { mode: userMode } = usePaletteModeUserPreference();\r\n  const systemColor = useSystemColor();\r\n  return userMode === 'system' ? systemColor : userMode;\r\n}\r\n\r\n\r\n// for theme provider\r\nconst paletteMode = useCurrentPaletteMode()\r\nconst theme = paletteMode === 'dark' ? darkTheme : lightTheme;\r\n\r\n// anywhere for theme switchers\r\nconst { mode, setMode } = usePaletteModeUserPreference();\r\n<Button active={mode === 'dark'} onClick={() => setMode('light')}>dark</Button>\r\n<Button active={mode === 'light'} onClick={() => setMode('dark')}>light</Button>\r\n```\r\n\r\nThe nice thing about `useLocalStorage` is that it acts as global state, so you don't ever need to add a shared state variable somewhere and create a context for it. Just the hook works anywhere you use it, it handles state outside of React. This system worked very well for the Toolpad app theme switcher. I might be oversimplifying for the docs, I'd have to look deeper into it, there may be blockers to adopt the same way of doing a theme switcher in the core docs",
        "pr_file_module": null
      },
      {
        "comment_id": "1502619827",
        "repo_full_name": "mui/material-ui",
        "pr_number": 41223,
        "pr_file": "packages/mui-system/src/cssVars/useCurrentColorScheme.ts",
        "discussion_id": "1501716573",
        "commented_code": "@@ -278,35 +283,41 @@ export default function useCurrentColorScheme<SupportedColorScheme extends strin\n     // Intentionally use deprecated listener methods to support iOS & old browsers\n     media.addListener(handler);\n     handler(media);\n-\n-    return () => media.removeListener(handler);\n+    return () => {\n+      media.removeListener(handler);\n+    };\n   }, []);\n \n   // Handle when localStorage has changed\n   React.useEffect(() => {\n-    const handleStorage = (event: StorageEvent) => {\n-      const value = event.newValue;\n-      if (\n-        typeof event.key === 'string' &&\n-        event.key.startsWith(colorSchemeStorageKey) &&\n-        (!value || joinedColorSchemes.match(value))\n-      ) {\n-        // If the key is deleted, value will be null then reset color scheme to the default one.\n-        if (event.key.endsWith('light')) {\n-          setColorScheme({ light: value as SupportedColorScheme | null });\n+    if (storageWindow) {",
        "comment_created_at": "2024-02-26T13:32:10+00:00",
        "comment_author": "oliviertassinari",
        "comment_body": "@Janpot Yes but what I see is that the mode is a lot more integrated with MUI System once you use CSS\u00a0Variables and Zero runtime than it was with Emotion (what Toolpad uses).\r\n\r\nMUI System almost needs to completely own that logic. If it's possible to separate things then I'm \ud83d\udcaf for it. I had this feeling that hard to understand how things work because of how closely things are linked together but I don't really see how to simplify things. We have effectively built https://github.com/pacocoursey/next-themes.\r\ncc @siriwatknp.\r\n\r\n",
        "pr_file_module": null
      }
    ]
  }
]