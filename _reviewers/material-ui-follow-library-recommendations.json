[
  {
    "discussion_id": "1295630905",
    "pr_number": 38474,
    "pr_file": "test/e2e/index.test.ts",
    "created_at": "2023-08-16T09:29:17+00:00",
    "commented_code": "});\n \n   describe('<TextField />', () => {\n-    it('should handle `onClick` when clicking on the focused label position', async () => {\n-      await renderFixture('TextField/TextFieldWithOnClick');\n+    it('should fire `onClick` when clicking on the focused label position', async () => {\n+      await renderFixture('TextField/OutlinedTextFieldOnClick');\n \n       // execute the click on the focused label position\n       await page.getByRole('textbox').click({ position: { x: 10, y: 10 } });\n-      await page.waitForSelector('.MuiInputBase-root.Mui-error');\n+      const errorSelector = page.locator('.MuiInputBase-root.Mui-error');\n+      await errorSelector.waitFor();",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1295630905",
        "repo_full_name": "mui/material-ui",
        "pr_number": 38474,
        "pr_file": "test/e2e/index.test.ts",
        "discussion_id": "1295630905",
        "commented_code": "@@ -256,12 +256,13 @@ describe('e2e', () => {\n   });\n \n   describe('<TextField />', () => {\n-    it('should handle `onClick` when clicking on the focused label position', async () => {\n-      await renderFixture('TextField/TextFieldWithOnClick');\n+    it('should fire `onClick` when clicking on the focused label position', async () => {\n+      await renderFixture('TextField/OutlinedTextFieldOnClick');\n \n       // execute the click on the focused label position\n       await page.getByRole('textbox').click({ position: { x: 10, y: 10 } });\n-      await page.waitForSelector('.MuiInputBase-root.Mui-error');\n+      const errorSelector = page.locator('.MuiInputBase-root.Mui-error');\n+      await errorSelector.waitFor();",
        "comment_created_at": "2023-08-16T09:29:17+00:00",
        "comment_author": "LukasTy",
        "comment_body": "Nitpick: could you expand, why do you think that this approach is better than the one it replaces? \ud83e\udd14 \r\nIMHO, it looks somewhat pointless and way more verbose... \ud83e\udd37 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1295689865",
        "repo_full_name": "mui/material-ui",
        "pr_number": 38474,
        "pr_file": "test/e2e/index.test.ts",
        "discussion_id": "1295630905",
        "commented_code": "@@ -256,12 +256,13 @@ describe('e2e', () => {\n   });\n \n   describe('<TextField />', () => {\n-    it('should handle `onClick` when clicking on the focused label position', async () => {\n-      await renderFixture('TextField/TextFieldWithOnClick');\n+    it('should fire `onClick` when clicking on the focused label position', async () => {\n+      await renderFixture('TextField/OutlinedTextFieldOnClick');\n \n       // execute the click on the focused label position\n       await page.getByRole('textbox').click({ position: { x: 10, y: 10 } });\n-      await page.waitForSelector('.MuiInputBase-root.Mui-error');\n+      const errorSelector = page.locator('.MuiInputBase-root.Mui-error');\n+      await errorSelector.waitFor();",
        "comment_created_at": "2023-08-16T10:21:39+00:00",
        "comment_author": "oliviertassinari",
        "comment_body": "I'm not sure we need this e2e test in the first place. It doesn't harm but I think that the origin of the problem is that `<TextField onClick` should be registered on the root element of the text field, we can't, move it to a lower element as we did in https://github.com/mui/material-ui/pull/36892.",
        "pr_file_module": null
      },
      {
        "comment_id": "1296786970",
        "repo_full_name": "mui/material-ui",
        "pr_number": 38474,
        "pr_file": "test/e2e/index.test.ts",
        "discussion_id": "1295630905",
        "commented_code": "@@ -256,12 +256,13 @@ describe('e2e', () => {\n   });\n \n   describe('<TextField />', () => {\n-    it('should handle `onClick` when clicking on the focused label position', async () => {\n-      await renderFixture('TextField/TextFieldWithOnClick');\n+    it('should fire `onClick` when clicking on the focused label position', async () => {\n+      await renderFixture('TextField/OutlinedTextFieldOnClick');\n \n       // execute the click on the focused label position\n       await page.getByRole('textbox').click({ position: { x: 10, y: 10 } });\n-      await page.waitForSelector('.MuiInputBase-root.Mui-error');\n+      const errorSelector = page.locator('.MuiInputBase-root.Mui-error');\n+      await errorSelector.waitFor();",
        "comment_created_at": "2023-08-17T07:27:23+00:00",
        "comment_author": "mj12albert",
        "comment_body": "> Nitpick: could you expand, why do you think that this approach is better than the one it replaces? \ud83e\udd14 IMHO, it looks somewhat pointless and way more verbose... \ud83e\udd37\r\n\r\n@LukasTy I was looking up this stuff in the playwright docs, they say `waitForSelector` is discouraged ([here](https://playwright.dev/docs/api/class-page#page-wait-for-selector)) so I was just trying out the alternative \ud83d\ude05 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1296787841",
        "repo_full_name": "mui/material-ui",
        "pr_number": 38474,
        "pr_file": "test/e2e/index.test.ts",
        "discussion_id": "1295630905",
        "commented_code": "@@ -256,12 +256,13 @@ describe('e2e', () => {\n   });\n \n   describe('<TextField />', () => {\n-    it('should handle `onClick` when clicking on the focused label position', async () => {\n-      await renderFixture('TextField/TextFieldWithOnClick');\n+    it('should fire `onClick` when clicking on the focused label position', async () => {\n+      await renderFixture('TextField/OutlinedTextFieldOnClick');\n \n       // execute the click on the focused label position\n       await page.getByRole('textbox').click({ position: { x: 10, y: 10 } });\n-      await page.waitForSelector('.MuiInputBase-root.Mui-error');\n+      const errorSelector = page.locator('.MuiInputBase-root.Mui-error');\n+      await errorSelector.waitFor();",
        "comment_created_at": "2023-08-17T07:28:13+00:00",
        "comment_author": "mj12albert",
        "comment_body": "> the origin of the problem is that <TextField onClick should be registered on the root element of the text field, we can't move it to a lower element\r\n\r\n@oliviertassinari I've added another test for this case!",
        "pr_file_module": null
      },
      {
        "comment_id": "1296793434",
        "repo_full_name": "mui/material-ui",
        "pr_number": 38474,
        "pr_file": "test/e2e/index.test.ts",
        "discussion_id": "1295630905",
        "commented_code": "@@ -256,12 +256,13 @@ describe('e2e', () => {\n   });\n \n   describe('<TextField />', () => {\n-    it('should handle `onClick` when clicking on the focused label position', async () => {\n-      await renderFixture('TextField/TextFieldWithOnClick');\n+    it('should fire `onClick` when clicking on the focused label position', async () => {\n+      await renderFixture('TextField/OutlinedTextFieldOnClick');\n \n       // execute the click on the focused label position\n       await page.getByRole('textbox').click({ position: { x: 10, y: 10 } });\n-      await page.waitForSelector('.MuiInputBase-root.Mui-error');\n+      const errorSelector = page.locator('.MuiInputBase-root.Mui-error');\n+      await errorSelector.waitFor();",
        "comment_created_at": "2023-08-17T07:33:16+00:00",
        "comment_author": "LukasTy",
        "comment_body": "> I was looking up this stuff in the playwright docs, they say `waitForSelector` is discouraged ([here](https://playwright.dev/docs/api/class-page#page-wait-for-selector)) so I was just trying out the alternative \ud83d\ude05\r\n\r\nOh. My bad, I must have mixed those up, because I remembered this suggestion the other way around... \ud83d\ude48 \r\nAnyway, I'd still prefer the API and cleanliness of the `waitForSelector` solution, but going with the recommended approach is always the safest choice. \ud83d\udc4c \r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1578415519",
    "pr_number": 41638,
    "pr_file": "test/e2e/index.test.ts",
    "created_at": "2024-04-24T19:32:14+00:00",
    "commented_code": "expect(pageErrors.length).to.equal(0);\n     });\n+\n+    it('should not glitch when resizing', async () => {\n+      await renderFixture('TextareaAutosize/BasicTextareaAutosize');\n+\n+      const textarea = await screen.getByTestId('textarea')!;\n+\n+      // Get the element's dimensions\n+      const { x, y, width, height } = (await textarea.boundingBox())!;\n+\n+      // Calculate coordinates of bottom-right corner\n+      const bottomRightX = x + width;\n+      const bottomRightY = y + height;\n+\n+      // Get the initial height of textarea as a number\n+      const initialHeight = await textarea.evaluate((event) => parseFloat(event.style.height));\n+\n+      // Move the mouse to the bottom-right corner, adjusting slightly to grab the resize handle\n+      await page.mouse.move(bottomRightX - 5, bottomRightY - 5);\n+\n+      // Simulate a double click without releasing the mouse button (mouseup) to grab the resize handle",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1578415519",
        "repo_full_name": "mui/material-ui",
        "pr_number": 41638,
        "pr_file": "test/e2e/index.test.ts",
        "discussion_id": "1578415519",
        "commented_code": "@@ -276,6 +276,38 @@ describe('e2e', () => {\n \n       expect(pageErrors.length).to.equal(0);\n     });\n+\n+    it('should not glitch when resizing', async () => {\n+      await renderFixture('TextareaAutosize/BasicTextareaAutosize');\n+\n+      const textarea = await screen.getByTestId('textarea')!;\n+\n+      // Get the element's dimensions\n+      const { x, y, width, height } = (await textarea.boundingBox())!;\n+\n+      // Calculate coordinates of bottom-right corner\n+      const bottomRightX = x + width;\n+      const bottomRightY = y + height;\n+\n+      // Get the initial height of textarea as a number\n+      const initialHeight = await textarea.evaluate((event) => parseFloat(event.style.height));\n+\n+      // Move the mouse to the bottom-right corner, adjusting slightly to grab the resize handle\n+      await page.mouse.move(bottomRightX - 5, bottomRightY - 5);\n+\n+      // Simulate a double click without releasing the mouse button (mouseup) to grab the resize handle",
        "comment_created_at": "2024-04-24T19:32:14+00:00",
        "comment_author": "DiegoAndai",
        "comment_body": "Is there a particular reason a double click is needed?",
        "pr_file_module": null
      },
      {
        "comment_id": "1579022796",
        "repo_full_name": "mui/material-ui",
        "pr_number": 41638,
        "pr_file": "test/e2e/index.test.ts",
        "discussion_id": "1578415519",
        "commented_code": "@@ -276,6 +276,38 @@ describe('e2e', () => {\n \n       expect(pageErrors.length).to.equal(0);\n     });\n+\n+    it('should not glitch when resizing', async () => {\n+      await renderFixture('TextareaAutosize/BasicTextareaAutosize');\n+\n+      const textarea = await screen.getByTestId('textarea')!;\n+\n+      // Get the element's dimensions\n+      const { x, y, width, height } = (await textarea.boundingBox())!;\n+\n+      // Calculate coordinates of bottom-right corner\n+      const bottomRightX = x + width;\n+      const bottomRightY = y + height;\n+\n+      // Get the initial height of textarea as a number\n+      const initialHeight = await textarea.evaluate((event) => parseFloat(event.style.height));\n+\n+      // Move the mouse to the bottom-right corner, adjusting slightly to grab the resize handle\n+      await page.mouse.move(bottomRightX - 5, bottomRightY - 5);\n+\n+      // Simulate a double click without releasing the mouse button (mouseup) to grab the resize handle",
        "comment_created_at": "2024-04-25T07:39:21+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "If you test it manually in the documentation preview you'll see that a double-click is necessary to grab the handle for resizing. However, it's essential not to release the mouse button after the second click. Simply clicking once with the mouse doesn't work. I'm using the touchpad on my laptop.\r\n\r\n_Update:_ You're correct. Left-clicking using the mouse button on touchpad and resizing while keeping the button pressed works fine. I've adjusted it to use only `mouse.down()`.",
        "pr_file_module": null
      }
    ]
  }
]