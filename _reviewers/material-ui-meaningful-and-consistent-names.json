[
  {
    "discussion_id": "2167982414",
    "pr_number": 46333,
    "pr_file": "packages/mui-material/src/Tabs/TabsContext.ts",
    "created_at": "2025-06-26T02:39:26+00:00",
    "commented_code": "+'use client';\n+import * as React from 'react';\n+import type { TabProps } from '@mui/material/Tab';\n+import type { TabsProps } from './Tabs';\n+\n+interface TabsContextType {\n+  fullWidth?: boolean;\n+  indicator?: React.JSX.Element;\n+  mounted?: boolean;\n+  selectionFollowsFocus?: TabsProps['selectionFollowsFocus'];\n+  onChange?: TabsProps['onChange'];\n+  textColor?: TabsProps['textColor'];\n+  tabsValue?: TabsProps['value'];",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2167982414",
        "repo_full_name": "mui/material-ui",
        "pr_number": 46333,
        "pr_file": "packages/mui-material/src/Tabs/TabsContext.ts",
        "discussion_id": "2167982414",
        "commented_code": "@@ -0,0 +1,36 @@\n+'use client';\n+import * as React from 'react';\n+import type { TabProps } from '@mui/material/Tab';\n+import type { TabsProps } from './Tabs';\n+\n+interface TabsContextType {\n+  fullWidth?: boolean;\n+  indicator?: React.JSX.Element;\n+  mounted?: boolean;\n+  selectionFollowsFocus?: TabsProps['selectionFollowsFocus'];\n+  onChange?: TabsProps['onChange'];\n+  textColor?: TabsProps['textColor'];\n+  tabsValue?: TabsProps['value'];",
        "comment_created_at": "2025-06-26T02:39:26+00:00",
        "comment_author": "siriwatknp",
        "comment_body": "```suggestion\r\n  value?: TabsProps['value'];\r\n```\r\nI think it's better to use `value` here, it's a standard name with `onChange`. The `TabsContext` will need to be exposed to public.",
        "pr_file_module": null
      },
      {
        "comment_id": "2176446993",
        "repo_full_name": "mui/material-ui",
        "pr_number": 46333,
        "pr_file": "packages/mui-material/src/Tabs/TabsContext.ts",
        "discussion_id": "2167982414",
        "commented_code": "@@ -0,0 +1,36 @@\n+'use client';\n+import * as React from 'react';\n+import type { TabProps } from '@mui/material/Tab';\n+import type { TabsProps } from './Tabs';\n+\n+interface TabsContextType {\n+  fullWidth?: boolean;\n+  indicator?: React.JSX.Element;\n+  mounted?: boolean;\n+  selectionFollowsFocus?: TabsProps['selectionFollowsFocus'];\n+  onChange?: TabsProps['onChange'];\n+  textColor?: TabsProps['textColor'];\n+  tabsValue?: TabsProps['value'];",
        "comment_created_at": "2025-07-01T05:16:53+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2024942807",
    "pr_number": 45765,
    "pr_file": "packages/mui-material/src/Button/Button.d.ts",
    "created_at": "2025-04-02T14:24:05+00:00",
    "commented_code": "AdditionalProps = {},\n > = OverrideProps<ButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n   component?: React.ElementType;\n+} & (({ href: string } & React.AnchorHTMLAttributes<HTMLAnchorElement>) | { href?: undefined });\n+\n+export type ConstrainedButtonProps<\n+  RootComponent extends React.ElementType = ButtonTypeMap['defaultComponent'],\n+  AdditionalProps = {},\n+> = Omit<ButtonProps<RootComponent, AdditionalProps>, 'type'> & {\n+  type?: 'button' | 'submit' | 'reset' | undefined;",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2024942807",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45765,
        "pr_file": "packages/mui-material/src/Button/Button.d.ts",
        "discussion_id": "2024942807",
        "commented_code": "@@ -144,6 +144,13 @@ export type ButtonProps<\n   AdditionalProps = {},\n > = OverrideProps<ButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n   component?: React.ElementType;\n+} & (({ href: string } & React.AnchorHTMLAttributes<HTMLAnchorElement>) | { href?: undefined });\n+\n+export type ConstrainedButtonProps<\n+  RootComponent extends React.ElementType = ButtonTypeMap['defaultComponent'],\n+  AdditionalProps = {},\n+> = Omit<ButtonProps<RootComponent, AdditionalProps>, 'type'> & {\n+  type?: 'button' | 'submit' | 'reset' | undefined;",
        "comment_created_at": "2025-04-02T14:24:05+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "Why is this type needed above in docs/src/pages/premium-themes/onepirate/modules/components/Button.tsx?",
        "pr_file_module": null
      },
      {
        "comment_id": "2025157407",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45765,
        "pr_file": "packages/mui-material/src/Button/Button.d.ts",
        "discussion_id": "2024942807",
        "commented_code": "@@ -144,6 +144,13 @@ export type ButtonProps<\n   AdditionalProps = {},\n > = OverrideProps<ButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n   component?: React.ElementType;\n+} & (({ href: string } & React.AnchorHTMLAttributes<HTMLAnchorElement>) | { href?: undefined });\n+\n+export type ConstrainedButtonProps<\n+  RootComponent extends React.ElementType = ButtonTypeMap['defaultComponent'],\n+  AdditionalProps = {},\n+> = Omit<ButtonProps<RootComponent, AdditionalProps>, 'type'> & {\n+  type?: 'button' | 'submit' | 'reset' | undefined;",
        "comment_created_at": "2025-04-02T16:03:01+00:00",
        "comment_author": "Kartik-Murthy",
        "comment_body": "The `ConstrainedButtonProps` type helps solve a specific TypeScript issue I was encountering. When a Button has an `href` prop, it actually renders as an anchor (`<a>`) tag instead of a button element, and should accept props like` target` that are valid for anchors.\r\n\r\nPreviously, TypeScript was showing errors like 'Property target does not exist' during `pnpm typescript` execution because the type definition wasn't properly handling this dual button/anchor behavior. The `ConstrainedButtonProps` type fixes this by correctly typing the component based on whether it's being used as a button or an anchor link.\r\n\r\nThis ensures we get proper type checking while still maintaining the flexibility of the component.",
        "pr_file_module": null
      },
      {
        "comment_id": "2028541425",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45765,
        "pr_file": "packages/mui-material/src/Button/Button.d.ts",
        "discussion_id": "2024942807",
        "commented_code": "@@ -144,6 +144,13 @@ export type ButtonProps<\n   AdditionalProps = {},\n > = OverrideProps<ButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n   component?: React.ElementType;\n+} & (({ href: string } & React.AnchorHTMLAttributes<HTMLAnchorElement>) | { href?: undefined });\n+\n+export type ConstrainedButtonProps<\n+  RootComponent extends React.ElementType = ButtonTypeMap['defaultComponent'],\n+  AdditionalProps = {},\n+> = Omit<ButtonProps<RootComponent, AdditionalProps>, 'type'> & {\n+  type?: 'button' | 'submit' | 'reset' | undefined;",
        "comment_created_at": "2025-04-04T10:18:45+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "This still doesn't reply my question. It's not about `a` tag here, it is the `type` attribute that is redefined and why you need to have a new TS type `ConstrainedButtonProps` which is used in `docs/src/pages/premium-themes/onepirate/modules/components/Button.tsx` file. Why `ButtonProps` can't be used there like earlier? Why is there an error with `ButtonProps` in that file?",
        "pr_file_module": null
      },
      {
        "comment_id": "2028589945",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45765,
        "pr_file": "packages/mui-material/src/Button/Button.d.ts",
        "discussion_id": "2024942807",
        "commented_code": "@@ -144,6 +144,13 @@ export type ButtonProps<\n   AdditionalProps = {},\n > = OverrideProps<ButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n   component?: React.ElementType;\n+} & (({ href: string } & React.AnchorHTMLAttributes<HTMLAnchorElement>) | { href?: undefined });\n+\n+export type ConstrainedButtonProps<\n+  RootComponent extends React.ElementType = ButtonTypeMap['defaultComponent'],\n+  AdditionalProps = {},\n+> = Omit<ButtonProps<RootComponent, AdditionalProps>, 'type'> & {\n+  type?: 'button' | 'submit' | 'reset' | undefined;",
        "comment_created_at": "2025-04-04T10:55:29+00:00",
        "comment_author": "Kartik-Murthy",
        "comment_body": "The reason to use `ConstrainedButtonProps` instead of the original `ButtonProps` comes down to handling two separate type issues simultaneously:\r\n\r\n- First, the error \"Property '`target`' does not exist\" occurred because the original `ButtonProps` didn't properly handle anchor attributes when a button had an href prop. The updated `ButtonProps` fixes this by adding the `React.AnchorHTMLAttributes` only when `href` is of type `string`.\r\n\r\n- However, this fix created another potential issue - the updated `ButtonProps` would allow any string value for the `type` attribute, not just the valid HTML button types ('button', 'submit', 'reset').\r\n\r\n`ConstrainedButtonProps` solves both problems. It:\r\n\r\n- Builds on top of the updated `ButtonProps` so it inherits the proper handling of anchor attributes\r\n\r\n- Restricts the `type` attribute to only valid HTML button types\r\n\r\nUsing the original `ButtonProps` would have left us with the \"target not existing\" error, while using just the updated `ButtonProps` without constraining would have fixed that error but allowed invalid `type` values.\r\n\r\nThat's why we needed this new type specifically in the onepirate theme's Button component - to ensure both type safety for anchor attributes AND proper constraints on the button type attribute.",
        "pr_file_module": null
      },
      {
        "comment_id": "2028799193",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45765,
        "pr_file": "packages/mui-material/src/Button/Button.d.ts",
        "discussion_id": "2024942807",
        "commented_code": "@@ -144,6 +144,13 @@ export type ButtonProps<\n   AdditionalProps = {},\n > = OverrideProps<ButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n   component?: React.ElementType;\n+} & (({ href: string } & React.AnchorHTMLAttributes<HTMLAnchorElement>) | { href?: undefined });\n+\n+export type ConstrainedButtonProps<\n+  RootComponent extends React.ElementType = ButtonTypeMap['defaultComponent'],\n+  AdditionalProps = {},\n+> = Omit<ButtonProps<RootComponent, AdditionalProps>, 'type'> & {\n+  type?: 'button' | 'submit' | 'reset' | undefined;",
        "comment_created_at": "2025-04-04T13:17:47+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "> However, this fix created another potential issue - the updated `ButtonProps` would allow any string value for the `type` attribute, not just the valid HTML button types ('button', 'submit', 'reset').\r\n\r\nWhy the updated `ButtonProps` is allowing any string value for the `type` atrribute instead of the valid HTML button types?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2029801729",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45765,
        "pr_file": "packages/mui-material/src/Button/Button.d.ts",
        "discussion_id": "2024942807",
        "commented_code": "@@ -144,6 +144,13 @@ export type ButtonProps<\n   AdditionalProps = {},\n > = OverrideProps<ButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n   component?: React.ElementType;\n+} & (({ href: string } & React.AnchorHTMLAttributes<HTMLAnchorElement>) | { href?: undefined });\n+\n+export type ConstrainedButtonProps<\n+  RootComponent extends React.ElementType = ButtonTypeMap['defaultComponent'],\n+  AdditionalProps = {},\n+> = Omit<ButtonProps<RootComponent, AdditionalProps>, 'type'> & {\n+  type?: 'button' | 'submit' | 'reset' | undefined;",
        "comment_created_at": "2025-04-05T07:50:56+00:00",
        "comment_author": "Kartik-Murthy",
        "comment_body": "The error occurs because the updated `ButtonProps` type allows the `type` property to be a `string | undefined` (inherited from `React.ButtonHTMLAttributes`), which is too general. However, the Button component expects the `type` property to be more specific, namely `'button' | 'submit' | 'reset' | undefined`. TypeScript throws an error because it can't assign a general string type to these specific string values.\r\n\r\nTo fix this, I created a new type, `ConstrainedButtonProps`, which omits the generic type property from `ButtonProps` and redefines it to restrict it to the valid HTML button types (`'button' | 'submit' | 'reset' | undefined`). This ensures that the type property now matches the expected types for the Button component, avoiding the TypeScript error.",
        "pr_file_module": null
      },
      {
        "comment_id": "2029803158",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45765,
        "pr_file": "packages/mui-material/src/Button/Button.d.ts",
        "discussion_id": "2024942807",
        "commented_code": "@@ -144,6 +144,13 @@ export type ButtonProps<\n   AdditionalProps = {},\n > = OverrideProps<ButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n   component?: React.ElementType;\n+} & (({ href: string } & React.AnchorHTMLAttributes<HTMLAnchorElement>) | { href?: undefined });\n+\n+export type ConstrainedButtonProps<\n+  RootComponent extends React.ElementType = ButtonTypeMap['defaultComponent'],\n+  AdditionalProps = {},\n+> = Omit<ButtonProps<RootComponent, AdditionalProps>, 'type'> & {\n+  type?: 'button' | 'submit' | 'reset' | undefined;",
        "comment_created_at": "2025-04-05T07:57:11+00:00",
        "comment_author": "Kartik-Murthy",
        "comment_body": "I have Refactored my code and with the latest implementation we can now use the `ButtonProps` type again instead of `ConstrainedButtonProps`. This is achieved by breaking down the props into:\r\n\r\n1. `ButtonPropsBase`: This type defines the basic button props that are common to both anchor and non-anchor buttons.\r\n\r\n2. `NonAnchorButtonProps`: This type restricts certain attributes (like `href, target`, etc.) for non-anchor buttons.\r\n \r\n3. `AnchorButtonProps`: This type allows the use of anchor-specific attributes (like `href, target`, etc.) for anchor buttons.\r\n\r\nBy combining these types using a `union` type, the `ButtonProps` type can represent either a non-anchor button or an anchor button, ensuring the appropriate attributes are available depending on whether the button has an `href` or not.\r\n\r\nThis approach is more flexible and enforces proper attribute restrictions, so the error related to the `type` property can be avoided, and we don\u2019t need to use the `ConstrainedButtonProps` anymore.",
        "pr_file_module": null
      },
      {
        "comment_id": "2032617476",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45765,
        "pr_file": "packages/mui-material/src/Button/Button.d.ts",
        "discussion_id": "2024942807",
        "commented_code": "@@ -144,6 +144,13 @@ export type ButtonProps<\n   AdditionalProps = {},\n > = OverrideProps<ButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n   component?: React.ElementType;\n+} & (({ href: string } & React.AnchorHTMLAttributes<HTMLAnchorElement>) | { href?: undefined });\n+\n+export type ConstrainedButtonProps<\n+  RootComponent extends React.ElementType = ButtonTypeMap['defaultComponent'],\n+  AdditionalProps = {},\n+> = Omit<ButtonProps<RootComponent, AdditionalProps>, 'type'> & {\n+  type?: 'button' | 'submit' | 'reset' | undefined;",
        "comment_created_at": "2025-04-08T07:55:29+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "> The error occurs because the updated ButtonProps type allows the type property to be a string | undefined (inherited from React.ButtonHTMLAttributes), which is too general.\r\n\r\nWhat you are saying is wrong. `React.ButtonHTMLAttributes` already does support `type` `\"submit\" | \"reset\" | \"button\" | undefined;`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2033031101",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45765,
        "pr_file": "packages/mui-material/src/Button/Button.d.ts",
        "discussion_id": "2024942807",
        "commented_code": "@@ -144,6 +144,13 @@ export type ButtonProps<\n   AdditionalProps = {},\n > = OverrideProps<ButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n   component?: React.ElementType;\n+} & (({ href: string } & React.AnchorHTMLAttributes<HTMLAnchorElement>) | { href?: undefined });\n+\n+export type ConstrainedButtonProps<\n+  RootComponent extends React.ElementType = ButtonTypeMap['defaultComponent'],\n+  AdditionalProps = {},\n+> = Omit<ButtonProps<RootComponent, AdditionalProps>, 'type'> & {\n+  type?: 'button' | 'submit' | 'reset' | undefined;",
        "comment_created_at": "2025-04-08T11:56:34+00:00",
        "comment_author": "Kartik-Murthy",
        "comment_body": "Sorry for the confusion earlier. What I meant to say is that the issue was actually related to `React.AnchorHTMLAttributes`, not `React.ButtonHTMLAttributes`.\r\n\r\nAfter I made the following change:\r\n\r\n```diff\r\nexport type ButtonProps<\r\n  RootComponent extends React.ElementType = ButtonTypeMap['defaultComponent'],\r\n  AdditionalProps = {},> = OverrideProps<ButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> \r\n  & { component?: React.ElementType;}\r\n++ & (({ href: string } & React.AnchorHTMLAttributes<HTMLAnchorElement>) | { href?: undefined });\r\n\r\n```\r\n\r\nI started getting this error in the `Button` component in docs:\r\n\r\n```typescript\r\nType 'string | undefined' is not assignable to type '\"button\" | \"submit\" | \"reset\" | undefined'.\r\n```\r\n\r\nHere is the error translation for reference: [[link](https://ts-error-translator.vercel.app/?error=CoTwDgpgBA5AQgVwC5IPYDsAKAnVYDOAPAMIA0UA3lAMaoC2YGE6SA-AFxTFQA+UC6ACYQAZgEt0EQQG4oAXwB8MKGPxR0qJFACG+fGIDm6bQCMANtDRQk4aDACSLbBP3UAgimcnkENQDIoRBQMAHkAdyxcAigAkLoxJEIgtHQ4XQhwyLx8cgAiajNdfF9chRiuejoMHGzyuITCADpmsoCAWQBVewBlGwtBYkrqqKJmxqVGgCgoKFBIWCpaBiYWDi5efiFRCSlZOXLk0Iia6Nj4xMPU9MyTnKh8wr0S1oq6KqzTqAARVSQvZDEADcMucSPRGJIWLcAOoJAAWACVRCQFHkCkUAHLaOgQXIbMZQABMAA4oFVsNACXx8uCVkhSuUqGM9oyoMz5OU3OhqHDUNgABLANoAGQ8fzE3iQviaLWUqnUmh0ekMxnMllQ1lssEc4vQrjF-yl-kCyBSNxGdVBlzSxXN2TRj2K+AZAUGb2GtTODTGL06PT6Ujd71uMvGMCmMxmczsi1pkLYnG4fAEwnEkhkHIClztn3qF1NGBtGWOIwdRWe5SDHs+P3w4slQJBDTdEOYSBh8KRIhRZb0WJxeL4BJJZL5lOaGxpy3jLsobOaLICTIXmagXJ5fMFIoNEp8o1lKjUGi0RRVpgs1g1NnmMDzhC+ECQ2jE-S3wpDlzfO8l0rflwAohYOIsKiUB-gW6CARAwFIKBDyYtiuL4hOhIAOyjhS86NJOgLaM42gsKU4bTJGUa2GoqAiFAYBRBA2A2LA14QMoeHQBISxgNoSAShYEakZG0awHWzjoAYGwpts6ZykeiqnkY57qpqN65JKKSDvc+AICY5zqbkFLFPS4lbGmUjEfx-GCTAwkSAY0kKieyryWql5KXYKkQbpmnaQkun6Y+6kSSZgjhkAA)]\r\n\r\nI think the issue arises because `React.AnchorHTMLAttributes<HTMLAnchorElement>` includes a `type` property with a type of `string`, which conflicts with the more specific button `type` (`'button' | 'submit' | 'reset' | undefined`). This causes TypeScript to infer a broader `string | undefined` type for `type`, leading to the error.\r\n\r\nI hope this clarifies the situation. Thank you for your understanding, and please let me know if you have any further questions or suggestions!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1770445485",
    "pr_number": 43318,
    "pr_file": "packages/mui-material/src/Modal/ModalManager.ts",
    "created_at": "2024-09-22T10:18:24+00:00",
    "commented_code": "ariaHidden(modal.modalRef, false);\n     }\n \n-    const hiddenSiblings = getHiddenSiblings(container);\n-    ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);\n+    const hiddenSiblings = getHiddenElements(container);",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1770445485",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43318,
        "pr_file": "packages/mui-material/src/Modal/ModalManager.ts",
        "discussion_id": "1770445485",
        "commented_code": "@@ -227,8 +281,8 @@ export class ModalManager {\n       ariaHidden(modal.modalRef, false);\n     }\n \n-    const hiddenSiblings = getHiddenSiblings(container);\n-    ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);\n+    const hiddenSiblings = getHiddenElements(container);",
        "comment_created_at": "2024-09-22T10:18:24+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "```suggestion\r\n    const hiddenElements = getHiddenElements(container);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1578416635",
    "pr_number": 41638,
    "pr_file": "test/e2e/index.test.ts",
    "created_at": "2024-04-24T19:32:58+00:00",
    "commented_code": "expect(pageErrors.length).to.equal(0);\n     });\n+\n+    it('should not glitch when resizing', async () => {\n+      await renderFixture('TextareaAutosize/BasicTextareaAutosize');\n+\n+      const textarea = await screen.getByTestId('textarea')!;\n+\n+      // Get the element's dimensions\n+      const { x, y, width, height } = (await textarea.boundingBox())!;\n+\n+      // Calculate coordinates of bottom-right corner\n+      const bottomRightX = x + width;\n+      const bottomRightY = y + height;\n+\n+      // Get the initial height of textarea as a number\n+      const initialHeight = await textarea.evaluate((event) => parseFloat(event.style.height));\n+\n+      // Move the mouse to the bottom-right corner, adjusting slightly to grab the resize handle\n+      await page.mouse.move(bottomRightX - 5, bottomRightY - 5);\n+\n+      // Simulate a double click without releasing the mouse button (mouseup) to grab the resize handle\n+      await page.mouse.down();\n+      await page.mouse.up();\n+      await page.mouse.down();\n+\n+      // Move the mouse to resize the textarea\n+      await page.mouse.move(bottomRightX + 50, bottomRightY + 50);\n+\n+      // Assert that the textarea height has increased after resizing\n+      expect(await textarea.evaluate((event) => parseFloat(event.style.height))).to.be.greaterThan(",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1578416635",
        "repo_full_name": "mui/material-ui",
        "pr_number": 41638,
        "pr_file": "test/e2e/index.test.ts",
        "discussion_id": "1578416635",
        "commented_code": "@@ -276,6 +276,38 @@ describe('e2e', () => {\n \n       expect(pageErrors.length).to.equal(0);\n     });\n+\n+    it('should not glitch when resizing', async () => {\n+      await renderFixture('TextareaAutosize/BasicTextareaAutosize');\n+\n+      const textarea = await screen.getByTestId('textarea')!;\n+\n+      // Get the element's dimensions\n+      const { x, y, width, height } = (await textarea.boundingBox())!;\n+\n+      // Calculate coordinates of bottom-right corner\n+      const bottomRightX = x + width;\n+      const bottomRightY = y + height;\n+\n+      // Get the initial height of textarea as a number\n+      const initialHeight = await textarea.evaluate((event) => parseFloat(event.style.height));\n+\n+      // Move the mouse to the bottom-right corner, adjusting slightly to grab the resize handle\n+      await page.mouse.move(bottomRightX - 5, bottomRightY - 5);\n+\n+      // Simulate a double click without releasing the mouse button (mouseup) to grab the resize handle\n+      await page.mouse.down();\n+      await page.mouse.up();\n+      await page.mouse.down();\n+\n+      // Move the mouse to resize the textarea\n+      await page.mouse.move(bottomRightX + 50, bottomRightY + 50);\n+\n+      // Assert that the textarea height has increased after resizing\n+      expect(await textarea.evaluate((event) => parseFloat(event.style.height))).to.be.greaterThan(",
        "comment_created_at": "2024-04-24T19:32:58+00:00",
        "comment_author": "DiegoAndai",
        "comment_body": "Why call the handle `event`? Something like `textareaHandle` would be easier to understand IMO.",
        "pr_file_module": null
      },
      {
        "comment_id": "1579022873",
        "repo_full_name": "mui/material-ui",
        "pr_number": 41638,
        "pr_file": "test/e2e/index.test.ts",
        "discussion_id": "1578416635",
        "commented_code": "@@ -276,6 +276,38 @@ describe('e2e', () => {\n \n       expect(pageErrors.length).to.equal(0);\n     });\n+\n+    it('should not glitch when resizing', async () => {\n+      await renderFixture('TextareaAutosize/BasicTextareaAutosize');\n+\n+      const textarea = await screen.getByTestId('textarea')!;\n+\n+      // Get the element's dimensions\n+      const { x, y, width, height } = (await textarea.boundingBox())!;\n+\n+      // Calculate coordinates of bottom-right corner\n+      const bottomRightX = x + width;\n+      const bottomRightY = y + height;\n+\n+      // Get the initial height of textarea as a number\n+      const initialHeight = await textarea.evaluate((event) => parseFloat(event.style.height));\n+\n+      // Move the mouse to the bottom-right corner, adjusting slightly to grab the resize handle\n+      await page.mouse.move(bottomRightX - 5, bottomRightY - 5);\n+\n+      // Simulate a double click without releasing the mouse button (mouseup) to grab the resize handle\n+      await page.mouse.down();\n+      await page.mouse.up();\n+      await page.mouse.down();\n+\n+      // Move the mouse to resize the textarea\n+      await page.mouse.move(bottomRightX + 50, bottomRightY + 50);\n+\n+      // Assert that the textarea height has increased after resizing\n+      expect(await textarea.evaluate((event) => parseFloat(event.style.height))).to.be.greaterThan(",
        "comment_created_at": "2024-04-25T07:39:25+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "I'm not sure what you mean by `textareaHandle`. But you're right, it shouldn't be `event`. I've updated it to `textareaElement`. According to the documentation here: https://playwright.dev/docs/next/api/class-locator#locator-evaluate, `pageFunction` takes a element as an argument.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1676528613",
    "pr_number": 42767,
    "pr_file": "docs/src/modules/sandbox/CodeSandbox.ts",
    "created_at": "2024-07-12T22:47:35+00:00",
    "commented_code": "[`src/Demo.${ext}`]: {\n       content: demoData.raw,\n     },\n+    // Spread the relative modules\n+    ...(demoData.relativeModules &&\n+      // Transform the relative modules array into an object\n+      demoData.relativeModules.reduce(\n+        (prev, curr) => ({\n+          ...prev,",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1676528613",
        "repo_full_name": "mui/material-ui",
        "pr_number": 42767,
        "pr_file": "docs/src/modules/sandbox/CodeSandbox.ts",
        "discussion_id": "1676528613",
        "commented_code": "@@ -47,6 +47,19 @@ function createReactApp(demoData: DemoData) {\n     [`src/Demo.${ext}`]: {\n       content: demoData.raw,\n     },\n+    // Spread the relative modules\n+    ...(demoData.relativeModules &&\n+      // Transform the relative modules array into an object\n+      demoData.relativeModules.reduce(\n+        (prev, curr) => ({\n+          ...prev,",
        "comment_created_at": "2024-07-12T22:47:35+00:00",
        "comment_author": "oliviertassinari",
        "comment_body": "Usually called accumulator https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#examples, shorten `acc` in most of the codebase:\r\n\r\n```suggestion\r\n        (acc, curr) => ({\r\n          ...acc,\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1998062526",
    "pr_number": 45387,
    "pr_file": "packages/mui-material/src/Autocomplete/Autocomplete.d.ts",
    "created_at": "2025-03-17T07:03:15+00:00",
    "commented_code": "ownerState: AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>,\n   ) => React.ReactNode;\n   /**\n-   * Render the selected value.\n+   * Render the selected value when doing multiple selections.\n+   *\n+   * @deprecated Use `renderValue` prop instead\n    *\n-   * @param {Value} value The `value` provided to the component.\n-   * @param {function} tagProps The tag props.\n+   * @param {Value[]} value The `value` provided to the component.\n+   * @param {function} getTagProps A tag props getter.\n    * @param {object} ownerState The state of the Autocomplete component.\n    * @returns {ReactNode}\n    */\n-  renderSingleValue?: (\n-    value: Value,\n-    tagProps: AutocompleteTagProps,\n+  renderTags?: (\n+    value: Value[],\n+    getTagProps: AutocompleteRenderGetTagProps,\n     ownerState: AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>,\n   ) => React.ReactNode;\n   /**\n-   * Render the selected value when doing multiple selections.\n+   * Renders the selected value(s) as rich content in the input for both single and multiple selections.\n    *\n-   * @param {Value[]} value The `value` provided to the component.\n+   * @param {AutocompleteRenderValue<Value, Multiple, FreeSolo>} value The `value` provided to the component.\n    * @param {function} getTagProps A tag props getter.\n    * @param {object} ownerState The state of the Autocomplete component.\n    * @returns {ReactNode}\n    */\n-  renderTags?: (\n-    value: Value[],\n-    getTagProps: AutocompleteRenderGetTagProps,\n+  renderValue?: (\n+    value: AutocompleteRenderValue<Value, Multiple, FreeSolo>,\n+    getTagProps: AutocompleteRenderValueGetTagProps<Multiple>,",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1998062526",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45387,
        "pr_file": "packages/mui-material/src/Autocomplete/Autocomplete.d.ts",
        "discussion_id": "1998062526",
        "commented_code": "@@ -339,29 +355,31 @@ export interface AutocompleteProps<\n     ownerState: AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>,\n   ) => React.ReactNode;\n   /**\n-   * Render the selected value.\n+   * Render the selected value when doing multiple selections.\n+   *\n+   * @deprecated Use `renderValue` prop instead\n    *\n-   * @param {Value} value The `value` provided to the component.\n-   * @param {function} tagProps The tag props.\n+   * @param {Value[]} value The `value` provided to the component.\n+   * @param {function} getTagProps A tag props getter.\n    * @param {object} ownerState The state of the Autocomplete component.\n    * @returns {ReactNode}\n    */\n-  renderSingleValue?: (\n-    value: Value,\n-    tagProps: AutocompleteTagProps,\n+  renderTags?: (\n+    value: Value[],\n+    getTagProps: AutocompleteRenderGetTagProps,\n     ownerState: AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>,\n   ) => React.ReactNode;\n   /**\n-   * Render the selected value when doing multiple selections.\n+   * Renders the selected value(s) as rich content in the input for both single and multiple selections.\n    *\n-   * @param {Value[]} value The `value` provided to the component.\n+   * @param {AutocompleteRenderValue<Value, Multiple, FreeSolo>} value The `value` provided to the component.\n    * @param {function} getTagProps A tag props getter.\n    * @param {object} ownerState The state of the Autocomplete component.\n    * @returns {ReactNode}\n    */\n-  renderTags?: (\n-    value: Value[],\n-    getTagProps: AutocompleteRenderGetTagProps,\n+  renderValue?: (\n+    value: AutocompleteRenderValue<Value, Multiple, FreeSolo>,\n+    getTagProps: AutocompleteRenderValueGetTagProps<Multiple>,",
        "comment_created_at": "2025-03-17T07:03:15+00:00",
        "comment_author": "michaldudak",
        "comment_body": "Since we're deprecating `renderTags`, wouldn't it make sense to deprecate the whole concept of tags and not mention the term `tag` in code? (@aarongarciah)\r\nIf so, this callback should be renamed.",
        "pr_file_module": null
      },
      {
        "comment_id": "1998085466",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45387,
        "pr_file": "packages/mui-material/src/Autocomplete/Autocomplete.d.ts",
        "discussion_id": "1998062526",
        "commented_code": "@@ -339,29 +355,31 @@ export interface AutocompleteProps<\n     ownerState: AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>,\n   ) => React.ReactNode;\n   /**\n-   * Render the selected value.\n+   * Render the selected value when doing multiple selections.\n+   *\n+   * @deprecated Use `renderValue` prop instead\n    *\n-   * @param {Value} value The `value` provided to the component.\n-   * @param {function} tagProps The tag props.\n+   * @param {Value[]} value The `value` provided to the component.\n+   * @param {function} getTagProps A tag props getter.\n    * @param {object} ownerState The state of the Autocomplete component.\n    * @returns {ReactNode}\n    */\n-  renderSingleValue?: (\n-    value: Value,\n-    tagProps: AutocompleteTagProps,\n+  renderTags?: (\n+    value: Value[],\n+    getTagProps: AutocompleteRenderGetTagProps,\n     ownerState: AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>,\n   ) => React.ReactNode;\n   /**\n-   * Render the selected value when doing multiple selections.\n+   * Renders the selected value(s) as rich content in the input for both single and multiple selections.\n    *\n-   * @param {Value[]} value The `value` provided to the component.\n+   * @param {AutocompleteRenderValue<Value, Multiple, FreeSolo>} value The `value` provided to the component.\n    * @param {function} getTagProps A tag props getter.\n    * @param {object} ownerState The state of the Autocomplete component.\n    * @returns {ReactNode}\n    */\n-  renderTags?: (\n-    value: Value[],\n-    getTagProps: AutocompleteRenderGetTagProps,\n+  renderValue?: (\n+    value: AutocompleteRenderValue<Value, Multiple, FreeSolo>,\n+    getTagProps: AutocompleteRenderValueGetTagProps<Multiple>,",
        "comment_created_at": "2025-03-17T07:22:35+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "I had the same thought. The issue is that `getTagProps` returns properties specific to a Material UI Chip (or tag?), like `disabled`, and `onDelete`. This callback is meant to be spread only when using a _custom_ Material UI Chip. Maybe we should rename it to `getChipProps`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2003532612",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45387,
        "pr_file": "packages/mui-material/src/Autocomplete/Autocomplete.d.ts",
        "discussion_id": "1998062526",
        "commented_code": "@@ -339,29 +355,31 @@ export interface AutocompleteProps<\n     ownerState: AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>,\n   ) => React.ReactNode;\n   /**\n-   * Render the selected value.\n+   * Render the selected value when doing multiple selections.\n+   *\n+   * @deprecated Use `renderValue` prop instead\n    *\n-   * @param {Value} value The `value` provided to the component.\n-   * @param {function} tagProps The tag props.\n+   * @param {Value[]} value The `value` provided to the component.\n+   * @param {function} getTagProps A tag props getter.\n    * @param {object} ownerState The state of the Autocomplete component.\n    * @returns {ReactNode}\n    */\n-  renderSingleValue?: (\n-    value: Value,\n-    tagProps: AutocompleteTagProps,\n+  renderTags?: (\n+    value: Value[],\n+    getTagProps: AutocompleteRenderGetTagProps,\n     ownerState: AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>,\n   ) => React.ReactNode;\n   /**\n-   * Render the selected value when doing multiple selections.\n+   * Renders the selected value(s) as rich content in the input for both single and multiple selections.\n    *\n-   * @param {Value[]} value The `value` provided to the component.\n+   * @param {AutocompleteRenderValue<Value, Multiple, FreeSolo>} value The `value` provided to the component.\n    * @param {function} getTagProps A tag props getter.\n    * @param {object} ownerState The state of the Autocomplete component.\n    * @returns {ReactNode}\n    */\n-  renderTags?: (\n-    value: Value[],\n-    getTagProps: AutocompleteRenderGetTagProps,\n+  renderValue?: (\n+    value: AutocompleteRenderValue<Value, Multiple, FreeSolo>,\n+    getTagProps: AutocompleteRenderValueGetTagProps<Multiple>,",
        "comment_created_at": "2025-03-19T14:47:35+00:00",
        "comment_author": "DiegoAndai",
        "comment_body": "I agree with replacing the term `tag` in our code. I think we can use `item` and explain in the docs what props are provided. We can explain in the docs that these include some props specific to Chip (`onDelete`) but other's that aren't. For example, the `data-tag-index` should be transformed to `data-item-index`, and this will be important to spread regardless of whether the component is a Chip or not.",
        "pr_file_module": null
      },
      {
        "comment_id": "2006895162",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45387,
        "pr_file": "packages/mui-material/src/Autocomplete/Autocomplete.d.ts",
        "discussion_id": "1998062526",
        "commented_code": "@@ -339,29 +355,31 @@ export interface AutocompleteProps<\n     ownerState: AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>,\n   ) => React.ReactNode;\n   /**\n-   * Render the selected value.\n+   * Render the selected value when doing multiple selections.\n+   *\n+   * @deprecated Use `renderValue` prop instead\n    *\n-   * @param {Value} value The `value` provided to the component.\n-   * @param {function} tagProps The tag props.\n+   * @param {Value[]} value The `value` provided to the component.\n+   * @param {function} getTagProps A tag props getter.\n    * @param {object} ownerState The state of the Autocomplete component.\n    * @returns {ReactNode}\n    */\n-  renderSingleValue?: (\n-    value: Value,\n-    tagProps: AutocompleteTagProps,\n+  renderTags?: (\n+    value: Value[],\n+    getTagProps: AutocompleteRenderGetTagProps,\n     ownerState: AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>,\n   ) => React.ReactNode;\n   /**\n-   * Render the selected value when doing multiple selections.\n+   * Renders the selected value(s) as rich content in the input for both single and multiple selections.\n    *\n-   * @param {Value[]} value The `value` provided to the component.\n+   * @param {AutocompleteRenderValue<Value, Multiple, FreeSolo>} value The `value` provided to the component.\n    * @param {function} getTagProps A tag props getter.\n    * @param {object} ownerState The state of the Autocomplete component.\n    * @returns {ReactNode}\n    */\n-  renderTags?: (\n-    value: Value[],\n-    getTagProps: AutocompleteRenderGetTagProps,\n+  renderValue?: (\n+    value: AutocompleteRenderValue<Value, Multiple, FreeSolo>,\n+    getTagProps: AutocompleteRenderValueGetTagProps<Multiple>,",
        "comment_created_at": "2025-03-21T05:55:14+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "@michaldudak @DiegoAndai I've made the changes and updated the docs. I only replaced \"tag\" in the public API. Internally, some methods and variables still use \"tag\" since the deprecated `renderTags` depends on them. Renaming them would mean duplicating methods with the same logic for `renderValue`.",
        "pr_file_module": null
      }
    ]
  }
]