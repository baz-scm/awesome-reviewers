[
  {
    "discussion_id": "1140154162",
    "pr_number": 36472,
    "pr_file": "netlify/functions/feedback-management.js",
    "created_at": "2023-03-17T12:12:08+00:00",
    "commented_code": "+const { WebClient } = require('@slack/web-api');\n+const querystring = require('node:querystring');\n+const { JWT } = require('google-auth-library');\n+const { sheets } = require('@googleapis/sheets');\n+\n+const slackChannelIds = {\n+  'mui-x': 'C04U3R2V9UK',\n+  'mui-core': 'C041SDSF32L',\n+};\n+\n+const spreadSheetsIds = {\n+  forLater: '1NAUTsIcReVylWPby5K0omXWZpgjd9bjxE8V2J-dwPyc',\n+};\n+\n+// Slack API\n+const slackClient = new WebClient(process.env.SLACK_BOT_TOKEN);\n+\n+/**\n+ * @param {object} event\n+ * @param {object} context\n+ */\n+exports.handler = async (event) => {\n+  try {\n+    const { payload } = querystring.parse(event.body);\n+    const data = JSON.parse(decodeURIComponent(payload));\n+\n+    // eslint-disable-next-line no-console\n+    console.log('=== data ===');\n+    // eslint-disable-next-line no-console\n+    console.log(JSON.stringify(data, null, 2));\n+    // eslint-disable-next-line no-console\n+    console.log('============');\n+    switch (data.callback_id) {\n+      case 'send_feedback':\n+        {\n+          // We send the feedback to the appopiate slack channel\n+          const { rating, comment, currentLocationURL, commmentSectionURL, commmentSectionTitle } =\n+            data;\n+\n+          const simpleSlackMessage = [\n+            `New comment ${rating === 1 ? '👍' : ''}${rating === 0 ? '👎' : ''}`,\n+            `>${comment.split('\n').join('\n>')}`,\n+            `sent from ${currentLocationURL}${\n+              commmentSectionTitle\n+                ? ` (from section <${commmentSectionURL}|${commmentSectionTitle})>`\n+                : ''\n+            }`,\n+          ].join('\n\n');\n+\n+          const isDocsX = currentLocationURL.includes('/x/');\n+          await slackClient.chat.postMessage({\n+            channel: slackChannelIds[isDocsX ? 'mui-x' : 'mui-core'],\n+            text: simpleSlackMessage,\n+            as_user: true,\n+          });\n+        }\n+        break;\n+      case 'delete_action':\n+        await slackClient.chat.delete({",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1140154162",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36472,
        "pr_file": "netlify/functions/feedback-management.js",
        "discussion_id": "1140154162",
        "commented_code": "@@ -0,0 +1,130 @@\n+const { WebClient } = require('@slack/web-api');\n+const querystring = require('node:querystring');\n+const { JWT } = require('google-auth-library');\n+const { sheets } = require('@googleapis/sheets');\n+\n+const slackChannelIds = {\n+  'mui-x': 'C04U3R2V9UK',\n+  'mui-core': 'C041SDSF32L',\n+};\n+\n+const spreadSheetsIds = {\n+  forLater: '1NAUTsIcReVylWPby5K0omXWZpgjd9bjxE8V2J-dwPyc',\n+};\n+\n+// Slack API\n+const slackClient = new WebClient(process.env.SLACK_BOT_TOKEN);\n+\n+/**\n+ * @param {object} event\n+ * @param {object} context\n+ */\n+exports.handler = async (event) => {\n+  try {\n+    const { payload } = querystring.parse(event.body);\n+    const data = JSON.parse(decodeURIComponent(payload));\n+\n+    // eslint-disable-next-line no-console\n+    console.log('=== data ===');\n+    // eslint-disable-next-line no-console\n+    console.log(JSON.stringify(data, null, 2));\n+    // eslint-disable-next-line no-console\n+    console.log('============');\n+    switch (data.callback_id) {\n+      case 'send_feedback':\n+        {\n+          // We send the feedback to the appopiate slack channel\n+          const { rating, comment, currentLocationURL, commmentSectionURL, commmentSectionTitle } =\n+            data;\n+\n+          const simpleSlackMessage = [\n+            `New comment ${rating === 1 ? '👍' : ''}${rating === 0 ? '👎' : ''}`,\n+            `>${comment.split('\\n').join('\\n>')}`,\n+            `sent from ${currentLocationURL}${\n+              commmentSectionTitle\n+                ? ` (from section <${commmentSectionURL}|${commmentSectionTitle})>`\n+                : ''\n+            }`,\n+          ].join('\\n\\n');\n+\n+          const isDocsX = currentLocationURL.includes('/x/');\n+          await slackClient.chat.postMessage({\n+            channel: slackChannelIds[isDocsX ? 'mui-x' : 'mui-core'],\n+            text: simpleSlackMessage,\n+            as_user: true,\n+          });\n+        }\n+        break;\n+      case 'delete_action':\n+        await slackClient.chat.delete({",
        "comment_created_at": "2023-03-17T12:12:08+00:00",
        "comment_author": "Janpot",
        "comment_body": "Wouldn't this allow random people to delete slack messages in our org?\r\n\r\nPerhaps this needs some form of authentication?",
        "pr_file_module": null
      },
      {
        "comment_id": "1140177433",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36472,
        "pr_file": "netlify/functions/feedback-management.js",
        "discussion_id": "1140154162",
        "commented_code": "@@ -0,0 +1,130 @@\n+const { WebClient } = require('@slack/web-api');\n+const querystring = require('node:querystring');\n+const { JWT } = require('google-auth-library');\n+const { sheets } = require('@googleapis/sheets');\n+\n+const slackChannelIds = {\n+  'mui-x': 'C04U3R2V9UK',\n+  'mui-core': 'C041SDSF32L',\n+};\n+\n+const spreadSheetsIds = {\n+  forLater: '1NAUTsIcReVylWPby5K0omXWZpgjd9bjxE8V2J-dwPyc',\n+};\n+\n+// Slack API\n+const slackClient = new WebClient(process.env.SLACK_BOT_TOKEN);\n+\n+/**\n+ * @param {object} event\n+ * @param {object} context\n+ */\n+exports.handler = async (event) => {\n+  try {\n+    const { payload } = querystring.parse(event.body);\n+    const data = JSON.parse(decodeURIComponent(payload));\n+\n+    // eslint-disable-next-line no-console\n+    console.log('=== data ===');\n+    // eslint-disable-next-line no-console\n+    console.log(JSON.stringify(data, null, 2));\n+    // eslint-disable-next-line no-console\n+    console.log('============');\n+    switch (data.callback_id) {\n+      case 'send_feedback':\n+        {\n+          // We send the feedback to the appopiate slack channel\n+          const { rating, comment, currentLocationURL, commmentSectionURL, commmentSectionTitle } =\n+            data;\n+\n+          const simpleSlackMessage = [\n+            `New comment ${rating === 1 ? '👍' : ''}${rating === 0 ? '👎' : ''}`,\n+            `>${comment.split('\\n').join('\\n>')}`,\n+            `sent from ${currentLocationURL}${\n+              commmentSectionTitle\n+                ? ` (from section <${commmentSectionURL}|${commmentSectionTitle})>`\n+                : ''\n+            }`,\n+          ].join('\\n\\n');\n+\n+          const isDocsX = currentLocationURL.includes('/x/');\n+          await slackClient.chat.postMessage({\n+            channel: slackChannelIds[isDocsX ? 'mui-x' : 'mui-core'],\n+            text: simpleSlackMessage,\n+            as_user: true,\n+          });\n+        }\n+        break;\n+      case 'delete_action':\n+        await slackClient.chat.delete({",
        "comment_created_at": "2023-03-17T12:33:42+00:00",
        "comment_author": "alexfauquette",
        "comment_body": "If they get access to the `message_ts` yes. Effectively right be a good point to add authentication of the request origine",
        "pr_file_module": null
      },
      {
        "comment_id": "1140207102",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36472,
        "pr_file": "netlify/functions/feedback-management.js",
        "discussion_id": "1140154162",
        "commented_code": "@@ -0,0 +1,130 @@\n+const { WebClient } = require('@slack/web-api');\n+const querystring = require('node:querystring');\n+const { JWT } = require('google-auth-library');\n+const { sheets } = require('@googleapis/sheets');\n+\n+const slackChannelIds = {\n+  'mui-x': 'C04U3R2V9UK',\n+  'mui-core': 'C041SDSF32L',\n+};\n+\n+const spreadSheetsIds = {\n+  forLater: '1NAUTsIcReVylWPby5K0omXWZpgjd9bjxE8V2J-dwPyc',\n+};\n+\n+// Slack API\n+const slackClient = new WebClient(process.env.SLACK_BOT_TOKEN);\n+\n+/**\n+ * @param {object} event\n+ * @param {object} context\n+ */\n+exports.handler = async (event) => {\n+  try {\n+    const { payload } = querystring.parse(event.body);\n+    const data = JSON.parse(decodeURIComponent(payload));\n+\n+    // eslint-disable-next-line no-console\n+    console.log('=== data ===');\n+    // eslint-disable-next-line no-console\n+    console.log(JSON.stringify(data, null, 2));\n+    // eslint-disable-next-line no-console\n+    console.log('============');\n+    switch (data.callback_id) {\n+      case 'send_feedback':\n+        {\n+          // We send the feedback to the appopiate slack channel\n+          const { rating, comment, currentLocationURL, commmentSectionURL, commmentSectionTitle } =\n+            data;\n+\n+          const simpleSlackMessage = [\n+            `New comment ${rating === 1 ? '👍' : ''}${rating === 0 ? '👎' : ''}`,\n+            `>${comment.split('\\n').join('\\n>')}`,\n+            `sent from ${currentLocationURL}${\n+              commmentSectionTitle\n+                ? ` (from section <${commmentSectionURL}|${commmentSectionTitle})>`\n+                : ''\n+            }`,\n+          ].join('\\n\\n');\n+\n+          const isDocsX = currentLocationURL.includes('/x/');\n+          await slackClient.chat.postMessage({\n+            channel: slackChannelIds[isDocsX ? 'mui-x' : 'mui-core'],\n+            text: simpleSlackMessage,\n+            as_user: true,\n+          });\n+        }\n+        break;\n+      case 'delete_action':\n+        await slackClient.chat.delete({",
        "comment_created_at": "2023-03-17T13:01:06+00:00",
        "comment_author": "Janpot",
        "comment_body": "We could configure an API key in the environment and just compare a header/queryparam against it?",
        "pr_file_module": null
      },
      {
        "comment_id": "1142437345",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36472,
        "pr_file": "netlify/functions/feedback-management.js",
        "discussion_id": "1140154162",
        "commented_code": "@@ -0,0 +1,130 @@\n+const { WebClient } = require('@slack/web-api');\n+const querystring = require('node:querystring');\n+const { JWT } = require('google-auth-library');\n+const { sheets } = require('@googleapis/sheets');\n+\n+const slackChannelIds = {\n+  'mui-x': 'C04U3R2V9UK',\n+  'mui-core': 'C041SDSF32L',\n+};\n+\n+const spreadSheetsIds = {\n+  forLater: '1NAUTsIcReVylWPby5K0omXWZpgjd9bjxE8V2J-dwPyc',\n+};\n+\n+// Slack API\n+const slackClient = new WebClient(process.env.SLACK_BOT_TOKEN);\n+\n+/**\n+ * @param {object} event\n+ * @param {object} context\n+ */\n+exports.handler = async (event) => {\n+  try {\n+    const { payload } = querystring.parse(event.body);\n+    const data = JSON.parse(decodeURIComponent(payload));\n+\n+    // eslint-disable-next-line no-console\n+    console.log('=== data ===');\n+    // eslint-disable-next-line no-console\n+    console.log(JSON.stringify(data, null, 2));\n+    // eslint-disable-next-line no-console\n+    console.log('============');\n+    switch (data.callback_id) {\n+      case 'send_feedback':\n+        {\n+          // We send the feedback to the appopiate slack channel\n+          const { rating, comment, currentLocationURL, commmentSectionURL, commmentSectionTitle } =\n+            data;\n+\n+          const simpleSlackMessage = [\n+            `New comment ${rating === 1 ? '👍' : ''}${rating === 0 ? '👎' : ''}`,\n+            `>${comment.split('\\n').join('\\n>')}`,\n+            `sent from ${currentLocationURL}${\n+              commmentSectionTitle\n+                ? ` (from section <${commmentSectionURL}|${commmentSectionTitle})>`\n+                : ''\n+            }`,\n+          ].join('\\n\\n');\n+\n+          const isDocsX = currentLocationURL.includes('/x/');\n+          await slackClient.chat.postMessage({\n+            channel: slackChannelIds[isDocsX ? 'mui-x' : 'mui-core'],\n+            text: simpleSlackMessage,\n+            as_user: true,\n+          });\n+        }\n+        break;\n+      case 'delete_action':\n+        await slackClient.chat.delete({",
        "comment_created_at": "2023-03-20T17:01:19+00:00",
        "comment_author": "alexfauquette",
        "comment_body": "moved to the slack SDK such that it verify that request come from the slack thanks to the signing key",
        "pr_file_module": null
      },
      {
        "comment_id": "1143055163",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36472,
        "pr_file": "netlify/functions/feedback-management.js",
        "discussion_id": "1140154162",
        "commented_code": "@@ -0,0 +1,130 @@\n+const { WebClient } = require('@slack/web-api');\n+const querystring = require('node:querystring');\n+const { JWT } = require('google-auth-library');\n+const { sheets } = require('@googleapis/sheets');\n+\n+const slackChannelIds = {\n+  'mui-x': 'C04U3R2V9UK',\n+  'mui-core': 'C041SDSF32L',\n+};\n+\n+const spreadSheetsIds = {\n+  forLater: '1NAUTsIcReVylWPby5K0omXWZpgjd9bjxE8V2J-dwPyc',\n+};\n+\n+// Slack API\n+const slackClient = new WebClient(process.env.SLACK_BOT_TOKEN);\n+\n+/**\n+ * @param {object} event\n+ * @param {object} context\n+ */\n+exports.handler = async (event) => {\n+  try {\n+    const { payload } = querystring.parse(event.body);\n+    const data = JSON.parse(decodeURIComponent(payload));\n+\n+    // eslint-disable-next-line no-console\n+    console.log('=== data ===');\n+    // eslint-disable-next-line no-console\n+    console.log(JSON.stringify(data, null, 2));\n+    // eslint-disable-next-line no-console\n+    console.log('============');\n+    switch (data.callback_id) {\n+      case 'send_feedback':\n+        {\n+          // We send the feedback to the appopiate slack channel\n+          const { rating, comment, currentLocationURL, commmentSectionURL, commmentSectionTitle } =\n+            data;\n+\n+          const simpleSlackMessage = [\n+            `New comment ${rating === 1 ? '👍' : ''}${rating === 0 ? '👎' : ''}`,\n+            `>${comment.split('\\n').join('\\n>')}`,\n+            `sent from ${currentLocationURL}${\n+              commmentSectionTitle\n+                ? ` (from section <${commmentSectionURL}|${commmentSectionTitle})>`\n+                : ''\n+            }`,\n+          ].join('\\n\\n');\n+\n+          const isDocsX = currentLocationURL.includes('/x/');\n+          await slackClient.chat.postMessage({\n+            channel: slackChannelIds[isDocsX ? 'mui-x' : 'mui-core'],\n+            text: simpleSlackMessage,\n+            as_user: true,\n+          });\n+        }\n+        break;\n+      case 'delete_action':\n+        await slackClient.chat.delete({",
        "comment_created_at": "2023-03-21T08:57:08+00:00",
        "comment_author": "Janpot",
        "comment_body": "Great solution 👍 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1140155125",
    "pr_number": 36472,
    "pr_file": "netlify/functions/feedback-management.js",
    "created_at": "2023-03-17T12:13:16+00:00",
    "commented_code": "+const { WebClient } = require('@slack/web-api');\n+const querystring = require('node:querystring');\n+const { JWT } = require('google-auth-library');\n+const { sheets } = require('@googleapis/sheets');\n+\n+const slackChannelIds = {\n+  'mui-x': 'C04U3R2V9UK',\n+  'mui-core': 'C041SDSF32L',\n+};\n+\n+const spreadSheetsIds = {\n+  forLater: '1NAUTsIcReVylWPby5K0omXWZpgjd9bjxE8V2J-dwPyc',\n+};\n+\n+// Slack API\n+const slackClient = new WebClient(process.env.SLACK_BOT_TOKEN);\n+\n+/**\n+ * @param {object} event\n+ * @param {object} context\n+ */\n+exports.handler = async (event) => {\n+  try {",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1140155125",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36472,
        "pr_file": "netlify/functions/feedback-management.js",
        "discussion_id": "1140155125",
        "commented_code": "@@ -0,0 +1,130 @@\n+const { WebClient } = require('@slack/web-api');\n+const querystring = require('node:querystring');\n+const { JWT } = require('google-auth-library');\n+const { sheets } = require('@googleapis/sheets');\n+\n+const slackChannelIds = {\n+  'mui-x': 'C04U3R2V9UK',\n+  'mui-core': 'C041SDSF32L',\n+};\n+\n+const spreadSheetsIds = {\n+  forLater: '1NAUTsIcReVylWPby5K0omXWZpgjd9bjxE8V2J-dwPyc',\n+};\n+\n+// Slack API\n+const slackClient = new WebClient(process.env.SLACK_BOT_TOKEN);\n+\n+/**\n+ * @param {object} event\n+ * @param {object} context\n+ */\n+exports.handler = async (event) => {\n+  try {",
        "comment_created_at": "2023-03-17T12:13:16+00:00",
        "comment_author": "Janpot",
        "comment_body": "Should these events be a bit more validated, e.g. make sure they are POST requests? I'm also not quite sure how Netlify deals with CORS.",
        "pr_file_module": null
      },
      {
        "comment_id": "1140179299",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36472,
        "pr_file": "netlify/functions/feedback-management.js",
        "discussion_id": "1140155125",
        "commented_code": "@@ -0,0 +1,130 @@\n+const { WebClient } = require('@slack/web-api');\n+const querystring = require('node:querystring');\n+const { JWT } = require('google-auth-library');\n+const { sheets } = require('@googleapis/sheets');\n+\n+const slackChannelIds = {\n+  'mui-x': 'C04U3R2V9UK',\n+  'mui-core': 'C041SDSF32L',\n+};\n+\n+const spreadSheetsIds = {\n+  forLater: '1NAUTsIcReVylWPby5K0omXWZpgjd9bjxE8V2J-dwPyc',\n+};\n+\n+// Slack API\n+const slackClient = new WebClient(process.env.SLACK_BOT_TOKEN);\n+\n+/**\n+ * @param {object} event\n+ * @param {object} context\n+ */\n+exports.handler = async (event) => {\n+  try {",
        "comment_created_at": "2023-03-17T12:35:19+00:00",
        "comment_author": "alexfauquette",
        "comment_body": "For now, it's not planned to add more actions, so I do not plan to distinguish between GET/POST/PULL, ... Is their another reason than semantic behavior?",
        "pr_file_module": null
      },
      {
        "comment_id": "1140206746",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36472,
        "pr_file": "netlify/functions/feedback-management.js",
        "discussion_id": "1140155125",
        "commented_code": "@@ -0,0 +1,130 @@\n+const { WebClient } = require('@slack/web-api');\n+const querystring = require('node:querystring');\n+const { JWT } = require('google-auth-library');\n+const { sheets } = require('@googleapis/sheets');\n+\n+const slackChannelIds = {\n+  'mui-x': 'C04U3R2V9UK',\n+  'mui-core': 'C041SDSF32L',\n+};\n+\n+const spreadSheetsIds = {\n+  forLater: '1NAUTsIcReVylWPby5K0omXWZpgjd9bjxE8V2J-dwPyc',\n+};\n+\n+// Slack API\n+const slackClient = new WebClient(process.env.SLACK_BOT_TOKEN);\n+\n+/**\n+ * @param {object} event\n+ * @param {object} context\n+ */\n+exports.handler = async (event) => {\n+  try {",
        "comment_created_at": "2023-03-17T13:00:43+00:00",
        "comment_author": "Janpot",
        "comment_body": "> Is their another reason than semantic behavior?\r\n\r\nYes, you at least need to refuse GET/HEAD requests for non-idempotent behaviour to avoid someone crafting a link for this request. Links can be followed without user interaction, e.g. bots, retries, prefetches,...\r\nI find that the easiest way is to just refuse any non-POST",
        "pr_file_module": null
      },
      {
        "comment_id": "1142436172",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36472,
        "pr_file": "netlify/functions/feedback-management.js",
        "discussion_id": "1140155125",
        "commented_code": "@@ -0,0 +1,130 @@\n+const { WebClient } = require('@slack/web-api');\n+const querystring = require('node:querystring');\n+const { JWT } = require('google-auth-library');\n+const { sheets } = require('@googleapis/sheets');\n+\n+const slackChannelIds = {\n+  'mui-x': 'C04U3R2V9UK',\n+  'mui-core': 'C041SDSF32L',\n+};\n+\n+const spreadSheetsIds = {\n+  forLater: '1NAUTsIcReVylWPby5K0omXWZpgjd9bjxE8V2J-dwPyc',\n+};\n+\n+// Slack API\n+const slackClient = new WebClient(process.env.SLACK_BOT_TOKEN);\n+\n+/**\n+ * @param {object} event\n+ * @param {object} context\n+ */\n+exports.handler = async (event) => {\n+  try {",
        "comment_created_at": "2023-03-20T17:00:19+00:00",
        "comment_author": "alexfauquette",
        "comment_body": "I moved to a solution where non POST get an early return with a 404",
        "pr_file_module": null
      }
    ]
  }
]