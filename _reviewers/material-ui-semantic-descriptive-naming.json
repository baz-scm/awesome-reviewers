[
  {
    "discussion_id": "2151799647",
    "pr_number": 46318,
    "pr_file": "packages/mui-material/src/internal/SwitchBase.js",
    "created_at": "2025-06-17T09:32:55+00:00",
    "commented_code": "centerRipple: true,\n       focusRipple: !disableFocusRipple,\n       disabled,\n-      role: undefined,\n+      role: 'switch',",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2151799647",
        "repo_full_name": "mui/material-ui",
        "pr_number": 46318,
        "pr_file": "packages/mui-material/src/internal/SwitchBase.js",
        "discussion_id": "2151799647",
        "commented_code": "@@ -206,7 +206,7 @@ const SwitchBase = React.forwardRef(function SwitchBase(props, ref) {\n       centerRipple: true,\n       focusRipple: !disableFocusRipple,\n       disabled,\n-      role: undefined,\n+      role: 'switch',",
        "comment_created_at": "2025-06-17T09:32:55+00:00",
        "comment_author": "siriwatknp",
        "comment_body": "I think the explicit `role: undefined` exist for specific fix.\r\n\r\nThe proper fix is to add `role: 'switch'` to `Switch` component. @sai6855 Would you mind checking on this?\r\n\r\nThis PR requires a test to ensure that the issue is fixed without introducing any regression.",
        "pr_file_module": null
      },
      {
        "comment_id": "2157480504",
        "repo_full_name": "mui/material-ui",
        "pr_number": 46318,
        "pr_file": "packages/mui-material/src/internal/SwitchBase.js",
        "discussion_id": "2151799647",
        "commented_code": "@@ -206,7 +206,7 @@ const SwitchBase = React.forwardRef(function SwitchBase(props, ref) {\n       centerRipple: true,\n       focusRipple: !disableFocusRipple,\n       disabled,\n-      role: undefined,\n+      role: 'switch',",
        "comment_created_at": "2025-06-19T18:11:33+00:00",
        "comment_author": "KirankumarAmbati",
        "comment_body": "AFAIU, `SwitchBase` component uses `ButtonBase` as the root component, which automatically assigns `role=button` to `Switch`. So, to override that, we explicitly provide `role=undefined` as a prop. \r\n\r\nBut in our case, we want the `role` to be `switch`. So, I feel that updating `SwitchBase` role to `switch` is the right approach. But, it's just my thought process and I can be wrong. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2113179477",
    "pr_number": 46088,
    "pr_file": "docs/src/modules/components/DemoToolbar.js",
    "created_at": "2025-05-29T05:05:28+00:00",
    "commented_code": "</DemoTooltip>\n             </React.Fragment>\n           )}\n+          {enableOpenInNewTab && (\n+            <DemoTooltip title={t('openInNewTab')} placement=\"bottom\">\n+              <IconButton\n+                data-ga-event-category=\"demo\"\n+                data-ga-event-label={demo.gaLabel}\n+                data-ga-event-action=\"openInNewTab\"\n+                onClick={() => {\n+                  const url = new URL(window.location.href);\n+                  url.hash = '';\n+                  url.searchParams.set('scopedDemo', demoOptions.demo);\n+                  window.open(url.toString(), '_blank');\n+                }}\n+                {...getControlProps(6)}\n+                sx={{ borderRadius: 1 }}\n+              >\n+                <OpenInNewIcon />\n+              </IconButton>\n+            </DemoTooltip>\n+          )}",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2113179477",
        "repo_full_name": "mui/material-ui",
        "pr_number": 46088,
        "pr_file": "docs/src/modules/components/DemoToolbar.js",
        "discussion_id": "2113179477",
        "commented_code": "@@ -520,13 +522,32 @@ export default function DemoToolbar(props) {\n               </DemoTooltip>\n             </React.Fragment>\n           )}\n+          {enableOpenInNewTab && (\n+            <DemoTooltip title={t('openInNewTab')} placement=\"bottom\">\n+              <IconButton\n+                data-ga-event-category=\"demo\"\n+                data-ga-event-label={demo.gaLabel}\n+                data-ga-event-action=\"openInNewTab\"\n+                onClick={() => {\n+                  const url = new URL(window.location.href);\n+                  url.hash = '';\n+                  url.searchParams.set('scopedDemo', demoOptions.demo);\n+                  window.open(url.toString(), '_blank');\n+                }}\n+                {...getControlProps(6)}\n+                sx={{ borderRadius: 1 }}\n+              >\n+                <OpenInNewIcon />\n+              </IconButton>\n+            </DemoTooltip>\n+          )}",
        "comment_created_at": "2025-05-29T05:05:28+00:00",
        "comment_author": "siriwatknp",
        "comment_body": "<img width=\"268\" alt=\"image\" src=\"https://github.com/user-attachments/assets/7e2b8724-8e0e-4cf8-b2ed-decc9c1b724c\" />\r\n\r\nI think it would be better to use label \"Open standalone demo\".\r\n\r\nWhen I first see \"Open in new tab\", I have no clue on what to expect and not sure why should I open a new tab.\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1837883327",
    "pr_number": 44254,
    "pr_file": "packages/mui-system/src/breakpoints/breakpoints.js",
    "created_at": "2024-11-12T10:45:10+00:00",
    "commented_code": "import PropTypes from 'prop-types';\n+import isObjectEmpty from '@mui/utils/isObjectEmpty';\n+import fastDeepAssign from '@mui/utils/fastDeepAssign';",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1837883327",
        "repo_full_name": "mui/material-ui",
        "pr_number": 44254,
        "pr_file": "packages/mui-system/src/breakpoints/breakpoints.js",
        "discussion_id": "1837883327",
        "commented_code": "@@ -1,7 +1,12 @@\n import PropTypes from 'prop-types';\n+import isObjectEmpty from '@mui/utils/isObjectEmpty';\n+import fastDeepAssign from '@mui/utils/fastDeepAssign';",
        "comment_created_at": "2024-11-12T10:45:10+00:00",
        "comment_author": "mnajdova",
        "comment_body": "```suggestion\r\nimport deepAssign from '@mui/utils/deepAssign';\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1838403777",
        "repo_full_name": "mui/material-ui",
        "pr_number": 44254,
        "pr_file": "packages/mui-system/src/breakpoints/breakpoints.js",
        "discussion_id": "1837883327",
        "commented_code": "@@ -1,7 +1,12 @@\n import PropTypes from 'prop-types';\n+import isObjectEmpty from '@mui/utils/isObjectEmpty';\n+import fastDeepAssign from '@mui/utils/fastDeepAssign';",
        "comment_created_at": "2024-11-12T16:25:49+00:00",
        "comment_author": "romgrk",
        "comment_body": "When I name something `fast...` it usually means there's a trade-off with correctness to focus on being \"fast\". Here it's that it doesn't handle exotic objects as other implementations will, as in, it will also traverse enumerable properties on the object's prototype. In the cases where we use this function (to create React props objects copies, or to create CSS style objects) we can safely assume that invariant is true. I should add this to the jsdoc, but I like having some sort of warning in the name.",
        "pr_file_module": null
      },
      {
        "comment_id": "1839695849",
        "repo_full_name": "mui/material-ui",
        "pr_number": 44254,
        "pr_file": "packages/mui-system/src/breakpoints/breakpoints.js",
        "discussion_id": "1837883327",
        "commented_code": "@@ -1,7 +1,12 @@\n import PropTypes from 'prop-types';\n+import isObjectEmpty from '@mui/utils/isObjectEmpty';\n+import fastDeepAssign from '@mui/utils/fastDeepAssign';",
        "comment_created_at": "2024-11-13T08:05:03+00:00",
        "comment_author": "mnajdova",
        "comment_body": "Adding this to the jsdoc would definitely help. On the other hand, I would recommend maybe moving this util outside of @mui/utils, if it is only used in the mui-system, to avoid developers accidently using it in other places where it may not be the right thing. If you already plan to use it in other places, then probably we can keep it in @mui/utils.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1095579658",
    "pr_number": 36024,
    "pr_file": "packages/mui-material/src/MenuList/MenuList.js",
    "created_at": "2023-02-03T09:41:27+00:00",
    "commented_code": "activeItemIndex = index;\n       }\n     }\n+\n+    if (activeItemIndex === index && (child.props.disabled || child.type.muiSkipListHighlight)) {",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1095579658",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36024,
        "pr_file": "packages/mui-material/src/MenuList/MenuList.js",
        "discussion_id": "1095579658",
        "commented_code": "@@ -232,6 +232,14 @@ const MenuList = React.forwardRef(function MenuList(props, ref) {\n         activeItemIndex = index;\n       }\n     }\n+\n+    if (activeItemIndex === index && (child.props.disabled || child.type.muiSkipListHighlight)) {",
        "comment_created_at": "2023-02-03T09:41:27+00:00",
        "comment_author": "mnajdova",
        "comment_body": "```suggestion\r\n    if (activeItemIndex === index && (child.props.disabled || child.props.tabindex < 0)) {\r\n```\r\n\r\nInstead of coming up with new static prop, should we rather teach developers to use the `tabindex` correctly?",
        "pr_file_module": null
      },
      {
        "comment_id": "1095589571",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36024,
        "pr_file": "packages/mui-material/src/MenuList/MenuList.js",
        "discussion_id": "1095579658",
        "commented_code": "@@ -232,6 +232,14 @@ const MenuList = React.forwardRef(function MenuList(props, ref) {\n         activeItemIndex = index;\n       }\n     }\n+\n+    if (activeItemIndex === index && (child.props.disabled || child.type.muiSkipListHighlight)) {",
        "comment_created_at": "2023-02-03T09:48:41+00:00",
        "comment_author": "litera",
        "comment_body": "That is a very good suggestion that is also completely independent of the list item components being used. I like it lots more than the `muiSkipListHighlight` prop.",
        "pr_file_module": null
      },
      {
        "comment_id": "1095634060",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36024,
        "pr_file": "packages/mui-material/src/MenuList/MenuList.js",
        "discussion_id": "1095579658",
        "commented_code": "@@ -232,6 +232,14 @@ const MenuList = React.forwardRef(function MenuList(props, ref) {\n         activeItemIndex = index;\n       }\n     }\n+\n+    if (activeItemIndex === index && (child.props.disabled || child.type.muiSkipListHighlight)) {",
        "comment_created_at": "2023-02-03T10:17:44+00:00",
        "comment_author": "michaldudak",
        "comment_body": "The MenuList (and dependent compoenents) uses the [roving tabindex pattern](https://www.stefanjudis.com/today-i-learned/roving-tabindex/). Using this pattern, only one of the options (the highlighted one) should have tabindex=0. The rest should have tabindex=-1, so they are not tabbable (navigation between options is done using the arrow keys, not the tab key).\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1095701950",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36024,
        "pr_file": "packages/mui-material/src/MenuList/MenuList.js",
        "discussion_id": "1095579658",
        "commented_code": "@@ -232,6 +232,14 @@ const MenuList = React.forwardRef(function MenuList(props, ref) {\n         activeItemIndex = index;\n       }\n     }\n+\n+    if (activeItemIndex === index && (child.props.disabled || child.type.muiSkipListHighlight)) {",
        "comment_created_at": "2023-02-03T11:31:30+00:00",
        "comment_author": "mnajdova",
        "comment_body": "Agree, using the tabindex conflicts with the roving tabindex pattern. @michaldudak have you consider using a `data-` attribute instead of static field? Something like `data-mui-select-skip-tab` or something shorter :)) ",
        "pr_file_module": null
      },
      {
        "comment_id": "1100101254",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36024,
        "pr_file": "packages/mui-material/src/MenuList/MenuList.js",
        "discussion_id": "1095579658",
        "commented_code": "@@ -232,6 +232,14 @@ const MenuList = React.forwardRef(function MenuList(props, ref) {\n         activeItemIndex = index;\n       }\n     }\n+\n+    if (activeItemIndex === index && (child.props.disabled || child.type.muiSkipListHighlight)) {",
        "comment_created_at": "2023-02-08T13:03:45+00:00",
        "comment_author": "michaldudak",
        "comment_body": "For the record, we've discussed it outside GitHub and agreed to provide both options - the static field and a prop. I'll document both options.\r\n\r\nSince we're looking for a prop, not an attribute (as the DOM is not constructed at this point), I chose the same name as the static field: `muiSkipOptionHighlight`. See the added tests for usage.",
        "pr_file_module": null
      }
    ]
  }
]