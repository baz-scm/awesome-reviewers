[
  {
    "discussion_id": "1738652275",
    "pr_number": 43264,
    "pr_file": "scripts/copyFilesUtils.mjs",
    "created_at": "2024-08-30T13:19:29+00:00",
    "commented_code": "return Promise.all(cmds);\n }\n \n+export async function cjsCopy({ from, to }) {\n+  if (!(await fse.pathExists(to))) {\n+    console.warn(`path ${to} does not exists`);\n+    return [];\n+  }\n+\n+  const files = await glob('**/*.cjs', { cwd: from });\n+  const cmds = files.map((file) => fse.copy(path.resolve(from, file), path.resolve(to, file)));\n+  return Promise.all(cmds);\n+}\n+\n export async function createPackageFile() {\n   const packageData = await fse.readFile(path.resolve(packagePath, './package.json'), 'utf8');\n   const { nyc, scripts, devDependencies, workspaces, ...packageDataOther } =\n     JSON.parse(packageData);\n \n+  const modernCondition = 'mui-modern';\n+  const legacyModernPrefix = './modern';\n+\n+  const packageExports = {\n+    '.': {\n+      types: './index.d.ts',\n+      import: './index.mjs',\n+      [modernCondition]: './index.modern.mjs',\n+      require: './index.js',\n+    },\n+    './*': {\n+      types: './*/index.d.ts',\n+      import: './*/index.mjs',\n+      [modernCondition]: './*/index.modern.mjs',\n+      require: './*/index.js',\n+    },\n+    ...packageDataOther.exports,\n+  };\n+\n+  const exportedNames = new Set(Object.keys(packageExports));\n+  for (const exportedName of exportedNames) {\n+    const modernName = exportedName.replace(/^\\./, legacyModernPrefix);",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1738652275",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43264,
        "pr_file": "scripts/copyFilesUtils.mjs",
        "discussion_id": "1738652275",
        "commented_code": "@@ -91,11 +93,50 @@ export async function typescriptCopy({ from, to }) {\n   return Promise.all(cmds);\n }\n \n+export async function cjsCopy({ from, to }) {\n+  if (!(await fse.pathExists(to))) {\n+    console.warn(`path ${to} does not exists`);\n+    return [];\n+  }\n+\n+  const files = await glob('**/*.cjs', { cwd: from });\n+  const cmds = files.map((file) => fse.copy(path.resolve(from, file), path.resolve(to, file)));\n+  return Promise.all(cmds);\n+}\n+\n export async function createPackageFile() {\n   const packageData = await fse.readFile(path.resolve(packagePath, './package.json'), 'utf8');\n   const { nyc, scripts, devDependencies, workspaces, ...packageDataOther } =\n     JSON.parse(packageData);\n \n+  const modernCondition = 'mui-modern';\n+  const legacyModernPrefix = './modern';\n+\n+  const packageExports = {\n+    '.': {\n+      types: './index.d.ts',\n+      import: './index.mjs',\n+      [modernCondition]: './index.modern.mjs',\n+      require: './index.js',\n+    },\n+    './*': {\n+      types: './*/index.d.ts',\n+      import: './*/index.mjs',\n+      [modernCondition]: './*/index.modern.mjs',\n+      require: './*/index.js',\n+    },\n+    ...packageDataOther.exports,\n+  };\n+\n+  const exportedNames = new Set(Object.keys(packageExports));\n+  for (const exportedName of exportedNames) {\n+    const modernName = exportedName.replace(/^\\./, legacyModernPrefix);",
        "comment_created_at": "2024-08-30T13:19:29+00:00",
        "comment_author": "Janpot",
        "comment_body": "Maintain backwards compatibility for the legacy `./modern` bundles. Just a re-export of the main exports, but with a `./modern` prefix",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1928610651",
    "pr_number": 43264,
    "pr_file": "scripts/build.mjs",
    "created_at": "2025-01-24T12:29:14+00:00",
    "commented_code": "throw new Error(`'${command}' failed with \n${stderr}`);\n   }\n \n+  // cjs for reexporting from commons only modules.\n+  // If we need to rely more on this we can think about setting up a separate commonjs => commonjs build for .cjs files to .cjs\n+  // `--extensions-.cjs --out-file-extension .cjs`\n+  await cjsCopy({ from: srcDir, to: outDir });",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1928610651",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43264,
        "pr_file": "scripts/build.mjs",
        "discussion_id": "1928610651",
        "commented_code": "@@ -108,6 +103,20 @@ async function run(argv) {\n     throw new Error(`'${command}' failed with \\n${stderr}`);\n   }\n \n+  // cjs for reexporting from commons only modules.\n+  // If we need to rely more on this we can think about setting up a separate commonjs => commonjs build for .cjs files to .cjs\n+  // `--extensions-.cjs --out-file-extension .cjs`\n+  await cjsCopy({ from: srcDir, to: outDir });",
        "comment_created_at": "2025-01-24T12:29:14+00:00",
        "comment_author": "DiegoAndai",
        "comment_body": "I don't understand what's the function of this \ud83d\ude05 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1928795369",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43264,
        "pr_file": "scripts/build.mjs",
        "discussion_id": "1928610651",
        "commented_code": "@@ -108,6 +103,20 @@ async function run(argv) {\n     throw new Error(`'${command}' failed with \\n${stderr}`);\n   }\n \n+  // cjs for reexporting from commons only modules.\n+  // If we need to rely more on this we can think about setting up a separate commonjs => commonjs build for .cjs files to .cjs\n+  // `--extensions-.cjs --out-file-extension .cjs`\n+  await cjsCopy({ from: srcDir, to: outDir });",
        "comment_created_at": "2025-01-24T14:47:27+00:00",
        "comment_author": "Janpot",
        "comment_body": "it copies .cjs files from the src folder to the build folder. we use them to import cjs only modules such as `next/document`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2023457768",
    "pr_number": 45784,
    "pr_file": "scripts/build.mjs",
    "created_at": "2025-04-01T18:13:33+00:00",
    "commented_code": "describe:\n             \"Set to `true` if you don't want to generate a package.json file in the /esm folder.\",\n         })\n+        .option('cjsDir', {",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2023457768",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45784,
        "pr_file": "scripts/build.mjs",
        "discussion_id": "2023457768",
        "commented_code": "@@ -143,6 +152,11 @@ yargs(process.argv.slice(2))\n           describe:\n             \"Set to `true` if you don't want to generate a package.json file in the /esm folder.\",\n         })\n+        .option('cjsDir', {",
        "comment_created_at": "2025-04-01T18:13:33+00:00",
        "comment_author": "Janpot",
        "comment_body": "Does it make sense to do something different in base than in core?",
        "pr_file_module": null
      },
      {
        "comment_id": "2023471242",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45784,
        "pr_file": "scripts/build.mjs",
        "discussion_id": "2023457768",
        "commented_code": "@@ -143,6 +152,11 @@ yargs(process.argv.slice(2))\n           describe:\n             \"Set to `true` if you don't want to generate a package.json file in the /esm folder.\",\n         })\n+        .option('cjsDir', {",
        "comment_created_at": "2025-04-01T18:24:21+00:00",
        "comment_author": "brijeshb42",
        "comment_body": "Currently, base has two outputs `cjs` and `esm` dirs unlike core, were cjs is at the top level of build.\r\nIf we want to change the structure in either of the repos, it makes sense to do it in base since it is in alpha anyways. Though, I am sure this won't be a breaking change.\r\nPersonally, explicit `cjs` and `esm` (and `modern`) seems cleaner to me than what we are doing in core currently.",
        "pr_file_module": null
      },
      {
        "comment_id": "2024087585",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45784,
        "pr_file": "scripts/build.mjs",
        "discussion_id": "2023457768",
        "commented_code": "@@ -143,6 +152,11 @@ yargs(process.argv.slice(2))\n           describe:\n             \"Set to `true` if you don't want to generate a package.json file in the /esm folder.\",\n         })\n+        .option('cjsDir', {",
        "comment_created_at": "2025-04-02T05:20:27+00:00",
        "comment_author": "Janpot",
        "comment_body": "The idea behind the structure in core was to keep support for node10 resolution. Not sure how you can achieve that with the base structure.\r\nThe current structure makes it too easy to forget properties like `sideEffects` in the subfolder package.json (as is currently hapening in base)\r\nIMO the ideal structure is a flat one with cjs and mjs file extensions. This avoids package.json lookups to determine module type. But that's a bit more difficult to achieve with our current setup.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2024098850",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45784,
        "pr_file": "scripts/build.mjs",
        "discussion_id": "2023457768",
        "commented_code": "@@ -143,6 +152,11 @@ yargs(process.argv.slice(2))\n           describe:\n             \"Set to `true` if you don't want to generate a package.json file in the /esm folder.\",\n         })\n+        .option('cjsDir', {",
        "comment_created_at": "2025-04-02T05:34:17+00:00",
        "comment_author": "brijeshb42",
        "comment_body": "<img width=\"937\" alt=\"Screenshot 2025-04-02 at 11 02 52\u202fAM\" src=\"https://github.com/user-attachments/assets/0b9a490d-2dae-4d14-98c1-de7084bf0e33\" />\r\n\r\nI was surprised to find that this structure [supports](https://app.circleci.com/pipelines/github/mui/base-ui/8704/workflows/b4474813-e242-4986-9ab3-288f20114fd3/jobs/81777/steps) node10 resolution.",
        "pr_file_module": null
      },
      {
        "comment_id": "2024100210",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45784,
        "pr_file": "scripts/build.mjs",
        "discussion_id": "2023457768",
        "commented_code": "@@ -143,6 +152,11 @@ yargs(process.argv.slice(2))\n           describe:\n             \"Set to `true` if you don't want to generate a package.json file in the /esm folder.\",\n         })\n+        .option('cjsDir', {",
        "comment_created_at": "2025-04-02T05:35:52+00:00",
        "comment_author": "brijeshb42",
        "comment_body": "Something different in `base-ui`'s package.json is that it lists each export individually. There are no `*` exports.\r\nSo if supporting `node10` resolution was the only issue for us, I am sure we can restructure core's build output.\r\nThis could be done separately and when done, we can update the script to not have the new argument.",
        "pr_file_module": null
      },
      {
        "comment_id": "2024147192",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45784,
        "pr_file": "scripts/build.mjs",
        "discussion_id": "2023457768",
        "commented_code": "@@ -143,6 +152,11 @@ yargs(process.argv.slice(2))\n           describe:\n             \"Set to `true` if you don't want to generate a package.json file in the /esm folder.\",\n         })\n+        .option('cjsDir', {",
        "comment_created_at": "2025-04-02T06:25:22+00:00",
        "comment_author": "brijeshb42",
        "comment_body": "> The current structure makes it too easy to forget properties like sideEffects in the subfolder package.json (as is currently hapening in base)\r\n\r\nBut with the updated code to use latest infra changes, this has been corrected.",
        "pr_file_module": null
      },
      {
        "comment_id": "2024194053",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45784,
        "pr_file": "scripts/build.mjs",
        "discussion_id": "2023457768",
        "commented_code": "@@ -143,6 +152,11 @@ yargs(process.argv.slice(2))\n           describe:\n             \"Set to `true` if you don't want to generate a package.json file in the /esm folder.\",\n         })\n+        .option('cjsDir', {",
        "comment_created_at": "2025-04-02T07:04:03+00:00",
        "comment_author": "Janpot",
        "comment_body": "> I was surprised to find that this structure supports node10 resolution.\r\n\r\nThe type resolution yes, through `typesVersions`, I'm not sure it would actually resolve the javascript correctly under node10, I don't see how without support for the exports field. But I may be missing something",
        "pr_file_module": null
      },
      {
        "comment_id": "2024197491",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45784,
        "pr_file": "scripts/build.mjs",
        "discussion_id": "2023457768",
        "commented_code": "@@ -143,6 +152,11 @@ yargs(process.argv.slice(2))\n           describe:\n             \"Set to `true` if you don't want to generate a package.json file in the /esm folder.\",\n         })\n+        .option('cjsDir', {",
        "comment_created_at": "2025-04-02T07:06:38+00:00",
        "comment_author": "Janpot",
        "comment_body": "> Something different in base-ui's package.json is that it lists each export individually\r\n\r\nYes, we're likely also going to move to something like that eventually. There's a `mui-src` condition that is supported by our package.json exports generator that helps with this. e.g. https://github.com/mui/material-ui/blob/7a7c530e07ae959baf1ca660053cc42da2187bbd/packages/mui-material/package.json#L109",
        "pr_file_module": null
      },
      {
        "comment_id": "2024248173",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45784,
        "pr_file": "scripts/build.mjs",
        "discussion_id": "2023457768",
        "commented_code": "@@ -143,6 +152,11 @@ yargs(process.argv.slice(2))\n           describe:\n             \"Set to `true` if you don't want to generate a package.json file in the /esm folder.\",\n         })\n+        .option('cjsDir', {",
        "comment_created_at": "2025-04-02T07:36:21+00:00",
        "comment_author": "brijeshb42",
        "comment_body": "@Janpot Yeah. The node10 resolution only works for types. Not for the implementation file.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2023460952",
    "pr_number": 45784,
    "pr_file": "scripts/buildTypes.mts",
    "created_at": "2025-04-01T18:16:09+00:00",
    "commented_code": "interface HandlerArgv {\n   skipTsc: boolean;\n+  copy: string[];\n }\n \n async function main(argv: HandlerArgv) {\n   const packageRoot = process.cwd();\n+  const tsconfigPath = path.join(packageRoot, 'tsconfig.build.json');",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2023460952",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45784,
        "pr_file": "scripts/buildTypes.mts",
        "discussion_id": "2023460952",
        "commented_code": "@@ -62,25 +66,30 @@ async function copyDeclarations(sourceDirectory: string, destinationDirectory: s\n \n interface HandlerArgv {\n   skipTsc: boolean;\n+  copy: string[];\n }\n \n async function main(argv: HandlerArgv) {\n   const packageRoot = process.cwd();\n+  const tsconfigPath = path.join(packageRoot, 'tsconfig.build.json');",
        "comment_created_at": "2025-04-01T18:16:09+00:00",
        "comment_author": "Janpot",
        "comment_body": "Alternatively https://www.npmjs.com/package/tsconfig",
        "pr_file_module": null
      },
      {
        "comment_id": "2023476491",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45784,
        "pr_file": "scripts/buildTypes.mts",
        "discussion_id": "2023460952",
        "commented_code": "@@ -62,25 +66,30 @@ async function copyDeclarations(sourceDirectory: string, destinationDirectory: s\n \n interface HandlerArgv {\n   skipTsc: boolean;\n+  copy: string[];\n }\n \n async function main(argv: HandlerArgv) {\n   const packageRoot = process.cwd();\n+  const tsconfigPath = path.join(packageRoot, 'tsconfig.build.json');",
        "comment_created_at": "2025-04-01T18:28:26+00:00",
        "comment_author": "brijeshb42",
        "comment_body": "Or [tsconfck](https://github.com/dominikg/tsconfck). But seems overkill, unless we want a resolved tsconfig which also goes through the `extends` logic.",
        "pr_file_module": null
      },
      {
        "comment_id": "2024088780",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45784,
        "pr_file": "scripts/buildTypes.mts",
        "discussion_id": "2023460952",
        "commented_code": "@@ -62,25 +66,30 @@ async function copyDeclarations(sourceDirectory: string, destinationDirectory: s\n \n interface HandlerArgv {\n   skipTsc: boolean;\n+  copy: string[];\n }\n \n async function main(argv: HandlerArgv) {\n   const packageRoot = process.cwd();\n+  const tsconfigPath = path.join(packageRoot, 'tsconfig.build.json');",
        "comment_created_at": "2025-04-02T05:21:57+00:00",
        "comment_author": "Janpot",
        "comment_body": "> unless we want a resolved tsconfig\r\n\r\nWe're reading properties out of it, so I guess we kind of do.\r\nBut it's also something we can add in follow-up.",
        "pr_file_module": null
      }
    ]
  }
]