[
  {
    "discussion_id": "1104098539",
    "pr_number": 36088,
    "pr_file": "packages/mui-base/src/AutocompleteUnstyled/useAutocomplete.test.js",
    "created_at": "2023-02-13T07:50:12+00:00",
    "commented_code": "fireEvent.click(button);\n     }).not.to.throw();\n   });\n+\n+  it('should call getOptionLabel only with existing options on filtered options change', () => {",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1104098539",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36088,
        "pr_file": "packages/mui-base/src/AutocompleteUnstyled/useAutocomplete.test.js",
        "discussion_id": "1104098539",
        "commented_code": "@@ -351,4 +351,48 @@ describe('useAutocomplete', () => {\n       fireEvent.click(button);\n     }).not.to.throw();\n   });\n+\n+  it('should call getOptionLabel only with existing options on filtered options change', () => {",
        "comment_created_at": "2023-02-13T07:50:12+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "Let's not test the code implementation details.  Instead, we can verify that it does not throw an error when nested options are provided to `Autocomplete`. We should trigger the user interactions step by step as provided in the issue and check that it does not crash in the end.\r\n\r\n1. The user opens the list and selects an option.\r\n2. The user clears the selected option from input.\r\n3. The user reopens the autocomplete.\r\n4. It should not crash.\r\n\r\nAlso, please add this test in `Autocomplete` test file (`Autocomplete.test.js`). Let me know if you need any help.   ",
        "pr_file_module": null
      },
      {
        "comment_id": "1104246797",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36088,
        "pr_file": "packages/mui-base/src/AutocompleteUnstyled/useAutocomplete.test.js",
        "discussion_id": "1104098539",
        "commented_code": "@@ -351,4 +351,48 @@ describe('useAutocomplete', () => {\n       fireEvent.click(button);\n     }).not.to.throw();\n   });\n+\n+  it('should call getOptionLabel only with existing options on filtered options change', () => {",
        "comment_created_at": "2023-02-13T10:13:03+00:00",
        "comment_author": "rangoo94",
        "comment_body": "Thanks, I added the unit test for the `Autocomplete` component in `Autocomplete.test.js`.\r\n\r\nI have also simplified and left the `useAutocomplete` test. It may be worth testing it on the hook level too, as in the future the `Autocomplete` component layer may have extra logic wrapping that behavior. If you prefer though, I could delete the part from the `useAutocomplete.test.js`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1104421986",
        "repo_full_name": "mui/material-ui",
        "pr_number": 36088,
        "pr_file": "packages/mui-base/src/AutocompleteUnstyled/useAutocomplete.test.js",
        "discussion_id": "1104098539",
        "commented_code": "@@ -351,4 +351,48 @@ describe('useAutocomplete', () => {\n       fireEvent.click(button);\n     }).not.to.throw();\n   });\n+\n+  it('should call getOptionLabel only with existing options on filtered options change', () => {",
        "comment_created_at": "2023-02-13T12:45:55+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "Please delete the test from the `useAutocomplete.test.js`. Any logic we have in future related to highlighting will be in the `useAutocomplete` hook only which will always be used in the Material-UI `Autocomplete` component.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1762973014",
    "pr_number": 43757,
    "pr_file": "packages/mui-material/src/Modal/Modal.test.js",
    "created_at": "2024-09-17T10:14:16+00:00",
    "commented_code": ");\n     }).not.toErrorDev();\n   });\n+\n+  it('should not override default onKeyDown', () => {\n+    const handleKeyDown = spy();\n+    const handleClose = spy();\n+    const { getByTestId } = render(\n+      <Modal open onKeyDown={handleKeyDown} onClose={handleClose}>\n+        <div data-testid=\"modal\" tabIndex={-1} />\n+      </Modal>,\n+    );\n+    act(() => {\n+      getByTestId('modal').focus();\n+    });\n+\n+    fireEvent.keyDown(getByTestId('modal'), {\n+      key: 'Escape',\n+    });",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1762973014",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43757,
        "pr_file": "packages/mui-material/src/Modal/Modal.test.js",
        "discussion_id": "1762973014",
        "commented_code": "@@ -880,4 +880,24 @@ describe('<Modal />', () => {\n       );\n     }).not.toErrorDev();\n   });\n+\n+  it('should not override default onKeyDown', () => {\n+    const handleKeyDown = spy();\n+    const handleClose = spy();\n+    const { getByTestId } = render(\n+      <Modal open onKeyDown={handleKeyDown} onClose={handleClose}>\n+        <div data-testid=\"modal\" tabIndex={-1} />\n+      </Modal>,\n+    );\n+    act(() => {\n+      getByTestId('modal').focus();\n+    });\n+\n+    fireEvent.keyDown(getByTestId('modal'), {\n+      key: 'Escape',\n+    });",
        "comment_created_at": "2024-09-17T10:14:16+00:00",
        "comment_author": "aarongarciah",
        "comment_body": "No need to focus the element, `fireEvent.keyDown` below fires the event directly on the `#modal` element.\r\n\r\n```suggestion\r\n    const { getByTestId } = render(\r\n      <Modal open onKeyDown={handleKeyDown} onClose={handleClose}>\r\n        <div data-testid=\"modal\" tabIndex={-1} />\r\n      </Modal>,\r\n    );\r\n\r\n    fireEvent.keyDown(getByTestId('modal'), {\r\n      key: 'Escape',\r\n    });\r\n```\r\n\r\nYou can also use `user` instead of `fireEvent`, which seems like the option we want to use for new tests (you'll need to make the test function `async`).\r\n\r\n```suggestion\r\n    const { user, getByTestId } = render(\r\n      <Modal open onKeyDown={handleKeyDown} onClose={handleClose}>\r\n        <div data-testid=\"modal\" tabIndex={-1} />\r\n      </Modal>,\r\n    );\r\n\r\n    await user.type(getByTestId('modal'), '{Escape}');\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1763014060",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43757,
        "pr_file": "packages/mui-material/src/Modal/Modal.test.js",
        "discussion_id": "1762973014",
        "commented_code": "@@ -880,4 +880,24 @@ describe('<Modal />', () => {\n       );\n     }).not.toErrorDev();\n   });\n+\n+  it('should not override default onKeyDown', () => {\n+    const handleKeyDown = spy();\n+    const handleClose = spy();\n+    const { getByTestId } = render(\n+      <Modal open onKeyDown={handleKeyDown} onClose={handleClose}>\n+        <div data-testid=\"modal\" tabIndex={-1} />\n+      </Modal>,\n+    );\n+    act(() => {\n+      getByTestId('modal').focus();\n+    });\n+\n+    fireEvent.keyDown(getByTestId('modal'), {\n+      key: 'Escape',\n+    });",
        "comment_created_at": "2024-09-17T10:42:36+00:00",
        "comment_author": "sai6855",
        "comment_body": "Done, updated test here https://github.com/mui/material-ui/pull/43757/commits/a475aa73fc6d33f494d83db36bc5b7211cd19faf\r\n\r\nNote: used `keyboard` method in user object, it felt a bit simpler.",
        "pr_file_module": null
      },
      {
        "comment_id": "1763056831",
        "repo_full_name": "mui/material-ui",
        "pr_number": 43757,
        "pr_file": "packages/mui-material/src/Modal/Modal.test.js",
        "discussion_id": "1762973014",
        "commented_code": "@@ -880,4 +880,24 @@ describe('<Modal />', () => {\n       );\n     }).not.toErrorDev();\n   });\n+\n+  it('should not override default onKeyDown', () => {\n+    const handleKeyDown = spy();\n+    const handleClose = spy();\n+    const { getByTestId } = render(\n+      <Modal open onKeyDown={handleKeyDown} onClose={handleClose}>\n+        <div data-testid=\"modal\" tabIndex={-1} />\n+      </Modal>,\n+    );\n+    act(() => {\n+      getByTestId('modal').focus();\n+    });\n+\n+    fireEvent.keyDown(getByTestId('modal'), {\n+      key: 'Escape',\n+    });",
        "comment_created_at": "2024-09-17T11:17:55+00:00",
        "comment_author": "aarongarciah",
        "comment_body": "I forgot about `keyboard`, much better.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2003488129",
    "pr_number": 45246,
    "pr_file": "test/regressions/fixtures/Textarea/TextareaAutosize.js",
    "created_at": "2025-03-19T14:30:46+00:00",
    "commented_code": "+import * as React from 'react';\n+import Input from '@mui/material/Input';\n+\n+export default function TextareaAutosize() {\n+  const [value, setValue] = React.useState('');\n+\n+  const handleChange = (event) => {\n+    setValue(event.target.value);\n+  };\n+\n+  return (\n+    <Input\n+      style={{ width: 200 }}\n+      multiline\n+      minRows={4}\n+      onChange={handleChange}\n+      value={value}\n+      slotProps={{\n+        input: {\n+          role: 'textbox',\n+        },\n+      }}",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2003488129",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45246,
        "pr_file": "test/regressions/fixtures/Textarea/TextareaAutosize.js",
        "discussion_id": "2003488129",
        "commented_code": "@@ -0,0 +1,25 @@\n+import * as React from 'react';\n+import Input from '@mui/material/Input';\n+\n+export default function TextareaAutosize() {\n+  const [value, setValue] = React.useState('');\n+\n+  const handleChange = (event) => {\n+    setValue(event.target.value);\n+  };\n+\n+  return (\n+    <Input\n+      style={{ width: 200 }}\n+      multiline\n+      minRows={4}\n+      onChange={handleChange}\n+      value={value}\n+      slotProps={{\n+        input: {\n+          role: 'textbox',\n+        },\n+      }}",
        "comment_created_at": "2025-03-19T14:30:46+00:00",
        "comment_author": "DiegoAndai",
        "comment_body": "Is this required?",
        "pr_file_module": null
      },
      {
        "comment_id": "2003524638",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45246,
        "pr_file": "test/regressions/fixtures/Textarea/TextareaAutosize.js",
        "discussion_id": "2003488129",
        "commented_code": "@@ -0,0 +1,25 @@\n+import * as React from 'react';\n+import Input from '@mui/material/Input';\n+\n+export default function TextareaAutosize() {\n+  const [value, setValue] = React.useState('');\n+\n+  const handleChange = (event) => {\n+    setValue(event.target.value);\n+  };\n+\n+  return (\n+    <Input\n+      style={{ width: 200 }}\n+      multiline\n+      minRows={4}\n+      onChange={handleChange}\n+      value={value}\n+      slotProps={{\n+        input: {\n+          role: 'textbox',\n+        },\n+      }}",
        "comment_created_at": "2025-03-19T14:45:36+00:00",
        "comment_author": "yermartee",
        "comment_body": "I think yes, we need to target the textbox by its role. We're using it in page.getByRole('textbox').",
        "pr_file_module": null
      },
      {
        "comment_id": "2003554061",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45246,
        "pr_file": "test/regressions/fixtures/Textarea/TextareaAutosize.js",
        "discussion_id": "2003488129",
        "commented_code": "@@ -0,0 +1,25 @@\n+import * as React from 'react';\n+import Input from '@mui/material/Input';\n+\n+export default function TextareaAutosize() {\n+  const [value, setValue] = React.useState('');\n+\n+  const handleChange = (event) => {\n+    setValue(event.target.value);\n+  };\n+\n+  return (\n+    <Input\n+      style={{ width: 200 }}\n+      multiline\n+      minRows={4}\n+      onChange={handleChange}\n+      value={value}\n+      slotProps={{\n+        input: {\n+          role: 'textbox',\n+        },\n+      }}",
        "comment_created_at": "2025-03-19T14:56:20+00:00",
        "comment_author": "DiegoAndai",
        "comment_body": "Right, but I think the `textarea` element that the `TextareaAutosize` renders should have the `textbox` role by default, doesn't it?",
        "pr_file_module": null
      },
      {
        "comment_id": "2003572765",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45246,
        "pr_file": "test/regressions/fixtures/Textarea/TextareaAutosize.js",
        "discussion_id": "2003488129",
        "commented_code": "@@ -0,0 +1,25 @@\n+import * as React from 'react';\n+import Input from '@mui/material/Input';\n+\n+export default function TextareaAutosize() {\n+  const [value, setValue] = React.useState('');\n+\n+  const handleChange = (event) => {\n+    setValue(event.target.value);\n+  };\n+\n+  return (\n+    <Input\n+      style={{ width: 200 }}\n+      multiline\n+      minRows={4}\n+      onChange={handleChange}\n+      value={value}\n+      slotProps={{\n+        input: {\n+          role: 'textbox',\n+        },\n+      }}",
        "comment_created_at": "2025-03-19T15:04:07+00:00",
        "comment_author": "yermartee",
        "comment_body": "Right, but in that case, I cannot get access to the input. Instead, I am getting access to the div element, which is the parent of the input.",
        "pr_file_module": null
      },
      {
        "comment_id": "2003612703",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45246,
        "pr_file": "test/regressions/fixtures/Textarea/TextareaAutosize.js",
        "discussion_id": "2003488129",
        "commented_code": "@@ -0,0 +1,25 @@\n+import * as React from 'react';\n+import Input from '@mui/material/Input';\n+\n+export default function TextareaAutosize() {\n+  const [value, setValue] = React.useState('');\n+\n+  const handleChange = (event) => {\n+    setValue(event.target.value);\n+  };\n+\n+  return (\n+    <Input\n+      style={{ width: 200 }}\n+      multiline\n+      minRows={4}\n+      onChange={handleChange}\n+      value={value}\n+      slotProps={{\n+        input: {\n+          role: 'textbox',\n+        },\n+      }}",
        "comment_created_at": "2025-03-19T15:19:12+00:00",
        "comment_author": "DiegoAndai",
        "comment_body": "Ah, I see. In that case I think we should do\r\n\r\n```\r\n      slotProps={{\r\n        input: {\r\n          'data-testid': 'input',\r\n        },\r\n      }}\r\n```\r\n\r\nAnd use `page.getByTestId('input')`\r\n\r\nWould that work?",
        "pr_file_module": null
      },
      {
        "comment_id": "2004377893",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45246,
        "pr_file": "test/regressions/fixtures/Textarea/TextareaAutosize.js",
        "discussion_id": "2003488129",
        "commented_code": "@@ -0,0 +1,25 @@\n+import * as React from 'react';\n+import Input from '@mui/material/Input';\n+\n+export default function TextareaAutosize() {\n+  const [value, setValue] = React.useState('');\n+\n+  const handleChange = (event) => {\n+    setValue(event.target.value);\n+  };\n+\n+  return (\n+    <Input\n+      style={{ width: 200 }}\n+      multiline\n+      minRows={4}\n+      onChange={handleChange}\n+      value={value}\n+      slotProps={{\n+        input: {\n+          role: 'textbox',\n+        },\n+      }}",
        "comment_created_at": "2025-03-19T22:01:37+00:00",
        "comment_author": "yermartee",
        "comment_body": "It works well and has been applied.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1988918114",
    "pr_number": 45438,
    "pr_file": "packages/mui-material/src/Autocomplete/Autocomplete.test.js",
    "created_at": "2025-03-11T10:30:18+00:00",
    "commented_code": "});\n   });\n \n-  it('should not override internal listbox ref when external listbox ref is provided', () => {\n+  it('should not override internal listbox ref when external listbox ref is provided by testing if highlighting works', () => {\n     const handleHighlightChange = spy();\n-    const options = ['one', 'two', 'three'];\n-    const ref = React.createRef(null);\n+    const externalListboxRef = React.createRef(null);\n+\n     render(\n       <Autocomplete\n-        defaultValue={options[0]}\n-        onHighlightChange={handleHighlightChange}\n-        options={options}\n-        ListboxProps={{ ref }}\n-        open\n+        options={['one', 'two', 'three']}\n+        slotProps={{\n+          listbox: {\n+            ref: externalListboxRef,\n+          },\n+        }}\n         renderInput={(params) => <TextField {...params} autoFocus />}\n+        onHighlightChange={handleHighlightChange}\n       />,\n     );\n-    expect(handleHighlightChange.callCount).to.equal(\n-      // FIXME: highlighted index implementation should be implemented using React not the DOM.\n-      reactMajor > 18 ? 2 : 1,\n-    );\n-    expect(handleHighlightChange.args[0]).to.deep.equal([undefined, options[0], 'auto']);\n-    if (reactMajor > 18) {\n-      expect(handleHighlightChange.args[1]).to.deep.equal([undefined, options[0], 'auto']);\n-    }\n+\n+    const textbox = screen.getByRole('combobox');\n+\n+    fireEvent.keyDown(textbox, { key: 'ArrowDown' }); // open listbox\n+    fireEvent.keyDown(textbox, { key: 'ArrowDown' }); // highlight first option\n+\n+    expect(handleHighlightChange.callCount).to.equal(1);\n   });\n \n   describe('prop: onHighlightChange', () => {\n-    it('should trigger event when default value is passed', () => {",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1988918114",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45438,
        "pr_file": "packages/mui-material/src/Autocomplete/Autocomplete.test.js",
        "discussion_id": "1988918114",
        "commented_code": "@@ -2881,53 +2880,32 @@ describe('<Autocomplete />', () => {\n     });\n   });\n \n-  it('should not override internal listbox ref when external listbox ref is provided', () => {\n+  it('should not override internal listbox ref when external listbox ref is provided by testing if highlighting works', () => {\n     const handleHighlightChange = spy();\n-    const options = ['one', 'two', 'three'];\n-    const ref = React.createRef(null);\n+    const externalListboxRef = React.createRef(null);\n+\n     render(\n       <Autocomplete\n-        defaultValue={options[0]}\n-        onHighlightChange={handleHighlightChange}\n-        options={options}\n-        ListboxProps={{ ref }}\n-        open\n+        options={['one', 'two', 'three']}\n+        slotProps={{\n+          listbox: {\n+            ref: externalListboxRef,\n+          },\n+        }}\n         renderInput={(params) => <TextField {...params} autoFocus />}\n+        onHighlightChange={handleHighlightChange}\n       />,\n     );\n-    expect(handleHighlightChange.callCount).to.equal(\n-      // FIXME: highlighted index implementation should be implemented using React not the DOM.\n-      reactMajor > 18 ? 2 : 1,\n-    );\n-    expect(handleHighlightChange.args[0]).to.deep.equal([undefined, options[0], 'auto']);\n-    if (reactMajor > 18) {\n-      expect(handleHighlightChange.args[1]).to.deep.equal([undefined, options[0], 'auto']);\n-    }\n+\n+    const textbox = screen.getByRole('combobox');\n+\n+    fireEvent.keyDown(textbox, { key: 'ArrowDown' }); // open listbox\n+    fireEvent.keyDown(textbox, { key: 'ArrowDown' }); // highlight first option\n+\n+    expect(handleHighlightChange.callCount).to.equal(1);\n   });\n \n   describe('prop: onHighlightChange', () => {\n-    it('should trigger event when default value is passed', () => {",
        "comment_created_at": "2025-03-11T10:30:18+00:00",
        "comment_author": "aarongarciah",
        "comment_body": "Should we inverse this test? i.e. make it validate no event is triggered when the default value is passed.",
        "pr_file_module": null
      },
      {
        "comment_id": "1989224981",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45438,
        "pr_file": "packages/mui-material/src/Autocomplete/Autocomplete.test.js",
        "discussion_id": "1988918114",
        "commented_code": "@@ -2881,53 +2880,32 @@ describe('<Autocomplete />', () => {\n     });\n   });\n \n-  it('should not override internal listbox ref when external listbox ref is provided', () => {\n+  it('should not override internal listbox ref when external listbox ref is provided by testing if highlighting works', () => {\n     const handleHighlightChange = spy();\n-    const options = ['one', 'two', 'three'];\n-    const ref = React.createRef(null);\n+    const externalListboxRef = React.createRef(null);\n+\n     render(\n       <Autocomplete\n-        defaultValue={options[0]}\n-        onHighlightChange={handleHighlightChange}\n-        options={options}\n-        ListboxProps={{ ref }}\n-        open\n+        options={['one', 'two', 'three']}\n+        slotProps={{\n+          listbox: {\n+            ref: externalListboxRef,\n+          },\n+        }}\n         renderInput={(params) => <TextField {...params} autoFocus />}\n+        onHighlightChange={handleHighlightChange}\n       />,\n     );\n-    expect(handleHighlightChange.callCount).to.equal(\n-      // FIXME: highlighted index implementation should be implemented using React not the DOM.\n-      reactMajor > 18 ? 2 : 1,\n-    );\n-    expect(handleHighlightChange.args[0]).to.deep.equal([undefined, options[0], 'auto']);\n-    if (reactMajor > 18) {\n-      expect(handleHighlightChange.args[1]).to.deep.equal([undefined, options[0], 'auto']);\n-    }\n+\n+    const textbox = screen.getByRole('combobox');\n+\n+    fireEvent.keyDown(textbox, { key: 'ArrowDown' }); // open listbox\n+    fireEvent.keyDown(textbox, { key: 'ArrowDown' }); // highlight first option\n+\n+    expect(handleHighlightChange.callCount).to.equal(1);\n   });\n \n   describe('prop: onHighlightChange', () => {\n-    it('should trigger event when default value is passed', () => {",
        "comment_created_at": "2025-03-11T13:03:46+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "We could. Done.",
        "pr_file_module": null
      }
    ]
  }
]