[
  {
    "discussion_id": "2001341108",
    "pr_number": 45426,
    "pr_file": "docs/data/material/guides/minimizing-bundle-size/minimizing-bundle-size.md",
    "created_at": "2025-03-18T15:33:57+00:00",
    "commented_code": "Future changes to the library's internal structure could break these paths. `babel-plugin-direct-import` allows for granular control over what gets imported, but it comes with the potential risk of relying on internal library paths. This may fail in future versions if the package is updated to use the `exports` field in `package.json`, which could block access to internal paths like this.\n :::\n \n-If you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\n+> Note that Material UI supports tree shaking out of the box when importing from specific paths (e.g. @mui/material/Button), so this configuration is optional and primarily useful if you want to enforce modular imports.",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2001341108",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45426,
        "pr_file": "docs/data/material/guides/minimizing-bundle-size/minimizing-bundle-size.md",
        "discussion_id": "2001341108",
        "commented_code": "@@ -156,34 +156,52 @@ import Button from '@mui/material/Button/Button.js';\n Future changes to the library's internal structure could break these paths. `babel-plugin-direct-import` allows for granular control over what gets imported, but it comes with the potential risk of relying on internal library paths. This may fail in future versions if the package is updated to use the `exports` field in `package.json`, which could block access to internal paths like this.\n :::\n \n-If you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\n+> Note that Material UI supports tree shaking out of the box when importing from specific paths (e.g. @mui/material/Button), so this configuration is optional and primarily useful if you want to enforce modular imports.",
        "comment_created_at": "2025-03-18T15:33:57+00:00",
        "comment_author": "mapache-salvaje",
        "comment_body": "```suggestion\r\nMaterial UI supports tree shaking out of the box when importing from specific paths (such as `@mui/material/Button`), so this configuration is optional and primarily useful if you want to enforce modular imports.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2043720832",
    "pr_number": 45426,
    "pr_file": "docs/data/material/guides/minimizing-bundle-size/minimizing-bundle-size.md",
    "created_at": "2025-04-15T06:23:09+00:00",
    "commented_code": "Future changes to the library's internal structure could break these paths. `babel-plugin-direct-import` allows for granular control over what gets imported, but it comes with the potential risk of relying on internal library paths. This may fail in future versions if the package is updated to use the `exports` field in `package.json`, which could block access to internal paths like this.\n :::\n \n-If you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\n+Material UI supports tree shaking out of the box when importing from specific paths (such as `@mui/material/Button`), so this configuration is optional and primarily useful if you want to enforce modular imports.\n \n-`yarn add -D react-app-rewired customize-cra`\n+Vite doesn't require extra Babel configuration by default because it uses esbuild for fast bundling and minification.\n+But if you need to customize Babel (for example, to use babel-plugin-import), you can follow these steps:\n \n-Create a `config-overrides.js` file in the root directory:\n+1. Install dependencies:",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2043720832",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45426,
        "pr_file": "docs/data/material/guides/minimizing-bundle-size/minimizing-bundle-size.md",
        "discussion_id": "2043720832",
        "commented_code": "@@ -156,34 +156,50 @@ import Button from '@mui/material/Button/Button.js';\n Future changes to the library's internal structure could break these paths. `babel-plugin-direct-import` allows for granular control over what gets imported, but it comes with the potential risk of relying on internal library paths. This may fail in future versions if the package is updated to use the `exports` field in `package.json`, which could block access to internal paths like this.\n :::\n \n-If you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\n+Material UI supports tree shaking out of the box when importing from specific paths (such as `@mui/material/Button`), so this configuration is optional and primarily useful if you want to enforce modular imports.\n \n-`yarn add -D react-app-rewired customize-cra`\n+Vite doesn't require extra Babel configuration by default because it uses esbuild for fast bundling and minification.\n+But if you need to customize Babel (for example, to use babel-plugin-import), you can follow these steps:\n \n-Create a `config-overrides.js` file in the root directory:\n+1. Install dependencies:",
        "comment_created_at": "2025-04-15T06:23:09+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "I'm not sure this works. Can you share a reproduction where all these steps succeed and bundle size is reduced? I think Vite uses the esm bundle by default, but I'm not certain. cc @Janpot",
        "pr_file_module": null
      },
      {
        "comment_id": "2064791497",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45426,
        "pr_file": "docs/data/material/guides/minimizing-bundle-size/minimizing-bundle-size.md",
        "discussion_id": "2043720832",
        "commented_code": "@@ -156,34 +156,50 @@ import Button from '@mui/material/Button/Button.js';\n Future changes to the library's internal structure could break these paths. `babel-plugin-direct-import` allows for granular control over what gets imported, but it comes with the potential risk of relying on internal library paths. This may fail in future versions if the package is updated to use the `exports` field in `package.json`, which could block access to internal paths like this.\n :::\n \n-If you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\n+Material UI supports tree shaking out of the box when importing from specific paths (such as `@mui/material/Button`), so this configuration is optional and primarily useful if you want to enforce modular imports.\n \n-`yarn add -D react-app-rewired customize-cra`\n+Vite doesn't require extra Babel configuration by default because it uses esbuild for fast bundling and minification.\n+But if you need to customize Babel (for example, to use babel-plugin-import), you can follow these steps:\n \n-Create a `config-overrides.js` file in the root directory:\n+1. Install dependencies:",
        "comment_created_at": "2025-04-28T21:25:06+00:00",
        "comment_author": "CodeLeom",
        "comment_body": "Thanks for the feedback! You’re correct. Vite uses ESM bundles by default, so tree-shaking works out of the box without needing extra Babel plugins.\r\n\r\nThe Babel setup I shared is mostly useful if:\r\n\r\n- I want to strictly enforce modular imports in large codebases (to prevent developers from accidentally importing full packages).\r\n- I am migrating an older project or have a mix of imports that aren't cleanly tree-shaken yet.\r\n\r\nIn a fresh Vite project, just doing modular imports like: \r\n\r\n```javascript\r\nimport { Button } from '@mui/material';\r\n```\r\n\r\nis already sufficient for tree-shaking, and Vite + esbuild will produce a minimal optimized bundle.",
        "pr_file_module": null
      },
      {
        "comment_id": "2065786462",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45426,
        "pr_file": "docs/data/material/guides/minimizing-bundle-size/minimizing-bundle-size.md",
        "discussion_id": "2043720832",
        "commented_code": "@@ -156,34 +156,50 @@ import Button from '@mui/material/Button/Button.js';\n Future changes to the library's internal structure could break these paths. `babel-plugin-direct-import` allows for granular control over what gets imported, but it comes with the potential risk of relying on internal library paths. This may fail in future versions if the package is updated to use the `exports` field in `package.json`, which could block access to internal paths like this.\n :::\n \n-If you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\n+Material UI supports tree shaking out of the box when importing from specific paths (such as `@mui/material/Button`), so this configuration is optional and primarily useful if you want to enforce modular imports.\n \n-`yarn add -D react-app-rewired customize-cra`\n+Vite doesn't require extra Babel configuration by default because it uses esbuild for fast bundling and minification.\n+But if you need to customize Babel (for example, to use babel-plugin-import), you can follow these steps:\n \n-Create a `config-overrides.js` file in the root directory:\n+1. Install dependencies:",
        "comment_created_at": "2025-04-29T08:30:42+00:00",
        "comment_author": "Janpot",
        "comment_body": "I don't think the problem is tree-shaking during production builds. That should be covered regardless of whether you import top-level or not. It's mostly about avoiding importing from barrel files. This can greatly decrease performance of a dev server. A problem which also exists in vite: https://github.com/vitejs/vite/issues/8237\r\n\r\nPersonally I'm not hugely in favor for recommending babel plugins that mess with our imports. I'd just recommend upgrading to Next.js > 13.5. And really push users towards avoiding barrel imports altogether.\r\n\r\nWe could also suggest them to make vscode not auto-import from top-level:\r\n\r\n```tsx\r\n// .vscode/settings.json\r\n  \"typescript.preferences.autoImportSpecifierExcludeRegexes\": [\"^@mui/[^\\/]+$\"]\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2065801511",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45426,
        "pr_file": "docs/data/material/guides/minimizing-bundle-size/minimizing-bundle-size.md",
        "discussion_id": "2043720832",
        "commented_code": "@@ -156,34 +156,50 @@ import Button from '@mui/material/Button/Button.js';\n Future changes to the library's internal structure could break these paths. `babel-plugin-direct-import` allows for granular control over what gets imported, but it comes with the potential risk of relying on internal library paths. This may fail in future versions if the package is updated to use the `exports` field in `package.json`, which could block access to internal paths like this.\n :::\n \n-If you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\n+Material UI supports tree shaking out of the box when importing from specific paths (such as `@mui/material/Button`), so this configuration is optional and primarily useful if you want to enforce modular imports.\n \n-`yarn add -D react-app-rewired customize-cra`\n+Vite doesn't require extra Babel configuration by default because it uses esbuild for fast bundling and minification.\n+But if you need to customize Babel (for example, to use babel-plugin-import), you can follow these steps:\n \n-Create a `config-overrides.js` file in the root directory:\n+1. Install dependencies:",
        "comment_created_at": "2025-04-29T08:40:09+00:00",
        "comment_author": "CodeLeom",
        "comment_body": "@Janpot Thanks for clarifying. That makes a lot of sense.\r\n\r\nI agree that avoiding barrel imports directly is a cleaner and more stable long-term solution.\r\n\r\nI’ll update base on your recommendation",
        "pr_file_module": null
      },
      {
        "comment_id": "2065996041",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45426,
        "pr_file": "docs/data/material/guides/minimizing-bundle-size/minimizing-bundle-size.md",
        "discussion_id": "2043720832",
        "commented_code": "@@ -156,34 +156,50 @@ import Button from '@mui/material/Button/Button.js';\n Future changes to the library's internal structure could break these paths. `babel-plugin-direct-import` allows for granular control over what gets imported, but it comes with the potential risk of relying on internal library paths. This may fail in future versions if the package is updated to use the `exports` field in `package.json`, which could block access to internal paths like this.\n :::\n \n-If you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\n+Material UI supports tree shaking out of the box when importing from specific paths (such as `@mui/material/Button`), so this configuration is optional and primarily useful if you want to enforce modular imports.\n \n-`yarn add -D react-app-rewired customize-cra`\n+Vite doesn't require extra Babel configuration by default because it uses esbuild for fast bundling and minification.\n+But if you need to customize Babel (for example, to use babel-plugin-import), you can follow these steps:\n \n-Create a `config-overrides.js` file in the root directory:\n+1. Install dependencies:",
        "comment_created_at": "2025-04-29T10:15:21+00:00",
        "comment_author": "CodeLeom",
        "comment_body": "@Janpot will the below be a good replacement for the whole ### Option two: use a Babel plugin\r\n\r\n\r\nIn most modern setups (Vite, Webpack 5+, Next.js 13.5+), tree-shaking already works out of the box, and production bundle size is optimized automatically.\r\n\r\nHowever, in development mode, importing from top-level barrels like @mui/material or @mui/icons-material can slow down dev server startup time.\r\nTo avoid this:\r\n\r\nPrefer direct path imports:\r\n\r\n```\r\nimport Button from '@mui/material/Button';\r\n```\r\n\r\ninstead of\r\n\r\n```\r\nimport { Button } from '@mui/material';\r\n```\r\n\r\nAvoid deep internal imports `(@mui/material/Tabs/TabIndicator)` which can break in future releases.\r\n\r\nIf you're using Next.js 13.5 or later, `optimizePackageImports` automatically optimizes imports for you, no extra configuration is needed.\r\n\r\nOptional (recommended): Configure your editor to discourage auto-importing from top-level barrels:\r\n\r\n```\r\n// .vscode/settings.json\r\n{\r\n  \"typescript.preferences.autoImportSpecifierExcludeRegexes\": [\"^@mui/[^\\\\/]+$\"]\r\n}\r\n```\r\n\r\nThis ensures developers are nudged toward direct imports, improving dev server performance without needing Babel plugins.\r\n\r\nUsing Babel plugins like `babel-plugin-import` is no longer recommended unless you are working in a legacy project where stricter modular import enforcement is needed.",
        "pr_file_module": null
      },
      {
        "comment_id": "2066207698",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45426,
        "pr_file": "docs/data/material/guides/minimizing-bundle-size/minimizing-bundle-size.md",
        "discussion_id": "2043720832",
        "commented_code": "@@ -156,34 +156,50 @@ import Button from '@mui/material/Button/Button.js';\n Future changes to the library's internal structure could break these paths. `babel-plugin-direct-import` allows for granular control over what gets imported, but it comes with the potential risk of relying on internal library paths. This may fail in future versions if the package is updated to use the `exports` field in `package.json`, which could block access to internal paths like this.\n :::\n \n-If you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\n+Material UI supports tree shaking out of the box when importing from specific paths (such as `@mui/material/Button`), so this configuration is optional and primarily useful if you want to enforce modular imports.\n \n-`yarn add -D react-app-rewired customize-cra`\n+Vite doesn't require extra Babel configuration by default because it uses esbuild for fast bundling and minification.\n+But if you need to customize Babel (for example, to use babel-plugin-import), you can follow these steps:\n \n-Create a `config-overrides.js` file in the root directory:\n+1. Install dependencies:",
        "comment_created_at": "2025-04-29T12:23:01+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "I wouldn’t replace the entire “Option two: use a Babel plugin” section. I’d keep the original content and avoid adding all the new material.",
        "pr_file_module": null
      },
      {
        "comment_id": "2066286226",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45426,
        "pr_file": "docs/data/material/guides/minimizing-bundle-size/minimizing-bundle-size.md",
        "discussion_id": "2043720832",
        "commented_code": "@@ -156,34 +156,50 @@ import Button from '@mui/material/Button/Button.js';\n Future changes to the library's internal structure could break these paths. `babel-plugin-direct-import` allows for granular control over what gets imported, but it comes with the potential risk of relying on internal library paths. This may fail in future versions if the package is updated to use the `exports` field in `package.json`, which could block access to internal paths like this.\n :::\n \n-If you are using Create React App, you will need to use a couple of projects that let you use `.babelrc` configuration, without ejecting.\n+Material UI supports tree shaking out of the box when importing from specific paths (such as `@mui/material/Button`), so this configuration is optional and primarily useful if you want to enforce modular imports.\n \n-`yarn add -D react-app-rewired customize-cra`\n+Vite doesn't require extra Babel configuration by default because it uses esbuild for fast bundling and minification.\n+But if you need to customize Babel (for example, to use babel-plugin-import), you can follow these steps:\n \n-Create a `config-overrides.js` file in the root directory:\n+1. Install dependencies:",
        "comment_created_at": "2025-04-29T12:56:42+00:00",
        "comment_author": "CodeLeom",
        "comment_body": "@ZeeshanTamboli, so you suggest, the content remains as it is without any adjustment. Leaving it as it is currently here https://mui.com/material-ui/guides/minimizing-bundle-size/",
        "pr_file_module": null
      }
    ]
  }
]