[
  {
    "discussion_id": "1098361172",
    "pr_number": 35653,
    "pr_file": "packages/mui-joy/src/Autocomplete/Autocomplete.test.tsx",
    "created_at": "2023-02-07T08:55:22+00:00",
    "commented_code": "}\n }\n \n+type TestOnScrollToBottom = {\n+  reason: 'mouse' | 'keyboard';\n+  getByRole: (role: string) => HTMLElement;\n+  onScrollToBottomCallCount: number;\n+  onScrollToBottom: ReturnType<typeof spy>;\n+};\n+\n+function testOnScrollToBottom({\n+  reason,\n+  onScrollToBottomCallCount,\n+  getByRole,",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1098361172",
        "repo_full_name": "mui/material-ui",
        "pr_number": 35653,
        "pr_file": "packages/mui-joy/src/Autocomplete/Autocomplete.test.tsx",
        "discussion_id": "1098361172",
        "commented_code": "@@ -34,6 +34,60 @@ function checkHighlightIs(listbox: HTMLElement, expected: string | null) {\n   }\n }\n \n+type TestOnScrollToBottom = {\n+  reason: 'mouse' | 'keyboard';\n+  getByRole: (role: string) => HTMLElement;\n+  onScrollToBottomCallCount: number;\n+  onScrollToBottom: ReturnType<typeof spy>;\n+};\n+\n+function testOnScrollToBottom({\n+  reason,\n+  onScrollToBottomCallCount,\n+  getByRole,",
        "comment_created_at": "2023-02-07T08:55:22+00:00",
        "comment_author": "ZeeshanTamboli",
        "comment_body": "You can use `screen.getByRole` below instead of passing `getByRole` parameter,",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1518698170",
    "pr_number": 41369,
    "pr_file": "packages/mui-base/src/TextareaAutosize/TextareaAutosize.test.tsx",
    "created_at": "2024-03-10T01:03:55+00:00",
    "commented_code": "expect(input.style).to.have.property('height', `${lineHeight * 2}px`);\n     });\n   });\n+\n+  it('should apply the inline styles using the \"style\" prop', function test() {\n+    if (/jsdom/.test(window.navigator.userAgent)) {\n+      this.skip();\n+    }\n+\n+    const { container } = render(<TextareaAutosize style={{ backgroundColor: 'yellow' }} />);\n+    const input = container.querySelector<HTMLTextAreaElement>('textarea')!;",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "1518698170",
        "repo_full_name": "mui/material-ui",
        "pr_number": 41369,
        "pr_file": "packages/mui-base/src/TextareaAutosize/TextareaAutosize.test.tsx",
        "discussion_id": "1518698170",
        "commented_code": "@@ -458,4 +458,17 @@ describe('<TextareaAutosize />', () => {\n       expect(input.style).to.have.property('height', `${lineHeight * 2}px`);\n     });\n   });\n+\n+  it('should apply the inline styles using the \"style\" prop', function test() {\n+    if (/jsdom/.test(window.navigator.userAgent)) {\n+      this.skip();\n+    }\n+\n+    const { container } = render(<TextareaAutosize style={{ backgroundColor: 'yellow' }} />);\n+    const input = container.querySelector<HTMLTextAreaElement>('textarea')!;",
        "comment_created_at": "2024-03-10T01:03:55+00:00",
        "comment_author": "oliviertassinari",
        "comment_body": "Prefer using the `screen`. We are moving tests as much as possible to rely on global queries. This is purely to keep the test environment simple. Most of the time, we don't need the notion of a container. We render one element at once on the screen.\r\n\r\n```suggestion\r\n    render(<TextareaAutosize style={{ backgroundColor: 'yellow' }} />);\r\n    const input = document.querySelector<HTMLTextAreaElement>('textarea')!;\r\n```",
        "pr_file_module": null
      }
    ]
  }
]