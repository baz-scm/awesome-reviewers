[
  {
    "discussion_id": "2138197553",
    "pr_number": 46001,
    "pr_file": "docs/data/material/customization/css-layers/css-layers.md",
    "created_at": "2025-06-10T15:22:57+00:00",
    "commented_code": "+# CSS Layers\n+\n+<p class=\"description\">Learn how to generate Material UI styles with cascade layers.</p>\n+\n+## Overview",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2138197553",
        "repo_full_name": "mui/material-ui",
        "pr_number": 46001,
        "pr_file": "docs/data/material/customization/css-layers/css-layers.md",
        "discussion_id": "2138197553",
        "commented_code": "@@ -0,0 +1,258 @@\n+# CSS Layers\n+\n+<p class=\"description\">Learn how to generate Material UI styles with cascade layers.</p>\n+\n+## Overview",
        "comment_created_at": "2025-06-10T15:22:57+00:00",
        "comment_author": "mapache-salvaje",
        "comment_body": "This is a pattern I've started implementing in the X docs and I think we should try to do the same for the other products. Instead of a generic \"Overview\" header we can pose a more informative introductory question to anticipate the user's needs. This also helps with SEO.\r\n\r\n```suggestion\r\n## What are cascade layers?\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2050769713",
    "pr_number": 45927,
    "pr_file": "docs/data/material/components/init-color-scheme-script/init-color-scheme-script.md",
    "created_at": "2025-04-18T15:25:19+00:00",
    "commented_code": "+---\n+productId: material-ui\n+title: InitColorSchemeScript component\n+components: InitColorSchemeScript\n+githubSource: packages/mui-material/src/InitColorSchemeScript\n+---\n+\n+# InitColorSchemeScript\n+\n+<p class=\"description\">InitColorSchemeScript component removes the dark mode flicker for server-side rendering application.</p>\n+\n+## Introduction\n+\n+`InitColorSchemeScript` component is used to remove the dark mode flicker for server-side rendering (SSR) applications.\n+It is a script that runs before React to attach an attribute based on user preference.\n+\n+It is recommended to use this component whenever:",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2050769713",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45927,
        "pr_file": "docs/data/material/components/init-color-scheme-script/init-color-scheme-script.md",
        "discussion_id": "2050769713",
        "commented_code": "@@ -0,0 +1,140 @@\n+---\n+productId: material-ui\n+title: InitColorSchemeScript component\n+components: InitColorSchemeScript\n+githubSource: packages/mui-material/src/InitColorSchemeScript\n+---\n+\n+# InitColorSchemeScript\n+\n+<p class=\"description\">InitColorSchemeScript component removes the dark mode flicker for server-side rendering application.</p>\n+\n+## Introduction\n+\n+`InitColorSchemeScript` component is used to remove the dark mode flicker for server-side rendering (SSR) applications.\n+It is a script that runs before React to attach an attribute based on user preference.\n+\n+It is recommended to use this component whenever:",
        "comment_created_at": "2025-04-18T15:25:19+00:00",
        "comment_author": "mapache-salvaje",
        "comment_body": "passive voice –> \"you\"-centered action\r\n\r\n```suggestion\r\nYou should implement this component whenever:\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2050772693",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45927,
        "pr_file": "docs/data/material/components/init-color-scheme-script/init-color-scheme-script.md",
        "discussion_id": "2050769713",
        "commented_code": "@@ -0,0 +1,140 @@\n+---\n+productId: material-ui\n+title: InitColorSchemeScript component\n+components: InitColorSchemeScript\n+githubSource: packages/mui-material/src/InitColorSchemeScript\n+---\n+\n+# InitColorSchemeScript\n+\n+<p class=\"description\">InitColorSchemeScript component removes the dark mode flicker for server-side rendering application.</p>\n+\n+## Introduction\n+\n+`InitColorSchemeScript` component is used to remove the dark mode flicker for server-side rendering (SSR) applications.\n+It is a script that runs before React to attach an attribute based on user preference.\n+\n+It is recommended to use this component whenever:",
        "comment_created_at": "2025-04-18T15:28:08+00:00",
        "comment_author": "mapache-salvaje",
        "comment_body": "IIUC, you should use these when _both_ of these statements are true, right? (You wouldn't need it if only one of these statements were true.) In that case, I'd suggest rewriting it as a single sentence:\r\n\r\n```suggestion\r\nFor the best user experience, you should implement this component in any server-rendered Material UI app that supports both light and dark modes.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2051888048",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45927,
        "pr_file": "docs/data/material/components/init-color-scheme-script/init-color-scheme-script.md",
        "discussion_id": "2050769713",
        "commented_code": "@@ -0,0 +1,140 @@\n+---\n+productId: material-ui\n+title: InitColorSchemeScript component\n+components: InitColorSchemeScript\n+githubSource: packages/mui-material/src/InitColorSchemeScript\n+---\n+\n+# InitColorSchemeScript\n+\n+<p class=\"description\">InitColorSchemeScript component removes the dark mode flicker for server-side rendering application.</p>\n+\n+## Introduction\n+\n+`InitColorSchemeScript` component is used to remove the dark mode flicker for server-side rendering (SSR) applications.\n+It is a script that runs before React to attach an attribute based on user preference.\n+\n+It is recommended to use this component whenever:",
        "comment_created_at": "2025-04-21T02:35:09+00:00",
        "comment_author": "siriwatknp",
        "comment_body": "> you should use these when both of these statements are true, right\r\n\r\nYes, that's the message I want to convey.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2050716741",
    "pr_number": 45906,
    "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
    "created_at": "2025-04-18T14:35:03+00:00",
    "commented_code": "+# Tailwind CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material UI with Tailwind CSS v4.</p>\n+\n+## Overview\n+\n+There are two steps to integrate Tailwind CSS v4 with Material UI:\n+\n+1. Configure the styles to generate with the `@layer` directive.\n+2. Set up the layer order so that `mui` comes before the `utilities` layer, allowing Tailwind CSS classes to override Material UI styles.\n+\n+The instructions below detail how to achieve this using common React frameworks.\n+\n+### Next.js App Router\n+\n+To integrate Tailwind CSS v4 with Material UI in a Next.js App Router project, start by configuring Material UI with Next.js in the [App Router integration guide](/material-ui/integrations/nextjs/#app-router).\n+Then follow these steps:\n+\n+1. Enable the [CSS layer feature](/material-ui/integrations/nextjs/#using-other-styling-solutions) in the root layout:\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+2. Configure the layer order in the Tailwind CSS file:\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+@import 'tailwindcss';\n+```\n+\n+### Next.js Pages Router\n+\n+To integrate Tailwind CSS v4 with Material UI in a Next.js Pages Router project, start by configuring Material UI with Next.js in the [Pages Router integration guide](/material-ui/integrations/nextjs/#pages-router).\n+Then follow these steps:\n+\n+1. Enable the [CSS layer feature](/material-ui/integrations/nextjs/#configuration-2) in a custom `_document`:\n+\n+```tsx title=\"pages/_document.tsx\"\n+import {\n+  createCache,\n+  documentGetInitialProps,\n+} from '@mui/material-nextjs/v15-pagesRouter';\n+\n+// ...\n+\n+MyDocument.getInitialProps = async (ctx: DocumentContext) => {\n+  const finalProps = await documentGetInitialProps(ctx, {\n+    emotionCache: createCache({ enableCssLayer: true }),\n+  });\n+  return finalProps;\n+};\n+```\n+\n+2. Configure the layer order with the `GlobalStyles` component—it must be the first child of the `AppCacheProvider`:\n+\n+```tsx title=\"pages/_app.tsx\"\n+import { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+export default function MyApp(props: AppProps) {\n+  const { Component, pageProps } = props;\n+  return (\n+    <AppCacheProvider {...props}>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      {/* Your app */}\n+    </AppCacheProvider>\n+  );\n+}\n+```\n+\n+### Vite.js or any other SPA\n+\n+To integrate Tailwind CSS v4 with Material UI in a Vite-based app, make the following changes in `src/main.tsx`:\n+\n+1. Pass the `enableCssLayer` prop to the `StyledEngineProvider` component.\n+2. Configure the layer order with the `GlobalStyles` component.\n+\n+```tsx title=\"main.tsx\"\n+import { StyledEngineProvider } from '@mui/material/styles';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+ReactDOM.createRoot(document.getElementById('root')!).render(\n+  <React.StrictMode>\n+    <StyledEngineProvider enableCssLayer>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      {/* Your app */}\n+    </StyledEngineProvider>\n+  </React.StrictMode>,\n+);\n+```\n+\n+## Tailwind CSS IntelliSense for VS Code\n+\n+Follow the [Tailwind CSS IntelliSense installation guide](https://tailwindcss.com/docs/editor-setup#intellisense-for-vs-code) and then add the following configuration to your [VS Code `settings.json`](https://code.visualstudio.com/docs/editor/settings#_settings-json-file) file:",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2050716741",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45906,
        "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
        "discussion_id": "2050716741",
        "commented_code": "@@ -0,0 +1,132 @@\n+# Tailwind CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material UI with Tailwind CSS v4.</p>\n+\n+## Overview\n+\n+There are two steps to integrate Tailwind CSS v4 with Material UI:\n+\n+1. Configure the styles to generate with the `@layer` directive.\n+2. Set up the layer order so that `mui` comes before the `utilities` layer, allowing Tailwind CSS classes to override Material UI styles.\n+\n+The instructions below detail how to achieve this using common React frameworks.\n+\n+### Next.js App Router\n+\n+To integrate Tailwind CSS v4 with Material UI in a Next.js App Router project, start by configuring Material UI with Next.js in the [App Router integration guide](/material-ui/integrations/nextjs/#app-router).\n+Then follow these steps:\n+\n+1. Enable the [CSS layer feature](/material-ui/integrations/nextjs/#using-other-styling-solutions) in the root layout:\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+2. Configure the layer order in the Tailwind CSS file:\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+@import 'tailwindcss';\n+```\n+\n+### Next.js Pages Router\n+\n+To integrate Tailwind CSS v4 with Material UI in a Next.js Pages Router project, start by configuring Material UI with Next.js in the [Pages Router integration guide](/material-ui/integrations/nextjs/#pages-router).\n+Then follow these steps:\n+\n+1. Enable the [CSS layer feature](/material-ui/integrations/nextjs/#configuration-2) in a custom `_document`:\n+\n+```tsx title=\"pages/_document.tsx\"\n+import {\n+  createCache,\n+  documentGetInitialProps,\n+} from '@mui/material-nextjs/v15-pagesRouter';\n+\n+// ...\n+\n+MyDocument.getInitialProps = async (ctx: DocumentContext) => {\n+  const finalProps = await documentGetInitialProps(ctx, {\n+    emotionCache: createCache({ enableCssLayer: true }),\n+  });\n+  return finalProps;\n+};\n+```\n+\n+2. Configure the layer order with the `GlobalStyles` component—it must be the first child of the `AppCacheProvider`:\n+\n+```tsx title=\"pages/_app.tsx\"\n+import { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+export default function MyApp(props: AppProps) {\n+  const { Component, pageProps } = props;\n+  return (\n+    <AppCacheProvider {...props}>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      {/* Your app */}\n+    </AppCacheProvider>\n+  );\n+}\n+```\n+\n+### Vite.js or any other SPA\n+\n+To integrate Tailwind CSS v4 with Material UI in a Vite-based app, make the following changes in `src/main.tsx`:\n+\n+1. Pass the `enableCssLayer` prop to the `StyledEngineProvider` component.\n+2. Configure the layer order with the `GlobalStyles` component.\n+\n+```tsx title=\"main.tsx\"\n+import { StyledEngineProvider } from '@mui/material/styles';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+ReactDOM.createRoot(document.getElementById('root')!).render(\n+  <React.StrictMode>\n+    <StyledEngineProvider enableCssLayer>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      {/* Your app */}\n+    </StyledEngineProvider>\n+  </React.StrictMode>,\n+);\n+```\n+\n+## Tailwind CSS IntelliSense for VS Code\n+\n+Follow the [Tailwind CSS IntelliSense installation guide](https://tailwindcss.com/docs/editor-setup#intellisense-for-vs-code) and then add the following configuration to your [VS Code `settings.json`](https://code.visualstudio.com/docs/editor/settings#_settings-json-file) file:",
        "comment_created_at": "2025-04-18T14:35:03+00:00",
        "comment_author": "mapache-salvaje",
        "comment_body": "I would suggest rearranging this section to inform readers why they need to do this before telling them how. I also realized that the Tailwind CSS docs don't really include installation instructions per se—they just link you to the VS Code marketplace, so I think we should do the same to get the user there directly. Here's how I'd rewrite this:\r\n\r\n```suggestion\r\nThe official [Tailwind CSS IntelliSense](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss) extension requires extra configuration to work properly when customizing the interior slots of Material UI components.\r\nAfter installing the extension, add the following line to your [VS Code `settings.json`](https://code.visualstudio.com/docs/editor/settings#_settings-json-file) file:\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2051880776",
        "repo_full_name": "mui/material-ui",
        "pr_number": 45906,
        "pr_file": "docs/data/material/integrations/tailwindcss/tailwindcss-v4.md",
        "discussion_id": "2050716741",
        "commented_code": "@@ -0,0 +1,132 @@\n+# Tailwind CSS v4 integration\n+\n+<p class=\"description\">Learn how to use Material UI with Tailwind CSS v4.</p>\n+\n+## Overview\n+\n+There are two steps to integrate Tailwind CSS v4 with Material UI:\n+\n+1. Configure the styles to generate with the `@layer` directive.\n+2. Set up the layer order so that `mui` comes before the `utilities` layer, allowing Tailwind CSS classes to override Material UI styles.\n+\n+The instructions below detail how to achieve this using common React frameworks.\n+\n+### Next.js App Router\n+\n+To integrate Tailwind CSS v4 with Material UI in a Next.js App Router project, start by configuring Material UI with Next.js in the [App Router integration guide](/material-ui/integrations/nextjs/#app-router).\n+Then follow these steps:\n+\n+1. Enable the [CSS layer feature](/material-ui/integrations/nextjs/#using-other-styling-solutions) in the root layout:\n+\n+```tsx title=\"src/app/layout.tsx\"\n+import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';\n+\n+export default function RootLayout() {\n+  return (\n+    <html lang=\"en\" suppressHydrationWarning>\n+      <body>\n+        <AppRouterCacheProvider options={{ enableCssLayer: true }}>\n+          {/* Your app */}\n+        </AppRouterCacheProvider>\n+      </body>\n+    </html>\n+  );\n+}\n+```\n+\n+2. Configure the layer order in the Tailwind CSS file:\n+\n+```css title=\"src/app/globals.css\"\n+@layer theme, base, mui, components, utilities;\n+@import 'tailwindcss';\n+```\n+\n+### Next.js Pages Router\n+\n+To integrate Tailwind CSS v4 with Material UI in a Next.js Pages Router project, start by configuring Material UI with Next.js in the [Pages Router integration guide](/material-ui/integrations/nextjs/#pages-router).\n+Then follow these steps:\n+\n+1. Enable the [CSS layer feature](/material-ui/integrations/nextjs/#configuration-2) in a custom `_document`:\n+\n+```tsx title=\"pages/_document.tsx\"\n+import {\n+  createCache,\n+  documentGetInitialProps,\n+} from '@mui/material-nextjs/v15-pagesRouter';\n+\n+// ...\n+\n+MyDocument.getInitialProps = async (ctx: DocumentContext) => {\n+  const finalProps = await documentGetInitialProps(ctx, {\n+    emotionCache: createCache({ enableCssLayer: true }),\n+  });\n+  return finalProps;\n+};\n+```\n+\n+2. Configure the layer order with the `GlobalStyles` component—it must be the first child of the `AppCacheProvider`:\n+\n+```tsx title=\"pages/_app.tsx\"\n+import { AppCacheProvider } from '@mui/material-nextjs/v15-pagesRouter';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+export default function MyApp(props: AppProps) {\n+  const { Component, pageProps } = props;\n+  return (\n+    <AppCacheProvider {...props}>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      {/* Your app */}\n+    </AppCacheProvider>\n+  );\n+}\n+```\n+\n+### Vite.js or any other SPA\n+\n+To integrate Tailwind CSS v4 with Material UI in a Vite-based app, make the following changes in `src/main.tsx`:\n+\n+1. Pass the `enableCssLayer` prop to the `StyledEngineProvider` component.\n+2. Configure the layer order with the `GlobalStyles` component.\n+\n+```tsx title=\"main.tsx\"\n+import { StyledEngineProvider } from '@mui/material/styles';\n+import GlobalStyles from '@mui/material/GlobalStyles';\n+\n+ReactDOM.createRoot(document.getElementById('root')!).render(\n+  <React.StrictMode>\n+    <StyledEngineProvider enableCssLayer>\n+      <GlobalStyles styles=\"@layer theme, base, mui, components, utilities;\" />\n+      {/* Your app */}\n+    </StyledEngineProvider>\n+  </React.StrictMode>,\n+);\n+```\n+\n+## Tailwind CSS IntelliSense for VS Code\n+\n+Follow the [Tailwind CSS IntelliSense installation guide](https://tailwindcss.com/docs/editor-setup#intellisense-for-vs-code) and then add the following configuration to your [VS Code `settings.json`](https://code.visualstudio.com/docs/editor/settings#_settings-json-file) file:",
        "comment_created_at": "2025-04-21T02:19:35+00:00",
        "comment_author": "siriwatknp",
        "comment_body": "Wow, that's a lot better.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2025077522",
    "pr_number": 44930,
    "pr_file": "docs/data/material/integrations/routing/routing.md",
    "created_at": "2025-04-02T15:24:35+00:00",
    "commented_code": ");\n   }\n   ```\n+\n+### TanStack Router\n+\n+TanStack Router supports custom links through the `createLink` helper function. More information about [`createLink`](https://tanstack.com/router/latest/docs/framework/react/guide/custom-link) can be found in their documentation.",
    "repo_full_name": "mui/material-ui",
    "discussion_comments": [
      {
        "comment_id": "2025077522",
        "repo_full_name": "mui/material-ui",
        "pr_number": 44930,
        "pr_file": "docs/data/material/integrations/routing/routing.md",
        "discussion_id": "2025077522",
        "commented_code": "@@ -147,3 +147,22 @@ The [example folder](https://github.com/mui/material-ui/tree/HEAD/examples/mater\n     );\n   }\n   ```\n+\n+### TanStack Router\n+\n+TanStack Router supports custom links through the `createLink` helper function. More information about [`createLink`](https://tanstack.com/router/latest/docs/framework/react/guide/custom-link) can be found in their documentation.",
        "comment_created_at": "2025-04-02T15:24:35+00:00",
        "comment_author": "mapache-salvaje",
        "comment_body": "Some copyediting here:\r\n- one sentence per line\r\n- more details about the snippet provided\r\n- passive —> active voice (\"...can be found\" vs. \"See...\")\r\n- more details about the doc link\r\n\r\n```suggestion\r\nTanStack Router supports custom links through its `createLink` helper function. \r\nThe snippet below shows the most basic implementation, wrapping a Material UI Link component.\r\nSee [TanStack Router—Custom Link](https://tanstack.com/router/latest/docs/framework/react/guide/custom-link) for more component integration examples.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]