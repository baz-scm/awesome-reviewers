[
  {
    "discussion_id": "2289994264",
    "pr_number": 4780,
    "pr_file": "apps/zbugs/shared/queries.ts",
    "created_at": "2025-08-21T06:35:15+00:00",
    "commented_code": "user: syncedQueryWithContext(\n     'user',\n-    (_auth: AuthData | undefined, userID: string) =>\n+    v.tuple([v.string()]).parse,\n+    (_auth: AuthData | undefined, userID) =>",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "2289994264",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4780,
        "pr_file": "apps/zbugs/shared/queries.ts",
        "discussion_id": "2289994264",
        "commented_code": "@@ -57,13 +71,15 @@ export const queries = {\n \n   user: syncedQueryWithContext(\n     'user',\n-    (_auth: AuthData | undefined, userID: string) =>\n+    v.tuple([v.string()]).parse,\n+    (_auth: AuthData | undefined, userID) =>",
        "comment_created_at": "2025-08-21T06:35:15+00:00",
        "comment_author": "florian-lefebvre",
        "comment_body": "Since auth is always `AuthData | undefined`, maybe there could be an API where you define this once? Eg.\r\n```ts\r\nconst { syncedQueryWithContext } = createQueriesWithContextFactory<AuthData>()\r\n\r\nsyncedQueryWithContext(\r\n\t'user',\r\n\tvalidator.parse,\r\n\t// Automatically typed as AuthData | undefined\r\n\t(auth, userID) => {}\r\n)\r\n```\r\nThis should be quite easy to do in TS",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2177060757",
    "pr_number": 4559,
    "pr_file": "packages/zero-solid/src/use-zero.ts",
    "created_at": "2025-07-01T09:50:26+00:00",
    "commented_code": "+import {\n+  batch,\n+  createContext,\n+  createMemo,\n+  onCleanup,\n+  useContext,\n+  type JSX,\n+} from 'solid-js';\n+import {\n+  Zero,\n+  type CustomMutatorDefs,\n+  type Schema,\n+  type ZeroOptions,\n+} from '../../zero/src/zero.ts';\n+\n+// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n+const ZeroContext = createContext<(() => Zero<any, any>) | undefined>(\n+  undefined,\n+);\n+\n+export function createZero<S extends Schema, MD extends CustomMutatorDefs<S>>(\n+  options: ZeroOptions<S, MD>,\n+): Zero<S, MD> {\n+  const opts = {\n+    ...options,\n+    batchViewUpdates: batch,\n+  };\n+  return new Zero(opts);\n+}\n+\n+export function useZero<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>(): () => Zero<S, MD> | undefined {\n+  const zero = useContext(ZeroContext);\n+\n+  // TODO: uncomment when we require ZeroProvider in a future release.\n+  // if (zero === undefined) {\n+  //   throw new Error('useZero must be used within a ZeroProvider');\n+  // }\n+  return zero ?? (() => undefined);\n+}\n+\n+export function createUseZero<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>() {\n+  return () => useZero<S, MD>();\n+}\n+\n+export function ZeroProvider<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>(props: {\n+  children: JSX.Element;\n+  zeroSignal: () => ZeroOptions<S, MD> | {zero: Zero<S, MD>};",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "2177060757",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4559,
        "pr_file": "packages/zero-solid/src/use-zero.ts",
        "discussion_id": "2177060757",
        "commented_code": "@@ -0,0 +1,77 @@\n+import {\n+  batch,\n+  createContext,\n+  createMemo,\n+  onCleanup,\n+  useContext,\n+  type JSX,\n+} from 'solid-js';\n+import {\n+  Zero,\n+  type CustomMutatorDefs,\n+  type Schema,\n+  type ZeroOptions,\n+} from '../../zero/src/zero.ts';\n+\n+// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n+const ZeroContext = createContext<(() => Zero<any, any>) | undefined>(\n+  undefined,\n+);\n+\n+export function createZero<S extends Schema, MD extends CustomMutatorDefs<S>>(\n+  options: ZeroOptions<S, MD>,\n+): Zero<S, MD> {\n+  const opts = {\n+    ...options,\n+    batchViewUpdates: batch,\n+  };\n+  return new Zero(opts);\n+}\n+\n+export function useZero<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>(): () => Zero<S, MD> | undefined {\n+  const zero = useContext(ZeroContext);\n+\n+  // TODO: uncomment when we require ZeroProvider in a future release.\n+  // if (zero === undefined) {\n+  //   throw new Error('useZero must be used within a ZeroProvider');\n+  // }\n+  return zero ?? (() => undefined);\n+}\n+\n+export function createUseZero<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>() {\n+  return () => useZero<S, MD>();\n+}\n+\n+export function ZeroProvider<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>(props: {\n+  children: JSX.Element;\n+  zeroSignal: () => ZeroOptions<S, MD> | {zero: Zero<S, MD>};",
        "comment_created_at": "2025-07-01T09:50:26+00:00",
        "comment_author": "arv",
        "comment_body": "I find this type a bit strange. I want the props to be called zero and options.\r\n\r\nIs this how the React one is done?",
        "pr_file_module": null
      },
      {
        "comment_id": "2178351901",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4559,
        "pr_file": "packages/zero-solid/src/use-zero.ts",
        "discussion_id": "2177060757",
        "commented_code": "@@ -0,0 +1,77 @@\n+import {\n+  batch,\n+  createContext,\n+  createMemo,\n+  onCleanup,\n+  useContext,\n+  type JSX,\n+} from 'solid-js';\n+import {\n+  Zero,\n+  type CustomMutatorDefs,\n+  type Schema,\n+  type ZeroOptions,\n+} from '../../zero/src/zero.ts';\n+\n+// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n+const ZeroContext = createContext<(() => Zero<any, any>) | undefined>(\n+  undefined,\n+);\n+\n+export function createZero<S extends Schema, MD extends CustomMutatorDefs<S>>(\n+  options: ZeroOptions<S, MD>,\n+): Zero<S, MD> {\n+  const opts = {\n+    ...options,\n+    batchViewUpdates: batch,\n+  };\n+  return new Zero(opts);\n+}\n+\n+export function useZero<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>(): () => Zero<S, MD> | undefined {\n+  const zero = useContext(ZeroContext);\n+\n+  // TODO: uncomment when we require ZeroProvider in a future release.\n+  // if (zero === undefined) {\n+  //   throw new Error('useZero must be used within a ZeroProvider');\n+  // }\n+  return zero ?? (() => undefined);\n+}\n+\n+export function createUseZero<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>() {\n+  return () => useZero<S, MD>();\n+}\n+\n+export function ZeroProvider<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>(props: {\n+  children: JSX.Element;\n+  zeroSignal: () => ZeroOptions<S, MD> | {zero: Zero<S, MD>};",
        "comment_created_at": "2025-07-01T19:07:05+00:00",
        "comment_author": "grgbkr",
        "comment_body": "I fixed this to more closely match the React API.  So its either:\r\n\r\n```\r\n<ZeroProvider zero={zero}>...</ZeroProvider>\r\n```\r\n\r\nor\r\n\r\n```\r\n<ZeroProvider server=\"https://foo.com\" userID=\"u1\" schema={schema}>...</ZeroProvider>\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2142024266",
    "pr_number": 4491,
    "pr_file": "packages/zero-client/src/client/zero.ts",
    "created_at": "2025-06-12T08:14:41+00:00",
    "commented_code": "return createLogOptions(options);\n   }\n \n+  preload(\n+    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+    query: Query<S, keyof S['tables'] & string, any>,\n+    options: PreloadOptions,\n+  ): void {\n+    query.delegate(this.#zeroContext).preload(options);",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "2142024266",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4491,
        "pr_file": "packages/zero-client/src/client/zero.ts",
        "discussion_id": "2142024266",
        "commented_code": "@@ -736,6 +743,14 @@ export class Zero<\n     return createLogOptions(options);\n   }\n \n+  preload(\n+    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+    query: Query<S, keyof S['tables'] & string, any>,\n+    options: PreloadOptions,\n+  ): void {\n+    query.delegate(this.#zeroContext).preload(options);",
        "comment_created_at": "2025-06-12T08:14:41+00:00",
        "comment_author": "arv",
        "comment_body": "I think zero.preload makes some sense but do we want query.preload and query.run then?\r\n\r\nWe should either put things on zero or on query and it seems like we are moving towards having queries not be tied to a zero instance.",
        "pr_file_module": null
      },
      {
        "comment_id": "2145163497",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4491,
        "pr_file": "packages/zero-client/src/client/zero.ts",
        "discussion_id": "2142024266",
        "commented_code": "@@ -736,6 +743,14 @@ export class Zero<\n     return createLogOptions(options);\n   }\n \n+  preload(\n+    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+    query: Query<S, keyof S['tables'] & string, any>,\n+    options: PreloadOptions,\n+  ): void {\n+    query.delegate(this.#zeroContext).preload(options);",
        "comment_created_at": "2025-06-13T13:57:58+00:00",
        "comment_author": "tantaman",
        "comment_body": "I'm not sure yet. Still trying this out. I think we may want to keep `query.run / then` for use in custom mutators. Rather than:\r\n\r\n```ts\r\nawait query.run(tx);\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2149281052",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4491,
        "pr_file": "packages/zero-client/src/client/zero.ts",
        "discussion_id": "2142024266",
        "commented_code": "@@ -736,6 +743,14 @@ export class Zero<\n     return createLogOptions(options);\n   }\n \n+  preload(\n+    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+    query: Query<S, keyof S['tables'] & string, any>,\n+    options: PreloadOptions,\n+  ): void {\n+    query.delegate(this.#zeroContext).preload(options);",
        "comment_created_at": "2025-06-16T07:54:13+00:00",
        "comment_author": "arv",
        "comment_body": "The alternative could be:\r\n\r\n```js\r\nawait tx.run(query);\r\n```\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1957363205",
    "pr_number": 3822,
    "pr_file": "packages/zero-client/src/client/custom.ts",
    "created_at": "2025-02-16T16:22:44+00:00",
    "commented_code": "};\n };\n \n-export type CustomMutatorImpl<S extends Schema> = (\n+// eslint-disable-next-line @typescript-eslint/no-explicit-any\n+export type CustomMutatorImpl<S extends Schema, TArgs = any> = (\n   tx: Transaction<S>,\n   // TODO: many args. See commit: 52657c2f934b4a458d628ea77e56ce92b61eb3c6 which did have many args.",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1957363205",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3822,
        "pr_file": "packages/zero-client/src/client/custom.ts",
        "discussion_id": "1957363205",
        "commented_code": "@@ -45,12 +45,12 @@ export type CustomMutatorDefs<S extends Schema> = {\n   };\n };\n \n-export type CustomMutatorImpl<S extends Schema> = (\n+// eslint-disable-next-line @typescript-eslint/no-explicit-any\n+export type CustomMutatorImpl<S extends Schema, TArgs = any> = (\n   tx: Transaction<S>,\n   // TODO: many args. See commit: 52657c2f934b4a458d628ea77e56ce92b61eb3c6 which did have many args.",
        "comment_created_at": "2025-02-16T16:22:44+00:00",
        "comment_author": "cbnsndwch",
        "comment_body": "On this:\r\n\r\n> // TODO: many args. See commit: 52657c2f934b4a458d628ea77e56ce92b61eb3c6 which did have many args.\r\n> // The issue being that it will be a protocol change to support varargs.\r\n\r\nI find that the pattern of a single object argument to queries and mutations helps in keeping code clean and self-contained. Implementors can define a single type/contract to receive input data, including an array of arbitrary length",
        "pr_file_module": null
      },
      {
        "comment_id": "1972360508",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3822,
        "pr_file": "packages/zero-client/src/client/custom.ts",
        "discussion_id": "1957363205",
        "commented_code": "@@ -45,12 +45,12 @@ export type CustomMutatorDefs<S extends Schema> = {\n   };\n };\n \n-export type CustomMutatorImpl<S extends Schema> = (\n+// eslint-disable-next-line @typescript-eslint/no-explicit-any\n+export type CustomMutatorImpl<S extends Schema, TArgs = any> = (\n   tx: Transaction<S>,\n   // TODO: many args. See commit: 52657c2f934b4a458d628ea77e56ce92b61eb3c6 which did have many args.",
        "comment_created_at": "2025-02-26T20:28:16+00:00",
        "comment_author": "tantaman",
        "comment_body": "I think a single arg also encourage signatures for mutators that are more resilient.\r\n\r\neg.,\r\n\r\n```ts\r\nmutator(args: {\r\n  arg1?: string;\r\n  arg2?: string;\r\n});\r\n```\r\n\r\ncan have arguments removed without impacting backwards compatibility whereas positional arguments would be more rigid.\r\n\r\nBut this is up to @aboodman ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1905124177",
    "pr_number": 3460,
    "pr_file": "packages/zero-solid/src/use-query.ts",
    "created_at": "2025-01-07T09:05:13+00:00",
    "commented_code": "TableSchema,\n } from '../../zero-advanced/src/mod.js';\n import {solidViewFactory} from './solid-view.js';\n+import type {ResultType} from '../../zql/src/query/typed-view.js';\n+\n+export type QueryResultDetails = Readonly<{\n+  type: ResultType;\n+}>;\n+\n+export type QueryResult<TReturn extends QueryType> = readonly [\n+  Smash<TReturn>,\n+  QueryResultDetails,\n+];\n \n export function useQuery<\n   TSchema extends TableSchema,\n   TReturn extends QueryType,\n->(querySignal: () => Query<TSchema, TReturn>): Accessor<Smash<TReturn>> {\n+>(querySignal: () => Query<TSchema, TReturn>): Accessor<QueryResult<TReturn>> {",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1905124177",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3460,
        "pr_file": "packages/zero-solid/src/use-query.ts",
        "discussion_id": "1905124177",
        "commented_code": "@@ -7,11 +7,21 @@ import type {\n   TableSchema,\n } from '../../zero-advanced/src/mod.js';\n import {solidViewFactory} from './solid-view.js';\n+import type {ResultType} from '../../zql/src/query/typed-view.js';\n+\n+export type QueryResultDetails = Readonly<{\n+  type: ResultType;\n+}>;\n+\n+export type QueryResult<TReturn extends QueryType> = readonly [\n+  Smash<TReturn>,\n+  QueryResultDetails,\n+];\n \n export function useQuery<\n   TSchema extends TableSchema,\n   TReturn extends QueryType,\n->(querySignal: () => Query<TSchema, TReturn>): Accessor<Smash<TReturn>> {\n+>(querySignal: () => Query<TSchema, TReturn>): Accessor<QueryResult<TReturn>> {",
        "comment_created_at": "2025-01-07T09:05:13+00:00",
        "comment_author": "arv",
        "comment_body": "After using this in hello-zero-solid it is clear to me that the return type of this should be:\r\n\r\n```ts\r\n[\r\n  Accessor<Smash<TReturn>>,\r\n  Accessor<QueryResultDetails>,\r\n]\r\n```\r\n\r\nThe way it is done now, one cannot use destructuring which makes the code a bit inconvenient.\r\n\r\n\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1905136888",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3460,
        "pr_file": "packages/zero-solid/src/use-query.ts",
        "discussion_id": "1905124177",
        "commented_code": "@@ -7,11 +7,21 @@ import type {\n   TableSchema,\n } from '../../zero-advanced/src/mod.js';\n import {solidViewFactory} from './solid-view.js';\n+import type {ResultType} from '../../zql/src/query/typed-view.js';\n+\n+export type QueryResultDetails = Readonly<{\n+  type: ResultType;\n+}>;\n+\n+export type QueryResult<TReturn extends QueryType> = readonly [\n+  Smash<TReturn>,\n+  QueryResultDetails,\n+];\n \n export function useQuery<\n   TSchema extends TableSchema,\n   TReturn extends QueryType,\n->(querySignal: () => Query<TSchema, TReturn>): Accessor<Smash<TReturn>> {\n+>(querySignal: () => Query<TSchema, TReturn>): Accessor<QueryResult<TReturn>> {",
        "comment_created_at": "2025-01-07T09:14:25+00:00",
        "comment_author": "arv",
        "comment_body": "https://github.com/rocicorp/hello-zero-solid/pull/9",
        "pr_file_module": null
      }
    ]
  }
]