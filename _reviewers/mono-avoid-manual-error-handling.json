[
  {
    "discussion_id": "2216642665",
    "pr_number": 4652,
    "pr_file": "apps/zbugs/src/pages/issue/issue-composer.tsx",
    "created_at": "2025-07-18T18:18:10+00:00",
    "commented_code": "});\n   }, [description]);\n \n-  const handleSubmit = () => {\n+  const handleSubmit = async () => {\n     const id = nanoid();\n \n-    z.mutate.issue.create({\n+    const result = z.mutate.issue.create({\n       id,\n       title,\n       description: description ?? '',\n       created: Date.now(),\n       modified: Date.now(),\n     });\n+\n     reset();\n     onDismiss(id);\n+\n+    const raceResult = await promiseRace([sleep(5000), result.server]);\n+    if (raceResult === 0) {\n+      // TODO show toast",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "2216642665",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4652,
        "pr_file": "apps/zbugs/src/pages/issue/issue-composer.tsx",
        "discussion_id": "2216642665",
        "commented_code": "@@ -49,18 +51,25 @@ export function IssueComposer({isOpen, onDismiss}: Props) {\n     });\n   }, [description]);\n \n-  const handleSubmit = () => {\n+  const handleSubmit = async () => {\n     const id = nanoid();\n \n-    z.mutate.issue.create({\n+    const result = z.mutate.issue.create({\n       id,\n       title,\n       description: description ?? '',\n       created: Date.now(),\n       modified: Date.now(),\n     });\n+\n     reset();\n     onDismiss(id);\n+\n+    const raceResult = await promiseRace([sleep(5000), result.server]);\n+    if (raceResult === 0) {\n+      // TODO show toast",
        "comment_created_at": "2025-07-18T18:18:10+00:00",
        "comment_author": "0xcadams",
        "comment_body": "Do we want this to be a toast?",
        "pr_file_module": null
      },
      {
        "comment_id": "2216676729",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4652,
        "pr_file": "apps/zbugs/src/pages/issue/issue-composer.tsx",
        "discussion_id": "2216642665",
        "commented_code": "@@ -49,18 +51,25 @@ export function IssueComposer({isOpen, onDismiss}: Props) {\n     });\n   }, [description]);\n \n-  const handleSubmit = () => {\n+  const handleSubmit = async () => {\n     const id = nanoid();\n \n-    z.mutate.issue.create({\n+    const result = z.mutate.issue.create({\n       id,\n       title,\n       description: description ?? '',\n       created: Date.now(),\n       modified: Date.now(),\n     });\n+\n     reset();\n     onDismiss(id);\n+\n+    const raceResult = await promiseRace([sleep(5000), result.server]);\n+    if (raceResult === 0) {\n+      // TODO show toast",
        "comment_created_at": "2025-07-18T18:41:11+00:00",
        "comment_author": "aboodman",
        "comment_body": "I think that we should rely on a new global `onError` handler that Matt is constantly wanting to add. It is half-implemented in the codebase right now, but we got distracted by API design questions and never finished it.\r\n\r\nI don't want every mutator to have to do this kind of error handling manually.",
        "pr_file_module": null
      },
      {
        "comment_id": "2223181903",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4652,
        "pr_file": "apps/zbugs/src/pages/issue/issue-composer.tsx",
        "discussion_id": "2216642665",
        "commented_code": "@@ -49,18 +51,25 @@ export function IssueComposer({isOpen, onDismiss}: Props) {\n     });\n   }, [description]);\n \n-  const handleSubmit = () => {\n+  const handleSubmit = async () => {\n     const id = nanoid();\n \n-    z.mutate.issue.create({\n+    const result = z.mutate.issue.create({\n       id,\n       title,\n       description: description ?? '',\n       created: Date.now(),\n       modified: Date.now(),\n     });\n+\n     reset();\n     onDismiss(id);\n+\n+    const raceResult = await promiseRace([sleep(5000), result.server]);\n+    if (raceResult === 0) {\n+      // TODO show toast",
        "comment_created_at": "2025-07-22T16:41:48+00:00",
        "comment_author": "0xcadams",
        "comment_body": "This makes sense - agreed it would be much better to have this in `onError`. So I can add this toast later and only have this PR include online indicator, once the onError handler lands.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1914414895",
    "pr_number": 3525,
    "pr_file": "apps/zbugs/src/components/user-picker.tsx",
    "created_at": "2025-01-14T08:19:59+00:00",
    "commented_code": "unselectedLabel,\n   placeholder,\n   allowNone = true,\n-  crewOnly = false,\n+  filter = undefined,\n }: Props) {\n   const z = useZero();\n \n   let q = z.query.user;\n   if (disabled && selected?.login) {\n     q = q.where('login', selected.login);\n-  } else if (crewOnly) {\n-    q = q.where('role', 'crew');\n+  } else if (filter) {\n+    if (filter === 'crew') {\n+      q = q.where(({cmp, not, and}) =>\n+        and(cmp('role', 'crew'), not(cmp('login', 'LIKE', 'rocibot%'))),\n+      );\n+    } else if (filter === 'creators') {\n+      q = q.whereExists('createdIssues');\n+    } else {\n+      throw new Error(`Unknown filter: ${filter}`);",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1914414895",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3525,
        "pr_file": "apps/zbugs/src/components/user-picker.tsx",
        "discussion_id": "1914414895",
        "commented_code": "@@ -26,15 +26,23 @@ export function UserPicker({\n   unselectedLabel,\n   placeholder,\n   allowNone = true,\n-  crewOnly = false,\n+  filter = undefined,\n }: Props) {\n   const z = useZero();\n \n   let q = z.query.user;\n   if (disabled && selected?.login) {\n     q = q.where('login', selected.login);\n-  } else if (crewOnly) {\n-    q = q.where('role', 'crew');\n+  } else if (filter) {\n+    if (filter === 'crew') {\n+      q = q.where(({cmp, not, and}) =>\n+        and(cmp('role', 'crew'), not(cmp('login', 'LIKE', 'rocibot%'))),\n+      );\n+    } else if (filter === 'creators') {\n+      q = q.whereExists('createdIssues');\n+    } else {\n+      throw new Error(`Unknown filter: ${filter}`);",
        "comment_created_at": "2025-01-14T08:19:59+00:00",
        "comment_author": "arv",
        "comment_body": "you can do\r\n\r\n```js\r\nunreachable(filter)\r\n```\r\n\r\nand you get both static and runtime assertion.",
        "pr_file_module": null
      }
    ]
  }
]