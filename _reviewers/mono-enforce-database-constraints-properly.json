[
  {
    "discussion_id": "1811692989",
    "pr_number": 2795,
    "pr_file": "apps/zbugs/docker/init_upstream/init.sql",
    "created_at": "2024-10-23T02:41:58+00:00",
    "commented_code": "\"labelID\" VARCHAR REFERENCES label(id),\n     \"issueID\" VARCHAR REFERENCES issue(id) ON DELETE CASCADE,\n     PRIMARY KEY (\"labelID\", \"issueID\")\n+    );\n+\n+CREATE TABLE emoji (",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1811692989",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 2795,
        "pr_file": "apps/zbugs/docker/init_upstream/init.sql",
        "discussion_id": "1811692989",
        "commented_code": "@@ -77,6 +81,27 @@ CREATE TABLE \"issueLabel\" (\n     \"labelID\" VARCHAR REFERENCES label(id),\n     \"issueID\" VARCHAR REFERENCES issue(id) ON DELETE CASCADE,\n     PRIMARY KEY (\"labelID\", \"issueID\")\n+    );\n+\n+CREATE TABLE emoji (",
        "comment_created_at": "2024-10-23T02:41:58+00:00",
        "comment_author": "aboodman",
        "comment_body": "This schema can represent the same user assigning the same emoji to the same issue/comment multiple times, which we do not want.\r\n\r\nInstead i think maybe:\r\n\r\n```\r\nEmoji\r\n=====\r\nid varchar primary key\r\n\r\n# The PK of the \"subject\" (either issue or comment) that the emoji is attached to\r\n# We cannot use a FK to enforce referential integrity but a custom CHECK constraint\r\n# should be able to.\r\n# We wil also need a custom secondary index on this since the FK won't give it to us.\r\n+ subjectID varchar not null\r\n\r\nvalue varchar not null\r\ncreatorID VARCHAR REFERENCES \"user\"(id) NOT NULL,\r\ncreated double precision DEFAULT (EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000)\r\n\r\n# And then put a unique constraint on (subjectID, value, creatorID)\r\n```\r\n\r\nWe will not need the `issueEmoji` or `commentEmoji` tables with this design as you can find emojis using just the emoji table and the subjectID.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2211714650",
    "pr_number": 4641,
    "pr_file": "apps/zbugs/docker/share_sql/base.sql",
    "created_at": "2025-07-16T22:16:47+00:00",
    "commented_code": "PRIMARY KEY (\"userID\", \"key\")\n );\n \n+-- issueNotifications\n+\n+CREATE TABLE \"issueNotifications\" (\n+    \"userID\" VARCHAR REFERENCES \"user\"(id) ON DELETE CASCADE,\n+    \"issueID\" VARCHAR REFERENCES issue(id) ON DELETE CASCADE,\n+    \"subscribed\" BOOLEAN DEFAULT true,",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "2211714650",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4641,
        "pr_file": "apps/zbugs/docker/share_sql/base.sql",
        "discussion_id": "2211714650",
        "commented_code": "@@ -105,6 +105,16 @@ CREATE TABLE \"userPref\" (\n     PRIMARY KEY (\"userID\", \"key\")\n );\n \n+-- issueNotifications\n+\n+CREATE TABLE \"issueNotifications\" (\n+    \"userID\" VARCHAR REFERENCES \"user\"(id) ON DELETE CASCADE,\n+    \"issueID\" VARCHAR REFERENCES issue(id) ON DELETE CASCADE,\n+    \"subscribed\" BOOLEAN DEFAULT true,",
        "comment_created_at": "2025-07-16T22:16:47+00:00",
        "comment_author": "aboodman",
        "comment_body": "My first reaction was that `subscribed` column not necessary since presence can mean subscribed and non-presence, not-subscribed.\r\n\r\nBut I realize you are probably trying to prevent user from getting resub'd if they continue interacting w/ bug. In that case, I agre but can you add a comment explaining the schema choice since it might not be immediately obvious.",
        "pr_file_module": null
      },
      {
        "comment_id": "2211842009",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4641,
        "pr_file": "apps/zbugs/docker/share_sql/base.sql",
        "discussion_id": "2211714650",
        "commented_code": "@@ -105,6 +105,16 @@ CREATE TABLE \"userPref\" (\n     PRIMARY KEY (\"userID\", \"key\")\n );\n \n+-- issueNotifications\n+\n+CREATE TABLE \"issueNotifications\" (\n+    \"userID\" VARCHAR REFERENCES \"user\"(id) ON DELETE CASCADE,\n+    \"issueID\" VARCHAR REFERENCES issue(id) ON DELETE CASCADE,\n+    \"subscribed\" BOOLEAN DEFAULT true,",
        "comment_created_at": "2025-07-16T23:46:33+00:00",
        "comment_author": "0xcadams",
        "comment_body": "Honestly I just built on Alex/your work. I previously had something different. But this is a good point and I will add the resub logic",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1859062024",
    "pr_number": 2795,
    "pr_file": "apps/zbugs/docker/init_upstream/init.sql",
    "created_at": "2024-11-26T18:37:45+00:00",
    "commented_code": "PRIMARY KEY (\"labelID\", \"issueID\")\n );\n \n+CREATE TABLE emoji (\n+    \"id\" VARCHAR PRIMARY KEY,\n+    \"value\" VARCHAR NOT NULL,\n+    \"annotation\" VARCHAR,\n+    -- The PK of the \"subject\" (either issue or comment) that the emoji is attached to\n+    -- We cannot use a FK to enforce referential integrity. Instead we use a trigger to enforce this.\n+    -- We wil also need a custom secondary index on this since the FK won't give it to us.\n+    \"subjectID\" VARCHAR NOT NULL,\n+    \"creatorID\" VARCHAR REFERENCES \"user\"(id) ON DELETE CASCADE,\n+    \"created\" double precision DEFAULT (EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000),\n+\n+    UNIQUE (\"subjectID\", \"creatorID\", \"value\")\n+);\n+CREATE INDEX emoji_created_idx ON emoji (created);\n+CREATE INDEX emoji_subject_id_idx ON emoji (\"subjectID\");\n+\n+CREATE OR REPLACE FUNCTION emoji_check_subject_id()\n+RETURNS TRIGGER AS $$\n+BEGIN\n+    -- Check if subjectID exists in the issue table\n+    IF EXISTS (SELECT 1 FROM issue WHERE id = NEW.\"subjectID\") THEN\n+        NULL; -- Do nothing\n+    ELSIF EXISTS (SELECT 1 FROM comment WHERE id = NEW.\"subjectID\") THEN\n+        NULL; -- Do nothing\n+    ELSE\n+        RAISE EXCEPTION 'id ''%'' does not exist in issue or comment', NEW.\"subjectID\";\n+    END IF;\n+    \n+    RETURN NEW;\n+END;\n+$$ LANGUAGE plpgsql;\n+\n+CREATE TRIGGER emoji_check_subject_id_update_trigger\n+BEFORE UPDATE ON emoji\n+FOR EACH ROW\n+EXECUTE FUNCTION emoji_check_subject_id();\n+\n+CREATE TRIGGER emoji_check_subject_id_insert_trigger\n+BEFORE INSERT ON emoji\n+FOR EACH ROW\n+EXECUTE FUNCTION emoji_check_subject_id();\n+\n+-- Delete emoji when issue is deleted\n+CREATE OR REPLACE FUNCTION delete_emoji_on_issue_delete()\n+RETURNS TRIGGER AS $$\n+BEGIN\n+    DELETE FROM emoji WHERE \"subjectID\" = OLD.id;\n+    RETURN OLD;\n+END;\n+$$ LANGUAGE plpgsql;\n+\n+CREATE TRIGGER delete_emoji_on_issue_delete_trigger\n+AFTER DELETE ON issue\n+FOR EACH ROW\n+EXECUTE FUNCTION delete_emoji_on_issue_delete();\n+\n+-- Delete emoji when comment is deleted\n+CREATE OR REPLACE FUNCTION delete_emoji_on_comment_delete()\n+RETURNS TRIGGER AS $$\n+BEGIN\n+    DELETE FROM emoji WHERE \"subjectID\" = OLD.id;\n+    RETURN OLD;\n+END;\n+$$ LANGUAGE plpgsql;\n+\n+CREATE TRIGGER delete_emoji_on_comment_delete_trigger\n+AFTER DELETE ON comment\n+FOR EACH ROW\n+EXECUTE FUNCTION delete_emoji_on_comment_delete();\n+\n+CREATE TABLE \"userPref\" (\n+    \"key\" VARCHAR NOT NULL,\n+    \"value\" VARCHAR NOT NULL,\n+    \"userID\" VARCHAR REFERENCES \"user\"(id) ON DELETE CASCADE,\n+\n+    PRIMARY KEY (\"key\", \"userID\")",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1859062024",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 2795,
        "pr_file": "apps/zbugs/docker/init_upstream/init.sql",
        "discussion_id": "1859062024",
        "commented_code": "@@ -79,6 +81,84 @@ CREATE TABLE \"issueLabel\" (\n     PRIMARY KEY (\"labelID\", \"issueID\")\n );\n \n+CREATE TABLE emoji (\n+    \"id\" VARCHAR PRIMARY KEY,\n+    \"value\" VARCHAR NOT NULL,\n+    \"annotation\" VARCHAR,\n+    -- The PK of the \"subject\" (either issue or comment) that the emoji is attached to\n+    -- We cannot use a FK to enforce referential integrity. Instead we use a trigger to enforce this.\n+    -- We wil also need a custom secondary index on this since the FK won't give it to us.\n+    \"subjectID\" VARCHAR NOT NULL,\n+    \"creatorID\" VARCHAR REFERENCES \"user\"(id) ON DELETE CASCADE,\n+    \"created\" double precision DEFAULT (EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000),\n+\n+    UNIQUE (\"subjectID\", \"creatorID\", \"value\")\n+);\n+CREATE INDEX emoji_created_idx ON emoji (created);\n+CREATE INDEX emoji_subject_id_idx ON emoji (\"subjectID\");\n+\n+CREATE OR REPLACE FUNCTION emoji_check_subject_id()\n+RETURNS TRIGGER AS $$\n+BEGIN\n+    -- Check if subjectID exists in the issue table\n+    IF EXISTS (SELECT 1 FROM issue WHERE id = NEW.\"subjectID\") THEN\n+        NULL; -- Do nothing\n+    ELSIF EXISTS (SELECT 1 FROM comment WHERE id = NEW.\"subjectID\") THEN\n+        NULL; -- Do nothing\n+    ELSE\n+        RAISE EXCEPTION 'id ''%'' does not exist in issue or comment', NEW.\"subjectID\";\n+    END IF;\n+    \n+    RETURN NEW;\n+END;\n+$$ LANGUAGE plpgsql;\n+\n+CREATE TRIGGER emoji_check_subject_id_update_trigger\n+BEFORE UPDATE ON emoji\n+FOR EACH ROW\n+EXECUTE FUNCTION emoji_check_subject_id();\n+\n+CREATE TRIGGER emoji_check_subject_id_insert_trigger\n+BEFORE INSERT ON emoji\n+FOR EACH ROW\n+EXECUTE FUNCTION emoji_check_subject_id();\n+\n+-- Delete emoji when issue is deleted\n+CREATE OR REPLACE FUNCTION delete_emoji_on_issue_delete()\n+RETURNS TRIGGER AS $$\n+BEGIN\n+    DELETE FROM emoji WHERE \"subjectID\" = OLD.id;\n+    RETURN OLD;\n+END;\n+$$ LANGUAGE plpgsql;\n+\n+CREATE TRIGGER delete_emoji_on_issue_delete_trigger\n+AFTER DELETE ON issue\n+FOR EACH ROW\n+EXECUTE FUNCTION delete_emoji_on_issue_delete();\n+\n+-- Delete emoji when comment is deleted\n+CREATE OR REPLACE FUNCTION delete_emoji_on_comment_delete()\n+RETURNS TRIGGER AS $$\n+BEGIN\n+    DELETE FROM emoji WHERE \"subjectID\" = OLD.id;\n+    RETURN OLD;\n+END;\n+$$ LANGUAGE plpgsql;\n+\n+CREATE TRIGGER delete_emoji_on_comment_delete_trigger\n+AFTER DELETE ON comment\n+FOR EACH ROW\n+EXECUTE FUNCTION delete_emoji_on_comment_delete();\n+\n+CREATE TABLE \"userPref\" (\n+    \"key\" VARCHAR NOT NULL,\n+    \"value\" VARCHAR NOT NULL,\n+    \"userID\" VARCHAR REFERENCES \"user\"(id) ON DELETE CASCADE,\n+\n+    PRIMARY KEY (\"key\", \"userID\")",
        "comment_created_at": "2024-11-26T18:37:45+00:00",
        "comment_author": "tantaman",
        "comment_body": "@arv - shouldn't the primary key order be reversed? `PRIMARY KEY (\"userID\", \"key\")` so you can look all all preferences for a user?",
        "pr_file_module": null
      },
      {
        "comment_id": "1859088016",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 2795,
        "pr_file": "apps/zbugs/docker/init_upstream/init.sql",
        "discussion_id": "1859062024",
        "commented_code": "@@ -79,6 +81,84 @@ CREATE TABLE \"issueLabel\" (\n     PRIMARY KEY (\"labelID\", \"issueID\")\n );\n \n+CREATE TABLE emoji (\n+    \"id\" VARCHAR PRIMARY KEY,\n+    \"value\" VARCHAR NOT NULL,\n+    \"annotation\" VARCHAR,\n+    -- The PK of the \"subject\" (either issue or comment) that the emoji is attached to\n+    -- We cannot use a FK to enforce referential integrity. Instead we use a trigger to enforce this.\n+    -- We wil also need a custom secondary index on this since the FK won't give it to us.\n+    \"subjectID\" VARCHAR NOT NULL,\n+    \"creatorID\" VARCHAR REFERENCES \"user\"(id) ON DELETE CASCADE,\n+    \"created\" double precision DEFAULT (EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000),\n+\n+    UNIQUE (\"subjectID\", \"creatorID\", \"value\")\n+);\n+CREATE INDEX emoji_created_idx ON emoji (created);\n+CREATE INDEX emoji_subject_id_idx ON emoji (\"subjectID\");\n+\n+CREATE OR REPLACE FUNCTION emoji_check_subject_id()\n+RETURNS TRIGGER AS $$\n+BEGIN\n+    -- Check if subjectID exists in the issue table\n+    IF EXISTS (SELECT 1 FROM issue WHERE id = NEW.\"subjectID\") THEN\n+        NULL; -- Do nothing\n+    ELSIF EXISTS (SELECT 1 FROM comment WHERE id = NEW.\"subjectID\") THEN\n+        NULL; -- Do nothing\n+    ELSE\n+        RAISE EXCEPTION 'id ''%'' does not exist in issue or comment', NEW.\"subjectID\";\n+    END IF;\n+    \n+    RETURN NEW;\n+END;\n+$$ LANGUAGE plpgsql;\n+\n+CREATE TRIGGER emoji_check_subject_id_update_trigger\n+BEFORE UPDATE ON emoji\n+FOR EACH ROW\n+EXECUTE FUNCTION emoji_check_subject_id();\n+\n+CREATE TRIGGER emoji_check_subject_id_insert_trigger\n+BEFORE INSERT ON emoji\n+FOR EACH ROW\n+EXECUTE FUNCTION emoji_check_subject_id();\n+\n+-- Delete emoji when issue is deleted\n+CREATE OR REPLACE FUNCTION delete_emoji_on_issue_delete()\n+RETURNS TRIGGER AS $$\n+BEGIN\n+    DELETE FROM emoji WHERE \"subjectID\" = OLD.id;\n+    RETURN OLD;\n+END;\n+$$ LANGUAGE plpgsql;\n+\n+CREATE TRIGGER delete_emoji_on_issue_delete_trigger\n+AFTER DELETE ON issue\n+FOR EACH ROW\n+EXECUTE FUNCTION delete_emoji_on_issue_delete();\n+\n+-- Delete emoji when comment is deleted\n+CREATE OR REPLACE FUNCTION delete_emoji_on_comment_delete()\n+RETURNS TRIGGER AS $$\n+BEGIN\n+    DELETE FROM emoji WHERE \"subjectID\" = OLD.id;\n+    RETURN OLD;\n+END;\n+$$ LANGUAGE plpgsql;\n+\n+CREATE TRIGGER delete_emoji_on_comment_delete_trigger\n+AFTER DELETE ON comment\n+FOR EACH ROW\n+EXECUTE FUNCTION delete_emoji_on_comment_delete();\n+\n+CREATE TABLE \"userPref\" (\n+    \"key\" VARCHAR NOT NULL,\n+    \"value\" VARCHAR NOT NULL,\n+    \"userID\" VARCHAR REFERENCES \"user\"(id) ON DELETE CASCADE,\n+\n+    PRIMARY KEY (\"key\", \"userID\")",
        "comment_created_at": "2024-11-26T18:58:53+00:00",
        "comment_author": "arv",
        "comment_body": "I didn't realize that would matter. Feel free to change it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1863285392",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 2795,
        "pr_file": "apps/zbugs/docker/init_upstream/init.sql",
        "discussion_id": "1859062024",
        "commented_code": "@@ -79,6 +81,84 @@ CREATE TABLE \"issueLabel\" (\n     PRIMARY KEY (\"labelID\", \"issueID\")\n );\n \n+CREATE TABLE emoji (\n+    \"id\" VARCHAR PRIMARY KEY,\n+    \"value\" VARCHAR NOT NULL,\n+    \"annotation\" VARCHAR,\n+    -- The PK of the \"subject\" (either issue or comment) that the emoji is attached to\n+    -- We cannot use a FK to enforce referential integrity. Instead we use a trigger to enforce this.\n+    -- We wil also need a custom secondary index on this since the FK won't give it to us.\n+    \"subjectID\" VARCHAR NOT NULL,\n+    \"creatorID\" VARCHAR REFERENCES \"user\"(id) ON DELETE CASCADE,\n+    \"created\" double precision DEFAULT (EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000),\n+\n+    UNIQUE (\"subjectID\", \"creatorID\", \"value\")\n+);\n+CREATE INDEX emoji_created_idx ON emoji (created);\n+CREATE INDEX emoji_subject_id_idx ON emoji (\"subjectID\");\n+\n+CREATE OR REPLACE FUNCTION emoji_check_subject_id()\n+RETURNS TRIGGER AS $$\n+BEGIN\n+    -- Check if subjectID exists in the issue table\n+    IF EXISTS (SELECT 1 FROM issue WHERE id = NEW.\"subjectID\") THEN\n+        NULL; -- Do nothing\n+    ELSIF EXISTS (SELECT 1 FROM comment WHERE id = NEW.\"subjectID\") THEN\n+        NULL; -- Do nothing\n+    ELSE\n+        RAISE EXCEPTION 'id ''%'' does not exist in issue or comment', NEW.\"subjectID\";\n+    END IF;\n+    \n+    RETURN NEW;\n+END;\n+$$ LANGUAGE plpgsql;\n+\n+CREATE TRIGGER emoji_check_subject_id_update_trigger\n+BEFORE UPDATE ON emoji\n+FOR EACH ROW\n+EXECUTE FUNCTION emoji_check_subject_id();\n+\n+CREATE TRIGGER emoji_check_subject_id_insert_trigger\n+BEFORE INSERT ON emoji\n+FOR EACH ROW\n+EXECUTE FUNCTION emoji_check_subject_id();\n+\n+-- Delete emoji when issue is deleted\n+CREATE OR REPLACE FUNCTION delete_emoji_on_issue_delete()\n+RETURNS TRIGGER AS $$\n+BEGIN\n+    DELETE FROM emoji WHERE \"subjectID\" = OLD.id;\n+    RETURN OLD;\n+END;\n+$$ LANGUAGE plpgsql;\n+\n+CREATE TRIGGER delete_emoji_on_issue_delete_trigger\n+AFTER DELETE ON issue\n+FOR EACH ROW\n+EXECUTE FUNCTION delete_emoji_on_issue_delete();\n+\n+-- Delete emoji when comment is deleted\n+CREATE OR REPLACE FUNCTION delete_emoji_on_comment_delete()\n+RETURNS TRIGGER AS $$\n+BEGIN\n+    DELETE FROM emoji WHERE \"subjectID\" = OLD.id;\n+    RETURN OLD;\n+END;\n+$$ LANGUAGE plpgsql;\n+\n+CREATE TRIGGER delete_emoji_on_comment_delete_trigger\n+AFTER DELETE ON comment\n+FOR EACH ROW\n+EXECUTE FUNCTION delete_emoji_on_comment_delete();\n+\n+CREATE TABLE \"userPref\" (\n+    \"key\" VARCHAR NOT NULL,\n+    \"value\" VARCHAR NOT NULL,\n+    \"userID\" VARCHAR REFERENCES \"user\"(id) ON DELETE CASCADE,\n+\n+    PRIMARY KEY (\"key\", \"userID\")",
        "comment_created_at": "2024-11-29T10:12:52+00:00",
        "comment_author": "arv",
        "comment_body": "Fixing this in #3154",
        "pr_file_module": null
      }
    ]
  }
]