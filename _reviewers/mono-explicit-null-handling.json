[
  {
    "discussion_id": "2208545358",
    "pr_number": 4598,
    "pr_file": "packages/shared/src/options.ts",
    "created_at": "2025-07-15T20:03:43+00:00",
    "commented_code": "};\n }\n \n+export type ParseOptions = {\n+  /** Defaults to process.argv.slice(2) */\n+  argv?: string[];",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "2208545358",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4598,
        "pr_file": "packages/shared/src/options.ts",
        "discussion_id": "2208545358",
        "commented_code": "@@ -276,42 +279,58 @@ function getRequiredOrDefault(type: OptionType) {\n   };\n }\n \n+export type ParseOptions = {\n+  /** Defaults to process.argv.slice(2) */\n+  argv?: string[];",
        "comment_created_at": "2025-07-15T20:03:43+00:00",
        "comment_author": "arv",
        "comment_body": "In general we usually do:\r\n\r\n```ts\r\nargv?: string[] | undefined;\r\n```\r\n\r\nto allow explicitly passing undefined.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2201727922",
    "pr_number": 4510,
    "pr_file": "packages/zero-client/src/client/zero.ts",
    "created_at": "2025-07-11T19:55:18+00:00",
    "commented_code": "this.#options.push,\n       this.#options.maxHeaderLength,\n       additionalConnectParams,\n+      this.#aliveClientsManager,",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "2201727922",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4510,
        "pr_file": "packages/zero-client/src/client/zero.ts",
        "discussion_id": "2201727922",
        "commented_code": "@@ -1217,6 +1227,7 @@ export class Zero<\n       this.#options.push,\n       this.#options.maxHeaderLength,\n       additionalConnectParams,\n+      this.#aliveClientsManager,",
        "comment_created_at": "2025-07-11T19:55:18+00:00",
        "comment_author": "grgbkr",
        "comment_body": "maybe we should assert this.#aliveClientsManager is not undefined here...\r\n\r\nit shouldn't be possible for it to be undefined because we `await this.clientGroupID` above.  \r\n\r\nAlternatively we could make this.#aliveClientsManager  a Promise<ActiveClientsManager> and await it here.",
        "pr_file_module": null
      },
      {
        "comment_id": "2201868938",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4510,
        "pr_file": "packages/zero-client/src/client/zero.ts",
        "discussion_id": "2201727922",
        "commented_code": "@@ -1217,6 +1227,7 @@ export class Zero<\n       this.#options.push,\n       this.#options.maxHeaderLength,\n       additionalConnectParams,\n+      this.#aliveClientsManager,",
        "comment_created_at": "2025-07-11T21:09:43+00:00",
        "comment_author": "arv",
        "comment_body": "I tried making the ActiveClientsMananger sync. It lead to a race condition with the \"event\" when closing.\r\n\r\nIn general I try to make construction sync and hide the async details in the implementation but in this case it cleaned things up to make the \"constructor\" async.",
        "pr_file_module": null
      },
      {
        "comment_id": "2201895839",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4510,
        "pr_file": "packages/zero-client/src/client/zero.ts",
        "discussion_id": "2201727922",
        "commented_code": "@@ -1217,6 +1227,7 @@ export class Zero<\n       this.#options.push,\n       this.#options.maxHeaderLength,\n       additionalConnectParams,\n+      this.#aliveClientsManager,",
        "comment_created_at": "2025-07-11T21:19:21+00:00",
        "comment_author": "grgbkr",
        "comment_body": "What I'm hoping to address is that with the current code it appears this.#aliveClientsManager could be undefined here (and thus we wouldn't send the active clients on connect).  \r\n\r\nI think we can change the createSocket arg from \r\n\r\n```\r\n aliveClientsManager:\r\n    | Pick<ActiveClientsManager, 'getActiveClients'>\r\n    | undefined,\r\n```\r\n\r\nto just\r\n```\r\n aliveClientsManager: Pick<ActiveClientsManager, 'getActiveClients'>\r\n ```\r\n \r\n If we made this.#aliveClientsManager a promise that resolved to activeClientsManager when it was constructred, and then here we would just pass\r\n \r\n `await this.#aliveClientsManager`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2004081047",
    "pr_number": 4003,
    "pr_file": "packages/zero-cache/src/types/lite.ts",
    "created_at": "2025-03-19T19:01:59+00:00",
    "commented_code": "export function liteValue(\n   val: PostgresValueType,\n   pgType: string,\n-  jsonAsString?: 'json-as-string',\n+  jsonFormat: JSONFormat,\n ): LiteValueType {\n   if (val instanceof Uint8Array || val === null) {\n     return val;\n   }\n   const valueType = dataTypeToZqlValueType(pgType);\n   if (valueType === 'json') {\n-    if (jsonAsString && typeof val === 'string') {\n+    if (jsonFormat === JSON_STRINGIFIED && typeof val === 'string') {",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "2004081047",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4003,
        "pr_file": "packages/zero-cache/src/types/lite.ts",
        "discussion_id": "2004081047",
        "commented_code": "@@ -76,14 +82,14 @@ export function liteValues(\n export function liteValue(\n   val: PostgresValueType,\n   pgType: string,\n-  jsonAsString?: 'json-as-string',\n+  jsonFormat: JSONFormat,\n ): LiteValueType {\n   if (val instanceof Uint8Array || val === null) {\n     return val;\n   }\n   const valueType = dataTypeToZqlValueType(pgType);\n   if (valueType === 'json') {\n-    if (jsonAsString && typeof val === 'string') {\n+    if (jsonFormat === JSON_STRINGIFIED && typeof val === 'string') {",
        "comment_created_at": "2025-03-19T19:01:59+00:00",
        "comment_author": "tantaman",
        "comment_body": "Should `typeof val === 'string'` always be the case when `jsonFormat === JSON_STRINGIFIED`? In other words, is it an error if typeof val is not a string here?\r\n\r\nIf not, there will be edge cases around JSON.stringified strings.\r\n\r\n![CleanShot 2025-03-19 at 15 01 14](https://github.com/user-attachments/assets/aa53957f-43e4-4288-ab87-278fc71e9145)\r\n\r\nIdeally this check would be:\r\n\r\n```ts\r\nif (jsonFormat === JSON_STRINGIFIED) {\r\n  assert(typeof val === 'string');\r\n  // ...\r\n}\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2004171084",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4003,
        "pr_file": "packages/zero-cache/src/types/lite.ts",
        "discussion_id": "2004081047",
        "commented_code": "@@ -76,14 +82,14 @@ export function liteValues(\n export function liteValue(\n   val: PostgresValueType,\n   pgType: string,\n-  jsonAsString?: 'json-as-string',\n+  jsonFormat: JSONFormat,\n ): LiteValueType {\n   if (val instanceof Uint8Array || val === null) {\n     return val;\n   }\n   const valueType = dataTypeToZqlValueType(pgType);\n   if (valueType === 'json') {\n-    if (jsonAsString && typeof val === 'string') {\n+    if (jsonFormat === JSON_STRINGIFIED && typeof val === 'string') {",
        "comment_created_at": "2025-03-19T19:47:18+00:00",
        "comment_author": "darkgnotic",
        "comment_body": "Currently this is the case, but the conditional is meant to handle future non-\"JSON\" data types that end up being represented as objects or arrays (e.g. array types like `text[]`). These (I believe) will map to the \"json\" ValueType but will arrive from postgres as a `string[]` which we'll then have to manually stringify.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1992322385",
    "pr_number": 3961,
    "pr_file": "packages/replicache/src/persist/persist.ts",
    "created_at": "2025-03-12T21:29:58+00:00",
    "commented_code": "}\n \n   let memdagBaseSnapshotPersisted = false;\n+  const zeroDataForMemdagBaseSnapshot =\n+    getZeroData === undefined\n+      ? undefined\n+      : await getZeroData('rebase', memdagBaseSnapshot.chunk.hash);",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1992322385",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3961,
        "pr_file": "packages/replicache/src/persist/persist.ts",
        "discussion_id": "1992322385",
        "commented_code": "@@ -144,6 +144,11 @@ export async function persistDD31(\n   }\n \n   let memdagBaseSnapshotPersisted = false;\n+  const zeroDataForMemdagBaseSnapshot =\n+    getZeroData === undefined\n+      ? undefined\n+      : await getZeroData('rebase', memdagBaseSnapshot.chunk.hash);",
        "comment_created_at": "2025-03-12T21:29:58+00:00",
        "comment_author": "arv",
        "comment_body": "```suggestion\r\n    getZeroData && await getZeroData('rebase', memdagBaseSnapshot.chunk.hash);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1954966740",
    "pr_number": 3768,
    "pr_file": "packages/zero-cache/src/services/view-syncer/view-syncer.ts",
    "created_at": "2025-02-13T17:51:39+00:00",
    "commented_code": "}\n       const {query: transformedAst, hash: newTransformationHash} =\n         transformAndHashQuery(\n+          lc,\n           ast,\n-          must(this.#permissions).permissions,\n+          // TODO(darick): confirm this change is OK",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1954966740",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3768,
        "pr_file": "packages/zero-cache/src/services/view-syncer/view-syncer.ts",
        "discussion_id": "1954966740",
        "commented_code": "@@ -609,16 +609,13 @@ export class ViewSyncerService implements ViewSyncer, ActivityBasedService {\n       }\n       const {query: transformedAst, hash: newTransformationHash} =\n         transformAndHashQuery(\n+          lc,\n           ast,\n-          must(this.#permissions).permissions,\n+          // TODO(darick): confirm this change is OK",
        "comment_created_at": "2025-02-13T17:51:39+00:00",
        "comment_author": "darkgnotic",
        "comment_body": "`this.#permissions` is a `LoadedPermissions` object, and its state of being null or defined represents whether we've loaded permissions. So we want to `must()` only that, essentially asserting that the calling code has already loaded permissions.\r\n\r\nThe `permissions` field _inside_ of `LoadedPermissions`, otoh, can be `null`, which means that the user has not yet deployed any permissions at all. (i.e. we loaded the permissions, and they were `null`).\r\n\r\nHow you want to deal with that is up to you. You can do something like:\r\n\r\n```ts\r\nmust(this.#permissions).permissions ?? DEFAULT_PERMISSIONS,\r\n```\r\n\r\nOr have the ReadAuthorizer accept `null` (again) as the PermissionsConfig and default it in there.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1877309080",
    "pr_number": 3246,
    "pr_file": "apps/zbugs/src/routes.ts",
    "created_at": "2024-12-10T04:58:50+00:00",
    "commented_code": "return '/';\n   },\n   issue({id, shortID}: {id: string; shortID?: number | null}) {\n-    return shortID ? `/issue/${shortID}` : `/issue/${id}`;\n+    return shortID != null ? `/issue/${shortID}` : `/issue/${id}`;",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1877309080",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3246,
        "pr_file": "apps/zbugs/src/routes.ts",
        "discussion_id": "1877309080",
        "commented_code": "@@ -4,7 +4,7 @@ export const links = {\n     return '/';\n   },\n   issue({id, shortID}: {id: string; shortID?: number | null}) {\n-    return shortID ? `/issue/${shortID}` : `/issue/${id}`;\n+    return shortID != null ? `/issue/${shortID}` : `/issue/${id}`;",
        "comment_created_at": "2024-12-10T04:58:50+00:00",
        "comment_author": "tantaman",
        "comment_body": "the param can be `null` or `undefined` hence the single equal.",
        "pr_file_module": null
      },
      {
        "comment_id": "1877321144",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3246,
        "pr_file": "apps/zbugs/src/routes.ts",
        "discussion_id": "1877309080",
        "commented_code": "@@ -4,7 +4,7 @@ export const links = {\n     return '/';\n   },\n   issue({id, shortID}: {id: string; shortID?: number | null}) {\n-    return shortID ? `/issue/${shortID}` : `/issue/${id}`;\n+    return shortID != null ? `/issue/${shortID}` : `/issue/${id}`;",
        "comment_created_at": "2024-12-10T05:12:54+00:00",
        "comment_author": "grgbkr",
        "comment_body": "in issue-page.tsx we have\r\n\r\n```\r\n  useEffect(() => {\r\n    if (issue?.shortID !== undefined && idField !== 'shortID') {\r\n      navigate(links.issue(issue), {\r\n        replace: true,\r\n        state: zbugsHistoryState,\r\n      });\r\n    }\r\n  }, [issue, idField, zbugsHistoryState]);\r\n```\r\n\r\nShould that also be `issue?.shortID != null` ",
        "pr_file_module": null
      }
    ]
  }
]