[
  {
    "discussion_id": "2304997498",
    "pr_number": 4747,
    "pr_file": "packages/zero-react/src/use-query.tsx",
    "created_at": "2025-08-27T18:36:59+00:00",
    "commented_code": ");\n }\n \n+export function useSuspenseQuery<\n+  TSchema extends Schema,\n+  TTable extends keyof TSchema['tables'] & string,\n+  TReturn,\n+>(\n+  query: Query<TSchema, TTable, TReturn>,\n+  options?: UseSuspenseQueryOptions | boolean,\n+): QueryResult<TReturn> {\n+  let enabled = true;\n+  let ttl: TTL = DEFAULT_TTL_MS;\n+  let suspendUntil: 'complete' | 'non-empty' = 'complete';\n+  if (typeof options === 'boolean') {\n+    enabled = options;\n+  } else if (options) {\n+    ({\n+      enabled = true,\n+      ttl = DEFAULT_TTL_MS,\n+      suspendUntil = 'complete',\n+    } = options);\n+  }\n+\n+  const view = viewStore.getView(\n+    useZero(),\n+    query as AbstractQuery<TSchema, TTable, TReturn>,\n+    enabled,\n+    ttl,\n+  );\n+  // https://react.dev/reference/react/useSyncExternalStore\n+  const snapshot = useSyncExternalStore(\n+    view.subscribeReactInternals,\n+    view.getSnapshot,\n+    view.getSnapshot,\n+  );\n+\n+  // React 19 exposes use(), otherwise we throw the promise to suspend\n+  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n+  const useHook = (React as unknown as {use?: (p: Promise<void>) => void}).use;",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "2304997498",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4747,
        "pr_file": "packages/zero-react/src/use-query.tsx",
        "discussion_id": "2304997498",
        "commented_code": "@@ -64,6 +73,70 @@ export function useQuery<\n   );\n }\n \n+export function useSuspenseQuery<\n+  TSchema extends Schema,\n+  TTable extends keyof TSchema['tables'] & string,\n+  TReturn,\n+>(\n+  query: Query<TSchema, TTable, TReturn>,\n+  options?: UseSuspenseQueryOptions | boolean,\n+): QueryResult<TReturn> {\n+  let enabled = true;\n+  let ttl: TTL = DEFAULT_TTL_MS;\n+  let suspendUntil: 'complete' | 'non-empty' = 'complete';\n+  if (typeof options === 'boolean') {\n+    enabled = options;\n+  } else if (options) {\n+    ({\n+      enabled = true,\n+      ttl = DEFAULT_TTL_MS,\n+      suspendUntil = 'complete',\n+    } = options);\n+  }\n+\n+  const view = viewStore.getView(\n+    useZero(),\n+    query as AbstractQuery<TSchema, TTable, TReturn>,\n+    enabled,\n+    ttl,\n+  );\n+  // https://react.dev/reference/react/useSyncExternalStore\n+  const snapshot = useSyncExternalStore(\n+    view.subscribeReactInternals,\n+    view.getSnapshot,\n+    view.getSnapshot,\n+  );\n+\n+  // React 19 exposes use(), otherwise we throw the promise to suspend\n+  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n+  const useHook = (React as unknown as {use?: (p: Promise<void>) => void}).use;",
        "comment_created_at": "2025-08-27T18:36:59+00:00",
        "comment_author": "grgbkr",
        "comment_body": "Note React.use is technically not a hook, as it can be safely used in conditionals and loops.\r\n\r\n```suggestion\r\n// reactUse and suspect can be hoisted to the top of this module\r\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\r\nconst reactUse = (React as unknown as {use?: (p: Promise<unknown>) => void})\r\n  .use;\r\nconst suspend: (p: Promise<unknown>) => void = reactUse\r\n  ? reactUse\r\n  : p => {\r\n      throw p;\r\n    };\r\n\r\nif (suspendUntil === 'complete' && !view.complete) {\r\n  suspend(view.waitForComplete());\r\n} \r\nif (suspendUntil === 'non-empty' && !view.nonEmpty) {\r\n  suspend(view.waitForNonEmpty());\r\n} \r\n\r\n```\r\n\r\nI think it's best we avoid duplicating the complete and non-empty checks here.   To much room for an inconsistency bug.  For instance I think the 'non-empty'  check below should be \r\n\r\n```\r\nsuspendUntil === 'non-empty' &&\r\n    // this complete check was missing\r\n    snapshot[1].type !== 'complete' &&\r\n    (query.format.singular\r\n      ? snapshot[0] === undefined\r\n      : (snapshot[0] as unknown[]).length === 0\r\n```\r\n\r\nIt's tempting to simplify even more and just do\r\n\r\n```\r\nif (suspendUntil === 'complete') {\r\n  suspend(view.waitForComplete());\r\n} \r\nif (suspendUntil === 'non-empty') {\r\n  suspend(view.waitForNonEmpty());\r\n} \r\n```\r\n\r\nBut for React 18 I think its best to avoid `throwing` when we can, since Exception dispatch is a slow/heavy operation.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2158325913",
    "pr_number": 4527,
    "pr_file": "packages/zero-react/src/zero-provider.tsx",
    "created_at": "2025-06-20T08:20:05+00:00",
    "commented_code": "+import {\n+  createContext,\n+  useContext,\n+  useEffect,\n+  useState,\n+  type ReactNode,\n+} from 'react';\n+import {Zero} from '../../zero-client/src/client/zero.ts';\n+import type {Schema} from '../../zero-schema/src/builder/schema-builder.ts';\n+import type {CustomMutatorDefs} from '../../zero-client/src/client/custom.ts';\n+import type {ZeroOptions} from '../../zero-client/src/client/options.ts';\n+\n+// eslint-disable-next-line @typescript-eslint/naming-convention\n+const ZeroContext = createContext<unknown | undefined>(undefined);\n+\n+export function useZero<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>(): Zero<S, MD> {\n+  const zero = useContext(ZeroContext);\n+  if (zero === undefined) {\n+    throw new Error('useZero must be used within a ZeroProvider');\n+  }\n+  return zero as Zero<S, MD>;\n+}\n+\n+export function createUseZero<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>() {\n+  return () => useZero<S, MD>();\n+}\n+\n+export type ZeroProviderProps<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+> = (ZeroOptions<S, MD> | {zero: Zero<S, MD>}) & {\n+  init?: (zero: Zero<S, MD>) => void;\n+  children: ReactNode;\n+};\n+\n+export function ZeroProvider<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>({children, init, ...props}: ZeroProviderProps<S, MD>) {\n+  const [zero, setZero] = useState<Zero<S, MD> | undefined>(\n+    'zero' in props ? props.zero : undefined,\n+  );\n+\n+  // If Zero is not passed in, we construct it, but only client-side.\n+  // Zero doesn't really work SSR today so this is usually the right thing.\n+  // When we support Zero SSR this will either become a breaking change or\n+  // more likely server support will be opt-in with a new prop on this\n+  // component.\n+  useEffect(() => {\n+    if ('zero' in props) {\n+      setZero(props.zero);\n+      return;\n+    }\n+\n+    const z = new Zero(props);\n+    if (init) {\n+      init(z);\n+    }",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "2158325913",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4527,
        "pr_file": "packages/zero-react/src/zero-provider.tsx",
        "discussion_id": "2158325913",
        "commented_code": "@@ -0,0 +1,77 @@\n+import {\n+  createContext,\n+  useContext,\n+  useEffect,\n+  useState,\n+  type ReactNode,\n+} from 'react';\n+import {Zero} from '../../zero-client/src/client/zero.ts';\n+import type {Schema} from '../../zero-schema/src/builder/schema-builder.ts';\n+import type {CustomMutatorDefs} from '../../zero-client/src/client/custom.ts';\n+import type {ZeroOptions} from '../../zero-client/src/client/options.ts';\n+\n+// eslint-disable-next-line @typescript-eslint/naming-convention\n+const ZeroContext = createContext<unknown | undefined>(undefined);\n+\n+export function useZero<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>(): Zero<S, MD> {\n+  const zero = useContext(ZeroContext);\n+  if (zero === undefined) {\n+    throw new Error('useZero must be used within a ZeroProvider');\n+  }\n+  return zero as Zero<S, MD>;\n+}\n+\n+export function createUseZero<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>() {\n+  return () => useZero<S, MD>();\n+}\n+\n+export type ZeroProviderProps<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+> = (ZeroOptions<S, MD> | {zero: Zero<S, MD>}) & {\n+  init?: (zero: Zero<S, MD>) => void;\n+  children: ReactNode;\n+};\n+\n+export function ZeroProvider<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>({children, init, ...props}: ZeroProviderProps<S, MD>) {\n+  const [zero, setZero] = useState<Zero<S, MD> | undefined>(\n+    'zero' in props ? props.zero : undefined,\n+  );\n+\n+  // If Zero is not passed in, we construct it, but only client-side.\n+  // Zero doesn't really work SSR today so this is usually the right thing.\n+  // When we support Zero SSR this will either become a breaking change or\n+  // more likely server support will be opt-in with a new prop on this\n+  // component.\n+  useEffect(() => {\n+    if ('zero' in props) {\n+      setZero(props.zero);\n+      return;\n+    }\n+\n+    const z = new Zero(props);\n+    if (init) {\n+      init(z);\n+    }",
        "comment_created_at": "2025-06-20T08:20:05+00:00",
        "comment_author": "arv",
        "comment_body": "```suggestion\r\n    init?.(z);\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2158425834",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4527,
        "pr_file": "packages/zero-react/src/zero-provider.tsx",
        "discussion_id": "2158325913",
        "commented_code": "@@ -0,0 +1,77 @@\n+import {\n+  createContext,\n+  useContext,\n+  useEffect,\n+  useState,\n+  type ReactNode,\n+} from 'react';\n+import {Zero} from '../../zero-client/src/client/zero.ts';\n+import type {Schema} from '../../zero-schema/src/builder/schema-builder.ts';\n+import type {CustomMutatorDefs} from '../../zero-client/src/client/custom.ts';\n+import type {ZeroOptions} from '../../zero-client/src/client/options.ts';\n+\n+// eslint-disable-next-line @typescript-eslint/naming-convention\n+const ZeroContext = createContext<unknown | undefined>(undefined);\n+\n+export function useZero<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>(): Zero<S, MD> {\n+  const zero = useContext(ZeroContext);\n+  if (zero === undefined) {\n+    throw new Error('useZero must be used within a ZeroProvider');\n+  }\n+  return zero as Zero<S, MD>;\n+}\n+\n+export function createUseZero<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>() {\n+  return () => useZero<S, MD>();\n+}\n+\n+export type ZeroProviderProps<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+> = (ZeroOptions<S, MD> | {zero: Zero<S, MD>}) & {\n+  init?: (zero: Zero<S, MD>) => void;\n+  children: ReactNode;\n+};\n+\n+export function ZeroProvider<\n+  S extends Schema,\n+  MD extends CustomMutatorDefs<S> | undefined = undefined,\n+>({children, init, ...props}: ZeroProviderProps<S, MD>) {\n+  const [zero, setZero] = useState<Zero<S, MD> | undefined>(\n+    'zero' in props ? props.zero : undefined,\n+  );\n+\n+  // If Zero is not passed in, we construct it, but only client-side.\n+  // Zero doesn't really work SSR today so this is usually the right thing.\n+  // When we support Zero SSR this will either become a breaking change or\n+  // more likely server support will be opt-in with a new prop on this\n+  // component.\n+  useEffect(() => {\n+    if ('zero' in props) {\n+      setZero(props.zero);\n+      return;\n+    }\n+\n+    const z = new Zero(props);\n+    if (init) {\n+      init(z);\n+    }",
        "comment_created_at": "2025-06-20T09:06:50+00:00",
        "comment_author": "aboodman",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1884577368",
    "pr_number": 3311,
    "pr_file": "apps/zbugs/src/pages/issue/issue-page.tsx",
    "created_at": "2024-12-13T21:47:14+00:00",
    "commented_code": "</div>\n \n           <h2 className=\"issue-detail-label\">Comments</h2>\n+          {!displayAllComments && hasOlderComments ? (\n+            <div onClick={() => setDisplayAllComments(true)}>Older</div>",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1884577368",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3311,
        "pr_file": "apps/zbugs/src/pages/issue/issue-page.tsx",
        "discussion_id": "1884577368",
        "commented_code": "@@ -488,6 +535,11 @@ export function IssuePage() {\n           </div>\n \n           <h2 className=\"issue-detail-label\">Comments</h2>\n+          {!displayAllComments && hasOlderComments ? (\n+            <div onClick={() => setDisplayAllComments(true)}>Older</div>",
        "comment_created_at": "2024-12-13T21:47:14+00:00",
        "comment_author": "arv",
        "comment_body": "Use `<Button onAction>`",
        "pr_file_module": null
      }
    ]
  }
]