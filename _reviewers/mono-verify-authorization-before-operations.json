[
  {
    "discussion_id": "1870883734",
    "pr_number": 3171,
    "pr_file": "apps/zbugs/schema.ts",
    "created_at": "2024-12-05T08:22:15+00:00",
    "commented_code": "),\n           ],\n           update: {\n-            // TODO: add a check to prevent changing the creatorID\n-            preMutation: [loggedInUserIsIssueCreator, loggedInUserIsAdmin],\n+            preMutation: [",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1870883734",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3171,
        "pr_file": "apps/zbugs/schema.ts",
        "discussion_id": "1870883734",
        "commented_code": "@@ -251,8 +265,16 @@ export const permissions: ReturnType<typeof definePermissions> =\n               ),\n           ],\n           update: {\n-            // TODO: add a check to prevent changing the creatorID\n-            preMutation: [loggedInUserIsIssueCreator, loggedInUserIsAdmin],\n+            preMutation: [",
        "comment_created_at": "2024-12-05T08:22:15+00:00",
        "comment_author": "aboodman",
        "comment_body": "A few thoughts here:\r\n\r\n0. Thanks for proposing this. It's really useful to see these ideas in use.\r\n\r\n1. Is it really even true that a creator shouldn't be allowed to make someone else the creator? It's a bit of a weird thing to do but maybe not _wrong_.\r\n\r\n2. To me this is more evidence for custom mutators. This kind of thing would be so easy to enforce in custom mutators by just limiting what kinds of changes are processed.\r\n\r\nGiven 2 and the fact we've already decided to do custom mutators soon I think we shouldn't spend more effort on write permissions.\r\n\r\nAlso I think let's remove the post-checks from zbugs that ensure owners/creators don't change as I think they probably obscure more than they help.",
        "pr_file_module": null
      },
      {
        "comment_id": "1872797634",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3171,
        "pr_file": "apps/zbugs/schema.ts",
        "discussion_id": "1870883734",
        "commented_code": "@@ -251,8 +265,16 @@ export const permissions: ReturnType<typeof definePermissions> =\n               ),\n           ],\n           update: {\n-            // TODO: add a check to prevent changing the creatorID\n-            preMutation: [loggedInUserIsIssueCreator, loggedInUserIsAdmin],\n+            preMutation: [",
        "comment_created_at": "2024-12-06T08:20:22+00:00",
        "comment_author": "aboodman",
        "comment_body": "Hm, writing the doc for permissions I find myself wanting this. If we had it, would we still need `preMutation` and `postMutation`, or would of the two handle it since we have both rows?",
        "pr_file_module": null
      },
      {
        "comment_id": "1873351680",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3171,
        "pr_file": "apps/zbugs/schema.ts",
        "discussion_id": "1870883734",
        "commented_code": "@@ -251,8 +265,16 @@ export const permissions: ReturnType<typeof definePermissions> =\n               ),\n           ],\n           update: {\n-            // TODO: add a check to prevent changing the creatorID\n-            preMutation: [loggedInUserIsIssueCreator, loggedInUserIsAdmin],\n+            preMutation: [",
        "comment_created_at": "2024-12-06T13:37:41+00:00",
        "comment_author": "tantaman",
        "comment_body": "> Is it really even true that a creator shouldn't be allowed to make someone else the creator? It's a bit of a weird thing to do but maybe not wrong.\r\n\r\nTo me, making someone else a creator is attributing actions to them. Said another way, it is impersonating a user. That strikes me as the worst kind of abuse. If there was an immutable audit history of an issue then it'd be less of a concern.",
        "pr_file_module": null
      },
      {
        "comment_id": "1873410023",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3171,
        "pr_file": "apps/zbugs/schema.ts",
        "discussion_id": "1870883734",
        "commented_code": "@@ -251,8 +265,16 @@ export const permissions: ReturnType<typeof definePermissions> =\n               ),\n           ],\n           update: {\n-            // TODO: add a check to prevent changing the creatorID\n-            preMutation: [loggedInUserIsIssueCreator, loggedInUserIsAdmin],\n+            preMutation: [",
        "comment_created_at": "2024-12-06T14:17:15+00:00",
        "comment_author": "tantaman",
        "comment_body": ">  would we still need preMutation and postMutation, or would of the two handle it since we have both rows?\r\n\r\nI think we can drop `postMutation` and snap to Postgres behavior. I'm not sure why we decided that `preMutation` and `postMutation` should be\r\n\r\na. before _any_ mutations are applied\r\nb. after _the entire transaction_ is applied\r\n\r\nIt makes more sense to me to not have `pre/post` mutation and apply the write rules as values are written within the transaction.\r\n\r\nThis would also match PG behavior.\r\n\r\n```\r\nCREATE POLICY deny_if_bar_exists ON foo\r\nFOR INSERT WITH CHECK (NOT EXISTS (SELECT 1 FROM bar));\r\n\r\ntestuser@127.0.0.1:test> insert into foo values (2);\r\nINSERT 0 1\r\nTime: 0.004s\r\ntestuser@127.0.0.1:test> insert into bar values (2);\r\nINSERT 0 1\r\nTime: 0.004s\r\ntestuser@127.0.0.1:test> insert into foo values (3);\r\nnew row violates row-level security policy for table \"foo\"\r\n\r\nCREATE POLICY deny_if_foo_exists ON foo\r\nFOR INSERT WITH CHECK (NOT EXISTS (SELECT 1 FROM foo));\r\n\r\ntestuser@127.0.0.1:test> begin;\r\nBEGIN\r\nTime: 0.002s\r\ntestuser@127.0.0.1:test> insert into foo values (1);\r\nINSERT 0 1\r\nTime: 0.004s\r\ntestuser@127.0.0.1:test> insert into foo values (2);\r\nnew row violates row-level security policy for table \"foo\"\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1873419299",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3171,
        "pr_file": "apps/zbugs/schema.ts",
        "discussion_id": "1870883734",
        "commented_code": "@@ -251,8 +265,16 @@ export const permissions: ReturnType<typeof definePermissions> =\n               ),\n           ],\n           update: {\n-            // TODO: add a check to prevent changing the creatorID\n-            preMutation: [loggedInUserIsIssueCreator, loggedInUserIsAdmin],\n+            preMutation: [",
        "comment_created_at": "2024-12-06T14:22:21+00:00",
        "comment_author": "tantaman",
        "comment_body": "> I'm not sure why we decided...\r\n\r\n- chatgpt gave me incorrect answers on how PG works :(\r\n- the last similar thing I worked on wrt permissions (Ent) didn't have interactive transaction support\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1996285357",
    "pr_number": 3968,
    "pr_file": "apps/zbugs/shared/mutators.ts",
    "created_at": "2025-03-14T21:05:43+00:00",
    "commented_code": "+import {schema} from './schema.ts';\n+import {must} from '../../../packages/shared/src/must.ts';\n+import {assert} from '../../../packages/shared/src/asserts.ts';\n+import type {UpdateValue, Transaction, CustomMutatorDefs} from '@rocicorp/zero';\n+import {\n+  assertIsCreatorOrAdmin as assertIsAdminOrCreator,\n+  assertUserCanSeeComment,\n+  assertUserCanSeeIssue,\n+  isAdmin,\n+  verifyToken,\n+} from './validators.ts';\n+\n+type AddEmojiArgs = {\n+  id: string;\n+  unicode: string;\n+  annotation: string;\n+  subjectID: string;\n+  creatorID: string;\n+  created: number;\n+};\n+\n+export const mutators = {\n+  issue: {\n+    async create(\n+      tx,\n+      {\n+        id,\n+        title,\n+        description,\n+        created,\n+        modified,\n+      }: {\n+        id: string;\n+        title: string;\n+        description?: string;\n+        created: number;\n+        modified: number;\n+      },\n+    ) {\n+      if (tx.location === 'server') {\n+        created = modified = Date.now();\n+      }\n+      const creatorID = must((await verifyToken(tx)).sub);\n+\n+      await tx.mutate.issue.insert({\n+        id,\n+        title,\n+        description: description ?? '',\n+        created,\n+        creatorID,\n+        modified,\n+        open: true,\n+        visibility: 'public',\n+      });\n+    },\n+\n+    async update(tx, change: UpdateValue<typeof schema.tables.issue>) {\n+      await assertIsAdminOrCreator(tx, tx.query.issue, change.id);",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1996285357",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3968,
        "pr_file": "apps/zbugs/shared/mutators.ts",
        "discussion_id": "1996285357",
        "commented_code": "@@ -0,0 +1,218 @@\n+import {schema} from './schema.ts';\n+import {must} from '../../../packages/shared/src/must.ts';\n+import {assert} from '../../../packages/shared/src/asserts.ts';\n+import type {UpdateValue, Transaction, CustomMutatorDefs} from '@rocicorp/zero';\n+import {\n+  assertIsCreatorOrAdmin as assertIsAdminOrCreator,\n+  assertUserCanSeeComment,\n+  assertUserCanSeeIssue,\n+  isAdmin,\n+  verifyToken,\n+} from './validators.ts';\n+\n+type AddEmojiArgs = {\n+  id: string;\n+  unicode: string;\n+  annotation: string;\n+  subjectID: string;\n+  creatorID: string;\n+  created: number;\n+};\n+\n+export const mutators = {\n+  issue: {\n+    async create(\n+      tx,\n+      {\n+        id,\n+        title,\n+        description,\n+        created,\n+        modified,\n+      }: {\n+        id: string;\n+        title: string;\n+        description?: string;\n+        created: number;\n+        modified: number;\n+      },\n+    ) {\n+      if (tx.location === 'server') {\n+        created = modified = Date.now();\n+      }\n+      const creatorID = must((await verifyToken(tx)).sub);\n+\n+      await tx.mutate.issue.insert({\n+        id,\n+        title,\n+        description: description ?? '',\n+        created,\n+        creatorID,\n+        modified,\n+        open: true,\n+        visibility: 'public',\n+      });\n+    },\n+\n+    async update(tx, change: UpdateValue<typeof schema.tables.issue>) {\n+      await assertIsAdminOrCreator(tx, tx.query.issue, change.id);",
        "comment_created_at": "2025-03-14T21:05:43+00:00",
        "comment_author": "aboodman",
        "comment_body": "how does the app get a new auth token.",
        "pr_file_module": null
      },
      {
        "comment_id": "2003582736",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3968,
        "pr_file": "apps/zbugs/shared/mutators.ts",
        "discussion_id": "1996285357",
        "commented_code": "@@ -0,0 +1,218 @@\n+import {schema} from './schema.ts';\n+import {must} from '../../../packages/shared/src/must.ts';\n+import {assert} from '../../../packages/shared/src/asserts.ts';\n+import type {UpdateValue, Transaction, CustomMutatorDefs} from '@rocicorp/zero';\n+import {\n+  assertIsCreatorOrAdmin as assertIsAdminOrCreator,\n+  assertUserCanSeeComment,\n+  assertUserCanSeeIssue,\n+  isAdmin,\n+  verifyToken,\n+} from './validators.ts';\n+\n+type AddEmojiArgs = {\n+  id: string;\n+  unicode: string;\n+  annotation: string;\n+  subjectID: string;\n+  creatorID: string;\n+  created: number;\n+};\n+\n+export const mutators = {\n+  issue: {\n+    async create(\n+      tx,\n+      {\n+        id,\n+        title,\n+        description,\n+        created,\n+        modified,\n+      }: {\n+        id: string;\n+        title: string;\n+        description?: string;\n+        created: number;\n+        modified: number;\n+      },\n+    ) {\n+      if (tx.location === 'server') {\n+        created = modified = Date.now();\n+      }\n+      const creatorID = must((await verifyToken(tx)).sub);\n+\n+      await tx.mutate.issue.insert({\n+        id,\n+        title,\n+        description: description ?? '',\n+        created,\n+        creatorID,\n+        modified,\n+        open: true,\n+        visibility: 'public',\n+      });\n+    },\n+\n+    async update(tx, change: UpdateValue<typeof schema.tables.issue>) {\n+      await assertIsAdminOrCreator(tx, tx.query.issue, change.id);",
        "comment_created_at": "2025-03-19T15:08:32+00:00",
        "comment_author": "tantaman",
        "comment_body": "today `mutagen` throws an auth error that the zero-client handles, allowing the developer to refresh the auth token.\r\n\r\nWe'll need to add an error type for the custom mutator protocol to indicate auth problems.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1869105132",
    "pr_number": 3184,
    "pr_file": "apps/zbugs/schema.ts",
    "created_at": "2024-12-04T09:58:05+00:00",
    "commented_code": "],\n         },\n       },\n+      emoji: {\n+        row: {\n+          insert: [loggedInUserIsCreator],",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1869105132",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3184,
        "pr_file": "apps/zbugs/schema.ts",
        "discussion_id": "1869105132",
        "commented_code": "@@ -323,5 +354,27 @@ export const permissions: ReturnType<typeof definePermissions> =\n           ],\n         },\n       },\n+      emoji: {\n+        row: {\n+          insert: [loggedInUserIsCreator],",
        "comment_created_at": "2024-12-04T09:58:05+00:00",
        "comment_author": "arv",
        "comment_body": "It isn't clear to me if I need to also check `canSeeEmoji` here? I think this applies to all the insert rules in this file.",
        "pr_file_module": null
      },
      {
        "comment_id": "1869282767",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3184,
        "pr_file": "apps/zbugs/schema.ts",
        "discussion_id": "1869105132",
        "commented_code": "@@ -323,5 +354,27 @@ export const permissions: ReturnType<typeof definePermissions> =\n           ],\n         },\n       },\n+      emoji: {\n+        row: {\n+          insert: [loggedInUserIsCreator],",
        "comment_created_at": "2024-12-04T11:25:10+00:00",
        "comment_author": "tantaman",
        "comment_body": "Good catch. Yeah, we would not want someone to put emojis on issues/comments they cannot see.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1869034947",
    "pr_number": 3173,
    "pr_file": "apps/zbugs/schema.ts",
    "created_at": "2024-12-04T09:16:34+00:00",
    "commented_code": "preMutation: [loggedInUserIsCommentCreator, loggedInUserIsAdmin],\n           },\n           delete: [loggedInUserIsCommentCreator, loggedInUserIsAdmin],\n+          // comments are only visible if the user can see the issue they're on\n+          select: [\n+            (authData, {exists}) =>\n+              exists('issue', q => q.where(eb => canSeeIssue(authData, eb))),",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1869034947",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3173,
        "pr_file": "apps/zbugs/schema.ts",
        "discussion_id": "1869034947",
        "commented_code": "@@ -270,6 +283,11 @@ export const permissions: ReturnType<typeof definePermissions> =\n             preMutation: [loggedInUserIsCommentCreator, loggedInUserIsAdmin],\n           },\n           delete: [loggedInUserIsCommentCreator, loggedInUserIsAdmin],\n+          // comments are only visible if the user can see the issue they're on\n+          select: [\n+            (authData, {exists}) =>\n+              exists('issue', q => q.where(eb => canSeeIssue(authData, eb))),",
        "comment_created_at": "2024-12-04T09:16:34+00:00",
        "comment_author": "arv",
        "comment_body": "How does this work with insert/update/delete? Right now, the creator can insert/update/delete a comment/issue on an issue they cannot select (maybe they visibility state changed).",
        "pr_file_module": null
      }
    ]
  }
]