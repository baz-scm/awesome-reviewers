[
  {
    "discussion_id": "2029248167",
    "pr_number": 4173,
    "pr_file": "packages/zero-cache/src/types/ws.ts",
    "created_at": "2025-04-04T18:12:45+00:00",
    "commented_code": "// https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close#reason\n   ws.close(code, elide(errMsg, 123));\n }\n+\n+export function sendPingsForLiveness(\n+  lc: LogContext,\n+  ws: WebSocket,\n+  intervalMs: number,\n+) {\n+  let alive = true;\n+  ws.on('pong', () => (alive = true));\n+\n+  let heartbeatTimer: NodeJS.Timeout | undefined;\n+  function startHeartBeats() {\n+    heartbeatTimer = setInterval(() => {\n+      if (!alive) {\n+        lc.warn?.(\n+          `socket@${ws.url} did not respond to heartbeat. Terminating...`,\n+        );\n+        ws.terminate();\n+        return;\n+      }\n+\n+      alive = false;\n+      ws.ping();\n+    }, intervalMs);\n+  }\n+\n+  if (ws.readyState === ws.CONNECTING) {\n+    ws.on('open', () => startHeartBeats());",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "2029248167",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4173,
        "pr_file": "packages/zero-cache/src/types/ws.ts",
        "discussion_id": "2029248167",
        "commented_code": "@@ -22,3 +22,59 @@ export function closeWithError(\n   // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close#reason\n   ws.close(code, elide(errMsg, 123));\n }\n+\n+export function sendPingsForLiveness(\n+  lc: LogContext,\n+  ws: WebSocket,\n+  intervalMs: number,\n+) {\n+  let alive = true;\n+  ws.on('pong', () => (alive = true));\n+\n+  let heartbeatTimer: NodeJS.Timeout | undefined;\n+  function startHeartBeats() {\n+    heartbeatTimer = setInterval(() => {\n+      if (!alive) {\n+        lc.warn?.(\n+          `socket@${ws.url} did not respond to heartbeat. Terminating...`,\n+        );\n+        ws.terminate();\n+        return;\n+      }\n+\n+      alive = false;\n+      ws.ping();\n+    }, intervalMs);\n+  }\n+\n+  if (ws.readyState === ws.CONNECTING) {\n+    ws.on('open', () => startHeartBeats());",
        "comment_created_at": "2025-04-04T18:12:45+00:00",
        "comment_author": "tjenkinson",
        "comment_body": "```suggestion\n    ws.once('open', () => startHeartBeats());\n```\nBit safer?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2029249209",
    "pr_number": 4173,
    "pr_file": "packages/zero-cache/src/types/ws.ts",
    "created_at": "2025-04-04T18:13:46+00:00",
    "commented_code": "// https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close#reason\n   ws.close(code, elide(errMsg, 123));\n }\n+\n+export function sendPingsForLiveness(\n+  lc: LogContext,\n+  ws: WebSocket,\n+  intervalMs: number,\n+) {\n+  let alive = true;\n+  ws.on('pong', () => (alive = true));\n+\n+  let heartbeatTimer: NodeJS.Timeout | undefined;\n+  function startHeartBeats() {\n+    heartbeatTimer = setInterval(() => {\n+      if (!alive) {\n+        lc.warn?.(\n+          `socket@${ws.url} did not respond to heartbeat. Terminating...`,\n+        );\n+        ws.terminate();\n+        return;\n+      }\n+\n+      alive = false;\n+      ws.ping();\n+    }, intervalMs);\n+  }\n+\n+  if (ws.readyState === ws.CONNECTING) {\n+    ws.on('open', () => startHeartBeats());\n+  } else if (ws.readyState === ws.OPEN) {\n+    startHeartBeats();\n+  }\n+\n+  ws.once('close', () => clearInterval(heartbeatTimer));\n+}\n+\n+export function expectPingsForLiveness(\n+  lc: LogContext,\n+  ws: WebSocket,\n+  intervalMs: number,\n+  timeoutBufferMs = 3_000,\n+) {\n+  let missedPingTimer: NodeJS.Timeout | undefined;\n+\n+  function expectNextPing() {\n+    clearTimeout(missedPingTimer);\n+\n+    missedPingTimer = setTimeout(() => {\n+      lc.warn?.(`socket@${ws.url} did not send heartbeat. Terminating...`);\n+      ws.terminate();\n+    }, intervalMs + timeoutBufferMs);\n+  }\n+\n+  ws.on('ping', expectNextPing);\n+  ws.on('close', () => clearTimeout(missedPingTimer));",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "2029249209",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 4173,
        "pr_file": "packages/zero-cache/src/types/ws.ts",
        "discussion_id": "2029249209",
        "commented_code": "@@ -22,3 +22,59 @@ export function closeWithError(\n   // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close#reason\n   ws.close(code, elide(errMsg, 123));\n }\n+\n+export function sendPingsForLiveness(\n+  lc: LogContext,\n+  ws: WebSocket,\n+  intervalMs: number,\n+) {\n+  let alive = true;\n+  ws.on('pong', () => (alive = true));\n+\n+  let heartbeatTimer: NodeJS.Timeout | undefined;\n+  function startHeartBeats() {\n+    heartbeatTimer = setInterval(() => {\n+      if (!alive) {\n+        lc.warn?.(\n+          `socket@${ws.url} did not respond to heartbeat. Terminating...`,\n+        );\n+        ws.terminate();\n+        return;\n+      }\n+\n+      alive = false;\n+      ws.ping();\n+    }, intervalMs);\n+  }\n+\n+  if (ws.readyState === ws.CONNECTING) {\n+    ws.on('open', () => startHeartBeats());\n+  } else if (ws.readyState === ws.OPEN) {\n+    startHeartBeats();\n+  }\n+\n+  ws.once('close', () => clearInterval(heartbeatTimer));\n+}\n+\n+export function expectPingsForLiveness(\n+  lc: LogContext,\n+  ws: WebSocket,\n+  intervalMs: number,\n+  timeoutBufferMs = 3_000,\n+) {\n+  let missedPingTimer: NodeJS.Timeout | undefined;\n+\n+  function expectNextPing() {\n+    clearTimeout(missedPingTimer);\n+\n+    missedPingTimer = setTimeout(() => {\n+      lc.warn?.(`socket@${ws.url} did not send heartbeat. Terminating...`);\n+      ws.terminate();\n+    }, intervalMs + timeoutBufferMs);\n+  }\n+\n+  ws.on('ping', expectNextPing);\n+  ws.on('close', () => clearTimeout(missedPingTimer));",
        "comment_created_at": "2025-04-04T18:13:46+00:00",
        "comment_author": "tjenkinson",
        "comment_body": "```suggestion\n  ws.once('close', () => clearTimeout(missedPingTimer));\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1955936986",
    "pr_number": 3813,
    "pr_file": "packages/zero-cache/src/services/view-syncer/view-syncer.pg-test.ts",
    "created_at": "2025-02-14T10:43:45+00:00",
    "commented_code": "\"schema\": \"\",\n           \"table\": \"issues\",\n         },\n+        {\n+          \"clientGroupID\": \"9876\",\n+          \"patchVersion\": \"01\",\n+          \"refCounts\": {\n+            \"query-hash2\": 1,\n+          },\n+          \"rowKey\": {\n+            \"id\": \"100\",\n+          },\n+          \"rowVersion\": \"01\",\n+          \"schema\": \"\",\n+          \"table\": \"users\",\n+        },\n+        {\n+          \"clientGroupID\": \"9876\",\n+          \"patchVersion\": \"01\",\n+          \"refCounts\": {\n+            \"query-hash2\": 1,\n+          },\n+          \"rowKey\": {\n+            \"id\": \"101\",\n+          },\n+          \"rowVersion\": \"01\",\n+          \"schema\": \"\",\n+          \"table\": \"users\",\n+        },\n+        {\n+          \"clientGroupID\": \"9876\",\n+          \"patchVersion\": \"01\",\n+          \"refCounts\": {\n+            \"query-hash2\": 1,\n+          },\n+          \"rowKey\": {\n+            \"id\": \"102\",\n+          },\n+          \"rowVersion\": \"01\",\n+          \"schema\": \"\",\n+          \"table\": \"users\",\n+        },\n+      ]\n+    `,\n+    );\n+\n+    expect(client1.drain()).toMatchInlineSnapshot(`[]`);\n+\n+    // TODO: How do I get ViewSyncer to \"close\" client2?",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1955936986",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3813,
        "pr_file": "packages/zero-cache/src/services/view-syncer/view-syncer.pg-test.ts",
        "discussion_id": "1955936986",
        "commented_code": "@@ -882,6 +1466,147 @@ describe('view-syncer/service', () => {\n           \"schema\": \"\",\n           \"table\": \"issues\",\n         },\n+        {\n+          \"clientGroupID\": \"9876\",\n+          \"patchVersion\": \"01\",\n+          \"refCounts\": {\n+            \"query-hash2\": 1,\n+          },\n+          \"rowKey\": {\n+            \"id\": \"100\",\n+          },\n+          \"rowVersion\": \"01\",\n+          \"schema\": \"\",\n+          \"table\": \"users\",\n+        },\n+        {\n+          \"clientGroupID\": \"9876\",\n+          \"patchVersion\": \"01\",\n+          \"refCounts\": {\n+            \"query-hash2\": 1,\n+          },\n+          \"rowKey\": {\n+            \"id\": \"101\",\n+          },\n+          \"rowVersion\": \"01\",\n+          \"schema\": \"\",\n+          \"table\": \"users\",\n+        },\n+        {\n+          \"clientGroupID\": \"9876\",\n+          \"patchVersion\": \"01\",\n+          \"refCounts\": {\n+            \"query-hash2\": 1,\n+          },\n+          \"rowKey\": {\n+            \"id\": \"102\",\n+          },\n+          \"rowVersion\": \"01\",\n+          \"schema\": \"\",\n+          \"table\": \"users\",\n+        },\n+      ]\n+    `,\n+    );\n+\n+    expect(client1.drain()).toMatchInlineSnapshot(`[]`);\n+\n+    // TODO: How do I get ViewSyncer to \"close\" client2?",
        "comment_created_at": "2025-02-14T10:43:45+00:00",
        "comment_author": "arv",
        "comment_body": "@darkgnotic ?",
        "pr_file_module": null
      },
      {
        "comment_id": "1956446044",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3813,
        "pr_file": "packages/zero-cache/src/services/view-syncer/view-syncer.pg-test.ts",
        "discussion_id": "1955936986",
        "commented_code": "@@ -882,6 +1466,147 @@ describe('view-syncer/service', () => {\n           \"schema\": \"\",\n           \"table\": \"issues\",\n         },\n+        {\n+          \"clientGroupID\": \"9876\",\n+          \"patchVersion\": \"01\",\n+          \"refCounts\": {\n+            \"query-hash2\": 1,\n+          },\n+          \"rowKey\": {\n+            \"id\": \"100\",\n+          },\n+          \"rowVersion\": \"01\",\n+          \"schema\": \"\",\n+          \"table\": \"users\",\n+        },\n+        {\n+          \"clientGroupID\": \"9876\",\n+          \"patchVersion\": \"01\",\n+          \"refCounts\": {\n+            \"query-hash2\": 1,\n+          },\n+          \"rowKey\": {\n+            \"id\": \"101\",\n+          },\n+          \"rowVersion\": \"01\",\n+          \"schema\": \"\",\n+          \"table\": \"users\",\n+        },\n+        {\n+          \"clientGroupID\": \"9876\",\n+          \"patchVersion\": \"01\",\n+          \"refCounts\": {\n+            \"query-hash2\": 1,\n+          },\n+          \"rowKey\": {\n+            \"id\": \"102\",\n+          },\n+          \"rowVersion\": \"01\",\n+          \"schema\": \"\",\n+          \"table\": \"users\",\n+        },\n+      ]\n+    `,\n+    );\n+\n+    expect(client1.drain()).toMatchInlineSnapshot(`[]`);\n+\n+    // TODO: How do I get ViewSyncer to \"close\" client2?",
        "comment_created_at": "2025-02-14T16:48:23+00:00",
        "comment_author": "darkgnotic",
        "comment_body": "To close a connection, you need to call `stream.cancel()` on the `stream` returned by `viewSyncer.initConnection()` (way up on line 415).\r\n\r\nCurrently the code fires off a background task that just reads the stream and drops messages into the queue, so you'd have to plumb the stream out of that somehow. Maybe have `connect()` return `[Queue, Source]` or something.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1871533619",
    "pr_number": 3195,
    "pr_file": "packages/zero-cache/src/workers/connection.ts",
    "created_at": "2024-12-05T14:56:36+00:00",
    "commented_code": "this.#ws.addEventListener('message', this.#handleMessage);\n     this.#ws.addEventListener('close', this.#handleClose);\n     this.#ws.addEventListener('error', this.#handleError);\n+  }\n \n-    const connectedMessage: ConnectedMessage = [\n-      'connected',\n-      {wsid: wsID, timestamp: Date.now()},\n-    ];\n-    send(ws, connectedMessage);\n-    this.#warmConnection(config);\n+  /**\n+   * Checks the protocol version and errors for unsupported protocols,\n+   * sending the initial `connected` response on success.\n+   *\n+   * This is early in the connection lifecycle because {@link #handleMessage}\n+   * will only parse messages with schema(s) of supported protocol versions.\n+   */\n+  init() {",
    "repo_full_name": "rocicorp/mono",
    "discussion_comments": [
      {
        "comment_id": "1871533619",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3195,
        "pr_file": "packages/zero-cache/src/workers/connection.ts",
        "discussion_id": "1871533619",
        "commented_code": "@@ -77,13 +86,34 @@ export class Connection {\n     this.#ws.addEventListener('message', this.#handleMessage);\n     this.#ws.addEventListener('close', this.#handleClose);\n     this.#ws.addEventListener('error', this.#handleError);\n+  }\n \n-    const connectedMessage: ConnectedMessage = [\n-      'connected',\n-      {wsid: wsID, timestamp: Date.now()},\n-    ];\n-    send(ws, connectedMessage);\n-    this.#warmConnection(config);\n+  /**\n+   * Checks the protocol version and errors for unsupported protocols,\n+   * sending the initial `connected` response on success.\n+   *\n+   * This is early in the connection lifecycle because {@link #handleMessage}\n+   * will only parse messages with schema(s) of supported protocol versions.\n+   */\n+  init() {",
        "comment_created_at": "2024-12-05T14:56:36+00:00",
        "comment_author": "tantaman",
        "comment_body": "Why a separate `init` method instead of being in the constructor?",
        "pr_file_module": null
      },
      {
        "comment_id": "1871755759",
        "repo_full_name": "rocicorp/mono",
        "pr_number": 3195,
        "pr_file": "packages/zero-cache/src/workers/connection.ts",
        "discussion_id": "1871533619",
        "commented_code": "@@ -77,13 +86,34 @@ export class Connection {\n     this.#ws.addEventListener('message', this.#handleMessage);\n     this.#ws.addEventListener('close', this.#handleClose);\n     this.#ws.addEventListener('error', this.#handleError);\n+  }\n \n-    const connectedMessage: ConnectedMessage = [\n-      'connected',\n-      {wsid: wsID, timestamp: Date.now()},\n-    ];\n-    send(ws, connectedMessage);\n-    this.#warmConnection(config);\n+  /**\n+   * Checks the protocol version and errors for unsupported protocols,\n+   * sending the initial `connected` response on success.\n+   *\n+   * This is early in the connection lifecycle because {@link #handleMessage}\n+   * will only parse messages with schema(s) of supported protocol versions.\n+   */\n+  init() {",
        "comment_created_at": "2024-12-05T16:54:38+00:00",
        "comment_author": "darkgnotic",
        "comment_body": "The `init()` method may now close() the websocket, upon which the #onClose() handler will attempt to remove the connection from the map. If this happens at construction time, that close will be a no-op and we'll add a closed connection to the map in `syncer.ts`:\r\n\r\n```ts\r\n    const connection = new Connection(..., () => { /* onCloseHandler */ });    // don't want constructor to close\r\n    this.#connections.set(clientID, connection);\r\n    connection.init();  // Now it's okay to close\r\n```",
        "pr_file_module": null
      }
    ]
  }
]