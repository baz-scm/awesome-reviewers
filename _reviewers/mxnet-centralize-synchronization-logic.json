[
  {
    "discussion_id": "658483058",
    "pr_number": 20331,
    "pr_file": "include/mxnet/base.h",
    "created_at": "2021-06-25T05:24:40+00:00",
    "commented_code": "* \\brief the auxiliary stream of the device, can be nullptr or Stream<gpu>* in GPU mode\n   */\n  void *aux_stream;\n  /*!\n   * \\brief indicator of whether this execution is run in bulk mode\n    /*!\n   * \\brief pointer to the cuda event pool used by the dependecy engine\n   */\n  bool is_bulk;\n  void *event_pool = nullptr;",
    "repo_full_name": "apache/mxnet",
    "discussion_comments": [
      {
        "comment_id": "658483058",
        "repo_full_name": "apache/mxnet",
        "pr_number": 20331,
        "pr_file": "include/mxnet/base.h",
        "discussion_id": "658483058",
        "commented_code": "@@ -348,10 +348,10 @@ struct RunContext {\n    * \\brief the auxiliary stream of the device, can be nullptr or Stream<gpu>* in GPU mode\n    */\n   void *aux_stream;\n-  /*!\n-   * \\brief indicator of whether this execution is run in bulk mode\n+    /*!\n+   * \\brief pointer to the cuda event pool used by the dependecy engine\n    */\n-  bool is_bulk;\n+  void *event_pool = nullptr;",
        "comment_created_at": "2021-06-25T05:24:40+00:00",
        "comment_author": "ptrendx",
        "comment_body": "Leaving this comment here just as a way to explain why the `is_bulk` is removed. `is_bulk` was a way to mark operations as not needing synchronization when being a part of a single engine bulk. This PR moves the handling of the synchronization to the engine itself, so this is no longer useful.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "701276286",
    "pr_number": 20331,
    "pr_file": "src/engine/threaded_engine.cc",
    "created_at": "2021-09-02T17:12:47+00:00",
    "commented_code": "OprBlock::Delete(opr_block);\n}\n\nvoid ThreadedEngine::OnStartStatic(Engine *engine, void *opr_block,\n                                   const dmlc::Error* error) {\n  // no-op\n}\n\n#if MXNET_USE_CUDA\nstatic inline void AddEventHelper(\n  std::unordered_map<cudaStream_t, EventInfo>* events_per_stream,\n  const EventInfo& cuda_event) {\n  auto event_stream = cuda_event.stream;\n  if (events_per_stream->count(event_stream) > 0) {\n    if ((*events_per_stream)[event_stream].pool_index < cuda_event.pool_index) {\n      (*events_per_stream)[event_stream] = cuda_event;",
    "repo_full_name": "apache/mxnet",
    "discussion_comments": [
      {
        "comment_id": "701276286",
        "repo_full_name": "apache/mxnet",
        "pr_number": 20331,
        "pr_file": "src/engine/threaded_engine.cc",
        "discussion_id": "701276286",
        "commented_code": "@@ -523,5 +543,206 @@ void ThreadedEngine::OnCompleteStatic(Engine *engine, void *opr_block_,\n   OprBlock::Delete(opr_block);\n }\n \n+void ThreadedEngine::OnStartStatic(Engine *engine, void *opr_block,\n+                                   const dmlc::Error* error) {\n+  // no-op\n+}\n+\n+#if MXNET_USE_CUDA\n+static inline void AddEventHelper(\n+  std::unordered_map<cudaStream_t, EventInfo>* events_per_stream,\n+  const EventInfo& cuda_event) {\n+  auto event_stream = cuda_event.stream;\n+  if (events_per_stream->count(event_stream) > 0) {\n+    if ((*events_per_stream)[event_stream].pool_index < cuda_event.pool_index) {\n+      (*events_per_stream)[event_stream] = cuda_event;",
        "comment_created_at": "2021-09-02T17:12:47+00:00",
        "comment_author": "barry-jin",
        "comment_body": "Why should the event be replaced by others with larger pool_index? ",
        "pr_file_module": null
      },
      {
        "comment_id": "701325238",
        "repo_full_name": "apache/mxnet",
        "pr_number": 20331,
        "pr_file": "src/engine/threaded_engine.cc",
        "discussion_id": "701276286",
        "commented_code": "@@ -523,5 +543,206 @@ void ThreadedEngine::OnCompleteStatic(Engine *engine, void *opr_block_,\n   OprBlock::Delete(opr_block);\n }\n \n+void ThreadedEngine::OnStartStatic(Engine *engine, void *opr_block,\n+                                   const dmlc::Error* error) {\n+  // no-op\n+}\n+\n+#if MXNET_USE_CUDA\n+static inline void AddEventHelper(\n+  std::unordered_map<cudaStream_t, EventInfo>* events_per_stream,\n+  const EventInfo& cuda_event) {\n+  auto event_stream = cuda_event.stream;\n+  if (events_per_stream->count(event_stream) > 0) {\n+    if ((*events_per_stream)[event_stream].pool_index < cuda_event.pool_index) {\n+      (*events_per_stream)[event_stream] = cuda_event;",
        "comment_created_at": "2021-09-02T18:26:32+00:00",
        "comment_author": "ptrendx",
        "comment_body": "Because the pool is per stream so for 2 events from the same pool the one with the larger pool_index had to be recorded later (and synchronizing with that event will synchronize with both).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "701304204",
    "pr_number": 20331,
    "pr_file": "src/engine/threaded_engine_perdevice.cc",
    "created_at": "2021-09-02T17:54:13+00:00",
    "commented_code": "MSHADOW_CATCH_ERROR(mshadow::SetDevice<gpu>(ctx.dev_id));\n        #endif\n      }\n      this->ExecuteOprBlock(RunContext{ctx, nullptr, nullptr, false}, opr_block);\n      CallbackOnStart on_start = this->CreateOnStart(ThreadedEngine::OnStartStatic,\n                                                     opr_block);\n      CallbackOnComplete callback = this->CreateCallback(ThreadedEngine::OnCompleteStatic,\n                                                         opr_block);",
    "repo_full_name": "apache/mxnet",
    "discussion_comments": [
      {
        "comment_id": "701304204",
        "repo_full_name": "apache/mxnet",
        "pr_number": 20331,
        "pr_file": "src/engine/threaded_engine_perdevice.cc",
        "discussion_id": "701304204",
        "commented_code": "@@ -103,7 +118,11 @@ class ThreadedEnginePerDevice : public ThreadedEngine {\n         MSHADOW_CATCH_ERROR(mshadow::SetDevice<gpu>(ctx.dev_id));\n         #endif\n       }\n-      this->ExecuteOprBlock(RunContext{ctx, nullptr, nullptr, false}, opr_block);\n+      CallbackOnStart on_start = this->CreateOnStart(ThreadedEngine::OnStartStatic,\n+                                                     opr_block);\n+      CallbackOnComplete callback = this->CreateCallback(ThreadedEngine::OnCompleteStatic,\n+                                                         opr_block);",
        "comment_created_at": "2021-09-02T17:54:13+00:00",
        "comment_author": "barry-jin",
        "comment_body": "Why use OnStartStatic and OnCompleteStatic here instead of creating GPU onstart and oncomplete for GPU case, creating static-onstart and static-oncomplete for CPU case. ",
        "pr_file_module": null
      },
      {
        "comment_id": "701326230",
        "repo_full_name": "apache/mxnet",
        "pr_number": 20331,
        "pr_file": "src/engine/threaded_engine_perdevice.cc",
        "discussion_id": "701304204",
        "commented_code": "@@ -103,7 +118,11 @@ class ThreadedEnginePerDevice : public ThreadedEngine {\n         MSHADOW_CATCH_ERROR(mshadow::SetDevice<gpu>(ctx.dev_id));\n         #endif\n       }\n-      this->ExecuteOprBlock(RunContext{ctx, nullptr, nullptr, false}, opr_block);\n+      CallbackOnStart on_start = this->CreateOnStart(ThreadedEngine::OnStartStatic,\n+                                                     opr_block);\n+      CallbackOnComplete callback = this->CreateCallback(ThreadedEngine::OnCompleteStatic,\n+                                                         opr_block);",
        "comment_created_at": "2021-09-02T18:28:07+00:00",
        "comment_author": "ptrendx",
        "comment_body": "Mechanism introduced in this PR is in addition to the dependency tracking that already existed, and the OnCompleteStatic contains dependency update code (so it has to be called from the GPU version as well).",
        "pr_file_module": null
      }
    ]
  }
]