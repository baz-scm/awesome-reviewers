[
  {
    "discussion_id": "250017319",
    "pr_number": 13735,
    "pr_file": "example/gluon/wavenet/main.py",
    "created_at": "2019-01-23T00:41:29+00:00",
    "commented_code": "\"\"\"\nDescrition : main module to run code\n\"\"\"\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\nimport argparse\nfrom trainer import Train\n\ndef main():\n    \"\"\"\n    Description : run code using argument info\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--batch_size', type=int, default=64)",
    "repo_full_name": "apache/mxnet",
    "discussion_comments": [
      {
        "comment_id": "250017319",
        "repo_full_name": "apache/mxnet",
        "pr_number": 13735,
        "pr_file": "example/gluon/wavenet/main.py",
        "discussion_id": "250017319",
        "commented_code": "@@ -0,0 +1,48 @@\n+\"\"\"\n+Descrition : main module to run code\n+\"\"\"\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+import argparse\n+from trainer import Train\n+\n+def main():\n+    \"\"\"\n+    Description : run code using argument info\n+    \"\"\"\n+    parser = argparse.ArgumentParser()\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument('--batch_size', type=int, default=64)",
        "comment_created_at": "2019-01-23T00:41:29+00:00",
        "comment_author": "ThomasDelteil",
        "comment_body": "Please add descriptions to each argument",
        "pr_file_module": null
      },
      {
        "comment_id": "250473457",
        "repo_full_name": "apache/mxnet",
        "pr_number": 13735,
        "pr_file": "example/gluon/wavenet/main.py",
        "discussion_id": "250017319",
        "commented_code": "@@ -0,0 +1,48 @@\n+\"\"\"\n+Descrition : main module to run code\n+\"\"\"\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+import argparse\n+from trainer import Train\n+\n+def main():\n+    \"\"\"\n+    Description : run code using argument info\n+    \"\"\"\n+    parser = argparse.ArgumentParser()\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument('--batch_size', type=int, default=64)",
        "comment_created_at": "2019-01-24T05:51:19+00:00",
        "comment_author": "seujung",
        "comment_body": "Add description to each argument",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "698622760",
    "pr_number": 20559,
    "pr_file": "python/mxnet/gluon/block.py",
    "created_at": "2021-08-30T16:16:26+00:00",
    "commented_code": "for p in params.values():\n            p.reset_ctx(ctx)\n\n    def mark_vars(self, var_arrays):\n        \"\"\"Mark the intermediate nodes\n\n        Parameters\n        ----------\n        vars: NDArrays or List[NDArrays] with nonempty deferredcomputation_entry_",
    "repo_full_name": "apache/mxnet",
    "discussion_comments": [
      {
        "comment_id": "698622760",
        "repo_full_name": "apache/mxnet",
        "pr_number": 20559,
        "pr_file": "python/mxnet/gluon/block.py",
        "discussion_id": "698622760",
        "commented_code": "@@ -1635,6 +1637,47 @@ def reset_ctx(self, ctx):\n         for p in params.values():\n             p.reset_ctx(ctx)\n \n+    def mark_vars(self, var_arrays):\n+        \"\"\"Mark the intermediate nodes\n+\n+        Parameters\n+        ----------\n+        vars: NDArrays or List[NDArrays] with nonempty deferredcomputation_entry_",
        "comment_created_at": "2021-08-30T16:16:26+00:00",
        "comment_author": "barry-jin",
        "comment_body": "Could you follow the [example](https://github.com/apache/incubator-mxnet/blob/49c47380fac3c8c8e7ee8eb237000165e22828ef/python/mxnet/numpy/multiarray.py#L2621-L2645) to write the docstring for mark_vars? ",
        "pr_file_module": null
      },
      {
        "comment_id": "698727447",
        "repo_full_name": "apache/mxnet",
        "pr_number": 20559,
        "pr_file": "python/mxnet/gluon/block.py",
        "discussion_id": "698622760",
        "commented_code": "@@ -1635,6 +1637,47 @@ def reset_ctx(self, ctx):\n         for p in params.values():\n             p.reset_ctx(ctx)\n \n+    def mark_vars(self, var_arrays):\n+        \"\"\"Mark the intermediate nodes\n+\n+        Parameters\n+        ----------\n+        vars: NDArrays or List[NDArrays] with nonempty deferredcomputation_entry_",
        "comment_created_at": "2021-08-30T18:54:06+00:00",
        "comment_author": "KexinFeng",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "720920133",
    "pr_number": 20592,
    "pr_file": "python/mxnet/numpy/multiarray.py",
    "created_at": "2021-10-03T22:43:24+00:00",
    "commented_code": "\"\"\"\n    return _mx_nd_np.arctan(x, out=out, **kwargs)\n\natan = arctan\natan.__doc__ = \"\"\"\n    Trigonometric inverse tangent, element-wise.\n    The inverse of tan, so that if ``y = tan(x)`` then ``x = atan(y)``.\n\n    Notes\n    ---------\n    `atan` is a alias for `arctan`. It is a standard API in\n    https://data-apis.org/array-api/latest/API_specification/elementwise_functions.html#atan-x\n    instead of an official NumPy operator.\n    \n    >>>np.atan is np.arctan\n    True\n    \n    Parameters\n    ----------\n    x : ndarray or scalar\n        Input values.\n    out : ndarray or None, optional\n        A location into which the result is stored. If provided, it must have\n        a shape that the inputs broadcast to. If not provided or `None`,\n        a freshly-allocated array is returned.\n\n    Returns\n    -------\n    out : ndarray or scalar\n        Out has the same shape as `x`. It lies is in\n        ``[-pi/2, pi/2]`` (``atan(+/-inf)`` returns ``+/-pi/2``).\n        This is a scalar if `x` is a scalar.\n\n    Notes",
    "repo_full_name": "apache/mxnet",
    "discussion_comments": [
      {
        "comment_id": "720920133",
        "repo_full_name": "apache/mxnet",
        "pr_number": 20592,
        "pr_file": "python/mxnet/numpy/multiarray.py",
        "discussion_id": "720920133",
        "commented_code": "@@ -4309,6 +4493,56 @@ def arctan(x, out=None, **kwargs):\n     \"\"\"\n     return _mx_nd_np.arctan(x, out=out, **kwargs)\n \n+atan = arctan\n+atan.__doc__ = \"\"\"\n+    Trigonometric inverse tangent, element-wise.\n+    The inverse of tan, so that if ``y = tan(x)`` then ``x = atan(y)``.\n+\n+    Notes\n+    ---------\n+    `atan` is a alias for `arctan`. It is a standard API in\n+    https://data-apis.org/array-api/latest/API_specification/elementwise_functions.html#atan-x\n+    instead of an official NumPy operator.\n+    \n+    >>>np.atan is np.arctan\n+    True\n+    \n+    Parameters\n+    ----------\n+    x : ndarray or scalar\n+        Input values.\n+    out : ndarray or None, optional\n+        A location into which the result is stored. If provided, it must have\n+        a shape that the inputs broadcast to. If not provided or `None`,\n+        a freshly-allocated array is returned.\n+\n+    Returns\n+    -------\n+    out : ndarray or scalar\n+        Out has the same shape as `x`. It lies is in\n+        ``[-pi/2, pi/2]`` (``atan(+/-inf)`` returns ``+/-pi/2``).\n+        This is a scalar if `x` is a scalar.\n+\n+    Notes",
        "comment_created_at": "2021-10-03T22:43:24+00:00",
        "comment_author": "barry-jin",
        "comment_body": "Could you append a note here to elaborate that atan is a standardized API and is equivelant to arctan and also provide the reference. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "720922965",
    "pr_number": 20592,
    "pr_file": "python/mxnet/numpy/multiarray.py",
    "created_at": "2021-10-03T22:48:00+00:00",
    "commented_code": "\"\"\"\n    return _mx_nd_np.dsplit(ary, indices_or_sections)\n\n@set_module('mxnet.numpy')\ndef concat(seq, axis=0, out=None):\n    \"\"\"Join a sequence of arrays along an existing axis.\n\n    Parameters\n    ----------\n    a1, a2, ... : sequence of array_like\n        The arrays must have the same shape, except in the dimension\n        corresponding to `axis` (the first, by default).\n    axis : int, optional\n        The axis along which the arrays will be joined.  If axis is None,\n        arrays are flattened before use.  Default is 0.\n    out : ndarray, optional\n        If provided, the destination to place the result. The shape must be\n        correct, matching that of what concatenate would have returned if no\n        out argument were specified.\n\n    Returns\n    -------\n    res : ndarray\n        The concatenated array.\n\n    See Also\n    --------\n    split : Split array into a list of multiple sub-arrays of equal size.\n    hsplit : Split array into multiple sub-arrays horizontally (column wise)\n    vsplit : Split array into multiple sub-arrays vertically (row wise)\n    dsplit : Split array into multiple sub-arrays along the 3rd axis (depth).\n    stack : Stack a sequence of arrays along a new axis.\n    hstack : Stack arrays in sequence horizontally (column wise)\n    vstack : Stack arrays in sequence vertically (row wise)\n    dstack : Stack arrays in sequence depth wise (along third dimension)\n\n    Examples\n    --------\n    >>> a = np.array([[1, 2], [3, 4]])\n    >>> b = np.array([[5, 6]])\n    >>> np.concat((a, b), axis=0)\n    array([[1., 2.],\n           [3., 4.],\n           [5., 6.]])\n\n    >>> np.concat((a, b.T), axis=1)\n    array([[1., 2., 5.],\n           [3., 4., 6.]])",
    "repo_full_name": "apache/mxnet",
    "discussion_comments": [
      {
        "comment_id": "720922965",
        "repo_full_name": "apache/mxnet",
        "pr_number": 20592,
        "pr_file": "python/mxnet/numpy/multiarray.py",
        "discussion_id": "720922965",
        "commented_code": "@@ -6533,6 +6972,56 @@ def dsplit(ary, indices_or_sections):\n     \"\"\"\n     return _mx_nd_np.dsplit(ary, indices_or_sections)\n \n+@set_module('mxnet.numpy')\n+def concat(seq, axis=0, out=None):\n+    \"\"\"Join a sequence of arrays along an existing axis.\n+\n+    Parameters\n+    ----------\n+    a1, a2, ... : sequence of array_like\n+        The arrays must have the same shape, except in the dimension\n+        corresponding to `axis` (the first, by default).\n+    axis : int, optional\n+        The axis along which the arrays will be joined.  If axis is None,\n+        arrays are flattened before use.  Default is 0.\n+    out : ndarray, optional\n+        If provided, the destination to place the result. The shape must be\n+        correct, matching that of what concatenate would have returned if no\n+        out argument were specified.\n+\n+    Returns\n+    -------\n+    res : ndarray\n+        The concatenated array.\n+\n+    See Also\n+    --------\n+    split : Split array into a list of multiple sub-arrays of equal size.\n+    hsplit : Split array into multiple sub-arrays horizontally (column wise)\n+    vsplit : Split array into multiple sub-arrays vertically (row wise)\n+    dsplit : Split array into multiple sub-arrays along the 3rd axis (depth).\n+    stack : Stack a sequence of arrays along a new axis.\n+    hstack : Stack arrays in sequence horizontally (column wise)\n+    vstack : Stack arrays in sequence vertically (row wise)\n+    dstack : Stack arrays in sequence depth wise (along third dimension)\n+\n+    Examples\n+    --------\n+    >>> a = np.array([[1, 2], [3, 4]])\n+    >>> b = np.array([[5, 6]])\n+    >>> np.concat((a, b), axis=0)\n+    array([[1., 2.],\n+           [3., 4.],\n+           [5., 6.]])\n+\n+    >>> np.concat((a, b.T), axis=1)\n+    array([[1., 2., 5.],\n+           [3., 4., 6.]])\n+",
        "comment_created_at": "2021-10-03T22:48:00+00:00",
        "comment_author": "barry-jin",
        "comment_body": "Add note here to elaborate that concat is a standardized API and is equivelant to concatenate and also provide the reference. ",
        "pr_file_module": null
      }
    ]
  }
]