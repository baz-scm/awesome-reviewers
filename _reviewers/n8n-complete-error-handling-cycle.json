[
  {
    "discussion_id": "2225838133",
    "pr_number": 17584,
    "pr_file": "packages/frontend/editor-ui/src/components/RunDataBinary.vue",
    "created_at": "2025-07-23T14:44:22+00:00",
    "commented_code": "+<script setup lang=\"ts\">\n+import { saveAs } from 'file-saver';\n+import { useWorkflowsStore } from '@/stores/workflows.store';\n+import { ViewableMimeTypes } from '@n8n/api-types';\n+import { useI18n } from '@n8n/i18n';\n+import type { IBinaryKeyData } from 'n8n-workflow';\n+import { N8nButton, N8nText } from '@n8n/design-system';\n+\n+const { binaryData, compact } = defineProps<{ binaryData: IBinaryKeyData[]; compact: boolean }>();\n+\n+const emit = defineEmits<{ preview: [index: number, key: string | number] }>();\n+\n+const i18n = useI18n();\n+const workflowsStore = useWorkflowsStore();\n+\n+function isViewable(index: number, key: string | number): boolean {\n+\tconst { mimeType } = binaryData[index][key];\n+\treturn ViewableMimeTypes.includes(mimeType);\n+}\n+\n+function isDownloadable(index: number, key: string | number): boolean {\n+\tconst { mimeType, fileName } = binaryData[index][key];\n+\treturn !!(mimeType && fileName);",
    "repo_full_name": "n8n-io/n8n",
    "discussion_comments": [
      {
        "comment_id": "2225838133",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 17584,
        "pr_file": "packages/frontend/editor-ui/src/components/RunDataBinary.vue",
        "discussion_id": "2225838133",
        "commented_code": "@@ -0,0 +1,205 @@\n+<script setup lang=\"ts\">\n+import { saveAs } from 'file-saver';\n+import { useWorkflowsStore } from '@/stores/workflows.store';\n+import { ViewableMimeTypes } from '@n8n/api-types';\n+import { useI18n } from '@n8n/i18n';\n+import type { IBinaryKeyData } from 'n8n-workflow';\n+import { N8nButton, N8nText } from '@n8n/design-system';\n+\n+const { binaryData, compact } = defineProps<{ binaryData: IBinaryKeyData[]; compact: boolean }>();\n+\n+const emit = defineEmits<{ preview: [index: number, key: string | number] }>();\n+\n+const i18n = useI18n();\n+const workflowsStore = useWorkflowsStore();\n+\n+function isViewable(index: number, key: string | number): boolean {\n+\tconst { mimeType } = binaryData[index][key];\n+\treturn ViewableMimeTypes.includes(mimeType);\n+}\n+\n+function isDownloadable(index: number, key: string | number): boolean {\n+\tconst { mimeType, fileName } = binaryData[index][key];\n+\treturn !!(mimeType && fileName);",
        "comment_created_at": "2025-07-23T14:44:22+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":7,\"steps\":[{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"grep -R \\\"function getBinaryUrl\\\" -n packages/frontend | head\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"sed -n '1785,1805p' packages/frontend/editor-ui/src/stores/workflows.store.ts\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"node -e \\\"console.log(['abc', undefined].join('.'));\\\"\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"grep -n \\\"\\\\.compact\\\" -R packages/frontend/editor-ui/src/components/RunDataBinary.vue\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"grep -R \\\"compact ? $style.compact\\\" -n\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"sed -n '1,260p' packages/frontend/editor-ui/src/components/RunDataBinary.vue\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"grep -R \\\"export const ViewableMimeTypes\\\" packages | head\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"sed -n '1,120p' packages/@n8n/api-types/src/schemas/binary-data.schema.ts\"},\"toolName\":\"executeCommand\"}]}]} -->\nisDownloadable does not check that the binary data actually contains either `id` or `data`, so the download button can be shown for items that cannot be downloaded\n\n<details>\n<summary>Prompt for AI agents</summary>\n\n```\nAddress the following comment on packages/frontend/editor-ui/src/components/RunDataBinary.vue at line 23:\n\n<comment>isDownloadable does not check that the binary data actually contains either `id` or `data`, so the download button can be shown for items that cannot be downloaded</comment>\n\n<file context>\n@@ -0,0 +1,205 @@\n+&lt;script setup lang=&quot;ts&quot;&gt;\n+import { saveAs } from &#39;file-saver&#39;;\n+import { useWorkflowsStore } from &#39;@/stores/workflows.store&#39;;\n+import { ViewableMimeTypes } from &#39;@n8n/api-types&#39;;\n+import { useI18n } from &#39;@n8n/i18n&#39;;\n+import type { IBinaryKeyData } from &#39;n8n-workflow&#39;;\n+import { N8nButton, N8nText } from &#39;@n8n/design-system&#39;;\n+\n+const { binaryData, compact } = defineProps&lt;{ binaryData: IBinaryKeyData[]; compact: boolean }&gt;();\n</file context>\n```\n\n</details>\n\n```suggestion\n\treturn !!(mimeType && fileName && (binaryData[index][key].id || binaryData[index][key].data));\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2207254791",
    "pr_number": 17328,
    "pr_file": "packages/frontend/editor-ui/src/views/Evaluations.ee/EvaluationsView.vue",
    "created_at": "2025-07-15T11:41:41+00:00",
    "commented_code": "}\n }\n \n+async function stopTest() {\n+\tif (!runningTestRun.value) {\n+\t\treturn;\n+\t}\n+\n+\ttry {\n+\t\tcancellingTestRun.value = true;\n+\t\tawait evaluationStore.cancelTestRun(runningTestRun.value.workflowId, runningTestRun.value.id);",
    "repo_full_name": "n8n-io/n8n",
    "discussion_comments": [
      {
        "comment_id": "2207254791",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 17328,
        "pr_file": "packages/frontend/editor-ui/src/views/Evaluations.ee/EvaluationsView.vue",
        "discussion_id": "2207254791",
        "commented_code": "@@ -33,6 +36,20 @@ async function runTest() {\n \t}\n }\n \n+async function stopTest() {\n+\tif (!runningTestRun.value) {\n+\t\treturn;\n+\t}\n+\n+\ttry {\n+\t\tcancellingTestRun.value = true;\n+\t\tawait evaluationStore.cancelTestRun(runningTestRun.value.workflowId, runningTestRun.value.id);",
        "comment_created_at": "2025-07-15T11:41:41+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":6,\"steps\":[{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"grep -R \\\"cancelTestRun(\\\" -n\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"sed -n '100,160p' packages/frontend/editor-ui/src/stores/evaluation.store.ee.ts\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"grep -R \\\"runTestButton\\\" packages/frontend/editor-ui/src/views/Evaluations.ee -n\"},\"toolName\":\"executeCommand\"}]}]} -->\ncancellingTestRun is set to true earlier in the try\u2010block but never reset to false when the cancellation succeeds, leaving the stop button permanently disabled until the next status poll finishes. The flag should be cleared in a finally block (or after the await) to ensure the UI is re-enabled immediately after the API call resolves.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2182190193",
    "pr_number": 16952,
    "pr_file": "scripts/build-n8n.mjs",
    "created_at": "2025-07-03T08:30:54+00:00",
    "commented_code": "startTimer('package_build');\n \n echo(chalk.yellow('INFO: Running pnpm install and build...'));\n-await $`cd ${config.rootDir} && pnpm install --frozen-lockfile`;\n-await $`cd ${config.rootDir} && pnpm build`;\n-echo(chalk.green('\u2705 pnpm install and build completed'));\n+try {\n+\tconst installProcess = $`cd ${config.rootDir} && pnpm install --frozen-lockfile`;\n+\tinstallProcess.pipe(process.stdout);\n+\tawait installProcess;\n+\n+\tconst buildProcess = $`cd ${config.rootDir} && pnpm build`;\n+\tbuildProcess.pipe(process.stdout);\n+\tawait buildProcess;\n+\n+\techo(chalk.green('\u2705 pnpm install and build completed'));\n+} catch (error) {\n+\tconsole.error(chalk.red('\n\ud83d\uded1 BUILD PROCESS FAILED!'));\n+\tconsole.error(chalk.red('An error occurred during the build process:'));",
    "repo_full_name": "n8n-io/n8n",
    "discussion_comments": [
      {
        "comment_id": "2182190193",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 16952,
        "pr_file": "scripts/build-n8n.mjs",
        "discussion_id": "2182190193",
        "commented_code": "@@ -84,9 +84,21 @@ echo(chalk.yellow('INFO: Starting local application pre-build...'));\n startTimer('package_build');\n \n echo(chalk.yellow('INFO: Running pnpm install and build...'));\n-await $`cd ${config.rootDir} && pnpm install --frozen-lockfile`;\n-await $`cd ${config.rootDir} && pnpm build`;\n-echo(chalk.green('\u2705 pnpm install and build completed'));\n+try {\n+\tconst installProcess = $`cd ${config.rootDir} && pnpm install --frozen-lockfile`;\n+\tinstallProcess.pipe(process.stdout);\n+\tawait installProcess;\n+\n+\tconst buildProcess = $`cd ${config.rootDir} && pnpm build`;\n+\tbuildProcess.pipe(process.stdout);\n+\tawait buildProcess;\n+\n+\techo(chalk.green('\u2705 pnpm install and build completed'));\n+} catch (error) {\n+\tconsole.error(chalk.red('\\n\ud83d\uded1 BUILD PROCESS FAILED!'));\n+\tconsole.error(chalk.red('An error occurred during the build process:'));",
        "comment_created_at": "2025-07-03T08:30:54+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":8,\"steps\":[{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"grep -R \\\"\\\\.pipe(process\\\\.stdout)\\\" -n\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"grep -R \\\"\\\\.pipe(process\\\\.stdout)\\\" -n | head\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"sed -n '70,100p' packages/node-dev/src/Build.ts\"},\"toolName\":\"executeCommand\"}]}]} -->\nError details are swallowed; without printing the caught `error`, diagnosing build failures becomes difficult.\n\n```suggestion\n\t\tconsole.error(chalk.red(`An error occurred during the build process: ${error}`));\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2182301197",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 16952,
        "pr_file": "scripts/build-n8n.mjs",
        "discussion_id": "2182190193",
        "commented_code": "@@ -84,9 +84,21 @@ echo(chalk.yellow('INFO: Starting local application pre-build...'));\n startTimer('package_build');\n \n echo(chalk.yellow('INFO: Running pnpm install and build...'));\n-await $`cd ${config.rootDir} && pnpm install --frozen-lockfile`;\n-await $`cd ${config.rootDir} && pnpm build`;\n-echo(chalk.green('\u2705 pnpm install and build completed'));\n+try {\n+\tconst installProcess = $`cd ${config.rootDir} && pnpm install --frozen-lockfile`;\n+\tinstallProcess.pipe(process.stdout);\n+\tawait installProcess;\n+\n+\tconst buildProcess = $`cd ${config.rootDir} && pnpm build`;\n+\tbuildProcess.pipe(process.stdout);\n+\tawait buildProcess;\n+\n+\techo(chalk.green('\u2705 pnpm install and build completed'));\n+} catch (error) {\n+\tconsole.error(chalk.red('\\n\ud83d\uded1 BUILD PROCESS FAILED!'));\n+\tconsole.error(chalk.red('An error occurred during the build process:'));",
        "comment_created_at": "2025-07-03T09:22:39+00:00",
        "comment_author": "shortstacked",
        "comment_body": "Error details will be shown in the piped output.",
        "pr_file_module": null
      },
      {
        "comment_id": "2182329580",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 16952,
        "pr_file": "scripts/build-n8n.mjs",
        "discussion_id": "2182190193",
        "commented_code": "@@ -84,9 +84,21 @@ echo(chalk.yellow('INFO: Starting local application pre-build...'));\n startTimer('package_build');\n \n echo(chalk.yellow('INFO: Running pnpm install and build...'));\n-await $`cd ${config.rootDir} && pnpm install --frozen-lockfile`;\n-await $`cd ${config.rootDir} && pnpm build`;\n-echo(chalk.green('\u2705 pnpm install and build completed'));\n+try {\n+\tconst installProcess = $`cd ${config.rootDir} && pnpm install --frozen-lockfile`;\n+\tinstallProcess.pipe(process.stdout);\n+\tawait installProcess;\n+\n+\tconst buildProcess = $`cd ${config.rootDir} && pnpm build`;\n+\tbuildProcess.pipe(process.stdout);\n+\tawait buildProcess;\n+\n+\techo(chalk.green('\u2705 pnpm install and build completed'));\n+} catch (error) {\n+\tconsole.error(chalk.red('\\n\ud83d\uded1 BUILD PROCESS FAILED!'));\n+\tconsole.error(chalk.red('An error occurred during the build process:'));",
        "comment_created_at": "2025-07-03T09:36:32+00:00",
        "comment_author": "tomi",
        "comment_body": "E: nevermind",
        "pr_file_module": null
      }
    ]
  }
]