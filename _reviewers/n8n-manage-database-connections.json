[
  {
    "discussion_id": "2046664983",
    "pr_number": 14675,
    "pr_file": "packages/nodes-base/utils/db.ts",
    "created_at": "2025-04-16T10:49:34+00:00",
    "commented_code": "+import { GlobalConfig } from '@n8n/config';\n+import { Container } from '@n8n/di';\n+import mysql from 'mysql2/promise';\n+\n+let dbPool: mysql.Pool | null = null;\n+\n+export async function getDbConnection(): Promise<mysql.PoolConnection> {\n+\tif (!dbPool) {\n+\t\tconst globalConfig = Container.get(GlobalConfig);\n+\t\tconst dbConfig = globalConfig.database['mysqldb'];\n+\n+\t\tdbPool = mysql.createPool({\n+\t\t\t...dbConfig,\n+\t\t\twaitForConnections: true,\n+\t\t\tconnectionLimit: 10, // Max number of connections in pool\n+\t\t\tqueueLimit: 0,\n+\t\t\tconnectTimeout: 10000, // 10 seconds\n+\t\t});\n+\n+\t\tconsole.log('\u2705 Database pool created');\n+\t}\n+\n+\tconsole.log('\u267b\ufe0f Reusing connection from pool');\n+\treturn dbPool.getConnection();",
    "repo_full_name": "n8n-io/n8n",
    "discussion_comments": [
      {
        "comment_id": "2046664983",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 14675,
        "pr_file": "packages/nodes-base/utils/db.ts",
        "discussion_id": "2046664983",
        "commented_code": "@@ -0,0 +1,25 @@\n+import { GlobalConfig } from '@n8n/config';\n+import { Container } from '@n8n/di';\n+import mysql from 'mysql2/promise';\n+\n+let dbPool: mysql.Pool | null = null;\n+\n+export async function getDbConnection(): Promise<mysql.PoolConnection> {\n+\tif (!dbPool) {\n+\t\tconst globalConfig = Container.get(GlobalConfig);\n+\t\tconst dbConfig = globalConfig.database['mysqldb'];\n+\n+\t\tdbPool = mysql.createPool({\n+\t\t\t...dbConfig,\n+\t\t\twaitForConnections: true,\n+\t\t\tconnectionLimit: 10, // Max number of connections in pool\n+\t\t\tqueueLimit: 0,\n+\t\t\tconnectTimeout: 10000, // 10 seconds\n+\t\t});\n+\n+\t\tconsole.log('\u2705 Database pool created');\n+\t}\n+\n+\tconsole.log('\u267b\ufe0f Reusing connection from pool');\n+\treturn dbPool.getConnection();",
        "comment_created_at": "2025-04-16T10:49:34+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "Database connections aren't being released. MySQL connections should be released back to the pool after use to prevent connection leaks.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2046664993",
    "pr_number": 14675,
    "pr_file": "packages/nodes-base/utils/db.ts",
    "created_at": "2025-04-16T10:49:34+00:00",
    "commented_code": "+import { GlobalConfig } from '@n8n/config';\n+import { Container } from '@n8n/di';\n+import mysql from 'mysql2/promise';\n+\n+let dbPool: mysql.Pool | null = null;",
    "repo_full_name": "n8n-io/n8n",
    "discussion_comments": [
      {
        "comment_id": "2046664993",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 14675,
        "pr_file": "packages/nodes-base/utils/db.ts",
        "discussion_id": "2046664993",
        "commented_code": "@@ -0,0 +1,25 @@\n+import { GlobalConfig } from '@n8n/config';\n+import { Container } from '@n8n/di';\n+import mysql from 'mysql2/promise';\n+\n+let dbPool: mysql.Pool | null = null;",
        "comment_created_at": "2025-04-16T10:49:34+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "No mechanism to gracefully close the database pool when the application shuts down.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2046665047",
    "pr_number": 14675,
    "pr_file": "packages/nodes-base/nodes/MyCustomNode/MyCustomNode.node.ts",
    "created_at": "2025-04-16T10:49:35+00:00",
    "commented_code": "+import {\n+\tINodeType,\n+\tINodeTypeDescription,\n+\tILoadOptionsFunctions,\n+\tINodePropertyOptions,\n+\tNodeConnectionType,\n+} from 'n8n-workflow';\n+import mysql from 'mysql2/promise';\n+\n+export class MyCustomNode implements INodeType {\n+\tdescription: INodeTypeDescription = {\n+\t\tdisplayName: 'My Custom Node',\n+\t\tname: 'myCustomNode',\n+\t\tgroup: ['transform'],\n+\t\tversion: 1,\n+\t\tdescription: 'A custom node with cascading dropdowns',\n+\t\tdefaults: {\n+\t\t\tname: 'My Custom Node',\n+\t\t\tcolor: '#1F72E5',\n+\t\t},\n+\t\tinputs: [NodeConnectionType.Main],\n+\t\toutputs: [NodeConnectionType.Main],\n+\t\tproperties: [\n+\t\t\t{\n+\t\t\t\tdisplayName: 'User',\n+\t\t\t\tname: 'userId',\n+\t\t\t\ttype: 'options',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getUsers',\n+\t\t\t\t},\n+\t\t\t\tdefault: '',\n+\t\t\t\tdescription: 'Select a user from the database',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Segment',\n+\t\t\t\tname: 'segmentId',\n+\t\t\t\ttype: 'options',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getSegments',\n+\t\t\t\t\tloadOptionsDependsOn: ['userId'],\n+\t\t\t\t},\n+\t\t\t\tdefault: '',\n+\t\t\t\tdescription: 'Select a segment based on the user',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Action',\n+\t\t\t\tname: 'actionId',\n+\t\t\t\ttype: 'options',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getActions',\n+\t\t\t\t\tloadOptionsDependsOn: ['segmentId'],\n+\t\t\t\t},\n+\t\t\t\tdefault: '',\n+\t\t\t\tdescription: 'Select an action based on the segment',\n+\t\t\t},\n+\t\t],\n+\t};\n+\n+\tmethods = {\n+\t\tloadOptions: {\n+\t\t\tasync getUsers(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n+\t\t\t\tconst connection = await mysql.createConnection({",
    "repo_full_name": "n8n-io/n8n",
    "discussion_comments": [
      {
        "comment_id": "2046665047",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 14675,
        "pr_file": "packages/nodes-base/nodes/MyCustomNode/MyCustomNode.node.ts",
        "discussion_id": "2046665047",
        "commented_code": "@@ -0,0 +1,113 @@\n+import {\n+\tINodeType,\n+\tINodeTypeDescription,\n+\tILoadOptionsFunctions,\n+\tINodePropertyOptions,\n+\tNodeConnectionType,\n+} from 'n8n-workflow';\n+import mysql from 'mysql2/promise';\n+\n+export class MyCustomNode implements INodeType {\n+\tdescription: INodeTypeDescription = {\n+\t\tdisplayName: 'My Custom Node',\n+\t\tname: 'myCustomNode',\n+\t\tgroup: ['transform'],\n+\t\tversion: 1,\n+\t\tdescription: 'A custom node with cascading dropdowns',\n+\t\tdefaults: {\n+\t\t\tname: 'My Custom Node',\n+\t\t\tcolor: '#1F72E5',\n+\t\t},\n+\t\tinputs: [NodeConnectionType.Main],\n+\t\toutputs: [NodeConnectionType.Main],\n+\t\tproperties: [\n+\t\t\t{\n+\t\t\t\tdisplayName: 'User',\n+\t\t\t\tname: 'userId',\n+\t\t\t\ttype: 'options',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getUsers',\n+\t\t\t\t},\n+\t\t\t\tdefault: '',\n+\t\t\t\tdescription: 'Select a user from the database',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Segment',\n+\t\t\t\tname: 'segmentId',\n+\t\t\t\ttype: 'options',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getSegments',\n+\t\t\t\t\tloadOptionsDependsOn: ['userId'],\n+\t\t\t\t},\n+\t\t\t\tdefault: '',\n+\t\t\t\tdescription: 'Select a segment based on the user',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Action',\n+\t\t\t\tname: 'actionId',\n+\t\t\t\ttype: 'options',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getActions',\n+\t\t\t\t\tloadOptionsDependsOn: ['segmentId'],\n+\t\t\t\t},\n+\t\t\t\tdefault: '',\n+\t\t\t\tdescription: 'Select an action based on the segment',\n+\t\t\t},\n+\t\t],\n+\t};\n+\n+\tmethods = {\n+\t\tloadOptions: {\n+\t\t\tasync getUsers(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n+\t\t\t\tconst connection = await mysql.createConnection({",
        "comment_created_at": "2025-04-16T10:49:35+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "Creating new database connections for each request is inefficient",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2046665081",
    "pr_number": 14675,
    "pr_file": "packages/nodes-base/nodes/Contacts/Contacts.node.ts",
    "created_at": "2025-04-16T10:49:37+00:00",
    "commented_code": "+import {\n+\tINodeType,\n+\tINodeTypeDescription,\n+\tIExecuteFunctions,\n+\tINodeExecutionData,\n+\tNodeConnectionType,\n+\tILoadOptionsFunctions,\n+} from 'n8n-workflow';\n+import { getDbConnection } from '@utils/db';\n+import moment = require('moment');\n+\n+export class Contacts implements INodeType {\n+\tdescription: INodeTypeDescription = {\n+\t\tdisplayName: 'Contact Filter Node',\n+\t\tname: 'contactFilterNode',\n+\t\tgroup: ['transform'],\n+\t\tversion: 1,\n+\t\tdescription: 'Filters data based on selected Contact Email and Contact Status.',\n+\t\tdefaults: {\n+\t\t\tname: 'Contact Filter Node',\n+\t\t\tcolor: '#1F72E5',\n+\t\t},\n+\t\tinputs: [NodeConnectionType.Main],\n+\t\toutputs: [NodeConnectionType.Main],\n+\t\tproperties: [\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Search Contact',\n+\t\t\t\tname: 'search',\n+\t\t\t\ttype: 'string',\n+\t\t\t\tplaceholder: 'Search Contact by Name & Email',\n+\t\t\t\trequired: false,\n+\t\t\t\tdefault: '',\n+\t\t\t\tdescription: 'Search Contact by Name and Email.',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Select Contact(s) Status',\n+\t\t\t\tname: 'status',\n+\t\t\t\ttype: 'multiOptions',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getContactStatus',\n+\t\t\t\t},\n+\t\t\t\trequired: false,\n+\t\t\t\tdefault: [],\n+\t\t\t\tdescription: 'Choose one or more contact status.',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Select Contact(s) Priority',\n+\t\t\t\tname: 'priority',\n+\t\t\t\ttype: 'multiOptions',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getContactPriority',\n+\t\t\t\t},\n+\t\t\t\trequired: false,\n+\t\t\t\tdefault: [],\n+\t\t\t\tdescription: 'Choose one or more contact priority.',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Select Contact(s) Labels',\n+\t\t\t\tname: 'label',\n+\t\t\t\ttype: 'multiOptions',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getContactLabels',\n+\t\t\t\t},\n+\t\t\t\trequired: false,\n+\t\t\t\tdefault: [],\n+\t\t\t\tdescription: 'Choose one or more contact labels.',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Select Contact(s) Source',\n+\t\t\t\tname: 'lead_source',\n+\t\t\t\ttype: 'multiOptions',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getContactSource',\n+\t\t\t\t},\n+\t\t\t\trequired: false,\n+\t\t\t\tdefault: [],\n+\t\t\t\tdescription: 'Choose one or more contact source.',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Select Contact(s) Type',\n+\t\t\t\tname: 'type',\n+\t\t\t\ttype: 'multiOptions',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getContactType',\n+\t\t\t\t},\n+\t\t\t\trequired: false,\n+\t\t\t\tdefault: [],\n+\t\t\t\tdescription: 'Choose one or more contact type.',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Created On',\n+\t\t\t\tname: 'createdOn',\n+\t\t\t\ttype: 'fixedCollection',\n+\t\t\t\tplaceholder: 'Select Date Range',\n+\t\t\t\tdescription: 'Choose a date range for when the contact was created.',\n+\t\t\t\tdefault: {},\n+\t\t\t\toptions: [\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'range',\n+\t\t\t\t\t\tdisplayName: 'Date Range',\n+\t\t\t\t\t\tvalues: [\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tdisplayName: 'From',\n+\t\t\t\t\t\t\t\tname: 'from',\n+\t\t\t\t\t\t\t\ttype: 'dateTime',\n+\t\t\t\t\t\t\t\trequired: false,\n+\t\t\t\t\t\t\t\tdefault: '',\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tdisplayName: 'To',\n+\t\t\t\t\t\t\t\tname: 'to',\n+\t\t\t\t\t\t\t\ttype: 'dateTime',\n+\t\t\t\t\t\t\t\trequired: false,\n+\t\t\t\t\t\t\t\tdefault: '',\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t],\n+\t\t\t\t\t},\n+\t\t\t\t],\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Last Activity',\n+\t\t\t\tname: 'lastActivity',\n+\t\t\t\ttype: 'fixedCollection',\n+\t\t\t\tplaceholder: 'Select Date Range',\n+\t\t\t\tdescription: 'Choose a date range for the last activity of the contact.',\n+\t\t\t\tdefault: {},\n+\t\t\t\toptions: [\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'range',\n+\t\t\t\t\t\tdisplayName: 'Date Range',\n+\t\t\t\t\t\tvalues: [\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tdisplayName: 'From',\n+\t\t\t\t\t\t\t\tname: 'from',\n+\t\t\t\t\t\t\t\ttype: 'dateTime',\n+\t\t\t\t\t\t\t\trequired: false,\n+\t\t\t\t\t\t\t\tdefault: '',\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tdisplayName: 'To',\n+\t\t\t\t\t\t\t\tname: 'to',\n+\t\t\t\t\t\t\t\ttype: 'dateTime',\n+\t\t\t\t\t\t\t\trequired: false,\n+\t\t\t\t\t\t\t\tdefault: '',\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t],\n+\t\t\t\t\t},\n+\t\t\t\t],\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Pages',\n+\t\t\t\tname: 'pages',\n+\t\t\t\ttype: 'options',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getTotalPages',\n+\t\t\t\t},\n+\t\t\t\trequired: false,\n+\t\t\t\tdefault: 1,\n+\t\t\t},\n+\t\t],\n+\t};\n+\n+\tmethods = {\n+\t\tloadOptions: {\n+\t\t\tasync getContactStatus() {\n+\t\t\t\treturn [\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Not Contacted',\n+\t\t\t\t\t\tvalue: 'not-contacted',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Contacted',\n+\t\t\t\t\t\tvalue: 'contacted',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Call Back',\n+\t\t\t\t\t\tvalue: 'call-back',\n+\t\t\t\t\t},\n+\t\t\t\t];\n+\t\t\t},\n+\n+\t\t\tasync getContactPriority() {\n+\t\t\t\treturn [\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: '5 Very High',\n+\t\t\t\t\t\tvalue: 'very-high',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: '4 High',\n+\t\t\t\t\t\tvalue: 'high',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: '3 Medium',\n+\t\t\t\t\t\tvalue: 'medium',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: '2 Low',\n+\t\t\t\t\t\tvalue: 'low',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: '1 Very Low',\n+\t\t\t\t\t\tvalue: 'very-low',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: '0 Not Enough Information',\n+\t\t\t\t\t\tvalue: 'no-enough-information',\n+\t\t\t\t\t},\n+\t\t\t\t];\n+\t\t\t},\n+\n+\t\t\tasync getContactLabels() {\n+\t\t\t\t// const connection = await getDbConnection();\n+\t\t\t\t// const [agents] = await connection.execute('SELECT id, email FROM customers_and_leads limit 30') as any[];\n+\t\t\t\t// return agents.map((agent: any) => ({\n+\t\t\t\t//     name: agent.email,\n+\t\t\t\t//     value: agent.id,\n+\t\t\t\t// }));\n+\t\t\t\treturn [\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'ITest',\n+\t\t\t\t\t\tvalue: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'LTest',\n+\t\t\t\t\t\tvalue: 2,\n+\t\t\t\t\t},\n+\t\t\t\t];\n+\t\t\t},\n+\n+\t\t\tasync getContactSource() {\n+\t\t\t\treturn [\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'CSV',\n+\t\t\t\t\t\tvalue: 'csv',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Manual',\n+\t\t\t\t\t\tvalue: 'manual',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Sales Agent',\n+\t\t\t\t\t\tvalue: 'sales-agent',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Support Agent',\n+\t\t\t\t\t\tvalue: 'support-agent',\n+\t\t\t\t\t},\n+\t\t\t\t];\n+\t\t\t},\n+\n+\t\t\tasync getContactType() {\n+\t\t\t\treturn [\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Lead',\n+\t\t\t\t\t\tvalue: 'lead',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Customer',\n+\t\t\t\t\t\tvalue: 'contact',\n+\t\t\t\t\t},\n+\t\t\t\t];\n+\t\t\t},\n+\n+\t\t\tasync getTotalPages(this: ILoadOptionsFunctions) {\n+\t\t\t\tconst connection = await getDbConnection();\n+\t\t\t\tconst { rawQuery, recordsPerPage } = generatContactQuery(this);\n+\n+\t\t\t\tconst countQuery = `SELECT count(*) as totalRecords FROM (${rawQuery}) as temp`;\n+\n+\t\t\t\tconst [totalResult] = (await connection.execute(countQuery)) as any[];\n+\n+\t\t\t\tconst totalRecords = totalResult[0].totalRecords;\n+\t\t\t\tconst totalPages = Math.ceil(totalRecords / recordsPerPage);\n+\n+\t\t\t\treturn Array.from({ length: totalPages }, (_, i) => ({\n+\t\t\t\t\tname: `Page ${i + 1}`,\n+\t\t\t\t\tvalue: i + 1,\n+\t\t\t\t}));\n+\t\t\t},\n+\t\t},\n+\t};\n+\n+\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {",
    "repo_full_name": "n8n-io/n8n",
    "discussion_comments": [
      {
        "comment_id": "2046665081",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 14675,
        "pr_file": "packages/nodes-base/nodes/Contacts/Contacts.node.ts",
        "discussion_id": "2046665081",
        "commented_code": "@@ -0,0 +1,428 @@\n+import {\n+\tINodeType,\n+\tINodeTypeDescription,\n+\tIExecuteFunctions,\n+\tINodeExecutionData,\n+\tNodeConnectionType,\n+\tILoadOptionsFunctions,\n+} from 'n8n-workflow';\n+import { getDbConnection } from '@utils/db';\n+import moment = require('moment');\n+\n+export class Contacts implements INodeType {\n+\tdescription: INodeTypeDescription = {\n+\t\tdisplayName: 'Contact Filter Node',\n+\t\tname: 'contactFilterNode',\n+\t\tgroup: ['transform'],\n+\t\tversion: 1,\n+\t\tdescription: 'Filters data based on selected Contact Email and Contact Status.',\n+\t\tdefaults: {\n+\t\t\tname: 'Contact Filter Node',\n+\t\t\tcolor: '#1F72E5',\n+\t\t},\n+\t\tinputs: [NodeConnectionType.Main],\n+\t\toutputs: [NodeConnectionType.Main],\n+\t\tproperties: [\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Search Contact',\n+\t\t\t\tname: 'search',\n+\t\t\t\ttype: 'string',\n+\t\t\t\tplaceholder: 'Search Contact by Name & Email',\n+\t\t\t\trequired: false,\n+\t\t\t\tdefault: '',\n+\t\t\t\tdescription: 'Search Contact by Name and Email.',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Select Contact(s) Status',\n+\t\t\t\tname: 'status',\n+\t\t\t\ttype: 'multiOptions',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getContactStatus',\n+\t\t\t\t},\n+\t\t\t\trequired: false,\n+\t\t\t\tdefault: [],\n+\t\t\t\tdescription: 'Choose one or more contact status.',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Select Contact(s) Priority',\n+\t\t\t\tname: 'priority',\n+\t\t\t\ttype: 'multiOptions',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getContactPriority',\n+\t\t\t\t},\n+\t\t\t\trequired: false,\n+\t\t\t\tdefault: [],\n+\t\t\t\tdescription: 'Choose one or more contact priority.',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Select Contact(s) Labels',\n+\t\t\t\tname: 'label',\n+\t\t\t\ttype: 'multiOptions',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getContactLabels',\n+\t\t\t\t},\n+\t\t\t\trequired: false,\n+\t\t\t\tdefault: [],\n+\t\t\t\tdescription: 'Choose one or more contact labels.',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Select Contact(s) Source',\n+\t\t\t\tname: 'lead_source',\n+\t\t\t\ttype: 'multiOptions',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getContactSource',\n+\t\t\t\t},\n+\t\t\t\trequired: false,\n+\t\t\t\tdefault: [],\n+\t\t\t\tdescription: 'Choose one or more contact source.',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Select Contact(s) Type',\n+\t\t\t\tname: 'type',\n+\t\t\t\ttype: 'multiOptions',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getContactType',\n+\t\t\t\t},\n+\t\t\t\trequired: false,\n+\t\t\t\tdefault: [],\n+\t\t\t\tdescription: 'Choose one or more contact type.',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Created On',\n+\t\t\t\tname: 'createdOn',\n+\t\t\t\ttype: 'fixedCollection',\n+\t\t\t\tplaceholder: 'Select Date Range',\n+\t\t\t\tdescription: 'Choose a date range for when the contact was created.',\n+\t\t\t\tdefault: {},\n+\t\t\t\toptions: [\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'range',\n+\t\t\t\t\t\tdisplayName: 'Date Range',\n+\t\t\t\t\t\tvalues: [\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tdisplayName: 'From',\n+\t\t\t\t\t\t\t\tname: 'from',\n+\t\t\t\t\t\t\t\ttype: 'dateTime',\n+\t\t\t\t\t\t\t\trequired: false,\n+\t\t\t\t\t\t\t\tdefault: '',\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tdisplayName: 'To',\n+\t\t\t\t\t\t\t\tname: 'to',\n+\t\t\t\t\t\t\t\ttype: 'dateTime',\n+\t\t\t\t\t\t\t\trequired: false,\n+\t\t\t\t\t\t\t\tdefault: '',\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t],\n+\t\t\t\t\t},\n+\t\t\t\t],\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Last Activity',\n+\t\t\t\tname: 'lastActivity',\n+\t\t\t\ttype: 'fixedCollection',\n+\t\t\t\tplaceholder: 'Select Date Range',\n+\t\t\t\tdescription: 'Choose a date range for the last activity of the contact.',\n+\t\t\t\tdefault: {},\n+\t\t\t\toptions: [\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'range',\n+\t\t\t\t\t\tdisplayName: 'Date Range',\n+\t\t\t\t\t\tvalues: [\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tdisplayName: 'From',\n+\t\t\t\t\t\t\t\tname: 'from',\n+\t\t\t\t\t\t\t\ttype: 'dateTime',\n+\t\t\t\t\t\t\t\trequired: false,\n+\t\t\t\t\t\t\t\tdefault: '',\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tdisplayName: 'To',\n+\t\t\t\t\t\t\t\tname: 'to',\n+\t\t\t\t\t\t\t\ttype: 'dateTime',\n+\t\t\t\t\t\t\t\trequired: false,\n+\t\t\t\t\t\t\t\tdefault: '',\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t],\n+\t\t\t\t\t},\n+\t\t\t\t],\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Pages',\n+\t\t\t\tname: 'pages',\n+\t\t\t\ttype: 'options',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getTotalPages',\n+\t\t\t\t},\n+\t\t\t\trequired: false,\n+\t\t\t\tdefault: 1,\n+\t\t\t},\n+\t\t],\n+\t};\n+\n+\tmethods = {\n+\t\tloadOptions: {\n+\t\t\tasync getContactStatus() {\n+\t\t\t\treturn [\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Not Contacted',\n+\t\t\t\t\t\tvalue: 'not-contacted',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Contacted',\n+\t\t\t\t\t\tvalue: 'contacted',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Call Back',\n+\t\t\t\t\t\tvalue: 'call-back',\n+\t\t\t\t\t},\n+\t\t\t\t];\n+\t\t\t},\n+\n+\t\t\tasync getContactPriority() {\n+\t\t\t\treturn [\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: '5 Very High',\n+\t\t\t\t\t\tvalue: 'very-high',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: '4 High',\n+\t\t\t\t\t\tvalue: 'high',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: '3 Medium',\n+\t\t\t\t\t\tvalue: 'medium',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: '2 Low',\n+\t\t\t\t\t\tvalue: 'low',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: '1 Very Low',\n+\t\t\t\t\t\tvalue: 'very-low',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: '0 Not Enough Information',\n+\t\t\t\t\t\tvalue: 'no-enough-information',\n+\t\t\t\t\t},\n+\t\t\t\t];\n+\t\t\t},\n+\n+\t\t\tasync getContactLabels() {\n+\t\t\t\t// const connection = await getDbConnection();\n+\t\t\t\t// const [agents] = await connection.execute('SELECT id, email FROM customers_and_leads limit 30') as any[];\n+\t\t\t\t// return agents.map((agent: any) => ({\n+\t\t\t\t//     name: agent.email,\n+\t\t\t\t//     value: agent.id,\n+\t\t\t\t// }));\n+\t\t\t\treturn [\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'ITest',\n+\t\t\t\t\t\tvalue: 1,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'LTest',\n+\t\t\t\t\t\tvalue: 2,\n+\t\t\t\t\t},\n+\t\t\t\t];\n+\t\t\t},\n+\n+\t\t\tasync getContactSource() {\n+\t\t\t\treturn [\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'CSV',\n+\t\t\t\t\t\tvalue: 'csv',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Manual',\n+\t\t\t\t\t\tvalue: 'manual',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Sales Agent',\n+\t\t\t\t\t\tvalue: 'sales-agent',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Support Agent',\n+\t\t\t\t\t\tvalue: 'support-agent',\n+\t\t\t\t\t},\n+\t\t\t\t];\n+\t\t\t},\n+\n+\t\t\tasync getContactType() {\n+\t\t\t\treturn [\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Lead',\n+\t\t\t\t\t\tvalue: 'lead',\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tname: 'Customer',\n+\t\t\t\t\t\tvalue: 'contact',\n+\t\t\t\t\t},\n+\t\t\t\t];\n+\t\t\t},\n+\n+\t\t\tasync getTotalPages(this: ILoadOptionsFunctions) {\n+\t\t\t\tconst connection = await getDbConnection();\n+\t\t\t\tconst { rawQuery, recordsPerPage } = generatContactQuery(this);\n+\n+\t\t\t\tconst countQuery = `SELECT count(*) as totalRecords FROM (${rawQuery}) as temp`;\n+\n+\t\t\t\tconst [totalResult] = (await connection.execute(countQuery)) as any[];\n+\n+\t\t\t\tconst totalRecords = totalResult[0].totalRecords;\n+\t\t\t\tconst totalPages = Math.ceil(totalRecords / recordsPerPage);\n+\n+\t\t\t\treturn Array.from({ length: totalPages }, (_, i) => ({\n+\t\t\t\t\tname: `Page ${i + 1}`,\n+\t\t\t\t\tvalue: i + 1,\n+\t\t\t\t}));\n+\t\t\t},\n+\t\t},\n+\t};\n+\n+\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {",
        "comment_created_at": "2025-04-16T10:49:37+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "Database connection is opened but never closed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2046665098",
    "pr_number": 14675,
    "pr_file": "packages/nodes-base/nodes/SdrAgent/SdrAgent.node.ts",
    "created_at": "2025-04-16T10:49:37+00:00",
    "commented_code": "+import {\n+\tINodeType,\n+\tINodeTypeDescription,\n+\tILoadOptionsFunctions,\n+\tINodePropertyOptions,\n+\tIExecuteFunctions,\n+\tINodeExecutionData,\n+\tNodeConnectionType,\n+} from 'n8n-workflow';\n+import { getDbConnection } from '@utils/db';\n+\n+export class SdrAgent implements INodeType {\n+\tdescription: INodeTypeDescription = {\n+\t\tdisplayName: 'SDR Agent',\n+\t\tname: 'sdrAgent',\n+\t\tgroup: ['input'],\n+\t\tversion: 1,\n+\t\tdescription: 'Select an SDR Agent and Segment.',\n+\t\tdefaults: {\n+\t\t\tname: 'SDR Agent',\n+\t\t\tcolor: '#1F72E5',\n+\t\t},\n+\t\tinputs: [NodeConnectionType.Main],\n+\t\toutputs: [NodeConnectionType.Main],\n+\t\tproperties: [\n+\t\t\t{\n+\t\t\t\tdisplayName: 'SDR Agent',\n+\t\t\t\tname: 'sdrAgentId',\n+\t\t\t\ttype: 'options',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getSDRAgents',\n+\t\t\t\t},\n+\t\t\t\tdefault: '',\n+\t\t\t\tdescription: 'Select an SDR Agent',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Segment',\n+\t\t\t\tname: 'segmentId',\n+\t\t\t\ttype: 'options',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getSegments',\n+\t\t\t\t\tloadOptionsDependsOn: ['sdrAgentId'],\n+\t\t\t\t},\n+\t\t\t\tdefault: '',\n+\t\t\t\tdescription: 'Select a Segment',\n+\t\t\t},\n+\t\t],\n+\t};\n+\n+\tmethods = {\n+\t\tloadOptions: {\n+\t\t\tasync getSDRAgents(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n+\t\t\t\tconst objectInfo = Object.assign(this);\n+\t\t\t\tconst userId = objectInfo?.additionalData?.userId;\n+\t\t\t\tlet result: { name: string; value: number }[] = [];\n+\t\t\t\tif (userId) {\n+\t\t\t\t\tconst connection = await getDbConnection();",
    "repo_full_name": "n8n-io/n8n",
    "discussion_comments": [
      {
        "comment_id": "2046665098",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 14675,
        "pr_file": "packages/nodes-base/nodes/SdrAgent/SdrAgent.node.ts",
        "discussion_id": "2046665098",
        "commented_code": "@@ -0,0 +1,125 @@\n+import {\n+\tINodeType,\n+\tINodeTypeDescription,\n+\tILoadOptionsFunctions,\n+\tINodePropertyOptions,\n+\tIExecuteFunctions,\n+\tINodeExecutionData,\n+\tNodeConnectionType,\n+} from 'n8n-workflow';\n+import { getDbConnection } from '@utils/db';\n+\n+export class SdrAgent implements INodeType {\n+\tdescription: INodeTypeDescription = {\n+\t\tdisplayName: 'SDR Agent',\n+\t\tname: 'sdrAgent',\n+\t\tgroup: ['input'],\n+\t\tversion: 1,\n+\t\tdescription: 'Select an SDR Agent and Segment.',\n+\t\tdefaults: {\n+\t\t\tname: 'SDR Agent',\n+\t\t\tcolor: '#1F72E5',\n+\t\t},\n+\t\tinputs: [NodeConnectionType.Main],\n+\t\toutputs: [NodeConnectionType.Main],\n+\t\tproperties: [\n+\t\t\t{\n+\t\t\t\tdisplayName: 'SDR Agent',\n+\t\t\t\tname: 'sdrAgentId',\n+\t\t\t\ttype: 'options',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getSDRAgents',\n+\t\t\t\t},\n+\t\t\t\tdefault: '',\n+\t\t\t\tdescription: 'Select an SDR Agent',\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Segment',\n+\t\t\t\tname: 'segmentId',\n+\t\t\t\ttype: 'options',\n+\t\t\t\ttypeOptions: {\n+\t\t\t\t\tloadOptionsMethod: 'getSegments',\n+\t\t\t\t\tloadOptionsDependsOn: ['sdrAgentId'],\n+\t\t\t\t},\n+\t\t\t\tdefault: '',\n+\t\t\t\tdescription: 'Select a Segment',\n+\t\t\t},\n+\t\t],\n+\t};\n+\n+\tmethods = {\n+\t\tloadOptions: {\n+\t\t\tasync getSDRAgents(this: ILoadOptionsFunctions): Promise<INodePropertyOptions[]> {\n+\t\t\t\tconst objectInfo = Object.assign(this);\n+\t\t\t\tconst userId = objectInfo?.additionalData?.userId;\n+\t\t\t\tlet result: { name: string; value: number }[] = [];\n+\t\t\t\tif (userId) {\n+\t\t\t\t\tconst connection = await getDbConnection();",
        "comment_created_at": "2025-04-16T10:49:37+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "Database connection is not properly released after use, which can lead to connection leaks",
        "pr_file_module": null
      }
    ]
  }
]