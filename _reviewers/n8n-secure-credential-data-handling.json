[
  {
    "discussion_id": "2222683164",
    "pr_number": 17549,
    "pr_file": "packages/nodes-base/credentials/Kafka.credentials.ts",
    "created_at": "2025-07-22T14:15:47+00:00",
    "commented_code": "type: 'boolean',\n \t\t\tdefault: true,\n \t\t},\n+\t\t{\n+\t\t\tdisplayName: 'SSL CA',\n+\t\t\tname: 'sslCa',\n+\t\t\ttype: 'string',\n+\t\t\tdisplayOptions: {\n+\t\t\t\tshow: {\n+\t\t\t\t\tssl: [true],\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tdefault: '',\n+\t\t},\n+\t\t{\n+\t\t\tdisplayName: 'Ignore SSL Issues',\n+\t\t\tname: 'ignoreSslIssues',\n+\t\t\ttype: 'boolean',\n+\t\t\tdisplayOptions: {\n+\t\t\t\tshow: {\n+\t\t\t\t\tssl: [true],\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tdefault: false,\n+\t\t},\n+\t\t{\n+\t\t\tdisplayName: 'SSL Key',",
    "repo_full_name": "n8n-io/n8n",
    "discussion_comments": [
      {
        "comment_id": "2222683164",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 17549,
        "pr_file": "packages/nodes-base/credentials/Kafka.credentials.ts",
        "discussion_id": "2222683164",
        "commented_code": "@@ -29,6 +29,50 @@ export class Kafka implements ICredentialType {\n \t\t\ttype: 'boolean',\n \t\t\tdefault: true,\n \t\t},\n+\t\t{\n+\t\t\tdisplayName: 'SSL CA',\n+\t\t\tname: 'sslCa',\n+\t\t\ttype: 'string',\n+\t\t\tdisplayOptions: {\n+\t\t\t\tshow: {\n+\t\t\t\t\tssl: [true],\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tdefault: '',\n+\t\t},\n+\t\t{\n+\t\t\tdisplayName: 'Ignore SSL Issues',\n+\t\t\tname: 'ignoreSslIssues',\n+\t\t\ttype: 'boolean',\n+\t\t\tdisplayOptions: {\n+\t\t\t\tshow: {\n+\t\t\t\t\tssl: [true],\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tdefault: false,\n+\t\t},\n+\t\t{\n+\t\t\tdisplayName: 'SSL Key',",
        "comment_created_at": "2025-07-22T14:15:47+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":8,\"steps\":[{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"grep -R \\\"SSL Key\\\" -n packages/nodes-base/credentials | head\"},\"toolName\":\"executeCommand\"}]}]} -->\nSSL private key is exposed in plain text because `sslKey` is missing `typeOptions: { password: true }`, unlike other secret fields.\n\n<details>\n<summary>Prompt for AI agents</summary>\n\n```\nAddress the following comment on packages/nodes-base/credentials/Kafka.credentials.ts at line 55:\n\n<comment>SSL private key is exposed in plain text because `sslKey` is missing `typeOptions: { password: true }`, unlike other secret fields.</comment>\n\n<file context>\n@@ -29,6 +29,50 @@ export class Kafka implements ICredentialType {\n \t\t\ttype: &#39;boolean&#39;,\n \t\t\tdefault: true,\n \t\t},\n+\t\t{\n+\t\t\tdisplayName: &#39;SSL CA&#39;,\n+\t\t\tname: &#39;sslCa&#39;,\n+\t\t\ttype: &#39;string&#39;,\n+\t\t\tdisplayOptions: {\n+\t\t\t\tshow: {\n</file context>\n```\n\n</details>",
        "pr_file_module": null
      },
      {
        "comment_id": "2222702506",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 17549,
        "pr_file": "packages/nodes-base/credentials/Kafka.credentials.ts",
        "discussion_id": "2222683164",
        "commented_code": "@@ -29,6 +29,50 @@ export class Kafka implements ICredentialType {\n \t\t\ttype: 'boolean',\n \t\t\tdefault: true,\n \t\t},\n+\t\t{\n+\t\t\tdisplayName: 'SSL CA',\n+\t\t\tname: 'sslCa',\n+\t\t\ttype: 'string',\n+\t\t\tdisplayOptions: {\n+\t\t\t\tshow: {\n+\t\t\t\t\tssl: [true],\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tdefault: '',\n+\t\t},\n+\t\t{\n+\t\t\tdisplayName: 'Ignore SSL Issues',\n+\t\t\tname: 'ignoreSslIssues',\n+\t\t\ttype: 'boolean',\n+\t\t\tdisplayOptions: {\n+\t\t\t\tshow: {\n+\t\t\t\t\tssl: [true],\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tdefault: false,\n+\t\t},\n+\t\t{\n+\t\t\tdisplayName: 'SSL Key',",
        "comment_created_at": "2025-07-22T14:21:37+00:00",
        "comment_author": "TheDevMinerTV",
        "comment_body": "good catch, thanks",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2212455723",
    "pr_number": 14947,
    "pr_file": "packages/nodes-base/nodes/Kafka/Kafka.node.ts",
    "created_at": "2025-07-17T06:57:35+00:00",
    "commented_code": "default: '',\n \t\t\t\tdescription: 'URL of the schema registry',\n \t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Schema Registry Auth Username',\n+\t\t\t\tname: 'schemaRegistryUsername',\n+\t\t\t\ttype: 'string',\n+\t\t\t\tdefault: '',\n+\t\t\t\tplaceholder: 'username',\n+\t\t\t\tdescription: 'Username for HTTP Basic Auth to access the Schema Registry (optional)',\n+\t\t\t\tdisplayOptions: {\n+\t\t\t\t\tshow: {\n+\t\t\t\t\t\tuseSchemaRegistry: [true],\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Schema Registry Auth Password',\n+\t\t\t\tname: 'schemaRegistryPassword',",
    "repo_full_name": "n8n-io/n8n",
    "discussion_comments": [
      {
        "comment_id": "2212455723",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 14947,
        "pr_file": "packages/nodes-base/nodes/Kafka/Kafka.node.ts",
        "discussion_id": "2212455723",
        "commented_code": "@@ -92,6 +92,35 @@ export class Kafka implements INodeType {\n \t\t\t\tdefault: '',\n \t\t\t\tdescription: 'URL of the schema registry',\n \t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Schema Registry Auth Username',\n+\t\t\t\tname: 'schemaRegistryUsername',\n+\t\t\t\ttype: 'string',\n+\t\t\t\tdefault: '',\n+\t\t\t\tplaceholder: 'username',\n+\t\t\t\tdescription: 'Username for HTTP Basic Auth to access the Schema Registry (optional)',\n+\t\t\t\tdisplayOptions: {\n+\t\t\t\t\tshow: {\n+\t\t\t\t\t\tuseSchemaRegistry: [true],\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tdisplayName: 'Schema Registry Auth Password',\n+\t\t\t\tname: 'schemaRegistryPassword',",
        "comment_created_at": "2025-07-17T06:57:35+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":6,\"steps\":[]} -->\nThe schema-registry password is stored as a plain string node parameter, which is persisted unencrypted in the workflow JSON. Sensitive data should be handled via a credential type so that n8n can encrypt it at rest.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2046665029",
    "pr_number": 14675,
    "pr_file": "packages/@n8n/config/src/configs/database.config.ts",
    "created_at": "2025-04-16T10:49:35+00:00",
    "commented_code": "class MysqlConfig {\n \t/** @deprecated MySQL database name */\n \t@Env('DB_MYSQLDB_DATABASE')\n-\tdatabase: string = 'n8n';\n+\tdatabase: string = 'ciara_production';\n \n \t/** MySQL database host */\n \t@Env('DB_MYSQLDB_HOST')\n \thost: string = 'localhost';\n \n \t/** MySQL database password */\n \t@Env('DB_MYSQLDB_PASSWORD')\n-\tpassword: string = '';\n+\tpassword: string = 'admin';",
    "repo_full_name": "n8n-io/n8n",
    "discussion_comments": [
      {
        "comment_id": "2046665029",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 14675,
        "pr_file": "packages/@n8n/config/src/configs/database.config.ts",
        "discussion_id": "2046665029",
        "commented_code": "@@ -87,15 +87,15 @@ class PostgresConfig {\n class MysqlConfig {\n \t/** @deprecated MySQL database name */\n \t@Env('DB_MYSQLDB_DATABASE')\n-\tdatabase: string = 'n8n';\n+\tdatabase: string = 'ciara_production';\n \n \t/** MySQL database host */\n \t@Env('DB_MYSQLDB_HOST')\n \thost: string = 'localhost';\n \n \t/** MySQL database password */\n \t@Env('DB_MYSQLDB_PASSWORD')\n-\tpassword: string = '';\n+\tpassword: string = 'admin';",
        "comment_created_at": "2025-04-16T10:49:35+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "Hardcoded database password in source code exposes sensitive credentials",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2160197023",
    "pr_number": 16591,
    "pr_file": "packages/cli/src/services/redis-client.service.ts",
    "created_at": "2025-06-22T01:38:25+00:00",
    "commented_code": "const clusterNodes = this.clusterNodes();\n \n-\t\tconst clusterClient = new ioRedis.Cluster(clusterNodes, {\n+\t\tconst clusterOptions: ClusterOptions = {\n \t\t\tredisOptions: options,\n \t\t\tclusterRetryStrategy: this.retryStrategy(),\n-\t\t});\n+\t\t};\n+\n+\t\t// Check if any of the nodes look like an AWS ElastiCache Serverless endpoint.\n+\t\t// e.g. \"my-cluster.xxxxxx.serverless.us-east-1.cache.amazonaws.com\"\n+\t\tconst isElasticacheServerless = clusterNodes.some((node) =>\n+\t\t\t/\\.serverless\\.[^.]+\\.cache\\.amazonaws\\.com(\\.cn)?$/.test(node.host),\n+\t\t);\n+\n+\t\tif (isElasticacheServerless) {\n+\t\t\tthis.logger.debug('AWS ElastiCache Serverless endpoint detected, applying specific config');\n+\t\t\tclusterOptions.dnsLookup = (address, callback) => callback(null, address);\n+\t\t\tif (clusterOptions.redisOptions) {\n+\t\t\t\tclusterOptions.redisOptions.tls = {};",
    "repo_full_name": "n8n-io/n8n",
    "discussion_comments": [
      {
        "comment_id": "2160197023",
        "repo_full_name": "n8n-io/n8n",
        "pr_number": 16591,
        "pr_file": "packages/cli/src/services/redis-client.service.ts",
        "discussion_id": "2160197023",
        "commented_code": "@@ -120,10 +120,26 @@ export class RedisClientService extends TypedEmitter<RedisEventMap> {\n \n \t\tconst clusterNodes = this.clusterNodes();\n \n-\t\tconst clusterClient = new ioRedis.Cluster(clusterNodes, {\n+\t\tconst clusterOptions: ClusterOptions = {\n \t\t\tredisOptions: options,\n \t\t\tclusterRetryStrategy: this.retryStrategy(),\n-\t\t});\n+\t\t};\n+\n+\t\t// Check if any of the nodes look like an AWS ElastiCache Serverless endpoint.\n+\t\t// e.g. \"my-cluster.xxxxxx.serverless.us-east-1.cache.amazonaws.com\"\n+\t\tconst isElasticacheServerless = clusterNodes.some((node) =>\n+\t\t\t/\\.serverless\\.[^.]+\\.cache\\.amazonaws\\.com(\\.cn)?$/.test(node.host),\n+\t\t);\n+\n+\t\tif (isElasticacheServerless) {\n+\t\t\tthis.logger.debug('AWS ElastiCache Serverless endpoint detected, applying specific config');\n+\t\t\tclusterOptions.dnsLookup = (address, callback) => callback(null, address);\n+\t\t\tif (clusterOptions.redisOptions) {\n+\t\t\t\tclusterOptions.redisOptions.tls = {};",
        "comment_created_at": "2025-06-22T01:38:25+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":7,\"steps\":[]} -->\nUnconditionally overwriting the existing `tls` object discards any user-supplied TLS options (e.g., certificates or `rejectUnauthorized`). This can silently disable important security settings or break connections that rely on custom TLS configuration.\n\n```suggestion\n\t\t\t\tclusterOptions.redisOptions.tls = clusterOptions.redisOptions.tls ?? {};\n```",
        "pr_file_module": null
      }
    ]
  }
]