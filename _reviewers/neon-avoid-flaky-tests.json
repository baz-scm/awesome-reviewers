[
  {
    "discussion_id": "2182397696",
    "pr_number": 12447,
    "pr_file": "test_runner/regress/test_lfc_prewarm.py",
    "created_at": "2025-07-03T10:08:46+00:00",
    "commented_code": "log.info(f\"Inserted {n_records} rows\")\n \n     http_client = endpoint.http_client()\n-    if query is LfcQueryMethod.COMPUTE_CTL:\n+    if query == QueryMethod.AUTOPREWARM:\n+        sleep(offload_secs + 1)",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2182397696",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12447,
        "pr_file": "test_runner/regress/test_lfc_prewarm.py",
        "discussion_id": "2182397696",
        "commented_code": "@@ -70,16 +75,21 @@ def test_lfc_prewarm(neon_simple_env: NeonEnv, query: LfcQueryMethod):\n     log.info(f\"Inserted {n_records} rows\")\n \n     http_client = endpoint.http_client()\n-    if query is LfcQueryMethod.COMPUTE_CTL:\n+    if query == QueryMethod.AUTOPREWARM:\n+        sleep(offload_secs + 1)",
        "comment_created_at": "2025-07-03T10:08:46+00:00",
        "comment_author": "ololobus",
        "comment_body": "Any sleep-based waiting in tests almost certainly causes flakiness. Please, rewrite it into waiting for the LFC content to appear in the remote storage. There is a generic helper in python tests for that -- `wait_until()`, see usage in other tests",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2074200431",
    "pr_number": 11550,
    "pr_file": "test_runner/regress/test_lfc_prewarm.py",
    "created_at": "2025-05-05T21:04:18+00:00",
    "commented_code": "cur.execute(\"create extension neon version '1.6'\")\n     cur.execute(\"create table t(pk integer primary key, payload text default repeat('?', 128))\")\n     cur.execute(f\"insert into t (pk) values (generate_series(1,{n_records}))\")\n-    cur.execute(\"select get_local_cache_state()\")\n-    lfc_state = cur.fetchall()[0][0]\n+\n+    http_client = endpoint.http_client()\n+    if query == LfcQueryMethod.COMPUTE_CTL:\n+        status = http_client.prewarm_lfc_status()\n+        assert status[\"status\"] == \"not_prewarmed\"\n+        assert \"error\" not in status\n+        http_client.offload_lfc()\n+        assert http_client.prewarm_lfc_status()[\"status\"] == \"not_prewarmed\"\n+        assert prom_parse(http_client) == {OFFLOAD_LABEL: 1, PREWARM_LABEL: 0}\n+    else:\n+        cur.execute(\"select get_local_cache_state()\")\n+        lfc_state = cur.fetchall()[0][0]\n \n     endpoint.stop()\n     endpoint.start()\n \n     conn = endpoint.connect()\n     cur = conn.cursor()\n-    time.sleep(1)  # wait until compute_ctl complete downgrade of extension to default version\n+    # wait until compute_ctl complete downgrade of extension to default version\n+    time.sleep(1)\n     cur.execute(\"alter extension neon update to '1.6'\")",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2074200431",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "test_runner/regress/test_lfc_prewarm.py",
        "discussion_id": "2074200431",
        "commented_code": "@@ -39,25 +61,42 @@ def test_lfc_prewarm(neon_simple_env: NeonEnv):\n     cur.execute(\"create extension neon version '1.6'\")\n     cur.execute(\"create table t(pk integer primary key, payload text default repeat('?', 128))\")\n     cur.execute(f\"insert into t (pk) values (generate_series(1,{n_records}))\")\n-    cur.execute(\"select get_local_cache_state()\")\n-    lfc_state = cur.fetchall()[0][0]\n+\n+    http_client = endpoint.http_client()\n+    if query == LfcQueryMethod.COMPUTE_CTL:\n+        status = http_client.prewarm_lfc_status()\n+        assert status[\"status\"] == \"not_prewarmed\"\n+        assert \"error\" not in status\n+        http_client.offload_lfc()\n+        assert http_client.prewarm_lfc_status()[\"status\"] == \"not_prewarmed\"\n+        assert prom_parse(http_client) == {OFFLOAD_LABEL: 1, PREWARM_LABEL: 0}\n+    else:\n+        cur.execute(\"select get_local_cache_state()\")\n+        lfc_state = cur.fetchall()[0][0]\n \n     endpoint.stop()\n     endpoint.start()\n \n     conn = endpoint.connect()\n     cur = conn.cursor()\n-    time.sleep(1)  # wait until compute_ctl complete downgrade of extension to default version\n+    # wait until compute_ctl complete downgrade of extension to default version\n+    time.sleep(1)\n     cur.execute(\"alter extension neon update to '1.6'\")",
        "comment_created_at": "2025-05-05T21:04:18+00:00",
        "comment_author": "tristan957",
        "comment_body": "I know this wasn't added in this PR, but this is a flaky test waiting to happen. I suggest using a database other than the `postgres` database for this test.",
        "pr_file_module": null
      },
      {
        "comment_id": "2074201139",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "test_runner/regress/test_lfc_prewarm.py",
        "discussion_id": "2074200431",
        "commented_code": "@@ -39,25 +61,42 @@ def test_lfc_prewarm(neon_simple_env: NeonEnv):\n     cur.execute(\"create extension neon version '1.6'\")\n     cur.execute(\"create table t(pk integer primary key, payload text default repeat('?', 128))\")\n     cur.execute(f\"insert into t (pk) values (generate_series(1,{n_records}))\")\n-    cur.execute(\"select get_local_cache_state()\")\n-    lfc_state = cur.fetchall()[0][0]\n+\n+    http_client = endpoint.http_client()\n+    if query == LfcQueryMethod.COMPUTE_CTL:\n+        status = http_client.prewarm_lfc_status()\n+        assert status[\"status\"] == \"not_prewarmed\"\n+        assert \"error\" not in status\n+        http_client.offload_lfc()\n+        assert http_client.prewarm_lfc_status()[\"status\"] == \"not_prewarmed\"\n+        assert prom_parse(http_client) == {OFFLOAD_LABEL: 1, PREWARM_LABEL: 0}\n+    else:\n+        cur.execute(\"select get_local_cache_state()\")\n+        lfc_state = cur.fetchall()[0][0]\n \n     endpoint.stop()\n     endpoint.start()\n \n     conn = endpoint.connect()\n     cur = conn.cursor()\n-    time.sleep(1)  # wait until compute_ctl complete downgrade of extension to default version\n+    # wait until compute_ctl complete downgrade of extension to default version\n+    time.sleep(1)\n     cur.execute(\"alter extension neon update to '1.6'\")",
        "comment_created_at": "2025-05-05T21:04:52+00:00",
        "comment_author": "tristan957",
        "comment_body": "Feel free to fix it in a subsequent PR.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1989347146",
    "pr_number": 10312,
    "pr_file": "test_runner/regress/test_lfc_prewarm.py",
    "created_at": "2025-03-11T14:00:25+00:00",
    "commented_code": "+import time\n+\n+from fixtures.log_helper import log\n+from fixtures.neon_fixtures import NeonEnv\n+from fixtures.utils import USE_LFC\n+\n+\n+def test_lfc_prewarm(neon_simple_env: NeonEnv):\n+    if not USE_LFC:\n+        return",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "1989347146",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 10312,
        "pr_file": "test_runner/regress/test_lfc_prewarm.py",
        "discussion_id": "1989347146",
        "commented_code": "@@ -0,0 +1,56 @@\n+import time\n+\n+from fixtures.log_helper import log\n+from fixtures.neon_fixtures import NeonEnv\n+from fixtures.utils import USE_LFC\n+\n+\n+def test_lfc_prewarm(neon_simple_env: NeonEnv):\n+    if not USE_LFC:\n+        return",
        "comment_created_at": "2025-03-11T14:00:25+00:00",
        "comment_author": "myrrc",
        "comment_body": "```suggestion\r\n@pytest.mark.skipif(not USE_LFC)\r\ndef test_lfc_prewarm(neon_simple_env: NeonEnv):\r\n```",
        "pr_file_module": null
      }
    ]
  }
]