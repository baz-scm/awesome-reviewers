[
  {
    "discussion_id": "2182140533",
    "pr_number": 12450,
    "pr_file": "libs/postgres_versioninfo/src/lib.rs",
    "created_at": "2025-07-03T08:06:23+00:00",
    "commented_code": "impl Display for PgMajorVersion {\n     fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {\n         f.write_str(match self {\n-            PgMajorVersion::PG14 => \"PgMajorVersion::PG14\",\n-            PgMajorVersion::PG15 => \"PgMajorVersion::PG15\",\n-            PgMajorVersion::PG16 => \"PgMajorVersion::PG16\",\n-            PgMajorVersion::PG17 => \"PgMajorVersion::PG17\",\n+            PgMajorVersion::PG14 => \"14\",\n+            PgMajorVersion::PG15 => \"15\",\n+            PgMajorVersion::PG16 => \"16\",\n+            PgMajorVersion::PG17 => \"17\",",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2182140533",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12450,
        "pr_file": "libs/postgres_versioninfo/src/lib.rs",
        "discussion_id": "2182140533",
        "commented_code": "@@ -113,10 +113,10 @@ impl PgMajorVersion {\n impl Display for PgMajorVersion {\n     fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {\n         f.write_str(match self {\n-            PgMajorVersion::PG14 => \"PgMajorVersion::PG14\",\n-            PgMajorVersion::PG15 => \"PgMajorVersion::PG15\",\n-            PgMajorVersion::PG16 => \"PgMajorVersion::PG16\",\n-            PgMajorVersion::PG17 => \"PgMajorVersion::PG17\",\n+            PgMajorVersion::PG14 => \"14\",\n+            PgMajorVersion::PG15 => \"15\",\n+            PgMajorVersion::PG16 => \"16\",\n+            PgMajorVersion::PG17 => \"17\",",
        "comment_created_at": "2025-07-03T08:06:23+00:00",
        "comment_author": "MMeent",
        "comment_body": "I don't like using plain numbers for something that is more than just that plain number, unless context makes it abundantly clear. As Display doesn't guarantee context, the value of each type was clarified by adding the full enum tag to Display output.\r\n\r\nInstead of neutering the Display implementation, I think it's better to fix the clap usage so that it doesn't rely on `Display` for serializing strings - we implement Serialize and Deserialize for those purposes.",
        "pr_file_module": null
      },
      {
        "comment_id": "2182930417",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12450,
        "pr_file": "libs/postgres_versioninfo/src/lib.rs",
        "discussion_id": "2182140533",
        "commented_code": "@@ -113,10 +113,10 @@ impl PgMajorVersion {\n impl Display for PgMajorVersion {\n     fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {\n         f.write_str(match self {\n-            PgMajorVersion::PG14 => \"PgMajorVersion::PG14\",\n-            PgMajorVersion::PG15 => \"PgMajorVersion::PG15\",\n-            PgMajorVersion::PG16 => \"PgMajorVersion::PG16\",\n-            PgMajorVersion::PG17 => \"PgMajorVersion::PG17\",\n+            PgMajorVersion::PG14 => \"14\",\n+            PgMajorVersion::PG15 => \"15\",\n+            PgMajorVersion::PG16 => \"16\",\n+            PgMajorVersion::PG17 => \"17\",",
        "comment_created_at": "2025-07-03T14:23:59+00:00",
        "comment_author": "trungda",
        "comment_body": "Agree! Makes sense. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2162058209",
    "pr_number": 11803,
    "pr_file": "libs/utils/src/lsn.rs",
    "created_at": "2025-06-23T16:52:36+00:00",
    "commented_code": "#[derive(Clone, Copy, Default, Eq, Ord, PartialEq, PartialOrd, Hash)]\n pub struct Lsn(pub u64);\n \n+/// Size of a Postgres WAL segment.  These are always small enough to fit in a u32.\n+pub type SegmentSize = u32;",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2162058209",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11803,
        "pr_file": "libs/utils/src/lsn.rs",
        "discussion_id": "2162058209",
        "commented_code": "@@ -17,6 +17,9 @@ pub const XLOG_BLCKSZ: u32 = 8192;\n #[derive(Clone, Copy, Default, Eq, Ord, PartialEq, PartialOrd, Hash)]\n pub struct Lsn(pub u64);\n \n+/// Size of a Postgres WAL segment.  These are always small enough to fit in a u32.\n+pub type SegmentSize = u32;",
        "comment_created_at": "2025-06-23T16:52:36+00:00",
        "comment_author": "MMeent",
        "comment_body": "Please rename this to `WalSegmentSize`. \r\n\r\nPostgreSQL stores data files in Segments of 1GB increments, which makes this value confusing.",
        "pr_file_module": null
      },
      {
        "comment_id": "2166768954",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11803,
        "pr_file": "libs/utils/src/lsn.rs",
        "discussion_id": "2162058209",
        "commented_code": "@@ -17,6 +17,9 @@ pub const XLOG_BLCKSZ: u32 = 8192;\n #[derive(Clone, Copy, Default, Eq, Ord, PartialEq, PartialOrd, Hash)]\n pub struct Lsn(pub u64);\n \n+/// Size of a Postgres WAL segment.  These are always small enough to fit in a u32.\n+pub type SegmentSize = u32;",
        "comment_created_at": "2025-06-25T13:48:34+00:00",
        "comment_author": "jcsp",
        "comment_body": "Sure - renamed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2150847086",
    "pr_number": 12153,
    "pr_file": "compute_tools/src/lib.rs",
    "created_at": "2025-06-16T20:44:35+00:00",
    "commented_code": "mod migration;\n pub mod monitor;\n pub mod params;\n+pub mod pg_bouncer;",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2150847086",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12153,
        "pr_file": "compute_tools/src/lib.rs",
        "discussion_id": "2150847086",
        "commented_code": "@@ -21,6 +21,7 @@ pub mod metrics;\n mod migration;\n pub mod monitor;\n pub mod params;\n+pub mod pg_bouncer;",
        "comment_created_at": "2025-06-16T20:44:35+00:00",
        "comment_author": "tristan957",
        "comment_body": "One last comment. It is `pgbouncer`. That's the name of the binary. Using the correct name makes it easier to search and find references.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2129474051",
    "pr_number": 12138,
    "pr_file": "control_plane/src/safekeeper.rs",
    "created_at": "2025-06-05T17:27:37+00:00",
    "commented_code": "pub pg_connection_config: PgConnectionConfig,\n     pub env: LocalEnv,\n-    pub http_client: reqwest::Client,\n+    pub http_client: mgmt_api::Client,",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2129474051",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12138,
        "pr_file": "control_plane/src/safekeeper.rs",
        "discussion_id": "2129474051",
        "commented_code": "@@ -70,9 +58,8 @@ pub struct SafekeeperNode {\n \n     pub pg_connection_config: PgConnectionConfig,\n     pub env: LocalEnv,\n-    pub http_client: reqwest::Client,\n+    pub http_client: mgmt_api::Client,",
        "comment_created_at": "2025-06-05T17:27:37+00:00",
        "comment_author": "DimasKovas",
        "comment_body": "nit: it's not HTTP client anymore. just `client` sounds fine to me",
        "pr_file_module": null
      },
      {
        "comment_id": "2129767801",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12138,
        "pr_file": "control_plane/src/safekeeper.rs",
        "discussion_id": "2129474051",
        "commented_code": "@@ -70,9 +58,8 @@ pub struct SafekeeperNode {\n \n     pub pg_connection_config: PgConnectionConfig,\n     pub env: LocalEnv,\n-    pub http_client: reqwest::Client,\n+    pub http_client: mgmt_api::Client,",
        "comment_created_at": "2025-06-05T18:34:01+00:00",
        "comment_author": "arpad-m",
        "comment_body": "`PageserverNode` calls it that way as well, let's stay consistent.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2085208041",
    "pr_number": 11821,
    "pr_file": "libs/posthog_client_lite/src/lib.rs",
    "created_at": "2025-05-12T18:18:26+00:00",
    "commented_code": "+//! A lite version of the PostHog client that only supports local evaluation of feature flags.\n+\n+use std::{collections::HashMap, sync::Arc};\n+\n+use serde::{Deserialize, Serialize};\n+use serde_json::json;\n+use sha2::Digest;\n+\n+#[derive(Debug, thiserror::Error)]\n+pub enum PostHogEvaluationError {\n+    /// The feature flag is not available, for example, because the local evaluation data is not populated yet.\n+    #[error(\"Feature flag not available: {0}\")]\n+    NotAvailable(&'static str),\n+    #[error(\"No condition group is matched\")]\n+    NoConditionGroupMatched,\n+    /// Real errors, e.g., the rollout percentage does not add up to 100.\n+    #[error(\"Failed to evaluate feature flag: {0}\")]\n+    Internal(&'static str),\n+}\n+\n+#[derive(Deserialize)]\n+pub struct PostHogLocalEvaluationResponse {\n+    #[allow(dead_code)]\n+    flags: Vec<PostHogLocalEvaluationFlag>,\n+}\n+\n+#[derive(Deserialize)]\n+pub struct PostHogLocalEvaluationFlag {\n+    key: String,\n+    filters: PostHogLocalEvaluationFlagFilters,\n+    active: bool,\n+}\n+\n+#[derive(Deserialize)]\n+pub struct PostHogLocalEvaluationFlagFilters {",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2085208041",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11821,
        "pr_file": "libs/posthog_client_lite/src/lib.rs",
        "discussion_id": "2085208041",
        "commented_code": "@@ -0,0 +1,616 @@\n+//! A lite version of the PostHog client that only supports local evaluation of feature flags.\n+\n+use std::{collections::HashMap, sync::Arc};\n+\n+use serde::{Deserialize, Serialize};\n+use serde_json::json;\n+use sha2::Digest;\n+\n+#[derive(Debug, thiserror::Error)]\n+pub enum PostHogEvaluationError {\n+    /// The feature flag is not available, for example, because the local evaluation data is not populated yet.\n+    #[error(\"Feature flag not available: {0}\")]\n+    NotAvailable(&'static str),\n+    #[error(\"No condition group is matched\")]\n+    NoConditionGroupMatched,\n+    /// Real errors, e.g., the rollout percentage does not add up to 100.\n+    #[error(\"Failed to evaluate feature flag: {0}\")]\n+    Internal(&'static str),\n+}\n+\n+#[derive(Deserialize)]\n+pub struct PostHogLocalEvaluationResponse {\n+    #[allow(dead_code)]\n+    flags: Vec<PostHogLocalEvaluationFlag>,\n+}\n+\n+#[derive(Deserialize)]\n+pub struct PostHogLocalEvaluationFlag {\n+    key: String,\n+    filters: PostHogLocalEvaluationFlagFilters,\n+    active: bool,\n+}\n+\n+#[derive(Deserialize)]\n+pub struct PostHogLocalEvaluationFlagFilters {",
        "comment_created_at": "2025-05-12T18:18:26+00:00",
        "comment_author": "DimasKovas",
        "comment_body": "nit: technically, we already have `posthog` in lib name, probably it's not worth it to add `PostHog` to every class name. E.g. for the client I'm OK with `PostHogClient`, because there are too many `Client`s already. But for those structs the name is already pretty long and unique.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2066726528",
    "pr_number": 11550,
    "pr_file": "control_plane/src/endpoint.rs",
    "created_at": "2025-04-29T14:40:22+00:00",
    "commented_code": "pub async fn start(\n         &self,\n         auth_token: &Option<String>,\n+        endpoint_storage_auth_token: String,",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2066726528",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "control_plane/src/endpoint.rs",
        "discussion_id": "2066726528",
        "commented_code": "@@ -640,6 +640,8 @@ impl Endpoint {\n     pub async fn start(\n         &self,\n         auth_token: &Option<String>,\n+        endpoint_storage_auth_token: String,",
        "comment_created_at": "2025-04-29T14:40:22+00:00",
        "comment_author": "tristan957",
        "comment_body": "Please be consistent about either `endpoint_storage_auth_token` or `endpoint_storage_token`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2071431795",
    "pr_number": 11550,
    "pr_file": "compute_tools/src/http/routes/prewarm_lfc.rs",
    "created_at": "2025-05-02T10:42:42+00:00",
    "commented_code": "+use crate::compute::{ComputeNode, EndpointStoragePair, PrewarmStatus};\n+use axum::response::{IntoResponse, Response};\n+use axum::{Json, http::StatusCode};\n+use compute_api::responses::PrewarmOffloadState;\n+use std::sync::Arc;\n+use tracing::error;\n+\n+type State = axum::extract::State<Arc<ComputeNode>>;\n+\n+impl axum::extract::FromRequestParts<Arc<ComputeNode>> for EndpointStoragePair {\n+    type Rejection = Response;\n+    async fn from_request_parts(\n+        _: &mut http::request::Parts,\n+        state: &Arc<ComputeNode>,",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2071431795",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/http/routes/prewarm_lfc.rs",
        "discussion_id": "2071431795",
        "commented_code": "@@ -0,0 +1,49 @@\n+use crate::compute::{ComputeNode, EndpointStoragePair, PrewarmStatus};\n+use axum::response::{IntoResponse, Response};\n+use axum::{Json, http::StatusCode};\n+use compute_api::responses::PrewarmOffloadState;\n+use std::sync::Arc;\n+use tracing::error;\n+\n+type State = axum::extract::State<Arc<ComputeNode>>;\n+\n+impl axum::extract::FromRequestParts<Arc<ComputeNode>> for EndpointStoragePair {\n+    type Rejection = Response;\n+    async fn from_request_parts(\n+        _: &mut http::request::Parts,\n+        state: &Arc<ComputeNode>,",
        "comment_created_at": "2025-05-02T10:42:42+00:00",
        "comment_author": "ololobus",
        "comment_body": "NIT, but it impacts readability a lot -- `state.state` -- what state of what state? I suggest making it more clear\r\n\r\n```suggestion\r\n        compute: &Arc<ComputeNode>,\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2072613350",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/http/routes/prewarm_lfc.rs",
        "discussion_id": "2071431795",
        "commented_code": "@@ -0,0 +1,49 @@\n+use crate::compute::{ComputeNode, EndpointStoragePair, PrewarmStatus};\n+use axum::response::{IntoResponse, Response};\n+use axum::{Json, http::StatusCode};\n+use compute_api::responses::PrewarmOffloadState;\n+use std::sync::Arc;\n+use tracing::error;\n+\n+type State = axum::extract::State<Arc<ComputeNode>>;\n+\n+impl axum::extract::FromRequestParts<Arc<ComputeNode>> for EndpointStoragePair {\n+    type Rejection = Response;\n+    async fn from_request_parts(\n+        _: &mut http::request::Parts,\n+        state: &Arc<ComputeNode>,",
        "comment_created_at": "2025-05-04T13:03:17+00:00",
        "comment_author": "myrrc",
        "comment_body": "Fixed",
        "pr_file_module": null
      }
    ]
  }
]