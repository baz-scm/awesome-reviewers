[
  {
    "discussion_id": "2152559058",
    "pr_number": 12199,
    "pr_file": "test_runner/regress/test_sharding.py",
    "created_at": "2025-06-17T15:23:24+00:00",
    "commented_code": "# The split should appear to be rolled back from the point of view of all pageservers\n         # apart from the one that is offline\n+        env.storage_controller.reconcile_until_idle(timeout_secs=60, retry_on_failures=True)",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2152559058",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12199,
        "pr_file": "test_runner/regress/test_sharding.py",
        "discussion_id": "2152559058",
        "commented_code": "@@ -1468,6 +1455,7 @@ def finish_split():\n \n         # The split should appear to be rolled back from the point of view of all pageservers\n         # apart from the one that is offline\n+        env.storage_controller.reconcile_until_idle(timeout_secs=60, retry_on_failures=True)",
        "comment_created_at": "2025-06-17T15:23:24+00:00",
        "comment_author": "VladLazar",
        "comment_body": "Would be good to leave a comment about why `retry_on_failures` is required.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2071440628",
    "pr_number": 11550,
    "pr_file": "test_runner/regress/test_lfc_prewarm.py",
    "created_at": "2025-05-02T10:51:00+00:00",
    "commented_code": "assert cur.fetchall()[0][0] == n_records * (n_records + 1) / 2\n \n     check_pinned_entries(cur)\n+    if with_compute_ctl:\n+        desired = {\n+            \"status\": \"completed\",\n+            \"total\": total,\n+            \"prewarmed\": prewarmed,\n+            \"skipped\": skipped,\n+        }\n+        assert http_client.prewarm_lfc_status() == desired\n+        assert prom_parse(http_client) == {OFFLOAD_LABEL: 0, PREWARM_LABEL: 1}\n \n \n @pytest.mark.skipif(not USE_LFC, reason=\"LFC is disabled, skipping\")\n-def test_lfc_prewarm_under_workload(neon_simple_env: NeonEnv):\n+@pytest.mark.parametrize(\"with_compute_ctl\", [False, True], ids=[\"\", \"compute-ctl\"])\n+def test_lfc_prewarm_under_workload(neon_simple_env: NeonEnv, with_compute_ctl: bool):",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2071440628",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "test_runner/regress/test_lfc_prewarm.py",
        "discussion_id": "2071440628",
        "commented_code": "@@ -70,10 +136,20 @@ def test_lfc_prewarm(neon_simple_env: NeonEnv):\n     assert cur.fetchall()[0][0] == n_records * (n_records + 1) / 2\n \n     check_pinned_entries(cur)\n+    if with_compute_ctl:\n+        desired = {\n+            \"status\": \"completed\",\n+            \"total\": total,\n+            \"prewarmed\": prewarmed,\n+            \"skipped\": skipped,\n+        }\n+        assert http_client.prewarm_lfc_status() == desired\n+        assert prom_parse(http_client) == {OFFLOAD_LABEL: 0, PREWARM_LABEL: 1}\n \n \n @pytest.mark.skipif(not USE_LFC, reason=\"LFC is disabled, skipping\")\n-def test_lfc_prewarm_under_workload(neon_simple_env: NeonEnv):\n+@pytest.mark.parametrize(\"with_compute_ctl\", [False, True], ids=[\"\", \"compute-ctl\"])\n+def test_lfc_prewarm_under_workload(neon_simple_env: NeonEnv, with_compute_ctl: bool):",
        "comment_created_at": "2025-05-02T10:51:00+00:00",
        "comment_author": "ololobus",
        "comment_body": "Can you please add test comments clarifying what parameters mean and what are the different test modes? After quickly eyeballing the test, I cannot easily grasp the `with_compute_ctl` and why we pass `ids` as a test parameter",
        "pr_file_module": null
      },
      {
        "comment_id": "2071762099",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "test_runner/regress/test_lfc_prewarm.py",
        "discussion_id": "2071440628",
        "commented_code": "@@ -70,10 +136,20 @@ def test_lfc_prewarm(neon_simple_env: NeonEnv):\n     assert cur.fetchall()[0][0] == n_records * (n_records + 1) / 2\n \n     check_pinned_entries(cur)\n+    if with_compute_ctl:\n+        desired = {\n+            \"status\": \"completed\",\n+            \"total\": total,\n+            \"prewarmed\": prewarmed,\n+            \"skipped\": skipped,\n+        }\n+        assert http_client.prewarm_lfc_status() == desired\n+        assert prom_parse(http_client) == {OFFLOAD_LABEL: 0, PREWARM_LABEL: 1}\n \n \n @pytest.mark.skipif(not USE_LFC, reason=\"LFC is disabled, skipping\")\n-def test_lfc_prewarm_under_workload(neon_simple_env: NeonEnv):\n+@pytest.mark.parametrize(\"with_compute_ctl\", [False, True], ids=[\"\", \"compute-ctl\"])\n+def test_lfc_prewarm_under_workload(neon_simple_env: NeonEnv, with_compute_ctl: bool):",
        "comment_created_at": "2025-05-02T15:14:22+00:00",
        "comment_author": "tristan957",
        "comment_body": "Also, please don't use an empty string for an ID.",
        "pr_file_module": null
      },
      {
        "comment_id": "2072615619",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "test_runner/regress/test_lfc_prewarm.py",
        "discussion_id": "2071440628",
        "commented_code": "@@ -70,10 +136,20 @@ def test_lfc_prewarm(neon_simple_env: NeonEnv):\n     assert cur.fetchall()[0][0] == n_records * (n_records + 1) / 2\n \n     check_pinned_entries(cur)\n+    if with_compute_ctl:\n+        desired = {\n+            \"status\": \"completed\",\n+            \"total\": total,\n+            \"prewarmed\": prewarmed,\n+            \"skipped\": skipped,\n+        }\n+        assert http_client.prewarm_lfc_status() == desired\n+        assert prom_parse(http_client) == {OFFLOAD_LABEL: 0, PREWARM_LABEL: 1}\n \n \n @pytest.mark.skipif(not USE_LFC, reason=\"LFC is disabled, skipping\")\n-def test_lfc_prewarm_under_workload(neon_simple_env: NeonEnv):\n+@pytest.mark.parametrize(\"with_compute_ctl\", [False, True], ids=[\"\", \"compute-ctl\"])\n+def test_lfc_prewarm_under_workload(neon_simple_env: NeonEnv, with_compute_ctl: bool):",
        "comment_created_at": "2025-05-04T13:14:25+00:00",
        "comment_author": "myrrc",
        "comment_body": "Fixed",
        "pr_file_module": null
      }
    ]
  }
]