[
  {
    "discussion_id": "2158835646",
    "pr_number": 12307,
    "pr_file": "test_runner/regress/test_compute_profiling.py",
    "created_at": "2025-06-20T12:21:26+00:00",
    "commented_code": "+import threading\n+\n+from fixtures.endpoint.http import EndpointHttpClient\n+from fixtures.log_helper import log\n+from fixtures.neon_fixtures import NeonEnv\n+from google.protobuf.message import Message\n+\n+\n+def load_profile_pb2():\n+    import base64\n+    import hashlib\n+    import importlib.util\n+    import os\n+    import tempfile\n+\n+    import requests\n+\n+    # URL to profile_pb2.py\n+    PROFILE_PB2_URL = \"https://android.googlesource.com/platform/prebuilts/simpleperf/+/6d625d0eb9c0602532a52e8eb87363f2ea6da73e/profile_pb2.py?format=TEXT\"",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2158835646",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12307,
        "pr_file": "test_runner/regress/test_compute_profiling.py",
        "discussion_id": "2158835646",
        "commented_code": "@@ -0,0 +1,108 @@\n+import threading\n+\n+from fixtures.endpoint.http import EndpointHttpClient\n+from fixtures.log_helper import log\n+from fixtures.neon_fixtures import NeonEnv\n+from google.protobuf.message import Message\n+\n+\n+def load_profile_pb2():\n+    import base64\n+    import hashlib\n+    import importlib.util\n+    import os\n+    import tempfile\n+\n+    import requests\n+\n+    # URL to profile_pb2.py\n+    PROFILE_PB2_URL = \"https://android.googlesource.com/platform/prebuilts/simpleperf/+/6d625d0eb9c0602532a52e8eb87363f2ea6da73e/profile_pb2.py?format=TEXT\"",
        "comment_created_at": "2025-06-20T12:21:26+00:00",
        "comment_author": "myrrc",
        "comment_body": "We should vendor these changes once PR gets ready for review, downloading data from Internet in tests is a bad idea",
        "pr_file_module": null
      },
      {
        "comment_id": "2158851914",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12307,
        "pr_file": "test_runner/regress/test_compute_profiling.py",
        "discussion_id": "2158835646",
        "commented_code": "@@ -0,0 +1,108 @@\n+import threading\n+\n+from fixtures.endpoint.http import EndpointHttpClient\n+from fixtures.log_helper import log\n+from fixtures.neon_fixtures import NeonEnv\n+from google.protobuf.message import Message\n+\n+\n+def load_profile_pb2():\n+    import base64\n+    import hashlib\n+    import importlib.util\n+    import os\n+    import tempfile\n+\n+    import requests\n+\n+    # URL to profile_pb2.py\n+    PROFILE_PB2_URL = \"https://android.googlesource.com/platform/prebuilts/simpleperf/+/6d625d0eb9c0602532a52e8eb87363f2ea6da73e/profile_pb2.py?format=TEXT\"",
        "comment_created_at": "2025-06-20T12:30:17+00:00",
        "comment_author": "iddm",
        "comment_body": "Sure thing, I can commit this file into our tree. My initial idea was to use the up-to-date protobuf file all the time, and always check the hashsum of it so that it is secure. However, now, that it is pinned to a specific commit, vendoring it is actually better.",
        "pr_file_module": null
      },
      {
        "comment_id": "2160926372",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12307,
        "pr_file": "test_runner/regress/test_compute_profiling.py",
        "discussion_id": "2158835646",
        "commented_code": "@@ -0,0 +1,108 @@\n+import threading\n+\n+from fixtures.endpoint.http import EndpointHttpClient\n+from fixtures.log_helper import log\n+from fixtures.neon_fixtures import NeonEnv\n+from google.protobuf.message import Message\n+\n+\n+def load_profile_pb2():\n+    import base64\n+    import hashlib\n+    import importlib.util\n+    import os\n+    import tempfile\n+\n+    import requests\n+\n+    # URL to profile_pb2.py\n+    PROFILE_PB2_URL = \"https://android.googlesource.com/platform/prebuilts/simpleperf/+/6d625d0eb9c0602532a52e8eb87363f2ea6da73e/profile_pb2.py?format=TEXT\"",
        "comment_created_at": "2025-06-23T07:38:26+00:00",
        "comment_author": "iddm",
        "comment_body": "Vendored now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2191902780",
    "pr_number": 12496,
    "pr_file": "test_runner/performance/pageserver/pagebench/test_pageserver_max_throughput_getpage_at_latest_lsn.py",
    "created_at": "2025-07-08T08:57:56+00:00",
    "commented_code": "# configure cache sizes like in prod\n     page_cache_size = 16384\n     max_file_descriptors = 500000\n-    neon_env_builder.pageserver_config_override = (\n-        f\"page_cache_size={page_cache_size}; max_file_descriptors={max_file_descriptors}\"\n-    )\n+    neon_env_builder.pageserver_config_override = f\"page_cache_size={page_cache_size}; max_file_descriptors={max_file_descriptors}; disk_usage_based_eviction={{max_usage_pct=99, min_avail_bytes=0, period = '999y', enabled = false}}\"",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2191902780",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12496,
        "pr_file": "test_runner/performance/pageserver/pagebench/test_pageserver_max_throughput_getpage_at_latest_lsn.py",
        "discussion_id": "2191902780",
        "commented_code": "@@ -104,9 +111,7 @@ def record(metric, **kwargs):\n     # configure cache sizes like in prod\n     page_cache_size = 16384\n     max_file_descriptors = 500000\n-    neon_env_builder.pageserver_config_override = (\n-        f\"page_cache_size={page_cache_size}; max_file_descriptors={max_file_descriptors}\"\n-    )\n+    neon_env_builder.pageserver_config_override = f\"page_cache_size={page_cache_size}; max_file_descriptors={max_file_descriptors}; disk_usage_based_eviction={{max_usage_pct=99, min_avail_bytes=0, period = '999y', enabled = false}}\"",
        "comment_created_at": "2025-07-08T08:57:56+00:00",
        "comment_author": "DimasKovas",
        "comment_body": "Now I see why you didn't like \"enabled\" field :)\r\n\r\nLet's put `#[serde(default)]` on the whole `DiskUsageEvictionTaskConfig`, so all fields will be defaulted to values from `DiskUsageEvictionTaskConfig::default()`, and remove it from fields. Then `{enabled=false}` will be a valid config",
        "pr_file_module": null
      },
      {
        "comment_id": "2193060890",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12496,
        "pr_file": "test_runner/performance/pageserver/pagebench/test_pageserver_max_throughput_getpage_at_latest_lsn.py",
        "discussion_id": "2191902780",
        "commented_code": "@@ -104,9 +111,7 @@ def record(metric, **kwargs):\n     # configure cache sizes like in prod\n     page_cache_size = 16384\n     max_file_descriptors = 500000\n-    neon_env_builder.pageserver_config_override = (\n-        f\"page_cache_size={page_cache_size}; max_file_descriptors={max_file_descriptors}\"\n-    )\n+    neon_env_builder.pageserver_config_override = f\"page_cache_size={page_cache_size}; max_file_descriptors={max_file_descriptors}; disk_usage_based_eviction={{max_usage_pct=99, min_avail_bytes=0, period = '999y', enabled = false}}\"",
        "comment_created_at": "2025-07-08T17:22:36+00:00",
        "comment_author": "trungda",
        "comment_body": "updated. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2104761398",
    "pr_number": 11982,
    "pr_file": "test_runner/fixtures/neon_fixtures.py",
    "created_at": "2025-05-23T14:47:10+00:00",
    "commented_code": "return (\"tracing\", value)\n \n \n+@dataclass\n+class PageserverImportConfig:\n+    import_job_concurrency: int\n+    import_job_soft_size_limit: int\n+    import_job_checkpoint_threshold: int\n+\n+    @staticmethod\n+    def default() -> PageserverImportConfig:\n+        return PageserverImportConfig(\n+            import_job_concurrency=4,\n+            import_job_soft_size_limit=512 * 1024,\n+            import_job_checkpoint_threshold=4,\n+        )",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2104761398",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11982,
        "pr_file": "test_runner/fixtures/neon_fixtures.py",
        "discussion_id": "2104761398",
        "commented_code": "@@ -404,6 +404,29 @@ def to_config_key_value(self) -> tuple[str, dict[str, Any]]:\n         return (\"tracing\", value)\n \n \n+@dataclass\n+class PageserverImportConfig:\n+    import_job_concurrency: int\n+    import_job_soft_size_limit: int\n+    import_job_checkpoint_threshold: int\n+\n+    @staticmethod\n+    def default() -> PageserverImportConfig:\n+        return PageserverImportConfig(\n+            import_job_concurrency=4,\n+            import_job_soft_size_limit=512 * 1024,\n+            import_job_checkpoint_threshold=4,\n+        )",
        "comment_created_at": "2025-05-23T14:47:10+00:00",
        "comment_author": "problame",
        "comment_body": "Hm, I think this is a first: test suite defining its own config defaults.",
        "pr_file_module": null
      },
      {
        "comment_id": "2108747662",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11982,
        "pr_file": "test_runner/fixtures/neon_fixtures.py",
        "discussion_id": "2104761398",
        "commented_code": "@@ -404,6 +404,29 @@ def to_config_key_value(self) -> tuple[str, dict[str, Any]]:\n         return (\"tracing\", value)\n \n \n+@dataclass\n+class PageserverImportConfig:\n+    import_job_concurrency: int\n+    import_job_soft_size_limit: int\n+    import_job_checkpoint_threshold: int\n+\n+    @staticmethod\n+    def default() -> PageserverImportConfig:\n+        return PageserverImportConfig(\n+            import_job_concurrency=4,\n+            import_job_soft_size_limit=512 * 1024,\n+            import_job_checkpoint_threshold=4,\n+        )",
        "comment_created_at": "2025-05-27T09:49:40+00:00",
        "comment_author": "VladLazar",
        "comment_body": "The production defaults don't make sense for the test env.\r\nThis will likely become a tenant config at some point, so we can remove this oddity then.",
        "pr_file_module": null
      }
    ]
  }
]