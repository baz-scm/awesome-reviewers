[
  {
    "discussion_id": "2065796818",
    "pr_number": 11733,
    "pr_file": "compute/patches/anon_v2.patch",
    "created_at": "2025-04-29T08:37:07+00:00",
    "commented_code": "$$\n    LANGUAGE SQL\n    VOLATILE\n+@@ -264,3 +284,57 @@ $$\n+ ;\n+ \n+ SECURITY LABEL FOR anon ON FUNCTION anon.unload IS 'UNTRUSTED';\n++\n++\n++CREATE OR REPLACE FUNCTION anon.enable_transparent_masking_superuser(\n++  dbname TEXT\n++)\n++RETURNS VOID AS\n++$$\n++BEGIN\n++  EXECUTE format('ALTER DATABASE %I SET anon.transparent_dynamic_masking TO true', dbname);\n++END;\n++$$\n++  LANGUAGE plpgsql\n++  VOLATILE\n++  SECURITY DEFINER\n++  SET search_path=''\n++;",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2065796818",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11733,
        "pr_file": "compute/patches/anon_v2.patch",
        "discussion_id": "2065796818",
        "commented_code": "@@ -106,3 +106,61 @@ index 7da6553..23561c1 100644\n  $$\n    LANGUAGE SQL\n    VOLATILE\n+@@ -264,3 +284,57 @@ $$\n+ ;\n+ \n+ SECURITY LABEL FOR anon ON FUNCTION anon.unload IS 'UNTRUSTED';\n++\n++\n++CREATE OR REPLACE FUNCTION anon.enable_transparent_masking_superuser(\n++  dbname TEXT\n++)\n++RETURNS VOID AS\n++$$\n++BEGIN\n++  EXECUTE format('ALTER DATABASE %I SET anon.transparent_dynamic_masking TO true', dbname);\n++END;\n++$$\n++  LANGUAGE plpgsql\n++  VOLATILE\n++  SECURITY DEFINER\n++  SET search_path=''\n++;",
        "comment_created_at": "2025-04-29T08:37:07+00:00",
        "comment_author": "MMeent",
        "comment_body": "Did you consider providing a single function for this, like the following?\r\n\r\n```suggestion\r\n+CREATE OR REPLACE FUNCTION anon.enable_transparent_masking_superuser(\r\n+  dbname TEXT,\r\n+  toggle BOOL DEFAULT = true,\r\n+)\r\n+RETURNS VOID AS\r\n+$$\r\n+BEGIN\r\n+  EXECUTE format('ALTER DATABASE %I SET anon.transparent_dynamic_masking TO %L', dbname, toggle::text);\r\n+END;\r\n+$$\r\n+  LANGUAGE plpgsql\r\n+  VOLATILE\r\n+  SECURITY DEFINER\r\n+  SET search_path=''\r\n+;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2081213209",
    "pr_number": 11830,
    "pr_file": "pgxn/neon/walproposer.h",
    "created_at": "2025-05-09T08:39:40+00:00",
    "commented_code": "char\t   *neon_timeline;\n \n \t/*\n-\t * Comma-separated list of safekeepers, in the following format:\n-\t * host1:port1,host2:port2,host3:port3\n+\t * Comma-separated list of safekeeper connection strings",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2081213209",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11830,
        "pr_file": "pgxn/neon/walproposer.h",
        "discussion_id": "2081213209",
        "commented_code": "@@ -707,12 +707,11 @@ typedef struct WalProposerConfig\n \tchar\t   *neon_timeline;\n \n \t/*\n-\t * Comma-separated list of safekeepers, in the following format:\n-\t * host1:port1,host2:port2,host3:port3\n+\t * Comma-separated list of safekeeper connection strings",
        "comment_created_at": "2025-05-09T08:39:40+00:00",
        "comment_author": "dimitri",
        "comment_body": "Maybe it's worth explaining (quickly) why comma-separated list of connection strings make sense here also?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2151380218",
    "pr_number": 12266,
    "pr_file": "Makefile",
    "created_at": "2025-06-17T05:54:07+00:00",
    "commented_code": "PG_LDFLAGS = $(LDFLAGS)\n \t# Unfortunately, `--profile=...` is a nightly feature\n \tCARGO_BUILD_FLAGS += --release\n+\tNEON_CARGO_ARTIFACT_TARGET_DIR = $(ROOT_PROJECT_DIR)/target/release",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2151380218",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12266,
        "pr_file": "Makefile",
        "discussion_id": "2151380218",
        "commented_code": "@@ -18,10 +18,12 @@ ifeq ($(BUILD_TYPE),release)\n \tPG_LDFLAGS = $(LDFLAGS)\n \t# Unfortunately, `--profile=...` is a nightly feature\n \tCARGO_BUILD_FLAGS += --release\n+\tNEON_CARGO_ARTIFACT_TARGET_DIR = $(ROOT_PROJECT_DIR)/target/release",
        "comment_created_at": "2025-06-17T05:54:07+00:00",
        "comment_author": "erikgrinaker",
        "comment_body": "Bummer that there's no reliable way to get this from `cargo`. We could parse the `cargo metadata` output, but hardcoding it seems find until `cargo` provides a canonical way to detect this.",
        "pr_file_module": null
      },
      {
        "comment_id": "2151551136",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12266,
        "pr_file": "Makefile",
        "discussion_id": "2151380218",
        "commented_code": "@@ -18,10 +18,12 @@ ifeq ($(BUILD_TYPE),release)\n \tPG_LDFLAGS = $(LDFLAGS)\n \t# Unfortunately, `--profile=...` is a nightly feature\n \tCARGO_BUILD_FLAGS += --release\n+\tNEON_CARGO_ARTIFACT_TARGET_DIR = $(ROOT_PROJECT_DIR)/target/release",
        "comment_created_at": "2025-06-17T07:38:52+00:00",
        "comment_author": "iddm",
        "comment_body": "https://doc.rust-lang.org/cargo/reference/config.html#buildtarget\r\n\r\nYou can specify it, though. And if you want to make it consistent with cargo, specify the same exactly thing in both places :-) ",
        "pr_file_module": null
      },
      {
        "comment_id": "2151592009",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12266,
        "pr_file": "Makefile",
        "discussion_id": "2151380218",
        "commented_code": "@@ -18,10 +18,12 @@ ifeq ($(BUILD_TYPE),release)\n \tPG_LDFLAGS = $(LDFLAGS)\n \t# Unfortunately, `--profile=...` is a nightly feature\n \tCARGO_BUILD_FLAGS += --release\n+\tNEON_CARGO_ARTIFACT_TARGET_DIR = $(ROOT_PROJECT_DIR)/target/release",
        "comment_created_at": "2025-06-17T07:58:49+00:00",
        "comment_author": "hlinnaka",
        "comment_body": "`build.target` is different, it changes the target platform, if you want to e.g. cross-compile to a different architecture. `build.target-dir` allows changing the `target` directory's location, but it doesn't give the full path to the subdirectory within `target`, like `target/release` or `target/debug`. There doesn't seem to be any straightforward solution to this, see https://github.com/rust-lang/cargo/issues/9661.",
        "pr_file_module": null
      },
      {
        "comment_id": "2151605281",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12266,
        "pr_file": "Makefile",
        "discussion_id": "2151380218",
        "commented_code": "@@ -18,10 +18,12 @@ ifeq ($(BUILD_TYPE),release)\n \tPG_LDFLAGS = $(LDFLAGS)\n \t# Unfortunately, `--profile=...` is a nightly feature\n \tCARGO_BUILD_FLAGS += --release\n+\tNEON_CARGO_ARTIFACT_TARGET_DIR = $(ROOT_PROJECT_DIR)/target/release",
        "comment_created_at": "2025-06-17T08:05:36+00:00",
        "comment_author": "erikgrinaker",
        "comment_body": "Yeah, let's just hardcode it for now.",
        "pr_file_module": null
      },
      {
        "comment_id": "2151615539",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12266,
        "pr_file": "Makefile",
        "discussion_id": "2151380218",
        "commented_code": "@@ -18,10 +18,12 @@ ifeq ($(BUILD_TYPE),release)\n \tPG_LDFLAGS = $(LDFLAGS)\n \t# Unfortunately, `--profile=...` is a nightly feature\n \tCARGO_BUILD_FLAGS += --release\n+\tNEON_CARGO_ARTIFACT_TARGET_DIR = $(ROOT_PROJECT_DIR)/target/release",
        "comment_created_at": "2025-06-17T08:10:41+00:00",
        "comment_author": "iddm",
        "comment_body": "I was referring to the `build.target-dir` :-) \r\n\r\n`build.target-dir` can change the `target` path (the build root before the profile), then comes the `profile`, which only we know how to specify and is only used for a particular profile, so we can't possible know that, yes. However, we know, that if we specify the `release` mode, the `release` profile will be used, so the path will always be `<target dir>/release/`. I think it is good enough to depend on cargo on that matter. IIRC, this path can only be changed to something else when the toolchain isn't rust's default, but this is not the case here, right? Like if we have the `release` profile chosen but also `--default-toolchain stable-x86_64-unknown-linux-musl`, the `<profile>` will be prepended with `/x86_64-unknown-linux-musl/`, totalling in `<target dir>/x86_64-unknown-linux-musl/<profile>/`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2154202627",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12266,
        "pr_file": "Makefile",
        "discussion_id": "2151380218",
        "commented_code": "@@ -18,10 +18,12 @@ ifeq ($(BUILD_TYPE),release)\n \tPG_LDFLAGS = $(LDFLAGS)\n \t# Unfortunately, `--profile=...` is a nightly feature\n \tCARGO_BUILD_FLAGS += --release\n+\tNEON_CARGO_ARTIFACT_TARGET_DIR = $(ROOT_PROJECT_DIR)/target/release",
        "comment_created_at": "2025-06-18T10:02:05+00:00",
        "comment_author": "hlinnaka",
        "comment_body": "I don't know. It would be nice if this worked with non-default toolchain. I've been using nightly toolchain myself, and that doesn't affect the target path, i.e. it's still `target/release` or `target/debug`. I don't know if e.g. cross-compilation would use a different path.\r\n\r\nAnyway, I think we can leave this like this for now. It's likely that there will be an easier way to get the path from `cargo` in a future version, and we can switch to that then. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2158510303",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12266,
        "pr_file": "Makefile",
        "discussion_id": "2151380218",
        "commented_code": "@@ -18,10 +18,12 @@ ifeq ($(BUILD_TYPE),release)\n \tPG_LDFLAGS = $(LDFLAGS)\n \t# Unfortunately, `--profile=...` is a nightly feature\n \tCARGO_BUILD_FLAGS += --release\n+\tNEON_CARGO_ARTIFACT_TARGET_DIR = $(ROOT_PROJECT_DIR)/target/release",
        "comment_created_at": "2025-06-20T09:43:12+00:00",
        "comment_author": "hlinnaka",
        "comment_body": "I think https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#artifact-dir would be just what we want.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2130076242",
    "pr_number": 12137,
    "pr_file": "compute/Makefile",
    "created_at": "2025-06-05T19:46:12+00:00",
    "commented_code": "--output-file etc/$@ \\\n \t\t--tla-str collector_name=neon_collector \\\n \t\t--tla-str collector_file=neon_collector.yml \\\n-\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter' \\\n+\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter&pgaudit.log=none' \\",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2130076242",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12137,
        "pr_file": "compute/Makefile",
        "discussion_id": "2130076242",
        "commented_code": "@@ -22,15 +22,15 @@ sql_exporter.yml: $(jsonnet_files)\n \t\t--output-file etc/$@ \\\n \t\t--tla-str collector_name=neon_collector \\\n \t\t--tla-str collector_file=neon_collector.yml \\\n-\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter' \\\n+\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter&pgaudit.log=none' \\",
        "comment_created_at": "2025-06-05T19:46:12+00:00",
        "comment_author": "ololobus",
        "comment_body": "I wonder, should we do the same for compute_ctl connections? Especially activity monitor, it runs a bunch of queries pretty often. It probably should be enough to put this option here https://github.com/neondatabase/neon/blob/24d7c37e6ee7b730f983487351721f40922a9745/compute_tools/src/compute.rs#L362",
        "pr_file_module": null
      },
      {
        "comment_id": "2136063310",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12137,
        "pr_file": "compute/Makefile",
        "discussion_id": "2130076242",
        "commented_code": "@@ -22,15 +22,15 @@ sql_exporter.yml: $(jsonnet_files)\n \t\t--output-file etc/$@ \\\n \t\t--tla-str collector_name=neon_collector \\\n \t\t--tla-str collector_file=neon_collector.yml \\\n-\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter' \\\n+\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter&pgaudit.log=none' \\",
        "comment_created_at": "2025-06-09T16:44:12+00:00",
        "comment_author": "tristan957",
        "comment_body": "Follow-up PR here: https://github.com/neondatabase/cloud/pull/30120. It looks like we would overwrite the options sent from the control plane side. What are your thoughts on control plane vs compute_ctl changes?",
        "pr_file_module": null
      },
      {
        "comment_id": "2136071043",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12137,
        "pr_file": "compute/Makefile",
        "discussion_id": "2130076242",
        "commented_code": "@@ -22,15 +22,15 @@ sql_exporter.yml: $(jsonnet_files)\n \t\t--output-file etc/$@ \\\n \t\t--tla-str collector_name=neon_collector \\\n \t\t--tla-str collector_file=neon_collector.yml \\\n-\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter' \\\n+\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter&pgaudit.log=none' \\",
        "comment_created_at": "2025-06-09T16:49:26+00:00",
        "comment_author": "tristan957",
        "comment_body": "Seems like we may already overwrite `default_transaction_read_only=false`. I would need to verify that.",
        "pr_file_module": null
      },
      {
        "comment_id": "2136487586",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12137,
        "pr_file": "compute/Makefile",
        "discussion_id": "2130076242",
        "commented_code": "@@ -22,15 +22,15 @@ sql_exporter.yml: $(jsonnet_files)\n \t\t--output-file etc/$@ \\\n \t\t--tla-str collector_name=neon_collector \\\n \t\t--tla-str collector_file=neon_collector.yml \\\n-\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter' \\\n+\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter&pgaudit.log=none' \\",
        "comment_created_at": "2025-06-09T20:48:30+00:00",
        "comment_author": "ololobus",
        "comment_body": "There is a TODO two lines above the place I've linked\r\nhttps://github.com/neondatabase/neon/blob/24d7c37e6ee7b730f983487351721f40922a9745/compute_tools/src/compute.rs#L358-L360\r\n\r\nI was thinking about passing all essential parameters from the compute_ctl without relying on control plane.\r\n\r\nWe can probably still keep an option for control plane to override, not sure if reversing the order here\r\n\r\nSome(options) => format!(\"{} {}\", options, EXTRA_OPTIONS)\r\n\r\nto\r\n\r\nSome(options) => format!(\"{} {}\", EXTRA_OPTIONS, options)\r\n\r\nwill work\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2138235280",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12137,
        "pr_file": "compute/Makefile",
        "discussion_id": "2130076242",
        "commented_code": "@@ -22,15 +22,15 @@ sql_exporter.yml: $(jsonnet_files)\n \t\t--output-file etc/$@ \\\n \t\t--tla-str collector_name=neon_collector \\\n \t\t--tla-str collector_file=neon_collector.yml \\\n-\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter' \\\n+\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter&pgaudit.log=none' \\",
        "comment_created_at": "2025-06-10T15:38:44+00:00",
        "comment_author": "tristan957",
        "comment_body": "Ok, I will take a look at the code and investigate. Thanks!",
        "pr_file_module": null
      },
      {
        "comment_id": "2150640827",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12137,
        "pr_file": "compute/Makefile",
        "discussion_id": "2130076242",
        "commented_code": "@@ -22,15 +22,15 @@ sql_exporter.yml: $(jsonnet_files)\n \t\t--output-file etc/$@ \\\n \t\t--tla-str collector_name=neon_collector \\\n \t\t--tla-str collector_file=neon_collector.yml \\\n-\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter' \\\n+\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter&pgaudit.log=none' \\",
        "comment_created_at": "2025-06-16T18:47:49+00:00",
        "comment_author": "tristan957",
        "comment_body": "PRs to remove the TODO:\r\n- https://github.com/neondatabase/cloud/pull/30274\r\n- https://github.com/neondatabase/neon/pull/12261\r\n\r\nAnd then the pseudocode that you wrote actually already exists at https://github.com/neondatabase/neon/blob/118e13438df173b98c83bea853e346ebbe00eab3/compute_tools/src/compute.rs#L363-L366.",
        "pr_file_module": null
      },
      {
        "comment_id": "2150748349",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12137,
        "pr_file": "compute/Makefile",
        "discussion_id": "2130076242",
        "commented_code": "@@ -22,15 +22,15 @@ sql_exporter.yml: $(jsonnet_files)\n \t\t--output-file etc/$@ \\\n \t\t--tla-str collector_name=neon_collector \\\n \t\t--tla-str collector_file=neon_collector.yml \\\n-\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter' \\\n+\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter&pgaudit.log=none' \\",
        "comment_created_at": "2025-06-16T19:48:01+00:00",
        "comment_author": "ololobus",
        "comment_body": "> And then the pseudocode that you wrote actually already exists at\r\n\r\nYeah, but I meant that we should swap `options, EXTRA_OPTIONS` if we want cplane values to take precedence",
        "pr_file_module": null
      },
      {
        "comment_id": "2150785895",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12137,
        "pr_file": "compute/Makefile",
        "discussion_id": "2130076242",
        "commented_code": "@@ -22,15 +22,15 @@ sql_exporter.yml: $(jsonnet_files)\n \t\t--output-file etc/$@ \\\n \t\t--tla-str collector_name=neon_collector \\\n \t\t--tla-str collector_file=neon_collector.yml \\\n-\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter' \\\n+\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter&pgaudit.log=none' \\",
        "comment_created_at": "2025-06-16T20:09:59+00:00",
        "comment_author": "tristan957",
        "comment_body": "Ok, I missed that. I'll put up a PR for discussion.",
        "pr_file_module": null
      },
      {
        "comment_id": "2150826613",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12137,
        "pr_file": "compute/Makefile",
        "discussion_id": "2130076242",
        "commented_code": "@@ -22,15 +22,15 @@ sql_exporter.yml: $(jsonnet_files)\n \t\t--output-file etc/$@ \\\n \t\t--tla-str collector_name=neon_collector \\\n \t\t--tla-str collector_file=neon_collector.yml \\\n-\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter' \\\n+\t\t--tla-str 'connection_string=postgresql://cloud_admin@127.0.0.1:5432/postgres?sslmode=disable&application_name=sql_exporter&pgaudit.log=none' \\",
        "comment_created_at": "2025-06-16T20:33:15+00:00",
        "comment_author": "tristan957",
        "comment_body": "See the implementation at https://github.com/neondatabase/neon/pull/12262.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2152567524",
    "pr_number": 12274,
    "pr_file": "compute/patches/onnxruntime.patch",
    "created_at": "2025-06-17T15:27:17+00:00",
    "commented_code": "+diff --git a/cmake/deps.txt b/cmake/deps.txt\n+index d213b09034..229de2ebf0 100644\n+--- a/cmake/deps.txt\n++++ b/cmake/deps.txt\n+@@ -22,7 +22,9 @@ dlpack;https://github.com/dmlc/dlpack/archive/refs/tags/v0.6.zip;4d565dd2e5b3132\n+ # it contains changes on top of 3.4.0 which are required to fix build issues.\n+ # Until the 3.4.1 release this is the best option we have.\n+ # Issue link: https://gitlab.com/libeigen/eigen/-/issues/2744\n+-eigen;https://gitlab.com/libeigen/eigen/-/archive/e7248b26a1ed53fa030c5c459f7ea095dfd276ac/eigen-e7248b26a1ed53fa030c5c459f7ea095dfd276ac.zip;be8be39fdbc6e60e94fa7870b280707069b5b81a\n++# Moved to github mirror to avoid gitlab issues.Add commentMore actions\n++# Issue link: https://github.com/bazelbuild/bazel-central-registry/issues/4355\n++eigen;https://github.com/eigen-mirror/eigen/archive/e7248b26a1ed53fa030c5c459f7ea095dfd276ac/eigen-e7248b26a1ed53fa030c5c459f7ea095dfd276ac.zip;61418a349000ba7744a3ad03cf5071f22ebf860a",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2152567524",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12274,
        "pr_file": "compute/patches/onnxruntime.patch",
        "discussion_id": "2152567524",
        "commented_code": "@@ -0,0 +1,15 @@\n+diff --git a/cmake/deps.txt b/cmake/deps.txt\n+index d213b09034..229de2ebf0 100644\n+--- a/cmake/deps.txt\n++++ b/cmake/deps.txt\n+@@ -22,7 +22,9 @@ dlpack;https://github.com/dmlc/dlpack/archive/refs/tags/v0.6.zip;4d565dd2e5b3132\n+ # it contains changes on top of 3.4.0 which are required to fix build issues.\n+ # Until the 3.4.1 release this is the best option we have.\n+ # Issue link: https://gitlab.com/libeigen/eigen/-/issues/2744\n+-eigen;https://gitlab.com/libeigen/eigen/-/archive/e7248b26a1ed53fa030c5c459f7ea095dfd276ac/eigen-e7248b26a1ed53fa030c5c459f7ea095dfd276ac.zip;be8be39fdbc6e60e94fa7870b280707069b5b81a\n++# Moved to github mirror to avoid gitlab issues.Add commentMore actions\n++# Issue link: https://github.com/bazelbuild/bazel-central-registry/issues/4355\n++eigen;https://github.com/eigen-mirror/eigen/archive/e7248b26a1ed53fa030c5c459f7ea095dfd276ac/eigen-e7248b26a1ed53fa030c5c459f7ea095dfd276ac.zip;61418a349000ba7744a3ad03cf5071f22ebf860a",
        "comment_created_at": "2025-06-17T15:27:17+00:00",
        "comment_author": "hlinnaka",
        "comment_body": "The comment is a bit garbled, suggestion:\r\n\r\n```suggestion\r\n+# The original is at gitlab, at:\r\n+# https://gitlab.com/libeigen/eigen/-/archive/e7248b26a1ed53fa030c5c459f7ea095dfd276ac/eigen-e7248b26a1ed53fa030c5c459f7ea095dfd276ac.zip;be8be39fdbc6e60e94fa7870b280707069b5b81a\r\n+# However, we use the github mirror to avoid instability of gitlab-generated zip files, see:\r\n+# https://github.com/bazelbuild/bazel-central-registry/issues/4355\r\n+eigen;https://github.com/eigen-mirror/eigen/archive/e7248b26a1ed53fa030c5c459f7ea095dfd276ac/eigen-e7248b26a1ed53fa030c5c459f7ea095dfd276ac.zip;61418a349000ba7744a3ad03cf5071f22ebf860a\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2152573468",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12274,
        "pr_file": "compute/patches/onnxruntime.patch",
        "discussion_id": "2152567524",
        "commented_code": "@@ -0,0 +1,15 @@\n+diff --git a/cmake/deps.txt b/cmake/deps.txt\n+index d213b09034..229de2ebf0 100644\n+--- a/cmake/deps.txt\n++++ b/cmake/deps.txt\n+@@ -22,7 +22,9 @@ dlpack;https://github.com/dmlc/dlpack/archive/refs/tags/v0.6.zip;4d565dd2e5b3132\n+ # it contains changes on top of 3.4.0 which are required to fix build issues.\n+ # Until the 3.4.1 release this is the best option we have.\n+ # Issue link: https://gitlab.com/libeigen/eigen/-/issues/2744\n+-eigen;https://gitlab.com/libeigen/eigen/-/archive/e7248b26a1ed53fa030c5c459f7ea095dfd276ac/eigen-e7248b26a1ed53fa030c5c459f7ea095dfd276ac.zip;be8be39fdbc6e60e94fa7870b280707069b5b81a\n++# Moved to github mirror to avoid gitlab issues.Add commentMore actions\n++# Issue link: https://github.com/bazelbuild/bazel-central-registry/issues/4355\n++eigen;https://github.com/eigen-mirror/eigen/archive/e7248b26a1ed53fa030c5c459f7ea095dfd276ac/eigen-e7248b26a1ed53fa030c5c459f7ea095dfd276ac.zip;61418a349000ba7744a3ad03cf5071f22ebf860a",
        "comment_created_at": "2025-06-17T15:29:57+00:00",
        "comment_author": "bayandin",
        "comment_body": "I used the same commit (and the comment) from the upstream commit: https://github.com/microsoft/onnxruntime/commit/f57db79743c4d1a3553aa05cf95bcd10966030e6Do you want me to change that?",
        "pr_file_module": null
      },
      {
        "comment_id": "2152707798",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12274,
        "pr_file": "compute/patches/onnxruntime.patch",
        "discussion_id": "2152567524",
        "commented_code": "@@ -0,0 +1,15 @@\n+diff --git a/cmake/deps.txt b/cmake/deps.txt\n+index d213b09034..229de2ebf0 100644\n+--- a/cmake/deps.txt\n++++ b/cmake/deps.txt\n+@@ -22,7 +22,9 @@ dlpack;https://github.com/dmlc/dlpack/archive/refs/tags/v0.6.zip;4d565dd2e5b3132\n+ # it contains changes on top of 3.4.0 which are required to fix build issues.\n+ # Until the 3.4.1 release this is the best option we have.\n+ # Issue link: https://gitlab.com/libeigen/eigen/-/issues/2744\n+-eigen;https://gitlab.com/libeigen/eigen/-/archive/e7248b26a1ed53fa030c5c459f7ea095dfd276ac/eigen-e7248b26a1ed53fa030c5c459f7ea095dfd276ac.zip;be8be39fdbc6e60e94fa7870b280707069b5b81a\n++# Moved to github mirror to avoid gitlab issues.Add commentMore actions\n++# Issue link: https://github.com/bazelbuild/bazel-central-registry/issues/4355\n++eigen;https://github.com/eigen-mirror/eigen/archive/e7248b26a1ed53fa030c5c459f7ea095dfd276ac/eigen-e7248b26a1ed53fa030c5c459f7ea095dfd276ac.zip;61418a349000ba7744a3ad03cf5071f22ebf860a",
        "comment_created_at": "2025-06-17T16:35:17+00:00",
        "comment_author": "bayandin",
        "comment_body": "I'll keep it in align with the upstream (and because CI is green for the PR), but happy to change it in a separate PR.",
        "pr_file_module": null
      }
    ]
  }
]