[
  {
    "discussion_id": "2177404255",
    "pr_number": 12416,
    "pr_file": "proxy/src/binary/mod.rs",
    "created_at": "2025-07-01T11:54:54+00:00",
    "commented_code": null,
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2177404255",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12416,
        "pr_file": "proxy/src/binary/mod.rs",
        "discussion_id": "2177404255",
        "commented_code": null,
        "comment_created_at": "2025-07-01T11:54:54+00:00",
        "comment_author": "conradludgate",
        "comment_body": "can we move this to a separate file? This one isn't supposed to have any code. Eg `src/local_proxy.rs` or `src/config/local_proxy.rs`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2150169216",
    "pr_number": 12153,
    "pr_file": "compute_tools/src/compute.rs",
    "created_at": "2025-06-16T14:34:15+00:00",
    "commented_code": "let ss_pid = nix::unistd::Pid::from_raw(ss_pid as i32);\n         kill(ss_pid, Signal::SIGTERM).ok();\n     }\n+\n+    // Terminate pgbouncer with SIGKILL\n+    match pid_file::read(\"/etc/pgbouncer/pid\".into()) {",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2150169216",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12153,
        "pr_file": "compute_tools/src/compute.rs",
        "discussion_id": "2150169216",
        "commented_code": "@@ -2207,6 +2208,58 @@ pub fn forward_termination_signal() {\n         let ss_pid = nix::unistd::Pid::from_raw(ss_pid as i32);\n         kill(ss_pid, Signal::SIGTERM).ok();\n     }\n+\n+    // Terminate pgbouncer with SIGKILL\n+    match pid_file::read(\"/etc/pgbouncer/pid\".into()) {",
        "comment_created_at": "2025-06-16T14:34:15+00:00",
        "comment_author": "tristan957",
        "comment_body": "Would love to see the path pulled into a constant in a `pgbouncer` module (`compute_tools/src/pgbouncer.rs`).",
        "pr_file_module": null
      },
      {
        "comment_id": "2150519001",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12153,
        "pr_file": "compute_tools/src/compute.rs",
        "discussion_id": "2150169216",
        "commented_code": "@@ -2207,6 +2208,58 @@ pub fn forward_termination_signal() {\n         let ss_pid = nix::unistd::Pid::from_raw(ss_pid as i32);\n         kill(ss_pid, Signal::SIGTERM).ok();\n     }\n+\n+    // Terminate pgbouncer with SIGKILL\n+    match pid_file::read(\"/etc/pgbouncer/pid\".into()) {",
        "comment_created_at": "2025-06-16T17:37:22+00:00",
        "comment_author": "thesuhas",
        "comment_body": "I see that the `pg_helpers` module (`compute_tools/src/pg_helpers.rs`) had a bunch of `pgbouncer` helper functions. Instead of creating a new module, added the constant to this one.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2150678001",
    "pr_number": 12153,
    "pr_file": "compute_tools/src/pg_helpers.rs",
    "created_at": "2025-06-16T19:09:40+00:00",
    "commented_code": "const POSTGRES_WAIT_TIMEOUT: Duration = Duration::from_millis(60 * 1000); // milliseconds\n \n+pub const PGBOUNCER_PIDFILE: &str = \"/tmp/pgbouncer/pid\";",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2150678001",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12153,
        "pr_file": "compute_tools/src/pg_helpers.rs",
        "discussion_id": "2150678001",
        "commented_code": "@@ -26,6 +26,8 @@ use tracing::{debug, error, info, instrument};\n \n const POSTGRES_WAIT_TIMEOUT: Duration = Duration::from_millis(60 * 1000); // milliseconds\n \n+pub const PGBOUNCER_PIDFILE: &str = \"/tmp/pgbouncer/pid\";",
        "comment_created_at": "2025-06-16T19:09:40+00:00",
        "comment_author": "tristan957",
        "comment_body": "```suggestion\r\npub const PGBOUNCER_PIDFILE: &str = \"/tmp/pgbouncer.pid\";\r\n```\r\n\r\nAlso, just move this to a pgbouncer.rs file. It doesn't make sense to put this constant in pg_helpers.rs.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2066754768",
    "pr_number": 11550,
    "pr_file": "compute_tools/src/http/server.rs",
    "created_at": "2025-04-29T14:54:14+00:00",
    "commented_code": "let unauthenticated_router =\n                     Router::<Arc<ComputeNode>>::new().route(\"/metrics\", get(metrics::get_metrics));\n \n+                use prewarm_lfc::*;",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2066754768",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/http/server.rs",
        "discussion_id": "2066754768",
        "commented_code": "@@ -84,7 +84,15 @@ impl From<&Server> for Router<Arc<ComputeNode>> {\n                 let unauthenticated_router =\n                     Router::<Arc<ComputeNode>>::new().route(\"/metrics\", get(metrics::get_metrics));\n \n+                use prewarm_lfc::*;",
        "comment_created_at": "2025-04-29T14:54:14+00:00",
        "comment_author": "tristan957",
        "comment_body": "Please follow pre-established pattern of the use statement at the top and avoid wildcard imports.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2066875717",
    "pr_number": 11550,
    "pr_file": "compute_tools/src/http/routes/prewarm_lfc.rs",
    "created_at": "2025-04-29T15:53:43+00:00",
    "commented_code": "+use crate::compute::ComputeNode;",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2066875717",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/http/routes/prewarm_lfc.rs",
        "discussion_id": "2066875717",
        "commented_code": "@@ -0,0 +1,214 @@\n+use crate::compute::ComputeNode;",
        "comment_created_at": "2025-04-29T15:53:43+00:00",
        "comment_author": "tristan957",
        "comment_body": "As stated in a previous comment, please move all actual logic into the `ComputeNode` struct and just have the handlers call those functions.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2071435024",
    "pr_number": 11550,
    "pr_file": "compute_tools/src/compute.rs",
    "created_at": "2025-05-02T10:45:56+00:00",
    "commented_code": "info!(\"Pageserver config changed\");\n         }\n     }\n+\n+    // If prewarm failed, we want to get overall number of segments as well as done ones.\n+    // However, this function should be reliable even if querying postgres failed.\n+    pub async fn prewarm_status(&self) -> PrewarmStatus {",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2071435024",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/compute.rs",
        "discussion_id": "2071435024",
        "commented_code": "@@ -2123,6 +2216,158 @@ LIMIT 100\",\n             info!(\"Pageserver config changed\");\n         }\n     }\n+\n+    // If prewarm failed, we want to get overall number of segments as well as done ones.\n+    // However, this function should be reliable even if querying postgres failed.\n+    pub async fn prewarm_status(&self) -> PrewarmStatus {",
        "comment_created_at": "2025-05-02T10:45:56+00:00",
        "comment_author": "ololobus",
        "comment_body": "NIT: this `compute.rs` is really huge already. Should we move all new method implementations and structs into `compute_prewarm.rs`? It will be pretty well-scoped and should improve navigation and readability. WDYT?\r\n\r\nPersonally, I was already struggling with the `compute.rs` size",
        "pr_file_module": null
      },
      {
        "comment_id": "2071697386",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/compute.rs",
        "discussion_id": "2071435024",
        "commented_code": "@@ -2123,6 +2216,158 @@ LIMIT 100\",\n             info!(\"Pageserver config changed\");\n         }\n     }\n+\n+    // If prewarm failed, we want to get overall number of segments as well as done ones.\n+    // However, this function should be reliable even if querying postgres failed.\n+    pub async fn prewarm_status(&self) -> PrewarmStatus {",
        "comment_created_at": "2025-05-02T14:27:09+00:00",
        "comment_author": "tristan957",
        "comment_body": "It seems like we have a good pattern going where the `ComputeNode` methods become small wrappers around functions in other files. I agree with this suggestion.",
        "pr_file_module": null
      },
      {
        "comment_id": "2071757498",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/compute.rs",
        "discussion_id": "2071435024",
        "commented_code": "@@ -2123,6 +2216,158 @@ LIMIT 100\",\n             info!(\"Pageserver config changed\");\n         }\n     }\n+\n+    // If prewarm failed, we want to get overall number of segments as well as done ones.\n+    // However, this function should be reliable even if querying postgres failed.\n+    pub async fn prewarm_status(&self) -> PrewarmStatus {",
        "comment_created_at": "2025-05-02T15:10:54+00:00",
        "comment_author": "ololobus",
        "comment_body": "> It seems like we have a good pattern going where the ComputeNode methods become small wrappers around functions in other files.\r\n\r\nThis could be the way to go as well, but I was more thinking about just having a second `impl` block like\r\n```rust\r\nimpl ComputeNode {\r\n    pub async fn prewarm_status(&self) -> PrewarmStatus {...}\r\n\r\n    // The rest of prewarm methods\r\n}\r\n\r\n// The rest of prewarm structs\r\n```\r\nin a separate file `compute_prewarm.rs`. If that's possible in Rust (afaik, it's)",
        "pr_file_module": null
      },
      {
        "comment_id": "2071761539",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/compute.rs",
        "discussion_id": "2071435024",
        "commented_code": "@@ -2123,6 +2216,158 @@ LIMIT 100\",\n             info!(\"Pageserver config changed\");\n         }\n     }\n+\n+    // If prewarm failed, we want to get overall number of segments as well as done ones.\n+    // However, this function should be reliable even if querying postgres failed.\n+    pub async fn prewarm_status(&self) -> PrewarmStatus {",
        "comment_created_at": "2025-05-02T15:13:56+00:00",
        "comment_author": "tristan957",
        "comment_body": "Oh, I can't remember if it is, but that is also a good idea!",
        "pr_file_module": null
      },
      {
        "comment_id": "2072619612",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/compute.rs",
        "discussion_id": "2071435024",
        "commented_code": "@@ -2123,6 +2216,158 @@ LIMIT 100\",\n             info!(\"Pageserver config changed\");\n         }\n     }\n+\n+    // If prewarm failed, we want to get overall number of segments as well as done ones.\n+    // However, this function should be reliable even if querying postgres failed.\n+    pub async fn prewarm_status(&self) -> PrewarmStatus {",
        "comment_created_at": "2025-05-04T13:31:46+00:00",
        "comment_author": "myrrc",
        "comment_body": "Fixed",
        "pr_file_module": null
      }
    ]
  }
]