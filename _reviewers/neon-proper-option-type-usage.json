[
  {
    "discussion_id": "2136682569",
    "pr_number": 12111,
    "pr_file": "pageserver/page_api/src/client.rs",
    "created_at": "2025-06-09T23:53:30+00:00",
    "commented_code": "+use std::convert::TryInto;\n+use std::io::Error;\n+use std::io::ErrorKind;\n+\n+use bytes::Bytes;\n+use futures::StreamExt;\n+use futures_core::Stream;\n+use tonic::metadata::AsciiMetadataValue;\n+use tonic::metadata::errors::InvalidMetadataValue;\n+use tonic::transport::Channel;\n+use tonic::{Request, Streaming};\n+\n+use utils::id::TenantId;\n+use utils::id::TimelineId;\n+use utils::shard::ShardIndex;\n+\n+use anyhow::Result;\n+\n+use crate::model;\n+use crate::proto;\n+#[derive(Clone)]\n+struct AuthInterceptor {\n+    tenant_id: AsciiMetadataValue,\n+    shard_id: Option<AsciiMetadataValue>,",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2136682569",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12111,
        "pr_file": "pageserver/page_api/src/client.rs",
        "discussion_id": "2136682569",
        "commented_code": "@@ -0,0 +1,186 @@\n+use std::convert::TryInto;\n+use std::io::Error;\n+use std::io::ErrorKind;\n+\n+use bytes::Bytes;\n+use futures::StreamExt;\n+use futures_core::Stream;\n+use tonic::metadata::AsciiMetadataValue;\n+use tonic::metadata::errors::InvalidMetadataValue;\n+use tonic::transport::Channel;\n+use tonic::{Request, Streaming};\n+\n+use utils::id::TenantId;\n+use utils::id::TimelineId;\n+use utils::shard::ShardIndex;\n+\n+use anyhow::Result;\n+\n+use crate::model;\n+use crate::proto;\n+#[derive(Clone)]\n+struct AuthInterceptor {\n+    tenant_id: AsciiMetadataValue,\n+    shard_id: Option<AsciiMetadataValue>,",
        "comment_created_at": "2025-06-09T23:53:30+00:00",
        "comment_author": "erikgrinaker",
        "comment_body": "This shouldn't be an `Option`, as it's never set to `None`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2150180175",
    "pr_number": 12240,
    "pr_file": "compute_tools/src/compute.rs",
    "created_at": "2025-06-16T14:39:18+00:00",
    "commented_code": "pub lfc_prewarm_state: LfcPrewarmState,\n     pub lfc_offload_state: LfcOffloadState,\n \n+    /// WAL flush LSN that is set after syncing safekeepers after terminating Postgres\n+    pub terminate_flush_lsn: Lsn,",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2150180175",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12240,
        "pr_file": "compute_tools/src/compute.rs",
        "discussion_id": "2150180175",
        "commented_code": "@@ -161,6 +161,9 @@ pub struct ComputeState {\n     pub lfc_prewarm_state: LfcPrewarmState,\n     pub lfc_offload_state: LfcOffloadState,\n \n+    /// WAL flush LSN that is set after syncing safekeepers after terminating Postgres\n+    pub terminate_flush_lsn: Lsn,",
        "comment_created_at": "2025-06-16T14:39:18+00:00",
        "comment_author": "MMeent",
        "comment_body": "Shouldn't this be Option<Lsn>, given that it's only set during shutdown?",
        "pr_file_module": null
      },
      {
        "comment_id": "2150202949",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12240,
        "pr_file": "compute_tools/src/compute.rs",
        "discussion_id": "2150180175",
        "commented_code": "@@ -161,6 +161,9 @@ pub struct ComputeState {\n     pub lfc_prewarm_state: LfcPrewarmState,\n     pub lfc_offload_state: LfcOffloadState,\n \n+    /// WAL flush LSN that is set after syncing safekeepers after terminating Postgres\n+    pub terminate_flush_lsn: Lsn,",
        "comment_created_at": "2025-06-16T14:48:41+00:00",
        "comment_author": "myrrc",
        "comment_body": "Lsn isn't discriminated against Lsn::INVALID so Option<> would increase its size, not sure it's the best option",
        "pr_file_module": null
      },
      {
        "comment_id": "2150490976",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12240,
        "pr_file": "compute_tools/src/compute.rs",
        "discussion_id": "2150180175",
        "commented_code": "@@ -161,6 +161,9 @@ pub struct ComputeState {\n     pub lfc_prewarm_state: LfcPrewarmState,\n     pub lfc_offload_state: LfcOffloadState,\n \n+    /// WAL flush LSN that is set after syncing safekeepers after terminating Postgres\n+    pub terminate_flush_lsn: Lsn,",
        "comment_created_at": "2025-06-16T17:18:47+00:00",
        "comment_author": "myrrc",
        "comment_body": "On the other hand, making it a discriminant (or Lsn:::MAX) isn't an option as well, so I'll use your approach.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2109532136",
    "pr_number": 12030,
    "pr_file": "compute_tools/src/bin/compute_ctl.rs",
    "created_at": "2025-05-27T15:36:27+00:00",
    "commented_code": "/// The base URL for the remote extension storage proxy gateway.\n     /// Should be in the form of `http(s)://<gateway-hostname>[:<port>]`.\n-    #[arg(short = 'r', long, value_parser = parse_remote_ext_base_url, alias = \"remote-ext-config\")]\n-    pub remote_ext_base_url: Option<String>,",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2109532136",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12030,
        "pr_file": "compute_tools/src/bin/compute_ctl.rs",
        "discussion_id": "2109532136",
        "commented_code": "@@ -80,8 +65,8 @@ struct Cli {\n \n     /// The base URL for the remote extension storage proxy gateway.\n     /// Should be in the form of `http(s)://<gateway-hostname>[:<port>]`.\n-    #[arg(short = 'r', long, value_parser = parse_remote_ext_base_url, alias = \"remote-ext-config\")]\n-    pub remote_ext_base_url: Option<String>,",
        "comment_created_at": "2025-05-27T15:36:27+00:00",
        "comment_author": "tristan957",
        "comment_body": "This should continue to be an `Option<String>`. It's optional to pass it, and defaulting the value to empty string is meaningless.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2066750307",
    "pr_number": 11550,
    "pr_file": "libs/compute_api/src/responses.rs",
    "created_at": "2025-04-29T14:52:09+00:00",
    "commented_code": "pub version: ExtVersion,\n }\n \n+#[derive(Serialize, Clone, Copy, Debug, Default, Deserialize, PartialEq, Eq)]\n+#[serde(rename_all = \"snake_case\")]\n+pub enum PrewarmStatus {\n+    #[default]\n+    NotPrewarmed,\n+    Prewarming,\n+    Completed,\n+    Failed,\n+}\n+\n+#[derive(Serialize, Clone, Copy, Debug, Default, Deserialize, PartialEq, Eq)]\n+#[serde(rename_all = \"snake_case\")]\n+pub enum PrewarmOffloadStatus {\n+    #[default]\n+    NotOffloaded,\n+    Offloading,\n+    Completed,\n+    Failed,\n+}\n+\n+#[derive(Serialize, Default, Debug, Deserialize, Clone)]\n+pub struct PrewarmState {\n+    pub status: PrewarmStatus,\n+    pub error: String,\n+}\n+\n+#[derive(Serialize, Default, Debug, Deserialize, Clone)]\n+pub struct PrewarmOffloadState {\n+    pub status: PrewarmOffloadStatus,\n+    pub error: String,",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2066750307",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "libs/compute_api/src/responses.rs",
        "discussion_id": "2066750307",
        "commented_code": "@@ -46,6 +46,38 @@ pub struct ExtensionInstallResponse {\n     pub version: ExtVersion,\n }\n \n+#[derive(Serialize, Clone, Copy, Debug, Default, Deserialize, PartialEq, Eq)]\n+#[serde(rename_all = \"snake_case\")]\n+pub enum PrewarmStatus {\n+    #[default]\n+    NotPrewarmed,\n+    Prewarming,\n+    Completed,\n+    Failed,\n+}\n+\n+#[derive(Serialize, Clone, Copy, Debug, Default, Deserialize, PartialEq, Eq)]\n+#[serde(rename_all = \"snake_case\")]\n+pub enum PrewarmOffloadStatus {\n+    #[default]\n+    NotOffloaded,\n+    Offloading,\n+    Completed,\n+    Failed,\n+}\n+\n+#[derive(Serialize, Default, Debug, Deserialize, Clone)]\n+pub struct PrewarmState {\n+    pub status: PrewarmStatus,\n+    pub error: String,\n+}\n+\n+#[derive(Serialize, Default, Debug, Deserialize, Clone)]\n+pub struct PrewarmOffloadState {\n+    pub status: PrewarmOffloadStatus,\n+    pub error: String,",
        "comment_created_at": "2025-04-29T14:52:09+00:00",
        "comment_author": "tristan957",
        "comment_body": "Please make `error` an `Option<String>`",
        "pr_file_module": null
      }
    ]
  }
]