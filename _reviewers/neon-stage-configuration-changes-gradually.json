[
  {
    "discussion_id": "2077284887",
    "pr_number": 11830,
    "pr_file": "control_plane/src/endpoint.rs",
    "created_at": "2025-05-07T10:03:58+00:00",
    "commented_code": ".env\n                         .safekeepers\n                         .iter()\n-                        .map(|sk| format!(\"localhost:{}\", sk.get_compute_port()))\n+                        .map(|sk| format!(\"host=localhost port={}\", sk.get_compute_port()))\n                         .collect::<Vec<String>>()\n                         .join(\",\");\n-                    conf.append(\"neon.safekeepers\", &safekeepers);\n+                    conf.append(\"neon.safekeeper_connstrings\", &safekeepers);",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2077284887",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11830,
        "pr_file": "control_plane/src/endpoint.rs",
        "discussion_id": "2077284887",
        "commented_code": "@@ -454,10 +454,10 @@ impl Endpoint {\n                         .env\n                         .safekeepers\n                         .iter()\n-                        .map(|sk| format!(\"localhost:{}\", sk.get_compute_port()))\n+                        .map(|sk| format!(\"host=localhost port={}\", sk.get_compute_port()))\n                         .collect::<Vec<String>>()\n                         .join(\",\");\n-                    conf.append(\"neon.safekeepers\", &safekeepers);\n+                    conf.append(\"neon.safekeeper_connstrings\", &safekeepers);",
        "comment_created_at": "2025-05-07T10:03:58+00:00",
        "comment_author": "DimasKovas",
        "comment_body": "Some compat tests are broken because I think it runs old computes (without `neon.safekeeper_connstrings`) with new control plane.\r\nThis kind of changes are usually done with several steps (several PRs):\r\n1. First, add new option to compute, but do not use it in CP (or use under a feature flag).\r\n2. Wait for the new option to reach the release\r\n3. Change the option in CP\r\n4. Delete old option\r\n\r\nIt's quite complicated and not fast, that's why I liked the idea of a separate `extra_conn_options`",
        "pr_file_module": null
      },
      {
        "comment_id": "2077286859",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11830,
        "pr_file": "control_plane/src/endpoint.rs",
        "discussion_id": "2077284887",
        "commented_code": "@@ -454,10 +454,10 @@ impl Endpoint {\n                         .env\n                         .safekeepers\n                         .iter()\n-                        .map(|sk| format!(\"localhost:{}\", sk.get_compute_port()))\n+                        .map(|sk| format!(\"host=localhost port={}\", sk.get_compute_port()))\n                         .collect::<Vec<String>>()\n                         .join(\",\");\n-                    conf.append(\"neon.safekeepers\", &safekeepers);\n+                    conf.append(\"neon.safekeeper_connstrings\", &safekeepers);",
        "comment_created_at": "2025-05-07T10:05:17+00:00",
        "comment_author": "DimasKovas",
        "comment_body": "Do I understand correctly that we need to restart all computes to switch this options in control plane in production?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2081197341",
    "pr_number": 11830,
    "pr_file": "compute_tools/src/config.rs",
    "created_at": "2025-05-09T08:31:04+00:00",
    "commented_code": "neon_safekeepers_value.push_str(&spec.safekeeper_connstrings.join(\",\"));\n         writeln!(\n             file,\n-            \"neon.safekeepers={}\",\n+            \"neon.safekeeper_connstrings={}\",",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2081197341",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11830,
        "pr_file": "compute_tools/src/config.rs",
        "discussion_id": "2081197341",
        "commented_code": "@@ -75,7 +75,7 @@ pub fn write_postgres_conf(\n         neon_safekeepers_value.push_str(&spec.safekeeper_connstrings.join(\",\"));\n         writeln!(\n             file,\n-            \"neon.safekeepers={}\",\n+            \"neon.safekeeper_connstrings={}\",",
        "comment_created_at": "2025-05-09T08:31:04+00:00",
        "comment_author": "dimitri",
        "comment_body": "Also, do we want to write the new configuration format already, or have a first PR that only knows how to read the new format?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2055906421",
    "pr_number": 11550,
    "pr_file": "compute_tools/src/compute.rs",
    "created_at": "2025-04-23T12:08:32+00:00",
    "commented_code": ".or(Err(\"invalid timeline id\"))?\n         };\n \n+        let endpoint_storage_addr: String = if let Some(ref addr) = spec.endpoint_storage_addr {\n+            addr.clone()\n+        } else {\n+            spec.cluster\n+                .settings\n+                .find(\"neon.endpoint_storage_addr\")\n+                .ok_or(\"endpoint_storage_addr should be provided\")?\n+        };\n+        let endpoint_storage_token: String = if let Some(ref token) = spec.endpoint_storage_token {\n+            token.clone()\n+        } else {\n+            spec.cluster\n+                .settings\n+                .find(\"neon.endpoint_storage_token\")\n+                .ok_or(\"endpoint_storage_token should be provided\")?\n+        };",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2055906421",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/compute.rs",
        "discussion_id": "2055906421",
        "commented_code": "@@ -251,13 +258,32 @@ impl TryFrom<ComputeSpec> for ParsedSpec {\n                 .or(Err(\"invalid timeline id\"))?\n         };\n \n+        let endpoint_storage_addr: String = if let Some(ref addr) = spec.endpoint_storage_addr {\n+            addr.clone()\n+        } else {\n+            spec.cluster\n+                .settings\n+                .find(\"neon.endpoint_storage_addr\")\n+                .ok_or(\"endpoint_storage_addr should be provided\")?\n+        };\n+        let endpoint_storage_token: String = if let Some(ref token) = spec.endpoint_storage_token {\n+            token.clone()\n+        } else {\n+            spec.cluster\n+                .settings\n+                .find(\"neon.endpoint_storage_token\")\n+                .ok_or(\"endpoint_storage_token should be provided\")?\n+        };",
        "comment_created_at": "2025-04-23T12:08:32+00:00",
        "comment_author": "VladLazar",
        "comment_body": "Why do we support propagating these configs in two ways?",
        "pr_file_module": null
      },
      {
        "comment_id": "2056134678",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/compute.rs",
        "discussion_id": "2055906421",
        "commented_code": "@@ -251,13 +258,32 @@ impl TryFrom<ComputeSpec> for ParsedSpec {\n                 .or(Err(\"invalid timeline id\"))?\n         };\n \n+        let endpoint_storage_addr: String = if let Some(ref addr) = spec.endpoint_storage_addr {\n+            addr.clone()\n+        } else {\n+            spec.cluster\n+                .settings\n+                .find(\"neon.endpoint_storage_addr\")\n+                .ok_or(\"endpoint_storage_addr should be provided\")?\n+        };\n+        let endpoint_storage_token: String = if let Some(ref token) = spec.endpoint_storage_token {\n+            token.clone()\n+        } else {\n+            spec.cluster\n+                .settings\n+                .find(\"neon.endpoint_storage_token\")\n+                .ok_or(\"endpoint_storage_token should be provided\")?\n+        };",
        "comment_created_at": "2025-04-23T14:02:47+00:00",
        "comment_author": "myrrc",
        "comment_body": "We need to parse GUC in case ComputeSpec's fields are missing for backward compatibility",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2055911669",
    "pr_number": 11550,
    "pr_file": "compute_tools/src/compute.rs",
    "created_at": "2025-04-23T12:11:36+00:00",
    "commented_code": ".or(Err(\"invalid timeline id\"))?\n         };\n \n+        let endpoint_storage_addr: String = if let Some(ref addr) = spec.endpoint_storage_addr {\n+            addr.clone()\n+        } else {\n+            spec.cluster\n+                .settings\n+                .find(\"neon.endpoint_storage_addr\")\n+                .ok_or(\"endpoint_storage_addr should be provided\")?\n+        };\n+        let endpoint_storage_token: String = if let Some(ref token) = spec.endpoint_storage_token {\n+            token.clone()\n+        } else {\n+            spec.cluster\n+                .settings\n+                .find(\"neon.endpoint_storage_token\")\n+                .ok_or(\"endpoint_storage_token should be provided\")?\n+        };\n+\n         Ok(ParsedSpec {\n             spec,\n             pageserver_connstr,\n             safekeeper_connstrings,\n             storage_auth_token,\n             tenant_id,\n             timeline_id,\n+            endpoint_storage_addr,\n+            endpoint_storage_token,",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2055911669",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/compute.rs",
        "discussion_id": "2055911669",
        "commented_code": "@@ -251,13 +258,32 @@ impl TryFrom<ComputeSpec> for ParsedSpec {\n                 .or(Err(\"invalid timeline id\"))?\n         };\n \n+        let endpoint_storage_addr: String = if let Some(ref addr) = spec.endpoint_storage_addr {\n+            addr.clone()\n+        } else {\n+            spec.cluster\n+                .settings\n+                .find(\"neon.endpoint_storage_addr\")\n+                .ok_or(\"endpoint_storage_addr should be provided\")?\n+        };\n+        let endpoint_storage_token: String = if let Some(ref token) = spec.endpoint_storage_token {\n+            token.clone()\n+        } else {\n+            spec.cluster\n+                .settings\n+                .find(\"neon.endpoint_storage_token\")\n+                .ok_or(\"endpoint_storage_token should be provided\")?\n+        };\n+\n         Ok(ParsedSpec {\n             spec,\n             pageserver_connstr,\n             safekeeper_connstrings,\n             storage_auth_token,\n             tenant_id,\n             timeline_id,\n+            endpoint_storage_addr,\n+            endpoint_storage_token,",
        "comment_created_at": "2025-04-23T12:11:36+00:00",
        "comment_author": "VladLazar",
        "comment_body": "Should these be optional? It allows us to try it out in staging/pre-prod without deploying the new endpoint everywhere in prod.",
        "pr_file_module": null
      },
      {
        "comment_id": "2056224288",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/compute.rs",
        "discussion_id": "2055911669",
        "commented_code": "@@ -251,13 +258,32 @@ impl TryFrom<ComputeSpec> for ParsedSpec {\n                 .or(Err(\"invalid timeline id\"))?\n         };\n \n+        let endpoint_storage_addr: String = if let Some(ref addr) = spec.endpoint_storage_addr {\n+            addr.clone()\n+        } else {\n+            spec.cluster\n+                .settings\n+                .find(\"neon.endpoint_storage_addr\")\n+                .ok_or(\"endpoint_storage_addr should be provided\")?\n+        };\n+        let endpoint_storage_token: String = if let Some(ref token) = spec.endpoint_storage_token {\n+            token.clone()\n+        } else {\n+            spec.cluster\n+                .settings\n+                .find(\"neon.endpoint_storage_token\")\n+                .ok_or(\"endpoint_storage_token should be provided\")?\n+        };\n+\n         Ok(ParsedSpec {\n             spec,\n             pageserver_connstr,\n             safekeeper_connstrings,\n             storage_auth_token,\n             tenant_id,\n             timeline_id,\n+            endpoint_storage_addr,\n+            endpoint_storage_token,",
        "comment_created_at": "2025-04-23T14:42:07+00:00",
        "comment_author": "myrrc",
        "comment_body": "Fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2071421499",
    "pr_number": 11550,
    "pr_file": "libs/compute_api/src/spec.rs",
    "created_at": "2025-05-02T10:32:12+00:00",
    "commented_code": "/// track short-lived connections as user activity.\n     ActivityMonitorExperimental,\n \n+    PrewarmLfcOnStartup,",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2071421499",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "libs/compute_api/src/spec.rs",
        "discussion_id": "2071421499",
        "commented_code": "@@ -183,6 +189,8 @@ pub enum ComputeFeature {\n     /// track short-lived connections as user activity.\n     ActivityMonitorExperimental,\n \n+    PrewarmLfcOnStartup,",
        "comment_created_at": "2025-05-02T10:32:12+00:00",
        "comment_author": "ololobus",
        "comment_body": "I think it shouldn't be a part of feature flags, which are meant to be temporary. Instead, it should be a part of the main spec body because it's a permanent feature/mode\r\n\r\n(This `ActivityMonitorExperimental` is a bit special, I left it for longer, because statistics-based monitoring is tricky, but we should also remove it already)",
        "pr_file_module": null
      },
      {
        "comment_id": "2072623366",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "libs/compute_api/src/spec.rs",
        "discussion_id": "2071421499",
        "commented_code": "@@ -183,6 +189,8 @@ pub enum ComputeFeature {\n     /// track short-lived connections as user activity.\n     ActivityMonitorExperimental,\n \n+    PrewarmLfcOnStartup,",
        "comment_created_at": "2025-05-04T13:49:12+00:00",
        "comment_author": "myrrc",
        "comment_body": "Fixed",
        "pr_file_module": null
      }
    ]
  }
]