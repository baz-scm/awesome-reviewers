[
  {
    "discussion_id": "2160943366",
    "pr_number": 12233,
    "pr_file": "pageserver/src/http/routes.rs",
    "created_at": "2025-06-23T07:47:49+00:00",
    "commented_code": ".get(\"/v1/tenant/:tenant_shard_id/feature_flag\", |r| {\n             api_handler(r, tenant_evaluate_feature_flag)\n         })\n+        .put(\"/v1/feature_flag\", |r| {\n+            testing_api_handler(\"force override feature flag - put\", r, force_override_feature_flag_for_testing_put)",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2160943366",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12233,
        "pr_file": "pageserver/src/http/routes.rs",
        "discussion_id": "2160943366",
        "commented_code": "@@ -4088,5 +4117,11 @@ pub fn make_router(\n         .get(\"/v1/tenant/:tenant_shard_id/feature_flag\", |r| {\n             api_handler(r, tenant_evaluate_feature_flag)\n         })\n+        .put(\"/v1/feature_flag\", |r| {\n+            testing_api_handler(\"force override feature flag - put\", r, force_override_feature_flag_for_testing_put)",
        "comment_created_at": "2025-06-23T07:47:49+00:00",
        "comment_author": "DimasKovas",
        "comment_body": "nit: `/v1/feature_flag/:flag_name` looks more \"RESTful\", but I'm fine with current `?flag=my-flag` too",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2160972413",
    "pr_number": 12233,
    "pr_file": "pageserver/src/http/routes.rs",
    "created_at": "2025-06-23T08:02:11+00:00",
    "commented_code": ".get(\"/v1/tenant/:tenant_shard_id/feature_flag\", |r| {\n             api_handler(r, tenant_evaluate_feature_flag)\n         })\n+        .put(\"/v1/feature_flag\", |r| {",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2160972413",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12233,
        "pr_file": "pageserver/src/http/routes.rs",
        "discussion_id": "2160972413",
        "commented_code": "@@ -4088,5 +4117,11 @@ pub fn make_router(\n         .get(\"/v1/tenant/:tenant_shard_id/feature_flag\", |r| {\n             api_handler(r, tenant_evaluate_feature_flag)\n         })\n+        .put(\"/v1/feature_flag\", |r| {",
        "comment_created_at": "2025-06-23T08:02:11+00:00",
        "comment_author": "DimasKovas",
        "comment_body": "nit: probably we can move these to `/debug/v1`, how it's done in storcon, to make it more clear that it's debug handlers",
        "pr_file_module": null
      },
      {
        "comment_id": "2161951645",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12233,
        "pr_file": "pageserver/src/http/routes.rs",
        "discussion_id": "2160972413",
        "commented_code": "@@ -4088,5 +4117,11 @@ pub fn make_router(\n         .get(\"/v1/tenant/:tenant_shard_id/feature_flag\", |r| {\n             api_handler(r, tenant_evaluate_feature_flag)\n         })\n+        .put(\"/v1/feature_flag\", |r| {",
        "comment_created_at": "2025-06-23T15:51:22+00:00",
        "comment_author": "skyzh",
        "comment_body": "I think in pageserver we don't do a clean separation of those APIs (e.g. a few other endpoints with debug-only access)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2055975633",
    "pr_number": 11550,
    "pr_file": "compute_tools/src/http/server.rs",
    "created_at": "2025-04-23T12:45:55+00:00",
    "commented_code": "Router::<Arc<ComputeNode>>::new().route(\"/metrics\", get(metrics::get_metrics));\n \n                 let authenticated_router = Router::<Arc<ComputeNode>>::new()\n+                    .route(\"/prewarm_lfc\", head(prewarm_lfc::prewarm_lfc))",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2055975633",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/http/server.rs",
        "discussion_id": "2055975633",
        "commented_code": "@@ -85,6 +85,12 @@ impl From<&Server> for Router<Arc<ComputeNode>> {\n                     Router::<Arc<ComputeNode>>::new().route(\"/metrics\", get(metrics::get_metrics));\n \n                 let authenticated_router = Router::<Arc<ComputeNode>>::new()\n+                    .route(\"/prewarm_lfc\", head(prewarm_lfc::prewarm_lfc))",
        "comment_created_at": "2025-04-23T12:45:55+00:00",
        "comment_author": "VladLazar",
        "comment_body": "This should be `POST`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2056227121",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/http/server.rs",
        "discussion_id": "2055975633",
        "commented_code": "@@ -85,6 +85,12 @@ impl From<&Server> for Router<Arc<ComputeNode>> {\n                     Router::<Arc<ComputeNode>>::new().route(\"/metrics\", get(metrics::get_metrics));\n \n                 let authenticated_router = Router::<Arc<ComputeNode>>::new()\n+                    .route(\"/prewarm_lfc\", head(prewarm_lfc::prewarm_lfc))",
        "comment_created_at": "2025-04-23T14:43:32+00:00",
        "comment_author": "myrrc",
        "comment_body": "Fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2055994076",
    "pr_number": 11550,
    "pr_file": "compute_tools/src/http/server.rs",
    "created_at": "2025-04-23T12:55:37+00:00",
    "commented_code": "Router::<Arc<ComputeNode>>::new().route(\"/metrics\", get(metrics::get_metrics));\n \n                 let authenticated_router = Router::<Arc<ComputeNode>>::new()\n+                    .route(\"/prewarm_lfc\", head(prewarm_lfc::prewarm_lfc))\n+                    .route(\"/prewarm_lfc_status\", get(prewarm_lfc::prewarm_lfc_status))\n+                    .route(\n+                        \"/prewarm_lfc_offload\",\n+                        head(prewarm_lfc::prewarm_lfc_offload),",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2055994076",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/http/server.rs",
        "discussion_id": "2055994076",
        "commented_code": "@@ -85,6 +85,12 @@ impl From<&Server> for Router<Arc<ComputeNode>> {\n                     Router::<Arc<ComputeNode>>::new().route(\"/metrics\", get(metrics::get_metrics));\n \n                 let authenticated_router = Router::<Arc<ComputeNode>>::new()\n+                    .route(\"/prewarm_lfc\", head(prewarm_lfc::prewarm_lfc))\n+                    .route(\"/prewarm_lfc_status\", get(prewarm_lfc::prewarm_lfc_status))\n+                    .route(\n+                        \"/prewarm_lfc_offload\",\n+                        head(prewarm_lfc::prewarm_lfc_offload),",
        "comment_created_at": "2025-04-23T12:55:37+00:00",
        "comment_author": "VladLazar",
        "comment_body": "This should be:\r\n`PUT`: if the endpoint does the offload before returning\r\n`POST`: if the endpoint does the offload in the background",
        "pr_file_module": null
      },
      {
        "comment_id": "2056228026",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/http/server.rs",
        "discussion_id": "2055994076",
        "commented_code": "@@ -85,6 +85,12 @@ impl From<&Server> for Router<Arc<ComputeNode>> {\n                     Router::<Arc<ComputeNode>>::new().route(\"/metrics\", get(metrics::get_metrics));\n \n                 let authenticated_router = Router::<Arc<ComputeNode>>::new()\n+                    .route(\"/prewarm_lfc\", head(prewarm_lfc::prewarm_lfc))\n+                    .route(\"/prewarm_lfc_status\", get(prewarm_lfc::prewarm_lfc_status))\n+                    .route(\n+                        \"/prewarm_lfc_offload\",\n+                        head(prewarm_lfc::prewarm_lfc_offload),",
        "comment_created_at": "2025-04-23T14:44:02+00:00",
        "comment_author": "myrrc",
        "comment_body": "Fixed, made POST",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2066874252",
    "pr_number": 11550,
    "pr_file": "compute_tools/src/http/server.rs",
    "created_at": "2025-04-29T15:52:52+00:00",
    "commented_code": "let unauthenticated_router =\n                     Router::<Arc<ComputeNode>>::new().route(\"/metrics\", get(metrics::get_metrics));\n \n+                use prewarm_lfc::*;\n                 let authenticated_router = Router::<Arc<ComputeNode>>::new()\n+                    .route(\"/prewarm_lfc\", post(prewarm_lfc))\n+                    .route(\"/prewarm_lfc_status\", get(prewarm_lfc_status))\n+                    .route(\"/prewarm_lfc_offload\", post(prewarm_lfc_offload))\n+                    .route(\n+                        \"/prewarm_lfc_offload_status\",\n+                        get(prewarm_lfc_offload_status),\n+                    )",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2066874252",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/http/server.rs",
        "discussion_id": "2066874252",
        "commented_code": "@@ -84,7 +84,15 @@ impl From<&Server> for Router<Arc<ComputeNode>> {\n                 let unauthenticated_router =\n                     Router::<Arc<ComputeNode>>::new().route(\"/metrics\", get(metrics::get_metrics));\n \n+                use prewarm_lfc::*;\n                 let authenticated_router = Router::<Arc<ComputeNode>>::new()\n+                    .route(\"/prewarm_lfc\", post(prewarm_lfc))\n+                    .route(\"/prewarm_lfc_status\", get(prewarm_lfc_status))\n+                    .route(\"/prewarm_lfc_offload\", post(prewarm_lfc_offload))\n+                    .route(\n+                        \"/prewarm_lfc_offload_status\",\n+                        get(prewarm_lfc_offload_status),\n+                    )",
        "comment_created_at": "2025-04-29T15:52:52+00:00",
        "comment_author": "tristan957",
        "comment_body": "Instead of 4 different routes, let's consolidate down to 2.\r\n\r\n```\r\nGET /prewarm_lfc - get the status\r\nPOST /prewarm_lfc - make the request\r\n\r\nGET /prewarm_lfc_offload - get the status\r\nPOST /prewarm_lfc_offload - make the request\r\n```\r\n\r\nI assume that `offload` means to send the current state of the LFC to endpoint storage. Can we just drop the `prewarm` prefix so it is just `lfc_offload`. I don't see why `prewarm` needs to be there.\r\n\r\nIf ^ is a good suggestion to you, I'd like to see the routes changed to:\r\n\r\n```\r\nGET /lfc/prewarm\r\nPOST /lfc/prewarm\r\n\r\nGET /lfc/offload\r\nPOST /lfc/offload\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2073616959",
    "pr_number": 11550,
    "pr_file": "compute_tools/src/http/routes/prewarm_lfc.rs",
    "created_at": "2025-05-05T14:56:18+00:00",
    "commented_code": "+use crate::http::JsonResponse;\n+use axum::response::Response;\n+use axum::{Json, http::StatusCode};\n+use compute_api::responses::PrewarmOffloadState;\n+type Compute = axum::extract::State<std::sync::Arc<crate::compute::ComputeNode>>;\n+\n+pub(in crate::http) async fn state(compute: Compute) -> Json<crate::compute_prewarm::PrewarmState> {\n+    Json(compute.prewarm_state().await)\n+}\n+\n+// Following functions are marked async for axum, as it's more convenient than wrapping these\n+// in async lambdas at call site\n+\n+pub(in crate::http) async fn offload_state(compute: Compute) -> Json<PrewarmOffloadState> {\n+    Json(compute.prewarm_offload_state())\n+}\n+\n+pub(in crate::http) async fn prewarm(compute: Compute) -> Response {\n+    if compute.prewarm() {\n+        JsonResponse::success(StatusCode::OK, \"\")",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2073616959",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/http/routes/prewarm_lfc.rs",
        "discussion_id": "2073616959",
        "commented_code": "@@ -0,0 +1,38 @@\n+use crate::http::JsonResponse;\n+use axum::response::Response;\n+use axum::{Json, http::StatusCode};\n+use compute_api::responses::PrewarmOffloadState;\n+type Compute = axum::extract::State<std::sync::Arc<crate::compute::ComputeNode>>;\n+\n+pub(in crate::http) async fn state(compute: Compute) -> Json<crate::compute_prewarm::PrewarmState> {\n+    Json(compute.prewarm_state().await)\n+}\n+\n+// Following functions are marked async for axum, as it's more convenient than wrapping these\n+// in async lambdas at call site\n+\n+pub(in crate::http) async fn offload_state(compute: Compute) -> Json<PrewarmOffloadState> {\n+    Json(compute.prewarm_offload_state())\n+}\n+\n+pub(in crate::http) async fn prewarm(compute: Compute) -> Response {\n+    if compute.prewarm() {\n+        JsonResponse::success(StatusCode::OK, \"\")",
        "comment_created_at": "2025-05-05T14:56:18+00:00",
        "comment_author": "tristan957",
        "comment_body": "No need to use JsonResponse for empty bodies. Returning the status only is perfectly fine,",
        "pr_file_module": null
      },
      {
        "comment_id": "2073908992",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/http/routes/prewarm_lfc.rs",
        "discussion_id": "2073616959",
        "commented_code": "@@ -0,0 +1,38 @@\n+use crate::http::JsonResponse;\n+use axum::response::Response;\n+use axum::{Json, http::StatusCode};\n+use compute_api::responses::PrewarmOffloadState;\n+type Compute = axum::extract::State<std::sync::Arc<crate::compute::ComputeNode>>;\n+\n+pub(in crate::http) async fn state(compute: Compute) -> Json<crate::compute_prewarm::PrewarmState> {\n+    Json(compute.prewarm_state().await)\n+}\n+\n+// Following functions are marked async for axum, as it's more convenient than wrapping these\n+// in async lambdas at call site\n+\n+pub(in crate::http) async fn offload_state(compute: Compute) -> Json<PrewarmOffloadState> {\n+    Json(compute.prewarm_offload_state())\n+}\n+\n+pub(in crate::http) async fn prewarm(compute: Compute) -> Response {\n+    if compute.prewarm() {\n+        JsonResponse::success(StatusCode::OK, \"\")",
        "comment_created_at": "2025-05-05T17:53:15+00:00",
        "comment_author": "myrrc",
        "comment_body": "success doesn't allow you to omit the body",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2076082163",
    "pr_number": 11550,
    "pr_file": "compute_tools/src/http/routes/lfc.rs",
    "created_at": "2025-05-06T19:00:46+00:00",
    "commented_code": "+use crate::compute_prewarm::LfcPrewarmStateWithProgress;\n+use crate::http::JsonResponse;\n+use axum::response::Response;\n+use axum::{Json, http::StatusCode};\n+use compute_api::responses::LfcOffloadState;\n+type Compute = axum::extract::State<std::sync::Arc<crate::compute::ComputeNode>>;\n+\n+pub(in crate::http) async fn prewarm_state(compute: Compute) -> Json<LfcPrewarmStateWithProgress> {\n+    Json(compute.lfc_prewarm_state().await)\n+}\n+\n+// Following functions are marked async for axum, as it's more convenient than wrapping these\n+// in async lambdas at call site\n+\n+pub(in crate::http) async fn offload_state(compute: Compute) -> Json<LfcOffloadState> {\n+    Json(compute.lfc_offload_state())\n+}\n+\n+pub(in crate::http) async fn prewarm(compute: Compute) -> Response {\n+    if compute.prewarm_lfc() {\n+        JsonResponse::success(StatusCode::OK, \"\")",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2076082163",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/http/routes/lfc.rs",
        "discussion_id": "2076082163",
        "commented_code": "@@ -0,0 +1,39 @@\n+use crate::compute_prewarm::LfcPrewarmStateWithProgress;\n+use crate::http::JsonResponse;\n+use axum::response::Response;\n+use axum::{Json, http::StatusCode};\n+use compute_api::responses::LfcOffloadState;\n+type Compute = axum::extract::State<std::sync::Arc<crate::compute::ComputeNode>>;\n+\n+pub(in crate::http) async fn prewarm_state(compute: Compute) -> Json<LfcPrewarmStateWithProgress> {\n+    Json(compute.lfc_prewarm_state().await)\n+}\n+\n+// Following functions are marked async for axum, as it's more convenient than wrapping these\n+// in async lambdas at call site\n+\n+pub(in crate::http) async fn offload_state(compute: Compute) -> Json<LfcOffloadState> {\n+    Json(compute.lfc_offload_state())\n+}\n+\n+pub(in crate::http) async fn prewarm(compute: Compute) -> Response {\n+    if compute.prewarm_lfc() {\n+        JsonResponse::success(StatusCode::OK, \"\")",
        "comment_created_at": "2025-05-06T19:00:46+00:00",
        "comment_author": "tristan957",
        "comment_body": "```suggestion\r\n        StatusCode::ACCEPTED.into_response()\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2076084537",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "compute_tools/src/http/routes/lfc.rs",
        "discussion_id": "2076082163",
        "commented_code": "@@ -0,0 +1,39 @@\n+use crate::compute_prewarm::LfcPrewarmStateWithProgress;\n+use crate::http::JsonResponse;\n+use axum::response::Response;\n+use axum::{Json, http::StatusCode};\n+use compute_api::responses::LfcOffloadState;\n+type Compute = axum::extract::State<std::sync::Arc<crate::compute::ComputeNode>>;\n+\n+pub(in crate::http) async fn prewarm_state(compute: Compute) -> Json<LfcPrewarmStateWithProgress> {\n+    Json(compute.lfc_prewarm_state().await)\n+}\n+\n+// Following functions are marked async for axum, as it's more convenient than wrapping these\n+// in async lambdas at call site\n+\n+pub(in crate::http) async fn offload_state(compute: Compute) -> Json<LfcOffloadState> {\n+    Json(compute.lfc_offload_state())\n+}\n+\n+pub(in crate::http) async fn prewarm(compute: Compute) -> Response {\n+    if compute.prewarm_lfc() {\n+        JsonResponse::success(StatusCode::OK, \"\")",
        "comment_created_at": "2025-05-06T19:02:42+00:00",
        "comment_author": "tristan957",
        "comment_body": "Since this is an async request, `Accepted` would be the more appropriate status code.",
        "pr_file_module": null
      }
    ]
  }
]