[
  {
    "discussion_id": "2185943157",
    "pr_number": 12447,
    "pr_file": "test_runner/regress/test_lfc_prewarm.py",
    "created_at": "2025-07-04T18:59:02+00:00",
    "commented_code": "and prewarm_info[1] > 0",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2185943157",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12447,
        "pr_file": "test_runner/regress/test_lfc_prewarm.py",
        "discussion_id": "2185943157",
        "commented_code": "@@ -111,33 +152,32 @@ def test_lfc_prewarm(neon_simple_env: NeonEnv, query: LfcQueryMethod):\n         and prewarm_info[1] > 0",
        "comment_created_at": "2025-07-04T18:59:02+00:00",
        "comment_author": "ololobus",
        "comment_body": "Am I right that instead of these cryptic `prewarm_info[n]` you can use here `total, prewarmed, skipped` defined above?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2159120225",
    "pr_number": 12256,
    "pr_file": "test_runner/fixtures/neon_fixtures.py",
    "created_at": "2025-06-20T14:29:10+00:00",
    "commented_code": "pageserver_get_vectored_concurrent_io: str | None = None,\n         pageserver_tracing_config: PageserverTracingConfig | None = None,\n         pageserver_import_config: PageserverImportConfig | None = None,\n+        disable_kick_secondary_downloads: bool = False,",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2159120225",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12256,
        "pr_file": "test_runner/fixtures/neon_fixtures.py",
        "discussion_id": "2159120225",
        "commented_code": "@@ -453,6 +453,7 @@ def __init__(\n         pageserver_get_vectored_concurrent_io: str | None = None,\n         pageserver_tracing_config: PageserverTracingConfig | None = None,\n         pageserver_import_config: PageserverImportConfig | None = None,\n+        disable_kick_secondary_downloads: bool = False,",
        "comment_created_at": "2025-06-20T14:29:10+00:00",
        "comment_author": "jcsp",
        "comment_body": "something like `storcon_disable_kick_secondary_downloads` would make it a bit more obvious that this is storage controller related -- most of the other items here have a safekeeper_ or pageserver_prefix.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2159185193",
    "pr_number": 12256,
    "pr_file": "test_runner/regress/test_storage_controller.py",
    "created_at": "2025-06-20T15:07:29+00:00",
    "commented_code": "assert initial_ps.http_client().tenant_list_locations()[\"tenant_shards\"] == []\n \n \n+def test_attached_0_graceful_migration(neon_env_builder: NeonEnvBuilder):\n+    neon_env_builder.num_pageservers = 4\n+    neon_env_builder.num_azs = 2\n+\n+    neon_env_builder.disable_kick_secondary_downloads = True",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2159185193",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 12256,
        "pr_file": "test_runner/regress/test_storage_controller.py",
        "discussion_id": "2159185193",
        "commented_code": "@@ -4434,6 +4434,53 @@ def secondary_at_dest():\n         assert initial_ps.http_client().tenant_list_locations()[\"tenant_shards\"] == []\n \n \n+def test_attached_0_graceful_migration(neon_env_builder: NeonEnvBuilder):\n+    neon_env_builder.num_pageservers = 4\n+    neon_env_builder.num_azs = 2\n+\n+    neon_env_builder.disable_kick_secondary_downloads = True",
        "comment_created_at": "2025-06-20T15:07:29+00:00",
        "comment_author": "DimasKovas",
        "comment_body": "nit: it's more difficult to understand inverted boolean options (like \"disable\")\r\nAnd later this option converts to `kick_secondary_downloads`, which is even more frustrating\r\nLet's call it the same `kick_secondary_downloads` everywhere",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2066747533",
    "pr_number": 11550,
    "pr_file": "test_runner/regress/test_lfc_prewarm.py",
    "created_at": "2025-04-29T14:50:57+00:00",
    "commented_code": "import time\n \n import pytest\n+from fixtures.endpoint.http import EndpointHttpClient\n from fixtures.log_helper import log\n from fixtures.neon_fixtures import NeonEnv\n from fixtures.utils import USE_LFC\n+from prometheus_client.parser import text_string_to_metric_families as prom_parse_impl\n+\n+prewarm_label = \"compute_ctl_lfc_prewarm_requests_total\"\n+offload_label = \"compute_ctl_lfc_prewarm_offload_requests_total\"",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2066747533",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "test_runner/regress/test_lfc_prewarm.py",
        "discussion_id": "2066747533",
        "commented_code": "@@ -3,9 +3,14 @@\n import time\n \n import pytest\n+from fixtures.endpoint.http import EndpointHttpClient\n from fixtures.log_helper import log\n from fixtures.neon_fixtures import NeonEnv\n from fixtures.utils import USE_LFC\n+from prometheus_client.parser import text_string_to_metric_families as prom_parse_impl\n+\n+prewarm_label = \"compute_ctl_lfc_prewarm_requests_total\"\n+offload_label = \"compute_ctl_lfc_prewarm_offload_requests_total\"",
        "comment_created_at": "2025-04-29T14:50:57+00:00",
        "comment_author": "tristan957",
        "comment_body": "```suggestion\r\nPREWARM_LABEL = \"compute_ctl_lfc_prewarm_requests_total\"\r\nOFFLOAD_LABEL = \"compute_ctl_lfc_prewarm_offload_requests_total\"\r\n```\r\n\r\nCapitalize constants",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2073642163",
    "pr_number": 11550,
    "pr_file": "test_runner/regress/test_lfc_prewarm.py",
    "created_at": "2025-05-05T15:11:29+00:00",
    "commented_code": "assert n_pinned == 0\n \n \n+def prom_parse(client: EndpointHttpClient) -> dict[str, float]:\n+    return {\n+        sample.name: sample.value\n+        for family in prom_parse_impl(client.metrics())\n+        for sample in family.samples\n+        if sample.name in (PREWARM_LABEL, OFFLOAD_LABEL)\n+    }\n+\n+\n @pytest.mark.skipif(not USE_LFC, reason=\"LFC is disabled, skipping\")\n-def test_lfc_prewarm(neon_simple_env: NeonEnv):\n+@pytest.mark.parametrize(\"with_compute_ctl\", [False, True], ids=[\"pg-only\", \"compute-ctl\"])\n+def test_lfc_prewarm(neon_simple_env: NeonEnv, with_compute_ctl: bool):\n+    \"\"\"\n+    with_compute_ctl: Test compute ctl's methods instead of querying Postgres directly",
    "repo_full_name": "neondatabase/neon",
    "discussion_comments": [
      {
        "comment_id": "2073642163",
        "repo_full_name": "neondatabase/neon",
        "pr_number": 11550,
        "pr_file": "test_runner/regress/test_lfc_prewarm.py",
        "discussion_id": "2073642163",
        "commented_code": "@@ -19,11 +24,23 @@ def check_pinned_entries(cur):\n     assert n_pinned == 0\n \n \n+def prom_parse(client: EndpointHttpClient) -> dict[str, float]:\n+    return {\n+        sample.name: sample.value\n+        for family in prom_parse_impl(client.metrics())\n+        for sample in family.samples\n+        if sample.name in (PREWARM_LABEL, OFFLOAD_LABEL)\n+    }\n+\n+\n @pytest.mark.skipif(not USE_LFC, reason=\"LFC is disabled, skipping\")\n-def test_lfc_prewarm(neon_simple_env: NeonEnv):\n+@pytest.mark.parametrize(\"with_compute_ctl\", [False, True], ids=[\"pg-only\", \"compute-ctl\"])\n+def test_lfc_prewarm(neon_simple_env: NeonEnv, with_compute_ctl: bool):\n+    \"\"\"\n+    with_compute_ctl: Test compute ctl's methods instead of querying Postgres directly",
        "comment_created_at": "2025-05-05T15:11:29+00:00",
        "comment_author": "tristan957",
        "comment_body": "I typically think that booleans can be overloaded. For instance, you have to write this docstring to explain what `with_compute_ctl` means. I like to use enums in such cases.\r\n\r\n```\r\nfrom enum import Enum\r\n\r\nclass LfcQueryMethod(Enum)\r\n    COMPUTE_CTL\r\n    POSTGRES\r\n```\r\n\r\nMakes it a little more obvious. But I will leave it up to you, merely a suggestion on improving readability",
        "pr_file_module": null
      }
    ]
  }
]