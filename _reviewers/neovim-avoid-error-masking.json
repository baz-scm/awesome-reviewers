[
  {
    "discussion_id": "2164589796",
    "pr_number": 34523,
    "pr_file": "runtime/lua/vim/lsp/buf.lua",
    "created_at": "2025-06-24T17:54:50+00:00",
    "commented_code": "end\n end\n \n+--- @param callback? function\n+local function invoke_callback(callback, ...)\n+  if callback then\n+    pcall(callback, ...)",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "2164589796",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34523,
        "pr_file": "runtime/lua/vim/lsp/buf.lua",
        "discussion_id": "2164589796",
        "commented_code": "@@ -23,6 +23,13 @@ local function client_positional_params(params)\n   end\n end\n \n+--- @param callback? function\n+local function invoke_callback(callback, ...)\n+  if callback then\n+    pcall(callback, ...)",
        "comment_created_at": "2025-06-24T17:54:50+00:00",
        "comment_author": "lewis6991",
        "comment_body": "pcall masks errors. If you don't want errors to potentially mess up the flow then you can invoke the callback in `vim.schedule`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1217061102",
    "pr_number": 21818,
    "pr_file": "test/functional/shada/shada_spec.lua",
    "created_at": "2023-06-04T19:54:44+00:00",
    "commented_code": "session:close()\n     os.remove('NONE')\n   end)\n+\n+  it('does not store unlisted buffer', function()\n+    skip(is_os('win'))\n+\n+    local fname = funcs.getcwd() .. '/file'\n+    meths.set_var('__fname', fname)\n+    nvim_command('silent! edit `=__fname`')",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "1217061102",
        "repo_full_name": "neovim/neovim",
        "pr_number": 21818,
        "pr_file": "test/functional/shada/shada_spec.lua",
        "discussion_id": "1217061102",
        "commented_code": "@@ -264,4 +264,21 @@ describe('ShaDa support code', function()\n     session:close()\n     os.remove('NONE')\n   end)\n+\n+  it('does not store unlisted buffer', function()\n+    skip(is_os('win'))\n+\n+    local fname = funcs.getcwd() .. '/file'\n+    meths.set_var('__fname', fname)\n+    nvim_command('silent! edit `=__fname`')",
        "comment_created_at": "2023-06-04T19:54:44+00:00",
        "comment_author": "justinmk",
        "comment_body": "why silent with \"!\"? that silences errors...",
        "pr_file_module": null
      },
      {
        "comment_id": "1225771934",
        "repo_full_name": "neovim/neovim",
        "pr_number": 21818,
        "pr_file": "test/functional/shada/shada_spec.lua",
        "discussion_id": "1217061102",
        "commented_code": "@@ -264,4 +264,21 @@ describe('ShaDa support code', function()\n     session:close()\n     os.remove('NONE')\n   end)\n+\n+  it('does not store unlisted buffer', function()\n+    skip(is_os('win'))\n+\n+    local fname = funcs.getcwd() .. '/file'\n+    meths.set_var('__fname', fname)\n+    nvim_command('silent! edit `=__fname`')",
        "comment_created_at": "2023-06-11T10:37:35+00:00",
        "comment_author": "LhKipp",
        "comment_body": "Removed `silent!`.\r\nI've created this test by mostly copying from another one. The other one writes silently.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2171492343",
    "pr_number": 34140,
    "pr_file": "runtime/lua/vim/health/health.lua",
    "created_at": "2025-06-27T10:08:08+00:00",
    "commented_code": "else\n     health.warn('ripgrep not available')\n   end\n+  if vim.fn.executable('curl') == 1 then\n+    local curl_path = vim.fn.exepath('curl')\n+    local curl_out = vim.fn.system({ curl_path, '--version' })",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "2171492343",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34140,
        "pr_file": "runtime/lua/vim/health/health.lua",
        "discussion_id": "2171492343",
        "commented_code": "@@ -406,6 +406,56 @@ local function check_external_tools()\n   else\n     health.warn('ripgrep not available')\n   end\n+  if vim.fn.executable('curl') == 1 then\n+    local curl_path = vim.fn.exepath('curl')\n+    local curl_out = vim.fn.system({ curl_path, '--version' })",
        "comment_created_at": "2025-06-27T10:08:08+00:00",
        "comment_author": "justinmk",
        "comment_body": "use `vim.system():wait()`. that avoids fragile things like `vim.v.shell_error` :)",
        "pr_file_module": null
      },
      {
        "comment_id": "2173542047",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34140,
        "pr_file": "runtime/lua/vim/health/health.lua",
        "discussion_id": "2171492343",
        "commented_code": "@@ -406,6 +406,56 @@ local function check_external_tools()\n   else\n     health.warn('ripgrep not available')\n   end\n+  if vim.fn.executable('curl') == 1 then\n+    local curl_path = vim.fn.exepath('curl')\n+    local curl_out = vim.fn.system({ curl_path, '--version' })",
        "comment_created_at": "2025-06-28T22:29:18+00:00",
        "comment_author": "tampueroc",
        "comment_body": "Thank you for the suggestion!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2230104448",
    "pr_number": 34736,
    "pr_file": "test/functional/legacy/prompt_buffer_spec.lua",
    "created_at": "2025-07-25T04:22:42+00:00",
    "commented_code": "{1:~                        }|*3\n       {5:-- INSERT --}             |\n     ]])\n+    -- :edit doesn't apply on prompt buffer\n+    local can_edit, _ = pcall(api.nvim_command, 'edit')\n+    eq(can_edit, false, ':edit command in prompt buffer throws error')",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "2230104448",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34736,
        "pr_file": "test/functional/legacy/prompt_buffer_spec.lua",
        "discussion_id": "2230104448",
        "commented_code": "@@ -130,6 +130,10 @@ describe('prompt buffer', function()\n       {1:~                        }|*3\n       {5:-- INSERT --}             |\n     ]])\n+    -- :edit doesn't apply on prompt buffer\n+    local can_edit, _ = pcall(api.nvim_command, 'edit')\n+    eq(can_edit, false, ':edit command in prompt buffer throws error')",
        "comment_created_at": "2025-07-25T04:22:42+00:00",
        "comment_author": "justinmk",
        "comment_body": "`t.pcall_err`\n```suggestion\n    eq(':edit command in prompt buffer throws error',\n       t.pcall_err(api.nvim_command, 'edit'))\n```",
        "pr_file_module": null
      }
    ]
  }
]