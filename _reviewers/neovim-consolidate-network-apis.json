[
  {
    "discussion_id": "2227216225",
    "pr_number": 34707,
    "pr_file": "runtime/lua/vim/provider/health.lua",
    "created_at": "2025-07-24T03:02:39+00:00",
    "commented_code": "--- @param url string\n local function download(url)",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "2227216225",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34707,
        "pr_file": "runtime/lua/vim/provider/health.lua",
        "discussion_id": "2227216225",
        "commented_code": "@@ -426,12 +431,15 @@ end\n --- @param url string\n local function download(url)",
        "comment_created_at": "2025-07-24T03:02:39+00:00",
        "comment_author": "justinmk",
        "comment_body": "side note: could drop this and use `vim.net.request()` now ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2227788316",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34707,
        "pr_file": "runtime/lua/vim/provider/health.lua",
        "discussion_id": "2227216225",
        "commented_code": "@@ -426,12 +431,15 @@ end\n --- @param url string\n local function download(url)",
        "comment_created_at": "2025-07-24T08:12:32+00:00",
        "comment_author": "yochem",
        "comment_body": "Thought so too but didn't want to include it in this PR. I'll create a pr later and search through the codebase for custom `download` functions or calls to `curl`. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2163418518",
    "pr_number": 34140,
    "pr_file": "runtime/plugin/net.lua",
    "created_at": "2025-06-24T09:17:14+00:00",
    "commented_code": "+if vim.g.loaded_remote_file_loader then\n+  return\n+end\n+vim.g.loaded_remote_file_loader = true\n+\n+if not vim.net or type(vim.net.request) ~= 'function' then",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "2163418518",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34140,
        "pr_file": "runtime/plugin/net.lua",
        "discussion_id": "2163418518",
        "commented_code": "@@ -0,0 +1,45 @@\n+if vim.g.loaded_remote_file_loader then\n+  return\n+end\n+vim.g.loaded_remote_file_loader = true\n+\n+if not vim.net or type(vim.net.request) ~= 'function' then",
        "comment_created_at": "2025-06-24T09:17:14+00:00",
        "comment_author": "clason",
        "comment_body": "Don't need that guard -- we _know_ `vim.net` is available because we put it there.\r\n\r\nThe correct guard would be having `curl` available -- but be careful about `executable` having performance issues on Windows.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2178619418",
    "pr_number": 34140,
    "pr_file": "test/functional/lua/net_spec.lua",
    "created_at": "2025-07-01T22:10:32+00:00",
    "commented_code": "+local n = require('test.functional.testnvim')()\n+\n+local exec_lua = n.exec_lua\n+\n+local function assert_404_error(err)\n+  assert(\n+    err:lower():find('404') or err:find('22'),\n+    'Expected HTTP 404 or exit code 22, got: ' .. tostring(err)\n+  )\n+end\n+\n+describe('vim.net.request', function()\n+  before_each(function()\n+    n:clear()\n+  end)\n+\n+  it('fetches a URL into memory (async success)', function()\n+    local content = exec_lua([[\n+      local done = false\n+      local result\n+      local M = require('vim.net')\n+\n+      M.request(\"https://httpbingo.org/anything\", { retry = 3 }, function(err, body)",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "2178619418",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34140,
        "pr_file": "test/functional/lua/net_spec.lua",
        "discussion_id": "2178619418",
        "commented_code": "@@ -0,0 +1,80 @@\n+local n = require('test.functional.testnvim')()\n+\n+local exec_lua = n.exec_lua\n+\n+local function assert_404_error(err)\n+  assert(\n+    err:lower():find('404') or err:find('22'),\n+    'Expected HTTP 404 or exit code 22, got: ' .. tostring(err)\n+  )\n+end\n+\n+describe('vim.net.request', function()\n+  before_each(function()\n+    n:clear()\n+  end)\n+\n+  it('fetches a URL into memory (async success)', function()\n+    local content = exec_lua([[\n+      local done = false\n+      local result\n+      local M = require('vim.net')\n+\n+      M.request(\"https://httpbingo.org/anything\", { retry = 3 }, function(err, body)",
        "comment_created_at": "2025-07-01T22:10:32+00:00",
        "comment_author": "justinmk",
        "comment_body": "I suppose this can be a followup, but mentioning before I forget:\r\n\r\nwe will need to define new `NVIM_TEST_INTEG` env var and document it here: https://github.com/neovim/neovim/blob/f731766474901e5e345e0ca630315ef69122e556/test/README.md?plain=1#L436\r\n\r\nIt should be disabled by default. When enabled, it enables these tests which make network calls. Can use `t.skip()` to guard these tests, or define something like `skip_integ` similar to :  https://github.com/neovim/neovim/blob/f731766474901e5e345e0ca630315ef69122e556/test/testutil.lua#L837",
        "pr_file_module": null
      },
      {
        "comment_id": "2179436083",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34140,
        "pr_file": "test/functional/lua/net_spec.lua",
        "discussion_id": "2178619418",
        "commented_code": "@@ -0,0 +1,80 @@\n+local n = require('test.functional.testnvim')()\n+\n+local exec_lua = n.exec_lua\n+\n+local function assert_404_error(err)\n+  assert(\n+    err:lower():find('404') or err:find('22'),\n+    'Expected HTTP 404 or exit code 22, got: ' .. tostring(err)\n+  )\n+end\n+\n+describe('vim.net.request', function()\n+  before_each(function()\n+    n:clear()\n+  end)\n+\n+  it('fetches a URL into memory (async success)', function()\n+    local content = exec_lua([[\n+      local done = false\n+      local result\n+      local M = require('vim.net')\n+\n+      M.request(\"https://httpbingo.org/anything\", { retry = 3 }, function(err, body)",
        "comment_created_at": "2025-07-02T08:21:37+00:00",
        "comment_author": "tampueroc",
        "comment_body": "Noted!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2203514401",
    "pr_number": 34140,
    "pr_file": "test/functional/lua/net_spec.lua",
    "created_at": "2025-07-13T20:26:47+00:00",
    "commented_code": "+local n = require('test.functional.testnvim')()\n+local t = require('test.testutil')\n+local skip_integ = os.getenv('NVIM_TEST_INTEG') ~= '1'\n+\n+local exec_lua = n.exec_lua\n+\n+local function assert_404_error(err)\n+  assert(\n+    err:lower():find('404') or err:find('22'),\n+    'Expected HTTP 404 or exit code 22, got: ' .. tostring(err)\n+  )\n+end\n+\n+describe('vim.net.request', function()\n+  before_each(function()\n+    n:clear()\n+  end)\n+\n+  it('fetches a URL into memory (async success)', function()",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "2203514401",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34140,
        "pr_file": "test/functional/lua/net_spec.lua",
        "discussion_id": "2203514401",
        "commented_code": "@@ -0,0 +1,60 @@\n+local n = require('test.functional.testnvim')()\n+local t = require('test.testutil')\n+local skip_integ = os.getenv('NVIM_TEST_INTEG') ~= '1'\n+\n+local exec_lua = n.exec_lua\n+\n+local function assert_404_error(err)\n+  assert(\n+    err:lower():find('404') or err:find('22'),\n+    'Expected HTTP 404 or exit code 22, got: ' .. tostring(err)\n+  )\n+end\n+\n+describe('vim.net.request', function()\n+  before_each(function()\n+    n:clear()\n+  end)\n+\n+  it('fetches a URL into memory (async success)', function()",
        "comment_created_at": "2025-07-13T20:26:47+00:00",
        "comment_author": "justinmk",
        "comment_body": "let's also have a test that tests text response and binary response (jpg or something)",
        "pr_file_module": null
      }
    ]
  }
]