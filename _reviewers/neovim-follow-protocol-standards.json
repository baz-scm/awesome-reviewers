[
  {
    "discussion_id": "2196000770",
    "pr_number": 34860,
    "pr_file": "src/nvim/vterm/state.c",
    "created_at": "2025-07-09T21:16:30+00:00",
    "commented_code": "#define strneq(a, b, n) (strncmp(a, b, n) == 0)\n \n+// Primary Device Attributes (DA1) response.\n+// We make this a global (extern) variable so that we can override it with FFI\n+// in tests.\n+char vterm_primary_device_attr[] = \"1;2;52\";",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "2196000770",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34860,
        "pr_file": "src/nvim/vterm/state.c",
        "discussion_id": "2196000770",
        "commented_code": "@@ -17,6 +17,11 @@\n \n #define strneq(a, b, n) (strncmp(a, b, n) == 0)\n \n+// Primary Device Attributes (DA1) response.\n+// We make this a global (extern) variable so that we can override it with FFI\n+// in tests.\n+char vterm_primary_device_attr[] = \"1;2;52\";",
        "comment_created_at": "2025-07-09T21:16:30+00:00",
        "comment_author": "j4james",
        "comment_body": "FYI, the `1;2` response is a device-specific format that predates DEC's standardization of the `DA` response. The second parameter is actually a bitfield value that represents extensions specific to the VT100 range of devices. It isn't expected to have additional parameters after it.\r\n\r\nIf you want to indicate a level-1 device using the _standard_ `DA` format, the first parameter should be `61`, and then any additional parameters represent the supported extensions. For example, a level-1 device with just the new clipboard extension would be `61;52`.\r\n\r\nProbably not super important, though, since many apps that parse the `DA` response will likely ignore the first parameter anyway.",
        "pr_file_module": null
      },
      {
        "comment_id": "2196106039",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34860,
        "pr_file": "src/nvim/vterm/state.c",
        "discussion_id": "2196000770",
        "commented_code": "@@ -17,6 +17,11 @@\n \n #define strneq(a, b, n) (strncmp(a, b, n) == 0)\n \n+// Primary Device Attributes (DA1) response.\n+// We make this a global (extern) variable so that we can override it with FFI\n+// in tests.\n+char vterm_primary_device_attr[] = \"1;2;52\";",
        "comment_created_at": "2025-07-09T22:24:45+00:00",
        "comment_author": "gpanders",
        "comment_body": "Thanks for that info! vterm was already using `1;2` so I just appended `52` here, but this seems like a good opportunity to modernize this.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2234614024",
    "pr_number": 34586,
    "pr_file": "src/nvim/ui_client.c",
    "created_at": "2025-07-28T04:07:21+00:00",
    "commented_code": "(const schar_T *)grid_line_buf_char, grid_line_buf_attr);\n }\n \n+void ui_client_event_connect(Array args)\n+{\n+  if (args.size < 1 || args.items[0].type != kObjectTypeString) {\n+    ELOG(\"Error handling UI event 'connect'\");\n+    return;\n+  }\n+\n+  char *server_address = args.items[0].data.string.data;\n+  multiqueue_put(main_loop.fast_events, channel_connect_event, server_address);\n+}\n+\n+static void channel_connect_event(void **argv)\n+{\n+  char *server_address = argv[0];\n+\n+  const char *error = \"\";\n+  bool is_tcp = strrchr(server_address, ':') ? true : false;",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "2234614024",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34586,
        "pr_file": "src/nvim/ui_client.c",
        "discussion_id": "2234614024",
        "commented_code": "@@ -283,6 +283,38 @@ void ui_client_event_raw_line(GridLineEvent *g)\n                (const schar_T *)grid_line_buf_char, grid_line_buf_attr);\n }\n \n+void ui_client_event_connect(Array args)\n+{\n+  if (args.size < 1 || args.items[0].type != kObjectTypeString) {\n+    ELOG(\"Error handling UI event 'connect'\");\n+    return;\n+  }\n+\n+  char *server_address = args.items[0].data.string.data;\n+  multiqueue_put(main_loop.fast_events, channel_connect_event, server_address);\n+}\n+\n+static void channel_connect_event(void **argv)\n+{\n+  char *server_address = argv[0];\n+\n+  const char *error = \"\";\n+  bool is_tcp = strrchr(server_address, ':') ? true : false;",
        "comment_created_at": "2025-07-28T04:07:21+00:00",
        "comment_author": "justinmk",
        "comment_body": "```suggestion\n  bool is_tcp = !!strrchr(server_address, ':');\n```",
        "pr_file_module": null
      }
    ]
  }
]