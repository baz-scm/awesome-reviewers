[
  {
    "discussion_id": "2189790455",
    "pr_number": 34788,
    "pr_file": "runtime/doc/gui.txt",
    "created_at": "2025-07-07T11:32:37+00:00",
    "commented_code": "event, this command is equivalent to `:qall`.\n                 Note: Only works if the UI and server are on the same system.\n \n-:restart!",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "2189790455",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34788,
        "pr_file": "runtime/doc/gui.txt",
        "discussion_id": "2189790455",
        "commented_code": "@@ -82,9 +82,6 @@ Restart Nvim\n                 event, this command is equivalent to `:qall`.\n                 Note: Only works if the UI and server are on the same system.\n \n-:restart!",
        "comment_created_at": "2025-07-07T11:32:37+00:00",
        "comment_author": "justinmk",
        "comment_body": "does the `This fails when changes have been made` note need to be updated? Also should mention `:confirm restart` as a hint.",
        "pr_file_module": null
      },
      {
        "comment_id": "2189866443",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34788,
        "pr_file": "runtime/doc/gui.txt",
        "discussion_id": "2189790455",
        "commented_code": "@@ -82,9 +82,6 @@ Restart Nvim\n                 event, this command is equivalent to `:qall`.\n                 Note: Only works if the UI and server are on the same system.\n \n-:restart!",
        "comment_created_at": "2025-07-07T12:07:22+00:00",
        "comment_author": "sathya-pramodh",
        "comment_body": "The last part `and Vim refuses to |abandon| the current buffer` should be removed i think. It does fail if changes are made. I could just rewrite the line as: `This fails when changes have been made. Use :confirm restart to override.`",
        "pr_file_module": null
      },
      {
        "comment_id": "2189943484",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34788,
        "pr_file": "runtime/doc/gui.txt",
        "discussion_id": "2189790455",
        "commented_code": "@@ -82,9 +82,6 @@ Restart Nvim\n                 event, this command is equivalent to `:qall`.\n                 Note: Only works if the UI and server are on the same system.\n \n-:restart!",
        "comment_created_at": "2025-07-07T12:33:59+00:00",
        "comment_author": "justinmk",
        "comment_body": "If it checks changes by default then :confirm is never needed? It probably makes sense to *not* check changes by default, then user can opt-in to checking changes via :confirm.",
        "pr_file_module": null
      },
      {
        "comment_id": "2190023264",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34788,
        "pr_file": "runtime/doc/gui.txt",
        "discussion_id": "2189790455",
        "commented_code": "@@ -82,9 +82,6 @@ Restart Nvim\n                 event, this command is equivalent to `:qall`.\n                 Note: Only works if the UI and server are on the same system.\n \n-:restart!",
        "comment_created_at": "2025-07-07T13:05:39+00:00",
        "comment_author": "sathya-pramodh",
        "comment_body": "Running \":confirm restart\" when not checking for changes by default in `ex_restart` runs \":qall\" on the old server. This would still check for changes and the old server would never exit because of that.",
        "pr_file_module": null
      },
      {
        "comment_id": "2191270288",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34788,
        "pr_file": "runtime/doc/gui.txt",
        "discussion_id": "2189790455",
        "commented_code": "@@ -82,9 +82,6 @@ Restart Nvim\n                 event, this command is equivalent to `:qall`.\n                 Note: Only works if the UI and server are on the same system.\n \n-:restart!",
        "comment_created_at": "2025-07-08T01:03:12+00:00",
        "comment_author": "justinmk",
        "comment_body": "docs should also show a +cmd example",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2203419201",
    "pr_number": 34914,
    "pr_file": "runtime/doc/treesitter.txt",
    "created_at": "2025-07-13T14:59:47+00:00",
    "commented_code": "buffer, use `:write` to save it. You can find example queries at\n     `$VIMRUNTIME/queries/`.\n \n+    You may supply a language argument to `:EditQuery` for injected languages",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "2203419201",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34914,
        "pr_file": "runtime/doc/treesitter.txt",
        "discussion_id": "2203419201",
        "commented_code": "@@ -1328,6 +1328,9 @@ edit({lang})                                     *vim.treesitter.query.edit()*\n     buffer, use `:write` to save it. You can find example queries at\n     `$VIMRUNTIME/queries/`.\n \n+    You may supply a language argument to `:EditQuery` for injected languages",
        "comment_created_at": "2025-07-13T14:59:47+00:00",
        "comment_author": "justinmk",
        "comment_body": "instead of mentioning this in a different place, add a line after line 1324 like\n\n    `:EditQuery <tab>` completes injected language names.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2168698369",
    "pr_number": 34388,
    "pr_file": "runtime/doc/lsp.txt",
    "created_at": "2025-06-26T10:04:32+00:00",
    "commented_code": "(`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.linked_editing_range            *lsp-linked_editing_range*\n+",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "2168698369",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34388,
        "pr_file": "runtime/doc/lsp.txt",
        "discussion_id": "2168698369",
        "commented_code": "@@ -2292,6 +2292,29 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.linked_editing_range            *lsp-linked_editing_range*\n+",
        "comment_created_at": "2025-06-26T10:04:32+00:00",
        "comment_author": "justinmk",
        "comment_body": "should the module `@brief` mention what \"linked editing session\" is? Not obvious to me. Also linking to the spec section helps.",
        "pr_file_module": null
      },
      {
        "comment_id": "2169014150",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34388,
        "pr_file": "runtime/doc/lsp.txt",
        "discussion_id": "2168698369",
        "commented_code": "@@ -2292,6 +2292,29 @@ is_enabled({bufnr})                      *vim.lsp.document_color.is_enabled()*\n         (`boolean`)\n \n \n+==============================================================================\n+Lua module: vim.lsp.linked_editing_range            *lsp-linked_editing_range*\n+",
        "comment_created_at": "2025-06-26T12:59:06+00:00",
        "comment_author": "ribru17",
        "comment_body": "great idea",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1617946189",
    "pr_number": 29073,
    "pr_file": "runtime/doc/lua-plugin.txt",
    "created_at": "2024-05-28T22:13:34+00:00",
    "commented_code": "+*lua-plugin.txt*                     Nvim\n+\n+                            NVIM REFERENCE MANUAL\n+\n+\t\t  Guide to developing Lua plugins for Nvim\n+\n+\n+                                       Type |gO| to see the table of contents.\n+\n+==============================================================================\n+Introduction                                                       *lua-plugin*\n+\n+This is a guide for getting started with Nvim plugin development. It is not",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "1617946189",
        "repo_full_name": "neovim/neovim",
        "pr_number": 29073,
        "pr_file": "runtime/doc/lua-plugin.txt",
        "discussion_id": "1617946189",
        "commented_code": "@@ -0,0 +1,433 @@\n+*lua-plugin.txt*                     Nvim\n+\n+                            NVIM REFERENCE MANUAL\n+\n+\t\t  Guide to developing Lua plugins for Nvim\n+\n+\n+                                       Type |gO| to see the table of contents.\n+\n+==============================================================================\n+Introduction                                                       *lua-plugin*\n+\n+This is a guide for getting started with Nvim plugin development. It is not",
        "comment_created_at": "2024-05-28T22:13:34+00:00",
        "comment_author": "mfussenegger",
        "comment_body": "Reading this I got the impression that this is more an intermediate best practice guide and not a beginner getting started guide.   Maybe this could be rephrased a bit, with more references to the other content? \r\n(E.g compare with the `:h write-plugin` intro)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1617950670",
        "repo_full_name": "neovim/neovim",
        "pr_number": 29073,
        "pr_file": "runtime/doc/lua-plugin.txt",
        "discussion_id": "1617946189",
        "commented_code": "@@ -0,0 +1,433 @@\n+*lua-plugin.txt*                     Nvim\n+\n+                            NVIM REFERENCE MANUAL\n+\n+\t\t  Guide to developing Lua plugins for Nvim\n+\n+\n+                                       Type |gO| to see the table of contents.\n+\n+==============================================================================\n+Introduction                                                       *lua-plugin*\n+\n+This is a guide for getting started with Nvim plugin development. It is not",
        "comment_created_at": "2024-05-28T22:20:43+00:00",
        "comment_author": "mrcjkb",
        "comment_body": "How about  I remove the \"getting started with\"?",
        "pr_file_module": null
      },
      {
        "comment_id": "1618452592",
        "repo_full_name": "neovim/neovim",
        "pr_number": 29073,
        "pr_file": "runtime/doc/lua-plugin.txt",
        "discussion_id": "1617946189",
        "commented_code": "@@ -0,0 +1,433 @@\n+*lua-plugin.txt*                     Nvim\n+\n+                            NVIM REFERENCE MANUAL\n+\n+\t\t  Guide to developing Lua plugins for Nvim\n+\n+\n+                                       Type |gO| to see the table of contents.\n+\n+==============================================================================\n+Introduction                                                       *lua-plugin*\n+\n+This is a guide for getting started with Nvim plugin development. It is not",
        "comment_created_at": "2024-05-29T08:34:59+00:00",
        "comment_author": "dundargoc",
        "comment_body": "Let's change the content to be beginner friendly instead with a way to \"advance\" to the more intermediate topics.",
        "pr_file_module": null
      },
      {
        "comment_id": "1618453510",
        "repo_full_name": "neovim/neovim",
        "pr_number": 29073,
        "pr_file": "runtime/doc/lua-plugin.txt",
        "discussion_id": "1617946189",
        "commented_code": "@@ -0,0 +1,433 @@\n+*lua-plugin.txt*                     Nvim\n+\n+                            NVIM REFERENCE MANUAL\n+\n+\t\t  Guide to developing Lua plugins for Nvim\n+\n+\n+                                       Type |gO| to see the table of contents.\n+\n+==============================================================================\n+Introduction                                                       *lua-plugin*\n+\n+This is a guide for getting started with Nvim plugin development. It is not",
        "comment_created_at": "2024-05-29T08:35:36+00:00",
        "comment_author": "dundargoc",
        "comment_body": "I'll rereview it when I have more time with more useful comments.",
        "pr_file_module": null
      },
      {
        "comment_id": "1619075621",
        "repo_full_name": "neovim/neovim",
        "pr_number": 29073,
        "pr_file": "runtime/doc/lua-plugin.txt",
        "discussion_id": "1617946189",
        "commented_code": "@@ -0,0 +1,433 @@\n+*lua-plugin.txt*                     Nvim\n+\n+                            NVIM REFERENCE MANUAL\n+\n+\t\t  Guide to developing Lua plugins for Nvim\n+\n+\n+                                       Type |gO| to see the table of contents.\n+\n+==============================================================================\n+Introduction                                                       *lua-plugin*\n+\n+This is a guide for getting started with Nvim plugin development. It is not",
        "comment_created_at": "2024-05-29T15:17:20+00:00",
        "comment_author": "mfussenegger",
        "comment_body": "I'm not sure if just removing \"getting started\" will cut it. I think it would need some more wording updates to position this content a bit differently. It feels more like `plugin-ui-patterns` than `lua-plugin`.\r\n\r\nIt talks about:\r\n\r\n- Best practices in regards to keymap definitions for users\r\n    - Could tie into `lua-guide-mappings`\r\n- Best practices on how to expose configuration options to users\r\n- Best practices on how to design command APIs\r\n    - Could tie into `lua-guide-commands`\r\n\r\n- Performance considerations\r\n    - Partly covered by `lua-guide-modules` and `lua-module-load` and also related to `autoload`\r\n\r\nNone of this is beginner content for how to get a plugin working.\r\nAnd many parts are not exclusive to Lua.\r\n\r\nWhat I'd expect from a \"How to write a plugin\" targeted towards beginner is:\r\n\r\n- Language choices and link to resources to learn them (vim, lua, but also external providers)\r\n- Entry points (runtime path, packages, plugin/, ftplugin, ftdetect, autocmd hooks)\r\n- Available APIs\r\n\r\nBut we also shouldn't duplicate that, a lot of it is covered via `lua-guide` and the various vim resources. I also suspect that writing something like this is not what Justin had in mind, but rather something that's closer to the style of `:h dev-patterns`\r\n\r\n\r\nBut let's wait for @justinmk to clarify what his intentions were.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2174705727",
    "pr_number": 34474,
    "pr_file": "runtime/doc/news.txt",
    "created_at": "2025-06-30T10:03:07+00:00",
    "commented_code": "\u2022 The function form of `cmd` in a vim.lsp.Config or vim.lsp.ClientConfig\n   receives the resolved config as the second arg: `cmd(dispatchers, config)`.\n \u2022 Support for annotated text edits.\n+\u2022 LSP `DiagnosticRelatedInformation` is now shown in\n+  |vim.diagnostic.open_float()|. They are read from the private field\n+  `_related_information` of |vim.Diagnostic.Set|, which is populated when\n+  diagnostics are received from an LSP client. This is similar to\n+  `DiagnosticTag`s and the `_tags` field.",
    "repo_full_name": "neovim/neovim",
    "discussion_comments": [
      {
        "comment_id": "2174705727",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34474,
        "pr_file": "runtime/doc/news.txt",
        "discussion_id": "2174705727",
        "commented_code": "@@ -192,6 +192,11 @@ LSP\n \u2022 The function form of `cmd` in a vim.lsp.Config or vim.lsp.ClientConfig\n   receives the resolved config as the second arg: `cmd(dispatchers, config)`.\n \u2022 Support for annotated text edits.\n+\u2022 LSP `DiagnosticRelatedInformation` is now shown in\n+  |vim.diagnostic.open_float()|. They are read from the private field\n+  `_related_information` of |vim.Diagnostic.Set|, which is populated when\n+  diagnostics are received from an LSP client. This is similar to\n+  `DiagnosticTag`s and the `_tags` field.",
        "comment_created_at": "2025-06-30T10:03:07+00:00",
        "comment_author": "justinmk",
        "comment_body": "non-blocker: should we mention something in lsp.txt (not the private fields, but just something like \"DiagnosticRelatedInformation is supported/included\")? I looked around and the best place would be a `@brief` in `lsp/diagnostic.lua` , then it will appear in the \"overview\" part of `:help lsp-diagnostic`\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2175146846",
        "repo_full_name": "neovim/neovim",
        "pr_number": 34474,
        "pr_file": "runtime/doc/news.txt",
        "discussion_id": "2174705727",
        "commented_code": "@@ -192,6 +192,11 @@ LSP\n \u2022 The function form of `cmd` in a vim.lsp.Config or vim.lsp.ClientConfig\n   receives the resolved config as the second arg: `cmd(dispatchers, config)`.\n \u2022 Support for annotated text edits.\n+\u2022 LSP `DiagnosticRelatedInformation` is now shown in\n+  |vim.diagnostic.open_float()|. They are read from the private field\n+  `_related_information` of |vim.Diagnostic.Set|, which is populated when\n+  diagnostics are received from an LSP client. This is similar to\n+  `DiagnosticTag`s and the `_tags` field.",
        "comment_created_at": "2025-06-30T13:56:26+00:00",
        "comment_author": "ribru17",
        "comment_body": "Perfect, I'll do that. FYI the next push will remove the private field per maria's review comment :+1: ",
        "pr_file_module": null
      }
    ]
  }
]