[
  {
    "discussion_id": "2051603434",
    "pr_number": 14987,
    "pr_file": "packages/platform-fastify/decorators/schema.decorator.ts",
    "created_at": "2025-04-20T00:06:02+00:00",
    "commented_code": "+import { SetMetadata } from '@nestjs/common';\n+import { FASTIFY_SCHEMA_METADATA } from '../constants';\n+import { RouteShorthandOptions } from 'fastify';\n+\n+/**\n+ * @publicApi\n+ *\n+ * @param schema See {@link https://fastify.dev/docs/latest/Reference/Validation-and-Serialization/}\n+ */\n+export const Schema = (schema: RouteShorthandOptions['schema']) =>",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "2051603434",
        "repo_full_name": "nestjs/nest",
        "pr_number": 14987,
        "pr_file": "packages/platform-fastify/decorators/schema.decorator.ts",
        "discussion_id": "2051603434",
        "commented_code": "@@ -0,0 +1,11 @@\n+import { SetMetadata } from '@nestjs/common';\n+import { FASTIFY_SCHEMA_METADATA } from '../constants';\n+import { RouteShorthandOptions } from 'fastify';\n+\n+/**\n+ * @publicApi\n+ *\n+ * @param schema See {@link https://fastify.dev/docs/latest/Reference/Validation-and-Serialization/}\n+ */\n+export const Schema = (schema: RouteShorthandOptions['schema']) =>",
        "comment_created_at": "2025-04-20T00:06:02+00:00",
        "comment_author": "micalevisk",
        "comment_body": "I prefer the `RouteSchema` name (`route-schema.decorator.ts`). Kinda following the same convention as the others decorators ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1096735026",
    "pr_number": 11044,
    "pr_file": "packages/common/pipes/file/parse-file.pipe.ts",
    "created_at": "2023-02-05T16:27:03+00:00",
    "commented_code": "}\n \n   async transform(value: any): Promise<any> {\n-    if (this.thereAreNoFilesIn(value)) {\n-      if (this.fileIsRequired) {\n-        throw this.exceptionFactory('File is required');\n-      }\n-      return value;\n-    }\n+    const areThereNoFileIn = this.thereAreNoFilesIn(value);\n \n-    if (this.validators.length) {\n-      if (Array.isArray(value)) {\n-        await this.validateFiles(value);\n-      } else {\n-        await this.validate(value);\n-      }\n-    }\n+    if (areThereNoFileIn && this.fileIsRequired)\n+      throw this.exceptionFactory('File is required');\n+\n+    if (!areThereNoFileIn && this.validators.length)\n+      await this.validateFilesOrFile(value);\n \n     return value;\n   }\n \n-  private validateFiles(files: any[]): Promise<any[]> {\n-    return Promise.all(files.map(f => this.validate(f)));\n+  private async validateFilesOrFile(value: any): Promise<void> {",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1096735026",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11044,
        "pr_file": "packages/common/pipes/file/parse-file.pipe.ts",
        "discussion_id": "1096735026",
        "commented_code": "@@ -39,26 +39,23 @@ export class ParseFilePipe implements PipeTransform<any> {\n   }\n \n   async transform(value: any): Promise<any> {\n-    if (this.thereAreNoFilesIn(value)) {\n-      if (this.fileIsRequired) {\n-        throw this.exceptionFactory('File is required');\n-      }\n-      return value;\n-    }\n+    const areThereNoFileIn = this.thereAreNoFilesIn(value);\n \n-    if (this.validators.length) {\n-      if (Array.isArray(value)) {\n-        await this.validateFiles(value);\n-      } else {\n-        await this.validate(value);\n-      }\n-    }\n+    if (areThereNoFileIn && this.fileIsRequired)\n+      throw this.exceptionFactory('File is required');\n+\n+    if (!areThereNoFileIn && this.validators.length)\n+      await this.validateFilesOrFile(value);\n \n     return value;\n   }\n \n-  private validateFiles(files: any[]): Promise<any[]> {\n-    return Promise.all(files.map(f => this.validate(f)));\n+  private async validateFilesOrFile(value: any): Promise<void> {",
        "comment_created_at": "2023-02-05T16:27:03+00:00",
        "comment_author": "micalevisk",
        "comment_body": "what do you think on renaming `value` to `fileOrFiles` or `filesOrFile`",
        "pr_file_module": null
      },
      {
        "comment_id": "1096739265",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11044,
        "pr_file": "packages/common/pipes/file/parse-file.pipe.ts",
        "discussion_id": "1096735026",
        "commented_code": "@@ -39,26 +39,23 @@ export class ParseFilePipe implements PipeTransform<any> {\n   }\n \n   async transform(value: any): Promise<any> {\n-    if (this.thereAreNoFilesIn(value)) {\n-      if (this.fileIsRequired) {\n-        throw this.exceptionFactory('File is required');\n-      }\n-      return value;\n-    }\n+    const areThereNoFileIn = this.thereAreNoFilesIn(value);\n \n-    if (this.validators.length) {\n-      if (Array.isArray(value)) {\n-        await this.validateFiles(value);\n-      } else {\n-        await this.validate(value);\n-      }\n-    }\n+    if (areThereNoFileIn && this.fileIsRequired)\n+      throw this.exceptionFactory('File is required');\n+\n+    if (!areThereNoFileIn && this.validators.length)\n+      await this.validateFilesOrFile(value);\n \n     return value;\n   }\n \n-  private validateFiles(files: any[]): Promise<any[]> {\n-    return Promise.all(files.map(f => this.validate(f)));\n+  private async validateFilesOrFile(value: any): Promise<void> {",
        "comment_created_at": "2023-02-05T16:54:53+00:00",
        "comment_author": "mohamadrezamomeni",
        "comment_body": "I replace this method with another method because Input of this method may be array or not. I think It's better. I use specific type for input of this method",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "762911729",
    "pr_number": 8738,
    "pr_file": "packages/core/nest-application-context.ts",
    "created_at": "2021-12-06T11:12:45+00:00",
    "commented_code": "public useLogger(logger: LoggerService | LogLevel[] | false) {\n     Logger.overrideLogger(logger);\n+\n+    if (this.flushLogsOnOverride) {\n+      this.flushLogs();\n+    }\n   }\n \n   public flushLogs() {\n     Logger.flush();\n   }\n \n+  public shouldFlushLogsOnOverride() {",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "762911729",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8738,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "762911729",
        "commented_code": "@@ -131,12 +133,20 @@ export class NestApplicationContext implements INestApplicationContext {\n \n   public useLogger(logger: LoggerService | LogLevel[] | false) {\n     Logger.overrideLogger(logger);\n+\n+    if (this.flushLogsOnOverride) {\n+      this.flushLogs();\n+    }\n   }\n \n   public flushLogs() {\n     Logger.flush();\n   }\n \n+  public shouldFlushLogsOnOverride() {",
        "comment_created_at": "2021-12-06T11:12:45+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "`should` word indicates here that this method should return a boolean (and shouldn't update anything itself) - it's a common convention (is/has/should)",
        "pr_file_module": null
      },
      {
        "comment_id": "763021107",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8738,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "762911729",
        "commented_code": "@@ -131,12 +133,20 @@ export class NestApplicationContext implements INestApplicationContext {\n \n   public useLogger(logger: LoggerService | LogLevel[] | false) {\n     Logger.overrideLogger(logger);\n+\n+    if (this.flushLogsOnOverride) {\n+      this.flushLogs();\n+    }\n   }\n \n   public flushLogs() {\n     Logger.flush();\n   }\n \n+  public shouldFlushLogsOnOverride() {",
        "comment_created_at": "2021-12-06T13:48:14+00:00",
        "comment_author": "micalevisk",
        "comment_body": "oh right.\r\n\r\nCan we have `shouldFlushLogsOnOverride: boolean`, and `flushLogsOnOverride(): void` method instead? Otherwise I'll add `setFlushLogsOnOverride(value: boolean)`\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "763766212",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8738,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "762911729",
        "commented_code": "@@ -131,12 +133,20 @@ export class NestApplicationContext implements INestApplicationContext {\n \n   public useLogger(logger: LoggerService | LogLevel[] | false) {\n     Logger.overrideLogger(logger);\n+\n+    if (this.flushLogsOnOverride) {\n+      this.flushLogs();\n+    }\n   }\n \n   public flushLogs() {\n     Logger.flush();\n   }\n \n+  public shouldFlushLogsOnOverride() {",
        "comment_created_at": "2021-12-07T08:50:41+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "> Can we have shouldFlushLogsOnOverride: boolean, and flushLogsOnOverride(): void method instead?\r\n\r\nSounds great @micalevisk!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "790701464",
    "pr_number": 8933,
    "pr_file": "packages/microservices/decorators/message-pattern.decorator.ts",
    "created_at": "2022-01-24T12:37:39+00:00",
    "commented_code": "/**\n  * Subscribes to incoming messages which fulfils chosen pattern.\n  */\n-export const MessagePattern = <T = PatternMetadata | string>(\n+export const MessagePattern: {\n+  <T = PatternMetadata | string>(metadata?: T): MethodDecorator;\n+  <T = PatternMetadata | string>(\n+    metadata?: T,\n+    transport?: Transport,\n+  ): MethodDecorator;\n+  <T = PatternMetadata | string>(\n+    metadata?: T,\n+    extras?: Record<string, any>,\n+  ): MethodDecorator;\n+  <T = PatternMetadata | string>(\n+    metadata?: T,\n+    transport?: Transport,\n+    extras?: Record<string, any>,\n+  ): MethodDecorator;\n+} = <T = PatternMetadata | string>(\n   metadata?: T,\n-  transport?: Transport,\n+  arg1?: Transport | Record<string, any>,\n+  arg2?: Record<string, any>,",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "790701464",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8933,
        "pr_file": "packages/microservices/decorators/message-pattern.decorator.ts",
        "discussion_id": "790701464",
        "commented_code": "@@ -17,10 +19,36 @@ export enum GrpcMethodStreamingType {\n /**\n  * Subscribes to incoming messages which fulfils chosen pattern.\n  */\n-export const MessagePattern = <T = PatternMetadata | string>(\n+export const MessagePattern: {\n+  <T = PatternMetadata | string>(metadata?: T): MethodDecorator;\n+  <T = PatternMetadata | string>(\n+    metadata?: T,\n+    transport?: Transport,\n+  ): MethodDecorator;\n+  <T = PatternMetadata | string>(\n+    metadata?: T,\n+    extras?: Record<string, any>,\n+  ): MethodDecorator;\n+  <T = PatternMetadata | string>(\n+    metadata?: T,\n+    transport?: Transport,\n+    extras?: Record<string, any>,\n+  ): MethodDecorator;\n+} = <T = PatternMetadata | string>(\n   metadata?: T,\n-  transport?: Transport,\n+  arg1?: Transport | Record<string, any>,\n+  arg2?: Record<string, any>,",
        "comment_created_at": "2022-01-24T12:37:39+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Can we make argument names somewhat more descriptive? For example, `transportOrExtras, extras`, etc.",
        "pr_file_module": null
      },
      {
        "comment_id": "791012407",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8933,
        "pr_file": "packages/microservices/decorators/message-pattern.decorator.ts",
        "discussion_id": "790701464",
        "commented_code": "@@ -17,10 +19,36 @@ export enum GrpcMethodStreamingType {\n /**\n  * Subscribes to incoming messages which fulfils chosen pattern.\n  */\n-export const MessagePattern = <T = PatternMetadata | string>(\n+export const MessagePattern: {\n+  <T = PatternMetadata | string>(metadata?: T): MethodDecorator;\n+  <T = PatternMetadata | string>(\n+    metadata?: T,\n+    transport?: Transport,\n+  ): MethodDecorator;\n+  <T = PatternMetadata | string>(\n+    metadata?: T,\n+    extras?: Record<string, any>,\n+  ): MethodDecorator;\n+  <T = PatternMetadata | string>(\n+    metadata?: T,\n+    transport?: Transport,\n+    extras?: Record<string, any>,\n+  ): MethodDecorator;\n+} = <T = PatternMetadata | string>(\n   metadata?: T,\n-  transport?: Transport,\n+  arg1?: Transport | Record<string, any>,\n+  arg2?: Record<string, any>,",
        "comment_created_at": "2022-01-24T17:53:42+00:00",
        "comment_author": "EugeneKorshenko",
        "comment_body": "I was thinking to use similar naming, but decided that overloads should be descriptive enough and next lines should be also pretty descriptive.\nBut any way, I agree that it's better to name vars in a bit more concrete way.\nI'll do proper adjustments this night.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "790485208",
    "pr_number": 8992,
    "pr_file": "sample/06-mongoose/src/cats/cats.controller.ts",
    "created_at": "2022-01-24T07:56:02+00:00",
    "commented_code": "async findAll(): Promise<Cat[]> {\n     return this.catsService.findAll();\n   }\n+\n+  @Get(':id')\n+  async findOne(@Param(\"id\") _id: string): Promise<Cat> {",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "790485208",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8992,
        "pr_file": "sample/06-mongoose/src/cats/cats.controller.ts",
        "discussion_id": "790485208",
        "commented_code": "@@ -16,4 +16,14 @@ export class CatsController {\n   async findAll(): Promise<Cat[]> {\n     return this.catsService.findAll();\n   }\n+\n+  @Get(':id')\n+  async findOne(@Param(\"id\") _id: string): Promise<Cat> {",
        "comment_created_at": "2022-01-24T07:56:02+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Can we rename it to \"id\" instead?\r\n```suggestion\r\n  async findOne(@Param(\"id\") id: string): Promise<Cat> {\r\n```\r\nSimilarly in the method below and in the corresponding service class",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "472289120",
    "pr_number": 5201,
    "pr_file": "packages/core/router/router-explorer.ts",
    "created_at": "2020-08-18T15:34:14+00:00",
    "commented_code": ");\n   }\n \n-  public extractRouterPath(\n-    metatype: Type<Controller>,\n-    prefix?: string,\n-  ): string {\n+  public extractRouterPath(metatype: Type<Controller>, prefix = ''): string[] {\n     let path = Reflect.getMetadata(PATH_METADATA, metatype);\n-    if (prefix) path = prefix + this.validateRoutePath(path);\n-    return this.validateRoutePath(path);\n+\n+    if (Array.isArray(path)) {\n+      path = path.map(p => prefix + this.validateRoutePath(p));",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "472289120",
        "repo_full_name": "nestjs/nest",
        "pr_number": 5201,
        "pr_file": "packages/core/router/router-explorer.ts",
        "discussion_id": "472289120",
        "commented_code": "@@ -87,13 +87,16 @@ export class RouterExplorer {\n     );\n   }\n \n-  public extractRouterPath(\n-    metatype: Type<Controller>,\n-    prefix?: string,\n-  ): string {\n+  public extractRouterPath(metatype: Type<Controller>, prefix = ''): string[] {\n     let path = Reflect.getMetadata(PATH_METADATA, metatype);\n-    if (prefix) path = prefix + this.validateRoutePath(path);\n-    return this.validateRoutePath(path);\n+\n+    if (Array.isArray(path)) {\n+      path = path.map(p => prefix + this.validateRoutePath(p));",
        "comment_created_at": "2020-08-18T15:34:14+00:00",
        "comment_author": "romanticlove",
        "comment_body": "I guess there is no reason to validate route path twice (here and on 99 line).\r\nJust concat with prefix and validate (99 line) before return",
        "pr_file_module": null
      },
      {
        "comment_id": "472605223",
        "repo_full_name": "nestjs/nest",
        "pr_number": 5201,
        "pr_file": "packages/core/router/router-explorer.ts",
        "discussion_id": "472289120",
        "commented_code": "@@ -87,13 +87,16 @@ export class RouterExplorer {\n     );\n   }\n \n-  public extractRouterPath(\n-    metatype: Type<Controller>,\n-    prefix?: string,\n-  ): string {\n+  public extractRouterPath(metatype: Type<Controller>, prefix = ''): string[] {\n     let path = Reflect.getMetadata(PATH_METADATA, metatype);\n-    if (prefix) path = prefix + this.validateRoutePath(path);\n-    return this.validateRoutePath(path);\n+\n+    if (Array.isArray(path)) {\n+      path = path.map(p => prefix + this.validateRoutePath(p));",
        "comment_created_at": "2020-08-19T02:32:25+00:00",
        "comment_author": "miZyind",
        "comment_body": "Thanks for the review.\r\nThe reason why I called `validateRoutePath` twice is that the `validateRoutePath` function seems not only do `validate` but also `format` the path.\r\n\r\nIf the value of **PATH_METADATA** is `['a', '/b']`, and the value of **prefix** is `'foo'` then the result of `extractRouterPath` would be: `['/foo/a', '/foo/b']`.\r\n\r\nBut if I modify the `path.map(p => prefix + this.validateRoutePath(p))` to `path.map(p => prefix + p)`, the result would become: `['/fooa', '/foo/b']`.\r\n^ The first element will be incorrect\r\n\r\nI realized that it seems to be more logically correct if I call `validatePath (from shared.utils)` directly on 94 line instead of call `this.validateRoutePath`.\r\nBecause we only need to **format** the path here instead of doing both **validate and format**.\r\n\r\nWhat do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "472869013",
        "repo_full_name": "nestjs/nest",
        "pr_number": 5201,
        "pr_file": "packages/core/router/router-explorer.ts",
        "discussion_id": "472289120",
        "commented_code": "@@ -87,13 +87,16 @@ export class RouterExplorer {\n     );\n   }\n \n-  public extractRouterPath(\n-    metatype: Type<Controller>,\n-    prefix?: string,\n-  ): string {\n+  public extractRouterPath(metatype: Type<Controller>, prefix = ''): string[] {\n     let path = Reflect.getMetadata(PATH_METADATA, metatype);\n-    if (prefix) path = prefix + this.validateRoutePath(path);\n-    return this.validateRoutePath(path);\n+\n+    if (Array.isArray(path)) {\n+      path = path.map(p => prefix + this.validateRoutePath(p));",
        "comment_created_at": "2020-08-19T08:50:48+00:00",
        "comment_author": "romanticlove",
        "comment_body": "Agreed with you about using **validatePath (from shared.utils)** on line 94.\r\n\r\nBut also i would offer to you check functions naming.\r\nAs for me it's better to rename (or create separate function to avoid bugs in another system parts) **validatePath** -> **addLeadingSlash**.\r\n\r\nThe same about this.validateRoutePath. When i'm calling this function, i'm expecting that function throw me an error for invalid route, but i'm not expecting route transformation",
        "pr_file_module": null
      },
      {
        "comment_id": "474404940",
        "repo_full_name": "nestjs/nest",
        "pr_number": 5201,
        "pr_file": "packages/core/router/router-explorer.ts",
        "discussion_id": "472289120",
        "commented_code": "@@ -87,13 +87,16 @@ export class RouterExplorer {\n     );\n   }\n \n-  public extractRouterPath(\n-    metatype: Type<Controller>,\n-    prefix?: string,\n-  ): string {\n+  public extractRouterPath(metatype: Type<Controller>, prefix = ''): string[] {\n     let path = Reflect.getMetadata(PATH_METADATA, metatype);\n-    if (prefix) path = prefix + this.validateRoutePath(path);\n-    return this.validateRoutePath(path);\n+\n+    if (Array.isArray(path)) {\n+      path = path.map(p => prefix + this.validateRoutePath(p));",
        "comment_created_at": "2020-08-21T04:42:12+00:00",
        "comment_author": "miZyind",
        "comment_body": "I feel much the same way.\r\n\r\nThe name of those two functions:\r\n  1. validatePath (from shared.utils)\r\n  2. validateRoutePath (from router-explorer)\r\n\r\ndoes not quite match what exactly they do.\r\n\r\nBut it seems that the **validatePath** function will also return an **empty string** if the `path` parameter is `undefined`.\r\nTo name it as **addLeadingSlash** also doesn't really match the purpose.\r\nIndeed naming things in code are harder...\r\n\r\nI will submit my solution soon and let's check if it can make the code more understandable.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "429870782",
    "pr_number": 4842,
    "pr_file": "packages/common/decorators/http/sse.decorator.ts",
    "created_at": "2020-05-25T10:52:37+00:00",
    "commented_code": "+import { SSE_METADATA, PATH_METADATA, METHOD_METADATA } from '../../constants';\n+import { RequestMethod } from '../../enums/request-method.enum';\n+\n+/**\n+ * Declares this route as a Server-Sent-Events endpoint\n+ *\n+ * @publicApi\n+ */\n+export function Sse(path?: string): MethodDecorator {",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "429870782",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4842,
        "pr_file": "packages/common/decorators/http/sse.decorator.ts",
        "discussion_id": "429870782",
        "commented_code": "@@ -0,0 +1,28 @@\n+import { SSE_METADATA, PATH_METADATA, METHOD_METADATA } from '../../constants';\n+import { RequestMethod } from '../../enums/request-method.enum';\n+\n+/**\n+ * Declares this route as a Server-Sent-Events endpoint\n+ *\n+ * @publicApi\n+ */\n+export function Sse(path?: string): MethodDecorator {",
        "comment_created_at": "2020-05-25T10:52:37+00:00",
        "comment_author": "tonivj5",
        "comment_body": "WDYT about `SSE` instead of `Sse`?",
        "pr_file_module": null
      },
      {
        "comment_id": "429907551",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4842,
        "pr_file": "packages/common/decorators/http/sse.decorator.ts",
        "discussion_id": "429870782",
        "commented_code": "@@ -0,0 +1,28 @@\n+import { SSE_METADATA, PATH_METADATA, METHOD_METADATA } from '../../constants';\n+import { RequestMethod } from '../../enums/request-method.enum';\n+\n+/**\n+ * Declares this route as a Server-Sent-Events endpoint\n+ *\n+ * @publicApi\n+ */\n+export function Sse(path?: string): MethodDecorator {",
        "comment_created_at": "2020-05-25T12:25:12+00:00",
        "comment_author": "soyuka",
        "comment_body": "We're naming `Http` not `HTTP` in class names and `Get` not `GET` for decorators.",
        "pr_file_module": null
      },
      {
        "comment_id": "432403173",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4842,
        "pr_file": "packages/common/decorators/http/sse.decorator.ts",
        "discussion_id": "429870782",
        "commented_code": "@@ -0,0 +1,28 @@\n+import { SSE_METADATA, PATH_METADATA, METHOD_METADATA } from '../../constants';\n+import { RequestMethod } from '../../enums/request-method.enum';\n+\n+/**\n+ * Declares this route as a Server-Sent-Events endpoint\n+ *\n+ * @publicApi\n+ */\n+export function Sse(path?: string): MethodDecorator {",
        "comment_created_at": "2020-05-29T10:43:46+00:00",
        "comment_author": "tonivj5",
        "comment_body": "Yeah, you're right :+1:",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "261821540",
    "pr_number": 1600,
    "pr_file": "packages/core/nest-application-context.ts",
    "created_at": "2019-03-02T10:01:33+00:00",
    "commented_code": "export class NestApplicationContext implements INestApplicationContext {\n   private readonly moduleTokenFactory = new ModuleTokenFactory();\n   private readonly containerScanner: ContainerScanner;\n+  private readonly signalsListening: string[] = new Array<string>();",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "261821540",
        "repo_full_name": "nestjs/nest",
        "pr_number": 1600,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "261821540",
        "commented_code": "@@ -17,6 +21,7 @@ import { ModuleTokenFactory } from './injector/module-token-factory';\n export class NestApplicationContext implements INestApplicationContext {\n   private readonly moduleTokenFactory = new ModuleTokenFactory();\n   private readonly containerScanner: ContainerScanner;\n+  private readonly signalsListening: string[] = new Array<string>();",
        "comment_created_at": "2019-03-02T10:01:33+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "this name is not very descriptive I guess. what about `activeShutdownSignals` or something like this?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "165802521",
    "pr_number": 383,
    "pr_file": "src/common/pipes/validation.pipe.ts",
    "created_at": "2018-02-03T02:51:03+00:00",
    "commented_code": "import { isNil } from '../utils/shared.utils';\n import { Pipe } from './../decorators/core/component.decorator';\n \n+export interface ValidationPipeOptions {\n+  transform?: boolean;\n+  strip?: boolean;\n+  reject?: boolean;\n+}\n+\n @Pipe()\n export class ValidationPipe implements PipeTransform<any> {\n+\n+  private shouldTransform: boolean;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "165802521",
        "repo_full_name": "nestjs/nest",
        "pr_number": 383,
        "pr_file": "src/common/pipes/validation.pipe.ts",
        "discussion_id": "165802521",
        "commented_code": "@@ -5,19 +5,36 @@ import { ArgumentMetadata, BadRequestException } from '../index';\n import { isNil } from '../utils/shared.utils';\n import { Pipe } from './../decorators/core/component.decorator';\n \n+export interface ValidationPipeOptions {\n+  transform?: boolean;\n+  strip?: boolean;\n+  reject?: boolean;\n+}\n+\n @Pipe()\n export class ValidationPipe implements PipeTransform<any> {\n+\n+  private shouldTransform: boolean;",
        "comment_created_at": "2018-02-03T02:51:03+00:00",
        "comment_author": "ShadowManu",
        "comment_body": "You're using a different naming scheme from `class-validator`.\r\nWhy rename `whitelist -> shouldStrip` and `forbidNonWhitelisted -> shouldReject`. You should use same names and not change the mnemonics without a hard reason. You end up loosing the original `class-validator` documentation references as a user.",
        "pr_file_module": null
      }
    ]
  }
]