[
  {
    "discussion_id": "2009210082",
    "pr_number": 14832,
    "pr_file": "packages/common/utils/shared.utils.ts",
    "created_at": "2025-03-23T19:41:54+00:00",
    "commented_code": ": '/' + path.replace(/\\/+$/, '')\n     : '/';\n \n-export const stripEndSlash = (path: string) =>\n-  path[path.length - 1] === '/' ? path.slice(0, path.length - 1) : path;\n+export const stripEndSlash = (path: string): string =>\n+  path.endsWith('/') ? path.slice(0, -1) : path;\n \n-export const isFunction = (val: any): val is Function =>\n+export const isFunction = (val: unknown): val is Function =>\n   typeof val === 'function';\n-export const isString = (val: any): val is string => typeof val === 'string';\n-export const isNumber = (val: any): val is number => typeof val === 'number';\n-export const isConstructor = (val: any): boolean => val === 'constructor';\n-export const isNil = (val: any): val is null | undefined =>\n+\n+export const isString = (val: unknown): val is string =>\n+  typeof val === 'string';\n+\n+export const isNumber = (val: unknown): val is number =>\n+  typeof val === 'number';\n+\n+export const isConstructor = (val: unknown): boolean => val === 'constructor';\n+\n+export const isNil = (val: unknown): val is null | undefined =>\n   isUndefined(val) || val === null;\n-export const isEmpty = (array: any): boolean => !(array && array.length > 0);\n-export const isSymbol = (val: any): val is symbol => typeof val === 'symbol';\n+\n+export const isEmpty = (array: unknown): boolean =>\n+  !(Array.isArray(array) && array.length > 0);",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "2009210082",
        "repo_full_name": "nestjs/nest",
        "pr_number": 14832,
        "pr_file": "packages/common/utils/shared.utils.ts",
        "discussion_id": "2009210082",
        "commented_code": "@@ -37,15 +37,25 @@ export const normalizePath = (path?: string): string =>\n       : '/' + path.replace(/\\/+$/, '')\n     : '/';\n \n-export const stripEndSlash = (path: string) =>\n-  path[path.length - 1] === '/' ? path.slice(0, path.length - 1) : path;\n+export const stripEndSlash = (path: string): string =>\n+  path.endsWith('/') ? path.slice(0, -1) : path;\n \n-export const isFunction = (val: any): val is Function =>\n+export const isFunction = (val: unknown): val is Function =>\n   typeof val === 'function';\n-export const isString = (val: any): val is string => typeof val === 'string';\n-export const isNumber = (val: any): val is number => typeof val === 'number';\n-export const isConstructor = (val: any): boolean => val === 'constructor';\n-export const isNil = (val: any): val is null | undefined =>\n+\n+export const isString = (val: unknown): val is string =>\n+  typeof val === 'string';\n+\n+export const isNumber = (val: unknown): val is number =>\n+  typeof val === 'number';\n+\n+export const isConstructor = (val: unknown): boolean => val === 'constructor';\n+\n+export const isNil = (val: unknown): val is null | undefined =>\n   isUndefined(val) || val === null;\n-export const isEmpty = (array: any): boolean => !(array && array.length > 0);\n-export const isSymbol = (val: any): val is symbol => typeof val === 'symbol';\n+\n+export const isEmpty = (array: unknown): boolean =>\n+  !(Array.isArray(array) && array.length > 0);",
        "comment_created_at": "2025-03-23T19:41:54+00:00",
        "comment_author": "micalevisk",
        "comment_body": "to me, `isEmpty` sounds that it could be used on non-array values. But I saw that it is only being used on arrays\r\n\r\npeharps we could rename this utility to `isEmptyArray` and drop the following:\r\n\r\nhttps://github.com/nestjs/nest/blob/e1b91d02a601c03cb8d0438b32badfaae5403447/packages/common/pipes/file/parse-file.pipe.ts#L63",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1110115386",
    "pr_number": 11131,
    "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
    "created_at": "2023-02-17T17:26:44+00:00",
    "commented_code": "const HTTP_ADAPTER_HOST = 'HttpAdapterHost';\n const REFLECTOR = 'Reflector';\n \n+// We need to check if the cache-manager package is v5 or greater\n+// because the set method signature changed in v5\n+const cacheManager = loadPackage('cache-manager', 'CacheModule', () =>\n+  require('cache-manager'),\n+);\n+const cacheManagerIsv5OrGreater = 'memoryStore' in cacheManager;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1110115386",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11131,
        "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
        "discussion_id": "1110115386",
        "commented_code": "@@ -19,6 +21,13 @@ import {\n const HTTP_ADAPTER_HOST = 'HttpAdapterHost';\n const REFLECTOR = 'Reflector';\n \n+// We need to check if the cache-manager package is v5 or greater\n+// because the set method signature changed in v5\n+const cacheManager = loadPackage('cache-manager', 'CacheModule', () =>\n+  require('cache-manager'),\n+);\n+const cacheManagerIsv5OrGreater = 'memoryStore' in cacheManager;",
        "comment_created_at": "2023-02-17T17:26:44+00:00",
        "comment_author": "Tony133",
        "comment_body": "Only the name of this constant `cacheManagerIsv5OrGreater` I would change, to make it a little more readable, otherwise it looks good. \ud83d\udc4d\r\n\r\nJust one question the interceptor continues to work with both cache-manager v4 and v5, right?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1110205927",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11131,
        "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
        "discussion_id": "1110115386",
        "commented_code": "@@ -19,6 +21,13 @@ import {\n const HTTP_ADAPTER_HOST = 'HttpAdapterHost';\n const REFLECTOR = 'Reflector';\n \n+// We need to check if the cache-manager package is v5 or greater\n+// because the set method signature changed in v5\n+const cacheManager = loadPackage('cache-manager', 'CacheModule', () =>\n+  require('cache-manager'),\n+);\n+const cacheManagerIsv5OrGreater = 'memoryStore' in cacheManager;",
        "comment_created_at": "2023-02-17T18:46:21+00:00",
        "comment_author": "Flusinerd",
        "comment_body": "It falls back to using the old signature if the version is below v5. So there should be no change to the code for that case.\r\n\r\n``cacheManagerIsv5OrGreater`` is beeing used in the ``packages/common/cache/cache.providers.ts`` as well to use milliseconds instead of seconds for the default TTL of five seconds. So I assumed the check is correct.\r\nAny suggestions about naming this?",
        "pr_file_module": null
      },
      {
        "comment_id": "1110318062",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11131,
        "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
        "discussion_id": "1110115386",
        "commented_code": "@@ -19,6 +21,13 @@ import {\n const HTTP_ADAPTER_HOST = 'HttpAdapterHost';\n const REFLECTOR = 'Reflector';\n \n+// We need to check if the cache-manager package is v5 or greater\n+// because the set method signature changed in v5\n+const cacheManager = loadPackage('cache-manager', 'CacheModule', () =>\n+  require('cache-manager'),\n+);\n+const cacheManagerIsv5OrGreater = 'memoryStore' in cacheManager;",
        "comment_created_at": "2023-02-17T20:19:47+00:00",
        "comment_author": "Tony133",
        "comment_body": "Ok, for the name `cacheManagerIsv5OrGreater` if it's already used internally already in common then it's better to use this, sure it's a bit strange name \ud83d\ude04 . Anyway the variable name from what I understand should mean: `\" Cache manager is version 5 or higher \"` . \r\n\r\nAt the moment one name could be `\"cacheManagerVersions\"`, it is an idea \ud83d\ude04, if you change it here you should also change it to `packages/common/cache/cache.providers.ts`.\r\n\r\nHowerer if I have other names I will write to you here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1110352985",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11131,
        "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
        "discussion_id": "1110115386",
        "commented_code": "@@ -19,6 +21,13 @@ import {\n const HTTP_ADAPTER_HOST = 'HttpAdapterHost';\n const REFLECTOR = 'Reflector';\n \n+// We need to check if the cache-manager package is v5 or greater\n+// because the set method signature changed in v5\n+const cacheManager = loadPackage('cache-manager', 'CacheModule', () =>\n+  require('cache-manager'),\n+);\n+const cacheManagerIsv5OrGreater = 'memoryStore' in cacheManager;",
        "comment_created_at": "2023-02-17T20:58:52+00:00",
        "comment_author": "Flusinerd",
        "comment_body": "``\" Cache manager is version 5 or higher \"`` This is exactly what the variable is ment to be.\r\nIt's a boolean that is true if the package beeing loaded is v5 or greater",
        "pr_file_module": null
      },
      {
        "comment_id": "1110363598",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11131,
        "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
        "discussion_id": "1110115386",
        "commented_code": "@@ -19,6 +21,13 @@ import {\n const HTTP_ADAPTER_HOST = 'HttpAdapterHost';\n const REFLECTOR = 'Reflector';\n \n+// We need to check if the cache-manager package is v5 or greater\n+// because the set method signature changed in v5\n+const cacheManager = loadPackage('cache-manager', 'CacheModule', () =>\n+  require('cache-manager'),\n+);\n+const cacheManagerIsv5OrGreater = 'memoryStore' in cacheManager;",
        "comment_created_at": "2023-02-17T21:07:34+00:00",
        "comment_author": "Tony133",
        "comment_body": "Yes, I agree with that, no problem, but I think the name could be improved, maybe even something like \"`cacheManagerCheckVersions`\", however i repeat no problem  \ud83d\udc4d",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1096735026",
    "pr_number": 11044,
    "pr_file": "packages/common/pipes/file/parse-file.pipe.ts",
    "created_at": "2023-02-05T16:27:03+00:00",
    "commented_code": "}\n \n   async transform(value: any): Promise<any> {\n-    if (this.thereAreNoFilesIn(value)) {\n-      if (this.fileIsRequired) {\n-        throw this.exceptionFactory('File is required');\n-      }\n-      return value;\n-    }\n+    const areThereNoFileIn = this.thereAreNoFilesIn(value);\n \n-    if (this.validators.length) {\n-      if (Array.isArray(value)) {\n-        await this.validateFiles(value);\n-      } else {\n-        await this.validate(value);\n-      }\n-    }\n+    if (areThereNoFileIn && this.fileIsRequired)\n+      throw this.exceptionFactory('File is required');\n+\n+    if (!areThereNoFileIn && this.validators.length)\n+      await this.validateFilesOrFile(value);\n \n     return value;\n   }\n \n-  private validateFiles(files: any[]): Promise<any[]> {\n-    return Promise.all(files.map(f => this.validate(f)));\n+  private async validateFilesOrFile(value: any): Promise<void> {",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1096735026",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11044,
        "pr_file": "packages/common/pipes/file/parse-file.pipe.ts",
        "discussion_id": "1096735026",
        "commented_code": "@@ -39,26 +39,23 @@ export class ParseFilePipe implements PipeTransform<any> {\n   }\n \n   async transform(value: any): Promise<any> {\n-    if (this.thereAreNoFilesIn(value)) {\n-      if (this.fileIsRequired) {\n-        throw this.exceptionFactory('File is required');\n-      }\n-      return value;\n-    }\n+    const areThereNoFileIn = this.thereAreNoFilesIn(value);\n \n-    if (this.validators.length) {\n-      if (Array.isArray(value)) {\n-        await this.validateFiles(value);\n-      } else {\n-        await this.validate(value);\n-      }\n-    }\n+    if (areThereNoFileIn && this.fileIsRequired)\n+      throw this.exceptionFactory('File is required');\n+\n+    if (!areThereNoFileIn && this.validators.length)\n+      await this.validateFilesOrFile(value);\n \n     return value;\n   }\n \n-  private validateFiles(files: any[]): Promise<any[]> {\n-    return Promise.all(files.map(f => this.validate(f)));\n+  private async validateFilesOrFile(value: any): Promise<void> {",
        "comment_created_at": "2023-02-05T16:27:03+00:00",
        "comment_author": "micalevisk",
        "comment_body": "what do you think on renaming `value` to `fileOrFiles` or `filesOrFile`",
        "pr_file_module": null
      },
      {
        "comment_id": "1096739265",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11044,
        "pr_file": "packages/common/pipes/file/parse-file.pipe.ts",
        "discussion_id": "1096735026",
        "commented_code": "@@ -39,26 +39,23 @@ export class ParseFilePipe implements PipeTransform<any> {\n   }\n \n   async transform(value: any): Promise<any> {\n-    if (this.thereAreNoFilesIn(value)) {\n-      if (this.fileIsRequired) {\n-        throw this.exceptionFactory('File is required');\n-      }\n-      return value;\n-    }\n+    const areThereNoFileIn = this.thereAreNoFilesIn(value);\n \n-    if (this.validators.length) {\n-      if (Array.isArray(value)) {\n-        await this.validateFiles(value);\n-      } else {\n-        await this.validate(value);\n-      }\n-    }\n+    if (areThereNoFileIn && this.fileIsRequired)\n+      throw this.exceptionFactory('File is required');\n+\n+    if (!areThereNoFileIn && this.validators.length)\n+      await this.validateFilesOrFile(value);\n \n     return value;\n   }\n \n-  private validateFiles(files: any[]): Promise<any[]> {\n-    return Promise.all(files.map(f => this.validate(f)));\n+  private async validateFilesOrFile(value: any): Promise<void> {",
        "comment_created_at": "2023-02-05T16:54:53+00:00",
        "comment_author": "mohamadrezamomeni",
        "comment_body": "I replace this method with another method because Input of this method may be array or not. I think It's better. I use specific type for input of this method",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "762911729",
    "pr_number": 8738,
    "pr_file": "packages/core/nest-application-context.ts",
    "created_at": "2021-12-06T11:12:45+00:00",
    "commented_code": "public useLogger(logger: LoggerService | LogLevel[] | false) {\n     Logger.overrideLogger(logger);\n+\n+    if (this.flushLogsOnOverride) {\n+      this.flushLogs();\n+    }\n   }\n \n   public flushLogs() {\n     Logger.flush();\n   }\n \n+  public shouldFlushLogsOnOverride() {",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "762911729",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8738,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "762911729",
        "commented_code": "@@ -131,12 +133,20 @@ export class NestApplicationContext implements INestApplicationContext {\n \n   public useLogger(logger: LoggerService | LogLevel[] | false) {\n     Logger.overrideLogger(logger);\n+\n+    if (this.flushLogsOnOverride) {\n+      this.flushLogs();\n+    }\n   }\n \n   public flushLogs() {\n     Logger.flush();\n   }\n \n+  public shouldFlushLogsOnOverride() {",
        "comment_created_at": "2021-12-06T11:12:45+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "`should` word indicates here that this method should return a boolean (and shouldn't update anything itself) - it's a common convention (is/has/should)",
        "pr_file_module": null
      },
      {
        "comment_id": "763021107",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8738,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "762911729",
        "commented_code": "@@ -131,12 +133,20 @@ export class NestApplicationContext implements INestApplicationContext {\n \n   public useLogger(logger: LoggerService | LogLevel[] | false) {\n     Logger.overrideLogger(logger);\n+\n+    if (this.flushLogsOnOverride) {\n+      this.flushLogs();\n+    }\n   }\n \n   public flushLogs() {\n     Logger.flush();\n   }\n \n+  public shouldFlushLogsOnOverride() {",
        "comment_created_at": "2021-12-06T13:48:14+00:00",
        "comment_author": "micalevisk",
        "comment_body": "oh right.\r\n\r\nCan we have `shouldFlushLogsOnOverride: boolean`, and `flushLogsOnOverride(): void` method instead? Otherwise I'll add `setFlushLogsOnOverride(value: boolean)`\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "763766212",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8738,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "762911729",
        "commented_code": "@@ -131,12 +133,20 @@ export class NestApplicationContext implements INestApplicationContext {\n \n   public useLogger(logger: LoggerService | LogLevel[] | false) {\n     Logger.overrideLogger(logger);\n+\n+    if (this.flushLogsOnOverride) {\n+      this.flushLogs();\n+    }\n   }\n \n   public flushLogs() {\n     Logger.flush();\n   }\n \n+  public shouldFlushLogsOnOverride() {",
        "comment_created_at": "2021-12-07T08:50:41+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "> Can we have shouldFlushLogsOnOverride: boolean, and flushLogsOnOverride(): void method instead?\r\n\r\nSounds great @micalevisk!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "716525830",
    "pr_number": 8045,
    "pr_file": "packages/microservices/client/client-mqtt.ts",
    "created_at": "2021-09-27T09:39:27+00:00",
    "commented_code": "protected initializeSerializer(options: MqttOptions['options']) {\n     this.serializer = options?.serializer ?? new MqttRequestSerializer();\n   }\n+\n+  protected mergeOptions(",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "716525830",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8045,
        "pr_file": "packages/microservices/client/client-mqtt.ts",
        "discussion_id": "716525830",
        "commented_code": "@@ -190,4 +193,23 @@ export class ClientMqtt extends ClientProxy {\n   protected initializeSerializer(options: MqttOptions['options']) {\n     this.serializer = options?.serializer ?? new MqttRequestSerializer();\n   }\n+\n+  protected mergeOptions(",
        "comment_created_at": "2021-09-27T09:39:27+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "nit: mergePacketOptions/mergeRequesOptions? (to not confuse it with the \"client\" instance options) cc @tuxmachine ",
        "pr_file_module": null
      },
      {
        "comment_id": "716789628",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8045,
        "pr_file": "packages/microservices/client/client-mqtt.ts",
        "discussion_id": "716525830",
        "commented_code": "@@ -190,4 +193,23 @@ export class ClientMqtt extends ClientProxy {\n   protected initializeSerializer(options: MqttOptions['options']) {\n     this.serializer = options?.serializer ?? new MqttRequestSerializer();\n   }\n+\n+  protected mergeOptions(",
        "comment_created_at": "2021-09-27T15:12:00+00:00",
        "comment_author": "rickdgeerling",
        "comment_body": "Done cc @kamilmysliwiec ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "261821540",
    "pr_number": 1600,
    "pr_file": "packages/core/nest-application-context.ts",
    "created_at": "2019-03-02T10:01:33+00:00",
    "commented_code": "export class NestApplicationContext implements INestApplicationContext {\n   private readonly moduleTokenFactory = new ModuleTokenFactory();\n   private readonly containerScanner: ContainerScanner;\n+  private readonly signalsListening: string[] = new Array<string>();",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "261821540",
        "repo_full_name": "nestjs/nest",
        "pr_number": 1600,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "261821540",
        "commented_code": "@@ -17,6 +21,7 @@ import { ModuleTokenFactory } from './injector/module-token-factory';\n export class NestApplicationContext implements INestApplicationContext {\n   private readonly moduleTokenFactory = new ModuleTokenFactory();\n   private readonly containerScanner: ContainerScanner;\n+  private readonly signalsListening: string[] = new Array<string>();",
        "comment_created_at": "2019-03-02T10:01:33+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "this name is not very descriptive I guess. what about `activeShutdownSignals` or something like this?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "165802521",
    "pr_number": 383,
    "pr_file": "src/common/pipes/validation.pipe.ts",
    "created_at": "2018-02-03T02:51:03+00:00",
    "commented_code": "import { isNil } from '../utils/shared.utils';\n import { Pipe } from './../decorators/core/component.decorator';\n \n+export interface ValidationPipeOptions {\n+  transform?: boolean;\n+  strip?: boolean;\n+  reject?: boolean;\n+}\n+\n @Pipe()\n export class ValidationPipe implements PipeTransform<any> {\n+\n+  private shouldTransform: boolean;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "165802521",
        "repo_full_name": "nestjs/nest",
        "pr_number": 383,
        "pr_file": "src/common/pipes/validation.pipe.ts",
        "discussion_id": "165802521",
        "commented_code": "@@ -5,19 +5,36 @@ import { ArgumentMetadata, BadRequestException } from '../index';\n import { isNil } from '../utils/shared.utils';\n import { Pipe } from './../decorators/core/component.decorator';\n \n+export interface ValidationPipeOptions {\n+  transform?: boolean;\n+  strip?: boolean;\n+  reject?: boolean;\n+}\n+\n @Pipe()\n export class ValidationPipe implements PipeTransform<any> {\n+\n+  private shouldTransform: boolean;",
        "comment_created_at": "2018-02-03T02:51:03+00:00",
        "comment_author": "ShadowManu",
        "comment_body": "You're using a different naming scheme from `class-validator`.\r\nWhy rename `whitelist -> shouldStrip` and `forbidNonWhitelisted -> shouldReject`. You should use same names and not change the mnemonics without a hard reason. You end up loosing the original `class-validator` documentation references as a user.",
        "pr_file_module": null
      }
    ]
  }
]