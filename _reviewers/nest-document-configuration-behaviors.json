[
  {
    "discussion_id": "758094579",
    "pr_number": 8126,
    "pr_file": "packages/common/cache/interfaces/cache-module.interface.ts",
    "created_at": "2021-11-29T07:30:06+00:00",
    "commented_code": "import { CacheManagerOptions } from './cache-manager.interface';\n \n export interface CacheModuleOptions extends CacheManagerOptions {\n+  /**\n+   * If \"true', register `CacheModule` as a global module.\n+   */\n+  isGlobal?: boolean;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "758094579",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8126,
        "pr_file": "packages/common/cache/interfaces/cache-module.interface.ts",
        "discussion_id": "758094579",
        "commented_code": "@@ -2,6 +2,10 @@ import { ModuleMetadata, Provider, Type } from '../../interfaces';\n import { CacheManagerOptions } from './cache-manager.interface';\n \n export interface CacheModuleOptions extends CacheManagerOptions {\n+  /**\n+   * If \"true', register `CacheModule` as a global module.\n+   */\n+  isGlobal?: boolean;",
        "comment_created_at": "2021-11-29T07:30:06+00:00",
        "comment_author": "joebowbeer",
        "comment_body": "@lengxuegang Note that this also adds `isGlobal` to the type returned by the CacheModuleAsyncOptions.useFactory method, but it will be ignored. Only the top level CacheModuleAsyncOptions.isGlobal is used.",
        "pr_file_module": null
      },
      {
        "comment_id": "792100634",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8126,
        "pr_file": "packages/common/cache/interfaces/cache-module.interface.ts",
        "discussion_id": "758094579",
        "commented_code": "@@ -2,6 +2,10 @@ import { ModuleMetadata, Provider, Type } from '../../interfaces';\n import { CacheManagerOptions } from './cache-manager.interface';\n \n export interface CacheModuleOptions extends CacheManagerOptions {\n+  /**\n+   * If \"true', register `CacheModule` as a global module.\n+   */\n+  isGlobal?: boolean;",
        "comment_created_at": "2022-01-25T20:40:43+00:00",
        "comment_author": "nikolalukovic",
        "comment_body": "Can this behaviour be added to the [documentation](https://docs.nestjs.com/techniques/caching#use-module-globally), please? If I didn't find this PR I'd lose a couple of hours trying to figure out why cache manager wasn't working in submodules...",
        "pr_file_module": null
      },
      {
        "comment_id": "792249940",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8126,
        "pr_file": "packages/common/cache/interfaces/cache-module.interface.ts",
        "discussion_id": "758094579",
        "commented_code": "@@ -2,6 +2,10 @@ import { ModuleMetadata, Provider, Type } from '../../interfaces';\n import { CacheManagerOptions } from './cache-manager.interface';\n \n export interface CacheModuleOptions extends CacheManagerOptions {\n+  /**\n+   * If \"true', register `CacheModule` as a global module.\n+   */\n+  isGlobal?: boolean;",
        "comment_created_at": "2022-01-26T01:23:42+00:00",
        "comment_author": "xuegl",
        "comment_body": "Good idea. I will make it ~~",
        "pr_file_module": null
      },
      {
        "comment_id": "1513530201",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8126,
        "pr_file": "packages/common/cache/interfaces/cache-module.interface.ts",
        "discussion_id": "758094579",
        "commented_code": "@@ -2,6 +2,10 @@ import { ModuleMetadata, Provider, Type } from '../../interfaces';\n import { CacheManagerOptions } from './cache-manager.interface';\n \n export interface CacheModuleOptions extends CacheManagerOptions {\n+  /**\n+   * If \"true', register `CacheModule` as a global module.\n+   */\n+  isGlobal?: boolean;",
        "comment_created_at": "2024-03-05T21:37:46+00:00",
        "comment_author": "IlliaHalchun",
        "comment_body": "Was this documented? I spent around 3 hours to fix not proper global module initialization. And finaly found this comment here :P",
        "pr_file_module": null
      },
      {
        "comment_id": "1513539035",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8126,
        "pr_file": "packages/common/cache/interfaces/cache-module.interface.ts",
        "discussion_id": "758094579",
        "commented_code": "@@ -2,6 +2,10 @@ import { ModuleMetadata, Provider, Type } from '../../interfaces';\n import { CacheManagerOptions } from './cache-manager.interface';\n \n export interface CacheModuleOptions extends CacheManagerOptions {\n+  /**\n+   * If \"true', register `CacheModule` as a global module.\n+   */\n+  isGlobal?: boolean;",
        "comment_created_at": "2024-03-05T21:47:16+00:00",
        "comment_author": "micalevisk",
        "comment_body": "@IlliaHalchun you can find the docs here: https://docs.nestjs.com/techniques/caching#use-module-globally\r\n\r\nfeel free do change it if needed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "930550597",
    "pr_number": 10025,
    "pr_file": "packages/common/pipes/file/parse-file-options.interface.ts",
    "created_at": "2022-07-27T01:59:19+00:00",
    "commented_code": "validators?: FileValidator[];\n   errorHttpStatusCode?: ErrorHttpStatusCode;\n   exceptionFactory?: (error: string) => any;\n+\n+  /**\n+   * Defines if file parameter is optional. Default is false.\n+   */",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "930550597",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10025,
        "pr_file": "packages/common/pipes/file/parse-file-options.interface.ts",
        "discussion_id": "930550597",
        "commented_code": "@@ -5,4 +5,9 @@ export interface ParseFileOptions {\n   validators?: FileValidator[];\n   errorHttpStatusCode?: ErrorHttpStatusCode;\n   exceptionFactory?: (error: string) => any;\n+\n+  /**\n+   * Defines if file parameter is optional. Default is false.\n+   */",
        "comment_created_at": "2022-07-27T01:59:19+00:00",
        "comment_author": "micalevisk",
        "comment_body": "```suggestion\r\n   * Defines if file parameter is optional.\r\n   * @default false\r\n   */\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "884065527",
    "pr_number": 9681,
    "pr_file": "packages/microservices/interfaces/microservice-configuration.interface.ts",
    "created_at": "2022-05-28T03:52:03+00:00",
    "commented_code": "export interface KafkaOptions {\n   transport?: Transport.KAFKA;\n   options?: {\n+    /**\n+     * Defaults to `\"-server\"` on server side and `\"-client\"` on client side.",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "884065527",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9681,
        "pr_file": "packages/microservices/interfaces/microservice-configuration.interface.ts",
        "discussion_id": "884065527",
        "commented_code": "@@ -194,6 +194,9 @@ export interface KafkaParserConfig {\n export interface KafkaOptions {\n   transport?: Transport.KAFKA;\n   options?: {\n+    /**\n+     * Defaults to `\"-server\"` on server side and `\"-client\"` on client side.",
        "comment_created_at": "2022-05-28T03:52:03+00:00",
        "comment_author": "micalevisk",
        "comment_body": "we can't use `@default` tag here because `KafkaOptions['options']` is being used by both client and server",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "808963612",
    "pr_number": 9204,
    "pr_file": "sample/02-gateways/src/main.ts",
    "created_at": "2022-02-17T11:47:10+00:00",
    "commented_code": "import { NestFactory } from '@nestjs/core';\n+import { RedisIoAdapter } from './adapters/redis-io.adapter';\n import { AppModule } from './app.module';\n \n async function bootstrap() {\n   const app = await NestFactory.create(AppModule);\n+\n+  const redisIoAdapter = new RedisIoAdapter(app);\n+  await redisIoAdapter.connectToRedis();\n+\n+  app.useWebSocketAdapter(redisIoAdapter);\n+",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "808963612",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9204,
        "pr_file": "sample/02-gateways/src/main.ts",
        "discussion_id": "808963612",
        "commented_code": "@@ -1,8 +1,15 @@\n import { NestFactory } from '@nestjs/core';\n+import { RedisIoAdapter } from './adapters/redis-io.adapter';\n import { AppModule } from './app.module';\n \n async function bootstrap() {\n   const app = await NestFactory.create(AppModule);\n+\n+  const redisIoAdapter = new RedisIoAdapter(app);\n+  await redisIoAdapter.connectToRedis();\n+\n+  app.useWebSocketAdapter(redisIoAdapter);\n+",
        "comment_created_at": "2022-02-17T11:47:10+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "```suggestion\r\n```\r\nRedis adapter intentionally wasn't being used in this example (it was meant to be simple and not require additional resources, e.g. Redis db)",
        "pr_file_module": null
      },
      {
        "comment_id": "808969153",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9204,
        "pr_file": "sample/02-gateways/src/main.ts",
        "discussion_id": "808963612",
        "commented_code": "@@ -1,8 +1,15 @@\n import { NestFactory } from '@nestjs/core';\n+import { RedisIoAdapter } from './adapters/redis-io.adapter';\n import { AppModule } from './app.module';\n \n async function bootstrap() {\n   const app = await NestFactory.create(AppModule);\n+\n+  const redisIoAdapter = new RedisIoAdapter(app);\n+  await redisIoAdapter.connectToRedis();\n+\n+  app.useWebSocketAdapter(redisIoAdapter);\n+",
        "comment_created_at": "2022-02-17T11:54:17+00:00",
        "comment_author": "TomerRon",
        "comment_body": "Ah okay, makes sense, should we maybe keep these lines commented out with some brief explanation like \"uncomment these lines to use Redis\"? My concern is that the adapter is included in the sample, but it is not clear how to actually use it.\r\n\r\nAnother concern is that the redis adapter could break (evidently) and pipelines would still pass, since we are not using it. I would personally prefer to remove the redis adapter from this sample, and create a new sample that includes the Redis adapter. But I'm fine just doing what you suggested, let me know what you prefer.",
        "pr_file_module": null
      },
      {
        "comment_id": "808974569",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9204,
        "pr_file": "sample/02-gateways/src/main.ts",
        "discussion_id": "808963612",
        "commented_code": "@@ -1,8 +1,15 @@\n import { NestFactory } from '@nestjs/core';\n+import { RedisIoAdapter } from './adapters/redis-io.adapter';\n import { AppModule } from './app.module';\n \n async function bootstrap() {\n   const app = await NestFactory.create(AppModule);\n+\n+  const redisIoAdapter = new RedisIoAdapter(app);\n+  await redisIoAdapter.connectToRedis();\n+\n+  app.useWebSocketAdapter(redisIoAdapter);\n+",
        "comment_created_at": "2022-02-17T12:01:20+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "> My concern is that the adapter is included in the sample, but it is not clear how to actually use it.\r\n\r\nFair enough! Let's comment these lines out and leave a brief explanation just in case.",
        "pr_file_module": null
      },
      {
        "comment_id": "808980088",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9204,
        "pr_file": "sample/02-gateways/src/main.ts",
        "discussion_id": "808963612",
        "commented_code": "@@ -1,8 +1,15 @@\n import { NestFactory } from '@nestjs/core';\n+import { RedisIoAdapter } from './adapters/redis-io.adapter';\n import { AppModule } from './app.module';\n \n async function bootstrap() {\n   const app = await NestFactory.create(AppModule);\n+\n+  const redisIoAdapter = new RedisIoAdapter(app);\n+  await redisIoAdapter.connectToRedis();\n+\n+  app.useWebSocketAdapter(redisIoAdapter);\n+",
        "comment_created_at": "2022-02-17T12:08:24+00:00",
        "comment_author": "TomerRon",
        "comment_body": "Okay, done :+1: ",
        "pr_file_module": null
      }
    ]
  }
]