[
  {
    "discussion_id": "788300020",
    "pr_number": 8972,
    "pr_file": "packages/microservices/server/server-mqtt.ts",
    "created_at": "2022-01-20T02:28:09+00:00",
    "commented_code": "private readonly url: string;\n   private mqttClient: MqttClient;\n+  rawOutputPackets: boolean;\n \n   constructor(private readonly options: MqttOptions['options']) {\n     super();\n     this.url = this.getOptionsProp(options, 'url') || MQTT_DEFAULT_URL;\n-\n+    this.rawOutputPackets = this.getOptionsProp(options, 'rawOutputPackets');",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "788300020",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8972,
        "pr_file": "packages/microservices/server/server-mqtt.ts",
        "discussion_id": "788300020",
        "commented_code": "@@ -32,11 +32,12 @@ export class ServerMqtt extends Server implements CustomTransportStrategy {\n \n   private readonly url: string;\n   private mqttClient: MqttClient;\n+  rawOutputPackets: boolean;\n \n   constructor(private readonly options: MqttOptions['options']) {\n     super();\n     this.url = this.getOptionsProp(options, 'url') || MQTT_DEFAULT_URL;\n-\n+    this.rawOutputPackets = this.getOptionsProp(options, 'rawOutputPackets');",
        "comment_created_at": "2022-01-20T02:28:09+00:00",
        "comment_author": "micalevisk",
        "comment_body": "```suggestion\r\n    this.rawOutputPackets = this.getOptionsProp(options, 'rawOutputPackets', false);\r\n```\r\n\r\nhttps://github.com/nestjs/nest/blob/8617ee9952f4961841c8609329de9627cd8087f9/packages/microservices/server/server.ts#L146-L151",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1400817281",
    "pr_number": 12761,
    "pr_file": "packages/microservices/server/server-tcp.ts",
    "created_at": "2023-11-21T15:56:50+00:00",
    "commented_code": "constructor(private readonly options: TcpOptions['options']) {\n     super();\n-    this.port = this.getOptionsProp(options, 'port') || TCP_DEFAULT_PORT;\n+    this.port = this.getOptionsProp(options, 'port', TCP_DEFAULT_PORT);\n     this.host = this.getOptionsProp(options, 'host') || TCP_DEFAULT_HOST;\n     this.socketClass =\n       this.getOptionsProp(options, 'socketClass') || JsonSocket;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1400817281",
        "repo_full_name": "nestjs/nest",
        "pr_number": 12761,
        "pr_file": "packages/microservices/server/server-tcp.ts",
        "discussion_id": "1400817281",
        "commented_code": "@@ -40,7 +40,7 @@ export class ServerTCP extends Server implements CustomTransportStrategy {\n \n   constructor(private readonly options: TcpOptions['options']) {\n     super();\n-    this.port = this.getOptionsProp(options, 'port') || TCP_DEFAULT_PORT;\n+    this.port = this.getOptionsProp(options, 'port', TCP_DEFAULT_PORT);\n     this.host = this.getOptionsProp(options, 'host') || TCP_DEFAULT_HOST;\n     this.socketClass =\n       this.getOptionsProp(options, 'socketClass') || JsonSocket;",
        "comment_created_at": "2023-11-21T15:56:50+00:00",
        "comment_author": "ZimGil",
        "comment_body": "Why not do the same for all of these assignments? (+1 line below I couldn't include here)\r\n```suggestion\r\n    this.port = this.getOptionsProp(options, 'port', TCP_DEFAULT_PORT);\r\n    this.host = this.getOptionsProp(options, 'host', TCP_DEFAULT_HOST);\r\n    this.socketClass =\r\n      this.getOptionsProp(options, 'socketClass', JsonSocket);\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1413827703",
        "repo_full_name": "nestjs/nest",
        "pr_number": 12761,
        "pr_file": "packages/microservices/server/server-tcp.ts",
        "discussion_id": "1400817281",
        "commented_code": "@@ -40,7 +40,7 @@ export class ServerTCP extends Server implements CustomTransportStrategy {\n \n   constructor(private readonly options: TcpOptions['options']) {\n     super();\n-    this.port = this.getOptionsProp(options, 'port') || TCP_DEFAULT_PORT;\n+    this.port = this.getOptionsProp(options, 'port', TCP_DEFAULT_PORT);\n     this.host = this.getOptionsProp(options, 'host') || TCP_DEFAULT_HOST;\n     this.socketClass =\n       this.getOptionsProp(options, 'socketClass') || JsonSocket;",
        "comment_created_at": "2023-12-04T12:50:55+00:00",
        "comment_author": "PieterScheffers",
        "comment_body": "I didn't know if I would introduce regressions for these other fields. So that is why I didn't alter the other lines.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "930550597",
    "pr_number": 10025,
    "pr_file": "packages/common/pipes/file/parse-file-options.interface.ts",
    "created_at": "2022-07-27T01:59:19+00:00",
    "commented_code": "validators?: FileValidator[];\n   errorHttpStatusCode?: ErrorHttpStatusCode;\n   exceptionFactory?: (error: string) => any;\n+\n+  /**\n+   * Defines if file parameter is optional. Default is false.\n+   */",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "930550597",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10025,
        "pr_file": "packages/common/pipes/file/parse-file-options.interface.ts",
        "discussion_id": "930550597",
        "commented_code": "@@ -5,4 +5,9 @@ export interface ParseFileOptions {\n   validators?: FileValidator[];\n   errorHttpStatusCode?: ErrorHttpStatusCode;\n   exceptionFactory?: (error: string) => any;\n+\n+  /**\n+   * Defines if file parameter is optional. Default is false.\n+   */",
        "comment_created_at": "2022-07-27T01:59:19+00:00",
        "comment_author": "micalevisk",
        "comment_body": "```suggestion\r\n   * Defines if file parameter is optional.\r\n   * @default false\r\n   */\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "884065527",
    "pr_number": 9681,
    "pr_file": "packages/microservices/interfaces/microservice-configuration.interface.ts",
    "created_at": "2022-05-28T03:52:03+00:00",
    "commented_code": "export interface KafkaOptions {\n   transport?: Transport.KAFKA;\n   options?: {\n+    /**\n+     * Defaults to `\"-server\"` on server side and `\"-client\"` on client side.",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "884065527",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9681,
        "pr_file": "packages/microservices/interfaces/microservice-configuration.interface.ts",
        "discussion_id": "884065527",
        "commented_code": "@@ -194,6 +194,9 @@ export interface KafkaParserConfig {\n export interface KafkaOptions {\n   transport?: Transport.KAFKA;\n   options?: {\n+    /**\n+     * Defaults to `\"-server\"` on server side and `\"-client\"` on client side.",
        "comment_created_at": "2022-05-28T03:52:03+00:00",
        "comment_author": "micalevisk",
        "comment_body": "we can't use `@default` tag here because `KafkaOptions['options']` is being used by both client and server",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "803978928",
    "pr_number": 9143,
    "pr_file": "packages/core/nest-factory.ts",
    "created_at": "2022-02-10T18:21:50+00:00",
    "commented_code": "container: NestContainer,\n     config = new ApplicationConfig(),\n     httpServer: HttpServer = null,\n+    appOptions?: NestApplicationOptions,\n   ) {\n     const instanceLoader = new InstanceLoader(container);\n+\n+    if (appOptions && appOptions.disableInstanceLoaderLogs) {\n+      instanceLoader.disableLogs();\n+    }\n+",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "803978928",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9143,
        "pr_file": "packages/core/nest-factory.ts",
        "discussion_id": "803978928",
        "commented_code": "@@ -157,8 +163,14 @@ export class NestFactoryStatic {\n     container: NestContainer,\n     config = new ApplicationConfig(),\n     httpServer: HttpServer = null,\n+    appOptions?: NestApplicationOptions,\n   ) {\n     const instanceLoader = new InstanceLoader(container);\n+\n+    if (appOptions && appOptions.disableInstanceLoaderLogs) {\n+      instanceLoader.disableLogs();\n+    }\n+",
        "comment_created_at": "2022-02-10T18:21:50+00:00",
        "comment_author": "jmcdo29",
        "comment_body": "Instead of marking this as optional, could we give it a default value?\r\n\r\n```suggestion\r\n    appOptions: NestApplicationOptions = {\r\n      disableInstanceLoaderLogs: false\r\n    },\r\n  ) {\r\n    const instanceLoader = new InstanceLoader(container);\r\n\r\n    if (appOptions.disableInstanceLoaderLogs) {\r\n      instanceLoader.disableLogs();\r\n    }\r\n```\r\n\r\nAlso, do we need the full options here, or just the `disableInstanceLoaderLogs` option? We might be able to cut this down to a simple `boolean` instead of the full object",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "737329113",
    "pr_number": 8365,
    "pr_file": "packages/microservices/constants.ts",
    "created_at": "2021-10-27T10:29:35+00:00",
    "commented_code": "export const NO_MESSAGE_HANDLER = `There is no matching message handler defined in the remote service.`;\n export const NO_EVENT_HANDLER = `There is no matching event handler defined in the remote service.`;\n export const DISCONNECTED_RMQ_MESSAGE = `Disconnected from RMQ. Trying to reconnect.`;\n-export const GRPC_DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024;\n-export const GRPC_DEFAULT_MAX_SEND_MESSAGE_LENGTH = 4 * 1024 * 1024;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "737329113",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8365,
        "pr_file": "packages/microservices/constants.ts",
        "discussion_id": "737329113",
        "commented_code": "@@ -39,8 +39,6 @@ export const GRPC_DEFAULT_PROTO_LOADER = '@grpc/proto-loader';\n export const NO_MESSAGE_HANDLER = `There is no matching message handler defined in the remote service.`;\n export const NO_EVENT_HANDLER = `There is no matching event handler defined in the remote service.`;\n export const DISCONNECTED_RMQ_MESSAGE = `Disconnected from RMQ. Trying to reconnect.`;\n-export const GRPC_DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024;\n-export const GRPC_DEFAULT_MAX_SEND_MESSAGE_LENGTH = 4 * 1024 * 1024;\n ",
        "comment_created_at": "2021-10-27T10:29:35+00:00",
        "comment_author": "Ayzrian",
        "comment_body": "I think it is worth returning these default values and using them when the developer didn't provide them explicitly in the options. ",
        "pr_file_module": null
      },
      {
        "comment_id": "737374553",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8365,
        "pr_file": "packages/microservices/constants.ts",
        "discussion_id": "737329113",
        "commented_code": "@@ -39,8 +39,6 @@ export const GRPC_DEFAULT_PROTO_LOADER = '@grpc/proto-loader';\n export const NO_MESSAGE_HANDLER = `There is no matching message handler defined in the remote service.`;\n export const NO_EVENT_HANDLER = `There is no matching event handler defined in the remote service.`;\n export const DISCONNECTED_RMQ_MESSAGE = `Disconnected from RMQ. Trying to reconnect.`;\n-export const GRPC_DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024;\n-export const GRPC_DEFAULT_MAX_SEND_MESSAGE_LENGTH = 4 * 1024 * 1024;\n ",
        "comment_created_at": "2021-10-27T11:35:23+00:00",
        "comment_author": "sjkummer",
        "comment_body": "4 MB is the current gRPC default, therefore nothing changes for developers who did not set a value. Why redeclare? And if the gRPC default changes (for reasons) in the futurore, why would nestJS want to stick to outdated default values?",
        "pr_file_module": null
      },
      {
        "comment_id": "737409778",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8365,
        "pr_file": "packages/microservices/constants.ts",
        "discussion_id": "737329113",
        "commented_code": "@@ -39,8 +39,6 @@ export const GRPC_DEFAULT_PROTO_LOADER = '@grpc/proto-loader';\n export const NO_MESSAGE_HANDLER = `There is no matching message handler defined in the remote service.`;\n export const NO_EVENT_HANDLER = `There is no matching event handler defined in the remote service.`;\n export const DISCONNECTED_RMQ_MESSAGE = `Disconnected from RMQ. Trying to reconnect.`;\n-export const GRPC_DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024;\n-export const GRPC_DEFAULT_MAX_SEND_MESSAGE_LENGTH = 4 * 1024 * 1024;\n ",
        "comment_created_at": "2021-10-27T12:23:45+00:00",
        "comment_author": "Ayzrian",
        "comment_body": "Gotcha then yep it makes sense to remove these options. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "604222324",
    "pr_number": 6806,
    "pr_file": "packages/microservices/client/client-kafka.ts",
    "created_at": "2021-03-30T15:49:52+00:00",
    "commented_code": "}\n \n   public createClient<T = any>(): T {\n-    return new kafkaPackage.Kafka(\n-      Object.assign(this.options.client || {}, {\n-        clientId: this.clientId,\n-        brokers: this.brokers,\n-        logCreator: KafkaLogger.bind(null, this.logger),\n-      }) as KafkaConfig,\n+    const kafkaConfig: KafkaConfig = Object.assign(\n+      { logCreator: KafkaLogger.bind(null, this.logger) },\n+      this.options.client,\n+      { brokers: this.brokers, clientId: this.clientId },",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "604222324",
        "repo_full_name": "nestjs/nest",
        "pr_number": 6806,
        "pr_file": "packages/microservices/client/client-kafka.ts",
        "discussion_id": "604222324",
        "commented_code": "@@ -142,13 +142,13 @@ export class ClientKafka extends ClientProxy {\n   }\n \n   public createClient<T = any>(): T {\n-    return new kafkaPackage.Kafka(\n-      Object.assign(this.options.client || {}, {\n-        clientId: this.clientId,\n-        brokers: this.brokers,\n-        logCreator: KafkaLogger.bind(null, this.logger),\n-      }) as KafkaConfig,\n+    const kafkaConfig: KafkaConfig = Object.assign(\n+      { logCreator: KafkaLogger.bind(null, this.logger) },\n+      this.options.client,\n+      { brokers: this.brokers, clientId: this.clientId },",
        "comment_created_at": "2021-03-30T15:49:52+00:00",
        "comment_author": "benderTheCrime",
        "comment_body": "As an alternative here, we could check to see if the `logCreator` is defined on options, else default it. Example:\r\n\r\n```\r\n    const clientOptions = this.options.client || {};\r\n    const kafkaConfig: KafkaConfig = Object.assign(\r\n      this.options.client,\r\n      { \r\n        brokers: this.brokers, \r\n        clientId: this.clientId,\r\n         logCreator: clientOptions.logCreator || KafkaLogger.bind(null, this.logger),\r\n      }\r\n    );\r\n```\r\n\r\nThis is sort of nice because we won't arbitrarily create a `KafkaLogger` we may not use and we sacrifice the spreadability of null or undefined `clientOptions`\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "243925638",
    "pr_number": 1388,
    "pr_file": "packages/microservices/server/server-grpc.ts",
    "created_at": "2018-12-25T22:15:14+00:00",
    "commented_code": "}\n \n   public createClient(): any {\n-    const server = new grpcPackage.Server();\n+    const server = new grpcPackage.Server({\n+      ...this.maxSendMessageLength ? { 'grpc.max_send_message_length': this.maxSendMessageLength } : {},\n+      ...this.maxReceiveMessageLength ? { 'grpc.max_receive_message_length': this.maxReceiveMessageLength } : {}",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "243925638",
        "repo_full_name": "nestjs/nest",
        "pr_number": 1388,
        "pr_file": "packages/microservices/server/server-grpc.ts",
        "discussion_id": "243925638",
        "commented_code": "@@ -137,7 +144,10 @@ export class ServerGrpc extends Server implements CustomTransportStrategy {\n   }\n \n   public createClient(): any {\n-    const server = new grpcPackage.Server();\n+    const server = new grpcPackage.Server({\n+      ...this.maxSendMessageLength ? { 'grpc.max_send_message_length': this.maxSendMessageLength } : {},\n+      ...this.maxReceiveMessageLength ? { 'grpc.max_receive_message_length': this.maxReceiveMessageLength } : {}",
        "comment_created_at": "2018-12-25T22:15:14+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Instead of adding two extra class properties, you could use helper `getOptionsProp()` method (see example below) which also takes a default value.",
        "pr_file_module": null
      },
      {
        "comment_id": "244194947",
        "repo_full_name": "nestjs/nest",
        "pr_number": 1388,
        "pr_file": "packages/microservices/server/server-grpc.ts",
        "discussion_id": "243925638",
        "commented_code": "@@ -137,7 +144,10 @@ export class ServerGrpc extends Server implements CustomTransportStrategy {\n   }\n \n   public createClient(): any {\n-    const server = new grpcPackage.Server();\n+    const server = new grpcPackage.Server({\n+      ...this.maxSendMessageLength ? { 'grpc.max_send_message_length': this.maxSendMessageLength } : {},\n+      ...this.maxReceiveMessageLength ? { 'grpc.max_receive_message_length': this.maxReceiveMessageLength } : {}",
        "comment_created_at": "2018-12-27T17:31:55+00:00",
        "comment_author": "hschiavone",
        "comment_body": "You right, but i had to fix `getOptionsProp()` method which didn't work as expected. Thank you for your feedback",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "257689862",
    "pr_number": 1549,
    "pr_file": "packages/microservices/constants.ts",
    "created_at": "2019-02-18T13:14:31+00:00",
    "commented_code": "export const RQM_DEFAULT_PREFETCH_COUNT = 0;\n export const RQM_DEFAULT_IS_GLOBAL_PREFETCH_COUNT = false;\n export const RQM_DEFAULT_QUEUE_OPTIONS = {};\n+export const RQM_DEFAULT_SOCKET_OPTIONS = {};",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "257689862",
        "repo_full_name": "nestjs/nest",
        "pr_number": 1549,
        "pr_file": "packages/microservices/constants.ts",
        "discussion_id": "257689862",
        "commented_code": "@@ -25,6 +25,7 @@ export const RQM_DEFAULT_QUEUE = 'default';\n export const RQM_DEFAULT_PREFETCH_COUNT = 0;\n export const RQM_DEFAULT_IS_GLOBAL_PREFETCH_COUNT = false;\n export const RQM_DEFAULT_QUEUE_OPTIONS = {};\n+export const RQM_DEFAULT_SOCKET_OPTIONS = {};",
        "comment_created_at": "2019-02-18T13:14:31+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "could be potentially removed? (just use `undefined` when not explicitly defined)",
        "pr_file_module": null
      }
    ]
  }
]