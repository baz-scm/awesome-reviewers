[
  {
    "discussion_id": "986498427",
    "pr_number": 10345,
    "pr_file": "packages/platform-express/adapters/express-adapter.ts",
    "created_at": "2022-10-04T07:00:19+00:00",
    "commented_code": "}\n \n   public close() {\n+    this.openConnections.forEach(socket => {\n+      socket.destroy();\n+    });",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "986498427",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10345,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "986498427",
        "commented_code": "@@ -134,6 +135,9 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n   }\n \n   public close() {\n+    this.openConnections.forEach(socket => {\n+      socket.destroy();\n+    });",
        "comment_created_at": "2022-10-04T07:00:19+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Similarly to what Fastify did, should we expose the `forceCloseConnections` flag to control that behavior?",
        "pr_file_module": null
      },
      {
        "comment_id": "987376346",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10345,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "986498427",
        "commented_code": "@@ -134,6 +135,9 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n   }\n \n   public close() {\n+    this.openConnections.forEach(socket => {\n+      socket.destroy();\n+    });",
        "comment_created_at": "2022-10-04T22:19:46+00:00",
        "comment_author": "tolgap",
        "comment_body": "I looked into this. It's not really possible with the current `ExpressAdapter` and `FastifyAdapter` types.\r\n\r\nThe way you create a fastify app is by passing `new FastifyAdapter(...options)`. You cannot do this with an express app as `ExpressAdapter` only takes an express instance.\r\n\r\nAs this is an option that is passed to the constructor Fastify adapter, we can't replicate this in Express.\r\n\r\nHaving a `forceCloseConnections` option on the application makes no sense then, as it would only work for Express.",
        "pr_file_module": null
      },
      {
        "comment_id": "987573536",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10345,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "986498427",
        "commented_code": "@@ -134,6 +135,9 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n   }\n \n   public close() {\n+    this.openConnections.forEach(socket => {\n+      socket.destroy();\n+    });",
        "comment_created_at": "2022-10-05T06:29:45+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Do we have any other ideas on how we could avoid introducing a breaking change? AFAIR `forceCloseConnections` is disabled by default (in Fastify) too.\r\n\r\nPerhaps we should expose a dedicated method at the adapter class level? So then you could do \r\n```typescript\r\nconst adapter = app.getHttpAdapter() as ExpressAdapter\r\nadapter.enableForceCloseConnections(); // adapter.forceCloseConnections = true; ?\r\n```\r\nOR maybe we should auto-enable it when someone calls `enableShutdownHooks()`?\r\n\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "989001975",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10345,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "986498427",
        "commented_code": "@@ -134,6 +135,9 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n   }\n \n   public close() {\n+    this.openConnections.forEach(socket => {\n+      socket.destroy();\n+    });",
        "comment_created_at": "2022-10-06T12:44:01+00:00",
        "comment_author": "tolgap",
        "comment_body": "@kamilmysliwiec It's just not possible without breaking changes.\r\n\r\nFor Fastify this option needs to be \"available\" in the constructor.\r\nFor Express, we can enable this behavior afterwards.\r\n\r\nTrying to make this option available in the `FastifyAdapter` constructor would imply a breaking change.\r\n\r\nPS: I would love to make a breaking change, just to get this going though \ud83d\ude04 . Let me know what you'd like.",
        "pr_file_module": null
      },
      {
        "comment_id": "1002992316",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10345,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "986498427",
        "commented_code": "@@ -134,6 +135,9 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n   }\n \n   public close() {\n+    this.openConnections.forEach(socket => {\n+      socket.destroy();\n+    });",
        "comment_created_at": "2022-10-24T08:04:35+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "What makes this problematic is the fact that breaking change forces us to release a new major version (and so we'd have to postpone merging this PR a little) :( ",
        "pr_file_module": null
      },
      {
        "comment_id": "1003113052",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10345,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "986498427",
        "commented_code": "@@ -134,6 +135,9 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n   }\n \n   public close() {\n+    this.openConnections.forEach(socket => {\n+      socket.destroy();\n+    });",
        "comment_created_at": "2022-10-24T09:49:32+00:00",
        "comment_author": "tolgap",
        "comment_body": "@kamilmysliwiec would you be open to introducing this with difference in API for Fastify? Just like how `https` is differently configured between express/fastify: https://docs.nestjs.com/faq/multiple-servers\r\n\r\n- Express would listen to the `forceCloseConnections` application option.\r\n- Fastify would ignore this, and only listen to `forceCloseConnections` if passed into the `FastifyAdapter` constructor\r\n\r\nThat way we could document this behavior, and avoid any breaking changes.",
        "pr_file_module": null
      },
      {
        "comment_id": "1003184330",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10345,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "986498427",
        "commented_code": "@@ -134,6 +135,9 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n   }\n \n   public close() {\n+    this.openConnections.forEach(socket => {\n+      socket.destroy();\n+    });",
        "comment_created_at": "2022-10-24T11:02:07+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "SGTM \u2705 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1003425250",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10345,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "986498427",
        "commented_code": "@@ -134,6 +135,9 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n   }\n \n   public close() {\n+    this.openConnections.forEach(socket => {\n+      socket.destroy();\n+    });",
        "comment_created_at": "2022-10-24T15:01:33+00:00",
        "comment_author": "tolgap",
        "comment_body": "@kamilmysliwiec applied the discussed logic.\r\n\r\nI added e2e tests for SSE (that extensively use keep-alive connections) for Express + Fastify. Also leveraged the usage of this new option in the `28-sse` sample app.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "671576290",
    "pr_number": 7589,
    "pr_file": "packages/platform-express/adapters/express-adapter.ts",
    "created_at": "2021-07-17T00:05:50+00:00",
    "commented_code": "return response.send();\n     }\n     if (body instanceof StreamableFile) {\n-      response.setHeader('Content-Type', 'application/octet-stream');\n+      if (!response.getHeader('Content-Type')) {",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "671576290",
        "repo_full_name": "nestjs/nest",
        "pr_number": 7589,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "671576290",
        "commented_code": "@@ -30,7 +30,9 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n       return response.send();\n     }\n     if (body instanceof StreamableFile) {\n-      response.setHeader('Content-Type', 'application/octet-stream');\n+      if (!response.getHeader('Content-Type')) {",
        "comment_created_at": "2021-07-17T00:05:50+00:00",
        "comment_author": "micalevisk",
        "comment_body": "Note that since the return of `response.getHeader('Content-Type')` depends on the arguments provided to `response#setHeader` then this condition could be mislead(?). For instance, if we pass any falsy value to `response.setHeader` in some controller's method, like `response.setHeader('Content-Type', '')`, we'll not receive that content type.\r\n\r\nI know this scenario is weird but since I _(as a Nest user)_ have explicity called `response.setHeader` in my code, it would be strange to receive the default value instead. What do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "671577350",
        "repo_full_name": "nestjs/nest",
        "pr_number": 7589,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "671576290",
        "commented_code": "@@ -30,7 +30,9 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n       return response.send();\n     }\n     if (body instanceof StreamableFile) {\n-      response.setHeader('Content-Type', 'application/octet-stream');\n+      if (!response.getHeader('Content-Type')) {",
        "comment_created_at": "2021-07-17T00:11:50+00:00",
        "comment_author": "jmcdo29",
        "comment_body": "If you were to have a falsy header value, such as `false`, `0` or `''`, no browser that I'm aware of would know how to properly handle that response, and as such the body might be unrecoverable, or at least encoded in an unexpected way.\n\nI think think is a decent restriction to keep from giving the dev a nice foot gun, but I'd be willing to hear what the browser should do if the header was one of those values, especially if there's an RFC for it as well",
        "pr_file_module": null
      },
      {
        "comment_id": "671581508",
        "repo_full_name": "nestjs/nest",
        "pr_number": 7589,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "671576290",
        "commented_code": "@@ -30,7 +30,9 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n       return response.send();\n     }\n     if (body instanceof StreamableFile) {\n-      response.setHeader('Content-Type', 'application/octet-stream');\n+      if (!response.getHeader('Content-Type')) {",
        "comment_created_at": "2021-07-17T00:38:53+00:00",
        "comment_author": "micalevisk",
        "comment_body": "I was thinking more in HTTP client usage and where the content type value is defined dynamically (or sort of). Instead of identifying quickly, by looking into the headers sent, that the value was wrong for something that you've implemented, the dev will see another value -- maybe this could be documented, idk.\r\n\r\nBut I agree with you now. Since we're in dealing with a framework is better to apply some restrictions. ty!",
        "pr_file_module": null
      },
      {
        "comment_id": "671598307",
        "repo_full_name": "nestjs/nest",
        "pr_number": 7589,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "671576290",
        "commented_code": "@@ -30,7 +30,9 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n       return response.send();\n     }\n     if (body instanceof StreamableFile) {\n-      response.setHeader('Content-Type', 'application/octet-stream');\n+      if (!response.getHeader('Content-Type')) {",
        "comment_created_at": "2021-07-17T02:57:38+00:00",
        "comment_author": "micalevisk",
        "comment_body": "oh I just read how fastify handles that here: https://github.com/fastify/fastify/blob/7e18edcf76fb58dc33b842b1dba14a425dd6feba/lib/reply.js#L136-L142 looks like they **do allow** falsy values.\r\n\r\nSo the `AbstractHttpAdapter#reply` will not behave in the same way for both adapters in those edge cases. Do you guys think this could be an issue somehow? ",
        "pr_file_module": null
      },
      {
        "comment_id": "672347461",
        "repo_full_name": "nestjs/nest",
        "pr_number": 7589,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "671576290",
        "commented_code": "@@ -30,7 +30,9 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n       return response.send();\n     }\n     if (body instanceof StreamableFile) {\n-      response.setHeader('Content-Type', 'application/octet-stream');\n+      if (!response.getHeader('Content-Type')) {",
        "comment_created_at": "2021-07-19T14:26:22+00:00",
        "comment_author": "dzunftmeister-evorhei",
        "comment_body": "i think, it's the best to be as compatible as possible between the plattforms. even if the falsy values doesn't make sense. then i would set the content-type only if undefined.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "612742693",
    "pr_number": 6889,
    "pr_file": "packages/core/router/sse-stream.ts",
    "created_at": "2021-04-13T20:08:23+00:00",
    "commented_code": "// Disable cache, even for old browsers and proxies\n         'Cache-Control':\n           'private, no-cache, no-store, must-revalidate, max-age=0, no-transform',\n-        'Transfer-Encoding': 'identity',",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "612742693",
        "repo_full_name": "nestjs/nest",
        "pr_number": 6889,
        "pr_file": "packages/core/router/sse-stream.ts",
        "discussion_id": "612742693",
        "commented_code": "@@ -59,7 +59,6 @@ export class SseStream extends Transform {\n         // Disable cache, even for old browsers and proxies\n         'Cache-Control':\n           'private, no-cache, no-store, must-revalidate, max-age=0, no-transform',\n-        'Transfer-Encoding': 'identity',",
        "comment_created_at": "2021-04-13T20:08:23+00:00",
        "comment_author": "jmcdo29",
        "comment_body": "I assume this will automatically be `chunk`? If not, should we set it to that?",
        "pr_file_module": null
      },
      {
        "comment_id": "612783559",
        "repo_full_name": "nestjs/nest",
        "pr_number": 6889,
        "pr_file": "packages/core/router/sse-stream.ts",
        "discussion_id": "612742693",
        "commented_code": "@@ -59,7 +59,6 @@ export class SseStream extends Transform {\n         // Disable cache, even for old browsers and proxies\n         'Cache-Control':\n           'private, no-cache, no-store, must-revalidate, max-age=0, no-transform',\n-        'Transfer-Encoding': 'identity',",
        "comment_created_at": "2021-04-13T21:18:58+00:00",
        "comment_author": "ashervb",
        "comment_body": "Yes, my understanding is the [server](https://serverfault.com/questions/801628/for-server-sent-events-sse-what-nginx-proxy-configuration-is-appropriate) should set that header automatically if the content-length is unknown. Only the headers:\r\n\r\n```\r\nContent-Type: text/event-stream;\r\nCache-Control: no-cache;\r\nX-Accel-Buffering: no;\r\n```\r\n\r\n[should be necessary](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "273145485",
    "pr_number": 1957,
    "pr_file": "packages/common/enums/http-status.enum.ts",
    "created_at": "2019-04-08T16:58:14+00:00",
    "commented_code": "I_AM_A_TEAPOT = 418,\n   UNPROCESSABLE_ENTITY = 422,\n   TOO_MANY_REQUESTS = 429,\n+  CLIENT_CLOSED_REQUEST = 499,",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "273145485",
        "repo_full_name": "nestjs/nest",
        "pr_number": 1957,
        "pr_file": "packages/common/enums/http-status.enum.ts",
        "discussion_id": "273145485",
        "commented_code": "@@ -37,6 +37,7 @@ export enum HttpStatus {\n   I_AM_A_TEAPOT = 418,\n   UNPROCESSABLE_ENTITY = 422,\n   TOO_MANY_REQUESTS = 429,\n+  CLIENT_CLOSED_REQUEST = 499,",
        "comment_created_at": "2019-04-08T16:58:14+00:00",
        "comment_author": "tychota",
        "comment_body": "I'm not that confident introducing the non standard HTTP status code : https://httpstatuses.com/499\r\n\r\nI have hesitated with a hardcoded \"499\" in Canceled exception.\r\nWDYT ?",
        "pr_file_module": null
      },
      {
        "comment_id": "273222420",
        "repo_full_name": "nestjs/nest",
        "pr_number": 1957,
        "pr_file": "packages/common/enums/http-status.enum.ts",
        "discussion_id": "273145485",
        "commented_code": "@@ -37,6 +37,7 @@ export enum HttpStatus {\n   I_AM_A_TEAPOT = 418,\n   UNPROCESSABLE_ENTITY = 422,\n   TOO_MANY_REQUESTS = 429,\n+  CLIENT_CLOSED_REQUEST = 499,",
        "comment_created_at": "2019-04-08T20:22:36+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "I'd say that we probably shouldn't introduce non-standard HTTP status codes. Better hardcode it inside a corresponding gRPC expection.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "472898978",
    "pr_number": 4842,
    "pr_file": "packages/core/services/sse-stream.service.ts",
    "created_at": "2020-08-19T09:38:19+00:00",
    "commented_code": "+import { Transform } from 'stream';\n+import { IncomingMessage, OutgoingHttpHeaders } from 'http';\n+import { MessageEvent } from '@nestjs/common/interfaces';\n+\n+function toDataString(data: string | object): string {\n+  if (typeof data === 'object') return toDataString(JSON.stringify(data));\n+  return data\n+    .split(/\\r\n|\\r|\n/)\n+    .map(line => `data: ${line}\n`)\n+    .join('');\n+}\n+\n+interface WriteHeaders {\n+  writeHead?(\n+    statusCode: number,\n+    reasonPhrase?: string,\n+    headers?: OutgoingHttpHeaders,\n+  ): void;\n+  writeHead?(statusCode: number, headers?: OutgoingHttpHeaders): void;\n+  flushHeaders?(): void;\n+}\n+\n+export type HeaderStream = NodeJS.WritableStream & WriteHeaders;\n+\n+/**\n+ * Adapted from https://raw.githubusercontent.com/EventSource/node-ssestream\n+ * Transforms \"messages\" to W3C event stream content.\n+ * See https://html.spec.whatwg.org/multipage/server-sent-events.html\n+ * A message is an object with one or more of the following properties:\n+ * - data (String or object, which gets turned into JSON)\n+ * - type\n+ * - id\n+ * - retry\n+ *\n+ * If constructed with a HTTP Request, it will optimise the socket for streaming.\n+ * If this stream is piped to an HTTP Response, it will set appropriate headers.\n+ */\n+export class SseStream extends Transform {\n+  private lastEventId: number = null;\n+\n+  constructor(req?: IncomingMessage) {\n+    super({ objectMode: true });\n+    if (req && req.socket) {\n+      req.socket.setKeepAlive(true);\n+      req.socket.setNoDelay(true);\n+      req.socket.setTimeout(0);\n+    }\n+  }\n+\n+  pipe<T extends HeaderStream>(destination: T, options?: { end?: boolean }): T {\n+    if (destination.writeHead) {\n+      destination.writeHead(200, {\n+        'Content-Type': 'text/event-stream; charset=utf-8',\n+        'Transfer-Encoding': 'identity',\n+        'Cache-Control': 'no-cache',",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "472898978",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4842,
        "pr_file": "packages/core/services/sse-stream.service.ts",
        "discussion_id": "472898978",
        "commented_code": "@@ -0,0 +1,94 @@\n+import { Transform } from 'stream';\n+import { IncomingMessage, OutgoingHttpHeaders } from 'http';\n+import { MessageEvent } from '@nestjs/common/interfaces';\n+\n+function toDataString(data: string | object): string {\n+  if (typeof data === 'object') return toDataString(JSON.stringify(data));\n+  return data\n+    .split(/\\r\\n|\\r|\\n/)\n+    .map(line => `data: ${line}\\n`)\n+    .join('');\n+}\n+\n+interface WriteHeaders {\n+  writeHead?(\n+    statusCode: number,\n+    reasonPhrase?: string,\n+    headers?: OutgoingHttpHeaders,\n+  ): void;\n+  writeHead?(statusCode: number, headers?: OutgoingHttpHeaders): void;\n+  flushHeaders?(): void;\n+}\n+\n+export type HeaderStream = NodeJS.WritableStream & WriteHeaders;\n+\n+/**\n+ * Adapted from https://raw.githubusercontent.com/EventSource/node-ssestream\n+ * Transforms \"messages\" to W3C event stream content.\n+ * See https://html.spec.whatwg.org/multipage/server-sent-events.html\n+ * A message is an object with one or more of the following properties:\n+ * - data (String or object, which gets turned into JSON)\n+ * - type\n+ * - id\n+ * - retry\n+ *\n+ * If constructed with a HTTP Request, it will optimise the socket for streaming.\n+ * If this stream is piped to an HTTP Response, it will set appropriate headers.\n+ */\n+export class SseStream extends Transform {\n+  private lastEventId: number = null;\n+\n+  constructor(req?: IncomingMessage) {\n+    super({ objectMode: true });\n+    if (req && req.socket) {\n+      req.socket.setKeepAlive(true);\n+      req.socket.setNoDelay(true);\n+      req.socket.setTimeout(0);\n+    }\n+  }\n+\n+  pipe<T extends HeaderStream>(destination: T, options?: { end?: boolean }): T {\n+    if (destination.writeHead) {\n+      destination.writeHead(200, {\n+        'Content-Type': 'text/event-stream; charset=utf-8',\n+        'Transfer-Encoding': 'identity',\n+        'Cache-Control': 'no-cache',",
        "comment_created_at": "2020-08-19T09:38:19+00:00",
        "comment_author": "dunglas",
        "comment_body": "To ensure compatibility with a wide range of proxies (including Fastly and Nginx), you should copy all these headers: https://github.com/dunglas/mercure/blob/master/hub/subscribe.go#L124-L130",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "308103214",
    "pr_number": 2632,
    "pr_file": "packages/platform-fastify/adapters/fastify-adapter.ts",
    "created_at": "2019-07-29T08:13:54+00:00",
    "commented_code": "return response.view(view, options);\n   }\n \n+  public redirect(response: any, statusCode: number, url: string) {\n+    const code = statusCode ? statusCode : HttpStatus.TEMPORARY_REDIRECT;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "308103214",
        "repo_full_name": "nestjs/nest",
        "pr_number": 2632,
        "pr_file": "packages/platform-fastify/adapters/fastify-adapter.ts",
        "discussion_id": "308103214",
        "commented_code": "@@ -49,6 +49,11 @@ export class FastifyAdapter extends AbstractHttpAdapter {\n     return response.view(view, options);\n   }\n \n+  public redirect(response: any, statusCode: number, url: string) {\n+    const code = statusCode ? statusCode : HttpStatus.TEMPORARY_REDIRECT;",
        "comment_created_at": "2019-07-29T08:13:54+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Why do we presume that `TEMPORARY_REDIRECT` should be the default one?",
        "pr_file_module": null
      },
      {
        "comment_id": "308314068",
        "repo_full_name": "nestjs/nest",
        "pr_number": 2632,
        "pr_file": "packages/platform-fastify/adapters/fastify-adapter.ts",
        "discussion_id": "308103214",
        "commented_code": "@@ -49,6 +49,11 @@ export class FastifyAdapter extends AbstractHttpAdapter {\n     return response.view(view, options);\n   }\n \n+  public redirect(response: any, statusCode: number, url: string) {\n+    const code = statusCode ? statusCode : HttpStatus.TEMPORARY_REDIRECT;",
        "comment_created_at": "2019-07-29T16:09:54+00:00",
        "comment_author": "johnbiundo",
        "comment_body": "@kamilmysliwiec Good catch.  Both [Express](https://expressjs.com/en/api.html#res.redirect) and [Fastify](https://github.com/fastify/fastify/blob/master/docs/Reply.md#redirectdest) default to 302 (FOUND).  I always associated 302 with `TEMPORARY_REDIRECT` but to send a 302, it should be `FOUND`.  Make sense?",
        "pr_file_module": null
      },
      {
        "comment_id": "313298873",
        "repo_full_name": "nestjs/nest",
        "pr_number": 2632,
        "pr_file": "packages/platform-fastify/adapters/fastify-adapter.ts",
        "discussion_id": "308103214",
        "commented_code": "@@ -49,6 +49,11 @@ export class FastifyAdapter extends AbstractHttpAdapter {\n     return response.view(view, options);\n   }\n \n+  public redirect(response: any, statusCode: number, url: string) {\n+    const code = statusCode ? statusCode : HttpStatus.TEMPORARY_REDIRECT;",
        "comment_created_at": "2019-08-13T09:24:26+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Make sense now :)",
        "pr_file_module": null
      },
      {
        "comment_id": "313343601",
        "repo_full_name": "nestjs/nest",
        "pr_number": 2632,
        "pr_file": "packages/platform-fastify/adapters/fastify-adapter.ts",
        "discussion_id": "308103214",
        "commented_code": "@@ -49,6 +49,11 @@ export class FastifyAdapter extends AbstractHttpAdapter {\n     return response.view(view, options);\n   }\n \n+  public redirect(response: any, statusCode: number, url: string) {\n+    const code = statusCode ? statusCode : HttpStatus.TEMPORARY_REDIRECT;",
        "comment_created_at": "2019-08-13T11:21:02+00:00",
        "comment_author": "johnbiundo",
        "comment_body": "OK, I will switch to 302 (FOUND) and resubmit.",
        "pr_file_module": null
      },
      {
        "comment_id": "315873032",
        "repo_full_name": "nestjs/nest",
        "pr_number": 2632,
        "pr_file": "packages/platform-fastify/adapters/fastify-adapter.ts",
        "discussion_id": "308103214",
        "commented_code": "@@ -49,6 +49,11 @@ export class FastifyAdapter extends AbstractHttpAdapter {\n     return response.view(view, options);\n   }\n \n+  public redirect(response: any, statusCode: number, url: string) {\n+    const code = statusCode ? statusCode : HttpStatus.TEMPORARY_REDIRECT;",
        "comment_created_at": "2019-08-20T19:51:21+00:00",
        "comment_author": "johnbiundo",
        "comment_body": "@kamilmysliwiec Switched to 302 found, as discussed.",
        "pr_file_module": null
      }
    ]
  }
]