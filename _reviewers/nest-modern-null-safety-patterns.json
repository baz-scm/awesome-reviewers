[
  {
    "discussion_id": "782238982",
    "pr_number": 8459,
    "pr_file": "packages/common/pipes/parse-uuid.pipe.ts",
    "created_at": "2022-01-11T15:08:38+00:00",
    "commented_code": "}\n     return value;\n   }\n+\n+  protected isUUID(str: unknown, version = 'all') {\n+    if (!isString(str)) {\n+      throw this.exceptionFactory('The value passed as UUID is not a string');\n+    }\n+    const pattern = ParseUUIDPipe.uuidRegExps[version];\n+    return pattern && pattern.test(str);",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "782238982",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8459,
        "pr_file": "packages/common/pipes/parse-uuid.pipe.ts",
        "discussion_id": "782238982",
        "commented_code": "@@ -45,4 +52,12 @@ export class ParseUUIDPipe implements PipeTransform<string> {\n     }\n     return value;\n   }\n+\n+  protected isUUID(str: unknown, version = 'all') {\n+    if (!isString(str)) {\n+      throw this.exceptionFactory('The value passed as UUID is not a string');\n+    }\n+    const pattern = ParseUUIDPipe.uuidRegExps[version];\n+    return pattern && pattern.test(str);",
        "comment_created_at": "2022-01-11T15:08:38+00:00",
        "comment_author": "cikay",
        "comment_body": "Use [optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining)",
        "pr_file_module": null
      },
      {
        "comment_id": "820914581",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8459,
        "pr_file": "packages/common/pipes/parse-uuid.pipe.ts",
        "discussion_id": "782238982",
        "commented_code": "@@ -45,4 +52,12 @@ export class ParseUUIDPipe implements PipeTransform<string> {\n     }\n     return value;\n   }\n+\n+  protected isUUID(str: unknown, version = 'all') {\n+    if (!isString(str)) {\n+      throw this.exceptionFactory('The value passed as UUID is not a string');\n+    }\n+    const pattern = ParseUUIDPipe.uuidRegExps[version];\n+    return pattern && pattern.test(str);",
        "comment_created_at": "2022-03-07T17:05:53+00:00",
        "comment_author": "titivuk",
        "comment_body": "Nice catch, didn't notice during refactoring",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "820150298",
    "pr_number": 8459,
    "pr_file": "packages/common/pipes/parse-uuid.pipe.ts",
    "created_at": "2022-03-05T21:35:15+00:00",
    "commented_code": "}\n     return value;\n   }\n+\n+  protected isUUID(str: unknown, version = 'all') {\n+    if (!isString(str)) {\n+      throw this.exceptionFactory('The value passed as UUID is not a string');\n+    }\n+    const pattern = ParseUUIDPipe.uuidRegExps[version];\n+    return pattern && pattern.test(str);",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "820150298",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8459,
        "pr_file": "packages/common/pipes/parse-uuid.pipe.ts",
        "discussion_id": "820150298",
        "commented_code": "@@ -45,4 +52,12 @@ export class ParseUUIDPipe implements PipeTransform<string> {\n     }\n     return value;\n   }\n+\n+  protected isUUID(str: unknown, version = 'all') {\n+    if (!isString(str)) {\n+      throw this.exceptionFactory('The value passed as UUID is not a string');\n+    }\n+    const pattern = ParseUUIDPipe.uuidRegExps[version];\n+    return pattern && pattern.test(str);",
        "comment_created_at": "2022-03-05T21:35:15+00:00",
        "comment_author": "micalevisk",
        "comment_body": "```suggestion\r\n    return pattern?.test(str);\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "820915219",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8459,
        "pr_file": "packages/common/pipes/parse-uuid.pipe.ts",
        "discussion_id": "820150298",
        "commented_code": "@@ -45,4 +52,12 @@ export class ParseUUIDPipe implements PipeTransform<string> {\n     }\n     return value;\n   }\n+\n+  protected isUUID(str: unknown, version = 'all') {\n+    if (!isString(str)) {\n+      throw this.exceptionFactory('The value passed as UUID is not a string');\n+    }\n+    const pattern = ParseUUIDPipe.uuidRegExps[version];\n+    return pattern && pattern.test(str);",
        "comment_created_at": "2022-03-07T17:06:36+00:00",
        "comment_author": "titivuk",
        "comment_body": "Nice catch",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "786395151",
    "pr_number": 8948,
    "pr_file": "packages/common/pipes/parse-float.pipe.ts",
    "created_at": "2022-01-18T03:41:40+00:00",
    "commented_code": "'Validation failed (numeric string is expected)',\n       );\n     }\n-    return parseFloat(value);\n+\n+    const float = parseFloat(value);\n+\n+    if (this.min != null && float < this.min) {",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "786395151",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8948,
        "pr_file": "packages/common/pipes/parse-float.pipe.ts",
        "discussion_id": "786395151",
        "commented_code": "@@ -48,6 +65,21 @@ export class ParseFloatPipe implements PipeTransform<string> {\n         'Validation failed (numeric string is expected)',\n       );\n     }\n-    return parseFloat(value);\n+\n+    const float = parseFloat(value);\n+\n+    if (this.min != null && float < this.min) {",
        "comment_created_at": "2022-01-18T03:41:40+00:00",
        "comment_author": "micalevisk",
        "comment_body": "I guess this would be better for readability:\r\n\r\n```suggestion\r\n    if (!isNil(this.min) && float < this.min) {\r\n```\r\n\r\n`import { isNil } from '../utils/shared.utils';`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "592135729",
    "pr_number": 6626,
    "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
    "created_at": "2021-03-11T07:55:30+00:00",
    "commented_code": "next: CallHandler,\n   ): Promise<Observable<any>> {\n     const key = this.trackBy(context);\n-    const ttlValueOrFactory =\n-      this.reflector.get(CACHE_TTL_METADATA, context.getHandler()) || null;\n+    const ttlMetadata = this.reflector.get(\n+      CACHE_TTL_METADATA,\n+      context.getHandler(),\n+    );\n+    const ttlValueOrFactory = ttlMetadata === 0 ? 0 : ttlMetadata || null;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "592135729",
        "repo_full_name": "nestjs/nest",
        "pr_number": 6626,
        "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
        "discussion_id": "592135729",
        "commented_code": "@@ -37,8 +37,11 @@ export class CacheInterceptor implements NestInterceptor {\n     next: CallHandler,\n   ): Promise<Observable<any>> {\n     const key = this.trackBy(context);\n-    const ttlValueOrFactory =\n-      this.reflector.get(CACHE_TTL_METADATA, context.getHandler()) || null;\n+    const ttlMetadata = this.reflector.get(\n+      CACHE_TTL_METADATA,\n+      context.getHandler(),\n+    );\n+    const ttlValueOrFactory = ttlMetadata === 0 ? 0 : ttlMetadata || null;",
        "comment_created_at": "2021-03-11T07:55:30+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Instead of adding a new condition here, we may just swap `||` expression with `??`.",
        "pr_file_module": null
      },
      {
        "comment_id": "592174659",
        "repo_full_name": "nestjs/nest",
        "pr_number": 6626,
        "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
        "discussion_id": "592135729",
        "commented_code": "@@ -37,8 +37,11 @@ export class CacheInterceptor implements NestInterceptor {\n     next: CallHandler,\n   ): Promise<Observable<any>> {\n     const key = this.trackBy(context);\n-    const ttlValueOrFactory =\n-      this.reflector.get(CACHE_TTL_METADATA, context.getHandler()) || null;\n+    const ttlMetadata = this.reflector.get(\n+      CACHE_TTL_METADATA,\n+      context.getHandler(),\n+    );\n+    const ttlValueOrFactory = ttlMetadata === 0 ? 0 : ttlMetadata || null;",
        "comment_created_at": "2021-03-11T08:57:05+00:00",
        "comment_author": "verycosy",
        "comment_body": "Oh, I see :)\r\nI fixed as you said. Is it correct?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "403444982",
    "pr_number": 4506,
    "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
    "created_at": "2020-04-04T08:52:21+00:00",
    "commented_code": "return next.handle().pipe(\n         tap(response => {\n-          const args = ttl ? [key, response, { ttl }] : [key, response];\n+          const args =\n+            ttl || ttl === 0 ? [key, response, { ttl }] : [key, response];",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "403444982",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4506,
        "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
        "discussion_id": "403444982",
        "commented_code": "@@ -50,7 +50,8 @@ export class CacheInterceptor implements NestInterceptor {\n \n       return next.handle().pipe(\n         tap(response => {\n-          const args = ttl ? [key, response, { ttl }] : [key, response];\n+          const args =\n+            ttl || ttl === 0 ? [key, response, { ttl }] : [key, response];",
        "comment_created_at": "2020-04-04T08:52:21+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "What do you think about using `isNil()` util function here instead? (to exclude `null` and `undefined` values)",
        "pr_file_module": null
      },
      {
        "comment_id": "403487970",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4506,
        "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
        "discussion_id": "403444982",
        "commented_code": "@@ -50,7 +50,8 @@ export class CacheInterceptor implements NestInterceptor {\n \n       return next.handle().pipe(\n         tap(response => {\n-          const args = ttl ? [key, response, { ttl }] : [key, response];\n+          const args =\n+            ttl || ttl === 0 ? [key, response, { ttl }] : [key, response];",
        "comment_created_at": "2020-04-04T16:23:06+00:00",
        "comment_author": "Emily-RoseSteyn",
        "comment_body": "Happy to do that! Should I add a check so that negative values are also ignored?",
        "pr_file_module": null
      },
      {
        "comment_id": "403686656",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4506,
        "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
        "discussion_id": "403444982",
        "commented_code": "@@ -50,7 +50,8 @@ export class CacheInterceptor implements NestInterceptor {\n \n       return next.handle().pipe(\n         tap(response => {\n-          const args = ttl ? [key, response, { ttl }] : [key, response];\n+          const args =\n+            ttl || ttl === 0 ? [key, response, { ttl }] : [key, response];",
        "comment_created_at": "2020-04-05T11:14:57+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "I think `isNil()` will be sufficient here :)",
        "pr_file_module": null
      }
    ]
  }
]