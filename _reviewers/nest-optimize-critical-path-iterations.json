[
  {
    "discussion_id": "1095894797",
    "pr_number": 11022,
    "pr_file": "packages/core/router/paths-explorer.ts",
    "created_at": "2023-02-03T14:57:43+00:00",
    "commented_code": "? Object.getPrototypeOf(instance)\n       : prototype;\n \n-    return this.metadataScanner.scanFromPrototype<Controller, RouteDefinition>(\n-      instance,\n-      instancePrototype,\n-      method => this.exploreMethodMetadata(instance, instancePrototype, method),\n-    );\n+    const methods = this.metadataScanner.getAllMethodNames(instancePrototype);\n+\n+    const routes: RouteDefinition[] = [];\n+\n+    for (const methodKey of methods) {\n+      const route = this.exploreMethodMetadata(\n+        instance,\n+        instancePrototype,\n+        methodKey,\n+      );\n+\n+      if (!route) continue;\n+\n+      routes.push(route);\n+    }\n+\n+    return routes;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1095894797",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11022,
        "pr_file": "packages/core/router/paths-explorer.ts",
        "discussion_id": "1095894797",
        "commented_code": "@@ -33,18 +33,30 @@ export class PathsExplorer {\n       ? Object.getPrototypeOf(instance)\n       : prototype;\n \n-    return this.metadataScanner.scanFromPrototype<Controller, RouteDefinition>(\n-      instance,\n-      instancePrototype,\n-      method => this.exploreMethodMetadata(instance, instancePrototype, method),\n-    );\n+    const methods = this.metadataScanner.getAllMethodNames(instancePrototype);\n+\n+    const routes: RouteDefinition[] = [];\n+\n+    for (const methodKey of methods) {\n+      const route = this.exploreMethodMetadata(\n+        instance,\n+        instancePrototype,\n+        methodKey,\n+      );\n+\n+      if (!route) continue;\n+\n+      routes.push(route);\n+    }\n+\n+    return routes;",
        "comment_created_at": "2023-02-03T14:57:43+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Why not filter + map? Performance should be marginal in this case (I'd think)",
        "pr_file_module": null
      },
      {
        "comment_id": "1095898021",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11022,
        "pr_file": "packages/core/router/paths-explorer.ts",
        "discussion_id": "1095894797",
        "commented_code": "@@ -33,18 +33,30 @@ export class PathsExplorer {\n       ? Object.getPrototypeOf(instance)\n       : prototype;\n \n-    return this.metadataScanner.scanFromPrototype<Controller, RouteDefinition>(\n-      instance,\n-      instancePrototype,\n-      method => this.exploreMethodMetadata(instance, instancePrototype, method),\n-    );\n+    const methods = this.metadataScanner.getAllMethodNames(instancePrototype);\n+\n+    const routes: RouteDefinition[] = [];\n+\n+    for (const methodKey of methods) {\n+      const route = this.exploreMethodMetadata(\n+        instance,\n+        instancePrototype,\n+        methodKey,\n+      );\n+\n+      if (!route) continue;\n+\n+      routes.push(route);\n+    }\n+\n+    return routes;",
        "comment_created_at": "2023-02-03T15:00:04+00:00",
        "comment_author": "H4ad",
        "comment_body": "To use `.map`, I will also need to use `.filter`.  So I didn't want to introduce two loops, that's why I use `for`.\r\n\r\nAbout the performance, if this method is called often, someone will eventually create a pull request to change `filter` and `map` to a for loop, so I prefer to not introduce a point of optimization in the future if we can do it now.",
        "pr_file_module": null
      },
      {
        "comment_id": "1096062022",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11022,
        "pr_file": "packages/core/router/paths-explorer.ts",
        "discussion_id": "1095894797",
        "commented_code": "@@ -33,18 +33,30 @@ export class PathsExplorer {\n       ? Object.getPrototypeOf(instance)\n       : prototype;\n \n-    return this.metadataScanner.scanFromPrototype<Controller, RouteDefinition>(\n-      instance,\n-      instancePrototype,\n-      method => this.exploreMethodMetadata(instance, instancePrototype, method),\n-    );\n+    const methods = this.metadataScanner.getAllMethodNames(instancePrototype);\n+\n+    const routes: RouteDefinition[] = [];\n+\n+    for (const methodKey of methods) {\n+      const route = this.exploreMethodMetadata(\n+        instance,\n+        instancePrototype,\n+        methodKey,\n+      );\n+\n+      if (!route) continue;\n+\n+      routes.push(route);\n+    }\n+\n+    return routes;",
        "comment_created_at": "2023-02-03T17:26:42+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Still, the performance impact should be negligible. filter & map is just cleaner & easier to read, not worth the optimization in this particular case ",
        "pr_file_module": null
      },
      {
        "comment_id": "1096534671",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11022,
        "pr_file": "packages/core/router/paths-explorer.ts",
        "discussion_id": "1095894797",
        "commented_code": "@@ -33,18 +33,30 @@ export class PathsExplorer {\n       ? Object.getPrototypeOf(instance)\n       : prototype;\n \n-    return this.metadataScanner.scanFromPrototype<Controller, RouteDefinition>(\n-      instance,\n-      instancePrototype,\n-      method => this.exploreMethodMetadata(instance, instancePrototype, method),\n-    );\n+    const methods = this.metadataScanner.getAllMethodNames(instancePrototype);\n+\n+    const routes: RouteDefinition[] = [];\n+\n+    for (const methodKey of methods) {\n+      const route = this.exploreMethodMetadata(\n+        instance,\n+        instancePrototype,\n+        methodKey,\n+      );\n+\n+      if (!route) continue;\n+\n+      routes.push(route);\n+    }\n+\n+    return routes;",
        "comment_created_at": "2023-02-04T13:07:26+00:00",
        "comment_author": "H4ad",
        "comment_body": "Instead I change `map + filter` to `reduce` which I think is a middle ground between readability and performance.\r\n\r\nAbout the performance:\r\n\r\n```\r\nMetadataScanner#scanFromPrototype x 109,945 ops/sec Â±1.63% (88 runs sampled)\r\nBetterMetadataScanner#scanFromPrototype map and filter x 232,174 ops/sec Â±2.00% (86 runs sampled)\r\nBetterMetadataScanner#scanFromPrototype reduce x 244,521 ops/sec Â±1.50% (89 runs sampled)\r\nBetterMetadataScanner#scanFromPrototype for loop x 246,414 ops/sec Â±1.39% (88 runs sampled)\r\nFastest is BetterMetadataScanner#scanFromPrototype for loop,BetterMetadataScanner#scanFromPrototype reduce\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1063371240",
    "pr_number": 10809,
    "pr_file": "packages/core/middleware/middleware-module.ts",
    "created_at": "2023-01-06T11:39:47+00:00",
    "commented_code": "writable: false,\n               configurable: false,\n             });\n+\n+            const isTreeDurable = wrapper.isDependencyTreeDurable();",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1063371240",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10809,
        "pr_file": "packages/core/middleware/middleware-module.ts",
        "discussion_id": "1063371240",
        "commented_code": "@@ -217,8 +217,13 @@ export class MiddlewareModule {\n               writable: false,\n               configurable: false,\n             });\n+\n+            const isTreeDurable = wrapper.isDependencyTreeDurable();",
        "comment_created_at": "2023-01-06T11:39:47+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Let's move this line (check) outside the callback function as otherwise it would be executed per each invocation of the route. This comment applies to other changes too ðŸ™Œ ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "945332457",
    "pr_number": 10112,
    "pr_file": "packages/core/services/reflector.service.ts",
    "created_at": "2022-08-14T19:24:18+00:00",
    "commented_code": "metadataKey: TKey,\n     targets: (Type<any> | Function)[],\n   ): TResult {\n-    return this.getAll(metadataKey, targets).find(item => item !== undefined);\n+    for (const target of targets) {\n+      const result = this.get(metadataKey, target);\n+      if (result !== undefined) {\n+        return result;\n+      }\n+    }\n+    return undefined;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "945332457",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10112,
        "pr_file": "packages/core/services/reflector.service.ts",
        "discussion_id": "945332457",
        "commented_code": "@@ -86,6 +86,12 @@ export class Reflector {\n     metadataKey: TKey,\n     targets: (Type<any> | Function)[],\n   ): TResult {\n-    return this.getAll(metadataKey, targets).find(item => item !== undefined);\n+    for (const target of targets) {\n+      const result = this.get(metadataKey, target);\n+      if (result !== undefined) {\n+        return result;\n+      }\n+    }\n+    return undefined;",
        "comment_created_at": "2022-08-14T19:24:18+00:00",
        "comment_author": "jmcdo29",
        "comment_body": "If you're going to refactor this to a raw for loop, we should do the same to the `getAll` for squeezing as much performance out as we can. \r\n\r\nSide note: do you have any benchmarks for how much of an improvement this is? Just curious if the improvement is going to be worth the readability ",
        "pr_file_module": null
      },
      {
        "comment_id": "945334497",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10112,
        "pr_file": "packages/core/services/reflector.service.ts",
        "discussion_id": "945332457",
        "commented_code": "@@ -86,6 +86,12 @@ export class Reflector {\n     metadataKey: TKey,\n     targets: (Type<any> | Function)[],\n   ): TResult {\n-    return this.getAll(metadataKey, targets).find(item => item !== undefined);\n+    for (const target of targets) {\n+      const result = this.get(metadataKey, target);\n+      if (result !== undefined) {\n+        return result;\n+      }\n+    }\n+    return undefined;",
        "comment_created_at": "2022-08-14T19:46:17+00:00",
        "comment_author": "zanminkian",
        "comment_body": "I think raw for loop is not the mainly reason. Just break the loop earlier to increase the performance.",
        "pr_file_module": null
      },
      {
        "comment_id": "945335695",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10112,
        "pr_file": "packages/core/services/reflector.service.ts",
        "discussion_id": "945332457",
        "commented_code": "@@ -86,6 +86,12 @@ export class Reflector {\n     metadataKey: TKey,\n     targets: (Type<any> | Function)[],\n   ): TResult {\n-    return this.getAll(metadataKey, targets).find(item => item !== undefined);\n+    for (const target of targets) {\n+      const result = this.get(metadataKey, target);\n+      if (result !== undefined) {\n+        return result;\n+      }\n+    }\n+    return undefined;",
        "comment_created_at": "2022-08-14T19:57:54+00:00",
        "comment_author": "zanminkian",
        "comment_body": "Seems not increase too much. This is a choice between a little performance and readability. :P\r\n```ts\r\nfunction get(num) {\r\n    for(let i = 0; i < 100; i++) {\r\n        num++\r\n    }\r\n    return num\r\n}\r\n\r\nfunction test1() {\r\n    const start = process.hrtime.bigint();\r\n    for(let i = 0; i< 10000; i++) {\r\n        const targets = [100, 1000, 10000]\r\n        targets.map(target=>get(target)).find(item => item !== undefined)\r\n    }\r\n    console.log(process.hrtime.bigint()-start);\r\n}\r\n\r\nfunction test2() {\r\n    const start = process.hrtime.bigint();\r\n    for(let i = 0; i< 10000; i++) {\r\n        const targets = [100, 1000, 10000]\r\n        for(const target of targets) {\r\n            const res = get(target)\r\n            if(res !== undefined) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    console.log(process.hrtime.bigint()-start);\r\n}\r\n\r\nfunction test3() {\r\n    const start = process.hrtime.bigint();\r\n    for(let i = 0; i< 10000; i++) {\r\n        const targets = [100, 1000, 10000]\r\n        for(const target of targets) {\r\n            const res = get(target)\r\n            if(res !== undefined) {\r\n                // break;\r\n            }\r\n        }\r\n    }\r\n    console.log(process.hrtime.bigint()-start);\r\n}\r\n\r\ntest1() // 119022900n\r\ntest2() // 4902500n\r\ntest3() // 7564600n\r\n```",
        "pr_file_module": null
      }
    ]
  }
]