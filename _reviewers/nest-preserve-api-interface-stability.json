[
  {
    "discussion_id": "1480210082",
    "pr_number": 13164,
    "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
    "created_at": "2024-02-06T16:41:57+00:00",
    "commented_code": "put(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n   patch(handler: RequestHandler<TRequest, TResponse>): any;\n   patch(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  propfind(handler: RequestHandler<TRequest, TResponse>): any;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1480210082",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13164,
        "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
        "discussion_id": "1480210082",
        "commented_code": "@@ -47,6 +47,20 @@ export interface HttpServer<\n   put(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n   patch(handler: RequestHandler<TRequest, TResponse>): any;\n   patch(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  propfind(handler: RequestHandler<TRequest, TResponse>): any;",
        "comment_created_at": "2024-02-06T16:41:57+00:00",
        "comment_author": "dammy001",
        "comment_body": "This is a breaking change. We shouldn't add methods to an interface on a patch release.",
        "pr_file_module": null
      },
      {
        "comment_id": "1480227286",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13164,
        "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
        "discussion_id": "1480210082",
        "commented_code": "@@ -47,6 +47,20 @@ export interface HttpServer<\n   put(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n   patch(handler: RequestHandler<TRequest, TResponse>): any;\n   patch(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  propfind(handler: RequestHandler<TRequest, TResponse>): any;",
        "comment_created_at": "2024-02-06T16:48:07+00:00",
        "comment_author": "johaven",
        "comment_body": "I don't really see how this is a breaking change, adding decorators only allows access to methods already implemented in Express and Fastify. \r\nMany of us have been waiting for this feature for a very long time ...",
        "pr_file_module": null
      },
      {
        "comment_id": "1480268823",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13164,
        "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
        "discussion_id": "1480210082",
        "commented_code": "@@ -47,6 +47,20 @@ export interface HttpServer<\n   put(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n   patch(handler: RequestHandler<TRequest, TResponse>): any;\n   patch(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  propfind(handler: RequestHandler<TRequest, TResponse>): any;",
        "comment_created_at": "2024-02-06T17:07:55+00:00",
        "comment_author": "jmcdo29",
        "comment_body": "Adding non-optional methods to a public interface that should be implemented for adapters means that anyone who is maintaining their own adapter, say for Koa, or hyper-express, etc, now **must** make these changes or possibly have their packages broken by a transient upgrade.\r\n\r\nThis is a braking change, and while you may have been waiting for it for a while, that doesn't mean it's any more urgent to get out, as we want to avoid making several small breaking changes and would rather lump them together over a major upgrade.",
        "pr_file_module": null
      },
      {
        "comment_id": "1480270869",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13164,
        "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
        "discussion_id": "1480210082",
        "commented_code": "@@ -47,6 +47,20 @@ export interface HttpServer<\n   put(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n   patch(handler: RequestHandler<TRequest, TResponse>): any;\n   patch(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  propfind(handler: RequestHandler<TRequest, TResponse>): any;",
        "comment_created_at": "2024-02-06T17:08:40+00:00",
        "comment_author": "dammy001",
        "comment_body": "It is. Updating a public interface results in breaking changes in another library implementing this interface. We can alternatively update this method to be optional; in this case, we won't have to wait for a major release.\r\n\r\nsee #13000",
        "pr_file_module": null
      },
      {
        "comment_id": "1480276778",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13164,
        "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
        "discussion_id": "1480210082",
        "commented_code": "@@ -47,6 +47,20 @@ export interface HttpServer<\n   put(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n   patch(handler: RequestHandler<TRequest, TResponse>): any;\n   patch(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  propfind(handler: RequestHandler<TRequest, TResponse>): any;",
        "comment_created_at": "2024-02-06T17:11:55+00:00",
        "comment_author": "johaven",
        "comment_body": "@jmcdo29 I agree, I prefer this explanation guys :)",
        "pr_file_module": null
      },
      {
        "comment_id": "1480296999",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13164,
        "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
        "discussion_id": "1480210082",
        "commented_code": "@@ -47,6 +47,20 @@ export interface HttpServer<\n   put(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n   patch(handler: RequestHandler<TRequest, TResponse>): any;\n   patch(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  propfind(handler: RequestHandler<TRequest, TResponse>): any;",
        "comment_created_at": "2024-02-06T17:22:22+00:00",
        "comment_author": "johaven",
        "comment_body": "@dammy001 I can try to adapt starting from what was done by @doronguttman here: https://github.com/nestjs/nest/pull/13000/commits/385d21b938a94ce3ad0531484f7ca948cd4173b0 but I don't know if that will be enough.",
        "pr_file_module": null
      },
      {
        "comment_id": "1481889813",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13164,
        "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
        "discussion_id": "1480210082",
        "commented_code": "@@ -47,6 +47,20 @@ export interface HttpServer<\n   put(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n   patch(handler: RequestHandler<TRequest, TResponse>): any;\n   patch(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  propfind(handler: RequestHandler<TRequest, TResponse>): any;",
        "comment_created_at": "2024-02-07T18:05:41+00:00",
        "comment_author": "dammy001",
        "comment_body": "@johaven i think that should be enough",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1463189456",
    "pr_number": 13000,
    "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
    "created_at": "2024-01-23T12:16:45+00:00",
    "commented_code": "all(handler: RequestHandler<TRequest, TResponse>): any;\n   options(handler: RequestHandler<TRequest, TResponse>): any;\n   options(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  search(handler: RequestHandler<TRequest, TResponse>): any;\n+  search(path: string, handler: RequestHandler<TRequest, TResponse>): any;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1463189456",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13000,
        "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
        "discussion_id": "1463189456",
        "commented_code": "@@ -51,6 +51,8 @@ export interface HttpServer<\n   all(handler: RequestHandler<TRequest, TResponse>): any;\n   options(handler: RequestHandler<TRequest, TResponse>): any;\n   options(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  search(handler: RequestHandler<TRequest, TResponse>): any;\n+  search(path: string, handler: RequestHandler<TRequest, TResponse>): any;",
        "comment_created_at": "2024-01-23T12:16:45+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "This introduces a breaking change",
        "pr_file_module": null
      },
      {
        "comment_id": "1463411409",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13000,
        "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
        "discussion_id": "1463189456",
        "commented_code": "@@ -51,6 +51,8 @@ export interface HttpServer<\n   all(handler: RequestHandler<TRequest, TResponse>): any;\n   options(handler: RequestHandler<TRequest, TResponse>): any;\n   options(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  search(handler: RequestHandler<TRequest, TResponse>): any;\n+  search(path: string, handler: RequestHandler<TRequest, TResponse>): any;",
        "comment_created_at": "2024-01-23T14:59:28+00:00",
        "comment_author": "doronguttman",
        "comment_body": "Thank you for your comment!\nCan you please share what is breaking?\nI.e. where should I look for fixing it?",
        "pr_file_module": null
      },
      {
        "comment_id": "1464441284",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13000,
        "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
        "discussion_id": "1463189456",
        "commented_code": "@@ -51,6 +51,8 @@ export interface HttpServer<\n   all(handler: RequestHandler<TRequest, TResponse>): any;\n   options(handler: RequestHandler<TRequest, TResponse>): any;\n   options(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  search(handler: RequestHandler<TRequest, TResponse>): any;\n+  search(path: string, handler: RequestHandler<TRequest, TResponse>): any;",
        "comment_created_at": "2024-01-24T07:30:54+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Updating a public interface with 2 additional methods that weren't there before introduces a breaking change as now every library (platform adapter) will have to update their `HttpServer` implementation as well (including these adapters that we don't control ourselves within the NestJS organization).\r\n\r\n\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1464479033",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13000,
        "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
        "discussion_id": "1463189456",
        "commented_code": "@@ -51,6 +51,8 @@ export interface HttpServer<\n   all(handler: RequestHandler<TRequest, TResponse>): any;\n   options(handler: RequestHandler<TRequest, TResponse>): any;\n   options(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  search(handler: RequestHandler<TRequest, TResponse>): any;\n+  search(path: string, handler: RequestHandler<TRequest, TResponse>): any;",
        "comment_created_at": "2024-01-24T08:02:53+00:00",
        "comment_author": "dammy001",
        "comment_body": "Yeah exactly, @kamilmysliwiec. @doronguttman Updating interfaces on a patch release will introduce a breaking change. It will break any package or project that implements this interface. This change will have to wait for a major release.",
        "pr_file_module": null
      },
      {
        "comment_id": "1467398223",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13000,
        "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
        "discussion_id": "1463189456",
        "commented_code": "@@ -51,6 +51,8 @@ export interface HttpServer<\n   all(handler: RequestHandler<TRequest, TResponse>): any;\n   options(handler: RequestHandler<TRequest, TResponse>): any;\n   options(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  search(handler: RequestHandler<TRequest, TResponse>): any;\n+  search(path: string, handler: RequestHandler<TRequest, TResponse>): any;",
        "comment_created_at": "2024-01-26T09:17:56+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "We can alternatively update this method to be optional; in this case we won't have to wait ",
        "pr_file_module": null
      },
      {
        "comment_id": "1468144280",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13000,
        "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
        "discussion_id": "1463189456",
        "commented_code": "@@ -51,6 +51,8 @@ export interface HttpServer<\n   all(handler: RequestHandler<TRequest, TResponse>): any;\n   options(handler: RequestHandler<TRequest, TResponse>): any;\n   options(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  search(handler: RequestHandler<TRequest, TResponse>): any;\n+  search(path: string, handler: RequestHandler<TRequest, TResponse>): any;",
        "comment_created_at": "2024-01-26T21:03:44+00:00",
        "comment_author": "doronguttman",
        "comment_body": "ok, I can do that.",
        "pr_file_module": null
      },
      {
        "comment_id": "1473332544",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13000,
        "pr_file": "packages/common/interfaces/http/http-server.interface.ts",
        "discussion_id": "1463189456",
        "commented_code": "@@ -51,6 +51,8 @@ export interface HttpServer<\n   all(handler: RequestHandler<TRequest, TResponse>): any;\n   options(handler: RequestHandler<TRequest, TResponse>): any;\n   options(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n+  search(handler: RequestHandler<TRequest, TResponse>): any;\n+  search(path: string, handler: RequestHandler<TRequest, TResponse>): any;",
        "comment_created_at": "2024-01-31T19:06:21+00:00",
        "comment_author": "doronguttman",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "749861350",
    "pr_number": 8603,
    "pr_file": "packages/common/interfaces/version-options.interface.ts",
    "created_at": "2021-11-16T02:54:29+00:00",
    "commented_code": "key: string;\n }\n \n+export interface CustomVersioningOptions {\n+  type: VersioningType.CUSTOM;\n+\n+  /**\n+   * A function that accepts a request object (specific to the underlying platform, ie Express or Fastify)\n+   * and returns a single version value or an ordered array of versions, in order from HIGHEST to LOWEST.\n+   *\n+   * Ex. Returned version array = ['3.1', '3.0', '2.5', '2', '1.9']",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "749861350",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8603,
        "pr_file": "packages/common/interfaces/version-options.interface.ts",
        "discussion_id": "749861350",
        "commented_code": "@@ -55,6 +55,20 @@ export interface MediaTypeVersioningOptions {\n   key: string;\n }\n \n+export interface CustomVersioningOptions {\n+  type: VersioningType.CUSTOM;\n+\n+  /**\n+   * A function that accepts a request object (specific to the underlying platform, ie Express or Fastify)\n+   * and returns a single version value or an ordered array of versions, in order from HIGHEST to LOWEST.\n+   *\n+   * Ex. Returned version array = ['3.1', '3.0', '2.5', '2', '1.9']",
        "comment_created_at": "2021-11-16T02:54:29+00:00",
        "comment_author": "adworacz",
        "comment_body": "Open for discussion here - the way I wrote the code actually removes the need for any specific ordering of the version array. But if we required users to return the ordered array, then it could remove a `.sort()` call in the Fastify adapter.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "768278195",
    "pr_number": 8603,
    "pr_file": "packages/platform-express/adapters/express-adapter.ts",
    "created_at": "2021-12-14T02:54:10+00:00",
    "commented_code": "if (versioningOptions.type === VersioningType.URI) {\n         return handler(req, res, next);\n       }\n+\n+      // Custom Extractor Versioning Handler\n+      if (versioningOptions.type === VersioningType.CUSTOM) {\n+        const extractedVersion = versioningOptions.extractor(req);\n+\n+        if (Array.isArray(version)) {\n+          if (\n+            Array.isArray(extractedVersion) &&\n+            version.filter(v => extractedVersion.includes(v)).length\n+          ) {\n+            return handler(req, res, next);\n+          } else if (\n+            isString(extractedVersion) &&\n+            version.includes(extractedVersion)\n+          ) {\n+            return handler(req, res, next);\n+          }\n+        } else if (isString(version)) {\n+          //Known bug here - if there are multiple versions supported across separate\n+          //handlers/controllers, we can't select the highest matching handler.\n+          //Since this code is evaluated per-handler, then we can't see if the highest\n+          //specified version exists in a different handler.",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "768278195",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8603,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "768278195",
        "commented_code": "@@ -196,6 +196,42 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n       if (versioningOptions.type === VersioningType.URI) {\n         return handler(req, res, next);\n       }\n+\n+      // Custom Extractor Versioning Handler\n+      if (versioningOptions.type === VersioningType.CUSTOM) {\n+        const extractedVersion = versioningOptions.extractor(req);\n+\n+        if (Array.isArray(version)) {\n+          if (\n+            Array.isArray(extractedVersion) &&\n+            version.filter(v => extractedVersion.includes(v)).length\n+          ) {\n+            return handler(req, res, next);\n+          } else if (\n+            isString(extractedVersion) &&\n+            version.includes(extractedVersion)\n+          ) {\n+            return handler(req, res, next);\n+          }\n+        } else if (isString(version)) {\n+          //Known bug here - if there are multiple versions supported across separate\n+          //handlers/controllers, we can't select the highest matching handler.\n+          //Since this code is evaluated per-handler, then we can't see if the highest\n+          //specified version exists in a different handler.",
        "comment_created_at": "2021-12-14T02:54:10+00:00",
        "comment_author": "adworacz",
        "comment_body": "Calling this out as a feature gap between the Express and Fastify adapters.\r\n\r\nIn short, if a caller specified several different versions that it accepts, then the Express adapter cannot reliably select the highest matching version because it's not properly aware all the supported versions at this point in the code.\r\n\r\nOne possible solution would be the ability to pass in all supported versions to the extractor function, or to pass them to this part of the `express-adapter` and filter accordingly. For now, it's a known feature gap without any extra work.\r\n\r\nFastify works just fine here, as it maintains a map of all versions, so it's easy to see what versions exist.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "721075106",
    "pr_number": 8203,
    "pr_file": "packages/websockets/interfaces/nest-gateway.interface.ts",
    "created_at": "2021-10-04T06:32:28+00:00",
    "commented_code": "afterInit?: (server: any) => void;\n   handleConnection?: (...args: any[]) => void;\n   handleDisconnect?: (client: any) => void;\n+  constructor: any;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "721075106",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8203,
        "pr_file": "packages/websockets/interfaces/nest-gateway.interface.ts",
        "discussion_id": "721075106",
        "commented_code": "@@ -2,4 +2,5 @@ export interface NestGateway {\n   afterInit?: (server: any) => void;\n   handleConnection?: (...args: any[]) => void;\n   handleDisconnect?: (client: any) => void;\n+  constructor: any;",
        "comment_created_at": "2021-10-04T06:32:28+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "This interface shouldn't be modified with unessential props (it's a public API).",
        "pr_file_module": null
      },
      {
        "comment_id": "721644367",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8203,
        "pr_file": "packages/websockets/interfaces/nest-gateway.interface.ts",
        "discussion_id": "721075106",
        "commented_code": "@@ -2,4 +2,5 @@ export interface NestGateway {\n   afterInit?: (server: any) => void;\n   handleConnection?: (...args: any[]) => void;\n   handleDisconnect?: (client: any) => void;\n+  constructor: any;",
        "comment_created_at": "2021-10-04T19:11:36+00:00",
        "comment_author": "Ayzrian",
        "comment_body": "Gotcha, refactored in \r\nf2dd063 ",
        "pr_file_module": null
      }
    ]
  }
]