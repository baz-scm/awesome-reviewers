[
  {
    "discussion_id": "1092938872",
    "pr_number": 10982,
    "pr_file": "packages/microservices/server/server-kafka.ts",
    "created_at": "2023-02-01T09:05:55+00:00",
    "commented_code": "reject(err);",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1092938872",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10982,
        "pr_file": "packages/microservices/server/server-kafka.ts",
        "discussion_id": "1092938872",
        "commented_code": "@@ -220,6 +220,7 @@ export class ServerKafka extends Server implements CustomTransportStrategy {\n             reject(err);",
        "comment_created_at": "2023-02-01T09:05:55+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "If this condition `err instanceof KafkaRetriableException && !isPromiseResolved` is true then Promise will both reject and resolve (which technically doesn't make much sense)",
        "pr_file_module": null
      },
      {
        "comment_id": "1093218471",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10982,
        "pr_file": "packages/microservices/server/server-kafka.ts",
        "discussion_id": "1092938872",
        "commented_code": "@@ -220,6 +220,7 @@ export class ServerKafka extends Server implements CustomTransportStrategy {\n             reject(err);",
        "comment_created_at": "2023-02-01T13:25:27+00:00",
        "comment_author": "Inoir",
        "comment_body": "put it in else block",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "963356849",
    "pr_number": 10243,
    "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
    "created_at": "2022-09-06T07:35:05+00:00",
    "commented_code": ": ttlValueOrFactory;\n       return next.handle().pipe(\n         tap(response => {\n-          const args = isNil(ttl) ? [key, response] : [key, response, { ttl }];\n-          this.cacheManager.set(...args);\n+          const args: [string, typeof response, CachingConfig?] = isNil(ttl)\n+            ? [key, response]\n+            : [key, response, { ttl }];\n+          this.setCache(...args);",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "963356849",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10243,
        "pr_file": "packages/common/cache/interceptors/cache.interceptor.ts",
        "discussion_id": "963356849",
        "commented_code": "@@ -54,15 +55,21 @@ export class CacheInterceptor implements NestInterceptor {\n         : ttlValueOrFactory;\n       return next.handle().pipe(\n         tap(response => {\n-          const args = isNil(ttl) ? [key, response] : [key, response, { ttl }];\n-          this.cacheManager.set(...args);\n+          const args: [string, typeof response, CachingConfig?] = isNil(ttl)\n+            ? [key, response]\n+            : [key, response, { ttl }];\n+          this.setCache(...args);",
        "comment_created_at": "2022-09-06T07:35:05+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Although I like the idea of introducing a new method that can be overridden, it's a breaking change, so we'd have to wait to merge this PR until the next major release. Hence, for the time being, I'd instead suggest just wrapping this logic in try..catch blocks.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "922898778",
    "pr_number": 9819,
    "pr_file": "packages/platform-express/adapters/express-adapter.ts",
    "created_at": "2022-07-17T21:38:41+00:00",
    "commented_code": ") {\n         response.setHeader('Content-Length', streamHeaders.length);\n       }\n-      return body.getStream().pipe(response);\n+      return pipeline(\n+        body.getStream().on('error', (err: Error) => {",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "922898778",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9819,
        "pr_file": "packages/platform-express/adapters/express-adapter.ts",
        "discussion_id": "922898778",
        "commented_code": "@@ -78,7 +80,17 @@ export class ExpressAdapter extends AbstractHttpAdapter {\n       ) {\n         response.setHeader('Content-Length', streamHeaders.length);\n       }\n-      return body.getStream().pipe(response);\n+      return pipeline(\n+        body.getStream().on('error', (err: Error) => {",
        "comment_created_at": "2022-07-17T21:38:41+00:00",
        "comment_author": "micalevisk",
        "comment_body": "```suggestion\r\n        body.getStream().once('error', (err: Error) => {\r\n```\r\n\r\nto prevent the error 'Cannot set headers after they are sent to the client' if for whatever reason the _error_ event is emitted multiple times (not sure if this is possible tho)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "767421567",
    "pr_number": 8740,
    "pr_file": "packages/core/router/router-response-controller.ts",
    "created_at": "2021-12-13T05:29:16+00:00",
    "commented_code": "const subscription = result\n       .pipe(\n+        map((message): MessageEvent => {\n+          if (isObject(message)) {\n+            return message as MessageEvent;\n+          }\n+\n+          return { data: message as object | string };\n+        }),\n         debounce(\n-          (message: any) =>\n-            new Promise(resolve => {\n-              if (!isObject(message)) {\n-                message = { data: message };\n-              }\n-              stream.writeMessage(message, resolve);\n-            }),\n+          message =>\n+            new Promise<void>(resolve =>\n+              stream.writeMessage(message, () => resolve()),\n+            ),\n         ),\n+        catchError(err => {\n+          const data = err instanceof Error ? err.message : err;\n+          stream.writeMessage({ type: 'error', data }, writeError => {",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "767421567",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8740,
        "pr_file": "packages/core/router/router-response-controller.ts",
        "discussion_id": "767421567",
        "commented_code": "@@ -109,15 +117,29 @@ export class RouterResponseController {\n \n     const subscription = result\n       .pipe(\n+        map((message): MessageEvent => {\n+          if (isObject(message)) {\n+            return message as MessageEvent;\n+          }\n+\n+          return { data: message as object | string };\n+        }),\n         debounce(\n-          (message: any) =>\n-            new Promise(resolve => {\n-              if (!isObject(message)) {\n-                message = { data: message };\n-              }\n-              stream.writeMessage(message, resolve);\n-            }),\n+          message =>\n+            new Promise<void>(resolve =>\n+              stream.writeMessage(message, () => resolve()),\n+            ),\n         ),\n+        catchError(err => {\n+          const data = err instanceof Error ? err.message : err;\n+          stream.writeMessage({ type: 'error', data }, writeError => {",
        "comment_created_at": "2021-12-13T05:29:16+00:00",
        "comment_author": "wSedlacek",
        "comment_body": "This was the simplest set of changes to resolve the issue.\r\nIt simply prints error messages directly to the stream.\r\n\r\nPerhaps a future iteration can apply exception filters here?",
        "pr_file_module": null
      },
      {
        "comment_id": "767499278",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8740,
        "pr_file": "packages/core/router/router-response-controller.ts",
        "discussion_id": "767421567",
        "commented_code": "@@ -109,15 +117,29 @@ export class RouterResponseController {\n \n     const subscription = result\n       .pipe(\n+        map((message): MessageEvent => {\n+          if (isObject(message)) {\n+            return message as MessageEvent;\n+          }\n+\n+          return { data: message as object | string };\n+        }),\n         debounce(\n-          (message: any) =>\n-            new Promise(resolve => {\n-              if (!isObject(message)) {\n-                message = { data: message };\n-              }\n-              stream.writeMessage(message, resolve);\n-            }),\n+          message =>\n+            new Promise<void>(resolve =>\n+              stream.writeMessage(message, () => resolve()),\n+            ),\n         ),\n+        catchError(err => {\n+          const data = err instanceof Error ? err.message : err;\n+          stream.writeMessage({ type: 'error', data }, writeError => {",
        "comment_created_at": "2021-12-13T08:26:17+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Sounds good to me @wSedlacek! Thanks for your work on this one \ud83d\ude4c ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "596969747",
    "pr_number": 6696,
    "pr_file": "packages/microservices/client/client-nats.ts",
    "created_at": "2021-03-18T15:18:01+00:00",
    "commented_code": "if (message.id && message.id !== packet.id) {\n         return undefined;\n       }\n-      const { err, response, isDisposed } = message;\n+      const { response, isDisposed } = message;\n+      const err = (response instanceof Error ? response : void 0) ?? message.err;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "596969747",
        "repo_full_name": "nestjs/nest",
        "pr_number": 6696,
        "pr_file": "packages/microservices/client/client-nats.ts",
        "discussion_id": "596969747",
        "commented_code": "@@ -68,7 +68,8 @@ export class ClientNats extends ClientProxy {\n       if (message.id && message.id !== packet.id) {\n         return undefined;\n       }\n-      const { err, response, isDisposed } = message;\n+      const { response, isDisposed } = message;\n+      const err = (response instanceof Error ? response : void 0) ?? message.err;",
        "comment_created_at": "2021-03-18T15:18:01+00:00",
        "comment_author": "ceoro9",
        "comment_body": "Here is, where nats error is passed to the provided callback (from the nats source code). Literally all the point of this PR is to propagate that error.\r\n\r\n```javascript\r\nClient.prototype.request = function (subject, data, options, callback) {\r\n\r\n  // ...\r\n\r\n  const conf = this.initMuxRequestDetails(callback, options.max)\r\n  this.publish(subject, data, conf.inbox)\r\n\r\n  if (options.timeout) {\r\n    conf.timeout = setTimeout(() => {\r\n      if (conf.callback) {\r\n        conf.callback(new NatsError(REQ_TIMEOUT_MSG_PREFIX + conf.id, REQ_TIMEOUT))\r\n      }\r\n      this.cancelMuxRequest(conf.token)\r\n    }, options.timeout)\r\n  }\r\n\r\n  return conf.id\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "605517805",
    "pr_number": 6696,
    "pr_file": "packages/microservices/client/client-nats.ts",
    "created_at": "2021-04-01T09:40:57+00:00",
    "commented_code": "if (message.id && message.id !== packet.id) {\n         return undefined;\n       }\n-      const { err, response, isDisposed } = message;\n+      const { response, isDisposed } = message;\n+      const err = (response instanceof Error ? response : void 0) ?? message.err;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "605517805",
        "repo_full_name": "nestjs/nest",
        "pr_number": 6696,
        "pr_file": "packages/microservices/client/client-nats.ts",
        "discussion_id": "605517805",
        "commented_code": "@@ -68,7 +68,8 @@ export class ClientNats extends ClientProxy {\n       if (message.id && message.id !== packet.id) {\n         return undefined;\n       }\n-      const { err, response, isDisposed } = message;\n+      const { response, isDisposed } = message;\n+      const err = (response instanceof Error ? response : void 0) ?? message.err;",
        "comment_created_at": "2021-04-01T09:40:57+00:00",
        "comment_author": "tonivj5",
        "comment_body": "Same code, simpler?\r\n\r\n```suggestion\r\n      const err = response instanceof Error ? response : message.err;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "606644730",
        "repo_full_name": "nestjs/nest",
        "pr_number": 6696,
        "pr_file": "packages/microservices/client/client-nats.ts",
        "discussion_id": "605517805",
        "commented_code": "@@ -68,7 +68,8 @@ export class ClientNats extends ClientProxy {\n       if (message.id && message.id !== packet.id) {\n         return undefined;\n       }\n-      const { err, response, isDisposed } = message;\n+      const { response, isDisposed } = message;\n+      const err = (response instanceof Error ? response : void 0) ?? message.err;",
        "comment_created_at": "2021-04-03T09:51:19+00:00",
        "comment_author": "ceoro9",
        "comment_body": "yeap, looks good",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "252715878",
    "pr_number": 1468,
    "pr_file": "packages/microservices/server/server-grpc.ts",
    "created_at": "2019-01-31T15:34:28+00:00",
    "commented_code": "const handler = methodHandler(call.request, call.metadata);\n       const result$ = this.transformToObservable(await handler);\n       await result$\n-        .pipe(takeUntil(fromEvent(call, CANCEL_EVENT)))\n+        .pipe(\n+          takeUntil(fromEvent(call, CANCEL_EVENT)),\n+          catchError((err) => {\n+            call.emit('error', err);\n+            return of(err);",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "252715878",
        "repo_full_name": "nestjs/nest",
        "pr_number": 1468,
        "pr_file": "packages/microservices/server/server-grpc.ts",
        "discussion_id": "252715878",
        "commented_code": "@@ -136,7 +136,13 @@ export class ServerGrpc extends Server implements CustomTransportStrategy {\n       const handler = methodHandler(call.request, call.metadata);\n       const result$ = this.transformToObservable(await handler);\n       await result$\n-        .pipe(takeUntil(fromEvent(call, CANCEL_EVENT)))\n+        .pipe(\n+          takeUntil(fromEvent(call, CANCEL_EVENT)),\n+          catchError((err) => {\n+            call.emit('error', err);\n+            return of(err);",
        "comment_created_at": "2019-01-31T15:34:28+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "I don't think that we should call both `.write()` and `.emit('error')` on each error.",
        "pr_file_module": null
      }
    ]
  }
]