[
  {
    "discussion_id": "1713358460",
    "pr_number": 13561,
    "pr_file": "packages/common/services/console-logger.service.ts",
    "created_at": "2024-08-12T08:32:26+00:00",
    "commented_code": "* If enabled, will print timestamp (time difference) between current and previous log message.\n    */\n   timestamp?: boolean;\n+\n+  /**\n+   * If enabled, logs will be in form of JSON strings.\n+   */\n+  asJSON?: boolean;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1713358460",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13561,
        "pr_file": "packages/common/services/console-logger.service.ts",
        "discussion_id": "1713358460",
        "commented_code": "@@ -18,6 +18,11 @@ export interface ConsoleLoggerOptions {\n    * If enabled, will print timestamp (time difference) between current and previous log message.\n    */\n   timestamp?: boolean;\n+\n+  /**\n+   * If enabled, logs will be in form of JSON strings.\n+   */\n+  asJSON?: boolean;",
        "comment_created_at": "2024-08-12T08:32:26+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "```suggestion\r\n  json?: boolean;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1713360405",
        "repo_full_name": "nestjs/nest",
        "pr_number": 13561,
        "pr_file": "packages/common/services/console-logger.service.ts",
        "discussion_id": "1713358460",
        "commented_code": "@@ -18,6 +18,11 @@ export interface ConsoleLoggerOptions {\n    * If enabled, will print timestamp (time difference) between current and previous log message.\n    */\n   timestamp?: boolean;\n+\n+  /**\n+   * If enabled, logs will be in form of JSON strings.\n+   */\n+  asJSON?: boolean;",
        "comment_created_at": "2024-08-12T08:34:09+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "similarly to log levels, we should be able to specify (globally) that the logger should use `json` format for all logs by default ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1036667047",
    "pr_number": 10618,
    "pr_file": "packages/core/repl/repl.ts",
    "created_at": "2022-12-01T03:57:16+00:00",
    "commented_code": "prompt: clc.green('> '),\n     ignoreUndefined: true,\n   });\n+  if (options?.historyPath) {\n+    replServer.setupHistory(options.historyPath, (err: any) => {\n+      if (err) {\n+        console.error({ err }, 'error setting up repl history');",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1036667047",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10618,
        "pr_file": "packages/core/repl/repl.ts",
        "discussion_id": "1036667047",
        "commented_code": "@@ -21,6 +28,14 @@ export async function repl(module: Type | DynamicModule) {\n     prompt: clc.green('> '),\n     ignoreUndefined: true,\n   });\n+  if (options?.historyPath) {\n+    replServer.setupHistory(options.historyPath, (err: any) => {\n+      if (err) {\n+        console.error({ err }, 'error setting up repl history');",
        "comment_created_at": "2022-12-01T03:57:16+00:00",
        "comment_author": "micalevisk",
        "comment_body": "instead of `console.error` we could use REPL's logger that was supplied to `NestFactory.createApplicationContext` above",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "823546461",
    "pr_number": 9316,
    "pr_file": "packages/common/services/console-logger.service.ts",
    "created_at": "2022-03-10T10:00:45+00:00",
    "commented_code": ") {\n     const color = this.getColorByLogLevel(logLevel);\n     messages.forEach(message => {\n-      const output = isPlainObject(message)\n-        ? `${color('Object:')}\n${JSON.stringify(\n-            message,\n-            (key, value) =>\n-              typeof value === 'bigint' ? value.toString() : value,\n-            2,\n-          )}\n`\n-        : color(message as string);\n+      const formatedMessage = this.formatMessage(message, context, logLevel);\n+      process[writeStreamType ?? 'stdout'].write(formatedMessage);\n+    });\n+  }\n \n-      const pidMessage = color(`[Nest] ${process.pid}  - `);\n-      const contextMessage = context ? yellow(`[${context}] `) : '';\n-      const timestampDiff = this.updateAndGetTimestampDiff();\n-      const formattedLogLevel = color(logLevel.toUpperCase().padStart(7, ' '));\n-      const computedMessage = `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\n`;\n+  protected formatMessage(message: unknown, context = '', logLevel: LogLevel) {\n+    const color = this.getColorByLogLevel(logLevel);\n+    const output = isPlainObject(message)\n+      ? `${color('Object:')}\n${JSON.stringify(\n+          message,\n+          (key, value) =>\n+            typeof value === 'bigint' ? value.toString() : value,\n+          2,\n+        )}\n`\n+      : color(message as string);\n \n-      process[writeStreamType ?? 'stdout'].write(computedMessage);\n-    });\n+    const pidMessage = color(`[Nest] ${process.pid}  - `);\n+    const contextMessage = context ? yellow(`[${context}] `) : '';\n+    const timestampDiff = this.updateAndGetTimestampDiff();\n+    const formattedLogLevel = color(logLevel.toUpperCase().padStart(7, ' '));\n+    return `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\n`;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "823546461",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9316,
        "pr_file": "packages/common/services/console-logger.service.ts",
        "discussion_id": "823546461",
        "commented_code": "@@ -185,23 +185,27 @@ export class ConsoleLogger implements LoggerService {\n   ) {\n     const color = this.getColorByLogLevel(logLevel);\n     messages.forEach(message => {\n-      const output = isPlainObject(message)\n-        ? `${color('Object:')}\\n${JSON.stringify(\n-            message,\n-            (key, value) =>\n-              typeof value === 'bigint' ? value.toString() : value,\n-            2,\n-          )}\\n`\n-        : color(message as string);\n+      const formatedMessage = this.formatMessage(message, context, logLevel);\n+      process[writeStreamType ?? 'stdout'].write(formatedMessage);\n+    });\n+  }\n \n-      const pidMessage = color(`[Nest] ${process.pid}  - `);\n-      const contextMessage = context ? yellow(`[${context}] `) : '';\n-      const timestampDiff = this.updateAndGetTimestampDiff();\n-      const formattedLogLevel = color(logLevel.toUpperCase().padStart(7, ' '));\n-      const computedMessage = `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n+  protected formatMessage(message: unknown, context = '', logLevel: LogLevel) {\n+    const color = this.getColorByLogLevel(logLevel);\n+    const output = isPlainObject(message)\n+      ? `${color('Object:')}\\n${JSON.stringify(\n+          message,\n+          (key, value) =>\n+            typeof value === 'bigint' ? value.toString() : value,\n+          2,\n+        )}\\n`\n+      : color(message as string);\n \n-      process[writeStreamType ?? 'stdout'].write(computedMessage);\n-    });\n+    const pidMessage = color(`[Nest] ${process.pid}  - `);\n+    const contextMessage = context ? yellow(`[${context}] `) : '';\n+    const timestampDiff = this.updateAndGetTimestampDiff();\n+    const formattedLogLevel = color(logLevel.toUpperCase().padStart(7, ' '));\n+    return `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;",
        "comment_created_at": "2022-03-10T10:00:45+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "I think this line:\r\n\r\n```\r\n`${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`\r\n```\r\nshould be configurable. We could declare another protected method that receives these variables as input parameters (without colors applied). Perhaps that's actually how the `formatMessage` should look likely (we can move everything else back to the original location)",
        "pr_file_module": null
      },
      {
        "comment_id": "823570442",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9316,
        "pr_file": "packages/common/services/console-logger.service.ts",
        "discussion_id": "823546461",
        "commented_code": "@@ -185,23 +185,27 @@ export class ConsoleLogger implements LoggerService {\n   ) {\n     const color = this.getColorByLogLevel(logLevel);\n     messages.forEach(message => {\n-      const output = isPlainObject(message)\n-        ? `${color('Object:')}\\n${JSON.stringify(\n-            message,\n-            (key, value) =>\n-              typeof value === 'bigint' ? value.toString() : value,\n-            2,\n-          )}\\n`\n-        : color(message as string);\n+      const formatedMessage = this.formatMessage(message, context, logLevel);\n+      process[writeStreamType ?? 'stdout'].write(formatedMessage);\n+    });\n+  }\n \n-      const pidMessage = color(`[Nest] ${process.pid}  - `);\n-      const contextMessage = context ? yellow(`[${context}] `) : '';\n-      const timestampDiff = this.updateAndGetTimestampDiff();\n-      const formattedLogLevel = color(logLevel.toUpperCase().padStart(7, ' '));\n-      const computedMessage = `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n+  protected formatMessage(message: unknown, context = '', logLevel: LogLevel) {\n+    const color = this.getColorByLogLevel(logLevel);\n+    const output = isPlainObject(message)\n+      ? `${color('Object:')}\\n${JSON.stringify(\n+          message,\n+          (key, value) =>\n+            typeof value === 'bigint' ? value.toString() : value,\n+          2,\n+        )}\\n`\n+      : color(message as string);\n \n-      process[writeStreamType ?? 'stdout'].write(computedMessage);\n-    });\n+    const pidMessage = color(`[Nest] ${process.pid}  - `);\n+    const contextMessage = context ? yellow(`[${context}] `) : '';\n+    const timestampDiff = this.updateAndGetTimestampDiff();\n+    const formattedLogLevel = color(logLevel.toUpperCase().padStart(7, ' '));\n+    return `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;",
        "comment_created_at": "2022-03-10T10:26:50+00:00",
        "comment_author": "stanimirovv",
        "comment_body": "Agreed, it's a simpler solution.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "823786610",
    "pr_number": 9316,
    "pr_file": "packages/common/services/console-logger.service.ts",
    "created_at": "2022-03-10T14:38:05+00:00",
    "commented_code": "const contextMessage = context ? yellow(`[${context}] `) : '';\n       const timestampDiff = this.updateAndGetTimestampDiff();\n       const formattedLogLevel = color(logLevel.toUpperCase().padStart(7, ' '));\n-      const computedMessage = `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\n`;\n+      const formatedMessage = this.formatMessage(\n+        pidMessage,\n+        formattedLogLevel,\n+        contextMessage,\n+        output,\n+        timestampDiff,\n+      );\n \n-      process[writeStreamType ?? 'stdout'].write(computedMessage);\n+      process[writeStreamType ?? 'stdout'].write(formatedMessage);\n     });\n   }\n \n+  protected formatMessage(\n+    pidMessage: string,",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "823786610",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9316,
        "pr_file": "packages/common/services/console-logger.service.ts",
        "discussion_id": "823786610",
        "commented_code": "@@ -198,12 +198,28 @@ export class ConsoleLogger implements LoggerService {\n       const contextMessage = context ? yellow(`[${context}] `) : '';\n       const timestampDiff = this.updateAndGetTimestampDiff();\n       const formattedLogLevel = color(logLevel.toUpperCase().padStart(7, ' '));\n-      const computedMessage = `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n+      const formatedMessage = this.formatMessage(\n+        pidMessage,\n+        formattedLogLevel,\n+        contextMessage,\n+        output,\n+        timestampDiff,\n+      );\n \n-      process[writeStreamType ?? 'stdout'].write(computedMessage);\n+      process[writeStreamType ?? 'stdout'].write(formatedMessage);\n     });\n   }\n \n+  protected formatMessage(\n+    pidMessage: string,",
        "comment_created_at": "2022-03-10T14:38:05+00:00",
        "comment_author": "micalevisk",
        "comment_body": "I think having this interface wouldn't be that easy to write the output that that Issue need because `pidMessage` is too tied with the default formatting and uses that `color` function\r\n\r\nCan you try to rewrite this `formatMessage` like this:\r\n\r\n```ts\r\nprotected formatMessage(\r\n  pid: number,\r\n  logLevel: string,\r\n  context: string,\r\n  timestampDiff: number,\r\n  output: string,\r\n): string {\r\n  return `` ...\r\n}\r\n```\r\n\r\nbut then we'll need to change the `updateAndGetTimestampDiff` method to extract the coloring stuff from it and make it return a number instead of string.\r\n\r\nAnd then make `formatMessage` return an string with the color applied instead of applying it on `printMessages`. But yeah, that could be a bit harsh\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "823792436",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9316,
        "pr_file": "packages/common/services/console-logger.service.ts",
        "discussion_id": "823786610",
        "commented_code": "@@ -198,12 +198,28 @@ export class ConsoleLogger implements LoggerService {\n       const contextMessage = context ? yellow(`[${context}] `) : '';\n       const timestampDiff = this.updateAndGetTimestampDiff();\n       const formattedLogLevel = color(logLevel.toUpperCase().padStart(7, ' '));\n-      const computedMessage = `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n+      const formatedMessage = this.formatMessage(\n+        pidMessage,\n+        formattedLogLevel,\n+        contextMessage,\n+        output,\n+        timestampDiff,\n+      );\n \n-      process[writeStreamType ?? 'stdout'].write(computedMessage);\n+      process[writeStreamType ?? 'stdout'].write(formatedMessage);\n     });\n   }\n \n+  protected formatMessage(\n+    pidMessage: string,",
        "comment_created_at": "2022-03-10T14:43:22+00:00",
        "comment_author": "stanimirovv",
        "comment_body": "Yeah I think this may be better, I will refactor it with your suggestions.",
        "pr_file_module": null
      },
      {
        "comment_id": "824544602",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9316,
        "pr_file": "packages/common/services/console-logger.service.ts",
        "discussion_id": "823786610",
        "commented_code": "@@ -198,12 +198,28 @@ export class ConsoleLogger implements LoggerService {\n       const contextMessage = context ? yellow(`[${context}] `) : '';\n       const timestampDiff = this.updateAndGetTimestampDiff();\n       const formattedLogLevel = color(logLevel.toUpperCase().padStart(7, ' '));\n-      const computedMessage = `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n+      const formatedMessage = this.formatMessage(\n+        pidMessage,\n+        formattedLogLevel,\n+        contextMessage,\n+        output,\n+        timestampDiff,\n+      );\n \n-      process[writeStreamType ?? 'stdout'].write(computedMessage);\n+      process[writeStreamType ?? 'stdout'].write(formatedMessage);\n     });\n   }\n \n+  protected formatMessage(\n+    pidMessage: string,",
        "comment_created_at": "2022-03-11T09:39:34+00:00",
        "comment_author": "stanimirovv",
        "comment_body": "@micalevisk  @kamilmysliwiec \r\n\r\nSo with the latest changes we are more or less like the first version.\r\nI am not 100% sure if the format version should just place the arguments or also be able to generate them.\r\n\r\nThe minimal implementation is here: https://github.com/stanimirovv/nest/commit/89d97652caafc26c379ae0268229c4fc3caf3cf2\r\n\r\nThe \"accept less arguments and do more\" implementation is here (also the current one):\r\nhttps://github.com/stanimirovv/nest/blob/feat/custom-logger-formatters/packages/common/services/console-logger.service.ts#L192\r\n\r\nPersonally I lean towards the second version because you have more control - over colors for example.\r\n\r\nWhat is the intent - to allow some control or full control ? \r\nIf some control - go with https://github.com/stanimirovv/nest/commit/89d97652caafc26c379ae0268229c4fc3caf3cf2\r\nIf full go with - https://github.com/stanimirovv/nest/blob/feat/custom-logger-formatters/packages/common/services/console-logger.service.ts#L192\r\n\r\ndoes that make sense ? ",
        "pr_file_module": null
      },
      {
        "comment_id": "824549103",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9316,
        "pr_file": "packages/common/services/console-logger.service.ts",
        "discussion_id": "823786610",
        "commented_code": "@@ -198,12 +198,28 @@ export class ConsoleLogger implements LoggerService {\n       const contextMessage = context ? yellow(`[${context}] `) : '';\n       const timestampDiff = this.updateAndGetTimestampDiff();\n       const formattedLogLevel = color(logLevel.toUpperCase().padStart(7, ' '));\n-      const computedMessage = `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n+      const formatedMessage = this.formatMessage(\n+        pidMessage,\n+        formattedLogLevel,\n+        contextMessage,\n+        output,\n+        timestampDiff,\n+      );\n \n-      process[writeStreamType ?? 'stdout'].write(computedMessage);\n+      process[writeStreamType ?? 'stdout'].write(formatedMessage);\n     });\n   }\n \n+  protected formatMessage(\n+    pidMessage: string,",
        "comment_created_at": "2022-03-11T09:45:23+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "This approach https://github.com/stanimirovv/nest/commit/89d97652caafc26c379ae0268229c4fc3caf3cf2# better fits our needs but we should also allow opt-in coloring the messages. In this case, we should probably declare another dedicated method (let's say `colorize`) that takes the same set of arguments as `formatMessages` and adds colors. This method should be executed from within the `formatMessages` and have `protected` modifier to make it feasible to call it (if needed) from within the custom logger implementation.",
        "pr_file_module": null
      },
      {
        "comment_id": "824569185",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9316,
        "pr_file": "packages/common/services/console-logger.service.ts",
        "discussion_id": "823786610",
        "commented_code": "@@ -198,12 +198,28 @@ export class ConsoleLogger implements LoggerService {\n       const contextMessage = context ? yellow(`[${context}] `) : '';\n       const timestampDiff = this.updateAndGetTimestampDiff();\n       const formattedLogLevel = color(logLevel.toUpperCase().padStart(7, ' '));\n-      const computedMessage = `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n+      const formatedMessage = this.formatMessage(\n+        pidMessage,\n+        formattedLogLevel,\n+        contextMessage,\n+        output,\n+        timestampDiff,\n+      );\n \n-      process[writeStreamType ?? 'stdout'].write(computedMessage);\n+      process[writeStreamType ?? 'stdout'].write(formatedMessage);\n     });\n   }\n \n+  protected formatMessage(\n+    pidMessage: string,",
        "comment_created_at": "2022-03-11T10:09:21+00:00",
        "comment_author": "stanimirovv",
        "comment_body": "One final question - \r\n\r\nWouldn't it be a simpler interface if `colorize` takes a single argument and returns it colorised ? \r\n`function colorize(str: string): string`\r\nIt will be called for the 2 parts of the message colored currently.\r\nThat way the user may add custom colorized elements to the log message.\r\nBut, again, depends on the intent.\r\n\r\nThe alternative is to have the following signature:\r\n```\r\nfunction colorize(\r\n    pidMessage: string,\r\n    formattedLogLevel: string,\r\n    contextMessage: string,\r\n    output: string,\r\n    timestampDiff: string,): \r\n\r\n    [\r\n      pidMessage: string,\r\n      formattedLogLevel: string,\r\n      contextMessage: string,\r\n      output: string,\r\n      timestampDiff: string,\r\n    ]\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "824573702",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9316,
        "pr_file": "packages/common/services/console-logger.service.ts",
        "discussion_id": "823786610",
        "commented_code": "@@ -198,12 +198,28 @@ export class ConsoleLogger implements LoggerService {\n       const contextMessage = context ? yellow(`[${context}] `) : '';\n       const timestampDiff = this.updateAndGetTimestampDiff();\n       const formattedLogLevel = color(logLevel.toUpperCase().padStart(7, ' '));\n-      const computedMessage = `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n+      const formatedMessage = this.formatMessage(\n+        pidMessage,\n+        formattedLogLevel,\n+        contextMessage,\n+        output,\n+        timestampDiff,\n+      );\n \n-      process[writeStreamType ?? 'stdout'].write(computedMessage);\n+      process[writeStreamType ?? 'stdout'].write(formatedMessage);\n     });\n   }\n \n+  protected formatMessage(\n+    pidMessage: string,",
        "comment_created_at": "2022-03-11T10:15:23+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Yeah, I think as long as we make `getColorByLogLevel` protected as well (to make it accessible) it could take two arguments (one being a message to format and the second - optional - color to be used that defaults to `this.getColorByLogLever()`)",
        "pr_file_module": null
      },
      {
        "comment_id": "824924128",
        "repo_full_name": "nestjs/nest",
        "pr_number": 9316,
        "pr_file": "packages/common/services/console-logger.service.ts",
        "discussion_id": "823786610",
        "commented_code": "@@ -198,12 +198,28 @@ export class ConsoleLogger implements LoggerService {\n       const contextMessage = context ? yellow(`[${context}] `) : '';\n       const timestampDiff = this.updateAndGetTimestampDiff();\n       const formattedLogLevel = color(logLevel.toUpperCase().padStart(7, ' '));\n-      const computedMessage = `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n+      const formatedMessage = this.formatMessage(\n+        pidMessage,\n+        formattedLogLevel,\n+        contextMessage,\n+        output,\n+        timestampDiff,\n+      );\n \n-      process[writeStreamType ?? 'stdout'].write(computedMessage);\n+      process[writeStreamType ?? 'stdout'].write(formatedMessage);\n     });\n   }\n \n+  protected formatMessage(\n+    pidMessage: string,",
        "comment_created_at": "2022-03-11T17:25:56+00:00",
        "comment_author": "stanimirovv",
        "comment_body": "I think we should be very close:\r\n\r\n1. I extracted the colorize method and moved all logic having to do with colors into the formatMessage function as discussed\r\n2. I took the liberty to extract one more protected message - stringifyMessage I can change it to private, but it felt like something that should also optionally be configurable -> the way the objects are serialized.",
        "pr_file_module": null
      }
    ]
  }
]