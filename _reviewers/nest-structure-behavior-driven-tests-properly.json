[
  {
    "discussion_id": "1036670041",
    "pr_number": 10623,
    "pr_file": "sample/01-cats-app/src/cats/cats.controller.spec.ts",
    "created_at": "2022-12-01T04:05:09+00:00",
    "commented_code": "expect(await catsController.findAll()).toBe(result);\n     });\n   });\n+\n+  describe('create', () => {\n+    it('should add a new cat', async () => {\n+      const cat: Cat = {\n+        age: 2,\n+        breed: 'Bombay',\n+        name: 'Pixel',\n+      };\n+      const expectedCatArray = [cat];\n+\n+      expect(await catsController.findAll()).toStrictEqual([]);",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1036670041",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10623,
        "pr_file": "sample/01-cats-app/src/cats/cats.controller.spec.ts",
        "discussion_id": "1036670041",
        "commented_code": "@@ -31,4 +31,21 @@ describe('CatsController', () => {\n       expect(await catsController.findAll()).toBe(result);\n     });\n   });\n+\n+  describe('create', () => {\n+    it('should add a new cat', async () => {\n+      const cat: Cat = {\n+        age: 2,\n+        breed: 'Bombay',\n+        name: 'Pixel',\n+      };\n+      const expectedCatArray = [cat];\n+\n+      expect(await catsController.findAll()).toStrictEqual([]);",
        "comment_created_at": "2022-12-01T04:05:09+00:00",
        "comment_author": "micalevisk",
        "comment_body": "```suggestion\r\n      await expect(catsController.findAll()).resolves.toStrictEqual([]);\r\n```\r\n\r\ncan we use this instead? https://jestjs.io/docs/tutorial-async#asyncawait",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1036671058",
    "pr_number": 10623,
    "pr_file": "sample/01-cats-app/src/cats/cats.service.spec.ts",
    "created_at": "2022-12-01T04:08:02+00:00",
    "commented_code": "+import { Test } from '@nestjs/testing';\n+import { CatsService } from './cats.service';\n+import { Cat } from './interfaces/cat.interface';\n+\n+describe('CatsService', () => {\n+  let catsService: CatsService;\n+\n+  beforeEach(async () => {\n+    const moduleRef = await Test.createTestingModule({\n+      providers: [CatsService],\n+    }).compile();\n+\n+    catsService = moduleRef.get<CatsService>(CatsService);\n+  });\n+\n+  describe('findAll', () => {\n+    it('should return an array of cats', async () => {\n+      const result = [\n+        {\n+          name: 'Frajola',\n+          age: 2,\n+          breed: 'Stray',\n+        },\n+      ];\n+      jest.spyOn(catsService, 'findAll').mockImplementation(() => result);",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1036671058",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10623,
        "pr_file": "sample/01-cats-app/src/cats/cats.service.spec.ts",
        "discussion_id": "1036671058",
        "commented_code": "@@ -0,0 +1,46 @@\n+import { Test } from '@nestjs/testing';\n+import { CatsService } from './cats.service';\n+import { Cat } from './interfaces/cat.interface';\n+\n+describe('CatsService', () => {\n+  let catsService: CatsService;\n+\n+  beforeEach(async () => {\n+    const moduleRef = await Test.createTestingModule({\n+      providers: [CatsService],\n+    }).compile();\n+\n+    catsService = moduleRef.get<CatsService>(CatsService);\n+  });\n+\n+  describe('findAll', () => {\n+    it('should return an array of cats', async () => {\n+      const result = [\n+        {\n+          name: 'Frajola',\n+          age: 2,\n+          breed: 'Stray',\n+        },\n+      ];\n+      jest.spyOn(catsService, 'findAll').mockImplementation(() => result);",
        "comment_created_at": "2022-12-01T04:08:02+00:00",
        "comment_author": "micalevisk",
        "comment_body": "```suggestion\r\n```\r\n\r\nif we're testing `CatsService#findAll`, we shouldn't mock its implementation, otherwise we end up testing nothing.\r\n\r\nInstead, you somehow should do `catService.cats = result`. I guess it's fine do write it like this:\r\n\r\n```ts\r\n// @ts-ignore\r\ncatService.cats = result\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1030747625",
    "pr_number": 10390,
    "pr_file": "packages/core/test/middleware/middleware-module.spec.ts",
    "created_at": "2022-11-23T18:03:10+00:00",
    "commented_code": "expect(createMiddlewareFactoryStub.calledOnce).to.be.true;\n     });\n   });\n+  describe('getPaths', () => {",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1030747625",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10390,
        "pr_file": "packages/core/test/middleware/middleware-module.spec.ts",
        "discussion_id": "1030747625",
        "commented_code": "@@ -196,4 +198,85 @@ describe('MiddlewareModule', () => {\n       expect(createMiddlewareFactoryStub.calledOnce).to.be.true;\n     });\n   });\n+  describe('getPaths', () => {",
        "comment_created_at": "2022-11-23T18:03:10+00:00",
        "comment_author": "thiagomini",
        "comment_body": "I appreciate that you are trying to add tests for this behavior Cody, but the short answer here is: We shouldn't test **private** functions. Instead, our integration tests / unit tests executed by the **public** methods are meant to guarantee this part of the code too.\r\n\r\n**Now a longer answer:**\r\n\r\nGood tests are meant not only to guarantee our code behaves as we expect but also to facilitate the refactoring of classes, functions, and modules. Because of that, if we end up testing a **private** function, it means we are testing a specific **implementation detail**. Imagine that we want to change the way we get paths for the `MiddlewareModule`, completely removing this private function and relying on another class. This would cause this test to fail. In summary, we should test **behaviors** in a \"black-box\" perspective:\r\n\r\n1. Given a scenario (condition)\r\n2. When something happens (a function is called)\r\n3. We expect a specific output (either a return value or a side-effect, for instance, a new record in the database)\r\n\r\nIn this case, I imagine you needed to test this code because it's not simple! This is a reasonable thought. However, when that occurs for a **private** method, it indicates we have an [Iceberg class anti-pattern](https://deviq.com/antipatterns/iceberg-class). In short, it means we have too many responsibilities for a private function in a way that is hard to test its behavior via the public interface (in this case, the `MiddlewareModule` public method called `register`). \r\n\r\nSo, you might ask, what should we do? Well, I see 2 alternatives here:\r\n\r\n1. Ensure the behavior you are trying to test here is actually covered by integration tests\r\n2. Create a separate class that is responsible for retrieving the `paths`. That way, you can have tests for its public interface **and** inject it as a dependency for the `MiddlewareModule`. A name suggestion for this class could be `RouteInfoPathExtractor`.\r\n\r\nFinally, if you want to know more about tests, I highly recommend reading [Fundamentals of Automated Testing](https://trilon.io/blog/fundamentals-of-automated-testing-unit-tests-basic-concepts), a blog post from a colleague here at Trilon. You can also check out my own post called [Advanced Testing Strategies with Mocks in NestJS](https://trilon.io/blog/advanced-testing-strategies-with-mocks-in-nestjs).",
        "pr_file_module": null
      },
      {
        "comment_id": "1030994767",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10390,
        "pr_file": "packages/core/test/middleware/middleware-module.spec.ts",
        "discussion_id": "1030747625",
        "commented_code": "@@ -196,4 +198,85 @@ describe('MiddlewareModule', () => {\n       expect(createMiddlewareFactoryStub.calledOnce).to.be.true;\n     });\n   });\n+  describe('getPaths', () => {",
        "comment_created_at": "2022-11-24T02:06:53+00:00",
        "comment_author": "CodyTseng",
        "comment_body": "Thank you so much for taking the time to give me such detailed advice! I think I will learn a lot from your advice. And I will find time to read the blogs you recommend.\r\n\r\nFinally, I might choose the second solution. Because I think it will be complicated to cover all situation by integration tests \ud83d\ude01",
        "pr_file_module": null
      },
      {
        "comment_id": "1031453457",
        "repo_full_name": "nestjs/nest",
        "pr_number": 10390,
        "pr_file": "packages/core/test/middleware/middleware-module.spec.ts",
        "discussion_id": "1030747625",
        "commented_code": "@@ -196,4 +198,85 @@ describe('MiddlewareModule', () => {\n       expect(createMiddlewareFactoryStub.calledOnce).to.be.true;\n     });\n   });\n+  describe('getPaths', () => {",
        "comment_created_at": "2022-11-24T12:24:59+00:00",
        "comment_author": "thiagomini",
        "comment_body": "You are welcome, Cody. Glad to know I could help!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "729397177",
    "pr_number": 8044,
    "pr_file": "sample/07-sequelize/src/users/users.controller.spec.ts",
    "created_at": "2021-10-14T22:51:26+00:00",
    "commented_code": "+import { Test, TestingModule } from '@nestjs/testing';\n+import { CreateUserDto } from './dto/create-user.dto';\n+import { UsersController } from './users.controller';\n+import { UsersService } from './users.service';\n+\n+const createUserDto: CreateUserDto = {\n+  firstName: 'firstName #1',\n+  lastName: 'lastName #1',\n+};\n+\n+describe('UsersController', () => {\n+  let usersController: UsersController;\n+  let usersService: UsersService;\n+\n+  beforeEach(async () => {\n+    const app: TestingModule = await Test.createTestingModule({\n+      controllers: [UsersController],\n+      providers: [\n+        UsersService,\n+        {\n+          provide: UsersService,\n+          useValue: {\n+            create: jest\n+              .fn()\n+              .mockImplementation((user: CreateUserDto) =>\n+                Promise.resolve({ id: 'a id', ...user }),\n+              ),\n+            findAll: jest.fn().mockResolvedValue([\n+              {\n+                firstName: 'firstName #1',\n+                lastName: 'lastName #1',\n+              },\n+              {\n+                firstName: 'firstName #2',\n+                lastName: 'lastName #2',\n+              },\n+            ]),\n+            findOne: jest.fn().mockImplementation((id: string) =>\n+              Promise.resolve({\n+                firstName: 'firstName #1',\n+                lastName: 'lastName #1',\n+                id,\n+              }),\n+            ),\n+            remove: jest.fn(),\n+          },\n+        },\n+      ],\n+    }).compile();\n+\n+    usersController = app.get<UsersController>(UsersController);\n+    usersService = app.get<UsersService>(UsersService);\n+  });\n+\n+  it('should be defined', () => {\n+    expect(usersController).toBeDefined();\n+  });\n+\n+  describe('create()', () => {\n+    it('should create an user', () => {\n+      usersController.create(createUserDto);\n+      expect(usersService.create).toHaveBeenCalled();\n+      expect(usersService.create).toHaveBeenCalledWith(createUserDto);\n+      expect(usersController.create(createUserDto)).resolves.toEqual({\n+        id: 'a id',\n+        ...createUserDto,\n+      });",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "729397177",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8044,
        "pr_file": "sample/07-sequelize/src/users/users.controller.spec.ts",
        "discussion_id": "729397177",
        "commented_code": "@@ -0,0 +1,96 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { CreateUserDto } from './dto/create-user.dto';\n+import { UsersController } from './users.controller';\n+import { UsersService } from './users.service';\n+\n+const createUserDto: CreateUserDto = {\n+  firstName: 'firstName #1',\n+  lastName: 'lastName #1',\n+};\n+\n+describe('UsersController', () => {\n+  let usersController: UsersController;\n+  let usersService: UsersService;\n+\n+  beforeEach(async () => {\n+    const app: TestingModule = await Test.createTestingModule({\n+      controllers: [UsersController],\n+      providers: [\n+        UsersService,\n+        {\n+          provide: UsersService,\n+          useValue: {\n+            create: jest\n+              .fn()\n+              .mockImplementation((user: CreateUserDto) =>\n+                Promise.resolve({ id: 'a id', ...user }),\n+              ),\n+            findAll: jest.fn().mockResolvedValue([\n+              {\n+                firstName: 'firstName #1',\n+                lastName: 'lastName #1',\n+              },\n+              {\n+                firstName: 'firstName #2',\n+                lastName: 'lastName #2',\n+              },\n+            ]),\n+            findOne: jest.fn().mockImplementation((id: string) =>\n+              Promise.resolve({\n+                firstName: 'firstName #1',\n+                lastName: 'lastName #1',\n+                id,\n+              }),\n+            ),\n+            remove: jest.fn(),\n+          },\n+        },\n+      ],\n+    }).compile();\n+\n+    usersController = app.get<UsersController>(UsersController);\n+    usersService = app.get<UsersService>(UsersService);\n+  });\n+\n+  it('should be defined', () => {\n+    expect(usersController).toBeDefined();\n+  });\n+\n+  describe('create()', () => {\n+    it('should create an user', () => {\n+      usersController.create(createUserDto);\n+      expect(usersService.create).toHaveBeenCalled();\n+      expect(usersService.create).toHaveBeenCalledWith(createUserDto);\n+      expect(usersController.create(createUserDto)).resolves.toEqual({\n+        id: 'a id',\n+        ...createUserDto,\n+      });",
        "comment_created_at": "2021-10-14T22:51:26+00:00",
        "comment_author": "jmcdo29",
        "comment_body": "```suggestion\r\n      expect(usersController.create(createUserDto)).resolves.toEqual({\r\n        id: 'a id',\r\n        ...createUserDto,\r\n      });\r\n      expect(usersService.create).toHaveBeenCalled();\r\n      expect(usersService.create).toHaveBeenCalledWith(createUserDto);\r\n```\r\nNo need to call `usersController.create` twice. ",
        "pr_file_module": null
      },
      {
        "comment_id": "729633815",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8044,
        "pr_file": "sample/07-sequelize/src/users/users.controller.spec.ts",
        "discussion_id": "729397177",
        "commented_code": "@@ -0,0 +1,96 @@\n+import { Test, TestingModule } from '@nestjs/testing';\n+import { CreateUserDto } from './dto/create-user.dto';\n+import { UsersController } from './users.controller';\n+import { UsersService } from './users.service';\n+\n+const createUserDto: CreateUserDto = {\n+  firstName: 'firstName #1',\n+  lastName: 'lastName #1',\n+};\n+\n+describe('UsersController', () => {\n+  let usersController: UsersController;\n+  let usersService: UsersService;\n+\n+  beforeEach(async () => {\n+    const app: TestingModule = await Test.createTestingModule({\n+      controllers: [UsersController],\n+      providers: [\n+        UsersService,\n+        {\n+          provide: UsersService,\n+          useValue: {\n+            create: jest\n+              .fn()\n+              .mockImplementation((user: CreateUserDto) =>\n+                Promise.resolve({ id: 'a id', ...user }),\n+              ),\n+            findAll: jest.fn().mockResolvedValue([\n+              {\n+                firstName: 'firstName #1',\n+                lastName: 'lastName #1',\n+              },\n+              {\n+                firstName: 'firstName #2',\n+                lastName: 'lastName #2',\n+              },\n+            ]),\n+            findOne: jest.fn().mockImplementation((id: string) =>\n+              Promise.resolve({\n+                firstName: 'firstName #1',\n+                lastName: 'lastName #1',\n+                id,\n+              }),\n+            ),\n+            remove: jest.fn(),\n+          },\n+        },\n+      ],\n+    }).compile();\n+\n+    usersController = app.get<UsersController>(UsersController);\n+    usersService = app.get<UsersService>(UsersService);\n+  });\n+\n+  it('should be defined', () => {\n+    expect(usersController).toBeDefined();\n+  });\n+\n+  describe('create()', () => {\n+    it('should create an user', () => {\n+      usersController.create(createUserDto);\n+      expect(usersService.create).toHaveBeenCalled();\n+      expect(usersService.create).toHaveBeenCalledWith(createUserDto);\n+      expect(usersController.create(createUserDto)).resolves.toEqual({\n+        id: 'a id',\n+        ...createUserDto,\n+      });",
        "comment_created_at": "2021-10-15T08:41:14+00:00",
        "comment_author": "Tony133",
        "comment_body": "Done! \ud83d\udc4d",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "556478109",
    "pr_number": 6109,
    "pr_file": "sample/19-auth-jwt/src/auth/auth.service.spec.ts",
    "created_at": "2021-01-13T12:17:25+00:00",
    "commented_code": "it('should be defined', () => {\n     expect(service).toBeDefined();\n   });\n+\n+  it('should validateUser ok', async () => {\n+    const res = await service.validateUser('maria','guess')\n+    expect(res.userId).toEqual(3)\n+  });\n+\n+  it('should validateUser fail', async () => {\n+    const res = await service.validateUser('xxx','xxx')\n+    expect(res).toBeNull()\n+  });",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "556478109",
        "repo_full_name": "nestjs/nest",
        "pr_number": 6109,
        "pr_file": "sample/19-auth-jwt/src/auth/auth.service.spec.ts",
        "discussion_id": "556478109",
        "commented_code": "@@ -29,4 +29,19 @@ describe('AuthService', () => {\n   it('should be defined', () => {\n     expect(service).toBeDefined();\n   });\n+\n+  it('should validateUser ok', async () => {\n+    const res = await service.validateUser('maria','guess')\n+    expect(res.userId).toEqual(3)\n+  });\n+\n+  it('should validateUser fail', async () => {\n+    const res = await service.validateUser('xxx','xxx')\n+    expect(res).toBeNull()\n+  });",
        "comment_created_at": "2021-01-13T12:17:25+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Can we wrap it within a `describe(\"valideteUser\")` block and then inside have to scenarios covered:\r\n\r\n- should return a user object when credentials are valid\r\n- should return null when credentials are invalid\r\n\r\nAnd likewise below with the `login()` method",
        "pr_file_module": null
      },
      {
        "comment_id": "565233103",
        "repo_full_name": "nestjs/nest",
        "pr_number": 6109,
        "pr_file": "sample/19-auth-jwt/src/auth/auth.service.spec.ts",
        "discussion_id": "556478109",
        "commented_code": "@@ -29,4 +29,19 @@ describe('AuthService', () => {\n   it('should be defined', () => {\n     expect(service).toBeDefined();\n   });\n+\n+  it('should validateUser ok', async () => {\n+    const res = await service.validateUser('maria','guess')\n+    expect(res.userId).toEqual(3)\n+  });\n+\n+  it('should validateUser fail', async () => {\n+    const res = await service.validateUser('xxx','xxx')\n+    expect(res).toBeNull()\n+  });",
        "comment_created_at": "2021-01-27T11:26:48+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "ping \ud83c\udfd3 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "300326425",
    "pr_number": 2512,
    "pr_file": "packages/common/test/exceptions/http.exception.spec.ts",
    "created_at": "2019-07-04T10:00:11+00:00",
    "commented_code": "statusCode: 404,\n     });\n   });\n+\n+  it('Should inherit from error', () => {\n+    const error = new HttpException('', 400);\n+    expect(error instanceof Error).to.be.true;\n+  });\n+\n+  it('Should be serializable', () => {\n+    const message = 'Some Error';\n+    const error = new HttpException(message, 400);\n+    expect(`${error}`).to.be.eql(`Error: ${message}`);\n+  });\n+\n+  it('Should serialize objects', () => {\n+    const obj = { foo: 'bar' };\n+    const error = new HttpException(obj, 400);\n+    expect(`${error}`).to.be.eql(`Error: ${JSON.stringify(obj)}`);\n+    expect(`${error}`.includes('[object Object]')).to.not.be.true;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "300326425",
        "repo_full_name": "nestjs/nest",
        "pr_number": 2512,
        "pr_file": "packages/common/test/exceptions/http.exception.spec.ts",
        "discussion_id": "300326425",
        "commented_code": "@@ -44,4 +44,27 @@ describe('HttpException', () => {\n       statusCode: 404,\n     });\n   });\n+\n+  it('Should inherit from error', () => {\n+    const error = new HttpException('', 400);\n+    expect(error instanceof Error).to.be.true;\n+  });\n+\n+  it('Should be serializable', () => {\n+    const message = 'Some Error';\n+    const error = new HttpException(message, 400);\n+    expect(`${error}`).to.be.eql(`Error: ${message}`);\n+  });\n+\n+  it('Should serialize objects', () => {\n+    const obj = { foo: 'bar' };\n+    const error = new HttpException(obj, 400);\n+    expect(`${error}`).to.be.eql(`Error: ${JSON.stringify(obj)}`);\n+    expect(`${error}`.includes('[object Object]')).to.not.be.true;",
        "comment_created_at": "2019-07-04T10:00:11+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "could you follow BDD style? Example:\r\n\r\n```typescript\r\ndescribe('when \"message\" is an object', () => { \r\n    it('should serialize an object', () => {\r\n    \r\n    });\r\n});\r\n```",
        "pr_file_module": null
      }
    ]
  }
]