[
  {
    "discussion_id": "1919688953",
    "pr_number": 14433,
    "pr_file": "packages/core/nest-application-context.ts",
    "created_at": "2025-01-17T07:44:54+00:00",
    "commented_code": "await this.dispose();\n         await this.callShutdownHook(signal);\n         signals.forEach(sig => process.removeListener(sig, cleanup));\n-        process.kill(process.pid, signal);\n+        process.exit(0);",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1919688953",
        "repo_full_name": "nestjs/nest",
        "pr_number": 14433,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "1919688953",
        "commented_code": "@@ -368,7 +368,7 @@ export class NestApplicationContext<\n         await this.dispose();\n         await this.callShutdownHook(signal);\n         signals.forEach(sig => process.removeListener(sig, cleanup));\n-        process.kill(process.pid, signal);\n+        process.exit(0);",
        "comment_created_at": "2025-01-17T07:44:54+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Not sure if I'm following. `process.exit` (force exit) shouldn't be necessary. We're also overriding the signal (the reason to kill the process) here",
        "pr_file_module": null
      },
      {
        "comment_id": "1922267495",
        "repo_full_name": "nestjs/nest",
        "pr_number": 14433,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "1919688953",
        "commented_code": "@@ -368,7 +368,7 @@ export class NestApplicationContext<\n         await this.dispose();\n         await this.callShutdownHook(signal);\n         signals.forEach(sig => process.removeListener(sig, cleanup));\n-        process.kill(process.pid, signal);\n+        process.exit(0);",
        "comment_created_at": "2025-01-20T11:38:17+00:00",
        "comment_author": "thomaschaaf",
        "comment_body": "```js\r\nconsole.log(\"Hello CodeSandbox\");\r\n\r\nprocess.on(\"SIGTERM\", () => {\r\n  console.log(\"SIGTERM received\");\r\n  process.kill(process.pid, \"SIGTERM\");\r\n});\r\n\r\nprocess.on(\"exit\", () => {\r\n  console.log(\"about to exit\");\r\n});\r\n\r\nsetTimeout(() => {\r\n  console.log(\"killing\");\r\n  process.kill(process.pid, \"SIGTERM\");\r\n}, 1000);\r\n```\r\n\r\nThere \"about to exit\" is called. I don't understand why my unit test is failing without changing to process.exit(0).\r\n\r\nI understand you'd want to wait for node to start the shutdown process - maybe the problem is coming from nestjs/cli / commander not waiting or not emitting the exit event on the child process.",
        "pr_file_module": null
      },
      {
        "comment_id": "1922311634",
        "repo_full_name": "nestjs/nest",
        "pr_number": 14433,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "1919688953",
        "commented_code": "@@ -368,7 +368,7 @@ export class NestApplicationContext<\n         await this.dispose();\n         await this.callShutdownHook(signal);\n         signals.forEach(sig => process.removeListener(sig, cleanup));\n-        process.kill(process.pid, signal);\n+        process.exit(0);",
        "comment_created_at": "2025-01-20T12:13:30+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "This doesn't work even if you run `node dist/main` (no NestJS CLI involved)",
        "pr_file_module": null
      },
      {
        "comment_id": "1922314312",
        "repo_full_name": "nestjs/nest",
        "pr_number": 14433,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "1919688953",
        "commented_code": "@@ -368,7 +368,7 @@ export class NestApplicationContext<\n         await this.dispose();\n         await this.callShutdownHook(signal);\n         signals.forEach(sig => process.removeListener(sig, cleanup));\n-        process.kill(process.pid, signal);\n+        process.exit(0);",
        "comment_created_at": "2025-01-20T12:15:49+00:00",
        "comment_author": "thomaschaaf",
        "comment_body": "```\r\nthomaschaaf@MacBookPro sigterm % cat index.js\r\nconsole.log(\"Hello CodeSandbox\");\r\n\r\nprocess.on(\"SIGTERM\", () => {\r\n  console.log(\"SIGTERM received\");\r\n  process.kill(process.pid, \"SIGTERM\");\r\n});\r\n\r\nprocess.on(\"exit\", () => {\r\n  console.log(\"about to exit\");\r\n});\r\n\r\nsetTimeout(() => {\r\n  console.log(\"killing\");\r\n  process.kill(process.pid, \"SIGTERM\");\r\n}, 1000);\r\n\r\nthomaschaaf@MacBookPro sigterm % node index.js\r\nHello CodeSandbox\r\nkilling\r\nSIGTERM received\r\nabout to exit\r\nthomaschaaf@MacBookPro sigterm % node -v\r\nv18.18.2\r\n``` ",
        "pr_file_module": null
      },
      {
        "comment_id": "1922316540",
        "repo_full_name": "nestjs/nest",
        "pr_number": 14433,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "1919688953",
        "commented_code": "@@ -368,7 +368,7 @@ export class NestApplicationContext<\n         await this.dispose();\n         await this.callShutdownHook(signal);\n         signals.forEach(sig => process.removeListener(sig, cleanup));\n-        process.kill(process.pid, signal);\n+        process.exit(0);",
        "comment_created_at": "2025-01-20T12:17:42+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "![image](https://github.com/user-attachments/assets/734ee5f9-ccbf-4330-a059-87879374a61e)\r\n\r\nCode \r\n\r\n```js\r\nconsole.log('Hello Node.js');\r\n\r\nprocess.on('exit', () => {\r\n  console.log('about to exit');\r\n});\r\n\r\nsetTimeout(() => {\r\n  console.log('killing');\r\n  process.kill(process.pid, 'SIGTERM');\r\n}, 1000);\r\n```\r\n\r\nNode v20",
        "pr_file_module": null
      },
      {
        "comment_id": "1922318045",
        "repo_full_name": "nestjs/nest",
        "pr_number": 14433,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "1919688953",
        "commented_code": "@@ -368,7 +368,7 @@ export class NestApplicationContext<\n         await this.dispose();\n         await this.callShutdownHook(signal);\n         signals.forEach(sig => process.removeListener(sig, cleanup));\n-        process.kill(process.pid, signal);\n+        process.exit(0);",
        "comment_created_at": "2025-01-20T12:18:58+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Ah apologies, I forgot to include on SIGTERM listener @thomaschaaf ",
        "pr_file_module": null
      },
      {
        "comment_id": "1922323925",
        "repo_full_name": "nestjs/nest",
        "pr_number": 14433,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "1919688953",
        "commented_code": "@@ -368,7 +368,7 @@ export class NestApplicationContext<\n         await this.dispose();\n         await this.callShutdownHook(signal);\n         signals.forEach(sig => process.removeListener(sig, cleanup));\n-        process.kill(process.pid, signal);\n+        process.exit(0);",
        "comment_created_at": "2025-01-20T12:23:54+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "I still cannot reproduce your issue with the following code:\r\n\r\n```ts\r\nimport { NestFactory } from '@nestjs/core';\r\nimport { AppModule } from './app.module';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  app.enableShutdownHooks();\r\n  await app.listen(3000);\r\n\r\n  console.log(`Application is running on: ${await app.getUrl()}`);\r\n\r\n  process.on('SIGTERM', async () => {\r\n    await app.close();\r\n    console.log('SIGTERM received');\r\n    process.kill(process.pid, 'SIGTERM');\r\n  });\r\n\r\n  process.on('exit', () => {\r\n    console.log('about to exit');\r\n  });\r\n\r\n  setTimeout(() => {\r\n    console.log('killing');\r\n    process.kill(process.pid, 'SIGTERM');\r\n  }, 1000);\r\n}\r\nbootstrap();\r\n```\r\n\r\nWith `node dist/main`:\r\n\r\n```\r\nApplication is running on: http://[::1]:3000\r\nkilling\r\nSIGTERM received\r\nabout to exit\r\n```\r\n\r\n![image](https://github.com/user-attachments/assets/63336e26-2562-456d-8893-e4f3a46adb64)\r\n\r\nWith `nest start`\r\n\r\n![image](https://github.com/user-attachments/assets/dd1829a9-f323-4ab6-b77c-e3fdebdb65f7)\r\n\r\nSame with `nest start --watch` (npm run start:dev)\r\n\r\n![image](https://github.com/user-attachments/assets/446e55d1-44f2-4a22-89e6-11d61279fe50)\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1922325659",
        "repo_full_name": "nestjs/nest",
        "pr_number": 14433,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "1919688953",
        "commented_code": "@@ -368,7 +368,7 @@ export class NestApplicationContext<\n         await this.dispose();\n         await this.callShutdownHook(signal);\n         signals.forEach(sig => process.removeListener(sig, cleanup));\n-        process.kill(process.pid, signal);\n+        process.exit(0);",
        "comment_created_at": "2025-01-20T12:25:11+00:00",
        "comment_author": "thomaschaaf",
        "comment_body": "I know you just released your own json logger - so it might not be your issue.\r\n\r\nIn the end I only care the exit listener because pino is using https://www.npmjs.com/package/on-exit-leak-free to flush the logs in the shutdown scenario to clear the buffers of the logger. Pino is using a worker thread to do the writing to stdout to be more performant. One alternative solution I came up with was calling logger.flush() before the kill. \r\n\r\nhttps://github.com/iamolegga/nestjs-pino/issues/1859 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1922327921",
        "repo_full_name": "nestjs/nest",
        "pr_number": 14433,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "1919688953",
        "commented_code": "@@ -368,7 +368,7 @@ export class NestApplicationContext<\n         await this.dispose();\n         await this.callShutdownHook(signal);\n         signals.forEach(sig => process.removeListener(sig, cleanup));\n-        process.kill(process.pid, signal);\n+        process.exit(0);",
        "comment_created_at": "2025-01-20T12:26:58+00:00",
        "comment_author": "thomaschaaf",
        "comment_body": "I will try out my example again and upload it to github - maybe it's something that got changed with v11\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1922457393",
        "repo_full_name": "nestjs/nest",
        "pr_number": 14433,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "1919688953",
        "commented_code": "@@ -368,7 +368,7 @@ export class NestApplicationContext<\n         await this.dispose();\n         await this.callShutdownHook(signal);\n         signals.forEach(sig => process.removeListener(sig, cleanup));\n-        process.kill(process.pid, signal);\n+        process.exit(0);",
        "comment_created_at": "2025-01-20T14:06:21+00:00",
        "comment_author": "thomaschaaf",
        "comment_body": "I think you accidentally found the issue \ud83e\udd2f \r\n\r\nI created https://github.com/thomaschaaf/debug-nest-js-on-exit you can start it with either\r\n\r\n`SIGTERM=1 ./node_modules/.bin/nest start`\r\n\r\nor \r\n\r\n`SIGTERM=0 ./node_modules/.bin/nest start`\r\n\r\nThis toggles: https://github.com/thomaschaaf/debug-nest-js-on-exit/blob/main/src/main.ts#L30-L33\r\n\r\nI have also added an extra console log in pino: https://github.com/thomaschaaf/debug-nest-js-on-exit/blob/main/node_modules/pino/lib/transport.js#L62\r\n\r\nThe interesting bit is if you have no handler for sigterm the process.on('exit') is not called. I don't understand why.. With the change in the pr it is \"fixed\" but I understand it seems to be more of a workaround. I guess we will just add a handler \r\n\r\n```\r\nprocess.on('SIGTERM', () => {\r\n  // fix 'exit' event not triggered without this.\r\n});\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1923177482",
        "repo_full_name": "nestjs/nest",
        "pr_number": 14433,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "1919688953",
        "commented_code": "@@ -368,7 +368,7 @@ export class NestApplicationContext<\n         await this.dispose();\n         await this.callShutdownHook(signal);\n         signals.forEach(sig => process.removeListener(sig, cleanup));\n-        process.kill(process.pid, signal);\n+        process.exit(0);",
        "comment_created_at": "2025-01-21T07:14:00+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "I can replicate the exact same behavior using plain Node.js (without the Nest framework/CLI), so I'm not sure if there's anything we need to change on our end.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "254014457",
    "pr_number": 754,
    "pr_file": "sample/20-dynamodb-data-mapper-annotations/src/cats/cats.controller.ts",
    "created_at": "2019-02-05T19:33:10+00:00",
    "commented_code": "+import { Controller, Get, Post, Body, Param } from '@nestjs/common';\n+import { CreateCatDto } from './dto/create-cat.dto';\n+import { CatsService } from './cats.service';\n+import { Cat } from './schemas/cat.schema';\n+\n+@Controller('cats')\n+export class CatsController {\n+  constructor(private readonly catsService: CatsService) {}\n+\n+  @Post('createTable')\n+  async createTable() {\n+    await this.catsService.createCatsTable()\n+      .catch(error => console.error(error));",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "254014457",
        "repo_full_name": "nestjs/nest",
        "pr_number": 754,
        "pr_file": "sample/20-dynamodb-data-mapper-annotations/src/cats/cats.controller.ts",
        "discussion_id": "254014457",
        "commented_code": "@@ -0,0 +1,36 @@\n+import { Controller, Get, Post, Body, Param } from '@nestjs/common';\n+import { CreateCatDto } from './dto/create-cat.dto';\n+import { CatsService } from './cats.service';\n+import { Cat } from './schemas/cat.schema';\n+\n+@Controller('cats')\n+export class CatsController {\n+  constructor(private readonly catsService: CatsService) {}\n+\n+  @Post('createTable')\n+  async createTable() {\n+    await this.catsService.createCatsTable()\n+      .catch(error => console.error(error));",
        "comment_created_at": "2019-02-05T19:33:10+00:00",
        "comment_author": "LukvonStrom",
        "comment_body": "I would suggest wrapping this in a try/catch block like this:\r\n```\r\ntry{\r\nawait this.catsService.createCatsTable()\r\n}catch(error){\r\n console.error(error);\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "254015014",
    "pr_number": 754,
    "pr_file": "sample/20-dynamodb-data-mapper-annotations/src/cats/cats.controller.ts",
    "created_at": "2019-02-05T19:34:45+00:00",
    "commented_code": "+import { Controller, Get, Post, Body, Param } from '@nestjs/common';\n+import { CreateCatDto } from './dto/create-cat.dto';\n+import { CatsService } from './cats.service';\n+import { Cat } from './schemas/cat.schema';\n+\n+@Controller('cats')\n+export class CatsController {\n+  constructor(private readonly catsService: CatsService) {}\n+\n+  @Post('createTable')\n+  async createTable() {\n+    await this.catsService.createCatsTable()\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Post('deleteTable')\n+  async deleteTable() {\n+    await this.catsService.deleteCatsTable()\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Post()\n+  async create(@Body() createCatDto: CreateCatDto) {\n+    this.catsService.create(createCatDto)\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Get()\n+  async findAll(): Promise<Cat[]> {\n+    return this.catsService.findAll()\n+      .catch(error => {\n+        console.error(error);\n+        return [];",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "254015014",
        "repo_full_name": "nestjs/nest",
        "pr_number": 754,
        "pr_file": "sample/20-dynamodb-data-mapper-annotations/src/cats/cats.controller.ts",
        "discussion_id": "254015014",
        "commented_code": "@@ -0,0 +1,36 @@\n+import { Controller, Get, Post, Body, Param } from '@nestjs/common';\n+import { CreateCatDto } from './dto/create-cat.dto';\n+import { CatsService } from './cats.service';\n+import { Cat } from './schemas/cat.schema';\n+\n+@Controller('cats')\n+export class CatsController {\n+  constructor(private readonly catsService: CatsService) {}\n+\n+  @Post('createTable')\n+  async createTable() {\n+    await this.catsService.createCatsTable()\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Post('deleteTable')\n+  async deleteTable() {\n+    await this.catsService.deleteCatsTable()\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Post()\n+  async create(@Body() createCatDto: CreateCatDto) {\n+    this.catsService.create(createCatDto)\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Get()\n+  async findAll(): Promise<Cat[]> {\n+    return this.catsService.findAll()\n+      .catch(error => {\n+        console.error(error);\n+        return [];",
        "comment_created_at": "2019-02-05T19:34:45+00:00",
        "comment_author": "LukvonStrom",
        "comment_body": "I would suggest the use of await here: \r\n```\r\ntry{\r\n return await this.catsService.findAll()\r\n}catch(error){\r\n console.error(error);\r\n return [];\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "254019088",
        "repo_full_name": "nestjs/nest",
        "pr_number": 754,
        "pr_file": "sample/20-dynamodb-data-mapper-annotations/src/cats/cats.controller.ts",
        "discussion_id": "254015014",
        "commented_code": "@@ -0,0 +1,36 @@\n+import { Controller, Get, Post, Body, Param } from '@nestjs/common';\n+import { CreateCatDto } from './dto/create-cat.dto';\n+import { CatsService } from './cats.service';\n+import { Cat } from './schemas/cat.schema';\n+\n+@Controller('cats')\n+export class CatsController {\n+  constructor(private readonly catsService: CatsService) {}\n+\n+  @Post('createTable')\n+  async createTable() {\n+    await this.catsService.createCatsTable()\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Post('deleteTable')\n+  async deleteTable() {\n+    await this.catsService.deleteCatsTable()\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Post()\n+  async create(@Body() createCatDto: CreateCatDto) {\n+    this.catsService.create(createCatDto)\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Get()\n+  async findAll(): Promise<Cat[]> {\n+    return this.catsService.findAll()\n+      .catch(error => {\n+        console.error(error);\n+        return [];",
        "comment_created_at": "2019-02-05T19:45:33+00:00",
        "comment_author": "cojack",
        "comment_body": "Even, better, point to the docs, where is explained, how to properly catch exception using exception interceptor.",
        "pr_file_module": null
      },
      {
        "comment_id": "254020822",
        "repo_full_name": "nestjs/nest",
        "pr_number": 754,
        "pr_file": "sample/20-dynamodb-data-mapper-annotations/src/cats/cats.controller.ts",
        "discussion_id": "254015014",
        "commented_code": "@@ -0,0 +1,36 @@\n+import { Controller, Get, Post, Body, Param } from '@nestjs/common';\n+import { CreateCatDto } from './dto/create-cat.dto';\n+import { CatsService } from './cats.service';\n+import { Cat } from './schemas/cat.schema';\n+\n+@Controller('cats')\n+export class CatsController {\n+  constructor(private readonly catsService: CatsService) {}\n+\n+  @Post('createTable')\n+  async createTable() {\n+    await this.catsService.createCatsTable()\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Post('deleteTable')\n+  async deleteTable() {\n+    await this.catsService.deleteCatsTable()\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Post()\n+  async create(@Body() createCatDto: CreateCatDto) {\n+    this.catsService.create(createCatDto)\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Get()\n+  async findAll(): Promise<Cat[]> {\n+    return this.catsService.findAll()\n+      .catch(error => {\n+        console.error(error);\n+        return [];",
        "comment_created_at": "2019-02-05T19:50:20+00:00",
        "comment_author": "LukvonStrom",
        "comment_body": "Oh shoot, I totally forgot about that \ud83d\ude48 that may be even better!",
        "pr_file_module": null
      },
      {
        "comment_id": "276029561",
        "repo_full_name": "nestjs/nest",
        "pr_number": 754,
        "pr_file": "sample/20-dynamodb-data-mapper-annotations/src/cats/cats.controller.ts",
        "discussion_id": "254015014",
        "commented_code": "@@ -0,0 +1,36 @@\n+import { Controller, Get, Post, Body, Param } from '@nestjs/common';\n+import { CreateCatDto } from './dto/create-cat.dto';\n+import { CatsService } from './cats.service';\n+import { Cat } from './schemas/cat.schema';\n+\n+@Controller('cats')\n+export class CatsController {\n+  constructor(private readonly catsService: CatsService) {}\n+\n+  @Post('createTable')\n+  async createTable() {\n+    await this.catsService.createCatsTable()\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Post('deleteTable')\n+  async deleteTable() {\n+    await this.catsService.deleteCatsTable()\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Post()\n+  async create(@Body() createCatDto: CreateCatDto) {\n+    this.catsService.create(createCatDto)\n+      .catch(error => console.error(error));\n+  }\n+\n+  @Get()\n+  async findAll(): Promise<Cat[]> {\n+    return this.catsService.findAll()\n+      .catch(error => {\n+        console.error(error);\n+        return [];",
        "comment_created_at": "2019-04-16T23:25:06+00:00",
        "comment_author": "CoreyCole",
        "comment_body": "added link to documentation https://github.com/CoreyCole/nest/commit/a8ea4e981a485d8e1e4967d195ce480f41d4e1e1",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "397664863",
    "pr_number": 4404,
    "pr_file": "packages/common/pipes/parse-array.pipe.ts",
    "created_at": "2020-03-25T08:00:29+00:00",
    "commented_code": "...options,\n     });\n \n-    const { exceptionFactory } = options;\n+    const {\n+      exceptionFactory,\n+      exceptionCode = HttpStatus.BAD_REQUEST,\n+    } = options;\n     this.exceptionFactory =\n-      exceptionFactory || (error => new BadRequestException(error));\n+      exceptionFactory ||\n+      (error => HttpException.createException(error, exceptionCode));",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "397664863",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4404,
        "pr_file": "packages/common/pipes/parse-array.pipe.ts",
        "discussion_id": "397664863",
        "commented_code": "@@ -42,9 +43,13 @@ export class ParseArrayPipe implements PipeTransform {\n       ...options,\n     });\n \n-    const { exceptionFactory } = options;\n+    const {\n+      exceptionFactory,\n+      exceptionCode = HttpStatus.BAD_REQUEST,\n+    } = options;\n     this.exceptionFactory =\n-      exceptionFactory || (error => new BadRequestException(error));\n+      exceptionFactory ||\n+      (error => HttpException.createException(error, exceptionCode));",
        "comment_created_at": "2020-03-25T08:00:29+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "Wouldn't it be easier to define an object in which keys represent status codes and their values = classes of corresponding exceptions? e.g. `new HttpErrorByCode[statusCode](error)`?",
        "pr_file_module": null
      },
      {
        "comment_id": "397708342",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4404,
        "pr_file": "packages/common/pipes/parse-array.pipe.ts",
        "discussion_id": "397664863",
        "commented_code": "@@ -42,9 +43,13 @@ export class ParseArrayPipe implements PipeTransform {\n       ...options,\n     });\n \n-    const { exceptionFactory } = options;\n+    const {\n+      exceptionFactory,\n+      exceptionCode = HttpStatus.BAD_REQUEST,\n+    } = options;\n     this.exceptionFactory =\n-      exceptionFactory || (error => new BadRequestException(error));\n+      exceptionFactory ||\n+      (error => HttpException.createException(error, exceptionCode));",
        "comment_created_at": "2020-03-25T09:21:38+00:00",
        "comment_author": "Dominic-Preap",
        "comment_body": "Does it looks OK? If so, where should I put this snippet (cannot put it `http-status.enum` for sure, or should I create a new file `http-error-by-code.util.ts` in utlis directory )?\r\n\r\n```ts\r\nconst getException = (\r\n  err: string | object,\r\n  message: string,\r\n  statusCode: HttpStatus,\r\n) =>\r\n  new HttpException(\r\n    HttpException.createBody(err, message, statusCode),\r\n    statusCode,\r\n  );\r\n\r\nexport const HttpErrorByCode: HttpErrorByCode = {\r\n  [HttpStatus.CONTINUE]: (err, message = 'Continue') =>\r\n    getException(err, message, HttpStatus.CONTINUE),\r\n\r\n  [HttpStatus.SWITCHING_PROTOCOLS]: (err, message = 'Switching Protocols') =>\r\n    getException(err, message, HttpStatus.SWITCHING_PROTOCOLS),\r\n\r\n  [HttpStatus.PROCESSING]: (err, message = 'Processing') =>\r\n    getException(err, message, HttpStatus.PROCESSING),\r\n};\r\n```\r\n\r\n```ts\r\n// example in used pipe.ts\r\nthis.exceptionFactory = (errors => HttpErrorByCode[this.exceptionCode](errors));\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "397712794",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4404,
        "pr_file": "packages/common/pipes/parse-array.pipe.ts",
        "discussion_id": "397664863",
        "commented_code": "@@ -42,9 +43,13 @@ export class ParseArrayPipe implements PipeTransform {\n       ...options,\n     });\n \n-    const { exceptionFactory } = options;\n+    const {\n+      exceptionFactory,\n+      exceptionCode = HttpStatus.BAD_REQUEST,\n+    } = options;\n     this.exceptionFactory =\n-      exceptionFactory || (error => new BadRequestException(error));\n+      exceptionFactory ||\n+      (error => HttpException.createException(error, exceptionCode));",
        "comment_created_at": "2020-03-25T09:28:41+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "This:\r\n\r\n```typescript\r\nexport const HttpErrorByCode = {\r\n  [HttpStatus.BAD_REQUEST]: BadRequestException,\r\n  [HttpStatus.UNPROCESSABLE_ENTITY]: UnprocessableEntityException,\r\n```\r\nand:\r\n```typescript\r\nthis.exceptionFactory = (errors => new HttpErrorByCode[this.exceptionCode](errors));\r\n```\r\nshould be enough :) Any additional method/function which leverages `HttpException` is not needed. In addition, we shouldn't allow using `OK` or `CREATED` status. Let's just define an union with error status codes that can be used, e.g.:\r\n\r\n```typescript\r\nexport type ErrorHttpStatusCode = HttpStatus.BAD_REQUEST | HttpStatus.UNPROCESSABLE_ENTITY | etc.\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "397753268",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4404,
        "pr_file": "packages/common/pipes/parse-array.pipe.ts",
        "discussion_id": "397664863",
        "commented_code": "@@ -42,9 +43,13 @@ export class ParseArrayPipe implements PipeTransform {\n       ...options,\n     });\n \n-    const { exceptionFactory } = options;\n+    const {\n+      exceptionFactory,\n+      exceptionCode = HttpStatus.BAD_REQUEST,\n+    } = options;\n     this.exceptionFactory =\n-      exceptionFactory || (error => new BadRequestException(error));\n+      exceptionFactory ||\n+      (error => HttpException.createException(error, exceptionCode));",
        "comment_created_at": "2020-03-25T10:34:21+00:00",
        "comment_author": "Dominic-Preap",
        "comment_body": "it is done.",
        "pr_file_module": null
      }
    ]
  }
]