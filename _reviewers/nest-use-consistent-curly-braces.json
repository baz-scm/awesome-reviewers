[
  {
    "discussion_id": "1097090753",
    "pr_number": 11044,
    "pr_file": "packages/common/pipes/file/parse-file.pipe.ts",
    "created_at": "2023-02-06T08:49:14+00:00",
    "commented_code": "}\n \n   async transform(value: any): Promise<any> {\n-    if (this.thereAreNoFilesIn(value)) {\n-      if (this.fileIsRequired) {\n-        throw this.exceptionFactory('File is required');\n-      }\n-      return value;\n-    }\n+    const areThereNoFileIn = this.thereAreNoFilesIn(value);\n \n-    if (this.validators.length) {\n-      if (Array.isArray(value)) {\n-        await this.validateFiles(value);\n-      } else {\n-        await this.validate(value);\n-      }\n-    }\n+    if (areThereNoFileIn && this.fileIsRequired)\n+      throw this.exceptionFactory('File is required');\n+\n+    if (!areThereNoFileIn && this.validators.length)\n+      await this.validateFilesOrFile(value);",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1097090753",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11044,
        "pr_file": "packages/common/pipes/file/parse-file.pipe.ts",
        "discussion_id": "1097090753",
        "commented_code": "@@ -39,26 +39,23 @@ export class ParseFilePipe implements PipeTransform<any> {\n   }\n \n   async transform(value: any): Promise<any> {\n-    if (this.thereAreNoFilesIn(value)) {\n-      if (this.fileIsRequired) {\n-        throw this.exceptionFactory('File is required');\n-      }\n-      return value;\n-    }\n+    const areThereNoFileIn = this.thereAreNoFilesIn(value);\n \n-    if (this.validators.length) {\n-      if (Array.isArray(value)) {\n-        await this.validateFiles(value);\n-      } else {\n-        await this.validate(value);\n-      }\n-    }\n+    if (areThereNoFileIn && this.fileIsRequired)\n+      throw this.exceptionFactory('File is required');\n+\n+    if (!areThereNoFileIn && this.validators.length)\n+      await this.validateFilesOrFile(value);",
        "comment_created_at": "2023-02-06T08:49:14+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "To remain consistent with the rest of the codebase\r\n```suggestion\r\n    if (areThereNoFileIn && this.fileIsRequired) {\r\n      throw this.exceptionFactory('File is required');\r\n    }\r\n    if (!areThereNoFileIn && this.validators.length) {\r\n      await this.validateFilesOrFile(value);\r\n    }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1097128207",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11044,
        "pr_file": "packages/common/pipes/file/parse-file.pipe.ts",
        "discussion_id": "1097090753",
        "commented_code": "@@ -39,26 +39,23 @@ export class ParseFilePipe implements PipeTransform<any> {\n   }\n \n   async transform(value: any): Promise<any> {\n-    if (this.thereAreNoFilesIn(value)) {\n-      if (this.fileIsRequired) {\n-        throw this.exceptionFactory('File is required');\n-      }\n-      return value;\n-    }\n+    const areThereNoFileIn = this.thereAreNoFilesIn(value);\n \n-    if (this.validators.length) {\n-      if (Array.isArray(value)) {\n-        await this.validateFiles(value);\n-      } else {\n-        await this.validate(value);\n-      }\n-    }\n+    if (areThereNoFileIn && this.fileIsRequired)\n+      throw this.exceptionFactory('File is required');\n+\n+    if (!areThereNoFileIn && this.validators.length)\n+      await this.validateFilesOrFile(value);",
        "comment_created_at": "2023-02-06T09:24:49+00:00",
        "comment_author": "mohamadrezamomeni",
        "comment_body": "thank you for reviewing my code :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1095428876",
    "pr_number": 11023,
    "pr_file": "packages/core/injector/module-token-factory.ts",
    "created_at": "2023-02-03T07:21:12+00:00",
    "commented_code": "import { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\n import { isFunction, isSymbol } from '@nestjs/common/utils/shared.utils';\n import stringify from 'fast-safe-stringify';\n-import * as hash from 'object-hash';\n+import { createHash } from 'crypto';\n+\n+const checkClass = 'class ';\n+const checkClassLength = checkClass.length;\n \n export class ModuleTokenFactory {\n+  private readonly moduleTokenCache = new Map<string, string>();\n   private readonly moduleIdsCache = new WeakMap<Type<unknown>, string>();\n \n   public create(\n     metatype: Type<unknown>,\n     dynamicModuleMetadata?: Partial<DynamicModule> | undefined,\n   ): string {\n     const moduleId = this.getModuleId(metatype);\n+\n+    if (!dynamicModuleMetadata)\n+      return this.getFastModuleToken(moduleId, this.getModuleName(metatype));\n+\n     const opaqueToken = {\n       id: moduleId,\n       module: this.getModuleName(metatype),\n-      dynamic: this.getDynamicMetadataToken(dynamicModuleMetadata),\n+      dynamic: dynamicModuleMetadata ? dynamicModuleMetadata : '',\n     };\n-    return hash(opaqueToken, { ignoreUnknown: true });\n+    const opaqueTokenString = this.getStringifiedOpaqueToken(opaqueToken);\n+\n+    return this.hashString(opaqueTokenString);\n   }\n \n-  public getDynamicMetadataToken(\n-    dynamicModuleMetadata: Partial<DynamicModule> | undefined,\n-  ): string {\n+  public getFastModuleToken(moduleId: string, moduleName: string): string {\n+    const key = `${moduleId}_${moduleName}`;\n+\n+    if (this.moduleTokenCache.has(key)) return this.moduleTokenCache.get(key);",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1095428876",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11023,
        "pr_file": "packages/core/injector/module-token-factory.ts",
        "discussion_id": "1095428876",
        "commented_code": "@@ -3,33 +3,51 @@ import { Type } from '@nestjs/common/interfaces/type.interface';\n import { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\n import { isFunction, isSymbol } from '@nestjs/common/utils/shared.utils';\n import stringify from 'fast-safe-stringify';\n-import * as hash from 'object-hash';\n+import { createHash } from 'crypto';\n+\n+const checkClass = 'class ';\n+const checkClassLength = checkClass.length;\n \n export class ModuleTokenFactory {\n+  private readonly moduleTokenCache = new Map<string, string>();\n   private readonly moduleIdsCache = new WeakMap<Type<unknown>, string>();\n \n   public create(\n     metatype: Type<unknown>,\n     dynamicModuleMetadata?: Partial<DynamicModule> | undefined,\n   ): string {\n     const moduleId = this.getModuleId(metatype);\n+\n+    if (!dynamicModuleMetadata)\n+      return this.getFastModuleToken(moduleId, this.getModuleName(metatype));\n+\n     const opaqueToken = {\n       id: moduleId,\n       module: this.getModuleName(metatype),\n-      dynamic: this.getDynamicMetadataToken(dynamicModuleMetadata),\n+      dynamic: dynamicModuleMetadata ? dynamicModuleMetadata : '',\n     };\n-    return hash(opaqueToken, { ignoreUnknown: true });\n+    const opaqueTokenString = this.getStringifiedOpaqueToken(opaqueToken);\n+\n+    return this.hashString(opaqueTokenString);\n   }\n \n-  public getDynamicMetadataToken(\n-    dynamicModuleMetadata: Partial<DynamicModule> | undefined,\n-  ): string {\n+  public getFastModuleToken(moduleId: string, moduleName: string): string {\n+    const key = `${moduleId}_${moduleName}`;\n+\n+    if (this.moduleTokenCache.has(key)) return this.moduleTokenCache.get(key);",
        "comment_created_at": "2023-02-03T07:21:12+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "nit(style): can we use if { } instead of inline ifs? just for the sake of consistency with the rest of the codebase",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "762442396",
    "pr_number": 8738,
    "pr_file": "packages/core/nest-application-context.ts",
    "created_at": "2021-12-04T16:31:04+00:00",
    "commented_code": "public useLogger(logger: LoggerService | LogLevel[] | false) {\n     Logger.overrideLogger(logger);\n+\n+    if (this.flushLogsOnOverride) this.flushLogs();",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "762442396",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8738,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "762442396",
        "commented_code": "@@ -131,12 +133,18 @@ export class NestApplicationContext implements INestApplicationContext {\n \n   public useLogger(logger: LoggerService | LogLevel[] | false) {\n     Logger.overrideLogger(logger);\n+\n+    if (this.flushLogsOnOverride) this.flushLogs();",
        "comment_created_at": "2021-12-04T16:31:04+00:00",
        "comment_author": "jmcdo29",
        "comment_body": "Would you mind updating the code to wrap the internals of the if in curly braces? It leads the code to be easier to follow and modify if we need to\r\n\r\n```suggestion\r\n    if (this.flushLogsOnOverride) {\r\n      this.flushLogs();\r\n    }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "762456917",
        "repo_full_name": "nestjs/nest",
        "pr_number": 8738,
        "pr_file": "packages/core/nest-application-context.ts",
        "discussion_id": "762442396",
        "commented_code": "@@ -131,12 +133,18 @@ export class NestApplicationContext implements INestApplicationContext {\n \n   public useLogger(logger: LoggerService | LogLevel[] | false) {\n     Logger.overrideLogger(logger);\n+\n+    if (this.flushLogsOnOverride) this.flushLogs();",
        "comment_created_at": "2021-12-04T19:14:59+00:00",
        "comment_author": "micalevisk",
        "comment_body": "I prefer your way tbh. I thought `npm run lint:fix` would fix that :p",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "487176413",
    "pr_number": 4842,
    "pr_file": "packages/core/services/sse-stream.service.ts",
    "created_at": "2020-09-11T17:06:39+00:00",
    "commented_code": "encoding: string,\n     callback: (error?: Error | null, data?: any) => void,\n   ) {\n-    if (message.type) this.push(`event: ${message.type}\n`);\n-    if (message.id) this.push(`id: ${message.id}\n`);\n-    if (message.retry) this.push(`retry: ${message.retry}\n`);\n-    if (message.data) this.push(toDataString(message.data));\n-    this.push('\n');\n+    let data = '';\n+    if (message.type) data += `event: ${message.type}\n`;\n+    if (message.id) data += `id: ${message.id}\n`;\n+    if (message.retry) data += `retry: ${message.retry}\n`;\n+    if (message.data) data += toDataString(message.data);",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "487176413",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4842,
        "pr_file": "packages/core/services/sse-stream.service.ts",
        "discussion_id": "487176413",
        "commented_code": "@@ -74,24 +74,32 @@ export class SseStream extends Transform {\n     encoding: string,\n     callback: (error?: Error | null, data?: any) => void,\n   ) {\n-    if (message.type) this.push(`event: ${message.type}\\n`);\n-    if (message.id) this.push(`id: ${message.id}\\n`);\n-    if (message.retry) this.push(`retry: ${message.retry}\\n`);\n-    if (message.data) this.push(toDataString(message.data));\n-    this.push('\\n');\n+    let data = '';\n+    if (message.type) data += `event: ${message.type}\\n`;\n+    if (message.id) data += `id: ${message.id}\\n`;\n+    if (message.retry) data += `retry: ${message.retry}\\n`;\n+    if (message.data) data += toDataString(message.data);",
        "comment_created_at": "2020-09-11T17:06:39+00:00",
        "comment_author": "jmcdo29",
        "comment_body": "If these are going to be single line ifs, would a ternary make more sense?\r\n```\r\ndata += message.type ? `event: ${message.type}\\n` : ''\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "487188134",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4842,
        "pr_file": "packages/core/services/sse-stream.service.ts",
        "discussion_id": "487176413",
        "commented_code": "@@ -74,24 +74,32 @@ export class SseStream extends Transform {\n     encoding: string,\n     callback: (error?: Error | null, data?: any) => void,\n   ) {\n-    if (message.type) this.push(`event: ${message.type}\\n`);\n-    if (message.id) this.push(`id: ${message.id}\\n`);\n-    if (message.retry) this.push(`retry: ${message.retry}\\n`);\n-    if (message.data) this.push(toDataString(message.data));\n-    this.push('\\n');\n+    let data = '';\n+    if (message.type) data += `event: ${message.type}\\n`;\n+    if (message.id) data += `id: ${message.id}\\n`;\n+    if (message.retry) data += `retry: ${message.retry}\\n`;\n+    if (message.data) data += toDataString(message.data);",
        "comment_created_at": "2020-09-11T17:29:57+00:00",
        "comment_author": "soyuka",
        "comment_body": "But then you have a useless else part, I'm find with both implementations though. ",
        "pr_file_module": null
      },
      {
        "comment_id": "487193037",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4842,
        "pr_file": "packages/core/services/sse-stream.service.ts",
        "discussion_id": "487176413",
        "commented_code": "@@ -74,24 +74,32 @@ export class SseStream extends Transform {\n     encoding: string,\n     callback: (error?: Error | null, data?: any) => void,\n   ) {\n-    if (message.type) this.push(`event: ${message.type}\\n`);\n-    if (message.id) this.push(`id: ${message.id}\\n`);\n-    if (message.retry) this.push(`retry: ${message.retry}\\n`);\n-    if (message.data) this.push(toDataString(message.data));\n-    this.push('\\n');\n+    let data = '';\n+    if (message.type) data += `event: ${message.type}\\n`;\n+    if (message.id) data += `id: ${message.id}\\n`;\n+    if (message.retry) data += `retry: ${message.retry}\\n`;\n+    if (message.data) data += toDataString(message.data);",
        "comment_created_at": "2020-09-11T17:39:45+00:00",
        "comment_author": "jmcdo29",
        "comment_body": "Personally, I'm not a fan of inline ifs, so if we stay with using `if` statements it should be changed to\r\n```ts\r\nif (message.type) {\r\n  data += `event: ${message.type}\\n`;\r\n}\r\n```\r\nAnd this is what most of Nest's codebase does already even for single line. So ternary, or using braces as necessary should be fine. Just to stay consistent with the rest of the codebase",
        "pr_file_module": null
      },
      {
        "comment_id": "487395824",
        "repo_full_name": "nestjs/nest",
        "pr_number": 4842,
        "pr_file": "packages/core/services/sse-stream.service.ts",
        "discussion_id": "487176413",
        "commented_code": "@@ -74,24 +74,32 @@ export class SseStream extends Transform {\n     encoding: string,\n     callback: (error?: Error | null, data?: any) => void,\n   ) {\n-    if (message.type) this.push(`event: ${message.type}\\n`);\n-    if (message.id) this.push(`id: ${message.id}\\n`);\n-    if (message.retry) this.push(`retry: ${message.retry}\\n`);\n-    if (message.data) this.push(toDataString(message.data));\n-    this.push('\\n');\n+    let data = '';\n+    if (message.type) data += `event: ${message.type}\\n`;\n+    if (message.id) data += `id: ${message.id}\\n`;\n+    if (message.retry) data += `retry: ${message.retry}\\n`;\n+    if (message.data) data += toDataString(message.data);",
        "comment_created_at": "2020-09-12T10:36:36+00:00",
        "comment_author": "soyuka",
        "comment_body": "fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "226092179",
    "pr_number": 1199,
    "pr_file": "packages/core/exceptions/exceptions-handler.ts",
    "created_at": "2018-10-17T20:59:01+00:00",
    "commented_code": "}\n \n   public next(exception: Error | HttpException | any, ctx: ArgumentsHost) {\n-    if (this.invokeCustomFilters(exception, ctx)) {\n-      return void 0;\n-    }\n+    if (this.invokeCustomFilters(exception, ctx)) return;",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "226092179",
        "repo_full_name": "nestjs/nest",
        "pr_number": 1199,
        "pr_file": "packages/core/exceptions/exceptions-handler.ts",
        "discussion_id": "226092179",
        "commented_code": "@@ -13,9 +13,7 @@ export class ExceptionsHandler extends BaseExceptionFilter {\n   }\n \n   public next(exception: Error | HttpException | any, ctx: ArgumentsHost) {\n-    if (this.invokeCustomFilters(exception, ctx)) {\n-      return void 0;\n-    }\n+    if (this.invokeCustomFilters(exception, ctx)) return;",
        "comment_created_at": "2018-10-17T20:59:01+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "even though `void 0` is not necessarily required, please, let's stick with `{ ... }` at least",
        "pr_file_module": null
      },
      {
        "comment_id": "226093674",
        "repo_full_name": "nestjs/nest",
        "pr_number": 1199,
        "pr_file": "packages/core/exceptions/exceptions-handler.ts",
        "discussion_id": "226092179",
        "commented_code": "@@ -13,9 +13,7 @@ export class ExceptionsHandler extends BaseExceptionFilter {\n   }\n \n   public next(exception: Error | HttpException | any, ctx: ArgumentsHost) {\n-    if (this.invokeCustomFilters(exception, ctx)) {\n-      return void 0;\n-    }\n+    if (this.invokeCustomFilters(exception, ctx)) return;",
        "comment_created_at": "2018-10-17T21:03:06+00:00",
        "comment_author": "jbpionnier",
        "comment_body": "yes of course",
        "pr_file_module": null
      }
    ]
  }
]