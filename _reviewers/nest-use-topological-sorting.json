[
  {
    "discussion_id": "1111573097",
    "pr_number": 11133,
    "pr_file": "packages/core/middleware/middleware-module.ts",
    "created_at": "2023-02-20T07:34:41+00:00",
    "commented_code": "}\n     };\n \n-    const entriesSortedByDistance = [...configs.entries()].sort(\n-      ([moduleA], [moduleB]) => {\n-        return (\n-          this.container.getModuleByKey(moduleA).distance -\n-          this.container.getModuleByKey(moduleB).distance\n-        );\n-      },\n-    );\n-    for (const [moduleRef, moduleConfigurations] of entriesSortedByDistance) {\n+    for (const [moduleRef, moduleConfigurations] of configs.entries()) {",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "1111573097",
        "repo_full_name": "nestjs/nest",
        "pr_number": 11133,
        "pr_file": "packages/core/middleware/middleware-module.ts",
        "discussion_id": "1111573097",
        "commented_code": "@@ -145,15 +145,7 @@ export class MiddlewareModule<\n       }\n     };\n \n-    const entriesSortedByDistance = [...configs.entries()].sort(\n-      ([moduleA], [moduleB]) => {\n-        return (\n-          this.container.getModuleByKey(moduleA).distance -\n-          this.container.getModuleByKey(moduleB).distance\n-        );\n-      },\n-    );\n-    for (const [moduleRef, moduleConfigurations] of entriesSortedByDistance) {\n+    for (const [moduleRef, moduleConfigurations] of configs.entries()) {",
        "comment_created_at": "2023-02-20T07:34:41+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "This would introduce a major breaking change. Modules are supposed to be sorted by distance",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "298699166",
    "pr_number": 2460,
    "pr_file": "packages/core/scanner.ts",
    "created_at": "2019-06-28T18:13:19+00:00",
    "commented_code": "}\n \n   public async scanModulesForDependencies() {\n-    const modules = this.container.getModules();\n+    const modules = [...this.container.getModules()].reverse();",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "298699166",
        "repo_full_name": "nestjs/nest",
        "pr_number": 2460,
        "pr_file": "packages/core/scanner.ts",
        "discussion_id": "298699166",
        "commented_code": "@@ -98,7 +98,7 @@ export class DependenciesScanner {\n   }\n \n   public async scanModulesForDependencies() {\n-    const modules = this.container.getModules();\n+    const modules = [...this.container.getModules()].reverse();",
        "comment_created_at": "2019-06-28T18:13:19+00:00",
        "comment_author": "BrunnerLivio",
        "comment_body": "same here.",
        "pr_file_module": null
      },
      {
        "comment_id": "298914246",
        "repo_full_name": "nestjs/nest",
        "pr_number": 2460,
        "pr_file": "packages/core/scanner.ts",
        "discussion_id": "298699166",
        "commented_code": "@@ -98,7 +98,7 @@ export class DependenciesScanner {\n   }\n \n   public async scanModulesForDependencies() {\n-    const modules = this.container.getModules();\n+    const modules = [...this.container.getModules()].reverse();",
        "comment_created_at": "2019-07-01T07:35:18+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "This change may lead to very tricky side-effects. Is there any way to somehow avoid this?",
        "pr_file_module": null
      },
      {
        "comment_id": "299144001",
        "repo_full_name": "nestjs/nest",
        "pr_number": 2460,
        "pr_file": "packages/core/scanner.ts",
        "discussion_id": "298699166",
        "commented_code": "@@ -98,7 +98,7 @@ export class DependenciesScanner {\n   }\n \n   public async scanModulesForDependencies() {\n-    const modules = this.container.getModules();\n+    const modules = [...this.container.getModules()].reverse();",
        "comment_created_at": "2019-07-01T17:25:28+00:00",
        "comment_author": "BrunnerLivio",
        "comment_body": "A [Topological Sort Algorithm](https://en.wikipedia.org/wiki/Topological_sorting) would do the trick I guess.\r\n\r\nFor example, let's say `ModuleA` imports `ModuleB`.\r\n\r\n```\r\n\r\n+---------+\r\n|         |\r\n| ModuleB |\r\n|         |\r\n+---------+\r\n     ^\r\n     |\r\n+---------+\r\n|         |\r\n| ModuleA |\r\n|         |\r\n+---------+\r\n\r\n```\r\n\r\n`ModuleB` would need to reflect its provider first.\r\n\r\nFor the multi-provider this is relevant because in case `ModuleA` adds a multi-provider, it needs to check whether `ModuleB` has already a provider with that token. Therefore `ModuleB` needs to have reflected providers/exports already.\r\n\r\nDoes that make sense? If you would agree on something like this, I would suggest I create a new PR, so this PR gets not too large. \r\n\r\n<sup>Finally found a real-world use-case where I'd need to implement an algorithm which was taught me in school :laughing: :tada:  </sup> \r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "299316680",
        "repo_full_name": "nestjs/nest",
        "pr_number": 2460,
        "pr_file": "packages/core/scanner.ts",
        "discussion_id": "298699166",
        "commented_code": "@@ -98,7 +98,7 @@ export class DependenciesScanner {\n   }\n \n   public async scanModulesForDependencies() {\n-    const modules = this.container.getModules();\n+    const modules = [...this.container.getModules()].reverse();",
        "comment_created_at": "2019-07-02T06:16:42+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "What about circular dependencies? ðŸ˜„ ",
        "pr_file_module": null
      },
      {
        "comment_id": "300170603",
        "repo_full_name": "nestjs/nest",
        "pr_number": 2460,
        "pr_file": "packages/core/scanner.ts",
        "discussion_id": "298699166",
        "commented_code": "@@ -98,7 +98,7 @@ export class DependenciesScanner {\n   }\n \n   public async scanModulesForDependencies() {\n-    const modules = this.container.getModules();\n+    const modules = [...this.container.getModules()].reverse();",
        "comment_created_at": "2019-07-03T22:09:28+00:00",
        "comment_author": "BrunnerLivio",
        "comment_body": "Oh... circular module dependencies are actually a huge issue for my current implementation. Should have taken this earlier in consideration. Will probably have to run for a new strategy. Once again :(\r\n\r\nThanks for asking the right questions :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "298564844",
    "pr_number": 2406,
    "pr_file": "packages/core/injector/module.ts",
    "created_at": "2019-06-28T12:00:54+00:00",
    "commented_code": "return this._metatype;\n   }\n \n+  get distance(): number {\n+    return this._distance;\n+  }\n+\n+  set distance(distance: number){\n+    this._distance = distance;\n+    this._imports.forEach((module) => module.distance = distance + 1);",
    "repo_full_name": "nestjs/nest",
    "discussion_comments": [
      {
        "comment_id": "298564844",
        "repo_full_name": "nestjs/nest",
        "pr_number": 2406,
        "pr_file": "packages/core/injector/module.ts",
        "discussion_id": "298564844",
        "commented_code": "@@ -113,6 +114,15 @@ export class Module {\n     return this._metatype;\n   }\n \n+  get distance(): number {\n+    return this._distance;\n+  }\n+\n+  set distance(distance: number){\n+    this._distance = distance;\n+    this._imports.forEach((module) => module.distance = distance + 1);",
        "comment_created_at": "2019-06-28T12:00:54+00:00",
        "comment_author": "kamilmysliwiec",
        "comment_body": "What if the single module is imported by multiple modules that will override `distance` value several times?",
        "pr_file_module": null
      },
      {
        "comment_id": "298785051",
        "repo_full_name": "nestjs/nest",
        "pr_number": 2406,
        "pr_file": "packages/core/injector/module.ts",
        "discussion_id": "298564844",
        "commented_code": "@@ -113,6 +114,15 @@ export class Module {\n     return this._metatype;\n   }\n \n+  get distance(): number {\n+    return this._distance;\n+  }\n+\n+  set distance(distance: number){\n+    this._distance = distance;\n+    this._imports.forEach((module) => module.distance = distance + 1);",
        "comment_created_at": "2019-06-29T02:47:14+00:00",
        "comment_author": "underfin",
        "comment_body": "```\r\npublic addRelatedModule(module: Module) {\r\n    this._imports.add(module);\r\n    module.distance = this._distance + 1 > module._distance ? this._distance + 1 : module._distance;\r\n  }\r\n```\r\nThe single module distance will check distance when  it is imported by multiple modules.If the distance less than the distance that imported module + 1, it will be updated.",
        "pr_file_module": null
      }
    ]
  }
]