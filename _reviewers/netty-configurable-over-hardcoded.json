[
  {
    "discussion_id": "2059003115",
    "pr_number": 15005,
    "pr_file": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/compression/WebSocketClientCompressionHandler.java",
    "created_at": "2025-04-24T18:21:45+00:00",
    "commented_code": "@ChannelHandler.Sharable\n public final class WebSocketClientCompressionHandler extends WebSocketClientExtensionHandler {\n \n+    private static final int MAX_ALLOCATION = 1024 * 1024 * 10;",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "2059003115",
        "repo_full_name": "netty/netty",
        "pr_number": 15005,
        "pr_file": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/compression/WebSocketClientCompressionHandler.java",
        "discussion_id": "2059003115",
        "commented_code": "@@ -27,12 +27,14 @@\n @ChannelHandler.Sharable\n public final class WebSocketClientCompressionHandler extends WebSocketClientExtensionHandler {\n \n+    private static final int MAX_ALLOCATION = 1024 * 1024 * 10;",
        "comment_created_at": "2025-04-24T18:21:45+00:00",
        "comment_author": "chrisvest",
        "comment_body": "Why was 10 MiB chosen as the limit? Is this something people might want to make configurable?",
        "pr_file_module": null
      },
      {
        "comment_id": "2063502993",
        "repo_full_name": "netty/netty",
        "pr_number": 15005,
        "pr_file": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/compression/WebSocketClientCompressionHandler.java",
        "discussion_id": "2059003115",
        "commented_code": "@@ -27,12 +27,14 @@\n @ChannelHandler.Sharable\n public final class WebSocketClientCompressionHandler extends WebSocketClientExtensionHandler {\n \n+    private static final int MAX_ALLOCATION = 1024 * 1024 * 10;",
        "comment_created_at": "2025-04-28T11:53:06+00:00",
        "comment_author": "DeviLab",
        "comment_body": "For some reason `WebSocketClientCompressionHandler` is implemented as a singleton. It means that `maxAllocation` can't be explicitly provided by third-party developers as a constructor param. That's why I decided to choose a reasonably big default value in order not to break the API. However, there are also another options how to address it:\r\n1. Make the class non-singleton. \r\nPros:\r\n- It would make it similar as `WebSocketServerCompressionHandler`\r\nCons:\r\n- It's hard to estimate an impact on the 3rd party solutions which use Netty\r\n3. Configure it via a system property.\r\nPros:\r\n- API will be untouched\r\nCons:\r\n- A system property can be easily forgotten or lost\r\n- The limit can be defined for the whole app only\r\n\r\nWhat do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "2068219107",
        "repo_full_name": "netty/netty",
        "pr_number": 15005,
        "pr_file": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/compression/WebSocketClientCompressionHandler.java",
        "discussion_id": "2059003115",
        "commented_code": "@@ -27,12 +27,14 @@\n @ChannelHandler.Sharable\n public final class WebSocketClientCompressionHandler extends WebSocketClientExtensionHandler {\n \n+    private static final int MAX_ALLOCATION = 1024 * 1024 * 10;",
        "comment_created_at": "2025-04-30T09:05:19+00:00",
        "comment_author": "normanmaurer",
        "comment_body": "I think we should deprecate the `public static final WebSocketClientCompressionHandler INSTANCE = new WebSocketClientCompressionHandler();` and then just add another constructor that takes the max allocation size as the constructor \r\n`",
        "pr_file_module": null
      },
      {
        "comment_id": "2068598899",
        "repo_full_name": "netty/netty",
        "pr_number": 15005,
        "pr_file": "codec-http/src/main/java/io/netty/handler/codec/http/websocketx/extensions/compression/WebSocketClientCompressionHandler.java",
        "discussion_id": "2059003115",
        "commented_code": "@@ -27,12 +27,14 @@\n @ChannelHandler.Sharable\n public final class WebSocketClientCompressionHandler extends WebSocketClientExtensionHandler {\n \n+    private static final int MAX_ALLOCATION = 1024 * 1024 * 10;",
        "comment_created_at": "2025-04-30T12:49:12+00:00",
        "comment_author": "DeviLab",
        "comment_body": "Added another constructor",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1986506825",
    "pr_number": 14908,
    "pr_file": "transport-classes-io_uring/src/main/java/io/netty/channel/uring/IoUring.java",
    "created_at": "2025-03-10T02:02:57+00:00",
    "commented_code": "return IORING_REGISTER_BUFFER_RING_INC_SUPPORTED;\n     }\n \n+    static boolean isAcceptMultishotEnabled() {",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "1986506825",
        "repo_full_name": "netty/netty",
        "pr_number": 14908,
        "pr_file": "transport-classes-io_uring/src/main/java/io/netty/channel/uring/IoUring.java",
        "discussion_id": "1986506825",
        "commented_code": "@@ -232,6 +245,22 @@ public static boolean isRegisterBufferRingIncSupported() {\n         return IORING_REGISTER_BUFFER_RING_INC_SUPPORTED;\n     }\n \n+    static boolean isAcceptMultishotEnabled() {",
        "comment_created_at": "2025-03-10T02:02:57+00:00",
        "comment_author": "dreamlike-ocean",
        "comment_body": "Perhaps making there methods to public could assist user in better adapting to different runtime environments\r\nsuch as \r\n```java\r\nif (!IoUinrg.isSpliceSupported) {\r\n  pipeline.addlast(ChunkedWriteHandler);\r\n}\r\n\r\nif(IoUring.isRecvMultishotEnabled) {\r\n  registerBufferRing(...)\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1987499256",
        "repo_full_name": "netty/netty",
        "pr_number": 14908,
        "pr_file": "transport-classes-io_uring/src/main/java/io/netty/channel/uring/IoUring.java",
        "discussion_id": "1986506825",
        "commented_code": "@@ -232,6 +245,22 @@ public static boolean isRegisterBufferRingIncSupported() {\n         return IORING_REGISTER_BUFFER_RING_INC_SUPPORTED;\n     }\n \n+    static boolean isAcceptMultishotEnabled() {",
        "comment_created_at": "2025-03-10T15:11:44+00:00",
        "comment_author": "normanmaurer",
        "comment_body": "This makes sense... Let's make them public. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1949096290",
    "pr_number": 14793,
    "pr_file": "transport-classes-io_uring/src/main/java/io/netty/channel/uring/IoUringIoHandlerConfig.java",
    "created_at": "2025-02-10T13:53:17+00:00",
    "commented_code": "return this;\n     }\n \n+    /**\n+     * Set the size of the io_uring cqe.\n+     * @param cqSize the size of the io_uring cqe.\n+     * @throws IllegalArgumentException if cqSize is less than ringSize, or not a power of 2\n+     * @return reference to this, so the API can be used fluently\n+     */\n+    public IoUringIoHandlerConfig setCqSize(int cqSize) {\n+        ObjectUtil.checkPositive(cqSize, \"cqSize\");\n+        this.cqSize = checkCqSize(cqSize);",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "1949096290",
        "repo_full_name": "netty/netty",
        "pr_number": 14793,
        "pr_file": "transport-classes-io_uring/src/main/java/io/netty/channel/uring/IoUringIoHandlerConfig.java",
        "discussion_id": "1949096290",
        "commented_code": "@@ -111,6 +122,29 @@ public IoUringIoHandlerConfig setRingSize(int ringSize) {\n         return this;\n     }\n \n+    /**\n+     * Set the size of the io_uring cqe.\n+     * @param cqSize the size of the io_uring cqe.\n+     * @throws IllegalArgumentException if cqSize is less than ringSize, or not a power of 2\n+     * @return reference to this, so the API can be used fluently\n+     */\n+    public IoUringIoHandlerConfig setCqSize(int cqSize) {\n+        ObjectUtil.checkPositive(cqSize, \"cqSize\");\n+        this.cqSize = checkCqSize(cqSize);",
        "comment_created_at": "2025-02-10T13:53:17+00:00",
        "comment_author": "normanmaurer",
        "comment_body": "I think it would be better to set the ringSize and cqSize with the same method as otherwise we might set this one first and then set the ring to a lower size which would not trigger the exception etc. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1950127327",
        "repo_full_name": "netty/netty",
        "pr_number": 14793,
        "pr_file": "transport-classes-io_uring/src/main/java/io/netty/channel/uring/IoUringIoHandlerConfig.java",
        "discussion_id": "1949096290",
        "commented_code": "@@ -111,6 +122,29 @@ public IoUringIoHandlerConfig setRingSize(int ringSize) {\n         return this;\n     }\n \n+    /**\n+     * Set the size of the io_uring cqe.\n+     * @param cqSize the size of the io_uring cqe.\n+     * @throws IllegalArgumentException if cqSize is less than ringSize, or not a power of 2\n+     * @return reference to this, so the API can be used fluently\n+     */\n+    public IoUringIoHandlerConfig setCqSize(int cqSize) {\n+        ObjectUtil.checkPositive(cqSize, \"cqSize\");\n+        this.cqSize = checkCqSize(cqSize);",
        "comment_created_at": "2025-02-11T01:51:09+00:00",
        "comment_author": "dreamlike-ocean",
        "comment_body": "If the current  runtime doesn't support IORING_SETUP_CQSIZE and the user uses `setSize(ringSize, cqSize)`, perhaps the effect won't meet his expectations. \r\n\r\n I've checked whether the cqsize is reasonable in `IoUringIoHandler::<init>`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1920517615",
    "pr_number": 14693,
    "pr_file": "transport-classes-io_uring/src/main/java/io/netty/channel/uring/IoUringIoHandler.java",
    "created_at": "2025-01-17T17:21:19+00:00",
    "commented_code": "private volatile boolean shuttingDown;\n     private boolean closeCompleted;\n     private int nextRegistrationId = Integer.MIN_VALUE;\n+    private int processedPerRun;\n \n     // these two ids are used internally any so can't be used by nextRegistrationId().\n     private static final int EVENTFD_ID = Integer.MAX_VALUE;\n     private static final int RINGFD_ID = EVENTFD_ID - 1;\n     private static final int INVALID_ID = 0;\n \n+    // We buffer a maximum of 4096 completions before we drain them in batches.\n+    // Also as we never submit an udata which is 0L we use this as the tombstone marker.\n+    private final CompletionBuffer completionArray = new CompletionBuffer(4096, 0);",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "1920517615",
        "repo_full_name": "netty/netty",
        "pr_number": 14693,
        "pr_file": "transport-classes-io_uring/src/main/java/io/netty/channel/uring/IoUringIoHandler.java",
        "discussion_id": "1920517615",
        "commented_code": "@@ -66,12 +71,17 @@ public final class IoUringIoHandler implements IoHandler {\n     private volatile boolean shuttingDown;\n     private boolean closeCompleted;\n     private int nextRegistrationId = Integer.MIN_VALUE;\n+    private int processedPerRun;\n \n     // these two ids are used internally any so can't be used by nextRegistrationId().\n     private static final int EVENTFD_ID = Integer.MAX_VALUE;\n     private static final int RINGFD_ID = EVENTFD_ID - 1;\n     private static final int INVALID_ID = 0;\n \n+    // We buffer a maximum of 4096 completions before we drain them in batches.\n+    // Also as we never submit an udata which is 0L we use this as the tombstone marker.\n+    private final CompletionBuffer completionArray = new CompletionBuffer(4096, 0);",
        "comment_created_at": "2025-01-17T17:21:19+00:00",
        "comment_author": "chrisvest",
        "comment_body": "Perhaps we can derive the size of this from the ring size? The completion queue is by default twice the size of the submission queue, and this could be the same, or twice again.\n\nAlso, let's name the field `completionBuffer`, following the class name.",
        "pr_file_module": null
      }
    ]
  }
]