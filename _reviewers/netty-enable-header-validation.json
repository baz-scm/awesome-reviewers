[
  {
    "discussion_id": "2054440603",
    "pr_number": 15048,
    "pr_file": "codec-http3/src/test/java/io/netty/codec/http3/HttpConversionUtilTest.java",
    "created_at": "2025-04-22T16:16:02+00:00",
    "commented_code": "+/*\n+ * Copyright 2021 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.codec.http3;\n+\n+import io.netty.handler.codec.http.DefaultHttpHeaders;\n+import io.netty.handler.codec.http.HttpHeaders;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.util.AsciiString;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.netty.handler.codec.http.HttpHeaderNames.CONNECTION;\n+import static io.netty.handler.codec.http.HttpHeaderNames.COOKIE;\n+import static io.netty.handler.codec.http.HttpHeaderNames.HOST;\n+import static io.netty.handler.codec.http.HttpHeaderNames.KEEP_ALIVE;\n+import static io.netty.handler.codec.http.HttpHeaderNames.PROXY_CONNECTION;\n+import static io.netty.handler.codec.http.HttpHeaderNames.TE;\n+import static io.netty.handler.codec.http.HttpHeaderNames.TRANSFER_ENCODING;\n+import static io.netty.handler.codec.http.HttpHeaderNames.UPGRADE;\n+import static io.netty.handler.codec.http.HttpHeaderValues.GZIP;\n+import static io.netty.handler.codec.http.HttpHeaderValues.TRAILERS;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class HttpConversionUtilTest {\n+\n+    @Test\n+    public void connectNoPath() throws Exception {\n+        String authority = \"netty.io:80\";\n+        Http3Headers headers = new DefaultHttp3Headers();\n+        headers.authority(authority);\n+        headers.method(HttpMethod.CONNECT.asciiName());\n+        HttpRequest request = HttpConversionUtil.toHttpRequest(0, headers, true);\n+        assertNotNull(request);\n+        assertEquals(authority, request.uri());\n+        assertEquals(authority, request.headers().get(HOST));\n+    }\n+\n+    @Test\n+    public void setHttp3AuthorityWithoutUserInfo() {\n+        Http3Headers headers = new DefaultHttp3Headers();\n+\n+        HttpConversionUtil.setHttp3Authority(\"foo\", headers);\n+        assertEquals(new AsciiString(\"foo\"), headers.authority());\n+    }\n+\n+    @Test\n+    public void setHttp3AuthorityWithUserInfo() {\n+        Http3Headers headers = new DefaultHttp3Headers();\n+\n+        HttpConversionUtil.setHttp3Authority(\"info@foo\", headers);\n+        assertEquals(new AsciiString(\"foo\"), headers.authority());\n+\n+        HttpConversionUtil.setHttp3Authority(\"@foo.bar\", headers);\n+        assertEquals(new AsciiString(\"foo.bar\"), headers.authority());\n+    }\n+\n+    @Test\n+    public void setHttp3AuthorityNullOrEmpty() {\n+        Http3Headers headers = new DefaultHttp3Headers();\n+\n+        HttpConversionUtil.setHttp3Authority(null, headers);\n+        assertNull(headers.authority());\n+\n+        HttpConversionUtil.setHttp3Authority(\"\", headers);\n+        assertSame(AsciiString.EMPTY_STRING, headers.authority());\n+    }\n+\n+    @Test\n+    public void setHttp2AuthorityWithEmptyAuthority() {\n+        assertThrows(IllegalArgumentException.class,\n+                () -> HttpConversionUtil.setHttp3Authority(\"info@\", new DefaultHttp3Headers()));\n+    }\n+\n+    @Test\n+    public void stripTEHeaders() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP);\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertTrue(out.isEmpty());\n+    }\n+\n+    @Test\n+    public void stripTEHeadersExcludingTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP);\n+        inHeaders.add(TE, TRAILERS);\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertSame(TRAILERS, out.get(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersCsvSeparatedExcludingTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP + \",\" + TRAILERS);\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertSame(TRAILERS, out.get(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersCsvSeparatedAccountsForValueSimilarToTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP + \",\" + TRAILERS + \"foo\");\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertFalse(out.contains(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersAccountsForValueSimilarToTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, TRAILERS + \"foo\");\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertFalse(out.contains(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersAccountsForOWS() {\n+        // Disable header validation, since it will otherwise reject the header.\n+        boolean validate = false;\n+        HttpHeaders inHeaders = new DefaultHttpHeaders(validate);",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "2054440603",
        "repo_full_name": "netty/netty",
        "pr_number": 15048,
        "pr_file": "codec-http3/src/test/java/io/netty/codec/http3/HttpConversionUtilTest.java",
        "discussion_id": "2054440603",
        "commented_code": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2021 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.codec.http3;\n+\n+import io.netty.handler.codec.http.DefaultHttpHeaders;\n+import io.netty.handler.codec.http.HttpHeaders;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.util.AsciiString;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.netty.handler.codec.http.HttpHeaderNames.CONNECTION;\n+import static io.netty.handler.codec.http.HttpHeaderNames.COOKIE;\n+import static io.netty.handler.codec.http.HttpHeaderNames.HOST;\n+import static io.netty.handler.codec.http.HttpHeaderNames.KEEP_ALIVE;\n+import static io.netty.handler.codec.http.HttpHeaderNames.PROXY_CONNECTION;\n+import static io.netty.handler.codec.http.HttpHeaderNames.TE;\n+import static io.netty.handler.codec.http.HttpHeaderNames.TRANSFER_ENCODING;\n+import static io.netty.handler.codec.http.HttpHeaderNames.UPGRADE;\n+import static io.netty.handler.codec.http.HttpHeaderValues.GZIP;\n+import static io.netty.handler.codec.http.HttpHeaderValues.TRAILERS;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class HttpConversionUtilTest {\n+\n+    @Test\n+    public void connectNoPath() throws Exception {\n+        String authority = \"netty.io:80\";\n+        Http3Headers headers = new DefaultHttp3Headers();\n+        headers.authority(authority);\n+        headers.method(HttpMethod.CONNECT.asciiName());\n+        HttpRequest request = HttpConversionUtil.toHttpRequest(0, headers, true);\n+        assertNotNull(request);\n+        assertEquals(authority, request.uri());\n+        assertEquals(authority, request.headers().get(HOST));\n+    }\n+\n+    @Test\n+    public void setHttp3AuthorityWithoutUserInfo() {\n+        Http3Headers headers = new DefaultHttp3Headers();\n+\n+        HttpConversionUtil.setHttp3Authority(\"foo\", headers);\n+        assertEquals(new AsciiString(\"foo\"), headers.authority());\n+    }\n+\n+    @Test\n+    public void setHttp3AuthorityWithUserInfo() {\n+        Http3Headers headers = new DefaultHttp3Headers();\n+\n+        HttpConversionUtil.setHttp3Authority(\"info@foo\", headers);\n+        assertEquals(new AsciiString(\"foo\"), headers.authority());\n+\n+        HttpConversionUtil.setHttp3Authority(\"@foo.bar\", headers);\n+        assertEquals(new AsciiString(\"foo.bar\"), headers.authority());\n+    }\n+\n+    @Test\n+    public void setHttp3AuthorityNullOrEmpty() {\n+        Http3Headers headers = new DefaultHttp3Headers();\n+\n+        HttpConversionUtil.setHttp3Authority(null, headers);\n+        assertNull(headers.authority());\n+\n+        HttpConversionUtil.setHttp3Authority(\"\", headers);\n+        assertSame(AsciiString.EMPTY_STRING, headers.authority());\n+    }\n+\n+    @Test\n+    public void setHttp2AuthorityWithEmptyAuthority() {\n+        assertThrows(IllegalArgumentException.class,\n+                () -> HttpConversionUtil.setHttp3Authority(\"info@\", new DefaultHttp3Headers()));\n+    }\n+\n+    @Test\n+    public void stripTEHeaders() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP);\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertTrue(out.isEmpty());\n+    }\n+\n+    @Test\n+    public void stripTEHeadersExcludingTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP);\n+        inHeaders.add(TE, TRAILERS);\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertSame(TRAILERS, out.get(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersCsvSeparatedExcludingTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP + \",\" + TRAILERS);\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertSame(TRAILERS, out.get(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersCsvSeparatedAccountsForValueSimilarToTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP + \",\" + TRAILERS + \"foo\");\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertFalse(out.contains(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersAccountsForValueSimilarToTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, TRAILERS + \"foo\");\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertFalse(out.contains(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersAccountsForOWS() {\n+        // Disable header validation, since it will otherwise reject the header.\n+        boolean validate = false;\n+        HttpHeaders inHeaders = new DefaultHttpHeaders(validate);",
        "comment_created_at": "2025-04-22T16:16:02+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Disabled Netty HTTP header validation\n\nRequest splitting or response splitting vulnerability due to header value verification being disabled.\n\n[Show more details](https://github.com/netty/netty/security/code-scanning/172)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2093772475",
    "pr_number": 15048,
    "pr_file": "codec-http3/src/test/java/io/netty/handler/codec/http3/HttpConversionUtilTest.java",
    "created_at": "2025-05-16T23:36:28+00:00",
    "commented_code": "+/*\n+ * Copyright 2021 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http3;\n+\n+import io.netty.handler.codec.http.DefaultHttpHeaders;\n+import io.netty.handler.codec.http.HttpHeaders;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.util.AsciiString;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.netty.handler.codec.http.HttpHeaderNames.CONNECTION;\n+import static io.netty.handler.codec.http.HttpHeaderNames.COOKIE;\n+import static io.netty.handler.codec.http.HttpHeaderNames.HOST;\n+import static io.netty.handler.codec.http.HttpHeaderNames.KEEP_ALIVE;\n+import static io.netty.handler.codec.http.HttpHeaderNames.PROXY_CONNECTION;\n+import static io.netty.handler.codec.http.HttpHeaderNames.TE;\n+import static io.netty.handler.codec.http.HttpHeaderNames.TRANSFER_ENCODING;\n+import static io.netty.handler.codec.http.HttpHeaderNames.UPGRADE;\n+import static io.netty.handler.codec.http.HttpHeaderValues.GZIP;\n+import static io.netty.handler.codec.http.HttpHeaderValues.TRAILERS;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class HttpConversionUtilTest {\n+\n+    @Test\n+    public void connectNoPath() throws Exception {\n+        String authority = \"netty.io:80\";\n+        Http3Headers headers = new DefaultHttp3Headers();\n+        headers.authority(authority);\n+        headers.method(HttpMethod.CONNECT.asciiName());\n+        HttpRequest request = HttpConversionUtil.toHttpRequest(0, headers, true);\n+        assertNotNull(request);\n+        assertEquals(authority, request.uri());\n+        assertEquals(authority, request.headers().get(HOST));\n+    }\n+\n+    @Test\n+    public void setHttp3AuthorityWithoutUserInfo() {\n+        Http3Headers headers = new DefaultHttp3Headers();\n+\n+        HttpConversionUtil.setHttp3Authority(\"foo\", headers);\n+        assertEquals(new AsciiString(\"foo\"), headers.authority());\n+    }\n+\n+    @Test\n+    public void setHttp3AuthorityWithUserInfo() {\n+        Http3Headers headers = new DefaultHttp3Headers();\n+\n+        HttpConversionUtil.setHttp3Authority(\"info@foo\", headers);\n+        assertEquals(new AsciiString(\"foo\"), headers.authority());\n+\n+        HttpConversionUtil.setHttp3Authority(\"@foo.bar\", headers);\n+        assertEquals(new AsciiString(\"foo.bar\"), headers.authority());\n+    }\n+\n+    @Test\n+    public void setHttp3AuthorityNullOrEmpty() {\n+        Http3Headers headers = new DefaultHttp3Headers();\n+\n+        HttpConversionUtil.setHttp3Authority(null, headers);\n+        assertNull(headers.authority());\n+\n+        HttpConversionUtil.setHttp3Authority(\"\", headers);\n+        assertSame(AsciiString.EMPTY_STRING, headers.authority());\n+    }\n+\n+    @Test\n+    public void setHttp2AuthorityWithEmptyAuthority() {\n+        assertThrows(IllegalArgumentException.class,\n+                () -> HttpConversionUtil.setHttp3Authority(\"info@\", new DefaultHttp3Headers()));\n+    }\n+\n+    @Test\n+    public void stripTEHeaders() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP);\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertTrue(out.isEmpty());\n+    }\n+\n+    @Test\n+    public void stripTEHeadersExcludingTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP);\n+        inHeaders.add(TE, TRAILERS);\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertSame(TRAILERS, out.get(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersCsvSeparatedExcludingTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP + \",\" + TRAILERS);\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertSame(TRAILERS, out.get(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersCsvSeparatedAccountsForValueSimilarToTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP + \",\" + TRAILERS + \"foo\");\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertFalse(out.contains(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersAccountsForValueSimilarToTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, TRAILERS + \"foo\");\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertFalse(out.contains(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersAccountsForOWS() {\n+        // Disable header validation, since it will otherwise reject the header.\n+        boolean validate = false;\n+        HttpHeaders inHeaders = new DefaultHttpHeaders(validate);",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "2093772475",
        "repo_full_name": "netty/netty",
        "pr_number": 15048,
        "pr_file": "codec-http3/src/test/java/io/netty/handler/codec/http3/HttpConversionUtilTest.java",
        "discussion_id": "2093772475",
        "commented_code": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2021 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http3;\n+\n+import io.netty.handler.codec.http.DefaultHttpHeaders;\n+import io.netty.handler.codec.http.HttpHeaders;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.util.AsciiString;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.netty.handler.codec.http.HttpHeaderNames.CONNECTION;\n+import static io.netty.handler.codec.http.HttpHeaderNames.COOKIE;\n+import static io.netty.handler.codec.http.HttpHeaderNames.HOST;\n+import static io.netty.handler.codec.http.HttpHeaderNames.KEEP_ALIVE;\n+import static io.netty.handler.codec.http.HttpHeaderNames.PROXY_CONNECTION;\n+import static io.netty.handler.codec.http.HttpHeaderNames.TE;\n+import static io.netty.handler.codec.http.HttpHeaderNames.TRANSFER_ENCODING;\n+import static io.netty.handler.codec.http.HttpHeaderNames.UPGRADE;\n+import static io.netty.handler.codec.http.HttpHeaderValues.GZIP;\n+import static io.netty.handler.codec.http.HttpHeaderValues.TRAILERS;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class HttpConversionUtilTest {\n+\n+    @Test\n+    public void connectNoPath() throws Exception {\n+        String authority = \"netty.io:80\";\n+        Http3Headers headers = new DefaultHttp3Headers();\n+        headers.authority(authority);\n+        headers.method(HttpMethod.CONNECT.asciiName());\n+        HttpRequest request = HttpConversionUtil.toHttpRequest(0, headers, true);\n+        assertNotNull(request);\n+        assertEquals(authority, request.uri());\n+        assertEquals(authority, request.headers().get(HOST));\n+    }\n+\n+    @Test\n+    public void setHttp3AuthorityWithoutUserInfo() {\n+        Http3Headers headers = new DefaultHttp3Headers();\n+\n+        HttpConversionUtil.setHttp3Authority(\"foo\", headers);\n+        assertEquals(new AsciiString(\"foo\"), headers.authority());\n+    }\n+\n+    @Test\n+    public void setHttp3AuthorityWithUserInfo() {\n+        Http3Headers headers = new DefaultHttp3Headers();\n+\n+        HttpConversionUtil.setHttp3Authority(\"info@foo\", headers);\n+        assertEquals(new AsciiString(\"foo\"), headers.authority());\n+\n+        HttpConversionUtil.setHttp3Authority(\"@foo.bar\", headers);\n+        assertEquals(new AsciiString(\"foo.bar\"), headers.authority());\n+    }\n+\n+    @Test\n+    public void setHttp3AuthorityNullOrEmpty() {\n+        Http3Headers headers = new DefaultHttp3Headers();\n+\n+        HttpConversionUtil.setHttp3Authority(null, headers);\n+        assertNull(headers.authority());\n+\n+        HttpConversionUtil.setHttp3Authority(\"\", headers);\n+        assertSame(AsciiString.EMPTY_STRING, headers.authority());\n+    }\n+\n+    @Test\n+    public void setHttp2AuthorityWithEmptyAuthority() {\n+        assertThrows(IllegalArgumentException.class,\n+                () -> HttpConversionUtil.setHttp3Authority(\"info@\", new DefaultHttp3Headers()));\n+    }\n+\n+    @Test\n+    public void stripTEHeaders() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP);\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertTrue(out.isEmpty());\n+    }\n+\n+    @Test\n+    public void stripTEHeadersExcludingTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP);\n+        inHeaders.add(TE, TRAILERS);\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertSame(TRAILERS, out.get(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersCsvSeparatedExcludingTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP + \",\" + TRAILERS);\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertSame(TRAILERS, out.get(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersCsvSeparatedAccountsForValueSimilarToTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, GZIP + \",\" + TRAILERS + \"foo\");\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertFalse(out.contains(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersAccountsForValueSimilarToTrailers() {\n+        HttpHeaders inHeaders = new DefaultHttpHeaders();\n+        inHeaders.add(TE, TRAILERS + \"foo\");\n+        Http3Headers out = new DefaultHttp3Headers();\n+        HttpConversionUtil.toHttp3Headers(inHeaders, out);\n+        assertFalse(out.contains(TE));\n+    }\n+\n+    @Test\n+    public void stripTEHeadersAccountsForOWS() {\n+        // Disable header validation, since it will otherwise reject the header.\n+        boolean validate = false;\n+        HttpHeaders inHeaders = new DefaultHttpHeaders(validate);",
        "comment_created_at": "2025-05-16T23:36:28+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Disabled Netty HTTP header validation\n\nRequest splitting or response splitting vulnerability due to header value verification being disabled.\n\n[Show more details](https://github.com/netty/netty/security/code-scanning/180)",
        "pr_file_module": null
      }
    ]
  }
]