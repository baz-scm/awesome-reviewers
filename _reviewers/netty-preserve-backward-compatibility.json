[
  {
    "discussion_id": "279587794",
    "pr_number": 9080,
    "pr_file": "common/src/main/java/io/netty/util/concurrent/EventExecutorGroup.java",
    "created_at": "2019-04-30T00:43:33+00:00",
    "commented_code": "*/\n public interface EventExecutorGroup extends ScheduledExecutorService, Iterable<EventExecutor> {\n \n+    /**\n+     * Returns the number of submitted tasks: it's safe to be read by different threads.<br>\n+     * <p>\n+     * If {@code this} don't support this metrics it returns a negative value, likely {@code -1}.\n+     */\n+    long submittedTasks();",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "279587794",
        "repo_full_name": "netty/netty",
        "pr_number": 9080,
        "pr_file": "common/src/main/java/io/netty/util/concurrent/EventExecutorGroup.java",
        "discussion_id": "279587794",
        "commented_code": "@@ -29,6 +29,20 @@\n  */\n public interface EventExecutorGroup extends ScheduledExecutorService, Iterable<EventExecutor> {\n \n+    /**\n+     * Returns the number of submitted tasks: it's safe to be read by different threads.<br>\n+     * <p>\n+     * If {@code this} don't support this metrics it returns a negative value, likely {@code -1}.\n+     */\n+    long submittedTasks();",
        "comment_created_at": "2019-04-30T00:43:33+00:00",
        "comment_author": "njhill",
        "comment_body": "I know this is a POC so maybe mainly for illustration, but I don't think we could add new public interface methods like this in 4.1 since it would be a breaking change.",
        "pr_file_module": null
      },
      {
        "comment_id": "279602658",
        "repo_full_name": "netty/netty",
        "pr_number": 9080,
        "pr_file": "common/src/main/java/io/netty/util/concurrent/EventExecutorGroup.java",
        "discussion_id": "279587794",
        "commented_code": "@@ -29,6 +29,20 @@\n  */\n public interface EventExecutorGroup extends ScheduledExecutorService, Iterable<EventExecutor> {\n \n+    /**\n+     * Returns the number of submitted tasks: it's safe to be read by different threads.<br>\n+     * <p>\n+     * If {@code this} don't support this metrics it returns a negative value, likely {@code -1}.\n+     */\n+    long submittedTasks();",
        "comment_created_at": "2019-04-30T03:05:06+00:00",
        "comment_author": "vkostyukov",
        "comment_body": "I had to deal with the same thing in #8428. We can probably just move these under `SingleThreadEventLoop`, which is an abstract class so won't break binary compatibility.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2098633324",
    "pr_number": 15224,
    "pr_file": "buffer/src/main/java/io/netty/buffer/ByteBuf.java",
    "created_at": "2025-05-20T18:36:09+00:00",
    "commented_code": "*/\n     public abstract CharSequence readCharSequence(int length, Charset charset);\n \n+    /**\n+     * Gets a {@link String} with the given length at the current {@code readerIndex}\n+     * and increases the {@code readerIndex} by the given length.\n+     *\n+     * @param length the length to read\n+     * @param charset that should be used\n+     * @return the string\n+     * @throws IndexOutOfBoundsException\n+     *         if {@code length} is greater than {@code this.readableBytes}\n+     */\n+    public abstract String readString(int length, Charset charset);",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "2098633324",
        "repo_full_name": "netty/netty",
        "pr_number": 15224,
        "pr_file": "buffer/src/main/java/io/netty/buffer/ByteBuf.java",
        "discussion_id": "2098633324",
        "commented_code": "@@ -1736,6 +1736,18 @@ public double readDoubleLE() {\n      */\n     public abstract CharSequence readCharSequence(int length, Charset charset);\n \n+    /**\n+     * Gets a {@link String} with the given length at the current {@code readerIndex}\n+     * and increases the {@code readerIndex} by the given length.\n+     *\n+     * @param length the length to read\n+     * @param charset that should be used\n+     * @return the string\n+     * @throws IndexOutOfBoundsException\n+     *         if {@code length} is greater than {@code this.readableBytes}\n+     */\n+    public abstract String readString(int length, Charset charset);",
        "comment_created_at": "2025-05-20T18:36:09+00:00",
        "comment_author": "normanmaurer",
        "comment_body": "This is a breaking change... you will need to add an implementation here. \r\n\r\n```suggestion\r\n    public String readString(int length, Charset charset) {\r\n        String string = toString(readerIndex(), length, charset);\r\n        skipBytes(length);\r\n        return string;\r\n    }\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2059143554",
    "pr_number": 15005,
    "pr_file": "codec-compression/src/main/java/io/netty/handler/codec/compression/ZlibCodecFactory.java",
    "created_at": "2025-04-24T20:01:15+00:00",
    "commented_code": "}\n     }\n \n+    @Deprecated\n     public static ZlibDecoder newZlibDecoder() {\n+        return newZlibDecoder(0);\n+    }\n+\n+    public static ZlibDecoder newZlibDecoder(int maxAllocation) {\n         if (noJdkZlibDecoder) {\n-            return new JZlibDecoder();\n+            return new JZlibDecoder(maxAllocation);\n         } else {\n-            return new JdkZlibDecoder(true);",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "2059143554",
        "repo_full_name": "netty/netty",
        "pr_number": 15005,
        "pr_file": "codec-compression/src/main/java/io/netty/handler/codec/compression/ZlibCodecFactory.java",
        "discussion_id": "2059143554",
        "commented_code": "@@ -104,27 +104,42 @@ public static ZlibEncoder newZlibEncoder(int compressionLevel, int windowBits, i\n         }\n     }\n \n+    @Deprecated\n     public static ZlibDecoder newZlibDecoder() {\n+        return newZlibDecoder(0);\n+    }\n+\n+    public static ZlibDecoder newZlibDecoder(int maxAllocation) {\n         if (noJdkZlibDecoder) {\n-            return new JZlibDecoder();\n+            return new JZlibDecoder(maxAllocation);\n         } else {\n-            return new JdkZlibDecoder(true);",
        "comment_created_at": "2025-04-24T20:01:15+00:00",
        "comment_author": "idelpivnitskiy",
        "comment_body": "Should we also deprecated constructors of `JdkZlibDecoder` and `JZlibDecoder` that don't take `maxAllocation`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2063531167",
        "repo_full_name": "netty/netty",
        "pr_number": 15005,
        "pr_file": "codec-compression/src/main/java/io/netty/handler/codec/compression/ZlibCodecFactory.java",
        "discussion_id": "2059143554",
        "commented_code": "@@ -104,27 +104,42 @@ public static ZlibEncoder newZlibEncoder(int compressionLevel, int windowBits, i\n         }\n     }\n \n+    @Deprecated\n     public static ZlibDecoder newZlibDecoder() {\n+        return newZlibDecoder(0);\n+    }\n+\n+    public static ZlibDecoder newZlibDecoder(int maxAllocation) {\n         if (noJdkZlibDecoder) {\n-            return new JZlibDecoder();\n+            return new JZlibDecoder(maxAllocation);\n         } else {\n-            return new JdkZlibDecoder(true);",
        "comment_created_at": "2025-04-28T12:13:06+00:00",
        "comment_author": "DeviLab",
        "comment_body": "Deprecated both",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1938136855",
    "pr_number": 14752,
    "pr_file": "codec-protobuf/src/main/java/io/netty/handler/codec/protobuf/ProtobufEncoderNano.java",
    "created_at": "2025-02-01T01:09:54+00:00",
    "commented_code": "-/*\n- * Copyright 2015 The Netty Project\n- *\n- * The Netty Project licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-package io.netty.handler.codec.protobuf;\n-\n-import com.google.protobuf.nano.CodedOutputByteBufferNano;\n-import com.google.protobuf.nano.MessageNano;\n-\n-import java.util.List;\n-\n-import io.netty.buffer.ByteBuf;\n-import io.netty.channel.ChannelHandler;\n-import io.netty.channel.ChannelHandlerContext;\n-import io.netty.channel.ChannelPipeline;\n-import io.netty.handler.codec.LengthFieldBasedFrameDecoder;\n-import io.netty.handler.codec.LengthFieldPrepender;\n-import io.netty.handler.codec.MessageToMessageEncoder;\n-\n-/**\n- * Encodes the requested <a href=\"https://github.com/google/protobuf\">Google\n- * Protocol Buffers</a> {@link MessageNano} into a\n- * {@link ByteBuf}. A typical setup for TCP/IP would be:\n- * <pre>\n- * {@link ChannelPipeline} pipeline = ...;\n- *\n- * // Decoders\n- * pipeline.addLast(\"frameDecoder\",\n- *                  new {@link LengthFieldBasedFrameDecoder}(1048576, 0, 4, 0, 4));\n- * pipeline.addLast(\"protobufDecoder\",\n- *                  new {@link ProtobufDecoderNano}(MyMessage.getDefaultInstance()));\n- *\n- * // Encoder\n- * pipeline.addLast(\"frameEncoder\", new {@link LengthFieldPrepender}(4));\n- * pipeline.addLast(\"protobufEncoder\", new {@link ProtobufEncoderNano}());\n- * </pre>\n- * and then you can use a {@code MyMessage} instead of a {@link ByteBuf}\n- * as a message:\n- * <pre>\n- * void channelRead({@link ChannelHandlerContext} ctx, Object msg) {\n- *     MyMessage req = (MyMessage) msg;\n- *     MyMessage res = MyMessage.newBuilder().setText(\n- *                               \"Did you say '\" + req.getText() + \"'?\").build();\n- *     ch.write(res);\n- * }\n- * </pre>\n- */\n-@ChannelHandler.Sharable\n-public class ProtobufEncoderNano extends MessageToMessageEncoder<MessageNano> {",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "1938136855",
        "repo_full_name": "netty/netty",
        "pr_number": 14752,
        "pr_file": "codec-protobuf/src/main/java/io/netty/handler/codec/protobuf/ProtobufEncoderNano.java",
        "discussion_id": "1938136855",
        "commented_code": "@@ -1,73 +0,0 @@\n-/*\n- * Copyright 2015 The Netty Project\n- *\n- * The Netty Project licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-package io.netty.handler.codec.protobuf;\n-\n-import com.google.protobuf.nano.CodedOutputByteBufferNano;\n-import com.google.protobuf.nano.MessageNano;\n-\n-import java.util.List;\n-\n-import io.netty.buffer.ByteBuf;\n-import io.netty.channel.ChannelHandler;\n-import io.netty.channel.ChannelHandlerContext;\n-import io.netty.channel.ChannelPipeline;\n-import io.netty.handler.codec.LengthFieldBasedFrameDecoder;\n-import io.netty.handler.codec.LengthFieldPrepender;\n-import io.netty.handler.codec.MessageToMessageEncoder;\n-\n-/**\n- * Encodes the requested <a href=\"https://github.com/google/protobuf\">Google\n- * Protocol Buffers</a> {@link MessageNano} into a\n- * {@link ByteBuf}. A typical setup for TCP/IP would be:\n- * <pre>\n- * {@link ChannelPipeline} pipeline = ...;\n- *\n- * // Decoders\n- * pipeline.addLast(\"frameDecoder\",\n- *                  new {@link LengthFieldBasedFrameDecoder}(1048576, 0, 4, 0, 4));\n- * pipeline.addLast(\"protobufDecoder\",\n- *                  new {@link ProtobufDecoderNano}(MyMessage.getDefaultInstance()));\n- *\n- * // Encoder\n- * pipeline.addLast(\"frameEncoder\", new {@link LengthFieldPrepender}(4));\n- * pipeline.addLast(\"protobufEncoder\", new {@link ProtobufEncoderNano}());\n- * </pre>\n- * and then you can use a {@code MyMessage} instead of a {@link ByteBuf}\n- * as a message:\n- * <pre>\n- * void channelRead({@link ChannelHandlerContext} ctx, Object msg) {\n- *     MyMessage req = (MyMessage) msg;\n- *     MyMessage res = MyMessage.newBuilder().setText(\n- *                               \"Did you say '\" + req.getText() + \"'?\").build();\n- *     ch.write(res);\n- * }\n- * </pre>\n- */\n-@ChannelHandler.Sharable\n-public class ProtobufEncoderNano extends MessageToMessageEncoder<MessageNano> {",
        "comment_created_at": "2025-02-01T01:09:54+00:00",
        "comment_author": "idelpivnitskiy",
        "comment_body": "Would be great to deprecate these classes in 4.1 with clear message that they will be removed in 4.2",
        "pr_file_module": null
      }
    ]
  }
]