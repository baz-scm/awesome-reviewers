[
  {
    "discussion_id": "660145677",
    "pr_number": 11419,
    "pr_file": "codec/src/test/java/io/netty/handler/codec/compression/Lz4FrameEncoderTest.java",
    "created_at": "2021-06-28T22:03:24+00:00",
    "commented_code": "return Unpooled.wrappedBuffer(decompressed);\n     }\n \n+    @Test\n+    public void testHandlePromisesBasic() {\n+        int blockSize = 100;\n+        Lz4FrameEncoder encoder = newEncoder(blockSize, Lz4FrameEncoder.DEFAULT_MAX_ENCODE_SIZE);\n+        EmbeddedChannel channel = new EmbeddedChannel(encoder);",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "660145677",
        "repo_full_name": "netty/netty",
        "pr_number": 11419,
        "pr_file": "codec/src/test/java/io/netty/handler/codec/compression/Lz4FrameEncoderTest.java",
        "discussion_id": "660145677",
        "commented_code": "@@ -117,6 +139,117 @@ protected ByteBuf decompress(ByteBuf compressed, int originalLength) throws Exce\n         return Unpooled.wrappedBuffer(decompressed);\n     }\n \n+    @Test\n+    public void testHandlePromisesBasic() {\n+        int blockSize = 100;\n+        Lz4FrameEncoder encoder = newEncoder(blockSize, Lz4FrameEncoder.DEFAULT_MAX_ENCODE_SIZE);\n+        EmbeddedChannel channel = new EmbeddedChannel(encoder);",
        "comment_created_at": "2021-06-28T22:03:24+00:00",
        "comment_author": "NiteshKant",
        "comment_body": "Writes to `EmbeddedChannel` will eventually get buffered in the outbound buffer, so at the end of the test, just call `readOutbound()` as many times as you expect the buffers and then eventually call `channel.finish()` to make sure buffers are not leaked.",
        "pr_file_module": null
      },
      {
        "comment_id": "660767547",
        "repo_full_name": "netty/netty",
        "pr_number": 11419,
        "pr_file": "codec/src/test/java/io/netty/handler/codec/compression/Lz4FrameEncoderTest.java",
        "discussion_id": "660145677",
        "commented_code": "@@ -117,6 +139,117 @@ protected ByteBuf decompress(ByteBuf compressed, int originalLength) throws Exce\n         return Unpooled.wrappedBuffer(decompressed);\n     }\n \n+    @Test\n+    public void testHandlePromisesBasic() {\n+        int blockSize = 100;\n+        Lz4FrameEncoder encoder = newEncoder(blockSize, Lz4FrameEncoder.DEFAULT_MAX_ENCODE_SIZE);\n+        EmbeddedChannel channel = new EmbeddedChannel(encoder);",
        "comment_created_at": "2021-06-29T16:10:43+00:00",
        "comment_author": "TommyWind",
        "comment_body": "Thanks + sorry for the oversight. Added some validation on the buffers that come out of the channel now and made sure to release them all.\r\nAt least locally this didn't leak any more over a few hundred runs with paranoid detection :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "392212191",
    "pr_number": 9935,
    "pr_file": "transport/src/test/java/io/netty/channel/embedded/EmbeddedChannelTest.java",
    "created_at": "2020-03-13T13:00:39+00:00",
    "commented_code": "assertTrue(inactive.get());\n     }\n \n+    @Test\n+    public void testCloseAutoRead() {",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "392212191",
        "repo_full_name": "netty/netty",
        "pr_number": 9935,
        "pr_file": "transport/src/test/java/io/netty/channel/embedded/EmbeddedChannelTest.java",
        "discussion_id": "392212191",
        "commented_code": "@@ -605,6 +606,41 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n         assertTrue(inactive.get());\n     }\n \n+    @Test\n+    public void testCloseAutoRead() {",
        "comment_created_at": "2020-03-13T13:00:39+00:00",
        "comment_author": "normanmaurer",
        "comment_body": "@carryxyh can you also add a test to ensure buffered messages are released when the `EmbeddedChannel` is closed but these are not processed ?",
        "pr_file_module": null
      },
      {
        "comment_id": "392213404",
        "repo_full_name": "netty/netty",
        "pr_number": 9935,
        "pr_file": "transport/src/test/java/io/netty/channel/embedded/EmbeddedChannelTest.java",
        "discussion_id": "392212191",
        "commented_code": "@@ -605,6 +606,41 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n         assertTrue(inactive.get());\n     }\n \n+    @Test\n+    public void testCloseAutoRead() {",
        "comment_created_at": "2020-03-13T13:03:11+00:00",
        "comment_author": "carryxyh",
        "comment_body": "Sure. \r\nLet me complete this.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "668133762",
    "pr_number": 11469,
    "pr_file": "codec-http/src/test/java/io/netty/handler/codec/http/HttpResponseDecoderTest.java",
    "created_at": "2021-07-12T17:46:37+00:00",
    "commented_code": "assertNull(ch.readInbound());\n     }\n \n+    @Test\n+    public void testResponseDisallowPartialChunks() {\n+        HttpResponseDecoder decoder = new HttpResponseDecoder(\n+            HttpObjectDecoder.DEFAULT_MAX_INITIAL_LINE_LENGTH,\n+            HttpObjectDecoder.DEFAULT_MAX_HEADER_SIZE,\n+            HttpObjectDecoder.DEFAULT_MAX_CHUNK_SIZE,\n+            HttpObjectDecoder.DEFAULT_VALIDATE_HEADERS,\n+            HttpObjectDecoder.DEFAULT_INITIAL_BUFFER_SIZE,\n+            HttpObjectDecoder.DEFAULT_ALLOW_DUPLICATE_CONTENT_LENGTHS,\n+            false);\n+        EmbeddedChannel ch = new EmbeddedChannel(decoder);\n+\n+        String headers = \"HTTP/1.1 200 OK\\r\n\"\n+            + \"Transfer-Encoding: chunked\\r\n\"\n+            + \"\\r\n\";\n+        ch.writeInbound(Unpooled.copiedBuffer(headers, CharsetUtil.US_ASCII));\n+\n+        HttpResponse res = ch.readInbound();\n+        assertThat(res.protocolVersion(), sameInstance(HttpVersion.HTTP_1_1));\n+        assertThat(res.status(), is(HttpResponseStatus.OK));\n+\n+        byte[] chunkBytes = new byte[10];\n+        Random random = new Random();\n+        random.nextBytes(chunkBytes);\n+        final ByteBuf chunk = ch.alloc().buffer().writeBytes(chunkBytes);\n+        final int chunkSize = chunk.readableBytes();\n+        ByteBuf partialChunk1 = chunk.retainedSlice(0, 5);\n+        ByteBuf partialChunk2 = chunk.retainedSlice(5, 5);\n+\n+        assertFalse(ch.writeInbound(Unpooled.copiedBuffer(Integer.toHexString(chunkSize)\n+                                                          + \"\\r\n\", CharsetUtil.US_ASCII)));\n+        assertFalse(ch.writeInbound(partialChunk1));\n+        assertTrue(ch.writeInbound(partialChunk2));\n+\n+        HttpContent content = ch.readInbound();\n+\n+        assertEquals(chunkSize, content.content().readableBytes());\n+\n+        byte[] decodedChunkBytes = new byte[chunkSize];\n+        content.content().readBytes(decodedChunkBytes, 0, chunkSize);\n+\n+        assertArrayEquals(chunkBytes, decodedChunkBytes);\n+        content.release();\n+\n+        assertFalse(ch.writeInbound(Unpooled.copiedBuffer(\"\\r\n\", CharsetUtil.US_ASCII)));\n+\n+        // Write the last chunk.\n+        ch.writeInbound(Unpooled.copiedBuffer(\"0\\r\n\\r\n\", CharsetUtil.US_ASCII));\n+\n+        // Ensure the last chunk was decoded.\n+        HttpContent lastContent = ch.readInbound();\n+        assertFalse(lastContent.content().isReadable());\n+        lastContent.release();\n+\n+        ch.finish();\n+        assertNull(ch.readInbound());",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "668133762",
        "repo_full_name": "netty/netty",
        "pr_number": 11469,
        "pr_file": "codec-http/src/test/java/io/netty/handler/codec/http/HttpResponseDecoderTest.java",
        "discussion_id": "668133762",
        "commented_code": "@@ -146,6 +146,64 @@ public void testResponseChunked() {\n         assertNull(ch.readInbound());\n     }\n \n+    @Test\n+    public void testResponseDisallowPartialChunks() {\n+        HttpResponseDecoder decoder = new HttpResponseDecoder(\n+            HttpObjectDecoder.DEFAULT_MAX_INITIAL_LINE_LENGTH,\n+            HttpObjectDecoder.DEFAULT_MAX_HEADER_SIZE,\n+            HttpObjectDecoder.DEFAULT_MAX_CHUNK_SIZE,\n+            HttpObjectDecoder.DEFAULT_VALIDATE_HEADERS,\n+            HttpObjectDecoder.DEFAULT_INITIAL_BUFFER_SIZE,\n+            HttpObjectDecoder.DEFAULT_ALLOW_DUPLICATE_CONTENT_LENGTHS,\n+            false);\n+        EmbeddedChannel ch = new EmbeddedChannel(decoder);\n+\n+        String headers = \"HTTP/1.1 200 OK\\r\\n\"\n+            + \"Transfer-Encoding: chunked\\r\\n\"\n+            + \"\\r\\n\";\n+        ch.writeInbound(Unpooled.copiedBuffer(headers, CharsetUtil.US_ASCII));\n+\n+        HttpResponse res = ch.readInbound();\n+        assertThat(res.protocolVersion(), sameInstance(HttpVersion.HTTP_1_1));\n+        assertThat(res.status(), is(HttpResponseStatus.OK));\n+\n+        byte[] chunkBytes = new byte[10];\n+        Random random = new Random();\n+        random.nextBytes(chunkBytes);\n+        final ByteBuf chunk = ch.alloc().buffer().writeBytes(chunkBytes);\n+        final int chunkSize = chunk.readableBytes();\n+        ByteBuf partialChunk1 = chunk.retainedSlice(0, 5);\n+        ByteBuf partialChunk2 = chunk.retainedSlice(5, 5);\n+\n+        assertFalse(ch.writeInbound(Unpooled.copiedBuffer(Integer.toHexString(chunkSize)\n+                                                          + \"\\r\\n\", CharsetUtil.US_ASCII)));\n+        assertFalse(ch.writeInbound(partialChunk1));\n+        assertTrue(ch.writeInbound(partialChunk2));\n+\n+        HttpContent content = ch.readInbound();\n+\n+        assertEquals(chunkSize, content.content().readableBytes());\n+\n+        byte[] decodedChunkBytes = new byte[chunkSize];\n+        content.content().readBytes(decodedChunkBytes, 0, chunkSize);\n+\n+        assertArrayEquals(chunkBytes, decodedChunkBytes);\n+        content.release();\n+\n+        assertFalse(ch.writeInbound(Unpooled.copiedBuffer(\"\\r\\n\", CharsetUtil.US_ASCII)));\n+\n+        // Write the last chunk.\n+        ch.writeInbound(Unpooled.copiedBuffer(\"0\\r\\n\\r\\n\", CharsetUtil.US_ASCII));\n+\n+        // Ensure the last chunk was decoded.\n+        HttpContent lastContent = ch.readInbound();\n+        assertFalse(lastContent.content().isReadable());\n+        lastContent.release();\n+\n+        ch.finish();\n+        assertNull(ch.readInbound());",
        "comment_created_at": "2021-07-12T17:46:37+00:00",
        "comment_author": "NiteshKant",
        "comment_body": "You can do the following and avoid the additional `assertNull(ch.readInbound());` as `finish()` will check both inbound and outbound are empty.\r\n\r\n```suggestion\r\n        assertFalse(ch.finish());\r\n```",
        "pr_file_module": null
      }
    ]
  }
]