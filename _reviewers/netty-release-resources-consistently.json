[
  {
    "discussion_id": "1679545048",
    "pr_number": 14160,
    "pr_file": "codec-doh/src/main/java/io/netty/handler/codec/doh/DohRecordEncoder.java",
    "created_at": "2024-07-16T14:40:56+00:00",
    "commented_code": "+/*\n+ * Copyright 2024 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.doh;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.dns.DnsQuery;\n+import io.netty.handler.codec.http.DefaultFullHttpRequest;\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.handler.codec.http.QueryStringEncoder;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Base64;\n+\n+public final class DohRecordEncoder extends ChannelOutboundHandlerAdapter {\n+    private static final String DEFAULT_DOH_PATH = \"/dns-query\";\n+    private final DohQueryEncoder dohQueryEncoder = new DohQueryEncoder();\n+\n+    private final InetSocketAddress dohServer;\n+    private final boolean useHttpPost;\n+    private final String uri;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer) {\n+        this(dohServer, true, DEFAULT_DOH_PATH);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     * @param useHttpPost the http request method that can be used to connect to dohServer\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer, boolean useHttpPost) {\n+        this(dohServer, useHttpPost, DEFAULT_DOH_PATH);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     * @param uri the http request uri that can be used as address path\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer, String uri) {\n+        this(dohServer, true, uri);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     * @param useHttpPost the http request method that can be used to connect to dohServer\n+     * @param uri the http request uri that can be used as address path\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer, boolean useHttpPost, String uri) {\n+        this.dohServer = ObjectUtil.checkNotNull(dohServer, \"dohServer\");\n+        this.useHttpPost = useHttpPost;\n+        this.uri = ObjectUtil.checkNotNull(uri, \"uri\");\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        ByteBuf content = ctx.alloc().buffer();\n+        dohQueryEncoder.encode(ctx, (DnsQuery) msg, content);\n+\n+        HttpRequest request = useHttpPost ? createPostRequest(content, uri) : createGetRequest(content, uri);\n+\n+        request.headers().set(HttpHeaderNames.HOST, dohServer.getHostName());\n+        request.headers().set(HttpHeaderNames.ACCEPT, \"application/dns-message\");\n+        request.headers().set(HttpHeaderNames.CONTENT_TYPE, \"application/dns-message\");\n+\n+        if (useHttpPost) {\n+            request.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());\n+        }\n+\n+        super.write(ctx, request, promise);\n+    }",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "1679545048",
        "repo_full_name": "netty/netty",
        "pr_number": 14160,
        "pr_file": "codec-doh/src/main/java/io/netty/handler/codec/doh/DohRecordEncoder.java",
        "discussion_id": "1679545048",
        "commented_code": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2024 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.doh;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.dns.DnsQuery;\n+import io.netty.handler.codec.http.DefaultFullHttpRequest;\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.handler.codec.http.QueryStringEncoder;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Base64;\n+\n+public final class DohRecordEncoder extends ChannelOutboundHandlerAdapter {\n+    private static final String DEFAULT_DOH_PATH = \"/dns-query\";\n+    private final DohQueryEncoder dohQueryEncoder = new DohQueryEncoder();\n+\n+    private final InetSocketAddress dohServer;\n+    private final boolean useHttpPost;\n+    private final String uri;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer) {\n+        this(dohServer, true, DEFAULT_DOH_PATH);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     * @param useHttpPost the http request method that can be used to connect to dohServer\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer, boolean useHttpPost) {\n+        this(dohServer, useHttpPost, DEFAULT_DOH_PATH);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     * @param uri the http request uri that can be used as address path\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer, String uri) {\n+        this(dohServer, true, uri);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     * @param useHttpPost the http request method that can be used to connect to dohServer\n+     * @param uri the http request uri that can be used as address path\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer, boolean useHttpPost, String uri) {\n+        this.dohServer = ObjectUtil.checkNotNull(dohServer, \"dohServer\");\n+        this.useHttpPost = useHttpPost;\n+        this.uri = ObjectUtil.checkNotNull(uri, \"uri\");\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        ByteBuf content = ctx.alloc().buffer();\n+        dohQueryEncoder.encode(ctx, (DnsQuery) msg, content);\n+\n+        HttpRequest request = useHttpPost ? createPostRequest(content, uri) : createGetRequest(content, uri);\n+\n+        request.headers().set(HttpHeaderNames.HOST, dohServer.getHostName());\n+        request.headers().set(HttpHeaderNames.ACCEPT, \"application/dns-message\");\n+        request.headers().set(HttpHeaderNames.CONTENT_TYPE, \"application/dns-message\");\n+\n+        if (useHttpPost) {\n+            request.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());\n+        }\n+\n+        super.write(ctx, request, promise);\n+    }",
        "comment_created_at": "2024-07-16T14:40:56+00:00",
        "comment_author": "normanmaurer",
        "comment_body": "We also need to release the query and the content buffer, otherwise we will leak.\r\n\r\n```suggestion\r\n    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\r\n        DnsQuery query = (DnsQuery) msg\r\n        ByteBuf content = ctx.alloc().buffer();\r\n        try {\r\n            dohQueryEncoder.encode(ctx, query, content);\r\n\r\n            HttpRequest request = useHttpPost ? createPostRequest(content, uri) : createGetRequest(content, uri);\r\n\r\n            request.headers().set(HttpHeaderNames.HOST, dohServer.getHostName());\r\n            request.headers().set(HttpHeaderNames.ACCEPT, \"application/dns-message\");\r\n            request.headers().set(HttpHeaderNames.CONTENT_TYPE, \"application/dns-message\");\r\n\r\n            if (useHttpPost) {\r\n                request.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());\r\n           }\r\n\r\n           ctx.write(request, promise);\r\n        } finally {\r\n            content.release();\r\n            query.release();\r\n        }\r\n    }\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "661264231",
    "pr_number": 11419,
    "pr_file": "codec/src/main/java/io/netty/handler/codec/compression/Lz4FrameEncoder.java",
    "created_at": "2021-06-30T08:54:38+00:00",
    "commented_code": "*/\n     private ByteBuf buffer;\n \n+    /**\n+     * Promise associated with writing out the contents of {@link #buffer}.\n+     */\n+    private ChannelPromise bufferPromise;",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "661264231",
        "repo_full_name": "netty/netty",
        "pr_number": 11419,
        "pr_file": "codec/src/main/java/io/netty/handler/codec/compression/Lz4FrameEncoder.java",
        "discussion_id": "661264231",
        "commented_code": "@@ -91,6 +91,11 @@\n      */\n     private ByteBuf buffer;\n \n+    /**\n+     * Promise associated with writing out the contents of {@link #buffer}.\n+     */\n+    private ChannelPromise bufferPromise;",
        "comment_created_at": "2021-06-30T08:54:38+00:00",
        "comment_author": "normanmaurer",
        "comment_body": "You will also need to do something with this `bufferPromise` in `handlerRemoved(...)`. Otherwise you may end up in a situation of this promise never been notified. ",
        "pr_file_module": null
      },
      {
        "comment_id": "661719844",
        "repo_full_name": "netty/netty",
        "pr_number": 11419,
        "pr_file": "codec/src/main/java/io/netty/handler/codec/compression/Lz4FrameEncoder.java",
        "discussion_id": "661264231",
        "commented_code": "@@ -91,6 +91,11 @@\n      */\n     private ByteBuf buffer;\n \n+    /**\n+     * Promise associated with writing out the contents of {@link #buffer}.\n+     */\n+    private ChannelPromise bufferPromise;",
        "comment_created_at": "2021-06-30T18:33:10+00:00",
        "comment_author": "TommyWind",
        "comment_body": "++ right, I made it cancel the promise in this case now.",
        "pr_file_module": null
      },
      {
        "comment_id": "661723501",
        "repo_full_name": "netty/netty",
        "pr_number": 11419,
        "pr_file": "codec/src/main/java/io/netty/handler/codec/compression/Lz4FrameEncoder.java",
        "discussion_id": "661264231",
        "commented_code": "@@ -91,6 +91,11 @@\n      */\n     private ByteBuf buffer;\n \n+    /**\n+     * Promise associated with writing out the contents of {@link #buffer}.\n+     */\n+    private ChannelPromise bufferPromise;",
        "comment_created_at": "2021-06-30T18:38:51+00:00",
        "comment_author": "normanmaurer",
        "comment_body": "I think it would be better to fail it with an exception ",
        "pr_file_module": null
      },
      {
        "comment_id": "661745332",
        "repo_full_name": "netty/netty",
        "pr_number": 11419,
        "pr_file": "codec/src/main/java/io/netty/handler/codec/compression/Lz4FrameEncoder.java",
        "discussion_id": "661264231",
        "commented_code": "@@ -91,6 +91,11 @@\n      */\n     private ByteBuf buffer;\n \n+    /**\n+     * Promise associated with writing out the contents of {@link #buffer}.\n+     */\n+    private ChannelPromise bufferPromise;",
        "comment_created_at": "2021-06-30T19:14:10+00:00",
        "comment_author": "TommyWind",
        "comment_body": "++ made it fail with exception now",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "392208235",
    "pr_number": 9935,
    "pr_file": "transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java",
    "created_at": "2020-03-13T12:52:27+00:00",
    "commented_code": "@Override\n     protected void doClose() throws Exception {\n+        Queue<AbstractMap.SimpleEntry<Object, ChannelPromise>> queue = tempInboundMessages();\n+        if (isNotEmpty(queue)) {\n+            queue.clear();",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "392208235",
        "repo_full_name": "netty/netty",
        "pr_number": 9935,
        "pr_file": "transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java",
        "discussion_id": "392208235",
        "commented_code": "@@ -718,12 +752,37 @@ protected void doDisconnect() throws Exception {\n \n     @Override\n     protected void doClose() throws Exception {\n+        Queue<AbstractMap.SimpleEntry<Object, ChannelPromise>> queue = tempInboundMessages();\n+        if (isNotEmpty(queue)) {\n+            queue.clear();",
        "comment_created_at": "2020-03-13T12:52:27+00:00",
        "comment_author": "normanmaurer",
        "comment_body": "This is not enough... You will need to release the message as well and fail the promise.\r\n\r\n```\r\nClosedChannelException exception = null;\r\nfor (;;) {\r\n    AbstractMap.SimpleEntry<Object, ChannelPromise> entry = queue.poll();\r\n    if (entry == null) {\r\n        break;\r\n    }\r\n    ReferenceCountedUtil.release(entry.getKey());\r\n    ChannelPromise promise = entry.getValue();\r\n    if (promise != null) {\r\n        if (exception == null) {\r\n            exception = new ClosedChannelException();\r\n        }\r\n        promise.tryFailure(exception);\r\n    }\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "392210749",
        "repo_full_name": "netty/netty",
        "pr_number": 9935,
        "pr_file": "transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java",
        "discussion_id": "392208235",
        "commented_code": "@@ -718,12 +752,37 @@ protected void doDisconnect() throws Exception {\n \n     @Override\n     protected void doClose() throws Exception {\n+        Queue<AbstractMap.SimpleEntry<Object, ChannelPromise>> queue = tempInboundMessages();\n+        if (isNotEmpty(queue)) {\n+            queue.clear();",
        "comment_created_at": "2020-03-13T12:57:49+00:00",
        "comment_author": "carryxyh",
        "comment_body": "My fault...\r\nFixed ...",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1921880129",
    "pr_number": 14690,
    "pr_file": "transport-classes-io_uring/src/main/java/io/netty/channel/uring/IoUringIoHandler.java",
    "created_at": "2025-01-20T06:56:40+00:00",
    "commented_code": "throw new UncheckedIOException(Errors.newIOException(\"io_uring_register\", result));\n             }\n         }\n+\n+        registeredIoUringBufferRing = new IntObjectHashMap<>();\n+        List<BufferRingConfig> bufferRingConfigs = config.getInternBufferRingConfigs();\n+        if (!bufferRingConfigs.isEmpty()) {\n+            if (!IoUring.isRegisterBufferRingSupported()) {\n+                throw new UnsupportedOperationException(\"io_uring_register_buffer_ring is not supported\");\n+            }\n+            for (BufferRingConfig bufferRingConfig : bufferRingConfigs) {\n+                try {\n+                    registerBufferRing(bufferRingConfig);\n+                } catch (Errors.NativeIoException e) {\n+                    for (IoUringBufferRing bufferRing : registeredIoUringBufferRing.values()) {\n+                        bufferRing.close();\n+                    }\n+                    throw new UncheckedIOException(e);\n+                }",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "1921880129",
        "repo_full_name": "netty/netty",
        "pr_number": 14690,
        "pr_file": "transport-classes-io_uring/src/main/java/io/netty/channel/uring/IoUringIoHandler.java",
        "discussion_id": "1921880129",
        "commented_code": "@@ -87,13 +91,40 @@ public final class IoUringIoHandler implements IoHandler {\n                 throw new UncheckedIOException(Errors.newIOException(\"io_uring_register\", result));\n             }\n         }\n+\n+        registeredIoUringBufferRing = new IntObjectHashMap<>();\n+        List<BufferRingConfig> bufferRingConfigs = config.getInternBufferRingConfigs();\n+        if (!bufferRingConfigs.isEmpty()) {\n+            if (!IoUring.isRegisterBufferRingSupported()) {\n+                throw new UnsupportedOperationException(\"io_uring_register_buffer_ring is not supported\");\n+            }\n+            for (BufferRingConfig bufferRingConfig : bufferRingConfigs) {\n+                try {\n+                    registerBufferRing(bufferRingConfig);\n+                } catch (Errors.NativeIoException e) {\n+                    for (IoUringBufferRing bufferRing : registeredIoUringBufferRing.values()) {\n+                        bufferRing.close();\n+                    }\n+                    throw new UncheckedIOException(e);\n+                }",
        "comment_created_at": "2025-01-20T06:56:40+00:00",
        "comment_author": "normanmaurer",
        "comment_body": "```suggestion\r\n            if (!IoUring.isRegisterBufferRingSupported()) {\r\n                // Close ringBuffer before throwing to ensure we release all memory on failure.\r\n                ringBuffer.close();\r\n                throw new UnsupportedOperationException(\"io_uring_register_buffer_ring is not supported\");\r\n            }\r\n            for (BufferRingConfig bufferRingConfig : bufferRingConfigs) {\r\n                try {\r\n                    registerBufferRing(bufferRingConfig);\r\n                } catch (Errors.NativeIoException e) {\r\n                    for (IoUringBufferRing bufferRing : registeredIoUringBufferRing.values()) {\r\n                        bufferRing.close();\r\n                    }\r\n                    // Close ringBuffer before throwing to ensure we release all memory on failure.\r\n                    ringBuffer.close();\r\n                    throw new UncheckedIOException(e);\r\n                }\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1846046341",
    "pr_number": 14466,
    "pr_file": "codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java",
    "created_at": "2024-11-18T08:04:09+00:00",
    "commented_code": "return null;\n         }\n \n-        if (supportsCompressionOptions) {\n-            String targetContentEncoding = determineEncoding(acceptEncoding);\n-            if (targetContentEncoding == null) {\n-                return null;\n-            }\n-\n-            CompressionEncoderFactory encoderFactory = factories.get(targetContentEncoding);\n-\n-            if (encoderFactory == null) {\n-                throw new Error();\n-            }\n-\n-            return new Result(targetContentEncoding,\n-                    new EmbeddedChannel(ctx.channel().id(), ctx.channel().metadata().hasDisconnect(),\n-                            ctx.channel().config(), encoderFactory.createEncoder()));\n-        } else {\n-            ZlibWrapper wrapper = determineWrapper(acceptEncoding);\n-            if (wrapper == null) {\n-                return null;\n-            }\n+        String targetContentEncoding = determineEncoding(acceptEncoding);\n+        if (targetContentEncoding == null) {\n+            return null;\n+        }\n \n-            String targetContentEncoding;\n-            switch (wrapper) {\n-                case GZIP:\n-                    targetContentEncoding = \"gzip\";\n-                    break;\n-                case ZLIB:\n-                    targetContentEncoding = \"deflate\";\n-                    break;\n-                default:\n-                    throw new Error();\n-            }\n+        CompressionEncoderFactory encoderFactory = factories.get(targetContentEncoding);\n \n-            return new Result(\n-                    targetContentEncoding,\n-                    new EmbeddedChannel(ctx.channel().id(), ctx.channel().metadata().hasDisconnect(),\n-                            ctx.channel().config(), ZlibCodecFactory.newZlibEncoder(\n-                            wrapper, compressionLevel, windowBits, memLevel)));\n+        if (encoderFactory == null) {\n+            throw new Error();",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "1846046341",
        "repo_full_name": "netty/netty",
        "pr_number": 14466,
        "pr_file": "codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java",
        "discussion_id": "1846046341",
        "commented_code": "@@ -258,45 +258,20 @@ protected Result beginEncode(HttpResponse httpResponse, String acceptEncoding) t\n             return null;\n         }\n \n-        if (supportsCompressionOptions) {\n-            String targetContentEncoding = determineEncoding(acceptEncoding);\n-            if (targetContentEncoding == null) {\n-                return null;\n-            }\n-\n-            CompressionEncoderFactory encoderFactory = factories.get(targetContentEncoding);\n-\n-            if (encoderFactory == null) {\n-                throw new Error();\n-            }\n-\n-            return new Result(targetContentEncoding,\n-                    new EmbeddedChannel(ctx.channel().id(), ctx.channel().metadata().hasDisconnect(),\n-                            ctx.channel().config(), encoderFactory.createEncoder()));\n-        } else {\n-            ZlibWrapper wrapper = determineWrapper(acceptEncoding);\n-            if (wrapper == null) {\n-                return null;\n-            }\n+        String targetContentEncoding = determineEncoding(acceptEncoding);\n+        if (targetContentEncoding == null) {\n+            return null;\n+        }\n \n-            String targetContentEncoding;\n-            switch (wrapper) {\n-                case GZIP:\n-                    targetContentEncoding = \"gzip\";\n-                    break;\n-                case ZLIB:\n-                    targetContentEncoding = \"deflate\";\n-                    break;\n-                default:\n-                    throw new Error();\n-            }\n+        CompressionEncoderFactory encoderFactory = factories.get(targetContentEncoding);\n \n-            return new Result(\n-                    targetContentEncoding,\n-                    new EmbeddedChannel(ctx.channel().id(), ctx.channel().metadata().hasDisconnect(),\n-                            ctx.channel().config(), ZlibCodecFactory.newZlibEncoder(\n-                            wrapper, compressionLevel, windowBits, memLevel)));\n+        if (encoderFactory == null) {\n+            throw new Error();",
        "comment_created_at": "2024-11-18T08:04:09+00:00",
        "comment_author": "normanmaurer",
        "comment_body": "```suggestion\r\n            throw new IllegalStateException(\"Couldn't find CompressionEncoderFactory: \" + targetContentEncoding);\r\n```",
        "pr_file_module": null
      }
    ]
  }
]