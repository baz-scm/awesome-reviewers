[
  {
    "discussion_id": "1679382734",
    "pr_number": 14160,
    "pr_file": "codec-doh/src/main/java/io/netty/handler/codec/doh/DohRecordEncoder.java",
    "created_at": "2024-07-16T13:19:50+00:00",
    "commented_code": "+/*\n+ * Copyright 2024 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.doh;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.dns.DnsQuery;\n+import io.netty.handler.codec.http.DefaultFullHttpRequest;\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.handler.codec.http.QueryStringEncoder;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Base64;\n+\n+public final class DohRecordEncoder extends ChannelOutboundHandlerAdapter {\n+    private static final String DEFAULT_DOH_PATH = \"/dns-query\";\n+    private final DohQueryEncoder dohQueryEncoder = new DohQueryEncoder();\n+\n+    private final InetSocketAddress dohServer;\n+    private final boolean useHttpPost;\n+    private final String uri;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer) {\n+        this(dohServer, true, DEFAULT_DOH_PATH);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     * @param useHttpPost the http request method that can be used to connect to dohServer\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer, boolean useHttpPost) {\n+        this(dohServer, useHttpPost, DEFAULT_DOH_PATH);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     * @param uri the http request uri that can be used as address path\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer, String uri) {\n+        this(dohServer, true, uri);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     * @param useHttpPost the http request method that can be used to connect to dohServer\n+     * @param uri the http request uri that can be used as address path\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer, boolean useHttpPost, String uri) {\n+        ObjectUtil.checkNotNull(dohServer, \"dohServer\");\n+        ObjectUtil.checkNotNull(uri, \"uri\");\n+\n+        this.dohServer = dohServer;\n+        this.useHttpPost = useHttpPost;\n+        this.uri = uri;\n+    }",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "1679382734",
        "repo_full_name": "netty/netty",
        "pr_number": 14160,
        "pr_file": "codec-doh/src/main/java/io/netty/handler/codec/doh/DohRecordEncoder.java",
        "discussion_id": "1679382734",
        "commented_code": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2024 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.doh;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelOutboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.dns.DnsQuery;\n+import io.netty.handler.codec.http.DefaultFullHttpRequest;\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.handler.codec.http.QueryStringEncoder;\n+import io.netty.util.internal.ObjectUtil;\n+\n+import java.net.InetSocketAddress;\n+import java.util.Base64;\n+\n+public final class DohRecordEncoder extends ChannelOutboundHandlerAdapter {\n+    private static final String DEFAULT_DOH_PATH = \"/dns-query\";\n+    private final DohQueryEncoder dohQueryEncoder = new DohQueryEncoder();\n+\n+    private final InetSocketAddress dohServer;\n+    private final boolean useHttpPost;\n+    private final String uri;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer) {\n+        this(dohServer, true, DEFAULT_DOH_PATH);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     * @param useHttpPost the http request method that can be used to connect to dohServer\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer, boolean useHttpPost) {\n+        this(dohServer, useHttpPost, DEFAULT_DOH_PATH);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     * @param uri the http request uri that can be used as address path\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer, String uri) {\n+        this(dohServer, true, uri);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param dohServer the dohServer address\n+     * @param useHttpPost the http request method that can be used to connect to dohServer\n+     * @param uri the http request uri that can be used as address path\n+     */\n+    public DohRecordEncoder(InetSocketAddress dohServer, boolean useHttpPost, String uri) {\n+        ObjectUtil.checkNotNull(dohServer, \"dohServer\");\n+        ObjectUtil.checkNotNull(uri, \"uri\");\n+\n+        this.dohServer = dohServer;\n+        this.useHttpPost = useHttpPost;\n+        this.uri = uri;\n+    }",
        "comment_created_at": "2024-07-16T13:19:50+00:00",
        "comment_author": "normanmaurer",
        "comment_body": "```suggestion\r\n    public DohRecordEncoder(InetSocketAddress dohServer, boolean useHttpPost, String uri) {\r\n        this.dohServer = ObjectUtil.checkNotNull(dohServer, \"dohServer\");\r\n        this.useHttpPost = useHttpPost;\r\n        this.uri = ObjectUtil.checkNotNull(uri, \"uri\");\r\n    }\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1256183640",
    "pr_number": 13473,
    "pr_file": "codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java",
    "created_at": "2023-07-07T17:35:28+00:00",
    "commented_code": "return pathEndIdx;\n     }\n \n-    private static Map<String, List<String>> decodeParams(String s, int from, Charset charset, int paramsLimit,\n-                                                          boolean semicolonIsNormalChar) {\n-        int len = s.length();\n+    private static String parsableUri(URI uri) {\n+        String rawPath = uri.getRawPath();\n+        if (rawPath == null) {\n+            rawPath = EMPTY_STRING;\n+        }\n+        String rawQuery = uri.getRawQuery();\n+        // Also take care of cut of things like \"http://localhost\"\n+        return rawQuery == null? rawPath : rawPath + '?' + rawQuery;\n+    }\n+\n+    private static int pathEndIdx(URI uri) {\n+        return uri.getRawPath().length();\n+    }\n+\n+    public static int getDefaultMaxParams() {\n+        return DEFAULT_MAX_PARAMS;\n+    }\n+\n+    public static boolean decodeParams(URI uri, Charset charset, int maxParams, boolean semicolonIsNormalChar,\n+                                       QueryDecodedParameters parameters) {\n+        checkNotNull(uri, \"uri\");\n+        checkNotNull(charset, \"charset\");\n+        checkPositive(maxParams, \"maxParams\");",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "1256183640",
        "repo_full_name": "netty/netty",
        "pr_number": 13473,
        "pr_file": "codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java",
        "discussion_id": "1256183640",
        "commented_code": "@@ -223,55 +218,176 @@ private int pathEndIdx() {\n         return pathEndIdx;\n     }\n \n-    private static Map<String, List<String>> decodeParams(String s, int from, Charset charset, int paramsLimit,\n-                                                          boolean semicolonIsNormalChar) {\n-        int len = s.length();\n+    private static String parsableUri(URI uri) {\n+        String rawPath = uri.getRawPath();\n+        if (rawPath == null) {\n+            rawPath = EMPTY_STRING;\n+        }\n+        String rawQuery = uri.getRawQuery();\n+        // Also take care of cut of things like \"http://localhost\"\n+        return rawQuery == null? rawPath : rawPath + '?' + rawQuery;\n+    }\n+\n+    private static int pathEndIdx(URI uri) {\n+        return uri.getRawPath().length();\n+    }\n+\n+    public static int getDefaultMaxParams() {\n+        return DEFAULT_MAX_PARAMS;\n+    }\n+\n+    public static boolean decodeParams(URI uri, Charset charset, int maxParams, boolean semicolonIsNormalChar,\n+                                       QueryDecodedParameters parameters) {\n+        checkNotNull(uri, \"uri\");\n+        checkNotNull(charset, \"charset\");\n+        checkPositive(maxParams, \"maxParams\");",
        "comment_created_at": "2023-07-07T17:35:28+00:00",
        "comment_author": "chrisvest",
        "comment_body": "We should check that `parameters` is not null.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1256184229",
    "pr_number": 13473,
    "pr_file": "codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java",
    "created_at": "2023-07-07T17:35:46+00:00",
    "commented_code": "return pathEndIdx;\n     }\n \n-    private static Map<String, List<String>> decodeParams(String s, int from, Charset charset, int paramsLimit,\n-                                                          boolean semicolonIsNormalChar) {\n-        int len = s.length();\n+    private static String parsableUri(URI uri) {\n+        String rawPath = uri.getRawPath();\n+        if (rawPath == null) {\n+            rawPath = EMPTY_STRING;\n+        }\n+        String rawQuery = uri.getRawQuery();\n+        // Also take care of cut of things like \"http://localhost\"\n+        return rawQuery == null? rawPath : rawPath + '?' + rawQuery;\n+    }\n+\n+    private static int pathEndIdx(URI uri) {\n+        return uri.getRawPath().length();\n+    }\n+\n+    public static int getDefaultMaxParams() {\n+        return DEFAULT_MAX_PARAMS;\n+    }\n+\n+    public static boolean decodeParams(URI uri, Charset charset, int maxParams, boolean semicolonIsNormalChar,\n+                                       QueryDecodedParameters parameters) {\n+        checkNotNull(uri, \"uri\");\n+        checkNotNull(charset, \"charset\");\n+        checkPositive(maxParams, \"maxParams\");\n+        String parsableUri = parsableUri(uri);\n+        int pathEndIdx = pathEndIdx(uri);\n+        Object result = decodeParams(parsableUri, pathEndIdx, charset, parameters, maxParams, semicolonIsNormalChar);\n+        return result == null;\n+    }\n+\n+    public static boolean decodeParams(String uri, Charset charset, boolean hasPath, int maxParams,\n+                                       boolean semicolonIsNormalChar,\n+                                       QueryDecodedParameters parameters) {\n+        checkNotNull(uri, \"uri\");\n+        checkNotNull(charset, \"charset\");\n+        checkPositive(maxParams, \"maxParams\");",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "1256184229",
        "repo_full_name": "netty/netty",
        "pr_number": 13473,
        "pr_file": "codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java",
        "discussion_id": "1256184229",
        "commented_code": "@@ -223,55 +218,176 @@ private int pathEndIdx() {\n         return pathEndIdx;\n     }\n \n-    private static Map<String, List<String>> decodeParams(String s, int from, Charset charset, int paramsLimit,\n-                                                          boolean semicolonIsNormalChar) {\n-        int len = s.length();\n+    private static String parsableUri(URI uri) {\n+        String rawPath = uri.getRawPath();\n+        if (rawPath == null) {\n+            rawPath = EMPTY_STRING;\n+        }\n+        String rawQuery = uri.getRawQuery();\n+        // Also take care of cut of things like \"http://localhost\"\n+        return rawQuery == null? rawPath : rawPath + '?' + rawQuery;\n+    }\n+\n+    private static int pathEndIdx(URI uri) {\n+        return uri.getRawPath().length();\n+    }\n+\n+    public static int getDefaultMaxParams() {\n+        return DEFAULT_MAX_PARAMS;\n+    }\n+\n+    public static boolean decodeParams(URI uri, Charset charset, int maxParams, boolean semicolonIsNormalChar,\n+                                       QueryDecodedParameters parameters) {\n+        checkNotNull(uri, \"uri\");\n+        checkNotNull(charset, \"charset\");\n+        checkPositive(maxParams, \"maxParams\");\n+        String parsableUri = parsableUri(uri);\n+        int pathEndIdx = pathEndIdx(uri);\n+        Object result = decodeParams(parsableUri, pathEndIdx, charset, parameters, maxParams, semicolonIsNormalChar);\n+        return result == null;\n+    }\n+\n+    public static boolean decodeParams(String uri, Charset charset, boolean hasPath, int maxParams,\n+                                       boolean semicolonIsNormalChar,\n+                                       QueryDecodedParameters parameters) {\n+        checkNotNull(uri, \"uri\");\n+        checkNotNull(charset, \"charset\");\n+        checkPositive(maxParams, \"maxParams\");",
        "comment_created_at": "2023-07-07T17:35:46+00:00",
        "comment_author": "chrisvest",
        "comment_body": "We should check that `parameters` is not null.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1924171148",
    "pr_number": 14701,
    "pr_file": "transport/src/main/java/io/netty/channel/IoHandlerFactory.java",
    "created_at": "2025-01-21T18:06:43+00:00",
    "commented_code": "/**\n      * Creates a new {@link IoHandler} instance.\n      *\n-     * @return  a new {@link IoHandler} instance.\n+     * @param eventLoop the {@link IoEventLoop} that uses the {@link IoHandler}.\n+     * @return          a new {@link IoHandler} instance.\n      */\n-    IoHandler newHandler();\n+    IoHandler newHandler(IoEventLoop eventLoop);",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "1924171148",
        "repo_full_name": "netty/netty",
        "pr_number": 14701,
        "pr_file": "transport/src/main/java/io/netty/channel/IoHandlerFactory.java",
        "discussion_id": "1924171148",
        "commented_code": "@@ -23,7 +23,8 @@ public interface IoHandlerFactory {\n     /**\n      * Creates a new {@link IoHandler} instance.\n      *\n-     * @return  a new {@link IoHandler} instance.\n+     * @param eventLoop the {@link IoEventLoop} that uses the {@link IoHandler}.\n+     * @return          a new {@link IoHandler} instance.\n      */\n-    IoHandler newHandler();\n+    IoHandler newHandler(IoEventLoop eventLoop);",
        "comment_created_at": "2025-01-21T18:06:43+00:00",
        "comment_author": "chrisvest",
        "comment_body": "I think we can safely require that the event loop isn't null, and add checks in the method implementations.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1924160241",
    "pr_number": 14700,
    "pr_file": "transport/src/main/java/io/netty/channel/local/LocalIoHandler.java",
    "created_at": "2025-01-21T17:57:15+00:00",
    "commented_code": "}\n \n     @Override\n-    public void wakeup(IoEventLoop eventLoop) {\n-        if (!eventLoop.inEventLoop()) {\n+    public void initalize(IoEventLoop eventLoop) {\n+        this.eventLoop = eventLoop;\n+    }\n+\n+    @Override\n+    public void wakeup() {\n+        if (eventLoop == null || !eventLoop.inEventLoop()) {",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "1924160241",
        "repo_full_name": "netty/netty",
        "pr_number": 14700,
        "pr_file": "transport/src/main/java/io/netty/channel/local/LocalIoHandler.java",
        "discussion_id": "1924160241",
        "commented_code": "@@ -68,8 +69,13 @@ public int run(IoExecutionContext runner) {\n     }\n \n     @Override\n-    public void wakeup(IoEventLoop eventLoop) {\n-        if (!eventLoop.inEventLoop()) {\n+    public void initalize(IoEventLoop eventLoop) {\n+        this.eventLoop = eventLoop;\n+    }\n+\n+    @Override\n+    public void wakeup() {\n+        if (eventLoop == null || !eventLoop.inEventLoop()) {",
        "comment_created_at": "2025-01-21T17:57:15+00:00",
        "comment_author": "chrisvest",
        "comment_body": "Can we add a `requireNonNull` to the `initialize` method and remove this check?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1862752149",
    "pr_number": 14516,
    "pr_file": "buffer/src/main/java/io/netty/buffer/AdaptivePoolingAllocator.java",
    "created_at": "2024-11-28T23:18:42+00:00",
    "commented_code": "// Constructor only used by the MAGAZINE_FREED sentinel.\n             delegate = null;\n             magazine = null;\n+            allocator = null;\n             capacity = 0;\n             pooled = false;\n         }\n \n         Chunk(AbstractByteBuf delegate, Magazine magazine, boolean pooled) {\n             this.delegate = delegate;\n-            this.magazine = magazine;\n             this.pooled = pooled;\n             capacity = delegate.capacity();\n-            magazine.usedMemory.getAndAdd(capacity);\n             updater.setInitialValue(this);\n+            allocator = magazine.parent;\n+            attachToMagazine(magazine);\n+        }\n+\n+        Magazine currentMagazine()  {\n+            return magazine;\n+        }\n+\n+        void detachFromMagazine() {\n+            magazine.usedMemory.getAndAdd(-capacity);",
    "repo_full_name": "netty/netty",
    "discussion_comments": [
      {
        "comment_id": "1862752149",
        "repo_full_name": "netty/netty",
        "pr_number": 14516,
        "pr_file": "buffer/src/main/java/io/netty/buffer/AdaptivePoolingAllocator.java",
        "discussion_id": "1862752149",
        "commented_code": "@@ -749,17 +760,33 @@ protected long unsafeOffset() {\n             // Constructor only used by the MAGAZINE_FREED sentinel.\n             delegate = null;\n             magazine = null;\n+            allocator = null;\n             capacity = 0;\n             pooled = false;\n         }\n \n         Chunk(AbstractByteBuf delegate, Magazine magazine, boolean pooled) {\n             this.delegate = delegate;\n-            this.magazine = magazine;\n             this.pooled = pooled;\n             capacity = delegate.capacity();\n-            magazine.usedMemory.getAndAdd(capacity);\n             updater.setInitialValue(this);\n+            allocator = magazine.parent;\n+            attachToMagazine(magazine);\n+        }\n+\n+        Magazine currentMagazine()  {\n+            return magazine;\n+        }\n+\n+        void detachFromMagazine() {\n+            magazine.usedMemory.getAndAdd(-capacity);",
        "comment_created_at": "2024-11-28T23:18:42+00:00",
        "comment_author": "chrisvest",
        "comment_body": "Only do this if `magazine` is not already `null`. This can happen through a line of calls that start at `freeCentralQueue()`.",
        "pr_file_module": null
      }
    ]
  }
]