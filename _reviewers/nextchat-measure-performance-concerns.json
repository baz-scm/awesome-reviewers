[
  {
    "discussion_id": "1537431018",
    "pr_number": 4186,
    "pr_file": "app/components/markdown.tsx",
    "created_at": "2024-03-25T11:22:39+00:00",
    "commented_code": "return escapedText;\n }\n \n+function escapeBrackets(text: string) {\n+  const pattern =\n+    /(```[\\s\\S]*?```|`.*?`)|\\\\\\[([\\s\\S]*?[^\\\\])\\\\\\]|\\\\\\((.*?)\\\\\\)/g;",
    "repo_full_name": "ChatGPTNextWeb/NextChat",
    "discussion_comments": [
      {
        "comment_id": "1537431018",
        "repo_full_name": "ChatGPTNextWeb/NextChat",
        "pr_number": 4186,
        "pr_file": "app/components/markdown.tsx",
        "discussion_id": "1537431018",
        "commented_code": "@@ -116,9 +116,27 @@ function escapeDollarNumber(text: string) {\n   return escapedText;\n }\n \n+function escapeBrackets(text: string) {\n+  const pattern =\n+    /(```[\\s\\S]*?```|`.*?`)|\\\\\\[([\\s\\S]*?[^\\\\])\\\\\\]|\\\\\\((.*?)\\\\\\)/g;",
        "comment_created_at": "2024-03-25T11:22:39+00:00",
        "comment_author": "Dean-YZG",
        "comment_body": "the execution performance of the the block of code is a little bad",
        "pr_file_module": null
      },
      {
        "comment_id": "1538336892",
        "repo_full_name": "ChatGPTNextWeb/NextChat",
        "pr_number": 4186,
        "pr_file": "app/components/markdown.tsx",
        "discussion_id": "1537431018",
        "commented_code": "@@ -116,9 +116,27 @@ function escapeDollarNumber(text: string) {\n   return escapedText;\n }\n \n+function escapeBrackets(text: string) {\n+  const pattern =\n+    /(```[\\s\\S]*?```|`.*?`)|\\\\\\[([\\s\\S]*?[^\\\\])\\\\\\]|\\\\\\((.*?)\\\\\\)/g;",
        "comment_created_at": "2024-03-25T22:56:56+00:00",
        "comment_author": "H0llyW00dzZ",
        "comment_body": "> the execution performance of the the block of code is a little bad\r\n\r\nIt's no wonder that regular expressions (regex) often have poor performance, especially for interpreting languages, unlike regex in compiled languages (e.g., regex in Golang, which performs better as it is compiled).\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1538800202",
        "repo_full_name": "ChatGPTNextWeb/NextChat",
        "pr_number": 4186,
        "pr_file": "app/components/markdown.tsx",
        "discussion_id": "1537431018",
        "commented_code": "@@ -116,9 +116,27 @@ function escapeDollarNumber(text: string) {\n   return escapedText;\n }\n \n+function escapeBrackets(text: string) {\n+  const pattern =\n+    /(```[\\s\\S]*?```|`.*?`)|\\\\\\[([\\s\\S]*?[^\\\\])\\\\\\]|\\\\\\((.*?)\\\\\\)/g;",
        "comment_created_at": "2024-03-26T08:43:53+00:00",
        "comment_author": "MrrDrr",
        "comment_body": "At first I was also worried about the performance, but later I found that this worry was unnecessary.\r\nI used the following code to log the time consumed for each call, and the results showed that the function is fast enough.\r\n\r\n```javascript\r\nfunction escapeBrackets(text: string) {\r\n  let begin_time = performance.now();\r\n  const pattern =\r\n    /(```[\\s\\S]*?```|`.*?`)|\\\\\\[([\\s\\S]*?[^\\\\])\\\\\\]|\\\\\\((.*?)\\\\\\)/g;\r\n  let res = text.replace(\r\n    pattern,\r\n    (match, codeBlock, squareBracket, roundBracket) => {\r\n      if (codeBlock) {\r\n        return codeBlock;\r\n      } else if (squareBracket) {\r\n        return `$$${squareBracket}$$`;\r\n      } else if (roundBracket) {\r\n        return `$${roundBracket}$`;\r\n      }\r\n      return match;\r\n    },\r\n  );\r\n  let endTime = performance.now();\r\n  console.log(`escapeBrackets, string length=${text.length}, time consumed=${endTime - begin_time} ms`);\r\n  return res;\r\n}\r\n```\r\n![\u5fae\u4fe1\u622a\u56fe_20240326163806](https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web/assets/28617777/2245f8b2-46d1-4792-aa56-35bf4513744f)\r\n![\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u548c\u8bc4\u4f30\u6307\u6807](https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web/assets/28617777/b10310e5-1c5f-4ad8-9793-9dc2a314da97)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1538805780",
        "repo_full_name": "ChatGPTNextWeb/NextChat",
        "pr_number": 4186,
        "pr_file": "app/components/markdown.tsx",
        "discussion_id": "1537431018",
        "commented_code": "@@ -116,9 +116,27 @@ function escapeDollarNumber(text: string) {\n   return escapedText;\n }\n \n+function escapeBrackets(text: string) {\n+  const pattern =\n+    /(```[\\s\\S]*?```|`.*?`)|\\\\\\[([\\s\\S]*?[^\\\\])\\\\\\]|\\\\\\((.*?)\\\\\\)/g;",
        "comment_created_at": "2024-03-26T08:48:06+00:00",
        "comment_author": "MrrDrr",
        "comment_body": "Modern js engines compile and cache regexp at load time, so this function will not recompile it every time",
        "pr_file_module": null
      },
      {
        "comment_id": "1539457600",
        "repo_full_name": "ChatGPTNextWeb/NextChat",
        "pr_number": 4186,
        "pr_file": "app/components/markdown.tsx",
        "discussion_id": "1537431018",
        "commented_code": "@@ -116,9 +116,27 @@ function escapeDollarNumber(text: string) {\n   return escapedText;\n }\n \n+function escapeBrackets(text: string) {\n+  const pattern =\n+    /(```[\\s\\S]*?```|`.*?`)|\\\\\\[([\\s\\S]*?[^\\\\])\\\\\\]|\\\\\\((.*?)\\\\\\)/g;",
        "comment_created_at": "2024-03-26T15:12:44+00:00",
        "comment_author": "H0llyW00dzZ",
        "comment_body": "> At first I was also worried about the performance, but later I found that this worry was unnecessary. I used the following code to log the time consumed for each call, and the results showed that the function is fast enough.\r\n> \r\n> ```js\r\n> function escapeBrackets(text: string) {\r\n>   let begin_time = performance.now();\r\n>   const pattern =\r\n>     /(```[\\s\\S]*?```|`.*?`)|\\\\\\[([\\s\\S]*?[^\\\\])\\\\\\]|\\\\\\((.*?)\\\\\\)/g;\r\n>   let res = text.replace(\r\n>     pattern,\r\n>     (match, codeBlock, squareBracket, roundBracket) => {\r\n>       if (codeBlock) {\r\n>         return codeBlock;\r\n>       } else if (squareBracket) {\r\n>         return `$$${squareBracket}$$`;\r\n>       } else if (roundBracket) {\r\n>         return `$${roundBracket}$`;\r\n>       }\r\n>       return match;\r\n>     },\r\n>   );\r\n>   let endTime = performance.now();\r\n>   console.log(`escapeBrackets, string length=${text.length}, time consumed=${endTime - begin_time} ms`);\r\n>   return res;\r\n> }\r\n> ```\r\n> \r\n> ![\u5fae\u4fe1\u622a\u56fe_20240326163806](https://private-user-images.githubusercontent.com/28617777/316787839-2245f8b2-46d1-4792-aa56-35bf4513744f.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTE0NjYxMzMsIm5iZiI6MTcxMTQ2NTgzMywicGF0aCI6Ii8yODYxNzc3Ny8zMTY3ODc4MzktMjI0NWY4YjItNDZkMS00NzkyLWFhNTYtMzViZjQ1MTM3NDRmLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjYlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI2VDE1MTAzM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWM5ODZiYmYxM2JjZDJlOWE4MWYxMzE0NjJmMTNmNTM4OGRhZWJjNzUzZmRjODdlZjNhN2I1OTUzOTkyZDFhMTYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.cB8OzrKyOTeFogM7u_W01_PxyX8J6D-dMy8PqeXa9Qs) ![\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u548c\u8bc4\u4f30\u6307\u6807](https://private-user-images.githubusercontent.com/28617777/316787872-b10310e5-1c5f-4ad8-9793-9dc2a314da97.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTE0NjYxMzMsIm5iZiI6MTcxMTQ2NTgzMywicGF0aCI6Ii8yODYxNzc3Ny8zMTY3ODc4NzItYjEwMzEwZTUtMWM1Zi00YWQ4LTk3OTMtOWRjMmEzMTRkYTk3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjYlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzI2VDE1MTAzM1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWZkNTAxODM4NzBlYWNlZmZmY2M3YjBiYjgxYzIzNzBlMzAzM2UxZDk1NmIyYmQwYjQ3ZDhmZGUwZGVlYTQ2NmUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.THrj-vPiztBb9WXADTTdDms236-YFFPZojZhyxGA160)\r\n\r\nit because got handle by react `useMemo` that's why it looks faster\r\n\r\n![image](https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web/assets/17626300/8063fa26-c203-45de-aa08-4c315eef8bef)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1539480794",
        "repo_full_name": "ChatGPTNextWeb/NextChat",
        "pr_number": 4186,
        "pr_file": "app/components/markdown.tsx",
        "discussion_id": "1537431018",
        "commented_code": "@@ -116,9 +116,27 @@ function escapeDollarNumber(text: string) {\n   return escapedText;\n }\n \n+function escapeBrackets(text: string) {\n+  const pattern =\n+    /(```[\\s\\S]*?```|`.*?`)|\\\\\\[([\\s\\S]*?[^\\\\])\\\\\\]|\\\\\\((.*?)\\\\\\)/g;",
        "comment_created_at": "2024-03-26T15:22:24+00:00",
        "comment_author": "H0llyW00dzZ",
        "comment_body": "> Modern js engines compile and cache regexp at load time, so this function will not recompile it every time\r\n\r\nmore likely depends of framework web front-end (e.g, react)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1798730575",
    "pr_number": 5650,
    "pr_file": "app/components/chat.tsx",
    "created_at": "2024-10-14T04:14:44+00:00",
    "commented_code": "});\n       }\n       setSpeechStatus(true);\n-      ttsPlayer\n-        .play(audioBuffer, () => {\n-          setSpeechStatus(false);\n-        })\n-        .catch((e) => {\n-          console.error(\"[OpenAI Speech]\", e);\n-          showToast(prettyObject(e));\n+      try {\n+        const waveFile = arrayBufferToWav(audioBuffer);\n+        const audioFile = new Blob([waveFile], { type: \"audio/wav\" });\n+\n+        const audioUrl: string = await uploadImageRemote(audioFile);\n+        await ttsPlayer.play(audioBuffer, () => {",
    "repo_full_name": "ChatGPTNextWeb/NextChat",
    "discussion_comments": [
      {
        "comment_id": "1798730575",
        "repo_full_name": "ChatGPTNextWeb/NextChat",
        "pr_number": 5650,
        "pr_file": "app/components/chat.tsx",
        "discussion_id": "1798730575",
        "commented_code": "@@ -1227,16 +1235,22 @@ function _Chat() {\n         });\n       }\n       setSpeechStatus(true);\n-      ttsPlayer\n-        .play(audioBuffer, () => {\n-          setSpeechStatus(false);\n-        })\n-        .catch((e) => {\n-          console.error(\"[OpenAI Speech]\", e);\n-          showToast(prettyObject(e));\n+      try {\n+        const waveFile = arrayBufferToWav(audioBuffer);\n+        const audioFile = new Blob([waveFile], { type: \"audio/wav\" });\n+\n+        const audioUrl: string = await uploadImageRemote(audioFile);\n+        await ttsPlayer.play(audioBuffer, () => {",
        "comment_created_at": "2024-10-14T04:14:44+00:00",
        "comment_author": "lloydzhou",
        "comment_body": "\u4e0d\u5e94\u8be5\u5728\u4fdd\u5b58\u97f3\u9891\u4e4b\u540e\u518d\u64ad\u653e\u3002\u8fd9\u6837\u4f1a\u589e\u52a0\u5ef6\u8fdf\u3002\u4f53\u9a8c\u4e0d\u597d",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1766645230",
    "pr_number": 5470,
    "pr_file": "app/components/auth.tsx",
    "created_at": "2024-09-19T11:12:13+00:00",
    "commented_code": "function TopBanner() {\n   const [isHovered, setIsHovered] = useState(false);\n   const [isVisible, setIsVisible] = useState(true);\n+  const storage = safeLocalStorage();\n \n   useEffect(() => {\n     // \u68c0\u67e5 localStorage \u4e2d\u662f\u5426\u6709\u6807\u8bb0\n-    const bannerDismissed = localStorage.getItem(\"bannerDismissed\");\n+    const bannerDismissed = storage.getItem(\"bannerDismissed\");\n \n     // \u5982\u679c\u6807\u8bb0\u4e0d\u5b58\u5728\uff0c\u5b58\u50a8\u9ed8\u8ba4\u503c\u5e76\u663e\u793a\u6a2a\u5e45\n     if (!bannerDismissed) {\n-      localStorage.setItem(\"bannerDismissed\", \"false\");\n+      storage.setItem(\"bannerDismissed\", \"false\");\n       setIsVisible(true); // \u663e\u793a\u6a2a\u5e45\n     } else if (bannerDismissed === \"true\") {\n       // \u5982\u679c\u6807\u8bb0\u4e3a \"true\"\uff0c\u5219\u9690\u85cf\u6a2a\u5e45\n       setIsVisible(false);\n     }\n-  }, []);\n+  }, [storage]);",
    "repo_full_name": "ChatGPTNextWeb/NextChat",
    "discussion_comments": [
      {
        "comment_id": "1766645230",
        "repo_full_name": "ChatGPTNextWeb/NextChat",
        "pr_number": 5470,
        "pr_file": "app/components/auth.tsx",
        "discussion_id": "1766645230",
        "commented_code": "@@ -112,20 +113,21 @@ export function AuthPage() {\n function TopBanner() {\n   const [isHovered, setIsHovered] = useState(false);\n   const [isVisible, setIsVisible] = useState(true);\n+  const storage = safeLocalStorage();\n \n   useEffect(() => {\n     // \u68c0\u67e5 localStorage \u4e2d\u662f\u5426\u6709\u6807\u8bb0\n-    const bannerDismissed = localStorage.getItem(\"bannerDismissed\");\n+    const bannerDismissed = storage.getItem(\"bannerDismissed\");\n \n     // \u5982\u679c\u6807\u8bb0\u4e0d\u5b58\u5728\uff0c\u5b58\u50a8\u9ed8\u8ba4\u503c\u5e76\u663e\u793a\u6a2a\u5e45\n     if (!bannerDismissed) {\n-      localStorage.setItem(\"bannerDismissed\", \"false\");\n+      storage.setItem(\"bannerDismissed\", \"false\");\n       setIsVisible(true); // \u663e\u793a\u6a2a\u5e45\n     } else if (bannerDismissed === \"true\") {\n       // \u5982\u679c\u6807\u8bb0\u4e3a \"true\"\uff0c\u5219\u9690\u85cf\u6a2a\u5e45\n       setIsVisible(false);\n     }\n-  }, []);\n+  }, [storage]);",
        "comment_created_at": "2024-09-19T11:12:13+00:00",
        "comment_author": "Dogtiti",
        "comment_body": "\u4e0d\u9700\u8981\u4f5c\u4e3a\u7ec4\u4ef6\u5185\u90e8\u7684\u4f9d\u8d56\u9879\u521d\u59cb\u5316storage\uff0c\u53ea\u9700\u8981\u521d\u59cb\u5316\u4e00\u6b21 \u4e0d\u9700\u8981\u6bcf\u6b21render\u90fd\u8981\u521d\u59cb\u5316",
        "pr_file_module": null
      }
    ]
  }
]