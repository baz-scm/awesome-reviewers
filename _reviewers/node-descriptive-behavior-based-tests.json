[
  {
    "discussion_id": "2203161974",
    "pr_number": 58875,
    "pr_file": "test/parallel/test-parse-args.mjs",
    "created_at": "2025-07-13T05:15:35+00:00",
    "commented_code": "process.argv = holdArgv;\n   process.execArgv = holdExecArgv;\n });\n+\n+test('help arg value config must be a string', () => {\n+  const args = ['-f', 'bar'];\n+  const options = { foo: { type: 'string', short: 'f', help: 'help text' } };\n+  const help = true;\n+  assert.throws(() => {\n+    parseArgs({ args, options, help });\n+  }, /The \"help\" argument must be of type string/\n+  );\n+});\n+\n+test('help value for option must be a string', () => {\n+  const args = [];\n+  const options = { alpha: { type: 'string', help: true } };\n+  assert.throws(() => {\n+    parseArgs({ args, options });\n+  }, /\"options\\.alpha\\.help\" property must be of type string/\n+  );\n+});\n+\n+test('when help arg with help value for lone short option is added, then add help text', () => {",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2203161974",
        "repo_full_name": "nodejs/node",
        "pr_number": 58875,
        "pr_file": "test/parallel/test-parse-args.mjs",
        "discussion_id": "2203161974",
        "commented_code": "@@ -1062,3 +1062,131 @@ test('auto-detect --no-foo as negated when strict:false and allowNegative', () =\n   process.argv = holdArgv;\n   process.execArgv = holdExecArgv;\n });\n+\n+test('help arg value config must be a string', () => {\n+  const args = ['-f', 'bar'];\n+  const options = { foo: { type: 'string', short: 'f', help: 'help text' } };\n+  const help = true;\n+  assert.throws(() => {\n+    parseArgs({ args, options, help });\n+  }, /The \"help\" argument must be of type string/\n+  );\n+});\n+\n+test('help value for option must be a string', () => {\n+  const args = [];\n+  const options = { alpha: { type: 'string', help: true } };\n+  assert.throws(() => {\n+    parseArgs({ args, options });\n+  }, /\"options\\.alpha\\.help\" property must be of type string/\n+  );\n+});\n+\n+test('when help arg with help value for lone short option is added, then add help text', () => {",
        "comment_created_at": "2025-07-13T05:15:35+00:00",
        "comment_author": "shadowspawn",
        "comment_body": "The name of the test seems to be describing the arguments to be parsed rather than the interesting variations of the formatted help. I might be misunderstanding the intent.\r\n\r\nPerhaps:\r\n\r\n```suggestion\r\ntest('when option has short and long flags, then both appear in usage', () => {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2203163549",
        "repo_full_name": "nodejs/node",
        "pr_number": 58875,
        "pr_file": "test/parallel/test-parse-args.mjs",
        "discussion_id": "2203161974",
        "commented_code": "@@ -1062,3 +1062,131 @@ test('auto-detect --no-foo as negated when strict:false and allowNegative', () =\n   process.argv = holdArgv;\n   process.execArgv = holdExecArgv;\n });\n+\n+test('help arg value config must be a string', () => {\n+  const args = ['-f', 'bar'];\n+  const options = { foo: { type: 'string', short: 'f', help: 'help text' } };\n+  const help = true;\n+  assert.throws(() => {\n+    parseArgs({ args, options, help });\n+  }, /The \"help\" argument must be of type string/\n+  );\n+});\n+\n+test('help value for option must be a string', () => {\n+  const args = [];\n+  const options = { alpha: { type: 'string', help: true } };\n+  assert.throws(() => {\n+    parseArgs({ args, options });\n+  }, /\"options\\.alpha\\.help\" property must be of type string/\n+  );\n+});\n+\n+test('when help arg with help value for lone short option is added, then add help text', () => {",
        "comment_created_at": "2025-07-13T05:25:51+00:00",
        "comment_author": "shadowspawn",
        "comment_body": "Was `lone` perhaps referring to there only being one option? Single option is fine as testing one thing at a time is good for unit tests.\r\n\r\nI think things of interest to test are:\r\n- option with no short flag\r\n- option with long and short flag\r\n- string option\r\n- boolean option\r\n- option without help text\r\n- long option that causes wrap\r\n\r\nYou are testing all of these (so good coverage), but the test names seem to be describing the supplied `args` rather than the supplied `options`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1864430955",
    "pr_number": 55874,
    "pr_file": "test/es-module/test-esm-detect-ambiguous.mjs",
    "created_at": "2024-11-30T18:45:49+00:00",
    "commented_code": "fixtures.path('es-modules/package-without-type/commonjs-wrapper-variables.js'),\n       ]);\n \n-      strictEqual(stderr, '');\n-      strictEqual(stdout, 'exports require module __filename __dirname\n');\n+      if (stderr) {",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "1864430955",
        "repo_full_name": "nodejs/node",
        "pr_number": 55874,
        "pr_file": "test/es-module/test-esm-detect-ambiguous.mjs",
        "discussion_id": "1864430955",
        "commented_code": "@@ -306,35 +326,48 @@ describe('Module syntax detection', { concurrency: !process.env.TEST_PARALLEL },\n         fixtures.path('es-modules/package-without-type/commonjs-wrapper-variables.js'),\n       ]);\n \n-      strictEqual(stderr, '');\n-      strictEqual(stdout, 'exports require module __filename __dirname\\n');\n+      if (stderr) {",
        "comment_created_at": "2024-11-30T18:45:49+00:00",
        "comment_author": "GeoffreyBooth",
        "comment_body": "Why would there be an `if` for an assertion? This is a test: it should always have one exact expected result, not two possible results that we need a conditional for.",
        "pr_file_module": null
      }
    ]
  }
]