[
  {
    "discussion_id": "2076554607",
    "pr_number": 58121,
    "pr_file": "deps/ncrypto/ncrypto.h",
    "created_at": "2025-05-06T23:52:02+00:00",
    "commented_code": "DataPointer hashDigest(const Buffer<const unsigned char>& data,\n                        const EVP_MD* md);\n+DataPointer xofHashDigest(const Buffer<const unsigned char>& data,\n+                          const EVP_MD* md,\n+                          size_t length);",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2076554607",
        "repo_full_name": "nodejs/node",
        "pr_number": 58121,
        "pr_file": "deps/ncrypto/ncrypto.h",
        "discussion_id": "2076554607",
        "commented_code": "@@ -280,6 +280,9 @@ class Digest final {\n \n DataPointer hashDigest(const Buffer<const unsigned char>& data,\n                        const EVP_MD* md);\n+DataPointer xofHashDigest(const Buffer<const unsigned char>& data,\n+                          const EVP_MD* md,\n+                          size_t length);",
        "comment_created_at": "2025-05-06T23:52:02+00:00",
        "comment_author": "jasnell",
        "comment_body": "This could use a code comment to describe the differences between `hashDigest(...)` and `xosHashDigest(...)`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2045214632",
    "pr_number": 54364,
    "pr_file": "src/node_code_integrity.cc",
    "created_at": "2025-04-15T18:20:50+00:00",
    "commented_code": "+#include \"node_code_integrity.h\"\n+#include \"env-inl.h\"\n+#include \"node.h\"\n+#include \"node_external_reference.h\"\n+#include \"v8.h\"\n+\n+namespace node {\n+\n+using v8::Boolean;\n+using v8::Context;\n+using v8::FunctionCallbackInfo;\n+using v8::Local;\n+using v8::Object;\n+using v8::Value;\n+\n+namespace per_process {\n+bool isWldpInitialized = false;\n+pfnWldpCanExecuteFile WldpCanExecuteFile;\n+pfnWldpGetApplicationSettingBoolean WldpGetApplicationSettingBoolean;\n+pfnWldpQuerySecurityPolicy WldpQuerySecurityPolicy;\n+}  // namespace per_process\n+\n+namespace code_integrity {\n+\n+static PCWSTR NODEJS = L\"Node.js\";\n+static PCWSTR ENFORCE_CODE_INTEGRITY_SETTING_NAME = L\"EnforceCodeIntegrity\";\n+static PCWSTR DISABLE_INTERPRETIVE_MODE_SETTING_NAME =\n+    L\"DisableInteractiveMode\";\n+\n+void InitWldp(Environment* env) {",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2045214632",
        "repo_full_name": "nodejs/node",
        "pr_number": 54364,
        "pr_file": "src/node_code_integrity.cc",
        "discussion_id": "2045214632",
        "commented_code": "@@ -0,0 +1,237 @@\n+#include \"node_code_integrity.h\"\n+#include \"env-inl.h\"\n+#include \"node.h\"\n+#include \"node_external_reference.h\"\n+#include \"v8.h\"\n+\n+namespace node {\n+\n+using v8::Boolean;\n+using v8::Context;\n+using v8::FunctionCallbackInfo;\n+using v8::Local;\n+using v8::Object;\n+using v8::Value;\n+\n+namespace per_process {\n+bool isWldpInitialized = false;\n+pfnWldpCanExecuteFile WldpCanExecuteFile;\n+pfnWldpGetApplicationSettingBoolean WldpGetApplicationSettingBoolean;\n+pfnWldpQuerySecurityPolicy WldpQuerySecurityPolicy;\n+}  // namespace per_process\n+\n+namespace code_integrity {\n+\n+static PCWSTR NODEJS = L\"Node.js\";\n+static PCWSTR ENFORCE_CODE_INTEGRITY_SETTING_NAME = L\"EnforceCodeIntegrity\";\n+static PCWSTR DISABLE_INTERPRETIVE_MODE_SETTING_NAME =\n+    L\"DisableInteractiveMode\";\n+\n+void InitWldp(Environment* env) {",
        "comment_created_at": "2025-04-15T18:20:50+00:00",
        "comment_author": "anonrig",
        "comment_body": "Since the method names are not easily readable, it is extremely hard to understand what this method does. Can you add a comment explaining what this method do, and how it does what it does?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1704253252",
    "pr_number": 54215,
    "pr_file": "src/node_dotenv.cc",
    "created_at": "2024-08-05T14:58:24+00:00",
    "commented_code": "return input;\n }\n \n-void Dotenv::ParseContent(const std::string_view input) {\n-  std::string lines(input);\n+std::string_view parse_key(std::string_view key) {\n+  key = trim_spaces(key);\n+  if (key.empty()) return key;\n \n-  // Handle windows newlines \"\\r\n\": remove \"\\r\" and keep only \"\n\"\n-  lines.erase(std::remove(lines.begin(), lines.end(), '\\r'), lines.end());\n+  if (key.starts_with(\"export \")) {\n+    key.remove_prefix(7);\n+  }\n+  return key;\n+}\n \n-  std::string_view content = lines;\n-  content = trim_spaces(content);\n+std::string parse_value(std::string_view value) {\n+  value = trim_spaces(value);\n+  if (value.empty()) return \"\";\n+\n+  auto trimmed = trim_quotes(value);\n+  if (value.front() == '\\\"' && value.back() == '\\\"') {",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "1704253252",
        "repo_full_name": "nodejs/node",
        "pr_number": 54215,
        "pr_file": "src/node_dotenv.cc",
        "discussion_id": "1704253252",
        "commented_code": "@@ -98,127 +109,99 @@ std::string_view trim_spaces(std::string_view input) {\n   return input;\n }\n \n-void Dotenv::ParseContent(const std::string_view input) {\n-  std::string lines(input);\n+std::string_view parse_key(std::string_view key) {\n+  key = trim_spaces(key);\n+  if (key.empty()) return key;\n \n-  // Handle windows newlines \"\\r\\n\": remove \"\\r\" and keep only \"\\n\"\n-  lines.erase(std::remove(lines.begin(), lines.end(), '\\r'), lines.end());\n+  if (key.starts_with(\"export \")) {\n+    key.remove_prefix(7);\n+  }\n+  return key;\n+}\n \n-  std::string_view content = lines;\n-  content = trim_spaces(content);\n+std::string parse_value(std::string_view value) {\n+  value = trim_spaces(value);\n+  if (value.empty()) return \"\";\n+\n+  auto trimmed = trim_quotes(value);\n+  if (value.front() == '\\\"' && value.back() == '\\\"') {",
        "comment_created_at": "2024-08-05T14:58:24+00:00",
        "comment_author": "anonrig",
        "comment_body": "Can you add a documentation to here?\r\nReturning the `else` statement early will make this function much more readable.",
        "pr_file_module": null
      },
      {
        "comment_id": "1704350669",
        "repo_full_name": "nodejs/node",
        "pr_number": 54215,
        "pr_file": "src/node_dotenv.cc",
        "discussion_id": "1704253252",
        "commented_code": "@@ -98,127 +109,99 @@ std::string_view trim_spaces(std::string_view input) {\n   return input;\n }\n \n-void Dotenv::ParseContent(const std::string_view input) {\n-  std::string lines(input);\n+std::string_view parse_key(std::string_view key) {\n+  key = trim_spaces(key);\n+  if (key.empty()) return key;\n \n-  // Handle windows newlines \"\\r\\n\": remove \"\\r\" and keep only \"\\n\"\n-  lines.erase(std::remove(lines.begin(), lines.end(), '\\r'), lines.end());\n+  if (key.starts_with(\"export \")) {\n+    key.remove_prefix(7);\n+  }\n+  return key;\n+}\n \n-  std::string_view content = lines;\n-  content = trim_spaces(content);\n+std::string parse_value(std::string_view value) {\n+  value = trim_spaces(value);\n+  if (value.empty()) return \"\";\n+\n+  auto trimmed = trim_quotes(value);\n+  if (value.front() == '\\\"' && value.back() == '\\\"') {",
        "comment_created_at": "2024-08-05T16:08:37+00:00",
        "comment_author": "marekpiechut",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2160521090",
    "pr_number": 58782,
    "pr_file": "src/node_dotenv.cc",
    "created_at": "2025-06-22T23:10:29+00:00",
    "commented_code": "continue;\n     }\n \n+    if (content.front() == '[') {",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2160521090",
        "repo_full_name": "nodejs/node",
        "pr_number": 58782,
        "pr_file": "src/node_dotenv.cc",
        "discussion_id": "2160521090",
        "commented_code": "@@ -154,6 +215,33 @@ void Dotenv::ParseContent(const std::string_view input) {\n       continue;\n     }\n \n+    if (content.front() == '[') {",
        "comment_created_at": "2025-06-22T23:10:29+00:00",
        "comment_author": "anonrig",
        "comment_body": "Can you add a comment to here explaining why you're checking for [?",
        "pr_file_module": null
      },
      {
        "comment_id": "2160530473",
        "repo_full_name": "nodejs/node",
        "pr_number": 58782,
        "pr_file": "src/node_dotenv.cc",
        "discussion_id": "2160521090",
        "commented_code": "@@ -154,6 +215,33 @@ void Dotenv::ParseContent(const std::string_view input) {\n       continue;\n     }\n \n+    if (content.front() == '[') {",
        "comment_created_at": "2025-06-22T23:41:38+00:00",
        "comment_author": "vitaly-t",
        "comment_body": "He is checking for the start of a section, I believe - `[section_name]`",
        "pr_file_module": null
      },
      {
        "comment_id": "2160535852",
        "repo_full_name": "nodejs/node",
        "pr_number": 58782,
        "pr_file": "src/node_dotenv.cc",
        "discussion_id": "2160521090",
        "commented_code": "@@ -154,6 +215,33 @@ void Dotenv::ParseContent(const std::string_view input) {\n       continue;\n     }\n \n+    if (content.front() == '[') {",
        "comment_created_at": "2025-06-22T23:57:52+00:00",
        "comment_author": "anonrig",
        "comment_body": "Yes, but a year from now, a contributor might have some hard time understanding the reasoning. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2160537439",
        "repo_full_name": "nodejs/node",
        "pr_number": 58782,
        "pr_file": "src/node_dotenv.cc",
        "discussion_id": "2160521090",
        "commented_code": "@@ -154,6 +215,33 @@ void Dotenv::ParseContent(const std::string_view input) {\n       continue;\n     }\n \n+    if (content.front() == '[') {",
        "comment_created_at": "2025-06-23T00:02:24+00:00",
        "comment_author": "dario-piotrowicz",
        "comment_body": "comment added :slightly_smiling_face: ",
        "pr_file_module": null
      }
    ]
  }
]