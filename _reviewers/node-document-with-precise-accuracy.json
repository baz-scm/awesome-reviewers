[
  {
    "discussion_id": "2119199157",
    "pr_number": 58521,
    "pr_file": "lib/internal/vm.js",
    "created_at": "2025-06-01T14:24:24+00:00",
    "commented_code": "* @param {string} filename - The filename to use for the compiled function.\n  * @param {number} lineOffset - The line offset to use for the compiled function.\n  * @param {number} columnOffset - The column offset to use for the compiled function.\n- * @param {Buffer} [cachedData=undefined] - The cached data to use for the compiled function.\n+ * @param {Buffer} [cachedData] - The cached data to use for the compiled function.\n  * @param {boolean} produceCachedData - Whether to produce cached data for the compiled function.\n- * @param {ReturnType<import('vm').createContext} [parsingContext=undefined] - The parsing context to use for the\n+ * @param {ReturnType<import('node:vm').createContext>} [parsingContext] - The parsing context to use for the\n  * compiled function.\n- * @param {object[]} [contextExtensions=[]] - An array of context extensions to use for the compiled function.\n+ * @param {object[]} [contextExtensions] - An array of context extensions to use for the compiled function.",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2119199157",
        "repo_full_name": "nodejs/node",
        "pr_number": 58521,
        "pr_file": "lib/internal/vm.js",
        "discussion_id": "2119199157",
        "commented_code": "@@ -117,11 +117,11 @@ function registerImportModuleDynamically(referrer, importModuleDynamically) {\n  * @param {string} filename - The filename to use for the compiled function.\n  * @param {number} lineOffset - The line offset to use for the compiled function.\n  * @param {number} columnOffset - The column offset to use for the compiled function.\n- * @param {Buffer} [cachedData=undefined] - The cached data to use for the compiled function.\n+ * @param {Buffer} [cachedData] - The cached data to use for the compiled function.\n  * @param {boolean} produceCachedData - Whether to produce cached data for the compiled function.\n- * @param {ReturnType<import('vm').createContext} [parsingContext=undefined] - The parsing context to use for the\n+ * @param {ReturnType<import('node:vm').createContext>} [parsingContext] - The parsing context to use for the\n  * compiled function.\n- * @param {object[]} [contextExtensions=[]] - An array of context extensions to use for the compiled function.\n+ * @param {object[]} [contextExtensions] - An array of context extensions to use for the compiled function.",
        "comment_created_at": "2025-06-01T14:24:24+00:00",
        "comment_author": "LiviaMedeiros",
        "comment_body": "Does the `no-defaults` rule give any benefits? I don't really mind enabling it for the sake of consistency, but default values might be helpful for functions that can't use ES6 default parameters.",
        "pr_file_module": null
      },
      {
        "comment_id": "2119245767",
        "repo_full_name": "nodejs/node",
        "pr_number": 58521,
        "pr_file": "lib/internal/vm.js",
        "discussion_id": "2119199157",
        "commented_code": "@@ -117,11 +117,11 @@ function registerImportModuleDynamically(referrer, importModuleDynamically) {\n  * @param {string} filename - The filename to use for the compiled function.\n  * @param {number} lineOffset - The line offset to use for the compiled function.\n  * @param {number} columnOffset - The column offset to use for the compiled function.\n- * @param {Buffer} [cachedData=undefined] - The cached data to use for the compiled function.\n+ * @param {Buffer} [cachedData] - The cached data to use for the compiled function.\n  * @param {boolean} produceCachedData - Whether to produce cached data for the compiled function.\n- * @param {ReturnType<import('vm').createContext} [parsingContext=undefined] - The parsing context to use for the\n+ * @param {ReturnType<import('node:vm').createContext>} [parsingContext] - The parsing context to use for the\n  * compiled function.\n- * @param {object[]} [contextExtensions=[]] - An array of context extensions to use for the compiled function.\n+ * @param {object[]} [contextExtensions] - An array of context extensions to use for the compiled function.",
        "comment_created_at": "2025-06-01T15:12:37+00:00",
        "comment_author": "anonrig",
        "comment_body": "This avoids only for comments. This is actually to avoid inconsistencies. I've found places where default values in jsdoc and code doesn't match at all. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2040707967",
    "pr_number": 57775,
    "pr_file": "test/parallel/test-fs-stat-abort-test.js",
    "created_at": "2025-04-12T17:47:37+00:00",
    "commented_code": "+'use strict';\n+\n+require('../common');\n+const test = require('node:test');\n+const assert = require('node:assert');\n+const fs = require('node:fs');\n+const tmpdir = require('../common/tmpdir');\n+\n+test('fs.stat should throw AbortError when abort signal is triggered', async () => {\n+  tmpdir.refresh();\n+\n+  const filePath = tmpdir.resolve('temp.txt');\n+  fs.writeFileSync(filePath, 'Test');\n+  const signal = AbortSignal.abort();",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2040707967",
        "repo_full_name": "nodejs/node",
        "pr_number": 57775,
        "pr_file": "test/parallel/test-fs-stat-abort-test.js",
        "discussion_id": "2040707967",
        "commented_code": "@@ -0,0 +1,28 @@\n+'use strict';\n+\n+require('../common');\n+const test = require('node:test');\n+const assert = require('node:assert');\n+const fs = require('node:fs');\n+const tmpdir = require('../common/tmpdir');\n+\n+test('fs.stat should throw AbortError when abort signal is triggered', async () => {\n+  tmpdir.refresh();\n+\n+  const filePath = tmpdir.resolve('temp.txt');\n+  fs.writeFileSync(filePath, 'Test');\n+  const signal = AbortSignal.abort();",
        "comment_created_at": "2025-04-12T17:47:37+00:00",
        "comment_author": "jasnell",
        "comment_body": "As I mentioned previously this test is only actually testing the behavior when `fs.stat` is called with an already aborted `AbortSignal`... The test description above should be updated to reflect that and I would add a comment about it in here. Not sure exactly how we can reliably test aborting the call while it is in flight since file systems have such broadly different performance characteristics and often these conclude so quickly that it rarely can be caught and canceled in time.",
        "pr_file_module": null
      },
      {
        "comment_id": "2040733980",
        "repo_full_name": "nodejs/node",
        "pr_number": 57775,
        "pr_file": "test/parallel/test-fs-stat-abort-test.js",
        "discussion_id": "2040707967",
        "commented_code": "@@ -0,0 +1,28 @@\n+'use strict';\n+\n+require('../common');\n+const test = require('node:test');\n+const assert = require('node:assert');\n+const fs = require('node:fs');\n+const tmpdir = require('../common/tmpdir');\n+\n+test('fs.stat should throw AbortError when abort signal is triggered', async () => {\n+  tmpdir.refresh();\n+\n+  const filePath = tmpdir.resolve('temp.txt');\n+  fs.writeFileSync(filePath, 'Test');\n+  const signal = AbortSignal.abort();",
        "comment_created_at": "2025-04-12T20:20:50+00:00",
        "comment_author": "mertcanaltin",
        "comment_body": "would a comment like this be good?\r\n\r\n  // This test verifies that fs.stat immediately throws an AbortError on the provided AbortSignal\r\n  // has already been canceled. This approach is used because trying to abort an fs.stat call in flight\r\n  // is unreliable given that file system operations tend to complete very quickly on many platforms.",
        "pr_file_module": null
      },
      {
        "comment_id": "2040734604",
        "repo_full_name": "nodejs/node",
        "pr_number": 57775,
        "pr_file": "test/parallel/test-fs-stat-abort-test.js",
        "discussion_id": "2040707967",
        "commented_code": "@@ -0,0 +1,28 @@\n+'use strict';\n+\n+require('../common');\n+const test = require('node:test');\n+const assert = require('node:assert');\n+const fs = require('node:fs');\n+const tmpdir = require('../common/tmpdir');\n+\n+test('fs.stat should throw AbortError when abort signal is triggered', async () => {\n+  tmpdir.refresh();\n+\n+  const filePath = tmpdir.resolve('temp.txt');\n+  fs.writeFileSync(filePath, 'Test');\n+  const signal = AbortSignal.abort();",
        "comment_created_at": "2025-04-12T20:24:32+00:00",
        "comment_author": "jasnell",
        "comment_body": "Small typo in that, otherwise looks good\r\n\r\n```\r\n// This test verifies that fs.stat immediately throws an AbortError if the provided AbortSignal\r\n// has already been canceled. This approach is used because trying to abort an fs.stat call in flight\r\n// is unreliable given that file system operations tend to complete very quickly on many platforms.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2040734897",
        "repo_full_name": "nodejs/node",
        "pr_number": 57775,
        "pr_file": "test/parallel/test-fs-stat-abort-test.js",
        "discussion_id": "2040707967",
        "commented_code": "@@ -0,0 +1,28 @@\n+'use strict';\n+\n+require('../common');\n+const test = require('node:test');\n+const assert = require('node:assert');\n+const fs = require('node:fs');\n+const tmpdir = require('../common/tmpdir');\n+\n+test('fs.stat should throw AbortError when abort signal is triggered', async () => {\n+  tmpdir.refresh();\n+\n+  const filePath = tmpdir.resolve('temp.txt');\n+  fs.writeFileSync(filePath, 'Test');\n+  const signal = AbortSignal.abort();",
        "comment_created_at": "2025-04-12T20:25:54+00:00",
        "comment_author": "mertcanaltin",
        "comment_body": "thank you very much for your help üôè ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2171773426",
    "pr_number": 58664,
    "pr_file": "lib/internal/webstreams/adapters.js",
    "created_at": "2025-06-27T11:50:10+00:00",
    "commented_code": "/**\n  * @param {Duplex} duplex\n- * @returns {ReadableWritablePair}",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2171773426",
        "repo_full_name": "nodejs/node",
        "pr_number": 58664,
        "pr_file": "lib/internal/webstreams/adapters.js",
        "discussion_id": "2171773426",
        "commented_code": "@@ -601,9 +621,9 @@ function newStreamReadableFromReadableStream(readableStream, options = kEmptyObj\n \n /**\n  * @param {Duplex} duplex\n- * @returns {ReadableWritablePair}",
        "comment_created_at": "2025-06-27T11:50:10+00:00",
        "comment_author": "MattiasBuelens",
        "comment_body": "Keep the `@returns`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091370774",
    "pr_number": 58087,
    "pr_file": "lib/internal/blocklist.js",
    "created_at": "2025-05-15T14:47:53+00:00",
    "commented_code": "return Boolean(this[kHandle].check(address[kSocketAddressHandle]));\n   }\n \n+  /*\n+  * @param {Array} string",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2091370774",
        "repo_full_name": "nodejs/node",
        "pr_number": 58087,
        "pr_file": "lib/internal/blocklist.js",
        "discussion_id": "2091370774",
        "commented_code": "@@ -139,6 +161,53 @@ class BlockList {\n     return Boolean(this[kHandle].check(address[kSocketAddressHandle]));\n   }\n \n+  /*\n+  * @param {Array} string",
        "comment_created_at": "2025-05-15T14:47:53+00:00",
        "comment_author": "jasnell",
        "comment_body": "```suggestion\r\n  * @param {string[]} data\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2143190363",
    "pr_number": 58691,
    "pr_file": "lib/internal/per_context/domexception.js",
    "created_at": "2025-06-12T16:33:15+00:00",
    "commented_code": ".add('NoDataAllowedError')\n   .add('ValidationError');\n \n+let DOMExceptionPrototype;\n class DOMException {\n   constructor(message = '', options = 'Error') {\n-    this[transfer_mode_private_symbol] = kCloneable;\n-    ErrorCaptureStackTrace(this);\n+    // eslint-disable-next-line no-restricted-syntax\n+    const self = new Error();",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2143190363",
        "repo_full_name": "nodejs/node",
        "pr_number": 58691,
        "pr_file": "lib/internal/per_context/domexception.js",
        "discussion_id": "2143190363",
        "commented_code": "@@ -60,20 +60,23 @@ const disusedNamesSet = new SafeSet()\n   .add('NoDataAllowedError')\n   .add('ValidationError');\n \n+let DOMExceptionPrototype;\n class DOMException {\n   constructor(message = '', options = 'Error') {\n-    this[transfer_mode_private_symbol] = kCloneable;\n-    ErrorCaptureStackTrace(this);\n+    // eslint-disable-next-line no-restricted-syntax\n+    const self = new Error();",
        "comment_created_at": "2025-06-12T16:33:15+00:00",
        "comment_author": "jasnell",
        "comment_body": "This is such an unusual pattern to see that it likely warrants some code comments in here to explain why we're setting the prototype this way (as opposed to `class DOMException extends Error`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2143210174",
        "repo_full_name": "nodejs/node",
        "pr_number": 58691,
        "pr_file": "lib/internal/per_context/domexception.js",
        "discussion_id": "2143190363",
        "commented_code": "@@ -60,20 +60,23 @@ const disusedNamesSet = new SafeSet()\n   .add('NoDataAllowedError')\n   .add('ValidationError');\n \n+let DOMExceptionPrototype;\n class DOMException {\n   constructor(message = '', options = 'Error') {\n-    this[transfer_mode_private_symbol] = kCloneable;\n-    ErrorCaptureStackTrace(this);\n+    // eslint-disable-next-line no-restricted-syntax\n+    const self = new Error();",
        "comment_created_at": "2025-06-12T16:45:39+00:00",
        "comment_author": "legendecas",
        "comment_body": "Added comments explaining the reason on return overriding.",
        "pr_file_module": null
      },
      {
        "comment_id": "2160065151",
        "repo_full_name": "nodejs/node",
        "pr_number": 58691,
        "pr_file": "lib/internal/per_context/domexception.js",
        "discussion_id": "2143190363",
        "commented_code": "@@ -60,20 +60,23 @@ const disusedNamesSet = new SafeSet()\n   .add('NoDataAllowedError')\n   .add('ValidationError');\n \n+let DOMExceptionPrototype;\n class DOMException {\n   constructor(message = '', options = 'Error') {\n-    this[transfer_mode_private_symbol] = kCloneable;\n-    ErrorCaptureStackTrace(this);\n+    // eslint-disable-next-line no-restricted-syntax\n+    const self = new Error();",
        "comment_created_at": "2025-06-21T15:28:01+00:00",
        "comment_author": "ExE-Boss",
        "comment_body": "Can‚Äôt¬†this just¬†use <code>[ReflectConstruct]\\(Error, [], DOMException\\)</code>¬†instead?\r\n\r\n[ReflectConstruct]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct",
        "pr_file_module": null
      }
    ]
  }
]