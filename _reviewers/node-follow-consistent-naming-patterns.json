[
  {
    "discussion_id": "2199933188",
    "pr_number": 59019,
    "pr_file": "doc/api/buffer.md",
    "created_at": "2025-07-11T07:42:42+00:00",
    "commented_code": "- v14.18.0\n -->\n \n-* Type: {string}\n+* {string}",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2199933188",
        "repo_full_name": "nodejs/node",
        "pr_number": 59019,
        "pr_file": "doc/api/buffer.md",
        "discussion_id": "2199933188",
        "commented_code": "@@ -586,7 +586,7 @@ added:\n   - v14.18.0\n -->\n \n-* Type: {string}\n+* {string}",
        "comment_created_at": "2025-07-11T07:42:42+00:00",
        "comment_author": "aduh95",
        "comment_body": "Why this change?",
        "pr_file_module": null
      },
      {
        "comment_id": "2200606574",
        "repo_full_name": "nodejs/node",
        "pr_number": 59019,
        "pr_file": "doc/api/buffer.md",
        "discussion_id": "2199933188",
        "commented_code": "@@ -586,7 +586,7 @@ added:\n   - v14.18.0\n -->\n \n-* Type: {string}\n+* {string}",
        "comment_created_at": "2025-07-11T12:30:02+00:00",
        "comment_author": "avivkeller",
        "comment_body": "In other cases, we don't prefix types with \"Type:\", but rather just show the type, for example:\r\n- https://github.com/nodejs/node/blob/main/doc/api/async_context.md?plain=1#L306\r\n- https://github.com/nodejs/node/blob/main/doc/api/buffer.md?plain=1#L1560\r\n- And many others\r\n\r\nIn my proposed definition (https://github.com/nodejs/api-docs-tooling/issues/348), we also don't prefix types with \"Type:\".",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2159459865",
    "pr_number": 58087,
    "pr_file": "doc/api/net.md",
    "created_at": "2025-06-20T18:00:04+00:00",
    "commented_code": "* `value` {any} Any JS value\n * Returns `true` if the `value` is a `net.BlockList`.\n \n+### `BlockList.fromJSON(value)`",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2159459865",
        "repo_full_name": "nodejs/node",
        "pr_number": 58087,
        "pr_file": "doc/api/net.md",
        "discussion_id": "2159459865",
        "commented_code": "@@ -181,6 +181,38 @@ added:\n * `value` {any} Any JS value\n * Returns `true` if the `value` is a `net.BlockList`.\n \n+### `BlockList.fromJSON(value)`",
        "comment_created_at": "2025-06-20T18:00:04+00:00",
        "comment_author": "jasnell",
        "comment_body": "Since these aren't static methods, the `b` should be lower-case and likely needs `make format-md` or `make lint` run\r\n\r\n```suggestion\r\n### `blockList.fromJSON(value)`\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2173791964",
    "pr_number": 58874,
    "pr_file": "doc/api/metrics.md",
    "created_at": "2025-06-29T15:12:14+00:00",
    "commented_code": "+# Metrics\n+\n+<!--introduced_in=REPLACEME-->\n+\n+> Stability: 1 - Experimental\n+\n+<!-- source_link=lib/metrics.js -->\n+\n+The `node:metrics` module provides an API for application instrumentation and\n+performance monitoring. It offers various metric types and built-in exporters\n+for popular monitoring systems.\n+\n+The module can be accessed using:\n+\n+```mjs\n+import * as metrics from 'node:metrics';\n+```\n+\n+```cjs\n+const metrics = require('node:metrics');\n+```\n+\n+## Overview\n+\n+The metrics API enables developers to instrument their applications with custom\n+metrics that can be collected and exported to monitoring systems. All metrics\n+publish their data through the `node:diagnostics_channel` module, allowing for\n+flexible consumption patterns.\n+\n+### Example\n+\n+```mjs\n+import { counter, timer, statsdStream } from 'node:metrics';\n+import { createWriteStream } from 'node:fs';\n+\n+// Create a counter metric\n+const apiCalls = counter('api.calls', { service: 'web' });\n+\n+// Create a timer factory\n+const requestTimer = timer('api.request.duration', { service: 'web' });\n+\n+// Export metrics to StatsD format\n+const statsd = statsdStream();\n+statsd.pipe(createWriteStream('metrics.log'));\n+\n+// Use metrics in your application\n+function handleRequest(req, res) {\n+  const timer = requestTimer.create({ endpoint: req.url });\n+\n+  apiCalls.increment();\n+\n+  // Process request...\n+\n+  timer.stop();\n+}\n+```\n+\n+```cjs\n+const { counter, timer, statsdStream } = require('node:metrics');",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2173791964",
        "repo_full_name": "nodejs/node",
        "pr_number": 58874,
        "pr_file": "doc/api/metrics.md",
        "discussion_id": "2173791964",
        "commented_code": "@@ -0,0 +1,1040 @@\n+# Metrics\n+\n+<!--introduced_in=REPLACEME-->\n+\n+> Stability: 1 - Experimental\n+\n+<!-- source_link=lib/metrics.js -->\n+\n+The `node:metrics` module provides an API for application instrumentation and\n+performance monitoring. It offers various metric types and built-in exporters\n+for popular monitoring systems.\n+\n+The module can be accessed using:\n+\n+```mjs\n+import * as metrics from 'node:metrics';\n+```\n+\n+```cjs\n+const metrics = require('node:metrics');\n+```\n+\n+## Overview\n+\n+The metrics API enables developers to instrument their applications with custom\n+metrics that can be collected and exported to monitoring systems. All metrics\n+publish their data through the `node:diagnostics_channel` module, allowing for\n+flexible consumption patterns.\n+\n+### Example\n+\n+```mjs\n+import { counter, timer, statsdStream } from 'node:metrics';\n+import { createWriteStream } from 'node:fs';\n+\n+// Create a counter metric\n+const apiCalls = counter('api.calls', { service: 'web' });\n+\n+// Create a timer factory\n+const requestTimer = timer('api.request.duration', { service: 'web' });\n+\n+// Export metrics to StatsD format\n+const statsd = statsdStream();\n+statsd.pipe(createWriteStream('metrics.log'));\n+\n+// Use metrics in your application\n+function handleRequest(req, res) {\n+  const timer = requestTimer.create({ endpoint: req.url });\n+\n+  apiCalls.increment();\n+\n+  // Process request...\n+\n+  timer.stop();\n+}\n+```\n+\n+```cjs\n+const { counter, timer, statsdStream } = require('node:metrics');",
        "comment_created_at": "2025-06-29T15:12:14+00:00",
        "comment_author": "jasnell",
        "comment_body": "I'd prefer the constructor methods here to follow a naming pattern like `createCounter`, `createTimer`, etc, both for ergonomics and for consistency (see `createHistogram(...)` in `perf_hooks`.\r\n\r\n```js\r\nconst counter = createCounter('api.calls', { service: 'web' });\r\nconst timer = createTimer('api.request.duration', { service: 'web' });\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2173797670",
        "repo_full_name": "nodejs/node",
        "pr_number": 58874,
        "pr_file": "doc/api/metrics.md",
        "discussion_id": "2173791964",
        "commented_code": "@@ -0,0 +1,1040 @@\n+# Metrics\n+\n+<!--introduced_in=REPLACEME-->\n+\n+> Stability: 1 - Experimental\n+\n+<!-- source_link=lib/metrics.js -->\n+\n+The `node:metrics` module provides an API for application instrumentation and\n+performance monitoring. It offers various metric types and built-in exporters\n+for popular monitoring systems.\n+\n+The module can be accessed using:\n+\n+```mjs\n+import * as metrics from 'node:metrics';\n+```\n+\n+```cjs\n+const metrics = require('node:metrics');\n+```\n+\n+## Overview\n+\n+The metrics API enables developers to instrument their applications with custom\n+metrics that can be collected and exported to monitoring systems. All metrics\n+publish their data through the `node:diagnostics_channel` module, allowing for\n+flexible consumption patterns.\n+\n+### Example\n+\n+```mjs\n+import { counter, timer, statsdStream } from 'node:metrics';\n+import { createWriteStream } from 'node:fs';\n+\n+// Create a counter metric\n+const apiCalls = counter('api.calls', { service: 'web' });\n+\n+// Create a timer factory\n+const requestTimer = timer('api.request.duration', { service: 'web' });\n+\n+// Export metrics to StatsD format\n+const statsd = statsdStream();\n+statsd.pipe(createWriteStream('metrics.log'));\n+\n+// Use metrics in your application\n+function handleRequest(req, res) {\n+  const timer = requestTimer.create({ endpoint: req.url });\n+\n+  apiCalls.increment();\n+\n+  // Process request...\n+\n+  timer.stop();\n+}\n+```\n+\n+```cjs\n+const { counter, timer, statsdStream } = require('node:metrics');",
        "comment_created_at": "2025-06-29T15:32:13+00:00",
        "comment_author": "Qard",
        "comment_body": "My original thinking was to keep the names as simple as possible to be not overly verbose and fairly quick to read, but then in writing tests and docs for it all I found a common case was to want to name the variable the same thing as the function. I may be a bit too radically minimalist about the naming. \ud83d\ude05 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2106309799",
    "pr_number": 58453,
    "pr_file": "doc/api/events.md",
    "created_at": "2025-05-25T21:19:42+00:00",
    "commented_code": "emitter.emit('log');\n ```\n \n+### `emitter.use(eventName, listener)`",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2106309799",
        "repo_full_name": "nodejs/node",
        "pr_number": 58453,
        "pr_file": "doc/api/events.md",
        "discussion_id": "2106309799",
        "commented_code": "@@ -1085,6 +1085,54 @@ newListeners[0]();\n emitter.emit('log');\n ```\n \n+### `emitter.use(eventName, listener)`",
        "comment_created_at": "2025-05-25T21:19:42+00:00",
        "comment_author": "LiviaMedeiros",
        "comment_body": "A lot of different things can extend `EventEmitter` class. The name `use()` is too generic and might  also collide with existing userspace code, I think `useEventListener()` (or `addDisposableEventListener()`, `onUse()`, `scopedOn()`, etc., it's quite bikesheddable...) would be better. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2106373392",
        "repo_full_name": "nodejs/node",
        "pr_number": 58453,
        "pr_file": "doc/api/events.md",
        "discussion_id": "2106309799",
        "commented_code": "@@ -1085,6 +1085,54 @@ newListeners[0]();\n emitter.emit('log');\n ```\n \n+### `emitter.use(eventName, listener)`",
        "comment_created_at": "2025-05-26T01:11:31+00:00",
        "comment_author": "jasnell",
        "comment_body": "Yeah I kind of picked `use` here intentionally because of that ;-) ... wanted to prompt a discussion about it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2071891742",
    "pr_number": 58060,
    "pr_file": "doc/api/os.md",
    "created_at": "2025-05-02T16:51:21+00:00",
    "commented_code": "available, `GetVersionExW()` will be used. See\n <https://en.wikipedia.org/wiki/Uname#Examples> for more information.\n \n+## `os.guessHandleType(handle)`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+* `handle` {integer} The handle number to try and guess the type of.",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2071891742",
        "repo_full_name": "nodejs/node",
        "pr_number": 58060,
        "pr_file": "doc/api/os.md",
        "discussion_id": "2071891742",
        "commented_code": "@@ -509,6 +509,29 @@ On POSIX systems, the operating system release is determined by calling\n available, `GetVersionExW()` will be used. See\n <https://en.wikipedia.org/wiki/Uname#Examples> for more information.\n \n+## `os.guessHandleType(handle)`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+* `handle` {integer} The handle number to try and guess the type of.",
        "comment_created_at": "2025-05-02T16:51:21+00:00",
        "comment_author": "addaleax",
        "comment_body": "This should really specify that \"handle\" means \"file descriptor\". In fact, given that the fs docs almost exclusively use \"file descriptor\" and \"fd\", I would also adopt that terminology here.",
        "pr_file_module": null
      },
      {
        "comment_id": "2071894274",
        "repo_full_name": "nodejs/node",
        "pr_number": 58060,
        "pr_file": "doc/api/os.md",
        "discussion_id": "2071891742",
        "commented_code": "@@ -509,6 +509,29 @@ On POSIX systems, the operating system release is determined by calling\n available, `GetVersionExW()` will be used. See\n <https://en.wikipedia.org/wiki/Uname#Examples> for more information.\n \n+## `os.guessHandleType(handle)`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+* `handle` {integer} The handle number to try and guess the type of.",
        "comment_created_at": "2025-05-02T16:53:43+00:00",
        "comment_author": "vladfrangu",
        "comment_body": "Then I could also rename the function to `guessFileDescriptorType`? Or should I leave it as is?\r\n\r\nAnd will apply the changes to fd/file descriptor in a few",
        "pr_file_module": null
      },
      {
        "comment_id": "2071937689",
        "repo_full_name": "nodejs/node",
        "pr_number": 58060,
        "pr_file": "doc/api/os.md",
        "discussion_id": "2071891742",
        "commented_code": "@@ -509,6 +509,29 @@ On POSIX systems, the operating system release is determined by calling\n available, `GetVersionExW()` will be used. See\n <https://en.wikipedia.org/wiki/Uname#Examples> for more information.\n \n+## `os.guessHandleType(handle)`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+* `handle` {integer} The handle number to try and guess the type of.",
        "comment_created_at": "2025-05-02T17:33:04+00:00",
        "comment_author": "addaleax",
        "comment_body": "Yeah, I'd probably do that. In the context of libuv, `guessHandleType` makes more sense, because it returns a value that actually corresponds to the types of libuv handles, which wrap around fds.",
        "pr_file_module": null
      },
      {
        "comment_id": "2072159464",
        "repo_full_name": "nodejs/node",
        "pr_number": 58060,
        "pr_file": "doc/api/os.md",
        "discussion_id": "2071891742",
        "commented_code": "@@ -509,6 +509,29 @@ On POSIX systems, the operating system release is determined by calling\n available, `GetVersionExW()` will be used. See\n <https://en.wikipedia.org/wiki/Uname#Examples> for more information.\n \n+## `os.guessHandleType(handle)`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+* `handle` {integer} The handle number to try and guess the type of.",
        "comment_created_at": "2025-05-02T21:19:13+00:00",
        "comment_author": "vladfrangu",
        "comment_body": "Done! Let me know if I've also done the rebase correctly \ud83e\udd1e ",
        "pr_file_module": null
      }
    ]
  }
]