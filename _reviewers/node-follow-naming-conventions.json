[
  {
    "discussion_id": "2203284561",
    "pr_number": 58748,
    "pr_file": "src/node_sqlite.h",
    "created_at": "2025-07-13T10:00:37+00:00",
    "commented_code": "BaseObjectWeakPtr<DatabaseSync> database_;  // The Parent Database\n };\n \n+class SqlTagStore : public BaseObject {\n+ public:\n+  SqlTagStore(Environment* env,\n+              v8::Local<v8::Object> object,\n+              BaseObjectWeakPtr<DatabaseSync> database,\n+              int capacity);\n+  ~SqlTagStore() override;\n+  static BaseObjectPtr<SqlTagStore> Create(\n+      Environment* env, BaseObjectWeakPtr<DatabaseSync> database, int capacity);\n+  static v8::Local<v8::FunctionTemplate> GetConstructorTemplate(\n+      Environment* env);\n+  static void all(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void get(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void iterate(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void run(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void size(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void capacity(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void reset(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void clear(const v8::FunctionCallbackInfo<v8::Value>& info);",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2203284561",
        "repo_full_name": "nodejs/node",
        "pr_number": 58748,
        "pr_file": "src/node_sqlite.h",
        "discussion_id": "2203284561",
        "commented_code": "@@ -212,6 +217,37 @@ class Session : public BaseObject {\n   BaseObjectWeakPtr<DatabaseSync> database_;  // The Parent Database\n };\n \n+class SqlTagStore : public BaseObject {\n+ public:\n+  SqlTagStore(Environment* env,\n+              v8::Local<v8::Object> object,\n+              BaseObjectWeakPtr<DatabaseSync> database,\n+              int capacity);\n+  ~SqlTagStore() override;\n+  static BaseObjectPtr<SqlTagStore> Create(\n+      Environment* env, BaseObjectWeakPtr<DatabaseSync> database, int capacity);\n+  static v8::Local<v8::FunctionTemplate> GetConstructorTemplate(\n+      Environment* env);\n+  static void all(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void get(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void iterate(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void run(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void size(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void capacity(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void reset(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void clear(const v8::FunctionCallbackInfo<v8::Value>& info);",
        "comment_created_at": "2025-07-13T10:00:37+00:00",
        "comment_author": "geeksilva97",
        "comment_body": "For consistency, these methods should be capitalized: All, Get, Run and so on",
        "pr_file_module": null
      },
      {
        "comment_id": "2203706604",
        "repo_full_name": "nodejs/node",
        "pr_number": 58748,
        "pr_file": "src/node_sqlite.h",
        "discussion_id": "2203284561",
        "commented_code": "@@ -212,6 +217,37 @@ class Session : public BaseObject {\n   BaseObjectWeakPtr<DatabaseSync> database_;  // The Parent Database\n };\n \n+class SqlTagStore : public BaseObject {\n+ public:\n+  SqlTagStore(Environment* env,\n+              v8::Local<v8::Object> object,\n+              BaseObjectWeakPtr<DatabaseSync> database,\n+              int capacity);\n+  ~SqlTagStore() override;\n+  static BaseObjectPtr<SqlTagStore> Create(\n+      Environment* env, BaseObjectWeakPtr<DatabaseSync> database, int capacity);\n+  static v8::Local<v8::FunctionTemplate> GetConstructorTemplate(\n+      Environment* env);\n+  static void all(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void get(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void iterate(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void run(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void size(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void capacity(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void reset(const v8::FunctionCallbackInfo<v8::Value>& info);\n+  static void clear(const v8::FunctionCallbackInfo<v8::Value>& info);",
        "comment_created_at": "2025-07-14T01:56:20+00:00",
        "comment_author": "0hmX",
        "comment_body": "fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2173760964",
    "pr_number": 58666,
    "pr_file": "src/env_properties.h",
    "created_at": "2025-06-29T13:33:58+00:00",
    "commented_code": "V(changes_string, \"changes\")                                                 \\\n   V(channel_string, \"channel\")                                                 \\\n   V(chunks_sent_since_last_write_string, \"chunksSentSinceLastWrite\")           \\\n+  V(clientId_string, \"clientId\")                                               \\",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2173760964",
        "repo_full_name": "nodejs/node",
        "pr_number": 58666,
        "pr_file": "src/env_properties.h",
        "discussion_id": "2173760964",
        "commented_code": "@@ -96,6 +96,7 @@\n   V(changes_string, \"changes\")                                                 \\\n   V(channel_string, \"channel\")                                                 \\\n   V(chunks_sent_since_last_write_string, \"chunksSentSinceLastWrite\")           \\\n+  V(clientId_string, \"clientId\")                                               \\",
        "comment_created_at": "2025-06-29T13:33:58+00:00",
        "comment_author": "jasnell",
        "comment_body": "For consistency, these should use lower-case, snake-case\r\n```suggestion\r\n  V(client_id_string, \"clientId\")                                              \\\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2036607410",
    "pr_number": 57810,
    "pr_file": "src/node_zlib.cc",
    "created_at": "2025-04-10T06:34:32+00:00",
    "commented_code": "return AllocForBrotli(data, real_size);\n   }\n \n+  static constexpr size_t reserveSizeAndAlign =",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2036607410",
        "repo_full_name": "nodejs/node",
        "pr_number": 57810,
        "pr_file": "src/node_zlib.cc",
        "discussion_id": "2036607410",
        "commented_code": "@@ -607,9 +607,11 @@ class CompressionStream : public AsyncWrap, public ThreadPoolWork {\n     return AllocForBrotli(data, real_size);\n   }\n \n+  static constexpr size_t reserveSizeAndAlign =",
        "comment_created_at": "2025-04-10T06:34:32+00:00",
        "comment_author": "Flarna",
        "comment_body": "```suggestion\r\n  static constexpr size_t kReserveSizeAndAlign =\r\n```\r\nNot 100% sure but I think this doesn't fit the code style, it seems inconsistent already in the codebase\r\nQuite some places use a `k` prefix, others use define style (e.g. `RESERVER_SIZE_AND_ALIGN`).",
        "pr_file_module": null
      },
      {
        "comment_id": "2037897701",
        "repo_full_name": "nodejs/node",
        "pr_number": 57810,
        "pr_file": "src/node_zlib.cc",
        "discussion_id": "2036607410",
        "commented_code": "@@ -607,9 +607,11 @@ class CompressionStream : public AsyncWrap, public ThreadPoolWork {\n     return AllocForBrotli(data, real_size);\n   }\n \n+  static constexpr size_t reserveSizeAndAlign =",
        "comment_created_at": "2025-04-10T17:10:39+00:00",
        "comment_author": "jhofstee",
        "comment_body": "that sounds like pure evil, are you suggestion to make it a #define in a c++ project?",
        "pr_file_module": null
      },
      {
        "comment_id": "2037978966",
        "repo_full_name": "nodejs/node",
        "pr_number": 57810,
        "pr_file": "src/node_zlib.cc",
        "discussion_id": "2036607410",
        "commented_code": "@@ -607,9 +607,11 @@ class CompressionStream : public AsyncWrap, public ThreadPoolWork {\n     return AllocForBrotli(data, real_size);\n   }\n \n+  static constexpr size_t reserveSizeAndAlign =",
        "comment_created_at": "2025-04-10T18:01:41+00:00",
        "comment_author": "Flarna",
        "comment_body": "Sorry, I didn't mean to convert it to a define, `constexpr` is perfectly fine and the way to go.\r\n\r\nIt's just about nitpicking about the name. Unfortunatelly [cpp-style-guide](https://github.com/nodejs/node/blob/main/doc/contributing/cpp-style-guide.md) doesn't clarify this.\r\n\r\nLooking into code I found several places using the `k` prefix (e.g. [here](https://github.com/nodejs/node/blob/f692878dec6354c0a82241f224906981861bc840/src/node_snapshotable.cc#L1515)), and some using `ALL_UPPER_CASE` (e.g. [here](https://github.com/nodejs/node/blob/f692878dec6354c0a82241f224906981861bc840/src/node_zlib.cc#L153-L154)).\r\n\r\nPersonally I prefer the proposed `k` prefix.",
        "pr_file_module": null
      },
      {
        "comment_id": "2038363126",
        "repo_full_name": "nodejs/node",
        "pr_number": 57810,
        "pr_file": "src/node_zlib.cc",
        "discussion_id": "2036607410",
        "commented_code": "@@ -607,9 +607,11 @@ class CompressionStream : public AsyncWrap, public ThreadPoolWork {\n     return AllocForBrotli(data, real_size);\n   }\n \n+  static constexpr size_t reserveSizeAndAlign =",
        "comment_created_at": "2025-04-10T21:23:36+00:00",
        "comment_author": "jhofstee",
        "comment_body": "Understood, I guess I can rename it to reserveSizeAndAlign_, although rather ugly, that seems to comply with the code standard / general implementations. I doubt I have ever seen a k though, unless in kilo. Why would you prefer a k there?",
        "pr_file_module": null
      },
      {
        "comment_id": "2039199313",
        "repo_full_name": "nodejs/node",
        "pr_number": 57810,
        "pr_file": "src/node_zlib.cc",
        "discussion_id": "2036607410",
        "commented_code": "@@ -607,9 +607,11 @@ class CompressionStream : public AsyncWrap, public ThreadPoolWork {\n     return AllocForBrotli(data, real_size);\n   }\n \n+  static constexpr size_t reserveSizeAndAlign =",
        "comment_created_at": "2025-04-11T09:46:31+00:00",
        "comment_author": "Flarna",
        "comment_body": "I don't know where the `k` prefix comes from but it is used at quite some places in this repo for constants. Therefore I see it as helpful as it jumps into my mind that this is a constant. Would I go for `k` prefix in my personal repo: no - but thats a different topic.\r\nThe casing you use now is used nowhere in this repo for constants.\r\n\r\nAynhow, all I'm asking is to try to follow the existing style8s). I guess `kReserveSizeAndAlign`, `RESERVE_SIZE_AND_ALIGN`, `reserver_size_and_align` (and maybe more) follow exisiting styles.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2076560287",
    "pr_number": 58169,
    "pr_file": "src/util.h",
    "created_at": "2025-05-07T00:00:50+00:00",
    "commented_code": "};\n \n // Test whether some value can be called with ().\n-template <typename T, typename = void>\n-struct is_callable : std::is_function<T> { };\n-\n template <typename T>\n-struct is_callable<T, typename std::enable_if<\n-    std::is_same<decltype(void(&T::operator())), void>::value\n-    >::type> : std::true_type { };\n+concept is_callable =\n+    std::is_function<T>::value || requires { &T::operator(); };",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2076560287",
        "repo_full_name": "nodejs/node",
        "pr_number": 58169,
        "pr_file": "src/util.h",
        "discussion_id": "2076560287",
        "commented_code": "@@ -689,13 +689,9 @@ class NonCopyableMaybe {\n };\n \n // Test whether some value can be called with ().\n-template <typename T, typename = void>\n-struct is_callable : std::is_function<T> { };\n-\n template <typename T>\n-struct is_callable<T, typename std::enable_if<\n-    std::is_same<decltype(void(&T::operator())), void>::value\n-    >::type> : std::true_type { };\n+concept is_callable =\n+    std::is_function<T>::value || requires { &T::operator(); };",
        "comment_created_at": "2025-05-07T00:00:50+00:00",
        "comment_author": "jasnell",
        "comment_body": "For concepts like this, I'd prefer if we adopted a naming scheme like `IsCallable`",
        "pr_file_module": null
      }
    ]
  }
]