[
  {
    "discussion_id": "1897782173",
    "pr_number": 56350,
    "pr_file": "doc/api/typescript.md",
    "created_at": "2024-12-26T09:20:08+00:00",
    "commented_code": "> Stability: 1.1 - Active development\n \n-The flag [`--experimental-strip-types`][] enables Node.js to run TypeScript\n+The flag [`--no-experimental-strip-types`][] prevents Node.js from running TypeScript\n files. By default Node.js will execute only files that contain no\n TypeScript features that require transformation, such as enums or namespaces.\n Node.js will replace inline type annotations with whitespace,",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "1897782173",
        "repo_full_name": "nodejs/node",
        "pr_number": 56350,
        "pr_file": "doc/api/typescript.md",
        "discussion_id": "1897782173",
        "commented_code": "@@ -52,7 +55,7 @@ added: v22.6.0\n \n > Stability: 1.1 - Active development\n \n-The flag [`--experimental-strip-types`][] enables Node.js to run TypeScript\n+The flag [`--no-experimental-strip-types`][] prevents Node.js from running TypeScript\n files. By default Node.js will execute only files that contain no\n TypeScript features that require transformation, such as enums or namespaces.\n Node.js will replace inline type annotations with whitespace,",
        "comment_created_at": "2024-12-26T09:20:08+00:00",
        "comment_author": "pmarchini",
        "comment_body": "nit: I think we should specify the default behaviour before introducing the `--no-experimental-strip-types` flag to enhance clarity. \r\n\r\nSomething like:  \r\n```suggestion  \r\nNode.js enables the execution of TypeScript files by default through a lightweight type stripping feature. This feature removes inline type annotations (replacing them with whitespace) without performing type checking or transformations that require JavaScript code generation, allowing Node.js to execute TypeScript code without requiring source maps. However, TypeScript features that require configuration settings from `tsconfig.json`, such as `paths` or syntax transformations, are intentionally unsupported.  \r\n\r\nTo prevent Node.js from running TypeScript files, use the `--no-experimental-strip-types` flag. With this flag enabled, Node.js will execute only files that do not contain any TypeScript syntax.  \r\n\r\nFor TypeScript features requiring transformation, such as enums or namespaces, use the `--experimental-transform-types` flag.  \r\n```  \r\n\r\nAdditionally, at the beginning of this documentation([reference](https://github.com/nodejs/node/pull/56350/files#diff-1feb5cbb78f3285eb3dec9f9402c52e82df9ef15481315d2169ae7cd6648ad5cL12-L20)), IMHO, we should clarify that one of the suggested approaches is enabled by default.  ",
        "pr_file_module": null
      },
      {
        "comment_id": "1897811139",
        "repo_full_name": "nodejs/node",
        "pr_number": 56350,
        "pr_file": "doc/api/typescript.md",
        "discussion_id": "1897782173",
        "commented_code": "@@ -52,7 +55,7 @@ added: v22.6.0\n \n > Stability: 1.1 - Active development\n \n-The flag [`--experimental-strip-types`][] enables Node.js to run TypeScript\n+The flag [`--no-experimental-strip-types`][] prevents Node.js from running TypeScript\n files. By default Node.js will execute only files that contain no\n TypeScript features that require transformation, such as enums or namespaces.\n Node.js will replace inline type annotations with whitespace,",
        "comment_created_at": "2024-12-26T10:02:08+00:00",
        "comment_author": "marco-ippolito",
        "comment_body": "CI is very flaky, I'll improve docs in a follow up PR",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2130903519",
    "pr_number": 54364,
    "pr_file": "doc/api/code_integrity.md",
    "created_at": "2025-06-05T23:27:06+00:00",
    "commented_code": "+# Code Integrity\n+\n+<!--introduced_in=REPLACEME-->\n+\n+<!-- type=misc -->\n+\n+> Stability: 1.1 - Active development\n+\n+Code integrity refers to the assurance that software code has not been\n+altered or tampered with in any unauthorized way. It ensures that\n+the code running on a system is exactly what was intended by the developers.\n+\n+Code integrity in Node.js integrates with platform features for code integrity\n+policy enforcement. See platform speficic sections below for more information.\n+\n+The Node.js threat model considers the code that the runtime executes to be\n+trusted. As such, this feature is an additional safety belt, not a strict\n+security boundary.\n+\n+If you find a potential security vulnerability, please refer to our\n+[Security Policy][].\n+\n+## Code Integrity on Windows\n+\n+Code integrity is an opt-in feature that leverages Window Defender Application Control\n+to verify the code executing conforms to system policy and has not been modified since\n+signing time.\n+\n+There are three audiences that are involved when using Node.js in an\n+environment enforcing code integrity: the application developers,\n+those administrating the system enforcing code integrity, and\n+the end user. The following sections describe how each audience\n+can interact with code integrity enforcement.\n+\n+### Windows Code Integrity and Application Developers\n+\n+Windows Defender Application Control uses digital signatures to verify\n+a file's integrity. Application developers are responsible for generating and\n+distributing the signature information for their Node.js application.\n+Application developers are also expected to design their application\n+in robust ways to avoid unintended code execution. This includes\n+use of `eval` and loading modules outside of standard methods.\n+\n+Signature information for files which Node.js is intended to execute\n+can be stored in a catalog file. Application developers can generate\n+a Windows catalog file to store the hash of all files Node.js\n+is expected to execute.\n+\n+A catalog can be generated using the `New-FileCatalog` Powershell\n+cmdlet. For example\n+\n+```powershell\n+New-FileCatalog -Version 2 -CatalogFilePath MyApplicationCatalog.cat -Path \\my\\application\\path\\\n+```\n+\n+The `Path` argument should point to the root folder containing your application's code. If\n+your application's code is fully contained in one file, `Path` can point to that single file.\n+\n+Be sure that the catalog is generated using the final version of the files that you intend to ship\n+(i.e. after minifying).\n+\n+The application developer should then sign the generated catalog with their Code Signing certificate\n+to ensure the catalog is not tampered with between distribution and execution.\n+\n+This can be done with the [Set-AuthenticodeSignature commandlet](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-authenticodesignature).",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2130903519",
        "repo_full_name": "nodejs/node",
        "pr_number": 54364,
        "pr_file": "doc/api/code_integrity.md",
        "discussion_id": "2130903519",
        "commented_code": "@@ -0,0 +1,133 @@\n+# Code Integrity\n+\n+<!--introduced_in=REPLACEME-->\n+\n+<!-- type=misc -->\n+\n+> Stability: 1.1 - Active development\n+\n+Code integrity refers to the assurance that software code has not been\n+altered or tampered with in any unauthorized way. It ensures that\n+the code running on a system is exactly what was intended by the developers.\n+\n+Code integrity in Node.js integrates with platform features for code integrity\n+policy enforcement. See platform speficic sections below for more information.\n+\n+The Node.js threat model considers the code that the runtime executes to be\n+trusted. As such, this feature is an additional safety belt, not a strict\n+security boundary.\n+\n+If you find a potential security vulnerability, please refer to our\n+[Security Policy][].\n+\n+## Code Integrity on Windows\n+\n+Code integrity is an opt-in feature that leverages Window Defender Application Control\n+to verify the code executing conforms to system policy and has not been modified since\n+signing time.\n+\n+There are three audiences that are involved when using Node.js in an\n+environment enforcing code integrity: the application developers,\n+those administrating the system enforcing code integrity, and\n+the end user. The following sections describe how each audience\n+can interact with code integrity enforcement.\n+\n+### Windows Code Integrity and Application Developers\n+\n+Windows Defender Application Control uses digital signatures to verify\n+a file's integrity. Application developers are responsible for generating and\n+distributing the signature information for their Node.js application.\n+Application developers are also expected to design their application\n+in robust ways to avoid unintended code execution. This includes\n+use of `eval` and loading modules outside of standard methods.\n+\n+Signature information for files which Node.js is intended to execute\n+can be stored in a catalog file. Application developers can generate\n+a Windows catalog file to store the hash of all files Node.js\n+is expected to execute.\n+\n+A catalog can be generated using the `New-FileCatalog` Powershell\n+cmdlet. For example\n+\n+```powershell\n+New-FileCatalog -Version 2 -CatalogFilePath MyApplicationCatalog.cat -Path \\my\\application\\path\\\n+```\n+\n+The `Path` argument should point to the root folder containing your application's code. If\n+your application's code is fully contained in one file, `Path` can point to that single file.\n+\n+Be sure that the catalog is generated using the final version of the files that you intend to ship\n+(i.e. after minifying).\n+\n+The application developer should then sign the generated catalog with their Code Signing certificate\n+to ensure the catalog is not tampered with between distribution and execution.\n+\n+This can be done with the [Set-AuthenticodeSignature commandlet](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-authenticodesignature).",
        "comment_created_at": "2025-06-05T23:27:06+00:00",
        "comment_author": "jasnell",
        "comment_body": "Check out how we handle links in the other docs in this folder. We collect them at the end of the doc and use in-doc references rather than inlining the URLs. Much more readable that way.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2065461042",
    "pr_number": 58049,
    "pr_file": "doc/api/http.md",
    "created_at": "2025-04-29T05:08:27+00:00",
    "commented_code": "* `family` {number} IP address family to use when resolving `host` or\n     `hostname`. Valid values are `4` or `6`. When unspecified, both IP v4 and\n     v6 will be used.\n-  * `headers` {Object} An object containing request headers.\n+  * `headers` {Object|Array} An object or an array of strings containing request headers. The array is in the same format as  [`message.rawHeaders`][].",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2065461042",
        "repo_full_name": "nodejs/node",
        "pr_number": 58049,
        "pr_file": "doc/api/http.md",
        "discussion_id": "2065461042",
        "commented_code": "@@ -3818,7 +3818,7 @@ changes:\n   * `family` {number} IP address family to use when resolving `host` or\n     `hostname`. Valid values are `4` or `6`. When unspecified, both IP v4 and\n     v6 will be used.\n-  * `headers` {Object} An object containing request headers.\n+  * `headers` {Object|Array} An object or an array of strings containing request headers. The array is in the same format as  [`message.rawHeaders`][].",
        "comment_created_at": "2025-04-29T05:08:27+00:00",
        "comment_author": "trivikr",
        "comment_body": "nit: limit line length to 80 characters, and remove extra space\r\n```suggestion\r\n  * `headers` {Object|Array} An object or an array of strings containing request\r\n    headers. The array is in the same format as [`message.rawHeaders`][].\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2069205955",
        "repo_full_name": "nodejs/node",
        "pr_number": 58049,
        "pr_file": "doc/api/http.md",
        "discussion_id": "2065461042",
        "commented_code": "@@ -3818,7 +3818,7 @@ changes:\n   * `family` {number} IP address family to use when resolving `host` or\n     `hostname`. Valid values are `4` or `6`. When unspecified, both IP v4 and\n     v6 will be used.\n-  * `headers` {Object} An object containing request headers.\n+  * `headers` {Object|Array} An object or an array of strings containing request headers. The array is in the same format as  [`message.rawHeaders`][].",
        "comment_created_at": "2025-04-30T18:05:38+00:00",
        "comment_author": "mikaws",
        "comment_body": "Fixed as suggested, thanks for the careful review. See [238caa5](https://github.com/nodejs/node/commit/238caa51d4bec9ee0e5de1af50e63f9eb9c0a750).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2158513874",
    "pr_number": 58769,
    "pr_file": "doc/api/http.md",
    "created_at": "2025-06-20T09:44:58+00:00",
    "commented_code": "* `family` {number} IP address family to use when resolving `host` or\n     `hostname`. Valid values are `4` or `6`. When unspecified, both IP v4 and\n     v6 will be used.\n-  * `headers` {Object} An object containing request headers.\n+  * `headers` {Object | Array} Request headers to send with the request. This can be:\n+    * An object like `{ 'Content-Type': 'application/json' }`, or\n+    * An array of key-value pairs like `[ 'Content-Type', 'text/plain', 'X-Custom', 'yes' ]`,  similar to how headers are          passed to `response.writeHead()`.",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2158513874",
        "repo_full_name": "nodejs/node",
        "pr_number": 58769,
        "pr_file": "doc/api/http.md",
        "discussion_id": "2158513874",
        "commented_code": "@@ -3820,7 +3820,9 @@ changes:\n   * `family` {number} IP address family to use when resolving `host` or\n     `hostname`. Valid values are `4` or `6`. When unspecified, both IP v4 and\n     v6 will be used.\n-  * `headers` {Object} An object containing request headers.\n+  * `headers` {Object | Array} Request headers to send with the request. This can be:\n+    * An object like `{ 'Content-Type': 'application/json' }`, or\n+    * An array of key-value pairs like `[ 'Content-Type', 'text/plain', 'X-Custom', 'yes' ]`,  similar to how headers are          passed to `response.writeHead()`.",
        "comment_created_at": "2025-06-20T09:44:58+00:00",
        "comment_author": "pimterry",
        "comment_body": "There's a series of extra spaces here (`are          passed`), and this line is very long, which will be why the markdown linting is failing here. Can you fix that? You can run the markdown linting locally by running `make lint-md`.\r\n\r\n\"An array of key-value pairs\" is not clear I think - that will make people think of `[[\"key1\", \"value1\"], [\"key2\", \"value2\"]]` which is not what's happening. We should be specific that this is a flat array of values, not tuples, since this can be confusing.\r\n\r\nI think it would be good to link to `response.writeHead` here, and `request.rawHeaders` as well (which uses the same format).\r\n\r\nIt might be better to keep the text inline here simple (a very short explanation of \"headers object or flat array of raw headers\" or similar) and then include the larger explanation & examples as a paragraph in the text below. What do you think? See what looks best - you can test the docs locally by running `make docserve` and then looking at http://localhost:8000.",
        "pr_file_module": null
      }
    ]
  }
]