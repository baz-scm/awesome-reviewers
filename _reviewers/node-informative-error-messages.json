[
  {
    "discussion_id": "2200752464",
    "pr_number": 58253,
    "pr_file": "lib/internal/errors.js",
    "created_at": "2025-07-11T13:28:03+00:00",
    "commented_code": "RangeError);\n E('ERR_CONSOLE_WRITABLE_STREAM',\n   'Console expects a writable stream instance for %s', TypeError);\n+E('ERR_CONSTRUCT_CALL_REQUIRED', '%s cannot call constructor without `new`', TypeError);",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2200752464",
        "repo_full_name": "nodejs/node",
        "pr_number": 58253,
        "pr_file": "lib/internal/errors.js",
        "discussion_id": "2200752464",
        "commented_code": "@@ -1159,6 +1159,7 @@ E('ERR_CHILD_PROCESS_STDIO_MAXBUFFER', '%s maxBuffer length exceeded',\n   RangeError);\n E('ERR_CONSOLE_WRITABLE_STREAM',\n   'Console expects a writable stream instance for %s', TypeError);\n+E('ERR_CONSTRUCT_CALL_REQUIRED', '%s cannot call constructor without `new`', TypeError);",
        "comment_created_at": "2025-07-11T13:28:03+00:00",
        "comment_author": "aduh95",
        "comment_body": "```suggestion\r\nE('ERR_CONSTRUCT_CALL_REQUIRED', 'Cannot call %s constructor without `new`', TypeError);\r\n```\r\nor, to mimic the error thrown by V8 when calling `(class Test{})()`\r\n```suggestion\r\nE('ERR_CONSTRUCT_CALL_REQUIRED', 'Class constructor %s cannot be invoked without `new`', TypeError);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2030260345",
    "pr_number": 57775,
    "pr_file": "lib/fs.js",
    "created_at": "2025-04-06T20:26:37+00:00",
    "commented_code": "callback = makeStatsCallback(callback);\n \n   const req = new FSReqCallback(options.bigint);\n-  req.oncomplete = callback;\n+\n+  options = getOptions(options, { bigint: false, signal: undefined });\n+\n+  if (options.signal?.aborted) {\n+    return process.nextTick(() =>",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2030260345",
        "repo_full_name": "nodejs/node",
        "pr_number": 57775,
        "pr_file": "lib/fs.js",
        "discussion_id": "2030260345",
        "commented_code": "@@ -1635,7 +1635,33 @@ function stat(path, options = { bigint: false }, callback) {\n   callback = makeStatsCallback(callback);\n \n   const req = new FSReqCallback(options.bigint);\n-  req.oncomplete = callback;\n+\n+  options = getOptions(options, { bigint: false, signal: undefined });\n+\n+  if (options.signal?.aborted) {\n+    return process.nextTick(() =>",
        "comment_created_at": "2025-04-06T20:26:37+00:00",
        "comment_author": "jasnell",
        "comment_body": "Here I would create the error outside the `process.nextTick(...)` so that it has a useful stack trace attached to it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2030265406",
        "repo_full_name": "nodejs/node",
        "pr_number": 57775,
        "pr_file": "lib/fs.js",
        "discussion_id": "2030260345",
        "commented_code": "@@ -1635,7 +1635,33 @@ function stat(path, options = { bigint: false }, callback) {\n   callback = makeStatsCallback(callback);\n \n   const req = new FSReqCallback(options.bigint);\n-  req.oncomplete = callback;\n+\n+  options = getOptions(options, { bigint: false, signal: undefined });\n+\n+  if (options.signal?.aborted) {\n+    return process.nextTick(() =>",
        "comment_created_at": "2025-04-06T20:42:31+00:00",
        "comment_author": "mertcanaltin",
        "comment_body": "thanks for suggestion 🙏 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1875980157",
    "pr_number": 56148,
    "pr_file": "test/parallel/test-child-process-spawn-error.js",
    "created_at": "2024-12-09T13:26:37+00:00",
    "commented_code": "assert.strictEqual(err.path, enoentPath);\n   assert.deepStrictEqual(err.spawnargs, spawnargs);\n }));\n+\n+\n+// Verify that the spawn() function throws when the file parameter is not a valid string\n+{\n+  assert.throws(() => {\n+    spawn(123, common.mustNotCall());\n+  }, {\n+    code: 'ERR_INVALID_ARG_TYPE',\n+    name: 'TypeError',\n+    message: 'The \"file\" argument must be of type string. Received type number (123)'\n+  });",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "1875980157",
        "repo_full_name": "nodejs/node",
        "pr_number": 56148,
        "pr_file": "test/parallel/test-child-process-spawn-error.js",
        "discussion_id": "1875980157",
        "commented_code": "@@ -53,3 +53,31 @@ enoentChild.on('error', common.mustCall(function(err) {\n   assert.strictEqual(err.path, enoentPath);\n   assert.deepStrictEqual(err.spawnargs, spawnargs);\n }));\n+\n+\n+// Verify that the spawn() function throws when the file parameter is not a valid string\n+{\n+  assert.throws(() => {\n+    spawn(123, common.mustNotCall());\n+  }, {\n+    code: 'ERR_INVALID_ARG_TYPE',\n+    name: 'TypeError',\n+    message: 'The \"file\" argument must be of type string. Received type number (123)'\n+  });",
        "comment_created_at": "2024-12-09T13:26:37+00:00",
        "comment_author": "aduh95",
        "comment_body": "Can we do the same in this file?\r\n```suggestion\r\n  }, { code: 'ERR_INVALID_ARG_TYPE' });\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2119903741",
    "pr_number": 55874,
    "pr_file": "lib/internal/modules/esm/module_job.js",
    "created_at": "2025-06-02T02:48:31+00:00",
    "commented_code": "const explainCommonJSGlobalLikeNotDefinedError = (e, url) => {\n   if (e?.name === 'ReferenceError' &&\n       isCommonJSGlobalLikeNotDefinedError(e.message)) {\n+\n+    if (e.message.includes('require is not defined')) {\n+      e.message = [\n+        'ERR_AMBIGUOUS_MODULE_SYNTAX: This file cannot be parsed as either CommonJS or ES Module.',\n+        '- CommonJS error: await is only valid in async functions.',\n+        '- ES Module error: require is not defined in ES module scope.',\n+        'If you meant to use CommonJS, wrap top-level await in async function.',\n+        'If you meant to use ESM, do not use require().',",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2119903741",
        "repo_full_name": "nodejs/node",
        "pr_number": 55874,
        "pr_file": "lib/internal/modules/esm/module_job.js",
        "discussion_id": "2119903741",
        "commented_code": "@@ -75,6 +75,19 @@ const isCommonJSGlobalLikeNotDefinedError = (errorMessage) =>\n const explainCommonJSGlobalLikeNotDefinedError = (e, url) => {\n   if (e?.name === 'ReferenceError' &&\n       isCommonJSGlobalLikeNotDefinedError(e.message)) {\n+\n+    if (e.message.includes('require is not defined')) {\n+      e.message = [\n+        'ERR_AMBIGUOUS_MODULE_SYNTAX: This file cannot be parsed as either CommonJS or ES Module.',\n+        '- CommonJS error: await is only valid in async functions.',\n+        '- ES Module error: require is not defined in ES module scope.',\n+        'If you meant to use CommonJS, wrap top-level await in async function.',\n+        'If you meant to use ESM, do not use require().',",
        "comment_created_at": "2025-06-02T02:48:31+00:00",
        "comment_author": "GeoffreyBooth",
        "comment_body": "This error message assumes that a top-level await is present, but simply checking for `require is not defined` wouldn’t necessarily imply that, would it?",
        "pr_file_module": null
      },
      {
        "comment_id": "2124784650",
        "repo_full_name": "nodejs/node",
        "pr_number": 55874,
        "pr_file": "lib/internal/modules/esm/module_job.js",
        "discussion_id": "2119903741",
        "commented_code": "@@ -75,6 +75,19 @@ const isCommonJSGlobalLikeNotDefinedError = (errorMessage) =>\n const explainCommonJSGlobalLikeNotDefinedError = (e, url) => {\n   if (e?.name === 'ReferenceError' &&\n       isCommonJSGlobalLikeNotDefinedError(e.message)) {\n+\n+    if (e.message.includes('require is not defined')) {\n+      e.message = [\n+        'ERR_AMBIGUOUS_MODULE_SYNTAX: This file cannot be parsed as either CommonJS or ES Module.',\n+        '- CommonJS error: await is only valid in async functions.',\n+        '- ES Module error: require is not defined in ES module scope.',\n+        'If you meant to use CommonJS, wrap top-level await in async function.',\n+        'If you meant to use ESM, do not use require().',",
        "comment_created_at": "2025-06-03T19:47:45+00:00",
        "comment_author": "mertcanaltin",
        "comment_body": "You're absolutely right! My current implementation only checks for the \"require is not defined\" error but doesn't verify that top-level await is actually present. This could show misleading error messages for files that only use require() without any await.\r\nI should add an additional check to detect top-level await in the source code before showing this specific error message.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2130817401",
    "pr_number": 55874,
    "pr_file": "lib/internal/modules/esm/module_job.js",
    "created_at": "2025-06-05T23:02:11+00:00",
    "commented_code": "* @param {string} url\n  * @returns {void}\n  */\n-const explainCommonJSGlobalLikeNotDefinedError = (e, url) => {\n+const explainCommonJSGlobalLikeNotDefinedError = (e, url, hasTopLevelAwait) => {\n   if (e?.name === 'ReferenceError' &&\n       isCommonJSGlobalLikeNotDefinedError(e.message)) {\n+\n+    if (hasTopLevelAwait) {\n+      e.message = `ERR_AMBIGUOUS_MODULE_SYNTAX: This file cannot be parsed as either CommonJS or ES Module. CommonJS error: await is only valid in async functions. ES Module error: require is not defined in ES module scope. If you meant to use CommonJS, wrap top-level await in async function. If you meant to use ESM, do not use require().`;",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2130817401",
        "repo_full_name": "nodejs/node",
        "pr_number": 55874,
        "pr_file": "lib/internal/modules/esm/module_job.js",
        "discussion_id": "2130817401",
        "commented_code": "@@ -72,9 +72,16 @@ const isCommonJSGlobalLikeNotDefinedError = (errorMessage) =>\n  * @param {string} url\n  * @returns {void}\n  */\n-const explainCommonJSGlobalLikeNotDefinedError = (e, url) => {\n+const explainCommonJSGlobalLikeNotDefinedError = (e, url, hasTopLevelAwait) => {\n   if (e?.name === 'ReferenceError' &&\n       isCommonJSGlobalLikeNotDefinedError(e.message)) {\n+\n+    if (hasTopLevelAwait) {\n+      e.message = `ERR_AMBIGUOUS_MODULE_SYNTAX: This file cannot be parsed as either CommonJS or ES Module. CommonJS error: await is only valid in async functions. ES Module error: require is not defined in ES module scope. If you meant to use CommonJS, wrap top-level await in async function. If you meant to use ESM, do not use require().`;",
        "comment_created_at": "2025-06-05T23:02:11+00:00",
        "comment_author": "addaleax",
        "comment_body": "Okay, I'm a little confused here -- the code mostly looks good, but maybe we can spell out which condition exactly is supposed to trigger this error, and be specific about the error message? Like, it's odd to describe multiple different errors here, although I kind of see where you're coming from",
        "pr_file_module": null
      },
      {
        "comment_id": "2130839440",
        "repo_full_name": "nodejs/node",
        "pr_number": 55874,
        "pr_file": "lib/internal/modules/esm/module_job.js",
        "discussion_id": "2130817401",
        "commented_code": "@@ -72,9 +72,16 @@ const isCommonJSGlobalLikeNotDefinedError = (errorMessage) =>\n  * @param {string} url\n  * @returns {void}\n  */\n-const explainCommonJSGlobalLikeNotDefinedError = (e, url) => {\n+const explainCommonJSGlobalLikeNotDefinedError = (e, url, hasTopLevelAwait) => {\n   if (e?.name === 'ReferenceError' &&\n       isCommonJSGlobalLikeNotDefinedError(e.message)) {\n+\n+    if (hasTopLevelAwait) {\n+      e.message = `ERR_AMBIGUOUS_MODULE_SYNTAX: This file cannot be parsed as either CommonJS or ES Module. CommonJS error: await is only valid in async functions. ES Module error: require is not defined in ES module scope. If you meant to use CommonJS, wrap top-level await in async function. If you meant to use ESM, do not use require().`;",
        "comment_created_at": "2025-06-05T23:08:32+00:00",
        "comment_author": "mertcanaltin",
        "comment_body": "Hi @addaleax, \r\n\r\nYou're absolutely right - the message is trying to do too much. \r\n\r\nThe specific condition is: file has both `require()` and top-level `await`, creating an ambiguous parsing situation.\r\n\r\nHow about we simplify the error message to focus on the immediate issue:\r\n\r\n```bash\r\nERR_AMBIGUOUS_MODULE_SYNTAX: Cannot use 'require()' and top-level 'await' in the same file.\r\nChoose either CommonJS (remove await, use async functions) or ES Module (remove require, use import).\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2131346678",
        "repo_full_name": "nodejs/node",
        "pr_number": 55874,
        "pr_file": "lib/internal/modules/esm/module_job.js",
        "discussion_id": "2130817401",
        "commented_code": "@@ -72,9 +72,16 @@ const isCommonJSGlobalLikeNotDefinedError = (errorMessage) =>\n  * @param {string} url\n  * @returns {void}\n  */\n-const explainCommonJSGlobalLikeNotDefinedError = (e, url) => {\n+const explainCommonJSGlobalLikeNotDefinedError = (e, url, hasTopLevelAwait) => {\n   if (e?.name === 'ReferenceError' &&\n       isCommonJSGlobalLikeNotDefinedError(e.message)) {\n+\n+    if (hasTopLevelAwait) {\n+      e.message = `ERR_AMBIGUOUS_MODULE_SYNTAX: This file cannot be parsed as either CommonJS or ES Module. CommonJS error: await is only valid in async functions. ES Module error: require is not defined in ES module scope. If you meant to use CommonJS, wrap top-level await in async function. If you meant to use ESM, do not use require().`;",
        "comment_created_at": "2025-06-06T02:10:27+00:00",
        "comment_author": "GeoffreyBooth",
        "comment_body": "Technically it can be _parsed_ as ESM, just not successfully _evaluated_ as ESM because `require` is undefined. It can't be successfully parsed as CommonJS because of the top-level await. So I'm not sure if \"ambiguous\" is the right word; it's more that it's so unclear what the user intended that we can't reasonably make a guess.",
        "pr_file_module": null
      },
      {
        "comment_id": "2131936987",
        "repo_full_name": "nodejs/node",
        "pr_number": 55874,
        "pr_file": "lib/internal/modules/esm/module_job.js",
        "discussion_id": "2130817401",
        "commented_code": "@@ -72,9 +72,16 @@ const isCommonJSGlobalLikeNotDefinedError = (errorMessage) =>\n  * @param {string} url\n  * @returns {void}\n  */\n-const explainCommonJSGlobalLikeNotDefinedError = (e, url) => {\n+const explainCommonJSGlobalLikeNotDefinedError = (e, url, hasTopLevelAwait) => {\n   if (e?.name === 'ReferenceError' &&\n       isCommonJSGlobalLikeNotDefinedError(e.message)) {\n+\n+    if (hasTopLevelAwait) {\n+      e.message = `ERR_AMBIGUOUS_MODULE_SYNTAX: This file cannot be parsed as either CommonJS or ES Module. CommonJS error: await is only valid in async functions. ES Module error: require is not defined in ES module scope. If you meant to use CommonJS, wrap top-level await in async function. If you meant to use ESM, do not use require().`;",
        "comment_created_at": "2025-06-06T10:20:49+00:00",
        "comment_author": "mertcanaltin",
        "comment_body": "> Technically it can be _parsed_ as ESM, just not successfully _evaluated_ as ESM because `require` is undefined. It can't be successfully parsed as CommonJS because of the top-level await. So I'm not sure if \"ambiguous\" is the right word; it's more that it's so unclear what the user intended that we can't reasonably make a guess.\r\n\r\nYes, I agree with what you said, I think a message like this would be more appropriate.\r\n\r\n```js\r\nCannot determine intended module format. File contains both 'require()' and top-level 'await'. For CommonJS: wrap await in async function. For ES Module: replace require() with import.\r\n```\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2160211411",
        "repo_full_name": "nodejs/node",
        "pr_number": 55874,
        "pr_file": "lib/internal/modules/esm/module_job.js",
        "discussion_id": "2130817401",
        "commented_code": "@@ -72,9 +72,16 @@ const isCommonJSGlobalLikeNotDefinedError = (errorMessage) =>\n  * @param {string} url\n  * @returns {void}\n  */\n-const explainCommonJSGlobalLikeNotDefinedError = (e, url) => {\n+const explainCommonJSGlobalLikeNotDefinedError = (e, url, hasTopLevelAwait) => {\n   if (e?.name === 'ReferenceError' &&\n       isCommonJSGlobalLikeNotDefinedError(e.message)) {\n+\n+    if (hasTopLevelAwait) {\n+      e.message = `ERR_AMBIGUOUS_MODULE_SYNTAX: This file cannot be parsed as either CommonJS or ES Module. CommonJS error: await is only valid in async functions. ES Module error: require is not defined in ES module scope. If you meant to use CommonJS, wrap top-level await in async function. If you meant to use ESM, do not use require().`;",
        "comment_created_at": "2025-06-22T03:31:32+00:00",
        "comment_author": "GeoffreyBooth",
        "comment_body": "I assume when you write `For CommonJS:` what you mean is, `If you intended this file to be CommonJS,` and likewise for `For ES Module:`. So maybe:\r\n\r\n> Cannot determine intended module format because both `require()` and top-level `await` are present. If the code is intended to be CommonJS, wrap `await` in an async function. If the code is intended to be an ES module, replace `require()` with `import`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2164609356",
        "repo_full_name": "nodejs/node",
        "pr_number": 55874,
        "pr_file": "lib/internal/modules/esm/module_job.js",
        "discussion_id": "2130817401",
        "commented_code": "@@ -72,9 +72,16 @@ const isCommonJSGlobalLikeNotDefinedError = (errorMessage) =>\n  * @param {string} url\n  * @returns {void}\n  */\n-const explainCommonJSGlobalLikeNotDefinedError = (e, url) => {\n+const explainCommonJSGlobalLikeNotDefinedError = (e, url, hasTopLevelAwait) => {\n   if (e?.name === 'ReferenceError' &&\n       isCommonJSGlobalLikeNotDefinedError(e.message)) {\n+\n+    if (hasTopLevelAwait) {\n+      e.message = `ERR_AMBIGUOUS_MODULE_SYNTAX: This file cannot be parsed as either CommonJS or ES Module. CommonJS error: await is only valid in async functions. ES Module error: require is not defined in ES module scope. If you meant to use CommonJS, wrap top-level await in async function. If you meant to use ESM, do not use require().`;",
        "comment_created_at": "2025-06-24T18:06:43+00:00",
        "comment_author": "mertcanaltin",
        "comment_body": "Thanks I updated",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2159971475",
    "pr_number": 58060,
    "pr_file": "test/pseudo-tty/test-os-guessFileDescriptorType.js",
    "created_at": "2025-06-21T07:55:59+00:00",
    "commented_code": "+'use strict';\n+\n+require('../common');\n+const { strictEqual, throws } = require('assert');\n+const { guessFileDescriptorType } = require('os');\n+\n+strictEqual(guessFileDescriptorType(0), 'TTY', 'stdin reported to not be a tty, but it is');\n+strictEqual(guessFileDescriptorType(1), 'TTY', 'stdout reported to not be a tty, but it is');\n+strictEqual(guessFileDescriptorType(2), 'TTY', 'stderr reported to not be a tty, but it is');\n+\n+strictEqual(guessFileDescriptorType(55555), 'UNKNOWN', '55555 reported to be a handle, but it is not');\n+strictEqual(guessFileDescriptorType(2 ** 31 - 1), 'UNKNOWN', '2^31-1 reported to be a handle, but it is not');\n+\n+throws(() => guessFileDescriptorType(-1), /\"fd\" must be a positive integer/, '-1 reported to be a handle, but it is not');\n+throws(() => guessFileDescriptorType(1.1), /\"fd\" must be a positive integer/, '1.1 reported to be a handle, but it is not');\n+throws(() => guessFileDescriptorType('1'), /\"fd\" must be a positive integer/, '\\'1\\' reported to be a tty, but it is not');\n+throws(() => guessFileDescriptorType({}), /\"fd\" must be a positive integer/, '{} reported to be a tty, but it is not');\n+throws(() => guessFileDescriptorType(() => {}), /\"fd\" must be a positive integer/, '() => {} reported to be a tty, but it is not');\n+throws(() => guessFileDescriptorType(2 ** 31), /\"fd\" must be a positive integer/, '2^31 reported to be a handle, but it is not (because the fd check rolls over the input to negative of it)');",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2159971475",
        "repo_full_name": "nodejs/node",
        "pr_number": 58060,
        "pr_file": "test/pseudo-tty/test-os-guessFileDescriptorType.js",
        "discussion_id": "2159971475",
        "commented_code": "@@ -0,0 +1,19 @@\n+'use strict';\n+\n+require('../common');\n+const { strictEqual, throws } = require('assert');\n+const { guessFileDescriptorType } = require('os');\n+\n+strictEqual(guessFileDescriptorType(0), 'TTY', 'stdin reported to not be a tty, but it is');\n+strictEqual(guessFileDescriptorType(1), 'TTY', 'stdout reported to not be a tty, but it is');\n+strictEqual(guessFileDescriptorType(2), 'TTY', 'stderr reported to not be a tty, but it is');\n+\n+strictEqual(guessFileDescriptorType(55555), 'UNKNOWN', '55555 reported to be a handle, but it is not');\n+strictEqual(guessFileDescriptorType(2 ** 31 - 1), 'UNKNOWN', '2^31-1 reported to be a handle, but it is not');\n+\n+throws(() => guessFileDescriptorType(-1), /\"fd\" must be a positive integer/, '-1 reported to be a handle, but it is not');\n+throws(() => guessFileDescriptorType(1.1), /\"fd\" must be a positive integer/, '1.1 reported to be a handle, but it is not');\n+throws(() => guessFileDescriptorType('1'), /\"fd\" must be a positive integer/, '\\'1\\' reported to be a tty, but it is not');\n+throws(() => guessFileDescriptorType({}), /\"fd\" must be a positive integer/, '{} reported to be a tty, but it is not');\n+throws(() => guessFileDescriptorType(() => {}), /\"fd\" must be a positive integer/, '() => {} reported to be a tty, but it is not');\n+throws(() => guessFileDescriptorType(2 ** 31), /\"fd\" must be a positive integer/, '2^31 reported to be a handle, but it is not (because the fd check rolls over the input to negative of it)');",
        "comment_created_at": "2025-06-21T07:55:59+00:00",
        "comment_author": "aduh95",
        "comment_body": "We should be checking for a error code, not the message (error messages are not covered by semver, error codes are)\r\n```suggestion\r\n[\r\n    -1,\r\n    1.1,\r\n    '1',\r\n    [],\r\n    {},\r\n    () => {},\r\n    2 ** 31,\r\n    true,\r\n    false,\r\n    1n,\r\n    Symbol(),\r\n    undefined,\r\n    null,\r\n].forEach((val) => throws(() => guessFileDescriptorType(val), { code: 'ERR_INVALID_FD' }));\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1994162011",
    "pr_number": 56022,
    "pr_file": "lib/internal/fs/promises.js",
    "created_at": "2025-03-13T19:11:40+00:00",
    "commented_code": "let size = 0;\n   let length = 0;\n-  if ((statFields[1/* mode */] & S_IFMT) === S_IFREG) {\n-    size = statFields[8/* size */];\n+\n+  if ((statFields[1 /* mode */] & S_IFMT) === S_IFREG) {\n+    size = statFields[8 /* size */];\n+\n+    if (size > kIoMaxLength) {\n+      process.emitWarning(\n+        `Warning: Detected \\`fs.readFile()\\` to read a huge file in memory (${size} bytes). Please consider using \\`fs.createReadStream()\\` instead to minimize memory overhead and increase the performance.`,\n+      );",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "1994162011",
        "repo_full_name": "nodejs/node",
        "pr_number": 56022,
        "pr_file": "lib/internal/fs/promises.js",
        "discussion_id": "1994162011",
        "commented_code": "@@ -521,17 +519,22 @@ async function readFileHandle(filehandle, options) {\n \n   let size = 0;\n   let length = 0;\n-  if ((statFields[1/* mode */] & S_IFMT) === S_IFREG) {\n-    size = statFields[8/* size */];\n+\n+  if ((statFields[1 /* mode */] & S_IFMT) === S_IFREG) {\n+    size = statFields[8 /* size */];\n+\n+    if (size > kIoMaxLength) {\n+      process.emitWarning(\n+        `Warning: Detected \\`fs.readFile()\\` to read a huge file in memory (${size} bytes). Please consider using \\`fs.createReadStream()\\` instead to minimize memory overhead and increase the performance.`,\n+      );",
        "comment_created_at": "2025-03-13T19:11:40+00:00",
        "comment_author": "jasnell",
        "comment_body": "It would likely be worthwhile to assign a warning code to this warning so that it can be suppressed with the `--dsable-warning` CLI flag.\r\n\r\n![image](https://github.com/user-attachments/assets/ec94215e-e7f7-4729-9c02-69bf1c433d2f)",
        "pr_file_module": null
      },
      {
        "comment_id": "1997535509",
        "repo_full_name": "nodejs/node",
        "pr_number": 56022,
        "pr_file": "lib/internal/fs/promises.js",
        "discussion_id": "1994162011",
        "commented_code": "@@ -521,17 +519,22 @@ async function readFileHandle(filehandle, options) {\n \n   let size = 0;\n   let length = 0;\n-  if ((statFields[1/* mode */] & S_IFMT) === S_IFREG) {\n-    size = statFields[8/* size */];\n+\n+  if ((statFields[1 /* mode */] & S_IFMT) === S_IFREG) {\n+    size = statFields[8 /* size */];\n+\n+    if (size > kIoMaxLength) {\n+      process.emitWarning(\n+        `Warning: Detected \\`fs.readFile()\\` to read a huge file in memory (${size} bytes). Please consider using \\`fs.createReadStream()\\` instead to minimize memory overhead and increase the performance.`,\n+      );",
        "comment_created_at": "2025-03-16T09:00:59+00:00",
        "comment_author": "mertcanaltin",
        "comment_body": "Thanks, I try to use the ```ERR_FS_FILE_TOO_LARGE``` error code, do you think this is true?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2134753763",
    "pr_number": 58616,
    "pr_file": "lib/fs.js",
    "created_at": "2025-06-08T16:01:59+00:00",
    "commented_code": "callback = makeCallback(callback);\n   path = getValidatedPath(path);\n \n-  if (options?.recursive) {",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2134753763",
        "repo_full_name": "nodejs/node",
        "pr_number": 58616,
        "pr_file": "lib/fs.js",
        "discussion_id": "2134753763",
        "commented_code": "@@ -1125,32 +1124,10 @@ function rmdir(path, options, callback) {\n   callback = makeCallback(callback);\n   path = getValidatedPath(path);\n \n-  if (options?.recursive) {",
        "comment_created_at": "2025-06-08T16:01:59+00:00",
        "comment_author": "mcollina",
        "comment_body": "I would actually prefer if this throwed an exception now - silently ignoring is probably not easy to spot.",
        "pr_file_module": null
      },
      {
        "comment_id": "2134758534",
        "repo_full_name": "nodejs/node",
        "pr_number": 58616,
        "pr_file": "lib/fs.js",
        "discussion_id": "2134753763",
        "commented_code": "@@ -1125,32 +1124,10 @@ function rmdir(path, options, callback) {\n   callback = makeCallback(callback);\n   path = getValidatedPath(path);\n \n-  if (options?.recursive) {",
        "comment_created_at": "2025-06-08T16:18:29+00:00",
        "comment_author": "jasnell",
        "comment_body": "That's reasonable. Updated",
        "pr_file_module": null
      },
      {
        "comment_id": "2134776286",
        "repo_full_name": "nodejs/node",
        "pr_number": 58616,
        "pr_file": "lib/fs.js",
        "discussion_id": "2134753763",
        "commented_code": "@@ -1125,32 +1124,10 @@ function rmdir(path, options, callback) {\n   callback = makeCallback(callback);\n   path = getValidatedPath(path);\n \n-  if (options?.recursive) {",
        "comment_created_at": "2025-06-08T17:18:11+00:00",
        "comment_author": "targos",
        "comment_body": "Wouldn't it throw an exception anyway because you can't delete a non-empty folder?",
        "pr_file_module": null
      },
      {
        "comment_id": "2134788050",
        "repo_full_name": "nodejs/node",
        "pr_number": 58616,
        "pr_file": "lib/fs.js",
        "discussion_id": "2134753763",
        "commented_code": "@@ -1125,32 +1124,10 @@ function rmdir(path, options, callback) {\n   callback = makeCallback(callback);\n   path = getValidatedPath(path);\n \n-  if (options?.recursive) {",
        "comment_created_at": "2025-06-08T18:05:56+00:00",
        "comment_author": "jasnell",
        "comment_body": "Likely yes but I think it's reasonable to throw a more specific error here.",
        "pr_file_module": null
      }
    ]
  }
]