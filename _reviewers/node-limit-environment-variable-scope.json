[
  {
    "discussion_id": "2203954793",
    "pr_number": 59047,
    "pr_file": "lib/internal/test_runner/utils.js",
    "created_at": "2025-07-14T06:32:23+00:00",
    "commented_code": "}\n \n   const isTestRunner = getOptionValue('--test');\n-  const coverage = getOptionValue('--experimental-test-coverage');\n+  const coverage = getOptionValue('--experimental-test-coverage') && \n+                   !process.env.NODE_TEST_DISABLE_COVERAGE;",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2203954793",
        "repo_full_name": "nodejs/node",
        "pr_number": 59047,
        "pr_file": "lib/internal/test_runner/utils.js",
        "discussion_id": "2203954793",
        "commented_code": "@@ -196,7 +196,8 @@ function parseCommandLine() {\n   }\n \n   const isTestRunner = getOptionValue('--test');\n-  const coverage = getOptionValue('--experimental-test-coverage');\n+  const coverage = getOptionValue('--experimental-test-coverage') && \n+                   !process.env.NODE_TEST_DISABLE_COVERAGE;",
        "comment_created_at": "2025-07-14T06:32:23+00:00",
        "comment_author": "MoLow",
        "comment_body": "Isn't it better to depend on `NODE_TEST_CONTEXT` instead of introducing another similar mechinsim?",
        "pr_file_module": null
      },
      {
        "comment_id": "2203975063",
        "repo_full_name": "nodejs/node",
        "pr_number": 59047,
        "pr_file": "lib/internal/test_runner/utils.js",
        "discussion_id": "2203954793",
        "commented_code": "@@ -196,7 +196,8 @@ function parseCommandLine() {\n   }\n \n   const isTestRunner = getOptionValue('--test');\n-  const coverage = getOptionValue('--experimental-test-coverage');\n+  const coverage = getOptionValue('--experimental-test-coverage') && \n+                   !process.env.NODE_TEST_DISABLE_COVERAGE;",
        "comment_created_at": "2025-07-14T06:46:10+00:00",
        "comment_author": "sjwhole",
        "comment_body": "Thanks for the review! You're absolutely right. I've updated the implementation to use `NODE_TEST_CONTEXT`\r\n  instead of introducing a new environment variable.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2190252111",
    "pr_number": 58980,
    "pr_file": "lib/_http_agent.js",
    "created_at": "2025-07-07T14:19:51+00:00",
    "commented_code": "module.exports = {\n   Agent,\n-  globalAgent: new Agent({ keepAlive: true, scheduling: 'lifo', timeout: 5000 }),\n+  globalAgent: new Agent({\n+    keepAlive: true, scheduling: 'lifo', timeout: 5000,\n+    proxyEnv: process.env.NODE_USE_ENV_PROXY ? process.env : undefined,",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2190252111",
        "repo_full_name": "nodejs/node",
        "pr_number": 58980,
        "pr_file": "lib/_http_agent.js",
        "discussion_id": "2190252111",
        "commented_code": "@@ -543,5 +620,8 @@ function asyncResetHandle(socket) {\n \n module.exports = {\n   Agent,\n-  globalAgent: new Agent({ keepAlive: true, scheduling: 'lifo', timeout: 5000 }),\n+  globalAgent: new Agent({\n+    keepAlive: true, scheduling: 'lifo', timeout: 5000,\n+    proxyEnv: process.env.NODE_USE_ENV_PROXY ? process.env : undefined,",
        "comment_created_at": "2025-07-07T14:19:51+00:00",
        "comment_author": "jasnell",
        "comment_body": "Just a nit... I'd be more comfortable with this extracting just the env vars that are specifically relevant to `proxyEnv` rather than passing the entire `process.env`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2051514181",
    "pr_number": 57935,
    "pr_file": "lib/internal/test_runner/runner.js",
    "created_at": "2025-04-19T15:56:13+00:00",
    "commented_code": "env.WATCH_REPORT_DEPENDENCIES = '1';\n     }\n     if (opts.root.harness.shouldColorizeTestFiles) {\n-      env.FORCE_COLOR = '1';\n+      env.TEST_REPORT_COLORIZE = '1';",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2051514181",
        "repo_full_name": "nodejs/node",
        "pr_number": 57935,
        "pr_file": "lib/internal/test_runner/runner.js",
        "discussion_id": "2051514181",
        "commented_code": "@@ -373,7 +373,7 @@ function runTestFile(path, filesWatcher, opts) {\n       env.WATCH_REPORT_DEPENDENCIES = '1';\n     }\n     if (opts.root.harness.shouldColorizeTestFiles) {\n-      env.FORCE_COLOR = '1';\n+      env.TEST_REPORT_COLORIZE = '1';",
        "comment_created_at": "2025-04-19T15:56:13+00:00",
        "comment_author": "islandryu",
        "comment_body": "https://github.com/nodejs/node/issues/57921#issuecomment-2815349376\r\nAs stated here, I too don't think we should override the existing FORCE_COLOR by test.",
        "pr_file_module": null
      },
      {
        "comment_id": "2051520571",
        "repo_full_name": "nodejs/node",
        "pr_number": 57935,
        "pr_file": "lib/internal/test_runner/runner.js",
        "discussion_id": "2051514181",
        "commented_code": "@@ -373,7 +373,7 @@ function runTestFile(path, filesWatcher, opts) {\n       env.WATCH_REPORT_DEPENDENCIES = '1';\n     }\n     if (opts.root.harness.shouldColorizeTestFiles) {\n-      env.FORCE_COLOR = '1';\n+      env.TEST_REPORT_COLORIZE = '1';",
        "comment_created_at": "2025-04-19T16:24:26+00:00",
        "comment_author": "cjihrig",
        "comment_body": "We definitely shouldn't be creating new, undocumented environment variables like this. There is already `NODE_TEST_CONTEXT`, which is documented as something that users should not rely on. We would need to leverage that environment variable.",
        "pr_file_module": null
      },
      {
        "comment_id": "2051610602",
        "repo_full_name": "nodejs/node",
        "pr_number": 57935,
        "pr_file": "lib/internal/test_runner/runner.js",
        "discussion_id": "2051514181",
        "commented_code": "@@ -373,7 +373,7 @@ function runTestFile(path, filesWatcher, opts) {\n       env.WATCH_REPORT_DEPENDENCIES = '1';\n     }\n     if (opts.root.harness.shouldColorizeTestFiles) {\n-      env.FORCE_COLOR = '1';\n+      env.TEST_REPORT_COLORIZE = '1';",
        "comment_created_at": "2025-04-20T01:06:34+00:00",
        "comment_author": "islandryu",
        "comment_body": "I addressed it by setting NOE_TEXT_CONTEXT to child-v8-test-colorize. What do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "2052594893",
        "repo_full_name": "nodejs/node",
        "pr_number": 57935,
        "pr_file": "lib/internal/test_runner/runner.js",
        "discussion_id": "2051514181",
        "commented_code": "@@ -373,7 +373,7 @@ function runTestFile(path, filesWatcher, opts) {\n       env.WATCH_REPORT_DEPENDENCIES = '1';\n     }\n     if (opts.root.harness.shouldColorizeTestFiles) {\n-      env.FORCE_COLOR = '1';\n+      env.TEST_REPORT_COLORIZE = '1';",
        "comment_created_at": "2025-04-21T15:26:28+00:00",
        "comment_author": "cjihrig",
        "comment_body": "Instead of adding a new value for `NODE_TEST_CONTEXT`, would it work to update `shouldColorize()` such that:\r\n\r\n- `process.env.FORCE_COLOR` takes the highest priority if it is set.\r\n- The TTY logic is evaluated after that.\r\n- `process.env.NODE_TEST_CONTEXT` is only considered as a last resort.",
        "pr_file_module": null
      },
      {
        "comment_id": "2053125094",
        "repo_full_name": "nodejs/node",
        "pr_number": 57935,
        "pr_file": "lib/internal/test_runner/runner.js",
        "discussion_id": "2051514181",
        "commented_code": "@@ -373,7 +373,7 @@ function runTestFile(path, filesWatcher, opts) {\n       env.WATCH_REPORT_DEPENDENCIES = '1';\n     }\n     if (opts.root.harness.shouldColorizeTestFiles) {\n-      env.FORCE_COLOR = '1';\n+      env.TEST_REPORT_COLORIZE = '1';",
        "comment_created_at": "2025-04-21T23:54:55+00:00",
        "comment_author": "islandryu",
        "comment_body": "Would it be something like this?\r\n``` js \r\n    if (process.env.FORCE_COLOR !== undefined) {\r\n      return lazyInternalTTY().getColorDepth() > 2;\r\n    }\r\n    if (stream?.isTTY) {\r\n      return typeof stream.getColorDepth === 'function' ?\r\n        stream.getColorDepth() > 2 : true;\r\n    }\r\n\r\n    if (process.env.NODE_TEST_CONTEXT === 'child-v8') {\r\n      return lazyInternalTTY().getColorDepth() > 2;\r\n    }\r\n```\r\n\r\nThat alone would result in behavior differing from the existing implementation in scenarios such as the following.\r\n``` js\r\nconsole.log({foo: \"bar\"})\r\n```\r\n``` sh\r\nnode  --test index.js | cat > text.txt\r\n{ foo: 'bar' }\r\n\r\n# fixed\r\n./out/Debug/node  --test index.js | cat > text.txt\r\n{ foo: \u001b[32m'bar'\u001b[39m }\r\n```\r\nRegardless of the order within shouldColorize, I think the test process needs some way to know the value of [opts.root.harness.shouldColorizeTestFiles](https://github.com/nodejs/node/blob/e9b286ca4bb70cbc123e1adf2f674f7a2930b3b4/lib/internal/test_runner/runner.js#L375C27-L375C50) in the parent process.",
        "pr_file_module": null
      },
      {
        "comment_id": "2056141910",
        "repo_full_name": "nodejs/node",
        "pr_number": 57935,
        "pr_file": "lib/internal/test_runner/runner.js",
        "discussion_id": "2051514181",
        "commented_code": "@@ -373,7 +373,7 @@ function runTestFile(path, filesWatcher, opts) {\n       env.WATCH_REPORT_DEPENDENCIES = '1';\n     }\n     if (opts.root.harness.shouldColorizeTestFiles) {\n-      env.FORCE_COLOR = '1';\n+      env.TEST_REPORT_COLORIZE = '1';",
        "comment_created_at": "2025-04-23T14:06:24+00:00",
        "comment_author": "cjihrig",
        "comment_body": "If you want to start passing parent config through to the child, the `NODE_TEST_CONTEXT` environment variable is probably the best place to do it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2066288669",
    "pr_number": 58074,
    "pr_file": "lib/internal/tty.js",
    "created_at": "2025-04-29T12:57:58+00:00",
    "commented_code": "if (warned)\n     return;\n   let name = '';\n-  if (env.NODE_DISABLE_COLORS !== undefined)",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2066288669",
        "repo_full_name": "nodejs/node",
        "pr_number": 58074,
        "pr_file": "lib/internal/tty.js",
        "discussion_id": "2066288669",
        "commented_code": "@@ -82,9 +82,9 @@ function warnOnDeactivatedColors(env) {\n   if (warned)\n     return;\n   let name = '';\n-  if (env.NODE_DISABLE_COLORS !== undefined)",
        "comment_created_at": "2025-04-29T12:57:58+00:00",
        "comment_author": "BridgeAR",
        "comment_body": "These entries could (IMO should) all be simplified by just checking for truthiness. An env may only be `undefined` or a string due to the internal setter, no matter that e.g., `null` is assigned. It would result in `'null'`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2067721876",
        "repo_full_name": "nodejs/node",
        "pr_number": 58074,
        "pr_file": "lib/internal/tty.js",
        "discussion_id": "2066288669",
        "commented_code": "@@ -82,9 +82,9 @@ function warnOnDeactivatedColors(env) {\n   if (warned)\n     return;\n   let name = '';\n-  if (env.NODE_DISABLE_COLORS !== undefined)",
        "comment_created_at": "2025-04-30T01:44:51+00:00",
        "comment_author": "BridgeAR",
        "comment_body": "Thinking about it again: a user may pass through arbitrary values as environment variables. If a zero would for example be passed through, it would now be handled as not defined, while it would be picked up as process.env (being transformed to a string before).\r\n\r\nSo maybe we should just handle it as the stringified version? As in: `env.FOO?.toString()`? I am somewhat indecisive about how to handle this case ideally.",
        "pr_file_module": null
      },
      {
        "comment_id": "2068684492",
        "repo_full_name": "nodejs/node",
        "pr_number": 58074,
        "pr_file": "lib/internal/tty.js",
        "discussion_id": "2066288669",
        "commented_code": "@@ -82,9 +82,9 @@ function warnOnDeactivatedColors(env) {\n   if (warned)\n     return;\n   let name = '';\n-  if (env.NODE_DISABLE_COLORS !== undefined)",
        "comment_created_at": "2025-04-30T13:37:16+00:00",
        "comment_author": "aduh95",
        "comment_body": "I don't think it's a concern, IIUC it's always coerced to a string:\r\n\r\n```console\r\n$  node -e 'process.env.TEST=null;console.log(typeof process.env.TEST)'\r\nstring\r\n$ node -e 'process.env.TEST=0;console.log(typeof process.env.TEST)'   \r\nstring\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2068747845",
        "repo_full_name": "nodejs/node",
        "pr_number": 58074,
        "pr_file": "lib/internal/tty.js",
        "discussion_id": "2066288669",
        "commented_code": "@@ -82,9 +82,9 @@ function warnOnDeactivatedColors(env) {\n   if (warned)\n     return;\n   let name = '';\n-  if (env.NODE_DISABLE_COLORS !== undefined)",
        "comment_created_at": "2025-04-30T14:09:14+00:00",
        "comment_author": "BridgeAR",
        "comment_body": "I mean in case the API is used programatically by passing through the envs with an object and not relying on the default (that falls back to process.env)",
        "pr_file_module": null
      },
      {
        "comment_id": "2068788270",
        "repo_full_name": "nodejs/node",
        "pr_number": 58074,
        "pr_file": "lib/internal/tty.js",
        "discussion_id": "2066288669",
        "commented_code": "@@ -82,9 +82,9 @@ function warnOnDeactivatedColors(env) {\n   if (warned)\n     return;\n   let name = '';\n-  if (env.NODE_DISABLE_COLORS !== undefined)",
        "comment_created_at": "2025-04-30T14:30:23+00:00",
        "comment_author": "aduh95",
        "comment_body": "Maybe it's best to just revert https://github.com/nodejs/node/pull/58074/commits/59fbe0dece50dd9b66a6966813a71e1d30262ea5?",
        "pr_file_module": null
      },
      {
        "comment_id": "2069184447",
        "repo_full_name": "nodejs/node",
        "pr_number": 58074,
        "pr_file": "lib/internal/tty.js",
        "discussion_id": "2066288669",
        "commented_code": "@@ -82,9 +82,9 @@ function warnOnDeactivatedColors(env) {\n   if (warned)\n     return;\n   let name = '';\n-  if (env.NODE_DISABLE_COLORS !== undefined)",
        "comment_created_at": "2025-04-30T17:49:51+00:00",
        "comment_author": "BridgeAR",
        "comment_body": "Yes, let's do that for now and let's add a test case for this.",
        "pr_file_module": null
      }
    ]
  }
]