[
  {
    "discussion_id": "2070163664",
    "pr_number": 56148,
    "pr_file": "lib/child_process.js",
    "created_at": "2025-05-01T11:16:04+00:00",
    "commented_code": "}\n }\n \n-function normalizeSpawnArguments(file, args, options) {\n-  validateString(file, 'file');\n-  validateArgumentNullCheck(file, 'file');\n+function validateStringParam(param, paramName) {\n+  validateString(param, paramName);\n+  validateArgumentNullCheck(param, paramName);\n+\n+  if (param.length === 0) {\n+    throw new ERR_INVALID_ARG_VALUE(paramName, param, 'cannot be empty');\n+  }\n+}\n \n-  if (file.length === 0)\n-    throw new ERR_INVALID_ARG_VALUE('file', file, 'cannot be empty');\n+function normalizeSpawnArguments(file, args, options) {\n+  validateStringParam(file, 'file');",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2070163664",
        "repo_full_name": "nodejs/node",
        "pr_number": 56148,
        "pr_file": "lib/child_process.js",
        "discussion_id": "2070163664",
        "commented_code": "@@ -535,12 +532,17 @@ function copyProcessEnvToEnv(env, name, optionEnv) {\n   }\n }\n \n-function normalizeSpawnArguments(file, args, options) {\n-  validateString(file, 'file');\n-  validateArgumentNullCheck(file, 'file');\n+function validateStringParam(param, paramName) {\n+  validateString(param, paramName);\n+  validateArgumentNullCheck(param, paramName);\n+\n+  if (param.length === 0) {\n+    throw new ERR_INVALID_ARG_VALUE(paramName, param, 'cannot be empty');\n+  }\n+}\n \n-  if (file.length === 0)\n-    throw new ERR_INVALID_ARG_VALUE('file', file, 'cannot be empty');\n+function normalizeSpawnArguments(file, args, options) {\n+  validateStringParam(file, 'file');",
        "comment_created_at": "2025-05-01T11:16:04+00:00",
        "comment_author": "BridgeAR",
        "comment_body": "If we keep the changes as before, the compiler has to do less inlining.\r\n\r\n```suggestion\r\nfunction normalizeSpawnArguments(file, args, options) {\r\n  validateString(file, 'file');\r\n  validateArgumentNullCheck(file, 'file');\r\n  if (file.length === 0) {\r\n    throw new ERR_INVALID_ARG_VALUE(file, 'file', 'cannot be empty');\r\n  }\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2156083547",
    "pr_number": 58760,
    "pr_file": "lib/internal/assert/utils.js",
    "created_at": "2025-06-19T04:31:37+00:00",
    "commented_code": "// errors are handled faster.\n     if (errorStackTraceLimitIsWritable) Error.stackTraceLimit = 0;\n \n-    if (filename) {",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2156083547",
        "repo_full_name": "nodejs/node",
        "pr_number": 58760,
        "pr_file": "lib/internal/assert/utils.js",
        "discussion_id": "2156083547",
        "commented_code": "@@ -199,7 +198,7 @@ function getErrMessage(message, fn) {\n     // errors are handled faster.\n     if (errorStackTraceLimitIsWritable) Error.stackTraceLimit = 0;\n \n-    if (filename) {",
        "comment_created_at": "2025-06-19T04:31:37+00:00",
        "comment_author": "kt3k",
        "comment_body": "There is `if (filename) { ... } else { return ... }` structure above, and this check is unnecessary.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2119904676",
    "pr_number": 55874,
    "pr_file": "lib/internal/modules/esm/module_job.js",
    "created_at": "2025-06-02T02:49:56+00:00",
    "commented_code": "const explainCommonJSGlobalLikeNotDefinedError = (e, url) => {\n   if (e?.name === 'ReferenceError' &&\n       isCommonJSGlobalLikeNotDefinedError(e.message)) {\n+\n+    if (e.message.includes('require is not defined')) {\n+      e.message = [\n+        'ERR_AMBIGUOUS_MODULE_SYNTAX: This file cannot be parsed as either CommonJS or ES Module.',\n+        '- CommonJS error: await is only valid in async functions.',\n+        '- ES Module error: require is not defined in ES module scope.',\n+        'If you meant to use CommonJS, wrap top-level await in async function.',\n+        'If you meant to use ESM, do not use require().',\n+      ].join('\n');",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2119904676",
        "repo_full_name": "nodejs/node",
        "pr_number": 55874,
        "pr_file": "lib/internal/modules/esm/module_job.js",
        "discussion_id": "2119904676",
        "commented_code": "@@ -75,6 +75,19 @@ const isCommonJSGlobalLikeNotDefinedError = (errorMessage) =>\n const explainCommonJSGlobalLikeNotDefinedError = (e, url) => {\n   if (e?.name === 'ReferenceError' &&\n       isCommonJSGlobalLikeNotDefinedError(e.message)) {\n+\n+    if (e.message.includes('require is not defined')) {\n+      e.message = [\n+        'ERR_AMBIGUOUS_MODULE_SYNTAX: This file cannot be parsed as either CommonJS or ES Module.',\n+        '- CommonJS error: await is only valid in async functions.',\n+        '- ES Module error: require is not defined in ES module scope.',\n+        'If you meant to use CommonJS, wrap top-level await in async function.',\n+        'If you meant to use ESM, do not use require().',\n+      ].join('\\n');",
        "comment_created_at": "2025-06-02T02:49:56+00:00",
        "comment_author": "GeoffreyBooth",
        "comment_body": "Creating an array of strings and joining them is unnecessary processing to do at runtime. It would be more performant to just define a single string in the first place.\r\n\r\nAlso I can't think of other instances where we return multiline error messages. Unless this is a pattern we already use elsewhere, this should be rephrased to be one line. It doesn't need to be a single sentence, but it shouldn't include a newline.",
        "pr_file_module": null
      },
      {
        "comment_id": "2122114495",
        "repo_full_name": "nodejs/node",
        "pr_number": 55874,
        "pr_file": "lib/internal/modules/esm/module_job.js",
        "discussion_id": "2119904676",
        "commented_code": "@@ -75,6 +75,19 @@ const isCommonJSGlobalLikeNotDefinedError = (errorMessage) =>\n const explainCommonJSGlobalLikeNotDefinedError = (e, url) => {\n   if (e?.name === 'ReferenceError' &&\n       isCommonJSGlobalLikeNotDefinedError(e.message)) {\n+\n+    if (e.message.includes('require is not defined')) {\n+      e.message = [\n+        'ERR_AMBIGUOUS_MODULE_SYNTAX: This file cannot be parsed as either CommonJS or ES Module.',\n+        '- CommonJS error: await is only valid in async functions.',\n+        '- ES Module error: require is not defined in ES module scope.',\n+        'If you meant to use CommonJS, wrap top-level await in async function.',\n+        'If you meant to use ESM, do not use require().',\n+      ].join('\\n');",
        "comment_created_at": "2025-06-02T20:41:46+00:00",
        "comment_author": "mertcanaltin",
        "comment_body": "I absolutely agree, I have updated this as a single line",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2162869440",
    "pr_number": 58060,
    "pr_file": "lib/internal/util.js",
    "created_at": "2025-06-24T03:03:43+00:00",
    "commented_code": "}\n \n const handleTypes = ['TCP', 'TTY', 'UDP', 'FILE', 'PIPE', 'UNKNOWN'];\n+setOwnProperty(handleTypes, -1, null);",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2162869440",
        "repo_full_name": "nodejs/node",
        "pr_number": 58060,
        "pr_file": "lib/internal/util.js",
        "discussion_id": "2162869440",
        "commented_code": "@@ -876,7 +877,13 @@ function getCIDR(address, netmask, family) {\n }\n \n const handleTypes = ['TCP', 'TTY', 'UDP', 'FILE', 'PIPE', 'UNKNOWN'];\n+setOwnProperty(handleTypes, -1, null);",
        "comment_created_at": "2025-06-24T03:03:43+00:00",
        "comment_author": "jasnell",
        "comment_body": "this feels almost a bit too clever. Why not simply have `_guessHandleType(fd)` return null explicitly? then your return value below could be `return handletypes[type] || type`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2163396957",
        "repo_full_name": "nodejs/node",
        "pr_number": 58060,
        "pr_file": "lib/internal/util.js",
        "discussion_id": "2162869440",
        "commented_code": "@@ -876,7 +877,13 @@ function getCIDR(address, netmask, family) {\n }\n \n const handleTypes = ['TCP', 'TTY', 'UDP', 'FILE', 'PIPE', 'UNKNOWN'];\n+setOwnProperty(handleTypes, -1, null);",
        "comment_created_at": "2025-06-24T09:11:33+00:00",
        "comment_author": "vladfrangu",
        "comment_body": "I think I wanted to try to keep the function always returning an int but yeah, thats too \"clever\", I'll change it. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2126655113",
    "pr_number": 58087,
    "pr_file": "lib/internal/blocklist.js",
    "created_at": "2025-06-04T13:48:48+00:00",
    "commented_code": "rules: this.rules,\n     }, opts)}`;\n   }\n+  loadFromFile=(savePath=\"./blocklist.json\")=>{",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2126655113",
        "repo_full_name": "nodejs/node",
        "pr_number": 58087,
        "pr_file": "lib/internal/blocklist.js",
        "discussion_id": "2126655113",
        "commented_code": "@@ -65,6 +74,15 @@ class BlockList {\n       rules: this.rules,\n     }, opts)}`;\n   }\n+  loadFromFile=(savePath=\"./blocklist.json\")=>{",
        "comment_created_at": "2025-06-04T13:48:48+00:00",
        "comment_author": "jasnell",
        "comment_body": "```suggestion\r\n\r\n  loadFromFile(savePath=\"./blocklist.json\") {\r\n```\r\n\r\nWhy make this an arrow function?\r\n\r\nInstead of building the file loading directly into `BlockList`, consider having `BlockList` instead generate a `Buffer` or be created from a `Buffer` and let the application do the file handling itself.\r\n\r\n```\r\nconst blockList = createBlockListSomehow();\r\nconst buf = blockList.save();\r\nfs.writeFileSync('blocklist.json', buf);\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2126713202",
        "repo_full_name": "nodejs/node",
        "pr_number": 58087,
        "pr_file": "lib/internal/blocklist.js",
        "discussion_id": "2126655113",
        "commented_code": "@@ -65,6 +74,15 @@ class BlockList {\n       rules: this.rules,\n     }, opts)}`;\n   }\n+  loadFromFile=(savePath=\"./blocklist.json\")=>{",
        "comment_created_at": "2025-06-04T14:13:27+00:00",
        "comment_author": "alphaleadership",
        "comment_body": "all my function is arrow function ",
        "pr_file_module": null
      },
      {
        "comment_id": "2126718320",
        "repo_full_name": "nodejs/node",
        "pr_number": 58087,
        "pr_file": "lib/internal/blocklist.js",
        "discussion_id": "2126655113",
        "commented_code": "@@ -65,6 +74,15 @@ class BlockList {\n       rules: this.rules,\n     }, opts)}`;\n   }\n+  loadFromFile=(savePath=\"./blocklist.json\")=>{",
        "comment_created_at": "2025-06-04T14:15:24+00:00",
        "comment_author": "alphaleadership",
        "comment_body": "and i use json not buffer ",
        "pr_file_module": null
      },
      {
        "comment_id": "2126826271",
        "repo_full_name": "nodejs/node",
        "pr_number": 58087,
        "pr_file": "lib/internal/blocklist.js",
        "discussion_id": "2126655113",
        "commented_code": "@@ -65,6 +74,15 @@ class BlockList {\n       rules: this.rules,\n     }, opts)}`;\n   }\n+  loadFromFile=(savePath=\"./blocklist.json\")=>{",
        "comment_created_at": "2025-06-04T14:58:45+00:00",
        "comment_author": "jasnell",
        "comment_body": "JSON or buffer doesn't matter so much. I'd prefer to avoid adding the node:fs uses into BlockList and would rather separate those concerns. We can greatly simplify this, for instance, by having `toJSON` and `fromJSON` methods on BlockList and handing the fs operations externally to BlockList.",
        "pr_file_module": null
      },
      {
        "comment_id": "2137067354",
        "repo_full_name": "nodejs/node",
        "pr_number": 58087,
        "pr_file": "lib/internal/blocklist.js",
        "discussion_id": "2126655113",
        "commented_code": "@@ -65,6 +74,15 @@ class BlockList {\n       rules: this.rules,\n     }, opts)}`;\n   }\n+  loadFromFile=(savePath=\"./blocklist.json\")=>{",
        "comment_created_at": "2025-06-10T06:57:42+00:00",
        "comment_author": "alphaleadership",
        "comment_body": "ok i rewrite this without fs in writing and reading ",
        "pr_file_module": null
      },
      {
        "comment_id": "2137094644",
        "repo_full_name": "nodejs/node",
        "pr_number": 58087,
        "pr_file": "lib/internal/blocklist.js",
        "discussion_id": "2126655113",
        "commented_code": "@@ -65,6 +74,15 @@ class BlockList {\n       rules: this.rules,\n     }, opts)}`;\n   }\n+  loadFromFile=(savePath=\"./blocklist.json\")=>{",
        "comment_created_at": "2025-06-10T07:13:23+00:00",
        "comment_author": "alphaleadership",
        "comment_body": "@jasnell  done ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2039610313",
    "pr_number": 57775,
    "pr_file": "lib/fs.js",
    "created_at": "2025-04-11T13:54:05+00:00",
    "commented_code": "/**\n  * Asynchronously gets the stats of a file.\n  * @param {string | Buffer | URL} path\n- * @param {{ bigint?: boolean; }} [options]\n+ * @param {{ bigint?: boolean, signal?: AbortSignal }} [options]\n  * @param {(\n  *   err?: Error,\n  *   stats?: Stats\n  *   ) => any} callback\n  * @returns {void}\n  */\n-function stat(path, options = { bigint: false }, callback) {\n+function stat(path, options = { __proto__: null, bigint: false, signal: undefined }, callback) {",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2039610313",
        "repo_full_name": "nodejs/node",
        "pr_number": 57775,
        "pr_file": "lib/fs.js",
        "discussion_id": "2039610313",
        "commented_code": "@@ -1620,22 +1621,57 @@ function lstat(path, options = { bigint: false }, callback) {\n /**\n  * Asynchronously gets the stats of a file.\n  * @param {string | Buffer | URL} path\n- * @param {{ bigint?: boolean; }} [options]\n+ * @param {{ bigint?: boolean, signal?: AbortSignal }} [options]\n  * @param {(\n  *   err?: Error,\n  *   stats?: Stats\n  *   ) => any} callback\n  * @returns {void}\n  */\n-function stat(path, options = { bigint: false }, callback) {\n+function stat(path, options = { __proto__: null, bigint: false, signal: undefined }, callback) {",
        "comment_created_at": "2025-04-11T13:54:05+00:00",
        "comment_author": "LiviaMedeiros",
        "comment_body": "```suggestion\r\nfunction stat(path, options, callback) {\r\n```\r\nAFAICT we always reassign `options`, so this default value will be discarded.",
        "pr_file_module": null
      }
    ]
  }
]