[
  {
    "discussion_id": "2132083050",
    "pr_number": 58125,
    "pr_file": "benchmark/source_map/source-map-cache.js",
    "created_at": "2025-06-06T12:12:50+00:00",
    "commented_code": "+'use strict';\n+\n+const common = require('../common.js');\n+const assert = require('assert');\n+const fs = require('fs');\n+const path = require('path');\n+\n+const options = {\n+  flags: ['--expose-internals'],\n+};\n+\n+const bench = common.createBenchmark(\n+  main,\n+  {\n+    operation: [\n+      'findSourceMap-valid',\n+      'findSourceMap-generated-source',\n+    ],\n+    n: [1e5],\n+  },\n+  options,\n+);\n+\n+function main({ operation, n }) {\n+  const {\n+    setSourceMapsSupport,\n+    maybeCacheSourceMap,\n+    findSourceMap,\n+  } = require('internal/source_map/source_map_cache');\n+\n+  setSourceMapsSupport(true);\n+  const validFileName = path.resolve(\n+    __dirname,\n+    '../../test/fixtures/test-runner/source-maps/line-lengths/index.js',\n+  );\n+  const validMapFile = path.resolve(validFileName + '.map');\n+  const validFileContent = fs.readFileSync(validFileName, 'utf8');\n+  const fakeModule = { filename: validFileName };\n+\n+  let sourceMap;\n+  switch (operation) {\n+    case 'findSourceMap-valid':\n+      bench.start();\n+      maybeCacheSourceMap(validFileName, validFileContent, fakeModule, false, undefined, validMapFile);",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2132083050",
        "repo_full_name": "nodejs/node",
        "pr_number": 58125,
        "pr_file": "benchmark/source_map/source-map-cache.js",
        "discussion_id": "2132083050",
        "commented_code": "@@ -0,0 +1,73 @@\n+'use strict';\n+\n+const common = require('../common.js');\n+const assert = require('assert');\n+const fs = require('fs');\n+const path = require('path');\n+\n+const options = {\n+  flags: ['--expose-internals'],\n+};\n+\n+const bench = common.createBenchmark(\n+  main,\n+  {\n+    operation: [\n+      'findSourceMap-valid',\n+      'findSourceMap-generated-source',\n+    ],\n+    n: [1e5],\n+  },\n+  options,\n+);\n+\n+function main({ operation, n }) {\n+  const {\n+    setSourceMapsSupport,\n+    maybeCacheSourceMap,\n+    findSourceMap,\n+  } = require('internal/source_map/source_map_cache');\n+\n+  setSourceMapsSupport(true);\n+  const validFileName = path.resolve(\n+    __dirname,\n+    '../../test/fixtures/test-runner/source-maps/line-lengths/index.js',\n+  );\n+  const validMapFile = path.resolve(validFileName + '.map');\n+  const validFileContent = fs.readFileSync(validFileName, 'utf8');\n+  const fakeModule = { filename: validFileName };\n+\n+  let sourceMap;\n+  switch (operation) {\n+    case 'findSourceMap-valid':\n+      bench.start();\n+      maybeCacheSourceMap(validFileName, validFileContent, fakeModule, false, undefined, validMapFile);",
        "comment_created_at": "2025-06-06T12:12:50+00:00",
        "comment_author": "legendecas",
        "comment_body": "`maybeCacheSourceMap` should be moved out of bench scope. Also, please refrain from using internal APIs if the intention here is to test the public API `module.findSourceMap`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2132902974",
        "repo_full_name": "nodejs/node",
        "pr_number": 58125,
        "pr_file": "benchmark/source_map/source-map-cache.js",
        "discussion_id": "2132083050",
        "commented_code": "@@ -0,0 +1,73 @@\n+'use strict';\n+\n+const common = require('../common.js');\n+const assert = require('assert');\n+const fs = require('fs');\n+const path = require('path');\n+\n+const options = {\n+  flags: ['--expose-internals'],\n+};\n+\n+const bench = common.createBenchmark(\n+  main,\n+  {\n+    operation: [\n+      'findSourceMap-valid',\n+      'findSourceMap-generated-source',\n+    ],\n+    n: [1e5],\n+  },\n+  options,\n+);\n+\n+function main({ operation, n }) {\n+  const {\n+    setSourceMapsSupport,\n+    maybeCacheSourceMap,\n+    findSourceMap,\n+  } = require('internal/source_map/source_map_cache');\n+\n+  setSourceMapsSupport(true);\n+  const validFileName = path.resolve(\n+    __dirname,\n+    '../../test/fixtures/test-runner/source-maps/line-lengths/index.js',\n+  );\n+  const validMapFile = path.resolve(validFileName + '.map');\n+  const validFileContent = fs.readFileSync(validFileName, 'utf8');\n+  const fakeModule = { filename: validFileName };\n+\n+  let sourceMap;\n+  switch (operation) {\n+    case 'findSourceMap-valid':\n+      bench.start();\n+      maybeCacheSourceMap(validFileName, validFileContent, fakeModule, false, undefined, validMapFile);",
        "comment_created_at": "2025-06-06T21:00:14+00:00",
        "comment_author": "miguelmarcondesf",
        "comment_body": "Thanks, I'll do that!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2132086543",
    "pr_number": 58125,
    "pr_file": "benchmark/source_map/source-map.js",
    "created_at": "2025-06-06T12:15:02+00:00",
    "commented_code": "+'use strict';\n+\n+const common = require('../common.js');\n+const assert = require('assert');\n+const fs = require('fs');\n+const path = require('path');\n+\n+const options = {\n+  flags: ['--expose-internals'],\n+};\n+\n+const bench = common.createBenchmark(\n+  main,\n+  {\n+    operation: [\n+      'parse',\n+      'parse-minified',\n+      'parse-sectioned',\n+      'parse-large',\n+      'findEntry',\n+      'findEntry-minified',\n+      'findEntry-sectioned',\n+      'findEntry-large',\n+      'findOrigin',\n+      'findOrigin-minified',\n+      'findOrigin-sectioned',\n+      'findOrigin-large',\n+    ],\n+    n: [1e5],\n+  },\n+  options,\n+);\n+\n+function main({ operation, n }) {\n+  const { SourceMap } = require('internal/source_map/source_map');",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2132086543",
        "repo_full_name": "nodejs/node",
        "pr_number": 58125,
        "pr_file": "benchmark/source_map/source-map.js",
        "discussion_id": "2132086543",
        "commented_code": "@@ -0,0 +1,172 @@\n+'use strict';\n+\n+const common = require('../common.js');\n+const assert = require('assert');\n+const fs = require('fs');\n+const path = require('path');\n+\n+const options = {\n+  flags: ['--expose-internals'],\n+};\n+\n+const bench = common.createBenchmark(\n+  main,\n+  {\n+    operation: [\n+      'parse',\n+      'parse-minified',\n+      'parse-sectioned',\n+      'parse-large',\n+      'findEntry',\n+      'findEntry-minified',\n+      'findEntry-sectioned',\n+      'findEntry-large',\n+      'findOrigin',\n+      'findOrigin-minified',\n+      'findOrigin-sectioned',\n+      'findOrigin-large',\n+    ],\n+    n: [1e5],\n+  },\n+  options,\n+);\n+\n+function main({ operation, n }) {\n+  const { SourceMap } = require('internal/source_map/source_map');",
        "comment_created_at": "2025-06-06T12:15:02+00:00",
        "comment_author": "legendecas",
        "comment_body": "Please refrain from using internal API if it is accessible from `const { SourceMap } = require('node:module')`",
        "pr_file_module": null
      },
      {
        "comment_id": "2132899880",
        "repo_full_name": "nodejs/node",
        "pr_number": 58125,
        "pr_file": "benchmark/source_map/source-map.js",
        "discussion_id": "2132086543",
        "commented_code": "@@ -0,0 +1,172 @@\n+'use strict';\n+\n+const common = require('../common.js');\n+const assert = require('assert');\n+const fs = require('fs');\n+const path = require('path');\n+\n+const options = {\n+  flags: ['--expose-internals'],\n+};\n+\n+const bench = common.createBenchmark(\n+  main,\n+  {\n+    operation: [\n+      'parse',\n+      'parse-minified',\n+      'parse-sectioned',\n+      'parse-large',\n+      'findEntry',\n+      'findEntry-minified',\n+      'findEntry-sectioned',\n+      'findEntry-large',\n+      'findOrigin',\n+      'findOrigin-minified',\n+      'findOrigin-sectioned',\n+      'findOrigin-large',\n+    ],\n+    n: [1e5],\n+  },\n+  options,\n+);\n+\n+function main({ operation, n }) {\n+  const { SourceMap } = require('internal/source_map/source_map');",
        "comment_created_at": "2025-06-06T20:56:52+00:00",
        "comment_author": "miguelmarcondesf",
        "comment_body": "Thanks for pointing that!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2136078426",
    "pr_number": 58125,
    "pr_file": "benchmark/source_map/source-map-cache.js",
    "created_at": "2025-06-09T16:54:46+00:00",
    "commented_code": "+'use strict';\n+\n+const common = require('../common.js');\n+const assert = require('assert');\n+const fs = require('fs');\n+const path = require('path');\n+\n+const options = {\n+  flags: ['--expose-internals'],\n+};\n+\n+const bench = common.createBenchmark(\n+  main,\n+  {\n+    operation: [\n+      'findSourceMap-valid',\n+      'findSourceMap-generated-source',\n+    ],\n+    n: [1e5],\n+  },\n+  options,\n+);\n+\n+function main({ operation, n }) {\n+  const {\n+    setSourceMapsSupport,\n+    maybeCacheSourceMap,\n+  } = require('internal/source_map/source_map_cache');\n+  const { findSourceMap } = require('node:module');\n+\n+  setSourceMapsSupport(true);\n+  const validFileName = path.resolve(\n+    __dirname,\n+    '../../test/fixtures/test-runner/source-maps/line-lengths/index.js',\n+  );\n+  const validMapFile = path.resolve(validFileName + '.map');\n+  const validFileContent = fs.readFileSync(validFileName, 'utf8');\n+  const fakeModule = { filename: validFileName };\n+\n+  let sourceMap;\n+  switch (operation) {\n+    case 'findSourceMap-valid':\n+      maybeCacheSourceMap(validFileName, validFileContent, fakeModule, false, undefined, validMapFile);",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2136078426",
        "repo_full_name": "nodejs/node",
        "pr_number": 58125,
        "pr_file": "benchmark/source_map/source-map-cache.js",
        "discussion_id": "2136078426",
        "commented_code": "@@ -0,0 +1,73 @@\n+'use strict';\n+\n+const common = require('../common.js');\n+const assert = require('assert');\n+const fs = require('fs');\n+const path = require('path');\n+\n+const options = {\n+  flags: ['--expose-internals'],\n+};\n+\n+const bench = common.createBenchmark(\n+  main,\n+  {\n+    operation: [\n+      'findSourceMap-valid',\n+      'findSourceMap-generated-source',\n+    ],\n+    n: [1e5],\n+  },\n+  options,\n+);\n+\n+function main({ operation, n }) {\n+  const {\n+    setSourceMapsSupport,\n+    maybeCacheSourceMap,\n+  } = require('internal/source_map/source_map_cache');\n+  const { findSourceMap } = require('node:module');\n+\n+  setSourceMapsSupport(true);\n+  const validFileName = path.resolve(\n+    __dirname,\n+    '../../test/fixtures/test-runner/source-maps/line-lengths/index.js',\n+  );\n+  const validMapFile = path.resolve(validFileName + '.map');\n+  const validFileContent = fs.readFileSync(validFileName, 'utf8');\n+  const fakeModule = { filename: validFileName };\n+\n+  let sourceMap;\n+  switch (operation) {\n+    case 'findSourceMap-valid':\n+      maybeCacheSourceMap(validFileName, validFileContent, fakeModule, false, undefined, validMapFile);",
        "comment_created_at": "2025-06-09T16:54:46+00:00",
        "comment_author": "legendecas",
        "comment_body": "This can be replaced with `require`, to avoid calling the internal API.",
        "pr_file_module": null
      },
      {
        "comment_id": "2154558148",
        "repo_full_name": "nodejs/node",
        "pr_number": 58125,
        "pr_file": "benchmark/source_map/source-map-cache.js",
        "discussion_id": "2136078426",
        "commented_code": "@@ -0,0 +1,73 @@\n+'use strict';\n+\n+const common = require('../common.js');\n+const assert = require('assert');\n+const fs = require('fs');\n+const path = require('path');\n+\n+const options = {\n+  flags: ['--expose-internals'],\n+};\n+\n+const bench = common.createBenchmark(\n+  main,\n+  {\n+    operation: [\n+      'findSourceMap-valid',\n+      'findSourceMap-generated-source',\n+    ],\n+    n: [1e5],\n+  },\n+  options,\n+);\n+\n+function main({ operation, n }) {\n+  const {\n+    setSourceMapsSupport,\n+    maybeCacheSourceMap,\n+  } = require('internal/source_map/source_map_cache');\n+  const { findSourceMap } = require('node:module');\n+\n+  setSourceMapsSupport(true);\n+  const validFileName = path.resolve(\n+    __dirname,\n+    '../../test/fixtures/test-runner/source-maps/line-lengths/index.js',\n+  );\n+  const validMapFile = path.resolve(validFileName + '.map');\n+  const validFileContent = fs.readFileSync(validFileName, 'utf8');\n+  const fakeModule = { filename: validFileName };\n+\n+  let sourceMap;\n+  switch (operation) {\n+    case 'findSourceMap-valid':\n+      maybeCacheSourceMap(validFileName, validFileContent, fakeModule, false, undefined, validMapFile);",
        "comment_created_at": "2025-06-18T13:07:20+00:00",
        "comment_author": "miguelmarcondesf",
        "comment_body": "Thank you!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2136080055",
    "pr_number": 58125,
    "pr_file": "benchmark/source_map/source-map-cache.js",
    "created_at": "2025-06-09T16:55:52+00:00",
    "commented_code": "+'use strict';\n+\n+const common = require('../common.js');\n+const assert = require('assert');\n+const fs = require('fs');\n+const path = require('path');\n+\n+const options = {\n+  flags: ['--expose-internals'],\n+};\n+\n+const bench = common.createBenchmark(\n+  main,\n+  {\n+    operation: [\n+      'findSourceMap-valid',\n+      'findSourceMap-generated-source',\n+    ],\n+    n: [1e5],\n+  },\n+  options,\n+);\n+\n+function main({ operation, n }) {\n+  const {\n+    setSourceMapsSupport,\n+    maybeCacheSourceMap,\n+  } = require('internal/source_map/source_map_cache');\n+  const { findSourceMap } = require('node:module');\n+\n+  setSourceMapsSupport(true);",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2136080055",
        "repo_full_name": "nodejs/node",
        "pr_number": 58125,
        "pr_file": "benchmark/source_map/source-map-cache.js",
        "discussion_id": "2136080055",
        "commented_code": "@@ -0,0 +1,73 @@\n+'use strict';\n+\n+const common = require('../common.js');\n+const assert = require('assert');\n+const fs = require('fs');\n+const path = require('path');\n+\n+const options = {\n+  flags: ['--expose-internals'],\n+};\n+\n+const bench = common.createBenchmark(\n+  main,\n+  {\n+    operation: [\n+      'findSourceMap-valid',\n+      'findSourceMap-generated-source',\n+    ],\n+    n: [1e5],\n+  },\n+  options,\n+);\n+\n+function main({ operation, n }) {\n+  const {\n+    setSourceMapsSupport,\n+    maybeCacheSourceMap,\n+  } = require('internal/source_map/source_map_cache');\n+  const { findSourceMap } = require('node:module');\n+\n+  setSourceMapsSupport(true);",
        "comment_created_at": "2025-06-09T16:55:52+00:00",
        "comment_author": "legendecas",
        "comment_body": "Please use public API [`module.setSourceMapsSupport`](https://nodejs.org/api/module.html#modulesetsourcemapssupportenabled-options) if possible.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2118373028",
    "pr_number": 58535,
    "pr_file": "benchmark/http/check_is_http_token.js",
    "created_at": "2025-05-31T23:19:41+00:00",
    "commented_code": "'use strict';\n \n const common = require('../common.js');\n+// TODO: benchmark has access to internal modules?\n const _checkIsHttpToken = require('_http_common')._checkIsHttpToken;",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2118373028",
        "repo_full_name": "nodejs/node",
        "pr_number": 58535,
        "pr_file": "benchmark/http/check_is_http_token.js",
        "discussion_id": "2118373028",
        "commented_code": "@@ -1,6 +1,7 @@\n 'use strict';\n \n const common = require('../common.js');\n+// TODO: benchmark has access to internal modules?\n const _checkIsHttpToken = require('_http_common')._checkIsHttpToken;",
        "comment_created_at": "2025-05-31T23:19:41+00:00",
        "comment_author": "jasnell",
        "comment_body": "These aren't really considered internal modules, fwiw",
        "pr_file_module": null
      },
      {
        "comment_id": "2118381331",
        "repo_full_name": "nodejs/node",
        "pr_number": 58535,
        "pr_file": "benchmark/http/check_is_http_token.js",
        "discussion_id": "2118373028",
        "commented_code": "@@ -1,6 +1,7 @@\n 'use strict';\n \n const common = require('../common.js');\n+// TODO: benchmark has access to internal modules?\n const _checkIsHttpToken = require('_http_common')._checkIsHttpToken;",
        "comment_created_at": "2025-05-31T23:24:56+00:00",
        "comment_author": "bjohansebas",
        "comment_body": "But that property is not under the http module, so when _http_common stops being a module and becomes internal-only, the benchmark won\u2019t work. That\u2019s why I was asking if it's possible to use internals in the benchmarks.",
        "pr_file_module": null
      },
      {
        "comment_id": "2118385470",
        "repo_full_name": "nodejs/node",
        "pr_number": 58535,
        "pr_file": "benchmark/http/check_is_http_token.js",
        "discussion_id": "2118373028",
        "commented_code": "@@ -1,6 +1,7 @@\n 'use strict';\n \n const common = require('../common.js');\n+// TODO: benchmark has access to internal modules?\n const _checkIsHttpToken = require('_http_common')._checkIsHttpToken;",
        "comment_created_at": "2025-05-31T23:27:02+00:00",
        "comment_author": "dario-piotrowicz",
        "comment_body": "yes I imagine that the require was supposed to be updated to `internal/http/common`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2119758235",
        "repo_full_name": "nodejs/node",
        "pr_number": 58535,
        "pr_file": "benchmark/http/check_is_http_token.js",
        "discussion_id": "2118373028",
        "commented_code": "@@ -1,6 +1,7 @@\n 'use strict';\n \n const common = require('../common.js');\n+// TODO: benchmark has access to internal modules?\n const _checkIsHttpToken = require('_http_common')._checkIsHttpToken;",
        "comment_created_at": "2025-06-02T00:12:31+00:00",
        "comment_author": "jasnell",
        "comment_body": "My concern would be whether or not anyone in userland could be using this, as unlikely as that may be. Should we export this through the regular `node:http` API to provide an alternative path to them?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2085308114",
    "pr_number": 58229,
    "pr_file": "lib/internal/async_context_frame.js",
    "created_at": "2025-05-12T19:22:56+00:00",
    "commented_code": "static set(frame) {\n     setContinuationPreservedEmbedderData(frame);\n+    onSet.publish(frame);",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2085308114",
        "repo_full_name": "nodejs/node",
        "pr_number": 58229,
        "pr_file": "lib/internal/async_context_frame.js",
        "discussion_id": "2085308114",
        "commented_code": "@@ -23,6 +26,7 @@ class ActiveAsyncContextFrame extends SafeMap {\n \n   static set(frame) {\n     setContinuationPreservedEmbedderData(frame);\n+    onSet.publish(frame);",
        "comment_created_at": "2025-05-12T19:22:56+00:00",
        "comment_author": "Flarna",
        "comment_body": "Should we expose/document the `AsyncContextFrame` class via public API?\r\nWith doing just this users get some undocumented, internal thing into their hand and all they can do is to guess what it is, which API it exposes.\r\nAny internal change on `AsyncContextFrame` would be breaking for all users of this channel.",
        "pr_file_module": null
      },
      {
        "comment_id": "2089198478",
        "repo_full_name": "nodejs/node",
        "pr_number": 58229,
        "pr_file": "lib/internal/async_context_frame.js",
        "discussion_id": "2085308114",
        "commented_code": "@@ -23,6 +26,7 @@ class ActiveAsyncContextFrame extends SafeMap {\n \n   static set(frame) {\n     setContinuationPreservedEmbedderData(frame);\n+    onSet.publish(frame);",
        "comment_created_at": "2025-05-14T15:19:39+00:00",
        "comment_author": "szegedi",
        "comment_body": "I discussed this with @Qard; he thinks (but can of course speak for himself here \ud83d\ude01) that since all channels are by default experimental, we aren't promising stability in what's returned here. As far as I'm concerned, I would've been fine with not even exposing the parameter at all.",
        "pr_file_module": null
      },
      {
        "comment_id": "2089683662",
        "repo_full_name": "nodejs/node",
        "pr_number": 58229,
        "pr_file": "lib/internal/async_context_frame.js",
        "discussion_id": "2085308114",
        "commented_code": "@@ -23,6 +26,7 @@ class ActiveAsyncContextFrame extends SafeMap {\n \n   static set(frame) {\n     setContinuationPreservedEmbedderData(frame);\n+    onSet.publish(frame);",
        "comment_created_at": "2025-05-14T20:22:39+00:00",
        "comment_author": "Flarna",
        "comment_body": "One of the probles to never stabilize async_hooks was because it leaks internal.\r\nWe should avoid to add again experimental APIs leaking internal as they can't be stabilized.\r\n\r\nIf the frame is not needed it's likely best to remove it. Alternative could be to replace it by a well documented wrapper object exposing only parts of AsyncContextFrame or other data like the cause for the set,...",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2030296655",
    "pr_number": 55756,
    "pr_file": "lib/internal/modules/helpers.js",
    "created_at": "2025-04-06T23:01:37+00:00",
    "commented_code": "const constants = { __proto__: null, compileCacheStatus };\n ObjectFreeze(constants);\n \n+async function resolveLoadAndCache(specifier, base = 'data:', importAttributes = kEmptyObject, conditions) {\n+  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\n+  // TODO: this should hit the cache (and populate it if it finds nothing)\n+  const { url, format: resolveFormat } = await cascadedLoader.resolve(`${specifier}`, `${base}`, importAttributes);\n+  const { format, source } = await cascadedLoader.load(url, {\n+    __proto__: null,\n+    importAttributes,\n+    format: resolveFormat,\n+    conditions,\n+  });\n+  return {\n+    __proto__: null,\n+    format,",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2030296655",
        "repo_full_name": "nodejs/node",
        "pr_number": 55756,
        "pr_file": "lib/internal/modules/helpers.js",
        "discussion_id": "2030296655",
        "commented_code": "@@ -392,6 +392,24 @@ ObjectFreeze(compileCacheStatus);\n const constants = { __proto__: null, compileCacheStatus };\n ObjectFreeze(constants);\n \n+async function resolveLoadAndCache(specifier, base = 'data:', importAttributes = kEmptyObject, conditions) {\n+  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\n+  // TODO: this should hit the cache (and populate it if it finds nothing)\n+  const { url, format: resolveFormat } = await cascadedLoader.resolve(`${specifier}`, `${base}`, importAttributes);\n+  const { format, source } = await cascadedLoader.load(url, {\n+    __proto__: null,\n+    importAttributes,\n+    format: resolveFormat,\n+    conditions,\n+  });\n+  return {\n+    __proto__: null,\n+    format,",
        "comment_created_at": "2025-04-06T23:01:37+00:00",
        "comment_author": "legendecas",
        "comment_body": "When `--experimental-strip-types` is enabled and performing this operation on a `.ts` file, this `format` may contains `commonjs-typescript` and `module-typescript` which are not documented at https://nodejs.org/api/module.html#loadurl-context-nextload as final formats.\r\n\r\nI think we should convert `commonjs-typescript` and `module-typescript` to `commonjs` and `module` respectively. Alternatively, document the other two and make them public.",
        "pr_file_module": null
      },
      {
        "comment_id": "2039941148",
        "repo_full_name": "nodejs/node",
        "pr_number": 55756,
        "pr_file": "lib/internal/modules/helpers.js",
        "discussion_id": "2030296655",
        "commented_code": "@@ -392,6 +392,24 @@ ObjectFreeze(compileCacheStatus);\n const constants = { __proto__: null, compileCacheStatus };\n ObjectFreeze(constants);\n \n+async function resolveLoadAndCache(specifier, base = 'data:', importAttributes = kEmptyObject, conditions) {\n+  const cascadedLoader = require('internal/modules/esm/loader').getOrInitializeCascadedLoader();\n+  // TODO: this should hit the cache (and populate it if it finds nothing)\n+  const { url, format: resolveFormat } = await cascadedLoader.resolve(`${specifier}`, `${base}`, importAttributes);\n+  const { format, source } = await cascadedLoader.load(url, {\n+    __proto__: null,\n+    importAttributes,\n+    format: resolveFormat,\n+    conditions,\n+  });\n+  return {\n+    __proto__: null,\n+    format,",
        "comment_created_at": "2025-04-11T17:02:19+00:00",
        "comment_author": "aduh95",
        "comment_body": "I think we probably want to document it, as it's certainly going to be helpful for the ecosystem to know which files are TypeScript",
        "pr_file_module": null
      }
    ]
  }
]