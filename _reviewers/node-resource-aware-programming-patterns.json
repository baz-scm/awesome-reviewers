[
  {
    "discussion_id": "2174253273",
    "pr_number": 58897,
    "pr_file": "doc/api/fs.md",
    "created_at": "2025-06-30T05:33:57+00:00",
    "commented_code": "The path to the parent directory of the file this {fs.Dirent} object refers to.\n \n+### Class: `fs.FastUtf8Stream`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+> Stability: 1 - Experimental\n+\n+An optimized UTF-8 stream writer.",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2174253273",
        "repo_full_name": "nodejs/node",
        "pr_number": 58897,
        "pr_file": "doc/api/fs.md",
        "discussion_id": "2174253273",
        "commented_code": "@@ -6909,6 +6909,89 @@ changes:\n \n The path to the parent directory of the file this {fs.Dirent} object refers to.\n \n+### Class: `fs.FastUtf8Stream`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+> Stability: 1 - Experimental\n+\n+An optimized UTF-8 stream writer.",
        "comment_created_at": "2025-06-30T05:33:57+00:00",
        "comment_author": "mcollina",
        "comment_body": "I think this needs a bit more explanation, specifically around flushing and buffering, as a normal write stream could lose data.",
        "pr_file_module": null
      },
      {
        "comment_id": "2174771771",
        "repo_full_name": "nodejs/node",
        "pr_number": 58897,
        "pr_file": "doc/api/fs.md",
        "discussion_id": "2174253273",
        "commented_code": "@@ -6909,6 +6909,89 @@ changes:\n \n The path to the parent directory of the file this {fs.Dirent} object refers to.\n \n+### Class: `fs.FastUtf8Stream`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+> Stability: 1 - Experimental\n+\n+An optimized UTF-8 stream writer.",
        "comment_created_at": "2025-06-30T10:40:47+00:00",
        "comment_author": "jasnell",
        "comment_body": "Yeah, I'll be expanding the documentation before moving this PR out of draft. But feel free to offer suggestions ;-)",
        "pr_file_module": null
      },
      {
        "comment_id": "2175131848",
        "repo_full_name": "nodejs/node",
        "pr_number": 58897,
        "pr_file": "doc/api/fs.md",
        "discussion_id": "2174253273",
        "commented_code": "@@ -6909,6 +6909,89 @@ changes:\n \n The path to the parent directory of the file this {fs.Dirent} object refers to.\n \n+### Class: `fs.FastUtf8Stream`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+> Stability: 1 - Experimental\n+\n+An optimized UTF-8 stream writer.",
        "comment_created_at": "2025-06-30T13:49:58+00:00",
        "comment_author": "mcollina",
        "comment_body": "```suggestion\r\nAn optimized UTF-8 stream writer that allows for flushing all the internal buffering on demand. It handles EAGAIN errors correctly, allowing for customization, for example, by dropping content if the disk is busy. \r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2203433866",
    "pr_number": 59050,
    "pr_file": "doc/api/errors.md",
    "created_at": "2025-07-13T15:54:17+00:00",
    "commented_code": "### `ERR_FS_FILE_TOO_LARGE`\n \n-An attempt has been made to read a file whose size is larger than the maximum\n-allowed size for a `Buffer`.\n+An attempt was made to read a file larger than the supported 2 GiB limit for `fs.readFile()`. This is not a limitation of `Buffer`, but an internal I/O constraint.\n+For handling larger files, consider using `fs.createReadStream()` to read the file in chunks.",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2203433866",
        "repo_full_name": "nodejs/node",
        "pr_number": 59050,
        "pr_file": "doc/api/errors.md",
        "discussion_id": "2203433866",
        "commented_code": "@@ -1362,8 +1362,8 @@ Path is a directory.\n \n ### `ERR_FS_FILE_TOO_LARGE`\n \n-An attempt has been made to read a file whose size is larger than the maximum\n-allowed size for a `Buffer`.\n+An attempt was made to read a file larger than the supported 2 GiB limit for `fs.readFile()`. This is not a limitation of `Buffer`, but an internal I/O constraint.\n+For handling larger files, consider using `fs.createReadStream()` to read the file in chunks.",
        "comment_created_at": "2025-07-13T15:54:17+00:00",
        "comment_author": "jasnell",
        "comment_body": "```suggestion\r\nAn attempt was made to read a file larger than the supported 2 GiB limit for\r\n`fs.readFile()`. This is not a limitation of `Buffer`, but an internal I/O constraint.\r\nFor handling larger files, consider using `fs.createReadStream()` to read the\r\nfile in chunks.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2200298128",
    "pr_number": 59026,
    "pr_file": "doc/api/process.md",
    "created_at": "2025-07-11T10:07:24+00:00",
    "commented_code": "information about memory usage which might be slow depending on the\n program memory allocations.\n \n+### A note on process memoryUsage\n+\n+Once you notice that the `rss` continues to rise while the `heapTotal` shows normal,\n+and the `rss` is more than three times higher than the `heapTotal`,\n+it is very likely that there is an issue with an external memory leak.\n+Referer to the discussions in [nodejs/node#21973][] and [nodejs/help#1942][] for\n+suggestions on switching the system's default `malloc` to `jemalloc` to try to resolve such issues.",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2200298128",
        "repo_full_name": "nodejs/node",
        "pr_number": 59026,
        "pr_file": "doc/api/process.md",
        "discussion_id": "2200298128",
        "commented_code": "@@ -2807,6 +2807,14 @@ The `process.memoryUsage()` method iterates over each page to gather\n information about memory usage which might be slow depending on the\n program memory allocations.\n \n+### A note on process memoryUsage\n+\n+Once you notice that the `rss` continues to rise while the `heapTotal` shows normal,\n+and the `rss` is more than three times higher than the `heapTotal`,\n+it is very likely that there is an issue with an external memory leak.\n+Referer to the discussions in [nodejs/node#21973][] and [nodejs/help#1942][] for\n+suggestions on switching the system's default `malloc` to `jemalloc` to try to resolve such issues.",
        "comment_created_at": "2025-07-11T10:07:24+00:00",
        "comment_author": "joyeecheung",
        "comment_body": "```suggestion\r\nOn Linux or other systems where glibc is commonly used, an application may have sustained\r\n`rss` growth despite stable `heapTotal` due to fragmentation caused by the glibc `malloc`\r\nimplementation. See [nodejs/node#21973][] on how to switch to an alternative `malloc`\r\nimplementation to address the performance issue.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]