[
  {
    "discussion_id": "2165802333",
    "pr_number": 58822,
    "pr_file": "doc/api/tls.md",
    "created_at": "2025-06-25T05:20:34+00:00",
    "commented_code": "The server can be tested by connecting to it using the example client from\n [`tls.connect()`][].\n \n+## `tls.useSystemCA()`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+Enables system CA certificates to be used by the Node.js TLS clients by default.\n+This is equivalent to enabling the [`--use-system-ca`][] flag, but can be done\n+programmatically at runtime.\n+\n+Once called, the system CA certificates will be included in the default CA\n+certificate list returned by [`tls.getCACertificates()`][] and used by TLS\n+connections that don't specify their own CA certificates.\n+\n+Subsequent calls to this function are no-ops. The system CA certificates are\n+loaded and cached on the first call.\n+\n+This function only affects the current Node.js thread.",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2165802333",
        "repo_full_name": "nodejs/node",
        "pr_number": 58822,
        "pr_file": "doc/api/tls.md",
        "discussion_id": "2165802333",
        "commented_code": "@@ -2260,6 +2260,25 @@ openssl pkcs12 -certpbe AES-256-CBC -export -out client-cert.pem \\\n The server can be tested by connecting to it using the example client from\n [`tls.connect()`][].\n \n+## `tls.useSystemCA()`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+Enables system CA certificates to be used by the Node.js TLS clients by default.\n+This is equivalent to enabling the [`--use-system-ca`][] flag, but can be done\n+programmatically at runtime.\n+\n+Once called, the system CA certificates will be included in the default CA\n+certificate list returned by [`tls.getCACertificates()`][] and used by TLS\n+connections that don't specify their own CA certificates.\n+\n+Subsequent calls to this function are no-ops. The system CA certificates are\n+loaded and cached on the first call.\n+\n+This function only affects the current Node.js thread.",
        "comment_created_at": "2025-06-25T05:20:34+00:00",
        "comment_author": "jasnell",
        "comment_body": "I think I'd much prefer this to be set as an option on an individual connection rather than programmatically impacting all connections. A cli flag is one thing because it's set by the individual running the app. This API could be set by dependencies impacting global state without the application being aware of it. Setting it per connection seems the safest. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2166267009",
        "repo_full_name": "nodejs/node",
        "pr_number": 58822,
        "pr_file": "doc/api/tls.md",
        "discussion_id": "2165802333",
        "commented_code": "@@ -2260,6 +2260,25 @@ openssl pkcs12 -certpbe AES-256-CBC -export -out client-cert.pem \\\n The server can be tested by connecting to it using the example client from\n [`tls.connect()`][].\n \n+## `tls.useSystemCA()`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+Enables system CA certificates to be used by the Node.js TLS clients by default.\n+This is equivalent to enabling the [`--use-system-ca`][] flag, but can be done\n+programmatically at runtime.\n+\n+Once called, the system CA certificates will be included in the default CA\n+certificate list returned by [`tls.getCACertificates()`][] and used by TLS\n+connections that don't specify their own CA certificates.\n+\n+Subsequent calls to this function are no-ops. The system CA certificates are\n+loaded and cached on the first call.\n+\n+This function only affects the current Node.js thread.",
        "comment_created_at": "2025-06-25T09:30:42+00:00",
        "comment_author": "pimterry",
        "comment_body": "Agreed, I'm not sure introducing more mutable global state here is worthwhile I'm afraid.\r\n\r\n> I'd much prefer this to be set as an option on an individual connection rather than programmatically impacting all connections.\r\n\r\nI think that's already possible with the other recent improvements around this:\r\n\r\n```js\r\n{\r\n  ca: tls.getCACertificates('system')\r\n}\r\n```\r\n\r\nAFAICT, adding that to TLS options anywhere should be equivalent to this change, but scoped to the single context.\r\n\r\nI think with the current global CLI flag plus easy per-connection configuration, that should cover most use cases.",
        "pr_file_module": null
      },
      {
        "comment_id": "2166404546",
        "repo_full_name": "nodejs/node",
        "pr_number": 58822,
        "pr_file": "doc/api/tls.md",
        "discussion_id": "2165802333",
        "commented_code": "@@ -2260,6 +2260,25 @@ openssl pkcs12 -certpbe AES-256-CBC -export -out client-cert.pem \\\n The server can be tested by connecting to it using the example client from\n [`tls.connect()`][].\n \n+## `tls.useSystemCA()`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+Enables system CA certificates to be used by the Node.js TLS clients by default.\n+This is equivalent to enabling the [`--use-system-ca`][] flag, but can be done\n+programmatically at runtime.\n+\n+Once called, the system CA certificates will be included in the default CA\n+certificate list returned by [`tls.getCACertificates()`][] and used by TLS\n+connections that don't specify their own CA certificates.\n+\n+Subsequent calls to this function are no-ops. The system CA certificates are\n+loaded and cached on the first call.\n+\n+This function only affects the current Node.js thread.",
        "comment_created_at": "2025-06-25T10:41:47+00:00",
        "comment_author": "joyeecheung",
        "comment_body": "As explained, the per-connection option already exists.\r\n\r\nThis API serves a different use case, where another party (e.g. corporate infra packages) would need to allow system certificates to be enabled when they are only to be loaded by application developers (who can start tls connections themselves, or use a third-party library that does it) and have no control over the command line.\r\n\r\n> This API could be set by dependencies impacting global state without the application being aware of it. \r\n\r\nThis is already possible by monkey patching tls or the global HTTPS agent - for example, see https://www.npmjs.com/package/syswide-cas. If both the `ca` option and `NODE_EXTRA_CA_CERTS` exist  but a package like this still gets 14K+ weekly downloads, that means the existing API surfaces are not enough to cover them. I am fairly certain there are applications/packages that would just go a nuclear route and use `rejectUnauthorized: false` in the monkey-patched option bag when the woes they are having can't be fixed with existing options, considering how often it shows up on the Internet and on even [public GitHub](https://github.com/search?q=rejectUnauthorized%3A+false&type=code).  Providing an option to allow using system certificates dynamically is at least a lot safer than what people are already doing, since the system certificates tend to be managed in a much more secure fashion. I can put that into the PR description, if it's not clear.",
        "pr_file_module": null
      },
      {
        "comment_id": "2166453741",
        "repo_full_name": "nodejs/node",
        "pr_number": 58822,
        "pr_file": "doc/api/tls.md",
        "discussion_id": "2165802333",
        "commented_code": "@@ -2260,6 +2260,25 @@ openssl pkcs12 -certpbe AES-256-CBC -export -out client-cert.pem \\\n The server can be tested by connecting to it using the example client from\n [`tls.connect()`][].\n \n+## `tls.useSystemCA()`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+Enables system CA certificates to be used by the Node.js TLS clients by default.\n+This is equivalent to enabling the [`--use-system-ca`][] flag, but can be done\n+programmatically at runtime.\n+\n+Once called, the system CA certificates will be included in the default CA\n+certificate list returned by [`tls.getCACertificates()`][] and used by TLS\n+connections that don't specify their own CA certificates.\n+\n+Subsequent calls to this function are no-ops. The system CA certificates are\n+loaded and cached on the first call.\n+\n+This function only affects the current Node.js thread.",
        "comment_created_at": "2025-06-25T11:10:08+00:00",
        "comment_author": "joyeecheung",
        "comment_body": "Actually there are more packages monkey patching tls/https agent to do this..(sigh):\r\n\r\nhttps://www.npmjs.com/package/win-ca\r\nhttps://www.npmjs.com/package/ssl-root-cas\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2166799428",
        "repo_full_name": "nodejs/node",
        "pr_number": 58822,
        "pr_file": "doc/api/tls.md",
        "discussion_id": "2165802333",
        "commented_code": "@@ -2260,6 +2260,25 @@ openssl pkcs12 -certpbe AES-256-CBC -export -out client-cert.pem \\\n The server can be tested by connecting to it using the example client from\n [`tls.connect()`][].\n \n+## `tls.useSystemCA()`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+Enables system CA certificates to be used by the Node.js TLS clients by default.\n+This is equivalent to enabling the [`--use-system-ca`][] flag, but can be done\n+programmatically at runtime.\n+\n+Once called, the system CA certificates will be included in the default CA\n+certificate list returned by [`tls.getCACertificates()`][] and used by TLS\n+connections that don't specify their own CA certificates.\n+\n+Subsequent calls to this function are no-ops. The system CA certificates are\n+loaded and cached on the first call.\n+\n+This function only affects the current Node.js thread.",
        "comment_created_at": "2025-06-25T14:01:42+00:00",
        "comment_author": "jasnell",
        "comment_body": "I won't block but I'm still unconvinced this is a good thing to add.",
        "pr_file_module": null
      },
      {
        "comment_id": "2168750235",
        "repo_full_name": "nodejs/node",
        "pr_number": 58822,
        "pr_file": "doc/api/tls.md",
        "discussion_id": "2165802333",
        "commented_code": "@@ -2260,6 +2260,25 @@ openssl pkcs12 -certpbe AES-256-CBC -export -out client-cert.pem \\\n The server can be tested by connecting to it using the example client from\n [`tls.connect()`][].\n \n+## `tls.useSystemCA()`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+Enables system CA certificates to be used by the Node.js TLS clients by default.\n+This is equivalent to enabling the [`--use-system-ca`][] flag, but can be done\n+programmatically at runtime.\n+\n+Once called, the system CA certificates will be included in the default CA\n+certificate list returned by [`tls.getCACertificates()`][] and used by TLS\n+connections that don't specify their own CA certificates.\n+\n+Subsequent calls to this function are no-ops. The system CA certificates are\n+loaded and cached on the first call.\n+\n+This function only affects the current Node.js thread.",
        "comment_created_at": "2025-06-26T10:33:19+00:00",
        "comment_author": "pimterry",
        "comment_body": "> This API serves a different use case\r\n\r\n@joyeecheung That corporate infra use case makes sense. I don't think the library argument is that strong (they all predate the other new improvements you'd made here to cover this, and could easily be a symptom of lack of awareness of new APIs and/or inertia) but it makes sense to include this (runtime global CA configuration) if somebody concrete is asking for it despite the other new APIs.\r\n\r\nThis API feels like a strange state change though: it's a one-way toggle, that can easily be switched invisibly & unexpectedly in dependencies, which only supports one type of runtime change, and which doesn't act like any other APIs we have (AFAIK). It's not normal global mutable state - it's a runtime-activated CLI flag.\r\n\r\nWhat do you think about an alternative more along the lines of `http.globalAgent`? A writable property to globally control the TLS defaults.\r\n\r\nThe easiest direct solution in that vein would be to make `tls.rootCertificates` directly configurable. I think ESM means it's awkward to make that writable directly, but an API like `tls.setDefaultCACertificates(tls.getCACertificates('system'))` would be workable. That seems more idiomatic & well-behaved to me, achieves the same result, and is more flexible to allow for globally configuring CAs in other ways too (e.g. adding a single extra CA at runtime - which likely has plenty of overlap in corporate use cases). Is there a reason that's not possible?\r\n\r\nWe _could_ even do that more generally for all TLS defaults... A `tls.setDefaultOptions()` method to configure a default used by all secure contexts has other interesting use cases (globally set minimum TLS version, OpenSSL options, TLS timeouts, etc) and would cover this neatly too. Or we could stick with just root certs separately if that's too bold/complicated for now.",
        "pr_file_module": null
      },
      {
        "comment_id": "2168982367",
        "repo_full_name": "nodejs/node",
        "pr_number": 58822,
        "pr_file": "doc/api/tls.md",
        "discussion_id": "2165802333",
        "commented_code": "@@ -2260,6 +2260,25 @@ openssl pkcs12 -certpbe AES-256-CBC -export -out client-cert.pem \\\n The server can be tested by connecting to it using the example client from\n [`tls.connect()`][].\n \n+## `tls.useSystemCA()`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+Enables system CA certificates to be used by the Node.js TLS clients by default.\n+This is equivalent to enabling the [`--use-system-ca`][] flag, but can be done\n+programmatically at runtime.\n+\n+Once called, the system CA certificates will be included in the default CA\n+certificate list returned by [`tls.getCACertificates()`][] and used by TLS\n+connections that don't specify their own CA certificates.\n+\n+Subsequent calls to this function are no-ops. The system CA certificates are\n+loaded and cached on the first call.\n+\n+This function only affects the current Node.js thread.",
        "comment_created_at": "2025-06-26T12:44:08+00:00",
        "comment_author": "joyeecheung",
        "comment_body": "> The easiest direct solution in that vein would be to make tls.rootCertificates directly configurable. I think ESM means it's awkward to make that writable directly, but an API like tls.setDefaultCACertificates(tls.getCACertificates('system')) \r\n\r\nThat is a good idea, I think I'll need to look into it a bit further to confirm this is implementable & safe in async operations, but it sounds better than the current API to me.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2168987292",
        "repo_full_name": "nodejs/node",
        "pr_number": 58822,
        "pr_file": "doc/api/tls.md",
        "discussion_id": "2165802333",
        "commented_code": "@@ -2260,6 +2260,25 @@ openssl pkcs12 -certpbe AES-256-CBC -export -out client-cert.pem \\\n The server can be tested by connecting to it using the example client from\n [`tls.connect()`][].\n \n+## `tls.useSystemCA()`\n+\n+<!-- YAML\n+added: REPLACEME\n+-->\n+\n+Enables system CA certificates to be used by the Node.js TLS clients by default.\n+This is equivalent to enabling the [`--use-system-ca`][] flag, but can be done\n+programmatically at runtime.\n+\n+Once called, the system CA certificates will be included in the default CA\n+certificate list returned by [`tls.getCACertificates()`][] and used by TLS\n+connections that don't specify their own CA certificates.\n+\n+Subsequent calls to this function are no-ops. The system CA certificates are\n+loaded and cached on the first call.\n+\n+This function only affects the current Node.js thread.",
        "comment_created_at": "2025-06-26T12:46:29+00:00",
        "comment_author": "joyeecheung",
        "comment_body": "> Or we could stick with just root certs separately if that's too bold/complicated for now.\r\n\r\nPersonally I'd be more comfortable to just stick to root certs considering the option bags are cherry-picked and copied into various instances, with everything being monkey-patchable and visible to user land, so it seems tricky to ensure consistency. The root cert store lives completely in C++ land so is safer from user tampering.",
        "pr_file_module": null
      }
    ]
  }
]