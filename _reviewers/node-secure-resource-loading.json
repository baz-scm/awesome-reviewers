[
  {
    "discussion_id": "1834844386",
    "pr_number": 54364,
    "pr_file": "src/node_code_integrity.cc",
    "created_at": "2024-11-08T17:55:39+00:00",
    "commented_code": "+#include \"node_code_integrity.h\"\n+#include \"v8.h\"\n+#include \"node.h\"\n+#include \"env-inl.h\"\n+#include \"node_external_reference.h\"\n+\n+namespace node {\n+\n+using v8::Boolean;\n+using v8::Context;\n+using v8::FunctionCallbackInfo;\n+using v8::Local;\n+using v8::Object;\n+using v8::Value;\n+\n+namespace codeintegrity {\n+\n+#ifdef _WIN32",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "1834844386",
        "repo_full_name": "nodejs/node",
        "pr_number": 54364,
        "pr_file": "src/node_code_integrity.cc",
        "discussion_id": "1834844386",
        "commented_code": "@@ -0,0 +1,279 @@\n+#include \"node_code_integrity.h\"\n+#include \"v8.h\"\n+#include \"node.h\"\n+#include \"env-inl.h\"\n+#include \"node_external_reference.h\"\n+\n+namespace node {\n+\n+using v8::Boolean;\n+using v8::Context;\n+using v8::FunctionCallbackInfo;\n+using v8::Local;\n+using v8::Object;\n+using v8::Value;\n+\n+namespace codeintegrity {\n+\n+#ifdef _WIN32",
        "comment_created_at": "2024-11-08T17:55:39+00:00",
        "comment_author": "RafaelGSS",
        "comment_body": "Does it work on all supported Windows environments?",
        "pr_file_module": null
      },
      {
        "comment_id": "1837007998",
        "repo_full_name": "nodejs/node",
        "pr_number": 54364,
        "pr_file": "src/node_code_integrity.cc",
        "discussion_id": "1834844386",
        "commented_code": "@@ -0,0 +1,279 @@\n+#include \"node_code_integrity.h\"\n+#include \"v8.h\"\n+#include \"node.h\"\n+#include \"env-inl.h\"\n+#include \"node_external_reference.h\"\n+\n+namespace node {\n+\n+using v8::Boolean;\n+using v8::Context;\n+using v8::FunctionCallbackInfo;\n+using v8::Local;\n+using v8::Object;\n+using v8::Value;\n+\n+namespace codeintegrity {\n+\n+#ifdef _WIN32",
        "comment_created_at": "2024-11-11T17:39:12+00:00",
        "comment_author": "rdw-msft",
        "comment_body": "WldpCanExecuteFile, WldpQueryApplicationSettingBoolean methods are implemented on Windows Server and Windows Client. \r\n\r\nIs there a list of NodeJS supported environments I can check against? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1837009615",
        "repo_full_name": "nodejs/node",
        "pr_number": 54364,
        "pr_file": "src/node_code_integrity.cc",
        "discussion_id": "1834844386",
        "commented_code": "@@ -0,0 +1,279 @@\n+#include \"node_code_integrity.h\"\n+#include \"v8.h\"\n+#include \"node.h\"\n+#include \"env-inl.h\"\n+#include \"node_external_reference.h\"\n+\n+namespace node {\n+\n+using v8::Boolean;\n+using v8::Context;\n+using v8::FunctionCallbackInfo;\n+using v8::Local;\n+using v8::Object;\n+using v8::Value;\n+\n+namespace codeintegrity {\n+\n+#ifdef _WIN32",
        "comment_created_at": "2024-11-11T17:40:44+00:00",
        "comment_author": "RafaelGSS",
        "comment_body": "https://github.com/nodejs/node/blob/main/BUILDING.md#platform-list",
        "pr_file_module": null
      },
      {
        "comment_id": "1837024398",
        "repo_full_name": "nodejs/node",
        "pr_number": 54364,
        "pr_file": "src/node_code_integrity.cc",
        "discussion_id": "1834844386",
        "commented_code": "@@ -0,0 +1,279 @@\n+#include \"node_code_integrity.h\"\n+#include \"v8.h\"\n+#include \"node.h\"\n+#include \"env-inl.h\"\n+#include \"node_external_reference.h\"\n+\n+namespace node {\n+\n+using v8::Boolean;\n+using v8::Context;\n+using v8::FunctionCallbackInfo;\n+using v8::Local;\n+using v8::Object;\n+using v8::Value;\n+\n+namespace codeintegrity {\n+\n+#ifdef _WIN32",
        "comment_created_at": "2024-11-11T17:56:03+00:00",
        "comment_author": "rdw-msft",
        "comment_body": "What is the minimum version of Windows supported by Node? \r\n\r\nWldp.dll was added in Windows 8, however the APIs we're using to enforce file signatures were added in Windows 11 Build 22621\r\n\r\nThe APIs we're using:\r\nWldpCanExecuteFile, checks if the file meets code integrity policy (e.g. hash is unchanged), is available in Windows 11 Build 22621+\r\nWldpGetApplicationSettingBoolean, queries the security policy to see if a configuration setting is set, this is the flag we use to determine if we should be enforcing code integrity with calls to WldpCanExecuteFile, is also in Win11.\r\nWldpQuerySecurityPolicy, is the fallback method we use if WldpGetApplicationSettingBoolean is not available. This allows backward compatibility to early Windows 10 builds. \r\n\r\nWe can assume that if we can't get a handle on Wldp.dll, the system is too old to support code integrity, so execution can just continue. \r\n\r\nIf we're on a system with WldpQuerySecurityPolicy, and the Node.js EnforceCodeIntegrity setting is enabled, but we can't load WldpCanExecuteFile, we should probably halt execution. I can add this behavior in the next iteration if it seems reasonable. \r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1837025479",
        "repo_full_name": "nodejs/node",
        "pr_number": 54364,
        "pr_file": "src/node_code_integrity.cc",
        "discussion_id": "1834844386",
        "commented_code": "@@ -0,0 +1,279 @@\n+#include \"node_code_integrity.h\"\n+#include \"v8.h\"\n+#include \"node.h\"\n+#include \"env-inl.h\"\n+#include \"node_external_reference.h\"\n+\n+namespace node {\n+\n+using v8::Boolean;\n+using v8::Context;\n+using v8::FunctionCallbackInfo;\n+using v8::Local;\n+using v8::Object;\n+using v8::Value;\n+\n+namespace codeintegrity {\n+\n+#ifdef _WIN32",
        "comment_created_at": "2024-11-11T17:57:09+00:00",
        "comment_author": "RafaelGSS",
        "comment_body": "cc: @nodejs/build @nodejs/platform-windows ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1834847780",
    "pr_number": 54364,
    "pr_file": "src/node_code_integrity.cc",
    "created_at": "2024-11-08T17:57:32+00:00",
    "commented_code": "+#include \"node_code_integrity.h\"\n+#include \"v8.h\"\n+#include \"node.h\"\n+#include \"env-inl.h\"\n+#include \"node_external_reference.h\"\n+\n+namespace node {\n+\n+using v8::Boolean;\n+using v8::Context;\n+using v8::FunctionCallbackInfo;\n+using v8::Local;\n+using v8::Object;\n+using v8::Value;\n+\n+namespace codeintegrity {\n+\n+#ifdef _WIN32\n+static bool isWldpInitialized = false;\n+static pfnWldpCanExecuteFile WldpCanExecuteFile;\n+static pfnWldpGetApplicationSettingBoolean WldpGetApplicationSettingBoolean;\n+static pfnWldpQuerySecurityPolicy WldpQuerySecurityPolicy;\n+static PCWSTR NODEJS = L\"Node.js\";\n+static PCWSTR ENFORCE_CODE_INTEGRITY_SETTING_NAME = L\"EnforceCodeIntegrity\";\n+static PCWSTR DISABLE_INTERPRETIVE_MODE_SETTING_NAME =\n+  L\"DisableInteractiveMode\";\n+\n+void InitWldp(Environment* env) {\n+  if (isWldpInitialized) {\n+    return;\n+  }\n+\n+  HMODULE wldp_module = LoadLibraryExA(\n+      \"wldp.dll\",",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "1834847780",
        "repo_full_name": "nodejs/node",
        "pr_number": 54364,
        "pr_file": "src/node_code_integrity.cc",
        "discussion_id": "1834847780",
        "commented_code": "@@ -0,0 +1,279 @@\n+#include \"node_code_integrity.h\"\n+#include \"v8.h\"\n+#include \"node.h\"\n+#include \"env-inl.h\"\n+#include \"node_external_reference.h\"\n+\n+namespace node {\n+\n+using v8::Boolean;\n+using v8::Context;\n+using v8::FunctionCallbackInfo;\n+using v8::Local;\n+using v8::Object;\n+using v8::Value;\n+\n+namespace codeintegrity {\n+\n+#ifdef _WIN32\n+static bool isWldpInitialized = false;\n+static pfnWldpCanExecuteFile WldpCanExecuteFile;\n+static pfnWldpGetApplicationSettingBoolean WldpGetApplicationSettingBoolean;\n+static pfnWldpQuerySecurityPolicy WldpQuerySecurityPolicy;\n+static PCWSTR NODEJS = L\"Node.js\";\n+static PCWSTR ENFORCE_CODE_INTEGRITY_SETTING_NAME = L\"EnforceCodeIntegrity\";\n+static PCWSTR DISABLE_INTERPRETIVE_MODE_SETTING_NAME =\n+  L\"DisableInteractiveMode\";\n+\n+void InitWldp(Environment* env) {\n+  if (isWldpInitialized) {\n+    return;\n+  }\n+\n+  HMODULE wldp_module = LoadLibraryExA(\n+      \"wldp.dll\",",
        "comment_created_at": "2024-11-08T17:57:32+00:00",
        "comment_author": "RafaelGSS",
        "comment_body": "Is it a default dll on Windows? Can't it be subject of hijack?\r\n\r\nI remember that we faced an vulnerability in the past where Node.js was reading the openssl.conf from working_dir instead of absolute openssl path leading to some vulnerabilities. Could you double check if that's the case?",
        "pr_file_module": null
      },
      {
        "comment_id": "1837010348",
        "repo_full_name": "nodejs/node",
        "pr_number": 54364,
        "pr_file": "src/node_code_integrity.cc",
        "discussion_id": "1834847780",
        "commented_code": "@@ -0,0 +1,279 @@\n+#include \"node_code_integrity.h\"\n+#include \"v8.h\"\n+#include \"node.h\"\n+#include \"env-inl.h\"\n+#include \"node_external_reference.h\"\n+\n+namespace node {\n+\n+using v8::Boolean;\n+using v8::Context;\n+using v8::FunctionCallbackInfo;\n+using v8::Local;\n+using v8::Object;\n+using v8::Value;\n+\n+namespace codeintegrity {\n+\n+#ifdef _WIN32\n+static bool isWldpInitialized = false;\n+static pfnWldpCanExecuteFile WldpCanExecuteFile;\n+static pfnWldpGetApplicationSettingBoolean WldpGetApplicationSettingBoolean;\n+static pfnWldpQuerySecurityPolicy WldpQuerySecurityPolicy;\n+static PCWSTR NODEJS = L\"Node.js\";\n+static PCWSTR ENFORCE_CODE_INTEGRITY_SETTING_NAME = L\"EnforceCodeIntegrity\";\n+static PCWSTR DISABLE_INTERPRETIVE_MODE_SETTING_NAME =\n+  L\"DisableInteractiveMode\";\n+\n+void InitWldp(Environment* env) {\n+  if (isWldpInitialized) {\n+    return;\n+  }\n+\n+  HMODULE wldp_module = LoadLibraryExA(\n+      \"wldp.dll\",",
        "comment_created_at": "2024-11-11T17:41:28+00:00",
        "comment_author": "rdw-msft",
        "comment_body": "This is a default DLL, the OS grabs a handle on this DLL early in the boot process to prevent tampering. \r\n\r\nWe can also assume that if this DLL doesn't exist on a system, it is too old to support code integrity features. ",
        "pr_file_module": null
      }
    ]
  }
]