[
  {
    "discussion_id": "2173842424",
    "pr_number": 58879,
    "pr_file": "src/js_native_api_types.h",
    "created_at": "2025-06-29T17:41:29+00:00",
    "commented_code": "napi_uint16_array,\n   napi_int32_array,\n   napi_uint32_array,\n+  napi_float16_array,",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2173842424",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_types.h",
        "discussion_id": "2173842424",
        "commented_code": "@@ -101,6 +101,7 @@ typedef enum {\n   napi_uint16_array,\n   napi_int32_array,\n   napi_uint32_array,\n+  napi_float16_array,",
        "comment_created_at": "2025-06-29T17:41:29+00:00",
        "comment_author": "vmoroz",
        "comment_body": "It is important to note that Node-API is an ABI stable API. It means that any code that was compiled before with the previous version of Node-API must work in the future version of Node-API. See more details here: https://github.com/nodejs/node/blob/main/doc/contributing/adding-new-napi-api.md\r\n\r\nBy inserting a new enum value in the middle of the existing enum values we effectively change integer values for all enum values that follow the inserted entry. Any previously compiled code that used to create float32 array will suddenly create the float16 array, float64 became float32, etc.\r\n\r\nThe only valid place to insert new enum values in Node-API is at the end of an enum.\r\n\r\nAlso, any Node-API changes must be versioned and initially be part of the experimental version. \r\nI.e. the new enum entry must be under `#ifdef NAPI_EXPERIMENTAL`. E.g. see [this commit](https://github.com/nodejs/node/commit/c9506a8f3e9bc5c679151feb39198023154464ab) where the new Node-API property attributes were added.",
        "pr_file_module": null
      },
      {
        "comment_id": "2173994320",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_types.h",
        "discussion_id": "2173842424",
        "commented_code": "@@ -101,6 +101,7 @@ typedef enum {\n   napi_uint16_array,\n   napi_int32_array,\n   napi_uint32_array,\n+  napi_float16_array,",
        "comment_created_at": "2025-06-29T23:02:10+00:00",
        "comment_author": "vmoroz",
        "comment_body": "@IlyasShabi , thank you for fixing the enum order!\r\n\r\nLike @legendecas mentioned here https://github.com/nodejs/node/pull/58889#discussion_r2173927489, we also need a new experiemental feature macro to be defined. As an example, please see this commit: https://github.com/nodejs/node/commit/59e7444766c31db75a1a989872c369cfd86c822f and how it defined the `NODE_API_EXPERIMENTAL_HAS_PROPERTY_KEYS` macro. The macro will be deleted when the code becomes part of an official Node-API version after some \"baking\" time.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2173932383",
    "pr_number": 58879,
    "pr_file": "src/js_native_api_v8.cc",
    "created_at": "2025-06-29T21:27:38+00:00",
    "commented_code": "CREATE_TYPED_ARRAY(\n           env, BigUint64Array, 8, buffer, byte_offset, length, typedArray);\n       break;\n+    case napi_float16_array:",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2173932383",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2173932383",
        "commented_code": "@@ -3165,6 +3165,10 @@ napi_status NAPI_CDECL napi_create_typedarray(napi_env env,\n       CREATE_TYPED_ARRAY(\n           env, BigUint64Array, 8, buffer, byte_offset, length, typedArray);\n       break;\n+    case napi_float16_array:",
        "comment_created_at": "2025-06-29T21:27:38+00:00",
        "comment_author": "jasnell",
        "comment_body": "The case will need to be wrapped in the `#ifdef NAPI_EXPERIMENTAL` as well",
        "pr_file_module": null
      },
      {
        "comment_id": "2173936601",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2173932383",
        "commented_code": "@@ -3165,6 +3165,10 @@ napi_status NAPI_CDECL napi_create_typedarray(napi_env env,\n       CREATE_TYPED_ARRAY(\n           env, BigUint64Array, 8, buffer, byte_offset, length, typedArray);\n       break;\n+    case napi_float16_array:",
        "comment_created_at": "2025-06-29T21:46:02+00:00",
        "comment_author": "IlyasShabi",
        "comment_body": "I don’t think it’s needed since it’s never called without `napi_float16_array` being defined",
        "pr_file_module": null
      },
      {
        "comment_id": "2173938972",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2173932383",
        "commented_code": "@@ -3165,6 +3165,10 @@ napi_status NAPI_CDECL napi_create_typedarray(napi_env env,\n       CREATE_TYPED_ARRAY(\n           env, BigUint64Array, 8, buffer, byte_offset, length, typedArray);\n       break;\n+    case napi_float16_array:",
        "comment_created_at": "2025-06-29T21:54:58+00:00",
        "comment_author": "jasnell",
        "comment_body": "Ah right, I forgot that this file defines `NAPI_EXPERIMENTAL` unconditionally at the top of the file. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2173988501",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2173932383",
        "commented_code": "@@ -3165,6 +3165,10 @@ napi_status NAPI_CDECL napi_create_typedarray(napi_env env,\n       CREATE_TYPED_ARRAY(\n           env, BigUint64Array, 8, buffer, byte_offset, length, typedArray);\n       break;\n+    case napi_float16_array:",
        "comment_created_at": "2025-06-29T22:42:48+00:00",
        "comment_author": "vmoroz",
        "comment_body": "In this file we must check the `module_api_version` against the `NAPI_VERSION_EXPERIMENTAL` version.",
        "pr_file_module": null
      },
      {
        "comment_id": "2173997807",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2173932383",
        "commented_code": "@@ -3165,6 +3165,10 @@ napi_status NAPI_CDECL napi_create_typedarray(napi_env env,\n       CREATE_TYPED_ARRAY(\n           env, BigUint64Array, 8, buffer, byte_offset, length, typedArray);\n       break;\n+    case napi_float16_array:",
        "comment_created_at": "2025-06-29T23:15:05+00:00",
        "comment_author": "vmoroz",
        "comment_body": "Just to expand a bit on my previous statement:\r\nEach Node-API module claims which version of Node-API it needs for its work.\r\nIn the current code each `.node` module defines exported function [node_api_module_get_api_version_v1](https://github.com/nodejs/node/blob/8b199eef3dd4de910a6521adc42ae611a62a19e1/src/node_api.h#L74C30-L74C61) that returns `NAPI_VERSION`. For the old code that does not have this function we assume \"NAPI_VERSION == 8\". Depending on the Node-API version required by the module (`module_api_version`) we adjust the `napi_env` behavior. We should expose the experiemental behavior only to the modules which explicitly ask for it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2175069426",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2173932383",
        "commented_code": "@@ -3165,6 +3165,10 @@ napi_status NAPI_CDECL napi_create_typedarray(napi_env env,\n       CREATE_TYPED_ARRAY(\n           env, BigUint64Array, 8, buffer, byte_offset, length, typedArray);\n       break;\n+    case napi_float16_array:",
        "comment_created_at": "2025-06-30T13:22:14+00:00",
        "comment_author": "IlyasShabi",
        "comment_body": "@vmoroz thanks for making this clear, I did update the PR",
        "pr_file_module": null
      },
      {
        "comment_id": "2175665932",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2173932383",
        "commented_code": "@@ -3165,6 +3165,10 @@ napi_status NAPI_CDECL napi_create_typedarray(napi_env env,\n       CREATE_TYPED_ARRAY(\n           env, BigUint64Array, 8, buffer, byte_offset, length, typedArray);\n       break;\n+    case napi_float16_array:",
        "comment_created_at": "2025-06-30T18:35:39+00:00",
        "comment_author": "vmoroz",
        "comment_body": "It looks good!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2173932478",
    "pr_number": 58879,
    "pr_file": "src/js_native_api_v8.cc",
    "created_at": "2025-06-29T21:28:13+00:00",
    "commented_code": "*type = napi_int32_array;\n     } else if (value->IsUint32Array()) {\n       *type = napi_uint32_array;\n+    } else if (value->IsFloat16Array()) {",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2173932478",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2173932478",
        "commented_code": "@@ -3203,6 +3207,8 @@ napi_status NAPI_CDECL napi_get_typedarray_info(napi_env env,\n       *type = napi_int32_array;\n     } else if (value->IsUint32Array()) {\n       *type = napi_uint32_array;\n+    } else if (value->IsFloat16Array()) {",
        "comment_created_at": "2025-06-29T21:28:13+00:00",
        "comment_author": "jasnell",
        "comment_body": "Likewise here. Wrap the else if here in an `#ifdef NAPI_EXPERIMENTAL`",
        "pr_file_module": null
      },
      {
        "comment_id": "2201181372",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2173932478",
        "commented_code": "@@ -3203,6 +3207,8 @@ napi_status NAPI_CDECL napi_get_typedarray_info(napi_env env,\n       *type = napi_int32_array;\n     } else if (value->IsUint32Array()) {\n       *type = napi_uint32_array;\n+    } else if (value->IsFloat16Array()) {",
        "comment_created_at": "2025-07-11T16:20:47+00:00",
        "comment_author": "vmoroz",
        "comment_body": "I support @jasnell point here. Since the `napi_float16_array` is under the experimental flag, we must not return that value for clients that do not use the experimental version.",
        "pr_file_module": null
      },
      {
        "comment_id": "2201216588",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2173932478",
        "commented_code": "@@ -3203,6 +3207,8 @@ napi_status NAPI_CDECL napi_get_typedarray_info(napi_env env,\n       *type = napi_int32_array;\n     } else if (value->IsUint32Array()) {\n       *type = napi_uint32_array;\n+    } else if (value->IsFloat16Array()) {",
        "comment_created_at": "2025-07-11T16:30:22+00:00",
        "comment_author": "vmoroz",
        "comment_body": "Though I see the issue that previously we did not return any deterministic value at all. \r\nI guess there must be an \"else\" statement that returns some value like `std::numeric_limits<int32_t>::max()`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2175670940",
    "pr_number": 58879,
    "pr_file": "src/js_native_api_v8.cc",
    "created_at": "2025-06-30T18:39:07+00:00",
    "commented_code": "CREATE_TYPED_ARRAY(\n           env, BigUint64Array, 8, buffer, byte_offset, length, typedArray);\n       break;\n+    case napi_float16_array:\n+      if (env->module_api_version != NAPI_VERSION_EXPERIMENTAL) {",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2175670940",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2175670940",
        "commented_code": "@@ -3165,6 +3165,13 @@ napi_status NAPI_CDECL napi_create_typedarray(napi_env env,\n       CREATE_TYPED_ARRAY(\n           env, BigUint64Array, 8, buffer, byte_offset, length, typedArray);\n       break;\n+    case napi_float16_array:\n+      if (env->module_api_version != NAPI_VERSION_EXPERIMENTAL) {",
        "comment_created_at": "2025-06-30T18:39:07+00:00",
        "comment_author": "addaleax",
        "comment_body": "This bit in particular is odd – why the check here? Even if this feature is experimental, the enum value being used at all should be enough to imply that the caller has opted into this feature.",
        "pr_file_module": null
      },
      {
        "comment_id": "2175706985",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2175670940",
        "commented_code": "@@ -3165,6 +3165,13 @@ napi_status NAPI_CDECL napi_create_typedarray(napi_env env,\n       CREATE_TYPED_ARRAY(\n           env, BigUint64Array, 8, buffer, byte_offset, length, typedArray);\n       break;\n+    case napi_float16_array:\n+      if (env->module_api_version != NAPI_VERSION_EXPERIMENTAL) {",
        "comment_created_at": "2025-06-30T19:00:29+00:00",
        "comment_author": "vmoroz",
        "comment_body": "Right, it may look silly, but if we want to ensure predictable behavior between Node-API versions, then we must do it.\r\nIf we only focus on Node.js, and do not care much about versions, then you are right - it may be a bit of overhead.\r\nBut when you start to take into account support for other runtimes and JS engine, having a consistent and well-defined behavior becomes very important. To me this strict well-defined Node-API versioning is one of its best-selling points.\r\n\r\nSay, someone creates a plugin that relies on the new Float16Array. \r\nIf we add it to Node.js directly without Node-API version, then this addon may work or not work in Deno or Bun depending on stars.\r\nBut if we explicitly say that Float16Array is the part of the experimental, and then version 11, then the Deno and Bun developers will be able to provide exactly the same contract and thus give the addon developers the best predictable experience.\r\n\r\nHaving the predictable behavior in this code file is also important for unit tests. Without versioning here, we cannot create reliable tests that can check the differences between versions. E.g. previously the unit test was successful even if the code relied on the experimental feature. Now it fails as expected because the addon must not use it yet.",
        "pr_file_module": null
      },
      {
        "comment_id": "2175734020",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2175670940",
        "commented_code": "@@ -3165,6 +3165,13 @@ napi_status NAPI_CDECL napi_create_typedarray(napi_env env,\n       CREATE_TYPED_ARRAY(\n           env, BigUint64Array, 8, buffer, byte_offset, length, typedArray);\n       break;\n+    case napi_float16_array:\n+      if (env->module_api_version != NAPI_VERSION_EXPERIMENTAL) {",
        "comment_created_at": "2025-06-30T19:14:27+00:00",
        "comment_author": "addaleax",
        "comment_body": "> depending on stars.\r\n\r\nIt depends on a very specific question though, not stars; namely, whether the runtime has support for creating Float16Array instances through Node-API. The behavior _is_ predictable; either `napi_create_typedarray()` succeeds or it fails, and the caller should be able to handle both.\r\n\r\nIn any case, do what you must. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2175749653",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2175670940",
        "commented_code": "@@ -3165,6 +3165,13 @@ napi_status NAPI_CDECL napi_create_typedarray(napi_env env,\n       CREATE_TYPED_ARRAY(\n           env, BigUint64Array, 8, buffer, byte_offset, length, typedArray);\n       break;\n+    case napi_float16_array:\n+      if (env->module_api_version != NAPI_VERSION_EXPERIMENTAL) {",
        "comment_created_at": "2025-06-30T19:26:33+00:00",
        "comment_author": "vmoroz",
        "comment_body": "Thanks! We just follow the established process here.\r\nWe often see some completely unexpected side effects even from something that looks quite innocent.\r\nThus, it is better to be \"defensive\" about all new features and follow the \"book\". :)",
        "pr_file_module": null
      },
      {
        "comment_id": "2175825219",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_v8.cc",
        "discussion_id": "2175670940",
        "commented_code": "@@ -3165,6 +3165,13 @@ napi_status NAPI_CDECL napi_create_typedarray(napi_env env,\n       CREATE_TYPED_ARRAY(\n           env, BigUint64Array, 8, buffer, byte_offset, length, typedArray);\n       break;\n+    case napi_float16_array:\n+      if (env->module_api_version != NAPI_VERSION_EXPERIMENTAL) {",
        "comment_created_at": "2025-06-30T20:20:16+00:00",
        "comment_author": "legendecas",
        "comment_body": "I don't feel strongly about adding a runtime version guard. IMO, adding an `NAPI_EXPERIMENTAL` and `NODE_API_EXPERIMENTAL_HAS_FLOAT16_ARRAY ` around the definition should be sufficient, and addons can use `NODE_API_EXPERIMENTAL_HAS_FLOAT16_ARRAY` to guard if `napi_float16_array` is defined.\r\n\r\nWe added runtime version checks for features like finalizers, which can cause side effects. But for `napi_create_typedarray`, I think it should not cause side-effects.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2201124673",
    "pr_number": 58879,
    "pr_file": "src/js_native_api_types.h",
    "created_at": "2025-07-11T16:02:53+00:00",
    "commented_code": "napi_float64_array,\n   napi_bigint64_array,\n   napi_biguint64_array,\n+#ifdef NAPI_EXPERIMENTAL",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2201124673",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_types.h",
        "discussion_id": "2201124673",
        "commented_code": "@@ -105,6 +105,10 @@ typedef enum {\n   napi_float64_array,\n   napi_bigint64_array,\n   napi_biguint64_array,\n+#ifdef NAPI_EXPERIMENTAL",
        "comment_created_at": "2025-07-11T16:02:53+00:00",
        "comment_author": "KevinEady",
        "comment_body": "We discussed this in the 11 July Node-API meeting. \r\n\r\nIn the past, we have added two enum values to `napi_status` that were not behind experimental guards: `napi_no_external_buffers_allowed` ([ref](https://github.com/nodejs/node/pull/45181/files#diff-26709ee1f9f0cb60d2d67f45106b31de8ed5eb28ad66c91903fd935a6d607d4dR582)) and `napi_cannot_run_js` ([ref](https://github.com/nodejs/node/pull/47986/files#diff-26709ee1f9f0cb60d2d67f45106b31de8ed5eb28ad66c91903fd935a6d607d4dR584)). \r\n\r\nI'm not sure this should be guarded by an `NAPI_EXPERIMENTAL` flag.\r\n\r\nAdding this under an experimental flag would mean that it is possible for `napi_get_typedarray_info` (which has no guard) can return an enum that I (if I do not define `NAPI_EXPERIMENTAL`) have no way of checking against.\r\n\r\nDoes it make sense to have this under a guard?",
        "pr_file_module": null
      },
      {
        "comment_id": "2201170198",
        "repo_full_name": "nodejs/node",
        "pr_number": 58879,
        "pr_file": "src/js_native_api_types.h",
        "discussion_id": "2201124673",
        "commented_code": "@@ -105,6 +105,10 @@ typedef enum {\n   napi_float64_array,\n   napi_bigint64_array,\n   napi_biguint64_array,\n+#ifdef NAPI_EXPERIMENTAL",
        "comment_created_at": "2025-07-11T16:17:27+00:00",
        "comment_author": "vmoroz",
        "comment_body": "@KevinEady , I believe for the correct versioning support we must use the experimental flag.\r\nWhile we did not provide the experimental guard for the status values, we always used to do it for other enum types.\r\nE.g. see the property attributes: https://github.com/nodejs/node/blob/a47274595888cb9e672c1bce3157a3eab2c50ab2/src/js_native_api_types.h#L73-L80\r\n\r\nIt is important that Node-API keeps a good versioning story and the ABI stability.\r\n\r\nFor the same reason the `napi_get_typedarray_info` behavior must be properly guarded.\r\nE.g. today before this PR, the `napi_get_typedarray_info` has certain behavior and returns values that does not include the Float16 array type. We must ensure that this behavior is kept unchanged unless developers vote to use the newer API version where the behavior is changed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2083643081",
    "pr_number": 58207,
    "pr_file": "src/node_embedding_api.h",
    "created_at": "2025-05-11T23:01:07+00:00",
    "commented_code": "+//\n+// Description: C-based API for embedding Node.js.\n+//\n+// !!! WARNING !!! WARNING !!! WARNING !!!\n+// This is a new API and is subject to change.\n+// While it is C-based, it is not ABI safe yet.\n+// Consider all functions and data structures as experimental.\n+// !!! WARNING !!! WARNING !!! WARNING !!!\n+//\n+// This file contains the C-based API for embedding Node.js in a host\n+// application. The API is designed to be used by applications that want to\n+// embed Node.js as a shared library (.so or .dll) and can interop with\n+// C-based API.\n+//\n+\n+#include \"node.h\"\n+\n+#ifdef _WIN32",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2083643081",
        "repo_full_name": "nodejs/node",
        "pr_number": 58207,
        "pr_file": "src/node_embedding_api.h",
        "discussion_id": "2083643081",
        "commented_code": "@@ -0,0 +1,23 @@\n+//\n+// Description: C-based API for embedding Node.js.\n+//\n+// !!! WARNING !!! WARNING !!! WARNING !!!\n+// This is a new API and is subject to change.\n+// While it is C-based, it is not ABI safe yet.\n+// Consider all functions and data structures as experimental.\n+// !!! WARNING !!! WARNING !!! WARNING !!!\n+//\n+// This file contains the C-based API for embedding Node.js in a host\n+// application. The API is designed to be used by applications that want to\n+// embed Node.js as a shared library (.so or .dll) and can interop with\n+// C-based API.\n+//\n+\n+#include \"node.h\"\n+\n+#ifdef _WIN32",
        "comment_created_at": "2025-05-11T23:01:07+00:00",
        "comment_author": "vmoroz",
        "comment_body": "This header file must follow the design patterns used by Node-API code:\r\n- It must not depend on the `node.h`. The `node.h` is a non-ABI stable C++ API. It should rather depend on the `node-api.h` or `js_native_api.h`.\r\n- For the `__cdecl` there is a macro `NAPI_CDECL`. It must help to avoid the code duplication.\r\n- We must use the `EXTERN_C_START` and `EXTERN_C_END` macros around the declaration of functions to enable that header to be used from C++.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2162857581",
    "pr_number": 58793,
    "pr_file": "test/parallel/test-api-surface.mjs",
    "created_at": "2025-06-24T02:48:26+00:00",
    "commented_code": "+import '../common/index.mjs';\n+import { fileURL } from '../common/fixtures.mjs';\n+\n+import { builtinModules } from 'node:module';\n+import { readFile } from 'node:fs/promises';\n+\n+// TL;DR: If you intentionally changed the public API surface and now this test fails,\n+// please run: ./node tools/update-api-surface-fixture.mjs\n+\n+// This file tests the exposed public API surface against the fixture.\n+// The exported properties are listed in `test/fixtures/apiSurface`.\n+// You can regenerate it using `tools/update-api-surface-fixture.mjs`\n+// The main purpose of this test is to prevent unintentional increasing\n+// of API surface, when something undocumented gets exposed to userland.\n+// The secondary purpose is to help visualizing the observable changes,\n+// which works as reminder to update corresponding docs or tests.\n+// The third purpose is to catch errors such as getters that throw for\n+// any other reason than illegan invocation using prototype and not instance.",
    "repo_full_name": "nodejs/node",
    "discussion_comments": [
      {
        "comment_id": "2162857581",
        "repo_full_name": "nodejs/node",
        "pr_number": 58793,
        "pr_file": "test/parallel/test-api-surface.mjs",
        "discussion_id": "2162857581",
        "commented_code": "@@ -0,0 +1,126 @@\n+import '../common/index.mjs';\n+import { fileURL } from '../common/fixtures.mjs';\n+\n+import { builtinModules } from 'node:module';\n+import { readFile } from 'node:fs/promises';\n+\n+// TL;DR: If you intentionally changed the public API surface and now this test fails,\n+// please run: ./node tools/update-api-surface-fixture.mjs\n+\n+// This file tests the exposed public API surface against the fixture.\n+// The exported properties are listed in `test/fixtures/apiSurface`.\n+// You can regenerate it using `tools/update-api-surface-fixture.mjs`\n+// The main purpose of this test is to prevent unintentional increasing\n+// of API surface, when something undocumented gets exposed to userland.\n+// The secondary purpose is to help visualizing the observable changes,\n+// which works as reminder to update corresponding docs or tests.\n+// The third purpose is to catch errors such as getters that throw for\n+// any other reason than illegan invocation using prototype and not instance.",
        "comment_created_at": "2025-06-24T02:48:26+00:00",
        "comment_author": "jasnell",
        "comment_body": "My fear here is that `apiSurface`, even as a generated file, is likely to become quite massive and difficult to manage. As is we cannot even use the github UI to review it since it says, \"29,926 additions... not shown because the diff is too large...\". Is there any way to break it up further? Maybe generate a set of files rather than one single massive one?",
        "pr_file_module": null
      },
      {
        "comment_id": "2163419028",
        "repo_full_name": "nodejs/node",
        "pr_number": 58793,
        "pr_file": "test/parallel/test-api-surface.mjs",
        "discussion_id": "2162857581",
        "commented_code": "@@ -0,0 +1,126 @@\n+import '../common/index.mjs';\n+import { fileURL } from '../common/fixtures.mjs';\n+\n+import { builtinModules } from 'node:module';\n+import { readFile } from 'node:fs/promises';\n+\n+// TL;DR: If you intentionally changed the public API surface and now this test fails,\n+// please run: ./node tools/update-api-surface-fixture.mjs\n+\n+// This file tests the exposed public API surface against the fixture.\n+// The exported properties are listed in `test/fixtures/apiSurface`.\n+// You can regenerate it using `tools/update-api-surface-fixture.mjs`\n+// The main purpose of this test is to prevent unintentional increasing\n+// of API surface, when something undocumented gets exposed to userland.\n+// The secondary purpose is to help visualizing the observable changes,\n+// which works as reminder to update corresponding docs or tests.\n+// The third purpose is to catch errors such as getters that throw for\n+// any other reason than illegan invocation using prototype and not instance.",
        "comment_created_at": "2025-06-24T09:17:28+00:00",
        "comment_author": "LiviaMedeiros",
        "comment_body": "Agreed. I'd expect the subsequent changes to be small enough for GitHub UI to handle them, but splitting them per-module looks nicer.\r\n```r\r\n$ wc -l test/fixtures/apiSurface/* | sed s#test/fixtures/apiSurface/##\r\n    684 assert\r\n    684 assert-strict\r\n    272 async_hooks\r\n   2110 buffer\r\n    162 child_process\r\n    136 cluster\r\n    386 console\r\n    472 constants\r\n   1428 crypto\r\n    278 dgram\r\n    106 diagnostics_channel\r\n    726 dns\r\n    356 dns-promises\r\n    120 domain\r\n    346 events\r\n   1792 fs\r\n    318 fs-promises\r\n   1156 http\r\n    822 http2\r\n    158 _http_agent\r\n    112 _http_client\r\n    210 _http_common\r\n    113 _http_incoming\r\n    352 _http_outgoing\r\n    224 https\r\n    344 _http_server\r\n    248 inspector\r\n    236 inspector-promises\r\n    506 module\r\n    970 net\r\n     38 node-sea\r\n    226 node-sqlite\r\n    288 node-test\r\n     46 node-test-reporters\r\n    550 os\r\n    303 path\r\n    303 path-posix\r\n    303 path-win32\r\n    454 perf_hooks\r\n    703 process\r\n     62 punycode\r\n     72 querystring\r\n    460 readline\r\n     74 readline-promises\r\n    168 repl\r\n   1821 stream\r\n     32 stream-consumers\r\n     82 _stream_duplex\r\n     11 _stream_passthrough\r\n     22 stream-promises\r\n    314 _stream_readable\r\n     26 _stream_transform\r\n    672 stream-web\r\n     32 _stream_wrap\r\n    197 _stream_writable\r\n     48 string_decoder\r\n   1040 sys\r\n    116 timers\r\n     34 timers-promises\r\n    478 tls\r\n     32 _tls_common\r\n    422 _tls_wrap\r\n     18 trace_events\r\n    124 tty\r\n    390 url\r\n   1040 util\r\n    312 util-types\r\n    456 v8\r\n    116 vm\r\n     30 wasi\r\n    342 worker_threads\r\n    939 zlib\r\n  29023 total\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2164088880",
        "repo_full_name": "nodejs/node",
        "pr_number": 58793,
        "pr_file": "test/parallel/test-api-surface.mjs",
        "discussion_id": "2162857581",
        "commented_code": "@@ -0,0 +1,126 @@\n+import '../common/index.mjs';\n+import { fileURL } from '../common/fixtures.mjs';\n+\n+import { builtinModules } from 'node:module';\n+import { readFile } from 'node:fs/promises';\n+\n+// TL;DR: If you intentionally changed the public API surface and now this test fails,\n+// please run: ./node tools/update-api-surface-fixture.mjs\n+\n+// This file tests the exposed public API surface against the fixture.\n+// The exported properties are listed in `test/fixtures/apiSurface`.\n+// You can regenerate it using `tools/update-api-surface-fixture.mjs`\n+// The main purpose of this test is to prevent unintentional increasing\n+// of API surface, when something undocumented gets exposed to userland.\n+// The secondary purpose is to help visualizing the observable changes,\n+// which works as reminder to update corresponding docs or tests.\n+// The third purpose is to catch errors such as getters that throw for\n+// any other reason than illegan invocation using prototype and not instance.",
        "comment_created_at": "2025-06-24T13:56:59+00:00",
        "comment_author": "Ethan-Arrowood",
        "comment_body": "This is a great call out. I definitely think from a security standpoint we need to be able to human-review all files in the repo efficiently. ",
        "pr_file_module": null
      }
    ]
  }
]