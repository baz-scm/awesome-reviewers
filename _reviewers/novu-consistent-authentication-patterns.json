[
  {
    "discussion_id": "2091143665",
    "pr_number": 8312,
    "pr_file": "apps/api/src/app/auth/framework/auth.decorator.ts",
    "created_at": "2025-05-15T13:12:28+00:00",
    "commented_code": "+import { ApiBearerAuth } from '@nestjs/swagger';\n+import { applyDecorators, UseGuards } from '@nestjs/common';\n+import { BEARER_SWAGGER_SECURITY_NAME } from '@novu/application-generic';\n+import { isClerkEnabled } from '@novu/shared';\n+import { CommunityUserAuthGuard } from './community.user.auth.guard';\n+\n+export function RequireAuthentication() {\n+  if (isClerkEnabled()) {\n+    const { EEUserAuthGuard, EEPermissionsGuard } = require('@novu/ee-auth');\n+\n+    return applyDecorators(UseGuards(EEUserAuthGuard, EEPermissionsGuard), ApiBearerAuth(BEARER_SWAGGER_SECURITY_NAME));\n+  }\n+\n+  return applyDecorators(UseGuards(CommunityUserAuthGuard), ApiBearerAuth(BEARER_SWAGGER_SECURITY_NAME));\n+}",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2091143665",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8312,
        "pr_file": "apps/api/src/app/auth/framework/auth.decorator.ts",
        "discussion_id": "2091143665",
        "commented_code": "@@ -0,0 +1,15 @@\n+import { ApiBearerAuth } from '@nestjs/swagger';\n+import { applyDecorators, UseGuards } from '@nestjs/common';\n+import { BEARER_SWAGGER_SECURITY_NAME } from '@novu/application-generic';\n+import { isClerkEnabled } from '@novu/shared';\n+import { CommunityUserAuthGuard } from './community.user.auth.guard';\n+\n+export function RequireAuthentication() {\n+  if (isClerkEnabled()) {\n+    const { EEUserAuthGuard, EEPermissionsGuard } = require('@novu/ee-auth');\n+\n+    return applyDecorators(UseGuards(EEUserAuthGuard, EEPermissionsGuard), ApiBearerAuth(BEARER_SWAGGER_SECURITY_NAME));\n+  }\n+\n+  return applyDecorators(UseGuards(CommunityUserAuthGuard), ApiBearerAuth(BEARER_SWAGGER_SECURITY_NAME));\n+}",
        "comment_created_at": "2025-05-15T13:12:28+00:00",
        "comment_author": "ChmaraX",
        "comment_body": "The `PermissionGuard` is always paired with `UserGuard`.\r\n\r\n- `PermissionGuard` \u2192 requires `UserGuard` (it decodes the JWT and supplies the permissions)\r\n- `UserGuard` \u2192 does **not** automatically require `PermissionGuard`\r\n\r\nFor authenticated routes that **don\u2019t** need permission checks, add the `@SkipPermissionsCheck()` decorator.  \r\nThis keeps the code **concise** and follows the principle of least privilege.\r\n\r\nManually applying `PermissionGuard` to each route would be verbose and error-prone, easy to forget and accidentally leave an endpoint unprotected.\r\n\r\nIdeally, both guards would be globally registered, and unauthenticated routes (e.g., webhooks) would be marked with `@PublicEndpoint`.  \r\nBut that\u2019s a story for another day.\r\n\r\nNote: `@RequireAuthentication()` decorator is and should be the only way how to protect the endpoint for consistency.  ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091153634",
    "pr_number": 8312,
    "pr_file": "apps/api/src/app/environments-v1/environments-v1.controller.ts",
    "created_at": "2025-05-15T13:17:06+00:00",
    "commented_code": "@ApiResponse(EnvironmentResponseDto, 200, true)\n   @ExternalApiAccessible()\n   @ApiExcludeEndpoint()\n+  @SkipPermissionsCheck()\n   async listMyEnvironments(@UserSession() user: UserSessionData): Promise<EnvironmentResponseDto[]> {\n     return await this.getMyEnvironmentsUsecase.execute(\n       GetMyEnvironmentsCommand.create({\n         organizationId: user.organizationId,\n         environmentId: user.environmentId,\n-        includeAllApiKeys: user.scheme === ApiAuthSchemeEnum.BEARER,\n+        returnApiKeys: user.permissions.includes(PermissionsEnum.API_KEY_READ),",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2091153634",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8312,
        "pr_file": "apps/api/src/app/environments-v1/environments-v1.controller.ts",
        "discussion_id": "2091153634",
        "commented_code": "@@ -107,12 +106,13 @@ export class EnvironmentsControllerV1 {\n   @ApiResponse(EnvironmentResponseDto, 200, true)\n   @ExternalApiAccessible()\n   @ApiExcludeEndpoint()\n+  @SkipPermissionsCheck()\n   async listMyEnvironments(@UserSession() user: UserSessionData): Promise<EnvironmentResponseDto[]> {\n     return await this.getMyEnvironmentsUsecase.execute(\n       GetMyEnvironmentsCommand.create({\n         organizationId: user.organizationId,\n         environmentId: user.environmentId,\n-        includeAllApiKeys: user.scheme === ApiAuthSchemeEnum.BEARER,\n+        returnApiKeys: user.permissions.includes(PermissionsEnum.API_KEY_READ),",
        "comment_created_at": "2025-05-15T13:17:06+00:00",
        "comment_author": "ChmaraX",
        "comment_body": "Every role needs to see environments for dashboard to be working correctly but only owner/admin should be able to see API keys but this needed to be done in backwards compatible way. \r\n\r\nWe should create the v2 version of this controller.",
        "pr_file_module": null
      },
      {
        "comment_id": "2091384246",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8312,
        "pr_file": "apps/api/src/app/environments-v1/environments-v1.controller.ts",
        "discussion_id": "2091153634",
        "commented_code": "@@ -107,12 +106,13 @@ export class EnvironmentsControllerV1 {\n   @ApiResponse(EnvironmentResponseDto, 200, true)\n   @ExternalApiAccessible()\n   @ApiExcludeEndpoint()\n+  @SkipPermissionsCheck()\n   async listMyEnvironments(@UserSession() user: UserSessionData): Promise<EnvironmentResponseDto[]> {\n     return await this.getMyEnvironmentsUsecase.execute(\n       GetMyEnvironmentsCommand.create({\n         organizationId: user.organizationId,\n         environmentId: user.environmentId,\n-        includeAllApiKeys: user.scheme === ApiAuthSchemeEnum.BEARER,\n+        returnApiKeys: user.permissions.includes(PermissionsEnum.API_KEY_READ),",
        "comment_created_at": "2025-05-15T14:53:54+00:00",
        "comment_author": "LetItRock",
        "comment_body": "should we feature flag this?",
        "pr_file_module": null
      }
    ]
  }
]