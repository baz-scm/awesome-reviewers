[
  {
    "discussion_id": "2161852941",
    "pr_number": 8557,
    "pr_file": "apps/dashboard/src/components/workflow-editor/steps/email/translations/translation-decorator.tsx",
    "created_at": "2025-06-23T15:04:03+00:00",
    "commented_code": "import { InlineDecoratorExtension, getInlineDecoratorSuggestionsReact } from '@maily-to/core/extensions';\n-import { TRANSLATION_KEYS, TRANSLATION_TRIGGER } from './translation-keys';\n+import { TRANSLATION_KEYS } from './translation-keys';\n import { TranslationPill } from './translation-pill';\n import { AnyExtension } from '@tiptap/core';\n+import { TRANSLATION_KEY_SINGLE_REGEX } from '@novu/shared';\n+\n+const TRANSLATION_TRIGGER = '{t.';",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2161852941",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8557,
        "pr_file": "apps/dashboard/src/components/workflow-editor/steps/email/translations/translation-decorator.tsx",
        "discussion_id": "2161852941",
        "commented_code": "@@ -1,7 +1,10 @@\n import { InlineDecoratorExtension, getInlineDecoratorSuggestionsReact } from '@maily-to/core/extensions';\n-import { TRANSLATION_KEYS, TRANSLATION_TRIGGER } from './translation-keys';\n+import { TRANSLATION_KEYS } from './translation-keys';\n import { TranslationPill } from './translation-pill';\n import { AnyExtension } from '@tiptap/core';\n+import { TRANSLATION_KEY_SINGLE_REGEX } from '@novu/shared';\n+\n+const TRANSLATION_TRIGGER = '{t.';",
        "comment_created_at": "2025-06-23T15:04:03+00:00",
        "comment_author": "scopsy",
        "comment_body": "I guess we don't want to do {{t. to avoid the duplication? @twentyone24 any thought on this? I'm just concerned with discoverability of the trigger for this \ud83e\udd14 ",
        "pr_file_module": null
      },
      {
        "comment_id": "2161891657",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8557,
        "pr_file": "apps/dashboard/src/components/workflow-editor/steps/email/translations/translation-decorator.tsx",
        "discussion_id": "2161852941",
        "commented_code": "@@ -1,7 +1,10 @@\n import { InlineDecoratorExtension, getInlineDecoratorSuggestionsReact } from '@maily-to/core/extensions';\n-import { TRANSLATION_KEYS, TRANSLATION_TRIGGER } from './translation-keys';\n+import { TRANSLATION_KEYS } from './translation-keys';\n import { TranslationPill } from './translation-pill';\n import { AnyExtension } from '@tiptap/core';\n+import { TRANSLATION_KEY_SINGLE_REGEX } from '@novu/shared';\n+\n+const TRANSLATION_TRIGGER = '{t.';",
        "comment_created_at": "2025-06-23T15:22:52+00:00",
        "comment_author": "ChmaraX",
        "comment_body": "I had it as `{{t.` originally, but then the AJV schema validation was treating `{{t.key}}` as variables and generated issues etc, and it was too much hassle and ugly exceptions to exclude that. \r\n\r\nThe trigger can be technically anything but the final inserted format should be ideally different than `{{ ... }}`. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2083948963",
    "pr_number": 8278,
    "pr_file": "apps/dashboard/src/components/inbox-button.tsx",
    "created_at": "2025-05-12T06:53:58+00:00",
    "commented_code": "return (\n     <Inbox\n-      subscriberId={user.externalId ?? ''}\n+      subscriberId={`org_${currentOrganization?._id ?? ''}:user_${user.externalId ?? ''}`}",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2083948963",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8278,
        "pr_file": "apps/dashboard/src/components/inbox-button.tsx",
        "discussion_id": "2083948963",
        "commented_code": "@@ -108,7 +110,7 @@ export const InboxButton = () => {\n \n   return (\n     <Inbox\n-      subscriberId={user.externalId ?? ''}\n+      subscriberId={`org_${currentOrganization?._id ?? ''}:user_${user.externalId ?? ''}`}",
        "comment_created_at": "2025-05-12T06:53:58+00:00",
        "comment_author": "scopsy",
        "comment_body": "```suggestion\r\n      subscriberId={`org_${currentOrganization._id}:user_${user.externalId}`}\r\n```\r\n\r\nyou can add the currentOrganization to the `if` statement on line 93. we cannot generate a subscriber if it doesn't have the proper values. \r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2036708449",
    "pr_number": 8097,
    "pr_file": "apps/dashboard/src/components/variable/utils/digest-variables.tsx",
    "created_at": "2025-04-10T07:39:10+00:00",
    "commented_code": "+import { createRoot } from 'react-dom/client';\n+import { LiquidVariable } from '../../../utils/parseStepVariables';\n+import { DigestCountSummaryPreview } from '@/components/variable/components/digest-count-summary-preview';\n+import { DigestSentenceSummaryPreview } from '@/components/variable/components/digest-sentence-summary-preview';\n+\n+enum DIGEST_VARIABLES_ENUM {\n+  COUNT_SUMMARY = 'step.digest.countSummary',\n+  SENTENCE_SUMMARY = 'step.digest.sentenceSummary',\n+}\n+\n+export const DIGEST_VARIABLES: LiquidVariable[] = [\n+  {\n+    label: DIGEST_VARIABLES_ENUM.COUNT_SUMMARY,\n+    type: 'digest',\n+    boost: 99,\n+    info: () => {\n+      const dom = createInfoPanel({ component: <DigestCountSummaryPreview /> });\n+      return {\n+        dom,\n+        destroy: () => {\n+          dom.remove();\n+        },\n+      };\n+    },\n+  },\n+  {\n+    label: DIGEST_VARIABLES_ENUM.SENTENCE_SUMMARY,\n+    type: 'digest',\n+    boost: 98,\n+    info: () => {\n+      const dom = createInfoPanel({ component: <DigestSentenceSummaryPreview /> });\n+      return {\n+        dom,\n+        destroy: () => {\n+          dom.remove();\n+        },\n+      };\n+    },\n+  },\n+];\n+\n+/**\n+ * Create a DOM element to render the info panel in Codemirror.\n+ */\n+const createInfoPanel = ({ component }: { component: React.ReactNode }) => {\n+  const dom = document.createElement('div');\n+  createRoot(dom).render(component);\n+  return dom;\n+};\n+\n+export const DIGEST_PREVIEW_MAP = {\n+  [DIGEST_VARIABLES_ENUM.COUNT_SUMMARY]: <DigestCountSummaryPreview />,\n+  [DIGEST_VARIABLES_ENUM.SENTENCE_SUMMARY]: <DigestSentenceSummaryPreview />,\n+} as const;\n+\n+export const DIGEST_VARIABLES_VALUE_ROOT_PATHS = ['step.digest.eventCount', 'step.digest.events'] as const;\n+export const DIGEST_VARIABLES_VALUE_MAP = {\n+  [DIGEST_VARIABLES_ENUM.COUNT_SUMMARY]: 'step.digest.eventCount | pluralize: \"notification\", \"notifications\"',\n+  [DIGEST_VARIABLES_ENUM.SENTENCE_SUMMARY]: 'step.digest.events | toSentence: \"\", 2, \"others\"',\n+} as const;",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2036708449",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8097,
        "pr_file": "apps/dashboard/src/components/variable/utils/digest-variables.tsx",
        "discussion_id": "2036708449",
        "commented_code": "@@ -0,0 +1,60 @@\n+import { createRoot } from 'react-dom/client';\n+import { LiquidVariable } from '../../../utils/parseStepVariables';\n+import { DigestCountSummaryPreview } from '@/components/variable/components/digest-count-summary-preview';\n+import { DigestSentenceSummaryPreview } from '@/components/variable/components/digest-sentence-summary-preview';\n+\n+enum DIGEST_VARIABLES_ENUM {\n+  COUNT_SUMMARY = 'step.digest.countSummary',\n+  SENTENCE_SUMMARY = 'step.digest.sentenceSummary',\n+}\n+\n+export const DIGEST_VARIABLES: LiquidVariable[] = [\n+  {\n+    label: DIGEST_VARIABLES_ENUM.COUNT_SUMMARY,\n+    type: 'digest',\n+    boost: 99,\n+    info: () => {\n+      const dom = createInfoPanel({ component: <DigestCountSummaryPreview /> });\n+      return {\n+        dom,\n+        destroy: () => {\n+          dom.remove();\n+        },\n+      };\n+    },\n+  },\n+  {\n+    label: DIGEST_VARIABLES_ENUM.SENTENCE_SUMMARY,\n+    type: 'digest',\n+    boost: 98,\n+    info: () => {\n+      const dom = createInfoPanel({ component: <DigestSentenceSummaryPreview /> });\n+      return {\n+        dom,\n+        destroy: () => {\n+          dom.remove();\n+        },\n+      };\n+    },\n+  },\n+];\n+\n+/**\n+ * Create a DOM element to render the info panel in Codemirror.\n+ */\n+const createInfoPanel = ({ component }: { component: React.ReactNode }) => {\n+  const dom = document.createElement('div');\n+  createRoot(dom).render(component);\n+  return dom;\n+};\n+\n+export const DIGEST_PREVIEW_MAP = {\n+  [DIGEST_VARIABLES_ENUM.COUNT_SUMMARY]: <DigestCountSummaryPreview />,\n+  [DIGEST_VARIABLES_ENUM.SENTENCE_SUMMARY]: <DigestSentenceSummaryPreview />,\n+} as const;\n+\n+export const DIGEST_VARIABLES_VALUE_ROOT_PATHS = ['step.digest.eventCount', 'step.digest.events'] as const;\n+export const DIGEST_VARIABLES_VALUE_MAP = {\n+  [DIGEST_VARIABLES_ENUM.COUNT_SUMMARY]: 'step.digest.eventCount | pluralize: \"notification\", \"notifications\"',\n+  [DIGEST_VARIABLES_ENUM.SENTENCE_SUMMARY]: 'step.digest.events | toSentence: \"\", 2, \"others\"',\n+} as const;",
        "comment_created_at": "2025-04-10T07:39:10+00:00",
        "comment_author": "LetItRock",
        "comment_body": "all these variables should be dynamic, check the comment here: https://github.com/novuhq/novu/pull/8097/files#r2034847509\r\n\r\nalso the name should start with `steps.X.eventCount` or `steps.X.events` --> `steps` not `step`",
        "pr_file_module": null
      }
    ]
  }
]