[
  {
    "discussion_id": "2294042329",
    "pr_number": 8983,
    "pr_file": "packages/js/src/ui/components/Notification/DefaultNotification.tsx",
    "created_at": "2025-08-22T15:24:48+00:00",
    "commented_code": "'nt-bg-severity-low-alpha-100 hover:nt-bg-severity-low-alpha-50':\n               props.notification.severity === SeverityLevelEnum.LOW,\n           }\n-        )\n-      )}\n+        ),\n+        context: { notification: props.notification } satisfies Parameters<AppearanceCallback['notification']>[0],",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2294042329",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8983,
        "pr_file": "packages/js/src/ui/components/Notification/DefaultNotification.tsx",
        "discussion_id": "2294042329",
        "commented_code": "@@ -140,22 +145,23 @@ export const DefaultNotification = (props: DefaultNotificationProps) => {\n             'nt-bg-severity-low-alpha-100 hover:nt-bg-severity-low-alpha-50':\n               props.notification.severity === SeverityLevelEnum.LOW,\n           }\n-        )\n-      )}\n+        ),\n+        context: { notification: props.notification } satisfies Parameters<AppearanceCallback['notification']>[0],",
        "comment_created_at": "2025-08-22T15:24:48+00:00",
        "comment_author": "LetItRock",
        "comment_body": "now we can pass the `context` argument to that will be called with the appearance key callback function",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2077909732",
    "pr_number": 8262,
    "pr_file": "packages/js/src/ui/novuUI.tsx",
    "created_at": "2025-05-07T15:21:29+00:00",
    "commented_code": "this.#predefinedNovu = props.novu;\n     this.#preferencesFilter = preferencesFilter;\n     this.#setPreferencesFilter = setPreferencesFilter;\n+    this.#containerElement = containerElement;\n+    this.#setContainerElement = setContainerElement;\n \n     this.#mountComponentRenderer();\n   }\n \n+  #getContainerElement(containerElement?: Node | string | null): Node | null | undefined {\n+    if (containerElement === null || containerElement === undefined) {\n+      return containerElement;\n+    }\n+\n+    if (typeof containerElement === 'string') {\n+      return document.querySelector(containerElement) ?? document.getElementById(containerElement);\n+    }",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2077909732",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8262,
        "pr_file": "packages/js/src/ui/novuUI.tsx",
        "discussion_id": "2077909732",
        "commented_code": "@@ -59,18 +62,40 @@ export class NovuUI {\n     this.#predefinedNovu = props.novu;\n     this.#preferencesFilter = preferencesFilter;\n     this.#setPreferencesFilter = setPreferencesFilter;\n+    this.#containerElement = containerElement;\n+    this.#setContainerElement = setContainerElement;\n \n     this.#mountComponentRenderer();\n   }\n \n+  #getContainerElement(containerElement?: Node | string | null): Node | null | undefined {\n+    if (containerElement === null || containerElement === undefined) {\n+      return containerElement;\n+    }\n+\n+    if (typeof containerElement === 'string') {\n+      return document.querySelector(containerElement) ?? document.getElementById(containerElement);\n+    }",
        "comment_created_at": "2025-05-07T15:21:29+00:00",
        "comment_author": "LetItRock",
        "comment_body": "if the `containerElement` is CSS selector then try to find elements",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2064138192",
    "pr_number": 8225,
    "pr_file": "apps/dashboard/src/components/workflow-editor/steps/email/maily-config.tsx",
    "created_at": "2025-04-28T17:19:57+00:00",
    "commented_code": "});\n       },\n     }),\n+    ButtonExtension.extend({\n+      addAttributes() {\n+        const attributes = this.parent?.();\n+\n+        if (!isEnhancedDigestEnabled) {\n+          return {\n+            ...attributes,\n+          };\n+        }\n+\n+        return {\n+          ...attributes,\n+          aliasFor: {\n+            default: null,\n+          },\n+        };\n+      },\n+\n+      addCommands() {\n+        const commands = this.parent?.();\n+        const editor = this.editor;\n+\n+        if (!commands) return {};\n+\n+        return {\n+          ...commands,\n+          updateButton: (attrs) => {\n+            const { text, url, isTextVariable, isUrlVariable } = attrs;\n+\n+            if (isEnhancedDigestEnabled && (isTextVariable || isUrlVariable)) {\n+              const aliasFor = resolveRepeatBlockAlias(\n+                isTextVariable ? (text ?? '') : (url ?? ''),\n+                editor,\n+                isEnhancedDigestEnabled\n+              );\n+              return commands.updateButton?.({ ...attrs, aliasFor: aliasFor ?? null });\n+            }",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2064138192",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8225,
        "pr_file": "apps/dashboard/src/components/workflow-editor/steps/email/maily-config.tsx",
        "discussion_id": "2064138192",
        "commented_code": "@@ -234,5 +244,48 @@ export const createExtensions = (props: {\n         });\n       },\n     }),\n+    ButtonExtension.extend({\n+      addAttributes() {\n+        const attributes = this.parent?.();\n+\n+        if (!isEnhancedDigestEnabled) {\n+          return {\n+            ...attributes,\n+          };\n+        }\n+\n+        return {\n+          ...attributes,\n+          aliasFor: {\n+            default: null,\n+          },\n+        };\n+      },\n+\n+      addCommands() {\n+        const commands = this.parent?.();\n+        const editor = this.editor;\n+\n+        if (!commands) return {};\n+\n+        return {\n+          ...commands,\n+          updateButton: (attrs) => {\n+            const { text, url, isTextVariable, isUrlVariable } = attrs;\n+\n+            if (isEnhancedDigestEnabled && (isTextVariable || isUrlVariable)) {\n+              const aliasFor = resolveRepeatBlockAlias(\n+                isTextVariable ? (text ?? '') : (url ?? ''),\n+                editor,\n+                isEnhancedDigestEnabled\n+              );\n+              return commands.updateButton?.({ ...attrs, aliasFor: aliasFor ?? null });\n+            }",
        "comment_created_at": "2025-04-28T17:19:57+00:00",
        "comment_author": "LetItRock",
        "comment_body": "calculate the `aliasFor` for the text or url buttons that are variables ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2050494470",
    "pr_number": 8160,
    "pr_file": "apps/dashboard/src/components/conditions-editor/variable-select.tsx",
    "created_at": "2025-04-18T11:07:21+00:00",
    "commented_code": "value?: string;\n   options: Array<{ label: string; value: string }>;\n   onChange: (value: string) => void;\n+  onInputChange?: (value: string) => void;",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2050494470",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8160,
        "pr_file": "apps/dashboard/src/components/conditions-editor/variable-select.tsx",
        "discussion_id": "2050494470",
        "commented_code": "@@ -11,6 +11,7 @@ type VariableSelectProps = Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> & {\n   value?: string;\n   options: Array<{ label: string; value: string }>;\n   onChange: (value: string) => void;\n+  onInputChange?: (value: string) => void;",
        "comment_created_at": "2025-04-18T11:07:21+00:00",
        "comment_author": "LetItRock",
        "comment_body": "allow listening on input change; the `onChange` is called when the item is picked from the dropdown ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2047713086",
    "pr_number": 8147,
    "pr_file": "apps/dashboard/src/components/variable/components/reorder-filter-item.tsx",
    "created_at": "2025-04-16T20:37:51+00:00",
    "commented_code": "-import { Button } from '@/components/primitives/button';\n+import { ComponentProps, useMemo, useRef } from 'react';\n+import { Code2, GripVertical } from 'lucide-react';\n+import { Reorder, useDragControls, useMotionValue } from 'motion/react';\n+import { RiCloseLine, RiQuestionLine } from 'react-icons/ri';\n+import { FeatureFlagsKeysEnum } from '@novu/shared';\n+\n+import { buttonVariants } from '@/components/primitives/button';\n import { FilterWithParam } from '../types';\n-import { InputPure } from '@/components/primitives/input';\n+import { Input } from '@/components/primitives/input';\n import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/primitives/tooltip';\n-import { GripVertical } from 'lucide-react';\n-import { Reorder } from 'motion/react';\n-import { ComponentProps, useMemo } from 'react';\n-import { RiCloseLine } from 'react-icons/ri';\n import { getFilters } from '../constants';\n import { useFeatureFlag } from '@/hooks/use-feature-flag';\n-import { FeatureFlagsKeysEnum } from '@novu/shared';\n+import { AccordionContent } from '@/components/primitives/accordion';\n+import { AccordionTrigger } from '@/components/primitives/accordion';\n+import { AccordionItem } from '@/components/primitives/accordion';\n+import { Accordion } from '@/components/primitives/accordion';\n+import { cn } from '@/utils/ui';\n+import { VariableSelect } from '@/components/conditions-editor/variable-select';\n+import { LiquidVariable } from '@/utils/parseStepVariables';\n+\n+const preventClick = (e: React.MouseEvent) => {\n+  e.stopPropagation();\n+  e.preventDefault();\n+};\n \n type ReorderFilterItemProps = ComponentProps<typeof Reorder.Item<FilterWithParam>> & {\n   index: number;\n   isLast: boolean;\n+  variableName: string;\n+  variables: LiquidVariable[];\n   onRemove: (value: string) => void;\n   onParamChange: (index: number, params: string[]) => void;\n };\n \n export const ReorderFilterItem = (props: ReorderFilterItemProps) => {\n-  const { index, isLast, onRemove, onParamChange, value, ...rest } = props;\n+  const controls = useDragControls();\n+  const x = useMotionValue(0);\n+  const { index, isLast, onRemove, onParamChange, value, variableName, variables, ...rest } = props;\n   const isEnhancedDigestEnabled = useFeatureFlag(FeatureFlagsKeysEnum.IS_ENHANCED_DIGEST_ENABLED);\n   const liquidFilters = useMemo(() => getFilters(isEnhancedDigestEnabled), [isEnhancedDigestEnabled]);\n+  const itemRef = useRef<HTMLDivElement>(null);\n \n   const filterDef = liquidFilters.find((t) => t.value === value.value);\n+  const hasParams = filterDef?.hasParam && filterDef.params;\n+\n+  const options = useMemo(() => {\n+    // if it's digest step events variable then fill the options with the payload variables\n+    if (variableName.match(/^steps\\..+\\.events$/)) {\n+      return variables.filter((v) => v.name.startsWith('payload')).map((v) => ({ label: v.name, value: v.name }));\n+    }\n+\n+    return [];\n+  }, [variableName, variables]);",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2047713086",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8147,
        "pr_file": "apps/dashboard/src/components/variable/components/reorder-filter-item.tsx",
        "discussion_id": "2047713086",
        "commented_code": "@@ -1,80 +1,182 @@\n-import { Button } from '@/components/primitives/button';\n+import { ComponentProps, useMemo, useRef } from 'react';\n+import { Code2, GripVertical } from 'lucide-react';\n+import { Reorder, useDragControls, useMotionValue } from 'motion/react';\n+import { RiCloseLine, RiQuestionLine } from 'react-icons/ri';\n+import { FeatureFlagsKeysEnum } from '@novu/shared';\n+\n+import { buttonVariants } from '@/components/primitives/button';\n import { FilterWithParam } from '../types';\n-import { InputPure } from '@/components/primitives/input';\n+import { Input } from '@/components/primitives/input';\n import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/primitives/tooltip';\n-import { GripVertical } from 'lucide-react';\n-import { Reorder } from 'motion/react';\n-import { ComponentProps, useMemo } from 'react';\n-import { RiCloseLine } from 'react-icons/ri';\n import { getFilters } from '../constants';\n import { useFeatureFlag } from '@/hooks/use-feature-flag';\n-import { FeatureFlagsKeysEnum } from '@novu/shared';\n+import { AccordionContent } from '@/components/primitives/accordion';\n+import { AccordionTrigger } from '@/components/primitives/accordion';\n+import { AccordionItem } from '@/components/primitives/accordion';\n+import { Accordion } from '@/components/primitives/accordion';\n+import { cn } from '@/utils/ui';\n+import { VariableSelect } from '@/components/conditions-editor/variable-select';\n+import { LiquidVariable } from '@/utils/parseStepVariables';\n+\n+const preventClick = (e: React.MouseEvent) => {\n+  e.stopPropagation();\n+  e.preventDefault();\n+};\n \n type ReorderFilterItemProps = ComponentProps<typeof Reorder.Item<FilterWithParam>> & {\n   index: number;\n   isLast: boolean;\n+  variableName: string;\n+  variables: LiquidVariable[];\n   onRemove: (value: string) => void;\n   onParamChange: (index: number, params: string[]) => void;\n };\n \n export const ReorderFilterItem = (props: ReorderFilterItemProps) => {\n-  const { index, isLast, onRemove, onParamChange, value, ...rest } = props;\n+  const controls = useDragControls();\n+  const x = useMotionValue(0);\n+  const { index, isLast, onRemove, onParamChange, value, variableName, variables, ...rest } = props;\n   const isEnhancedDigestEnabled = useFeatureFlag(FeatureFlagsKeysEnum.IS_ENHANCED_DIGEST_ENABLED);\n   const liquidFilters = useMemo(() => getFilters(isEnhancedDigestEnabled), [isEnhancedDigestEnabled]);\n+  const itemRef = useRef<HTMLDivElement>(null);\n \n   const filterDef = liquidFilters.find((t) => t.value === value.value);\n+  const hasParams = filterDef?.hasParam && filterDef.params;\n+\n+  const options = useMemo(() => {\n+    // if it's digest step events variable then fill the options with the payload variables\n+    if (variableName.match(/^steps\\..+\\.events$/)) {\n+      return variables.filter((v) => v.name.startsWith('payload')).map((v) => ({ label: v.name, value: v.name }));\n+    }\n+\n+    return [];\n+  }, [variableName, variables]);",
        "comment_created_at": "2025-04-16T20:37:51+00:00",
        "comment_author": "LetItRock",
        "comment_body": "Create the options for the `toSentence` filter key path component when it's used under the `steps.x.events` variable.",
        "pr_file_module": null
      }
    ]
  }
]