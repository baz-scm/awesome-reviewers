[
  {
    "discussion_id": "1977517133",
    "pr_number": 7475,
    "pr_file": "packages/framework/src/utils/options.utils.ts",
    "created_at": "2025-03-03T13:27:13+00:00",
    "commented_code": "export function resolveSecretKey(providedSecretKey?: string): string {\n   return providedSecretKey || process.env.NOVU_SECRET_KEY || process.env.NOVU_API_KEY || '';\n }\n+\n+export function resolveLogging(providedLogging?: boolean): boolean {\n+  if (providedLogging !== undefined) {\n+    return providedLogging;\n+  }\n+  if (process.env.NOVU_LOGGING !== undefined) {\n+    return process.env.NOVU_LOGGING === 'true';\n+  }\n+\n+  // Disable verbose logging in test and production environments\n+  return !['test', 'production'].includes(process.env.NODE_ENV);",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "1977517133",
        "repo_full_name": "novuhq/novu",
        "pr_number": 7475,
        "pr_file": "packages/framework/src/utils/options.utils.ts",
        "discussion_id": "1977517133",
        "commented_code": "@@ -5,3 +5,15 @@ export function resolveApiUrl(providedApiUrl?: string): string {\n export function resolveSecretKey(providedSecretKey?: string): string {\n   return providedSecretKey || process.env.NOVU_SECRET_KEY || process.env.NOVU_API_KEY || '';\n }\n+\n+export function resolveLogging(providedLogging?: boolean): boolean {\n+  if (providedLogging !== undefined) {\n+    return providedLogging;\n+  }\n+  if (process.env.NOVU_LOGGING !== undefined) {\n+    return process.env.NOVU_LOGGING === 'true';\n+  }\n+\n+  // Disable verbose logging in test and production environments\n+  return !['test', 'production'].includes(process.env.NODE_ENV);",
        "comment_created_at": "2025-03-03T13:27:13+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "Love it! \r\nBut can't we reuse NOVU_LOGGING to toggle this? so for test and prod it will be false, but in case we want to debug some edge cases, we could turn it on in prod. \r\nin addition, we could use more specific env variables so they won't collide in the future in any way FRAMEWORK_LOGGING, although it should not be an issue.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2156722614",
    "pr_number": 8553,
    "pr_file": "apps/api/src/config/env.validators.ts",
    "created_at": "2025-06-19T10:56:25+00:00",
    "commented_code": "VERCEL_REDIRECT_URI: url({ default: 'https://dashboard.novu.co/auth/login' }),\n     VERCEL_BASE_URL: url({ default: 'https://api.vercel.com' }),\n   }),\n+\n+  CLICK_HOUSE_URL: str({ default: 'http://127.0.0.1:8123' }),\n+  CLICK_HOUSE_DATABASE: str({ default: 'default' }),\n+  CLICK_HOUSE_USER: str({ default: 'default' }),\n+  CLICK_HOUSE_PASSWORD: str({ default: '' }),",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2156722614",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8553,
        "pr_file": "apps/api/src/config/env.validators.ts",
        "discussion_id": "2156722614",
        "commented_code": "@@ -101,4 +101,9 @@ export const envValidators = {\n     VERCEL_REDIRECT_URI: url({ default: 'https://dashboard.novu.co/auth/login' }),\n     VERCEL_BASE_URL: url({ default: 'https://api.vercel.com' }),\n   }),\n+\n+  CLICK_HOUSE_URL: str({ default: 'http://127.0.0.1:8123' }),\n+  CLICK_HOUSE_DATABASE: str({ default: 'default' }),\n+  CLICK_HOUSE_USER: str({ default: 'default' }),\n+  CLICK_HOUSE_PASSWORD: str({ default: '' }),",
        "comment_created_at": "2025-06-19T10:56:25+00:00",
        "comment_author": "scopsy",
        "comment_body": "As this serbvice is optiona, maybe we should not add the defaults and allow an empty string and avoid the initializaiton of clickhouse client? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2156777633",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8553,
        "pr_file": "apps/api/src/config/env.validators.ts",
        "discussion_id": "2156722614",
        "commented_code": "@@ -101,4 +101,9 @@ export const envValidators = {\n     VERCEL_REDIRECT_URI: url({ default: 'https://dashboard.novu.co/auth/login' }),\n     VERCEL_BASE_URL: url({ default: 'https://api.vercel.com' }),\n   }),\n+\n+  CLICK_HOUSE_URL: str({ default: 'http://127.0.0.1:8123' }),\n+  CLICK_HOUSE_DATABASE: str({ default: 'default' }),\n+  CLICK_HOUSE_USER: str({ default: 'default' }),\n+  CLICK_HOUSE_PASSWORD: str({ default: '' }),",
        "comment_created_at": "2025-06-19T11:31:06+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "Good point. If the service is optional, let\u2019s make the following adjustment:\r\nFor Novu-hosted environments, we\u2019ll enforce strict env validation.\r\nFor the community version, if any configuration is missing, we\u2019ll gracefully bootstrap the app without click house and log a clear message indicating which environment variables are missing.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1763084305",
    "pr_number": 6489,
    "pr_file": "apps/api/src/app/events/usecases/parse-event-request/parse-event-request.usecase.ts",
    "created_at": "2024-09-17T11:40:05+00:00",
    "commented_code": "transactionId,\n     };\n \n-    await this.workflowQueueService.add({ name: transactionId, data: jobData, groupId: command.organizationId });\n+    const options = command.priority ? { priority: command.priority } : {};",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "1763084305",
        "repo_full_name": "novuhq/novu",
        "pr_number": 6489,
        "pr_file": "apps/api/src/app/events/usecases/parse-event-request/parse-event-request.usecase.ts",
        "discussion_id": "1763084305",
        "commented_code": "@@ -137,7 +137,14 @@ export class ParseEventRequest {\n       transactionId,\n     };\n \n-    await this.workflowQueueService.add({ name: transactionId, data: jobData, groupId: command.organizationId });\n+    const options = command.priority ? { priority: command.priority } : {};",
        "comment_created_at": "2024-09-17T11:40:05+00:00",
        "comment_author": "SokratisVidros",
        "comment_body": "Leveraging BullMQ priorities makes sense in a self hosted setup but not in a cloud deployment as jobs are multiplexed across different organizations.\r\n\r\nI suggest adding a `if (process.env.IS_DOCKER_HOSTED === 'true') {` check before passing the priority option.",
        "pr_file_module": null
      },
      {
        "comment_id": "1764032986",
        "repo_full_name": "novuhq/novu",
        "pr_number": 6489,
        "pr_file": "apps/api/src/app/events/usecases/parse-event-request/parse-event-request.usecase.ts",
        "discussion_id": "1763084305",
        "commented_code": "@@ -137,7 +137,14 @@ export class ParseEventRequest {\n       transactionId,\n     };\n \n-    await this.workflowQueueService.add({ name: transactionId, data: jobData, groupId: command.organizationId });\n+    const options = command.priority ? { priority: command.priority } : {};",
        "comment_created_at": "2024-09-17T21:23:20+00:00",
        "comment_author": "isaiahdahl",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091680833",
    "pr_number": 8276,
    "pr_file": "apps/api/src/config/env.validators.ts",
    "created_at": "2025-05-15T17:38:01+00:00",
    "commented_code": "STRIPE_API_KEY: str({ default: undefined }),\n       STRIPE_CONNECT_SECRET: str({ default: undefined }),\n       NOVU_INTERNAL_SECRET_KEY: str({ default: '' }),\n+      KEYLESS_ORGANIZATION_ID: str({ desc: 'Required organizationId for Keyless authentication' }),\n+      KEYLESS_USER_EMAIL: str({ desc: 'Required email for Keyless authentication' }),",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2091680833",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8276,
        "pr_file": "apps/api/src/config/env.validators.ts",
        "discussion_id": "2091680833",
        "commented_code": "@@ -56,6 +57,8 @@ export const envValidators = {\n       STRIPE_API_KEY: str({ default: undefined }),\n       STRIPE_CONNECT_SECRET: str({ default: undefined }),\n       NOVU_INTERNAL_SECRET_KEY: str({ default: '' }),\n+      KEYLESS_ORGANIZATION_ID: str({ desc: 'Required organizationId for Keyless authentication' }),\n+      KEYLESS_USER_EMAIL: str({ desc: 'Required email for Keyless authentication' }),",
        "comment_created_at": "2025-05-15T17:38:01+00:00",
        "comment_author": "scopsy",
        "comment_body": "I would saly let's add here default ''? To match with the rest of the keys here? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2091977790",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8276,
        "pr_file": "apps/api/src/config/env.validators.ts",
        "discussion_id": "2091680833",
        "commented_code": "@@ -56,6 +57,8 @@ export const envValidators = {\n       STRIPE_API_KEY: str({ default: undefined }),\n       STRIPE_CONNECT_SECRET: str({ default: undefined }),\n       NOVU_INTERNAL_SECRET_KEY: str({ default: '' }),\n+      KEYLESS_ORGANIZATION_ID: str({ desc: 'Required organizationId for Keyless authentication' }),\n+      KEYLESS_USER_EMAIL: str({ desc: 'Required email for Keyless authentication' }),",
        "comment_created_at": "2025-05-15T21:21:47+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "hmmm but then that would mean that the API could bootstrap in an invalid state, although the EU does not need those variables..",
        "pr_file_module": null
      },
      {
        "comment_id": "2095782707",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8276,
        "pr_file": "apps/api/src/config/env.validators.ts",
        "discussion_id": "2091680833",
        "commented_code": "@@ -56,6 +57,8 @@ export const envValidators = {\n       STRIPE_API_KEY: str({ default: undefined }),\n       STRIPE_CONNECT_SECRET: str({ default: undefined }),\n       NOVU_INTERNAL_SECRET_KEY: str({ default: '' }),\n+      KEYLESS_ORGANIZATION_ID: str({ desc: 'Required organizationId for Keyless authentication' }),\n+      KEYLESS_USER_EMAIL: str({ desc: 'Required email for Keyless authentication' }),",
        "comment_created_at": "2025-05-19T13:59:44+00:00",
        "comment_author": "scopsy",
        "comment_body": "Yep, let's add a default here. Also, did you already created the org in prod and staging? we can't merge this PR before that",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2044114602",
    "pr_number": 8111,
    "pr_file": "libs/application-generic/src/logging/index.ts",
    "created_at": "2025-04-15T09:39:46+00:00",
    "commented_code": "}\n export { Logger, LoggerModule, PinoLogger, storage, Store, getLoggerToken };\n \n-const loggingLevelArr = ['error', 'warn', 'info', 'verbose', 'debug'];\n-\n const loggingLevelSet = {\n-  error: 50,\n-  warn: 40,\n+  trace: 10,\n+  debug: 20,\n   info: 30,\n-  verbose: 20,\n-  debug: 10,\n+  warn: 40,\n+  error: 50,\n+  fatal: 60,\n+  none: 70,\n };\n-\n-interface ILoggingVariables {\n-  env: string;\n-  level: string;\n-\n-  hostingPlatform: string;\n-  tenant: string;\n-}\n+const loggingLevelArr = Object.keys(loggingLevelSet);\n \n export function getLogLevel() {\n-  let logLevel = process.env.LOGGING_LEVEL ?? 'info';\n-\n-  if (loggingLevelArr.indexOf(logLevel) === -1) {\n-    // eslint-disable-next-line no-console\n-    console.log(`${logLevel}is not a valid log level of ${loggingLevelArr}. Reverting to info.`);\n+  let logLevel = null;\n \n+  if (process.env.LOGGING_LEVEL || process.env.LOG_LEVEL) {\n+    logLevel = process.env.LOGGING_LEVEL || process.env.LOG_LEVEL;",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2044114602",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8111,
        "pr_file": "libs/application-generic/src/logging/index.ts",
        "discussion_id": "2044114602",
        "commented_code": "@@ -10,135 +11,85 @@ export function getErrorInterceptor(): NestInterceptor {\n }\n export { Logger, LoggerModule, PinoLogger, storage, Store, getLoggerToken };\n \n-const loggingLevelArr = ['error', 'warn', 'info', 'verbose', 'debug'];\n-\n const loggingLevelSet = {\n-  error: 50,\n-  warn: 40,\n+  trace: 10,\n+  debug: 20,\n   info: 30,\n-  verbose: 20,\n-  debug: 10,\n+  warn: 40,\n+  error: 50,\n+  fatal: 60,\n+  none: 70,\n };\n-\n-interface ILoggingVariables {\n-  env: string;\n-  level: string;\n-\n-  hostingPlatform: string;\n-  tenant: string;\n-}\n+const loggingLevelArr = Object.keys(loggingLevelSet);\n \n export function getLogLevel() {\n-  let logLevel = process.env.LOGGING_LEVEL ?? 'info';\n-\n-  if (loggingLevelArr.indexOf(logLevel) === -1) {\n-    // eslint-disable-next-line no-console\n-    console.log(`${logLevel}is not a valid log level of ${loggingLevelArr}. Reverting to info.`);\n+  let logLevel = null;\n \n+  if (process.env.LOGGING_LEVEL || process.env.LOG_LEVEL) {\n+    logLevel = process.env.LOGGING_LEVEL || process.env.LOG_LEVEL;",
        "comment_created_at": "2025-04-15T09:39:46+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "backward compatibility for the old LOGGING_LEVEL environment variable. ",
        "pr_file_module": null
      }
    ]
  }
]