[
  {
    "discussion_id": "2201059704",
    "pr_number": 8674,
    "pr_file": "packages/js/src/session/session.ts",
    "created_at": "2025-07-11T15:38:16+00:00",
    "commented_code": "const response = await this.#inboxService.initializeSession({\n         applicationIdentifier: finalApplicationIdentifier,\n         subscriberHash,\n-        subscriber,\n+        subscriber: {\n+          ...subscriber,\n+          subscriberId: subscriber?.subscriberId ?? '',\n+          timezone: subscriber?.timezone ?? currentTimezone,",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2201059704",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8674,
        "pr_file": "packages/js/src/session/session.ts",
        "discussion_id": "2201059704",
        "commented_code": "@@ -75,7 +84,11 @@ export class Session {\n       const response = await this.#inboxService.initializeSession({\n         applicationIdentifier: finalApplicationIdentifier,\n         subscriberHash,\n-        subscriber,\n+        subscriber: {\n+          ...subscriber,\n+          subscriberId: subscriber?.subscriberId ?? '',\n+          timezone: subscriber?.timezone ?? currentTimezone,",
        "comment_created_at": "2025-07-11T15:38:16+00:00",
        "comment_author": "LetItRock",
        "comment_body": "if subscriber timezone is not passed then use the current",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2171824129",
    "pr_number": 8602,
    "pr_file": "apps/api/src/app/workflows-v2/usecases/upsert-workflow/upsert-workflow.usecase.ts",
    "created_at": "2025-06-27T12:02:06+00:00",
    "commented_code": "const newControlValues = controlValues || {};\n     if (step.template?.type === StepTypeEnum.EMAIL) {\n       const emailControlValues = newControlValues as EmailControlType;\n+\n+      const isLayoutsPageActive = await this.featureFlagsService.getFlag({\n+        key: FeatureFlagsKeysEnum.IS_LAYOUTS_PAGE_ACTIVE,\n+        defaultValue: false,\n+        environment: { _id: command.user.environmentId },\n+        organization: { _id: command.user.organizationId },\n+      });\n+\n+      // Assign default layoutId if undefined (but not if null)\n+      if (isLayoutsPageActive && emailControlValues.layoutId === undefined) {",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2171824129",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8602,
        "pr_file": "apps/api/src/app/workflows-v2/usecases/upsert-workflow/upsert-workflow.usecase.ts",
        "discussion_id": "2171824129",
        "commented_code": "@@ -351,6 +356,38 @@ export class UpsertWorkflowUseCase {\n     const newControlValues = controlValues || {};\n     if (step.template?.type === StepTypeEnum.EMAIL) {\n       const emailControlValues = newControlValues as EmailControlType;\n+\n+      const isLayoutsPageActive = await this.featureFlagsService.getFlag({\n+        key: FeatureFlagsKeysEnum.IS_LAYOUTS_PAGE_ACTIVE,\n+        defaultValue: false,\n+        environment: { _id: command.user.environmentId },\n+        organization: { _id: command.user.organizationId },\n+      });\n+\n+      // Assign default layoutId if undefined (but not if null)\n+      if (isLayoutsPageActive && emailControlValues.layoutId === undefined) {",
        "comment_created_at": "2025-06-27T12:02:06+00:00",
        "comment_author": "LetItRock",
        "comment_body": "do only when ff is on; when the email step control value `layoutId` is undefined assign the default layout `layoutId` value, otherwise validate what used provides and assign it (null or value).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2171832142",
    "pr_number": 8602,
    "pr_file": "libs/application-generic/src/usecases/get-layout/get-layout.use-case.ts",
    "created_at": "2025-06-27T12:04:37+00:00",
    "commented_code": "constructor(private layoutRepository: LayoutRepository) {}\n \n   async execute(command: GetLayoutCommand): Promise<LayoutDto> {\n-    const isInternalId = LayoutRepository.isInternalId(command.layoutIdOrInternalId);\n-\n     let layout: LayoutEntity;\n-    if (isInternalId) {\n+    if (typeof command.layoutIdOrInternalId === 'undefined') {\n+      layout = await this.layoutRepository.findOne({\n+        _environmentId: command.environmentId,\n+        _organizationId: command.organizationId,\n+        isDefault: true,\n+        type: command.type,\n+        origin: command.origin,\n+      });",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2171832142",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8602,
        "pr_file": "libs/application-generic/src/usecases/get-layout/get-layout.use-case.ts",
        "discussion_id": "2171832142",
        "commented_code": "@@ -10,19 +10,27 @@ export class GetLayoutUseCase {\n   constructor(private layoutRepository: LayoutRepository) {}\n \n   async execute(command: GetLayoutCommand): Promise<LayoutDto> {\n-    const isInternalId = LayoutRepository.isInternalId(command.layoutIdOrInternalId);\n-\n     let layout: LayoutEntity;\n-    if (isInternalId) {\n+    if (typeof command.layoutIdOrInternalId === 'undefined') {\n+      layout = await this.layoutRepository.findOne({\n+        _environmentId: command.environmentId,\n+        _organizationId: command.organizationId,\n+        isDefault: true,\n+        type: command.type,\n+        origin: command.origin,\n+      });",
        "comment_created_at": "2025-06-27T12:04:37+00:00",
        "comment_author": "LetItRock",
        "comment_body": "when `layoutIdOrInternalId` is not provided return the default layout",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2164239752",
    "pr_number": 8580,
    "pr_file": "libs/application-generic/src/schemas/control/email-control.schema.ts",
    "created_at": "2025-06-24T14:49:25+00:00",
    "commented_code": "editorType: z.enum(['block', 'html']).optional().default('block'),\n     subject: z.string().min(1),\n     disableOutputSanitization: z.boolean().optional(),\n+    layoutId: z.string().nullable().optional(),",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2164239752",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8580,
        "pr_file": "libs/application-generic/src/schemas/control/email-control.schema.ts",
        "discussion_id": "2164239752",
        "commented_code": "@@ -11,6 +11,7 @@ export const emailControlZodSchema = z\n     editorType: z.enum(['block', 'html']).optional().default('block'),\n     subject: z.string().min(1),\n     disableOutputSanitization: z.boolean().optional(),\n+    layoutId: z.string().nullable().optional(),",
        "comment_created_at": "2025-06-24T14:49:25+00:00",
        "comment_author": "LetItRock",
        "comment_body": "`layoutId` could be `null` which means that the user don't want to use any, `undefined` will mean that the default layout should be used",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2118828079",
    "pr_number": 8417,
    "pr_file": "packages/js/src/session/types.ts",
    "created_at": "2025-06-01T07:22:28+00:00",
    "commented_code": "export type InitializeSessionArgs =\n   | KeylessInitializeSessionArgs\n   | {\n-      applicationIdentifier: string;\n+      applicationIdentifier?: string;",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2118828079",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8417,
        "pr_file": "packages/js/src/session/types.ts",
        "discussion_id": "2118828079",
        "commented_code": "@@ -5,7 +5,7 @@ export type KeylessInitializeSessionArgs = {} & { [K in string]?: never }; // em\n export type InitializeSessionArgs =\n   | KeylessInitializeSessionArgs\n   | {\n-      applicationIdentifier: string;\n+      applicationIdentifier?: string;",
        "comment_created_at": "2025-06-01T07:22:28+00:00",
        "comment_author": "scopsy",
        "comment_body": "In the non-keyless mode this one is needed and required, no? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2118952203",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8417,
        "pr_file": "packages/js/src/session/types.ts",
        "discussion_id": "2118828079",
        "commented_code": "@@ -5,7 +5,7 @@ export type KeylessInitializeSessionArgs = {} & { [K in string]?: never }; // em\n export type InitializeSessionArgs =\n   | KeylessInitializeSessionArgs\n   | {\n-      applicationIdentifier: string;\n+      applicationIdentifier?: string;",
        "comment_created_at": "2025-06-01T09:50:50+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "true, but for users who use the Inbox in a non typed environment, we need the ability to pass the request with partial Options (only subscriber or only identifier). this way, the api will throw an exception if something important is missing.\r\ni was not sure what the best solution is. another possible way to handle this is:\r\n\r\n>     this.#session = new Session(\r\n>       {\r\n>         applicationIdentifier: options.applicationIdentifier || '',\r\n>         subscriberHash: options.subscriberHash,\r\n>         subscriber: buildSubscriber(options),\r\n>       },\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2119260301",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8417,
        "pr_file": "packages/js/src/session/types.ts",
        "discussion_id": "2118828079",
        "commented_code": "@@ -5,7 +5,7 @@ export type KeylessInitializeSessionArgs = {} & { [K in string]?: never }; // em\n export type InitializeSessionArgs =\n   | KeylessInitializeSessionArgs\n   | {\n-      applicationIdentifier: string;\n+      applicationIdentifier?: string;",
        "comment_created_at": "2025-06-01T15:33:22+00:00",
        "comment_author": "scopsy",
        "comment_body": "I think this one is cleaner ^",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2090489979",
    "pr_number": 8300,
    "pr_file": "apps/api/src/app/webhooks/usecases/create-webhook-portal-token/create-webhook-portal.usecase.ts",
    "created_at": "2025-05-15T07:32:46+00:00",
    "commented_code": "+import { BadRequestException, Inject, Injectable, NotFoundException, Scope } from '@nestjs/common';\n+import { EnvironmentRepository, OrganizationRepository } from '@novu/dal';\n+import { LogDecorator } from '@novu/application-generic';\n+import { Svix } from 'svix';\n+\n+import { CreateWebhookPortalCommand } from './create-webhook-portal.command';\n+import { CreateWebhookPortalResponseDto } from '../../dtos/create-webhook-portal-token-response.dto';\n+\n+@Injectable()\n+export class CreateWebhookPortalUsecase {\n+  constructor(\n+    private environmentRepository: EnvironmentRepository,\n+    @Inject('SVIX_CLIENT') private svix: Svix,\n+    private organizationRepository: OrganizationRepository\n+  ) {}\n+\n+  @LogDecorator()\n+  async execute(command: CreateWebhookPortalCommand): Promise<CreateWebhookPortalResponseDto> {\n+    if (!this.svix) {\n+      throw new BadRequestException('Webhook system is not enabled');\n+    }",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2090489979",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8300,
        "pr_file": "apps/api/src/app/webhooks/usecases/create-webhook-portal-token/create-webhook-portal.usecase.ts",
        "discussion_id": "2090489979",
        "commented_code": "@@ -0,0 +1,58 @@\n+import { BadRequestException, Inject, Injectable, NotFoundException, Scope } from '@nestjs/common';\n+import { EnvironmentRepository, OrganizationRepository } from '@novu/dal';\n+import { LogDecorator } from '@novu/application-generic';\n+import { Svix } from 'svix';\n+\n+import { CreateWebhookPortalCommand } from './create-webhook-portal.command';\n+import { CreateWebhookPortalResponseDto } from '../../dtos/create-webhook-portal-token-response.dto';\n+\n+@Injectable()\n+export class CreateWebhookPortalUsecase {\n+  constructor(\n+    private environmentRepository: EnvironmentRepository,\n+    @Inject('SVIX_CLIENT') private svix: Svix,\n+    private organizationRepository: OrganizationRepository\n+  ) {}\n+\n+  @LogDecorator()\n+  async execute(command: CreateWebhookPortalCommand): Promise<CreateWebhookPortalResponseDto> {\n+    if (!this.svix) {\n+      throw new BadRequestException('Webhook system is not enabled');\n+    }",
        "comment_created_at": "2025-05-15T07:32:46+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "not sure if this one is needed, the nest app will stop on boostrap if the injection failed.",
        "pr_file_module": null
      },
      {
        "comment_id": "2090518639",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8300,
        "pr_file": "apps/api/src/app/webhooks/usecases/create-webhook-portal-token/create-webhook-portal.usecase.ts",
        "discussion_id": "2090489979",
        "commented_code": "@@ -0,0 +1,58 @@\n+import { BadRequestException, Inject, Injectable, NotFoundException, Scope } from '@nestjs/common';\n+import { EnvironmentRepository, OrganizationRepository } from '@novu/dal';\n+import { LogDecorator } from '@novu/application-generic';\n+import { Svix } from 'svix';\n+\n+import { CreateWebhookPortalCommand } from './create-webhook-portal.command';\n+import { CreateWebhookPortalResponseDto } from '../../dtos/create-webhook-portal-token-response.dto';\n+\n+@Injectable()\n+export class CreateWebhookPortalUsecase {\n+  constructor(\n+    private environmentRepository: EnvironmentRepository,\n+    @Inject('SVIX_CLIENT') private svix: Svix,\n+    private organizationRepository: OrganizationRepository\n+  ) {}\n+\n+  @LogDecorator()\n+  async execute(command: CreateWebhookPortalCommand): Promise<CreateWebhookPortalResponseDto> {\n+    if (!this.svix) {\n+      throw new BadRequestException('Webhook system is not enabled');\n+    }",
        "comment_created_at": "2025-05-15T07:48:50+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "now i see why",
        "pr_file_module": null
      },
      {
        "comment_id": "2090582228",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8300,
        "pr_file": "apps/api/src/app/webhooks/usecases/create-webhook-portal-token/create-webhook-portal.usecase.ts",
        "discussion_id": "2090489979",
        "commented_code": "@@ -0,0 +1,58 @@\n+import { BadRequestException, Inject, Injectable, NotFoundException, Scope } from '@nestjs/common';\n+import { EnvironmentRepository, OrganizationRepository } from '@novu/dal';\n+import { LogDecorator } from '@novu/application-generic';\n+import { Svix } from 'svix';\n+\n+import { CreateWebhookPortalCommand } from './create-webhook-portal.command';\n+import { CreateWebhookPortalResponseDto } from '../../dtos/create-webhook-portal-token-response.dto';\n+\n+@Injectable()\n+export class CreateWebhookPortalUsecase {\n+  constructor(\n+    private environmentRepository: EnvironmentRepository,\n+    @Inject('SVIX_CLIENT') private svix: Svix,\n+    private organizationRepository: OrganizationRepository\n+  ) {}\n+\n+  @LogDecorator()\n+  async execute(command: CreateWebhookPortalCommand): Promise<CreateWebhookPortalResponseDto> {\n+    if (!this.svix) {\n+      throw new BadRequestException('Webhook system is not enabled');\n+    }",
        "comment_created_at": "2025-05-15T08:20:19+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "i pushed small change, because of this.\r\ni updated the svix type to `Svix | null` and made eslint rule to disallow importing the `Svix` class directly",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2022679669",
    "pr_number": 8041,
    "pr_file": "apps/api/src/app/shared/helpers/liquid.ts",
    "created_at": "2025-04-01T11:34:58+00:00",
    "commented_code": "return valueEscapedNewLines;\n   } else {\n-    return String(value);\n+    return value === undefined ? '' : String(value as unknown);",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2022679669",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8041,
        "pr_file": "apps/api/src/app/shared/helpers/liquid.ts",
        "discussion_id": "2022679669",
        "commented_code": "@@ -20,6 +20,6 @@ const stringifyDataStructureWithSingleQuotes = (value: unknown, spaces: number =\n \n     return valueEscapedNewLines;\n   } else {\n-    return String(value);\n+    return value === undefined ? '' : String(value as unknown);",
        "comment_created_at": "2025-04-01T11:34:58+00:00",
        "comment_author": "SokratisVidros",
        "comment_body": "Shouldn't we check for undefined or null?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2022724546",
    "pr_number": 8041,
    "pr_file": "apps/api/src/app/shared/helpers/liquid.ts",
    "created_at": "2025-04-01T12:06:37+00:00",
    "commented_code": "return valueEscapedNewLines;\n   } else {\n-    return String(value);\n+    return value == null ? '' : String(value as unknown);",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2022724546",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8041,
        "pr_file": "apps/api/src/app/shared/helpers/liquid.ts",
        "discussion_id": "2022724546",
        "commented_code": "@@ -20,6 +20,6 @@ const stringifyDataStructureWithSingleQuotes = (value: unknown, spaces: number =\n \n     return valueEscapedNewLines;\n   } else {\n-    return String(value);\n+    return value == null ? '' : String(value as unknown);",
        "comment_created_at": "2025-04-01T12:06:37+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "I like this shortcut, but because this is very sensitive part i wonder if we should go with the more explicit version \"value === null || value === undefined\" instead. \nWhat do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "2022999613",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8041,
        "pr_file": "apps/api/src/app/shared/helpers/liquid.ts",
        "discussion_id": "2022724546",
        "commented_code": "@@ -20,6 +20,6 @@ const stringifyDataStructureWithSingleQuotes = (value: unknown, spaces: number =\n \n     return valueEscapedNewLines;\n   } else {\n-    return String(value);\n+    return value == null ? '' : String(value as unknown);",
        "comment_created_at": "2025-04-01T14:38:01+00:00",
        "comment_author": "desiprisg",
        "comment_body": "What's different with that version ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2023569773",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8041,
        "pr_file": "apps/api/src/app/shared/helpers/liquid.ts",
        "discussion_id": "2022724546",
        "commented_code": "@@ -20,6 +20,6 @@ const stringifyDataStructureWithSingleQuotes = (value: unknown, spaces: number =\n \n     return valueEscapedNewLines;\n   } else {\n-    return String(value);\n+    return value == null ? '' : String(value as unknown);",
        "comment_created_at": "2025-04-01T19:35:28+00:00",
        "comment_author": "SokratisVidros",
        "comment_body": "String(value) when value is undefined returns `undefined`. Isn't that the reason we started this PR in the first place?",
        "pr_file_module": null
      }
    ]
  }
]