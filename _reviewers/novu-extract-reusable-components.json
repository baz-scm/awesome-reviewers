[
  {
    "discussion_id": "2319312343",
    "pr_number": 9063,
    "pr_file": "libs/application-generic/src/factories/shared/interfaces.ts",
    "created_at": "2025-09-03T15:16:28+00:00",
    "commented_code": "+import { ChannelTypeEnum, IConfigurations } from '@novu/shared';\n import { IEmailEventBody, ISMSEventBody } from '@novu/stateless';\n \n export interface IHandler {\n-  inboundWebhookEnabled?(): boolean;\n+  inboundWebhookEnabled(): boolean;\n \n-  getMessageId?: (body: any | any[]) => string[];\n+  getMessageId: (body: unknown | unknown[]) => string[];\n \n-  parseEventBody?: (body: any | any[], identifier: string) => IEmailEventBody | ISMSEventBody | undefined;\n+  parseEventBody: (body: unknown | unknown[], identifier: string) => IEmailEventBody | ISMSEventBody | undefined;\n \n-  verifySignature?: (body: any, headers: Record<string, string>) => { success: boolean; message?: string };\n+  verifySignature: (body: unknown, headers: Record<string, string>) => { success: boolean; message?: string };\n+\n+  autoConfigureInboundWebhook: (configurations: { webhookUrl: string }) => Promise<{\n+    success: boolean;\n+    message?: string;\n+    configurations?: IConfigurations;\n+  }>;\n+}\n+\n+interface IProviderWithWebhookMethods {\n+  getMessageId?: (body: unknown | unknown[]) => string[];\n+  parseEventBody?: (body: unknown | unknown[], identifier: string) => IEmailEventBody | ISMSEventBody | undefined;\n+  verifySignature?: (body: unknown, headers: Record<string, string>) => { success: boolean; message?: string };\n+  autoConfigureInboundWebhook?: (configurations: { webhookUrl: string }) => Promise<{\n+    success: boolean;\n+    message?: string;\n+    configurations?: IConfigurations;\n+  }>;\n+}\n+\n+export abstract class BaseHandler<T extends IProviderWithWebhookMethods = IProviderWithWebhookMethods>",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2319312343",
        "repo_full_name": "novuhq/novu",
        "pr_number": 9063,
        "pr_file": "libs/application-generic/src/factories/shared/interfaces.ts",
        "discussion_id": "2319312343",
        "commented_code": "@@ -1,11 +1,91 @@\n+import { ChannelTypeEnum, IConfigurations } from '@novu/shared';\n import { IEmailEventBody, ISMSEventBody } from '@novu/stateless';\n \n export interface IHandler {\n-  inboundWebhookEnabled?(): boolean;\n+  inboundWebhookEnabled(): boolean;\n \n-  getMessageId?: (body: any | any[]) => string[];\n+  getMessageId: (body: unknown | unknown[]) => string[];\n \n-  parseEventBody?: (body: any | any[], identifier: string) => IEmailEventBody | ISMSEventBody | undefined;\n+  parseEventBody: (body: unknown | unknown[], identifier: string) => IEmailEventBody | ISMSEventBody | undefined;\n \n-  verifySignature?: (body: any, headers: Record<string, string>) => { success: boolean; message?: string };\n+  verifySignature: (body: unknown, headers: Record<string, string>) => { success: boolean; message?: string };\n+\n+  autoConfigureInboundWebhook: (configurations: { webhookUrl: string }) => Promise<{\n+    success: boolean;\n+    message?: string;\n+    configurations?: IConfigurations;\n+  }>;\n+}\n+\n+interface IProviderWithWebhookMethods {\n+  getMessageId?: (body: unknown | unknown[]) => string[];\n+  parseEventBody?: (body: unknown | unknown[], identifier: string) => IEmailEventBody | ISMSEventBody | undefined;\n+  verifySignature?: (body: unknown, headers: Record<string, string>) => { success: boolean; message?: string };\n+  autoConfigureInboundWebhook?: (configurations: { webhookUrl: string }) => Promise<{\n+    success: boolean;\n+    message?: string;\n+    configurations?: IConfigurations;\n+  }>;\n+}\n+\n+export abstract class BaseHandler<T extends IProviderWithWebhookMethods = IProviderWithWebhookMethods>",
        "comment_created_at": "2025-09-03T15:16:28+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "now we\u2019ll have a common class responsible for all the agnostic method overrides. its responsibility is to delegate execution to the provider instance, reducing the amount of code in the specific channel-based handlers (i.e BaseSmsHandler, BaseEmailHandler etc).\n\nwe need to extract this class into a separate file.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2225345585",
    "pr_number": 8775,
    "pr_file": "apps/api/src/app/layouts-v2/usecases/preview-layout/preview-utils.ts",
    "created_at": "2025-07-23T12:01:32+00:00",
    "commented_code": "import { JSONContent as MailyJSONContent } from '@maily-to/render';\n-import { LAYOUT_CONTENT_VARIABLE } from '@novu/shared';\n+import { LAYOUT_CONTENT_VARIABLE, LAYOUT_PREVIEW_CONTENT_PLACEHOLDER } from '@novu/shared';\n \n import { replaceMailyNodesByCondition } from '../../../shared/helpers/maily-utils';\n \n-const placeholderText = 'Dynamic placeholder content';\n-const contentPlaceholder =\n-  '<div style=\"border: 1px dashed #E1E4EA; border-radius: 4px; background: repeating-linear-gradient(-45deg,#F2F5F8,#F2F5F8 4px,#FBFBFB 4px,#FBFBFB 8px); display: flex; justify-content: center; align-items: center; height: 100%; max-height: 140px; padding: 8px;\">' +\n-  `<span style=\"background: #FFFFFF; border: 1px solid #E1E4EA; border-radius: 4px; padding: 4px 8px; flex; justify-content: center; align-items: center; font-size: 10px; line-height: 1; color: #99A0AE;\">${placeholderText}</span>` +\n-  '</div>';\n-\n export const enhanceBodyForPreview = (editorType: string, body: string) => {\n   if (editorType === 'html') {\n-    return body?.replace(new RegExp(`\\\\{\\\\{\\\\s*${LAYOUT_CONTENT_VARIABLE}\\\\s*\\\\}\\\\}`), contentPlaceholder);\n+    return body?.replace(\n+      new RegExp(`\\\\{\\\\{\\\\s*${LAYOUT_CONTENT_VARIABLE}\\\\s*\\\\}\\\\}`),\n+      LAYOUT_PREVIEW_CONTENT_PLACEHOLDER\n+    );\n   }\n \n   return JSON.stringify(\n     replaceMailyNodesByCondition(\n       body,\n       (node) => node.type === 'variable' && node.attrs?.id === LAYOUT_CONTENT_VARIABLE,\n-      () =>\n-        ({\n-          type: 'section',\n+      (node) => {\n+        return {\n+          type: 'text',\n+          text: LAYOUT_PREVIEW_CONTENT_PLACEHOLDER,\n           attrs: {\n-            borderWidth: 1,\n-            borderStyle: 'dashed',\n-            borderColor: '#E1E4EA',\n-            borderRadius: 4,\n-            background: 'repeating-linear-gradient(-45deg,#F2F5F8,#F2F5F8 4px,#FBFBFB 4px,#FBFBFB 8px)',\n-            paddingTop: 8,\n-            paddingRight: 8,\n-            paddingBottom: 8,\n-            paddingLeft: 8,\n-            height: '100%',\n-            textAlign: 'center',\n-            maxHeight: 140,\n-            showIfKey: null,\n+            ...node.attrs,\n+            shouldDangerouslySetInnerHTML: true,",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2225345585",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8775,
        "pr_file": "apps/api/src/app/layouts-v2/usecases/preview-layout/preview-utils.ts",
        "discussion_id": "2225345585",
        "commented_code": "@@ -1,67 +1,30 @@\n import { JSONContent as MailyJSONContent } from '@maily-to/render';\n-import { LAYOUT_CONTENT_VARIABLE } from '@novu/shared';\n+import { LAYOUT_CONTENT_VARIABLE, LAYOUT_PREVIEW_CONTENT_PLACEHOLDER } from '@novu/shared';\n \n import { replaceMailyNodesByCondition } from '../../../shared/helpers/maily-utils';\n \n-const placeholderText = 'Dynamic placeholder content';\n-const contentPlaceholder =\n-  '<div style=\"border: 1px dashed #E1E4EA; border-radius: 4px; background: repeating-linear-gradient(-45deg,#F2F5F8,#F2F5F8 4px,#FBFBFB 4px,#FBFBFB 8px); display: flex; justify-content: center; align-items: center; height: 100%; max-height: 140px; padding: 8px;\">' +\n-  `<span style=\"background: #FFFFFF; border: 1px solid #E1E4EA; border-radius: 4px; padding: 4px 8px; flex; justify-content: center; align-items: center; font-size: 10px; line-height: 1; color: #99A0AE;\">${placeholderText}</span>` +\n-  '</div>';\n-\n export const enhanceBodyForPreview = (editorType: string, body: string) => {\n   if (editorType === 'html') {\n-    return body?.replace(new RegExp(`\\\\{\\\\{\\\\s*${LAYOUT_CONTENT_VARIABLE}\\\\s*\\\\}\\\\}`), contentPlaceholder);\n+    return body?.replace(\n+      new RegExp(`\\\\{\\\\{\\\\s*${LAYOUT_CONTENT_VARIABLE}\\\\s*\\\\}\\\\}`),\n+      LAYOUT_PREVIEW_CONTENT_PLACEHOLDER\n+    );\n   }\n \n   return JSON.stringify(\n     replaceMailyNodesByCondition(\n       body,\n       (node) => node.type === 'variable' && node.attrs?.id === LAYOUT_CONTENT_VARIABLE,\n-      () =>\n-        ({\n-          type: 'section',\n+      (node) => {\n+        return {\n+          type: 'text',\n+          text: LAYOUT_PREVIEW_CONTENT_PLACEHOLDER,\n           attrs: {\n-            borderWidth: 1,\n-            borderStyle: 'dashed',\n-            borderColor: '#E1E4EA',\n-            borderRadius: 4,\n-            background: 'repeating-linear-gradient(-45deg,#F2F5F8,#F2F5F8 4px,#FBFBFB 4px,#FBFBFB 8px)',\n-            paddingTop: 8,\n-            paddingRight: 8,\n-            paddingBottom: 8,\n-            paddingLeft: 8,\n-            height: '100%',\n-            textAlign: 'center',\n-            maxHeight: 140,\n-            showIfKey: null,\n+            ...node.attrs,\n+            shouldDangerouslySetInnerHTML: true,",
        "comment_created_at": "2025-07-23T12:01:32+00:00",
        "comment_author": "LetItRock",
        "comment_body": "reuse the same `HTML` template for the \"dynamic content placeholder\" in both cases HTML and Maily blocks",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2053517920",
    "pr_number": 8142,
    "pr_file": "apps/api/src/app/inbox/usecases/session/session.command.ts",
    "created_at": "2025-04-22T07:36:40+00:00",
    "commented_code": "@IsOptional()\n   @IsString()\n   readonly origin?: string;\n+\n+  @IsOptional()",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2053517920",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8142,
        "pr_file": "apps/api/src/app/inbox/usecases/session/session.command.ts",
        "discussion_id": "2053517920",
        "commented_code": "@@ -17,4 +17,16 @@ export class SessionCommand extends BaseCommand {\n   @IsOptional()\n   @IsString()\n   readonly origin?: string;\n+\n+  @IsOptional()",
        "comment_created_at": "2025-04-22T07:36:40+00:00",
        "comment_author": "SokratisVidros",
        "comment_body": "This duplication is annoying. Can we somehow eliminate it? It may be helpful to reuse the shared subscriber DTO and do nested command validation.",
        "pr_file_module": null
      },
      {
        "comment_id": "2054895030",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8142,
        "pr_file": "apps/api/src/app/inbox/usecases/session/session.command.ts",
        "discussion_id": "2053517920",
        "commented_code": "@@ -17,4 +17,16 @@ export class SessionCommand extends BaseCommand {\n   @IsOptional()\n   @IsString()\n   readonly origin?: string;\n+\n+  @IsOptional()",
        "comment_created_at": "2025-04-22T21:18:15+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "agree, but i couldn\u2019t quite figure out the correct structure, i\u2019ll need some help sorting it out.",
        "pr_file_module": null
      },
      {
        "comment_id": "2057787560",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8142,
        "pr_file": "apps/api/src/app/inbox/usecases/session/session.command.ts",
        "discussion_id": "2053517920",
        "commented_code": "@@ -17,4 +17,16 @@ export class SessionCommand extends BaseCommand {\n   @IsOptional()\n   @IsString()\n   readonly origin?: string;\n+\n+  @IsOptional()",
        "comment_created_at": "2025-04-24T07:59:24+00:00",
        "comment_author": "SokratisVidros",
        "comment_body": "How about making the session command accept a nested SubscriberSessionRequestDTO instead.",
        "pr_file_module": null
      },
      {
        "comment_id": "2058195332",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8142,
        "pr_file": "apps/api/src/app/inbox/usecases/session/session.command.ts",
        "discussion_id": "2053517920",
        "commented_code": "@@ -17,4 +17,16 @@ export class SessionCommand extends BaseCommand {\n   @IsOptional()\n   @IsString()\n   readonly origin?: string;\n+\n+  @IsOptional()",
        "comment_created_at": "2025-04-24T11:47:01+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2054451485",
    "pr_number": 8178,
    "pr_file": "apps/api/src/app/workflows-v2/util/build-variables.ts",
    "created_at": "2025-04-22T16:23:11+00:00",
    "commented_code": "};\n   }\n \n-  const { validVariables, invalidVariables } = extractLiquidTemplateVariables(JSON.stringify(variableControlValue));\n+  const { validVariables, invalidVariables } = extractLiquidTemplateVariables({\n+    template: JSON.stringify(variableControlValue),\n+    variableSchema,\n+  });",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2054451485",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8178,
        "pr_file": "apps/api/src/app/workflows-v2/util/build-variables.ts",
        "discussion_id": "2054451485",
        "commented_code": "@@ -40,103 +40,13 @@ export function buildVariables(\n     };\n   }\n \n-  const { validVariables, invalidVariables } = extractLiquidTemplateVariables(JSON.stringify(variableControlValue));\n+  const { validVariables, invalidVariables } = extractLiquidTemplateVariables({\n+    template: JSON.stringify(variableControlValue),\n+    variableSchema,\n+  });",
        "comment_created_at": "2025-04-22T16:23:11+00:00",
        "comment_author": "LetItRock",
        "comment_body": "We now have only one place where we create valid/invalid variables.\r\nThis change also simplifies the future extension for the additional invalid variables information, like a `start, end` positions in the template, which the FE could then use to inform the user.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2046571820",
    "pr_number": 8130,
    "pr_file": "apps/dashboard/src/components/primitives/control-input/variable-plugin/variable-pill-widget.ts",
    "created_at": "2025-04-16T10:00:29+00:00",
    "commented_code": "toDOM() {\n     const span = document.createElement('span');\n     const content = document.createElement('span');\n-    content.textContent = this.variableName;\n+    content.textContent = this.getDisplayVariableName();\n     const before = document.createElement('span');\n \n     const pillStyles = this.createPillStyles();\n     Object.assign(span.style, pillStyles);\n \n     const beforeStyles = this.createBeforeStyles();\n     Object.assign(before.style, beforeStyles);\n+    const hasIssues = this.getVariableIssues().length > 0;\n+\n+    if (hasIssues) {\n+      before.style.color = 'hsl(var(--error-base))';\n+      before.style.backgroundImage = `url(\"/images/error-circle-outline.svg\")`;\n+      before.style.backgroundSize = 'cover';\n+    }\n \n     const contentStyles = this.createContentStyles();\n     Object.assign(content.style, contentStyles);\n \n-    // Stores the complete variable expression including any filters\n     span.setAttribute('data-variable', this.fullVariableName);\n-\n     span.setAttribute('data-start', this.start.toString());\n     span.setAttribute('data-end', this.end.toString());\n-\n-    // Contains the clean variable name shown to the user\n     span.setAttribute('data-display', this.variableName);\n \n     span.appendChild(before);\n     span.appendChild(content);\n \n-    if (this.hasFilters) {\n-      const after = document.createElement('span');\n-      const afterStyles = this.createAfterStyles();\n-      Object.assign(after.style, afterStyles);\n-      span.appendChild(after);\n-    }\n-\n     span.addEventListener('mousedown', this.clickHandler);\n \n+    this.renderFilters(span);\n+\n+    span.addEventListener('mouseenter', () => {\n+      if (!this.tooltipElement) {\n+        this.tooltipElement = this.renderTooltip(span);\n+      }\n+\n+      if (hasIssues) {\n+        span.style.backgroundColor = 'hsl(var(--error-base) / 0.025)';\n+      }\n+    });\n+\n+    span.addEventListener('mouseleave', () => {\n+      if (this.tooltipElement) {\n+        document.body.removeChild(this.tooltipElement);\n+        this.tooltipElement = null;\n+      }\n+\n+      span.style.backgroundColor = 'hsl(var(--bg-white))';\n+    });\n+\n     return span;\n   }\n \n+  renderFilters(parent: HTMLElement) {\n+    if (!this.filters?.length) return;\n+\n+    const firstFilter = this.filters[0];\n+    const firstFilterName = firstFilter.split(':')[0];\n+    const firstFilterParams = firstFilter.split(':')[1]?.split(',')?.[0];\n+    const parsedFilterParams = parseParams(firstFilterParams);",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2046571820",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8130,
        "pr_file": "apps/dashboard/src/components/primitives/control-input/variable-plugin/variable-pill-widget.ts",
        "discussion_id": "2046571820",
        "commented_code": "@@ -84,42 +107,140 @@ export class VariablePillWidget extends WidgetType {\n   toDOM() {\n     const span = document.createElement('span');\n     const content = document.createElement('span');\n-    content.textContent = this.variableName;\n+    content.textContent = this.getDisplayVariableName();\n     const before = document.createElement('span');\n \n     const pillStyles = this.createPillStyles();\n     Object.assign(span.style, pillStyles);\n \n     const beforeStyles = this.createBeforeStyles();\n     Object.assign(before.style, beforeStyles);\n+    const hasIssues = this.getVariableIssues().length > 0;\n+\n+    if (hasIssues) {\n+      before.style.color = 'hsl(var(--error-base))';\n+      before.style.backgroundImage = `url(\"/images/error-circle-outline.svg\")`;\n+      before.style.backgroundSize = 'cover';\n+    }\n \n     const contentStyles = this.createContentStyles();\n     Object.assign(content.style, contentStyles);\n \n-    // Stores the complete variable expression including any filters\n     span.setAttribute('data-variable', this.fullVariableName);\n-\n     span.setAttribute('data-start', this.start.toString());\n     span.setAttribute('data-end', this.end.toString());\n-\n-    // Contains the clean variable name shown to the user\n     span.setAttribute('data-display', this.variableName);\n \n     span.appendChild(before);\n     span.appendChild(content);\n \n-    if (this.hasFilters) {\n-      const after = document.createElement('span');\n-      const afterStyles = this.createAfterStyles();\n-      Object.assign(after.style, afterStyles);\n-      span.appendChild(after);\n-    }\n-\n     span.addEventListener('mousedown', this.clickHandler);\n \n+    this.renderFilters(span);\n+\n+    span.addEventListener('mouseenter', () => {\n+      if (!this.tooltipElement) {\n+        this.tooltipElement = this.renderTooltip(span);\n+      }\n+\n+      if (hasIssues) {\n+        span.style.backgroundColor = 'hsl(var(--error-base) / 0.025)';\n+      }\n+    });\n+\n+    span.addEventListener('mouseleave', () => {\n+      if (this.tooltipElement) {\n+        document.body.removeChild(this.tooltipElement);\n+        this.tooltipElement = null;\n+      }\n+\n+      span.style.backgroundColor = 'hsl(var(--bg-white))';\n+    });\n+\n     return span;\n   }\n \n+  renderFilters(parent: HTMLElement) {\n+    if (!this.filters?.length) return;\n+\n+    const firstFilter = this.filters[0];\n+    const firstFilterName = firstFilter.split(':')[0];\n+    const firstFilterParams = firstFilter.split(':')[1]?.split(',')?.[0];\n+    const parsedFilterParams = parseParams(firstFilterParams);",
        "comment_created_at": "2025-04-16T10:00:29+00:00",
        "comment_author": "LetItRock",
        "comment_body": "Please move this parsing logic to `utils/liquid.ts` file. It could be also part of the `parseVariable` function, but we don't always need to run it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2046683991",
    "pr_number": 8128,
    "pr_file": "apps/api/src/app/shared/services/logger.service.ts",
    "created_at": "2025-04-16T11:02:51+00:00",
    "commented_code": "+import { createNestLoggingModuleOptions, PinoLogger } from '@novu/application-generic';\n+import packageJson from '../../../../package.json';\n+\n+export const getLogger = (context: string) => {",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2046683991",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8128,
        "pr_file": "apps/api/src/app/shared/services/logger.service.ts",
        "discussion_id": "2046683991",
        "commented_code": "@@ -0,0 +1,14 @@\n+import { createNestLoggingModuleOptions, PinoLogger } from '@novu/application-generic';\n+import packageJson from '../../../../package.json';\n+\n+export const getLogger = (context: string) => {",
        "comment_created_at": "2025-04-16T11:02:51+00:00",
        "comment_author": "LetItRock",
        "comment_body": "shouldn't this come from the application generic so we can reuse in the worker if needed?",
        "pr_file_module": null
      },
      {
        "comment_id": "2046719415",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8128,
        "pr_file": "apps/api/src/app/shared/services/logger.service.ts",
        "discussion_id": "2046683991",
        "commented_code": "@@ -0,0 +1,14 @@\n+import { createNestLoggingModuleOptions, PinoLogger } from '@novu/application-generic';\n+import packageJson from '../../../../package.json';\n+\n+export const getLogger = (context: string) => {",
        "comment_created_at": "2025-04-16T11:27:28+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "will definitely move it once we do the same to the apps, for now i kept it close.",
        "pr_file_module": null
      }
    ]
  }
]