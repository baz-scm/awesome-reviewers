[
  {
    "discussion_id": "2113295973",
    "pr_number": 8408,
    "pr_file": "apps/api/src/exception-filter.ts",
    "created_at": "2025-05-29T06:25:37+00:00",
    "commented_code": "// noinspection UnnecessaryLocalVariableJS\n     const isBadRequestExceptionFromValidationPipe =\n       exception instanceof Object &&\n-      'response' in exception &&\n-      'message' in (exception as any).response &&",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2113295973",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8408,
        "pr_file": "apps/api/src/exception-filter.ts",
        "discussion_id": "2113295973",
        "commented_code": "@@ -89,8 +89,8 @@ export class AllExceptionsFilter implements ExceptionFilter {\n     // noinspection UnnecessaryLocalVariableJS\n     const isBadRequestExceptionFromValidationPipe =\n       exception instanceof Object &&\n-      'response' in exception &&\n-      'message' in (exception as any).response &&",
        "comment_created_at": "2025-05-29T06:25:37+00:00",
        "comment_author": "ChmaraX",
        "comment_body": "Most of our exceptions are not objects like `HttpException({...})` but rather `HttpException('string', code)` so using `in` operator on primitive values will result in runtime error",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2059784991",
    "pr_number": 8199,
    "pr_file": "apps/api/src/app/inbox/usecases/snooze-notification/snooze-notification.usecase.ts",
    "created_at": "2025-04-25T08:20:33+00:00",
    "commented_code": "+import {\n+  Injectable,\n+  NotFoundException,\n+  InternalServerErrorException,\n+  HttpException,\n+  NotImplementedException,\n+  HttpStatus,\n+} from '@nestjs/common';\n+import {\n+  CreateExecutionDetails,\n+  CreateExecutionDetailsCommand,\n+  DetailEnum,\n+  StandardQueueService,\n+  FeatureFlagsService,\n+  SYSTEM_LIMITS,\n+  PinoLogger,\n+} from '@novu/application-generic';\n+import {\n+  JobEntity,\n+  JobRepository,\n+  MessageRepository,\n+  MessageEntity,\n+  OrganizationEntity,\n+  EnvironmentEntity,\n+  UserEntity,\n+  CommunityOrganizationRepository,\n+} from '@novu/dal';\n+import {\n+  ApiServiceLevelEnum,\n+  ChannelTypeEnum,\n+  ExecutionDetailsSourceEnum,\n+  ExecutionDetailsStatusEnum,\n+  FeatureFlagsKeysEnum,\n+  FeatureNameEnum,\n+  getFeatureForTierAsNumber,\n+  JobStatusEnum,\n+} from '@novu/shared';\n+import { Types } from 'mongoose';\n+import { v4 as uuidv4 } from 'uuid';\n+import { SnoozeNotificationCommand } from './snooze-notification.command';\n+import { MarkNotificationAs } from '../mark-notification-as/mark-notification-as.usecase';\n+import { MarkNotificationAsCommand } from '../mark-notification-as/mark-notification-as.command';\n+import { InboxNotification } from '../../utils/types';\n+\n+const LOG_CONTEXT = 'SnoozeNotification';\n+\n+@Injectable()\n+export class SnoozeNotification {\n+  private readonly RETRY_ATTEMPTS = 3;\n+\n+  constructor(\n+    private readonly logger: PinoLogger,\n+    private messageRepository: MessageRepository,\n+    private jobRepository: JobRepository,\n+    private standardQueueService: StandardQueueService,\n+    private organizationRepository: CommunityOrganizationRepository,\n+    private createExecutionDetails: CreateExecutionDetails,\n+    private markNotificationAs: MarkNotificationAs,\n+    private featureFlagsService: FeatureFlagsService\n+  ) {}\n+\n+  public async execute(command: SnoozeNotificationCommand): Promise<InboxNotification> {\n+    await this.isSnoozeEnabled(command);\n+\n+    const notification = await this.findNotification(command);\n+    const delayAmount = this.calculateDelayInMs(command.snoozeUntil);\n+    await this.validateDelayDuration(command, delayAmount);\n+\n+    try {\n+      let scheduledJob = {} as JobEntity;\n+      let snoozedNotification = {} as InboxNotification;\n+\n+      await this.messageRepository.withTransaction(async () => {\n+        scheduledJob = await this.createScheduledUnsnoozeJob(notification, delayAmount);\n+        snoozedNotification = await this.markNotificationAsSnoozed(command);\n+        await this.queueJob(scheduledJob, delayAmount);\n+      });\n+\n+      // fire and forget\n+      this.createExecutionDetails\n+        .execute(\n+          CreateExecutionDetailsCommand.create({\n+            ...CreateExecutionDetailsCommand.getDetailsFromJob(scheduledJob),\n+            detail: DetailEnum.MESSAGE_SNOOZED,\n+            source: ExecutionDetailsSourceEnum.INTERNAL,\n+            status: ExecutionDetailsStatusEnum.PENDING,\n+            isTest: false,\n+            isRetry: false,\n+          })\n+        )\n+        .catch((error) => {\n+          this.logger.error({ err: error }, 'Failed to create execution details', LOG_CONTEXT);\n+        });\n+\n+      return snoozedNotification;\n+    } catch (error) {",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2059784991",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8199,
        "pr_file": "apps/api/src/app/inbox/usecases/snooze-notification/snooze-notification.usecase.ts",
        "discussion_id": "2059784991",
        "commented_code": "@@ -0,0 +1,243 @@\n+import {\n+  Injectable,\n+  NotFoundException,\n+  InternalServerErrorException,\n+  HttpException,\n+  NotImplementedException,\n+  HttpStatus,\n+} from '@nestjs/common';\n+import {\n+  CreateExecutionDetails,\n+  CreateExecutionDetailsCommand,\n+  DetailEnum,\n+  StandardQueueService,\n+  FeatureFlagsService,\n+  SYSTEM_LIMITS,\n+  PinoLogger,\n+} from '@novu/application-generic';\n+import {\n+  JobEntity,\n+  JobRepository,\n+  MessageRepository,\n+  MessageEntity,\n+  OrganizationEntity,\n+  EnvironmentEntity,\n+  UserEntity,\n+  CommunityOrganizationRepository,\n+} from '@novu/dal';\n+import {\n+  ApiServiceLevelEnum,\n+  ChannelTypeEnum,\n+  ExecutionDetailsSourceEnum,\n+  ExecutionDetailsStatusEnum,\n+  FeatureFlagsKeysEnum,\n+  FeatureNameEnum,\n+  getFeatureForTierAsNumber,\n+  JobStatusEnum,\n+} from '@novu/shared';\n+import { Types } from 'mongoose';\n+import { v4 as uuidv4 } from 'uuid';\n+import { SnoozeNotificationCommand } from './snooze-notification.command';\n+import { MarkNotificationAs } from '../mark-notification-as/mark-notification-as.usecase';\n+import { MarkNotificationAsCommand } from '../mark-notification-as/mark-notification-as.command';\n+import { InboxNotification } from '../../utils/types';\n+\n+const LOG_CONTEXT = 'SnoozeNotification';\n+\n+@Injectable()\n+export class SnoozeNotification {\n+  private readonly RETRY_ATTEMPTS = 3;\n+\n+  constructor(\n+    private readonly logger: PinoLogger,\n+    private messageRepository: MessageRepository,\n+    private jobRepository: JobRepository,\n+    private standardQueueService: StandardQueueService,\n+    private organizationRepository: CommunityOrganizationRepository,\n+    private createExecutionDetails: CreateExecutionDetails,\n+    private markNotificationAs: MarkNotificationAs,\n+    private featureFlagsService: FeatureFlagsService\n+  ) {}\n+\n+  public async execute(command: SnoozeNotificationCommand): Promise<InboxNotification> {\n+    await this.isSnoozeEnabled(command);\n+\n+    const notification = await this.findNotification(command);\n+    const delayAmount = this.calculateDelayInMs(command.snoozeUntil);\n+    await this.validateDelayDuration(command, delayAmount);\n+\n+    try {\n+      let scheduledJob = {} as JobEntity;\n+      let snoozedNotification = {} as InboxNotification;\n+\n+      await this.messageRepository.withTransaction(async () => {\n+        scheduledJob = await this.createScheduledUnsnoozeJob(notification, delayAmount);\n+        snoozedNotification = await this.markNotificationAsSnoozed(command);\n+        await this.queueJob(scheduledJob, delayAmount);\n+      });\n+\n+      // fire and forget\n+      this.createExecutionDetails\n+        .execute(\n+          CreateExecutionDetailsCommand.create({\n+            ...CreateExecutionDetailsCommand.getDetailsFromJob(scheduledJob),\n+            detail: DetailEnum.MESSAGE_SNOOZED,\n+            source: ExecutionDetailsSourceEnum.INTERNAL,\n+            status: ExecutionDetailsStatusEnum.PENDING,\n+            isTest: false,\n+            isRetry: false,\n+          })\n+        )\n+        .catch((error) => {\n+          this.logger.error({ err: error }, 'Failed to create execution details', LOG_CONTEXT);\n+        });\n+\n+      return snoozedNotification;\n+    } catch (error) {",
        "comment_created_at": "2025-04-25T08:20:33+00:00",
        "comment_author": "SokratisVidros",
        "comment_body": "I don't think we need try/catch here. If there is an error, it should bubble up.",
        "pr_file_module": null
      },
      {
        "comment_id": "2061586311",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8199,
        "pr_file": "apps/api/src/app/inbox/usecases/snooze-notification/snooze-notification.usecase.ts",
        "discussion_id": "2059784991",
        "commented_code": "@@ -0,0 +1,243 @@\n+import {\n+  Injectable,\n+  NotFoundException,\n+  InternalServerErrorException,\n+  HttpException,\n+  NotImplementedException,\n+  HttpStatus,\n+} from '@nestjs/common';\n+import {\n+  CreateExecutionDetails,\n+  CreateExecutionDetailsCommand,\n+  DetailEnum,\n+  StandardQueueService,\n+  FeatureFlagsService,\n+  SYSTEM_LIMITS,\n+  PinoLogger,\n+} from '@novu/application-generic';\n+import {\n+  JobEntity,\n+  JobRepository,\n+  MessageRepository,\n+  MessageEntity,\n+  OrganizationEntity,\n+  EnvironmentEntity,\n+  UserEntity,\n+  CommunityOrganizationRepository,\n+} from '@novu/dal';\n+import {\n+  ApiServiceLevelEnum,\n+  ChannelTypeEnum,\n+  ExecutionDetailsSourceEnum,\n+  ExecutionDetailsStatusEnum,\n+  FeatureFlagsKeysEnum,\n+  FeatureNameEnum,\n+  getFeatureForTierAsNumber,\n+  JobStatusEnum,\n+} from '@novu/shared';\n+import { Types } from 'mongoose';\n+import { v4 as uuidv4 } from 'uuid';\n+import { SnoozeNotificationCommand } from './snooze-notification.command';\n+import { MarkNotificationAs } from '../mark-notification-as/mark-notification-as.usecase';\n+import { MarkNotificationAsCommand } from '../mark-notification-as/mark-notification-as.command';\n+import { InboxNotification } from '../../utils/types';\n+\n+const LOG_CONTEXT = 'SnoozeNotification';\n+\n+@Injectable()\n+export class SnoozeNotification {\n+  private readonly RETRY_ATTEMPTS = 3;\n+\n+  constructor(\n+    private readonly logger: PinoLogger,\n+    private messageRepository: MessageRepository,\n+    private jobRepository: JobRepository,\n+    private standardQueueService: StandardQueueService,\n+    private organizationRepository: CommunityOrganizationRepository,\n+    private createExecutionDetails: CreateExecutionDetails,\n+    private markNotificationAs: MarkNotificationAs,\n+    private featureFlagsService: FeatureFlagsService\n+  ) {}\n+\n+  public async execute(command: SnoozeNotificationCommand): Promise<InboxNotification> {\n+    await this.isSnoozeEnabled(command);\n+\n+    const notification = await this.findNotification(command);\n+    const delayAmount = this.calculateDelayInMs(command.snoozeUntil);\n+    await this.validateDelayDuration(command, delayAmount);\n+\n+    try {\n+      let scheduledJob = {} as JobEntity;\n+      let snoozedNotification = {} as InboxNotification;\n+\n+      await this.messageRepository.withTransaction(async () => {\n+        scheduledJob = await this.createScheduledUnsnoozeJob(notification, delayAmount);\n+        snoozedNotification = await this.markNotificationAsSnoozed(command);\n+        await this.queueJob(scheduledJob, delayAmount);\n+      });\n+\n+      // fire and forget\n+      this.createExecutionDetails\n+        .execute(\n+          CreateExecutionDetailsCommand.create({\n+            ...CreateExecutionDetailsCommand.getDetailsFromJob(scheduledJob),\n+            detail: DetailEnum.MESSAGE_SNOOZED,\n+            source: ExecutionDetailsSourceEnum.INTERNAL,\n+            status: ExecutionDetailsStatusEnum.PENDING,\n+            isTest: false,\n+            isRetry: false,\n+          })\n+        )\n+        .catch((error) => {\n+          this.logger.error({ err: error }, 'Failed to create execution details', LOG_CONTEXT);\n+        });\n+\n+      return snoozedNotification;\n+    } catch (error) {",
        "comment_created_at": "2025-04-26T20:00:30+00:00",
        "comment_author": "ChmaraX",
        "comment_body": "The idea here is that if the error happens outside of try/catch, that means its a user input/validation/tier error which doesn't need an action. This try/catch says that this is critical part and any error here needs our action/fix.\r\n\r\nIf it happens in the specific try/catch part then we know its our fault = internal error and we need to see it in logs clearly, otherwise e.g. `mark-notification-as` usecase (which is in the try/catch) can throw `BadRequestError` which I would likely ignore when seen in NewRelic, but now it would be transformer to `InternalErrorException`.",
        "pr_file_module": null
      }
    ]
  }
]