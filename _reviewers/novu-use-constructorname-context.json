[
  {
    "discussion_id": "2090497255",
    "pr_number": 8300,
    "pr_file": "libs/application-generic/src/webhooks/usecases/send-webhook-message/send-webhook-message.usecase.ts",
    "created_at": "2025-05-15T07:37:15+00:00",
    "commented_code": "+import { Inject, Injectable, Scope } from '@nestjs/common';\n+import { Svix } from 'svix';\n+import shortid from 'shortid';\n+\n+import { PinoLogger } from 'nestjs-pino';\n+import { EnvironmentRepository } from '@novu/dal';\n+import { SendWebhookMessageCommand } from './send-webhook-message.command';\n+import { WrapperDto } from '../../dtos/webhook-payload.dto';\n+\n+const LOG_CONTEXT = 'SendWebhookMessageUseCase';\n+\n+@Injectable()\n+export class SendWebhookMessage {\n+  constructor(\n+    @Inject('SVIX_CLIENT') private svix: Svix,\n+    private logger: PinoLogger,\n+    private environmentRepository: EnvironmentRepository\n+  ) {\n+    this.logger.setContext(LOG_CONTEXT);",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2090497255",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8300,
        "pr_file": "libs/application-generic/src/webhooks/usecases/send-webhook-message/send-webhook-message.usecase.ts",
        "discussion_id": "2090497255",
        "commented_code": "@@ -0,0 +1,83 @@\n+import { Inject, Injectable, Scope } from '@nestjs/common';\n+import { Svix } from 'svix';\n+import shortid from 'shortid';\n+\n+import { PinoLogger } from 'nestjs-pino';\n+import { EnvironmentRepository } from '@novu/dal';\n+import { SendWebhookMessageCommand } from './send-webhook-message.command';\n+import { WrapperDto } from '../../dtos/webhook-payload.dto';\n+\n+const LOG_CONTEXT = 'SendWebhookMessageUseCase';\n+\n+@Injectable()\n+export class SendWebhookMessage {\n+  constructor(\n+    @Inject('SVIX_CLIENT') private svix: Svix,\n+    private logger: PinoLogger,\n+    private environmentRepository: EnvironmentRepository\n+  ) {\n+    this.logger.setContext(LOG_CONTEXT);",
        "comment_created_at": "2025-05-15T07:37:15+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "not a huge one, just for consistency. \r\n```suggestion\r\n    this.logger.setContext(this.constructor.name);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2063304774",
    "pr_number": 8199,
    "pr_file": "apps/api/src/app/inbox/usecases/snooze-notification/snooze-notification.usecase.ts",
    "created_at": "2025-04-28T09:41:43+00:00",
    "commented_code": "+import {\n+  Injectable,\n+  NotFoundException,\n+  InternalServerErrorException,\n+  HttpException,\n+  NotImplementedException,\n+  HttpStatus,\n+} from '@nestjs/common';\n+import {\n+  CreateExecutionDetails,\n+  CreateExecutionDetailsCommand,\n+  DetailEnum,\n+  StandardQueueService,\n+  FeatureFlagsService,\n+  SYSTEM_LIMITS,\n+  PinoLogger,\n+} from '@novu/application-generic';\n+import {\n+  JobEntity,\n+  JobRepository,\n+  MessageRepository,\n+  MessageEntity,\n+  OrganizationEntity,\n+  EnvironmentEntity,\n+  UserEntity,\n+  CommunityOrganizationRepository,\n+} from '@novu/dal';\n+import {\n+  ApiServiceLevelEnum,\n+  ChannelTypeEnum,\n+  ExecutionDetailsSourceEnum,\n+  ExecutionDetailsStatusEnum,\n+  FeatureFlagsKeysEnum,\n+  FeatureNameEnum,\n+  getFeatureForTierAsNumber,\n+  JobStatusEnum,\n+} from '@novu/shared';\n+import { v4 as uuidv4 } from 'uuid';\n+import { SnoozeNotificationCommand } from './snooze-notification.command';\n+import { MarkNotificationAs } from '../mark-notification-as/mark-notification-as.usecase';\n+import { MarkNotificationAsCommand } from '../mark-notification-as/mark-notification-as.command';\n+import { InboxNotification } from '../../utils/types';\n+\n+const LOG_CONTEXT = 'SnoozeNotification';\n+\n+@Injectable()\n+export class SnoozeNotification {\n+  private readonly RETRY_ATTEMPTS = 3;\n+\n+  constructor(\n+    private readonly logger: PinoLogger,\n+    private messageRepository: MessageRepository,\n+    private jobRepository: JobRepository,\n+    private standardQueueService: StandardQueueService,\n+    private organizationRepository: CommunityOrganizationRepository,\n+    private createExecutionDetails: CreateExecutionDetails,\n+    private markNotificationAs: MarkNotificationAs,\n+    private featureFlagsService: FeatureFlagsService\n+  ) {}\n+\n+  public async execute(command: SnoozeNotificationCommand): Promise<InboxNotification> {\n+    await this.isSnoozeEnabled(command);\n+\n+    const notification = await this.findNotification(command);\n+    const delayAmount = this.calculateDelayInMs(command.snoozeUntil);\n+    await this.validateDelayDuration(command, delayAmount);\n+\n+    try {\n+      let scheduledJob = {} as JobEntity;\n+      let snoozedNotification = {} as InboxNotification;\n+\n+      await this.messageRepository.withTransaction(async () => {\n+        scheduledJob = await this.createScheduledUnsnoozeJob(notification, delayAmount);\n+        snoozedNotification = await this.markNotificationAsSnoozed(command);\n+        await this.enqueueJob(scheduledJob, delayAmount);\n+      });\n+\n+      // fire and forget\n+      this.createExecutionDetails\n+        .execute(\n+          CreateExecutionDetailsCommand.create({\n+            ...CreateExecutionDetailsCommand.getDetailsFromJob(scheduledJob),\n+            detail: DetailEnum.MESSAGE_SNOOZED,\n+            source: ExecutionDetailsSourceEnum.INTERNAL,\n+            status: ExecutionDetailsStatusEnum.PENDING,\n+            isTest: false,\n+            isRetry: false,\n+          })\n+        )\n+        .catch((error) => {\n+          this.logger.error({ err: error }, 'Failed to create execution details', LOG_CONTEXT);",
    "repo_full_name": "novuhq/novu",
    "discussion_comments": [
      {
        "comment_id": "2063304774",
        "repo_full_name": "novuhq/novu",
        "pr_number": 8199,
        "pr_file": "apps/api/src/app/inbox/usecases/snooze-notification/snooze-notification.usecase.ts",
        "discussion_id": "2063304774",
        "commented_code": "@@ -0,0 +1,242 @@\n+import {\n+  Injectable,\n+  NotFoundException,\n+  InternalServerErrorException,\n+  HttpException,\n+  NotImplementedException,\n+  HttpStatus,\n+} from '@nestjs/common';\n+import {\n+  CreateExecutionDetails,\n+  CreateExecutionDetailsCommand,\n+  DetailEnum,\n+  StandardQueueService,\n+  FeatureFlagsService,\n+  SYSTEM_LIMITS,\n+  PinoLogger,\n+} from '@novu/application-generic';\n+import {\n+  JobEntity,\n+  JobRepository,\n+  MessageRepository,\n+  MessageEntity,\n+  OrganizationEntity,\n+  EnvironmentEntity,\n+  UserEntity,\n+  CommunityOrganizationRepository,\n+} from '@novu/dal';\n+import {\n+  ApiServiceLevelEnum,\n+  ChannelTypeEnum,\n+  ExecutionDetailsSourceEnum,\n+  ExecutionDetailsStatusEnum,\n+  FeatureFlagsKeysEnum,\n+  FeatureNameEnum,\n+  getFeatureForTierAsNumber,\n+  JobStatusEnum,\n+} from '@novu/shared';\n+import { v4 as uuidv4 } from 'uuid';\n+import { SnoozeNotificationCommand } from './snooze-notification.command';\n+import { MarkNotificationAs } from '../mark-notification-as/mark-notification-as.usecase';\n+import { MarkNotificationAsCommand } from '../mark-notification-as/mark-notification-as.command';\n+import { InboxNotification } from '../../utils/types';\n+\n+const LOG_CONTEXT = 'SnoozeNotification';\n+\n+@Injectable()\n+export class SnoozeNotification {\n+  private readonly RETRY_ATTEMPTS = 3;\n+\n+  constructor(\n+    private readonly logger: PinoLogger,\n+    private messageRepository: MessageRepository,\n+    private jobRepository: JobRepository,\n+    private standardQueueService: StandardQueueService,\n+    private organizationRepository: CommunityOrganizationRepository,\n+    private createExecutionDetails: CreateExecutionDetails,\n+    private markNotificationAs: MarkNotificationAs,\n+    private featureFlagsService: FeatureFlagsService\n+  ) {}\n+\n+  public async execute(command: SnoozeNotificationCommand): Promise<InboxNotification> {\n+    await this.isSnoozeEnabled(command);\n+\n+    const notification = await this.findNotification(command);\n+    const delayAmount = this.calculateDelayInMs(command.snoozeUntil);\n+    await this.validateDelayDuration(command, delayAmount);\n+\n+    try {\n+      let scheduledJob = {} as JobEntity;\n+      let snoozedNotification = {} as InboxNotification;\n+\n+      await this.messageRepository.withTransaction(async () => {\n+        scheduledJob = await this.createScheduledUnsnoozeJob(notification, delayAmount);\n+        snoozedNotification = await this.markNotificationAsSnoozed(command);\n+        await this.enqueueJob(scheduledJob, delayAmount);\n+      });\n+\n+      // fire and forget\n+      this.createExecutionDetails\n+        .execute(\n+          CreateExecutionDetailsCommand.create({\n+            ...CreateExecutionDetailsCommand.getDetailsFromJob(scheduledJob),\n+            detail: DetailEnum.MESSAGE_SNOOZED,\n+            source: ExecutionDetailsSourceEnum.INTERNAL,\n+            status: ExecutionDetailsStatusEnum.PENDING,\n+            isTest: false,\n+            isRetry: false,\n+          })\n+        )\n+        .catch((error) => {\n+          this.logger.error({ err: error }, 'Failed to create execution details', LOG_CONTEXT);",
        "comment_created_at": "2025-04-28T09:41:43+00:00",
        "comment_author": "djabarovgeorge",
        "comment_body": "unfortunately, this won\u2019t fully print the context. \ud83d\ude1e\r\nwhat I actually wanted was to create a new interface for the logger to make it stricter and safer to use.\r\nhowever, without rebuilding the entire LoggerModule, I don't see a clean way to enforce stricter typing or structure around the logger itself.\r\n\r\nso at the moment, I\u2019m limited to what we have.\r\n\r\nTo solve it you would need to `this.logger.setContext(this.constructor.name);`, then remove the context in this line as it redundant and wont be used.\r\n```suggestion\r\n          this.logger.error({ err: error }, 'Failed to create execution details');\r\n```",
        "pr_file_module": null
      }
    ]
  }
]