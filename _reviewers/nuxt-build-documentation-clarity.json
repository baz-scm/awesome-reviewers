[
  {
    "discussion_id": "1928426963",
    "pr_number": 30729,
    "pr_file": "docs/2.guide/1.concepts/3.rendering.md",
    "created_at": "2025-01-24T09:56:19+00:00",
    "commented_code": "The `200.html` and `404.html` might be useful for the hosting provider you are using.\n \n+#### Skip default routes generation\n+The default files `index.html`, `200.html` and `404.html` are part of Nuxt and often helpful. However, if you need to prevent these files from being generated in your build, you can use the `\"prerender:generate\"` hook from [Nitro](https://nuxt.com/docs/getting-started/prerendering#prerendergenerate-nitro-hook).",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1928426963",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 30729,
        "pr_file": "docs/2.guide/1.concepts/3.rendering.md",
        "discussion_id": "1928426963",
        "commented_code": "@@ -126,6 +126,27 @@ This will produce three files:\n \n The `200.html` and `404.html` might be useful for the hosting provider you are using.\n \n+#### Skip default routes generation\n+The default files `index.html`, `200.html` and `404.html` are part of Nuxt and often helpful. However, if you need to prevent these files from being generated in your build, you can use the `\"prerender:generate\"` hook from [Nitro](https://nuxt.com/docs/getting-started/prerendering#prerendergenerate-nitro-hook).",
        "comment_created_at": "2025-01-24T09:56:19+00:00",
        "comment_author": "danielroe",
        "comment_body": "```suggestion\r\n\r\nWhen prerendering a client-rendered app, Nuxt will generate `index.html`, `200.html` and `404.html` files by default. However, if you need to prevent any (or all) of these files from being generated in your build, you can use the `'prerender:generate'` hook from [Nitro](/docs/getting-started/prerendering#prerendergenerate-nitro-hook).\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1186712701",
    "pr_number": 20636,
    "pr_file": "docs/1.getting-started/1.introduction.md",
    "created_at": "2023-05-06T15:38:28+00:00",
    "commented_code": "In development, it uses Rollup and Node.js workers for your server code and context isolation. It also generates your server API by reading files in `server/api/` and server middleware from `server/middleware/`.\n \n-In production, Nitro builds your app and server into one universal `.output` directory. This output is light: minified and removed from any Node.js modules (except polyfills). You can deploy this output on any system supporting JavaScript, from Node.js, Serverless, Workers, Edge-side rendering or purely static.\n+In production, Nitro builds your app and server into one universal `.output` directory. This output is light: minified and removed from any Node.js modules (except polyfills). You can deploy this output on any system supporting JavaScript, from Node.js, Serverless, Workers, Edge-side rendering, or purely static.",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1186712701",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/1.getting-started/1.introduction.md",
        "discussion_id": "1186712701",
        "commented_code": "@@ -54,7 +54,7 @@ The Nuxt server engine [Nitro](https://nitro.unjs.io) unlocks new full-stack cap\n \n In development, it uses Rollup and Node.js workers for your server code and context isolation. It also generates your server API by reading files in `server/api/` and server middleware from `server/middleware/`.\n \n-In production, Nitro builds your app and server into one universal `.output` directory. This output is light: minified and removed from any Node.js modules (except polyfills). You can deploy this output on any system supporting JavaScript, from Node.js, Serverless, Workers, Edge-side rendering or purely static.\n+In production, Nitro builds your app and server into one universal `.output` directory. This output is light: minified and removed from any Node.js modules (except polyfills). You can deploy this output on any system supporting JavaScript, from Node.js, Serverless, Workers, Edge-side rendering, or purely static.",
        "comment_created_at": "2023-05-06T15:38:28+00:00",
        "comment_author": "DamianGlowala",
        "comment_body": "```suggestion\r\nIn production, Nitro builds your app and server into one universal `.output` directory. This output is light: minified and removed from any Node.js modules (except polyfills). You can deploy it on any system supporting JavaScript, including serverless and edge environments, or pre-render for static hosting.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1192715249",
    "pr_number": 20636,
    "pr_file": "docs/2.guide/3.going-further/1.internals.md",
    "created_at": "2023-05-12T19:07:33+00:00",
    "commented_code": "}\n ```\n \n-For more details, check out [the source code](https://github.com/nuxt/nuxt/blob/main/packages/nuxt/src/app/nuxt.ts).\n+For more details check out the [source code](https://github.com/nuxt/nuxt/blob/main/packages/nuxt/src/app/nuxt.ts).\n \n ## Runtime Context vs. Build Context\n \n Nuxt builds and bundles project using Node.js but also has a runtime side.\n \n-While both areas can be extended, that runtime context is isolated from build-time. Therefore, they are not supposed to share state, code, or context other than runtime configuration!\n+While both runtime and build-time contexts are extendable, they are isolated from each other. Therefore, they are not meant to share state, code, or context other than runtime configuration!\n \n-`nuxt.config` and [Nuxt Modules](/docs/guide/going-further/modules) can be used to extend the build context, and [Nuxt Plugins](/docs/guide/directory-structure/plugins) can be used to extend runtime.\n+`nuxt.config` and [Nuxt Modules](/docs/guide/going-further/modules) can be used to extend the build context, whereas [Nuxt Plugins](/docs/guide/directory-structure/plugins) can be used to extend runtime.\n \n When building an application for production, `nuxi build` will generate a standalone build\n  in the `.output` directory, independent of `nuxt.config` and [Nuxt modules](/docs/guide/going-further/modules).",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1192715249",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/2.guide/3.going-further/1.internals.md",
        "discussion_id": "1192715249",
        "commented_code": "@@ -70,15 +70,15 @@ const nuxtApp = {\n }\n ```\n \n-For more details, check out [the source code](https://github.com/nuxt/nuxt/blob/main/packages/nuxt/src/app/nuxt.ts).\n+For more details check out the [source code](https://github.com/nuxt/nuxt/blob/main/packages/nuxt/src/app/nuxt.ts).\n \n ## Runtime Context vs. Build Context\n \n Nuxt builds and bundles project using Node.js but also has a runtime side.\n \n-While both areas can be extended, that runtime context is isolated from build-time. Therefore, they are not supposed to share state, code, or context other than runtime configuration!\n+While both runtime and build-time contexts are extendable, they are isolated from each other. Therefore, they are not meant to share state, code, or context other than runtime configuration!\n \n-`nuxt.config` and [Nuxt Modules](/docs/guide/going-further/modules) can be used to extend the build context, and [Nuxt Plugins](/docs/guide/directory-structure/plugins) can be used to extend runtime.\n+`nuxt.config` and [Nuxt Modules](/docs/guide/going-further/modules) can be used to extend the build context, whereas [Nuxt Plugins](/docs/guide/directory-structure/plugins) can be used to extend runtime.\n \n When building an application for production, `nuxi build` will generate a standalone build\n  in the `.output` directory, independent of `nuxt.config` and [Nuxt modules](/docs/guide/going-further/modules).",
        "comment_created_at": "2023-05-12T19:07:33+00:00",
        "comment_author": "DamianGlowala",
        "comment_body": "```suggestion\r\nWhen building an application for production, `nuxi build` will generate a standalone build in the `.output` directory, independent of `nuxt.config` and [Nuxt modules](/docs/guide/going-further/modules).\r\n```",
        "pr_file_module": null
      }
    ]
  }
]