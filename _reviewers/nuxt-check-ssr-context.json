[
  {
    "discussion_id": "1874238624",
    "pr_number": 29957,
    "pr_file": "packages/nuxt/src/app/components/nuxt-layout.ts",
    "created_at": "2024-12-07T03:43:18+00:00",
    "commented_code": "// @ts-expect-error virtual file\n import { appLayoutTransition as defaultLayoutTransition } from '#build/nuxt.config.mjs'\n \n-// TODO: revert back to defineAsyncComponent when https://github.com/vuejs/core/issues/6638 is resolved\n const LayoutLoader = defineComponent({\n   name: 'LayoutLoader',\n   inheritAttrs: false,\n   props: {\n     name: String,\n     layoutProps: Object,\n   },\n-  async setup (props, context) {\n+  setup (props, context) {\n     // This is a deliberate hack - this component must always be called with an explicit key to ensure\n     // that setup reruns when the name changes.\n-\n-    const LayoutComponent = await layouts[props.name]().then((r: any) => r.default || r)\n-\n-    return () => h(LayoutComponent, props.layoutProps, context.slots)\n+    return () => h(layouts[props.name], props.layoutProps, context.slots)",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1874238624",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 29957,
        "pr_file": "packages/nuxt/src/app/components/nuxt-layout.ts",
        "discussion_id": "1874238624",
        "commented_code": "@@ -16,21 +16,17 @@ import layouts from '#build/layouts'\n // @ts-expect-error virtual file\n import { appLayoutTransition as defaultLayoutTransition } from '#build/nuxt.config.mjs'\n \n-// TODO: revert back to defineAsyncComponent when https://github.com/vuejs/core/issues/6638 is resolved\n const LayoutLoader = defineComponent({\n   name: 'LayoutLoader',\n   inheritAttrs: false,\n   props: {\n     name: String,\n     layoutProps: Object,\n   },\n-  async setup (props, context) {\n+  setup (props, context) {\n     // This is a deliberate hack - this component must always be called with an explicit key to ensure\n     // that setup reruns when the name changes.\n-\n-    const LayoutComponent = await layouts[props.name]().then((r: any) => r.default || r)\n-\n-    return () => h(LayoutComponent, props.layoutProps, context.slots)\n+    return () => h(layouts[props.name], props.layoutProps, context.slots)",
        "comment_created_at": "2024-12-07T03:43:18+00:00",
        "comment_author": "adamdehaven",
        "comment_body": "@danielroe is there any chance that the removal of `await` before calling `layouts[props.name]` here (or another change in this PR) could cause a hydration error in some scenarios? \r\n\r\nAfter upgrading to `v3.14.1592` (the only change in my project) I'm now seeing `Hydration completed but contains mismatches` on a page that only contains a NuxtLayout and a paragraph tag in the default slot.\r\n\r\n<img width=\"640\" alt=\"hydration error\" src=\"https://github.com/user-attachments/assets/99c8e051-0db9-4842-9c52-9783d6d2d1d8\">\r\n\r\n\r\nIt doesn't occur when the dev server is running; only when building and running the build (e.g. with `wrangler`).\r\n\r\nI've tried putting together a reproduction but (of course) it doesn't happen there as of yet. \r\n\r\nDo you have any suggestions on how to further triage? Typically I'd start disabling modules, etc. but in a larger project, that isn't the easiest task since so many things depend on others \ud83d\ude2c ",
        "pr_file_module": null
      },
      {
        "comment_id": "1874240959",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 29957,
        "pr_file": "packages/nuxt/src/app/components/nuxt-layout.ts",
        "discussion_id": "1874238624",
        "commented_code": "@@ -16,21 +16,17 @@ import layouts from '#build/layouts'\n // @ts-expect-error virtual file\n import { appLayoutTransition as defaultLayoutTransition } from '#build/nuxt.config.mjs'\n \n-// TODO: revert back to defineAsyncComponent when https://github.com/vuejs/core/issues/6638 is resolved\n const LayoutLoader = defineComponent({\n   name: 'LayoutLoader',\n   inheritAttrs: false,\n   props: {\n     name: String,\n     layoutProps: Object,\n   },\n-  async setup (props, context) {\n+  setup (props, context) {\n     // This is a deliberate hack - this component must always be called with an explicit key to ensure\n     // that setup reruns when the name changes.\n-\n-    const LayoutComponent = await layouts[props.name]().then((r: any) => r.default || r)\n-\n-    return () => h(LayoutComponent, props.layoutProps, context.slots)\n+    return () => h(layouts[props.name], props.layoutProps, context.slots)",
        "comment_created_at": "2024-12-07T04:01:02+00:00",
        "comment_author": "adamdehaven",
        "comment_body": "It actually also seems to break styles injected during SSR via `useHead` \ud83e\udd14 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1874261844",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 29957,
        "pr_file": "packages/nuxt/src/app/components/nuxt-layout.ts",
        "discussion_id": "1874238624",
        "commented_code": "@@ -16,21 +16,17 @@ import layouts from '#build/layouts'\n // @ts-expect-error virtual file\n import { appLayoutTransition as defaultLayoutTransition } from '#build/nuxt.config.mjs'\n \n-// TODO: revert back to defineAsyncComponent when https://github.com/vuejs/core/issues/6638 is resolved\n const LayoutLoader = defineComponent({\n   name: 'LayoutLoader',\n   inheritAttrs: false,\n   props: {\n     name: String,\n     layoutProps: Object,\n   },\n-  async setup (props, context) {\n+  setup (props, context) {\n     // This is a deliberate hack - this component must always be called with an explicit key to ensure\n     // that setup reruns when the name changes.\n-\n-    const LayoutComponent = await layouts[props.name]().then((r: any) => r.default || r)\n-\n-    return () => h(LayoutComponent, props.layoutProps, context.slots)\n+    return () => h(layouts[props.name], props.layoutProps, context.slots)",
        "comment_created_at": "2024-12-07T05:03:23+00:00",
        "comment_author": "adamdehaven",
        "comment_body": "Put together an issue; I'm not confident this PR is the root of the issue, but it's my best guess lol\r\nhttps://github.com/nuxt/nuxt/issues/30188",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1957029655",
    "pr_number": 30579,
    "pr_file": "test/fixtures/basic/plugins/my-plugin.ts",
    "created_at": "2025-02-15T04:43:27+00:00",
    "commented_code": "-export default defineNuxtPlugin(() => {\n-  useHead({\n-    titleTemplate: '%s - Fixture',\n-  })\n-  const path = useRoute()?.path\n-  return {\n-    provide: {\n-      myPlugin: () => 'Injected by my-plugin',\n-      path: () => path,\n-    },\n-  }\n+export default defineNuxtPlugin({",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1957029655",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 30579,
        "pr_file": "test/fixtures/basic/plugins/my-plugin.ts",
        "discussion_id": "1957029655",
        "commented_code": "@@ -1,12 +1,17 @@\n-export default defineNuxtPlugin(() => {\n-  useHead({\n-    titleTemplate: '%s - Fixture',\n-  })\n-  const path = useRoute()?.path\n-  return {\n-    provide: {\n-      myPlugin: () => 'Injected by my-plugin',\n-      path: () => path,\n-    },\n-  }\n+export default defineNuxtPlugin({",
        "comment_created_at": "2025-02-15T04:43:27+00:00",
        "comment_author": "harlan-zw",
        "comment_body": "I don't think `useHead()` was working from plugins for server components previously :thinking: Most likely due to the context not being set and v1 Unhead not warning when context wasn't available.\r\n\r\nWe inadvertently fixed this in this PR but then it caused the test snapshots to break, moving this to not run within a server component was the easiest fix.",
        "pr_file_module": null
      },
      {
        "comment_id": "1957055333",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 30579,
        "pr_file": "test/fixtures/basic/plugins/my-plugin.ts",
        "discussion_id": "1957029655",
        "commented_code": "@@ -1,12 +1,17 @@\n-export default defineNuxtPlugin(() => {\n-  useHead({\n-    titleTemplate: '%s - Fixture',\n-  })\n-  const path = useRoute()?.path\n-  return {\n-    provide: {\n-      myPlugin: () => 'Injected by my-plugin',\n-      path: () => path,\n-    },\n-  }\n+export default defineNuxtPlugin({",
        "comment_created_at": "2025-02-15T06:50:58+00:00",
        "comment_author": "danielroe",
        "comment_body": "cc: @huang-julien ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1802603490",
    "pr_number": 29566,
    "pr_file": "packages/nuxt/src/app/composables/asyncData.ts",
    "created_at": "2024-10-16T08:26:02+00:00",
    "commented_code": "if (hasScope) {\n       onScopeDispose(off)\n     }\n+\n+    let pollTimer: number | null = null\n+\n+    const startPolling = () => {\n+      if (options.pollEvery && !pollTimer) {",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1802603490",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 29566,
        "pr_file": "packages/nuxt/src/app/composables/asyncData.ts",
        "discussion_id": "1802603490",
        "commented_code": "@@ -391,6 +396,45 @@ export function useAsyncData<\n     if (hasScope) {\n       onScopeDispose(off)\n     }\n+\n+    let pollTimer: number | null = null\n+\n+    const startPolling = () => {\n+      if (options.pollEvery && !pollTimer) {",
        "comment_created_at": "2024-10-16T08:26:02+00:00",
        "comment_author": "daniluk4000",
        "comment_body": "Let's add import.meta.client check here to prevent this from happening on SSR",
        "pr_file_module": null
      }
    ]
  }
]