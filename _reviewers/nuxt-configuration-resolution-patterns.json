[
  {
    "discussion_id": "2179438903",
    "pr_number": 32510,
    "pr_file": "packages/nuxt/src/pages/module.ts",
    "created_at": "2025-07-02T08:22:56+00:00",
    "commented_code": "}\n \n     // Extract macros from pages\n-    const extractedKeys = [...defaultExtractionKeys, 'middleware', ...nuxt.options.experimental.extraPageMetaExtractionKeys]\n+    const extraPageMetaExtractionKeys = nuxt.options?.experimental?.extraPageMetaExtractionKeys",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "2179438903",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 32510,
        "pr_file": "packages/nuxt/src/pages/module.ts",
        "discussion_id": "2179438903",
        "commented_code": "@@ -489,7 +489,12 @@ export default defineNuxtModule({\n     }\n \n     // Extract macros from pages\n-    const extractedKeys = [...defaultExtractionKeys, 'middleware', ...nuxt.options.experimental.extraPageMetaExtractionKeys]\n+    const extraPageMetaExtractionKeys = nuxt.options?.experimental?.extraPageMetaExtractionKeys",
        "comment_created_at": "2025-07-02T08:22:56+00:00",
        "comment_author": "danielroe",
        "comment_body": "I think we could probably just do:\r\n\r\n```suggestion\r\n    const extraPageMetaExtractionKeys = nuxt.options?.experimental?.extraPageMetaExtractionKeys || []\r\n```\r\n\r\n... as the issue is presumably that it's not defined, rather than set to a string or something like that",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1864193622",
    "pr_number": 29776,
    "pr_file": "packages/schema/src/config/app.ts",
    "created_at": "2024-11-30T09:56:40+00:00",
    "commented_code": "* Customize Nuxt Nuxt SpaLoader element attributes.\n      * @type {typeof import('@unhead/schema').HtmlAttributes}\n      */\n-    spaLoaderAttrs: {},\n+    spaLoaderAttrs: {",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1864193622",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 29776,
        "pr_file": "packages/schema/src/config/app.ts",
        "discussion_id": "1864193622",
        "commented_code": "@@ -274,7 +274,9 @@ export default defineUntypedSchema({\n      * Customize Nuxt Nuxt SpaLoader element attributes.\n      * @type {typeof import('@unhead/schema').HtmlAttributes}\n      */\n-    spaLoaderAttrs: {},\n+    spaLoaderAttrs: {",
        "comment_created_at": "2024-11-30T09:56:40+00:00",
        "comment_author": "RokeAlvo",
        "comment_body": "maybe, better?\r\n```\r\n    spaLoaderAttrs: {\r\n<<<<<<< HEAD\r\n      $resolve: (val: undefined | null | Record<string, unknown>) => {\r\n        return defu(val, {\r\n          id: val?.id ?? '__nuxt-spa-loader',\r\n        })\r\n      },\r\n=======\r\n      id: '__nuxt-loader',\r\n>>>>>>> f4106a79061f41753ee9caff028d8755272634af\r\n    },\r\n  },\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1864233719",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 29776,
        "pr_file": "packages/schema/src/config/app.ts",
        "discussion_id": "1864193622",
        "commented_code": "@@ -274,7 +274,9 @@ export default defineUntypedSchema({\n      * Customize Nuxt Nuxt SpaLoader element attributes.\n      * @type {typeof import('@unhead/schema').HtmlAttributes}\n      */\n-    spaLoaderAttrs: {},\n+    spaLoaderAttrs: {",
        "comment_created_at": "2024-11-30T12:04:26+00:00",
        "comment_author": "danielroe",
        "comment_body": "not sure I understand \r\n\r\nah. I get what you're saying. that's actually the default behavior of nuxt schema if you pass a raw object",
        "pr_file_module": null
      },
      {
        "comment_id": "1864747413",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 29776,
        "pr_file": "packages/schema/src/config/app.ts",
        "discussion_id": "1864193622",
        "commented_code": "@@ -274,7 +274,9 @@ export default defineUntypedSchema({\n      * Customize Nuxt Nuxt SpaLoader element attributes.\n      * @type {typeof import('@unhead/schema').HtmlAttributes}\n      */\n-    spaLoaderAttrs: {},\n+    spaLoaderAttrs: {",
        "comment_created_at": "2024-12-01T05:58:07+00:00",
        "comment_author": "RokeAlvo",
        "comment_body": "So, if I pass\r\n\r\n```spaLoaderAttrs: { class: \"some-class\" }```\r\nit will ultimately result in\r\n\r\n```{ class: \"some-class\", id: \"__nuxt-loader\" }```\r\nright?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2121514995",
    "pr_number": 32119,
    "pr_file": "packages/schema/src/config/webpack.ts",
    "created_at": "2025-06-02T15:31:06+00:00",
    "commented_code": "import { defu } from 'defu'\n+import { basename, resolve } from 'pathe'\n import { defineResolvers } from '../utils/definition'\n \n export default defineResolvers({\n   webpack: {\n+    resolve: {\n+      alias: {\n+        $resolve: async (val, get) => {\n+          const [srcDir, assetsDir, publicDir] = await Promise.all([\n+            get('srcDir'),\n+            get('dir.assets'),\n+            get('dir.public'),\n+          ])\n+          return {\n+            [basename(assetsDir)]: resolve(srcDir, assetsDir),\n+            [basename(publicDir)]: resolve(srcDir, publicDir),\n+            ...typeof val === 'object' ? val : {},\n+          }",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "2121514995",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 32119,
        "pr_file": "packages/schema/src/config/webpack.ts",
        "discussion_id": "2121514995",
        "commented_code": "@@ -1,8 +1,25 @@\n import { defu } from 'defu'\n+import { basename, resolve } from 'pathe'\n import { defineResolvers } from '../utils/definition'\n \n export default defineResolvers({\n   webpack: {\n+    resolve: {\n+      alias: {\n+        $resolve: async (val, get) => {\n+          const [srcDir, assetsDir, publicDir] = await Promise.all([\n+            get('srcDir'),\n+            get('dir.assets'),\n+            get('dir.public'),\n+          ])\n+          return {\n+            [basename(assetsDir)]: resolve(srcDir, assetsDir),\n+            [basename(publicDir)]: resolve(srcDir, publicDir),\n+            ...typeof val === 'object' ? val : {},\n+          }",
        "comment_created_at": "2025-06-02T15:31:06+00:00",
        "comment_author": "danielroe",
        "comment_body": "```suggestion\r\n          const [srcDir, assetsDir] = await Promise.all([\r\n            get('srcDir'),\r\n            get('dir.assets'),\r\n          ])\r\n          return {\r\n            [basename(assetsDir)]: resolve(srcDir, assetsDir),\r\n            ...typeof val === 'object' ? val : {},\r\n          }\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2087873482",
    "pr_number": 32103,
    "pr_file": "packages/schema/src/config/experimental.ts",
    "created_at": "2025-05-14T01:25:55+00:00",
    "commented_code": "*/\n     pendingWhenIdle: {\n       $resolve: async (val, get) => {\n-        return typeof val === 'boolean' ? val : (await get('future')).compatibilityVersion !== 4\n+        return typeof val === 'boolean' ? val : (await get('future')).compatibilityVersion === 4",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "2087873482",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 32103,
        "pr_file": "packages/schema/src/config/experimental.ts",
        "discussion_id": "2087873482",
        "commented_code": "@@ -637,7 +637,7 @@ export default defineResolvers({\n      */\n     pendingWhenIdle: {\n       $resolve: async (val, get) => {\n-        return typeof val === 'boolean' ? val : (await get('future')).compatibilityVersion !== 4\n+        return typeof val === 'boolean' ? val : (await get('future')).compatibilityVersion === 4",
        "comment_created_at": "2025-05-14T01:25:55+00:00",
        "comment_author": "xjccc",
        "comment_body": "Emm.. It's always `true` is better?\r\n\r\n```\r\nreturn typeof val === 'boolean' ? val : true\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2087878713",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 32103,
        "pr_file": "packages/schema/src/config/experimental.ts",
        "discussion_id": "2087873482",
        "commented_code": "@@ -637,7 +637,7 @@ export default defineResolvers({\n      */\n     pendingWhenIdle: {\n       $resolve: async (val, get) => {\n-        return typeof val === 'boolean' ? val : (await get('future')).compatibilityVersion !== 4\n+        return typeof val === 'boolean' ? val : (await get('future')).compatibilityVersion === 4",
        "comment_created_at": "2025-05-14T01:33:01+00:00",
        "comment_author": "wattanx",
        "comment_body": "If it is always set to true, existing applications will break.\r\nOther features are opt-in so they don\u2019t affect existing applications, so I think this feature should be opt-in as well.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1721945445",
    "pr_number": 28576,
    "pr_file": "packages/schema/src/config/common.ts",
    "created_at": "2024-08-19T15:06:37+00:00",
    "commented_code": "function provideFallbackValues (obj: Record<string, any>) {\n   for (const key in obj) {\n-    if (typeof obj[key] === 'undefined' || obj[key] === null) {\n+    if (typeof obj[key] === 'undefined') {",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1721945445",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28576,
        "pr_file": "packages/schema/src/config/common.ts",
        "discussion_id": "1721945445",
        "commented_code": "@@ -597,7 +597,7 @@ export default defineUntypedSchema({\n \n function provideFallbackValues (obj: Record<string, any>) {\n   for (const key in obj) {\n-    if (typeof obj[key] === 'undefined' || obj[key] === null) {\n+    if (typeof obj[key] === 'undefined') {",
        "comment_created_at": "2024-08-19T15:06:37+00:00",
        "comment_author": "danielroe",
        "comment_body": "This is also shared in Nitro:\r\n\r\nhttps://github.com/unjs/nitro/blob/e4f687d32d4d6ec7bd7b011a59edb374b477fbf4/src/core/config/resolvers/runtime-config.ts#L31-L39\r\n\r\nBy doing this, the value is dropped out of `runtimeConfig` entirely and can't be overridden at runtime. See https://github.com/nuxt/nuxt/pull/18586 for more context.\r\n\r\nI recall doing it before, but if we want to allow setting these values to undefined/null values, we likely need to (re)investigate where the keys are being 'dropped' when serialised.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1730437820",
    "pr_number": 28700,
    "pr_file": "packages/schema/src/config/common.ts",
    "created_at": "2024-08-25T21:58:24+00:00",
    "commented_code": "*/\n   serverDir: {\n     $resolve: async (val: string | undefined, get): Promise<string> => {\n-      const isV4 = ((await get('future') as Record<string, unknown>).compatibilityVersion === 4)\n-\n-      return resolve(isV4 ? await get('rootDir') as string : await get('srcDir') as string, val ?? 'server')\n+      return resolve(await get('rootDir') as string, val ?? 'server')",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1730437820",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28700,
        "pr_file": "packages/schema/src/config/common.ts",
        "discussion_id": "1730437820",
        "commented_code": "@@ -156,9 +156,7 @@ export default defineUntypedSchema({\n    */\n   serverDir: {\n     $resolve: async (val: string | undefined, get): Promise<string> => {\n-      const isV4 = ((await get('future') as Record<string, unknown>).compatibilityVersion === 4)\n-\n-      return resolve(isV4 ? await get('rootDir') as string : await get('srcDir') as string, val ?? 'server')\n+      return resolve(await get('rootDir') as string, val ?? 'server')",
        "comment_created_at": "2024-08-25T21:58:24+00:00",
        "comment_author": "danielroe",
        "comment_body": "A little tweak required.\r\n\r\nif it's not v4 compat, then by default this should be `<srcDir>/server`. In v4 compat, it should be `<rootDir>/server`. If the user provides it then in either case it should be resolved relative to `<rootDir>`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1691668226",
    "pr_number": 28307,
    "pr_file": "packages/schema/src/config/vite.ts",
    "created_at": "2024-07-25T15:28:48+00:00",
    "commented_code": "},\n       },\n       script: {\n-        propsDestructure: {\n-          $resolve: async (val, get) => val ?? Boolean((await get('vue') as Record<string, any>).propsDestructure),\n-        },\n         hoistStatic: {\n           $resolve: async (val, get) => val ?? (await get('vue') as Record<string, any>).compilerOptions?.hoistStatic,\n         },\n       },\n+      features: {\n+        propsDestructure: {\n+          $resolve: async (val, get) => val ?? Boolean((await get('vue') as Record<string, any>).propsDestructure),",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1691668226",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28307,
        "pr_file": "packages/schema/src/config/vite.ts",
        "discussion_id": "1691668226",
        "commented_code": "@@ -56,13 +56,15 @@ export default defineUntypedSchema({\n         },\n       },\n       script: {\n-        propsDestructure: {\n-          $resolve: async (val, get) => val ?? Boolean((await get('vue') as Record<string, any>).propsDestructure),\n-        },\n         hoistStatic: {\n           $resolve: async (val, get) => val ?? (await get('vue') as Record<string, any>).compilerOptions?.hoistStatic,\n         },\n       },\n+      features: {\n+        propsDestructure: {\n+          $resolve: async (val, get) => val ?? Boolean((await get('vue') as Record<string, any>).propsDestructure),",
        "comment_created_at": "2024-07-25T15:28:48+00:00",
        "comment_author": "danielroe",
        "comment_body": "we should probably also check if `vue.script.propsDestructure` is set, for backwards-compatibility",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1662880620",
    "pr_number": 27975,
    "pr_file": "packages/schema/src/config/common.ts",
    "created_at": "2024-07-02T17:01:16+00:00",
    "commented_code": "'~~': rootDir,\n         '@@': rootDir,\n         [basename(assetsDir)]: join(srcDir, assetsDir),\n-        [basename(publicDir)]: join(srcDir, publicDir),\n+        [basename(publicDir)]: resolve(rootDir, publicDir),",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1662880620",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 27975,
        "pr_file": "packages/schema/src/config/common.ts",
        "discussion_id": "1662880620",
        "commented_code": "@@ -421,7 +421,7 @@ export default defineUntypedSchema({\n         '~~': rootDir,\n         '@@': rootDir,\n         [basename(assetsDir)]: join(srcDir, assetsDir),\n-        [basename(publicDir)]: join(srcDir, publicDir),\n+        [basename(publicDir)]: resolve(rootDir, publicDir),",
        "comment_created_at": "2024-07-02T17:01:16+00:00",
        "comment_author": "danielroe",
        "comment_body": "Nice find! I think:\n\n```suggestion\n        [basename(publicDir)]: resolve(srcDir, publicDir),\n```\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1662886212",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 27975,
        "pr_file": "packages/schema/src/config/common.ts",
        "discussion_id": "1662880620",
        "commented_code": "@@ -421,7 +421,7 @@ export default defineUntypedSchema({\n         '~~': rootDir,\n         '@@': rootDir,\n         [basename(assetsDir)]: join(srcDir, assetsDir),\n-        [basename(publicDir)]: join(srcDir, publicDir),\n+        [basename(publicDir)]: resolve(rootDir, publicDir),",
        "comment_created_at": "2024-07-02T17:05:45+00:00",
        "comment_author": "KazariEX",
        "comment_body": "Shouldn't the public folder be resolved from the ``rootDir``?",
        "pr_file_module": null
      },
      {
        "comment_id": "1662982898",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 27975,
        "pr_file": "packages/schema/src/config/common.ts",
        "discussion_id": "1662880620",
        "commented_code": "@@ -421,7 +421,7 @@ export default defineUntypedSchema({\n         '~~': rootDir,\n         '@@': rootDir,\n         [basename(assetsDir)]: join(srcDir, assetsDir),\n-        [basename(publicDir)]: join(srcDir, publicDir),\n+        [basename(publicDir)]: resolve(rootDir, publicDir),",
        "comment_created_at": "2024-07-02T18:26:20+00:00",
        "comment_author": "danielroe",
        "comment_body": "Previously `dir.public` was resolved relative to `srcDir`. For backwards compatibility `publicDir` is now fully resolved elsewhere in the schema, so effectively the first argument to `resolve` is ignored. But in the case a user sets it to `some-dir` this will be respected as `<srcDir>/some-dir`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1662986907",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 27975,
        "pr_file": "packages/schema/src/config/common.ts",
        "discussion_id": "1662880620",
        "commented_code": "@@ -421,7 +421,7 @@ export default defineUntypedSchema({\n         '~~': rootDir,\n         '@@': rootDir,\n         [basename(assetsDir)]: join(srcDir, assetsDir),\n-        [basename(publicDir)]: join(srcDir, publicDir),\n+        [basename(publicDir)]: resolve(rootDir, publicDir),",
        "comment_created_at": "2024-07-02T18:30:23+00:00",
        "comment_author": "KazariEX",
        "comment_body": "I got it, thanks for explanation.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1641053941",
    "pr_number": 27628,
    "pr_file": "packages/schema/src/config/vite.ts",
    "created_at": "2024-06-15T11:23:27+00:00",
    "commented_code": "},\n       },\n     },\n+    cacheDir: {\n+      $resolve: async (val, get) => val ?? (await get('cacheDir')),",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1641053941",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 27628,
        "pr_file": "packages/schema/src/config/vite.ts",
        "discussion_id": "1641053941",
        "commented_code": "@@ -109,5 +109,8 @@ export default defineUntypedSchema({\n         },\n       },\n     },\n+    cacheDir: {\n+      $resolve: async (val, get) => val ?? (await get('cacheDir')),",
        "comment_created_at": "2024-06-15T11:23:27+00:00",
        "comment_author": "danielroe",
        "comment_body": "I don't think we have a `nuxt.options.cacheDir` option set, so this should probably be something more like:\r\n\r\n```suggestion\r\n      $resolve: async (val, get) => val ?? resolve(await get('rootDir'), 'node_modules/.cache/vite'),\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1633740805",
    "pr_number": 27512,
    "pr_file": "packages/schema/src/config/common.ts",
    "created_at": "2024-06-10T19:36:50+00:00",
    "commented_code": "*/\n   extends: null,\n \n+  /**\n+   * Specify a compatibility date for your app.\n+   *\n+   * This is used to control the behavior of presets in Nitro, Nuxt Image\n+   * and other modules that may change behavior without a major version bump.\n+   *\n+   * We plan to improve the tooling around this feature in the future.\n+   *\n+   * @type {string | Record<string, string>}\n+   */\n+  compatibilityDate: formatDate(new Date()),",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1633740805",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 27512,
        "pr_file": "packages/schema/src/config/common.ts",
        "discussion_id": "1633740805",
        "commented_code": "@@ -20,6 +21,18 @@ export default defineUntypedSchema({\n    */\n   extends: null,\n \n+  /**\n+   * Specify a compatibility date for your app.\n+   *\n+   * This is used to control the behavior of presets in Nitro, Nuxt Image\n+   * and other modules that may change behavior without a major version bump.\n+   *\n+   * We plan to improve the tooling around this feature in the future.\n+   *\n+   * @type {string | Record<string, string>}\n+   */\n+  compatibilityDate: formatDate(new Date()),",
        "comment_created_at": "2024-06-10T19:36:50+00:00",
        "comment_author": "pi0",
        "comment_body": "- I think here defaulting to undefined would be the best so we know user either set it or not and later add prompt (PS: not opting-in users to latest, i guess would do same also in compatx util)\r\n- formatDate maybe can be in `$resolve`?\r\n- comptax has `DateString` we can use to add type checks for valid input ",
        "pr_file_module": null
      }
    ]
  }
]