[
  {
    "discussion_id": "1518002576",
    "pr_number": 25850,
    "pr_file": "packages/nuxt/src/app/composables/asyncData.ts",
    "created_at": "2024-03-08T17:05:59+00:00",
    "commented_code": "* Provide a function which returns cached data.\n    * A `null` or `undefined` return value will trigger a fetch.\n    * Default is `key => nuxt.isHydrating ? nuxt.payload.data[key] : nuxt.static.data[key]` which only caches data when payloadExtraction is enabled.\n+   * triggeredBy is a string that indicates in which case the cached data was requested.\n    */\n-  getCachedData?: (key: string) => DataT\n+  getCachedData?: (key: string, triggeredBy?: GetCachedDataTriggeredBy) => DataT",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1518002576",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 25850,
        "pr_file": "packages/nuxt/src/app/composables/asyncData.ts",
        "discussion_id": "1518002576",
        "commented_code": "@@ -60,8 +61,9 @@ export interface AsyncDataOptions<\n    * Provide a function which returns cached data.\n    * A `null` or `undefined` return value will trigger a fetch.\n    * Default is `key => nuxt.isHydrating ? nuxt.payload.data[key] : nuxt.static.data[key]` which only caches data when payloadExtraction is enabled.\n+   * triggeredBy is a string that indicates in which case the cached data was requested.\n    */\n-  getCachedData?: (key: string) => DataT\n+  getCachedData?: (key: string, triggeredBy?: GetCachedDataTriggeredBy) => DataT",
        "comment_created_at": "2024-03-08T17:05:59+00:00",
        "comment_author": "danielroe",
        "comment_body": "in honesty I'm not yet sure about this as an API. But I also might be missing something.\r\n\r\nWhat is the situation where passing `force` wouldn't be good enough?",
        "pr_file_module": null
      },
      {
        "comment_id": "1518185950",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 25850,
        "pr_file": "packages/nuxt/src/app/composables/asyncData.ts",
        "discussion_id": "1518002576",
        "commented_code": "@@ -60,8 +61,9 @@ export interface AsyncDataOptions<\n    * Provide a function which returns cached data.\n    * A `null` or `undefined` return value will trigger a fetch.\n    * Default is `key => nuxt.isHydrating ? nuxt.payload.data[key] : nuxt.static.data[key]` which only caches data when payloadExtraction is enabled.\n+   * triggeredBy is a string that indicates in which case the cached data was requested.\n    */\n-  getCachedData?: (key: string) => DataT\n+  getCachedData?: (key: string, triggeredBy?: GetCachedDataTriggeredBy) => DataT",
        "comment_created_at": "2024-03-08T19:11:50+00:00",
        "comment_author": "TheAlexLichter",
        "comment_body": "In a scenario where you can't set `force` because `watch` is triggered - https://github.com/nuxt/nuxt/issues/24332#issuecomment-1831016309",
        "pr_file_module": null
      },
      {
        "comment_id": "1525199741",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 25850,
        "pr_file": "packages/nuxt/src/app/composables/asyncData.ts",
        "discussion_id": "1518002576",
        "commented_code": "@@ -60,8 +61,9 @@ export interface AsyncDataOptions<\n    * Provide a function which returns cached data.\n    * A `null` or `undefined` return value will trigger a fetch.\n    * Default is `key => nuxt.isHydrating ? nuxt.payload.data[key] : nuxt.static.data[key]` which only caches data when payloadExtraction is enabled.\n+   * triggeredBy is a string that indicates in which case the cached data was requested.\n    */\n-  getCachedData?: (key: string) => DataT\n+  getCachedData?: (key: string, triggeredBy?: GetCachedDataTriggeredBy) => DataT",
        "comment_created_at": "2024-03-14T16:47:12+00:00",
        "comment_author": "danielroe",
        "comment_body": "on the force option for refresh, could we just add the force option and basically ignore hasCachedData when forced? And always respect hasCachedData when calling refresh from watch?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1525488488",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 25850,
        "pr_file": "packages/nuxt/src/app/composables/asyncData.ts",
        "discussion_id": "1518002576",
        "commented_code": "@@ -60,8 +61,9 @@ export interface AsyncDataOptions<\n    * Provide a function which returns cached data.\n    * A `null` or `undefined` return value will trigger a fetch.\n    * Default is `key => nuxt.isHydrating ? nuxt.payload.data[key] : nuxt.static.data[key]` which only caches data when payloadExtraction is enabled.\n+   * triggeredBy is a string that indicates in which case the cached data was requested.\n    */\n-  getCachedData?: (key: string) => DataT\n+  getCachedData?: (key: string, triggeredBy?: GetCachedDataTriggeredBy) => DataT",
        "comment_created_at": "2024-03-14T21:05:55+00:00",
        "comment_author": "TheAlexLichter",
        "comment_body": "Will update the PR \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1984207823",
    "pr_number": 31244,
    "pr_file": "packages/nuxt/src/app/composables/router.ts",
    "created_at": "2025-03-07T00:00:54+00:00",
    "commented_code": "// Early redirect on client-side\n   if (import.meta.client && !isExternal && inMiddleware) {\n     if (options?.replace) {\n-      return typeof to === 'string' ? { path: to, replace: true } : { ...to, replace: true }\n+      if (typeof to === 'string') {\n+        const { pathname, search, hash } = parseURL(to)\n+        return { path: pathname, query: parseQuery(search), hash, replace: true }",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1984207823",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 31244,
        "pr_file": "packages/nuxt/src/app/composables/router.ts",
        "discussion_id": "1984207823",
        "commented_code": "@@ -151,7 +151,11 @@ export const navigateTo = (to: RouteLocationRaw | undefined | null, options?: Na\n   // Early redirect on client-side\n   if (import.meta.client && !isExternal && inMiddleware) {\n     if (options?.replace) {\n-      return typeof to === 'string' ? { path: to, replace: true } : { ...to, replace: true }\n+      if (typeof to === 'string') {\n+        const { pathname, search, hash } = parseURL(to)\n+        return { path: pathname, query: parseQuery(search), hash, replace: true }",
        "comment_created_at": "2025-03-07T00:00:54+00:00",
        "comment_author": "danielroe",
        "comment_body": "we should probably omit hash/query if they are not present",
        "pr_file_module": null
      },
      {
        "comment_id": "1984219692",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 31244,
        "pr_file": "packages/nuxt/src/app/composables/router.ts",
        "discussion_id": "1984207823",
        "commented_code": "@@ -151,7 +151,11 @@ export const navigateTo = (to: RouteLocationRaw | undefined | null, options?: Na\n   // Early redirect on client-side\n   if (import.meta.client && !isExternal && inMiddleware) {\n     if (options?.replace) {\n-      return typeof to === 'string' ? { path: to, replace: true } : { ...to, replace: true }\n+      if (typeof to === 'string') {\n+        const { pathname, search, hash } = parseURL(to)\n+        return { path: pathname, query: parseQuery(search), hash, replace: true }",
        "comment_created_at": "2025-03-07T00:18:28+00:00",
        "comment_author": "murshex",
        "comment_body": "Ok done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1889938941",
    "pr_number": 30283,
    "pr_file": "packages/nuxt/src/app/composables/router.ts",
    "created_at": "2024-12-18T09:48:56+00:00",
    "commented_code": "// Early redirect on client-side\n   if (import.meta.client && !isExternal && inMiddleware) {\n-    return to\n+    const replace = options?.replace ?? false\n+    return typeof to === 'string' ? { path: to, replace } : { ...to, replace }",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1889938941",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 30283,
        "pr_file": "packages/nuxt/src/app/composables/router.ts",
        "discussion_id": "1889938941",
        "commented_code": "@@ -152,7 +152,8 @@ export const navigateTo = (to: RouteLocationRaw | undefined | null, options?: Na\n \n   // Early redirect on client-side\n   if (import.meta.client && !isExternal && inMiddleware) {\n-    return to\n+    const replace = options?.replace ?? false\n+    return typeof to === 'string' ? { path: to, replace } : { ...to, replace }",
        "comment_created_at": "2024-12-18T09:48:56+00:00",
        "comment_author": "danielroe",
        "comment_body": "```suggestion\r\n    if (options?.replace) {\r\n      return typeof to === 'string' ? { path: to, replace: true } : { ...to, replace: true }\r\n    }\r\n    return to\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1639569601",
    "pr_number": 26468,
    "pr_file": "packages/nuxt/src/app/utils.ts",
    "created_at": "2024-06-14T09:45:09+00:00",
    "commented_code": "-/** @since 3.9.0 */\n+import { useNuxtApp } from './nuxt'\n+\n export function toArray<T> (value: T | T[]): T[] {\n   return Array.isArray(value) ? value : [value]\n }\n+\n+type CallbackFn = () => void\n+type ObserveFn = (element: Element, callback: CallbackFn) => () => void\n+\n+export function useObserver (): { observe: ObserveFn } | undefined {\n+  if (import.meta.server) { return }",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1639569601",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26468,
        "pr_file": "packages/nuxt/src/app/utils.ts",
        "discussion_id": "1639569601",
        "commented_code": "@@ -1,4 +1,49 @@\n-/** @since 3.9.0 */\n+import { useNuxtApp } from './nuxt'\n+\n export function toArray<T> (value: T | T[]): T[] {\n   return Array.isArray(value) ? value : [value]\n }\n+\n+type CallbackFn = () => void\n+type ObserveFn = (element: Element, callback: CallbackFn) => () => void\n+\n+export function useObserver (): { observe: ObserveFn } | undefined {\n+  if (import.meta.server) { return }",
        "comment_created_at": "2024-06-14T09:45:09+00:00",
        "comment_author": "harlan-zw",
        "comment_body": "Having a single return type would be better, we could make a noop `observe` function, otherwise, end users need to do type juggling ",
        "pr_file_module": null
      },
      {
        "comment_id": "1639736368",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26468,
        "pr_file": "packages/nuxt/src/app/utils.ts",
        "discussion_id": "1639569601",
        "commented_code": "@@ -1,4 +1,49 @@\n-/** @since 3.9.0 */\n+import { useNuxtApp } from './nuxt'\n+\n export function toArray<T> (value: T | T[]): T[] {\n   return Array.isArray(value) ? value : [value]\n }\n+\n+type CallbackFn = () => void\n+type ObserveFn = (element: Element, callback: CallbackFn) => () => void\n+\n+export function useObserver (): { observe: ObserveFn } | undefined {\n+  if (import.meta.server) { return }",
        "comment_created_at": "2024-06-14T12:18:56+00:00",
        "comment_author": "GalacticHypernova",
        "comment_body": "Yea I was thinking about that, could that cause any issues if the server render returns a blank observer function?",
        "pr_file_module": null
      },
      {
        "comment_id": "1639852070",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26468,
        "pr_file": "packages/nuxt/src/app/utils.ts",
        "discussion_id": "1639569601",
        "commented_code": "@@ -1,4 +1,49 @@\n-/** @since 3.9.0 */\n+import { useNuxtApp } from './nuxt'\n+\n export function toArray<T> (value: T | T[]): T[] {\n   return Array.isArray(value) ? value : [value]\n }\n+\n+type CallbackFn = () => void\n+type ObserveFn = (element: Element, callback: CallbackFn) => () => void\n+\n+export function useObserver (): { observe: ObserveFn } | undefined {\n+  if (import.meta.server) { return }",
        "comment_created_at": "2024-06-14T13:43:13+00:00",
        "comment_author": "GalacticHypernova",
        "comment_body": "Should I create another overload of this that won't cache the observer in nuxtApp._observer? To allow multiple calls with different options?",
        "pr_file_module": null
      },
      {
        "comment_id": "1640127018",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26468,
        "pr_file": "packages/nuxt/src/app/utils.ts",
        "discussion_id": "1639569601",
        "commented_code": "@@ -1,4 +1,49 @@\n-/** @since 3.9.0 */\n+import { useNuxtApp } from './nuxt'\n+\n export function toArray<T> (value: T | T[]): T[] {\n   return Array.isArray(value) ? value : [value]\n }\n+\n+type CallbackFn = () => void\n+type ObserveFn = (element: Element, callback: CallbackFn) => () => void\n+\n+export function useObserver (): { observe: ObserveFn } | undefined {\n+  if (import.meta.server) { return }",
        "comment_created_at": "2024-06-14T17:06:42+00:00",
        "comment_author": "GalacticHypernova",
        "comment_body": "Reused the same one, saw that the logic matches",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1887058645",
    "pr_number": 30277,
    "pr_file": "packages/nuxt/src/app/composables/manifest.ts",
    "created_at": "2024-12-16T15:46:39+00:00",
    "commented_code": "}\n \n /** @since 3.7.4 */\n-export async function getRouteRules (url: string) {\n+export async function getRouteRules (url: string): Promise<Record<string, any>>\n+export async function getRouteRules (event: H3Event): Promise<NitroRouteRules>\n+export async function getRouteRules (url: string | H3Event) {",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1887058645",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 30277,
        "pr_file": "packages/nuxt/src/app/composables/manifest.ts",
        "discussion_id": "1887058645",
        "commented_code": "@@ -52,7 +54,10 @@ export function getAppManifest (): Promise<NuxtAppManifest> {\n }\n \n /** @since 3.7.4 */\n-export async function getRouteRules (url: string) {\n+export async function getRouteRules (url: string): Promise<Record<string, any>>\n+export async function getRouteRules (event: H3Event): Promise<NitroRouteRules>\n+export async function getRouteRules (url: string | H3Event) {",
        "comment_created_at": "2024-12-16T15:46:39+00:00",
        "comment_author": "pi0",
        "comment_body": "I wish we never overlapped but perhaps would be safer to deprecate `string` version and support `{ path: string }` interface? \r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1887070598",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 30277,
        "pr_file": "packages/nuxt/src/app/composables/manifest.ts",
        "discussion_id": "1887058645",
        "commented_code": "@@ -52,7 +54,10 @@ export function getAppManifest (): Promise<NuxtAppManifest> {\n }\n \n /** @since 3.7.4 */\n-export async function getRouteRules (url: string) {\n+export async function getRouteRules (url: string): Promise<Record<string, any>>\n+export async function getRouteRules (event: H3Event): Promise<NitroRouteRules>\n+export async function getRouteRules (url: string | H3Event) {",
        "comment_created_at": "2024-12-16T15:53:45+00:00",
        "comment_author": "danielroe",
        "comment_body": "the key thing that's missing from the nitro implementation is the ability to get the route rules for an arbitrary path... (or we would just use it on the server side)\r\n\r\nmight it be possible for nitro to handle a path rather than just the current event?",
        "pr_file_module": null
      },
      {
        "comment_id": "1887095940",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 30277,
        "pr_file": "packages/nuxt/src/app/composables/manifest.ts",
        "discussion_id": "1887058645",
        "commented_code": "@@ -52,7 +54,10 @@ export function getAppManifest (): Promise<NuxtAppManifest> {\n }\n \n /** @since 3.7.4 */\n-export async function getRouteRules (url: string) {\n+export async function getRouteRules (url: string): Promise<Record<string, any>>\n+export async function getRouteRules (event: H3Event): Promise<NitroRouteRules>\n+export async function getRouteRules (url: string | H3Event) {",
        "comment_created_at": "2024-12-16T16:07:13+00:00",
        "comment_author": "pi0",
        "comment_body": "Possible, yes but I'm afraid to do this because it imposes a new limit that route rule matcher cannot be aware of event context anymore (for example multi-tanency support would be an issue). In meanwhile, Nuxt impl can be API-compatible with event interface.",
        "pr_file_module": null
      },
      {
        "comment_id": "1887106985",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 30277,
        "pr_file": "packages/nuxt/src/app/composables/manifest.ts",
        "discussion_id": "1887058645",
        "commented_code": "@@ -52,7 +54,10 @@ export function getAppManifest (): Promise<NuxtAppManifest> {\n }\n \n /** @since 3.7.4 */\n-export async function getRouteRules (url: string) {\n+export async function getRouteRules (url: string): Promise<Record<string, any>>\n+export async function getRouteRules (event: H3Event): Promise<NitroRouteRules>\n+export async function getRouteRules (url: string | H3Event) {",
        "comment_created_at": "2024-12-16T16:14:02+00:00",
        "comment_author": "danielroe",
        "comment_body": "totally on-board with aligning them",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1501391248",
    "pr_number": 25932,
    "pr_file": "packages/nuxt/src/app/composables/loading-indicator.ts",
    "created_at": "2024-02-24T10:24:14+00:00",
    "commented_code": "let _throttle: any = null\n \n-  const start = () => set(0)\n+  const start = (force: boolean | null = true) => {",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1501391248",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 25932,
        "pr_file": "packages/nuxt/src/app/composables/loading-indicator.ts",
        "discussion_id": "1501391248",
        "commented_code": "@@ -50,7 +61,12 @@ function createLoadingIndicator (opts: Partial<LoadingIndicatorOpts> = {}) {\n \n   let _throttle: any = null\n \n-  const start = () => set(0)\n+  const start = (force: boolean | null = true) => {",
        "comment_created_at": "2024-02-24T10:24:14+00:00",
        "comment_author": "danielroe",
        "comment_body": "What about updating the signature so we call this with `start({ force: true})` (and also below with `finish`)? This makes it more explicit and allows passing more options in future.",
        "pr_file_module": null
      },
      {
        "comment_id": "1501393842",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 25932,
        "pr_file": "packages/nuxt/src/app/composables/loading-indicator.ts",
        "discussion_id": "1501391248",
        "commented_code": "@@ -50,7 +61,12 @@ function createLoadingIndicator (opts: Partial<LoadingIndicatorOpts> = {}) {\n \n   let _throttle: any = null\n \n-  const start = () => set(0)\n+  const start = (force: boolean | null = true) => {",
        "comment_created_at": "2024-02-24T10:32:09+00:00",
        "comment_author": "danielroe",
        "comment_body": "Sorry, to clarify I don't mean passing it as an option to `useLoadingIndicator` but to the `start` and `finish` functions.",
        "pr_file_module": null
      },
      {
        "comment_id": "1501394955",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 25932,
        "pr_file": "packages/nuxt/src/app/composables/loading-indicator.ts",
        "discussion_id": "1501391248",
        "commented_code": "@@ -50,7 +61,12 @@ function createLoadingIndicator (opts: Partial<LoadingIndicatorOpts> = {}) {\n \n   let _throttle: any = null\n \n-  const start = () => set(0)\n+  const start = (force: boolean | null = true) => {",
        "comment_created_at": "2024-02-24T10:35:40+00:00",
        "comment_author": "divine",
        "comment_body": "Hi Daniel!\r\n\r\nI thought about it as well but the better would be passing force as parameter to loading indicator instead.\r\n\r\nLet's say:\r\n1. LoadingIndicator starts\r\n2. We try to start the new one with `start({force: true})`.\r\n3. LoadingIndicators starts again.\r\n4. `_hide` function is being called and LoadingIndicator is being hidden because it was still running because of setTimeout...\r\n\r\nLet me know what do you think!\r\n\r\nThanks!\r\n ",
        "pr_file_module": null
      },
      {
        "comment_id": "1501789087",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 25932,
        "pr_file": "packages/nuxt/src/app/composables/loading-indicator.ts",
        "discussion_id": "1501391248",
        "commented_code": "@@ -50,7 +61,12 @@ function createLoadingIndicator (opts: Partial<LoadingIndicatorOpts> = {}) {\n \n   let _throttle: any = null\n \n-  const start = () => set(0)\n+  const start = (force: boolean | null = true) => {",
        "comment_created_at": "2024-02-25T10:18:04+00:00",
        "comment_author": "danielroe",
        "comment_body": "The fewer options that `useLoadingIndicator` accepts, the better, because they will influence the global singleton.\r\n\r\nI think we should pass the override to start/finish and calling `_hide` or `_reset` should instead clear any timeout that is still running. (We probably should have implemented it that way in the first place.)",
        "pr_file_module": null
      },
      {
        "comment_id": "1501811926",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 25932,
        "pr_file": "packages/nuxt/src/app/composables/loading-indicator.ts",
        "discussion_id": "1501391248",
        "commented_code": "@@ -50,7 +61,12 @@ function createLoadingIndicator (opts: Partial<LoadingIndicatorOpts> = {}) {\n \n   let _throttle: any = null\n \n-  const start = () => set(0)\n+  const start = (force: boolean | null = true) => {",
        "comment_created_at": "2024-02-25T12:34:23+00:00",
        "comment_author": "divine",
        "comment_body": "Hi @danielroe,\r\n\r\nI've applied your suggestions, let me know wdyt.\r\n\r\nThanks!",
        "pr_file_module": null
      },
      {
        "comment_id": "1514741501",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 25932,
        "pr_file": "packages/nuxt/src/app/composables/loading-indicator.ts",
        "discussion_id": "1501391248",
        "commented_code": "@@ -50,7 +61,12 @@ function createLoadingIndicator (opts: Partial<LoadingIndicatorOpts> = {}) {\n \n   let _throttle: any = null\n \n-  const start = () => set(0)\n+  const start = (force: boolean | null = true) => {",
        "comment_created_at": "2024-03-06T15:59:00+00:00",
        "comment_author": "danielroe",
        "comment_body": "Thank you!",
        "pr_file_module": null
      }
    ]
  }
]