[
  {
    "discussion_id": "2203483337",
    "pr_number": 32598,
    "pr_file": "packages/schema/src/config/app.ts",
    "created_at": "2025-07-13T18:22:47+00:00",
    "commented_code": "export default defineResolvers({\n   vue: {\n     transformAssetUrls: {\n-      video: ['src', 'poster'],\n-      source: ['src'],\n-      img: ['src'],\n-      image: ['xlink:href', 'href'],\n-      use: ['xlink:href', 'href'],\n+      preserveTilde: true,\n+      tags: {\n+        video: ['src', 'poster'],\n+        source: ['src'],\n+        img: ['src'],\n+        image: ['xlink:href', 'href'],\n+        use: ['xlink:href', 'href'],\n+      },",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "2203485493",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 32598,
        "pr_file": "packages/schema/src/config/app.ts",
        "discussion_id": "2203483337",
        "commented_code": "@@ -7,11 +7,14 @@ import type { NuxtAppConfig } from '../types/config'\n export default defineResolvers({\n   vue: {\n     transformAssetUrls: {\n-      video: ['src', 'poster'],\n-      source: ['src'],\n-      img: ['src'],\n-      image: ['xlink:href', 'href'],\n-      use: ['xlink:href', 'href'],\n+      preserveTilde: true,\n+      tags: {\n+        video: ['src', 'poster'],\n+        source: ['src'],\n+        img: ['src'],\n+        image: ['xlink:href', 'href'],\n+        use: ['xlink:href', 'href'],\n+      },",
        "comment_created_at": "2025-07-13T18:22:47+00:00",
        "comment_author": "OrbisK",
        "comment_body": "> Lift all tag entries out of the `tags` object into the root of `transformAssetUrls`\r\n\r\nFrom vue changelog [3.0.0-beta.9](https://github.com/vuejs/core/blob/main/changelogs/CHANGELOG-3.0.md#300-beta9-2020-05-04)\r\n\r\n```\r\ncompiler-sfc: @vue/compiler-sfc's transformAssetUrlsBase option has been removed. It is merged into trasnformAssetUrls which now also accepts the format of\r\n\r\n{\r\n  base?: string\r\n  includeAbsolute?: string\r\n  tags?: { [name: string]: string[] }\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1740092512",
    "pr_number": 28285,
    "pr_file": "packages/nuxt/src/app/composables/id.ts",
    "created_at": "2024-09-01T12:15:36+00:00",
    "commented_code": "-import { getCurrentInstance, inject } from 'vue'\n-import { useNuxtApp } from '../nuxt'\n-import { clientOnlySymbol } from '#app/components/client-only'\n+import { useId as _useId } from 'vue'\n \n-const ATTR_KEY = 'data-n-ids'\n-const SEPARATOR = '-'\n-\n-/**\n- * Generate an SSR-friendly unique identifier that can be passed to accessibility attributes.\n- *\n- * The generated ID is unique in the context of the current Nuxt instance and key.\n- */\n-export function useId (): string\n-export function useId (key?: string): string {\n-  if (typeof key !== 'string') {\n-    throw new TypeError('[nuxt] [useId] key must be a string.')\n-  }\n-  // TODO: implement in composable-keys\n-  // Make sure key starts with a letter to be a valid selector\n-  key = `n${key.slice(1)}`\n-  const nuxtApp = useNuxtApp()\n-  const instance = getCurrentInstance()\n-\n-  if (!instance) {\n-    // TODO: support auto-incrementing ID for plugins if there is need?\n-    throw new TypeError('[nuxt] `useId` must be called within a component setup function.')\n-  }\n-\n-  nuxtApp._genId ||= 0\n-  instance._nuxtIdIndex ||= {}\n-  instance._nuxtIdIndex[key] ||= 0\n-\n-  const instanceIndex = key + SEPARATOR + instance._nuxtIdIndex[key]++\n-\n-  if (import.meta.server) {\n-    const ids = JSON.parse(instance.attrs[ATTR_KEY] as string | undefined || '{}')\n-    ids[instanceIndex] = key + SEPARATOR + nuxtApp._genId++\n-    instance.attrs[ATTR_KEY] = JSON.stringify(ids)\n-    return ids[instanceIndex]\n-  }\n-\n-  if (nuxtApp.payload.serverRendered && nuxtApp.isHydrating && !inject(clientOnlySymbol, false)) {\n-    // Access data attribute from sibling if root is a comment node and sibling is an element\n-    const el = instance.vnode.el?.nodeType === 8 && instance.vnode.el?.nextElementSibling?.getAttribute\n-      ? instance.vnode.el?.nextElementSibling\n-      : instance.vnode.el\n-\n-    const ids = JSON.parse(el?.getAttribute?.(ATTR_KEY) || '{}')\n-    if (ids[instanceIndex]) {\n-      return ids[instanceIndex]\n-    }\n-\n-    if (import.meta.dev && instance.vnode.type && typeof instance.vnode.type === 'object' && 'inheritAttrs' in instance.vnode.type && instance.vnode.type.inheritAttrs === false) {\n-      console.warn('[nuxt] `useId` might not work correctly with components that have `inheritAttrs: false`.')\n-    }\n-  }\n-\n-  // pure client-side ids, avoiding potential collision with server-side ids\n-  return key + '_' + nuxtApp._genId++\n-}\n+export const useId = _useId",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1740092512",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28285,
        "pr_file": "packages/nuxt/src/app/composables/id.ts",
        "discussion_id": "1740092512",
        "commented_code": "@@ -1,60 +1,3 @@\n-import { getCurrentInstance, inject } from 'vue'\n-import { useNuxtApp } from '../nuxt'\n-import { clientOnlySymbol } from '#app/components/client-only'\n+import { useId as _useId } from 'vue'\n \n-const ATTR_KEY = 'data-n-ids'\n-const SEPARATOR = '-'\n-\n-/**\n- * Generate an SSR-friendly unique identifier that can be passed to accessibility attributes.\n- *\n- * The generated ID is unique in the context of the current Nuxt instance and key.\n- */\n-export function useId (): string\n-export function useId (key?: string): string {\n-  if (typeof key !== 'string') {\n-    throw new TypeError('[nuxt] [useId] key must be a string.')\n-  }\n-  // TODO: implement in composable-keys\n-  // Make sure key starts with a letter to be a valid selector\n-  key = `n${key.slice(1)}`\n-  const nuxtApp = useNuxtApp()\n-  const instance = getCurrentInstance()\n-\n-  if (!instance) {\n-    // TODO: support auto-incrementing ID for plugins if there is need?\n-    throw new TypeError('[nuxt] `useId` must be called within a component setup function.')\n-  }\n-\n-  nuxtApp._genId ||= 0\n-  instance._nuxtIdIndex ||= {}\n-  instance._nuxtIdIndex[key] ||= 0\n-\n-  const instanceIndex = key + SEPARATOR + instance._nuxtIdIndex[key]++\n-\n-  if (import.meta.server) {\n-    const ids = JSON.parse(instance.attrs[ATTR_KEY] as string | undefined || '{}')\n-    ids[instanceIndex] = key + SEPARATOR + nuxtApp._genId++\n-    instance.attrs[ATTR_KEY] = JSON.stringify(ids)\n-    return ids[instanceIndex]\n-  }\n-\n-  if (nuxtApp.payload.serverRendered && nuxtApp.isHydrating && !inject(clientOnlySymbol, false)) {\n-    // Access data attribute from sibling if root is a comment node and sibling is an element\n-    const el = instance.vnode.el?.nodeType === 8 && instance.vnode.el?.nextElementSibling?.getAttribute\n-      ? instance.vnode.el?.nextElementSibling\n-      : instance.vnode.el\n-\n-    const ids = JSON.parse(el?.getAttribute?.(ATTR_KEY) || '{}')\n-    if (ids[instanceIndex]) {\n-      return ids[instanceIndex]\n-    }\n-\n-    if (import.meta.dev && instance.vnode.type && typeof instance.vnode.type === 'object' && 'inheritAttrs' in instance.vnode.type && instance.vnode.type.inheritAttrs === false) {\n-      console.warn('[nuxt] `useId` might not work correctly with components that have `inheritAttrs: false`.')\n-    }\n-  }\n-\n-  // pure client-side ids, avoiding potential collision with server-side ids\n-  return key + '_' + nuxtApp._genId++\n-}\n+export const useId = _useId",
        "comment_created_at": "2024-09-01T12:15:36+00:00",
        "comment_author": "huang-julien",
        "comment_body": "Why don't we just delete the file and add the auto import from vue ?",
        "pr_file_module": null
      },
      {
        "comment_id": "1740111459",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28285,
        "pr_file": "packages/nuxt/src/app/composables/id.ts",
        "discussion_id": "1740092512",
        "commented_code": "@@ -1,60 +1,3 @@\n-import { getCurrentInstance, inject } from 'vue'\n-import { useNuxtApp } from '../nuxt'\n-import { clientOnlySymbol } from '#app/components/client-only'\n+import { useId as _useId } from 'vue'\n \n-const ATTR_KEY = 'data-n-ids'\n-const SEPARATOR = '-'\n-\n-/**\n- * Generate an SSR-friendly unique identifier that can be passed to accessibility attributes.\n- *\n- * The generated ID is unique in the context of the current Nuxt instance and key.\n- */\n-export function useId (): string\n-export function useId (key?: string): string {\n-  if (typeof key !== 'string') {\n-    throw new TypeError('[nuxt] [useId] key must be a string.')\n-  }\n-  // TODO: implement in composable-keys\n-  // Make sure key starts with a letter to be a valid selector\n-  key = `n${key.slice(1)}`\n-  const nuxtApp = useNuxtApp()\n-  const instance = getCurrentInstance()\n-\n-  if (!instance) {\n-    // TODO: support auto-incrementing ID for plugins if there is need?\n-    throw new TypeError('[nuxt] `useId` must be called within a component setup function.')\n-  }\n-\n-  nuxtApp._genId ||= 0\n-  instance._nuxtIdIndex ||= {}\n-  instance._nuxtIdIndex[key] ||= 0\n-\n-  const instanceIndex = key + SEPARATOR + instance._nuxtIdIndex[key]++\n-\n-  if (import.meta.server) {\n-    const ids = JSON.parse(instance.attrs[ATTR_KEY] as string | undefined || '{}')\n-    ids[instanceIndex] = key + SEPARATOR + nuxtApp._genId++\n-    instance.attrs[ATTR_KEY] = JSON.stringify(ids)\n-    return ids[instanceIndex]\n-  }\n-\n-  if (nuxtApp.payload.serverRendered && nuxtApp.isHydrating && !inject(clientOnlySymbol, false)) {\n-    // Access data attribute from sibling if root is a comment node and sibling is an element\n-    const el = instance.vnode.el?.nodeType === 8 && instance.vnode.el?.nextElementSibling?.getAttribute\n-      ? instance.vnode.el?.nextElementSibling\n-      : instance.vnode.el\n-\n-    const ids = JSON.parse(el?.getAttribute?.(ATTR_KEY) || '{}')\n-    if (ids[instanceIndex]) {\n-      return ids[instanceIndex]\n-    }\n-\n-    if (import.meta.dev && instance.vnode.type && typeof instance.vnode.type === 'object' && 'inheritAttrs' in instance.vnode.type && instance.vnode.type.inheritAttrs === false) {\n-      console.warn('[nuxt] `useId` might not work correctly with components that have `inheritAttrs: false`.')\n-    }\n-  }\n-\n-  // pure client-side ids, avoiding potential collision with server-side ids\n-  return key + '_' + nuxtApp._genId++\n-}\n+export const useId = _useId",
        "comment_created_at": "2024-09-01T14:00:37+00:00",
        "comment_author": "HigherOrderLogic",
        "comment_body": "I think it's for backward compatiblity. Some may have disabled auto import and do `import { useId } from '#imports';`",
        "pr_file_module": null
      },
      {
        "comment_id": "1740141870",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28285,
        "pr_file": "packages/nuxt/src/app/composables/id.ts",
        "discussion_id": "1740092512",
        "commented_code": "@@ -1,60 +1,3 @@\n-import { getCurrentInstance, inject } from 'vue'\n-import { useNuxtApp } from '../nuxt'\n-import { clientOnlySymbol } from '#app/components/client-only'\n+import { useId as _useId } from 'vue'\n \n-const ATTR_KEY = 'data-n-ids'\n-const SEPARATOR = '-'\n-\n-/**\n- * Generate an SSR-friendly unique identifier that can be passed to accessibility attributes.\n- *\n- * The generated ID is unique in the context of the current Nuxt instance and key.\n- */\n-export function useId (): string\n-export function useId (key?: string): string {\n-  if (typeof key !== 'string') {\n-    throw new TypeError('[nuxt] [useId] key must be a string.')\n-  }\n-  // TODO: implement in composable-keys\n-  // Make sure key starts with a letter to be a valid selector\n-  key = `n${key.slice(1)}`\n-  const nuxtApp = useNuxtApp()\n-  const instance = getCurrentInstance()\n-\n-  if (!instance) {\n-    // TODO: support auto-incrementing ID for plugins if there is need?\n-    throw new TypeError('[nuxt] `useId` must be called within a component setup function.')\n-  }\n-\n-  nuxtApp._genId ||= 0\n-  instance._nuxtIdIndex ||= {}\n-  instance._nuxtIdIndex[key] ||= 0\n-\n-  const instanceIndex = key + SEPARATOR + instance._nuxtIdIndex[key]++\n-\n-  if (import.meta.server) {\n-    const ids = JSON.parse(instance.attrs[ATTR_KEY] as string | undefined || '{}')\n-    ids[instanceIndex] = key + SEPARATOR + nuxtApp._genId++\n-    instance.attrs[ATTR_KEY] = JSON.stringify(ids)\n-    return ids[instanceIndex]\n-  }\n-\n-  if (nuxtApp.payload.serverRendered && nuxtApp.isHydrating && !inject(clientOnlySymbol, false)) {\n-    // Access data attribute from sibling if root is a comment node and sibling is an element\n-    const el = instance.vnode.el?.nodeType === 8 && instance.vnode.el?.nextElementSibling?.getAttribute\n-      ? instance.vnode.el?.nextElementSibling\n-      : instance.vnode.el\n-\n-    const ids = JSON.parse(el?.getAttribute?.(ATTR_KEY) || '{}')\n-    if (ids[instanceIndex]) {\n-      return ids[instanceIndex]\n-    }\n-\n-    if (import.meta.dev && instance.vnode.type && typeof instance.vnode.type === 'object' && 'inheritAttrs' in instance.vnode.type && instance.vnode.type.inheritAttrs === false) {\n-      console.warn('[nuxt] `useId` might not work correctly with components that have `inheritAttrs: false`.')\n-    }\n-  }\n-\n-  // pure client-side ids, avoiding potential collision with server-side ids\n-  return key + '_' + nuxtApp._genId++\n-}\n+export const useId = _useId",
        "comment_created_at": "2024-09-01T15:16:22+00:00",
        "comment_author": "huang-julien",
        "comment_body": "I mean, we could completely remove it from nuxt. And add useId to auto imports and #imports. This shouldn't be a breaking change since the behaviour wouldn't change",
        "pr_file_module": null
      },
      {
        "comment_id": "1740153662",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28285,
        "pr_file": "packages/nuxt/src/app/composables/id.ts",
        "discussion_id": "1740092512",
        "commented_code": "@@ -1,60 +1,3 @@\n-import { getCurrentInstance, inject } from 'vue'\n-import { useNuxtApp } from '../nuxt'\n-import { clientOnlySymbol } from '#app/components/client-only'\n+import { useId as _useId } from 'vue'\n \n-const ATTR_KEY = 'data-n-ids'\n-const SEPARATOR = '-'\n-\n-/**\n- * Generate an SSR-friendly unique identifier that can be passed to accessibility attributes.\n- *\n- * The generated ID is unique in the context of the current Nuxt instance and key.\n- */\n-export function useId (): string\n-export function useId (key?: string): string {\n-  if (typeof key !== 'string') {\n-    throw new TypeError('[nuxt] [useId] key must be a string.')\n-  }\n-  // TODO: implement in composable-keys\n-  // Make sure key starts with a letter to be a valid selector\n-  key = `n${key.slice(1)}`\n-  const nuxtApp = useNuxtApp()\n-  const instance = getCurrentInstance()\n-\n-  if (!instance) {\n-    // TODO: support auto-incrementing ID for plugins if there is need?\n-    throw new TypeError('[nuxt] `useId` must be called within a component setup function.')\n-  }\n-\n-  nuxtApp._genId ||= 0\n-  instance._nuxtIdIndex ||= {}\n-  instance._nuxtIdIndex[key] ||= 0\n-\n-  const instanceIndex = key + SEPARATOR + instance._nuxtIdIndex[key]++\n-\n-  if (import.meta.server) {\n-    const ids = JSON.parse(instance.attrs[ATTR_KEY] as string | undefined || '{}')\n-    ids[instanceIndex] = key + SEPARATOR + nuxtApp._genId++\n-    instance.attrs[ATTR_KEY] = JSON.stringify(ids)\n-    return ids[instanceIndex]\n-  }\n-\n-  if (nuxtApp.payload.serverRendered && nuxtApp.isHydrating && !inject(clientOnlySymbol, false)) {\n-    // Access data attribute from sibling if root is a comment node and sibling is an element\n-    const el = instance.vnode.el?.nodeType === 8 && instance.vnode.el?.nextElementSibling?.getAttribute\n-      ? instance.vnode.el?.nextElementSibling\n-      : instance.vnode.el\n-\n-    const ids = JSON.parse(el?.getAttribute?.(ATTR_KEY) || '{}')\n-    if (ids[instanceIndex]) {\n-      return ids[instanceIndex]\n-    }\n-\n-    if (import.meta.dev && instance.vnode.type && typeof instance.vnode.type === 'object' && 'inheritAttrs' in instance.vnode.type && instance.vnode.type.inheritAttrs === false) {\n-      console.warn('[nuxt] `useId` might not work correctly with components that have `inheritAttrs: false`.')\n-    }\n-  }\n-\n-  // pure client-side ids, avoiding potential collision with server-side ids\n-  return key + '_' + nuxtApp._genId++\n-}\n+export const useId = _useId",
        "comment_created_at": "2024-09-01T15:59:48+00:00",
        "comment_author": "danielroe",
        "comment_body": "I did switch the auto imports in this PR. The reason the export remains is in case someone directly imports from #app/composables/id.\n\n(We will remove this file for 4.x in a separate PR marked as a breaking change.)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1638172417",
    "pr_number": 27487,
    "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
    "created_at": "2024-06-13T12:58:09+00:00",
    "commented_code": "const router = useRouter()\n     const config = useRuntimeConfig()\n \n-    // Resolving `to` value from `to` and `href` props\n-    const to: ComputedRef<string | RouteLocationRaw> = computed(() => {\n-      checkPropConflicts(props, 'to', 'href')\n-      const path = props.to || props.href || '' // Defaults to empty string (won't render any `href` attribute)\n-      return resolveTrailingSlashBehavior(path, router.resolve)\n-    })\n+    const hasTarget = computed(() => !!props.target && props.target !== '_self')\n \n     // Lazily check whether to.value has a protocol\n-    const isAbsoluteUrl = computed(() => typeof to.value === 'string' && hasProtocol(to.value, { acceptRelative: true }))\n-\n-    // Resolves `to` value if it's a route location object\n-    const href = computed(() => (typeof to.value === 'object'\n-      ? router.resolve(to.value)?.href ?? null\n-      : (to.value && !props.external && !isAbsoluteUrl.value)\n-          ? resolveTrailingSlashBehavior(joinURL(config.app.baseURL, to.value), router.resolve) as string\n-          : to.value\n-    ))\n+    const isAbsoluteUrl = computed(() => {\n+      const path = props.to || props.href || ''\n+      return typeof path === 'string' && hasProtocol(path, { acceptRelative: true })\n+    })\n \n     const builtinRouterLink = resolveComponent('RouterLink') as string | typeof RouterLink\n     const useBuiltinLink = builtinRouterLink && typeof builtinRouterLink !== 'string' ? builtinRouterLink.useLink : undefined\n \n-    const link = useBuiltinLink?.({\n-      ...props,\n-      to: to.value,\n-    })\n-\n-    const hasTarget = computed(() => props.target && props.target !== '_self')\n-\n     // Resolving link type\n     const isExternal = computed<boolean>(() => {\n       // External prop is explicitly set\n       if (props.external) {\n         return true\n       }\n \n-      // When `target` prop is set, link is external\n-      if (hasTarget.value) {\n-        return true\n-      }\n+      const path = props.to || props.href || ''\n \n       // When `to` is a route object then it's an internal link\n-      if (typeof to.value === 'object') {\n+      if (typeof path === 'object') {\n         return false\n       }\n \n-      return to.value === '' || isAbsoluteUrl.value\n+      return path === '' || isAbsoluteUrl.value\n+    })\n+\n+    // Resolving `to` value from `to` and `href` props\n+    const to: ComputedRef<string | RouteLocationRaw> = computed(() => {",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1638172417",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 27487,
        "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
        "discussion_id": "1638172417",
        "commented_code": "@@ -124,52 +124,58 @@ export function defineNuxtLink (options: NuxtLinkOptions) {\n     const router = useRouter()\n     const config = useRuntimeConfig()\n \n-    // Resolving `to` value from `to` and `href` props\n-    const to: ComputedRef<string | RouteLocationRaw> = computed(() => {\n-      checkPropConflicts(props, 'to', 'href')\n-      const path = props.to || props.href || '' // Defaults to empty string (won't render any `href` attribute)\n-      return resolveTrailingSlashBehavior(path, router.resolve)\n-    })\n+    const hasTarget = computed(() => !!props.target && props.target !== '_self')\n \n     // Lazily check whether to.value has a protocol\n-    const isAbsoluteUrl = computed(() => typeof to.value === 'string' && hasProtocol(to.value, { acceptRelative: true }))\n-\n-    // Resolves `to` value if it's a route location object\n-    const href = computed(() => (typeof to.value === 'object'\n-      ? router.resolve(to.value)?.href ?? null\n-      : (to.value && !props.external && !isAbsoluteUrl.value)\n-          ? resolveTrailingSlashBehavior(joinURL(config.app.baseURL, to.value), router.resolve) as string\n-          : to.value\n-    ))\n+    const isAbsoluteUrl = computed(() => {\n+      const path = props.to || props.href || ''\n+      return typeof path === 'string' && hasProtocol(path, { acceptRelative: true })\n+    })\n \n     const builtinRouterLink = resolveComponent('RouterLink') as string | typeof RouterLink\n     const useBuiltinLink = builtinRouterLink && typeof builtinRouterLink !== 'string' ? builtinRouterLink.useLink : undefined\n \n-    const link = useBuiltinLink?.({\n-      ...props,\n-      to: to.value,\n-    })\n-\n-    const hasTarget = computed(() => props.target && props.target !== '_self')\n-\n     // Resolving link type\n     const isExternal = computed<boolean>(() => {\n       // External prop is explicitly set\n       if (props.external) {\n         return true\n       }\n \n-      // When `target` prop is set, link is external\n-      if (hasTarget.value) {\n-        return true\n-      }\n+      const path = props.to || props.href || ''\n \n       // When `to` is a route object then it's an internal link\n-      if (typeof to.value === 'object') {\n+      if (typeof path === 'object') {\n         return false\n       }\n \n-      return to.value === '' || isAbsoluteUrl.value\n+      return path === '' || isAbsoluteUrl.value\n+    })\n+\n+    // Resolving `to` value from `to` and `href` props\n+    const to: ComputedRef<string | RouteLocationRaw> = computed(() => {",
        "comment_created_at": "2024-06-13T12:58:09+00:00",
        "comment_author": "Mini-ghost",
        "comment_body": "`RouteLocationRaw` already includes the `string` type. Do we only need `RouteLocationRaw`?\r\n\r\n```suggestion\r\n    const to: ComputedRef<RouteLocationRaw> = computed(() => {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1569132017",
    "pr_number": 26522,
    "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
    "created_at": "2024-04-17T16:28:06+00:00",
    "commented_code": "required: false,\n       },\n     },\n+    useLink: (props: UseLinkOptions) => useNuxtLink(props as NuxtLinkProps),\n     setup (props, { slots }) {",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1569132017",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26522,
        "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
        "discussion_id": "1569132017",
        "commented_code": "@@ -207,6 +249,7 @@ export function defineNuxtLink (options: NuxtLinkOptions) {\n         required: false,\n       },\n     },\n+    useLink: (props: UseLinkOptions) => useNuxtLink(props as NuxtLinkProps),\n     setup (props, { slots }) {",
        "comment_created_at": "2024-04-17T16:28:06+00:00",
        "comment_author": "danielroe",
        "comment_body": "ideally we should not only expose this but also use `useLink` internally within the setup function, to reduce code duplication and ensure the logic remains the same",
        "pr_file_module": null
      },
      {
        "comment_id": "1569153035",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26522,
        "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
        "discussion_id": "1569132017",
        "commented_code": "@@ -207,6 +249,7 @@ export function defineNuxtLink (options: NuxtLinkOptions) {\n         required: false,\n       },\n     },\n+    useLink: (props: UseLinkOptions) => useNuxtLink(props as NuxtLinkProps),\n     setup (props, { slots }) {",
        "comment_created_at": "2024-04-17T16:45:58+00:00",
        "comment_author": "userquin",
        "comment_body": "yeah, check linked vuetify PR: https://github.com/vuetifyjs/vuetify/pull/19514",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1571751346",
    "pr_number": 26522,
    "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
    "created_at": "2024-04-19T04:06:20+00:00",
    "commented_code": "required: false,\n       },\n     },\n+    useLink: useNuxtLink,",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1571751346",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26522,
        "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
        "discussion_id": "1571751346",
        "commented_code": "@@ -207,43 +280,11 @@ export function defineNuxtLink (options: NuxtLinkOptions) {\n         required: false,\n       },\n     },\n+    useLink: useNuxtLink,",
        "comment_created_at": "2024-04-19T04:06:20+00:00",
        "comment_author": "harlan-zw",
        "comment_body": "What does this do?",
        "pr_file_module": null
      },
      {
        "comment_id": "1572013839",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26522,
        "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
        "discussion_id": "1571751346",
        "commented_code": "@@ -207,43 +280,11 @@ export function defineNuxtLink (options: NuxtLinkOptions) {\n         required: false,\n       },\n     },\n+    useLink: useNuxtLink,",
        "comment_created_at": "2024-04-19T08:21:16+00:00",
        "comment_author": "danielroe",
        "comment_body": "This matches `RouterLink` behaviour (which exposes a 'bound' composable which other libraries, like vuetify, can use to create custom links): https://router.vuejs.org/guide/advanced/composition-api.html#useLink.",
        "pr_file_module": null
      }
    ]
  }
]