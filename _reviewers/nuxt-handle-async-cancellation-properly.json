[
  {
    "discussion_id": "2190327582",
    "pr_number": 32531,
    "pr_file": "packages/nuxt/src/app/composables/asyncData.ts",
    "created_at": "2025-07-07T14:52:44+00:00",
    "commented_code": "error: writableComputedRef(() => nuxtApp._asyncData[key.value]?.error as Ref<NuxtErrorDataT extends Error | NuxtError ? NuxtErrorDataT : NuxtError<NuxtErrorDataT>>),\n     refresh: (...args) => nuxtApp._asyncData[key.value]!.execute(...args),\n     execute: (...args) => nuxtApp._asyncData[key.value]!.execute(...args),\n-    clear: () => clearNuxtDataByKey(nuxtApp, key.value),\n+    clear: () => {\n+      options.abortController?.abort?.(new DOMException('Request aborted as the async data was cleared.', 'AbortError'))",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "2190327582",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 32531,
        "pr_file": "packages/nuxt/src/app/composables/asyncData.ts",
        "discussion_id": "2190327582",
        "commented_code": "@@ -361,7 +365,10 @@ export function useAsyncData<\n     error: writableComputedRef(() => nuxtApp._asyncData[key.value]?.error as Ref<NuxtErrorDataT extends Error | NuxtError ? NuxtErrorDataT : NuxtError<NuxtErrorDataT>>),\n     refresh: (...args) => nuxtApp._asyncData[key.value]!.execute(...args),\n     execute: (...args) => nuxtApp._asyncData[key.value]!.execute(...args),\n-    clear: () => clearNuxtDataByKey(nuxtApp, key.value),\n+    clear: () => {\n+      options.abortController?.abort?.(new DOMException('Request aborted as the async data was cleared.', 'AbortError'))",
        "comment_created_at": "2025-07-07T14:52:44+00:00",
        "comment_author": "danielroe",
        "comment_body": "I think if an abortController is triggered, then we should also track this and avoid doing anything with the finished result of an asyncData. so it shouldn't update the data/status, just as if it were cancelled.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2227755599",
    "pr_number": 32531,
    "pr_file": "packages/nuxt/src/app/composables/asyncData.ts",
    "created_at": "2025-07-24T07:58:59+00:00",
    "commented_code": "error: writableComputedRef(() => nuxtApp._asyncData[key.value]?.error as Ref<NuxtErrorDataT extends Error | NuxtError ? NuxtErrorDataT : NuxtError<NuxtErrorDataT>>),\n     refresh: (...args) => nuxtApp._asyncData[key.value]!.execute(...args),\n     execute: (...args) => nuxtApp._asyncData[key.value]!.execute(...args),\n-    clear: () => clearNuxtDataByKey(nuxtApp, key.value),\n+    clear: () => {\n+      if (options.abortController) {\n+        options.abortController.abort(new DOMException('Request aborted as the async data was cleared.', 'AbortError'))\n+      }\n+      if (nuxtApp._asyncDataPromises[key.value]) {\n+        (nuxtApp._asyncDataPromises[key.value] as any).cancelled = true\n+      }",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "2227755599",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 32531,
        "pr_file": "packages/nuxt/src/app/composables/asyncData.ts",
        "discussion_id": "2227755599",
        "commented_code": "@@ -361,7 +365,15 @@ export function useAsyncData<\n     error: writableComputedRef(() => nuxtApp._asyncData[key.value]?.error as Ref<NuxtErrorDataT extends Error | NuxtError ? NuxtErrorDataT : NuxtError<NuxtErrorDataT>>),\n     refresh: (...args) => nuxtApp._asyncData[key.value]!.execute(...args),\n     execute: (...args) => nuxtApp._asyncData[key.value]!.execute(...args),\n-    clear: () => clearNuxtDataByKey(nuxtApp, key.value),\n+    clear: () => {\n+      if (options.abortController) {\n+        options.abortController.abort(new DOMException('Request aborted as the async data was cleared.', 'AbortError'))\n+      }\n+      if (nuxtApp._asyncDataPromises[key.value]) {\n+        (nuxtApp._asyncDataPromises[key.value] as any).cancelled = true\n+      }",
        "comment_created_at": "2025-07-24T07:58:59+00:00",
        "comment_author": "OrbisK",
        "comment_body": "I'm just asking, but don't we need something like this, too?\n\n```ts\noptions.abortController.signal.addEventListener('abort', () => {\n  if (nuxtApp._asyncDataPromises[key.value]) {\n        (nuxtApp._asyncDataPromises[key.value] as any).cancelled = true\n      }\n})\n```\n\nWhat if someone cancels the signal from outside?",
        "pr_file_module": null
      },
      {
        "comment_id": "2233133847",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 32531,
        "pr_file": "packages/nuxt/src/app/composables/asyncData.ts",
        "discussion_id": "2227755599",
        "commented_code": "@@ -361,7 +365,15 @@ export function useAsyncData<\n     error: writableComputedRef(() => nuxtApp._asyncData[key.value]?.error as Ref<NuxtErrorDataT extends Error | NuxtError ? NuxtErrorDataT : NuxtError<NuxtErrorDataT>>),\n     refresh: (...args) => nuxtApp._asyncData[key.value]!.execute(...args),\n     execute: (...args) => nuxtApp._asyncData[key.value]!.execute(...args),\n-    clear: () => clearNuxtDataByKey(nuxtApp, key.value),\n+    clear: () => {\n+      if (options.abortController) {\n+        options.abortController.abort(new DOMException('Request aborted as the async data was cleared.', 'AbortError'))\n+      }\n+      if (nuxtApp._asyncDataPromises[key.value]) {\n+        (nuxtApp._asyncDataPromises[key.value] as any).cancelled = true\n+      }",
        "comment_created_at": "2025-07-26T18:21:29+00:00",
        "comment_author": "huang-julien",
        "comment_body": "make sense ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1802594453",
    "pr_number": 29566,
    "pr_file": "packages/nuxt/src/app/composables/asyncData.ts",
    "created_at": "2024-10-16T08:20:41+00:00",
    "commented_code": "if (hasScope) {\n       onScopeDispose(off)\n     }\n+\n+    let pollTimer: number | null = null\n+\n+    const startPolling = () => {\n+      if (options.pollEvery && !pollTimer) {\n+        pollTimer = window.setInterval(() => {\n+          asyncData.refresh()\n+        }, options.pollEvery)\n+      }\n+    }\n+\n+    const stopPolling = () => {\n+      if (pollTimer) {\n+        clearInterval(pollTimer)\n+        pollTimer = null\n+      }\n+    }\n+\n+    if (options.pollEvery && options.immediate) {\n+      startPolling()\n+    }\n+\n+    if (hasScope) {\n+      onScopeDispose(() => {",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1802594453",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 29566,
        "pr_file": "packages/nuxt/src/app/composables/asyncData.ts",
        "discussion_id": "1802594453",
        "commented_code": "@@ -391,6 +396,45 @@ export function useAsyncData<\n     if (hasScope) {\n       onScopeDispose(off)\n     }\n+\n+    let pollTimer: number | null = null\n+\n+    const startPolling = () => {\n+      if (options.pollEvery && !pollTimer) {\n+        pollTimer = window.setInterval(() => {\n+          asyncData.refresh()\n+        }, options.pollEvery)\n+      }\n+    }\n+\n+    const stopPolling = () => {\n+      if (pollTimer) {\n+        clearInterval(pollTimer)\n+        pollTimer = null\n+      }\n+    }\n+\n+    if (options.pollEvery && options.immediate) {\n+      startPolling()\n+    }\n+\n+    if (hasScope) {\n+      onScopeDispose(() => {",
        "comment_created_at": "2024-10-16T08:20:41+00:00",
        "comment_author": "daniluk4000",
        "comment_body": "We already have onScopeDispose listener on L397, I suggest to add this to existing listener",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1685796946",
    "pr_number": 28232,
    "pr_file": "packages/nuxt/src/core/builder.ts",
    "created_at": "2024-07-21T19:11:57+00:00",
    "commented_code": "if (nuxt.options.dev) {\n     watch(nuxt)\n+\n+    process.on('exit', () => {\n+      nuxt.callHook('close', nuxt)\n+    })",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1685796946",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28232,
        "pr_file": "packages/nuxt/src/core/builder.ts",
        "discussion_id": "1685796946",
        "commented_code": "@@ -18,6 +18,11 @@ export async function build (nuxt: Nuxt) {\n \n   if (nuxt.options.dev) {\n     watch(nuxt)\n+\n+    process.on('exit', () => {\n+      nuxt.callHook('close', nuxt)\n+    })",
        "comment_created_at": "2024-07-21T19:11:57+00:00",
        "comment_author": "danielroe",
        "comment_body": "this doesn't seem to result in this hook being called:\r\n\r\n```ts\r\nexport default defineNuxtConfig({\r\n  hooks: {\r\n    close: () => {\r\n      console.log('closing things')\r\n    },\r\n  },\r\n})\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1685808788",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28232,
        "pr_file": "packages/nuxt/src/core/builder.ts",
        "discussion_id": "1685796946",
        "commented_code": "@@ -18,6 +18,11 @@ export async function build (nuxt: Nuxt) {\n \n   if (nuxt.options.dev) {\n     watch(nuxt)\n+\n+    process.on('exit', () => {\n+      nuxt.callHook('close', nuxt)\n+    })",
        "comment_created_at": "2024-07-21T20:40:38+00:00",
        "comment_author": "huang-julien",
        "comment_body": "oh indeed, it's weird, the exit listener is correctly called ",
        "pr_file_module": null
      },
      {
        "comment_id": "1685810829",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28232,
        "pr_file": "packages/nuxt/src/core/builder.ts",
        "discussion_id": "1685796946",
        "commented_code": "@@ -18,6 +18,11 @@ export async function build (nuxt: Nuxt) {\n \n   if (nuxt.options.dev) {\n     watch(nuxt)\n+\n+    process.on('exit', () => {\n+      nuxt.callHook('close', nuxt)\n+    })",
        "comment_created_at": "2024-07-21T20:56:29+00:00",
        "comment_author": "huang-julien",
        "comment_body": "hmmm the main issue is that callHook is async",
        "pr_file_module": null
      },
      {
        "comment_id": "1685813164",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28232,
        "pr_file": "packages/nuxt/src/core/builder.ts",
        "discussion_id": "1685796946",
        "commented_code": "@@ -18,6 +18,11 @@ export async function build (nuxt: Nuxt) {\n \n   if (nuxt.options.dev) {\n     watch(nuxt)\n+\n+    process.on('exit', () => {\n+      nuxt.callHook('close', nuxt)\n+    })",
        "comment_created_at": "2024-07-21T21:15:06+00:00",
        "comment_author": "huang-julien",
        "comment_body": "tbh it is probably not possible at least, we can't support it on windows since SIGTERM directly terminate the process without any way to handle the exit. On linux tho, we can probably try the `beforeExit` hook.\r\n\r\nWDYT ? Should we drop this ?",
        "pr_file_module": null
      }
    ]
  }
]