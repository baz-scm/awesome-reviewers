[
  {
    "discussion_id": "1815128573",
    "pr_number": 29621,
    "pr_file": "packages/nuxt/src/app/components/nuxt-teleport-island-slot.ts",
    "created_at": "2024-10-24T14:33:36+00:00",
    "commented_code": "}\n \n     return () => {\n-      const vnodes: VNode[] = []\n+      const vnodes: VNode[] = new Array(1)",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1815128573",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 29621,
        "pr_file": "packages/nuxt/src/app/components/nuxt-teleport-island-slot.ts",
        "discussion_id": "1815128573",
        "commented_code": "@@ -35,23 +35,23 @@ export default defineComponent({\n     }\n \n     return () => {\n-      const vnodes: VNode[] = []\n+      const vnodes: VNode[] = new Array(1)",
        "comment_created_at": "2024-10-24T14:33:36+00:00",
        "comment_author": "danielroe",
        "comment_body": "this array might have either 1 or 2 members - is it worth optimising it for 1?",
        "pr_file_module": null
      },
      {
        "comment_id": "1815311071",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 29621,
        "pr_file": "packages/nuxt/src/app/components/nuxt-teleport-island-slot.ts",
        "discussion_id": "1815128573",
        "commented_code": "@@ -35,23 +35,23 @@ export default defineComponent({\n     }\n \n     return () => {\n-      const vnodes: VNode[] = []\n+      const vnodes: VNode[] = new Array(1)",
        "comment_created_at": "2024-10-24T16:06:16+00:00",
        "comment_author": "GalacticHypernova",
        "comment_body": "From the very scarce resources about the internal operations in arrays, in v8, JSC, and Bun, using `push` immediately allocates space for ~8-16 spaces, and then doubles capacity on each push where it exceeds the array length\r\n\r\nSo that means:\r\nIf it ends up with 1 element, then it avoids those extra 7-15 spaces. If it ends up with 2 elements, it would allocate another single place, which means it would be left with exactly 2 spots for 2 elements, once again avoiding the extra space",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1815320491",
    "pr_number": 29621,
    "pr_file": "packages/nuxt/src/components/templates.ts",
    "created_at": "2024-10-24T16:11:04+00:00",
    "commented_code": "})\n \n     const islandType = 'type IslandComponent<T extends DefineComponent> = T & DefineComponent<{}, {refresh: () => Promise<void>}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, SlotsType<{ fallback: { error: unknown } }>>'\n+    const components: string[] = new Array(componentTypes.length)\n+    const componentExports: string[] = new Array(componentTypes.length)\n+    for (let i = 0; i < componentTypes.length; i++) {\n+      const [pascalName, type] = componentTypes[i]!\n+      components[i] = `${pascalName}': ${type}`\n+      componentExports[i] = `${pascalName}: ${type}`\n+    }\n     return `\n import type { DefineComponent, SlotsType } from 'vue'\n ${nuxt.options.experimental.componentIslands ? islandType : ''}\n interface _GlobalComponents {\n-  ${componentTypes.map(([pascalName, type]) => `    '${pascalName}': ${type}`).join('\n')}\n-  ${componentTypes.map(([pascalName, type]) => `    'Lazy${pascalName}': ${type}`).join('\n')}\n+    '${components.join('\n    \\'')}\n+    'Lazy${components.join('\n    \\'Lazy')}",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1815320491",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 29621,
        "pr_file": "packages/nuxt/src/components/templates.ts",
        "discussion_id": "1815320491",
        "commented_code": "@@ -118,20 +118,27 @@ export const componentsTypeTemplate = {\n     })\n \n     const islandType = 'type IslandComponent<T extends DefineComponent> = T & DefineComponent<{}, {refresh: () => Promise<void>}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, SlotsType<{ fallback: { error: unknown } }>>'\n+    const components: string[] = new Array(componentTypes.length)\n+    const componentExports: string[] = new Array(componentTypes.length)\n+    for (let i = 0; i < componentTypes.length; i++) {\n+      const [pascalName, type] = componentTypes[i]!\n+      components[i] = `${pascalName}': ${type}`\n+      componentExports[i] = `${pascalName}: ${type}`\n+    }\n     return `\n import type { DefineComponent, SlotsType } from 'vue'\n ${nuxt.options.experimental.componentIslands ? islandType : ''}\n interface _GlobalComponents {\n-  ${componentTypes.map(([pascalName, type]) => `    '${pascalName}': ${type}`).join('\\n')}\n-  ${componentTypes.map(([pascalName, type]) => `    'Lazy${pascalName}': ${type}`).join('\\n')}\n+    '${components.join('\\n    \\'')}\n+    'Lazy${components.join('\\n    \\'Lazy')}",
        "comment_created_at": "2024-10-24T16:11:04+00:00",
        "comment_author": "danielroe",
        "comment_body": "I'm pretty sure there's no benefit to switching from `.map` as this already is able to optimise by creating an array with the correct number of elements.",
        "pr_file_module": null
      },
      {
        "comment_id": "1815396820",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 29621,
        "pr_file": "packages/nuxt/src/components/templates.ts",
        "discussion_id": "1815320491",
        "commented_code": "@@ -118,20 +118,27 @@ export const componentsTypeTemplate = {\n     })\n \n     const islandType = 'type IslandComponent<T extends DefineComponent> = T & DefineComponent<{}, {refresh: () => Promise<void>}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, SlotsType<{ fallback: { error: unknown } }>>'\n+    const components: string[] = new Array(componentTypes.length)\n+    const componentExports: string[] = new Array(componentTypes.length)\n+    for (let i = 0; i < componentTypes.length; i++) {\n+      const [pascalName, type] = componentTypes[i]!\n+      components[i] = `${pascalName}': ${type}`\n+      componentExports[i] = `${pascalName}: ${type}`\n+    }\n     return `\n import type { DefineComponent, SlotsType } from 'vue'\n ${nuxt.options.experimental.componentIslands ? islandType : ''}\n interface _GlobalComponents {\n-  ${componentTypes.map(([pascalName, type]) => `    '${pascalName}': ${type}`).join('\\n')}\n-  ${componentTypes.map(([pascalName, type]) => `    'Lazy${pascalName}': ${type}`).join('\\n')}\n+    '${components.join('\\n    \\'')}\n+    'Lazy${components.join('\\n    \\'Lazy')}",
        "comment_created_at": "2024-10-24T16:56:09+00:00",
        "comment_author": "GalacticHypernova",
        "comment_body": "That's exactly the problem, it makes 4 total arrays and 4 total iterations.\r\n\r\nLet's take the Vuetify Nuxt module for example, given that they're working on migrating from a custom Vite plugin to Nuxt's component system:\r\n\r\nThey have, from a rough estimate of mine, 76 components.\r\n\r\nThe current approach makes a total of 304 elements in 4 arrays (76 elements in each array) and 4 iterations over them (so 304 counts in total).\r\n\r\nThe new approach makes a total of 152 elements in 2 arrays (76 elements in each array) and 1 iteration only (so 76 counts in total).\r\n\r\nAll of this calculation does not even take into consideration the delayed hydration PR, which will introduce LazyIdle, LazyVisible, LazyPromise, LazyTime, LazyMedia, LazyEvent, and  LazyNever, which will make it 9 types in total (76 * 9 = 684 components in total)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1525123906",
    "pr_number": 26114,
    "pr_file": "packages/nuxt/src/components/module.ts",
    "created_at": "2024-03-14T15:55:18+00:00",
    "commented_code": "if (!dir) {\n         return []\n       }\n-      const dirs: ComponentsDir[] = (dir.dirs || [dir]).map((dir: any): ComponentsDir => typeof dir === 'string' ? { path: dir } : dir).filter((_dir: ComponentsDir) => _dir.path)\n-      return dirs.map(_dir => ({\n-        priority: options?.priority || 0,\n-        ..._dir,\n-        path: resolve(cwd, resolveAlias(_dir.path))\n-      }))\n+      const dirs: ComponentsDir[] = []\n+      for (const compDir of dir.dirs || [dir]) {\n+        const _dir: ComponentsDir = typeof dir === 'string' ? { path: compDir } : compDir\n+        if (_dir.path) {\n+          dirs.push({\n+            priority: options?.priority || 0,\n+            ..._dir,\n+            path: resolve(cwd, resolveAlias(_dir.path))\n+          })\n+        }\n+      }\n+      return dirs\n     }\n \n     // Resolve dirs",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1525123906",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26114,
        "pr_file": "packages/nuxt/src/components/module.ts",
        "discussion_id": "1525123906",
        "commented_code": "@@ -61,12 +61,18 @@ export default defineNuxtModule<ComponentsOptions>({\n       if (!dir) {\n         return []\n       }\n-      const dirs: ComponentsDir[] = (dir.dirs || [dir]).map((dir: any): ComponentsDir => typeof dir === 'string' ? { path: dir } : dir).filter((_dir: ComponentsDir) => _dir.path)\n-      return dirs.map(_dir => ({\n-        priority: options?.priority || 0,\n-        ..._dir,\n-        path: resolve(cwd, resolveAlias(_dir.path))\n-      }))\n+      const dirs: ComponentsDir[] = []\n+      for (const compDir of dir.dirs || [dir]) {\n+        const _dir: ComponentsDir = typeof dir === 'string' ? { path: compDir } : compDir\n+        if (_dir.path) {\n+          dirs.push({\n+            priority: options?.priority || 0,\n+            ..._dir,\n+            path: resolve(cwd, resolveAlias(_dir.path))\n+          })\n+        }\n+      }\n+      return dirs\n     }\n \n     // Resolve dirs",
        "comment_created_at": "2024-03-14T15:55:18+00:00",
        "comment_author": "GalacticHypernova",
        "comment_body": "The componentDirs filtering and mapping in L87 needs to get tested a little, it prompts 3 errors, if done sucessfully it could shave off 4 iterations, which would provide a positive moderate impact on performance.\r\n```ts\r\nfor (const dir of allDirs) {\r\n        if (isPureObjectOrString(dir)) {\r\n          const dirOptions: ComponentsDir = typeof dir === 'object' ? dir : { path: dir }\r\n          const dirPath = resolveAlias(dirOptions.path)\r\n          const transpile = typeof dirOptions.transpile === 'boolean' ? dirOptions.transpile : 'auto'\r\n          const extensions = []\r\n          let extPattern = ''\r\n          for (const e of dirOptions.extensions || nuxt.options.extensions) {\r\n            const extRaw = e.replace(/^\\./g, '')\r\n            extensions.push(extRaw)\r\n            extPattern += extRaw + ','\r\n          }\r\n          const present = isDirectory(dirPath)\r\n          if (!present && !DEFAULT_COMPONENTS_DIRS_RE.test(dirOptions.path)) {\r\n            logger.warn('Components directory not found: `' + dirPath + '`')\r\n          }\r\n          const comp: ComponentsDir = {\r\n            global: componentOptions.global,\r\n            ...dirOptions,\r\n            // TODO: https://github.com/nuxt/framework/pull/251\r\n            enabled: true,\r\n            path: dirPath,\r\n            extensions,\r\n            pattern: dirOptions.pattern || `**/*.{${extPattern.slice(0, -1)},}`,\r\n            ignore: [\r\n              '**/*{M,.m,-m}ixin.{js,ts,jsx,tsx}', // ignore mixins\r\n              '**/*.d.{cts,mts,ts}', // .d.ts files\r\n              ...(dirOptions.ignore || [])\r\n            ],\r\n            transpile: (transpile === 'auto' ? dirPath.includes('node_modules') : transpile)\r\n          }\r\n          if (comp.enabled) {\r\n            componentDirs.push(comp)\r\n          }\r\n        }\r\n      }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1631128003",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26114,
        "pr_file": "packages/nuxt/src/components/module.ts",
        "discussion_id": "1525123906",
        "commented_code": "@@ -61,12 +61,18 @@ export default defineNuxtModule<ComponentsOptions>({\n       if (!dir) {\n         return []\n       }\n-      const dirs: ComponentsDir[] = (dir.dirs || [dir]).map((dir: any): ComponentsDir => typeof dir === 'string' ? { path: dir } : dir).filter((_dir: ComponentsDir) => _dir.path)\n-      return dirs.map(_dir => ({\n-        priority: options?.priority || 0,\n-        ..._dir,\n-        path: resolve(cwd, resolveAlias(_dir.path))\n-      }))\n+      const dirs: ComponentsDir[] = []\n+      for (const compDir of dir.dirs || [dir]) {\n+        const _dir: ComponentsDir = typeof dir === 'string' ? { path: compDir } : compDir\n+        if (_dir.path) {\n+          dirs.push({\n+            priority: options?.priority || 0,\n+            ..._dir,\n+            path: resolve(cwd, resolveAlias(_dir.path))\n+          })\n+        }\n+      }\n+      return dirs\n     }\n \n     // Resolve dirs",
        "comment_created_at": "2024-06-07T12:27:11+00:00",
        "comment_author": "GalacticHypernova",
        "comment_body": "Finally fixed \ud83d\ude04 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1631747759",
    "pr_number": 26114,
    "pr_file": "packages/ui-templates/lib/render.ts",
    "created_at": "2024-06-07T22:17:14+00:00",
    "commented_code": "// Serialize into a js function\n         const chunks = html.split(/\\{{2,3}[^{}]+\\}{2,3}/g).map(chunk => JSON.stringify(chunk))\n         const hasMessages = chunks.length > 1\n-        let templateString = chunks.shift()\n+        const templateString = [chunks.shift()]",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1631747759",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26114,
        "pr_file": "packages/ui-templates/lib/render.ts",
        "discussion_id": "1631747759",
        "commented_code": "@@ -82,19 +82,19 @@ export const RenderPlugin = () => {\n         // Serialize into a js function\n         const chunks = html.split(/\\{{2,3}[^{}]+\\}{2,3}/g).map(chunk => JSON.stringify(chunk))\n         const hasMessages = chunks.length > 1\n-        let templateString = chunks.shift()\n+        const templateString = [chunks.shift()]",
        "comment_created_at": "2024-06-07T22:17:14+00:00",
        "comment_author": "danielroe",
        "comment_body": "I'm not sure this is a more performant approach... Let's skip this particular change for now.",
        "pr_file_module": null
      },
      {
        "comment_id": "1631880062",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26114,
        "pr_file": "packages/ui-templates/lib/render.ts",
        "discussion_id": "1631747759",
        "commented_code": "@@ -82,19 +82,19 @@ export const RenderPlugin = () => {\n         // Serialize into a js function\n         const chunks = html.split(/\\{{2,3}[^{}]+\\}{2,3}/g).map(chunk => JSON.stringify(chunk))\n         const hasMessages = chunks.length > 1\n-        let templateString = chunks.shift()\n+        const templateString = [chunks.shift()]",
        "comment_created_at": "2024-06-08T05:27:59+00:00",
        "comment_author": "GalacticHypernova",
        "comment_body": "Sure thing! Generally speaking pushing to an array has a better space complexity than concataneting strings because each concatenation creates a new string instance, whereas pushing to an array uses the same instance, so the memory usage in this specific execution, especially if templateString is iterated over a lot, would be far lower for the array method than the string method. But sure, it can be kept as is until the more impactful areas are taken care of. \r\n\r\nIf we go deeper, since string is a primitive data type, it is stored in the stack memory. When concatenating strings, each part of the previous string (before concatenation) stays in the stack and another string instance is loaded onto the stack (after concatenation). That means more concatenations = more string instances in the stack = more memory used. Being a primitive data type, JS engines can't properly determine when they're no longer needed, so they are kept in the stack until garbage collection takes place. Arrays, on the other hand, are stored in the heap. Being a non-primitive data type (a reference type), engines are able to determine where and when they're used. If an array needs to be resized (after pushing a lot of items), the previous chunk of memory used by the array gets freed immediately as the array is copied to a new chunk in memory, so no matter how many items get pushed, the array will only have 1 chunk. Combining this, we get that `n` concatenations result in `n` strings in memory and `n` pushes result in only 1 array in memory. That's O(n) vs O(1) space complexity.",
        "pr_file_module": null
      },
      {
        "comment_id": "1631952844",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26114,
        "pr_file": "packages/ui-templates/lib/render.ts",
        "discussion_id": "1631747759",
        "commented_code": "@@ -82,19 +82,19 @@ export const RenderPlugin = () => {\n         // Serialize into a js function\n         const chunks = html.split(/\\{{2,3}[^{}]+\\}{2,3}/g).map(chunk => JSON.stringify(chunk))\n         const hasMessages = chunks.length > 1\n-        let templateString = chunks.shift()\n+        const templateString = [chunks.shift()]",
        "comment_created_at": "2024-06-08T08:03:13+00:00",
        "comment_author": "danielroe",
        "comment_body": "Understood. TIL. However this is build time code (while bundling up templates) and never impacts a user. I am happy to keep it as is.",
        "pr_file_module": null
      },
      {
        "comment_id": "1631957698",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26114,
        "pr_file": "packages/ui-templates/lib/render.ts",
        "discussion_id": "1631747759",
        "commented_code": "@@ -82,19 +82,19 @@ export const RenderPlugin = () => {\n         // Serialize into a js function\n         const chunks = html.split(/\\{{2,3}[^{}]+\\}{2,3}/g).map(chunk => JSON.stringify(chunk))\n         const hasMessages = chunks.length > 1\n-        let templateString = chunks.shift()\n+        const templateString = [chunks.shift()]",
        "comment_created_at": "2024-06-08T08:12:33+00:00",
        "comment_author": "GalacticHypernova",
        "comment_body": "Sounds good to me! This PR also aims to improve build time performance, rather than strictly runtime performance, but since it's relevant only for templates and never impacts actual app builds, that's perfectly fine \ud83d\ude42 ",
        "pr_file_module": null
      }
    ]
  }
]