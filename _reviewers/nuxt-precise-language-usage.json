[
  {
    "discussion_id": "2034430904",
    "pr_number": 31747,
    "pr_file": "docs/3.api/3.utils/call-once.md",
    "created_at": "2025-04-09T04:44:30+00:00",
    "commented_code": "## Parameters\n \n - `key`: A unique key ensuring that the code is run once. If you do not provide a key, then a key that is unique to the file and line number of the instance of `callOnce` will be generated for you.\n-- `fn`: The function to run once. This function can also return a `Promise` and a value.\n+- `fn`: The function to run once. This function could be async or not.",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "2034430904",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 31747,
        "pr_file": "docs/3.api/3.utils/call-once.md",
        "discussion_id": "2034430904",
        "commented_code": "@@ -86,7 +86,7 @@ type CallOnceOptions = {\n ## Parameters\n \n - `key`: A unique key ensuring that the code is run once. If you do not provide a key, then a key that is unique to the file and line number of the instance of `callOnce` will be generated for you.\n-- `fn`: The function to run once. This function can also return a `Promise` and a value.\n+- `fn`: The function to run once. This function could be async or not.",
        "comment_created_at": "2025-04-09T04:44:30+00:00",
        "comment_author": "danielroe",
        "comment_body": "```suggestion\r\n- `fn`: The function to run once. It can be asynchronous.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1595291180",
    "pr_number": 27128,
    "pr_file": "docs/1.getting-started/12.upgrade.md",
    "created_at": "2024-05-09T10:49:10+00:00",
    "commented_code": "---\n \n \n-## Upgrading Nuxt 3\n+## Upgrading Nuxt\n \n ### Latest release\n \n-To upgrade Nuxt 3 to the [latest release](https://github.com/nuxt/nuxt/releases), use the `nuxi upgrade` command.\n+To upgrade Nuxt to the [latest release](https://github.com/nuxt/nuxt/releases), use the `nuxi upgrade` command.\n \n ```bash [Terminal]\n npx nuxi upgrade\n ```\n \n ### Nightly Release Channel\n \n-To use the latest Nuxt 3 build and test features before their release, read about the [nightly release channel](/docs/guide/going-further/nightly-release-channel) guide.\n+To use the latest Nuxt build and test features before their release, read about the [nightly release channel](/docs/guide/going-further/nightly-release-channel) guide.\n+\n+## Testing Nuxt 4\n+\n+Nuxt 4 is planned to be released **on or before June 14** (though obviously this is dependent on having enough time after Nitro's major release to be properly tested in the community, so be aware that this is not an exact date).\n+\n+Until then, it is possible to test many of Nuxt 4's breaking changes on the nightly release channel.\n+\n+### Opting-in to Nuxt 4\n+\n+First, opt-in to the nightly release channel [following these steps](/docs/guide/going-further/nightly-release-channel#opting-in).\n+\n+Then you can set your `compatibilityVersion` to match Nuxt 4 behavior:\n+\n+```ts\n+export default defineNuxtConfig({\n+  future: {\n+    compatibilityVersion: 4,\n+  },\n+  // To re-enable _all_ Nuxt v3 behaviour, set the following options:\n+  // srcDir: '.',\n+  // dir: {\n+  //   app: 'app'\n+  // },\n+  // experimental: {\n+  //   compileTemplate: true,\n+  //   templateUtils: true,\n+  //   relativeWatchPaths: true,\n+  //   defaults: {\n+  //     useAsyncData: {\n+  //       deep: true\n+  //     }\n+  //   }\n+  // },\n+  // unhead: {\n+  //   renderSSRHeadOptions: {\n+  //     omitLineBreaks: false\n+  //   }\n+  // }\n+})\n+```\n+\n+When you set your `compatibilityVersion` to `4`, defaults throughout your Nuxt configuration will change to opt-in to Nuxt v4 behaviour, but you can granularly re-enable Nuxt v3 behaviour\n+when testing, following the commented out lines above. Please file issues if so, so that we can address in Nuxt or in the ecosystem.\n+\n+### Migrating to Nuxt 4\n+\n+Breaking or significant changes will be noted here along with migration steps for backward/forward compatibility.\n+\n+::alert\n+This section is not final until the final release, so please check back here regularly until then if you are testing Nuxt 4 using `compatibilityVersion: 4`.\n+::\n+\n+#### New directory structure\n+\n+Nuxt now defaults to a new default structure, with backwards compatibility (so if Nuxt detects you are using the old structure, such as with a top-level `pages/` directory, this new structure will not apply).\n+\n+\ud83d\udc49 [See full RFC](https://github.com/nuxt/nuxt/issues/26444)\n+\n+##### What changed\n+\n+* the new Nuxt default `srcDir` is `app/` by default, and most things are resolved from there.\n+* `serverDir` now defaults to `<rootDir>/server` rather than `<srcDir>/server`\n+* `modules` and `public` are resolved relative to `<rootDir>` by default\n+* a new `dir.app` is added, which is the directory we look for `router.options.ts` and `spa-loading-template.html` - this defaults to `<srcDir>/`\n+\n+<details>\n+\n+<summary>An example v4 folder structure.</summary>\n+\n+```sh\n+.output/\n+.nuxt/\n+app/\n+  assets/\n+  components/\n+  composables/\n+  layouts/\n+  middleware/\n+  pages/\n+  plugins/\n+  utils/\n+  app.vue\n+  router.options.ts\n+modules/\n+node_modules/\n+public/\n+server/\n+  api/\n+  middleware/\n+  plugins/\n+  routes/\n+  utils/\n+nuxt.config.ts\n+```\n+\n+</details>\n+\n+\ud83d\udc49 For more details, see [the PR implementing this change](https://github.com/nuxt/nuxt/pull/27029).\n+\n+##### Reasons for change\n+\n+1. **performance** - placing all your code in the root of your repo causes issues with `.git/` and `node_modules/` folders being scanned/included by FS watchers which can significantly delay startup on non-Mac OSes.\n+1. **IDE type-safety** - `server/` and the rest of your app are running in two entirely different contexts with different global imports available, and making sure `server/` isn't _inside_ the same folder as the rest of your app is a big first step to ensuring you get good auto-completes in your IDE.\n+\n+##### Migration steps\n+\n+1. Create a new directory called `app/`\n+1. Move your `assets/`, `components/`, `composables/`, `layouts/`, `middleware/`, `pages/`, `plugins/` and `utils/` folders under it, as well as `app.vue`, `error.vue`. If you have an `app/router-options.ts` or `app/spa-loading-template.html`, these paths remain the same.\n+1. Make sure your `nuxt.config.ts`, `modules/`, `public/` and `server/` folders remain outside the `app/` folder, in the root of your project.\n+\n+However, migration is _not required_. If you wish to keep your current folder structure, Nuxt should auto-detect it. (If it does not, please raise an issue.) You can also force a v3 folder structure with the following configuration:\n+\n+```ts\n+export default defineNuxtConfig({\n+  // This reverts the new srcDir default from `app` back to your root directory\n+  srcDir: '.',\n+  // This specifies the directory prefix for `app/router.options.ts` and `app/spa-loading-template.html`\n+  dir: {\n+    app: 'app'\n+  }\n+})\n+```\n+\n+#### Shallow data reactivity in `useAsyncData` and `useFetch`\n+\n+The `data` object returned from `useAsyncData`, `useFetch`, `useLazyAsyncData` and `useLazyFetch` is now a `shallowRef` rather than a `ref`.\n+\n+##### What changed\n+\n+When new data is fetched, anything depending on `data` will still be reactive because the entire object is replaced. But if your code changes a property _within_ that data structure, this will not trigger any reactivity in your app.\n+\n+##### Reasons for change\n+\n+This brings a **significant** performance improvement for deeply nested objects and arrays, because Vue does not need to watch every single property/array for modification. In most cases, `data` should also be immutable.\n+\n+##### Migration steps\n+\n+In most cases no migration steps are required, but if you rely on the reactivity of the data object then you have two options:\n+\n+1. You can granularly opt-in to deep reactivity on a per-composable basis\n+   ```diff\n+   - const { data } = useFetch('/api/test')\n+   + const { data } = useFetch('/api/test', { deep: true })\n+   ```\n+1. You can change the default behavior on a project-wide basis (not recommended):\n+   ```ts\n+   export default defineNuxtConfig({\n+     experimental: {\n+       defaults: {\n+         useAsyncData: {\n+           deep: true\n+         }\n+       }\n+     }\n+   })\n+   ```\n+\n+#### Absolute watch paths in `builder:watch`\n+\n+##### What changed\n+\n+The Nuxt `builder:watch` hook now emits a path which is absolute rather than relative to your project `srcDir`.\n+\n+##### Reasons for change\n+\n+This allows us to support watching paths which are outside your `srcDir`, and offers better support for layers and other more complex patterns.\n+\n+##### Migration steps\n+\n+We have already proactively migrated the public Nuxt modules which we are aware use this hook. See [issue #25339](https://github.com/nuxt/nuxt/issues/25339).\n+\n+However, if you are a module author using the `builder:watch` hook and wishing to remain backwards/forwards compatible, you can use the following code to ensure that your code works the same in both Nuxt v3 and Nuxt v4:\n+\n+ ```diff\n++ import { relative, resolve } from 'node:fs'\n+  // ...\n+  nuxt.hook('builder:watch', async (event, path) => {\n++   path = relative(nuxt.options.srcDir, resolve(nuxt.options.srcDir, path))\n+    // ...\n+  })\n+```\n+\n+#### Template compilation changes\n+\n+##### What changed\n+\n+Previously, Nuxt used `lodash/template` to compile templates located on the file system using the `.ejs` file format/syntax.\n+\n+In addition, we provided some template utilities (`serialize`, `importName`, `importSources`) which could be used for code-generation within these templates, which are now being removed.\n+\n+##### Reasons for change\n+\n+In Nuxt v3 we moved to a 'virtual' syntax with a `getContents()` function which is much more flexible and performant.\n+\n+In addition, `lodash/template` has had a succession of security issues. These do not really apply to Nuxt projects because it is being used at build-time, not runtime, and by trusted code. However, they still appear in security audits. Moreover, `lodash` is a hefty dependency and is unused by most projects.\n+\n+Finally, providing code serialization functions directly within Nuxt is not ideal. Instead we maintain projects like [unjs/knitwork](http://github.com/unjs/knitwork) which can be dependencies of your project, and where security issues can be reported/resolved directly without requiring an upgrade of Nuxt itself.\n+\n+##### Migration steps\n+\n+We have raised PRs to update modules using EJS syntax, but if you need to do this yourself, you have three backwards/forwards-compatible alternatives.\n+\n+* Move your string interpolation logic directly into `getContents()`.\n+* Using custom function to handle the replacement, such as in https://github.com/nuxt-modules/color-mode/pull/240.\n+* Continue to use `lodash`, as a dependency of _your_ project rather than Nuxt:",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1595291180",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 27128,
        "pr_file": "docs/1.getting-started/12.upgrade.md",
        "discussion_id": "1595291180",
        "commented_code": "@@ -5,19 +5,258 @@ navigation.icon: i-ph-arrow-circle-up-duotone\n ---\n \n \n-## Upgrading Nuxt 3\n+## Upgrading Nuxt\n \n ### Latest release\n \n-To upgrade Nuxt 3 to the [latest release](https://github.com/nuxt/nuxt/releases), use the `nuxi upgrade` command.\n+To upgrade Nuxt to the [latest release](https://github.com/nuxt/nuxt/releases), use the `nuxi upgrade` command.\n \n ```bash [Terminal]\n npx nuxi upgrade\n ```\n \n ### Nightly Release Channel\n \n-To use the latest Nuxt 3 build and test features before their release, read about the [nightly release channel](/docs/guide/going-further/nightly-release-channel) guide.\n+To use the latest Nuxt build and test features before their release, read about the [nightly release channel](/docs/guide/going-further/nightly-release-channel) guide.\n+\n+## Testing Nuxt 4\n+\n+Nuxt 4 is planned to be released **on or before June 14** (though obviously this is dependent on having enough time after Nitro's major release to be properly tested in the community, so be aware that this is not an exact date).\n+\n+Until then, it is possible to test many of Nuxt 4's breaking changes on the nightly release channel.\n+\n+### Opting-in to Nuxt 4\n+\n+First, opt-in to the nightly release channel [following these steps](/docs/guide/going-further/nightly-release-channel#opting-in).\n+\n+Then you can set your `compatibilityVersion` to match Nuxt 4 behavior:\n+\n+```ts\n+export default defineNuxtConfig({\n+  future: {\n+    compatibilityVersion: 4,\n+  },\n+  // To re-enable _all_ Nuxt v3 behaviour, set the following options:\n+  // srcDir: '.',\n+  // dir: {\n+  //   app: 'app'\n+  // },\n+  // experimental: {\n+  //   compileTemplate: true,\n+  //   templateUtils: true,\n+  //   relativeWatchPaths: true,\n+  //   defaults: {\n+  //     useAsyncData: {\n+  //       deep: true\n+  //     }\n+  //   }\n+  // },\n+  // unhead: {\n+  //   renderSSRHeadOptions: {\n+  //     omitLineBreaks: false\n+  //   }\n+  // }\n+})\n+```\n+\n+When you set your `compatibilityVersion` to `4`, defaults throughout your Nuxt configuration will change to opt-in to Nuxt v4 behaviour, but you can granularly re-enable Nuxt v3 behaviour\n+when testing, following the commented out lines above. Please file issues if so, so that we can address in Nuxt or in the ecosystem.\n+\n+### Migrating to Nuxt 4\n+\n+Breaking or significant changes will be noted here along with migration steps for backward/forward compatibility.\n+\n+::alert\n+This section is not final until the final release, so please check back here regularly until then if you are testing Nuxt 4 using `compatibilityVersion: 4`.\n+::\n+\n+#### New directory structure\n+\n+Nuxt now defaults to a new default structure, with backwards compatibility (so if Nuxt detects you are using the old structure, such as with a top-level `pages/` directory, this new structure will not apply).\n+\n+\ud83d\udc49 [See full RFC](https://github.com/nuxt/nuxt/issues/26444)\n+\n+##### What changed\n+\n+* the new Nuxt default `srcDir` is `app/` by default, and most things are resolved from there.\n+* `serverDir` now defaults to `<rootDir>/server` rather than `<srcDir>/server`\n+* `modules` and `public` are resolved relative to `<rootDir>` by default\n+* a new `dir.app` is added, which is the directory we look for `router.options.ts` and `spa-loading-template.html` - this defaults to `<srcDir>/`\n+\n+<details>\n+\n+<summary>An example v4 folder structure.</summary>\n+\n+```sh\n+.output/\n+.nuxt/\n+app/\n+  assets/\n+  components/\n+  composables/\n+  layouts/\n+  middleware/\n+  pages/\n+  plugins/\n+  utils/\n+  app.vue\n+  router.options.ts\n+modules/\n+node_modules/\n+public/\n+server/\n+  api/\n+  middleware/\n+  plugins/\n+  routes/\n+  utils/\n+nuxt.config.ts\n+```\n+\n+</details>\n+\n+\ud83d\udc49 For more details, see [the PR implementing this change](https://github.com/nuxt/nuxt/pull/27029).\n+\n+##### Reasons for change\n+\n+1. **performance** - placing all your code in the root of your repo causes issues with `.git/` and `node_modules/` folders being scanned/included by FS watchers which can significantly delay startup on non-Mac OSes.\n+1. **IDE type-safety** - `server/` and the rest of your app are running in two entirely different contexts with different global imports available, and making sure `server/` isn't _inside_ the same folder as the rest of your app is a big first step to ensuring you get good auto-completes in your IDE.\n+\n+##### Migration steps\n+\n+1. Create a new directory called `app/`\n+1. Move your `assets/`, `components/`, `composables/`, `layouts/`, `middleware/`, `pages/`, `plugins/` and `utils/` folders under it, as well as `app.vue`, `error.vue`. If you have an `app/router-options.ts` or `app/spa-loading-template.html`, these paths remain the same.\n+1. Make sure your `nuxt.config.ts`, `modules/`, `public/` and `server/` folders remain outside the `app/` folder, in the root of your project.\n+\n+However, migration is _not required_. If you wish to keep your current folder structure, Nuxt should auto-detect it. (If it does not, please raise an issue.) You can also force a v3 folder structure with the following configuration:\n+\n+```ts\n+export default defineNuxtConfig({\n+  // This reverts the new srcDir default from `app` back to your root directory\n+  srcDir: '.',\n+  // This specifies the directory prefix for `app/router.options.ts` and `app/spa-loading-template.html`\n+  dir: {\n+    app: 'app'\n+  }\n+})\n+```\n+\n+#### Shallow data reactivity in `useAsyncData` and `useFetch`\n+\n+The `data` object returned from `useAsyncData`, `useFetch`, `useLazyAsyncData` and `useLazyFetch` is now a `shallowRef` rather than a `ref`.\n+\n+##### What changed\n+\n+When new data is fetched, anything depending on `data` will still be reactive because the entire object is replaced. But if your code changes a property _within_ that data structure, this will not trigger any reactivity in your app.\n+\n+##### Reasons for change\n+\n+This brings a **significant** performance improvement for deeply nested objects and arrays, because Vue does not need to watch every single property/array for modification. In most cases, `data` should also be immutable.\n+\n+##### Migration steps\n+\n+In most cases no migration steps are required, but if you rely on the reactivity of the data object then you have two options:\n+\n+1. You can granularly opt-in to deep reactivity on a per-composable basis\n+   ```diff\n+   - const { data } = useFetch('/api/test')\n+   + const { data } = useFetch('/api/test', { deep: true })\n+   ```\n+1. You can change the default behavior on a project-wide basis (not recommended):\n+   ```ts\n+   export default defineNuxtConfig({\n+     experimental: {\n+       defaults: {\n+         useAsyncData: {\n+           deep: true\n+         }\n+       }\n+     }\n+   })\n+   ```\n+\n+#### Absolute watch paths in `builder:watch`\n+\n+##### What changed\n+\n+The Nuxt `builder:watch` hook now emits a path which is absolute rather than relative to your project `srcDir`.\n+\n+##### Reasons for change\n+\n+This allows us to support watching paths which are outside your `srcDir`, and offers better support for layers and other more complex patterns.\n+\n+##### Migration steps\n+\n+We have already proactively migrated the public Nuxt modules which we are aware use this hook. See [issue #25339](https://github.com/nuxt/nuxt/issues/25339).\n+\n+However, if you are a module author using the `builder:watch` hook and wishing to remain backwards/forwards compatible, you can use the following code to ensure that your code works the same in both Nuxt v3 and Nuxt v4:\n+\n+ ```diff\n++ import { relative, resolve } from 'node:fs'\n+  // ...\n+  nuxt.hook('builder:watch', async (event, path) => {\n++   path = relative(nuxt.options.srcDir, resolve(nuxt.options.srcDir, path))\n+    // ...\n+  })\n+```\n+\n+#### Template compilation changes\n+\n+##### What changed\n+\n+Previously, Nuxt used `lodash/template` to compile templates located on the file system using the `.ejs` file format/syntax.\n+\n+In addition, we provided some template utilities (`serialize`, `importName`, `importSources`) which could be used for code-generation within these templates, which are now being removed.\n+\n+##### Reasons for change\n+\n+In Nuxt v3 we moved to a 'virtual' syntax with a `getContents()` function which is much more flexible and performant.\n+\n+In addition, `lodash/template` has had a succession of security issues. These do not really apply to Nuxt projects because it is being used at build-time, not runtime, and by trusted code. However, they still appear in security audits. Moreover, `lodash` is a hefty dependency and is unused by most projects.\n+\n+Finally, providing code serialization functions directly within Nuxt is not ideal. Instead we maintain projects like [unjs/knitwork](http://github.com/unjs/knitwork) which can be dependencies of your project, and where security issues can be reported/resolved directly without requiring an upgrade of Nuxt itself.\n+\n+##### Migration steps\n+\n+We have raised PRs to update modules using EJS syntax, but if you need to do this yourself, you have three backwards/forwards-compatible alternatives.\n+\n+* Move your string interpolation logic directly into `getContents()`.\n+* Using custom function to handle the replacement, such as in https://github.com/nuxt-modules/color-mode/pull/240.\n+* Continue to use `lodash`, as a dependency of _your_ project rather than Nuxt:",
        "comment_created_at": "2024-05-09T10:49:10+00:00",
        "comment_author": "DamianGlowala",
        "comment_body": "```suggestion\r\n* Moving your string interpolation logic directly into `getContents()`.\r\n* Using a custom function to handle the replacement, such as in https://github.com/nuxt-modules/color-mode/pull/240.\r\n* Continuing to use `lodash`, as a dependency of _your_ project rather than Nuxt:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1185370293",
    "pr_number": 20636,
    "pr_file": "docs/2.guide/2.directory-structure/1.server.md",
    "created_at": "2023-05-04T18:33:46+00:00",
    "commented_code": "```\n \n ::alert{type=warning}\n-Never combine `next()` callback with a legacy middleware that is `async` or returns a `Promise`!\n+Never combine the `next()` callback with an `async` or `Promise` returning legacy middleware!",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1185370293",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/2.guide/2.directory-structure/1.server.md",
        "discussion_id": "1185370293",
        "commented_code": "@@ -283,12 +283,12 @@ export default fromNodeMiddleware((req, res, next) => {\n ```\n \n ::alert{type=warning}\n-Never combine `next()` callback with a legacy middleware that is `async` or returns a `Promise`!\n+Never combine the `next()` callback with an `async` or `Promise` returning legacy middleware!",
        "comment_created_at": "2023-05-04T18:33:46+00:00",
        "comment_author": "DamianGlowala",
        "comment_body": "Not sure whether treating `async` as a noun here (_something_ returning a legacy middleware) sounds easier to follow than the original sentence and is logically correct. I would keep the focus on _legacy middleware_.",
        "pr_file_module": null
      },
      {
        "comment_id": "1185492267",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/2.guide/2.directory-structure/1.server.md",
        "discussion_id": "1185370293",
        "commented_code": "@@ -283,12 +283,12 @@ export default fromNodeMiddleware((req, res, next) => {\n ```\n \n ::alert{type=warning}\n-Never combine `next()` callback with a legacy middleware that is `async` or returns a `Promise`!\n+Never combine the `next()` callback with an `async` or `Promise` returning legacy middleware!",
        "comment_created_at": "2023-05-04T20:40:52+00:00",
        "comment_author": "GalacticHypernova",
        "comment_body": "Fixed!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1186715908",
    "pr_number": 20636,
    "pr_file": "docs/1.getting-started/10.deployment.md",
    "created_at": "2023-05-06T16:07:50+00:00",
    "commented_code": "#### Using Cluster Mode\n \n-You can use `NITRO_PRESET=node_cluster` in order to leverage multi-process performance using Node.js [cluster](https://nodejs.org/dist/latest/docs/api/cluster.html) module.\n+You can use `NITRO_PRESET=node_cluster` to leverage multi-process performance using Node.js [cluster](https://nodejs.org/dist/latest/docs/api/cluster.html) module.\n \n-By default, the workload gets distributed to the workers with the round robin strategy.\n+By default, the workload gets distributed to the workers with the round-robin strategy.\n \n ### Learn More\n \n :ReadMore{link=\"https://nitro.unjs.io/deploy/node\" title=\"the Nitro documentation for node-server preset\"}\n \n ## Static Hosting\n \n-There are two ways to deploy a Nuxt application to any static hosting services:\n+There are two ways to deploy a Nuxt application to any static hosting service:\n \n-- Static site generation (SSG) with `ssr: true` pre-renders routes of your application at build time. (This is the default behaviour when running `nuxi generate`.) It will also generate `/200.html` and `/404.html` single-page app fallback pages, which can render dynamic routes or 404 errors on the client (though you may need to configure this on your static host).\n-- Alternatively, you can prerender your site with `ssr: false` (static single-page app). This will produce HTML pages with an empty `<div id=\"__nuxt\"></div>` where your Vue app would normally be rendered. You will lose many of the benefits of prerendering your site, so it is suggested instead to use `<ClientOnly>` to wrap the portions of your site that cannot be server rendered (if any).\n+- Static site generation (SSG) with `ssr: true` pre-renders your application's routes at build time. (This is the default behavior when running `nuxi generate`.) It will also generate `/200.html` and `/404.html` single-page app fallback pages, which can render dynamic routes or 404 errors on the client (though you may need to configure this on your static host).",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1186715908",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/1.getting-started/10.deployment.md",
        "discussion_id": "1186715908",
        "commented_code": "@@ -64,24 +64,24 @@ module.exports = {\n \n #### Using Cluster Mode\n \n-You can use `NITRO_PRESET=node_cluster` in order to leverage multi-process performance using Node.js [cluster](https://nodejs.org/dist/latest/docs/api/cluster.html) module.\n+You can use `NITRO_PRESET=node_cluster` to leverage multi-process performance using Node.js [cluster](https://nodejs.org/dist/latest/docs/api/cluster.html) module.\n \n-By default, the workload gets distributed to the workers with the round robin strategy.\n+By default, the workload gets distributed to the workers with the round-robin strategy.\n \n ### Learn More\n \n :ReadMore{link=\"https://nitro.unjs.io/deploy/node\" title=\"the Nitro documentation for node-server preset\"}\n \n ## Static Hosting\n \n-There are two ways to deploy a Nuxt application to any static hosting services:\n+There are two ways to deploy a Nuxt application to any static hosting service:\n \n-- Static site generation (SSG) with `ssr: true` pre-renders routes of your application at build time. (This is the default behaviour when running `nuxi generate`.) It will also generate `/200.html` and `/404.html` single-page app fallback pages, which can render dynamic routes or 404 errors on the client (though you may need to configure this on your static host).\n-- Alternatively, you can prerender your site with `ssr: false` (static single-page app). This will produce HTML pages with an empty `<div id=\"__nuxt\"></div>` where your Vue app would normally be rendered. You will lose many of the benefits of prerendering your site, so it is suggested instead to use `<ClientOnly>` to wrap the portions of your site that cannot be server rendered (if any).\n+- Static site generation (SSG) with `ssr: true` pre-renders your application's routes at build time. (This is the default behavior when running `nuxi generate`.) It will also generate `/200.html` and `/404.html` single-page app fallback pages, which can render dynamic routes or 404 errors on the client (though you may need to configure this on your static host).",
        "comment_created_at": "2023-05-06T16:07:50+00:00",
        "comment_author": "DamianGlowala",
        "comment_body": "```suggestion\r\n- Static Site Generation (SSG) with `ssr: true` pre-renders your application's routes at build time. (This is the default behavior when running `nuxi generate`.) It will also generate `/200.html` and `/404.html` single-page app's fallback pages, which can render dynamic routes or 404 errors on the client (though you may need to configure this on your static host).\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1186727454",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/1.getting-started/10.deployment.md",
        "discussion_id": "1186715908",
        "commented_code": "@@ -64,24 +64,24 @@ module.exports = {\n \n #### Using Cluster Mode\n \n-You can use `NITRO_PRESET=node_cluster` in order to leverage multi-process performance using Node.js [cluster](https://nodejs.org/dist/latest/docs/api/cluster.html) module.\n+You can use `NITRO_PRESET=node_cluster` to leverage multi-process performance using Node.js [cluster](https://nodejs.org/dist/latest/docs/api/cluster.html) module.\n \n-By default, the workload gets distributed to the workers with the round robin strategy.\n+By default, the workload gets distributed to the workers with the round-robin strategy.\n \n ### Learn More\n \n :ReadMore{link=\"https://nitro.unjs.io/deploy/node\" title=\"the Nitro documentation for node-server preset\"}\n \n ## Static Hosting\n \n-There are two ways to deploy a Nuxt application to any static hosting services:\n+There are two ways to deploy a Nuxt application to any static hosting service:\n \n-- Static site generation (SSG) with `ssr: true` pre-renders routes of your application at build time. (This is the default behaviour when running `nuxi generate`.) It will also generate `/200.html` and `/404.html` single-page app fallback pages, which can render dynamic routes or 404 errors on the client (though you may need to configure this on your static host).\n-- Alternatively, you can prerender your site with `ssr: false` (static single-page app). This will produce HTML pages with an empty `<div id=\"__nuxt\"></div>` where your Vue app would normally be rendered. You will lose many of the benefits of prerendering your site, so it is suggested instead to use `<ClientOnly>` to wrap the portions of your site that cannot be server rendered (if any).\n+- Static site generation (SSG) with `ssr: true` pre-renders your application's routes at build time. (This is the default behavior when running `nuxi generate`.) It will also generate `/200.html` and `/404.html` single-page app fallback pages, which can render dynamic routes or 404 errors on the client (though you may need to configure this on your static host).",
        "comment_created_at": "2023-05-06T17:55:07+00:00",
        "comment_author": "GalacticHypernova",
        "comment_body": "Is the 's really necessary here?",
        "pr_file_module": null
      },
      {
        "comment_id": "1186730531",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/1.getting-started/10.deployment.md",
        "discussion_id": "1186715908",
        "commented_code": "@@ -64,24 +64,24 @@ module.exports = {\n \n #### Using Cluster Mode\n \n-You can use `NITRO_PRESET=node_cluster` in order to leverage multi-process performance using Node.js [cluster](https://nodejs.org/dist/latest/docs/api/cluster.html) module.\n+You can use `NITRO_PRESET=node_cluster` to leverage multi-process performance using Node.js [cluster](https://nodejs.org/dist/latest/docs/api/cluster.html) module.\n \n-By default, the workload gets distributed to the workers with the round robin strategy.\n+By default, the workload gets distributed to the workers with the round-robin strategy.\n \n ### Learn More\n \n :ReadMore{link=\"https://nitro.unjs.io/deploy/node\" title=\"the Nitro documentation for node-server preset\"}\n \n ## Static Hosting\n \n-There are two ways to deploy a Nuxt application to any static hosting services:\n+There are two ways to deploy a Nuxt application to any static hosting service:\n \n-- Static site generation (SSG) with `ssr: true` pre-renders routes of your application at build time. (This is the default behaviour when running `nuxi generate`.) It will also generate `/200.html` and `/404.html` single-page app fallback pages, which can render dynamic routes or 404 errors on the client (though you may need to configure this on your static host).\n-- Alternatively, you can prerender your site with `ssr: false` (static single-page app). This will produce HTML pages with an empty `<div id=\"__nuxt\"></div>` where your Vue app would normally be rendered. You will lose many of the benefits of prerendering your site, so it is suggested instead to use `<ClientOnly>` to wrap the portions of your site that cannot be server rendered (if any).\n+- Static site generation (SSG) with `ssr: true` pre-renders your application's routes at build time. (This is the default behavior when running `nuxi generate`.) It will also generate `/200.html` and `/404.html` single-page app fallback pages, which can render dynamic routes or 404 errors on the client (though you may need to configure this on your static host).",
        "comment_created_at": "2023-05-06T18:24:54+00:00",
        "comment_author": "DamianGlowala",
        "comment_body": "Hmm... what about entirely removing the phrase 'single-page app'? Doesn't seem to bring significant value (+ 404 error rather than errors, it's one in the end):\r\n```suggestion\r\n- Static Site Generation (SSG) with `ssr: true` pre-renders your application's routes at build time. (This is the default behavior when running `nuxi generate`.) It will also generate `/200.html` and `/404.html` fallback pages, which can render dynamic routes or 404 error on the client (though you may need to configure this on your static host).\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1186739857",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/1.getting-started/10.deployment.md",
        "discussion_id": "1186715908",
        "commented_code": "@@ -64,24 +64,24 @@ module.exports = {\n \n #### Using Cluster Mode\n \n-You can use `NITRO_PRESET=node_cluster` in order to leverage multi-process performance using Node.js [cluster](https://nodejs.org/dist/latest/docs/api/cluster.html) module.\n+You can use `NITRO_PRESET=node_cluster` to leverage multi-process performance using Node.js [cluster](https://nodejs.org/dist/latest/docs/api/cluster.html) module.\n \n-By default, the workload gets distributed to the workers with the round robin strategy.\n+By default, the workload gets distributed to the workers with the round-robin strategy.\n \n ### Learn More\n \n :ReadMore{link=\"https://nitro.unjs.io/deploy/node\" title=\"the Nitro documentation for node-server preset\"}\n \n ## Static Hosting\n \n-There are two ways to deploy a Nuxt application to any static hosting services:\n+There are two ways to deploy a Nuxt application to any static hosting service:\n \n-- Static site generation (SSG) with `ssr: true` pre-renders routes of your application at build time. (This is the default behaviour when running `nuxi generate`.) It will also generate `/200.html` and `/404.html` single-page app fallback pages, which can render dynamic routes or 404 errors on the client (though you may need to configure this on your static host).\n-- Alternatively, you can prerender your site with `ssr: false` (static single-page app). This will produce HTML pages with an empty `<div id=\"__nuxt\"></div>` where your Vue app would normally be rendered. You will lose many of the benefits of prerendering your site, so it is suggested instead to use `<ClientOnly>` to wrap the portions of your site that cannot be server rendered (if any).\n+- Static site generation (SSG) with `ssr: true` pre-renders your application's routes at build time. (This is the default behavior when running `nuxi generate`.) It will also generate `/200.html` and `/404.html` single-page app fallback pages, which can render dynamic routes or 404 errors on the client (though you may need to configure this on your static host).",
        "comment_created_at": "2023-05-06T19:56:23+00:00",
        "comment_author": "GalacticHypernova",
        "comment_body": "I think the plural is fine here, since you would need to add an 'a' for it to be singular",
        "pr_file_module": null
      },
      {
        "comment_id": "1186740146",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/1.getting-started/10.deployment.md",
        "discussion_id": "1186715908",
        "commented_code": "@@ -64,24 +64,24 @@ module.exports = {\n \n #### Using Cluster Mode\n \n-You can use `NITRO_PRESET=node_cluster` in order to leverage multi-process performance using Node.js [cluster](https://nodejs.org/dist/latest/docs/api/cluster.html) module.\n+You can use `NITRO_PRESET=node_cluster` to leverage multi-process performance using Node.js [cluster](https://nodejs.org/dist/latest/docs/api/cluster.html) module.\n \n-By default, the workload gets distributed to the workers with the round robin strategy.\n+By default, the workload gets distributed to the workers with the round-robin strategy.\n \n ### Learn More\n \n :ReadMore{link=\"https://nitro.unjs.io/deploy/node\" title=\"the Nitro documentation for node-server preset\"}\n \n ## Static Hosting\n \n-There are two ways to deploy a Nuxt application to any static hosting services:\n+There are two ways to deploy a Nuxt application to any static hosting service:\n \n-- Static site generation (SSG) with `ssr: true` pre-renders routes of your application at build time. (This is the default behaviour when running `nuxi generate`.) It will also generate `/200.html` and `/404.html` single-page app fallback pages, which can render dynamic routes or 404 errors on the client (though you may need to configure this on your static host).\n-- Alternatively, you can prerender your site with `ssr: false` (static single-page app). This will produce HTML pages with an empty `<div id=\"__nuxt\"></div>` where your Vue app would normally be rendered. You will lose many of the benefits of prerendering your site, so it is suggested instead to use `<ClientOnly>` to wrap the portions of your site that cannot be server rendered (if any).\n+- Static site generation (SSG) with `ssr: true` pre-renders your application's routes at build time. (This is the default behavior when running `nuxi generate`.) It will also generate `/200.html` and `/404.html` single-page app fallback pages, which can render dynamic routes or 404 errors on the client (though you may need to configure this on your static host).",
        "comment_created_at": "2023-05-06T20:00:01+00:00",
        "comment_author": "GalacticHypernova",
        "comment_body": "Implemented alternative phrasing",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1186814771",
    "pr_number": 20636,
    "pr_file": "docs/1.getting-started/5.seo-meta.md",
    "created_at": "2023-05-07T09:15:25+00:00",
    "commented_code": "Providing an [`app.head`](/docs/api/configuration/nuxt-config#head) property in your [`nuxt.config.ts`](/docs/guide/directory-structure/nuxt.config) allows you to customize the head for your entire app.\n \n ::alert{type=info}\n-This method does not allow you to provide reactive data. We recommend to use `useHead()` in `app.vue`.\n+This method does not allow you to provide reactive data. We recommend using `useHead()` in `app.vue`.\n ::\n \n Shortcuts are available to make configuration easier: `charset` and `viewport`. You can also provide any of the keys listed below in [Types](#types).\n \n ## `useHead`\n \n-The `useHead` composable function allows you to manage your head tags in a programmatic and reactive way,\n+The `useHead` composable function allows you to manage your head tags programmatically and reactively,\n powered by [Unhead](https://unhead.harlanzw.com/).",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1186814771",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/1.getting-started/5.seo-meta.md",
        "discussion_id": "1186814771",
        "commented_code": "@@ -28,17 +28,17 @@ export default defineNuxtConfig({\n Providing an [`app.head`](/docs/api/configuration/nuxt-config#head) property in your [`nuxt.config.ts`](/docs/guide/directory-structure/nuxt.config) allows you to customize the head for your entire app.\n \n ::alert{type=info}\n-This method does not allow you to provide reactive data. We recommend to use `useHead()` in `app.vue`.\n+This method does not allow you to provide reactive data. We recommend using `useHead()` in `app.vue`.\n ::\n \n Shortcuts are available to make configuration easier: `charset` and `viewport`. You can also provide any of the keys listed below in [Types](#types).\n \n ## `useHead`\n \n-The `useHead` composable function allows you to manage your head tags in a programmatic and reactive way,\n+The `useHead` composable function allows you to manage your head tags programmatically and reactively,\n powered by [Unhead](https://unhead.harlanzw.com/).",
        "comment_created_at": "2023-05-07T09:15:25+00:00",
        "comment_author": "DamianGlowala",
        "comment_body": "I'd personally go for the second option:\r\n```suggestion\r\nThe `useHead` composable function allows you to manage your head tags programmatically and reactively (powered by [Unhead](https://unhead.harlanzw.com)).\r\n```\r\n```suggestion\r\nThe `useHead` composable function allows you to manage your head tags programmatically and reactively. It is powered by [Unhead](https://unhead.harlanzw.com).\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1186821868",
    "pr_number": 20636,
    "pr_file": "docs/1.getting-started/6.data-fetching.md",
    "created_at": "2023-05-07T10:02:31+00:00",
    "commented_code": "## Using `$fetch` directly\n \n-There are instances where you may need to directly call the API. Nuxt 3 provides a globally available `$fetch` method using [unjs/ofetch](https://github.com/unjs/ofetch) (in addition to `fetch`) with the same API as the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).\n+There are instances where you may need to call the API directly. Nuxt 3 provides a globally available `$fetch` method using [unjs/ofetch](https://github.com/unjs/ofetch) (in addition to `fetch`) with the same API as the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).\n \n-Using `$fetch` has a number of benefits, including:\n+Using `$fetch` has several benefits, including:",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1186821868",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/1.getting-started/6.data-fetching.md",
        "discussion_id": "1186821868",
        "commented_code": "@@ -272,13 +272,13 @@ Using `<script setup lang=\"ts\">` is the recommended way of declaring Vue compone\n \n ## Using `$fetch` directly\n \n-There are instances where you may need to directly call the API. Nuxt 3 provides a globally available `$fetch` method using [unjs/ofetch](https://github.com/unjs/ofetch) (in addition to `fetch`) with the same API as the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).\n+There are instances where you may need to call the API directly. Nuxt 3 provides a globally available `$fetch` method using [unjs/ofetch](https://github.com/unjs/ofetch) (in addition to `fetch`) with the same API as the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).\n \n-Using `$fetch` has a number of benefits, including:\n+Using `$fetch` has several benefits, including:",
        "comment_created_at": "2023-05-07T10:02:31+00:00",
        "comment_author": "DamianGlowala",
        "comment_body": "_(...) including:_ makes me expect a list, not necessarily standalone paragraphs. What about merging first two into one and leaving the last sentence as it is?\r\n\r\n```suggestion\r\nUsing `$fetch` has several benefits. It will handle 'smartly' making direct API calls if it runs on the server or making a client-side call to your API if it runs on the client. (It can also handle calling third-party APIs.)\r\n\r\nPlus, it comes with a set of convenience features, including automatically parsing responses and stringifying data.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1186858566",
    "pr_number": 20636,
    "pr_file": "docs/2.guide/2.directory-structure/1.public.md",
    "created_at": "2023-05-07T13:58:49+00:00",
    "commented_code": "# Public Directory\n \n-The\u00a0`public/`\u00a0directory is directly served at the server root and contains public files that have to keep their names (e.g. `robots.txt`) _or_ likely won't change (e.g. `favicon.ico`).\n+The\u00a0`public/`\u00a0directory is directly served at the server's root and contains public files that must keep their names (e.g. `robots.txt`) _or_ likely won't change (e.g. `favicon.ico`).",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1186858566",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/2.guide/2.directory-structure/1.public.md",
        "discussion_id": "1186858566",
        "commented_code": "@@ -7,7 +7,7 @@ head.title: \"public/\"\n \n # Public Directory\n \n-The\u00a0`public/`\u00a0directory is directly served at the server root and contains public files that have to keep their names (e.g. `robots.txt`) _or_ likely won't change (e.g. `favicon.ico`).\n+The\u00a0`public/`\u00a0directory is directly served at the server's root and contains public files that must keep their names (e.g. `robots.txt`) _or_ likely won't change (e.g. `favicon.ico`).",
        "comment_created_at": "2023-05-07T13:58:49+00:00",
        "comment_author": "DamianGlowala",
        "comment_body": "```suggestion\r\nThe\u00a0`public/`\u00a0directory is accessible at the server's root and contains public files that must keep their names (e.g. `robots.txt`) _or_ likely won't change (e.g. `favicon.ico`).\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1186904975",
    "pr_number": 20636,
    "pr_file": "docs/7.migration/8.runtime-config.md",
    "created_at": "2023-05-07T19:47:10+00:00",
    "commented_code": "# Runtime Config\n \n-If you wish to reference environment variables within your Nuxt 3 app, you will need to use runtime config.\n+If you wish to reference environment variables within your Nuxt 3 app, you use runtime config.",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1186904975",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/7.migration/8.runtime-config.md",
        "discussion_id": "1186904975",
        "commented_code": "@@ -1,16 +1,16 @@\n # Runtime Config\n \n-If you wish to reference environment variables within your Nuxt 3 app, you will need to use runtime config.\n+If you wish to reference environment variables within your Nuxt 3 app, you use runtime config.",
        "comment_created_at": "2023-05-07T19:47:10+00:00",
        "comment_author": "DamianGlowala",
        "comment_body": "_you use_ sounds like an order, unnatural. What about:\r\n```suggestion\r\nIf you wish to reference environment variables within your Nuxt 3 app, you can use runtime config.\r\n```\r\n... or even shorter:\r\n```suggestion\r\nIf you wish to reference environment variables within your Nuxt 3 app, use runtime config.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1190076893",
    "pr_number": 20636,
    "pr_file": "docs/1.getting-started/5.seo-meta.md",
    "created_at": "2023-05-10T15:25:03+00:00",
    "commented_code": "Providing an [`app.head`](/docs/api/configuration/nuxt-config#head) property in your [`nuxt.config.ts`](/docs/guide/directory-structure/nuxt.config) allows you to customize the head for your entire app.\n \n ::alert{type=info}\n-This method does not allow you to provide reactive data. We recommend to use `useHead()` in `app.vue`.\n+This method does not allow you to provide reactive data. We recommend using `useHead()` in `app.vue`.\n ::\n \n Shortcuts are available to make configuration easier: `charset` and `viewport`. You can also provide any of the keys listed below in [Types](#types).\n \n ## `useHead`\n \n-The `useHead` composable function allows you to manage your head tags in a programmatic and reactive way,\n-powered by [Unhead](https://unhead.harlanzw.com/).\n+The `useHead` composable function allows you to manage your head tags programmatically and reactively. It is powered by [Unhead](https://unhead.harlanzw.com).\n \n-As with all composables, it can only be used with a components `setup` and lifecycle hooks.\n+As with all composables, `useHead` must be used within a component's `setup` function and lifecycle hooks.",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1190076893",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/1.getting-started/5.seo-meta.md",
        "discussion_id": "1190076893",
        "commented_code": "@@ -28,17 +28,16 @@ export default defineNuxtConfig({\n Providing an [`app.head`](/docs/api/configuration/nuxt-config#head) property in your [`nuxt.config.ts`](/docs/guide/directory-structure/nuxt.config) allows you to customize the head for your entire app.\n \n ::alert{type=info}\n-This method does not allow you to provide reactive data. We recommend to use `useHead()` in `app.vue`.\n+This method does not allow you to provide reactive data. We recommend using `useHead()` in `app.vue`.\n ::\n \n Shortcuts are available to make configuration easier: `charset` and `viewport`. You can also provide any of the keys listed below in [Types](#types).\n \n ## `useHead`\n \n-The `useHead` composable function allows you to manage your head tags in a programmatic and reactive way,\n-powered by [Unhead](https://unhead.harlanzw.com/).\n+The `useHead` composable function allows you to manage your head tags programmatically and reactively. It is powered by [Unhead](https://unhead.harlanzw.com).\n \n-As with all composables, it can only be used with a components `setup` and lifecycle hooks.\n+As with all composables, `useHead` must be used within a component's `setup` function and lifecycle hooks.",
        "comment_created_at": "2023-05-10T15:25:03+00:00",
        "comment_author": "DamianGlowala",
        "comment_body": "Let's replace _and_ with _or_, as currently it sounds as if you had to use it in both! :)\r\n```suggestion\r\nAs with all composables, `useHead` must be used within a component's `setup` function or lifecycle hooks.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1192753277",
    "pr_number": 20636,
    "pr_file": "docs/2.guide/3.going-further/3.modules.md",
    "created_at": "2023-05-12T20:03:50+00:00",
    "commented_code": "It's a good practice to make a minimal reproduction with your module and [StackBlitz](https://nuxt.new/s/v3) that you add to your module readme.\n \n-This not only provides potential users of your module a quick and easy way to experiment with the module but also an easy way for them to build minimal reproductions they can send you when they encounter issues.\n+Not only does this provide potential users of your module a quick and easy way to experiment with the module, but also an easy way for them to build minimal reproductions they can send you when they encounter issues.\n \n #### Do Not Advertize With a Specific Nuxt Version",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1192753277",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/2.guide/3.going-further/3.modules.md",
        "discussion_id": "1192753277",
        "commented_code": "@@ -596,7 +596,7 @@ Linking to the integration website and documentation is always a good idea.\n \n It's a good practice to make a minimal reproduction with your module and [StackBlitz](https://nuxt.new/s/v3) that you add to your module readme.\n \n-This not only provides potential users of your module a quick and easy way to experiment with the module but also an easy way for them to build minimal reproductions they can send you when they encounter issues.\n+Not only does this provide potential users of your module a quick and easy way to experiment with the module, but also an easy way for them to build minimal reproductions they can send you when they encounter issues.\n \n #### Do Not Advertize With a Specific Nuxt Version",
        "comment_created_at": "2023-05-12T20:03:50+00:00",
        "comment_author": "DamianGlowala",
        "comment_body": "```suggestion\r\n#### Do Not Advertize with a Specific Nuxt Version\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1192766031",
    "pr_number": 20636,
    "pr_file": "docs/2.guide/3.going-further/5.nuxt-app.md",
    "created_at": "2023-05-12T20:24:17+00:00",
    "commented_code": "Plugins also receive `nuxtApp` as the first argument for convenience. [Read more about plugins.](/docs/guide/directory-structure/plugins)\n \n ::alert{icon=\ud83d\udc49}\n-**`useNuxtApp` (on the server) only works during `setup`, inside Nuxt plugins or `Lifecycle Hooks`**.\n+**`useNuxtApp` (on the server) only works during `setup` inside Nuxt plugins or `Lifecycle Hooks`**.",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1192766031",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 20636,
        "pr_file": "docs/2.guide/3.going-further/5.nuxt-app.md",
        "discussion_id": "1192766031",
        "commented_code": "@@ -21,12 +21,12 @@ function useMyComposable () {\n Plugins also receive `nuxtApp` as the first argument for convenience. [Read more about plugins.](/docs/guide/directory-structure/plugins)\n \n ::alert{icon=\ud83d\udc49}\n-**`useNuxtApp` (on the server) only works during `setup`, inside Nuxt plugins or `Lifecycle Hooks`**.\n+**`useNuxtApp` (on the server) only works during `setup` inside Nuxt plugins or `Lifecycle Hooks`**.",
        "comment_created_at": "2023-05-12T20:24:17+00:00",
        "comment_author": "DamianGlowala",
        "comment_body": "Removing comma changed the meaning of the sentence :)\r\n\r\nAlso, worth having a look: https://www.proofreadnow.com/blog/putting-only-in-its-place\r\n```suggestion\r\n**`useNuxtApp` (on the server) works only during component's `setup` function, lifecycle hooks and inside Nuxt plugins.**\r\n```",
        "pr_file_module": null
      }
    ]
  }
]