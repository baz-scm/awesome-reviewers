[
  {
    "discussion_id": "2169106992",
    "pr_number": 32483,
    "pr_file": "packages/nuxt/src/core/runtime/nitro/handlers/error.ts",
    "created_at": "2025-06-26T13:41:22+00:00",
    "commented_code": "const html = await res.text()\n   for (const [header, value] of res.headers.entries()) {\n+    if (header === 'set-cookie') {\n+      appendResponseHeader(event, header, value)",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "2169106992",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 32483,
        "pr_file": "packages/nuxt/src/core/runtime/nitro/handlers/error.ts",
        "discussion_id": "2169106992",
        "commented_code": "@@ -74,6 +74,10 @@ export default <NitroErrorHandler> async function errorhandler (error, event, {\n \n   const html = await res.text()\n   for (const [header, value] of res.headers.entries()) {\n+    if (header === 'set-cookie') {\n+      appendResponseHeader(event, header, value)",
        "comment_created_at": "2025-06-26T13:41:22+00:00",
        "comment_author": "pi0",
        "comment_body": "Parse + using [setCookie](https://github.com/h3js/h3/blob/dab856757c4cc92b6dfe6e02e7e80119f5e4327a/src/utils/cookie.ts#L45) might be much safer for merging.\r\n\r\n(append does not merges but sends duplicate headers, clients/browser should respect and merge)",
        "pr_file_module": null
      },
      {
        "comment_id": "2169110315",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 32483,
        "pr_file": "packages/nuxt/src/core/runtime/nitro/handlers/error.ts",
        "discussion_id": "2169106992",
        "commented_code": "@@ -74,6 +74,10 @@ export default <NitroErrorHandler> async function errorhandler (error, event, {\n \n   const html = await res.text()\n   for (const [header, value] of res.headers.entries()) {\n+    if (header === 'set-cookie') {\n+      appendResponseHeader(event, header, value)",
        "comment_created_at": "2025-06-26T13:42:50+00:00",
        "comment_author": "danielroe",
        "comment_body": "this is an already-serialised 'set-cookie' header, not a raw value. what we're doing here is very similar to the mergeHeaders function in h3:\r\n\r\nhttps://github.com/unjs/h3/blob/67af0575eb2078ba4c2ed1c535dfc168a4e578e6/src/response.ts#L101-L111",
        "pr_file_module": null
      },
      {
        "comment_id": "2169132299",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 32483,
        "pr_file": "packages/nuxt/src/core/runtime/nitro/handlers/error.ts",
        "discussion_id": "2169106992",
        "commented_code": "@@ -74,6 +74,10 @@ export default <NitroErrorHandler> async function errorhandler (error, event, {\n \n   const html = await res.text()\n   for (const [header, value] of res.headers.entries()) {\n+    if (header === 'set-cookie') {\n+      appendResponseHeader(event, header, value)",
        "comment_created_at": "2025-06-26T13:52:40+00:00",
        "comment_author": "danielroe",
        "comment_body": "the issue is that we want to _preserve_ the existing headers, as they are, rather than flattening them into a single `set-cookie` header.\r\n\r\nmerging to iterate, but let me know if you have any concerns \ud83d\ude4f ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1683558699",
    "pr_number": 28211,
    "pr_file": "packages/nuxt/src/app/composables/cookie.ts",
    "created_at": "2024-07-18T22:10:24+00:00",
    "commented_code": "const nuxtApp = useNuxtApp()\n     const writeFinalCookieValue = () => {\n       if (opts.readonly || isEqual(cookie.value, cookies[name])) { return }\n+      nuxtApp._cookies ||= {}\n+      if (name in nuxtApp._cookies) {\n+        // do not append a second `set-cookie` header\n+        if (isEqual(cookie.value, nuxtApp._cookies[name])) { return }",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1683558699",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28211,
        "pr_file": "packages/nuxt/src/app/composables/cookie.ts",
        "discussion_id": "1683558699",
        "commented_code": "@@ -126,6 +126,16 @@ export function useCookie<T = string | null | undefined> (name: string, _opts?:\n     const nuxtApp = useNuxtApp()\n     const writeFinalCookieValue = () => {\n       if (opts.readonly || isEqual(cookie.value, cookies[name])) { return }\n+      nuxtApp._cookies ||= {}\n+      if (name in nuxtApp._cookies) {\n+        // do not append a second `set-cookie` header\n+        if (isEqual(cookie.value, nuxtApp._cookies[name])) { return }",
        "comment_created_at": "2024-07-18T22:10:24+00:00",
        "comment_author": "pi0",
        "comment_body": "Checking equality only allows dedup when exact same options are used. Cookies are distinct by name, domain, path, secure, httpOnly and sameSite.\r\n\r\nAlso parse from cookie-es, does not parse all `set-cookie` options (it parsesd `cookie`!)\r\n\r\nSee https://github.com/unjs/h3/blob/b078181bd5c103dd7365bd33e263c492399afd67/src/utils/cookie.ts#L185, https://github.com/unjs/h3/blob/b078181bd5c103dd7365bd33e263c492399afd67/src/utils/cookie.ts#L44 and https://github.com/unjs/cookie-es/pull/43 for test.\r\n\r\nWe might do same thing in Nuxt composable or at least until adopting h3 v2 which properly do this.\r\n\r\n",
        "pr_file_module": null
      }
    ]
  }
]