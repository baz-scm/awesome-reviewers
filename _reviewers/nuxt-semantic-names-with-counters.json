[
  {
    "discussion_id": "540231737",
    "pr_number": 8466,
    "pr_file": "packages/vue-app/template/mixins/fetch.client.js",
    "created_at": "2020-12-10T14:52:53+00:00",
    "commented_code": "return\n   }\n   this._hydrated = true\n-  this._fetchKey = this.<%= globals.nuxt %>._payloadFetchIndex++\n+\n+  if (typeof this.$options.fetchKey === 'function') {\n+    this._fetchKey = this.$options.fetchKey.call(this)",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "540231737",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 8466,
        "pr_file": "packages/vue-app/template/mixins/fetch.client.js",
        "discussion_id": "540231737",
        "commented_code": "@@ -64,7 +64,14 @@ function createdFullStatic() {\n     return\n   }\n   this._hydrated = true\n-  this._fetchKey = this.<%= globals.nuxt %>._payloadFetchIndex++\n+\n+  if (typeof this.$options.fetchKey === 'function') {\n+    this._fetchKey = this.$options.fetchKey.call(this)",
        "comment_created_at": "2020-12-10T14:52:53+00:00",
        "comment_author": "pi0",
        "comment_body": "We might still increase and pass `_payloadFetchIndex` as second argument to distinguish multiple instances of one component. (or `getKey` as second arg)",
        "pr_file_module": null
      },
      {
        "comment_id": "540239536",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 8466,
        "pr_file": "packages/vue-app/template/mixins/fetch.client.js",
        "discussion_id": "540231737",
        "commented_code": "@@ -64,7 +64,14 @@ function createdFullStatic() {\n     return\n   }\n   this._hydrated = true\n-  this._fetchKey = this.<%= globals.nuxt %>._payloadFetchIndex++\n+\n+  if (typeof this.$options.fetchKey === 'function') {\n+    this._fetchKey = this.$options.fetchKey.call(this)",
        "comment_created_at": "2020-12-10T15:02:14+00:00",
        "comment_author": "danielroe",
        "comment_body": "If we want to support defaulting to the component name as a fetch key, as in linked issue, we will need a nested global fetchKey object to keep track of individual indices of each key. That is, the fetch state might look like:\r\n```js\r\n{\r\n  '0': { a: 'mystate' },\r\n  'MyComponent': { a: 'mystate' },\r\n  'MyOtherComponent': [{ a: 'mystate' }, { a: 'mystate2' }],\r\n  // or, better\r\n  'MyOtherComponent-0': { a: 'mystate' },\r\n  'MyOtherComponent-1': { a: 'mystate2' },\r\n  '1': { a: 'mystate' },\r\n}\r\n```\r\n\r\n(If we don't keep track of these indices separately, the same issue that triggered the original bug will reappear because the global numeric fetch key will get out of sync.)",
        "pr_file_module": null
      },
      {
        "comment_id": "540316889",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 8466,
        "pr_file": "packages/vue-app/template/mixins/fetch.client.js",
        "discussion_id": "540231737",
        "commented_code": "@@ -64,7 +64,14 @@ function createdFullStatic() {\n     return\n   }\n   this._hydrated = true\n-  this._fetchKey = this.<%= globals.nuxt %>._payloadFetchIndex++\n+\n+  if (typeof this.$options.fetchKey === 'function') {\n+    this._fetchKey = this.$options.fetchKey.call(this)",
        "comment_created_at": "2020-12-10T16:35:05+00:00",
        "comment_author": "pi0",
        "comment_body": "That's true. We might use a counter table for `getKey` implementation using component id as key..",
        "pr_file_module": null
      },
      {
        "comment_id": "540331766",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 8466,
        "pr_file": "packages/vue-app/template/mixins/fetch.client.js",
        "discussion_id": "540231737",
        "commented_code": "@@ -64,7 +64,14 @@ function createdFullStatic() {\n     return\n   }\n   this._hydrated = true\n-  this._fetchKey = this.<%= globals.nuxt %>._payloadFetchIndex++\n+\n+  if (typeof this.$options.fetchKey === 'function') {\n+    this._fetchKey = this.$options.fetchKey.call(this)",
        "comment_created_at": "2020-12-10T16:52:13+00:00",
        "comment_author": "danielroe",
        "comment_body": "What would `getKey` API look like? Would it just return a valid incremented number unique to the string passed in?\r\n```js\r\ngetKey (keyToLookup: string): number\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "540346429",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 8466,
        "pr_file": "packages/vue-app/template/mixins/fetch.client.js",
        "discussion_id": "540231737",
        "commented_code": "@@ -64,7 +64,14 @@ function createdFullStatic() {\n     return\n   }\n   this._hydrated = true\n-  this._fetchKey = this.<%= globals.nuxt %>._payloadFetchIndex++\n+\n+  if (typeof this.$options.fetchKey === 'function') {\n+    this._fetchKey = this.$options.fetchKey.call(this)",
        "comment_created_at": "2020-12-10T17:11:31+00:00",
        "comment_author": "pi0",
        "comment_body": "Ideally `getKey (id: string = ThisConstructor.id): number` but by default indeed using internal table to get a name spaced incrementor. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "544316112",
    "pr_number": 8466,
    "pr_file": "packages/vue-app/template/mixins/fetch.client.js",
    "created_at": "2020-12-16T13:55:00+00:00",
    "commented_code": "return\n   }\n   this._hydrated = true\n-  this._fetchKey = this.<%= globals.nuxt %>._payloadFetchIndex++\n+\n+  const defaultKey = this.$options._scopeId || this.$options.name || ''\n+  const getCounter = createGetCounter(this.<%= globals.nuxt %>._fetchCounters, defaultKey)\n+\n+  if (typeof this.$options.fetchKey === 'function') {\n+    this._fetchKey = this.$options.fetchKey.call(this, getCounter)\n+  } else {\n+    const key = 'string' === typeof this.$options.fetchKey ? this.$options.fetchKey : defaultKey\n+    this._fetchKey = key + getCounter(key)",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "544316112",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 8466,
        "pr_file": "packages/vue-app/template/mixins/fetch.client.js",
        "discussion_id": "544316112",
        "commented_code": "@@ -64,7 +64,17 @@ function createdFullStatic() {\n     return\n   }\n   this._hydrated = true\n-  this._fetchKey = this.<%= globals.nuxt %>._payloadFetchIndex++\n+\n+  const defaultKey = this.$options._scopeId || this.$options.name || ''\n+  const getCounter = createGetCounter(this.<%= globals.nuxt %>._fetchCounters, defaultKey)\n+\n+  if (typeof this.$options.fetchKey === 'function') {\n+    this._fetchKey = this.$options.fetchKey.call(this, getCounter)\n+  } else {\n+    const key = 'string' === typeof this.$options.fetchKey ? this.$options.fetchKey : defaultKey\n+    this._fetchKey = key + getCounter(key)",
        "comment_created_at": "2020-12-16T13:55:00+00:00",
        "comment_author": "pi0",
        "comment_body": "~~- Do we need to add counter as suffix when one provided manual one~~\r\n~~- We can use `|| getCounter(key)` for `defaultKey`~~\r\n\r\n```suggestion\r\n    this._fetchKey = key + ':' + getCounter(key)\r\n```",
        "pr_file_module": null
      }
    ]
  }
]