[
  {
    "discussion_id": "2215363749",
    "pr_number": 32671,
    "pr_file": "packages/nuxt/src/core/templates.ts",
    "created_at": "2025-07-18T08:18:34+00:00",
    "commented_code": "return /* typescript */`\n ${lines.join('\n')}\n /// <reference path=\"./runtime-config.d.ts\" />\n+/// <reference path=\"./shared.d.ts\" />",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "2215363749",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 32671,
        "pr_file": "packages/nuxt/src/core/templates.ts",
        "discussion_id": "2215363749",
        "commented_code": "@@ -366,6 +366,7 @@ export const nitroSchemaTemplate: NuxtTemplate = {\n     return /* typescript */`\n ${lines.join('\\n')}\n /// <reference path=\"./runtime-config.d.ts\" />\n+/// <reference path=\"./shared.d.ts\" />",
        "comment_created_at": "2025-07-18T08:18:34+00:00",
        "comment_author": "danielroe",
        "comment_body": "```suggestion\n/// <reference path=\"./types/shared.d.ts\" />\n```\n\ni would also recommend renaming to shared-imports.d.ts for clarity",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2021302010",
    "pr_number": 31419,
    "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
    "created_at": "2025-03-31T15:49:13+00:00",
    "commented_code": "* Allows controlling default setting for when to prefetch links. By default, prefetch is triggered only on visibility.\n    */\n   prefetchOn?: Exclude<NuxtLinkProps['prefetchOn'], string>\n+  /**\n+   * A white list of domains that is used for useLinkWhitelist to check href.\n+   * @example ['nuxt.com', 'nuxtjs.org']\n+   */\n+  whitelist?: string[]",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "2021302010",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 31419,
        "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
        "discussion_id": "2021302010",
        "commented_code": "@@ -105,6 +105,11 @@ export interface NuxtLinkOptions extends\n    * Allows controlling default setting for when to prefetch links. By default, prefetch is triggered only on visibility.\n    */\n   prefetchOn?: Exclude<NuxtLinkProps['prefetchOn'], string>\n+  /**\n+   * A white list of domains that is used for useLinkWhitelist to check href.\n+   * @example ['nuxt.com', 'nuxtjs.org']\n+   */\n+  whitelist?: string[]",
        "comment_created_at": "2025-03-31T15:49:13+00:00",
        "comment_author": "ineshbose",
        "comment_body": "My small feedback - could we name the options and composables based on \"allowlist\" to keep with inclusive language please? \ud83d\ude42 ",
        "pr_file_module": null
      },
      {
        "comment_id": "2021313020",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 31419,
        "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
        "discussion_id": "2021302010",
        "commented_code": "@@ -105,6 +105,11 @@ export interface NuxtLinkOptions extends\n    * Allows controlling default setting for when to prefetch links. By default, prefetch is triggered only on visibility.\n    */\n   prefetchOn?: Exclude<NuxtLinkProps['prefetchOn'], string>\n+  /**\n+   * A white list of domains that is used for useLinkWhitelist to check href.\n+   * @example ['nuxt.com', 'nuxtjs.org']\n+   */\n+  whitelist?: string[]",
        "comment_created_at": "2025-03-31T15:56:22+00:00",
        "comment_author": "xjccc",
        "comment_body": "Oh yes. Thank you\u2764\ufe0f. I want some suggestions for this pr. And some feedback with @danielroe to continue this. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2030370347",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 31419,
        "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
        "discussion_id": "2021302010",
        "commented_code": "@@ -105,6 +105,11 @@ export interface NuxtLinkOptions extends\n    * Allows controlling default setting for when to prefetch links. By default, prefetch is triggered only on visibility.\n    */\n   prefetchOn?: Exclude<NuxtLinkProps['prefetchOn'], string>\n+  /**\n+   * A white list of domains that is used for useLinkWhitelist to check href.\n+   * @example ['nuxt.com', 'nuxtjs.org']\n+   */\n+  whitelist?: string[]",
        "comment_created_at": "2025-04-07T02:20:24+00:00",
        "comment_author": "xjccc",
        "comment_body": "I have change `whitelist` to `allowlist`, and `useLinkWhitelist` to `useLinkAllowlist`\ud83d\ude01",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1646938234",
    "pr_number": 26468,
    "pr_file": "packages/nuxt/src/components/runtime/client-delayed-component.ts",
    "created_at": "2024-06-20T04:52:05+00:00",
    "commented_code": "+import { createStaticVNode, defineComponent, getCurrentInstance, h, onBeforeUnmount, onMounted, ref } from 'vue'\r\n+import type { Component, ComponentInternalInstance, Ref } from 'vue'\r\n+// import ClientOnly from '#app/components/client-only'\r\n+import { getFragmentHTML } from '#app/components/utils'\r\n+import { useNuxtApp } from '#app/nuxt'\r\n+import { cancelIdleCallback, requestIdleCallback } from '#app/compat/idle-callback'\r\n+import { onNuxtReady } from '#app'\r\n+import { useIntersectionObserver } from '#app/utils'\r\n+\r\n+function elementIsVisibleInViewport (el: Element) {\r\n+  const { top, left, bottom, right } = el.getBoundingClientRect()\r\n+  const { innerHeight, innerWidth } = window\r\n+  return ((top > 0 && top < innerHeight) ||\r\n+    (bottom > 0 && bottom < innerHeight)) &&\r\n+    ((left > 0 && left < innerWidth) || (right > 0 && right < innerWidth))\r\n+}\r\n+\r\n+/* @__NO_SIDE_EFFECTS__ */\r\n+export const createLazyIOComponent = (componentLoader: Component) => {\r\n+  return defineComponent({\r\n+    inheritAttrs: false,\r\n+    setup (_, { attrs }) {\r\n+      if (import.meta.server) {\r\n+        return () => h(componentLoader, attrs)\r\n+      }\r\n+\r\n+      const nuxt = useNuxtApp()\r\n+      const instance = getCurrentInstance()!\r\n+      const isIntersecting = ref(false)",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1646938234",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26468,
        "pr_file": "packages/nuxt/src/components/runtime/client-delayed-component.ts",
        "discussion_id": "1646938234",
        "commented_code": "@@ -0,0 +1,129 @@\n+import { createStaticVNode, defineComponent, getCurrentInstance, h, onBeforeUnmount, onMounted, ref } from 'vue'\r\n+import type { Component, ComponentInternalInstance, Ref } from 'vue'\r\n+// import ClientOnly from '#app/components/client-only'\r\n+import { getFragmentHTML } from '#app/components/utils'\r\n+import { useNuxtApp } from '#app/nuxt'\r\n+import { cancelIdleCallback, requestIdleCallback } from '#app/compat/idle-callback'\r\n+import { onNuxtReady } from '#app'\r\n+import { useIntersectionObserver } from '#app/utils'\r\n+\r\n+function elementIsVisibleInViewport (el: Element) {\r\n+  const { top, left, bottom, right } = el.getBoundingClientRect()\r\n+  const { innerHeight, innerWidth } = window\r\n+  return ((top > 0 && top < innerHeight) ||\r\n+    (bottom > 0 && bottom < innerHeight)) &&\r\n+    ((left > 0 && left < innerWidth) || (right > 0 && right < innerWidth))\r\n+}\r\n+\r\n+/* @__NO_SIDE_EFFECTS__ */\r\n+export const createLazyIOComponent = (componentLoader: Component) => {\r\n+  return defineComponent({\r\n+    inheritAttrs: false,\r\n+    setup (_, { attrs }) {\r\n+      if (import.meta.server) {\r\n+        return () => h(componentLoader, attrs)\r\n+      }\r\n+\r\n+      const nuxt = useNuxtApp()\r\n+      const instance = getCurrentInstance()!\r\n+      const isIntersecting = ref(false)\r",
        "comment_created_at": "2024-06-20T04:52:05+00:00",
        "comment_author": "harlan-zw",
        "comment_body": "slightly misleading, should be `hasIntersected` (it doesn't get toggled to false if it's not in the viewport anymore)",
        "pr_file_module": null
      },
      {
        "comment_id": "1647036574",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 26468,
        "pr_file": "packages/nuxt/src/components/runtime/client-delayed-component.ts",
        "discussion_id": "1646938234",
        "commented_code": "@@ -0,0 +1,129 @@\n+import { createStaticVNode, defineComponent, getCurrentInstance, h, onBeforeUnmount, onMounted, ref } from 'vue'\r\n+import type { Component, ComponentInternalInstance, Ref } from 'vue'\r\n+// import ClientOnly from '#app/components/client-only'\r\n+import { getFragmentHTML } from '#app/components/utils'\r\n+import { useNuxtApp } from '#app/nuxt'\r\n+import { cancelIdleCallback, requestIdleCallback } from '#app/compat/idle-callback'\r\n+import { onNuxtReady } from '#app'\r\n+import { useIntersectionObserver } from '#app/utils'\r\n+\r\n+function elementIsVisibleInViewport (el: Element) {\r\n+  const { top, left, bottom, right } = el.getBoundingClientRect()\r\n+  const { innerHeight, innerWidth } = window\r\n+  return ((top > 0 && top < innerHeight) ||\r\n+    (bottom > 0 && bottom < innerHeight)) &&\r\n+    ((left > 0 && left < innerWidth) || (right > 0 && right < innerWidth))\r\n+}\r\n+\r\n+/* @__NO_SIDE_EFFECTS__ */\r\n+export const createLazyIOComponent = (componentLoader: Component) => {\r\n+  return defineComponent({\r\n+    inheritAttrs: false,\r\n+    setup (_, { attrs }) {\r\n+      if (import.meta.server) {\r\n+        return () => h(componentLoader, attrs)\r\n+      }\r\n+\r\n+      const nuxt = useNuxtApp()\r\n+      const instance = getCurrentInstance()!\r\n+      const isIntersecting = ref(false)\r",
        "comment_created_at": "2024-06-20T06:38:06+00:00",
        "comment_author": "GalacticHypernova",
        "comment_body": "Good spot, fixed!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1457686855",
    "pr_number": 25198,
    "pr_file": "packages/schema/src/config/experimental.ts",
    "created_at": "2024-01-18T16:19:55+00:00",
    "commented_code": "*/\n     inlineRouteRules: false,\n \n+    /**\n+     * Enables listening for cookie updates (if supported by the browser) and refreshing `useCookie` ref values.\n+     */\n+    listenCookieChanges: false,",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1457686855",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 25198,
        "pr_file": "packages/schema/src/config/experimental.ts",
        "discussion_id": "1457686855",
        "commented_code": "@@ -258,6 +258,11 @@ export default defineUntypedSchema({\n      */\n     inlineRouteRules: false,\n \n+    /**\n+     * Enables listening for cookie updates (if supported by the browser) and refreshing `useCookie` ref values.\n+     */\n+    listenCookieChanges: false,",
        "comment_created_at": "2024-01-18T16:19:55+00:00",
        "comment_author": "danielroe",
        "comment_body": "what about just naming the flag `cookieStore` instead to identify the API that would be used? And linking to CookieStore API docs both here and in 1.experimental-features.md?",
        "pr_file_module": null
      },
      {
        "comment_id": "1458009623",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 25198,
        "pr_file": "packages/schema/src/config/experimental.ts",
        "discussion_id": "1457686855",
        "commented_code": "@@ -258,6 +258,11 @@ export default defineUntypedSchema({\n      */\n     inlineRouteRules: false,\n \n+    /**\n+     * Enables listening for cookie updates (if supported by the browser) and refreshing `useCookie` ref values.\n+     */\n+    listenCookieChanges: false,",
        "comment_created_at": "2024-01-18T21:45:41+00:00",
        "comment_author": "enkot",
        "comment_body": "Done \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1685807873",
    "pr_number": 27846,
    "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
    "created_at": "2024-07-21T20:33:26+00:00",
    "commented_code": "const el = import.meta.server ? undefined : ref<HTMLElement | null>(null)\n       const elRef = import.meta.server ? undefined : (ref: any) => { el!.value = props.custom ? ref?.$el?.nextElementSibling : ref?.$el }\n \n+      function checkShouldPrefetch () {\n+        const shouldPrefetch = props.prefetch !== false && props.noPrefetch !== true && props.target !== '_blank' && !isSlowConnection() && !prefetched.value\n+        return shouldPrefetch\n+      }",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1685807873",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 27846,
        "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
        "discussion_id": "1685807873",
        "commented_code": "@@ -299,10 +316,26 @@ export function defineNuxtLink (options: NuxtLinkOptions) {\n       const el = import.meta.server ? undefined : ref<HTMLElement | null>(null)\n       const elRef = import.meta.server ? undefined : (ref: any) => { el!.value = props.custom ? ref?.$el?.nextElementSibling : ref?.$el }\n \n+      function checkShouldPrefetch () {\n+        const shouldPrefetch = props.prefetch !== false && props.noPrefetch !== true && props.target !== '_blank' && !isSlowConnection() && !prefetched.value\n+        return shouldPrefetch\n+      }",
        "comment_created_at": "2024-07-21T20:33:26+00:00",
        "comment_author": "quentinmcq",
        "comment_body": "```suggestion\r\nfunction shouldPrefetch (): boolean {\r\n        return props.prefetch && !props.noPrefetch && props.target !== '_blank' && !isSlowConnection() && !prefetched.value\r\n      }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1686248027",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 27846,
        "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
        "discussion_id": "1685807873",
        "commented_code": "@@ -299,10 +316,26 @@ export function defineNuxtLink (options: NuxtLinkOptions) {\n       const el = import.meta.server ? undefined : ref<HTMLElement | null>(null)\n       const elRef = import.meta.server ? undefined : (ref: any) => { el!.value = props.custom ? ref?.$el?.nextElementSibling : ref?.$el }\n \n+      function checkShouldPrefetch () {\n+        const shouldPrefetch = props.prefetch !== false && props.noPrefetch !== true && props.target !== '_blank' && !isSlowConnection() && !prefetched.value\n+        return shouldPrefetch\n+      }",
        "comment_created_at": "2024-07-22T09:23:22+00:00",
        "comment_author": "quentinmcq",
        "comment_body": "> @quentinmcq the check prefix is more explicit, shouldPrefetch as a function, does not resonate with me. checkShouldPrefetch is clearer and depict the fact that this is a function and calling it I'm checking if prefetch should be done, adding return type is useless, inline return without variable looks like something worth considering\r\n\r\nI can't find this comment but to answer it, the fact is that the name of your function is supposed to concretely define what it does there. If you add a const behind just for a return line, your function is poorly named and in our case it is redundant. Your function returns a boolean regarding whether it should retrieve data or not, so \"should prefetch\" matches perfectly, no need for a prefix.",
        "pr_file_module": null
      },
      {
        "comment_id": "1686277398",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 27846,
        "pr_file": "packages/nuxt/src/app/components/nuxt-link.ts",
        "discussion_id": "1685807873",
        "commented_code": "@@ -299,10 +316,26 @@ export function defineNuxtLink (options: NuxtLinkOptions) {\n       const el = import.meta.server ? undefined : ref<HTMLElement | null>(null)\n       const elRef = import.meta.server ? undefined : (ref: any) => { el!.value = props.custom ? ref?.$el?.nextElementSibling : ref?.$el }\n \n+      function checkShouldPrefetch () {\n+        const shouldPrefetch = props.prefetch !== false && props.noPrefetch !== true && props.target !== '_blank' && !isSlowConnection() && !prefetched.value\n+        return shouldPrefetch\n+      }",
        "comment_created_at": "2024-07-22T09:43:59+00:00",
        "comment_author": "kewinzaq1",
        "comment_body": "@quentinmcq yeah at first glance it was the case but then after thinking more I agree with you, so I removed the comment and implemented suggested change, thx",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1436095042",
    "pr_number": 24378,
    "pr_file": "packages/kit/src/resolve.ts",
    "created_at": "2023-12-25T13:49:39+00:00",
    "commented_code": "// Use current nuxt options\n   const nuxt = tryUseNuxt()\n-  const cwd = opts.cwd || (nuxt ? nuxt.options.rootDir : process.cwd())\n-  const extensions = opts.extensions || (nuxt ? nuxt.options.extensions : ['.ts', '.mjs', '.cjs', '.json'])\n-  const modulesDir = nuxt ? nuxt.options.modulesDir : []\n+  const cwd = options.cwd || (nuxt ? nuxt.options.rootDir : process.cwd())\n+  const extensions = options.extensions || (nuxt ? nuxt.options.extensions : ['.ts', '.mjs', '.cjs', '.json'])\n+  const modulesDirectory = nuxt ? nuxt.options.modulesDir : []",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1436095042",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 24378,
        "pr_file": "packages/kit/src/resolve.ts",
        "discussion_id": "1436095042",
        "commented_code": "@@ -35,9 +42,9 @@ export async function resolvePath (path: string, opts: ResolvePathOptions = {}):\n \n   // Use current nuxt options\n   const nuxt = tryUseNuxt()\n-  const cwd = opts.cwd || (nuxt ? nuxt.options.rootDir : process.cwd())\n-  const extensions = opts.extensions || (nuxt ? nuxt.options.extensions : ['.ts', '.mjs', '.cjs', '.json'])\n-  const modulesDir = nuxt ? nuxt.options.modulesDir : []\n+  const cwd = options.cwd || (nuxt ? nuxt.options.rootDir : process.cwd())\n+  const extensions = options.extensions || (nuxt ? nuxt.options.extensions : ['.ts', '.mjs', '.cjs', '.json'])\n+  const modulesDirectory = nuxt ? nuxt.options.modulesDir : []",
        "comment_created_at": "2023-12-25T13:49:39+00:00",
        "comment_author": "danielroe",
        "comment_body": "Maybe better: `nodeModulesDirectories`?",
        "pr_file_module": null
      }
    ]
  }
]