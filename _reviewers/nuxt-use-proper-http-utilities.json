[
  {
    "discussion_id": "1684349639",
    "pr_number": 28223,
    "pr_file": "docs/1.getting-started/6.data-fetching.md",
    "created_at": "2024-07-19T13:03:33+00:00",
    "commented_code": "If you want to pass on/proxy cookies in the other direction, from an internal request back to the client, you will need to handle this yourself.\n \n ```ts [composables/fetch.ts]\n-import { appendResponseHeader, H3Event } from 'h3'\n+import { appendResponseHeader, H3Event, splitCookiesString } from 'h3'\n \n export const fetchWithCookie = async (event: H3Event, url: string) => {\n   /* Get the response from the server endpoint */\n   const res = await $fetch.raw(url)\n   /* Get the cookies from the response */\n-  const cookies = (res.headers.get('set-cookie') || '').split(',')\n+  const cookies = splitCookiesString(res.headers.get('set-cookie') || '')",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1684349639",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28223,
        "pr_file": "docs/1.getting-started/6.data-fetching.md",
        "discussion_id": "1684349639",
        "commented_code": "@@ -466,13 +466,13 @@ Be very careful before proxying headers to an external API and just include head\n  If you want to pass on/proxy cookies in the other direction, from an internal request back to the client, you will need to handle this yourself.\n \n ```ts [composables/fetch.ts]\n-import { appendResponseHeader, H3Event } from 'h3'\n+import { appendResponseHeader, H3Event, splitCookiesString } from 'h3'\n \n export const fetchWithCookie = async (event: H3Event, url: string) => {\n   /* Get the response from the server endpoint */\n   const res = await $fetch.raw(url)\n   /* Get the cookies from the response */\n-  const cookies = (res.headers.get('set-cookie') || '').split(',')\n+  const cookies = splitCookiesString(res.headers.get('set-cookie') || '')",
        "comment_created_at": "2024-07-19T13:03:33+00:00",
        "comment_author": "pi0",
        "comment_body": "We can instead also use native [headers.getSetCookie](https://developer.mozilla.org/en-US/docs/Web/API/Headers/getSetCookie) that returns properly splitter cookies (please double check if works within current nitro v1 env)",
        "pr_file_module": null
      },
      {
        "comment_id": "1685799205",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28223,
        "pr_file": "docs/1.getting-started/6.data-fetching.md",
        "discussion_id": "1684349639",
        "commented_code": "@@ -466,13 +466,13 @@ Be very careful before proxying headers to an external API and just include head\n  If you want to pass on/proxy cookies in the other direction, from an internal request back to the client, you will need to handle this yourself.\n \n ```ts [composables/fetch.ts]\n-import { appendResponseHeader, H3Event } from 'h3'\n+import { appendResponseHeader, H3Event, splitCookiesString } from 'h3'\n \n export const fetchWithCookie = async (event: H3Event, url: string) => {\n   /* Get the response from the server endpoint */\n   const res = await $fetch.raw(url)\n   /* Get the cookies from the response */\n-  const cookies = (res.headers.get('set-cookie') || '').split(',')\n+  const cookies = splitCookiesString(res.headers.get('set-cookie') || '')",
        "comment_created_at": "2024-07-21T19:28:33+00:00",
        "comment_author": "danielroe",
        "comment_body": "works well!",
        "pr_file_module": null
      },
      {
        "comment_id": "1686607453",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 28223,
        "pr_file": "docs/1.getting-started/6.data-fetching.md",
        "discussion_id": "1684349639",
        "commented_code": "@@ -466,13 +466,13 @@ Be very careful before proxying headers to an external API and just include head\n  If you want to pass on/proxy cookies in the other direction, from an internal request back to the client, you will need to handle this yourself.\n \n ```ts [composables/fetch.ts]\n-import { appendResponseHeader, H3Event } from 'h3'\n+import { appendResponseHeader, H3Event, splitCookiesString } from 'h3'\n \n export const fetchWithCookie = async (event: H3Event, url: string) => {\n   /* Get the response from the server endpoint */\n   const res = await $fetch.raw(url)\n   /* Get the cookies from the response */\n-  const cookies = (res.headers.get('set-cookie') || '').split(',')\n+  const cookies = splitCookiesString(res.headers.get('set-cookie') || '')",
        "comment_created_at": "2024-07-22T14:00:50+00:00",
        "comment_author": "johankrijt",
        "comment_body": "Even nicer! Sorry I was to late to the party to safe you the work, as I see it's already fixed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1609365927",
    "pr_number": 27297,
    "pr_file": "docs/3.api/2.composables/use-cookie.md",
    "created_at": "2024-05-22T06:33:49+00:00",
    "commented_code": "### `httpOnly`\n \n-Specifies the `boolean` value for the [`HttpOnly` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.6). When truthy,\n-the `HttpOnly` attribute is set; otherwise it is not. By default, the `HttpOnly` attribute is not set.\n+Specifies the `boolean` value for the [`HttpOnly` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.6). When truthy, the `HttpOnly` attribute is set; otherwise it is not. By default, the `HttpOnly` attribute is not set.\n \n ::warning\n-Be careful when setting this to `true`, as compliant clients will not allow client-side\n-JavaScript to see the cookie in `document.cookie`.\n+Be careful when setting this to `true`, as compliant clients will not allow client-side JavaScript to see the cookie in `document.cookie`.\n ::\n \n ### `secure`\n \n-Specifies the `boolean` value for the [`Secure` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.5). When truthy,\n-the `Secure` attribute is set; otherwise it is not. By default, the `Secure` attribute is not set.\n+Specifies the `boolean` value for the [`Secure` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.5). When truthy, the `Secure` attribute is set; otherwise it is not. By default, the `Secure` attribute is not set.\n \n ::warning\n-Be careful when setting this to `true`, as compliant clients will not send the cookie back to\n-the server in the future if the browser does not have an HTTPS connection. This can lead to hydration errors.\n+Be careful when setting this to `true`, as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection. This can lead to hydration errors.\n+::\n+\n+### `partitioned`\n+\n+Specifies the `boolean` value for the [`Partitioned` `Set-Cookie`](rfc-cutler-httpbis-partitioned-cookies) attribute. When truthy, the `Partitioned` attribute is set, otherwise it is not. By default, the `Partitioned` attribute is not set.",
    "repo_full_name": "nuxt/nuxt",
    "discussion_comments": [
      {
        "comment_id": "1609365927",
        "repo_full_name": "nuxt/nuxt",
        "pr_number": 27297,
        "pr_file": "docs/3.api/2.composables/use-cookie.md",
        "discussion_id": "1609365927",
        "commented_code": "@@ -74,22 +71,29 @@ If neither of `expires` and `maxAge` is set, the cookie will be session-only and\n \n ### `httpOnly`\n \n-Specifies the `boolean` value for the [`HttpOnly` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.6). When truthy,\n-the `HttpOnly` attribute is set; otherwise it is not. By default, the `HttpOnly` attribute is not set.\n+Specifies the `boolean` value for the [`HttpOnly` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.6). When truthy, the `HttpOnly` attribute is set; otherwise it is not. By default, the `HttpOnly` attribute is not set.\n \n ::warning\n-Be careful when setting this to `true`, as compliant clients will not allow client-side\n-JavaScript to see the cookie in `document.cookie`.\n+Be careful when setting this to `true`, as compliant clients will not allow client-side JavaScript to see the cookie in `document.cookie`.\n ::\n \n ### `secure`\n \n-Specifies the `boolean` value for the [`Secure` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.5). When truthy,\n-the `Secure` attribute is set; otherwise it is not. By default, the `Secure` attribute is not set.\n+Specifies the `boolean` value for the [`Secure` `Set-Cookie` attribute](https://tools.ietf.org/html/rfc6265#section-5.2.5). When truthy, the `Secure` attribute is set; otherwise it is not. By default, the `Secure` attribute is not set.\n \n ::warning\n-Be careful when setting this to `true`, as compliant clients will not send the cookie back to\n-the server in the future if the browser does not have an HTTPS connection. This can lead to hydration errors.\n+Be careful when setting this to `true`, as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection. This can lead to hydration errors.\n+::\n+\n+### `partitioned`\n+\n+Specifies the `boolean` value for the [`Partitioned` `Set-Cookie`](rfc-cutler-httpbis-partitioned-cookies) attribute. When truthy, the `Partitioned` attribute is set, otherwise it is not. By default, the `Partitioned` attribute is not set.",
        "comment_created_at": "2024-05-22T06:33:49+00:00",
        "comment_author": "DamianGlowala",
        "comment_body": "```suggestion\r\nSpecifies the `boolean` value for the [`Partitioned` `Set-Cookie`](https://datatracker.ietf.org/doc/html/draft-cutler-httpbis-partitioned-cookies#section-2.1) attribute. When truthy, the `Partitioned` attribute is set, otherwise it is not. By default, the `Partitioned` attribute is not set.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]