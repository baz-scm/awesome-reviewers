[
  {
    "discussion_id": "58358672",
    "pr_number": 1141,
    "pr_file": "Octokit.Tests.Integration/Clients/MigrationsClientTests.cs",
    "created_at": "2016-04-04T10:57:49+00:00",
    "commented_code": "+﻿using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Threading.Tasks;\n+using Octokit;\n+using Octokit.Tests.Integration;\n+using Xunit;\n+\n+public class MigrationsClientTests\n+{\n+    public class TheStartNewMethod\n+    {\n+        readonly IGitHubClient _gitHub;\n+\n+        public TheStartNewMethod()\n+        {\n+            _gitHub = Helper.GetAuthenticatedClient();\n+\n+        }\n+\n+        [IntegrationTest]\n+        public async Task CanStartNewMigration()\n+        {\n+            var organization = Environment.GetEnvironmentVariable(\"OCTOKIT_GITHUBORGANIZATION\");",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "58358672",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1141,
        "pr_file": "Octokit.Tests.Integration/Clients/MigrationsClientTests.cs",
        "discussion_id": "58358672",
        "commented_code": "@@ -0,0 +1,147 @@\n+﻿using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Threading.Tasks;\n+using Octokit;\n+using Octokit.Tests.Integration;\n+using Xunit;\n+\n+public class MigrationsClientTests\n+{\n+    public class TheStartNewMethod\n+    {\n+        readonly IGitHubClient _gitHub;\n+\n+        public TheStartNewMethod()\n+        {\n+            _gitHub = Helper.GetAuthenticatedClient();\n+\n+        }\n+\n+        [IntegrationTest]\n+        public async Task CanStartNewMigration()\n+        {\n+            var organization = Environment.GetEnvironmentVariable(\"OCTOKIT_GITHUBORGANIZATION\");",
        "comment_created_at": "2016-04-04T10:57:49+00:00",
        "comment_author": "ryangribble",
        "comment_body": "You dont need to hit the environment vars directly here... you can use `Helper.Organization` (which behind the scenes has already retrieved the env vars etc)\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "93609691",
    "pr_number": 1503,
    "pr_file": "Octokit/Http/Connection.cs",
    "created_at": "2016-12-22T11:45:04+00:00",
    "commented_code": "static string FormatUserAgent(ProductHeaderValue productInformation)\n         {\n+            var format =\n+#if !HAS_ENVIRONMENT\n+                \"{0} ({1}; {2}; {3}; Octokit {4})\";\n+#else\n+                \"{0} ({1} {2}; {3}; {4}; Octokit {5})\";\n+#endif\n+\n             return string.Format(CultureInfo.InvariantCulture,\n+                format,\n+#if !HAS_ENVIRONMENT\n+                productInformation,\n+                RuntimeInformation.OSDescription,\n+                RuntimeInformation.OSArchitecture.ToString().ToLowerInvariant(),\n+#elif NETFX_CORE\n                 \"{0} ({1} {2}; {3}; {4}; Octokit {5})\",",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "93609691",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1503,
        "pr_file": "Octokit/Http/Connection.cs",
        "discussion_id": "93609691",
        "commented_code": "@@ -644,10 +647,22 @@ internal static TwoFactorType ParseTwoFactorType(IResponse restResponse)\n \n         static string FormatUserAgent(ProductHeaderValue productInformation)\n         {\n+            var format =\n+#if !HAS_ENVIRONMENT\n+                \"{0} ({1}; {2}; {3}; Octokit {4})\";\n+#else\n+                \"{0} ({1} {2}; {3}; {4}; Octokit {5})\";\n+#endif\n+\n             return string.Format(CultureInfo.InvariantCulture,\n+                format,\n+#if !HAS_ENVIRONMENT\n+                productInformation,\n+                RuntimeInformation.OSDescription,\n+                RuntimeInformation.OSArchitecture.ToString().ToLowerInvariant(),\n+#elif NETFX_CORE\n                 \"{0} ({1} {2}; {3}; {4}; Octokit {5})\",",
        "comment_created_at": "2016-12-22T11:45:04+00:00",
        "comment_author": "ryangribble",
        "comment_body": "since `format` is being set above and included in all cases, I think this line may be spurious?\r\n\r\ninfact do we even really need this hardcoded WindowsRT/Windows8 etc stuff below @shiftkey? \r\n\r\nCan this `NETFX_CORE` case here just be removed and either user `Environment` or `RuntimeInformation` according to the `HAS_ENVIRONMENT` preprocessor definition now added?",
        "pr_file_module": null
      },
      {
        "comment_id": "93717799",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1503,
        "pr_file": "Octokit/Http/Connection.cs",
        "discussion_id": "93609691",
        "commented_code": "@@ -644,10 +647,22 @@ internal static TwoFactorType ParseTwoFactorType(IResponse restResponse)\n \n         static string FormatUserAgent(ProductHeaderValue productInformation)\n         {\n+            var format =\n+#if !HAS_ENVIRONMENT\n+                \"{0} ({1}; {2}; {3}; Octokit {4})\";\n+#else\n+                \"{0} ({1} {2}; {3}; {4}; Octokit {5})\";\n+#endif\n+\n             return string.Format(CultureInfo.InvariantCulture,\n+                format,\n+#if !HAS_ENVIRONMENT\n+                productInformation,\n+                RuntimeInformation.OSDescription,\n+                RuntimeInformation.OSArchitecture.ToString().ToLowerInvariant(),\n+#elif NETFX_CORE\n                 \"{0} ({1} {2}; {3}; {4}; Octokit {5})\",",
        "comment_created_at": "2016-12-23T00:19:44+00:00",
        "comment_author": "mderriey",
        "comment_body": "noted, thanks. for now I removed the WindowsRT/Windows8 specific stuff since I don't think the target is to create platform-specific packages.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "53676124",
    "pr_number": 1108,
    "pr_file": "Octokit/Clients/UserAdministrationClient.cs",
    "created_at": "2016-02-22T19:17:41+00:00",
    "commented_code": "-﻿using System;\n-using System.Collections.Generic;\n-using System.Linq;\n-using System.Text;\n+﻿using System.Collections.Generic;\n+using System.Net;\n using System.Threading.Tasks;\n \n namespace Octokit\n {\n     /// <summary>\n-    /// A client for GitHub's User Administration API.\n+    /// A client for GitHub's User Administration API (GitHub Enterprise)",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "53676124",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1108,
        "pr_file": "Octokit/Clients/UserAdministrationClient.cs",
        "discussion_id": "53676124",
        "commented_code": "@@ -1,13 +1,11 @@\n-﻿using System;\n-using System.Collections.Generic;\n-using System.Linq;\n-using System.Text;\n+﻿using System.Collections.Generic;\n+using System.Net;\n using System.Threading.Tasks;\n \n namespace Octokit\n {\n     /// <summary>\n-    /// A client for GitHub's User Administration API.\n+    /// A client for GitHub's User Administration API (GitHub Enterprise)",
        "comment_created_at": "2016-02-22T19:17:41+00:00",
        "comment_author": "haacked",
        "comment_body": "Because this client is only used for Enterprise, we should consider adding a check to the constructor that ensures that the `ApiConnection.Connection.BaseUrl` is an Enterprise URL and if not, throw an exception that indicates that this client only works for GH:E. That would require that we create this instance lazily of course.\n\nPerhaps an idea for a separate PR.\n",
        "pr_file_module": null
      }
    ]
  }
]