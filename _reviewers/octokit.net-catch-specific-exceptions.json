[
  {
    "discussion_id": "913998232",
    "pr_number": 2473,
    "pr_file": "Octokit/Http/Connection.cs",
    "created_at": "2022-07-05T16:43:27+00:00",
    "commented_code": "{\n             string body = response.Body as string ?? \"\";\n \n-            if (body.Contains(\"rate limit exceeded\"))\n+            if (body.Contains(\"rate limit exceeded\") || body.Contains(\"secondary rate limit\"))",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "913998232",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 2473,
        "pr_file": "Octokit/Http/Connection.cs",
        "discussion_id": "913998232",
        "commented_code": "@@ -719,7 +719,7 @@ static Exception GetExceptionForForbidden(IResponse response)\n         {\n             string body = response.Body as string ?? \"\";\n \n-            if (body.Contains(\"rate limit exceeded\"))\n+            if (body.Contains(\"rate limit exceeded\") || body.Contains(\"secondary rate limit\"))",
        "comment_created_at": "2022-07-05T16:43:27+00:00",
        "comment_author": "timrogers",
        "comment_body": "I wonder if it might be better throw a different kind of exception for a secondary rate limit. What do you think? I'm just thinking that it would make it easier to handle this specific case as a caller, without doing string matching.",
        "pr_file_module": null
      },
      {
        "comment_id": "914411579",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 2473,
        "pr_file": "Octokit/Http/Connection.cs",
        "discussion_id": "913998232",
        "commented_code": "@@ -719,7 +719,7 @@ static Exception GetExceptionForForbidden(IResponse response)\n         {\n             string body = response.Body as string ?? \"\";\n \n-            if (body.Contains(\"rate limit exceeded\"))\n+            if (body.Contains(\"rate limit exceeded\") || body.Contains(\"secondary rate limit\"))",
        "comment_created_at": "2022-07-06T04:48:22+00:00",
        "comment_author": "JonruAlveus",
        "comment_body": "I get where you are coming from, makes sense to me :)",
        "pr_file_module": null
      },
      {
        "comment_id": "914722508",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 2473,
        "pr_file": "Octokit/Http/Connection.cs",
        "discussion_id": "913998232",
        "commented_code": "@@ -719,7 +719,7 @@ static Exception GetExceptionForForbidden(IResponse response)\n         {\n             string body = response.Body as string ?? \"\";\n \n-            if (body.Contains(\"rate limit exceeded\"))\n+            if (body.Contains(\"rate limit exceeded\") || body.Contains(\"secondary rate limit\"))",
        "comment_created_at": "2022-07-06T11:20:13+00:00",
        "comment_author": "timrogers",
        "comment_body": "I\u2019d just define a new exception and raise that. It should be a quick change, and then we can get this approved and merged \u2705 ",
        "pr_file_module": null
      },
      {
        "comment_id": "915209328",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 2473,
        "pr_file": "Octokit/Http/Connection.cs",
        "discussion_id": "913998232",
        "commented_code": "@@ -719,7 +719,7 @@ static Exception GetExceptionForForbidden(IResponse response)\n         {\n             string body = response.Body as string ?? \"\";\n \n-            if (body.Contains(\"rate limit exceeded\"))\n+            if (body.Contains(\"rate limit exceeded\") || body.Contains(\"secondary rate limit\"))",
        "comment_created_at": "2022-07-06T20:01:45+00:00",
        "comment_author": "JonruAlveus",
        "comment_body": "I've changed it to be it's own exception.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "70176268",
    "pr_number": 1410,
    "pr_file": "Octokit/Clients/RepositoryInvitationsClient.cs",
    "created_at": "2016-07-10T05:37:01+00:00",
    "commented_code": "+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Net;\n+using System.Threading.Tasks;\n+\n+namespace Octokit\n+{\n+    public class RepositoryInvitationsClient : ApiClient, IRepositoryInvitationsClient\n+    {\n+        public RepositoryInvitationsClient(IApiConnection apiConnection)\n+            : base(apiConnection)\n+        {\n+        }\n+\n+        /// <summary>\n+        /// Accept a repository invitation.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/repos/invitations/#accept-a-repository-invitation\">API documentation</a> for more information.\n+        /// </remarks>        \n+        /// <param name=\"invitationId\">The id of the invitation</param>\n+        /// <exception cref=\"ApiException\">Thrown when a general API error occurs.</exception>        \n+        public async Task<bool> Accept(int invitationId)\n+        {\n+            var endpoint = ApiUrls.UserInvitations(invitationId);\n+\n+            try\n+            {\n+                var httpStatusCode = await ApiConnection.Connection.Patch(endpoint, AcceptHeaders.InvitationsApiPreview).ConfigureAwait(false);\n+                return httpStatusCode == HttpStatusCode.NoContent;\n+            }\n+            catch\n+            {\n+                return false;\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Decline a repository invitation.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/repos/invitations/#decline-a-repository-invitation\">API documentation</a> for more information.\n+        /// </remarks>        \n+        /// <param name=\"invitationId\">The id of the invitation</param>\n+        /// <exception cref=\"ApiException\">Thrown when a general API error occurs.</exception>\n+        public async Task<bool> Decline(int invitationId)\n+        {\n+            var endpoint = ApiUrls.UserInvitations(invitationId);\n+\n+            try\n+            {\n+                var httpStatusCode = await ApiConnection.Connection.Delete(endpoint, new object(), AcceptHeaders.InvitationsApiPreview).ConfigureAwait(false);\n+                return httpStatusCode == HttpStatusCode.NoContent;\n+            }\n+            catch\n+            {\n+                return false;\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Deletes a repository invitation.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation\">API documentation</a> for more information.\n+        /// </remarks>\n+        /// <param name=\"repositoryId\">The id of the repository</param>\n+        /// <param name=\"invitationId\">The id of the invitation</param>\n+        /// <exception cref=\"ApiException\">Thrown when a general API error occurs.</exception>\n+        public async Task<bool> Delete(int repositoryId, int invitationId)\n+        {\n+            var endpoint = ApiUrls.RepositoryInvitations(repositoryId, invitationId);\n+\n+            try\n+            {\n+                var httpStatusCode = await ApiConnection.Connection.Delete(endpoint, new object(), AcceptHeaders.InvitationsApiPreview).ConfigureAwait(false);\n+                return httpStatusCode == HttpStatusCode.NoContent;\n+            }\n+            catch",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "70176268",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1410,
        "pr_file": "Octokit/Clients/RepositoryInvitationsClient.cs",
        "discussion_id": "70176268",
        "commented_code": "@@ -0,0 +1,127 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Net;\n+using System.Threading.Tasks;\n+\n+namespace Octokit\n+{\n+    public class RepositoryInvitationsClient : ApiClient, IRepositoryInvitationsClient\n+    {\n+        public RepositoryInvitationsClient(IApiConnection apiConnection)\n+            : base(apiConnection)\n+        {\n+        }\n+\n+        /// <summary>\n+        /// Accept a repository invitation.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/repos/invitations/#accept-a-repository-invitation\">API documentation</a> for more information.\n+        /// </remarks>        \n+        /// <param name=\"invitationId\">The id of the invitation</param>\n+        /// <exception cref=\"ApiException\">Thrown when a general API error occurs.</exception>        \n+        public async Task<bool> Accept(int invitationId)\n+        {\n+            var endpoint = ApiUrls.UserInvitations(invitationId);\n+\n+            try\n+            {\n+                var httpStatusCode = await ApiConnection.Connection.Patch(endpoint, AcceptHeaders.InvitationsApiPreview).ConfigureAwait(false);\n+                return httpStatusCode == HttpStatusCode.NoContent;\n+            }\n+            catch\n+            {\n+                return false;\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Decline a repository invitation.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/repos/invitations/#decline-a-repository-invitation\">API documentation</a> for more information.\n+        /// </remarks>        \n+        /// <param name=\"invitationId\">The id of the invitation</param>\n+        /// <exception cref=\"ApiException\">Thrown when a general API error occurs.</exception>\n+        public async Task<bool> Decline(int invitationId)\n+        {\n+            var endpoint = ApiUrls.UserInvitations(invitationId);\n+\n+            try\n+            {\n+                var httpStatusCode = await ApiConnection.Connection.Delete(endpoint, new object(), AcceptHeaders.InvitationsApiPreview).ConfigureAwait(false);\n+                return httpStatusCode == HttpStatusCode.NoContent;\n+            }\n+            catch\n+            {\n+                return false;\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Deletes a repository invitation.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation\">API documentation</a> for more information.\n+        /// </remarks>\n+        /// <param name=\"repositoryId\">The id of the repository</param>\n+        /// <param name=\"invitationId\">The id of the invitation</param>\n+        /// <exception cref=\"ApiException\">Thrown when a general API error occurs.</exception>\n+        public async Task<bool> Delete(int repositoryId, int invitationId)\n+        {\n+            var endpoint = ApiUrls.RepositoryInvitations(repositoryId, invitationId);\n+\n+            try\n+            {\n+                var httpStatusCode = await ApiConnection.Connection.Delete(endpoint, new object(), AcceptHeaders.InvitationsApiPreview).ConfigureAwait(false);\n+                return httpStatusCode == HttpStatusCode.NoContent;\n+            }\n+            catch",
        "comment_created_at": "2016-07-10T05:37:01+00:00",
        "comment_author": "ryangribble",
        "comment_body": "For consistency with other simliar clients/endpoints, this should be \n\n``` csharp\ncatch (NotFoundException)\n```\n\nrather than catching any type of exception\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "70176272",
    "pr_number": 1410,
    "pr_file": "Octokit/Clients/RepositoryInvitationsClient.cs",
    "created_at": "2016-07-10T05:37:15+00:00",
    "commented_code": "+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Net;\n+using System.Threading.Tasks;\n+\n+namespace Octokit\n+{\n+    public class RepositoryInvitationsClient : ApiClient, IRepositoryInvitationsClient\n+    {\n+        public RepositoryInvitationsClient(IApiConnection apiConnection)\n+            : base(apiConnection)\n+        {\n+        }\n+\n+        /// <summary>\n+        /// Accept a repository invitation.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/repos/invitations/#accept-a-repository-invitation\">API documentation</a> for more information.\n+        /// </remarks>        \n+        /// <param name=\"invitationId\">The id of the invitation</param>\n+        /// <exception cref=\"ApiException\">Thrown when a general API error occurs.</exception>        \n+        public async Task<bool> Accept(int invitationId)\n+        {\n+            var endpoint = ApiUrls.UserInvitations(invitationId);\n+\n+            try\n+            {\n+                var httpStatusCode = await ApiConnection.Connection.Patch(endpoint, AcceptHeaders.InvitationsApiPreview).ConfigureAwait(false);\n+                return httpStatusCode == HttpStatusCode.NoContent;\n+            }\n+            catch\n+            {\n+                return false;\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Decline a repository invitation.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/repos/invitations/#decline-a-repository-invitation\">API documentation</a> for more information.\n+        /// </remarks>        \n+        /// <param name=\"invitationId\">The id of the invitation</param>\n+        /// <exception cref=\"ApiException\">Thrown when a general API error occurs.</exception>\n+        public async Task<bool> Decline(int invitationId)\n+        {\n+            var endpoint = ApiUrls.UserInvitations(invitationId);\n+\n+            try\n+            {\n+                var httpStatusCode = await ApiConnection.Connection.Delete(endpoint, new object(), AcceptHeaders.InvitationsApiPreview).ConfigureAwait(false);\n+                return httpStatusCode == HttpStatusCode.NoContent;\n+            }\n+            catch",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "70176272",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1410,
        "pr_file": "Octokit/Clients/RepositoryInvitationsClient.cs",
        "discussion_id": "70176272",
        "commented_code": "@@ -0,0 +1,127 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Net;\n+using System.Threading.Tasks;\n+\n+namespace Octokit\n+{\n+    public class RepositoryInvitationsClient : ApiClient, IRepositoryInvitationsClient\n+    {\n+        public RepositoryInvitationsClient(IApiConnection apiConnection)\n+            : base(apiConnection)\n+        {\n+        }\n+\n+        /// <summary>\n+        /// Accept a repository invitation.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/repos/invitations/#accept-a-repository-invitation\">API documentation</a> for more information.\n+        /// </remarks>        \n+        /// <param name=\"invitationId\">The id of the invitation</param>\n+        /// <exception cref=\"ApiException\">Thrown when a general API error occurs.</exception>        \n+        public async Task<bool> Accept(int invitationId)\n+        {\n+            var endpoint = ApiUrls.UserInvitations(invitationId);\n+\n+            try\n+            {\n+                var httpStatusCode = await ApiConnection.Connection.Patch(endpoint, AcceptHeaders.InvitationsApiPreview).ConfigureAwait(false);\n+                return httpStatusCode == HttpStatusCode.NoContent;\n+            }\n+            catch\n+            {\n+                return false;\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Decline a repository invitation.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/repos/invitations/#decline-a-repository-invitation\">API documentation</a> for more information.\n+        /// </remarks>        \n+        /// <param name=\"invitationId\">The id of the invitation</param>\n+        /// <exception cref=\"ApiException\">Thrown when a general API error occurs.</exception>\n+        public async Task<bool> Decline(int invitationId)\n+        {\n+            var endpoint = ApiUrls.UserInvitations(invitationId);\n+\n+            try\n+            {\n+                var httpStatusCode = await ApiConnection.Connection.Delete(endpoint, new object(), AcceptHeaders.InvitationsApiPreview).ConfigureAwait(false);\n+                return httpStatusCode == HttpStatusCode.NoContent;\n+            }\n+            catch",
        "comment_created_at": "2016-07-10T05:37:15+00:00",
        "comment_author": "ryangribble",
        "comment_body": "For consistency with other simliar clients/endpoints, this should be \n\n``` csharp\ncatch (NotFoundException)\n```\n\nrather than catching any type of exception\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "70176299",
    "pr_number": 1410,
    "pr_file": "Octokit/Clients/RepositoryInvitationsClient.cs",
    "created_at": "2016-07-10T05:40:09+00:00",
    "commented_code": "+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Net;\n+using System.Threading.Tasks;\n+\n+namespace Octokit\n+{\n+    public class RepositoryInvitationsClient : ApiClient, IRepositoryInvitationsClient\n+    {\n+        public RepositoryInvitationsClient(IApiConnection apiConnection)\n+            : base(apiConnection)\n+        {\n+        }\n+\n+        /// <summary>\n+        /// Accept a repository invitation.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/repos/invitations/#accept-a-repository-invitation\">API documentation</a> for more information.\n+        /// </remarks>        \n+        /// <param name=\"invitationId\">The id of the invitation</param>\n+        /// <exception cref=\"ApiException\">Thrown when a general API error occurs.</exception>        \n+        public async Task<bool> Accept(int invitationId)\n+        {\n+            var endpoint = ApiUrls.UserInvitations(invitationId);\n+\n+            try\n+            {\n+                var httpStatusCode = await Connection.Patch(endpoint, AcceptHeaders.InvitationsApiPreview).ConfigureAwait(false);\n+                return httpStatusCode == HttpStatusCode.NoContent;\n+            }\n+            catch",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "70176299",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1410,
        "pr_file": "Octokit/Clients/RepositoryInvitationsClient.cs",
        "discussion_id": "70176299",
        "commented_code": "@@ -0,0 +1,127 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Net;\n+using System.Threading.Tasks;\n+\n+namespace Octokit\n+{\n+    public class RepositoryInvitationsClient : ApiClient, IRepositoryInvitationsClient\n+    {\n+        public RepositoryInvitationsClient(IApiConnection apiConnection)\n+            : base(apiConnection)\n+        {\n+        }\n+\n+        /// <summary>\n+        /// Accept a repository invitation.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/repos/invitations/#accept-a-repository-invitation\">API documentation</a> for more information.\n+        /// </remarks>        \n+        /// <param name=\"invitationId\">The id of the invitation</param>\n+        /// <exception cref=\"ApiException\">Thrown when a general API error occurs.</exception>        \n+        public async Task<bool> Accept(int invitationId)\n+        {\n+            var endpoint = ApiUrls.UserInvitations(invitationId);\n+\n+            try\n+            {\n+                var httpStatusCode = await Connection.Patch(endpoint, AcceptHeaders.InvitationsApiPreview).ConfigureAwait(false);\n+                return httpStatusCode == HttpStatusCode.NoContent;\n+            }\n+            catch",
        "comment_created_at": "2016-07-10T05:40:09+00:00",
        "comment_author": "ryangribble",
        "comment_body": "For consistency with other simliar clients/endpoints, this should be \n\n``` csharp\ncatch (NotFoundException)\n```\n\nrather than catching any type of exception\n",
        "pr_file_module": null
      }
    ]
  }
]