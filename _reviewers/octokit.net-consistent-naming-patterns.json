[
  {
    "discussion_id": "113411198",
    "pr_number": 1585,
    "pr_file": "Octokit.Tests.Conventions/ModelTests.cs",
    "created_at": "2017-04-26T09:56:02+00:00",
    "commented_code": "}\n         }\n \n+        [Theory]\n+        [MemberData(\"ResponseModelTypes\")]",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "113411198",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1585,
        "pr_file": "Octokit.Tests.Conventions/ModelTests.cs",
        "discussion_id": "113411198",
        "commented_code": "@@ -107,6 +107,50 @@ public void ResponseModelsHaveReadOnlyCollections(Type modelType)\n             }\n         }\n \n+        [Theory]\n+        [MemberData(\"ResponseModelTypes\")]",
        "comment_created_at": "2017-04-26T09:56:02+00:00",
        "comment_author": "khellang",
        "comment_body": "`nameof`? Might as well change all of them if you decide to go for it.",
        "pr_file_module": null
      },
      {
        "comment_id": "113420857",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1585,
        "pr_file": "Octokit.Tests.Conventions/ModelTests.cs",
        "discussion_id": "113411198",
        "commented_code": "@@ -107,6 +107,50 @@ public void ResponseModelsHaveReadOnlyCollections(Type modelType)\n             }\n         }\n \n+        [Theory]\n+        [MemberData(\"ResponseModelTypes\")]",
        "comment_created_at": "2017-04-26T10:48:34+00:00",
        "comment_author": "mderriey",
        "comment_body": "I went for consistency here. not knowing what versions of VS contributors use, even if I guess it's safe they use a recent enough version. The .NET Core port should be merged in the near future, and since the new .csproj involves using VS 2017+, these updates will be totally safe then.",
        "pr_file_module": null
      },
      {
        "comment_id": "113421607",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1585,
        "pr_file": "Octokit.Tests.Conventions/ModelTests.cs",
        "discussion_id": "113411198",
        "commented_code": "@@ -107,6 +107,50 @@ public void ResponseModelsHaveReadOnlyCollections(Type modelType)\n             }\n         }\n \n+        [Theory]\n+        [MemberData(\"ResponseModelTypes\")]",
        "comment_created_at": "2017-04-26T10:53:16+00:00",
        "comment_author": "khellang",
        "comment_body": "Oh, sorry. I just assumed this project used C# 6 by now (given that C# 7 has since been released), but I see the `LangVersion` elements from https://github.com/octokit/octokit.net/pull/820 are still there...",
        "pr_file_module": null
      },
      {
        "comment_id": "113579376",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1585,
        "pr_file": "Octokit.Tests.Conventions/ModelTests.cs",
        "discussion_id": "113411198",
        "commented_code": "@@ -107,6 +107,50 @@ public void ResponseModelsHaveReadOnlyCollections(Type modelType)\n             }\n         }\n \n+        [Theory]\n+        [MemberData(\"ResponseModelTypes\")]",
        "comment_created_at": "2017-04-26T22:38:08+00:00",
        "comment_author": "mderriey",
        "comment_body": "No worries at all, thanks for spotting this. I didn't even know C# 6 was explicitly disabled. I'll take a look at the places in the dotnetcore branch tomorrow and use new features where possible.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "56433106",
    "pr_number": 1195,
    "pr_file": "Octokit/Clients/IRepositoryCommitsClient.cs",
    "created_at": "2016-03-16T23:22:11+00:00",
    "commented_code": "/// <param name=\"request\">Used to filter list of commits returned</param>\n         /// <returns></returns>\n         Task<IReadOnlyList<GitHubCommit>> GetAll(string owner, string name, CommitRequest request);\n+\n+        /// <summary>\n+        /// Get the SHA-1 of a commit reference\n+        /// </summary>\n+        /// <param name=\"owner\">The owner of the repository</param>\n+        /// <param name=\"name\">The name of the repository</param>\n+        /// <param name=\"reference\">The repository reference</param>\n+        /// <returns></returns>\n+        Task<string> Sha1(string owner, string name, string reference);",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "56433106",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1195,
        "pr_file": "Octokit/Clients/IRepositoryCommitsClient.cs",
        "discussion_id": "56433106",
        "commented_code": "@@ -50,5 +50,14 @@ public interface IRepositoryCommitsClient\n         /// <param name=\"request\">Used to filter list of commits returned</param>\n         /// <returns></returns>\n         Task<IReadOnlyList<GitHubCommit>> GetAll(string owner, string name, CommitRequest request);\n+\n+        /// <summary>\n+        /// Get the SHA-1 of a commit reference\n+        /// </summary>\n+        /// <param name=\"owner\">The owner of the repository</param>\n+        /// <param name=\"name\">The name of the repository</param>\n+        /// <param name=\"reference\">The repository reference</param>\n+        /// <returns></returns>\n+        Task<string> Sha1(string owner, string name, string reference);",
        "comment_created_at": "2016-03-16T23:22:11+00:00",
        "comment_author": "shiftkey",
        "comment_body": "Could we add a verb to this method? Say something like `GetSha1`?\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "57599083",
    "pr_number": 1185,
    "pr_file": "Octokit/Clients/IIssuesClient.cs",
    "created_at": "2016-03-28T17:18:27+00:00",
    "commented_code": "/// </param>\n         /// <returns></returns>\n         Task<Issue> Update(string owner, string name, int number, IssueUpdate issueUpdate);\n+\n+        /// <summary>\n+        /// Locks an issue for the specified repository. Issue owners and users with push access can lock an issue.\n+        /// </summary>\n+        /// <remarks>https://developer.github.com/v3/issues/#lock-an-issue</remarks>\n+        /// <param name=\"owner\">The owner of the repository</param>\n+        /// <param name=\"name\">The name of the repository</param>\n+        /// <param name=\"number\">The issue number</param>\n+        /// <returns></returns>\n+        Task LockIssue(string owner, string name, int number);",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "57599083",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1185,
        "pr_file": "Octokit/Clients/IIssuesClient.cs",
        "discussion_id": "57599083",
        "commented_code": "@@ -163,5 +163,25 @@ public interface IIssuesClient\n         /// </param>\n         /// <returns></returns>\n         Task<Issue> Update(string owner, string name, int number, IssueUpdate issueUpdate);\n+\n+        /// <summary>\n+        /// Locks an issue for the specified repository. Issue owners and users with push access can lock an issue.\n+        /// </summary>\n+        /// <remarks>https://developer.github.com/v3/issues/#lock-an-issue</remarks>\n+        /// <param name=\"owner\">The owner of the repository</param>\n+        /// <param name=\"name\">The name of the repository</param>\n+        /// <param name=\"number\">The issue number</param>\n+        /// <returns></returns>\n+        Task LockIssue(string owner, string name, int number);",
        "comment_created_at": "2016-03-28T17:18:27+00:00",
        "comment_author": "shiftkey",
        "comment_body": "Given this usage will look like this:\n\n```\nawait github.Issue.LockIssue(\"owner\", \"name\", 1);\n```\n\nPerhaps we can drop the `Issue` suffix here, to give:\n\n```\nawait github.Issue.Lock(\"owner\", \"name\", 1);\n```\n\nThoughts @haacked @ryangribble?\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "56964381",
    "pr_number": 1144,
    "pr_file": "Octokit.Reactive/Clients/IObservableOrganizationsClient.cs",
    "created_at": "2016-03-22T10:32:10+00:00",
    "commented_code": "IObservableTeamsClient Team { get; }\n \n         /// <summary>\n+        /// A client for GitHub's Organization Hooks API.\n+        /// </summary>\n+        /// <remarks>See <a href=\"http://developer.github.com/v3/orgs/hooks/\">Hooks API documentation</a> for more information.</remarks>\n+        IObservableOrganizationHooksClient Hooks { get; }",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "56964381",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1144,
        "pr_file": "Octokit.Reactive/Clients/IObservableOrganizationsClient.cs",
        "discussion_id": "56964381",
        "commented_code": "@@ -16,6 +16,12 @@ public interface IObservableOrganizationsClient\n         IObservableTeamsClient Team { get; }\n \n         /// <summary>\n+        /// A client for GitHub's Organization Hooks API.\n+        /// </summary>\n+        /// <remarks>See <a href=\"http://developer.github.com/v3/orgs/hooks/\">Hooks API documentation</a> for more information.</remarks>\n+        IObservableOrganizationHooksClient Hooks { get; }",
        "comment_created_at": "2016-03-22T10:32:10+00:00",
        "comment_author": "M-Zuber",
        "comment_body": "This should be in the singular - `Hook` to be consistent with the other sub-client properties\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "56964711",
    "pr_number": 1144,
    "pr_file": "Octokit.Reactive/Clients/ObservableOrganizationsClient.cs",
    "created_at": "2016-03-22T10:35:14+00:00",
    "commented_code": "public IObservableTeamsClient Team { get; private set; }\n \n         /// <summary>\n+        /// A client for GitHub's Organization Hooks API.\n+        /// </summary>\n+        /// <remarks>See <a href=\"http://developer.github.com/v3/orgs/hooks/\">Hooks API documentation</a> for more information.</remarks>\n+        public IObservableOrganizationHooksClient Hooks { get; private set; }",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "56964711",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1144,
        "pr_file": "Octokit.Reactive/Clients/ObservableOrganizationsClient.cs",
        "discussion_id": "56964711",
        "commented_code": "@@ -35,6 +36,12 @@ public ObservableOrganizationsClient(IGitHubClient client)\n         public IObservableTeamsClient Team { get; private set; }\n \n         /// <summary>\n+        /// A client for GitHub's Organization Hooks API.\n+        /// </summary>\n+        /// <remarks>See <a href=\"http://developer.github.com/v3/orgs/hooks/\">Hooks API documentation</a> for more information.</remarks>\n+        public IObservableOrganizationHooksClient Hooks { get; private set; }",
        "comment_created_at": "2016-03-22T10:35:14+00:00",
        "comment_author": "M-Zuber",
        "comment_body": "This should be in the singular - Hook to be consistent with the other sub-client properties (will flow from a refactor of the interface but figured I'd mention it here also)\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "56973889",
    "pr_number": 1144,
    "pr_file": "Octokit.Reactive/Clients/IObservableOrganizationsClient.cs",
    "created_at": "2016-03-22T11:54:29+00:00",
    "commented_code": "IObservableTeamsClient Team { get; }\n \n         /// <summary>\n+        /// A client for GitHub's Organization Hooks API.\n+        /// </summary>\n+        /// <remarks>See <a href=\"http://developer.github.com/v3/orgs/hooks/\">Hooks API documentation</a> for more information.</remarks>\n+        IObservableOrganizationHooksClient Hooks { get; }",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "56973889",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1144,
        "pr_file": "Octokit.Reactive/Clients/IObservableOrganizationsClient.cs",
        "discussion_id": "56973889",
        "commented_code": "@@ -16,6 +16,12 @@ public interface IObservableOrganizationsClient\n         IObservableTeamsClient Team { get; }\n \n         /// <summary>\n+        /// A client for GitHub's Organization Hooks API.\n+        /// </summary>\n+        /// <remarks>See <a href=\"http://developer.github.com/v3/orgs/hooks/\">Hooks API documentation</a> for more information.</remarks>\n+        IObservableOrganizationHooksClient Hooks { get; }",
        "comment_created_at": "2016-03-22T11:54:29+00:00",
        "comment_author": "ryangribble",
        "comment_body": "Yep, there has been a move towards ensuring all property names for clients are singular (#53 #1035 #1036 #375 #1038), \nso I agree these should be `IOrganizationHooksClient Hook { get; private set; }`\n\nIt also makes me realise we have quite a few other clients that still need to get resolved!\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "131648089",
    "pr_number": 1648,
    "pr_file": "Octokit.Reactive/Clients/IObservablePullRequestReviewClient.cs",
    "created_at": "2017-08-07T13:02:56+00:00",
    "commented_code": "+﻿using System;\n+using System.Reactive;\n+\n+namespace Octokit.Reactive\n+{\n+    /// <summary>\n+    /// A client for GitHub's Pull Request Review API.\n+    /// </summary>\n+    /// <remarks>\n+    /// See the <a href=\"https://developer.github.com/v3/pulls/reviews/\">Review API documentation</a> for more information.\n+    /// </remarks>\n+    public interface IObservablePullRequestReviewClient\n+    {\n+        /// <summary>\n+        /// Gets reviews for a specified pull request.\n+        /// </summary>\n+        /// <remarks>https://developer.github.com/v3/pulls/reviews/#list-reviews-on-a-pull-request</remarks>\n+        /// <param name=\"owner\">The owner of the repository</param>\n+        /// <param name=\"name\">The name of the repository</param>\n+        /// <param name=\"pullRequestId\">The pull request number</param>",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "131648089",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1648,
        "pr_file": "Octokit.Reactive/Clients/IObservablePullRequestReviewClient.cs",
        "discussion_id": "131648089",
        "commented_code": "@@ -0,0 +1,190 @@\n+﻿using System;\n+using System.Reactive;\n+\n+namespace Octokit.Reactive\n+{\n+    /// <summary>\n+    /// A client for GitHub's Pull Request Review API.\n+    /// </summary>\n+    /// <remarks>\n+    /// See the <a href=\"https://developer.github.com/v3/pulls/reviews/\">Review API documentation</a> for more information.\n+    /// </remarks>\n+    public interface IObservablePullRequestReviewClient\n+    {\n+        /// <summary>\n+        /// Gets reviews for a specified pull request.\n+        /// </summary>\n+        /// <remarks>https://developer.github.com/v3/pulls/reviews/#list-reviews-on-a-pull-request</remarks>\n+        /// <param name=\"owner\">The owner of the repository</param>\n+        /// <param name=\"name\">The name of the repository</param>\n+        /// <param name=\"pullRequestId\">The pull request number</param>",
        "comment_created_at": "2017-08-07T13:02:56+00:00",
        "comment_author": "ryangribble",
        "comment_body": "please name the variable `number` since a pull request also has an internal `long Id` field which we dont want to confuse here.\r\n\r\nThis comment applies to multiple files on the PR - if you can please fixup all references to pull request numbers to be called `number` 💓 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "131649465",
    "pr_number": 1648,
    "pr_file": "Octokit.Reactive/Clients/ObservablePullRequestReviewClient.cs",
    "created_at": "2017-08-07T13:09:23+00:00",
    "commented_code": "+﻿using System;\n+using System.Reactive;\n+using System.Reactive.Threading.Tasks;\n+using Octokit.Reactive.Internal;\n+\n+namespace Octokit.Reactive\n+{\n+    /// <summary>\n+    /// A client for GitHub's Pull Request Review API.\n+    /// </summary>\n+    /// <remarks>\n+    /// See the <a href=\"https://developer.github.com/v3/pulls/reviews/\">Review API documentation</a> for more information.\n+    /// </remarks>\n+    public class ObservablePullRequestReviewClient : IObservablePullRequestReviewClient\n+    {\n+        readonly IPullRequestReviewClient _client;\n+        readonly IConnection _connection;\n+\n+        public ObservablePullRequestReviewClient(IGitHubClient client)\n+        {\n+            Ensure.ArgumentNotNull(client, \"client\");",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "131649465",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1648,
        "pr_file": "Octokit.Reactive/Clients/ObservablePullRequestReviewClient.cs",
        "discussion_id": "131649465",
        "commented_code": "@@ -0,0 +1,284 @@\n+﻿using System;\n+using System.Reactive;\n+using System.Reactive.Threading.Tasks;\n+using Octokit.Reactive.Internal;\n+\n+namespace Octokit.Reactive\n+{\n+    /// <summary>\n+    /// A client for GitHub's Pull Request Review API.\n+    /// </summary>\n+    /// <remarks>\n+    /// See the <a href=\"https://developer.github.com/v3/pulls/reviews/\">Review API documentation</a> for more information.\n+    /// </remarks>\n+    public class ObservablePullRequestReviewClient : IObservablePullRequestReviewClient\n+    {\n+        readonly IPullRequestReviewClient _client;\n+        readonly IConnection _connection;\n+\n+        public ObservablePullRequestReviewClient(IGitHubClient client)\n+        {\n+            Ensure.ArgumentNotNull(client, \"client\");",
        "comment_created_at": "2017-08-07T13:09:23+00:00",
        "comment_author": "ryangribble",
        "comment_body": "With all new additions, we are trying to standardise on the slightly \"better\" implementation of getting the name of the parameter.\r\n\r\n `nameof(client)` rather than `\"client\"`\r\n\r\nAre you able to change all occurences in `Ensure.xxxx()` calls to use `nameof()` 😀 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "131045074",
    "pr_number": 1639,
    "pr_file": "Octokit/Clients/OrganizationOutsideCollaboratorsClient.cs",
    "created_at": "2017-08-03T03:08:18+00:00",
    "commented_code": "+﻿using System;\n+using System.Collections.Generic;\n+using System.Net;\n+using System.Threading.Tasks;\n+\n+namespace Octokit\n+{\n+    /// <summary>\n+    /// A client for GitHub's Organization Outside Collaborators API.\n+    /// </summary>\n+    /// <remarks>\n+    /// See the <a href=\"http://developer.github.com/v3/orgs/outside_collaborators/\">Orgs API documentation</a> for more information.\n+    /// </remarks>\n+    public class OrganizationOutsideCollaboratorsClient : ApiClient, IOrganizationOutsideCollaboratorsClient\n+    {\n+        /// <summary>\n+        /// Initializes a new Organization Outside Collaborators API client.\n+        /// </summary>\n+        /// <param name=\"apiConnection\">An API connection</param>\n+        public OrganizationOutsideCollaboratorsClient(IApiConnection apiConnection)\n+            : base(apiConnection)\n+        {\n+        }\n+\n+        /// <summary>\n+        /// List all users who are outside collaborators of an organization. An outside collaborator is a user that\n+        /// are not a member of the organization.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators\">API documentation</a>\n+        /// for more information.\n+        /// </remarks>\n+        /// <param name=\"org\">The login for the organization</param>\n+        /// <returns>The users</returns>\n+        public Task<IReadOnlyList<User>> GetAll(string org)\n+        {\n+            Ensure.ArgumentNotNullOrEmptyString(org, \"org\");\n+\n+            return GetAll(org, ApiOptions.None);\n+        }\n+\n+        /// <summary>\n+        /// List all users who are outside collaborators of an organization. An outside collaborator is a user that\n+        /// are not a member of the organization.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators\">API documentation</a>\n+        /// for more information.\n+        /// </remarks>\n+        /// <param name=\"org\">The login for the organization</param>\n+        /// <param name=\"options\">Options for changing the API response</param>\n+        /// <returns>The users</returns>\n+        public Task<IReadOnlyList<User>> GetAll(string org, ApiOptions options)\n+        {\n+            Ensure.ArgumentNotNullOrEmptyString(org, \"org\");\n+            Ensure.ArgumentNotNull(options, \"options\");\n+\n+            return ApiConnection.GetAll<User>(ApiUrls.OutsideCollaborators(org), null, AcceptHeaders.OrganizationMembershipPreview, options);\n+        }\n+\n+        /// <summary>\n+        /// List all users who are outside collaborators of an organization. An outside collaborator is a user that\n+        /// are not a member of the organization.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators\">API documentation</a>\n+        /// for more information.\n+        /// </remarks>\n+        /// <param name=\"org\">The login for the organization</param>\n+        /// <param name=\"filter\">The filter to use when getting the users, <see cref=\"OrganizationMembersFilter\"/></param>\n+        /// <returns>The users</returns>\n+        public Task<IReadOnlyList<User>> GetAll(string org, OrganizationMembersFilter filter)\n+        {\n+            Ensure.ArgumentNotNullOrEmptyString(org, \"org\");\n+\n+            return GetAll(org, filter, ApiOptions.None);\n+        }\n+\n+        /// <summary>\n+        /// List all users who are outside collaborators of an organization. An outside collaborator is a user that\n+        /// are not a member of the organization.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators\">API documentation</a>\n+        /// for more information.\n+        /// </remarks>\n+        /// <param name=\"org\">The login for the organization</param>\n+        /// <param name=\"filter\">The filter to use when getting the users, <see cref=\"OrganizationMembersFilter\"/></param>\n+        /// <param name=\"options\">Options for changing the API response</param>\n+        /// <returns>The users</returns>\n+        public Task<IReadOnlyList<User>> GetAll(string org, OrganizationMembersFilter filter, ApiOptions options)\n+        {\n+            Ensure.ArgumentNotNullOrEmptyString(org, \"org\");",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "131045074",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1639,
        "pr_file": "Octokit/Clients/OrganizationOutsideCollaboratorsClient.cs",
        "discussion_id": "131045074",
        "commented_code": "@@ -0,0 +1,192 @@\n+﻿using System;\n+using System.Collections.Generic;\n+using System.Net;\n+using System.Threading.Tasks;\n+\n+namespace Octokit\n+{\n+    /// <summary>\n+    /// A client for GitHub's Organization Outside Collaborators API.\n+    /// </summary>\n+    /// <remarks>\n+    /// See the <a href=\"http://developer.github.com/v3/orgs/outside_collaborators/\">Orgs API documentation</a> for more information.\n+    /// </remarks>\n+    public class OrganizationOutsideCollaboratorsClient : ApiClient, IOrganizationOutsideCollaboratorsClient\n+    {\n+        /// <summary>\n+        /// Initializes a new Organization Outside Collaborators API client.\n+        /// </summary>\n+        /// <param name=\"apiConnection\">An API connection</param>\n+        public OrganizationOutsideCollaboratorsClient(IApiConnection apiConnection)\n+            : base(apiConnection)\n+        {\n+        }\n+\n+        /// <summary>\n+        /// List all users who are outside collaborators of an organization. An outside collaborator is a user that\n+        /// are not a member of the organization.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators\">API documentation</a>\n+        /// for more information.\n+        /// </remarks>\n+        /// <param name=\"org\">The login for the organization</param>\n+        /// <returns>The users</returns>\n+        public Task<IReadOnlyList<User>> GetAll(string org)\n+        {\n+            Ensure.ArgumentNotNullOrEmptyString(org, \"org\");\n+\n+            return GetAll(org, ApiOptions.None);\n+        }\n+\n+        /// <summary>\n+        /// List all users who are outside collaborators of an organization. An outside collaborator is a user that\n+        /// are not a member of the organization.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators\">API documentation</a>\n+        /// for more information.\n+        /// </remarks>\n+        /// <param name=\"org\">The login for the organization</param>\n+        /// <param name=\"options\">Options for changing the API response</param>\n+        /// <returns>The users</returns>\n+        public Task<IReadOnlyList<User>> GetAll(string org, ApiOptions options)\n+        {\n+            Ensure.ArgumentNotNullOrEmptyString(org, \"org\");\n+            Ensure.ArgumentNotNull(options, \"options\");\n+\n+            return ApiConnection.GetAll<User>(ApiUrls.OutsideCollaborators(org), null, AcceptHeaders.OrganizationMembershipPreview, options);\n+        }\n+\n+        /// <summary>\n+        /// List all users who are outside collaborators of an organization. An outside collaborator is a user that\n+        /// are not a member of the organization.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators\">API documentation</a>\n+        /// for more information.\n+        /// </remarks>\n+        /// <param name=\"org\">The login for the organization</param>\n+        /// <param name=\"filter\">The filter to use when getting the users, <see cref=\"OrganizationMembersFilter\"/></param>\n+        /// <returns>The users</returns>\n+        public Task<IReadOnlyList<User>> GetAll(string org, OrganizationMembersFilter filter)\n+        {\n+            Ensure.ArgumentNotNullOrEmptyString(org, \"org\");\n+\n+            return GetAll(org, filter, ApiOptions.None);\n+        }\n+\n+        /// <summary>\n+        /// List all users who are outside collaborators of an organization. An outside collaborator is a user that\n+        /// are not a member of the organization.\n+        /// </summary>\n+        /// <remarks>\n+        /// See the <a href=\"https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators\">API documentation</a>\n+        /// for more information.\n+        /// </remarks>\n+        /// <param name=\"org\">The login for the organization</param>\n+        /// <param name=\"filter\">The filter to use when getting the users, <see cref=\"OrganizationMembersFilter\"/></param>\n+        /// <param name=\"options\">Options for changing the API response</param>\n+        /// <returns>The users</returns>\n+        public Task<IReadOnlyList<User>> GetAll(string org, OrganizationMembersFilter filter, ApiOptions options)\n+        {\n+            Ensure.ArgumentNotNullOrEmptyString(org, \"org\");",
        "comment_created_at": "2017-08-03T03:08:18+00:00",
        "comment_author": "ryangribble",
        "comment_body": "Across the assertions in this PR there are a mixture of `\"org\"` and `nameof(org)` - let's standardise on `nameof()` for all new ones added in the PR?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "112804033",
    "pr_number": 1588,
    "pr_file": "Octokit.Reactive/Clients/IObservablePullRequestsClient.cs",
    "created_at": "2017-04-22T06:34:21+00:00",
    "commented_code": "IObservablePullRequestReviewCommentsClient ReviewComment { get; }\n \n         /// <summary>\n+        /// Client for managing review requests.\n+        /// </summary>\n+        IObservablePullRequestReviewRequestsClient ReviewRequests { get; }",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "112804033",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1588,
        "pr_file": "Octokit.Reactive/Clients/IObservablePullRequestsClient.cs",
        "discussion_id": "112804033",
        "commented_code": "@@ -23,6 +23,11 @@ public interface IObservablePullRequestsClient\n         IObservablePullRequestReviewCommentsClient ReviewComment { get; }\n \n         /// <summary>\n+        /// Client for managing review requests.\n+        /// </summary>\n+        IObservablePullRequestReviewRequestsClient ReviewRequests { get; }",
        "comment_created_at": "2017-04-22T06:34:21+00:00",
        "comment_author": "ryangribble",
        "comment_body": "Our convention is to use plural for the client name (which you've done `PullRequestReviewRequestsClient`) but to use singular for the sub-client property accessors.  So in this case rather than `ReviewRequests` it should just be `ReviewRequest`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "196027821",
    "pr_number": 1813,
    "pr_file": "Octokit/Clients/IRepositoriesClient.cs",
    "created_at": "2018-06-18T10:14:06+00:00",
    "commented_code": "/// <returns>A <see cref=\"Repository\"/></returns>\n         Task<Repository> Transfer(string currentOwner, string name, RepositoryTransfer repositoryTransfer);\n \n+        Task<Repository> Transfer(long id, RepositoryTransfer repositoryTransfer);",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "196027821",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1813,
        "pr_file": "Octokit/Clients/IRepositoriesClient.cs",
        "discussion_id": "196027821",
        "commented_code": "@@ -112,6 +112,8 @@ public interface IRepositoriesClient\n         /// <returns>A <see cref=\"Repository\"/></returns>\n         Task<Repository> Transfer(string currentOwner, string name, RepositoryTransfer repositoryTransfer);\n \n+        Task<Repository> Transfer(long id, RepositoryTransfer repositoryTransfer);",
        "comment_created_at": "2018-06-18T10:14:06+00:00",
        "comment_author": "ryangribble",
        "comment_body": "by convention we always name the parameter `repositoryId` (this comment applies to all the places it is currently named `id`)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "162300932",
    "pr_number": 1738,
    "pr_file": "Octokit.Reactive/ObservableGitHubClient.cs",
    "created_at": "2018-01-18T10:24:05+00:00",
    "commented_code": "public IObservableAuthorizationsClient Authorization { get; private set; }\n         public IObservableActivitiesClient Activity { get; private set; }\n+        public IObservableApplicationClient Application { get; private set; }\n+        public IObservableInstallationsClient Installations { get; private set; }",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "162300932",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1738,
        "pr_file": "Octokit.Reactive/ObservableGitHubClient.cs",
        "discussion_id": "162300932",
        "commented_code": "@@ -69,6 +71,8 @@ public void SetRequestTimeout(TimeSpan timeout)\n \n         public IObservableAuthorizationsClient Authorization { get; private set; }\n         public IObservableActivitiesClient Activity { get; private set; }\n+        public IObservableApplicationClient Application { get; private set; }\n+        public IObservableInstallationsClient Installations { get; private set; }",
        "comment_created_at": "2018-01-18T10:24:05+00:00",
        "comment_author": "ryangribble",
        "comment_body": "We use singular for client property names, so can this be `Installation` ?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "162301018",
    "pr_number": 1738,
    "pr_file": "Octokit.Reactive/IObservableGitHubClient.cs",
    "created_at": "2018-01-18T10:24:22+00:00",
    "commented_code": "IObservableAuthorizationsClient Authorization { get; }\n         IObservableActivitiesClient Activity { get; }\n+        IObservableApplicationClient Application { get; }\n+        IObservableInstallationsClient Installations { get; }",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "162301018",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1738,
        "pr_file": "Octokit.Reactive/IObservableGitHubClient.cs",
        "discussion_id": "162301018",
        "commented_code": "@@ -18,6 +18,8 @@ public interface IObservableGitHubClient : IApiInfoProvider\n \n         IObservableAuthorizationsClient Authorization { get; }\n         IObservableActivitiesClient Activity { get; }\n+        IObservableApplicationClient Application { get; }\n+        IObservableInstallationsClient Installations { get; }",
        "comment_created_at": "2018-01-18T10:24:22+00:00",
        "comment_author": "ryangribble",
        "comment_body": "We use singular for client property names, so can this be `Installation` ?",
        "pr_file_module": null
      },
      {
        "comment_id": "162313604",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1738,
        "pr_file": "Octokit.Reactive/IObservableGitHubClient.cs",
        "discussion_id": "162301018",
        "commented_code": "@@ -18,6 +18,8 @@ public interface IObservableGitHubClient : IApiInfoProvider\n \n         IObservableAuthorizationsClient Authorization { get; }\n         IObservableActivitiesClient Activity { get; }\n+        IObservableApplicationClient Application { get; }\n+        IObservableInstallationsClient Installations { get; }",
        "comment_created_at": "2018-01-18T11:18:43+00:00",
        "comment_author": "itaibh",
        "comment_body": "But I see there is `AhtorizationsClient` and `ActivitiesClient`, in fact only `ApplicationClient` is in singular form...",
        "pr_file_module": null
      },
      {
        "comment_id": "162313959",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1738,
        "pr_file": "Octokit.Reactive/IObservableGitHubClient.cs",
        "discussion_id": "162301018",
        "commented_code": "@@ -18,6 +18,8 @@ public interface IObservableGitHubClient : IApiInfoProvider\n \n         IObservableAuthorizationsClient Authorization { get; }\n         IObservableActivitiesClient Activity { get; }\n+        IObservableApplicationClient Application { get; }\n+        IObservableInstallationsClient Installations { get; }",
        "comment_created_at": "2018-01-18T11:20:21+00:00",
        "comment_author": "itaibh",
        "comment_body": "Oh, sorry, I see now what you meant. Will fix.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "209223783",
    "pr_number": 1854,
    "pr_file": "Octokit.Reactive/Clients/IObservableGitHubAppsClient.cs",
    "created_at": "2018-08-10T11:05:07+00:00",
    "commented_code": "/// </remarks>\n     public interface IObservableGitHubAppsClient\n     {\n+        /// <summary>\n+        /// Access GitHub's Apps Installations API.\n+        /// </summary>\n+        /// <remarks>\n+        /// Refer to the API documentation for more information: https://developer.github.com/v3/apps/installations/\n+        /// </remarks>\n+        IObservableGitHubAppsInstallationsClient Installations { get; }",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "209223783",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1854,
        "pr_file": "Octokit.Reactive/Clients/IObservableGitHubAppsClient.cs",
        "discussion_id": "209223783",
        "commented_code": "@@ -10,6 +10,14 @@ namespace Octokit.Reactive\n     /// </remarks>\n     public interface IObservableGitHubAppsClient\n     {\n+        /// <summary>\n+        /// Access GitHub's Apps Installations API.\n+        /// </summary>\n+        /// <remarks>\n+        /// Refer to the API documentation for more information: https://developer.github.com/v3/apps/installations/\n+        /// </remarks>\n+        IObservableGitHubAppsInstallationsClient Installations { get; }",
        "comment_created_at": "2018-08-10T11:05:07+00:00",
        "comment_author": "ryangribble",
        "comment_body": "The property name should be singular, eg `github.App.Installation.xxxx`",
        "pr_file_module": null
      }
    ]
  }
]