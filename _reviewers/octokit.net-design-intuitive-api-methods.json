[
  {
    "discussion_id": "162302430",
    "pr_number": 1738,
    "pr_file": "Octokit/Http/Connection.cs",
    "created_at": "2018-01-18T10:30:04+00:00",
    "commented_code": "return SendData<T>(uri, HttpMethod.Post, null, null, null, CancellationToken.None);\n         }\n \n-        public Task<IApiResponse<T>> Post<T>(Uri uri, object body, string accepts, string contentType)\n+        public Task<IApiResponse<T>> Post<T>(Uri uri, object body, string accepts, string contentType, IDictionary<string, string> parameters = null)",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "162302430",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1738,
        "pr_file": "Octokit/Http/Connection.cs",
        "discussion_id": "162302430",
        "commented_code": "@@ -238,12 +238,12 @@ public Task<IApiResponse<T>> Post<T>(Uri uri)\n             return SendData<T>(uri, HttpMethod.Post, null, null, null, CancellationToken.None);\n         }\n \n-        public Task<IApiResponse<T>> Post<T>(Uri uri, object body, string accepts, string contentType)\n+        public Task<IApiResponse<T>> Post<T>(Uri uri, object body, string accepts, string contentType, IDictionary<string, string> parameters = null)",
        "comment_created_at": "2018-01-18T10:30:04+00:00",
        "comment_author": "ryangribble",
        "comment_body": "since this is an existing public method, we want to avoid making a breaking change if possible, so typically we would add another method with the new signature",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "162302929",
    "pr_number": 1738,
    "pr_file": "Octokit/Http/Credentials.cs",
    "created_at": "2018-01-18T10:32:13+00:00",
    "commented_code": "AuthenticationType = AuthenticationType.Anonymous;\n         }\n \n-        public Credentials(string token)\n-        {\n-            Ensure.ArgumentNotNullOrEmptyString(token, \"token\");\n-\n-            Login = null;\n-            Password = token;\n-            AuthenticationType = AuthenticationType.Oauth;\n-        }\n-\n-        public Credentials(string login, string password)\n+        public Credentials(string login, string password, AuthenticationType authenticationType = AuthenticationType.Basic)",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "162302929",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1738,
        "pr_file": "Octokit/Http/Credentials.cs",
        "discussion_id": "162302929",
        "commented_code": "@@ -13,23 +13,23 @@ private Credentials()\n             AuthenticationType = AuthenticationType.Anonymous;\n         }\n \n-        public Credentials(string token)\n-        {\n-            Ensure.ArgumentNotNullOrEmptyString(token, \"token\");\n-\n-            Login = null;\n-            Password = token;\n-            AuthenticationType = AuthenticationType.Oauth;\n-        }\n-\n-        public Credentials(string login, string password)\n+        public Credentials(string login, string password, AuthenticationType authenticationType = AuthenticationType.Basic)",
        "comment_created_at": "2018-01-18T10:32:13+00:00",
        "comment_author": "ryangribble",
        "comment_body": "again, to avoid a breaking change (even a parameter with a default value can still be a breaking change binarily speaking) you should add new `ctor`/s for these changes",
        "pr_file_module": null
      },
      {
        "comment_id": "162315907",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1738,
        "pr_file": "Octokit/Http/Credentials.cs",
        "discussion_id": "162302929",
        "commented_code": "@@ -13,23 +13,23 @@ private Credentials()\n             AuthenticationType = AuthenticationType.Anonymous;\n         }\n \n-        public Credentials(string token)\n-        {\n-            Ensure.ArgumentNotNullOrEmptyString(token, \"token\");\n-\n-            Login = null;\n-            Password = token;\n-            AuthenticationType = AuthenticationType.Oauth;\n-        }\n-\n-        public Credentials(string login, string password)\n+        public Credentials(string login, string password, AuthenticationType authenticationType = AuthenticationType.Basic)",
        "comment_created_at": "2018-01-18T11:30:24+00:00",
        "comment_author": "itaibh",
        "comment_body": "Are you sure? AFAIK the run time takes care about it...",
        "pr_file_module": null
      },
      {
        "comment_id": "162316632",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1738,
        "pr_file": "Octokit/Http/Credentials.cs",
        "discussion_id": "162302929",
        "commented_code": "@@ -13,23 +13,23 @@ private Credentials()\n             AuthenticationType = AuthenticationType.Anonymous;\n         }\n \n-        public Credentials(string token)\n-        {\n-            Ensure.ArgumentNotNullOrEmptyString(token, \"token\");\n-\n-            Login = null;\n-            Password = token;\n-            AuthenticationType = AuthenticationType.Oauth;\n-        }\n-\n-        public Credentials(string login, string password)\n+        public Credentials(string login, string password, AuthenticationType authenticationType = AuthenticationType.Basic)",
        "comment_created_at": "2018-01-18T11:33:56+00:00",
        "comment_author": "ryangribble",
        "comment_body": "See this link, for example\r\nhttps://haacked.com/archive/2010/08/10/versioning-issues-with-optional-arguments.aspx/",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "46185797",
    "pr_number": 959,
    "pr_file": "Octokit.Reactive/Clients/IObservableRepositoryContentsClient.cs",
    "created_at": "2015-11-30T18:57:46+00:00",
    "commented_code": "/// <returns>\n         /// A collection of <see cref=\"RepositoryContent\"/> representing the content at the specified path\n         /// </returns>\n-        IObservable<RepositoryContent> GetAllContents(string owner, string name, string path, string reference);\n+        IObservable<RepositoryContent> GetAllContentsByRef(string owner, string name, string path, string reference);",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "46185797",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 959,
        "pr_file": "Octokit.Reactive/Clients/IObservableRepositoryContentsClient.cs",
        "discussion_id": "46185797",
        "commented_code": "@@ -124,7 +134,19 @@ public interface IObservableRepositoryContentsClient\n         /// <returns>\n         /// A collection of <see cref=\"RepositoryContent\"/> representing the content at the specified path\n         /// </returns>\n-        IObservable<RepositoryContent> GetAllContents(string owner, string name, string path, string reference);\n+        IObservable<RepositoryContent> GetAllContentsByRef(string owner, string name, string path, string reference);",
        "comment_created_at": "2015-11-30T18:57:46+00:00",
        "comment_author": "haacked",
        "comment_body": "I would reorder `path` and `reference`. The reason is the other overload to this method takes in `owner`, `name`, `reference`. If the user is calling that overload, then decides, no, they want to call this one, they only need to tack on the `path` parameter. They don't need to re-order parameters. Based on my experience, this is a common source of API call errors.\n",
        "pr_file_module": null
      },
      {
        "comment_id": "204724781",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 959,
        "pr_file": "Octokit.Reactive/Clients/IObservableRepositoryContentsClient.cs",
        "discussion_id": "46185797",
        "commented_code": "@@ -124,7 +134,19 @@ public interface IObservableRepositoryContentsClient\n         /// <returns>\n         /// A collection of <see cref=\"RepositoryContent\"/> representing the content at the specified path\n         /// </returns>\n-        IObservable<RepositoryContent> GetAllContents(string owner, string name, string path, string reference);\n+        IObservable<RepositoryContent> GetAllContentsByRef(string owner, string name, string path, string reference);",
        "comment_created_at": "2018-07-24T11:55:38+00:00",
        "comment_author": "tyadav492",
        "comment_body": "path parameter is not accepting any special char like '#' and space. I am trying to retrieve files form directory and i am getting not found exception and under same root directory it is getting all file which does not have any special char.\r\nI have two sub directories : 1) C# Code  and 2) TestApp. i am able to access TestApp but not \"C# Code\" as it is throwing not found exception. suggest me any solution for this as i am not able to rename the directory sue to some reason.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "408342251",
    "pr_number": 2176,
    "pr_file": "Octokit/Clients/CodesOfConductClient.cs",
    "created_at": "2020-04-14T18:19:52+00:00",
    "commented_code": "+using System.Collections.Generic;\n+using System.Threading.Tasks;\n+\n+namespace Octokit\n+{\n+    /// <summary>\n+    /// A client for GitHub's Code of Conduct API.\n+    /// </summary>\n+    /// <remarks>\n+    /// See the <a href=\"https://developer.github.com/v3/codes_of_conduct/\">API documentation</a> for more information.\n+    /// </remarks>\n+    public class CodesOfConductClient : ApiClient, ICodesOfConductClient\n+    {\n+        /// <summary>\n+        /// Instantiates a new GitHub Code of Conduct API client.\n+        /// </summary>\n+        /// <param name=\"apiConnection\">an API connection</param>\n+        public CodesOfConductClient(IApiConnection apiConnection)\n+            : base(apiConnection)\n+        { }\n+\n+        /// <summary>\n+        /// Gets all code of conducts on GitHub.\n+        /// </summary>\n+        /// <remarks>See the <a href=\"https://developer.github.com/v3/codes_of_conduct/#list-all-codes-of-conduct\">API documentation</a> for more information.</remarks>\n+        /// <returns>A <see cref=\"IReadOnlyList{CodeOfConduct}\"/> on GitHub.</returns>\n+        [Preview(\"scarlet-witch\")]\n+        [ManualRoute(\"GET\", \"/codes_of_conduct\")]\n+        public Task<IReadOnlyList<CodeOfConduct>> GetAll()\n+        {\n+            return ApiConnection.GetAll<CodeOfConduct>(ApiUrls.CodesOfConduct(), null, AcceptHeaders.CodesOfConductPreview);\n+        }\n+\n+        /// <summary>\n+        /// Gets an individual code of conduct.\n+        /// </summary>\n+        /// <remarks>See the <a href=\"https://developer.github.com/v3/codes_of_conduct/#get-an-individual-code-of-conduct\">API documentation</a> for more information.</remarks>\n+        /// <param name=\"key\">The unique key for the Code of Conduct</param>\n+        /// <returns>A <see cref=\"CodeOfConduct\"/> that includes the code of conduct key, name, and API/HTML URL.</returns>\n+        [Preview(\"scarlet-witch\")]\n+        [ManualRoute(\"GET\", \"/codes_of_conduct/{key}\")]\n+        public Task<CodeOfConduct> GetCodeOfConduct(CodeOfConductType key)",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "408342251",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 2176,
        "pr_file": "Octokit/Clients/CodesOfConductClient.cs",
        "discussion_id": "408342251",
        "commented_code": "@@ -0,0 +1,64 @@\n+using System.Collections.Generic;\n+using System.Threading.Tasks;\n+\n+namespace Octokit\n+{\n+    /// <summary>\n+    /// A client for GitHub's Code of Conduct API.\n+    /// </summary>\n+    /// <remarks>\n+    /// See the <a href=\"https://developer.github.com/v3/codes_of_conduct/\">API documentation</a> for more information.\n+    /// </remarks>\n+    public class CodesOfConductClient : ApiClient, ICodesOfConductClient\n+    {\n+        /// <summary>\n+        /// Instantiates a new GitHub Code of Conduct API client.\n+        /// </summary>\n+        /// <param name=\"apiConnection\">an API connection</param>\n+        public CodesOfConductClient(IApiConnection apiConnection)\n+            : base(apiConnection)\n+        { }\n+\n+        /// <summary>\n+        /// Gets all code of conducts on GitHub.\n+        /// </summary>\n+        /// <remarks>See the <a href=\"https://developer.github.com/v3/codes_of_conduct/#list-all-codes-of-conduct\">API documentation</a> for more information.</remarks>\n+        /// <returns>A <see cref=\"IReadOnlyList{CodeOfConduct}\"/> on GitHub.</returns>\n+        [Preview(\"scarlet-witch\")]\n+        [ManualRoute(\"GET\", \"/codes_of_conduct\")]\n+        public Task<IReadOnlyList<CodeOfConduct>> GetAll()\n+        {\n+            return ApiConnection.GetAll<CodeOfConduct>(ApiUrls.CodesOfConduct(), null, AcceptHeaders.CodesOfConductPreview);\n+        }\n+\n+        /// <summary>\n+        /// Gets an individual code of conduct.\n+        /// </summary>\n+        /// <remarks>See the <a href=\"https://developer.github.com/v3/codes_of_conduct/#get-an-individual-code-of-conduct\">API documentation</a> for more information.</remarks>\n+        /// <param name=\"key\">The unique key for the Code of Conduct</param>\n+        /// <returns>A <see cref=\"CodeOfConduct\"/> that includes the code of conduct key, name, and API/HTML URL.</returns>\n+        [Preview(\"scarlet-witch\")]\n+        [ManualRoute(\"GET\", \"/codes_of_conduct/{key}\")]\n+        public Task<CodeOfConduct> GetCodeOfConduct(CodeOfConductType key)",
        "comment_created_at": "2020-04-14T18:19:52+00:00",
        "comment_author": "shiftkey",
        "comment_body": "This could just be `Get` to keep the API as concise as possible:\r\n\r\n```suggestion\r\n        public Task<CodeOfConduct> Get(CodeOfConductType key)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "93604806",
    "pr_number": 1520,
    "pr_file": "Octokit/Clients/IPullRequestsClient.cs",
    "created_at": "2016-12-22T11:07:43+00:00",
    "commented_code": "/// <summary>\n         /// Client for managing comments.\n         /// </summary>\n+        [Obsolete(\"Please use IPullRequestsClient.ReviewComment instead. This method will be removed in a future version\")]\n         IPullRequestReviewCommentsClient Comment { get; }\n+        /// <summary>\n+        /// Client for managing comments.",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "93604806",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1520,
        "pr_file": "Octokit/Clients/IPullRequestsClient.cs",
        "discussion_id": "93604806",
        "commented_code": "@@ -15,7 +16,12 @@ public interface IPullRequestsClient\n         /// <summary>\n         /// Client for managing comments.\n         /// </summary>\n+        [Obsolete(\"Please use IPullRequestsClient.ReviewComment instead. This method will be removed in a future version\")]\n         IPullRequestReviewCommentsClient Comment { get; }\n+        /// <summary>\n+        /// Client for managing comments.",
        "comment_created_at": "2016-12-22T11:07:43+00:00",
        "comment_author": "ryangribble",
        "comment_body": "I guess this comment should say \"Client for managing review comments\" now?",
        "pr_file_module": null
      }
    ]
  }
]