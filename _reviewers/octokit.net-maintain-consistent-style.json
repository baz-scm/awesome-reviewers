[
  {
    "discussion_id": "8035781",
    "pr_number": 173,
    "pr_file": "Octokit/Models/Request/NewPullRequest.cs",
    "created_at": "2013-12-02T18:59:58+00:00",
    "commented_code": "+\ufeffusing System;\n+\n+namespace Octokit\n+{\n+    /// <summary>\n+    /// Describes a new pull request to create via the <see cref=\"IPullRequestsClient.Create(string,string,NewPullRequest)\"/> method.\n+    /// </summary>\n+    public class NewPullRequest\n+    {\n+        public NewPullRequest(string title, string head, string baseRef)\n+        {\n+            Ensure.ArgumentNotNullOrEmptyString(title, \"title\");\n+            Ensure.ArgumentNotNullOrEmptyString(head, \"head\");\n+            Ensure.ArgumentNotNullOrEmptyString(baseRef, \"baseRef\");\n+\n+            _title = title;\n+            _head = head;\n+            _base = baseRef;\n+        }\n+\n+        /// <summary>\n+        /// Title of the pull request (required)\n+        /// </summary>\n+       readonly string _title;",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "8035781",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 173,
        "pr_file": "Octokit/Models/Request/NewPullRequest.cs",
        "discussion_id": "8035781",
        "commented_code": "@@ -0,0 +1,41 @@\n+\ufeffusing System;\n+\n+namespace Octokit\n+{\n+    /// <summary>\n+    /// Describes a new pull request to create via the <see cref=\"IPullRequestsClient.Create(string,string,NewPullRequest)\"/> method.\n+    /// </summary>\n+    public class NewPullRequest\n+    {\n+        public NewPullRequest(string title, string head, string baseRef)\n+        {\n+            Ensure.ArgumentNotNullOrEmptyString(title, \"title\");\n+            Ensure.ArgumentNotNullOrEmptyString(head, \"head\");\n+            Ensure.ArgumentNotNullOrEmptyString(baseRef, \"baseRef\");\n+\n+            _title = title;\n+            _head = head;\n+            _base = baseRef;\n+        }\n+\n+        /// <summary>\n+        /// Title of the pull request (required)\n+        /// </summary>\n+       readonly string _title;",
        "comment_created_at": "2013-12-02T18:59:58+00:00",
        "comment_author": "haacked",
        "comment_body": "Please use regular auto properties.\n\n```\npublic string Title { get; private set; }\n```\n\nAnd set them in the constructor. Octokit handles the proper casing.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "233810336",
    "pr_number": 1896,
    "pr_file": "Octokit/Models/Request/NewTeamDiscussion.cs",
    "created_at": "2018-11-15T11:42:18+00:00",
    "commented_code": "+using System.Collections.ObjectModel;\n+using System.Diagnostics;\n+using System.Globalization;\n+\n+namespace Octokit\n+{\n+    /// <summary>\n+    /// Used to create a team discussion.\n+    /// </summary>\n+    /// <remarks>\n+    /// OAuth access tokens require the write:discussion scope.\n+    /// See the <a href=\"https://developer.github.com/v3/teams/discussions/#create-a-discussion\">Create a discussion</a> for more information.\n+    /// </remarks>\n+    [DebuggerDisplay(\"{DebuggerDisplay,nq}\")]\n+    public class NewTeamDiscussion\n+    {\n+        /// <summary>\n+        /// Initializes a new instance of the <see cref=\"NewTeamDiscussion\"/> class.\n+        /// </summary>\n+        /// <param name=\"title\">The discussion post's title.</param>\n+        /// <param name=\"body\">The discussion post's body text.</param>\n+        public NewTeamDiscussion(string title, string body)\n+        {\n+            Title = title;\n+            Body = body;\n+        }\n+\n+        /// <summary>\n+        /// The discussion post's title (required).\n+        /// </summary>\n+        public string Title { get; set; }\n+\n+        /// <summary>\n+        /// The discussion post's body text (required).\n+        /// </summary>\n+        public string Body { get; set; }",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "233810336",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1896,
        "pr_file": "Octokit/Models/Request/NewTeamDiscussion.cs",
        "discussion_id": "233810336",
        "commented_code": "@@ -0,0 +1,53 @@\n+using System.Collections.ObjectModel;\n+using System.Diagnostics;\n+using System.Globalization;\n+\n+namespace Octokit\n+{\n+    /// <summary>\n+    /// Used to create a team discussion.\n+    /// </summary>\n+    /// <remarks>\n+    /// OAuth access tokens require the write:discussion scope.\n+    /// See the <a href=\"https://developer.github.com/v3/teams/discussions/#create-a-discussion\">Create a discussion</a> for more information.\n+    /// </remarks>\n+    [DebuggerDisplay(\"{DebuggerDisplay,nq}\")]\n+    public class NewTeamDiscussion\n+    {\n+        /// <summary>\n+        /// Initializes a new instance of the <see cref=\"NewTeamDiscussion\"/> class.\n+        /// </summary>\n+        /// <param name=\"title\">The discussion post's title.</param>\n+        /// <param name=\"body\">The discussion post's body text.</param>\n+        public NewTeamDiscussion(string title, string body)\n+        {\n+            Title = title;\n+            Body = body;\n+        }\n+\n+        /// <summary>\n+        /// The discussion post's title (required).\n+        /// </summary>\n+        public string Title { get; set; }\n+\n+        /// <summary>\n+        /// The discussion post's body text (required).\n+        /// </summary>\n+        public string Body { get; set; }",
        "comment_created_at": "2018-11-15T11:42:18+00:00",
        "comment_author": "ryangribble",
        "comment_body": "Mandatory field which gets set via the `ctor`, so this property should be `private set`\r\n\r\n```suggestion\r\n        public string Body { get; private set; }\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "58357358",
    "pr_number": 1141,
    "pr_file": "Octokit/Models/Request/Enterprise/StartMigrationRequest.cs",
    "created_at": "2016-04-04T10:43:24+00:00",
    "commented_code": "+\ufeffusing System.Collections.Generic;\n+using System.Diagnostics;\n+using System.Globalization;\n+\n+namespace Octokit\n+{\n+    /// <summary>\n+    /// Request body for starting a migration.\n+    /// </summary>\n+    /// <remarks>\n+    /// See <a href=\"https://developer.github.com/v3/migration/migrations/#start-a-migration\">docs</a>\n+    /// for more information.\n+    /// </remarks>\n+    [DebuggerDisplay(\"{DebuggerDisplay,nq}\")]\n+    public class StartMigrationRequest\n+    {\n+        /// <summary>\n+        /// Parameter-less constructor needed for SimpleJsonSerializer.\n+        /// </summary>\n+        public StartMigrationRequest()\n+        { }\n+\n+        public StartMigrationRequest(\n+            IReadOnlyList<string> repositories\n+            ) :\n+            this(repositories, false, false)\n+        { }\n+\n+        public StartMigrationRequest(",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "58357358",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1141,
        "pr_file": "Octokit/Models/Request/Enterprise/StartMigrationRequest.cs",
        "discussion_id": "58357358",
        "commented_code": "@@ -0,0 +1,70 @@\n+\ufeffusing System.Collections.Generic;\n+using System.Diagnostics;\n+using System.Globalization;\n+\n+namespace Octokit\n+{\n+    /// <summary>\n+    /// Request body for starting a migration.\n+    /// </summary>\n+    /// <remarks>\n+    /// See <a href=\"https://developer.github.com/v3/migration/migrations/#start-a-migration\">docs</a>\n+    /// for more information.\n+    /// </remarks>\n+    [DebuggerDisplay(\"{DebuggerDisplay,nq}\")]\n+    public class StartMigrationRequest\n+    {\n+        /// <summary>\n+        /// Parameter-less constructor needed for SimpleJsonSerializer.\n+        /// </summary>\n+        public StartMigrationRequest()\n+        { }\n+\n+        public StartMigrationRequest(\n+            IReadOnlyList<string> repositories\n+            ) :\n+            this(repositories, false, false)\n+        { }\n+\n+        public StartMigrationRequest(",
        "comment_created_at": "2016-04-04T10:43:24+00:00",
        "comment_author": "ryangribble",
        "comment_body": "Id say this ctor can be ditched.  If we just provide one where you specify repositories (and the 2 bools are default to false) and one where you specify all 3 parameters, I think that is enough...\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "150509966",
    "pr_number": 1694,
    "pr_file": "Octokit.Tests.Integration/Clients/ReferencesClientTests.cs",
    "created_at": "2017-11-13T11:18:05+00:00",
    "commented_code": "Assert.NotEmpty(list);\n     }\n \n+    [IntegrationTest]\n+    public async Task ReturnsCorrectCountOfReferencesWithStart()\n+    {\n+        var options = new ApiOptions\n+        {\n+            PageSize = 5,\n+            PageCount = 1,\n+            StartPage = 2\n+        };\n+\n+        var references = await _fixture.GetAll(\"octokit\", \"octokit.net\", options);\n+\n+        Assert.Equal(5, references.Count);\n+    }\n+\n+    [IntegrationTest]\n+    public async Task ReturnsCorrectCountOfReferencesWithoutStart()\n+    {\n+        var options = new ApiOptions\n+        {\n+            PageSize = 5,\n+            PageCount = 1\n+        };\n+\n+        var references = await _fixture.GetAll(\"octokit\", \"octokit.net\", options);\n+\n+        Assert.Equal(5, references.Count);\n+    }\n+\n+    [IntegrationTest]\n+    public async Task ReturnsDistinctReferencesBasedOnStartPage()\n+    {\n+        var startOptions = new ApiOptions\n+        {\n+            PageSize = 5,\n+            PageCount = 1\n+        };\n+\n+        var skipStartOptions = new ApiOptions\n+        {\n+            PageSize = 5,\n+            PageCount = 1,\n+            StartPage = 2\n+        };\n+\n+        var firstRefsPage = await _fixture.GetAll(\"octokit\", \"octokit.net\", startOptions);\n+        var secondRefsPage = await _fixture.GetAll(\"octokit\", \"octokit.net\", skipStartOptions);\n+\n+        foreach (var r1 in firstRefsPage)",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "150509966",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1694,
        "pr_file": "Octokit.Tests.Integration/Clients/ReferencesClientTests.cs",
        "discussion_id": "150509966",
        "commented_code": "@@ -63,6 +63,61 @@ public ReferencesClientTests()\n         Assert.NotEmpty(list);\n     }\n \n+    [IntegrationTest]\n+    public async Task ReturnsCorrectCountOfReferencesWithStart()\n+    {\n+        var options = new ApiOptions\n+        {\n+            PageSize = 5,\n+            PageCount = 1,\n+            StartPage = 2\n+        };\n+\n+        var references = await _fixture.GetAll(\"octokit\", \"octokit.net\", options);\n+\n+        Assert.Equal(5, references.Count);\n+    }\n+\n+    [IntegrationTest]\n+    public async Task ReturnsCorrectCountOfReferencesWithoutStart()\n+    {\n+        var options = new ApiOptions\n+        {\n+            PageSize = 5,\n+            PageCount = 1\n+        };\n+\n+        var references = await _fixture.GetAll(\"octokit\", \"octokit.net\", options);\n+\n+        Assert.Equal(5, references.Count);\n+    }\n+\n+    [IntegrationTest]\n+    public async Task ReturnsDistinctReferencesBasedOnStartPage()\n+    {\n+        var startOptions = new ApiOptions\n+        {\n+            PageSize = 5,\n+            PageCount = 1\n+        };\n+\n+        var skipStartOptions = new ApiOptions\n+        {\n+            PageSize = 5,\n+            PageCount = 1,\n+            StartPage = 2\n+        };\n+\n+        var firstRefsPage = await _fixture.GetAll(\"octokit\", \"octokit.net\", startOptions);\n+        var secondRefsPage = await _fixture.GetAll(\"octokit\", \"octokit.net\", skipStartOptions);\n+\n+        foreach (var r1 in firstRefsPage)",
        "comment_created_at": "2017-11-13T11:18:05+00:00",
        "comment_author": "ryangribble",
        "comment_body": "The nested loops are a bit clunky, is there a more succinct way to express this?  \r\n\r\neg `Assert.False(firstRefsPage.Any(x => secondRefsPage.Contains(x)));`",
        "pr_file_module": null
      },
      {
        "comment_id": "153958058",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1694,
        "pr_file": "Octokit.Tests.Integration/Clients/ReferencesClientTests.cs",
        "discussion_id": "150509966",
        "commented_code": "@@ -63,6 +63,61 @@ public ReferencesClientTests()\n         Assert.NotEmpty(list);\n     }\n \n+    [IntegrationTest]\n+    public async Task ReturnsCorrectCountOfReferencesWithStart()\n+    {\n+        var options = new ApiOptions\n+        {\n+            PageSize = 5,\n+            PageCount = 1,\n+            StartPage = 2\n+        };\n+\n+        var references = await _fixture.GetAll(\"octokit\", \"octokit.net\", options);\n+\n+        Assert.Equal(5, references.Count);\n+    }\n+\n+    [IntegrationTest]\n+    public async Task ReturnsCorrectCountOfReferencesWithoutStart()\n+    {\n+        var options = new ApiOptions\n+        {\n+            PageSize = 5,\n+            PageCount = 1\n+        };\n+\n+        var references = await _fixture.GetAll(\"octokit\", \"octokit.net\", options);\n+\n+        Assert.Equal(5, references.Count);\n+    }\n+\n+    [IntegrationTest]\n+    public async Task ReturnsDistinctReferencesBasedOnStartPage()\n+    {\n+        var startOptions = new ApiOptions\n+        {\n+            PageSize = 5,\n+            PageCount = 1\n+        };\n+\n+        var skipStartOptions = new ApiOptions\n+        {\n+            PageSize = 5,\n+            PageCount = 1,\n+            StartPage = 2\n+        };\n+\n+        var firstRefsPage = await _fixture.GetAll(\"octokit\", \"octokit.net\", startOptions);\n+        var secondRefsPage = await _fixture.GetAll(\"octokit\", \"octokit.net\", skipStartOptions);\n+\n+        foreach (var r1 in firstRefsPage)",
        "comment_created_at": "2017-11-30T00:39:54+00:00",
        "comment_author": "gdziadkiewicz",
        "comment_body": "Changed it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "187787460",
    "pr_number": 1802,
    "pr_file": "Octokit/Models/Request/LabelUpdate.cs",
    "created_at": "2018-05-13T02:29:26+00:00",
    "commented_code": "/// </summary>\n         /// <param name=\"name\">The name of the label.</param>\n         /// <param name=\"color\">The color of the label.</param>\n-        public LabelUpdate(string name, string color)\n+        /// <param name=\"description\">The description of the label.</param>\n+        public LabelUpdate(string name, string color, string description = null)",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "187787460",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1802,
        "pr_file": "Octokit/Models/Request/LabelUpdate.cs",
        "discussion_id": "187787460",
        "commented_code": "@@ -18,13 +18,15 @@ public class LabelUpdate\n         /// </summary>\n         /// <param name=\"name\">The name of the label.</param>\n         /// <param name=\"color\">The color of the label.</param>\n-        public LabelUpdate(string name, string color)\n+        /// <param name=\"description\">The description of the label.</param>\n+        public LabelUpdate(string name, string color, string description = null)",
        "comment_created_at": "2018-05-13T02:29:26+00:00",
        "comment_author": "ryangribble",
        "comment_body": "To be consistent with the rest of the library, the request model constructor should only take required parameters. Optional parameters can be set via object initializer pattern ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "852379574",
    "pr_number": 2310,
    "pr_file": "Octokit/Models/Response/OauthDeviceFlowResponse.cs",
    "created_at": "2022-04-18T20:09:58+00:00",
    "commented_code": "+\ufeffusing System.Collections.Generic;\n+using System.Diagnostics;\n+using System.Globalization;\n+\n+namespace Octokit\n+{\n+    [DebuggerDisplay(\"{DebuggerDisplay,nq}\")]\n+    public class OauthDeviceFlowResponse\n+    {\n+        public OauthDeviceFlowResponse() { }\n+\n+        public OauthDeviceFlowResponse(string deviceCode, string userCode, string verificationUri, int expiresIn, int interval)\n+        {\n+            DeviceCode = deviceCode;\n+            UserCode = userCode;\n+            VerificationUri = verificationUri;\n+            ExpiresIn = expiresIn;\n+            Interval = interval;\n+        }\n+\n+        /// <summary>\n+        /// The device verification code is 40 characters and used to verify the device.\n+        /// </summary>\n+        public string DeviceCode { get; protected set; }\n+\n+        /// <summary>\n+        /// The user verification code is displayed on the device so the user can enter the code in a browser. This code is 8 characters with a hyphen in the middle.\n+        /// </summary>\n+        public string UserCode { get; protected set; }\n+\n+        /// <summary>\n+        /// The verification URL where users need to enter the UserCode: https://github.com/login/device.\n+        /// </summary>\n+        public string VerificationUri { get; protected set; }\n+\n+        /// <summary>\n+        /// The number of seconds before the DeviceCode and UserCode expire. The default is 900 seconds or 15 minutes.\n+        /// </summary>\n+        public int ExpiresIn { get; protected set; }\n+\n+        /// <summary>\n+        /// The minimum number of seconds that must pass before you can make a new access token request (POST https://github.com/login/oauth/access_token) to complete the device authorization.\n+        /// For example, if the interval is 5, then you cannot make a new request until 5 seconds pass. If you make more than one request over 5 seconds, then you will hit the rate limit\n+        /// and receive a slow_down error.\n+        /// </summary>\n+        public int Interval { get; protected set; }",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "852379574",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 2310,
        "pr_file": "Octokit/Models/Response/OauthDeviceFlowResponse.cs",
        "discussion_id": "852379574",
        "commented_code": "@@ -0,0 +1,61 @@\n+\ufeffusing System.Collections.Generic;\n+using System.Diagnostics;\n+using System.Globalization;\n+\n+namespace Octokit\n+{\n+    [DebuggerDisplay(\"{DebuggerDisplay,nq}\")]\n+    public class OauthDeviceFlowResponse\n+    {\n+        public OauthDeviceFlowResponse() { }\n+\n+        public OauthDeviceFlowResponse(string deviceCode, string userCode, string verificationUri, int expiresIn, int interval)\n+        {\n+            DeviceCode = deviceCode;\n+            UserCode = userCode;\n+            VerificationUri = verificationUri;\n+            ExpiresIn = expiresIn;\n+            Interval = interval;\n+        }\n+\n+        /// <summary>\n+        /// The device verification code is 40 characters and used to verify the device.\n+        /// </summary>\n+        public string DeviceCode { get; protected set; }\n+\n+        /// <summary>\n+        /// The user verification code is displayed on the device so the user can enter the code in a browser. This code is 8 characters with a hyphen in the middle.\n+        /// </summary>\n+        public string UserCode { get; protected set; }\n+\n+        /// <summary>\n+        /// The verification URL where users need to enter the UserCode: https://github.com/login/device.\n+        /// </summary>\n+        public string VerificationUri { get; protected set; }\n+\n+        /// <summary>\n+        /// The number of seconds before the DeviceCode and UserCode expire. The default is 900 seconds or 15 minutes.\n+        /// </summary>\n+        public int ExpiresIn { get; protected set; }\n+\n+        /// <summary>\n+        /// The minimum number of seconds that must pass before you can make a new access token request (POST https://github.com/login/oauth/access_token) to complete the device authorization.\n+        /// For example, if the interval is 5, then you cannot make a new request until 5 seconds pass. If you make more than one request over 5 seconds, then you will hit the rate limit\n+        /// and receive a slow_down error.\n+        /// </summary>\n+        public int Interval { get; protected set; }",
        "comment_created_at": "2022-04-18T20:09:58+00:00",
        "comment_author": "nickfloyd",
        "comment_body": "These should be able to be made `private` given everything seems to be encapsulated in this class itself and nothing is being derived.\r\n\r\n```suggestion\r\n        public string DeviceCode { get; private set; }\r\n\r\n        /// <summary>\r\n        /// The user verification code is displayed on the device so the user can enter the code in a browser. This code is 8 characters with a hyphen in the middle.\r\n        /// </summary>\r\n        public string UserCode { get; private set; }\r\n\r\n        /// <summary>\r\n        /// The verification URL where users need to enter the UserCode: https://github.com/login/device.\r\n        /// </summary>\r\n        public string VerificationUri { get; private set; }\r\n\r\n        /// <summary>\r\n        /// The number of seconds before the DeviceCode and UserCode expire. The default is 900 seconds or 15 minutes.\r\n        /// </summary>\r\n        public int ExpiresIn { get; private set; }\r\n\r\n        /// <summary>\r\n        /// The minimum number of seconds that must pass before you can make a new access token request (POST https://github.com/login/oauth/access_token) to complete the device authorization.\r\n        /// For example, if the interval is 5, then you cannot make a new request until 5 seconds pass. If you make more than one request over 5 seconds, then you will hit the rate limit\r\n        /// and receive a slow_down error.\r\n        /// </summary>\r\n        public int Interval { get; private set; }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "854348221",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 2310,
        "pr_file": "Octokit/Models/Response/OauthDeviceFlowResponse.cs",
        "discussion_id": "852379574",
        "commented_code": "@@ -0,0 +1,61 @@\n+\ufeffusing System.Collections.Generic;\n+using System.Diagnostics;\n+using System.Globalization;\n+\n+namespace Octokit\n+{\n+    [DebuggerDisplay(\"{DebuggerDisplay,nq}\")]\n+    public class OauthDeviceFlowResponse\n+    {\n+        public OauthDeviceFlowResponse() { }\n+\n+        public OauthDeviceFlowResponse(string deviceCode, string userCode, string verificationUri, int expiresIn, int interval)\n+        {\n+            DeviceCode = deviceCode;\n+            UserCode = userCode;\n+            VerificationUri = verificationUri;\n+            ExpiresIn = expiresIn;\n+            Interval = interval;\n+        }\n+\n+        /// <summary>\n+        /// The device verification code is 40 characters and used to verify the device.\n+        /// </summary>\n+        public string DeviceCode { get; protected set; }\n+\n+        /// <summary>\n+        /// The user verification code is displayed on the device so the user can enter the code in a browser. This code is 8 characters with a hyphen in the middle.\n+        /// </summary>\n+        public string UserCode { get; protected set; }\n+\n+        /// <summary>\n+        /// The verification URL where users need to enter the UserCode: https://github.com/login/device.\n+        /// </summary>\n+        public string VerificationUri { get; protected set; }\n+\n+        /// <summary>\n+        /// The number of seconds before the DeviceCode and UserCode expire. The default is 900 seconds or 15 minutes.\n+        /// </summary>\n+        public int ExpiresIn { get; protected set; }\n+\n+        /// <summary>\n+        /// The minimum number of seconds that must pass before you can make a new access token request (POST https://github.com/login/oauth/access_token) to complete the device authorization.\n+        /// For example, if the interval is 5, then you cannot make a new request until 5 seconds pass. If you make more than one request over 5 seconds, then you will hit the rate limit\n+        /// and receive a slow_down error.\n+        /// </summary>\n+        public int Interval { get; protected set; }",
        "comment_created_at": "2022-04-20T16:43:30+00:00",
        "comment_author": "palenshus",
        "comment_body": "Sounds good!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "69564849",
    "pr_number": 1410,
    "pr_file": "Octokit/Models/Response/RepositoryInvitation.cs",
    "created_at": "2016-07-05T13:46:00+00:00",
    "commented_code": "[DebuggerDisplay(\"{DebuggerDisplay,nq}\")]\n     public class RepositoryInvitation\n     {\n+        public RepositoryInvitation()",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "69564849",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1410,
        "pr_file": "Octokit/Models/Response/RepositoryInvitation.cs",
        "discussion_id": "69564849",
        "commented_code": "@@ -14,6 +14,10 @@ public enum InvitationPermissionType\n     [DebuggerDisplay(\"{DebuggerDisplay,nq}\")]\n     public class RepositoryInvitation\n     {\n+        public RepositoryInvitation()",
        "comment_created_at": "2016-07-05T13:46:00+00:00",
        "comment_author": "ryangribble",
        "comment_body": "for consistency with all the other response class ctors, can you put this on a single line?\n\n`public RepositoryInvitation() { }`\n",
        "pr_file_module": null
      }
    ]
  }
]