[
  {
    "discussion_id": "57598830",
    "pr_number": 1185,
    "pr_file": "Octokit.Tests.Integration/Reactive/ObservableIssuesClientTests.cs",
    "created_at": "2016-03-28T17:16:33+00:00",
    "commented_code": "Assert.Equal(\"Modified integration test issue\", updateResult.Title);\n     }\n \n+     [IntegrationTest]\n+     public async Task CanLockAndUnlockIssues()\n+     {\n+         var newIssue = new NewIssue(\"Integration Test Issue\");\n+ \n+         var createResult = await _client.Create(_context.RepositoryOwner, _context.RepositoryName, newIssue);\n+         Assert.Equal(false, createResult.Locked);",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "57598830",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1185,
        "pr_file": "Octokit.Tests.Integration/Reactive/ObservableIssuesClientTests.cs",
        "discussion_id": "57598830",
        "commented_code": "@@ -72,6 +72,23 @@ public ObservableIssuesClientTests()\n         Assert.Equal(\"Modified integration test issue\", updateResult.Title);\n     }\n \n+     [IntegrationTest]\n+     public async Task CanLockAndUnlockIssues()\n+     {\n+         var newIssue = new NewIssue(\"Integration Test Issue\");\n+ \n+         var createResult = await _client.Create(_context.RepositoryOwner, _context.RepositoryName, newIssue);\n+         Assert.Equal(false, createResult.Locked);",
        "comment_created_at": "2016-03-28T17:16:33+00:00",
        "comment_author": "shiftkey",
        "comment_body": "`Assert.True` or `Assert.False` in this test too\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "88586441",
    "pr_number": 1501,
    "pr_file": "Octokit.Tests/Reactive/ObservableIssueCommentsClientTests.cs",
    "created_at": "2016-11-18T01:46:57+00:00",
    "commented_code": "client.GetAllForRepository(\"fake\", \"repo\", options);\n \n-                gitHubClient.Connection.Received(1).Get<List<IssueComment>>(\n-                    new Uri(\"repos/fake/repo/issues/comments\", UriKind.Relative), \n-                    Arg.Any<Dictionary<string, string>>(),\n-                    \"application/vnd.github.squirrel-girl-preview\");\n+                gitHubClient.Received().Issue.Comment.GetAllForRepository(\"fake\", \"repo\", request, options);",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "88586441",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1501,
        "pr_file": "Octokit.Tests/Reactive/ObservableIssueCommentsClientTests.cs",
        "discussion_id": "88586441",
        "commented_code": "@@ -89,10 +95,7 @@ public void RequestsCorrectUrlWithApiOptions()\n \n                 client.GetAllForRepository(\"fake\", \"repo\", options);\n \n-                gitHubClient.Connection.Received(1).Get<List<IssueComment>>(\n-                    new Uri(\"repos/fake/repo/issues/comments\", UriKind.Relative), \n-                    Arg.Any<Dictionary<string, string>>(),\n-                    \"application/vnd.github.squirrel-girl-preview\");\n+                gitHubClient.Received().Issue.Comment.GetAllForRepository(\"fake\", \"repo\", request, options);",
        "comment_created_at": "2016-11-18T01:46:57+00:00",
        "comment_author": "ryangribble",
        "comment_body": "Id say this is the one failing, if you have a look at what the previous code was\n",
        "pr_file_module": null
      },
      {
        "comment_id": "89104726",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1501,
        "pr_file": "Octokit.Tests/Reactive/ObservableIssueCommentsClientTests.cs",
        "discussion_id": "88586441",
        "commented_code": "@@ -89,10 +95,7 @@ public void RequestsCorrectUrlWithApiOptions()\n \n                 client.GetAllForRepository(\"fake\", \"repo\", options);\n \n-                gitHubClient.Connection.Received(1).Get<List<IssueComment>>(\n-                    new Uri(\"repos/fake/repo/issues/comments\", UriKind.Relative), \n-                    Arg.Any<Dictionary<string, string>>(),\n-                    \"application/vnd.github.squirrel-girl-preview\");\n+                gitHubClient.Received().Issue.Comment.GetAllForRepository(\"fake\", \"repo\", request, options);",
        "comment_created_at": "2016-11-22T12:26:31+00:00",
        "comment_author": "ryangribble",
        "comment_body": "These tests aren't right.  They arent failing but they also aren't correct.  It may be something to do with the multiple nested subclients on the end of the `.Received()` call\r\n\r\nbut this observable method doesnt actually call into the `IGitHubClient` method, it calls the `_connection.GetAndFlattenPages()` method and thus this test should be checking for `gitHubClient.Connection.Received(1).Get....`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "196788042",
    "pr_number": 1813,
    "pr_file": "Octokit.Tests.Integration/Clients/RepositoriesClientTests.cs",
    "created_at": "2018-06-20T13:54:13+00:00",
    "commented_code": "var transferred = await github.Repository.Get(newOwner, context.RepositoryName);\n             }\n         }\n-\n+        \n         [IntegrationTest]\n-        public async Task CanTransferUserRepoToOrg()\n+        public async Task TransfersFromOrgToUserWithId()\n         {\n             var github = Helper.GetAuthenticatedClient();\n             var newRepo = new NewRepository(Helper.MakeNameWithTimestamp(\"transferred-repo\"));\n-            var newOwner = Helper.Organization;\n-            using (var context = await github.CreateRepositoryContext(newRepo))\n+            var newOwner = Helper.UserName;\n+            using (var context = await github.CreateRepositoryContext(Helper.Organization, newRepo))\n             {\n                 var transfer = new RepositoryTransfer(newOwner);\n-                await github.Repository.Transfer(context.RepositoryOwner, context.RepositoryName, transfer);\n-                var transferred = await github.Repository.Get(newOwner, context.RepositoryName);\n+                await github.Repository.Transfer(context.RepositoryId, transfer);\n+                var transferred = await github.Repository.Get(context.RepositoryId);",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "196788042",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1813,
        "pr_file": "Octokit.Tests.Integration/Clients/RepositoriesClientTests.cs",
        "discussion_id": "196788042",
        "commented_code": "@@ -1697,57 +1697,42 @@ public class TheTransferByNameMethod\n                 var transferred = await github.Repository.Get(newOwner, context.RepositoryName);\n             }\n         }\n-\n+        \n         [IntegrationTest]\n-        public async Task CanTransferUserRepoToOrg()\n+        public async Task TransfersFromOrgToUserWithId()\n         {\n             var github = Helper.GetAuthenticatedClient();\n             var newRepo = new NewRepository(Helper.MakeNameWithTimestamp(\"transferred-repo\"));\n-            var newOwner = Helper.Organization;\n-            using (var context = await github.CreateRepositoryContext(newRepo))\n+            var newOwner = Helper.UserName;\n+            using (var context = await github.CreateRepositoryContext(Helper.Organization, newRepo))\n             {\n                 var transfer = new RepositoryTransfer(newOwner);\n-                await github.Repository.Transfer(context.RepositoryOwner, context.RepositoryName, transfer);\n-                var transferred = await github.Repository.Get(newOwner, context.RepositoryName);\n+                await github.Repository.Transfer(context.RepositoryId, transfer);\n+                var transferred = await github.Repository.Get(context.RepositoryId);",
        "comment_created_at": "2018-06-20T13:54:13+00:00",
        "comment_author": "ryangribble",
        "comment_body": "eventhough this would throw an exception if the repo didnt exist under the requested owner (thus failing the test), I think i'd still prefer to see some kind of `Assert` in each test, for consistency.\r\n\r\neg: `Assert.Equal(newOwner, transferred.Owner.Login);`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "67134767",
    "pr_number": 1339,
    "pr_file": "Octokit.Tests.Integration/Clients/IssuesClientTests.cs",
    "created_at": "2016-06-15T10:09:03+00:00",
    "commented_code": "}\n \n     [IntegrationTest]\n-    public async Task CanCreateRetrieveAndCloseIssue()\n+    public async Task CanCreateAssignRetrieveAndCloseIssue()\n     {\n         var newIssue = new NewIssue(\"a test issue\") { Body = \"A new unassigned issue\" };\n+        newIssue.Labels.Add(\"test\");\n+        newIssue.Assignees.Add(_context.RepositoryOwner);\n+\n         var issue = await _issuesClient.Create(_context.RepositoryOwner, _context.RepositoryName, newIssue);\n         try\n         {\n             Assert.NotNull(issue);\n+            Assert.True(issue.Assignees.All(x => x.Login == _context.RepositoryOwner));\n \n             var retrieved = await _issuesClient.Get(_context.RepositoryOwner, _context.RepositoryName, issue.Number);\n             var all = await _issuesClient.GetAllForRepository(_context.RepositoryOwner, _context.RepositoryName);\n             Assert.NotNull(retrieved);\n-            Assert.True(all.Any(i => i.Number == retrieved.Number));\n+            Assert.True(retrieved.Assignees.Count == 1);\n+            Assert.True(retrieved.Assignees[0].Login == _context.RepositoryOwner);\n+            Assert.True(all.Any(i => i.Number == retrieved.Number && i.Assignees.Count == 1 && i.Assignees[0].Login == _context.RepositoryOwner));\n         }\n         finally\n         {\n             var closed = _issuesClient.Update(_context.RepositoryOwner, _context.RepositoryName, issue.Number, new IssueUpdate { State = ItemState.Closed }).Result;\n             Assert.NotNull(closed);\n+            Assert.True(closed.Assignees.Count == 1);",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "67134767",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1339,
        "pr_file": "Octokit.Tests.Integration/Clients/IssuesClientTests.cs",
        "discussion_id": "67134767",
        "commented_code": "@@ -86,23 +87,31 @@ public IssuesClientTests()\n     }\n \n     [IntegrationTest]\n-    public async Task CanCreateRetrieveAndCloseIssue()\n+    public async Task CanCreateAssignRetrieveAndCloseIssue()\n     {\n         var newIssue = new NewIssue(\"a test issue\") { Body = \"A new unassigned issue\" };\n+        newIssue.Labels.Add(\"test\");\n+        newIssue.Assignees.Add(_context.RepositoryOwner);\n+\n         var issue = await _issuesClient.Create(_context.RepositoryOwner, _context.RepositoryName, newIssue);\n         try\n         {\n             Assert.NotNull(issue);\n+            Assert.True(issue.Assignees.All(x => x.Login == _context.RepositoryOwner));\n \n             var retrieved = await _issuesClient.Get(_context.RepositoryOwner, _context.RepositoryName, issue.Number);\n             var all = await _issuesClient.GetAllForRepository(_context.RepositoryOwner, _context.RepositoryName);\n             Assert.NotNull(retrieved);\n-            Assert.True(all.Any(i => i.Number == retrieved.Number));\n+            Assert.True(retrieved.Assignees.Count == 1);\n+            Assert.True(retrieved.Assignees[0].Login == _context.RepositoryOwner);\n+            Assert.True(all.Any(i => i.Number == retrieved.Number && i.Assignees.Count == 1 && i.Assignees[0].Login == _context.RepositoryOwner));\n         }\n         finally\n         {\n             var closed = _issuesClient.Update(_context.RepositoryOwner, _context.RepositoryName, issue.Number, new IssueUpdate { State = ItemState.Closed }).Result;\n             Assert.NotNull(closed);\n+            Assert.True(closed.Assignees.Count == 1);",
        "comment_created_at": "2016-06-15T10:09:03+00:00",
        "comment_author": "shiftkey",
        "comment_body": ":lipstick: `Assert.Equal(1, closed.Assignees.Count)` is nicer here because we get both values when it fails.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "67134843",
    "pr_number": 1339,
    "pr_file": "Octokit.Tests.Integration/Clients/IssuesClientTests.cs",
    "created_at": "2016-06-15T10:09:39+00:00",
    "commented_code": "}\n \n     [IntegrationTest]\n-    public async Task CanCreateRetrieveAndCloseIssue()\n+    public async Task CanCreateAssignRetrieveAndCloseIssue()\n     {\n         var newIssue = new NewIssue(\"a test issue\") { Body = \"A new unassigned issue\" };\n+        newIssue.Labels.Add(\"test\");\n+        newIssue.Assignees.Add(_context.RepositoryOwner);\n+\n         var issue = await _issuesClient.Create(_context.RepositoryOwner, _context.RepositoryName, newIssue);\n         try\n         {\n             Assert.NotNull(issue);\n+            Assert.True(issue.Assignees.All(x => x.Login == _context.RepositoryOwner));\n \n             var retrieved = await _issuesClient.Get(_context.RepositoryOwner, _context.RepositoryName, issue.Number);\n             var all = await _issuesClient.GetAllForRepository(_context.RepositoryOwner, _context.RepositoryName);\n             Assert.NotNull(retrieved);\n-            Assert.True(all.Any(i => i.Number == retrieved.Number));\n+            Assert.True(retrieved.Assignees.Count == 1);\n+            Assert.True(retrieved.Assignees[0].Login == _context.RepositoryOwner);\n+            Assert.True(all.Any(i => i.Number == retrieved.Number && i.Assignees.Count == 1 && i.Assignees[0].Login == _context.RepositoryOwner));\n         }\n         finally\n         {\n             var closed = _issuesClient.Update(_context.RepositoryOwner, _context.RepositoryName, issue.Number, new IssueUpdate { State = ItemState.Closed }).Result;\n             Assert.NotNull(closed);\n+            Assert.True(closed.Assignees.Count == 1);\n+            Assert.True(closed.Assignees[0].Login == _context.RepositoryOwner);",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "67134843",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1339,
        "pr_file": "Octokit.Tests.Integration/Clients/IssuesClientTests.cs",
        "discussion_id": "67134843",
        "commented_code": "@@ -86,23 +87,31 @@ public IssuesClientTests()\n     }\n \n     [IntegrationTest]\n-    public async Task CanCreateRetrieveAndCloseIssue()\n+    public async Task CanCreateAssignRetrieveAndCloseIssue()\n     {\n         var newIssue = new NewIssue(\"a test issue\") { Body = \"A new unassigned issue\" };\n+        newIssue.Labels.Add(\"test\");\n+        newIssue.Assignees.Add(_context.RepositoryOwner);\n+\n         var issue = await _issuesClient.Create(_context.RepositoryOwner, _context.RepositoryName, newIssue);\n         try\n         {\n             Assert.NotNull(issue);\n+            Assert.True(issue.Assignees.All(x => x.Login == _context.RepositoryOwner));\n \n             var retrieved = await _issuesClient.Get(_context.RepositoryOwner, _context.RepositoryName, issue.Number);\n             var all = await _issuesClient.GetAllForRepository(_context.RepositoryOwner, _context.RepositoryName);\n             Assert.NotNull(retrieved);\n-            Assert.True(all.Any(i => i.Number == retrieved.Number));\n+            Assert.True(retrieved.Assignees.Count == 1);\n+            Assert.True(retrieved.Assignees[0].Login == _context.RepositoryOwner);\n+            Assert.True(all.Any(i => i.Number == retrieved.Number && i.Assignees.Count == 1 && i.Assignees[0].Login == _context.RepositoryOwner));\n         }\n         finally\n         {\n             var closed = _issuesClient.Update(_context.RepositoryOwner, _context.RepositoryName, issue.Number, new IssueUpdate { State = ItemState.Closed }).Result;\n             Assert.NotNull(closed);\n+            Assert.True(closed.Assignees.Count == 1);\n+            Assert.True(closed.Assignees[0].Login == _context.RepositoryOwner);",
        "comment_created_at": "2016-06-15T10:09:39+00:00",
        "comment_author": "shiftkey",
        "comment_body": ":lipstick: `Assert.Equal(_context.RepositoryOwner, closed.Assignees[0].Login)` will give us both values if this test fails\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "67134905",
    "pr_number": 1339,
    "pr_file": "Octokit.Tests.Integration/Clients/IssuesClientTests.cs",
    "created_at": "2016-06-15T10:10:08+00:00",
    "commented_code": "}\n \n     [IntegrationTest]\n+    public async Task CanRetrieveIssueWithMultipleAssignees()\n+    {\n+        var issue = await _issuesClient.Get(\"octokit\", \"octokit.net\", 1171);\n+\n+        Assert.True(issue.Assignees.Count == 2);",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "67134905",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1339,
        "pr_file": "Octokit.Tests.Integration/Clients/IssuesClientTests.cs",
        "discussion_id": "67134905",
        "commented_code": "@@ -233,6 +242,22 @@ public IssuesClientTests()\n     }\n \n     [IntegrationTest]\n+    public async Task CanRetrieveIssueWithMultipleAssignees()\n+    {\n+        var issue = await _issuesClient.Get(\"octokit\", \"octokit.net\", 1171);\n+\n+        Assert.True(issue.Assignees.Count == 2);",
        "comment_created_at": "2016-06-15T10:10:08+00:00",
        "comment_author": "shiftkey",
        "comment_body": ":lipstick: `Assert.Equal(2, issue.Assignees.Count)` to get the value if this test fails\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "77420527",
    "pr_number": 1443,
    "pr_file": "Octokit.Tests.Integration/Clients/RepositoryBranchesClientTests.cs",
    "created_at": "2016-09-02T22:30:07+00:00",
    "commented_code": "}\n         }\n     }\n+\n+    public class TheGetRequiredStatusChecksMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheGetRequiredStatusChecksMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecks()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheUpdateRequiredStatusChecksMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheUpdateRequiredStatusChecksMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdateRequiredStatusChecks()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheDeleteRequiredStatusChecksMethod\n+    {\n+        IGitHubClient _github;\n+        IRepositoryBranchesClient _client;\n+\n+        public TheDeleteRequiredStatusChecksMethod()\n+        {\n+            _github = Helper.GetAuthenticatedClient();\n+            _client = _github.Repository.Branch;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecks()\n+        {\n+            using (var context = await _github.CreateRepositoryWithProtectedBranch())\n+            {\n+                var repoOwner = context.RepositoryOwner;\n+                var repoName = context.RepositoryName;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksWithRepositoryId()\n+        {\n+            using (var context = await _github.CreateRepositoryWithProtectedBranch())\n+            {\n+                var repoId = context.RepositoryId;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoId, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksForOrgRepo()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoOwner = context.RepositoryContext.RepositoryOwner;\n+                var repoName = context.RepositoryContext.RepositoryName;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksForOrgRepoWithRepositoryId()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoId = context.RepositoryContext.RepositoryId;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoId, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+    }\n+\n+    public class TheGetRequiredStatusChecksContextsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheGetRequiredStatusChecksContextsMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContexts()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContextsWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContextsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContextsForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheUpdateRequiredStatusChecksContextsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheUpdateRequiredStatusChecksContextsMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdateRequiredStatusChecksContexts()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksContextsWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksContextsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksContextsForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheAddRequiredStatusChecksContextsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheAddRequiredStatusChecksContextsMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task AddRequiredStatusChecksContexts()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.AddRequiredStatusChecksContexts(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(4, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task AddRequiredStatusChecksContextsWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.AddRequiredStatusChecksContexts(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(4, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task AddRequiredStatusChecksContextsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.AddRequiredStatusChecksContexts(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(4, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task AddRequiredStatusChecksContextsForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.AddRequiredStatusChecksContexts(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(4, requiredStatusChecksContexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheDeleteRequiredStatusChecksContextsMethod\n+    {\n+        IGitHubClient _github;\n+        IRepositoryBranchesClient _client;\n+\n+        public TheDeleteRequiredStatusChecksContextsMethod()\n+        {\n+            _github = Helper.GetAuthenticatedClient();\n+            _client = _github.Repository.Branch;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksContexts()\n+        {\n+            using (var context = await _github.CreateRepositoryWithProtectedBranch())\n+            {\n+                var repoOwner = context.RepositoryOwner;\n+                var repoName = context.RepositoryName;\n+                var contextsToRemove = new List<string>() { \"build\" };\n+                var deleted = await _client.DeleteRequiredStatusChecksContexts(repoOwner, repoName, \"master\", contextsToRemove);\n+\n+                Assert.NotNull(deleted);\n+                Assert.True(deleted.Contains(\"test\"));\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksContextsWithRepositoryId()\n+        {\n+            using (var context = await _github.CreateRepositoryWithProtectedBranch())\n+            {\n+                var repoId = context.RepositoryId;\n+                var contextsToRemove = new List<string>() { \"build\" };\n+                var deleted = await _client.DeleteRequiredStatusChecksContexts(repoId, \"master\", contextsToRemove);\n+\n+                Assert.NotNull(deleted);\n+                Assert.True(deleted.Contains(\"test\"));\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksContextsForOrgRepo()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoOwner = context.RepositoryContext.RepositoryOwner;\n+                var repoName = context.RepositoryContext.RepositoryName;\n+                var contextsToRemove = new List<string>() { \"build\" };\n+                var deleted = await _client.DeleteRequiredStatusChecksContexts(repoOwner, repoName, \"master\", contextsToRemove);\n+\n+                Assert.NotNull(deleted);\n+                Assert.True(deleted.Contains(\"test\"));\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksContextsForOrgRepoWithRepositoryId()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoId = context.RepositoryContext.RepositoryId;\n+                var contextsToRemove = new List<string>() { \"build\" };\n+                var deleted = await _client.DeleteRequiredStatusChecksContexts(repoId, \"master\", contextsToRemove);\n+\n+                Assert.NotNull(deleted);\n+                Assert.True(deleted.Contains(\"test\"));\n+            }\n+        }\n+    }\n+\n+    public class TheGetProtectedBranchRestrictionsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheGetProtectedBranchRestrictionsMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequirProtectedBranchRestrictionsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var restrictions = await _client.GetProtectedBranchRestrictions(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(restrictions);\n+            Assert.NotNull(restrictions.Teams);\n+            Assert.NotNull(restrictions.Users);\n+            Assert.Equal(1, restrictions.Teams.Count);\n+            Assert.Equal(0, restrictions.Users.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsProtectedBranchRestrictionsForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var restrictions = await _client.GetProtectedBranchRestrictions(repoId, \"master\");\n+\n+            Assert.NotNull(restrictions);\n+            Assert.NotNull(restrictions.Teams);\n+            Assert.NotNull(restrictions.Users);\n+            Assert.Equal(1, restrictions.Teams.Count);\n+            Assert.Equal(0, restrictions.Users.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheDeleteProtectedBranchRestrictionsMethod\n+    {\n+        IGitHubClient _github;\n+        IRepositoryBranchesClient _client;\n+\n+        public TheDeleteProtectedBranchRestrictionsMethod()\n+        {\n+            _github = Helper.GetAuthenticatedClient();\n+            _client = _github.Repository.Branch;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRProtectedBranchRestrictionsForOrgRepo()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoOwner = context.RepositoryContext.RepositoryOwner;\n+                var repoName = context.RepositoryContext.RepositoryName;\n+                var deleted = await _client.DeleteProtectedBranchRestrictions(repoOwner, repoName, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesProtectedBranchRestrictionsForOrgRepoWithRepositoryId()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoId = context.RepositoryContext.RepositoryId;\n+                var deleted = await _client.DeleteProtectedBranchRestrictions(repoId, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+    }\n+\n+    public class TheGetProtectedBranchTeamRestrictionsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheGetProtectedBranchTeamRestrictionsMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsProtectedBranchTeamRestrictionsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var restrictions = await _client.GetProtectedBranchTeamRestrictions(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(restrictions);\n+            Assert.Equal(1, restrictions.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsProtectedBranchTeamRestrictionsForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var restrictions = await _client.GetProtectedBranchTeamRestrictions(repoId, \"master\");\n+\n+            Assert.NotNull(restrictions);\n+            Assert.Equal(1, restrictions.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheSetProtectedBranchTeamRestrictionsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+        IGitHubClient _github;\n+\n+        public TheSetProtectedBranchTeamRestrictionsMethod()\n+        {\n+            _github = Helper.GetAuthenticatedClient();\n+            _client = _github.Repository.Branch;\n+\n+            _orgRepoContext = _github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task SetsProtectedBranchTeamRestrictionsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+\n+            var contextOrgTeam2 = await _github.CreateTeamContext(Helper.Organization, new NewTeam(Helper.MakeNameWithTimestamp(\"team2\")));\n+\n+            // Grant team push access to repo\n+            await _github.Organization.Team.AddRepository(\n+                contextOrgTeam2.TeamId,\n+                repoOwner,\n+                repoName,\n+                new RepositoryPermissionRequest(Permission.Push));\n+\n+            var newTeam = new BranchProtectionTeamCollection() { contextOrgTeam2.TeamName };\n+            var restrictions = await _client.SetProtectedBranchTeamRestrictions(repoOwner, repoName, \"master\", newTeam);\n+\n+            Assert.NotNull(restrictions);\n+            Assert.Equal(1, restrictions.Count);",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "77420527",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1443,
        "pr_file": "Octokit.Tests.Integration/Clients/RepositoryBranchesClientTests.cs",
        "discussion_id": "77420527",
        "commented_code": "@@ -543,4 +544,999 @@ public TheDeleteBranchProtectionMethod()\n             }\n         }\n     }\n+\n+    public class TheGetRequiredStatusChecksMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheGetRequiredStatusChecksMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecks()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheUpdateRequiredStatusChecksMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheUpdateRequiredStatusChecksMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdateRequiredStatusChecks()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheDeleteRequiredStatusChecksMethod\n+    {\n+        IGitHubClient _github;\n+        IRepositoryBranchesClient _client;\n+\n+        public TheDeleteRequiredStatusChecksMethod()\n+        {\n+            _github = Helper.GetAuthenticatedClient();\n+            _client = _github.Repository.Branch;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecks()\n+        {\n+            using (var context = await _github.CreateRepositoryWithProtectedBranch())\n+            {\n+                var repoOwner = context.RepositoryOwner;\n+                var repoName = context.RepositoryName;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksWithRepositoryId()\n+        {\n+            using (var context = await _github.CreateRepositoryWithProtectedBranch())\n+            {\n+                var repoId = context.RepositoryId;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoId, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksForOrgRepo()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoOwner = context.RepositoryContext.RepositoryOwner;\n+                var repoName = context.RepositoryContext.RepositoryName;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksForOrgRepoWithRepositoryId()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoId = context.RepositoryContext.RepositoryId;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoId, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+    }\n+\n+    public class TheGetRequiredStatusChecksContextsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheGetRequiredStatusChecksContextsMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContexts()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContextsWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContextsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContextsForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheUpdateRequiredStatusChecksContextsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheUpdateRequiredStatusChecksContextsMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdateRequiredStatusChecksContexts()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksContextsWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksContextsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksContextsForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheAddRequiredStatusChecksContextsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheAddRequiredStatusChecksContextsMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task AddRequiredStatusChecksContexts()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.AddRequiredStatusChecksContexts(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(4, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task AddRequiredStatusChecksContextsWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.AddRequiredStatusChecksContexts(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(4, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task AddRequiredStatusChecksContextsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.AddRequiredStatusChecksContexts(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(4, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task AddRequiredStatusChecksContextsForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.AddRequiredStatusChecksContexts(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(4, requiredStatusChecksContexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheDeleteRequiredStatusChecksContextsMethod\n+    {\n+        IGitHubClient _github;\n+        IRepositoryBranchesClient _client;\n+\n+        public TheDeleteRequiredStatusChecksContextsMethod()\n+        {\n+            _github = Helper.GetAuthenticatedClient();\n+            _client = _github.Repository.Branch;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksContexts()\n+        {\n+            using (var context = await _github.CreateRepositoryWithProtectedBranch())\n+            {\n+                var repoOwner = context.RepositoryOwner;\n+                var repoName = context.RepositoryName;\n+                var contextsToRemove = new List<string>() { \"build\" };\n+                var deleted = await _client.DeleteRequiredStatusChecksContexts(repoOwner, repoName, \"master\", contextsToRemove);\n+\n+                Assert.NotNull(deleted);\n+                Assert.True(deleted.Contains(\"test\"));\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksContextsWithRepositoryId()\n+        {\n+            using (var context = await _github.CreateRepositoryWithProtectedBranch())\n+            {\n+                var repoId = context.RepositoryId;\n+                var contextsToRemove = new List<string>() { \"build\" };\n+                var deleted = await _client.DeleteRequiredStatusChecksContexts(repoId, \"master\", contextsToRemove);\n+\n+                Assert.NotNull(deleted);\n+                Assert.True(deleted.Contains(\"test\"));\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksContextsForOrgRepo()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoOwner = context.RepositoryContext.RepositoryOwner;\n+                var repoName = context.RepositoryContext.RepositoryName;\n+                var contextsToRemove = new List<string>() { \"build\" };\n+                var deleted = await _client.DeleteRequiredStatusChecksContexts(repoOwner, repoName, \"master\", contextsToRemove);\n+\n+                Assert.NotNull(deleted);\n+                Assert.True(deleted.Contains(\"test\"));\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksContextsForOrgRepoWithRepositoryId()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoId = context.RepositoryContext.RepositoryId;\n+                var contextsToRemove = new List<string>() { \"build\" };\n+                var deleted = await _client.DeleteRequiredStatusChecksContexts(repoId, \"master\", contextsToRemove);\n+\n+                Assert.NotNull(deleted);\n+                Assert.True(deleted.Contains(\"test\"));\n+            }\n+        }\n+    }\n+\n+    public class TheGetProtectedBranchRestrictionsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheGetProtectedBranchRestrictionsMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequirProtectedBranchRestrictionsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var restrictions = await _client.GetProtectedBranchRestrictions(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(restrictions);\n+            Assert.NotNull(restrictions.Teams);\n+            Assert.NotNull(restrictions.Users);\n+            Assert.Equal(1, restrictions.Teams.Count);\n+            Assert.Equal(0, restrictions.Users.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsProtectedBranchRestrictionsForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var restrictions = await _client.GetProtectedBranchRestrictions(repoId, \"master\");\n+\n+            Assert.NotNull(restrictions);\n+            Assert.NotNull(restrictions.Teams);\n+            Assert.NotNull(restrictions.Users);\n+            Assert.Equal(1, restrictions.Teams.Count);\n+            Assert.Equal(0, restrictions.Users.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheDeleteProtectedBranchRestrictionsMethod\n+    {\n+        IGitHubClient _github;\n+        IRepositoryBranchesClient _client;\n+\n+        public TheDeleteProtectedBranchRestrictionsMethod()\n+        {\n+            _github = Helper.GetAuthenticatedClient();\n+            _client = _github.Repository.Branch;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRProtectedBranchRestrictionsForOrgRepo()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoOwner = context.RepositoryContext.RepositoryOwner;\n+                var repoName = context.RepositoryContext.RepositoryName;\n+                var deleted = await _client.DeleteProtectedBranchRestrictions(repoOwner, repoName, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesProtectedBranchRestrictionsForOrgRepoWithRepositoryId()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoId = context.RepositoryContext.RepositoryId;\n+                var deleted = await _client.DeleteProtectedBranchRestrictions(repoId, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+    }\n+\n+    public class TheGetProtectedBranchTeamRestrictionsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheGetProtectedBranchTeamRestrictionsMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsProtectedBranchTeamRestrictionsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var restrictions = await _client.GetProtectedBranchTeamRestrictions(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(restrictions);\n+            Assert.Equal(1, restrictions.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsProtectedBranchTeamRestrictionsForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var restrictions = await _client.GetProtectedBranchTeamRestrictions(repoId, \"master\");\n+\n+            Assert.NotNull(restrictions);\n+            Assert.Equal(1, restrictions.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheSetProtectedBranchTeamRestrictionsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+        IGitHubClient _github;\n+\n+        public TheSetProtectedBranchTeamRestrictionsMethod()\n+        {\n+            _github = Helper.GetAuthenticatedClient();\n+            _client = _github.Repository.Branch;\n+\n+            _orgRepoContext = _github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task SetsProtectedBranchTeamRestrictionsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+\n+            var contextOrgTeam2 = await _github.CreateTeamContext(Helper.Organization, new NewTeam(Helper.MakeNameWithTimestamp(\"team2\")));\n+\n+            // Grant team push access to repo\n+            await _github.Organization.Team.AddRepository(\n+                contextOrgTeam2.TeamId,\n+                repoOwner,\n+                repoName,\n+                new RepositoryPermissionRequest(Permission.Push));\n+\n+            var newTeam = new BranchProtectionTeamCollection() { contextOrgTeam2.TeamName };\n+            var restrictions = await _client.SetProtectedBranchTeamRestrictions(repoOwner, repoName, \"master\", newTeam);\n+\n+            Assert.NotNull(restrictions);\n+            Assert.Equal(1, restrictions.Count);",
        "comment_created_at": "2016-09-02T22:30:07+00:00",
        "comment_author": "ryangribble",
        "comment_body": "The branch protection team restrictions started off with 1 team in them, and this test (hopefully) change the protection to team2 instead.  but just asserting the count of team restrictions is 1 doesnt really prove that the update worked (what if it didnt work and the original team is the one that was returned?).  So perhaps assert on the team's name rather than just the count?\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "77420992",
    "pr_number": 1443,
    "pr_file": "Octokit.Tests.Integration/Clients/RepositoryBranchesClientTests.cs",
    "created_at": "2016-09-02T22:35:10+00:00",
    "commented_code": "}\n         }\n     }\n+\n+    public class TheGetRequiredStatusChecksMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheGetRequiredStatusChecksMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecks()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheUpdateRequiredStatusChecksMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheUpdateRequiredStatusChecksMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdateRequiredStatusChecks()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheDeleteRequiredStatusChecksMethod\n+    {\n+        IGitHubClient _github;\n+        IRepositoryBranchesClient _client;\n+\n+        public TheDeleteRequiredStatusChecksMethod()\n+        {\n+            _github = Helper.GetAuthenticatedClient();\n+            _client = _github.Repository.Branch;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecks()\n+        {\n+            using (var context = await _github.CreateRepositoryWithProtectedBranch())\n+            {\n+                var repoOwner = context.RepositoryOwner;\n+                var repoName = context.RepositoryName;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksWithRepositoryId()\n+        {\n+            using (var context = await _github.CreateRepositoryWithProtectedBranch())\n+            {\n+                var repoId = context.RepositoryId;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoId, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksForOrgRepo()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoOwner = context.RepositoryContext.RepositoryOwner;\n+                var repoName = context.RepositoryContext.RepositoryName;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksForOrgRepoWithRepositoryId()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoId = context.RepositoryContext.RepositoryId;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoId, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+    }\n+\n+    public class TheGetRequiredStatusChecksContextsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheGetRequiredStatusChecksContextsMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContexts()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContextsWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContextsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContextsForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheUpdateRequiredStatusChecksContextsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheUpdateRequiredStatusChecksContextsMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdateRequiredStatusChecksContexts()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksContextsWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksContextsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksContextsForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);",
    "repo_full_name": "octokit/octokit.net",
    "discussion_comments": [
      {
        "comment_id": "77420992",
        "repo_full_name": "octokit/octokit.net",
        "pr_number": 1443,
        "pr_file": "Octokit.Tests.Integration/Clients/RepositoryBranchesClientTests.cs",
        "discussion_id": "77420992",
        "commented_code": "@@ -543,4 +544,999 @@ public TheDeleteBranchProtectionMethod()\n             }\n         }\n     }\n+\n+    public class TheGetRequiredStatusChecksMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheGetRequiredStatusChecksMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecks()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var requiredStatusChecks = await _client.GetRequiredStatusChecks(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(2, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheUpdateRequiredStatusChecksMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheUpdateRequiredStatusChecksMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdateRequiredStatusChecks()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var update = new BranchProtectionRequiredStatusChecksUpdate(true, true, new[] { \"new\" });\n+            var requiredStatusChecks = await _client.UpdateRequiredStatusChecks(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecks);\n+            Assert.NotNull(requiredStatusChecks.Contexts);\n+            Assert.True(requiredStatusChecks.Contexts.Contains(\"new\"));\n+            Assert.True(requiredStatusChecks.IncludeAdmins);\n+            Assert.True(requiredStatusChecks.Strict);\n+            Assert.Equal(1, requiredStatusChecks.Contexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheDeleteRequiredStatusChecksMethod\n+    {\n+        IGitHubClient _github;\n+        IRepositoryBranchesClient _client;\n+\n+        public TheDeleteRequiredStatusChecksMethod()\n+        {\n+            _github = Helper.GetAuthenticatedClient();\n+            _client = _github.Repository.Branch;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecks()\n+        {\n+            using (var context = await _github.CreateRepositoryWithProtectedBranch())\n+            {\n+                var repoOwner = context.RepositoryOwner;\n+                var repoName = context.RepositoryName;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksWithRepositoryId()\n+        {\n+            using (var context = await _github.CreateRepositoryWithProtectedBranch())\n+            {\n+                var repoId = context.RepositoryId;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoId, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksForOrgRepo()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoOwner = context.RepositoryContext.RepositoryOwner;\n+                var repoName = context.RepositoryContext.RepositoryName;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoOwner, repoName, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+\n+        [IntegrationTest]\n+        public async Task DeletesRequiredStatusChecksForOrgRepoWithRepositoryId()\n+        {\n+            using (var context = await _github.CreateOrganizationRepositoryWithProtectedBranch())\n+            {\n+                var repoId = context.RepositoryContext.RepositoryId;\n+                var deleted = await _client.DeleteRequiredStatusChecks(repoId, \"master\");\n+\n+                Assert.True(deleted);\n+            }\n+        }\n+    }\n+\n+    public class TheGetRequiredStatusChecksContextsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheGetRequiredStatusChecksContextsMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContexts()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContextsWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContextsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoOwner, repoName, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task GetsRequiredStatusChecksContextsForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var requiredStatusChecksContexts = await _client.GetRequiredStatusChecksContexts(repoId, \"master\");\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        public void Dispose()\n+        {\n+            if (_userRepoContext != null)\n+                _userRepoContext.Dispose();\n+\n+            if (_orgRepoContext != null)\n+                _orgRepoContext.Dispose();\n+        }\n+    }\n+\n+    public class TheUpdateRequiredStatusChecksContextsMethod : IDisposable\n+    {\n+        IRepositoryBranchesClient _client;\n+        RepositoryContext _userRepoContext;\n+        OrganizationRepositoryWithTeamContext _orgRepoContext;\n+\n+        public TheUpdateRequiredStatusChecksContextsMethod()\n+        {\n+            var github = Helper.GetAuthenticatedClient();\n+            _client = github.Repository.Branch;\n+\n+            _userRepoContext = github.CreateRepositoryWithProtectedBranch().Result;\n+            _orgRepoContext = github.CreateOrganizationRepositoryWithProtectedBranch().Result;\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdateRequiredStatusChecksContexts()\n+        {\n+            var repoOwner = _userRepoContext.RepositoryOwner;\n+            var repoName = _userRepoContext.RepositoryName;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksContextsWithRepositoryId()\n+        {\n+            var repoId = _userRepoContext.RepositoryId;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksContextsForOrgRepo()\n+        {\n+            var repoOwner = _orgRepoContext.RepositoryContext.RepositoryOwner;\n+            var repoName = _orgRepoContext.RepositoryContext.RepositoryName;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoOwner, repoName, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);\n+        }\n+\n+        [IntegrationTest]\n+        public async Task UpdatesRequiredStatusChecksContextsForOrgRepoWithRepositoryId()\n+        {\n+            var repoId = _orgRepoContext.RepositoryContext.RepositoryId;\n+            var update = new List<string>() { \"newMember1\", \"newMember2\" };\n+            var requiredStatusChecksContexts = await _client.UpdateRequiredStatusChecksContexts(repoId, \"master\", update);\n+\n+            Assert.NotNull(requiredStatusChecksContexts);\n+            Assert.NotNull(requiredStatusChecksContexts.Count);\n+            Assert.Equal(2, requiredStatusChecksContexts.Count);",
        "comment_created_at": "2016-09-02T22:35:10+00:00",
        "comment_author": "ryangribble",
        "comment_body": "How about making this method UPDATE the status checks to a different number of contexts than they started with.  eg there were 2 to start with, so make this test Update it to only 1.  Otherwise perhaps this method didnt do anyting and the count of 2 is juts the original 2 still there?  :grinning:\n",
        "pr_file_module": null
      }
    ]
  }
]