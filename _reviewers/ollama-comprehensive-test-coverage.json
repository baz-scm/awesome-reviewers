[
  {
    "discussion_id": "2072487086",
    "pr_number": 10415,
    "pr_file": "server/tools_test.go",
    "created_at": "2025-05-04T00:00:39+00:00",
    "commented_code": "+package server\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/google/go-cmp/cmp\"\n+\n+\t\"github.com/ollama/ollama/api\"\n+\t\"github.com/ollama/ollama/template\"\n+)\n+\n+func readFile(t *testing.T, base, name string) *bytes.Buffer {\n+\tt.Helper()\n+\n+\tbts, err := os.ReadFile(filepath.Join(base, name))\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\treturn bytes.NewBuffer(bts)\n+}\n+\n+func TestParseToolCalls(t *testing.T) {\n+\tp := filepath.Join(\"testdata\", \"tools\")\n+\tt1 := api.ToolCall{\n+\t\tFunction: api.ToolCallFunction{\n+\t\t\tName: \"get_current_weather\",\n+\t\t\tArguments: api.ToolCallFunctionArguments{\n+\t\t\t\t\"format\":   \"fahrenheit\",\n+\t\t\t\t\"location\": \"San Francisco, CA\",\n+\t\t\t},\n+\t\t},\n+\t}\n+\tt2 := api.ToolCall{\n+\t\tFunction: api.ToolCallFunction{\n+\t\t\tName: \"get_current_weather\",\n+\t\t\tArguments: api.ToolCallFunctionArguments{\n+\t\t\t\t\"format\":   \"celsius\",\n+\t\t\t\t\"location\": \"Toronto, Canada\",\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\tcases := []struct {",
    "repo_full_name": "ollama/ollama",
    "discussion_comments": [
      {
        "comment_id": "2072487086",
        "repo_full_name": "ollama/ollama",
        "pr_number": 10415,
        "pr_file": "server/tools_test.go",
        "discussion_id": "2072487086",
        "commented_code": "@@ -0,0 +1,281 @@\n+package server\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/google/go-cmp/cmp\"\n+\n+\t\"github.com/ollama/ollama/api\"\n+\t\"github.com/ollama/ollama/template\"\n+)\n+\n+func readFile(t *testing.T, base, name string) *bytes.Buffer {\n+\tt.Helper()\n+\n+\tbts, err := os.ReadFile(filepath.Join(base, name))\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\treturn bytes.NewBuffer(bts)\n+}\n+\n+func TestParseToolCalls(t *testing.T) {\n+\tp := filepath.Join(\"testdata\", \"tools\")\n+\tt1 := api.ToolCall{\n+\t\tFunction: api.ToolCallFunction{\n+\t\t\tName: \"get_current_weather\",\n+\t\t\tArguments: api.ToolCallFunctionArguments{\n+\t\t\t\t\"format\":   \"fahrenheit\",\n+\t\t\t\t\"location\": \"San Francisco, CA\",\n+\t\t\t},\n+\t\t},\n+\t}\n+\tt2 := api.ToolCall{\n+\t\tFunction: api.ToolCallFunction{\n+\t\t\tName: \"get_current_weather\",\n+\t\t\tArguments: api.ToolCallFunctionArguments{\n+\t\t\t\t\"format\":   \"celsius\",\n+\t\t\t\t\"location\": \"Toronto, Canada\",\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\tcases := []struct {",
        "comment_created_at": "2025-05-04T00:00:39+00:00",
        "comment_author": "jmorganca",
        "comment_body": "This is a great start. I would take out the concept of tool tokens and have cases like:\r\n\r\n* valid prefix, invalid json\r\n* invalid prefix, valid json\r\n* valid prefix, valid json\r\n* 2+ objects\r\n\r\netc",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2072505113",
    "pr_number": 10415,
    "pr_file": "server/tools_test.go",
    "created_at": "2025-05-04T02:53:33+00:00",
    "commented_code": "+package server\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/google/go-cmp/cmp\"\n+\n+\t\"github.com/ollama/ollama/api\"\n+\t\"github.com/ollama/ollama/template\"\n+)\n+\n+func readFile(t *testing.T, base, name string) *bytes.Buffer {\n+\tt.Helper()\n+\n+\tbts, err := os.ReadFile(filepath.Join(base, name))\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\treturn bytes.NewBuffer(bts)\n+}\n+\n+func TestParseToolCalls(t *testing.T) {",
    "repo_full_name": "ollama/ollama",
    "discussion_comments": [
      {
        "comment_id": "2072505113",
        "repo_full_name": "ollama/ollama",
        "pr_number": 10415,
        "pr_file": "server/tools_test.go",
        "discussion_id": "2072505113",
        "commented_code": "@@ -0,0 +1,281 @@\n+package server\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/google/go-cmp/cmp\"\n+\n+\t\"github.com/ollama/ollama/api\"\n+\t\"github.com/ollama/ollama/template\"\n+)\n+\n+func readFile(t *testing.T, base, name string) *bytes.Buffer {\n+\tt.Helper()\n+\n+\tbts, err := os.ReadFile(filepath.Join(base, name))\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\treturn bytes.NewBuffer(bts)\n+}\n+\n+func TestParseToolCalls(t *testing.T) {",
        "comment_created_at": "2025-05-04T02:53:33+00:00",
        "comment_author": "jmorganca",
        "comment_body": "Great start on the tests! It will be quite a bit of tests, but we should also test the intermediate tool parsing steps (e.g. finding the template, finding the prefix/tool tokens) since we're bound to find edge cases in new models (vs these more top-down tests)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1993742693",
    "pr_number": 9732,
    "pr_file": "sample/transforms_test.go",
    "created_at": "2025-03-13T15:09:27+00:00",
    "commented_code": "}\n }\n \n-func TestTemperatureAndSoftmax(t *testing.T) {\n+func TestTemperature(t *testing.T) {",
    "repo_full_name": "ollama/ollama",
    "discussion_comments": [
      {
        "comment_id": "1993742693",
        "repo_full_name": "ollama/ollama",
        "pr_number": 9732,
        "pr_file": "sample/transforms_test.go",
        "discussion_id": "1993742693",
        "commented_code": "@@ -32,9 +32,20 @@ func compareLogits(t *testing.T, name string, want []float32, got []token) {\n \t}\n }\n \n-func TestTemperatureAndSoftmax(t *testing.T) {\n+func TestTemperature(t *testing.T) {",
        "comment_created_at": "2025-03-13T15:09:27+00:00",
        "comment_author": "jmorganca",
        "comment_body": "Add tests for `0`",
        "pr_file_module": null
      },
      {
        "comment_id": "1993744430",
        "repo_full_name": "ollama/ollama",
        "pr_number": 9732,
        "pr_file": "sample/transforms_test.go",
        "discussion_id": "1993742693",
        "commented_code": "@@ -32,9 +32,20 @@ func compareLogits(t *testing.T, name string, want []float32, got []token) {\n \t}\n }\n \n-func TestTemperatureAndSoftmax(t *testing.T) {\n+func TestTemperature(t *testing.T) {",
        "comment_created_at": "2025-03-13T15:10:20+00:00",
        "comment_author": "ParthSareen",
        "comment_body": "Temperature 0 is getting handled by the sample function",
        "pr_file_module": null
      },
      {
        "comment_id": "1993761808",
        "repo_full_name": "ollama/ollama",
        "pr_number": 9732,
        "pr_file": "sample/transforms_test.go",
        "discussion_id": "1993742693",
        "commented_code": "@@ -32,9 +32,20 @@ func compareLogits(t *testing.T, name string, want []float32, got []token) {\n \t}\n }\n \n-func TestTemperatureAndSoftmax(t *testing.T) {\n+func TestTemperature(t *testing.T) {",
        "comment_created_at": "2025-03-13T15:18:59+00:00",
        "comment_author": "jmorganca",
        "comment_body": "No, we want to test this \"bottom-up\", testing 0 (or maybe a very very small number) here will ensure we have code coverage for `max(temp, 1e-7)`, which is different than testing to see if greedy is used (sample function)",
        "pr_file_module": null
      },
      {
        "comment_id": "1993763323",
        "repo_full_name": "ollama/ollama",
        "pr_number": 9732,
        "pr_file": "sample/transforms_test.go",
        "discussion_id": "1993742693",
        "commented_code": "@@ -32,9 +32,20 @@ func compareLogits(t *testing.T, name string, want []float32, got []token) {\n \t}\n }\n \n-func TestTemperatureAndSoftmax(t *testing.T) {\n+func TestTemperature(t *testing.T) {",
        "comment_created_at": "2025-03-13T15:19:44+00:00",
        "comment_author": "ParthSareen",
        "comment_body": "Ah yes cool, let me add",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1974220545",
    "pr_number": 9379,
    "pr_file": "server/create_test.go",
    "created_at": "2025-02-27T19:31:05+00:00",
    "commented_code": "+package server\n+\n+import (\n+\t\"errors\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+\n+\t\"github.com/ollama/ollama/api\"\n+)\n+\n+func TestConvertFromSafetensorsPathValidation(t *testing.T) {\n+\ttempDir, err := os.MkdirTemp(\"\", \"safetensors-test\")\n+\tif err != nil {\n+\t\tt.Fatalf(\"Failed to create temp dir: %v\", err)\n+\t}\n+\tdefer os.RemoveAll(tempDir)\n+\n+\ttestContent := []byte(\"test content\")\n+\ttestPath := filepath.Join(tempDir, \"source.safetensors\")\n+\terr = os.WriteFile(testPath, testContent, 0o644)\n+\tif err != nil {\n+\t\tt.Fatalf(\"Failed to write test file: %v\", err)\n+\t}\n+\n+\ttests := []struct {",
    "repo_full_name": "ollama/ollama",
    "discussion_comments": [
      {
        "comment_id": "1974220545",
        "repo_full_name": "ollama/ollama",
        "pr_number": 9379,
        "pr_file": "server/create_test.go",
        "discussion_id": "1974220545",
        "commented_code": "@@ -0,0 +1,61 @@\n+package server\n+\n+import (\n+\t\"errors\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"testing\"\n+\n+\t\"github.com/ollama/ollama/api\"\n+)\n+\n+func TestConvertFromSafetensorsPathValidation(t *testing.T) {\n+\ttempDir, err := os.MkdirTemp(\"\", \"safetensors-test\")\n+\tif err != nil {\n+\t\tt.Fatalf(\"Failed to create temp dir: %v\", err)\n+\t}\n+\tdefer os.RemoveAll(tempDir)\n+\n+\ttestContent := []byte(\"test content\")\n+\ttestPath := filepath.Join(tempDir, \"source.safetensors\")\n+\terr = os.WriteFile(testPath, testContent, 0o644)\n+\tif err != nil {\n+\t\tt.Fatalf(\"Failed to write test file: %v\", err)\n+\t}\n+\n+\ttests := []struct {",
        "comment_created_at": "2025-02-27T19:31:05+00:00",
        "comment_author": "bmizerany",
        "comment_body": "There only \"invalid\" cases here. What about valid? What do those look like and how do they compare to the invalid?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1949782966",
    "pr_number": 8410,
    "pr_file": "sample/sample_test.go",
    "created_at": "2025-02-10T19:47:28+00:00",
    "commented_code": "+package sample\n+\n+import (\n+\t\"fmt\"\n+\t\"math\"\n+\t\"slices\"\n+\t\"testing\"\n+\n+\t\"gonum.org/v1/gonum/floats\"\n+)\n+\n+func TestTemperature(t *testing.T) {\n+\tlogits, err := Temperature(0.5).Apply([]float64{-3, -2, -1, 0, 1, 2, 4})",
    "repo_full_name": "ollama/ollama",
    "discussion_comments": [
      {
        "comment_id": "1949782966",
        "repo_full_name": "ollama/ollama",
        "pr_number": 8410,
        "pr_file": "sample/sample_test.go",
        "discussion_id": "1949782966",
        "commented_code": "@@ -0,0 +1,184 @@\n+package sample\n+\n+import (\n+\t\"fmt\"\n+\t\"math\"\n+\t\"slices\"\n+\t\"testing\"\n+\n+\t\"gonum.org/v1/gonum/floats\"\n+)\n+\n+func TestTemperature(t *testing.T) {\n+\tlogits, err := Temperature(0.5).Apply([]float64{-3, -2, -1, 0, 1, 2, 4})",
        "comment_created_at": "2025-02-10T19:47:28+00:00",
        "comment_author": "mxyng",
        "comment_body": "You should add a test case where the inputs isn't sorted",
        "pr_file_module": null
      }
    ]
  }
]