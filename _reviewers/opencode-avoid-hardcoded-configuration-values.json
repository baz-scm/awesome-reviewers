[
  {
    "discussion_id": "2230696599",
    "pr_number": 1231,
    "pr_file": "packages/opencode/src/provider/provider.ts",
    "created_at": "2025-07-25T10:01:10+00:00",
    "commented_code": "},\n       }\n     },\n+    ollama: async (provider) => {\n+      try {\n+        log.info(\"Ollama loader starting\")\n+        const response = await fetch(\"http://localhost:11434/api/tags\").catch(() => null)",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2230696599",
        "repo_full_name": "sst/opencode",
        "pr_number": 1231,
        "pr_file": "packages/opencode/src/provider/provider.ts",
        "discussion_id": "2230696599",
        "commented_code": "@@ -206,6 +206,65 @@ export namespace Provider {\n         },\n       }\n     },\n+    ollama: async (provider) => {\n+      try {\n+        log.info(\"Ollama loader starting\")\n+        const response = await fetch(\"http://localhost:11434/api/tags\").catch(() => null)",
        "comment_created_at": "2025-07-25T10:01:10+00:00",
        "comment_author": "jaswdr",
        "comment_body": "this URL cannot be harcodded here, you will need to read it from the config instead",
        "pr_file_module": null
      },
      {
        "comment_id": "2232833828",
        "repo_full_name": "sst/opencode",
        "pr_number": 1231,
        "pr_file": "packages/opencode/src/provider/provider.ts",
        "discussion_id": "2230696599",
        "commented_code": "@@ -206,6 +206,65 @@ export namespace Provider {\n         },\n       }\n     },\n+    ollama: async (provider) => {\n+      try {\n+        log.info(\"Ollama loader starting\")\n+        const response = await fetch(\"http://localhost:11434/api/tags\").catch(() => null)",
        "comment_created_at": "2025-07-26T10:12:14+00:00",
        "comment_author": "ferraro",
        "comment_body": "I replaced it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2302135637",
    "pr_number": 1982,
    "pr_file": "packages/opencode/src/provider/provider.ts",
    "created_at": "2025-08-26T21:00:34+00:00",
    "commented_code": "const pkg = provider.npm ?? provider.id\n       const mod = await import(await BunProc.install(pkg, \"latest\"))\n       const fn = mod[Object.keys(mod).find((key) => key.startsWith(\"create\"))!]\n+      let options = { ...s.providers[provider.id]?.options }\n+      // Inject custom fetch for local OpenAI-compatible providers\n+      if (options[\"baseURL\"] && options[\"timeout\"] !== undefined) {\n+        // Only override fetch if user explicitly sets timeout\n+        options[\"fetch\"] = async (input: any, init?: any) => {\n+          return await fetch(input, { ...init, timeout: options[\"timeout\"] })\n+        }",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2302135637",
        "repo_full_name": "sst/opencode",
        "pr_number": 1982,
        "pr_file": "packages/opencode/src/provider/provider.ts",
        "discussion_id": "2302135637",
        "commented_code": "@@ -320,9 +320,17 @@ export namespace Provider {\n       const pkg = provider.npm ?? provider.id\n       const mod = await import(await BunProc.install(pkg, \"latest\"))\n       const fn = mod[Object.keys(mod).find((key) => key.startsWith(\"create\"))!]\n+      let options = { ...s.providers[provider.id]?.options }\n+      // Inject custom fetch for local OpenAI-compatible providers\n+      if (options[\"baseURL\"] && options[\"timeout\"] !== undefined) {\n+        // Only override fetch if user explicitly sets timeout\n+        options[\"fetch\"] = async (input: any, init?: any) => {\n+          return await fetch(input, { ...init, timeout: options[\"timeout\"] })\n+        }",
        "comment_created_at": "2025-08-26T21:00:34+00:00",
        "comment_author": "rekram1-node",
        "comment_body": "nit: remove `// Inject custom fetch for local OpenAI-compatible providers` \r\n\r\nAlso why the check for baseURL? technically you can have a timeout set for any provider, provider may be \"anthropic\" \r\n\r\njust think we should remove that check to be more intuitive ",
        "pr_file_module": null
      },
      {
        "comment_id": "2302140533",
        "repo_full_name": "sst/opencode",
        "pr_number": 1982,
        "pr_file": "packages/opencode/src/provider/provider.ts",
        "discussion_id": "2302135637",
        "commented_code": "@@ -320,9 +320,17 @@ export namespace Provider {\n       const pkg = provider.npm ?? provider.id\n       const mod = await import(await BunProc.install(pkg, \"latest\"))\n       const fn = mod[Object.keys(mod).find((key) => key.startsWith(\"create\"))!]\n+      let options = { ...s.providers[provider.id]?.options }\n+      // Inject custom fetch for local OpenAI-compatible providers\n+      if (options[\"baseURL\"] && options[\"timeout\"] !== undefined) {\n+        // Only override fetch if user explicitly sets timeout\n+        options[\"fetch\"] = async (input: any, init?: any) => {\n+          return await fetch(input, { ...init, timeout: options[\"timeout\"] })\n+        }",
        "comment_created_at": "2025-08-26T21:03:23+00:00",
        "comment_author": "egyptianbman",
        "comment_body": "the concern is if there is no endpoint, someone may wait forever for nothing. I can remove it if you think it's overly cautious or might cause issues. I wouldn't think anthropic would need this \ud83e\udd37\ud83c\udffe ",
        "pr_file_module": null
      },
      {
        "comment_id": "2302145759",
        "repo_full_name": "sst/opencode",
        "pr_number": 1982,
        "pr_file": "packages/opencode/src/provider/provider.ts",
        "discussion_id": "2302135637",
        "commented_code": "@@ -320,9 +320,17 @@ export namespace Provider {\n       const pkg = provider.npm ?? provider.id\n       const mod = await import(await BunProc.install(pkg, \"latest\"))\n       const fn = mod[Object.keys(mod).find((key) => key.startsWith(\"create\"))!]\n+      let options = { ...s.providers[provider.id]?.options }\n+      // Inject custom fetch for local OpenAI-compatible providers\n+      if (options[\"baseURL\"] && options[\"timeout\"] !== undefined) {\n+        // Only override fetch if user explicitly sets timeout\n+        options[\"fetch\"] = async (input: any, init?: any) => {\n+          return await fetch(input, { ...init, timeout: options[\"timeout\"] })\n+        }",
        "comment_created_at": "2025-08-26T21:06:25+00:00",
        "comment_author": "egyptianbman",
        "comment_body": "removed",
        "pr_file_module": null
      },
      {
        "comment_id": "2302152595",
        "repo_full_name": "sst/opencode",
        "pr_number": 1982,
        "pr_file": "packages/opencode/src/provider/provider.ts",
        "discussion_id": "2302135637",
        "commented_code": "@@ -320,9 +320,17 @@ export namespace Provider {\n       const pkg = provider.npm ?? provider.id\n       const mod = await import(await BunProc.install(pkg, \"latest\"))\n       const fn = mod[Object.keys(mod).find((key) => key.startsWith(\"create\"))!]\n+      let options = { ...s.providers[provider.id]?.options }\n+      // Inject custom fetch for local OpenAI-compatible providers\n+      if (options[\"baseURL\"] && options[\"timeout\"] !== undefined) {\n+        // Only override fetch if user explicitly sets timeout\n+        options[\"fetch\"] = async (input: any, init?: any) => {\n+          return await fetch(input, { ...init, timeout: options[\"timeout\"] })\n+        }",
        "comment_created_at": "2025-08-26T21:10:33+00:00",
        "comment_author": "rekram1-node",
        "comment_body": "I was just suggesting it for consistency, I was throwing out anthropic as random example",
        "pr_file_module": null
      },
      {
        "comment_id": "2302152957",
        "repo_full_name": "sst/opencode",
        "pr_number": 1982,
        "pr_file": "packages/opencode/src/provider/provider.ts",
        "discussion_id": "2302135637",
        "commented_code": "@@ -320,9 +320,17 @@ export namespace Provider {\n       const pkg = provider.npm ?? provider.id\n       const mod = await import(await BunProc.install(pkg, \"latest\"))\n       const fn = mod[Object.keys(mod).find((key) => key.startsWith(\"create\"))!]\n+      let options = { ...s.providers[provider.id]?.options }\n+      // Inject custom fetch for local OpenAI-compatible providers\n+      if (options[\"baseURL\"] && options[\"timeout\"] !== undefined) {\n+        // Only override fetch if user explicitly sets timeout\n+        options[\"fetch\"] = async (input: any, init?: any) => {\n+          return await fetch(input, { ...init, timeout: options[\"timeout\"] })\n+        }",
        "comment_created_at": "2025-08-26T21:10:47+00:00",
        "comment_author": "rekram1-node",
        "comment_body": "I feel like it would be unexpected for timeout to do nothing in some cases",
        "pr_file_module": null
      },
      {
        "comment_id": "2302182636",
        "repo_full_name": "sst/opencode",
        "pr_number": 1982,
        "pr_file": "packages/opencode/src/provider/provider.ts",
        "discussion_id": "2302135637",
        "commented_code": "@@ -320,9 +320,17 @@ export namespace Provider {\n       const pkg = provider.npm ?? provider.id\n       const mod = await import(await BunProc.install(pkg, \"latest\"))\n       const fn = mod[Object.keys(mod).find((key) => key.startsWith(\"create\"))!]\n+      let options = { ...s.providers[provider.id]?.options }\n+      // Inject custom fetch for local OpenAI-compatible providers\n+      if (options[\"baseURL\"] && options[\"timeout\"] !== undefined) {\n+        // Only override fetch if user explicitly sets timeout\n+        options[\"fetch\"] = async (input: any, init?: any) => {\n+          return await fetch(input, { ...init, timeout: options[\"timeout\"] })\n+        }",
        "comment_created_at": "2025-08-26T21:27:36+00:00",
        "comment_author": "egyptianbman",
        "comment_body": "No problem, it would likely lead to confusion to set a timeout and not have it apply.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2296104815",
    "pr_number": 2204,
    "pr_file": "packages/opencode/src/lsp/server.ts",
    "created_at": "2025-08-23T14:38:09+00:00",
    "commented_code": "\"nuxt.config.js\",\n       \"vue.config.js\",\n     ]),\n-    async spawn(_, root) {\n+    async spawn(app, root) {\n+      const vue = await Bun.resolve(\"vue\", app.path.cwd).catch(() => {})\n+      if (!vue) return",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2296104815",
        "repo_full_name": "sst/opencode",
        "pr_number": 2204,
        "pr_file": "packages/opencode/src/lsp/server.ts",
        "discussion_id": "2296104815",
        "commented_code": "@@ -83,7 +83,9 @@ export namespace LSPServer {\n       \"nuxt.config.js\",\n       \"vue.config.js\",\n     ]),\n-    async spawn(_, root) {\n+    async spawn(app, root) {\n+      const vue = await Bun.resolve(\"vue\", app.path.cwd).catch(() => {})\n+      if (!vue) return",
        "comment_created_at": "2025-08-23T14:38:09+00:00",
        "comment_author": "rekram1-node",
        "comment_body": "we shouldn't be installing vue lsp if it isn't used in project",
        "pr_file_module": null
      }
    ]
  }
]