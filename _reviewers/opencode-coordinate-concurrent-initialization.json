[
  {
    "discussion_id": "2361685096",
    "pr_number": 2547,
    "pr_file": "packages/opencode/src/lsp/server.ts",
    "created_at": "2025-09-19T03:57:14+00:00",
    "commented_code": "}\n     },\n   }\n+\n+  export const JDTLS: Info = {\n+    id: \"jdtls\",\n+    root: NearestRoot([\"pom.xml\", \"build.gradle\", \"build.gradle.kts\", \".project\", \".classpath\"]),\n+    extensions: [\".java\"],\n+    async spawn(root) {\n+      const java = Bun.which(\"java\")\n+      if (!java) {\n+        log.error(\"Java 21 or newer is required to run the JDTLS. Please install it first.\")\n+        return\n+      }\n+      const javaMajorVersion = await $`java -version`.then(({ stderr }) => {\n+        const m = /\"(\\d+)\\.\\d+\\.\\d+\"/.exec(stderr + \"\")\n+        return !m ? undefined : parseInt(m[1])\n+      })\n+      if (javaMajorVersion == null || javaMajorVersion < 21) {\n+        log.error(\"JDTLS requires at least Java 21.\")\n+        return\n+      }\n+      if (Flag.OPENCODE_DISABLE_LSP_DOWNLOAD) return\n+      if (jdtlsInit == null) {\n+        jdtlsInit = initializeJdtls(java, root)\n+      }\n+      const jdtlsServer = await jdtlsInit\n+      if (jdtlsServer == null) return\n+      return {\n+        process: jdtlsServer,\n+      }\n+    },\n+  }\n+\n+  const initializeJdtls = async (java: string, root: string): Promise<ChildProcessWithoutNullStreams | undefined> => {\n+    log.info(\"Downloading JDTLS LSP server.\")\n+    const distPath = path.join(Global.Path.bin, \"jdtls\")\n+    const launcherDir = path.join(distPath, \"plugins\")\n+    const installed = await fs.exists(launcherDir)\n+    if (!installed) {\n+      await fs.mkdir(distPath, { recursive: true })\n+      const releaseURL =",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2361685096",
        "repo_full_name": "sst/opencode",
        "pr_number": 2547,
        "pr_file": "packages/opencode/src/lsp/server.ts",
        "discussion_id": "2361685096",
        "commented_code": "@@ -706,4 +707,97 @@ export namespace LSPServer {\n       }\n     },\n   }\n+\n+  export const JDTLS: Info = {\n+    id: \"jdtls\",\n+    root: NearestRoot([\"pom.xml\", \"build.gradle\", \"build.gradle.kts\", \".project\", \".classpath\"]),\n+    extensions: [\".java\"],\n+    async spawn(root) {\n+      const java = Bun.which(\"java\")\n+      if (!java) {\n+        log.error(\"Java 21 or newer is required to run the JDTLS. Please install it first.\")\n+        return\n+      }\n+      const javaMajorVersion = await $`java -version`.then(({ stderr }) => {\n+        const m = /\"(\\d+)\\.\\d+\\.\\d+\"/.exec(stderr + \"\")\n+        return !m ? undefined : parseInt(m[1])\n+      })\n+      if (javaMajorVersion == null || javaMajorVersion < 21) {\n+        log.error(\"JDTLS requires at least Java 21.\")\n+        return\n+      }\n+      if (Flag.OPENCODE_DISABLE_LSP_DOWNLOAD) return\n+      if (jdtlsInit == null) {\n+        jdtlsInit = initializeJdtls(java, root)\n+      }\n+      const jdtlsServer = await jdtlsInit\n+      if (jdtlsServer == null) return\n+      return {\n+        process: jdtlsServer,\n+      }\n+    },\n+  }\n+\n+  const initializeJdtls = async (java: string, root: string): Promise<ChildProcessWithoutNullStreams | undefined> => {\n+    log.info(\"Downloading JDTLS LSP server.\")\n+    const distPath = path.join(Global.Path.bin, \"jdtls\")\n+    const launcherDir = path.join(distPath, \"plugins\")\n+    const installed = await fs.exists(launcherDir)\n+    if (!installed) {\n+      await fs.mkdir(distPath, { recursive: true })\n+      const releaseURL =",
        "comment_created_at": "2025-09-19T03:57:14+00:00",
        "comment_author": "rekram1-node",
        "comment_body": "can we keep it all in spawn? following same pattern all the other lsps use? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2361701826",
        "repo_full_name": "sst/opencode",
        "pr_number": 2547,
        "pr_file": "packages/opencode/src/lsp/server.ts",
        "discussion_id": "2361685096",
        "commented_code": "@@ -706,4 +707,97 @@ export namespace LSPServer {\n       }\n     },\n   }\n+\n+  export const JDTLS: Info = {\n+    id: \"jdtls\",\n+    root: NearestRoot([\"pom.xml\", \"build.gradle\", \"build.gradle.kts\", \".project\", \".classpath\"]),\n+    extensions: [\".java\"],\n+    async spawn(root) {\n+      const java = Bun.which(\"java\")\n+      if (!java) {\n+        log.error(\"Java 21 or newer is required to run the JDTLS. Please install it first.\")\n+        return\n+      }\n+      const javaMajorVersion = await $`java -version`.then(({ stderr }) => {\n+        const m = /\"(\\d+)\\.\\d+\\.\\d+\"/.exec(stderr + \"\")\n+        return !m ? undefined : parseInt(m[1])\n+      })\n+      if (javaMajorVersion == null || javaMajorVersion < 21) {\n+        log.error(\"JDTLS requires at least Java 21.\")\n+        return\n+      }\n+      if (Flag.OPENCODE_DISABLE_LSP_DOWNLOAD) return\n+      if (jdtlsInit == null) {\n+        jdtlsInit = initializeJdtls(java, root)\n+      }\n+      const jdtlsServer = await jdtlsInit\n+      if (jdtlsServer == null) return\n+      return {\n+        process: jdtlsServer,\n+      }\n+    },\n+  }\n+\n+  const initializeJdtls = async (java: string, root: string): Promise<ChildProcessWithoutNullStreams | undefined> => {\n+    log.info(\"Downloading JDTLS LSP server.\")\n+    const distPath = path.join(Global.Path.bin, \"jdtls\")\n+    const launcherDir = path.join(distPath, \"plugins\")\n+    const installed = await fs.exists(launcherDir)\n+    if (!installed) {\n+      await fs.mkdir(distPath, { recursive: true })\n+      const releaseURL =",
        "comment_created_at": "2025-09-19T04:10:52+00:00",
        "comment_author": "iwauo",
        "comment_body": "Thank you for your review.\r\nI initially followed the implementation pattern used by other LSP servers.\r\nHowever, during debugging I discovered that the initialization could run twice or more, because the Java runtime (JDT\u2011language server) takes some time to start up.\r\nTherefore, we need to join concurrent initialization requests using a promise (`jdtlsInit`).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2361693383",
    "pr_number": 2547,
    "pr_file": "packages/opencode/src/lsp/server.ts",
    "created_at": "2025-09-19T04:04:07+00:00",
    "commented_code": "}\n     },\n   }\n+\n+  export const JDTLS: Info = {\n+    id: \"jdtls\",\n+    root: NearestRoot([\"pom.xml\", \"build.gradle\", \"build.gradle.kts\", \".project\", \".classpath\"]),\n+    extensions: [\".java\"],\n+    async spawn(root) {\n+      const java = Bun.which(\"java\")\n+      if (!java) {\n+        log.error(\"Java 21 or newer is required to run the JDTLS. Please install it first.\")\n+        return\n+      }\n+      const javaMajorVersion = await $`java -version`.then(({ stderr }) => {\n+        const m = /\"(\\d+)\\.\\d+\\.\\d+\"/.exec(stderr + \"\")\n+        return !m ? undefined : parseInt(m[1])\n+      })\n+      if (javaMajorVersion == null || javaMajorVersion < 21) {\n+        log.error(\"JDTLS requires at least Java 21.\")\n+        return\n+      }\n+      if (Flag.OPENCODE_DISABLE_LSP_DOWNLOAD) return\n+      if (jdtlsInit == null) {\n+        jdtlsInit = initializeJdtls(java, root)\n+      }\n+      const jdtlsServer = await jdtlsInit\n+      if (jdtlsServer == null) return\n+      return {\n+        process: jdtlsServer,\n+      }\n+    },\n+  }\n+\n+  const initializeJdtls = async (java: string, root: string): Promise<ChildProcessWithoutNullStreams | undefined> => {\n+    log.info(\"Downloading JDTLS LSP server.\")\n+    const distPath = path.join(Global.Path.bin, \"jdtls\")\n+    const launcherDir = path.join(distPath, \"plugins\")\n+    const installed = await fs.exists(launcherDir)\n+    if (!installed) {\n+      await fs.mkdir(distPath, { recursive: true })\n+      const releaseURL =\n+        \"https://www.eclipse.org/downloads/download.php?file=/jdtls/snapshots/jdt-language-server-latest.tar.gz\"\n+      const archivePath = path.join(distPath, \"release.tar.gz\")\n+      await $`curl -L -o '${archivePath}' '${releaseURL}'`\n+      await $`tar -xzf ${archivePath}`.cwd(distPath)\n+      await fs.rm(archivePath, { force: true })\n+    }\n+    const jarFileName = await $`ls org.eclipse.equinox.launcher_*.jar`\n+      .cwd(launcherDir)\n+      .nothrow()\n+      .then(({ stdout }) => (stdout + \"\").trim())\n+    const launcherJar = path.join(launcherDir, jarFileName)\n+    if (!(await fs.exists(launcherJar))) {\n+      log.error(`Failed to locate the JDTLS launcher module in the installed directory: ${distPath}.`)\n+      return\n+    }\n+    const configFile = path.join(\n+      distPath,\n+      (() => {\n+        switch (process.platform) {\n+          case \"darwin\":\n+            return \"config_mac\"\n+          case \"linux\":\n+            return \"config_linux\"\n+          case \"win32\":\n+            return \"config_windows\"\n+          default:\n+            return \"config_linux\"\n+        }\n+      })(),\n+    )\n+    const dataDir = await fs.mkdtemp(path.join(os.tmpdir(), \"opencode-jdtls-data\"))\n+    return spawn(\n+      java,\n+      [\n+        \"-jar\",\n+        launcherJar,\n+        \"-configuration\",\n+        configFile,\n+        \"-data\",\n+        dataDir,\n+        \"-Declipse.application=org.eclipse.jdt.ls.core.id1\",\n+        \"-Dosgi.bundles.defaultStartLevel=4\",\n+        \"-Declipse.product=org.eclipse.jdt.ls.core.product\",\n+        \"-Dlog.level=ALL\",\n+        \"--add-modules=ALL-SYSTEM\",\n+        \"--add-opens java.base/java.util=ALL-UNNAMED\",\n+        \"--add-opens java.base/java.lang=ALL-UNNAMED\",\n+      ],\n+      {\n+        cwd: root,\n+      },\n+    )\n+  }\n+  let jdtlsInit: Promise<ChildProcessWithoutNullStreams | undefined>",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2361693383",
        "repo_full_name": "sst/opencode",
        "pr_number": 2547,
        "pr_file": "packages/opencode/src/lsp/server.ts",
        "discussion_id": "2361693383",
        "commented_code": "@@ -706,4 +707,97 @@ export namespace LSPServer {\n       }\n     },\n   }\n+\n+  export const JDTLS: Info = {\n+    id: \"jdtls\",\n+    root: NearestRoot([\"pom.xml\", \"build.gradle\", \"build.gradle.kts\", \".project\", \".classpath\"]),\n+    extensions: [\".java\"],\n+    async spawn(root) {\n+      const java = Bun.which(\"java\")\n+      if (!java) {\n+        log.error(\"Java 21 or newer is required to run the JDTLS. Please install it first.\")\n+        return\n+      }\n+      const javaMajorVersion = await $`java -version`.then(({ stderr }) => {\n+        const m = /\"(\\d+)\\.\\d+\\.\\d+\"/.exec(stderr + \"\")\n+        return !m ? undefined : parseInt(m[1])\n+      })\n+      if (javaMajorVersion == null || javaMajorVersion < 21) {\n+        log.error(\"JDTLS requires at least Java 21.\")\n+        return\n+      }\n+      if (Flag.OPENCODE_DISABLE_LSP_DOWNLOAD) return\n+      if (jdtlsInit == null) {\n+        jdtlsInit = initializeJdtls(java, root)\n+      }\n+      const jdtlsServer = await jdtlsInit\n+      if (jdtlsServer == null) return\n+      return {\n+        process: jdtlsServer,\n+      }\n+    },\n+  }\n+\n+  const initializeJdtls = async (java: string, root: string): Promise<ChildProcessWithoutNullStreams | undefined> => {\n+    log.info(\"Downloading JDTLS LSP server.\")\n+    const distPath = path.join(Global.Path.bin, \"jdtls\")\n+    const launcherDir = path.join(distPath, \"plugins\")\n+    const installed = await fs.exists(launcherDir)\n+    if (!installed) {\n+      await fs.mkdir(distPath, { recursive: true })\n+      const releaseURL =\n+        \"https://www.eclipse.org/downloads/download.php?file=/jdtls/snapshots/jdt-language-server-latest.tar.gz\"\n+      const archivePath = path.join(distPath, \"release.tar.gz\")\n+      await $`curl -L -o '${archivePath}' '${releaseURL}'`\n+      await $`tar -xzf ${archivePath}`.cwd(distPath)\n+      await fs.rm(archivePath, { force: true })\n+    }\n+    const jarFileName = await $`ls org.eclipse.equinox.launcher_*.jar`\n+      .cwd(launcherDir)\n+      .nothrow()\n+      .then(({ stdout }) => (stdout + \"\").trim())\n+    const launcherJar = path.join(launcherDir, jarFileName)\n+    if (!(await fs.exists(launcherJar))) {\n+      log.error(`Failed to locate the JDTLS launcher module in the installed directory: ${distPath}.`)\n+      return\n+    }\n+    const configFile = path.join(\n+      distPath,\n+      (() => {\n+        switch (process.platform) {\n+          case \"darwin\":\n+            return \"config_mac\"\n+          case \"linux\":\n+            return \"config_linux\"\n+          case \"win32\":\n+            return \"config_windows\"\n+          default:\n+            return \"config_linux\"\n+        }\n+      })(),\n+    )\n+    const dataDir = await fs.mkdtemp(path.join(os.tmpdir(), \"opencode-jdtls-data\"))\n+    return spawn(\n+      java,\n+      [\n+        \"-jar\",\n+        launcherJar,\n+        \"-configuration\",\n+        configFile,\n+        \"-data\",\n+        dataDir,\n+        \"-Declipse.application=org.eclipse.jdt.ls.core.id1\",\n+        \"-Dosgi.bundles.defaultStartLevel=4\",\n+        \"-Declipse.product=org.eclipse.jdt.ls.core.product\",\n+        \"-Dlog.level=ALL\",\n+        \"--add-modules=ALL-SYSTEM\",\n+        \"--add-opens java.base/java.util=ALL-UNNAMED\",\n+        \"--add-opens java.base/java.lang=ALL-UNNAMED\",\n+      ],\n+      {\n+        cwd: root,\n+      },\n+    )\n+  }\n+  let jdtlsInit: Promise<ChildProcessWithoutNullStreams | undefined>",
        "comment_created_at": "2025-09-19T04:04:07+00:00",
        "comment_author": "rekram1-node",
        "comment_body": "do we need this let var? if so whats the purpose ",
        "pr_file_module": null
      },
      {
        "comment_id": "2361738275",
        "repo_full_name": "sst/opencode",
        "pr_number": 2547,
        "pr_file": "packages/opencode/src/lsp/server.ts",
        "discussion_id": "2361693383",
        "commented_code": "@@ -706,4 +707,97 @@ export namespace LSPServer {\n       }\n     },\n   }\n+\n+  export const JDTLS: Info = {\n+    id: \"jdtls\",\n+    root: NearestRoot([\"pom.xml\", \"build.gradle\", \"build.gradle.kts\", \".project\", \".classpath\"]),\n+    extensions: [\".java\"],\n+    async spawn(root) {\n+      const java = Bun.which(\"java\")\n+      if (!java) {\n+        log.error(\"Java 21 or newer is required to run the JDTLS. Please install it first.\")\n+        return\n+      }\n+      const javaMajorVersion = await $`java -version`.then(({ stderr }) => {\n+        const m = /\"(\\d+)\\.\\d+\\.\\d+\"/.exec(stderr + \"\")\n+        return !m ? undefined : parseInt(m[1])\n+      })\n+      if (javaMajorVersion == null || javaMajorVersion < 21) {\n+        log.error(\"JDTLS requires at least Java 21.\")\n+        return\n+      }\n+      if (Flag.OPENCODE_DISABLE_LSP_DOWNLOAD) return\n+      if (jdtlsInit == null) {\n+        jdtlsInit = initializeJdtls(java, root)\n+      }\n+      const jdtlsServer = await jdtlsInit\n+      if (jdtlsServer == null) return\n+      return {\n+        process: jdtlsServer,\n+      }\n+    },\n+  }\n+\n+  const initializeJdtls = async (java: string, root: string): Promise<ChildProcessWithoutNullStreams | undefined> => {\n+    log.info(\"Downloading JDTLS LSP server.\")\n+    const distPath = path.join(Global.Path.bin, \"jdtls\")\n+    const launcherDir = path.join(distPath, \"plugins\")\n+    const installed = await fs.exists(launcherDir)\n+    if (!installed) {\n+      await fs.mkdir(distPath, { recursive: true })\n+      const releaseURL =\n+        \"https://www.eclipse.org/downloads/download.php?file=/jdtls/snapshots/jdt-language-server-latest.tar.gz\"\n+      const archivePath = path.join(distPath, \"release.tar.gz\")\n+      await $`curl -L -o '${archivePath}' '${releaseURL}'`\n+      await $`tar -xzf ${archivePath}`.cwd(distPath)\n+      await fs.rm(archivePath, { force: true })\n+    }\n+    const jarFileName = await $`ls org.eclipse.equinox.launcher_*.jar`\n+      .cwd(launcherDir)\n+      .nothrow()\n+      .then(({ stdout }) => (stdout + \"\").trim())\n+    const launcherJar = path.join(launcherDir, jarFileName)\n+    if (!(await fs.exists(launcherJar))) {\n+      log.error(`Failed to locate the JDTLS launcher module in the installed directory: ${distPath}.`)\n+      return\n+    }\n+    const configFile = path.join(\n+      distPath,\n+      (() => {\n+        switch (process.platform) {\n+          case \"darwin\":\n+            return \"config_mac\"\n+          case \"linux\":\n+            return \"config_linux\"\n+          case \"win32\":\n+            return \"config_windows\"\n+          default:\n+            return \"config_linux\"\n+        }\n+      })(),\n+    )\n+    const dataDir = await fs.mkdtemp(path.join(os.tmpdir(), \"opencode-jdtls-data\"))\n+    return spawn(\n+      java,\n+      [\n+        \"-jar\",\n+        launcherJar,\n+        \"-configuration\",\n+        configFile,\n+        \"-data\",\n+        dataDir,\n+        \"-Declipse.application=org.eclipse.jdt.ls.core.id1\",\n+        \"-Dosgi.bundles.defaultStartLevel=4\",\n+        \"-Declipse.product=org.eclipse.jdt.ls.core.product\",\n+        \"-Dlog.level=ALL\",\n+        \"--add-modules=ALL-SYSTEM\",\n+        \"--add-opens java.base/java.util=ALL-UNNAMED\",\n+        \"--add-opens java.base/java.lang=ALL-UNNAMED\",\n+      ],\n+      {\n+        cwd: root,\n+      },\n+    )\n+  }\n+  let jdtlsInit: Promise<ChildProcessWithoutNullStreams | undefined>",
        "comment_created_at": "2025-09-19T04:38:29+00:00",
        "comment_author": "iwauo",
        "comment_body": "This promise is used to wait for concurrent initialization requests until the first one\u2019s initialization is finished.",
        "pr_file_module": null
      }
    ]
  }
]