[
  {
    "discussion_id": "2361692414",
    "pr_number": 2547,
    "pr_file": "packages/opencode/src/lsp/server.ts",
    "created_at": "2025-09-19T04:03:13+00:00",
    "commented_code": "}\n     },\n   }\n+\n+  export const JDTLS: Info = {\n+    id: \"jdtls\",\n+    root: NearestRoot([\"pom.xml\", \"build.gradle\", \"build.gradle.kts\", \".project\", \".classpath\"]),\n+    extensions: [\".java\"],\n+    async spawn(root) {\n+      const java = Bun.which(\"java\")\n+      if (!java) {\n+        log.error(\"Java 21 or newer is required to run the JDTLS. Please install it first.\")\n+        return\n+      }\n+      const javaMajorVersion = await $`java -version`.then(({ stderr }) => {\n+        const m = /\"(\\d+)\\.\\d+\\.\\d+\"/.exec(stderr + \"\")\n+        return !m ? undefined : parseInt(m[1])\n+      })\n+      if (javaMajorVersion == null || javaMajorVersion < 21) {\n+        log.error(\"JDTLS requires at least Java 21.\")\n+        return\n+      }\n+      if (Flag.OPENCODE_DISABLE_LSP_DOWNLOAD) return\n+      if (jdtlsInit == null) {\n+        jdtlsInit = initializeJdtls(java, root)\n+      }\n+      const jdtlsServer = await jdtlsInit\n+      if (jdtlsServer == null) return\n+      return {\n+        process: jdtlsServer,\n+      }\n+    },\n+  }\n+\n+  const initializeJdtls = async (java: string, root: string): Promise<ChildProcessWithoutNullStreams | undefined> => {\n+    log.info(\"Downloading JDTLS LSP server.\")\n+    const distPath = path.join(Global.Path.bin, \"jdtls\")\n+    const launcherDir = path.join(distPath, \"plugins\")\n+    const installed = await fs.exists(launcherDir)\n+    if (!installed) {\n+      await fs.mkdir(distPath, { recursive: true })\n+      const releaseURL =\n+        \"https://www.eclipse.org/downloads/download.php?file=/jdtls/snapshots/jdt-language-server-latest.tar.gz\"\n+      const archivePath = path.join(distPath, \"release.tar.gz\")\n+      await $`curl -L -o '${archivePath}' '${releaseURL}'`\n+      await $`tar -xzf ${archivePath}`.cwd(distPath)",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2361692414",
        "repo_full_name": "sst/opencode",
        "pr_number": 2547,
        "pr_file": "packages/opencode/src/lsp/server.ts",
        "discussion_id": "2361692414",
        "commented_code": "@@ -706,4 +707,97 @@ export namespace LSPServer {\n       }\n     },\n   }\n+\n+  export const JDTLS: Info = {\n+    id: \"jdtls\",\n+    root: NearestRoot([\"pom.xml\", \"build.gradle\", \"build.gradle.kts\", \".project\", \".classpath\"]),\n+    extensions: [\".java\"],\n+    async spawn(root) {\n+      const java = Bun.which(\"java\")\n+      if (!java) {\n+        log.error(\"Java 21 or newer is required to run the JDTLS. Please install it first.\")\n+        return\n+      }\n+      const javaMajorVersion = await $`java -version`.then(({ stderr }) => {\n+        const m = /\"(\\d+)\\.\\d+\\.\\d+\"/.exec(stderr + \"\")\n+        return !m ? undefined : parseInt(m[1])\n+      })\n+      if (javaMajorVersion == null || javaMajorVersion < 21) {\n+        log.error(\"JDTLS requires at least Java 21.\")\n+        return\n+      }\n+      if (Flag.OPENCODE_DISABLE_LSP_DOWNLOAD) return\n+      if (jdtlsInit == null) {\n+        jdtlsInit = initializeJdtls(java, root)\n+      }\n+      const jdtlsServer = await jdtlsInit\n+      if (jdtlsServer == null) return\n+      return {\n+        process: jdtlsServer,\n+      }\n+    },\n+  }\n+\n+  const initializeJdtls = async (java: string, root: string): Promise<ChildProcessWithoutNullStreams | undefined> => {\n+    log.info(\"Downloading JDTLS LSP server.\")\n+    const distPath = path.join(Global.Path.bin, \"jdtls\")\n+    const launcherDir = path.join(distPath, \"plugins\")\n+    const installed = await fs.exists(launcherDir)\n+    if (!installed) {\n+      await fs.mkdir(distPath, { recursive: true })\n+      const releaseURL =\n+        \"https://www.eclipse.org/downloads/download.php?file=/jdtls/snapshots/jdt-language-server-latest.tar.gz\"\n+      const archivePath = path.join(distPath, \"release.tar.gz\")\n+      await $`curl -L -o '${archivePath}' '${releaseURL}'`\n+      await $`tar -xzf ${archivePath}`.cwd(distPath)",
        "comment_created_at": "2025-09-19T04:03:13+00:00",
        "comment_author": "rekram1-node",
        "comment_body": ".quiet().nothrow() ",
        "pr_file_module": null
      },
      {
        "comment_id": "2362010612",
        "repo_full_name": "sst/opencode",
        "pr_number": 2547,
        "pr_file": "packages/opencode/src/lsp/server.ts",
        "discussion_id": "2361692414",
        "commented_code": "@@ -706,4 +707,97 @@ export namespace LSPServer {\n       }\n     },\n   }\n+\n+  export const JDTLS: Info = {\n+    id: \"jdtls\",\n+    root: NearestRoot([\"pom.xml\", \"build.gradle\", \"build.gradle.kts\", \".project\", \".classpath\"]),\n+    extensions: [\".java\"],\n+    async spawn(root) {\n+      const java = Bun.which(\"java\")\n+      if (!java) {\n+        log.error(\"Java 21 or newer is required to run the JDTLS. Please install it first.\")\n+        return\n+      }\n+      const javaMajorVersion = await $`java -version`.then(({ stderr }) => {\n+        const m = /\"(\\d+)\\.\\d+\\.\\d+\"/.exec(stderr + \"\")\n+        return !m ? undefined : parseInt(m[1])\n+      })\n+      if (javaMajorVersion == null || javaMajorVersion < 21) {\n+        log.error(\"JDTLS requires at least Java 21.\")\n+        return\n+      }\n+      if (Flag.OPENCODE_DISABLE_LSP_DOWNLOAD) return\n+      if (jdtlsInit == null) {\n+        jdtlsInit = initializeJdtls(java, root)\n+      }\n+      const jdtlsServer = await jdtlsInit\n+      if (jdtlsServer == null) return\n+      return {\n+        process: jdtlsServer,\n+      }\n+    },\n+  }\n+\n+  const initializeJdtls = async (java: string, root: string): Promise<ChildProcessWithoutNullStreams | undefined> => {\n+    log.info(\"Downloading JDTLS LSP server.\")\n+    const distPath = path.join(Global.Path.bin, \"jdtls\")\n+    const launcherDir = path.join(distPath, \"plugins\")\n+    const installed = await fs.exists(launcherDir)\n+    if (!installed) {\n+      await fs.mkdir(distPath, { recursive: true })\n+      const releaseURL =\n+        \"https://www.eclipse.org/downloads/download.php?file=/jdtls/snapshots/jdt-language-server-latest.tar.gz\"\n+      const archivePath = path.join(distPath, \"release.tar.gz\")\n+      await $`curl -L -o '${archivePath}' '${releaseURL}'`\n+      await $`tar -xzf ${archivePath}`.cwd(distPath)",
        "comment_created_at": "2025-09-19T07:15:33+00:00",
        "comment_author": "iwauo",
        "comment_body": "Ensured that every shell command execution is followed by quiet() and nothrow().",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2284079308",
    "pr_number": 2058,
    "pr_file": "packages/opencode/src/cli/cmd/upgrade.ts",
    "created_at": "2025-08-19T05:14:10+00:00",
    "commented_code": "spinner.start(\"Upgrading...\")\n     const err = await Installation.upgrade(method, target).catch((err) => err)\n     if (err) {\n-      spinner.stop(\"Upgrade failed\")\n+      spinner.stop(\"Upgrade failed\", 1)\n       if (err instanceof Installation.UpgradeFailedError) prompts.log.error(err.data.stderr)\n       else if (err instanceof Error) prompts.log.error(err.message)\n       prompts.outro(\"Done\")",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2284079308",
        "repo_full_name": "sst/opencode",
        "pr_number": 2058,
        "pr_file": "packages/opencode/src/cli/cmd/upgrade.ts",
        "discussion_id": "2284079308",
        "commented_code": "@@ -45,7 +45,7 @@ export const UpgradeCommand = {\n     spinner.start(\"Upgrading...\")\n     const err = await Installation.upgrade(method, target).catch((err) => err)\n     if (err) {\n-      spinner.stop(\"Upgrade failed\")\n+      spinner.stop(\"Upgrade failed\", 1)\n       if (err instanceof Installation.UpgradeFailedError) prompts.log.error(err.data.stderr)\n       else if (err instanceof Error) prompts.log.error(err.message)\n       prompts.outro(\"Done\")",
        "comment_created_at": "2025-08-19T05:14:10+00:00",
        "comment_author": "rekram1-node",
        "comment_body": "since we spinner.stop with error message we should have exit code 1 to indicate this is an error more clearly",
        "pr_file_module": null
      }
    ]
  }
]