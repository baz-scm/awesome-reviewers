[
  {
    "discussion_id": "2434741610",
    "pr_number": 3108,
    "pr_file": "packages/opencode/src/file/index.ts",
    "created_at": "2025-10-16T06:38:11+00:00",
    "commented_code": "}))\n   }\n \n-  export async function read(file: string) {\n+  export async function read(file: string): Promise<Content> {\n     using _ = log.time(\"read\", { file })\n     const project = Instance.project\n     const full = path.join(Instance.directory, file)\n-    const content = await Bun.file(full)\n+    const bunFile = Bun.file(full)\n+\n+    const isBinary = await isBinaryFile(full, bunFile)\n+\n+    if (isBinary) {\n+      const buffer = await bunFile.arrayBuffer().catch(() => new ArrayBuffer(0))\n+      const content = Buffer.from(buffer).toString(\"base64\")\n+      return { type: \"binary\", content, mimeType: getMimeType(full) }\n+    }\n+",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2434741610",
        "repo_full_name": "sst/opencode",
        "pr_number": 3108,
        "pr_file": "packages/opencode/src/file/index.ts",
        "discussion_id": "2434741610",
        "commented_code": "@@ -188,14 +244,25 @@ export namespace File {\n     }))\n   }\n \n-  export async function read(file: string) {\n+  export async function read(file: string): Promise<Content> {\n     using _ = log.time(\"read\", { file })\n     const project = Instance.project\n     const full = path.join(Instance.directory, file)\n-    const content = await Bun.file(full)\n+    const bunFile = Bun.file(full)\n+\n+    const isBinary = await isBinaryFile(full, bunFile)\n+\n+    if (isBinary) {\n+      const buffer = await bunFile.arrayBuffer().catch(() => new ArrayBuffer(0))\n+      const content = Buffer.from(buffer).toString(\"base64\")\n+      return { type: \"binary\", content, mimeType: getMimeType(full) }\n+    }\n+",
        "comment_created_at": "2025-10-16T06:38:11+00:00",
        "comment_author": "rekram1-node",
        "comment_body": "For images would it be best to base64 encode them here? Should we return raw bytes?\r\n\r\nIdk maybe we should take some inspiration from S3 on this one... \r\n\r\nWhats the most common?",
        "pr_file_module": null
      },
      {
        "comment_id": "2435158396",
        "repo_full_name": "sst/opencode",
        "pr_number": 3108,
        "pr_file": "packages/opencode/src/file/index.ts",
        "discussion_id": "2434741610",
        "commented_code": "@@ -188,14 +244,25 @@ export namespace File {\n     }))\n   }\n \n-  export async function read(file: string) {\n+  export async function read(file: string): Promise<Content> {\n     using _ = log.time(\"read\", { file })\n     const project = Instance.project\n     const full = path.join(Instance.directory, file)\n-    const content = await Bun.file(full)\n+    const bunFile = Bun.file(full)\n+\n+    const isBinary = await isBinaryFile(full, bunFile)\n+\n+    if (isBinary) {\n+      const buffer = await bunFile.arrayBuffer().catch(() => new ArrayBuffer(0))\n+      const content = Buffer.from(buffer).toString(\"base64\")\n+      return { type: \"binary\", content, mimeType: getMimeType(full) }\n+    }\n+",
        "comment_created_at": "2025-10-16T09:09:09+00:00",
        "comment_author": "kcrommett",
        "comment_body": "Sticking with base64. We\u2019re shipping file content inside a JSON payload so it needs to be text-safe, and base64 is the de facto approach (AWS S3\u2019s JSON APIs do the same). Returning raw bytes would force a binary response instead of the existing schema, so we\u2019d lose compatibility with the current endpoint. With the new encoding: \"base64\" flag, clients can reliably decode via Buffer.from(content, \"base64\") or similar.",
        "pr_file_module": null
      },
      {
        "comment_id": "2435923588",
        "repo_full_name": "sst/opencode",
        "pr_number": 3108,
        "pr_file": "packages/opencode/src/file/index.ts",
        "discussion_id": "2434741610",
        "commented_code": "@@ -188,14 +244,25 @@ export namespace File {\n     }))\n   }\n \n-  export async function read(file: string) {\n+  export async function read(file: string): Promise<Content> {\n     using _ = log.time(\"read\", { file })\n     const project = Instance.project\n     const full = path.join(Instance.directory, file)\n-    const content = await Bun.file(full)\n+    const bunFile = Bun.file(full)\n+\n+    const isBinary = await isBinaryFile(full, bunFile)\n+\n+    if (isBinary) {\n+      const buffer = await bunFile.arrayBuffer().catch(() => new ArrayBuffer(0))\n+      const content = Buffer.from(buffer).toString(\"base64\")\n+      return { type: \"binary\", content, mimeType: getMimeType(full) }\n+    }\n+",
        "comment_created_at": "2025-10-16T13:28:44+00:00",
        "comment_author": "rekram1-node",
        "comment_body": "sweet ill test your latest changes and then this should be good to go. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2168831949",
    "pr_number": 407,
    "pr_file": "packages/opencode/src/provider/provider.ts",
    "created_at": "2025-06-26T11:21:11+00:00",
    "commented_code": "options: {},\n       }\n     },\n+    google: async (provider) => {\n+      const access = await AuthGoogle.access()\n+      if (!access) return { autoload: false }\n+      \n+      // Set cost to 0 for OAuth authenticated requests\n+      for (const model of Object.values(provider.models)) {\n+        model.cost = {\n+          input: 0,\n+          output: 0,\n+        }\n+      }",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2168831949",
        "repo_full_name": "sst/opencode",
        "pr_number": 407,
        "pr_file": "packages/opencode/src/provider/provider.ts",
        "discussion_id": "2168831949",
        "commented_code": "@@ -125,6 +126,176 @@ export namespace Provider {\n         options: {},\n       }\n     },\n+    google: async (provider) => {\n+      const access = await AuthGoogle.access()\n+      if (!access) return { autoload: false }\n+      \n+      // Set cost to 0 for OAuth authenticated requests\n+      for (const model of Object.values(provider.models)) {\n+        model.cost = {\n+          input: 0,\n+          output: 0,\n+        }\n+      }",
        "comment_created_at": "2025-06-26T11:21:11+00:00",
        "comment_author": "aryasaatvik",
        "comment_body": "added this for parity with anthropic oauth. i don't like this. can we calculate the costs for oauth based logins (anthropic, google, etc.) but render a strikethrough to show its discounted?",
        "pr_file_module": null
      },
      {
        "comment_id": "2169265064",
        "repo_full_name": "sst/opencode",
        "pr_number": 407,
        "pr_file": "packages/opencode/src/provider/provider.ts",
        "discussion_id": "2168831949",
        "commented_code": "@@ -125,6 +126,176 @@ export namespace Provider {\n         options: {},\n       }\n     },\n+    google: async (provider) => {\n+      const access = await AuthGoogle.access()\n+      if (!access) return { autoload: false }\n+      \n+      // Set cost to 0 for OAuth authenticated requests\n+      for (const model of Object.values(provider.models)) {\n+        model.cost = {\n+          input: 0,\n+          output: 0,\n+        }\n+      }",
        "comment_created_at": "2025-06-26T14:52:03+00:00",
        "comment_author": "thdxr",
        "comment_body": "strike through is a good idea - we've been thinking about how to display this",
        "pr_file_module": null
      }
    ]
  }
]