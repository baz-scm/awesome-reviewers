[
  {
    "discussion_id": "2217332539",
    "pr_number": 1139,
    "pr_file": "packages/tui/internal/components/chat/message.go",
    "created_at": "2025-07-19T14:26:11+00:00",
    "commented_code": "stdout := metadata[\"stdout\"]\n \t\t\tif stdout != nil {\n \t\t\t\tcommand := toolInputMap[\"command\"].(string)\n-\t\t\t\tbody = fmt.Sprintf(\"```console\n> %s\n%s```\", command, stdout)\n+\t\t\t\tout := util.StripAnsi(fmt.Sprintf(\"%s\", stdout))\n+\t\t\t\tbody = fmt.Sprintf(\"```console\n> %s\n%s```\", command, out)",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2217332539",
        "repo_full_name": "sst/opencode",
        "pr_number": 1139,
        "pr_file": "packages/tui/internal/components/chat/message.go",
        "discussion_id": "2217332539",
        "commented_code": "@@ -371,7 +371,8 @@ func renderToolDetails(\n \t\t\tstdout := metadata[\"stdout\"]\n \t\t\tif stdout != nil {\n \t\t\t\tcommand := toolInputMap[\"command\"].(string)\n-\t\t\t\tbody = fmt.Sprintf(\"```console\\n> %s\\n%s```\", command, stdout)\n+\t\t\t\tout := util.StripAnsi(fmt.Sprintf(\"%s\", stdout))\n+\t\t\t\tbody = fmt.Sprintf(\"```console\\n> %s\\n%s```\", command, out)",
        "comment_created_at": "2025-07-19T14:26:11+00:00",
        "comment_author": "adamdotdevin",
        "comment_body": "there's actually `ansi.Strip` usage elsewhere in the codebase, can you leverage the existing lib we use (charm/x/ansi i think)?",
        "pr_file_module": null
      },
      {
        "comment_id": "2217374561",
        "repo_full_name": "sst/opencode",
        "pr_number": 1139,
        "pr_file": "packages/tui/internal/components/chat/message.go",
        "discussion_id": "2217332539",
        "commented_code": "@@ -371,7 +371,8 @@ func renderToolDetails(\n \t\t\tstdout := metadata[\"stdout\"]\n \t\t\tif stdout != nil {\n \t\t\t\tcommand := toolInputMap[\"command\"].(string)\n-\t\t\t\tbody = fmt.Sprintf(\"```console\\n> %s\\n%s```\", command, stdout)\n+\t\t\t\tout := util.StripAnsi(fmt.Sprintf(\"%s\", stdout))\n+\t\t\t\tbody = fmt.Sprintf(\"```console\\n> %s\\n%s```\", command, out)",
        "comment_created_at": "2025-07-19T16:57:20+00:00",
        "comment_author": "adamdotdevin",
        "comment_body": "did you see this comment @rekram1-node ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2217374969",
        "repo_full_name": "sst/opencode",
        "pr_number": 1139,
        "pr_file": "packages/tui/internal/components/chat/message.go",
        "discussion_id": "2217332539",
        "commented_code": "@@ -371,7 +371,8 @@ func renderToolDetails(\n \t\t\tstdout := metadata[\"stdout\"]\n \t\t\tif stdout != nil {\n \t\t\t\tcommand := toolInputMap[\"command\"].(string)\n-\t\t\t\tbody = fmt.Sprintf(\"```console\\n> %s\\n%s```\", command, stdout)\n+\t\t\t\tout := util.StripAnsi(fmt.Sprintf(\"%s\", stdout))\n+\t\t\t\tbody = fmt.Sprintf(\"```console\\n> %s\\n%s```\", command, out)",
        "comment_created_at": "2025-07-19T16:59:09+00:00",
        "comment_author": "rekram1-node",
        "comment_body": "Ah I should've tried to see if yall already had something, oopsie ",
        "pr_file_module": null
      },
      {
        "comment_id": "2217375359",
        "repo_full_name": "sst/opencode",
        "pr_number": 1139,
        "pr_file": "packages/tui/internal/components/chat/message.go",
        "discussion_id": "2217332539",
        "commented_code": "@@ -371,7 +371,8 @@ func renderToolDetails(\n \t\t\tstdout := metadata[\"stdout\"]\n \t\t\tif stdout != nil {\n \t\t\t\tcommand := toolInputMap[\"command\"].(string)\n-\t\t\t\tbody = fmt.Sprintf(\"```console\\n> %s\\n%s```\", command, stdout)\n+\t\t\t\tout := util.StripAnsi(fmt.Sprintf(\"%s\", stdout))\n+\t\t\t\tbody = fmt.Sprintf(\"```console\\n> %s\\n%s```\", command, out)",
        "comment_created_at": "2025-07-19T17:01:11+00:00",
        "comment_author": "adamdotdevin",
        "comment_body": "no worries!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2204758332",
    "pr_number": 955,
    "pr_file": "packages/tui/internal/components/list/list.go",
    "created_at": "2025-07-14T12:19:06+00:00",
    "commented_code": "key.WithKeys(\"j\"),\n \t\tkey.WithHelp(\"j\", \"next list item\"),\n \t),\n+\tCtrlP: key.NewBinding(\n+\t\tkey.WithKeys(\"ctrl+p\"),\n+\t\tkey.WithHelp(\"ctrl+p\", \"previous list item\"),\n+\t),\n+\tCtrlN: key.NewBinding(\n+\t\tkey.WithKeys(\"ctrl+n\"),\n+\t\tkey.WithHelp(\"ctrl+n\", \"next list item\"),\n+\t),",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2204758332",
        "repo_full_name": "sst/opencode",
        "pr_number": 955,
        "pr_file": "packages/tui/internal/components/list/list.go",
        "discussion_id": "2204758332",
        "commented_code": "@@ -61,6 +63,14 @@ var simpleListKeys = listKeyMap{\n \t\tkey.WithKeys(\"j\"),\n \t\tkey.WithHelp(\"j\", \"next list item\"),\n \t),\n+\tCtrlP: key.NewBinding(\n+\t\tkey.WithKeys(\"ctrl+p\"),\n+\t\tkey.WithHelp(\"ctrl+p\", \"previous list item\"),\n+\t),\n+\tCtrlN: key.NewBinding(\n+\t\tkey.WithKeys(\"ctrl+n\"),\n+\t\tkey.WithHelp(\"ctrl+n\", \"next list item\"),\n+\t),",
        "comment_created_at": "2025-07-14T12:19:06+00:00",
        "comment_author": "adamdotdevin",
        "comment_body": "let's just add `ctrl+p` to the `Up` binding, and `ctrl+n` to the `Down` binding, won't need to handle these separately. the alpha keys are handled separately only bc for some lists we shouldn't allow this (like when you need to still be able to type into a filter/etc). you then should be able to leave the `Update` switch statement untouched.",
        "pr_file_module": null
      },
      {
        "comment_id": "2205135655",
        "repo_full_name": "sst/opencode",
        "pr_number": 955,
        "pr_file": "packages/tui/internal/components/list/list.go",
        "discussion_id": "2204758332",
        "commented_code": "@@ -61,6 +63,14 @@ var simpleListKeys = listKeyMap{\n \t\tkey.WithKeys(\"j\"),\n \t\tkey.WithHelp(\"j\", \"next list item\"),\n \t),\n+\tCtrlP: key.NewBinding(\n+\t\tkey.WithKeys(\"ctrl+p\"),\n+\t\tkey.WithHelp(\"ctrl+p\", \"previous list item\"),\n+\t),\n+\tCtrlN: key.NewBinding(\n+\t\tkey.WithKeys(\"ctrl+n\"),\n+\t\tkey.WithHelp(\"ctrl+n\", \"next list item\"),\n+\t),",
        "comment_created_at": "2025-07-14T14:49:09+00:00",
        "comment_author": "dkarter",
        "comment_body": "Good call! Done!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2196201107",
    "pr_number": 808,
    "pr_file": "packages/tui/internal/components/status/status.go",
    "created_at": "2025-07-09T23:39:53+00:00",
    "commented_code": "t := theme.CurrentTheme()\n \tlogo := m.logo()\n \n+\thomePath, err := os.UserHomeDir()",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2196201107",
        "repo_full_name": "sst/opencode",
        "pr_number": 808,
        "pr_file": "packages/tui/internal/components/status/status.go",
        "discussion_id": "2196201107",
        "commented_code": "@@ -89,11 +90,16 @@ func (m statusComponent) View() string {\n \tt := theme.CurrentTheme()\n \tlogo := m.logo()\n \n+\thomePath, err := os.UserHomeDir()",
        "comment_created_at": "2025-07-09T23:39:53+00:00",
        "comment_author": "adamdotdevin",
        "comment_body": "`View` gets called quite a lot, coupd we do this call in `Init` and store on the status component model?",
        "pr_file_module": null
      },
      {
        "comment_id": "2196476777",
        "repo_full_name": "sst/opencode",
        "pr_number": 808,
        "pr_file": "packages/tui/internal/components/status/status.go",
        "discussion_id": "2196201107",
        "commented_code": "@@ -89,11 +90,16 @@ func (m statusComponent) View() string {\n \tt := theme.CurrentTheme()\n \tlogo := m.logo()\n \n+\thomePath, err := os.UserHomeDir()",
        "comment_created_at": "2025-07-10T03:58:07+00:00",
        "comment_author": "joshmedeski",
        "comment_body": "Sure, great idea",
        "pr_file_module": null
      },
      {
        "comment_id": "2196487974",
        "repo_full_name": "sst/opencode",
        "pr_number": 808,
        "pr_file": "packages/tui/internal/components/status/status.go",
        "discussion_id": "2196201107",
        "commented_code": "@@ -89,11 +90,16 @@ func (m statusComponent) View() string {\n \tt := theme.CurrentTheme()\n \tlogo := m.logo()\n \n+\thomePath, err := os.UserHomeDir()",
        "comment_created_at": "2025-07-10T04:09:39+00:00",
        "comment_author": "joshmedeski",
        "comment_body": "It made more sense to put it on the constructor since it's a static value and required more code changes trying to put it in the Init.",
        "pr_file_module": null
      }
    ]
  }
]