[
  {
    "discussion_id": "2157848679",
    "pr_number": 139,
    "pr_file": "packages/tui/internal/theme/catppuccin.go",
    "created_at": "2025-06-20T01:07:23+00:00",
    "commented_code": "+package theme\n+\n+import (\n+\t\"github.com/charmbracelet/lipgloss/v2\"\n+\t\"github.com/charmbracelet/lipgloss/v2/compat\"\n+)\n+\n+// CatppuccinMochaTheme implements the Theme interface with Catppuccin Mocha colors.\n+// Based on the official Catppuccin Mocha palette.\n+type CatppuccinMochaTheme struct {\n+\tBaseTheme\n+}\n+\n+// NewCatppuccinMochaTheme creates a new instance of the Catppuccin Mocha theme.\n+func NewCatppuccinMochaTheme() *CatppuccinMochaTheme {\n+\t// Catppuccin Mocha color palette - official colors\n+\t// Base colors (backgrounds and surfaces)\n+\tbase := \"#1e1e2e\"       // main background\n+\tmantle := \"#181825\"     // darker background\n+\t\n+\t// Surface colors (UI elements)\n+\tsurface0 := \"#313244\"   // subtle UI elements\n+\tsurface1 := \"#45475a\"   // UI element backgrounds\n+\t\n+\t// Overlay colors (borders and separators)\n+\toverlay0 := \"#6c7086\"   // muted borders\n+\toverlay1 := \"#7f849c\"   // borders\n+\toverlay2 := \"#9399b2\"   // active borders\n+\t\n+\t// Text colors\n+\tsubtext0 := \"#a6adc8\"   // muted text\n+\tsubtext1 := \"#bac2de\"   // secondary text\n+\ttext := \"#cdd6f4\"       // primary text\n+\t\n+\t// Accent colors - Catppuccin signature colors\n+\tflamingo := \"#f2cdcd\"\n+\tpink := \"#f5c2e7\"\n+\tmauve := \"#cba6f7\"      // purple\n+\tred := \"#f38ba8\"\n+\tmaroon := \"#eba0ac\"\n+\tpeach := \"#fab387\"      // orange\n+\tyellow := \"#f9e2af\"\n+\tgreen := \"#a6e3a1\"\n+\tteal := \"#94e2d5\"\n+\tsky := \"#89dceb\"\n+\tsapphire := \"#74c7ec\"\n+\tblue := \"#89b4fa\"\n+\tlavender := \"#b4befe\"\n+\t\n+\t// Light mode colors (Catppuccin Latte variant)\n+\tlightBase := \"#eff1f5\"      // main background\n+\tlightMantle := \"#e6e9ef\"    // darker background\n+\tlightSurface0 := \"#ccd0da\"  // subtle UI elements\n+\tlightSurface1 := \"#bcc0cc\"  // UI element backgrounds\n+\tlightOverlay0 := \"#9ca0b0\"  // muted borders\n+\tlightOverlay1 := \"#8c8fa1\"  // borders\n+\tlightOverlay2 := \"#7c7f93\"  // active borders\n+\tlightSubtext0 := \"#6c6f85\"  // muted text\n+\tlightSubtext1 := \"#5c5f77\"  // secondary text\n+\tlightText := \"#4c4f69\"      // primary text\n+\t\n+\t// Light mode accent colors\n+\tlightRed := \"#d20f39\"\n+\tlightMaroon := \"#e64553\"\n+\tlightPeach := \"#fe640b\"\n+\tlightYellow := \"#df8e1d\"\n+\tlightGreen := \"#40a02b\"\n+\tlightTeal := \"#179299\"\n+\tlightSky := \"#04a5e5\"\n+\tlightSapphire := \"#209fb5\"\n+\tlightBlue := \"#1e66f5\"\n+\tlightLavender := \"#7287fd\"\n+\tlightMauve := \"#8839ef\"\n+\tlightPink := \"#ea76cb\"\n+\n+\ttheme := &CatppuccinMochaTheme{}\n+\n+\t// Base colors\n+\ttheme.PrimaryColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(mauve),\n+\t\tLight: lipgloss.Color(lightMauve),\n+\t}\n+\ttheme.SecondaryColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(blue),\n+\t\tLight: lipgloss.Color(lightBlue),\n+\t}\n+\ttheme.AccentColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(peach),\n+\t\tLight: lipgloss.Color(lightPeach),\n+\t}\n+\n+\t// Status colors\n+\ttheme.ErrorColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(red),\n+\t\tLight: lipgloss.Color(lightRed),\n+\t}\n+\ttheme.WarningColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(yellow),\n+\t\tLight: lipgloss.Color(lightYellow),\n+\t}\n+\ttheme.SuccessColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(green),\n+\t\tLight: lipgloss.Color(lightGreen),\n+\t}\n+\ttheme.InfoColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(sky),\n+\t\tLight: lipgloss.Color(lightSky),\n+\t}\n+\n+\t// Text colors\n+\ttheme.TextColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(text),\n+\t\tLight: lipgloss.Color(lightText),\n+\t}\n+\ttheme.TextMutedColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(subtext1),\n+\t\tLight: lipgloss.Color(lightSubtext1),\n+\t}\n+\n+\t// Background colors\n+\ttheme.BackgroundColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(base),\n+\t\tLight: lipgloss.Color(lightBase),\n+\t}\n+\ttheme.BackgroundSubtleColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(mantle),\n+\t\tLight: lipgloss.Color(lightMantle),\n+\t}\n+\ttheme.BackgroundElementColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(surface0),\n+\t\tLight: lipgloss.Color(lightSurface0),\n+\t}\n+\n+\t// Border colors\n+\ttheme.BorderColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(overlay1),\n+\t\tLight: lipgloss.Color(lightOverlay1),\n+\t}\n+\ttheme.BorderActiveColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(overlay2),\n+\t\tLight: lipgloss.Color(lightOverlay2),\n+\t}\n+\ttheme.BorderSubtleColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(overlay0),\n+\t\tLight: lipgloss.Color(lightOverlay0),\n+\t}\n+\n+\t// Diff view colors\n+\ttheme.DiffAddedColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(green),\n+\t\tLight: lipgloss.Color(lightGreen),\n+\t}\n+\ttheme.DiffRemovedColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(red),\n+\t\tLight: lipgloss.Color(lightRed),\n+\t}\n+\ttheme.DiffContextColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(subtext0),\n+\t\tLight: lipgloss.Color(lightSubtext0),\n+\t}\n+\ttheme.DiffHunkHeaderColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(lavender),\n+\t\tLight: lipgloss.Color(lightLavender),\n+\t}\n+\ttheme.DiffHighlightAddedColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(teal),\n+\t\tLight: lipgloss.Color(lightTeal),\n+\t}\n+\ttheme.DiffHighlightRemovedColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(maroon),\n+\t\tLight: lipgloss.Color(lightMaroon),\n+\t}\n+\ttheme.DiffAddedBgColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(\"#1e2e1e\"),\n+\t\tLight: lipgloss.Color(\"#d5f5d5\"),\n+\t}\n+\ttheme.DiffRemovedBgColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(\"#2e1e1e\"),\n+\t\tLight: lipgloss.Color(\"#f5d5d5\"),\n+\t}\n+\ttheme.DiffContextBgColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(mantle),\n+\t\tLight: lipgloss.Color(lightMantle),\n+\t}\n+\ttheme.DiffLineNumberColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(surface1),\n+\t\tLight: lipgloss.Color(lightSurface1),\n+\t}\n+\ttheme.DiffAddedLineNumberBgColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(\"#1a2a1a\"),\n+\t\tLight: lipgloss.Color(\"#c5e5c5\"),\n+\t}\n+\ttheme.DiffRemovedLineNumberBgColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(\"#2a1a1a\"),\n+\t\tLight: lipgloss.Color(\"#e5c5c5\"),\n+\t}\n+\n+\t// Markdown colors\n+\ttheme.MarkdownTextColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(text),\n+\t\tLight: lipgloss.Color(lightText),\n+\t}\n+\ttheme.MarkdownHeadingColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(mauve),\n+\t\tLight: lipgloss.Color(lightMauve),\n+\t}\n+\ttheme.MarkdownLinkColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(blue),\n+\t\tLight: lipgloss.Color(lightBlue),\n+\t}\n+\ttheme.MarkdownLinkTextColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(sapphire),\n+\t\tLight: lipgloss.Color(lightSapphire),\n+\t}\n+\ttheme.MarkdownCodeColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(green),\n+\t\tLight: lipgloss.Color(lightGreen),\n+\t}\n+\ttheme.MarkdownBlockQuoteColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(yellow),\n+\t\tLight: lipgloss.Color(lightYellow),\n+\t}\n+\ttheme.MarkdownEmphColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(pink),\n+\t\tLight: lipgloss.Color(lightPink),\n+\t}\n+\ttheme.MarkdownStrongColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(peach),\n+\t\tLight: lipgloss.Color(lightPeach),\n+\t}\n+\ttheme.MarkdownHorizontalRuleColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(overlay1),\n+\t\tLight: lipgloss.Color(lightOverlay1),\n+\t}\n+\ttheme.MarkdownListItemColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(blue),\n+\t\tLight: lipgloss.Color(lightBlue),\n+\t}\n+\ttheme.MarkdownListEnumerationColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(sapphire),\n+\t\tLight: lipgloss.Color(lightSapphire),\n+\t}\n+\ttheme.MarkdownImageColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(lavender),\n+\t\tLight: lipgloss.Color(lightLavender),\n+\t}\n+\ttheme.MarkdownImageTextColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(sky),\n+\t\tLight: lipgloss.Color(lightSky),\n+\t}\n+\ttheme.MarkdownCodeBlockColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(text),\n+\t\tLight: lipgloss.Color(lightText),\n+\t}\n+\n+\t// Syntax highlighting colors\n+\ttheme.SyntaxCommentColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(subtext0),\n+\t\tLight: lipgloss.Color(lightSubtext0),\n+\t}\n+\ttheme.SyntaxKeywordColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(mauve),\n+\t\tLight: lipgloss.Color(lightMauve),\n+\t}\n+\ttheme.SyntaxFunctionColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(blue),\n+\t\tLight: lipgloss.Color(lightBlue),\n+\t}\n+\ttheme.SyntaxVariableColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(flamingo),\n+\t\tLight: lipgloss.Color(lightRed),\n+\t}\n+\ttheme.SyntaxStringColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(green),\n+\t\tLight: lipgloss.Color(lightGreen),\n+\t}\n+\ttheme.SyntaxNumberColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(peach),\n+\t\tLight: lipgloss.Color(lightPeach),\n+\t}\n+\ttheme.SyntaxTypeColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(yellow),\n+\t\tLight: lipgloss.Color(lightYellow),\n+\t}\n+\ttheme.SyntaxOperatorColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(sky),\n+\t\tLight: lipgloss.Color(lightSky),\n+\t}\n+\ttheme.SyntaxPunctuationColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(overlay2),\n+\t\tLight: lipgloss.Color(lightOverlay2),\n+\t}\n+\n+\treturn theme\n+}\n+\n+func init() {\n+\t// Register the Catppuccin Mocha theme with the theme manager\n+\tRegisterTheme(\"catppuccin\", NewCatppuccinMochaTheme())",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2157848679",
        "repo_full_name": "sst/opencode",
        "pr_number": 139,
        "pr_file": "packages/tui/internal/theme/catppuccin.go",
        "discussion_id": "2157848679",
        "commented_code": "@@ -0,0 +1,300 @@\n+package theme\n+\n+import (\n+\t\"github.com/charmbracelet/lipgloss/v2\"\n+\t\"github.com/charmbracelet/lipgloss/v2/compat\"\n+)\n+\n+// CatppuccinMochaTheme implements the Theme interface with Catppuccin Mocha colors.\n+// Based on the official Catppuccin Mocha palette.\n+type CatppuccinMochaTheme struct {\n+\tBaseTheme\n+}\n+\n+// NewCatppuccinMochaTheme creates a new instance of the Catppuccin Mocha theme.\n+func NewCatppuccinMochaTheme() *CatppuccinMochaTheme {\n+\t// Catppuccin Mocha color palette - official colors\n+\t// Base colors (backgrounds and surfaces)\n+\tbase := \"#1e1e2e\"       // main background\n+\tmantle := \"#181825\"     // darker background\n+\t\n+\t// Surface colors (UI elements)\n+\tsurface0 := \"#313244\"   // subtle UI elements\n+\tsurface1 := \"#45475a\"   // UI element backgrounds\n+\t\n+\t// Overlay colors (borders and separators)\n+\toverlay0 := \"#6c7086\"   // muted borders\n+\toverlay1 := \"#7f849c\"   // borders\n+\toverlay2 := \"#9399b2\"   // active borders\n+\t\n+\t// Text colors\n+\tsubtext0 := \"#a6adc8\"   // muted text\n+\tsubtext1 := \"#bac2de\"   // secondary text\n+\ttext := \"#cdd6f4\"       // primary text\n+\t\n+\t// Accent colors - Catppuccin signature colors\n+\tflamingo := \"#f2cdcd\"\n+\tpink := \"#f5c2e7\"\n+\tmauve := \"#cba6f7\"      // purple\n+\tred := \"#f38ba8\"\n+\tmaroon := \"#eba0ac\"\n+\tpeach := \"#fab387\"      // orange\n+\tyellow := \"#f9e2af\"\n+\tgreen := \"#a6e3a1\"\n+\tteal := \"#94e2d5\"\n+\tsky := \"#89dceb\"\n+\tsapphire := \"#74c7ec\"\n+\tblue := \"#89b4fa\"\n+\tlavender := \"#b4befe\"\n+\t\n+\t// Light mode colors (Catppuccin Latte variant)\n+\tlightBase := \"#eff1f5\"      // main background\n+\tlightMantle := \"#e6e9ef\"    // darker background\n+\tlightSurface0 := \"#ccd0da\"  // subtle UI elements\n+\tlightSurface1 := \"#bcc0cc\"  // UI element backgrounds\n+\tlightOverlay0 := \"#9ca0b0\"  // muted borders\n+\tlightOverlay1 := \"#8c8fa1\"  // borders\n+\tlightOverlay2 := \"#7c7f93\"  // active borders\n+\tlightSubtext0 := \"#6c6f85\"  // muted text\n+\tlightSubtext1 := \"#5c5f77\"  // secondary text\n+\tlightText := \"#4c4f69\"      // primary text\n+\t\n+\t// Light mode accent colors\n+\tlightRed := \"#d20f39\"\n+\tlightMaroon := \"#e64553\"\n+\tlightPeach := \"#fe640b\"\n+\tlightYellow := \"#df8e1d\"\n+\tlightGreen := \"#40a02b\"\n+\tlightTeal := \"#179299\"\n+\tlightSky := \"#04a5e5\"\n+\tlightSapphire := \"#209fb5\"\n+\tlightBlue := \"#1e66f5\"\n+\tlightLavender := \"#7287fd\"\n+\tlightMauve := \"#8839ef\"\n+\tlightPink := \"#ea76cb\"\n+\n+\ttheme := &CatppuccinMochaTheme{}\n+\n+\t// Base colors\n+\ttheme.PrimaryColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(mauve),\n+\t\tLight: lipgloss.Color(lightMauve),\n+\t}\n+\ttheme.SecondaryColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(blue),\n+\t\tLight: lipgloss.Color(lightBlue),\n+\t}\n+\ttheme.AccentColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(peach),\n+\t\tLight: lipgloss.Color(lightPeach),\n+\t}\n+\n+\t// Status colors\n+\ttheme.ErrorColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(red),\n+\t\tLight: lipgloss.Color(lightRed),\n+\t}\n+\ttheme.WarningColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(yellow),\n+\t\tLight: lipgloss.Color(lightYellow),\n+\t}\n+\ttheme.SuccessColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(green),\n+\t\tLight: lipgloss.Color(lightGreen),\n+\t}\n+\ttheme.InfoColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(sky),\n+\t\tLight: lipgloss.Color(lightSky),\n+\t}\n+\n+\t// Text colors\n+\ttheme.TextColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(text),\n+\t\tLight: lipgloss.Color(lightText),\n+\t}\n+\ttheme.TextMutedColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(subtext1),\n+\t\tLight: lipgloss.Color(lightSubtext1),\n+\t}\n+\n+\t// Background colors\n+\ttheme.BackgroundColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(base),\n+\t\tLight: lipgloss.Color(lightBase),\n+\t}\n+\ttheme.BackgroundSubtleColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(mantle),\n+\t\tLight: lipgloss.Color(lightMantle),\n+\t}\n+\ttheme.BackgroundElementColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(surface0),\n+\t\tLight: lipgloss.Color(lightSurface0),\n+\t}\n+\n+\t// Border colors\n+\ttheme.BorderColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(overlay1),\n+\t\tLight: lipgloss.Color(lightOverlay1),\n+\t}\n+\ttheme.BorderActiveColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(overlay2),\n+\t\tLight: lipgloss.Color(lightOverlay2),\n+\t}\n+\ttheme.BorderSubtleColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(overlay0),\n+\t\tLight: lipgloss.Color(lightOverlay0),\n+\t}\n+\n+\t// Diff view colors\n+\ttheme.DiffAddedColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(green),\n+\t\tLight: lipgloss.Color(lightGreen),\n+\t}\n+\ttheme.DiffRemovedColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(red),\n+\t\tLight: lipgloss.Color(lightRed),\n+\t}\n+\ttheme.DiffContextColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(subtext0),\n+\t\tLight: lipgloss.Color(lightSubtext0),\n+\t}\n+\ttheme.DiffHunkHeaderColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(lavender),\n+\t\tLight: lipgloss.Color(lightLavender),\n+\t}\n+\ttheme.DiffHighlightAddedColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(teal),\n+\t\tLight: lipgloss.Color(lightTeal),\n+\t}\n+\ttheme.DiffHighlightRemovedColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(maroon),\n+\t\tLight: lipgloss.Color(lightMaroon),\n+\t}\n+\ttheme.DiffAddedBgColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(\"#1e2e1e\"),\n+\t\tLight: lipgloss.Color(\"#d5f5d5\"),\n+\t}\n+\ttheme.DiffRemovedBgColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(\"#2e1e1e\"),\n+\t\tLight: lipgloss.Color(\"#f5d5d5\"),\n+\t}\n+\ttheme.DiffContextBgColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(mantle),\n+\t\tLight: lipgloss.Color(lightMantle),\n+\t}\n+\ttheme.DiffLineNumberColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(surface1),\n+\t\tLight: lipgloss.Color(lightSurface1),\n+\t}\n+\ttheme.DiffAddedLineNumberBgColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(\"#1a2a1a\"),\n+\t\tLight: lipgloss.Color(\"#c5e5c5\"),\n+\t}\n+\ttheme.DiffRemovedLineNumberBgColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(\"#2a1a1a\"),\n+\t\tLight: lipgloss.Color(\"#e5c5c5\"),\n+\t}\n+\n+\t// Markdown colors\n+\ttheme.MarkdownTextColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(text),\n+\t\tLight: lipgloss.Color(lightText),\n+\t}\n+\ttheme.MarkdownHeadingColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(mauve),\n+\t\tLight: lipgloss.Color(lightMauve),\n+\t}\n+\ttheme.MarkdownLinkColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(blue),\n+\t\tLight: lipgloss.Color(lightBlue),\n+\t}\n+\ttheme.MarkdownLinkTextColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(sapphire),\n+\t\tLight: lipgloss.Color(lightSapphire),\n+\t}\n+\ttheme.MarkdownCodeColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(green),\n+\t\tLight: lipgloss.Color(lightGreen),\n+\t}\n+\ttheme.MarkdownBlockQuoteColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(yellow),\n+\t\tLight: lipgloss.Color(lightYellow),\n+\t}\n+\ttheme.MarkdownEmphColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(pink),\n+\t\tLight: lipgloss.Color(lightPink),\n+\t}\n+\ttheme.MarkdownStrongColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(peach),\n+\t\tLight: lipgloss.Color(lightPeach),\n+\t}\n+\ttheme.MarkdownHorizontalRuleColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(overlay1),\n+\t\tLight: lipgloss.Color(lightOverlay1),\n+\t}\n+\ttheme.MarkdownListItemColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(blue),\n+\t\tLight: lipgloss.Color(lightBlue),\n+\t}\n+\ttheme.MarkdownListEnumerationColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(sapphire),\n+\t\tLight: lipgloss.Color(lightSapphire),\n+\t}\n+\ttheme.MarkdownImageColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(lavender),\n+\t\tLight: lipgloss.Color(lightLavender),\n+\t}\n+\ttheme.MarkdownImageTextColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(sky),\n+\t\tLight: lipgloss.Color(lightSky),\n+\t}\n+\ttheme.MarkdownCodeBlockColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(text),\n+\t\tLight: lipgloss.Color(lightText),\n+\t}\n+\n+\t// Syntax highlighting colors\n+\ttheme.SyntaxCommentColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(subtext0),\n+\t\tLight: lipgloss.Color(lightSubtext0),\n+\t}\n+\ttheme.SyntaxKeywordColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(mauve),\n+\t\tLight: lipgloss.Color(lightMauve),\n+\t}\n+\ttheme.SyntaxFunctionColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(blue),\n+\t\tLight: lipgloss.Color(lightBlue),\n+\t}\n+\ttheme.SyntaxVariableColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(flamingo),\n+\t\tLight: lipgloss.Color(lightRed),\n+\t}\n+\ttheme.SyntaxStringColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(green),\n+\t\tLight: lipgloss.Color(lightGreen),\n+\t}\n+\ttheme.SyntaxNumberColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(peach),\n+\t\tLight: lipgloss.Color(lightPeach),\n+\t}\n+\ttheme.SyntaxTypeColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(yellow),\n+\t\tLight: lipgloss.Color(lightYellow),\n+\t}\n+\ttheme.SyntaxOperatorColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(sky),\n+\t\tLight: lipgloss.Color(lightSky),\n+\t}\n+\ttheme.SyntaxPunctuationColor = compat.AdaptiveColor{\n+\t\tDark:  lipgloss.Color(overlay2),\n+\t\tLight: lipgloss.Color(lightOverlay2),\n+\t}\n+\n+\treturn theme\n+}\n+\n+func init() {\n+\t// Register the Catppuccin Mocha theme with the theme manager\n+\tRegisterTheme(\"catppuccin\", NewCatppuccinMochaTheme())",
        "comment_created_at": "2025-06-20T01:07:23+00:00",
        "comment_author": "ryanwinchester",
        "comment_body": "I think you should call it `catppuccin-mocha` in case the other variants get added\r\n\r\n```suggestion\r\n\tRegisterTheme(\"catppuccin-mocha\", NewCatppuccinMochaTheme())\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2093018183",
    "pr_number": 14,
    "pr_file": "internal/tui/components/dialog/setup.go",
    "created_at": "2025-05-16T13:08:55+00:00",
    "commented_code": "+package dialog\n+\n+import (\n+\t\"github.com/charmbracelet/bubbles/cursor\"\n+\t\"github.com/charmbracelet/bubbles/key\"\n+\t\"github.com/charmbracelet/bubbles/textinput\"\n+\ttea \"github.com/charmbracelet/bubbletea\"\n+\t\"github.com/charmbracelet/lipgloss\"\n+\t\"github.com/sst/opencode/internal/llm/models\"\n+\t\"github.com/sst/opencode/internal/tui/layout\"\n+\t\"github.com/sst/opencode/internal/tui/styles\"\n+\t\"github.com/sst/opencode/internal/tui/theme\"\n+\t\"github.com/sst/opencode/internal/tui/util\"\n+\t\"strings\"\n+)\n+\n+type SetupDialog interface {\n+\ttea.Model\n+\tlayout.Bindings\n+}\n+\n+// AvailableProviders returns a list of all available providers\n+func AvailableProviders() ([]models.ModelProvider, map[models.ModelProvider]string) {\n+\tproviderLabels := make(map[models.ModelProvider]string)\n+\tproviderLabels[models.ProviderAnthropic] = \"Anthropic\"\n+\tproviderLabels[models.ProviderAzure] = \"Azure\"\n+\tproviderLabels[models.ProviderBedrock] = \"Bedrock\"\n+\tproviderLabels[models.ProviderGemini] = \"Gemini\"\n+\tproviderLabels[models.ProviderGROQ] = \"Groq\"\n+\tproviderLabels[models.ProviderOpenAI] = \"OpenAI\"\n+\tproviderLabels[models.ProviderOpenRouter] = \"OpenRouter\"\n+\tproviderLabels[models.ProviderXAI] = \"xAI\"",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2093018183",
        "repo_full_name": "sst/opencode",
        "pr_number": 14,
        "pr_file": "internal/tui/components/dialog/setup.go",
        "discussion_id": "2093018183",
        "commented_code": "@@ -0,0 +1,547 @@\n+package dialog\n+\n+import (\n+\t\"github.com/charmbracelet/bubbles/cursor\"\n+\t\"github.com/charmbracelet/bubbles/key\"\n+\t\"github.com/charmbracelet/bubbles/textinput\"\n+\ttea \"github.com/charmbracelet/bubbletea\"\n+\t\"github.com/charmbracelet/lipgloss\"\n+\t\"github.com/sst/opencode/internal/llm/models\"\n+\t\"github.com/sst/opencode/internal/tui/layout\"\n+\t\"github.com/sst/opencode/internal/tui/styles\"\n+\t\"github.com/sst/opencode/internal/tui/theme\"\n+\t\"github.com/sst/opencode/internal/tui/util\"\n+\t\"strings\"\n+)\n+\n+type SetupDialog interface {\n+\ttea.Model\n+\tlayout.Bindings\n+}\n+\n+// AvailableProviders returns a list of all available providers\n+func AvailableProviders() ([]models.ModelProvider, map[models.ModelProvider]string) {\n+\tproviderLabels := make(map[models.ModelProvider]string)\n+\tproviderLabels[models.ProviderAnthropic] = \"Anthropic\"\n+\tproviderLabels[models.ProviderAzure] = \"Azure\"\n+\tproviderLabels[models.ProviderBedrock] = \"Bedrock\"\n+\tproviderLabels[models.ProviderGemini] = \"Gemini\"\n+\tproviderLabels[models.ProviderGROQ] = \"Groq\"\n+\tproviderLabels[models.ProviderOpenAI] = \"OpenAI\"\n+\tproviderLabels[models.ProviderOpenRouter] = \"OpenRouter\"\n+\tproviderLabels[models.ProviderXAI] = \"xAI\"",
        "comment_created_at": "2025-05-16T13:08:55+00:00",
        "comment_author": "adamdotdevin",
        "comment_body": "i think we need these friendly provider names/labels in the model switcher dialog as well, can you pull these out somewhere so that they can be leveraged there as well?",
        "pr_file_module": null
      },
      {
        "comment_id": "2093648778",
        "repo_full_name": "sst/opencode",
        "pr_number": 14,
        "pr_file": "internal/tui/components/dialog/setup.go",
        "discussion_id": "2093018183",
        "commented_code": "@@ -0,0 +1,547 @@\n+package dialog\n+\n+import (\n+\t\"github.com/charmbracelet/bubbles/cursor\"\n+\t\"github.com/charmbracelet/bubbles/key\"\n+\t\"github.com/charmbracelet/bubbles/textinput\"\n+\ttea \"github.com/charmbracelet/bubbletea\"\n+\t\"github.com/charmbracelet/lipgloss\"\n+\t\"github.com/sst/opencode/internal/llm/models\"\n+\t\"github.com/sst/opencode/internal/tui/layout\"\n+\t\"github.com/sst/opencode/internal/tui/styles\"\n+\t\"github.com/sst/opencode/internal/tui/theme\"\n+\t\"github.com/sst/opencode/internal/tui/util\"\n+\t\"strings\"\n+)\n+\n+type SetupDialog interface {\n+\ttea.Model\n+\tlayout.Bindings\n+}\n+\n+// AvailableProviders returns a list of all available providers\n+func AvailableProviders() ([]models.ModelProvider, map[models.ModelProvider]string) {\n+\tproviderLabels := make(map[models.ModelProvider]string)\n+\tproviderLabels[models.ProviderAnthropic] = \"Anthropic\"\n+\tproviderLabels[models.ProviderAzure] = \"Azure\"\n+\tproviderLabels[models.ProviderBedrock] = \"Bedrock\"\n+\tproviderLabels[models.ProviderGemini] = \"Gemini\"\n+\tproviderLabels[models.ProviderGROQ] = \"Groq\"\n+\tproviderLabels[models.ProviderOpenAI] = \"OpenAI\"\n+\tproviderLabels[models.ProviderOpenRouter] = \"OpenRouter\"\n+\tproviderLabels[models.ProviderXAI] = \"xAI\"",
        "comment_created_at": "2025-05-16T20:35:51+00:00",
        "comment_author": "l0gicgate",
        "comment_body": "Addressed via https://github.com/sst/opencode/pull/14/commits/455e5c1104d11d993135c420b7174d00b6e88fc9 and partly in https://github.com/sst/opencode/pull/14/commits/4e47ad68cd5632997d0af1652bab8209060ef696",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2142660069",
    "pr_number": 79,
    "pr_file": "cmd/root.go",
    "created_at": "2025-06-12T12:51:21+00:00",
    "commented_code": "// Setup the subscriptions, this will send services events to the TUI\n \t\tch, cancelSubs := setupSubscriptions(app, ctx)\n \n+\t\t// Start focus tracking\n+\t\tfocusTracker := util.NewFocusTracker(program)",
    "repo_full_name": "sst/opencode",
    "discussion_comments": [
      {
        "comment_id": "2142660069",
        "repo_full_name": "sst/opencode",
        "pr_number": 79,
        "pr_file": "cmd/root.go",
        "discussion_id": "2142660069",
        "commented_code": "@@ -155,6 +156,14 @@ to assist developers in writing, debugging, and understanding code directly from\n \t\t// Setup the subscriptions, this will send services events to the TUI\n \t\tch, cancelSubs := setupSubscriptions(app, ctx)\n \n+\t\t// Start focus tracking\n+\t\tfocusTracker := util.NewFocusTracker(program)",
        "comment_created_at": "2025-06-12T12:51:21+00:00",
        "comment_author": "Schniz",
        "comment_body": "considering asking it to avoid calling stuff \"util\" and just call it \"focus\" so `focus.NewTracker`",
        "pr_file_module": null
      }
    ]
  }
]