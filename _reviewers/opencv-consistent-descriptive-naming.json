[
  {
    "discussion_id": "2092504225",
    "pr_number": 27318,
    "pr_file": "modules/core/include/opencv2/core/mat.hpp",
    "created_at": "2025-05-16T07:35:23+00:00",
    "commented_code": "*/\n    void copyTo( OutputArray m, InputArray mask ) const;\n\n    /** @brief Overwrites the existing matrix\n\n    This method overwrites existing matrix data, just like copyTo().\n    But if it does not have a proper size or type before the operation, an exception is thrown.\n    This function is helpful to update ROI in an existing matrix.\n\n    If (re)allocation of destination memory is necessary, use copyTo() .\n\n    @param m Destination matrix.\n    If it does not have a proper size or type before the operation, an exception is thrown.\n\n    @sa copyTo\n\n     */\n    void overwriteTo( OutputArray m ) const;",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "2092504225",
        "repo_full_name": "opencv/opencv",
        "pr_number": 27318,
        "pr_file": "modules/core/include/opencv2/core/mat.hpp",
        "discussion_id": "2092504225",
        "commented_code": "@@ -1250,6 +1255,30 @@ class CV_EXPORTS Mat\n     */\n     void copyTo( OutputArray m, InputArray mask ) const;\n \n+    /** @brief Overwrites the existing matrix\n+\n+    This method overwrites existing matrix data, just like copyTo().\n+    But if it does not have a proper size or type before the operation, an exception is thrown.\n+    This function is helpful to update ROI in an existing matrix.\n+\n+    If (re)allocation of destination memory is necessary, use copyTo() .\n+\n+    @param m Destination matrix.\n+    If it does not have a proper size or type before the operation, an exception is thrown.\n+\n+    @sa copyTo\n+\n+     */\n+    void overwriteTo( OutputArray m ) const;",
        "comment_created_at": "2025-05-16T07:35:23+00:00",
        "comment_author": "opencv-alalek",
        "comment_body": "Just `writeTo()` ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2092623855",
        "repo_full_name": "opencv/opencv",
        "pr_number": 27318,
        "pr_file": "modules/core/include/opencv2/core/mat.hpp",
        "discussion_id": "2092504225",
        "commented_code": "@@ -1250,6 +1255,30 @@ class CV_EXPORTS Mat\n     */\n     void copyTo( OutputArray m, InputArray mask ) const;\n \n+    /** @brief Overwrites the existing matrix\n+\n+    This method overwrites existing matrix data, just like copyTo().\n+    But if it does not have a proper size or type before the operation, an exception is thrown.\n+    This function is helpful to update ROI in an existing matrix.\n+\n+    If (re)allocation of destination memory is necessary, use copyTo() .\n+\n+    @param m Destination matrix.\n+    If it does not have a proper size or type before the operation, an exception is thrown.\n+\n+    @sa copyTo\n+\n+     */\n+    void overwriteTo( OutputArray m ) const;",
        "comment_created_at": "2025-05-16T08:49:47+00:00",
        "comment_author": "Kumataro",
        "comment_body": "Thank you for your comment ! Naming functions is very difficult problem.\r\n\r\nIt is required to express the condition that src and dst must be of the same type and size.\r\nFor some verbs(`writeTo`, `updateTo`), I feel that the difference with copyTo() is hard to explain.\r\n\r\nBelow are some possible function names that I was considering:\r\n```c++\r\n(0) src.copyTo(roi); // currently\r\n(1) src.updateTo(roi);.\r\n(2) src.writeTo(roi);\r\n(3) src.overwriteTo(roi);\r\n(4) src.rewriteTo(roi);\r\n(5) src.recopyTo(roi);\r\n(6) src.copyToWithoutReallocation(roi); // too long.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2094111550",
        "repo_full_name": "opencv/opencv",
        "pr_number": 27318,
        "pr_file": "modules/core/include/opencv2/core/mat.hpp",
        "discussion_id": "2092504225",
        "commented_code": "@@ -1250,6 +1255,30 @@ class CV_EXPORTS Mat\n     */\n     void copyTo( OutputArray m, InputArray mask ) const;\n \n+    /** @brief Overwrites the existing matrix\n+\n+    This method overwrites existing matrix data, just like copyTo().\n+    But if it does not have a proper size or type before the operation, an exception is thrown.\n+    This function is helpful to update ROI in an existing matrix.\n+\n+    If (re)allocation of destination memory is necessary, use copyTo() .\n+\n+    @param m Destination matrix.\n+    If it does not have a proper size or type before the operation, an exception is thrown.\n+\n+    @sa copyTo\n+\n+     */\n+    void overwriteTo( OutputArray m ) const;",
        "comment_created_at": "2025-05-17T12:29:56+00:00",
        "comment_author": "Kumataro",
        "comment_body": "I reconsidered it again., `writeTo()` naming is suitable for this purpose, thank you very much ! I fixed it.\r\n\r\n- `src.writeTo(emptyMat)` makes an exception -> natural.\r\n- `src.writeTo(differentTypeMat)` makes an exception -> natural\r\n- `src.writeTo(differentSizeMat)` makes an exception -> natural.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2018137510",
    "pr_number": 27051,
    "pr_file": "modules/photo/include/opencv2/photo/ccm.hpp",
    "created_at": "2025-03-28T08:29:09+00:00",
    "commented_code": "// This file is part of OpenCV project.\n// It is subject to the license terms in the LICENSE file found in the top-level directory\n// of this distribution and at http://opencv.org/license.html.\n//\n// Author: Longbu Wang <wanglongbu@huawei.com.com>\n//         Jinheng Zhang <zhangjinheng1@huawei.com>\n//         Chenqi Shan <shanchenqi@huawei.com>\n\n#ifndef OPENCV_PHOTO_CCM_HPP\n#define OPENCV_PHOTO_CCM_HPP\n\n#include <opencv2/core.hpp>\n#include <opencv2/imgproc.hpp>\n\nnamespace cv\n{\nnamespace ccm\n{\n\n/** @defgroup ccm Color Correction module\n@{\n*/\n\n/** @brief Enum of the possible types of ccm.\n*/\nenum CCMType\n{\n    CCM_LINEAR,   ///< Uses a \\f$3\\times3\\f$ matrix to linearly transform RGB values without offsets.\n    CCM_AFFINE,   ///< Uses a \\f$4\\times3\\f$ matrix to affine transform RGB values with both scaling and offset terms.\n};\n\n/** @brief Enum of the possible types of initial method.\n*/\nenum InitialMethodType\n{\n    INITIAL_METHOD_WHITE_BALANCE,      ///< The white balance method. The initial value is:\\n\n                        /// \\f$\n                        /// M_{CCM}=\n                        /// \\begin{bmatrix}\n                        /// k_R & 0 & 0\\\\\n                        /// 0 & k_G & 0\\\\\n                        /// 0 & 0 & k_B\\\\\n                        /// \\end{bmatrix}\n                        /// \\f$\\n\n                        /// where\\n\n                        /// \\f$\n                        /// k_R=mean(R_{li}')/mean(R_{li})\\\\\n                        /// k_R=mean(G_{li}')/mean(G_{li})\\\\\n                        /// k_R=mean(B_{li}')/mean(B_{li})\n                        /// \\f$\n    INITIAL_METHOD_LEAST_SQUARE,       ///<the least square method is an optimal solution under the linear RGB distance function\n};\n/** @brief  Macbeth and Vinyl ColorChecker with 2deg D50\n*/\nenum ColorCheckerType {\n    COLORCHECKER_Macbeth,                ///< Macbeth ColorChecker\n    COLORCHECKER_Vinyl,                  ///< DKK ColorChecker\n    COLORCHECKER_DigitalSG,              ///< DigitalSG ColorChecker with 140 squares\n};\nenum COLOR_SPACE {\n    COLOR_SPACE_sRGB,                       ///< https://en.wikipedia.org/wiki/SRGB , RGB color space\n    COLOR_SPACE_sRGBL,                      ///< https://en.wikipedia.org/wiki/SRGB , linear RGB color space\n    COLOR_SPACE_AdobeRGB,                   ///< https://en.wikipedia.org/wiki/Adobe_RGB_color_space , RGB color space\n    COLOR_SPACE_AdobeRGBL,                  ///< https://en.wikipedia.org/wiki/Adobe_RGB_color_space , linear RGB color space\n    COLOR_SPACE_WideGamutRGB,               ///< https://en.wikipedia.org/wiki/Wide-gamut_RGB_color_space , RGB color space\n    COLOR_SPACE_WideGamutRGBL,              ///< https://en.wikipedia.org/wiki/Wide-gamut_RGB_color_space , linear RGB color space\n    COLOR_SPACE_ProPhotoRGB,                ///< https://en.wikipedia.org/wiki/ProPhoto_RGB_color_space , RGB color space\n    COLOR_SPACE_ProPhotoRGBL,               ///< https://en.wikipedia.org/wiki/ProPhoto_RGB_color_space , linear RGB color space\n    COLOR_SPACE_DCI_P3_RGB,                 ///< https://en.wikipedia.org/wiki/DCI-P3 , RGB color space\n    COLOR_SPACE_DCI_P3_RGBL,                ///< https://en.wikipedia.org/wiki/DCI-P3 , linear RGB color space\n    COLOR_SPACE_AppleRGB,                   ///< https://en.wikipedia.org/wiki/RGB_color_space , RGB color space\n    COLOR_SPACE_AppleRGBL,                  ///< https://en.wikipedia.org/wiki/RGB_color_space , linear RGB color space\n    COLOR_SPACE_REC_709_RGB,                ///< https://en.wikipedia.org/wiki/Rec._709 , RGB color space\n    COLOR_SPACE_REC_709_RGBL,               ///< https://en.wikipedia.org/wiki/Rec._709 , linear RGB color space\n    COLOR_SPACE_REC_2020_RGB,               ///< https://en.wikipedia.org/wiki/Rec._2020 , RGB color space\n    COLOR_SPACE_REC_2020_RGBL,              ///< https://en.wikipedia.org/wiki/Rec._2020 , linear RGB color space\n    COLOR_SPACE_XYZ_D65_2,                  ///< https://en.wikipedia.org/wiki/CIE_1931_color_space , non-RGB color space\n    COLOR_SPACE_XYZ_D65_10,                 ///< non-RGB color space\n    COLOR_SPACE_XYZ_D50_2,                  ///< non-RGB color space\n    COLOR_SPACE_XYZ_D50_10,                 ///< non-RGB color space\n    COLOR_SPACE_XYZ_A_2,                    ///< non-RGB color space\n    COLOR_SPACE_XYZ_A_10,                   ///< non-RGB color space\n    COLOR_SPACE_XYZ_D55_2,                  ///< non-RGB color space\n    COLOR_SPACE_XYZ_D55_10,                 ///< non-RGB color space\n    COLOR_SPACE_XYZ_D75_2,                  ///< non-RGB color space\n    COLOR_SPACE_XYZ_D75_10,                 ///< non-RGB color space\n    COLOR_SPACE_XYZ_E_2,                    ///< non-RGB color space\n    COLOR_SPACE_XYZ_E_10,                   ///< non-RGB color space\n    COLOR_SPACE_Lab_D65_2,                  ///< https://en.wikipedia.org/wiki/CIELAB_color_space , non-RGB color space\n    COLOR_SPACE_Lab_D65_10,                 ///< non-RGB color space\n    COLOR_SPACE_Lab_D50_2,                  ///< non-RGB color space\n    COLOR_SPACE_Lab_D50_10,                 ///< non-RGB color space\n    COLOR_SPACE_Lab_A_2,                    ///< non-RGB color space\n    COLOR_SPACE_Lab_A_10,                   ///< non-RGB color space\n    COLOR_SPACE_Lab_D55_2,                  ///< non-RGB color space\n    COLOR_SPACE_Lab_D55_10,                 ///< non-RGB color space\n    COLOR_SPACE_Lab_D75_2,                  ///< non-RGB color space\n    COLOR_SPACE_Lab_D75_10,                 ///< non-RGB color space\n    COLOR_SPACE_Lab_E_2,                    ///< non-RGB color space\n    COLOR_SPACE_Lab_E_10,                   ///< non-RGB color space\n};\n\n/** @brief Linearization transformation type\n*/\nenum LinearType\n{\n\n    LINEARIZATION_IDENTITY,                  ///<no change is made\n    LINEARIZATION_GAMMA,                      ///<gamma correction; Need assign a value to gamma simultaneously\n    LINEARIZATION_COLORPOLYFIT,               ///<polynomial fitting channels respectively; Need assign a value to deg simultaneously\n    LINEARIZATION_COLORLOGPOLYFIT,            ///<logarithmic polynomial fitting channels respectively; Need assign a value to deg simultaneously\n    LINEARIZATION_GRAYPOLYFIT,                ///<grayscale polynomial fitting; Need assign a value to deg and dst_whites simultaneously\n    LINEARIZATION_GRAYLOGPOLYFIT              ///<grayscale Logarithmic polynomial fitting;  Need assign a value to deg and dst_whites simultaneously\n};\n\n/** @brief Enum of possible functions to calculate the distance between colors.\n\nSee https://en.wikipedia.org/wiki/Color_difference for details\n*/\nenum DistanceType\n{\n    DISTANCE_CIE76,                      ///<The 1976 formula is the first formula that related a measured color difference to a known set of CIELAB coordinates.\n    DISTANCE_CIE94_GRAPHIC_ARTS,         ///<The 1976 definition was extended to address perceptual non-uniformities.\n    DISTANCE_CIE94_TEXTILES,\n    DISTANCE_CIE2000,\n    DISTANCE_CMC_1TO1,                   ///<In 1984, the Colour Measurement Committee of the Society of Dyers and Colourists defined a difference measure, also based on the L*C*h color model.\n    DISTANCE_CMC_2TO1,\n    DISTANCE_RGB,                        ///<Euclidean distance of rgb color space\n    DISTANCE_RGBL                        ///<Euclidean distance of rgbl color space\n};\n\n/** @brief Core class of ccm model\n\nProduce a ColorCorrectionModel instance for inference\n*/\nclass CV_EXPORTS_W ColorCorrectionModel\n{\npublic:\n    /** @brief Color Correction Model\n\n        Supported list of color cards:\n        - @ref COLORCHECKER_Macbeth, the Macbeth ColorChecker\n        - @ref COLORCHECKER_Vinyl, the DKK ColorChecker\n        - @ref COLORCHECKER_DigitalSG, the DigitalSG ColorChecker with 140 squares\n\n        @param src detected colors of ColorChecker patches;\\n\n                    the color type is RGB not BGR, and the color values are in [0, 1];\n        @param constcolor the Built-in color card\n    */\n    CV_WRAP ColorCorrectionModel(const Mat& src, ColorCheckerType constcolor);\n\n    /** @brief Color Correction Model\n        @param src detected colors of ColorChecker patches;\\n\n                the color type is RGB not BGR, and the color values are in [0, 1];\n        @param colors the reference color values, the color values are in [0, 1].\\n\n        @param ref_cs the corresponding color space\n                If the color type is some RGB, the format is RGB not BGR;\\n\n    */\n    CV_WRAP ColorCorrectionModel(const Mat& src, Mat colors, COLOR_SPACE ref_cs);\n\n    /** @brief Color Correction Model\n        @param src detected colors of ColorChecker patches;\\n\n                    the color type is RGB not BGR, and the color values are in [0, 1];\n        @param colors the reference color values, the color values are in [0, 1].\n        @param ref_cs the corresponding color space\n                    If the color type is some RGB, the format is RGB not BGR;\n        @param colored mask of colored color\n    */\n    CV_WRAP ColorCorrectionModel(const Mat& src, Mat colors, COLOR_SPACE ref_cs, Mat colored);\n\n    /** @brief set ColorSpace\n        @note It should be some RGB color space;\n        Supported list of color cards:\n        - @ref COLOR_SPACE_sRGB\n        - @ref COLOR_SPACE_AdobeRGB\n        - @ref COLOR_SPACE_WideGamutRGB\n        - @ref COLOR_SPACE_ProPhotoRGB\n        - @ref COLOR_SPACE_DCI_P3_RGB\n        - @ref COLOR_SPACE_AppleRGB\n        - @ref COLOR_SPACE_REC_709_RGB\n        - @ref COLOR_SPACE_REC_2020_RGB\n        @param cs the absolute color space that detected colors convert to;\\n\n              default: @ref COLOR_SPACE_sRGB\n    */\n    CV_WRAP void setColorSpace(COLOR_SPACE cs);\n\n    /** @brief set ccmType\n    @param ccmType the shape of color correction matrix(CCM);\\n\n                    default: @ref CCM_LINEAR\n    */\n    CV_WRAP void setCCMType(CCMType ccmType);\n\n    /** @brief set Distance\n    @param distance the type of color distance;\\n\n                    default: @ref DISTANCE_CIE2000\n    */\n    CV_WRAP void setDistance(DistanceType distance);\n\n    /** @brief set Linear\n    @param linearType the method of linearization;\\n\n                       default: @ref LINEARIZATION_GAMMA\n    */\n    CV_WRAP void setLinear(LinearType linearType);\n\n    /** @brief set Gamma\n\n    @note only valid when linear is set to \"gamma\";\\n\n\n    @param gamma the gamma value of gamma correction;\\n\n                 default: 2.2;\n    */\n    CV_WRAP void setLinearGamma(const double& gamma);\n\n    /** @brief set degree\n        @note only valid when linear is set to\n        - @ref LINEARIZATION_COLORPOLYFIT\n        - @ref LINEARIZATION_GRAYPOLYFIT\n        - @ref LINEARIZATION_COLORLOGPOLYFIT\n        - @ref LINEARIZATION_GRAYLOGPOLYFIT\n\n        @param deg the degree of linearization polynomial;\\n\n            default: 3\n\n    */\n    CV_WRAP void setLinearDegree(const int& deg);\n\n    /** @brief set SaturatedThreshold.\n                The colors in the closed interval [lower, upper] are reserved to participate\n                in the calculation of the loss function and initialization parameters\n        @param lower the lower threshold to determine saturation;\\n\n                default: 0;\n        @param upper the upper threshold to determine saturation;\\n\n                default: 0\n    */\n    CV_WRAP void setSaturatedThreshold(const double& lower, const double& upper);\n\n    /** @brief set WeightsList\n    @param weights_list the list of weight of each color;\\n\n                        default: empty array\n    */\n    CV_WRAP void setWeightsList(const Mat& weights_list);\n\n    /** @brief set WeightCoeff\n    @param weights_coeff the exponent number of L* component of the reference color in CIE Lab color space;\\n\n                         default: 0\n    */\n    CV_WRAP void setWeightCoeff(const double& weights_coeff);\n\n    /** @brief set InitialMethod\n    @param initialMethodType the method of calculating CCM initial value;\\n\n            default: INITIAL_METHOD_LEAST_SQUARE\n    */\n    CV_WRAP void setInitialMethod(InitialMethodType initialMethodType);\n\n    /** @brief set MaxCount\n    @param max_count used in MinProblemSolver-DownhillSolver;\\n\n        Terminal criteria to the algorithm;\\n\n                     default: 5000;\n    */\n    CV_WRAP void setMaxCount(const int& max_count);\n\n    /** @brief set Epsilon\n    @param epsilon used in MinProblemSolver-DownhillSolver;\\n\n        Terminal criteria to the algorithm;\\n\n                   default: 1e-4;\n    */\n    CV_WRAP void setEpsilon(const double& epsilon);\n\n    /** @brief make color correction */\n    CV_WRAP void computeCCM();",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "2018137510",
        "repo_full_name": "opencv/opencv",
        "pr_number": 27051,
        "pr_file": "modules/photo/include/opencv2/photo/ccm.hpp",
        "discussion_id": "2018137510",
        "commented_code": "@@ -0,0 +1,295 @@\n+// This file is part of OpenCV project.\n+// It is subject to the license terms in the LICENSE file found in the top-level directory\n+// of this distribution and at http://opencv.org/license.html.\n+//\n+// Author: Longbu Wang <wanglongbu@huawei.com.com>\n+//         Jinheng Zhang <zhangjinheng1@huawei.com>\n+//         Chenqi Shan <shanchenqi@huawei.com>\n+\n+#ifndef OPENCV_PHOTO_CCM_HPP\n+#define OPENCV_PHOTO_CCM_HPP\n+\n+#include <opencv2/core.hpp>\n+#include <opencv2/imgproc.hpp>\n+\n+namespace cv\n+{\n+namespace ccm\n+{\n+\n+/** @defgroup ccm Color Correction module\n+@{\n+*/\n+\n+/** @brief Enum of the possible types of ccm.\n+*/\n+enum CCMType\n+{\n+    CCM_LINEAR,   ///< Uses a \\f$3\\times3\\f$ matrix to linearly transform RGB values without offsets.\n+    CCM_AFFINE,   ///< Uses a \\f$4\\times3\\f$ matrix to affine transform RGB values with both scaling and offset terms.\n+};\n+\n+/** @brief Enum of the possible types of initial method.\n+*/\n+enum InitialMethodType\n+{\n+    INITIAL_METHOD_WHITE_BALANCE,      ///< The white balance method. The initial value is:\\n\n+                        /// \\f$\n+                        /// M_{CCM}=\n+                        /// \\begin{bmatrix}\n+                        /// k_R & 0 & 0\\\\\n+                        /// 0 & k_G & 0\\\\\n+                        /// 0 & 0 & k_B\\\\\n+                        /// \\end{bmatrix}\n+                        /// \\f$\\n\n+                        /// where\\n\n+                        /// \\f$\n+                        /// k_R=mean(R_{li}')/mean(R_{li})\\\\\n+                        /// k_R=mean(G_{li}')/mean(G_{li})\\\\\n+                        /// k_R=mean(B_{li}')/mean(B_{li})\n+                        /// \\f$\n+    INITIAL_METHOD_LEAST_SQUARE,       ///<the least square method is an optimal solution under the linear RGB distance function\n+};\n+/** @brief  Macbeth and Vinyl ColorChecker with 2deg D50\n+*/\n+enum ColorCheckerType {\n+    COLORCHECKER_Macbeth,                ///< Macbeth ColorChecker\n+    COLORCHECKER_Vinyl,                  ///< DKK ColorChecker\n+    COLORCHECKER_DigitalSG,              ///< DigitalSG ColorChecker with 140 squares\n+};\n+enum COLOR_SPACE {\n+    COLOR_SPACE_sRGB,                       ///< https://en.wikipedia.org/wiki/SRGB , RGB color space\n+    COLOR_SPACE_sRGBL,                      ///< https://en.wikipedia.org/wiki/SRGB , linear RGB color space\n+    COLOR_SPACE_AdobeRGB,                   ///< https://en.wikipedia.org/wiki/Adobe_RGB_color_space , RGB color space\n+    COLOR_SPACE_AdobeRGBL,                  ///< https://en.wikipedia.org/wiki/Adobe_RGB_color_space , linear RGB color space\n+    COLOR_SPACE_WideGamutRGB,               ///< https://en.wikipedia.org/wiki/Wide-gamut_RGB_color_space , RGB color space\n+    COLOR_SPACE_WideGamutRGBL,              ///< https://en.wikipedia.org/wiki/Wide-gamut_RGB_color_space , linear RGB color space\n+    COLOR_SPACE_ProPhotoRGB,                ///< https://en.wikipedia.org/wiki/ProPhoto_RGB_color_space , RGB color space\n+    COLOR_SPACE_ProPhotoRGBL,               ///< https://en.wikipedia.org/wiki/ProPhoto_RGB_color_space , linear RGB color space\n+    COLOR_SPACE_DCI_P3_RGB,                 ///< https://en.wikipedia.org/wiki/DCI-P3 , RGB color space\n+    COLOR_SPACE_DCI_P3_RGBL,                ///< https://en.wikipedia.org/wiki/DCI-P3 , linear RGB color space\n+    COLOR_SPACE_AppleRGB,                   ///< https://en.wikipedia.org/wiki/RGB_color_space , RGB color space\n+    COLOR_SPACE_AppleRGBL,                  ///< https://en.wikipedia.org/wiki/RGB_color_space , linear RGB color space\n+    COLOR_SPACE_REC_709_RGB,                ///< https://en.wikipedia.org/wiki/Rec._709 , RGB color space\n+    COLOR_SPACE_REC_709_RGBL,               ///< https://en.wikipedia.org/wiki/Rec._709 , linear RGB color space\n+    COLOR_SPACE_REC_2020_RGB,               ///< https://en.wikipedia.org/wiki/Rec._2020 , RGB color space\n+    COLOR_SPACE_REC_2020_RGBL,              ///< https://en.wikipedia.org/wiki/Rec._2020 , linear RGB color space\n+    COLOR_SPACE_XYZ_D65_2,                  ///< https://en.wikipedia.org/wiki/CIE_1931_color_space , non-RGB color space\n+    COLOR_SPACE_XYZ_D65_10,                 ///< non-RGB color space\n+    COLOR_SPACE_XYZ_D50_2,                  ///< non-RGB color space\n+    COLOR_SPACE_XYZ_D50_10,                 ///< non-RGB color space\n+    COLOR_SPACE_XYZ_A_2,                    ///< non-RGB color space\n+    COLOR_SPACE_XYZ_A_10,                   ///< non-RGB color space\n+    COLOR_SPACE_XYZ_D55_2,                  ///< non-RGB color space\n+    COLOR_SPACE_XYZ_D55_10,                 ///< non-RGB color space\n+    COLOR_SPACE_XYZ_D75_2,                  ///< non-RGB color space\n+    COLOR_SPACE_XYZ_D75_10,                 ///< non-RGB color space\n+    COLOR_SPACE_XYZ_E_2,                    ///< non-RGB color space\n+    COLOR_SPACE_XYZ_E_10,                   ///< non-RGB color space\n+    COLOR_SPACE_Lab_D65_2,                  ///< https://en.wikipedia.org/wiki/CIELAB_color_space , non-RGB color space\n+    COLOR_SPACE_Lab_D65_10,                 ///< non-RGB color space\n+    COLOR_SPACE_Lab_D50_2,                  ///< non-RGB color space\n+    COLOR_SPACE_Lab_D50_10,                 ///< non-RGB color space\n+    COLOR_SPACE_Lab_A_2,                    ///< non-RGB color space\n+    COLOR_SPACE_Lab_A_10,                   ///< non-RGB color space\n+    COLOR_SPACE_Lab_D55_2,                  ///< non-RGB color space\n+    COLOR_SPACE_Lab_D55_10,                 ///< non-RGB color space\n+    COLOR_SPACE_Lab_D75_2,                  ///< non-RGB color space\n+    COLOR_SPACE_Lab_D75_10,                 ///< non-RGB color space\n+    COLOR_SPACE_Lab_E_2,                    ///< non-RGB color space\n+    COLOR_SPACE_Lab_E_10,                   ///< non-RGB color space\n+};\n+\n+/** @brief Linearization transformation type\n+*/\n+enum LinearType\n+{\n+\n+    LINEARIZATION_IDENTITY,                  ///<no change is made\n+    LINEARIZATION_GAMMA,                      ///<gamma correction; Need assign a value to gamma simultaneously\n+    LINEARIZATION_COLORPOLYFIT,               ///<polynomial fitting channels respectively; Need assign a value to deg simultaneously\n+    LINEARIZATION_COLORLOGPOLYFIT,            ///<logarithmic polynomial fitting channels respectively; Need assign a value to deg simultaneously\n+    LINEARIZATION_GRAYPOLYFIT,                ///<grayscale polynomial fitting; Need assign a value to deg and dst_whites simultaneously\n+    LINEARIZATION_GRAYLOGPOLYFIT              ///<grayscale Logarithmic polynomial fitting;  Need assign a value to deg and dst_whites simultaneously\n+};\n+\n+/** @brief Enum of possible functions to calculate the distance between colors.\n+\n+See https://en.wikipedia.org/wiki/Color_difference for details\n+*/\n+enum DistanceType\n+{\n+    DISTANCE_CIE76,                      ///<The 1976 formula is the first formula that related a measured color difference to a known set of CIELAB coordinates.\n+    DISTANCE_CIE94_GRAPHIC_ARTS,         ///<The 1976 definition was extended to address perceptual non-uniformities.\n+    DISTANCE_CIE94_TEXTILES,\n+    DISTANCE_CIE2000,\n+    DISTANCE_CMC_1TO1,                   ///<In 1984, the Colour Measurement Committee of the Society of Dyers and Colourists defined a difference measure, also based on the L*C*h color model.\n+    DISTANCE_CMC_2TO1,\n+    DISTANCE_RGB,                        ///<Euclidean distance of rgb color space\n+    DISTANCE_RGBL                        ///<Euclidean distance of rgbl color space\n+};\n+\n+/** @brief Core class of ccm model\n+\n+Produce a ColorCorrectionModel instance for inference\n+*/\n+class CV_EXPORTS_W ColorCorrectionModel\n+{\n+public:\n+    /** @brief Color Correction Model\n+\n+        Supported list of color cards:\n+        - @ref COLORCHECKER_Macbeth, the Macbeth ColorChecker\n+        - @ref COLORCHECKER_Vinyl, the DKK ColorChecker\n+        - @ref COLORCHECKER_DigitalSG, the DigitalSG ColorChecker with 140 squares\n+\n+        @param src detected colors of ColorChecker patches;\\n\n+                    the color type is RGB not BGR, and the color values are in [0, 1];\n+        @param constcolor the Built-in color card\n+    */\n+    CV_WRAP ColorCorrectionModel(const Mat& src, ColorCheckerType constcolor);\n+\n+    /** @brief Color Correction Model\n+        @param src detected colors of ColorChecker patches;\\n\n+                the color type is RGB not BGR, and the color values are in [0, 1];\n+        @param colors the reference color values, the color values are in [0, 1].\\n\n+        @param ref_cs the corresponding color space\n+                If the color type is some RGB, the format is RGB not BGR;\\n\n+    */\n+    CV_WRAP ColorCorrectionModel(const Mat& src, Mat colors, COLOR_SPACE ref_cs);\n+\n+    /** @brief Color Correction Model\n+        @param src detected colors of ColorChecker patches;\\n\n+                    the color type is RGB not BGR, and the color values are in [0, 1];\n+        @param colors the reference color values, the color values are in [0, 1].\n+        @param ref_cs the corresponding color space\n+                    If the color type is some RGB, the format is RGB not BGR;\n+        @param colored mask of colored color\n+    */\n+    CV_WRAP ColorCorrectionModel(const Mat& src, Mat colors, COLOR_SPACE ref_cs, Mat colored);\n+\n+    /** @brief set ColorSpace\n+        @note It should be some RGB color space;\n+        Supported list of color cards:\n+        - @ref COLOR_SPACE_sRGB\n+        - @ref COLOR_SPACE_AdobeRGB\n+        - @ref COLOR_SPACE_WideGamutRGB\n+        - @ref COLOR_SPACE_ProPhotoRGB\n+        - @ref COLOR_SPACE_DCI_P3_RGB\n+        - @ref COLOR_SPACE_AppleRGB\n+        - @ref COLOR_SPACE_REC_709_RGB\n+        - @ref COLOR_SPACE_REC_2020_RGB\n+        @param cs the absolute color space that detected colors convert to;\\n\n+              default: @ref COLOR_SPACE_sRGB\n+    */\n+    CV_WRAP void setColorSpace(COLOR_SPACE cs);\n+\n+    /** @brief set ccmType\n+    @param ccmType the shape of color correction matrix(CCM);\\n\n+                    default: @ref CCM_LINEAR\n+    */\n+    CV_WRAP void setCCMType(CCMType ccmType);\n+\n+    /** @brief set Distance\n+    @param distance the type of color distance;\\n\n+                    default: @ref DISTANCE_CIE2000\n+    */\n+    CV_WRAP void setDistance(DistanceType distance);\n+\n+    /** @brief set Linear\n+    @param linearType the method of linearization;\\n\n+                       default: @ref LINEARIZATION_GAMMA\n+    */\n+    CV_WRAP void setLinear(LinearType linearType);\n+\n+    /** @brief set Gamma\n+\n+    @note only valid when linear is set to \"gamma\";\\n\n+\n+    @param gamma the gamma value of gamma correction;\\n\n+                 default: 2.2;\n+    */\n+    CV_WRAP void setLinearGamma(const double& gamma);\n+\n+    /** @brief set degree\n+        @note only valid when linear is set to\n+        - @ref LINEARIZATION_COLORPOLYFIT\n+        - @ref LINEARIZATION_GRAYPOLYFIT\n+        - @ref LINEARIZATION_COLORLOGPOLYFIT\n+        - @ref LINEARIZATION_GRAYLOGPOLYFIT\n+\n+        @param deg the degree of linearization polynomial;\\n\n+            default: 3\n+\n+    */\n+    CV_WRAP void setLinearDegree(const int& deg);\n+\n+    /** @brief set SaturatedThreshold.\n+                The colors in the closed interval [lower, upper] are reserved to participate\n+                in the calculation of the loss function and initialization parameters\n+        @param lower the lower threshold to determine saturation;\\n\n+                default: 0;\n+        @param upper the upper threshold to determine saturation;\\n\n+                default: 0\n+    */\n+    CV_WRAP void setSaturatedThreshold(const double& lower, const double& upper);\n+\n+    /** @brief set WeightsList\n+    @param weights_list the list of weight of each color;\\n\n+                        default: empty array\n+    */\n+    CV_WRAP void setWeightsList(const Mat& weights_list);\n+\n+    /** @brief set WeightCoeff\n+    @param weights_coeff the exponent number of L* component of the reference color in CIE Lab color space;\\n\n+                         default: 0\n+    */\n+    CV_WRAP void setWeightCoeff(const double& weights_coeff);\n+\n+    /** @brief set InitialMethod\n+    @param initialMethodType the method of calculating CCM initial value;\\n\n+            default: INITIAL_METHOD_LEAST_SQUARE\n+    */\n+    CV_WRAP void setInitialMethod(InitialMethodType initialMethodType);\n+\n+    /** @brief set MaxCount\n+    @param max_count used in MinProblemSolver-DownhillSolver;\\n\n+        Terminal criteria to the algorithm;\\n\n+                     default: 5000;\n+    */\n+    CV_WRAP void setMaxCount(const int& max_count);\n+\n+    /** @brief set Epsilon\n+    @param epsilon used in MinProblemSolver-DownhillSolver;\\n\n+        Terminal criteria to the algorithm;\\n\n+                   default: 1e-4;\n+    */\n+    CV_WRAP void setEpsilon(const double& epsilon);\n+\n+    /** @brief make color correction */\n+    CV_WRAP void computeCCM();",
        "comment_created_at": "2025-03-28T08:29:09+00:00",
        "comment_author": "vpisarev",
        "comment_body": "please rename it to computeColorCorrectionMatrix() to avoid confusion with another \"ccm\" - \"color correction model\", make it return matrix:\r\n\r\n```\r\nCV_WRAP Mat compute();\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2024738650",
    "pr_number": 27051,
    "pr_file": "modules/photo/include/opencv2/photo/ccm.hpp",
    "created_at": "2025-04-02T12:37:40+00:00",
    "commented_code": "// This file is part of OpenCV project.\n// It is subject to the license terms in the LICENSE file found in the top-level directory\n// of this distribution and at http://opencv.org/license.html.\n//\n// Author: Longbu Wang <wanglongbu@huawei.com.com>\n//         Jinheng Zhang <zhangjinheng1@huawei.com>\n//         Chenqi Shan <shanchenqi@huawei.com>\n\n#ifndef OPENCV_PHOTO_CCM_HPP\n#define OPENCV_PHOTO_CCM_HPP\n\n#include <opencv2/core.hpp>\n#include <opencv2/imgproc.hpp>\n\nnamespace cv\n{\nnamespace ccm\n{\n\n/** @defgroup ccm Color Correction module\n@{\n*/\n\n/** @brief Enum of the possible types of ccm.\n*/\nenum CCMType\n{\n    CCM_LINEAR,   ///< Uses a \\f$3\\times3\\f$ matrix to linearly transform RGB values without offsets.\n    CCM_AFFINE,   ///< Uses a \\f$4\\times3\\f$ matrix to affine transform RGB values with both scaling and offset terms.\n};\n\n/** @brief Enum of the possible types of initial method.\n*/\nenum InitialMethodType\n{\n    INITIAL_METHOD_WHITE_BALANCE,      ///< The white balance method. The initial value is:\\n\n                        /// \\f$\n                        /// M_{CCM}=\n                        /// \\begin{bmatrix}\n                        /// k_R & 0 & 0\\\\\n                        /// 0 & k_G & 0\\\\\n                        /// 0 & 0 & k_B\\\\\n                        /// \\end{bmatrix}\n                        /// \\f$\\n\n                        /// where\\n\n                        /// \\f$\n                        /// k_R=mean(R_{li}')/mean(R_{li})\\\\\n                        /// k_R=mean(G_{li}')/mean(G_{li})\\\\\n                        /// k_R=mean(B_{li}')/mean(B_{li})\n                        /// \\f$\n    INITIAL_METHOD_LEAST_SQUARE,       ///<the least square method is an optimal solution under the linear RGB distance function\n};\n/** @brief  Macbeth and Vinyl ColorChecker with 2deg D50\n*/\nenum ColorCheckerType {\n    COLORCHECKER_Macbeth,                ///< Macbeth ColorChecker\n    COLORCHECKER_Vinyl,                  ///< DKK ColorChecker\n    COLORCHECKER_DigitalSG,              ///< DigitalSG ColorChecker with 140 squares\n};",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "2024738650",
        "repo_full_name": "opencv/opencv",
        "pr_number": 27051,
        "pr_file": "modules/photo/include/opencv2/photo/ccm.hpp",
        "discussion_id": "2024738650",
        "commented_code": "@@ -0,0 +1,295 @@\n+// This file is part of OpenCV project.\n+// It is subject to the license terms in the LICENSE file found in the top-level directory\n+// of this distribution and at http://opencv.org/license.html.\n+//\n+// Author: Longbu Wang <wanglongbu@huawei.com.com>\n+//         Jinheng Zhang <zhangjinheng1@huawei.com>\n+//         Chenqi Shan <shanchenqi@huawei.com>\n+\n+#ifndef OPENCV_PHOTO_CCM_HPP\n+#define OPENCV_PHOTO_CCM_HPP\n+\n+#include <opencv2/core.hpp>\n+#include <opencv2/imgproc.hpp>\n+\n+namespace cv\n+{\n+namespace ccm\n+{\n+\n+/** @defgroup ccm Color Correction module\n+@{\n+*/\n+\n+/** @brief Enum of the possible types of ccm.\n+*/\n+enum CCMType\n+{\n+    CCM_LINEAR,   ///< Uses a \\f$3\\times3\\f$ matrix to linearly transform RGB values without offsets.\n+    CCM_AFFINE,   ///< Uses a \\f$4\\times3\\f$ matrix to affine transform RGB values with both scaling and offset terms.\n+};\n+\n+/** @brief Enum of the possible types of initial method.\n+*/\n+enum InitialMethodType\n+{\n+    INITIAL_METHOD_WHITE_BALANCE,      ///< The white balance method. The initial value is:\\n\n+                        /// \\f$\n+                        /// M_{CCM}=\n+                        /// \\begin{bmatrix}\n+                        /// k_R & 0 & 0\\\\\n+                        /// 0 & k_G & 0\\\\\n+                        /// 0 & 0 & k_B\\\\\n+                        /// \\end{bmatrix}\n+                        /// \\f$\\n\n+                        /// where\\n\n+                        /// \\f$\n+                        /// k_R=mean(R_{li}')/mean(R_{li})\\\\\n+                        /// k_R=mean(G_{li}')/mean(G_{li})\\\\\n+                        /// k_R=mean(B_{li}')/mean(B_{li})\n+                        /// \\f$\n+    INITIAL_METHOD_LEAST_SQUARE,       ///<the least square method is an optimal solution under the linear RGB distance function\n+};\n+/** @brief  Macbeth and Vinyl ColorChecker with 2deg D50\n+*/\n+enum ColorCheckerType {\n+    COLORCHECKER_Macbeth,                ///< Macbeth ColorChecker\n+    COLORCHECKER_Vinyl,                  ///< DKK ColorChecker\n+    COLORCHECKER_DigitalSG,              ///< DigitalSG ColorChecker with 140 squares\n+};",
        "comment_created_at": "2025-04-02T12:37:40+00:00",
        "comment_author": "asmorkalov",
        "comment_body": "We use all capital letters for constant names.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2024740792",
    "pr_number": 27051,
    "pr_file": "modules/photo/include/opencv2/photo/ccm.hpp",
    "created_at": "2025-04-02T12:38:48+00:00",
    "commented_code": "// This file is part of OpenCV project.\n// It is subject to the license terms in the LICENSE file found in the top-level directory\n// of this distribution and at http://opencv.org/license.html.\n//\n// Author: Longbu Wang <wanglongbu@huawei.com.com>\n//         Jinheng Zhang <zhangjinheng1@huawei.com>\n//         Chenqi Shan <shanchenqi@huawei.com>\n\n#ifndef OPENCV_PHOTO_CCM_HPP\n#define OPENCV_PHOTO_CCM_HPP\n\n#include <opencv2/core.hpp>\n#include <opencv2/imgproc.hpp>\n\nnamespace cv\n{\nnamespace ccm\n{\n\n/** @defgroup ccm Color Correction module\n@{\n*/\n\n/** @brief Enum of the possible types of ccm.\n*/\nenum CCMType\n{\n    CCM_LINEAR,   ///< Uses a \\f$3\\times3\\f$ matrix to linearly transform RGB values without offsets.\n    CCM_AFFINE,   ///< Uses a \\f$4\\times3\\f$ matrix to affine transform RGB values with both scaling and offset terms.\n};\n\n/** @brief Enum of the possible types of initial method.\n*/\nenum InitialMethodType\n{\n    INITIAL_METHOD_WHITE_BALANCE,      ///< The white balance method. The initial value is:\\n\n                        /// \\f$\n                        /// M_{CCM}=\n                        /// \\begin{bmatrix}\n                        /// k_R & 0 & 0\\\\\n                        /// 0 & k_G & 0\\\\\n                        /// 0 & 0 & k_B\\\\\n                        /// \\end{bmatrix}\n                        /// \\f$\\n\n                        /// where\\n\n                        /// \\f$\n                        /// k_R=mean(R_{li}')/mean(R_{li})\\\\\n                        /// k_R=mean(G_{li}')/mean(G_{li})\\\\\n                        /// k_R=mean(B_{li}')/mean(B_{li})\n                        /// \\f$\n    INITIAL_METHOD_LEAST_SQUARE,       ///<the least square method is an optimal solution under the linear RGB distance function\n};\n/** @brief  Macbeth and Vinyl ColorChecker with 2deg D50\n*/\nenum ColorCheckerType {\n    COLORCHECKER_Macbeth,                ///< Macbeth ColorChecker\n    COLORCHECKER_Vinyl,                  ///< DKK ColorChecker\n    COLORCHECKER_DigitalSG,              ///< DigitalSG ColorChecker with 140 squares\n};\nenum COLOR_SPACE {\n    COLOR_SPACE_sRGB,                       ///< https://en.wikipedia.org/wiki/SRGB , RGB color space\n    COLOR_SPACE_sRGBL,                      ///< https://en.wikipedia.org/wiki/SRGB , linear RGB color space\n    COLOR_SPACE_AdobeRGB,                   ///< https://en.wikipedia.org/wiki/Adobe_RGB_color_space , RGB color space\n    COLOR_SPACE_AdobeRGBL,                  ///< https://en.wikipedia.org/wiki/Adobe_RGB_color_space , linear RGB color space\n    COLOR_SPACE_WideGamutRGB,               ///< https://en.wikipedia.org/wiki/Wide-gamut_RGB_color_space , RGB color space\n    COLOR_SPACE_WideGamutRGBL,              ///< https://en.wikipedia.org/wiki/Wide-gamut_RGB_color_space , linear RGB color space\n    COLOR_SPACE_ProPhotoRGB,                ///< https://en.wikipedia.org/wiki/ProPhoto_RGB_color_space , RGB color space\n    COLOR_SPACE_ProPhotoRGBL,               ///< https://en.wikipedia.org/wiki/ProPhoto_RGB_color_space , linear RGB color space\n    COLOR_SPACE_DCI_P3_RGB,                 ///< https://en.wikipedia.org/wiki/DCI-P3 , RGB color space\n    COLOR_SPACE_DCI_P3_RGBL,                ///< https://en.wikipedia.org/wiki/DCI-P3 , linear RGB color space\n    COLOR_SPACE_AppleRGB,                   ///< https://en.wikipedia.org/wiki/RGB_color_space , RGB color space\n    COLOR_SPACE_AppleRGBL,                  ///< https://en.wikipedia.org/wiki/RGB_color_space , linear RGB color space\n    COLOR_SPACE_REC_709_RGB,                ///< https://en.wikipedia.org/wiki/Rec._709 , RGB color space\n    COLOR_SPACE_REC_709_RGBL,               ///< https://en.wikipedia.org/wiki/Rec._709 , linear RGB color space\n    COLOR_SPACE_REC_2020_RGB,               ///< https://en.wikipedia.org/wiki/Rec._2020 , RGB color space\n    COLOR_SPACE_REC_2020_RGBL,              ///< https://en.wikipedia.org/wiki/Rec._2020 , linear RGB color space",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "2024740792",
        "repo_full_name": "opencv/opencv",
        "pr_number": 27051,
        "pr_file": "modules/photo/include/opencv2/photo/ccm.hpp",
        "discussion_id": "2024740792",
        "commented_code": "@@ -0,0 +1,295 @@\n+// This file is part of OpenCV project.\n+// It is subject to the license terms in the LICENSE file found in the top-level directory\n+// of this distribution and at http://opencv.org/license.html.\n+//\n+// Author: Longbu Wang <wanglongbu@huawei.com.com>\n+//         Jinheng Zhang <zhangjinheng1@huawei.com>\n+//         Chenqi Shan <shanchenqi@huawei.com>\n+\n+#ifndef OPENCV_PHOTO_CCM_HPP\n+#define OPENCV_PHOTO_CCM_HPP\n+\n+#include <opencv2/core.hpp>\n+#include <opencv2/imgproc.hpp>\n+\n+namespace cv\n+{\n+namespace ccm\n+{\n+\n+/** @defgroup ccm Color Correction module\n+@{\n+*/\n+\n+/** @brief Enum of the possible types of ccm.\n+*/\n+enum CCMType\n+{\n+    CCM_LINEAR,   ///< Uses a \\f$3\\times3\\f$ matrix to linearly transform RGB values without offsets.\n+    CCM_AFFINE,   ///< Uses a \\f$4\\times3\\f$ matrix to affine transform RGB values with both scaling and offset terms.\n+};\n+\n+/** @brief Enum of the possible types of initial method.\n+*/\n+enum InitialMethodType\n+{\n+    INITIAL_METHOD_WHITE_BALANCE,      ///< The white balance method. The initial value is:\\n\n+                        /// \\f$\n+                        /// M_{CCM}=\n+                        /// \\begin{bmatrix}\n+                        /// k_R & 0 & 0\\\\\n+                        /// 0 & k_G & 0\\\\\n+                        /// 0 & 0 & k_B\\\\\n+                        /// \\end{bmatrix}\n+                        /// \\f$\\n\n+                        /// where\\n\n+                        /// \\f$\n+                        /// k_R=mean(R_{li}')/mean(R_{li})\\\\\n+                        /// k_R=mean(G_{li}')/mean(G_{li})\\\\\n+                        /// k_R=mean(B_{li}')/mean(B_{li})\n+                        /// \\f$\n+    INITIAL_METHOD_LEAST_SQUARE,       ///<the least square method is an optimal solution under the linear RGB distance function\n+};\n+/** @brief  Macbeth and Vinyl ColorChecker with 2deg D50\n+*/\n+enum ColorCheckerType {\n+    COLORCHECKER_Macbeth,                ///< Macbeth ColorChecker\n+    COLORCHECKER_Vinyl,                  ///< DKK ColorChecker\n+    COLORCHECKER_DigitalSG,              ///< DigitalSG ColorChecker with 140 squares\n+};\n+enum COLOR_SPACE {\n+    COLOR_SPACE_sRGB,                       ///< https://en.wikipedia.org/wiki/SRGB , RGB color space\n+    COLOR_SPACE_sRGBL,                      ///< https://en.wikipedia.org/wiki/SRGB , linear RGB color space\n+    COLOR_SPACE_AdobeRGB,                   ///< https://en.wikipedia.org/wiki/Adobe_RGB_color_space , RGB color space\n+    COLOR_SPACE_AdobeRGBL,                  ///< https://en.wikipedia.org/wiki/Adobe_RGB_color_space , linear RGB color space\n+    COLOR_SPACE_WideGamutRGB,               ///< https://en.wikipedia.org/wiki/Wide-gamut_RGB_color_space , RGB color space\n+    COLOR_SPACE_WideGamutRGBL,              ///< https://en.wikipedia.org/wiki/Wide-gamut_RGB_color_space , linear RGB color space\n+    COLOR_SPACE_ProPhotoRGB,                ///< https://en.wikipedia.org/wiki/ProPhoto_RGB_color_space , RGB color space\n+    COLOR_SPACE_ProPhotoRGBL,               ///< https://en.wikipedia.org/wiki/ProPhoto_RGB_color_space , linear RGB color space\n+    COLOR_SPACE_DCI_P3_RGB,                 ///< https://en.wikipedia.org/wiki/DCI-P3 , RGB color space\n+    COLOR_SPACE_DCI_P3_RGBL,                ///< https://en.wikipedia.org/wiki/DCI-P3 , linear RGB color space\n+    COLOR_SPACE_AppleRGB,                   ///< https://en.wikipedia.org/wiki/RGB_color_space , RGB color space\n+    COLOR_SPACE_AppleRGBL,                  ///< https://en.wikipedia.org/wiki/RGB_color_space , linear RGB color space\n+    COLOR_SPACE_REC_709_RGB,                ///< https://en.wikipedia.org/wiki/Rec._709 , RGB color space\n+    COLOR_SPACE_REC_709_RGBL,               ///< https://en.wikipedia.org/wiki/Rec._709 , linear RGB color space\n+    COLOR_SPACE_REC_2020_RGB,               ///< https://en.wikipedia.org/wiki/Rec._2020 , RGB color space\n+    COLOR_SPACE_REC_2020_RGBL,              ///< https://en.wikipedia.org/wiki/Rec._2020 , linear RGB color space",
        "comment_created_at": "2025-04-02T12:38:48+00:00",
        "comment_author": "asmorkalov",
        "comment_body": "The same note about capital letters,\r\ne.g. `COLOR_SPACE_AppleRGB` -> `COLOR_SPACE_APPLE_RGB`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1689877393",
    "pr_number": 25394,
    "pr_file": "modules/core/include/opencv2/core/mat.hpp",
    "created_at": "2024-07-24T14:01:30+00:00",
    "commented_code": "void release() const;\n    void clear() const;\n    void setTo(const _InputArray& value, const _InputArray & mask = _InputArray()) const;\n    Mat reinterpretType( int type ) const;",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "1689877393",
        "repo_full_name": "opencv/opencv",
        "pr_number": 25394,
        "pr_file": "modules/core/include/opencv2/core/mat.hpp",
        "discussion_id": "1689877393",
        "commented_code": "@@ -371,6 +371,7 @@ class CV_EXPORTS _OutputArray : public _InputArray\n     void release() const;\n     void clear() const;\n     void setTo(const _InputArray& value, const _InputArray & mask = _InputArray()) const;\n+    Mat reinterpretType( int type ) const;",
        "comment_created_at": "2024-07-24T14:01:30+00:00",
        "comment_author": "vpisarev",
        "comment_body": "can we skip `Type` suffix in the name? (`Mat reinterpret(int type) const;`?)",
        "pr_file_module": null
      },
      {
        "comment_id": "1695039127",
        "repo_full_name": "opencv/opencv",
        "pr_number": 25394,
        "pr_file": "modules/core/include/opencv2/core/mat.hpp",
        "discussion_id": "1689877393",
        "commented_code": "@@ -371,6 +371,7 @@ class CV_EXPORTS _OutputArray : public _InputArray\n     void release() const;\n     void clear() const;\n     void setTo(const _InputArray& value, const _InputArray & mask = _InputArray()) const;\n+    Mat reinterpretType( int type ) const;",
        "comment_created_at": "2024-07-29T11:16:36+00:00",
        "comment_author": "Gao-HaoYuan",
        "comment_body": "@vpisarev I had done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1958390966",
    "pr_number": 26930,
    "pr_file": "modules/imgcodecs/src/grfmt_gif.hpp",
    "created_at": "2025-02-17T15:07:03+00:00",
    "commented_code": "namespace cv\n{\n\nenum GifOpMode\n{\n    GRFMT_GIF_Nothing = 0,\n    GRFMT_GIF_PreviousImage = 1,\n    GRFMT_GIF_Background = 2,\n    GRFMT_GIF_Cover = 3\n// See https://www.w3.org/Graphics/GIF/spec-gif89a.txt\nenum DisposalMethod {",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "1958390966",
        "repo_full_name": "opencv/opencv",
        "pr_number": 26930,
        "pr_file": "modules/imgcodecs/src/grfmt_gif.hpp",
        "discussion_id": "1958390966",
        "commented_code": "@@ -11,12 +11,12 @@\n namespace cv\n {\n \n-enum GifOpMode\n-{\n-    GRFMT_GIF_Nothing = 0,\n-    GRFMT_GIF_PreviousImage = 1,\n-    GRFMT_GIF_Background = 2,\n-    GRFMT_GIF_Cover = 3\n+// See https://www.w3.org/Graphics/GIF/spec-gif89a.txt\n+enum DisposalMethod {",
        "comment_created_at": "2025-02-17T15:07:03+00:00",
        "comment_author": "sturkmen72",
        "comment_body": "consider using \r\nenum GifDisposeMethod {\r\n    GIF_DISPOSE_NA                  = 0,\r\n    GIF_DISPOSE_NONE                = 1,\r\n    GIF_DISPOSE_RESTORE_BACKGROUND  = 2,\r\n    GIF_DISPOSE_RESTORE_PREVIOUS    = 3,\r\n};",
        "pr_file_module": null
      },
      {
        "comment_id": "1961335639",
        "repo_full_name": "opencv/opencv",
        "pr_number": 26930,
        "pr_file": "modules/imgcodecs/src/grfmt_gif.hpp",
        "discussion_id": "1958390966",
        "commented_code": "@@ -11,12 +11,12 @@\n namespace cv\n {\n \n-enum GifOpMode\n-{\n-    GRFMT_GIF_Nothing = 0,\n-    GRFMT_GIF_PreviousImage = 1,\n-    GRFMT_GIF_Background = 2,\n-    GRFMT_GIF_Cover = 3\n+// See https://www.w3.org/Graphics/GIF/spec-gif89a.txt\n+enum DisposalMethod {",
        "comment_created_at": "2025-02-19T09:52:48+00:00",
        "comment_author": "Kumataro",
        "comment_body": "Thank you for your comment, I agree and I replaced this enum with your suggestion !",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1959436677",
    "pr_number": 26925,
    "pr_file": "modules/core/include/opencv2/core.hpp",
    "created_at": "2025-02-18T10:08:24+00:00",
    "commented_code": "void writeFormat(FileStorage& fs) const;\n};\n\nclass CV_EXPORTS_W_SIMPLE DeepNeuralNet",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "1959436677",
        "repo_full_name": "opencv/opencv",
        "pr_number": 26925,
        "pr_file": "modules/core/include/opencv2/core.hpp",
        "discussion_id": "1959436677",
        "commented_code": "@@ -3294,6 +3294,12 @@ class CV_EXPORTS_W Algorithm\n     void writeFormat(FileStorage& fs) const;\n };\n \n+class CV_EXPORTS_W_SIMPLE DeepNeuralNet",
        "comment_created_at": "2025-02-18T10:08:24+00:00",
        "comment_author": "vpisarev",
        "comment_body": "the name is quite confusing. `cv::dnn::Net` vs `cv::DeepNeuralNet`. We can still have it in the core, but use more consistent name, e.g. `cv::dnn::BaseNet`:\r\n\r\n```\r\nnamespace dnn {\r\nclass CV_EXPORTS_W_SIMPLE NetBase\r\n{\r\npublic:\r\n      virtual ~NetBase();\r\n};\r\n}\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1928336874",
    "pr_number": 26836,
    "pr_file": "modules/imgproc/include/opencv2/imgproc.hpp",
    "created_at": "2025-01-24T08:47:19+00:00",
    "commented_code": "THRESH_TOZERO_INV = 4, //!< \\f[\\texttt{dst} (x,y) =  \\fork{0}{if \\(\\texttt{src}(x,y) > \\texttt{thresh}\\)}{\\texttt{src}(x,y)}{otherwise}\\f]\n    THRESH_MASK       = 7,\n    THRESH_OTSU       = 8, //!< flag, use Otsu algorithm to choose the optimal threshold value\n    THRESH_TRIANGLE   = 16 //!< flag, use Triangle algorithm to choose the optimal threshold value\n    THRESH_TRIANGLE   = 16, //!< flag, use Triangle algorithm to choose the optimal threshold value\n    THRESH_DISABLE    = 128 //!< flag, compute threshold only (useful for OTSU/TRIANGLE) but does not actually run thresholding",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "1928336874",
        "repo_full_name": "opencv/opencv",
        "pr_number": 26836,
        "pr_file": "modules/imgproc/include/opencv2/imgproc.hpp",
        "discussion_id": "1928336874",
        "commented_code": "@@ -329,7 +329,8 @@ enum ThresholdTypes {\n     THRESH_TOZERO_INV = 4, //!< \\f[\\texttt{dst} (x,y) =  \\fork{0}{if \\(\\texttt{src}(x,y) > \\texttt{thresh}\\)}{\\texttt{src}(x,y)}{otherwise}\\f]\n     THRESH_MASK       = 7,\n     THRESH_OTSU       = 8, //!< flag, use Otsu algorithm to choose the optimal threshold value\n-    THRESH_TRIANGLE   = 16 //!< flag, use Triangle algorithm to choose the optimal threshold value\n+    THRESH_TRIANGLE   = 16, //!< flag, use Triangle algorithm to choose the optimal threshold value\n+    THRESH_DISABLE    = 128 //!< flag, compute threshold only (useful for OTSU/TRIANGLE) but does not actually run thresholding",
        "comment_created_at": "2025-01-24T08:47:19+00:00",
        "comment_author": "asmorkalov",
        "comment_body": "The name is very controversial. I propose `THRESH_DRYRUN` or something similar.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1653009475",
    "pr_number": 25715,
    "pr_file": "modules/imgcodecs/src/grfmt_apng.hpp",
    "created_at": "2024-06-25T15:06:40+00:00",
    "commented_code": "// This file is part of OpenCV project.\n// It is subject to the license terms in the LICENSE file found in the top-level\n// directory of this distribution and at http://opencv.org/license.html\n\n/****************************************************************************\\\n *\n *  this file includes some modified part of apngasm and APNG Optimizer 1.4\n *  both have zlib license.\n *\n ****************************************************************************/\n\n\n /*  apngasm\n *\n *  The next generation of apngasm, the APNG Assembler.\n *  The apngasm CLI tool and library can assemble and disassemble APNG image files.\n *\n *  https://github.com/apngasm/apngasm\n\n\n /* APNG Optimizer 1.4\n *\n * Makes APNG files smaller.\n *\n * http://sourceforge.net/projects/apng/files\n *\n * Copyright (c) 2011-2015 Max Stepin\n * maxst at users.sourceforge.net\n *\n * zlib license\n * ------------\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n *    claim that you wrote the original software. If you use this software\n *    in a product, an acknowledgment in the product documentation would be\n *    appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n *    misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n *\n */\n\n#ifndef _GRFMT_APNG_H_\n#define _GRFMT_APNG_H_\n\n#ifdef HAVE_PNG\n\n#include \"grfmt_base.hpp\"\n#include \"bitstrm.hpp\"\n#include <png.h>\n#include <zlib.h>\n\nnamespace cv\n{\n\nconst uint DEFAULT_FRAME_NUMERATOR = 100; //!< @brief The default numerator for the frame delay fraction.\nconst uint DEFAULT_FRAME_DENOMINATOR =  1000; //!< @brief The default denominator for the frame delay fraction.\n\ntypedef struct {\n    uchar r, g, b;\n} rgb;\n\ntypedef struct {\n    uchar r, g, b, a;\n} rgba;\n\n\nclass APNGFrame\n{\npublic:\n    APNGFrame();\n    virtual ~APNGFrame() {}\n\n    /**\n     * @brief Creates an APNGFrame from a bitmapped array of RBGA pixel data.\n     * @param pixels The RGBA pixel data.\n     * @param width The width of the pixel data.\n     * @param height The height of the pixel data.\n     * @param delayNum The delay numerator for this frame (defaults to DEFAULT_FRAME_NUMERATOR).\n     * @param delayDen The delay denominator for this frame (defaults to DEFAULT_FRAME_DENMINATOR).\n     */\n    APNGFrame(rgba* pixels, int width, int height,\n        int delayNum = DEFAULT_FRAME_NUMERATOR,\n        int delayDen = DEFAULT_FRAME_DENOMINATOR);\n\n    /**\n     * @brief Creates an APNGFrame from a PNG file.\n     * @param filePath The relative or absolute path to an image file.\n     * @param delayNum The delay numerator for this frame (defaults to DEFAULT_FRAME_NUMERATOR).\n     * @param delayDen The delay denominator for this frame (defaults to DEFAULT_FRAME_DENMINATOR).\n     */\n    APNGFrame(const std::string& filePath,\n        int delayNum = DEFAULT_FRAME_NUMERATOR,\n        int delayDen = DEFAULT_FRAME_DENOMINATOR);\n\n    /**\n     * @brief Creates an APNGFrame from a bitmapped array of RBG pixel data.\n     * @param pixels The RGB pixel data.\n     * @param width The width of the pixel data.\n     * @param height The height of the pixel data.\n     * @param delayNum The delay numerator for this frame (defaults to DEFAULT_FRAME_NUMERATOR).\n     * @param delayDen The delay denominator for this frame (defaults to DEFAULT_FRAME_DENMINATOR).\n     */\n    APNGFrame(rgb* pixels, int width, int height,\n        int delayNum = DEFAULT_FRAME_NUMERATOR,\n        int delayDen = DEFAULT_FRAME_DENOMINATOR);\n\n    /**\n     * @brief Creates an APNGFrame from a bitmapped array of RBG pixel data.\n     * @param pixels The RGB pixel data.\n     * @param width The width of the pixel data.\n     * @param height The height of the pixel data.\n     * @param trns_color An array of transparency data.\n     * @param delayNum The delay numerator for this frame (defaults to DEFAULT_FRAME_NUMERATOR).\n     * @param delayDen The delay denominator for this frame (defaults to DEFAULT_FRAME_DENMINATOR).\n     */\n    APNGFrame(rgb* pixels, int width, int height,\n        rgb* trns_color = NULL, int delayNum = DEFAULT_FRAME_NUMERATOR,\n        int delayDen = DEFAULT_FRAME_DENOMINATOR);\n\n    /**\n     * @brief Saves this frame as a single PNG file.\n     * @param outPath The relative or absolute path to save the image file to.\n     * @return Returns true if save was successful.\n     */\n    bool save(const std::string& outPath) const;\n\n    int width() const { return m_width; }\n    int height() const { return m_height; }\n    virtual int type() const { return m_type; }\n\n    // Raw pixel data\n    uchar* pixels(uchar* setPixels = NULL);\n\n    // Palette into\n    rgb* palette(rgb* setPalette = NULL);\n    rgb _palette[256];\n\n    // Transparency info\n    uchar* transparency(uchar* setTransparency = NULL);\n\n    // Sizes for palette and transparency records\n    int paletteSize(int setPaletteSize = 0);",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "1653009475",
        "repo_full_name": "opencv/opencv",
        "pr_number": 25715,
        "pr_file": "modules/imgcodecs/src/grfmt_apng.hpp",
        "discussion_id": "1653009475",
        "commented_code": "@@ -0,0 +1,178 @@\n+// This file is part of OpenCV project.\n+// It is subject to the license terms in the LICENSE file found in the top-level\n+// directory of this distribution and at http://opencv.org/license.html\n+\n+/****************************************************************************\\\n+ *\n+ *  this file includes some modified part of apngasm and APNG Optimizer 1.4\n+ *  both have zlib license.\n+ *\n+ ****************************************************************************/\n+\n+\n+ /*  apngasm\n+ *\n+ *  The next generation of apngasm, the APNG Assembler.\n+ *  The apngasm CLI tool and library can assemble and disassemble APNG image files.\n+ *\n+ *  https://github.com/apngasm/apngasm\n+\n+\n+ /* APNG Optimizer 1.4\n+ *\n+ * Makes APNG files smaller.\n+ *\n+ * http://sourceforge.net/projects/apng/files\n+ *\n+ * Copyright (c) 2011-2015 Max Stepin\n+ * maxst at users.sourceforge.net\n+ *\n+ * zlib license\n+ * ------------\n+ *\n+ * This software is provided 'as-is', without any express or implied\n+ * warranty.  In no event will the authors be held liable for any damages\n+ * arising from the use of this software.\n+ *\n+ * Permission is granted to anyone to use this software for any purpose,\n+ * including commercial applications, and to alter it and redistribute it\n+ * freely, subject to the following restrictions:\n+ *\n+ * 1. The origin of this software must not be misrepresented; you must not\n+ *    claim that you wrote the original software. If you use this software\n+ *    in a product, an acknowledgment in the product documentation would be\n+ *    appreciated but is not required.\n+ * 2. Altered source versions must be plainly marked as such, and must not be\n+ *    misrepresented as being the original software.\n+ * 3. This notice may not be removed or altered from any source distribution.\n+ *\n+ */\n+\n+#ifndef _GRFMT_APNG_H_\n+#define _GRFMT_APNG_H_\n+\n+#ifdef HAVE_PNG\n+\n+#include \"grfmt_base.hpp\"\n+#include \"bitstrm.hpp\"\n+#include <png.h>\n+#include <zlib.h>\n+\n+namespace cv\n+{\n+\n+const uint DEFAULT_FRAME_NUMERATOR = 100; //!< @brief The default numerator for the frame delay fraction.\n+const uint DEFAULT_FRAME_DENOMINATOR =  1000; //!< @brief The default denominator for the frame delay fraction.\n+\n+typedef struct {\n+    uchar r, g, b;\n+} rgb;\n+\n+typedef struct {\n+    uchar r, g, b, a;\n+} rgba;\n+\n+\n+class APNGFrame\n+{\n+public:\n+    APNGFrame();\n+    virtual ~APNGFrame() {}\n+\n+    /**\n+     * @brief Creates an APNGFrame from a bitmapped array of RBGA pixel data.\n+     * @param pixels The RGBA pixel data.\n+     * @param width The width of the pixel data.\n+     * @param height The height of the pixel data.\n+     * @param delayNum The delay numerator for this frame (defaults to DEFAULT_FRAME_NUMERATOR).\n+     * @param delayDen The delay denominator for this frame (defaults to DEFAULT_FRAME_DENMINATOR).\n+     */\n+    APNGFrame(rgba* pixels, int width, int height,\n+        int delayNum = DEFAULT_FRAME_NUMERATOR,\n+        int delayDen = DEFAULT_FRAME_DENOMINATOR);\n+\n+    /**\n+     * @brief Creates an APNGFrame from a PNG file.\n+     * @param filePath The relative or absolute path to an image file.\n+     * @param delayNum The delay numerator for this frame (defaults to DEFAULT_FRAME_NUMERATOR).\n+     * @param delayDen The delay denominator for this frame (defaults to DEFAULT_FRAME_DENMINATOR).\n+     */\n+    APNGFrame(const std::string& filePath,\n+        int delayNum = DEFAULT_FRAME_NUMERATOR,\n+        int delayDen = DEFAULT_FRAME_DENOMINATOR);\n+\n+    /**\n+     * @brief Creates an APNGFrame from a bitmapped array of RBG pixel data.\n+     * @param pixels The RGB pixel data.\n+     * @param width The width of the pixel data.\n+     * @param height The height of the pixel data.\n+     * @param delayNum The delay numerator for this frame (defaults to DEFAULT_FRAME_NUMERATOR).\n+     * @param delayDen The delay denominator for this frame (defaults to DEFAULT_FRAME_DENMINATOR).\n+     */\n+    APNGFrame(rgb* pixels, int width, int height,\n+        int delayNum = DEFAULT_FRAME_NUMERATOR,\n+        int delayDen = DEFAULT_FRAME_DENOMINATOR);\n+\n+    /**\n+     * @brief Creates an APNGFrame from a bitmapped array of RBG pixel data.\n+     * @param pixels The RGB pixel data.\n+     * @param width The width of the pixel data.\n+     * @param height The height of the pixel data.\n+     * @param trns_color An array of transparency data.\n+     * @param delayNum The delay numerator for this frame (defaults to DEFAULT_FRAME_NUMERATOR).\n+     * @param delayDen The delay denominator for this frame (defaults to DEFAULT_FRAME_DENMINATOR).\n+     */\n+    APNGFrame(rgb* pixels, int width, int height,\n+        rgb* trns_color = NULL, int delayNum = DEFAULT_FRAME_NUMERATOR,\n+        int delayDen = DEFAULT_FRAME_DENOMINATOR);\n+\n+    /**\n+     * @brief Saves this frame as a single PNG file.\n+     * @param outPath The relative or absolute path to save the image file to.\n+     * @return Returns true if save was successful.\n+     */\n+    bool save(const std::string& outPath) const;\n+\n+    int width() const { return m_width; }\n+    int height() const { return m_height; }\n+    virtual int type() const { return m_type; }\n+\n+    // Raw pixel data\n+    uchar* pixels(uchar* setPixels = NULL);\n+\n+    // Palette into\n+    rgb* palette(rgb* setPalette = NULL);\n+    rgb _palette[256];\n+\n+    // Transparency info\n+    uchar* transparency(uchar* setTransparency = NULL);\n+\n+    // Sizes for palette and transparency records\n+    int paletteSize(int setPaletteSize = 0);",
        "comment_created_at": "2024-06-25T15:06:40+00:00",
        "comment_author": "vrabaud",
        "comment_body": "maybe call the setters: `setPaletteSize`. I like the Goole convention for naming variables: https://google.github.io/styleguide/cppguide.html#Function_Names\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1658707587",
    "pr_number": 25715,
    "pr_file": "modules/imgcodecs/src/apngframe.hpp",
    "created_at": "2024-06-28T13:00:34+00:00",
    "commented_code": "// This file is part of OpenCV project.\n// It is subject to the license terms in the LICENSE file found in the top-level\n// directory of this distribution and at http://opencv.org/license.html\n\n/****************************************************************************\\\n *\n *  this file includes some modified part of apngasm\n *\n ****************************************************************************/\n\n\n /*  apngasm\n *\n *  The next generation of apngasm, the APNG Assembler.\n *  The apngasm CLI tool and library can assemble and disassemble APNG image files.\n *\n *  https://github.com/apngasm/apngasm\n *\n * zlib license\n * ------------\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n *    claim that you wrote the original software. If you use this software\n *    in a product, an acknowledgment in the product documentation would be\n *    appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n *    misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n *\n */\n\n#ifndef _APNGFRAME_H_\n#define _APNGFRAME_H_\n\n#include <string>\n\nnamespace cv {\n\nconst unsigned DEFAULT_FRAME_NUMERATOR =\n    100; //!< @brief The default numerator for the frame delay fraction.\nconst unsigned DEFAULT_FRAME_DENOMINATOR =\n    1000; //!< @brief The default denominator for the frame delay fraction.\n\ntypedef struct {\n  unsigned char r, g, b;\n} rgb;\ntypedef struct {\n  unsigned char r, g, b, a;\n} rgba;\n\n// Individual APNG frame\nclass APNGFrame {\npublic:\n  // Raw pixel data\n  unsigned char *pixels(unsigned char *setPixels = NULL);\n  unsigned char *_pixels;\n\n  // Width and Height\n  unsigned int width(unsigned int setWidth = 0);\n  unsigned int height(unsigned int setHeight = 0);\n  unsigned int _width;\n  unsigned int _height;\n\n  // PNG color type\n  unsigned char colorType(unsigned char setColorType = 255);\n  unsigned char _colorType;\n\n  // Palette into\n  rgb *palette(rgb *setPalette = NULL);\n  rgb _palette[256];\n\n  // Transparency info\n  unsigned char *transparency(unsigned char *setTransparency = NULL);\n  unsigned char _transparency[256];\n\n  // Sizes for palette and transparency records\n  int paletteSize(int setPaletteSize = 0);",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "1658707587",
        "repo_full_name": "opencv/opencv",
        "pr_number": 25715,
        "pr_file": "modules/imgcodecs/src/apngframe.hpp",
        "discussion_id": "1658707587",
        "commented_code": "@@ -0,0 +1,173 @@\n+// This file is part of OpenCV project.\n+// It is subject to the license terms in the LICENSE file found in the top-level\n+// directory of this distribution and at http://opencv.org/license.html\n+\n+/****************************************************************************\\\n+ *\n+ *  this file includes some modified part of apngasm\n+ *\n+ ****************************************************************************/\n+\n+\n+ /*  apngasm\n+ *\n+ *  The next generation of apngasm, the APNG Assembler.\n+ *  The apngasm CLI tool and library can assemble and disassemble APNG image files.\n+ *\n+ *  https://github.com/apngasm/apngasm\n+ *\n+ * zlib license\n+ * ------------\n+ *\n+ * This software is provided 'as-is', without any express or implied\n+ * warranty.  In no event will the authors be held liable for any damages\n+ * arising from the use of this software.\n+ *\n+ * Permission is granted to anyone to use this software for any purpose,\n+ * including commercial applications, and to alter it and redistribute it\n+ * freely, subject to the following restrictions:\n+ *\n+ * 1. The origin of this software must not be misrepresented; you must not\n+ *    claim that you wrote the original software. If you use this software\n+ *    in a product, an acknowledgment in the product documentation would be\n+ *    appreciated but is not required.\n+ * 2. Altered source versions must be plainly marked as such, and must not be\n+ *    misrepresented as being the original software.\n+ * 3. This notice may not be removed or altered from any source distribution.\n+ *\n+ */\n+\n+#ifndef _APNGFRAME_H_\n+#define _APNGFRAME_H_\n+\n+#include <string>\n+\n+namespace cv {\n+\n+const unsigned DEFAULT_FRAME_NUMERATOR =\n+    100; //!< @brief The default numerator for the frame delay fraction.\n+const unsigned DEFAULT_FRAME_DENOMINATOR =\n+    1000; //!< @brief The default denominator for the frame delay fraction.\n+\n+typedef struct {\n+  unsigned char r, g, b;\n+} rgb;\n+typedef struct {\n+  unsigned char r, g, b, a;\n+} rgba;\n+\n+// Individual APNG frame\n+class APNGFrame {\n+public:\n+  // Raw pixel data\n+  unsigned char *pixels(unsigned char *setPixels = NULL);\n+  unsigned char *_pixels;\n+\n+  // Width and Height\n+  unsigned int width(unsigned int setWidth = 0);\n+  unsigned int height(unsigned int setHeight = 0);\n+  unsigned int _width;\n+  unsigned int _height;\n+\n+  // PNG color type\n+  unsigned char colorType(unsigned char setColorType = 255);\n+  unsigned char _colorType;\n+\n+  // Palette into\n+  rgb *palette(rgb *setPalette = NULL);\n+  rgb _palette[256];\n+\n+  // Transparency info\n+  unsigned char *transparency(unsigned char *setTransparency = NULL);\n+  unsigned char _transparency[256];\n+\n+  // Sizes for palette and transparency records\n+  int paletteSize(int setPaletteSize = 0);",
        "comment_created_at": "2024-06-28T13:00:34+00:00",
        "comment_author": "vrabaud",
        "comment_body": "it's hard to get this is a setter. Call it `setPaletteSize`.\r\nBut if _palette_size is public, what's the point of having a setter? Just make the member public no?",
        "pr_file_module": null
      }
    ]
  }
]