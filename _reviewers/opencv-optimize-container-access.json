[
  {
    "discussion_id": "2083770400",
    "pr_number": 27153,
    "pr_file": "modules/videoio/src/cap_ffmpeg_impl.hpp",
    "created_at": "2025-05-12T03:45:24+00:00",
    "commented_code": "}\n\n/// write a frame with FFMPEG\nbool CvVideoWriter_FFMPEG::writeFrame( const unsigned char* data, int step, int width, int height, int cn, int origin )\nbool CvVideoWriter_FFMPEG::writeFrame( const unsigned char* data, int step, int width, int height, int type, int origin )\n{\n    if (!encode_video) {\n        CV_Assert(cn == 1 && ((width > 0 && height == 1) || (width == 1 && height > 0 && step == 1)));\n        CV_Assert((type == CV_16UC1 || type == CV_8UC1) && ((width > 0 && height == 1) || (width == 1 && height > 0 && step == 1)));\n        const bool set_key_frame = key_frame ? key_frame : idr_period ? frame_idx % idr_period == 0 : 1;\n        bool ret = icv_av_encapsulate_video_FFMPEG(oc, video_st, context, (uint8_t*)data, width, frame_idx, pts_index, b_frame_dts_delay, set_key_frame);\n        frame_idx++;\n        return ret;\n    }\n\n    // check parameters\n    if (input_pix_fmt == AV_PIX_FMT_BGR24) {\n        if (cn != 3) {\n            return false;\n        }\n    }\n    else if (input_pix_fmt == AV_PIX_FMT_GRAY8 || input_pix_fmt == AV_PIX_FMT_GRAY16LE) {\n        if (cn != 1) {\n            return false;\n        }\n    }\n    else {\n        CV_LOG_WARNING(NULL, \"Input data does not match selected pixel format: \"\n                       << av_get_pix_fmt_name(input_pix_fmt)\n                       << \", number of channels: \" << cn);\n        CV_Assert(false);\n    // check parameters and do conversions if needed\n    cv::Mat inputMat(height, width, type, (void*)data, step);\n    cv::Mat convertedMat;\n    switch (input_pix_fmt) {\n        case AV_PIX_FMT_BGR24: // expected CV_8UC3\n            if (type == CV_8UC3)\n                convertedMat = inputMat;\n            else {\n                if (type == CV_16UC1) // CV_16UC1 -> CV_8UC1\n                    inputMat.convertTo(inputMat, CV_8UC1, 1.0 / 256);",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "2083770400",
        "repo_full_name": "opencv/opencv",
        "pr_number": 27153,
        "pr_file": "modules/videoio/src/cap_ffmpeg_impl.hpp",
        "discussion_id": "2083770400",
        "commented_code": "@@ -2512,34 +2512,57 @@ static int icv_av_write_frame_FFMPEG( AVFormatContext * oc, AVStream * video_st,\n }\n \n /// write a frame with FFMPEG\n-bool CvVideoWriter_FFMPEG::writeFrame( const unsigned char* data, int step, int width, int height, int cn, int origin )\n+bool CvVideoWriter_FFMPEG::writeFrame( const unsigned char* data, int step, int width, int height, int type, int origin )\n {\n     if (!encode_video) {\n-        CV_Assert(cn == 1 && ((width > 0 && height == 1) || (width == 1 && height > 0 && step == 1)));\n+        CV_Assert((type == CV_16UC1 || type == CV_8UC1) && ((width > 0 && height == 1) || (width == 1 && height > 0 && step == 1)));\n         const bool set_key_frame = key_frame ? key_frame : idr_period ? frame_idx % idr_period == 0 : 1;\n         bool ret = icv_av_encapsulate_video_FFMPEG(oc, video_st, context, (uint8_t*)data, width, frame_idx, pts_index, b_frame_dts_delay, set_key_frame);\n         frame_idx++;\n         return ret;\n     }\n \n-    // check parameters\n-    if (input_pix_fmt == AV_PIX_FMT_BGR24) {\n-        if (cn != 3) {\n-            return false;\n-        }\n-    }\n-    else if (input_pix_fmt == AV_PIX_FMT_GRAY8 || input_pix_fmt == AV_PIX_FMT_GRAY16LE) {\n-        if (cn != 1) {\n-            return false;\n-        }\n-    }\n-    else {\n-        CV_LOG_WARNING(NULL, \"Input data does not match selected pixel format: \"\n-                       << av_get_pix_fmt_name(input_pix_fmt)\n-                       << \", number of channels: \" << cn);\n-        CV_Assert(false);\n+    // check parameters and do conversions if needed\n+    cv::Mat inputMat(height, width, type, (void*)data, step);\n+    cv::Mat convertedMat;\n+    switch (input_pix_fmt) {\n+        case AV_PIX_FMT_BGR24: // expected CV_8UC3\n+            if (type == CV_8UC3)\n+                convertedMat = inputMat;\n+            else {\n+                if (type == CV_16UC1) // CV_16UC1 -> CV_8UC1\n+                    inputMat.convertTo(inputMat, CV_8UC1, 1.0 / 256);",
        "comment_created_at": "2025-05-12T03:45:24+00:00",
        "comment_author": "opencv-alalek",
        "comment_body": "> inputMat ... inputMat\r\n\r\n\"In-place\" ops should not be used in general (causes extra `.clone()` call).",
        "pr_file_module": null
      },
      {
        "comment_id": "2094242958",
        "repo_full_name": "opencv/opencv",
        "pr_number": 27153,
        "pr_file": "modules/videoio/src/cap_ffmpeg_impl.hpp",
        "discussion_id": "2083770400",
        "commented_code": "@@ -2512,34 +2512,57 @@ static int icv_av_write_frame_FFMPEG( AVFormatContext * oc, AVStream * video_st,\n }\n \n /// write a frame with FFMPEG\n-bool CvVideoWriter_FFMPEG::writeFrame( const unsigned char* data, int step, int width, int height, int cn, int origin )\n+bool CvVideoWriter_FFMPEG::writeFrame( const unsigned char* data, int step, int width, int height, int type, int origin )\n {\n     if (!encode_video) {\n-        CV_Assert(cn == 1 && ((width > 0 && height == 1) || (width == 1 && height > 0 && step == 1)));\n+        CV_Assert((type == CV_16UC1 || type == CV_8UC1) && ((width > 0 && height == 1) || (width == 1 && height > 0 && step == 1)));\n         const bool set_key_frame = key_frame ? key_frame : idr_period ? frame_idx % idr_period == 0 : 1;\n         bool ret = icv_av_encapsulate_video_FFMPEG(oc, video_st, context, (uint8_t*)data, width, frame_idx, pts_index, b_frame_dts_delay, set_key_frame);\n         frame_idx++;\n         return ret;\n     }\n \n-    // check parameters\n-    if (input_pix_fmt == AV_PIX_FMT_BGR24) {\n-        if (cn != 3) {\n-            return false;\n-        }\n-    }\n-    else if (input_pix_fmt == AV_PIX_FMT_GRAY8 || input_pix_fmt == AV_PIX_FMT_GRAY16LE) {\n-        if (cn != 1) {\n-            return false;\n-        }\n-    }\n-    else {\n-        CV_LOG_WARNING(NULL, \"Input data does not match selected pixel format: \"\n-                       << av_get_pix_fmt_name(input_pix_fmt)\n-                       << \", number of channels: \" << cn);\n-        CV_Assert(false);\n+    // check parameters and do conversions if needed\n+    cv::Mat inputMat(height, width, type, (void*)data, step);\n+    cv::Mat convertedMat;\n+    switch (input_pix_fmt) {\n+        case AV_PIX_FMT_BGR24: // expected CV_8UC3\n+            if (type == CV_8UC3)\n+                convertedMat = inputMat;\n+            else {\n+                if (type == CV_16UC1) // CV_16UC1 -> CV_8UC1\n+                    inputMat.convertTo(inputMat, CV_8UC1, 1.0 / 256);",
        "comment_created_at": "2025-05-17T23:43:37+00:00",
        "comment_author": "03kiko",
        "comment_body": "Thanks for the heads-up, Iâ€™ll avoid in-place operations moving forward.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2003012896",
    "pr_number": 27097,
    "pr_file": "3rdparty/hal_rvv/hal_rvv_1p0/filter.hpp",
    "created_at": "2025-03-19T10:44:22+00:00",
    "commented_code": "{\n    sepFilter2D* data = reinterpret_cast<sepFilter2D*>(context);\n\n    switch (data->kernelx_length)\n    uchar* _dst_data = dst_data;\n    size_t _dst_step = dst_step;\n    size_t size = sizeof(char);\n    switch (data->dst_type)\n    {\n    case 3:\n        return filter::invoke(height, {sepFilter<3>}, data, src_data, src_step, dst_data, dst_step, width, height, full_width, full_height, offset_x, offset_y);\n    case 5:\n        return filter::invoke(height, {sepFilter<5>}, data, src_data, src_step, dst_data, dst_step, width, height, full_width, full_height, offset_x, offset_y);\n    case CV_16SC1:\n        size = sizeof(short);\n        break;\n    case CV_32FC1:\n        size = sizeof(float);\n        break;\n    }\n    std::vector<uchar> *dst = nullptr;\n    if (src_data == _dst_data)\n    {\n        dst = new std::vector<uchar>(width * height * size);",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "2003012896",
        "repo_full_name": "opencv/opencv",
        "pr_number": 27097,
        "pr_file": "3rdparty/hal_rvv/hal_rvv_1p0/filter.hpp",
        "discussion_id": "2003012896",
        "commented_code": "@@ -492,15 +517,61 @@ inline int sepFilter(cvhalFilter2D *context, uchar *src_data, size_t src_step, u\n {\n     sepFilter2D* data = reinterpret_cast<sepFilter2D*>(context);\n \n-    switch (data->kernelx_length)\n+    uchar* _dst_data = dst_data;\n+    size_t _dst_step = dst_step;\n+    size_t size = sizeof(char);\n+    switch (data->dst_type)\n     {\n-    case 3:\n-        return filter::invoke(height, {sepFilter<3>}, data, src_data, src_step, dst_data, dst_step, width, height, full_width, full_height, offset_x, offset_y);\n-    case 5:\n-        return filter::invoke(height, {sepFilter<5>}, data, src_data, src_step, dst_data, dst_step, width, height, full_width, full_height, offset_x, offset_y);\n+    case CV_16SC1:\n+        size = sizeof(short);\n+        break;\n+    case CV_32FC1:\n+        size = sizeof(float);\n+        break;\n+    }\n+    std::vector<uchar> *dst = nullptr;\n+    if (src_data == _dst_data)\n+    {\n+        dst = new std::vector<uchar>(width * height * size);",
        "comment_created_at": "2025-03-19T10:44:22+00:00",
        "comment_author": "asmorkalov",
        "comment_body": "just local `std::vector<>` outside of `if` should be enough here. It's empty by default also you save one new/delete pair if condition is true.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1962204688",
    "pr_number": 26834,
    "pr_file": "modules/imgproc/src/contours_common.hpp",
    "created_at": "2025-02-19T18:48:05+00:00",
    "commented_code": "class TreeIterator\n{\npublic:\n    TreeIterator(Tree<T>& tree_) : tree(tree_)\n    TreeIterator(Tree<T>& tree_) : tree(tree_)//,levels(&tree._treeIteratorArena)\n    {\n        CV_Assert(!tree.isEmpty());\n        levels.push(0);\n        levels.push_back(0);\n    }\n    bool isDone() const\n    {\n        return levels.empty();\n    }\n    const TreeNode<T>& getNext_s()\n    {\n        int idx = levels.top();\n        levels.pop();\n        int idx = levels.back();\n        levels.pop_back();\n        const TreeNode<T>& res = tree.elem(idx);\n        int cur = tree.lastSibling(res.first_child);\n        while (cur != -1)\n        {\n            levels.push(cur);\n            levels.push_back(cur);\n            cur = tree.elem(cur).prev;\n        }\n        return res;\n    }\n\nprivate:\n    std::stack<int> levels;\n    Tree<T>& tree;\n    vectorOfRanges<int> levels;",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "1962204688",
        "repo_full_name": "opencv/opencv",
        "pr_number": 26834,
        "pr_file": "modules/imgproc/src/contours_common.hpp",
        "discussion_id": "1962204688",
        "commented_code": "@@ -135,47 +297,140 @@ template <typename T>\n class TreeIterator\n {\n public:\n-    TreeIterator(Tree<T>& tree_) : tree(tree_)\n+    TreeIterator(Tree<T>& tree_) : tree(tree_)//,levels(&tree._treeIteratorArena)\n     {\n         CV_Assert(!tree.isEmpty());\n-        levels.push(0);\n+        levels.push_back(0);\n     }\n     bool isDone() const\n     {\n         return levels.empty();\n     }\n     const TreeNode<T>& getNext_s()\n     {\n-        int idx = levels.top();\n-        levels.pop();\n+        int idx = levels.back();\n+        levels.pop_back();\n         const TreeNode<T>& res = tree.elem(idx);\n         int cur = tree.lastSibling(res.first_child);\n         while (cur != -1)\n         {\n-            levels.push(cur);\n+            levels.push_back(cur);\n             cur = tree.elem(cur).prev;\n         }\n         return res;\n     }\n \n private:\n-    std::stack<int> levels;\n     Tree<T>& tree;\n+    vectorOfRanges<int> levels;",
        "comment_created_at": "2025-02-19T18:48:05+00:00",
        "comment_author": "mshabunin",
        "comment_body": "I'm observing better performance with `std::stack` (though less stable):\r\n\r\nOn x86_64 (Core i5-11600, Linux):\r\n- stack: `samples=100   mean=44.01   median=42.88   min=40.59   stddev=2.44 (5.6%)`\r\n- vectorOfRanges: `samples=100   mean=46.97   median=46.97   min=46.65   stddev=0.16 (0.3%)`\r\n\r\nOn AArch64 (Rockchip RK3588):\r\n- stack: `samples=100   mean=79.23   median=79.02   min=78.35   stddev=1.27 (1.6%)`\r\n- vectorOfRanges: `samples=100   mean=89.51   median=89.52   min=88.90   stddev=0.21 (0.2%)`\r\n\r\nI propose to leave the stack version. Also it is better for simplicity.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1830966908",
    "pr_number": 26422,
    "pr_file": "modules/imgproc/src/median_blur.simd.hpp",
    "created_at": "2024-11-06T12:49:50+00:00",
    "commented_code": "#undef N\n#undef UPDATE_ACC\n}\n#endif\n\n// Binary search to find the median offset in the histogram\nstatic inline void\nget_median_ofs256(int &ofs, const uint16_t *hist, const int halfsum) {\n    int s = 0, step = 128;\n    uint16_t ds, m;\n\n#if CV_SIMD || CV_SIMD_SCALABLE\n    const int lanes = VTraits<v_uint16>::vlanes();\n#endif\n\n    ofs = 0;\n    while (step) {\n#if CV_SIMD || CV_SIMD_SCALABLE\n        // Use SIMD instructions when the step is larger than or equal to the lane size\n        if (step >= lanes) {\n            v_uint16 v_ds = vx_load(hist + ofs);\n            for (int i = lanes; i <= step - lanes; i += lanes)\n                v_ds = v_add(v_ds, vx_load(hist + ofs + i));\n            ds = v_reduce_sum(v_ds);\n        }\n            // For smaller steps, use scalar accumulation\n        else\n#endif\n        {\n            ds = hist[ofs];\n            for (int i = 1; i < step; i++)\n                ds += hist[ofs + i];\n        }\n\n        // Determine if the cumulative sum has reached or surpassed half the total sum\n        m = (s + ds) <= halfsum;\n        ofs += m * step;\n        s += ds & -m;\n        step = step >> 1;\n    }\n}\n\nstatic void\nmedianBlur_8u(const Mat &_src, Mat &_dst, int ksize) {\n    CV_INSTRUMENT_REGION();\n\n    const int channels = _src.channels();\n    int radius = ksize / 2;\n    CV_Assert(ksize % 2 == 1);\n\n    const int rows = _src.rows;\n    const int cols = _src.cols;\n    const int win_half_size = ksize * ksize / 2;\n\n    const uint8_t *src_data = _src.ptr<uint8_t>();\n    size_t src_step = _src.step;\n    uint8_t *dst_data = _dst.ptr<uint8_t>();\n    size_t dst_step = _dst.step;\n\n    double nstripes = (double) (rows * cols) / 1024.0;\n    parallel_for_(Range(0, rows), [&](const Range &r) {\n        int y_start = r.start;\n        int y_end = r.end;\n\n        std::vector<std::vector<uint16_t>> hist256(channels, std::vector<uint16_t>(256, 0));",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "1830966908",
        "repo_full_name": "opencv/opencv",
        "pr_number": 26422,
        "pr_file": "modules/imgproc/src/median_blur.simd.hpp",
        "discussion_id": "1830966908",
        "commented_code": "@@ -489,7 +490,149 @@ medianBlur_8u_Om( const Mat& _src, Mat& _dst, int m )\n #undef N\n #undef UPDATE_ACC\n }\n+#endif\n+\n+// Binary search to find the median offset in the histogram\n+static inline void\n+get_median_ofs256(int &ofs, const uint16_t *hist, const int halfsum) {\n+    int s = 0, step = 128;\n+    uint16_t ds, m;\n \n+#if CV_SIMD || CV_SIMD_SCALABLE\n+    const int lanes = VTraits<v_uint16>::vlanes();\n+#endif\n+\n+    ofs = 0;\n+    while (step) {\n+#if CV_SIMD || CV_SIMD_SCALABLE\n+        // Use SIMD instructions when the step is larger than or equal to the lane size\n+        if (step >= lanes) {\n+            v_uint16 v_ds = vx_load(hist + ofs);\n+            for (int i = lanes; i <= step - lanes; i += lanes)\n+                v_ds = v_add(v_ds, vx_load(hist + ofs + i));\n+            ds = v_reduce_sum(v_ds);\n+        }\n+            // For smaller steps, use scalar accumulation\n+        else\n+#endif\n+        {\n+            ds = hist[ofs];\n+            for (int i = 1; i < step; i++)\n+                ds += hist[ofs + i];\n+        }\n+\n+        // Determine if the cumulative sum has reached or surpassed half the total sum\n+        m = (s + ds) <= halfsum;\n+        ofs += m * step;\n+        s += ds & -m;\n+        step = step >> 1;\n+    }\n+}\n+\n+static void\n+medianBlur_8u(const Mat &_src, Mat &_dst, int ksize) {\n+    CV_INSTRUMENT_REGION();\n+\n+    const int channels = _src.channels();\n+    int radius = ksize / 2;\n+    CV_Assert(ksize % 2 == 1);\n+\n+    const int rows = _src.rows;\n+    const int cols = _src.cols;\n+    const int win_half_size = ksize * ksize / 2;\n+\n+    const uint8_t *src_data = _src.ptr<uint8_t>();\n+    size_t src_step = _src.step;\n+    uint8_t *dst_data = _dst.ptr<uint8_t>();\n+    size_t dst_step = _dst.step;\n+\n+    double nstripes = (double) (rows * cols) / 1024.0;\n+    parallel_for_(Range(0, rows), [&](const Range &r) {\n+        int y_start = r.start;\n+        int y_end = r.end;\n+\n+        std::vector<std::vector<uint16_t>> hist256(channels, std::vector<uint16_t>(256, 0));",
        "comment_created_at": "2024-11-06T12:49:50+00:00",
        "comment_author": "vpisarev",
        "comment_body": "don't use vector of vectors. It's very slow. Use plain 1D vector of 256*channels elements",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1830969632",
    "pr_number": 26422,
    "pr_file": "modules/imgproc/src/median_blur.simd.hpp",
    "created_at": "2024-11-06T12:51:59+00:00",
    "commented_code": "#undef N\n#undef UPDATE_ACC\n}\n#endif\n\n// Binary search to find the median offset in the histogram\nstatic inline void\nget_median_ofs256(int &ofs, const uint16_t *hist, const int halfsum) {\n    int s = 0, step = 128;\n    uint16_t ds, m;\n\n#if CV_SIMD || CV_SIMD_SCALABLE\n    const int lanes = VTraits<v_uint16>::vlanes();\n#endif\n\n    ofs = 0;\n    while (step) {\n#if CV_SIMD || CV_SIMD_SCALABLE\n        // Use SIMD instructions when the step is larger than or equal to the lane size\n        if (step >= lanes) {\n            v_uint16 v_ds = vx_load(hist + ofs);\n            for (int i = lanes; i <= step - lanes; i += lanes)\n                v_ds = v_add(v_ds, vx_load(hist + ofs + i));\n            ds = v_reduce_sum(v_ds);\n        }\n            // For smaller steps, use scalar accumulation\n        else\n#endif\n        {\n            ds = hist[ofs];\n            for (int i = 1; i < step; i++)\n                ds += hist[ofs + i];\n        }\n\n        // Determine if the cumulative sum has reached or surpassed half the total sum\n        m = (s + ds) <= halfsum;\n        ofs += m * step;\n        s += ds & -m;\n        step = step >> 1;\n    }\n}\n\nstatic void\nmedianBlur_8u(const Mat &_src, Mat &_dst, int ksize) {\n    CV_INSTRUMENT_REGION();\n\n    const int channels = _src.channels();\n    int radius = ksize / 2;\n    CV_Assert(ksize % 2 == 1);\n\n    const int rows = _src.rows;\n    const int cols = _src.cols;\n    const int win_half_size = ksize * ksize / 2;\n\n    const uint8_t *src_data = _src.ptr<uint8_t>();\n    size_t src_step = _src.step;\n    uint8_t *dst_data = _dst.ptr<uint8_t>();\n    size_t dst_step = _dst.step;\n\n    double nstripes = (double) (rows * cols) / 1024.0;\n    parallel_for_(Range(0, rows), [&](const Range &r) {\n        int y_start = r.start;\n        int y_end = r.end;\n\n        std::vector<std::vector<uint16_t>> hist256(channels, std::vector<uint16_t>(256, 0));\n        std::vector<const uint8_t *> win_row_ptrs(ksize);",
    "repo_full_name": "opencv/opencv",
    "discussion_comments": [
      {
        "comment_id": "1830969632",
        "repo_full_name": "opencv/opencv",
        "pr_number": 26422,
        "pr_file": "modules/imgproc/src/median_blur.simd.hpp",
        "discussion_id": "1830969632",
        "commented_code": "@@ -489,7 +490,149 @@ medianBlur_8u_Om( const Mat& _src, Mat& _dst, int m )\n #undef N\n #undef UPDATE_ACC\n }\n+#endif\n+\n+// Binary search to find the median offset in the histogram\n+static inline void\n+get_median_ofs256(int &ofs, const uint16_t *hist, const int halfsum) {\n+    int s = 0, step = 128;\n+    uint16_t ds, m;\n \n+#if CV_SIMD || CV_SIMD_SCALABLE\n+    const int lanes = VTraits<v_uint16>::vlanes();\n+#endif\n+\n+    ofs = 0;\n+    while (step) {\n+#if CV_SIMD || CV_SIMD_SCALABLE\n+        // Use SIMD instructions when the step is larger than or equal to the lane size\n+        if (step >= lanes) {\n+            v_uint16 v_ds = vx_load(hist + ofs);\n+            for (int i = lanes; i <= step - lanes; i += lanes)\n+                v_ds = v_add(v_ds, vx_load(hist + ofs + i));\n+            ds = v_reduce_sum(v_ds);\n+        }\n+            // For smaller steps, use scalar accumulation\n+        else\n+#endif\n+        {\n+            ds = hist[ofs];\n+            for (int i = 1; i < step; i++)\n+                ds += hist[ofs + i];\n+        }\n+\n+        // Determine if the cumulative sum has reached or surpassed half the total sum\n+        m = (s + ds) <= halfsum;\n+        ofs += m * step;\n+        s += ds & -m;\n+        step = step >> 1;\n+    }\n+}\n+\n+static void\n+medianBlur_8u(const Mat &_src, Mat &_dst, int ksize) {\n+    CV_INSTRUMENT_REGION();\n+\n+    const int channels = _src.channels();\n+    int radius = ksize / 2;\n+    CV_Assert(ksize % 2 == 1);\n+\n+    const int rows = _src.rows;\n+    const int cols = _src.cols;\n+    const int win_half_size = ksize * ksize / 2;\n+\n+    const uint8_t *src_data = _src.ptr<uint8_t>();\n+    size_t src_step = _src.step;\n+    uint8_t *dst_data = _dst.ptr<uint8_t>();\n+    size_t dst_step = _dst.step;\n+\n+    double nstripes = (double) (rows * cols) / 1024.0;\n+    parallel_for_(Range(0, rows), [&](const Range &r) {\n+        int y_start = r.start;\n+        int y_end = r.end;\n+\n+        std::vector<std::vector<uint16_t>> hist256(channels, std::vector<uint16_t>(256, 0));\n+        std::vector<const uint8_t *> win_row_ptrs(ksize);",
        "comment_created_at": "2024-11-06T12:51:59+00:00",
        "comment_author": "vpisarev",
        "comment_body": "extract pointer from hist256 and win_row_ptrs. Accessing `std::vector` may be significantly slower than accessing plain arrays.\r\n\r\n```\r\nstd::vector<...> hist256vec(...);\r\nuint16_t* hist256 = hist256vec.data();\r\nstd::vector<...> win_row_ptrs_vec(...);\r\nconst uint8_t* win_row_ptrs = win_row_ptrs_vec.data();\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  }
]