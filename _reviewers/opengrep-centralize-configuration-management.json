[
  {
    "discussion_id": "2129336525",
    "pr_number": 288,
    "pr_file": "src/targeting/Find_targets.ml",
    "created_at": "2025-06-05T16:57:08+00:00",
    "commented_code": "* the .gitignore of all the parents of the scan_root.\n    *)\n   let semgrepignore_filter =\n+    let semgrepignore_filename = Option.value conf.semgrepignore_filename ~default:\".semgrepignore\" in",
    "repo_full_name": "opengrep/opengrep",
    "discussion_comments": [
      {
        "comment_id": "2129336525",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 288,
        "pr_file": "src/targeting/Find_targets.ml",
        "discussion_id": "2129336525",
        "commented_code": "@@ -731,8 +733,11 @@ let setup_path_filters conf (project_roots : Project.roots) :\n    * the .gitignore of all the parents of the scan_root.\n    *)\n   let semgrepignore_filter =\n+    let semgrepignore_filename = Option.value conf.semgrepignore_filename ~default:\".semgrepignore\" in",
        "comment_created_at": "2025-06-05T16:57:08+00:00",
        "comment_author": "dimitris-m",
        "comment_body": "You already defined, in Semgrepignore.ml: \r\n\r\n```ocaml\r\nlet default_semgrepignore_filename = \".semgrepignore\"\r\n```\r\n\r\nSo the default value is defined in one place, it should not also be defined here, it's error prone.\r\n\r\nYou can just pass `?semgrepignore_filename:conf.semgrepignore_filename` in `Semgrepignore.create` below, instead of `~semgrepignore_filename`. (The above `let` should be removed).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2097564665",
    "pr_number": 263,
    "pr_file": "src/main/Main.ml",
    "created_at": "2025-05-20T10:06:44+00:00",
    "commented_code": "(* TODO[Issue #131]: Add some expectation tests for such functions. *)\n let with_experimental_flag argv =\n-  let len = position_for_experimental_flag argv in\n-  Array.concat [\n-    Array.sub argv 0 len;\n-    [| \"--experimental\" |];\n-    Array.sub argv len (Array.length argv - len);\n-  ]\n+  (* Only add the flag if it's not already present *)\n+  if Array.mem \"--experimental\" argv then\n+    argv\n+  else\n+    let len = position_for_experimental_flag argv in\n+    Array.concat [\n+      Array.sub argv 0 len;\n+      [| \"--experimental\" |];\n+      Array.sub argv len (Array.length argv - len);\n+    ]\n \n (* let _ = assert (with_experimental_flag [| \"opengrep\"; \"scan\"; \"--help\" |]\n                    = [| \"opengrep\"; \"scan\"; \"--experimental\"; \"--help\" |])\n    let _ = assert (with_experimental_flag [| \"opengrep\"; \"-c\"; \"rules\"; \"libs\" |]\n                    = [| \"opengrep\"; \"--experimental\"; \"-c\"; \"rules\"; \"libs\" |]) *)\n \n let flags_that_require_experimental : string list =\n-  [ \"--output-enclosing-context\" ]\n+  [ \"--output-enclosing-context\"; \"--opengrep-ignore-pattern\"; \"--incremental-output\" ]",
    "repo_full_name": "opengrep/opengrep",
    "discussion_comments": [
      {
        "comment_id": "2097564665",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 263,
        "pr_file": "src/main/Main.ml",
        "discussion_id": "2097564665",
        "commented_code": "@@ -96,20 +96,24 @@ let position_for_experimental_flag argv =\n \n (* TODO[Issue #131]: Add some expectation tests for such functions. *)\n let with_experimental_flag argv =\n-  let len = position_for_experimental_flag argv in\n-  Array.concat [\n-    Array.sub argv 0 len;\n-    [| \"--experimental\" |];\n-    Array.sub argv len (Array.length argv - len);\n-  ]\n+  (* Only add the flag if it's not already present *)\n+  if Array.mem \"--experimental\" argv then\n+    argv\n+  else\n+    let len = position_for_experimental_flag argv in\n+    Array.concat [\n+      Array.sub argv 0 len;\n+      [| \"--experimental\" |];\n+      Array.sub argv len (Array.length argv - len);\n+    ]\n \n (* let _ = assert (with_experimental_flag [| \"opengrep\"; \"scan\"; \"--help\" |]\n                    = [| \"opengrep\"; \"scan\"; \"--experimental\"; \"--help\" |])\n    let _ = assert (with_experimental_flag [| \"opengrep\"; \"-c\"; \"rules\"; \"libs\" |]\n                    = [| \"opengrep\"; \"--experimental\"; \"-c\"; \"rules\"; \"libs\" |]) *)\n \n let flags_that_require_experimental : string list =\n-  [ \"--output-enclosing-context\" ]\n+  [ \"--output-enclosing-context\"; \"--opengrep-ignore-pattern\"; \"--incremental-output\" ]",
        "comment_created_at": "2025-05-20T10:06:44+00:00",
        "comment_author": "dimitris-m",
        "comment_body": "@tom-paz you previously implemented this flag (`--opengrep-ignore-pattern`) on the python side too.\r\n\r\nWe cannot just require `--experimental` when the python code to implement this has been added, and in fact does not seem to work.\r\n\r\n- If we were to only support this with `--experimental`, all the python code would have to be reverted. (Now is too late for that.)\r\n- But since we do have the feature in the python part, we should not require `--experimental` but rather we should also fix the python part too.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2052183946",
    "pr_number": 216,
    "pr_file": "src/configuring/Flag_semgrep.ml",
    "created_at": "2025-04-21T09:28:42+00:00",
    "commented_code": "let output_enclosing_context = ref false\n \n+(* Custom pattern to replace or supplement the default 'nosem' or 'nosemgrep' prefixes\n+ * for comments that should be ignored by opengrep. By default this is None, which means\n+ * the system will use only the standard 'nosem' or 'nosemgrep' prefixes.\n+ *)\n+let custom_ignore_pattern : string option ref = ref None",
    "repo_full_name": "opengrep/opengrep",
    "discussion_comments": [
      {
        "comment_id": "2052183946",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 216,
        "pr_file": "src/configuring/Flag_semgrep.ml",
        "discussion_id": "2052183946",
        "commented_code": "@@ -43,6 +43,25 @@ let equivalence_mode = ref false\n \n let output_enclosing_context = ref false\n \n+(* Custom pattern to replace or supplement the default 'nosem' or 'nosemgrep' prefixes\n+ * for comments that should be ignored by opengrep. By default this is None, which means\n+ * the system will use only the standard 'nosem' or 'nosemgrep' prefixes.\n+ *)\n+let custom_ignore_pattern : string option ref = ref None",
        "comment_created_at": "2025-04-21T09:28:42+00:00",
        "comment_author": "maciejpirog",
        "comment_body": "Can this flag be passed via a config datatype passed to reporting rather than via a global ref? We're in the process of removing all global state, and the `Flag_semgrep.ml` file is deemed to go altogether.",
        "pr_file_module": null
      }
    ]
  }
]