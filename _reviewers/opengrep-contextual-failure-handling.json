[
  {
    "discussion_id": "2167599247",
    "pr_number": 307,
    "pr_file": "install.sh",
    "created_at": "2025-06-25T20:44:18+00:00",
    "commented_code": "exit 1\n     fi\n \n-    URL=\"https://github.com/opengrep/opengrep/releases/download/${VERSION}/${DIST}\"\n-    echo\n-    echo \"*** Installing Opengrep ${VERSION} for ${OS} (${ARCH}) ***\"\n-    echo\n+    if [ \"$REQUESTED_VERSION\" = \"latest\" ]; then\n+        # Use GitHub's latest release redirect\n+        URL=\"https://github.com/opengrep/opengrep/releases/latest/download/${DIST}\"\n+\n+        # Get the final version from the redirect\n+        REDIRECT_URL=$(curl -sI \"$URL\" 2>/dev/null | grep -i '^location:' | sed 's/location: //i' | tr -d '\\r\n' || true)\n+        if [ -n \"$REDIRECT_URL\" ]; then\n+            # Extract version from the redirect URL\n+            FINAL_VERSION=$(echo \"$REDIRECT_URL\" | sed -E 's|.*/download/([^/]+)/.*|\\1|')\n+        else\n+            echo \"Failed to resolve latest version. The redirect from $URL did not work.\" 1>&2\n+            echo \"Please check your internet connection or specify a version with -v\" 1>&2\n+            exit 1\n+        fi\n+\n+        echo\n+        echo \"*** Installing Opengrep ${FINAL_VERSION} for ${OS} (${ARCH}) ***\"\n+        echo\n+    else\n+        URL=\"https://github.com/opengrep/opengrep/releases/download/${REQUESTED_VERSION}/${DIST}\"\n+        echo\n+        echo \"*** Installing Opengrep ${REQUESTED_VERSION} for ${OS} (${ARCH}) ***\"\n+        echo\n+    fi\n+\n+    # Now set INST with the final version\n+    INST=\"${PREFIX}/${FINAL_VERSION}\"\n \n     # check if binary already exists\n     if [ -f \"${INST}/opengrep\" ]; then\n         echo \"Destination binary ${INST}/opengrep already exists.\"\n     else\n+        # Download to temp file first\n+        TEMP_FILE=$(mktemp)\n+        trap 'rm -f $TEMP_FILE' EXIT\n+\n+        if ! retry curl --fail --location --progress-bar \"${URL}\" > \"${TEMP_FILE}\"; then",
    "repo_full_name": "opengrep/opengrep",
    "discussion_comments": [
      {
        "comment_id": "2167599247",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 307,
        "pr_file": "install.sh",
        "discussion_id": "2167599247",
        "commented_code": "@@ -71,22 +115,64 @@ main () {\n         exit 1\n     fi\n \n-    URL=\"https://github.com/opengrep/opengrep/releases/download/${VERSION}/${DIST}\"\n-    echo\n-    echo \"*** Installing Opengrep ${VERSION} for ${OS} (${ARCH}) ***\"\n-    echo\n+    if [ \"$REQUESTED_VERSION\" = \"latest\" ]; then\n+        # Use GitHub's latest release redirect\n+        URL=\"https://github.com/opengrep/opengrep/releases/latest/download/${DIST}\"\n+\n+        # Get the final version from the redirect\n+        REDIRECT_URL=$(curl -sI \"$URL\" 2>/dev/null | grep -i '^location:' | sed 's/location: //i' | tr -d '\\r\\n' || true)\n+        if [ -n \"$REDIRECT_URL\" ]; then\n+            # Extract version from the redirect URL\n+            FINAL_VERSION=$(echo \"$REDIRECT_URL\" | sed -E 's|.*/download/([^/]+)/.*|\\1|')\n+        else\n+            echo \"Failed to resolve latest version. The redirect from $URL did not work.\" 1>&2\n+            echo \"Please check your internet connection or specify a version with -v\" 1>&2\n+            exit 1\n+        fi\n+\n+        echo\n+        echo \"*** Installing Opengrep ${FINAL_VERSION} for ${OS} (${ARCH}) ***\"\n+        echo\n+    else\n+        URL=\"https://github.com/opengrep/opengrep/releases/download/${REQUESTED_VERSION}/${DIST}\"\n+        echo\n+        echo \"*** Installing Opengrep ${REQUESTED_VERSION} for ${OS} (${ARCH}) ***\"\n+        echo\n+    fi\n+\n+    # Now set INST with the final version\n+    INST=\"${PREFIX}/${FINAL_VERSION}\"\n \n     # check if binary already exists\n     if [ -f \"${INST}/opengrep\" ]; then\n         echo \"Destination binary ${INST}/opengrep already exists.\"\n     else\n+        # Download to temp file first\n+        TEMP_FILE=$(mktemp)\n+        trap 'rm -f $TEMP_FILE' EXIT\n+\n+        if ! retry curl --fail --location --progress-bar \"${URL}\" > \"${TEMP_FILE}\"; then",
        "comment_created_at": "2025-06-25T20:44:18+00:00",
        "comment_author": "JonZeolla",
        "comment_body": "Moving the conversation here:\r\n[Comment 1](https://github.com/opengrep/opengrep/pull/307#issuecomment-3002033389)\r\n\r\n> As a first note, if the requested version is not found, then why retry?\r\n> \r\n> Will review in more detail as soon as possible.\r\n\r\n[Comment 2](https://github.com/opengrep/opengrep/pull/307#issuecomment-3005095383)\r\n\r\n> @dimitris-m because sometimes the failure is due to a GitHub rate limit / failure, not because the release isn't actually there.\r\n\r\n[Comment 3](https://github.com/opengrep/opengrep/pull/307#issuecomment-3005259747)\r\n\r\n> But in case of rate limit, what is the point of immediately retrying?\r\n>\r\n> I'd rather have the http code inform the error message and fail in such cases, which I assume to be infrequent.",
        "pr_file_module": null
      },
      {
        "comment_id": "2167602968",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 307,
        "pr_file": "install.sh",
        "discussion_id": "2167599247",
        "commented_code": "@@ -71,22 +115,64 @@ main () {\n         exit 1\n     fi\n \n-    URL=\"https://github.com/opengrep/opengrep/releases/download/${VERSION}/${DIST}\"\n-    echo\n-    echo \"*** Installing Opengrep ${VERSION} for ${OS} (${ARCH}) ***\"\n-    echo\n+    if [ \"$REQUESTED_VERSION\" = \"latest\" ]; then\n+        # Use GitHub's latest release redirect\n+        URL=\"https://github.com/opengrep/opengrep/releases/latest/download/${DIST}\"\n+\n+        # Get the final version from the redirect\n+        REDIRECT_URL=$(curl -sI \"$URL\" 2>/dev/null | grep -i '^location:' | sed 's/location: //i' | tr -d '\\r\\n' || true)\n+        if [ -n \"$REDIRECT_URL\" ]; then\n+            # Extract version from the redirect URL\n+            FINAL_VERSION=$(echo \"$REDIRECT_URL\" | sed -E 's|.*/download/([^/]+)/.*|\\1|')\n+        else\n+            echo \"Failed to resolve latest version. The redirect from $URL did not work.\" 1>&2\n+            echo \"Please check your internet connection or specify a version with -v\" 1>&2\n+            exit 1\n+        fi\n+\n+        echo\n+        echo \"*** Installing Opengrep ${FINAL_VERSION} for ${OS} (${ARCH}) ***\"\n+        echo\n+    else\n+        URL=\"https://github.com/opengrep/opengrep/releases/download/${REQUESTED_VERSION}/${DIST}\"\n+        echo\n+        echo \"*** Installing Opengrep ${REQUESTED_VERSION} for ${OS} (${ARCH}) ***\"\n+        echo\n+    fi\n+\n+    # Now set INST with the final version\n+    INST=\"${PREFIX}/${FINAL_VERSION}\"\n \n     # check if binary already exists\n     if [ -f \"${INST}/opengrep\" ]; then\n         echo \"Destination binary ${INST}/opengrep already exists.\"\n     else\n+        # Download to temp file first\n+        TEMP_FILE=$(mktemp)\n+        trap 'rm -f $TEMP_FILE' EXIT\n+\n+        if ! retry curl --fail --location --progress-bar \"${URL}\" > \"${TEMP_FILE}\"; then",
        "comment_created_at": "2025-06-25T20:46:05+00:00",
        "comment_author": "JonZeolla",
        "comment_body": "I've been using this script for about a day and I've hit this problem when building in a GitHub Action pipelines a small handful of times (I think maybe 4 or 5 times). This added retry has succeeded ever since. It's a small sample size, but I'm willing to bet something as simple as `curl --fail || curl --fail` would even help a great bit, but having the 2 second delay seemed prudent",
        "pr_file_module": null
      },
      {
        "comment_id": "2180619672",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 307,
        "pr_file": "install.sh",
        "discussion_id": "2167599247",
        "commented_code": "@@ -71,22 +115,64 @@ main () {\n         exit 1\n     fi\n \n-    URL=\"https://github.com/opengrep/opengrep/releases/download/${VERSION}/${DIST}\"\n-    echo\n-    echo \"*** Installing Opengrep ${VERSION} for ${OS} (${ARCH}) ***\"\n-    echo\n+    if [ \"$REQUESTED_VERSION\" = \"latest\" ]; then\n+        # Use GitHub's latest release redirect\n+        URL=\"https://github.com/opengrep/opengrep/releases/latest/download/${DIST}\"\n+\n+        # Get the final version from the redirect\n+        REDIRECT_URL=$(curl -sI \"$URL\" 2>/dev/null | grep -i '^location:' | sed 's/location: //i' | tr -d '\\r\\n' || true)\n+        if [ -n \"$REDIRECT_URL\" ]; then\n+            # Extract version from the redirect URL\n+            FINAL_VERSION=$(echo \"$REDIRECT_URL\" | sed -E 's|.*/download/([^/]+)/.*|\\1|')\n+        else\n+            echo \"Failed to resolve latest version. The redirect from $URL did not work.\" 1>&2\n+            echo \"Please check your internet connection or specify a version with -v\" 1>&2\n+            exit 1\n+        fi\n+\n+        echo\n+        echo \"*** Installing Opengrep ${FINAL_VERSION} for ${OS} (${ARCH}) ***\"\n+        echo\n+    else\n+        URL=\"https://github.com/opengrep/opengrep/releases/download/${REQUESTED_VERSION}/${DIST}\"\n+        echo\n+        echo \"*** Installing Opengrep ${REQUESTED_VERSION} for ${OS} (${ARCH}) ***\"\n+        echo\n+    fi\n+\n+    # Now set INST with the final version\n+    INST=\"${PREFIX}/${FINAL_VERSION}\"\n \n     # check if binary already exists\n     if [ -f \"${INST}/opengrep\" ]; then\n         echo \"Destination binary ${INST}/opengrep already exists.\"\n     else\n+        # Download to temp file first\n+        TEMP_FILE=$(mktemp)\n+        trap 'rm -f $TEMP_FILE' EXIT\n+\n+        if ! retry curl --fail --location --progress-bar \"${URL}\" > \"${TEMP_FILE}\"; then",
        "comment_created_at": "2025-07-02T17:34:13+00:00",
        "comment_author": "JonZeolla",
        "comment_body": "Regarding https://github.com/opengrep/opengrep/pull/307#issuecomment-3028079088, specifically:\r\n> As for retry logic, I think this can be done by the client: you can create a script that repeats the installation script invocation as required.\r\n\r\nWhile I agree that it _is_ possible, I don't think it's a great UX. For instance, if you're using this installation script in a `Dockerfile` now you're wrapping the `install.sh` with your own custom installer, or doing error management in the `Dockerfile` itself.",
        "pr_file_module": null
      },
      {
        "comment_id": "2180644881",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 307,
        "pr_file": "install.sh",
        "discussion_id": "2167599247",
        "commented_code": "@@ -71,22 +115,64 @@ main () {\n         exit 1\n     fi\n \n-    URL=\"https://github.com/opengrep/opengrep/releases/download/${VERSION}/${DIST}\"\n-    echo\n-    echo \"*** Installing Opengrep ${VERSION} for ${OS} (${ARCH}) ***\"\n-    echo\n+    if [ \"$REQUESTED_VERSION\" = \"latest\" ]; then\n+        # Use GitHub's latest release redirect\n+        URL=\"https://github.com/opengrep/opengrep/releases/latest/download/${DIST}\"\n+\n+        # Get the final version from the redirect\n+        REDIRECT_URL=$(curl -sI \"$URL\" 2>/dev/null | grep -i '^location:' | sed 's/location: //i' | tr -d '\\r\\n' || true)\n+        if [ -n \"$REDIRECT_URL\" ]; then\n+            # Extract version from the redirect URL\n+            FINAL_VERSION=$(echo \"$REDIRECT_URL\" | sed -E 's|.*/download/([^/]+)/.*|\\1|')\n+        else\n+            echo \"Failed to resolve latest version. The redirect from $URL did not work.\" 1>&2\n+            echo \"Please check your internet connection or specify a version with -v\" 1>&2\n+            exit 1\n+        fi\n+\n+        echo\n+        echo \"*** Installing Opengrep ${FINAL_VERSION} for ${OS} (${ARCH}) ***\"\n+        echo\n+    else\n+        URL=\"https://github.com/opengrep/opengrep/releases/download/${REQUESTED_VERSION}/${DIST}\"\n+        echo\n+        echo \"*** Installing Opengrep ${REQUESTED_VERSION} for ${OS} (${ARCH}) ***\"\n+        echo\n+    fi\n+\n+    # Now set INST with the final version\n+    INST=\"${PREFIX}/${FINAL_VERSION}\"\n \n     # check if binary already exists\n     if [ -f \"${INST}/opengrep\" ]; then\n         echo \"Destination binary ${INST}/opengrep already exists.\"\n     else\n+        # Download to temp file first\n+        TEMP_FILE=$(mktemp)\n+        trap 'rm -f $TEMP_FILE' EXIT\n+\n+        if ! retry curl --fail --location --progress-bar \"${URL}\" > \"${TEMP_FILE}\"; then",
        "comment_created_at": "2025-07-02T17:50:04+00:00",
        "comment_author": "dimitris-m",
        "comment_body": "but it's enough to repeat until success, if you know that the version exists.\r\nespecially without `-v <version>`, it should only fail on connectivity issues (modulo `--verify-signatures`).",
        "pr_file_module": null
      },
      {
        "comment_id": "2180676560",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 307,
        "pr_file": "install.sh",
        "discussion_id": "2167599247",
        "commented_code": "@@ -71,22 +115,64 @@ main () {\n         exit 1\n     fi\n \n-    URL=\"https://github.com/opengrep/opengrep/releases/download/${VERSION}/${DIST}\"\n-    echo\n-    echo \"*** Installing Opengrep ${VERSION} for ${OS} (${ARCH}) ***\"\n-    echo\n+    if [ \"$REQUESTED_VERSION\" = \"latest\" ]; then\n+        # Use GitHub's latest release redirect\n+        URL=\"https://github.com/opengrep/opengrep/releases/latest/download/${DIST}\"\n+\n+        # Get the final version from the redirect\n+        REDIRECT_URL=$(curl -sI \"$URL\" 2>/dev/null | grep -i '^location:' | sed 's/location: //i' | tr -d '\\r\\n' || true)\n+        if [ -n \"$REDIRECT_URL\" ]; then\n+            # Extract version from the redirect URL\n+            FINAL_VERSION=$(echo \"$REDIRECT_URL\" | sed -E 's|.*/download/([^/]+)/.*|\\1|')\n+        else\n+            echo \"Failed to resolve latest version. The redirect from $URL did not work.\" 1>&2\n+            echo \"Please check your internet connection or specify a version with -v\" 1>&2\n+            exit 1\n+        fi\n+\n+        echo\n+        echo \"*** Installing Opengrep ${FINAL_VERSION} for ${OS} (${ARCH}) ***\"\n+        echo\n+    else\n+        URL=\"https://github.com/opengrep/opengrep/releases/download/${REQUESTED_VERSION}/${DIST}\"\n+        echo\n+        echo \"*** Installing Opengrep ${REQUESTED_VERSION} for ${OS} (${ARCH}) ***\"\n+        echo\n+    fi\n+\n+    # Now set INST with the final version\n+    INST=\"${PREFIX}/${FINAL_VERSION}\"\n \n     # check if binary already exists\n     if [ -f \"${INST}/opengrep\" ]; then\n         echo \"Destination binary ${INST}/opengrep already exists.\"\n     else\n+        # Download to temp file first\n+        TEMP_FILE=$(mktemp)\n+        trap 'rm -f $TEMP_FILE' EXIT\n+\n+        if ! retry curl --fail --location --progress-bar \"${URL}\" > \"${TEMP_FILE}\"; then",
        "comment_created_at": "2025-07-02T18:08:58+00:00",
        "comment_author": "JonZeolla",
        "comment_body": "I tend not to retry infinitely if only to avoid a thundering herd problem during an upstream outage (like GitHub API downtime)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2180608065",
    "pr_number": 307,
    "pr_file": "install.sh",
    "created_at": "2025-07-02T17:28:37+00:00",
    "commented_code": "}\n }\n \n+retry() {",
    "repo_full_name": "opengrep/opengrep",
    "discussion_comments": [
      {
        "comment_id": "2180608065",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 307,
        "pr_file": "install.sh",
        "discussion_id": "2180608065",
        "commented_code": "@@ -38,20 +38,41 @@ check_has_curl() {\n     }\n }\n \n+retry() {",
        "comment_created_at": "2025-07-02T17:28:37+00:00",
        "comment_author": "dimitris-m",
        "comment_body": "There is now some logic that depends on the http return code.\r\n\r\nFor example if the .cert gives 404, we assume it's an older version.\r\n\r\nI'm not a big fan of having retry logic in this script. Given that it cleans after itself, why not follow the unix philosophy? If someone has connectivity issue they can create their own retry logic.\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2178346963",
    "pr_number": 315,
    "pr_file": "install.sh",
    "created_at": "2025-07-01T19:03:07+00:00",
    "commented_code": "#!/usr/bin/env bash -e\n-# Opengrep installation script \n+# Opengrep installation script\n \n print_usage() {\n-    echo \"Usage: $0 [-v version] [-l] [-h]\"\n-    echo \"  -v    Specify version to install (optional, default: latest)\"\n-    echo \"  -l    List available versions (latest 3)\"\n-    echo \"  -h    Show this help message\"\n+\n+    echo \"the possible uses are:\"\n+    echo \"$0  -v version   Specify version to install \\(optional, default: latest\\) warns if you cannot verify signatures\"\n+    echo \"$0  -v version --verify-signatures   Specify version to install \\(optional, default: latest\\) failing if you cannot verify signatures \"\n+    echo \"$0  -l    List available versions \\(latest 3\\)\"\n+    echo \"$0  -h    Show this help message\"\n }\n \n # Function to get available versions - already checked when running main\n get_available_versions() {\n-    command -v curl >/dev/null 2>&1 || { echo >&2 \"Required tool curl could not be found. Aborting.\"; exit 1; }\n+    command -v curl > /dev/null 2>&1 || {\n+        echo >&2 \"Required tool curl could not be found. Aborting.\"\n+        exit 1\n+    }\n     curl -s https://api.github.com/repos/opengrep/opengrep/releases | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/'\n }\n \n # Function to validate version\n validate_version() {\n-    local version=\"$1\"\n-    local available_versions\n-    available_versions=$(get_available_versions)\n-    if echo \"$available_versions\" | grep -q \"^$version$\"; then\n+    local VERSION=\"$1\"\n+    local AVAILBLE_VERSIONS\n+    AVAILBLE_VERSIONS=$(get_available_versions)\n+    if echo \"$AVAILBLE_VERSIONS\" | grep -q \"^$VERSION$\"; then\n         return 0\n     else\n-        echo \"Error: Version $version not found\"\n+        echo \"Error: Version $VERSION not found\"\n         echo \"Available versions (latest 3):\"\n-        echo \"$available_versions\" | head -3\n+        echo \"$AVAILBLE_VERSIONS\" | head -3\n         exit 1\n     fi\n }\n+validate_signature() {\n+    local P=\"$1\"\n+    if $HAS_COSIGN; then\n \n-main () {\n-    local VERSION=\"$1\"\n+        echo \"\ud83d\udd0d Verifying signatures for ${P}/opengrep.cert\"\n+        if cosign verify-blob \\\n+            --cert \"$P/opengrep.cert\" \\\n+            --signature \"${P}/opengrep.sig\" \\\n+            --certificate-identity-regexp \"https://github.com/opengrep/opengrep.+\" \\\n+            --certificate-oidc-issuer \"https://token.actions.githubusercontent.com\" \\\n+            \"${P}/opengrep\"; then\n+            echo \"Signature valid.\"\n+            exit 0\n+        else\n+            if [[ \"$VERIFY_SIGNATURES\" == true ]]; then\n+                echo \"Error: Signature validation error\u2014deleting installed package\"\n+                rm -rf \"${P}\"",
    "repo_full_name": "opengrep/opengrep",
    "discussion_comments": [
      {
        "comment_id": "2178346963",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 315,
        "pr_file": "install.sh",
        "discussion_id": "2178346963",
        "commented_code": "@@ -1,37 +1,68 @@\n #!/usr/bin/env bash -e\n-# Opengrep installation script \n+# Opengrep installation script\n \n print_usage() {\n-    echo \"Usage: $0 [-v version] [-l] [-h]\"\n-    echo \"  -v    Specify version to install (optional, default: latest)\"\n-    echo \"  -l    List available versions (latest 3)\"\n-    echo \"  -h    Show this help message\"\n+\n+    echo \"the possible uses are:\"\n+    echo \"$0  -v version   Specify version to install \\(optional, default: latest\\) warns if you cannot verify signatures\"\n+    echo \"$0  -v version --verify-signatures   Specify version to install \\(optional, default: latest\\) failing if you cannot verify signatures \"\n+    echo \"$0  -l    List available versions \\(latest 3\\)\"\n+    echo \"$0  -h    Show this help message\"\n }\n \n # Function to get available versions - already checked when running main\n get_available_versions() {\n-    command -v curl >/dev/null 2>&1 || { echo >&2 \"Required tool curl could not be found. Aborting.\"; exit 1; }\n+    command -v curl > /dev/null 2>&1 || {\n+        echo >&2 \"Required tool curl could not be found. Aborting.\"\n+        exit 1\n+    }\n     curl -s https://api.github.com/repos/opengrep/opengrep/releases | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/'\n }\n \n # Function to validate version\n validate_version() {\n-    local version=\"$1\"\n-    local available_versions\n-    available_versions=$(get_available_versions)\n-    if echo \"$available_versions\" | grep -q \"^$version$\"; then\n+    local VERSION=\"$1\"\n+    local AVAILBLE_VERSIONS\n+    AVAILBLE_VERSIONS=$(get_available_versions)\n+    if echo \"$AVAILBLE_VERSIONS\" | grep -q \"^$VERSION$\"; then\n         return 0\n     else\n-        echo \"Error: Version $version not found\"\n+        echo \"Error: Version $VERSION not found\"\n         echo \"Available versions (latest 3):\"\n-        echo \"$available_versions\" | head -3\n+        echo \"$AVAILBLE_VERSIONS\" | head -3\n         exit 1\n     fi\n }\n+validate_signature() {\n+    local P=\"$1\"\n+    if $HAS_COSIGN; then\n \n-main () {\n-    local VERSION=\"$1\"\n+        echo \"\ud83d\udd0d Verifying signatures for ${P}/opengrep.cert\"\n+        if cosign verify-blob \\\n+            --cert \"$P/opengrep.cert\" \\\n+            --signature \"${P}/opengrep.sig\" \\\n+            --certificate-identity-regexp \"https://github.com/opengrep/opengrep.+\" \\\n+            --certificate-oidc-issuer \"https://token.actions.githubusercontent.com\" \\\n+            \"${P}/opengrep\"; then\n+            echo \"Signature valid.\"\n+            exit 0\n+        else\n+            if [[ \"$VERIFY_SIGNATURES\" == true ]]; then\n+                echo \"Error: Signature validation error\u2014deleting installed package\"\n+                rm -rf \"${P}\"",
        "comment_created_at": "2025-07-01T19:03:07+00:00",
        "comment_author": "dimitris-m",
        "comment_body": "Here `rm -f \"${P}\"` is enough",
        "pr_file_module": null
      },
      {
        "comment_id": "2178367075",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 315,
        "pr_file": "install.sh",
        "discussion_id": "2178346963",
        "commented_code": "@@ -1,37 +1,68 @@\n #!/usr/bin/env bash -e\n-# Opengrep installation script \n+# Opengrep installation script\n \n print_usage() {\n-    echo \"Usage: $0 [-v version] [-l] [-h]\"\n-    echo \"  -v    Specify version to install (optional, default: latest)\"\n-    echo \"  -l    List available versions (latest 3)\"\n-    echo \"  -h    Show this help message\"\n+\n+    echo \"the possible uses are:\"\n+    echo \"$0  -v version   Specify version to install \\(optional, default: latest\\) warns if you cannot verify signatures\"\n+    echo \"$0  -v version --verify-signatures   Specify version to install \\(optional, default: latest\\) failing if you cannot verify signatures \"\n+    echo \"$0  -l    List available versions \\(latest 3\\)\"\n+    echo \"$0  -h    Show this help message\"\n }\n \n # Function to get available versions - already checked when running main\n get_available_versions() {\n-    command -v curl >/dev/null 2>&1 || { echo >&2 \"Required tool curl could not be found. Aborting.\"; exit 1; }\n+    command -v curl > /dev/null 2>&1 || {\n+        echo >&2 \"Required tool curl could not be found. Aborting.\"\n+        exit 1\n+    }\n     curl -s https://api.github.com/repos/opengrep/opengrep/releases | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/'\n }\n \n # Function to validate version\n validate_version() {\n-    local version=\"$1\"\n-    local available_versions\n-    available_versions=$(get_available_versions)\n-    if echo \"$available_versions\" | grep -q \"^$version$\"; then\n+    local VERSION=\"$1\"\n+    local AVAILBLE_VERSIONS\n+    AVAILBLE_VERSIONS=$(get_available_versions)\n+    if echo \"$AVAILBLE_VERSIONS\" | grep -q \"^$VERSION$\"; then\n         return 0\n     else\n-        echo \"Error: Version $version not found\"\n+        echo \"Error: Version $VERSION not found\"\n         echo \"Available versions (latest 3):\"\n-        echo \"$available_versions\" | head -3\n+        echo \"$AVAILBLE_VERSIONS\" | head -3\n         exit 1\n     fi\n }\n+validate_signature() {\n+    local P=\"$1\"\n+    if $HAS_COSIGN; then\n \n-main () {\n-    local VERSION=\"$1\"\n+        echo \"\ud83d\udd0d Verifying signatures for ${P}/opengrep.cert\"\n+        if cosign verify-blob \\\n+            --cert \"$P/opengrep.cert\" \\\n+            --signature \"${P}/opengrep.sig\" \\\n+            --certificate-identity-regexp \"https://github.com/opengrep/opengrep.+\" \\\n+            --certificate-oidc-issuer \"https://token.actions.githubusercontent.com\" \\\n+            \"${P}/opengrep\"; then\n+            echo \"Signature valid.\"\n+            exit 0\n+        else\n+            if [[ \"$VERIFY_SIGNATURES\" == true ]]; then\n+                echo \"Error: Signature validation error\u2014deleting installed package\"\n+                rm -rf \"${P}\"",
        "comment_created_at": "2025-07-01T19:18:40+00:00",
        "comment_author": "dimitris-m",
        "comment_body": "Maybe we could drop the `-f` too and let the user decide if they want to delete, as long as this does not leave a broken install.\r\n\r\nBy the way, what is the state of things if this fails and the user tries to re-install without the flag?",
        "pr_file_module": null
      },
      {
        "comment_id": "2178381919",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 315,
        "pr_file": "install.sh",
        "discussion_id": "2178346963",
        "commented_code": "@@ -1,37 +1,68 @@\n #!/usr/bin/env bash -e\n-# Opengrep installation script \n+# Opengrep installation script\n \n print_usage() {\n-    echo \"Usage: $0 [-v version] [-l] [-h]\"\n-    echo \"  -v    Specify version to install (optional, default: latest)\"\n-    echo \"  -l    List available versions (latest 3)\"\n-    echo \"  -h    Show this help message\"\n+\n+    echo \"the possible uses are:\"\n+    echo \"$0  -v version   Specify version to install \\(optional, default: latest\\) warns if you cannot verify signatures\"\n+    echo \"$0  -v version --verify-signatures   Specify version to install \\(optional, default: latest\\) failing if you cannot verify signatures \"\n+    echo \"$0  -l    List available versions \\(latest 3\\)\"\n+    echo \"$0  -h    Show this help message\"\n }\n \n # Function to get available versions - already checked when running main\n get_available_versions() {\n-    command -v curl >/dev/null 2>&1 || { echo >&2 \"Required tool curl could not be found. Aborting.\"; exit 1; }\n+    command -v curl > /dev/null 2>&1 || {\n+        echo >&2 \"Required tool curl could not be found. Aborting.\"\n+        exit 1\n+    }\n     curl -s https://api.github.com/repos/opengrep/opengrep/releases | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/'\n }\n \n # Function to validate version\n validate_version() {\n-    local version=\"$1\"\n-    local available_versions\n-    available_versions=$(get_available_versions)\n-    if echo \"$available_versions\" | grep -q \"^$version$\"; then\n+    local VERSION=\"$1\"\n+    local AVAILBLE_VERSIONS\n+    AVAILBLE_VERSIONS=$(get_available_versions)\n+    if echo \"$AVAILBLE_VERSIONS\" | grep -q \"^$VERSION$\"; then\n         return 0\n     else\n-        echo \"Error: Version $version not found\"\n+        echo \"Error: Version $VERSION not found\"\n         echo \"Available versions (latest 3):\"\n-        echo \"$available_versions\" | head -3\n+        echo \"$AVAILBLE_VERSIONS\" | head -3\n         exit 1\n     fi\n }\n+validate_signature() {\n+    local P=\"$1\"\n+    if $HAS_COSIGN; then\n \n-main () {\n-    local VERSION=\"$1\"\n+        echo \"\ud83d\udd0d Verifying signatures for ${P}/opengrep.cert\"\n+        if cosign verify-blob \\\n+            --cert \"$P/opengrep.cert\" \\\n+            --signature \"${P}/opengrep.sig\" \\\n+            --certificate-identity-regexp \"https://github.com/opengrep/opengrep.+\" \\\n+            --certificate-oidc-issuer \"https://token.actions.githubusercontent.com\" \\\n+            \"${P}/opengrep\"; then\n+            echo \"Signature valid.\"\n+            exit 0\n+        else\n+            if [[ \"$VERIFY_SIGNATURES\" == true ]]; then\n+                echo \"Error: Signature validation error\u2014deleting installed package\"\n+                rm -rf \"${P}\"",
        "comment_created_at": "2025-07-01T19:30:10+00:00",
        "comment_author": "corneliuhoffman",
        "comment_body": "it reinstalls and warns of bad validation\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2178389080",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 315,
        "pr_file": "install.sh",
        "discussion_id": "2178346963",
        "commented_code": "@@ -1,37 +1,68 @@\n #!/usr/bin/env bash -e\n-# Opengrep installation script \n+# Opengrep installation script\n \n print_usage() {\n-    echo \"Usage: $0 [-v version] [-l] [-h]\"\n-    echo \"  -v    Specify version to install (optional, default: latest)\"\n-    echo \"  -l    List available versions (latest 3)\"\n-    echo \"  -h    Show this help message\"\n+\n+    echo \"the possible uses are:\"\n+    echo \"$0  -v version   Specify version to install \\(optional, default: latest\\) warns if you cannot verify signatures\"\n+    echo \"$0  -v version --verify-signatures   Specify version to install \\(optional, default: latest\\) failing if you cannot verify signatures \"\n+    echo \"$0  -l    List available versions \\(latest 3\\)\"\n+    echo \"$0  -h    Show this help message\"\n }\n \n # Function to get available versions - already checked when running main\n get_available_versions() {\n-    command -v curl >/dev/null 2>&1 || { echo >&2 \"Required tool curl could not be found. Aborting.\"; exit 1; }\n+    command -v curl > /dev/null 2>&1 || {\n+        echo >&2 \"Required tool curl could not be found. Aborting.\"\n+        exit 1\n+    }\n     curl -s https://api.github.com/repos/opengrep/opengrep/releases | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/'\n }\n \n # Function to validate version\n validate_version() {\n-    local version=\"$1\"\n-    local available_versions\n-    available_versions=$(get_available_versions)\n-    if echo \"$available_versions\" | grep -q \"^$version$\"; then\n+    local VERSION=\"$1\"\n+    local AVAILBLE_VERSIONS\n+    AVAILBLE_VERSIONS=$(get_available_versions)\n+    if echo \"$AVAILBLE_VERSIONS\" | grep -q \"^$VERSION$\"; then\n         return 0\n     else\n-        echo \"Error: Version $version not found\"\n+        echo \"Error: Version $VERSION not found\"\n         echo \"Available versions (latest 3):\"\n-        echo \"$available_versions\" | head -3\n+        echo \"$AVAILBLE_VERSIONS\" | head -3\n         exit 1\n     fi\n }\n+validate_signature() {\n+    local P=\"$1\"\n+    if $HAS_COSIGN; then\n \n-main () {\n-    local VERSION=\"$1\"\n+        echo \"\ud83d\udd0d Verifying signatures for ${P}/opengrep.cert\"\n+        if cosign verify-blob \\\n+            --cert \"$P/opengrep.cert\" \\\n+            --signature \"${P}/opengrep.sig\" \\\n+            --certificate-identity-regexp \"https://github.com/opengrep/opengrep.+\" \\\n+            --certificate-oidc-issuer \"https://token.actions.githubusercontent.com\" \\\n+            \"${P}/opengrep\"; then\n+            echo \"Signature valid.\"\n+            exit 0\n+        else\n+            if [[ \"$VERIFY_SIGNATURES\" == true ]]; then\n+                echo \"Error: Signature validation error\u2014deleting installed package\"\n+                rm -rf \"${P}\"",
        "comment_created_at": "2025-07-01T19:35:46+00:00",
        "comment_author": "corneliuhoffman",
        "comment_body": "actually it should likely be rm -r since the file(s) are inside of $P",
        "pr_file_module": null
      },
      {
        "comment_id": "2178417362",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 315,
        "pr_file": "install.sh",
        "discussion_id": "2178346963",
        "commented_code": "@@ -1,37 +1,68 @@\n #!/usr/bin/env bash -e\n-# Opengrep installation script \n+# Opengrep installation script\n \n print_usage() {\n-    echo \"Usage: $0 [-v version] [-l] [-h]\"\n-    echo \"  -v    Specify version to install (optional, default: latest)\"\n-    echo \"  -l    List available versions (latest 3)\"\n-    echo \"  -h    Show this help message\"\n+\n+    echo \"the possible uses are:\"\n+    echo \"$0  -v version   Specify version to install \\(optional, default: latest\\) warns if you cannot verify signatures\"\n+    echo \"$0  -v version --verify-signatures   Specify version to install \\(optional, default: latest\\) failing if you cannot verify signatures \"\n+    echo \"$0  -l    List available versions \\(latest 3\\)\"\n+    echo \"$0  -h    Show this help message\"\n }\n \n # Function to get available versions - already checked when running main\n get_available_versions() {\n-    command -v curl >/dev/null 2>&1 || { echo >&2 \"Required tool curl could not be found. Aborting.\"; exit 1; }\n+    command -v curl > /dev/null 2>&1 || {\n+        echo >&2 \"Required tool curl could not be found. Aborting.\"\n+        exit 1\n+    }\n     curl -s https://api.github.com/repos/opengrep/opengrep/releases | grep '\"tag_name\":' | sed -E 's/.*\"([^\"]+)\".*/\\1/'\n }\n \n # Function to validate version\n validate_version() {\n-    local version=\"$1\"\n-    local available_versions\n-    available_versions=$(get_available_versions)\n-    if echo \"$available_versions\" | grep -q \"^$version$\"; then\n+    local VERSION=\"$1\"\n+    local AVAILBLE_VERSIONS\n+    AVAILBLE_VERSIONS=$(get_available_versions)\n+    if echo \"$AVAILBLE_VERSIONS\" | grep -q \"^$VERSION$\"; then\n         return 0\n     else\n-        echo \"Error: Version $version not found\"\n+        echo \"Error: Version $VERSION not found\"\n         echo \"Available versions (latest 3):\"\n-        echo \"$available_versions\" | head -3\n+        echo \"$AVAILBLE_VERSIONS\" | head -3\n         exit 1\n     fi\n }\n+validate_signature() {\n+    local P=\"$1\"\n+    if $HAS_COSIGN; then\n \n-main () {\n-    local VERSION=\"$1\"\n+        echo \"\ud83d\udd0d Verifying signatures for ${P}/opengrep.cert\"\n+        if cosign verify-blob \\\n+            --cert \"$P/opengrep.cert\" \\\n+            --signature \"${P}/opengrep.sig\" \\\n+            --certificate-identity-regexp \"https://github.com/opengrep/opengrep.+\" \\\n+            --certificate-oidc-issuer \"https://token.actions.githubusercontent.com\" \\\n+            \"${P}/opengrep\"; then\n+            echo \"Signature valid.\"\n+            exit 0\n+        else\n+            if [[ \"$VERIFY_SIGNATURES\" == true ]]; then\n+                echo \"Error: Signature validation error\u2014deleting installed package\"\n+                rm -rf \"${P}\"",
        "comment_created_at": "2025-07-01T19:54:22+00:00",
        "comment_author": "dimitris-m",
        "comment_body": "Ah yes",
        "pr_file_module": null
      }
    ]
  }
]