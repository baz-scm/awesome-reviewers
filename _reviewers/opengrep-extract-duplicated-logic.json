[
  {
    "discussion_id": "2230862034",
    "pr_number": 367,
    "pr_file": "src/tainting/Dataflow_tainting.ml",
    "created_at": "2025-07-25T11:32:27+00:00",
    "commented_code": "| Composite ((CTuple | CArray | CList), (_, es, _)) ->\n         let taints_and_shapes, lval_env = map_check_expr env check es in\n         let tuple_shape = Shape.tuple_like_obj taints_and_shapes in\n-        (Taints.empty, tuple_shape, lval_env)\n+        let all_taints =\n+          taints_and_shapes\n+          |> List.fold_left\n+               (fun acc (taints, shape) ->\n+                 acc |> Taints.union taints\n+                 |> Taints.union (Shape.gather_all_taints_in_shape shape))",
    "repo_full_name": "opengrep/opengrep",
    "discussion_comments": [
      {
        "comment_id": "2230862034",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 367,
        "pr_file": "src/tainting/Dataflow_tainting.ml",
        "discussion_id": "2230862034",
        "commented_code": "@@ -1172,7 +1173,15 @@ and check_tainted_expr env exp : Taints.t * S.shape * Lval_env.t =\n     | Composite ((CTuple | CArray | CList), (_, es, _)) ->\n         let taints_and_shapes, lval_env = map_check_expr env check es in\n         let tuple_shape = Shape.tuple_like_obj taints_and_shapes in\n-        (Taints.empty, tuple_shape, lval_env)\n+        let all_taints =\n+          taints_and_shapes\n+          |> List.fold_left\n+               (fun acc (taints, shape) ->\n+                 acc |> Taints.union taints\n+                 |> Taints.union (Shape.gather_all_taints_in_shape shape))",
        "comment_created_at": "2025-07-25T11:32:27+00:00",
        "comment_author": "dimitris-m",
        "comment_body": "This seems duplicated in a couple more places, maybe it could be a function and reused? With inlining if you think it's appropriate.",
        "pr_file_module": null
      },
      {
        "comment_id": "2231273144",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 367,
        "pr_file": "src/tainting/Dataflow_tainting.ml",
        "discussion_id": "2230862034",
        "commented_code": "@@ -1172,7 +1173,15 @@ and check_tainted_expr env exp : Taints.t * S.shape * Lval_env.t =\n     | Composite ((CTuple | CArray | CList), (_, es, _)) ->\n         let taints_and_shapes, lval_env = map_check_expr env check es in\n         let tuple_shape = Shape.tuple_like_obj taints_and_shapes in\n-        (Taints.empty, tuple_shape, lval_env)\n+        let all_taints =\n+          taints_and_shapes\n+          |> List.fold_left\n+               (fun acc (taints, shape) ->\n+                 acc |> Taints.union taints\n+                 |> Taints.union (Shape.gather_all_taints_in_shape shape))",
        "comment_created_at": "2025-07-25T14:35:12+00:00",
        "comment_author": "corneliuhoffman",
        "comment_body": "done, just the later because it appears a lot\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2128585580",
    "pr_number": 288,
    "pr_file": "src/targeting/Semgrepignore.ml",
    "created_at": "2025-06-05T11:11:07+00:00",
    "commented_code": "patterns = cli_patterns;\n     }\n   in\n+  let semgrepignore_files =\n+    match semgrepignore_filename with\n+    | Some custom_filename ->\n+        {\n+          Gitignore.source_kind = \"semgrepignore\";\n+          filename = custom_filename;\n+          format = Gitignore.Legacy_semgrepignore;\n+        }\n+    | None -> semgrepignore_files",
    "repo_full_name": "opengrep/opengrep",
    "discussion_comments": [
      {
        "comment_id": "2128585580",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 288,
        "pr_file": "src/targeting/Semgrepignore.ml",
        "discussion_id": "2128585580",
        "commented_code": "@@ -134,6 +134,16 @@ let create ?(cli_patterns = []) ~default_semgrepignore_patterns\n       patterns = cli_patterns;\n     }\n   in\n+  let semgrepignore_files =\n+    match semgrepignore_filename with\n+    | Some custom_filename ->\n+        {\n+          Gitignore.source_kind = \"semgrepignore\";\n+          filename = custom_filename;\n+          format = Gitignore.Legacy_semgrepignore;\n+        }\n+    | None -> semgrepignore_files",
        "comment_created_at": "2025-06-05T11:11:07+00:00",
        "comment_author": "dimitris-m",
        "comment_body": "This should be:\r\n\r\n```ocaml\r\nlet semgrepignore_files = semgrepignore_filenames ~filename:semgrepignore_filename\r\n```\r\n\r\nand the definition of `semgrepignore_filenames` should be turned into a function that takes a filename (named) parameter.\r\n\r\nI'm asking this change to avoid code duplication (you are copy pasting the definition) which is error prone.\r\n\r\nSo on line 98 you should have something like this definition: \r\n\r\n```ocaml\r\nlet semgrepignore_files ~filename : Gitignore.gitignore_filename =\r\n  {\r\n    source_kind = \"semgrepignore\";\r\n    filename;\r\n    format = Gitignore.Legacy_semgrepignore;\r\n  }\r\n```",
        "pr_file_module": null
      }
    ]
  }
]