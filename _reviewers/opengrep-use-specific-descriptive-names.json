[
  {
    "discussion_id": "2279400328",
    "pr_number": 391,
    "pr_file": "languages/cpp/tree-sitter/Dummy_preprocessors.ml",
    "created_at": "2025-08-15T16:12:12+00:00",
    "commented_code": "+module S = String\n+\n+type single_line = string\n+\n+let is_start (l : single_line) : bool =\n+  let s = S.trim l in\n+  S.starts_with ~prefix:\"#if\" s ||\n+  S.starts_with ~prefix:\"#ifdef\" s ||\n+  S.starts_with ~prefix:\"#ifndef\" s\n+\n+let is_middle (l : single_line) : bool =\n+  let s = S.trim l in\n+  S.starts_with ~prefix:\"#else\" s ||\n+  S.starts_with ~prefix:\"#elif\" s\n+\n+let is_end (l : single_line) : bool =\n+  let s = S.trim l in\n+  S.starts_with ~prefix:\"#endif\" s",
    "repo_full_name": "opengrep/opengrep",
    "discussion_comments": [
      {
        "comment_id": "2279400328",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 391,
        "pr_file": "languages/cpp/tree-sitter/Dummy_preprocessors.ml",
        "discussion_id": "2279400328",
        "commented_code": "@@ -0,0 +1,56 @@\n+module S = String\n+\n+type single_line = string\n+\n+let is_start (l : single_line) : bool =\n+  let s = S.trim l in\n+  S.starts_with ~prefix:\"#if\" s ||\n+  S.starts_with ~prefix:\"#ifdef\" s ||\n+  S.starts_with ~prefix:\"#ifndef\" s\n+\n+let is_middle (l : single_line) : bool =\n+  let s = S.trim l in\n+  S.starts_with ~prefix:\"#else\" s ||\n+  S.starts_with ~prefix:\"#elif\" s\n+\n+let is_end (l : single_line) : bool =\n+  let s = S.trim l in\n+  S.starts_with ~prefix:\"#endif\" s",
        "comment_created_at": "2025-08-15T16:12:12+00:00",
        "comment_author": "dimitris-m",
        "comment_body": "I would rename these functions to be more specific. \r\n\r\nFor example `is_if_start`, `is_else_start`, `is_endif` or something along these lines.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2102212156",
    "pr_number": 267,
    "pr_file": "src/osemgrep/cli_ci/Ci_CLI.ml",
    "created_at": "2025-05-22T10:24:24+00:00",
    "commented_code": "output;\n         output_conf;\n         incremental_output;\n+        enable_ignore = false;",
    "repo_full_name": "opengrep/opengrep",
    "discussion_comments": [
      {
        "comment_id": "2102212156",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 267,
        "pr_file": "src/osemgrep/cli_ci/Ci_CLI.ml",
        "discussion_id": "2102212156",
        "commented_code": "@@ -302,6 +302,7 @@ let scan_subset_cmdline_term : Scan_CLI.conf Term.t =\n         output;\n         output_conf;\n         incremental_output;\n+        enable_ignore = false;",
        "comment_created_at": "2025-05-22T10:24:24+00:00",
        "comment_author": "dimitris-m",
        "comment_body": "This is not a good variable name, since it's not clear what \"enable_ignore\" means. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2102305022",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 267,
        "pr_file": "src/osemgrep/cli_ci/Ci_CLI.ml",
        "discussion_id": "2102212156",
        "commented_code": "@@ -302,6 +302,7 @@ let scan_subset_cmdline_term : Scan_CLI.conf Term.t =\n         output;\n         output_conf;\n         incremental_output;\n+        enable_ignore = false;",
        "comment_created_at": "2025-05-22T11:16:45+00:00",
        "comment_author": "tom-paz",
        "comment_body": "changed to `apply_ignore_pattern`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2221826160",
    "pr_number": 359,
    "pr_file": "src/core/Core_match.ml",
    "created_at": "2025-07-22T09:03:50+00:00",
    "commented_code": "langs : Lang.t list;\n   (* used for debugging (could be removed at some point) *)\n   pattern_string : string;\n+  options : rule_id_options option\n }\n [@@deriving show, eq]\n \n+and rule_id_options  = {\n+  max_match_per_file : int option;\n+  (* maximum number of matches per file. *)\n+}\n+[@@deriving show, eq]\n+\n+let rule_id_options_of_rule_options (opts : Rule_options.t) =\n+  { max_match_per_file = opts.max_match_per_file }",
    "repo_full_name": "opengrep/opengrep",
    "discussion_comments": [
      {
        "comment_id": "2221826160",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 359,
        "pr_file": "src/core/Core_match.ml",
        "discussion_id": "2221826160",
        "commented_code": "@@ -153,9 +153,35 @@ and rule_id = {\n   langs : Lang.t list;\n   (* used for debugging (could be removed at some point) *)\n   pattern_string : string;\n+  options : rule_id_options option\n }\n [@@deriving show, eq]\n \n+and rule_id_options  = {\n+  max_match_per_file : int option;\n+  (* maximum number of matches per file. *)\n+}\n+[@@deriving show, eq]\n+\n+let rule_id_options_of_rule_options (opts : Rule_options.t) =\n+  { max_match_per_file = opts.max_match_per_file }",
        "comment_created_at": "2025-07-22T09:03:50+00:00",
        "comment_author": "corneliuhoffman",
        "comment_body": "Not blocking.\r\nI am a bit confused by this, is it here for future more complicated options? It is used with\r\n```ocaml\r\n Some Core_match.{max_match_per_file = Some limit; _}\r\n ```\r\n so in principle it can even stay as a Rule_options.t",
        "pr_file_module": null
      },
      {
        "comment_id": "2222212400",
        "repo_full_name": "opengrep/opengrep",
        "pr_number": 359,
        "pr_file": "src/core/Core_match.ml",
        "discussion_id": "2221826160",
        "commented_code": "@@ -153,9 +153,35 @@ and rule_id = {\n   langs : Lang.t list;\n   (* used for debugging (could be removed at some point) *)\n   pattern_string : string;\n+  options : rule_id_options option\n }\n [@@deriving show, eq]\n \n+and rule_id_options  = {\n+  max_match_per_file : int option;\n+  (* maximum number of matches per file. *)\n+}\n+[@@deriving show, eq]\n+\n+let rule_id_options_of_rule_options (opts : Rule_options.t) =\n+  { max_match_per_file = opts.max_match_per_file }",
        "comment_created_at": "2025-07-22T11:17:23+00:00",
        "comment_author": "dimitris-m",
        "comment_body": "The type `rule_id` which contains `rule_id_options` must have `[@@deriving show, eq]` and `Rule_options.t` comes from atd and does not implement `equal` so it cannot be used directly.\r\n\r\nAnd also I wanted to keep only what is relevant, in the spirit of `rule_id` vs `Rule.t` (`Rule.rule_info`)",
        "pr_file_module": null
      }
    ]
  }
]