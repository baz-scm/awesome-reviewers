[
  {
    "discussion_id": "2023673479",
    "pr_number": 34965,
    "pr_file": "selfdrive/locationd/paramsd.py",
    "created_at": "2025-04-01T21:02:24+00:00",
    "commented_code": "last_parameters_msg.liveParameters.stiffnessFactor = last_parameters_dict['stiffnessFactor']\n     last_parameters_msg.liveParameters.angleOffsetAverageDeg = last_parameters_dict['angleOffsetAverageDeg']\n     params_reader.put(\"LiveParameters\", last_parameters_msg.to_bytes())\n-  except (json.JSONDecodeError, KeyError):\n+  except Exception:",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "2023673479",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34965,
        "pr_file": "selfdrive/locationd/paramsd.py",
        "discussion_id": "2023673479",
        "commented_code": "@@ -213,7 +213,7 @@ def migrate_cached_vehicle_params_if_needed(params_reader: Params):\n     last_parameters_msg.liveParameters.stiffnessFactor = last_parameters_dict['stiffnessFactor']\n     last_parameters_msg.liveParameters.angleOffsetAverageDeg = last_parameters_dict['angleOffsetAverageDeg']\n     params_reader.put(\"LiveParameters\", last_parameters_msg.to_bytes())\n-  except (json.JSONDecodeError, KeyError):\n+  except Exception:",
        "comment_created_at": "2025-04-01T21:02:24+00:00",
        "comment_author": "sshane",
        "comment_body": "like what? can we be more explicit? and add a cloudlog.warn or .error here. not a lot should silently fail",
        "pr_file_module": null
      },
      {
        "comment_id": "2023948854",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34965,
        "pr_file": "selfdrive/locationd/paramsd.py",
        "discussion_id": "2023673479",
        "commented_code": "@@ -213,7 +213,7 @@ def migrate_cached_vehicle_params_if_needed(params_reader: Params):\n     last_parameters_msg.liveParameters.stiffnessFactor = last_parameters_dict['stiffnessFactor']\n     last_parameters_msg.liveParameters.angleOffsetAverageDeg = last_parameters_dict['angleOffsetAverageDeg']\n     params_reader.put(\"LiveParameters\", last_parameters_msg.to_bytes())\n-  except (json.JSONDecodeError, KeyError):\n+  except Exception:",
        "comment_created_at": "2025-04-02T02:28:55+00:00",
        "comment_author": "fredyshox",
        "comment_body": "its expected for this to silently fail if anything prevents it from migrating the cached params (like invalid format, missing keys, invalid types, decoding errors etc...). this also fails when the params are already in the new, correct format\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1884786665",
    "pr_number": 34231,
    "pr_file": "docs/hooks/glossary.py",
    "created_at": "2024-12-14T04:00:21+00:00",
    "commented_code": "+import os\n+import re\n+import tomllib\n+from typing import Any\n+\n+def load_glossary(file_path=\"docs/glossary.toml\"):\n+  if not os.path.exists(file_path):\n+    return {}",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1884786665",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34231,
        "pr_file": "docs/hooks/glossary.py",
        "discussion_id": "1884786665",
        "commented_code": "@@ -0,0 +1,80 @@\n+import os\n+import re\n+import tomllib\n+from typing import Any\n+\n+def load_glossary(file_path=\"docs/glossary.toml\"):\n+  if not os.path.exists(file_path):\n+    return {}",
        "comment_created_at": "2024-12-14T04:00:21+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "this should error, not fail silently. for this PR, you can just include an empty one or port over the existing glossry",
        "pr_file_module": null
      },
      {
        "comment_id": "1884789943",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34231,
        "pr_file": "docs/hooks/glossary.py",
        "discussion_id": "1884786665",
        "commented_code": "@@ -0,0 +1,80 @@\n+import os\n+import re\n+import tomllib\n+from typing import Any\n+\n+def load_glossary(file_path=\"docs/glossary.toml\"):\n+  if not os.path.exists(file_path):\n+    return {}",
        "comment_created_at": "2024-12-14T04:10:59+00:00",
        "comment_author": "LouisVelez",
        "comment_body": "Will add an empty. I made a separate PR for the glossary term file #34232",
        "pr_file_module": null
      },
      {
        "comment_id": "1884791929",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34231,
        "pr_file": "docs/hooks/glossary.py",
        "discussion_id": "1884786665",
        "commented_code": "@@ -0,0 +1,80 @@\n+import os\n+import re\n+import tomllib\n+from typing import Any\n+\n+def load_glossary(file_path=\"docs/glossary.toml\"):\n+  if not os.path.exists(file_path):\n+    return {}",
        "comment_created_at": "2024-12-14T04:17:48+00:00",
        "comment_author": "LouisVelez",
        "comment_body": "pushed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1561660295",
    "pr_number": 31771,
    "pr_file": "system/updated/updated.py",
    "created_at": "2024-04-11T20:43:19+00:00",
    "commented_code": "+#!/usr/bin/env python3\n+import hashlib\n+import os\n+import psutil\n+import requests\n+import shutil\n+import time\n+\n+from pathlib import Path\n+\n+from openpilot.common.api import API_HOST\n+from openpilot.common.basedir import BASEDIR\n+from openpilot.common.run import run_cmd\n+from openpilot.common.params import Params\n+from openpilot.common.realtime import set_core_affinity\n+from openpilot.common.swaglog import cloudlog\n+from openpilot.system.hardware import HARDWARE\n+from openpilot.system.updated.casync import casync\n+from openpilot.system.updated.common import get_consistent_flag, set_consistent_flag\n+from openpilot.system.version import BuildMetadata, get_build_metadata, build_metadata_from_dict, is_git_repo\n+\n+\n+UPDATE_DELAY = int(os.environ.get(\"UPDATE_DELAY\", 60))\n+\n+CHANNELS_API_ROOT = \"v1/openpilot/channels\"\n+\n+STAGING_ROOT = os.getenv(\"UPDATER_STAGING_ROOT\", \"/data/safe_staging\")\n+\n+FINALIZED = Path(STAGING_ROOT) / \"finalized\"        # where the casync update is pulled\n+CASYNC_TMPDIR = Path(STAGING_ROOT) / \"casync_tmp\"   # working directory for casync temp files\n+\n+INIT_FILE = Path(BASEDIR) / \".overlay_init\"\n+\n+\n+def get_remote_available_channels() -> list | None:\n+  try:\n+    return list(requests.get(os.path.join(API_HOST, CHANNELS_API_ROOT)).json())\n+  except Exception:\n+    cloudlog.exception(\"fetching remote channels\")\n+    return None\n+\n+\n+def get_remote_channel_data(channel) -> tuple[BuildMetadata | None, dict | None]:\n+  try:\n+    data = requests.get(os.path.join(API_HOST, CHANNELS_API_ROOT, channel)).json()\n+    return build_metadata_from_dict(data[\"build_metadata\"]), data[\"manifest\"]\n+  except Exception:",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1561660295",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 31771,
        "pr_file": "system/updated/updated.py",
        "discussion_id": "1561660295",
        "commented_code": "@@ -0,0 +1,246 @@\n+#!/usr/bin/env python3\n+import hashlib\n+import os\n+import psutil\n+import requests\n+import shutil\n+import time\n+\n+from pathlib import Path\n+\n+from openpilot.common.api import API_HOST\n+from openpilot.common.basedir import BASEDIR\n+from openpilot.common.run import run_cmd\n+from openpilot.common.params import Params\n+from openpilot.common.realtime import set_core_affinity\n+from openpilot.common.swaglog import cloudlog\n+from openpilot.system.hardware import HARDWARE\n+from openpilot.system.updated.casync import casync\n+from openpilot.system.updated.common import get_consistent_flag, set_consistent_flag\n+from openpilot.system.version import BuildMetadata, get_build_metadata, build_metadata_from_dict, is_git_repo\n+\n+\n+UPDATE_DELAY = int(os.environ.get(\"UPDATE_DELAY\", 60))\n+\n+CHANNELS_API_ROOT = \"v1/openpilot/channels\"\n+\n+STAGING_ROOT = os.getenv(\"UPDATER_STAGING_ROOT\", \"/data/safe_staging\")\n+\n+FINALIZED = Path(STAGING_ROOT) / \"finalized\"        # where the casync update is pulled\n+CASYNC_TMPDIR = Path(STAGING_ROOT) / \"casync_tmp\"   # working directory for casync temp files\n+\n+INIT_FILE = Path(BASEDIR) / \".overlay_init\"\n+\n+\n+def get_remote_available_channels() -> list | None:\n+  try:\n+    return list(requests.get(os.path.join(API_HOST, CHANNELS_API_ROOT)).json())\n+  except Exception:\n+    cloudlog.exception(\"fetching remote channels\")\n+    return None\n+\n+\n+def get_remote_channel_data(channel) -> tuple[BuildMetadata | None, dict | None]:\n+  try:\n+    data = requests.get(os.path.join(API_HOST, CHANNELS_API_ROOT, channel)).json()\n+    return build_metadata_from_dict(data[\"build_metadata\"]), data[\"manifest\"]\n+  except Exception:",
        "comment_created_at": "2024-04-11T20:43:19+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "catch a more specific exception. `Exception` should be caught only in very specific cases",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1637225944",
    "pr_number": 32730,
    "pr_file": "selfdrive/controls/controlsd.py",
    "created_at": "2024-06-12T23:11:03+00:00",
    "commented_code": "while True:\n         self.step()\n         self.rk.monitor_time()\n-    except SystemExit:\n+    except Exception:",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1637225944",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32730,
        "pr_file": "selfdrive/controls/controlsd.py",
        "discussion_id": "1637225944",
        "commented_code": "@@ -835,7 +835,7 @@ def controlsd_thread(self):\n       while True:\n         self.step()\n         self.rk.monitor_time()\n-    except SystemExit:\n+    except Exception:",
        "comment_created_at": "2024-06-12T23:11:03+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "probably want to reraise too",
        "pr_file_module": null
      },
      {
        "comment_id": "1637243921",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32730,
        "pr_file": "selfdrive/controls/controlsd.py",
        "discussion_id": "1637225944",
        "commented_code": "@@ -835,7 +835,7 @@ def controlsd_thread(self):\n       while True:\n         self.step()\n         self.rk.monitor_time()\n-    except SystemExit:\n+    except Exception:",
        "comment_created_at": "2024-06-12T23:30:14+00:00",
        "comment_author": "sshane",
        "comment_body": "removed the exception catcher",
        "pr_file_module": null
      }
    ]
  }
]