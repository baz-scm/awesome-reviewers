[
  {
    "discussion_id": "1949675965",
    "pr_number": 34562,
    "pr_file": "system/qcomgpsd/structs.py",
    "created_at": "2025-02-10T18:31:30+00:00",
    "commented_code": "i += 1\n   return ''.join(ret)\n \n+# MappingProxyType is used to make this dictionary read-only.\n+TYPES = MappingProxyType({\n+    \"double\": \"d\",\n+    \"float\": \"f\",\n+    \"int8\": \"b\",\n+    \"int8_t\": \"b\",\n+    \"uint8\": \"B\",\n+    \"uint8_t\": \"B\",\n+    \"int16\": \"h\",\n+    \"int16_t\": \"h\",\n+    \"uint16\": \"H\",\n+    \"uint16_t\": \"H\",\n+    \"int32\": \"i\",\n+    \"int32_t\": \"i\",\n+    \"uint32\": \"I\",\n+    \"uint32_t\": \"I\",\n+    \"int64\": \"q\",\n+    \"int64_t\": \"q\",\n+    \"uint64\": \"Q\",\n+    \"uint64_t\": \"Q\",\n+  })\n+\n def parse_struct(ss):\n   st = \"<\"\n   nams = []\n-  for l in ss.strip().split(\"\n\"):\n-    if len(l.strip()) == 0:",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1949675965",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34562,
        "pr_file": "system/qcomgpsd/structs.py",
        "discussion_id": "1949675965",
        "commented_code": "@@ -290,32 +291,42 @@ def name_to_camelcase(nam):\n       i += 1\n   return ''.join(ret)\n \n+# MappingProxyType is used to make this dictionary read-only.\n+TYPES = MappingProxyType({\n+    \"double\": \"d\",\n+    \"float\": \"f\",\n+    \"int8\": \"b\",\n+    \"int8_t\": \"b\",\n+    \"uint8\": \"B\",\n+    \"uint8_t\": \"B\",\n+    \"int16\": \"h\",\n+    \"int16_t\": \"h\",\n+    \"uint16\": \"H\",\n+    \"uint16_t\": \"H\",\n+    \"int32\": \"i\",\n+    \"int32_t\": \"i\",\n+    \"uint32\": \"I\",\n+    \"uint32_t\": \"I\",\n+    \"int64\": \"q\",\n+    \"int64_t\": \"q\",\n+    \"uint64\": \"Q\",\n+    \"uint64_t\": \"Q\",\n+  })\n+\n def parse_struct(ss):\n   st = \"<\"\n   nams = []\n-  for l in ss.strip().split(\"\\n\"):\n-    if len(l.strip()) == 0:",
        "comment_created_at": "2025-02-10T18:31:30+00:00",
        "comment_author": "maxime-desroches",
        "comment_body": "For speed up PRs, please include a benchmark of the before and after performance",
        "pr_file_module": null
      },
      {
        "comment_id": "1949799243",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34562,
        "pr_file": "system/qcomgpsd/structs.py",
        "discussion_id": "1949675965",
        "commented_code": "@@ -290,32 +291,42 @@ def name_to_camelcase(nam):\n       i += 1\n   return ''.join(ret)\n \n+# MappingProxyType is used to make this dictionary read-only.\n+TYPES = MappingProxyType({\n+    \"double\": \"d\",\n+    \"float\": \"f\",\n+    \"int8\": \"b\",\n+    \"int8_t\": \"b\",\n+    \"uint8\": \"B\",\n+    \"uint8_t\": \"B\",\n+    \"int16\": \"h\",\n+    \"int16_t\": \"h\",\n+    \"uint16\": \"H\",\n+    \"uint16_t\": \"H\",\n+    \"int32\": \"i\",\n+    \"int32_t\": \"i\",\n+    \"uint32\": \"I\",\n+    \"uint32_t\": \"I\",\n+    \"int64\": \"q\",\n+    \"int64_t\": \"q\",\n+    \"uint64\": \"Q\",\n+    \"uint64_t\": \"Q\",\n+  })\n+\n def parse_struct(ss):\n   st = \"<\"\n   nams = []\n-  for l in ss.strip().split(\"\\n\"):\n-    if len(l.strip()) == 0:",
        "comment_created_at": "2025-02-10T20:00:15+00:00",
        "comment_author": "cclauss",
        "comment_body": "On a MacBook Pro M1...\r\n\r\n% `uv run --python=3.11 parse_struct_benchmark.py`\r\n```\r\nold_parse_structs(): 7.900648624985479 seconds\r\nnew_parse_structs(): 5.590290749911219 seconds\r\n```\r\n% `python3.13 parse_struct_benchmark.py`\r\n```\r\nold_parse_structs(): 8.46019749995321 seconds\r\nnew_parse_structs(): 6.378564580809325 seconds\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1706285185",
    "pr_number": 33029,
    "pr_file": "system/manager/process_config.py",
    "created_at": "2024-08-07T01:56:01+00:00",
    "commented_code": "NativeProcess(\"sensord\", \"system/sensord\", [\"./sensord\"], only_onroad, enabled=not PC),\n   NativeProcess(\"ui\", \"selfdrive/ui\", [\"./ui\"], always_run, watchdog_max_dt=(5 if not PC else None)),\n   PythonProcess(\"soundd\", \"selfdrive.ui.soundd\", only_onroad),\n-  NativeProcess(\"locationd\", \"selfdrive/locationd\", [\"./locationd\"], only_onroad),\n+  PythonProcess(\"locationd\", \"selfdrive.locationd.locationd\", only_onroad),",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1706285185",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 33029,
        "pr_file": "system/manager/process_config.py",
        "discussion_id": "1706285185",
        "commented_code": "@@ -59,7 +59,7 @@ def only_offroad(started, params, CP: car.CarParams) -> bool:\n   NativeProcess(\"sensord\", \"system/sensord\", [\"./sensord\"], only_onroad, enabled=not PC),\n   NativeProcess(\"ui\", \"selfdrive/ui\", [\"./ui\"], always_run, watchdog_max_dt=(5 if not PC else None)),\n   PythonProcess(\"soundd\", \"selfdrive.ui.soundd\", only_onroad),\n-  NativeProcess(\"locationd\", \"selfdrive/locationd\", [\"./locationd\"], only_onroad),\n+  PythonProcess(\"locationd\", \"selfdrive.locationd.locationd\", only_onroad),",
        "comment_created_at": "2024-08-07T01:56:01+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "@deanlee this new process uses 2-3x more CPU than the previous locationd. want to see where all that's going?",
        "pr_file_module": null
      },
      {
        "comment_id": "1707794410",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 33029,
        "pr_file": "system/manager/process_config.py",
        "discussion_id": "1706285185",
        "commented_code": "@@ -59,7 +59,7 @@ def only_offroad(started, params, CP: car.CarParams) -> bool:\n   NativeProcess(\"sensord\", \"system/sensord\", [\"./sensord\"], only_onroad, enabled=not PC),\n   NativeProcess(\"ui\", \"selfdrive/ui\", [\"./ui\"], always_run, watchdog_max_dt=(5 if not PC else None)),\n   PythonProcess(\"soundd\", \"selfdrive.ui.soundd\", only_onroad),\n-  NativeProcess(\"locationd\", \"selfdrive/locationd\", [\"./locationd\"], only_onroad),\n+  PythonProcess(\"locationd\", \"selfdrive.locationd.locationd\", only_onroad),",
        "comment_created_at": "2024-08-07T19:58:38+00:00",
        "comment_author": "deanlee",
        "comment_body": "I'm investigating the bottleneck but haven't pinpointed it yet. Any insights or suggestions?",
        "pr_file_module": null
      },
      {
        "comment_id": "1751359568",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 33029,
        "pr_file": "system/manager/process_config.py",
        "discussion_id": "1706285185",
        "commented_code": "@@ -59,7 +59,7 @@ def only_offroad(started, params, CP: car.CarParams) -> bool:\n   NativeProcess(\"sensord\", \"system/sensord\", [\"./sensord\"], only_onroad, enabled=not PC),\n   NativeProcess(\"ui\", \"selfdrive/ui\", [\"./ui\"], always_run, watchdog_max_dt=(5 if not PC else None)),\n   PythonProcess(\"soundd\", \"selfdrive.ui.soundd\", only_onroad),\n-  NativeProcess(\"locationd\", \"selfdrive/locationd\", [\"./locationd\"], only_onroad),\n+  PythonProcess(\"locationd\", \"selfdrive.locationd.locationd\", only_onroad),",
        "comment_created_at": "2024-09-10T06:50:42+00:00",
        "comment_author": "deanlee",
        "comment_body": "It looks like the bottleneck is in `rednose/helpers/ekf_sym_pyx.pyx`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1542995516",
    "pr_number": 32009,
    "pr_file": "selfdrive/car/interfaces.py",
    "created_at": "2024-03-28T13:36:15+00:00",
    "commented_code": "def update(self, c: car.CarControl, can_strings: list[bytes]) -> car.CarState:\n     # parse can\n+    can_list = can_capnp_to_list(can_strings)",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1542995516",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32009,
        "pr_file": "selfdrive/car/interfaces.py",
        "discussion_id": "1542995516",
        "commented_code": "@@ -217,9 +218,10 @@ def _update(self, c: car.CarControl) -> car.CarState:\n \n   def update(self, c: car.CarControl, can_strings: list[bytes]) -> car.CarState:\n     # parse can\n+    can_list = can_capnp_to_list(can_strings)",
        "comment_created_at": "2024-03-28T13:36:15+00:00",
        "comment_author": "deanlee",
        "comment_body": "because only one conversion (capnp->list) needs to be done.  the overall performance will be better than the previous version of opendbc.",
        "pr_file_module": null
      },
      {
        "comment_id": "1543373601",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32009,
        "pr_file": "selfdrive/car/interfaces.py",
        "discussion_id": "1542995516",
        "commented_code": "@@ -217,9 +218,10 @@ def _update(self, c: car.CarControl) -> car.CarState:\n \n   def update(self, c: car.CarControl, can_strings: list[bytes]) -> car.CarState:\n     # parse can\n+    can_list = can_capnp_to_list(can_strings)",
        "comment_created_at": "2024-03-28T17:35:39+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "so it's not twice as slow?",
        "pr_file_module": null
      },
      {
        "comment_id": "1544062295",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32009,
        "pr_file": "selfdrive/car/interfaces.py",
        "discussion_id": "1542995516",
        "commented_code": "@@ -217,9 +218,10 @@ def _update(self, c: car.CarControl) -> car.CarState:\n \n   def update(self, c: car.CarControl, can_strings: list[bytes]) -> car.CarState:\n     # parse can\n+    can_list = can_capnp_to_list(can_strings)",
        "comment_created_at": "2024-03-29T05:02:27+00:00",
        "comment_author": "deanlee",
        "comment_body": "updated the test case to remove the overhead of capnp conversion: https://github.com/commaai/openpilot/pull/32048\r\nthe new test results is:\r\n\r\nbefore:\r\n\r\n> 6000 CAN packets, 10 runs\r\n> 343.58 mean ms, 349.11 max ms, 339.32 min ms, 3.40 std ms\r\n> 0.0573 mean ms / CAN packet\r\n> \r\n\r\nafter:\r\n\r\n> 6000 CAN packets, 10 runs\r\n> 454.40 mean ms, 463.13 max ms, 449.67 min ms, 3.46 std ms\r\n> 0.0757 mean ms / CAN packet\r\n> \r\n\r\n \r\n\r\nIt's still a little slower, but not twice as much.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1590486139",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32009,
        "pr_file": "selfdrive/car/interfaces.py",
        "discussion_id": "1542995516",
        "commented_code": "@@ -217,9 +218,10 @@ def _update(self, c: car.CarControl) -> car.CarState:\n \n   def update(self, c: car.CarControl, can_strings: list[bytes]) -> car.CarState:\n     # parse can\n+    can_list = can_capnp_to_list(can_strings)",
        "comment_created_at": "2024-05-06T02:34:00+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "hmm, even the old speed seems a bit slow. any other optimizations we can do at least get it to be the same?",
        "pr_file_module": null
      },
      {
        "comment_id": "1590489712",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32009,
        "pr_file": "selfdrive/car/interfaces.py",
        "discussion_id": "1542995516",
        "commented_code": "@@ -217,9 +218,10 @@ def _update(self, c: car.CarControl) -> car.CarState:\n \n   def update(self, c: car.CarControl, can_strings: list[bytes]) -> car.CarState:\n     # parse can\n+    can_list = can_capnp_to_list(can_strings)",
        "comment_created_at": "2024-05-06T02:48:20+00:00",
        "comment_author": "deanlee",
        "comment_body": "I'll thinking of ways to optimize further.",
        "pr_file_module": null
      },
      {
        "comment_id": "1590765603",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32009,
        "pr_file": "selfdrive/car/interfaces.py",
        "discussion_id": "1542995516",
        "commented_code": "@@ -217,9 +218,10 @@ def _update(self, c: car.CarControl) -> car.CarState:\n \n   def update(self, c: car.CarControl, can_strings: list[bytes]) -> car.CarState:\n     # parse can\n+    can_list = can_capnp_to_list(can_strings)",
        "comment_created_at": "2024-05-06T09:36:11+00:00",
        "comment_author": "deanlee",
        "comment_body": "Submitted a PR https://github.com/commaai/opendbc/pull/1039 to improve the performance of `update_string`, now it's twice as fast. This PR will also benefit from it once merged.",
        "pr_file_module": null
      }
    ]
  }
]