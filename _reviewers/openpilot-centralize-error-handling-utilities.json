[
  {
    "discussion_id": "2248930583",
    "pr_number": 35821,
    "pr_file": "tools/replay/qcom/sde_rotator.cc",
    "created_at": "2025-08-01T21:57:32+00:00",
    "commented_code": "+#include \"sde_rotator.h\"\n+#include \"third_party/linux/include/msm_media_info.h\"\n+#include \"common/swaglog.h\"\n+#include <cstdio>\n+#include <linux/ion.h>\n+#include <msm_ion.h>\n+\n+#ifndef V4L2_PIX_FMT_NV12_UBWC\n+#define V4L2_PIX_FMT_NV12_UBWC v4l2_fourcc('Q', '1', '2', '8')\n+#endif\n+\n+static void checked_ioctl(int fd, unsigned long request, void *argp) {",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "2248930583",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 35821,
        "pr_file": "tools/replay/qcom/sde_rotator.cc",
        "discussion_id": "2248930583",
        "commented_code": "@@ -0,0 +1,171 @@\n+#include \"sde_rotator.h\"\n+#include \"third_party/linux/include/msm_media_info.h\"\n+#include \"common/swaglog.h\"\n+#include <cstdio>\n+#include <linux/ion.h>\n+#include <msm_ion.h>\n+\n+#ifndef V4L2_PIX_FMT_NV12_UBWC\n+#define V4L2_PIX_FMT_NV12_UBWC v4l2_fourcc('Q', '1', '2', '8')\n+#endif\n+\n+static void checked_ioctl(int fd, unsigned long request, void *argp) {",
        "comment_created_at": "2025-08-01T21:57:32+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "let's put this in common/ instead of copy/pasting everywhere",
        "pr_file_module": null
      },
      {
        "comment_id": "2248931045",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 35821,
        "pr_file": "tools/replay/qcom/sde_rotator.cc",
        "discussion_id": "2248930583",
        "commented_code": "@@ -0,0 +1,171 @@\n+#include \"sde_rotator.h\"\n+#include \"third_party/linux/include/msm_media_info.h\"\n+#include \"common/swaglog.h\"\n+#include <cstdio>\n+#include <linux/ion.h>\n+#include <msm_ion.h>\n+\n+#ifndef V4L2_PIX_FMT_NV12_UBWC\n+#define V4L2_PIX_FMT_NV12_UBWC v4l2_fourcc('Q', '1', '2', '8')\n+#endif\n+\n+static void checked_ioctl(int fd, unsigned long request, void *argp) {",
        "comment_created_at": "2025-08-01T21:58:02+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "or better yet make `check` an argument to `util::safe_ioctl`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2249447864",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 35821,
        "pr_file": "tools/replay/qcom/sde_rotator.cc",
        "discussion_id": "2248930583",
        "commented_code": "@@ -0,0 +1,171 @@\n+#include \"sde_rotator.h\"\n+#include \"third_party/linux/include/msm_media_info.h\"\n+#include \"common/swaglog.h\"\n+#include <cstdio>\n+#include <linux/ion.h>\n+#include <msm_ion.h>\n+\n+#ifndef V4L2_PIX_FMT_NV12_UBWC\n+#define V4L2_PIX_FMT_NV12_UBWC v4l2_fourcc('Q', '1', '2', '8')\n+#endif\n+\n+static void checked_ioctl(int fd, unsigned long request, void *argp) {",
        "comment_created_at": "2025-08-02T22:50:56+00:00",
        "comment_author": "jakethesnake420",
        "comment_body": "What if safe_ioctl accepts a message and an error callback? It is used in spi.cc so it would be like this:\r\n ```cpp\r\n  auto fail = [serial, this] {cleanup(); throw std::runtime_error(\"Error connecting to panda with serial: \" + serial);};\r\n  // SPI settings\r\n  util::safe_ioctl(spi_fd, SPI_IOC_WR_MODE, &spi_mode, \"failed setting SPI mode\", fail);\r\n  util::safe_ioctl(spi_fd, SPI_IOC_WR_MAX_SPEED_HZ, &spi_speed, \"failed setting SPI speed\", fail);\r\n  util::safe_ioctl(spi_fd, SPI_IOC_WR_BITS_PER_WORD, &spi_bits_per_word, \"failed setting SPI bits per word\", fail);\r\n```\r\n\r\n\r\n\r\n```cpp\r\ntemplate<typename ErrorCallback>\r\nint safe_ioctl(int fd, unsigned long request, void *argp, const char* error_msg, ErrorCallback error_callback) {\r\n  int ret;\r\n  do {\r\n    ret = ioctl(fd, request, argp);\r\n  } while ((ret == -1) && (errno == EINTR));\r\n\r\n  if (ret == -1 && error_msg) {\r\n    LOGE(\"ioctl failed: %s\", error_msg);\r\n    error_callback();\r\n  }\r\n  return ret;\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2249512291",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 35821,
        "pr_file": "tools/replay/qcom/sde_rotator.cc",
        "discussion_id": "2248930583",
        "commented_code": "@@ -0,0 +1,171 @@\n+#include \"sde_rotator.h\"\n+#include \"third_party/linux/include/msm_media_info.h\"\n+#include \"common/swaglog.h\"\n+#include <cstdio>\n+#include <linux/ion.h>\n+#include <msm_ion.h>\n+\n+#ifndef V4L2_PIX_FMT_NV12_UBWC\n+#define V4L2_PIX_FMT_NV12_UBWC v4l2_fourcc('Q', '1', '2', '8')\n+#endif\n+\n+static void checked_ioctl(int fd, unsigned long request, void *argp) {",
        "comment_created_at": "2025-08-03T04:07:14+00:00",
        "comment_author": "jakethesnake420",
        "comment_body": "https://github.com/commaai/openpilot/pull/35908",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2250043762",
    "pr_number": 35908,
    "pr_file": "selfdrive/pandad/spi.cc",
    "created_at": "2025-08-03T16:38:30+00:00",
    "commented_code": "// revs of the comma three may not support this speed\n   uint32_t spi_speed = 50000000;\n \n+  auto fail = [this, serial] {cleanup(); throw std::runtime_error(\"Error connecting to panda \" + serial);};",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "2250043762",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 35908,
        "pr_file": "selfdrive/pandad/spi.cc",
        "discussion_id": "2250043762",
        "commented_code": "@@ -67,34 +67,22 @@ PandaSpiHandle::PandaSpiHandle(std::string serial) : PandaCommsHandle(serial) {\n   // revs of the comma three may not support this speed\n   uint32_t spi_speed = 50000000;\n \n+  auto fail = [this, serial] {cleanup(); throw std::runtime_error(\"Error connecting to panda \" + serial);};",
        "comment_created_at": "2025-08-03T16:38:30+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "```suggestion\n  auto fail = [this, serial] {\n    cleanup(); throw std::runtime_error(\"Error connecting to panda \" + serial);\n  };\n```",
        "pr_file_module": null
      }
    ]
  }
]