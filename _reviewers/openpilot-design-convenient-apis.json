[
  {
    "discussion_id": "2218159943",
    "pr_number": 35769,
    "pr_file": "system/hardware/hardwared.py",
    "created_at": "2025-07-21T04:28:06+00:00",
    "commented_code": "prev_offroad_states: dict[str, tuple[bool, str | None]] = {}\n \n \n+def read_uptime_from_param(params, param: str) -> float:",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "2218159943",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 35769,
        "pr_file": "system/hardware/hardwared.py",
        "discussion_id": "2218159943",
        "commented_code": "@@ -56,6 +56,11 @@\n prev_offroad_states: dict[str, tuple[bool, str | None]] = {}\n \n \n+def read_uptime_from_param(params, param: str) -> float:",
        "comment_created_at": "2025-07-21T04:28:06+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "this should be a helper on params (or maybe just an arg to Params.get)",
        "pr_file_module": null
      },
      {
        "comment_id": "2218215544",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 35769,
        "pr_file": "system/hardware/hardwared.py",
        "discussion_id": "2218159943",
        "commented_code": "@@ -56,6 +56,11 @@\n prev_offroad_states: dict[str, tuple[bool, str | None]] = {}\n \n \n+def read_uptime_from_param(params, param: str) -> float:",
        "comment_created_at": "2025-07-21T05:25:06+00:00",
        "comment_author": "sshane",
        "comment_body": "flask's `request.args.get` allows you to specify type to cast to",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1782086635",
    "pr_number": 33656,
    "pr_file": "selfdrive/car/tests/test_models.py",
    "created_at": "2024-10-01T04:15:07+00:00",
    "commented_code": "self.assertGreater(msgs_sent, 50)\n \n     # Make sure we can send all messages while inactive\n-    CC = structs.CarControl()\n-    test_car_controller(CC)\n+    CC = car.CarControl.new_message()\n+    test_car_controller(CC.as_reader())\n \n     # Test cancel + general messages (controls_allowed=False & cruise_engaged=True)\n     self.safety.set_cruise_engaged_prev(True)\n-    CC = structs.CarControl(cruiseControl=structs.CarControl.CruiseControl(cancel=True))\n-    test_car_controller(CC)\n+    CC = car.CarControl.new_message(cruiseControl={'cancel': True})",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1782086635",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 33656,
        "pr_file": "selfdrive/car/tests/test_models.py",
        "discussion_id": "1782086635",
        "commented_code": "@@ -309,18 +307,18 @@ def test_car_controller(car_control):\n       self.assertGreater(msgs_sent, 50)\n \n     # Make sure we can send all messages while inactive\n-    CC = structs.CarControl()\n-    test_car_controller(CC)\n+    CC = car.CarControl.new_message()\n+    test_car_controller(CC.as_reader())\n \n     # Test cancel + general messages (controls_allowed=False & cruise_engaged=True)\n     self.safety.set_cruise_engaged_prev(True)\n-    CC = structs.CarControl(cruiseControl=structs.CarControl.CruiseControl(cancel=True))\n-    test_car_controller(CC)\n+    CC = car.CarControl.new_message(cruiseControl={'cancel': True})",
        "comment_created_at": "2024-10-01T04:15:07+00:00",
        "comment_author": "sshane",
        "comment_body": "```suggestion\r\n    CC = car.CarControl(cruiseControl={'cancel': True})\r\n```",
        "pr_file_module": null
      }
    ]
  }
]