[
  {
    "discussion_id": "2167303463",
    "pr_number": 35325,
    "pr_file": "system/athena/athenad.py",
    "created_at": "2025-06-25T17:59:42+00:00",
    "commented_code": "return HARDWARE.get_networks()\n \n \n+@dispatcher.add_method\n+def getEsimProfiles():\n+  return [asdict(p) for p in HARDWARE.get_sim_lpa().list_profiles()]\n+\n+\n+@dispatcher.add_method\n+def downloadEsimProfile(qr: str, profile_name: str):\n+  HARDWARE.get_sim_lpa().download_profile(qr, profile_name)\n+\n+\n+@dispatcher.add_method\n+def setEsimProfile(iccid: str):\n+  HARDWARE.get_sim_lpa().switch_profile(iccid)",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "2167303463",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 35325,
        "pr_file": "system/athena/athenad.py",
        "discussion_id": "2167303463",
        "commented_code": "@@ -544,6 +544,22 @@ def getNetworks():\n   return HARDWARE.get_networks()\n \n \n+@dispatcher.add_method\n+def getEsimProfiles():\n+  return [asdict(p) for p in HARDWARE.get_sim_lpa().list_profiles()]\n+\n+\n+@dispatcher.add_method\n+def downloadEsimProfile(qr: str, profile_name: str):\n+  HARDWARE.get_sim_lpa().download_profile(qr, profile_name)\n+\n+\n+@dispatcher.add_method\n+def setEsimProfile(iccid: str):\n+  HARDWARE.get_sim_lpa().switch_profile(iccid)",
        "comment_created_at": "2025-06-25T17:59:42+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "same here, let's validate the input is a valid ICCID. doesn't have to be an ICCID that you have a profile for, we just don't want arbitrary input",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1953515640",
    "pr_number": 34569,
    "pr_file": "common/realtime.py",
    "created_at": "2025-02-12T22:50:48+00:00",
    "commented_code": "self._frame = 0\n     self._remaining = 0.0\n     self._process_name = getproctitle()\n-    self._dts = deque([self._interval], maxlen=100)\n     self._last_monitor_time = -1.\n     self._next_frame_time = -1.\n \n+    self.avg_dt = MovingAverage(100)\n+    self.avg_dt.add_value(self._interval)",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1953515640",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34569,
        "pr_file": "common/realtime.py",
        "discussion_id": "1953515640",
        "commented_code": "@@ -52,10 +52,12 @@ def __init__(self, rate: float, print_delay_threshold: float | None = 0.0) -> No\n     self._frame = 0\n     self._remaining = 0.0\n     self._process_name = getproctitle()\n-    self._dts = deque([self._interval], maxlen=100)\n     self._last_monitor_time = -1.\n     self._next_frame_time = -1.\n \n+    self.avg_dt = MovingAverage(100)\n+    self.avg_dt.add_value(self._interval)",
        "comment_created_at": "2025-02-12T22:50:48+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "why do we need to add a value every time?",
        "pr_file_module": null
      },
      {
        "comment_id": "1953848598",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34569,
        "pr_file": "common/realtime.py",
        "discussion_id": "1953515640",
        "commented_code": "@@ -52,10 +52,12 @@ def __init__(self, rate: float, print_delay_threshold: float | None = 0.0) -> No\n     self._frame = 0\n     self._remaining = 0.0\n     self._process_name = getproctitle()\n-    self._dts = deque([self._interval], maxlen=100)\n     self._last_monitor_time = -1.\n     self._next_frame_time = -1.\n \n+    self.avg_dt = MovingAverage(100)\n+    self.avg_dt.add_value(self._interval)",
        "comment_created_at": "2025-02-13T05:46:31+00:00",
        "comment_author": "deanlee",
        "comment_body": "Add an initial value in `__init__` because `ratekeeper` calls `lagging()` before it updates with `monitor_time()`. This ensures the first call to lagging() returns a valid average, avoiding uninitialized values, similar to how `self._dts = deque([self._interval], maxlen=100)` works by starting with an initial value.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1792545818",
    "pr_number": 33749,
    "pr_file": "tools/replay/rp_visualization.py",
    "created_at": "2024-10-08T21:42:37+00:00",
    "commented_code": "if sm.recv_frame['radarState']:\n       plot_lead(sm['radarState'], lid_overlay)\n     liveTracksTime = sm.logMonoTime['liveTracks']\n-    maybe_update_radar_points(sm['liveTracks'], lid_overlay)\n+    if sm['liveTracks'] is not None and hasattr(sm['liveTracks'], 'trackList'):",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1792545818",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 33749,
        "pr_file": "tools/replay/rp_visualization.py",
        "discussion_id": "1792545818",
        "commented_code": "@@ -33,7 +33,8 @@ def visualize(addr):\n     if sm.recv_frame['radarState']:\n       plot_lead(sm['radarState'], lid_overlay)\n     liveTracksTime = sm.logMonoTime['liveTracks']\n-    maybe_update_radar_points(sm['liveTracks'], lid_overlay)\n+    if sm['liveTracks'] is not None and hasattr(sm['liveTracks'], 'trackList'):",
        "comment_created_at": "2024-10-08T21:42:37+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "this should work\r\n```suggestion\r\n    if sm.updated['liveTracks']:\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1792546006",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 33749,
        "pr_file": "tools/replay/rp_visualization.py",
        "discussion_id": "1792545818",
        "commented_code": "@@ -33,7 +33,8 @@ def visualize(addr):\n     if sm.recv_frame['radarState']:\n       plot_lead(sm['radarState'], lid_overlay)\n     liveTracksTime = sm.logMonoTime['liveTracks']\n-    maybe_update_radar_points(sm['liveTracks'], lid_overlay)\n+    if sm['liveTracks'] is not None and hasattr(sm['liveTracks'], 'trackList'):",
        "comment_created_at": "2024-10-08T21:42:51+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "and with that, can we remove the \"maybe_\"?",
        "pr_file_module": null
      },
      {
        "comment_id": "1792549682",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 33749,
        "pr_file": "tools/replay/rp_visualization.py",
        "discussion_id": "1792545818",
        "commented_code": "@@ -33,7 +33,8 @@ def visualize(addr):\n     if sm.recv_frame['radarState']:\n       plot_lead(sm['radarState'], lid_overlay)\n     liveTracksTime = sm.logMonoTime['liveTracks']\n-    maybe_update_radar_points(sm['liveTracks'], lid_overlay)\n+    if sm['liveTracks'] is not None and hasattr(sm['liveTracks'], 'trackList'):",
        "comment_created_at": "2024-10-08T21:47:36+00:00",
        "comment_author": "Willebrew",
        "comment_body": "Haha agreed, done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1218870340",
    "pr_number": 24742,
    "pr_file": "selfdrive/controls/lib/longitudinal_planner.py",
    "created_at": "2023-06-06T04:22:29+00:00",
    "commented_code": "self.a_desired_trajectory = np.zeros(CONTROL_N)\n     self.j_desired_trajectory = np.zeros(CONTROL_N)\n     self.solverExecutionTime = 0.0\n+    self.params = Params()\n+    self.param_read_counter = 0\n+    self.read_param()\n+    self.personality = log.LongitudinalPersonality.standard\n+\n+  def read_param(self):\n+    param_value = self.params.get('LongitudinalPersonality')\n+    if param_value is not None:",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1218870340",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 24742,
        "pr_file": "selfdrive/controls/lib/longitudinal_planner.py",
        "discussion_id": "1218870340",
        "commented_code": "@@ -57,6 +59,15 @@ def __init__(self, CP, init_v=0.0, init_a=0.0):\n     self.a_desired_trajectory = np.zeros(CONTROL_N)\n     self.j_desired_trajectory = np.zeros(CONTROL_N)\n     self.solverExecutionTime = 0.0\n+    self.params = Params()\n+    self.param_read_counter = 0\n+    self.read_param()\n+    self.personality = log.LongitudinalPersonality.standard\n+\n+  def read_param(self):\n+    param_value = self.params.get('LongitudinalPersonality')\n+    if param_value is not None:",
        "comment_created_at": "2023-06-06T04:22:29+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "probably want an else to put this in a defined state if the param exists then gets deleted",
        "pr_file_module": null
      }
    ]
  }
]