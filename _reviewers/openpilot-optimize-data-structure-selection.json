[
  {
    "discussion_id": "2004001968",
    "pr_number": 34856,
    "pr_file": "system/athena/tests/test_athenad.py",
    "created_at": "2025-03-19T18:31:33+00:00",
    "commented_code": "self.params.put(k, v)\n     self.params.put_bool(\"GsmMetered\", True)\n \n-    athenad.upload_queue = queue.Queue()\n+    athenad.upload_queue.queue.clear()",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "2004001968",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34856,
        "pr_file": "system/athena/tests/test_athenad.py",
        "discussion_id": "2004001968",
        "commented_code": "@@ -76,7 +76,7 @@ def setup_method(self):\n       self.params.put(k, v)\n     self.params.put_bool(\"GsmMetered\", True)\n \n-    athenad.upload_queue = queue.Queue()\n+    athenad.upload_queue.queue.clear()",
        "comment_created_at": "2025-03-19T18:31:33+00:00",
        "comment_author": "incognitojam",
        "comment_body": "I wouldn't touch this :sweat_smile: unless this broke something?",
        "pr_file_module": null
      },
      {
        "comment_id": "2004021389",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34856,
        "pr_file": "system/athena/tests/test_athenad.py",
        "discussion_id": "2004001968",
        "commented_code": "@@ -76,7 +76,7 @@ def setup_method(self):\n       self.params.put(k, v)\n     self.params.put_bool(\"GsmMetered\", True)\n \n-    athenad.upload_queue = queue.Queue()\n+    athenad.upload_queue.queue.clear()",
        "comment_created_at": "2025-03-19T18:43:10+00:00",
        "comment_author": "greatgitsby",
        "comment_body": "it breaks because we're overwriting the priority queue with a regular queue. i made it impl agnostic. i can just set to PriorityQueue",
        "pr_file_module": null
      },
      {
        "comment_id": "2004077074",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34856,
        "pr_file": "system/athena/tests/test_athenad.py",
        "discussion_id": "2004001968",
        "commented_code": "@@ -76,7 +76,7 @@ def setup_method(self):\n       self.params.put(k, v)\n     self.params.put_bool(\"GsmMetered\", True)\n \n-    athenad.upload_queue = queue.Queue()\n+    athenad.upload_queue.queue.clear()",
        "comment_created_at": "2025-03-19T19:01:08+00:00",
        "comment_author": "incognitojam",
        "comment_body": "ah yeah that makes more sense",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1947914916",
    "pr_number": 34549,
    "pr_file": "tools/lib/logreader.py",
    "created_at": "2025-02-08T17:43:47+00:00",
    "commented_code": "dat = bz2.decompress(dat)\n     elif ext == \".zst\" or dat.startswith(b'\\x28\\xB5\\x2F\\xFD'):\n       # https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md#zstandard-frames\n-      dat = zstd.decompress(dat)\n+      dat = decompress_stream(dat)",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1947914916",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34549,
        "pr_file": "tools/lib/logreader.py",
        "discussion_id": "1947914916",
        "commented_code": "@@ -58,7 +66,7 @@ def __init__(self, fn, canonicalize=True, only_union_types=False, sort_by_time=F\n       dat = bz2.decompress(dat)\n     elif ext == \".zst\" or dat.startswith(b'\\x28\\xB5\\x2F\\xFD'):\n       # https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md#zstandard-frames\n-      dat = zstd.decompress(dat)\n+      dat = decompress_stream(dat)",
        "comment_created_at": "2025-02-08T17:43:47+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "why did this change?",
        "pr_file_module": null
      },
      {
        "comment_id": "1947922017",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34549,
        "pr_file": "tools/lib/logreader.py",
        "discussion_id": "1947914916",
        "commented_code": "@@ -58,7 +66,7 @@ def __init__(self, fn, canonicalize=True, only_union_types=False, sort_by_time=F\n       dat = bz2.decompress(dat)\n     elif ext == \".zst\" or dat.startswith(b'\\x28\\xB5\\x2F\\xFD'):\n       # https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md#zstandard-frames\n-      dat = zstd.decompress(dat)\n+      dat = decompress_stream(dat)",
        "comment_created_at": "2025-02-08T18:09:08+00:00",
        "comment_author": "deanlee",
        "comment_body": "The `zstd.decompress` function cannot  decode zstd files written in streaming mode, raising the error: \r\n\r\n> zstd.ZstdError: could not determine content size in frame header. \r\n\r\nThis happens because streaming mode does not include the original content size in the frame header. it's necessary to use zstd's streaming decompression, which processes data incrementally without requiring the content size upfront.",
        "pr_file_module": null
      },
      {
        "comment_id": "1948623273",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34549,
        "pr_file": "tools/lib/logreader.py",
        "discussion_id": "1947914916",
        "commented_code": "@@ -58,7 +66,7 @@ def __init__(self, fn, canonicalize=True, only_union_types=False, sort_by_time=F\n       dat = bz2.decompress(dat)\n     elif ext == \".zst\" or dat.startswith(b'\\x28\\xB5\\x2F\\xFD'):\n       # https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md#zstandard-frames\n-      dat = zstd.decompress(dat)\n+      dat = decompress_stream(dat)",
        "comment_created_at": "2025-02-10T08:53:35+00:00",
        "comment_author": "sshane",
        "comment_body": "Is the decompression speed roughly the same? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1949456015",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34549,
        "pr_file": "tools/lib/logreader.py",
        "discussion_id": "1947914916",
        "commented_code": "@@ -58,7 +66,7 @@ def __init__(self, fn, canonicalize=True, only_union_types=False, sort_by_time=F\n       dat = bz2.decompress(dat)\n     elif ext == \".zst\" or dat.startswith(b'\\x28\\xB5\\x2F\\xFD'):\n       # https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md#zstandard-frames\n-      dat = zstd.decompress(dat)\n+      dat = decompress_stream(dat)",
        "comment_created_at": "2025-02-10T16:20:34+00:00",
        "comment_author": "deanlee",
        "comment_body": "zstd.decompress() is slightly faster because it can read the decompressed size from the frame header, allowing it to allocate the buffer in one go.\r\n\r\nOn the other hand, stream_reader().read() works by processing the data in chunks and then combining them at the end. While it's a bit slower since it doesn't know the decompressed size upfront, it\u2019s still quite efficient. https://github.com/indygreg/python-zstandard/blob/9eb56949b1764a166845e065542690942a3203d3/c-ext/decompressionreader.c#L543\r\n\r\nOverall, even though we lose a bit of speed, the streaming approach is still better because it reduces log sizes, saves space, and is more efficient with memory.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1744612632",
    "pr_number": 33470,
    "pr_file": "selfdrive/locationd/locationd.py",
    "created_at": "2024-09-04T23:20:58+00:00",
    "commented_code": "self.debug = debug\n \n-    self.posenet_stds = [POSENET_STD_INITIAL_VALUE] * (POSENET_STD_HIST_HALF * 2)\n+    self.posenet_stds = np.array([POSENET_STD_INITIAL_VALUE] * (POSENET_STD_HIST_HALF * 2))",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1744612632",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 33470,
        "pr_file": "selfdrive/locationd/locationd.py",
        "discussion_id": "1744612632",
        "commented_code": "@@ -50,7 +50,7 @@ def __init__(self, debug: bool):\n \n     self.debug = debug\n \n-    self.posenet_stds = [POSENET_STD_INITIAL_VALUE] * (POSENET_STD_HIST_HALF * 2)\n+    self.posenet_stds = np.array([POSENET_STD_INITIAL_VALUE] * (POSENET_STD_HIST_HALF * 2))",
        "comment_created_at": "2024-09-04T23:20:58+00:00",
        "comment_author": "sshane",
        "comment_body": "is a `deque` faster here?",
        "pr_file_module": null
      },
      {
        "comment_id": "1744793515",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 33470,
        "pr_file": "selfdrive/locationd/locationd.py",
        "discussion_id": "1744612632",
        "commented_code": "@@ -50,7 +50,7 @@ def __init__(self, debug: bool):\n \n     self.debug = debug\n \n-    self.posenet_stds = [POSENET_STD_INITIAL_VALUE] * (POSENET_STD_HIST_HALF * 2)\n+    self.posenet_stds = np.array([POSENET_STD_INITIAL_VALUE] * (POSENET_STD_HIST_HALF * 2))",
        "comment_created_at": "2024-09-05T04:43:32+00:00",
        "comment_author": "deanlee",
        "comment_body": "deque does not support slicing, so it cannot be used directly with :\r\n\r\n```\r\nold_mean = np.mean(self.posenet_stds[:POSENET_STD_HIST_HALF])\r\nnew_mean = np.mean(self.posenet_stds[POSENET_STD_HIST_HALF:])\r\n```\r\nAdditionally, using np.array for posenet_stds can improve np.mean performance because passing a python list to np.mean requires numpy to internally convert the list to a np.array.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1628593354",
    "pr_number": 32590,
    "pr_file": "selfdrive/car/interfaces.py",
    "created_at": "2024-06-06T00:43:05+00:00",
    "commented_code": "TORQUE_OVERRIDE_PATH = os.path.join(BASEDIR, 'selfdrive/car/torque_data/override.toml')\n TORQUE_SUBSTITUTE_PATH = os.path.join(BASEDIR, 'selfdrive/car/torque_data/substitute.toml')\n \n+CAR_BRANDS = sorted(entry.name for entry in os.scandir(BASEDIR + '/selfdrive/car') if entry.is_dir())",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1628593354",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32590,
        "pr_file": "selfdrive/car/interfaces.py",
        "discussion_id": "1628593354",
        "commented_code": "@@ -33,6 +33,8 @@\n TORQUE_OVERRIDE_PATH = os.path.join(BASEDIR, 'selfdrive/car/torque_data/override.toml')\n TORQUE_SUBSTITUTE_PATH = os.path.join(BASEDIR, 'selfdrive/car/torque_data/substitute.toml')\n \n+CAR_BRANDS = sorted(entry.name for entry in os.scandir(BASEDIR + '/selfdrive/car') if entry.is_dir())",
        "comment_created_at": "2024-06-06T00:43:05+00:00",
        "comment_author": "sshane",
        "comment_body": "Can we not use car.values.BRANDS?",
        "pr_file_module": null
      },
      {
        "comment_id": "1629032616",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32590,
        "pr_file": "selfdrive/car/interfaces.py",
        "discussion_id": "1628593354",
        "commented_code": "@@ -33,6 +33,8 @@\n TORQUE_OVERRIDE_PATH = os.path.join(BASEDIR, 'selfdrive/car/torque_data/override.toml')\n TORQUE_SUBSTITUTE_PATH = os.path.join(BASEDIR, 'selfdrive/car/torque_data/substitute.toml')\n \n+CAR_BRANDS = sorted(entry.name for entry in os.scandir(BASEDIR + '/selfdrive/car') if entry.is_dir())",
        "comment_created_at": "2024-06-06T08:40:08+00:00",
        "comment_author": "deanlee",
        "comment_body": "I'm not quit sure how to correctly retrieve the brand name from car.values.BRANDS. Would it be something like this?\r\n```\r\nimport inspect\r\n...\r\nfor brand in BRANDS:\r\n    try:\r\n      brand_name = inspect.getmodule(brand).__name__.split('.')[-2]\r\n      brand_values = __import__(f'openpilot.selfdrive.car.{brand_name}.{INTERFACE_ATTR_FILE.get(attr, \"values\")}', fromlist=[attr])\r\n      ...\r\n```\r\n\r\nbut the inspect.getmodule is expensive,  slower compared to simple I/O operations.",
        "pr_file_module": null
      },
      {
        "comment_id": "1629296197",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32590,
        "pr_file": "selfdrive/car/interfaces.py",
        "discussion_id": "1628593354",
        "commented_code": "@@ -33,6 +33,8 @@\n TORQUE_OVERRIDE_PATH = os.path.join(BASEDIR, 'selfdrive/car/torque_data/override.toml')\n TORQUE_SUBSTITUTE_PATH = os.path.join(BASEDIR, 'selfdrive/car/torque_data/substitute.toml')\n \n+CAR_BRANDS = sorted(entry.name for entry in os.scandir(BASEDIR + '/selfdrive/car') if entry.is_dir())",
        "comment_created_at": "2024-06-06T11:02:03+00:00",
        "comment_author": "sshane",
        "comment_body": "How about `__module__`? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1629331629",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32590,
        "pr_file": "selfdrive/car/interfaces.py",
        "discussion_id": "1628593354",
        "commented_code": "@@ -33,6 +33,8 @@\n TORQUE_OVERRIDE_PATH = os.path.join(BASEDIR, 'selfdrive/car/torque_data/override.toml')\n TORQUE_SUBSTITUTE_PATH = os.path.join(BASEDIR, 'selfdrive/car/torque_data/substitute.toml')\n \n+CAR_BRANDS = sorted(entry.name for entry in os.scandir(BASEDIR + '/selfdrive/car') if entry.is_dir())",
        "comment_created_at": "2024-06-06T11:22:00+00:00",
        "comment_author": "deanlee",
        "comment_body": "Ahhhh, got it!",
        "pr_file_module": null
      }
    ]
  }
]