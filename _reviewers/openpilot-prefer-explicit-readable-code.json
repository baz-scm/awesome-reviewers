[
  {
    "discussion_id": "1752644278",
    "pr_number": 33521,
    "pr_file": "selfdrive/selfdrived/events.py",
    "created_at": "2024-09-10T19:53:21+00:00",
    "commented_code": "bisect.insort(self.static_events, event_name)\n     bisect.insort(self.events, event_name)\n \n+    self.event_counters[event_name] += 1\n+\n   def clear(self) -> None:\n-    self.event_counters = {k: (v + 1 if k in self.events else 0) for k, v in self.event_counters.items()}\n+     # Get events no longer active",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1752644278",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 33521,
        "pr_file": "selfdrive/selfdrived/events.py",
        "discussion_id": "1752644278",
        "commented_code": "@@ -65,9 +67,20 @@ def add(self, event_name: int, static: bool=False) -> None:\n       bisect.insort(self.static_events, event_name)\n     bisect.insort(self.events, event_name)\n \n+    self.event_counters[event_name] += 1\n+\n   def clear(self) -> None:\n-    self.event_counters = {k: (v + 1 if k in self.events else 0) for k, v in self.event_counters.items()}\n+     # Get events no longer active",
        "comment_created_at": "2024-09-10T19:53:21+00:00",
        "comment_author": "sshane",
        "comment_body": "This looks immediately more confusing to read, anything else we can try? Why not one loop and an if?",
        "pr_file_module": null
      },
      {
        "comment_id": "1752665635",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 33521,
        "pr_file": "selfdrive/selfdrived/events.py",
        "discussion_id": "1752644278",
        "commented_code": "@@ -65,9 +67,20 @@ def add(self, event_name: int, static: bool=False) -> None:\n       bisect.insort(self.static_events, event_name)\n     bisect.insort(self.events, event_name)\n \n+    self.event_counters[event_name] += 1\n+\n   def clear(self) -> None:\n-    self.event_counters = {k: (v + 1 if k in self.events else 0) for k, v in self.event_counters.items()}\n+     # Get events no longer active",
        "comment_created_at": "2024-09-10T20:12:30+00:00",
        "comment_author": "deanlee",
        "comment_body": "A more common and readable approach is to loop through event_counters and check if event_name is not in the events list. The code snippet would look like this:\r\n```\r\nfor event_name in self.event_counters:\r\n    if event_name not in self.events:\r\n        self.event_counters[event_name] = 0\r\n```\r\nHowever, this approach is significantly less efficient than the version in this PR and might not offer much improvement over the master version. I'll consider if there's a better solution.",
        "pr_file_module": null
      },
      {
        "comment_id": "1817720472",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 33521,
        "pr_file": "selfdrive/selfdrived/events.py",
        "discussion_id": "1752644278",
        "commented_code": "@@ -65,9 +67,20 @@ def add(self, event_name: int, static: bool=False) -> None:\n       bisect.insort(self.static_events, event_name)\n     bisect.insort(self.events, event_name)\n \n+    self.event_counters[event_name] += 1\n+\n   def clear(self) -> None:\n-    self.event_counters = {k: (v + 1 if k in self.events else 0) for k, v in self.event_counters.items()}\n+     # Get events no longer active",
        "comment_created_at": "2024-10-26T09:03:21+00:00",
        "comment_author": "deanlee",
        "comment_body": "I can't think of a better solution for now. I've improved the variable name and comments to make the code easier to understand. The logic is straightforward: maintain a list of previously active events, compare it with the current active events, and remove those that are no longer active.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2150840244",
    "pr_number": 35540,
    "pr_file": "selfdrive/ui/layouts/settings/developer.py",
    "created_at": "2025-06-16T20:41:02+00:00",
    "commented_code": "-from openpilot.system.ui.lib.list_view import ListView, ToggleItem\n+from cereal import car\n+import cereal.messaging as messaging\n from openpilot.common.params import Params\n+from openpilot.selfdrive.ui.ui_state import ui_state\n from openpilot.selfdrive.ui.widgets.ssh_key import SshKeyItem\n-from openpilot.system.ui.lib.widget import Widget\n+from openpilot.system.ui.lib.application import gui_app\n+from openpilot.system.ui.lib.list_view import ListView, ToggleItem\n+from openpilot.system.ui.lib.widget import Widget, DialogResult\n+from openpilot.system.ui.widgets.confirm_dialog import confirm_dialog\n+\n \n # Description constants",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "2150840244",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 35540,
        "pr_file": "selfdrive/ui/layouts/settings/developer.py",
        "discussion_id": "2150840244",
        "commented_code": "@@ -1,59 +1,114 @@\n-from openpilot.system.ui.lib.list_view import ListView, ToggleItem\n+from cereal import car\n+import cereal.messaging as messaging\n from openpilot.common.params import Params\n+from openpilot.selfdrive.ui.ui_state import ui_state\n from openpilot.selfdrive.ui.widgets.ssh_key import SshKeyItem\n-from openpilot.system.ui.lib.widget import Widget\n+from openpilot.system.ui.lib.application import gui_app\n+from openpilot.system.ui.lib.list_view import ListView, ToggleItem\n+from openpilot.system.ui.lib.widget import Widget, DialogResult\n+from openpilot.system.ui.widgets.confirm_dialog import confirm_dialog\n+\n \n # Description constants",
        "comment_created_at": "2025-06-16T20:41:02+00:00",
        "comment_author": "sshane",
        "comment_body": "one space between imports, two spaces between functions and classes",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2069452444",
    "pr_number": 35071,
    "pr_file": "tools/clip/run.py",
    "created_at": "2025-04-30T21:14:59+00:00",
    "commented_code": "+#!/usr/bin/env python3\n+\n+from argparse import ArgumentParser, ArgumentTypeError\n+from cereal.messaging import SubMaster",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "2069452444",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 35071,
        "pr_file": "tools/clip/run.py",
        "discussion_id": "2069452444",
        "commented_code": "@@ -0,0 +1,226 @@\n+#!/usr/bin/env python3\n+\n+from argparse import ArgumentParser, ArgumentTypeError\n+from cereal.messaging import SubMaster",
        "comment_created_at": "2025-04-30T21:14:59+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "stdlib + 3rd party imports go on top, new line, then openpilot imports",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1912610719",
    "pr_number": 34371,
    "pr_file": "selfdrive/car/cruise.py",
    "created_at": "2025-01-13T02:39:50+00:00",
    "commented_code": "from cereal import car\n from openpilot.common.conversions import Conversions as CV\n-from openpilot.common.numpy_fast import clip\n+import numpy as np",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1912610719",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34371,
        "pr_file": "selfdrive/car/cruise.py",
        "discussion_id": "1912610719",
        "commented_code": "@@ -2,7 +2,7 @@\n \n from cereal import car\n from openpilot.common.conversions import Conversions as CV\n-from openpilot.common.numpy_fast import clip\n+import numpy as np",
        "comment_created_at": "2025-01-13T02:39:50+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "third party imports should be on top with the std lib",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "780181731",
    "pr_number": 23435,
    "pr_file": "selfdrive/controls/controlsd.py",
    "created_at": "2022-01-07T10:38:39+00:00",
    "commented_code": "self.pm.send('controlsState', dat)\n \n     # carState\n-    car_events = self.events.to_msg()\n+    if events_changed := (self.events.names != self.events_prev):",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "780181731",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 23435,
        "pr_file": "selfdrive/controls/controlsd.py",
        "discussion_id": "780181731",
        "commented_code": "@@ -685,19 +686,21 @@ def publish_logs(self, CS, start_time, actuators, lac_log):\n     self.pm.send('controlsState', dat)\n \n     # carState\n-    car_events = self.events.to_msg()\n+    if events_changed := (self.events.names != self.events_prev):",
        "comment_created_at": "2022-01-07T10:38:39+00:00",
        "comment_author": "pd0wm",
        "comment_body": "The walrus operator has it's valid uses, but don't think this makes things more clear. Just write this as two lines.\r\n\r\n```suggestion\r\n    events_changed = self.events.names != self.events_prev\r\n    if events_changed:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1602131259",
    "pr_number": 32331,
    "pr_file": "selfdrive/car/tesla/carcontroller.py",
    "created_at": "2024-05-15T19:12:56+00:00",
    "commented_code": "# Longitudinal control (in sync with stock message, about 40Hz)\n     if self.CP.openpilotLongitudinalControl:\n+      acc_state = CS.das_control[\"DAS_accState\"]\n       target_accel = actuators.accel\n       target_speed = max(CS.out.vEgo + (target_accel * CarControllerParams.ACCEL_TO_SPEED_MULTIPLIER), 0)\n       max_accel = 0 if target_accel < 0 else target_accel\n       min_accel = 0 if target_accel > 0 else target_accel\n \n-      while len(CS.das_control_counters) > 0:\n-        can_sends.extend(self.tesla_can.create_longitudinal_commands(CS.acc_state, target_speed, min_accel, max_accel, CS.das_control_counters.popleft()))\n+      counter = CS.das_control[\"DAS_controlCounter\"]\n+      can_sends.append(self.tesla_can.create_longitudinal_commands(acc_state, target_speed, min_accel, max_accel, counter))\n \n     # Cancel on user steering override, since there is no steering torque blending\n     if hands_on_fault:\n       pcm_cancel_cmd = True\n \n-    if self.frame % 10 == 0 and pcm_cancel_cmd:\n-      # Spam every possible counter value, otherwise it might not be accepted\n-      for counter in range(16):\n-        can_sends.append(self.tesla_can.create_action_request(CS.msg_stw_actn_req, pcm_cancel_cmd, CANBUS.chassis, counter))\n-        can_sends.append(self.tesla_can.create_action_request(CS.msg_stw_actn_req, pcm_cancel_cmd, CANBUS.autopilot_chassis, counter))\n+    # Sent cancel request only if ACC is enabled\n+    if self.frame % 10 == 0 and pcm_cancel_cmd and CS.acc_enabled:\n+      counter = int(CS.sccm_right_stalk[\"SCCM_rightStalkCounter\"] + 1) % 16\n+      can_sends.append(self.tesla_can.right_stalk_press(counter, 1))  # half up (cancel acc)\n+      can_sends.append(self.tesla_can.right_stalk_press((counter + 1) % 16, 0))  # to prevent neutral gear warning",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1602131259",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32331,
        "pr_file": "selfdrive/car/tesla/carcontroller.py",
        "discussion_id": "1602131259",
        "commented_code": "@@ -40,23 +41,24 @@ def update(self, CC, CS, now_nanos):\n \n     # Longitudinal control (in sync with stock message, about 40Hz)\n     if self.CP.openpilotLongitudinalControl:\n+      acc_state = CS.das_control[\"DAS_accState\"]\n       target_accel = actuators.accel\n       target_speed = max(CS.out.vEgo + (target_accel * CarControllerParams.ACCEL_TO_SPEED_MULTIPLIER), 0)\n       max_accel = 0 if target_accel < 0 else target_accel\n       min_accel = 0 if target_accel > 0 else target_accel\n \n-      while len(CS.das_control_counters) > 0:\n-        can_sends.extend(self.tesla_can.create_longitudinal_commands(CS.acc_state, target_speed, min_accel, max_accel, CS.das_control_counters.popleft()))\n+      counter = CS.das_control[\"DAS_controlCounter\"]\n+      can_sends.append(self.tesla_can.create_longitudinal_commands(acc_state, target_speed, min_accel, max_accel, counter))\n \n     # Cancel on user steering override, since there is no steering torque blending\n     if hands_on_fault:\n       pcm_cancel_cmd = True\n \n-    if self.frame % 10 == 0 and pcm_cancel_cmd:\n-      # Spam every possible counter value, otherwise it might not be accepted\n-      for counter in range(16):\n-        can_sends.append(self.tesla_can.create_action_request(CS.msg_stw_actn_req, pcm_cancel_cmd, CANBUS.chassis, counter))\n-        can_sends.append(self.tesla_can.create_action_request(CS.msg_stw_actn_req, pcm_cancel_cmd, CANBUS.autopilot_chassis, counter))\n+    # Sent cancel request only if ACC is enabled\n+    if self.frame % 10 == 0 and pcm_cancel_cmd and CS.acc_enabled:\n+      counter = int(CS.sccm_right_stalk[\"SCCM_rightStalkCounter\"] + 1) % 16\n+      can_sends.append(self.tesla_can.right_stalk_press(counter, 1))  # half up (cancel acc)\n+      can_sends.append(self.tesla_can.right_stalk_press((counter + 1) % 16, 0))  # to prevent neutral gear warning",
        "comment_created_at": "2024-05-15T19:12:56+00:00",
        "comment_author": "robbederks",
        "comment_body": "little weird that it's `% 16` here again, let's make the initial counter variable be the actual current counter, and then `+1` and `+2` with the `% 16` on each line",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1714444741",
    "pr_number": 33273,
    "pr_file": "selfdrive/debug/print_docs_diff.py",
    "created_at": "2024-08-12T22:48:01+00:00",
    "commented_code": "#!/usr/bin/env python3\n import argparse\n-from collections import defaultdict\n-import difflib\n-import pickle\n-\n-from openpilot.selfdrive.car.docs import get_all_car_docs\n-from openpilot.selfdrive.car.docs_definitions import Column\n-\n-FOOTNOTE_TAG = \"<sup>{}</sup>\"\n-STAR_ICON = '<a href=\"##\"><img valign=\"top\" ' + \\\n-            'src=\"https://media.githubusercontent.com/media/commaai/openpilot/master/docs/assets/icon-star-{}.svg\" width=\"22\" /></a>'\n-VIDEO_ICON = '<a href=\"{}\" target=\"_blank\">' + \\\n-             '<img height=\"18px\" src=\"https://media.githubusercontent.com/media/commaai/openpilot/master/docs/assets/icon-youtube.svg\"></img></a>'\n-COLUMNS = \"|\" + \"|\".join([column.value for column in Column]) + \"|\"\n-COLUMN_HEADER = \"|---|---|---|{}|\".format(\"|\".join([\":---:\"] * (len(Column) - 3)))\n-ARROW_SYMBOL = \"\u27a1\ufe0f\"\n-\n-\n-def load_base_car_docs(path):\n-  with open(path, \"rb\") as f:\n-    return pickle.load(f)\n+import requests\n+import re\n \n+ARROW_SYMBOL = \"\u27a1\ufe0f\"\n \n-def match_cars(base_cars, new_cars):\n-  changes = []\n-  additions = []\n-  for new in new_cars:\n-    # Addition if no close matches or close match already used\n-    # Change if close match and not already used\n-    matches = difflib.get_close_matches(new.name, [b.name for b in base_cars], cutoff=0.)\n-    if not len(matches) or matches[0] in [c[1].name for c in changes]:\n-      additions.append(new)\n-    else:\n-      changes.append((new, next(car for car in base_cars if car.name == matches[0])))\n-\n-  # Removal if base car not in changes\n-  removals = [b for b in base_cars if b.name not in [c[1].name for c in changes]]\n-  return changes, additions, removals\n \n+def get_cars_docs_in_markdown(docs_content):\n+  def _parse_markdown_table(md_table):\n+    lines = md_table.strip().split('\n')\n+    headers = [h.strip() for h in lines[0].split('|') if h]\n+    assert len(headers) == len(set(headers)), 'Duplicate headers found in the markdown table'\n+    return headers, [dict(zip(headers, [cell.strip() for cell in line.split('|')[1:-1]], strict=True)) for line in lines[2:]]\n \n-def build_column_diff(base_car, new_car):\n-  row_builder = []\n-  for column in Column:\n-    base_column = base_car.get_column(column, STAR_ICON, VIDEO_ICON, FOOTNOTE_TAG)\n-    new_column = new_car.get_column(column, STAR_ICON, VIDEO_ICON, FOOTNOTE_TAG)\n+  match = re.search(r\"(\\d+)\\s+supported\\s+cars\\s*\n([\\s\\S]*?\\|.*?\\|[\\s\\S]*?\\|[-:]+\\|[\\s\\S]*?\n(?:[^\\S\\r\n]*\\S.*\n)*\n?)\", docs_content, re.IGNORECASE)\n+  if not match:\n+    raise RuntimeError(\"Couldn't find the car docs Markdown table.\")\n+  num_cars = int(match.group(1))\n+  md_table = match.group(2).strip()",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1714444741",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 33273,
        "pr_file": "selfdrive/debug/print_docs_diff.py",
        "discussion_id": "1714444741",
        "commented_code": "@@ -1,120 +1,93 @@\n #!/usr/bin/env python3\n import argparse\n-from collections import defaultdict\n-import difflib\n-import pickle\n-\n-from openpilot.selfdrive.car.docs import get_all_car_docs\n-from openpilot.selfdrive.car.docs_definitions import Column\n-\n-FOOTNOTE_TAG = \"<sup>{}</sup>\"\n-STAR_ICON = '<a href=\"##\"><img valign=\"top\" ' + \\\n-            'src=\"https://media.githubusercontent.com/media/commaai/openpilot/master/docs/assets/icon-star-{}.svg\" width=\"22\" /></a>'\n-VIDEO_ICON = '<a href=\"{}\" target=\"_blank\">' + \\\n-             '<img height=\"18px\" src=\"https://media.githubusercontent.com/media/commaai/openpilot/master/docs/assets/icon-youtube.svg\"></img></a>'\n-COLUMNS = \"|\" + \"|\".join([column.value for column in Column]) + \"|\"\n-COLUMN_HEADER = \"|---|---|---|{}|\".format(\"|\".join([\":---:\"] * (len(Column) - 3)))\n-ARROW_SYMBOL = \"\u27a1\ufe0f\"\n-\n-\n-def load_base_car_docs(path):\n-  with open(path, \"rb\") as f:\n-    return pickle.load(f)\n+import requests\n+import re\n \n+ARROW_SYMBOL = \"\u27a1\ufe0f\"\n \n-def match_cars(base_cars, new_cars):\n-  changes = []\n-  additions = []\n-  for new in new_cars:\n-    # Addition if no close matches or close match already used\n-    # Change if close match and not already used\n-    matches = difflib.get_close_matches(new.name, [b.name for b in base_cars], cutoff=0.)\n-    if not len(matches) or matches[0] in [c[1].name for c in changes]:\n-      additions.append(new)\n-    else:\n-      changes.append((new, next(car for car in base_cars if car.name == matches[0])))\n-\n-  # Removal if base car not in changes\n-  removals = [b for b in base_cars if b.name not in [c[1].name for c in changes]]\n-  return changes, additions, removals\n \n+def get_cars_docs_in_markdown(docs_content):\n+  def _parse_markdown_table(md_table):\n+    lines = md_table.strip().split('\\n')\n+    headers = [h.strip() for h in lines[0].split('|') if h]\n+    assert len(headers) == len(set(headers)), 'Duplicate headers found in the markdown table'\n+    return headers, [dict(zip(headers, [cell.strip() for cell in line.split('|')[1:-1]], strict=True)) for line in lines[2:]]\n \n-def build_column_diff(base_car, new_car):\n-  row_builder = []\n-  for column in Column:\n-    base_column = base_car.get_column(column, STAR_ICON, VIDEO_ICON, FOOTNOTE_TAG)\n-    new_column = new_car.get_column(column, STAR_ICON, VIDEO_ICON, FOOTNOTE_TAG)\n+  match = re.search(r\"(\\d+)\\s+supported\\s+cars\\s*\\n([\\s\\S]*?\\|.*?\\|[\\s\\S]*?\\|[-:]+\\|[\\s\\S]*?\\n(?:[^\\S\\r\\n]*\\S.*\\n)*\\n?)\", docs_content, re.IGNORECASE)\n+  if not match:\n+    raise RuntimeError(\"Couldn't find the car docs Markdown table.\")\n+  num_cars = int(match.group(1))\n+  md_table = match.group(2).strip()",
        "comment_created_at": "2024-08-12T22:48:01+00:00",
        "comment_author": "sshane",
        "comment_body": "```suggestion\r\n  num_cars, md_table = match.groups()\r\n```\r\n\r\nI like unpacking in one line for the best readability, and you know immediately where the usage of `match` ends.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1367714718",
    "pr_number": 29771,
    "pr_file": "selfdrive/car/hyundai/carstate.py",
    "created_at": "2023-10-21T11:32:15+00:00",
    "commented_code": "ret.parkingBrake = cp.vl[\"TCS13\"][\"PBRAKE_ACT\"] == 1\n     ret.accFaulted = cp.vl[\"TCS13\"][\"ACCEnable\"] != 0  # 0 ACC CONTROL ENABLED, 1-3 ACC CONTROL DISABLED\n \n-    if self.CP.carFingerprint in (HYBRID_CAR | EV_CAR):\n-      if self.CP.carFingerprint in HYBRID_CAR:\n-        ret.gas = cp.vl[\"E_EMS11\"][\"CR_Vcu_AccPedDep_Pos\"] / 254.\n-      else:\n-        ret.gas = cp.vl[\"E_EMS11\"][\"Accel_Pedal_Pos\"] / 254.\n+    if self.CP.carFingerprint in (EV_CAR | HYBRID_CAR | FCEV_CAR):\n+      gas_msg = \"ACCELERATOR\" if self.CP.carFingerprint in FCEV_CAR else \"E_EMS11\"\n+      gas_sig = \"Accel_Pedal_Pos\" if self.CP.carFingerprint in EV_CAR else \\\n+                \"ACCELERATOR_PEDAL\" if self.CP.carFingerprint in FCEV_CAR else \\\n+                \"CR_Vcu_AccPedDep_Pos\"\n+      ret.gas = cp.vl[gas_msg][gas_sig] / 254.",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1367714718",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 29771,
        "pr_file": "selfdrive/car/hyundai/carstate.py",
        "discussion_id": "1367714718",
        "commented_code": "@@ -120,11 +122,12 @@ def update(self, cp, cp_cam):\n     ret.parkingBrake = cp.vl[\"TCS13\"][\"PBRAKE_ACT\"] == 1\n     ret.accFaulted = cp.vl[\"TCS13\"][\"ACCEnable\"] != 0  # 0 ACC CONTROL ENABLED, 1-3 ACC CONTROL DISABLED\n \n-    if self.CP.carFingerprint in (HYBRID_CAR | EV_CAR):\n-      if self.CP.carFingerprint in HYBRID_CAR:\n-        ret.gas = cp.vl[\"E_EMS11\"][\"CR_Vcu_AccPedDep_Pos\"] / 254.\n-      else:\n-        ret.gas = cp.vl[\"E_EMS11\"][\"Accel_Pedal_Pos\"] / 254.\n+    if self.CP.carFingerprint in (EV_CAR | HYBRID_CAR | FCEV_CAR):\n+      gas_msg = \"ACCELERATOR\" if self.CP.carFingerprint in FCEV_CAR else \"E_EMS11\"\n+      gas_sig = \"Accel_Pedal_Pos\" if self.CP.carFingerprint in EV_CAR else \\\n+                \"ACCELERATOR_PEDAL\" if self.CP.carFingerprint in FCEV_CAR else \\\n+                \"CR_Vcu_AccPedDep_Pos\"\n+      ret.gas = cp.vl[gas_msg][gas_sig] / 254.",
        "comment_created_at": "2023-10-21T11:32:15+00:00",
        "comment_author": "sshane",
        "comment_body": "```suggestion\r\n    if self.CP.carFingerprint in (HYBRID_CAR | EV_CAR | FCEV_CAR):\r\n      if self.CP.carFingerprint in FCEV_CAR:\r\n        ret.gas = cp.vl[\"ACCELERATOR\"][\"ACCELERATOR_PEDAL\"] / 254.\r\n      elif self.CP.carFingerprint in HYBRID_CAR:\r\n        ret.gas = cp.vl[\"E_EMS11\"][\"CR_Vcu_AccPedDep_Pos\"] / 254.\r\n      else:\r\n        ret.gas = cp.vl[\"E_EMS11\"][\"Accel_Pedal_Pos\"] / 254.\r\n```\r\n\r\nI'd argue this is much easier to read",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1664776200",
    "pr_number": 32896,
    "pr_file": "selfdrive/car/honda/interface.py",
    "created_at": "2024-07-03T20:48:58+00:00",
    "commented_code": "ret.lateralParams.torqueBP, ret.lateralParams.torqueV = [[0, 3840], [0, 3840]]\n       ret.lateralTuning.pid.kpV, ret.lateralTuning.pid.kiV = [[0.2], [0.06]]\n \n-    elif candidate in (CAR.HONDA_ODYSSEY, CAR.HONDA_ODYSSEY_CHN):\n+    elif candidate in (CAR.HONDA_ODYSSEY, CAR.HONDA_ODYSSEY_CHN, CAR.HONDA_ODYSSEY_BOSCH):\n       ret.lateralTuning.pid.kpV, ret.lateralTuning.pid.kiV = [[0.28], [0.08]]\n       if candidate == CAR.HONDA_ODYSSEY_CHN:\n         ret.lateralParams.torqueBP, ret.lateralParams.torqueV = [[0, 32767], [0, 32767]]  # TODO: determine if there is a dead zone at the top end\n+      elif not ret.openpilotLongitudinalControl:\n+        ret.lateralParams.torqueBP, ret.lateralParams.torqueV = [[0, 3840], [0, 3840]]  # clipped by radar",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1664776200",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32896,
        "pr_file": "selfdrive/car/honda/interface.py",
        "discussion_id": "1664776200",
        "commented_code": "@@ -161,10 +161,12 @@ def _get_params(ret, candidate, fingerprint, car_fw, experimental_long, docs):\n       ret.lateralParams.torqueBP, ret.lateralParams.torqueV = [[0, 3840], [0, 3840]]\n       ret.lateralTuning.pid.kpV, ret.lateralTuning.pid.kiV = [[0.2], [0.06]]\n \n-    elif candidate in (CAR.HONDA_ODYSSEY, CAR.HONDA_ODYSSEY_CHN):\n+    elif candidate in (CAR.HONDA_ODYSSEY, CAR.HONDA_ODYSSEY_CHN, CAR.HONDA_ODYSSEY_BOSCH):\n       ret.lateralTuning.pid.kpV, ret.lateralTuning.pid.kiV = [[0.28], [0.08]]\n       if candidate == CAR.HONDA_ODYSSEY_CHN:\n         ret.lateralParams.torqueBP, ret.lateralParams.torqueV = [[0, 32767], [0, 32767]]  # TODO: determine if there is a dead zone at the top end\n+      elif not ret.openpilotLongitudinalControl:\n+        ret.lateralParams.torqueBP, ret.lateralParams.torqueV = [[0, 3840], [0, 3840]]  # clipped by radar",
        "comment_created_at": "2024-07-03T20:48:58+00:00",
        "comment_author": "jyoung8607",
        "comment_body": "This may be a little too clever. I had to take time to read other Honda car port code to be sure this couldn't affect HONDA_ODYSSEY, and it might not be robust in the face of new Honda car ports being added. It would be clearer to make this conditional on HONDA_ODYSSEY_BOSCH and keep the comment.\r\n\r\n```suggestion\r\n      elif candidate == CAR.HONDA_ODYSSEY_BOSCH:\r\n        ret.lateralParams.torqueBP, ret.lateralParams.torqueV = [[0, 3840], [0, 3840]]  # clipped by radar\r\n```",
        "pr_file_module": null
      }
    ]
  }
]