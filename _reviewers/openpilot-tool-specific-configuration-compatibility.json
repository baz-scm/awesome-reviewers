[
  {
    "discussion_id": "1653818138",
    "pr_number": 32834,
    "pr_file": "pyproject.toml",
    "created_at": "2024-06-26T01:46:43+00:00",
    "commented_code": "requires-python = \">= 3.11\"\n readme = \"README.md\"\n license = {text = \"MIT License\"}\n+version = \"0.1.0\"\n+description = \"an open source driver assistance system\"\n+authors = [\"Vehicle Researcher <user@comma.ai>\"]\n+dependencies = [\n+\n+# multiple users\n+\"sounddevice >= 0\",  # micd + soundd",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1653818138",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32834,
        "pr_file": "pyproject.toml",
        "discussion_id": "1653818138",
        "commented_code": "@@ -3,6 +3,127 @@ name = \"openpilot\"\n requires-python = \">= 3.11\"\n readme = \"README.md\"\n license = {text = \"MIT License\"}\n+version = \"0.1.0\"\n+description = \"an open source driver assistance system\"\n+authors = [\"Vehicle Researcher <user@comma.ai>\"]\n+dependencies = [\n+\n+# multiple users\n+\"sounddevice >= 0\",  # micd + soundd",
        "comment_created_at": "2024-06-26T01:46:43+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "what's the >= 0 for?",
        "pr_file_module": null
      },
      {
        "comment_id": "1653819718",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32834,
        "pr_file": "pyproject.toml",
        "discussion_id": "1653818138",
        "commented_code": "@@ -3,6 +3,127 @@ name = \"openpilot\"\n requires-python = \">= 3.11\"\n readme = \"README.md\"\n license = {text = \"MIT License\"}\n+version = \"0.1.0\"\n+description = \"an open source driver assistance system\"\n+authors = [\"Vehicle Researcher <user@comma.ai>\"]\n+dependencies = [\n+\n+# multiple users\n+\"sounddevice >= 0\",  # micd + soundd",
        "comment_created_at": "2024-06-26T01:49:30+00:00",
        "comment_author": "maxime-desroches",
        "comment_body": "Since we are using the --preview mode (in order to use github packages), we have to specify at least a lower bound otherwise uv will print a warning. This is equivalent to sounddevice=\"*\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1654027581",
    "pr_number": 32834,
    "pr_file": "pyproject.toml",
    "created_at": "2024-06-26T04:49:16+00:00",
    "commented_code": "requires-python = \">= 3.11\"\n readme = \"README.md\"\n license = {text = \"MIT License\"}\n+version = \"0.1.0\"\n+description = \"an open source driver assistance system\"\n+authors = [\"Vehicle Researcher <user@comma.ai>\"]\n+dependencies = [\n+\n+# multiple users\n+\"sounddevice\",  # micd + soundd\n+\"pyserial\",     # pigeond + qcomgpsd\n+\"requests\",     # many one-off uses\n+\"sympy\",        # rednose + friends\n+\"crcmod\",       # cars + qcomgpsd\n+\"tqdm\",         # cars (fw_versions.py) on start + many one-off uses\n+\n+# hardwared\n+\"smbus2\",  # configuring amp\n+\n+# core\n+\"cffi\",\n+\"scons\",\n+\"pycapnp\",\n+\"Cython\",\n+\"setuptools\",\n+\"numpy < 2.0.0\",\n+\n+# body / webrtcd\n+\"aiohttp\",\n+\"aiortc\",\n+\"pyaudio\",\n+\n+# panda\n+\"libusb1\",\n+\"spidev; platform_system == 'Linux'\",\n+\n+# modeld\n+\"onnx >= 1.14.0\",\n+\"onnxruntime >=1.16.3; platform_system == 'Linux' and platform_machine == 'aarch64'\",\n+\"onnxruntime-gpu >=1.16.3; platform_system == 'Linux' and platform_machine == 'x86_64'\",\n+\n+# logging\n+\"pyzmq\",\n+\"sentry-sdk\",\n+\n+# athena\n+\"PyJWT\",\n+\"json-rpc\",\n+\"websocket_client\",\n+\n+# acados deps\n+\"casadi\",\n+\"future-fstrings\",\n+\n+# these should be removed\n+\"psutil\",\n+\"pycryptodome\",  # used in updated/casync, panda, body, and a test\n+\n+#logreader\n+\"zstd\",\n+]\n+\n+[project.optional-dependencies]\n+docs = [\n+  \"Jinja2\",\n+  \"sphinx\",\n+  \"sphinx-rtd-theme\",\n+  \"sphinx-sitemap\"\n+]\n+\n+testing = [\n+  \"coverage\",\n+  \"hypothesis ==6.47.*\",\n+  \"mypy\",\n+  \"pre-commit\",\n+  \"pytest\",\n+  \"pytest-cov\",\n+  \"pytest-cpp\",\n+  \"pytest-subtests\",\n+  \"pytest-xdist\",\n+  \"pytest-timeout\",\n+  \"pytest-randomly\",\n+  \"pytest-asyncio\",\n+  \"pytest-mock\",\n+  \"pytest-repeat\",\n+  \"ruff\"\n+]\n+\n+dev = [\n+\"av\",\n+\"azure-identity\",\n+\"azure-storage-blob\",\n+\"breathe\",\n+\"control\",\n+\"dictdiffer\",\n+\"flaky\",\n+\"inputs\",\n+\"lru-dict\",\n+\"matplotlib\",\n+\"metadrive-simulator; platform_machine != 'aarch64'\",\n+\"mpld3\",\n+\"myst-parser\",\n+\"natsort\",\n+\"opencv-python-headless\",\n+\"parameterized >=0.8, <0.9\",\n+#pprofile = \"*\"\n+\"pyautogui\",\n+\"pygame < 2.6.0\", # TODO: unpin when they release a prebuilt wheel\n+\"pyopencl; platform_machine != 'aarch64'\",  # broken on arm64\n+\"pywinctl\",\n+\"pyprof2calltree\",\n+\"rerun-sdk\",\n+\"tabulate\",\n+\"types-requests\",\n+\"types-tabulate\",\n+\n+# this is only pinned since 5.15.11 is broken\n+\"pyqt5 ==5.15.2; platform_machine == 'x86_64'\", # no aarch64 wheels for macOS/linux\n+\n+]\n+\n+[tool.uv.sources]",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1654027581",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32834,
        "pr_file": "pyproject.toml",
        "discussion_id": "1654027581",
        "commented_code": "@@ -3,6 +3,126 @@ name = \"openpilot\"\n requires-python = \">= 3.11\"\n readme = \"README.md\"\n license = {text = \"MIT License\"}\n+version = \"0.1.0\"\n+description = \"an open source driver assistance system\"\n+authors = [\"Vehicle Researcher <user@comma.ai>\"]\n+dependencies = [\n+\n+# multiple users\n+\"sounddevice\",  # micd + soundd\n+\"pyserial\",     # pigeond + qcomgpsd\n+\"requests\",     # many one-off uses\n+\"sympy\",        # rednose + friends\n+\"crcmod\",       # cars + qcomgpsd\n+\"tqdm\",         # cars (fw_versions.py) on start + many one-off uses\n+\n+# hardwared\n+\"smbus2\",  # configuring amp\n+\n+# core\n+\"cffi\",\n+\"scons\",\n+\"pycapnp\",\n+\"Cython\",\n+\"setuptools\",\n+\"numpy < 2.0.0\",\n+\n+# body / webrtcd\n+\"aiohttp\",\n+\"aiortc\",\n+\"pyaudio\",\n+\n+# panda\n+\"libusb1\",\n+\"spidev; platform_system == 'Linux'\",\n+\n+# modeld\n+\"onnx >= 1.14.0\",\n+\"onnxruntime >=1.16.3; platform_system == 'Linux' and platform_machine == 'aarch64'\",\n+\"onnxruntime-gpu >=1.16.3; platform_system == 'Linux' and platform_machine == 'x86_64'\",\n+\n+# logging\n+\"pyzmq\",\n+\"sentry-sdk\",\n+\n+# athena\n+\"PyJWT\",\n+\"json-rpc\",\n+\"websocket_client\",\n+\n+# acados deps\n+\"casadi\",\n+\"future-fstrings\",\n+\n+# these should be removed\n+\"psutil\",\n+\"pycryptodome\",  # used in updated/casync, panda, body, and a test\n+\n+#logreader\n+\"zstd\",\n+]\n+\n+[project.optional-dependencies]\n+docs = [\n+  \"Jinja2\",\n+  \"sphinx\",\n+  \"sphinx-rtd-theme\",\n+  \"sphinx-sitemap\"\n+]\n+\n+testing = [\n+  \"coverage\",\n+  \"hypothesis ==6.47.*\",\n+  \"mypy\",\n+  \"pre-commit\",\n+  \"pytest\",\n+  \"pytest-cov\",\n+  \"pytest-cpp\",\n+  \"pytest-subtests\",\n+  \"pytest-xdist\",\n+  \"pytest-timeout\",\n+  \"pytest-randomly\",\n+  \"pytest-asyncio\",\n+  \"pytest-mock\",\n+  \"pytest-repeat\",\n+  \"ruff\"\n+]\n+\n+dev = [\n+\"av\",\n+\"azure-identity\",\n+\"azure-storage-blob\",\n+\"breathe\",\n+\"control\",\n+\"dictdiffer\",\n+\"flaky\",\n+\"inputs\",\n+\"lru-dict\",\n+\"matplotlib\",\n+\"metadrive-simulator; platform_machine != 'aarch64'\",\n+\"mpld3\",\n+\"myst-parser\",\n+\"natsort\",\n+\"opencv-python-headless\",\n+\"parameterized >=0.8, <0.9\",\n+#pprofile = \"*\"\n+\"pyautogui\",\n+\"pygame < 2.6.0\", # TODO: unpin when they release a prebuilt wheel\n+\"pyopencl; platform_machine != 'aarch64'\",  # broken on arm64\n+\"pywinctl\",\n+\"pyprof2calltree\",\n+\"rerun-sdk\",\n+\"tabulate\",\n+\"types-requests\",\n+\"types-tabulate\",\n+\n+# this is only pinned since 5.15.11 is broken\n+\"pyqt5 ==5.15.2; platform_machine == 'x86_64'\", # no aarch64 wheels for macOS/linux\n+\n+]\n+\n+[tool.uv.sources]",
        "comment_created_at": "2024-06-26T04:49:16+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "there's no way to do this generically? does `pip install .` without uv still work?",
        "pr_file_module": null
      },
      {
        "comment_id": "1654048715",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32834,
        "pr_file": "pyproject.toml",
        "discussion_id": "1654027581",
        "commented_code": "@@ -3,6 +3,126 @@ name = \"openpilot\"\n requires-python = \">= 3.11\"\n readme = \"README.md\"\n license = {text = \"MIT License\"}\n+version = \"0.1.0\"\n+description = \"an open source driver assistance system\"\n+authors = [\"Vehicle Researcher <user@comma.ai>\"]\n+dependencies = [\n+\n+# multiple users\n+\"sounddevice\",  # micd + soundd\n+\"pyserial\",     # pigeond + qcomgpsd\n+\"requests\",     # many one-off uses\n+\"sympy\",        # rednose + friends\n+\"crcmod\",       # cars + qcomgpsd\n+\"tqdm\",         # cars (fw_versions.py) on start + many one-off uses\n+\n+# hardwared\n+\"smbus2\",  # configuring amp\n+\n+# core\n+\"cffi\",\n+\"scons\",\n+\"pycapnp\",\n+\"Cython\",\n+\"setuptools\",\n+\"numpy < 2.0.0\",\n+\n+# body / webrtcd\n+\"aiohttp\",\n+\"aiortc\",\n+\"pyaudio\",\n+\n+# panda\n+\"libusb1\",\n+\"spidev; platform_system == 'Linux'\",\n+\n+# modeld\n+\"onnx >= 1.14.0\",\n+\"onnxruntime >=1.16.3; platform_system == 'Linux' and platform_machine == 'aarch64'\",\n+\"onnxruntime-gpu >=1.16.3; platform_system == 'Linux' and platform_machine == 'x86_64'\",\n+\n+# logging\n+\"pyzmq\",\n+\"sentry-sdk\",\n+\n+# athena\n+\"PyJWT\",\n+\"json-rpc\",\n+\"websocket_client\",\n+\n+# acados deps\n+\"casadi\",\n+\"future-fstrings\",\n+\n+# these should be removed\n+\"psutil\",\n+\"pycryptodome\",  # used in updated/casync, panda, body, and a test\n+\n+#logreader\n+\"zstd\",\n+]\n+\n+[project.optional-dependencies]\n+docs = [\n+  \"Jinja2\",\n+  \"sphinx\",\n+  \"sphinx-rtd-theme\",\n+  \"sphinx-sitemap\"\n+]\n+\n+testing = [\n+  \"coverage\",\n+  \"hypothesis ==6.47.*\",\n+  \"mypy\",\n+  \"pre-commit\",\n+  \"pytest\",\n+  \"pytest-cov\",\n+  \"pytest-cpp\",\n+  \"pytest-subtests\",\n+  \"pytest-xdist\",\n+  \"pytest-timeout\",\n+  \"pytest-randomly\",\n+  \"pytest-asyncio\",\n+  \"pytest-mock\",\n+  \"pytest-repeat\",\n+  \"ruff\"\n+]\n+\n+dev = [\n+\"av\",\n+\"azure-identity\",\n+\"azure-storage-blob\",\n+\"breathe\",\n+\"control\",\n+\"dictdiffer\",\n+\"flaky\",\n+\"inputs\",\n+\"lru-dict\",\n+\"matplotlib\",\n+\"metadrive-simulator; platform_machine != 'aarch64'\",\n+\"mpld3\",\n+\"myst-parser\",\n+\"natsort\",\n+\"opencv-python-headless\",\n+\"parameterized >=0.8, <0.9\",\n+#pprofile = \"*\"\n+\"pyautogui\",\n+\"pygame < 2.6.0\", # TODO: unpin when they release a prebuilt wheel\n+\"pyopencl; platform_machine != 'aarch64'\",  # broken on arm64\n+\"pywinctl\",\n+\"pyprof2calltree\",\n+\"rerun-sdk\",\n+\"tabulate\",\n+\"types-requests\",\n+\"types-tabulate\",\n+\n+# this is only pinned since 5.15.11 is broken\n+\"pyqt5 ==5.15.2; platform_machine == 'x86_64'\", # no aarch64 wheels for macOS/linux\n+\n+]\n+\n+[tool.uv.sources]",
        "comment_created_at": "2024-06-26T05:18:49+00:00",
        "comment_author": "maxime-desroches",
        "comment_body": "Yeah, once I add back the [build-system] table, `pip install .` will work and install all the core dependencies from dependencies = [...]\r\n\r\nfor the [tool.uv.sources] table, uv does not allow a github source + markers (platform_machine), you have to split it into 2: the github source in [tool.uv.sources] and all the version/platform requirements in dependencies=[...]. This is why metadrive is split in 2 places",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1634037081",
    "pr_number": 32548,
    "pr_file": "pyproject.toml",
    "created_at": "2024-06-11T01:30:26+00:00",
    "commented_code": "]\n \n [tool.mypy]\n-python_version = \"3.11\"",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1634037081",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32548,
        "pr_file": "pyproject.toml",
        "discussion_id": "1634037081",
        "commented_code": "@@ -44,7 +44,7 @@ testpaths = [\n ]\n \n [tool.mypy]\n-python_version = \"3.11\"",
        "comment_created_at": "2024-06-11T01:30:26+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "do we want to keep this to 3.11 so we don't use any 3.12 specific syntax? I think for the static analysis you want to keep it to the minimum supported version",
        "pr_file_module": null
      },
      {
        "comment_id": "1634056514",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32548,
        "pr_file": "pyproject.toml",
        "discussion_id": "1634037081",
        "commented_code": "@@ -44,7 +44,7 @@ testpaths = [\n ]\n \n [tool.mypy]\n-python_version = \"3.11\"",
        "comment_created_at": "2024-06-11T02:02:25+00:00",
        "comment_author": "maxime-desroches",
        "comment_body": "yeah good idea",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1635254319",
    "pr_number": 32548,
    "pr_file": "pyproject.toml",
    "created_at": "2024-06-11T17:32:19+00:00",
    "commented_code": "documentation = \"https://docs.comma.ai\"\n \n [tool.poetry.dependencies]\n-python = \"~3.11\"\n+python = \">=3.11, <3.13\"",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1635254319",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32548,
        "pr_file": "pyproject.toml",
        "discussion_id": "1635254319",
        "commented_code": "@@ -88,7 +88,7 @@ repository = \"https://github.com/commaai/openpilot\"\n documentation = \"https://docs.comma.ai\"\n \n [tool.poetry.dependencies]\n-python = \"~3.11\"\n+python = \">=3.11, <3.13\"",
        "comment_created_at": "2024-06-11T17:32:19+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "can we do <4? I always find it annoying when projects do this",
        "pr_file_module": null
      },
      {
        "comment_id": "1635266126",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32548,
        "pr_file": "pyproject.toml",
        "discussion_id": "1635254319",
        "commented_code": "@@ -88,7 +88,7 @@ repository = \"https://github.com/commaai/openpilot\"\n documentation = \"https://docs.comma.ai\"\n \n [tool.poetry.dependencies]\n-python = \"~3.11\"\n+python = \">=3.11, <3.13\"",
        "comment_created_at": "2024-06-11T17:42:51+00:00",
        "comment_author": "maxime-desroches",
        "comment_body": "Do you mean \">=3.11, <4.0\" ?",
        "pr_file_module": null
      },
      {
        "comment_id": "1635266481",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32548,
        "pr_file": "pyproject.toml",
        "discussion_id": "1635254319",
        "commented_code": "@@ -88,7 +88,7 @@ repository = \"https://github.com/commaai/openpilot\"\n documentation = \"https://docs.comma.ai\"\n \n [tool.poetry.dependencies]\n-python = \"~3.11\"\n+python = \">=3.11, <3.13\"",
        "comment_created_at": "2024-06-11T17:43:10+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "yea, I think that's what most projects do",
        "pr_file_module": null
      },
      {
        "comment_id": "1635353725",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32548,
        "pr_file": "pyproject.toml",
        "discussion_id": "1635254319",
        "commented_code": "@@ -88,7 +88,7 @@ repository = \"https://github.com/commaai/openpilot\"\n documentation = \"https://docs.comma.ai\"\n \n [tool.poetry.dependencies]\n-python = \"~3.11\"\n+python = \">=3.11, <3.13\"",
        "comment_created_at": "2024-06-11T19:03:14+00:00",
        "comment_author": "maxime-desroches",
        "comment_body": "poetry does not seem to work with non-existing version (even <3.14 does not work)",
        "pr_file_module": null
      }
    ]
  }
]