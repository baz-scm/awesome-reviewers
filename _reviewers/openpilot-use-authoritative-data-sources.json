[
  {
    "discussion_id": "2099123091",
    "pr_number": 35293,
    "pr_file": "selfdrive/ui/qt/network/wifi_manager.cc",
    "created_at": "2025-05-21T01:27:18+00:00",
    "commented_code": "return NetworkType::NONE;\n }\n \n+bool WifiManager::currentNetworkMetered() {",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "2099123091",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 35293,
        "pr_file": "selfdrive/ui/qt/network/wifi_manager.cc",
        "discussion_id": "2099123091",
        "commented_code": "@@ -372,6 +374,39 @@ NetworkType WifiManager::currentNetworkType() {\n   return NetworkType::NONE;\n }\n \n+bool WifiManager::currentNetworkMetered() {",
        "comment_created_at": "2025-05-21T01:27:18+00:00",
        "comment_author": "sshane",
        "comment_body": "switch to reading value from active connection, not guess from adapter",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1693710866",
    "pr_number": 32910,
    "pr_file": "tools/replay/logreader.cc",
    "created_at": "2024-07-27T00:44:56+00:00",
    "commented_code": "bool LogReader::load(const std::string &url, std::atomic<bool> *abort, bool local_cache, int chunk_size, int retries) {\n   std::string data = FileReader(local_cache, chunk_size, retries).read(url, abort);\n-  if (!data.empty() && url.find(\".bz2\") != std::string::npos)\n-    data = decompressBZ2(data, abort);\n+  if (!data.empty()) {\n+    if (url.find(\".bz2\") != std::string::npos) {\n+      data = decompressBZ2(data, abort);\n+    } else if (url.find(\".zst\") != std::string::npos) {\n+      data = decompressZST((std::byte *)data.data(), data.size(), abort);",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1693710866",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 32910,
        "pr_file": "tools/replay/logreader.cc",
        "discussion_id": "1693710866",
        "commented_code": "@@ -7,8 +7,13 @@\n \n bool LogReader::load(const std::string &url, std::atomic<bool> *abort, bool local_cache, int chunk_size, int retries) {\n   std::string data = FileReader(local_cache, chunk_size, retries).read(url, abort);\n-  if (!data.empty() && url.find(\".bz2\") != std::string::npos)\n-    data = decompressBZ2(data, abort);\n+  if (!data.empty()) {\n+    if (url.find(\".bz2\") != std::string::npos) {\n+      data = decompressBZ2(data, abort);\n+    } else if (url.find(\".zst\") != std::string::npos) {\n+      data = decompressZST((std::byte *)data.data(), data.size(), abort);",
        "comment_created_at": "2024-07-27T00:44:56+00:00",
        "comment_author": "sshane",
        "comment_body": "Heads up we may remove the file extensions soon, so it should also detect from the file header like the python LogReader does.",
        "pr_file_module": null
      }
    ]
  }
]