[
  {
    "discussion_id": "1444085429",
    "pr_number": 30930,
    "pr_file": "tools/webcam/camerad.py",
    "created_at": "2024-01-07T22:38:11+00:00",
    "commented_code": "+#!/usr/bin/env python3\n+import threading\n+import os\n+\n+from cereal.visionipc import VisionIpcServer, VisionStreamType\n+from cereal import messaging\n+\n+from openpilot.tools.webcam.camera import Camera\n+\n+YUV_BUFFER_COUNT = 20 # same as c++ of camerad\n+CAMERA_ROAD_ID, CAMERA_DRIVER_ID, CAMERA_WIDE_ID = 0, 1, 2",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1444085429",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 30930,
        "pr_file": "tools/webcam/camerad.py",
        "discussion_id": "1444085429",
        "commented_code": "@@ -0,0 +1,81 @@\n+#!/usr/bin/env python3\n+import threading\n+import os\n+\n+from cereal.visionipc import VisionIpcServer, VisionStreamType\n+from cereal import messaging\n+\n+from openpilot.tools.webcam.camera import Camera\n+\n+YUV_BUFFER_COUNT = 20 # same as c++ of camerad\n+CAMERA_ROAD_ID, CAMERA_DRIVER_ID, CAMERA_WIDE_ID = 0, 1, 2",
        "comment_created_at": "2024-01-07T22:38:11+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "let's make these environment variables so they can be changed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1445382035",
    "pr_number": 30930,
    "pr_file": "tools/webcam/camerad.py",
    "created_at": "2024-01-08T21:50:22+00:00",
    "commented_code": "+#!/usr/bin/env python3\n+import threading\n+import os\n+\n+from cereal.visionipc import VisionIpcServer, VisionStreamType\n+from cereal import messaging\n+\n+from openpilot.tools.webcam.camera import Camera\n+from openpilot.common.realtime import Ratekeeper\n+\n+\n+YUV_BUFFER_COUNT = int(os.getenv(\"YUV_BUFFER_COUNT\", \"20\"))\n+CAMERA_TYPE_STATE = {\"roadCameraState\":VisionStreamType.VISION_STREAM_ROAD,\n+                    \"driverCameraState\":VisionStreamType.VISION_STREAM_DRIVER,\n+                    \"wideRoadCameraState\":VisionStreamType.VISION_STREAM_WIDE_ROAD}\n+\n+def rk_loop(function, hz, exit_event: threading.Event):\n+  rk = Ratekeeper(hz, None)\n+  while not exit_event.is_set():\n+    function()\n+    rk.keep_time()\n+\n+class Camerad:\n+  def __init__(self):\n+    self.pm = messaging.PubMaster(['roadCameraState', 'driverCameraState', 'wideRoadCameraState'])\n+    self.vipc_server = VisionIpcServer(\"camerad\")\n+\n+    self.dual_camera = bool(int(os.getenv(\"DUAL\",\"0\")))\n+    self.cameras, self.camera_threads = [], [] # ORDER: road_cam, driver_cam, wide_cam\n+\n+    for cam_type, stream_type in CAMERA_TYPE_STATE.items():\n+      if cam_type == \"roadCameraState\":\n+        cam = Camera(cam_type, stream_type, int(os.getenv(\"CAMERA_WIDE_ID\", \"0\")))\n+      elif cam_type == \"driverCameraState\":\n+        cam = Camera(cam_type, stream_type, int(os.getenv(\"CAMERA_WIDE_ID\", \"1\")))\n+      else:\n+        if not self.dual_camera:",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1445382035",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 30930,
        "pr_file": "tools/webcam/camerad.py",
        "discussion_id": "1445382035",
        "commented_code": "@@ -0,0 +1,86 @@\n+#!/usr/bin/env python3\n+import threading\n+import os\n+\n+from cereal.visionipc import VisionIpcServer, VisionStreamType\n+from cereal import messaging\n+\n+from openpilot.tools.webcam.camera import Camera\n+from openpilot.common.realtime import Ratekeeper\n+\n+\n+YUV_BUFFER_COUNT = int(os.getenv(\"YUV_BUFFER_COUNT\", \"20\"))\n+CAMERA_TYPE_STATE = {\"roadCameraState\":VisionStreamType.VISION_STREAM_ROAD,\n+                    \"driverCameraState\":VisionStreamType.VISION_STREAM_DRIVER,\n+                    \"wideRoadCameraState\":VisionStreamType.VISION_STREAM_WIDE_ROAD}\n+\n+def rk_loop(function, hz, exit_event: threading.Event):\n+  rk = Ratekeeper(hz, None)\n+  while not exit_event.is_set():\n+    function()\n+    rk.keep_time()\n+\n+class Camerad:\n+  def __init__(self):\n+    self.pm = messaging.PubMaster(['roadCameraState', 'driverCameraState', 'wideRoadCameraState'])\n+    self.vipc_server = VisionIpcServer(\"camerad\")\n+\n+    self.dual_camera = bool(int(os.getenv(\"DUAL\",\"0\")))\n+    self.cameras, self.camera_threads = [], [] # ORDER: road_cam, driver_cam, wide_cam\n+\n+    for cam_type, stream_type in CAMERA_TYPE_STATE.items():\n+      if cam_type == \"roadCameraState\":\n+        cam = Camera(cam_type, stream_type, int(os.getenv(\"CAMERA_WIDE_ID\", \"0\")))\n+      elif cam_type == \"driverCameraState\":\n+        cam = Camera(cam_type, stream_type, int(os.getenv(\"CAMERA_WIDE_ID\", \"1\")))\n+      else:\n+        if not self.dual_camera:",
        "comment_created_at": "2024-01-08T21:50:22+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "you can also remove this \"if\" by adding an optional environment variable to your struct on top that disables a camera. the wide road one would specify \"DUAL_CAMERA\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2106031299",
    "pr_number": 35338,
    "pr_file": "system/ui/lib/egl_helper.py",
    "created_at": "2025-05-24T23:41:42+00:00",
    "commented_code": "+import os\n+import cffi\n+from typing import Any\n+\n+HAS_EGL = False\n+_ffi = None\n+_egl = None\n+_gles = None\n+\n+# EGL constants\n+EGL_NO_CONTEXT = None\n+EGL_NO_DISPLAY = None\n+EGL_NO_IMAGE_KHR = None\n+EGL_LINUX_DMA_BUF_EXT = 0x3270\n+EGL_WIDTH = 0x3057\n+EGL_HEIGHT = 0x3056\n+EGL_LINUX_DRM_FOURCC_EXT = 0x3271\n+EGL_DMA_BUF_PLANE0_FD_EXT = 0x3272\n+EGL_DMA_BUF_PLANE0_OFFSET_EXT = 0x3273\n+EGL_DMA_BUF_PLANE0_PITCH_EXT = 0x3274\n+EGL_DMA_BUF_PLANE1_FD_EXT = 0x3275\n+EGL_DMA_BUF_PLANE1_OFFSET_EXT = 0x3276\n+EGL_DMA_BUF_PLANE1_PITCH_EXT = 0x3277\n+EGL_NONE = 0x3038\n+GL_TEXTURE0 = 0x84C0\n+GL_TEXTURE_EXTERNAL_OES = 0x8D65\n+\n+# DRM Format for NV12\n+DRM_FORMAT_NV12 = 842094158\n+\n+# Initialize EGL and load necessary functions\n+try:\n+  _ffi = cffi.FFI()\n+  _ffi.cdef(\"\"\"\n+    typedef int EGLint;\n+    typedef unsigned int EGLBoolean;\n+    typedef unsigned int EGLenum;\n+    typedef unsigned int GLenum;\n+    typedef void *EGLContext;\n+    typedef void *EGLDisplay;\n+    typedef void *EGLClientBuffer;\n+    typedef void *EGLImageKHR;\n+    typedef void *GLeglImageOES;\n+\n+    EGLDisplay eglGetCurrentDisplay(void);\n+    EGLint eglGetError(void);\n+    EGLImageKHR eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx,\n+                                EGLenum target, EGLClientBuffer buffer,\n+                                const EGLint *attrib_list);\n+    EGLBoolean eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image);\n+    void glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image);\n+    void glBindTexture(GLenum target, unsigned int texture);\n+    void glActiveTexture(GLenum texture);\n+    \"\"\")\n+\n+  # Load libraries\n+  _egl = _ffi.dlopen(\"libEGL.so\")\n+  _gles = _ffi.dlopen(\"libGLESv2.so\")\n+\n+  # Cast NULL pointers\n+  EGL_NO_CONTEXT = _ffi.cast(\"void *\", 0)\n+  EGL_NO_DISPLAY = _ffi.cast(\"void *\", 0)\n+  EGL_NO_IMAGE_KHR = _ffi.cast(\"void *\", 0)\n+\n+  # Bind functions\n+  eglGetCurrentDisplay = _egl.eglGetCurrentDisplay\n+  eglCreateImageKHR = _egl.eglCreateImageKHR\n+  eglDestroyImageKHR = _egl.eglDestroyImageKHR\n+  glEGLImageTargetTexture2DOES = _gles.glEGLImageTargetTexture2DOES\n+  eglGetError = _egl.eglGetError\n+  glBindTexture = _gles.glBindTexture\n+  glActiveTexture = _gles.glActiveTexture\n+\n+  HAS_EGL = True",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "2106031299",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 35338,
        "pr_file": "system/ui/lib/egl_helper.py",
        "discussion_id": "2106031299",
        "commented_code": "@@ -0,0 +1,135 @@\n+import os\n+import cffi\n+from typing import Any\n+\n+HAS_EGL = False\n+_ffi = None\n+_egl = None\n+_gles = None\n+\n+# EGL constants\n+EGL_NO_CONTEXT = None\n+EGL_NO_DISPLAY = None\n+EGL_NO_IMAGE_KHR = None\n+EGL_LINUX_DMA_BUF_EXT = 0x3270\n+EGL_WIDTH = 0x3057\n+EGL_HEIGHT = 0x3056\n+EGL_LINUX_DRM_FOURCC_EXT = 0x3271\n+EGL_DMA_BUF_PLANE0_FD_EXT = 0x3272\n+EGL_DMA_BUF_PLANE0_OFFSET_EXT = 0x3273\n+EGL_DMA_BUF_PLANE0_PITCH_EXT = 0x3274\n+EGL_DMA_BUF_PLANE1_FD_EXT = 0x3275\n+EGL_DMA_BUF_PLANE1_OFFSET_EXT = 0x3276\n+EGL_DMA_BUF_PLANE1_PITCH_EXT = 0x3277\n+EGL_NONE = 0x3038\n+GL_TEXTURE0 = 0x84C0\n+GL_TEXTURE_EXTERNAL_OES = 0x8D65\n+\n+# DRM Format for NV12\n+DRM_FORMAT_NV12 = 842094158\n+\n+# Initialize EGL and load necessary functions\n+try:\n+  _ffi = cffi.FFI()\n+  _ffi.cdef(\"\"\"\n+    typedef int EGLint;\n+    typedef unsigned int EGLBoolean;\n+    typedef unsigned int EGLenum;\n+    typedef unsigned int GLenum;\n+    typedef void *EGLContext;\n+    typedef void *EGLDisplay;\n+    typedef void *EGLClientBuffer;\n+    typedef void *EGLImageKHR;\n+    typedef void *GLeglImageOES;\n+\n+    EGLDisplay eglGetCurrentDisplay(void);\n+    EGLint eglGetError(void);\n+    EGLImageKHR eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx,\n+                                EGLenum target, EGLClientBuffer buffer,\n+                                const EGLint *attrib_list);\n+    EGLBoolean eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image);\n+    void glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image);\n+    void glBindTexture(GLenum target, unsigned int texture);\n+    void glActiveTexture(GLenum texture);\n+    \"\"\")\n+\n+  # Load libraries\n+  _egl = _ffi.dlopen(\"libEGL.so\")\n+  _gles = _ffi.dlopen(\"libGLESv2.so\")\n+\n+  # Cast NULL pointers\n+  EGL_NO_CONTEXT = _ffi.cast(\"void *\", 0)\n+  EGL_NO_DISPLAY = _ffi.cast(\"void *\", 0)\n+  EGL_NO_IMAGE_KHR = _ffi.cast(\"void *\", 0)\n+\n+  # Bind functions\n+  eglGetCurrentDisplay = _egl.eglGetCurrentDisplay\n+  eglCreateImageKHR = _egl.eglCreateImageKHR\n+  eglDestroyImageKHR = _egl.eglDestroyImageKHR\n+  glEGLImageTargetTexture2DOES = _gles.glEGLImageTargetTexture2DOES\n+  eglGetError = _egl.eglGetError\n+  glBindTexture = _gles.glBindTexture\n+  glActiveTexture = _gles.glActiveTexture\n+\n+  HAS_EGL = True",
        "comment_created_at": "2025-05-24T23:41:42+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "instead of auto-detecting, we should assert we get EGL on tici, otherwise this may silently regress back to the non-EGL version on comma 3X",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2080495030",
    "pr_number": 35140,
    "pr_file": "system/ui/setup.py",
    "created_at": "2025-05-08T21:29:09+00:00",
    "commented_code": "+#!/usr/bin/env python3\n+import math\n+import os\n+import threading\n+import urllib.error\n+import urllib.request\n+import pyray as rl\n+from enum import IntEnum\n+\n+from openpilot.common.params import Params\n+from openpilot.system.hardware import HARDWARE\n+from openpilot.system.ui.lib.application import gui_app, FontWeight\n+from openpilot.system.ui.lib.button import gui_button, ButtonStyle\n+from openpilot.system.ui.lib.label import gui_label, gui_text_box\n+from openpilot.system.ui.widgets.network import WifiManagerUI, WifiManagerWrapper\n+from openpilot.system.ui.widgets.keyboard import Keyboard\n+\n+MARGIN = 50\n+TITLE_FONT_SIZE = 116\n+TITLE_FONT_WEIGHT = FontWeight.MEDIUM\n+NEXT_BUTTON_WIDTH = 310\n+BODY_FONT_SIZE = 100\n+BUTTON_HEIGHT = 160\n+BUTTON_SPACING = 50\n+\n+OPENPILOT_URL = \"https://openpilot.comma.ai\"\n+USER_AGENT = f\"AGNOSSetup-{open('/VERSION').read().strip()}\" if os.path.isfile('/VERSION') else \"AGNOSSetup-dev\"",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "2080495030",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 35140,
        "pr_file": "system/ui/setup.py",
        "discussion_id": "2080495030",
        "commented_code": "@@ -0,0 +1,329 @@\n+#!/usr/bin/env python3\n+import math\n+import os\n+import threading\n+import urllib.error\n+import urllib.request\n+import pyray as rl\n+from enum import IntEnum\n+\n+from openpilot.common.params import Params\n+from openpilot.system.hardware import HARDWARE\n+from openpilot.system.ui.lib.application import gui_app, FontWeight\n+from openpilot.system.ui.lib.button import gui_button, ButtonStyle\n+from openpilot.system.ui.lib.label import gui_label, gui_text_box\n+from openpilot.system.ui.widgets.network import WifiManagerUI, WifiManagerWrapper\n+from openpilot.system.ui.widgets.keyboard import Keyboard\n+\n+MARGIN = 50\n+TITLE_FONT_SIZE = 116\n+TITLE_FONT_WEIGHT = FontWeight.MEDIUM\n+NEXT_BUTTON_WIDTH = 310\n+BODY_FONT_SIZE = 100\n+BUTTON_HEIGHT = 160\n+BUTTON_SPACING = 50\n+\n+OPENPILOT_URL = \"https://openpilot.comma.ai\"\n+USER_AGENT = f\"AGNOSSetup-{open('/VERSION').read().strip()}\" if os.path.isfile('/VERSION') else \"AGNOSSetup-dev\"",
        "comment_created_at": "2025-05-08T21:29:09+00:00",
        "comment_author": "sshane",
        "comment_body": "Use HARDWARE.get_os_version()",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1890894986",
    "pr_number": 34215,
    "pr_file": "system/manager/process_config.py",
    "created_at": "2024-12-18T22:08:19+00:00",
    "commented_code": "procs = [\n   DaemonProcess(\"manage_athenad\", \"system.athena.manage_athenad\", \"AthenadPid\"),\n \n-  NativeProcess(\"camerad\", \"system/camerad\", [\"./camerad\"], driverview),\n+  NativeProcess(\"camerad\", \"system/camerad\", [\"./camerad\"], driverview, enabled=not WEBCAM),\n+  PythonProcess(\"camerad\", \"tools.webcam.camerad\", driverview, enabled=WEBCAM),",
    "repo_full_name": "commaai/openpilot",
    "discussion_comments": [
      {
        "comment_id": "1890894986",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34215,
        "pr_file": "system/manager/process_config.py",
        "discussion_id": "1890894986",
        "commented_code": "@@ -63,14 +63,15 @@ def and_(*fns):\n procs = [\n   DaemonProcess(\"manage_athenad\", \"system.athena.manage_athenad\", \"AthenadPid\"),\n \n-  NativeProcess(\"camerad\", \"system/camerad\", [\"./camerad\"], driverview),\n+  NativeProcess(\"camerad\", \"system/camerad\", [\"./camerad\"], driverview, enabled=not WEBCAM),\n+  PythonProcess(\"camerad\", \"tools.webcam.camerad\", driverview, enabled=WEBCAM),",
        "comment_created_at": "2024-12-18T22:08:19+00:00",
        "comment_author": "adeebshihadeh",
        "comment_body": "```suggestion\r\n  PythonProcess(\"webcamerad\", \"tools.webcam.camerad\", driverview, enabled=WEBCAM),\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1893161966",
        "repo_full_name": "commaai/openpilot",
        "pr_number": 34215,
        "pr_file": "system/manager/process_config.py",
        "discussion_id": "1890894986",
        "commented_code": "@@ -63,14 +63,15 @@ def and_(*fns):\n procs = [\n   DaemonProcess(\"manage_athenad\", \"system.athena.manage_athenad\", \"AthenadPid\"),\n \n-  NativeProcess(\"camerad\", \"system/camerad\", [\"./camerad\"], driverview),\n+  NativeProcess(\"camerad\", \"system/camerad\", [\"./camerad\"], driverview, enabled=not WEBCAM),\n+  PythonProcess(\"camerad\", \"tools.webcam.camerad\", driverview, enabled=WEBCAM),",
        "comment_created_at": "2024-12-19T21:20:53+00:00",
        "comment_author": "MikeBusuttil",
        "comment_body": "\u2705done\r\n\r\nAs far as I know, nothing relies on the hard-coded name `camerad`",
        "pr_file_module": null
      }
    ]
  }
]