[
  {
    "discussion_id": "2177897406",
    "pr_number": 4658,
    "pr_file": "exporter/opentelemetry-exporter-otlp-proto-grpc/src/opentelemetry/exporter/otlp/proto/grpc/exporter.py",
    "created_at": "2025-07-01T15:23:48+00:00",
    "commented_code": "elif isinstance(self._headers, dict):\n             self._headers = tuple(self._headers.items())\n         if self._headers is None:\n-            self._headers = tuple(_OTLP_GRPC_HEADERS)\n-        else:\n-            self._headers = tuple(self._headers) + tuple(_OTLP_GRPC_HEADERS)\n+            self._headers = tuple()\n+\n+        self._channel_options = channel_options or tuple(",
    "repo_full_name": "open-telemetry/opentelemetry-python",
    "discussion_comments": [
      {
        "comment_id": "2177897406",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4658,
        "pr_file": "exporter/opentelemetry-exporter-otlp-proto-grpc/src/opentelemetry/exporter/otlp/proto/grpc/exporter.py",
        "discussion_id": "2177897406",
        "commented_code": "@@ -239,9 +241,11 @@ def __init__(\n         elif isinstance(self._headers, dict):\n             self._headers = tuple(self._headers.items())\n         if self._headers is None:\n-            self._headers = tuple(_OTLP_GRPC_HEADERS)\n-        else:\n-            self._headers = tuple(self._headers) + tuple(_OTLP_GRPC_HEADERS)\n+            self._headers = tuple()\n+\n+        self._channel_options = channel_options or tuple(",
        "comment_created_at": "2025-07-01T15:23:48+00:00",
        "comment_author": "pmcollins",
        "comment_body": "Wondering if this code should merge the default channel options with the passed in ones.",
        "pr_file_module": null
      },
      {
        "comment_id": "2182001255",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4658,
        "pr_file": "exporter/opentelemetry-exporter-otlp-proto-grpc/src/opentelemetry/exporter/otlp/proto/grpc/exporter.py",
        "discussion_id": "2177897406",
        "commented_code": "@@ -239,9 +241,11 @@ def __init__(\n         elif isinstance(self._headers, dict):\n             self._headers = tuple(self._headers.items())\n         if self._headers is None:\n-            self._headers = tuple(_OTLP_GRPC_HEADERS)\n-        else:\n-            self._headers = tuple(self._headers) + tuple(_OTLP_GRPC_HEADERS)\n+            self._headers = tuple()\n+\n+        self._channel_options = channel_options or tuple(",
        "comment_created_at": "2025-07-03T06:53:35+00:00",
        "comment_author": "xrmx",
        "comment_body": "Good question. Since we have only one value in the options I thought that it would be easier to have the caller decide the behavior and permit to override our defaults if they want or merge themselves. \r\nFor my use case I need to override the value.",
        "pr_file_module": null
      },
      {
        "comment_id": "2183461006",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4658,
        "pr_file": "exporter/opentelemetry-exporter-otlp-proto-grpc/src/opentelemetry/exporter/otlp/proto/grpc/exporter.py",
        "discussion_id": "2177897406",
        "commented_code": "@@ -239,9 +241,11 @@ def __init__(\n         elif isinstance(self._headers, dict):\n             self._headers = tuple(self._headers.items())\n         if self._headers is None:\n-            self._headers = tuple(_OTLP_GRPC_HEADERS)\n-        else:\n-            self._headers = tuple(self._headers) + tuple(_OTLP_GRPC_HEADERS)\n+            self._headers = tuple()\n+\n+        self._channel_options = channel_options or tuple(",
        "comment_created_at": "2025-07-03T18:13:07+00:00",
        "comment_author": "pmcollins",
        "comment_body": "Makes sense. But the caller most likely won't know that `\"grpc.primary_user_agent\": _USER_AGENT_HEADER_VALUE` is being set only when passing in no channel options. If they pass in something unrelated here they might be puzzled about why the user agent header disappeared.\r\n\r\nI suppose if going with the merge approach, whatever is passed in should override any existing keys though.",
        "pr_file_module": null
      },
      {
        "comment_id": "2185467087",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4658,
        "pr_file": "exporter/opentelemetry-exporter-otlp-proto-grpc/src/opentelemetry/exporter/otlp/proto/grpc/exporter.py",
        "discussion_id": "2177897406",
        "commented_code": "@@ -239,9 +241,11 @@ def __init__(\n         elif isinstance(self._headers, dict):\n             self._headers = tuple(self._headers.items())\n         if self._headers is None:\n-            self._headers = tuple(_OTLP_GRPC_HEADERS)\n-        else:\n-            self._headers = tuple(self._headers) + tuple(_OTLP_GRPC_HEADERS)\n+            self._headers = tuple()\n+\n+        self._channel_options = channel_options or tuple(",
        "comment_created_at": "2025-07-04T14:07:21+00:00",
        "comment_author": "xrmx",
        "comment_body": "Implemented merging in the last commit, PTAL!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1610475194",
    "pr_number": 3924,
    "pr_file": "exporter/opentelemetry-exporter-prometheus/src/opentelemetry/exporter/prometheus/__init__.py",
    "created_at": "2024-05-22T18:37:26+00:00",
    "commented_code": "pre_metric_family_ids = []\n \n-            metric_name = \"\"\n-            metric_name += self._sanitize(metric.name)\n+            metric_name = sanitize_full_name(metric.name)\n \n             metric_description = metric.description or \"\"\n+            metric_unit = map_unit(metric.unit)",
    "repo_full_name": "open-telemetry/opentelemetry-python",
    "discussion_comments": [
      {
        "comment_id": "1610475194",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3924,
        "pr_file": "exporter/opentelemetry-exporter-prometheus/src/opentelemetry/exporter/prometheus/__init__.py",
        "discussion_id": "1610475194",
        "commented_code": "@@ -228,17 +230,17 @@ def _translate_to_prometheus(\n \n             pre_metric_family_ids = []\n \n-            metric_name = \"\"\n-            metric_name += self._sanitize(metric.name)\n+            metric_name = sanitize_full_name(metric.name)\n \n             metric_description = metric.description or \"\"\n+            metric_unit = map_unit(metric.unit)",
        "comment_created_at": "2024-05-22T18:37:26+00:00",
        "comment_author": "aabmass",
        "comment_body": "Should we add a flag for this to allow users to keep the opt-out and use the old behavior?",
        "pr_file_module": null
      },
      {
        "comment_id": "1610669570",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3924,
        "pr_file": "exporter/opentelemetry-exporter-prometheus/src/opentelemetry/exporter/prometheus/__init__.py",
        "discussion_id": "1610475194",
        "commented_code": "@@ -228,17 +230,17 @@ def _translate_to_prometheus(\n \n             pre_metric_family_ids = []\n \n-            metric_name = \"\"\n-            metric_name += self._sanitize(metric.name)\n+            metric_name = sanitize_full_name(metric.name)\n \n             metric_description = metric.description or \"\"\n+            metric_unit = map_unit(metric.unit)",
        "comment_created_at": "2024-05-22T21:23:43+00:00",
        "comment_author": "ocelotl",
        "comment_body": "Like, an environment variable?",
        "pr_file_module": null
      },
      {
        "comment_id": "1610679693",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3924,
        "pr_file": "exporter/opentelemetry-exporter-prometheus/src/opentelemetry/exporter/prometheus/__init__.py",
        "discussion_id": "1610475194",
        "commented_code": "@@ -228,17 +230,17 @@ def _translate_to_prometheus(\n \n             pre_metric_family_ids = []\n \n-            metric_name = \"\"\n-            metric_name += self._sanitize(metric.name)\n+            metric_name = sanitize_full_name(metric.name)\n \n             metric_description = metric.description or \"\"\n+            metric_unit = map_unit(metric.unit)",
        "comment_created_at": "2024-05-22T21:35:29+00:00",
        "comment_author": "lzchen",
        "comment_body": "Would this be as a large of a change as let's say...http semantic convention from old to new? Given that this is similarly a beta component (like the instrumentations), I am open to simply making this change and treating it as a specification change (and breaking customers) but if we feel the amount of usage also warrants an opt-in mechanism I am also open to that (although leaning towards just making the change).",
        "pr_file_module": null
      },
      {
        "comment_id": "1610907271",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3924,
        "pr_file": "exporter/opentelemetry-exporter-prometheus/src/opentelemetry/exporter/prometheus/__init__.py",
        "discussion_id": "1610475194",
        "commented_code": "@@ -228,17 +230,17 @@ def _translate_to_prometheus(\n \n             pre_metric_family_ids = []\n \n-            metric_name = \"\"\n-            metric_name += self._sanitize(metric.name)\n+            metric_name = sanitize_full_name(metric.name)\n \n             metric_description = metric.description or \"\"\n+            metric_unit = map_unit(metric.unit)",
        "comment_created_at": "2024-05-23T03:11:18+00:00",
        "comment_author": "aabmass",
        "comment_body": "> Like, an environment variable?\r\n\r\nI was thinking just a parameter when creating the exporter, possibly with a paired environment variable.\r\n\r\n> Would this be as a large of a change as let's say...http semantic convention from old to new?\r\n\r\nYes it could be very disruptive to users since the units are part of the metric name and it would affect at least some semconv metrics. For example `http_request_duration_s_bucket` will now be `http_request_duration_seconds_bucket`.\r\n\r\n> but if we feel the amount of usage also warrants an opt-in mechanism\r\n\r\nI would prefer an opt out, which is what the [collector has](https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/c0b51136575aa7ba89326d18edb4549e7e1bbdb9/pkg/translator/prometheus/normalize_name.go#L68-L73) (beta is enabled by default). I can't really speak to usage though.",
        "pr_file_module": null
      },
      {
        "comment_id": "1611815403",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3924,
        "pr_file": "exporter/opentelemetry-exporter-prometheus/src/opentelemetry/exporter/prometheus/__init__.py",
        "discussion_id": "1610475194",
        "commented_code": "@@ -228,17 +230,17 @@ def _translate_to_prometheus(\n \n             pre_metric_family_ids = []\n \n-            metric_name = \"\"\n-            metric_name += self._sanitize(metric.name)\n+            metric_name = sanitize_full_name(metric.name)\n \n             metric_description = metric.description or \"\"\n+            metric_unit = map_unit(metric.unit)",
        "comment_created_at": "2024-05-23T14:34:15+00:00",
        "comment_author": "dashpole",
        "comment_body": "See https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk_exporters/prometheus.md for the configuration recommended by the exporter spec.  There can be an option to disable unit suffixes, but it should be enabled by default if it exists.",
        "pr_file_module": null
      },
      {
        "comment_id": "1611927027",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3924,
        "pr_file": "exporter/opentelemetry-exporter-prometheus/src/opentelemetry/exporter/prometheus/__init__.py",
        "discussion_id": "1610475194",
        "commented_code": "@@ -228,17 +230,17 @@ def _translate_to_prometheus(\n \n             pre_metric_family_ids = []\n \n-            metric_name = \"\"\n-            metric_name += self._sanitize(metric.name)\n+            metric_name = sanitize_full_name(metric.name)\n \n             metric_description = metric.description or \"\"\n+            metric_unit = map_unit(metric.unit)",
        "comment_created_at": "2024-05-23T15:40:06+00:00",
        "comment_author": "aabmass",
        "comment_body": "@dashpole the existing behavior is to always add units without normalizing to prometheus conventions. So the option we're discussing here would just be something to skip the unit mapping and keep the existing behavior.\r\n\r\nI think the `without_type_suffix` would be a separate feature.",
        "pr_file_module": null
      },
      {
        "comment_id": "1611929195",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3924,
        "pr_file": "exporter/opentelemetry-exporter-prometheus/src/opentelemetry/exporter/prometheus/__init__.py",
        "discussion_id": "1610475194",
        "commented_code": "@@ -228,17 +230,17 @@ def _translate_to_prometheus(\n \n             pre_metric_family_ids = []\n \n-            metric_name = \"\"\n-            metric_name += self._sanitize(metric.name)\n+            metric_name = sanitize_full_name(metric.name)\n \n             metric_description = metric.description or \"\"\n+            metric_unit = map_unit(metric.unit)",
        "comment_created_at": "2024-05-23T15:41:40+00:00",
        "comment_author": "dashpole",
        "comment_body": "yes, disabling type and unit suffixes will be separate config knobs.",
        "pr_file_module": null
      },
      {
        "comment_id": "1612045440",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3924,
        "pr_file": "exporter/opentelemetry-exporter-prometheus/src/opentelemetry/exporter/prometheus/__init__.py",
        "discussion_id": "1610475194",
        "commented_code": "@@ -228,17 +230,17 @@ def _translate_to_prometheus(\n \n             pre_metric_family_ids = []\n \n-            metric_name = \"\"\n-            metric_name += self._sanitize(metric.name)\n+            metric_name = sanitize_full_name(metric.name)\n \n             metric_description = metric.description or \"\"\n+            metric_unit = map_unit(metric.unit)",
        "comment_created_at": "2024-05-23T17:05:25+00:00",
        "comment_author": "dashpole",
        "comment_body": "You are more than welcome to use env vars to \"feature gate\" this change to make it easier for users to transition.  That would be orthogonal to the without_units config described in the spec.",
        "pr_file_module": null
      },
      {
        "comment_id": "1612221293",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3924,
        "pr_file": "exporter/opentelemetry-exporter-prometheus/src/opentelemetry/exporter/prometheus/__init__.py",
        "discussion_id": "1610475194",
        "commented_code": "@@ -228,17 +230,17 @@ def _translate_to_prometheus(\n \n             pre_metric_family_ids = []\n \n-            metric_name = \"\"\n-            metric_name += self._sanitize(metric.name)\n+            metric_name = sanitize_full_name(metric.name)\n \n             metric_description = metric.description or \"\"\n+            metric_unit = map_unit(metric.unit)",
        "comment_created_at": "2024-05-23T19:43:52+00:00",
        "comment_author": "aabmass",
        "comment_body": "Added a new **opt-out** environment variable `OTEL_PYTHON_EXPERIMENTAL_DISABLE_PROMETHEUS_UNIT_NORMALIZATION` in 50a3abdc0a6c4ba9cfd3cba48001b070b8f875c0. The plan is to remove it in a future release (tracked in https://github.com/open-telemetry/opentelemetry-python/issues/3929)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1579800818",
    "pr_number": 3864,
    "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
    "created_at": "2024-04-25T16:34:17+00:00",
    "commented_code": "raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(**kwargs):",
    "repo_full_name": "open-telemetry/opentelemetry-python",
    "discussion_comments": [
      {
        "comment_id": "1579800818",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1579800818",
        "commented_code": "@@ -345,37 +345,54 @@ def _import_id_generator(id_generator_name: str) -> IdGenerator:\n     raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(**kwargs):",
        "comment_created_at": "2024-04-25T16:34:17+00:00",
        "comment_author": "tammy-baylis-swi",
        "comment_body": "Overall I think this feature is great for those writing new custom distros.\r\n\r\nHow would this SDK update affect those existing custom distro+configurators that are doing the manual initialization of components? Example: `_OTelSDKConfigurator._configure` is overridden and does `load_entry_point` with the env vars",
        "pr_file_module": null
      },
      {
        "comment_id": "1589811552",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1579800818",
        "commented_code": "@@ -345,37 +345,54 @@ def _import_id_generator(id_generator_name: str) -> IdGenerator:\n     raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(**kwargs):",
        "comment_created_at": "2024-05-03T23:46:37+00:00",
        "comment_author": "jeremydvoss",
        "comment_body": "Could you explain your example more?\r\n\r\nThe plan is to make this purely additive. Since no distros are currently passing in addition kwargs, there should be no breaking behavior. Env vars will still be used to configure. kwargs will just provide another option on top",
        "pr_file_module": null
      },
      {
        "comment_id": "1591290187",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1579800818",
        "commented_code": "@@ -345,37 +345,54 @@ def _import_id_generator(id_generator_name: str) -> IdGenerator:\n     raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(**kwargs):",
        "comment_created_at": "2024-05-06T16:50:37+00:00",
        "comment_author": "tammy-baylis-swi",
        "comment_body": "I think I understand better. What I was thinking of is a custom configurator that subclasses `_OTelSDKConfigurator` but instead of calling `_initialize_components`  as part of `_configure`, its own logic does import and load of sampler and exporter based on env vars. With the kwargs addition this shouldn't change since kwargs are currently ignored by that override anyway.\r\n\r\nWould this update introduce an order of precedence where kwargs are preferred over env var?",
        "pr_file_module": null
      },
      {
        "comment_id": "1594476541",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1579800818",
        "commented_code": "@@ -345,37 +345,54 @@ def _import_id_generator(id_generator_name: str) -> IdGenerator:\n     raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(**kwargs):",
        "comment_created_at": "2024-05-08T18:34:36+00:00",
        "comment_author": "jeremydvoss",
        "comment_body": "Yeah, params would be preferred over (or merged with) env vars. This follows the approach towards env vars elsewhere in OTel Python. And doing so would be necessary for custom distros to guarantee certain behavior.\r\n\r\nIn this approach, exporters given by params would be ADDED to those from env vars. Resource attributes would be merged with those from env vars and resource detectors. Since there's only 1 sampler, param would take precedence. Same for logging_enabled",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1579815334",
    "pr_number": 3864,
    "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
    "created_at": "2024-04-25T16:40:05+00:00",
    "commented_code": "\"\"\"\n \n     def _configure(self, **kwargs):\n-        _initialize_components(kwargs.get(\"auto_instrumentation_version\"))\n+        # _initialize_components(kwargs.get(\"auto_instrumentation_version\"))\n+        _initialize_components(**kwargs)",
    "repo_full_name": "open-telemetry/opentelemetry-python",
    "discussion_comments": [
      {
        "comment_id": "1579815334",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1579815334",
        "commented_code": "@@ -419,4 +436,5 @@ class _OTelSDKConfigurator(_BaseConfigurator):\n     \"\"\"\n \n     def _configure(self, **kwargs):\n-        _initialize_components(kwargs.get(\"auto_instrumentation_version\"))\n+        # _initialize_components(kwargs.get(\"auto_instrumentation_version\"))\n+        _initialize_components(**kwargs)",
        "comment_created_at": "2024-04-25T16:40:05+00:00",
        "comment_author": "lzchen",
        "comment_body": "I think we covered this a bit in the SIG. It would be great to have this behavior be configurable with custom implementations of the distro. So instead of override a private `_initialize_components` function, we expose this through `configure` so distros can have dictate their own behavior. It also makes sense then to use `kwargs` in this case.",
        "pr_file_module": null
      },
      {
        "comment_id": "1589813941",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1579815334",
        "commented_code": "@@ -419,4 +436,5 @@ class _OTelSDKConfigurator(_BaseConfigurator):\n     \"\"\"\n \n     def _configure(self, **kwargs):\n-        _initialize_components(kwargs.get(\"auto_instrumentation_version\"))\n+        # _initialize_components(kwargs.get(\"auto_instrumentation_version\"))\n+        _initialize_components(**kwargs)",
        "comment_created_at": "2024-05-03T23:48:25+00:00",
        "comment_author": "jeremydvoss",
        "comment_body": "When you say \"expose it\" do you mean have _initialize_componenets take kwargs as proposed, or to expose _the function itself_ so a distro could inject a custom function instead of just overriding _configure_ with it's replacement?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1613988262",
    "pr_number": 3864,
    "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
    "created_at": "2024-05-24T20:21:55+00:00",
    "commented_code": "raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(\n+    auto_instrumentation_version: Optional[str] = None,\n+    span_exporter_names: Optional[List[str]] = None,\n+    metric_exporter_names: Optional[List[str]] = None,\n+    log_exporter_names: Optional[List[str]] = None,\n+    sampler: Optional[Sampler] = None,\n+    resource_attributes: Optional[Attributes] = None,\n+    id_generator: IdGenerator = None,\n+    logging_enabled: Optional[bool] = None,\n+):\n+    if span_exporter_names is None:\n+        span_exporter_names = []\n+    if metric_exporter_names is None:\n+        metric_exporter_names = []\n+    if log_exporter_names is None:\n+        log_exporter_names = []\n+    span_exporters, metric_exporters, log_exporters = _import_exporters(\n+        span_exporter_names + _get_exporter_names(\"traces\"),",
    "repo_full_name": "open-telemetry/opentelemetry-python",
    "discussion_comments": [
      {
        "comment_id": "1613988262",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1613988262",
        "commented_code": "@@ -354,37 +354,61 @@ def _import_id_generator(id_generator_name: str) -> IdGenerator:\n     raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(\n+    auto_instrumentation_version: Optional[str] = None,\n+    span_exporter_names: Optional[List[str]] = None,\n+    metric_exporter_names: Optional[List[str]] = None,\n+    log_exporter_names: Optional[List[str]] = None,\n+    sampler: Optional[Sampler] = None,\n+    resource_attributes: Optional[Attributes] = None,\n+    id_generator: IdGenerator = None,\n+    logging_enabled: Optional[bool] = None,\n+):\n+    if span_exporter_names is None:\n+        span_exporter_names = []\n+    if metric_exporter_names is None:\n+        metric_exporter_names = []\n+    if log_exporter_names is None:\n+        log_exporter_names = []\n+    span_exporters, metric_exporters, log_exporters = _import_exporters(\n+        span_exporter_names + _get_exporter_names(\"traces\"),",
        "comment_created_at": "2024-05-24T20:21:55+00:00",
        "comment_author": "lzchen",
        "comment_body": "Should this be additive or should we have the in-code configuration take priority and replace entrypoints similar to how we override env var? Would users be surprised by the \"default\" behavior?",
        "pr_file_module": null
      },
      {
        "comment_id": "1617835146",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1613988262",
        "commented_code": "@@ -354,37 +354,61 @@ def _import_id_generator(id_generator_name: str) -> IdGenerator:\n     raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(\n+    auto_instrumentation_version: Optional[str] = None,\n+    span_exporter_names: Optional[List[str]] = None,\n+    metric_exporter_names: Optional[List[str]] = None,\n+    log_exporter_names: Optional[List[str]] = None,\n+    sampler: Optional[Sampler] = None,\n+    resource_attributes: Optional[Attributes] = None,\n+    id_generator: IdGenerator = None,\n+    logging_enabled: Optional[bool] = None,\n+):\n+    if span_exporter_names is None:\n+        span_exporter_names = []\n+    if metric_exporter_names is None:\n+        metric_exporter_names = []\n+    if log_exporter_names is None:\n+        log_exporter_names = []\n+    span_exporters, metric_exporters, log_exporters = _import_exporters(\n+        span_exporter_names + _get_exporter_names(\"traces\"),",
        "comment_created_at": "2024-05-28T20:08:34+00:00",
        "comment_author": "jeremydvoss",
        "comment_body": "I think both is better since it allows users to add without code changes even if they already are passing in. Furthermore, the point of this is mainly to enable custom configurators to add exporters, we should leave open the options of distros allowing for additional env var customization. And if a configurator really wants to block that option, they could delete the env var",
        "pr_file_module": null
      }
    ]
  }
]