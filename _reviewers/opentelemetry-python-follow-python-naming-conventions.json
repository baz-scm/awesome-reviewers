[
  {
    "discussion_id": "355261583",
    "pr_number": 299,
    "pr_file": "ext/opentelemetry-ext-wsgi/src/opentelemetry/ext/wsgi/__init__.py",
    "created_at": "2019-12-09T04:45:02+00:00",
    "commented_code": "return []\n \n \n-def add_request_attributes(span, environ):\n-    \"\"\"Adds HTTP request attributes from the PEP3333-conforming WSGI environ to span.\"\"\"\n-\n-    span.set_attribute(\"component\", \"http\")\n-    span.set_attribute(\"http.method\", environ[\"REQUEST_METHOD\"])\n-\n-    host = environ.get(\"HTTP_HOST\")\n-    if not host:\n-        host = environ[\"SERVER_NAME\"]\n-        port = environ[\"SERVER_PORT\"]\n-        scheme = environ[\"wsgi.url_scheme\"]\n-        if (\n-            scheme == \"http\"\n-            and port != \"80\"\n-            or scheme == \"https\"\n-            and port != \"443\"\n-        ):\n-            host += \":\" + port\n-\n-    # NOTE: Nonstandard (but see\n-    # https://github.com/open-telemetry/opentelemetry-specification/pull/263)\n-    span.set_attribute(\"http.host\", host)\n-\n-    url = environ.get(\"REQUEST_URI\") or environ.get(\"RAW_URI\")\n-\n-    if url:\n-        if url[0] == \"/\":\n-            # We assume that no scheme-relative URLs will be in url here.\n-            # After all, if a request is made to http://myserver//foo, we may get\n-            # //foo which looks like scheme-relative but isn't.\n-            url = environ[\"wsgi.url_scheme\"] + \"://\" + host + url\n-        elif not url.startswith(environ[\"wsgi.url_scheme\"] + \":\"):\n-            # Something fishy is in RAW_URL. Let's fall back to request_uri()\n-            url = wsgiref_util.request_uri(environ)\n+def setifnotnone(dic, key, value):",
    "repo_full_name": "open-telemetry/opentelemetry-python",
    "discussion_comments": [
      {
        "comment_id": "355261583",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 299,
        "pr_file": "ext/opentelemetry-ext-wsgi/src/opentelemetry/ext/wsgi/__init__.py",
        "discussion_id": "355261583",
        "commented_code": "@@ -41,44 +44,80 @@ def get_header_from_environ(\n     return []\n \n \n-def add_request_attributes(span, environ):\n-    \"\"\"Adds HTTP request attributes from the PEP3333-conforming WSGI environ to span.\"\"\"\n-\n-    span.set_attribute(\"component\", \"http\")\n-    span.set_attribute(\"http.method\", environ[\"REQUEST_METHOD\"])\n-\n-    host = environ.get(\"HTTP_HOST\")\n-    if not host:\n-        host = environ[\"SERVER_NAME\"]\n-        port = environ[\"SERVER_PORT\"]\n-        scheme = environ[\"wsgi.url_scheme\"]\n-        if (\n-            scheme == \"http\"\n-            and port != \"80\"\n-            or scheme == \"https\"\n-            and port != \"443\"\n-        ):\n-            host += \":\" + port\n-\n-    # NOTE: Nonstandard (but see\n-    # https://github.com/open-telemetry/opentelemetry-specification/pull/263)\n-    span.set_attribute(\"http.host\", host)\n-\n-    url = environ.get(\"REQUEST_URI\") or environ.get(\"RAW_URI\")\n-\n-    if url:\n-        if url[0] == \"/\":\n-            # We assume that no scheme-relative URLs will be in url here.\n-            # After all, if a request is made to http://myserver//foo, we may get\n-            # //foo which looks like scheme-relative but isn't.\n-            url = environ[\"wsgi.url_scheme\"] + \"://\" + host + url\n-        elif not url.startswith(environ[\"wsgi.url_scheme\"] + \":\"):\n-            # Something fishy is in RAW_URL. Let's fall back to request_uri()\n-            url = wsgiref_util.request_uri(environ)\n+def setifnotnone(dic, key, value):",
        "comment_created_at": "2019-12-09T04:45:02+00:00",
        "comment_author": "toumorokoshi",
        "comment_body": "I think we should follow the underscore naming convention, even for this small method name. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "333819421",
    "pr_number": 206,
    "pr_file": "ext/opentelemetry-ext-wsgi/src/opentelemetry/ext/wsgi/flask_util.py",
    "created_at": "2019-10-11T04:10:15+00:00",
    "commented_code": "+# Note: This package is not named \"flask\" because of\n+# https://github.com/PyCQA/pylint/issues/2648\n+\n+import logging\n+\n+from flask import request as flask_request\n+\n+import opentelemetry.ext.wsgi as otel_wsgi\n+from opentelemetry import propagators, trace\n+from opentelemetry.util import time_ns\n+\n+logger = logging.getLogger(__name__)\n+\n+_ENVIRON_STARTTIME_KEY = object()\n+_ENVIRON_SPAN_KEY = object()\n+_ENVIRON_ACTIVATION_KEY = object()\n+\n+\n+def wrap_flask(flask):",
    "repo_full_name": "open-telemetry/opentelemetry-python",
    "discussion_comments": [
      {
        "comment_id": "333819421",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 206,
        "pr_file": "ext/opentelemetry-ext-wsgi/src/opentelemetry/ext/wsgi/flask_util.py",
        "discussion_id": "333819421",
        "commented_code": "@@ -0,0 +1,88 @@\n+# Note: This package is not named \"flask\" because of\n+# https://github.com/PyCQA/pylint/issues/2648\n+\n+import logging\n+\n+from flask import request as flask_request\n+\n+import opentelemetry.ext.wsgi as otel_wsgi\n+from opentelemetry import propagators, trace\n+from opentelemetry.util import time_ns\n+\n+logger = logging.getLogger(__name__)\n+\n+_ENVIRON_STARTTIME_KEY = object()\n+_ENVIRON_SPAN_KEY = object()\n+_ENVIRON_ACTIVATION_KEY = object()\n+\n+\n+def wrap_flask(flask):",
        "comment_created_at": "2019-10-11T04:10:15+00:00",
        "comment_author": "toumorokoshi",
        "comment_body": "isn't the \"flask\" here redundant since it's it's in the flask_util module?\r\n\r\nI'd say it's more intuitive to name this \"wrap_app\"",
        "pr_file_module": null
      },
      {
        "comment_id": "335069574",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 206,
        "pr_file": "ext/opentelemetry-ext-wsgi/src/opentelemetry/ext/wsgi/flask_util.py",
        "discussion_id": "333819421",
        "commented_code": "@@ -0,0 +1,88 @@\n+# Note: This package is not named \"flask\" because of\n+# https://github.com/PyCQA/pylint/issues/2648\n+\n+import logging\n+\n+from flask import request as flask_request\n+\n+import opentelemetry.ext.wsgi as otel_wsgi\n+from opentelemetry import propagators, trace\n+from opentelemetry.util import time_ns\n+\n+logger = logging.getLogger(__name__)\n+\n+_ENVIRON_STARTTIME_KEY = object()\n+_ENVIRON_SPAN_KEY = object()\n+_ENVIRON_ACTIVATION_KEY = object()\n+\n+\n+def wrap_flask(flask):",
        "comment_created_at": "2019-10-15T16:58:23+00:00",
        "comment_author": "Oberon00",
        "comment_body": "I renamed it to `instrument_app`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1522896628",
    "pr_number": 3633,
    "pr_file": "opentelemetry-api/tests/trace/test_tracer.py",
    "created_at": "2024-03-13T09:54:47+00:00",
    "commented_code": "self.assertIsInstance(span, Span)\n \n     def test_start_as_current_span_decorator(self):\n-\n-        mock_call = Mock()\n+        # using a list to track the mock call order\n+        lst = []",
    "repo_full_name": "open-telemetry/opentelemetry-python",
    "discussion_comments": [
      {
        "comment_id": "1522896628",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3633,
        "pr_file": "opentelemetry-api/tests/trace/test_tracer.py",
        "discussion_id": "1522896628",
        "commented_code": "@@ -39,29 +39,42 @@ def test_start_as_current_span_context_manager(self):\n             self.assertIsInstance(span, Span)\n \n     def test_start_as_current_span_decorator(self):\n-\n-        mock_call = Mock()\n+        # using a list to track the mock call order\n+        lst = []",
        "comment_created_at": "2024-03-13T09:54:47+00:00",
        "comment_author": "xrmx",
        "comment_body": "Call this something more friendly like `calls` instead?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1664058539",
    "pr_number": 4015,
    "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/util/instrumentation.py",
    "created_at": "2024-07-03T11:46:02+00:00",
    "commented_code": "properties.\n     \"\"\"\n \n-    __slots__ = (\"_name\", \"_version\", \"_schema_url\")\n+    __slots__ = (\"_name\", \"_version\", \"_schema_url\", \"_attributes\")\n \n     def __init__(\n         self,\n         name: str,\n         version: Optional[str] = None,\n         schema_url: Optional[str] = None,\n+        attributes: Optional[dict] = None,",
    "repo_full_name": "open-telemetry/opentelemetry-python",
    "discussion_comments": [
      {
        "comment_id": "1664058539",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4015,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/util/instrumentation.py",
        "discussion_id": "1664058539",
        "commented_code": "@@ -82,42 +84,56 @@ class InstrumentationScope:\n     properties.\n     \"\"\"\n \n-    __slots__ = (\"_name\", \"_version\", \"_schema_url\")\n+    __slots__ = (\"_name\", \"_version\", \"_schema_url\", \"_attributes\")\n \n     def __init__(\n         self,\n         name: str,\n         version: Optional[str] = None,\n         schema_url: Optional[str] = None,\n+        attributes: Optional[dict] = None,",
        "comment_created_at": "2024-07-03T11:46:02+00:00",
        "comment_author": "emdneto",
        "comment_body": "No big deal, but noticed we are using `opentelemetry.util.types.Attributes` typing in several places for attributes typing. Maybe it makes sense to use it as well",
        "pr_file_module": null
      },
      {
        "comment_id": "1664185276",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4015,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/util/instrumentation.py",
        "discussion_id": "1664058539",
        "commented_code": "@@ -82,42 +84,56 @@ class InstrumentationScope:\n     properties.\n     \"\"\"\n \n-    __slots__ = (\"_name\", \"_version\", \"_schema_url\")\n+    __slots__ = (\"_name\", \"_version\", \"_schema_url\", \"_attributes\")\n \n     def __init__(\n         self,\n         name: str,\n         version: Optional[str] = None,\n         schema_url: Optional[str] = None,\n+        attributes: Optional[dict] = None,",
        "comment_created_at": "2024-07-03T13:21:48+00:00",
        "comment_author": "vivek378521",
        "comment_body": "Made the change. My first PR here so still getting a hang of things. :) thanks for the review!",
        "pr_file_module": null
      },
      {
        "comment_id": "1664237955",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4015,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/util/instrumentation.py",
        "discussion_id": "1664058539",
        "commented_code": "@@ -82,42 +84,56 @@ class InstrumentationScope:\n     properties.\n     \"\"\"\n \n-    __slots__ = (\"_name\", \"_version\", \"_schema_url\")\n+    __slots__ = (\"_name\", \"_version\", \"_schema_url\", \"_attributes\")\n \n     def __init__(\n         self,\n         name: str,\n         version: Optional[str] = None,\n         schema_url: Optional[str] = None,\n+        attributes: Optional[dict] = None,",
        "comment_created_at": "2024-07-03T13:55:20+00:00",
        "comment_author": "xrmx",
        "comment_body": "I think sdk and api should match",
        "pr_file_module": null
      },
      {
        "comment_id": "1664249543",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4015,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/util/instrumentation.py",
        "discussion_id": "1664058539",
        "commented_code": "@@ -82,42 +84,56 @@ class InstrumentationScope:\n     properties.\n     \"\"\"\n \n-    __slots__ = (\"_name\", \"_version\", \"_schema_url\")\n+    __slots__ = (\"_name\", \"_version\", \"_schema_url\", \"_attributes\")\n \n     def __init__(\n         self,\n         name: str,\n         version: Optional[str] = None,\n         schema_url: Optional[str] = None,\n+        attributes: Optional[dict] = None,",
        "comment_created_at": "2024-07-03T14:02:34+00:00",
        "comment_author": "vivek378521",
        "comment_body": "fixed that. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1664543538",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4015,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/util/instrumentation.py",
        "discussion_id": "1664058539",
        "commented_code": "@@ -82,42 +84,56 @@ class InstrumentationScope:\n     properties.\n     \"\"\"\n \n-    __slots__ = (\"_name\", \"_version\", \"_schema_url\")\n+    __slots__ = (\"_name\", \"_version\", \"_schema_url\", \"_attributes\")\n \n     def __init__(\n         self,\n         name: str,\n         version: Optional[str] = None,\n         schema_url: Optional[str] = None,\n+        attributes: Optional[dict] = None,",
        "comment_created_at": "2024-07-03T17:37:07+00:00",
        "comment_author": "lzchen",
        "comment_body": "@vivek378521 \r\n\r\nHave you made the change for this? It still says `Optional[dict]` instead of `Attributes` for typing.",
        "pr_file_module": null
      },
      {
        "comment_id": "1665135913",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4015,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/util/instrumentation.py",
        "discussion_id": "1664058539",
        "commented_code": "@@ -82,42 +84,56 @@ class InstrumentationScope:\n     properties.\n     \"\"\"\n \n-    __slots__ = (\"_name\", \"_version\", \"_schema_url\")\n+    __slots__ = (\"_name\", \"_version\", \"_schema_url\", \"_attributes\")\n \n     def __init__(\n         self,\n         name: str,\n         version: Optional[str] = None,\n         schema_url: Optional[str] = None,\n+        attributes: Optional[dict] = None,",
        "comment_created_at": "2024-07-04T05:18:04+00:00",
        "comment_author": "vivek378521",
        "comment_body": "Yes, did it now. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1614014932",
    "pr_number": 3864,
    "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
    "created_at": "2024-05-24T20:57:07+00:00",
    "commented_code": "raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(\n+    auto_instrumentation_version: Optional[str] = None,\n+    span_exporter_names: Optional[List[str]] = None,",
    "repo_full_name": "open-telemetry/opentelemetry-python",
    "discussion_comments": [
      {
        "comment_id": "1614014932",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1614014932",
        "commented_code": "@@ -354,37 +354,61 @@ def _import_id_generator(id_generator_name: str) -> IdGenerator:\n     raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(\n+    auto_instrumentation_version: Optional[str] = None,\n+    span_exporter_names: Optional[List[str]] = None,",
        "comment_created_at": "2024-05-24T20:57:07+00:00",
        "comment_author": "lzchen",
        "comment_body": "Should we stick with `trace_exporter_names` instead?",
        "pr_file_module": null
      },
      {
        "comment_id": "1617833023",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1614014932",
        "commented_code": "@@ -354,37 +354,61 @@ def _import_id_generator(id_generator_name: str) -> IdGenerator:\n     raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(\n+    auto_instrumentation_version: Optional[str] = None,\n+    span_exporter_names: Optional[List[str]] = None,",
        "comment_created_at": "2024-05-28T20:06:07+00:00",
        "comment_author": "jeremydvoss",
        "comment_body": "Fine either way. But the object seems to be called SpanExporter",
        "pr_file_module": null
      },
      {
        "comment_id": "1617874501",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1614014932",
        "commented_code": "@@ -354,37 +354,61 @@ def _import_id_generator(id_generator_name: str) -> IdGenerator:\n     raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(\n+    auto_instrumentation_version: Optional[str] = None,\n+    span_exporter_names: Optional[List[str]] = None,",
        "comment_created_at": "2024-05-28T20:47:38+00:00",
        "comment_author": "jeremydvoss",
        "comment_body": "@ocelotl Any thoughts? We use both \"span_exporter\" and \"trace_exporter\" naming conventions in internal variables, but the object is called SpanExporter. I am open to either but want to make sure to get broad input on this since it is an api change that we cannot change without breaking.",
        "pr_file_module": null
      },
      {
        "comment_id": "1617896665",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1614014932",
        "commented_code": "@@ -354,37 +354,61 @@ def _import_id_generator(id_generator_name: str) -> IdGenerator:\n     raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(\n+    auto_instrumentation_version: Optional[str] = None,\n+    span_exporter_names: Optional[List[str]] = None,",
        "comment_created_at": "2024-05-28T21:11:50+00:00",
        "comment_author": "lzchen",
        "comment_body": "We call them \"trace_exporter\" because user is configuring what exporter they want under the \"trace\" flag. As well, the entry points are using `opentelemetry_traces_exporter`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1621202749",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1614014932",
        "commented_code": "@@ -354,37 +354,61 @@ def _import_id_generator(id_generator_name: str) -> IdGenerator:\n     raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(\n+    auto_instrumentation_version: Optional[str] = None,\n+    span_exporter_names: Optional[List[str]] = None,",
        "comment_created_at": "2024-05-30T17:46:23+00:00",
        "comment_author": "jeremydvoss",
        "comment_body": "Good point. Open to change it. @ocelotl @aabmass thoughts?",
        "pr_file_module": null
      },
      {
        "comment_id": "1621414909",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1614014932",
        "commented_code": "@@ -354,37 +354,61 @@ def _import_id_generator(id_generator_name: str) -> IdGenerator:\n     raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(\n+    auto_instrumentation_version: Optional[str] = None,\n+    span_exporter_names: Optional[List[str]] = None,",
        "comment_created_at": "2024-05-30T20:50:19+00:00",
        "comment_author": "lzchen",
        "comment_body": "As discussed in the 5/30 SIG, `traces` makes more sense because we are passing it in as a flag in `opentelemetry-instrument`, we use the term `traces_exporter` for our exporter [entrypoints](https://github.com/open-telemetry/opentelemetry-python/blob/main/exporter/opentelemetry-exporter-zipkin-json/pyproject.toml#L35) and I believe the idea was to use the signal types (traces, metrics, logs) for names.",
        "pr_file_module": null
      },
      {
        "comment_id": "1621464131",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 3864,
        "pr_file": "opentelemetry-sdk/src/opentelemetry/sdk/_configuration/__init__.py",
        "discussion_id": "1614014932",
        "commented_code": "@@ -354,37 +354,61 @@ def _import_id_generator(id_generator_name: str) -> IdGenerator:\n     raise RuntimeError(f\"{id_generator_name} is not an IdGenerator\")\n \n \n-def _initialize_components(auto_instrumentation_version):\n-    trace_exporters, metric_exporters, log_exporters = _import_exporters(\n-        _get_exporter_names(\"traces\"),\n-        _get_exporter_names(\"metrics\"),\n-        _get_exporter_names(\"logs\"),\n+def _initialize_components(\n+    auto_instrumentation_version: Optional[str] = None,\n+    span_exporter_names: Optional[List[str]] = None,",
        "comment_created_at": "2024-05-30T21:51:25+00:00",
        "comment_author": "jeremydvoss",
        "comment_body": "switched to trace_exporter_names",
        "pr_file_module": null
      }
    ]
  }
]