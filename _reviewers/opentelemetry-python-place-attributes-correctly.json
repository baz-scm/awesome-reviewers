[
  {
    "discussion_id": "2152697818",
    "pr_number": 4642,
    "pr_file": "docs/examples/metrics/measurement-processors/README.md",
    "created_at": "2025-06-17T16:29:19+00:00",
    "commented_code": "+# OpenTelemetry Python - MeasurementProcessor Implementation\n+\n+This implementation adds support for **MeasurementProcessor** to the OpenTelemetry Python SDK, following the [OpenTelemetry Specification PR #4318](https://github.com/open-telemetry/opentelemetry-specification/pull/4318).\n+\n+## Overview\n+\n+The MeasurementProcessor allows you to process measurements before they are aggregated and exported. This enables powerful use cases such as:\n+\n+- **Dynamic injection of additional attributes** to measurements based on Context (e.g., from Baggage)\n+- **Dropping attributes** (e.g., removing sensitive information)\n+- **Dropping individual measurements** (e.g., filtering invalid values)\n+- **Modifying measurements** (e.g., unit conversion, value transformation)\n+\n+## Key Features\n+\n+### Chain-of-Responsibility Pattern\n+\n+Unlike existing processors in OpenTelemetry (SpanProcessor, LogRecordProcessor), MeasurementProcessor uses a **chain-of-responsibility pattern** where each processor is responsible for calling the next processor in the chain. This gives processors fine-grained control over the processing flow.\n+\n+### High Performance\n+\n+The implementation is designed for high-performance scenarios:\n+- Minimal overhead when no processors are configured\n+- Efficient processor chaining using closures\n+- No unnecessary object creation in the hot path\n+\n+## Architecture\n+\n+```\n+Measurement \u2192 Processor 1 \u2192 Processor 2 \u2192 ... \u2192 Processor N \u2192 Aggregation\n+```\n+\n+Each processor can:\n+1. **Pass through unchanged**: `next_processor(measurement)`\n+2. **Modify and pass**: `next_processor(modified_measurement)`\n+3. **Drop measurement**: Simply don't call `next_processor`\n+4. **Split into multiple**: Call `next_processor` multiple times\n+\n+## Usage\n+\n+### Basic Setup\n+\n+```python\n+from opentelemetry.sdk.metrics import MeterProvider\n+from opentelemetry.sdk.metrics._internal.measurement_processor import (\n+    BaggageMeasurementProcessor,\n+    StaticAttributeMeasurementProcessor,\n+    ValueRangeMeasurementProcessor,\n+)\n+\n+# Create measurement processors\n+processors = [\n+    BaggageMeasurementProcessor(),  # Add baggage as attributes\n+    StaticAttributeMeasurementProcessor({\"env\": \"prod\"}),  # Add static attributes\n+    ValueRangeMeasurementProcessor(min_value=0),  # Drop negative values\n+]\n+\n+# Configure MeterProvider with processors\n+meter_provider = MeterProvider(\n+    measurement_processors=processors,\n+    # ... other configuration\n+)\n+```\n+\n+### Built-in Processors\n+\n+#### 1. BaggageMeasurementProcessor\n+\n+Extracts values from OpenTelemetry Baggage and adds them as measurement attributes, enabling end-to-end telemetry correlation.\n+\n+```python\n+# Add all baggage as attributes with \"baggage.\" prefix\n+processor = BaggageMeasurementProcessor()\n+\n+# Add only specific baggage keys\n+processor = BaggageMeasurementProcessor(baggage_keys=[\"user.id\", \"trace.id\"])",
    "repo_full_name": "open-telemetry/opentelemetry-python",
    "discussion_comments": [
      {
        "comment_id": "2152697818",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4642,
        "pr_file": "docs/examples/metrics/measurement-processors/README.md",
        "discussion_id": "2152697818",
        "commented_code": "@@ -0,0 +1,245 @@\n+# OpenTelemetry Python - MeasurementProcessor Implementation\n+\n+This implementation adds support for **MeasurementProcessor** to the OpenTelemetry Python SDK, following the [OpenTelemetry Specification PR #4318](https://github.com/open-telemetry/opentelemetry-specification/pull/4318).\n+\n+## Overview\n+\n+The MeasurementProcessor allows you to process measurements before they are aggregated and exported. This enables powerful use cases such as:\n+\n+- **Dynamic injection of additional attributes** to measurements based on Context (e.g., from Baggage)\n+- **Dropping attributes** (e.g., removing sensitive information)\n+- **Dropping individual measurements** (e.g., filtering invalid values)\n+- **Modifying measurements** (e.g., unit conversion, value transformation)\n+\n+## Key Features\n+\n+### Chain-of-Responsibility Pattern\n+\n+Unlike existing processors in OpenTelemetry (SpanProcessor, LogRecordProcessor), MeasurementProcessor uses a **chain-of-responsibility pattern** where each processor is responsible for calling the next processor in the chain. This gives processors fine-grained control over the processing flow.\n+\n+### High Performance\n+\n+The implementation is designed for high-performance scenarios:\n+- Minimal overhead when no processors are configured\n+- Efficient processor chaining using closures\n+- No unnecessary object creation in the hot path\n+\n+## Architecture\n+\n+```\n+Measurement \u2192 Processor 1 \u2192 Processor 2 \u2192 ... \u2192 Processor N \u2192 Aggregation\n+```\n+\n+Each processor can:\n+1. **Pass through unchanged**: `next_processor(measurement)`\n+2. **Modify and pass**: `next_processor(modified_measurement)`\n+3. **Drop measurement**: Simply don't call `next_processor`\n+4. **Split into multiple**: Call `next_processor` multiple times\n+\n+## Usage\n+\n+### Basic Setup\n+\n+```python\n+from opentelemetry.sdk.metrics import MeterProvider\n+from opentelemetry.sdk.metrics._internal.measurement_processor import (\n+    BaggageMeasurementProcessor,\n+    StaticAttributeMeasurementProcessor,\n+    ValueRangeMeasurementProcessor,\n+)\n+\n+# Create measurement processors\n+processors = [\n+    BaggageMeasurementProcessor(),  # Add baggage as attributes\n+    StaticAttributeMeasurementProcessor({\"env\": \"prod\"}),  # Add static attributes\n+    ValueRangeMeasurementProcessor(min_value=0),  # Drop negative values\n+]\n+\n+# Configure MeterProvider with processors\n+meter_provider = MeterProvider(\n+    measurement_processors=processors,\n+    # ... other configuration\n+)\n+```\n+\n+### Built-in Processors\n+\n+#### 1. BaggageMeasurementProcessor\n+\n+Extracts values from OpenTelemetry Baggage and adds them as measurement attributes, enabling end-to-end telemetry correlation.\n+\n+```python\n+# Add all baggage as attributes with \"baggage.\" prefix\n+processor = BaggageMeasurementProcessor()\n+\n+# Add only specific baggage keys\n+processor = BaggageMeasurementProcessor(baggage_keys=[\"user.id\", \"trace.id\"])",
        "comment_created_at": "2025-06-17T16:29:19+00:00",
        "comment_author": "cijothomas",
        "comment_body": "using `trace.id` here is misleading as there is no good use cases for it. To achieve correlation with Distributed Tracing, Exemplars can (should) be leveraged!",
        "pr_file_module": null
      },
      {
        "comment_id": "2152700603",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4642,
        "pr_file": "docs/examples/metrics/measurement-processors/README.md",
        "discussion_id": "2152697818",
        "commented_code": "@@ -0,0 +1,245 @@\n+# OpenTelemetry Python - MeasurementProcessor Implementation\n+\n+This implementation adds support for **MeasurementProcessor** to the OpenTelemetry Python SDK, following the [OpenTelemetry Specification PR #4318](https://github.com/open-telemetry/opentelemetry-specification/pull/4318).\n+\n+## Overview\n+\n+The MeasurementProcessor allows you to process measurements before they are aggregated and exported. This enables powerful use cases such as:\n+\n+- **Dynamic injection of additional attributes** to measurements based on Context (e.g., from Baggage)\n+- **Dropping attributes** (e.g., removing sensitive information)\n+- **Dropping individual measurements** (e.g., filtering invalid values)\n+- **Modifying measurements** (e.g., unit conversion, value transformation)\n+\n+## Key Features\n+\n+### Chain-of-Responsibility Pattern\n+\n+Unlike existing processors in OpenTelemetry (SpanProcessor, LogRecordProcessor), MeasurementProcessor uses a **chain-of-responsibility pattern** where each processor is responsible for calling the next processor in the chain. This gives processors fine-grained control over the processing flow.\n+\n+### High Performance\n+\n+The implementation is designed for high-performance scenarios:\n+- Minimal overhead when no processors are configured\n+- Efficient processor chaining using closures\n+- No unnecessary object creation in the hot path\n+\n+## Architecture\n+\n+```\n+Measurement \u2192 Processor 1 \u2192 Processor 2 \u2192 ... \u2192 Processor N \u2192 Aggregation\n+```\n+\n+Each processor can:\n+1. **Pass through unchanged**: `next_processor(measurement)`\n+2. **Modify and pass**: `next_processor(modified_measurement)`\n+3. **Drop measurement**: Simply don't call `next_processor`\n+4. **Split into multiple**: Call `next_processor` multiple times\n+\n+## Usage\n+\n+### Basic Setup\n+\n+```python\n+from opentelemetry.sdk.metrics import MeterProvider\n+from opentelemetry.sdk.metrics._internal.measurement_processor import (\n+    BaggageMeasurementProcessor,\n+    StaticAttributeMeasurementProcessor,\n+    ValueRangeMeasurementProcessor,\n+)\n+\n+# Create measurement processors\n+processors = [\n+    BaggageMeasurementProcessor(),  # Add baggage as attributes\n+    StaticAttributeMeasurementProcessor({\"env\": \"prod\"}),  # Add static attributes\n+    ValueRangeMeasurementProcessor(min_value=0),  # Drop negative values\n+]\n+\n+# Configure MeterProvider with processors\n+meter_provider = MeterProvider(\n+    measurement_processors=processors,\n+    # ... other configuration\n+)\n+```\n+\n+### Built-in Processors\n+\n+#### 1. BaggageMeasurementProcessor\n+\n+Extracts values from OpenTelemetry Baggage and adds them as measurement attributes, enabling end-to-end telemetry correlation.\n+\n+```python\n+# Add all baggage as attributes with \"baggage.\" prefix\n+processor = BaggageMeasurementProcessor()\n+\n+# Add only specific baggage keys\n+processor = BaggageMeasurementProcessor(baggage_keys=[\"user.id\", \"trace.id\"])",
        "comment_created_at": "2025-06-17T16:31:00+00:00",
        "comment_author": "cijothomas",
        "comment_body": "\"user.id\" is a good use-case. \r\n\r\nI may also suggest \"synthetic_request\" as another - its used in [OTel Demo](https://github.com/open-telemetry/opentelemetry-demo/pull/331/files)\r\n\r\n(Its not a standard or anything, but something already in demo)",
        "pr_file_module": null
      },
      {
        "comment_id": "2163508743",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4642,
        "pr_file": "docs/examples/metrics/measurement-processors/README.md",
        "discussion_id": "2152697818",
        "commented_code": "@@ -0,0 +1,245 @@\n+# OpenTelemetry Python - MeasurementProcessor Implementation\n+\n+This implementation adds support for **MeasurementProcessor** to the OpenTelemetry Python SDK, following the [OpenTelemetry Specification PR #4318](https://github.com/open-telemetry/opentelemetry-specification/pull/4318).\n+\n+## Overview\n+\n+The MeasurementProcessor allows you to process measurements before they are aggregated and exported. This enables powerful use cases such as:\n+\n+- **Dynamic injection of additional attributes** to measurements based on Context (e.g., from Baggage)\n+- **Dropping attributes** (e.g., removing sensitive information)\n+- **Dropping individual measurements** (e.g., filtering invalid values)\n+- **Modifying measurements** (e.g., unit conversion, value transformation)\n+\n+## Key Features\n+\n+### Chain-of-Responsibility Pattern\n+\n+Unlike existing processors in OpenTelemetry (SpanProcessor, LogRecordProcessor), MeasurementProcessor uses a **chain-of-responsibility pattern** where each processor is responsible for calling the next processor in the chain. This gives processors fine-grained control over the processing flow.\n+\n+### High Performance\n+\n+The implementation is designed for high-performance scenarios:\n+- Minimal overhead when no processors are configured\n+- Efficient processor chaining using closures\n+- No unnecessary object creation in the hot path\n+\n+## Architecture\n+\n+```\n+Measurement \u2192 Processor 1 \u2192 Processor 2 \u2192 ... \u2192 Processor N \u2192 Aggregation\n+```\n+\n+Each processor can:\n+1. **Pass through unchanged**: `next_processor(measurement)`\n+2. **Modify and pass**: `next_processor(modified_measurement)`\n+3. **Drop measurement**: Simply don't call `next_processor`\n+4. **Split into multiple**: Call `next_processor` multiple times\n+\n+## Usage\n+\n+### Basic Setup\n+\n+```python\n+from opentelemetry.sdk.metrics import MeterProvider\n+from opentelemetry.sdk.metrics._internal.measurement_processor import (\n+    BaggageMeasurementProcessor,\n+    StaticAttributeMeasurementProcessor,\n+    ValueRangeMeasurementProcessor,\n+)\n+\n+# Create measurement processors\n+processors = [\n+    BaggageMeasurementProcessor(),  # Add baggage as attributes\n+    StaticAttributeMeasurementProcessor({\"env\": \"prod\"}),  # Add static attributes\n+    ValueRangeMeasurementProcessor(min_value=0),  # Drop negative values\n+]\n+\n+# Configure MeterProvider with processors\n+meter_provider = MeterProvider(\n+    measurement_processors=processors,\n+    # ... other configuration\n+)\n+```\n+\n+### Built-in Processors\n+\n+#### 1. BaggageMeasurementProcessor\n+\n+Extracts values from OpenTelemetry Baggage and adds them as measurement attributes, enabling end-to-end telemetry correlation.\n+\n+```python\n+# Add all baggage as attributes with \"baggage.\" prefix\n+processor = BaggageMeasurementProcessor()\n+\n+# Add only specific baggage keys\n+processor = BaggageMeasurementProcessor(baggage_keys=[\"user.id\", \"trace.id\"])",
        "comment_created_at": "2025-06-24T10:00:00+00:00",
        "comment_author": "Blinkuu",
        "comment_body": "Yup, agreed, changed to `synthetic_request`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2152702483",
    "pr_number": 4642,
    "pr_file": "docs/examples/metrics/measurement-processors/README.md",
    "created_at": "2025-06-17T16:32:06+00:00",
    "commented_code": "+# OpenTelemetry Python - MeasurementProcessor Implementation\n+\n+This implementation adds support for **MeasurementProcessor** to the OpenTelemetry Python SDK, following the [OpenTelemetry Specification PR #4318](https://github.com/open-telemetry/opentelemetry-specification/pull/4318).\n+\n+## Overview\n+\n+The MeasurementProcessor allows you to process measurements before they are aggregated and exported. This enables powerful use cases such as:\n+\n+- **Dynamic injection of additional attributes** to measurements based on Context (e.g., from Baggage)\n+- **Dropping attributes** (e.g., removing sensitive information)\n+- **Dropping individual measurements** (e.g., filtering invalid values)\n+- **Modifying measurements** (e.g., unit conversion, value transformation)\n+\n+## Key Features\n+\n+### Chain-of-Responsibility Pattern\n+\n+Unlike existing processors in OpenTelemetry (SpanProcessor, LogRecordProcessor), MeasurementProcessor uses a **chain-of-responsibility pattern** where each processor is responsible for calling the next processor in the chain. This gives processors fine-grained control over the processing flow.\n+\n+### High Performance\n+\n+The implementation is designed for high-performance scenarios:\n+- Minimal overhead when no processors are configured\n+- Efficient processor chaining using closures\n+- No unnecessary object creation in the hot path\n+\n+## Architecture\n+\n+```\n+Measurement \u2192 Processor 1 \u2192 Processor 2 \u2192 ... \u2192 Processor N \u2192 Aggregation\n+```\n+\n+Each processor can:\n+1. **Pass through unchanged**: `next_processor(measurement)`\n+2. **Modify and pass**: `next_processor(modified_measurement)`\n+3. **Drop measurement**: Simply don't call `next_processor`\n+4. **Split into multiple**: Call `next_processor` multiple times\n+\n+## Usage\n+\n+### Basic Setup\n+\n+```python\n+from opentelemetry.sdk.metrics import MeterProvider\n+from opentelemetry.sdk.metrics._internal.measurement_processor import (\n+    BaggageMeasurementProcessor,\n+    StaticAttributeMeasurementProcessor,\n+    ValueRangeMeasurementProcessor,\n+)\n+\n+# Create measurement processors\n+processors = [\n+    BaggageMeasurementProcessor(),  # Add baggage as attributes\n+    StaticAttributeMeasurementProcessor({\"env\": \"prod\"}),  # Add static attributes\n+    ValueRangeMeasurementProcessor(min_value=0),  # Drop negative values\n+]\n+\n+# Configure MeterProvider with processors\n+meter_provider = MeterProvider(\n+    measurement_processors=processors,\n+    # ... other configuration\n+)\n+```\n+\n+### Built-in Processors\n+\n+#### 1. BaggageMeasurementProcessor\n+\n+Extracts values from OpenTelemetry Baggage and adds them as measurement attributes, enabling end-to-end telemetry correlation.\n+\n+```python\n+# Add all baggage as attributes with \"baggage.\" prefix\n+processor = BaggageMeasurementProcessor()\n+\n+# Add only specific baggage keys\n+processor = BaggageMeasurementProcessor(baggage_keys=[\"user.id\", \"trace.id\"])\n+```\n+\n+#### 2. StaticAttributeMeasurementProcessor\n+\n+Adds static attributes to all measurements.\n+\n+```python\n+processor = StaticAttributeMeasurementProcessor({\n+    \"environment\": \"production\",",
    "repo_full_name": "open-telemetry/opentelemetry-python",
    "discussion_comments": [
      {
        "comment_id": "2152702483",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4642,
        "pr_file": "docs/examples/metrics/measurement-processors/README.md",
        "discussion_id": "2152702483",
        "commented_code": "@@ -0,0 +1,245 @@\n+# OpenTelemetry Python - MeasurementProcessor Implementation\n+\n+This implementation adds support for **MeasurementProcessor** to the OpenTelemetry Python SDK, following the [OpenTelemetry Specification PR #4318](https://github.com/open-telemetry/opentelemetry-specification/pull/4318).\n+\n+## Overview\n+\n+The MeasurementProcessor allows you to process measurements before they are aggregated and exported. This enables powerful use cases such as:\n+\n+- **Dynamic injection of additional attributes** to measurements based on Context (e.g., from Baggage)\n+- **Dropping attributes** (e.g., removing sensitive information)\n+- **Dropping individual measurements** (e.g., filtering invalid values)\n+- **Modifying measurements** (e.g., unit conversion, value transformation)\n+\n+## Key Features\n+\n+### Chain-of-Responsibility Pattern\n+\n+Unlike existing processors in OpenTelemetry (SpanProcessor, LogRecordProcessor), MeasurementProcessor uses a **chain-of-responsibility pattern** where each processor is responsible for calling the next processor in the chain. This gives processors fine-grained control over the processing flow.\n+\n+### High Performance\n+\n+The implementation is designed for high-performance scenarios:\n+- Minimal overhead when no processors are configured\n+- Efficient processor chaining using closures\n+- No unnecessary object creation in the hot path\n+\n+## Architecture\n+\n+```\n+Measurement \u2192 Processor 1 \u2192 Processor 2 \u2192 ... \u2192 Processor N \u2192 Aggregation\n+```\n+\n+Each processor can:\n+1. **Pass through unchanged**: `next_processor(measurement)`\n+2. **Modify and pass**: `next_processor(modified_measurement)`\n+3. **Drop measurement**: Simply don't call `next_processor`\n+4. **Split into multiple**: Call `next_processor` multiple times\n+\n+## Usage\n+\n+### Basic Setup\n+\n+```python\n+from opentelemetry.sdk.metrics import MeterProvider\n+from opentelemetry.sdk.metrics._internal.measurement_processor import (\n+    BaggageMeasurementProcessor,\n+    StaticAttributeMeasurementProcessor,\n+    ValueRangeMeasurementProcessor,\n+)\n+\n+# Create measurement processors\n+processors = [\n+    BaggageMeasurementProcessor(),  # Add baggage as attributes\n+    StaticAttributeMeasurementProcessor({\"env\": \"prod\"}),  # Add static attributes\n+    ValueRangeMeasurementProcessor(min_value=0),  # Drop negative values\n+]\n+\n+# Configure MeterProvider with processors\n+meter_provider = MeterProvider(\n+    measurement_processors=processors,\n+    # ... other configuration\n+)\n+```\n+\n+### Built-in Processors\n+\n+#### 1. BaggageMeasurementProcessor\n+\n+Extracts values from OpenTelemetry Baggage and adds them as measurement attributes, enabling end-to-end telemetry correlation.\n+\n+```python\n+# Add all baggage as attributes with \"baggage.\" prefix\n+processor = BaggageMeasurementProcessor()\n+\n+# Add only specific baggage keys\n+processor = BaggageMeasurementProcessor(baggage_keys=[\"user.id\", \"trace.id\"])\n+```\n+\n+#### 2. StaticAttributeMeasurementProcessor\n+\n+Adds static attributes to all measurements.\n+\n+```python\n+processor = StaticAttributeMeasurementProcessor({\n+    \"environment\": \"production\",",
        "comment_created_at": "2025-06-17T16:32:06+00:00",
        "comment_author": "cijothomas",
        "comment_body": "I am not sure if this is a good idea. For StaticAttributes for all measurements, couldn't we model it as Resource Attributes. If applicable to a subset, then maybe use Meter attributes?",
        "pr_file_module": null
      },
      {
        "comment_id": "2163507671",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4642,
        "pr_file": "docs/examples/metrics/measurement-processors/README.md",
        "discussion_id": "2152702483",
        "commented_code": "@@ -0,0 +1,245 @@\n+# OpenTelemetry Python - MeasurementProcessor Implementation\n+\n+This implementation adds support for **MeasurementProcessor** to the OpenTelemetry Python SDK, following the [OpenTelemetry Specification PR #4318](https://github.com/open-telemetry/opentelemetry-specification/pull/4318).\n+\n+## Overview\n+\n+The MeasurementProcessor allows you to process measurements before they are aggregated and exported. This enables powerful use cases such as:\n+\n+- **Dynamic injection of additional attributes** to measurements based on Context (e.g., from Baggage)\n+- **Dropping attributes** (e.g., removing sensitive information)\n+- **Dropping individual measurements** (e.g., filtering invalid values)\n+- **Modifying measurements** (e.g., unit conversion, value transformation)\n+\n+## Key Features\n+\n+### Chain-of-Responsibility Pattern\n+\n+Unlike existing processors in OpenTelemetry (SpanProcessor, LogRecordProcessor), MeasurementProcessor uses a **chain-of-responsibility pattern** where each processor is responsible for calling the next processor in the chain. This gives processors fine-grained control over the processing flow.\n+\n+### High Performance\n+\n+The implementation is designed for high-performance scenarios:\n+- Minimal overhead when no processors are configured\n+- Efficient processor chaining using closures\n+- No unnecessary object creation in the hot path\n+\n+## Architecture\n+\n+```\n+Measurement \u2192 Processor 1 \u2192 Processor 2 \u2192 ... \u2192 Processor N \u2192 Aggregation\n+```\n+\n+Each processor can:\n+1. **Pass through unchanged**: `next_processor(measurement)`\n+2. **Modify and pass**: `next_processor(modified_measurement)`\n+3. **Drop measurement**: Simply don't call `next_processor`\n+4. **Split into multiple**: Call `next_processor` multiple times\n+\n+## Usage\n+\n+### Basic Setup\n+\n+```python\n+from opentelemetry.sdk.metrics import MeterProvider\n+from opentelemetry.sdk.metrics._internal.measurement_processor import (\n+    BaggageMeasurementProcessor,\n+    StaticAttributeMeasurementProcessor,\n+    ValueRangeMeasurementProcessor,\n+)\n+\n+# Create measurement processors\n+processors = [\n+    BaggageMeasurementProcessor(),  # Add baggage as attributes\n+    StaticAttributeMeasurementProcessor({\"env\": \"prod\"}),  # Add static attributes\n+    ValueRangeMeasurementProcessor(min_value=0),  # Drop negative values\n+]\n+\n+# Configure MeterProvider with processors\n+meter_provider = MeterProvider(\n+    measurement_processors=processors,\n+    # ... other configuration\n+)\n+```\n+\n+### Built-in Processors\n+\n+#### 1. BaggageMeasurementProcessor\n+\n+Extracts values from OpenTelemetry Baggage and adds them as measurement attributes, enabling end-to-end telemetry correlation.\n+\n+```python\n+# Add all baggage as attributes with \"baggage.\" prefix\n+processor = BaggageMeasurementProcessor()\n+\n+# Add only specific baggage keys\n+processor = BaggageMeasurementProcessor(baggage_keys=[\"user.id\", \"trace.id\"])\n+```\n+\n+#### 2. StaticAttributeMeasurementProcessor\n+\n+Adds static attributes to all measurements.\n+\n+```python\n+processor = StaticAttributeMeasurementProcessor({\n+    \"environment\": \"production\",",
        "comment_created_at": "2025-06-24T09:59:41+00:00",
        "comment_author": "Blinkuu",
        "comment_body": "We could - this is just an example.\r\n\r\nIMO, none of these implementations I'm showing should be present in `opentelemetry-sdk/src/opentelemetry/sdk/metrics/_internal/measurement_processor.py`. I just placed them there since this is a PoC for simplicity's sake.\r\n\r\nWhen we merge https://github.com/open-telemetry/opentelemetry-specification/pull/4318 and start working on the actual implementation, the concrete processors should probably be contributed here: https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/processor",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2152707697",
    "pr_number": 4642,
    "pr_file": "docs/examples/metrics/measurement-processors/README.md",
    "created_at": "2025-06-17T16:35:13+00:00",
    "commented_code": "+# OpenTelemetry Python - MeasurementProcessor Implementation\n+\n+This implementation adds support for **MeasurementProcessor** to the OpenTelemetry Python SDK, following the [OpenTelemetry Specification PR #4318](https://github.com/open-telemetry/opentelemetry-specification/pull/4318).\n+\n+## Overview\n+\n+The MeasurementProcessor allows you to process measurements before they are aggregated and exported. This enables powerful use cases such as:\n+\n+- **Dynamic injection of additional attributes** to measurements based on Context (e.g., from Baggage)\n+- **Dropping attributes** (e.g., removing sensitive information)\n+- **Dropping individual measurements** (e.g., filtering invalid values)\n+- **Modifying measurements** (e.g., unit conversion, value transformation)\n+\n+## Key Features\n+\n+### Chain-of-Responsibility Pattern\n+\n+Unlike existing processors in OpenTelemetry (SpanProcessor, LogRecordProcessor), MeasurementProcessor uses a **chain-of-responsibility pattern** where each processor is responsible for calling the next processor in the chain. This gives processors fine-grained control over the processing flow.\n+\n+### High Performance\n+\n+The implementation is designed for high-performance scenarios:\n+- Minimal overhead when no processors are configured\n+- Efficient processor chaining using closures\n+- No unnecessary object creation in the hot path\n+\n+## Architecture\n+\n+```\n+Measurement \u2192 Processor 1 \u2192 Processor 2 \u2192 ... \u2192 Processor N \u2192 Aggregation\n+```\n+\n+Each processor can:\n+1. **Pass through unchanged**: `next_processor(measurement)`\n+2. **Modify and pass**: `next_processor(modified_measurement)`\n+3. **Drop measurement**: Simply don't call `next_processor`\n+4. **Split into multiple**: Call `next_processor` multiple times\n+\n+## Usage\n+\n+### Basic Setup\n+\n+```python\n+from opentelemetry.sdk.metrics import MeterProvider\n+from opentelemetry.sdk.metrics._internal.measurement_processor import (\n+    BaggageMeasurementProcessor,\n+    StaticAttributeMeasurementProcessor,\n+    ValueRangeMeasurementProcessor,\n+)\n+\n+# Create measurement processors\n+processors = [\n+    BaggageMeasurementProcessor(),  # Add baggage as attributes\n+    StaticAttributeMeasurementProcessor({\"env\": \"prod\"}),  # Add static attributes\n+    ValueRangeMeasurementProcessor(min_value=0),  # Drop negative values\n+]\n+\n+# Configure MeterProvider with processors\n+meter_provider = MeterProvider(\n+    measurement_processors=processors,\n+    # ... other configuration\n+)\n+```\n+\n+### Built-in Processors\n+\n+#### 1. BaggageMeasurementProcessor\n+\n+Extracts values from OpenTelemetry Baggage and adds them as measurement attributes, enabling end-to-end telemetry correlation.\n+\n+```python\n+# Add all baggage as attributes with \"baggage.\" prefix\n+processor = BaggageMeasurementProcessor()\n+\n+# Add only specific baggage keys\n+processor = BaggageMeasurementProcessor(baggage_keys=[\"user.id\", \"trace.id\"])\n+```\n+\n+#### 2. StaticAttributeMeasurementProcessor\n+\n+Adds static attributes to all measurements.\n+\n+```python\n+processor = StaticAttributeMeasurementProcessor({\n+    \"environment\": \"production\",\n+    \"service\": \"api-server\",\n+    \"version\": \"1.0.0\"\n+})\n+```\n+\n+#### 3. AttributeFilterMeasurementProcessor\n+\n+Removes specific attributes from measurements (useful for removing sensitive data).\n+\n+```python\n+processor = AttributeFilterMeasurementProcessor([\n+    \"password\", \"secret\", \"auth_token\"\n+])\n+```\n+\n+#### 4. ValueRangeMeasurementProcessor\n+\n+Drops measurements outside a specified value range.\n+\n+```python\n+# Drop negative values and values over 1000\n+processor = ValueRangeMeasurementProcessor(min_value=0, max_value=1000)\n+\n+# Only minimum limit\n+processor = ValueRangeMeasurementProcessor(min_value=0)\n+\n+# Only maximum limit  \n+processor = ValueRangeMeasurementProcessor(max_value=100)\n+```\n+\n+### Custom Processors\n+\n+Create custom processors by implementing the `MeasurementProcessor` interface:\n+\n+```python\n+from opentelemetry.sdk.metrics._internal.measurement_processor import MeasurementProcessor\n+from opentelemetry.sdk.metrics._internal.measurement import Measurement\n+from dataclasses import replace\n+from typing import Callable\n+\n+class CustomMeasurementProcessor(MeasurementProcessor):\n+    def process(\n+        self, \n+        measurement: Measurement, \n+        next_processor: Callable[[Measurement], None]\n+    ) -> None:\n+        # Example: Add timestamp attribute\n+        new_attributes = dict(measurement.attributes or {})\n+        new_attributes[\"processed_at\"] = str(int(time.time()))",
    "repo_full_name": "open-telemetry/opentelemetry-python",
    "discussion_comments": [
      {
        "comment_id": "2152707697",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4642,
        "pr_file": "docs/examples/metrics/measurement-processors/README.md",
        "discussion_id": "2152707697",
        "commented_code": "@@ -0,0 +1,245 @@\n+# OpenTelemetry Python - MeasurementProcessor Implementation\n+\n+This implementation adds support for **MeasurementProcessor** to the OpenTelemetry Python SDK, following the [OpenTelemetry Specification PR #4318](https://github.com/open-telemetry/opentelemetry-specification/pull/4318).\n+\n+## Overview\n+\n+The MeasurementProcessor allows you to process measurements before they are aggregated and exported. This enables powerful use cases such as:\n+\n+- **Dynamic injection of additional attributes** to measurements based on Context (e.g., from Baggage)\n+- **Dropping attributes** (e.g., removing sensitive information)\n+- **Dropping individual measurements** (e.g., filtering invalid values)\n+- **Modifying measurements** (e.g., unit conversion, value transformation)\n+\n+## Key Features\n+\n+### Chain-of-Responsibility Pattern\n+\n+Unlike existing processors in OpenTelemetry (SpanProcessor, LogRecordProcessor), MeasurementProcessor uses a **chain-of-responsibility pattern** where each processor is responsible for calling the next processor in the chain. This gives processors fine-grained control over the processing flow.\n+\n+### High Performance\n+\n+The implementation is designed for high-performance scenarios:\n+- Minimal overhead when no processors are configured\n+- Efficient processor chaining using closures\n+- No unnecessary object creation in the hot path\n+\n+## Architecture\n+\n+```\n+Measurement \u2192 Processor 1 \u2192 Processor 2 \u2192 ... \u2192 Processor N \u2192 Aggregation\n+```\n+\n+Each processor can:\n+1. **Pass through unchanged**: `next_processor(measurement)`\n+2. **Modify and pass**: `next_processor(modified_measurement)`\n+3. **Drop measurement**: Simply don't call `next_processor`\n+4. **Split into multiple**: Call `next_processor` multiple times\n+\n+## Usage\n+\n+### Basic Setup\n+\n+```python\n+from opentelemetry.sdk.metrics import MeterProvider\n+from opentelemetry.sdk.metrics._internal.measurement_processor import (\n+    BaggageMeasurementProcessor,\n+    StaticAttributeMeasurementProcessor,\n+    ValueRangeMeasurementProcessor,\n+)\n+\n+# Create measurement processors\n+processors = [\n+    BaggageMeasurementProcessor(),  # Add baggage as attributes\n+    StaticAttributeMeasurementProcessor({\"env\": \"prod\"}),  # Add static attributes\n+    ValueRangeMeasurementProcessor(min_value=0),  # Drop negative values\n+]\n+\n+# Configure MeterProvider with processors\n+meter_provider = MeterProvider(\n+    measurement_processors=processors,\n+    # ... other configuration\n+)\n+```\n+\n+### Built-in Processors\n+\n+#### 1. BaggageMeasurementProcessor\n+\n+Extracts values from OpenTelemetry Baggage and adds them as measurement attributes, enabling end-to-end telemetry correlation.\n+\n+```python\n+# Add all baggage as attributes with \"baggage.\" prefix\n+processor = BaggageMeasurementProcessor()\n+\n+# Add only specific baggage keys\n+processor = BaggageMeasurementProcessor(baggage_keys=[\"user.id\", \"trace.id\"])\n+```\n+\n+#### 2. StaticAttributeMeasurementProcessor\n+\n+Adds static attributes to all measurements.\n+\n+```python\n+processor = StaticAttributeMeasurementProcessor({\n+    \"environment\": \"production\",\n+    \"service\": \"api-server\",\n+    \"version\": \"1.0.0\"\n+})\n+```\n+\n+#### 3. AttributeFilterMeasurementProcessor\n+\n+Removes specific attributes from measurements (useful for removing sensitive data).\n+\n+```python\n+processor = AttributeFilterMeasurementProcessor([\n+    \"password\", \"secret\", \"auth_token\"\n+])\n+```\n+\n+#### 4. ValueRangeMeasurementProcessor\n+\n+Drops measurements outside a specified value range.\n+\n+```python\n+# Drop negative values and values over 1000\n+processor = ValueRangeMeasurementProcessor(min_value=0, max_value=1000)\n+\n+# Only minimum limit\n+processor = ValueRangeMeasurementProcessor(min_value=0)\n+\n+# Only maximum limit  \n+processor = ValueRangeMeasurementProcessor(max_value=100)\n+```\n+\n+### Custom Processors\n+\n+Create custom processors by implementing the `MeasurementProcessor` interface:\n+\n+```python\n+from opentelemetry.sdk.metrics._internal.measurement_processor import MeasurementProcessor\n+from opentelemetry.sdk.metrics._internal.measurement import Measurement\n+from dataclasses import replace\n+from typing import Callable\n+\n+class CustomMeasurementProcessor(MeasurementProcessor):\n+    def process(\n+        self, \n+        measurement: Measurement, \n+        next_processor: Callable[[Measurement], None]\n+    ) -> None:\n+        # Example: Add timestamp attribute\n+        new_attributes = dict(measurement.attributes or {})\n+        new_attributes[\"processed_at\"] = str(int(time.time()))",
        "comment_created_at": "2025-06-17T16:35:13+00:00",
        "comment_author": "cijothomas",
        "comment_body": "I don't think we should show example of adding timestamp as a Metric attribute - is there any valid use-case for it?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1666880482",
    "pr_number": 4015,
    "pr_file": "CHANGELOG.md",
    "created_at": "2024-07-05T14:33:04+00:00",
    "commented_code": "([#3965](https://github.com/open-telemetry/opentelemetry-python/pull/3965))\n - Validate links at span creation\n   ([#3991](https://github.com/open-telemetry/opentelemetry-python/pull/3991))\n+- Fix to add attributes field in get_meter and instrumentationScope",
    "repo_full_name": "open-telemetry/opentelemetry-python",
    "discussion_comments": [
      {
        "comment_id": "1666880482",
        "repo_full_name": "open-telemetry/opentelemetry-python",
        "pr_number": 4015,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "1666880482",
        "commented_code": "@@ -38,6 +38,8 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n   ([#3965](https://github.com/open-telemetry/opentelemetry-python/pull/3965))\n - Validate links at span creation\n   ([#3991](https://github.com/open-telemetry/opentelemetry-python/pull/3991))\n+- Fix to add attributes field in get_meter and instrumentationScope",
        "comment_created_at": "2024-07-05T14:33:04+00:00",
        "comment_author": "emdneto",
        "comment_body": "```suggestion\r\n- Add attributes field in  `MeterProvider.get_meter` and `InstrumentationScope`\r\n```",
        "pr_file_module": null
      }
    ]
  }
]