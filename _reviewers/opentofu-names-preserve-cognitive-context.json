[
  {
    "discussion_id": "2052930174",
    "pr_number": 2634,
    "pr_file": "internal/lang/evalchecks/eval_for_each.go",
    "created_at": "2025-04-21T20:00:56+00:00",
    "commented_code": "refs, moreDiags := lang.ReferencesInExpr(addrs.ParseRef, expr)\n \tdiags = diags.Append(moreDiags)\n-\tvar hclCtx *hcl.EvalContext\n-\thclCtx, moreDiags = ctx(refs)\n+\n+\thclCtx, moreDiags := ctx(refs)",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "2052930174",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2634,
        "pr_file": "internal/lang/evalchecks/eval_for_each.go",
        "discussion_id": "2052930174",
        "commented_code": "@@ -68,8 +70,8 @@ func EvaluateForEachExpressionValue(expr hcl.Expression, ctx ContextFunc, allowU\n \n \trefs, moreDiags := lang.ReferencesInExpr(addrs.ParseRef, expr)\n \tdiags = diags.Append(moreDiags)\n-\tvar hclCtx *hcl.EvalContext\n-\thclCtx, moreDiags = ctx(refs)\n+\n+\thclCtx, moreDiags := ctx(refs)",
        "comment_created_at": "2025-04-21T20:00:56+00:00",
        "comment_author": "apparentlymart",
        "comment_body": "Very minor: In the spirit of [Naming convention for internal variables representing \"contexts\"](https://github.com/opentofu/opentofu/blob/1421849989cf4a65d72db8af107c0b5f70be8c0e/rfc/20250108-naming-convention-for-context-vars.md) (whose main motivation that we try to use `ctx` only for `context.Context` values), I suggest that we rename this `ctx` argument to `hclCtxFunc` so that it's easier to quickly understand both that it returns `*hcl.EvalContext` (rather than `context.Context`) and that it's a function that returns the context rather than the context directly.\r\n\r\n(Maybe we could rename the `ContextFunc` type to `HCLContextFunc` too for consistency, though since that's exported that might be more invasive in which case I'd suggest that we save it for a later PR.)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2054099537",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2634,
        "pr_file": "internal/lang/evalchecks/eval_for_each.go",
        "discussion_id": "2052930174",
        "commented_code": "@@ -68,8 +70,8 @@ func EvaluateForEachExpressionValue(expr hcl.Expression, ctx ContextFunc, allowU\n \n \trefs, moreDiags := lang.ReferencesInExpr(addrs.ParseRef, expr)\n \tdiags = diags.Append(moreDiags)\n-\tvar hclCtx *hcl.EvalContext\n-\thclCtx, moreDiags = ctx(refs)\n+\n+\thclCtx, moreDiags := ctx(refs)",
        "comment_created_at": "2025-04-22T13:17:58+00:00",
        "comment_author": "diofeher",
        "comment_body": "Totally agreed! I'm gonna change in this PR, since the idea was to refactor these functions to make sense, and I think it does increase the readability of this code :) Thx!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1828270800",
    "pr_number": 2128,
    "pr_file": "internal/command/plan_test.go",
    "created_at": "2024-11-04T19:29:07+00:00",
    "commented_code": "}\n }\n \n+func TestPlan_noTestVars(t *testing.T) {\n+\ttd := t.TempDir()\n+\ttestCopyDir(t, testFixturePath(\"plan-no-test-vars\"), td)\n+\tdefer testChdir(t, td)()\n+\n+\tp := planFixtureProvider()\n+\tview, done := testView(t)\n+\tc := &PlanCommand{\n+\t\tMeta: Meta{\n+\t\t\ttestingOverrides: metaOverridesForProvider(p),\n+\t\t\tView:             view,\n+\t\t},\n+\t}\n+\n+\toutPath := filepath.Join(td, \"test.plan\")\n+\targs := []string{\n+\t\t\"-out\", outPath,\n+\t}\n+\tcode := c.Run(args)\n+\toutput := done(t)\n+\tif code != 0 {\n+\t\tt.Fatalf(\"bad: %d\n\n%s\", code, output.Stderr())\n+\t}\n+\n+\tplan := testReadPlan(t, outPath)\n+\tctyTestVar := plan.VariableValues[\"testVar\"]\n+\tpsuedo, err := ctyTestVar.Decode(cty.DynamicPseudoType)",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "1828270800",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2128,
        "pr_file": "internal/command/plan_test.go",
        "discussion_id": "1828270800",
        "commented_code": "@@ -220,6 +220,44 @@ func TestPlan_noState(t *testing.T) {\n \t}\n }\n \n+func TestPlan_noTestVars(t *testing.T) {\n+\ttd := t.TempDir()\n+\ttestCopyDir(t, testFixturePath(\"plan-no-test-vars\"), td)\n+\tdefer testChdir(t, td)()\n+\n+\tp := planFixtureProvider()\n+\tview, done := testView(t)\n+\tc := &PlanCommand{\n+\t\tMeta: Meta{\n+\t\t\ttestingOverrides: metaOverridesForProvider(p),\n+\t\t\tView:             view,\n+\t\t},\n+\t}\n+\n+\toutPath := filepath.Join(td, \"test.plan\")\n+\targs := []string{\n+\t\t\"-out\", outPath,\n+\t}\n+\tcode := c.Run(args)\n+\toutput := done(t)\n+\tif code != 0 {\n+\t\tt.Fatalf(\"bad: %d\\n\\n%s\", code, output.Stderr())\n+\t}\n+\n+\tplan := testReadPlan(t, outPath)\n+\tctyTestVar := plan.VariableValues[\"testVar\"]\n+\tpsuedo, err := ctyTestVar.Decode(cty.DynamicPseudoType)",
        "comment_created_at": "2024-11-04T19:29:07+00:00",
        "comment_author": "ollevche",
        "comment_body": "`psuedo` should be renamed like `decodedExpectedVar` to be more readable.",
        "pr_file_module": null
      },
      {
        "comment_id": "1828588068",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2128,
        "pr_file": "internal/command/plan_test.go",
        "discussion_id": "1828270800",
        "commented_code": "@@ -220,6 +220,44 @@ func TestPlan_noState(t *testing.T) {\n \t}\n }\n \n+func TestPlan_noTestVars(t *testing.T) {\n+\ttd := t.TempDir()\n+\ttestCopyDir(t, testFixturePath(\"plan-no-test-vars\"), td)\n+\tdefer testChdir(t, td)()\n+\n+\tp := planFixtureProvider()\n+\tview, done := testView(t)\n+\tc := &PlanCommand{\n+\t\tMeta: Meta{\n+\t\t\ttestingOverrides: metaOverridesForProvider(p),\n+\t\t\tView:             view,\n+\t\t},\n+\t}\n+\n+\toutPath := filepath.Join(td, \"test.plan\")\n+\targs := []string{\n+\t\t\"-out\", outPath,\n+\t}\n+\tcode := c.Run(args)\n+\toutput := done(t)\n+\tif code != 0 {\n+\t\tt.Fatalf(\"bad: %d\\n\\n%s\", code, output.Stderr())\n+\t}\n+\n+\tplan := testReadPlan(t, outPath)\n+\tctyTestVar := plan.VariableValues[\"testVar\"]\n+\tpsuedo, err := ctyTestVar.Decode(cty.DynamicPseudoType)",
        "comment_created_at": "2024-11-05T00:59:53+00:00",
        "comment_author": "AdosH1",
        "comment_body": "agreed, updated :pray: ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1330559982",
    "pr_number": 427,
    "pr_file": "internal/opentf/transform_targets.go",
    "created_at": "2023-09-19T18:42:27+00:00",
    "commented_code": "}\n \t}\n \n+\tif len(t.Excludes) > 0 {\n+\t\ttargetedNodes, err := t.selectTargetedNodes(g, t.Excludes, true)",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "1330559982",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 427,
        "pr_file": "internal/opentf/transform_targets.go",
        "discussion_id": "1330559982",
        "commented_code": "@@ -42,13 +44,27 @@ func (t *TargetsTransformer) Transform(g *Graph) error {\n \t\t}\n \t}\n \n+\tif len(t.Excludes) > 0 {\n+\t\ttargetedNodes, err := t.selectTargetedNodes(g, t.Excludes, true)",
        "comment_created_at": "2023-09-19T18:42:27+00:00",
        "comment_author": "Hefeweizen",
        "comment_body": "a variable name of `excludedNodes` would preserve cognitive context when reading through the code.\r\n\r\nThroughout this change we have two categories:  targeted and excluded.  Here we seem to cross the streams, potentially creating confusion.\r\n\r\nL54-57 becomes:\r\n```\r\n\t\t\tif excludedNodes.Include(v) {\r\n\t\t\t\tlog.Printf(\"[DEBUG] Removing %q, filtered by excludes.\", dag.VertexName(v))\r\n\t\t\t\tg.Remove(v)\r\n```\r\nand later readers of the code don't have to ask themselves why targeted nodes are being removed.",
        "pr_file_module": null
      }
    ]
  }
]