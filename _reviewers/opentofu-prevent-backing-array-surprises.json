[
  {
    "discussion_id": "1987615601",
    "pr_number": 2577,
    "pr_file": "internal/encryption/method/external/compliance_test.go",
    "created_at": "2025-03-10T16:13:28+00:00",
    "commented_code": "}\n \n func runTest(t *testing.T, cmd []string) {\n-\tencryptCommand := append(cmd, \"--encrypt\") //nolint:gocritic //It's intentionally a different slice.\n-\tdecryptCommand := append(cmd, \"--decrypt\") //nolint:gocritic //It's intentionally a different slice.\n+\tencryptCommand := append(cmd, \"--encrypt\")\n+\tdecryptCommand := append(cmd, \"--decrypt\")",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "1987615601",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2577,
        "pr_file": "internal/encryption/method/external/compliance_test.go",
        "discussion_id": "1987615601",
        "commented_code": "@@ -25,8 +25,8 @@ func TestCompliancePython(t *testing.T) {\n }\n \n func runTest(t *testing.T, cmd []string) {\n-\tencryptCommand := append(cmd, \"--encrypt\") //nolint:gocritic //It's intentionally a different slice.\n-\tdecryptCommand := append(cmd, \"--decrypt\") //nolint:gocritic //It's intentionally a different slice.\n+\tencryptCommand := append(cmd, \"--encrypt\")\n+\tdecryptCommand := append(cmd, \"--decrypt\")",
        "comment_created_at": "2025-03-10T16:13:28+00:00",
        "comment_author": "apparentlymart",
        "comment_body": "While I agree with removing this `nolint` comment, I do find these two statements a little suspicious:\r\n\r\nIf `len(cmd) == cap(cmd)`  here then this would cause `encryptCommand` and `decryptCommand` to both have newly-allocated backing arrays that both share a prefix with `cmd`.\r\n\r\nBut if `len(cmd) < cap(cmd)` then I think these would both end up with the same backing array and the last item set to `--decrypt`, which is presumably wrong.\r\n\r\nBoth callers of this function seem to populate `cmd` using a composite literal:\r\n\r\nhttps://github.com/opentofu/opentofu/blob/ec4e0cf0e2cefcca1d2ace792416c4e584c440a6/internal/encryption/method/external/testmethod/testmethod.go#L58\r\n\r\nhttps://github.com/opentofu/opentofu/blob/ec4e0cf0e2cefcca1d2ace792416c4e584c440a6/internal/encryption/method/external/testmethod/testmethod.go#L76\r\n\r\n...and the Go spec doesn't seem to specify what the capacity is of a slice created with a slice literal, but some experimentation on the Go playground suggests that, at least for small slices, the composite literal syntax currently allocates a backing array exactly the right size for the length of the slice, which I think is saving us from the bug that the linter was trying to warn about here. Therefore this currently works but is at risk of becoming accidentally broken in future if the callers start building these slices in a different way.\r\n\r\nOne way to resolve this while still retaining a similar code style would be to explicitly remove any excess capacity from the source slice before appending to it, and now we've upgraded to Go 1.24 there's [a helper function that's (subjectively) more readable than the three-clause slice syntax](https://pkg.go.dev/slices#Clip):\r\n\r\n```go\r\ncmd = slices.Clip(cmd)\r\nencryptCommand := append(cmd, \"--encrypt\")\r\ndecryptCommand := append(cmd, \"--decrypt\")\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1987626733",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2577,
        "pr_file": "internal/encryption/method/external/compliance_test.go",
        "discussion_id": "1987615601",
        "commented_code": "@@ -25,8 +25,8 @@ func TestCompliancePython(t *testing.T) {\n }\n \n func runTest(t *testing.T, cmd []string) {\n-\tencryptCommand := append(cmd, \"--encrypt\") //nolint:gocritic //It's intentionally a different slice.\n-\tdecryptCommand := append(cmd, \"--decrypt\") //nolint:gocritic //It's intentionally a different slice.\n+\tencryptCommand := append(cmd, \"--encrypt\")\n+\tdecryptCommand := append(cmd, \"--decrypt\")",
        "comment_created_at": "2025-03-10T16:20:08+00:00",
        "comment_author": "cam72cam",
        "comment_body": "Makes sense :+1: \r\nb884241ff0",
        "pr_file_module": null
      },
      {
        "comment_id": "1987648303",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2577,
        "pr_file": "internal/encryption/method/external/compliance_test.go",
        "discussion_id": "1987615601",
        "commented_code": "@@ -25,8 +25,8 @@ func TestCompliancePython(t *testing.T) {\n }\n \n func runTest(t *testing.T, cmd []string) {\n-\tencryptCommand := append(cmd, \"--encrypt\") //nolint:gocritic //It's intentionally a different slice.\n-\tdecryptCommand := append(cmd, \"--decrypt\") //nolint:gocritic //It's intentionally a different slice.\n+\tencryptCommand := append(cmd, \"--encrypt\")\n+\tdecryptCommand := append(cmd, \"--decrypt\")",
        "comment_created_at": "2025-03-10T16:32:59+00:00",
        "comment_author": "cam72cam",
        "comment_body": "[b884241](https://github.com/opentofu/opentofu/pull/2577/commits/b884241ff0924238bd19c95d137166e30abf3089)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2088011840",
    "pr_number": 2798,
    "pr_file": "internal/command/fmt.go",
    "created_at": "2025-05-14T04:34:07+00:00",
    "commented_code": "hasTrailingParen = true\n \t\t}\n \t}\n-\tif isMultiLine && !(hasLeadingParen && hasTrailingParen) {\n+\tif isMultiLine && (!hasLeadingParen || !hasTrailingParen) {",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "2088011840",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2798,
        "pr_file": "internal/command/fmt.go",
        "discussion_id": "2088011840",
        "commented_code": "@@ -407,7 +413,7 @@ func (c *FmtCommand) formatValueExpr(tokens hclwrite.Tokens) hclwrite.Tokens {\n \t\t\thasTrailingParen = true\n \t\t}\n \t}\n-\tif isMultiLine && !(hasLeadingParen && hasTrailingParen) {\n+\tif isMultiLine && (!hasLeadingParen || !hasTrailingParen) {",
        "comment_created_at": "2025-05-14T04:34:07+00:00",
        "comment_author": "yottta",
        "comment_body": "Interesting that this conditional is rewritten in a different manner than [this](https://github.com/opentofu/opentofu/pull/2798/files#diff-b7f5b7c669ea7bb97e98d899d204d9e6bf48a00d18cb90109447eca05997704dR235) was in the current PR.\r\nAny particular reason of this difference? I am curious about the reason around having 2 different ways of writing these conditionals.",
        "pr_file_module": null
      },
      {
        "comment_id": "2088646813",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2798,
        "pr_file": "internal/command/fmt.go",
        "discussion_id": "2088011840",
        "commented_code": "@@ -407,7 +413,7 @@ func (c *FmtCommand) formatValueExpr(tokens hclwrite.Tokens) hclwrite.Tokens {\n \t\t\thasTrailingParen = true\n \t\t}\n \t}\n-\tif isMultiLine && !(hasLeadingParen && hasTrailingParen) {\n+\tif isMultiLine && (!hasLeadingParen || !hasTrailingParen) {",
        "comment_created_at": "2025-05-14T10:47:16+00:00",
        "comment_author": "cam72cam",
        "comment_body": "Our lint rules push for a particular application of de morgans law to keep boolean operations consistent.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1668239247",
    "pr_number": 1772,
    "pr_file": "internal/configs/hcl2shim/mock_value_composer.go",
    "created_at": "2024-07-08T08:46:08+00:00",
    "commented_code": "objVals := make(map[string]cty.Value)\n \n \t\t// populate the object with mock values\n-\t\tfor k, at := range t.AttributeTypes() {\n+\t\tfor _, kv := range mapToSortedSlice(t.AttributeTypes()) {",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "1668239247",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1772,
        "pr_file": "internal/configs/hcl2shim/mock_value_composer.go",
        "discussion_id": "1668239247",
        "commented_code": "@@ -310,7 +312,9 @@ func (mvc mockValueComposer) getMockValueByType(t cty.Type) (cty.Value, bool) {\n \t\tobjVals := make(map[string]cty.Value)\n \n \t\t// populate the object with mock values\n-\t\tfor k, at := range t.AttributeTypes() {\n+\t\tfor _, kv := range mapToSortedSlice(t.AttributeTypes()) {",
        "comment_created_at": "2024-07-08T08:46:08+00:00",
        "comment_author": "Yantrio",
        "comment_body": "Can you add a comment to explain why we want to iterate over the attribute types in a sorted manner please?",
        "pr_file_module": null
      },
      {
        "comment_id": "1668292170",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1772,
        "pr_file": "internal/configs/hcl2shim/mock_value_composer.go",
        "discussion_id": "1668239247",
        "commented_code": "@@ -310,7 +312,9 @@ func (mvc mockValueComposer) getMockValueByType(t cty.Type) (cty.Value, bool) {\n \t\tobjVals := make(map[string]cty.Value)\n \n \t\t// populate the object with mock values\n-\t\tfor k, at := range t.AttributeTypes() {\n+\t\tfor _, kv := range mapToSortedSlice(t.AttributeTypes()) {",
        "comment_created_at": "2024-07-08T09:19:46+00:00",
        "comment_author": "ollevche",
        "comment_body": "I extended the comment to `ComposeBySchema` function to elaborate more on seed and randomization sequence: [6447b38](https://github.com/opentofu/opentofu/pull/1772/commits/6447b38ff4b9824809a67c80b098174f96fee3df).\r\n\r\nAlso, I put more comments where iteration order is important: [ea83b47](https://github.com/opentofu/opentofu/pull/1772/commits/ea83b47d87067a31601c1c4f389f0d7598318363).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1725659711",
    "pr_number": 1890,
    "pr_file": "internal/tfdiags/diagnostics.go",
    "created_at": "2024-08-21T19:35:44+00:00",
    "commented_code": "return diags\n }\n \n+func (diags Diagnostics) Merge(other Diagnostics) Diagnostics {\n+\tif len(diags) == 0 {\n+\t\treturn other\n+\t}\n+\n+\tfor _, d := range diags {\n+\t\tfor _, o := range other {\n+\t\t\tif reflect.DeepEqual(d, o) {",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "1725659711",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1890,
        "pr_file": "internal/tfdiags/diagnostics.go",
        "discussion_id": "1725659711",
        "commented_code": "@@ -101,6 +102,23 @@ func (diags Diagnostics) Append(new ...interface{}) Diagnostics {\n \treturn diags\n }\n \n+func (diags Diagnostics) Merge(other Diagnostics) Diagnostics {\n+\tif len(diags) == 0 {\n+\t\treturn other\n+\t}\n+\n+\tfor _, d := range diags {\n+\t\tfor _, o := range other {\n+\t\t\tif reflect.DeepEqual(d, o) {",
        "comment_created_at": "2024-08-21T19:35:44+00:00",
        "comment_author": "buraksenn",
        "comment_body": "I was thinking about adding Equal method but `Diagnostic` interface has many structs/interfaces that also has other struct/interface dependencies. For the comparison check it would become a overkill for adding that much `Equal()` functions to many structs. That's why I have used `reflect.DeepEqual` here",
        "pr_file_module": null
      },
      {
        "comment_id": "1728761442",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1890,
        "pr_file": "internal/tfdiags/diagnostics.go",
        "discussion_id": "1725659711",
        "commented_code": "@@ -101,6 +102,23 @@ func (diags Diagnostics) Append(new ...interface{}) Diagnostics {\n \treturn diags\n }\n \n+func (diags Diagnostics) Merge(other Diagnostics) Diagnostics {\n+\tif len(diags) == 0 {\n+\t\treturn other\n+\t}\n+\n+\tfor _, d := range diags {\n+\t\tfor _, o := range other {\n+\t\t\tif reflect.DeepEqual(d, o) {",
        "comment_created_at": "2024-08-23T10:36:29+00:00",
        "comment_author": "ollevche",
        "comment_body": "`reflect.DeepEqual` feels a bit of an overkill here. Also, it could fail with wrapped diags.\r\n\r\nWould you mind adapting the logic in [ConsolidateWarnings](https://github.com/opentofu/opentofu/blob/main/internal/tfdiags/consolidate_warnings.go#L25) here?\r\n\r\nI think we can treat two diags as duplicates if:\r\n* their `Severity`s are equal\r\n* their `Source.Subject`s are present and the whole `Source`s are equal\r\n* their `Description`s are equal\r\n\r\nI would also check if `DoNotConsolidateDiagnostic` function allows merging the diag.",
        "pr_file_module": null
      },
      {
        "comment_id": "1728809209",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1890,
        "pr_file": "internal/tfdiags/diagnostics.go",
        "discussion_id": "1725659711",
        "commented_code": "@@ -101,6 +102,23 @@ func (diags Diagnostics) Append(new ...interface{}) Diagnostics {\n \treturn diags\n }\n \n+func (diags Diagnostics) Merge(other Diagnostics) Diagnostics {\n+\tif len(diags) == 0 {\n+\t\treturn other\n+\t}\n+\n+\tfor _, d := range diags {\n+\t\tfor _, o := range other {\n+\t\t\tif reflect.DeepEqual(d, o) {",
        "comment_created_at": "2024-08-23T11:17:17+00:00",
        "comment_author": "cam72cam",
        "comment_body": "I've gone back and forth on this.  We know we are using overlapping code paths to produce duplicate diagnostics.  I'm ok with this being a bit stricter than ConsolidateWarnings.  I think the DeepEqual is probably a bit overkill, but @ollevche's list makes sense, perhaps with the Ranges added as well.",
        "pr_file_module": null
      },
      {
        "comment_id": "1728809928",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1890,
        "pr_file": "internal/tfdiags/diagnostics.go",
        "discussion_id": "1725659711",
        "commented_code": "@@ -101,6 +102,23 @@ func (diags Diagnostics) Append(new ...interface{}) Diagnostics {\n \treturn diags\n }\n \n+func (diags Diagnostics) Merge(other Diagnostics) Diagnostics {\n+\tif len(diags) == 0 {\n+\t\treturn other\n+\t}\n+\n+\tfor _, d := range diags {\n+\t\tfor _, o := range other {\n+\t\t\tif reflect.DeepEqual(d, o) {",
        "comment_created_at": "2024-08-23T11:17:46+00:00",
        "comment_author": "cam72cam",
        "comment_body": "I also think that DoNotConsolidateDiagnostic can be ignored for this particular function, as it is a special purpose function only for this scenario.",
        "pr_file_module": null
      },
      {
        "comment_id": "1728883043",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1890,
        "pr_file": "internal/tfdiags/diagnostics.go",
        "discussion_id": "1725659711",
        "commented_code": "@@ -101,6 +102,23 @@ func (diags Diagnostics) Append(new ...interface{}) Diagnostics {\n \treturn diags\n }\n \n+func (diags Diagnostics) Merge(other Diagnostics) Diagnostics {\n+\tif len(diags) == 0 {\n+\t\treturn other\n+\t}\n+\n+\tfor _, d := range diags {\n+\t\tfor _, o := range other {\n+\t\t\tif reflect.DeepEqual(d, o) {",
        "comment_created_at": "2024-08-23T12:22:09+00:00",
        "comment_author": "ollevche",
        "comment_body": "Yep, I agree `DoNotConsolidateDiagnostic` check is optional here.\r\n\r\n> perhaps with the Ranges added as well.\r\n\r\n`Source`s should be equal and `Source.Subject`s (ranges) should be non-zero. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1733309737",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1890,
        "pr_file": "internal/tfdiags/diagnostics.go",
        "discussion_id": "1725659711",
        "commented_code": "@@ -101,6 +102,23 @@ func (diags Diagnostics) Append(new ...interface{}) Diagnostics {\n \treturn diags\n }\n \n+func (diags Diagnostics) Merge(other Diagnostics) Diagnostics {\n+\tif len(diags) == 0 {\n+\t\treturn other\n+\t}\n+\n+\tfor _, d := range diags {\n+\t\tfor _, o := range other {\n+\t\t\tif reflect.DeepEqual(d, o) {",
        "comment_created_at": "2024-08-27T18:00:54+00:00",
        "comment_author": "buraksenn",
        "comment_body": "Added Equal() methods to used structs and refactored the function",
        "pr_file_module": null
      }
    ]
  }
]