[
  {
    "discussion_id": "2084632481",
    "pr_number": 2793,
    "pr_file": "rfc/20250317-ephemeral-resources.md",
    "created_at": "2025-05-12T13:05:27+00:00",
    "commented_code": "+# Ephemeral resources, variables, outputs, locals and write-only arguments\n+\n+Issue: https://github.com/opentofu/opentofu/issues/1996\n+\n+Right now, OpenTofu information for resources and outputs are written to state as it is. This is presenting a security risk\n+as some of the information from the stored objects can contain sensitive bits that can become visible to whoever is having access to the state file.",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "2084632481",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2793,
        "pr_file": "rfc/20250317-ephemeral-resources.md",
        "discussion_id": "2084632481",
        "commented_code": "@@ -0,0 +1,646 @@\n+# Ephemeral resources, variables, outputs, locals and write-only arguments\n+\n+Issue: https://github.com/opentofu/opentofu/issues/1996\n+\n+Right now, OpenTofu information for resources and outputs are written to state as it is. This is presenting a security risk\n+as some of the information from the stored objects can contain sensitive bits that can become visible to whoever is having access to the state file.",
        "comment_created_at": "2025-05-12T13:05:27+00:00",
        "comment_author": "Yantrio",
        "comment_body": "It may be worth mentioning here that the statefile and the planfiles store information in plaintext. Secrets are only sanitized by the user interface intended for humans but those files do store sensitive information",
        "pr_file_module": null
      },
      {
        "comment_id": "2085163875",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2793,
        "pr_file": "rfc/20250317-ephemeral-resources.md",
        "discussion_id": "2084632481",
        "commented_code": "@@ -0,0 +1,646 @@\n+# Ephemeral resources, variables, outputs, locals and write-only arguments\n+\n+Issue: https://github.com/opentofu/opentofu/issues/1996\n+\n+Right now, OpenTofu information for resources and outputs are written to state as it is. This is presenting a security risk\n+as some of the information from the stored objects can contain sensitive bits that can become visible to whoever is having access to the state file.",
        "comment_created_at": "2025-05-12T17:47:25+00:00",
        "comment_author": "cam72cam",
        "comment_body": "It also might be worth introducing the idea that state encryption is our currently recommended solution.\r\n\r\nIMO they are two overlapping, but not exclusive concepts\r\n\r\nAdvantages of State Encryption:\r\n* All secrets are protected, regardless of provider or resource/module configuration\r\n* Don't need to chose what is protected and what is exposed\r\n* Also protects against provider injection\r\n  - https://www.plerion.com/blog/hacking-terraform-state-for-privilege-escalation\r\n  \r\nAdvantages of Ephemeral\r\n * No keys to loose / have leaked, secrets (if identified properly) are not stored in the first place.",
        "pr_file_module": null
      },
      {
        "comment_id": "2085348206",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2793,
        "pr_file": "rfc/20250317-ephemeral-resources.md",
        "discussion_id": "2084632481",
        "commented_code": "@@ -0,0 +1,646 @@\n+# Ephemeral resources, variables, outputs, locals and write-only arguments\n+\n+Issue: https://github.com/opentofu/opentofu/issues/1996\n+\n+Right now, OpenTofu information for resources and outputs are written to state as it is. This is presenting a security risk\n+as some of the information from the stored objects can contain sensitive bits that can become visible to whoever is having access to the state file.",
        "comment_created_at": "2025-05-12T19:53:47+00:00",
        "comment_author": "Yantrio",
        "comment_body": "That raises another question, we should explain how we shouldn't use this with state encryption (due to the ephemerality) because some people may think \"This is great for secrets, i can use it for my passphrase\" and have issues.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2086068750",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2793,
        "pr_file": "rfc/20250317-ephemeral-resources.md",
        "discussion_id": "2084632481",
        "commented_code": "@@ -0,0 +1,646 @@\n+# Ephemeral resources, variables, outputs, locals and write-only arguments\n+\n+Issue: https://github.com/opentofu/opentofu/issues/1996\n+\n+Right now, OpenTofu information for resources and outputs are written to state as it is. This is presenting a security risk\n+as some of the information from the stored objects can contain sensitive bits that can become visible to whoever is having access to the state file.",
        "comment_created_at": "2025-05-13T07:01:31+00:00",
        "comment_author": "yottta",
        "comment_body": "> That raises another question, we should explain how we shouldn't use this with state encryption (due to the ephemerality) because some people may think \"This is great for secrets, i can use it for my passphrase\" and have issues.\r\n\r\nI am not sure that I really get what you are suggesting here. Could you expand it more please?",
        "pr_file_module": null
      },
      {
        "comment_id": "2086114585",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2793,
        "pr_file": "rfc/20250317-ephemeral-resources.md",
        "discussion_id": "2084632481",
        "commented_code": "@@ -0,0 +1,646 @@\n+# Ephemeral resources, variables, outputs, locals and write-only arguments\n+\n+Issue: https://github.com/opentofu/opentofu/issues/1996\n+\n+Right now, OpenTofu information for resources and outputs are written to state as it is. This is presenting a security risk\n+as some of the information from the stored objects can contain sensitive bits that can become visible to whoever is having access to the state file.",
        "comment_created_at": "2025-05-13T07:26:44+00:00",
        "comment_author": "yottta",
        "comment_body": "Please check this out: ae712fdaf7a5ba4b69cfcf0e65d960df7d301dac",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2084645615",
    "pr_number": 2793,
    "pr_file": "rfc/20250317-ephemeral-resources.md",
    "created_at": "2025-05-12T13:11:34+00:00",
    "commented_code": "+# Ephemeral resources, variables, outputs, locals and write-only arguments\n+\n+Issue: https://github.com/opentofu/opentofu/issues/1996\n+\n+Right now, OpenTofu information for resources and outputs are written to state as it is. This is presenting a security risk\n+as some of the information from the stored objects can contain sensitive bits that can become visible to whoever is having access to the state file.\n+\n+In order to provide a better solution for the aforementioned situation, OpenTofu introduces the concept of \"ephemerality\".\n+Any new feature under this new concept will provide ways to skip values from being written to the state and plan files.\n+\n+To make this work seamlessly with most of the blocks that OpenTofu supports, the following functionalities need to be able to work with the ephemeral concept:\n+* `resource`'s `write-only` attributes\n+* variables\n+* outputs\n+* locals\n+* `ephemeral` resources\n+* providers\n+* provisioners\n+* `connection` block\n+\n+## Proposed Solution\n+\n+In the attempt of providing to the reader an in-depth understanding of the ephemerality implications in OpenTofu,\n+this section will try to explain the functional approach of the new concept in each existing feature.\n+\n+### Write-only attributes\n+This is a new concept that allows any existing `resource` to define attributes in its schema that can be only written without the ability to retrieve the value afterwards.\n+\n+By not being readable, this also means that an attribute configured by a provider this way, will not be written to the state or plan file either.\n+Therefore, these attributes are suitable for configuring specific resources with sensitive data, like passwords, access keys, etc.\n+\n+A write-only attribute can accept an ephemeral or a non-ephemeral value, even though it's recommended to use ephemeral values for such attributes.\n+\n+Because these attributes are not written to the plan file, the update of a write-only attribute it's getting a little bit trickier.\n+Provider implementations do generally include also a \"version\" argument linked to the write-only one.\n+For example having a write-only argument called `secret`, providers should also include\n+a non-write-only argument called `secret_version`. Every time the user wants to update the value of `secret`, it needs to change the value of `secret_version` to trigger a change.\n+The provider implementation is responsible with handling this particular case: because the version attribute is stored also in the state, the provider needs to compare the value from the state with the one from the configuration and in case it differs, it will trigger the update of the `secret` attribute.\n+\n+The write-only attributes are supported momentarily by a low number of providers and resources.",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "2084645615",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2793,
        "pr_file": "rfc/20250317-ephemeral-resources.md",
        "discussion_id": "2084645615",
        "commented_code": "@@ -0,0 +1,646 @@\n+# Ephemeral resources, variables, outputs, locals and write-only arguments\n+\n+Issue: https://github.com/opentofu/opentofu/issues/1996\n+\n+Right now, OpenTofu information for resources and outputs are written to state as it is. This is presenting a security risk\n+as some of the information from the stored objects can contain sensitive bits that can become visible to whoever is having access to the state file.\n+\n+In order to provide a better solution for the aforementioned situation, OpenTofu introduces the concept of \"ephemerality\".\n+Any new feature under this new concept will provide ways to skip values from being written to the state and plan files.\n+\n+To make this work seamlessly with most of the blocks that OpenTofu supports, the following functionalities need to be able to work with the ephemeral concept:\n+* `resource`'s `write-only` attributes\n+* variables\n+* outputs\n+* locals\n+* `ephemeral` resources\n+* providers\n+* provisioners\n+* `connection` block\n+\n+## Proposed Solution\n+\n+In the attempt of providing to the reader an in-depth understanding of the ephemerality implications in OpenTofu,\n+this section will try to explain the functional approach of the new concept in each existing feature.\n+\n+### Write-only attributes\n+This is a new concept that allows any existing `resource` to define attributes in its schema that can be only written without the ability to retrieve the value afterwards.\n+\n+By not being readable, this also means that an attribute configured by a provider this way, will not be written to the state or plan file either.\n+Therefore, these attributes are suitable for configuring specific resources with sensitive data, like passwords, access keys, etc.\n+\n+A write-only attribute can accept an ephemeral or a non-ephemeral value, even though it's recommended to use ephemeral values for such attributes.\n+\n+Because these attributes are not written to the plan file, the update of a write-only attribute it's getting a little bit trickier.\n+Provider implementations do generally include also a \"version\" argument linked to the write-only one.\n+For example having a write-only argument called `secret`, providers should also include\n+a non-write-only argument called `secret_version`. Every time the user wants to update the value of `secret`, it needs to change the value of `secret_version` to trigger a change.\n+The provider implementation is responsible with handling this particular case: because the version attribute is stored also in the state, the provider needs to compare the value from the state with the one from the configuration and in case it differs, it will trigger the update of the `secret` attribute.\n+\n+The write-only attributes are supported momentarily by a low number of providers and resources.",
        "comment_created_at": "2025-05-12T13:11:34+00:00",
        "comment_author": "Yantrio",
        "comment_body": "```suggestion\r\nAt the time of writing this RFC, write-only attributes are supported by a low number of providers and resources.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2086084574",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2793,
        "pr_file": "rfc/20250317-ephemeral-resources.md",
        "discussion_id": "2084645615",
        "commented_code": "@@ -0,0 +1,646 @@\n+# Ephemeral resources, variables, outputs, locals and write-only arguments\n+\n+Issue: https://github.com/opentofu/opentofu/issues/1996\n+\n+Right now, OpenTofu information for resources and outputs are written to state as it is. This is presenting a security risk\n+as some of the information from the stored objects can contain sensitive bits that can become visible to whoever is having access to the state file.\n+\n+In order to provide a better solution for the aforementioned situation, OpenTofu introduces the concept of \"ephemerality\".\n+Any new feature under this new concept will provide ways to skip values from being written to the state and plan files.\n+\n+To make this work seamlessly with most of the blocks that OpenTofu supports, the following functionalities need to be able to work with the ephemeral concept:\n+* `resource`'s `write-only` attributes\n+* variables\n+* outputs\n+* locals\n+* `ephemeral` resources\n+* providers\n+* provisioners\n+* `connection` block\n+\n+## Proposed Solution\n+\n+In the attempt of providing to the reader an in-depth understanding of the ephemerality implications in OpenTofu,\n+this section will try to explain the functional approach of the new concept in each existing feature.\n+\n+### Write-only attributes\n+This is a new concept that allows any existing `resource` to define attributes in its schema that can be only written without the ability to retrieve the value afterwards.\n+\n+By not being readable, this also means that an attribute configured by a provider this way, will not be written to the state or plan file either.\n+Therefore, these attributes are suitable for configuring specific resources with sensitive data, like passwords, access keys, etc.\n+\n+A write-only attribute can accept an ephemeral or a non-ephemeral value, even though it's recommended to use ephemeral values for such attributes.\n+\n+Because these attributes are not written to the plan file, the update of a write-only attribute it's getting a little bit trickier.\n+Provider implementations do generally include also a \"version\" argument linked to the write-only one.\n+For example having a write-only argument called `secret`, providers should also include\n+a non-write-only argument called `secret_version`. Every time the user wants to update the value of `secret`, it needs to change the value of `secret_version` to trigger a change.\n+The provider implementation is responsible with handling this particular case: because the version attribute is stored also in the state, the provider needs to compare the value from the state with the one from the configuration and in case it differs, it will trigger the update of the `secret` attribute.\n+\n+The write-only attributes are supported momentarily by a low number of providers and resources.",
        "comment_created_at": "2025-05-13T07:10:03+00:00",
        "comment_author": "yottta",
        "comment_body": "In 91f105241ac49c3c20ba51d52306be62c7ac4c03",
        "pr_file_module": null
      }
    ]
  }
]