[
  {
    "discussion_id": "2056308653",
    "pr_number": 2696,
    "pr_file": "website/docs/language/providers/configuration.mdx",
    "created_at": "2025-04-23T15:24:00+00:00",
    "commented_code": "the default configuration for each provider must always have exactly one\n instance so that OpenTofu can select it automatically when appropriate.\n \n+\n+### Using provider for_each in resources\n+\n+To create multiple instances of a resource in different environments using `for_each`, you can use the following configuration:\n+\n+```hcl\n+provider \"aws\" {\n+  alias    = \"by_region\"\n+  for_each = local.aws_regions\n+  region = each.value\n+}\n+\n+resource \"aws_cloudwatch_log_group\" \"lambda_cloudfront\" {\n+  name     = \"/aws/lambda/${each.key}.lambda\"\n+  for_each = local.aws_regions",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "2056308653",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2696,
        "pr_file": "website/docs/language/providers/configuration.mdx",
        "discussion_id": "2056308653",
        "commented_code": "@@ -214,6 +214,68 @@ The `for_each` argument can only be used in combination with `alias`, because\n the default configuration for each provider must always have exactly one\n instance so that OpenTofu can select it automatically when appropriate.\n \n+\n+### Using provider for_each in resources\n+\n+To create multiple instances of a resource in different environments using `for_each`, you can use the following configuration:\n+\n+```hcl\n+provider \"aws\" {\n+  alias    = \"by_region\"\n+  for_each = local.aws_regions\n+  region = each.value\n+}\n+\n+resource \"aws_cloudwatch_log_group\" \"lambda_cloudfront\" {\n+  name     = \"/aws/lambda/${each.key}.lambda\"\n+  for_each = local.aws_regions",
        "comment_created_at": "2025-04-23T15:24:00+00:00",
        "comment_author": "cam72cam",
        "comment_body": "Can you explain why you chose not to use setsubtract and disabled regions here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2059234303",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2696,
        "pr_file": "website/docs/language/providers/configuration.mdx",
        "discussion_id": "2056308653",
        "commented_code": "@@ -214,6 +214,68 @@ The `for_each` argument can only be used in combination with `alias`, because\n the default configuration for each provider must always have exactly one\n instance so that OpenTofu can select it automatically when appropriate.\n \n+\n+### Using provider for_each in resources\n+\n+To create multiple instances of a resource in different environments using `for_each`, you can use the following configuration:\n+\n+```hcl\n+provider \"aws\" {\n+  alias    = \"by_region\"\n+  for_each = local.aws_regions\n+  region = each.value\n+}\n+\n+resource \"aws_cloudwatch_log_group\" \"lambda_cloudfront\" {\n+  name     = \"/aws/lambda/${each.key}.lambda\"\n+  for_each = local.aws_regions",
        "comment_created_at": "2025-04-24T21:08:06+00:00",
        "comment_author": "diofeher",
        "comment_body": "You're right, while I testing I thought they were different but it seems feature-wise it's exactly the same. To remove from one region, I needed to use the same technique. Do you think it's important to include this information for this work here? I feel it's, because I couldn't find any info for that on the docs.",
        "pr_file_module": null
      },
      {
        "comment_id": "2059240944",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2696,
        "pr_file": "website/docs/language/providers/configuration.mdx",
        "discussion_id": "2056308653",
        "commented_code": "@@ -214,6 +214,68 @@ The `for_each` argument can only be used in combination with `alias`, because\n the default configuration for each provider must always have exactly one\n instance so that OpenTofu can select it automatically when appropriate.\n \n+\n+### Using provider for_each in resources\n+\n+To create multiple instances of a resource in different environments using `for_each`, you can use the following configuration:\n+\n+```hcl\n+provider \"aws\" {\n+  alias    = \"by_region\"\n+  for_each = local.aws_regions\n+  region = each.value\n+}\n+\n+resource \"aws_cloudwatch_log_group\" \"lambda_cloudfront\" {\n+  name     = \"/aws/lambda/${each.key}.lambda\"\n+  for_each = local.aws_regions",
        "comment_created_at": "2025-04-24T21:14:12+00:00",
        "comment_author": "diofeher",
        "comment_body": "I feel that this should be included in a separate section though. Like:\r\n\r\n### Using provider for_each in resources\r\n\r\nsmall introduction\r\n\r\n```\r\nexample\r\n```\r\n\r\n### Using provider for_each in modules\r\n\r\nsmall introduction\r\n\r\n```\r\nexample\r\n```\r\n\r\n### Removing resources from a region\r\n\r\nbigger introduction\r\n\r\n```\r\nexample\r\n```\r\n\r\nBut I feel this can be done in a different PR, maybe. WDYT?",
        "pr_file_module": null
      },
      {
        "comment_id": "2059991856",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2696,
        "pr_file": "website/docs/language/providers/configuration.mdx",
        "discussion_id": "2056308653",
        "commented_code": "@@ -214,6 +214,68 @@ The `for_each` argument can only be used in combination with `alias`, because\n the default configuration for each provider must always have exactly one\n instance so that OpenTofu can select it automatically when appropriate.\n \n+\n+### Using provider for_each in resources\n+\n+To create multiple instances of a resource in different environments using `for_each`, you can use the following configuration:\n+\n+```hcl\n+provider \"aws\" {\n+  alias    = \"by_region\"\n+  for_each = local.aws_regions\n+  region = each.value\n+}\n+\n+resource \"aws_cloudwatch_log_group\" \"lambda_cloudfront\" {\n+  name     = \"/aws/lambda/${each.key}.lambda\"\n+  for_each = local.aws_regions",
        "comment_created_at": "2025-04-25T10:34:17+00:00",
        "comment_author": "cam72cam",
        "comment_body": "To be more explicit, the way that this is currently written (using the same input for both provider and resource's for_each) will cause warnings in OpenTofu.  Those warnings are why we need these docs in the first place.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1868506563",
    "pr_number": 2138,
    "pr_file": "website/docs/language/providers/configuration.mdx",
    "created_at": "2024-12-03T23:43:16+00:00",
    "commented_code": "}\n ```\n \n-To select alternate provider configurations for a child module, use its\n-`providers` meta-argument to specify which provider configurations should be\n-mapped to which local provider names inside the module:\n+If the selected configuration uses the `for_each` argument to declare\n+multiple instances then the `provider` argument must also include\n+an instance key expression to select one instance of the provider\n+configuration per resource instance as described in the next section.\n+\n+Omitting the `provider` argument is equivalent to setting it to\n+choose the default configuration for the provider whose local name\n+matches the resource type name's prefix:\n+\n+```hcl\n+resource \"aws_instance\" \"foo\" {\n+  provider = aws\n+\n+  # ...\n+}\n+```\n+\n+## Referring to Provider Instances\n+\n+{/* old section anchor to preserve existing external links */}\n+<a id=\"referring-to-alternate-provider-configurations\"></a>\n+\n+To explicitly refer to provider configurations, OpenTofu uses a\n+provider-configuration-specific reference syntax of the form\n+`<PROVIDER NAME>.<ALIAS>`. For example, `aws.west` refers to the\n+`provider \"aws\"` block with `alias = \"west\"`.\n+\n+This syntax uses similar symbols to a normal\n+[expression reference](../../language/expressions/references.mdx), but\n+provider references are not normal expressions and can only be used\n+in some special locations:\n+\n+- [The `provider` meta-argument of a `resource` or `data` block](../../language/meta-arguments/resource-provider.mdx)\n+- [The `providers` meta-argument of a `module` block](../../language/meta-arguments/module-providers.mdx)\n+\n+For a provider configuration that does not include `for_each`, the same\n+syntax used to refer to the configuration is also a reference to its\n+single provider instance, so in most cases you can think of a provider\n+configuration reference and a provider instance reference as equivalent.\n+\n+However, when a provider configuration declares zero or more dynamic\n+instances using `for_each` the reference syntax grows to include an\n+additional component which specifies which instance to select using\n+the configuration's instance keys. For example, `aws.by_region[\"eu-west-1\"]`\n+refers to whichever instance of `aws.by_region` has the instance\n+key `\"eu-west-1\"`.\n+\n+The expression in square brackets uses [normal expression syntax](../../language/expressions/index.mdx),\n+and typically the instance key would be selected dynamically for each\n+instance of a resource rather than hard-coded. For example:\n \n ```hcl\n-module \"aws_vpc\" {\n-  source = \"./aws_vpc\"\n-  providers = {\n-    aws = aws.west\n+variable \"aws_regions\" {\n+  type = map(object({\n+    vpc_cidr_block = string\n+  }))\n+}\n+\n+provider \"aws\" {\n+  alias    = \"by_region\"\n+  for_each = var.aws_regions\n+\n+  region = each.key\n+}\n+\n+resource \"aws_vpc\" \"private\" {\n+  # This expression filters var.aws_regions to include only\n+  # the elements whose value is not null. Refer to the\n+  # warning in the text below for more information.\n+  for_each = {\n+    for region, config in var.aws_regions : region => config\n+    if config != null\n   }\n+  provider = aws.by_region[each.key]\n+\n+  cidr_block = each.value.vpc_cidr_block\n }\n ```\n \n-Modules have some special requirements when passing in providers; see\n-[The Module `providers` Meta-Argument](../../language/meta-arguments/module-providers.mdx)\n-for more details. In most cases, only _root modules_ should define provider\n-configurations, with all child modules obtaining their provider configurations\n-from their parents.\n+The `resource \"aws_vpc\" \"private\"` block uses `for_each` to declare one\n+instance of the resource for each non-null element of `var.aws_regions`.\n+The `provider` argument then uses `each.key` to select a different\n+instance of `aws.by_region` for each instance of the resource, so that\n+each would be declared in a different region.\n+\n+You can also choose a dynamic instance from a provider configuration for\n+all resources in a child module as part of a `module` block. Refer to\n+[Module instances with differing provider instances](../../language/meta-arguments/module-providers.mdx#module-instances-with-differing-provider-instances)\n+for more information.\n+\n+Although the instance key expression in square brackets is dynamic, the\n+provider configuration reference is static so that OpenTofu can infer the\n+dependencies between `resource` blocks and `provider` blocks before\n+evaluating any expressions. The dependencies then ensure that OpenTofu\n+can resolve dynamic expressions in the correct order. This means that\n+all instances of a particular resource must be bound to instances of the\n+same provider configuration block, but can they each be bound to a different\n+instance.\n+\n+:::warning\n+**The `for_each` expression for a resource must not exactly match the\n+`for_each` expression for its associated provider configuration.**\n+\n+OpenTofu uses a provider instance to plan and apply _all_ actions related\n+to a resource instance, including destroying a resource instance that\n+has been removed from the configuration.\n+\n+Therefore the provider instance associated with any resource instance must\n+always remain in the configuration for at least one more plan/apply round\n+after the resource instance has been removed, or OpenTofu will fail to\n+plan to destroy the resource instance.\n+\n+The above example uses a null element in `var.aws_regions` to represent\n+that a provider instance is needed but no resource instances should be\n+associated with it.\n+\n+Setting a particular region's element to `null` would therefore cause\n+OpenTofu to propose to destroy the `aws_vpc.private` instance for that\n+region while retaining the provider instance needed to plan and apply that\n+action. You can then remove the element altogether on the next round, once\n+all of the associated resource instances have been destroyed.\n+:::\n+\n+### Passing provider configurations between modules\n+\n+Each module has its own separate namespace of provider configurations, but\n+it's possible for a parent module to pass some or all of its provider\n+configurations into provider configuration addresses declared in a\n+child module.",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "1868506563",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2138,
        "pr_file": "website/docs/language/providers/configuration.mdx",
        "discussion_id": "1868506563",
        "commented_code": "@@ -160,24 +235,138 @@ resource \"aws_instance\" \"foo\" {\n }\n ```\n \n-To select alternate provider configurations for a child module, use its\n-`providers` meta-argument to specify which provider configurations should be\n-mapped to which local provider names inside the module:\n+If the selected configuration uses the `for_each` argument to declare\n+multiple instances then the `provider` argument must also include\n+an instance key expression to select one instance of the provider\n+configuration per resource instance as described in the next section.\n+\n+Omitting the `provider` argument is equivalent to setting it to\n+choose the default configuration for the provider whose local name\n+matches the resource type name's prefix:\n+\n+```hcl\n+resource \"aws_instance\" \"foo\" {\n+  provider = aws\n+\n+  # ...\n+}\n+```\n+\n+## Referring to Provider Instances\n+\n+{/* old section anchor to preserve existing external links */}\n+<a id=\"referring-to-alternate-provider-configurations\"></a>\n+\n+To explicitly refer to provider configurations, OpenTofu uses a\n+provider-configuration-specific reference syntax of the form\n+`<PROVIDER NAME>.<ALIAS>`. For example, `aws.west` refers to the\n+`provider \"aws\"` block with `alias = \"west\"`.\n+\n+This syntax uses similar symbols to a normal\n+[expression reference](../../language/expressions/references.mdx), but\n+provider references are not normal expressions and can only be used\n+in some special locations:\n+\n+- [The `provider` meta-argument of a `resource` or `data` block](../../language/meta-arguments/resource-provider.mdx)\n+- [The `providers` meta-argument of a `module` block](../../language/meta-arguments/module-providers.mdx)\n+\n+For a provider configuration that does not include `for_each`, the same\n+syntax used to refer to the configuration is also a reference to its\n+single provider instance, so in most cases you can think of a provider\n+configuration reference and a provider instance reference as equivalent.\n+\n+However, when a provider configuration declares zero or more dynamic\n+instances using `for_each` the reference syntax grows to include an\n+additional component which specifies which instance to select using\n+the configuration's instance keys. For example, `aws.by_region[\"eu-west-1\"]`\n+refers to whichever instance of `aws.by_region` has the instance\n+key `\"eu-west-1\"`.\n+\n+The expression in square brackets uses [normal expression syntax](../../language/expressions/index.mdx),\n+and typically the instance key would be selected dynamically for each\n+instance of a resource rather than hard-coded. For example:\n \n ```hcl\n-module \"aws_vpc\" {\n-  source = \"./aws_vpc\"\n-  providers = {\n-    aws = aws.west\n+variable \"aws_regions\" {\n+  type = map(object({\n+    vpc_cidr_block = string\n+  }))\n+}\n+\n+provider \"aws\" {\n+  alias    = \"by_region\"\n+  for_each = var.aws_regions\n+\n+  region = each.key\n+}\n+\n+resource \"aws_vpc\" \"private\" {\n+  # This expression filters var.aws_regions to include only\n+  # the elements whose value is not null. Refer to the\n+  # warning in the text below for more information.\n+  for_each = {\n+    for region, config in var.aws_regions : region => config\n+    if config != null\n   }\n+  provider = aws.by_region[each.key]\n+\n+  cidr_block = each.value.vpc_cidr_block\n }\n ```\n \n-Modules have some special requirements when passing in providers; see\n-[The Module `providers` Meta-Argument](../../language/meta-arguments/module-providers.mdx)\n-for more details. In most cases, only _root modules_ should define provider\n-configurations, with all child modules obtaining their provider configurations\n-from their parents.\n+The `resource \"aws_vpc\" \"private\"` block uses `for_each` to declare one\n+instance of the resource for each non-null element of `var.aws_regions`.\n+The `provider` argument then uses `each.key` to select a different\n+instance of `aws.by_region` for each instance of the resource, so that\n+each would be declared in a different region.\n+\n+You can also choose a dynamic instance from a provider configuration for\n+all resources in a child module as part of a `module` block. Refer to\n+[Module instances with differing provider instances](../../language/meta-arguments/module-providers.mdx#module-instances-with-differing-provider-instances)\n+for more information.\n+\n+Although the instance key expression in square brackets is dynamic, the\n+provider configuration reference is static so that OpenTofu can infer the\n+dependencies between `resource` blocks and `provider` blocks before\n+evaluating any expressions. The dependencies then ensure that OpenTofu\n+can resolve dynamic expressions in the correct order. This means that\n+all instances of a particular resource must be bound to instances of the\n+same provider configuration block, but can they each be bound to a different\n+instance.\n+\n+:::warning\n+**The `for_each` expression for a resource must not exactly match the\n+`for_each` expression for its associated provider configuration.**\n+\n+OpenTofu uses a provider instance to plan and apply _all_ actions related\n+to a resource instance, including destroying a resource instance that\n+has been removed from the configuration.\n+\n+Therefore the provider instance associated with any resource instance must\n+always remain in the configuration for at least one more plan/apply round\n+after the resource instance has been removed, or OpenTofu will fail to\n+plan to destroy the resource instance.\n+\n+The above example uses a null element in `var.aws_regions` to represent\n+that a provider instance is needed but no resource instances should be\n+associated with it.\n+\n+Setting a particular region's element to `null` would therefore cause\n+OpenTofu to propose to destroy the `aws_vpc.private` instance for that\n+region while retaining the provider instance needed to plan and apply that\n+action. You can then remove the element altogether on the next round, once\n+all of the associated resource instances have been destroyed.\n+:::\n+\n+### Passing provider configurations between modules\n+\n+Each module has its own separate namespace of provider configurations, but\n+it's possible for a parent module to pass some or all of its provider\n+configurations into provider configuration addresses declared in a\n+child module.",
        "comment_created_at": "2024-12-03T23:43:16+00:00",
        "comment_author": "cam72cam",
        "comment_body": "Perhaps a note that we don't support provider instances passed into child modules without selection.",
        "pr_file_module": null
      },
      {
        "comment_id": "1870290846",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2138,
        "pr_file": "website/docs/language/providers/configuration.mdx",
        "discussion_id": "1868506563",
        "commented_code": "@@ -160,24 +235,138 @@ resource \"aws_instance\" \"foo\" {\n }\n ```\n \n-To select alternate provider configurations for a child module, use its\n-`providers` meta-argument to specify which provider configurations should be\n-mapped to which local provider names inside the module:\n+If the selected configuration uses the `for_each` argument to declare\n+multiple instances then the `provider` argument must also include\n+an instance key expression to select one instance of the provider\n+configuration per resource instance as described in the next section.\n+\n+Omitting the `provider` argument is equivalent to setting it to\n+choose the default configuration for the provider whose local name\n+matches the resource type name's prefix:\n+\n+```hcl\n+resource \"aws_instance\" \"foo\" {\n+  provider = aws\n+\n+  # ...\n+}\n+```\n+\n+## Referring to Provider Instances\n+\n+{/* old section anchor to preserve existing external links */}\n+<a id=\"referring-to-alternate-provider-configurations\"></a>\n+\n+To explicitly refer to provider configurations, OpenTofu uses a\n+provider-configuration-specific reference syntax of the form\n+`<PROVIDER NAME>.<ALIAS>`. For example, `aws.west` refers to the\n+`provider \"aws\"` block with `alias = \"west\"`.\n+\n+This syntax uses similar symbols to a normal\n+[expression reference](../../language/expressions/references.mdx), but\n+provider references are not normal expressions and can only be used\n+in some special locations:\n+\n+- [The `provider` meta-argument of a `resource` or `data` block](../../language/meta-arguments/resource-provider.mdx)\n+- [The `providers` meta-argument of a `module` block](../../language/meta-arguments/module-providers.mdx)\n+\n+For a provider configuration that does not include `for_each`, the same\n+syntax used to refer to the configuration is also a reference to its\n+single provider instance, so in most cases you can think of a provider\n+configuration reference and a provider instance reference as equivalent.\n+\n+However, when a provider configuration declares zero or more dynamic\n+instances using `for_each` the reference syntax grows to include an\n+additional component which specifies which instance to select using\n+the configuration's instance keys. For example, `aws.by_region[\"eu-west-1\"]`\n+refers to whichever instance of `aws.by_region` has the instance\n+key `\"eu-west-1\"`.\n+\n+The expression in square brackets uses [normal expression syntax](../../language/expressions/index.mdx),\n+and typically the instance key would be selected dynamically for each\n+instance of a resource rather than hard-coded. For example:\n \n ```hcl\n-module \"aws_vpc\" {\n-  source = \"./aws_vpc\"\n-  providers = {\n-    aws = aws.west\n+variable \"aws_regions\" {\n+  type = map(object({\n+    vpc_cidr_block = string\n+  }))\n+}\n+\n+provider \"aws\" {\n+  alias    = \"by_region\"\n+  for_each = var.aws_regions\n+\n+  region = each.key\n+}\n+\n+resource \"aws_vpc\" \"private\" {\n+  # This expression filters var.aws_regions to include only\n+  # the elements whose value is not null. Refer to the\n+  # warning in the text below for more information.\n+  for_each = {\n+    for region, config in var.aws_regions : region => config\n+    if config != null\n   }\n+  provider = aws.by_region[each.key]\n+\n+  cidr_block = each.value.vpc_cidr_block\n }\n ```\n \n-Modules have some special requirements when passing in providers; see\n-[The Module `providers` Meta-Argument](../../language/meta-arguments/module-providers.mdx)\n-for more details. In most cases, only _root modules_ should define provider\n-configurations, with all child modules obtaining their provider configurations\n-from their parents.\n+The `resource \"aws_vpc\" \"private\"` block uses `for_each` to declare one\n+instance of the resource for each non-null element of `var.aws_regions`.\n+The `provider` argument then uses `each.key` to select a different\n+instance of `aws.by_region` for each instance of the resource, so that\n+each would be declared in a different region.\n+\n+You can also choose a dynamic instance from a provider configuration for\n+all resources in a child module as part of a `module` block. Refer to\n+[Module instances with differing provider instances](../../language/meta-arguments/module-providers.mdx#module-instances-with-differing-provider-instances)\n+for more information.\n+\n+Although the instance key expression in square brackets is dynamic, the\n+provider configuration reference is static so that OpenTofu can infer the\n+dependencies between `resource` blocks and `provider` blocks before\n+evaluating any expressions. The dependencies then ensure that OpenTofu\n+can resolve dynamic expressions in the correct order. This means that\n+all instances of a particular resource must be bound to instances of the\n+same provider configuration block, but can they each be bound to a different\n+instance.\n+\n+:::warning\n+**The `for_each` expression for a resource must not exactly match the\n+`for_each` expression for its associated provider configuration.**\n+\n+OpenTofu uses a provider instance to plan and apply _all_ actions related\n+to a resource instance, including destroying a resource instance that\n+has been removed from the configuration.\n+\n+Therefore the provider instance associated with any resource instance must\n+always remain in the configuration for at least one more plan/apply round\n+after the resource instance has been removed, or OpenTofu will fail to\n+plan to destroy the resource instance.\n+\n+The above example uses a null element in `var.aws_regions` to represent\n+that a provider instance is needed but no resource instances should be\n+associated with it.\n+\n+Setting a particular region's element to `null` would therefore cause\n+OpenTofu to propose to destroy the `aws_vpc.private` instance for that\n+region while retaining the provider instance needed to plan and apply that\n+action. You can then remove the element altogether on the next round, once\n+all of the associated resource instances have been destroyed.\n+:::\n+\n+### Passing provider configurations between modules\n+\n+Each module has its own separate namespace of provider configurations, but\n+it's possible for a parent module to pass some or all of its provider\n+configurations into provider configuration addresses declared in a\n+child module.",
        "comment_created_at": "2024-12-04T21:17:09+00:00",
        "comment_author": "apparentlymart",
        "comment_body": "This section is only here to connect with the docs about the `providers` argument in `module` blocks (linked below), which I think is the more natural home for that information.\r\n\r\nAs the moment that's only lightly _implied_ by the words on the page, rather than explicitly stated, but I'll add an extra paragraph to the other page to make that explicit.",
        "pr_file_module": null
      }
    ]
  }
]