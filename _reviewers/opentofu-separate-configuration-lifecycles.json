[
  {
    "discussion_id": "1723778054",
    "pr_number": 1911,
    "pr_file": "internal/configs/provider.go",
    "created_at": "2024-08-20T18:35:36+00:00",
    "commented_code": "Name       string\n \tNameRange  hcl.Range\n \tAlias      string\n-\tAliasRange *hcl.Range // nil if no alias set\n+\tAliasExpr  hcl.Expression // nil if no alias set\n+\tAliasRange *hcl.Range     // nil if no alias set\n+\tForEach    hcl.Expression\n+\tEachValue  *cty.Value\n+\tCount      hcl.Expression\n+\tCountIndex *cty.Value",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "1723778054",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1911,
        "pr_file": "internal/configs/provider.go",
        "discussion_id": "1723778054",
        "commented_code": "@@ -23,7 +25,12 @@ type Provider struct {\n \tName       string\n \tNameRange  hcl.Range\n \tAlias      string\n-\tAliasRange *hcl.Range // nil if no alias set\n+\tAliasExpr  hcl.Expression // nil if no alias set\n+\tAliasRange *hcl.Range     // nil if no alias set\n+\tForEach    hcl.Expression\n+\tEachValue  *cty.Value\n+\tCount      hcl.Expression\n+\tCountIndex *cty.Value",
        "comment_created_at": "2024-08-20T18:35:36+00:00",
        "comment_author": "Evi1Pumpkin",
        "comment_body": "Two things that quite bother me with this implementation:\r\n1. This struct is no longer as described in the comment above: `Provider represents a \"provider\" block in a module or file.` It sometimes represents a block and sometimes a provider \"instance\".\r\n2. Now, it holds two responsibilities and changes based on the application's lifecycle. If `tofu` is in the stage of reading the configuration, this struct represents the `provider` block. If `tofu` is building the module tree and populating the providers (after calling `decodeStaticFields()`), the struct now describes a specific \"instance\" of the provider.\r\n\r\nThis implementation is quite confusing and different from the practices in the tofu repository. Maybe we should consider adding a different struct that will include the `EachValue` and `CountIndex`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1724092350",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1911,
        "pr_file": "internal/configs/provider.go",
        "discussion_id": "1723778054",
        "commented_code": "@@ -23,7 +25,12 @@ type Provider struct {\n \tName       string\n \tNameRange  hcl.Range\n \tAlias      string\n-\tAliasRange *hcl.Range // nil if no alias set\n+\tAliasExpr  hcl.Expression // nil if no alias set\n+\tAliasRange *hcl.Range     // nil if no alias set\n+\tForEach    hcl.Expression\n+\tEachValue  *cty.Value\n+\tCount      hcl.Expression\n+\tCountIndex *cty.Value",
        "comment_created_at": "2024-08-20T23:30:23+00:00",
        "comment_author": "cam72cam",
        "comment_body": "1. It's more so a \"provider block\" vs \"provider block with instance data\"\r\n2. This is true, the expansion here feels a bit weird IMO and I noticed that during the prototype phase.  This change is the \"low churn\" option, but adds cognitive load to understanding provider configs in the configs package. \r\n\r\nThere are technically 3 levels of config parsing that are all mixed together:\r\n1. hcl/json text -> configs.File (HCL loading)\r\n2. configs.File -> configs.Module (merging files)\r\n3. configs.Module -> configs.Module (static evaluation)\r\n\r\nEven before static evaluation was added, there were all sorts of odd validation bugs all throughout the code when dealing with overrides.  Static evaluation shines more of a light on this.\r\n\r\nIn this specific scenario, we would need:\r\n```go\r\n\r\n// File parsing produces\r\ntype configs.ProviderBlock struct {\r\n  // 1-1 mapping to HCL\r\n}\r\n\r\n// Module struct from Files (normal+override) produces\r\ntype configs.ProviderData struct {\r\n  // Closer to existing struct\r\n  ForEach hcl.Expression\r\n  Count hcl.Expression\r\n}\r\n// Validation is performed when constructing ProviderData\r\n\r\n// func (ProviderData) expand(StaticContext) []Provider\r\n\r\n// Expanded into one or more\r\ntype configs.Provider struct {\r\n  // Matches existing struct\r\n  \r\n  ForEachValue *cty.Value\r\n  CountValue *cty.Value\r\n  // OR\r\n  InstanceData instances.RepetitionData\r\n}\r\n```\r\n\r\n\r\nFor the purposes of this PR, we could merge the concept of ProviderBlock and ProviderData to reduce the potential set of changes as it is a less important distinction IMO.",
        "pr_file_module": null
      },
      {
        "comment_id": "1724627040",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1911,
        "pr_file": "internal/configs/provider.go",
        "discussion_id": "1723778054",
        "commented_code": "@@ -23,7 +25,12 @@ type Provider struct {\n \tName       string\n \tNameRange  hcl.Range\n \tAlias      string\n-\tAliasRange *hcl.Range // nil if no alias set\n+\tAliasExpr  hcl.Expression // nil if no alias set\n+\tAliasRange *hcl.Range     // nil if no alias set\n+\tForEach    hcl.Expression\n+\tEachValue  *cty.Value\n+\tCount      hcl.Expression\n+\tCountIndex *cty.Value",
        "comment_created_at": "2024-08-21T08:12:19+00:00",
        "comment_author": "Evi1Pumpkin",
        "comment_body": "I agree ^\r\nAlso, I prefer the usage of InstanceData instances.RepetitionData over ForEachValue and CountValue.",
        "pr_file_module": null
      },
      {
        "comment_id": "1724628554",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1911,
        "pr_file": "internal/configs/provider.go",
        "discussion_id": "1723778054",
        "commented_code": "@@ -23,7 +25,12 @@ type Provider struct {\n \tName       string\n \tNameRange  hcl.Range\n \tAlias      string\n-\tAliasRange *hcl.Range // nil if no alias set\n+\tAliasExpr  hcl.Expression // nil if no alias set\n+\tAliasRange *hcl.Range     // nil if no alias set\n+\tForEach    hcl.Expression\n+\tEachValue  *cty.Value\n+\tCount      hcl.Expression\n+\tCountIndex *cty.Value",
        "comment_created_at": "2024-08-21T08:13:18+00:00",
        "comment_author": "ollevche",
        "comment_body": "We already track some of the modernization/refactoring issues and I would suggest we document that down to address later. Both @Evi1Pumpkin and @cam72cam arguments sound pretty reasonable.\r\n\r\nBreaking down config package structures into different stages such as loading (raw) and evaluation (ready for graph processing) makes perfect sense to me.",
        "pr_file_module": null
      },
      {
        "comment_id": "1725107104",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1911,
        "pr_file": "internal/configs/provider.go",
        "discussion_id": "1723778054",
        "commented_code": "@@ -23,7 +25,12 @@ type Provider struct {\n \tName       string\n \tNameRange  hcl.Range\n \tAlias      string\n-\tAliasRange *hcl.Range // nil if no alias set\n+\tAliasExpr  hcl.Expression // nil if no alias set\n+\tAliasRange *hcl.Range     // nil if no alias set\n+\tForEach    hcl.Expression\n+\tEachValue  *cty.Value\n+\tCount      hcl.Expression\n+\tCountIndex *cty.Value",
        "comment_created_at": "2024-08-21T13:58:51+00:00",
        "comment_author": "Andrew-Hayes",
        "comment_body": "We discussed this offline. The agreement was to go with @cam72cam 's suggestion and do 2 structs: one that captures the understanding of \"pre-evaluation\" and one that is \"post evaluation\". Then we will revisit in future with an RFC on larger refactoring work.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1768239738",
    "pr_number": 1963,
    "pr_file": "internal/states/statefile/version4.go",
    "created_at": "2024-09-20T08:52:50+00:00",
    "commented_code": "Type           string                  `json:\"type\"`\n \tName           string                  `json:\"name\"`\n \tEachMode       string                  `json:\"each,omitempty\"`\n-\tProviderConfig string                  `json:\"provider\"`\n+\tProviderConfig string                  `json:\"provider,omitempty\"` // Ronny TODO: Do we want to omit? Or save an empty string / nil?",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "1768239738",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1963,
        "pr_file": "internal/states/statefile/version4.go",
        "discussion_id": "1768239738",
        "commented_code": "@@ -710,7 +740,7 @@ type resourceStateV4 struct {\n \tType           string                  `json:\"type\"`\n \tName           string                  `json:\"name\"`\n \tEachMode       string                  `json:\"each,omitempty\"`\n-\tProviderConfig string                  `json:\"provider\"`\n+\tProviderConfig string                  `json:\"provider,omitempty\"` // Ronny TODO: Do we want to omit? Or save an empty string / nil?",
        "comment_created_at": "2024-09-20T08:52:50+00:00",
        "comment_author": "Evi1Pumpkin",
        "comment_body": "This is something I'm still considering:\r\nUntil now, we have a `provider` property in each resource in the state. Now, the provider might be set on the whole resource as before or set specifically on the instance. \r\nWhat should we do when the provider is set on the instance? Should we remove the `provider` property from the resource completely (like in this change) or keep it with an empty value?\r\nWe should consider if external tools are parsing that state file and if they expect a specific structure.",
        "pr_file_module": null
      },
      {
        "comment_id": "1776785328",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1963,
        "pr_file": "internal/states/statefile/version4.go",
        "discussion_id": "1768239738",
        "commented_code": "@@ -710,7 +740,7 @@ type resourceStateV4 struct {\n \tType           string                  `json:\"type\"`\n \tName           string                  `json:\"name\"`\n \tEachMode       string                  `json:\"each,omitempty\"`\n-\tProviderConfig string                  `json:\"provider\"`\n+\tProviderConfig string                  `json:\"provider,omitempty\"` // Ronny TODO: Do we want to omit? Or save an empty string / nil?",
        "comment_created_at": "2024-09-26T10:19:01+00:00",
        "comment_author": "ollevche",
        "comment_body": "IMO we have to ensure other tools **fail** correctly if this field is something they rely on. I think it should be omit completely.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1751783886",
    "pr_number": 1960,
    "pr_file": "internal/configs/config.go",
    "created_at": "2024-09-10T11:37:04+00:00",
    "commented_code": "})\n \t\t\t\t\tcontinue\n \t\t\t\t}\n-\t\t\t\tif i.ProviderConfigRef.Name != target.ProviderConfigRef.Name || i.ProviderConfigRef.Alias != target.ProviderConfigRef.GetNoKeyAlias() {\n+\n+\t\t\t\t// We want to compare aliases only if there is no `each` or `count` inside a resource provider reference.\n+\t\t\t\thaveIncompatibleAliases := true\n+\t\t\t\tif !target.ProviderConfigRef.HasInstanceRefsInAlias() {",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "1751783886",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1960,
        "pr_file": "internal/configs/config.go",
        "discussion_id": "1751783886",
        "commented_code": "@@ -484,7 +484,14 @@ func (c *Config) addProviderRequirements(reqs getproviders.Requirements, recurse\n \t\t\t\t\t})\n \t\t\t\t\tcontinue\n \t\t\t\t}\n-\t\t\t\tif i.ProviderConfigRef.Name != target.ProviderConfigRef.Name || i.ProviderConfigRef.Alias != target.ProviderConfigRef.GetNoKeyAlias() {\n+\n+\t\t\t\t// We want to compare aliases only if there is no `each` or `count` inside a resource provider reference.\n+\t\t\t\thaveIncompatibleAliases := true\n+\t\t\t\tif !target.ProviderConfigRef.HasInstanceRefsInAlias() {",
        "comment_created_at": "2024-09-10T11:37:04+00:00",
        "comment_author": "cam72cam",
        "comment_body": "I wonder if a pattern like `alias, ok := target.ref.KnownAlias(); ok` would make more sense here?  I also stink at naming functions.",
        "pr_file_module": null
      },
      {
        "comment_id": "1751785256",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1960,
        "pr_file": "internal/configs/config.go",
        "discussion_id": "1751783886",
        "commented_code": "@@ -484,7 +484,14 @@ func (c *Config) addProviderRequirements(reqs getproviders.Requirements, recurse\n \t\t\t\t\t})\n \t\t\t\t\tcontinue\n \t\t\t\t}\n-\t\t\t\tif i.ProviderConfigRef.Name != target.ProviderConfigRef.Name || i.ProviderConfigRef.Alias != target.ProviderConfigRef.GetNoKeyAlias() {\n+\n+\t\t\t\t// We want to compare aliases only if there is no `each` or `count` inside a resource provider reference.\n+\t\t\t\thaveIncompatibleAliases := true\n+\t\t\t\tif !target.ProviderConfigRef.HasInstanceRefsInAlias() {",
        "comment_created_at": "2024-09-10T11:38:09+00:00",
        "comment_author": "cam72cam",
        "comment_body": "Given that import blocks are only allowed in the root module, we should know the exact provider alias and can treat any unknowns here as a bug?",
        "pr_file_module": null
      },
      {
        "comment_id": "1751794464",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1960,
        "pr_file": "internal/configs/config.go",
        "discussion_id": "1751783886",
        "commented_code": "@@ -484,7 +484,14 @@ func (c *Config) addProviderRequirements(reqs getproviders.Requirements, recurse\n \t\t\t\t\t})\n \t\t\t\t\tcontinue\n \t\t\t\t}\n-\t\t\t\tif i.ProviderConfigRef.Name != target.ProviderConfigRef.Name || i.ProviderConfigRef.Alias != target.ProviderConfigRef.GetNoKeyAlias() {\n+\n+\t\t\t\t// We want to compare aliases only if there is no `each` or `count` inside a resource provider reference.\n+\t\t\t\thaveIncompatibleAliases := true\n+\t\t\t\tif !target.ProviderConfigRef.HasInstanceRefsInAlias() {",
        "comment_created_at": "2024-09-10T11:45:25+00:00",
        "comment_author": "ollevche",
        "comment_body": "We treat it as an error because the provider could be set in both resource and import blocks. If that is the case, providers (and aliases) should match. If the provider alias contains `each` / `count`, they will be different for sure so we error. Does it answer your question?",
        "pr_file_module": null
      },
      {
        "comment_id": "1751848328",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1960,
        "pr_file": "internal/configs/config.go",
        "discussion_id": "1751783886",
        "commented_code": "@@ -484,7 +484,14 @@ func (c *Config) addProviderRequirements(reqs getproviders.Requirements, recurse\n \t\t\t\t\t})\n \t\t\t\t\tcontinue\n \t\t\t\t}\n-\t\t\t\tif i.ProviderConfigRef.Name != target.ProviderConfigRef.Name || i.ProviderConfigRef.Alias != target.ProviderConfigRef.GetNoKeyAlias() {\n+\n+\t\t\t\t// We want to compare aliases only if there is no `each` or `count` inside a resource provider reference.\n+\t\t\t\thaveIncompatibleAliases := true\n+\t\t\t\tif !target.ProviderConfigRef.HasInstanceRefsInAlias() {",
        "comment_created_at": "2024-09-10T12:25:09+00:00",
        "comment_author": "ollevche",
        "comment_body": "Extended the comments in [82308c0](https://github.com/opentofu/opentofu/pull/1960/commits/82308c030a18c975a39138db95a8bd4adaf81945)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1723586493",
    "pr_number": 1911,
    "pr_file": "internal/configs/provider.go",
    "created_at": "2024-08-20T16:09:09+00:00",
    "commented_code": "}\n \treturn diags\n }\n+\n+func (p *Provider) generateForEachProviders(eval *StaticEvaluator) ([]*Provider, hcl.Diagnostics) {\n+\tvar diags hcl.Diagnostics\n+\tif eval == nil {\n+\t\treturn nil, diags.Append(&hcl.Diagnostic{\n+\t\t\tSeverity: hcl.DiagError,\n+\t\t\tSummary:  \"Iteration not allowed in test files\",\n+\t\t\tDetail:   \"for_each was declared as an provider attribute in a test file\",\n+\t\t\tSubject:  p.AliasExpr.Range().Ptr(),\n+\t\t})\n+\t}\n+\n+\tfoeachRefsFunc := func(refs []*addrs.Reference) (*hcl.EvalContext, tfdiags.Diagnostics) {\n+\t\tvar diags tfdiags.Diagnostics\n+\t\tevalContext, evalDiags := eval.EvalContext(StaticIdentifier{\n+\t\t\tModule:    eval.call.addr,\n+\t\t\tSubject:   fmt.Sprintf(\"provider.%s.for_each\", p.Name),\n+\t\t\tDeclRange: p.ForEach.Range(),\n+\t\t}, refs)\n+\t\treturn evalContext, diags.Append(evalDiags)\n+\t}\n+\n+\tforVal, evalDiags := evalchecks.EvaluateForEachExpression(p.ForEach, foeachRefsFunc)\n+\tdiags = append(diags, evalDiags.ToHCL()...)\n+\tif evalDiags.HasErrors() {\n+\t\treturn nil, diags\n+\t}\n+\n+\tvar out []*Provider\n+\tfor k, v := range forVal {\n+\t\tif !hclsyntax.ValidIdentifier(k) {\n+\t\t\treturn nil, diags.Append(&hcl.Diagnostic{\n+\t\t\t\tSeverity: hcl.DiagError,\n+\t\t\t\tSummary:  \"Invalid Identifier\",\n+\t\t\t\tDetail:   fmt.Sprintf(\"The provided identifier %s is invalid\", k),\n+\t\t\t\tSubject:  p.ForEach.Range().Ptr(),\n+\t\t\t})\n+\t\t}\n+\n+\t\tv := v\n+\t\titer := *p\n+\t\titer.Alias = k\n+\t\titer.EachValue = &v\n+\t\titer.ForEach = nil\n+\t\tout = append(out, &iter)\n+\t}\n+\treturn out, diags\n+}\n+\n+func (p *Provider) generateCountProviders(eval *StaticEvaluator) ([]*Provider, hcl.Diagnostics) {\n+\tvar diags hcl.Diagnostics\n+\tif eval == nil {\n+\t\treturn nil, diags.Append(&hcl.Diagnostic{\n+\t\t\tSeverity: hcl.DiagError,\n+\t\t\tSummary:  \"Iteration not allowed in test files\",\n+\t\t\tDetail:   \"for_each was declared as an provider attribute in a test file\",",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "1723586493",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1911,
        "pr_file": "internal/configs/provider.go",
        "discussion_id": "1723586493",
        "commented_code": "@@ -290,3 +333,89 @@ func checkProviderNameNormalized(name string, declrange hcl.Range) hcl.Diagnosti\n \t}\n \treturn diags\n }\n+\n+func (p *Provider) generateForEachProviders(eval *StaticEvaluator) ([]*Provider, hcl.Diagnostics) {\n+\tvar diags hcl.Diagnostics\n+\tif eval == nil {\n+\t\treturn nil, diags.Append(&hcl.Diagnostic{\n+\t\t\tSeverity: hcl.DiagError,\n+\t\t\tSummary:  \"Iteration not allowed in test files\",\n+\t\t\tDetail:   \"for_each was declared as an provider attribute in a test file\",\n+\t\t\tSubject:  p.AliasExpr.Range().Ptr(),\n+\t\t})\n+\t}\n+\n+\tfoeachRefsFunc := func(refs []*addrs.Reference) (*hcl.EvalContext, tfdiags.Diagnostics) {\n+\t\tvar diags tfdiags.Diagnostics\n+\t\tevalContext, evalDiags := eval.EvalContext(StaticIdentifier{\n+\t\t\tModule:    eval.call.addr,\n+\t\t\tSubject:   fmt.Sprintf(\"provider.%s.for_each\", p.Name),\n+\t\t\tDeclRange: p.ForEach.Range(),\n+\t\t}, refs)\n+\t\treturn evalContext, diags.Append(evalDiags)\n+\t}\n+\n+\tforVal, evalDiags := evalchecks.EvaluateForEachExpression(p.ForEach, foeachRefsFunc)\n+\tdiags = append(diags, evalDiags.ToHCL()...)\n+\tif evalDiags.HasErrors() {\n+\t\treturn nil, diags\n+\t}\n+\n+\tvar out []*Provider\n+\tfor k, v := range forVal {\n+\t\tif !hclsyntax.ValidIdentifier(k) {\n+\t\t\treturn nil, diags.Append(&hcl.Diagnostic{\n+\t\t\t\tSeverity: hcl.DiagError,\n+\t\t\t\tSummary:  \"Invalid Identifier\",\n+\t\t\t\tDetail:   fmt.Sprintf(\"The provided identifier %s is invalid\", k),\n+\t\t\t\tSubject:  p.ForEach.Range().Ptr(),\n+\t\t\t})\n+\t\t}\n+\n+\t\tv := v\n+\t\titer := *p\n+\t\titer.Alias = k\n+\t\titer.EachValue = &v\n+\t\titer.ForEach = nil\n+\t\tout = append(out, &iter)\n+\t}\n+\treturn out, diags\n+}\n+\n+func (p *Provider) generateCountProviders(eval *StaticEvaluator) ([]*Provider, hcl.Diagnostics) {\n+\tvar diags hcl.Diagnostics\n+\tif eval == nil {\n+\t\treturn nil, diags.Append(&hcl.Diagnostic{\n+\t\t\tSeverity: hcl.DiagError,\n+\t\t\tSummary:  \"Iteration not allowed in test files\",\n+\t\t\tDetail:   \"for_each was declared as an provider attribute in a test file\",",
        "comment_created_at": "2024-08-20T16:09:09+00:00",
        "comment_author": "ollevche",
        "comment_body": "```suggestion\r\n\t\t\tDetail:   \"count was declared as a provider attribute in a test file\",\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1981530596",
    "pr_number": 2566,
    "pr_file": "internal/configs/named_values.go",
    "created_at": "2025-03-05T14:37:01+00:00",
    "commented_code": "ParsingMode VariableParsingMode\n \tValidations []*CheckRule\n \tSensitive   bool\n+\tDeprecated  string",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "1981530596",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2566,
        "pr_file": "internal/configs/named_values.go",
        "discussion_id": "1981530596",
        "commented_code": "@@ -38,9 +38,11 @@ type Variable struct {\n \tParsingMode VariableParsingMode\n \tValidations []*CheckRule\n \tSensitive   bool\n+\tDeprecated  string",
        "comment_created_at": "2025-03-05T14:37:01+00:00",
        "comment_author": "ollevche",
        "comment_body": "I checked the usage of `Sensitive` field, and I believe we have a few more places where we could use `Deprecated` field.\r\n\r\nThe first one is the interactive input. There are few options: let the user know the field is deprecated beforehand or even skip the interactive input if the field is deprecated. Not sure about the last one, however deprecation would mean we have another field, which should be used instead, and thus it makes sense to just skip the deprecated one. The functions I am referring to are [Local.interactivelyCollectVariables](https://github.com/opentofu/opentofu/blob/main/internal/backend/local/backend_local.go#L417) and [Meta.getInput](https://github.com/opentofu/opentofu/blob/main/internal/command/meta_config.go#L162).\r\n\r\nThe second one is JSON output mode. It includes the configuration part, which IMO should reflect the deprecation as well as other configured options. For example, here is a part of configuration planned into a file:\r\n\r\n```terraform\r\nmodule \"mod\" {\r\n  source = \"./mod\"\r\n  a = \"b\"\r\n}\r\n```\r\n\r\nAnd this is a part of `tofu show --json planfile` command:\r\n\r\n```json\r\n    \"root_module\": {\r\n      \"module_calls\": {\r\n        \"mod\": {\r\n          \"source\": \"./mod\",\r\n          \"expressions\": {\r\n            \"a\": {\r\n              \"constant_value\": \"b\"\r\n            }\r\n          },\r\n          \"module\": {\r\n            \"variables\": {\r\n              \"a\": {\r\n                \"default\": \"b\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  ```\r\n  \r\n  What do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "1983594874",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2566,
        "pr_file": "internal/configs/named_values.go",
        "discussion_id": "1981530596",
        "commented_code": "@@ -38,9 +38,11 @@ type Variable struct {\n \tParsingMode VariableParsingMode\n \tValidations []*CheckRule\n \tSensitive   bool\n+\tDeprecated  string",
        "comment_created_at": "2025-03-06T15:41:26+00:00",
        "comment_author": "yottta",
        "comment_body": "Thanks a lot for the input! Good catches with these 2 prompt parts.\r\nWhen it comes to the prompts, I would go with the first approach. The second option, where we could skip the deprecated variables, could block some users from using the configuration correctly, so I am not sure about it.\r\n\r\nAs for the `tofu show --json planfile`, yeah, totally agree.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1984629331",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2566,
        "pr_file": "internal/configs/named_values.go",
        "discussion_id": "1981530596",
        "commented_code": "@@ -38,9 +38,11 @@ type Variable struct {\n \tParsingMode VariableParsingMode\n \tValidations []*CheckRule\n \tSensitive   bool\n+\tDeprecated  string",
        "comment_created_at": "2025-03-07T08:12:06+00:00",
        "comment_author": "yottta",
        "comment_body": "For the json output, added the changes in here: 55cfcce17bba824b8c642da1745c86c77b788ae7 .\r\nThe results will look like this. This is what you were suggesting, right?\r\n```json\r\n    \"root_module\": {\r\n      \"module_calls\": {\r\n        \"modcall\": {\r\n          \"source\": \"./mod1\",\r\n          \"expressions\": {\r\n            \"this_is_my_variable\": {\r\n              \"constant_value\": \"given value from modcall\"\r\n            }\r\n          },\r\n          \"module\": {\r\n            \"variables\": {\r\n              \"this_is_my_variable\": {\r\n                \"default\": \"default value\",\r\n                \"description\": \"This is a variable for the old way of configuring things.\",\r\n                \"deprecated\": \"This variable will be removed on 2024-12-31. Use another_variable instead.\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n```\r\n----------\r\nFor prompts, added the changes in here: dd0cfdc949026216495b090a984c7753fed33e86\r\nAnd the results will look like this. Is it right? Not fully confident with these changes \ud83e\udd14 \r\n![image](https://github.com/user-attachments/assets/11775498-f8ef-44f9-8d7a-057025af2be8)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1985242050",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2566,
        "pr_file": "internal/configs/named_values.go",
        "discussion_id": "1981530596",
        "commented_code": "@@ -38,9 +38,11 @@ type Variable struct {\n \tParsingMode VariableParsingMode\n \tValidations []*CheckRule\n \tSensitive   bool\n+\tDeprecated  string",
        "comment_created_at": "2025-03-07T15:13:51+00:00",
        "comment_author": "ollevche",
        "comment_body": "Thanks! JSON outputs look good to me. However, I am not sure if I understand how the deprecated message is shown on interactive input. I would use similar approach as in the warning, where we say \"Variable is marked as deprecated with the following message: <MESSAGE>\". ",
        "pr_file_module": null
      },
      {
        "comment_id": "1985345383",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2566,
        "pr_file": "internal/configs/named_values.go",
        "discussion_id": "1981530596",
        "commented_code": "@@ -38,9 +38,11 @@ type Variable struct {\n \tParsingMode VariableParsingMode\n \tValidations []*CheckRule\n \tSensitive   bool\n+\tDeprecated  string",
        "comment_created_at": "2025-03-07T16:17:46+00:00",
        "comment_author": "yottta",
        "comment_body": "Thanks. Was not sure about it either.\r\nI applied that in a4c9d758df57f524f11d288127096a6353e8d5db.\r\nNow, it looks like this.\r\n<img width=\"1094\" alt=\"Screenshot 2025-03-07 at 18 17 38\" src=\"https://github.com/user-attachments/assets/2cf05f3f-03a0-4922-a9da-5b66bce2c0ac\" />\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1968136622",
    "pr_number": 2512,
    "pr_file": "internal/backend/remote-state/azure/arm_client.go",
    "created_at": "2025-02-24T17:53:56+00:00",
    "commented_code": "return &client, nil\n \t}\n \n-\tbuilder := authentication.Builder{\n-\t\tClientID:                      config.ClientID,\n-\t\tSubscriptionID:                config.SubscriptionID,\n-\t\tTenantID:                      config.TenantID,\n-\t\tCustomResourceManagerEndpoint: config.CustomResourceManagerEndpoint,",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "1968136622",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2512,
        "pr_file": "internal/backend/remote-state/azure/arm_client.go",
        "discussion_id": "1968136622",
        "commented_code": "@@ -68,76 +69,75 @@ func buildArmClient(ctx context.Context, config BackendConfig) (*ArmClient, erro\n \t\treturn &client, nil\n \t}\n \n-\tbuilder := authentication.Builder{\n-\t\tClientID:                      config.ClientID,\n-\t\tSubscriptionID:                config.SubscriptionID,\n-\t\tTenantID:                      config.TenantID,\n-\t\tCustomResourceManagerEndpoint: config.CustomResourceManagerEndpoint,",
        "comment_created_at": "2025-02-24T17:53:56+00:00",
        "comment_author": "adamconnelly",
        "comment_body": "I can't see a reference to `CustomResourceManagerEndpoint` in the changed code. Was that deliberate?",
        "pr_file_module": null
      },
      {
        "comment_id": "1984083936",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2512,
        "pr_file": "internal/backend/remote-state/azure/arm_client.go",
        "discussion_id": "1968136622",
        "commented_code": "@@ -68,76 +69,75 @@ func buildArmClient(ctx context.Context, config BackendConfig) (*ArmClient, erro\n \t\treturn &client, nil\n \t}\n \n-\tbuilder := authentication.Builder{\n-\t\tClientID:                      config.ClientID,\n-\t\tSubscriptionID:                config.SubscriptionID,\n-\t\tTenantID:                      config.TenantID,\n-\t\tCustomResourceManagerEndpoint: config.CustomResourceManagerEndpoint,",
        "comment_created_at": "2025-03-06T21:34:09+00:00",
        "comment_author": "bmoylan",
        "comment_body": "As far as I can tell, the `CustomResourceManagerEndpoint` field is plumbed into [`authentication.Builder`](https://github.com/hashicorp/go-azure-helpers/blob/v0.43.0/authentication/builder.go#L28) then [`authentication.Config`](https://github.com/hashicorp/go-azure-helpers/blob/v0.43.0/authentication/builder.go#L68), but I do not see any usages of that field on the Config struct. So it appears this is entirely unused today...?\r\n\r\nThe [docs](https://opentofu.org/docs/language/settings/backends/azurerm/#configuration-variables) for the `endpoint` variable mention this is used in Azure Stack, but I don't see how that would be true based on the code. If that understanding is wrong, I'm happy to use this field wherever it's needed.",
        "pr_file_module": null
      },
      {
        "comment_id": "1985446886",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2512,
        "pr_file": "internal/backend/remote-state/azure/arm_client.go",
        "discussion_id": "1968136622",
        "commented_code": "@@ -68,76 +69,75 @@ func buildArmClient(ctx context.Context, config BackendConfig) (*ArmClient, erro\n \t\treturn &client, nil\n \t}\n \n-\tbuilder := authentication.Builder{\n-\t\tClientID:                      config.ClientID,\n-\t\tSubscriptionID:                config.SubscriptionID,\n-\t\tTenantID:                      config.TenantID,\n-\t\tCustomResourceManagerEndpoint: config.CustomResourceManagerEndpoint,",
        "comment_created_at": "2025-03-07T17:36:18+00:00",
        "comment_author": "adamconnelly",
        "comment_body": "I think you're correct. I can't see any usages of it either. I don't have experience with Azure Stack, but at the end of the day if the field isn't actually referenced anywhere currently I don't see how it could possibly be needed anymore.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1968139409",
    "pr_number": 2512,
    "pr_file": "internal/backend/remote-state/azure/arm_client.go",
    "created_at": "2025-02-24T17:55:46+00:00",
    "commented_code": "return &client, nil\n \t}\n \n-\tbuilder := authentication.Builder{\n-\t\tClientID:                      config.ClientID,\n-\t\tSubscriptionID:                config.SubscriptionID,\n-\t\tTenantID:                      config.TenantID,\n-\t\tCustomResourceManagerEndpoint: config.CustomResourceManagerEndpoint,\n-\t\tMetadataHost:                  config.MetadataHost,\n-\t\tEnvironment:                   config.Environment,\n-\t\tClientSecretDocsLink:          \"https://registry.opentofu.org/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret\",\n+\tvar authEnvironment *environments.Environment\n+\tif config.MetadataHost != \"\" {\n+\t\tlog.Printf(\"[DEBUG] Configuring cloud environment from Metadata Service at %q\", config.MetadataHost)\n+\t\tauthEnvironment, err = environments.FromEndpoint(ctx, fmt.Sprintf(\"https://%s\", config.MetadataHost))\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t} else {\n+\t\tlog.Printf(\"[DEBUG] Configuring built-in cloud environment by name: %q\", config.Environment)\n+\t\tauthEnvironment, err = environments.FromName(config.Environment)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\n+\tauthConfig := auth.Credentials{\n+\t\tEnvironment: *authEnvironment,\n+\n+\t\tClientID: config.ClientID,\n+\t\tTenantID: config.TenantID,\n \n \t\t// Service Principal (Client Certificate)\n-\t\tClientCertPassword: config.ClientCertificatePassword,\n-\t\tClientCertPath:     config.ClientCertificatePath,\n+\t\tClientCertificatePath:     config.ClientCertificatePath,\n+\t\tClientCertificatePassword: config.ClientCertificatePassword,\n \n \t\t// Service Principal (Client Secret)\n \t\tClientSecret: config.ClientSecret,\n \n \t\t// Managed Service Identity\n-\t\tMsiEndpoint: config.MsiEndpoint,\n+\t\tCustomManagedIdentityEndpoint: config.MsiEndpoint,\n \n \t\t// OIDC\n-\t\tIDToken:             config.OIDCToken,\n-\t\tIDTokenFilePath:     config.OIDCTokenFilePath,",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "1968139409",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2512,
        "pr_file": "internal/backend/remote-state/azure/arm_client.go",
        "discussion_id": "1968139409",
        "commented_code": "@@ -68,76 +69,75 @@ func buildArmClient(ctx context.Context, config BackendConfig) (*ArmClient, erro\n \t\treturn &client, nil\n \t}\n \n-\tbuilder := authentication.Builder{\n-\t\tClientID:                      config.ClientID,\n-\t\tSubscriptionID:                config.SubscriptionID,\n-\t\tTenantID:                      config.TenantID,\n-\t\tCustomResourceManagerEndpoint: config.CustomResourceManagerEndpoint,\n-\t\tMetadataHost:                  config.MetadataHost,\n-\t\tEnvironment:                   config.Environment,\n-\t\tClientSecretDocsLink:          \"https://registry.opentofu.org/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret\",\n+\tvar authEnvironment *environments.Environment\n+\tif config.MetadataHost != \"\" {\n+\t\tlog.Printf(\"[DEBUG] Configuring cloud environment from Metadata Service at %q\", config.MetadataHost)\n+\t\tauthEnvironment, err = environments.FromEndpoint(ctx, fmt.Sprintf(\"https://%s\", config.MetadataHost))\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t} else {\n+\t\tlog.Printf(\"[DEBUG] Configuring built-in cloud environment by name: %q\", config.Environment)\n+\t\tauthEnvironment, err = environments.FromName(config.Environment)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\n+\tauthConfig := auth.Credentials{\n+\t\tEnvironment: *authEnvironment,\n+\n+\t\tClientID: config.ClientID,\n+\t\tTenantID: config.TenantID,\n \n \t\t// Service Principal (Client Certificate)\n-\t\tClientCertPassword: config.ClientCertificatePassword,\n-\t\tClientCertPath:     config.ClientCertificatePath,\n+\t\tClientCertificatePath:     config.ClientCertificatePath,\n+\t\tClientCertificatePassword: config.ClientCertificatePassword,\n \n \t\t// Service Principal (Client Secret)\n \t\tClientSecret: config.ClientSecret,\n \n \t\t// Managed Service Identity\n-\t\tMsiEndpoint: config.MsiEndpoint,\n+\t\tCustomManagedIdentityEndpoint: config.MsiEndpoint,\n \n \t\t// OIDC\n-\t\tIDToken:             config.OIDCToken,\n-\t\tIDTokenFilePath:     config.OIDCTokenFilePath,",
        "comment_created_at": "2025-02-24T17:55:46+00:00",
        "comment_author": "adamconnelly",
        "comment_body": "It looks like `OIDCTokenFilePath` isn't supported anymore. Do you maybe need to manually add support for this now?",
        "pr_file_module": null
      },
      {
        "comment_id": "1984084235",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 2512,
        "pr_file": "internal/backend/remote-state/azure/arm_client.go",
        "discussion_id": "1968139409",
        "commented_code": "@@ -68,76 +69,75 @@ func buildArmClient(ctx context.Context, config BackendConfig) (*ArmClient, erro\n \t\treturn &client, nil\n \t}\n \n-\tbuilder := authentication.Builder{\n-\t\tClientID:                      config.ClientID,\n-\t\tSubscriptionID:                config.SubscriptionID,\n-\t\tTenantID:                      config.TenantID,\n-\t\tCustomResourceManagerEndpoint: config.CustomResourceManagerEndpoint,\n-\t\tMetadataHost:                  config.MetadataHost,\n-\t\tEnvironment:                   config.Environment,\n-\t\tClientSecretDocsLink:          \"https://registry.opentofu.org/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret\",\n+\tvar authEnvironment *environments.Environment\n+\tif config.MetadataHost != \"\" {\n+\t\tlog.Printf(\"[DEBUG] Configuring cloud environment from Metadata Service at %q\", config.MetadataHost)\n+\t\tauthEnvironment, err = environments.FromEndpoint(ctx, fmt.Sprintf(\"https://%s\", config.MetadataHost))\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t} else {\n+\t\tlog.Printf(\"[DEBUG] Configuring built-in cloud environment by name: %q\", config.Environment)\n+\t\tauthEnvironment, err = environments.FromName(config.Environment)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\n+\tauthConfig := auth.Credentials{\n+\t\tEnvironment: *authEnvironment,\n+\n+\t\tClientID: config.ClientID,\n+\t\tTenantID: config.TenantID,\n \n \t\t// Service Principal (Client Certificate)\n-\t\tClientCertPassword: config.ClientCertificatePassword,\n-\t\tClientCertPath:     config.ClientCertificatePath,\n+\t\tClientCertificatePath:     config.ClientCertificatePath,\n+\t\tClientCertificatePassword: config.ClientCertificatePassword,\n \n \t\t// Service Principal (Client Secret)\n \t\tClientSecret: config.ClientSecret,\n \n \t\t// Managed Service Identity\n-\t\tMsiEndpoint: config.MsiEndpoint,\n+\t\tCustomManagedIdentityEndpoint: config.MsiEndpoint,\n \n \t\t// OIDC\n-\t\tIDToken:             config.OIDCToken,\n-\t\tIDTokenFilePath:     config.OIDCTokenFilePath,",
        "comment_created_at": "2025-03-06T21:34:29+00:00",
        "comment_author": "bmoylan",
        "comment_body": ":+1: updated to read the file if set (similar to the old [`(oidcAuth).readTokenFile`](https://github.com/hashicorp/go-azure-helpers/blob/v0.43.0/authentication/auth_method_oidc.go#L98-L106))",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1668706976",
    "pr_number": 1772,
    "pr_file": "internal/tofu/eval_context_builtin.go",
    "created_at": "2024-07-08T14:06:28+00:00",
    "commented_code": "return nil, err\n \t}\n \n+\tif ctx.Config != nil {",
    "repo_full_name": "opentofu/opentofu",
    "discussion_comments": [
      {
        "comment_id": "1668706976",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1772,
        "pr_file": "internal/tofu/eval_context_builtin.go",
        "discussion_id": "1668706976",
        "commented_code": "@@ -145,6 +147,18 @@ func (ctx *BuiltinEvalContext) InitProvider(addr addrs.AbsProviderConfig) (provi\n \t\treturn nil, err\n \t}\n \n+\tif ctx.Config != nil {",
        "comment_created_at": "2024-07-08T14:06:28+00:00",
        "comment_author": "cam72cam",
        "comment_body": "The config is already accessed in EvaluationScope below:\r\nhttps://github.com/opentofu/opentofu/pull/1772/files?diff=split&w=1#diff-126d6884fd43891cbb56845ee6f7f51ed02895af69190815e5c694a51a3777d3L522\r\n\r\nI don't think we need to add ctx.Config and can use that same code instead.",
        "pr_file_module": null
      },
      {
        "comment_id": "1668745167",
        "repo_full_name": "opentofu/opentofu",
        "pr_number": 1772,
        "pr_file": "internal/tofu/eval_context_builtin.go",
        "discussion_id": "1668706976",
        "commented_code": "@@ -145,6 +147,18 @@ func (ctx *BuiltinEvalContext) InitProvider(addr addrs.AbsProviderConfig) (provi\n \t\treturn nil, err\n \t}\n \n+\tif ctx.Config != nil {",
        "comment_created_at": "2024-07-08T14:24:26+00:00",
        "comment_author": "ollevche",
        "comment_body": "Nice catch, thanks!\r\n\r\n[5fa601a](https://github.com/opentofu/opentofu/pull/1772/commits/5fa601a8bae2f435f88d08e2b390d95febabbb6d)",
        "pr_file_module": null
      }
    ]
  }
]