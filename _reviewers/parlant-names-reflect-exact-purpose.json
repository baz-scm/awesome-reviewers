[
  {
    "discussion_id": "1937373581",
    "pr_number": 259,
    "pr_file": "src/parlant/core/agents.py",
    "created_at": "2025-01-31T14:06:02+00:00",
    "commented_code": "composition_mode: CompositionMode\n \n \n+class _MetadataDocument(TypedDict, total=False):\n+    id: ObjectId\n+    version: Version.String\n+\n+\n class AgentDocumentStore(AgentStore):\n     VERSION = Version.from_string(\"0.1.0\")\n \n-    def __init__(\n-        self,\n-        database: DocumentDatabase,\n-    ):\n+    def __init__(self, database: DocumentDatabase, migrate: bool = True):\n         self._database = database\n         self._collection: DocumentCollection[_AgentDocument]\n+        self._meta_collection: DocumentCollection[_MetadataDocument]",
    "repo_full_name": "emcie-co/parlant",
    "discussion_comments": [
      {
        "comment_id": "1937373581",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 259,
        "pr_file": "src/parlant/core/agents.py",
        "discussion_id": "1937373581",
        "commented_code": "@@ -95,23 +99,67 @@ class _AgentDocument(TypedDict, total=False):\n     composition_mode: CompositionMode\n \n \n+class _MetadataDocument(TypedDict, total=False):\n+    id: ObjectId\n+    version: Version.String\n+\n+\n class AgentDocumentStore(AgentStore):\n     VERSION = Version.from_string(\"0.1.0\")\n \n-    def __init__(\n-        self,\n-        database: DocumentDatabase,\n-    ):\n+    def __init__(self, database: DocumentDatabase, migrate: bool = True):\n         self._database = database\n         self._collection: DocumentCollection[_AgentDocument]\n+        self._meta_collection: DocumentCollection[_MetadataDocument]",
        "comment_created_at": "2025-01-31T14:06:02+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "In all stores, rename to `_metadata_collection`. Reason: \"Meta data\" means \"data about data\". Meaning of \"meta collection\" means \"collection about collections\". These are separate meanings. \"Meta\" isn't simply a shorthand for \"metadata\".",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1937424062",
    "pr_number": 259,
    "pr_file": "src/parlant/core/persistence/document_database.py",
    "created_at": "2025-01-31T14:42:11+00:00",
    "commented_code": "deleted_document: Optional[TDocument]\n \n \n+async def noop_loader(doc: BaseDocument) -> BaseDocument:",
    "repo_full_name": "emcie-co/parlant",
    "discussion_comments": [
      {
        "comment_id": "1937424062",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 259,
        "pr_file": "src/parlant/core/persistence/document_database.py",
        "discussion_id": "1937424062",
        "commented_code": "@@ -55,6 +57,10 @@ class DeleteResult(Generic[TDocument]):\n     deleted_document: Optional[TDocument]\n \n \n+async def noop_loader(doc: BaseDocument) -> BaseDocument:",
        "comment_created_at": "2025-01-31T14:42:11+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "No-Op usually means \"do nothing\" but in this case we are doing something: returning the argument as-is.\r\n\r\nThis is commonly known as an \"identity function\". For this reason, I suggest calling this `identity_loader`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1937424592",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 259,
        "pr_file": "src/parlant/core/persistence/document_database.py",
        "discussion_id": "1937424062",
        "commented_code": "@@ -55,6 +57,10 @@ class DeleteResult(Generic[TDocument]):\n     deleted_document: Optional[TDocument]\n \n \n+async def noop_loader(doc: BaseDocument) -> BaseDocument:",
        "comment_created_at": "2025-01-31T14:42:33+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "https://en.wikipedia.org/wiki/Identity_function",
        "pr_file_module": null
      },
      {
        "comment_id": "1937575750",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 259,
        "pr_file": "src/parlant/core/persistence/document_database.py",
        "discussion_id": "1937424062",
        "commented_code": "@@ -55,6 +57,10 @@ class DeleteResult(Generic[TDocument]):\n     deleted_document: Optional[TDocument]\n \n \n+async def noop_loader(doc: BaseDocument) -> BaseDocument:",
        "comment_created_at": "2025-01-31T16:27:20+00:00",
        "comment_author": "mc-dorzo",
        "comment_body": "I knew that from math ^^ awesome observation",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1756302930",
    "pr_number": 81,
    "pr_file": "server/src/emcie/server/engines/alpha/guideline_proposer.py",
    "created_at": "2024-09-12T07:36:39+00:00",
    "commented_code": "import asyncio\n-import json\n import math\n-import jsonfinder  # type: ignore\n from typing import Sequence\n \n from emcie.server.core.agents import Agent\n from emcie.server.core.context_variables import ContextVariable, ContextVariableValue\n-from emcie.server.engines.alpha.guideline_proposition import GuidelineProposition\n+from emcie.server.engines.alpha.guideline_proposition import (\n+    GuidelineProposition,\n+    GuidelinePropositionsSchema,\n+)\n from emcie.server.engines.alpha.prompt_builder import PromptBuilder\n from emcie.server.core.terminology import Term\n-from emcie.server.engines.alpha.utils import make_llm_client\n from emcie.server.core.guidelines import Guideline\n from emcie.server.core.sessions import Event\n from emcie.server.engines.event_emitter import EmittedEvent\n+from emcie.server.llm.json_generators import JSONGenerator\n from emcie.server.logger import Logger\n \n \n class GuidelineProposer:\n     def __init__(\n         self,\n         logger: Logger,\n+        guideline_proposition_scehma_generator: JSONGenerator[GuidelinePropositionsSchema],",
    "repo_full_name": "emcie-co/parlant",
    "discussion_comments": [
      {
        "comment_id": "1756302930",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 81,
        "pr_file": "server/src/emcie/server/engines/alpha/guideline_proposer.py",
        "discussion_id": "1756302930",
        "commented_code": "@@ -1,29 +1,30 @@\n import asyncio\n-import json\n import math\n-import jsonfinder  # type: ignore\n from typing import Sequence\n \n from emcie.server.core.agents import Agent\n from emcie.server.core.context_variables import ContextVariable, ContextVariableValue\n-from emcie.server.engines.alpha.guideline_proposition import GuidelineProposition\n+from emcie.server.engines.alpha.guideline_proposition import (\n+    GuidelineProposition,\n+    GuidelinePropositionsSchema,\n+)\n from emcie.server.engines.alpha.prompt_builder import PromptBuilder\n from emcie.server.core.terminology import Term\n-from emcie.server.engines.alpha.utils import make_llm_client\n from emcie.server.core.guidelines import Guideline\n from emcie.server.core.sessions import Event\n from emcie.server.engines.event_emitter import EmittedEvent\n+from emcie.server.llm.json_generators import JSONGenerator\n from emcie.server.logger import Logger\n \n \n class GuidelineProposer:\n     def __init__(\n         self,\n         logger: Logger,\n+        guideline_proposition_scehma_generator: JSONGenerator[GuidelinePropositionsSchema],",
        "comment_created_at": "2024-09-12T07:36:39+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "Rename variable to `schematic_generator`; also under `self.` Let's make this a reserved term to keep things shorter.\nAlso, please rename `JSONGenerator` to `SchematicGenerator`. Sorry, I just realized we're not actually exposing any JSON here. It's an implementation detail. What we're actually doing is generating an object based on a schema.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1756329265",
    "pr_number": 81,
    "pr_file": "server/src/emcie/server/indexing/coherence_checker.py",
    "created_at": "2024-09-12T07:52:29+00:00",
    "commented_code": "self,\n         logger: Logger,\n         contradiction_kind: ContradictionKind,\n+        contradiction_generator: JSONGenerator[ContradictionTestsSchema],",
    "repo_full_name": "emcie-co/parlant",
    "discussion_comments": [
      {
        "comment_id": "1756329265",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 81,
        "pr_file": "server/src/emcie/server/indexing/coherence_checker.py",
        "discussion_id": "1756329265",
        "commented_code": "@@ -48,10 +57,11 @@ def __init__(\n         self,\n         logger: Logger,\n         contradiction_kind: ContradictionKind,\n+        contradiction_generator: JSONGenerator[ContradictionTestsSchema],",
        "comment_created_at": "2024-09-12T07:52:29+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "Note the naming, the details matter.\n\nvar name \"contradiction generator\" --> something that generates a contradiction.\nYet you're passing a generator of ContradictionTests --> something that generates contradiction tests.\n\nPlease pay more deliberate attention to consistency in these matters as it occurs frequently and has been commented on before.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2160060126",
    "pr_number": 427,
    "pr_file": "src/parlant/core/engines/alpha/guideline_matching/generic_guideline_matching_strategy_resolver.py",
    "created_at": "2025-06-21T15:04:02+00:00",
    "commented_code": ")\n         ]\n \n+    @override\n+    async def transform_matches(\n+        self,\n+        matches: Sequence[GuidelineMatch],\n+    ) -> Sequence[GuidelineMatch]:\n+        result: list[GuidelineMatch] = []\n+        guidelines_to_skip: list[GuidelineId] = []\n+\n+        for m in matches:\n+            disambiguation = m.metadata.get(\"disambiguation\") if m.metadata else None\n+\n+            if disambiguation and \"disambiguated_members\" in cast(",
    "repo_full_name": "emcie-co/parlant",
    "discussion_comments": [
      {
        "comment_id": "2160060126",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 427,
        "pr_file": "src/parlant/core/engines/alpha/guideline_matching/generic_guideline_matching_strategy_resolver.py",
        "discussion_id": "2160060126",
        "commented_code": "@@ -135,6 +169,63 @@ async def create_report_analysis_batches(\n             )\n         ]\n \n+    @override\n+    async def transform_matches(\n+        self,\n+        matches: Sequence[GuidelineMatch],\n+    ) -> Sequence[GuidelineMatch]:\n+        result: list[GuidelineMatch] = []\n+        guidelines_to_skip: list[GuidelineId] = []\n+\n+        for m in matches:\n+            disambiguation = m.metadata.get(\"disambiguation\") if m.metadata else None\n+\n+            if disambiguation and \"disambiguated_members\" in cast(",
        "comment_created_at": "2025-06-21T15:04:02+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "```python\r\nif disambiguation := m.metadata.get(...)`:\r\n  targets = disambiguation.get(\"targets\")\r\n```\r\n\r\nAnd note also the structure of the metadata currently is:\r\n```json\r\n{\r\n  \"disambiguation\": {\r\n    \"disambiguation_members\": [ ... ]\r\n  }\r\n}\r\n```\r\n\r\nAnd I have a few notes on this:\r\n1. Let's stay consistent with the relationship by saying `disambiguation_targets` (not members)\r\n2. If we're already within the `disambiguation` key, we don't need to repeat it. We can just have:\r\n\r\n```json\r\n{\r\n  \"disambiguation\": {\r\n    \"targets\": [ ... ]\r\n  }\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  }
]