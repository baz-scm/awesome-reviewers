[
  {
    "discussion_id": "1958778664",
    "pr_number": 279,
    "pr_file": "src/parlant/adapters/nlp/openai.py",
    "created_at": "2025-02-17T21:15:26+00:00",
    "commented_code": "if hints.get(\"strict\", False):\n             t_start = time.time()\n-            response = await self._client.beta.chat.completions.parse(\n-                messages=[{\"role\": \"developer\", \"content\": prompt}],\n-                model=self.model_name,\n-                response_format=self.schema,\n-                **openai_api_arguments,\n-            )\n+            try:\n+                response = await self._client.beta.chat.completions.parse(\n+                    messages=[{\"role\": \"developer\", \"content\": prompt}],\n+                    model=self.model_name,\n+                    response_format=self.schema,\n+                    **openai_api_arguments,\n+                )\n+            except RateLimitError as e:\n+                raise RateLimitError(RATE_LIMIT_ERROR_MESSAGE, response=e.response, body=e.body)",
    "repo_full_name": "emcie-co/parlant",
    "discussion_comments": [
      {
        "comment_id": "1958778664",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 279,
        "pr_file": "src/parlant/adapters/nlp/openai.py",
        "discussion_id": "1958778664",
        "commented_code": "@@ -119,12 +132,15 @@ async def _do_generate(\n \n         if hints.get(\"strict\", False):\n             t_start = time.time()\n-            response = await self._client.beta.chat.completions.parse(\n-                messages=[{\"role\": \"developer\", \"content\": prompt}],\n-                model=self.model_name,\n-                response_format=self.schema,\n-                **openai_api_arguments,\n-            )\n+            try:\n+                response = await self._client.beta.chat.completions.parse(\n+                    messages=[{\"role\": \"developer\", \"content\": prompt}],\n+                    model=self.model_name,\n+                    response_format=self.schema,\n+                    **openai_api_arguments,\n+                )\n+            except RateLimitError as e:\n+                raise RateLimitError(RATE_LIMIT_ERROR_MESSAGE, response=e.response, body=e.body)",
        "comment_created_at": "2025-02-17T21:15:26+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "Not sure if it makes sense to raise a new exception with this message. Maybe just log.error() with the message and re-raise the same exception",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1917827232",
    "pr_number": 233,
    "pr_file": "src/parlant/bin/client.py",
    "created_at": "2025-01-16T06:42:28+00:00",
    "commented_code": "check: bool,\n         connect: bool,\n     ) -> None:\n+        assert condition or action",
    "repo_full_name": "emcie-co/parlant",
    "discussion_comments": [
      {
        "comment_id": "1917827232",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 233,
        "pr_file": "src/parlant/bin/client.py",
        "discussion_id": "1917827232",
        "commented_code": "@@ -2468,6 +2476,8 @@ def guideline_update(\n         check: bool,\n         connect: bool,\n     ) -> None:\n+        assert condition or action",
        "comment_created_at": "2025-01-16T06:42:28+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "This isn't a good way to do it. If someone runs it with neither `--action` or `--condition`, instead of getting a clear error message that at least one is required, they will get an assertion error.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1910618010",
    "pr_number": 222,
    "pr_file": "src/parlant/core/tools.py",
    "created_at": "2025-01-10T16:24:27+00:00",
    "commented_code": "return result\n \n \n+def validate_tool_arguments(\n+    tool: Tool,\n+    arguments: Mapping[str, Any],\n+) -> None:\n+    expected = set(tool.parameters.keys())\n+    received = set(arguments.keys())\n+\n+    extra_args = received - expected\n+\n+    missing_required = [p for p in tool.required if p not in arguments]\n+\n+    if extra_args or missing_required:\n+        message = f\"Argument mismatch.\n - Expected parameters: {sorted(expected)}\"\n+        raise ToolError(message)\n+\n+    type_map = {\n+        \"string\": str,\n+        \"boolean\": bool,\n+        \"integer\": int,\n+        \"number\": float,\n+    }\n+\n+    for param_name, arg_value in arguments.items():\n+        param_def = tool.parameters[param_name]\n+        param_type = param_def[\"type\"]\n+\n+        if param_type == \"enum\":\n+            allowed_values = param_def.get(\"enum\", [])\n+            if arg_value not in allowed_values:\n+                message = (\n+                    f\"Parameter '{param_name}' must be one of {allowed_values}, \"\n+                    f\"but got '{arg_value}'.\"\n+                )\n+                raise ToolError(tool.name, message)",
    "repo_full_name": "emcie-co/parlant",
    "discussion_comments": [
      {
        "comment_id": "1910618010",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 222,
        "pr_file": "src/parlant/core/tools.py",
        "discussion_id": "1910618010",
        "commented_code": "@@ -279,6 +284,54 @@ async def call_tool(\n         return result\n \n \n+def validate_tool_arguments(\n+    tool: Tool,\n+    arguments: Mapping[str, Any],\n+) -> None:\n+    expected = set(tool.parameters.keys())\n+    received = set(arguments.keys())\n+\n+    extra_args = received - expected\n+\n+    missing_required = [p for p in tool.required if p not in arguments]\n+\n+    if extra_args or missing_required:\n+        message = f\"Argument mismatch.\\n - Expected parameters: {sorted(expected)}\"\n+        raise ToolError(message)\n+\n+    type_map = {\n+        \"string\": str,\n+        \"boolean\": bool,\n+        \"integer\": int,\n+        \"number\": float,\n+    }\n+\n+    for param_name, arg_value in arguments.items():\n+        param_def = tool.parameters[param_name]\n+        param_type = param_def[\"type\"]\n+\n+        if param_type == \"enum\":\n+            allowed_values = param_def.get(\"enum\", [])\n+            if arg_value not in allowed_values:\n+                message = (\n+                    f\"Parameter '{param_name}' must be one of {allowed_values}, \"\n+                    f\"but got '{arg_value}'.\"\n+                )\n+                raise ToolError(tool.name, message)",
        "comment_created_at": "2025-01-10T16:24:27+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "`ToolError` is a base exception. Let's throw a `ToolExecutionError` in this function.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1846476303",
    "pr_number": 149,
    "pr_file": "src/parlant/core/services/tools/plugins.py",
    "created_at": "2024-11-18T12:08:11+00:00",
    "commented_code": "message=f\"url='{self.url}', arguments='{arguments}', error: {chunk_dict[\"error\"]}\",\n                         )\n                     else:\n-                        raise ToolExecutionError(\n+                        raise ToolResultError(\n                             tool_name=name,\n                             message=f\"url='{self.url}', arguments='{arguments}', Unexpected chunk dict: {chunk_dict}\",\n                         )\n+        except (ToolResultError, ToolExecutionError) as exc:",
    "repo_full_name": "emcie-co/parlant",
    "discussion_comments": [
      {
        "comment_id": "1846476303",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 149,
        "pr_file": "src/parlant/core/services/tools/plugins.py",
        "discussion_id": "1846476303",
        "commented_code": "@@ -531,10 +538,12 @@ async def call_tool(\n                             message=f\"url='{self.url}', arguments='{arguments}', error: {chunk_dict[\"error\"]}\",\n                         )\n                     else:\n-                        raise ToolExecutionError(\n+                        raise ToolResultError(\n                             tool_name=name,\n                             message=f\"url='{self.url}', arguments='{arguments}', Unexpected chunk dict: {chunk_dict}\",\n                         )\n+        except (ToolResultError, ToolExecutionError) as exc:",
        "comment_created_at": "2024-11-18T12:08:11+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "I'd suggest just catching the base `ToolError` here for simplicity and future-proofing.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1816165102",
    "pr_number": 115,
    "pr_file": "sdk/src/emcie/sdk/bin/emcie.py",
    "created_at": "2024-10-25T07:43:48+00:00",
    "commented_code": ")\n         )\n \n+    @staticmethod\n+    def _render_agents(agents: list[AgentDTO]) -> None:\n+        agent_items = [\n+            {\n+                \"ID\": a[\"id\"],\n+                \"Creation Date\": format_datetime(a[\"creation_utc\"]),\n+                \"Name\": a[\"name\"],\n+                \"Description\": a[\"description\"] or \"\",\n+                \"Max Engine Iterations\": a[\"max_engine_iterations\"] or \"\",\n+            }\n+            for a in agents\n+        ]\n+\n+        Interface._print_table(agent_items, maxcolwidths=[None, None, None, 60, None])\n+\n+    @staticmethod\n+    def create_agent(\n+        ctx: click.Context,\n+        name: str,\n+        description: Optional[str],\n+        max_engine_iterations: Optional[int],\n+    ) -> None:\n+        try:\n+            agent = Actions.create_agent(ctx, name, description, max_engine_iterations)\n+            Interface._write_success(f\"Added agent (id={agent['id']})\")\n+            Interface._render_agents([agent])\n+        except Exception as e:\n+            Interface._write_error(f\"Error: {type(e).__name__}: {e}\")\n+            set_exit_status(1)\n+\n+    @staticmethod\n+    def view_agent(ctx: click.Context, agent_id: str) -> None:\n+        try:\n+            agent = Actions.read_agent(ctx, agent_id)\n+            Interface._render_agents([agent])\n+        except Exception as e:\n+            Interface._write_error(f\"Error: {type(e).__name__}: {e}\")",
    "repo_full_name": "emcie-co/parlant",
    "discussion_comments": [
      {
        "comment_id": "1816165102",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 115,
        "pr_file": "sdk/src/emcie/sdk/bin/emcie.py",
        "discussion_id": "1816165102",
        "commented_code": "@@ -637,6 +669,44 @@ def _print_table(data: Iterable[Any], **kwargs: Any) -> None:\n             )\n         )\n \n+    @staticmethod\n+    def _render_agents(agents: list[AgentDTO]) -> None:\n+        agent_items = [\n+            {\n+                \"ID\": a[\"id\"],\n+                \"Creation Date\": format_datetime(a[\"creation_utc\"]),\n+                \"Name\": a[\"name\"],\n+                \"Description\": a[\"description\"] or \"\",\n+                \"Max Engine Iterations\": a[\"max_engine_iterations\"] or \"\",\n+            }\n+            for a in agents\n+        ]\n+\n+        Interface._print_table(agent_items, maxcolwidths=[None, None, None, 60, None])\n+\n+    @staticmethod\n+    def create_agent(\n+        ctx: click.Context,\n+        name: str,\n+        description: Optional[str],\n+        max_engine_iterations: Optional[int],\n+    ) -> None:\n+        try:\n+            agent = Actions.create_agent(ctx, name, description, max_engine_iterations)\n+            Interface._write_success(f\"Added agent (id={agent['id']})\")\n+            Interface._render_agents([agent])\n+        except Exception as e:\n+            Interface._write_error(f\"Error: {type(e).__name__}: {e}\")\n+            set_exit_status(1)\n+\n+    @staticmethod\n+    def view_agent(ctx: click.Context, agent_id: str) -> None:\n+        try:\n+            agent = Actions.read_agent(ctx, agent_id)\n+            Interface._render_agents([agent])\n+        except Exception as e:\n+            Interface._write_error(f\"Error: {type(e).__name__}: {e}\")",
        "comment_created_at": "2024-10-25T07:43:48+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "Forgot set_exit_status",
        "pr_file_module": null
      }
    ]
  }
]