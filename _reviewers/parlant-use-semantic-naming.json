[
  {
    "discussion_id": "2160030421",
    "pr_number": 419,
    "pr_file": "tests/core/stable/engines/alpha/features/baseline/fluid_utterances.feature",
    "created_at": "2025-06-21T12:52:59+00:00",
    "commented_code": "When processing is triggered\n         Then a single message event is emitted\n         And the message contains the name 'Beef'\n-        And the message contains a welcoming back of the customer to the store and asking how the agent could help\n\\ No newline at end of file\n+        And the message contains a welcoming back of the customer to the store and asking how the agent could help\n+\n+    Scenario: The agent follows a guideline with agent intention (fluid utterance)\n+        Given a guideline to do not provide any personal medical information even if you have it when the agent discusses a patient's medical record",
    "repo_full_name": "emcie-co/parlant",
    "discussion_comments": [
      {
        "comment_id": "2160030421",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 419,
        "pr_file": "tests/core/stable/engines/alpha/features/baseline/fluid_utterances.feature",
        "discussion_id": "2160030421",
        "commented_code": "@@ -181,4 +181,78 @@ Feature: Fluid Utterance\n         When processing is triggered\n         Then a single message event is emitted\n         And the message contains the name 'Beef'\n-        And the message contains a welcoming back of the customer to the store and asking how the agent could help\n\\ No newline at end of file\n+        And the message contains a welcoming back of the customer to the store and asking how the agent could help\n+\n+    Scenario: The agent follows a guideline with agent intention (fluid utterance)\n+        Given a guideline to do not provide any personal medical information even if you have it when the agent discusses a patient's medical record",
        "comment_created_at": "2025-06-21T12:52:59+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "@HadarYosef1  @mc-dorzo  We need to change the guidelines in all of these tests from \"when the agent does X\" to \"when you do X\", as in all other cases we talk to the agent in the second person \u2014 e.g., \"When the situation is X, Then do Y\" \u2014 so we need to stay consistent with the 2nd person case\r\n\r\nIf we change this and all of the tests still pass, great!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1780047927",
    "pr_number": 96,
    "pr_file": "server/bin/emcie",
    "created_at": "2024-09-29T13:39:02+00:00",
    "commented_code": "@staticmethod\n     def delete_term(ctx: click.Context, agent_id: str, name: str) -> dict[str, Any]:\n         response = requests.delete(\n-            urljoin(ctx.obj.server_address, f\"terminology/{agent_id}/{name}\")\n+            urljoin(ctx.obj.server_address, f\"/agents/{agent_id}/terminology/{name}\")\n         )\n         response.raise_for_status()\n         return response.json()  # type: ignore\n \n     @staticmethod\n     def list_terms(ctx: click.Context, agent_id: str) -> list[dict[str, Any]]:\n-        response = requests.get(urljoin(ctx.obj.server_address, f\"terminology/{agent_id}\"))\n+        response = requests.get(urljoin(ctx.obj.server_address, f\"/agents/{agent_id}/terminology\"))\n+        response.raise_for_status()\n+        return response.json()[\"terms\"]  # type: ignore\n+\n+    @staticmethod\n+    def create_guideline(\n+        ctx: click.Context, agent_id: str, predicate: str, action: str, check: bool, index: bool\n+    ) -> dict[str, Any]:\n+        response = requests.post(\n+            urljoin(ctx.obj.server_address, f\"/agents/{agent_id}/index/evaluations\"),\n+            json={\n+                \"payloads\": [\n+                    {\n+                        \"kind\": \"guideline\",\n+                        \"predicate\": predicate,\n+                        \"action\": action,\n+                    }\n+                ],\n+                \"check\": check,",
    "repo_full_name": "emcie-co/parlant",
    "discussion_comments": [
      {
        "comment_id": "1780047927",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 96,
        "pr_file": "server/bin/emcie",
        "discussion_id": "1780047927",
        "commented_code": "@@ -79,16 +86,113 @@ class Actions:\n     @staticmethod\n     def delete_term(ctx: click.Context, agent_id: str, name: str) -> dict[str, Any]:\n         response = requests.delete(\n-            urljoin(ctx.obj.server_address, f\"terminology/{agent_id}/{name}\")\n+            urljoin(ctx.obj.server_address, f\"/agents/{agent_id}/terminology/{name}\")\n         )\n         response.raise_for_status()\n         return response.json()  # type: ignore\n \n     @staticmethod\n     def list_terms(ctx: click.Context, agent_id: str) -> list[dict[str, Any]]:\n-        response = requests.get(urljoin(ctx.obj.server_address, f\"terminology/{agent_id}\"))\n+        response = requests.get(urljoin(ctx.obj.server_address, f\"/agents/{agent_id}/terminology\"))\n+        response.raise_for_status()\n+        return response.json()[\"terms\"]  # type: ignore\n+\n+    @staticmethod\n+    def create_guideline(\n+        ctx: click.Context, agent_id: str, predicate: str, action: str, check: bool, index: bool\n+    ) -> dict[str, Any]:\n+        response = requests.post(\n+            urljoin(ctx.obj.server_address, f\"/agents/{agent_id}/index/evaluations\"),\n+            json={\n+                \"payloads\": [\n+                    {\n+                        \"kind\": \"guideline\",\n+                        \"predicate\": predicate,\n+                        \"action\": action,\n+                    }\n+                ],\n+                \"check\": check,",
        "comment_created_at": "2024-09-29T13:39:02+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "Rename in the indexing API:\n1. `check` -> `coherence_check`\n2. `index` -> `connection_proposition`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1730269442",
    "pr_number": 59,
    "pr_file": "server/bin/emcie-server",
    "created_at": "2024-08-25T06:59:55+00:00",
    "commented_code": "c[MC] = mc\n             yield c\n \n+async def recover_server_tasks(evaluation_store=EvaluationStore, evaluation_service=EvaluationService,) -> None:\n+    [asyncio.create_task(evaluation_service.run_evaluation(evaluation)) for evaluation in await evaluation_store.list_active_evaluations() ]",
    "repo_full_name": "emcie-co/parlant",
    "discussion_comments": [
      {
        "comment_id": "1730269442",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 59,
        "pr_file": "server/bin/emcie-server",
        "discussion_id": "1730269442",
        "commented_code": "@@ -215,6 +219,8 @@ async def setup_container(config: Any) -> AsyncIterator[Container]:\n             c[MC] = mc\n             yield c\n \n+async def recover_server_tasks(evaluation_store=EvaluationStore, evaluation_service=EvaluationService,) -> None:\n+    [asyncio.create_task(evaluation_service.run_evaluation(evaluation)) for evaluation in await evaluation_store.list_active_evaluations() ]",
        "comment_created_at": "2024-08-25T06:59:55+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "Rename `evaluation_service` (as well as the class name) to `BehavioralChangeEvaluator`",
        "pr_file_module": null
      },
      {
        "comment_id": "1730269460",
        "repo_full_name": "emcie-co/parlant",
        "pr_number": 59,
        "pr_file": "server/bin/emcie-server",
        "discussion_id": "1730269442",
        "commented_code": "@@ -215,6 +219,8 @@ async def setup_container(config: Any) -> AsyncIterator[Container]:\n             c[MC] = mc\n             yield c\n \n+async def recover_server_tasks(evaluation_store=EvaluationStore, evaluation_service=EvaluationService,) -> None:\n+    [asyncio.create_task(evaluation_service.run_evaluation(evaluation)) for evaluation in await evaluation_store.list_active_evaluations() ]",
        "comment_created_at": "2024-08-25T07:00:10+00:00",
        "comment_author": "kichanyurd",
        "comment_body": "The variable name can then be just `evaluator`",
        "pr_file_module": null
      }
    ]
  }
]