[
  {
    "discussion_id": "2111379460",
    "pr_number": 36089,
    "pr_file": "packages/html-reporter/src/testResultView.tsx",
    "created_at": "2025-05-28T09:24:23+00:00",
    "commented_code": "return [...snapshotNameToImageDiff.values()];\n }\n \n+const PromptButton: React.FC<{ prompt: string }> = ({ prompt }) => {\n+  const [copied, setCopied] = React.useState(false);\n+  return <button\n+    className='button'\n+    style={{ minWidth: 100 }}\n+    onClick={async () => {\n+      await navigator.clipboard.writeText(prompt);\n+      setCopied(true);\n+      setTimeout(() => {\n+        setCopied(false);\n+      }, 3000);\n+    }}>\n+    {copied ? 'Copied' : 'Copy prompt'}\n+  </button>;\n+};\n+\n export const TestResultView: React.FC<{\n   test: TestCase,\n   result: TestResult,\n-}> = ({ test, result }) => {\n-  const { screenshots, videos, traces, otherAttachments, diffs, errors, otherAttachmentAnchors, screenshotAnchors } = React.useMemo(() => {\n+  metadata: MetadataWithCommitInfo,\n+  rootDir: string,\n+}> = ({ test, result, metadata, rootDir }) => {\n+  const { screenshots, videos, traces, otherAttachments, diffs, errors, otherAttachmentAnchors, screenshotAnchors, errorContext } = React.useMemo(() => {\n     const attachments = result.attachments.filter(a => !a.name.startsWith('_'));\n     const screenshots = new Set(attachments.filter(a => a.contentType.startsWith('image/')));\n     const screenshotAnchors = [...screenshots].map(a => `attachment-${attachments.indexOf(a)}`);\n     const videos = attachments.filter(a => a.contentType.startsWith('video/'));\n     const traces = attachments.filter(a => a.name === 'trace');\n+    const errorContext = attachments.find(a => a.name === 'error-context');\n     const otherAttachments = new Set<TestAttachment>(attachments);\n     [...screenshots, ...videos, ...traces].forEach(a => otherAttachments.delete(a));\n+    if (errorContext)\n+      otherAttachments.delete(errorContext);\n     const otherAttachmentAnchors = [...otherAttachments].map(a => `attachment-${attachments.indexOf(a)}`);\n     const diffs = groupImageDiffs(screenshots, result);\n-    const errors = classifyErrors(result.errors, diffs, result.attachments);\n-    return { screenshots: [...screenshots], videos, traces, otherAttachments, diffs, errors, otherAttachmentAnchors, screenshotAnchors };\n+    const errors = classifyErrors(result.errors.map(e => e.message), diffs);\n+    return { screenshots: [...screenshots], videos, traces, otherAttachments, diffs, errors, otherAttachmentAnchors, screenshotAnchors, errorContext };\n   }, [result]);\n \n+  const prompt = useAsyncMemo(\n+      async () => {\n+        const errorContextContent = errorContext?.path ? await fetch(errorContext.path).then(r => r.text()) : errorContext?.body;\n+        return await copyPrompt(\n+            [\n+              `- Name: ${test.path.join(' >> ')} >> ${test.title}`,\n+              `- Location: ${test.location.file}:${test.location.line}:${test.location.column}`\n+            ].join('\n'),\n+            result.errors,\n+            metadata,\n+            errorContextContent,\n+            async file => {\n+              const response = await fetch('trace/file?' + new URLSearchParams({ path: `${rootDir}/${file}` }));",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2111379460",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36089,
        "pr_file": "packages/html-reporter/src/testResultView.tsx",
        "discussion_id": "2111379460",
        "commented_code": "@@ -67,30 +70,79 @@ function groupImageDiffs(screenshots: Set<TestAttachment>, result: TestResult):\n   return [...snapshotNameToImageDiff.values()];\n }\n \n+const PromptButton: React.FC<{ prompt: string }> = ({ prompt }) => {\n+  const [copied, setCopied] = React.useState(false);\n+  return <button\n+    className='button'\n+    style={{ minWidth: 100 }}\n+    onClick={async () => {\n+      await navigator.clipboard.writeText(prompt);\n+      setCopied(true);\n+      setTimeout(() => {\n+        setCopied(false);\n+      }, 3000);\n+    }}>\n+    {copied ? 'Copied' : 'Copy prompt'}\n+  </button>;\n+};\n+\n export const TestResultView: React.FC<{\n   test: TestCase,\n   result: TestResult,\n-}> = ({ test, result }) => {\n-  const { screenshots, videos, traces, otherAttachments, diffs, errors, otherAttachmentAnchors, screenshotAnchors } = React.useMemo(() => {\n+  metadata: MetadataWithCommitInfo,\n+  rootDir: string,\n+}> = ({ test, result, metadata, rootDir }) => {\n+  const { screenshots, videos, traces, otherAttachments, diffs, errors, otherAttachmentAnchors, screenshotAnchors, errorContext } = React.useMemo(() => {\n     const attachments = result.attachments.filter(a => !a.name.startsWith('_'));\n     const screenshots = new Set(attachments.filter(a => a.contentType.startsWith('image/')));\n     const screenshotAnchors = [...screenshots].map(a => `attachment-${attachments.indexOf(a)}`);\n     const videos = attachments.filter(a => a.contentType.startsWith('video/'));\n     const traces = attachments.filter(a => a.name === 'trace');\n+    const errorContext = attachments.find(a => a.name === 'error-context');\n     const otherAttachments = new Set<TestAttachment>(attachments);\n     [...screenshots, ...videos, ...traces].forEach(a => otherAttachments.delete(a));\n+    if (errorContext)\n+      otherAttachments.delete(errorContext);\n     const otherAttachmentAnchors = [...otherAttachments].map(a => `attachment-${attachments.indexOf(a)}`);\n     const diffs = groupImageDiffs(screenshots, result);\n-    const errors = classifyErrors(result.errors, diffs, result.attachments);\n-    return { screenshots: [...screenshots], videos, traces, otherAttachments, diffs, errors, otherAttachmentAnchors, screenshotAnchors };\n+    const errors = classifyErrors(result.errors.map(e => e.message), diffs);\n+    return { screenshots: [...screenshots], videos, traces, otherAttachments, diffs, errors, otherAttachmentAnchors, screenshotAnchors, errorContext };\n   }, [result]);\n \n+  const prompt = useAsyncMemo(\n+      async () => {\n+        const errorContextContent = errorContext?.path ? await fetch(errorContext.path).then(r => r.text()) : errorContext?.body;\n+        return await copyPrompt(\n+            [\n+              `- Name: ${test.path.join(' >> ')} >> ${test.title}`,\n+              `- Location: ${test.location.file}:${test.location.line}:${test.location.column}`\n+            ].join('\\n'),\n+            result.errors,\n+            metadata,\n+            errorContextContent,\n+            async file => {\n+              const response = await fetch('trace/file?' + new URLSearchParams({ path: `${rootDir}/${file}` }));",
        "comment_created_at": "2025-05-28T09:24:23+00:00",
        "comment_author": "dgozman",
        "comment_body": "I'd prefer that html report does not know about `rootDir` or anything filesystem-related. Can we instead fetch sources while building the report, and include them explicitly? This way, you can also open the report from anywhere at any time, and things will work.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1983318699",
    "pr_number": 35070,
    "pr_file": "packages/trace-viewer/src/ui/aiConversation.tsx",
    "created_at": "2025-03-06T13:03:08+00:00",
    "commented_code": "placeholder='Ask a question...'\n           className='message-input'\n         />\n-        {conversation.isSending() ? (\n+        {onCancel ? (",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "1983318699",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35070,
        "pr_file": "packages/trace-viewer/src/ui/aiConversation.tsx",
        "discussion_id": "1983318699",
        "commented_code": "@@ -66,10 +93,10 @@ export function AIConversation({ conversationId }: { conversationId: string }) {\n           placeholder='Ask a question...'\n           className='message-input'\n         />\n-        {conversation.isSending() ? (\n+        {onCancel ? (",
        "comment_created_at": "2025-03-06T13:03:08+00:00",
        "comment_author": "agg23",
        "comment_body": "I prefer still doing an explicit check, rather than swapping out a callback. It's weird from an API perspective to have APIs that literally become `undefined` if their conditions aren't met.",
        "pr_file_module": null
      }
    ]
  }
]