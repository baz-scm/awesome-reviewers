[
  {
    "discussion_id": "2182159581",
    "pr_number": 35814,
    "pr_file": "packages/playwright-core/src/cli/program.ts",
    "created_at": "2025-07-03T08:15:51+00:00",
    "commented_code": "return { browser, browserName: browserType.name(), context, contextOptions, launchOptions };\n }\n \n-async function openPage(context: BrowserContext, url: string | undefined): Promise<Page> {\n-  const page = await context.newPage();\n+async function openPage(context: BrowserContext, url: string | undefined, allowPageReuse: boolean = false): Promise<Page> {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2182159581",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35814,
        "pr_file": "packages/playwright-core/src/cli/program.ts",
        "discussion_id": "2182159581",
        "commented_code": "@@ -608,8 +614,10 @@ async function launchContext(options: Options, extraOptions: LaunchOptions): Pro\n   return { browser, browserName: browserType.name(), context, contextOptions, launchOptions };\n }\n \n-async function openPage(context: BrowserContext, url: string | undefined): Promise<Page> {\n-  const page = await context.newPage();\n+async function openPage(context: BrowserContext, url: string | undefined, allowPageReuse: boolean = false): Promise<Page> {",
        "comment_created_at": "2025-07-03T08:15:51+00:00",
        "comment_author": "dgozman",
        "comment_body": "Now that we support `--user-data-dir` option in most commands, it looks like all the callers of `openPage` actually want to `allowPageReuse`. I think we can safely remove this argument.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167639263",
    "pr_number": 36439,
    "pr_file": "packages/playwright-core/src/server/browserContext.ts",
    "created_at": "2025-06-25T21:09:17+00:00",
    "commented_code": "await this.doClearPermissions();\n   }\n \n+  async setExtraHTTPHeaders(progress: Progress, headers: types.HeadersArray) {\n+    const oldHeaders = this._options.extraHTTPHeaders;\n+    this._options.extraHTTPHeaders = headers;\n+    progress.cleanupWhenAborted(async () => {\n+      this._options.extraHTTPHeaders = oldHeaders;\n+      await this.doUpdateExtraHTTPHeaders();",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2167639263",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36439,
        "pr_file": "packages/playwright-core/src/server/browserContext.ts",
        "discussion_id": "2167639263",
        "commented_code": "@@ -380,6 +379,26 @@ export abstract class BrowserContext extends SdkObject {\n     await this.doClearPermissions();\n   }\n \n+  async setExtraHTTPHeaders(progress: Progress, headers: types.HeadersArray) {\n+    const oldHeaders = this._options.extraHTTPHeaders;\n+    this._options.extraHTTPHeaders = headers;\n+    progress.cleanupWhenAborted(async () => {\n+      this._options.extraHTTPHeaders = oldHeaders;\n+      await this.doUpdateExtraHTTPHeaders();",
        "comment_created_at": "2025-06-25T21:09:17+00:00",
        "comment_author": "yury-s",
        "comment_body": "Nit: maybe just pass the new headers as a param and only update them in options on success?",
        "pr_file_module": null
      },
      {
        "comment_id": "2168535239",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36439,
        "pr_file": "packages/playwright-core/src/server/browserContext.ts",
        "discussion_id": "2167639263",
        "commented_code": "@@ -380,6 +379,26 @@ export abstract class BrowserContext extends SdkObject {\n     await this.doClearPermissions();\n   }\n \n+  async setExtraHTTPHeaders(progress: Progress, headers: types.HeadersArray) {\n+    const oldHeaders = this._options.extraHTTPHeaders;\n+    this._options.extraHTTPHeaders = headers;\n+    progress.cleanupWhenAborted(async () => {\n+      this._options.extraHTTPHeaders = oldHeaders;\n+      await this.doUpdateExtraHTTPHeaders();",
        "comment_created_at": "2025-06-26T08:44:11+00:00",
        "comment_author": "dgozman",
        "comment_body": "That's an interesting idea, but makes it harder to wire up on the browser-specific implementations.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2139889393",
    "pr_number": 36213,
    "pr_file": "packages/playwright/src/matchers/toMatchText.ts",
    "created_at": "2025-06-11T11:23:48+00:00",
    "commented_code": "import type { MatcherResult } from './matcherHint';\n import type { ExpectMatcherState } from '../../types/test';\n-import type { Locator } from 'playwright-core';\n+import type { Page, Locator } from 'playwright-core';\n \n export async function toMatchText(\n   this: ExpectMatcherState,\n   matcherName: string,\n-  receiver: Locator,\n+  receiver: Locator | Page,",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2139889393",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36213,
        "pr_file": "packages/playwright/src/matchers/toMatchText.ts",
        "discussion_id": "2139889393",
        "commented_code": "@@ -27,12 +27,12 @@ import { EXPECTED_COLOR } from '../common/expectBundle';\n \n import type { MatcherResult } from './matcherHint';\n import type { ExpectMatcherState } from '../../types/test';\n-import type { Locator } from 'playwright-core';\n+import type { Page, Locator } from 'playwright-core';\n \n export async function toMatchText(\n   this: ExpectMatcherState,\n   matcherName: string,\n-  receiver: Locator,\n+  receiver: Locator | Page,",
        "comment_created_at": "2025-06-11T11:23:48+00:00",
        "comment_author": "dgozman",
        "comment_body": "I guess we should pass `receiverLabel: 'page'` whenever we pass a page, or better yet auto-detect it here? Perhaps default to `receiverType.toLowerCase()`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2060722553",
    "pr_number": 35752,
    "pr_file": "packages/playwright/src/worker/testInfo.ts",
    "created_at": "2025-04-25T18:42:33+00:00",
    "commented_code": "return sanitizeForFilePath(trimLongString(fullTitleWithoutSpec));\n   }\n \n-  _resolveSnapshotPath(kind: 'snapshot' | 'screenshot' | 'aria', pathSegments: string[], sanitizeFilePath: boolean) {\n-    let subPath = path.join(...pathSegments);\n-    let ext = path.extname(subPath);\n+  _resolveSnapshotPaths(kind: 'snapshot' | 'screenshot' | 'aria', name: string | string[] | undefined, updateSnapshotIndex: boolean, anonymousExtension?: string) {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2060722553",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35752,
        "pr_file": "packages/playwright/src/worker/testInfo.ts",
        "discussion_id": "2060722553",
        "commented_code": "@@ -448,28 +455,70 @@ export class TestInfoImpl implements TestInfo {\n     return sanitizeForFilePath(trimLongString(fullTitleWithoutSpec));\n   }\n \n-  _resolveSnapshotPath(kind: 'snapshot' | 'screenshot' | 'aria', pathSegments: string[], sanitizeFilePath: boolean) {\n-    let subPath = path.join(...pathSegments);\n-    let ext = path.extname(subPath);\n+  _resolveSnapshotPaths(kind: 'snapshot' | 'screenshot' | 'aria', name: string | string[] | undefined, updateSnapshotIndex: boolean, anonymousExtension?: string) {",
        "comment_created_at": "2025-04-25T18:42:33+00:00",
        "comment_author": "yury-s",
        "comment_body": "Use `anonymousIndexBehavior: 'updateAnonymousSnapshotIndex'|'dontUpdateAnonymousSnapshotIndex'` instead of a boolean, so that you don't need the comment at every call site.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2030985619",
    "pr_number": 35508,
    "pr_file": "tests/playwright-test/reporter-html.spec.ts",
    "created_at": "2025-04-07T10:51:51+00:00",
    "commented_code": "test('should have link for opening HTML attachments in new tab', async ({ runInlineTest, page, showReport }) => {\n       const result = await runInlineTest({\n         'a.test.js': `\n+          import * as fs from 'fs/promises';\n           import { test, expect } from '@playwright/test';\n           test('passing', async ({ page }, testInfo) => {\n             await testInfo.attach('axe-report.html', {\n               contentType: 'text/html',\n               body: '<h1>Axe Report</h1>',\n             });\n+\n+            const attachmentFile = testInfo.outputPath('foo.html');\n+            await fs.writeFile(attachmentFile, '<h1>Hello World</h1>');\n+            await testInfo.attach('foo.html', { path: attachmentFile, contentType: 'text/html' });",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2030985619",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35508,
        "pr_file": "tests/playwright-test/reporter-html.spec.ts",
        "discussion_id": "2030985619",
        "commented_code": "@@ -944,12 +944,17 @@ for (const useIntermediateMergeReport of [true, false] as const) {\n     test('should have link for opening HTML attachments in new tab', async ({ runInlineTest, page, showReport }) => {\n       const result = await runInlineTest({\n         'a.test.js': `\n+          import * as fs from 'fs/promises';\n           import { test, expect } from '@playwright/test';\n           test('passing', async ({ page }, testInfo) => {\n             await testInfo.attach('axe-report.html', {\n               contentType: 'text/html',\n               body: '<h1>Axe Report</h1>',\n             });\n+\n+            const attachmentFile = testInfo.outputPath('foo.html');\n+            await fs.writeFile(attachmentFile, '<h1>Hello World</h1>');\n+            await testInfo.attach('foo.html', { path: attachmentFile, contentType: 'text/html' });",
        "comment_created_at": "2025-04-07T10:51:51+00:00",
        "comment_author": "dgozman",
        "comment_body": "I think you don't need to specify `contentType` here, it should be inferred from the `path`.",
        "pr_file_module": null
      }
    ]
  }
]