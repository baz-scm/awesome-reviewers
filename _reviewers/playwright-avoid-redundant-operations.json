[
  {
    "discussion_id": "2183837406",
    "pr_number": 36316,
    "pr_file": "packages/injected/src/ariaSnapshot.ts",
    "created_at": "2025-07-03T22:07:34+00:00",
    "commented_code": "};\n   }\n \n-  const defaultRole = options?.forAI ? 'generic' : null;\n-  const role = roleUtils.getAriaRole(element) ?? defaultRole;\n+  let role: AriaRole | null = null;\n+  if (options?.forAI) {\n+    const isVisible = !roleUtils.isElementHiddenForAria(element) || isElementVisible(element);",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2183837406",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36316,
        "pr_file": "packages/injected/src/ariaSnapshot.ts",
        "discussion_id": "2183837406",
        "commented_code": "@@ -176,8 +179,14 @@ function toAriaNode(element: Element, options?: { forAI?: boolean, refPrefix?: s\n     };\n   }\n \n-  const defaultRole = options?.forAI ? 'generic' : null;\n-  const role = roleUtils.getAriaRole(element) ?? defaultRole;\n+  let role: AriaRole | null = null;\n+  if (options?.forAI) {\n+    const isVisible = !roleUtils.isElementHiddenForAria(element) || isElementVisible(element);",
        "comment_created_at": "2025-07-03T22:07:34+00:00",
        "comment_author": "pavelfeldman",
        "comment_body": "Are we making these checks twice for each node? Looking at `parentVisible = isElementVisible(element);` and `if (!options?.forAI && roleUtils.isElementHiddenForAria(element))` above.",
        "pr_file_module": null
      },
      {
        "comment_id": "2184618365",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36316,
        "pr_file": "packages/injected/src/ariaSnapshot.ts",
        "discussion_id": "2183837406",
        "commented_code": "@@ -176,8 +179,14 @@ function toAriaNode(element: Element, options?: { forAI?: boolean, refPrefix?: s\n     };\n   }\n \n-  const defaultRole = options?.forAI ? 'generic' : null;\n-  const role = roleUtils.getAriaRole(element) ?? defaultRole;\n+  let role: AriaRole | null = null;\n+  if (options?.forAI) {\n+    const isVisible = !roleUtils.isElementHiddenForAria(element) || isElementVisible(element);",
        "comment_created_at": "2025-07-04T07:27:53+00:00",
        "comment_author": "Skn0tt",
        "comment_body": "The `isElementHiddenForAria` check is only made once, since one of the checks is behind `forAI` and the other is behind `!forAI`.\r\n\r\n`isElementVisible` is indeed called twice for the same element. Even worse, it is called `parentVisible = isElementVisible(element)` is called for each tree node, but only used for a subset of leaf nodes. That's what the parameter argument did, I suppose. Let me see to it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2184701950",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36316,
        "pr_file": "packages/injected/src/ariaSnapshot.ts",
        "discussion_id": "2183837406",
        "commented_code": "@@ -176,8 +179,14 @@ function toAriaNode(element: Element, options?: { forAI?: boolean, refPrefix?: s\n     };\n   }\n \n-  const defaultRole = options?.forAI ? 'generic' : null;\n-  const role = roleUtils.getAriaRole(element) ?? defaultRole;\n+  let role: AriaRole | null = null;\n+  if (options?.forAI) {\n+    const isVisible = !roleUtils.isElementHiddenForAria(element) || isElementVisible(element);",
        "comment_created_at": "2025-07-04T08:15:12+00:00",
        "comment_author": "Skn0tt",
        "comment_body": "Alright, after molding this change around, I arrived at something good.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2183013421",
    "pr_number": 36542,
    "pr_file": "packages/playwright/src/isomorphic/teleReceiver.ts",
    "created_at": "2025-07-03T14:59:32+00:00",
    "commented_code": "test.location = this._absoluteLocation(payload.location);\n     test.retries = payload.retries;\n     test.tags = payload.tags ?? [];\n-    test.annotations = payload.annotations ?? [];\n+    test.annotations = this._absoluteAnnotationLocations(payload.annotations ?? []);\n     return test;\n   }\n \n+  private _absoluteAnnotationLocations(annotations: TestAnnotation[]): TestAnnotation[] {\n+    return annotations.map(annotation => {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2183013421",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36542,
        "pr_file": "packages/playwright/src/isomorphic/teleReceiver.ts",
        "discussion_id": "2183013421",
        "commented_code": "@@ -498,10 +498,18 @@ export class TeleReporterReceiver {\n     test.location = this._absoluteLocation(payload.location);\n     test.retries = payload.retries;\n     test.tags = payload.tags ?? [];\n-    test.annotations = payload.annotations ?? [];\n+    test.annotations = this._absoluteAnnotationLocations(payload.annotations ?? []);\n     return test;\n   }\n \n+  private _absoluteAnnotationLocations(annotations: TestAnnotation[]): TestAnnotation[] {\n+    return annotations.map(annotation => {",
        "comment_created_at": "2025-07-03T14:59:32+00:00",
        "comment_author": "dgozman",
        "comment_body": "Can we retain the same array instead of creating a new one? This is a memory-sensitive place, so minimizing the number of objects of any type is beneficial.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2081955172",
    "pr_number": 35909,
    "pr_file": "packages/playwright-core/bundles/zip/src/third_party/extract-zip.d.ts",
    "created_at": "2025-05-09T15:39:28+00:00",
    "commented_code": "}\n \n declare function extract(\n-  zipPath: string,\n+  zipPath: Buffer,",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2081955172",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35909,
        "pr_file": "packages/playwright-core/bundles/zip/src/third_party/extract-zip.d.ts",
        "discussion_id": "2081955172",
        "commented_code": "@@ -49,7 +49,7 @@ declare namespace extract {\n }\n \n declare function extract(\n-  zipPath: string,\n+  zipPath: Buffer,",
        "comment_created_at": "2025-05-09T15:39:28+00:00",
        "comment_author": "yury-s",
        "comment_body": "Do you have numbers of how much do we save? I guess it'd be the most beneficial on Windows, but by how much? Also this means holding entire buffers in memory which might hit us if we finally decide to download in parallel. So I'm a bit hesitant changing this.",
        "pr_file_module": null
      },
      {
        "comment_id": "2083599621",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35909,
        "pr_file": "packages/playwright-core/bundles/zip/src/third_party/extract-zip.d.ts",
        "discussion_id": "2081955172",
        "commented_code": "@@ -49,7 +49,7 @@ declare namespace extract {\n }\n \n declare function extract(\n-  zipPath: string,\n+  zipPath: Buffer,",
        "comment_created_at": "2025-05-11T19:20:35+00:00",
        "comment_author": "mxschmitt",
        "comment_body": "On a M1 Pro Mac machine its a `9.55` % improvement and on a Windows DevBox its a `11.71` % improvement. Both of these tests were made on a fast machine and using a SSD. I expect much higher improvements when we consider slow (e.g. HDD) or busy disks.\r\n\r\nre the comment for parallel downloads. If we assume to hold all our downloads in memory it would be `293 MB` on Windows which would be still manageable I'd say. This aligns well of how much Chromium takes when navigating to websites. Its even higher sometimes on busy websites.\r\n\r\n<details>\r\n  <summary>Used data</summary>\r\n\r\n### macOS M1 Pro\r\n\r\nwith file write:\r\n\r\n```\r\ntest chromium-win64.zip via file attempt 1: 1.472s\r\ntest chromium-win64.zip via file attempt 2: 1.455s\r\ntest chromium-win64.zip via file attempt 3: 1.445s\r\ntest webkit-ubuntu-24.04.zip via file attempt 1: 968.385ms\r\ntest webkit-ubuntu-24.04.zip via file attempt 2: 1.017s\r\ntest webkit-ubuntu-24.04.zip via file attempt 3: 1.065s\r\n```\r\n\r\nwith in-memory:\r\n\r\n```\r\ntest chromium-win64.zip in memory attempt 1: 1.332s\r\ntest chromium-win64.zip in memory attempt 2: 1.391s\r\ntest chromium-win64.zip in memory attempt 3: 1.273s\r\ntest webkit-ubuntu-24.04.zip in memory attempt 1: 966.896ms\r\ntest webkit-ubuntu-24.04.zip in memory attempt 2: 906.812ms\r\ntest webkit-ubuntu-24.04.zip in memory attempt 3: 912.546ms\r\n```\r\n\r\n```\r\n((1.472 + 1.455 + 1.445) / (1.332 + 1.391 + 1.273) - 1) * 100 = 9.41 % faster with chromium-win64.zip\r\n((0.968 + 1.017 + 1.065) / (0.966 + 0.906 + 0.912) - 1) * 100 = 9.55 % faster with webkit-ubuntu-24.04.zip\r\n```\r\n\r\n### Windows DevBox 64GB RAM\r\n\r\nwith file write:\r\n\r\n```\r\nPS C:\\Users\\maxschmitt\\Developer\\playwright> node test.mjs\r\ntest chromium-win64.zip via file attempt 1: 3.575s\r\ntest chromium-win64.zip via file attempt 2: 3.529s\r\ntest chromium-win64.zip via file attempt 3: 3.499s\r\ntest webkit-ubuntu-24.04.zip via file attempt 1: 2.423s\r\ntest webkit-ubuntu-24.04.zip via file attempt 2: 2.421s\r\ntest webkit-ubuntu-24.04.zip via file attempt 3: 2.310s\r\n```\r\n\r\nwith in-memory:\r\n\r\n```\r\nPS C:\\Users\\maxschmitt\\Developer\\playwright> node test.mjs\r\ntest chromium-win64.zip in memory attempt 1: 3.234s\r\ntest chromium-win64.zip in memory attempt 2: 3.042s\r\ntest chromium-win64.zip in memory attempt 3: 3.240s\r\ntest webkit-ubuntu-24.04.zip in memory attempt 1: 2.051s\r\ntest webkit-ubuntu-24.04.zip in memory attempt 2: 2.140s\r\ntest webkit-ubuntu-24.04.zip in memory attempt 3: 2.213s\r\nPS C:\\Users\\maxschmitt\\Developer\\playwright>\r\n```\r\n\r\nresults\r\n\r\n```\r\n((3.575 + 3.529 + 3.499) / (3.234 + 3.042 + 3.240) - 1) * 100 = 11.42 % faster with chromium-win64.zip\r\n((2.423 + 2.421 + 2.310) / (2.051 + 2.140 + 2.213) - 1) * 100 = 11.71 % faster with webkit-ubuntu-24.04.zip\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary>Script</summary>\r\n\r\n```ts\r\nimport os from 'node:os';\r\nimport fs from 'node:fs';\r\nimport path from 'node:path';\r\n\r\nimport extractZip from './packages/playwright-core/bundles/zip/src/third_party/extract-zip.js';\r\n\r\nconst testcases = [\r\n  'https://playwright.azureedge.net/dbazure/download/playwright/builds/chromium/1172/chromium-win64.zip',\r\n  'https://playwright.azureedge.net/dbazure/download/playwright/builds/webkit/2169/webkit-ubuntu-24.04.zip',\r\n]\r\nconst inMemory = true;\r\n\r\nconst testDir = path.join(os.tmpdir(), 'playwright-extract-zip-test');\r\n\r\nfor (const url of testcases) {\r\n  const file = Buffer.from(await fetch(url).then(res => res.arrayBuffer()));\r\n  for (let i = 0; i < 3; i++) {\r\n    if (fs.existsSync(testDir))\r\n      fs.rmSync(testDir, { recursive: true, force: true });\r\n    fs.mkdirSync(testDir);\r\n    const testTitle = `test ${path.basename(url)} ${inMemory ? 'in memory' : 'via file'} attempt ${i + 1}`;\r\n    if (inMemory) {\r\n      console.time(testTitle);\r\n      await extractZip(file, { dir: testDir });\r\n    } else {\r\n      console.time(testTitle);\r\n      const filePath = path.join(testDir, 'chromium.zip');\r\n      // Intentionally having the writeFileSync included in the time measurement\r\n      // to see if it affects the performance.\r\n      fs.writeFileSync(filePath, file);\r\n      await extractZip(filePath, { dir: testDir });\r\n    }\r\n    console.timeEnd(testTitle);\r\n  }\r\n}\r\n```\r\n\r\n</details>\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2087079980",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35909,
        "pr_file": "packages/playwright-core/bundles/zip/src/third_party/extract-zip.d.ts",
        "discussion_id": "2081955172",
        "commented_code": "@@ -49,7 +49,7 @@ declare namespace extract {\n }\n \n declare function extract(\n-  zipPath: string,\n+  zipPath: Buffer,",
        "comment_created_at": "2025-05-13T15:15:49+00:00",
        "comment_author": "Skn0tt",
        "comment_body": "Sounds plausible! This is on the critical path, so we should\u00a0place this behind an opt-out flag.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2022784919",
    "pr_number": 35435,
    "pr_file": "tests/library/page-clock.spec.ts",
    "created_at": "2025-04-01T12:46:12+00:00",
    "commented_code": "expect(dateValue).toBe(1001);\n   });\n });\n+\n+it('correctly increments performance.now during blocking execution', {\n+  annotation: {\n+    type: 'issue',\n+    description: 'https://github.com/microsoft/playwright/issues/35362',\n+  }\n+}, async ({ page, server }) => {\n+  await page.clock.setSystemTime(new Date('2026-01-01'));\n+  server.setRoute('/repro.html', (req, res) => {\n+    res.writeHead(200, { 'Content-Type': 'text/html' });\n+    res.end(`\n+      <html>\n+        <body>\n+          <script>\n+          // call performance.now() until 5s has passed\n+          const start = performance.now();\n+          while (performance.now() - start < 5000) { }",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2022784919",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35435,
        "pr_file": "tests/library/page-clock.spec.ts",
        "discussion_id": "2022784919",
        "commented_code": "@@ -533,3 +533,30 @@ it.describe('Date.now', () => {\n     expect(dateValue).toBe(1001);\n   });\n });\n+\n+it('correctly increments performance.now during blocking execution', {\n+  annotation: {\n+    type: 'issue',\n+    description: 'https://github.com/microsoft/playwright/issues/35362',\n+  }\n+}, async ({ page, server }) => {\n+  await page.clock.setSystemTime(new Date('2026-01-01'));\n+  server.setRoute('/repro.html', (req, res) => {\n+    res.writeHead(200, { 'Content-Type': 'text/html' });\n+    res.end(`\n+      <html>\n+        <body>\n+          <script>\n+          // call performance.now() until 5s has passed\n+          const start = performance.now();\n+          while (performance.now() - start < 5000) { }",
        "comment_created_at": "2025-04-01T12:46:12+00:00",
        "comment_author": "dgozman",
        "comment_body": "Can we make this `100` to not waste cpu on the bots?",
        "pr_file_module": null
      }
    ]
  }
]