[
  {
    "discussion_id": "2257968265",
    "pr_number": 36947,
    "pr_file": "tests/library/role-utils.spec.ts",
    "created_at": "2025-08-06T18:33:32+00:00",
    "commented_code": "await expect.soft(page.getByRole('search', { name: 'example' })).toBeVisible();\n });\n \n+test('should consider inert elements to be hidden', async ({ page }) => {\n+  await page.setContent(`\n+        <div aria-hidden=\"true\">\n+            <button type=\"button\">First</button>\n+        </div>\n+        <div inert>\n+            <button type=\"button\">Second</button>",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2257968265",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36947,
        "pr_file": "tests/library/role-utils.spec.ts",
        "discussion_id": "2257968265",
        "commented_code": "@@ -564,6 +564,32 @@ test('should support search element', async ({ page }) => {\n   await expect.soft(page.getByRole('search', { name: 'example' })).toBeVisible();\n });\n \n+test('should consider inert elements to be hidden', async ({ page }) => {\n+  await page.setContent(`\n+        <div aria-hidden=\"true\">\n+            <button type=\"button\">First</button>\n+        </div>\n+        <div inert>\n+            <button type=\"button\">Second</button>",
        "comment_created_at": "2025-08-06T18:33:32+00:00",
        "comment_author": "amitbiswal007",
        "comment_body": "This test can be made better by including another button element which is not hidden, and validating the count accordingly.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2171041842",
    "pr_number": 36316,
    "pr_file": "tests/page/page-aria-snapshot-ai.spec.ts",
    "created_at": "2025-06-27T07:37:40+00:00",
    "commented_code": "`, { waitUntil: 'commit' });\n   expect(await snapshotForAI(page)).toContainYaml('Hello World');\n });\n+\n+it('should show visible children of hidden elements', { annotation: { type: 'issue', description: 'https://github.com/microsoft/playwright/issues/36296' }  }, async ({ page }) => {\n+  await page.setContent(`",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2171041842",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36316,
        "pr_file": "tests/page/page-aria-snapshot-ai.spec.ts",
        "discussion_id": "2171041842",
        "commented_code": "@@ -252,3 +252,16 @@ it('should auto-wait for blocking CSS', async ({ page, server }) => {\n   `, { waitUntil: 'commit' });\n   expect(await snapshotForAI(page)).toContainYaml('Hello World');\n });\n+\n+it('should show visible children of hidden elements', { annotation: { type: 'issue', description: 'https://github.com/microsoft/playwright/issues/36296' }  }, async ({ page }) => {\n+  await page.setContent(`",
        "comment_created_at": "2025-06-27T07:37:40+00:00",
        "comment_author": "dgozman",
        "comment_body": "Let's make this test a bit more involved:\r\n\r\n```\r\n- hidden\r\n  - visible\r\n    - neutral\r\n  - hidden\r\n    - visible\r\n  - neutral (no visibility change)\r\n    - visible\r\n      - hidden\r\n    - neutral\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2171091552",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36316,
        "pr_file": "tests/page/page-aria-snapshot-ai.spec.ts",
        "discussion_id": "2171041842",
        "commented_code": "@@ -252,3 +252,16 @@ it('should auto-wait for blocking CSS', async ({ page, server }) => {\n   `, { waitUntil: 'commit' });\n   expect(await snapshotForAI(page)).toContainYaml('Hello World');\n });\n+\n+it('should show visible children of hidden elements', { annotation: { type: 'issue', description: 'https://github.com/microsoft/playwright/issues/36296' }  }, async ({ page }) => {\n+  await page.setContent(`",
        "comment_created_at": "2025-06-27T07:50:07+00:00",
        "comment_author": "Skn0tt",
        "comment_body": "done in https://github.com/microsoft/playwright/pull/36316/commits/9584dc65a7c18b2f578c84cd2c7ebbe686171d69",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2009821534",
    "pr_number": 35203,
    "pr_file": "tests/playwright-test/reporter-html.spec.ts",
    "created_at": "2025-03-24T09:46:34+00:00",
    "commented_code": "await page.getByRole('link', { name: 'sample' }).click();\n       await expect(page.getByRole('button', { name: 'Copy prompt' })).toHaveCount(1);\n     });\n+\n+    test('should toggle code snippet visibility', async ({ runInlineTest, showReport, page }) => {\n+      await runInlineTest({\n+        'a.test.js': `\n+            const { test, expect } = require('@playwright/test');\n+\n+            test('test with multiple steps and snippets', async ({ page }) => {\n+              console.log('Test started'); // First snippet\n+          \n+              await test.step('Step 1: Navigate to example page', async () => {\n+                await page.goto('https://example.com');\n+                console.log('Navigated to example.com'); // Second snippet\n+              });\n+          \n+              await test.step('Step 2: Check page title', async () => {\n+                const title = await page.title();\n+                console.log('Page title is:', title); // Third snippet\n+                expect(title).toBe('Example Domain'); // Fourth snippet\n+              });\n+          \n+              await test.step('Step 3: Find and click a link', async () => {\n+                const link = page.locator('a');\n+                await expect(link).toBeVisible();\n+                console.log('Link is visible'); // Fifth snippet\n+                await link.click();\n+                console.log('Clicked the link'); // Sixth snippet\n+              });\n+          \n+              console.log('Test finished'); // Seventh snippet\n+            });\n+          `,\n+      }, { reporter: 'dot,html' }, { PLAYWRIGHT_HTML_OPEN: 'never' });\n+\n+\n+      await showReport();\n+\n+      const testLink = page.locator('a[title*=\"test with multiple steps and snippets\"]').nth(0);\n+      await expect(testLink).toBeVisible();\n+      await testLink.click();\n+\n+      await expect(page).toHaveURL(/#\\?testId=/);\n+      const toggleCheckbox = page.locator('#checkBoxSetting-Show\\\\ Snippets');\n+      await expect(toggleCheckbox).toBeVisible();\n+\n+      const secondTreeItem = page.locator('.tree-item-title').nth(1);\n+      await expect(secondTreeItem).toBeVisible();\n+      await secondTreeItem.click();\n+\n+      const thirdTreeItem = page.locator('.tree-item-title').nth(2);\n+      await expect(thirdTreeItem).toBeVisible();\n+      await thirdTreeItem.click();\n+\n+      const codeSnippets = page.locator('[data-testid=\"test-snippet\"]');\n+      await expect(codeSnippets.first()).toBeVisible();",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2009821534",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35203,
        "pr_file": "tests/playwright-test/reporter-html.spec.ts",
        "discussion_id": "2009821534",
        "commented_code": "@@ -2790,6 +2790,69 @@ for (const useIntermediateMergeReport of [true, false] as const) {\n       await page.getByRole('link', { name: 'sample' }).click();\n       await expect(page.getByRole('button', { name: 'Copy prompt' })).toHaveCount(1);\n     });\n+\n+    test('should toggle code snippet visibility', async ({ runInlineTest, showReport, page }) => {\n+      await runInlineTest({\n+        'a.test.js': `\n+            const { test, expect } = require('@playwright/test');\n+\n+            test('test with multiple steps and snippets', async ({ page }) => {\n+              console.log('Test started'); // First snippet\n+          \n+              await test.step('Step 1: Navigate to example page', async () => {\n+                await page.goto('https://example.com');\n+                console.log('Navigated to example.com'); // Second snippet\n+              });\n+          \n+              await test.step('Step 2: Check page title', async () => {\n+                const title = await page.title();\n+                console.log('Page title is:', title); // Third snippet\n+                expect(title).toBe('Example Domain'); // Fourth snippet\n+              });\n+          \n+              await test.step('Step 3: Find and click a link', async () => {\n+                const link = page.locator('a');\n+                await expect(link).toBeVisible();\n+                console.log('Link is visible'); // Fifth snippet\n+                await link.click();\n+                console.log('Clicked the link'); // Sixth snippet\n+              });\n+          \n+              console.log('Test finished'); // Seventh snippet\n+            });\n+          `,\n+      }, { reporter: 'dot,html' }, { PLAYWRIGHT_HTML_OPEN: 'never' });\n+\n+\n+      await showReport();\n+\n+      const testLink = page.locator('a[title*=\"test with multiple steps and snippets\"]').nth(0);\n+      await expect(testLink).toBeVisible();\n+      await testLink.click();\n+\n+      await expect(page).toHaveURL(/#\\?testId=/);\n+      const toggleCheckbox = page.locator('#checkBoxSetting-Show\\\\ Snippets');\n+      await expect(toggleCheckbox).toBeVisible();\n+\n+      const secondTreeItem = page.locator('.tree-item-title').nth(1);\n+      await expect(secondTreeItem).toBeVisible();\n+      await secondTreeItem.click();\n+\n+      const thirdTreeItem = page.locator('.tree-item-title').nth(2);\n+      await expect(thirdTreeItem).toBeVisible();\n+      await thirdTreeItem.click();\n+\n+      const codeSnippets = page.locator('[data-testid=\"test-snippet\"]');\n+      await expect(codeSnippets.first()).toBeVisible();",
        "comment_created_at": "2025-03-24T09:46:34+00:00",
        "comment_author": "dgozman",
        "comment_body": "It is better to use `toHaveCount(3)` with the right number here, and `toHaveCount(0)` to check that snippets are hidden.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2025035932",
    "pr_number": 35425,
    "pr_file": "tests/playwright-test/ui-mode-test-network-tab.spec.ts",
    "created_at": "2025-04-02T15:03:05+00:00",
    "commented_code": "await page.getByText('Network', { exact: true }).click();\n \n   await page.getByText('call-with-query-params').click();\n-\n-  await expect(page.getByText('Query String Parameters')).toBeVisible();\n-  await expect(page.getByText('param1: value1')).toBeVisible();\n-  await expect(page.getByText('param1: value2')).toBeVisible();\n-  await expect(page.getByText('param2: value2')).toBeVisible();\n+  await expect(page.getByRole('group', { name: 'Query String Parameters' })).toMatchAriaSnapshot(\n+      `- table:\n+         - rowgroup:\n+           - 'row \"param1: value1\"'\n+           - 'row \"param1: value2\"'\n+           - 'row \"param2: value2\"'\n+      `\n+  );\n \n   await page.getByText('endpoint').click();",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2025035932",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35425,
        "pr_file": "tests/playwright-test/ui-mode-test-network-tab.spec.ts",
        "discussion_id": "2025035932",
        "commented_code": "@@ -150,11 +150,14 @@ test('should display list of query parameters (only if present)', async ({ runUI\n   await page.getByText('Network', { exact: true }).click();\n \n   await page.getByText('call-with-query-params').click();\n-\n-  await expect(page.getByText('Query String Parameters')).toBeVisible();\n-  await expect(page.getByText('param1: value1')).toBeVisible();\n-  await expect(page.getByText('param1: value2')).toBeVisible();\n-  await expect(page.getByText('param2: value2')).toBeVisible();\n+  await expect(page.getByRole('group', { name: 'Query String Parameters' })).toMatchAriaSnapshot(\n+      `- table:\n+         - rowgroup:\n+           - 'row \"param1: value1\"'\n+           - 'row \"param1: value2\"'\n+           - 'row \"param2: value2\"'\n+      `\n+  );\n \n   await page.getByText('endpoint').click();",
        "comment_created_at": "2025-04-02T15:03:05+00:00",
        "comment_author": "agg23",
        "comment_body": "Please add at least one test dealing with expansion and collapse of the new `DetailsSection`s.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1998729228",
    "pr_number": 35229,
    "pr_file": "tests/page/expect-misc.spec.ts",
    "created_at": "2025-03-17T13:25:50+00:00",
    "commented_code": "const error = await expect(locator).toHaveClass(['foo', 'bar', /[a-z]az/], { timeout: 1000 }).catch(e => e);\n     expect(error.message).toContain('expect.toHaveClass with timeout 1000ms');\n   });\n+\n+  test('allow matching partial class names', async ({ page }) => {\n+    await page.setContent('<div class=\"foo bar baz\"></div>');\n+    const locator = page.locator('div');\n+    await expect(locator).toHaveClass('foo', { partial: true });",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "1998729228",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35229,
        "pr_file": "tests/page/expect-misc.spec.ts",
        "discussion_id": "1998729228",
        "commented_code": "@@ -220,6 +220,26 @@ test.describe('toHaveClass', () => {\n     const error = await expect(locator).toHaveClass(['foo', 'bar', /[a-z]az/], { timeout: 1000 }).catch(e => e);\n     expect(error.message).toContain('expect.toHaveClass with timeout 1000ms');\n   });\n+\n+  test('allow matching partial class names', async ({ page }) => {\n+    await page.setContent('<div class=\"foo bar baz\"></div>');\n+    const locator = page.locator('div');\n+    await expect(locator).toHaveClass('foo', { partial: true });",
        "comment_created_at": "2025-03-17T13:25:50+00:00",
        "comment_author": "dgozman",
        "comment_body": "Let's add a test for `expect(locator).toHaveClass('  baz   foo ', { partial: true })`.",
        "pr_file_module": null
      }
    ]
  }
]