[
  {
    "discussion_id": "2025898881",
    "pr_number": 35467,
    "pr_file": "utils/build/build.js",
    "created_at": "2025-04-03T02:20:48+00:00",
    "commented_code": "steps.push({\n     command: 'npx',\n     args: [\n-      'babel',\n-      ...(watchMode ? ['-w'] : []),\n-      ...(withSourceMaps ? ['--source-maps'] : []),\n-      '--extensions', '.ts',\n-      '--out-dir', quotePath(path.join(pkg.path, 'lib')),\n-      '--ignore', '\"packages/playwright-core/src/server/injected/**/*\"',",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2025898881",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35467,
        "pr_file": "utils/build/build.js",
        "discussion_id": "2025898881",
        "commented_code": "@@ -250,14 +250,14 @@ for (const pkg of workspace.packages()) {\n   steps.push({\n     command: 'npx',\n     args: [\n-      'babel',\n-      ...(watchMode ? ['-w'] : []),\n-      ...(withSourceMaps ? ['--source-maps'] : []),\n-      '--extensions', '.ts',\n-      '--out-dir', quotePath(path.join(pkg.path, 'lib')),\n-      '--ignore', '\"packages/playwright-core/src/server/injected/**/*\"',",
        "comment_created_at": "2025-04-03T02:20:48+00:00",
        "comment_author": "pavelfeldman",
        "comment_body": "Where did this go?",
        "pr_file_module": null
      },
      {
        "comment_id": "2026463667",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35467,
        "pr_file": "utils/build/build.js",
        "discussion_id": "2025898881",
        "commented_code": "@@ -250,14 +250,14 @@ for (const pkg of workspace.packages()) {\n   steps.push({\n     command: 'npx',\n     args: [\n-      'babel',\n-      ...(watchMode ? ['-w'] : []),\n-      ...(withSourceMaps ? ['--source-maps'] : []),\n-      '--extensions', '.ts',\n-      '--out-dir', quotePath(path.join(pkg.path, 'lib')),\n-      '--ignore', '\"packages/playwright-core/src/server/injected/**/*\"',",
        "comment_created_at": "2025-04-03T08:21:59+00:00",
        "comment_author": "mxschmitt",
        "comment_body": "This does indeed build the injected scripts twice. Once with esbuild in Node.js mode and once with esbuild with browser target. Looks like that esbuild has no support for `--ignore` cli flag - maybe we can solve it differently.\r\nThings I considered:\r\n- Passing a static `entryPoints` list which is already resolved and filtered. This works but not for watch if we add a new file.\r\n- Use a custom esbuild plugin. Looks like it does not call the `onResolve` hook there, so we can't ignore it via the plugin.\r\n- Doing watch externally - this would work. e.g. via chokidar and then calling the esbuild script. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2027894274",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35467,
        "pr_file": "utils/build/build.js",
        "discussion_id": "2025898881",
        "commented_code": "@@ -250,14 +250,14 @@ for (const pkg of workspace.packages()) {\n   steps.push({\n     command: 'npx',\n     args: [\n-      'babel',\n-      ...(watchMode ? ['-w'] : []),\n-      ...(withSourceMaps ? ['--source-maps'] : []),\n-      '--extensions', '.ts',\n-      '--out-dir', quotePath(path.join(pkg.path, 'lib')),\n-      '--ignore', '\"packages/playwright-core/src/server/injected/**/*\"',",
        "comment_created_at": "2025-04-03T23:51:48+00:00",
        "comment_author": "yury-s",
        "comment_body": "Injected scripts were moved into its own package in https://github.com/microsoft/playwright/pull/35483, so this option is not needed any more.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2026458534",
    "pr_number": 35467,
    "pr_file": "utils/build/build.js",
    "created_at": "2025-04-03T08:18:54+00:00",
    "commented_code": "steps.push({\n     command: 'npx',\n     args: [\n-      'babel',\n-      ...(watchMode ? ['-w'] : []),\n-      ...(withSourceMaps ? ['--source-maps'] : []),\n-      '--extensions', '.ts',\n-      '--out-dir', quotePath(path.join(pkg.path, 'lib')),\n-      '--ignore', '\"packages/playwright-core/src/server/injected/**/*\"',\n-      quotePath(path.join(pkg.path, 'src')),\n-    ],\n+      'esbuild',\n+      quotePath(path.join(pkg.path, 'src/**/*.ts')),\n+      `--outdir=${quotePath(path.join(pkg.path, 'lib'))}`,\n+      ...(withSourceMaps ? [`--sourcemap=linked`] : []),\n+      ...(watchMode ? ['--watch=true'] : []),\n+      '--platform=node',\n+      '--format=cjs',",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2026458534",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35467,
        "pr_file": "utils/build/build.js",
        "discussion_id": "2026458534",
        "commented_code": "@@ -250,14 +250,14 @@ for (const pkg of workspace.packages()) {\n   steps.push({\n     command: 'npx',\n     args: [\n-      'babel',\n-      ...(watchMode ? ['-w'] : []),\n-      ...(withSourceMaps ? ['--source-maps'] : []),\n-      '--extensions', '.ts',\n-      '--out-dir', quotePath(path.join(pkg.path, 'lib')),\n-      '--ignore', '\"packages/playwright-core/src/server/injected/**/*\"',\n-      quotePath(path.join(pkg.path, 'src')),\n-    ],\n+      'esbuild',\n+      quotePath(path.join(pkg.path, 'src/**/*.ts')),\n+      `--outdir=${quotePath(path.join(pkg.path, 'lib'))}`,\n+      ...(withSourceMaps ? [`--sourcemap=linked`] : []),\n+      ...(watchMode ? ['--watch=true'] : []),\n+      '--platform=node',\n+      '--format=cjs',",
        "comment_created_at": "2025-04-03T08:18:54+00:00",
        "comment_author": "dgozman",
        "comment_body": "Did you look at the generated code? How does it differ from babel's?",
        "pr_file_module": null
      },
      {
        "comment_id": "2027268505",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35467,
        "pr_file": "utils/build/build.js",
        "discussion_id": "2026458534",
        "commented_code": "@@ -250,14 +250,14 @@ for (const pkg of workspace.packages()) {\n   steps.push({\n     command: 'npx',\n     args: [\n-      'babel',\n-      ...(watchMode ? ['-w'] : []),\n-      ...(withSourceMaps ? ['--source-maps'] : []),\n-      '--extensions', '.ts',\n-      '--out-dir', quotePath(path.join(pkg.path, 'lib')),\n-      '--ignore', '\"packages/playwright-core/src/server/injected/**/*\"',\n-      quotePath(path.join(pkg.path, 'src')),\n-    ],\n+      'esbuild',\n+      quotePath(path.join(pkg.path, 'src/**/*.ts')),\n+      `--outdir=${quotePath(path.join(pkg.path, 'lib'))}`,\n+      ...(withSourceMaps ? [`--sourcemap=linked`] : []),\n+      ...(watchMode ? ['--watch=true'] : []),\n+      '--platform=node',\n+      '--format=cjs',",
        "comment_created_at": "2025-04-03T15:30:09+00:00",
        "comment_author": "yury-s",
        "comment_body": "I looked at a couple of files for comparison. esm/cjs part looked okay. The rest looked similar as well, but I doubt I can catch more than our tests in the actual translated code there. I can look at the code that is specific to each of the removed babel plugins to check that it is fine, but I hope that the bot coverage is good enough.",
        "pr_file_module": null
      },
      {
        "comment_id": "2027892840",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35467,
        "pr_file": "utils/build/build.js",
        "discussion_id": "2026458534",
        "commented_code": "@@ -250,14 +250,14 @@ for (const pkg of workspace.packages()) {\n   steps.push({\n     command: 'npx',\n     args: [\n-      'babel',\n-      ...(watchMode ? ['-w'] : []),\n-      ...(withSourceMaps ? ['--source-maps'] : []),\n-      '--extensions', '.ts',\n-      '--out-dir', quotePath(path.join(pkg.path, 'lib')),\n-      '--ignore', '\"packages/playwright-core/src/server/injected/**/*\"',\n-      quotePath(path.join(pkg.path, 'src')),\n-    ],\n+      'esbuild',\n+      quotePath(path.join(pkg.path, 'src/**/*.ts')),\n+      `--outdir=${quotePath(path.join(pkg.path, 'lib'))}`,\n+      ...(withSourceMaps ? [`--sourcemap=linked`] : []),\n+      ...(watchMode ? ['--watch=true'] : []),\n+      '--platform=node',\n+      '--format=cjs',",
        "comment_created_at": "2025-04-03T23:50:00+00:00",
        "comment_author": "yury-s",
        "comment_body": "More precisely:\r\n\r\n- \"@babel/plugin-transform-typescript\", { \"allowDeclareFields\": true } ] - this is esbuild's default\r\n- \"@babel/plugin-transform-export-namespace-from\", - we only use `export * as ns from \"mod\";` syntax in bundles, which are already compiled by esbuild. So this babel plugin was redundant.\r\n- \"@babel/plugin-transform-class-properties\", - ebuild converts class properties into field initialization in the generate constructor\r\n- \"@babel/plugin-transform-logical-assignment-operators\", - logical assignment has been natively [supported](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment#browser_compatibility) since Node 15.\r\n- \"@babel/plugin-transform-nullish-coalescing-operator\", - nullish coalescing  has been natively [supported](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing#browser_compatibility) since Node 14.\r\n- \"@babel/plugin-transform-optional-chaining\",  - optional chaining has been natively [supported](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining#browser_compatibility) since Node 14.\r\n- \"@babel/plugin-transform-modules-commonjs\" - this is handled by `--format=cjs` command line flag\r\n",
        "pr_file_module": null
      }
    ]
  }
]