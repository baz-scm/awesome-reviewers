[
  {
    "discussion_id": "2278566579",
    "pr_number": 37053,
    "pr_file": "docs/src/chrome-extensions-js-python.md",
    "created_at": "2025-08-15T08:55:46+00:00",
    "commented_code": "## Introduction\n \n :::note\n-Extensions only work in Chrome / Chromium launched with a persistent context. Use custom browser args at your own risk, as some of them may break Playwright functionality.\n+Extensions only work in Playwright's Chromium when launched with a persistent context. Chrome and Edge removed the command-line flags needed to side-load extensions (`--load-extension` in M137, and `--disable-extensions-except` in M139), so the examples below will not work in Chrome/Edge. See the [PSA](https://groups.google.com/a/chromium.org/g/chromium-extensions/c/FxMU1TvxWWg/m/daZVTYNlBQAJ). Use custom browser args at your own risk, as some of them may break Playwright functionality.",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2278566579",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 37053,
        "pr_file": "docs/src/chrome-extensions-js-python.md",
        "discussion_id": "2278566579",
        "commented_code": "@@ -6,12 +6,12 @@ title: \"Chrome extensions\"\n ## Introduction\n \n :::note\n-Extensions only work in Chrome / Chromium launched with a persistent context. Use custom browser args at your own risk, as some of them may break Playwright functionality.\n+Extensions only work in Playwright's Chromium when launched with a persistent context. Chrome and Edge removed the command-line flags needed to side-load extensions (`--load-extension` in M137, and `--disable-extensions-except` in M139), so the examples below will not work in Chrome/Edge. See the [PSA](https://groups.google.com/a/chromium.org/g/chromium-extensions/c/FxMU1TvxWWg/m/daZVTYNlBQAJ). Use custom browser args at your own risk, as some of them may break Playwright functionality.",
        "comment_created_at": "2025-08-15T08:55:46+00:00",
        "comment_author": "dgozman",
        "comment_body": "```suggestion\r\nExtensions only work in Chromium when launched with a persistent context. Use custom browser args at your own risk, as some of them may break Playwright functionality.\r\n\r\nGoogle Chrome and Microsoft Edge [removed the command-line flags needed to side-load extensions](https://groups.google.com/a/chromium.org/g/chromium-extensions/c/FxMU1TvxWWg/m/daZVTYNlBQAJ), so use Chromium that comes bundled with Playwright.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1939149635",
    "pr_number": 34520,
    "pr_file": "docs/src/mock.md",
    "created_at": "2025-02-03T10:31:24+00:00",
    "commented_code": "```\n \n For more details, see [WebSocketRoute].\n+\n+## Mock Server\n+* langs: js\n+\n+By default, Playwright only has access to the network traffic made by the browser.\n+To mock and intercept traffic made by the application server, use Playwright's **experimental** mocking proxy. Note this feature is **experimental** and subject to change.\n+\n+The mocking proxy is a HTTP proxy server that's connected to the currently running test.\n+If you send it a request, it will apply the network routes configured via `page.route` and `context.route`, reusing your existing browser routes.\n+\n+To get started, enable the `mockingProxy` option in your Playwright config:\n+\n+```ts\n+export default defineConfig({\n+  use: { mockingProxy: true }\n+});\n+```\n+\n+Playwright will now inject the proxy URL into all browser requests under the `x-playwright-proxy` header.",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "1939149635",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 34520,
        "pr_file": "docs/src/mock.md",
        "discussion_id": "1939149635",
        "commented_code": "@@ -554,3 +554,260 @@ await page.RouteWebSocketAsync(\"wss://example.com/ws\", ws => {\n ```\n \n For more details, see [WebSocketRoute].\n+\n+## Mock Server\n+* langs: js\n+\n+By default, Playwright only has access to the network traffic made by the browser.\n+To mock and intercept traffic made by the application server, use Playwright's **experimental** mocking proxy. Note this feature is **experimental** and subject to change.\n+\n+The mocking proxy is a HTTP proxy server that's connected to the currently running test.\n+If you send it a request, it will apply the network routes configured via `page.route` and `context.route`, reusing your existing browser routes.\n+\n+To get started, enable the `mockingProxy` option in your Playwright config:\n+\n+```ts\n+export default defineConfig({\n+  use: { mockingProxy: true }\n+});\n+```\n+\n+Playwright will now inject the proxy URL into all browser requests under the `x-playwright-proxy` header.",
        "comment_created_at": "2025-02-03T10:31:24+00:00",
        "comment_author": "dgozman",
        "comment_body": "Let's have a list of limitations somewhere that would mention:\r\n- extra header will affect CORS options preflight;\r\n- requests on the server that were not made in response to the browser request will not be routed;\r\n- etc.",
        "pr_file_module": null
      }
    ]
  }
]