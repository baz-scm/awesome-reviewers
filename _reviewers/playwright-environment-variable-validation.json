[
  {
    "discussion_id": "2243569836",
    "pr_number": 36846,
    "pr_file": "packages/playwright-core/src/server/registry/index.ts",
    "created_at": "2025-07-30T18:35:50+00:00",
    "commented_code": "cacheDirectory = path.join(os.homedir(), 'Library', 'Caches');\n     else if (process.platform === 'win32')\n       cacheDirectory = process.env.LOCALAPPDATA || path.join(os.homedir(), 'AppData', 'Local');\n-    else\n+    else if (process.platform === 'android' && process.env.PLAYWRIGHT_ALLOW_ANDROID === '1') {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2243569836",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36846,
        "pr_file": "packages/playwright-core/src/server/registry/index.ts",
        "discussion_id": "2243569836",
        "commented_code": "@@ -406,8 +406,11 @@ export const registryDirectory = (() => {\n       cacheDirectory = path.join(os.homedir(), 'Library', 'Caches');\n     else if (process.platform === 'win32')\n       cacheDirectory = process.env.LOCALAPPDATA || path.join(os.homedir(), 'AppData', 'Local');\n-    else\n+    else if (process.platform === 'android' && process.env.PLAYWRIGHT_ALLOW_ANDROID === '1') {",
        "comment_created_at": "2025-07-30T18:35:50+00:00",
        "comment_author": "yury-s",
        "comment_body": "This code is only used when installing bundled browsers and we don't provide those for android anyway, so the user shouldn't need to run `npx playwright install` on android.\r\n\r\nCan you start with filing a bug/feature request that would describe in more details the user workflow that you want to support and at what step it currently fails?",
        "pr_file_module": null
      },
      {
        "comment_id": "2243704111",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36846,
        "pr_file": "packages/playwright-core/src/server/registry/index.ts",
        "discussion_id": "2243569836",
        "commented_code": "@@ -406,8 +406,11 @@ export const registryDirectory = (() => {\n       cacheDirectory = path.join(os.homedir(), 'Library', 'Caches');\n     else if (process.platform === 'win32')\n       cacheDirectory = process.env.LOCALAPPDATA || path.join(os.homedir(), 'AppData', 'Local');\n-    else\n+    else if (process.platform === 'android' && process.env.PLAYWRIGHT_ALLOW_ANDROID === '1') {",
        "comment_created_at": "2025-07-30T19:45:24+00:00",
        "comment_author": "Jobians",
        "comment_body": "Just to clarify \u2014 the error I\u2019m addressing **does not occur during `npx playwright install`**, but rather **at runtime**, when I run my own script using `playwright-core`:\r\n\r\n```bash\r\nnpx tsx src/scraper.ts\r\n```\r\n\r\nI'm using `playwright-core` without bundled browsers and manually providing the browser path:\r\n\r\n```ts\r\nimport { chromium } from 'playwright-core';\r\n\r\nconst browser = await chromium.launch({\r\n  executablePath: '/data/data/com.termux/files/usr/bin/chromium-browser',\r\n  headless: true,\r\n});\r\n```\r\n\r\nEven though I'm supplying `executablePath`, Playwright still tries to access the browser registry and throws this error:\r\n\r\n```\r\nError: Unsupported platform: android\r\n```\r\n\r\nThat error originates from this block in `registry/index.ts`:\r\n\r\n```ts\r\nelse {\r\n  throw new Error('Unsupported platform: ' + process.platform);\r\n}\r\n```\r\n\r\nTo prevent that, I added this platform check:\r\n\r\n```ts\r\nelse if (process.platform === 'android' && process.env.PLAYWRIGHT_ALLOW_ANDROID === '1') {\r\n  cacheDirectory = path.join(os.homedir(), '.cache');\r\n}\r\n```\r\n\r\nThis change ensures Playwright doesn't fail on Android when:\r\n- The user explicitly sets `PLAYWRIGHT_ALLOW_ANDROID=1`\r\n- A valid `executablePath` is already provided\r\n- No browser install is required\r\n\r\nThe registry path is still accessed even during manual browser launches, so this fix is needed to avoid blocking runtime usage on Android in valid cases.",
        "pr_file_module": null
      },
      {
        "comment_id": "2245592070",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36846,
        "pr_file": "packages/playwright-core/src/server/registry/index.ts",
        "discussion_id": "2243569836",
        "commented_code": "@@ -406,8 +406,11 @@ export const registryDirectory = (() => {\n       cacheDirectory = path.join(os.homedir(), 'Library', 'Caches');\n     else if (process.platform === 'win32')\n       cacheDirectory = process.env.LOCALAPPDATA || path.join(os.homedir(), 'AppData', 'Local');\n-    else\n+    else if (process.platform === 'android' && process.env.PLAYWRIGHT_ALLOW_ANDROID === '1') {",
        "comment_created_at": "2025-07-31T14:38:15+00:00",
        "comment_author": "yury-s",
        "comment_body": "You should already be able to workaround the error by providing `PLAYWRIGHT_BROWSERS_PATH` env variable. If that doesn't work, please file an issue that describes the problem with the steps to reproduce. Pretending that this code works on Android where we don't install any browsers is not a right fix. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2245884302",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36846,
        "pr_file": "packages/playwright-core/src/server/registry/index.ts",
        "discussion_id": "2243569836",
        "commented_code": "@@ -406,8 +406,11 @@ export const registryDirectory = (() => {\n       cacheDirectory = path.join(os.homedir(), 'Library', 'Caches');\n     else if (process.platform === 'win32')\n       cacheDirectory = process.env.LOCALAPPDATA || path.join(os.homedir(), 'AppData', 'Local');\n-    else\n+    else if (process.platform === 'android' && process.env.PLAYWRIGHT_ALLOW_ANDROID === '1') {",
        "comment_created_at": "2025-07-31T16:41:53+00:00",
        "comment_author": "Jobians",
        "comment_body": "Setting `PLAYWRIGHT_BROWSERS_PATH=0` and using `executablePath` to point to the Termux-installed Chromium lets Playwright work on Termux despite the platform not being officially supported.\r\n\r\nThanks ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2132407972",
    "pr_number": 36219,
    "pr_file": "packages/playwright/src/reporters/base.ts",
    "created_at": "2025-06-06T15:29:03+00:00",
    "commented_code": "colors: Colors;\n   isTTY: boolean;\n   ttyWidth: number;\n+  ttyHeight: number;\n };\n \n+const DEFAULT_TTY_WIDTH = 100;\n+const DEFAULT_TTY_HEIGHT = 40;\n+\n // Output goes to terminal.\n export const terminalScreen: Screen = (() => {\n   let isTTY = !!process.stdout.isTTY;\n   let ttyWidth = process.stdout.columns || 0;\n+  let ttyHeight = process.stdout.rows || 0;\n   if (process.env.PLAYWRIGHT_FORCE_TTY === 'false' || process.env.PLAYWRIGHT_FORCE_TTY === '0') {\n     isTTY = false;\n     ttyWidth = 0;\n+    ttyHeight = 0;\n   } else if (process.env.PLAYWRIGHT_FORCE_TTY === 'true' || process.env.PLAYWRIGHT_FORCE_TTY === '1') {\n     isTTY = true;\n-    ttyWidth = process.stdout.columns || 100;\n+    ttyWidth = process.stdout.columns || DEFAULT_TTY_WIDTH;\n+    ttyHeight = process.stdout.rows || DEFAULT_TTY_HEIGHT;\n   } else if (process.env.PLAYWRIGHT_FORCE_TTY) {\n     isTTY = true;\n-    ttyWidth = +process.env.PLAYWRIGHT_FORCE_TTY;\n+    const sizeMatch = process.env.PLAYWRIGHT_FORCE_TTY.match(/^(\\d+)x(\\d+)$/);\n+    if (sizeMatch) {\n+      ttyWidth = +sizeMatch[1];\n+      ttyHeight = +sizeMatch[2];\n+    } else {\n+      ttyWidth = +process.env.PLAYWRIGHT_FORCE_TTY;\n+      ttyHeight = process.stdout.rows || DEFAULT_TTY_HEIGHT;\n+    }\n     if (isNaN(ttyWidth))\n-      ttyWidth = 100;\n+      ttyWidth = DEFAULT_TTY_WIDTH;\n+    if (isNaN(ttyHeight))\n+      ttyWidth = DEFAULT_TTY_HEIGHT;",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2132407972",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36219,
        "pr_file": "packages/playwright/src/reporters/base.ts",
        "discussion_id": "2132407972",
        "commented_code": "@@ -58,23 +58,39 @@ export type Screen = {\n   colors: Colors;\n   isTTY: boolean;\n   ttyWidth: number;\n+  ttyHeight: number;\n };\n \n+const DEFAULT_TTY_WIDTH = 100;\n+const DEFAULT_TTY_HEIGHT = 40;\n+\n // Output goes to terminal.\n export const terminalScreen: Screen = (() => {\n   let isTTY = !!process.stdout.isTTY;\n   let ttyWidth = process.stdout.columns || 0;\n+  let ttyHeight = process.stdout.rows || 0;\n   if (process.env.PLAYWRIGHT_FORCE_TTY === 'false' || process.env.PLAYWRIGHT_FORCE_TTY === '0') {\n     isTTY = false;\n     ttyWidth = 0;\n+    ttyHeight = 0;\n   } else if (process.env.PLAYWRIGHT_FORCE_TTY === 'true' || process.env.PLAYWRIGHT_FORCE_TTY === '1') {\n     isTTY = true;\n-    ttyWidth = process.stdout.columns || 100;\n+    ttyWidth = process.stdout.columns || DEFAULT_TTY_WIDTH;\n+    ttyHeight = process.stdout.rows || DEFAULT_TTY_HEIGHT;\n   } else if (process.env.PLAYWRIGHT_FORCE_TTY) {\n     isTTY = true;\n-    ttyWidth = +process.env.PLAYWRIGHT_FORCE_TTY;\n+    const sizeMatch = process.env.PLAYWRIGHT_FORCE_TTY.match(/^(\\d+)x(\\d+)$/);\n+    if (sizeMatch) {\n+      ttyWidth = +sizeMatch[1];\n+      ttyHeight = +sizeMatch[2];\n+    } else {\n+      ttyWidth = +process.env.PLAYWRIGHT_FORCE_TTY;\n+      ttyHeight = process.stdout.rows || DEFAULT_TTY_HEIGHT;\n+    }\n     if (isNaN(ttyWidth))\n-      ttyWidth = 100;\n+      ttyWidth = DEFAULT_TTY_WIDTH;\n+    if (isNaN(ttyHeight))\n+      ttyWidth = DEFAULT_TTY_HEIGHT;",
        "comment_created_at": "2025-06-06T15:29:03+00:00",
        "comment_author": "dgozman",
        "comment_body": "```suggestion\r\n      ttyHeight = DEFAULT_TTY_HEIGHT;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1990376726",
    "pr_number": 35156,
    "pr_file": "packages/playwright-mcp/src/servers/server.ts",
    "created_at": "2025-03-12T01:10:55+00:00",
    "commented_code": "}\n \n   private async _createBrowser(): Promise<playwright.Browser> {\n+    const headless = process.env.PLAYWRIGHT_HEADLESS === '1' || process.env.PLAYWRIGHT_HEADLESS === 'true';",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "1990376726",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35156,
        "pr_file": "packages/playwright-mcp/src/servers/server.ts",
        "discussion_id": "1990376726",
        "commented_code": "@@ -66,12 +66,13 @@ export class Server {\n   }\n \n   private async _createBrowser(): Promise<playwright.Browser> {\n+    const headless = process.env.PLAYWRIGHT_HEADLESS === '1' || process.env.PLAYWRIGHT_HEADLESS === 'true';",
        "comment_created_at": "2025-03-12T01:10:55+00:00",
        "comment_author": "yury-s",
        "comment_body": "Why is it headed by default?",
        "pr_file_module": null
      },
      {
        "comment_id": "1990488470",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35156,
        "pr_file": "packages/playwright-mcp/src/servers/server.ts",
        "discussion_id": "1990376726",
        "commented_code": "@@ -66,12 +66,13 @@ export class Server {\n   }\n \n   private async _createBrowser(): Promise<playwright.Browser> {\n+    const headless = process.env.PLAYWRIGHT_HEADLESS === '1' || process.env.PLAYWRIGHT_HEADLESS === 'true';",
        "comment_created_at": "2025-03-12T03:26:22+00:00",
        "comment_author": "pavelfeldman",
        "comment_body": "for demo purposes for now",
        "pr_file_module": null
      }
    ]
  }
]