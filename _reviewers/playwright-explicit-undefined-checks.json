[
  {
    "discussion_id": "2254299805",
    "pr_number": 36920,
    "pr_file": "packages/playwright-core/src/utils/isomorphic/protocolFormatter.ts",
    "created_at": "2025-08-05T13:09:49+00:00",
    "commented_code": "import { methodMetainfo } from './protocolMetainfo';\n \n-export function formatProtocolParam(params: Record<string, string> | undefined, name: string): string {\n+export function formatProtocolParam(params: Record<string, string> | undefined, alternatives: string): string | undefined {\n   if (!params)\n-    return '';\n-  if (name === 'url') {\n-    try {\n-      const urlObject = new URL(params[name]);\n-      if (urlObject.protocol === 'data:')\n-        return urlObject.protocol;\n-      if (urlObject.protocol === 'about:')\n+    return undefined;\n+\n+  for (const name of alternatives.split('|')) {\n+    if (name === 'url') {\n+      try {\n+        const urlObject = new URL(params[name]);\n+        if (urlObject.protocol === 'data:')\n+          return urlObject.protocol;\n+        if (urlObject.protocol === 'about:')\n+          return params[name];\n+        return urlObject.pathname + urlObject.search;\n+      } catch (error) {\n         return params[name];",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2254299805",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36920,
        "pr_file": "packages/playwright-core/src/utils/isomorphic/protocolFormatter.ts",
        "discussion_id": "2254299805",
        "commented_code": "@@ -16,44 +16,50 @@\n \n import { methodMetainfo } from './protocolMetainfo';\n \n-export function formatProtocolParam(params: Record<string, string> | undefined, name: string): string {\n+export function formatProtocolParam(params: Record<string, string> | undefined, alternatives: string): string | undefined {\n   if (!params)\n-    return '';\n-  if (name === 'url') {\n-    try {\n-      const urlObject = new URL(params[name]);\n-      if (urlObject.protocol === 'data:')\n-        return urlObject.protocol;\n-      if (urlObject.protocol === 'about:')\n+    return undefined;\n+\n+  for (const name of alternatives.split('|')) {\n+    if (name === 'url') {\n+      try {\n+        const urlObject = new URL(params[name]);\n+        if (urlObject.protocol === 'data:')\n+          return urlObject.protocol;\n+        if (urlObject.protocol === 'about:')\n+          return params[name];\n+        return urlObject.pathname + urlObject.search;\n+      } catch (error) {\n         return params[name];",
        "comment_created_at": "2025-08-05T13:09:49+00:00",
        "comment_author": "dgozman",
        "comment_body": "```suggestion\r\n        if (params[name] !== undefined)\r\n          return params[name];\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2114463738",
    "pr_number": 36132,
    "pr_file": "packages/playwright-core/src/server/page.ts",
    "created_at": "2025-05-29T17:51:06+00:00",
    "commented_code": "}\n   }\n \n-  async setFileChooserIntercepted(enabled: boolean): Promise<void> {\n-    this._interceptFileChooser = enabled;\n-    await this.delegate.updateFileChooserInterception();\n+  async setFileChooserInterceptedBy(enabled: boolean, by: any): Promise<void> {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2114463738",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36132,
        "pr_file": "packages/playwright-core/src/server/page.ts",
        "discussion_id": "2114463738",
        "commented_code": "@@ -744,13 +741,18 @@ export class Page extends SdkObject {\n     }\n   }\n \n-  async setFileChooserIntercepted(enabled: boolean): Promise<void> {\n-    this._interceptFileChooser = enabled;\n-    await this.delegate.updateFileChooserInterception();\n+  async setFileChooserInterceptedBy(enabled: boolean, by: any): Promise<void> {",
        "comment_created_at": "2025-05-29T17:51:06+00:00",
        "comment_author": "yury-s",
        "comment_body": "Maybe unknown since we only care about identity?\r\n```suggestion\r\n  async setFileChooserInterceptedBy(enabled: boolean, by: unknown): Promise<void> {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2063571046",
    "pr_number": 35641,
    "pr_file": "packages/playwright/src/reporters/html.ts",
    "created_at": "2025-04-28T12:38:26+00:00",
    "commented_code": "import { resolveReporterOutputPath, stripAnsiEscapes } from '../util';\n \n import type { ReporterV2 } from './reporterV2';\n-import type { Metadata } from '../../types/test';\n+import type { HtmlReporterOptions, Metadata } from '../../types/test';\n import type * as api from '../../types/testReporter';\n import type { HTMLReport, Stats, TestAttachment, TestCase, TestCaseSummary, TestFile, TestFileSummary, TestResult, TestStep, TestAnnotation } from '@html-reporter/types';\n import type { ZipFile } from 'playwright-core/lib/zipBundle';\n import type { TransformCallback } from 'stream';\n+import type { ReporterOptions } from './types';\n \n type TestEntry = {\n   testCase: TestCase;\n   testCaseSummary: TestCaseSummary\n };\n \n-const htmlReportOptions = ['always', 'never', 'on-failure'];\n-type HtmlReportOpenOption = (typeof htmlReportOptions)[number];\n+type Options = HtmlReporterOptions & ReporterOptions;\n \n-const isHtmlReportOption = (type: string): type is HtmlReportOpenOption => {\n-  return htmlReportOptions.includes(type);\n-};\n+type HtmlReportOpenOption = Exclude<Options['open'], undefined>;",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2063571046",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35641,
        "pr_file": "packages/playwright/src/reporters/html.ts",
        "discussion_id": "2063571046",
        "commented_code": "@@ -29,39 +29,31 @@ import { codeFrameColumns } from '../transform/babelBundle';\n import { resolveReporterOutputPath, stripAnsiEscapes } from '../util';\n \n import type { ReporterV2 } from './reporterV2';\n-import type { Metadata } from '../../types/test';\n+import type { HtmlReporterOptions, Metadata } from '../../types/test';\n import type * as api from '../../types/testReporter';\n import type { HTMLReport, Stats, TestAttachment, TestCase, TestCaseSummary, TestFile, TestFileSummary, TestResult, TestStep, TestAnnotation } from '@html-reporter/types';\n import type { ZipFile } from 'playwright-core/lib/zipBundle';\n import type { TransformCallback } from 'stream';\n+import type { ReporterOptions } from './types';\n \n type TestEntry = {\n   testCase: TestCase;\n   testCaseSummary: TestCaseSummary\n };\n \n-const htmlReportOptions = ['always', 'never', 'on-failure'];\n-type HtmlReportOpenOption = (typeof htmlReportOptions)[number];\n+type Options = HtmlReporterOptions & ReporterOptions;\n \n-const isHtmlReportOption = (type: string): type is HtmlReportOpenOption => {\n-  return htmlReportOptions.includes(type);\n-};\n+type HtmlReportOpenOption = Exclude<Options['open'], undefined>;",
        "comment_created_at": "2025-04-28T12:38:26+00:00",
        "comment_author": "dgozman",
        "comment_body": "```suggestion\r\ntype HtmlReportOpenOption = NonNullable<Options['open']>;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2026521139",
    "pr_number": 35470,
    "pr_file": "packages/playwright/src/reporters/html.ts",
    "created_at": "2025-04-03T08:55:38+00:00",
    "commented_code": "private _serializeAnnotations(annotations: api.TestCase['annotations']): TestAnnotation[] {\n     // Annotations can be pushed directly, with a wrong type.\n-    return annotations.map(a => ({ type: a.type, description: a.description ? String(a.description) : a.description, location: a.location }));\n+    return annotations.map(a => ({ type: a.type, description: typeof a.description === 'undefined' ? undefined : String(a.description), location: a.location }));",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2026521139",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35470,
        "pr_file": "packages/playwright/src/reporters/html.ts",
        "discussion_id": "2026521139",
        "commented_code": "@@ -503,7 +503,7 @@ class HtmlBuilder {\n \n   private _serializeAnnotations(annotations: api.TestCase['annotations']): TestAnnotation[] {\n     // Annotations can be pushed directly, with a wrong type.\n-    return annotations.map(a => ({ type: a.type, description: a.description ? String(a.description) : a.description, location: a.location }));\n+    return annotations.map(a => ({ type: a.type, description: typeof a.description === 'undefined' ? undefined : String(a.description), location: a.location }));",
        "comment_created_at": "2025-04-03T08:55:38+00:00",
        "comment_author": "dgozman",
        "comment_body": "Modern js allows to compare directly: `a.description === undefined`.",
        "pr_file_module": null
      }
    ]
  }
]