[
  {
    "discussion_id": "2067001368",
    "pr_number": 35777,
    "pr_file": "packages/playwright-core/src/server/chromium/videoRecorder.ts",
    "created_at": "2025-04-29T17:16:40+00:00",
    "commented_code": "async stop() {\n     if (this._isStopped)\n       return;\n-    this.writeFrame(Buffer.from([]), this._lastFrameTimestamp + (monotonicTime() - this._lastWriteTimestamp) / 1000);\n+\n     this._isStopped = true;\n+\n+    if (this._firstFrameTimestamp === null || !this._lastFrameBuffer) {\n+      if (this._gracefullyClose)\n+        await this._gracefullyClose();\n+      return;\n+    }\n+\n+    const finalTimestamp = this._lastFrameTimestamp + (monotonicTime() - this._lastWriteTimestamp) / 1000;\n+\n+    const expectedFrames = Math.round(fps * (finalTimestamp - this._firstFrameTimestamp));\n+\n+    const repeatCount = Math.max(0, expectedFrames - this._framesWritten);\n+\n+    for (let i = 0; i < repeatCount; ++i)\n+      this._frameQueue.push(this._lastFrameBuffer);",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2067001368",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35777,
        "pr_file": "packages/playwright-core/src/server/chromium/videoRecorder.ts",
        "discussion_id": "2067001368",
        "commented_code": "@@ -160,9 +176,32 @@ export class VideoRecorder {\n   async stop() {\n     if (this._isStopped)\n       return;\n-    this.writeFrame(Buffer.from([]), this._lastFrameTimestamp + (monotonicTime() - this._lastWriteTimestamp) / 1000);\n+\n     this._isStopped = true;\n+\n+    if (this._firstFrameTimestamp === null || !this._lastFrameBuffer) {\n+      if (this._gracefullyClose)\n+        await this._gracefullyClose();\n+      return;\n+    }\n+\n+    const finalTimestamp = this._lastFrameTimestamp + (monotonicTime() - this._lastWriteTimestamp) / 1000;\n+\n+    const expectedFrames = Math.round(fps * (finalTimestamp - this._firstFrameTimestamp));\n+\n+    const repeatCount = Math.max(0, expectedFrames - this._framesWritten);\n+\n+    for (let i = 0; i < repeatCount; ++i)\n+      this._frameQueue.push(this._lastFrameBuffer);",
        "comment_created_at": "2025-04-29T17:16:40+00:00",
        "comment_author": "yury-s",
        "comment_body": "This entire enqueue logic is repeated twice and should be in a shared method.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2081294200",
    "pr_number": 35853,
    "pr_file": "packages/injected/src/selectorUtils.ts",
    "created_at": "2025-05-09T09:24:56+00:00",
    "commented_code": "if (currentImmediate)\n               value.immediate.push(currentImmediate);\n             currentImmediate = '';\n-            if (child.nodeType === Node.ELEMENT_NODE)\n+            if (child.nodeType === Node.ELEMENT_NODE) {\n+              const el = child as Element;\n+              if (el.tagName === 'SLOT') {\n+                for (const assigned of (el as HTMLSlotElement).assignedNodes({ flatten: true })) {\n+                  if (assigned.nodeType === Node.TEXT_NODE) {\n+                    const txt = assigned.nodeValue || '';\n+                    value.full += txt;\n+                    currentImmediate += txt;\n+                  } else if (assigned.nodeType === Node.ELEMENT_NODE) {\n+                    if (currentImmediate) {\n+                      value.immediate.push(currentImmediate);\n+                      currentImmediate = '';\n+                    }\n+                    value.full += elementText(cache, assigned as Element).full;\n+                  }",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2081294200",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35853,
        "pr_file": "packages/injected/src/selectorUtils.ts",
        "discussion_id": "2081294200",
        "commented_code": "@@ -81,8 +81,26 @@ export function elementText(cache: Map<Element | ShadowRoot, ElementText>, root:\n             if (currentImmediate)\n               value.immediate.push(currentImmediate);\n             currentImmediate = '';\n-            if (child.nodeType === Node.ELEMENT_NODE)\n+            if (child.nodeType === Node.ELEMENT_NODE) {\n+              const el = child as Element;\n+              if (el.tagName === 'SLOT') {\n+                for (const assigned of (el as HTMLSlotElement).assignedNodes({ flatten: true })) {\n+                  if (assigned.nodeType === Node.TEXT_NODE) {\n+                    const txt = assigned.nodeValue || '';\n+                    value.full += txt;\n+                    currentImmediate += txt;\n+                  } else if (assigned.nodeType === Node.ELEMENT_NODE) {\n+                    if (currentImmediate) {\n+                      value.immediate.push(currentImmediate);\n+                      currentImmediate = '';\n+                    }\n+                    value.full += elementText(cache, assigned as Element).full;\n+                  }",
        "comment_created_at": "2025-05-09T09:24:56+00:00",
        "comment_author": "injae-kim",
        "comment_body": "how about extract this logic as private method for code readability? \ud83d\udc4d",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2057148856",
    "pr_number": 35722,
    "pr_file": "packages/playwright-core/src/server/chromium/chromium.ts",
    "created_at": "2025-04-24T01:11:57+00:00",
    "commented_code": "transport.send(message);\n   }\n \n+  override supportsPipeTransport(): boolean {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2057148856",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35722,
        "pr_file": "packages/playwright-core/src/server/chromium/chromium.ts",
        "discussion_id": "2057148856",
        "commented_code": "@@ -166,6 +166,10 @@ export class Chromium extends BrowserType {\n     transport.send(message);\n   }\n \n+  override supportsPipeTransport(): boolean {",
        "comment_created_at": "2025-04-24T01:11:57+00:00",
        "comment_author": "yury-s",
        "comment_body": "Use default implementation that returns true to not repeat it in each browser.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2016914883",
    "pr_number": 35373,
    "pr_file": "packages/playwright/src/worker/testInfo.ts",
    "created_at": "2025-03-27T15:16:45+00:00",
    "commented_code": "return;\n \n     const description = modifierArgs[1];\n-    this.annotations.push({ type, description });\n+    const callLocation = filteredLocation(captureRawStack());",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2016914883",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35373,
        "pr_file": "packages/playwright/src/worker/testInfo.ts",
        "discussion_id": "2016914883",
        "commented_code": "@@ -217,7 +217,10 @@ export class TestInfoImpl implements TestInfo {\n       return;\n \n     const description = modifierArgs[1];\n-    this.annotations.push({ type, description });\n+    const callLocation = filteredLocation(captureRawStack());",
        "comment_created_at": "2025-03-27T15:16:45+00:00",
        "comment_author": "dgozman",
        "comment_body": "We have a `wrapFunctionWithLocation` helper, can we reuse it here?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1999390538",
    "pr_number": 35218,
    "pr_file": "packages/playwright-core/src/server/injected/highlight.ts",
    "created_at": "2025-03-17T18:29:58+00:00",
    "commented_code": "runHighlightOnRaf(selector: ParsedSelector) {\n     if (this._rafRequest)\n       cancelAnimationFrame(this._rafRequest);\n-    this.updateHighlight(this._injectedScript.querySelectorAll(selector, this._injectedScript.document.documentElement), { tooltipText: asLocator(this._language, stringifySelector(selector)) });\n+    const elements = this._injectedScript.querySelectorAll(selector, this._injectedScript.document.documentElement);\n+    const locator = asLocator(this._language, stringifySelector(selector));\n+    const color = elements.length > 1 ? '#f6b26b7f' : '#6fa8dc7f';",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "1999390538",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35218,
        "pr_file": "packages/playwright-core/src/server/injected/highlight.ts",
        "discussion_id": "1999390538",
        "commented_code": "@@ -104,7 +100,13 @@ export class Highlight {\n   runHighlightOnRaf(selector: ParsedSelector) {\n     if (this._rafRequest)\n       cancelAnimationFrame(this._rafRequest);\n-    this.updateHighlight(this._injectedScript.querySelectorAll(selector, this._injectedScript.document.documentElement), { tooltipText: asLocator(this._language, stringifySelector(selector)) });\n+    const elements = this._injectedScript.querySelectorAll(selector, this._injectedScript.document.documentElement);\n+    const locator = asLocator(this._language, stringifySelector(selector));\n+    const color = elements.length > 1 ? '#f6b26b7f' : '#6fa8dc7f';",
        "comment_created_at": "2025-03-17T18:29:58+00:00",
        "comment_author": "yury-s",
        "comment_body": "These 2 colors are mentioned at least 4 times. consider using constants for them.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2120484851",
    "pr_number": 36153,
    "pr_file": "packages/playwright/src/runner/dispatcher.ts",
    "created_at": "2025-06-02T08:55:19+00:00",
    "commented_code": "this._currentlyRunning = { test, result };\n   }\n \n-  private _onTestEnd(params: TestEndPayload) {\n+  private _onTestPaused(params: TestEndPayload) {\n+    this._updateTest(params);\n+    const data = this._dataByTestId.get(params.testId);\n+    if (!data)\n+      return;\n+\n+    const { result, test } = data;\n+    this._reporter.onTestPaused?.(test, result);\n+  }\n+\n+  private _updateTest(params: TestEndPayload) {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2120484851",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36153,
        "pr_file": "packages/playwright/src/runner/dispatcher.ts",
        "discussion_id": "2120484851",
        "commented_code": "@@ -306,7 +306,17 @@ class JobDispatcher {\n     this._currentlyRunning = { test, result };\n   }\n \n-  private _onTestEnd(params: TestEndPayload) {\n+  private _onTestPaused(params: TestEndPayload) {\n+    this._updateTest(params);\n+    const data = this._dataByTestId.get(params.testId);\n+    if (!data)\n+      return;\n+\n+    const { result, test } = data;\n+    this._reporter.onTestPaused?.(test, result);\n+  }\n+\n+  private _updateTest(params: TestEndPayload) {",
        "comment_created_at": "2025-06-02T08:55:19+00:00",
        "comment_author": "dgozman",
        "comment_body": "I'd recommend to pass `data` here, since you are already retrieving it from the map on both call sites.",
        "pr_file_module": null
      }
    ]
  }
]