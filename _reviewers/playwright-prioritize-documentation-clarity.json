[
  {
    "discussion_id": "2268932679",
    "pr_number": 36987,
    "pr_file": "docs/src/writing-tests-js.md",
    "created_at": "2025-08-12T07:33:25+00:00",
    "commented_code": "| [`method: Locator.selectOption`] | Select option in the drop down |\n \n ## Assertions\n-  \n+\n Playwright includes [test assertions](./test-assertions.md) in the form of `expect` function. To make an assertion, call `expect(value)` and choose a matcher that reflects the expectation.\n \n-There are many generic matchers like `toEqual`, `toContain`, `toBeTruthy` that can be used to assert any conditions.\n+Playwright includes generic matchers like `toEqual`, `toContain`, `toBeTruthy` that can be used to assert any conditions.",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2268932679",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36987,
        "pr_file": "docs/src/writing-tests-js.md",
        "discussion_id": "2268932679",
        "commented_code": "@@ -113,22 +101,22 @@ learn more about them.\n | [`method: Locator.selectOption`] | Select option in the drop down |\n \n ## Assertions\n-  \n+\n Playwright includes [test assertions](./test-assertions.md) in the form of `expect` function. To make an assertion, call `expect(value)` and choose a matcher that reflects the expectation.\n \n-There are many generic matchers like `toEqual`, `toContain`, `toBeTruthy` that can be used to assert any conditions.\n+Playwright includes generic matchers like `toEqual`, `toContain`, `toBeTruthy` that can be used to assert any conditions.",
        "comment_created_at": "2025-08-12T07:33:25+00:00",
        "comment_author": "dgozman",
        "comment_body": "I think it's better to move the section about generic matchers to be after the list of web-first assertions.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091388130",
    "pr_number": 35954,
    "pr_file": "docs/src/test-cli-js.md",
    "created_at": "2025-05-15T14:55:42+00:00",
    "commented_code": "| `--retries <retries>` | Maximum retry count for flaky tests, zero for no retries (default: no retries). |\n | `--shard <shard>` | Shard tests and execute only the selected shard, specified in the form \"current/all\", 1-based, e.g., \"3/5\". |\n | `--timeout <timeout>` | Specify test timeout threshold in milliseconds, zero for unlimited (default: 30 seconds). |\n-| `--trace <mode>` | Force tracing mode, can be \"on\", \"off\", \"on-first-retry\", \"on-all-retries\", \"retain-on-failure\", \"retain-on-first-failure\". |\n+| `--trace <mode>` | Force tracing mode, can be `on`, `off`, `on-first-retry`, `on-all-retries`, `retain-on-failure`, `retain-on-first-failure`. |\n | `--tsconfig <path>` | Path to a single tsconfig applicable to all imported files (default: look up tsconfig for each imported file separately). |\n | `--ui` | Run tests in interactive UI mode. |\n | `--ui-host <host>` | Host to serve UI on; specifying this option opens UI in a browser tab. |\n | `--ui-port <port>` | Port to serve UI on, 0 for any free port; specifying this option opens UI in a browser tab. |\n | `-u` or `--update-snapshots [mode]` | Update snapshots with actual results. Possible values are \"all\", \"changed\", \"missing\", and \"none\". Running tests without the flag defaults to \"missing\"; running tests with the flag but without a value defaults to \"changed\". |\n | `--update-source-method [mode]` | Update snapshots with actual results. Possible values are \"patch\" (default), \"3way\" and \"overwrite\". \"Patch\" creates a unified diff file that can be used to update the source code later. \"3way\" generates merge conflict markers in source code. \"Overwrite\" overwrites the source code with the new snapshot values.|\n-| `-j <workers>` or `--workers <workers>` | Number of concurrent workers or percentage of logical CPU cores, use 1 to run in a single worker (default: 50%). |\n | `-x` | Stop after the first failure. |\n+\n+#### Examples\n+\n+```bash\n+# Run all tests\n+npx playwright test\n+\n+# Run a single test file\n+npx playwright test tests/todo-page.spec.ts\n+\n+# Run a set of test files\n+npx playwright test tests/todo-page/ tests/landing-page/\n+\n+# Run files by name pattern\n+npx playwright test my-spec my-spec-2\n+\n+# Run tests at a specific line\n+npx playwright test my-spec.ts:42\n+\n+# Run tests by title\n+npx playwright test -g \"add a todo item\"\n+\n+# Run tests in headed browsers\n+npx playwright test --headed\n+\n+# Run tests for a specific project\n+npx playwright test --project=chromium\n+\n+# Get help\n+npx playwright test --help\n+```\n+\n+**Disable [parallelization](./test-parallel.md)**\n+\n+```bash\n+npx playwright test --workers=1\n+```\n+\n+**Choose a [reporter](./test-reporters.md)**\n+\n+```bash\n+npx playwright test --reporter=dot\n+```\n+\n+**Run in debug mode with [Playwright Inspector](./debug.md)**\n+\n+```bash\n+npx playwright test --debug\n+```\n+\n+**Run tests in interactive [UI mode](./test-ui-mode.md)**\n+\n+```bash\n+npx playwright test --ui\n+```\n+\n+### Show Report\n+\n+Display HTML report from previous test run. [Read more about the HTML reporter](./test-reporters#html-reporter).\n+\n+#### Syntax\n+\n+```bash\n+npx playwright show-report [report] [options]\n+```\n+\n+#### Options\n+\n+| Option | Description |\n+| :--- | :--- |\n+| `--host <host>` | Host to serve report on (default: localhost) |\n+| `--port <port>` | Port to serve report on (default: 9323) |\n+\n+#### Examples\n+\n+```bash\n+# Show latest test report\n+npx playwright show-report\n+\n+# Show a specific report\n+npx playwright show-report playwright-report/\n+\n+# Show report on custom port\n+npx playwright show-report --port 8080\n+```\n+\n+### Install Browsers\n+\n+Install browsers required by Playwright.\n+\n+#### Syntax\n+\n+```bash\n+npx playwright install [options] [browser...]\n+npx playwright install-deps [options] [browser...]\n+npx playwright uninstall\n+```\n+\n+#### Install Options\n+\n+| Option | Description |\n+| :--- | :--- |\n+| `--force` | Force reinstall of stable browser channels |\n+| `--with-deps` | Install browser system dependencies |\n+| `--dry-run` | Don't perform installation, just print information |\n+| `--only-shell` | Only install chromium-headless-shell instead of full Chromium |\n+| `--no-shell` | Don't install chromium-headless-shell |\n+\n+#### Install Deps Options\n+\n+| Option | Description |\n+| :--- | :--- |\n+| `--dry-run` | Don't perform installation, just print information |\n+\n+#### Examples\n+\n+```bash\n+# Install all browsers\n+npx playwright install\n+\n+# Install only Chromium\n+npx playwright install chromium\n+\n+# Install specific browsers\n+npx playwright install chromium webkit\n+\n+# Install browsers with dependencies\n+npx playwright install --with-deps\n+```\n+\n+## Generation & Debugging Tools\n+\n+### Code Generation\n+\n+Record actions and generate tests for multiple languages. [Read more about Codegen](./codegen-intro.md).\n+\n+#### Syntax\n+\n+```bash\n+npx playwright codegen [options] [url]\n+```\n+\n+#### Options\n+\n+| Option | Description |\n+| :--- | :--- |\n+| `-b, --browser <name>` | Browser to use: chromium, firefox, or webkit (default: chromium) |\n+| `-o, --output <file>` | Output file for the generated script |\n+| `--target <language>` | Language to use: javascript, playwright-test, python, etc. |\n+| `--test-id-attribute <attr>` | Attribute to use for test IDs |\n+\n+#### Examples\n+\n+```bash\n+# Start recording with interactive UI\n+npx playwright codegen\n+\n+# Record on specific site\n+npx playwright codegen https://playwright.dev\n+\n+# Generate Python code\n+npx playwright codegen --target=python\n+```\n+\n+### Trace Viewer\n+\n+Analyze and view test traces for debugging. [Read more about Trace Viewer](./trace-viewer.md).\n+\n+#### Syntax\n+\n+```bash\n+npx playwright show-trace [options] [trace...]\n+```\n+\n+#### Options\n+\n+| Option | Description |\n+| :--- | :--- |\n+| `-b, --browser <name>` | Browser to use: chromium, firefox, or webkit (default: chromium) |\n+| `-h, --host <host>` | Host to serve trace on |\n+| `-p, --port <port>` | Port to serve trace on |\n+\n+#### Examples\n+\n+```bash\n+# View a trace file\n+npx playwright show-trace trace.zip\n+\n+# View trace from directory\n+npx playwright show-trace trace/\n+```\n+\n+## Specialized Commands",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2091388130",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35954,
        "pr_file": "docs/src/test-cli-js.md",
        "discussion_id": "2091388130",
        "commented_code": "@@ -105,12 +59,330 @@ Complete set of Playwright Test options is available in the [configuration file]\n | `--retries <retries>` | Maximum retry count for flaky tests, zero for no retries (default: no retries). |\n | `--shard <shard>` | Shard tests and execute only the selected shard, specified in the form \"current/all\", 1-based, e.g., \"3/5\". |\n | `--timeout <timeout>` | Specify test timeout threshold in milliseconds, zero for unlimited (default: 30 seconds). |\n-| `--trace <mode>` | Force tracing mode, can be \"on\", \"off\", \"on-first-retry\", \"on-all-retries\", \"retain-on-failure\", \"retain-on-first-failure\". |\n+| `--trace <mode>` | Force tracing mode, can be `on`, `off`, `on-first-retry`, `on-all-retries`, `retain-on-failure`, `retain-on-first-failure`. |\n | `--tsconfig <path>` | Path to a single tsconfig applicable to all imported files (default: look up tsconfig for each imported file separately). |\n | `--ui` | Run tests in interactive UI mode. |\n | `--ui-host <host>` | Host to serve UI on; specifying this option opens UI in a browser tab. |\n | `--ui-port <port>` | Port to serve UI on, 0 for any free port; specifying this option opens UI in a browser tab. |\n | `-u` or `--update-snapshots [mode]` | Update snapshots with actual results. Possible values are \"all\", \"changed\", \"missing\", and \"none\". Running tests without the flag defaults to \"missing\"; running tests with the flag but without a value defaults to \"changed\". |\n | `--update-source-method [mode]` | Update snapshots with actual results. Possible values are \"patch\" (default), \"3way\" and \"overwrite\". \"Patch\" creates a unified diff file that can be used to update the source code later. \"3way\" generates merge conflict markers in source code. \"Overwrite\" overwrites the source code with the new snapshot values.|\n-| `-j <workers>` or `--workers <workers>` | Number of concurrent workers or percentage of logical CPU cores, use 1 to run in a single worker (default: 50%). |\n | `-x` | Stop after the first failure. |\n+\n+#### Examples\n+\n+```bash\n+# Run all tests\n+npx playwright test\n+\n+# Run a single test file\n+npx playwright test tests/todo-page.spec.ts\n+\n+# Run a set of test files\n+npx playwright test tests/todo-page/ tests/landing-page/\n+\n+# Run files by name pattern\n+npx playwright test my-spec my-spec-2\n+\n+# Run tests at a specific line\n+npx playwright test my-spec.ts:42\n+\n+# Run tests by title\n+npx playwright test -g \"add a todo item\"\n+\n+# Run tests in headed browsers\n+npx playwright test --headed\n+\n+# Run tests for a specific project\n+npx playwright test --project=chromium\n+\n+# Get help\n+npx playwright test --help\n+```\n+\n+**Disable [parallelization](./test-parallel.md)**\n+\n+```bash\n+npx playwright test --workers=1\n+```\n+\n+**Choose a [reporter](./test-reporters.md)**\n+\n+```bash\n+npx playwright test --reporter=dot\n+```\n+\n+**Run in debug mode with [Playwright Inspector](./debug.md)**\n+\n+```bash\n+npx playwright test --debug\n+```\n+\n+**Run tests in interactive [UI mode](./test-ui-mode.md)**\n+\n+```bash\n+npx playwright test --ui\n+```\n+\n+### Show Report\n+\n+Display HTML report from previous test run. [Read more about the HTML reporter](./test-reporters#html-reporter).\n+\n+#### Syntax\n+\n+```bash\n+npx playwright show-report [report] [options]\n+```\n+\n+#### Options\n+\n+| Option | Description |\n+| :--- | :--- |\n+| `--host <host>` | Host to serve report on (default: localhost) |\n+| `--port <port>` | Port to serve report on (default: 9323) |\n+\n+#### Examples\n+\n+```bash\n+# Show latest test report\n+npx playwright show-report\n+\n+# Show a specific report\n+npx playwright show-report playwright-report/\n+\n+# Show report on custom port\n+npx playwright show-report --port 8080\n+```\n+\n+### Install Browsers\n+\n+Install browsers required by Playwright.\n+\n+#### Syntax\n+\n+```bash\n+npx playwright install [options] [browser...]\n+npx playwright install-deps [options] [browser...]\n+npx playwright uninstall\n+```\n+\n+#### Install Options\n+\n+| Option | Description |\n+| :--- | :--- |\n+| `--force` | Force reinstall of stable browser channels |\n+| `--with-deps` | Install browser system dependencies |\n+| `--dry-run` | Don't perform installation, just print information |\n+| `--only-shell` | Only install chromium-headless-shell instead of full Chromium |\n+| `--no-shell` | Don't install chromium-headless-shell |\n+\n+#### Install Deps Options\n+\n+| Option | Description |\n+| :--- | :--- |\n+| `--dry-run` | Don't perform installation, just print information |\n+\n+#### Examples\n+\n+```bash\n+# Install all browsers\n+npx playwright install\n+\n+# Install only Chromium\n+npx playwright install chromium\n+\n+# Install specific browsers\n+npx playwright install chromium webkit\n+\n+# Install browsers with dependencies\n+npx playwright install --with-deps\n+```\n+\n+## Generation & Debugging Tools\n+\n+### Code Generation\n+\n+Record actions and generate tests for multiple languages. [Read more about Codegen](./codegen-intro.md).\n+\n+#### Syntax\n+\n+```bash\n+npx playwright codegen [options] [url]\n+```\n+\n+#### Options\n+\n+| Option | Description |\n+| :--- | :--- |\n+| `-b, --browser <name>` | Browser to use: chromium, firefox, or webkit (default: chromium) |\n+| `-o, --output <file>` | Output file for the generated script |\n+| `--target <language>` | Language to use: javascript, playwright-test, python, etc. |\n+| `--test-id-attribute <attr>` | Attribute to use for test IDs |\n+\n+#### Examples\n+\n+```bash\n+# Start recording with interactive UI\n+npx playwright codegen\n+\n+# Record on specific site\n+npx playwright codegen https://playwright.dev\n+\n+# Generate Python code\n+npx playwright codegen --target=python\n+```\n+\n+### Trace Viewer\n+\n+Analyze and view test traces for debugging. [Read more about Trace Viewer](./trace-viewer.md).\n+\n+#### Syntax\n+\n+```bash\n+npx playwright show-trace [options] [trace...]\n+```\n+\n+#### Options\n+\n+| Option | Description |\n+| :--- | :--- |\n+| `-b, --browser <name>` | Browser to use: chromium, firefox, or webkit (default: chromium) |\n+| `-h, --host <host>` | Host to serve trace on |\n+| `-p, --port <port>` | Port to serve trace on |\n+\n+#### Examples\n+\n+```bash\n+# View a trace file\n+npx playwright show-trace trace.zip\n+\n+# View trace from directory\n+npx playwright show-trace trace/\n+```\n+\n+## Specialized Commands",
        "comment_created_at": "2025-05-15T14:55:42+00:00",
        "comment_author": "dgozman",
        "comment_body": "I don't think any of the commands below bring any value here, and they will eventually diverge from the source of truth. I'd remove them.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2075041035",
    "pr_number": 35852,
    "pr_file": "docs/src/api/class-tracing.md",
    "created_at": "2025-05-06T09:02:43+00:00",
    "commented_code": "API for collecting and saving Playwright traces. Playwright traces can be opened in [Trace Viewer](../trace-viewer.md) after Playwright script runs.\n \n+:::note\n+The `context.tracing` API records different information than the automatic tracing enabled through [Playwright Test configuration](https://playwright.dev/docs/api/class-testoptions#test-options-trace). This API records browser operations and network activity, but does not capture test assertions (`expect` calls).",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2075041035",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35852,
        "pr_file": "docs/src/api/class-tracing.md",
        "discussion_id": "2075041035",
        "commented_code": "@@ -3,6 +3,10 @@\n \n API for collecting and saving Playwright traces. Playwright traces can be opened in [Trace Viewer](../trace-viewer.md) after Playwright script runs.\n \n+:::note\n+The `context.tracing` API records different information than the automatic tracing enabled through [Playwright Test configuration](https://playwright.dev/docs/api/class-testoptions#test-options-trace). This API records browser operations and network activity, but does not capture test assertions (`expect` calls).",
        "comment_created_at": "2025-05-06T09:02:43+00:00",
        "comment_author": "dgozman",
        "comment_body": "While I like the explanation, I think that adding a suggestion \"you should use config option instead\" would benefit more users, because they will immediately understand what to do.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2020699642",
    "pr_number": 35412,
    "pr_file": "docs/src/test-api/class-test.md",
    "created_at": "2025-03-31T09:30:22+00:00",
    "commented_code": "test('runs in parallel 2', async ({ page }) => {});\n   ```\n \n-* Running tests serially, retrying from the start.\n+* Running tests in order, retry is per failed test. If one test fails, subsequent tests are still runned.",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2020699642",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35412,
        "pr_file": "docs/src/test-api/class-test.md",
        "discussion_id": "2020699642",
        "commented_code": "@@ -469,7 +469,18 @@ Learn more about the execution modes [here](../test-parallel.md).\n   test('runs in parallel 2', async ({ page }) => {});\n   ```\n \n-* Running tests serially, retrying from the start.\n+* Running tests in order, retry is per failed test. If one test fails, subsequent tests are still runned.",
        "comment_created_at": "2025-03-31T09:30:22+00:00",
        "comment_author": "dgozman",
        "comment_body": "I'd not mention the \"continue on failure\" behavior - that's expected. It is only important to mention that for serial mode, and avoid unnecessary details for the default mode.\r\n\r\n```suggestion\r\n* Running tests in order, retrying each failed test independetly.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]