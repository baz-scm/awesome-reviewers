[
  {
    "discussion_id": "2241108550",
    "pr_number": 36824,
    "pr_file": "tests/bidi/playwright.config.ts",
    "created_at": "2025-07-29T22:06:18+00:00",
    "commented_code": "const hasDebugOutput = process.env.DEBUG?.includes('pw:');\n \n function firefoxUserPrefs() {\n+  const defaultPrefs = {\n+    'network.proxy.allow_hijacking_localhost': true,",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2241108550",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36824,
        "pr_file": "tests/bidi/playwright.config.ts",
        "discussion_id": "2241108550",
        "commented_code": "@@ -27,10 +27,14 @@ const trace = !!process.env.PWTEST_TRACE;\n const hasDebugOutput = process.env.DEBUG?.includes('pw:');\n \n function firefoxUserPrefs() {\n+  const defaultPrefs = {\n+    'network.proxy.allow_hijacking_localhost': true,",
        "comment_created_at": "2025-07-29T22:06:18+00:00",
        "comment_author": "yury-s",
        "comment_body": "I wonder if these settings make sense as Bidi defaults and should be added to the upstream file in Puppeteer that `packages/playwright-core/src/server/bidi/third_party/firefoxPrefs.ts` is derived from.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2237727656",
    "pr_number": 36817,
    "pr_file": "packages/playwright-core/src/server/socksClientCertificatesInterceptor.ts",
    "created_at": "2025-07-28T19:53:15+00:00",
    "commented_code": "loadDummyServerCertsIfNeeded();\n   }\n \n+  getProxyAgent(host: string, port: number) {\n+    const proxyFromEnv = getProxyForUrl(`https://${host}:${port}`);\n+    if (proxyFromEnv)\n+      return createProxyAgent({ server: proxyFromEnv });\n+    return createProxyAgent(this._proxy);",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2237727656",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36817,
        "pr_file": "packages/playwright-core/src/server/socksClientCertificatesInterceptor.ts",
        "discussion_id": "2237727656",
        "commented_code": "@@ -274,6 +276,13 @@ export class ClientCertificatesProxy {\n     loadDummyServerCertsIfNeeded();\n   }\n \n+  getProxyAgent(host: string, port: number) {\n+    const proxyFromEnv = getProxyForUrl(`https://${host}:${port}`);\n+    if (proxyFromEnv)\n+      return createProxyAgent({ server: proxyFromEnv });\n+    return createProxyAgent(this._proxy);",
        "comment_created_at": "2025-07-28T19:53:15+00:00",
        "comment_author": "yury-s",
        "comment_body": "If the user config specifies a proxy explicitly, we should prioritize that, similar to how the browser would use it instead of the env var.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2205589100",
    "pr_number": 36676,
    "pr_file": "packages/playwright-core/src/server/bidi/third_party/firefoxPrefs.ts",
    "created_at": "2025-07-14T18:48:32+00:00",
    "commented_code": "// Prevent starting into safe mode after application crashes\n     'toolkit.startup.max_resumed_crashes': -1,\n+\n+    // Allow localhost and 127.0.0.1 to be proxied\n+    'network.proxy.allow_hijacking_localhost': true,",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2205589100",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36676,
        "pr_file": "packages/playwright-core/src/server/bidi/third_party/firefoxPrefs.ts",
        "discussion_id": "2205589100",
        "commented_code": "@@ -265,6 +265,9 @@ function defaultProfilePreferences(\n \n     // Prevent starting into safe mode after application crashes\n     'toolkit.startup.max_resumed_crashes': -1,\n+\n+    // Allow localhost and 127.0.0.1 to be proxied\n+    'network.proxy.allow_hijacking_localhost': true,",
        "comment_created_at": "2025-07-14T18:48:32+00:00",
        "comment_author": "yury-s",
        "comment_body": "These preferences are copied from https://github.com/puppeteer/puppeteer/blob/main/packages/browsers/src/browser-data/firefox.ts as the header of this file mentions. I don't see this setting upstream, why do we need it here? If it is just for the tests, you can pass it via `firefoxUserPrefs`",
        "pr_file_module": null
      },
      {
        "comment_id": "2207597246",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36676,
        "pr_file": "packages/playwright-core/src/server/bidi/third_party/firefoxPrefs.ts",
        "discussion_id": "2205589100",
        "commented_code": "@@ -265,6 +265,9 @@ function defaultProfilePreferences(\n \n     // Prevent starting into safe mode after application crashes\n     'toolkit.startup.max_resumed_crashes': -1,\n+\n+    // Allow localhost and 127.0.0.1 to be proxied\n+    'network.proxy.allow_hijacking_localhost': true,",
        "comment_created_at": "2025-07-15T14:04:35+00:00",
        "comment_author": "whimboo",
        "comment_body": "I would assume it's for testing only. So the suggestion would make sense.\r\n\r\nAlso it's not a pref that we enable by default in Firefox so we shouldn't do it in general for Playwright as well.",
        "pr_file_module": null
      },
      {
        "comment_id": "2207762795",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36676,
        "pr_file": "packages/playwright-core/src/server/bidi/third_party/firefoxPrefs.ts",
        "discussion_id": "2205589100",
        "commented_code": "@@ -265,6 +265,9 @@ function defaultProfilePreferences(\n \n     // Prevent starting into safe mode after application crashes\n     'toolkit.startup.max_resumed_crashes': -1,\n+\n+    // Allow localhost and 127.0.0.1 to be proxied\n+    'network.proxy.allow_hijacking_localhost': true,",
        "comment_created_at": "2025-07-15T15:02:46+00:00",
        "comment_author": "hbenl",
        "comment_body": "OK, I've removed the pref.",
        "pr_file_module": null
      },
      {
        "comment_id": "2210674806",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36676,
        "pr_file": "packages/playwright-core/src/server/bidi/third_party/firefoxPrefs.ts",
        "discussion_id": "2205589100",
        "commented_code": "@@ -265,6 +265,9 @@ function defaultProfilePreferences(\n \n     // Prevent starting into safe mode after application crashes\n     'toolkit.startup.max_resumed_crashes': -1,\n+\n+    // Allow localhost and 127.0.0.1 to be proxied\n+    'network.proxy.allow_hijacking_localhost': true,",
        "comment_created_at": "2025-07-16T14:56:20+00:00",
        "comment_author": "whimboo",
        "comment_body": "@yury-s I assume that you meant to force setting this pref in https://github.com/microsoft/playwright/blob/8e4627826a6bacdc97582e53ee34a1db4a9647e7/tests/bidi/playwright.config.ts#L29? I don't think that we should require it to be passed via the environment variable.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2210488916",
    "pr_number": 36676,
    "pr_file": "packages/playwright-core/src/server/bidi/bidiBrowser.ts",
    "created_at": "2025-07-16T13:44:14+00:00",
    "commented_code": "return bidi.Network.SameSite.None;\n }\n \n+function getProxyConfiguration(proxySettings?: types.ProxySettings): bidi.Session.ManualProxyConfiguration | undefined {\n+  if (!proxySettings)\n+    return undefined;\n+\n+  const proxy: bidi.Session.ManualProxyConfiguration = {\n+    proxyType: 'manual',\n+  };\n+  const url = new URL(proxySettings.server);  // Validate proxy server.\n+  switch (url.protocol) {\n+    case 'http:':\n+      proxy.httpProxy = url.host;\n+      break;\n+    case 'https:':\n+      proxy.httpsProxy = url.host;",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2210488916",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36676,
        "pr_file": "packages/playwright-core/src/server/bidi/bidiBrowser.ts",
        "discussion_id": "2210488916",
        "commented_code": "@@ -473,6 +445,39 @@ function toBidiSameSite(sameSite: channels.SetNetworkCookie['sameSite']): bidi.N\n   return bidi.Network.SameSite.None;\n }\n \n+function getProxyConfiguration(proxySettings?: types.ProxySettings): bidi.Session.ManualProxyConfiguration | undefined {\n+  if (!proxySettings)\n+    return undefined;\n+\n+  const proxy: bidi.Session.ManualProxyConfiguration = {\n+    proxyType: 'manual',\n+  };\n+  const url = new URL(proxySettings.server);  // Validate proxy server.\n+  switch (url.protocol) {\n+    case 'http:':\n+      proxy.httpProxy = url.host;\n+      break;\n+    case 'https:':\n+      proxy.httpsProxy = url.host;",
        "comment_created_at": "2025-07-16T13:44:14+00:00",
        "comment_author": "lutien",
        "comment_body": "I think this one should be rather `sslProxy` (see https://www.w3.org/TR/webdriver-bidi/#cddl-type-sessionmanualproxyconfiguration)\r\n```suggestion\r\n      proxy.sslProxy = url.host;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2164169633",
    "pr_number": 36423,
    "pr_file": "packages/playwright-core/src/server/utils/network.ts",
    "created_at": "2025-06-24T14:23:30+00:00",
    "commented_code": "if (!/^\\w+:\\/\\//.test(proxyServer))\n     proxyServer = 'http://' + proxyServer;\n \n-  const proxyOpts = url.parse(proxyServer);\n+  const proxyOpts = new URL(proxyServer);\n   if (proxyOpts.protocol?.startsWith('socks')) {\n     return new SocksProxyAgent({\n       host: proxyOpts.hostname,\n       port: proxyOpts.port || undefined,\n     });\n   }\n-  if (proxy.username)\n-    proxyOpts.auth = `${proxy.username}:${proxy.password || ''}`;\n+  if (proxy.username) {\n+    proxyOpts.username = proxy.username;\n+    proxyOpts.password = proxy.password || '';\n+  }\n \n   if (forUrl && ['ws:', 'wss:'].includes(forUrl.protocol)) {\n     // Force CONNECT method for WebSockets.\n-    return new HttpsProxyAgent(proxyOpts);\n+    // TODO: switch to URL instance instead of legacy object once https-proxy-agent supports it.\n+    return new HttpsProxyAgent(convertURLtoLegacyUrl(proxyOpts));\n   }\n \n   // TODO: We should use HttpProxyAgent conditional on proxyOpts.protocol instead of always using CONNECT method.\n-  return new HttpsProxyAgent(proxyOpts);\n+  // TODO: switch to URL instance instead of legacy object once https-proxy-agent supports it.\n+  return new HttpsProxyAgent(convertURLtoLegacyUrl(proxyOpts));",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2164169633",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36423,
        "pr_file": "packages/playwright-core/src/server/utils/network.ts",
        "discussion_id": "2164169633",
        "commented_code": "@@ -137,23 +132,27 @@ export function createProxyAgent(proxy?: ProxySettings, forUrl?: URL) {\n   if (!/^\\w+:\\/\\//.test(proxyServer))\n     proxyServer = 'http://' + proxyServer;\n \n-  const proxyOpts = url.parse(proxyServer);\n+  const proxyOpts = new URL(proxyServer);\n   if (proxyOpts.protocol?.startsWith('socks')) {\n     return new SocksProxyAgent({\n       host: proxyOpts.hostname,\n       port: proxyOpts.port || undefined,\n     });\n   }\n-  if (proxy.username)\n-    proxyOpts.auth = `${proxy.username}:${proxy.password || ''}`;\n+  if (proxy.username) {\n+    proxyOpts.username = proxy.username;\n+    proxyOpts.password = proxy.password || '';\n+  }\n \n   if (forUrl && ['ws:', 'wss:'].includes(forUrl.protocol)) {\n     // Force CONNECT method for WebSockets.\n-    return new HttpsProxyAgent(proxyOpts);\n+    // TODO: switch to URL instance instead of legacy object once https-proxy-agent supports it.\n+    return new HttpsProxyAgent(convertURLtoLegacyUrl(proxyOpts));\n   }\n \n   // TODO: We should use HttpProxyAgent conditional on proxyOpts.protocol instead of always using CONNECT method.\n-  return new HttpsProxyAgent(proxyOpts);\n+  // TODO: switch to URL instance instead of legacy object once https-proxy-agent supports it.\n+  return new HttpsProxyAgent(convertURLtoLegacyUrl(proxyOpts));",
        "comment_created_at": "2025-06-24T14:23:30+00:00",
        "comment_author": "mxschmitt",
        "comment_body": "We are still on and old https-proxy-agent version which uses `url.parse` internally if you pass a string - once we update we can remove the `convertURLtoLegacyUrl` function and pass the URL object over.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2018261367",
    "pr_number": 35389,
    "pr_file": "packages/playwright-core/src/server/utils/network.ts",
    "created_at": "2025-03-28T09:46:46+00:00",
    "commented_code": "const timeout = params.timeout ?? NET_DEFAULT_TIMEOUT;\n \n-  const proxyURL = getProxyForUrl(params.url);\n-  if (proxyURL) {\n-    const parsedProxyURL = url.parse(proxyURL);\n-    if (params.url.startsWith('http:')) {\n-      options = {\n-        path: parsedUrl.href,\n-        host: parsedProxyURL.hostname,\n-        port: parsedProxyURL.port,\n-        headers: options.headers,\n-        method: options.method\n-      };\n-    } else {\n-      (parsedProxyURL as any).secureProxy = parsedProxyURL.protocol === 'https:';\n-\n-      options.agent = new HttpsProxyAgent(parsedProxyURL);\n-      options.rejectUnauthorized = false;\n+  if (params.proxy) {\n+    options.agent = createProxyAgent(params.proxy, new URL(params.url));\n+  } else {\n+    const proxyURL = getProxyForUrl(params.url);",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2018261367",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35389,
        "pr_file": "packages/playwright-core/src/server/utils/network.ts",
        "discussion_id": "2018261367",
        "commented_code": "@@ -49,22 +51,26 @@ export function httpRequest(params: HTTPRequestParams, onResponse: (r: http.Inco\n \n   const timeout = params.timeout ?? NET_DEFAULT_TIMEOUT;\n \n-  const proxyURL = getProxyForUrl(params.url);\n-  if (proxyURL) {\n-    const parsedProxyURL = url.parse(proxyURL);\n-    if (params.url.startsWith('http:')) {\n-      options = {\n-        path: parsedUrl.href,\n-        host: parsedProxyURL.hostname,\n-        port: parsedProxyURL.port,\n-        headers: options.headers,\n-        method: options.method\n-      };\n-    } else {\n-      (parsedProxyURL as any).secureProxy = parsedProxyURL.protocol === 'https:';\n-\n-      options.agent = new HttpsProxyAgent(parsedProxyURL);\n-      options.rejectUnauthorized = false;\n+  if (params.proxy) {\n+    options.agent = createProxyAgent(params.proxy, new URL(params.url));\n+  } else {\n+    const proxyURL = getProxyForUrl(params.url);",
        "comment_created_at": "2025-03-28T09:46:46+00:00",
        "comment_author": "mxschmitt",
        "comment_body": "This is hard to follow imo. The first if-condition is 'if there is a user-specified proxy'. The second condition is 'getProxyForUrl' but in reality its 'getProxyFromEnvForUrl'. I think we can do something like this:\r\n\r\n```ts\r\nconst proxyFromEnv = getProxyForUrl(params.url);\r\nconst proxyFromEnvObj = proxyFromEnv ? { server: proxyFromEnv } : undefined;\r\noptions.agent = createProxyAgent(params.proxy ?? proxyFromEnvObj, new URL(params.url));\r\n```\r\n\r\nThis in theory should allow us to get rid f the whole \"else clause\" This has one disadvantage tho after thinking about it. It would end up that we do `CONNECT` requests for all the `http` requests. It would mean we would have to move the `options = ` either into `createProxyAgent` or add the `HttpProxyAgent` dependency which seems reasonable (one dependency from the same author of https-proxy-agent`). Maybe follow-up and get rid of the TODO in createProxyAgent?",
        "pr_file_module": null
      },
      {
        "comment_id": "2018270258",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35389,
        "pr_file": "packages/playwright-core/src/server/utils/network.ts",
        "discussion_id": "2018261367",
        "commented_code": "@@ -49,22 +51,26 @@ export function httpRequest(params: HTTPRequestParams, onResponse: (r: http.Inco\n \n   const timeout = params.timeout ?? NET_DEFAULT_TIMEOUT;\n \n-  const proxyURL = getProxyForUrl(params.url);\n-  if (proxyURL) {\n-    const parsedProxyURL = url.parse(proxyURL);\n-    if (params.url.startsWith('http:')) {\n-      options = {\n-        path: parsedUrl.href,\n-        host: parsedProxyURL.hostname,\n-        port: parsedProxyURL.port,\n-        headers: options.headers,\n-        method: options.method\n-      };\n-    } else {\n-      (parsedProxyURL as any).secureProxy = parsedProxyURL.protocol === 'https:';\n-\n-      options.agent = new HttpsProxyAgent(parsedProxyURL);\n-      options.rejectUnauthorized = false;\n+  if (params.proxy) {\n+    options.agent = createProxyAgent(params.proxy, new URL(params.url));\n+  } else {\n+    const proxyURL = getProxyForUrl(params.url);",
        "comment_created_at": "2025-03-28T09:51:54+00:00",
        "comment_author": "dgozman",
        "comment_body": "I am afraid to touch this willy-nilly because it is used for the `npx playwright install`. Therefore I made the smallest change possible by respecting the user-supplied proxy if any. We can try to follow up with some opt-out env variable, or leave with it for one more release.",
        "pr_file_module": null
      }
    ]
  }
]