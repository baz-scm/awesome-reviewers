[
  {
    "discussion_id": "2243099075",
    "pr_number": 36860,
    "pr_file": "packages/playwright-core/src/server/browserContext.ts",
    "created_at": "2025-07-30T15:32:23+00:00",
    "commented_code": "return result;\n   }\n \n-  async _resetStorage(progress: Progress) {\n-    const oldOrigins = this._origins;\n-    const newOrigins = new Map(this._options.storageState?.origins?.map(p => [p.origin, p]) || []);\n-    if (!oldOrigins.size && !newOrigins.size)\n-      return;\n-    let page = this.pages()[0];\n-\n-    // Do not mark this page as internal, because we will leave it for later reuse\n-    // as a user-visible page.\n-    page = page || await this.newPage(progress, false);\n-    const interceptor = (route: network.Route) => {\n-      route.fulfill({ body: '<html></html>' }).catch(() => {});\n-    };\n-    await page.addRequestInterceptor(progress, interceptor, 'prepend');\n-\n-    try {\n-      for (const origin of new Set([...oldOrigins, ...newOrigins.keys()])) {\n-        const frame = page.mainFrame();\n-        await frame.gotoImpl(progress, origin, {});\n-        await progress.race(frame.resetStorageForCurrentOriginBestEffort(newOrigins.get(origin)));\n-      }\n-\n-      this._origins = new Set([...newOrigins.keys()]);\n-      // It is safe to not restore the URL to about:blank since we are doing it in Page::resetForReuse.\n-    } finally {\n-      await page.removeRequestInterceptor(interceptor);\n-    }\n-  }\n-\n   isSettingStorageState(): boolean {\n     return this._settingStorageState;\n   }\n \n-  async setStorageState(progress: Progress, state: NonNullable<channels.BrowserNewContextParams['storageState']>) {\n+  async setStorageState(progress: Progress, state: channels.BrowserNewContextParams['storageState'], useExistingPage: boolean) {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2243099075",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36860,
        "pr_file": "packages/playwright-core/src/server/browserContext.ts",
        "discussion_id": "2243099075",
        "commented_code": "@@ -612,67 +610,53 @@ export abstract class BrowserContext extends SdkObject {\n     return result;\n   }\n \n-  async _resetStorage(progress: Progress) {\n-    const oldOrigins = this._origins;\n-    const newOrigins = new Map(this._options.storageState?.origins?.map(p => [p.origin, p]) || []);\n-    if (!oldOrigins.size && !newOrigins.size)\n-      return;\n-    let page = this.pages()[0];\n-\n-    // Do not mark this page as internal, because we will leave it for later reuse\n-    // as a user-visible page.\n-    page = page || await this.newPage(progress, false);\n-    const interceptor = (route: network.Route) => {\n-      route.fulfill({ body: '<html></html>' }).catch(() => {});\n-    };\n-    await page.addRequestInterceptor(progress, interceptor, 'prepend');\n-\n-    try {\n-      for (const origin of new Set([...oldOrigins, ...newOrigins.keys()])) {\n-        const frame = page.mainFrame();\n-        await frame.gotoImpl(progress, origin, {});\n-        await progress.race(frame.resetStorageForCurrentOriginBestEffort(newOrigins.get(origin)));\n-      }\n-\n-      this._origins = new Set([...newOrigins.keys()]);\n-      // It is safe to not restore the URL to about:blank since we are doing it in Page::resetForReuse.\n-    } finally {\n-      await page.removeRequestInterceptor(interceptor);\n-    }\n-  }\n-\n   isSettingStorageState(): boolean {\n     return this._settingStorageState;\n   }\n \n-  async setStorageState(progress: Progress, state: NonNullable<channels.BrowserNewContextParams['storageState']>) {\n+  async setStorageState(progress: Progress, state: channels.BrowserNewContextParams['storageState'], useExistingPage: boolean) {",
        "comment_created_at": "2025-07-30T15:32:23+00:00",
        "comment_author": "pavelfeldman",
        "comment_body": "Make it clear that it does not set the state, but rather adds it for now. Or pass the bool!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2240224557",
    "pr_number": 36823,
    "pr_file": "packages/injected/src/ariaSnapshot.ts",
    "created_at": "2025-07-29T15:29:30+00:00",
    "commented_code": "};\n \n export function matchesAriaTree(rootElement: Element, template: AriaTemplateNode): { matches: AriaNode[], received: MatcherReceived } {\n-  const snapshot = generateAriaTree(rootElement);\n+  const snapshot = generateAriaTree(rootElement, { mode: 'expect' });\n   const matches = matchesNodeDeep(snapshot.root, template, false, false);\n   return {\n     matches,\n     received: {\n-      raw: renderAriaTree(snapshot, { mode: 'raw' }),\n-      regex: renderAriaTree(snapshot, { mode: 'regex' }),\n+      raw: renderAriaTree(snapshot, { mode: 'codegen' }),\n+      regex: renderAriaTree(snapshot, { mode: 'codegen' }),\n     }\n   };\n }\n \n export function getAllByAria(rootElement: Element, template: AriaTemplateNode): Element[] {\n-  const root = generateAriaTree(rootElement).root;\n+  const root = generateAriaTree(rootElement, { mode: 'expect' }).root;",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2240224557",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36823,
        "pr_file": "packages/injected/src/ariaSnapshot.ts",
        "discussion_id": "2240224557",
        "commented_code": "@@ -309,19 +357,19 @@ export type MatcherReceived = {\n };\n \n export function matchesAriaTree(rootElement: Element, template: AriaTemplateNode): { matches: AriaNode[], received: MatcherReceived } {\n-  const snapshot = generateAriaTree(rootElement);\n+  const snapshot = generateAriaTree(rootElement, { mode: 'expect' });\n   const matches = matchesNodeDeep(snapshot.root, template, false, false);\n   return {\n     matches,\n     received: {\n-      raw: renderAriaTree(snapshot, { mode: 'raw' }),\n-      regex: renderAriaTree(snapshot, { mode: 'regex' }),\n+      raw: renderAriaTree(snapshot, { mode: 'codegen' }),\n+      regex: renderAriaTree(snapshot, { mode: 'codegen' }),\n     }\n   };\n }\n \n export function getAllByAria(rootElement: Element, template: AriaTemplateNode): Element[] {\n-  const root = generateAriaTree(rootElement).root;\n+  const root = generateAriaTree(rootElement, { mode: 'expect' }).root;",
        "comment_created_at": "2025-07-29T15:29:30+00:00",
        "comment_author": "pavelfeldman",
        "comment_body": "We can't assume that getAllByAria is only called for `expect` purposes, we need to rename all the getters.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2172040506",
    "pr_number": 36469,
    "pr_file": "tests/library/selectors-register.spec.ts",
    "created_at": "2025-06-27T13:22:53+00:00",
    "commented_code": "await page.close();\n });\n \n+it('should throw \"already registered\" error when registering', { annotation: { type: 'issue', description: 'https://github.com/microsoft/playwright/issues/36467' } }, async ({ playwright }) => {\n+  await playwright.selectors.register('foo', createTagSelector);",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2172040506",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36469,
        "pr_file": "tests/library/selectors-register.spec.ts",
        "discussion_id": "2172040506",
        "commented_code": "@@ -145,6 +145,11 @@ it('should handle errors', async ({ playwright, browser }) => {\n   await page.close();\n });\n \n+it('should throw \"already registered\" error when registering', { annotation: { type: 'issue', description: 'https://github.com/microsoft/playwright/issues/36467' } }, async ({ playwright }) => {\n+  await playwright.selectors.register('foo', createTagSelector);",
        "comment_created_at": "2025-06-27T13:22:53+00:00",
        "comment_author": "dgozman",
        "comment_body": "Choose a unique name, e.g. `alreadyRegistered`, otherwise this will conflict with other some other test.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2103477280",
    "pr_number": 36049,
    "pr_file": "packages/playwright-core/src/server/registry/index.ts",
    "created_at": "2025-05-22T22:20:14+00:00",
    "commented_code": "}\n   }\n \n-  private async _validateInstallationCache(linksDir: string) {\n-    // 1. Collect used downloads and package descriptors.\n-    const usedBrowserPaths: Set<string> = new Set();\n+  async list() {\n+    const linksDir = path.join(registryDirectory, '.links');\n+    const browsers: Array<{ browserName: string, browserVersion: number, hostDir: string, browserPath: string }> = await this._traverseBrowserInstallations(linksDir);\n+\n+    // Group browsers by browserName\n+    const groupedBrowsers: Record<string, Array<{ browserVersion: number, hostDir: string, browserPath: string }>> = {};\n+\n+    browsers.forEach(browser => {\n+      if (!groupedBrowsers[browser.browserName])\n+        groupedBrowsers[browser.browserName] = [];\n+\n+      groupedBrowsers[browser.browserName].push({\n+        browserVersion: browser.browserVersion,\n+        hostDir: browser.hostDir,\n+        browserPath: browser.browserPath\n+      });\n+    });\n+\n+    return groupedBrowsers;\n+  }\n+\n+  private async _traverseBrowserInstallations(linksDir: string) {\n+    const browserList: Array<{ browserName: string, browserVersion: number, hostDir: string, browserPath: string }> = [];",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2103477280",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36049,
        "pr_file": "packages/playwright-core/src/server/registry/index.ts",
        "discussion_id": "2103477280",
        "commented_code": "@@ -1248,9 +1251,29 @@ export class Registry {\n     }\n   }\n \n-  private async _validateInstallationCache(linksDir: string) {\n-    // 1. Collect used downloads and package descriptors.\n-    const usedBrowserPaths: Set<string> = new Set();\n+  async list() {\n+    const linksDir = path.join(registryDirectory, '.links');\n+    const browsers: Array<{ browserName: string, browserVersion: number, hostDir: string, browserPath: string }> = await this._traverseBrowserInstallations(linksDir);\n+\n+    // Group browsers by browserName\n+    const groupedBrowsers: Record<string, Array<{ browserVersion: number, hostDir: string, browserPath: string }>> = {};\n+\n+    browsers.forEach(browser => {\n+      if (!groupedBrowsers[browser.browserName])\n+        groupedBrowsers[browser.browserName] = [];\n+\n+      groupedBrowsers[browser.browserName].push({\n+        browserVersion: browser.browserVersion,\n+        hostDir: browser.hostDir,\n+        browserPath: browser.browserPath\n+      });\n+    });\n+\n+    return groupedBrowsers;\n+  }\n+\n+  private async _traverseBrowserInstallations(linksDir: string) {\n+    const browserList: Array<{ browserName: string, browserVersion: number, hostDir: string, browserPath: string }> = [];",
        "comment_created_at": "2025-05-22T22:20:14+00:00",
        "comment_author": "yury-s",
        "comment_body": "`{ browserName: string, browserVersion: number, hostDir: string, browserPath: string }` is repeated several times. Let's introduce a named type for it, something like `InstalledBrowserInfo`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2103835616",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36049,
        "pr_file": "packages/playwright-core/src/server/registry/index.ts",
        "discussion_id": "2103477280",
        "commented_code": "@@ -1248,9 +1251,29 @@ export class Registry {\n     }\n   }\n \n-  private async _validateInstallationCache(linksDir: string) {\n-    // 1. Collect used downloads and package descriptors.\n-    const usedBrowserPaths: Set<string> = new Set();\n+  async list() {\n+    const linksDir = path.join(registryDirectory, '.links');\n+    const browsers: Array<{ browserName: string, browserVersion: number, hostDir: string, browserPath: string }> = await this._traverseBrowserInstallations(linksDir);\n+\n+    // Group browsers by browserName\n+    const groupedBrowsers: Record<string, Array<{ browserVersion: number, hostDir: string, browserPath: string }>> = {};\n+\n+    browsers.forEach(browser => {\n+      if (!groupedBrowsers[browser.browserName])\n+        groupedBrowsers[browser.browserName] = [];\n+\n+      groupedBrowsers[browser.browserName].push({\n+        browserVersion: browser.browserVersion,\n+        hostDir: browser.hostDir,\n+        browserPath: browser.browserPath\n+      });\n+    });\n+\n+    return groupedBrowsers;\n+  }\n+\n+  private async _traverseBrowserInstallations(linksDir: string) {\n+    const browserList: Array<{ browserName: string, browserVersion: number, hostDir: string, browserPath: string }> = [];",
        "comment_created_at": "2025-05-23T05:34:02+00:00",
        "comment_author": "Zemotacqy",
        "comment_body": "Removed all unnecessary type declarations. IMO, should be fine: not be required anymore.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2105952349",
    "pr_number": 36075,
    "pr_file": "packages/playwright-core/src/client/playwright.ts",
    "created_at": "2025-05-24T21:39:09+00:00",
    "commented_code": "}\n \n   _allContexts() {\n-    return this._browserTypes().flatMap(type => [...type._contexts]);\n+    return [\n+      ...this._browserTypes().flatMap(type => [...type._contexts]),\n+      ...this._electron._contexts,",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2105952349",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36075,
        "pr_file": "packages/playwright-core/src/client/playwright.ts",
        "discussion_id": "2105952349",
        "commented_code": "@@ -82,7 +83,11 @@ export class Playwright extends ChannelOwner<channels.PlaywrightChannel> {\n   }\n \n   _allContexts() {\n-    return this._browserTypes().flatMap(type => [...type._contexts]);\n+    return [\n+      ...this._browserTypes().flatMap(type => [...type._contexts]),\n+      ...this._electron._contexts,",
        "comment_created_at": "2025-05-24T21:39:09+00:00",
        "comment_author": "dgozman",
        "comment_body": "I do not think either electron or android were ever supported in our fixtures, so let's not add them.",
        "pr_file_module": null
      },
      {
        "comment_id": "2107757702",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36075,
        "pr_file": "packages/playwright-core/src/client/playwright.ts",
        "discussion_id": "2105952349",
        "commented_code": "@@ -82,7 +83,11 @@ export class Playwright extends ChannelOwner<channels.PlaywrightChannel> {\n   }\n \n   _allContexts() {\n-    return this._browserTypes().flatMap(type => [...type._contexts]);\n+    return [\n+      ...this._browserTypes().flatMap(type => [...type._contexts]),\n+      ...this._electron._contexts,",
        "comment_created_at": "2025-05-26T19:05:19+00:00",
        "comment_author": "mxschmitt",
        "comment_body": "What about renaming `_allContexts` to `_allNativeContexts` (or different if you have suggestions) and having `_allContexts` return electron/android as well? I see the confusion that `_allContexts` is used inside `ArtifactsRecorder` as well as `Selectors` class.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2063568858",
    "pr_number": 35641,
    "pr_file": "packages/playwright/src/reporters/list.ts",
    "created_at": "2025-04-28T12:37:01+00:00",
    "commented_code": "import { TerminalReporter, stepSuffix } from './base';\n import { stripAnsiEscapes } from '../util';\n \n+import type { ListReporterOptions } from '../../types/test';\n import type { FullResult, Suite, TestCase, TestError, TestResult, TestStep } from '../../types/testReporter';\n+import type { ReporterOptions } from './types';\n \n // Allow it in the Visual Studio Code Terminal and the new Windows Terminal\n const DOES_NOT_SUPPORT_UTF8_IN_TERMINAL = process.platform === 'win32' && process.env.TERM_PROGRAM !== 'vscode' && !process.env.WT_SESSION;\n const POSITIVE_STATUS_MARK = DOES_NOT_SUPPORT_UTF8_IN_TERMINAL ? 'ok' : '\u2713';\n const NEGATIVE_STATUS_MARK = DOES_NOT_SUPPORT_UTF8_IN_TERMINAL ? 'x' : '\u2718';\n \n+type Options = ListReporterOptions & ReporterOptions;",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2063568858",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35641,
        "pr_file": "packages/playwright/src/reporters/list.ts",
        "discussion_id": "2063568858",
        "commented_code": "@@ -20,13 +20,17 @@ import { ms as milliseconds } from 'playwright-core/lib/utilsBundle';\n import { TerminalReporter, stepSuffix } from './base';\n import { stripAnsiEscapes } from '../util';\n \n+import type { ListReporterOptions } from '../../types/test';\n import type { FullResult, Suite, TestCase, TestError, TestResult, TestStep } from '../../types/testReporter';\n+import type { ReporterOptions } from './types';\n \n // Allow it in the Visual Studio Code Terminal and the new Windows Terminal\n const DOES_NOT_SUPPORT_UTF8_IN_TERMINAL = process.platform === 'win32' && process.env.TERM_PROGRAM !== 'vscode' && !process.env.WT_SESSION;\n const POSITIVE_STATUS_MARK = DOES_NOT_SUPPORT_UTF8_IN_TERMINAL ? 'ok' : '\u2713';\n const NEGATIVE_STATUS_MARK = DOES_NOT_SUPPORT_UTF8_IN_TERMINAL ? 'x' : '\u2718';\n \n+type Options = ListReporterOptions & ReporterOptions;",
        "comment_created_at": "2025-04-28T12:37:01+00:00",
        "comment_author": "dgozman",
        "comment_body": "I'd inline this one to avoid an overly-generic `Options` type. Same for all other reporters.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2068829265",
    "pr_number": 35641,
    "pr_file": "packages/playwright/src/reporters/html.ts",
    "created_at": "2025-04-30T14:46:23+00:00",
    "commented_code": "import { mime } from 'playwright-core/lib/utilsBundle';\n import { yazl } from 'playwright-core/lib/zipBundle';\n \n-import { formatError, formatResultFailure, internalScreen } from './base';\n+import { CommonReporterOptions, formatError, formatResultFailure, internalScreen } from './base';\n import { codeFrameColumns } from '../transform/babelBundle';\n import { resolveReporterOutputPath, stripAnsiEscapes } from '../util';\n \n import type { ReporterV2 } from './reporterV2';\n-import type { HtmlReporterOptions, Metadata } from '../../types/test';\n+import type { HtmlReporterOptions as HtmlReporterConfigOptions, Metadata, TestAnnotation } from '../../types/test';\n import type * as api from '../../types/testReporter';\n import type { HTMLReport, Stats, TestAttachment, TestCase, TestCaseSummary, TestFile, TestFileSummary, TestResult, TestStep } from '@html-reporter/types';\n import type { ZipFile } from 'playwright-core/lib/zipBundle';\n import type { TransformCallback } from 'stream';\n-import type { ReporterOptions } from './types';\n \n type TestEntry = {\n   testCase: TestCase;\n   testCaseSummary: TestCaseSummary\n };\n \n-type Options = HtmlReporterOptions & ReporterOptions;\n-\n-type HtmlReportOpenOption = Exclude<Options['open'], undefined>;\n+type HtmlReportOpenOption = NonNullable<HtmlReporterConfigOptions['open']>;\n const htmlReportOptions: HtmlReportOpenOption[] = ['always', 'never', 'on-failure'];\n \n const isHtmlReportOption = (type: string): type is HtmlReportOpenOption => {\n   return htmlReportOptions.includes(type as HtmlReportOpenOption);\n };\n \n+type HtmlReporterOptions = HtmlReporterConfigOptions & {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2068829265",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35641,
        "pr_file": "packages/playwright/src/reporters/html.ts",
        "discussion_id": "2068829265",
        "commented_code": "@@ -24,36 +24,39 @@ import { open } from 'playwright-core/lib/utilsBundle';\n import { mime } from 'playwright-core/lib/utilsBundle';\n import { yazl } from 'playwright-core/lib/zipBundle';\n \n-import { formatError, formatResultFailure, internalScreen } from './base';\n+import { CommonReporterOptions, formatError, formatResultFailure, internalScreen } from './base';\n import { codeFrameColumns } from '../transform/babelBundle';\n import { resolveReporterOutputPath, stripAnsiEscapes } from '../util';\n \n import type { ReporterV2 } from './reporterV2';\n-import type { HtmlReporterOptions, Metadata } from '../../types/test';\n+import type { HtmlReporterOptions as HtmlReporterConfigOptions, Metadata, TestAnnotation } from '../../types/test';\n import type * as api from '../../types/testReporter';\n import type { HTMLReport, Stats, TestAttachment, TestCase, TestCaseSummary, TestFile, TestFileSummary, TestResult, TestStep } from '@html-reporter/types';\n import type { ZipFile } from 'playwright-core/lib/zipBundle';\n import type { TransformCallback } from 'stream';\n-import type { ReporterOptions } from './types';\n \n type TestEntry = {\n   testCase: TestCase;\n   testCaseSummary: TestCaseSummary\n };\n \n-type Options = HtmlReporterOptions & ReporterOptions;\n-\n-type HtmlReportOpenOption = Exclude<Options['open'], undefined>;\n+type HtmlReportOpenOption = NonNullable<HtmlReporterConfigOptions['open']>;\n const htmlReportOptions: HtmlReportOpenOption[] = ['always', 'never', 'on-failure'];\n \n const isHtmlReportOption = (type: string): type is HtmlReportOpenOption => {\n   return htmlReportOptions.includes(type as HtmlReportOpenOption);\n };\n \n+type HtmlReporterOptions = HtmlReporterConfigOptions & {",
        "comment_created_at": "2025-04-30T14:46:23+00:00",
        "comment_author": "dgozman",
        "comment_body": "Shouldn't this be `HtmlReporterConfigOptions & CommonReporterOptions` instead?",
        "pr_file_module": null
      },
      {
        "comment_id": "2068865857",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35641,
        "pr_file": "packages/playwright/src/reporters/html.ts",
        "discussion_id": "2068829265",
        "commented_code": "@@ -24,36 +24,39 @@ import { open } from 'playwright-core/lib/utilsBundle';\n import { mime } from 'playwright-core/lib/utilsBundle';\n import { yazl } from 'playwright-core/lib/zipBundle';\n \n-import { formatError, formatResultFailure, internalScreen } from './base';\n+import { CommonReporterOptions, formatError, formatResultFailure, internalScreen } from './base';\n import { codeFrameColumns } from '../transform/babelBundle';\n import { resolveReporterOutputPath, stripAnsiEscapes } from '../util';\n \n import type { ReporterV2 } from './reporterV2';\n-import type { HtmlReporterOptions, Metadata } from '../../types/test';\n+import type { HtmlReporterOptions as HtmlReporterConfigOptions, Metadata, TestAnnotation } from '../../types/test';\n import type * as api from '../../types/testReporter';\n import type { HTMLReport, Stats, TestAttachment, TestCase, TestCaseSummary, TestFile, TestFileSummary, TestResult, TestStep } from '@html-reporter/types';\n import type { ZipFile } from 'playwright-core/lib/zipBundle';\n import type { TransformCallback } from 'stream';\n-import type { ReporterOptions } from './types';\n \n type TestEntry = {\n   testCase: TestCase;\n   testCaseSummary: TestCaseSummary\n };\n \n-type Options = HtmlReporterOptions & ReporterOptions;\n-\n-type HtmlReportOpenOption = Exclude<Options['open'], undefined>;\n+type HtmlReportOpenOption = NonNullable<HtmlReporterConfigOptions['open']>;\n const htmlReportOptions: HtmlReportOpenOption[] = ['always', 'never', 'on-failure'];\n \n const isHtmlReportOption = (type: string): type is HtmlReportOpenOption => {\n   return htmlReportOptions.includes(type as HtmlReportOpenOption);\n };\n \n+type HtmlReporterOptions = HtmlReporterConfigOptions & {",
        "comment_created_at": "2025-04-30T15:01:06+00:00",
        "comment_author": "agg23",
        "comment_body": "Good call, bad merge.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2054704086",
    "pr_number": 35670,
    "pr_file": "packages/playwright/src/errorContext.ts",
    "created_at": "2025-04-22T19:06:25+00:00",
    "commented_code": "}\n }\n \n-async function loadSource(file: string, sourceCache: Map<string, string>) {\n+type Location = {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2054704086",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35670,
        "pr_file": "packages/playwright/src/errorContext.ts",
        "discussion_id": "2054704086",
        "commented_code": "@@ -139,12 +140,39 @@ export async function attachErrorContext(testInfo: TestInfoImpl, format: 'markdo\n   }\n }\n \n-async function loadSource(file: string, sourceCache: Map<string, string>) {\n+type Location = {",
        "comment_created_at": "2025-04-22T19:06:25+00:00",
        "comment_author": "dgozman",
        "comment_body": "I am pretty sure we already have a `Location` type \ud83d\ude04 ",
        "pr_file_module": null
      },
      {
        "comment_id": "2054727559",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35670,
        "pr_file": "packages/playwright/src/errorContext.ts",
        "discussion_id": "2054704086",
        "commented_code": "@@ -139,12 +140,39 @@ export async function attachErrorContext(testInfo: TestInfoImpl, format: 'markdo\n   }\n }\n \n-async function loadSource(file: string, sourceCache: Map<string, string>) {\n+type Location = {",
        "comment_created_at": "2025-04-22T19:26:24+00:00",
        "comment_author": "mxschmitt",
        "comment_body": "There is `Location` in html-reporter and `SourceLocation` in trace-viewer. Both seem wrong. Also `StackFrame` in isomorphic but probably fine to use my own?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2025343412",
    "pr_number": 35445,
    "pr_file": "packages/trace-viewer/src/ui/modelUtil.ts",
    "created_at": "2025-04-02T18:05:42+00:00",
    "commented_code": "return (action as any)[nextInContextSymbol];\n }\n \n-export function prevInList(action: ActionTraceEvent): ActionTraceEvent {\n-  return (action as any)[prevInListSymbol];\n+export function prevEndTime(action: ActionTraceEvent): ActionTraceEvent {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2025343412",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35445,
        "pr_file": "packages/trace-viewer/src/ui/modelUtil.ts",
        "discussion_id": "2025343412",
        "commented_code": "@@ -355,8 +368,12 @@ function nextInContext(action: ActionTraceEvent): ActionTraceEvent {\n   return (action as any)[nextInContextSymbol];\n }\n \n-export function prevInList(action: ActionTraceEvent): ActionTraceEvent {\n-  return (action as any)[prevInListSymbol];\n+export function prevEndTime(action: ActionTraceEvent): ActionTraceEvent {",
        "comment_created_at": "2025-04-02T18:05:42+00:00",
        "comment_author": "dgozman",
        "comment_body": "`previousActionByEndTime`/`nextActionByStartTime`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1973606622",
    "pr_number": 34949,
    "pr_file": "packages/playwright-core/src/server/isomorphic/utilityScriptSerializers.ts",
    "created_at": "2025-02-27T13:42:30+00:00",
    "commented_code": "}\n   }\n \n+  const typedArrayCtors: Record<TypedArrayKind, Function> = {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "1973606622",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 34949,
        "pr_file": "packages/playwright-core/src/server/isomorphic/utilityScriptSerializers.ts",
        "discussion_id": "1973606622",
        "commented_code": "@@ -68,6 +71,42 @@ export function source() {\n     }\n   }\n \n+  const typedArrayCtors: Record<TypedArrayKind, Function> = {",
        "comment_created_at": "2025-02-27T13:42:30+00:00",
        "comment_author": "dgozman",
        "comment_body": "nit: `typedArrayConstructors` to avoid unnecessary acronyms.",
        "pr_file_module": null
      }
    ]
  }
]