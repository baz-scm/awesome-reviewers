[
  {
    "discussion_id": "2009817852",
    "pr_number": 35203,
    "pr_file": "packages/html-reporter/src/checkbox.tsx",
    "created_at": "2025-03-24T09:44:21+00:00",
    "commented_code": "+/*\n+  Copyright (c) Microsoft Corporation.\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+      http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+*/\n+\n+import * as React from 'react';\n+import './checkbox.css';\n+\n+export type Check<T> = {\n+    value: T;\n+    set: (value: T) => void;\n+    name: string;\n+    title?: string;\n+};\n+\n+export const CheckBox: React.FunctionComponent<{\n+    checkBoxSettings: Check<boolean>[];",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2009817852",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35203,
        "pr_file": "packages/html-reporter/src/checkbox.tsx",
        "discussion_id": "2009817852",
        "commented_code": "@@ -0,0 +1,47 @@\n+/*\n+  Copyright (c) Microsoft Corporation.\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+      http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+*/\n+\n+import * as React from 'react';\n+import './checkbox.css';\n+\n+export type Check<T> = {\n+    value: T;\n+    set: (value: T) => void;\n+    name: string;\n+    title?: string;\n+};\n+\n+export const CheckBox: React.FunctionComponent<{\n+    checkBoxSettings: Check<boolean>[];",
        "comment_created_at": "2025-03-24T09:44:21+00:00",
        "comment_author": "dgozman",
        "comment_body": "Why are there multiple \"settings\" passed to a single checkbox?",
        "pr_file_module": null
      },
      {
        "comment_id": "2015730153",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35203,
        "pr_file": "packages/html-reporter/src/checkbox.tsx",
        "discussion_id": "2009817852",
        "commented_code": "@@ -0,0 +1,47 @@\n+/*\n+  Copyright (c) Microsoft Corporation.\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+      http://www.apache.org/licenses/LICENSE-2.0\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+*/\n+\n+import * as React from 'react';\n+import './checkbox.css';\n+\n+export type Check<T> = {\n+    value: T;\n+    set: (value: T) => void;\n+    name: string;\n+    title?: string;\n+};\n+\n+export const CheckBox: React.FunctionComponent<{\n+    checkBoxSettings: Check<boolean>[];",
        "comment_created_at": "2025-03-27T06:14:28+00:00",
        "comment_author": "agamjots05",
        "comment_body": "My thought process was to follow the same format as another component utilizing a checkbox style component (DefaultSettingView.tsx) \r\n\r\nHowever, looking at it again I can see what you mean, I plan on removing the 'name' and 'title' attributes from the required prop.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2011978274",
    "pr_number": 35342,
    "pr_file": "packages/html-reporter/src/testFileView.tsx",
    "created_at": "2025-03-25T12:23:17+00:00",
    "commented_code": "function traceBadge(test: TestCaseSummary): JSX.Element | undefined {\n   const firstTraces = test.results.map(result => result.attachments.filter(attachment => attachment.name === 'trace')).filter(traces => traces.length > 0)[0];\n-  return firstTraces ? <Link href={generateTraceUrl(firstTraces)} title='View trace' className='test-file-badge'>{trace()}</Link> : undefined;\n+  if (!firstTraces)\n+    return undefined;\n+\n+  const isFailed = test.outcome === 'unexpected' || test.outcome === 'flaky';\n+\n+  return <Link\n+    href={generateTraceUrl(firstTraces)}\n+    title='View trace'\n+    className={clsx('test-file-badge', isFailed && 'test-file-trace-button')}>\n+    <span className='test-file-trace-button-content'>\n+      {trace()}\n+      {isFailed && <span className='test-file-trace-button-text'>View Trace</span>}",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2011978274",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35342,
        "pr_file": "packages/html-reporter/src/testFileView.tsx",
        "discussion_id": "2011978274",
        "commented_code": "@@ -87,7 +87,20 @@ function videoBadge(test: TestCaseSummary): JSX.Element | undefined {\n \n function traceBadge(test: TestCaseSummary): JSX.Element | undefined {\n   const firstTraces = test.results.map(result => result.attachments.filter(attachment => attachment.name === 'trace')).filter(traces => traces.length > 0)[0];\n-  return firstTraces ? <Link href={generateTraceUrl(firstTraces)} title='View trace' className='test-file-badge'>{trace()}</Link> : undefined;\n+  if (!firstTraces)\n+    return undefined;\n+\n+  const isFailed = test.outcome === 'unexpected' || test.outcome === 'flaky';\n+\n+  return <Link\n+    href={generateTraceUrl(firstTraces)}\n+    title='View trace'\n+    className={clsx('test-file-badge', isFailed && 'test-file-trace-button')}>\n+    <span className='test-file-trace-button-content'>\n+      {trace()}\n+      {isFailed && <span className='test-file-trace-button-text'>View Trace</span>}",
        "comment_created_at": "2025-03-25T12:23:17+00:00",
        "comment_author": "agg23",
        "comment_body": "I don't think this should be conditional. Either we always show the new button, or we never do.",
        "pr_file_module": null
      },
      {
        "comment_id": "2011982993",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35342,
        "pr_file": "packages/html-reporter/src/testFileView.tsx",
        "discussion_id": "2011978274",
        "commented_code": "@@ -87,7 +87,20 @@ function videoBadge(test: TestCaseSummary): JSX.Element | undefined {\n \n function traceBadge(test: TestCaseSummary): JSX.Element | undefined {\n   const firstTraces = test.results.map(result => result.attachments.filter(attachment => attachment.name === 'trace')).filter(traces => traces.length > 0)[0];\n-  return firstTraces ? <Link href={generateTraceUrl(firstTraces)} title='View trace' className='test-file-badge'>{trace()}</Link> : undefined;\n+  if (!firstTraces)\n+    return undefined;\n+\n+  const isFailed = test.outcome === 'unexpected' || test.outcome === 'flaky';\n+\n+  return <Link\n+    href={generateTraceUrl(firstTraces)}\n+    title='View trace'\n+    className={clsx('test-file-badge', isFailed && 'test-file-trace-button')}>\n+    <span className='test-file-trace-button-content'>\n+      {trace()}\n+      {isFailed && <span className='test-file-trace-button-text'>View Trace</span>}",
        "comment_created_at": "2025-03-25T12:26:07+00:00",
        "comment_author": "Skn0tt",
        "comment_body": "I'm worried that if we always show it, we add too much visual clutter so the highlight doesn't stand out anymore.",
        "pr_file_module": null
      },
      {
        "comment_id": "2011986626",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35342,
        "pr_file": "packages/html-reporter/src/testFileView.tsx",
        "discussion_id": "2011978274",
        "commented_code": "@@ -87,7 +87,20 @@ function videoBadge(test: TestCaseSummary): JSX.Element | undefined {\n \n function traceBadge(test: TestCaseSummary): JSX.Element | undefined {\n   const firstTraces = test.results.map(result => result.attachments.filter(attachment => attachment.name === 'trace')).filter(traces => traces.length > 0)[0];\n-  return firstTraces ? <Link href={generateTraceUrl(firstTraces)} title='View trace' className='test-file-badge'>{trace()}</Link> : undefined;\n+  if (!firstTraces)\n+    return undefined;\n+\n+  const isFailed = test.outcome === 'unexpected' || test.outcome === 'flaky';\n+\n+  return <Link\n+    href={generateTraceUrl(firstTraces)}\n+    title='View trace'\n+    className={clsx('test-file-badge', isFailed && 'test-file-trace-button')}>\n+    <span className='test-file-trace-button-content'>\n+      {trace()}\n+      {isFailed && <span className='test-file-trace-button-text'>View Trace</span>}",
        "comment_created_at": "2025-03-25T12:28:20+00:00",
        "comment_author": "agg23",
        "comment_body": "I think it's more important to be consistent. If this must be a way of making individual tests stand out, then the text should not be \"View Trace\" (something about failure probably).",
        "pr_file_module": null
      },
      {
        "comment_id": "2011994909",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35342,
        "pr_file": "packages/html-reporter/src/testFileView.tsx",
        "discussion_id": "2011978274",
        "commented_code": "@@ -87,7 +87,20 @@ function videoBadge(test: TestCaseSummary): JSX.Element | undefined {\n \n function traceBadge(test: TestCaseSummary): JSX.Element | undefined {\n   const firstTraces = test.results.map(result => result.attachments.filter(attachment => attachment.name === 'trace')).filter(traces => traces.length > 0)[0];\n-  return firstTraces ? <Link href={generateTraceUrl(firstTraces)} title='View trace' className='test-file-badge'>{trace()}</Link> : undefined;\n+  if (!firstTraces)\n+    return undefined;\n+\n+  const isFailed = test.outcome === 'unexpected' || test.outcome === 'flaky';\n+\n+  return <Link\n+    href={generateTraceUrl(firstTraces)}\n+    title='View trace'\n+    className={clsx('test-file-badge', isFailed && 'test-file-trace-button')}>\n+    <span className='test-file-trace-button-content'>\n+      {trace()}\n+      {isFailed && <span className='test-file-trace-button-text'>View Trace</span>}",
        "comment_created_at": "2025-03-25T12:33:40+00:00",
        "comment_author": "Skn0tt",
        "comment_body": "Maybe \"View failing Trace\"?",
        "pr_file_module": null
      },
      {
        "comment_id": "2012061444",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35342,
        "pr_file": "packages/html-reporter/src/testFileView.tsx",
        "discussion_id": "2011978274",
        "commented_code": "@@ -87,7 +87,20 @@ function videoBadge(test: TestCaseSummary): JSX.Element | undefined {\n \n function traceBadge(test: TestCaseSummary): JSX.Element | undefined {\n   const firstTraces = test.results.map(result => result.attachments.filter(attachment => attachment.name === 'trace')).filter(traces => traces.length > 0)[0];\n-  return firstTraces ? <Link href={generateTraceUrl(firstTraces)} title='View trace' className='test-file-badge'>{trace()}</Link> : undefined;\n+  if (!firstTraces)\n+    return undefined;\n+\n+  const isFailed = test.outcome === 'unexpected' || test.outcome === 'flaky';\n+\n+  return <Link\n+    href={generateTraceUrl(firstTraces)}\n+    title='View trace'\n+    className={clsx('test-file-badge', isFailed && 'test-file-trace-button')}>\n+    <span className='test-file-trace-button-content'>\n+      {trace()}\n+      {isFailed && <span className='test-file-trace-button-text'>View Trace</span>}",
        "comment_created_at": "2025-03-25T13:10:10+00:00",
        "comment_author": "agg23",
        "comment_body": "Possibly too long, but I guess that's fine. \"View Failing Trace\" though",
        "pr_file_module": null
      }
    ]
  }
]