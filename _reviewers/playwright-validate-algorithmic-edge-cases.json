[
  {
    "discussion_id": "2236000218",
    "pr_number": 36779,
    "pr_file": "packages/playwright/src/reporters/list.ts",
    "created_at": "2025-07-28T11:34:01+00:00",
    "commented_code": "private _testPrefix(index: string, statusMark: string) {\n     const statusMarkLength = stripAnsiEscapes(statusMark).length;\n-    return '  ' + statusMark + ' '.repeat(3 - statusMarkLength) + this.screen.colors.dim(index + ' ');\n+    const indexLength = Math.ceil(Math.log10(this.totalTestCount));",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2236000218",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36779,
        "pr_file": "packages/playwright/src/reporters/list.ts",
        "discussion_id": "2236000218",
        "commented_code": "@@ -245,7 +245,8 @@ class ListReporter extends TerminalReporter {\n \n   private _testPrefix(index: string, statusMark: string) {\n     const statusMarkLength = stripAnsiEscapes(statusMark).length;\n-    return '  ' + statusMark + ' '.repeat(3 - statusMarkLength) + this.screen.colors.dim(index + ' ');\n+    const indexLength = Math.ceil(Math.log10(this.totalTestCount));",
        "comment_created_at": "2025-07-28T11:34:01+00:00",
        "comment_author": "dgozman",
        "comment_body": "I think this does not work for `totalTestCount === 10`, yielding `1`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2236059136",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36779,
        "pr_file": "packages/playwright/src/reporters/list.ts",
        "discussion_id": "2236000218",
        "commented_code": "@@ -245,7 +245,8 @@ class ListReporter extends TerminalReporter {\n \n   private _testPrefix(index: string, statusMark: string) {\n     const statusMarkLength = stripAnsiEscapes(statusMark).length;\n-    return '  ' + statusMark + ' '.repeat(3 - statusMarkLength) + this.screen.colors.dim(index + ' ');\n+    const indexLength = Math.ceil(Math.log10(this.totalTestCount));",
        "comment_created_at": "2025-07-28T11:49:57+00:00",
        "comment_author": "Skn0tt",
        "comment_body": "Oh, good catch! Classic off-by-1 error.\r\n\r\n```suggestion\r\n    const indexLength = Math.ceil(Math.log10(this.totalTestCount + 1));\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2158309739",
    "pr_number": 36316,
    "pr_file": "packages/injected/src/ariaSnapshot.ts",
    "created_at": "2025-06-20T08:10:19+00:00",
    "commented_code": "return;\n \n     const element = node as Element;\n-    let isVisible = !roleUtils.isElementHiddenForAria(element);\n-    if (options?.forAI)\n-      isVisible = isVisible || isElementVisible(element);\n-    if (!isVisible)\n+    if (!isVisible(element, options)) {\n+      // skip this element, but still process its children: https://github.com/w3c/aria/issues/1055\n+      processElement(ariaNode, element, []);",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2158309739",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36316,
        "pr_file": "packages/injected/src/ariaSnapshot.ts",
        "discussion_id": "2158309739",
        "commented_code": "@@ -72,11 +83,11 @@ export function generateAriaTree(rootElement: Element, options?: { forAI?: boole\n       return;\n \n     const element = node as Element;\n-    let isVisible = !roleUtils.isElementHiddenForAria(element);\n-    if (options?.forAI)\n-      isVisible = isVisible || isElementVisible(element);\n-    if (!isVisible)\n+    if (!isVisible(element, options)) {\n+      // skip this element, but still process its children: https://github.com/w3c/aria/issues/1055\n+      processElement(ariaNode, element, []);",
        "comment_created_at": "2025-06-20T08:10:19+00:00",
        "comment_author": "pavelfeldman",
        "comment_body": "I am not sure how this makes sense. Also, you can't process children as if they are visible. And we probably only want this for non-aria visibility.",
        "pr_file_module": null
      },
      {
        "comment_id": "2158360111",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36316,
        "pr_file": "packages/injected/src/ariaSnapshot.ts",
        "discussion_id": "2158309739",
        "commented_code": "@@ -72,11 +83,11 @@ export function generateAriaTree(rootElement: Element, options?: { forAI?: boole\n       return;\n \n     const element = node as Element;\n-    let isVisible = !roleUtils.isElementHiddenForAria(element);\n-    if (options?.forAI)\n-      isVisible = isVisible || isElementVisible(element);\n-    if (!isVisible)\n+    if (!isVisible(element, options)) {\n+      // skip this element, but still process its children: https://github.com/w3c/aria/issues/1055\n+      processElement(ariaNode, element, []);",
        "comment_created_at": "2025-06-20T08:35:38+00:00",
        "comment_author": "Skn0tt",
        "comment_body": "> I am not sure how this makes sense\r\n\r\nHow so? As in, you're surprised how Chromium and this issue interpret the ARIA spec, or as in this code is weird?\r\n\r\n> Also, you can't process children as if they are visible.\r\n\r\nI think we can, because the `isVisible` method takes parent elements into account when determining visibility.\r\n\r\n> we probably only want this for non-aria visibility.\r\n\r\nIt already does so, based on my reading of `isElementHiddenForAria`. I added a test in https://github.com/microsoft/playwright/pull/36316/commits/9775c4a4425eb060a90cd5a3acb53c1d33b3cddc to ensure that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2042817324",
    "pr_number": 35240,
    "pr_file": "packages/playwright-core/src/server/registry/index.ts",
    "created_at": "2025-04-14T19:34:59+00:00",
    "commented_code": "return await installDependenciesLinux(targets, dryRun);\n   }\n \n+  async list() {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2042817324",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35240,
        "pr_file": "packages/playwright-core/src/server/registry/index.ts",
        "discussion_id": "2042817324",
        "commented_code": "@@ -1009,6 +1024,50 @@ export class Registry {\n       return await installDependenciesLinux(targets, dryRun);\n   }\n \n+  async list() {",
        "comment_created_at": "2025-04-14T19:34:59+00:00",
        "comment_author": "pavelfeldman",
        "comment_body": "I'm not sure this is what @dgozman means, but in systems with garbage collection (and we gc unused browsers), traversal and garbage collections are tightly coupled. We should have single traversal logic used in both. Listing installed browsers would be equivalent to running GC in a trial mode (i.e. without deleting the unused browsers). I.e. we already have all the code we need for the traversal, don't add anything new. As a bonus, you can print where each browser is installed.",
        "pr_file_module": null
      },
      {
        "comment_id": "2044481523",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35240,
        "pr_file": "packages/playwright-core/src/server/registry/index.ts",
        "discussion_id": "2042817324",
        "commented_code": "@@ -1009,6 +1024,50 @@ export class Registry {\n       return await installDependenciesLinux(targets, dryRun);\n   }\n \n+  async list() {",
        "comment_created_at": "2025-04-15T13:02:03+00:00",
        "comment_author": "niba",
        "comment_body": "Thanks, I got it. I don't remember exactly why I didn't use the traversal logic from \u2060`validateInstallationCache`, but I assume it was because in \u2060`validateInstallationCache` you are only interested in browser paths. In the `list` I try to group everything by project / installation and get additional information like browser version.\r\n\r\nIf I should reuse the traversal logic and don't change/add anything, then I'm not able to achieve the output that I showed.\r\n\r\nI will try to unify the traversal, and you can decide if that's something you want. If not, then we can revert it.\r\n\r\nbtw I already print the location of every browser",
        "pr_file_module": null
      },
      {
        "comment_id": "2044901854",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35240,
        "pr_file": "packages/playwright-core/src/server/registry/index.ts",
        "discussion_id": "2042817324",
        "commented_code": "@@ -1009,6 +1024,50 @@ export class Registry {\n       return await installDependenciesLinux(targets, dryRun);\n   }\n \n+  async list() {",
        "comment_created_at": "2025-04-15T15:24:08+00:00",
        "comment_author": "niba",
        "comment_body": "I extracted as much as possible, thanks",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2027695951",
    "pr_number": 35481,
    "pr_file": "packages/playwright-core/src/server/injected/ariaSnapshot.ts",
    "created_at": "2025-04-03T20:27:46+00:00",
    "commented_code": "return false;\n     if (!matchesText(node.props.url, template.props?.url))\n       return false;\n-    if (!containsList(node.children || [], template.children || [], depth))\n+    if ((isDeepStrict || template.containerMode === 'deep-equal') && !listEqual(node.children || [], template.children || [], true))",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2027695951",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35481,
        "pr_file": "packages/playwright-core/src/server/injected/ariaSnapshot.ts",
        "discussion_id": "2027695951",
        "commented_code": "@@ -275,22 +275,36 @@ function matchesNode(node: AriaNode | string, template: AriaTemplateNode, depth:\n       return false;\n     if (!matchesText(node.props.url, template.props?.url))\n       return false;\n-    if (!containsList(node.children || [], template.children || [], depth))\n+    if ((isDeepStrict || template.containerMode === 'deep-equal') && !listEqual(node.children || [], template.children || [], true))",
        "comment_created_at": "2025-04-03T20:27:46+00:00",
        "comment_author": "dgozman",
        "comment_body": "Can I opt-out of `deep-equal` by setting `contain` somewhere in the subtree? If so, this one should check that `template.containerMode !== 'contain'`. If not, we should probably throw in such a case.",
        "pr_file_module": null
      },
      {
        "comment_id": "2027698900",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35481,
        "pr_file": "packages/playwright-core/src/server/injected/ariaSnapshot.ts",
        "discussion_id": "2027695951",
        "commented_code": "@@ -275,22 +275,36 @@ function matchesNode(node: AriaNode | string, template: AriaTemplateNode, depth:\n       return false;\n     if (!matchesText(node.props.url, template.props?.url))\n       return false;\n-    if (!containsList(node.children || [], template.children || [], depth))\n+    if ((isDeepStrict || template.containerMode === 'deep-equal') && !listEqual(node.children || [], template.children || [], true))",
        "comment_created_at": "2025-04-03T20:30:14+00:00",
        "comment_author": "pavelfeldman",
        "comment_body": "Sure, I can account for this.",
        "pr_file_module": null
      }
    ]
  }
]