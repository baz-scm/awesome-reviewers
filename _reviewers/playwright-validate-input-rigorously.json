[
  {
    "discussion_id": "2022501317",
    "pr_number": 35430,
    "pr_file": "packages/playwright-core/src/server/injected/roleUtils.ts",
    "created_at": "2025-04-01T09:31:04+00:00",
    "commented_code": "return !legendElement || !legendElement.contains(element);\n }\n \n-function hasExplicitAriaDisabled(element: Element | undefined): boolean {\n+function hasExplicitAriaDisabled(element: Element | undefined, isAncestor = false): boolean {\n   if (!element)\n     return false;\n-  if (kAriaDisabledRoles.includes(getAriaRole(element) || '')) {\n+  if (isAncestor || kAriaDisabledRoles.includes(getAriaRole(element) || '')) {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2022501317",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35430,
        "pr_file": "packages/playwright-core/src/server/injected/roleUtils.ts",
        "discussion_id": "2022501317",
        "commented_code": "@@ -1013,18 +1013,19 @@ function belongsToDisabledFieldSet(element: Element): boolean {\n   return !legendElement || !legendElement.contains(element);\n }\n \n-function hasExplicitAriaDisabled(element: Element | undefined): boolean {\n+function hasExplicitAriaDisabled(element: Element | undefined, isAncestor = false): boolean {\n   if (!element)\n     return false;\n-  if (kAriaDisabledRoles.includes(getAriaRole(element) || '')) {\n+  if (isAncestor || kAriaDisabledRoles.includes(getAriaRole(element) || '')) {",
        "comment_created_at": "2025-04-01T09:31:04+00:00",
        "comment_author": "dgozman",
        "comment_body": "According to https://www.w3.org/TR/wai-aria-1.2/#aria-disabled, aria disabled only applies to elements with a suitable role, when that element or one of the ancestors (no matter the ancestor's role) has `aria-disabled=true`.\r\n\r\nDouble checking with DevTools accessibility panel:\r\n- In the following snippet `<h1>` is not disabled, because it has a `heading` role:\r\n  ```\r\n  <span aria-disabled=\"true\"> <h1>Click me!</h1> </span>\r\n  ```\r\n\r\n- In the following snippet `<button>` is disabled, because it has a suitable `button` role:\r\n  ```\r\n  <span aria-disabled=\"true\"> <button>Click me!</button> </span>\r\n  ```\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2027455591",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35430,
        "pr_file": "packages/playwright-core/src/server/injected/roleUtils.ts",
        "discussion_id": "2022501317",
        "commented_code": "@@ -1013,18 +1013,19 @@ function belongsToDisabledFieldSet(element: Element): boolean {\n   return !legendElement || !legendElement.contains(element);\n }\n \n-function hasExplicitAriaDisabled(element: Element | undefined): boolean {\n+function hasExplicitAriaDisabled(element: Element | undefined, isAncestor = false): boolean {\n   if (!element)\n     return false;\n-  if (kAriaDisabledRoles.includes(getAriaRole(element) || '')) {\n+  if (isAncestor || kAriaDisabledRoles.includes(getAriaRole(element) || '')) {",
        "comment_created_at": "2025-04-03T17:27:35+00:00",
        "comment_author": "pavelfeldman",
        "comment_body": "Why are you saying it all? Ah, you probably want more tests!",
        "pr_file_module": null
      },
      {
        "comment_id": "2242042540",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35430,
        "pr_file": "packages/playwright-core/src/server/injected/roleUtils.ts",
        "discussion_id": "2022501317",
        "commented_code": "@@ -1013,18 +1013,19 @@ function belongsToDisabledFieldSet(element: Element): boolean {\n   return !legendElement || !legendElement.contains(element);\n }\n \n-function hasExplicitAriaDisabled(element: Element | undefined): boolean {\n+function hasExplicitAriaDisabled(element: Element | undefined, isAncestor = false): boolean {\n   if (!element)\n     return false;\n-  if (kAriaDisabledRoles.includes(getAriaRole(element) || '')) {\n+  if (isAncestor || kAriaDisabledRoles.includes(getAriaRole(element) || '')) {",
        "comment_created_at": "2025-07-30T09:21:25+00:00",
        "comment_author": "eeroan",
        "comment_body": "Are you sure this is the expected behavior? Our test started to fail after this change with following test code and  html:\r\n\r\n\r\n```\r\nawait expect(page.getByText('name1')).toBeDisabled()\r\n```\r\n\r\n```\r\n...\r\n<div aria-disabled=\"true\" role=\"option\">\r\n  <span class=\"name\">name1</span>\r\n   <span class=\"description\">description1</span>\r\n</div>\r\n...\r\n```\r\n\r\nThe reason for the failure is that `getByText('name1')` returns a span element which has no suitable role in `kAriaDisabledRoles`. For me it doesn't make sense to add `role=\"option\"`  also for the span element.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2055945918",
    "pr_number": 35705,
    "pr_file": "packages/trace-viewer/src/sw/snapshotRenderer.ts",
    "created_at": "2025-04-23T12:31:58+00:00",
    "commented_code": "});\n }\n \n+// url() inside a <style> tag can mess up with html parsing, so we encode some of them.\n+// As an example, the following url will close the </style> tag:\n+// url('data:image/svg+xml,<svg><defs><style>.a{fill:none}</style></defs><g class=\"a\"></g></svg>')\n+const urlToEscapeRegex1 = /url\\(\\s*'([^']*)'\\s*\\)/ig;\n+const urlToEscapeRegex2 = /url\\(\\s*\"([^\"]*)\"\\s*\\)/ig;\n+function escapeURLsInStyleSheet(text: string): string {\n+  const replacer = (match: string, url: string) => {\n+    // Conservatively encode only urls with a closing tag.",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2055945918",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35705,
        "pr_file": "packages/trace-viewer/src/sw/snapshotRenderer.ts",
        "discussion_id": "2055945918",
        "commented_code": "@@ -618,6 +618,21 @@ function rewriteURLsInStyleSheetForCustomProtocol(text: string): string {\n   });\n }\n \n+// url() inside a <style> tag can mess up with html parsing, so we encode some of them.\n+// As an example, the following url will close the </style> tag:\n+// url('data:image/svg+xml,<svg><defs><style>.a{fill:none}</style></defs><g class=\"a\"></g></svg>')\n+const urlToEscapeRegex1 = /url\\(\\s*'([^']*)'\\s*\\)/ig;\n+const urlToEscapeRegex2 = /url\\(\\s*\"([^\"]*)\"\\s*\\)/ig;\n+function escapeURLsInStyleSheet(text: string): string {\n+  const replacer = (match: string, url: string) => {\n+    // Conservatively encode only urls with a closing tag.",
        "comment_created_at": "2025-04-23T12:31:58+00:00",
        "comment_author": "agg23",
        "comment_body": "Why conservatively? Either the encoding works inside of `<style>` or it doesn't.",
        "pr_file_module": null
      },
      {
        "comment_id": "2055959337",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35705,
        "pr_file": "packages/trace-viewer/src/sw/snapshotRenderer.ts",
        "discussion_id": "2055945918",
        "commented_code": "@@ -618,6 +618,21 @@ function rewriteURLsInStyleSheetForCustomProtocol(text: string): string {\n   });\n }\n \n+// url() inside a <style> tag can mess up with html parsing, so we encode some of them.\n+// As an example, the following url will close the </style> tag:\n+// url('data:image/svg+xml,<svg><defs><style>.a{fill:none}</style></defs><g class=\"a\"></g></svg>')\n+const urlToEscapeRegex1 = /url\\(\\s*'([^']*)'\\s*\\)/ig;\n+const urlToEscapeRegex2 = /url\\(\\s*\"([^\"]*)\"\\s*\\)/ig;\n+function escapeURLsInStyleSheet(text: string): string {\n+  const replacer = (match: string, url: string) => {\n+    // Conservatively encode only urls with a closing tag.",
        "comment_created_at": "2025-04-23T12:38:36+00:00",
        "comment_author": "dgozman",
        "comment_body": "I'd like to be on the safe side and alter the actual content as less a possible. We know that `</` urls are broken anyway, so fixing them is definitely a win.",
        "pr_file_module": null
      }
    ]
  }
]