[
  {
    "discussion_id": "1674103623",
    "pr_number": 30962,
    "pr_file": "packages/playwright/src/program.ts",
    "created_at": "2024-07-11T14:21:22+00:00",
    "commented_code": "retries: options.retries ? parseInt(options.retries, 10) : undefined,\n     reporter: resolveReporterOption(options.reporter),\n     shard: shardPair ? { current: shardPair[0], total: shardPair[1] } : undefined,\n+    shardingMode: options.shardingMode ? options.shardingMode : undefined,",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "1674103623",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 30962,
        "pr_file": "packages/playwright/src/program.ts",
        "discussion_id": "1674103623",
        "commented_code": "@@ -281,6 +285,8 @@ function overridesFromOptions(options: { [key: string]: any }): ConfigCLIOverrid\n     retries: options.retries ? parseInt(options.retries, 10) : undefined,\n     reporter: resolveReporterOption(options.reporter),\n     shard: shardPair ? { current: shardPair[0], total: shardPair[1] } : undefined,\n+    shardingMode: options.shardingMode ? options.shardingMode : undefined,",
        "comment_created_at": "2024-07-11T14:21:22+00:00",
        "comment_author": "dgozman",
        "comment_body": "We should validate that `shardingMode` has one of the supported values.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2120474531",
    "pr_number": 36153,
    "pr_file": "packages/playwright/src/program.ts",
    "created_at": "2025-06-02T08:50:52+00:00",
    "commented_code": "if (options.headed || options.debug)\n     overrides.use = { headless: false };\n   if (!options.ui && options.debug) {\n-    overrides.debug = true;\n-    process.env.PWDEBUG = '1';\n+    if (!['begin', 'end'].includes(options.debug))\n+      throw new Error(`Unsupported debug mode \"${options.debug}\", must be one of \"begin\" or \"end\"`);\n+    overrides.debug = options.debug;\n+    if (overrides.debug === 'begin')\n+      process.env.PWDEBUG = '1';\n+    if (overrides.debug === 'end')\n+      overrides.updateSnapshots = 'none'; // we have no good way of updating snapshots in the end mode, so we disable it.",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2120474531",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 36153,
        "pr_file": "packages/playwright/src/program.ts",
        "discussion_id": "2120474531",
        "commented_code": "@@ -311,8 +315,13 @@ function overridesFromOptions(options: { [key: string]: any }): ConfigCLIOverrid\n   if (options.headed || options.debug)\n     overrides.use = { headless: false };\n   if (!options.ui && options.debug) {\n-    overrides.debug = true;\n-    process.env.PWDEBUG = '1';\n+    if (!['begin', 'end'].includes(options.debug))\n+      throw new Error(`Unsupported debug mode \"${options.debug}\", must be one of \"begin\" or \"end\"`);\n+    overrides.debug = options.debug;\n+    if (overrides.debug === 'begin')\n+      process.env.PWDEBUG = '1';\n+    if (overrides.debug === 'end')\n+      overrides.updateSnapshots = 'none'; // we have no good way of updating snapshots in the end mode, so we disable it.",
        "comment_created_at": "2025-06-02T08:50:52+00:00",
        "comment_author": "dgozman",
        "comment_body": "Let's throw when `-u` is passed explicitly to make this obvious?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2003079910",
    "pr_number": 35229,
    "pr_file": "packages/playwright-core/src/server/injected/injectedScript.ts",
    "created_at": "2025-03-19T11:09:23+00:00",
    "commented_code": "return { received: null, matches: false };\n         received = value;\n       } else if (expression === 'to.have.class') {\n-        received = element.classList.toString();\n+        return {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "2003079910",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 35229,
        "pr_file": "packages/playwright-core/src/server/injected/injectedScript.ts",
        "discussion_id": "2003079910",
        "commented_code": "@@ -1398,7 +1398,10 @@ export class InjectedScript {\n           return { received: null, matches: false };\n         received = value;\n       } else if (expression === 'to.have.class') {\n-        received = element.classList.toString();\n+        return {",
        "comment_created_at": "2025-03-19T11:09:23+00:00",
        "comment_author": "dgozman",
        "comment_body": "Let's throw a nice error when `!options.expectedText`, just in case?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1644752133",
    "pr_number": 31352,
    "pr_file": "packages/playwright/src/program.ts",
    "created_at": "2024-06-18T16:25:40+00:00",
    "commented_code": "return require.resolve(id, { paths: [process.cwd()] });\n }\n \n+class OptionValidators {\n+  static validateWorkers(value: string): string {\n+    if (value.endsWith('%'))\n+      return value;\n+    if (isNaN(parseInt(value, 10)))\n+      throw new InvalidArgumentError('Not a number.');\n+    return value;\n+  }\n+\n+  static validateNumber(value: string): string {\n+    if (isNaN(parseInt(value, 10)))\n+      throw new InvalidArgumentError('Not a number.');\n+    return value;",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "1644752133",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 31352,
        "pr_file": "packages/playwright/src/program.ts",
        "discussion_id": "1644752133",
        "commented_code": "@@ -332,9 +332,34 @@ function resolveReporter(id: string) {\n   return require.resolve(id, { paths: [process.cwd()] });\n }\n \n+class OptionValidators {\n+  static validateWorkers(value: string): string {\n+    if (value.endsWith('%'))\n+      return value;\n+    if (isNaN(parseInt(value, 10)))\n+      throw new InvalidArgumentError('Not a number.');\n+    return value;\n+  }\n+\n+  static validateNumber(value: string): string {\n+    if (isNaN(parseInt(value, 10)))\n+      throw new InvalidArgumentError('Not a number.');\n+    return value;",
        "comment_created_at": "2024-06-18T16:25:40+00:00",
        "comment_author": "dgozman",
        "comment_body": "I think all our numbers are non-negative, so perhaps also check that?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1646438936",
    "pr_number": 31352,
    "pr_file": "packages/playwright/src/program.ts",
    "created_at": "2024-06-19T15:48:42+00:00",
    "commented_code": "return require.resolve(id, { paths: [process.cwd()] });\n }\n \n+class OptionValidators {\n+  static validateNumber(value: string, options: { min?: number, max?: number }): string {\n+    if (/[^0-9]/.test(value))\n+      throw new InvalidArgumentError('Not a number.');\n+    const parsed = parseInt(value, 10);\n+    if (isNaN(parsed))\n+      throw new InvalidArgumentError('Not a number.');\n+    if (options.min !== undefined && parsed < options.min)\n+      throw new InvalidArgumentError(`Expected a number greater than ${options.min}.`);\n+    if (options.max !== undefined && parsed > options.max)\n+      throw new InvalidArgumentError(`Expected a number less than ${options.max}.`);\n+    return value;\n+  }\n+\n+  static validateWorkers(value: string): string {\n+    if (value[value.length - 1] === '%') {\n+      OptionValidators.validateNumber(value, { min: 1, max: 100 });",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "1646438936",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 31352,
        "pr_file": "packages/playwright/src/program.ts",
        "discussion_id": "1646438936",
        "commented_code": "@@ -332,9 +332,39 @@ function resolveReporter(id: string) {\n   return require.resolve(id, { paths: [process.cwd()] });\n }\n \n+class OptionValidators {\n+  static validateNumber(value: string, options: { min?: number, max?: number }): string {\n+    if (/[^0-9]/.test(value))\n+      throw new InvalidArgumentError('Not a number.');\n+    const parsed = parseInt(value, 10);\n+    if (isNaN(parsed))\n+      throw new InvalidArgumentError('Not a number.');\n+    if (options.min !== undefined && parsed < options.min)\n+      throw new InvalidArgumentError(`Expected a number greater than ${options.min}.`);\n+    if (options.max !== undefined && parsed > options.max)\n+      throw new InvalidArgumentError(`Expected a number less than ${options.max}.`);\n+    return value;\n+  }\n+\n+  static validateWorkers(value: string): string {\n+    if (value[value.length - 1] === '%') {\n+      OptionValidators.validateNumber(value, { min: 1, max: 100 });",
        "comment_created_at": "2024-06-19T15:48:42+00:00",
        "comment_author": "dgozman",
        "comment_body": "```suggestion\r\n      OptionValidators.validateNumber(value.slice(0, -1), { min: 1, max: 100 });\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1646444484",
    "pr_number": 31352,
    "pr_file": "packages/playwright/src/program.ts",
    "created_at": "2024-06-19T15:51:05+00:00",
    "commented_code": "return require.resolve(id, { paths: [process.cwd()] });\n }\n \n+class OptionValidators {\n+  static validateNumber(value: string, options: { min?: number, max?: number }): string {\n+    if (/[^0-9]/.test(value))\n+      throw new InvalidArgumentError('Not a number.');\n+    const parsed = parseInt(value, 10);\n+    if (isNaN(parsed))\n+      throw new InvalidArgumentError('Not a number.');\n+    if (options.min !== undefined && parsed < options.min)\n+      throw new InvalidArgumentError(`Expected a number greater than ${options.min}.`);\n+    if (options.max !== undefined && parsed > options.max)\n+      throw new InvalidArgumentError(`Expected a number less than ${options.max}.`);\n+    return value;\n+  }\n+\n+  static validateWorkers(value: string): string {\n+    if (value[value.length - 1] === '%') {",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "1646444484",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 31352,
        "pr_file": "packages/playwright/src/program.ts",
        "discussion_id": "1646444484",
        "commented_code": "@@ -332,9 +332,39 @@ function resolveReporter(id: string) {\n   return require.resolve(id, { paths: [process.cwd()] });\n }\n \n+class OptionValidators {\n+  static validateNumber(value: string, options: { min?: number, max?: number }): string {\n+    if (/[^0-9]/.test(value))\n+      throw new InvalidArgumentError('Not a number.');\n+    const parsed = parseInt(value, 10);\n+    if (isNaN(parsed))\n+      throw new InvalidArgumentError('Not a number.');\n+    if (options.min !== undefined && parsed < options.min)\n+      throw new InvalidArgumentError(`Expected a number greater than ${options.min}.`);\n+    if (options.max !== undefined && parsed > options.max)\n+      throw new InvalidArgumentError(`Expected a number less than ${options.max}.`);\n+    return value;\n+  }\n+\n+  static validateWorkers(value: string): string {\n+    if (value[value.length - 1] === '%') {",
        "comment_created_at": "2024-06-19T15:51:05+00:00",
        "comment_author": "dgozman",
        "comment_body": "If you would like this to be really nice, we can print a better error message, e.g. `Expected a percentage between 1% and 100%`. Similarly in other places.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1646445684",
    "pr_number": 31352,
    "pr_file": "packages/playwright/src/program.ts",
    "created_at": "2024-06-19T15:51:38+00:00",
    "commented_code": "['--ignore-snapshots', `Ignore screenshot and snapshot expectations`],\n   ['--last-failed', `Only re-run the failures`],\n   ['--list', `Collect all the tests and report them, but do not run`],\n-  ['--max-failures <N>', `Stop after the first N failures`],\n+  ['--max-failures <N>', `Stop after the first N failures`, value => OptionValidators.validateNumber(value, { min: 0 })],\n   ['--no-deps', 'Do not run project dependencies'],\n   ['--output <dir>', `Folder for output artifacts (default: \"test-results\")`],\n   ['--pass-with-no-tests', `Makes test run succeed even if no tests were found`],\n   ['--project <project-name...>', `Only run tests from the specified list of projects, supports '*' wildcard (default: run all projects)`],\n   ['--quiet', `Suppress stdio`],\n-  ['--repeat-each <N>', `Run each test N times (default: 1)`],\n+  ['--repeat-each <N>', `Run each test N times (default: 1)`, value => OptionValidators.validateNumber(value, { min: 0 })],",
    "repo_full_name": "microsoft/playwright",
    "discussion_comments": [
      {
        "comment_id": "1646445684",
        "repo_full_name": "microsoft/playwright",
        "pr_number": 31352,
        "pr_file": "packages/playwright/src/program.ts",
        "discussion_id": "1646445684",
        "commented_code": "@@ -348,23 +378,23 @@ const testOptions: [string, string][] = [\n   ['--ignore-snapshots', `Ignore screenshot and snapshot expectations`],\n   ['--last-failed', `Only re-run the failures`],\n   ['--list', `Collect all the tests and report them, but do not run`],\n-  ['--max-failures <N>', `Stop after the first N failures`],\n+  ['--max-failures <N>', `Stop after the first N failures`, value => OptionValidators.validateNumber(value, { min: 0 })],\n   ['--no-deps', 'Do not run project dependencies'],\n   ['--output <dir>', `Folder for output artifacts (default: \"test-results\")`],\n   ['--pass-with-no-tests', `Makes test run succeed even if no tests were found`],\n   ['--project <project-name...>', `Only run tests from the specified list of projects, supports '*' wildcard (default: run all projects)`],\n   ['--quiet', `Suppress stdio`],\n-  ['--repeat-each <N>', `Run each test N times (default: 1)`],\n+  ['--repeat-each <N>', `Run each test N times (default: 1)`, value => OptionValidators.validateNumber(value, { min: 0 })],",
        "comment_created_at": "2024-06-19T15:51:38+00:00",
        "comment_author": "dgozman",
        "comment_body": "```suggestion\r\n  ['--repeat-each <N>', `Run each test N times (default: 1)`, value => OptionValidators.validateNumber(value, { min: 1 })],\r\n```",
        "pr_file_module": null
      }
    ]
  }
]