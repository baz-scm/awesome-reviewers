[
  {
    "discussion_id": "1174051213",
    "pr_number": 7825,
    "pr_file": "pyproject.toml",
    "created_at": "2023-04-21T18:18:18+00:00",
    "commented_code": "build-backend = \"poetry.core.masonry.api\"\n \n \n+[tool.ruff]\n+fix = true\n+target-version = \"py37\"\n+line-length = 88\n+extend-select = [\n+    \"B\",  # flake8-bugbear\n+    \"ANN\",  # flake8-annotations",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1174051213",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7825,
        "pr_file": "pyproject.toml",
        "discussion_id": "1174051213",
        "commented_code": "@@ -122,6 +122,46 @@ requires = [\"poetry-core>=1.1.0\"]\n build-backend = \"poetry.core.masonry.api\"\n \n \n+[tool.ruff]\n+fix = true\n+target-version = \"py37\"\n+line-length = 88\n+extend-select = [\n+    \"B\",  # flake8-bugbear\n+    \"ANN\",  # flake8-annotations",
        "comment_created_at": "2023-04-21T18:18:18+00:00",
        "comment_author": "dimbleby",
        "comment_body": "suggestion, don't bother with `ANN`\r\n\r\nby the time you've removed all the lints that mypy doesn't care about... might just as well use mypy!",
        "pr_file_module": null
      },
      {
        "comment_id": "1174068149",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7825,
        "pr_file": "pyproject.toml",
        "discussion_id": "1174051213",
        "commented_code": "@@ -122,6 +122,46 @@ requires = [\"poetry-core>=1.1.0\"]\n build-backend = \"poetry.core.masonry.api\"\n \n \n+[tool.ruff]\n+fix = true\n+target-version = \"py37\"\n+line-length = 88\n+extend-select = [\n+    \"B\",  # flake8-bugbear\n+    \"ANN\",  # flake8-annotations",
        "comment_created_at": "2023-04-21T18:40:44+00:00",
        "comment_author": "finswimmer",
        "comment_body": "Agreed \ud83d\udc4d Since we are using the `strict` mode of `mypy`, `flake8-annotations` doesn't add any value anymore.",
        "pr_file_module": null
      },
      {
        "comment_id": "1174634288",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7825,
        "pr_file": "pyproject.toml",
        "discussion_id": "1174051213",
        "commented_code": "@@ -122,6 +122,46 @@ requires = [\"poetry-core>=1.1.0\"]\n build-backend = \"poetry.core.masonry.api\"\n \n \n+[tool.ruff]\n+fix = true\n+target-version = \"py37\"\n+line-length = 88\n+extend-select = [\n+    \"B\",  # flake8-bugbear\n+    \"ANN\",  # flake8-annotations",
        "comment_created_at": "2023-04-23T19:50:28+00:00",
        "comment_author": "Secrus",
        "comment_body": "removed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1174053910",
    "pr_number": 7825,
    "pr_file": "pyproject.toml",
    "created_at": "2023-04-21T18:22:09+00:00",
    "commented_code": "build-backend = \"poetry.core.masonry.api\"\n \n \n+[tool.ruff]\n+fix = true\n+target-version = \"py37\"\n+line-length = 88\n+extend-select = [\n+    \"B\",  # flake8-bugbear\n+    \"ANN\",  # flake8-annotations\n+    \"C4\",  # flake8-comprehensions\n+    \"ERA\",  # flake8-eradicate/eradicate\n+    \"PIE\",  # flake8-pie\n+    \"Q\",  # flake8-quotes",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1174053910",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7825,
        "pr_file": "pyproject.toml",
        "discussion_id": "1174053910",
        "commented_code": "@@ -122,6 +122,46 @@ requires = [\"poetry-core>=1.1.0\"]\n build-backend = \"poetry.core.masonry.api\"\n \n \n+[tool.ruff]\n+fix = true\n+target-version = \"py37\"\n+line-length = 88\n+extend-select = [\n+    \"B\",  # flake8-bugbear\n+    \"ANN\",  # flake8-annotations\n+    \"C4\",  # flake8-comprehensions\n+    \"ERA\",  # flake8-eradicate/eradicate\n+    \"PIE\",  # flake8-pie\n+    \"Q\",  # flake8-quotes",
        "comment_created_at": "2023-04-21T18:22:09+00:00",
        "comment_author": "dimbleby",
        "comment_body": "similar suggestion: don't bother with `Q`.  black takes care of such things.",
        "pr_file_module": null
      },
      {
        "comment_id": "1174068584",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7825,
        "pr_file": "pyproject.toml",
        "discussion_id": "1174053910",
        "commented_code": "@@ -122,6 +122,46 @@ requires = [\"poetry-core>=1.1.0\"]\n build-backend = \"poetry.core.masonry.api\"\n \n \n+[tool.ruff]\n+fix = true\n+target-version = \"py37\"\n+line-length = 88\n+extend-select = [\n+    \"B\",  # flake8-bugbear\n+    \"ANN\",  # flake8-annotations\n+    \"C4\",  # flake8-comprehensions\n+    \"ERA\",  # flake8-eradicate/eradicate\n+    \"PIE\",  # flake8-pie\n+    \"Q\",  # flake8-quotes",
        "comment_created_at": "2023-04-21T18:41:17+00:00",
        "comment_author": "finswimmer",
        "comment_body": "\ud83d\udcaf ",
        "pr_file_module": null
      },
      {
        "comment_id": "1174634295",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7825,
        "pr_file": "pyproject.toml",
        "discussion_id": "1174053910",
        "commented_code": "@@ -122,6 +122,46 @@ requires = [\"poetry-core>=1.1.0\"]\n build-backend = \"poetry.core.masonry.api\"\n \n \n+[tool.ruff]\n+fix = true\n+target-version = \"py37\"\n+line-length = 88\n+extend-select = [\n+    \"B\",  # flake8-bugbear\n+    \"ANN\",  # flake8-annotations\n+    \"C4\",  # flake8-comprehensions\n+    \"ERA\",  # flake8-eradicate/eradicate\n+    \"PIE\",  # flake8-pie\n+    \"Q\",  # flake8-quotes",
        "comment_created_at": "2023-04-23T19:50:36+00:00",
        "comment_author": "Secrus",
        "comment_body": "removed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1181124689",
    "pr_number": 7850,
    "pr_file": "pyproject.toml",
    "created_at": "2023-04-29T20:29:38+00:00",
    "commented_code": "[tool.ruff.flake8-tidy-imports]\n ban-relative-imports = \"all\"\n \n-\n-[tool.isort]\n-py_version = 37\n-profile = \"black\"\n-force_single_line = true\n-combine_as_imports = true\n-lines_between_types = 1\n-lines_after_imports = 2\n-src_paths = [\"src\", \"tests\"]\n-extend_skip = [\"setup.py\"]\n-known_third_party = [\"poetry.core\"]\n+[tool.ruff.isort]\n+force-single-line = true\n+combine-as-imports = true\n+lines-between-types = 1\n+lines-after-imports = 2\n+known-first-party = [\"poetry\"]\n+known-third-party = [\"poetry.core\"]\n+required-imports = [\"from __future__ import annotations\"]\n+section-order = [\n+    \"future\",\n+    \"standard-library\",\n+    \"third-party\",\n+    \"first-party\",\n+    \"local-folder\"\n+]",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1181124689",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7850,
        "pr_file": "pyproject.toml",
        "discussion_id": "1181124689",
        "commented_code": "@@ -156,17 +159,21 @@ extend-exclude = [\n [tool.ruff.flake8-tidy-imports]\n ban-relative-imports = \"all\"\n \n-\n-[tool.isort]\n-py_version = 37\n-profile = \"black\"\n-force_single_line = true\n-combine_as_imports = true\n-lines_between_types = 1\n-lines_after_imports = 2\n-src_paths = [\"src\", \"tests\"]\n-extend_skip = [\"setup.py\"]\n-known_third_party = [\"poetry.core\"]\n+[tool.ruff.isort]\n+force-single-line = true\n+combine-as-imports = true\n+lines-between-types = 1\n+lines-after-imports = 2\n+known-first-party = [\"poetry\"]\n+known-third-party = [\"poetry.core\"]\n+required-imports = [\"from __future__ import annotations\"]\n+section-order = [\n+    \"future\",\n+    \"standard-library\",\n+    \"third-party\",\n+    \"first-party\",\n+    \"local-folder\"\n+]",
        "comment_created_at": "2023-04-29T20:29:38+00:00",
        "comment_author": "radoering",
        "comment_body": "```suggestion\r\n```\r\n\r\nThis seems to be the default order, so we don't have to configure it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1181131707",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7850,
        "pr_file": "pyproject.toml",
        "discussion_id": "1181124689",
        "commented_code": "@@ -156,17 +159,21 @@ extend-exclude = [\n [tool.ruff.flake8-tidy-imports]\n ban-relative-imports = \"all\"\n \n-\n-[tool.isort]\n-py_version = 37\n-profile = \"black\"\n-force_single_line = true\n-combine_as_imports = true\n-lines_between_types = 1\n-lines_after_imports = 2\n-src_paths = [\"src\", \"tests\"]\n-extend_skip = [\"setup.py\"]\n-known_third_party = [\"poetry.core\"]\n+[tool.ruff.isort]\n+force-single-line = true\n+combine-as-imports = true\n+lines-between-types = 1\n+lines-after-imports = 2\n+known-first-party = [\"poetry\"]\n+known-third-party = [\"poetry.core\"]\n+required-imports = [\"from __future__ import annotations\"]\n+section-order = [\n+    \"future\",\n+    \"standard-library\",\n+    \"third-party\",\n+    \"first-party\",\n+    \"local-folder\"\n+]",
        "comment_created_at": "2023-04-29T21:38:56+00:00",
        "comment_author": "Secrus",
        "comment_body": "According to the [documentation](https://beta.ruff.rs/docs/settings/#section-order) by default this value is empty.",
        "pr_file_module": null
      },
      {
        "comment_id": "1181189758",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7850,
        "pr_file": "pyproject.toml",
        "discussion_id": "1181124689",
        "commented_code": "@@ -156,17 +159,21 @@ extend-exclude = [\n [tool.ruff.flake8-tidy-imports]\n ban-relative-imports = \"all\"\n \n-\n-[tool.isort]\n-py_version = 37\n-profile = \"black\"\n-force_single_line = true\n-combine_as_imports = true\n-lines_between_types = 1\n-lines_after_imports = 2\n-src_paths = [\"src\", \"tests\"]\n-extend_skip = [\"setup.py\"]\n-known_third_party = [\"poetry.core\"]\n+[tool.ruff.isort]\n+force-single-line = true\n+combine-as-imports = true\n+lines-between-types = 1\n+lines-after-imports = 2\n+known-first-party = [\"poetry\"]\n+known-third-party = [\"poetry.core\"]\n+required-imports = [\"from __future__ import annotations\"]\n+section-order = [\n+    \"future\",\n+    \"standard-library\",\n+    \"third-party\",\n+    \"first-party\",\n+    \"local-folder\"\n+]",
        "comment_created_at": "2023-04-30T08:33:46+00:00",
        "comment_author": "radoering",
        "comment_body": "The [documentation of isort](https://pycqa.github.io/isort/docs/configuration/custom_sections_and_ordering.html) seems to be better in this point:\r\n\r\n> You can change the section order with sections option from the default of:\r\n> \r\n> `FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER`\r\n\r\nI'm not good at Rust but after some trial and error and code spelunking, I'd say ruff does the same:\r\n[ImportType Enum](https://github.com/charliermarsh/ruff/blob/64b7280eb824d0e5f9da887e82dcda53838dd38d/crates/ruff/src/rules/isort/categorize.rs#L35C1-L41)\r\n[Default order 1](https://github.com/charliermarsh/ruff/blob/64b7280eb824d0e5f9da887e82dcda53838dd38d/crates/ruff/src/rules/isort/settings.rs#LL343C83-L343C83)\r\n[Default order 2](https://github.com/charliermarsh/ruff/blob/64b7280eb824d0e5f9da887e82dcda53838dd38d/crates/ruff/src/rules/isort/settings.rs#L351-L353)",
        "pr_file_module": null
      }
    ]
  }
]