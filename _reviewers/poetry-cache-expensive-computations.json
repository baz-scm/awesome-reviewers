[
  {
    "discussion_id": "1501795976",
    "pr_number": 9014,
    "pr_file": "src/poetry/utils/env/base_env.py",
    "created_at": "2024-02-25T11:02:11+00:00",
    "commented_code": "return self._paths\n \n+    @property",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1501795976",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9014,
        "pr_file": "src/poetry/utils/env/base_env.py",
        "discussion_id": "1501795976",
        "commented_code": "@@ -242,6 +244,41 @@ def paths(self) -> dict[str, str]:\n \n         return self._paths\n \n+    @property",
        "comment_created_at": "2024-02-25T11:02:11+00:00",
        "comment_author": "radoering",
        "comment_body": "We may use `@cached_property` instead so we don't need `_installer_scheme_dict`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1170798550",
    "pr_number": 7415,
    "pr_file": "src/poetry/console/commands/show.py",
    "created_at": "2023-04-19T04:39:09+00:00",
    "commented_code": "color = \"cyan\"\n             name = locked.pretty_name\n             install_marker = \"\"\n+\n+            if self.option(\"top-level\") and not any(\n+                locked.is_same_package_as(r) for r in root.all_requires",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1170798550",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7415,
        "pr_file": "src/poetry/console/commands/show.py",
        "discussion_id": "1170798550",
        "commented_code": "@@ -300,6 +315,12 @@ def _display_packages_information(\n             color = \"cyan\"\n             name = locked.pretty_name\n             install_marker = \"\"\n+\n+            if self.option(\"top-level\") and not any(\n+                locked.is_same_package_as(r) for r in root.all_requires",
        "comment_created_at": "2023-04-19T04:39:09+00:00",
        "comment_author": "radoering",
        "comment_body": "One more thing: Since `all_requires` is not an attribute but a property that iterates over groups and dependencies we should store it in a local variable outside of the loop so we have to calculate it just once. Further, I'd do the same for `self.option(\"top-level\")`. It's not consistent for all options, but it's done for some options at least.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1305863902",
    "pr_number": 8359,
    "pr_file": "src/poetry/utils/env/virtual_env.py",
    "created_at": "2023-08-25T16:11:01+00:00",
    "commented_code": "def _updated_path(self) -> str:\n         return os.pathsep.join([str(self._bin_dir), os.environ.get(\"PATH\", \"\")])\n+\n+    def includes_system_site_packages(self) -> bool:\n+        pyvenv_cfg = self._path / \"pyvenv.cfg\"\n+        return \"include-system-site-packages = true\" in pyvenv_cfg.read_text()",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1305863902",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8359,
        "pr_file": "src/poetry/utils/env/virtual_env.py",
        "discussion_id": "1305863902",
        "commented_code": "@@ -133,3 +135,14 @@ def temp_environ(self) -> Iterator[None]:\n \n     def _updated_path(self) -> str:\n         return os.pathsep.join([str(self._bin_dir), os.environ.get(\"PATH\", \"\")])\n+\n+    def includes_system_site_packages(self) -> bool:\n+        pyvenv_cfg = self._path / \"pyvenv.cfg\"\n+        return \"include-system-site-packages = true\" in pyvenv_cfg.read_text()",
        "comment_created_at": "2023-08-25T16:11:01+00:00",
        "comment_author": "radoering",
        "comment_body": "Maybe, we should make this a `cached_property` since this should not change during one invocation of poetry. Now, we are reading `pyvenv.cfg` once for each package.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "289609892",
    "pr_number": 955,
    "pr_file": "poetry/repositories/pypi_repository.py",
    "created_at": "2019-06-01T15:50:34+00:00",
    "commented_code": "return info\n \n             if platform_specific_wheels and \"sdist\" not in urls:\n-                # Pick the first wheel available and hope for the best\n-                return self._get_info_from_wheel(platform_specific_wheels[0])\n+                # Attempt to select the best platform-specific wheel\n+                best_wheel = self._pick_platform_specific_wheel(\n+                    platform_specific_wheels\n+                )\n+                return self._get_info_from_wheel(best_wheel)\n \n         return self._get_info_from_sdist(urls[\"sdist\"][0])\n \n+    def get_sys_info(self):  # type: () -> Dict[str, str]",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "289609892",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 955,
        "pr_file": "poetry/repositories/pypi_repository.py",
        "discussion_id": "289609892",
        "commented_code": "@@ -421,11 +431,74 @@ def _get_info_from_urls(\n                 return info\n \n             if platform_specific_wheels and \"sdist\" not in urls:\n-                # Pick the first wheel available and hope for the best\n-                return self._get_info_from_wheel(platform_specific_wheels[0])\n+                # Attempt to select the best platform-specific wheel\n+                best_wheel = self._pick_platform_specific_wheel(\n+                    platform_specific_wheels\n+                )\n+                return self._get_info_from_wheel(best_wheel)\n \n         return self._get_info_from_sdist(urls[\"sdist\"][0])\n \n+    def get_sys_info(self):  # type: () -> Dict[str, str]",
        "comment_created_at": "2019-06-01T15:50:34+00:00",
        "comment_author": "kbakk",
        "comment_body": "could sys_info be a property on class `PyPiRepository`, or `Repository`? Given that it may be used elsewhere, this could prevent a few calls (not that they are very expensive). ",
        "pr_file_module": null
      },
      {
        "comment_id": "289612226",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 955,
        "pr_file": "poetry/repositories/pypi_repository.py",
        "discussion_id": "289609892",
        "commented_code": "@@ -421,11 +431,74 @@ def _get_info_from_urls(\n                 return info\n \n             if platform_specific_wheels and \"sdist\" not in urls:\n-                # Pick the first wheel available and hope for the best\n-                return self._get_info_from_wheel(platform_specific_wheels[0])\n+                # Attempt to select the best platform-specific wheel\n+                best_wheel = self._pick_platform_specific_wheel(\n+                    platform_specific_wheels\n+                )\n+                return self._get_info_from_wheel(best_wheel)\n \n         return self._get_info_from_sdist(urls[\"sdist\"][0])\n \n+    def get_sys_info(self):  # type: () -> Dict[str, str]",
        "comment_created_at": "2019-06-01T17:03:53+00:00",
        "comment_author": "KyleKing",
        "comment_body": "@KeltonKarboviak, thanks for the input. I reviewed the code base and I think that setting `sys_info` as a class property will actually be less performant. As far as I can tell, `PyPiRepository` is always initialized when used (the class and properties aren't reused), which means that if `sys_info` is a class property, then those functions will be called for each class instance/repository. However, the local hardware information is only needed for a subset of python repositories that otherwise can't be identified. When the hardware information is needed, it is only called once before looping through the potential wheel file names\r\n\r\nLet me know if there is a something I overlooked. I already staged code changes, so this would be easy to implement",
        "pr_file_module": null
      },
      {
        "comment_id": "289614556",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 955,
        "pr_file": "poetry/repositories/pypi_repository.py",
        "discussion_id": "289609892",
        "commented_code": "@@ -421,11 +431,74 @@ def _get_info_from_urls(\n                 return info\n \n             if platform_specific_wheels and \"sdist\" not in urls:\n-                # Pick the first wheel available and hope for the best\n-                return self._get_info_from_wheel(platform_specific_wheels[0])\n+                # Attempt to select the best platform-specific wheel\n+                best_wheel = self._pick_platform_specific_wheel(\n+                    platform_specific_wheels\n+                )\n+                return self._get_info_from_wheel(best_wheel)\n \n         return self._get_info_from_sdist(urls[\"sdist\"][0])\n \n+    def get_sys_info(self):  # type: () -> Dict[str, str]",
        "comment_created_at": "2019-06-01T18:25:36+00:00",
        "comment_author": "kbakk",
        "comment_body": "@KyleKing I was thinking in the lines of this, which would only be called when cls().sys_info is called.\r\n\r\n```python\r\n@property\r\ndef sys_info(self):  # type: () -> Dict[str, str]\r\n    # Return system information. Can be overridden for testing\r\n    if self._sys_info:\r\n        return self._sys_info\r\n    self._sys_info = {\r\n        \"plat\": platform.system().lower(),\r\n        \"is32bit\": sys.maxsize <= 2 ** 32,\r\n        \"imp_name\": sys.implementation.name,\r\n        \"pyver\": platform.python_version_tuple(),\r\n    }\r\n    return self._sys_info\r\n```\r\n\r\nYou would need to update \r\n\r\nhttps://github.com/sdispater/poetry/blob/41b321f990bd66e3053f76585f75188e629ec890/tests/repositories/test_pypi_repository.py#L53\r\n\r\nhttps://github.com/sdispater/poetry/blob/41b321f990bd66e3053f76585f75188e629ec890/poetry/repositories/pypi_repository.py#L454",
        "pr_file_module": null
      },
      {
        "comment_id": "289622173",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 955,
        "pr_file": "poetry/repositories/pypi_repository.py",
        "discussion_id": "289609892",
        "commented_code": "@@ -421,11 +431,74 @@ def _get_info_from_urls(\n                 return info\n \n             if platform_specific_wheels and \"sdist\" not in urls:\n-                # Pick the first wheel available and hope for the best\n-                return self._get_info_from_wheel(platform_specific_wheels[0])\n+                # Attempt to select the best platform-specific wheel\n+                best_wheel = self._pick_platform_specific_wheel(\n+                    platform_specific_wheels\n+                )\n+                return self._get_info_from_wheel(best_wheel)\n \n         return self._get_info_from_sdist(urls[\"sdist\"][0])\n \n+    def get_sys_info(self):  # type: () -> Dict[str, str]",
        "comment_created_at": "2019-06-02T00:16:24+00:00",
        "comment_author": "KyleKing",
        "comment_body": "Oh you're right, thanks!",
        "pr_file_module": null
      }
    ]
  }
]