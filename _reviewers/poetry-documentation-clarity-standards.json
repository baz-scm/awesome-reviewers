[
  {
    "discussion_id": "1701493048",
    "pr_number": 9572,
    "pr_file": "docs/pyproject.md",
    "created_at": "2024-08-02T08:26:43+00:00",
    "commented_code": "When a script is added or updated, run `poetry install` to make them available in the project's virtualenv.\n {{% /note %}}\n \n+```toml\n+[tool.poetry.scripts]\n+my_executable = { reference = \"some_binary.exe\", type = \"file\" }\n+```\n+\n+With this configuration, the file `some_binary.exe` is looked for in the directory of the active `pyproject.toml` and copied into the installation folder.\n+On Windows, the `.exe` extension is added to the file and the file will be placed in the `Scripts/` directory.\n+On Linux no extension is added and the destination is `bin/`.",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1701493048",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9572,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1701493048",
        "commented_code": "@@ -375,6 +375,15 @@ Here, we will have the `my_package_cli` script installed which will execute the\n When a script is added or updated, run `poetry install` to make them available in the project's virtualenv.\n {{% /note %}}\n \n+```toml\n+[tool.poetry.scripts]\n+my_executable = { reference = \"some_binary.exe\", type = \"file\" }\n+```\n+\n+With this configuration, the file `some_binary.exe` is looked for in the directory of the active `pyproject.toml` and copied into the installation folder.\n+On Windows, the `.exe` extension is added to the file and the file will be placed in the `Scripts/` directory.\n+On Linux no extension is added and the destination is `bin/`.",
        "comment_created_at": "2024-08-02T08:26:43+00:00",
        "comment_author": "nbaju1",
        "comment_body": "```suggestion\r\n* On Windows, the `.exe` extension is added to the file, and is placed in the `Scripts/` directory.\r\n* On Linux no extension is added, and is placed in the `bin/` directory.\r\n```\r\n\r\nFor better readability, perhaps?",
        "pr_file_module": null
      },
      {
        "comment_id": "1706215767",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9572,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1701493048",
        "commented_code": "@@ -375,6 +375,15 @@ Here, we will have the `my_package_cli` script installed which will execute the\n When a script is added or updated, run `poetry install` to make them available in the project's virtualenv.\n {{% /note %}}\n \n+```toml\n+[tool.poetry.scripts]\n+my_executable = { reference = \"some_binary.exe\", type = \"file\" }\n+```\n+\n+With this configuration, the file `some_binary.exe` is looked for in the directory of the active `pyproject.toml` and copied into the installation folder.\n+On Windows, the `.exe` extension is added to the file and the file will be placed in the `Scripts/` directory.\n+On Linux no extension is added and the destination is `bin/`.",
        "comment_created_at": "2024-08-06T23:38:05+00:00",
        "comment_author": "dimbleby",
        "comment_body": "This is ungrammatical.  \"The '.exe' extension... is placed in the 'Scripts/' directory\" is not what you intend.",
        "pr_file_module": null
      },
      {
        "comment_id": "1706250923",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9572,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1701493048",
        "commented_code": "@@ -375,6 +375,15 @@ Here, we will have the `my_package_cli` script installed which will execute the\n When a script is added or updated, run `poetry install` to make them available in the project's virtualenv.\n {{% /note %}}\n \n+```toml\n+[tool.poetry.scripts]\n+my_executable = { reference = \"some_binary.exe\", type = \"file\" }\n+```\n+\n+With this configuration, the file `some_binary.exe` is looked for in the directory of the active `pyproject.toml` and copied into the installation folder.\n+On Windows, the `.exe` extension is added to the file and the file will be placed in the `Scripts/` directory.\n+On Linux no extension is added and the destination is `bin/`.",
        "comment_created_at": "2024-08-07T00:48:34+00:00",
        "comment_author": "evilhamsterman",
        "comment_body": "I agree the readability of this is not optimal. From the way it is currently described the full paragraph seems to imply that on Windows you'd end up with `some_file.exe.exe`\r\n\r\n> With this configuration, the file `some_binary.exe` is looked for in the directory....On Windows, the `.exe` extension is added to the file\r\n\r\nPerhaps something like this\r\n> Poetry will look for the referenced file in the directory of the active project and then copied to the OS installation directory.\r\n> * On Windows the `.exe` extension is added to the file and it is copied to the Python Scripts directory\r\n> * On *nix systems the file will be copied to the environment `bin` directory ",
        "pr_file_module": null
      },
      {
        "comment_id": "1721455863",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9572,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1701493048",
        "commented_code": "@@ -375,6 +375,15 @@ Here, we will have the `my_package_cli` script installed which will execute the\n When a script is added or updated, run `poetry install` to make them available in the project's virtualenv.\n {{% /note %}}\n \n+```toml\n+[tool.poetry.scripts]\n+my_executable = { reference = \"some_binary.exe\", type = \"file\" }\n+```\n+\n+With this configuration, the file `some_binary.exe` is looked for in the directory of the active `pyproject.toml` and copied into the installation folder.\n+On Windows, the `.exe` extension is added to the file and the file will be placed in the `Scripts/` directory.\n+On Linux no extension is added and the destination is `bin/`.",
        "comment_created_at": "2024-08-19T09:07:01+00:00",
        "comment_author": "RobertoRoos",
        "comment_body": "Updates the text. The `.exe` bit was weird indeed, it should read clearly now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1807312972",
    "pr_number": 9763,
    "pr_file": "docs/managing-environments.md",
    "created_at": "2024-10-19T12:38:07+00:00",
    "commented_code": "poetry env use system\n ```\n \n+## Activating the environment\n+\n+`poetry env activate` command prints the activate command to the console. This way you won't leave the current shell.\n+You can then feed the output to `eval` to activate the environment. This way is the closest to manually activating the environment.",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1807312972",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9763,
        "pr_file": "docs/managing-environments.md",
        "discussion_id": "1807312972",
        "commented_code": "@@ -76,6 +76,41 @@ special `system` Python version to retrieve the default behavior:\n poetry env use system\n ```\n \n+## Activating the environment\n+\n+`poetry env activate` command prints the activate command to the console. This way you won't leave the current shell.\n+You can then feed the output to `eval` to activate the environment. This way is the closest to manually activating the environment.",
        "comment_created_at": "2024-10-19T12:38:07+00:00",
        "comment_author": "radoering",
        "comment_body": "I would restructure the text a bit and do not refer to `eval` but \"the eval command of your shell\" (or similar). Proposal:\r\n\r\n```suggestion\r\nThe `poetry env activate` command prints the activate command of the virtual environment to the console.\r\nYou can run the output command manually or feed it to the eval command of your shell to activate the environment.\r\nThis way you won't leave the current shell.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1524066755",
    "pr_number": 9150,
    "pr_file": "docs/configuration.md",
    "created_at": "2024-03-14T00:36:02+00:00",
    "commented_code": "*Introduced in 1.2.0*\n \n When set this configuration allows users to configure package distribution format policy for all or\n+specific packages. Specifically, to disallow the use of binary distribution format for all, none or\n specific packages.",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1524066755",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9150,
        "pr_file": "docs/configuration.md",
        "discussion_id": "1524066755",
        "commented_code": "@@ -222,6 +222,7 @@ you encounter on the [issue tracker](https://github.com/python-poetry/poetry/iss\n *Introduced in 1.2.0*\n \n When set this configuration allows users to configure package distribution format policy for all or\n+specific packages. Specifically, to disallow the use of binary distribution format for all, none or\n specific packages.",
        "comment_created_at": "2024-03-14T00:36:02+00:00",
        "comment_author": "Secrus",
        "comment_body": "```suggestion\r\nWhen set, this configuration allows users to disallow the use of binary distribution format for all, none or specific packages.\r\n```\r\nhow about this? Previous version felt unnecessarily verbatim and repeating.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1500776942",
    "pr_number": 8992,
    "pr_file": "docs/dependency-specification.md",
    "created_at": "2024-02-23T14:51:13+00:00",
    "commented_code": "### Caret requirements\n \n-**Caret requirements** allow [SemVer](https://semver.org/) compatible updates to a specified version. An update is allowed if the new version number does not modify the left-most non-zero digit in the major, minor, patch grouping. For instance, if we previously ran `poetry add requests@^2.13.0` and wanted to update the library and ran `poetry update requests`, poetry would update us to version `2.14.0` if it was available, but would not update us to `3.0.0`. If instead we had specified the version string as `^0.1.13`, poetry would update to `0.1.14` but not `0.2.0`. `0.0.x` is not considered compatible with any other version.\n+**Caret requirements** allow [SemVer](https://semver.org/) compatible updates to a specified version. An update is allowed if the new version only modifies the less significant numbers (i.e. numbers to the right of the left-most non-zero number) in the major, minor, patch grouping. For instance, if we previously ran `poetry add requests@^2.13.0` and wanted to update the library and ran `poetry update requests`, poetry would update us to version `2.14.0` if it was available, but would not update us to `3.0.0`. If instead we had specified the version string as `^0.1.13`, poetry would update to `0.1.14` but not `0.2.0`. `0.0.x` is not considered compatible with any other version.",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1500776942",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8992,
        "pr_file": "docs/dependency-specification.md",
        "discussion_id": "1500776942",
        "commented_code": "@@ -18,7 +18,7 @@ of the dependency and on the optional constraints that might be needed for it to\n \n ### Caret requirements\n \n-**Caret requirements** allow [SemVer](https://semver.org/) compatible updates to a specified version. An update is allowed if the new version number does not modify the left-most non-zero digit in the major, minor, patch grouping. For instance, if we previously ran `poetry add requests@^2.13.0` and wanted to update the library and ran `poetry update requests`, poetry would update us to version `2.14.0` if it was available, but would not update us to `3.0.0`. If instead we had specified the version string as `^0.1.13`, poetry would update to `0.1.14` but not `0.2.0`. `0.0.x` is not considered compatible with any other version.\n+**Caret requirements** allow [SemVer](https://semver.org/) compatible updates to a specified version. An update is allowed if the new version only modifies the less significant numbers (i.e. numbers to the right of the left-most non-zero number) in the major, minor, patch grouping. For instance, if we previously ran `poetry add requests@^2.13.0` and wanted to update the library and ran `poetry update requests`, poetry would update us to version `2.14.0` if it was available, but would not update us to `3.0.0`. If instead we had specified the version string as `^0.1.13`, poetry would update to `0.1.14` but not `0.2.0`. `0.0.x` is not considered compatible with any other version.",
        "comment_created_at": "2024-02-23T14:51:13+00:00",
        "comment_author": "radoering",
        "comment_body": "Is \"less significant\" a common term? (I know \"least significant\" but haven't heard \"less significant\" before.)\r\n\r\nAlternatively, we could just write \"... only modifies the numbers to the right ...\".",
        "pr_file_module": null
      },
      {
        "comment_id": "1502580030",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8992,
        "pr_file": "docs/dependency-specification.md",
        "discussion_id": "1500776942",
        "commented_code": "@@ -18,7 +18,7 @@ of the dependency and on the optional constraints that might be needed for it to\n \n ### Caret requirements\n \n-**Caret requirements** allow [SemVer](https://semver.org/) compatible updates to a specified version. An update is allowed if the new version number does not modify the left-most non-zero digit in the major, minor, patch grouping. For instance, if we previously ran `poetry add requests@^2.13.0` and wanted to update the library and ran `poetry update requests`, poetry would update us to version `2.14.0` if it was available, but would not update us to `3.0.0`. If instead we had specified the version string as `^0.1.13`, poetry would update to `0.1.14` but not `0.2.0`. `0.0.x` is not considered compatible with any other version.\n+**Caret requirements** allow [SemVer](https://semver.org/) compatible updates to a specified version. An update is allowed if the new version only modifies the less significant numbers (i.e. numbers to the right of the left-most non-zero number) in the major, minor, patch grouping. For instance, if we previously ran `poetry add requests@^2.13.0` and wanted to update the library and ran `poetry update requests`, poetry would update us to version `2.14.0` if it was available, but would not update us to `3.0.0`. If instead we had specified the version string as `^0.1.13`, poetry would update to `0.1.14` but not `0.2.0`. `0.0.x` is not considered compatible with any other version.",
        "comment_created_at": "2024-02-26T13:03:13+00:00",
        "comment_author": "TanguyP",
        "comment_body": "For what it's worth, I've done some Google searches: \"less significant numbers\" yields ~38k results, \"least significant number\" ~61k, i.e. the former is used less but both figures have the same order of magnitude.\r\n\r\nStrictly speaking, using \"less significant numbers\" on its own is incorrect, because I'm not mentioning less significant _than what_. However, the rationale for this phrasing is that \"numbers to the right of the left-most non-zero number\" is quite a mouthful that most people will need to read at least twice before understanding it; so having a less precise, more intuitive explanation first can help quickly grasp the idea before getting into the technical details.\r\n\r\nWhat do you think?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1158399687",
    "pr_number": 6845,
    "pr_file": "docs/cli.md",
    "created_at": "2023-04-05T11:44:20+00:00",
    "commented_code": "poetry install --no-root\n ```\n \n+Similar to `--no-root` you can use `--no-directory` to skip path dependencies:",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1158399687",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 6845,
        "pr_file": "docs/cli.md",
        "discussion_id": "1158399687",
        "commented_code": "@@ -225,6 +225,12 @@ If you want to skip this installation, use the `--no-root` option.\n poetry install --no-root\n ```\n \n+Similar to `--no-root` you can use `--no-directory` to skip path dependencies:",
        "comment_created_at": "2023-04-05T11:44:20+00:00",
        "comment_author": "radoering",
        "comment_body": "```suggestion\r\nSimilar to `--no-root` you can use `--no-directory` to skip directory path dependencies:\r\n```\r\n\r\nCan you add a sentence that mentions that skipping directory path dependencies only makes sense for certain use cases and link to the FAQ entry?",
        "pr_file_module": null
      }
    ]
  }
]