[
  {
    "discussion_id": "1928578280",
    "pr_number": 10104,
    "pr_file": "docs/pyproject.md",
    "created_at": "2025-01-24T12:02:44+00:00",
    "commented_code": "requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1928578280",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10104,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1928578280",
        "commented_code": "@@ -695,16 +695,6 @@ If you have multiple repositories configured, you can explicitly tell poetry whe\n requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}",
        "comment_created_at": "2025-01-24T12:02:44+00:00",
        "comment_author": "abn",
        "comment_body": "This is still required for projects that do not use the 621 project section. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1928578816",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10104,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1928578280",
        "commented_code": "@@ -695,16 +695,6 @@ If you have multiple repositories configured, you can explicitly tell poetry whe\n requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}",
        "comment_created_at": "2025-01-24T12:03:17+00:00",
        "comment_author": "abn",
        "comment_body": "Maybe just modify to clarify that? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1928616470",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10104,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1928578280",
        "commented_code": "@@ -695,16 +695,6 @@ If you have multiple repositories configured, you can explicitly tell poetry whe\n requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}",
        "comment_created_at": "2025-01-24T12:34:11+00:00",
        "comment_author": "felixgwilliams",
        "comment_body": "Is that true? If I delete both version specifiers, it seems to fall back to `(>=2.7,<2.8 || >=3.4)` and `poetry check` does not emit any warnings.",
        "pr_file_module": null
      },
      {
        "comment_id": "1928624373",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10104,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1928578280",
        "commented_code": "@@ -695,16 +695,6 @@ If you have multiple repositories configured, you can explicitly tell poetry whe\n requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}",
        "comment_created_at": "2025-01-24T12:41:24+00:00",
        "comment_author": "abn",
        "comment_body": "That is unexpected then. I would imagine that since 2.0 supports <2.0 `pyproject.toml` it should in theory enforce that python is present in deps.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1928625451",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10104,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1928578280",
        "commented_code": "@@ -695,16 +695,6 @@ If you have multiple repositories configured, you can explicitly tell poetry whe\n requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}",
        "comment_created_at": "2025-01-24T12:42:26+00:00",
        "comment_author": "abn",
        "comment_body": "@radoering is `(>=2.7,<2.8 || >=3.4)` defaults intended?",
        "pr_file_module": null
      },
      {
        "comment_id": "1928626755",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10104,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1928578280",
        "commented_code": "@@ -695,16 +695,6 @@ If you have multiple repositories configured, you can explicitly tell poetry whe\n requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}",
        "comment_created_at": "2025-01-24T12:43:39+00:00",
        "comment_author": "abn",
        "comment_body": ">  If I delete both version specifiers\r\n\r\n@felixgwilliams did you remove the `[project]` section entirely?",
        "pr_file_module": null
      },
      {
        "comment_id": "1928634348",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10104,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1928578280",
        "commented_code": "@@ -695,16 +695,6 @@ If you have multiple repositories configured, you can explicitly tell poetry whe\n requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}",
        "comment_created_at": "2025-01-24T12:50:28+00:00",
        "comment_author": "felixgwilliams",
        "comment_body": "This is what my pyproject file looks like\r\n\r\n```toml\r\n[project]\r\nname = \"poetry-no-version\"\r\nversion = \"0.1.0\"\r\ndescription = \"\"\r\nauthors = [\r\n    {name = \"Felix Williams\",email = \"felixgwilliams@users.noreply.github.com\"}\r\n]\r\nreadme = \"README.md\"\r\ndependencies = [\r\n    \"pytest (>=1)\"\r\n]\r\n\r\n\r\n[build-system]\r\nrequires = [\"poetry-core>=2.0.0,<3.0.0\"]\r\nbuild-backend = \"poetry.core.masonry.api\"\r\n```\r\n\r\nI added pytest via `poetry add pytest>=1` with no problems. This is on poetry v2.0.1",
        "pr_file_module": null
      },
      {
        "comment_id": "1928797723",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10104,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1928578280",
        "commented_code": "@@ -695,16 +695,6 @@ If you have multiple repositories configured, you can explicitly tell poetry whe\n requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}",
        "comment_created_at": "2025-01-24T14:48:57+00:00",
        "comment_author": "radoering",
        "comment_body": "> @radoering is `(>=2.7,<2.8 || >=3.4)` defaults intended?\r\n\r\nI assume this has been the default since forever:\r\nhttps://github.com/python-poetry/poetry-core/blob/main/src/poetry/core/packages/project_package.py#L40-L41",
        "pr_file_module": null
      },
      {
        "comment_id": "1928960557",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10104,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1928578280",
        "commented_code": "@@ -695,16 +695,6 @@ If you have multiple repositories configured, you can explicitly tell poetry whe\n requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}",
        "comment_created_at": "2025-01-24T16:39:14+00:00",
        "comment_author": "abn",
        "comment_body": "@felixgwilliams the case I am referring to is this:\r\n\r\n```toml\r\n[tool.poetry]\r\nname = \"poetry-no-version\"\r\nversion = \"0.1.0\"\r\ndescription = \"\"\r\nauthors = [\"...\"]\r\nreadme = \"README.md\"\r\n\r\n[build-system]\r\nrequires = [\"poetry-core\"]\r\nbuild-backend = \"poetry.core.masonry.api\"\r\n```\r\n\r\nBut just tested it seems to not care `python` is not specified anyway unless you do a `poetry check` using `<2.0.0`. So I guess this change is okay. /shrug",
        "pr_file_module": null
      },
      {
        "comment_id": "1929023204",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10104,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1928578280",
        "commented_code": "@@ -695,16 +695,6 @@ If you have multiple repositories configured, you can explicitly tell poetry whe\n requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}",
        "comment_created_at": "2025-01-24T17:30:52+00:00",
        "comment_author": "felixgwilliams",
        "comment_body": "From what I can tell:\r\n\r\n1. The python version requirement may be specified in `project.requires-python` or in `tool.poetry.dependencies`\r\n2. If the python requirement is specified in both places\r\n    1. Poetry will use the specification in `tool.poetry.dependencies` for locking\r\n    2. The `tool.poetry.dependencies` specification must be at least as restrictive as the specification in `project.requires-python`\r\n3. If the python version is not specified anywhere, the default of  `~2.7 || >=3.4` will be used\r\n\r\nWhat do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "1929427687",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10104,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1928578280",
        "commented_code": "@@ -695,16 +695,6 @@ If you have multiple repositories configured, you can explicitly tell poetry whe\n requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}",
        "comment_created_at": "2025-01-25T01:22:44+00:00",
        "comment_author": "dimbleby",
        "comment_body": "> > @radoering is `(>=2.7,<2.8 || >=3.4)` defaults intended?\r\n> \r\n> I assume this has been the default since forever: https://github.com/python-poetry/poetry-core/blob/main/src/poetry/core/packages/project_package.py#L40-L41\r\n\r\nI've a memory of looking at this at some point.   It is not a good default, but I seem to recall that changing it was no fun at all in what it did for the unit tests",
        "pr_file_module": null
      },
      {
        "comment_id": "1929569852",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10104,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1928578280",
        "commented_code": "@@ -695,16 +695,6 @@ If you have multiple repositories configured, you can explicitly tell poetry whe\n requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}",
        "comment_created_at": "2025-01-25T16:15:15+00:00",
        "comment_author": "radoering",
        "comment_body": "> What do you think?\r\n\r\nI think your observation is correct.\r\n\r\n> It is not a good default\r\n\r\nI agree. I think we should discourage not defining `project.requires-python` or `tool.poetry.dependency.python`, maybe at least print a warning in `poetry check`, but that is something for another PR.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1933067614",
    "pr_number": 10104,
    "pr_file": "docs/pyproject.md",
    "created_at": "2025-01-29T01:02:39+00:00",
    "commented_code": "requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}\n-Be aware that declaring the python version for which your package\n-is compatible is mandatory:\n+You may also specify your project's compatible python versions in this section, instead of or in addition to `project.requires-python`.\n \n ```toml\n [tool.poetry.dependencies]\n python = \"^3.7\"\n ```\n+\n+{{% note %}}\n+If you specify the compatible python versions in both `tool.poetry.dependencies` and in `project.requires-python`, then Poetry will use the information in `tool.poetry.dependencies` for locking, but the python versions must be a subset of those allowed by `project.requires-python`.\n+For example, the following is invalid and will result in an error, because versions `4.0` and greater are allowed by `tool.poetry.dependencies`, but not by `project.requires-python`.",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1933067614",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10104,
        "pr_file": "docs/pyproject.md",
        "discussion_id": "1933067614",
        "commented_code": "@@ -695,14 +695,25 @@ If you have multiple repositories configured, you can explicitly tell poetry whe\n requests = { version = \"^2.13.0\", source = \"private\" }\n ```\n \n-{{% note %}}\n-Be aware that declaring the python version for which your package\n-is compatible is mandatory:\n+You may also specify your project's compatible python versions in this section, instead of or in addition to `project.requires-python`.\n \n ```toml\n [tool.poetry.dependencies]\n python = \"^3.7\"\n ```\n+\n+{{% note %}}\n+If you specify the compatible python versions in both `tool.poetry.dependencies` and in `project.requires-python`, then Poetry will use the information in `tool.poetry.dependencies` for locking, but the python versions must be a subset of those allowed by `project.requires-python`.\n+For example, the following is invalid and will result in an error, because versions `4.0` and greater are allowed by `tool.poetry.dependencies`, but not by `project.requires-python`.",
        "comment_created_at": "2025-01-29T01:02:39+00:00",
        "comment_author": "abn",
        "comment_body": "```suggestion\r\nIf you specify the compatible python versions in both `tool.poetry.dependencies` and in `project.requires-python`, then Poetry will use the information in `tool.poetry.dependencies` for locking, but the python versions must be a subset of those allowed by `project.requires-python`.\r\n\r\nFor example, the following is invalid and will result in an error, because versions `4.0` and greater are allowed by `tool.poetry.dependencies`, but not by `project.requires-python`.\r\n```\r\n\r\nMinor nitpick.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1908529926",
    "pr_number": 9996,
    "pr_file": "docs/faq.md",
    "created_at": "2025-01-09T10:42:04+00:00",
    "commented_code": "Poetry's default HTTP request timeout is 15 seconds, the same as `pip`.\n Similar to `PIP_REQUESTS_TIMEOUT`, the **experimental** environment variable `POETRY_REQUESTS_TIMEOUT`\n can be set to alter this value.\n+\n+\n+### How do I migrate an existing Poetry project using `tools.poetry` section to use the new `project` section (PEP 621)?\n+\n+{{% note %}}\n+Poetry `>=2.0.0` should seamlessly support both `tools.poetry` section only configuration as well using the `project` section. This\n+lets you decide when and if you would like to migrate to using the `project` section as [described by PyPA](https://packaging.python.org/en/latest/specifications/pyproject-toml/#declaring-project-metadata-the-project-table).\n+\n+See documentation on [the `pyproject.toml` file]({{< relref \"pyproject\" >}}), for information specific to Poetry.\n+{{% /note %}}\n+\n+Due to the nature of this change some manual changes to your `pyproject.toml` file is unavoidable in order start using the `project` section. The following tabs\n+show a transition example. If you wish to retain Poetry's richer [dependency specification]({{< relref \"dependency-specification\" >}}) syntax it is recommended that\n+you use dynamic dependencies as described in the second tab below.\n+\n+{{< tabs tabTotal=\"3\" tabID1=\"migrate-pep621-old\" tabName1=\"Original\" tabID2=\"migrate-pep621-new-dynamic\" tabName2=\"Using Dynamic Dependencies\" tabID3=\"migrate-pep621-new-static\" tabName3=\"Using Static Dependencies\">}}\n+\n+{{< tab tabID=\"migrate-pep621-old\" >}}\n+\n+```toml\n+[tool.poetry]\n+name = \"foobar\"\n+version = \"0.1.0\"\n+description = \"\"\n+authors = [\"Baz Qux <baz.qux@example.com>\"]\n+readme = \"README.md\"\n+packages = [{ include = \"awesome\", from = \"src\" }]\n+include = [{ path = \"tests\", format = \"sdist\" }]\n+homepage = \"https://python-foobar.org/\"\n+repository = \"https://github.com/python-foobar/foobar\"\n+documentation = \"https://python-foobar.org/docs\"\n+keywords = [\"packaging\", \"dependency\", \"foobar\"]\n+classifiers = [\n+    \"Topic :: Software Development :: Build Tools\",\n+    \"Topic :: Software Development :: Libraries :: Python Modules\",\n+]\n+\n+[tool.poetry.scripts]\n+foobar = \"foobar.console.application:main\"\n+\n+[tool.poetry.dependencies]\n+python = \"^3.13\"\n+httpx = \"^0.28.1\"\n+\n+[tool.poetry.group.dev.dependencies]\n+pre-commit = \">=2.10\"\n+\n+[tool.poetry.group.test.dependencies]\n+pytest = \">=8.0\"\n+\n+[build-system]\n+requires = [\"poetry-core\"]\n+build-backend = \"poetry.core.masonry.api\"\n+```\n+\n+{{< /tab >}}\n+\n+{{< tab tabID=\"migrate-pep621-new-static\" >}}\n+\n+```toml\n+[project]\n+name = \"foobar\"\n+version = \"0.1.0\"\n+description = \"\"\n+authors = [\n+    { name = \"Baz Qux\", email = \"baz.qux@example.com\" }\n+]\n+readme = \"README.md\"\n+requires-python = \">=3.13\"\n+keywords = [\"packaging\", \"dependency\", \"foobar\"]\n+# classifiers property is dynamic because we want to create Python classifiers automatically\n+# dependencies are dynamic because we want to keep Poetry's rich dependency definition format\n+dynamic = [\"classifiers\", \"dependencies\"]\n+\n+[project.urls]\n+homepage = \"https://python-foobar.org/\"\n+repository = \"https://github.com/python-foobar/foobar\"\n+documentation = \"https://python-foobar.org/docs\"\n+\n+[project.scripts]\n+foobar = \"foobar.console.application:main\"\n+\n+[tool.poetry]\n+requires-poetry = \">=2.0\"\n+packages = [{ include = \"foobar\", from = \"src\" }]\n+include = [{ path = \"tests\", format = \"sdist\" }]\n+classifiers = [\n+    \"Topic :: Software Development :: Build Tools\",\n+    \"Topic :: Software Development :: Libraries :: Python Modules\",\n+]\n+\n+[tool.poetry.dependencies]\n+httpx = \"^0.28.1\"\n+\n+[tool.poetry.group.dev.dependencies]\n+pre-commit = \">=2.10\"\n+\n+[tool.poetry.group.test.dependencies]\n+pytest = \">=8.0\"\n+\n+[build-system]\n+requires = [\"poetry-core\"]",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1908529926",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9996,
        "pr_file": "docs/faq.md",
        "discussion_id": "1908529926",
        "commented_code": "@@ -271,3 +271,166 @@ The two key options we are using here are `--no-root` (skips installing the proj\n Poetry's default HTTP request timeout is 15 seconds, the same as `pip`.\n Similar to `PIP_REQUESTS_TIMEOUT`, the **experimental** environment variable `POETRY_REQUESTS_TIMEOUT`\n can be set to alter this value.\n+\n+\n+### How do I migrate an existing Poetry project using `tools.poetry` section to use the new `project` section (PEP 621)?\n+\n+{{% note %}}\n+Poetry `>=2.0.0` should seamlessly support both `tools.poetry` section only configuration as well using the `project` section. This\n+lets you decide when and if you would like to migrate to using the `project` section as [described by PyPA](https://packaging.python.org/en/latest/specifications/pyproject-toml/#declaring-project-metadata-the-project-table).\n+\n+See documentation on [the `pyproject.toml` file]({{< relref \"pyproject\" >}}), for information specific to Poetry.\n+{{% /note %}}\n+\n+Due to the nature of this change some manual changes to your `pyproject.toml` file is unavoidable in order start using the `project` section. The following tabs\n+show a transition example. If you wish to retain Poetry's richer [dependency specification]({{< relref \"dependency-specification\" >}}) syntax it is recommended that\n+you use dynamic dependencies as described in the second tab below.\n+\n+{{< tabs tabTotal=\"3\" tabID1=\"migrate-pep621-old\" tabName1=\"Original\" tabID2=\"migrate-pep621-new-dynamic\" tabName2=\"Using Dynamic Dependencies\" tabID3=\"migrate-pep621-new-static\" tabName3=\"Using Static Dependencies\">}}\n+\n+{{< tab tabID=\"migrate-pep621-old\" >}}\n+\n+```toml\n+[tool.poetry]\n+name = \"foobar\"\n+version = \"0.1.0\"\n+description = \"\"\n+authors = [\"Baz Qux <baz.qux@example.com>\"]\n+readme = \"README.md\"\n+packages = [{ include = \"awesome\", from = \"src\" }]\n+include = [{ path = \"tests\", format = \"sdist\" }]\n+homepage = \"https://python-foobar.org/\"\n+repository = \"https://github.com/python-foobar/foobar\"\n+documentation = \"https://python-foobar.org/docs\"\n+keywords = [\"packaging\", \"dependency\", \"foobar\"]\n+classifiers = [\n+    \"Topic :: Software Development :: Build Tools\",\n+    \"Topic :: Software Development :: Libraries :: Python Modules\",\n+]\n+\n+[tool.poetry.scripts]\n+foobar = \"foobar.console.application:main\"\n+\n+[tool.poetry.dependencies]\n+python = \"^3.13\"\n+httpx = \"^0.28.1\"\n+\n+[tool.poetry.group.dev.dependencies]\n+pre-commit = \">=2.10\"\n+\n+[tool.poetry.group.test.dependencies]\n+pytest = \">=8.0\"\n+\n+[build-system]\n+requires = [\"poetry-core\"]\n+build-backend = \"poetry.core.masonry.api\"\n+```\n+\n+{{< /tab >}}\n+\n+{{< tab tabID=\"migrate-pep621-new-static\" >}}\n+\n+```toml\n+[project]\n+name = \"foobar\"\n+version = \"0.1.0\"\n+description = \"\"\n+authors = [\n+    { name = \"Baz Qux\", email = \"baz.qux@example.com\" }\n+]\n+readme = \"README.md\"\n+requires-python = \">=3.13\"\n+keywords = [\"packaging\", \"dependency\", \"foobar\"]\n+# classifiers property is dynamic because we want to create Python classifiers automatically\n+# dependencies are dynamic because we want to keep Poetry's rich dependency definition format\n+dynamic = [\"classifiers\", \"dependencies\"]\n+\n+[project.urls]\n+homepage = \"https://python-foobar.org/\"\n+repository = \"https://github.com/python-foobar/foobar\"\n+documentation = \"https://python-foobar.org/docs\"\n+\n+[project.scripts]\n+foobar = \"foobar.console.application:main\"\n+\n+[tool.poetry]\n+requires-poetry = \">=2.0\"\n+packages = [{ include = \"foobar\", from = \"src\" }]\n+include = [{ path = \"tests\", format = \"sdist\" }]\n+classifiers = [\n+    \"Topic :: Software Development :: Build Tools\",\n+    \"Topic :: Software Development :: Libraries :: Python Modules\",\n+]\n+\n+[tool.poetry.dependencies]\n+httpx = \"^0.28.1\"\n+\n+[tool.poetry.group.dev.dependencies]\n+pre-commit = \">=2.10\"\n+\n+[tool.poetry.group.test.dependencies]\n+pytest = \">=8.0\"\n+\n+[build-system]\n+requires = [\"poetry-core\"]",
        "comment_created_at": "2025-01-09T10:42:04+00:00",
        "comment_author": "finswimmer",
        "comment_body": "To be consistent with various places in the documentation, we should add a version constraint here (and in the examples below)\r\n```suggestion\r\nrequires = [\"poetry-core>=2.0.0,<3.0.0\"]\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1853391918",
    "pr_number": 9864,
    "pr_file": "docs/building-extension-modules.md",
    "created_at": "2024-11-22T07:19:54+00:00",
    "commented_code": "+---\n+title: \"Building extension modules\"\n+draft: false\n+type: docs\n+layout: single\n+\n+menu:\n+  docs:\n+    weight: 125\n+---\n+\n+# Building Extension Modules\n+\n+{{% warning %}}\n+While this feature has been around since almost the beginning of the Poetry project and has needed minimal changes,\n+it is still considered unstable. You can participate in the discussions about stabilizing this feature\n+[here](https://github.com/python-poetry/poetry/issues/2740).\n+\n+And as always, your contributions towards the goal of improving this feature are also welcome.\n+{{% /warning %}}\n+\n+Poetry allows a project developer to introduce support for, build and distribute native extensions within their project.\n+In order to achieve this, at the highest level, the following steps are required.\n+\n+{{< steps >}}\n+{{< step >}}\n+**Add Build Dependencies**\n+\n+The build dependencies, in this context, refer to those Python packages that required in order to successfully execute\n+your build script. Common examples include `cython`, `meson`, `maturin`, `setuptools` etc., depending on how your\n+extension is built.\n+\n+{{% note %}}\n+You must assume that only python built-ins are available by default in a build environment. This means, if you use need\n+even packages like `setuptools`, it must be explicitly declared.\n+{{% /note %}}\n+\n+The necessary build dependencies must be added to the `build-system.requires` section of your `pyproject.toml` file.\n+\n+```toml\n+[build-system]\n+requires = [\"poetry-core\", \"setuptools\", \"cython\"]\n+build-backend = \"poetry.core.masonry.api\"\n+```\n+\n+{{% note %}}\n+If you wish to develop the build script within your project's virtual environment, then you must also add the\n+dependencies to your project explicitly to a dependency group - the name of which is not important.\n+\n+```sh\n+poetry add --group=build setuptools cython\n+```\n+{{% /note %}}\n+\n+{{< /step >}}\n+\n+{{< step >}}\n+**Add Build Script**\n+\n+The build script can be free-form Python script that uses any dependency specified in the previous step. This can be\n+named as needed, but **must** be located within the project root directory (or a subdirectory) and also **must**\n+be included in your source distribution. You can see the [example snippets section]({{< relref \"#example-snippets\" >}})\n+for inspiration.\n+\n+```toml\n+[tool.poetry.build]\n+script = \"build-extension.py\"\n+```\n+\n+{{% note %}}\n+The name of the build script is arbitrary. Common practice has been to name it `build.py`, however this is not\n+mandatory. You **should** consider [using a subdirectory]({{< relref \"#can-i-store-the-build-script-in-a-subdirectory\" >}})\n+if feasible.\n+{{% /note %}}\n+\n+{{< /step >}}\n+\n+{{< step >}}\n+**Specify Distribution Files**\n+\n+{{% warning %}}\n+The following is an example, and should not be considered as complete.\n+{{% /warning %}}\n+\n+```toml\n+[tool.poetry]\n+...\n+packages = [\n+    { include = \"package\", from = \"src\" }\n+]\n+include = [\n+    { path = \"src/package/**/*.so\", format = \"wheel\" },\n+    { path = \"build-extension.py\", format = \"sdist\" }\n+]\n+exclude = [\n+    { path = \"build-extension.py\", format = \"wheel\" },\n+    { path = \"src/package/**/*.c\", format = \"wheel\" }\n+]\n+```\n+\n+The key takeaway here should be the following. You can refer to the [`pyproject.toml`]({{< relref \"pyproject#exclude-and-include\" >}})\n+documentation for information on each of the relevant sections.\n+\n+1. Include your build outputs in your wheel.\n+2. Exclude your build inputs from your wheel.\n+3. Include your build inputs to your source distribution.\n+\n+{{< /step >}}\n+\n+{{< /steps >}}\n+\n+## Example Snippets\n+\n+### Cython\n+\n+{{< tabs tabTotal=\"2\" tabID1=\"cython-pyproject\" tabName1=\"pyproject.toml\" tabID2=\"cython-build-script\" tabName2=\"build-extension.py\">}}\n+\n+{{< tab tabID=\"cython-pyproject\" >}}\n+\n+```toml\n+[tool.poetry.build]\n+script = \"build-extension.py\"\n+\n+[build-system]\n+requires = [\"poetry-core\", \"cython\"]",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1853391918",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9864,
        "pr_file": "docs/building-extension-modules.md",
        "discussion_id": "1853391918",
        "commented_code": "@@ -0,0 +1,338 @@\n+---\n+title: \"Building extension modules\"\n+draft: false\n+type: docs\n+layout: single\n+\n+menu:\n+  docs:\n+    weight: 125\n+---\n+\n+# Building Extension Modules\n+\n+{{% warning %}}\n+While this feature has been around since almost the beginning of the Poetry project and has needed minimal changes,\n+it is still considered unstable. You can participate in the discussions about stabilizing this feature\n+[here](https://github.com/python-poetry/poetry/issues/2740).\n+\n+And as always, your contributions towards the goal of improving this feature are also welcome.\n+{{% /warning %}}\n+\n+Poetry allows a project developer to introduce support for, build and distribute native extensions within their project.\n+In order to achieve this, at the highest level, the following steps are required.\n+\n+{{< steps >}}\n+{{< step >}}\n+**Add Build Dependencies**\n+\n+The build dependencies, in this context, refer to those Python packages that required in order to successfully execute\n+your build script. Common examples include `cython`, `meson`, `maturin`, `setuptools` etc., depending on how your\n+extension is built.\n+\n+{{% note %}}\n+You must assume that only python built-ins are available by default in a build environment. This means, if you use need\n+even packages like `setuptools`, it must be explicitly declared.\n+{{% /note %}}\n+\n+The necessary build dependencies must be added to the `build-system.requires` section of your `pyproject.toml` file.\n+\n+```toml\n+[build-system]\n+requires = [\"poetry-core\", \"setuptools\", \"cython\"]\n+build-backend = \"poetry.core.masonry.api\"\n+```\n+\n+{{% note %}}\n+If you wish to develop the build script within your project's virtual environment, then you must also add the\n+dependencies to your project explicitly to a dependency group - the name of which is not important.\n+\n+```sh\n+poetry add --group=build setuptools cython\n+```\n+{{% /note %}}\n+\n+{{< /step >}}\n+\n+{{< step >}}\n+**Add Build Script**\n+\n+The build script can be free-form Python script that uses any dependency specified in the previous step. This can be\n+named as needed, but **must** be located within the project root directory (or a subdirectory) and also **must**\n+be included in your source distribution. You can see the [example snippets section]({{< relref \"#example-snippets\" >}})\n+for inspiration.\n+\n+```toml\n+[tool.poetry.build]\n+script = \"build-extension.py\"\n+```\n+\n+{{% note %}}\n+The name of the build script is arbitrary. Common practice has been to name it `build.py`, however this is not\n+mandatory. You **should** consider [using a subdirectory]({{< relref \"#can-i-store-the-build-script-in-a-subdirectory\" >}})\n+if feasible.\n+{{% /note %}}\n+\n+{{< /step >}}\n+\n+{{< step >}}\n+**Specify Distribution Files**\n+\n+{{% warning %}}\n+The following is an example, and should not be considered as complete.\n+{{% /warning %}}\n+\n+```toml\n+[tool.poetry]\n+...\n+packages = [\n+    { include = \"package\", from = \"src\" }\n+]\n+include = [\n+    { path = \"src/package/**/*.so\", format = \"wheel\" },\n+    { path = \"build-extension.py\", format = \"sdist\" }\n+]\n+exclude = [\n+    { path = \"build-extension.py\", format = \"wheel\" },\n+    { path = \"src/package/**/*.c\", format = \"wheel\" }\n+]\n+```\n+\n+The key takeaway here should be the following. You can refer to the [`pyproject.toml`]({{< relref \"pyproject#exclude-and-include\" >}})\n+documentation for information on each of the relevant sections.\n+\n+1. Include your build outputs in your wheel.\n+2. Exclude your build inputs from your wheel.\n+3. Include your build inputs to your source distribution.\n+\n+{{< /step >}}\n+\n+{{< /steps >}}\n+\n+## Example Snippets\n+\n+### Cython\n+\n+{{< tabs tabTotal=\"2\" tabID1=\"cython-pyproject\" tabName1=\"pyproject.toml\" tabID2=\"cython-build-script\" tabName2=\"build-extension.py\">}}\n+\n+{{< tab tabID=\"cython-pyproject\" >}}\n+\n+```toml\n+[tool.poetry.build]\n+script = \"build-extension.py\"\n+\n+[build-system]\n+requires = [\"poetry-core\", \"cython\"]",
        "comment_created_at": "2024-11-22T07:19:54+00:00",
        "comment_author": "radoering",
        "comment_body": "```suggestion\r\nrequires = [\"poetry-core\", \"cython\", \"setuptools\"]\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1545928745",
    "pr_number": 9256,
    "pr_file": "docs/basic-usage.md",
    "created_at": "2024-04-01T03:18:29+00:00",
    "commented_code": "`tool.poetry.exclude` sections. `tool.poetry.exclude` is additionally implicitly populated by your `.gitignore`. For\n full documentation on the project format, see the [pyproject section]({{< relref \"pyproject\" >}}) of the documentation.\n \n+### Setting a Python Version\n+\n+{{% note %}}\n+Unlike with other packages, Poetry will not automatically install a python interpreter for you.\n+If you want to run Python files in your package like a script or application, you must _bring your own_ python interpreter to run them.\n+{{% /note %}}\n+\n Poetry will require you to explicitly specify what versions of Python you intend to support, and its universal locking\n will guarantee that your project is installable (and all dependencies claim support for) all supported Python versions.\n+Again, it's important to remember that---unlike other dependencies---setting a Python version is merely specifying which versions of Python you intend to support.",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1545928745",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9256,
        "pr_file": "docs/basic-usage.md",
        "discussion_id": "1545928745",
        "commented_code": "@@ -63,8 +63,29 @@ Similarly, the traditional `MANIFEST.in` file is replaced by the `tool.poetry.re\n `tool.poetry.exclude` sections. `tool.poetry.exclude` is additionally implicitly populated by your `.gitignore`. For\n full documentation on the project format, see the [pyproject section]({{< relref \"pyproject\" >}}) of the documentation.\n \n+### Setting a Python Version\n+\n+{{% note %}}\n+Unlike with other packages, Poetry will not automatically install a python interpreter for you.\n+If you want to run Python files in your package like a script or application, you must _bring your own_ python interpreter to run them.\n+{{% /note %}}\n+\n Poetry will require you to explicitly specify what versions of Python you intend to support, and its universal locking\n will guarantee that your project is installable (and all dependencies claim support for) all supported Python versions.\n+Again, it's important to remember that---unlike other dependencies---setting a Python version is merely specifying which versions of Python you intend to support.",
        "comment_created_at": "2024-04-01T03:18:29+00:00",
        "comment_author": "jsimonlane",
        "comment_body": "You could combine your above revision with with this one more concisely by saying,\r\n\r\n\"Critically, setting a Python version is merely specifying which versions of Python you intend to _support._ To run your application or library, you must _bring your own_ python interpreter (for instance using `pyenv`).\"\r\n\r\nThat would make it more concise.",
        "pr_file_module": null
      },
      {
        "comment_id": "1555051731",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9256,
        "pr_file": "docs/basic-usage.md",
        "discussion_id": "1545928745",
        "commented_code": "@@ -63,8 +63,29 @@ Similarly, the traditional `MANIFEST.in` file is replaced by the `tool.poetry.re\n `tool.poetry.exclude` sections. `tool.poetry.exclude` is additionally implicitly populated by your `.gitignore`. For\n full documentation on the project format, see the [pyproject section]({{< relref \"pyproject\" >}}) of the documentation.\n \n+### Setting a Python Version\n+\n+{{% note %}}\n+Unlike with other packages, Poetry will not automatically install a python interpreter for you.\n+If you want to run Python files in your package like a script or application, you must _bring your own_ python interpreter to run them.\n+{{% /note %}}\n+\n Poetry will require you to explicitly specify what versions of Python you intend to support, and its universal locking\n will guarantee that your project is installable (and all dependencies claim support for) all supported Python versions.\n+Again, it's important to remember that---unlike other dependencies---setting a Python version is merely specifying which versions of Python you intend to support.",
        "comment_created_at": "2024-04-07T19:59:06+00:00",
        "comment_author": "DbCrWk",
        "comment_body": "For now, I think it would be good to have an explicit note in a callout box. I agree that your phrasing is more concise, but I think this will be a bit more visible.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1141060148",
    "pr_number": 7658,
    "pr_file": "docs/repositories.md",
    "created_at": "2023-03-18T17:10:01+00:00",
    "commented_code": "url = \"https://foo.bar/simple/\"\n default = false\n secondary = false\n+explicit = false\n ```\n \n-Any package source not marked as `secondary` will take precedence over [PyPI](https://pypi.org).\n+If all keys are `false`, the source is considered a \"primary\" source that takes precedence over default, secondary and explicit sources.\n \n+Package sources are considered in the following order:\n+1. \"primary\" sources,\n+2. [default source](#default-package-source),\n+3. [secondary sources](#secondary-package-sources),",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1141060148",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7658,
        "pr_file": "docs/repositories.md",
        "discussion_id": "1141060148",
        "commented_code": "@@ -122,10 +122,19 @@ name = \"foo\"\n url = \"https://foo.bar/simple/\"\n default = false\n secondary = false\n+explicit = false\n ```\n \n-Any package source not marked as `secondary` will take precedence over [PyPI](https://pypi.org).\n+If all keys are `false`, the source is considered a \"primary\" source that takes precedence over default, secondary and explicit sources.\n \n+Package sources are considered in the following order:\n+1. \"primary\" sources,\n+2. [default source](#default-package-source),\n+3. [secondary sources](#secondary-package-sources),",
        "comment_created_at": "2023-03-18T17:10:01+00:00",
        "comment_author": "radoering",
        "comment_body": "Not quite correct. We shouldn't care about `default` too much here because I don't want to change default handling in this PR.",
        "pr_file_module": null
      },
      {
        "comment_id": "1141474156",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7658,
        "pr_file": "docs/repositories.md",
        "discussion_id": "1141060148",
        "commented_code": "@@ -122,10 +122,19 @@ name = \"foo\"\n url = \"https://foo.bar/simple/\"\n default = false\n secondary = false\n+explicit = false\n ```\n \n-Any package source not marked as `secondary` will take precedence over [PyPI](https://pypi.org).\n+If all keys are `false`, the source is considered a \"primary\" source that takes precedence over default, secondary and explicit sources.\n \n+Package sources are considered in the following order:\n+1. \"primary\" sources,\n+2. [default source](#default-package-source),\n+3. [secondary sources](#secondary-package-sources),",
        "comment_created_at": "2023-03-19T21:27:57+00:00",
        "comment_author": "b-kamphorst",
        "comment_body": "I think I have made the MR compatible with the current behavior (as described in https://github.com/python-poetry/poetry/pull/6879#pullrequestreview-1273887207).\r\n- `Priority.DEFAULT` is the highest priority.\r\n- PyPI is disabled if another source has priority `DEFAULT`.\r\n- PyPI has priority `DEFAULT` if no other sources are `DEFAULT` _or_ `PRIMARY`.\r\n- PyPI has priority 'SECONDARY' if no other sources are `DEFAULT`, but at least one is `PRIMARY`.\r\n\r\nAs we now have several types of source priorities, it feels right to still mention the default and PyPI in the documentation. I kept it very minimal for now in line with your comment.\r\n\r\nPlease carefully review the latest commits.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1155301240",
    "pr_number": 7658,
    "pr_file": "docs/repositories.md",
    "created_at": "2023-04-02T12:19:46+00:00",
    "commented_code": "process. These network requests will occur for all sources, regardless of if the package is\n found at one or more sources.\n \n-In order to limit the search for a specific package to a particular package repository, you can specify the source explicitly. This is strongly suggested for all private packages to avoid dependency confusion attacks.\n+#### Explicit Package Sources\n+\n+If package sources are configured as explicit, these sources are only searched when a package configuration [explicitly indicates](#package-source-constraint) that it should be found on this package source.\n+\n+You can configure a package source as a explicit source with `priority = \"explicit` in your package source configuration.\n+\n+```bash\n+poetry source add --priority=explicit foo https://foo.bar/simple/\n+```\n+\n+There can be more than one explicit package source.\n+\n+#### Package Source Constraint\n+\n+In order to limit the search for a specific package to a particular package repository, you can specify the source explicitly.\n \n ```bash\n poetry add --source internal-pypi httpx\n ```\n \n+This results in the following configuration in `pyproject.toml`:\n+\n ```toml\n [tool.poetry.dependencies]\n ...\n httpx = { version = \"^0.22\", source = \"internal-pypi\" }\n \n [[tool.poetry.source]]\n name = \"internal-pypi\"\n-url = \"https://foo.bar/simple/\"\n-secondary = true\n+url = ...\n ```\n \n+{{% note %}}\n+\n+Package `source` keys are not inherited by their dependencies. In particular, if `package-A` is configured to be found in `source = internal-pypi`, and `package-A` depends on `package-B` that is also to be found on the internal `pypi`, then `package-B` needs to be configured as such in `pyproject.toml`. The easiest way for achieving this is to add `package-B` with wildcard constraint:\n+\n+```bash\n+poetry add --source internal-pypi package-B@*\n+```\n+\n+This will ensure that `package-B` is searched only in the `internal-pypi` package source. The version constraints on `package-B` are derived from `package-A` (and other client packages), as usual.\n+\n+{{% /note %}}\n+\n+{{% note %}}\n+\n+This approach is strongly suggested for all explicit packages to avoid dependency confusion attacks.",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1155301240",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7658,
        "pr_file": "docs/repositories.md",
        "discussion_id": "1155301240",
        "commented_code": "@@ -182,23 +189,54 @@ All package sources (including secondary sources) will be searched during the pa\n process. These network requests will occur for all sources, regardless of if the package is\n found at one or more sources.\n \n-In order to limit the search for a specific package to a particular package repository, you can specify the source explicitly. This is strongly suggested for all private packages to avoid dependency confusion attacks.\n+#### Explicit Package Sources\n+\n+If package sources are configured as explicit, these sources are only searched when a package configuration [explicitly indicates](#package-source-constraint) that it should be found on this package source.\n+\n+You can configure a package source as a explicit source with `priority = \"explicit` in your package source configuration.\n+\n+```bash\n+poetry source add --priority=explicit foo https://foo.bar/simple/\n+```\n+\n+There can be more than one explicit package source.\n+\n+#### Package Source Constraint\n+\n+In order to limit the search for a specific package to a particular package repository, you can specify the source explicitly.\n \n ```bash\n poetry add --source internal-pypi httpx\n ```\n \n+This results in the following configuration in `pyproject.toml`:\n+\n ```toml\n [tool.poetry.dependencies]\n ...\n httpx = { version = \"^0.22\", source = \"internal-pypi\" }\n \n [[tool.poetry.source]]\n name = \"internal-pypi\"\n-url = \"https://foo.bar/simple/\"\n-secondary = true\n+url = ...\n ```\n \n+{{% note %}}\n+\n+Package `source` keys are not inherited by their dependencies. In particular, if `package-A` is configured to be found in `source = internal-pypi`, and `package-A` depends on `package-B` that is also to be found on the internal `pypi`, then `package-B` needs to be configured as such in `pyproject.toml`. The easiest way for achieving this is to add `package-B` with wildcard constraint:\n+\n+```bash\n+poetry add --source internal-pypi package-B@*\n+```\n+\n+This will ensure that `package-B` is searched only in the `internal-pypi` package source. The version constraints on `package-B` are derived from `package-A` (and other client packages), as usual.\n+\n+{{% /note %}}\n+\n+{{% note %}}\n+\n+This approach is strongly suggested for all explicit packages to avoid dependency confusion attacks.",
        "comment_created_at": "2023-04-02T12:19:46+00:00",
        "comment_author": "radoering",
        "comment_body": "Not sure if \"explicit packages\" makes sense. Maybe:\r\n\r\n```suggestion\r\nThis approach is strongly suggested for all packages that are expected to be provided only by one specific source to avoid dependency confusion attacks.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1276532728",
    "pr_number": 8171,
    "pr_file": "docs/repositories.md",
    "created_at": "2023-07-27T16:25:20+00:00",
    "commented_code": "This way, the priority of PyPI can be set in a fine-granular way.\n \n+The equivalent specification in `pyproject.toml` is:\n+\n+```toml\n+[[tool.poetry.source]]\n+name = \"pypi\"\n+priority = \"primary\"\n+```\n+\n+**Omit the `url` when specifying PyPI as a supplemental source.** Because PyPI is internally configured\n+with Poetry, the PyPI repository cannot be configured with a given URL.  Remember, you can always use\n+`poetry check` to ensure the validity of the `pyproject.toml` file.",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1276532728",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8171,
        "pr_file": "docs/repositories.md",
        "discussion_id": "1276532728",
        "commented_code": "@@ -174,6 +174,18 @@ poetry source add --priority=primary PyPI\n \n This way, the priority of PyPI can be set in a fine-granular way.\n \n+The equivalent specification in `pyproject.toml` is:\n+\n+```toml\n+[[tool.poetry.source]]\n+name = \"pypi\"\n+priority = \"primary\"\n+```\n+\n+**Omit the `url` when specifying PyPI as a supplemental source.** Because PyPI is internally configured\n+with Poetry, the PyPI repository cannot be configured with a given URL.  Remember, you can always use\n+`poetry check` to ensure the validity of the `pyproject.toml` file.",
        "comment_created_at": "2023-07-27T16:25:20+00:00",
        "comment_author": "radoering",
        "comment_body": "```suggestion\r\n**Omit the `url` when specifying PyPI explicitly.** Because PyPI is internally configured\r\nwith Poetry, the PyPI repository cannot be configured with a given URL. Remember, you can always use\r\n`poetry check` to ensure the validity of the `pyproject.toml` file.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1443075027",
    "pr_number": 8850,
    "pr_file": "docs/cli.md",
    "created_at": "2024-01-05T16:21:42+00:00",
    "commented_code": "`setting-key` is a configuration option name and `setting-value1` is a configuration value.\n See [Configuration]({{< relref \"configuration\" >}}) for all available settings.\n \n+{{% warning %}} Use `--` to terminate option parsing in the traditional Unix tradition else, commands like `poetry config http-basic.custom-repo gitlab-ci-token ${GITLAB_JOB_TOKEN}` will fail if `${GITLAB_JOB_TOKEN}` starts with a hyphen (`-`). {{% /note %}}\n+",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1443075027",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8850,
        "pr_file": "docs/cli.md",
        "discussion_id": "1443075027",
        "commented_code": "@@ -580,6 +580,8 @@ poetry config [options] [setting-key] [setting-value1] ... [setting-valueN]\n `setting-key` is a configuration option name and `setting-value1` is a configuration value.\n See [Configuration]({{< relref \"configuration\" >}}) for all available settings.\n \n+{{% warning %}} Use `--` to terminate option parsing in the traditional Unix tradition else, commands like `poetry config http-basic.custom-repo gitlab-ci-token ${GITLAB_JOB_TOKEN}` will fail if `${GITLAB_JOB_TOKEN}` starts with a hyphen (`-`). {{% /note %}}\n+",
        "comment_created_at": "2024-01-05T16:21:42+00:00",
        "comment_author": "radoering",
        "comment_body": "```suggestion\r\n{{% warning %}}\r\nUse `--` to terminate option parsing, otherwise commands like\r\n`poetry config http-basic.custom-repo gitlab-ci-token ${GITLAB_JOB_TOKEN}`\r\nwill fail if `${GITLAB_JOB_TOKEN}` starts with a hyphen (`-`).\r\n{{% /warning%}}\r\n\r\n```",
        "pr_file_module": null
      }
    ]
  }
]