[
  {
    "discussion_id": "1912523364",
    "pr_number": 10021,
    "pr_file": "src/poetry/console/application.py",
    "created_at": "2025-01-12T19:42:37+00:00",
    "commented_code": "return exit_code\n \n+    def _option_get_value(self, io: IO, name: str, default: Any) -> Any:\n+        option = self.definition.option(name)\n+\n+        if option is None:\n+            return default\n+\n+        values = [f\"--{option.name}\"]\n+\n+        if option.shortcut:\n+            values.append(f\"-{option.shortcut}\")\n+\n+        if not io.input.has_parameter_option(values):\n+            return default\n+\n+        if option.is_flag():\n+            return True\n+\n+        return io.input.parameter_option(values=values, default=default)\n+\n+    def _configure_custom_application_options(self, io: IO | None) -> None:",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1912523364",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10021,
        "pr_file": "src/poetry/console/application.py",
        "discussion_id": "1912523364",
        "commented_code": "@@ -237,6 +228,52 @@ def _run(self, io: IO) -> int:\n \n         return exit_code\n \n+    def _option_get_value(self, io: IO, name: str, default: Any) -> Any:\n+        option = self.definition.option(name)\n+\n+        if option is None:\n+            return default\n+\n+        values = [f\"--{option.name}\"]\n+\n+        if option.shortcut:\n+            values.append(f\"-{option.shortcut}\")\n+\n+        if not io.input.has_parameter_option(values):\n+            return default\n+\n+        if option.is_flag():\n+            return True\n+\n+        return io.input.parameter_option(values=values, default=default)\n+\n+    def _configure_custom_application_options(self, io: IO | None) -> None:",
        "comment_created_at": "2025-01-12T19:42:37+00:00",
        "comment_author": "Secrus",
        "comment_body": "None-able `io` makes no sense. you are calling this method from `_run`, where you have your IO configured, and `_run` is being passed an IO object. So you are always passing `IO` object in, never `None`",
        "pr_file_module": null
      },
      {
        "comment_id": "1912527037",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10021,
        "pr_file": "src/poetry/console/application.py",
        "discussion_id": "1912523364",
        "commented_code": "@@ -237,6 +228,52 @@ def _run(self, io: IO) -> int:\n \n         return exit_code\n \n+    def _option_get_value(self, io: IO, name: str, default: Any) -> Any:\n+        option = self.definition.option(name)\n+\n+        if option is None:\n+            return default\n+\n+        values = [f\"--{option.name}\"]\n+\n+        if option.shortcut:\n+            values.append(f\"-{option.shortcut}\")\n+\n+        if not io.input.has_parameter_option(values):\n+            return default\n+\n+        if option.is_flag():\n+            return True\n+\n+        return io.input.parameter_option(values=values, default=default)\n+\n+    def _configure_custom_application_options(self, io: IO | None) -> None:",
        "comment_created_at": "2025-01-12T20:05:27+00:00",
        "comment_author": "abn",
        "comment_body": "Fair. I think I instinctively did a `if io is None` check in the code since the `self._io` is `IO | None`. Then sourcery complained about it, so I added this. Now removing it and the `if io is None` check.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "753752899",
    "pr_number": 4618,
    "pr_file": "src/poetry/mixology/version_solver.py",
    "created_at": "2021-11-21T06:12:13+00:00",
    "commented_code": ")\n                 return dependency.complete_name\n \n-            try:\n-                version = packages[0]\n-            except IndexError:\n-                version = None\n+            version = None\n+            if dependency.name not in self._use_latest:\n+                # prefer locked version of compatible (not exact same) dependency;\n+                # required in order to not unnecessarily update dependencies with\n+                # extras, e.g. \"coverage\" vs. \"coverage[toml]\"\n+                locked = self._locked.get(dependency.name, None)\n+                if locked is not None:\n+                    for version in packages:\n+                        if version.version <= locked.version:\n+                            if version.version != locked.version:\n+                                version = None\n+                            break\n+            with suppress(IndexError):\n+                version = version or packages[0]",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "753752899",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 4618,
        "pr_file": "src/poetry/mixology/version_solver.py",
        "discussion_id": "753752899",
        "commented_code": "@@ -374,10 +375,20 @@ def _get_min(dependency: Dependency) -> Tuple[bool, int]:\n                 )\n                 return dependency.complete_name\n \n-            try:\n-                version = packages[0]\n-            except IndexError:\n-                version = None\n+            version = None\n+            if dependency.name not in self._use_latest:\n+                # prefer locked version of compatible (not exact same) dependency;\n+                # required in order to not unnecessarily update dependencies with\n+                # extras, e.g. \"coverage\" vs. \"coverage[toml]\"\n+                locked = self._locked.get(dependency.name, None)\n+                if locked is not None:\n+                    for version in packages:\n+                        if version.version <= locked.version:\n+                            if version.version != locked.version:\n+                                version = None\n+                            break\n+            with suppress(IndexError):\n+                version = version or packages[0]",
        "comment_created_at": "2021-11-21T06:12:13+00:00",
        "comment_author": "neersighted",
        "comment_body": "I feel like this line is a bit clunky -- do you think this is cleaner than a `None` check?",
        "pr_file_module": null
      },
      {
        "comment_id": "753755702",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 4618,
        "pr_file": "src/poetry/mixology/version_solver.py",
        "discussion_id": "753752899",
        "commented_code": "@@ -374,10 +375,20 @@ def _get_min(dependency: Dependency) -> Tuple[bool, int]:\n                 )\n                 return dependency.complete_name\n \n-            try:\n-                version = packages[0]\n-            except IndexError:\n-                version = None\n+            version = None\n+            if dependency.name not in self._use_latest:\n+                # prefer locked version of compatible (not exact same) dependency;\n+                # required in order to not unnecessarily update dependencies with\n+                # extras, e.g. \"coverage\" vs. \"coverage[toml]\"\n+                locked = self._locked.get(dependency.name, None)\n+                if locked is not None:\n+                    for version in packages:\n+                        if version.version <= locked.version:\n+                            if version.version != locked.version:\n+                                version = None\n+                            break\n+            with suppress(IndexError):\n+                version = version or packages[0]",
        "comment_created_at": "2021-11-21T06:48:12+00:00",
        "comment_author": "radoering",
        "comment_body": "Probably, a None check is easier to understand. I will change it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1501859570",
    "pr_number": 9019,
    "pr_file": "src/poetry/inspection/info.py",
    "created_at": "2024-02-25T17:01:40+00:00",
    "commented_code": "name=result.get(\"name\"),\n             version=result.get(\"version\"),\n             summary=result.get(\"description\", \"\"),\n-            requires_dist=requirements or None,\n+            requires_dist=requirements,",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1501859570",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9019,
        "pr_file": "src/poetry/inspection/info.py",
        "discussion_id": "1501859570",
        "commented_code": "@@ -369,17 +369,10 @@ def from_setup_files(cls, path: Path) -> PackageInfo:\n             name=result.get(\"name\"),\n             version=result.get(\"version\"),\n             summary=result.get(\"description\", \"\"),\n-            requires_dist=requirements or None,\n+            requires_dist=requirements,",
        "comment_created_at": "2024-02-25T17:01:40+00:00",
        "comment_author": "radoering",
        "comment_body": "IIRC, this is written to the cache. It shouldn't matter if it's an empty list or None, should it?",
        "pr_file_module": null
      },
      {
        "comment_id": "1501861491",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9019,
        "pr_file": "src/poetry/inspection/info.py",
        "discussion_id": "1501859570",
        "commented_code": "@@ -369,17 +369,10 @@ def from_setup_files(cls, path: Path) -> PackageInfo:\n             name=result.get(\"name\"),\n             version=result.get(\"version\"),\n             summary=result.get(\"description\", \"\"),\n-            requires_dist=requirements or None,\n+            requires_dist=requirements,",
        "comment_created_at": "2024-02-25T17:14:06+00:00",
        "comment_author": "dimbleby",
        "comment_body": "maybe?  if it doesn't  matter then it doesn't matter: but an empty list seems a clearer representation of what we understand at this point, I don't see why this code would prefer `None`.\r\n\r\n~perhaps the field shouldn't even be allowed to be `None` on the `PackageInfo`.~\r\n\r\nelsewhere eg at line 250-ish `None` means \"I don't know\": but here we do know (so long as we trust the setup reader)",
        "pr_file_module": null
      },
      {
        "comment_id": "1501884386",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9019,
        "pr_file": "src/poetry/inspection/info.py",
        "discussion_id": "1501859570",
        "commented_code": "@@ -369,17 +369,10 @@ def from_setup_files(cls, path: Path) -> PackageInfo:\n             name=result.get(\"name\"),\n             version=result.get(\"version\"),\n             summary=result.get(\"description\", \"\"),\n-            requires_dist=requirements or None,\n+            requires_dist=requirements,",
        "comment_created_at": "2024-02-25T19:43:25+00:00",
        "comment_author": "abn",
        "comment_body": "If i recall correct, the setup reader cannot be trusted when the `setup.py` files are complex. The `None` state was, if i recall correct, used to indicate whether we are confident enough to use the value or resolution must continue (see http/pypi repo code). \r\n\r\nIf we are happy to say that we are confident the setup reader has provided the correct value, this should be okay and an empty list is probably more accurate.\r\n\r\nIt might be that we just need to someone factor in complexity of the setup file to use `[]` or `None`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1501884666",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9019,
        "pr_file": "src/poetry/inspection/info.py",
        "discussion_id": "1501859570",
        "commented_code": "@@ -369,17 +369,10 @@ def from_setup_files(cls, path: Path) -> PackageInfo:\n             name=result.get(\"name\"),\n             version=result.get(\"version\"),\n             summary=result.get(\"description\", \"\"),\n-            requires_dist=requirements or None,\n+            requires_dist=requirements,",
        "comment_created_at": "2024-02-25T19:45:27+00:00",
        "comment_author": "dimbleby",
        "comment_body": "you probably want to catch up with #9000, which is intended to have arranged the setup reader so that either\r\n- it is confident that it has recognised one of the ways to write setup.py that it does recognise\r\n- or it throws a SetupReaderError (and we do not reach this branch)",
        "pr_file_module": null
      },
      {
        "comment_id": "1501886371",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9019,
        "pr_file": "src/poetry/inspection/info.py",
        "discussion_id": "1501859570",
        "commented_code": "@@ -369,17 +369,10 @@ def from_setup_files(cls, path: Path) -> PackageInfo:\n             name=result.get(\"name\"),\n             version=result.get(\"version\"),\n             summary=result.get(\"description\", \"\"),\n-            requires_dist=requirements or None,\n+            requires_dist=requirements,",
        "comment_created_at": "2024-02-25T19:55:55+00:00",
        "comment_author": "abn",
        "comment_body": "Awesome, yeah missed that. With that, I think the fix here is good.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1160643791",
    "pr_number": 7774,
    "pr_file": "src/poetry/repositories/installed_repository.py",
    "created_at": "2023-04-07T11:36:19+00:00",
    "commented_code": "continue\n \n                 try:\n-                    name = canonicalize_name(distribution.metadata[\"name\"])\n-                except TypeError:\n+                    name = distribution.metadata[\"name\"]",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1160643791",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7774,
        "pr_file": "src/poetry/repositories/installed_repository.py",
        "discussion_id": "1160643791",
        "commented_code": "@@ -258,8 +258,11 @@ def load(cls, env: Env, with_dependencies: bool = False) -> InstalledRepository:\n                     continue\n \n                 try:\n-                    name = canonicalize_name(distribution.metadata[\"name\"])\n-                except TypeError:\n+                    name = distribution.metadata[\"name\"]",
        "comment_created_at": "2023-04-07T11:36:19+00:00",
        "comment_author": "radoering",
        "comment_body": "I was wondering where this warning came from, but was too lazy to go into the matter. \ud83d\udc4d\r\n\r\nSince we are handling None as well as KeyError now, we should filter this deprecation warning, shouldn't we?",
        "pr_file_module": null
      },
      {
        "comment_id": "1160645866",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7774,
        "pr_file": "src/poetry/repositories/installed_repository.py",
        "discussion_id": "1160643791",
        "commented_code": "@@ -258,8 +258,11 @@ def load(cls, env: Env, with_dependencies: bool = False) -> InstalledRepository:\n                     continue\n \n                 try:\n-                    name = canonicalize_name(distribution.metadata[\"name\"])\n-                except TypeError:\n+                    name = distribution.metadata[\"name\"]",
        "comment_created_at": "2023-04-07T11:40:39+00:00",
        "comment_author": "dimbleby",
        "comment_body": "I wondered about that but I figure no-one will ever remember to remove the filter, and the warning will go away on its own in due course.\r\n\r\n(it wasn't a very good deprecation, IMO, since importlib-metadata hasn't provided an alternative that avoids the warning - there ought really to be a `distribution.metadata.get(\"name\")` available.  Anyway...)",
        "pr_file_module": null
      },
      {
        "comment_id": "1160687810",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7774,
        "pr_file": "src/poetry/repositories/installed_repository.py",
        "discussion_id": "1160643791",
        "commented_code": "@@ -258,8 +258,11 @@ def load(cls, env: Env, with_dependencies: bool = False) -> InstalledRepository:\n                     continue\n \n                 try:\n-                    name = canonicalize_name(distribution.metadata[\"name\"])\n-                except TypeError:\n+                    name = distribution.metadata[\"name\"]",
        "comment_created_at": "2023-04-07T13:04:30+00:00",
        "comment_author": "radoering",
        "comment_body": "However, it will take quite a while: https://github.com/python/importlib_metadata/blob/700f2c7d74543e3695163d5487155b92e6f04d65/importlib_metadata/_adapters.py#L11\r\n\r\nIt seems even though https://github.com/python/importlib_metadata/pull/416 has been merged into main it's not in main!?\r\n\r\nI'd prefer a filter and an explanatory comment. Even if we forget to remove it, I assume it will not really hurt. (Just added it.) Does that make sense to you?",
        "pr_file_module": null
      },
      {
        "comment_id": "1160692901",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7774,
        "pr_file": "src/poetry/repositories/installed_repository.py",
        "discussion_id": "1160643791",
        "commented_code": "@@ -258,8 +258,11 @@ def load(cls, env: Env, with_dependencies: bool = False) -> InstalledRepository:\n                     continue\n \n                 try:\n-                    name = canonicalize_name(distribution.metadata[\"name\"])\n-                except TypeError:\n+                    name = distribution.metadata[\"name\"]",
        "comment_created_at": "2023-04-07T13:13:28+00:00",
        "comment_author": "dimbleby",
        "comment_body": "Turns out there's actually a perfectly good `.get()` available, it's just that importlib-metadata hides it from mypy.\r\n\r\nI've raised https://github.com/python/importlib_metadata/pull/444 in the hope of getting them to admit that it's there.\r\n\r\nIf importlib-metadata seems amenable to that then I'd prefer to use `.get()` here, suppressing the mypy warning.  (Then when a new importlib-metadata comes out, we'll be alerted that we have an unused ignore)",
        "pr_file_module": null
      },
      {
        "comment_id": "1160710451",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7774,
        "pr_file": "src/poetry/repositories/installed_repository.py",
        "discussion_id": "1160643791",
        "commented_code": "@@ -258,8 +258,11 @@ def load(cls, env: Env, with_dependencies: bool = False) -> InstalledRepository:\n                     continue\n \n                 try:\n-                    name = canonicalize_name(distribution.metadata[\"name\"])\n-                except TypeError:\n+                    name = distribution.metadata[\"name\"]",
        "comment_created_at": "2023-04-07T13:42:42+00:00",
        "comment_author": "dimbleby",
        "comment_body": "there's also `__contains__` so we can ask if `\"name\" in distribution.metadata` without triggering warnings or needing suppressions.  So that's probably cleanest for now.\r\n\r\n(Two lookups where one would have done does slightly bother me, but I'm sure it's completely negligible in practice.)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1192991474",
    "pr_number": 7916,
    "pr_file": "src/poetry/utils/authenticator.py",
    "created_at": "2023-05-13T14:20:53+00:00",
    "commented_code": "return selected.certs(config=self._config)\n         return RepositoryCertificateConfig()\n \n+    def get_cached_file_for_url(self, url: str) -> Path | None:\n+        if self._disable_cache:",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1192991474",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7916,
        "pr_file": "src/poetry/utils/authenticator.py",
        "discussion_id": "1192991474",
        "commented_code": "@@ -463,6 +466,13 @@ def _get_certs_for_url(self, url: str) -> RepositoryCertificateConfig:\n             return selected.certs(config=self._config)\n         return RepositoryCertificateConfig()\n \n+    def get_cached_file_for_url(self, url: str) -> Path | None:\n+        if self._disable_cache:",
        "comment_created_at": "2023-05-13T14:20:53+00:00",
        "comment_author": "dimbleby",
        "comment_body": "if you instead ask `if self._cache_control is None:` - which is also done elsewhere in this code - then the later cast will become unnecessary\r\n\r\n(generally prefer to avoid casting.  If and when someone submits an MR that makes the cast incorrect, mypy has no way to say so.  So if there was not a simple way around this, would prefer to assert that self._cache_control is not None)",
        "pr_file_module": null
      },
      {
        "comment_id": "1192992585",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7916,
        "pr_file": "src/poetry/utils/authenticator.py",
        "discussion_id": "1192991474",
        "commented_code": "@@ -463,6 +466,13 @@ def _get_certs_for_url(self, url: str) -> RepositoryCertificateConfig:\n             return selected.certs(config=self._config)\n         return RepositoryCertificateConfig()\n \n+    def get_cached_file_for_url(self, url: str) -> Path | None:\n+        if self._disable_cache:",
        "comment_created_at": "2023-05-13T14:29:48+00:00",
        "comment_author": "ralbertazzi",
        "comment_body": "Hadn't realized that `disable_cache` implies `self._cache_control is None`, although that's pretty obvious now I must admit :D thanks!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1278272408",
    "pr_number": 8218,
    "pr_file": "tests/console/commands/test_new.py",
    "created_at": "2023-07-29T09:18:02+00:00",
    "commented_code": "else:\n         package_include = {\"include\": package_path.parts[0]}\n \n+    name = poetry.local_config.get(\"name\")\n     packages = poetry.local_config.get(\"packages\")\n \n     if not packages:\n-        assert poetry.local_config.get(\"name\") == package_include.get(\"include\")\n+        assert module_name(name) == package_include.get(\"include\") if name else \"\"",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1278272408",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8218,
        "pr_file": "tests/console/commands/test_new.py",
        "discussion_id": "1278272408",
        "commented_code": "@@ -55,10 +57,11 @@ def verify_project_directory(\n     else:\n         package_include = {\"include\": package_path.parts[0]}\n \n+    name = poetry.local_config.get(\"name\")\n     packages = poetry.local_config.get(\"packages\")\n \n     if not packages:\n-        assert poetry.local_config.get(\"name\") == package_include.get(\"include\")\n+        assert module_name(name) == package_include.get(\"include\") if name else \"\"",
        "comment_created_at": "2023-07-29T09:18:02+00:00",
        "comment_author": "radoering",
        "comment_body": "```suggestion\r\n        assert module_name(name) == package_include.get(\"include\")\r\n```\r\n\r\n`name` is always set isn't it?\r\n\r\nIf I don't miss anything the expression wouldn't work if it wasn't set because there is a missing bracket. It had to be:\r\n\r\n```\r\nassert module_name(name) == (package_include.get(\"include\") if name else \"\")\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1278308978",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8218,
        "pr_file": "tests/console/commands/test_new.py",
        "discussion_id": "1278272408",
        "commented_code": "@@ -55,10 +57,11 @@ def verify_project_directory(\n     else:\n         package_include = {\"include\": package_path.parts[0]}\n \n+    name = poetry.local_config.get(\"name\")\n     packages = poetry.local_config.get(\"packages\")\n \n     if not packages:\n-        assert poetry.local_config.get(\"name\") == package_include.get(\"include\")\n+        assert module_name(name) == package_include.get(\"include\") if name else \"\"",
        "comment_created_at": "2023-07-29T14:59:28+00:00",
        "comment_author": "wdonofrio",
        "comment_body": "`name` is always set because `module_name()` expects a `str`. Therefore your suggestion does not pass mypy.\r\n\r\nHowever, I think this may be a better approach. What do you think?\r\n```python\r\n    name = poetry.local_config.get(\"name\", \"\")\r\n    packages = poetry.local_config.get(\"packages\")\r\n\r\n    if not packages:\r\n        assert module_name(name) == package_include.get(\"include\")\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1279849704",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8218,
        "pr_file": "tests/console/commands/test_new.py",
        "discussion_id": "1278272408",
        "commented_code": "@@ -55,10 +57,11 @@ def verify_project_directory(\n     else:\n         package_include = {\"include\": package_path.parts[0]}\n \n+    name = poetry.local_config.get(\"name\")\n     packages = poetry.local_config.get(\"packages\")\n \n     if not packages:\n-        assert poetry.local_config.get(\"name\") == package_include.get(\"include\")\n+        assert module_name(name) == package_include.get(\"include\") if name else \"\"",
        "comment_created_at": "2023-07-31T20:30:13+00:00",
        "comment_author": "radoering",
        "comment_body": "LGTM \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1316316548",
    "pr_number": 8394,
    "pr_file": "src/poetry/utils/authenticator.py",
    "created_at": "2023-09-05T19:34:24+00:00",
    "commented_code": "def request(\n         self, method: str, url: str, raise_for_status: bool = True, **kwargs: Any\n     ) -> requests.Response:\n-        headers = kwargs.get(\"headers\")\n+        headers = kwargs.get(\"headers\", {}) or {}",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1316316548",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8394,
        "pr_file": "src/poetry/utils/authenticator.py",
        "discussion_id": "1316316548",
        "commented_code": "@@ -193,7 +195,8 @@ def authenticated_url(self, url: str) -> str:\n     def request(\n         self, method: str, url: str, raise_for_status: bool = True, **kwargs: Any\n     ) -> requests.Response:\n-        headers = kwargs.get(\"headers\")\n+        headers = kwargs.get(\"headers\", {}) or {}",
        "comment_created_at": "2023-09-05T19:34:24+00:00",
        "comment_author": "dimbleby",
        "comment_body": "`or {}` isn't doing anything useful\r\n\r\ncf https://github.com/python-poetry/poetry/blob/02448cf7f184dea204156f7dcb620a4f01a0068e/src/poetry/publishing/uploader.py#L82, which does this on the session - it would be consistent here to do the work in `create_session()`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1316373984",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8394,
        "pr_file": "src/poetry/utils/authenticator.py",
        "discussion_id": "1316316548",
        "commented_code": "@@ -193,7 +195,8 @@ def authenticated_url(self, url: str) -> str:\n     def request(\n         self, method: str, url: str, raise_for_status: bool = True, **kwargs: Any\n     ) -> requests.Response:\n-        headers = kwargs.get(\"headers\")\n+        headers = kwargs.get(\"headers\", {}) or {}",
        "comment_created_at": "2023-09-05T20:28:07+00:00",
        "comment_author": "mtricolici98",
        "comment_body": "I think `or {}` covers the potential of there being a `headers` key in the `dict` with a `None` value. \r\n\r\n\r\nI will apply the UA to the session itself. Thank you for the suggestion. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "275062979",
    "pr_number": 1035,
    "pr_file": "poetry/utils/exporter.py",
    "created_at": "2019-04-12T21:00:24+00:00",
    "commented_code": "line += \"\n\"\n             content += line\n \n-        with filepath.open(\"w\", encoding=\"utf-8\") as f:\n-            f.write(decode(content))\n+        self._output(content, cwd, output)\n+\n+    def _output(self, content, cwd, output=None):  # type: (str, Path, str) -> None\n+        decoded = decode(content)\n+        if output is not None:",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "275062979",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 1035,
        "pr_file": "poetry/utils/exporter.py",
        "discussion_id": "275062979",
        "commented_code": "@@ -59,5 +60,13 @@ def _export_requirements_txt(\n             line += \"\\n\"\n             content += line\n \n-        with filepath.open(\"w\", encoding=\"utf-8\") as f:\n-            f.write(decode(content))\n+        self._output(content, cwd, output)\n+\n+    def _output(self, content, cwd, output=None):  # type: (str, Path, str) -> None\n+        decoded = decode(content)\n+        if output is not None:",
        "comment_created_at": "2019-04-12T21:00:24+00:00",
        "comment_author": "drunkwcodes",
        "comment_body": "Please write `if output is None` condition first because it's default value.\r\n```suggestion\r\n        if output is None:\r\n            sys.stdout.write(decoded)\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "275106076",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 1035,
        "pr_file": "poetry/utils/exporter.py",
        "discussion_id": "275062979",
        "commented_code": "@@ -59,5 +60,13 @@ def _export_requirements_txt(\n             line += \"\\n\"\n             content += line\n \n-        with filepath.open(\"w\", encoding=\"utf-8\") as f:\n-            f.write(decode(content))\n+        self._output(content, cwd, output)\n+\n+    def _output(self, content, cwd, output=None):  # type: (str, Path, str) -> None\n+        decoded = decode(content)\n+        if output is not None:",
        "comment_created_at": "2019-04-13T05:54:11+00:00",
        "comment_author": "yggi49",
        "comment_body": "Good point; fixed with commit https://github.com/sdispater/poetry/pull/1035/commits/36cb4300894f9fb6114971df1b546db31fb46f4e.",
        "pr_file_module": null
      }
    ]
  }
]