[
  {
    "discussion_id": "1650071311",
    "pr_number": 9507,
    "pr_file": "tests/vcs/git/test_backend.py",
    "created_at": "2024-06-23T13:03:28+00:00",
    "commented_code": "path = \"../other-repo\"\n     result = urlpathjoin(url, path)\n     assert result == expected_result\n+\n+\n+def test_resolve() -> None:\n+    git_ref = GitRefSpec(\"main\", \"1234\", \"v2\")\n+\n+    assert git_ref.branch == \"main\"\n+    assert git_ref.revision == \"1234\"\n+    assert git_ref.tag == \"v2\"\n+    assert git_ref.ref == b\"HEAD\"\n+\n+\n+def test_git_ref_spec_resolve_branch(fetch_pack_result: FetchPackResult) -> None:\n+    mock_fetch_pack_result = fetch_pack_result\n+\n+    refspec = GitRefSpec(branch=\"main\")\n+    refspec.resolve(mock_fetch_pack_result)\n+\n+    assert refspec.ref == b\"refs/heads/main\"\n+    assert refspec.branch == \"main\"\n+    assert refspec.revision is None\n+    assert refspec.tag is None\n+\n+\n+def test_git_ref_spec_resolve_tag(fetch_pack_result: FetchPackResult) -> None:\n+    mock_fetch_pack_result = fetch_pack_result\n+\n+    refspec = GitRefSpec(revision=\"v1.0.0\")\n+    refspec.resolve(mock_fetch_pack_result)\n+\n+    assert refspec.ref == annotated_tag(b\"refs/tags/v1.0.0\")\n+    assert refspec.branch is None\n+    assert refspec.revision is None\n+    assert refspec.tag == \"v1.0.0\"\n+\n+\n+def test_git_ref_spec_resolve_sha(fetch_pack_result: FetchPackResult) -> None:\n+    mock_fetch_pack_result = fetch_pack_result\n+\n+    refspec = GitRefSpec(revision=\"abc\")\n+\n+    refspec.resolve(mock_fetch_pack_result)\n+\n+    assert refspec.ref == b\"refs/heads/main\"\n+    assert refspec.branch is None\n+    assert refspec.tag is None\n+    assert refspec.revision == \"abc\"",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1650071311",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9507,
        "pr_file": "tests/vcs/git/test_backend.py",
        "discussion_id": "1650071311",
        "commented_code": "@@ -75,3 +125,49 @@ def test_urlpathjoin(url: str, expected_result: str) -> None:\n     path = \"../other-repo\"\n     result = urlpathjoin(url, path)\n     assert result == expected_result\n+\n+\n+def test_resolve() -> None:\n+    git_ref = GitRefSpec(\"main\", \"1234\", \"v2\")\n+\n+    assert git_ref.branch == \"main\"\n+    assert git_ref.revision == \"1234\"\n+    assert git_ref.tag == \"v2\"\n+    assert git_ref.ref == b\"HEAD\"\n+\n+\n+def test_git_ref_spec_resolve_branch(fetch_pack_result: FetchPackResult) -> None:\n+    mock_fetch_pack_result = fetch_pack_result\n+\n+    refspec = GitRefSpec(branch=\"main\")\n+    refspec.resolve(mock_fetch_pack_result)\n+\n+    assert refspec.ref == b\"refs/heads/main\"\n+    assert refspec.branch == \"main\"\n+    assert refspec.revision is None\n+    assert refspec.tag is None\n+\n+\n+def test_git_ref_spec_resolve_tag(fetch_pack_result: FetchPackResult) -> None:\n+    mock_fetch_pack_result = fetch_pack_result\n+\n+    refspec = GitRefSpec(revision=\"v1.0.0\")\n+    refspec.resolve(mock_fetch_pack_result)\n+\n+    assert refspec.ref == annotated_tag(b\"refs/tags/v1.0.0\")\n+    assert refspec.branch is None\n+    assert refspec.revision is None\n+    assert refspec.tag == \"v1.0.0\"\n+\n+\n+def test_git_ref_spec_resolve_sha(fetch_pack_result: FetchPackResult) -> None:\n+    mock_fetch_pack_result = fetch_pack_result\n+\n+    refspec = GitRefSpec(revision=\"abc\")\n+\n+    refspec.resolve(mock_fetch_pack_result)\n+\n+    assert refspec.ref == b\"refs/heads/main\"\n+    assert refspec.branch is None\n+    assert refspec.tag is None\n+    assert refspec.revision == \"abc\"",
        "comment_created_at": "2024-06-23T13:03:28+00:00",
        "comment_author": "radoering",
        "comment_body": "Can we merge these three `ref_spec_resolve` tests into one parameterized test?\r\n\r\nThere are still some uncovered branches in `_normalise`, e.g. specifying a `branch` as `revision`, which can be covered easily. If we add more test variants, a parameterized tests will make even more sense.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2147422093",
    "pr_number": 10415,
    "pr_file": "tests/console/commands/env/test_activate.py",
    "created_at": "2025-06-15T04:23:11+00:00",
    "commented_code": "assert line == f'{prefix}\"{tmp_venv.bin_dir / ext!s}\"'\n \n \n+@pytest.mark.parametrize(\n+    \"shell, ext, expected_prefix\",\n+    (\n+        (\"cmd\", \"activate.bat\", \"\"),\n+        (\"pwsh\", \"activate.ps1\", \"& \"),\n+        (\"powershell\", \"activate.ps1\", \"& \"),\n+    ),\n+)\n+@pytest.mark.skipif(not WINDOWS, reason=\"Only Windows shells\")\n+def test_env_activate_windows_shells_get_quoted_path_only(\n+    tmp_venv: VirtualEnv,\n+    mocker: MockerFixture,\n+    tester: CommandTester,\n+    shell: str,\n+    ext: str,\n+    expected_prefix: str,\n+) -> None:\n+    mocker.patch(\"shellingham.detect_shell\", return_value=(shell, None))\n+    mocker.patch(\"poetry.utils.env.EnvManager.get\", return_value=tmp_venv)\n+\n+    tester.execute()\n+\n+    line = tester.io.fetch_output().rstrip(\"\n\")\n+    expected = f'{expected_prefix}\"{tmp_venv.bin_dir / ext!s}\"'\n+    assert line == expected\n+\n+\n+@pytest.mark.parametrize(\n+    \"shell, command, ext\",\n+    (\n+        (\"bash\", \"source\", \"\"),\n+        (\"zsh\", \"source\", \"\"),\n+        (\"fish\", \"source\", \".fish\"),\n+        (\"nu\", \"overlay use\", \".nu\"),\n+        pytest.param(\n+            \"csh\",\n+            \"source\",\n+            \".csh\",\n+            marks=pytest.mark.skipif(\n+                WINDOWS, reason=\"csh activator not created on Windows\"\n+            ),\n+        ),\n+        pytest.param(\n+            \"tcsh\",\n+            \"source\",\n+            \".csh\",\n+            marks=pytest.mark.skipif(\n+                WINDOWS, reason=\"tcsh activator not created on Windows\"\n+            ),\n+        ),\n+        (\"sh\", \"source\", \"\"),\n+    ),\n+)\n+def test_env_activate_unix_shells_get_command_with_path(",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "2147422093",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 10415,
        "pr_file": "tests/console/commands/env/test_activate.py",
        "discussion_id": "2147422093",
        "commented_code": "@@ -77,6 +77,118 @@ def test_env_activate_prints_correct_script_on_windows(\n     assert line == f'{prefix}\"{tmp_venv.bin_dir / ext!s}\"'\n \n \n+@pytest.mark.parametrize(\n+    \"shell, ext, expected_prefix\",\n+    (\n+        (\"cmd\", \"activate.bat\", \"\"),\n+        (\"pwsh\", \"activate.ps1\", \"& \"),\n+        (\"powershell\", \"activate.ps1\", \"& \"),\n+    ),\n+)\n+@pytest.mark.skipif(not WINDOWS, reason=\"Only Windows shells\")\n+def test_env_activate_windows_shells_get_quoted_path_only(\n+    tmp_venv: VirtualEnv,\n+    mocker: MockerFixture,\n+    tester: CommandTester,\n+    shell: str,\n+    ext: str,\n+    expected_prefix: str,\n+) -> None:\n+    mocker.patch(\"shellingham.detect_shell\", return_value=(shell, None))\n+    mocker.patch(\"poetry.utils.env.EnvManager.get\", return_value=tmp_venv)\n+\n+    tester.execute()\n+\n+    line = tester.io.fetch_output().rstrip(\"\\n\")\n+    expected = f'{expected_prefix}\"{tmp_venv.bin_dir / ext!s}\"'\n+    assert line == expected\n+\n+\n+@pytest.mark.parametrize(\n+    \"shell, command, ext\",\n+    (\n+        (\"bash\", \"source\", \"\"),\n+        (\"zsh\", \"source\", \"\"),\n+        (\"fish\", \"source\", \".fish\"),\n+        (\"nu\", \"overlay use\", \".nu\"),\n+        pytest.param(\n+            \"csh\",\n+            \"source\",\n+            \".csh\",\n+            marks=pytest.mark.skipif(\n+                WINDOWS, reason=\"csh activator not created on Windows\"\n+            ),\n+        ),\n+        pytest.param(\n+            \"tcsh\",\n+            \"source\",\n+            \".csh\",\n+            marks=pytest.mark.skipif(\n+                WINDOWS, reason=\"tcsh activator not created on Windows\"\n+            ),\n+        ),\n+        (\"sh\", \"source\", \"\"),\n+    ),\n+)\n+def test_env_activate_unix_shells_get_command_with_path(",
        "comment_created_at": "2025-06-15T04:23:11+00:00",
        "comment_author": "radoering",
        "comment_body": "This looks like a copy of `test_env_activate_prints_correct_script` that also works for Windows. Can we just edit the original test instead of creating a new one?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "748798072",
    "pr_number": 3375,
    "pr_file": "tests/utils/test_env.py",
    "created_at": "2021-11-14T04:57:18+00:00",
    "commented_code": "m.side_effect = original_rmtree  # Avoid teardown using `err_on_rm_venv_only`\n \n \n+def test_remove_keeps_dir_if_not_deleteable_os_err_20(",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "748798072",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 3375,
        "pr_file": "tests/utils/test_env.py",
        "discussion_id": "748798072",
        "commented_code": "@@ -619,6 +621,55 @@ def err_on_rm_venv_only(path, *args, **kwargs):\n     m.side_effect = original_rmtree  # Avoid teardown using `err_on_rm_venv_only`\n \n \n+def test_remove_keeps_dir_if_not_deleteable_os_err_20(",
        "comment_created_at": "2021-11-14T04:57:18+00:00",
        "comment_author": "neersighted",
        "comment_body": "Let's parameterize this whole test for different `errno` constants instead of doing this copy-and-paste.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1641740024",
    "pr_number": 9491,
    "pr_file": "tests/vcs/git/test_backend.py",
    "created_at": "2024-06-16T08:43:19+00:00",
    "commented_code": "def test_get_name_from_source_url(url: str) -> None:\n     name = Git.get_name_from_source_url(url)\n     assert name == \"poetry\"\n+\n+\n+def test_annotated_tag() -> None:",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1641740024",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9491,
        "pr_file": "tests/vcs/git/test_backend.py",
        "discussion_id": "1641740024",
        "commented_code": "@@ -41,3 +47,25 @@ def test_invalid_revision_sha_max_len() -> None:\n def test_get_name_from_source_url(url: str) -> None:\n     name = Git.get_name_from_source_url(url)\n     assert name == \"poetry\"\n+\n+\n+def test_annotated_tag() -> None:",
        "comment_created_at": "2024-06-16T08:43:19+00:00",
        "comment_author": "radoering",
        "comment_body": "Can you make the test `parametrized` to test passing `bytes` as well as `str`, please?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1641740149",
    "pr_number": 9491,
    "pr_file": "tests/vcs/git/test_backend.py",
    "created_at": "2024-06-16T08:44:06+00:00",
    "commented_code": "def test_get_name_from_source_url(url: str) -> None:\n     name = Git.get_name_from_source_url(url)\n     assert name == \"poetry\"\n+\n+\n+def test_annotated_tag() -> None:\n+    tag = annotated_tag(\"my-tag\")\n+    assert tag == b\"my-tag^{}\"\n+\n+\n+def test_get_remote_url() -> None:\n+    repo = MagicMock(spec=Repo)\n+    repo.get_config.return_value.get.return_value = (\n+        b\"https://github.com/python-poetry/poetry.git\"\n+    )\n+\n+    assert Git.get_remote_url(repo) == \"https://github.com/python-poetry/poetry.git\"\n+\n+\n+def test_urlpathjoin() -> None:",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1641740149",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9491,
        "pr_file": "tests/vcs/git/test_backend.py",
        "discussion_id": "1641740149",
        "commented_code": "@@ -41,3 +47,25 @@ def test_invalid_revision_sha_max_len() -> None:\n def test_get_name_from_source_url(url: str) -> None:\n     name = Git.get_name_from_source_url(url)\n     assert name == \"poetry\"\n+\n+\n+def test_annotated_tag() -> None:\n+    tag = annotated_tag(\"my-tag\")\n+    assert tag == b\"my-tag^{}\"\n+\n+\n+def test_get_remote_url() -> None:\n+    repo = MagicMock(spec=Repo)\n+    repo.get_config.return_value.get.return_value = (\n+        b\"https://github.com/python-poetry/poetry.git\"\n+    )\n+\n+    assert Git.get_remote_url(repo) == \"https://github.com/python-poetry/poetry.git\"\n+\n+\n+def test_urlpathjoin() -> None:",
        "comment_created_at": "2024-06-16T08:44:06+00:00",
        "comment_author": "radoering",
        "comment_body": "Can you make the test `parametrized` to add an example with a trailing slash, e.g. `\"ssh://git@github.com/org/repo/\"`, please?",
        "pr_file_module": null
      },
      {
        "comment_id": "1641788655",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9491,
        "pr_file": "tests/vcs/git/test_backend.py",
        "discussion_id": "1641740149",
        "commented_code": "@@ -41,3 +47,25 @@ def test_invalid_revision_sha_max_len() -> None:\n def test_get_name_from_source_url(url: str) -> None:\n     name = Git.get_name_from_source_url(url)\n     assert name == \"poetry\"\n+\n+\n+def test_annotated_tag() -> None:\n+    tag = annotated_tag(\"my-tag\")\n+    assert tag == b\"my-tag^{}\"\n+\n+\n+def test_get_remote_url() -> None:\n+    repo = MagicMock(spec=Repo)\n+    repo.get_config.return_value.get.return_value = (\n+        b\"https://github.com/python-poetry/poetry.git\"\n+    )\n+\n+    assert Git.get_remote_url(repo) == \"https://github.com/python-poetry/poetry.git\"\n+\n+\n+def test_urlpathjoin() -> None:",
        "comment_created_at": "2024-06-16T11:13:23+00:00",
        "comment_author": "indrajithi",
        "comment_body": "I have made the changes. LMK if I missed something or need to make any further changes. @radoering ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1507550158",
    "pr_number": 9067,
    "pr_file": "tests/console/commands/test_build.py",
    "created_at": "2024-02-29T13:09:41+00:00",
    "commented_code": "assert all(archive.exists() for archive in build_artifacts)\n \n \n+@pytest.mark.parametrize(\"clean\", [True, False])\n+def test_build_with_clean(\n+    tmp_tester: CommandTester, tmp_project_path: Path, tmp_poetry: Poetry, clean: bool\n+) -> None:\n+    dist_dir = tmp_project_path.joinpath(\"dist\")\n+    dist_dir.joinpath(\"hello\").touch(exist_ok=True)\n+\n+    tmp_tester.execute(\"--clean\" if clean else \"\")\n+    build_artifacts = tuple(dist_dir.glob(\"*\"))\n+\n+    assert len(build_artifacts) == 2 if clean else 3",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1507550158",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9067,
        "pr_file": "tests/console/commands/test_build.py",
        "discussion_id": "1507550158",
        "commented_code": "@@ -82,6 +83,35 @@ def test_build_with_local_version_label(\n     assert all(archive.exists() for archive in build_artifacts)\n \n \n+@pytest.mark.parametrize(\"clean\", [True, False])\n+def test_build_with_clean(\n+    tmp_tester: CommandTester, tmp_project_path: Path, tmp_poetry: Poetry, clean: bool\n+) -> None:\n+    dist_dir = tmp_project_path.joinpath(\"dist\")\n+    dist_dir.joinpath(\"hello\").touch(exist_ok=True)\n+\n+    tmp_tester.execute(\"--clean\" if clean else \"\")\n+    build_artifacts = tuple(dist_dir.glob(\"*\"))\n+\n+    assert len(build_artifacts) == 2 if clean else 3",
        "comment_created_at": "2024-02-29T13:09:41+00:00",
        "comment_author": "Secrus",
        "comment_body": "Could we put the amount of artifacts and `--clean` param (line 93) in parametrize? I don't like the idea of conditionals in tests. It's a nitpick though, if you disagree, disregard it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1507560114",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9067,
        "pr_file": "tests/console/commands/test_build.py",
        "discussion_id": "1507550158",
        "commented_code": "@@ -82,6 +83,35 @@ def test_build_with_local_version_label(\n     assert all(archive.exists() for archive in build_artifacts)\n \n \n+@pytest.mark.parametrize(\"clean\", [True, False])\n+def test_build_with_clean(\n+    tmp_tester: CommandTester, tmp_project_path: Path, tmp_poetry: Poetry, clean: bool\n+) -> None:\n+    dist_dir = tmp_project_path.joinpath(\"dist\")\n+    dist_dir.joinpath(\"hello\").touch(exist_ok=True)\n+\n+    tmp_tester.execute(\"--clean\" if clean else \"\")\n+    build_artifacts = tuple(dist_dir.glob(\"*\"))\n+\n+    assert len(build_artifacts) == 2 if clean else 3",
        "comment_created_at": "2024-02-29T13:17:35+00:00",
        "comment_author": "abn",
        "comment_body": "In principle I agree. However since the test is what is creating the files, I think the code block needs to specify it rather than a parameter.  We can make it more clearer if you prefer? For example do one of he following.\r\n\r\n1. Move the ternary conditional into an explicit block.\r\n2. Make a count of the existing files in the directory and then assert it is `count + 2`.\r\n\r\nBut I suspect neither would be qualitatively better.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1158426532",
    "pr_number": 6845,
    "pr_file": "tests/console/commands/test_install.py",
    "created_at": "2023-04-05T12:06:49+00:00",
    "commented_code": "else:\n         with pytest.raises(ValueError, match=\"does not exist\"):\n             tester.execute(options)\n+\n+\n+def test_no_path_is_passed_to_installer(tester: CommandTester, mocker: MockerFixture):",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1158426532",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 6845,
        "pr_file": "tests/console/commands/test_install.py",
        "discussion_id": "1158426532",
        "commented_code": "@@ -347,3 +347,15 @@ def test_install_path_dependency_does_not_exist(\n     else:\n         with pytest.raises(ValueError, match=\"does not exist\"):\n             tester.execute(options)\n+\n+\n+def test_no_path_is_passed_to_installer(tester: CommandTester, mocker: MockerFixture):",
        "comment_created_at": "2023-04-05T12:06:49+00:00",
        "comment_author": "radoering",
        "comment_body": "```suggestion\r\ndef test_no_directory_is_passed_to_installer(tester: CommandTester, mocker: MockerFixture):\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1158431368",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 6845,
        "pr_file": "tests/console/commands/test_install.py",
        "discussion_id": "1158426532",
        "commented_code": "@@ -347,3 +347,15 @@ def test_install_path_dependency_does_not_exist(\n     else:\n         with pytest.raises(ValueError, match=\"does not exist\"):\n             tester.execute(options)\n+\n+\n+def test_no_path_is_passed_to_installer(tester: CommandTester, mocker: MockerFixture):",
        "comment_created_at": "2023-04-05T12:11:38+00:00",
        "comment_author": "radoering",
        "comment_body": "Can you move this somewhere near the other \"pass to the installer\" tests, e.g. after `test_compile_option_is_passed_to_the_installer` and add a negative test via `pytest.mark.parametrize`  (`_skip_directory` is `False` if option is not passed)",
        "pr_file_module": null
      },
      {
        "comment_id": "1158641588",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 6845,
        "pr_file": "tests/console/commands/test_install.py",
        "discussion_id": "1158426532",
        "commented_code": "@@ -347,3 +347,15 @@ def test_install_path_dependency_does_not_exist(\n     else:\n         with pytest.raises(ValueError, match=\"does not exist\"):\n             tester.execute(options)\n+\n+\n+def test_no_path_is_passed_to_installer(tester: CommandTester, mocker: MockerFixture):",
        "comment_created_at": "2023-04-05T14:56:54+00:00",
        "comment_author": "adriangb",
        "comment_body": "donzo",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1158439635",
    "pr_number": 6845,
    "pr_file": "tests/installation/test_installer.py",
    "created_at": "2023-04-05T12:19:24+00:00",
    "commented_code": "assert installer.executor.installations_count == 6\n \n \n+def test_run_installs_with_local_poetry_directory_transitive_no_path(",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1158439635",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 6845,
        "pr_file": "tests/installation/test_installer.py",
        "discussion_id": "1158439635",
        "commented_code": "@@ -1283,6 +1283,49 @@ def test_run_installs_with_local_poetry_directory_transitive(\n     assert installer.executor.installations_count == 6\n \n \n+def test_run_installs_with_local_poetry_directory_transitive_no_path(",
        "comment_created_at": "2023-04-05T12:19:24+00:00",
        "comment_author": "radoering",
        "comment_body": "Can you integrate this with `pytest.mark.parametrize` in the previous test?\r\n\r\n`skip_directory=False` -> `directory_installs`, `installations_count == 6`\r\n`skip_directory=True` -> `not directory_installs`, `installations_count == ...`",
        "pr_file_module": null
      },
      {
        "comment_id": "1158648308",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 6845,
        "pr_file": "tests/installation/test_installer.py",
        "discussion_id": "1158439635",
        "commented_code": "@@ -1283,6 +1283,49 @@ def test_run_installs_with_local_poetry_directory_transitive(\n     assert installer.executor.installations_count == 6\n \n \n+def test_run_installs_with_local_poetry_directory_transitive_no_path(",
        "comment_created_at": "2023-04-05T15:02:00+00:00",
        "comment_author": "adriangb",
        "comment_body": "did it",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1193173215",
    "pr_number": 7920,
    "pr_file": "tests/console/commands/test_add.py",
    "created_at": "2023-05-14T16:16:00+00:00",
    "commented_code": "str(e.value)\n             == \"You can only specify one package when using the --extras option\"\n         )\n+\n+\n+@pytest.mark.parametrize(\"command\", [\"foo\", \"foo --lock\"])",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1193173215",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7920,
        "pr_file": "tests/console/commands/test_add.py",
        "discussion_id": "1193173215",
        "commented_code": "@@ -1506,3 +1511,29 @@ def test_add_extras_only_accepts_one_package(\n             str(e.value)\n             == \"You can only specify one package when using the --extras option\"\n         )\n+\n+\n+@pytest.mark.parametrize(\"command\", [\"foo\", \"foo --lock\"])",
        "comment_created_at": "2023-05-14T16:16:00+00:00",
        "comment_author": "radoering",
        "comment_body": "```suggestion\r\n@pytest.mark.parametrize(\"command\", [\"foo\", \"foo --lock\"])\r\n@pytest.mark.parametrize((\"locked\", \"expected_docker\"), [(True, \"4.3.1\"), (False, \"4.3.2\")])\r\n```\r\n\r\nThinking about the `poetry.locker.locked(True)`, I just came up with an idea to make the test more robust.",
        "pr_file_module": null
      },
      {
        "comment_id": "1193174236",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 7920,
        "pr_file": "tests/console/commands/test_add.py",
        "discussion_id": "1193173215",
        "commented_code": "@@ -1506,3 +1511,29 @@ def test_add_extras_only_accepts_one_package(\n             str(e.value)\n             == \"You can only specify one package when using the --extras option\"\n         )\n+\n+\n+@pytest.mark.parametrize(\"command\", [\"foo\", \"foo --lock\"])",
        "comment_created_at": "2023-05-14T16:24:13+00:00",
        "comment_author": "ralbertazzi",
        "comment_body": "Great suggestion! I just added it ;)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "748800230",
    "pr_number": 3315,
    "pr_file": "tests/publishing/test_uploader.py",
    "created_at": "2021-11-14T05:26:10+00:00",
    "commented_code": ")\n \n \n+def test_uploader_properly_handles_308_redirects(http):",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "748800230",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 3315,
        "pr_file": "tests/publishing/test_uploader.py",
        "discussion_id": "748800230",
        "commented_code": "@@ -46,6 +46,18 @@ def test_uploader_properly_handles_301_redirects(http):\n     )\n \n \n+def test_uploader_properly_handles_308_redirects(http):",
        "comment_created_at": "2021-11-14T05:26:10+00:00",
        "comment_author": "neersighted",
        "comment_body": "To avoid copy-pasting, let's parameterize this test instead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1226820347",
    "pr_number": 8015,
    "pr_file": "tests/console/commands/test_check.py",
    "created_at": "2023-06-12T15:04:54+00:00",
    "commented_code": "\"\"\"\n \n     assert tester.io.fetch_output() == expected\n+\n+\n+def test_check_lock_outdated(\n+    command_tester_factory: CommandTesterFactory,\n+    poetry_with_outdated_lockfile: Poetry,\n+    http: type[httpretty.httpretty],\n+) -> None:\n+    http.disable()\n+\n+    locker = Locker(\n+        lock=poetry_with_outdated_lockfile.pyproject.file.path.parent / \"poetry.lock\",\n+        local_config=poetry_with_outdated_lockfile.locker._local_config,\n+    )\n+    poetry_with_outdated_lockfile.set_locker(locker)\n+\n+    tester = command_tester_factory(\"check\", poetry=poetry_with_outdated_lockfile)\n+    status_code = tester.execute(\"--lock\")",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1226820347",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8015,
        "pr_file": "tests/console/commands/test_check.py",
        "discussion_id": "1226820347",
        "commented_code": "@@ -74,3 +111,51 @@ def test_check_private(\n \"\"\"\n \n     assert tester.io.fetch_output() == expected\n+\n+\n+def test_check_lock_outdated(\n+    command_tester_factory: CommandTesterFactory,\n+    poetry_with_outdated_lockfile: Poetry,\n+    http: type[httpretty.httpretty],\n+) -> None:\n+    http.disable()\n+\n+    locker = Locker(\n+        lock=poetry_with_outdated_lockfile.pyproject.file.path.parent / \"poetry.lock\",\n+        local_config=poetry_with_outdated_lockfile.locker._local_config,\n+    )\n+    poetry_with_outdated_lockfile.set_locker(locker)\n+\n+    tester = command_tester_factory(\"check\", poetry=poetry_with_outdated_lockfile)\n+    status_code = tester.execute(\"--lock\")",
        "comment_created_at": "2023-06-12T15:04:54+00:00",
        "comment_author": "radoering",
        "comment_body": "We should parametrize the test since it should make no difference if `--lock` is passed or not anymore.",
        "pr_file_module": null
      },
      {
        "comment_id": "1226870260",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8015,
        "pr_file": "tests/console/commands/test_check.py",
        "discussion_id": "1226820347",
        "commented_code": "@@ -74,3 +111,51 @@ def test_check_private(\n \"\"\"\n \n     assert tester.io.fetch_output() == expected\n+\n+\n+def test_check_lock_outdated(\n+    command_tester_factory: CommandTesterFactory,\n+    poetry_with_outdated_lockfile: Poetry,\n+    http: type[httpretty.httpretty],\n+) -> None:\n+    http.disable()\n+\n+    locker = Locker(\n+        lock=poetry_with_outdated_lockfile.pyproject.file.path.parent / \"poetry.lock\",\n+        local_config=poetry_with_outdated_lockfile.locker._local_config,\n+    )\n+    poetry_with_outdated_lockfile.set_locker(locker)\n+\n+    tester = command_tester_factory(\"check\", poetry=poetry_with_outdated_lockfile)\n+    status_code = tester.execute(\"--lock\")",
        "comment_created_at": "2023-06-12T15:42:30+00:00",
        "comment_author": "samypr100",
        "comment_body": "Good catch, changed in 275ff17fc269c79d21805b6f5e3c1a1850f8c808",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1446320796",
    "pr_number": 8851,
    "pr_file": "tests/installation/test_executor.py",
    "created_at": "2024-01-09T16:27:14+00:00",
    "commented_code": "output = io.fetch_output().strip()\n     assert output.startswith(expected_start)\n     assert output.endswith(expected_end)\n+\n+\n+def test_executor_known_hash_sha512(",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1446320796",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8851,
        "pr_file": "tests/installation/test_executor.py",
        "discussion_id": "1446320796",
        "commented_code": "@@ -1456,3 +1456,149 @@ def test_other_error(\n     output = io.fetch_output().strip()\n     assert output.startswith(expected_start)\n     assert output.endswith(expected_end)\n+\n+\n+def test_executor_known_hash_sha512(",
        "comment_created_at": "2024-01-09T16:27:14+00:00",
        "comment_author": "radoering",
        "comment_body": "Is it necessary to have three similar test cases or is one parameterized test case sufficient?",
        "pr_file_module": null
      },
      {
        "comment_id": "1447592219",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8851,
        "pr_file": "tests/installation/test_executor.py",
        "discussion_id": "1446320796",
        "commented_code": "@@ -1456,3 +1456,149 @@ def test_other_error(\n     output = io.fetch_output().strip()\n     assert output.startswith(expected_start)\n     assert output.endswith(expected_end)\n+\n+\n+def test_executor_known_hash_sha512(",
        "comment_created_at": "2024-01-10T16:01:27+00:00",
        "comment_author": "radoering",
        "comment_body": "If you now add `packages_files` and `expected_url_reference` as parameters (like [that](https://github.com/python-poetry/poetry/blob/e31a9fc3ce5a7fc72eefa22040676bc66a35e5ad/tests/installation/test_executor.py#L247-L279)) that's what I meant. \ud83d\ude05",
        "pr_file_module": null
      }
    ]
  }
]