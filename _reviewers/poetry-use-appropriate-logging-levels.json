[
  {
    "discussion_id": "1844370414",
    "pr_number": 9845,
    "pr_file": "src/poetry/vcs/git/backend.py",
    "created_at": "2024-11-15T19:37:42+00:00",
    "commented_code": "try:\n             SystemGit.clone(url, target)\n-        except CalledProcessError:\n-            raise PoetryConsoleError(\n-                f\"Failed to clone {url}, check your git configuration and permissions\"\n-                \" for this repository.\"\n-            )\n+        except CalledProcessError as e:\n+            raise PoetryConsoleError(f\"Failed to clone {url}\n {e.stderr}\")",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1844370414",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9845,
        "pr_file": "src/poetry/vcs/git/backend.py",
        "discussion_id": "1844370414",
        "commented_code": "@@ -231,11 +231,8 @@ def _clone_legacy(url: str, refspec: GitRefSpec, target: Path) -> Repo:\n \n         try:\n             SystemGit.clone(url, target)\n-        except CalledProcessError:\n-            raise PoetryConsoleError(\n-                f\"Failed to clone {url}, check your git configuration and permissions\"\n-                \" for this repository.\"\n-            )\n+        except CalledProcessError as e:\n+            raise PoetryConsoleError(f\"Failed to clone {url}\\n {e.stderr}\")",
        "comment_created_at": "2024-11-15T19:37:42+00:00",
        "comment_author": "abn",
        "comment_body": "I would suggest the git error be surfaced via `logger.debug` instead. The proposed change is too noisy.\r\n\r\n```suggestion\r\n            logger.debug(\"Git command returned the following error:\\n%s\", e.stderr)\r\n            raise PoetryConsoleError(\r\n                f\"Failed to clone {url}, check your git configuration and permissions\"\r\n                \" for this repository.\"\r\n            )\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1505389261",
    "pr_number": 9051,
    "pr_file": "src/poetry/inspection/lazy_wheel.py",
    "created_at": "2024-02-28T05:39:00+00:00",
    "commented_code": "# themselves are invalid, not because we've messed up our bookkeeping\n         # and produced an invalid file.\n         raise InvalidWheel(url, name)\n+    except Exception as e:\n+        if isinstance(e, LazyWheelUnsupportedError):",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1505389261",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9051,
        "pr_file": "src/poetry/inspection/lazy_wheel.py",
        "discussion_id": "1505389261",
        "commented_code": "@@ -85,6 +89,14 @@ def metadata_from_wheel_url(\n         # themselves are invalid, not because we've messed up our bookkeeping\n         # and produced an invalid file.\n         raise InvalidWheel(url, name)\n+    except Exception as e:\n+        if isinstance(e, LazyWheelUnsupportedError):",
        "comment_created_at": "2024-02-28T05:39:00+00:00",
        "comment_author": "radoering",
        "comment_body": "We probably should at least add a debug log with the error message.",
        "pr_file_module": null
      },
      {
        "comment_id": "1505616201",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9051,
        "pr_file": "src/poetry/inspection/lazy_wheel.py",
        "discussion_id": "1505389261",
        "commented_code": "@@ -85,6 +89,14 @@ def metadata_from_wheel_url(\n         # themselves are invalid, not because we've messed up our bookkeeping\n         # and produced an invalid file.\n         raise InvalidWheel(url, name)\n+    except Exception as e:\n+        if isinstance(e, LazyWheelUnsupportedError):",
        "comment_created_at": "2024-02-28T09:19:07+00:00",
        "comment_author": "abn",
        "comment_body": "It will pop up in the stack trace anyway. But yeah adding debug log cannot hurt. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1506237941",
    "pr_number": 9051,
    "pr_file": "src/poetry/inspection/lazy_wheel.py",
    "created_at": "2024-02-28T16:22:09+00:00",
    "commented_code": "# themselves are invalid, not because we've messed up our bookkeeping\n         # and produced an invalid file.\n         raise InvalidWheel(url, name)\n+    except Exception as e:\n+        if isinstance(e, LazyWheelUnsupportedError):\n+            # this is expected when the code handles issues with lazy wheel metadata retrieval correctly\n+            raise e",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1506237941",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9051,
        "pr_file": "src/poetry/inspection/lazy_wheel.py",
        "discussion_id": "1506237941",
        "commented_code": "@@ -85,6 +89,24 @@ def metadata_from_wheel_url(\n         # themselves are invalid, not because we've messed up our bookkeeping\n         # and produced an invalid file.\n         raise InvalidWheel(url, name)\n+    except Exception as e:\n+        if isinstance(e, LazyWheelUnsupportedError):\n+            # this is expected when the code handles issues with lazy wheel metadata retrieval correctly\n+            raise e",
        "comment_created_at": "2024-02-28T16:22:09+00:00",
        "comment_author": "radoering",
        "comment_body": "I think it might be good to add a debug log for known exceptions because otherwise it might be difficult to tell why exactly lazy-wheel failed (e.g. no content-range).",
        "pr_file_module": null
      },
      {
        "comment_id": "1506403022",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 9051,
        "pr_file": "src/poetry/inspection/lazy_wheel.py",
        "discussion_id": "1506237941",
        "commented_code": "@@ -85,6 +89,24 @@ def metadata_from_wheel_url(\n         # themselves are invalid, not because we've messed up our bookkeeping\n         # and produced an invalid file.\n         raise InvalidWheel(url, name)\n+    except Exception as e:\n+        if isinstance(e, LazyWheelUnsupportedError):\n+            # this is expected when the code handles issues with lazy wheel metadata retrieval correctly\n+            raise e",
        "comment_created_at": "2024-02-28T18:31:40+00:00",
        "comment_author": "abn",
        "comment_body": " This will basically be raised as it previously used to. In this scenario we are simply re-raising the range/invalid wheel exception. Don't think the log would add anything meaningful. \r\n\r\nThe catch-all is if it isn't a known error. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1443968850",
    "pr_number": 8851,
    "pr_file": "src/poetry/utils/helpers.py",
    "created_at": "2024-01-07T09:32:16+00:00",
    "commented_code": "archive.extractall(dest, filter=\"data\")\n             else:\n                 archive.extractall(dest)\n+\n+\n+def get_highest_priority_hash_type(hash_types: set[str]) -> str | None:\n+    if not hash_types:\n+        return None\n+\n+    for prioritised_hash_type in prioritised_hash_types:\n+        if prioritised_hash_type in hash_types:\n+            return prioritised_hash_type\n+\n+    return None",
    "repo_full_name": "python-poetry/poetry",
    "discussion_comments": [
      {
        "comment_id": "1443968850",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8851,
        "pr_file": "src/poetry/utils/helpers.py",
        "discussion_id": "1443968850",
        "commented_code": "@@ -312,3 +334,14 @@ def extractall(source: Path, dest: Path, zip: bool) -> None:\n                 archive.extractall(dest, filter=\"data\")\n             else:\n                 archive.extractall(dest)\n+\n+\n+def get_highest_priority_hash_type(hash_types: set[str]) -> str | None:\n+    if not hash_types:\n+        return None\n+\n+    for prioritised_hash_type in prioritised_hash_types:\n+        if prioritised_hash_type in hash_types:\n+            return prioritised_hash_type\n+\n+    return None",
        "comment_created_at": "2024-01-07T09:32:16+00:00",
        "comment_author": "radoering",
        "comment_body": "```suggestion\r\n\r\n    logger.debug('None of the hash types %s is in prioritized_hash_types', hash_types)\r\n\r\n    for hash_type in hash_types:\r\n        if hash_type in non_prioritized_hash_types:\r\n            return hash_type\r\n\r\n    logger.warning('None of the hash types %s is available in hashlib', hash_types)\r\n\r\n    return None\r\n```\r\n\r\nIf there is no prioritized hash type we just \"randomly\" choose an available hash type. That's why md5 and sha1 can be omitted in `prioritized_hash_types`.\r\n\r\nIf none of the hash types is available we probably should log a warning.",
        "pr_file_module": null
      },
      {
        "comment_id": "1444057685",
        "repo_full_name": "python-poetry/poetry",
        "pr_number": 8851,
        "pr_file": "src/poetry/utils/helpers.py",
        "discussion_id": "1443968850",
        "commented_code": "@@ -312,3 +334,14 @@ def extractall(source: Path, dest: Path, zip: bool) -> None:\n                 archive.extractall(dest, filter=\"data\")\n             else:\n                 archive.extractall(dest)\n+\n+\n+def get_highest_priority_hash_type(hash_types: set[str]) -> str | None:\n+    if not hash_types:\n+        return None\n+\n+    for prioritised_hash_type in prioritised_hash_types:\n+        if prioritised_hash_type in hash_types:\n+            return prioritised_hash_type\n+\n+    return None",
        "comment_created_at": "2024-01-07T19:14:12+00:00",
        "comment_author": "GMouzourou",
        "comment_body": "Cool, I see what your saying now. I'll create a commit for this...",
        "pr_file_module": null
      }
    ]
  }
]