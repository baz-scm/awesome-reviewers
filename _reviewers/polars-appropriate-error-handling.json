[
  {
    "discussion_id": "2137671160",
    "pr_number": 22840,
    "pr_file": "crates/polars-ops/src/chunked_array/binary/cast_binary_to_numerical.rs",
    "created_at": "2025-06-10T11:45:46+00:00",
    "commented_code": "is_little_endian,\n     )))\n }\n+\n+/// Casts a [`BinaryArray`] to a [`PrimitiveArray`], making any un-castable value a Null.\n+///\n+/// # Panics\n+///    Panics if `to` is not `ArrowDataType::FixedSizeList`.\n+pub(super) fn try_cast_binview_to_array_primitive<T>(\n+    from: &BinaryViewArray,\n+    to: &ArrowDataType,\n+    is_little_endian: bool,\n+) -> PolarsResult<FixedSizeListArray>\n+where\n+    T: Cast + NativeType,\n+{\n+    let ArrowDataType::FixedSizeList(_, array_size) = to else {\n+        panic!(\"Bug, non-Array passed in.\")",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2137671160",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22840,
        "pr_file": "crates/polars-ops/src/chunked_array/binary/cast_binary_to_numerical.rs",
        "discussion_id": "2137671160",
        "commented_code": "@@ -78,3 +81,65 @@ where\n         is_little_endian,\n     )))\n }\n+\n+/// Casts a [`BinaryArray`] to a [`PrimitiveArray`], making any un-castable value a Null.\n+///\n+/// # Panics\n+///    Panics if `to` is not `ArrowDataType::FixedSizeList`.\n+pub(super) fn try_cast_binview_to_array_primitive<T>(\n+    from: &BinaryViewArray,\n+    to: &ArrowDataType,\n+    is_little_endian: bool,\n+) -> PolarsResult<FixedSizeListArray>\n+where\n+    T: Cast + NativeType,\n+{\n+    let ArrowDataType::FixedSizeList(_, array_size) = to else {\n+        panic!(\"Bug, non-Array passed in.\")",
        "comment_created_at": "2025-06-10T11:45:46+00:00",
        "comment_author": "nameexhaustion",
        "comment_body": "nit: this should either be just `panic!()` or `unreachable!()`, or actually print out what the exact value is. I personally prefer adding in `unreachable!()`'s with a comment line, as that means we don't compile in an extra error string message into the binary while ensuring a future developer can go to this line and see why we panic.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2169211631",
    "pr_number": 23321,
    "pr_file": "crates/polars-expr/src/reduce/convert.rs",
    "created_at": "2025-06-26T14:27:53+00:00",
    "commented_code": "(out, expr)\n             }\n         },\n+        #[cfg(feature = \"bitwise\")]\n+        AExpr::Function {\n+            input: inner_exprs,\n+            function: IRFunctionExpr::Bitwise(inner_fn),\n+            options: _,\n+        } => {\n+            assert!(inner_exprs.len() == 1);\n+            let input = inner_exprs[0].node();\n+            match inner_fn {\n+                IRBitwiseFunction::And => (new_bitwise_and_reduction(get_dt(input)?), input),\n+                IRBitwiseFunction::Or => (new_bitwise_or_reduction(get_dt(input)?), input),\n+                IRBitwiseFunction::Xor => (new_bitwise_xor_reduction(get_dt(input)?), input),\n+                _ => todo!(),",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2169211631",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 23321,
        "pr_file": "crates/polars-expr/src/reduce/convert.rs",
        "discussion_id": "2169211631",
        "commented_code": "@@ -72,6 +75,21 @@ pub fn into_reduction(\n                 (out, expr)\n             }\n         },\n+        #[cfg(feature = \"bitwise\")]\n+        AExpr::Function {\n+            input: inner_exprs,\n+            function: IRFunctionExpr::Bitwise(inner_fn),\n+            options: _,\n+        } => {\n+            assert!(inner_exprs.len() == 1);\n+            let input = inner_exprs[0].node();\n+            match inner_fn {\n+                IRBitwiseFunction::And => (new_bitwise_and_reduction(get_dt(input)?), input),\n+                IRBitwiseFunction::Or => (new_bitwise_or_reduction(get_dt(input)?), input),\n+                IRBitwiseFunction::Xor => (new_bitwise_xor_reduction(get_dt(input)?), input),\n+                _ => todo!(),",
        "comment_created_at": "2025-06-26T14:27:53+00:00",
        "comment_author": "orlp",
        "comment_body": "This `todo!()` should be `unreachable!()`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2161471081",
    "pr_number": 23280,
    "pr_file": "crates/polars-utils/src/plpath.rs",
    "created_at": "2025-06-23T12:10:01+00:00",
    "commented_code": "}\n     }\n \n-    pub fn separator(&self) -> char {\n-        match self {\n-            Self::Local(_) => std::path::MAIN_SEPARATOR,\n-            Self::Cloud(_) => '/',\n-        }\n-    }\n-\n-    // SAFETY: returns empty path if n is larger than path len\n+    // SAFETY: will panic if n is out of bounds, or the path cannot be parsed",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2161471081",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 23280,
        "pr_file": "crates/polars-utils/src/plpath.rs",
        "discussion_id": "2161471081",
        "commented_code": "@@ -295,52 +297,52 @@ impl<'a> PlPathRef<'a> {\n         }\n     }\n \n-    pub fn separator(&self) -> char {\n-        match self {\n-            Self::Local(_) => std::path::MAIN_SEPARATOR,\n-            Self::Cloud(_) => '/',\n-        }\n-    }\n-\n-    // SAFETY: returns empty path if n is larger than path len\n+    // SAFETY: will panic if n is out of bounds, or the path cannot be parsed",
        "comment_created_at": "2025-06-23T12:10:01+00:00",
        "comment_author": "coastalwhite",
        "comment_body": "This is not a `SAFETY` comment, that is for `unsafe`. This is a `Panics` comment.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2038083040",
    "pr_number": 22180,
    "pr_file": "crates/polars-time/src/chunkedarray/string/strptime.rs",
    "created_at": "2025-04-10T18:48:27+00:00",
    "commented_code": "let new_offset = offset + incr;\n     let bytes = vals.get(offset..new_offset)?;\n     let (val, parsed) = atoi_simd::parse_any(bytes).ok()?;\n-    if parsed == 0 {\n-        None\n+    if parsed != incr {\n+        panic!(\n+            \"Invariant when calling StrpTimeState.parse was not upheld. Expected {} parsed digits, got {}.\",\n+            incr, parsed\n+        );",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2038083040",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22180,
        "pr_file": "crates/polars-time/src/chunkedarray/string/strptime.rs",
        "discussion_id": "2038083040",
        "commented_code": "@@ -23,8 +23,11 @@ fn update_and_parse<T: atoi_simd::Parse>(\n     let new_offset = offset + incr;\n     let bytes = vals.get(offset..new_offset)?;\n     let (val, parsed) = atoi_simd::parse_any(bytes).ok()?;\n-    if parsed == 0 {\n-        None\n+    if parsed != incr {\n+        panic!(\n+            \"Invariant when calling StrpTimeState.parse was not upheld. Expected {} parsed digits, got {}.\",\n+            incr, parsed\n+        );",
        "comment_created_at": "2025-04-10T18:48:27+00:00",
        "comment_author": "MarcoGorelli",
        "comment_body": "is it ok to panic here? if we get here, it's a sign that something is seriously wrong, and it would've managed to avoid the bug pointed out in https://github.com/pola-rs/polars/issues/22167#issuecomment-2794781438\r\n\r\n```python\r\nIn [21]: pl.Series(['2025-04-06T18:57:42.77756192Z']).str.to_datetime('%Y-%m-%dT%H:%M:%S.%9fcabbagebananapotato')\r\nOut[21]:\r\nshape: (1,)\r\nSeries: '' [datetime[ns]]\r\n[\r\n        2025-04-06 18:57:42.077756192\r\n]\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2044857435",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22180,
        "pr_file": "crates/polars-time/src/chunkedarray/string/strptime.rs",
        "discussion_id": "2038083040",
        "commented_code": "@@ -23,8 +23,11 @@ fn update_and_parse<T: atoi_simd::Parse>(\n     let new_offset = offset + incr;\n     let bytes = vals.get(offset..new_offset)?;\n     let (val, parsed) = atoi_simd::parse_any(bytes).ok()?;\n-    if parsed == 0 {\n-        None\n+    if parsed != incr {\n+        panic!(\n+            \"Invariant when calling StrpTimeState.parse was not upheld. Expected {} parsed digits, got {}.\",\n+            incr, parsed\n+        );",
        "comment_created_at": "2025-04-15T15:04:14+00:00",
        "comment_author": "ritchie46",
        "comment_body": "If it is an implementation error on our end, we can panic.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2028557269",
    "pr_number": 22035,
    "pr_file": "crates/polars-time/src/offset_by.rs",
    "created_at": "2025-04-04T10:31:11+00:00",
    "commented_code": "offset_opt,\n             ) {\n                 (Some(timestamp), Some(offset)) => {\n-                    offset_fn(&Duration::parse(offset), timestamp, time_zone).map(Some)\n+                    offset_fn(&Duration::try_parse(offset)?, timestamp, time_zone).map(Some)",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2028557269",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22035,
        "pr_file": "crates/polars-time/src/offset_by.rs",
        "discussion_id": "2028557269",
        "commented_code": "@@ -49,7 +49,7 @@ fn apply_offsets_to_datetime(\n                 offset_opt,\n             ) {\n                 (Some(timestamp), Some(offset)) => {\n-                    offset_fn(&Duration::parse(offset), timestamp, time_zone).map(Some)\n+                    offset_fn(&Duration::try_parse(offset)?, timestamp, time_zone).map(Some)",
        "comment_created_at": "2025-04-04T10:31:11+00:00",
        "comment_author": "etiennebacher",
        "comment_body": "Otherwise the new test with several offsets panics",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2002860715",
    "pr_number": 21841,
    "pr_file": "crates/polars-stream/src/nodes/io_sources/multi_file_reader/extra_ops/cast_columns.rs",
    "created_at": "2025-03-19T09:24:24+00:00",
    "commented_code": "match policy {\n             CastColumnsPolicy::ErrorOnMismatch => {\n                 for (name, dtype) in incoming_schema.iter() {\n-                    if let Some(target_dtype) = target_schema.get(name) {\n-                        if dtype != target_dtype {\n-                            polars_bail!(\n-                                SchemaMismatch:\n-                                \"data type mismatch for column {}: expected: {}, found: {}\",\n-                                name, target_dtype, dtype\n-                            )\n-                        }\n-                    } else if cfg!(debug_assertions) {\n-                        panic!(\"impl error: column should exist in casting map\")\n+                    let target_dtype = target_schema\n+                        .get(name)\n+                        .expect(\"impl error: column should exist in casting map\");",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2002860715",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 21841,
        "pr_file": "crates/polars-stream/src/nodes/io_sources/multi_file_reader/extra_ops/cast_columns.rs",
        "discussion_id": "2002860715",
        "commented_code": "@@ -21,16 +21,16 @@ impl CastColumns {\n         match policy {\n             CastColumnsPolicy::ErrorOnMismatch => {\n                 for (name, dtype) in incoming_schema.iter() {\n-                    if let Some(target_dtype) = target_schema.get(name) {\n-                        if dtype != target_dtype {\n-                            polars_bail!(\n-                                SchemaMismatch:\n-                                \"data type mismatch for column {}: expected: {}, found: {}\",\n-                                name, target_dtype, dtype\n-                            )\n-                        }\n-                    } else if cfg!(debug_assertions) {\n-                        panic!(\"impl error: column should exist in casting map\")\n+                    let target_dtype = target_schema\n+                        .get(name)\n+                        .expect(\"impl error: column should exist in casting map\");",
        "comment_created_at": "2025-03-19T09:24:24+00:00",
        "comment_author": "nameexhaustion",
        "comment_body": "> Should this not just be an unwrap. If this goes wrong on release, I would rather have a hard-error than wrong data. (https://github.com/pola-rs/polars/pull/21812#discussion_r2002741431)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1894594479",
    "pr_number": 19894,
    "pr_file": "crates/polars-ops/src/series/ops/search_sorted.rs",
    "created_at": "2024-12-21T09:54:31+00:00",
    "commented_code": "side: SearchSortedSide,\n     descending: bool,\n ) -> PolarsResult<IdxCa> {\n+    if s.dtype().is_categorical() {",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1894594479",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 19894,
        "pr_file": "crates/polars-ops/src/series/ops/search_sorted.rs",
        "discussion_id": "1894594479",
        "commented_code": "@@ -8,6 +8,9 @@ pub fn search_sorted(\n     side: SearchSortedSide,\n     descending: bool,\n ) -> PolarsResult<IdxCa> {\n+    if s.dtype().is_categorical() {",
        "comment_created_at": "2024-12-21T09:54:31+00:00",
        "comment_author": "ritchie46",
        "comment_body": "Instead of panicking, this should just raise an unsupported error. I don't want to put PR links in error messages either.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1875450091",
    "pr_number": 20219,
    "pr_file": "crates/polars-plan/src/plans/optimizer/slice_pushdown_lp.rs",
    "created_at": "2024-12-09T06:52:24+00:00",
    "commented_code": "arena: &Arena<AExpr>,\n     scratch: &mut UnitVec<Node>,\n ) -> (bool, bool) {\n-    assert!(scratch.is_empty());\n+    debug_assert!(scratch.is_empty());\n+    scratch.clear();",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1875450091",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 20219,
        "pr_file": "crates/polars-plan/src/plans/optimizer/slice_pushdown_lp.rs",
        "discussion_id": "1875450091",
        "commented_code": "@@ -49,7 +50,8 @@ fn can_pushdown_slice_past_projections(\n     arena: &Arena<AExpr>,\n     scratch: &mut UnitVec<Node>,\n ) -> (bool, bool) {\n-    assert!(scratch.is_empty());\n+    debug_assert!(scratch.is_empty());\n+    scratch.clear();",
        "comment_created_at": "2024-12-09T06:52:24+00:00",
        "comment_author": "nameexhaustion",
        "comment_body": "make this only panic in debug builds, and in release we clear it\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1867395570",
    "pr_number": 20127,
    "pr_file": "crates/polars-expr/src/expressions/slice.rs",
    "created_at": "2024-12-03T09:51:22+00:00",
    "commented_code": ".collect::<PolarsResult<Vec<_>>>()\n         })?;\n         let mut ac = results.pop().unwrap();\n+\n+        if ac.is_aggregated() {\n+            polars_bail!(InvalidOperation: \"cannot slice() an aggregated value\")",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1867395570",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 20127,
        "pr_file": "crates/polars-expr/src/expressions/slice.rs",
        "discussion_id": "1867395570",
        "commented_code": "@@ -110,6 +110,11 @@ impl PhysicalExpr for SliceExpr {\n                 .collect::<PolarsResult<Vec<_>>>()\n         })?;\n         let mut ac = results.pop().unwrap();\n+\n+        if ac.is_aggregated() {\n+            polars_bail!(InvalidOperation: \"cannot slice() an aggregated value\")",
        "comment_created_at": "2024-12-03T09:51:22+00:00",
        "comment_author": "nameexhaustion",
        "comment_body": "drive-by - I noticed we currently silently ignore `slice()` after aggregations - I've made this raise instead.\r\n",
        "pr_file_module": null
      }
    ]
  }
]