[
  {
    "discussion_id": "1734565018",
    "pr_number": 18355,
    "pr_file": "py-polars/polars/series/series.py",
    "created_at": "2024-08-28T12:12:09+00:00",
    "commented_code": "]\n         \"\"\"\n \n-    def interpolate_by(self, by: IntoExpr) -> Series:\n+    def interpolate_by(self, by: IntoExpr, *, extrapolate_flat: bool = False) -> Series:\n         \"\"\"\n         Fill null values using interpolation based on another column.\n \n         Parameters\n         ----------\n         by\n             Column to interpolate values based on.\n+        extrapolate_flat\n+            If True, extrapolate the highest and lowest values of the expression in\n+            the regions below and above the highest/lowest by values",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1734565018",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 18355,
        "pr_file": "py-polars/polars/series/series.py",
        "discussion_id": "1734565018",
        "commented_code": "@@ -6159,14 +6159,17 @@ def interpolate(self, method: InterpolationMethod = \"linear\") -> Series:\n         ]\n         \"\"\"\n \n-    def interpolate_by(self, by: IntoExpr) -> Series:\n+    def interpolate_by(self, by: IntoExpr, *, extrapolate_flat: bool = False) -> Series:\n         \"\"\"\n         Fill null values using interpolation based on another column.\n \n         Parameters\n         ----------\n         by\n             Column to interpolate values based on.\n+        extrapolate_flat\n+            If True, extrapolate the highest and lowest values of the expression in\n+            the regions below and above the highest/lowest by values",
        "comment_created_at": "2024-08-28T12:12:09+00:00",
        "comment_author": "MarcoGorelli",
        "comment_body": "could we include an example which uses `extrapolate_flat`? users tend to learn better from examples than from descriptions",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1870036275",
    "pr_number": 19708,
    "pr_file": "py-polars/polars/expr/datetime.py",
    "created_at": "2024-12-04T18:01:30+00:00",
    "commented_code": "every = parse_into_expression(every, str_as_lit=True)\n         return wrap_expr(self._pyexpr.dt_round(every))\n \n+    def replace(\n+        self,\n+        *,\n+        year: int | IntoExpr | None = None,\n+        month: int | IntoExpr | None = None,\n+        day: int | IntoExpr | None = None,\n+        hour: int | IntoExpr | None = None,\n+        minute: int | IntoExpr | None = None,\n+        second: int | IntoExpr | None = None,\n+        microsecond: int | IntoExpr | None = None,\n+        ambiguous: Ambiguous | Expr = \"raise\",\n+    ) -> Expr:\n+        \"\"\"\n+        Replace time unit.\n+\n+        Parameters\n+        ----------\n+        year\n+            Column or literal.\n+        month\n+            Column or literal, ranging from 1-12.\n+        day\n+            Column or literal, ranging from 1-31.\n+        hour\n+            Column or literal, ranging from 0-23.\n+        minute\n+            Column or literal, ranging from 0-59.\n+        second\n+            Column or literal, ranging from 0-59.\n+        microsecond\n+            Column or literal, ranging from 0-999999.\n+        ambiguous\n+            Determine how to deal with ambiguous datetimes:\n+\n+            - `'raise'` (default): raise\n+            - `'earliest'`: use the earliest datetime\n+            - `'latest'`: use the latest datetime\n+            - `'null'`: set to null\n+\n+        Returns\n+        -------\n+        Expr\n+            Expression of data type :class:`Date` or :class:`Datetime` with the\n+            specified time units replaced.\n+\n+        Examples\n+        --------\n+        >>> from datetime import datetime\n+        >>> df = pl.DataFrame(\n+        ...     {\n+        ...         \"date\": [datetime(2024, 1, 1), datetime(2024, 1, 2)],\n+        ...         \"year\": [2022, 2016],\n+        ...         \"month\": [1, 2],\n+        ...         \"day\": [4, 5],\n+        ...         \"hour\": [12, 13],\n+        ...         \"minute\": [15, 30],\n+        ...     }\n+        ... )\n+        >>> df.with_columns(\n+        ...     pl.col(\"date\").dt.replace(\n+        ...         year=\"year\", month=\"month\", day=\"day\", hour=\"hour\", minute=\"minute\"\n+        ...     )",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1870036275",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 19708,
        "pr_file": "py-polars/polars/expr/datetime.py",
        "discussion_id": "1870036275",
        "commented_code": "@@ -390,6 +390,98 @@ def round(self, every: str | dt.timedelta | IntoExprColumn) -> Expr:\n         every = parse_into_expression(every, str_as_lit=True)\n         return wrap_expr(self._pyexpr.dt_round(every))\n \n+    def replace(\n+        self,\n+        *,\n+        year: int | IntoExpr | None = None,\n+        month: int | IntoExpr | None = None,\n+        day: int | IntoExpr | None = None,\n+        hour: int | IntoExpr | None = None,\n+        minute: int | IntoExpr | None = None,\n+        second: int | IntoExpr | None = None,\n+        microsecond: int | IntoExpr | None = None,\n+        ambiguous: Ambiguous | Expr = \"raise\",\n+    ) -> Expr:\n+        \"\"\"\n+        Replace time unit.\n+\n+        Parameters\n+        ----------\n+        year\n+            Column or literal.\n+        month\n+            Column or literal, ranging from 1-12.\n+        day\n+            Column or literal, ranging from 1-31.\n+        hour\n+            Column or literal, ranging from 0-23.\n+        minute\n+            Column or literal, ranging from 0-59.\n+        second\n+            Column or literal, ranging from 0-59.\n+        microsecond\n+            Column or literal, ranging from 0-999999.\n+        ambiguous\n+            Determine how to deal with ambiguous datetimes:\n+\n+            - `'raise'` (default): raise\n+            - `'earliest'`: use the earliest datetime\n+            - `'latest'`: use the latest datetime\n+            - `'null'`: set to null\n+\n+        Returns\n+        -------\n+        Expr\n+            Expression of data type :class:`Date` or :class:`Datetime` with the\n+            specified time units replaced.\n+\n+        Examples\n+        --------\n+        >>> from datetime import datetime\n+        >>> df = pl.DataFrame(\n+        ...     {\n+        ...         \"date\": [datetime(2024, 1, 1), datetime(2024, 1, 2)],\n+        ...         \"year\": [2022, 2016],\n+        ...         \"month\": [1, 2],\n+        ...         \"day\": [4, 5],\n+        ...         \"hour\": [12, 13],\n+        ...         \"minute\": [15, 30],\n+        ...     }\n+        ... )\n+        >>> df.with_columns(\n+        ...     pl.col(\"date\").dt.replace(\n+        ...         year=\"year\", month=\"month\", day=\"day\", hour=\"hour\", minute=\"minute\"\n+        ...     )",
        "comment_created_at": "2024-12-04T18:01:30+00:00",
        "comment_author": "MarcoGorelli",
        "comment_body": "i'd suggest keeping the example simpler - just replace 1 or 2 fields, but most importantly, alias the result, so that it shows before vs after",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1870037439",
    "pr_number": 19708,
    "pr_file": "py-polars/polars/series/datetime.py",
    "created_at": "2024-12-04T18:02:23+00:00",
    "commented_code": "0ms\n         ]\n         \"\"\"\n+\n+    def replace(\n+        self,\n+        *,\n+        year: int | Series | None = None,\n+        month: int | Series | None = None,\n+        day: int | Series | None = None,\n+        hour: int | Series | None = None,\n+        minute: int | Series | None = None,\n+        second: int | Series | None = None,\n+        microsecond: int | Series | None = None,\n+        ambiguous: Ambiguous | Series = \"raise\",\n+    ) -> Series:\n+        \"\"\"\n+        Replace time unit.\n+\n+        Parameters\n+        ----------\n+        year\n+            Literal or Series.\n+        month\n+            Literal or Series, ranging from 1-12.\n+        day\n+            Literal or Series, ranging from 1-31.\n+        hour\n+            Literal or Series, ranging from 0-23.\n+        minute\n+            Literal or Series, ranging from 0-59.\n+        second\n+            Literal or Series, ranging from 0-59.\n+        microsecond\n+            Literal or Series, ranging from 0-999999.\n+        ambiguous\n+            Determine how to deal with ambiguous datetimes:\n+\n+            - `'raise'` (default): raise\n+            - `'earliest'`: use the earliest datetime\n+            - `'latest'`: use the latest datetime\n+            - `'null'`: set to null\n+\n+        Returns\n+        -------\n+        Series\n+            Series of data type :class:`Date` or :class:`Datetime` with the specified\n+            time units replaced.\n+\n+        Examples\n+        --------\n+        >>> from datetime import datetime\n+        >>> s = pl.Series(\"datetime\", [datetime(2024, 1, 1), datetime(2024, 1, 2)])\n+        >>> s.dt.replace(year=2022, month=1, day=4, hour=12, minute=15)\n+        shape: (2,)\n+        Series: 'datetime' [datetime[Î¼s]]\n+        [\n+                2022-01-04 12:15:00\n+                2022-01-04 12:15:00",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1870037439",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 19708,
        "pr_file": "py-polars/polars/series/datetime.py",
        "discussion_id": "1870037439",
        "commented_code": "@@ -2096,3 +2096,61 @@ def dst_offset(self) -> Series:\n                 0ms\n         ]\n         \"\"\"\n+\n+    def replace(\n+        self,\n+        *,\n+        year: int | Series | None = None,\n+        month: int | Series | None = None,\n+        day: int | Series | None = None,\n+        hour: int | Series | None = None,\n+        minute: int | Series | None = None,\n+        second: int | Series | None = None,\n+        microsecond: int | Series | None = None,\n+        ambiguous: Ambiguous | Series = \"raise\",\n+    ) -> Series:\n+        \"\"\"\n+        Replace time unit.\n+\n+        Parameters\n+        ----------\n+        year\n+            Literal or Series.\n+        month\n+            Literal or Series, ranging from 1-12.\n+        day\n+            Literal or Series, ranging from 1-31.\n+        hour\n+            Literal or Series, ranging from 0-23.\n+        minute\n+            Literal or Series, ranging from 0-59.\n+        second\n+            Literal or Series, ranging from 0-59.\n+        microsecond\n+            Literal or Series, ranging from 0-999999.\n+        ambiguous\n+            Determine how to deal with ambiguous datetimes:\n+\n+            - `'raise'` (default): raise\n+            - `'earliest'`: use the earliest datetime\n+            - `'latest'`: use the latest datetime\n+            - `'null'`: set to null\n+\n+        Returns\n+        -------\n+        Series\n+            Series of data type :class:`Date` or :class:`Datetime` with the specified\n+            time units replaced.\n+\n+        Examples\n+        --------\n+        >>> from datetime import datetime\n+        >>> s = pl.Series(\"datetime\", [datetime(2024, 1, 1), datetime(2024, 1, 2)])\n+        >>> s.dt.replace(year=2022, month=1, day=4, hour=12, minute=15)\n+        shape: (2,)\n+        Series: 'datetime' [datetime[Î¼s]]\n+        [\n+                2022-01-04 12:15:00\n+                2022-01-04 12:15:00",
        "comment_created_at": "2024-12-04T18:02:23+00:00",
        "comment_author": "MarcoGorelli",
        "comment_body": "the result is the same for both rows, could we have a better example which shows different ones? like just `s.dt.replace(year=2022)`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1870046943",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 19708,
        "pr_file": "py-polars/polars/series/datetime.py",
        "discussion_id": "1870037439",
        "commented_code": "@@ -2096,3 +2096,61 @@ def dst_offset(self) -> Series:\n                 0ms\n         ]\n         \"\"\"\n+\n+    def replace(\n+        self,\n+        *,\n+        year: int | Series | None = None,\n+        month: int | Series | None = None,\n+        day: int | Series | None = None,\n+        hour: int | Series | None = None,\n+        minute: int | Series | None = None,\n+        second: int | Series | None = None,\n+        microsecond: int | Series | None = None,\n+        ambiguous: Ambiguous | Series = \"raise\",\n+    ) -> Series:\n+        \"\"\"\n+        Replace time unit.\n+\n+        Parameters\n+        ----------\n+        year\n+            Literal or Series.\n+        month\n+            Literal or Series, ranging from 1-12.\n+        day\n+            Literal or Series, ranging from 1-31.\n+        hour\n+            Literal or Series, ranging from 0-23.\n+        minute\n+            Literal or Series, ranging from 0-59.\n+        second\n+            Literal or Series, ranging from 0-59.\n+        microsecond\n+            Literal or Series, ranging from 0-999999.\n+        ambiguous\n+            Determine how to deal with ambiguous datetimes:\n+\n+            - `'raise'` (default): raise\n+            - `'earliest'`: use the earliest datetime\n+            - `'latest'`: use the latest datetime\n+            - `'null'`: set to null\n+\n+        Returns\n+        -------\n+        Series\n+            Series of data type :class:`Date` or :class:`Datetime` with the specified\n+            time units replaced.\n+\n+        Examples\n+        --------\n+        >>> from datetime import datetime\n+        >>> s = pl.Series(\"datetime\", [datetime(2024, 1, 1), datetime(2024, 1, 2)])\n+        >>> s.dt.replace(year=2022, month=1, day=4, hour=12, minute=15)\n+        shape: (2,)\n+        Series: 'datetime' [datetime[Î¼s]]\n+        [\n+                2022-01-04 12:15:00\n+                2022-01-04 12:15:00",
        "comment_created_at": "2024-12-04T18:10:10+00:00",
        "comment_author": "mcrumiller",
        "comment_body": "Yep, good idea, bad on my part.",
        "pr_file_module": null
      }
    ]
  }
]