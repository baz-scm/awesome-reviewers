[
  {
    "discussion_id": "1670793352",
    "pr_number": 17525,
    "pr_file": "docs/user-guide/ecosystem.md",
    "created_at": "2024-07-09T16:02:41+00:00",
    "commented_code": "### Table of contents:\n \n-- [Apache Arrow](#apache-arrow)\n-- [Data visualisation](#data-visualisation)\n-- [IO](#io)\n+- [Database integration](#database-integration)\n+- [Data pipelines](#data-pipelines)\n+- [Interchange and open storage formats](#interchange-and-storage-formats)\n - [Machine learning](#machine-learning)\n-- [Other](#other)\n+- [Validation and quality](#validation-and-quality)\n+- [Visualization and presentation](#visualization-and-presentation)\n \n ---\n \n-### Apache Arrow\n+### Database integration\n \n-[Apache Arrow](https://arrow.apache.org/) enables zero-copy reads of data within the same process, meaning that data can be directly accessed in its in-memory format without the need for copying or serialisation. This enhances performance when integrating with different tools using Apache Arrow. Polars is compatible with a wide range of libraries that also make use of Apache Arrow, like Pandas and DuckDB.\n-\n-### Data visualisation\n+#### DuckDB\n \n-#### hvPlot\n+[DuckDB](https://duckdb.org) is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. Read about integration with Polars [on the DuckDB website](https://duckdb.org/docs/guides/python/polars).\n \n-[hvPlot](https://hvplot.holoviz.org/) is available as the default plotting backend for Polars making it simple to create interactive and static visualisations. You can use hvPlot by using the feature flag `plot` during installing.\n+#### LanceDB\n \n-```python\n-pip install 'polars[plot]'\n-```\n+[LanceDB](https://lancedb.com/) is a developer-friendly, serverless vector database for AI applications. They have added a direct integration with Polars. LanceDB can ingest Polars dataframes, return results as polars dataframes, and export the entire table as a polars lazyframe. You can find a quick tutorial in their blog [LanceDB + Polars](https://blog.lancedb.com/lancedb-polars-2d5eb32a8aa3)\n \n-#### Matplotlib\n+### Data pipelines\n \n-[Matplotlib](https://matplotlib.org/) is a comprehensive library for creating static, animated, and interactive visualizations in Python. Matplotlib makes easy things easy and hard things possible.\n-\n-#### Plotly\n+#### Mage\n \n-[Plotly](https://plotly.com/python/) is an interactive, open-source, and browser-based graphing library for Python. Built on top of plotly.js, it ships with over 30 chart types, including scientific charts, 3D graphs, statistical charts, SVG maps, financial charts, and more.\n+[Mage](https://www.mage.ai) is an open-source data pipeline tool for transforming and integrating data. Learn about integration between Polars and Mage at [docs.mage.ai](https://docs.mage.ai/integrations/polars).\n \n-#### [Seaborn](https://seaborn.pydata.org/)\n+### Interchange and storage formats\n \n-Seaborn is a Python data visualization library based on Matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\n+#### Apache Arrow\n \n-### IO\n+[Apache Arrow](https://arrow.apache.org/) enables zero-copy reads of data within the same process, meaning that data can be directly accessed in its in-memory format without the need for copying or serialisation. This enhances performance when integrating with different tools using Apache Arrow. Polars is compatible with a wide range of libraries that also make use of Apache Arrow, like pandas and DuckDB.\n \n #### Delta Lake\n \n The [Delta Lake](https://github.com/delta-io/delta-rs) project aims to unlock the power of the Deltalake for as many users and projects as possible by providing native low-level APIs aimed at developers and integrators, as well as a high-level operations API that lets you query, inspect, and operate your Delta Lake with ease.\n \n Read how to use Delta Lake with Polars [at Delta Lake](https://delta-io.github.io/delta-rs/integrations/delta-lake-polars/#reading-a-delta-lake-table-with-polars).\n \n-### Machine Learning\n+#### Apache Iceberg\n+\n+[Iceberg](https://iceberg.apache.org/) is a high-performance format for huge analytic tables. It ensures reliable and efficient data handling by abstracting complex table operations and maintaining consistent table states across multiple platforms and services.\n+\n+Read more on [using Apache Iceberg with Polars](https://tabular.io/apache-iceberg-cookbook/pyiceberg-polars/).\n+\n+### Machine learning\n \n #### Scikit Learn\n \n Since [Scikit Learn](https://scikit-learn.org/stable/) 1.4, all transformers support Polars output. See the change log for [more details](https://scikit-learn.org/dev/whats_new/v1.4.html#changes-impacting-all-modules).\n \n-### Other\n+### Validation and quality\n \n-#### DuckDB\n+#### Pandera\n \n-[DuckDB](https://duckdb.org) is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. Read about integration with Polars [on the DuckDB website](https://duckdb.org/docs/guides/python/polars).\n+[pandera](https://pandera.readthedocs.io/en/stable/) is a Union.ai open source project that provides a flexible and expressive API for performing data validation on dataframe-like objects to make data processing pipelines more readable and robust. Find out how to do [data validation with pandera and Polars](https://pandera.readthedocs.io/en/stable/polars.html)\n \n-#### Great Tables\n+### Visualization and presentation\n \n-With [Great Tables](https://posit-dev.github.io/great-tables/articles/intro.html) anyone can make wonderful-looking tables in Python. Here is a [blog post](https://posit-dev.github.io/great-tables/blog/polars-styling/) on how to use Great Tables with Polars.\n+#### hvPlot\n \n-#### LanceDB\n+[hvPlot](https://hvplot.holoviz.org/) is available as the default plotting backend for Polars making it simple to create interactive and static visualisations. You can use hvPlot by using the feature flag `plot` during installing.\n \n-[LanceDB](https://lancedb.com/) is a developer-friendly, serverless vector database for AI applications. They have added a direct integration with Polars. LanceDB can ingest Polars dataframes, return results as polars dataframes, and export the entire table as a polars lazyframe. You can find a quick tutorial in their blog [LanceDB + Polars](https://blog.lancedb.com/lancedb-polars-2d5eb32a8aa3)\n+```python\n+pip install 'polars[plot]'",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1670793352",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 17525,
        "pr_file": "docs/user-guide/ecosystem.md",
        "discussion_id": "1670793352",
        "commented_code": "@@ -6,68 +6,83 @@ On this page you can find a non-exhaustive list of libraries and tools that supp\n \n ### Table of contents:\n \n-- [Apache Arrow](#apache-arrow)\n-- [Data visualisation](#data-visualisation)\n-- [IO](#io)\n+- [Database integration](#database-integration)\n+- [Data pipelines](#data-pipelines)\n+- [Interchange and open storage formats](#interchange-and-storage-formats)\n - [Machine learning](#machine-learning)\n-- [Other](#other)\n+- [Validation and quality](#validation-and-quality)\n+- [Visualization and presentation](#visualization-and-presentation)\n \n ---\n \n-### Apache Arrow\n+### Database integration\n \n-[Apache Arrow](https://arrow.apache.org/) enables zero-copy reads of data within the same process, meaning that data can be directly accessed in its in-memory format without the need for copying or serialisation. This enhances performance when integrating with different tools using Apache Arrow. Polars is compatible with a wide range of libraries that also make use of Apache Arrow, like Pandas and DuckDB.\n-\n-### Data visualisation\n+#### DuckDB\n \n-#### hvPlot\n+[DuckDB](https://duckdb.org) is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. Read about integration with Polars [on the DuckDB website](https://duckdb.org/docs/guides/python/polars).\n \n-[hvPlot](https://hvplot.holoviz.org/) is available as the default plotting backend for Polars making it simple to create interactive and static visualisations. You can use hvPlot by using the feature flag `plot` during installing.\n+#### LanceDB\n \n-```python\n-pip install 'polars[plot]'\n-```\n+[LanceDB](https://lancedb.com/) is a developer-friendly, serverless vector database for AI applications. They have added a direct integration with Polars. LanceDB can ingest Polars dataframes, return results as polars dataframes, and export the entire table as a polars lazyframe. You can find a quick tutorial in their blog [LanceDB + Polars](https://blog.lancedb.com/lancedb-polars-2d5eb32a8aa3)\n \n-#### Matplotlib\n+### Data pipelines\n \n-[Matplotlib](https://matplotlib.org/) is a comprehensive library for creating static, animated, and interactive visualizations in Python. Matplotlib makes easy things easy and hard things possible.\n-\n-#### Plotly\n+#### Mage\n \n-[Plotly](https://plotly.com/python/) is an interactive, open-source, and browser-based graphing library for Python. Built on top of plotly.js, it ships with over 30 chart types, including scientific charts, 3D graphs, statistical charts, SVG maps, financial charts, and more.\n+[Mage](https://www.mage.ai) is an open-source data pipeline tool for transforming and integrating data. Learn about integration between Polars and Mage at [docs.mage.ai](https://docs.mage.ai/integrations/polars).\n \n-#### [Seaborn](https://seaborn.pydata.org/)\n+### Interchange and storage formats\n \n-Seaborn is a Python data visualization library based on Matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\n+#### Apache Arrow\n \n-### IO\n+[Apache Arrow](https://arrow.apache.org/) enables zero-copy reads of data within the same process, meaning that data can be directly accessed in its in-memory format without the need for copying or serialisation. This enhances performance when integrating with different tools using Apache Arrow. Polars is compatible with a wide range of libraries that also make use of Apache Arrow, like pandas and DuckDB.\n \n #### Delta Lake\n \n The [Delta Lake](https://github.com/delta-io/delta-rs) project aims to unlock the power of the Deltalake for as many users and projects as possible by providing native low-level APIs aimed at developers and integrators, as well as a high-level operations API that lets you query, inspect, and operate your Delta Lake with ease.\n \n Read how to use Delta Lake with Polars [at Delta Lake](https://delta-io.github.io/delta-rs/integrations/delta-lake-polars/#reading-a-delta-lake-table-with-polars).\n \n-### Machine Learning\n+#### Apache Iceberg\n+\n+[Iceberg](https://iceberg.apache.org/) is a high-performance format for huge analytic tables. It ensures reliable and efficient data handling by abstracting complex table operations and maintaining consistent table states across multiple platforms and services.\n+\n+Read more on [using Apache Iceberg with Polars](https://tabular.io/apache-iceberg-cookbook/pyiceberg-polars/).\n+\n+### Machine learning\n \n #### Scikit Learn\n \n Since [Scikit Learn](https://scikit-learn.org/stable/) 1.4, all transformers support Polars output. See the change log for [more details](https://scikit-learn.org/dev/whats_new/v1.4.html#changes-impacting-all-modules).\n \n-### Other\n+### Validation and quality\n \n-#### DuckDB\n+#### Pandera\n \n-[DuckDB](https://duckdb.org) is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. Read about integration with Polars [on the DuckDB website](https://duckdb.org/docs/guides/python/polars).\n+[pandera](https://pandera.readthedocs.io/en/stable/) is a Union.ai open source project that provides a flexible and expressive API for performing data validation on dataframe-like objects to make data processing pipelines more readable and robust. Find out how to do [data validation with pandera and Polars](https://pandera.readthedocs.io/en/stable/polars.html)\n \n-#### Great Tables\n+### Visualization and presentation\n \n-With [Great Tables](https://posit-dev.github.io/great-tables/articles/intro.html) anyone can make wonderful-looking tables in Python. Here is a [blog post](https://posit-dev.github.io/great-tables/blog/polars-styling/) on how to use Great Tables with Polars.\n+#### hvPlot\n \n-#### LanceDB\n+[hvPlot](https://hvplot.holoviz.org/) is available as the default plotting backend for Polars making it simple to create interactive and static visualisations. You can use hvPlot by using the feature flag `plot` during installing.\n \n-[LanceDB](https://lancedb.com/) is a developer-friendly, serverless vector database for AI applications. They have added a direct integration with Polars. LanceDB can ingest Polars dataframes, return results as polars dataframes, and export the entire table as a polars lazyframe. You can find a quick tutorial in their blog [LanceDB + Polars](https://blog.lancedb.com/lancedb-polars-2d5eb32a8aa3)\n+```python\n+pip install 'polars[plot]'",
        "comment_created_at": "2024-07-09T16:02:41+00:00",
        "comment_author": "mcrumiller",
        "comment_body": "Not sure why the quotes were originally in there, quotes aren't allowed here. It should be `pip install polars[plot]` without quotes.",
        "pr_file_module": null
      },
      {
        "comment_id": "1672169890",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 17525,
        "pr_file": "docs/user-guide/ecosystem.md",
        "discussion_id": "1670793352",
        "commented_code": "@@ -6,68 +6,83 @@ On this page you can find a non-exhaustive list of libraries and tools that supp\n \n ### Table of contents:\n \n-- [Apache Arrow](#apache-arrow)\n-- [Data visualisation](#data-visualisation)\n-- [IO](#io)\n+- [Database integration](#database-integration)\n+- [Data pipelines](#data-pipelines)\n+- [Interchange and open storage formats](#interchange-and-storage-formats)\n - [Machine learning](#machine-learning)\n-- [Other](#other)\n+- [Validation and quality](#validation-and-quality)\n+- [Visualization and presentation](#visualization-and-presentation)\n \n ---\n \n-### Apache Arrow\n+### Database integration\n \n-[Apache Arrow](https://arrow.apache.org/) enables zero-copy reads of data within the same process, meaning that data can be directly accessed in its in-memory format without the need for copying or serialisation. This enhances performance when integrating with different tools using Apache Arrow. Polars is compatible with a wide range of libraries that also make use of Apache Arrow, like Pandas and DuckDB.\n-\n-### Data visualisation\n+#### DuckDB\n \n-#### hvPlot\n+[DuckDB](https://duckdb.org) is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. Read about integration with Polars [on the DuckDB website](https://duckdb.org/docs/guides/python/polars).\n \n-[hvPlot](https://hvplot.holoviz.org/) is available as the default plotting backend for Polars making it simple to create interactive and static visualisations. You can use hvPlot by using the feature flag `plot` during installing.\n+#### LanceDB\n \n-```python\n-pip install 'polars[plot]'\n-```\n+[LanceDB](https://lancedb.com/) is a developer-friendly, serverless vector database for AI applications. They have added a direct integration with Polars. LanceDB can ingest Polars dataframes, return results as polars dataframes, and export the entire table as a polars lazyframe. You can find a quick tutorial in their blog [LanceDB + Polars](https://blog.lancedb.com/lancedb-polars-2d5eb32a8aa3)\n \n-#### Matplotlib\n+### Data pipelines\n \n-[Matplotlib](https://matplotlib.org/) is a comprehensive library for creating static, animated, and interactive visualizations in Python. Matplotlib makes easy things easy and hard things possible.\n-\n-#### Plotly\n+#### Mage\n \n-[Plotly](https://plotly.com/python/) is an interactive, open-source, and browser-based graphing library for Python. Built on top of plotly.js, it ships with over 30 chart types, including scientific charts, 3D graphs, statistical charts, SVG maps, financial charts, and more.\n+[Mage](https://www.mage.ai) is an open-source data pipeline tool for transforming and integrating data. Learn about integration between Polars and Mage at [docs.mage.ai](https://docs.mage.ai/integrations/polars).\n \n-#### [Seaborn](https://seaborn.pydata.org/)\n+### Interchange and storage formats\n \n-Seaborn is a Python data visualization library based on Matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\n+#### Apache Arrow\n \n-### IO\n+[Apache Arrow](https://arrow.apache.org/) enables zero-copy reads of data within the same process, meaning that data can be directly accessed in its in-memory format without the need for copying or serialisation. This enhances performance when integrating with different tools using Apache Arrow. Polars is compatible with a wide range of libraries that also make use of Apache Arrow, like pandas and DuckDB.\n \n #### Delta Lake\n \n The [Delta Lake](https://github.com/delta-io/delta-rs) project aims to unlock the power of the Deltalake for as many users and projects as possible by providing native low-level APIs aimed at developers and integrators, as well as a high-level operations API that lets you query, inspect, and operate your Delta Lake with ease.\n \n Read how to use Delta Lake with Polars [at Delta Lake](https://delta-io.github.io/delta-rs/integrations/delta-lake-polars/#reading-a-delta-lake-table-with-polars).\n \n-### Machine Learning\n+#### Apache Iceberg\n+\n+[Iceberg](https://iceberg.apache.org/) is a high-performance format for huge analytic tables. It ensures reliable and efficient data handling by abstracting complex table operations and maintaining consistent table states across multiple platforms and services.\n+\n+Read more on [using Apache Iceberg with Polars](https://tabular.io/apache-iceberg-cookbook/pyiceberg-polars/).\n+\n+### Machine learning\n \n #### Scikit Learn\n \n Since [Scikit Learn](https://scikit-learn.org/stable/) 1.4, all transformers support Polars output. See the change log for [more details](https://scikit-learn.org/dev/whats_new/v1.4.html#changes-impacting-all-modules).\n \n-### Other\n+### Validation and quality\n \n-#### DuckDB\n+#### Pandera\n \n-[DuckDB](https://duckdb.org) is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. Read about integration with Polars [on the DuckDB website](https://duckdb.org/docs/guides/python/polars).\n+[pandera](https://pandera.readthedocs.io/en/stable/) is a Union.ai open source project that provides a flexible and expressive API for performing data validation on dataframe-like objects to make data processing pipelines more readable and robust. Find out how to do [data validation with pandera and Polars](https://pandera.readthedocs.io/en/stable/polars.html)\n \n-#### Great Tables\n+### Visualization and presentation\n \n-With [Great Tables](https://posit-dev.github.io/great-tables/articles/intro.html) anyone can make wonderful-looking tables in Python. Here is a [blog post](https://posit-dev.github.io/great-tables/blog/polars-styling/) on how to use Great Tables with Polars.\n+#### hvPlot\n \n-#### LanceDB\n+[hvPlot](https://hvplot.holoviz.org/) is available as the default plotting backend for Polars making it simple to create interactive and static visualisations. You can use hvPlot by using the feature flag `plot` during installing.\n \n-[LanceDB](https://lancedb.com/) is a developer-friendly, serverless vector database for AI applications. They have added a direct integration with Polars. LanceDB can ingest Polars dataframes, return results as polars dataframes, and export the entire table as a polars lazyframe. You can find a quick tutorial in their blog [LanceDB + Polars](https://blog.lancedb.com/lancedb-polars-2d5eb32a8aa3)\n+```python\n+pip install 'polars[plot]'",
        "comment_created_at": "2024-07-10T12:24:08+00:00",
        "comment_author": "r-brink",
        "comment_body": "Which OS are you on?\r\n\r\nI am on MacOS, when I run `pip install polars[plot]` without quotes, I get this error `no matches found: polars[plot]`. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1672228751",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 17525,
        "pr_file": "docs/user-guide/ecosystem.md",
        "discussion_id": "1670793352",
        "commented_code": "@@ -6,68 +6,83 @@ On this page you can find a non-exhaustive list of libraries and tools that supp\n \n ### Table of contents:\n \n-- [Apache Arrow](#apache-arrow)\n-- [Data visualisation](#data-visualisation)\n-- [IO](#io)\n+- [Database integration](#database-integration)\n+- [Data pipelines](#data-pipelines)\n+- [Interchange and open storage formats](#interchange-and-storage-formats)\n - [Machine learning](#machine-learning)\n-- [Other](#other)\n+- [Validation and quality](#validation-and-quality)\n+- [Visualization and presentation](#visualization-and-presentation)\n \n ---\n \n-### Apache Arrow\n+### Database integration\n \n-[Apache Arrow](https://arrow.apache.org/) enables zero-copy reads of data within the same process, meaning that data can be directly accessed in its in-memory format without the need for copying or serialisation. This enhances performance when integrating with different tools using Apache Arrow. Polars is compatible with a wide range of libraries that also make use of Apache Arrow, like Pandas and DuckDB.\n-\n-### Data visualisation\n+#### DuckDB\n \n-#### hvPlot\n+[DuckDB](https://duckdb.org) is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. Read about integration with Polars [on the DuckDB website](https://duckdb.org/docs/guides/python/polars).\n \n-[hvPlot](https://hvplot.holoviz.org/) is available as the default plotting backend for Polars making it simple to create interactive and static visualisations. You can use hvPlot by using the feature flag `plot` during installing.\n+#### LanceDB\n \n-```python\n-pip install 'polars[plot]'\n-```\n+[LanceDB](https://lancedb.com/) is a developer-friendly, serverless vector database for AI applications. They have added a direct integration with Polars. LanceDB can ingest Polars dataframes, return results as polars dataframes, and export the entire table as a polars lazyframe. You can find a quick tutorial in their blog [LanceDB + Polars](https://blog.lancedb.com/lancedb-polars-2d5eb32a8aa3)\n \n-#### Matplotlib\n+### Data pipelines\n \n-[Matplotlib](https://matplotlib.org/) is a comprehensive library for creating static, animated, and interactive visualizations in Python. Matplotlib makes easy things easy and hard things possible.\n-\n-#### Plotly\n+#### Mage\n \n-[Plotly](https://plotly.com/python/) is an interactive, open-source, and browser-based graphing library for Python. Built on top of plotly.js, it ships with over 30 chart types, including scientific charts, 3D graphs, statistical charts, SVG maps, financial charts, and more.\n+[Mage](https://www.mage.ai) is an open-source data pipeline tool for transforming and integrating data. Learn about integration between Polars and Mage at [docs.mage.ai](https://docs.mage.ai/integrations/polars).\n \n-#### [Seaborn](https://seaborn.pydata.org/)\n+### Interchange and storage formats\n \n-Seaborn is a Python data visualization library based on Matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\n+#### Apache Arrow\n \n-### IO\n+[Apache Arrow](https://arrow.apache.org/) enables zero-copy reads of data within the same process, meaning that data can be directly accessed in its in-memory format without the need for copying or serialisation. This enhances performance when integrating with different tools using Apache Arrow. Polars is compatible with a wide range of libraries that also make use of Apache Arrow, like pandas and DuckDB.\n \n #### Delta Lake\n \n The [Delta Lake](https://github.com/delta-io/delta-rs) project aims to unlock the power of the Deltalake for as many users and projects as possible by providing native low-level APIs aimed at developers and integrators, as well as a high-level operations API that lets you query, inspect, and operate your Delta Lake with ease.\n \n Read how to use Delta Lake with Polars [at Delta Lake](https://delta-io.github.io/delta-rs/integrations/delta-lake-polars/#reading-a-delta-lake-table-with-polars).\n \n-### Machine Learning\n+#### Apache Iceberg\n+\n+[Iceberg](https://iceberg.apache.org/) is a high-performance format for huge analytic tables. It ensures reliable and efficient data handling by abstracting complex table operations and maintaining consistent table states across multiple platforms and services.\n+\n+Read more on [using Apache Iceberg with Polars](https://tabular.io/apache-iceberg-cookbook/pyiceberg-polars/).\n+\n+### Machine learning\n \n #### Scikit Learn\n \n Since [Scikit Learn](https://scikit-learn.org/stable/) 1.4, all transformers support Polars output. See the change log for [more details](https://scikit-learn.org/dev/whats_new/v1.4.html#changes-impacting-all-modules).\n \n-### Other\n+### Validation and quality\n \n-#### DuckDB\n+#### Pandera\n \n-[DuckDB](https://duckdb.org) is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. Read about integration with Polars [on the DuckDB website](https://duckdb.org/docs/guides/python/polars).\n+[pandera](https://pandera.readthedocs.io/en/stable/) is a Union.ai open source project that provides a flexible and expressive API for performing data validation on dataframe-like objects to make data processing pipelines more readable and robust. Find out how to do [data validation with pandera and Polars](https://pandera.readthedocs.io/en/stable/polars.html)\n \n-#### Great Tables\n+### Visualization and presentation\n \n-With [Great Tables](https://posit-dev.github.io/great-tables/articles/intro.html) anyone can make wonderful-looking tables in Python. Here is a [blog post](https://posit-dev.github.io/great-tables/blog/polars-styling/) on how to use Great Tables with Polars.\n+#### hvPlot\n \n-#### LanceDB\n+[hvPlot](https://hvplot.holoviz.org/) is available as the default plotting backend for Polars making it simple to create interactive and static visualisations. You can use hvPlot by using the feature flag `plot` during installing.\n \n-[LanceDB](https://lancedb.com/) is a developer-friendly, serverless vector database for AI applications. They have added a direct integration with Polars. LanceDB can ingest Polars dataframes, return results as polars dataframes, and export the entire table as a polars lazyframe. You can find a quick tutorial in their blog [LanceDB + Polars](https://blog.lancedb.com/lancedb-polars-2d5eb32a8aa3)\n+```python\n+pip install 'polars[plot]'",
        "comment_created_at": "2024-07-10T13:02:06+00:00",
        "comment_author": "mcrumiller",
        "comment_body": "Windows, I'll check on WSL when I get home from work.\r\n\r\n```\r\nC:\\>pip install polars[plot]\r\n<works>\r\nC:\\>pip install 'polars[plot]'\r\nERROR: Invalid requirement: \"'polars[plot]'\"\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1672232408",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 17525,
        "pr_file": "docs/user-guide/ecosystem.md",
        "discussion_id": "1670793352",
        "commented_code": "@@ -6,68 +6,83 @@ On this page you can find a non-exhaustive list of libraries and tools that supp\n \n ### Table of contents:\n \n-- [Apache Arrow](#apache-arrow)\n-- [Data visualisation](#data-visualisation)\n-- [IO](#io)\n+- [Database integration](#database-integration)\n+- [Data pipelines](#data-pipelines)\n+- [Interchange and open storage formats](#interchange-and-storage-formats)\n - [Machine learning](#machine-learning)\n-- [Other](#other)\n+- [Validation and quality](#validation-and-quality)\n+- [Visualization and presentation](#visualization-and-presentation)\n \n ---\n \n-### Apache Arrow\n+### Database integration\n \n-[Apache Arrow](https://arrow.apache.org/) enables zero-copy reads of data within the same process, meaning that data can be directly accessed in its in-memory format without the need for copying or serialisation. This enhances performance when integrating with different tools using Apache Arrow. Polars is compatible with a wide range of libraries that also make use of Apache Arrow, like Pandas and DuckDB.\n-\n-### Data visualisation\n+#### DuckDB\n \n-#### hvPlot\n+[DuckDB](https://duckdb.org) is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. Read about integration with Polars [on the DuckDB website](https://duckdb.org/docs/guides/python/polars).\n \n-[hvPlot](https://hvplot.holoviz.org/) is available as the default plotting backend for Polars making it simple to create interactive and static visualisations. You can use hvPlot by using the feature flag `plot` during installing.\n+#### LanceDB\n \n-```python\n-pip install 'polars[plot]'\n-```\n+[LanceDB](https://lancedb.com/) is a developer-friendly, serverless vector database for AI applications. They have added a direct integration with Polars. LanceDB can ingest Polars dataframes, return results as polars dataframes, and export the entire table as a polars lazyframe. You can find a quick tutorial in their blog [LanceDB + Polars](https://blog.lancedb.com/lancedb-polars-2d5eb32a8aa3)\n \n-#### Matplotlib\n+### Data pipelines\n \n-[Matplotlib](https://matplotlib.org/) is a comprehensive library for creating static, animated, and interactive visualizations in Python. Matplotlib makes easy things easy and hard things possible.\n-\n-#### Plotly\n+#### Mage\n \n-[Plotly](https://plotly.com/python/) is an interactive, open-source, and browser-based graphing library for Python. Built on top of plotly.js, it ships with over 30 chart types, including scientific charts, 3D graphs, statistical charts, SVG maps, financial charts, and more.\n+[Mage](https://www.mage.ai) is an open-source data pipeline tool for transforming and integrating data. Learn about integration between Polars and Mage at [docs.mage.ai](https://docs.mage.ai/integrations/polars).\n \n-#### [Seaborn](https://seaborn.pydata.org/)\n+### Interchange and storage formats\n \n-Seaborn is a Python data visualization library based on Matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\n+#### Apache Arrow\n \n-### IO\n+[Apache Arrow](https://arrow.apache.org/) enables zero-copy reads of data within the same process, meaning that data can be directly accessed in its in-memory format without the need for copying or serialisation. This enhances performance when integrating with different tools using Apache Arrow. Polars is compatible with a wide range of libraries that also make use of Apache Arrow, like pandas and DuckDB.\n \n #### Delta Lake\n \n The [Delta Lake](https://github.com/delta-io/delta-rs) project aims to unlock the power of the Deltalake for as many users and projects as possible by providing native low-level APIs aimed at developers and integrators, as well as a high-level operations API that lets you query, inspect, and operate your Delta Lake with ease.\n \n Read how to use Delta Lake with Polars [at Delta Lake](https://delta-io.github.io/delta-rs/integrations/delta-lake-polars/#reading-a-delta-lake-table-with-polars).\n \n-### Machine Learning\n+#### Apache Iceberg\n+\n+[Iceberg](https://iceberg.apache.org/) is a high-performance format for huge analytic tables. It ensures reliable and efficient data handling by abstracting complex table operations and maintaining consistent table states across multiple platforms and services.\n+\n+Read more on [using Apache Iceberg with Polars](https://tabular.io/apache-iceberg-cookbook/pyiceberg-polars/).\n+\n+### Machine learning\n \n #### Scikit Learn\n \n Since [Scikit Learn](https://scikit-learn.org/stable/) 1.4, all transformers support Polars output. See the change log for [more details](https://scikit-learn.org/dev/whats_new/v1.4.html#changes-impacting-all-modules).\n \n-### Other\n+### Validation and quality\n \n-#### DuckDB\n+#### Pandera\n \n-[DuckDB](https://duckdb.org) is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. Read about integration with Polars [on the DuckDB website](https://duckdb.org/docs/guides/python/polars).\n+[pandera](https://pandera.readthedocs.io/en/stable/) is a Union.ai open source project that provides a flexible and expressive API for performing data validation on dataframe-like objects to make data processing pipelines more readable and robust. Find out how to do [data validation with pandera and Polars](https://pandera.readthedocs.io/en/stable/polars.html)\n \n-#### Great Tables\n+### Visualization and presentation\n \n-With [Great Tables](https://posit-dev.github.io/great-tables/articles/intro.html) anyone can make wonderful-looking tables in Python. Here is a [blog post](https://posit-dev.github.io/great-tables/blog/polars-styling/) on how to use Great Tables with Polars.\n+#### hvPlot\n \n-#### LanceDB\n+[hvPlot](https://hvplot.holoviz.org/) is available as the default plotting backend for Polars making it simple to create interactive and static visualisations. You can use hvPlot by using the feature flag `plot` during installing.\n \n-[LanceDB](https://lancedb.com/) is a developer-friendly, serverless vector database for AI applications. They have added a direct integration with Polars. LanceDB can ingest Polars dataframes, return results as polars dataframes, and export the entire table as a polars lazyframe. You can find a quick tutorial in their blog [LanceDB + Polars](https://blog.lancedb.com/lancedb-polars-2d5eb32a8aa3)\n+```python\n+pip install 'polars[plot]'",
        "comment_created_at": "2024-07-10T13:04:44+00:00",
        "comment_author": "r-brink",
        "comment_body": "Interesting. We also use the quotes in the Setup section [(link)](https://github.com/pola-rs/polars?tab=readme-ov-file#setup) of the README:\r\n\r\n> Install Polars with all optional dependencies.\r\n> \r\n> `pip install 'polars[all]'`",
        "pr_file_module": null
      },
      {
        "comment_id": "1672249785",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 17525,
        "pr_file": "docs/user-guide/ecosystem.md",
        "discussion_id": "1670793352",
        "commented_code": "@@ -6,68 +6,83 @@ On this page you can find a non-exhaustive list of libraries and tools that supp\n \n ### Table of contents:\n \n-- [Apache Arrow](#apache-arrow)\n-- [Data visualisation](#data-visualisation)\n-- [IO](#io)\n+- [Database integration](#database-integration)\n+- [Data pipelines](#data-pipelines)\n+- [Interchange and open storage formats](#interchange-and-storage-formats)\n - [Machine learning](#machine-learning)\n-- [Other](#other)\n+- [Validation and quality](#validation-and-quality)\n+- [Visualization and presentation](#visualization-and-presentation)\n \n ---\n \n-### Apache Arrow\n+### Database integration\n \n-[Apache Arrow](https://arrow.apache.org/) enables zero-copy reads of data within the same process, meaning that data can be directly accessed in its in-memory format without the need for copying or serialisation. This enhances performance when integrating with different tools using Apache Arrow. Polars is compatible with a wide range of libraries that also make use of Apache Arrow, like Pandas and DuckDB.\n-\n-### Data visualisation\n+#### DuckDB\n \n-#### hvPlot\n+[DuckDB](https://duckdb.org) is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. Read about integration with Polars [on the DuckDB website](https://duckdb.org/docs/guides/python/polars).\n \n-[hvPlot](https://hvplot.holoviz.org/) is available as the default plotting backend for Polars making it simple to create interactive and static visualisations. You can use hvPlot by using the feature flag `plot` during installing.\n+#### LanceDB\n \n-```python\n-pip install 'polars[plot]'\n-```\n+[LanceDB](https://lancedb.com/) is a developer-friendly, serverless vector database for AI applications. They have added a direct integration with Polars. LanceDB can ingest Polars dataframes, return results as polars dataframes, and export the entire table as a polars lazyframe. You can find a quick tutorial in their blog [LanceDB + Polars](https://blog.lancedb.com/lancedb-polars-2d5eb32a8aa3)\n \n-#### Matplotlib\n+### Data pipelines\n \n-[Matplotlib](https://matplotlib.org/) is a comprehensive library for creating static, animated, and interactive visualizations in Python. Matplotlib makes easy things easy and hard things possible.\n-\n-#### Plotly\n+#### Mage\n \n-[Plotly](https://plotly.com/python/) is an interactive, open-source, and browser-based graphing library for Python. Built on top of plotly.js, it ships with over 30 chart types, including scientific charts, 3D graphs, statistical charts, SVG maps, financial charts, and more.\n+[Mage](https://www.mage.ai) is an open-source data pipeline tool for transforming and integrating data. Learn about integration between Polars and Mage at [docs.mage.ai](https://docs.mage.ai/integrations/polars).\n \n-#### [Seaborn](https://seaborn.pydata.org/)\n+### Interchange and storage formats\n \n-Seaborn is a Python data visualization library based on Matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\n+#### Apache Arrow\n \n-### IO\n+[Apache Arrow](https://arrow.apache.org/) enables zero-copy reads of data within the same process, meaning that data can be directly accessed in its in-memory format without the need for copying or serialisation. This enhances performance when integrating with different tools using Apache Arrow. Polars is compatible with a wide range of libraries that also make use of Apache Arrow, like pandas and DuckDB.\n \n #### Delta Lake\n \n The [Delta Lake](https://github.com/delta-io/delta-rs) project aims to unlock the power of the Deltalake for as many users and projects as possible by providing native low-level APIs aimed at developers and integrators, as well as a high-level operations API that lets you query, inspect, and operate your Delta Lake with ease.\n \n Read how to use Delta Lake with Polars [at Delta Lake](https://delta-io.github.io/delta-rs/integrations/delta-lake-polars/#reading-a-delta-lake-table-with-polars).\n \n-### Machine Learning\n+#### Apache Iceberg\n+\n+[Iceberg](https://iceberg.apache.org/) is a high-performance format for huge analytic tables. It ensures reliable and efficient data handling by abstracting complex table operations and maintaining consistent table states across multiple platforms and services.\n+\n+Read more on [using Apache Iceberg with Polars](https://tabular.io/apache-iceberg-cookbook/pyiceberg-polars/).\n+\n+### Machine learning\n \n #### Scikit Learn\n \n Since [Scikit Learn](https://scikit-learn.org/stable/) 1.4, all transformers support Polars output. See the change log for [more details](https://scikit-learn.org/dev/whats_new/v1.4.html#changes-impacting-all-modules).\n \n-### Other\n+### Validation and quality\n \n-#### DuckDB\n+#### Pandera\n \n-[DuckDB](https://duckdb.org) is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. Read about integration with Polars [on the DuckDB website](https://duckdb.org/docs/guides/python/polars).\n+[pandera](https://pandera.readthedocs.io/en/stable/) is a Union.ai open source project that provides a flexible and expressive API for performing data validation on dataframe-like objects to make data processing pipelines more readable and robust. Find out how to do [data validation with pandera and Polars](https://pandera.readthedocs.io/en/stable/polars.html)\n \n-#### Great Tables\n+### Visualization and presentation\n \n-With [Great Tables](https://posit-dev.github.io/great-tables/articles/intro.html) anyone can make wonderful-looking tables in Python. Here is a [blog post](https://posit-dev.github.io/great-tables/blog/polars-styling/) on how to use Great Tables with Polars.\n+#### hvPlot\n \n-#### LanceDB\n+[hvPlot](https://hvplot.holoviz.org/) is available as the default plotting backend for Polars making it simple to create interactive and static visualisations. You can use hvPlot by using the feature flag `plot` during installing.\n \n-[LanceDB](https://lancedb.com/) is a developer-friendly, serverless vector database for AI applications. They have added a direct integration with Polars. LanceDB can ingest Polars dataframes, return results as polars dataframes, and export the entire table as a polars lazyframe. You can find a quick tutorial in their blog [LanceDB + Polars](https://blog.lancedb.com/lancedb-polars-2d5eb32a8aa3)\n+```python\n+pip install 'polars[plot]'",
        "comment_created_at": "2024-07-10T13:15:26+00:00",
        "comment_author": "mcrumiller",
        "comment_body": "Huh. That's a bit irritating for documentation. Probably not worth mentioning unless you want to make a quick tabbed interface with a separate Windows tab.",
        "pr_file_module": null
      },
      {
        "comment_id": "1680532289",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 17525,
        "pr_file": "docs/user-guide/ecosystem.md",
        "discussion_id": "1670793352",
        "commented_code": "@@ -6,68 +6,83 @@ On this page you can find a non-exhaustive list of libraries and tools that supp\n \n ### Table of contents:\n \n-- [Apache Arrow](#apache-arrow)\n-- [Data visualisation](#data-visualisation)\n-- [IO](#io)\n+- [Database integration](#database-integration)\n+- [Data pipelines](#data-pipelines)\n+- [Interchange and open storage formats](#interchange-and-storage-formats)\n - [Machine learning](#machine-learning)\n-- [Other](#other)\n+- [Validation and quality](#validation-and-quality)\n+- [Visualization and presentation](#visualization-and-presentation)\n \n ---\n \n-### Apache Arrow\n+### Database integration\n \n-[Apache Arrow](https://arrow.apache.org/) enables zero-copy reads of data within the same process, meaning that data can be directly accessed in its in-memory format without the need for copying or serialisation. This enhances performance when integrating with different tools using Apache Arrow. Polars is compatible with a wide range of libraries that also make use of Apache Arrow, like Pandas and DuckDB.\n-\n-### Data visualisation\n+#### DuckDB\n \n-#### hvPlot\n+[DuckDB](https://duckdb.org) is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. Read about integration with Polars [on the DuckDB website](https://duckdb.org/docs/guides/python/polars).\n \n-[hvPlot](https://hvplot.holoviz.org/) is available as the default plotting backend for Polars making it simple to create interactive and static visualisations. You can use hvPlot by using the feature flag `plot` during installing.\n+#### LanceDB\n \n-```python\n-pip install 'polars[plot]'\n-```\n+[LanceDB](https://lancedb.com/) is a developer-friendly, serverless vector database for AI applications. They have added a direct integration with Polars. LanceDB can ingest Polars dataframes, return results as polars dataframes, and export the entire table as a polars lazyframe. You can find a quick tutorial in their blog [LanceDB + Polars](https://blog.lancedb.com/lancedb-polars-2d5eb32a8aa3)\n \n-#### Matplotlib\n+### Data pipelines\n \n-[Matplotlib](https://matplotlib.org/) is a comprehensive library for creating static, animated, and interactive visualizations in Python. Matplotlib makes easy things easy and hard things possible.\n-\n-#### Plotly\n+#### Mage\n \n-[Plotly](https://plotly.com/python/) is an interactive, open-source, and browser-based graphing library for Python. Built on top of plotly.js, it ships with over 30 chart types, including scientific charts, 3D graphs, statistical charts, SVG maps, financial charts, and more.\n+[Mage](https://www.mage.ai) is an open-source data pipeline tool for transforming and integrating data. Learn about integration between Polars and Mage at [docs.mage.ai](https://docs.mage.ai/integrations/polars).\n \n-#### [Seaborn](https://seaborn.pydata.org/)\n+### Interchange and storage formats\n \n-Seaborn is a Python data visualization library based on Matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\n+#### Apache Arrow\n \n-### IO\n+[Apache Arrow](https://arrow.apache.org/) enables zero-copy reads of data within the same process, meaning that data can be directly accessed in its in-memory format without the need for copying or serialisation. This enhances performance when integrating with different tools using Apache Arrow. Polars is compatible with a wide range of libraries that also make use of Apache Arrow, like pandas and DuckDB.\n \n #### Delta Lake\n \n The [Delta Lake](https://github.com/delta-io/delta-rs) project aims to unlock the power of the Deltalake for as many users and projects as possible by providing native low-level APIs aimed at developers and integrators, as well as a high-level operations API that lets you query, inspect, and operate your Delta Lake with ease.\n \n Read how to use Delta Lake with Polars [at Delta Lake](https://delta-io.github.io/delta-rs/integrations/delta-lake-polars/#reading-a-delta-lake-table-with-polars).\n \n-### Machine Learning\n+#### Apache Iceberg\n+\n+[Iceberg](https://iceberg.apache.org/) is a high-performance format for huge analytic tables. It ensures reliable and efficient data handling by abstracting complex table operations and maintaining consistent table states across multiple platforms and services.\n+\n+Read more on [using Apache Iceberg with Polars](https://tabular.io/apache-iceberg-cookbook/pyiceberg-polars/).\n+\n+### Machine learning\n \n #### Scikit Learn\n \n Since [Scikit Learn](https://scikit-learn.org/stable/) 1.4, all transformers support Polars output. See the change log for [more details](https://scikit-learn.org/dev/whats_new/v1.4.html#changes-impacting-all-modules).\n \n-### Other\n+### Validation and quality\n \n-#### DuckDB\n+#### Pandera\n \n-[DuckDB](https://duckdb.org) is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. Read about integration with Polars [on the DuckDB website](https://duckdb.org/docs/guides/python/polars).\n+[pandera](https://pandera.readthedocs.io/en/stable/) is a Union.ai open source project that provides a flexible and expressive API for performing data validation on dataframe-like objects to make data processing pipelines more readable and robust. Find out how to do [data validation with pandera and Polars](https://pandera.readthedocs.io/en/stable/polars.html)\n \n-#### Great Tables\n+### Visualization and presentation\n \n-With [Great Tables](https://posit-dev.github.io/great-tables/articles/intro.html) anyone can make wonderful-looking tables in Python. Here is a [blog post](https://posit-dev.github.io/great-tables/blog/polars-styling/) on how to use Great Tables with Polars.\n+#### hvPlot\n \n-#### LanceDB\n+[hvPlot](https://hvplot.holoviz.org/) is available as the default plotting backend for Polars making it simple to create interactive and static visualisations. You can use hvPlot by using the feature flag `plot` during installing.\n \n-[LanceDB](https://lancedb.com/) is a developer-friendly, serverless vector database for AI applications. They have added a direct integration with Polars. LanceDB can ingest Polars dataframes, return results as polars dataframes, and export the entire table as a polars lazyframe. You can find a quick tutorial in their blog [LanceDB + Polars](https://blog.lancedb.com/lancedb-polars-2d5eb32a8aa3)\n+```python\n+pip install 'polars[plot]'",
        "comment_created_at": "2024-07-17T07:05:38+00:00",
        "comment_author": "alexander-beedie",
        "comment_body": "Typically it's double-quotes rather than single (at least... in my limited experience ;)\r\n```\r\npip install \"package[stuff]\"\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1894052930",
    "pr_number": 20381,
    "pr_file": "docs/source/user-guide/gpu-support.md",
    "created_at": "2024-12-20T15:09:05+00:00",
    "commented_code": "=== \":fontawesome-brands-python: Python\"\n \n ```bash\n-pip install --extra-index-url=https://pypi.nvidia.com polars[gpu]\n+pip install polars[gpu]\n ```\n \n !!! note Installation on a CUDA 11 system\n \n-    If you have CUDA 11, the installation line is slightly more complicated: the relevant GPU package must be requested by hand.\n+    If you have CUDA 11, the installation line is slightly more complicated: the relevant GPU package must be requested by hand using the NVIDIA package index.",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1894052930",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 20381,
        "pr_file": "docs/source/user-guide/gpu-support.md",
        "discussion_id": "1894052930",
        "commented_code": "@@ -20,12 +20,12 @@ You can install the GPU backend for Polars with a feature flag as part of a norm\n === \":fontawesome-brands-python: Python\"\n \n ```bash\n-pip install --extra-index-url=https://pypi.nvidia.com polars[gpu]\n+pip install polars[gpu]\n ```\n \n !!! note Installation on a CUDA 11 system\n \n-    If you have CUDA 11, the installation line is slightly more complicated: the relevant GPU package must be requested by hand.\n+    If you have CUDA 11, the installation line is slightly more complicated: the relevant GPU package must be requested by hand using the NVIDIA package index.",
        "comment_created_at": "2024-12-20T15:09:05+00:00",
        "comment_author": "bdice",
        "comment_body": "Maybe this is simpler?\r\n```suggestion\r\n    If you have CUDA 11, the installation line also needs the NVIDIA package index to get the CUDA 11 package.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]