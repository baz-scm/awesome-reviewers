[
  {
    "discussion_id": "2083082211",
    "pr_number": 22701,
    "pr_file": "py-polars/polars/expr/array.py",
    "created_at": "2025-05-10T09:34:43+00:00",
    "commented_code": "\"\"\"\n         return wrap_expr(self._pyexpr.arr_len())\n \n+    def slice(self, offset: int, length: int = 5) -> Expr:",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2083082211",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22701,
        "pr_file": "py-polars/polars/expr/array.py",
        "discussion_id": "2083082211",
        "commented_code": "@@ -44,6 +44,147 @@ def len(self) -> Expr:\n         \"\"\"\n         return wrap_expr(self._pyexpr.arr_len())\n \n+    def slice(self, offset: int, length: int = 5) -> Expr:",
        "comment_created_at": "2025-05-10T09:34:43+00:00",
        "comment_author": "coastalwhite",
        "comment_body": "I don't think these should have a default length. The same applies to `head` and `tail`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2083084040",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22701,
        "pr_file": "py-polars/polars/expr/array.py",
        "discussion_id": "2083082211",
        "commented_code": "@@ -44,6 +44,147 @@ def len(self) -> Expr:\n         \"\"\"\n         return wrap_expr(self._pyexpr.arr_len())\n \n+    def slice(self, offset: int, length: int = 5) -> Expr:",
        "comment_created_at": "2025-05-10T09:36:42+00:00",
        "comment_author": "coastalwhite",
        "comment_body": "Ideally, these take `IntoExpr` for the `offset` and `length` parameters and also have an `as_array: bool` flag (with a similar behavior to [`linear_spaces`](https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.linear_spaces.html))",
        "pr_file_module": null
      },
      {
        "comment_id": "2108854544",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22701,
        "pr_file": "py-polars/polars/expr/array.py",
        "discussion_id": "2083082211",
        "commented_code": "@@ -44,6 +44,147 @@ def len(self) -> Expr:\n         \"\"\"\n         return wrap_expr(self._pyexpr.arr_len())\n \n+    def slice(self, offset: int, length: int = 5) -> Expr:",
        "comment_created_at": "2025-05-27T10:44:52+00:00",
        "comment_author": "florian-klein",
        "comment_body": "> I don't think these should have a default length. The same applies to head and tail.\r\n\r\nWhile `.list.slice` doesn't have default values for `length`, `.list.head` and `.list.tail` both do: \r\n```python\r\n  def head(self, n: int | str | Expr = 5) -> Expr:\r\n        \"\"\"\r\n        Slice the first `n` values of every sublist.\r\n        [...]\r\n```\r\n\r\nI would suggest keeping the default value of `n = 5` for consistency reasons for head and tail ",
        "pr_file_module": null
      },
      {
        "comment_id": "2108887314",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22701,
        "pr_file": "py-polars/polars/expr/array.py",
        "discussion_id": "2083082211",
        "commented_code": "@@ -44,6 +44,147 @@ def len(self) -> Expr:\n         \"\"\"\n         return wrap_expr(self._pyexpr.arr_len())\n \n+    def slice(self, offset: int, length: int = 5) -> Expr:",
        "comment_created_at": "2025-05-27T11:02:40+00:00",
        "comment_author": "florian-klein",
        "comment_body": "\r\n@coastalwhite If we allow slicing based on values in a column instead of only a `lit()`, the slices might not have the same length, meaning we can't construct an `array` column. \r\n\r\nWe could: \r\n\r\n1.  cast to `list` to keep elements of different lengths when they have a different length. I don't like this approach as it adds complexity and users could also just `to_list()` and then `slice`. \r\n2. Not allow `offset` and `index` column combinations that result in arrays that have a different length and bail with an error + hint to the `to_list` + `slice` approach\r\n\r\nI would prefer approach 2. as 1. feels unexpected (i.e. why do we suddenly get a list column?). Let me know what you think :) ",
        "pr_file_module": null
      },
      {
        "comment_id": "2108956742",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22701,
        "pr_file": "py-polars/polars/expr/array.py",
        "discussion_id": "2083082211",
        "commented_code": "@@ -44,6 +44,147 @@ def len(self) -> Expr:\n         \"\"\"\n         return wrap_expr(self._pyexpr.arr_len())\n \n+    def slice(self, offset: int, length: int = 5) -> Expr:",
        "comment_created_at": "2025-05-27T11:38:26+00:00",
        "comment_author": "florian-klein",
        "comment_body": "Also, there's not really a way to infer the size of an array without first evaluating `offset` and `length` if they are an expression. We need at least some universal length to determine the output type of array beforehand when constructing the fields (i.e. to tell the lazy API that `.slice(1, 3)` on an `Array(..., width=6)` should result in a `Array(..., width=3)`. \r\n\r\nThinking about this, I'm not 100% sure if passing a non-lit expression is even feasible using the lazy API for arrays as we have now way to know about the resulting array dtype without first looking at some values. \r\n\r\nMaybe just allow fixed integer slice values for array? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2109119771",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22701,
        "pr_file": "py-polars/polars/expr/array.py",
        "discussion_id": "2083082211",
        "commented_code": "@@ -44,6 +44,147 @@ def len(self) -> Expr:\n         \"\"\"\n         return wrap_expr(self._pyexpr.arr_len())\n \n+    def slice(self, offset: int, length: int = 5) -> Expr:",
        "comment_created_at": "2025-05-27T12:57:01+00:00",
        "comment_author": "coastalwhite",
        "comment_body": "If you look at [`pl.linear_spaces`](https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.linear_spaces.html), it has an `as_array` argument that requires the `num_samples` to be constant. In that case, you can determine the Array width reliably. I think the same applies here. If you set `as_array=True`, then that requires `offset` and `length` to be constants. In that case, it is possible to determine the output type. If they are not constant, you throw an error. If `as_array=False`, you return a list.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2154247679",
    "pr_number": 23223,
    "pr_file": "py-polars/polars/_utils/pycapsule.py",
    "created_at": "2025-06-18T10:24:50+00:00",
    "commented_code": ") -> DataFrame:\n     \"\"\"Convert PyCapsule object to DataFrame.\"\"\"\n     if hasattr(obj, \"__arrow_c_array__\"):\n-        # This uses the fact that PySeries.from_arrow_c_array will create a\n-        # struct-typed Series. Then we unpack that to a DataFrame.\n-        tmp_col_name = \"\"\n         s = wrap_s(PySeries.from_arrow_c_array(obj))\n-        df = s.to_frame(tmp_col_name).unnest(tmp_col_name)\n+        if isinstance(obj, pa.RecordBatch):\n+            # Maintain historical behavior of unnesting RecordBatch\n+            tmp_col_name = \"\"\n+            df = s.to_frame(tmp_col_name).unnest(tmp_col_name)",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2154247679",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 23223,
        "pr_file": "py-polars/polars/_utils/pycapsule.py",
        "discussion_id": "2154247679",
        "commented_code": "@@ -28,11 +29,13 @@ def pycapsule_to_frame(\n ) -> DataFrame:\n     \"\"\"Convert PyCapsule object to DataFrame.\"\"\"\n     if hasattr(obj, \"__arrow_c_array__\"):\n-        # This uses the fact that PySeries.from_arrow_c_array will create a\n-        # struct-typed Series. Then we unpack that to a DataFrame.\n-        tmp_col_name = \"\"\n         s = wrap_s(PySeries.from_arrow_c_array(obj))\n-        df = s.to_frame(tmp_col_name).unnest(tmp_col_name)\n+        if isinstance(obj, pa.RecordBatch):\n+            # Maintain historical behavior of unnesting RecordBatch\n+            tmp_col_name = \"\"\n+            df = s.to_frame(tmp_col_name).unnest(tmp_col_name)",
        "comment_created_at": "2025-06-18T10:24:50+00:00",
        "comment_author": "eitsupi",
        "comment_body": "Why do it this way?\r\nThe ArrayStream that corresponds to the DataFrame should be of type Struct, so it should always be possible to unnest it.\r\n\r\nI think adding a process to check classes like this would cause problems with things like `arro3.core.Table`, etc.",
        "pr_file_module": null
      },
      {
        "comment_id": "2157479535",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 23223,
        "pr_file": "py-polars/polars/_utils/pycapsule.py",
        "discussion_id": "2154247679",
        "commented_code": "@@ -28,11 +29,13 @@ def pycapsule_to_frame(\n ) -> DataFrame:\n     \"\"\"Convert PyCapsule object to DataFrame.\"\"\"\n     if hasattr(obj, \"__arrow_c_array__\"):\n-        # This uses the fact that PySeries.from_arrow_c_array will create a\n-        # struct-typed Series. Then we unpack that to a DataFrame.\n-        tmp_col_name = \"\"\n         s = wrap_s(PySeries.from_arrow_c_array(obj))\n-        df = s.to_frame(tmp_col_name).unnest(tmp_col_name)\n+        if isinstance(obj, pa.RecordBatch):\n+            # Maintain historical behavior of unnesting RecordBatch\n+            tmp_col_name = \"\"\n+            df = s.to_frame(tmp_col_name).unnest(tmp_col_name)",
        "comment_created_at": "2025-06-19T18:10:26+00:00",
        "comment_author": "mroeschke",
        "comment_body": "> The ArrayStream that corresponds to the DataFrame should be of type Struct\r\n\r\nI assume this is a Polars convension as the Arrow C data can be of any type https://arrow.apache.org/docs/format/CDataInterface.html#data-type-description-format-strings\r\n\r\nBut based on your https://github.com/pola-rs/polars/pull/23223#issuecomment-2983634287 and the example in https://github.com/pola-rs/polars/issues/23068, I guess `polars.from_arrow` assumes an object implementing the interface is first DataFrame convertable.\r\n\r\nTo follow Polars conversion convensions, I can call `unnest` if the Arrow C data is of type Struct",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1651403267",
    "pr_number": 17148,
    "pr_file": "py-polars/polars/functions/aggregation/vertical.py",
    "created_at": "2024-06-24T17:45:15+00:00",
    "commented_code": "from __future__ import annotations\n \n-from typing import TYPE_CHECKING\n+from builtins import any as standard_any\n+from typing import cast\n \n import polars.functions as F\n+from polars.expr import Expr\n \n-if TYPE_CHECKING:\n-    from polars import Expr\n \n+def into_expr(*names: str | Expr) -> Expr:",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1651403267",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 17148,
        "pr_file": "py-polars/polars/functions/aggregation/vertical.py",
        "discussion_id": "1651403267",
        "commented_code": "@@ -1,14 +1,23 @@\n from __future__ import annotations\n \n-from typing import TYPE_CHECKING\n+from builtins import any as standard_any\n+from typing import cast\n \n import polars.functions as F\n+from polars.expr import Expr\n \n-if TYPE_CHECKING:\n-    from polars import Expr\n \n+def into_expr(*names: str | Expr) -> Expr:",
        "comment_created_at": "2024-06-24T17:45:15+00:00",
        "comment_author": "stinodego",
        "comment_body": "You should use the util `parse_into_expr` to parse expression input.",
        "pr_file_module": null
      },
      {
        "comment_id": "1660044298",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 17148,
        "pr_file": "py-polars/polars/functions/aggregation/vertical.py",
        "discussion_id": "1651403267",
        "commented_code": "@@ -1,14 +1,23 @@\n from __future__ import annotations\n \n-from typing import TYPE_CHECKING\n+from builtins import any as standard_any\n+from typing import cast\n \n import polars.functions as F\n+from polars.expr import Expr\n \n-if TYPE_CHECKING:\n-    from polars import Expr\n \n+def into_expr(*names: str | Expr) -> Expr:",
        "comment_created_at": "2024-06-30T00:20:16+00:00",
        "comment_author": "JamesCE2001",
        "comment_body": "Thank you for the pointer! I did still have to do some parsing for the error check but I think it is ready now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2040674352",
    "pr_number": 22241,
    "pr_file": "py-polars/polars/functions/as_datatype.py",
    "created_at": "2025-04-12T15:06:18+00:00",
    "commented_code": "def duration(\n     *,\n-    weeks: Expr | str | int | None = None,\n-    days: Expr | str | int | None = None,\n-    hours: Expr | str | int | None = None,\n-    minutes: Expr | str | int | None = None,\n-    seconds: Expr | str | int | None = None,\n-    milliseconds: Expr | str | int | None = None,\n-    microseconds: Expr | str | int | None = None,\n-    nanoseconds: Expr | str | int | None = None,\n+    weeks: Expr | str | int | float | None = None,",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2040674352",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22241,
        "pr_file": "py-polars/polars/functions/as_datatype.py",
        "discussion_id": "2040674352",
        "commented_code": "@@ -283,14 +283,14 @@ def time_(\n \n def duration(\n     *,\n-    weeks: Expr | str | int | None = None,\n-    days: Expr | str | int | None = None,\n-    hours: Expr | str | int | None = None,\n-    minutes: Expr | str | int | None = None,\n-    seconds: Expr | str | int | None = None,\n-    milliseconds: Expr | str | int | None = None,\n-    microseconds: Expr | str | int | None = None,\n-    nanoseconds: Expr | str | int | None = None,\n+    weeks: Expr | str | int | float | None = None,",
        "comment_created_at": "2025-04-12T15:06:18+00:00",
        "comment_author": "alexander-beedie",
        "comment_body": "As you rightly identified, we shouldn't accept float values for duration components - so also shouldn't imply that we do by adding it in to the type signature. If you want it so the tests doesn't fail lint, can use a lint directive in the test instead of expanding on the accepted types here 👍",
        "pr_file_module": null
      },
      {
        "comment_id": "2041062537",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22241,
        "pr_file": "py-polars/polars/functions/as_datatype.py",
        "discussion_id": "2040674352",
        "commented_code": "@@ -283,14 +283,14 @@ def time_(\n \n def duration(\n     *,\n-    weeks: Expr | str | int | None = None,\n-    days: Expr | str | int | None = None,\n-    hours: Expr | str | int | None = None,\n-    minutes: Expr | str | int | None = None,\n-    seconds: Expr | str | int | None = None,\n-    milliseconds: Expr | str | int | None = None,\n-    microseconds: Expr | str | int | None = None,\n-    nanoseconds: Expr | str | int | None = None,\n+    weeks: Expr | str | int | float | None = None,",
        "comment_created_at": "2025-04-13T07:06:05+00:00",
        "comment_author": "sebasv",
        "comment_body": "I don't understand you @alexander-beedie . The goal of this PR is to _do_ accept `float` values, why shouldn't the signature reflect that?",
        "pr_file_module": null
      },
      {
        "comment_id": "2042089467",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22241,
        "pr_file": "py-polars/polars/functions/as_datatype.py",
        "discussion_id": "2040674352",
        "commented_code": "@@ -283,14 +283,14 @@ def time_(\n \n def duration(\n     *,\n-    weeks: Expr | str | int | None = None,\n-    days: Expr | str | int | None = None,\n-    hours: Expr | str | int | None = None,\n-    minutes: Expr | str | int | None = None,\n-    seconds: Expr | str | int | None = None,\n-    milliseconds: Expr | str | int | None = None,\n-    microseconds: Expr | str | int | None = None,\n-    nanoseconds: Expr | str | int | None = None,\n+    weeks: Expr | str | int | float | None = None,",
        "comment_created_at": "2025-04-14T12:58:57+00:00",
        "comment_author": "alexander-beedie",
        "comment_body": "In the linked Issue we hadn't actually agreed on the way forward; @MarcoGorelli (and myself - I just commented) are both leaning towards *not*  allow fractional duration components, as some floating point values could give slightly \"off\" results, where exact/correct results would be possible by simply specifying the smaller units as integers (minutes, seconds, microseconds, etc).\r\n\r\nWe definitely shouldn't silently truncate float input (as per the issue), but I thought you were ensuring that we raise an error in this case, as you [mentioned](https://github.com/pola-rs/polars/issues/11625#issuecomment-2767117563) that was the first PR you were going to look at implementing:  \r\n\r\n> I can prepare 2 PRs, one for raising a warning if non-integer values are passed \r\n\r\nHaving seen that Python allows it in `timedelta` I'm not completely opposed, but I don't think we should jump there first. I'd prefer to raise a TypeError for now 🤔",
        "pr_file_module": null
      }
    ]
  }
]