[
  {
    "discussion_id": "1838480025",
    "pr_number": 19739,
    "pr_file": "docs/source/user-guide/expressions/aggregation.md",
    "created_at": "2024-11-12T17:08:37+00:00",
    "commented_code": "Polars will try to parallelize the computation of the aggregating functions over the groups, so it is recommended that you avoid using `lambda`s and custom Python functions as much as possible.\n Instead, try to stay within the realm of the Polars expression API.\n This is not always possible, though, so if you want to learn more about using `lambda`s you can go [the user guide section on using user-defined functions](user-defined-python-functions.md).\n+\n+## Behavior with empty `Series`\n+\n+Polars tries to follow aggregation semantics that match closely with [set theory](https://en.wikipedia.org/wiki/Empty_set#Operations_on_the_empty_set) and python semantics. This means that we might differ from SQL semantics for operations on operations on empty Series. For example, `pl.Series([], pl.Int32).sum()` is equal to `0` in Polars, where it would be a missing value or `NULL` when following SQL semantics. Consequently, `.group_by().agg()` on columns with `null` values might result in different results than would be given by an SQL engine. Below, we provide an overview of all aggregations and the return value when performed on an empty series.",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1838480025",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 19739,
        "pr_file": "docs/source/user-guide/expressions/aggregation.md",
        "discussion_id": "1838480025",
        "commented_code": "@@ -134,3 +134,42 @@ This means that if you were to use a `lambda` or a custom Python function to app\n Polars will try to parallelize the computation of the aggregating functions over the groups, so it is recommended that you avoid using `lambda`s and custom Python functions as much as possible.\n Instead, try to stay within the realm of the Polars expression API.\n This is not always possible, though, so if you want to learn more about using `lambda`s you can go [the user guide section on using user-defined functions](user-defined-python-functions.md).\n+\n+## Behavior with empty `Series`\n+\n+Polars tries to follow aggregation semantics that match closely with [set theory](https://en.wikipedia.org/wiki/Empty_set#Operations_on_the_empty_set) and python semantics. This means that we might differ from SQL semantics for operations on operations on empty Series. For example, `pl.Series([], pl.Int32).sum()` is equal to `0` in Polars, where it would be a missing value or `NULL` when following SQL semantics. Consequently, `.group_by().agg()` on columns with `null` values might result in different results than would be given by an SQL engine. Below, we provide an overview of all aggregations and the return value when performed on an empty series.",
        "comment_created_at": "2024-11-12T17:08:37+00:00",
        "comment_author": "rodrigogiraoserrao",
        "comment_body": "You used the word “semantics” 4 times in the first 3 sentences and that's quite a heavy word for a user-friendly user guide.\r\nHere's a possible rewrite in simpler English:\r\n\r\nWhen computing aggregations on empty series, Polars tries to follow [set theory](https://en.wikipedia.org/wiki/Empty_set#Operations_on_the_empty_set) and Python's behaviour.\r\nThis differs from SQL for some operations: for example, `pl.Series([], pl.Int32).sum()` is equal to 0 in Polars but it is `NULL` in SQL.\r\nBelow we provide an overview of all aggregations and the return value when performed on an empty series.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1838487811",
    "pr_number": 19739,
    "pr_file": "docs/source/user-guide/expressions/aggregation.md",
    "created_at": "2024-11-12T17:14:02+00:00",
    "commented_code": "Polars will try to parallelize the computation of the aggregating functions over the groups, so it is recommended that you avoid using `lambda`s and custom Python functions as much as possible.\n Instead, try to stay within the realm of the Polars expression API.\n This is not always possible, though, so if you want to learn more about using `lambda`s you can go [the user guide section on using user-defined functions](user-defined-python-functions.md).\n+\n+## Behavior with empty `Series`\n+\n+Polars tries to follow aggregation semantics that match closely with [set theory](https://en.wikipedia.org/wiki/Empty_set#Operations_on_the_empty_set) and python semantics. This means that we might differ from SQL semantics for operations on operations on empty Series. For example, `pl.Series([], pl.Int32).sum()` is equal to `0` in Polars, where it would be a missing value or `NULL` when following SQL semantics. Consequently, `.group_by().agg()` on columns with `null` values might result in different results than would be given by an SQL engine. Below, we provide an overview of all aggregations and the return value when performed on an empty series.",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1838487811",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 19739,
        "pr_file": "docs/source/user-guide/expressions/aggregation.md",
        "discussion_id": "1838487811",
        "commented_code": "@@ -134,3 +134,42 @@ This means that if you were to use a `lambda` or a custom Python function to app\n Polars will try to parallelize the computation of the aggregating functions over the groups, so it is recommended that you avoid using `lambda`s and custom Python functions as much as possible.\n Instead, try to stay within the realm of the Polars expression API.\n This is not always possible, though, so if you want to learn more about using `lambda`s you can go [the user guide section on using user-defined functions](user-defined-python-functions.md).\n+\n+## Behavior with empty `Series`\n+\n+Polars tries to follow aggregation semantics that match closely with [set theory](https://en.wikipedia.org/wiki/Empty_set#Operations_on_the_empty_set) and python semantics. This means that we might differ from SQL semantics for operations on operations on empty Series. For example, `pl.Series([], pl.Int32).sum()` is equal to `0` in Polars, where it would be a missing value or `NULL` when following SQL semantics. Consequently, `.group_by().agg()` on columns with `null` values might result in different results than would be given by an SQL engine. Below, we provide an overview of all aggregations and the return value when performed on an empty series.",
        "comment_created_at": "2024-11-12T17:14:02+00:00",
        "comment_author": "rodrigogiraoserrao",
        "comment_body": "If you don't agree with my other subjective criticism on this paragraph, at least a couple of adjustments need to be made to fix typos and for consistency with the remainder of the docs:\r\n(Again, one sentence / line would make it easier to review my suggested changes.)\r\n\r\n```suggestion\r\nPolars tries to follow aggregation semantics that match closely [set theory](https://en.wikipedia.org/wiki/Empty_set#Operations_on_the_empty_set) and Python semantics. This means that we might differ from SQL for operations on empty series. For example, `pl.Series([], dtype=pl.Int32).sum()` is equal to `0` in Polars, but it would be a missing value or `NULL` in SQL. Consequently, `.group_by().agg()` on columns with `null` values might result in different results than those that would be given by an SQL engine. Below, we provide an overview of all aggregations and the return value when performed on an empty series.\r\n```\r\n\r\nOr, “but it should be `None` if we followed SQL (semantics)”.",
        "pr_file_module": null
      }
    ]
  }
]