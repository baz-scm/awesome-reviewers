[
  {
    "discussion_id": "2106143814",
    "pr_number": 22888,
    "pr_file": "crates/polars-core/src/chunked_array/logical/datetime.rs",
    "created_at": "2025-05-25T09:42:15+00:00",
    "commented_code": "Milliseconds => cast_to_date(MS_IN_DAY),\n                 }\n             },\n+            #[cfg(all(feature = \"dtype-date\", feature = \"timezones\"))]",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2106143814",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22888,
        "pr_file": "crates/polars-core/src/chunked_array/logical/datetime.rs",
        "discussion_id": "2106143814",
        "commented_code": "@@ -87,6 +99,55 @@ impl LogicalType for DatetimeChunked {\n                     Milliseconds => cast_to_date(MS_IN_DAY),\n                 }\n             },\n+            #[cfg(all(feature = \"dtype-date\", feature = \"timezones\"))]",
        "comment_created_at": "2025-05-25T09:42:15+00:00",
        "comment_author": "MarcoGorelli",
        "comment_body": "what if someone activates the `'timezones'` feature but has tz-naive data?\r\n\r\ncould we match on `self`'s dtype, instead of on the activate features?",
        "pr_file_module": null
      },
      {
        "comment_id": "2106819684",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22888,
        "pr_file": "crates/polars-core/src/chunked_array/logical/datetime.rs",
        "discussion_id": "2106143814",
        "commented_code": "@@ -87,6 +99,55 @@ impl LogicalType for DatetimeChunked {\n                     Milliseconds => cast_to_date(MS_IN_DAY),\n                 }\n             },\n+            #[cfg(all(feature = \"dtype-date\", feature = \"timezones\"))]",
        "comment_created_at": "2025-05-26T08:24:33+00:00",
        "comment_author": "florian-klein",
        "comment_body": "Good point - however, `chrono_tz` and `convert_to_naive_local` that are used in the function depend on the `timezones` feature - so in order for this to compile, we need some sort of matching on activated features. \r\n\r\nI refactored the code such that the conditional `timezones` feature is now within the the original match branch. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2078814982",
    "pr_number": 22655,
    "pr_file": "crates/polars-lazy/src/frame/mod.rs",
    "created_at": "2025-05-08T03:14:57+00:00",
    "commented_code": null,
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2078814982",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22655,
        "pr_file": "crates/polars-lazy/src/frame/mod.rs",
        "discussion_id": "2078814982",
        "commented_code": null,
        "comment_created_at": "2025-05-08T03:14:57+00:00",
        "comment_author": "LegoWolf",
        "comment_body": "This is the change that causes rustdocs to fail. The problem is that you're requiring `StringCacheHolder` be present even if the `new_streaming` feature is disabled. That's not necessary and it breaks the existing include structure. I've verified in my own fork that replacing this line with these ones resolves the problem with the 3 failing workflow tests (`build-rust-docs`, `check-features` and `check-wasm`):\r\n\r\n```rust\r\nuse polars_core::POOL;\r\n#[cfg(feature = \"new_streaming\")]\r\nuse polars_core::StringCacheHolder;\r\n```\r\n\r\nThis change also causes my personal client project to compile properly (I use `lazy` without `new_streaming`). It also makes this simple test project build correctly:\r\n\r\n```bash\r\ncargo init --bin foobar\r\ncd foobar\r\ncargo add polars --features lazy\r\ncargo build\r\n```\r\n\r\nLike you, I'm not sure I understand the ins and outs of the crate and feature dependency graph to know that this is the best fix.",
        "pr_file_module": null
      },
      {
        "comment_id": "2079217902",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22655,
        "pr_file": "crates/polars-lazy/src/frame/mod.rs",
        "discussion_id": "2078814982",
        "commented_code": null,
        "comment_created_at": "2025-05-08T08:54:24+00:00",
        "comment_author": "teotwaki",
        "comment_body": "Thanks @LegoWolf. Your suggestion makes complete sense. You also made me realise that the `dtype-categorical` feature most likely shouldn't be enabled by the `lazy` feature, but by the `new_streaming` one, so I've applied that change as well.\r\n\r\nIt seems to work for me and my test projects. @Antti & @paulirotta could I get you to test this out as well?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1983605523",
    "pr_number": 21631,
    "pr_file": "crates/polars-ops/src/frame/join/cross_join.rs",
    "created_at": "2025-03-06T15:47:27+00:00",
    "commented_code": "let Some(total_rows) = n_rows_left.checked_mul(n_rows_right) else {\n         polars_bail!(\n             ComputeError: \"cross joins would produce more rows than fits into 2^32; \\\n-            consider compiling with polars-big-idx feature, or set 'streaming'\"\n+            consider compiling with polars-u64-idx feature, or set 'streaming'\"",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1983605523",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 21631,
        "pr_file": "crates/polars-ops/src/frame/join/cross_join.rs",
        "discussion_id": "1983605523",
        "commented_code": "@@ -94,7 +94,7 @@ fn cross_join_dfs(\n     let Some(total_rows) = n_rows_left.checked_mul(n_rows_right) else {\n         polars_bail!(\n             ComputeError: \"cross joins would produce more rows than fits into 2^32; \\\n-            consider compiling with polars-big-idx feature, or set 'streaming'\"\n+            consider compiling with polars-u64-idx feature, or set 'streaming'\"",
        "comment_created_at": "2025-03-06T15:47:27+00:00",
        "comment_author": "ritchie46",
        "comment_body": "The feature is `bigidx`, not u64 idx in Rust.",
        "pr_file_module": null
      },
      {
        "comment_id": "1983670474",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 21631,
        "pr_file": "crates/polars-ops/src/frame/join/cross_join.rs",
        "discussion_id": "1983605523",
        "commented_code": "@@ -94,7 +94,7 @@ fn cross_join_dfs(\n     let Some(total_rows) = n_rows_left.checked_mul(n_rows_right) else {\n         polars_bail!(\n             ComputeError: \"cross joins would produce more rows than fits into 2^32; \\\n-            consider compiling with polars-big-idx feature, or set 'streaming'\"\n+            consider compiling with polars-u64-idx feature, or set 'streaming'\"",
        "comment_created_at": "2025-03-06T16:19:01+00:00",
        "comment_author": "SebStrug",
        "comment_body": "I see, I guess this could be improved to reference *installing* `polars-u64-idx` instead of compiling, but I'll close this, sorry about that.",
        "pr_file_module": null
      }
    ]
  }
]