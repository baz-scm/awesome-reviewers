[
  {
    "discussion_id": "2165943863",
    "pr_number": 23249,
    "pr_file": "py-polars/polars/datatype_expr/array.py",
    "created_at": "2025-06-25T06:56:07+00:00",
    "commented_code": "+from __future__ import annotations\n+\n+import polars._reexport as pl\n+\n+\n+class DataTypeExprArrNameSpace:\n+    \"\"\"Namespace for arr datatype expressions.\"\"\"\n+\n+    _accessor = \"arr\"\n+\n+    def __init__(self, expr: pl.DataTypeExpr) -> None:\n+        self._pydatatype_expr = expr._pydatatype_expr\n+\n+    def inner_dtype(self) -> pl.DataTypeExpr:\n+        \"\"\"Get the inner DataType of array.\"\"\"\n+        return pl.DataTypeExpr._from_pydatatype_expr(\n+            self._pydatatype_expr.arr_inner_dtype()\n+        )\n+\n+    def has_width(self, width: int) -> pl.Expr:\n+        \"\"\"Get whether an array has a specific width.\"\"\"\n+        return pl.Expr._from_pyexpr(self._pydatatype_expr.arr_has_width(width))\n+\n+    def width(self) -> pl.Expr:\n+        \"\"\"\n+        Get the array width.\n+\n+        Examples\n+        --------\n+        >>> pl.select(pl.Array(pl.Int8, (1, 2, 3)).to_dtype_expr().arr.width())\n+        shape: (1, 1)\n+        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+        \u2502 literal \u2502\n+        \u2502 ---     \u2502\n+        \u2502 u32     \u2502\n+        \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n+        \u2502 1       \u2502\n+        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+        \"\"\"\n+        return pl.Expr._from_pyexpr(self._pydatatype_expr.arr_width())\n+\n+    def dimensions(self) -> pl.Expr:",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2165943863",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 23249,
        "pr_file": "py-polars/polars/datatype_expr/array.py",
        "discussion_id": "2165943863",
        "commented_code": "@@ -0,0 +1,58 @@\n+from __future__ import annotations\n+\n+import polars._reexport as pl\n+\n+\n+class DataTypeExprArrNameSpace:\n+    \"\"\"Namespace for arr datatype expressions.\"\"\"\n+\n+    _accessor = \"arr\"\n+\n+    def __init__(self, expr: pl.DataTypeExpr) -> None:\n+        self._pydatatype_expr = expr._pydatatype_expr\n+\n+    def inner_dtype(self) -> pl.DataTypeExpr:\n+        \"\"\"Get the inner DataType of array.\"\"\"\n+        return pl.DataTypeExpr._from_pydatatype_expr(\n+            self._pydatatype_expr.arr_inner_dtype()\n+        )\n+\n+    def has_width(self, width: int) -> pl.Expr:\n+        \"\"\"Get whether an array has a specific width.\"\"\"\n+        return pl.Expr._from_pyexpr(self._pydatatype_expr.arr_has_width(width))\n+\n+    def width(self) -> pl.Expr:\n+        \"\"\"\n+        Get the array width.\n+\n+        Examples\n+        --------\n+        >>> pl.select(pl.Array(pl.Int8, (1, 2, 3)).to_dtype_expr().arr.width())\n+        shape: (1, 1)\n+        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+        \u2502 literal \u2502\n+        \u2502 ---     \u2502\n+        \u2502 u32     \u2502\n+        \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n+        \u2502 1       \u2502\n+        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+        \"\"\"\n+        return pl.Expr._from_pyexpr(self._pydatatype_expr.arr_width())\n+\n+    def dimensions(self) -> pl.Expr:",
        "comment_created_at": "2025-06-25T06:56:07+00:00",
        "comment_author": "ritchie46",
        "comment_body": "We call that the shape in public API of Polars:\r\n\r\nhttps://docs.pola.rs/api/python/stable/reference/api/polars.datatypes.Array.html\r\n\r\nNit:\r\n\r\nI also would not mention that array's are sequentially nested. I want users to think of NDArrays. That we sequentially nest them is an implementation detail.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2115910941",
    "pr_number": 23011,
    "pr_file": "py-polars/polars/lazyframe/frame.py",
    "created_at": "2025-05-30T13:15:28+00:00",
    "commented_code": "return None\n         return LazyFrame._from_pyldf(ldf)\n \n+    def sink_iceberg(\n+        self,\n+        target: str | Table | IcebergDataset,",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2115910941",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 23011,
        "pr_file": "py-polars/polars/lazyframe/frame.py",
        "discussion_id": "2115910941",
        "commented_code": "@@ -3484,6 +3490,42 @@ def sink_ndjson(\n             return None\n         return LazyFrame._from_pyldf(ldf)\n \n+    def sink_iceberg(\n+        self,\n+        target: str | Table | IcebergDataset,",
        "comment_created_at": "2025-05-30T13:15:28+00:00",
        "comment_author": "nameexhaustion",
        "comment_body": "```suggestion\r\n        target: str | Table,\r\n```\r\n\r\nThe `IcebergDataset` class we have right now was designed for internal use, I'd rather avoid exposing it to users if possible.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2090974131",
    "pr_number": 22749,
    "pr_file": "py-polars/polars/series/list.py",
    "created_at": "2025-05-15T11:39:37+00:00",
    "commented_code": "]\n         \"\"\"\n \n+    def filter(self, predicate: Expr, *, parallel: bool = False) -> Series:\n+        \"\"\"\n+        Filter elements in each list by a boolean expression, returning a new Series of lists.\n+\n+        Parameters\n+        ----------\n+        expr\n+            A boolean expression evaluated on each list element.\n+            Use `pl.element()` to refer to the current element.\n+        parallel",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2090974131",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22749,
        "pr_file": "py-polars/polars/series/list.py",
        "discussion_id": "2090974131",
        "commented_code": "@@ -956,6 +956,36 @@ def eval(self, expr: Expr, *, parallel: bool = False) -> Series:\n         ]\n         \"\"\"\n \n+    def filter(self, predicate: Expr, *, parallel: bool = False) -> Series:\n+        \"\"\"\n+        Filter elements in each list by a boolean expression, returning a new Series of lists.\n+\n+        Parameters\n+        ----------\n+        expr\n+            A boolean expression evaluated on each list element.\n+            Use `pl.element()` to refer to the current element.\n+        parallel",
        "comment_created_at": "2025-05-15T11:39:37+00:00",
        "comment_author": "orlp",
        "comment_body": "We want to deprecate the `parallel` parameter as it's an implementation detail and not something we'd like to expose going forward. Could you remove it from this PR so we have fewer things to remove in the future? Other than this it looks good.",
        "pr_file_module": null
      },
      {
        "comment_id": "2093213396",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22749,
        "pr_file": "py-polars/polars/series/list.py",
        "discussion_id": "2090974131",
        "commented_code": "@@ -956,6 +956,36 @@ def eval(self, expr: Expr, *, parallel: bool = False) -> Series:\n         ]\n         \"\"\"\n \n+    def filter(self, predicate: Expr, *, parallel: bool = False) -> Series:\n+        \"\"\"\n+        Filter elements in each list by a boolean expression, returning a new Series of lists.\n+\n+        Parameters\n+        ----------\n+        expr\n+            A boolean expression evaluated on each list element.\n+            Use `pl.element()` to refer to the current element.\n+        parallel",
        "comment_created_at": "2025-05-16T14:55:46+00:00",
        "comment_author": "florian-klein",
        "comment_body": "Good to know, I removed it :) ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2067899305",
    "pr_number": 22491,
    "pr_file": "py-polars/polars/_typing.py",
    "created_at": "2025-04-30T05:53:28+00:00",
    "commented_code": "Literal[\"auto\", \"in-memory\", \"streaming\", \"gpu\"], \"GPUEngine\"\n ]\n \n+PlanStage: TypeAlias = Literal[\"ir\", \"phys\"]",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2067899305",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22491,
        "pr_file": "py-polars/polars/_typing.py",
        "discussion_id": "2067899305",
        "commented_code": "@@ -315,6 +315,8 @@ def fetchmany(self, *args: Any, **kwargs: Any) -> Any:\n     Literal[\"auto\", \"in-memory\", \"streaming\", \"gpu\"], \"GPUEngine\"\n ]\n \n+PlanStage: TypeAlias = Literal[\"ir\", \"phys\"]",
        "comment_created_at": "2025-04-30T05:53:28+00:00",
        "comment_author": "ritchie46",
        "comment_body": "The Polars public API strongly prefers full names. So this should be `\"ir\", \"physical\"`. (I think IR is common enough to not write it out. :) )",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1916354050",
    "pr_number": 20717,
    "pr_file": "py-polars/polars/config.py",
    "created_at": "2025-01-15T10:56:40+00:00",
    "commented_code": "os.environ[\"POLARS_MAX_EXPR_DEPTH\"] = str(limit)\n         return cls\n+\n+    @classmethod\n+    def set_gpu_engine(cls, active: bool | None = None) -> type[Config]:\n+        \"\"\"\n+        Set the default engine to use the GPU.",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1916354050",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 20717,
        "pr_file": "py-polars/polars/config.py",
        "discussion_id": "1916354050",
        "commented_code": "@@ -1450,3 +1452,40 @@ def set_expr_depth_warning(cls, limit: int) -> type[Config]:\n \n         os.environ[\"POLARS_MAX_EXPR_DEPTH\"] = str(limit)\n         return cls\n+\n+    @classmethod\n+    def set_gpu_engine(cls, active: bool | None = None) -> type[Config]:\n+        \"\"\"\n+        Set the default engine to use the GPU.",
        "comment_created_at": "2025-01-15T10:56:40+00:00",
        "comment_author": "wence-",
        "comment_body": "*suggestion*: How about `set_default_engine(cls, engine: Literal[\"cpu\", \"gpu\"])` instead.\r\n\r\nThat way, this interface is extensible to configuring (say) \"streaming\" as the default engine.",
        "pr_file_module": null
      }
    ]
  }
]