[
  {
    "discussion_id": "2127980173",
    "pr_number": 22840,
    "pr_file": "crates/polars-ops/src/chunked_array/binary/cast_binary_to_numerical.rs",
    "created_at": "2025-06-05T05:25:25+00:00",
    "commented_code": "is_little_endian,\n     )))\n }\n+\n+/// Casts a [`BinaryArray`] to a [`PrimitiveArray`], making any un-castable value a Null.\n+///\n+/// # Panics\n+///    Panics if `to` is not `ArrowDataType::FixedSizeList`.\n+pub(super) fn try_cast_binview_to_array_primitive<T>(\n+    from: &BinaryViewArray,\n+    to: &ArrowDataType,\n+    is_little_endian: bool,\n+    element_size: usize,\n+) -> PolarsResult<FixedSizeListArray>\n+where\n+    T: Cast + NativeType,\n+{\n+    let ArrowDataType::FixedSizeList(_, size) = to else {\n+        panic!(\"Bug, non-Array passed in.\")\n+    };\n+    let array_width = element_size * size;",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2127980173",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22840,
        "pr_file": "crates/polars-ops/src/chunked_array/binary/cast_binary_to_numerical.rs",
        "discussion_id": "2127980173",
        "commented_code": "@@ -78,3 +81,67 @@ where\n         is_little_endian,\n     )))\n }\n+\n+/// Casts a [`BinaryArray`] to a [`PrimitiveArray`], making any un-castable value a Null.\n+///\n+/// # Panics\n+///    Panics if `to` is not `ArrowDataType::FixedSizeList`.\n+pub(super) fn try_cast_binview_to_array_primitive<T>(\n+    from: &BinaryViewArray,\n+    to: &ArrowDataType,\n+    is_little_endian: bool,\n+    element_size: usize,\n+) -> PolarsResult<FixedSizeListArray>\n+where\n+    T: Cast + NativeType,\n+{\n+    let ArrowDataType::FixedSizeList(_, size) = to else {\n+        panic!(\"Bug, non-Array passed in.\")\n+    };\n+    let array_width = element_size * size;",
        "comment_created_at": "2025-06-05T05:25:25+00:00",
        "comment_author": "nameexhaustion",
        "comment_body": "This was my mistake - `array_width` is the same as `size`. I would suggest removing this line and directly renaming it above - \r\n\r\n```rust\r\n- let ArrowDataType::FixedSizeList(_, size)\r\n+ let ArrowDataType::FixedSizeList(_, array_width)\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2129739016",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22840,
        "pr_file": "crates/polars-ops/src/chunked_array/binary/cast_binary_to_numerical.rs",
        "discussion_id": "2127980173",
        "commented_code": "@@ -78,3 +81,67 @@ where\n         is_little_endian,\n     )))\n }\n+\n+/// Casts a [`BinaryArray`] to a [`PrimitiveArray`], making any un-castable value a Null.\n+///\n+/// # Panics\n+///    Panics if `to` is not `ArrowDataType::FixedSizeList`.\n+pub(super) fn try_cast_binview_to_array_primitive<T>(\n+    from: &BinaryViewArray,\n+    to: &ArrowDataType,\n+    is_little_endian: bool,\n+    element_size: usize,\n+) -> PolarsResult<FixedSizeListArray>\n+where\n+    T: Cast + NativeType,\n+{\n+    let ArrowDataType::FixedSizeList(_, size) = to else {\n+        panic!(\"Bug, non-Array passed in.\")\n+    };\n+    let array_width = element_size * size;",
        "comment_created_at": "2025-06-05T18:26:26+00:00",
        "comment_author": "itamarst",
        "comment_body": "I'm pretty sure that's it's `element_size * size`? If I change it to `array_width = *size` then tests start failing. `size` is number of elements in the array, seems like?\r\n\r\nWhat I'll do is rename `array_width` to `array_width_in_bytes` so it's clearer what's going on.",
        "pr_file_module": null
      },
      {
        "comment_id": "2129743887",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22840,
        "pr_file": "crates/polars-ops/src/chunked_array/binary/cast_binary_to_numerical.rs",
        "discussion_id": "2127980173",
        "commented_code": "@@ -78,3 +81,67 @@ where\n         is_little_endian,\n     )))\n }\n+\n+/// Casts a [`BinaryArray`] to a [`PrimitiveArray`], making any un-castable value a Null.\n+///\n+/// # Panics\n+///    Panics if `to` is not `ArrowDataType::FixedSizeList`.\n+pub(super) fn try_cast_binview_to_array_primitive<T>(\n+    from: &BinaryViewArray,\n+    to: &ArrowDataType,\n+    is_little_endian: bool,\n+    element_size: usize,\n+) -> PolarsResult<FixedSizeListArray>\n+where\n+    T: Cast + NativeType,\n+{\n+    let ArrowDataType::FixedSizeList(_, size) = to else {\n+        panic!(\"Bug, non-Array passed in.\")\n+    };\n+    let array_width = element_size * size;",
        "comment_created_at": "2025-06-05T18:27:31+00:00",
        "comment_author": "itamarst",
        "comment_body": "Ah but for _capacity_ purposes we want to use just `size`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2137668751",
    "pr_number": 22840,
    "pr_file": "crates/polars-ops/src/chunked_array/binary/cast_binary_to_numerical.rs",
    "created_at": "2025-06-10T11:44:19+00:00",
    "commented_code": "is_little_endian,\n     )))\n }\n+\n+/// Casts a [`BinaryArray`] to a [`PrimitiveArray`], making any un-castable value a Null.\n+///\n+/// # Panics\n+///    Panics if `to` is not `ArrowDataType::FixedSizeList`.\n+pub(super) fn try_cast_binview_to_array_primitive<T>(\n+    from: &BinaryViewArray,\n+    to: &ArrowDataType,\n+    is_little_endian: bool,\n+) -> PolarsResult<FixedSizeListArray>\n+where\n+    T: Cast + NativeType,",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2137668751",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22840,
        "pr_file": "crates/polars-ops/src/chunked_array/binary/cast_binary_to_numerical.rs",
        "discussion_id": "2137668751",
        "commented_code": "@@ -78,3 +81,65 @@ where\n         is_little_endian,\n     )))\n }\n+\n+/// Casts a [`BinaryArray`] to a [`PrimitiveArray`], making any un-castable value a Null.\n+///\n+/// # Panics\n+///    Panics if `to` is not `ArrowDataType::FixedSizeList`.\n+pub(super) fn try_cast_binview_to_array_primitive<T>(\n+    from: &BinaryViewArray,\n+    to: &ArrowDataType,\n+    is_little_endian: bool,\n+) -> PolarsResult<FixedSizeListArray>\n+where\n+    T: Cast + NativeType,",
        "comment_created_at": "2025-06-10T11:44:19+00:00",
        "comment_author": "nameexhaustion",
        "comment_body": "This is not code from this PR, but `Cast` is a terrible name for a trait - it should be renamed to something more descriptive e.g. `FromBytes`. We should also add a docstring explaining that this is a utility trait to allow accessing `from_(le/be)_bytes`.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2146005118",
    "pr_number": 23182,
    "pr_file": "crates/polars-plan/src/plans/conversion/type_coercion/mod.rs",
    "created_at": "2025-06-13T20:02:17+00:00",
    "commented_code": ");\n                 None\n             },\n+\n+            #[cfg(feature = \"string_pad\")]\n+            AExpr::Function {\n+                function:\n+                    ref function @ IRFunctionExpr::StringExpr(\n+                        IRStringFunction::PadStart { .. }\n+                        | IRStringFunction::PadEnd { .. }\n+                        | IRStringFunction::ZFill,\n+                    ),\n+                ref input,\n+                options,\n+            } => {\n+                let (_, length_type) =\n+                    unpack!(get_aexpr_and_type(expr_arena, input[1].node(), schema));\n+\n+                if length_type == DataType::UInt64 {\n+                    None\n+                } else {\n+                    let function = function.clone();\n+                    let mut input = input.clone();\n+                    cast_expr_ir(\n+                        &mut input[1],\n+                        &length_type,\n+                        &DataType::UInt64,\n+                        expr_arena,\n+                        CastOptions::Strict,\n+                    )?;\n+\n+                    Some(AExpr::Function {\n+                        function,\n+                        input,\n+                        options,\n+                    })\n+                }\n+            },\n+",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2146005118",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 23182,
        "pr_file": "crates/polars-plan/src/plans/conversion/type_coercion/mod.rs",
        "discussion_id": "2146005118",
        "commented_code": "@@ -595,6 +595,42 @@ See https://github.com/pola-rs/polars/issues/22149 for more information.\"\n                 );\n                 None\n             },\n+\n+            #[cfg(feature = \"string_pad\")]\n+            AExpr::Function {\n+                function:\n+                    ref function @ IRFunctionExpr::StringExpr(\n+                        IRStringFunction::PadStart { .. }\n+                        | IRStringFunction::PadEnd { .. }\n+                        | IRStringFunction::ZFill,\n+                    ),\n+                ref input,\n+                options,\n+            } => {\n+                let (_, length_type) =\n+                    unpack!(get_aexpr_and_type(expr_arena, input[1].node(), schema));\n+\n+                if length_type == DataType::UInt64 {\n+                    None\n+                } else {\n+                    let function = function.clone();\n+                    let mut input = input.clone();\n+                    cast_expr_ir(\n+                        &mut input[1],\n+                        &length_type,\n+                        &DataType::UInt64,\n+                        expr_arena,\n+                        CastOptions::Strict,\n+                    )?;\n+\n+                    Some(AExpr::Function {\n+                        function,\n+                        input,\n+                        options,\n+                    })\n+                }\n+            },\n+",
        "comment_created_at": "2025-06-13T20:02:17+00:00",
        "comment_author": "mcrumiller",
        "comment_body": "@coastalwhite is this correct?",
        "pr_file_module": null
      },
      {
        "comment_id": "2149209765",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 23182,
        "pr_file": "crates/polars-plan/src/plans/conversion/type_coercion/mod.rs",
        "discussion_id": "2146005118",
        "commented_code": "@@ -595,6 +595,42 @@ See https://github.com/pola-rs/polars/issues/22149 for more information.\"\n                 );\n                 None\n             },\n+\n+            #[cfg(feature = \"string_pad\")]\n+            AExpr::Function {\n+                function:\n+                    ref function @ IRFunctionExpr::StringExpr(\n+                        IRStringFunction::PadStart { .. }\n+                        | IRStringFunction::PadEnd { .. }\n+                        | IRStringFunction::ZFill,\n+                    ),\n+                ref input,\n+                options,\n+            } => {\n+                let (_, length_type) =\n+                    unpack!(get_aexpr_and_type(expr_arena, input[1].node(), schema));\n+\n+                if length_type == DataType::UInt64 {\n+                    None\n+                } else {\n+                    let function = function.clone();\n+                    let mut input = input.clone();\n+                    cast_expr_ir(\n+                        &mut input[1],\n+                        &length_type,\n+                        &DataType::UInt64,\n+                        expr_arena,\n+                        CastOptions::Strict,\n+                    )?;\n+\n+                    Some(AExpr::Function {\n+                        function,\n+                        input,\n+                        options,\n+                    })\n+                }\n+            },\n+",
        "comment_created_at": "2025-06-16T07:14:35+00:00",
        "comment_author": "coastalwhite",
        "comment_body": "Yup :)",
        "pr_file_module": null
      },
      {
        "comment_id": "2150244224",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 23182,
        "pr_file": "crates/polars-plan/src/plans/conversion/type_coercion/mod.rs",
        "discussion_id": "2146005118",
        "commented_code": "@@ -595,6 +595,42 @@ See https://github.com/pola-rs/polars/issues/22149 for more information.\"\n                 );\n                 None\n             },\n+\n+            #[cfg(feature = \"string_pad\")]\n+            AExpr::Function {\n+                function:\n+                    ref function @ IRFunctionExpr::StringExpr(\n+                        IRStringFunction::PadStart { .. }\n+                        | IRStringFunction::PadEnd { .. }\n+                        | IRStringFunction::ZFill,\n+                    ),\n+                ref input,\n+                options,\n+            } => {\n+                let (_, length_type) =\n+                    unpack!(get_aexpr_and_type(expr_arena, input[1].node(), schema));\n+\n+                if length_type == DataType::UInt64 {\n+                    None\n+                } else {\n+                    let function = function.clone();\n+                    let mut input = input.clone();\n+                    cast_expr_ir(\n+                        &mut input[1],\n+                        &length_type,\n+                        &DataType::UInt64,\n+                        expr_arena,\n+                        CastOptions::Strict,\n+                    )?;\n+\n+                    Some(AExpr::Function {\n+                        function,\n+                        input,\n+                        options,\n+                    })\n+                }\n+            },\n+",
        "comment_created_at": "2025-06-16T15:03:04+00:00",
        "comment_author": "mcrumiller",
        "comment_body": "By the way, I am not a huge fan of how the process stores the `input` columns as a `&[column]` vector, leaving us to resort to using `input[1]`--this hard-coded indexing feels like a bad code smell to me, does it not to you? Nobody looking at this code would know what's in index 1. Surely we could pass around a better collection object with named components.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2104250988",
    "pr_number": 22897,
    "pr_file": "crates/polars-core/src/utils/mod.rs",
    "created_at": "2025-05-23T09:56:38+00:00",
    "commented_code": ")\n }\n \n-pub(crate) fn first_non_null<'a, I>(iter: I) -> Option<usize>\n+pub fn first_non_null<'a, I>(iter: I) -> Option<usize>\n where\n     I: Iterator<Item = Option<&'a Bitmap>>,\n {\n-    let mut offset = 0;\n+    let mut index = 0;\n     for validity in iter {\n-        if let Some(validity) = validity {\n-            let mask = BitMask::from_bitmap(validity);\n-            if let Some(n) = mask.nth_set_bit_idx(0, 0) {\n-                return Some(offset + n);\n+        if let Some(mask) = validity {\n+            let len_mask = mask.len();\n+            let n = mask.leading_zeros();\n+            if n < len_mask {\n+                return Some(index + n);\n             }\n-            offset += validity.len()\n+            index += len_mask\n         } else {\n-            return Some(offset);\n+            return Some(index);\n         }\n     }\n     None\n }\n \n-pub(crate) fn last_non_null<'a, I>(iter: I, len: usize) -> Option<usize>\n+pub fn last_non_null<'a, I>(iter: I, len: usize) -> Option<usize>\n where\n     I: DoubleEndedIterator<Item = Option<&'a Bitmap>>,\n {\n     if len == 0 {\n         return None;\n     }\n-    let mut offset = 0;\n+    let mut index = 0;",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2104250988",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22897,
        "pr_file": "crates/polars-core/src/utils/mod.rs",
        "discussion_id": "2104250988",
        "commented_code": "@@ -1200,43 +1199,44 @@ pub(crate) fn index_to_chunked_index_rev<\n     )\n }\n \n-pub(crate) fn first_non_null<'a, I>(iter: I) -> Option<usize>\n+pub fn first_non_null<'a, I>(iter: I) -> Option<usize>\n where\n     I: Iterator<Item = Option<&'a Bitmap>>,\n {\n-    let mut offset = 0;\n+    let mut index = 0;\n     for validity in iter {\n-        if let Some(validity) = validity {\n-            let mask = BitMask::from_bitmap(validity);\n-            if let Some(n) = mask.nth_set_bit_idx(0, 0) {\n-                return Some(offset + n);\n+        if let Some(mask) = validity {\n+            let len_mask = mask.len();\n+            let n = mask.leading_zeros();\n+            if n < len_mask {\n+                return Some(index + n);\n             }\n-            offset += validity.len()\n+            index += len_mask\n         } else {\n-            return Some(offset);\n+            return Some(index);\n         }\n     }\n     None\n }\n \n-pub(crate) fn last_non_null<'a, I>(iter: I, len: usize) -> Option<usize>\n+pub fn last_non_null<'a, I>(iter: I, len: usize) -> Option<usize>\n where\n     I: DoubleEndedIterator<Item = Option<&'a Bitmap>>,\n {\n     if len == 0 {\n         return None;\n     }\n-    let mut offset = 0;\n+    let mut index = 0;",
        "comment_created_at": "2025-05-23T09:56:38+00:00",
        "comment_author": "orlp",
        "comment_body": "Not a huge fan of calling this index when it's an offset from the end.",
        "pr_file_module": null
      },
      {
        "comment_id": "2104281873",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22897,
        "pr_file": "crates/polars-core/src/utils/mod.rs",
        "discussion_id": "2104250988",
        "commented_code": "@@ -1200,43 +1199,44 @@ pub(crate) fn index_to_chunked_index_rev<\n     )\n }\n \n-pub(crate) fn first_non_null<'a, I>(iter: I) -> Option<usize>\n+pub fn first_non_null<'a, I>(iter: I) -> Option<usize>\n where\n     I: Iterator<Item = Option<&'a Bitmap>>,\n {\n-    let mut offset = 0;\n+    let mut index = 0;\n     for validity in iter {\n-        if let Some(validity) = validity {\n-            let mask = BitMask::from_bitmap(validity);\n-            if let Some(n) = mask.nth_set_bit_idx(0, 0) {\n-                return Some(offset + n);\n+        if let Some(mask) = validity {\n+            let len_mask = mask.len();\n+            let n = mask.leading_zeros();\n+            if n < len_mask {\n+                return Some(index + n);\n             }\n-            offset += validity.len()\n+            index += len_mask\n         } else {\n-            return Some(offset);\n+            return Some(index);\n         }\n     }\n     None\n }\n \n-pub(crate) fn last_non_null<'a, I>(iter: I, len: usize) -> Option<usize>\n+pub fn last_non_null<'a, I>(iter: I, len: usize) -> Option<usize>\n where\n     I: DoubleEndedIterator<Item = Option<&'a Bitmap>>,\n {\n     if len == 0 {\n         return None;\n     }\n-    let mut offset = 0;\n+    let mut index = 0;",
        "comment_created_at": "2025-05-23T10:15:17+00:00",
        "comment_author": "alexander-beedie",
        "comment_body": "I view it as returning the eventual index where the null is found (\"offset\" is relative to a given start point, \"index\" feels more absolute), but I don't mind changing. Can update when I'm back from lunch.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2019827001",
    "pr_number": 21976,
    "pr_file": "crates/polars-core/src/chunked_array/logical/categorical/merge.rs",
    "created_at": "2025-03-29T15:08:24+00:00",
    "commented_code": "}\n \n // Make the right categorical compatible with the left\n-pub fn make_categoricals_compatible(\n+pub fn make_rhs_categoricals_compatible(",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2019827001",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 21976,
        "pr_file": "crates/polars-core/src/chunked_array/logical/categorical/merge.rs",
        "discussion_id": "2019827001",
        "commented_code": "@@ -201,7 +201,7 @@ impl CategoricalMergeOperation for DoNothing {\n }\n \n // Make the right categorical compatible with the left\n-pub fn make_categoricals_compatible(\n+pub fn make_rhs_categoricals_compatible(",
        "comment_created_at": "2025-03-29T15:08:24+00:00",
        "comment_author": "mcrumiller",
        "comment_body": "@ritchie46 I renamed these functions because this tripped me up initially and this makes it clearer that only the right series is updated. If the RHS has categories that don't exist in the LHS, the left series will still not include these categories in its revmap even after this operation.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1933681582",
    "pr_number": 20956,
    "pr_file": "crates/polars-io/src/catalog/unity/client.rs",
    "created_at": "2025-01-29T11:07:08+00:00",
    "commented_code": "table_name.replace('/', \"%2F\")\n         );\n \n-        let bytes = async {\n+        let bytes = do_request(\n             self.http_client\n                 .get(format!(\n                     \"{}{}{}\",\n                     &self.workspace_url, \"/api/2.1/unity-catalog/tables/\", full_table_name\n                 ))\n-                .query(&[(\"full_name\", full_table_name)])\n-                .send()\n-                .await?\n-                .bytes()\n-                .await\n-        }\n-        .await\n-        .map_err(to_compute_err)?;\n+                .query(&[(\"full_name\", full_table_name)]),\n+        )\n+        .await?;\n \n         let out: TableInfo = decode_json_response(&bytes)?;\n \n         Ok(out)\n     }\n+\n+    pub async fn create_catalog(\n+        &self,\n+        catalog_name: &str,\n+        comment: Option<&str>,\n+        storage_root: Option<&str>,\n+    ) -> PolarsResult<CatalogInfo> {\n+        let resp = do_request(\n+            self.http_client\n+                .post(format!(\n+                    \"{}{}\",\n+                    &self.workspace_url, \"/api/2.1/unity-catalog/catalogs\"\n+                ))\n+                .json(&Body {\n+                    name: catalog_name,\n+                    comment,\n+                    storage_root,\n+                }),\n+        )\n+        .await?;\n+\n+        return decode_json_response(&resp);\n+\n+        #[derive(serde::Serialize)]\n+        struct Body<'a> {\n+            name: &'a str,\n+            comment: Option<&'a str>,\n+            storage_root: Option<&'a str>,\n+        }\n+    }\n+\n+    pub async fn delete_catalog(&self, catalog_name: &str, force: bool) -> PolarsResult<()> {\n+        let catalog_name = catalog_name.replace('/', \"%2F\");\n+\n+        do_request(\n+            self.http_client\n+                .delete(format!(\n+                    \"{}{}{}\",\n+                    &self.workspace_url, \"/api/2.1/unity-catalog/catalogs/\", catalog_name\n+                ))\n+                .query(&[(\"force\", force)]),\n+        )\n+        .await?;\n+\n+        Ok(())\n+    }\n+\n+    pub async fn create_schema(",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1933681582",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 20956,
        "pr_file": "crates/polars-io/src/catalog/unity/client.rs",
        "discussion_id": "1933681582",
        "commented_code": "@@ -64,25 +68,200 @@ impl CatalogClient {\n             table_name.replace('/', \"%2F\")\n         );\n \n-        let bytes = async {\n+        let bytes = do_request(\n             self.http_client\n                 .get(format!(\n                     \"{}{}{}\",\n                     &self.workspace_url, \"/api/2.1/unity-catalog/tables/\", full_table_name\n                 ))\n-                .query(&[(\"full_name\", full_table_name)])\n-                .send()\n-                .await?\n-                .bytes()\n-                .await\n-        }\n-        .await\n-        .map_err(to_compute_err)?;\n+                .query(&[(\"full_name\", full_table_name)]),\n+        )\n+        .await?;\n \n         let out: TableInfo = decode_json_response(&bytes)?;\n \n         Ok(out)\n     }\n+\n+    pub async fn create_catalog(\n+        &self,\n+        catalog_name: &str,\n+        comment: Option<&str>,\n+        storage_root: Option<&str>,\n+    ) -> PolarsResult<CatalogInfo> {\n+        let resp = do_request(\n+            self.http_client\n+                .post(format!(\n+                    \"{}{}\",\n+                    &self.workspace_url, \"/api/2.1/unity-catalog/catalogs\"\n+                ))\n+                .json(&Body {\n+                    name: catalog_name,\n+                    comment,\n+                    storage_root,\n+                }),\n+        )\n+        .await?;\n+\n+        return decode_json_response(&resp);\n+\n+        #[derive(serde::Serialize)]\n+        struct Body<'a> {\n+            name: &'a str,\n+            comment: Option<&'a str>,\n+            storage_root: Option<&'a str>,\n+        }\n+    }\n+\n+    pub async fn delete_catalog(&self, catalog_name: &str, force: bool) -> PolarsResult<()> {\n+        let catalog_name = catalog_name.replace('/', \"%2F\");\n+\n+        do_request(\n+            self.http_client\n+                .delete(format!(\n+                    \"{}{}{}\",\n+                    &self.workspace_url, \"/api/2.1/unity-catalog/catalogs/\", catalog_name\n+                ))\n+                .query(&[(\"force\", force)]),\n+        )\n+        .await?;\n+\n+        Ok(())\n+    }\n+\n+    pub async fn create_schema(",
        "comment_created_at": "2025-01-29T11:07:08+00:00",
        "comment_author": "ritchie46",
        "comment_body": "Given that our schema conflicts with the catalog schema definition. Shall we name it `create_namespace` and mention in the docstrings that we mean catalog schema's for that?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1933723702",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 20956,
        "pr_file": "crates/polars-io/src/catalog/unity/client.rs",
        "discussion_id": "1933681582",
        "commented_code": "@@ -64,25 +68,200 @@ impl CatalogClient {\n             table_name.replace('/', \"%2F\")\n         );\n \n-        let bytes = async {\n+        let bytes = do_request(\n             self.http_client\n                 .get(format!(\n                     \"{}{}{}\",\n                     &self.workspace_url, \"/api/2.1/unity-catalog/tables/\", full_table_name\n                 ))\n-                .query(&[(\"full_name\", full_table_name)])\n-                .send()\n-                .await?\n-                .bytes()\n-                .await\n-        }\n-        .await\n-        .map_err(to_compute_err)?;\n+                .query(&[(\"full_name\", full_table_name)]),\n+        )\n+        .await?;\n \n         let out: TableInfo = decode_json_response(&bytes)?;\n \n         Ok(out)\n     }\n+\n+    pub async fn create_catalog(\n+        &self,\n+        catalog_name: &str,\n+        comment: Option<&str>,\n+        storage_root: Option<&str>,\n+    ) -> PolarsResult<CatalogInfo> {\n+        let resp = do_request(\n+            self.http_client\n+                .post(format!(\n+                    \"{}{}\",\n+                    &self.workspace_url, \"/api/2.1/unity-catalog/catalogs\"\n+                ))\n+                .json(&Body {\n+                    name: catalog_name,\n+                    comment,\n+                    storage_root,\n+                }),\n+        )\n+        .await?;\n+\n+        return decode_json_response(&resp);\n+\n+        #[derive(serde::Serialize)]\n+        struct Body<'a> {\n+            name: &'a str,\n+            comment: Option<&'a str>,\n+            storage_root: Option<&'a str>,\n+        }\n+    }\n+\n+    pub async fn delete_catalog(&self, catalog_name: &str, force: bool) -> PolarsResult<()> {\n+        let catalog_name = catalog_name.replace('/', \"%2F\");\n+\n+        do_request(\n+            self.http_client\n+                .delete(format!(\n+                    \"{}{}{}\",\n+                    &self.workspace_url, \"/api/2.1/unity-catalog/catalogs/\", catalog_name\n+                ))\n+                .query(&[(\"force\", force)]),\n+        )\n+        .await?;\n+\n+        Ok(())\n+    }\n+\n+    pub async fn create_schema(",
        "comment_created_at": "2025-01-29T11:36:06+00:00",
        "comment_author": "nameexhaustion",
        "comment_body": "I can update it. Do you also want it changed on the Python API, or just on the Rust-side functions?\r\n\r\nThe \"schema\" word is also used in multiple places (e.g. `struct SchemaInfo`, or `schema_info: &str` in function arguments) - if we want to be consistent we would need to rename all of those places.\r\n",
        "pr_file_module": null
      }
    ]
  }
]