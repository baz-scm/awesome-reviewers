[
  {
    "discussion_id": "1625893977",
    "pr_number": 16588,
    "pr_file": "py-polars/tests/unit/operations/unique/test_unique_counts.py",
    "created_at": "2024-06-04T12:14:16+00:00",
    "commented_code": "s = pl.Series([None, None, None])\n     expected = pl.Series([3], dtype=pl.UInt32)\n     assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool() -> None:\n+    s = pl.Series(\"bool\", [True, False, False, True, True, True])\n+    expected = pl.Series(\"bool\", [4, 2], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_only_true() -> None:\n+    s = pl.Series(\"bool\", [True, True, True])\n+    expected = pl.Series(\"bool\", [3], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_only_false() -> None:\n+    s = pl.Series(\"bool\", [False, False, False])\n+    expected = pl.Series(\"bool\", [3], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_include_null() -> None:\n+    s = pl.Series(\"bool\", [True, None, False, False, True, True])\n+    expected = pl.Series(\"bool\", [3, 1, 2], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1625893977",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 16588,
        "pr_file": "py-polars/tests/unit/operations/unique/test_unique_counts.py",
        "discussion_id": "1625893977",
        "commented_code": "@@ -43,3 +43,27 @@ def test_unique_counts_null() -> None:\n     s = pl.Series([None, None, None])\n     expected = pl.Series([3], dtype=pl.UInt32)\n     assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool() -> None:\n+    s = pl.Series(\"bool\", [True, False, False, True, True, True])\n+    expected = pl.Series(\"bool\", [4, 2], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_only_true() -> None:\n+    s = pl.Series(\"bool\", [True, True, True])\n+    expected = pl.Series(\"bool\", [3], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_only_false() -> None:\n+    s = pl.Series(\"bool\", [False, False, False])\n+    expected = pl.Series(\"bool\", [3], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_include_null() -> None:\n+    s = pl.Series(\"bool\", [True, None, False, False, True, True])\n+    expected = pl.Series(\"bool\", [3, 1, 2], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)",
        "comment_created_at": "2024-06-04T12:14:16+00:00",
        "comment_author": "mcrumiller",
        "comment_body": "Can you add a test with all nulls?",
        "pr_file_module": null
      },
      {
        "comment_id": "1625966972",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 16588,
        "pr_file": "py-polars/tests/unit/operations/unique/test_unique_counts.py",
        "discussion_id": "1625893977",
        "commented_code": "@@ -43,3 +43,27 @@ def test_unique_counts_null() -> None:\n     s = pl.Series([None, None, None])\n     expected = pl.Series([3], dtype=pl.UInt32)\n     assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool() -> None:\n+    s = pl.Series(\"bool\", [True, False, False, True, True, True])\n+    expected = pl.Series(\"bool\", [4, 2], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_only_true() -> None:\n+    s = pl.Series(\"bool\", [True, True, True])\n+    expected = pl.Series(\"bool\", [3], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_only_false() -> None:\n+    s = pl.Series(\"bool\", [False, False, False])\n+    expected = pl.Series(\"bool\", [3], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_include_null() -> None:\n+    s = pl.Series(\"bool\", [True, None, False, False, True, True])\n+    expected = pl.Series(\"bool\", [3, 1, 2], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)",
        "comment_created_at": "2024-06-04T13:02:53+00:00",
        "comment_author": "henrikig",
        "comment_body": "Added tests for all combinations of true/false/null present to cover more code paths \u2705",
        "pr_file_module": null
      },
      {
        "comment_id": "1626084592",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 16588,
        "pr_file": "py-polars/tests/unit/operations/unique/test_unique_counts.py",
        "discussion_id": "1625893977",
        "commented_code": "@@ -43,3 +43,27 @@ def test_unique_counts_null() -> None:\n     s = pl.Series([None, None, None])\n     expected = pl.Series([3], dtype=pl.UInt32)\n     assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool() -> None:\n+    s = pl.Series(\"bool\", [True, False, False, True, True, True])\n+    expected = pl.Series(\"bool\", [4, 2], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_only_true() -> None:\n+    s = pl.Series(\"bool\", [True, True, True])\n+    expected = pl.Series(\"bool\", [3], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_only_false() -> None:\n+    s = pl.Series(\"bool\", [False, False, False])\n+    expected = pl.Series(\"bool\", [3], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_include_null() -> None:\n+    s = pl.Series(\"bool\", [True, None, False, False, True, True])\n+    expected = pl.Series(\"bool\", [3, 1, 2], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)",
        "comment_created_at": "2024-06-04T14:07:14+00:00",
        "comment_author": "mcrumiller",
        "comment_body": "Can you parametrize the tests? It's a lot more compact, something like:\r\n\r\n```python\r\n@pytest.mark.parametrize(\r\n    (\"input\", \"expected\"),\r\n    [\r\n        ([True, True, True], [3]),\r\n        ([False, False, False], [3]),\r\n        ([True, False, False, True, True], [3, 2]),\r\n    ]\r\n)\r\nfn test_unique_counts_bool(input: list[bool], expected: list[int]):\r\n    assert_series_equal(\r\n        pl.Series(\"bool\", input).unique_counts(),\r\n        pl.Series(\"bool\", expected, dtype=pl.Int32)\r\n    )    \r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1626281846",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 16588,
        "pr_file": "py-polars/tests/unit/operations/unique/test_unique_counts.py",
        "discussion_id": "1625893977",
        "commented_code": "@@ -43,3 +43,27 @@ def test_unique_counts_null() -> None:\n     s = pl.Series([None, None, None])\n     expected = pl.Series([3], dtype=pl.UInt32)\n     assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool() -> None:\n+    s = pl.Series(\"bool\", [True, False, False, True, True, True])\n+    expected = pl.Series(\"bool\", [4, 2], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_only_true() -> None:\n+    s = pl.Series(\"bool\", [True, True, True])\n+    expected = pl.Series(\"bool\", [3], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_only_false() -> None:\n+    s = pl.Series(\"bool\", [False, False, False])\n+    expected = pl.Series(\"bool\", [3], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)\n+\n+\n+def test_unique_counts_on_bool_include_null() -> None:\n+    s = pl.Series(\"bool\", [True, None, False, False, True, True])\n+    expected = pl.Series(\"bool\", [3, 1, 2], dtype=pl.UInt32)\n+    assert_series_equal(s.unique_counts(), expected)",
        "comment_created_at": "2024-06-04T16:11:03+00:00",
        "comment_author": "henrikig",
        "comment_body": "That's much cleaner indeed, made the change as requested",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2009723690",
    "pr_number": 21785,
    "pr_file": "py-polars/tests/unit/datatypes/test_temporal.py",
    "created_at": "2025-03-24T08:47:14+00:00",
    "commented_code": "def test_convert_pandas_timezone_info() -> None:\n-    ts = pd.Timestamp(\"20200101 00:00\").tz_localize(\"America/New_York\")\n-    df = pl.DataFrame({\"date\": [ts]})\n-    assert df[\"date\"][0] == datetime(\n-        2020, 1, 1, 0, 0, tzinfo=ZoneInfo(\"America/New_York\")\n-    )\n+    # Pandas support all of the following timezone and the pandas parsing behavior is\n+    # - timezone name: pytz.timezone on <=2.x and ZoneInfo on 3.x.\n+    # - timezone offset: datetime.timedelta.\n+    # pytz.timezone.\n+    ts1 = pd.Timestamp(\"20200101 00:00\", tz=pytz.timezone(\"America/New_York\"))\n+    # ZoneInfo.\n+    ts2 = pd.Timestamp(\"20200101 00:00\", tz=ZoneInfo(\"America/New_York\"))\n+    # pytz.FixedOffset\n+    ts3 = pd.Timestamp(\"20200101 00:00\", tz=pytz.FixedOffset(-300))\n+    # datetime.timedelta.\n+    ts4 = pd.Timestamp(\"20200101 00:00\", tz=timezone(timedelta(days=-1, seconds=68400)))\n+\n+    for ts in (ts1, ts2, ts3, ts4):\n+        df1 = pl.DataFrame({\"date\": [ts]})\n+        df2 = pl.select(date=pl.lit(ts))\n+        for df in (df1, df2):\n+            df_ts = df[\"date\"][0]\n+            assert df_ts == ts, (df_ts, ts)\n+            if ts is ts3 or ts is ts4:",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2009723690",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 21785,
        "pr_file": "py-polars/tests/unit/datatypes/test_temporal.py",
        "discussion_id": "2009723690",
        "commented_code": "@@ -555,11 +556,36 @@ def test_read_utc_times_parquet() -> None:\n \n \n def test_convert_pandas_timezone_info() -> None:\n-    ts = pd.Timestamp(\"20200101 00:00\").tz_localize(\"America/New_York\")\n-    df = pl.DataFrame({\"date\": [ts]})\n-    assert df[\"date\"][0] == datetime(\n-        2020, 1, 1, 0, 0, tzinfo=ZoneInfo(\"America/New_York\")\n-    )\n+    # Pandas support all of the following timezone and the pandas parsing behavior is\n+    # - timezone name: pytz.timezone on <=2.x and ZoneInfo on 3.x.\n+    # - timezone offset: datetime.timedelta.\n+    # pytz.timezone.\n+    ts1 = pd.Timestamp(\"20200101 00:00\", tz=pytz.timezone(\"America/New_York\"))\n+    # ZoneInfo.\n+    ts2 = pd.Timestamp(\"20200101 00:00\", tz=ZoneInfo(\"America/New_York\"))\n+    # pytz.FixedOffset\n+    ts3 = pd.Timestamp(\"20200101 00:00\", tz=pytz.FixedOffset(-300))\n+    # datetime.timedelta.\n+    ts4 = pd.Timestamp(\"20200101 00:00\", tz=timezone(timedelta(days=-1, seconds=68400)))\n+\n+    for ts in (ts1, ts2, ts3, ts4):\n+        df1 = pl.DataFrame({\"date\": [ts]})\n+        df2 = pl.select(date=pl.lit(ts))\n+        for df in (df1, df2):\n+            df_ts = df[\"date\"][0]\n+            assert df_ts == ts, (df_ts, ts)\n+            if ts is ts3 or ts is ts4:",
        "comment_created_at": "2025-03-24T08:47:14+00:00",
        "comment_author": "MarcoGorelli",
        "comment_body": "seeing this logic in a test case kind of scares me\r\n\r\ni'd advise against putting non-trivial logic in tests\r\n\r\ncould you split this out into a separate test if necessary?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1451825983",
    "pr_number": 13727,
    "pr_file": "py-polars/tests/unit/io/test_csv.py",
    "created_at": "2024-01-14T23:38:49+00:00",
    "commented_code": ")[\"x\"].to_list() == [\"A\", \"B\"]\n \n \n+def test_csv_clip_n_rows_to_sample_size() -> None:",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1451825983",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 13727,
        "pr_file": "py-polars/tests/unit/io/test_csv.py",
        "discussion_id": "1451825983",
        "commented_code": "@@ -1266,6 +1266,20 @@ def test_csv_categorical_categorical_merge() -> None:\n     )[\"x\"].to_list() == [\"A\", \"B\"]\n \n \n+def test_csv_clip_n_rows_to_sample_size() -> None:",
        "comment_created_at": "2024-01-14T23:38:49+00:00",
        "comment_author": "stinodego",
        "comment_body": "The `tmp_path` fixture should be used here - you can figure out how it works from the other I/O tests:\r\n\r\n```suggestion\r\n@pytest.mark.write_disk()\r\ndef test_csv_clip_n_rows_to_sample_size(tmp_path: Path) -> None:\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1451827524",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 13727,
        "pr_file": "py-polars/tests/unit/io/test_csv.py",
        "discussion_id": "1451825983",
        "commented_code": "@@ -1266,6 +1266,20 @@ def test_csv_categorical_categorical_merge() -> None:\n     )[\"x\"].to_list() == [\"A\", \"B\"]\n \n \n+def test_csv_clip_n_rows_to_sample_size() -> None:",
        "comment_created_at": "2024-01-14T23:47:47+00:00",
        "comment_author": "Wainberg",
        "comment_body": "Thanks for the suggestion, just updated!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1452229900",
    "pr_number": 13727,
    "pr_file": "py-polars/tests/unit/io/test_csv.py",
    "created_at": "2024-01-15T10:58:04+00:00",
    "commented_code": ")[\"x\"].to_list() == [\"A\", \"B\"]\n \n \n+@pytest.mark.write_disk()\n+def test_csv_clip_sample_size_to_n_rows(tmp_path: Path) -> None:",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1452229900",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 13727,
        "pr_file": "py-polars/tests/unit/io/test_csv.py",
        "discussion_id": "1452229900",
        "commented_code": "@@ -1266,6 +1266,19 @@ def test_csv_categorical_categorical_merge() -> None:\n     )[\"x\"].to_list() == [\"A\", \"B\"]\n \n \n+@pytest.mark.write_disk()\n+def test_csv_clip_sample_size_to_n_rows(tmp_path: Path) -> None:",
        "comment_created_at": "2024-01-15T10:58:04+00:00",
        "comment_author": "ritchie46",
        "comment_body": "Can this be done in-memory with `io.BytesIO()`. We prefer in-memory tests when possible as this is faster.",
        "pr_file_module": null
      }
    ]
  }
]