[
  {
    "discussion_id": "2162145745",
    "pr_number": 23266,
    "pr_file": "py-polars/polars/series/series.py",
    "created_at": "2025-06-23T17:48:20+00:00",
    "commented_code": "if isinstance(other, Series):\n             return self._from_pyseries(getattr(self._s, op)(other._s))\n-\n+        try:\n+            f = get_ffi_func(op + \"_<>\", self.dtype, self._s)",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2162145745",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 23266,
        "pr_file": "py-polars/polars/series/series.py",
        "discussion_id": "2162145745",
        "commented_code": "@@ -819,12 +819,15 @@ def _comp(self, other: Any, op: ComparisonOperator) -> Series:\n \n         if isinstance(other, Series):\n             return self._from_pyseries(getattr(self._s, op)(other._s))\n-\n+        try:\n+            f = get_ffi_func(op + \"_<>\", self.dtype, self._s)",
        "comment_created_at": "2025-06-23T17:48:20+00:00",
        "comment_author": "deanm0000",
        "comment_body": "I put this before the `maybe_cast` because without `f` we're going to raise regardless of the `maybe_cast`. By doing that it made it so `test_eq_list_cmp_int` and `test_eq_array_cmp_int` were raising here instead of during the `maybe_cast` so I changed those tests to expect NotImplemented.\r\n\r\nAdditionally, I put this in a try block since `get_ffi_func` raises on an Array Series which winds up giving inconsistent error messages. As a future refactor, maybe make it so `get_ffi_func` always returns None rather than raising when the type is missing from DTYPE_TO_FFINAME OR put Array in that func.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2106129155",
    "pr_number": 22928,
    "pr_file": "py-polars/polars/lazyframe/frame.py",
    "created_at": "2025-05-25T08:39:53+00:00",
    "commented_code": "│ 4   ┆ 13.0 ┆ {1,3.0}     │\n         └─────┴──────┴─────────────┘\n         \"\"\"\n+        # Ensures that the outermost element cannot be a Dictionary (as an iterable)\n+        if len(exprs) == 1 and isinstance(exprs[0], Mapping):",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2106129155",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22928,
        "pr_file": "py-polars/polars/lazyframe/frame.py",
        "discussion_id": "2106129155",
        "commented_code": "@@ -5851,6 +5851,16 @@ def with_columns(\n         │ 4   ┆ 13.0 ┆ {1,3.0}     │\n         └─────┴──────┴─────────────┘\n         \"\"\"\n+        # Ensures that the outermost element cannot be a Dictionary (as an iterable)\n+        if len(exprs) == 1 and isinstance(exprs[0], Mapping):",
        "comment_created_at": "2025-05-25T08:39:53+00:00",
        "comment_author": "ritchie46",
        "comment_body": "The guard position should be at the generic location. I believe that is in `_parse_inputs_as_iterable`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2106141243",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22928,
        "pr_file": "py-polars/polars/lazyframe/frame.py",
        "discussion_id": "2106129155",
        "commented_code": "@@ -5851,6 +5851,16 @@ def with_columns(\n         │ 4   ┆ 13.0 ┆ {1,3.0}     │\n         └─────┴──────┴─────────────┘\n         \"\"\"\n+        # Ensures that the outermost element cannot be a Dictionary (as an iterable)\n+        if len(exprs) == 1 and isinstance(exprs[0], Mapping):",
        "comment_created_at": "2025-05-25T09:31:16+00:00",
        "comment_author": "kutal10",
        "comment_body": "If we move it to the generic location `_parse_inputs_as_iterable` - then we move the radius of the guard to impact more syntax than just `with_columns`. \r\n\r\nFor example, moving it will cause a test failure of `test_projection_join_names_9955` where a `select` statement takes in a `dict` equivalent:\r\n\r\n```python\r\ndef test_projection_join_names_9955() -> None:\r\n    batting = pl.LazyFrame(\r\n        {\r\n            \"playerID\": [\"abercda01\"],\r\n            \"yearID\": [1871],\r\n            \"lgID\": [\"NA\"],\r\n        }\r\n    )\r\n\r\n    awards_players = pl.LazyFrame(\r\n        {\r\n            \"playerID\": [\"bondto01\"],\r\n            \"yearID\": [1877],\r\n            \"lgID\": [\"NL\"],\r\n        }\r\n    )\r\n\r\n    right = awards_players.filter(pl.col(\"lgID\") == \"NL\").select(\"playerID\")\r\n\r\n    q = batting.join(\r\n        right,\r\n        left_on=[pl.col(\"playerID\")],\r\n        right_on=[pl.col(\"playerID\")],\r\n        how=\"inner\",\r\n    )\r\n\r\n    q = q.select(batting.collect_schema())\r\n\r\n    assert q.collect().schema == {\r\n        \"playerID\": pl.String,\r\n        \"yearID\": pl.Int64,\r\n        \"lgID\": pl.String,\r\n    }\r\n\r\n```\r\n\r\nWhich is why i'm hesitant to move it inwards to the generic, because that theoretically is a breaking change, instead of leaving it at `with_columns`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2106203798",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22928,
        "pr_file": "py-polars/polars/lazyframe/frame.py",
        "discussion_id": "2106129155",
        "commented_code": "@@ -5851,6 +5851,16 @@ def with_columns(\n         │ 4   ┆ 13.0 ┆ {1,3.0}     │\n         └─────┴──────┴─────────────┘\n         \"\"\"\n+        # Ensures that the outermost element cannot be a Dictionary (as an iterable)\n+        if len(exprs) == 1 and isinstance(exprs[0], Mapping):",
        "comment_created_at": "2025-05-25T13:31:46+00:00",
        "comment_author": "kutal10",
        "comment_body": "@ritchie46 As an alternative, if I was to move the guard down to the generic function - I can do the following: \r\n\r\n\r\n1. Update the above failing test to just make it work in the new `_parse_inputs_as_iterable`\r\n\r\n```diff\r\n-q = q.select(batting.collect_schema())\r\n+q = q.select(*batting.collect_schema().keys())\r\n```\r\n\r\n2. Update the message so it's relevant for all `projection` keywords, not just `with_columns` \r\n\r\n```python\r\nmsg = (\r\n            \"Cannot pass a dictionary as a single positional argument.\\n\"\r\n            \"If you merely want the *keys*, use:\\n\"\r\n            \"  • df.method(*your_dict.keys())\\n\"\r\n            \"If you need the key–value pairs, use one of:\\n\"\r\n            \"  • unpack as keywords:    df.method(**your_dict)\\n\"\r\n            \"  • build expressions:     df.method(expr.alias(k) for k, expr in your_dict.items())\"\r\n        )\r\n```\r\n\r\n3. Change the PR scope / title to point out it impacts all such column `projection` keywords, not just `with_columns`\r\n\r\nLet me know if that sounds reasonable! \r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2107680389",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 22928,
        "pr_file": "py-polars/polars/lazyframe/frame.py",
        "discussion_id": "2106129155",
        "commented_code": "@@ -5851,6 +5851,16 @@ def with_columns(\n         │ 4   ┆ 13.0 ┆ {1,3.0}     │\n         └─────┴──────┴─────────────┘\n         \"\"\"\n+        # Ensures that the outermost element cannot be a Dictionary (as an iterable)\n+        if len(exprs) == 1 and isinstance(exprs[0], Mapping):",
        "comment_created_at": "2025-05-26T17:26:28+00:00",
        "comment_author": "ritchie46",
        "comment_body": "Yes, that's good. In `select` we also should not accept dictionaries.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2020449205",
    "pr_number": 21987,
    "pr_file": "py-polars/polars/lazyframe/frame.py",
    "created_at": "2025-03-31T06:02:53+00:00",
    "commented_code": "# Handle empty dict input\n             storage_options = None\n \n-        target: str | Path | PyPartitioning\n-        if not isinstance(path, (str, Path)):\n-            target = path._p\n-        else:\n+        target: str | Path | io.BytesIO | PyPartitioning\n+        if isinstance(path, (str, Path)):\n             target = normalize_filepath(path)\n+        elif isinstance(path, (io.BytesIO)):\n+            target = path\n+        else:\n+            target = path._p",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "2020449205",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 21987,
        "pr_file": "py-polars/polars/lazyframe/frame.py",
        "discussion_id": "2020449205",
        "commented_code": "@@ -2663,11 +2664,13 @@ def sink_parquet(\n             # Handle empty dict input\n             storage_options = None\n \n-        target: str | Path | PyPartitioning\n-        if not isinstance(path, (str, Path)):\n-            target = path._p\n-        else:\n+        target: str | Path | io.BytesIO | PyPartitioning\n+        if isinstance(path, (str, Path)):\n             target = normalize_filepath(path)\n+        elif isinstance(path, (io.BytesIO)):\n+            target = path\n+        else:\n+            target = path._p",
        "comment_created_at": "2025-03-31T06:02:53+00:00",
        "comment_author": "nameexhaustion",
        "comment_body": "This should check for an exact instance, otherwise we get cryptic error messages `has no attribute _p`.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1549337720",
    "pr_number": 15261,
    "pr_file": "py-polars/polars/io/pyarrow_dataset/anonymous_scan.py",
    "created_at": "2024-04-03T09:29:54+00:00",
    "commented_code": "common_params = {\"columns\": with_columns, \"filter\": _filter}\n     if batch_size is not None:\n         common_params[\"batch_size\"] = batch_size\n+    if pyarrow_options:\n+        for pyarrow_option_name, pyarrow_option in pyarrow_options.items():\n+            if pyarrow_option_name in common_params:\n+                error = f\"Tried to overwrite already set pyarrow parameter {pyarrow_option_name}\"\n+                raise ValueError(error)\n+            common_params[pyarrow_option_name] = pyarrow_option",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1549337720",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 15261,
        "pr_file": "py-polars/polars/io/pyarrow_dataset/anonymous_scan.py",
        "discussion_id": "1549337720",
        "commented_code": "@@ -96,6 +109,12 @@ def _scan_pyarrow_dataset_impl(\n     common_params = {\"columns\": with_columns, \"filter\": _filter}\n     if batch_size is not None:\n         common_params[\"batch_size\"] = batch_size\n+    if pyarrow_options:\n+        for pyarrow_option_name, pyarrow_option in pyarrow_options.items():\n+            if pyarrow_option_name in common_params:\n+                error = f\"Tried to overwrite already set pyarrow parameter {pyarrow_option_name}\"\n+                raise ValueError(error)\n+            common_params[pyarrow_option_name] = pyarrow_option",
        "comment_created_at": "2024-04-03T09:29:54+00:00",
        "comment_author": "stinodego",
        "comment_body": "You don't need to write the logic for this. If you just pass `**pyarrow_options` to the `to_table` call, you will get a TypeError if the same option was passed twice.",
        "pr_file_module": null
      },
      {
        "comment_id": "1550981884",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 15261,
        "pr_file": "py-polars/polars/io/pyarrow_dataset/anonymous_scan.py",
        "discussion_id": "1549337720",
        "commented_code": "@@ -96,6 +109,12 @@ def _scan_pyarrow_dataset_impl(\n     common_params = {\"columns\": with_columns, \"filter\": _filter}\n     if batch_size is not None:\n         common_params[\"batch_size\"] = batch_size\n+    if pyarrow_options:\n+        for pyarrow_option_name, pyarrow_option in pyarrow_options.items():\n+            if pyarrow_option_name in common_params:\n+                error = f\"Tried to overwrite already set pyarrow parameter {pyarrow_option_name}\"\n+                raise ValueError(error)\n+            common_params[pyarrow_option_name] = pyarrow_option",
        "comment_created_at": "2024-04-04T06:09:19+00:00",
        "comment_author": "kszlim",
        "comment_body": "Sounds good, i'll update that.",
        "pr_file_module": null
      }
    ]
  }
]