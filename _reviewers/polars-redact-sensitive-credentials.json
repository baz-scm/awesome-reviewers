[
  {
    "discussion_id": "1910147426",
    "pr_number": 20652,
    "pr_file": "crates/polars-io/src/cloud/options.rs",
    "created_at": "2025-01-10T10:15:00+00:00",
    "commented_code": ");\n             }\n             builder.with_credentials(v.into_azure_provider())\n-        } else if let Some(v) = extract_adls_uri_storage_account(url) // Prefer the one embedded in the path\n-            .map(|x| x.into())\n-            .or(storage_account)\n-            .as_deref()\n-            .and_then(get_azure_storage_account_key)\n-        {\n-            if verbose {\n-                eprintln!(\"[CloudOptions::build_azure]: Retrieved account key from Azure CLI\")\n-            }\n-            builder.with_access_key(v)\n         } else {\n+            builder\n+        };\n+\n+        if verbose {\n+            eprintln!(\n+                \"[CloudOptions::build_azure]: azure_cli_account_key: {:?}\",\n+                azure_cli_account_key.as_ref().map(|_| \"<redacted>\")\n+            );\n+        }\n+\n+        let store = builder.build().map_err(to_compute_err)?;\n+\n+        let Some(account_key) = azure_cli_account_key else {\n+            return Ok(store);\n+        };\n+\n+        let had_permission_error = crate::pl_async::get_runtime().block_on_potential_spawn(async {\n+            // Identify if there is a permission error using a dummy path\n+            let v = store.head(&\".\".into()).await;\n+            matches!(v, Err(object_store::Error::PermissionDenied { .. }))\n+        });\n+\n+        if !had_permission_error {\n             if verbose {\n+                eprintln!(\"[CloudOptions::build_azure]: Permission check OK\");\n+            }\n+            return Ok(store);\n+        }",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1910147426",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 20652,
        "pr_file": "crates/polars-io/src/cloud/options.rs",
        "discussion_id": "1910147426",
        "commented_code": "@@ -432,26 +442,84 @@ impl CloudOptions {\n                 );\n             }\n             builder.with_credentials(v.into_azure_provider())\n-        } else if let Some(v) = extract_adls_uri_storage_account(url) // Prefer the one embedded in the path\n-            .map(|x| x.into())\n-            .or(storage_account)\n-            .as_deref()\n-            .and_then(get_azure_storage_account_key)\n-        {\n-            if verbose {\n-                eprintln!(\"[CloudOptions::build_azure]: Retrieved account key from Azure CLI\")\n-            }\n-            builder.with_access_key(v)\n         } else {\n+            builder\n+        };\n+\n+        if verbose {\n+            eprintln!(\n+                \"[CloudOptions::build_azure]: azure_cli_account_key: {:?}\",\n+                azure_cli_account_key.as_ref().map(|_| \"<redacted>\")\n+            );\n+        }\n+\n+        let store = builder.build().map_err(to_compute_err)?;\n+\n+        let Some(account_key) = azure_cli_account_key else {\n+            return Ok(store);\n+        };\n+\n+        let had_permission_error = crate::pl_async::get_runtime().block_on_potential_spawn(async {\n+            // Identify if there is a permission error using a dummy path\n+            let v = store.head(&\".\".into()).await;\n+            matches!(v, Err(object_store::Error::PermissionDenied { .. }))\n+        });\n+\n+        if !had_permission_error {\n             if verbose {\n+                eprintln!(\"[CloudOptions::build_azure]: Permission check OK\");\n+            }\n+            return Ok(store);\n+        }",
        "comment_created_at": "2025-01-10T10:15:00+00:00",
        "comment_author": "nameexhaustion",
        "comment_body": "Authentication will now prioritize Entra ID (via the Python-side `DefaultAzureCredential` if `azure.identity` is installed). ~~Using the storage account key will only happen if we get a permission error (above).~~\r\n",
        "pr_file_module": null
      }
    ]
  }
]