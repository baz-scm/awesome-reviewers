[
  {
    "discussion_id": "1835511333",
    "pr_number": 19708,
    "pr_file": "crates/polars-plan/src/dsl/function_expr/temporal.rs",
    "created_at": "2024-11-09T20:05:11+00:00",
    "commented_code": "}\n     let year = year.i32()?;\n \n-    let mut month = month.cast(&DataType::UInt32)?;\n+    let mut month = month.cast(&DataType::Int8)?;\n     if month.len() < max_len {\n         month = month.new_from_index(0, max_len);\n     }\n-    let month = month.u32()?;\n+    let month = month.i8()?;\n \n-    let mut day = day.cast(&DataType::UInt32)?;\n+    let mut day = day.cast(&DataType::Int8)?;\n     if day.len() < max_len {\n         day = day.new_from_index(0, max_len);\n     }\n-    let day = day.u32()?;\n+    let day = day.i8()?;\n \n-    let mut hour = hour.cast(&DataType::UInt32)?;\n+    let mut hour = hour.cast(&DataType::Int8)?;\n     if hour.len() < max_len {\n         hour = hour.new_from_index(0, max_len);\n     }\n-    let hour = hour.u32()?;\n+    let hour = hour.i8()?;\n \n-    let mut minute = minute.cast(&DataType::UInt32)?;\n+    let mut minute = minute.cast(&DataType::Int8)?;\n     if minute.len() < max_len {\n         minute = minute.new_from_index(0, max_len);\n     }\n-    let minute = minute.u32()?;\n+    let minute = minute.i8()?;\n \n-    let mut second = second.cast(&DataType::UInt32)?;\n+    let mut second = second.cast(&DataType::Int8)?;\n     if second.len() < max_len {\n         second = second.new_from_index(0, max_len);\n     }\n-    let second = second.u32()?;\n+    let second = second.i8()?;\n \n-    let mut microsecond = microsecond.cast(&DataType::UInt32)?;\n+    let mut microsecond = microsecond.cast(&DataType::Int32)?;\n     if microsecond.len() < max_len {\n         microsecond = microsecond.new_from_index(0, max_len);\n     }\n-    let microsecond = microsecond.u32()?;\n+    let microsecond = microsecond.i32()?;\n     let mut _ambiguous = ambiguous.cast(&DataType::String)?;\n     if _ambiguous.len() < max_len {\n         _ambiguous = _ambiguous.new_from_index(0, max_len);\n     }\n-    let _ambiguous = _ambiguous.str()?;\n-\n-    let ca: Int64Chunked = year\n-        .into_iter()\n-        .zip(month)\n-        .zip(day)\n-        .zip(hour)\n-        .zip(minute)\n-        .zip(second)\n-        .zip(microsecond)\n-        .map(|((((((y, m), d), h), mnt), s), us)| {\n-            if let (Some(y), Some(m), Some(d), Some(h), Some(mnt), Some(s), Some(us)) =\n-                (y, m, d, h, mnt, s, us)\n-            {\n-                NaiveDate::from_ymd_opt(y, m, d)\n-                    .and_then(|nd| nd.and_hms_micro_opt(h, mnt, s, us))\n-                    .map(|ndt| match time_unit {\n-                        TimeUnit::Milliseconds => ndt.and_utc().timestamp_millis(),\n-                        TimeUnit::Microseconds => ndt.and_utc().timestamp_micros(),\n-                        TimeUnit::Nanoseconds => ndt.and_utc().timestamp_nanos_opt().unwrap(),\n-                    })\n-            } else {\n-                None\n-            }\n-        })\n-        .collect_trusted();\n-\n-    let ca = match time_zone {\n-        #[cfg(feature = \"timezones\")]\n-        Some(_) => {\n-            let mut ca = ca.into_datetime(*time_unit, None);\n-            ca = replace_time_zone(&ca, time_zone, _ambiguous, NonExistent::Raise)?;\n-            ca\n-        },\n-        _ => {\n-            polars_ensure!(\n-                time_zone.is_none(),\n-                ComputeError: \"cannot make use of the `time_zone` argument without the 'timezones' feature enabled.\"\n-            );\n-            ca.into_datetime(*time_unit, None)\n-        },\n-    };",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1835511333",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 19708,
        "pr_file": "crates/polars-plan/src/dsl/function_expr/temporal.rs",
        "discussion_id": "1835511333",
        "commented_code": "@@ -95,91 +95,60 @@ pub(super) fn datetime(\n     }\n     let year = year.i32()?;\n \n-    let mut month = month.cast(&DataType::UInt32)?;\n+    let mut month = month.cast(&DataType::Int8)?;\n     if month.len() < max_len {\n         month = month.new_from_index(0, max_len);\n     }\n-    let month = month.u32()?;\n+    let month = month.i8()?;\n \n-    let mut day = day.cast(&DataType::UInt32)?;\n+    let mut day = day.cast(&DataType::Int8)?;\n     if day.len() < max_len {\n         day = day.new_from_index(0, max_len);\n     }\n-    let day = day.u32()?;\n+    let day = day.i8()?;\n \n-    let mut hour = hour.cast(&DataType::UInt32)?;\n+    let mut hour = hour.cast(&DataType::Int8)?;\n     if hour.len() < max_len {\n         hour = hour.new_from_index(0, max_len);\n     }\n-    let hour = hour.u32()?;\n+    let hour = hour.i8()?;\n \n-    let mut minute = minute.cast(&DataType::UInt32)?;\n+    let mut minute = minute.cast(&DataType::Int8)?;\n     if minute.len() < max_len {\n         minute = minute.new_from_index(0, max_len);\n     }\n-    let minute = minute.u32()?;\n+    let minute = minute.i8()?;\n \n-    let mut second = second.cast(&DataType::UInt32)?;\n+    let mut second = second.cast(&DataType::Int8)?;\n     if second.len() < max_len {\n         second = second.new_from_index(0, max_len);\n     }\n-    let second = second.u32()?;\n+    let second = second.i8()?;\n \n-    let mut microsecond = microsecond.cast(&DataType::UInt32)?;\n+    let mut microsecond = microsecond.cast(&DataType::Int32)?;\n     if microsecond.len() < max_len {\n         microsecond = microsecond.new_from_index(0, max_len);\n     }\n-    let microsecond = microsecond.u32()?;\n+    let microsecond = microsecond.i32()?;\n     let mut _ambiguous = ambiguous.cast(&DataType::String)?;\n     if _ambiguous.len() < max_len {\n         _ambiguous = _ambiguous.new_from_index(0, max_len);\n     }\n-    let _ambiguous = _ambiguous.str()?;\n-\n-    let ca: Int64Chunked = year\n-        .into_iter()\n-        .zip(month)\n-        .zip(day)\n-        .zip(hour)\n-        .zip(minute)\n-        .zip(second)\n-        .zip(microsecond)\n-        .map(|((((((y, m), d), h), mnt), s), us)| {\n-            if let (Some(y), Some(m), Some(d), Some(h), Some(mnt), Some(s), Some(us)) =\n-                (y, m, d, h, mnt, s, us)\n-            {\n-                NaiveDate::from_ymd_opt(y, m, d)\n-                    .and_then(|nd| nd.and_hms_micro_opt(h, mnt, s, us))\n-                    .map(|ndt| match time_unit {\n-                        TimeUnit::Milliseconds => ndt.and_utc().timestamp_millis(),\n-                        TimeUnit::Microseconds => ndt.and_utc().timestamp_micros(),\n-                        TimeUnit::Nanoseconds => ndt.and_utc().timestamp_nanos_opt().unwrap(),\n-                    })\n-            } else {\n-                None\n-            }\n-        })\n-        .collect_trusted();\n-\n-    let ca = match time_zone {\n-        #[cfg(feature = \"timezones\")]\n-        Some(_) => {\n-            let mut ca = ca.into_datetime(*time_unit, None);\n-            ca = replace_time_zone(&ca, time_zone, _ambiguous, NonExistent::Raise)?;\n-            ca\n-        },\n-        _ => {\n-            polars_ensure!(\n-                time_zone.is_none(),\n-                ComputeError: \"cannot make use of the `time_zone` argument without the 'timezones' feature enabled.\"\n-            );\n-            ca.into_datetime(*time_unit, None)\n-        },\n-    };",
        "comment_created_at": "2024-11-09T20:05:11+00:00",
        "comment_author": "mcrumiller",
        "comment_body": "I moved this code into datetime_series_from_parts in polars_time/src/series/mod.rs for re-use.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1845334183",
    "pr_number": 19708,
    "pr_file": "crates/polars-plan/src/dsl/function_expr/temporal.rs",
    "created_at": "2024-11-17T08:43:35+00:00",
    "commented_code": "}\n     let year = year.i32()?;\n \n-    let mut month = month.cast(&DataType::UInt32)?;\n+    let mut month = month.cast(&DataType::Int8)?;",
    "repo_full_name": "pola-rs/polars",
    "discussion_comments": [
      {
        "comment_id": "1845334183",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 19708,
        "pr_file": "crates/polars-plan/src/dsl/function_expr/temporal.rs",
        "discussion_id": "1845334183",
        "commented_code": "@@ -95,91 +94,61 @@ pub(super) fn datetime(\n     }\n     let year = year.i32()?;\n \n-    let mut month = month.cast(&DataType::UInt32)?;\n+    let mut month = month.cast(&DataType::Int8)?;",
        "comment_created_at": "2024-11-17T08:43:35+00:00",
        "comment_author": "MarcoGorelli",
        "comment_body": "why does this need to change?",
        "pr_file_module": null
      },
      {
        "comment_id": "1845475440",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 19708,
        "pr_file": "crates/polars-plan/src/dsl/function_expr/temporal.rs",
        "discussion_id": "1845334183",
        "commented_code": "@@ -95,91 +94,61 @@ pub(super) fn datetime(\n     }\n     let year = year.i32()?;\n \n-    let mut month = month.cast(&DataType::UInt32)?;\n+    let mut month = month.cast(&DataType::Int8)?;",
        "comment_created_at": "2024-11-17T14:20:45+00:00",
        "comment_author": "mcrumiller",
        "comment_body": "Hi Marco--it doesn't, but I was trying to be consistent elsewhere where for e.g. `ca.month()` returns a `i8`, so now that we have `new_from_parts(...)` (essentially a constructor) it made sense to me that the `month` input should be a `i8` as well. If I remove that I end up having to throw in a bunch of casts elsewhere that look a bit ugly. In `dt.replace` we have use the `.month()` that already exists (which is an i8). It felt a little more natural to use i8 but I can revert if you'd like.",
        "pr_file_module": null
      },
      {
        "comment_id": "1860727081",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 19708,
        "pr_file": "crates/polars-plan/src/dsl/function_expr/temporal.rs",
        "discussion_id": "1845334183",
        "commented_code": "@@ -95,91 +94,61 @@ pub(super) fn datetime(\n     }\n     let year = year.i32()?;\n \n-    let mut month = month.cast(&DataType::UInt32)?;\n+    let mut month = month.cast(&DataType::Int8)?;",
        "comment_created_at": "2024-11-27T14:07:56+00:00",
        "comment_author": "mcrumiller",
        "comment_body": "@MarcoGorelli what's your opinion here? Should I revert and keep it to u32?",
        "pr_file_module": null
      },
      {
        "comment_id": "1870028573",
        "repo_full_name": "pola-rs/polars",
        "pr_number": 19708,
        "pr_file": "crates/polars-plan/src/dsl/function_expr/temporal.rs",
        "discussion_id": "1845334183",
        "commented_code": "@@ -95,91 +94,61 @@ pub(super) fn datetime(\n     }\n     let year = year.i32()?;\n \n-    let mut month = month.cast(&DataType::UInt32)?;\n+    let mut month = month.cast(&DataType::Int8)?;",
        "comment_created_at": "2024-12-04T17:55:52+00:00",
        "comment_author": "MarcoGorelli",
        "comment_body": "sure no objections to this",
        "pr_file_module": null
      }
    ]
  }
]