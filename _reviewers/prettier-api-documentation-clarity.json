[
  {
    "discussion_id": "2034830129",
    "pr_number": 17331,
    "pr_file": "changelog_unreleased/api/17331.md",
    "created_at": "2025-04-09T08:55:00+00:00",
    "commented_code": "+#### Add `isSupported` function support for `languages` API (#17331 by @JounQin)\n+\n+Previously, `languages` API for custom plugin only supported to infer parser based on base `filename`, only exactly matched `filename` is supported. This PR added `isSupported` function with `file: string` as parameter to check if the `file` is supported by the plugin, `file` could be plain string path or url string like `file:///C:/test.txt`.",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "2034830129",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17331,
        "pr_file": "changelog_unreleased/api/17331.md",
        "discussion_id": "2034830129",
        "commented_code": "@@ -0,0 +1,13 @@\n+#### Add `isSupported` function support for `languages` API (#17331 by @JounQin)\n+\n+Previously, `languages` API for custom plugin only supported to infer parser based on base `filename`, only exactly matched `filename` is supported. This PR added `isSupported` function with `file: string` as parameter to check if the `file` is supported by the plugin, `file` could be plain string path or url string like `file:///C:/test.txt`.",
        "comment_created_at": "2025-04-09T08:55:00+00:00",
        "comment_author": "fisker",
        "comment_body": "```suggestion\r\nPreviously, `languages` API for custom plugin only supported to infer parser based on the file basename or extension.\r\n\r\nPrettier main added `isSupported: (file: string) => boolean` function to allow plugin check if file is supported based on the full path (eg: files in a specific directory), the `file` parameter could be a normal path or a url string like `file:///C:/test.txt`.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2036469420",
    "pr_number": 17331,
    "pr_file": "changelog_unreleased/api/17331.md",
    "created_at": "2025-04-10T04:22:37+00:00",
    "commented_code": "+#### Add `isSupported` function support for `languages` API (#17331 by @JounQin)\n+\n+Previously, `languages` API for custom plugin only supported to infer parser based on the file basename or extension.\n+\n+Prettier main added `isSupported: (file: string) => boolean` function to allow plugin check if file is supported based on the full path (eg: files in a specific directory), the `file` parameter could be a normal path or a url string like `file:///C:/test.txt`.",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "2036469420",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17331,
        "pr_file": "changelog_unreleased/api/17331.md",
        "discussion_id": "2036469420",
        "commented_code": "@@ -0,0 +1,15 @@\n+#### Add `isSupported` function support for `languages` API (#17331 by @JounQin)\n+\n+Previously, `languages` API for custom plugin only supported to infer parser based on the file basename or extension.\n+\n+Prettier main added `isSupported: (file: string) => boolean` function to allow plugin check if file is supported based on the full path (eg: files in a specific directory), the `file` parameter could be a normal path or a url string like `file:///C:/test.txt`.",
        "comment_created_at": "2025-04-10T04:22:37+00:00",
        "comment_author": "JounQin",
        "comment_body": "@sosukesuzuki How about:\r\n\r\n```suggestion\r\nPrettier main added `isSupported: (file: string) => boolean` function to allow plugin check if file is supported based on the full path (eg: files in a specific directory), the `file` parameter could be a normal path or a url string like `file:///C:/test.txt`.\r\n\r\nIf no `isSupported` provided, it just behaviors the same way as before.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2036492177",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17331,
        "pr_file": "changelog_unreleased/api/17331.md",
        "discussion_id": "2036469420",
        "commented_code": "@@ -0,0 +1,15 @@\n+#### Add `isSupported` function support for `languages` API (#17331 by @JounQin)\n+\n+Previously, `languages` API for custom plugin only supported to infer parser based on the file basename or extension.\n+\n+Prettier main added `isSupported: (file: string) => boolean` function to allow plugin check if file is supported based on the full path (eg: files in a specific directory), the `file` parameter could be a normal path or a url string like `file:///C:/test.txt`.",
        "comment_created_at": "2025-04-10T04:54:41+00:00",
        "comment_author": "fisker",
        "comment_body": "`smae` -> `same`",
        "pr_file_module": null
      },
      {
        "comment_id": "2036523426",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17331,
        "pr_file": "changelog_unreleased/api/17331.md",
        "discussion_id": "2036469420",
        "commented_code": "@@ -0,0 +1,15 @@\n+#### Add `isSupported` function support for `languages` API (#17331 by @JounQin)\n+\n+Previously, `languages` API for custom plugin only supported to infer parser based on the file basename or extension.\n+\n+Prettier main added `isSupported: (file: string) => boolean` function to allow plugin check if file is supported based on the full path (eg: files in a specific directory), the `file` parameter could be a normal path or a url string like `file:///C:/test.txt`.",
        "comment_created_at": "2025-04-10T05:19:53+00:00",
        "comment_author": "JounQin",
        "comment_body": "> `smae` -> `same`\r\n\r\nSuggestion changed.",
        "pr_file_module": null
      },
      {
        "comment_id": "2037531264",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17331,
        "pr_file": "changelog_unreleased/api/17331.md",
        "discussion_id": "2036469420",
        "commented_code": "@@ -0,0 +1,15 @@\n+#### Add `isSupported` function support for `languages` API (#17331 by @JounQin)\n+\n+Previously, `languages` API for custom plugin only supported to infer parser based on the file basename or extension.\n+\n+Prettier main added `isSupported: (file: string) => boolean` function to allow plugin check if file is supported based on the full path (eg: files in a specific directory), the `file` parameter could be a normal path or a url string like `file:///C:/test.txt`.",
        "comment_created_at": "2025-04-10T14:14:17+00:00",
        "comment_author": "JounQin",
        "comment_body": "Should I just commit the suggestion? @fisker @sosukesuzuki ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1424541005",
    "pr_number": 15770,
    "pr_file": "docs/plugins.md",
    "created_at": "2023-12-12T20:29:20+00:00",
    "commented_code": "The signature of the `parse` function is:\n \n ```ts\n+function parse(text: string): Promise<AST> | AST;",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1424541005",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15770,
        "pr_file": "docs/plugins.md",
        "discussion_id": "1424541005",
        "commented_code": "@@ -118,6 +118,7 @@ export const parsers = {\n The signature of the `parse` function is:\n \n ```ts\n+function parse(text: string): Promise<AST> | AST;",
        "comment_created_at": "2023-12-12T20:29:20+00:00",
        "comment_author": "fisker",
        "comment_body": "I think this signals what the arguments this function will receive, I don't think we should add this, many plugins define the following functions/methods with less parameters, we didn't mark they are optional. I'm not familiar with  TS, teach me if there is a good explanation.",
        "pr_file_module": null
      },
      {
        "comment_id": "1424553344",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15770,
        "pr_file": "docs/plugins.md",
        "discussion_id": "1424541005",
        "commented_code": "@@ -118,6 +118,7 @@ export const parsers = {\n The signature of the `parse` function is:\n \n ```ts\n+function parse(text: string): Promise<AST> | AST;",
        "comment_created_at": "2023-12-12T20:43:13+00:00",
        "comment_author": "ExplodingCabbage",
        "comment_body": "So, basically here I'm saying that there are TWO valid ways to call `parse`:\r\n\r\n1. You can call it with a single argument, `parse(text)`, OR\r\n2. You can call it with two arguments, `parse(text, options)`\r\n\r\nPrior to this PR, the codebase can't make up its mind about whether way 1 above is supposed to be allowed or not. The [old declaration of the `Parser` interface](https://github.com/prettier/prettier/pull/15770/files#diff-619cc2239a7eb4ef05041767e6ab0e4fb069e98ee9d2c83c2d8e1865c475e141L450) said that the `options` argument was mandatory and that you cannot just call `parse(text)`. But *all* of our actual implementations of `parse` supported calling `parse(text)` one way or another (either they checked for options being null and handled that case, or they had a default argument of `{}`, both of which effectively mean you can call `parse(text)` without providing a second argument), and the unit test that I restore in this PR specifically tested that it's possible to call `parse(text)` without a second argument.\r\n\r\nClearly this inconsistency should be resolved one way or another. *Either* the previous types were wrong and needed changing to say that it's okay to call `parse(text)` (that's what I've assumed in this PR), *or* the test where we were calling `parse(text)` is wrong and should be calling `parse(text, options)` instead.",
        "pr_file_module": null
      },
      {
        "comment_id": "1424560659",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15770,
        "pr_file": "docs/plugins.md",
        "discussion_id": "1424541005",
        "commented_code": "@@ -118,6 +118,7 @@ export const parsers = {\n The signature of the `parse` function is:\n \n ```ts\n+function parse(text: string): Promise<AST> | AST;",
        "comment_created_at": "2023-12-12T20:51:39+00:00",
        "comment_author": "fisker",
        "comment_body": "`parse(test)` was added by me, but I forgot where it is... ",
        "pr_file_module": null
      },
      {
        "comment_id": "1424564803",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15770,
        "pr_file": "docs/plugins.md",
        "discussion_id": "1424541005",
        "commented_code": "@@ -118,6 +118,7 @@ export const parsers = {\n The signature of the `parse` function is:\n \n ```ts\n+function parse(text: string): Promise<AST> | AST;",
        "comment_created_at": "2023-12-12T20:56:25+00:00",
        "comment_author": "fisker",
        "comment_body": "Found, https://github.com/prettier/prettier/issues/11888, we don't really support `parse(text)`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1181094927",
    "pr_number": 14759,
    "pr_file": "docs/plugins.md",
    "created_at": "2023-04-29T15:47:33+00:00",
    "commented_code": "```json\n   {\n-    \"pluginSearchDirs\": [\"./dir-with-plugins\"],\n     \"plugins\": [\"prettier-plugin-foo\"]\n   }\n   ```\n \n-`pluginSearchDirs` and `plugins` are independent and one does not require the other.\n-\n-The paths that are provided to `pluginSearchDirs` will be searched for `@prettier/plugin-*`, `prettier-plugin-*`, and `@*/prettier-plugin-*`. For instance, these can be your project directory, a `node_modules` directory, the location of global npm modules, or any arbitrary directory that contains plugins.\n-\n-Strings provided to `plugins` are ultimately passed to `require()`, so you can provide a module/package name, a path, or anything else `require()` takes. (`pluginSearchDirs` works the same way. That is, valid plugin paths that it finds are passed to `require()`.)\n-\n-To turn off plugin autoloading, use `--no-plugin-search` when using Prettier CLI or add `{ pluginSearchDirs: false }` to options in `prettier.format()` or to the config file.\n+Strings provided to `plugins` are ultimately passed to `import()`, so you can provide a module/package name, a path, or anything else `import()` takes.",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1181094927",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14759,
        "pr_file": "docs/plugins.md",
        "discussion_id": "1181094927",
        "commented_code": "@@ -35,18 +30,11 @@ When plugins cannot be found automatically, you can load them with:\n \n   ```json\n   {\n-    \"pluginSearchDirs\": [\"./dir-with-plugins\"],\n     \"plugins\": [\"prettier-plugin-foo\"]\n   }\n   ```\n \n-`pluginSearchDirs` and `plugins` are independent and one does not require the other.\n-\n-The paths that are provided to `pluginSearchDirs` will be searched for `@prettier/plugin-*`, `prettier-plugin-*`, and `@*/prettier-plugin-*`. For instance, these can be your project directory, a `node_modules` directory, the location of global npm modules, or any arbitrary directory that contains plugins.\n-\n-Strings provided to `plugins` are ultimately passed to `require()`, so you can provide a module/package name, a path, or anything else `require()` takes. (`pluginSearchDirs` works the same way. That is, valid plugin paths that it finds are passed to `require()`.)\n-\n-To turn off plugin autoloading, use `--no-plugin-search` when using Prettier CLI or add `{ pluginSearchDirs: false }` to options in `prettier.format()` or to the config file.\n+Strings provided to `plugins` are ultimately passed to `import()`, so you can provide a module/package name, a path, or anything else `import()` takes.",
        "comment_created_at": "2023-04-29T15:47:33+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "Nits for Node.js beginners\r\n\r\n```suggestion\r\nStrings provided to `plugins` are ultimately passed to [`import()` expression](https://nodejs.org/api/esm.html#import-expressions), so you can provide a module/package name, a path, or anything else `import()` takes.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]