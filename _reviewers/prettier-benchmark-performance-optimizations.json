[
  {
    "discussion_id": "889526426",
    "pr_number": 12800,
    "pr_file": "changelog_unreleased/cli/12800.md",
    "created_at": "2022-06-04T12:43:13+00:00",
    "commented_code": "+#### [HIGILIGHT]Add `--cache` and `--cache-strategy` CLI option (#12800 by @sosukesuzuki)\n+\n+Two new CLI options have been added for a caching system similar to [ESLint's one](https://eslint.org/docs/user-guide/command-line-interface#caching).\n+\n+##### `--cache`\n+\n+If this option is enabled, the following values are used as cache keys and the file is formatted only if one of them is changed.\n+\n+- Options\n+- Node.js version\n+- (if `--cache-strategy` is `metadata`) file metadata, such as timestamps\n+- (if `--cache-strategy` is `content`) content of the file\n+\n+```bash\n+prettier --write --cache src\n+```\n+\n+##### `--cache-strategy`\n+\n+Strategy for the cache to use for detecting changed files. Can be either `metadata` or `content`. If no strategy is specified, `metadata` will be used.\n+\n+```bash\n+prettier --write --cache --cache-strategy content src\n+```",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "889526426",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "changelog_unreleased/cli/12800.md",
        "discussion_id": "889526426",
        "commented_code": "@@ -0,0 +1,24 @@\n+#### [HIGILIGHT]Add `--cache` and `--cache-strategy` CLI option (#12800 by @sosukesuzuki)\n+\n+Two new CLI options have been added for a caching system similar to [ESLint's one](https://eslint.org/docs/user-guide/command-line-interface#caching).\n+\n+##### `--cache`\n+\n+If this option is enabled, the following values are used as cache keys and the file is formatted only if one of them is changed.\n+\n+- Options\n+- Node.js version\n+- (if `--cache-strategy` is `metadata`) file metadata, such as timestamps\n+- (if `--cache-strategy` is `content`) content of the file\n+\n+```bash\n+prettier --write --cache src\n+```\n+\n+##### `--cache-strategy`\n+\n+Strategy for the cache to use for detecting changed files. Can be either `metadata` or `content`. If no strategy is specified, `metadata` will be used.\n+\n+```bash\n+prettier --write --cache --cache-strategy content src\n+```",
        "comment_created_at": "2022-06-04T12:43:13+00:00",
        "comment_author": "lydell",
        "comment_body": "Should we help users choosing by having some extra text like ESLint?\r\n\r\nhttps://eslint.org/docs/user-guide/command-line-interface#--cache-strategy\r\n\r\n> The content strategy can be useful in cases where the modification time of your files change even if their contents have not. For example, this can happen during git operations like git clone because git does not track file modification time.\r\n\r\nIs another use case CI?\r\n\r\nBtw, what is the reason for having both metadata and content? Why not always content? Is it performance? What\u2019s the performance difference? It feels like there\u2019s a tradeoff here that we want to document.\r\n\r\nEdit: Oops, I meant to comment on the CLI docs, not the changelog.",
        "pr_file_module": null
      },
      {
        "comment_id": "889537786",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "changelog_unreleased/cli/12800.md",
        "discussion_id": "889526426",
        "commented_code": "@@ -0,0 +1,24 @@\n+#### [HIGILIGHT]Add `--cache` and `--cache-strategy` CLI option (#12800 by @sosukesuzuki)\n+\n+Two new CLI options have been added for a caching system similar to [ESLint's one](https://eslint.org/docs/user-guide/command-line-interface#caching).\n+\n+##### `--cache`\n+\n+If this option is enabled, the following values are used as cache keys and the file is formatted only if one of them is changed.\n+\n+- Options\n+- Node.js version\n+- (if `--cache-strategy` is `metadata`) file metadata, such as timestamps\n+- (if `--cache-strategy` is `content`) content of the file\n+\n+```bash\n+prettier --write --cache src\n+```\n+\n+##### `--cache-strategy`\n+\n+Strategy for the cache to use for detecting changed files. Can be either `metadata` or `content`. If no strategy is specified, `metadata` will be used.\n+\n+```bash\n+prettier --write --cache --cache-strategy content src\n+```",
        "comment_created_at": "2022-06-04T13:43:56+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "We originally did not intend to add the `--cache-strategy` option and always intended to use `metadata`. However, following a comment from @7rulnik ( https://github.com/prettier/prettier/pull/12800#discussion_r878044023 ), we added the `--cache-strategy` option for CI use cases so that `content` can be used.\r\n\r\nI had thought there was a tradeoff between `metadata` and `content` as follows:\r\n\r\n|        | `metadata`  | `content`   |\r\n| ------ | ----------- | ----------- |\r\n| for CI | :no_good:   | :ok_person: |\r\n| perf   | :ok_person: | :no_good:   |\r\n\r\n\r\n\r\nHowever, following your comment, I investigated and found that there is actually not much difference in performance between the two.\r\n\r\n***\r\n\r\n`--cache-strategy=metadata`:\r\n\r\n```\r\n$ ./bin/prettier.js . \"!test*\" --check --write --cache\r\nChecking formatting...\r\nAll matched files use Prettier code style!\r\n\u2728  Done in 16.51s.\r\n\r\n$ ./bin/prettier.js . \"!test*\" --check --write --cache\r\nChecking formatting...\r\nAll matched files use Prettier code style!\r\n\u2728  Done in 6.56s.\r\n```\r\n\r\n`--cache-strategy=content`:\r\n\r\n```\r\n$ ./bin/prettier.js . \"!test*\" --check --write --cache --cache-strategy=content\r\nChecking formatting...\r\nAll matched files use Prettier code style!\r\n\u2728  Done in 16.46s.\r\n\r\n$ ./bin/prettier.js . \"!test*\" --check --write --cache --cache-strategy=content\r\nChecking formatting...\r\nAll matched files use Prettier code style!\r\n\u2728  Done in 6.81s.\r\n```\r\n\r\n***\r\n\r\nFrom this result I think we can remove the `--cache-strategy` option and always use `content`.\r\n\r\nWhat do you think? @7rulnik, @fisker",
        "pr_file_module": null
      },
      {
        "comment_id": "889539981",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "changelog_unreleased/cli/12800.md",
        "discussion_id": "889526426",
        "commented_code": "@@ -0,0 +1,24 @@\n+#### [HIGILIGHT]Add `--cache` and `--cache-strategy` CLI option (#12800 by @sosukesuzuki)\n+\n+Two new CLI options have been added for a caching system similar to [ESLint's one](https://eslint.org/docs/user-guide/command-line-interface#caching).\n+\n+##### `--cache`\n+\n+If this option is enabled, the following values are used as cache keys and the file is formatted only if one of them is changed.\n+\n+- Options\n+- Node.js version\n+- (if `--cache-strategy` is `metadata`) file metadata, such as timestamps\n+- (if `--cache-strategy` is `content`) content of the file\n+\n+```bash\n+prettier --write --cache src\n+```\n+\n+##### `--cache-strategy`\n+\n+Strategy for the cache to use for detecting changed files. Can be either `metadata` or `content`. If no strategy is specified, `metadata` will be used.\n+\n+```bash\n+prettier --write --cache --cache-strategy content src\n+```",
        "comment_created_at": "2022-06-04T13:51:50+00:00",
        "comment_author": "alexander-akait",
        "comment_body": "Timestamp should be more faster than content strategy, it is very strange that we have almost the same indicators, can you use https://benchmarkjs.com/ and calculate mean? Maybe we have a bug somewhere?",
        "pr_file_module": null
      },
      {
        "comment_id": "889600082",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "changelog_unreleased/cli/12800.md",
        "discussion_id": "889526426",
        "commented_code": "@@ -0,0 +1,24 @@\n+#### [HIGILIGHT]Add `--cache` and `--cache-strategy` CLI option (#12800 by @sosukesuzuki)\n+\n+Two new CLI options have been added for a caching system similar to [ESLint's one](https://eslint.org/docs/user-guide/command-line-interface#caching).\n+\n+##### `--cache`\n+\n+If this option is enabled, the following values are used as cache keys and the file is formatted only if one of them is changed.\n+\n+- Options\n+- Node.js version\n+- (if `--cache-strategy` is `metadata`) file metadata, such as timestamps\n+- (if `--cache-strategy` is `content`) content of the file\n+\n+```bash\n+prettier --write --cache src\n+```\n+\n+##### `--cache-strategy`\n+\n+Strategy for the cache to use for detecting changed files. Can be either `metadata` or `content`. If no strategy is specified, `metadata` will be used.\n+\n+```bash\n+prettier --write --cache --cache-strategy content src\n+```",
        "comment_created_at": "2022-06-04T18:01:16+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "I created following script:\r\n\r\n<details>\r\n  <summary>test.benchmark.js</summary>\r\n  \r\n```js\r\nconst Benchmark = require(\"benchmark\");\r\nconst { execaSync } = require(\"./vendors/execa\");\r\n\r\nconst runWithMetadata = () =>\r\n  execaSync(\"./bin/prettier.js\", [\".\", \"!test*\", \"--check\", \"--cache\"]);\r\n\r\nconst runWithContent = () =>\r\n  execaSync(\"./bin/prettier.js\", [\r\n    \".\",\r\n    \"!test*\",\r\n    \"--check\",\r\n    \"--cache\",\r\n    \"--cache-strategy\",\r\n    \"content\",\r\n  ]);\r\n\r\nconst clearCache = () =>\r\n  execaSync(\"rm\", [\"-f\", \"./node_modules/.cache/prettier/.prettier-cache\"]);\r\n\r\nfunction runSuite01() {\r\n  const suite01 = new Benchmark.Suite();\r\n\r\n  clearCache();\r\n  runWithMetadata();\r\n\r\n  suite01\r\n    .add(\"--cache-strategy=metadata\", function () {\r\n      runWithMetadata();\r\n    })\r\n    .on(\"cycle\", function (event) {\r\n      console.log(String(event.target));\r\n    })\r\n    .run();\r\n}\r\n\r\nfunction runSuite02() {\r\n  const suit02 = new Benchmark.Suite();\r\n\r\n  clearCache();\r\n  runWithContent();\r\n\r\n  suit02\r\n    .add(\"--cache-strategy=content\", function () {\r\n      runWithContent();\r\n    })\r\n    .on(\"cycle\", function (event) {\r\n      console.log(String(event.target));\r\n    })\r\n    .run();\r\n}\r\n\r\nrunSuite01();\r\nrunSuite02();\r\n\r\n```\r\n\r\n</details>\r\n\r\nThe results were as follows:\r\n\r\n```\r\n--cache-strategy=metadata x 0.30 ops/sec \u00b16.05% (5 runs sampled)\r\n--cache-strategy=content x 0.30 ops/sec \u00b10.94% (5 runs sampled)\r\n```\r\n\r\nI ran several other benchmarks and found no significant differences. This is strange.\r\n\r\nBut, ESLint cache (Almost the same mechanism as our cache) with similar results.\r\n\r\n***\r\n\r\n**ESLint with `--cache-strategy=metadata`:**\r\n\r\n```\r\n$ cross-env EFF_NO_LINK_RULES=true eslint . --format friendly --cache --cache-strategy=metadata\r\n\u2728  Done in 16.27s.\r\n\r\n$ cross-env EFF_NO_LINK_RULES=true eslint . --format friendly --cache --cache-strategy=metadata\r\n\u2728  Done in 3.05s.\r\n```\r\n\r\n**ESLint with `--cache-strategy=content`:**\r\n\r\n```\r\n$ cross-env EFF_NO_LINK_RULES=true eslint . --format friendly --cache --cache-strategy=content\r\n\u2728  Done in 13.69s.\r\n\r\n$ cross-env EFF_NO_LINK_RULES=true eslint . --format friendly --cache --cache-strategy=content\r\n\u2728  Done in 2.96s.\r\n```\r\n\r\n***\r\n\r\nI ran the benchmark using Prettier's source code this time, but the results may be different for projects where each file is more huge.",
        "pr_file_module": null
      },
      {
        "comment_id": "889601809",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "changelog_unreleased/cli/12800.md",
        "discussion_id": "889526426",
        "commented_code": "@@ -0,0 +1,24 @@\n+#### [HIGILIGHT]Add `--cache` and `--cache-strategy` CLI option (#12800 by @sosukesuzuki)\n+\n+Two new CLI options have been added for a caching system similar to [ESLint's one](https://eslint.org/docs/user-guide/command-line-interface#caching).\n+\n+##### `--cache`\n+\n+If this option is enabled, the following values are used as cache keys and the file is formatted only if one of them is changed.\n+\n+- Options\n+- Node.js version\n+- (if `--cache-strategy` is `metadata`) file metadata, such as timestamps\n+- (if `--cache-strategy` is `content`) content of the file\n+\n+```bash\n+prettier --write --cache src\n+```\n+\n+##### `--cache-strategy`\n+\n+Strategy for the cache to use for detecting changed files. Can be either `metadata` or `content`. If no strategy is specified, `metadata` will be used.\n+\n+```bash\n+prettier --write --cache --cache-strategy content src\n+```",
        "comment_created_at": "2022-06-04T18:21:49+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "(Even in the Babel source code, there was little difference in speed between `metadata` and `content`.)",
        "pr_file_module": null
      },
      {
        "comment_id": "889602368",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "changelog_unreleased/cli/12800.md",
        "discussion_id": "889526426",
        "commented_code": "@@ -0,0 +1,24 @@\n+#### [HIGILIGHT]Add `--cache` and `--cache-strategy` CLI option (#12800 by @sosukesuzuki)\n+\n+Two new CLI options have been added for a caching system similar to [ESLint's one](https://eslint.org/docs/user-guide/command-line-interface#caching).\n+\n+##### `--cache`\n+\n+If this option is enabled, the following values are used as cache keys and the file is formatted only if one of them is changed.\n+\n+- Options\n+- Node.js version\n+- (if `--cache-strategy` is `metadata`) file metadata, such as timestamps\n+- (if `--cache-strategy` is `content`) content of the file\n+\n+```bash\n+prettier --write --cache src\n+```\n+\n+##### `--cache-strategy`\n+\n+Strategy for the cache to use for detecting changed files. Can be either `metadata` or `content`. If no strategy is specified, `metadata` will be used.\n+\n+```bash\n+prettier --write --cache --cache-strategy content src\n+```",
        "comment_created_at": "2022-06-04T18:27:33+00:00",
        "comment_author": "alexander-akait",
        "comment_body": "Based on benchmark cold start is faster for `metadata`, but yes, it can be different for projects, not sure how often big projects run prettier on whole project (where `metadata` make sense for perf reasons), but maybe we should keep both values (i.e. `content` and `metadata`)",
        "pr_file_module": null
      },
      {
        "comment_id": "889602901",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "changelog_unreleased/cli/12800.md",
        "discussion_id": "889526426",
        "commented_code": "@@ -0,0 +1,24 @@\n+#### [HIGILIGHT]Add `--cache` and `--cache-strategy` CLI option (#12800 by @sosukesuzuki)\n+\n+Two new CLI options have been added for a caching system similar to [ESLint's one](https://eslint.org/docs/user-guide/command-line-interface#caching).\n+\n+##### `--cache`\n+\n+If this option is enabled, the following values are used as cache keys and the file is formatted only if one of them is changed.\n+\n+- Options\n+- Node.js version\n+- (if `--cache-strategy` is `metadata`) file metadata, such as timestamps\n+- (if `--cache-strategy` is `content`) content of the file\n+\n+```bash\n+prettier --write --cache src\n+```\n+\n+##### `--cache-strategy`\n+\n+Strategy for the cache to use for detecting changed files. Can be either `metadata` or `content`. If no strategy is specified, `metadata` will be used.\n+\n+```bash\n+prettier --write --cache --cache-strategy content src\n+```",
        "comment_created_at": "2022-06-04T18:33:49+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "To maintain both `--cache-strategy=content` and `--cache-strategy=metadata` isn't hard. So I think we can keep both.",
        "pr_file_module": null
      },
      {
        "comment_id": "889603390",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "changelog_unreleased/cli/12800.md",
        "discussion_id": "889526426",
        "commented_code": "@@ -0,0 +1,24 @@\n+#### [HIGILIGHT]Add `--cache` and `--cache-strategy` CLI option (#12800 by @sosukesuzuki)\n+\n+Two new CLI options have been added for a caching system similar to [ESLint's one](https://eslint.org/docs/user-guide/command-line-interface#caching).\n+\n+##### `--cache`\n+\n+If this option is enabled, the following values are used as cache keys and the file is formatted only if one of them is changed.\n+\n+- Options\n+- Node.js version\n+- (if `--cache-strategy` is `metadata`) file metadata, such as timestamps\n+- (if `--cache-strategy` is `content`) content of the file\n+\n+```bash\n+prettier --write --cache src\n+```\n+\n+##### `--cache-strategy`\n+\n+Strategy for the cache to use for detecting changed files. Can be either `metadata` or `content`. If no strategy is specified, `metadata` will be used.\n+\n+```bash\n+prettier --write --cache --cache-strategy content src\n+```",
        "comment_created_at": "2022-06-04T18:39:39+00:00",
        "comment_author": "lydell",
        "comment_body": "But should we default to content?\r\n\r\nHow big does a project need to be for metadata to make sense?",
        "pr_file_module": null
      },
      {
        "comment_id": "889691791",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "changelog_unreleased/cli/12800.md",
        "discussion_id": "889526426",
        "commented_code": "@@ -0,0 +1,24 @@\n+#### [HIGILIGHT]Add `--cache` and `--cache-strategy` CLI option (#12800 by @sosukesuzuki)\n+\n+Two new CLI options have been added for a caching system similar to [ESLint's one](https://eslint.org/docs/user-guide/command-line-interface#caching).\n+\n+##### `--cache`\n+\n+If this option is enabled, the following values are used as cache keys and the file is formatted only if one of them is changed.\n+\n+- Options\n+- Node.js version\n+- (if `--cache-strategy` is `metadata`) file metadata, such as timestamps\n+- (if `--cache-strategy` is `content`) content of the file\n+\n+```bash\n+prettier --write --cache src\n+```\n+\n+##### `--cache-strategy`\n+\n+Strategy for the cache to use for detecting changed files. Can be either `metadata` or `content`. If no strategy is specified, `metadata` will be used.\n+\n+```bash\n+prettier --write --cache --cache-strategy content src\n+```",
        "comment_created_at": "2022-06-05T13:16:16+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "I created new benchmark script https://gist.github.com/sosukesuzuki/ded586261381a6261e02a69b188a8e44\r\n\r\nResults ware follows:\r\n\r\n```\r\n======= 100 lines, --cache-strategy=metadata, 0ms ============\r\n======= 1000 lines, --cache-strategy=metadata, 1ms ============\r\n======= 10000 lines, --cache-strategy=metadata, 1ms ============\r\n======= 100000 lines, --cache-strategy=metadata, 0ms ============\r\n======= 100 lines, --cache-strategy=content, 17ms ============\r\n======= 1000 lines, --cache-strategy=content, 12ms ============\r\n======= 10000 lines, --cache-strategy=content, 13ms ============\r\n======= 100000 lines, --cache-strategy=content, 12ms ============\r\n```\r\n\r\nThis benchmark script measures execution time when cache is enabled. There is only one file of interest, and each test combines the number of lines in the file with the cache strategy.\r\n\r\nAccording to this, performance still seems to be better with `--cache-strategy=metadata`(However, the number of lines does not seem to matter much). I think the reason why the previously posted benchmarks did not show a valid difference is probably due to overhead in areas other than formatting.",
        "pr_file_module": null
      },
      {
        "comment_id": "890334296",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "changelog_unreleased/cli/12800.md",
        "discussion_id": "889526426",
        "commented_code": "@@ -0,0 +1,24 @@\n+#### [HIGILIGHT]Add `--cache` and `--cache-strategy` CLI option (#12800 by @sosukesuzuki)\n+\n+Two new CLI options have been added for a caching system similar to [ESLint's one](https://eslint.org/docs/user-guide/command-line-interface#caching).\n+\n+##### `--cache`\n+\n+If this option is enabled, the following values are used as cache keys and the file is formatted only if one of them is changed.\n+\n+- Options\n+- Node.js version\n+- (if `--cache-strategy` is `metadata`) file metadata, such as timestamps\n+- (if `--cache-strategy` is `content`) content of the file\n+\n+```bash\n+prettier --write --cache src\n+```\n+\n+##### `--cache-strategy`\n+\n+Strategy for the cache to use for detecting changed files. Can be either `metadata` or `content`. If no strategy is specified, `metadata` will be used.\n+\n+```bash\n+prettier --write --cache --cache-strategy content src\n+```",
        "comment_created_at": "2022-06-06T16:40:14+00:00",
        "comment_author": "lydell",
        "comment_body": "Saving 10-20 ms does not convince me that the option is worth it, but if you think we should have it that\u2019s ok with me.\r\n\r\nBut I definitely think we should default to content.",
        "pr_file_module": null
      },
      {
        "comment_id": "894567190",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "changelog_unreleased/cli/12800.md",
        "discussion_id": "889526426",
        "commented_code": "@@ -0,0 +1,24 @@\n+#### [HIGILIGHT]Add `--cache` and `--cache-strategy` CLI option (#12800 by @sosukesuzuki)\n+\n+Two new CLI options have been added for a caching system similar to [ESLint's one](https://eslint.org/docs/user-guide/command-line-interface#caching).\n+\n+##### `--cache`\n+\n+If this option is enabled, the following values are used as cache keys and the file is formatted only if one of them is changed.\n+\n+- Options\n+- Node.js version\n+- (if `--cache-strategy` is `metadata`) file metadata, such as timestamps\n+- (if `--cache-strategy` is `content`) content of the file\n+\n+```bash\n+prettier --write --cache src\n+```\n+\n+##### `--cache-strategy`\n+\n+Strategy for the cache to use for detecting changed files. Can be either `metadata` or `content`. If no strategy is specified, `metadata` will be used.\n+\n+```bash\n+prettier --write --cache --cache-strategy content src\n+```",
        "comment_created_at": "2022-06-10T14:01:16+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "> But I definitely think we should default to content.\r\n\r\n@lydell  Why you prefer `content`? Because it works on CI?",
        "pr_file_module": null
      },
      {
        "comment_id": "895028653",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "changelog_unreleased/cli/12800.md",
        "discussion_id": "889526426",
        "commented_code": "@@ -0,0 +1,24 @@\n+#### [HIGILIGHT]Add `--cache` and `--cache-strategy` CLI option (#12800 by @sosukesuzuki)\n+\n+Two new CLI options have been added for a caching system similar to [ESLint's one](https://eslint.org/docs/user-guide/command-line-interface#caching).\n+\n+##### `--cache`\n+\n+If this option is enabled, the following values are used as cache keys and the file is formatted only if one of them is changed.\n+\n+- Options\n+- Node.js version\n+- (if `--cache-strategy` is `metadata`) file metadata, such as timestamps\n+- (if `--cache-strategy` is `content`) content of the file\n+\n+```bash\n+prettier --write --cache src\n+```\n+\n+##### `--cache-strategy`\n+\n+Strategy for the cache to use for detecting changed files. Can be either `metadata` or `content`. If no strategy is specified, `metadata` will be used.\n+\n+```bash\n+prettier --write --cache --cache-strategy content src\n+```",
        "comment_created_at": "2022-06-11T13:49:53+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "I've updated the documentation to use `content` by default. For normal projects, there is no performance difference, and `content` is more convenient.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1686496929",
    "pr_number": 13315,
    "pr_file": "changelog_unreleased/api/13315.md",
    "created_at": "2024-07-22T12:50:09+00:00",
    "commented_code": "+#### Stop mutate doc in `prettier.doc.printDocToString` (#13315 by @fisker)\n+\n+For performance reason, `prettier.doc.printDocToString` mutates `.parts` of the [`fill`](https://github.com/prettier/prettier/blob/main/commands.md#fill) command during print, it's now [pure function](https://en.wikipedia.org/wiki/Pure_function) since Prettier main.",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1686496929",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13315,
        "pr_file": "changelog_unreleased/api/13315.md",
        "discussion_id": "1686496929",
        "commented_code": "@@ -0,0 +1,3 @@\n+#### Stop mutate doc in `prettier.doc.printDocToString` (#13315 by @fisker)\n+\n+For performance reason, `prettier.doc.printDocToString` mutates `.parts` of the [`fill`](https://github.com/prettier/prettier/blob/main/commands.md#fill) command during print, it's now [pure function](https://en.wikipedia.org/wiki/Pure_function) since Prettier main.",
        "comment_created_at": "2024-07-22T12:50:09+00:00",
        "comment_author": "kachkaev",
        "comment_body": "```suggestion\r\nFor performance reason, `prettier.doc.printDocToString` used to mutate `.parts` of the [`fill`](https://github.com/prettier/prettier/blob/main/commands.md#fill) command during print. It was converted to a [pure function](https://en.wikipedia.org/wiki/Pure_function) to ensure output correctness.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]