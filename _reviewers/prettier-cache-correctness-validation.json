[
  {
    "discussion_id": "869252464",
    "pr_number": 12800,
    "pr_file": "src/cli/format-results-cache.js",
    "created_at": "2022-05-10T13:41:29+00:00",
    "commented_code": "+\"use strict\";\n+\n+// Inspired by LintResultsCache from ESLint\n+// https://github.com/eslint/eslint/blob/c2d0a830754b6099a3325e6d3348c3ba983a677a/lib/cli-engine/lint-result-cache.js\n+\n+const fileEntryCache = require(\"file-entry-cache\");\n+const stringify = require(\"fast-json-stable-stringify\");\n+// eslint-disable-next-line no-restricted-modules\n+const { version: prettierVersion } = require(\"../index.js\");\n+const { createHash } = require(\"./utils.js\");\n+\n+const optionsHashCache = new WeakMap();\n+const nodeVersion = process && process.version;\n+\n+/**\n+ * @param {*} options\n+ * @returns {string}\n+ */\n+function getHashOfOptions(options) {\n+  if (optionsHashCache.has(options)) {\n+    return optionsHashCache.get(options);\n+  }\n+  const hash = createHash(\n+    `${prettierVersion}_${nodeVersion}_${stringify(options)}`\n+  );\n+  optionsHashCache.set(options, hash);\n+  return hash;\n+}\n+\n+/**\n+ * @typedef {{ hashOfOptions?: string }} OurMeta\n+ * @typedef {import(\"file-entry-cache\").FileDescriptor} FileDescriptor\n+ *\n+ * @param {import(\"file-entry-cache\").FileDescriptor} fileDescriptor\n+ * @returns {FileDescriptor[\"meta\"] & OurMeta}\n+ */\n+function getMetadataFromFileDescriptor(fileDescriptor) {\n+  return fileDescriptor.meta;\n+}\n+\n+class FormatResultsCache {\n+  /**\n+   * @param {string} cacheFileLocation The path of cache file location. (default: `.prettiercache`)\n+   */\n+  constructor(cacheFileLocation) {\n+    this.cacheFileLocation = cacheFileLocation;\n+    this.fileEntryCache = fileEntryCache.create(\n+      /* cacheId */ cacheFileLocation\n+    );\n+  }\n+\n+  /**\n+   * @param {string} filePath\n+   * @param {any} options\n+   */\n+  existsAvailableFormatResultsCache(filePath, options) {\n+    const fileDescriptor = this.fileEntryCache.getFileDescriptor(filePath);",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "869252464",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "src/cli/format-results-cache.js",
        "discussion_id": "869252464",
        "commented_code": "@@ -0,0 +1,91 @@\n+\"use strict\";\n+\n+// Inspired by LintResultsCache from ESLint\n+// https://github.com/eslint/eslint/blob/c2d0a830754b6099a3325e6d3348c3ba983a677a/lib/cli-engine/lint-result-cache.js\n+\n+const fileEntryCache = require(\"file-entry-cache\");\n+const stringify = require(\"fast-json-stable-stringify\");\n+// eslint-disable-next-line no-restricted-modules\n+const { version: prettierVersion } = require(\"../index.js\");\n+const { createHash } = require(\"./utils.js\");\n+\n+const optionsHashCache = new WeakMap();\n+const nodeVersion = process && process.version;\n+\n+/**\n+ * @param {*} options\n+ * @returns {string}\n+ */\n+function getHashOfOptions(options) {\n+  if (optionsHashCache.has(options)) {\n+    return optionsHashCache.get(options);\n+  }\n+  const hash = createHash(\n+    `${prettierVersion}_${nodeVersion}_${stringify(options)}`\n+  );\n+  optionsHashCache.set(options, hash);\n+  return hash;\n+}\n+\n+/**\n+ * @typedef {{ hashOfOptions?: string }} OurMeta\n+ * @typedef {import(\"file-entry-cache\").FileDescriptor} FileDescriptor\n+ *\n+ * @param {import(\"file-entry-cache\").FileDescriptor} fileDescriptor\n+ * @returns {FileDescriptor[\"meta\"] & OurMeta}\n+ */\n+function getMetadataFromFileDescriptor(fileDescriptor) {\n+  return fileDescriptor.meta;\n+}\n+\n+class FormatResultsCache {\n+  /**\n+   * @param {string} cacheFileLocation The path of cache file location. (default: `.prettiercache`)\n+   */\n+  constructor(cacheFileLocation) {\n+    this.cacheFileLocation = cacheFileLocation;\n+    this.fileEntryCache = fileEntryCache.create(\n+      /* cacheId */ cacheFileLocation\n+    );\n+  }\n+\n+  /**\n+   * @param {string} filePath\n+   * @param {any} options\n+   */\n+  existsAvailableFormatResultsCache(filePath, options) {\n+    const fileDescriptor = this.fileEntryCache.getFileDescriptor(filePath);",
        "comment_created_at": "2022-05-10T13:41:29+00:00",
        "comment_author": "fisker",
        "comment_body": "Feel not safe without file content, but that will be slow.",
        "pr_file_module": null
      },
      {
        "comment_id": "869841492",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "src/cli/format-results-cache.js",
        "discussion_id": "869252464",
        "commented_code": "@@ -0,0 +1,91 @@\n+\"use strict\";\n+\n+// Inspired by LintResultsCache from ESLint\n+// https://github.com/eslint/eslint/blob/c2d0a830754b6099a3325e6d3348c3ba983a677a/lib/cli-engine/lint-result-cache.js\n+\n+const fileEntryCache = require(\"file-entry-cache\");\n+const stringify = require(\"fast-json-stable-stringify\");\n+// eslint-disable-next-line no-restricted-modules\n+const { version: prettierVersion } = require(\"../index.js\");\n+const { createHash } = require(\"./utils.js\");\n+\n+const optionsHashCache = new WeakMap();\n+const nodeVersion = process && process.version;\n+\n+/**\n+ * @param {*} options\n+ * @returns {string}\n+ */\n+function getHashOfOptions(options) {\n+  if (optionsHashCache.has(options)) {\n+    return optionsHashCache.get(options);\n+  }\n+  const hash = createHash(\n+    `${prettierVersion}_${nodeVersion}_${stringify(options)}`\n+  );\n+  optionsHashCache.set(options, hash);\n+  return hash;\n+}\n+\n+/**\n+ * @typedef {{ hashOfOptions?: string }} OurMeta\n+ * @typedef {import(\"file-entry-cache\").FileDescriptor} FileDescriptor\n+ *\n+ * @param {import(\"file-entry-cache\").FileDescriptor} fileDescriptor\n+ * @returns {FileDescriptor[\"meta\"] & OurMeta}\n+ */\n+function getMetadataFromFileDescriptor(fileDescriptor) {\n+  return fileDescriptor.meta;\n+}\n+\n+class FormatResultsCache {\n+  /**\n+   * @param {string} cacheFileLocation The path of cache file location. (default: `.prettiercache`)\n+   */\n+  constructor(cacheFileLocation) {\n+    this.cacheFileLocation = cacheFileLocation;\n+    this.fileEntryCache = fileEntryCache.create(\n+      /* cacheId */ cacheFileLocation\n+    );\n+  }\n+\n+  /**\n+   * @param {string} filePath\n+   * @param {any} options\n+   */\n+  existsAvailableFormatResultsCache(filePath, options) {\n+    const fileDescriptor = this.fileEntryCache.getFileDescriptor(filePath);",
        "comment_created_at": "2022-05-11T03:39:07+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "For minimum speed and security, why not check the length of the file content rather than the content of the file?",
        "pr_file_module": null
      },
      {
        "comment_id": "878044023",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "src/cli/format-results-cache.js",
        "discussion_id": "869252464",
        "commented_code": "@@ -0,0 +1,91 @@\n+\"use strict\";\n+\n+// Inspired by LintResultsCache from ESLint\n+// https://github.com/eslint/eslint/blob/c2d0a830754b6099a3325e6d3348c3ba983a677a/lib/cli-engine/lint-result-cache.js\n+\n+const fileEntryCache = require(\"file-entry-cache\");\n+const stringify = require(\"fast-json-stable-stringify\");\n+// eslint-disable-next-line no-restricted-modules\n+const { version: prettierVersion } = require(\"../index.js\");\n+const { createHash } = require(\"./utils.js\");\n+\n+const optionsHashCache = new WeakMap();\n+const nodeVersion = process && process.version;\n+\n+/**\n+ * @param {*} options\n+ * @returns {string}\n+ */\n+function getHashOfOptions(options) {\n+  if (optionsHashCache.has(options)) {\n+    return optionsHashCache.get(options);\n+  }\n+  const hash = createHash(\n+    `${prettierVersion}_${nodeVersion}_${stringify(options)}`\n+  );\n+  optionsHashCache.set(options, hash);\n+  return hash;\n+}\n+\n+/**\n+ * @typedef {{ hashOfOptions?: string }} OurMeta\n+ * @typedef {import(\"file-entry-cache\").FileDescriptor} FileDescriptor\n+ *\n+ * @param {import(\"file-entry-cache\").FileDescriptor} fileDescriptor\n+ * @returns {FileDescriptor[\"meta\"] & OurMeta}\n+ */\n+function getMetadataFromFileDescriptor(fileDescriptor) {\n+  return fileDescriptor.meta;\n+}\n+\n+class FormatResultsCache {\n+  /**\n+   * @param {string} cacheFileLocation The path of cache file location. (default: `.prettiercache`)\n+   */\n+  constructor(cacheFileLocation) {\n+    this.cacheFileLocation = cacheFileLocation;\n+    this.fileEntryCache = fileEntryCache.create(\n+      /* cacheId */ cacheFileLocation\n+    );\n+  }\n+\n+  /**\n+   * @param {string} filePath\n+   * @param {any} options\n+   */\n+  existsAvailableFormatResultsCache(filePath, options) {\n+    const fileDescriptor = this.fileEntryCache.getFileDescriptor(filePath);",
        "comment_created_at": "2022-05-20T11:25:55+00:00",
        "comment_author": "7rulnik",
        "comment_body": "In this case it's not usable in CI. ESLint, for example, has [--cache-strategy](https://eslint.org/docs/user-guide/command-line-interface#--cache-strategy) which allows to use metadata or content for detecting changed files",
        "pr_file_module": null
      },
      {
        "comment_id": "883461579",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "src/cli/format-results-cache.js",
        "discussion_id": "869252464",
        "commented_code": "@@ -0,0 +1,91 @@\n+\"use strict\";\n+\n+// Inspired by LintResultsCache from ESLint\n+// https://github.com/eslint/eslint/blob/c2d0a830754b6099a3325e6d3348c3ba983a677a/lib/cli-engine/lint-result-cache.js\n+\n+const fileEntryCache = require(\"file-entry-cache\");\n+const stringify = require(\"fast-json-stable-stringify\");\n+// eslint-disable-next-line no-restricted-modules\n+const { version: prettierVersion } = require(\"../index.js\");\n+const { createHash } = require(\"./utils.js\");\n+\n+const optionsHashCache = new WeakMap();\n+const nodeVersion = process && process.version;\n+\n+/**\n+ * @param {*} options\n+ * @returns {string}\n+ */\n+function getHashOfOptions(options) {\n+  if (optionsHashCache.has(options)) {\n+    return optionsHashCache.get(options);\n+  }\n+  const hash = createHash(\n+    `${prettierVersion}_${nodeVersion}_${stringify(options)}`\n+  );\n+  optionsHashCache.set(options, hash);\n+  return hash;\n+}\n+\n+/**\n+ * @typedef {{ hashOfOptions?: string }} OurMeta\n+ * @typedef {import(\"file-entry-cache\").FileDescriptor} FileDescriptor\n+ *\n+ * @param {import(\"file-entry-cache\").FileDescriptor} fileDescriptor\n+ * @returns {FileDescriptor[\"meta\"] & OurMeta}\n+ */\n+function getMetadataFromFileDescriptor(fileDescriptor) {\n+  return fileDescriptor.meta;\n+}\n+\n+class FormatResultsCache {\n+  /**\n+   * @param {string} cacheFileLocation The path of cache file location. (default: `.prettiercache`)\n+   */\n+  constructor(cacheFileLocation) {\n+    this.cacheFileLocation = cacheFileLocation;\n+    this.fileEntryCache = fileEntryCache.create(\n+      /* cacheId */ cacheFileLocation\n+    );\n+  }\n+\n+  /**\n+   * @param {string} filePath\n+   * @param {any} options\n+   */\n+  existsAvailableFormatResultsCache(filePath, options) {\n+    const fileDescriptor = this.fileEntryCache.getFileDescriptor(filePath);",
        "comment_created_at": "2022-05-27T09:55:50+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "Thanks, I've added `--cache-strategy` option!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "977040441",
    "pr_number": 12800,
    "pr_file": "src/cli/format.js",
    "created_at": "2022-09-21T22:37:21+00:00",
    "commented_code": "const start = Date.now();\n \n+    const isCacheExists = formatResultsCache?.existsAvailableFormatResultsCache(\n+      filename,\n+      options\n+    );\n+\n     let result;\n     let output;\n \n     try {\n-      result = format(context, input, options);\n+      if (isCacheExists) {\n+        result = { formatted: input };\n+      } else {\n+        result = format(context, input, options);\n+      }\n       output = result.formatted;\n     } catch (error) {\n       handleError(context, filename, error, printedFilename);\n       continue;\n     }\n \n+    formatResultsCache?.setFormatResultsCache(filename, options);",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "977040441",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "src/cli/format.js",
        "discussion_id": "977040441",
        "commented_code": "@@ -362,17 +385,28 @@ async function formatFiles(context) {\n \n     const start = Date.now();\n \n+    const isCacheExists = formatResultsCache?.existsAvailableFormatResultsCache(\n+      filename,\n+      options\n+    );\n+\n     let result;\n     let output;\n \n     try {\n-      result = format(context, input, options);\n+      if (isCacheExists) {\n+        result = { formatted: input };\n+      } else {\n+        result = format(context, input, options);\n+      }\n       output = result.formatted;\n     } catch (error) {\n       handleError(context, filename, error, printedFilename);\n       continue;\n     }\n \n+    formatResultsCache?.setFormatResultsCache(filename, options);",
        "comment_created_at": "2022-09-21T22:37:21+00:00",
        "comment_author": "andersk",
        "comment_body": "If we\u2019re running without `--write`, this incorrectly caches the unformatted file rather than the formatted file, which makes the `--cache` option unusable. Please merge #13016.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1952027702",
    "pr_number": 17100,
    "pr_file": "src/cli/format-results-cache.js",
    "created_at": "2025-02-12T06:01:14+00:00",
    "commented_code": "constructor(cacheFileLocation, cacheStrategy) {\n     const useChecksum = cacheStrategy === \"content\";\n \n-    this.#fileEntryCache = fileEntryCache.createFromFile(\n-      /* filePath */ cacheFileLocation,\n-      useChecksum,\n-    );\n+    try {\n+      this.#fileEntryCache = fileEntryCache.createFromFile(\n+        /* filePath */ cacheFileLocation,\n+        useChecksum,\n+      );\n+    } catch {\n+      // https://github.com/prettier/prettier/issues/17092\n+      // Prettier 3.5 uses a different cache format than previous versions.\n+      // If the cache file is not in the expected format, delete it and retry.",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1952027702",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17100,
        "pr_file": "src/cli/format-results-cache.js",
        "discussion_id": "1952027702",
        "commented_code": "@@ -44,10 +45,24 @@ class FormatResultsCache {\n   constructor(cacheFileLocation, cacheStrategy) {\n     const useChecksum = cacheStrategy === \"content\";\n \n-    this.#fileEntryCache = fileEntryCache.createFromFile(\n-      /* filePath */ cacheFileLocation,\n-      useChecksum,\n-    );\n+    try {\n+      this.#fileEntryCache = fileEntryCache.createFromFile(\n+        /* filePath */ cacheFileLocation,\n+        useChecksum,\n+      );\n+    } catch {\n+      // https://github.com/prettier/prettier/issues/17092\n+      // Prettier 3.5 uses a different cache format than previous versions.\n+      // If the cache file is not in the expected format, delete it and retry.",
        "comment_created_at": "2025-02-12T06:01:14+00:00",
        "comment_author": "fisker",
        "comment_body": "```suggestion\r\n      // If `createFromFile()` fails, it's probably because the format of cache file changed, it happened when we release v3.5.0\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "883675079",
    "pr_number": 12800,
    "pr_file": "tests/integration/__tests__/cache.js",
    "created_at": "2022-05-27T14:34:21+00:00",
    "commented_code": "+\"use strict\";\n+\n+const path = require(\"path\");\n+const { promises: fs } = require(\"fs\");\n+const rimraf = require(\"rimraf\");\n+const { default: stripAnsi } = require(\"../../../vendors/strip-ansi.js\");\n+\n+const runPrettier = require(\"../run-prettier.js\");\n+\n+function resolveDir(dir) {\n+  return path.join(__dirname, \"..\", dir);\n+}\n+\n+describe(\"--cache option\", () => {\n+  const dir = resolveDir(\"cli/cache\");\n+  const defaultCacheFile = path.join(\n+    dir,\n+    \"node_modules/.cache/prettier/.prettier-cache\"\n+  );\n+\n+  let contentA;\n+  let contentB;\n+\n+  beforeAll(async () => {\n+    contentA = await fs.readFile(path.join(dir, \"a.js\"), \"utf8\");\n+    contentB = await fs.readFile(path.join(dir, \"b.js\"), \"utf8\");\n+  });\n+\n+  afterEach(async () => {\n+    rimraf.sync(path.join(dir, \"node_modules\"));\n+    await fs.writeFile(path.join(dir, \"a.js\"), contentA);\n+    await fs.writeFile(path.join(dir, \"b.js\"), contentB);\n+  });\n+\n+  it(\"throw error when cache-strategy is invalid\", async () => {\n+    const { stderr } = await runPrettier(dir, [\n+      \"--cache\",\n+      \"--cache-strategy\",\n+      \"invalid\",\n+      \".\",\n+    ]);\n+    expect(stripAnsi(stderr.trim())).toBe(\n+      '[error] Cache strategy must be one of: \"metadata\", \"content\"'\n+    );\n+  });\n+\n+  describe(\"--cache-strategy metadata\", () => {\n+    it(\"creates default cache file named `node_modules/.cache/prettier/.prettier-cache`\", async () => {\n+      await expect(fs.stat(defaultCacheFile)).rejects.toHaveProperty(\n+        \"code\",\n+        \"ENOENT\"\n+      );\n+      await runPrettier(dir, [\"--cache\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).resolves.not.toThrowError();\n+    });\n+\n+    it(\"does'nt format when cache is available\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms \\(cached\\)$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when a file has been updated.\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      // Update `a.js`\n+      await fs.writeFile(path.join(dir, \"a.js\"), \"const a = `a`;\");\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        // the cache of `b.js` is only available.\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when timestamp has been updated\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      // update timestamp\n+      const time = new Date();\n+      await fs.utimes(path.join(dir, \"a.js\"), time, time);\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        // the cache of `b.js` is only available.\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when options has been updated.\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \"--trailing-comma\",\n+        \"all\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"removes cache file when run Prettier without `--cache` option\", async () => {\n+      await runPrettier(dir, [\"--cache\", \"--write\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).resolves.not.toThrowError();\n+      await runPrettier(dir, [\"--write\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).rejects.toThrowError();\n+    });\n+  });\n+\n+  describe(\"--cache-strategy content\", () => {\n+    it(\"creates default cache file named `node_modules/.cache/prettier/.prettier-cache`\", async () => {\n+      await expect(fs.stat(defaultCacheFile)).rejects.toHaveProperty(\n+        \"code\",\n+        \"ENOENT\"\n+      );\n+      await runPrettier(dir, [\"--cache\", \"--cache-strategy\", \"content\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).resolves.not.toThrowError();\n+    });\n+\n+    it(\"does'nt format when cache is available\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms \\(cached\\)$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when a file has been updated.\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      // Update `a.js`\n+      await fs.writeFile(path.join(dir, \"a.js\"), \"const a = `a`;\");\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        // the cache of `b.js` is only available.\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"does'nt re-format when timestamp has been updated\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      // update timestamp\n+      const time = new Date();\n+      await fs.utimes(path.join(dir, \"a.js\"), time, time);\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms \\(cached\\)$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when options has been updated.\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--trailing-comma\",\n+        \"all\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"removes cache file when run Prettier without `--cache` option\", async () => {\n+      await runPrettier(dir, [\"--cache\", \"--write\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).resolves.not.toThrowError();\n+      await runPrettier(dir, [\"--write\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).rejects.toThrowError();\n+    });\n+  });\n+});",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "883675079",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "tests/integration/__tests__/cache.js",
        "discussion_id": "883675079",
        "commented_code": "@@ -0,0 +1,327 @@\n+\"use strict\";\n+\n+const path = require(\"path\");\n+const { promises: fs } = require(\"fs\");\n+const rimraf = require(\"rimraf\");\n+const { default: stripAnsi } = require(\"../../../vendors/strip-ansi.js\");\n+\n+const runPrettier = require(\"../run-prettier.js\");\n+\n+function resolveDir(dir) {\n+  return path.join(__dirname, \"..\", dir);\n+}\n+\n+describe(\"--cache option\", () => {\n+  const dir = resolveDir(\"cli/cache\");\n+  const defaultCacheFile = path.join(\n+    dir,\n+    \"node_modules/.cache/prettier/.prettier-cache\"\n+  );\n+\n+  let contentA;\n+  let contentB;\n+\n+  beforeAll(async () => {\n+    contentA = await fs.readFile(path.join(dir, \"a.js\"), \"utf8\");\n+    contentB = await fs.readFile(path.join(dir, \"b.js\"), \"utf8\");\n+  });\n+\n+  afterEach(async () => {\n+    rimraf.sync(path.join(dir, \"node_modules\"));\n+    await fs.writeFile(path.join(dir, \"a.js\"), contentA);\n+    await fs.writeFile(path.join(dir, \"b.js\"), contentB);\n+  });\n+\n+  it(\"throw error when cache-strategy is invalid\", async () => {\n+    const { stderr } = await runPrettier(dir, [\n+      \"--cache\",\n+      \"--cache-strategy\",\n+      \"invalid\",\n+      \".\",\n+    ]);\n+    expect(stripAnsi(stderr.trim())).toBe(\n+      '[error] Cache strategy must be one of: \"metadata\", \"content\"'\n+    );\n+  });\n+\n+  describe(\"--cache-strategy metadata\", () => {\n+    it(\"creates default cache file named `node_modules/.cache/prettier/.prettier-cache`\", async () => {\n+      await expect(fs.stat(defaultCacheFile)).rejects.toHaveProperty(\n+        \"code\",\n+        \"ENOENT\"\n+      );\n+      await runPrettier(dir, [\"--cache\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).resolves.not.toThrowError();\n+    });\n+\n+    it(\"does'nt format when cache is available\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms \\(cached\\)$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when a file has been updated.\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      // Update `a.js`\n+      await fs.writeFile(path.join(dir, \"a.js\"), \"const a = `a`;\");\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        // the cache of `b.js` is only available.\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when timestamp has been updated\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      // update timestamp\n+      const time = new Date();\n+      await fs.utimes(path.join(dir, \"a.js\"), time, time);\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        // the cache of `b.js` is only available.\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when options has been updated.\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \"--trailing-comma\",\n+        \"all\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"removes cache file when run Prettier without `--cache` option\", async () => {\n+      await runPrettier(dir, [\"--cache\", \"--write\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).resolves.not.toThrowError();\n+      await runPrettier(dir, [\"--write\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).rejects.toThrowError();\n+    });\n+  });\n+\n+  describe(\"--cache-strategy content\", () => {\n+    it(\"creates default cache file named `node_modules/.cache/prettier/.prettier-cache`\", async () => {\n+      await expect(fs.stat(defaultCacheFile)).rejects.toHaveProperty(\n+        \"code\",\n+        \"ENOENT\"\n+      );\n+      await runPrettier(dir, [\"--cache\", \"--cache-strategy\", \"content\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).resolves.not.toThrowError();\n+    });\n+\n+    it(\"does'nt format when cache is available\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms \\(cached\\)$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when a file has been updated.\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      // Update `a.js`\n+      await fs.writeFile(path.join(dir, \"a.js\"), \"const a = `a`;\");\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        // the cache of `b.js` is only available.\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"does'nt re-format when timestamp has been updated\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      // update timestamp\n+      const time = new Date();\n+      await fs.utimes(path.join(dir, \"a.js\"), time, time);\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms \\(cached\\)$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when options has been updated.\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--trailing-comma\",\n+        \"all\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"removes cache file when run Prettier without `--cache` option\", async () => {\n+      await runPrettier(dir, [\"--cache\", \"--write\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).resolves.not.toThrowError();\n+      await runPrettier(dir, [\"--write\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).rejects.toThrowError();\n+    });\n+  });\n+});",
        "comment_created_at": "2022-05-27T14:34:21+00:00",
        "comment_author": "fisker",
        "comment_body": "Can we add a test for stdin? So we won't accidentally use cache when formatting stdin.",
        "pr_file_module": null
      },
      {
        "comment_id": "883956619",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "tests/integration/__tests__/cache.js",
        "discussion_id": "883675079",
        "commented_code": "@@ -0,0 +1,327 @@\n+\"use strict\";\n+\n+const path = require(\"path\");\n+const { promises: fs } = require(\"fs\");\n+const rimraf = require(\"rimraf\");\n+const { default: stripAnsi } = require(\"../../../vendors/strip-ansi.js\");\n+\n+const runPrettier = require(\"../run-prettier.js\");\n+\n+function resolveDir(dir) {\n+  return path.join(__dirname, \"..\", dir);\n+}\n+\n+describe(\"--cache option\", () => {\n+  const dir = resolveDir(\"cli/cache\");\n+  const defaultCacheFile = path.join(\n+    dir,\n+    \"node_modules/.cache/prettier/.prettier-cache\"\n+  );\n+\n+  let contentA;\n+  let contentB;\n+\n+  beforeAll(async () => {\n+    contentA = await fs.readFile(path.join(dir, \"a.js\"), \"utf8\");\n+    contentB = await fs.readFile(path.join(dir, \"b.js\"), \"utf8\");\n+  });\n+\n+  afterEach(async () => {\n+    rimraf.sync(path.join(dir, \"node_modules\"));\n+    await fs.writeFile(path.join(dir, \"a.js\"), contentA);\n+    await fs.writeFile(path.join(dir, \"b.js\"), contentB);\n+  });\n+\n+  it(\"throw error when cache-strategy is invalid\", async () => {\n+    const { stderr } = await runPrettier(dir, [\n+      \"--cache\",\n+      \"--cache-strategy\",\n+      \"invalid\",\n+      \".\",\n+    ]);\n+    expect(stripAnsi(stderr.trim())).toBe(\n+      '[error] Cache strategy must be one of: \"metadata\", \"content\"'\n+    );\n+  });\n+\n+  describe(\"--cache-strategy metadata\", () => {\n+    it(\"creates default cache file named `node_modules/.cache/prettier/.prettier-cache`\", async () => {\n+      await expect(fs.stat(defaultCacheFile)).rejects.toHaveProperty(\n+        \"code\",\n+        \"ENOENT\"\n+      );\n+      await runPrettier(dir, [\"--cache\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).resolves.not.toThrowError();\n+    });\n+\n+    it(\"does'nt format when cache is available\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms \\(cached\\)$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when a file has been updated.\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      // Update `a.js`\n+      await fs.writeFile(path.join(dir, \"a.js\"), \"const a = `a`;\");\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        // the cache of `b.js` is only available.\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when timestamp has been updated\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      // update timestamp\n+      const time = new Date();\n+      await fs.utimes(path.join(dir, \"a.js\"), time, time);\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        // the cache of `b.js` is only available.\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when options has been updated.\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \"--trailing-comma\",\n+        \"all\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"removes cache file when run Prettier without `--cache` option\", async () => {\n+      await runPrettier(dir, [\"--cache\", \"--write\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).resolves.not.toThrowError();\n+      await runPrettier(dir, [\"--write\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).rejects.toThrowError();\n+    });\n+  });\n+\n+  describe(\"--cache-strategy content\", () => {\n+    it(\"creates default cache file named `node_modules/.cache/prettier/.prettier-cache`\", async () => {\n+      await expect(fs.stat(defaultCacheFile)).rejects.toHaveProperty(\n+        \"code\",\n+        \"ENOENT\"\n+      );\n+      await runPrettier(dir, [\"--cache\", \"--cache-strategy\", \"content\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).resolves.not.toThrowError();\n+    });\n+\n+    it(\"does'nt format when cache is available\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms \\(cached\\)$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when a file has been updated.\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      // Update `a.js`\n+      await fs.writeFile(path.join(dir, \"a.js\"), \"const a = `a`;\");\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        // the cache of `b.js` is only available.\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"does'nt re-format when timestamp has been updated\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      // update timestamp\n+      const time = new Date();\n+      await fs.utimes(path.join(dir, \"a.js\"), time, time);\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms \\(cached\\)$/),\n+          expect.stringMatching(/^b\\.js .+ms \\(cached\\)$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"re-formats when options has been updated.\", async () => {\n+      const { stdout: firstStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--write\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(firstStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+\n+      const { stdout: secondStdout } = await runPrettier(dir, [\n+        \"--cache\",\n+        \"--write\",\n+        \"--cache-strategy\",\n+        \"content\",\n+        \"--trailing-comma\",\n+        \"all\",\n+        \".\",\n+      ]);\n+      expect(stripAnsi(secondStdout).split(\"\\n\").filter(Boolean)).toEqual(\n+        expect.arrayContaining([\n+          expect.stringMatching(/^a\\.js .+ms$/),\n+          expect.stringMatching(/^b\\.js .+ms$/),\n+        ])\n+      );\n+    });\n+\n+    it(\"removes cache file when run Prettier without `--cache` option\", async () => {\n+      await runPrettier(dir, [\"--cache\", \"--write\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).resolves.not.toThrowError();\n+      await runPrettier(dir, [\"--write\", \".\"]);\n+      await expect(fs.stat(defaultCacheFile)).rejects.toThrowError();\n+    });\n+  });\n+});",
        "comment_created_at": "2022-05-27T20:19:59+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "[9cf4a31](https://github.com/prettier/prettier/pull/12800/commits/9cf4a312aafa1037d48d37f034c857018aa3aeb4)",
        "pr_file_module": null
      }
    ]
  }
]