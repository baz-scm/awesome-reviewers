[
  {
    "discussion_id": "1940964205",
    "pr_number": 17020,
    "pr_file": "website/blog/2025-01-31-3.5.0.md",
    "created_at": "2025-02-04T11:05:41+00:00",
    "commented_code": "+---\n+authors: \"sosukesuzuki\"\n+title: \"Prettier 3.5: New `objectWrap` option, `experimentalOperatorPosition` option and TS config file support!\"\n+---\n+\n+This release includes a lot of bug fixes and the following new features:\n+\n+- Support for the new `objectWrap` option\n+- Support for the new experimental `experimentalOperatorPosition` option\n+- Support for TypeScript configuration file\n+\n+See each section for details.\n+\n+<!-- truncate -->\n+\n+If you appreciate Prettier and would like to support our work, please consider sponsoring us directly via [our OpenCollective](https://opencollective.com/prettier) or by sponsoring the projects we depend on, such as [typescript-eslint](https://opencollective.com/typescript-eslint), [remark](https://opencollective.com/unified), and [Babel](https://opencollective.com/babel). Thank you for your continued support!\n+\n+## Why We Added Two New Options\n+\n+This release introduces two new options. If you\u2019re familiar with Prettier\u2019s [Option Philosophy](https://prettier.io/docs/option-philosophy/), you might be wondering: \u201cWhy add new options?\u201d Rest assured, these aren\u2019t your typical options, nor do they violate our option philosophy.\n+\n+As the name suggests, `experimentalOperatorPosition` is experimental. We have a [policy for experimental options](https://github.com/prettier/prettier/issues/14527), which means it will eventually be removed. In the future, the new behavior could become the default, or this option might be dropped entirely. If you\u2019ve been following Prettier for a while, you may recall we once added an `experimentalTernaries` option, and this follows the same approach.\n+\n+`objectWrap` is a bit special. For a long time, we\u2019ve struggled with how to print multi-line objects. We haven\u2019t yet found the perfect solution, so we\u2019ve resorted to a semi-manual approach. For more details, see our [Rationale](https://prettier.io/docs/rationale/#multi-line-objects). The current behavior isn\u2019t ideal because the final output can vary based on how the user writes their code. To provide a more consistent format, we\u2019ve decided to introduce the `objectWrap` option.\n+\n+Although this release includes two new options, **we want to emphasize that we haven\u2019t forgotten Prettier\u2019s option philosophy**. These options address specific, long-standing formatting challenges without compromising our option philosophy.\n+\n+## Highlights\n+\n+### JavaScript\n+\n+#### Add experimental option for breaking lines before binary operators ([#7111](https://github.com/prettier/prettier/pull/7111) by [@btmills](https://github.com/btmills))\n+\n+This is implemented behind the `--experimental-operator-position <start|end>` flag.\n+\n+When binary expressions wrap lines, `start` prints the operators at the start of new lines. Placing binary operators at the beginning of wrapped lines can make the operators more prominent and easier to scan.\n+\n+<!-- prettier-ignore -->\n+```jsx\n+// Input\n+var a = Math.random() * (yRange * (1 - minVerticalFraction)) + minVerticalFraction * yRange - offset;\n+\n+// `experimentalOperatorPosition: end` (default behavior)\n+var a =\n+  Math.random() * (yRange * (1 - minVerticalFraction)) +\n+  minVerticalFraction * yRange -\n+  offset;\n+\n+// `experimentalOperatorPosition: start`\n+var a =\n+  Math.random() * (yRange * (1 - minVerticalFraction))\n+  + minVerticalFraction * yRange\n+  - offset;\n+```\n+\n+#### Implement `objectWrap` config option ([#16163](https://github.com/prettier/prettier/pull/16163) by [@pauldraper](https://github.com/pauldraper), [@sosukesuzuki](https://github.com/sosukesuzuki))\n+\n+Prettier has historically done semi-manual formatting of multi-line JavaScript object literals.\n+\n+Namely, an object is kept on multiple lines if there is a newline prior to the first property, even if it could fit on a single line. See [Multi-line objects](rationale.md#multi-line-objects) for more details.\n+\n+While this behavior continues to be the default, `--object-wrap=collapse` instead ignores whitespace when formatting object literals.\n+\n+<!-- prettier-ignore -->\n+```js\n+// Input\n+const obj1 = {\n+  name1: \"value1\", name2: \"value2\",\n+};\n+\n+const obj2 = { name1: \"value1\",\n+  name2: \"value2\",\n+};\n+\n+// Prettier 3.4\n+const obj1 = {\n+  name1: \"value1\",\n+  name2: \"value2\",\n+};\n+\n+const obj2 = { name1: \"value1\", name2: \"value2\" };\n+\n+// Prettier 3.5 (with `--object-wrapping=collapse`)\n+const obj1 = { name1: \"value1\", name2: \"value2\" };\n+\n+const obj2 = { name1: \"value1\", name2: \"value2\" };\n+```\n+\n+### API\n+\n+#### Add support for TypeScript config files ([#16828](https://github.com/prettier/prettier/pull/16828) by [@itsyoboieltr](https://github.com/itsyoboieltr) & [@fisker](https://github.com/fisker))\n+\n+Added new format of configuration files:\n+\n+- `.prettierrc.ts`\n+- `.prettierrc.mts`\n+- `.prettierrc.cts`\n+- `prettier.config.ts`\n+- `prettier.config.mts`\n+- `prettier.config.cts`\n+\n+Note:\n+\n+Currently TypeScript support in Node.js is experimental.\n+\n+To make TypeScript config files work, Node.js>=22.6.0 is required and Node.js v22 requires `--experimental-strip-types`.\n+\n+You can run prettier with\n+\n+```sh\n+node --experimental-strip-types node_modules/prettier/bin/prettier.cjs . --write\n+```\n+\n+or\n+\n+```sh\n+NODE_OPTIONS=\"--experimental-strip-types\" prettier . --write\n+```\n+\n+Other TS loaders should also work, but not tested, use at your own risk.\n+\n+For example, with [`tsx`](https://tsx.is/), you can\n+\n+```sh\n+node --import tsx node_modules/prettier/bin/prettier.cjs . --write\n+```\n+\n+or\n+\n+```sh\n+tsx node_modules/prettier/bin/prettier.cjs . --write\n+```\n+\n+## Other Changes\n+\n+### JavaScript\n+\n+#### Improve word wrapping edge cases in JSX ([#16700](https://github.com/prettier/prettier/pull/16700) by [@seiyab](https://github.com/seiyab))\n+\n+<!-- prettier-ignore -->\n+```jsx\n+// Input\n+br_triggers_expression_break =\n+  <div><br />\n+  text text text text text text text text text text text {this.props.type} </div>\n+\n+// Prettier 3.4\n+br_triggers_expression_break = (\n+  <div>\n+    <br />\n+    text text text text text text text text text text text {\n+      this.props.type\n+    }{\" \"}\n+  </div>\n+);\n+\n+// Prettier 3.5\n+br_triggers_expression_break = (\n+  <div>\n+    <br />\n+    text text text text text text text text text text text{\" \"}\n+    {this.props.type}{\" \"}\n+  </div>\n+);\n+```\n+\n+### Flow\n+\n+#### Support `const` type parameters in Flow ([#16947](https://github.com/prettier/prettier/pull/16947) by [@gkz](https://github.com/gkz))\n+\n+<!-- prettier-ignore -->\n+```jsx\n+function f<const T>(): void {}\n+\n+// Prettier 3.4\n+// Parse error\n+\n+// Prettier 3.5\n+function f<const T>(): void {}\n+```\n+\n+### CSS\n+\n+#### Break before breaking comma separated values ([#16907](https://github.com/prettier/prettier/pull/16907) by [@seiyab](https://github.com/seiyab))\n+\n+<!-- prettier-ignore -->\n+```css\n+/* Input */\n+a {\n+  background-image:\n+    linear-gradient(to bottom, rgb(255 255 0 / 50%), rgb(0 0 255 / 50%)),\n+    url(\"catfront.png\");\n+}\n+\n+/* Prettier 3.4 */\n+a {\n+  background-image: linear-gradient(\n+      to bottom,\n+      rgb(255 255 0 / 50%),\n+      rgb(0 0 255 / 50%)\n+    ),\n+    url(\"catfront.png\");\n+}\n+\n+/* Prettier 3.5 */\n+a {\n+  background-image:\n+    linear-gradient(to bottom, rgb(255 255 0 / 50%), rgb(0 0 255 / 50%)),\n+    url(\"catfront.png\");\n+}\n+```\n+\n+### Vue\n+\n+#### Support `.prop` shorthand ([#16920](https://github.com/prettier/prettier/pull/16920) by [@fisker](https://github.com/fisker))\n+\n+`.foo` is shorthand for `v-bind:foo.prop`. See [`v-bind` builtin directive](https://vuejs.org/api/built-in-directives.html#v-bind) for details.\n+\n+<!-- prettier-ignore -->\n+```vue\n+<!-- Input -->\n+<template>\n+  <button .disabled=\"   a &&b \">Click!</button>\n+</template>\n+\n+<!-- Prettier 3.4 -->\n+<template>\n+  <button .disabled=\"   a &&b \">Click!</button>\n+</template>\n+\n+<!-- Prettier 3.5 -->\n+<template>\n+  <button .disabled=\"a && b\">Click!</button>\n+</template>\n+```\n+\n+### Angular\n+\n+#### Improve line breaks inside ICU blocks ([#16922](https://github.com/prettier/prettier/pull/16922) by [@fisker](https://github.com/fisker))\n+\n+<!-- prettier-ignore -->\n+```html\n+<!-- Input -->\n+<span>The author is {gender, select, male {male} female {female} other {other}}</span>\n+<span>The author is <span>male consectetur adipiscing elit, sed do eiusmod</span></span>\n+\n+<!-- Prettier 3.4 -->\n+<span\n+  >The author is {gender, select, male {male} female {female} other {other}\n+}</span>\n+<span\n+  >The author is\n+  <span>male consectetur adipiscing elit, sed do eiusmod</span></span\n+>\n+\n+<!-- Prettier 3.5 -->\n+<span\n+  >The author is\n+  {gender, select, male {male} female {female} other {other}}</span\n+>\n+<span\n+  >The author is\n+  <span>male consectetur adipiscing elit, sed do eiusmod</span></span\n+>\n+```\n+\n+#### Fix extra new line inside ICU blocks ([#16922](https://github.com/prettier/prettier/pull/16922) by [@fisker](https://github.com/fisker))\n+\n+<!-- prettier-ignore -->\n+```html\n+<!-- Input -->\n+{active, select,\n+  true {\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temp\n+  }\n+  false {\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temp\n+  }\n+}\n+\n+<!-- Prettier 3.4 -->\n+{active, select,\n+  true {\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temp\n+\n+  }\n+  false {\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temp\n+\n+  }\n+}\n+\n+<!-- Prettier 3.5 -->\n+{active, select,\n+  true {\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temp\n+  }\n+  false {\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temp\n+  }\n+}\n+```\n+\n+### Ember / Handlebars\n+\n+#### Handle <style> and <pre> tags in Handlebars/Glimmer ([#15087](https://github.com/prettier/prettier/pull/15087) by [@jurgenwerk](https://github.com/jurgenwerk))",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1940964205",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17020,
        "pr_file": "website/blog/2025-01-31-3.5.0.md",
        "discussion_id": "1940964205",
        "commented_code": "@@ -0,0 +1,403 @@\n+---\n+authors: \"sosukesuzuki\"\n+title: \"Prettier 3.5: New `objectWrap` option, `experimentalOperatorPosition` option and TS config file support!\"\n+---\n+\n+This release includes a lot of bug fixes and the following new features:\n+\n+- Support for the new `objectWrap` option\n+- Support for the new experimental `experimentalOperatorPosition` option\n+- Support for TypeScript configuration file\n+\n+See each section for details.\n+\n+<!-- truncate -->\n+\n+If you appreciate Prettier and would like to support our work, please consider sponsoring us directly via [our OpenCollective](https://opencollective.com/prettier) or by sponsoring the projects we depend on, such as [typescript-eslint](https://opencollective.com/typescript-eslint), [remark](https://opencollective.com/unified), and [Babel](https://opencollective.com/babel). Thank you for your continued support!\n+\n+## Why We Added Two New Options\n+\n+This release introduces two new options. If you\u2019re familiar with Prettier\u2019s [Option Philosophy](https://prettier.io/docs/option-philosophy/), you might be wondering: \u201cWhy add new options?\u201d Rest assured, these aren\u2019t your typical options, nor do they violate our option philosophy.\n+\n+As the name suggests, `experimentalOperatorPosition` is experimental. We have a [policy for experimental options](https://github.com/prettier/prettier/issues/14527), which means it will eventually be removed. In the future, the new behavior could become the default, or this option might be dropped entirely. If you\u2019ve been following Prettier for a while, you may recall we once added an `experimentalTernaries` option, and this follows the same approach.\n+\n+`objectWrap` is a bit special. For a long time, we\u2019ve struggled with how to print multi-line objects. We haven\u2019t yet found the perfect solution, so we\u2019ve resorted to a semi-manual approach. For more details, see our [Rationale](https://prettier.io/docs/rationale/#multi-line-objects). The current behavior isn\u2019t ideal because the final output can vary based on how the user writes their code. To provide a more consistent format, we\u2019ve decided to introduce the `objectWrap` option.\n+\n+Although this release includes two new options, **we want to emphasize that we haven\u2019t forgotten Prettier\u2019s option philosophy**. These options address specific, long-standing formatting challenges without compromising our option philosophy.\n+\n+## Highlights\n+\n+### JavaScript\n+\n+#### Add experimental option for breaking lines before binary operators ([#7111](https://github.com/prettier/prettier/pull/7111) by [@btmills](https://github.com/btmills))\n+\n+This is implemented behind the `--experimental-operator-position <start|end>` flag.\n+\n+When binary expressions wrap lines, `start` prints the operators at the start of new lines. Placing binary operators at the beginning of wrapped lines can make the operators more prominent and easier to scan.\n+\n+<!-- prettier-ignore -->\n+```jsx\n+// Input\n+var a = Math.random() * (yRange * (1 - minVerticalFraction)) + minVerticalFraction * yRange - offset;\n+\n+// `experimentalOperatorPosition: end` (default behavior)\n+var a =\n+  Math.random() * (yRange * (1 - minVerticalFraction)) +\n+  minVerticalFraction * yRange -\n+  offset;\n+\n+// `experimentalOperatorPosition: start`\n+var a =\n+  Math.random() * (yRange * (1 - minVerticalFraction))\n+  + minVerticalFraction * yRange\n+  - offset;\n+```\n+\n+#### Implement `objectWrap` config option ([#16163](https://github.com/prettier/prettier/pull/16163) by [@pauldraper](https://github.com/pauldraper), [@sosukesuzuki](https://github.com/sosukesuzuki))\n+\n+Prettier has historically done semi-manual formatting of multi-line JavaScript object literals.\n+\n+Namely, an object is kept on multiple lines if there is a newline prior to the first property, even if it could fit on a single line. See [Multi-line objects](rationale.md#multi-line-objects) for more details.\n+\n+While this behavior continues to be the default, `--object-wrap=collapse` instead ignores whitespace when formatting object literals.\n+\n+<!-- prettier-ignore -->\n+```js\n+// Input\n+const obj1 = {\n+  name1: \"value1\", name2: \"value2\",\n+};\n+\n+const obj2 = { name1: \"value1\",\n+  name2: \"value2\",\n+};\n+\n+// Prettier 3.4\n+const obj1 = {\n+  name1: \"value1\",\n+  name2: \"value2\",\n+};\n+\n+const obj2 = { name1: \"value1\", name2: \"value2\" };\n+\n+// Prettier 3.5 (with `--object-wrapping=collapse`)\n+const obj1 = { name1: \"value1\", name2: \"value2\" };\n+\n+const obj2 = { name1: \"value1\", name2: \"value2\" };\n+```\n+\n+### API\n+\n+#### Add support for TypeScript config files ([#16828](https://github.com/prettier/prettier/pull/16828) by [@itsyoboieltr](https://github.com/itsyoboieltr) & [@fisker](https://github.com/fisker))\n+\n+Added new format of configuration files:\n+\n+- `.prettierrc.ts`\n+- `.prettierrc.mts`\n+- `.prettierrc.cts`\n+- `prettier.config.ts`\n+- `prettier.config.mts`\n+- `prettier.config.cts`\n+\n+Note:\n+\n+Currently TypeScript support in Node.js is experimental.\n+\n+To make TypeScript config files work, Node.js>=22.6.0 is required and Node.js v22 requires `--experimental-strip-types`.\n+\n+You can run prettier with\n+\n+```sh\n+node --experimental-strip-types node_modules/prettier/bin/prettier.cjs . --write\n+```\n+\n+or\n+\n+```sh\n+NODE_OPTIONS=\"--experimental-strip-types\" prettier . --write\n+```\n+\n+Other TS loaders should also work, but not tested, use at your own risk.\n+\n+For example, with [`tsx`](https://tsx.is/), you can\n+\n+```sh\n+node --import tsx node_modules/prettier/bin/prettier.cjs . --write\n+```\n+\n+or\n+\n+```sh\n+tsx node_modules/prettier/bin/prettier.cjs . --write\n+```\n+\n+## Other Changes\n+\n+### JavaScript\n+\n+#### Improve word wrapping edge cases in JSX ([#16700](https://github.com/prettier/prettier/pull/16700) by [@seiyab](https://github.com/seiyab))\n+\n+<!-- prettier-ignore -->\n+```jsx\n+// Input\n+br_triggers_expression_break =\n+  <div><br />\n+  text text text text text text text text text text text {this.props.type} </div>\n+\n+// Prettier 3.4\n+br_triggers_expression_break = (\n+  <div>\n+    <br />\n+    text text text text text text text text text text text {\n+      this.props.type\n+    }{\" \"}\n+  </div>\n+);\n+\n+// Prettier 3.5\n+br_triggers_expression_break = (\n+  <div>\n+    <br />\n+    text text text text text text text text text text text{\" \"}\n+    {this.props.type}{\" \"}\n+  </div>\n+);\n+```\n+\n+### Flow\n+\n+#### Support `const` type parameters in Flow ([#16947](https://github.com/prettier/prettier/pull/16947) by [@gkz](https://github.com/gkz))\n+\n+<!-- prettier-ignore -->\n+```jsx\n+function f<const T>(): void {}\n+\n+// Prettier 3.4\n+// Parse error\n+\n+// Prettier 3.5\n+function f<const T>(): void {}\n+```\n+\n+### CSS\n+\n+#### Break before breaking comma separated values ([#16907](https://github.com/prettier/prettier/pull/16907) by [@seiyab](https://github.com/seiyab))\n+\n+<!-- prettier-ignore -->\n+```css\n+/* Input */\n+a {\n+  background-image:\n+    linear-gradient(to bottom, rgb(255 255 0 / 50%), rgb(0 0 255 / 50%)),\n+    url(\"catfront.png\");\n+}\n+\n+/* Prettier 3.4 */\n+a {\n+  background-image: linear-gradient(\n+      to bottom,\n+      rgb(255 255 0 / 50%),\n+      rgb(0 0 255 / 50%)\n+    ),\n+    url(\"catfront.png\");\n+}\n+\n+/* Prettier 3.5 */\n+a {\n+  background-image:\n+    linear-gradient(to bottom, rgb(255 255 0 / 50%), rgb(0 0 255 / 50%)),\n+    url(\"catfront.png\");\n+}\n+```\n+\n+### Vue\n+\n+#### Support `.prop` shorthand ([#16920](https://github.com/prettier/prettier/pull/16920) by [@fisker](https://github.com/fisker))\n+\n+`.foo` is shorthand for `v-bind:foo.prop`. See [`v-bind` builtin directive](https://vuejs.org/api/built-in-directives.html#v-bind) for details.\n+\n+<!-- prettier-ignore -->\n+```vue\n+<!-- Input -->\n+<template>\n+  <button .disabled=\"   a &&b \">Click!</button>\n+</template>\n+\n+<!-- Prettier 3.4 -->\n+<template>\n+  <button .disabled=\"   a &&b \">Click!</button>\n+</template>\n+\n+<!-- Prettier 3.5 -->\n+<template>\n+  <button .disabled=\"a && b\">Click!</button>\n+</template>\n+```\n+\n+### Angular\n+\n+#### Improve line breaks inside ICU blocks ([#16922](https://github.com/prettier/prettier/pull/16922) by [@fisker](https://github.com/fisker))\n+\n+<!-- prettier-ignore -->\n+```html\n+<!-- Input -->\n+<span>The author is {gender, select, male {male} female {female} other {other}}</span>\n+<span>The author is <span>male consectetur adipiscing elit, sed do eiusmod</span></span>\n+\n+<!-- Prettier 3.4 -->\n+<span\n+  >The author is {gender, select, male {male} female {female} other {other}\n+}</span>\n+<span\n+  >The author is\n+  <span>male consectetur adipiscing elit, sed do eiusmod</span></span\n+>\n+\n+<!-- Prettier 3.5 -->\n+<span\n+  >The author is\n+  {gender, select, male {male} female {female} other {other}}</span\n+>\n+<span\n+  >The author is\n+  <span>male consectetur adipiscing elit, sed do eiusmod</span></span\n+>\n+```\n+\n+#### Fix extra new line inside ICU blocks ([#16922](https://github.com/prettier/prettier/pull/16922) by [@fisker](https://github.com/fisker))\n+\n+<!-- prettier-ignore -->\n+```html\n+<!-- Input -->\n+{active, select,\n+  true {\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temp\n+  }\n+  false {\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temp\n+  }\n+}\n+\n+<!-- Prettier 3.4 -->\n+{active, select,\n+  true {\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temp\n+\n+  }\n+  false {\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temp\n+\n+  }\n+}\n+\n+<!-- Prettier 3.5 -->\n+{active, select,\n+  true {\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temp\n+  }\n+  false {\n+    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temp\n+  }\n+}\n+```\n+\n+### Ember / Handlebars\n+\n+#### Handle <style> and <pre> tags in Handlebars/Glimmer ([#15087](https://github.com/prettier/prettier/pull/15087) by [@jurgenwerk](https://github.com/jurgenwerk))",
        "comment_created_at": "2025-02-04T11:05:41+00:00",
        "comment_author": "kachkaev",
        "comment_body": "Getting this during Netlify build:\r\n\r\n```\r\nExpected a closing tag for `<pre>` (306:25-306:30) before the end of `atxHeading`\r\n```\r\n\r\nI guess we need to escape html tags in the original markdown:\r\n\r\n```\r\n#### Handle &lt;style&gt; and &lt;pre&gt; tags in Handlebars/Glimmer\r\n```\r\nor\r\n\r\n```\r\n#### Handle `<style>` and `<pre>` tags in Handlebars/Glimmer\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1444013189",
    "pr_number": 15886,
    "pr_file": ".github/ISSUE_TEMPLATE/formatting.md",
    "created_at": "2024-01-07T14:10:24+00:00",
    "commented_code": "```\n \n **Expected behavior:**\n+\n+<!-- Please write both text and code -->",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1444013189",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15886,
        "pr_file": ".github/ISSUE_TEMPLATE/formatting.md",
        "discussion_id": "1444013189",
        "commented_code": "@@ -47,3 +47,5 @@ Don't fill the form below manually! Let a program create a report for you:\n ```\n \n **Expected behavior:**\n+\n+<!-- Please write both text and code -->",
        "comment_created_at": "2024-01-07T14:10:24+00:00",
        "comment_author": "fisker",
        "comment_body": "Don't know, but feel hard to understand \"text\" and \"code\". Maybe @kachkaev or someone else have a better idea?\r\n\r\nReminder: Please sync this https://github.com/prettier/prettier/blob/e9b8764fc4c770aaa8e5d9b982bda40a83a4cf2a/website/playground/markdown.js#L30 before merge.",
        "pr_file_module": null
      },
      {
        "comment_id": "1444013343",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15886,
        "pr_file": ".github/ISSUE_TEMPLATE/formatting.md",
        "discussion_id": "1444013189",
        "commented_code": "@@ -47,3 +47,5 @@ Don't fill the form below manually! Let a program create a report for you:\n ```\n \n **Expected behavior:**\n+\n+<!-- Please write both text and code -->",
        "comment_created_at": "2024-01-07T14:11:30+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "Thank you for pointing it out. I would like to know if there is a better wording.",
        "pr_file_module": null
      },
      {
        "comment_id": "1445926332",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15886,
        "pr_file": ".github/ISSUE_TEMPLATE/formatting.md",
        "discussion_id": "1444013189",
        "commented_code": "@@ -47,3 +47,5 @@ Don't fill the form below manually! Let a program create a report for you:\n ```\n \n **Expected behavior:**\n+\n+<!-- Please write both text and code -->",
        "comment_created_at": "2024-01-09T10:44:37+00:00",
        "comment_author": "kachkaev",
        "comment_body": "How about something like this?\r\n\r\n```suggestion\r\n<!-- Please insert a code snippet and its description -->\r\n```\r\n\r\n```suggestion\r\n<!-- Please insert a code snippet and supplement it with a short description -->\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1445946491",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15886,
        "pr_file": ".github/ISSUE_TEMPLATE/formatting.md",
        "discussion_id": "1444013189",
        "commented_code": "@@ -47,3 +47,5 @@ Don't fill the form below manually! Let a program create a report for you:\n ```\n \n **Expected behavior:**\n+\n+<!-- Please write both text and code -->",
        "comment_created_at": "2024-01-09T11:02:50+00:00",
        "comment_author": "fisker",
        "comment_body": "Maybe we should add an \"Expected output\" section?",
        "pr_file_module": null
      },
      {
        "comment_id": "1446054325",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15886,
        "pr_file": ".github/ISSUE_TEMPLATE/formatting.md",
        "discussion_id": "1444013189",
        "commented_code": "@@ -47,3 +47,5 @@ Don't fill the form below manually! Let a program create a report for you:\n ```\n \n **Expected behavior:**\n+\n+<!-- Please write both text and code -->",
        "comment_created_at": "2024-01-09T12:50:24+00:00",
        "comment_author": "kachkaev",
        "comment_body": "````markdown\r\n**Output:**\r\n\r\n```jsx\r\n// code snippet\r\n```\r\n\r\n**Expected output:**\r\n\r\n```jsx\r\n// code snippet\r\n```\r\n\r\n**Why?**\r\n\r\n<!-- short explanation of expected output -->\r\n````",
        "pr_file_module": null
      },
      {
        "comment_id": "1446199349",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15886,
        "pr_file": ".github/ISSUE_TEMPLATE/formatting.md",
        "discussion_id": "1444013189",
        "commented_code": "@@ -47,3 +47,5 @@ Don't fill the form below manually! Let a program create a report for you:\n ```\n \n **Expected behavior:**\n+\n+<!-- Please write both text and code -->",
        "comment_created_at": "2024-01-09T14:57:44+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "looks good to me",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1375382727",
    "pr_number": 15134,
    "pr_file": "docs/ignore.md",
    "created_at": "2023-10-29T07:22:57+00:00",
    "commented_code": "It\u2019s recommended to have a `.prettierignore` in your project! This way you can run `prettier --write .` to make sure that everything is formatted (without mangling files you don\u2019t want, or choking on generated files). And \u2013 your editor will know which files _not_ to format!\n \n-By default prettier ignores files in version control systems directories (\".git\", \".svn\" and \".hg\") and `node_modules` (if [`--with-node-modules` CLI option](cli.md#--with-node-modules) not specified)\n+By default prettier ignores files in version control systems directories (\".git\", \".svn\" and \".hg\") and `node_modules` (if [`--with-node-modules` CLI option](cli.md#--with-node-modules) not specified). Prettier will also follow rules specified in .gitignore if it exists in the same directory from which it is run.",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1375382727",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15134,
        "pr_file": "docs/ignore.md",
        "discussion_id": "1375382727",
        "commented_code": "@@ -24,7 +24,7 @@ coverage\n \n It\u2019s recommended to have a `.prettierignore` in your project! This way you can run `prettier --write .` to make sure that everything is formatted (without mangling files you don\u2019t want, or choking on generated files). And \u2013 your editor will know which files _not_ to format!\n \n-By default prettier ignores files in version control systems directories (\".git\", \".svn\" and \".hg\") and `node_modules` (if [`--with-node-modules` CLI option](cli.md#--with-node-modules) not specified)\n+By default prettier ignores files in version control systems directories (\".git\", \".svn\" and \".hg\") and `node_modules` (if [`--with-node-modules` CLI option](cli.md#--with-node-modules) not specified). Prettier will also follow rules specified in .gitignore if it exists in the same directory from which it is run.",
        "comment_created_at": "2023-10-29T07:22:57+00:00",
        "comment_author": "awsr",
        "comment_body": "Slightly better wording would probably be:\r\n\r\n```suggestion\r\nBy default prettier ignores files in version control systems directories (\".git\", \".sl\", \".svn\" and \".hg\") and `node_modules` (unless the [`--with-node-modules` CLI option](cli.md#--with-node-modules) is specified). Prettier will also follow rules specified in the \".gitignore\" file if it exists in the same directory from which it is run.\r\n```\r\n\r\nNormally just '...rules specified in \".gitignore\" if it exists...' would be good, but since several directories that also start with \".\" are mentioned in the previous sentence it's probably best to clarify here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1360863776",
    "pr_number": 15502,
    "pr_file": "website/blog/2023-10-09-curious-ternaries.md",
    "created_at": "2023-10-16T15:29:52+00:00",
    "commented_code": "+---\n+author: \"Alex Rattray (@rattrayalex)\"\n+authorURL: \"https://github.com/rattrayalex\"\n+title: \"A curious case of the ternaries\"\n+---\n+\n+Ternary formatting has always been a topic of debate, and we've taken strides to address it in v3.1. With the introduction of a new formatting style, we're eager for you to experience it firsthand. Before diving deep, we want to share our journey and the motivation behind this change. Please read on and don't miss trying out our `--experimental-ternaries` option!\n+\n+_For a quick tl;dr, [see the release post](/blog/2023/10/01/3.1.0)._\n+\n+<!-- truncate -->\n+\n+## Introduction\n+\n+Printing nested ternaries nicely in a wide variety of scenarios is a surprisingly tricky challenge.\n+\n+Prettier's original, na\u00efve approach \u2013 just add indentation to each level of a nested ternary \u2013 worked fine in simple cases, but didn't scale to deeply nested ternaries and [had other problems](https://github.com/prettier/prettier/issues/737).\n+\n+So in 2018, we [replaced that with flat ternaries](https://github.com/prettier/prettier/pull/5039), which [seemed](https://github.com/prettier/prettier/pull/4767#issuecomment-401764876) like a good idea at the time, but was [not received well](https://github.com/prettier/prettier/issues/5814) \u2013\u00a0the issue asking it to be reverted has well over 500 upvotes.\n+\n+Over the last few years, we [explored](https://github.com/prettier/prettier/issues/9561) and experimented with many, many possible solutions which would be as readable as nested ternaries in common cases, but also scale to work well in a wider variety of situations.\n+\n+Ideally, we'd find one scheme that would fluidly flow from a single ternary, to a chain of 2, to a long chain of simple cases, to something more complex with a few nested conditions. The syntax in JSX, TypeScript conditional expressions (which cannot be expressed with `if`), and normal JS should all look and feel the same. And in all cases, it should be easy to follow what's the \"if\", what's the \"then\", and what's the \"else\" \u2013\u00a0and what they map to.\n+\n+The good news is that we found it. The bad news is that it's novel, and thus unfamiliar to most developers.\n+\n+In beta testing this feature, we found developers were quite skeptical when they first saw it:\n+\n+![\"I'm not convinced the new version is simpler to read here.\"](https://user-images.githubusercontent.com/704302/205551054-122f2fc0-fee3-4254-912a-1b97b5cf0c04.png)\n+\n+But then, after using it for a bit, they didn't want to go back:\n+\n+![\"I'm liking the ternaries! I think it makes sense to have them formatted like this. I also got used to them quite quickly as well. \nI agree with this, it takes a very short time to get used to it.\"](https://user-images.githubusercontent.com/704302/205550887-b780f6ba-b678-4620-a454-255bd5083096.png)\n+\n+Another developer had this to say:\n+\n+> My first hour with the rule on, it felt a little odd. But by hour two, I\u2019d used it a few times to solve problems that otherwise would have been ugly refactors to if statements. I\u2019m not going back.\n+\n+> I used to hate nested ternaries, but I also hate restructuring a nice line of code into if-else statements. The new rule adds an understandable, linear if-else if-else expression to the language and is much nicer than multiple ternaries as nested branches.\n+\n+So we felt we had a winning formula, but it could be a jarring introduction to the community.\n+\n+As a result, we decided to put this new formatting behind a temporary `--experimental-ternaries` option for a few months, and in the meantime go ahead and ship what the community has been clammering for: [indented ternaries](https://github.com/prettier/prettier/pull/9559).\n+\n+## Overview\n+\n+So what does this new style look like, anyway?\n+\n+Here's a quick, contrived example to show the thinking behind \"curious\" ternaries:\n+\n+<!-- prettier-ignore -->\n+```ts\n+const animalName =\n+  pet.canBark() ?\n+    pet.isScary() ?\n+      'wolf'\n+    : 'dog'\n+  : pet.canMeow() ?\n+    'cat'\n+  : 'probably a bunny';\n+```\n+\n+1. Every line that ends with a question mark is an **\"if\"**.\n+   - If you see `foo ?` it's like asking a question about foo \u2013 \"if foo? then, \u2026\".\n+2. Every line that starts with a `:` is an **\"else\"**.\n+   - If you see `: foo` that means, \"else, foo\".\n+   - If you see `: foo ?` that means \"else, if foo?\".\n+3. Every line without `:` or `?` is a **\"then\"**.\n+   - If you just see `foo`, that means, \"then foo\".\n+\n+And here's the code rewritten to show \"case-style\" ternaries:",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1360863776",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15502,
        "pr_file": "website/blog/2023-10-09-curious-ternaries.md",
        "discussion_id": "1360863776",
        "commented_code": "@@ -0,0 +1,105 @@\n+---\n+author: \"Alex Rattray (@rattrayalex)\"\n+authorURL: \"https://github.com/rattrayalex\"\n+title: \"A curious case of the ternaries\"\n+---\n+\n+Ternary formatting has always been a topic of debate, and we've taken strides to address it in v3.1. With the introduction of a new formatting style, we're eager for you to experience it firsthand. Before diving deep, we want to share our journey and the motivation behind this change. Please read on and don't miss trying out our `--experimental-ternaries` option!\n+\n+_For a quick tl;dr, [see the release post](/blog/2023/10/01/3.1.0)._\n+\n+<!-- truncate -->\n+\n+## Introduction\n+\n+Printing nested ternaries nicely in a wide variety of scenarios is a surprisingly tricky challenge.\n+\n+Prettier's original, na\u00efve approach \u2013 just add indentation to each level of a nested ternary \u2013 worked fine in simple cases, but didn't scale to deeply nested ternaries and [had other problems](https://github.com/prettier/prettier/issues/737).\n+\n+So in 2018, we [replaced that with flat ternaries](https://github.com/prettier/prettier/pull/5039), which [seemed](https://github.com/prettier/prettier/pull/4767#issuecomment-401764876) like a good idea at the time, but was [not received well](https://github.com/prettier/prettier/issues/5814) \u2013\u00a0the issue asking it to be reverted has well over 500 upvotes.\n+\n+Over the last few years, we [explored](https://github.com/prettier/prettier/issues/9561) and experimented with many, many possible solutions which would be as readable as nested ternaries in common cases, but also scale to work well in a wider variety of situations.\n+\n+Ideally, we'd find one scheme that would fluidly flow from a single ternary, to a chain of 2, to a long chain of simple cases, to something more complex with a few nested conditions. The syntax in JSX, TypeScript conditional expressions (which cannot be expressed with `if`), and normal JS should all look and feel the same. And in all cases, it should be easy to follow what's the \"if\", what's the \"then\", and what's the \"else\" \u2013\u00a0and what they map to.\n+\n+The good news is that we found it. The bad news is that it's novel, and thus unfamiliar to most developers.\n+\n+In beta testing this feature, we found developers were quite skeptical when they first saw it:\n+\n+![\"I'm not convinced the new version is simpler to read here.\"](https://user-images.githubusercontent.com/704302/205551054-122f2fc0-fee3-4254-912a-1b97b5cf0c04.png)\n+\n+But then, after using it for a bit, they didn't want to go back:\n+\n+![\"I'm liking the ternaries! I think it makes sense to have them formatted like this. I also got used to them quite quickly as well. \\nI agree with this, it takes a very short time to get used to it.\"](https://user-images.githubusercontent.com/704302/205550887-b780f6ba-b678-4620-a454-255bd5083096.png)\n+\n+Another developer had this to say:\n+\n+> My first hour with the rule on, it felt a little odd. But by hour two, I\u2019d used it a few times to solve problems that otherwise would have been ugly refactors to if statements. I\u2019m not going back.\n+\n+> I used to hate nested ternaries, but I also hate restructuring a nice line of code into if-else statements. The new rule adds an understandable, linear if-else if-else expression to the language and is much nicer than multiple ternaries as nested branches.\n+\n+So we felt we had a winning formula, but it could be a jarring introduction to the community.\n+\n+As a result, we decided to put this new formatting behind a temporary `--experimental-ternaries` option for a few months, and in the meantime go ahead and ship what the community has been clammering for: [indented ternaries](https://github.com/prettier/prettier/pull/9559).\n+\n+## Overview\n+\n+So what does this new style look like, anyway?\n+\n+Here's a quick, contrived example to show the thinking behind \"curious\" ternaries:\n+\n+<!-- prettier-ignore -->\n+```ts\n+const animalName =\n+  pet.canBark() ?\n+    pet.isScary() ?\n+      'wolf'\n+    : 'dog'\n+  : pet.canMeow() ?\n+    'cat'\n+  : 'probably a bunny';\n+```\n+\n+1. Every line that ends with a question mark is an **\"if\"**.\n+   - If you see `foo ?` it's like asking a question about foo \u2013 \"if foo? then, \u2026\".\n+2. Every line that starts with a `:` is an **\"else\"**.\n+   - If you see `: foo` that means, \"else, foo\".\n+   - If you see `: foo ?` that means \"else, if foo?\".\n+3. Every line without `:` or `?` is a **\"then\"**.\n+   - If you just see `foo`, that means, \"then foo\".\n+\n+And here's the code rewritten to show \"case-style\" ternaries:",
        "comment_created_at": "2023-10-16T15:29:52+00:00",
        "comment_author": "benmccann",
        "comment_body": "It would be nice to clarify what \"case-style\" ternaries are here. Is it part of this feature or another feature that prettier has or just a style people may write with on their own?\r\n\r\nAlso, I might swap \"show\" here for another word because it sounds a bit like \"showcase\" when you read it with the next word\r\n```suggestion\r\nAnd here's the code rewritten to demonstrate \"case-style\" ternaries:\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1382672768",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15502,
        "pr_file": "website/blog/2023-10-09-curious-ternaries.md",
        "discussion_id": "1360863776",
        "commented_code": "@@ -0,0 +1,105 @@\n+---\n+author: \"Alex Rattray (@rattrayalex)\"\n+authorURL: \"https://github.com/rattrayalex\"\n+title: \"A curious case of the ternaries\"\n+---\n+\n+Ternary formatting has always been a topic of debate, and we've taken strides to address it in v3.1. With the introduction of a new formatting style, we're eager for you to experience it firsthand. Before diving deep, we want to share our journey and the motivation behind this change. Please read on and don't miss trying out our `--experimental-ternaries` option!\n+\n+_For a quick tl;dr, [see the release post](/blog/2023/10/01/3.1.0)._\n+\n+<!-- truncate -->\n+\n+## Introduction\n+\n+Printing nested ternaries nicely in a wide variety of scenarios is a surprisingly tricky challenge.\n+\n+Prettier's original, na\u00efve approach \u2013 just add indentation to each level of a nested ternary \u2013 worked fine in simple cases, but didn't scale to deeply nested ternaries and [had other problems](https://github.com/prettier/prettier/issues/737).\n+\n+So in 2018, we [replaced that with flat ternaries](https://github.com/prettier/prettier/pull/5039), which [seemed](https://github.com/prettier/prettier/pull/4767#issuecomment-401764876) like a good idea at the time, but was [not received well](https://github.com/prettier/prettier/issues/5814) \u2013\u00a0the issue asking it to be reverted has well over 500 upvotes.\n+\n+Over the last few years, we [explored](https://github.com/prettier/prettier/issues/9561) and experimented with many, many possible solutions which would be as readable as nested ternaries in common cases, but also scale to work well in a wider variety of situations.\n+\n+Ideally, we'd find one scheme that would fluidly flow from a single ternary, to a chain of 2, to a long chain of simple cases, to something more complex with a few nested conditions. The syntax in JSX, TypeScript conditional expressions (which cannot be expressed with `if`), and normal JS should all look and feel the same. And in all cases, it should be easy to follow what's the \"if\", what's the \"then\", and what's the \"else\" \u2013\u00a0and what they map to.\n+\n+The good news is that we found it. The bad news is that it's novel, and thus unfamiliar to most developers.\n+\n+In beta testing this feature, we found developers were quite skeptical when they first saw it:\n+\n+![\"I'm not convinced the new version is simpler to read here.\"](https://user-images.githubusercontent.com/704302/205551054-122f2fc0-fee3-4254-912a-1b97b5cf0c04.png)\n+\n+But then, after using it for a bit, they didn't want to go back:\n+\n+![\"I'm liking the ternaries! I think it makes sense to have them formatted like this. I also got used to them quite quickly as well. \\nI agree with this, it takes a very short time to get used to it.\"](https://user-images.githubusercontent.com/704302/205550887-b780f6ba-b678-4620-a454-255bd5083096.png)\n+\n+Another developer had this to say:\n+\n+> My first hour with the rule on, it felt a little odd. But by hour two, I\u2019d used it a few times to solve problems that otherwise would have been ugly refactors to if statements. I\u2019m not going back.\n+\n+> I used to hate nested ternaries, but I also hate restructuring a nice line of code into if-else statements. The new rule adds an understandable, linear if-else if-else expression to the language and is much nicer than multiple ternaries as nested branches.\n+\n+So we felt we had a winning formula, but it could be a jarring introduction to the community.\n+\n+As a result, we decided to put this new formatting behind a temporary `--experimental-ternaries` option for a few months, and in the meantime go ahead and ship what the community has been clammering for: [indented ternaries](https://github.com/prettier/prettier/pull/9559).\n+\n+## Overview\n+\n+So what does this new style look like, anyway?\n+\n+Here's a quick, contrived example to show the thinking behind \"curious\" ternaries:\n+\n+<!-- prettier-ignore -->\n+```ts\n+const animalName =\n+  pet.canBark() ?\n+    pet.isScary() ?\n+      'wolf'\n+    : 'dog'\n+  : pet.canMeow() ?\n+    'cat'\n+  : 'probably a bunny';\n+```\n+\n+1. Every line that ends with a question mark is an **\"if\"**.\n+   - If you see `foo ?` it's like asking a question about foo \u2013 \"if foo? then, \u2026\".\n+2. Every line that starts with a `:` is an **\"else\"**.\n+   - If you see `: foo` that means, \"else, foo\".\n+   - If you see `: foo ?` that means \"else, if foo?\".\n+3. Every line without `:` or `?` is a **\"then\"**.\n+   - If you just see `foo`, that means, \"then foo\".\n+\n+And here's the code rewritten to show \"case-style\" ternaries:",
        "comment_created_at": "2023-11-05T23:33:48+00:00",
        "comment_author": "rattrayalex",
        "comment_body": "good feedback, thank you!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "980130186",
    "pr_number": 13530,
    "pr_file": "docs/browser.md",
    "created_at": "2022-09-26T14:48:16+00:00",
    "commented_code": "The standalone version comes as:\n \n-- ES modules: `esm/standalone.mjs`, starting in version 2.2\n+- ES modules: `standalone.mjs`, starting in version 2.2",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "980130186",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13530,
        "pr_file": "docs/browser.md",
        "discussion_id": "980130186",
        "commented_code": "@@ -7,7 +7,7 @@ Run Prettier in the browser using its **standalone** version. This version doesn\n \n The standalone version comes as:\n \n-- ES modules: `esm/standalone.mjs`, starting in version 2.2\n+- ES modules: `standalone.mjs`, starting in version 2.2",
        "comment_created_at": "2022-09-26T14:48:16+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "Since `standalone.mjs` does not exist in version 2.x, it would be good to clarify this.\r\n\r\n```suggestion\r\n- ES modules: `standalone.mjs`, starting in version 3.0 (In version 2, `esm/standalone.mjs`.)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "753837028",
    "pr_number": 11823,
    "pr_file": "changelog_unreleased/mdx/11563.md",
    "created_at": "2021-11-21T18:27:28+00:00",
    "commented_code": "-#### Add support for MDX 2 comments (#11563 by @wooorm)\n+#### [HIGHLIGHT]Add support for MDX 2 comments (#11563 by @wooorm)\n \n-This adds basic support for MDX 2 comments (JavaScript-style comments) in\n-addition to existing MDX 1 comments (HTML-style comments).\n+This adds basic support for MDX 2 comments (JavaScript-style comments) in addition to existing MDX 1 comments (HTML-style comments).",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "753837028",
        "repo_full_name": "prettier/prettier",
        "pr_number": 11823,
        "pr_file": "changelog_unreleased/mdx/11563.md",
        "discussion_id": "753837028",
        "commented_code": "@@ -1,21 +1,16 @@\n-#### Add support for MDX 2 comments (#11563 by @wooorm)\n+#### [HIGHLIGHT]Add support for MDX 2 comments (#11563 by @wooorm)\n \n-This adds basic support for MDX 2 comments (JavaScript-style comments) in\n-addition to existing MDX 1 comments (HTML-style comments).\n+This adds basic support for MDX 2 comments (JavaScript-style comments) in addition to existing MDX 1 comments (HTML-style comments).",
        "comment_created_at": "2021-11-21T18:27:28+00:00",
        "comment_author": "j-f1",
        "comment_body": "```suggestion\r\nThis adds basic support for MDX v2 comment syntax (JavaScript-style comments) in addition to the existing support MDX v1 comment syntax (HTML-style comments).\r\n```",
        "pr_file_module": null
      }
    ]
  }
]