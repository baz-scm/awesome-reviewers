[
  {
    "discussion_id": "1948322198",
    "pr_number": 17091,
    "pr_file": "src/index.d.ts",
    "created_at": "2025-02-10T02:19:17+00:00",
    "commented_code": "* @deprecated use bracketSameLine instead\n    */\n   jsxBracketSameLine?: boolean;\n+  /**\n+   * Where to print operators when binary expressions wrap lines.\n+   * @default \"end\"\n+   */\n+  experimentalOperatorPosition?: \"start\" | \"end\";",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1948322198",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17091,
        "pr_file": "src/index.d.ts",
        "discussion_id": "1948322198",
        "commented_code": "@@ -441,6 +441,11 @@ export interface RequiredOptions extends doc.printer.Options {\n    * @deprecated use bracketSameLine instead\n    */\n   jsxBracketSameLine?: boolean;\n+  /**\n+   * Where to print operators when binary expressions wrap lines.\n+   * @default \"end\"\n+   */\n+  experimentalOperatorPosition?: \"start\" | \"end\";",
        "comment_created_at": "2025-02-10T02:19:17+00:00",
        "comment_author": "kachkaev",
        "comment_body": "Looking at other typings, I guess we do not need `?` here. This type is named `RequiredOptions` so all values are mandatory. See `embeddedLanguageFormatting`, for example.\r\n\r\nSince we need to make a change anyway, let\u2019s move `experimentalOperatorPosition` before `experimentalTernaries` (to keep them closer together and in alphabetical order).",
        "pr_file_module": null
      },
      {
        "comment_id": "1948343067",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17091,
        "pr_file": "src/index.d.ts",
        "discussion_id": "1948322198",
        "commented_code": "@@ -441,6 +441,11 @@ export interface RequiredOptions extends doc.printer.Options {\n    * @deprecated use bracketSameLine instead\n    */\n   jsxBracketSameLine?: boolean;\n+  /**\n+   * Where to print operators when binary expressions wrap lines.\n+   * @default \"end\"\n+   */\n+  experimentalOperatorPosition?: \"start\" | \"end\";",
        "comment_created_at": "2025-02-10T03:02:54+00:00",
        "comment_author": "ntnyq",
        "comment_body": "Yes, no need for question mark, removed and re-ordered. \r\n\r\nThanks.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1456736092",
    "pr_number": 15789,
    "pr_file": "src/index.d.ts",
    "created_at": "2024-01-18T02:16:38+00:00",
    "commented_code": "* @default false\n    */\n   singleAttributePerLine: boolean;\n+  /**\n+   * Use curious ternaries, with the question mark after the condition, instead\n+   * of on the same line as the consequent.\n+   * @default false\n+   */\n+  experimentalTernaries: boolean;\n+  /**\n+   * Put the `>` of a multi-line JSX element at the end of the last line instead of being alone on the next line.\n+   * @default false\n+   * @deprecated use bracketSameLine instead\n+   */\n+  jsxBracketSameLine?: boolean;\n+  /**\n+   * Arbitrary additional values on an options object are always allowed.\n+   */\n+  [_: string]: unknown;",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1456736092",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15789,
        "pr_file": "src/index.d.ts",
        "discussion_id": "1456736092",
        "commented_code": "@@ -430,6 +424,22 @@ export interface RequiredOptions extends doc.printer.Options {\n    * @default false\n    */\n   singleAttributePerLine: boolean;\n+  /**\n+   * Use curious ternaries, with the question mark after the condition, instead\n+   * of on the same line as the consequent.\n+   * @default false\n+   */\n+  experimentalTernaries: boolean;\n+  /**\n+   * Put the `>` of a multi-line JSX element at the end of the last line instead of being alone on the next line.\n+   * @default false\n+   * @deprecated use bracketSameLine instead\n+   */\n+  jsxBracketSameLine?: boolean;\n+  /**\n+   * Arbitrary additional values on an options object are always allowed.\n+   */\n+  [_: string]: unknown;",
        "comment_created_at": "2024-01-18T02:16:38+00:00",
        "comment_author": "Sec-ant",
        "comment_body": "@ExplodingCabbage I'm a plugin developer and I use `keyof Options` to get the known keys in Prettier Options and this line of code prevents me from doing that again. I think this is a little too loose. Would you consider revert this change?",
        "pr_file_module": null
      },
      {
        "comment_id": "1456747101",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15789,
        "pr_file": "src/index.d.ts",
        "discussion_id": "1456736092",
        "commented_code": "@@ -430,6 +424,22 @@ export interface RequiredOptions extends doc.printer.Options {\n    * @default false\n    */\n   singleAttributePerLine: boolean;\n+  /**\n+   * Use curious ternaries, with the question mark after the condition, instead\n+   * of on the same line as the consequent.\n+   * @default false\n+   */\n+  experimentalTernaries: boolean;\n+  /**\n+   * Put the `>` of a multi-line JSX element at the end of the last line instead of being alone on the next line.\n+   * @default false\n+   * @deprecated use bracketSameLine instead\n+   */\n+  jsxBracketSameLine?: boolean;\n+  /**\n+   * Arbitrary additional values on an options object are always allowed.\n+   */\n+  [_: string]: unknown;",
        "comment_created_at": "2024-01-18T02:36:43+00:00",
        "comment_author": "JounQin",
        "comment_body": "Waht means it's actually a BREAKING CHANGE for other plugin authors or users.",
        "pr_file_module": null
      },
      {
        "comment_id": "1457369326",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15789,
        "pr_file": "src/index.d.ts",
        "discussion_id": "1456736092",
        "commented_code": "@@ -430,6 +424,22 @@ export interface RequiredOptions extends doc.printer.Options {\n    * @default false\n    */\n   singleAttributePerLine: boolean;\n+  /**\n+   * Use curious ternaries, with the question mark after the condition, instead\n+   * of on the same line as the consequent.\n+   * @default false\n+   */\n+  experimentalTernaries: boolean;\n+  /**\n+   * Put the `>` of a multi-line JSX element at the end of the last line instead of being alone on the next line.\n+   * @default false\n+   * @deprecated use bracketSameLine instead\n+   */\n+  jsxBracketSameLine?: boolean;\n+  /**\n+   * Arbitrary additional values on an options object are always allowed.\n+   */\n+  [_: string]: unknown;",
        "comment_created_at": "2024-01-18T12:25:10+00:00",
        "comment_author": "ExplodingCabbage",
        "comment_body": "Ah, man! What a mess!\r\n\r\n> I think this is a little too loose\r\n\r\nI mean, given the places we currently annotate arguments as having type `ParserOptions`, the old way was *definitely* too tight; in practice arguments typed as `ParserOptions` *always* included additional keys beyond the ones explicitly listed here (see discussion at https://github.com/prettier/prettier/pull/15789/files#r1425688411). I also suspect that, *taking as given the places Prettier currently uses these types*, they really do need to be this loose (and that merely listing more keys like the `printer` key wouldn't cut it), since I figure third-party plugins may define their own options whose keys Prettier itself can't know and thus can't possibly be listed here. So IMO the change I made here is a fix and the type was incorrect before. However...\r\n\r\n> I use `keyof Options` to get the known keys\r\n\r\n... this *does* seem like it might be a legit use-case that I've broken. It might make sense to split this into two types - one that just has the known keys, and one that allows arbitrary additional keys. (I'd be curious to know what you need to use `keyof Options` for, though?)\r\n\r\nA quick tangent (that will ultimately be relevant): I want to comment that I kinda hate *lots* of things about the options objects & types as they exist right now:\r\n* the confusing type names (e.g. `RequiredOptions` - \"required\" in what sense?)\r\n* the confusing & arbitrary type hierarchy (`ParserOptions` extends `RequiredOptions` which extends `doc.Printer.Options`, so all printing options are also mandatory parsing options but not vice versa - why?!)\r\n* the fact that at runtime a load of extra stuff like a `printer` or `cursorNode` gets tacked onto the `options` object, and the existence of these extra keys isn't reflected in any of the types but *is* relied on by the underlying JS code. This is more fundamental than just being an issue with the TypeScript types; it's an issue with the underlying JS code, and I find it horrible for multiple reasons:\r\n  * some of these things, like `cursorNode`, seem to me like they are really part of the internal state of the formatting algorithm; it's unintuitive to call them \"options\"\r\n  * others are just methods of the parser being used that are getting shoved onto the options object as a way of passing them around (e.g. the `locStart` and `locEnd` functions); it's *again* unintuitive to me to call these \"options\".\r\n  * the gradual building up of options as Prettier runs makes it hard to know what keys are present on an \"options\" object when looking at a bit of the code in isolation. You need to understand the order in which things get added to options and where in the sequence the code you're looking at runs.\r\n  * as a consequence of the points above, it's *very* hard to figure out how to manually build a valid object to pass directly to some function that takes an options argument\r\n\r\nNote that the point above about stuff getting tacked onto options objects is why I had to liberalize the `RequiredOptions` type in this PR to even be able to pass a realistic options object to a parser in my test case without causing a type error, and thus is part of the chain of causation that leads to the backwards compatibility breakage. I didn't initially want to touch the types here *at all* but they were so broken that I literally couldn't write a test that passed a realistic options object without modifying the types at least a bit.\r\n\r\nI was trying to be surgical with my change in this PR here to avoid any breaking change (obviously I still failed!) but because of the points above I found touching this code at all pretty frustrating. If backwards compatibility weren't a concern, I'd want to refactor the innards a bunch, ripping the parser methods and state variables off the \"options\" objects and passing them around some other way. Since backwards compatibility _is_ a concern, I am not really sure what to do. But in my opinion the handling of \"options\" right now in the Prettier code is a mess, this PR only scratches the surface of it, and I don't really see a way to make it clean without significant breaking changes.\r\n\r\nWhether to make those changes or not, and whether to revert this PR or not, is a choice I leave to the maintainers; I've offered my two cents above but it's not my call to make!",
        "pr_file_module": null
      },
      {
        "comment_id": "1457424223",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15789,
        "pr_file": "src/index.d.ts",
        "discussion_id": "1456736092",
        "commented_code": "@@ -430,6 +424,22 @@ export interface RequiredOptions extends doc.printer.Options {\n    * @default false\n    */\n   singleAttributePerLine: boolean;\n+  /**\n+   * Use curious ternaries, with the question mark after the condition, instead\n+   * of on the same line as the consequent.\n+   * @default false\n+   */\n+  experimentalTernaries: boolean;\n+  /**\n+   * Put the `>` of a multi-line JSX element at the end of the last line instead of being alone on the next line.\n+   * @default false\n+   * @deprecated use bracketSameLine instead\n+   */\n+  jsxBracketSameLine?: boolean;\n+  /**\n+   * Arbitrary additional values on an options object are always allowed.\n+   */\n+  [_: string]: unknown;",
        "comment_created_at": "2024-01-18T13:15:01+00:00",
        "comment_author": "Sec-ant",
        "comment_body": "> I figure third-party plugins may define their own options whose keys Prettier itself can't know and thus can't possibly be listed here. So IMO the change I made here is a fix and the type was incorrect before.\r\n\r\n> It might make sense to split this into two types - one that just has the known keys, and one that allows arbitrary additional keys.\r\n\r\nI think the typical TypeScript way is to use [declaration merging](https://www.typescriptlang.org/docs/handbook/declaration-merging.html)?\r\n\r\n> I'd be curious to know what you need to use `keyof Options` for, though?\r\n\r\nIf you're interested, the place where I use it is [here](https://github.com/Sec-ant/prettier-plugin-embed/blob/3ffbe984fc6dec6194503f5e4f3ab6b2f7f93cb7/src/types.ts#L57). The `keyof` is indirectly called by [`Omit`](https://github.com/microsoft/TypeScript/blob/6add96fd18d126d1505de5d96f0df6a86e5f2c21/src/lib/es5.d.ts#L1605). I'm providing an `overrides`-like option for my plugin for users to override some of the options, and there're ones that cannot be overridden because of the way Prettier applies them. So I created this type to omit those options wanting to give users a hint of which options are supported and which are not.\r\n\r\n> I want to comment that I kinda hate lots of things about the options objects & types as they exist right now.\r\n\r\nBelieve me, I get it XD. I've also used lots of patches in my codebase to fight with the types in Prettier.\r\n\r\n> Whether to make those changes or not, and whether to revert this PR or not, is a choice I leave to the maintainers; I've offered my two cents above but it's not my call to make!\r\n\r\nSounds fair. The good news for me is that I can always strip all the index signatures first and then use `keyof` (or `Omit`) to get the literal keys, with the help of [a utility type](https://github.com/sindresorhus/type-fest/blob/main/source/omit-index-signature.d.ts).\r\n\r\nAnd thanks for your two cents. Have a good day!\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1457446523",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15789,
        "pr_file": "src/index.d.ts",
        "discussion_id": "1456736092",
        "commented_code": "@@ -430,6 +424,22 @@ export interface RequiredOptions extends doc.printer.Options {\n    * @default false\n    */\n   singleAttributePerLine: boolean;\n+  /**\n+   * Use curious ternaries, with the question mark after the condition, instead\n+   * of on the same line as the consequent.\n+   * @default false\n+   */\n+  experimentalTernaries: boolean;\n+  /**\n+   * Put the `>` of a multi-line JSX element at the end of the last line instead of being alone on the next line.\n+   * @default false\n+   * @deprecated use bracketSameLine instead\n+   */\n+  jsxBracketSameLine?: boolean;\n+  /**\n+   * Arbitrary additional values on an options object are always allowed.\n+   */\n+  [_: string]: unknown;",
        "comment_created_at": "2024-01-18T13:32:32+00:00",
        "comment_author": "JounQin",
        "comment_body": "I also think `Declaration Merging` is the right way to do this, a reality example here: https://github.com/eslint-types/define-config-plugin-types/blob/2c2ae3be59b31928e078de1199606e18d6acc957/types/import/index.d.ts#L3-L8",
        "pr_file_module": null
      },
      {
        "comment_id": "1458370500",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15789,
        "pr_file": "src/index.d.ts",
        "discussion_id": "1456736092",
        "commented_code": "@@ -430,6 +424,22 @@ export interface RequiredOptions extends doc.printer.Options {\n    * @default false\n    */\n   singleAttributePerLine: boolean;\n+  /**\n+   * Use curious ternaries, with the question mark after the condition, instead\n+   * of on the same line as the consequent.\n+   * @default false\n+   */\n+  experimentalTernaries: boolean;\n+  /**\n+   * Put the `>` of a multi-line JSX element at the end of the last line instead of being alone on the next line.\n+   * @default false\n+   * @deprecated use bracketSameLine instead\n+   */\n+  jsxBracketSameLine?: boolean;\n+  /**\n+   * Arbitrary additional values on an options object are always allowed.\n+   */\n+  [_: string]: unknown;",
        "comment_created_at": "2024-01-19T05:34:14+00:00",
        "comment_author": "JounQin",
        "comment_body": "The current `[_: string]: unknown;` will make typos unable to be checked.\r\n\r\ncc @fisker @sosukesuzuki ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1111561504",
    "pr_number": 14212,
    "pr_file": "src/index.d.ts",
    "created_at": "2023-02-20T07:19:05+00:00",
    "commented_code": "+// This is copied from `@types/prettier`\n+// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/5bb07fc4b087cb7ee91084afa6fe750551a7bbb1/types/prettier/index.d.ts\n+\n+// Minimum TypeScript Version: 4.2\n+\n+// Adding export {} here to shut off automatic exporting from index.d.ts. There\n+// are quite a few utility types here that don't need to be shipped with the\n+// exported module.\n+export {};\n+\n+// This utility is here to handle the case where you have an explicit union\n+// between string literals and the generic string type. It would normally\n+// resolve out to just the string type, but this generic LiteralUnion maintains\n+// the intellisense of the original union.\n+//\n+// It comes from this issue: microsoft/TypeScript#29729:\n+//   https://github.com/microsoft/TypeScript/issues/29729#issuecomment-700527227\n+export type LiteralUnion<T extends U, U = string> =\n+  | T\n+  | (Pick<U, never> & { _?: never | undefined });\n+\n+export type AST = any;\n+export type Doc = doc.builders.Doc;\n+\n+// The type of elements that make up the given array T.\n+type ArrayElement<T> = T extends Array<infer E> ? E : never;\n+\n+// A union of the properties of the given object that are arrays.\n+type ArrayProperties<T> = {\n+  [K in keyof T]: NonNullable<T[K]> extends any[] ? K : never;\n+}[keyof T];\n+\n+// A union of the properties of the given array T that can be used to index it.\n+// If the array is a tuple, then that's going to be the explicit indices of the\n+// array, otherwise it's going to just be number.\n+type IndexProperties<T extends { length: number }> = IsTuple<T> extends true\n+  ? Exclude<Partial<T>[\"length\"], T[\"length\"]>\n+  : number;\n+\n+// Effectively performing T[P], except that it's telling TypeScript that it's\n+// safe to do this for tuples, arrays, or objects.\n+type IndexValue<T, P> = T extends any[]\n+  ? P extends number\n+    ? T[P]\n+    : never\n+  : P extends keyof T\n+  ? T[P]\n+  : never;\n+\n+// Determines if an object T is an array like string[] (in which case this\n+// evaluates to false) or a tuple like [string] (in which case this evaluates to\n+// true).\n+// eslint-disable-next-line @typescript-eslint/no-unused-vars\n+type IsTuple<T> = T extends []\n+  ? true\n+  : T extends [infer First, ...infer Remain]\n+  ? IsTuple<Remain>\n+  : false;\n+\n+type CallProperties<T> = T extends any[] ? IndexProperties<T> : keyof T;\n+type IterProperties<T> = T extends any[]\n+  ? IndexProperties<T>\n+  : ArrayProperties<T>;\n+\n+type CallCallback<T, U> = (path: AstPath<T>, index: number, value: any) => U;\n+type EachCallback<T> = (\n+  path: AstPath<ArrayElement<T>>,\n+  index: number,\n+  value: any\n+) => void;\n+type MapCallback<T, U> = (\n+  path: AstPath<ArrayElement<T>>,\n+  index: number,\n+  value: any\n+) => U;\n+\n+// https://github.com/prettier/prettier/blob/next/src/common/ast-path.js\n+export class AstPath<T = any> {\n+  constructor(value: T);\n+\n+  get key(): string | null;\n+  get index(): number | null;\n+  get node(): T;\n+  get parent(): T | null;\n+  get grandparent(): T | null;\n+  get isInArray(): boolean;\n+  get siblings(): T[] | null;\n+  get next(): T | null;\n+  get previous(): T | null;\n+  get isFirst(): boolean;\n+  get isLast(): boolean;\n+  get isRoot(): boolean;\n+  get root(): T;\n+  get ancestors(): T[];\n+\n+  stack: T[];\n+  callParent<U>(callback: (path: this) => U, count?: number): U;\n+  getName(): PropertyKey | null;\n+  getValue(): T;",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1111561504",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14212,
        "pr_file": "src/index.d.ts",
        "discussion_id": "1111561504",
        "commented_code": "@@ -0,0 +1,1130 @@\n+// This is copied from `@types/prettier`\n+// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/5bb07fc4b087cb7ee91084afa6fe750551a7bbb1/types/prettier/index.d.ts\n+\n+// Minimum TypeScript Version: 4.2\n+\n+// Adding export {} here to shut off automatic exporting from index.d.ts. There\n+// are quite a few utility types here that don't need to be shipped with the\n+// exported module.\n+export {};\n+\n+// This utility is here to handle the case where you have an explicit union\n+// between string literals and the generic string type. It would normally\n+// resolve out to just the string type, but this generic LiteralUnion maintains\n+// the intellisense of the original union.\n+//\n+// It comes from this issue: microsoft/TypeScript#29729:\n+//   https://github.com/microsoft/TypeScript/issues/29729#issuecomment-700527227\n+export type LiteralUnion<T extends U, U = string> =\n+  | T\n+  | (Pick<U, never> & { _?: never | undefined });\n+\n+export type AST = any;\n+export type Doc = doc.builders.Doc;\n+\n+// The type of elements that make up the given array T.\n+type ArrayElement<T> = T extends Array<infer E> ? E : never;\n+\n+// A union of the properties of the given object that are arrays.\n+type ArrayProperties<T> = {\n+  [K in keyof T]: NonNullable<T[K]> extends any[] ? K : never;\n+}[keyof T];\n+\n+// A union of the properties of the given array T that can be used to index it.\n+// If the array is a tuple, then that's going to be the explicit indices of the\n+// array, otherwise it's going to just be number.\n+type IndexProperties<T extends { length: number }> = IsTuple<T> extends true\n+  ? Exclude<Partial<T>[\"length\"], T[\"length\"]>\n+  : number;\n+\n+// Effectively performing T[P], except that it's telling TypeScript that it's\n+// safe to do this for tuples, arrays, or objects.\n+type IndexValue<T, P> = T extends any[]\n+  ? P extends number\n+    ? T[P]\n+    : never\n+  : P extends keyof T\n+  ? T[P]\n+  : never;\n+\n+// Determines if an object T is an array like string[] (in which case this\n+// evaluates to false) or a tuple like [string] (in which case this evaluates to\n+// true).\n+// eslint-disable-next-line @typescript-eslint/no-unused-vars\n+type IsTuple<T> = T extends []\n+  ? true\n+  : T extends [infer First, ...infer Remain]\n+  ? IsTuple<Remain>\n+  : false;\n+\n+type CallProperties<T> = T extends any[] ? IndexProperties<T> : keyof T;\n+type IterProperties<T> = T extends any[]\n+  ? IndexProperties<T>\n+  : ArrayProperties<T>;\n+\n+type CallCallback<T, U> = (path: AstPath<T>, index: number, value: any) => U;\n+type EachCallback<T> = (\n+  path: AstPath<ArrayElement<T>>,\n+  index: number,\n+  value: any\n+) => void;\n+type MapCallback<T, U> = (\n+  path: AstPath<ArrayElement<T>>,\n+  index: number,\n+  value: any\n+) => U;\n+\n+// https://github.com/prettier/prettier/blob/next/src/common/ast-path.js\n+export class AstPath<T = any> {\n+  constructor(value: T);\n+\n+  get key(): string | null;\n+  get index(): number | null;\n+  get node(): T;\n+  get parent(): T | null;\n+  get grandparent(): T | null;\n+  get isInArray(): boolean;\n+  get siblings(): T[] | null;\n+  get next(): T | null;\n+  get previous(): T | null;\n+  get isFirst(): boolean;\n+  get isLast(): boolean;\n+  get isRoot(): boolean;\n+  get root(): T;\n+  get ancestors(): T[];\n+\n+  stack: T[];\n+  callParent<U>(callback: (path: this) => U, count?: number): U;\n+  getName(): PropertyKey | null;\n+  getValue(): T;",
        "comment_created_at": "2023-02-20T07:19:05+00:00",
        "comment_author": "fisker",
        "comment_body": "Can we deprecate these two methods in favor of `.key` / `.index` / `.node` getter?",
        "pr_file_module": null
      },
      {
        "comment_id": "1111562891",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14212,
        "pr_file": "src/index.d.ts",
        "discussion_id": "1111561504",
        "commented_code": "@@ -0,0 +1,1130 @@\n+// This is copied from `@types/prettier`\n+// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/5bb07fc4b087cb7ee91084afa6fe750551a7bbb1/types/prettier/index.d.ts\n+\n+// Minimum TypeScript Version: 4.2\n+\n+// Adding export {} here to shut off automatic exporting from index.d.ts. There\n+// are quite a few utility types here that don't need to be shipped with the\n+// exported module.\n+export {};\n+\n+// This utility is here to handle the case where you have an explicit union\n+// between string literals and the generic string type. It would normally\n+// resolve out to just the string type, but this generic LiteralUnion maintains\n+// the intellisense of the original union.\n+//\n+// It comes from this issue: microsoft/TypeScript#29729:\n+//   https://github.com/microsoft/TypeScript/issues/29729#issuecomment-700527227\n+export type LiteralUnion<T extends U, U = string> =\n+  | T\n+  | (Pick<U, never> & { _?: never | undefined });\n+\n+export type AST = any;\n+export type Doc = doc.builders.Doc;\n+\n+// The type of elements that make up the given array T.\n+type ArrayElement<T> = T extends Array<infer E> ? E : never;\n+\n+// A union of the properties of the given object that are arrays.\n+type ArrayProperties<T> = {\n+  [K in keyof T]: NonNullable<T[K]> extends any[] ? K : never;\n+}[keyof T];\n+\n+// A union of the properties of the given array T that can be used to index it.\n+// If the array is a tuple, then that's going to be the explicit indices of the\n+// array, otherwise it's going to just be number.\n+type IndexProperties<T extends { length: number }> = IsTuple<T> extends true\n+  ? Exclude<Partial<T>[\"length\"], T[\"length\"]>\n+  : number;\n+\n+// Effectively performing T[P], except that it's telling TypeScript that it's\n+// safe to do this for tuples, arrays, or objects.\n+type IndexValue<T, P> = T extends any[]\n+  ? P extends number\n+    ? T[P]\n+    : never\n+  : P extends keyof T\n+  ? T[P]\n+  : never;\n+\n+// Determines if an object T is an array like string[] (in which case this\n+// evaluates to false) or a tuple like [string] (in which case this evaluates to\n+// true).\n+// eslint-disable-next-line @typescript-eslint/no-unused-vars\n+type IsTuple<T> = T extends []\n+  ? true\n+  : T extends [infer First, ...infer Remain]\n+  ? IsTuple<Remain>\n+  : false;\n+\n+type CallProperties<T> = T extends any[] ? IndexProperties<T> : keyof T;\n+type IterProperties<T> = T extends any[]\n+  ? IndexProperties<T>\n+  : ArrayProperties<T>;\n+\n+type CallCallback<T, U> = (path: AstPath<T>, index: number, value: any) => U;\n+type EachCallback<T> = (\n+  path: AstPath<ArrayElement<T>>,\n+  index: number,\n+  value: any\n+) => void;\n+type MapCallback<T, U> = (\n+  path: AstPath<ArrayElement<T>>,\n+  index: number,\n+  value: any\n+) => U;\n+\n+// https://github.com/prettier/prettier/blob/next/src/common/ast-path.js\n+export class AstPath<T = any> {\n+  constructor(value: T);\n+\n+  get key(): string | null;\n+  get index(): number | null;\n+  get node(): T;\n+  get parent(): T | null;\n+  get grandparent(): T | null;\n+  get isInArray(): boolean;\n+  get siblings(): T[] | null;\n+  get next(): T | null;\n+  get previous(): T | null;\n+  get isFirst(): boolean;\n+  get isLast(): boolean;\n+  get isRoot(): boolean;\n+  get root(): T;\n+  get ancestors(): T[];\n+\n+  stack: T[];\n+  callParent<U>(callback: (path: this) => U, count?: number): U;\n+  getName(): PropertyKey | null;\n+  getValue(): T;",
        "comment_created_at": "2023-02-20T07:21:17+00:00",
        "comment_author": "fisker",
        "comment_body": "Where is `PropertyKey` ? Can't see.",
        "pr_file_module": null
      },
      {
        "comment_id": "1111956085",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14212,
        "pr_file": "src/index.d.ts",
        "discussion_id": "1111561504",
        "commented_code": "@@ -0,0 +1,1130 @@\n+// This is copied from `@types/prettier`\n+// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/5bb07fc4b087cb7ee91084afa6fe750551a7bbb1/types/prettier/index.d.ts\n+\n+// Minimum TypeScript Version: 4.2\n+\n+// Adding export {} here to shut off automatic exporting from index.d.ts. There\n+// are quite a few utility types here that don't need to be shipped with the\n+// exported module.\n+export {};\n+\n+// This utility is here to handle the case where you have an explicit union\n+// between string literals and the generic string type. It would normally\n+// resolve out to just the string type, but this generic LiteralUnion maintains\n+// the intellisense of the original union.\n+//\n+// It comes from this issue: microsoft/TypeScript#29729:\n+//   https://github.com/microsoft/TypeScript/issues/29729#issuecomment-700527227\n+export type LiteralUnion<T extends U, U = string> =\n+  | T\n+  | (Pick<U, never> & { _?: never | undefined });\n+\n+export type AST = any;\n+export type Doc = doc.builders.Doc;\n+\n+// The type of elements that make up the given array T.\n+type ArrayElement<T> = T extends Array<infer E> ? E : never;\n+\n+// A union of the properties of the given object that are arrays.\n+type ArrayProperties<T> = {\n+  [K in keyof T]: NonNullable<T[K]> extends any[] ? K : never;\n+}[keyof T];\n+\n+// A union of the properties of the given array T that can be used to index it.\n+// If the array is a tuple, then that's going to be the explicit indices of the\n+// array, otherwise it's going to just be number.\n+type IndexProperties<T extends { length: number }> = IsTuple<T> extends true\n+  ? Exclude<Partial<T>[\"length\"], T[\"length\"]>\n+  : number;\n+\n+// Effectively performing T[P], except that it's telling TypeScript that it's\n+// safe to do this for tuples, arrays, or objects.\n+type IndexValue<T, P> = T extends any[]\n+  ? P extends number\n+    ? T[P]\n+    : never\n+  : P extends keyof T\n+  ? T[P]\n+  : never;\n+\n+// Determines if an object T is an array like string[] (in which case this\n+// evaluates to false) or a tuple like [string] (in which case this evaluates to\n+// true).\n+// eslint-disable-next-line @typescript-eslint/no-unused-vars\n+type IsTuple<T> = T extends []\n+  ? true\n+  : T extends [infer First, ...infer Remain]\n+  ? IsTuple<Remain>\n+  : false;\n+\n+type CallProperties<T> = T extends any[] ? IndexProperties<T> : keyof T;\n+type IterProperties<T> = T extends any[]\n+  ? IndexProperties<T>\n+  : ArrayProperties<T>;\n+\n+type CallCallback<T, U> = (path: AstPath<T>, index: number, value: any) => U;\n+type EachCallback<T> = (\n+  path: AstPath<ArrayElement<T>>,\n+  index: number,\n+  value: any\n+) => void;\n+type MapCallback<T, U> = (\n+  path: AstPath<ArrayElement<T>>,\n+  index: number,\n+  value: any\n+) => U;\n+\n+// https://github.com/prettier/prettier/blob/next/src/common/ast-path.js\n+export class AstPath<T = any> {\n+  constructor(value: T);\n+\n+  get key(): string | null;\n+  get index(): number | null;\n+  get node(): T;\n+  get parent(): T | null;\n+  get grandparent(): T | null;\n+  get isInArray(): boolean;\n+  get siblings(): T[] | null;\n+  get next(): T | null;\n+  get previous(): T | null;\n+  get isFirst(): boolean;\n+  get isLast(): boolean;\n+  get isRoot(): boolean;\n+  get root(): T;\n+  get ancestors(): T[];\n+\n+  stack: T[];\n+  callParent<U>(callback: (path: this) => U, count?: number): U;\n+  getName(): PropertyKey | null;\n+  getValue(): T;",
        "comment_created_at": "2023-02-20T13:23:08+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "`PropertyKey` is defined in TypeScript (`/node_modules/typescript`)",
        "pr_file_module": null
      }
    ]
  }
]