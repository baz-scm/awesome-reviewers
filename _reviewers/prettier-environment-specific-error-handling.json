[
  {
    "discussion_id": "1970813921",
    "pr_number": 17141,
    "pr_file": "src/language-js/parse/postprocess/index.js",
    "created_at": "2025-02-26T02:39:36+00:00",
    "commented_code": "});\n \n   if (isNonEmptyArray(ast.comments)) {\n-    let followingComment = ast.comments.at(-1);\n-    for (let i = ast.comments.length - 2; i >= 0; i--) {\n+    let followingComment;\n+    for (let i = ast.comments.length - 1; i >= 0; i--) {\n       const comment = ast.comments[i];\n+      assertComment(comment, text);",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1970813921",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17141,
        "pr_file": "src/language-js/parse/postprocess/index.js",
        "discussion_id": "1970813921",
        "commented_code": "@@ -108,10 +137,13 @@ function postprocess(ast, options) {\n   });\n \n   if (isNonEmptyArray(ast.comments)) {\n-    let followingComment = ast.comments.at(-1);\n-    for (let i = ast.comments.length - 2; i >= 0; i--) {\n+    let followingComment;\n+    for (let i = ast.comments.length - 1; i >= 0; i--) {\n       const comment = ast.comments[i];\n+      assertComment(comment, text);",
        "comment_created_at": "2025-02-26T02:39:36+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "I think assertions for production environments should be considered separately from assertions for development environments.\r\nTherefore, I propose to add a simple validation like the one below and remove the relevant part from `assertComment` and wrap `assertComment` call in `if (process.env.NODE_ENV !== \"production\")`:\r\n\r\n```js\r\nif (!isLineComment(comment) && !isBlockComment(comment)) {\r\n    throw new TypeError(`Unknown comment type: \"${comment.type}\".`);\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1971073380",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17141,
        "pr_file": "src/language-js/parse/postprocess/index.js",
        "discussion_id": "1970813921",
        "commented_code": "@@ -108,10 +137,13 @@ function postprocess(ast, options) {\n   });\n \n   if (isNonEmptyArray(ast.comments)) {\n-    let followingComment = ast.comments.at(-1);\n-    for (let i = ast.comments.length - 2; i >= 0; i--) {\n+    let followingComment;\n+    for (let i = ast.comments.length - 1; i >= 0; i--) {\n       const comment = ast.comments[i];\n+      assertComment(comment, text);",
        "comment_created_at": "2025-02-26T07:31:36+00:00",
        "comment_author": "fisker",
        "comment_body": "Make sense.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1781849587",
    "pr_number": 16700,
    "pr_file": "src/document/utils/assert-doc.js",
    "created_at": "2024-09-30T22:23:31+00:00",
    "commented_code": "}\n       };\n \n-export { assertDoc, assertDocArray };\n+const assertDocFillParts =\n+  process.env.NODE_ENV === \"production\"\n+    ? noop\n+    : /**\n+       * @param {Doc[]} parts\n+       */\n+      function (parts) {\n+        assertDocArray(parts);\n+        if (parts.length > 1 && cleanDoc(parts.at(-1)) === \"\") {\n+          // stripTrailingHardline can transform trailing hardline into empty string.\n+          // The trailing empty string is not a problem even if it's a line element.\n+          parts = parts.slice(0, -1);\n+        }\n+        for (const [i, doc] of parts.entries()) {\n+          if (i % 2 === 0) {\n+            continue;\n+          }\n+          if (!isValidSeparator(doc)) {\n+            const type = getDocType(doc);\n+            throw new Error(\n+              `Unexpected non-line-break doc at ${i}. Doc type is ${type}.`,\n+            );",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1781849587",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16700,
        "pr_file": "src/document/utils/assert-doc.js",
        "discussion_id": "1781849587",
        "commented_code": "@@ -34,4 +45,61 @@ const assertDocArray =\n         }\n       };\n \n-export { assertDoc, assertDocArray };\n+const assertDocFillParts =\n+  process.env.NODE_ENV === \"production\"\n+    ? noop\n+    : /**\n+       * @param {Doc[]} parts\n+       */\n+      function (parts) {\n+        assertDocArray(parts);\n+        if (parts.length > 1 && cleanDoc(parts.at(-1)) === \"\") {\n+          // stripTrailingHardline can transform trailing hardline into empty string.\n+          // The trailing empty string is not a problem even if it's a line element.\n+          parts = parts.slice(0, -1);\n+        }\n+        for (const [i, doc] of parts.entries()) {\n+          if (i % 2 === 0) {\n+            continue;\n+          }\n+          if (!isValidSeparator(doc)) {\n+            const type = getDocType(doc);\n+            throw new Error(\n+              `Unexpected non-line-break doc at ${i}. Doc type is ${type}.`,\n+            );",
        "comment_created_at": "2024-09-30T22:23:31+00:00",
        "comment_author": "seiyab",
        "comment_body": "Using `InvalidDocError` is not straightforward because `InvalidDocError` considers such documents valid. Error message gets weird and very hard to understand (message: \"doc is valid\").\r\nI use just Error here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "415812680",
    "pr_number": 8165,
    "pr_file": "src/language-html/printer-html.js",
    "created_at": "2020-04-27T13:28:51+00:00",
    "commented_code": "}\n \n function printOpeningTagEndMarker(node) {\n-  assert(!node.isSelfClosing);\n+  /* istanbul ignore next */\n+  if (node.isSelfClosing) {\n+    throw new Error(\"node.isSelfClosing should be false\");\n+  }",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "415812680",
        "repo_full_name": "prettier/prettier",
        "pr_number": 8165,
        "pr_file": "src/language-html/printer-html.js",
        "discussion_id": "415812680",
        "commented_code": "@@ -884,7 +883,10 @@ function printOpeningTagStartMarker(node) {\n }\n \n function printOpeningTagEndMarker(node) {\n-  assert(!node.isSelfClosing);\n+  /* istanbul ignore next */\n+  if (node.isSelfClosing) {\n+    throw new Error(\"node.isSelfClosing should be false\");\n+  }",
        "comment_created_at": "2020-04-27T13:28:51+00:00",
        "comment_author": "thorn0",
        "comment_body": ":-1: 4 lines instead of 1 and what for? Assertions are an idiomatic way to do the same thing this `if` does. I see no reason to remove them. If they're considered development-only, we should configure the build system to remove them.",
        "pr_file_module": null
      }
    ]
  }
]