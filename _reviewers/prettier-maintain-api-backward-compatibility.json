[
  {
    "discussion_id": "1637952718",
    "pr_number": 15709,
    "pr_file": "src/document/printer.js",
    "created_at": "2024-06-13T10:10:49+00:00",
    "commented_code": "return {\n       formatted: beforeCursor + aroundCursor + afterCursor,\n-      cursorNodeStart: beforeCursor.length,\n-      cursorNodeText: aroundCursor,\n+      cursorRegionStart: beforeCursor.length,\n+      cursorRegionText: aroundCursor,",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1637952718",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15709,
        "pr_file": "src/document/printer.js",
        "discussion_id": "1637952718",
        "commented_code": "@@ -648,8 +680,8 @@ function printDocToString(doc, options) {\n \n     return {\n       formatted: beforeCursor + aroundCursor + afterCursor,\n-      cursorNodeStart: beforeCursor.length,\n-      cursorNodeText: aroundCursor,\n+      cursorRegionStart: beforeCursor.length,\n+      cursorRegionText: aroundCursor,",
        "comment_created_at": "2024-06-13T10:10:49+00:00",
        "comment_author": "fisker",
        "comment_body": "`printDocToString` is a public API, let's not change the signature.",
        "pr_file_module": null
      },
      {
        "comment_id": "1771274513",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15709,
        "pr_file": "src/document/printer.js",
        "discussion_id": "1637952718",
        "commented_code": "@@ -648,8 +680,8 @@ function printDocToString(doc, options) {\n \n     return {\n       formatted: beforeCursor + aroundCursor + afterCursor,\n-      cursorNodeStart: beforeCursor.length,\n-      cursorNodeText: aroundCursor,\n+      cursorRegionStart: beforeCursor.length,\n+      cursorRegionText: aroundCursor,",
        "comment_created_at": "2024-09-23T12:01:27+00:00",
        "comment_author": "ExplodingCabbage",
        "comment_body": "Trouble is, the region we return here is no longer guaranteed to correspond to a single node. I guess I can leave the identifiers the same and add comments noting that they're misnomers if we want to preserve the signature, though.",
        "pr_file_module": null
      },
      {
        "comment_id": "1771527386",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15709,
        "pr_file": "src/document/printer.js",
        "discussion_id": "1637952718",
        "commented_code": "@@ -648,8 +680,8 @@ function printDocToString(doc, options) {\n \n     return {\n       formatted: beforeCursor + aroundCursor + afterCursor,\n-      cursorNodeStart: beforeCursor.length,\n-      cursorNodeText: aroundCursor,\n+      cursorRegionStart: beforeCursor.length,\n+      cursorRegionText: aroundCursor,",
        "comment_created_at": "2024-09-23T14:13:02+00:00",
        "comment_author": "ExplodingCabbage",
        "comment_body": "(Done)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1208012505",
    "pr_number": 14863,
    "pr_file": "src/language-js/parse/babel.js",
    "created_at": "2023-05-27T14:21:33+00:00",
    "commented_code": "\"throwExpressions\",\n     \"partialApplication\",\n     \"decorators\",\n-    \"importAssertions\",\n+    \"importAttributes\",",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1208012505",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14863,
        "pr_file": "src/language-js/parse/babel.js",
        "discussion_id": "1208012505",
        "commented_code": "@@ -36,7 +36,7 @@ const parseOptions = {\n     \"throwExpressions\",\n     \"partialApplication\",\n     \"decorators\",\n-    \"importAssertions\",\n+    \"importAttributes\",",
        "comment_created_at": "2023-05-27T14:21:33+00:00",
        "comment_author": "fisker",
        "comment_body": "I don't think we can drop support for assertions, Node.js already support import json file with that syntax, so people already use that syntax. Correct me if I'm wrong.",
        "pr_file_module": null
      },
      {
        "comment_id": "1208020702",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14863,
        "pr_file": "src/language-js/parse/babel.js",
        "discussion_id": "1208012505",
        "commented_code": "@@ -36,7 +36,7 @@ const parseOptions = {\n     \"throwExpressions\",\n     \"partialApplication\",\n     \"decorators\",\n-    \"importAssertions\",\n+    \"importAttributes\",",
        "comment_created_at": "2023-05-27T14:36:49+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "You are right. However, Import Assertions was Stage 3 and was dropped from TC39. Therefore, it would make sense for us to drop its syntax. And I think v3 is a good opportunity to do so.",
        "pr_file_module": null
      },
      {
        "comment_id": "1208063099",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14863,
        "pr_file": "src/language-js/parse/babel.js",
        "discussion_id": "1208012505",
        "commented_code": "@@ -36,7 +36,7 @@ const parseOptions = {\n     \"throwExpressions\",\n     \"partialApplication\",\n     \"decorators\",\n-    \"importAssertions\",\n+    \"importAttributes\",",
        "comment_created_at": "2023-05-27T16:53:35+00:00",
        "comment_author": "nicolo-ribaudo",
        "comment_body": "Import assertions will stick around for a while, probably at least until the last Node.js version without support for import attributes but with support for import assertions enabled by default will reach EOL.\r\n\r\nI wish tools encouraged users to migrate to attributes as soon as possible, but it might be too early for this breaking change.\r\n\r\nI know that Prettier tends to avoid options, but if you want to disable import assertions I'd recommend still making them opt-in.",
        "pr_file_module": null
      },
      {
        "comment_id": "1208067061",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14863,
        "pr_file": "src/language-js/parse/babel.js",
        "discussion_id": "1208012505",
        "commented_code": "@@ -36,7 +36,7 @@ const parseOptions = {\n     \"throwExpressions\",\n     \"partialApplication\",\n     \"decorators\",\n-    \"importAssertions\",\n+    \"importAttributes\",",
        "comment_created_at": "2023-05-27T17:05:18+00:00",
        "comment_author": "fisker",
        "comment_body": "Agree, we should be able to format runnable code.",
        "pr_file_module": null
      },
      {
        "comment_id": "1208907746",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14863,
        "pr_file": "src/language-js/parse/babel.js",
        "discussion_id": "1208012505",
        "commented_code": "@@ -36,7 +36,7 @@ const parseOptions = {\n     \"throwExpressions\",\n     \"partialApplication\",\n     \"decorators\",\n-    \"importAssertions\",\n+    \"importAttributes\",",
        "comment_created_at": "2023-05-29T05:20:17+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "Thank you @fisker and @nicolo-ribaudo. I got it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1209038447",
    "pr_number": 14863,
    "pr_file": "src/language-js/parse/babel.js",
    "created_at": "2023-05-29T08:03:33+00:00",
    "commented_code": "[\"pipelineOperator\", { proposal: \"minimal\" }],\n   [\"pipelineOperator\", { proposal: \"fsharp\" }],\n ];\n+\n+/**\n+ * The proposal ImportAssertions is now ImportAttributes.\n+ * Until a runtime that supports ImportAssertions comes to EoL, we will support it.\n+ * @type {Array<ParserPlugin>}\n+ */\n+const importAttributesPlugins = [\"importAttributes\", \"importAssertions\"];",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1209038447",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14863,
        "pr_file": "src/language-js/parse/babel.js",
        "discussion_id": "1209038447",
        "commented_code": "@@ -62,6 +61,14 @@ const pipelineOperatorPlugins = [\n   [\"pipelineOperator\", { proposal: \"minimal\" }],\n   [\"pipelineOperator\", { proposal: \"fsharp\" }],\n ];\n+\n+/**\n+ * The proposal ImportAssertions is now ImportAttributes.\n+ * Until a runtime that supports ImportAssertions comes to EoL, we will support it.\n+ * @type {Array<ParserPlugin>}\n+ */\n+const importAttributesPlugins = [\"importAttributes\", \"importAssertions\"];",
        "comment_created_at": "2023-05-29T08:03:33+00:00",
        "comment_author": "nicolo-ribaudo",
        "comment_body": "You can use `[\"importAttributes\", { deprecatedAssertSyntax: true }]` which supports both syntaxes.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1209539865",
    "pr_number": 14863,
    "pr_file": "src/language-js/print/module.js",
    "created_at": "2023-05-29T20:14:58+00:00",
    "commented_code": ");\n }\n \n-function printImportAssertions(path, options, print) {\n+/**\n+ * Print Import Attributes syntax.\n+ * If old ImportAssertions syntax is used, print them here.\n+ */\n+function printImportAttributes(path, options, print) {\n   const { node } = path;\n-  if (!isNonEmptyArray(node.assertions)) {\n-    return \"\";\n+\n+  // For @babel/parser\n+  if (isNonEmptyArray(node.attributes)) {\n+    const keyword = node.extra?.deprecatedAssertSyntax ? \"assert\" : \"with\";\n+    return [\n+      ` ${keyword} {`,\n+      options.bracketSpacing ? \" \" : \"\",\n+      join(\", \", path.map(print, \"attributes\")),\n+      options.bracketSpacing ? \" \" : \"\",\n+      \"}\",\n+    ];\n   }\n \n-  return [\n-    \" assert {\",\n-    options.bracketSpacing ? \" \" : \"\",\n-    join(\", \", path.map(print, \"assertions\")),\n-    options.bracketSpacing ? \" \" : \"\",\n-    \"}\",\n-  ];\n+  // For typescript-eslint, flow\n+  if (isNonEmptyArray(node.assertions)) {\n+    return [\n+      \" assert {\",\n+      options.bracketSpacing ? \" \" : \"\",\n+      join(\", \", path.map(print, \"assertions\")),\n+      options.bracketSpacing ? \" \" : \"\",\n+      \"}\",\n+    ];\n+  }\n+  return \"\";",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1209539865",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14863,
        "pr_file": "src/language-js/print/module.js",
        "discussion_id": "1209539865",
        "commented_code": "@@ -246,19 +246,36 @@ function shouldNotPrintSpecifiers(node, options) {\n   );\n }\n \n-function printImportAssertions(path, options, print) {\n+/**\n+ * Print Import Attributes syntax.\n+ * If old ImportAssertions syntax is used, print them here.\n+ */\n+function printImportAttributes(path, options, print) {\n   const { node } = path;\n-  if (!isNonEmptyArray(node.assertions)) {\n-    return \"\";\n+\n+  // For @babel/parser\n+  if (isNonEmptyArray(node.attributes)) {\n+    const keyword = node.extra?.deprecatedAssertSyntax ? \"assert\" : \"with\";\n+    return [\n+      ` ${keyword} {`,\n+      options.bracketSpacing ? \" \" : \"\",\n+      join(\", \", path.map(print, \"attributes\")),\n+      options.bracketSpacing ? \" \" : \"\",\n+      \"}\",\n+    ];\n   }\n \n-  return [\n-    \" assert {\",\n-    options.bracketSpacing ? \" \" : \"\",\n-    join(\", \", path.map(print, \"assertions\")),\n-    options.bracketSpacing ? \" \" : \"\",\n-    \"}\",\n-  ];\n+  // For typescript-eslint, flow\n+  if (isNonEmptyArray(node.assertions)) {\n+    return [\n+      \" assert {\",\n+      options.bracketSpacing ? \" \" : \"\",\n+      join(\", \", path.map(print, \"assertions\")),\n+      options.bracketSpacing ? \" \" : \"\",\n+      \"}\",\n+    ];\n+  }\n+  return \"\";",
        "comment_created_at": "2023-05-29T20:14:58+00:00",
        "comment_author": "fisker",
        "comment_body": "```js\r\nconst property = isNonEmptyArray(node.attributes) ? \"attributes\" : isNonEmptyArray(node.assertions) ? \"assertions\" : undefined;\r\n\r\nif (!property) {\r\n // ...\r\n}\r\n\r\nconst keyword = property === \"assertions\" || node.extra?.deprecatedAssertSyntax ? \"assert\" : \"with\";\r\n\r\n// ...\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1210456812",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14863,
        "pr_file": "src/language-js/print/module.js",
        "discussion_id": "1209539865",
        "commented_code": "@@ -246,19 +246,36 @@ function shouldNotPrintSpecifiers(node, options) {\n   );\n }\n \n-function printImportAssertions(path, options, print) {\n+/**\n+ * Print Import Attributes syntax.\n+ * If old ImportAssertions syntax is used, print them here.\n+ */\n+function printImportAttributes(path, options, print) {\n   const { node } = path;\n-  if (!isNonEmptyArray(node.assertions)) {\n-    return \"\";\n+\n+  // For @babel/parser\n+  if (isNonEmptyArray(node.attributes)) {\n+    const keyword = node.extra?.deprecatedAssertSyntax ? \"assert\" : \"with\";\n+    return [\n+      ` ${keyword} {`,\n+      options.bracketSpacing ? \" \" : \"\",\n+      join(\", \", path.map(print, \"attributes\")),\n+      options.bracketSpacing ? \" \" : \"\",\n+      \"}\",\n+    ];\n   }\n \n-  return [\n-    \" assert {\",\n-    options.bracketSpacing ? \" \" : \"\",\n-    join(\", \", path.map(print, \"assertions\")),\n-    options.bracketSpacing ? \" \" : \"\",\n-    \"}\",\n-  ];\n+  // For typescript-eslint, flow\n+  if (isNonEmptyArray(node.assertions)) {\n+    return [\n+      \" assert {\",\n+      options.bracketSpacing ? \" \" : \"\",\n+      join(\", \", path.map(print, \"assertions\")),\n+      options.bracketSpacing ? \" \" : \"\",\n+      \"}\",\n+    ];\n+  }\n+  return \"\";",
        "comment_created_at": "2023-05-30T15:27:56+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "[f1d6a38](https://github.com/prettier/prettier/pull/14863/commits/f1d6a3865d9f523fe311025a2522c145b50d0507)",
        "pr_file_module": null
      }
    ]
  }
]