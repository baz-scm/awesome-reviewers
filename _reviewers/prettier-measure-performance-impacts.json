[
  {
    "discussion_id": "2094243851",
    "pr_number": 17491,
    "pr_file": "src/language-js/parse/postprocess/index.js",
    "created_at": "2025-05-17T23:51:38+00:00",
    "commented_code": "return expression;\n         }\n \n-        const closestTypeCastCommentEnd = typeCastCommentsEnds.findLast(\n-          (end) => end <= locStart(node),\n+        // Keep ParenthesizedExpression nodes only if they have Closure-style type cast comments.\n+        const previousComment = ast.comments.findLast(\n+          (comment) => locEnd(comment) <= locStart(node),\n         );\n         const keepTypeCast =\n-          closestTypeCastCommentEnd !== undefined &&\n+          previousComment !== undefined &&\n+          isTypeCastComment(previousComment) &&\n           // check that there are only white spaces between the comment and the parenthesis\n-          text.slice(closestTypeCastCommentEnd, locStart(node)).trim()\n-            .length === 0;\n+          text.slice(locEnd(previousComment), locStart(node)).trim().length ===\n+            0;",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "2094243851",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17491,
        "pr_file": "src/language-js/parse/postprocess/index.js",
        "discussion_id": "2094243851",
        "commented_code": "@@ -103,14 +93,16 @@ function postprocess(ast, options) {\n           return expression;\n         }\n \n-        const closestTypeCastCommentEnd = typeCastCommentsEnds.findLast(\n-          (end) => end <= locStart(node),\n+        // Keep ParenthesizedExpression nodes only if they have Closure-style type cast comments.\n+        const previousComment = ast.comments.findLast(\n+          (comment) => locEnd(comment) <= locStart(node),\n         );\n         const keepTypeCast =\n-          closestTypeCastCommentEnd !== undefined &&\n+          previousComment !== undefined &&\n+          isTypeCastComment(previousComment) &&\n           // check that there are only white spaces between the comment and the parenthesis\n-          text.slice(closestTypeCastCommentEnd, locStart(node)).trim()\n-            .length === 0;\n+          text.slice(locEnd(previousComment), locStart(node)).trim().length ===\n+            0;",
        "comment_created_at": "2025-05-17T23:51:38+00:00",
        "comment_author": "fisker",
        "comment_body": "```suggestion\r\n          !/\\S/.test(text.slice(locEnd(previousComment), locStart(node)))\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2094245062",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17491,
        "pr_file": "src/language-js/parse/postprocess/index.js",
        "discussion_id": "2094243851",
        "commented_code": "@@ -103,14 +93,16 @@ function postprocess(ast, options) {\n           return expression;\n         }\n \n-        const closestTypeCastCommentEnd = typeCastCommentsEnds.findLast(\n-          (end) => end <= locStart(node),\n+        // Keep ParenthesizedExpression nodes only if they have Closure-style type cast comments.\n+        const previousComment = ast.comments.findLast(\n+          (comment) => locEnd(comment) <= locStart(node),\n         );\n         const keepTypeCast =\n-          closestTypeCastCommentEnd !== undefined &&\n+          previousComment !== undefined &&\n+          isTypeCastComment(previousComment) &&\n           // check that there are only white spaces between the comment and the parenthesis\n-          text.slice(closestTypeCastCommentEnd, locStart(node)).trim()\n-            .length === 0;\n+          text.slice(locEnd(previousComment), locStart(node)).trim().length ===\n+            0;",
        "comment_created_at": "2025-05-17T23:59:41+00:00",
        "comment_author": "ArnaudBarre",
        "comment_body": "[Micro benchmarking](https://perf.link/#eyJpZCI6InFlOTM3YnNydzJwIiwidGl0bGUiOiJGaW5kaW5nIG51bWJlcnMgaW4gYW4gYXJyYXkgb2YgMTAwMCIsImJlZm9yZSI6ImNvbnN0IHNob3J0ID0gXCIgICBcIjtcbmNvbnN0IGxvbmcgPSBcIiBjb25zdCBmb28gPSAyOyBjb25zdCBiYXIgPSA0XCI7XG5jb25zdCByZSA9IC9cXFMrLzsiLCJ0ZXN0cyI6W3sibmFtZSI6InNob3J0IHJlZ2V4IiwiY29kZSI6InJlLnRlc3Qoc2hvcnQpIiwicnVucyI6WzU5NDgwMDAsMTIzMTAwMCw0NDIyMDAwLDE1MzgwMDAsMjAwMCwzMDAwLDIwMDAsMjExNTAwMCw2ODMwMDAsNDA0NjAwMCwxMjMxMDAwLDYwMDAwMCw0NTE4MDAwLDEzNjQ5MDAwLDUzNDIwMDAsODI2MDAwLDE2NTY2MDAwLDI0OTMwMDAsNjk3MjAwMCwyOTQ1MDAwLDEzODAxMDAwLDM5NDUwMDAsODkwODAwMCwxMDAwLDE1MzQ4MDAwLDM3NzQwMDAsMzg5MjAwMCw3MTYzMDAwLDE2MTYwMDAsMTA4MDUwMDAsOTIzMDAwLDIwMDAsMTUwMDAwMDAsMTcxMTAwMCwyMTQxMDAwLDExNjUwMDAwLDI2MDQwMDAsODkyNDAwMCwyMDAwLDI2NDQwMDAsOTU5MTAwMCwxMDczNDAwMCw2MTUwMDAwLDk0NTUwMDAsMTIyMzAwMCwzNTUwMDAsMTUwMTYwMDAsMTc1ODMwMDAsMTIzMzEwMDAsOTM2NDAwMCwxMjMxMDAwLDIwMDAsMTEyMzQwMDAsNDE0NTAwMCw3MzQ5MDAwLDIwMDAsMTA5NTkwMDAsNTI2MDAwMCwxMDgwMDAwMCw1OTE1MDAwLDc5NzYwMDAsNDgyODAwMCw0NTAzMDAwLDIwMDAsNTgwODAwMCw2ODA5MDAwLDY4ODcwMDAsNjA2NjAwMCw5MjIwMDAwLDU0MzIwMDAsMTcxNTAwMCwxMjA0MDAwMCwzNjAyMDAwLDM4ODYwMDAsNTg4OTAwMCwxMjMxMDAwLDE0MzQ5MDAwLDk1NzAwMDAsODU5MzAwMCwyMDAwLDEwMzk5MDAwLDc1MDEwMDAsMTk0MDAwMCwxNDY4NDAwMCwyMDAwLDEwMzg2MDAwLDIzMDIwMDAsMTExOTQwMDAsODAyNjAwMCwzOTE4MDAwLDEyNjEyMDAwLDg4ODkwMDAsMTY1MzEwMDAsMTM4MDUwMDAsMTgzODAwMCwxMjMxMDAwLDEwMDAsNDExODAwMCw4NDQzMDAwLDEwOTQ3MDAwXSwib3BzIjo2MDU4NjAwfSx7Im5hbWUiOiJ0cmltIHNob3J0IiwiY29kZSI6InNob3J0LnRyaW0oKS5sZW5ndGggPT09IDAiLCJydW5zIjpbMzU4NDAwMCw0ODcwMDAsMjYwMTAwMCwxMjA5MDAwLDUxNjAwMCwxNTQxMDAwLDIzMjAwMCwxOTU0MDAwLDIwOTMwMDAsMTAxNDQwMDAsODY5MDAwLDEyMDkwMDAsNjQ0MDAwMCwxNzI1OTAwMCwxMjA5MDAwLDE3NTMwMDAsMTg4NDQwMDAsMzI2ODAwMCwxMjAxMzAwMCwyNTMwMDAwLDEzODU1MDAwLDIwODMwMDAsNzM5ODAwMCwxNjAwMCwxNTcxMjAwMCwxODY3MDAwLDMzMTAwMDAsNzU5MTAwMCwzNzA2MDAwLDExMTY1MDAwLDEyMDkwMDAsMTgxMjkwMDAsMTIyNjIwMDAsODE0MDAwMCwyMzY5MDAwLDE0NTAxMDAwLDYwMzAwMDAsNzIwNDAwMCwxMjA5MDAwLDM2MTEwMDAsNjQ5MTAwMCwxMzIwNDAwMCw1NDU0MDAwLDEyODgxMDAwLDEyMDkwMDAsMTIwOTAwMCwxOTk1NDAwMCwxOTg2NzAwMCwxMjY3NTAwMCw5MjcwMDAwLDMxMzAwMCwxNzc0MzAwMCw5NTI4MDAwLDY0MzkwMDAsOTcxNDAwMCw4ODE4MDAwLDk0MTIwMDAsOTU5MTAwMCw4MjgwMDAwLDI2NzYwMDAsMTAxNjQwMDAsMTY2MDAwMCw2ODA4MDAwLDE3Nzc1MDAwLDU1MzIwMDAsMjU1NDAwMCw2Mjc5MDAwLDM4ODMwMDAsNzY3NTAwMCwzMzAxMDAwLDUwMTAwMCwxNDgyMzAwMCw0NDA0MDAwLDY2NTkwMDAsNTcyNTAwMCwxOTI4MjAwMCwxMTU5NzAwMCwxMTMyMTAwMCw2ODQ1MDAwLDE4NzcxMDAwLDExODgyMDAwLDQ2OTUwMDAsMzE2NzAwMCwxODE4NzAwMCwxMjA5MDAwLDEyMjQ1MDAwLDE4Mjc2MDAwLDkyMjIwMDAsMTE2NTQwMDAsMzEwMTAwMCwxNDEzNjAwMCwxMzUxNzAwMCwxODAwMCwxNTQ5NzAwMCw0OTc3MDAwLDMyMjIwMDAsMTI0ODgwMDAsODcwODAwMCw0NDI1MDAwLDcxMjgwMDBdLCJvcHMiOjc1OTE2MzB9LHsibmFtZSI6ImxvbmcgIiwiY29kZSI6InJlLnRlc3QobG9uZykiLCJydW5zIjpbMTQzMTAwMCwxNDE4MDAwMCwyNzg3MDAwLDEwODIwMDAsMTAzMTAwMDAsMTMxMjcwMDAsODU2NDAwMCwxNTY0OTAwMCwyMDAwLDE1NjcwMDAsMTAwMCw1MDAwMDAsNTkwMDAsMTA4MjUwMDAsMTIzMTAwMCwxMDE0NzAwMCw3MDAxMDAwLDIzMjQwMDAsNjY5NTAwMCwxNDQ2ODAwMCwxMDQ1OTAwMCwxMjMxMDAwLDUyMjIwMDAsMTA2NTAwMDAsNzU5OTAwMCwxMjI2MDAwLDEyNTYwMDAsNTk1OTAwMCwxNzk4MDAwLDEyOTUwMDAsMTE4OTkwMDAsOTcwMjAwMCwzNzQ3MDAwLDQyNDcwMDAsMTIzMTAwMCwxMDYwODAwMCwyMjc5MDAwLDY4NjUwMDAsMTQ1ODcwMDAsMjA0MjAwMCwzNDMzMDAwLDc4NzkwMDAsNDA3NDAwMCwzNzM5MDAwLDE0MTc3MDAwLDkzMTMwMDAsOTg2NjAwMCwxMzQ2MTAwMCw3NTExMDAwLDIyMTUwMDAsMTE3MDgwMDAsMTI3MzIwMDAsNTE3OTAwMCwxMjc4ODAwMCw1NjY0MDAwLDcyNzIwMDAsNTY1OTAwMCwyNTgwMDAsNjg2NDAwMCwxODM4MDAwLDUwMjAwMDAsMTM3OTQwMDAsMTIzMTAwMCwxMTA2ODAwMCwzODYxMDAwLDEzOTEwMDAsMTIzMTAwMCwxMjMxMDAwLDE0NDEwMDAsMjM4NDAwMCw2MDQwMDAsMTA1MjAwMCw0NjMxMDAwLDIyODAwMDAsMTIyMzgwMDAsMTI0MzgwMDAsMTA1NDUwMDAsMzE4MDAwMCw2MjA0MDAwLDEzMzgxMDAwLDUxNzgwMDAsMTc2OTAwMCwxNTY0ODAwMCwxMTEyMTAwMCwyMDAwLDYzNzUwMDAsMTI5ODUwMDAsNjI2NjAwMCwyODgxMDAwLDI1MTkwMDAsMzg0MDAwMCwzODE4MDAwLDE0OTI0MDAwLDEyMDM2MDAwLDIwMjgwMDAsMTAwMDAsMTIyNDIwMDAsMzUzMDAwMCwxOTk1MDAwLDU2NzEwMDBdLCJvcHMiOjYxNTUyNTB9LHsibmFtZSI6IkZpbmQgaXRlbSA4MDAiLCJjb2RlIjoibG9uZy50cmltKCkubGVuZ3RoID09PSAwIiwicnVucyI6WzEzNjE3MDAwLDExNDA5MDAwLDE1NTAwMDAsNzIzMDAwMCwxMjY0ODAwMCwxNzE4OTAwMCw2OTM5MDAwLDk3NTkwMDAsNzA1NjAwMCw4NTA3MDAwLDEwODczMDAwLDEwNDE4MDAwLDUxMjAwMCwxNzYxMDAwLDE0OTAzMDAwLDEwMjkwMDAwLDEwMjg1MDAwLDEwMDgzMDAwLDg4MzAwMCwxMjUyNzAwMCwyOTMyMDAwLDEyMDkwMDAsMTQ5MDAwMCw2NTY1MDAwLDI0OTEwMDAsMTE1MjAwMDAsMjU5OTAwMCwxODk5MDAwLDEyNjQwMDAsMTk3NzAwMCwxMTk4OTAwMCwxMTkwMjAwMCw4MjMzMDAwLDEzMzY4MDAwLDU5MTAwMCwxMzMxODAwMCw4MzYwMDAsNTE3NjAwMCwxNjI2OTAwMCwzMTMyMDAwLDg0MjEwMDAsODE4NTAwMCwxODcxMDAwLDQzMTQwMDAsMTU1NjYwMDAsNzE4NDAwMCwxMjc3NTAwMCwxNjk0NTAwMCw2NTg1MDAwLDUxNzQwMDAsMTAyMDkwMDAsMTQ0NzQwMDAsNDIwMTAwMCwxNzkxNjAwMCw1Njg5MDAwLDk1MjEwMDAsMjMzMDAwMCwxMjA5MDAwLDU2ODkwMDAsMTIwOTAwMCw1ODgzMDAwLDE2NjIzMDAwLDI1NDUwMDAsNjY5OTAwMCwxODAwMCw5OTQwMDAsNzk5MDAwLDEyMDkwMDAsMzQ1NTAwMCwyMTg0MDAwLDE3MjMyMDAwLDQ2MDQwMDAsMTQ5MDMwMDAsNDcyMDAwLDEyMDkwMDAsNTQ3NjAwMCw4NDgxMDAwLDgyODkwMDAsMjE1MjAwMCwxMjA3OTAwMCw2NjY2MDAwLDY0ODAwMCwxNzExNjAwMCwxMDk2NzAwMCwxNDc5MTAwMCwxOTI1MDAwLDE1Nzg5MDAwLDc3OTMwMDAsMjUwMTAwMCwxMjA5MDAwLDU4ODkwMDAsNTE3NzAwMCwxNDQ5NDAwMCwxNzQ2MzAwMCwxNTI4ODAwMCwxMjUxNTAwMCw3ODQ1MDAwLDMwMDYwMDAsMjIwMjAwMCw0NDI4MDAwXSwib3BzIjo3Mzk2ODQwfV0sInVwZGF0ZWQiOiIyMDI1LTA1LTE3VDIzOjU5OjA2LjQ4OFoifQ%3D%3D) found that trim().length was faster to my surprise but that's was not huge so I'm fine with regex too, in theory this could be more optimized in the future",
        "pr_file_module": null
      },
      {
        "comment_id": "2094300126",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17491,
        "pr_file": "src/language-js/parse/postprocess/index.js",
        "discussion_id": "2094243851",
        "commented_code": "@@ -103,14 +93,16 @@ function postprocess(ast, options) {\n           return expression;\n         }\n \n-        const closestTypeCastCommentEnd = typeCastCommentsEnds.findLast(\n-          (end) => end <= locStart(node),\n+        // Keep ParenthesizedExpression nodes only if they have Closure-style type cast comments.\n+        const previousComment = ast.comments.findLast(\n+          (comment) => locEnd(comment) <= locStart(node),\n         );\n         const keepTypeCast =\n-          closestTypeCastCommentEnd !== undefined &&\n+          previousComment !== undefined &&\n+          isTypeCastComment(previousComment) &&\n           // check that there are only white spaces between the comment and the parenthesis\n-          text.slice(closestTypeCastCommentEnd, locStart(node)).trim()\n-            .length === 0;\n+          text.slice(locEnd(previousComment), locStart(node)).trim().length ===\n+            0;",
        "comment_created_at": "2025-05-18T01:28:10+00:00",
        "comment_author": "fisker",
        "comment_body": "JS is hard!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1726377383",
    "pr_number": 16595,
    "pr_file": "tests/unit/doc-printer.js",
    "created_at": "2024-08-22T05:48:01+00:00",
    "commented_code": "const lines = formatted.split(\"\n\");\n     expect(lines.length).toBeGreaterThan(1000);\n-    expect(endTime - startTime).toBeLessThan(1000);\n+    expect(endTime - startTime).toBeLessThan(100);",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1726377383",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16595,
        "pr_file": "tests/unit/doc-printer.js",
        "discussion_id": "1726377383",
        "commented_code": "@@ -40,6 +40,31 @@ test(\"`printDocToString` should not manipulate docs\", () => {\n \n     const lines = formatted.split(\"\\n\");\n     expect(lines.length).toBeGreaterThan(1000);\n-    expect(endTime - startTime).toBeLessThan(1000);\n+    expect(endTime - startTime).toBeLessThan(100);",
        "comment_created_at": "2024-08-22T05:48:01+00:00",
        "comment_author": "seiyab",
        "comment_body": "On my machine, it was:\r\n- 181.9 on origin/main\r\n- 13.3 on this branch\r\n\r\nIt get x10~ faster so dividing by 10 should be safe.",
        "pr_file_module": null
      },
      {
        "comment_id": "1727134112",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16595,
        "pr_file": "tests/unit/doc-printer.js",
        "discussion_id": "1726377383",
        "commented_code": "@@ -40,6 +40,31 @@ test(\"`printDocToString` should not manipulate docs\", () => {\n \n     const lines = formatted.split(\"\\n\");\n     expect(lines.length).toBeGreaterThan(1000);\n-    expect(endTime - startTime).toBeLessThan(1000);\n+    expect(endTime - startTime).toBeLessThan(100);",
        "comment_created_at": "2024-08-22T14:08:19+00:00",
        "comment_author": "seiyab",
        "comment_body": "Repeating the test, 181.9 on origin/main looks to be a bad case. It can be sometimes done in about 100ms.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1686382921",
    "pr_number": 16499,
    "pr_file": "src/document/printer.js",
    "created_at": "2024-07-22T11:14:46+00:00",
    "commented_code": "// Ideally we wouldn't mutate the array here but copying all the\n         // elements to a new array would make this algorithm quadratic,\n         // which is unusable for large arrays (e.g. large texts in JSX).\n-        parts.splice(0, 2);\n+        parts = parts.toSpliced(0, 2);",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1686382921",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16499,
        "pr_file": "src/document/printer.js",
        "discussion_id": "1686382921",
        "commented_code": "@@ -508,7 +508,7 @@ function printDocToString(doc, options) {\n         // Ideally we wouldn't mutate the array here but copying all the\n         // elements to a new array would make this algorithm quadratic,\n         // which is unusable for large arrays (e.g. large texts in JSX).\n-        parts.splice(0, 2);\n+        parts = parts.toSpliced(0, 2);",
        "comment_created_at": "2024-07-22T11:14:46+00:00",
        "comment_author": "fisker",
        "comment_body": "Ha, this is the root cause... It will be hard to fix, this function mutates array because this comment https://github.com/prettier/prettier/blob/484ecde4307d3f535256ef83e9b09c5a0445bc77/src/document/printer.js#L506\r\n\r\nI try to solve this problem before, but didn't get time to finish https://github.com/prettier/prettier/pull/13315",
        "pr_file_module": null
      },
      {
        "comment_id": "1686393542",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16499,
        "pr_file": "src/document/printer.js",
        "discussion_id": "1686382921",
        "commented_code": "@@ -508,7 +508,7 @@ function printDocToString(doc, options) {\n         // Ideally we wouldn't mutate the array here but copying all the\n         // elements to a new array would make this algorithm quadratic,\n         // which is unusable for large arrays (e.g. large texts in JSX).\n-        parts.splice(0, 2);\n+        parts = parts.toSpliced(0, 2);",
        "comment_created_at": "2024-07-22T11:24:16+00:00",
        "comment_author": "syi0808",
        "comment_body": "Or is there no way to copy doc? It would be nice if I can print it with doc I copied from expressionDoc in getTemplateLiteral..",
        "pr_file_module": null
      },
      {
        "comment_id": "1686396353",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16499,
        "pr_file": "src/document/printer.js",
        "discussion_id": "1686382921",
        "commented_code": "@@ -508,7 +508,7 @@ function printDocToString(doc, options) {\n         // Ideally we wouldn't mutate the array here but copying all the\n         // elements to a new array would make this algorithm quadratic,\n         // which is unusable for large arrays (e.g. large texts in JSX).\n-        parts.splice(0, 2);\n+        parts = parts.toSpliced(0, 2);",
        "comment_created_at": "2024-07-22T11:26:40+00:00",
        "comment_author": "fisker",
        "comment_body": "> Or is there no way to copy doc? \r\n\r\nCopy is not a good idea, the doc can be huge.\r\n\r\nLet's take my approach from #13315 . It creates mutable `fill` during print.",
        "pr_file_module": null
      },
      {
        "comment_id": "1686404799",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16499,
        "pr_file": "src/document/printer.js",
        "discussion_id": "1686382921",
        "commented_code": "@@ -508,7 +508,7 @@ function printDocToString(doc, options) {\n         // Ideally we wouldn't mutate the array here but copying all the\n         // elements to a new array would make this algorithm quadratic,\n         // which is unusable for large arrays (e.g. large texts in JSX).\n-        parts.splice(0, 2);\n+        parts = parts.toSpliced(0, 2);",
        "comment_created_at": "2024-07-22T11:34:33+00:00",
        "comment_author": "syi0808",
        "comment_body": "Sorry, I have a limited context. What work is left in that PR?\r\n\r\nFor now, I think we can add the current bug case as a test.",
        "pr_file_module": null
      },
      {
        "comment_id": "1686406648",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16499,
        "pr_file": "src/document/printer.js",
        "discussion_id": "1686382921",
        "commented_code": "@@ -508,7 +508,7 @@ function printDocToString(doc, options) {\n         // Ideally we wouldn't mutate the array here but copying all the\n         // elements to a new array would make this algorithm quadratic,\n         // which is unusable for large arrays (e.g. large texts in JSX).\n-        parts.splice(0, 2);\n+        parts = parts.toSpliced(0, 2);",
        "comment_created_at": "2024-07-22T11:36:17+00:00",
        "comment_author": "fisker",
        "comment_body": "Okay, I can take care of it, thanks for looking into the issue.",
        "pr_file_module": null
      },
      {
        "comment_id": "1686424652",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16499,
        "pr_file": "src/document/printer.js",
        "discussion_id": "1686382921",
        "commented_code": "@@ -508,7 +508,7 @@ function printDocToString(doc, options) {\n         // Ideally we wouldn't mutate the array here but copying all the\n         // elements to a new array would make this algorithm quadratic,\n         // which is unusable for large arrays (e.g. large texts in JSX).\n-        parts.splice(0, 2);\n+        parts = parts.toSpliced(0, 2);",
        "comment_created_at": "2024-07-22T11:50:53+00:00",
        "comment_author": "syi0808",
        "comment_body": "Ok. I understood to some extent the goal and context that PR is trying to reach.\r\n\r\nI think the implementation of PR is complete, is the test of performance the cause of the bottleneck? Please feel free to let me know if there is anything I can do to help!",
        "pr_file_module": null
      },
      {
        "comment_id": "1686445412",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16499,
        "pr_file": "src/document/printer.js",
        "discussion_id": "1686382921",
        "commented_code": "@@ -508,7 +508,7 @@ function printDocToString(doc, options) {\n         // Ideally we wouldn't mutate the array here but copying all the\n         // elements to a new array would make this algorithm quadratic,\n         // which is unusable for large arrays (e.g. large texts in JSX).\n-        parts.splice(0, 2);\n+        parts = parts.toSpliced(0, 2);",
        "comment_created_at": "2024-07-22T12:09:05+00:00",
        "comment_author": "fisker",
        "comment_body": "Yes, it's complete, but I was waiting for a better solution :smile:",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1113786083",
    "pr_number": 14396,
    "pr_file": "src/common/ast-path.js",
    "created_at": "2023-02-22T03:21:19+00:00",
    "commented_code": "/** @type {object} */\n   get node() {\n-    return this.stack.at(-1);\n+    // eslint-disable-next-line unicorn/prefer-at",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1113786083",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14396,
        "pr_file": "src/common/ast-path.js",
        "discussion_id": "1113786083",
        "commented_code": "@@ -16,7 +16,8 @@ class AstPath {\n \n   /** @type {object} */\n   get node() {\n-    return this.stack.at(-1);\n+    // eslint-disable-next-line unicorn/prefer-at",
        "comment_created_at": "2023-02-22T03:21:19+00:00",
        "comment_author": "fisker",
        "comment_body": "```suggestion\r\n    // eslint-disable-next-line unicorn/prefer-at -- `Array#at` is slow on Node.js v16 and v18\r\n```\r\n\r\nSo we'll know when to remove it.",
        "pr_file_module": null
      }
    ]
  }
]