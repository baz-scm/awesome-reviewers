[
  {
    "discussion_id": "1685745041",
    "pr_number": 16495,
    "pr_file": "docs/sharing-configurations.md",
    "created_at": "2024-07-21T13:53:42+00:00",
    "commented_code": "+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.json` which holds the shared prettier configuration values:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.json\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"main\": \"index.json\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.json` is where you put the shared configuration. This file has the same fields as [normal prettier configuration file](./configuration.md). In this example, we added a `$schema` field to enable IDE autocompletion too:\n+\n+```json\n+{\n+  \"$schema\": \"http://json.schemastore.org/prettierrc\",\n+  \"singleQuote\": true,\n+  \"trailingComma\": \"all\",\n+  \"endOfLine\": \"lf\"\n+}\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Sharing a JavaScript Configuration File\n+\n+Instead of a `.json` file, you can write your shared configuration in JavaScript as well. For example:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.mjs\n+\u2514\u2500\u2500 package.json\n+```\n+\n+```mjs\n+// index.mjs",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1685745041",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1685745041",
        "commented_code": "@@ -0,0 +1,171 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.json` which holds the shared prettier configuration values:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.json\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"main\": \"index.json\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.json` is where you put the shared configuration. This file has the same fields as [normal prettier configuration file](./configuration.md). In this example, we added a `$schema` field to enable IDE autocompletion too:\n+\n+```json\n+{\n+  \"$schema\": \"http://json.schemastore.org/prettierrc\",\n+  \"singleQuote\": true,\n+  \"trailingComma\": \"all\",\n+  \"endOfLine\": \"lf\"\n+}\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Sharing a JavaScript Configuration File\n+\n+Instead of a `.json` file, you can write your shared configuration in JavaScript as well. For example:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.mjs\n+\u2514\u2500\u2500 package.json\n+```\n+\n+```mjs\n+// index.mjs",
        "comment_created_at": "2024-07-21T13:53:42+00:00",
        "comment_author": "Lehoczky",
        "comment_body": "I don't know if it would be better to use a commonjs file with `module.exports = {}` but I thought this would at least move the ecosystem more towards a standard syntax. Hopefully it won't confuse people\ud83e\udd37\u200d\u2642\ufe0f",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1692898974",
    "pr_number": 16495,
    "pr_file": "docs/sharing-configurations.md",
    "created_at": "2024-07-26T11:02:34+00:00",
    "commented_code": "+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.json` which holds the shared prettier configuration values:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.json\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"main\": \"index.json\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.json` is where you put the shared configuration. This file has the same fields as [normal prettier configuration file](./configuration.md). In this example, we added a `$schema` field to enable IDE autocompletion too:\n+\n+```json\n+{\n+  \"$schema\": \"http://json.schemastore.org/prettierrc\",\n+  \"singleQuote\": true,\n+  \"trailingComma\": \"all\",\n+  \"endOfLine\": \"lf\"\n+}\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Sharing a JavaScript Configuration File",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1692898974",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1692898974",
        "commented_code": "@@ -0,0 +1,172 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.json` which holds the shared prettier configuration values:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.json\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"main\": \"index.json\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.json` is where you put the shared configuration. This file has the same fields as [normal prettier configuration file](./configuration.md). In this example, we added a `$schema` field to enable IDE autocompletion too:\n+\n+```json\n+{\n+  \"$schema\": \"http://json.schemastore.org/prettierrc\",\n+  \"singleQuote\": true,\n+  \"trailingComma\": \"all\",\n+  \"endOfLine\": \"lf\"\n+}\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Sharing a JavaScript Configuration File",
        "comment_created_at": "2024-07-26T11:02:34+00:00",
        "comment_author": "fisker",
        "comment_body": "How about just one ESM version?",
        "pr_file_module": null
      },
      {
        "comment_id": "1692918520",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1692898974",
        "commented_code": "@@ -0,0 +1,172 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.json` which holds the shared prettier configuration values:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.json\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"main\": \"index.json\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.json` is where you put the shared configuration. This file has the same fields as [normal prettier configuration file](./configuration.md). In this example, we added a `$schema` field to enable IDE autocompletion too:\n+\n+```json\n+{\n+  \"$schema\": \"http://json.schemastore.org/prettierrc\",\n+  \"singleQuote\": true,\n+  \"trailingComma\": \"all\",\n+  \"endOfLine\": \"lf\"\n+}\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Sharing a JavaScript Configuration File",
        "comment_created_at": "2024-07-26T11:19:28+00:00",
        "comment_author": "Lehoczky",
        "comment_body": "Do you mean to rewrite the first part of the guide to ESM instead of a `json` export? Sounds good to me!\r\n\r\nI will create an example repository then, because https://github.com/azz/prettier-config is using a json file. And the new example will also use the `exports` field.",
        "pr_file_module": null
      },
      {
        "comment_id": "1692923754",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1692898974",
        "commented_code": "@@ -0,0 +1,172 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.json` which holds the shared prettier configuration values:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.json\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"main\": \"index.json\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.json` is where you put the shared configuration. This file has the same fields as [normal prettier configuration file](./configuration.md). In this example, we added a `$schema` field to enable IDE autocompletion too:\n+\n+```json\n+{\n+  \"$schema\": \"http://json.schemastore.org/prettierrc\",\n+  \"singleQuote\": true,\n+  \"trailingComma\": \"all\",\n+  \"endOfLine\": \"lf\"\n+}\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Sharing a JavaScript Configuration File",
        "comment_created_at": "2024-07-26T11:23:08+00:00",
        "comment_author": "fisker",
        "comment_body": "Yes.",
        "pr_file_module": null
      },
      {
        "comment_id": "1692925551",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1692898974",
        "commented_code": "@@ -0,0 +1,172 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.json` which holds the shared prettier configuration values:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.json\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"main\": \"index.json\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.json` is where you put the shared configuration. This file has the same fields as [normal prettier configuration file](./configuration.md). In this example, we added a `$schema` field to enable IDE autocompletion too:\n+\n+```json\n+{\n+  \"$schema\": \"http://json.schemastore.org/prettierrc\",\n+  \"singleQuote\": true,\n+  \"trailingComma\": \"all\",\n+  \"endOfLine\": \"lf\"\n+}\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Sharing a JavaScript Configuration File",
        "comment_created_at": "2024-07-26T11:24:23+00:00",
        "comment_author": "fisker",
        "comment_body": "> I will create an example repository then, because [azz/prettier-config](https://github.com/azz/prettier-config) is using a json file. And the new example will also use the exports field.\r\n\r\n@azz Will you accept PR change your example to ESM?",
        "pr_file_module": null
      },
      {
        "comment_id": "1692982217",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1692898974",
        "commented_code": "@@ -0,0 +1,172 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.json` which holds the shared prettier configuration values:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.json\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"main\": \"index.json\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.json` is where you put the shared configuration. This file has the same fields as [normal prettier configuration file](./configuration.md). In this example, we added a `$schema` field to enable IDE autocompletion too:\n+\n+```json\n+{\n+  \"$schema\": \"http://json.schemastore.org/prettierrc\",\n+  \"singleQuote\": true,\n+  \"trailingComma\": \"all\",\n+  \"endOfLine\": \"lf\"\n+}\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Sharing a JavaScript Configuration File",
        "comment_created_at": "2024-07-26T12:18:41+00:00",
        "comment_author": "Lehoczky",
        "comment_body": "Done \ud83d\udc4d  Now the example uses an ESM file, and I've also added the `exports` and `type` fields to the example package.json.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1692999405",
    "pr_number": 16495,
    "pr_file": "docs/sharing-configurations.md",
    "created_at": "2024-07-26T12:34:54+00:00",
    "commented_code": "+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.js` which holds the shared prettier configuration object:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.js\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.js` is where you put the shared configuration. This file just exports a [regular prettier configuration](./configuration.md) with the same syntax and same options:\n+\n+```js\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1692999405",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1692999405",
        "commented_code": "@@ -0,0 +1,183 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.js` which holds the shared prettier configuration object:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.js\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.js` is where you put the shared configuration. This file just exports a [regular prettier configuration](./configuration.md) with the same syntax and same options:\n+\n+```js\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};",
        "comment_created_at": "2024-07-26T12:34:54+00:00",
        "comment_author": "fisker",
        "comment_body": "```suggestion\r\nimport usernamePrettierConfig from \"@username/prettier-config\";\r\n\r\n/**\r\n * @type {import(\"prettier\").Config}\r\n */\r\nconst config = {\r\n  ...usernamePrettierConfig,\r\n  semi: false,\r\n};\r\n\r\nexport default config;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1693040576",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1692999405",
        "commented_code": "@@ -0,0 +1,183 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.js` which holds the shared prettier configuration object:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.js\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.js` is where you put the shared configuration. This file just exports a [regular prettier configuration](./configuration.md) with the same syntax and same options:\n+\n+```js\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};",
        "comment_created_at": "2024-07-26T13:10:22+00:00",
        "comment_author": "Lehoczky",
        "comment_body": "https://github.com/prettier/prettier/pull/16495/commits/36a60170e7c4adc81693de75cfe354b6375fd1f6 \u2705",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1693006011",
    "pr_number": 16495,
    "pr_file": "docs/sharing-configurations.md",
    "created_at": "2024-07-26T12:41:17+00:00",
    "commented_code": "+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.js` which holds the shared prettier configuration object:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.js\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.js` is where you put the shared configuration. This file just exports a [regular prettier configuration](./configuration.md) with the same syntax and same options:\n+\n+```js\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Using Type Annotation in the Shared Config\n+\n+You can get type safety and autocomplete support in your shared configuration by using a `jsdoc` type annotation:\n+\n+```js\n+/**\n+ * @type {import(\"prettier\").Config}\n+ */\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  semi: false,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+In order to make this work, you have to install `prettier` as a `devDependency` for the project:\n+\n+```sh\n+npm install -D prettier\n+```\n+\n+Your `package.json` file should look like this now:\n+\n+```diff\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  },\n++ \"devDependencies\": {\n++   \"prettier\": \"^3.3.3\"\n++ }\n+}\n+```\n+\n+### Include Plugins in Shareable Configurations\n+\n+In case you want to use [plugins](./plugins.md) in your shared configuration, you need to declare those plugins in the config file's `plugin` array and as `dependencies` in `package.json`:\n+\n+```js\n+// index.js\n+const config = {\n+  singleQuote: true,\n+  plugins: [\"prettier-plugin-xml\"],\n+};",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1693006011",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1693006011",
        "commented_code": "@@ -0,0 +1,183 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.js` which holds the shared prettier configuration object:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.js\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.js` is where you put the shared configuration. This file just exports a [regular prettier configuration](./configuration.md) with the same syntax and same options:\n+\n+```js\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Using Type Annotation in the Shared Config\n+\n+You can get type safety and autocomplete support in your shared configuration by using a `jsdoc` type annotation:\n+\n+```js\n+/**\n+ * @type {import(\"prettier\").Config}\n+ */\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  semi: false,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+In order to make this work, you have to install `prettier` as a `devDependency` for the project:\n+\n+```sh\n+npm install -D prettier\n+```\n+\n+Your `package.json` file should look like this now:\n+\n+```diff\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  },\n++ \"devDependencies\": {\n++   \"prettier\": \"^3.3.3\"\n++ }\n+}\n+```\n+\n+### Include Plugins in Shareable Configurations\n+\n+In case you want to use [plugins](./plugins.md) in your shared configuration, you need to declare those plugins in the config file's `plugin` array and as `dependencies` in `package.json`:\n+\n+```js\n+// index.js\n+const config = {\n+  singleQuote: true,\n+  plugins: [\"prettier-plugin-xml\"],\n+};",
        "comment_created_at": "2024-07-26T12:41:17+00:00",
        "comment_author": "fisker",
        "comment_body": "The recommended way to use plugin should be\r\n\r\n```js\r\nimport * as prettierPluginXml ...\r\n\r\nconst config = {\r\n  singleQuote: true,\r\n  plugins: [prettierPluginXml],\r\n};\r\n```\r\n\r\nBut `vscode-prettier` cannot work since they transfer config to worker.\r\n\r\nMy suggestion is to use an absolute path/url instead, but `import.meta.resolve` is under `--experimental-import-meta-resolve` flag. Not sure what's the best way here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1693173420",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1693006011",
        "commented_code": "@@ -0,0 +1,183 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.js` which holds the shared prettier configuration object:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.js\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.js` is where you put the shared configuration. This file just exports a [regular prettier configuration](./configuration.md) with the same syntax and same options:\n+\n+```js\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Using Type Annotation in the Shared Config\n+\n+You can get type safety and autocomplete support in your shared configuration by using a `jsdoc` type annotation:\n+\n+```js\n+/**\n+ * @type {import(\"prettier\").Config}\n+ */\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  semi: false,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+In order to make this work, you have to install `prettier` as a `devDependency` for the project:\n+\n+```sh\n+npm install -D prettier\n+```\n+\n+Your `package.json` file should look like this now:\n+\n+```diff\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  },\n++ \"devDependencies\": {\n++   \"prettier\": \"^3.3.3\"\n++ }\n+}\n+```\n+\n+### Include Plugins in Shareable Configurations\n+\n+In case you want to use [plugins](./plugins.md) in your shared configuration, you need to declare those plugins in the config file's `plugin` array and as `dependencies` in `package.json`:\n+\n+```js\n+// index.js\n+const config = {\n+  singleQuote: true,\n+  plugins: [\"prettier-plugin-xml\"],\n+};",
        "comment_created_at": "2024-07-26T14:26:34+00:00",
        "comment_author": "Lehoczky",
        "comment_body": "Fortunately  `import.meta.resolve` by itself is not under a flag, only if someone wants to its second parameter:\r\n\r\n![image](https://github.com/user-attachments/assets/d0675af9-2f04-46d3-9522-e19c557439a0)\r\n\r\nMy issue is now that I've got an error from the `vscode-prettier` extension that it cannot find the module `@prettier/plugin-xml/src/plugin.js`. I'm gonna open a separate issue there.\r\n\r\nWhat do you think about merging this PR without this section about sharing configurations with plugins? It could be added later in a follow up PR easily.",
        "pr_file_module": null
      },
      {
        "comment_id": "1693179725",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1693006011",
        "commented_code": "@@ -0,0 +1,183 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.js` which holds the shared prettier configuration object:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.js\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.js` is where you put the shared configuration. This file just exports a [regular prettier configuration](./configuration.md) with the same syntax and same options:\n+\n+```js\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Using Type Annotation in the Shared Config\n+\n+You can get type safety and autocomplete support in your shared configuration by using a `jsdoc` type annotation:\n+\n+```js\n+/**\n+ * @type {import(\"prettier\").Config}\n+ */\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  semi: false,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+In order to make this work, you have to install `prettier` as a `devDependency` for the project:\n+\n+```sh\n+npm install -D prettier\n+```\n+\n+Your `package.json` file should look like this now:\n+\n+```diff\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  },\n++ \"devDependencies\": {\n++   \"prettier\": \"^3.3.3\"\n++ }\n+}\n+```\n+\n+### Include Plugins in Shareable Configurations\n+\n+In case you want to use [plugins](./plugins.md) in your shared configuration, you need to declare those plugins in the config file's `plugin` array and as `dependencies` in `package.json`:\n+\n+```js\n+// index.js\n+const config = {\n+  singleQuote: true,\n+  plugins: [\"prettier-plugin-xml\"],\n+};",
        "comment_created_at": "2024-07-26T14:31:14+00:00",
        "comment_author": "fisker",
        "comment_body": "> I'm gonna open a separate issue there.\r\n\r\nThe issue is here in Prettier.",
        "pr_file_module": null
      },
      {
        "comment_id": "1693180171",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1693006011",
        "commented_code": "@@ -0,0 +1,183 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.js` which holds the shared prettier configuration object:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.js\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.js` is where you put the shared configuration. This file just exports a [regular prettier configuration](./configuration.md) with the same syntax and same options:\n+\n+```js\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Using Type Annotation in the Shared Config\n+\n+You can get type safety and autocomplete support in your shared configuration by using a `jsdoc` type annotation:\n+\n+```js\n+/**\n+ * @type {import(\"prettier\").Config}\n+ */\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  semi: false,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+In order to make this work, you have to install `prettier` as a `devDependency` for the project:\n+\n+```sh\n+npm install -D prettier\n+```\n+\n+Your `package.json` file should look like this now:\n+\n+```diff\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  },\n++ \"devDependencies\": {\n++   \"prettier\": \"^3.3.3\"\n++ }\n+}\n+```\n+\n+### Include Plugins in Shareable Configurations\n+\n+In case you want to use [plugins](./plugins.md) in your shared configuration, you need to declare those plugins in the config file's `plugin` array and as `dependencies` in `package.json`:\n+\n+```js\n+// index.js\n+const config = {\n+  singleQuote: true,\n+  plugins: [\"prettier-plugin-xml\"],\n+};",
        "comment_created_at": "2024-07-26T14:31:38+00:00",
        "comment_author": "fisker",
        "comment_body": "> Fortunately import.meta.resolve by itself is not under a flag,\r\n\r\nWe still support Node.js v14.",
        "pr_file_module": null
      },
      {
        "comment_id": "1693182669",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1693006011",
        "commented_code": "@@ -0,0 +1,183 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.js` which holds the shared prettier configuration object:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.js\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.js` is where you put the shared configuration. This file just exports a [regular prettier configuration](./configuration.md) with the same syntax and same options:\n+\n+```js\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Using Type Annotation in the Shared Config\n+\n+You can get type safety and autocomplete support in your shared configuration by using a `jsdoc` type annotation:\n+\n+```js\n+/**\n+ * @type {import(\"prettier\").Config}\n+ */\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  semi: false,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+In order to make this work, you have to install `prettier` as a `devDependency` for the project:\n+\n+```sh\n+npm install -D prettier\n+```\n+\n+Your `package.json` file should look like this now:\n+\n+```diff\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  },\n++ \"devDependencies\": {\n++   \"prettier\": \"^3.3.3\"\n++ }\n+}\n+```\n+\n+### Include Plugins in Shareable Configurations\n+\n+In case you want to use [plugins](./plugins.md) in your shared configuration, you need to declare those plugins in the config file's `plugin` array and as `dependencies` in `package.json`:\n+\n+```js\n+// index.js\n+const config = {\n+  singleQuote: true,\n+  plugins: [\"prettier-plugin-xml\"],\n+};",
        "comment_created_at": "2024-07-26T14:32:57+00:00",
        "comment_author": "fisker",
        "comment_body": "> What do you think about merging this PR without this section about sharing configurations with plugins? It could be added later in a follow up PR easily.\r\n\r\nThe example should work for everyone, give me a while to think about it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1693296570",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1693006011",
        "commented_code": "@@ -0,0 +1,183 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.js` which holds the shared prettier configuration object:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.js\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.js` is where you put the shared configuration. This file just exports a [regular prettier configuration](./configuration.md) with the same syntax and same options:\n+\n+```js\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Using Type Annotation in the Shared Config\n+\n+You can get type safety and autocomplete support in your shared configuration by using a `jsdoc` type annotation:\n+\n+```js\n+/**\n+ * @type {import(\"prettier\").Config}\n+ */\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  semi: false,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+In order to make this work, you have to install `prettier` as a `devDependency` for the project:\n+\n+```sh\n+npm install -D prettier\n+```\n+\n+Your `package.json` file should look like this now:\n+\n+```diff\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  },\n++ \"devDependencies\": {\n++   \"prettier\": \"^3.3.3\"\n++ }\n+}\n+```\n+\n+### Include Plugins in Shareable Configurations\n+\n+In case you want to use [plugins](./plugins.md) in your shared configuration, you need to declare those plugins in the config file's `plugin` array and as `dependencies` in `package.json`:\n+\n+```js\n+// index.js\n+const config = {\n+  singleQuote: true,\n+  plugins: [\"prettier-plugin-xml\"],\n+};",
        "comment_created_at": "2024-07-26T16:01:31+00:00",
        "comment_author": "Lehoczky",
        "comment_body": "Sure thing! Take as much time as needed, I'm gonna update the PR when necessary^^ ",
        "pr_file_module": null
      },
      {
        "comment_id": "1780053583",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16495,
        "pr_file": "docs/sharing-configurations.md",
        "discussion_id": "1693006011",
        "commented_code": "@@ -0,0 +1,183 @@\n+---\n+id: sharing-configurations\n+title: Sharing configurations\n+---\n+\n+In case you have many different projects, it can be helpful to have a **shared configuration** which can be used in all of them, instead of copy-pasting the same config for every project.\n+\n+This page explains how to create, publish and consume a shareable config.\n+\n+## Creating a Shareable Config\n+\n+Sharable configs are just [npm packages](https://docs.npmjs.com/about-packages-and-modules#about-packages) that export a single [prettier config file](./configuration.md).\n+\n+Before we start, make sure you have:\n+\n+- An account for [npmjs.com](https://www.npmjs.com/) to publish the package\n+- Basic understating about [how to create a Node.js module](https://docs.npmjs.com/creating-node-js-modules)\n+\n+First, create a new package. We recommend creating a [scoped package](https://docs.npmjs.com/cli/v10/using-npm/scope) with the name `@username/prettier-config`.\n+\n+A minimal package should have at least two files. A `package.json` for the package configuration and an `index.js` which holds the shared prettier configuration object:\n+\n+```text\n+prettier-config/\n+\u251c\u2500\u2500 index.js\n+\u2514\u2500\u2500 package.json\n+```\n+\n+Example `package.json`:\n+\n+```json\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  }\n+}\n+```\n+\n+`index.js` is where you put the shared configuration. This file just exports a [regular prettier configuration](./configuration.md) with the same syntax and same options:\n+\n+```js\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+An example shared configuration repository is available [here](https://github.com/azz/prettier-config).\n+\n+## Publishing a Shareable Config\n+\n+Once you are ready, you can [publish your package to npm](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages#publishing-scoped-public-packages):\n+\n+```sh\n+npm publish --access public\n+```\n+\n+## Using a Shareable Config\n+\n+You first need to install your published configuration, for example:\n+\n+```sh\n+npm install @username/prettier-config --save-dev\n+```\n+\n+Then, you can reference it in your `package.json`:\n+\n+```json\n+{\n+  \"name\": \"my-cool-library\",\n+  \"version\": \"9000.0.1\",\n+  \"prettier\": \"@username/prettier-config\"\n+}\n+```\n+\n+If you don\u2019t want to use `package.json`, you can use any of the supported extensions to export a string, e.g. `.prettierrc.json`:\n+\n+```json\n+\"@company/prettier-config\"\n+```\n+\n+### Extending a Sharable Config\n+\n+To _extend_ the configuration to overwrite some properties from the shared configuration, import the file in a `.prettierrc.mjs` file and export the modifications, e.g:\n+\n+```js\n+import myPrettierConfig from \"@username/prettier-config\";\n+\n+export default {\n+  ...myPrettierConfig,\n+  semi: false,\n+};\n+```\n+\n+## Other examples\n+\n+### Using Type Annotation in the Shared Config\n+\n+You can get type safety and autocomplete support in your shared configuration by using a `jsdoc` type annotation:\n+\n+```js\n+/**\n+ * @type {import(\"prettier\").Config}\n+ */\n+const config = {\n+  trailingComma: \"es5\",\n+  tabWidth: 4,\n+  semi: false,\n+  singleQuote: true,\n+};\n+\n+export default config;\n+```\n+\n+In order to make this work, you have to install `prettier` as a `devDependency` for the project:\n+\n+```sh\n+npm install -D prettier\n+```\n+\n+Your `package.json` file should look like this now:\n+\n+```diff\n+{\n+  \"name\": \"@username/prettier-config\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"My personal Prettier config\",\n+  \"type\": \"module\",\n+  \"exports\": \"./index.js\",\n+  \"license\": \"MIT\",\n+  \"peerDependencies\": {\n+    \"prettier\": \">=2.0.0\"\n+  },\n++ \"devDependencies\": {\n++   \"prettier\": \"^3.3.3\"\n++ }\n+}\n+```\n+\n+### Include Plugins in Shareable Configurations\n+\n+In case you want to use [plugins](./plugins.md) in your shared configuration, you need to declare those plugins in the config file's `plugin` array and as `dependencies` in `package.json`:\n+\n+```js\n+// index.js\n+const config = {\n+  singleQuote: true,\n+  plugins: [\"prettier-plugin-xml\"],\n+};",
        "comment_created_at": "2024-09-29T14:06:38+00:00",
        "comment_author": "fisker",
        "comment_body": "Sorry for leaving this for such a long time. Let's merge with current example.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1032810561",
    "pr_number": 13896,
    "pr_file": "docs/install.md",
    "created_at": "2022-11-26T16:57:10+00:00",
    "commented_code": "<!--END_DOCUSAURUS_CODE_TABS-->\n \n-Then, create an empty config file to let editors and other tools know you are using Prettier:\n+Then, create an empty `prettier.config.js` file to let editors and other tools know you are using Prettier and add the content below:\n+```js\n+/** @type {import('prettier').Config} */\n+module.exports = {\n \n-<!-- Note: `echo \"{}\" > .prettierrc.json` would result in `\"{}\"<SPACE>` on Windows. The below version works in cmd.exe, bash, zsh, fish. -->\n-\n-```bash\n-echo {}> .prettierrc.json\n+}\n ```\n+This way, the editor will autocomplete the options you have available according to your installed version of Prettier.",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1032810561",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13896,
        "pr_file": "docs/install.md",
        "discussion_id": "1032810561",
        "commented_code": "@@ -20,13 +20,15 @@ yarn add --dev --exact prettier\n \n <!--END_DOCUSAURUS_CODE_TABS-->\n \n-Then, create an empty config file to let editors and other tools know you are using Prettier:\n+Then, create an empty `prettier.config.js` file to let editors and other tools know you are using Prettier and add the content below:\n+```js\n+/** @type {import('prettier').Config} */\n+module.exports = {\n \n-<!-- Note: `echo \"{}\" > .prettierrc.json` would result in `\"{}\"<SPACE>` on Windows. The below version works in cmd.exe, bash, zsh, fish. -->\n-\n-```bash\n-echo {}> .prettierrc.json\n+}\n ```\n+This way, the editor will autocomplete the options you have available according to your installed version of Prettier.",
        "comment_created_at": "2022-11-26T16:57:10+00:00",
        "comment_author": "fisker",
        "comment_body": "Shouldn't editor also do autocomplete to json file? https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/prettierrc.json",
        "pr_file_module": null
      },
      {
        "comment_id": "1032818865",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13896,
        "pr_file": "docs/install.md",
        "discussion_id": "1032810561",
        "commented_code": "@@ -20,13 +20,15 @@ yarn add --dev --exact prettier\n \n <!--END_DOCUSAURUS_CODE_TABS-->\n \n-Then, create an empty config file to let editors and other tools know you are using Prettier:\n+Then, create an empty `prettier.config.js` file to let editors and other tools know you are using Prettier and add the content below:\n+```js\n+/** @type {import('prettier').Config} */\n+module.exports = {\n \n-<!-- Note: `echo \"{}\" > .prettierrc.json` would result in `\"{}\"<SPACE>` on Windows. The below version works in cmd.exe, bash, zsh, fish. -->\n-\n-```bash\n-echo {}> .prettierrc.json\n+}\n ```\n+This way, the editor will autocomplete the options you have available according to your installed version of Prettier.",
        "comment_created_at": "2022-11-26T18:26:55+00:00",
        "comment_author": "kachkaev",
        "comment_body": "JSON files don\u2019t allow `require(\"some-prettier-plugin\")` and not using `require` does not work in Yarn PnP. On the other hand `/** @type {import('prettier').Config} */`, only works if [`@types/prettier`](https://www.npmjs.com/package/@types/prettier) is installed.",
        "pr_file_module": null
      },
      {
        "comment_id": "1032830756",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13896,
        "pr_file": "docs/install.md",
        "discussion_id": "1032810561",
        "commented_code": "@@ -20,13 +20,15 @@ yarn add --dev --exact prettier\n \n <!--END_DOCUSAURUS_CODE_TABS-->\n \n-Then, create an empty config file to let editors and other tools know you are using Prettier:\n+Then, create an empty `prettier.config.js` file to let editors and other tools know you are using Prettier and add the content below:\n+```js\n+/** @type {import('prettier').Config} */\n+module.exports = {\n \n-<!-- Note: `echo \"{}\" > .prettierrc.json` would result in `\"{}\"<SPACE>` on Windows. The below version works in cmd.exe, bash, zsh, fish. -->\n-\n-```bash\n-echo {}> .prettierrc.json\n+}\n ```\n+This way, the editor will autocomplete the options you have available according to your installed version of Prettier.",
        "comment_created_at": "2022-11-26T20:43:36+00:00",
        "comment_author": "danielturus",
        "comment_body": "> On the other hand `/** @type {import('prettier').Config} */`, only works if [`@types/prettier`](https://www.npmjs.com/package/@types/prettier) is installed.\r\n\r\nGreat observation, maybe this should be added in the docs also?",
        "pr_file_module": null
      },
      {
        "comment_id": "1033157692",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13896,
        "pr_file": "docs/install.md",
        "discussion_id": "1032810561",
        "commented_code": "@@ -20,13 +20,15 @@ yarn add --dev --exact prettier\n \n <!--END_DOCUSAURUS_CODE_TABS-->\n \n-Then, create an empty config file to let editors and other tools know you are using Prettier:\n+Then, create an empty `prettier.config.js` file to let editors and other tools know you are using Prettier and add the content below:\n+```js\n+/** @type {import('prettier').Config} */\n+module.exports = {\n \n-<!-- Note: `echo \"{}\" > .prettierrc.json` would result in `\"{}\"<SPACE>` on Windows. The below version works in cmd.exe, bash, zsh, fish. -->\n-\n-```bash\n-echo {}> .prettierrc.json\n+}\n ```\n+This way, the editor will autocomplete the options you have available according to your installed version of Prettier.",
        "comment_created_at": "2022-11-28T06:10:53+00:00",
        "comment_author": "fisker",
        "comment_body": "![image](https://user-images.githubusercontent.com/172584/204206097-ddd48433-790e-4b1d-b0d0-ecebc2cff834.png)\r\n![image](https://user-images.githubusercontent.com/172584/204206163-4ba68d07-fc7c-4090-b85d-0960762d0b97.png)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1033534104",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13896,
        "pr_file": "docs/install.md",
        "discussion_id": "1032810561",
        "commented_code": "@@ -20,13 +20,15 @@ yarn add --dev --exact prettier\n \n <!--END_DOCUSAURUS_CODE_TABS-->\n \n-Then, create an empty config file to let editors and other tools know you are using Prettier:\n+Then, create an empty `prettier.config.js` file to let editors and other tools know you are using Prettier and add the content below:\n+```js\n+/** @type {import('prettier').Config} */\n+module.exports = {\n \n-<!-- Note: `echo \"{}\" > .prettierrc.json` would result in `\"{}\"<SPACE>` on Windows. The below version works in cmd.exe, bash, zsh, fish. -->\n-\n-```bash\n-echo {}> .prettierrc.json\n+}\n ```\n+This way, the editor will autocomplete the options you have available according to your installed version of Prettier.",
        "comment_created_at": "2022-11-28T13:20:35+00:00",
        "comment_author": "danielturus",
        "comment_body": "Yup, can confirm it's working on VSCode. I'm closing my PR.",
        "pr_file_module": null
      },
      {
        "comment_id": "1043297304",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13896,
        "pr_file": "docs/install.md",
        "discussion_id": "1032810561",
        "commented_code": "@@ -20,13 +20,15 @@ yarn add --dev --exact prettier\n \n <!--END_DOCUSAURUS_CODE_TABS-->\n \n-Then, create an empty config file to let editors and other tools know you are using Prettier:\n+Then, create an empty `prettier.config.js` file to let editors and other tools know you are using Prettier and add the content below:\n+```js\n+/** @type {import('prettier').Config} */\n+module.exports = {\n \n-<!-- Note: `echo \"{}\" > .prettierrc.json` would result in `\"{}\"<SPACE>` on Windows. The below version works in cmd.exe, bash, zsh, fish. -->\n-\n-```bash\n-echo {}> .prettierrc.json\n+}\n ```\n+This way, the editor will autocomplete the options you have available according to your installed version of Prettier.",
        "comment_created_at": "2022-12-08T12:26:37+00:00",
        "comment_author": "karlhorky",
        "comment_body": "This only works with JSON files.\r\n\r\nWith `.prettierrc.js`, `prettier.config.cjs` and other JS file formats this does not show errors:\r\n\r\n<img width=\"266\" alt=\"Screenshot 2022-12-08 at 13 23 48\" src=\"https://user-images.githubusercontent.com/1935696/206445606-1602f94e-c26b-461b-b89e-b999d2cf018a.png\">\r\n\r\nOpened a followup PR for this: https://github.com/prettier/prettier/pull/13959",
        "pr_file_module": null
      }
    ]
  }
]