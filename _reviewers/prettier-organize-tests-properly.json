[
  {
    "discussion_id": "949967135",
    "pr_number": 13315,
    "pr_file": "tests/unit/doc-printer.js",
    "created_at": "2022-08-19T08:51:39+00:00",
    "commented_code": "+import { fill, join, line } from \"../../src/document/builders.js\";\n+import { printDocToString } from \"../../src/document/printer.js\";\n+\n+test(\"`printDocToString` should not manipulate docs\", () => {\n+  const printOptions = { printWidth: 40, tabWidth: 2 };\n+  const doc = fill(\n+    join(\n+      line,\n+      Array.from({ length: 255 }, (_, index) => String(index + 1))\n+    )\n+  );\n+\n+  expect(doc.parts.length).toBe(255 + 254);\n+\n+  const { formatted: firstPrint } = printDocToString(doc, printOptions);\n+\n+  expect(doc.parts.length).toBe(255 + 254);\n+\n+  const { formatted: secondPrint } = printDocToString(doc, printOptions);\n+\n+  expect(firstPrint).toBe(secondPrint);\n+\n+  {\n+    // About 1000 lines , 3263\n+    const WORD = \"word\";\n+    const hugeParts = join(\n+      line,\n+      Array.from(\n+        { length: 1000 * Math.ceil(printOptions.printWidth / WORD.length) },\n+        () => WORD\n+      )\n+    );\n+    const orignalLength = hugeParts.length;\n+\n+    const startTime = performance.now();\n+    const { formatted } = printDocToString(fill(hugeParts), printOptions);\n+    const endTime = performance.now();\n+    expect(hugeParts.length).toBe(orignalLength);\n+\n+    const lines = formatted.split(\"\n\");\n+    expect(lines.length).toBeGreaterThan(1000);\n+    expect(endTime - startTime).toBeLessThan(1000);",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "949967135",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13315,
        "pr_file": "tests/unit/doc-printer.js",
        "discussion_id": "949967135",
        "commented_code": "@@ -0,0 +1,44 @@\n+import { fill, join, line } from \"../../src/document/builders.js\";\n+import { printDocToString } from \"../../src/document/printer.js\";\n+\n+test(\"`printDocToString` should not manipulate docs\", () => {\n+  const printOptions = { printWidth: 40, tabWidth: 2 };\n+  const doc = fill(\n+    join(\n+      line,\n+      Array.from({ length: 255 }, (_, index) => String(index + 1))\n+    )\n+  );\n+\n+  expect(doc.parts.length).toBe(255 + 254);\n+\n+  const { formatted: firstPrint } = printDocToString(doc, printOptions);\n+\n+  expect(doc.parts.length).toBe(255 + 254);\n+\n+  const { formatted: secondPrint } = printDocToString(doc, printOptions);\n+\n+  expect(firstPrint).toBe(secondPrint);\n+\n+  {\n+    // About 1000 lines , 3263\n+    const WORD = \"word\";\n+    const hugeParts = join(\n+      line,\n+      Array.from(\n+        { length: 1000 * Math.ceil(printOptions.printWidth / WORD.length) },\n+        () => WORD\n+      )\n+    );\n+    const orignalLength = hugeParts.length;\n+\n+    const startTime = performance.now();\n+    const { formatted } = printDocToString(fill(hugeParts), printOptions);\n+    const endTime = performance.now();\n+    expect(hugeParts.length).toBe(orignalLength);\n+\n+    const lines = formatted.split(\"\\n\");\n+    expect(lines.length).toBeGreaterThan(1000);\n+    expect(endTime - startTime).toBeLessThan(1000);",
        "comment_created_at": "2022-08-19T08:51:39+00:00",
        "comment_author": "fisker",
        "comment_body": "Better idea to test?",
        "pr_file_module": null
      },
      {
        "comment_id": "1687343131",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13315,
        "pr_file": "tests/unit/doc-printer.js",
        "discussion_id": "949967135",
        "commented_code": "@@ -0,0 +1,44 @@\n+import { fill, join, line } from \"../../src/document/builders.js\";\n+import { printDocToString } from \"../../src/document/printer.js\";\n+\n+test(\"`printDocToString` should not manipulate docs\", () => {\n+  const printOptions = { printWidth: 40, tabWidth: 2 };\n+  const doc = fill(\n+    join(\n+      line,\n+      Array.from({ length: 255 }, (_, index) => String(index + 1))\n+    )\n+  );\n+\n+  expect(doc.parts.length).toBe(255 + 254);\n+\n+  const { formatted: firstPrint } = printDocToString(doc, printOptions);\n+\n+  expect(doc.parts.length).toBe(255 + 254);\n+\n+  const { formatted: secondPrint } = printDocToString(doc, printOptions);\n+\n+  expect(firstPrint).toBe(secondPrint);\n+\n+  {\n+    // About 1000 lines , 3263\n+    const WORD = \"word\";\n+    const hugeParts = join(\n+      line,\n+      Array.from(\n+        { length: 1000 * Math.ceil(printOptions.printWidth / WORD.length) },\n+        () => WORD\n+      )\n+    );\n+    const orignalLength = hugeParts.length;\n+\n+    const startTime = performance.now();\n+    const { formatted } = printDocToString(fill(hugeParts), printOptions);\n+    const endTime = performance.now();\n+    expect(hugeParts.length).toBe(orignalLength);\n+\n+    const lines = formatted.split(\"\\n\");\n+    expect(lines.length).toBeGreaterThan(1000);\n+    expect(endTime - startTime).toBeLessThan(1000);",
        "comment_created_at": "2024-07-23T02:33:45+00:00",
        "comment_author": "syi0808",
        "comment_body": "How about separating the performance test from the normal test? It seems to be affected by the environment so much that it can be hazard.\r\n\r\nIf there is room for more performance tests to be written in the future, I would like to try to build an environment for performance tests. (e.g. compare banchmark results between target and source branch and comment compared result in pr)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1692937336",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13315,
        "pr_file": "tests/unit/doc-printer.js",
        "discussion_id": "949967135",
        "commented_code": "@@ -0,0 +1,44 @@\n+import { fill, join, line } from \"../../src/document/builders.js\";\n+import { printDocToString } from \"../../src/document/printer.js\";\n+\n+test(\"`printDocToString` should not manipulate docs\", () => {\n+  const printOptions = { printWidth: 40, tabWidth: 2 };\n+  const doc = fill(\n+    join(\n+      line,\n+      Array.from({ length: 255 }, (_, index) => String(index + 1))\n+    )\n+  );\n+\n+  expect(doc.parts.length).toBe(255 + 254);\n+\n+  const { formatted: firstPrint } = printDocToString(doc, printOptions);\n+\n+  expect(doc.parts.length).toBe(255 + 254);\n+\n+  const { formatted: secondPrint } = printDocToString(doc, printOptions);\n+\n+  expect(firstPrint).toBe(secondPrint);\n+\n+  {\n+    // About 1000 lines , 3263\n+    const WORD = \"word\";\n+    const hugeParts = join(\n+      line,\n+      Array.from(\n+        { length: 1000 * Math.ceil(printOptions.printWidth / WORD.length) },\n+        () => WORD\n+      )\n+    );\n+    const orignalLength = hugeParts.length;\n+\n+    const startTime = performance.now();\n+    const { formatted } = printDocToString(fill(hugeParts), printOptions);\n+    const endTime = performance.now();\n+    expect(hugeParts.length).toBe(orignalLength);\n+\n+    const lines = formatted.split(\"\\n\");\n+    expect(lines.length).toBeGreaterThan(1000);\n+    expect(endTime - startTime).toBeLessThan(1000);",
        "comment_created_at": "2024-07-26T11:35:52+00:00",
        "comment_author": "fisker",
        "comment_body": "Happy to see a separate test for this.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1051569215",
    "pr_number": 13917,
    "pr_file": "tests/unit/doc-builders.js",
    "created_at": "2022-12-18T10:15:22+00:00",
    "commented_code": "+import {\n+  join,\n+  group,\n+  conditionalGroup,\n+  fill,\n+  lineSuffix,\n+  ifBreak,\n+  indent,\n+  indentIfBreak,\n+  align,\n+  addAlignmentToDoc,\n+  markAsRoot,\n+  dedentToRoot,\n+  dedent,\n+  label,\n+} from \"../../src/document/builders.js\";\n+import InvalidDocError from \"../../src/document/invalid-doc-error.js\";\n+\n+const invalidDoc = { type: \"invalid-type\" };\n+const validDoc = \"string\";\n+const notArray = {};\n+test(\"Invalid usage\", () => {",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1051569215",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13917,
        "pr_file": "tests/unit/doc-builders.js",
        "discussion_id": "1051569215",
        "commented_code": "@@ -0,0 +1,100 @@\n+import {\n+  join,\n+  group,\n+  conditionalGroup,\n+  fill,\n+  lineSuffix,\n+  ifBreak,\n+  indent,\n+  indentIfBreak,\n+  align,\n+  addAlignmentToDoc,\n+  markAsRoot,\n+  dedentToRoot,\n+  dedent,\n+  label,\n+} from \"../../src/document/builders.js\";\n+import InvalidDocError from \"../../src/document/invalid-doc-error.js\";\n+\n+const invalidDoc = { type: \"invalid-type\" };\n+const validDoc = \"string\";\n+const notArray = {};\n+test(\"Invalid usage\", () => {",
        "comment_created_at": "2022-12-18T10:15:22+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "This is actually for both invalid and valid. We should separate tests like:\r\n\r\n```js\r\ndescribe(\"doc builders\", () => {\r\n  test(\"Invalid usage\", () => {\r\n    // tests\r\n  });\r\n  test(\"Valid usage\", () => {\r\n    // tests\r\n  });\r\n});\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "771422349",
    "pr_number": 11979,
    "pr_file": "tests/integration/__tests__/early-exit.js",
    "created_at": "2021-12-17T14:09:49+00:00",
    "commented_code": "test(\"node version error\", async () => {\n   const originalProcessVersion = process.version;\n \n-  try {\n-    Object.defineProperty(process, \"version\", {\n-      value: \"v8.0.0\",\n-      writable: false,\n-    });\n-    const result = runPrettier(\"cli\", [\"--help\"]);\n-    expect(await result.status).toBe(1);\n-    expect(await result.stderr).toBe(\n-      `prettier requires at least version ${\n-        isProduction ? \"10.13.0\" : \"12.17.0\"\n-      } of Node, please upgrade\n`\n-    );\n-    expect(await result.stdout).toBe(\"\");\n-    expect(await result.write).toEqual([]);\n-  } finally {\n-    Object.defineProperty(process, \"version\", {\n-      value: originalProcessVersion,\n-      writable: false,\n-    });\n-  }\n+  Object.defineProperty(process, \"version\", {\n+    value: \"v8.0.0\",\n+    writable: false,\n+  });\n+  const result = await runPrettier(\"cli\", [\"--help\"]);\n+  Object.defineProperty(process, \"version\", {\n+    value: originalProcessVersion,\n+    writable: false,\n+  });",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "771422349",
        "repo_full_name": "prettier/prettier",
        "pr_number": 11979,
        "pr_file": "tests/integration/__tests__/early-exit.js",
        "discussion_id": "771422349",
        "commented_code": "@@ -94,24 +94,22 @@ describe(\"throw error and show usage with something unexpected\", () => {\n test(\"node version error\", async () => {\n   const originalProcessVersion = process.version;\n \n-  try {\n-    Object.defineProperty(process, \"version\", {\n-      value: \"v8.0.0\",\n-      writable: false,\n-    });\n-    const result = runPrettier(\"cli\", [\"--help\"]);\n-    expect(await result.status).toBe(1);\n-    expect(await result.stderr).toBe(\n-      `prettier requires at least version ${\n-        isProduction ? \"10.13.0\" : \"12.17.0\"\n-      } of Node, please upgrade\\n`\n-    );\n-    expect(await result.stdout).toBe(\"\");\n-    expect(await result.write).toEqual([]);\n-  } finally {\n-    Object.defineProperty(process, \"version\", {\n-      value: originalProcessVersion,\n-      writable: false,\n-    });\n-  }\n+  Object.defineProperty(process, \"version\", {\n+    value: \"v8.0.0\",\n+    writable: false,\n+  });\n+  const result = await runPrettier(\"cli\", [\"--help\"]);\n+  Object.defineProperty(process, \"version\", {\n+    value: originalProcessVersion,\n+    writable: false,\n+  });",
        "comment_created_at": "2021-12-17T14:09:49+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "This will not be called if `runPrettier` is rejected. So I think we should call `runPrettier` in `try` block and call this in `finally` block.",
        "pr_file_module": null
      },
      {
        "comment_id": "771424479",
        "repo_full_name": "prettier/prettier",
        "pr_number": 11979,
        "pr_file": "tests/integration/__tests__/early-exit.js",
        "discussion_id": "771422349",
        "commented_code": "@@ -94,24 +94,22 @@ describe(\"throw error and show usage with something unexpected\", () => {\n test(\"node version error\", async () => {\n   const originalProcessVersion = process.version;\n \n-  try {\n-    Object.defineProperty(process, \"version\", {\n-      value: \"v8.0.0\",\n-      writable: false,\n-    });\n-    const result = runPrettier(\"cli\", [\"--help\"]);\n-    expect(await result.status).toBe(1);\n-    expect(await result.stderr).toBe(\n-      `prettier requires at least version ${\n-        isProduction ? \"10.13.0\" : \"12.17.0\"\n-      } of Node, please upgrade\\n`\n-    );\n-    expect(await result.stdout).toBe(\"\");\n-    expect(await result.write).toEqual([]);\n-  } finally {\n-    Object.defineProperty(process, \"version\", {\n-      value: originalProcessVersion,\n-      writable: false,\n-    });\n-  }\n+  Object.defineProperty(process, \"version\", {\n+    value: \"v8.0.0\",\n+    writable: false,\n+  });\n+  const result = await runPrettier(\"cli\", [\"--help\"]);\n+  Object.defineProperty(process, \"version\", {\n+    value: originalProcessVersion,\n+    writable: false,\n+  });",
        "comment_created_at": "2021-12-17T14:12:46+00:00",
        "comment_author": "fisker",
        "comment_body": "If it's rejected, the test will fail, why we need that?",
        "pr_file_module": null
      },
      {
        "comment_id": "771444083",
        "repo_full_name": "prettier/prettier",
        "pr_number": 11979,
        "pr_file": "tests/integration/__tests__/early-exit.js",
        "discussion_id": "771422349",
        "commented_code": "@@ -94,24 +94,22 @@ describe(\"throw error and show usage with something unexpected\", () => {\n test(\"node version error\", async () => {\n   const originalProcessVersion = process.version;\n \n-  try {\n-    Object.defineProperty(process, \"version\", {\n-      value: \"v8.0.0\",\n-      writable: false,\n-    });\n-    const result = runPrettier(\"cli\", [\"--help\"]);\n-    expect(await result.status).toBe(1);\n-    expect(await result.stderr).toBe(\n-      `prettier requires at least version ${\n-        isProduction ? \"10.13.0\" : \"12.17.0\"\n-      } of Node, please upgrade\\n`\n-    );\n-    expect(await result.stdout).toBe(\"\");\n-    expect(await result.write).toEqual([]);\n-  } finally {\n-    Object.defineProperty(process, \"version\", {\n-      value: originalProcessVersion,\n-      writable: false,\n-    });\n-  }\n+  Object.defineProperty(process, \"version\", {\n+    value: \"v8.0.0\",\n+    writable: false,\n+  });\n+  const result = await runPrettier(\"cli\", [\"--help\"]);\n+  Object.defineProperty(process, \"version\", {\n+    value: originalProcessVersion,\n+    writable: false,\n+  });",
        "comment_created_at": "2021-12-17T14:39:31+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "Because changing `process.version` affects out of this test case.\r\n\r\nIf we add the test like below under the `test(\"node version error\", async () => ...);`.\r\n\r\n```js\r\ntest(\"checks version\", () => {\r\n  expect(process.version).toBe(\"v14.18.2\");\r\n});\r\n```\r\n\r\nif current node version is `14.18.2` and `runPrettier` is rejected, this test is failed via:\r\n\r\n```\r\nchecks version\r\n\r\n    expect(received).toBe(expected) // Object.is equality\r\n\r\n    Expected: \"v14.18.2\"\r\n    Received: \"v8.0.0\"\r\n\r\n      116 |\r\n      117 | test(\"checks version\", () => {\r\n    > 118 |   expect(process.version).toBe(\"v14.18.2\");\r\n          |                           ^\r\n      119 | });\r\n      120 |\r\n```\r\n\r\nSuch tests are rarely written, but it's better to use `finally` just in case.",
        "pr_file_module": null
      },
      {
        "comment_id": "771454059",
        "repo_full_name": "prettier/prettier",
        "pr_number": 11979,
        "pr_file": "tests/integration/__tests__/early-exit.js",
        "discussion_id": "771422349",
        "commented_code": "@@ -94,24 +94,22 @@ describe(\"throw error and show usage with something unexpected\", () => {\n test(\"node version error\", async () => {\n   const originalProcessVersion = process.version;\n \n-  try {\n-    Object.defineProperty(process, \"version\", {\n-      value: \"v8.0.0\",\n-      writable: false,\n-    });\n-    const result = runPrettier(\"cli\", [\"--help\"]);\n-    expect(await result.status).toBe(1);\n-    expect(await result.stderr).toBe(\n-      `prettier requires at least version ${\n-        isProduction ? \"10.13.0\" : \"12.17.0\"\n-      } of Node, please upgrade\\n`\n-    );\n-    expect(await result.stdout).toBe(\"\");\n-    expect(await result.write).toEqual([]);\n-  } finally {\n-    Object.defineProperty(process, \"version\", {\n-      value: originalProcessVersion,\n-      writable: false,\n-    });\n-  }\n+  Object.defineProperty(process, \"version\", {\n+    value: \"v8.0.0\",\n+    writable: false,\n+  });\n+  const result = await runPrettier(\"cli\", [\"--help\"]);\n+  Object.defineProperty(process, \"version\", {\n+    value: originalProcessVersion,\n+    writable: false,\n+  });",
        "comment_created_at": "2021-12-17T14:52:38+00:00",
        "comment_author": "fisker",
        "comment_body": "You are right, I was not thinking right, I thought Jest will exit if one test fails.",
        "pr_file_module": null
      }
    ]
  }
]