[
  {
    "discussion_id": "2057946484",
    "pr_number": 17398,
    "pr_file": "src/language-css/print/comma-separated-value-group.js",
    "created_at": "2025-04-24T09:22:25+00:00",
    "commented_code": "continue;\n     }\n \n-    // styled.div` background: var(--${one}); `\n+    // We should keep spaces between words in a embedded JS expression\n+    // examples:\n+    //   styled.div` font-size: var(--font-size-h${({ level }) => level}); `;\n+    //   styled.div` grid-area: area-${({ area }) => area}; `;\n+    //   styled.div` border: 1px ${solid} red; `;\n     if (\n       iNode.type === \"value-word\" &&\n-      iNode.value.endsWith(\"-\") &&\n-      isAtWordPlaceholderNode(iNextNode)\n+      isAtWordPlaceholderNode(iNextNode) &&\n+      !options.originalText\n+        .slice(locEnd(iNode), locStart(iNextNode))\n+        .includes(\" \")",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "2057946484",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17398,
        "pr_file": "src/language-css/print/comma-separated-value-group.js",
        "discussion_id": "2057946484",
        "commented_code": "@@ -147,11 +147,17 @@ function printCommaSeparatedValueGroup(path, options, print) {\n       continue;\n     }\n \n-    // styled.div` background: var(--${one}); `\n+    // We should keep spaces between words in a embedded JS expression\n+    // examples:\n+    //   styled.div` font-size: var(--font-size-h${({ level }) => level}); `;\n+    //   styled.div` grid-area: area-${({ area }) => area}; `;\n+    //   styled.div` border: 1px ${solid} red; `;\n     if (\n       iNode.type === \"value-word\" &&\n-      iNode.value.endsWith(\"-\") &&\n-      isAtWordPlaceholderNode(iNextNode)\n+      isAtWordPlaceholderNode(iNextNode) &&\n+      !options.originalText\n+        .slice(locEnd(iNode), locStart(iNextNode))\n+        .includes(\" \")",
        "comment_created_at": "2025-04-24T09:22:25+00:00",
        "comment_author": "fisker",
        "comment_body": "I didn't take a look at the AST, but are we checking if there is a space between current node and next node? How about simply compare `locEnd(iNode) !== locStart(iNextNode)`? Will it work?",
        "pr_file_module": null
      },
      {
        "comment_id": "2059441087",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17398,
        "pr_file": "src/language-css/print/comma-separated-value-group.js",
        "discussion_id": "2057946484",
        "commented_code": "@@ -147,11 +147,17 @@ function printCommaSeparatedValueGroup(path, options, print) {\n       continue;\n     }\n \n-    // styled.div` background: var(--${one}); `\n+    // We should keep spaces between words in a embedded JS expression\n+    // examples:\n+    //   styled.div` font-size: var(--font-size-h${({ level }) => level}); `;\n+    //   styled.div` grid-area: area-${({ area }) => area}; `;\n+    //   styled.div` border: 1px ${solid} red; `;\n     if (\n       iNode.type === \"value-word\" &&\n-      iNode.value.endsWith(\"-\") &&\n-      isAtWordPlaceholderNode(iNextNode)\n+      isAtWordPlaceholderNode(iNextNode) &&\n+      !options.originalText\n+        .slice(locEnd(iNode), locStart(iNextNode))\n+        .includes(\" \")",
        "comment_created_at": "2025-04-25T01:41:09+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "@fisker You\u2019re right\u2014thanks! (Actually, we should be using `===` instead of `!==`.)\r\n\r\nI\u2019ve also noticed a more fundamental problem: the location info for value-words that start with a hyphen is brokwn. For the `--foo` node, both `locStart` and `locEnd` are reported two characters too far forward.\r\n\r\nThis looks like a parser bug. I worked around it with a helper function called `fixValueWordLoc` ( https://github.com/prettier/prettier/pull/17398/commits/41838a2430ee3d000b1db9ec01b5dbedd7d818c5 )\r\n\r\nDo you have a better idea?",
        "pr_file_module": null
      },
      {
        "comment_id": "2059442436",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17398,
        "pr_file": "src/language-css/print/comma-separated-value-group.js",
        "discussion_id": "2057946484",
        "commented_code": "@@ -147,11 +147,17 @@ function printCommaSeparatedValueGroup(path, options, print) {\n       continue;\n     }\n \n-    // styled.div` background: var(--${one}); `\n+    // We should keep spaces between words in a embedded JS expression\n+    // examples:\n+    //   styled.div` font-size: var(--font-size-h${({ level }) => level}); `;\n+    //   styled.div` grid-area: area-${({ area }) => area}; `;\n+    //   styled.div` border: 1px ${solid} red; `;\n     if (\n       iNode.type === \"value-word\" &&\n-      iNode.value.endsWith(\"-\") &&\n-      isAtWordPlaceholderNode(iNextNode)\n+      isAtWordPlaceholderNode(iNextNode) &&\n+      !options.originalText\n+        .slice(locEnd(iNode), locStart(iNextNode))\n+        .includes(\" \")",
        "comment_created_at": "2025-04-25T01:43:43+00:00",
        "comment_author": "fisker",
        "comment_body": "We already have so many hacks, one more doesn't matter.\r\n\r\n`Infinity + 1 === Infinity`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "640883818",
    "pr_number": 10958,
    "pr_file": "src/language-handlebars/printer-glimmer.js",
    "created_at": "2021-05-27T18:48:58+00:00",
    "commented_code": "/* ElementNode print helpers */\n \n+function sortByLoc(a, b) {\n+  if (a.loc.start.line < b.loc.start.line) {",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "640883818",
        "repo_full_name": "prettier/prettier",
        "pr_number": 10958,
        "pr_file": "src/language-handlebars/printer-glimmer.js",
        "discussion_id": "640883818",
        "commented_code": "@@ -418,24 +418,50 @@ function print(path, options, print) {\n \n /* ElementNode print helpers */\n \n+function sortByLoc(a, b) {\n+  if (a.loc.start.line < b.loc.start.line) {",
        "comment_created_at": "2021-05-27T18:48:58+00:00",
        "comment_author": "fisker",
        "comment_body": "`return (a.loc.start.line - b.loc.start.line) || (a.loc.start.column - b.loc.start.column)`",
        "pr_file_module": null
      },
      {
        "comment_id": "641085115",
        "repo_full_name": "prettier/prettier",
        "pr_number": 10958,
        "pr_file": "src/language-handlebars/printer-glimmer.js",
        "discussion_id": "640883818",
        "commented_code": "@@ -418,24 +418,50 @@ function print(path, options, print) {\n \n /* ElementNode print helpers */\n \n+function sortByLoc(a, b) {\n+  if (a.loc.start.line < b.loc.start.line) {",
        "comment_created_at": "2021-05-28T01:07:10+00:00",
        "comment_author": "fisker",
        "comment_body": "We also have `.offset` added in https://github.com/prettier/prettier/pull/9626, so `a.loc.start.offset - b.loc.start.offset` or `locStart(a) - locStart(b)` like js printer",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1637948564",
    "pr_number": 15709,
    "pr_file": "src/utils/ast-utils.js",
    "created_at": "2024-06-13T10:07:43+00:00",
    "commented_code": "}\n }\n \n+/**\n+ * @param {Node} node\n+ * @param {{getVisitorKeys: GetVisitorKeys}} options\n+ */\n+function isLeaf(node, options) {\n+  for (const _ of getChildren(node, options)) {\n+    return false;\n+  }\n+  return true;",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1637948564",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15709,
        "pr_file": "src/utils/ast-utils.js",
        "discussion_id": "1637948564",
        "commented_code": "@@ -45,6 +45,17 @@ function* getDescendants(node, options) {\n   }\n }\n \n+/**\n+ * @param {Node} node\n+ * @param {{getVisitorKeys: GetVisitorKeys}} options\n+ */\n+function isLeaf(node, options) {\n+  for (const _ of getChildren(node, options)) {\n+    return false;\n+  }\n+  return true;",
        "comment_created_at": "2024-06-13T10:07:43+00:00",
        "comment_author": "fisker",
        "comment_body": "```suggestion\r\n  return getChildren(node, options).next().done;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1726359832",
    "pr_number": 16595,
    "pr_file": "src/document/printer.js",
    "created_at": "2024-08-22T05:29:06+00:00",
    "commented_code": "const CURSOR_PLACEHOLDER = Symbol(\"cursor\");\n \n-const IS_MUTABLE_FILL = Symbol(\"IS_MUTABLE_FILL\");\n+const IS_REVERSED_FILL = Symbol(\"IS_REVERSED_FILL\");",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1726359832",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16595,
        "pr_file": "src/document/printer.js",
        "discussion_id": "1726359832",
        "commented_code": "@@ -32,7 +32,7 @@ const MODE_FLAT = Symbol(\"MODE_FLAT\");\n \n const CURSOR_PLACEHOLDER = Symbol(\"cursor\");\n \n-const IS_MUTABLE_FILL = Symbol(\"IS_MUTABLE_FILL\");\n+const IS_REVERSED_FILL = Symbol(\"IS_REVERSED_FILL\");",
        "comment_created_at": "2024-08-22T05:29:06+00:00",
        "comment_author": "seiyab",
        "comment_body": "Though this works pretty well, it might be confusing. To improve readability, I have a couple of ideas.\r\n\r\nIdea 1: Design a new array-like class that can (a) perform [`.shift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift) operation with O(1) and (b) produce read access to the first element with O(1) and (c) calculate current length with O(1) and (d) be converted from array with O(n) or less. We can implement such class easily holding reversed array as inner field. Or if it looks still confusing, linked list can be alternative.\r\n\r\nIdea 2: Stop mutating the parts and hold the progresses (current index) for each `fill()`  as a Map instead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1174557798",
    "pr_number": 14736,
    "pr_file": "src/language-js/print/array.js",
    "created_at": "2023-04-23T11:00:45+00:00",
    "commented_code": "}\n \n function printArrayElements(path, options, elementsProperty, print) {\n+  const elements = path.node[elementsProperty];\n+\n+  function isLineAfterElementEmpty(elementNode) {\n+    const text = options.originalText;\n+    const elementIdx = elements.findIndex((v) => v == elementNode);\n+    const nextNode = elements.find((e, i) => i > elementIdx && e !== null);",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1174557798",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14736,
        "pr_file": "src/language-js/print/array.js",
        "discussion_id": "1174557798",
        "commented_code": "@@ -171,6 +172,36 @@ function isConciselyPrintedArray(node, options) {\n }\n \n function printArrayElements(path, options, elementsProperty, print) {\n+  const elements = path.node[elementsProperty];\n+\n+  function isLineAfterElementEmpty(elementNode) {\n+    const text = options.originalText;\n+    const elementIdx = elements.findIndex((v) => v == elementNode);\n+    const nextNode = elements.find((e, i) => i > elementIdx && e !== null);",
        "comment_created_at": "2023-04-23T11:00:45+00:00",
        "comment_author": "fisker",
        "comment_body": "path.siblings, path.next, path.index should be used",
        "pr_file_module": null
      },
      {
        "comment_id": "1174562014",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14736,
        "pr_file": "src/language-js/print/array.js",
        "discussion_id": "1174557798",
        "commented_code": "@@ -171,6 +172,36 @@ function isConciselyPrintedArray(node, options) {\n }\n \n function printArrayElements(path, options, elementsProperty, print) {\n+  const elements = path.node[elementsProperty];\n+\n+  function isLineAfterElementEmpty(elementNode) {\n+    const text = options.originalText;\n+    const elementIdx = elements.findIndex((v) => v == elementNode);\n+    const nextNode = elements.find((e, i) => i > elementIdx && e !== null);",
        "comment_created_at": "2023-04-23T11:27:12+00:00",
        "comment_author": "solarized-fox",
        "comment_body": "oh, you're right, that does make sense, making these changes now",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "951260198",
    "pr_number": 13341,
    "pr_file": "src/language-js/print/call-arguments.js",
    "created_at": "2022-08-22T10:14:07+00:00",
    "commented_code": "return allArgsBrokenOut();\n   }\n \n-  const shouldGroupFirst = shouldGroupFirstArg(args);\n-  const shouldGroupLast = shouldGroupLastArg(args, options);\n-  if (shouldGroupFirst || shouldGroupLast) {\n-    if (\n-      shouldGroupFirst\n-        ? printedArguments.slice(1).some(willBreak)\n-        : printedArguments.slice(0, -1).some(willBreak)\n-    ) {\n+  if (shouldGroupFirstArg(args)) {\n+    const tailArgs = printedArguments.slice(1);\n+    if (tailArgs.some(willBreak)) {\n       return allArgsBrokenOut();\n     }\n+    let firstArg;\n+    const firstArgSelector = isDynamicImport ? \"source\" : [\"arguments\", 0];\n+    try {\n+      firstArg = [print(firstArgSelector, { expandFirstArg: true }), \",\", line];\n+    } catch (caught) {\n+      if (caught instanceof ArgExpansionBailout) {\n+        return allArgsBrokenOut();\n+      }\n+      /* istanbul ignore next */\n+      throw caught;\n+    }\n \n-    // We want to print the last argument with a special flag\n-    let printedExpanded = [];\n+    return conditionalGroup([\n+      [\"(\", firstArg, ...tailArgs, \")\"],\n+      allArgsBrokenOut(),\n+    ]);\n+  }\n \n+  if (shouldGroupLastArg(args, options)) {\n+    const headArgs = printedArguments.slice(0, -1);\n+    if (headArgs.some(willBreak)) {\n+      return allArgsBrokenOut();\n+    }\n+    let lastArg;\n+    const lastArgSelector = isDynamicImport",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "951260198",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13341,
        "pr_file": "src/language-js/print/call-arguments.js",
        "discussion_id": "951260198",
        "commented_code": "@@ -95,40 +90,42 @@ function printCallArguments(path, options, print) {\n     return allArgsBrokenOut();\n   }\n \n-  const shouldGroupFirst = shouldGroupFirstArg(args);\n-  const shouldGroupLast = shouldGroupLastArg(args, options);\n-  if (shouldGroupFirst || shouldGroupLast) {\n-    if (\n-      shouldGroupFirst\n-        ? printedArguments.slice(1).some(willBreak)\n-        : printedArguments.slice(0, -1).some(willBreak)\n-    ) {\n+  if (shouldGroupFirstArg(args)) {\n+    const tailArgs = printedArguments.slice(1);\n+    if (tailArgs.some(willBreak)) {\n       return allArgsBrokenOut();\n     }\n+    let firstArg;\n+    const firstArgSelector = isDynamicImport ? \"source\" : [\"arguments\", 0];\n+    try {\n+      firstArg = [print(firstArgSelector, { expandFirstArg: true }), \",\", line];\n+    } catch (caught) {\n+      if (caught instanceof ArgExpansionBailout) {\n+        return allArgsBrokenOut();\n+      }\n+      /* istanbul ignore next */\n+      throw caught;\n+    }\n \n-    // We want to print the last argument with a special flag\n-    let printedExpanded = [];\n+    return conditionalGroup([\n+      [\"(\", firstArg, ...tailArgs, \")\"],\n+      allArgsBrokenOut(),\n+    ]);\n+  }\n \n+  if (shouldGroupLastArg(args, options)) {\n+    const headArgs = printedArguments.slice(0, -1);\n+    if (headArgs.some(willBreak)) {\n+      return allArgsBrokenOut();\n+    }\n+    let lastArg;\n+    const lastArgSelector = isDynamicImport",
        "comment_created_at": "2022-08-22T10:14:07+00:00",
        "comment_author": "fisker",
        "comment_body": "Same here, maybe `getCallArgumentSelector(index)`, allow index to be negative value (-1).",
        "pr_file_module": null
      }
    ]
  }
]