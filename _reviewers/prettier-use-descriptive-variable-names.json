[
  {
    "discussion_id": "1718514557",
    "pr_number": 16570,
    "pr_file": "src/language-css/print/parenthesized-value-group.js",
    "created_at": "2024-08-15T14:50:25+00:00",
    "commented_code": ");\n }\n \n+/**\n+ * @template {*} T\n+ * @param {T[]} xs\n+ * @param {number} chunkSize\n+ * @returns {T[][]}\n+ */\n+function chunk(xs, chunkSize) {",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1718514557",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16570,
        "pr_file": "src/language-css/print/parenthesized-value-group.js",
        "discussion_id": "1718514557",
        "commented_code": "@@ -155,4 +164,18 @@ function shouldBreakList(path) {\n   );\n }\n \n+/**\n+ * @template {*} T\n+ * @param {T[]} xs\n+ * @param {number} chunkSize\n+ * @returns {T[][]}\n+ */\n+function chunk(xs, chunkSize) {",
        "comment_created_at": "2024-08-15T14:50:25+00:00",
        "comment_author": "fisker",
        "comment_body": "What is `xs`? `array` should be a better name.\r\n\r\nMaybe also `chunkSize` -> `size`",
        "pr_file_module": null
      },
      {
        "comment_id": "1719076000",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16570,
        "pr_file": "src/language-css/print/parenthesized-value-group.js",
        "discussion_id": "1718514557",
        "commented_code": "@@ -155,4 +164,18 @@ function shouldBreakList(path) {\n   );\n }\n \n+/**\n+ * @template {*} T\n+ * @param {T[]} xs\n+ * @param {number} chunkSize\n+ * @returns {T[][]}\n+ */\n+function chunk(xs, chunkSize) {",
        "comment_created_at": "2024-08-15T22:27:45+00:00",
        "comment_author": "seiyab",
        "comment_body": "Thank you, I'll rename xs by array (I tend to name arbitrary array xs, ys,... as Haskell tradition).\nFor size, I wanted to avoid confusion between \"each chunk has n elements\" vs\n\"result has n chunks\". How about `eachSize`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1719237832",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16570,
        "pr_file": "src/language-css/print/parenthesized-value-group.js",
        "discussion_id": "1718514557",
        "commented_code": "@@ -155,4 +164,18 @@ function shouldBreakList(path) {\n   );\n }\n \n+/**\n+ * @template {*} T\n+ * @param {T[]} xs\n+ * @param {number} chunkSize\n+ * @returns {T[][]}\n+ */\n+function chunk(xs, chunkSize) {",
        "comment_created_at": "2024-08-16T03:09:28+00:00",
        "comment_author": "fisker",
        "comment_body": "It's common to name as size.\r\n\r\nhttps://github.com/ryancole/chunk/blob/39631771da7e5d3eb8f43d6ebcd52905c02b46ed/src/chunk.js#L4\r\n\r\nhttps://github.com/lodash/lodash/blob/6a2cc1dfcf7634fea70d1bc5bd22db453df67b42/src/chunk.ts#L22",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1404814804",
    "pr_number": 15663,
    "pr_file": "src/config/prettier-config-explorer/config-searcher.js",
    "created_at": "2023-11-25T09:16:31+00:00",
    "commented_code": "+import path from \"node:path\";\n+import iterateDirectoryUp from \"iterate-directory-up\";\n+import {\n+  CONFIG_FILE_NAMES,\n+  createCachedFunction,\n+  fileExists,\n+} from \"./common.js\";\n+import { loadConfigFromPackageJson } from \"./loaders.js\";\n+\n+async function isPackageJsonFileWithPrettierConfig(file) {\n+  try {\n+    return Boolean(await loadConfigFromPackageJson(file));\n+  } catch {\n+    return false;\n+  }\n+}\n+\n+async function searchConfigInDirectory(directory) {\n+  for (const fileName of CONFIG_FILE_NAMES) {\n+    const file = path.join(directory, fileName);\n+\n+    if (!(await fileExists(file))) {\n+      continue;\n+    }\n+\n+    if (\n+      fileName !== \"package.json\" ||\n+      (await isPackageJsonFileWithPrettierConfig(file))\n+    ) {\n+      return file;\n+    }\n+  }\n+}\n+\n+/** @type {Map} */ // @ts-expect-error -- intentionally not add the `get` method\n+const noopMap = { has: () => false, set() {} };\n+class Searcher {\n+  #cache;",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1404814804",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15663,
        "pr_file": "src/config/prettier-config-explorer/config-searcher.js",
        "discussion_id": "1404814804",
        "commented_code": "@@ -0,0 +1,91 @@\n+import path from \"node:path\";\n+import iterateDirectoryUp from \"iterate-directory-up\";\n+import {\n+  CONFIG_FILE_NAMES,\n+  createCachedFunction,\n+  fileExists,\n+} from \"./common.js\";\n+import { loadConfigFromPackageJson } from \"./loaders.js\";\n+\n+async function isPackageJsonFileWithPrettierConfig(file) {\n+  try {\n+    return Boolean(await loadConfigFromPackageJson(file));\n+  } catch {\n+    return false;\n+  }\n+}\n+\n+async function searchConfigInDirectory(directory) {\n+  for (const fileName of CONFIG_FILE_NAMES) {\n+    const file = path.join(directory, fileName);\n+\n+    if (!(await fileExists(file))) {\n+      continue;\n+    }\n+\n+    if (\n+      fileName !== \"package.json\" ||\n+      (await isPackageJsonFileWithPrettierConfig(file))\n+    ) {\n+      return file;\n+    }\n+  }\n+}\n+\n+/** @type {Map} */ // @ts-expect-error -- intentionally not add the `get` method\n+const noopMap = { has: () => false, set() {} };\n+class Searcher {\n+  #cache;",
        "comment_created_at": "2023-11-25T09:16:31+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "Is this a just boolean value? If true I prefer naming as `shouldCache`. To clarify whether this is an object that has cached values or a just boolean:\r\n\r\n```suggestion\r\n  #shouldCache;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1404816432",
    "pr_number": 15663,
    "pr_file": "src/config/prettier-config-explorer/common.js",
    "created_at": "2023-11-25T09:22:25+00:00",
    "commented_code": "+import fs from \"node:fs/promises\";\n+\n+const CONFIG_FILE_NAMES = [\n+  \"package.json\",\n+  \".prettierrc\",\n+  \".prettierrc.json\",\n+  \".prettierrc.yaml\",\n+  \".prettierrc.yml\",\n+  \".prettierrc.json5\",\n+  \".prettierrc.js\",\n+  \".prettierrc.mjs\",\n+  \".prettierrc.cjs\",\n+  \"prettier.config.js\",\n+  \"prettier.config.mjs\",\n+  \"prettier.config.cjs\",\n+  \".prettierrc.toml\",\n+];\n+\n+async function fileExists(file) {\n+  let stats;\n+  try {\n+    stats = await fs.stat(file);\n+  } catch {\n+    return false;\n+  }\n+\n+  return stats.isFile();\n+}\n+\n+function createCachedFunction(function_) {\n+  const cache = new Map();\n+\n+  return async function (fileOrDirectory) {\n+    if (cache.has(fileOrDirectory)) {\n+      return cache.get(fileOrDirectory);\n+    }\n+\n+    const promise = function_(fileOrDirectory);\n+    cache.set(fileOrDirectory, promise);\n+    const result = await promise;\n+    cache.set(fileOrDirectory, result);\n+    return result;\n+  };\n+}",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1404816432",
        "repo_full_name": "prettier/prettier",
        "pr_number": 15663,
        "pr_file": "src/config/prettier-config-explorer/common.js",
        "discussion_id": "1404816432",
        "commented_code": "@@ -0,0 +1,46 @@\n+import fs from \"node:fs/promises\";\n+\n+const CONFIG_FILE_NAMES = [\n+  \"package.json\",\n+  \".prettierrc\",\n+  \".prettierrc.json\",\n+  \".prettierrc.yaml\",\n+  \".prettierrc.yml\",\n+  \".prettierrc.json5\",\n+  \".prettierrc.js\",\n+  \".prettierrc.mjs\",\n+  \".prettierrc.cjs\",\n+  \"prettier.config.js\",\n+  \"prettier.config.mjs\",\n+  \"prettier.config.cjs\",\n+  \".prettierrc.toml\",\n+];\n+\n+async function fileExists(file) {\n+  let stats;\n+  try {\n+    stats = await fs.stat(file);\n+  } catch {\n+    return false;\n+  }\n+\n+  return stats.isFile();\n+}\n+\n+function createCachedFunction(function_) {\n+  const cache = new Map();\n+\n+  return async function (fileOrDirectory) {\n+    if (cache.has(fileOrDirectory)) {\n+      return cache.get(fileOrDirectory);\n+    }\n+\n+    const promise = function_(fileOrDirectory);\n+    cache.set(fileOrDirectory, promise);\n+    const result = await promise;\n+    cache.set(fileOrDirectory, result);\n+    return result;\n+  };\n+}",
        "comment_created_at": "2023-11-25T09:22:25+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "This function is only used in `config-searcher.js`, right? I prefer to move from `common.js` to `config-searcher.js` and name the function something like `createCachedSearchFunction`. The name createCachedFunction is too generic.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "989369323",
    "pr_number": 11597,
    "pr_file": "src/language-markdown/printer-markdown.js",
    "created_at": "2022-10-06T18:36:36+00:00",
    "commented_code": "return counter === -1 ? null : path.getParentNode(counter);\n }\n \n-function printLine(path, value, options) {\n+/**\n+ * Finds out if Space is tend to be inserted between Chinese or Japanese characters\n+ * (including ideograph aka han or kanji e.g. `\u5b57`, hiragana e.g. `\u3042`, and katakana e.g. `\u30a2`)\n+ * and other letters (including alphanumerics; e.g. `A` or `1`) in the sentence.\n+ *\n+ * @param {*} path current position in nodes tree\n+ * @returns {boolean} `true` if Space is tend to be inserted between these types of letters, `false` otherwise.\n+ */\n+function isSentenceUseCJDividingSpace(path) {\n+  const sentenceNode = getAncestorNode(path, \"sentence\");\n+  if (sentenceNode.isCJSpacingUsing !== undefined) {\n+    return sentenceNode.isCJSpacingUsing;",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "989369323",
        "repo_full_name": "prettier/prettier",
        "pr_number": 11597,
        "pr_file": "src/language-markdown/printer-markdown.js",
        "discussion_id": "989369323",
        "commented_code": "@@ -526,21 +567,249 @@ function getAncestorNode(path, typeOrTypes) {\n   return counter === -1 ? null : path.getParentNode(counter);\n }\n \n-function printLine(path, value, options) {\n+/**\n+ * Finds out if Space is tend to be inserted between Chinese or Japanese characters\n+ * (including ideograph aka han or kanji e.g. `\u5b57`, hiragana e.g. `\u3042`, and katakana e.g. `\u30a2`)\n+ * and other letters (including alphanumerics; e.g. `A` or `1`) in the sentence.\n+ *\n+ * @param {*} path current position in nodes tree\n+ * @returns {boolean} `true` if Space is tend to be inserted between these types of letters, `false` otherwise.\n+ */\n+function isSentenceUseCJDividingSpace(path) {\n+  const sentenceNode = getAncestorNode(path, \"sentence\");\n+  if (sentenceNode.isCJSpacingUsing !== undefined) {\n+    return sentenceNode.isCJSpacingUsing;",
        "comment_created_at": "2022-10-06T18:36:36+00:00",
        "comment_author": "thorn0",
        "comment_body": "Let's rename: \r\n- `isSentenceUseCJDividingSpace` \u2192 `isInSentenceWithCJSpaces`\r\n- `isCJSpacingUsing` \u2192 `usesCJSpaces`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1477098828",
    "pr_number": 16024,
    "pr_file": "scripts/tools/eslint-plugin-prettier-internal-rules/massage-ast-parameter-names.js",
    "created_at": "2024-02-03T17:03:08+00:00",
    "commented_code": "+\"use strict\";\n+\n+const MESSAGE_ID = \"massage-ast-parameter-names\";\n+\n+const massageAstFunctionSelector = [\n+  \"FunctionDeclaration\",\n+  \"[async!=true]\",\n+  \"[generator!=true]\",\n+  '[id.type=\"Identifier\"]',\n+  '[id.name=\"clean\"]',\n+].join(\"\");\n+\n+const getVariableIdentifiers = ({ identifiers, references }) => [\n+  ...new Set([\n+    ...identifiers,\n+    ...references.map(({ identifier }) => identifier),\n+  ]),\n+];\n+\n+module.exports = {\n+  meta: {\n+    type: \"suggestion\",\n+    docs: {\n+      url: \"https://github.com/prettier/prettier/blob/main/scripts/tools/eslint-plugin-prettier-internal-rules/massage-ast-parameter-names.js\",\n+    },\n+    messages: {\n+      [MESSAGE_ID]:\n+        \"The {{name}} node parameter '{{original}}' should be named '{{name}}'.\",\n+    },\n+    fixable: \"code\",\n+    schema: {\n+      type: \"array\",\n+      uniqueItems: true,\n+    },\n+  },\n+  create: (context) =>\n+    Object.fromEntries(\n+      [\"original\", \"clone\"].map((name, index) => [",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1477098828",
        "repo_full_name": "prettier/prettier",
        "pr_number": 16024,
        "pr_file": "scripts/tools/eslint-plugin-prettier-internal-rules/massage-ast-parameter-names.js",
        "discussion_id": "1477098828",
        "commented_code": "@@ -0,0 +1,65 @@\n+\"use strict\";\n+\n+const MESSAGE_ID = \"massage-ast-parameter-names\";\n+\n+const massageAstFunctionSelector = [\n+  \"FunctionDeclaration\",\n+  \"[async!=true]\",\n+  \"[generator!=true]\",\n+  '[id.type=\"Identifier\"]',\n+  '[id.name=\"clean\"]',\n+].join(\"\");\n+\n+const getVariableIdentifiers = ({ identifiers, references }) => [\n+  ...new Set([\n+    ...identifiers,\n+    ...references.map(({ identifier }) => identifier),\n+  ]),\n+];\n+\n+module.exports = {\n+  meta: {\n+    type: \"suggestion\",\n+    docs: {\n+      url: \"https://github.com/prettier/prettier/blob/main/scripts/tools/eslint-plugin-prettier-internal-rules/massage-ast-parameter-names.js\",\n+    },\n+    messages: {\n+      [MESSAGE_ID]:\n+        \"The {{name}} node parameter '{{original}}' should be named '{{name}}'.\",\n+    },\n+    fixable: \"code\",\n+    schema: {\n+      type: \"array\",\n+      uniqueItems: true,\n+    },\n+  },\n+  create: (context) =>\n+    Object.fromEntries(\n+      [\"original\", \"clone\"].map((name, index) => [",
        "comment_created_at": "2024-02-03T17:03:08+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "The variable name clone sounds like a function, so cloned or clonedNode is preferable.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1155056538",
    "pr_number": 14640,
    "pr_file": "src/language-markdown/printer-markdown.js",
    "created_at": "2023-04-01T04:47:31+00:00",
    "commented_code": "parent.type === \"listItem\" &&\n     previous.type === \"paragraph\" &&\n     previous.position.end.line + 1 === node.position.start.line;\n+  const isPrevNodeSpecificComment = ((node) => {\n+    if (\n+      node.type === \"html\" &&\n+      node.value.startsWith(\"<!--\") &&\n+      node.value.endsWith(\"-->\")\n+    ) {\n+      const SpecificCommentString = [\"markdownlint-disable-next-line\"];\n+      return SpecificCommentString.some((s) => node.value.includes(s));\n+    }\n+    return false;\n+  })(previous);",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1155056538",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14640,
        "pr_file": "src/language-markdown/printer-markdown.js",
        "discussion_id": "1155056538",
        "commented_code": "@@ -752,13 +752,25 @@ function shouldPrePrintDoubleHardline({ node, previous, parent }, options) {\n     parent.type === \"listItem\" &&\n     previous.type === \"paragraph\" &&\n     previous.position.end.line + 1 === node.position.start.line;\n+  const isPrevNodeSpecificComment = ((node) => {\n+    if (\n+      node.type === \"html\" &&\n+      node.value.startsWith(\"<!--\") &&\n+      node.value.endsWith(\"-->\")\n+    ) {\n+      const SpecificCommentString = [\"markdownlint-disable-next-line\"];\n+      return SpecificCommentString.some((s) => node.value.includes(s));\n+    }\n+    return false;\n+  })(previous);",
        "comment_created_at": "2023-04-01T04:47:31+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "I prefer to define the following function in `language-markdown/utils.js`:\r\n\r\n```js\r\nfunction isMarkdownlintComment(node) {\r\n  return (\r\n    node.type === \"html\" &&\r\n    node.value.startsWith(\"<!--\") &&\r\n    node.value(\"-->\") &&\r\n    node.value === \"markdownlint-disable-next-line\"\r\n  );\r\n}\r\n```\r\n\r\nI also prefer variable name `isPrevNodeMarkdownlintComment`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1051572386",
    "pr_number": 13923,
    "pr_file": "src/utils/whitespace-utils.js",
    "created_at": "2022-12-18T10:32:56+00:00",
    "commented_code": "+import escapeStringRegexp from \"escape-string-regexp\";\n+\n+class WhitespaceUtils {\n+  #characters;\n+\n+  constructor(characters) {\n+    this.#characters = new Set(characters);",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1051572386",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13923,
        "pr_file": "src/utils/whitespace-utils.js",
        "discussion_id": "1051572386",
        "commented_code": "@@ -0,0 +1,112 @@\n+import escapeStringRegexp from \"escape-string-regexp\";\n+\n+class WhitespaceUtils {\n+  #characters;\n+\n+  constructor(characters) {\n+    this.#characters = new Set(characters);",
        "comment_created_at": "2022-12-18T10:32:56+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "I prefer `whitespaceCharacters` or `whitespaceChars`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1052102415",
    "pr_number": 13923,
    "pr_file": "src/utils/whitespace-utils.js",
    "created_at": "2022-12-19T11:32:37+00:00",
    "commented_code": "+import escapeStringRegexp from \"escape-string-regexp\";\n+\n+class WhitespaceUtils {\n+  #whitespaceCharacters;\n+\n+  constructor(whitespaceCharacters) {\n+    this.#whitespaceCharacters = new Set(whitespaceCharacters);\n+\n+    if (\n+      process.env.NODE_ENV !== \"production\" &&\n+      (this.#whitespaceCharacters.size === 0 ||\n+        Array.prototype.some.call(\n+          whitespaceCharacters,\n+          (character) => !/^\\s$/.test(character)\n+        ))\n+    ) {\n+      throw new TypeError(\n+        `Invalid characters: ${JSON.stringify(whitespaceCharacters)}`\n+      );\n+    }\n+  }\n+\n+  getLeadingWhitespaceCount(string) {\n+    const whitespaceCharacters = this.#whitespaceCharacters;\n+    let count = 0;\n+\n+    for (\n+      let index = 0;\n+      index < string.length && whitespaceCharacters.has(string.charAt(index));\n+      index++\n+    ) {\n+      count++;\n+    }\n+\n+    return count;\n+  }\n+\n+  getTrailingWhitespaceCount(string) {\n+    const whitespaceCharacters = this.#whitespaceCharacters;\n+    let count = 0;\n+\n+    for (\n+      let index = string.length - 1;\n+      index >= 0 && whitespaceCharacters.has(string.charAt(index));\n+      index--\n+    ) {\n+      count++;\n+    }\n+\n+    return count;\n+  }\n+\n+  getLeadingWhitespace(string) {\n+    const count = this.getLeadingWhitespaceCount(string);\n+    return string.slice(0, count);\n+  }\n+\n+  getTrailingWhitespace(string) {\n+    const count = this.getTrailingWhitespaceCount(string);\n+    return string.slice(string.length - count);\n+  }\n+\n+  hasLeadingWhitespace(string) {\n+    return this.#whitespaceCharacters.has(string.charAt(0));\n+  }\n+\n+  hasTrailingWhitespace(string) {\n+    return this.#whitespaceCharacters.has(string.at(-1));\n+  }\n+\n+  trimStart(string) {\n+    const count = this.getLeadingWhitespaceCount(string);\n+    return string.slice(count);\n+  }\n+\n+  trimEnd(string) {\n+    const count = this.getTrailingWhitespaceCount(string);\n+    return string.slice(0, string.length - count);\n+  }\n+\n+  trim(string) {\n+    return this.trimEnd(this.trimStart(string));\n+  }\n+\n+  split(string, captureWhitespace = false) {",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1052102415",
        "repo_full_name": "prettier/prettier",
        "pr_number": 13923,
        "pr_file": "src/utils/whitespace-utils.js",
        "discussion_id": "1052102415",
        "commented_code": "@@ -0,0 +1,116 @@\n+import escapeStringRegexp from \"escape-string-regexp\";\n+\n+class WhitespaceUtils {\n+  #whitespaceCharacters;\n+\n+  constructor(whitespaceCharacters) {\n+    this.#whitespaceCharacters = new Set(whitespaceCharacters);\n+\n+    if (\n+      process.env.NODE_ENV !== \"production\" &&\n+      (this.#whitespaceCharacters.size === 0 ||\n+        Array.prototype.some.call(\n+          whitespaceCharacters,\n+          (character) => !/^\\s$/.test(character)\n+        ))\n+    ) {\n+      throw new TypeError(\n+        `Invalid characters: ${JSON.stringify(whitespaceCharacters)}`\n+      );\n+    }\n+  }\n+\n+  getLeadingWhitespaceCount(string) {\n+    const whitespaceCharacters = this.#whitespaceCharacters;\n+    let count = 0;\n+\n+    for (\n+      let index = 0;\n+      index < string.length && whitespaceCharacters.has(string.charAt(index));\n+      index++\n+    ) {\n+      count++;\n+    }\n+\n+    return count;\n+  }\n+\n+  getTrailingWhitespaceCount(string) {\n+    const whitespaceCharacters = this.#whitespaceCharacters;\n+    let count = 0;\n+\n+    for (\n+      let index = string.length - 1;\n+      index >= 0 && whitespaceCharacters.has(string.charAt(index));\n+      index--\n+    ) {\n+      count++;\n+    }\n+\n+    return count;\n+  }\n+\n+  getLeadingWhitespace(string) {\n+    const count = this.getLeadingWhitespaceCount(string);\n+    return string.slice(0, count);\n+  }\n+\n+  getTrailingWhitespace(string) {\n+    const count = this.getTrailingWhitespaceCount(string);\n+    return string.slice(string.length - count);\n+  }\n+\n+  hasLeadingWhitespace(string) {\n+    return this.#whitespaceCharacters.has(string.charAt(0));\n+  }\n+\n+  hasTrailingWhitespace(string) {\n+    return this.#whitespaceCharacters.has(string.at(-1));\n+  }\n+\n+  trimStart(string) {\n+    const count = this.getLeadingWhitespaceCount(string);\n+    return string.slice(count);\n+  }\n+\n+  trimEnd(string) {\n+    const count = this.getTrailingWhitespaceCount(string);\n+    return string.slice(0, string.length - count);\n+  }\n+\n+  trim(string) {\n+    return this.trimEnd(this.trimStart(string));\n+  }\n+\n+  split(string, captureWhitespace = false) {",
        "comment_created_at": "2022-12-19T11:32:37+00:00",
        "comment_author": "fisker",
        "comment_body": "Should we name it as something like `splitByContinuousWhitespace`?",
        "pr_file_module": null
      }
    ]
  }
]