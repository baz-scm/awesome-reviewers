[
  {
    "discussion_id": "2105923071",
    "pr_number": 17512,
    "pr_file": "tests/unit/editorconfig-to-prettier.js",
    "created_at": "2025-05-24T20:35:19+00:00",
    "commented_code": "tab_width: 0,\n       indent_size: 0,\n     }),\n-  ).toStrictEqual({\n-    tabWidth: 0,\n-  });",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "2105923071",
        "repo_full_name": "prettier/prettier",
        "pr_number": 17512,
        "pr_file": "tests/unit/editorconfig-to-prettier.js",
        "discussion_id": "2105923071",
        "commented_code": "@@ -63,9 +63,7 @@ test(\"editorconfigToPrettier\", () => {\n       tab_width: 0,\n       indent_size: 0,\n     }),\n-  ).toStrictEqual({\n-    tabWidth: 0,\n-  });",
        "comment_created_at": "2025-05-24T20:35:19+00:00",
        "comment_author": "fisker",
        "comment_body": "The value `0` is invalid, discussed in https://github.com/josephfrazier/editorconfig-to-prettier/issues/1 and decided to keep it, but [`tabWidth=0` crashes](https://github.com/prettier/prettier/issues/7388), I think better to ignore instead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "889631906",
    "pr_number": 12800,
    "pr_file": "tests/integration/__tests__/cache.js",
    "created_at": "2022-06-05T01:01:57+00:00",
    "commented_code": ");\n   });\n \n+  it(\"throws error when use `--cache-strategy` without `--cache`.\", async () => {\n+    const { stderr } = await runPrettier(\n+      dir,\n+      [\"foo.js\", \"--cache-strategy\", \"content\"],\n+      {\n+        input: \"const a = a;\",\n+      }\n+    );\n+    expect(stripAnsi(stderr.trim())).toBe(\n+      \"[error] `--cache-strategy` is cannot be used without `--cache`.\"",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "889631906",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "tests/integration/__tests__/cache.js",
        "discussion_id": "889631906",
        "commented_code": "@@ -55,6 +55,19 @@ describe(\"--cache option\", () => {\n     );\n   });\n \n+  it(\"throws error when use `--cache-strategy` without `--cache`.\", async () => {\n+    const { stderr } = await runPrettier(\n+      dir,\n+      [\"foo.js\", \"--cache-strategy\", \"content\"],\n+      {\n+        input: \"const a = a;\",\n+      }\n+    );\n+    expect(stripAnsi(stderr.trim())).toBe(\n+      \"[error] `--cache-strategy` is cannot be used without `--cache`.\"",
        "comment_created_at": "2022-06-05T01:01:57+00:00",
        "comment_author": "fisker",
        "comment_body": "```suggestion\r\n      \"[error] `--cache-strategy` cannot be used without `--cache`.\"\r\n```\r\n\r\nDon't miss https://github.com/prettier/prettier/pull/12800#discussion_r889630196",
        "pr_file_module": null
      },
      {
        "comment_id": "889686252",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12800,
        "pr_file": "tests/integration/__tests__/cache.js",
        "discussion_id": "889631906",
        "commented_code": "@@ -55,6 +55,19 @@ describe(\"--cache option\", () => {\n     );\n   });\n \n+  it(\"throws error when use `--cache-strategy` without `--cache`.\", async () => {\n+    const { stderr } = await runPrettier(\n+      dir,\n+      [\"foo.js\", \"--cache-strategy\", \"content\"],\n+      {\n+        input: \"const a = a;\",\n+      }\n+    );\n+    expect(stripAnsi(stderr.trim())).toBe(\n+      \"[error] `--cache-strategy` is cannot be used without `--cache`.\"",
        "comment_created_at": "2022-06-05T12:15:50+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "[fefe40a](https://github.com/prettier/prettier/pull/12800/commits/fefe40a7b51edbee5a09aabe2b9802d63ade40af)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1155946402",
    "pr_number": 14332,
    "pr_file": "src/utils/ignore.js",
    "created_at": "2023-04-03T13:13:24+00:00",
    "commented_code": "}\n \n /**\n- * @param {string} filepath\n- * @param {{ignorePath?: string, withNodeModules?: boolean}} options\n+ * @param {string[]} ignoreFilePaths\n+ * @param {boolean?} withNodeModules\n+ * @returns {Promise<(string) => boolean>}\n+ */\n+async function createIsIgnoredFunction(ignoreFilePaths, withNodeModules) {\n+  // If `ignoreFilePaths` is empty, we still want `withNodeModules` to work\n+  if (ignoreFilePaths.length === 0 && !withNodeModules) {\n+    ignoreFilePaths = [undefined];\n+  }",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "1155946402",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14332,
        "pr_file": "src/utils/ignore.js",
        "discussion_id": "1155946402",
        "commented_code": "@@ -44,8 +44,31 @@ async function createIsIgnoredFunction(ignoreFilePath, withNodeModules) {\n }\n \n /**\n- * @param {string} filepath\n- * @param {{ignorePath?: string, withNodeModules?: boolean}} options\n+ * @param {string[]} ignoreFilePaths\n+ * @param {boolean?} withNodeModules\n+ * @returns {Promise<(string) => boolean>}\n+ */\n+async function createIsIgnoredFunction(ignoreFilePaths, withNodeModules) {\n+  // If `ignoreFilePaths` is empty, we still want `withNodeModules` to work\n+  if (ignoreFilePaths.length === 0 && !withNodeModules) {\n+    ignoreFilePaths = [undefined];\n+  }",
        "comment_created_at": "2023-04-03T13:13:24+00:00",
        "comment_author": "kachkaev",
        "comment_body": "What if we first read all files in a loop, combine them into a sing big string and then call `createIgnore({ allowRelativePaths: true }).add(combinedContent)`? That's how I was imagining multiple ignore paths to work from a user perspective. Combining file contents can simplify how `withNodeModules` is implemented: it will be just a new line appended to `combinedContent`, so need for introducing `[undefined]` etc.\r\n\r\nHere is an example setup setup where a combined approach kinda matters: [\ud83d\udc38 njt / .prettierignore](https://github.com/kachkaev/njt/blob/9ecc25d7e9b230d0cd038f952a03a683f637f934/.prettierignore). This file has three sections, the first of which is specific to Prettier and the other two are copy-pasted from other files. Keeping these secions in sync between files is painful but necessary right now.\r\n\r\nWith this PR in, I can imagine removing sections named `Same as in .gitignore` and `Shared between linters`. To do that, I will be able to add this line to `.prettierrc.cjs`: `ignorePath: [\".prettierignore\", \".gitignore\", \".sharedlintignore\"]`. That will be great actually!\r\n\r\nIf we have several independent `createIgnore` calls plus `isIgnoredFunctions.some(...)`, the overall behavior of the ignorer may differ from what we'd get by \u2018concatenating\u2018  ignore files. This may mismatch user expectations and lead to confusion.\r\n\r\nHaving said that, I\u2019m not an expert is how ignore files are usually combined. If what you have implemented is common for other linters, I might be the only person who would be confused by the output of `isIgnoredFunctions.some(...)`, compared to having a single `createIgnore`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1155977879",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14332,
        "pr_file": "src/utils/ignore.js",
        "discussion_id": "1155946402",
        "commented_code": "@@ -44,8 +44,31 @@ async function createIsIgnoredFunction(ignoreFilePath, withNodeModules) {\n }\n \n /**\n- * @param {string} filepath\n- * @param {{ignorePath?: string, withNodeModules?: boolean}} options\n+ * @param {string[]} ignoreFilePaths\n+ * @param {boolean?} withNodeModules\n+ * @returns {Promise<(string) => boolean>}\n+ */\n+async function createIsIgnoredFunction(ignoreFilePaths, withNodeModules) {\n+  // If `ignoreFilePaths` is empty, we still want `withNodeModules` to work\n+  if (ignoreFilePaths.length === 0 && !withNodeModules) {\n+    ignoreFilePaths = [undefined];\n+  }",
        "comment_created_at": "2023-04-03T13:38:38+00:00",
        "comment_author": "fisker",
        "comment_body": "1, they can be in different directories, they can't be simply concated. We need to know what the patterns related to.\r\n\r\n```\r\n#.ignore1\r\nfoo\r\n\r\n#dir/.ignore2\r\nbar\r\n```\r\n\r\n2. In this case\r\n\r\n```\r\n#.ignore1\r\nfoo/a.js\r\n\r\n#.ignore2\r\n!foo/*\r\nfoo/b.js\r\n```\r\n\r\nshould `foo/a.js` be ignored? I think user may expect it be ignored, because it's ignored in `.ignore1` file. But if we treat this case like\r\n\r\n```\r\n#.ignore\r\nfoo/a.js\r\n!foo/*\r\nfoo/b.js\r\n```\r\n\r\nI'm not sure what's expected.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1156021047",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14332,
        "pr_file": "src/utils/ignore.js",
        "discussion_id": "1155946402",
        "commented_code": "@@ -44,8 +44,31 @@ async function createIsIgnoredFunction(ignoreFilePath, withNodeModules) {\n }\n \n /**\n- * @param {string} filepath\n- * @param {{ignorePath?: string, withNodeModules?: boolean}} options\n+ * @param {string[]} ignoreFilePaths\n+ * @param {boolean?} withNodeModules\n+ * @returns {Promise<(string) => boolean>}\n+ */\n+async function createIsIgnoredFunction(ignoreFilePaths, withNodeModules) {\n+  // If `ignoreFilePaths` is empty, we still want `withNodeModules` to work\n+  if (ignoreFilePaths.length === 0 && !withNodeModules) {\n+    ignoreFilePaths = [undefined];\n+  }",
        "comment_created_at": "2023-04-03T14:10:41+00:00",
        "comment_author": "kachkaev",
        "comment_body": "Oh I see... I forgot about ignore files sitting in different directories \ud83e\udd14 You are right then, we need multiple calls to `createIgnore`! In that case, the full list of ignored files is a union of ignore statements in individual files. Makes sense now, ignore me \ud83d\ude05",
        "pr_file_module": null
      },
      {
        "comment_id": "1464354660",
        "repo_full_name": "prettier/prettier",
        "pr_number": 14332,
        "pr_file": "src/utils/ignore.js",
        "discussion_id": "1155946402",
        "commented_code": "@@ -44,8 +44,31 @@ async function createIsIgnoredFunction(ignoreFilePath, withNodeModules) {\n }\n \n /**\n- * @param {string} filepath\n- * @param {{ignorePath?: string, withNodeModules?: boolean}} options\n+ * @param {string[]} ignoreFilePaths\n+ * @param {boolean?} withNodeModules\n+ * @returns {Promise<(string) => boolean>}\n+ */\n+async function createIsIgnoredFunction(ignoreFilePaths, withNodeModules) {\n+  // If `ignoreFilePaths` is empty, we still want `withNodeModules` to work\n+  if (ignoreFilePaths.length === 0 && !withNodeModules) {\n+    ignoreFilePaths = [undefined];\n+  }",
        "comment_created_at": "2024-01-24T06:17:37+00:00",
        "comment_author": "y-nk",
        "comment_body": "@fisker sorry to ask _so late_ ; it is not told in the docs if the multiple ignore paths would respect their own root folder. for example, how would the final ignore list look like for `prettier --ignore-path .ignore1,subfolder/.ignore2 --check subfolder/`? (usecase is: running prettier at root level of a monorepo)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "923059072",
    "pr_number": 12672,
    "pr_file": "src/cli/format.js",
    "created_at": "2022-07-18T07:54:32+00:00",
    "commented_code": "}\n \n async function createIgnorerFromContextOrDie(context) {\n+  const filepath = context.argv.filepath",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "923059072",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12672,
        "pr_file": "src/cli/format.js",
        "discussion_id": "923059072",
        "commented_code": "@@ -227,8 +227,13 @@ function format(context, input, opt) {\n }\n \n async function createIgnorerFromContextOrDie(context) {\n+  const filepath = context.argv.filepath",
        "comment_created_at": "2022-07-18T07:54:32+00:00",
        "comment_author": "fisker",
        "comment_body": "Where is this filepath come from? There is no `filepath` flag in CLI at all.",
        "pr_file_module": null
      },
      {
        "comment_id": "933554147",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12672,
        "pr_file": "src/cli/format.js",
        "discussion_id": "923059072",
        "commented_code": "@@ -227,8 +227,13 @@ function format(context, input, opt) {\n }\n \n async function createIgnorerFromContextOrDie(context) {\n+  const filepath = context.argv.filepath",
        "comment_created_at": "2022-07-29T19:14:28+00:00",
        "comment_author": "mataha",
        "comment_body": "There is - as [`--stdin-filepath`](https://github.com/prettier/prettier/blob/fa3b95c2e1a3a3351dc1b0168aa2c26f0cc4e9b3/src/main/core-options.js#L97-L106) - and it's used [here](https://github.com/prettier/prettier/blob/fdccc0f48e5bd3a17ae1e3500c1b5c1763c6a368/src/cli/index.js#L99) as well.",
        "pr_file_module": null
      },
      {
        "comment_id": "983011232",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12672,
        "pr_file": "src/cli/format.js",
        "discussion_id": "923059072",
        "commented_code": "@@ -227,8 +227,13 @@ function format(context, input, opt) {\n }\n \n async function createIgnorerFromContextOrDie(context) {\n+  const filepath = context.argv.filepath",
        "comment_created_at": "2022-09-29T02:37:44+00:00",
        "comment_author": "fisker",
        "comment_body": "`filepath` only exists when format stdin, when formatting files, it doesn't exist.",
        "pr_file_module": null
      },
      {
        "comment_id": "983011539",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12672,
        "pr_file": "src/cli/format.js",
        "discussion_id": "923059072",
        "commented_code": "@@ -227,8 +227,13 @@ function format(context, input, opt) {\n }\n \n async function createIgnorerFromContextOrDie(context) {\n+  const filepath = context.argv.filepath",
        "comment_created_at": "2022-09-29T02:38:26+00:00",
        "comment_author": "fisker",
        "comment_body": "See `formatFiles` function, it calls `createIgnorerFromContextOrDie` on first line. I don't think it will work.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "793415081",
    "pr_number": 12162,
    "pr_file": "src/main/options-normalizer.js",
    "created_at": "2022-01-27T09:31:43+00:00",
    "commented_code": ": `${cliDescriptor.key(key)}=${value}`,\n };\n \n-class FlagSchema extends vnopts.ChoiceSchema {\n-  constructor({ name, flags }) {\n-    super({ name, choices: flags });\n-    this._flags = [...flags].sort();\n-  }\n-  preprocess(value, utils) {\n-    if (\n-      typeof value === \"string\" &&\n-      value.length > 0 &&\n-      !this._flags.includes(value)\n-    ) {\n-      const suggestion = this._flags.find((flag) => leven(flag, value) < 3);\n-      if (suggestion) {\n-        utils.logger.warn(\n-          [\n-            `Unknown flag ${chalk.yellow(utils.descriptor.value(value))},`,\n-            `did you mean ${chalk.blue(utils.descriptor.value(suggestion))}?`,\n-          ].join(\" \")\n-        );\n-        return suggestion;\n+const getFlagSchema = (colorsModule) =>",
    "repo_full_name": "prettier/prettier",
    "discussion_comments": [
      {
        "comment_id": "793415081",
        "repo_full_name": "prettier/prettier",
        "pr_number": 12162,
        "pr_file": "src/main/options-normalizer.js",
        "discussion_id": "793415081",
        "commented_code": "@@ -18,41 +17,46 @@ const cliDescriptor = {\n       : `${cliDescriptor.key(key)}=${value}`,\n };\n \n-class FlagSchema extends vnopts.ChoiceSchema {\n-  constructor({ name, flags }) {\n-    super({ name, choices: flags });\n-    this._flags = [...flags].sort();\n-  }\n-  preprocess(value, utils) {\n-    if (\n-      typeof value === \"string\" &&\n-      value.length > 0 &&\n-      !this._flags.includes(value)\n-    ) {\n-      const suggestion = this._flags.find((flag) => leven(flag, value) < 3);\n-      if (suggestion) {\n-        utils.logger.warn(\n-          [\n-            `Unknown flag ${chalk.yellow(utils.descriptor.value(value))},`,\n-            `did you mean ${chalk.blue(utils.descriptor.value(suggestion))}?`,\n-          ].join(\" \")\n-        );\n-        return suggestion;\n+const getFlagSchema = (colorsModule) =>",
        "comment_created_at": "2022-01-27T09:31:43+00:00",
        "comment_author": "sosukesuzuki",
        "comment_body": "?\r\n```suggestion\r\n// To prevent `chalk` module from being included in the `standalone.js` bundle,\r\n// it will take that as an argument if needed.\r\nconst getFlagSchema = (colorsModule) =>\r\n```",
        "pr_file_module": null
      }
    ]
  }
]