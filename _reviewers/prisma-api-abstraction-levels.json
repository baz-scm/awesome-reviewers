[
  {
    "discussion_id": "1991937401",
    "pr_number": 26450,
    "pr_file": "packages/client/src/runtime/core/compositeProxy/createCompositeProxy.ts",
    "created_at": "2025-03-12T17:06:24+00:00",
    "commented_code": "* @param layers\n  * @returns\n  */\n-export function createCompositeProxy<T extends object>(target: T, layers: CompositeProxyLayer[]): T {\n+export function createCompositeProxy<T extends object>(client: Client, target: T, layers: CompositeProxyLayer[]): T {",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1991937401",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26450,
        "pr_file": "packages/client/src/runtime/core/compositeProxy/createCompositeProxy.ts",
        "discussion_id": "1991937401",
        "commented_code": "@@ -39,7 +40,7 @@ const customInspect = Symbol.for('nodejs.util.inspect.custom')\n  * @param layers\n  * @returns\n  */\n-export function createCompositeProxy<T extends object>(target: T, layers: CompositeProxyLayer[]): T {\n+export function createCompositeProxy<T extends object>(client: Client, target: T, layers: CompositeProxyLayer[]): T {",
        "comment_created_at": "2025-03-12T17:06:24+00:00",
        "comment_author": "aqrln",
        "comment_body": "I don't think this utility should be aware of `Client` (and the need to unsoundly cast empty objects to `Client` in all tests is a good evidence of this), it's on a different level of abstraction.\r\n\r\nInstead, it should take an abstract non-nullable value to get the prototype from:\r\n```suggestion\r\nexport function createCompositeProxy<T extends object>(prototypeProvider: {}, target: T, layers: CompositeProxyLayer[]): T {\r\n```\r\n\r\nand then on line 177:\r\n\r\n```diff\r\n- getPrototypeOf: () => Object.getPrototypeOf(client._originalClient),\r\n+ getPrototypeOf: () => Object.getPrototypeOf(prototypeProvider),\r\n```\r\n\r\nThen you can pass `client._originalClient` or `this._originalClient` when you actually do have a client, or an empty object without having to cast anything in the tests.",
        "pr_file_module": null
      },
      {
        "comment_id": "1991940907",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26450,
        "pr_file": "packages/client/src/runtime/core/compositeProxy/createCompositeProxy.ts",
        "discussion_id": "1991937401",
        "commented_code": "@@ -39,7 +40,7 @@ const customInspect = Symbol.for('nodejs.util.inspect.custom')\n  * @param layers\n  * @returns\n  */\n-export function createCompositeProxy<T extends object>(target: T, layers: CompositeProxyLayer[]): T {\n+export function createCompositeProxy<T extends object>(client: Client, target: T, layers: CompositeProxyLayer[]): T {",
        "comment_created_at": "2025-03-12T17:08:33+00:00",
        "comment_author": "aqrln",
        "comment_body": "alternatively, you can pass the prototype itself, that should also be fine",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1543093305",
    "pr_number": 23637,
    "pr_file": "packages/client/src/runtime/core/engines/library/LibraryEngine.ts",
    "created_at": "2024-03-28T14:37:10+00:00",
    "commented_code": "isolation_level: arg.isolationLevel,\n       })\n \n-      result = await this.engine?.startTransaction(jsonOptions, headerStr)\n+      if (TARGET_BUILD_TYPE === 'rn') {",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1543093305",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23637,
        "pr_file": "packages/client/src/runtime/core/engines/library/LibraryEngine.ts",
        "discussion_id": "1543093305",
        "commented_code": "@@ -151,11 +180,26 @@ export class LibraryEngine implements Engine<undefined> {\n         isolation_level: arg.isolationLevel,\n       })\n \n-      result = await this.engine?.startTransaction(jsonOptions, headerStr)\n+      if (TARGET_BUILD_TYPE === 'rn') {",
        "comment_created_at": "2024-03-28T14:37:10+00:00",
        "comment_author": "SevInf",
        "comment_body": "This conditionals scattered all over the class look brittle and hard to maintain, let's abstract them out.\r\n\r\nWe already have an abstraction for using different kind of libraries within `LibraryEngine` and this is `libraryLoader`/ `Library`. What I would suggest:\r\n\r\n- We'll write an adapter that would wrap `__PrismaProxy` and make it conform to `Library` interface\r\n- We implement `libraryLoader` for react native. \r\n\r\nIf we do that, we can revert most of the `LibraryEngine` to it's previous state and concentrate all the difference in different `Library` implementations. This is how NAPI/WASM library abstraction is implemented and I'd prefer React Native to work the same way too.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1547557334",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23637,
        "pr_file": "packages/client/src/runtime/core/engines/library/LibraryEngine.ts",
        "discussion_id": "1543093305",
        "commented_code": "@@ -151,11 +180,26 @@ export class LibraryEngine implements Engine<undefined> {\n         isolation_level: arg.isolationLevel,\n       })\n \n-      result = await this.engine?.startTransaction(jsonOptions, headerStr)\n+      if (TARGET_BUILD_TYPE === 'rn') {",
        "comment_created_at": "2024-04-02T10:12:09+00:00",
        "comment_author": "ospfranco",
        "comment_body": "I've implemented a `reactNativeLibraryLoader`, put the class that wraps the bindings inside, since I didn't know where else to put this. Let me know if this is correct.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1606829343",
    "pr_number": 16874,
    "pr_file": "packages/cli/src/Version.ts",
    "created_at": "2024-05-20T14:06:41+00:00",
    "commented_code": "return []\n   }\n \n+  private async getPrismaClientJSGenerators(schemaPath: string | null): Promise<",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1606829343",
        "repo_full_name": "prisma/prisma",
        "pr_number": 16874,
        "pr_file": "packages/cli/src/Version.ts",
        "discussion_id": "1606829343",
        "commented_code": "@@ -143,6 +166,39 @@ export class Version implements Command {\n     return []\n   }\n \n+  private async getPrismaClientJSGenerators(schemaPath: string | null): Promise<",
        "comment_created_at": "2024-05-20T14:06:41+00:00",
        "comment_author": "jkomyno",
        "comment_body": "This function should take the `{ schemas }` output of `getSchemaPath` as input, rather than calling `getSchema()` internally.",
        "pr_file_module": null
      }
    ]
  }
]