[
  {
    "discussion_id": "2018720217",
    "pr_number": 26761,
    "pr_file": "packages/client/src/runtime/core/engines/client/ClientEngine.ts",
    "created_at": "2025-03-28T13:47:47+00:00",
    "commented_code": "metrics(_options: EngineMetricsOptions): Promise<Metrics | string> {\n     throw new Error('Method not implemented.')\n   }\n+\n+  /**\n+   * Converts the result of a compacted query back to result objects analogous to what queries\n+   * would return when executed individually.\n+   */\n+  #convertCompactedRows(\n+    rows: {}[],\n+    response: CompactedBatchResponse,\n+    action: string,\n+  ): BatchQueryEngineResult<unknown>[] {\n+    // a list of objects that contain the keys of every row\n+    const keysPerRow = rows.map((item) => response.keys.reduce((acc, key) => ({ [key]: item[key], ...acc }), {}))",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "2018720217",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26761,
        "pr_file": "packages/client/src/runtime/core/engines/client/ClientEngine.ts",
        "discussion_id": "2018720217",
        "commented_code": "@@ -345,6 +367,44 @@ export class ClientEngine implements Engine<undefined> {\n   metrics(_options: EngineMetricsOptions): Promise<Metrics | string> {\n     throw new Error('Method not implemented.')\n   }\n+\n+  /**\n+   * Converts the result of a compacted query back to result objects analogous to what queries\n+   * would return when executed individually.\n+   */\n+  #convertCompactedRows(\n+    rows: {}[],\n+    response: CompactedBatchResponse,\n+    action: string,\n+  ): BatchQueryEngineResult<unknown>[] {\n+    // a list of objects that contain the keys of every row\n+    const keysPerRow = rows.map((item) => response.keys.reduce((acc, key) => ({ [key]: item[key], ...acc }), {}))",
        "comment_created_at": "2025-03-28T13:47:47+00:00",
        "comment_author": "viktor-ferenczi",
        "comment_body": "It may pose O(N^2) time complexity, where N is the number of rows. I suggest updating the same object instead.\r\n\r\n```\r\nconst keysPerRow = rows.map((item) => {\r\n  const obj: Record<string, any> = {}\r\n  for (const key of response.keys) {\r\n    obj[key] = item[key]\r\n  }\r\n  return obj\r\n});\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2018763772",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26761,
        "pr_file": "packages/client/src/runtime/core/engines/client/ClientEngine.ts",
        "discussion_id": "2018720217",
        "commented_code": "@@ -345,6 +367,44 @@ export class ClientEngine implements Engine<undefined> {\n   metrics(_options: EngineMetricsOptions): Promise<Metrics | string> {\n     throw new Error('Method not implemented.')\n   }\n+\n+  /**\n+   * Converts the result of a compacted query back to result objects analogous to what queries\n+   * would return when executed individually.\n+   */\n+  #convertCompactedRows(\n+    rows: {}[],\n+    response: CompactedBatchResponse,\n+    action: string,\n+  ): BatchQueryEngineResult<unknown>[] {\n+    // a list of objects that contain the keys of every row\n+    const keysPerRow = rows.map((item) => response.keys.reduce((acc, key) => ({ [key]: item[key], ...acc }), {}))",
        "comment_created_at": "2025-03-28T14:13:47+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "updated",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2018716538",
    "pr_number": 26761,
    "pr_file": "packages/client/src/runtime/core/engines/client/ClientEngine.ts",
    "created_at": "2025-03-28T13:46:12+00:00",
    "commented_code": "queries: JsonQuery[],\n     { transaction, traceparent: _traceparent }: RequestBatchOptions<undefined>,\n   ): Promise<BatchQueryEngineResult<T>[]> {\n-    this.lastStartedQuery = JSON.stringify(queries)\n+    if (queries.length === 0) {\n+      return []\n+    }\n+    const firstAction = queries[0].action",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "2018716538",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26761,
        "pr_file": "packages/client/src/runtime/core/engines/client/ClientEngine.ts",
        "discussion_id": "2018716538",
        "commented_code": "@@ -294,18 +300,19 @@ export class ClientEngine implements Engine<undefined> {\n     queries: JsonQuery[],\n     { transaction, traceparent: _traceparent }: RequestBatchOptions<undefined>,\n   ): Promise<BatchQueryEngineResult<T>[]> {\n-    this.lastStartedQuery = JSON.stringify(queries)\n+    if (queries.length === 0) {\n+      return []\n+    }\n+    const firstAction = queries[0].action",
        "comment_created_at": "2025-03-28T13:46:12+00:00",
        "comment_author": "viktor-ferenczi",
        "comment_body": "Is it guaranteed that each query has the same `action` in the batch?",
        "pr_file_module": null
      },
      {
        "comment_id": "2018763287",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26761,
        "pr_file": "packages/client/src/runtime/core/engines/client/ClientEngine.ts",
        "discussion_id": "2018716538",
        "commented_code": "@@ -294,18 +300,19 @@ export class ClientEngine implements Engine<undefined> {\n     queries: JsonQuery[],\n     { transaction, traceparent: _traceparent }: RequestBatchOptions<undefined>,\n   ): Promise<BatchQueryEngineResult<T>[]> {\n-    this.lastStartedQuery = JSON.stringify(queries)\n+    if (queries.length === 0) {\n+      return []\n+    }\n+    const firstAction = queries[0].action",
        "comment_created_at": "2025-03-28T14:13:29+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "added a check",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1949613622",
    "pr_number": 26293,
    "pr_file": "packages/client/src/runtime/core/engines/client/interpreter/renderQueryTemplate.ts",
    "created_at": "2025-02-10T17:47:33+00:00",
    "commented_code": "query,\n   params,\n }: QueryWithSubstitutedPlaceholders): QueryWithSubstitutedPlaceholders {\n-  const flattened: Value[] = []\n+  if (!query.includes(BEGIN_REPEAT)) {\n+    return { query, params }\n+  }\n+\n+  const flattenedParams: Value[] = []\n   let lastParamId = 1\n   let result = ''\n   let templatePos = 0\n \n+  type State = 'normal' | 'quoted' | 'repeating'",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1949613622",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26293,
        "pr_file": "packages/client/src/runtime/core/engines/client/interpreter/renderQueryTemplate.ts",
        "discussion_id": "1949613622",
        "commented_code": "@@ -38,50 +38,120 @@ export function renderQueryTemplate({\n   query,\n   params,\n }: QueryWithSubstitutedPlaceholders): QueryWithSubstitutedPlaceholders {\n-  const flattened: Value[] = []\n+  if (!query.includes(BEGIN_REPEAT)) {\n+    return { query, params }\n+  }\n+\n+  const flattenedParams: Value[] = []\n   let lastParamId = 1\n   let result = ''\n   let templatePos = 0\n \n+  type State = 'normal' | 'quoted' | 'repeating'",
        "comment_created_at": "2025-02-10T17:47:33+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "why not use an enum? I think by default they're number based so more optimal for comparisons and switch cases",
        "pr_file_module": null
      },
      {
        "comment_id": "1949629757",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26293,
        "pr_file": "packages/client/src/runtime/core/engines/client/interpreter/renderQueryTemplate.ts",
        "discussion_id": "1949613622",
        "commented_code": "@@ -38,50 +38,120 @@ export function renderQueryTemplate({\n   query,\n   params,\n }: QueryWithSubstitutedPlaceholders): QueryWithSubstitutedPlaceholders {\n-  const flattened: Value[] = []\n+  if (!query.includes(BEGIN_REPEAT)) {\n+    return { query, params }\n+  }\n+\n+  const flattenedParams: Value[] = []\n   let lastParamId = 1\n   let result = ''\n   let templatePos = 0\n \n+  type State = 'normal' | 'quoted' | 'repeating'",
        "comment_created_at": "2025-02-10T17:58:11+00:00",
        "comment_author": "aqrln",
        "comment_body": "I don't think it matters either way because strings are interned in JS so we should always be comparing integers anyhow (whether it's enum variants or pointers to `v8::String`) but I can change it to an enum if you'd prefer",
        "pr_file_module": null
      },
      {
        "comment_id": "1949644722",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26293,
        "pr_file": "packages/client/src/runtime/core/engines/client/interpreter/renderQueryTemplate.ts",
        "discussion_id": "1949613622",
        "commented_code": "@@ -38,50 +38,120 @@ export function renderQueryTemplate({\n   query,\n   params,\n }: QueryWithSubstitutedPlaceholders): QueryWithSubstitutedPlaceholders {\n-  const flattened: Value[] = []\n+  if (!query.includes(BEGIN_REPEAT)) {\n+    return { query, params }\n+  }\n+\n+  const flattenedParams: Value[] = []\n   let lastParamId = 1\n   let result = ''\n   let templatePos = 0\n \n+  type State = 'normal' | 'quoted' | 'repeating'",
        "comment_created_at": "2025-02-10T18:07:02+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "ok, I guess it doesn't matter here then (I suspect enums are probably still more efficient if one is doing switches because their ordinals can used as a jump table, there's no switches in here though so yeah)",
        "pr_file_module": null
      },
      {
        "comment_id": "1950434681",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26293,
        "pr_file": "packages/client/src/runtime/core/engines/client/interpreter/renderQueryTemplate.ts",
        "discussion_id": "1949613622",
        "commented_code": "@@ -38,50 +38,120 @@ export function renderQueryTemplate({\n   query,\n   params,\n }: QueryWithSubstitutedPlaceholders): QueryWithSubstitutedPlaceholders {\n-  const flattened: Value[] = []\n+  if (!query.includes(BEGIN_REPEAT)) {\n+    return { query, params }\n+  }\n+\n+  const flattenedParams: Value[] = []\n   let lastParamId = 1\n   let result = ''\n   let templatePos = 0\n \n+  type State = 'normal' | 'quoted' | 'repeating'",
        "comment_created_at": "2025-02-11T08:40:24+00:00",
        "comment_author": "aqrln",
        "comment_body": "Yeah, in this case V8 (Ignition) generates identical bytecode in both cases, the only difference being `LdaConstant` emitted in the case of strings or `LdaZero`/`LdaSmi` emitted for enums. The machine code generated for ARM64 by TurboFan, however, ends up being 5 CPU instructions shorter with enums because small constants can be used as immediates:\r\n\r\n```\r\n0xffff90007424   3a4  7100067f       cmp w19, #0x1 (1)\r\n```\r\n\r\nbut strings need to be loaded from the constants table into a register first:\r\n\r\n```\r\n0xffff8dfc746c   3ac  580080f6       ldr x22, pc+4124 (addr 0x0000ffff8dfc8488)    ;; object: 0x1fde6cc134f1 <String[6]: #quoted>\r\n0xffff8dfc7470   3b0  eb16029f       cmp x20, x22\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1950438652",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26293,
        "pr_file": "packages/client/src/runtime/core/engines/client/interpreter/renderQueryTemplate.ts",
        "discussion_id": "1949613622",
        "commented_code": "@@ -38,50 +38,120 @@ export function renderQueryTemplate({\n   query,\n   params,\n }: QueryWithSubstitutedPlaceholders): QueryWithSubstitutedPlaceholders {\n-  const flattened: Value[] = []\n+  if (!query.includes(BEGIN_REPEAT)) {\n+    return { query, params }\n+  }\n+\n+  const flattenedParams: Value[] = []\n   let lastParamId = 1\n   let result = ''\n   let templatePos = 0\n \n+  type State = 'normal' | 'quoted' | 'repeating'",
        "comment_created_at": "2025-02-11T08:43:18+00:00",
        "comment_author": "aqrln",
        "comment_body": "I guess there technically is tiny benefit in using enums here then \ud83d\ude04",
        "pr_file_module": null
      },
      {
        "comment_id": "1950674335",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26293,
        "pr_file": "packages/client/src/runtime/core/engines/client/interpreter/renderQueryTemplate.ts",
        "discussion_id": "1949613622",
        "commented_code": "@@ -38,50 +38,120 @@ export function renderQueryTemplate({\n   query,\n   params,\n }: QueryWithSubstitutedPlaceholders): QueryWithSubstitutedPlaceholders {\n-  const flattened: Value[] = []\n+  if (!query.includes(BEGIN_REPEAT)) {\n+    return { query, params }\n+  }\n+\n+  const flattenedParams: Value[] = []\n   let lastParamId = 1\n   let result = ''\n   let templatePos = 0\n \n+  type State = 'normal' | 'quoted' | 'repeating'",
        "comment_created_at": "2025-02-11T11:26:36+00:00",
        "comment_author": "aqrln",
        "comment_body": "Important note thought that this only definitely applies to const enums (as I just wrote 0, 1, 2 in a JS file I copied the code to literally), regular non-const TypeScript enums would probably generate worse code than either of these due to an extra layer of indirection through the enum object.",
        "pr_file_module": null
      }
    ]
  }
]