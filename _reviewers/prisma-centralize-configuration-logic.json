[
  {
    "discussion_id": "2018055823",
    "pr_number": 26767,
    "pr_file": "packages/client-generator-ts/src/generateClient.ts",
    "created_at": "2025-03-28T07:26:22+00:00",
    "commented_code": "copyEngine,\n   envPaths,\n   typedSql,\n+  target = 'nodejs',",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "2018055823",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26767,
        "pr_file": "packages/client-generator-ts/src/generateClient.ts",
        "discussion_id": "2018055823",
        "commented_code": "@@ -82,10 +80,14 @@ export function buildClient({\n   copyEngine,\n   envPaths,\n   typedSql,\n+  target = 'nodejs',",
        "comment_created_at": "2025-03-28T07:26:22+00:00",
        "comment_author": "FGoessler",
        "comment_body": "\ud83d\udca1 Would it be easily possible to have the default value only at the \"entry level\". Right now it seems like we have multiple functions with an optional `target` param that redefine the default. \ud83e\udd14 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1950601823",
    "pr_number": 26291,
    "pr_file": "packages/internals/src/utils/loadEnvFile.ts",
    "created_at": "2025-02-11T10:34:20+00:00",
    "commented_code": "+import { PrismaConfig } from '@prisma/config'\n+\n import { getEnvPaths } from './getEnvPaths'\n import { tryLoadEnvs } from './tryLoadEnvs'\n \n /**\n  * Read .env file only if next to schema.prisma\n- * .env found: print to console it's relative path\n+ * .env found: print to console its relative path\n  */\n export async function loadEnvFile({\n   schemaPath,\n+  config,\n   printMessage = false,\n-}: { schemaPath?: string; printMessage?: boolean } = {}) {\n+}: {\n+  schemaPath?: string\n+  printMessage?: boolean\n+  config: PrismaConfig\n+}) {\n+  if (config.loadedFromFile) {\n+    console.debug(`Prisma config detected, skipping environment variable loading`)\n+    return\n+  }",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1950601823",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26291,
        "pr_file": "packages/internals/src/utils/loadEnvFile.ts",
        "discussion_id": "1950601823",
        "commented_code": "@@ -1,14 +1,26 @@\n+import { PrismaConfig } from '@prisma/config'\n+\n import { getEnvPaths } from './getEnvPaths'\n import { tryLoadEnvs } from './tryLoadEnvs'\n \n /**\n  * Read .env file only if next to schema.prisma\n- * .env found: print to console it's relative path\n+ * .env found: print to console its relative path\n  */\n export async function loadEnvFile({\n   schemaPath,\n+  config,\n   printMessage = false,\n-}: { schemaPath?: string; printMessage?: boolean } = {}) {\n+}: {\n+  schemaPath?: string\n+  printMessage?: boolean\n+  config: PrismaConfig\n+}) {\n+  if (config.loadedFromFile) {\n+    console.debug(`Prisma config detected, skipping environment variable loading`)\n+    return\n+  }",
        "comment_created_at": "2025-02-11T10:34:20+00:00",
        "comment_author": "FGoessler",
        "comment_body": "\u2139\ufe0f Moved the env loading skip in here to not scatter that logic all around.",
        "pr_file_module": null
      },
      {
        "comment_id": "1950760657",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26291,
        "pr_file": "packages/internals/src/utils/loadEnvFile.ts",
        "discussion_id": "1950601823",
        "commented_code": "@@ -1,14 +1,26 @@\n+import { PrismaConfig } from '@prisma/config'\n+\n import { getEnvPaths } from './getEnvPaths'\n import { tryLoadEnvs } from './tryLoadEnvs'\n \n /**\n  * Read .env file only if next to schema.prisma\n- * .env found: print to console it's relative path\n+ * .env found: print to console its relative path\n  */\n export async function loadEnvFile({\n   schemaPath,\n+  config,\n   printMessage = false,\n-}: { schemaPath?: string; printMessage?: boolean } = {}) {\n+}: {\n+  schemaPath?: string\n+  printMessage?: boolean\n+  config: PrismaConfig\n+}) {\n+  if (config.loadedFromFile) {\n+    console.debug(`Prisma config detected, skipping environment variable loading`)\n+    return\n+  }",
        "comment_created_at": "2025-02-11T12:26:02+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "It seems we normally don't use `console.debug` outside of tests/CI,\r\nnot sure if there's a reason for it but it's probably better to try to stay consistent throughout the codebase where we use `prisma/debug`",
        "pr_file_module": null
      },
      {
        "comment_id": "1950786486",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26291,
        "pr_file": "packages/internals/src/utils/loadEnvFile.ts",
        "discussion_id": "1950601823",
        "commented_code": "@@ -1,14 +1,26 @@\n+import { PrismaConfig } from '@prisma/config'\n+\n import { getEnvPaths } from './getEnvPaths'\n import { tryLoadEnvs } from './tryLoadEnvs'\n \n /**\n  * Read .env file only if next to schema.prisma\n- * .env found: print to console it's relative path\n+ * .env found: print to console its relative path\n  */\n export async function loadEnvFile({\n   schemaPath,\n+  config,\n   printMessage = false,\n-}: { schemaPath?: string; printMessage?: boolean } = {}) {\n+}: {\n+  schemaPath?: string\n+  printMessage?: boolean\n+  config: PrismaConfig\n+}) {\n+  if (config.loadedFromFile) {\n+    console.debug(`Prisma config detected, skipping environment variable loading`)\n+    return\n+  }",
        "comment_created_at": "2025-02-11T12:42:47+00:00",
        "comment_author": "FGoessler",
        "comment_body": "Good catch of a copy paste error - thanks!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1946705219",
    "pr_number": 26271,
    "pr_file": "packages/cli/src/Validate.ts",
    "created_at": "2025-02-07T15:23:05+00:00",
    "commented_code": "return this.help()\n     }\n \n-    await loadEnvFile({ schemaPath: args['--schema'], printMessage: true })\n+    const { config } = await loadConfigFromFile({ configFile: args['--config'] })\n+\n+    if (config?.env) {\n+      if (config.env.kind === 'skip') {\n+        console.debug(`Prisma config detected, skipping environment variable loading`)\n+      } else if (config.env.kind === 'load') {\n+        const env = await config.env.loadEnv()\n+\n+        // Note: Prisma currently relies on accessing `process.env` directly\n+        process.env = { ...process.env, ...env }\n+        console.debug(`Environment variables loaded via Prisma config`)\n+      }\n+    } else {\n+      await loadEnvFile({ schemaPath: args['--schema'], printMessage: true })\n+    }",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1946705219",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26271,
        "pr_file": "packages/cli/src/Validate.ts",
        "discussion_id": "1946705219",
        "commented_code": "@@ -62,7 +68,21 @@ ${bold('Examples')}\n       return this.help()\n     }\n \n-    await loadEnvFile({ schemaPath: args['--schema'], printMessage: true })\n+    const { config } = await loadConfigFromFile({ configFile: args['--config'] })\n+\n+    if (config?.env) {\n+      if (config.env.kind === 'skip') {\n+        console.debug(`Prisma config detected, skipping environment variable loading`)\n+      } else if (config.env.kind === 'load') {\n+        const env = await config.env.loadEnv()\n+\n+        // Note: Prisma currently relies on accessing `process.env` directly\n+        process.env = { ...process.env, ...env }\n+        console.debug(`Environment variables loaded via Prisma config`)\n+      }\n+    } else {\n+      await loadEnvFile({ schemaPath: args['--schema'], printMessage: true })\n+    }",
        "comment_created_at": "2025-02-07T15:23:05+00:00",
        "comment_author": "jkomyno",
        "comment_body": "TODO: extract this as its own function + test it in a follow-up PR.\r\nSee [ORM-607](https://linear.app/prisma-company/issue/ORM-607/when-prismaconfigts-is-detected-disable-automatic-env-file-loading).",
        "pr_file_module": null
      }
    ]
  }
]