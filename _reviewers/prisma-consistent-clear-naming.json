[
  {
    "discussion_id": "2225677867",
    "pr_number": 27727,
    "pr_file": "packages/adapter-mariadb/src/mariadb.ts",
    "created_at": "2025-07-23T13:47:38+00:00",
    "commented_code": "async dispose(): Promise<void> {\n     await this.client.end()\n   }\n+\n+  underlyingDriver(): mariadb.Pool {",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "2225677867",
        "repo_full_name": "prisma/prisma",
        "pr_number": 27727,
        "pr_file": "packages/adapter-mariadb/src/mariadb.ts",
        "discussion_id": "2225677867",
        "commented_code": "@@ -149,6 +149,10 @@ export class PrismaMariaDbAdapter extends MariaDbQueryable<mariadb.Pool> impleme\n   async dispose(): Promise<void> {\n     await this.client.end()\n   }\n+\n+  underlyingDriver(): mariadb.Pool {",
        "comment_created_at": "2025-07-23T13:47:38+00:00",
        "comment_author": "aqrln",
        "comment_body": "I'm wondering if we really want to use a generic name consistent between adapters or if it would actually be better to specialize them based on the type name that the method returns (i.e. `getPool`, `getClient` etc).",
        "pr_file_module": null
      },
      {
        "comment_id": "2225700248",
        "repo_full_name": "prisma/prisma",
        "pr_number": 27727,
        "pr_file": "packages/adapter-mariadb/src/mariadb.ts",
        "discussion_id": "2225677867",
        "commented_code": "@@ -149,6 +149,10 @@ export class PrismaMariaDbAdapter extends MariaDbQueryable<mariadb.Pool> impleme\n   async dispose(): Promise<void> {\n     await this.client.end()\n   }\n+\n+  underlyingDriver(): mariadb.Pool {",
        "comment_created_at": "2025-07-23T13:55:21+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "I think using a consistent name makes it more obvious and easier to discover for users, `getPool` could be interpreted to return some Prisma type, unless we make it super explicit i.e `getPgPool`, `getNeonClient` etc",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1998102879",
    "pr_number": 26633,
    "pr_file": "packages/adapter-pg/src/index.ts",
    "created_at": "2025-03-17T07:35:53+00:00",
    "commented_code": "-export { PrismaPg } from './pg'\n+export { PrismaPgAdapterFactory as PrismaPg } from './pg'",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1998102879",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26633,
        "pr_file": "packages/adapter-pg/src/index.ts",
        "discussion_id": "1998102879",
        "commented_code": "@@ -1 +1 @@\n-export { PrismaPg } from './pg'\n+export { PrismaPgAdapterFactory as PrismaPg } from './pg'",
        "comment_created_at": "2025-03-17T07:35:53+00:00",
        "comment_author": "FGoessler",
        "comment_body": "\ud83e\udd14  Am not a fan of such name changes in barrel exports. I actually got confused between the Adapter, the factory and the public facing \"adapter\" which actually is the factory and what is imported from where as what.",
        "pr_file_module": null
      },
      {
        "comment_id": "1998470357",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26633,
        "pr_file": "packages/adapter-pg/src/index.ts",
        "discussion_id": "1998102879",
        "commented_code": "@@ -1 +1 @@\n-export { PrismaPg } from './pg'\n+export { PrismaPgAdapterFactory as PrismaPg } from './pg'",
        "comment_created_at": "2025-03-17T10:46:35+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "@FGoessler do you think we should export them under the original name? Or rename the factory to just `PrismaPg`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1998569136",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26633,
        "pr_file": "packages/adapter-pg/src/index.ts",
        "discussion_id": "1998102879",
        "commented_code": "@@ -1 +1 @@\n-export { PrismaPg } from './pg'\n+export { PrismaPgAdapterFactory as PrismaPg } from './pg'",
        "comment_created_at": "2025-03-17T11:52:58+00:00",
        "comment_author": "FGoessler",
        "comment_body": "To make it for an easier interface for the end users I'd argue to rename the factory to just `PrismaPg`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1998589754",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26633,
        "pr_file": "packages/adapter-pg/src/index.ts",
        "discussion_id": "1998102879",
        "commented_code": "@@ -1 +1 @@\n-export { PrismaPg } from './pg'\n+export { PrismaPgAdapterFactory as PrismaPg } from './pg'",
        "comment_created_at": "2025-03-17T12:06:48+00:00",
        "comment_author": "jkomyno",
        "comment_body": "This name change actually has important purposes:\r\n- allows us to not update our docs about Driver Adapters uselessly, preserving the previous exported names\r\n- hides the long-ass `*AdapterFactory` from our users. It's an internal detail which implies that we're adhering to  the `SqlMigrationAwareDriverAdapterFactory` interface. Our users don't need to be aware of this\r\n\r\nLet's keep the name change in the barrel exports, so that we won't annoy our users.",
        "pr_file_module": null
      },
      {
        "comment_id": "1998730176",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26633,
        "pr_file": "packages/adapter-pg/src/index.ts",
        "discussion_id": "1998102879",
        "commented_code": "@@ -1 +1 @@\n-export { PrismaPg } from './pg'\n+export { PrismaPgAdapterFactory as PrismaPg } from './pg'",
        "comment_created_at": "2025-03-17T13:26:22+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "kept it as is, I think it what we call it internally doesn't matter so much, we can rename it later without breaking anything",
        "pr_file_module": null
      },
      {
        "comment_id": "1999113448",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26633,
        "pr_file": "packages/adapter-pg/src/index.ts",
        "discussion_id": "1998102879",
        "commented_code": "@@ -1 +1 @@\n-export { PrismaPg } from './pg'\n+export { PrismaPgAdapterFactory as PrismaPg } from './pg'",
        "comment_created_at": "2025-03-17T16:06:55+00:00",
        "comment_author": "FGoessler",
        "comment_body": "Ok fair point. I mean now I know that we have those different names and personally hopefully won't get confused anymore. \ud83d\ude05 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1991457154",
    "pr_number": 26577,
    "pr_file": "packages/cli/src/init/client-output-path.ts",
    "created_at": "2025-03-12T13:02:43+00:00",
    "commented_code": "+import fs from 'node:fs'\n+import path from 'node:path'\n+\n+import { Schema } from 'effect'",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1991457154",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26577,
        "pr_file": "packages/cli/src/init/client-output-path.ts",
        "discussion_id": "1991457154",
        "commented_code": "@@ -0,0 +1,98 @@\n+import fs from 'node:fs'\n+import path from 'node:path'\n+\n+import { Schema } from 'effect'",
        "comment_created_at": "2025-03-12T13:02:43+00:00",
        "comment_author": "FGoessler",
        "comment_body": "\ud83d\udca1 I think we used to alias this import to `Shape` in the `prisma/config` stuff to avoid confusion with the overloaded term `Schema` in our domain. Maybe worthwhile here, too.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1528356006",
    "pr_number": 20113,
    "pr_file": "packages/instrumentation/src/ActiveTracingHelper.ts",
    "created_at": "2024-03-18T11:21:04+00:00",
    "commented_code": "type Options = {\n   traceMiddleware: boolean\n+  ignoreLayersTypes: PrismaLayerType[]",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1528356006",
        "repo_full_name": "prisma/prisma",
        "pr_number": 20113,
        "pr_file": "packages/instrumentation/src/ActiveTracingHelper.ts",
        "discussion_id": "1528356006",
        "commented_code": "@@ -21,12 +23,15 @@ const nonSampledTraceParent = `00-10-10-00`\n \n type Options = {\n   traceMiddleware: boolean\n+  ignoreLayersTypes: PrismaLayerType[]",
        "comment_created_at": "2024-03-18T11:21:04+00:00",
        "comment_author": "SevInf",
        "comment_body": "Could you clarify why you use `layer` name for this feature?\r\nWe are filtering out spans, OTEL docs also call them spans. What would you think about renaming this property to `ignoreSpanNames`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1705152037",
        "repo_full_name": "prisma/prisma",
        "pr_number": 20113,
        "pr_file": "packages/instrumentation/src/ActiveTracingHelper.ts",
        "discussion_id": "1528356006",
        "commented_code": "@@ -21,12 +23,15 @@ const nonSampledTraceParent = `00-10-10-00`\n \n type Options = {\n   traceMiddleware: boolean\n+  ignoreLayersTypes: PrismaLayerType[]",
        "comment_created_at": "2024-08-06T08:44:41+00:00",
        "comment_author": "overbit",
        "comment_body": "No issues with that. The `layer` name was meant to follow Prisma naming as it was the target. Happy to update it ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1967752514",
    "pr_number": 26321,
    "pr_file": "packages/driver-adapter-utils/src/error.ts",
    "created_at": "2025-02-24T14:29:19+00:00",
    "commented_code": "+import { Error as ErrorObject } from './types'\n+\n+export class PrismaAdapterError extends Error {\n+  name = 'PrismaAdapterError'",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1967752514",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26321,
        "pr_file": "packages/driver-adapter-utils/src/error.ts",
        "discussion_id": "1967752514",
        "commented_code": "@@ -0,0 +1,11 @@\n+import { Error as ErrorObject } from './types'\n+\n+export class PrismaAdapterError extends Error {\n+  name = 'PrismaAdapterError'",
        "comment_created_at": "2025-02-24T14:29:19+00:00",
        "comment_author": "jkomyno",
        "comment_body": "They're called `Driver Adapters`, not `Prisma Adapters`. Let's use consistent naming conventions.\r\n\r\n```suggestion\r\nexport class DriverAdapterError extends Error {\r\n  name = 'DriverAdapterError'\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1968050389",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26321,
        "pr_file": "packages/driver-adapter-utils/src/error.ts",
        "discussion_id": "1967752514",
        "commented_code": "@@ -0,0 +1,11 @@\n+import { Error as ErrorObject } from './types'\n+\n+export class PrismaAdapterError extends Error {\n+  name = 'PrismaAdapterError'",
        "comment_created_at": "2025-02-24T16:55:57+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1931850497",
    "pr_number": 26183,
    "pr_file": "packages/driver-adapter-utils/src/types.ts",
    "created_at": "2025-01-28T09:54:37+00:00",
    "commented_code": "maxBindValues?: number\n }\n \n-export type Flavour = 'mysql' | 'postgres' | 'sqlite'\n+// TODO: I don't really like that we call this \"flavour\" in some places and \"provider\" in others. :/\n+export type Flavour = 'mysql' | 'postgres' | 'sqlite' | 'mongodb'",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1931850497",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26183,
        "pr_file": "packages/driver-adapter-utils/src/types.ts",
        "discussion_id": "1931850497",
        "commented_code": "@@ -115,7 +154,8 @@ export type ConnectionInfo = {\n   maxBindValues?: number\n }\n \n-export type Flavour = 'mysql' | 'postgres' | 'sqlite'\n+// TODO: I don't really like that we call this \"flavour\" in some places and \"provider\" in others. :/\n+export type Flavour = 'mysql' | 'postgres' | 'sqlite' | 'mongodb'",
        "comment_created_at": "2025-01-28T09:54:37+00:00",
        "comment_author": "jkomyno",
        "comment_body": "I feel you: https://github.com/prisma/prisma/issues/21865",
        "pr_file_module": null
      },
      {
        "comment_id": "1931855392",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26183,
        "pr_file": "packages/driver-adapter-utils/src/types.ts",
        "discussion_id": "1931850497",
        "commented_code": "@@ -115,7 +154,8 @@ export type ConnectionInfo = {\n   maxBindValues?: number\n }\n \n-export type Flavour = 'mysql' | 'postgres' | 'sqlite'\n+// TODO: I don't really like that we call this \"flavour\" in some places and \"provider\" in others. :/\n+export type Flavour = 'mysql' | 'postgres' | 'sqlite' | 'mongodb'",
        "comment_created_at": "2025-01-28T09:56:46+00:00",
        "comment_author": "FGoessler",
        "comment_body": "So our goal state is to ideally call it \"provider\" everywhere?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1923211488",
    "pr_number": 26129,
    "pr_file": "packages/client/src/runtime/core/interpreter/QueryInterpreter.ts",
    "created_at": "2025-01-21T07:46:21+00:00",
    "commented_code": "return this.interpretNode(queryPlan, this.params)\n   }\n \n-  private async interpretNode(node: QueryPlanNode, env: Record<string, unknown>): Promise<unknown> {\n+  private async interpretNode(node: QueryPlanNode, env: Env): Promise<Value> {",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1923211488",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26129,
        "pr_file": "packages/client/src/runtime/core/interpreter/QueryInterpreter.ts",
        "discussion_id": "1923211488",
        "commented_code": "@@ -10,7 +12,7 @@ export class QueryInterpreter {\n     return this.interpretNode(queryPlan, this.params)\n   }\n \n-  private async interpretNode(node: QueryPlanNode, env: Record<string, unknown>): Promise<unknown> {\n+  private async interpretNode(node: QueryPlanNode, env: Env): Promise<Value> {",
        "comment_created_at": "2025-01-21T07:46:21+00:00",
        "comment_author": "FGoessler",
        "comment_body": "\ud83e\udd14 I find the term `env` confusing here. My assumption is right away that this is about `process.env` vars and not the specific variable bindings / params. When we create the QueryInterpreter we call the argument `params`. Also the term `bindings` would be fine for me. `paramBindings` being my personal favorite so far but it's longer.",
        "pr_file_module": null
      }
    ]
  }
]