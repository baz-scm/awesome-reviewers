[
  {
    "discussion_id": "2168588622",
    "pr_number": 27515,
    "pr_file": "packages/adapter-mariadb/src/conversion.ts",
    "created_at": "2025-06-26T09:09:21+00:00",
    "commented_code": "case MariaDbColumnType.VARCHAR:\n     case MariaDbColumnType.VAR_STRING:\n     case MariaDbColumnType.STRING:\n+    case MariaDbColumnType.BLOB:\n+    case MariaDbColumnType.TINY_BLOB:\n+    case MariaDbColumnType.MEDIUM_BLOB:",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "2168588622",
        "repo_full_name": "prisma/prisma",
        "pr_number": 27515,
        "pr_file": "packages/adapter-mariadb/src/conversion.ts",
        "discussion_id": "2168588622",
        "commented_code": "@@ -75,6 +75,9 @@ export function mapColumnType(field: mariadb.FieldInfo): ColumnType {\n     case MariaDbColumnType.VARCHAR:\n     case MariaDbColumnType.VAR_STRING:\n     case MariaDbColumnType.STRING:\n+    case MariaDbColumnType.BLOB:\n+    case MariaDbColumnType.TINY_BLOB:\n+    case MariaDbColumnType.MEDIUM_BLOB:",
        "comment_created_at": "2025-06-26T09:09:21+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "these can actually be text if `BINARY_FLAG` is not set (found in QE tests)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1908510923",
    "pr_number": 21678,
    "pr_file": "packages/client/src/runtime/core/types/exported/itxClientDenyList.ts",
    "created_at": "2025-01-09T10:27:47+00:00",
    "commented_code": "-const denylist = ['$connect', '$disconnect', '$on', '$transaction', '$use', '$extends'] as const\n+const denylist = ['$connect', '$disconnect', '$on', '$use', '$extends'] as const",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1908510923",
        "repo_full_name": "prisma/prisma",
        "pr_number": 21678,
        "pr_file": "packages/client/src/runtime/core/types/exported/itxClientDenyList.ts",
        "discussion_id": "1908510923",
        "commented_code": "@@ -1,4 +1,4 @@\n-const denylist = ['$connect', '$disconnect', '$on', '$transaction', '$use', '$extends'] as const\n+const denylist = ['$connect', '$disconnect', '$on', '$use', '$extends'] as const",
        "comment_created_at": "2025-01-09T10:27:47+00:00",
        "comment_author": "aqrln",
        "comment_body": "Shouldn't this depend on the provider now?",
        "pr_file_module": null
      },
      {
        "comment_id": "1909059251",
        "repo_full_name": "prisma/prisma",
        "pr_number": 21678,
        "pr_file": "packages/client/src/runtime/core/types/exported/itxClientDenyList.ts",
        "discussion_id": "1908510923",
        "commented_code": "@@ -1,4 +1,4 @@\n-const denylist = ['$connect', '$disconnect', '$on', '$transaction', '$use', '$extends'] as const\n+const denylist = ['$connect', '$disconnect', '$on', '$use', '$extends'] as const",
        "comment_created_at": "2025-01-09T15:49:40+00:00",
        "comment_author": "LucianBuzzo",
        "comment_body": "Yes correct, this is really only available for SQL servers. Do you know if there is a utility for determining if the provider is an SQL server?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2036625348",
    "pr_number": 26709,
    "pr_file": "packages/client/tests/functional/0-legacy-ports/execute-raw/tests.ts",
    "created_at": "2025-04-10T06:47:42+00:00",
    "commented_code": "testMatrix.setupTestSuite(\n   ({ provider }) => {\n     const isMySql = provider === Providers.MYSQL\n+    const usesAnonymousParams = [Providers.MYSQL, Providers.SQLITE].includes(provider)",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "2036625348",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26709,
        "pr_file": "packages/client/tests/functional/0-legacy-ports/execute-raw/tests.ts",
        "discussion_id": "2036625348",
        "commented_code": "@@ -12,6 +12,7 @@ declare let Prisma: typeof $.Prisma\n testMatrix.setupTestSuite(\n   ({ provider }) => {\n     const isMySql = provider === Providers.MYSQL\n+    const usesAnonymousParams = [Providers.MYSQL, Providers.SQLITE].includes(provider)",
        "comment_created_at": "2025-04-10T06:47:42+00:00",
        "comment_author": "FGoessler",
        "comment_body": "\u2139\ufe0f SQLite doe snot support numbered params like `$1` but only `?`. We have custom logic inside the rust query engine to make sqlite behave as if it could do this though.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1995736796",
    "pr_number": 26633,
    "pr_file": "packages/client/tests/functional/batch-transaction-isolation-level/tests.ts",
    "created_at": "2025-03-14T14:59:04+00:00",
    "commented_code": "name: string,\n       { level, expectSql }: { level: () => PrismaNamespace.TransactionIsolationLevel; expectSql: string },\n     ) => {\n-      test(name, async () => {\n+      // Driver adapters do not issue SET TRANSACTION ISOLATION LEVEL through the query engine.",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1995736796",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26633,
        "pr_file": "packages/client/tests/functional/batch-transaction-isolation-level/tests.ts",
        "discussion_id": "1995736796",
        "commented_code": "@@ -38,7 +38,8 @@ testMatrix.setupTestSuite(\n       name: string,\n       { level, expectSql }: { level: () => PrismaNamespace.TransactionIsolationLevel; expectSql: string },\n     ) => {\n-      test(name, async () => {\n+      // Driver adapters do not issue SET TRANSACTION ISOLATION LEVEL through the query engine.",
        "comment_created_at": "2025-03-14T14:59:04+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "This PR causes `SET TRANSACTION` and `BEGIN` to not be emitted via an event and traces, because that was previously responsibility of the query engine and it's now been moved to the driver adapters. We will need to re-think how we deal with those in a query-engine-less world. I've adjusted the tests to not expect these from driver adapaters for now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "923468304",
    "pr_number": 13836,
    "pr_file": "packages/sdk/src/get-generators/getGenerators.ts",
    "created_at": "2022-07-18T14:50:54+00:00",
    "commented_code": "throw new Error(missingDatasource)\n   }\n \n+  config.datasources.forEach((datasource) => {\n+    // If the value is one of the defaults, let's print a warning to the user\n+    if (parseEnvValue(datasource.url) === defaultURL(datasource.provider)) {",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "923468304",
        "repo_full_name": "prisma/prisma",
        "pr_number": 13836,
        "pr_file": "packages/sdk/src/get-generators/getGenerators.ts",
        "discussion_id": "923468304",
        "commented_code": "@@ -120,6 +122,13 @@ export async function getGenerators(options: GetGeneratorOptions): Promise<Gener\n     throw new Error(missingDatasource)\n   }\n \n+  config.datasources.forEach((datasource) => {\n+    // If the value is one of the defaults, let's print a warning to the user\n+    if (parseEnvValue(datasource.url) === defaultURL(datasource.provider)) {",
        "comment_created_at": "2022-07-18T14:50:54+00:00",
        "comment_author": "Jolg42",
        "comment_body": "```suggestion\r\n    // If the value is one of the defaults, let's print a warning to the user\r\n    // we skip SQLite since the default is `file:./dev.db` and will work \"out-of-the-box\".\r\n    if (datasource.provider !== 'sqlite' && parseEnvValue(datasource.url) === defaultURL(datasource.provider)) {\r\n```\r\nWe should skip SQLite as it will work (it's just a file name, no username or password to set)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1634495626",
    "pr_number": 24222,
    "pr_file": "packages/migrate/src/utils/unixSocket.ts",
    "created_at": "2024-06-11T09:13:48+00:00",
    "commented_code": "+import { DatabaseCredentials } from '@prisma/internals'\n+\n+const simpleUnixPathPattern = /^\\.{0,2}\\//\n+\n+export function getSocketFromDatabaseCredentials(credentials: DatabaseCredentials): string | null {\n+  if (credentials.type === 'postgresql') {",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1634495626",
        "repo_full_name": "prisma/prisma",
        "pr_number": 24222,
        "pr_file": "packages/migrate/src/utils/unixSocket.ts",
        "discussion_id": "1634495626",
        "commented_code": "@@ -0,0 +1,17 @@\n+import { DatabaseCredentials } from '@prisma/internals'\n+\n+const simpleUnixPathPattern = /^\\.{0,2}\\//\n+\n+export function getSocketFromDatabaseCredentials(credentials: DatabaseCredentials): string | null {\n+  if (credentials.type === 'postgresql') {",
        "comment_created_at": "2024-06-11T09:13:48+00:00",
        "comment_author": "Druue",
        "comment_body": "This also affects `cockroachdb`\r\n\r\n> ```\r\n> postgres://root@?host=/path/to/client&port=26257\r\n> ```\r\n> [source](https://www.cockroachlabs.com/docs/stable/connection-parameters#example-uri-for-a-unix-domain-socket)",
        "pr_file_module": null
      },
      {
        "comment_id": "1645050369",
        "repo_full_name": "prisma/prisma",
        "pr_number": 24222,
        "pr_file": "packages/migrate/src/utils/unixSocket.ts",
        "discussion_id": "1634495626",
        "commented_code": "@@ -0,0 +1,17 @@\n+import { DatabaseCredentials } from '@prisma/internals'\n+\n+const simpleUnixPathPattern = /^\\.{0,2}\\//\n+\n+export function getSocketFromDatabaseCredentials(credentials: DatabaseCredentials): string | null {\n+  if (credentials.type === 'postgresql') {",
        "comment_created_at": "2024-06-18T21:02:20+00:00",
        "comment_author": "brian-dlee",
        "comment_body": "Okay, I've made that update. I also noticed there is an alternate value for PostgreSQL in the list of connection types, `postgres`, and I handled that one as well.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1340433942",
    "pr_number": 21195,
    "pr_file": "packages/cli/src/Init.ts",
    "created_at": "2023-09-28T16:53:55+00:00",
    "commented_code": "`\n }\n \n+export const withModelSchema = (provider: ConnectorType = 'postgresql') => {\n+  return defaultSchema(provider).concat(`\n+model User {\n+  id    Int     @id @default(autoincrement())\n+  email String  @unique\n+  name  String?\n+}",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1340433942",
        "repo_full_name": "prisma/prisma",
        "pr_number": 21195,
        "pr_file": "packages/cli/src/Init.ts",
        "discussion_id": "1340433942",
        "commented_code": "@@ -35,6 +35,16 @@ datasource db {\n `\n }\n \n+export const withModelSchema = (provider: ConnectorType = 'postgresql') => {\n+  return defaultSchema(provider).concat(`\n+model User {\n+  id    Int     @id @default(autoincrement())\n+  email String  @unique\n+  name  String?\n+}",
        "comment_created_at": "2023-09-28T16:53:55+00:00",
        "comment_author": "millsp",
        "comment_body": "Hey thanks for your contribution! I think this could produce an invalid schema for `mongodb` and `cockroachdb` providers, so we would need to add that and test that so we don't accidentally suggest an invalid schema now and in the future if we add a new provider.",
        "pr_file_module": null
      },
      {
        "comment_id": "1340438366",
        "repo_full_name": "prisma/prisma",
        "pr_number": 21195,
        "pr_file": "packages/cli/src/Init.ts",
        "discussion_id": "1340433942",
        "commented_code": "@@ -35,6 +35,16 @@ datasource db {\n `\n }\n \n+export const withModelSchema = (provider: ConnectorType = 'postgresql') => {\n+  return defaultSchema(provider).concat(`\n+model User {\n+  id    Int     @id @default(autoincrement())\n+  email String  @unique\n+  name  String?\n+}",
        "comment_created_at": "2023-09-28T16:56:18+00:00",
        "comment_author": "millsp",
        "comment_body": "That would only matter if `--datasource-provider` is specified as well, otherwise it is `postgresql` by default and it's fine then.",
        "pr_file_module": null
      },
      {
        "comment_id": "1340466289",
        "repo_full_name": "prisma/prisma",
        "pr_number": 21195,
        "pr_file": "packages/cli/src/Init.ts",
        "discussion_id": "1340433942",
        "commented_code": "@@ -35,6 +35,16 @@ datasource db {\n `\n }\n \n+export const withModelSchema = (provider: ConnectorType = 'postgresql') => {\n+  return defaultSchema(provider).concat(`\n+model User {\n+  id    Int     @id @default(autoincrement())\n+  email String  @unique\n+  name  String?\n+}",
        "comment_created_at": "2023-09-28T17:24:22+00:00",
        "comment_author": "Kayoshi-dev",
        "comment_body": "Hello ! You're right, I just checked online and on your documentation and it will produce an incorrect schema for both the provider you mentioned.\r\n\r\nI'm not sure about how I should do that, do you have any idea on how I should tackle this problem ? \r\n\r\nMaybe I could create a new file in the \"utils\" folder dedicated to the creation of schemas ? \r\n\r\nThanks for your feedback \ud83d\ude0a\r\n\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1340751514",
        "repo_full_name": "prisma/prisma",
        "pr_number": 21195,
        "pr_file": "packages/cli/src/Init.ts",
        "discussion_id": "1340433942",
        "commented_code": "@@ -35,6 +35,16 @@ datasource db {\n `\n }\n \n+export const withModelSchema = (provider: ConnectorType = 'postgresql') => {\n+  return defaultSchema(provider).concat(`\n+model User {\n+  id    Int     @id @default(autoincrement())\n+  email String  @unique\n+  name  String?\n+}",
        "comment_created_at": "2023-09-28T23:37:23+00:00",
        "comment_author": "janpio",
        "comment_body": "I think you can use the `provider` parameter that is provided to `withModelSchema` already to include a _different_ model for MongoDB and CockroachDB that is valid for these.",
        "pr_file_module": null
      }
    ]
  }
]