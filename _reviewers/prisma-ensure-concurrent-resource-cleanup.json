[
  {
    "discussion_id": "2154786889",
    "pr_number": 27436,
    "pr_file": "packages/client/tests/e2e/_utils/run.ts",
    "created_at": "2025-06-18T14:38:21+00:00",
    "commented_code": "console.log('\ud83c\udfc3 Running tests in parallel')\n \n     const pendingJobResults = [] as Promise<void>[]\n-    let availableWorkers = args['--maxWorkers']\n+    const semaphore = new Semaphore(args['--maxWorkers'])\n+\n     for (const [i, job] of dockerJobs.entries()) {\n-      while (availableWorkers === 0) {\n-        await new Promise((resolve) => setTimeout(resolve, 100))\n-      }\n+      await semaphore.acquire()\n \n-      --availableWorkers // borrow worker\n       const pendingJob = (async () => {\n         console.log(`\ud83d\udca1 Running test ${i + 1}/${dockerJobs.length}`)\n         jobResults.push(Object.assign(await job(), { name: e2eTestNames[i] }))",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "2154786889",
        "repo_full_name": "prisma/prisma",
        "pr_number": 27436,
        "pr_file": "packages/client/tests/e2e/_utils/run.ts",
        "discussion_id": "2154786889",
        "commented_code": "@@ -142,17 +143,15 @@ async function main() {\n     console.log('\ud83c\udfc3 Running tests in parallel')\n \n     const pendingJobResults = [] as Promise<void>[]\n-    let availableWorkers = args['--maxWorkers']\n+    const semaphore = new Semaphore(args['--maxWorkers'])\n+\n     for (const [i, job] of dockerJobs.entries()) {\n-      while (availableWorkers === 0) {\n-        await new Promise((resolve) => setTimeout(resolve, 100))\n-      }\n+      await semaphore.acquire()\n \n-      --availableWorkers // borrow worker\n       const pendingJob = (async () => {\n         console.log(`\ud83d\udca1 Running test ${i + 1}/${dockerJobs.length}`)\n         jobResults.push(Object.assign(await job(), { name: e2eTestNames[i] }))",
        "comment_created_at": "2025-06-18T14:38:21+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "I guess this assumes that job never throws? i'd put `semaphore.release()` in a `finally` block just to make sure we never end up hanging forever waiting for a job that failed to release it",
        "pr_file_module": null
      },
      {
        "comment_id": "2177685331",
        "repo_full_name": "prisma/prisma",
        "pr_number": 27436,
        "pr_file": "packages/client/tests/e2e/_utils/run.ts",
        "discussion_id": "2154786889",
        "commented_code": "@@ -142,17 +143,15 @@ async function main() {\n     console.log('\ud83c\udfc3 Running tests in parallel')\n \n     const pendingJobResults = [] as Promise<void>[]\n-    let availableWorkers = args['--maxWorkers']\n+    const semaphore = new Semaphore(args['--maxWorkers'])\n+\n     for (const [i, job] of dockerJobs.entries()) {\n-      while (availableWorkers === 0) {\n-        await new Promise((resolve) => setTimeout(resolve, 100))\n-      }\n+      await semaphore.acquire()\n \n-      --availableWorkers // borrow worker\n       const pendingJob = (async () => {\n         console.log(`\ud83d\udca1 Running test ${i + 1}/${dockerJobs.length}`)\n         jobResults.push(Object.assign(await job(), { name: e2eTestNames[i] }))",
        "comment_created_at": "2025-07-01T13:59:52+00:00",
        "comment_author": "aqrln",
        "comment_body": "@jacek-prisma done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1946838691",
    "pr_number": 26276,
    "pr_file": "packages/client/src/runtime/core/engines/client/transactionManager/TransactionManager.ts",
    "created_at": "2025-02-07T16:41:32+00:00",
    "commented_code": "return transaction\n   }\n \n+  async cancelAllTransactions(): Promise<void> {\n+    // TODO: call `map` on the iterator directly without collecting it into an array first\n+    // once we drop support for Node.js 18 and 20.\n+    await Promise.all([...this.transactions.values()].map((tx) => this.closeTransaction(tx, 'rolled_back')))",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1946838691",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26276,
        "pr_file": "packages/client/src/runtime/core/engines/client/transactionManager/TransactionManager.ts",
        "discussion_id": "1946838691",
        "commented_code": "@@ -185,6 +185,12 @@ export class TransactionManager {\n     return transaction\n   }\n \n+  async cancelAllTransactions(): Promise<void> {\n+    // TODO: call `map` on the iterator directly without collecting it into an array first\n+    // once we drop support for Node.js 18 and 20.\n+    await Promise.all([...this.transactions.values()].map((tx) => this.closeTransaction(tx, 'rolled_back')))",
        "comment_created_at": "2025-02-07T16:41:32+00:00",
        "comment_author": "FGoessler",
        "comment_body": "Lets' rather use `Promise.allSettled` here.\r\n```suggestion\r\n    await Promise.allSettled([...this.transactions.values()].map((tx) => this.closeTransaction(tx, 'rolled_back')))\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1946855489",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26276,
        "pr_file": "packages/client/src/runtime/core/engines/client/transactionManager/TransactionManager.ts",
        "discussion_id": "1946838691",
        "commented_code": "@@ -185,6 +185,12 @@ export class TransactionManager {\n     return transaction\n   }\n \n+  async cancelAllTransactions(): Promise<void> {\n+    // TODO: call `map` on the iterator directly without collecting it into an array first\n+    // once we drop support for Node.js 18 and 20.\n+    await Promise.all([...this.transactions.values()].map((tx) => this.closeTransaction(tx, 'rolled_back')))",
        "comment_created_at": "2025-02-07T16:52:48+00:00",
        "comment_author": "aqrln",
        "comment_body": "great point",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "521714218",
    "pr_number": 4231,
    "pr_file": "src/packages/cli/src/Generate.ts",
    "created_at": "2020-11-11T23:58:40+00:00",
    "commented_code": "`\u2714 Generated ${chalk.bold(name!)}${version ? ` (version: ${version})` : ''\n             }${toStr} in ${formatms(after - before)}\n`,\n           )\n+          const useMessage = await generator.getUseMessage()",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "521714218",
        "repo_full_name": "prisma/prisma",
        "pr_number": 4231,
        "pr_file": "src/packages/cli/src/Generate.ts",
        "discussion_id": "521714218",
        "commented_code": "@@ -74,6 +74,10 @@ export class Generate implements Command {\n             `\u2714 Generated ${chalk.bold(name!)}${version ? ` (version: ${version})` : ''\n             }${toStr} in ${formatms(after - before)}\\n`,\n           )\n+          const useMessage = await generator.getUseMessage()",
        "comment_created_at": "2020-11-11T23:58:40+00:00",
        "comment_author": "muxahuk",
        "comment_body": "this promise never finishes for generators compiled without generator-helper changes...",
        "pr_file_module": null
      },
      {
        "comment_id": "522252008",
        "repo_full_name": "prisma/prisma",
        "pr_number": 4231,
        "pr_file": "src/packages/cli/src/Generate.ts",
        "discussion_id": "521714218",
        "commented_code": "@@ -74,6 +74,10 @@ export class Generate implements Command {\n             `\u2714 Generated ${chalk.bold(name!)}${version ? ` (version: ${version})` : ''\n             }${toStr} in ${formatms(after - before)}\\n`,\n           )\n+          const useMessage = await generator.getUseMessage()",
        "comment_created_at": "2020-11-12T16:44:12+00:00",
        "comment_author": "muxahuk",
        "comment_body": "this is resolved here: GeneratorProcess.ts line 207\r\n```\r\nconst timeout = setTimeout(\r\n        () => resolve(''),\r\n        1000,\r\n      )\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1927068736",
    "pr_number": 26159,
    "pr_file": "packages/client/src/runtime/core/engines/client/ClientEngine.ts",
    "created_at": "2025-01-23T14:26:54+00:00",
    "commented_code": "QueryCompilerConstructor?: QueryCompilerConstructor\n   queryCompilerLoader: QueryCompilerLoader\n \n-  executingQueryPromise?: Promise<any>",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1927068736",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26159,
        "pr_file": "packages/client/src/runtime/core/engines/client/ClientEngine.ts",
        "discussion_id": "1927068736",
        "commented_code": "@@ -42,25 +37,18 @@ export class ClientEngine implements Engine<undefined> {\n   QueryCompilerConstructor?: QueryCompilerConstructor\n   queryCompilerLoader: QueryCompilerLoader\n \n-  executingQueryPromise?: Promise<any>",
        "comment_created_at": "2025-01-23T14:26:54+00:00",
        "comment_author": "FGoessler",
        "comment_body": "\u2139\ufe0f In the `LibraryEngine` this was used to kinda await the last running query when stopping the engine. But as multiple queries can be in progress at a time I think this was never really accurate. As we no big stopping logic anymore it's imo not necessary to track our in progress queries like this.\r\n\r\nIf full query termination is really important to use we imo should rather look into using `AbortController` or so. \ud83e\udd14 ",
        "pr_file_module": null
      }
    ]
  }
]