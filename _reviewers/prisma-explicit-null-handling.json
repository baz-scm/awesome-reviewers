[
  {
    "discussion_id": "2213342786",
    "pr_number": 27652,
    "pr_file": "packages/migrate/src/Migrate.ts",
    "created_at": "2025-07-17T13:24:23+00:00",
    "commented_code": "migrationsDirPath?: string\n   enabledPreviewFeatures?: string[]\n   schemaContext?: SchemaContext\n+  schemaFilter?: MigrateTypes.SchemaFilter",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "2213342786",
        "repo_full_name": "prisma/prisma",
        "pr_number": 27652,
        "pr_file": "packages/migrate/src/Migrate.ts",
        "discussion_id": "2213342786",
        "commented_code": "@@ -26,26 +26,30 @@ interface MigrateSetupInput {\n   migrationsDirPath?: string\n   enabledPreviewFeatures?: string[]\n   schemaContext?: SchemaContext\n+  schemaFilter?: MigrateTypes.SchemaFilter",
        "comment_created_at": "2025-07-17T13:24:23+00:00",
        "comment_author": "jkomyno",
        "comment_body": "Does `schemaFilter` *really* need to be `nullable` or undefined? This will cause a chain of `schemaFilter?['prop'] property key access when trying to read such filter.\r\n\r\nIt seems more explicit to me to pass a default filter object, like the following:\r\n```typescript\r\nconst defaultSchemaFilter = {\r\n  externalTables: [],\r\n  // in the future:\r\n  exclude: [],\r\n} satisfies MigrateTypes.SchemaFilter\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2213345622",
        "repo_full_name": "prisma/prisma",
        "pr_number": 27652,
        "pr_file": "packages/migrate/src/Migrate.ts",
        "discussion_id": "2213342786",
        "commented_code": "@@ -26,26 +26,30 @@ interface MigrateSetupInput {\n   migrationsDirPath?: string\n   enabledPreviewFeatures?: string[]\n   schemaContext?: SchemaContext\n+  schemaFilter?: MigrateTypes.SchemaFilter",
        "comment_created_at": "2025-07-17T13:25:34+00:00",
        "comment_author": "jkomyno",
        "comment_body": "In fact, you used this in other parts of this PR:\r\n\r\n```typescript\r\nconst schemaFilter: MigrateTypes.SchemaFilter = {\r\n  externalTables: config.tables?.external ?? [],\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2213347853",
        "repo_full_name": "prisma/prisma",
        "pr_number": 27652,
        "pr_file": "packages/migrate/src/Migrate.ts",
        "discussion_id": "2213342786",
        "commented_code": "@@ -26,26 +26,30 @@ interface MigrateSetupInput {\n   migrationsDirPath?: string\n   enabledPreviewFeatures?: string[]\n   schemaContext?: SchemaContext\n+  schemaFilter?: MigrateTypes.SchemaFilter",
        "comment_created_at": "2025-07-17T13:26:31+00:00",
        "comment_author": "jkomyno",
        "comment_body": "In general, if we can avoid introducing `null`s, let's not.",
        "pr_file_module": null
      },
      {
        "comment_id": "2213429974",
        "repo_full_name": "prisma/prisma",
        "pr_number": 27652,
        "pr_file": "packages/migrate/src/Migrate.ts",
        "discussion_id": "2213342786",
        "commented_code": "@@ -26,26 +26,30 @@ interface MigrateSetupInput {\n   migrationsDirPath?: string\n   enabledPreviewFeatures?: string[]\n   schemaContext?: SchemaContext\n+  schemaFilter?: MigrateTypes.SchemaFilter",
        "comment_created_at": "2025-07-17T13:58:52+00:00",
        "comment_author": "FGoessler",
        "comment_body": "It's something that is by far not used by all migrate related commands. In fact most `Migrate.setup` calls will not need this parameter. Hence I followed the existing pattern of having all attributes of this input object optional.\r\n\r\nI could make leave it optional here on the input object but not make it optional on the `Migrate` class and create a default filter during the setup method?\r\n\r\nThen all relevant read access \"downstream\" does not have to deal with the optionality (although that is also just in this class here).",
        "pr_file_module": null
      },
      {
        "comment_id": "2213435052",
        "repo_full_name": "prisma/prisma",
        "pr_number": 27652,
        "pr_file": "packages/migrate/src/Migrate.ts",
        "discussion_id": "2213342786",
        "commented_code": "@@ -26,26 +26,30 @@ interface MigrateSetupInput {\n   migrationsDirPath?: string\n   enabledPreviewFeatures?: string[]\n   schemaContext?: SchemaContext\n+  schemaFilter?: MigrateTypes.SchemaFilter",
        "comment_created_at": "2025-07-17T14:00:44+00:00",
        "comment_author": "FGoessler",
        "comment_body": "I might change the interface between TS and Rust again in a dedicated PR to remove the optionality in the input types there. Was using optional there at first because it might ease the adoption (similar to how you would add a new field to a REST api).",
        "pr_file_module": null
      },
      {
        "comment_id": "2213449798",
        "repo_full_name": "prisma/prisma",
        "pr_number": 27652,
        "pr_file": "packages/migrate/src/Migrate.ts",
        "discussion_id": "2213342786",
        "commented_code": "@@ -26,26 +26,30 @@ interface MigrateSetupInput {\n   migrationsDirPath?: string\n   enabledPreviewFeatures?: string[]\n   schemaContext?: SchemaContext\n+  schemaFilter?: MigrateTypes.SchemaFilter",
        "comment_created_at": "2025-07-17T14:06:37+00:00",
        "comment_author": "FGoessler",
        "comment_body": "See the changes I just pushed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1985069097",
    "pr_number": 21678,
    "pr_file": "packages/client/tests/functional/extensions/itx.ts",
    "created_at": "2025-03-07T13:34:35+00:00",
    "commented_code": "if (isTransaction) {\n               expect(ctx.$connect).toBeUndefined()\n               expect(ctx.$disconnect).toBeUndefined()\n-              expect(ctx.$transaction).toBeUndefined()\n+              expect(ctx.$transaction).toBeDefined()",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1985069097",
        "repo_full_name": "prisma/prisma",
        "pr_number": 21678,
        "pr_file": "packages/client/tests/functional/extensions/itx.ts",
        "discussion_id": "1985069097",
        "commented_code": "@@ -315,7 +315,7 @@ testMatrix.setupTestSuite(\n             if (isTransaction) {\n               expect(ctx.$connect).toBeUndefined()\n               expect(ctx.$disconnect).toBeUndefined()\n-              expect(ctx.$transaction).toBeUndefined()\n+              expect(ctx.$transaction).toBeDefined()",
        "comment_created_at": "2025-03-07T13:34:35+00:00",
        "comment_author": "aqrln",
        "comment_body": "This should be undefined on MongoDB",
        "pr_file_module": null
      },
      {
        "comment_id": "2075100441",
        "repo_full_name": "prisma/prisma",
        "pr_number": 21678,
        "pr_file": "packages/client/tests/functional/extensions/itx.ts",
        "discussion_id": "1985069097",
        "commented_code": "@@ -315,7 +315,7 @@ testMatrix.setupTestSuite(\n             if (isTransaction) {\n               expect(ctx.$connect).toBeUndefined()\n               expect(ctx.$disconnect).toBeUndefined()\n-              expect(ctx.$transaction).toBeUndefined()\n+              expect(ctx.$transaction).toBeDefined()",
        "comment_created_at": "2025-05-06T09:37:17+00:00",
        "comment_author": "LucianBuzzo",
        "comment_body": "@aqrln My preference would be to leave it defined so there is a consistent interface, and throw a readable error, like what is done for the planetscale adapter.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2063250724",
    "pr_number": 26995,
    "pr_file": "packages/migrate/src/utils/warnDatasourceDriverAdapter.ts",
    "created_at": "2025-04-28T09:12:00+00:00",
    "commented_code": "import { SchemaContext } from '@prisma/internals'\n \n const DEPRECATED_PROPERTIES = ['url', 'directUrl', 'shadowDatabaseUrl']\n+// Due to the complexity of making the datasource.url truly optional across the codebase\n+// this placeholder value is used in the PSL parser if no URL property is given.\n+const NO_URL_PLACEHOLDER = '<invalid>'",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "2063250724",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26995,
        "pr_file": "packages/migrate/src/utils/warnDatasourceDriverAdapter.ts",
        "discussion_id": "2063250724",
        "commented_code": "@@ -2,6 +2,9 @@ import { ErrorCapturingSqlDriverAdapterFactory } from '@prisma/driver-adapter-ut\n import { SchemaContext } from '@prisma/internals'\n \n const DEPRECATED_PROPERTIES = ['url', 'directUrl', 'shadowDatabaseUrl']\n+// Due to the complexity of making the datasource.url truly optional across the codebase\n+// this placeholder value is used in the PSL parser if no URL property is given.\n+const NO_URL_PLACEHOLDER = '<invalid>'",
        "comment_created_at": "2025-04-28T09:12:00+00:00",
        "comment_author": "viktor-ferenczi",
        "comment_body": "Shouldn't is be `'<N/A>'`? \r\n\r\nIt is not \"invalid\", just not specified.",
        "pr_file_module": null
      },
      {
        "comment_id": "2063297370",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26995,
        "pr_file": "packages/migrate/src/utils/warnDatasourceDriverAdapter.ts",
        "discussion_id": "2063250724",
        "commented_code": "@@ -2,6 +2,9 @@ import { ErrorCapturingSqlDriverAdapterFactory } from '@prisma/driver-adapter-ut\n import { SchemaContext } from '@prisma/internals'\n \n const DEPRECATED_PROPERTIES = ['url', 'directUrl', 'shadowDatabaseUrl']\n+// Due to the complexity of making the datasource.url truly optional across the codebase\n+// this placeholder value is used in the PSL parser if no URL property is given.\n+const NO_URL_PLACEHOLDER = '<invalid>'",
        "comment_created_at": "2025-04-28T09:37:13+00:00",
        "comment_author": "FGoessler",
        "comment_body": "Fair point - I just went with what prisma-engines sets it to.I'll merge this in anyways for now and see down the line how to improve this also in line with our test setup.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1939211045",
    "pr_number": 26224,
    "pr_file": "packages/cli/src/utils/nps/status.ts",
    "created_at": "2025-02-03T11:18:09+00:00",
    "commented_code": "+export type NpsStatus = {\n+  currentTimeframe?: Timeframe\n+}\n+\n+export type Timeframe = {\n+  start: string\n+  end: string\n+}\n+\n+export interface NpsStatusLookup {\n+  status: () => Promise<NpsStatus>\n+}\n+\n+const npsStatusUrl = new URL(\n+  'https://raw.githubusercontent.com/jacek-prisma/nps-timeframe/refs/heads/main/timeframe.json',\n+)\n+\n+export class ProdNpsStatusLookup implements NpsStatusLookup {\n+  async status(): Promise<NpsStatus> {\n+    const resp = await fetch(npsStatusUrl.href)\n+    return await (resp.ok\n+      ? ((await resp.json()) as NpsStatus)",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1939211045",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26224,
        "pr_file": "packages/cli/src/utils/nps/status.ts",
        "discussion_id": "1939211045",
        "commented_code": "@@ -0,0 +1,27 @@\n+export type NpsStatus = {\n+  currentTimeframe?: Timeframe\n+}\n+\n+export type Timeframe = {\n+  start: string\n+  end: string\n+}\n+\n+export interface NpsStatusLookup {\n+  status: () => Promise<NpsStatus>\n+}\n+\n+const npsStatusUrl = new URL(\n+  'https://raw.githubusercontent.com/jacek-prisma/nps-timeframe/refs/heads/main/timeframe.json',\n+)\n+\n+export class ProdNpsStatusLookup implements NpsStatusLookup {\n+  async status(): Promise<NpsStatus> {\n+    const resp = await fetch(npsStatusUrl.href)\n+    return await (resp.ok\n+      ? ((await resp.json()) as NpsStatus)",
        "comment_created_at": "2025-02-03T11:18:09+00:00",
        "comment_author": "aqrln",
        "comment_body": "We should probably validate it using `zod` or `@effect/schema` or whatever and not just assert the type",
        "pr_file_module": null
      },
      {
        "comment_id": "1939217205",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26224,
        "pr_file": "packages/cli/src/utils/nps/status.ts",
        "discussion_id": "1939211045",
        "commented_code": "@@ -0,0 +1,27 @@\n+export type NpsStatus = {\n+  currentTimeframe?: Timeframe\n+}\n+\n+export type Timeframe = {\n+  start: string\n+  end: string\n+}\n+\n+export interface NpsStatusLookup {\n+  status: () => Promise<NpsStatus>\n+}\n+\n+const npsStatusUrl = new URL(\n+  'https://raw.githubusercontent.com/jacek-prisma/nps-timeframe/refs/heads/main/timeframe.json',\n+)\n+\n+export class ProdNpsStatusLookup implements NpsStatusLookup {\n+  async status(): Promise<NpsStatus> {\n+    const resp = await fetch(npsStatusUrl.href)\n+    return await (resp.ok\n+      ? ((await resp.json()) as NpsStatus)",
        "comment_created_at": "2025-02-03T11:23:19+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "I don't think we use either right now, but since there's only 2 fields, maybe I can just check the schema manually. It might be worth doing the same for config",
        "pr_file_module": null
      },
      {
        "comment_id": "1939231308",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26224,
        "pr_file": "packages/cli/src/utils/nps/status.ts",
        "discussion_id": "1939211045",
        "commented_code": "@@ -0,0 +1,27 @@\n+export type NpsStatus = {\n+  currentTimeframe?: Timeframe\n+}\n+\n+export type Timeframe = {\n+  start: string\n+  end: string\n+}\n+\n+export interface NpsStatusLookup {\n+  status: () => Promise<NpsStatus>\n+}\n+\n+const npsStatusUrl = new URL(\n+  'https://raw.githubusercontent.com/jacek-prisma/nps-timeframe/refs/heads/main/timeframe.json',\n+)\n+\n+export class ProdNpsStatusLookup implements NpsStatusLookup {\n+  async status(): Promise<NpsStatus> {\n+    const resp = await fetch(npsStatusUrl.href)\n+    return await (resp.ok\n+      ? ((await resp.json()) as NpsStatus)",
        "comment_created_at": "2025-02-03T11:34:32+00:00",
        "comment_author": "aqrln",
        "comment_body": "> I don't think we use either right now, but since there's only 2 fields, maybe I can just check the schema manually\r\n\r\nSince it's in the CLI and not the Client (where bundle size matters), I wouldn't worry too much about introducing new dependencies. Introducing it now lowers the barrier to using it where appropriate in the future, as well as finding and fixing other places where we might be missing validation.\r\n\r\n> It might be worth doing the same for config\r\n\r\ntrue",
        "pr_file_module": null
      },
      {
        "comment_id": "1939240369",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26224,
        "pr_file": "packages/cli/src/utils/nps/status.ts",
        "discussion_id": "1939211045",
        "commented_code": "@@ -0,0 +1,27 @@\n+export type NpsStatus = {\n+  currentTimeframe?: Timeframe\n+}\n+\n+export type Timeframe = {\n+  start: string\n+  end: string\n+}\n+\n+export interface NpsStatusLookup {\n+  status: () => Promise<NpsStatus>\n+}\n+\n+const npsStatusUrl = new URL(\n+  'https://raw.githubusercontent.com/jacek-prisma/nps-timeframe/refs/heads/main/timeframe.json',\n+)\n+\n+export class ProdNpsStatusLookup implements NpsStatusLookup {\n+  async status(): Promise<NpsStatus> {\n+    const resp = await fetch(npsStatusUrl.href)\n+    return await (resp.ok\n+      ? ((await resp.json()) as NpsStatus)",
        "comment_created_at": "2025-02-03T11:42:27+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "I added manual validation, if you wanna replace it with a library let me know which one, I've not used them extensively",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1939424159",
    "pr_number": 26224,
    "pr_file": "packages/cli/src/utils/nps/status.ts",
    "created_at": "2025-02-03T13:59:58+00:00",
    "commented_code": "+export type NpsStatus = {\n+  currentTimeframe?: Timeframe\n+}\n+\n+export type Timeframe = {\n+  start: string\n+  end: string\n+}\n+\n+export interface NpsStatusLookup {\n+  status: () => Promise<NpsStatus>\n+}\n+\n+const npsStatusUrl = new URL(\n+  'https://raw.githubusercontent.com/jacek-prisma/nps-timeframe/refs/heads/main/timeframe.json',\n+)\n+\n+export class ProdNpsStatusLookup implements NpsStatusLookup {\n+  async status(): Promise<NpsStatus> {\n+    const resp = await fetch(npsStatusUrl.href)\n+\n+    if (resp.status === 404) {\n+      return {}\n+    }\n+    if (!resp.ok) {\n+      throw new Error(`Failed to fetch NPS survey status: ${resp.statusText}`)\n+    }\n+\n+    const obj = await resp.json()\n+    if (!this.checkSchema(obj)) {\n+      throw new Error('Invalid NPS status schema')\n+    }\n+    return obj\n+  }\n+\n+  checkSchema(obj: any): obj is NpsStatus {\n+    return (\n+      obj.currentTimeframe === undefined ||",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1939424159",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26224,
        "pr_file": "packages/cli/src/utils/nps/status.ts",
        "discussion_id": "1939424159",
        "commented_code": "@@ -0,0 +1,42 @@\n+export type NpsStatus = {\n+  currentTimeframe?: Timeframe\n+}\n+\n+export type Timeframe = {\n+  start: string\n+  end: string\n+}\n+\n+export interface NpsStatusLookup {\n+  status: () => Promise<NpsStatus>\n+}\n+\n+const npsStatusUrl = new URL(\n+  'https://raw.githubusercontent.com/jacek-prisma/nps-timeframe/refs/heads/main/timeframe.json',\n+)\n+\n+export class ProdNpsStatusLookup implements NpsStatusLookup {\n+  async status(): Promise<NpsStatus> {\n+    const resp = await fetch(npsStatusUrl.href)\n+\n+    if (resp.status === 404) {\n+      return {}\n+    }\n+    if (!resp.ok) {\n+      throw new Error(`Failed to fetch NPS survey status: ${resp.statusText}`)\n+    }\n+\n+    const obj = await resp.json()\n+    if (!this.checkSchema(obj)) {\n+      throw new Error('Invalid NPS status schema')\n+    }\n+    return obj\n+  }\n+\n+  checkSchema(obj: any): obj is NpsStatus {\n+    return (\n+      obj.currentTimeframe === undefined ||",
        "comment_created_at": "2025-02-03T13:59:58+00:00",
        "comment_author": "aqrln",
        "comment_body": "```suggestion\r\n      obj.currentTimeframe == null ||\r\n```\r\nto cover both `null` and `undefined`",
        "pr_file_module": null
      },
      {
        "comment_id": "1939725707",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26224,
        "pr_file": "packages/cli/src/utils/nps/status.ts",
        "discussion_id": "1939424159",
        "commented_code": "@@ -0,0 +1,42 @@\n+export type NpsStatus = {\n+  currentTimeframe?: Timeframe\n+}\n+\n+export type Timeframe = {\n+  start: string\n+  end: string\n+}\n+\n+export interface NpsStatusLookup {\n+  status: () => Promise<NpsStatus>\n+}\n+\n+const npsStatusUrl = new URL(\n+  'https://raw.githubusercontent.com/jacek-prisma/nps-timeframe/refs/heads/main/timeframe.json',\n+)\n+\n+export class ProdNpsStatusLookup implements NpsStatusLookup {\n+  async status(): Promise<NpsStatus> {\n+    const resp = await fetch(npsStatusUrl.href)\n+\n+    if (resp.status === 404) {\n+      return {}\n+    }\n+    if (!resp.ok) {\n+      throw new Error(`Failed to fetch NPS survey status: ${resp.statusText}`)\n+    }\n+\n+    const obj = await resp.json()\n+    if (!this.checkSchema(obj)) {\n+      throw new Error('Invalid NPS status schema')\n+    }\n+    return obj\n+  }\n+\n+  checkSchema(obj: any): obj is NpsStatus {\n+    return (\n+      obj.currentTimeframe === undefined ||",
        "comment_created_at": "2025-02-03T16:56:03+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1671426074",
    "pr_number": 24745,
    "pr_file": "packages/cli/src/platform/auth/show.ts",
    "created_at": "2024-07-10T01:12:41+00:00",
    "commented_code": "`,\n       },\n     })\n+\n+    let sensitiveData: { token: string | null } = {\n+      token: null,\n+    }",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1671426074",
        "repo_full_name": "prisma/prisma",
        "pr_number": 24745,
        "pr_file": "packages/cli/src/platform/auth/show.ts",
        "discussion_id": "1671426074",
        "commented_code": "@@ -41,9 +45,36 @@ export class Show implements Command {\n         `,\n       },\n     })\n+\n+    let sensitiveData: { token: string | null } = {\n+      token: null,\n+    }",
        "comment_created_at": "2024-07-10T01:12:41+00:00",
        "comment_author": "millsp",
        "comment_body": "```suggestion\r\n    let sensitiveData: { token: string | undefined } = {\r\n      token: undefined,\r\n    }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1671756319",
        "repo_full_name": "prisma/prisma",
        "pr_number": 24745,
        "pr_file": "packages/cli/src/platform/auth/show.ts",
        "discussion_id": "1671426074",
        "commented_code": "@@ -41,9 +45,36 @@ export class Show implements Command {\n         `,\n       },\n     })\n+\n+    let sensitiveData: { token: string | null } = {\n+      token: null,\n+    }",
        "comment_created_at": "2024-07-10T07:23:37+00:00",
        "comment_author": "justinvdm",
        "comment_body": "Coincidentally I had this initially, but then `messages.resouce()` ends up logging `undefined` to the console. In contrast, it filters out nulls, thus the `null`: https://github.com/prisma/prisma/blob/0e92f9d40caf8888ca8bb04fbe893b48689168b9/packages/cli/src/platform/_lib/messages.ts#L35\r\n\r\nI'd instead simply just add the property if the condition is met to avoid it needing to filter out nulls in the first place, but then I'd also need to add the relevant logic for the second param of `messages.resource()` (e.g. `shouldShowSensitive ? { token: true } : {}`).\r\n\r\nOverall just seemed simpler to go for null.\r\n\r\nSound alright?",
        "pr_file_module": null
      },
      {
        "comment_id": "1672097784",
        "repo_full_name": "prisma/prisma",
        "pr_number": 24745,
        "pr_file": "packages/cli/src/platform/auth/show.ts",
        "discussion_id": "1671426074",
        "commented_code": "@@ -41,9 +45,36 @@ export class Show implements Command {\n         `,\n       },\n     })\n+\n+    let sensitiveData: { token: string | null } = {\n+      token: null,\n+    }",
        "comment_created_at": "2024-07-10T11:24:08+00:00",
        "comment_author": "aqrln",
        "comment_body": "You can also expand that condition to filter out both `null` and `undefined`. I personally don't have a strong preference and the code is fine with me as it currently is too.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1616875987",
    "pr_number": 24297,
    "pr_file": "packages/migrate/src/utils/getDatabaseVersionSafe.ts",
    "created_at": "2024-05-28T09:09:41+00:00",
    "commented_code": "import Debug from '@prisma/debug'\n+import { MigrateTypes } from '@prisma/internals'\n \n import { SchemaEngine } from '../SchemaEngine'\n-import type { EngineArgs } from '../types'\n \n const debug = Debug('prisma:cli')\n \n /**\n  * Retrieve the database version from the given schema or url.\n  * This function never throws, and was introduced to prevent circular dependencies in `@prisma/internals`.\n  */\n-export async function getDatabaseVersionSafe(args: EngineArgs.GetDatabaseVersionParams): Promise<string | undefined> {\n+export async function getDatabaseVersionSafe(\n+  args: MigrateTypes.GetDatabaseVersionParams | undefined,",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1616875987",
        "repo_full_name": "prisma/prisma",
        "pr_number": 24297,
        "pr_file": "packages/migrate/src/utils/getDatabaseVersionSafe.ts",
        "discussion_id": "1616875987",
        "commented_code": "@@ -1,15 +1,17 @@\n import Debug from '@prisma/debug'\n+import { MigrateTypes } from '@prisma/internals'\n \n import { SchemaEngine } from '../SchemaEngine'\n-import type { EngineArgs } from '../types'\n \n const debug = Debug('prisma:cli')\n \n /**\n  * Retrieve the database version from the given schema or url.\n  * This function never throws, and was introduced to prevent circular dependencies in `@prisma/internals`.\n  */\n-export async function getDatabaseVersionSafe(args: EngineArgs.GetDatabaseVersionParams): Promise<string | undefined> {\n+export async function getDatabaseVersionSafe(\n+  args: MigrateTypes.GetDatabaseVersionParams | undefined,",
        "comment_created_at": "2024-05-28T09:09:41+00:00",
        "comment_author": "jkomyno",
        "comment_body": "Why the `undefined` here?",
        "pr_file_module": null
      },
      {
        "comment_id": "1616888487",
        "repo_full_name": "prisma/prisma",
        "pr_number": 24297,
        "pr_file": "packages/migrate/src/utils/getDatabaseVersionSafe.ts",
        "discussion_id": "1616875987",
        "commented_code": "@@ -1,15 +1,17 @@\n import Debug from '@prisma/debug'\n+import { MigrateTypes } from '@prisma/internals'\n \n import { SchemaEngine } from '../SchemaEngine'\n-import type { EngineArgs } from '../types'\n \n const debug = Debug('prisma:cli')\n \n /**\n  * Retrieve the database version from the given schema or url.\n  * This function never throws, and was introduced to prevent circular dependencies in `@prisma/internals`.\n  */\n-export async function getDatabaseVersionSafe(args: EngineArgs.GetDatabaseVersionParams): Promise<string | undefined> {\n+export async function getDatabaseVersionSafe(\n+  args: MigrateTypes.GetDatabaseVersionParams | undefined,",
        "comment_created_at": "2024-05-28T09:18:30+00:00",
        "comment_author": "SevInf",
        "comment_body": "`| undefined` was a part of `EngineArgs.GetDatabaseVersionParams` definition before already.\r\nSince that does not quite agree with what `schema-engine` expects, i've changed the definition and so we had to add `| undefined` to a couple of signatures where we actually pass undefined values every once in a while",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1583606641",
    "pr_number": 24020,
    "pr_file": "packages/fetch-engine/src/downloadZip.ts",
    "created_at": "2024-04-29T19:09:53+00:00",
    "commented_code": "return await new Promise(async (resolve, reject) => {\n         let bytesRead = 0\n \n+        if (response.body === null) {\n+          return reject(new Error(`Failed to fetch the engine file at ${url} - response.body is null`))\n+        }",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1583606641",
        "repo_full_name": "prisma/prisma",
        "pr_number": 24020,
        "pr_file": "packages/fetch-engine/src/downloadZip.ts",
        "discussion_id": "1583606641",
        "commented_code": "@@ -97,6 +97,10 @@ export async function downloadZip(\n       return await new Promise(async (resolve, reject) => {\n         let bytesRead = 0\n \n+        if (response.body === null) {\n+          return reject(new Error(`Failed to fetch the engine file at ${url} - response.body is null`))\n+        }",
        "comment_created_at": "2024-04-29T19:09:53+00:00",
        "comment_author": "avallete",
        "comment_body": "**note**\r\n\r\n`response.body` can be null in `node-fetch` > v3 so handle the case as an error.",
        "pr_file_module": null
      }
    ]
  }
]