[
  {
    "discussion_id": "2182574833",
    "pr_number": 27576,
    "pr_file": "packages/cli/src/MCP.ts",
    "created_at": "2025-07-03T11:44:25+00:00",
    "commented_code": "import { version } from '../package.json'\n import { createHelp } from './platform/_lib/help'\n \n-async function runCommand({ args, cwd }: { args: string[]; cwd: string }) {\n-  const result = await execa.node(process.argv[1], args, { cwd })\n-  return `${result.stdout}\n${result.stderr}`\n+// Only apply console redirection when running in MCP mode\n+// This prevents stdout pollution that breaks MCP's JSON-RPC protocol\n+if (process.argv.includes('mcp')) {\n+  console.log = (...a: unknown[]) => process.stderr.write(a.map(String).join(' ') + '\n')",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "2182574833",
        "repo_full_name": "prisma/prisma",
        "pr_number": 27576,
        "pr_file": "packages/cli/src/MCP.ts",
        "discussion_id": "2182574833",
        "commented_code": "@@ -8,9 +8,29 @@ import { z } from 'zod'\n import { version } from '../package.json'\n import { createHelp } from './platform/_lib/help'\n \n-async function runCommand({ args, cwd }: { args: string[]; cwd: string }) {\n-  const result = await execa.node(process.argv[1], args, { cwd })\n-  return `${result.stdout}\\n${result.stderr}`\n+// Only apply console redirection when running in MCP mode\n+// This prevents stdout pollution that breaks MCP's JSON-RPC protocol\n+if (process.argv.includes('mcp')) {\n+  console.log = (...a: unknown[]) => process.stderr.write(a.map(String).join(' ') + '\\n')",
        "comment_created_at": "2025-07-03T11:44:25+00:00",
        "comment_author": "aqrln",
        "comment_body": "This technically breaks much of the `console.log` functionality: this implementation will only work when printing primitive values and not using any format specifiers. Should it be just this instead?\r\n\r\n```suggestion\r\n  console.log = console.error.bind(console)\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2182577043",
        "repo_full_name": "prisma/prisma",
        "pr_number": 27576,
        "pr_file": "packages/cli/src/MCP.ts",
        "discussion_id": "2182574833",
        "commented_code": "@@ -8,9 +8,29 @@ import { z } from 'zod'\n import { version } from '../package.json'\n import { createHelp } from './platform/_lib/help'\n \n-async function runCommand({ args, cwd }: { args: string[]; cwd: string }) {\n-  const result = await execa.node(process.argv[1], args, { cwd })\n-  return `${result.stdout}\\n${result.stderr}`\n+// Only apply console redirection when running in MCP mode\n+// This prevents stdout pollution that breaks MCP's JSON-RPC protocol\n+if (process.argv.includes('mcp')) {\n+  console.log = (...a: unknown[]) => process.stderr.write(a.map(String).join(' ') + '\\n')",
        "comment_created_at": "2025-07-03T11:45:32+00:00",
        "comment_author": "aqrln",
        "comment_body": "Also, where do those logs come from? Can we just print them to stderr in the first place if they're in our code instead of monkey-patching `console`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2182693148",
        "repo_full_name": "prisma/prisma",
        "pr_number": 27576,
        "pr_file": "packages/cli/src/MCP.ts",
        "discussion_id": "2182574833",
        "commented_code": "@@ -8,9 +8,29 @@ import { z } from 'zod'\n import { version } from '../package.json'\n import { createHelp } from './platform/_lib/help'\n \n-async function runCommand({ args, cwd }: { args: string[]; cwd: string }) {\n-  const result = await execa.node(process.argv[1], args, { cwd })\n-  return `${result.stdout}\\n${result.stderr}`\n+// Only apply console redirection when running in MCP mode\n+// This prevents stdout pollution that breaks MCP's JSON-RPC protocol\n+if (process.argv.includes('mcp')) {\n+  console.log = (...a: unknown[]) => process.stderr.write(a.map(String).join(' ') + '\\n')",
        "comment_created_at": "2025-07-03T12:44:48+00:00",
        "comment_author": "luanvdw",
        "comment_body": "@aqrln you're right, thanks! I've modified the console redirection with your proposed changes \ud83d\ude4f\r\n\r\n> Also, where do those logs come from? Can we just print them to stderr in the first place if they're in our code instead of monkey-patching console?\r\nThe real source of the stdout pollution is that when the MCP server is running it prints an empty string.\r\n\r\n  1. MCP.parse() returns '' (empty string)\r\n  2. bin.ts line 190 does console.log(result)\r\n  3. console.log('') outputs an empty string to stdout\r\n  4. This breaks the MCP JSON-RPC protocol\r\n\r\nI agree with you, the real fix should be to fix this at the source instead of monkey-patching console.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1944265076",
    "pr_number": 26247,
    "pr_file": "packages/client/tests/e2e/_utils/run.ts",
    "created_at": "2025-02-06T07:59:45+00:00",
    "commented_code": "}\n \n async function printFile(filePath: string) {\n-  await pipeline(createReadStream(filePath), process.stdout)\n+  try {\n+    const fileStream = createReadStream(filePath)\n+    fileStream.pipe(process.stdout, { end: false })",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1944265076",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26247,
        "pr_file": "packages/client/tests/e2e/_utils/run.ts",
        "discussion_id": "1944265076",
        "commented_code": "@@ -198,7 +202,13 @@ async function restoreOriginalState() {\n }\n \n async function printFile(filePath: string) {\n-  await pipeline(createReadStream(filePath), process.stdout)\n+  try {\n+    const fileStream = createReadStream(filePath)\n+    fileStream.pipe(process.stdout, { end: false })",
        "comment_created_at": "2025-02-06T07:59:45+00:00",
        "comment_author": "FGoessler",
        "comment_body": "\u2139\ufe0f By default piping closes the target stream once its done. In this case closing stdout. Which lead to no further log output happening. That caused a very confusing picture in the CI logs that send me in the wrong direction for a while...",
        "pr_file_module": null
      },
      {
        "comment_id": "1944505635",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26247,
        "pr_file": "packages/client/tests/e2e/_utils/run.ts",
        "discussion_id": "1944265076",
        "commented_code": "@@ -198,7 +202,13 @@ async function restoreOriginalState() {\n }\n \n async function printFile(filePath: string) {\n-  await pipeline(createReadStream(filePath), process.stdout)\n+  try {\n+    const fileStream = createReadStream(filePath)\n+    fileStream.pipe(process.stdout, { end: false })",
        "comment_created_at": "2025-02-06T10:45:47+00:00",
        "comment_author": "aqrln",
        "comment_body": "oh wow",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1549868633",
    "pr_number": 23715,
    "pr_file": "packages/migrate/src/__tests__/MigrateDiff.test.ts",
    "created_at": "2024-04-03T14:28:31+00:00",
    "commented_code": "const originalEnv = { ...process.env }\n \n describe('migrate diff', () => {\n-  describe('generic', () => {\n-    it('wrong flag', async () => {\n-      const commandInstance = MigrateDiff.new()\n-      const spy = jest.spyOn(commandInstance, 'help').mockImplementation(() => 'Help Me')\n-\n-      await commandInstance.parse(['--something'])\n-      expect(spy).toHaveBeenCalledTimes(1)\n-      spy.mockRestore()\n-    })\n-\n-    it('help flag', async () => {\n-      const commandInstance = MigrateDiff.new()\n-      const spy = jest.spyOn(commandInstance, 'help').mockImplementation(() => 'Help Me')\n-\n-      await commandInstance.parse(['--help'])\n-      expect(spy).toHaveBeenCalledTimes(1)\n-      spy.mockRestore()\n-    })\n-\n+  describe('D1', () => {\n     it('should succeed when --from-local-d1 and a single local Cloudflare D1 database exists', async () => {\n       ctx.fixture('cloudflare-d1-one-db')\n \n       const result = await MigrateDiff.new().parse(['--to-empty', '--from-local-d1', '--script'])\n       expect(result).toMatchInlineSnapshot(``)\n       expect(ctx.mocked['console.error'].mock.calls.join('\n')).toMatchInlineSnapshot(``)\n-      expect(ctx.mocked['console.info'].mock.calls.join('\n')).toMatchInlineSnapshot(`\n-        -- DropTable\n-        PRAGMA foreign_keys=off;\n-        DROP TABLE \"Post\";\n-        PRAGMA foreign_keys=on;\n-\n-        -- DropTable\n-        PRAGMA foreign_keys=off;\n-        DROP TABLE \"User\";\n-        PRAGMA foreign_keys=on;\n-      `)\n+      expect(ctx.mocked['console.info'].mock.calls.join('\n')).toMatchInlineSnapshot(``)",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1549868633",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23715,
        "pr_file": "packages/migrate/src/__tests__/MigrateDiff.test.ts",
        "discussion_id": "1549868633",
        "commented_code": "@@ -18,42 +18,14 @@ const describeIf = (condition: boolean) => (condition ? describe : describe.skip\n const originalEnv = { ...process.env }\n \n describe('migrate diff', () => {\n-  describe('generic', () => {\n-    it('wrong flag', async () => {\n-      const commandInstance = MigrateDiff.new()\n-      const spy = jest.spyOn(commandInstance, 'help').mockImplementation(() => 'Help Me')\n-\n-      await commandInstance.parse(['--something'])\n-      expect(spy).toHaveBeenCalledTimes(1)\n-      spy.mockRestore()\n-    })\n-\n-    it('help flag', async () => {\n-      const commandInstance = MigrateDiff.new()\n-      const spy = jest.spyOn(commandInstance, 'help').mockImplementation(() => 'Help Me')\n-\n-      await commandInstance.parse(['--help'])\n-      expect(spy).toHaveBeenCalledTimes(1)\n-      spy.mockRestore()\n-    })\n-\n+  describe('D1', () => {\n     it('should succeed when --from-local-d1 and a single local Cloudflare D1 database exists', async () => {\n       ctx.fixture('cloudflare-d1-one-db')\n \n       const result = await MigrateDiff.new().parse(['--to-empty', '--from-local-d1', '--script'])\n       expect(result).toMatchInlineSnapshot(``)\n       expect(ctx.mocked['console.error'].mock.calls.join('\\n')).toMatchInlineSnapshot(``)\n-      expect(ctx.mocked['console.info'].mock.calls.join('\\n')).toMatchInlineSnapshot(`\n-        -- DropTable\n-        PRAGMA foreign_keys=off;\n-        DROP TABLE \"Post\";\n-        PRAGMA foreign_keys=on;\n-\n-        -- DropTable\n-        PRAGMA foreign_keys=off;\n-        DROP TABLE \"User\";\n-        PRAGMA foreign_keys=on;\n-      `)\n+      expect(ctx.mocked['console.info'].mock.calls.join('\\n')).toMatchInlineSnapshot(``)",
        "comment_created_at": "2024-04-03T14:28:31+00:00",
        "comment_author": "jkomyno",
        "comment_body": "Please replace `ctx.mocked['console.info']` with `ctx.mocked['process.stdout.write']`, so we don't lose track of the SQL script in the snapshot.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1549869043",
    "pr_number": 23715,
    "pr_file": "packages/migrate/src/__tests__/MigrateDiff.test.ts",
    "created_at": "2024-04-03T14:28:45+00:00",
    "commented_code": "const result = await MigrateDiff.new().parse(['--from-empty', '--to-url', `file:${url}`, '--script'])\n       expect(result).toMatchInlineSnapshot(``)\n       expect(ctx.mocked['console.error'].mock.calls.join('\n')).toMatchInlineSnapshot(``)\n-      expect(ctx.mocked['console.info'].mock.calls.join('\n')).toMatchInlineSnapshot(`\n-        -- CreateTable\n-        CREATE TABLE \"Post\" (\n-            \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n-            \"title\" TEXT NOT NULL,\n-            \"authorId\" INTEGER NOT NULL,\n-            FOREIGN KEY (\"authorId\") REFERENCES \"User\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE\n-        );\n-\n-        -- CreateTable\n-        CREATE TABLE \"User\" (\n-            \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n-            \"email\" TEXT NOT NULL,\n-            \"count1\" INTEGER NOT NULL,\n-            \"name\" TEXT\n-        );\n-\n-        -- CreateIndex\n-        CREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\" ASC);\n-      `)\n+      expect(ctx.mocked['console.info'].mock.calls.join('\n')).toMatchInlineSnapshot(``)",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1549869043",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23715,
        "pr_file": "packages/migrate/src/__tests__/MigrateDiff.test.ts",
        "discussion_id": "1549869043",
        "commented_code": "@@ -129,26 +72,7 @@ describe('migrate diff', () => {\n       const result = await MigrateDiff.new().parse(['--from-empty', '--to-url', `file:${url}`, '--script'])\n       expect(result).toMatchInlineSnapshot(``)\n       expect(ctx.mocked['console.error'].mock.calls.join('\\n')).toMatchInlineSnapshot(``)\n-      expect(ctx.mocked['console.info'].mock.calls.join('\\n')).toMatchInlineSnapshot(`\n-        -- CreateTable\n-        CREATE TABLE \"Post\" (\n-            \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n-            \"title\" TEXT NOT NULL,\n-            \"authorId\" INTEGER NOT NULL,\n-            FOREIGN KEY (\"authorId\") REFERENCES \"User\" (\"id\") ON DELETE RESTRICT ON UPDATE CASCADE\n-        );\n-\n-        -- CreateTable\n-        CREATE TABLE \"User\" (\n-            \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n-            \"email\" TEXT NOT NULL,\n-            \"count1\" INTEGER NOT NULL,\n-            \"name\" TEXT\n-        );\n-\n-        -- CreateIndex\n-        CREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\" ASC);\n-      `)\n+      expect(ctx.mocked['console.info'].mock.calls.join('\\n')).toMatchInlineSnapshot(``)",
        "comment_created_at": "2024-04-03T14:28:45+00:00",
        "comment_author": "jkomyno",
        "comment_body": "Please replace `ctx.mocked['console.info']` with `ctx.mocked['process.stdout.write']`, so we don't lose track of the SQL script in the snapshot.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1484072340",
    "pr_number": 23013,
    "pr_file": "packages/debug/src/index.ts",
    "created_at": "2024-02-09T09:31:26+00:00",
    "commented_code": "-import debug from 'debug'\n+/* eslint-disable no-var */\n+import * as kleur from 'kleur/colors'\n+import { bold } from 'kleur/colors'\n \n-import { Debug, Debugger } from './types'\n+const MAX_ARGS_HISTORY = 100\n+const COLORS = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red']\n \n-const MAX_LOGS = 100\n+const argsHistory: [namespace: string, ...unknown[]][] = []\n+let lastTimestamp = Date.now()\n+let lastColor = 0\n \n-const debugArgsHistory: any[] = []\n+globalThis.DEBUG ??= process.env.DEBUG ?? ''\n+globalThis.DEBUG_COLORS ??= process.env.DEBUG_COLORS ? process.env.DEBUG_COLORS === 'true' : true\n \n-// Patch the Node.js logger to use `console.debug` or `console.log` (similar to\n-// the browser logger) in the Edge Client.\n-if (typeof process !== 'undefined' && typeof process.stderr?.write !== 'function') {\n-  debug.log = console.debug ?? console.log\n+/**\n+ * Top-level utilities to configure the debug module.\n+ *\n+ * @example\n+ * ```ts\n+ * import Debug from '@prisma/debug'\n+ * Debug.enable('prisma:client')\n+ * const debug = Debug('prisma:client')\n+ * debug('Hello World')\n+ * ```\n+ */\n+const topProps = {\n+  enable(namespace: any) {\n+    if (typeof namespace === 'string') {\n+      globalThis.DEBUG = namespace\n+    }\n+  },\n+  disable() {\n+    const prev = globalThis.DEBUG\n+    globalThis.DEBUG = ''\n+    return prev\n+  },\n+  // this is the core logic to check if logging should happen or not\n+  enabled(namespace: string) {\n+    // these are the namespaces that we are listening to in DEBUG=...\n+    const listenedNamespaces: string[] = globalThis.DEBUG.split(',')\n+\n+    // we take incoming namespaces and check then against listened\n+    return listenedNamespaces.every((listenedNamespace) => {\n+      // namespaces can be negated with a `-` prefix (exclusions)\n+      const isNegated = listenedNamespace.startsWith('-') ? 1 : 0\n+      listenedNamespace = listenedNamespace.slice(isNegated)\n+\n+      // we split the namespaces by `:` to be able to compare them\n+      let emittedParts = namespace.split(':')\n+      let listenedParts = listenedNamespace.split(':')\n+      const sizeDiff = listenedParts.length - emittedParts.length\n+\n+      // here we make that the two compared arrays have the same length\n+      if (listenedParts.length > emittedParts.length) {\n+        emittedParts = [...emittedParts, ...Array(Math.abs(sizeDiff)).fill(undefined)]\n+      } else if (listenedParts.length < emittedParts.length) {\n+        // if the last part is a wildcard, we fill the rest with wildcards\n+        const filler = listenedParts[listenedParts.length - 1] === '*' ? '*' : undefined\n+        listenedParts = [...listenedParts, ...Array(Math.abs(sizeDiff)).fill(filler)]\n+      }\n+\n+      // matches if each part is equal or if the listened part is a wildcard\n+      const matched = listenedParts.every((listenedPart, i) => {\n+        return listenedPart === emittedParts[i] || (emittedParts[i] && listenedPart === '*')\n+      })\n+\n+      return isNegated ? !matched : matched // flip the result if negated\n+    })\n+  },\n+  log: (...args: string[]) => {\n+    const [ns, format, ...rest] = args\n+    // concat `ns`+`format` because console only formats first arg\n+    console.warn(`${ns} ${format}`, ...rest)",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1484072340",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23013,
        "pr_file": "packages/debug/src/index.ts",
        "discussion_id": "1484072340",
        "commented_code": "@@ -1,88 +1,174 @@\n-import debug from 'debug'\n+/* eslint-disable no-var */\n+import * as kleur from 'kleur/colors'\n+import { bold } from 'kleur/colors'\n \n-import { Debug, Debugger } from './types'\n+const MAX_ARGS_HISTORY = 100\n+const COLORS = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red']\n \n-const MAX_LOGS = 100\n+const argsHistory: [namespace: string, ...unknown[]][] = []\n+let lastTimestamp = Date.now()\n+let lastColor = 0\n \n-const debugArgsHistory: any[] = []\n+globalThis.DEBUG ??= process.env.DEBUG ?? ''\n+globalThis.DEBUG_COLORS ??= process.env.DEBUG_COLORS ? process.env.DEBUG_COLORS === 'true' : true\n \n-// Patch the Node.js logger to use `console.debug` or `console.log` (similar to\n-// the browser logger) in the Edge Client.\n-if (typeof process !== 'undefined' && typeof process.stderr?.write !== 'function') {\n-  debug.log = console.debug ?? console.log\n+/**\n+ * Top-level utilities to configure the debug module.\n+ *\n+ * @example\n+ * ```ts\n+ * import Debug from '@prisma/debug'\n+ * Debug.enable('prisma:client')\n+ * const debug = Debug('prisma:client')\n+ * debug('Hello World')\n+ * ```\n+ */\n+const topProps = {\n+  enable(namespace: any) {\n+    if (typeof namespace === 'string') {\n+      globalThis.DEBUG = namespace\n+    }\n+  },\n+  disable() {\n+    const prev = globalThis.DEBUG\n+    globalThis.DEBUG = ''\n+    return prev\n+  },\n+  // this is the core logic to check if logging should happen or not\n+  enabled(namespace: string) {\n+    // these are the namespaces that we are listening to in DEBUG=...\n+    const listenedNamespaces: string[] = globalThis.DEBUG.split(',')\n+\n+    // we take incoming namespaces and check then against listened\n+    return listenedNamespaces.every((listenedNamespace) => {\n+      // namespaces can be negated with a `-` prefix (exclusions)\n+      const isNegated = listenedNamespace.startsWith('-') ? 1 : 0\n+      listenedNamespace = listenedNamespace.slice(isNegated)\n+\n+      // we split the namespaces by `:` to be able to compare them\n+      let emittedParts = namespace.split(':')\n+      let listenedParts = listenedNamespace.split(':')\n+      const sizeDiff = listenedParts.length - emittedParts.length\n+\n+      // here we make that the two compared arrays have the same length\n+      if (listenedParts.length > emittedParts.length) {\n+        emittedParts = [...emittedParts, ...Array(Math.abs(sizeDiff)).fill(undefined)]\n+      } else if (listenedParts.length < emittedParts.length) {\n+        // if the last part is a wildcard, we fill the rest with wildcards\n+        const filler = listenedParts[listenedParts.length - 1] === '*' ? '*' : undefined\n+        listenedParts = [...listenedParts, ...Array(Math.abs(sizeDiff)).fill(filler)]\n+      }\n+\n+      // matches if each part is equal or if the listened part is a wildcard\n+      const matched = listenedParts.every((listenedPart, i) => {\n+        return listenedPart === emittedParts[i] || (emittedParts[i] && listenedPart === '*')\n+      })\n+\n+      return isNegated ? !matched : matched // flip the result if negated\n+    })\n+  },\n+  log: (...args: string[]) => {\n+    const [ns, format, ...rest] = args\n+    // concat `ns`+`format` because console only formats first arg\n+    console.warn(`${ns} ${format}`, ...rest)",
        "comment_created_at": "2024-02-09T09:31:26+00:00",
        "comment_author": "Jolg42",
        "comment_body": "Why using `console.warn`? This will now go to `stderr` which is a big change of behavior since `log` / `debug` goes to `stdout`",
        "pr_file_module": null
      },
      {
        "comment_id": "1484385630",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23013,
        "pr_file": "packages/debug/src/index.ts",
        "discussion_id": "1484072340",
        "commented_code": "@@ -1,88 +1,174 @@\n-import debug from 'debug'\n+/* eslint-disable no-var */\n+import * as kleur from 'kleur/colors'\n+import { bold } from 'kleur/colors'\n \n-import { Debug, Debugger } from './types'\n+const MAX_ARGS_HISTORY = 100\n+const COLORS = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red']\n \n-const MAX_LOGS = 100\n+const argsHistory: [namespace: string, ...unknown[]][] = []\n+let lastTimestamp = Date.now()\n+let lastColor = 0\n \n-const debugArgsHistory: any[] = []\n+globalThis.DEBUG ??= process.env.DEBUG ?? ''\n+globalThis.DEBUG_COLORS ??= process.env.DEBUG_COLORS ? process.env.DEBUG_COLORS === 'true' : true\n \n-// Patch the Node.js logger to use `console.debug` or `console.log` (similar to\n-// the browser logger) in the Edge Client.\n-if (typeof process !== 'undefined' && typeof process.stderr?.write !== 'function') {\n-  debug.log = console.debug ?? console.log\n+/**\n+ * Top-level utilities to configure the debug module.\n+ *\n+ * @example\n+ * ```ts\n+ * import Debug from '@prisma/debug'\n+ * Debug.enable('prisma:client')\n+ * const debug = Debug('prisma:client')\n+ * debug('Hello World')\n+ * ```\n+ */\n+const topProps = {\n+  enable(namespace: any) {\n+    if (typeof namespace === 'string') {\n+      globalThis.DEBUG = namespace\n+    }\n+  },\n+  disable() {\n+    const prev = globalThis.DEBUG\n+    globalThis.DEBUG = ''\n+    return prev\n+  },\n+  // this is the core logic to check if logging should happen or not\n+  enabled(namespace: string) {\n+    // these are the namespaces that we are listening to in DEBUG=...\n+    const listenedNamespaces: string[] = globalThis.DEBUG.split(',')\n+\n+    // we take incoming namespaces and check then against listened\n+    return listenedNamespaces.every((listenedNamespace) => {\n+      // namespaces can be negated with a `-` prefix (exclusions)\n+      const isNegated = listenedNamespace.startsWith('-') ? 1 : 0\n+      listenedNamespace = listenedNamespace.slice(isNegated)\n+\n+      // we split the namespaces by `:` to be able to compare them\n+      let emittedParts = namespace.split(':')\n+      let listenedParts = listenedNamespace.split(':')\n+      const sizeDiff = listenedParts.length - emittedParts.length\n+\n+      // here we make that the two compared arrays have the same length\n+      if (listenedParts.length > emittedParts.length) {\n+        emittedParts = [...emittedParts, ...Array(Math.abs(sizeDiff)).fill(undefined)]\n+      } else if (listenedParts.length < emittedParts.length) {\n+        // if the last part is a wildcard, we fill the rest with wildcards\n+        const filler = listenedParts[listenedParts.length - 1] === '*' ? '*' : undefined\n+        listenedParts = [...listenedParts, ...Array(Math.abs(sizeDiff)).fill(filler)]\n+      }\n+\n+      // matches if each part is equal or if the listened part is a wildcard\n+      const matched = listenedParts.every((listenedPart, i) => {\n+        return listenedPart === emittedParts[i] || (emittedParts[i] && listenedPart === '*')\n+      })\n+\n+      return isNegated ? !matched : matched // flip the result if negated\n+    })\n+  },\n+  log: (...args: string[]) => {\n+    const [ns, format, ...rest] = args\n+    // concat `ns`+`format` because console only formats first arg\n+    console.warn(`${ns} ${format}`, ...rest)",
        "comment_created_at": "2024-02-09T14:19:52+00:00",
        "comment_author": "millsp",
        "comment_body": "I checked the source code and we had a test failing because it pushed to stderr, I also thought it was stdout\r\nhttps://github.com/prisma/prisma/actions/runs/7831033745/job/21366480145?pr=23013",
        "pr_file_module": null
      },
      {
        "comment_id": "1484578247",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23013,
        "pr_file": "packages/debug/src/index.ts",
        "discussion_id": "1484072340",
        "commented_code": "@@ -1,88 +1,174 @@\n-import debug from 'debug'\n+/* eslint-disable no-var */\n+import * as kleur from 'kleur/colors'\n+import { bold } from 'kleur/colors'\n \n-import { Debug, Debugger } from './types'\n+const MAX_ARGS_HISTORY = 100\n+const COLORS = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red']\n \n-const MAX_LOGS = 100\n+const argsHistory: [namespace: string, ...unknown[]][] = []\n+let lastTimestamp = Date.now()\n+let lastColor = 0\n \n-const debugArgsHistory: any[] = []\n+globalThis.DEBUG ??= process.env.DEBUG ?? ''\n+globalThis.DEBUG_COLORS ??= process.env.DEBUG_COLORS ? process.env.DEBUG_COLORS === 'true' : true\n \n-// Patch the Node.js logger to use `console.debug` or `console.log` (similar to\n-// the browser logger) in the Edge Client.\n-if (typeof process !== 'undefined' && typeof process.stderr?.write !== 'function') {\n-  debug.log = console.debug ?? console.log\n+/**\n+ * Top-level utilities to configure the debug module.\n+ *\n+ * @example\n+ * ```ts\n+ * import Debug from '@prisma/debug'\n+ * Debug.enable('prisma:client')\n+ * const debug = Debug('prisma:client')\n+ * debug('Hello World')\n+ * ```\n+ */\n+const topProps = {\n+  enable(namespace: any) {\n+    if (typeof namespace === 'string') {\n+      globalThis.DEBUG = namespace\n+    }\n+  },\n+  disable() {\n+    const prev = globalThis.DEBUG\n+    globalThis.DEBUG = ''\n+    return prev\n+  },\n+  // this is the core logic to check if logging should happen or not\n+  enabled(namespace: string) {\n+    // these are the namespaces that we are listening to in DEBUG=...\n+    const listenedNamespaces: string[] = globalThis.DEBUG.split(',')\n+\n+    // we take incoming namespaces and check then against listened\n+    return listenedNamespaces.every((listenedNamespace) => {\n+      // namespaces can be negated with a `-` prefix (exclusions)\n+      const isNegated = listenedNamespace.startsWith('-') ? 1 : 0\n+      listenedNamespace = listenedNamespace.slice(isNegated)\n+\n+      // we split the namespaces by `:` to be able to compare them\n+      let emittedParts = namespace.split(':')\n+      let listenedParts = listenedNamespace.split(':')\n+      const sizeDiff = listenedParts.length - emittedParts.length\n+\n+      // here we make that the two compared arrays have the same length\n+      if (listenedParts.length > emittedParts.length) {\n+        emittedParts = [...emittedParts, ...Array(Math.abs(sizeDiff)).fill(undefined)]\n+      } else if (listenedParts.length < emittedParts.length) {\n+        // if the last part is a wildcard, we fill the rest with wildcards\n+        const filler = listenedParts[listenedParts.length - 1] === '*' ? '*' : undefined\n+        listenedParts = [...listenedParts, ...Array(Math.abs(sizeDiff)).fill(filler)]\n+      }\n+\n+      // matches if each part is equal or if the listened part is a wildcard\n+      const matched = listenedParts.every((listenedPart, i) => {\n+        return listenedPart === emittedParts[i] || (emittedParts[i] && listenedPart === '*')\n+      })\n+\n+      return isNegated ? !matched : matched // flip the result if negated\n+    })\n+  },\n+  log: (...args: string[]) => {\n+    const [ns, format, ...rest] = args\n+    // concat `ns`+`format` because console only formats first arg\n+    console.warn(`${ns} ${format}`, ...rest)",
        "comment_created_at": "2024-02-09T16:55:44+00:00",
        "comment_author": "Jolg42",
        "comment_body": "Can you switch to `process.stderr.write`? Because I just tried locally when running tests and since we have some tests mocking `console.warn` it's really not ideal, it updates some snapshots \ud83d\ude48 .\r\n\r\nRef\r\nhttps://github.com/debug-js/debug/blob/master/src/node.js#L189C1-L195C2",
        "pr_file_module": null
      },
      {
        "comment_id": "1486815148",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23013,
        "pr_file": "packages/debug/src/index.ts",
        "discussion_id": "1484072340",
        "commented_code": "@@ -1,88 +1,174 @@\n-import debug from 'debug'\n+/* eslint-disable no-var */\n+import * as kleur from 'kleur/colors'\n+import { bold } from 'kleur/colors'\n \n-import { Debug, Debugger } from './types'\n+const MAX_ARGS_HISTORY = 100\n+const COLORS = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red']\n \n-const MAX_LOGS = 100\n+const argsHistory: [namespace: string, ...unknown[]][] = []\n+let lastTimestamp = Date.now()\n+let lastColor = 0\n \n-const debugArgsHistory: any[] = []\n+globalThis.DEBUG ??= process.env.DEBUG ?? ''\n+globalThis.DEBUG_COLORS ??= process.env.DEBUG_COLORS ? process.env.DEBUG_COLORS === 'true' : true\n \n-// Patch the Node.js logger to use `console.debug` or `console.log` (similar to\n-// the browser logger) in the Edge Client.\n-if (typeof process !== 'undefined' && typeof process.stderr?.write !== 'function') {\n-  debug.log = console.debug ?? console.log\n+/**\n+ * Top-level utilities to configure the debug module.\n+ *\n+ * @example\n+ * ```ts\n+ * import Debug from '@prisma/debug'\n+ * Debug.enable('prisma:client')\n+ * const debug = Debug('prisma:client')\n+ * debug('Hello World')\n+ * ```\n+ */\n+const topProps = {\n+  enable(namespace: any) {\n+    if (typeof namespace === 'string') {\n+      globalThis.DEBUG = namespace\n+    }\n+  },\n+  disable() {\n+    const prev = globalThis.DEBUG\n+    globalThis.DEBUG = ''\n+    return prev\n+  },\n+  // this is the core logic to check if logging should happen or not\n+  enabled(namespace: string) {\n+    // these are the namespaces that we are listening to in DEBUG=...\n+    const listenedNamespaces: string[] = globalThis.DEBUG.split(',')\n+\n+    // we take incoming namespaces and check then against listened\n+    return listenedNamespaces.every((listenedNamespace) => {\n+      // namespaces can be negated with a `-` prefix (exclusions)\n+      const isNegated = listenedNamespace.startsWith('-') ? 1 : 0\n+      listenedNamespace = listenedNamespace.slice(isNegated)\n+\n+      // we split the namespaces by `:` to be able to compare them\n+      let emittedParts = namespace.split(':')\n+      let listenedParts = listenedNamespace.split(':')\n+      const sizeDiff = listenedParts.length - emittedParts.length\n+\n+      // here we make that the two compared arrays have the same length\n+      if (listenedParts.length > emittedParts.length) {\n+        emittedParts = [...emittedParts, ...Array(Math.abs(sizeDiff)).fill(undefined)]\n+      } else if (listenedParts.length < emittedParts.length) {\n+        // if the last part is a wildcard, we fill the rest with wildcards\n+        const filler = listenedParts[listenedParts.length - 1] === '*' ? '*' : undefined\n+        listenedParts = [...listenedParts, ...Array(Math.abs(sizeDiff)).fill(filler)]\n+      }\n+\n+      // matches if each part is equal or if the listened part is a wildcard\n+      const matched = listenedParts.every((listenedPart, i) => {\n+        return listenedPart === emittedParts[i] || (emittedParts[i] && listenedPart === '*')\n+      })\n+\n+      return isNegated ? !matched : matched // flip the result if negated\n+    })\n+  },\n+  log: (...args: string[]) => {\n+    const [ns, format, ...rest] = args\n+    // concat `ns`+`format` because console only formats first arg\n+    console.warn(`${ns} ${format}`, ...rest)",
        "comment_created_at": "2024-02-12T21:47:32+00:00",
        "comment_author": "millsp",
        "comment_body": "The normal behavior of the real `debug` package is to print to `stderr` for Node.js and somehow we ended using `stdout` in edge runtimes. However, the reason might be that in the browser, their package outputs with `console.log` so `stdout`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1486817213",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23013,
        "pr_file": "packages/debug/src/index.ts",
        "discussion_id": "1484072340",
        "commented_code": "@@ -1,88 +1,174 @@\n-import debug from 'debug'\n+/* eslint-disable no-var */\n+import * as kleur from 'kleur/colors'\n+import { bold } from 'kleur/colors'\n \n-import { Debug, Debugger } from './types'\n+const MAX_ARGS_HISTORY = 100\n+const COLORS = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red']\n \n-const MAX_LOGS = 100\n+const argsHistory: [namespace: string, ...unknown[]][] = []\n+let lastTimestamp = Date.now()\n+let lastColor = 0\n \n-const debugArgsHistory: any[] = []\n+globalThis.DEBUG ??= process.env.DEBUG ?? ''\n+globalThis.DEBUG_COLORS ??= process.env.DEBUG_COLORS ? process.env.DEBUG_COLORS === 'true' : true\n \n-// Patch the Node.js logger to use `console.debug` or `console.log` (similar to\n-// the browser logger) in the Edge Client.\n-if (typeof process !== 'undefined' && typeof process.stderr?.write !== 'function') {\n-  debug.log = console.debug ?? console.log\n+/**\n+ * Top-level utilities to configure the debug module.\n+ *\n+ * @example\n+ * ```ts\n+ * import Debug from '@prisma/debug'\n+ * Debug.enable('prisma:client')\n+ * const debug = Debug('prisma:client')\n+ * debug('Hello World')\n+ * ```\n+ */\n+const topProps = {\n+  enable(namespace: any) {\n+    if (typeof namespace === 'string') {\n+      globalThis.DEBUG = namespace\n+    }\n+  },\n+  disable() {\n+    const prev = globalThis.DEBUG\n+    globalThis.DEBUG = ''\n+    return prev\n+  },\n+  // this is the core logic to check if logging should happen or not\n+  enabled(namespace: string) {\n+    // these are the namespaces that we are listening to in DEBUG=...\n+    const listenedNamespaces: string[] = globalThis.DEBUG.split(',')\n+\n+    // we take incoming namespaces and check then against listened\n+    return listenedNamespaces.every((listenedNamespace) => {\n+      // namespaces can be negated with a `-` prefix (exclusions)\n+      const isNegated = listenedNamespace.startsWith('-') ? 1 : 0\n+      listenedNamespace = listenedNamespace.slice(isNegated)\n+\n+      // we split the namespaces by `:` to be able to compare them\n+      let emittedParts = namespace.split(':')\n+      let listenedParts = listenedNamespace.split(':')\n+      const sizeDiff = listenedParts.length - emittedParts.length\n+\n+      // here we make that the two compared arrays have the same length\n+      if (listenedParts.length > emittedParts.length) {\n+        emittedParts = [...emittedParts, ...Array(Math.abs(sizeDiff)).fill(undefined)]\n+      } else if (listenedParts.length < emittedParts.length) {\n+        // if the last part is a wildcard, we fill the rest with wildcards\n+        const filler = listenedParts[listenedParts.length - 1] === '*' ? '*' : undefined\n+        listenedParts = [...listenedParts, ...Array(Math.abs(sizeDiff)).fill(filler)]\n+      }\n+\n+      // matches if each part is equal or if the listened part is a wildcard\n+      const matched = listenedParts.every((listenedPart, i) => {\n+        return listenedPart === emittedParts[i] || (emittedParts[i] && listenedPart === '*')\n+      })\n+\n+      return isNegated ? !matched : matched // flip the result if negated\n+    })\n+  },\n+  log: (...args: string[]) => {\n+    const [ns, format, ...rest] = args\n+    // concat `ns`+`format` because console only formats first arg\n+    console.warn(`${ns} ${format}`, ...rest)",
        "comment_created_at": "2024-02-12T21:49:10+00:00",
        "comment_author": "millsp",
        "comment_body": "Ideally, I'd like any runtime to use `console.warn` so it is always `stderr`, but that is maybe too much of a deviation?",
        "pr_file_module": null
      },
      {
        "comment_id": "1486818628",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23013,
        "pr_file": "packages/debug/src/index.ts",
        "discussion_id": "1484072340",
        "commented_code": "@@ -1,88 +1,174 @@\n-import debug from 'debug'\n+/* eslint-disable no-var */\n+import * as kleur from 'kleur/colors'\n+import { bold } from 'kleur/colors'\n \n-import { Debug, Debugger } from './types'\n+const MAX_ARGS_HISTORY = 100\n+const COLORS = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red']\n \n-const MAX_LOGS = 100\n+const argsHistory: [namespace: string, ...unknown[]][] = []\n+let lastTimestamp = Date.now()\n+let lastColor = 0\n \n-const debugArgsHistory: any[] = []\n+globalThis.DEBUG ??= process.env.DEBUG ?? ''\n+globalThis.DEBUG_COLORS ??= process.env.DEBUG_COLORS ? process.env.DEBUG_COLORS === 'true' : true\n \n-// Patch the Node.js logger to use `console.debug` or `console.log` (similar to\n-// the browser logger) in the Edge Client.\n-if (typeof process !== 'undefined' && typeof process.stderr?.write !== 'function') {\n-  debug.log = console.debug ?? console.log\n+/**\n+ * Top-level utilities to configure the debug module.\n+ *\n+ * @example\n+ * ```ts\n+ * import Debug from '@prisma/debug'\n+ * Debug.enable('prisma:client')\n+ * const debug = Debug('prisma:client')\n+ * debug('Hello World')\n+ * ```\n+ */\n+const topProps = {\n+  enable(namespace: any) {\n+    if (typeof namespace === 'string') {\n+      globalThis.DEBUG = namespace\n+    }\n+  },\n+  disable() {\n+    const prev = globalThis.DEBUG\n+    globalThis.DEBUG = ''\n+    return prev\n+  },\n+  // this is the core logic to check if logging should happen or not\n+  enabled(namespace: string) {\n+    // these are the namespaces that we are listening to in DEBUG=...\n+    const listenedNamespaces: string[] = globalThis.DEBUG.split(',')\n+\n+    // we take incoming namespaces and check then against listened\n+    return listenedNamespaces.every((listenedNamespace) => {\n+      // namespaces can be negated with a `-` prefix (exclusions)\n+      const isNegated = listenedNamespace.startsWith('-') ? 1 : 0\n+      listenedNamespace = listenedNamespace.slice(isNegated)\n+\n+      // we split the namespaces by `:` to be able to compare them\n+      let emittedParts = namespace.split(':')\n+      let listenedParts = listenedNamespace.split(':')\n+      const sizeDiff = listenedParts.length - emittedParts.length\n+\n+      // here we make that the two compared arrays have the same length\n+      if (listenedParts.length > emittedParts.length) {\n+        emittedParts = [...emittedParts, ...Array(Math.abs(sizeDiff)).fill(undefined)]\n+      } else if (listenedParts.length < emittedParts.length) {\n+        // if the last part is a wildcard, we fill the rest with wildcards\n+        const filler = listenedParts[listenedParts.length - 1] === '*' ? '*' : undefined\n+        listenedParts = [...listenedParts, ...Array(Math.abs(sizeDiff)).fill(filler)]\n+      }\n+\n+      // matches if each part is equal or if the listened part is a wildcard\n+      const matched = listenedParts.every((listenedPart, i) => {\n+        return listenedPart === emittedParts[i] || (emittedParts[i] && listenedPart === '*')\n+      })\n+\n+      return isNegated ? !matched : matched // flip the result if negated\n+    })\n+  },\n+  log: (...args: string[]) => {\n+    const [ns, format, ...rest] = args\n+    // concat `ns`+`format` because console only formats first arg\n+    console.warn(`${ns} ${format}`, ...rest)",
        "comment_created_at": "2024-02-12T21:50:27+00:00",
        "comment_author": "millsp",
        "comment_body": "About using `process.stderr.write`, I don't think we can because we don't depend on `util.format` anymore. The thing is `console` has a comparable formatter built-in, so we actually want to use `console`. This is a contributor to the size reduction.",
        "pr_file_module": null
      },
      {
        "comment_id": "1486858349",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23013,
        "pr_file": "packages/debug/src/index.ts",
        "discussion_id": "1484072340",
        "commented_code": "@@ -1,88 +1,174 @@\n-import debug from 'debug'\n+/* eslint-disable no-var */\n+import * as kleur from 'kleur/colors'\n+import { bold } from 'kleur/colors'\n \n-import { Debug, Debugger } from './types'\n+const MAX_ARGS_HISTORY = 100\n+const COLORS = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red']\n \n-const MAX_LOGS = 100\n+const argsHistory: [namespace: string, ...unknown[]][] = []\n+let lastTimestamp = Date.now()\n+let lastColor = 0\n \n-const debugArgsHistory: any[] = []\n+globalThis.DEBUG ??= process.env.DEBUG ?? ''\n+globalThis.DEBUG_COLORS ??= process.env.DEBUG_COLORS ? process.env.DEBUG_COLORS === 'true' : true\n \n-// Patch the Node.js logger to use `console.debug` or `console.log` (similar to\n-// the browser logger) in the Edge Client.\n-if (typeof process !== 'undefined' && typeof process.stderr?.write !== 'function') {\n-  debug.log = console.debug ?? console.log\n+/**\n+ * Top-level utilities to configure the debug module.\n+ *\n+ * @example\n+ * ```ts\n+ * import Debug from '@prisma/debug'\n+ * Debug.enable('prisma:client')\n+ * const debug = Debug('prisma:client')\n+ * debug('Hello World')\n+ * ```\n+ */\n+const topProps = {\n+  enable(namespace: any) {\n+    if (typeof namespace === 'string') {\n+      globalThis.DEBUG = namespace\n+    }\n+  },\n+  disable() {\n+    const prev = globalThis.DEBUG\n+    globalThis.DEBUG = ''\n+    return prev\n+  },\n+  // this is the core logic to check if logging should happen or not\n+  enabled(namespace: string) {\n+    // these are the namespaces that we are listening to in DEBUG=...\n+    const listenedNamespaces: string[] = globalThis.DEBUG.split(',')\n+\n+    // we take incoming namespaces and check then against listened\n+    return listenedNamespaces.every((listenedNamespace) => {\n+      // namespaces can be negated with a `-` prefix (exclusions)\n+      const isNegated = listenedNamespace.startsWith('-') ? 1 : 0\n+      listenedNamespace = listenedNamespace.slice(isNegated)\n+\n+      // we split the namespaces by `:` to be able to compare them\n+      let emittedParts = namespace.split(':')\n+      let listenedParts = listenedNamespace.split(':')\n+      const sizeDiff = listenedParts.length - emittedParts.length\n+\n+      // here we make that the two compared arrays have the same length\n+      if (listenedParts.length > emittedParts.length) {\n+        emittedParts = [...emittedParts, ...Array(Math.abs(sizeDiff)).fill(undefined)]\n+      } else if (listenedParts.length < emittedParts.length) {\n+        // if the last part is a wildcard, we fill the rest with wildcards\n+        const filler = listenedParts[listenedParts.length - 1] === '*' ? '*' : undefined\n+        listenedParts = [...listenedParts, ...Array(Math.abs(sizeDiff)).fill(filler)]\n+      }\n+\n+      // matches if each part is equal or if the listened part is a wildcard\n+      const matched = listenedParts.every((listenedPart, i) => {\n+        return listenedPart === emittedParts[i] || (emittedParts[i] && listenedPart === '*')\n+      })\n+\n+      return isNegated ? !matched : matched // flip the result if negated\n+    })\n+  },\n+  log: (...args: string[]) => {\n+    const [ns, format, ...rest] = args\n+    // concat `ns`+`format` because console only formats first arg\n+    console.warn(`${ns} ${format}`, ...rest)",
        "comment_created_at": "2024-02-12T22:20:13+00:00",
        "comment_author": "millsp",
        "comment_body": "> but that is maybe too much of a deviation?\r\n\r\nMy thinking is that this wouldn't be a huge change, and also not something that was documented (you need to set `DEBUG` as a global variable to enable it in a cloudflare worker, for instance).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1484072518",
    "pr_number": 23013,
    "pr_file": "packages/debug/src/index.ts",
    "created_at": "2024-02-09T09:31:36+00:00",
    "commented_code": "-import debug from 'debug'\n+/* eslint-disable no-var */\n+import * as kleur from 'kleur/colors'\n+import { bold } from 'kleur/colors'\n \n-import { Debug, Debugger } from './types'\n+const MAX_ARGS_HISTORY = 100\n+const COLORS = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red']\n \n-const MAX_LOGS = 100\n+const argsHistory: [namespace: string, ...unknown[]][] = []\n+let lastTimestamp = Date.now()\n+let lastColor = 0\n \n-const debugArgsHistory: any[] = []\n+globalThis.DEBUG ??= process.env.DEBUG ?? ''\n+globalThis.DEBUG_COLORS ??= process.env.DEBUG_COLORS ? process.env.DEBUG_COLORS === 'true' : true\n \n-// Patch the Node.js logger to use `console.debug` or `console.log` (similar to\n-// the browser logger) in the Edge Client.\n-if (typeof process !== 'undefined' && typeof process.stderr?.write !== 'function') {\n-  debug.log = console.debug ?? console.log\n+/**\n+ * Top-level utilities to configure the debug module.\n+ *\n+ * @example\n+ * ```ts\n+ * import Debug from '@prisma/debug'\n+ * Debug.enable('prisma:client')\n+ * const debug = Debug('prisma:client')\n+ * debug('Hello World')\n+ * ```\n+ */\n+const topProps = {\n+  enable(namespace: any) {\n+    if (typeof namespace === 'string') {\n+      globalThis.DEBUG = namespace\n+    }\n+  },\n+  disable() {\n+    const prev = globalThis.DEBUG\n+    globalThis.DEBUG = ''\n+    return prev\n+  },\n+  // this is the core logic to check if logging should happen or not\n+  enabled(namespace: string) {\n+    // these are the namespaces that we are listening to in DEBUG=...\n+    const listenedNamespaces: string[] = globalThis.DEBUG.split(',')\n+\n+    // we take incoming namespaces and check then against listened\n+    return listenedNamespaces.every((listenedNamespace) => {\n+      // namespaces can be negated with a `-` prefix (exclusions)\n+      const isNegated = listenedNamespace.startsWith('-') ? 1 : 0\n+      listenedNamespace = listenedNamespace.slice(isNegated)\n+\n+      // we split the namespaces by `:` to be able to compare them\n+      let emittedParts = namespace.split(':')\n+      let listenedParts = listenedNamespace.split(':')\n+      const sizeDiff = listenedParts.length - emittedParts.length\n+\n+      // here we make that the two compared arrays have the same length\n+      if (listenedParts.length > emittedParts.length) {\n+        emittedParts = [...emittedParts, ...Array(Math.abs(sizeDiff)).fill(undefined)]\n+      } else if (listenedParts.length < emittedParts.length) {\n+        // if the last part is a wildcard, we fill the rest with wildcards\n+        const filler = listenedParts[listenedParts.length - 1] === '*' ? '*' : undefined\n+        listenedParts = [...listenedParts, ...Array(Math.abs(sizeDiff)).fill(filler)]\n+      }\n+\n+      // matches if each part is equal or if the listened part is a wildcard\n+      const matched = listenedParts.every((listenedPart, i) => {\n+        return listenedPart === emittedParts[i] || (emittedParts[i] && listenedPart === '*')\n+      })\n+\n+      return isNegated ? !matched : matched // flip the result if negated\n+    })\n+  },\n+  log: (...args: string[]) => {\n+    const [ns, format, ...rest] = args\n+    // concat `ns`+`format` because console only formats first arg\n+    console.warn(`${ns} ${format}`, ...rest)",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1484072518",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23013,
        "pr_file": "packages/debug/src/index.ts",
        "discussion_id": "1484072518",
        "commented_code": "@@ -1,88 +1,174 @@\n-import debug from 'debug'\n+/* eslint-disable no-var */\n+import * as kleur from 'kleur/colors'\n+import { bold } from 'kleur/colors'\n \n-import { Debug, Debugger } from './types'\n+const MAX_ARGS_HISTORY = 100\n+const COLORS = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red']\n \n-const MAX_LOGS = 100\n+const argsHistory: [namespace: string, ...unknown[]][] = []\n+let lastTimestamp = Date.now()\n+let lastColor = 0\n \n-const debugArgsHistory: any[] = []\n+globalThis.DEBUG ??= process.env.DEBUG ?? ''\n+globalThis.DEBUG_COLORS ??= process.env.DEBUG_COLORS ? process.env.DEBUG_COLORS === 'true' : true\n \n-// Patch the Node.js logger to use `console.debug` or `console.log` (similar to\n-// the browser logger) in the Edge Client.\n-if (typeof process !== 'undefined' && typeof process.stderr?.write !== 'function') {\n-  debug.log = console.debug ?? console.log\n+/**\n+ * Top-level utilities to configure the debug module.\n+ *\n+ * @example\n+ * ```ts\n+ * import Debug from '@prisma/debug'\n+ * Debug.enable('prisma:client')\n+ * const debug = Debug('prisma:client')\n+ * debug('Hello World')\n+ * ```\n+ */\n+const topProps = {\n+  enable(namespace: any) {\n+    if (typeof namespace === 'string') {\n+      globalThis.DEBUG = namespace\n+    }\n+  },\n+  disable() {\n+    const prev = globalThis.DEBUG\n+    globalThis.DEBUG = ''\n+    return prev\n+  },\n+  // this is the core logic to check if logging should happen or not\n+  enabled(namespace: string) {\n+    // these are the namespaces that we are listening to in DEBUG=...\n+    const listenedNamespaces: string[] = globalThis.DEBUG.split(',')\n+\n+    // we take incoming namespaces and check then against listened\n+    return listenedNamespaces.every((listenedNamespace) => {\n+      // namespaces can be negated with a `-` prefix (exclusions)\n+      const isNegated = listenedNamespace.startsWith('-') ? 1 : 0\n+      listenedNamespace = listenedNamespace.slice(isNegated)\n+\n+      // we split the namespaces by `:` to be able to compare them\n+      let emittedParts = namespace.split(':')\n+      let listenedParts = listenedNamespace.split(':')\n+      const sizeDiff = listenedParts.length - emittedParts.length\n+\n+      // here we make that the two compared arrays have the same length\n+      if (listenedParts.length > emittedParts.length) {\n+        emittedParts = [...emittedParts, ...Array(Math.abs(sizeDiff)).fill(undefined)]\n+      } else if (listenedParts.length < emittedParts.length) {\n+        // if the last part is a wildcard, we fill the rest with wildcards\n+        const filler = listenedParts[listenedParts.length - 1] === '*' ? '*' : undefined\n+        listenedParts = [...listenedParts, ...Array(Math.abs(sizeDiff)).fill(filler)]\n+      }\n+\n+      // matches if each part is equal or if the listened part is a wildcard\n+      const matched = listenedParts.every((listenedPart, i) => {\n+        return listenedPart === emittedParts[i] || (emittedParts[i] && listenedPart === '*')\n+      })\n+\n+      return isNegated ? !matched : matched // flip the result if negated\n+    })\n+  },\n+  log: (...args: string[]) => {\n+    const [ns, format, ...rest] = args\n+    // concat `ns`+`format` because console only formats first arg\n+    console.warn(`${ns} ${format}`, ...rest)",
        "comment_created_at": "2024-02-09T09:31:36+00:00",
        "comment_author": "Jolg42",
        "comment_body": "```suggestion\r\n    console.log(`${ns} ${format}`, ...rest)\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1484383154",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23013,
        "pr_file": "packages/debug/src/index.ts",
        "discussion_id": "1484072518",
        "commented_code": "@@ -1,88 +1,174 @@\n-import debug from 'debug'\n+/* eslint-disable no-var */\n+import * as kleur from 'kleur/colors'\n+import { bold } from 'kleur/colors'\n \n-import { Debug, Debugger } from './types'\n+const MAX_ARGS_HISTORY = 100\n+const COLORS = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red']\n \n-const MAX_LOGS = 100\n+const argsHistory: [namespace: string, ...unknown[]][] = []\n+let lastTimestamp = Date.now()\n+let lastColor = 0\n \n-const debugArgsHistory: any[] = []\n+globalThis.DEBUG ??= process.env.DEBUG ?? ''\n+globalThis.DEBUG_COLORS ??= process.env.DEBUG_COLORS ? process.env.DEBUG_COLORS === 'true' : true\n \n-// Patch the Node.js logger to use `console.debug` or `console.log` (similar to\n-// the browser logger) in the Edge Client.\n-if (typeof process !== 'undefined' && typeof process.stderr?.write !== 'function') {\n-  debug.log = console.debug ?? console.log\n+/**\n+ * Top-level utilities to configure the debug module.\n+ *\n+ * @example\n+ * ```ts\n+ * import Debug from '@prisma/debug'\n+ * Debug.enable('prisma:client')\n+ * const debug = Debug('prisma:client')\n+ * debug('Hello World')\n+ * ```\n+ */\n+const topProps = {\n+  enable(namespace: any) {\n+    if (typeof namespace === 'string') {\n+      globalThis.DEBUG = namespace\n+    }\n+  },\n+  disable() {\n+    const prev = globalThis.DEBUG\n+    globalThis.DEBUG = ''\n+    return prev\n+  },\n+  // this is the core logic to check if logging should happen or not\n+  enabled(namespace: string) {\n+    // these are the namespaces that we are listening to in DEBUG=...\n+    const listenedNamespaces: string[] = globalThis.DEBUG.split(',')\n+\n+    // we take incoming namespaces and check then against listened\n+    return listenedNamespaces.every((listenedNamespace) => {\n+      // namespaces can be negated with a `-` prefix (exclusions)\n+      const isNegated = listenedNamespace.startsWith('-') ? 1 : 0\n+      listenedNamespace = listenedNamespace.slice(isNegated)\n+\n+      // we split the namespaces by `:` to be able to compare them\n+      let emittedParts = namespace.split(':')\n+      let listenedParts = listenedNamespace.split(':')\n+      const sizeDiff = listenedParts.length - emittedParts.length\n+\n+      // here we make that the two compared arrays have the same length\n+      if (listenedParts.length > emittedParts.length) {\n+        emittedParts = [...emittedParts, ...Array(Math.abs(sizeDiff)).fill(undefined)]\n+      } else if (listenedParts.length < emittedParts.length) {\n+        // if the last part is a wildcard, we fill the rest with wildcards\n+        const filler = listenedParts[listenedParts.length - 1] === '*' ? '*' : undefined\n+        listenedParts = [...listenedParts, ...Array(Math.abs(sizeDiff)).fill(filler)]\n+      }\n+\n+      // matches if each part is equal or if the listened part is a wildcard\n+      const matched = listenedParts.every((listenedPart, i) => {\n+        return listenedPart === emittedParts[i] || (emittedParts[i] && listenedPart === '*')\n+      })\n+\n+      return isNegated ? !matched : matched // flip the result if negated\n+    })\n+  },\n+  log: (...args: string[]) => {\n+    const [ns, format, ...rest] = args\n+    // concat `ns`+`format` because console only formats first arg\n+    console.warn(`${ns} ${format}`, ...rest)",
        "comment_created_at": "2024-02-09T14:18:04+00:00",
        "comment_author": "millsp",
        "comment_body": "Actually, I just changed it from `log` to `warn` because `debug` does push to stderr, not stdout.",
        "pr_file_module": null
      },
      {
        "comment_id": "1484555735",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23013,
        "pr_file": "packages/debug/src/index.ts",
        "discussion_id": "1484072518",
        "commented_code": "@@ -1,88 +1,174 @@\n-import debug from 'debug'\n+/* eslint-disable no-var */\n+import * as kleur from 'kleur/colors'\n+import { bold } from 'kleur/colors'\n \n-import { Debug, Debugger } from './types'\n+const MAX_ARGS_HISTORY = 100\n+const COLORS = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red']\n \n-const MAX_LOGS = 100\n+const argsHistory: [namespace: string, ...unknown[]][] = []\n+let lastTimestamp = Date.now()\n+let lastColor = 0\n \n-const debugArgsHistory: any[] = []\n+globalThis.DEBUG ??= process.env.DEBUG ?? ''\n+globalThis.DEBUG_COLORS ??= process.env.DEBUG_COLORS ? process.env.DEBUG_COLORS === 'true' : true\n \n-// Patch the Node.js logger to use `console.debug` or `console.log` (similar to\n-// the browser logger) in the Edge Client.\n-if (typeof process !== 'undefined' && typeof process.stderr?.write !== 'function') {\n-  debug.log = console.debug ?? console.log\n+/**\n+ * Top-level utilities to configure the debug module.\n+ *\n+ * @example\n+ * ```ts\n+ * import Debug from '@prisma/debug'\n+ * Debug.enable('prisma:client')\n+ * const debug = Debug('prisma:client')\n+ * debug('Hello World')\n+ * ```\n+ */\n+const topProps = {\n+  enable(namespace: any) {\n+    if (typeof namespace === 'string') {\n+      globalThis.DEBUG = namespace\n+    }\n+  },\n+  disable() {\n+    const prev = globalThis.DEBUG\n+    globalThis.DEBUG = ''\n+    return prev\n+  },\n+  // this is the core logic to check if logging should happen or not\n+  enabled(namespace: string) {\n+    // these are the namespaces that we are listening to in DEBUG=...\n+    const listenedNamespaces: string[] = globalThis.DEBUG.split(',')\n+\n+    // we take incoming namespaces and check then against listened\n+    return listenedNamespaces.every((listenedNamespace) => {\n+      // namespaces can be negated with a `-` prefix (exclusions)\n+      const isNegated = listenedNamespace.startsWith('-') ? 1 : 0\n+      listenedNamespace = listenedNamespace.slice(isNegated)\n+\n+      // we split the namespaces by `:` to be able to compare them\n+      let emittedParts = namespace.split(':')\n+      let listenedParts = listenedNamespace.split(':')\n+      const sizeDiff = listenedParts.length - emittedParts.length\n+\n+      // here we make that the two compared arrays have the same length\n+      if (listenedParts.length > emittedParts.length) {\n+        emittedParts = [...emittedParts, ...Array(Math.abs(sizeDiff)).fill(undefined)]\n+      } else if (listenedParts.length < emittedParts.length) {\n+        // if the last part is a wildcard, we fill the rest with wildcards\n+        const filler = listenedParts[listenedParts.length - 1] === '*' ? '*' : undefined\n+        listenedParts = [...listenedParts, ...Array(Math.abs(sizeDiff)).fill(filler)]\n+      }\n+\n+      // matches if each part is equal or if the listened part is a wildcard\n+      const matched = listenedParts.every((listenedPart, i) => {\n+        return listenedPart === emittedParts[i] || (emittedParts[i] && listenedPart === '*')\n+      })\n+\n+      return isNegated ? !matched : matched // flip the result if negated\n+    })\n+  },\n+  log: (...args: string[]) => {\n+    const [ns, format, ...rest] = args\n+    // concat `ns`+`format` because console only formats first arg\n+    console.warn(`${ns} ${format}`, ...rest)",
        "comment_created_at": "2024-02-09T16:35:24+00:00",
        "comment_author": "Jolg42",
        "comment_body": "Right by default debug will log to stderr",
        "pr_file_module": null
      },
      {
        "comment_id": "1484557177",
        "repo_full_name": "prisma/prisma",
        "pr_number": 23013,
        "pr_file": "packages/debug/src/index.ts",
        "discussion_id": "1484072518",
        "commented_code": "@@ -1,88 +1,174 @@\n-import debug from 'debug'\n+/* eslint-disable no-var */\n+import * as kleur from 'kleur/colors'\n+import { bold } from 'kleur/colors'\n \n-import { Debug, Debugger } from './types'\n+const MAX_ARGS_HISTORY = 100\n+const COLORS = ['green', 'yellow', 'blue', 'magenta', 'cyan', 'red']\n \n-const MAX_LOGS = 100\n+const argsHistory: [namespace: string, ...unknown[]][] = []\n+let lastTimestamp = Date.now()\n+let lastColor = 0\n \n-const debugArgsHistory: any[] = []\n+globalThis.DEBUG ??= process.env.DEBUG ?? ''\n+globalThis.DEBUG_COLORS ??= process.env.DEBUG_COLORS ? process.env.DEBUG_COLORS === 'true' : true\n \n-// Patch the Node.js logger to use `console.debug` or `console.log` (similar to\n-// the browser logger) in the Edge Client.\n-if (typeof process !== 'undefined' && typeof process.stderr?.write !== 'function') {\n-  debug.log = console.debug ?? console.log\n+/**\n+ * Top-level utilities to configure the debug module.\n+ *\n+ * @example\n+ * ```ts\n+ * import Debug from '@prisma/debug'\n+ * Debug.enable('prisma:client')\n+ * const debug = Debug('prisma:client')\n+ * debug('Hello World')\n+ * ```\n+ */\n+const topProps = {\n+  enable(namespace: any) {\n+    if (typeof namespace === 'string') {\n+      globalThis.DEBUG = namespace\n+    }\n+  },\n+  disable() {\n+    const prev = globalThis.DEBUG\n+    globalThis.DEBUG = ''\n+    return prev\n+  },\n+  // this is the core logic to check if logging should happen or not\n+  enabled(namespace: string) {\n+    // these are the namespaces that we are listening to in DEBUG=...\n+    const listenedNamespaces: string[] = globalThis.DEBUG.split(',')\n+\n+    // we take incoming namespaces and check then against listened\n+    return listenedNamespaces.every((listenedNamespace) => {\n+      // namespaces can be negated with a `-` prefix (exclusions)\n+      const isNegated = listenedNamespace.startsWith('-') ? 1 : 0\n+      listenedNamespace = listenedNamespace.slice(isNegated)\n+\n+      // we split the namespaces by `:` to be able to compare them\n+      let emittedParts = namespace.split(':')\n+      let listenedParts = listenedNamespace.split(':')\n+      const sizeDiff = listenedParts.length - emittedParts.length\n+\n+      // here we make that the two compared arrays have the same length\n+      if (listenedParts.length > emittedParts.length) {\n+        emittedParts = [...emittedParts, ...Array(Math.abs(sizeDiff)).fill(undefined)]\n+      } else if (listenedParts.length < emittedParts.length) {\n+        // if the last part is a wildcard, we fill the rest with wildcards\n+        const filler = listenedParts[listenedParts.length - 1] === '*' ? '*' : undefined\n+        listenedParts = [...listenedParts, ...Array(Math.abs(sizeDiff)).fill(filler)]\n+      }\n+\n+      // matches if each part is equal or if the listened part is a wildcard\n+      const matched = listenedParts.every((listenedPart, i) => {\n+        return listenedPart === emittedParts[i] || (emittedParts[i] && listenedPart === '*')\n+      })\n+\n+      return isNegated ? !matched : matched // flip the result if negated\n+    })\n+  },\n+  log: (...args: string[]) => {\n+    const [ns, format, ...rest] = args\n+    // concat `ns`+`format` because console only formats first arg\n+    console.warn(`${ns} ${format}`, ...rest)",
        "comment_created_at": "2024-02-09T16:36:47+00:00",
        "comment_author": "Jolg42",
        "comment_body": "See what actually prompted my question here https://github.com/prisma/prisma/pull/23013/files#r1484556838",
        "pr_file_module": null
      }
    ]
  }
]