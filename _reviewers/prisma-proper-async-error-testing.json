[
  {
    "discussion_id": "1293481570",
    "pr_number": 20684,
    "pr_file": "packages/cli/src/__tests__/commands/Generate.test.ts",
    "created_at": "2023-08-14T13:46:28+00:00",
    "commented_code": "expect(data.stdout).toContain(`I am a minimal generator`)\n   }, 75_000) // timeout\n+\n+  it('should work with nested ', async () => {\n+    ctx.fixture('composite-panic')\n+    await ctx.cli('generate').catch((e) => {\n+      // This points to: fn map_scalar_input_type()\n+      expect(e.stderr).toMatchInlineSnapshot(\n+        `Error: RuntimeError: panicked at 'internal error: entered unreachable code: No unsupported field should reach that path', query-engine/schema/src/build/input_types/mod.rs:0:0`,\n+      )\n+    })",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1293481570",
        "repo_full_name": "prisma/prisma",
        "pr_number": 20684,
        "pr_file": "packages/cli/src/__tests__/commands/Generate.test.ts",
        "discussion_id": "1293481570",
        "commented_code": "@@ -37,6 +37,16 @@ describe('using cli', () => {\n \n     expect(data.stdout).toContain(`I am a minimal generator`)\n   }, 75_000) // timeout\n+\n+  it('should work with nested ', async () => {\n+    ctx.fixture('composite-panic')\n+    await ctx.cli('generate').catch((e) => {\n+      // This points to: fn map_scalar_input_type()\n+      expect(e.stderr).toMatchInlineSnapshot(\n+        `Error: RuntimeError: panicked at 'internal error: entered unreachable code: No unsupported field should reach that path', query-engine/schema/src/build/input_types/mod.rs:0:0`,\n+      )\n+    })",
        "comment_created_at": "2023-08-14T13:46:28+00:00",
        "comment_author": "Jolg42",
        "comment_body": "This test can be done in a \"better way\", because here the expectation would be skipped if it stopped failing.\r\nYou could use something like this instead, I think \ud83e\udd14 \r\n```suggestion\r\n    const result = ctx.cli('generate')\r\n    // This points to: fn map_scalar_input_type()\r\n    await expect(result).rejects.toThrowErrorMatchingInlineSnapshot(\r\n      `Error: RuntimeError: panicked at 'internal error: entered unreachable code: No unsupported field should reach that path', query-engine/schema/src/build/input_types/mod.rs:0:0`,\r\n    )\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1952589831",
    "pr_number": 25756,
    "pr_file": "packages/client/tests/e2e/init-example-env/src/index.ts",
    "created_at": "2025-02-12T12:52:17+00:00",
    "commented_code": "+import { readFileSync } from 'node:fs'\n+\n+const exampleEnvFiles = ['.env.example', '.example.env']\n+\n+exampleEnvFiles.forEach((file) => {\n+  const fileContents = readFileSync(file, 'utf8')\n+\n+  if (!fileContents.includes('DATABASE_URL=\"file:./dev.db\"')) {\n+    console.error(`${file} does not contain env var from init command\"`)\n+    process.exit(1)\n+  }",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1952589831",
        "repo_full_name": "prisma/prisma",
        "pr_number": 25756,
        "pr_file": "packages/client/tests/e2e/init-example-env/src/index.ts",
        "discussion_id": "1952589831",
        "commented_code": "@@ -0,0 +1,12 @@\n+import { readFileSync } from 'node:fs'\n+\n+const exampleEnvFiles = ['.env.example', '.example.env']\n+\n+exampleEnvFiles.forEach((file) => {\n+  const fileContents = readFileSync(file, 'utf8')\n+\n+  if (!fileContents.includes('DATABASE_URL=\"file:./dev.db\"')) {\n+    console.error(`${file} does not contain env var from init command\"`)\n+    process.exit(1)\n+  }",
        "comment_created_at": "2025-02-12T12:52:17+00:00",
        "comment_author": "wmadden",
        "comment_body": "This doesn't actually test that the example file was used. You probably need to assert that `FOO=BAR` is present.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1293501759",
    "pr_number": 20684,
    "pr_file": "packages/cli/src/__tests__/commands/Generate.test.ts",
    "created_at": "2023-08-14T14:02:09+00:00",
    "commented_code": "expect(data.stdout).toContain(`I am a minimal generator`)\n   }, 75_000) // timeout\n+\n+  it('should work with nested ', async () => {",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "1293501759",
        "repo_full_name": "prisma/prisma",
        "pr_number": 20684,
        "pr_file": "packages/cli/src/__tests__/commands/Generate.test.ts",
        "discussion_id": "1293501759",
        "commented_code": "@@ -37,6 +37,16 @@ describe('using cli', () => {\n \n     expect(data.stdout).toContain(`I am a minimal generator`)\n   }, 75_000) // timeout\n+\n+  it('should work with nested ', async () => {",
        "comment_created_at": "2023-08-14T14:02:09+00:00",
        "comment_author": "Jolg42",
        "comment_body": "Another way to do it would be to make the test assume that it should work, and make it `it.fail` so we can just remove `fail` when it's fixed\r\n```suggestion\r\n  it.failing('should work with nested ', async () => {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1293504374",
        "repo_full_name": "prisma/prisma",
        "pr_number": 20684,
        "pr_file": "packages/cli/src/__tests__/commands/Generate.test.ts",
        "discussion_id": "1293501759",
        "commented_code": "@@ -37,6 +37,16 @@ describe('using cli', () => {\n \n     expect(data.stdout).toContain(`I am a minimal generator`)\n   }, 75_000) // timeout\n+\n+  it('should work with nested ', async () => {",
        "comment_created_at": "2023-08-14T14:03:12+00:00",
        "comment_author": "Jolg42",
        "comment_body": "See https://jestjs.io/docs/api#testfailingname-fn-timeout",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2039388749",
    "pr_number": 26772,
    "pr_file": "packages/client/tests/functional/extensions/itx.ts",
    "created_at": "2025-04-11T11:44:52+00:00",
    "commented_code": "},\n   {\n     skipDriverAdapter: {\n-      from: ['js_d1'],\n+      from: [AdapterProviders.JS_D1, AdapterProviders.JS_LIBSQL],\n       reason:\n-        'iTx are not possible. There is no Transaction API for D1 yet: https://github.com/cloudflare/workers-sdk/issues/2733',\n+        'js_d1: iTx are not possible. There is no Transaction API for D1 yet: https://github.com/cloudflare/workers-sdk/issues/2733; ' +\n+        'js_libsql: SIGABRT due to panic in libsql (not yet implemented: array)',",
    "repo_full_name": "prisma/prisma",
    "discussion_comments": [
      {
        "comment_id": "2039388749",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26772,
        "pr_file": "packages/client/tests/functional/extensions/itx.ts",
        "discussion_id": "2039388749",
        "commented_code": "@@ -361,9 +361,10 @@ testMatrix.setupTestSuite(\n   },\n   {\n     skipDriverAdapter: {\n-      from: ['js_d1'],\n+      from: [AdapterProviders.JS_D1, AdapterProviders.JS_LIBSQL],\n       reason:\n-        'iTx are not possible. There is no Transaction API for D1 yet: https://github.com/cloudflare/workers-sdk/issues/2733',\n+        'js_d1: iTx are not possible. There is no Transaction API for D1 yet: https://github.com/cloudflare/workers-sdk/issues/2733; ' +\n+        'js_libsql: SIGABRT due to panic in libsql (not yet implemented: array)',",
        "comment_created_at": "2025-04-11T11:44:52+00:00",
        "comment_author": "jacek-prisma",
        "comment_body": "seems we should we have todo to address that (to make sure we dont miss it since the test is disabled)",
        "pr_file_module": null
      },
      {
        "comment_id": "2039402990",
        "repo_full_name": "prisma/prisma",
        "pr_number": 26772,
        "pr_file": "packages/client/tests/functional/extensions/itx.ts",
        "discussion_id": "2039388749",
        "commented_code": "@@ -361,9 +361,10 @@ testMatrix.setupTestSuite(\n   },\n   {\n     skipDriverAdapter: {\n-      from: ['js_d1'],\n+      from: [AdapterProviders.JS_D1, AdapterProviders.JS_LIBSQL],\n       reason:\n-        'iTx are not possible. There is no Transaction API for D1 yet: https://github.com/cloudflare/workers-sdk/issues/2733',\n+        'js_d1: iTx are not possible. There is no Transaction API for D1 yet: https://github.com/cloudflare/workers-sdk/issues/2733; ' +\n+        'js_libsql: SIGABRT due to panic in libsql (not yet implemented: array)',",
        "comment_created_at": "2025-04-11T11:55:47+00:00",
        "comment_author": "viktor-ferenczi",
        "comment_body": "A ticket has already been added: [ORM-867](https://linear.app/prisma-company/issue/ORM-867/libsql-panic)\r\n\r\nAdded a TODO comment at each occurrence.",
        "pr_file_module": null
      }
    ]
  }
]