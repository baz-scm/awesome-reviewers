[
  {
    "discussion_id": "2022734564",
    "pr_number": 16351,
    "pr_file": "cmd/prometheus/main.go",
    "created_at": "2025-04-01T12:13:22+00:00",
    "commented_code": "a.Flag(\"config.auto-reload-interval\", \"Specifies the interval for checking and automatically reloading the Prometheus configuration file upon detecting changes.\").\n \t\tDefault(\"30s\").SetValue(&cfg.autoReloadInterval)\n \n-\ta.Flag(\"web.listen-address\", \"Address to listen on for UI, API, and telemetry. Can be repeated.\").\n+\ta.Flag(\"web.listen-address\", \"Address or UNIX domain socket path to listen on for UI, API, and telemetry. Can be repeated. If set to a UNIX domain socket, --web.external-url must be set as well.\").",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2022734564",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16351,
        "pr_file": "cmd/prometheus/main.go",
        "discussion_id": "2022734564",
        "commented_code": "@@ -338,7 +338,7 @@ func main() {\n \ta.Flag(\"config.auto-reload-interval\", \"Specifies the interval for checking and automatically reloading the Prometheus configuration file upon detecting changes.\").\n \t\tDefault(\"30s\").SetValue(&cfg.autoReloadInterval)\n \n-\ta.Flag(\"web.listen-address\", \"Address to listen on for UI, API, and telemetry. Can be repeated.\").\n+\ta.Flag(\"web.listen-address\", \"Address or UNIX domain socket path to listen on for UI, API, and telemetry. Can be repeated. If set to a UNIX domain socket, --web.external-url must be set as well.\").",
        "comment_created_at": "2025-04-01T12:13:22+00:00",
        "comment_author": "machine424",
        "comment_body": "if we really want to require `--web.external-url` in this case, we'll need to do that in the code.\r\nI don;t see why we should require it though.",
        "pr_file_module": null
      },
      {
        "comment_id": "2022791998",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16351,
        "pr_file": "cmd/prometheus/main.go",
        "discussion_id": "2022734564",
        "commented_code": "@@ -338,7 +338,7 @@ func main() {\n \ta.Flag(\"config.auto-reload-interval\", \"Specifies the interval for checking and automatically reloading the Prometheus configuration file upon detecting changes.\").\n \t\tDefault(\"30s\").SetValue(&cfg.autoReloadInterval)\n \n-\ta.Flag(\"web.listen-address\", \"Address to listen on for UI, API, and telemetry. Can be repeated.\").\n+\ta.Flag(\"web.listen-address\", \"Address or UNIX domain socket path to listen on for UI, API, and telemetry. Can be repeated. If set to a UNIX domain socket, --web.external-url must be set as well.\").",
        "comment_created_at": "2025-04-01T12:50:26+00:00",
        "comment_author": "tacerus",
        "comment_body": "It is currently implicitly enforced in the code (the program will abort with not being able to parse the Unix socket as an external address), but I can add a more friendly error message.\r\nWe could also not have the restriction, but I figured that the external address is primarily used in the web interface and notifications, which a user generally accesses from a web browser or email client which would not have access to a local UNIX domain socket (if even supporting them in the first place) - in my case I would set the external address to the address the reverse proxy is handling Prometheus under.",
        "pr_file_module": null
      },
      {
        "comment_id": "2060132094",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16351,
        "pr_file": "cmd/prometheus/main.go",
        "discussion_id": "2022734564",
        "commented_code": "@@ -338,7 +338,7 @@ func main() {\n \ta.Flag(\"config.auto-reload-interval\", \"Specifies the interval for checking and automatically reloading the Prometheus configuration file upon detecting changes.\").\n \t\tDefault(\"30s\").SetValue(&cfg.autoReloadInterval)\n \n-\ta.Flag(\"web.listen-address\", \"Address to listen on for UI, API, and telemetry. Can be repeated.\").\n+\ta.Flag(\"web.listen-address\", \"Address or UNIX domain socket path to listen on for UI, API, and telemetry. Can be repeated. If set to a UNIX domain socket, --web.external-url must be set as well.\").",
        "comment_created_at": "2025-04-25T12:15:14+00:00",
        "comment_author": "machine424",
        "comment_body": "Yes, we can make some changes to make it optional, but one could argue that those changes (or even limitations in case we go for the choice below) we’d need for Unix sockets with respect to externalURL are in and of themselves a reason not to introduce unit sockets.\r\n\r\nThat said, let’s simply require an external URL (or re-order) with a more friendly message when the address at [0] is a Unix socket, and keep that note in the description.\r\n\r\nHaving some unit testing for some scenarios would be helpful.",
        "pr_file_module": null
      },
      {
        "comment_id": "2070259995",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16351,
        "pr_file": "cmd/prometheus/main.go",
        "discussion_id": "2022734564",
        "commented_code": "@@ -338,7 +338,7 @@ func main() {\n \ta.Flag(\"config.auto-reload-interval\", \"Specifies the interval for checking and automatically reloading the Prometheus configuration file upon detecting changes.\").\n \t\tDefault(\"30s\").SetValue(&cfg.autoReloadInterval)\n \n-\ta.Flag(\"web.listen-address\", \"Address to listen on for UI, API, and telemetry. Can be repeated.\").\n+\ta.Flag(\"web.listen-address\", \"Address or UNIX domain socket path to listen on for UI, API, and telemetry. Can be repeated. If set to a UNIX domain socket, --web.external-url must be set as well.\").",
        "comment_created_at": "2025-05-01T13:19:06+00:00",
        "comment_author": "tacerus",
        "comment_body": "With the new changes, it is now no longer required to set `--web.external-url`. I still _recommend_ it if the user intends to access the service using a web browser. Should I document that somewhere?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2155131211",
    "pr_number": 16751,
    "pr_file": "config/config.go",
    "created_at": "2025-06-18T17:17:53+00:00",
    "commented_code": "// UnmarshalYAML implements the yaml.Unmarshaler interface.\n func (c *ScrapeConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {\n \t*c = DefaultScrapeConfig\n+\t// Unset default validation and escaping scheme values so they can inherit\n+\t// from the global config if they are blank in the file.\n+\tc.MetricNameValidationScheme = \"\"\n+\tc.MetricNameEscapingScheme = \"\"",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2155131211",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16751,
        "pr_file": "config/config.go",
        "discussion_id": "2155131211",
        "commented_code": "@@ -778,6 +784,10 @@ func (c *ScrapeConfig) SetDirectory(dir string) {\n // UnmarshalYAML implements the yaml.Unmarshaler interface.\n func (c *ScrapeConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {\n \t*c = DefaultScrapeConfig\n+\t// Unset default validation and escaping scheme values so they can inherit\n+\t// from the global config if they are blank in the file.\n+\tc.MetricNameValidationScheme = \"\"\n+\tc.MetricNameEscapingScheme = \"\"",
        "comment_created_at": "2025-06-18T17:17:53+00:00",
        "comment_author": "dashpole",
        "comment_body": "Why do we need to do this only for these config options?  We don't seem to reset other config options (e.g. ScrapeProtocols) that inherit from the global config.",
        "pr_file_module": null
      },
      {
        "comment_id": "2155158454",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16751,
        "pr_file": "config/config.go",
        "discussion_id": "2155131211",
        "commented_code": "@@ -778,6 +784,10 @@ func (c *ScrapeConfig) SetDirectory(dir string) {\n // UnmarshalYAML implements the yaml.Unmarshaler interface.\n func (c *ScrapeConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {\n \t*c = DefaultScrapeConfig\n+\t// Unset default validation and escaping scheme values so they can inherit\n+\t// from the global config if they are blank in the file.\n+\tc.MetricNameValidationScheme = \"\"\n+\tc.MetricNameEscapingScheme = \"\"",
        "comment_created_at": "2025-06-18T17:35:02+00:00",
        "comment_author": "ywwg",
        "comment_body": "Hm well it used to be that there was not a static \"default\" for these values.  But now Validation Scheme always defaults to UTF-8, whereas before it might be \"legacy\" if the library global was set that way.  But Escaping Scheme does have a variable default -- underscores if the validation scheme is legacy, or allow-utf-8.\r\n\r\nThe lack of predictable default is the reason for the trickiness.",
        "pr_file_module": null
      },
      {
        "comment_id": "2155162848",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16751,
        "pr_file": "config/config.go",
        "discussion_id": "2155131211",
        "commented_code": "@@ -778,6 +784,10 @@ func (c *ScrapeConfig) SetDirectory(dir string) {\n // UnmarshalYAML implements the yaml.Unmarshaler interface.\n func (c *ScrapeConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {\n \t*c = DefaultScrapeConfig\n+\t// Unset default validation and escaping scheme values so they can inherit\n+\t// from the global config if they are blank in the file.\n+\tc.MetricNameValidationScheme = \"\"\n+\tc.MetricNameEscapingScheme = \"\"",
        "comment_created_at": "2025-06-18T17:37:50+00:00",
        "comment_author": "ywwg",
        "comment_body": "The other problem is these are strings.  Consider this config:\r\n\r\n```\r\nglobal:\r\n  validation-scheme: legacy\r\nscrapeconfig:\r\n  // inherit\r\n```\r\n\r\nI want code that says \"if the scrapeconfig yaml value is blank, inherit from the global config.\"  If we don't clear out the default value, we'll never know that the yaml was blank.  But if we leave the value blank in the default scrapeconfig, then validation fails (like the linked bug) when the someone uses the default config directly.",
        "pr_file_module": null
      },
      {
        "comment_id": "2155186791",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16751,
        "pr_file": "config/config.go",
        "discussion_id": "2155131211",
        "commented_code": "@@ -778,6 +784,10 @@ func (c *ScrapeConfig) SetDirectory(dir string) {\n // UnmarshalYAML implements the yaml.Unmarshaler interface.\n func (c *ScrapeConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {\n \t*c = DefaultScrapeConfig\n+\t// Unset default validation and escaping scheme values so they can inherit\n+\t// from the global config if they are blank in the file.\n+\tc.MetricNameValidationScheme = \"\"\n+\tc.MetricNameEscapingScheme = \"\"",
        "comment_created_at": "2025-06-18T17:53:08+00:00",
        "comment_author": "dashpole",
        "comment_body": "Right... I guess my suggestion is that we don't set these in `DefaultScrapeConfig`.  It seems like `(c *ScrapeConfig) Validate` already handles fallbacks for these two fields to the global one.  You could add these fields to the comment at the top of DefaultScrapeConfig.  We can handle properly defaulting escaping scheme in Validate() below as well.",
        "pr_file_module": null
      },
      {
        "comment_id": "2155306254",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16751,
        "pr_file": "config/config.go",
        "discussion_id": "2155131211",
        "commented_code": "@@ -778,6 +784,10 @@ func (c *ScrapeConfig) SetDirectory(dir string) {\n // UnmarshalYAML implements the yaml.Unmarshaler interface.\n func (c *ScrapeConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {\n \t*c = DefaultScrapeConfig\n+\t// Unset default validation and escaping scheme values so they can inherit\n+\t// from the global config if they are blank in the file.\n+\tc.MetricNameValidationScheme = \"\"\n+\tc.MetricNameEscapingScheme = \"\"",
        "comment_created_at": "2025-06-18T19:09:50+00:00",
        "comment_author": "ywwg",
        "comment_body": "this is what worries me: https://github.com/search?q=config.DefaultScrapeConfig&type=code \r\n\r\na lot of calls to this code without validation",
        "pr_file_module": null
      },
      {
        "comment_id": "2155380783",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16751,
        "pr_file": "config/config.go",
        "discussion_id": "2155131211",
        "commented_code": "@@ -778,6 +784,10 @@ func (c *ScrapeConfig) SetDirectory(dir string) {\n // UnmarshalYAML implements the yaml.Unmarshaler interface.\n func (c *ScrapeConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {\n \t*c = DefaultScrapeConfig\n+\t// Unset default validation and escaping scheme values so they can inherit\n+\t// from the global config if they are blank in the file.\n+\tc.MetricNameValidationScheme = \"\"\n+\tc.MetricNameEscapingScheme = \"\"",
        "comment_created_at": "2025-06-18T19:49:41+00:00",
        "comment_author": "dashpole",
        "comment_body": "We do that for a bunch of other fields, so that must be OK?",
        "pr_file_module": null
      },
      {
        "comment_id": "2156883435",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16751,
        "pr_file": "config/config.go",
        "discussion_id": "2155131211",
        "commented_code": "@@ -778,6 +784,10 @@ func (c *ScrapeConfig) SetDirectory(dir string) {\n // UnmarshalYAML implements the yaml.Unmarshaler interface.\n func (c *ScrapeConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {\n \t*c = DefaultScrapeConfig\n+\t// Unset default validation and escaping scheme values so they can inherit\n+\t// from the global config if they are blank in the file.\n+\tc.MetricNameValidationScheme = \"\"\n+\tc.MetricNameEscapingScheme = \"\"",
        "comment_created_at": "2025-06-19T12:19:28+00:00",
        "comment_author": "roidelapluie",
        "comment_body": "The value should be blank in the default scrapeconfig I think.",
        "pr_file_module": null
      },
      {
        "comment_id": "2156896803",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16751,
        "pr_file": "config/config.go",
        "discussion_id": "2155131211",
        "commented_code": "@@ -778,6 +784,10 @@ func (c *ScrapeConfig) SetDirectory(dir string) {\n // UnmarshalYAML implements the yaml.Unmarshaler interface.\n func (c *ScrapeConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {\n \t*c = DefaultScrapeConfig\n+\t// Unset default validation and escaping scheme values so they can inherit\n+\t// from the global config if they are blank in the file.\n+\tc.MetricNameValidationScheme = \"\"\n+\tc.MetricNameEscapingScheme = \"\"",
        "comment_created_at": "2025-06-19T12:25:32+00:00",
        "comment_author": "roidelapluie",
        "comment_body": "After looking at that, I believe strongly that it is downstream's responsibility to call Validate() on a scrape config.",
        "pr_file_module": null
      },
      {
        "comment_id": "2156904375",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16751,
        "pr_file": "config/config.go",
        "discussion_id": "2155131211",
        "commented_code": "@@ -778,6 +784,10 @@ func (c *ScrapeConfig) SetDirectory(dir string) {\n // UnmarshalYAML implements the yaml.Unmarshaler interface.\n func (c *ScrapeConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {\n \t*c = DefaultScrapeConfig\n+\t// Unset default validation and escaping scheme values so they can inherit\n+\t// from the global config if they are blank in the file.\n+\tc.MetricNameValidationScheme = \"\"\n+\tc.MetricNameEscapingScheme = \"\"",
        "comment_created_at": "2025-06-19T12:30:04+00:00",
        "comment_author": "roidelapluie",
        "comment_body": "Another idea would be to make newScrapePool resilient to that ?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049107762",
    "pr_number": 16426,
    "pr_file": "config/config.go",
    "created_at": "2025-04-17T14:40:10+00:00",
    "commented_code": "// OTLPConfig is the configuration for writing to the OTLP endpoint.\n type OTLPConfig struct {\n \tPromoteResourceAttributes         []string                  `yaml:\"promote_resource_attributes,omitempty\"`\n+\tIgnoreResourceAttributes          []string                  `yaml:\"ignore_resource_attributes,omitempty\"`",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2049107762",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16426,
        "pr_file": "config/config.go",
        "discussion_id": "2049107762",
        "commented_code": "@@ -1514,6 +1515,7 @@ var (\n // OTLPConfig is the configuration for writing to the OTLP endpoint.\n type OTLPConfig struct {\n \tPromoteResourceAttributes         []string                  `yaml:\"promote_resource_attributes,omitempty\"`\n+\tIgnoreResourceAttributes          []string                  `yaml:\"ignore_resource_attributes,omitempty\"`",
        "comment_created_at": "2025-04-17T14:40:10+00:00",
        "comment_author": "aknuds1",
        "comment_body": "As commented on earlier, I am of the opinion that promoting all resource attributes should be an explicit configuration parameter, that is mutually exclusive with `PromoteResourceAttributes`. I don't think it's a good idea to implicitly promote all resource attributes if `ignore_resource_attributes` is configured as an empty list versus `nil`.\r\n\r\n\r\n```suggestion\r\n\tPromoteAllResourceAttributes          []string                  `yaml:\"promote_all_resource_attributes,omitempty\"`\r\n\tIgnoreResourceAttributes          []string                  `yaml:\"ignore_resource_attributes,omitempty\"`\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2052166346",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16426,
        "pr_file": "config/config.go",
        "discussion_id": "2049107762",
        "commented_code": "@@ -1514,6 +1515,7 @@ var (\n // OTLPConfig is the configuration for writing to the OTLP endpoint.\n type OTLPConfig struct {\n \tPromoteResourceAttributes         []string                  `yaml:\"promote_resource_attributes,omitempty\"`\n+\tIgnoreResourceAttributes          []string                  `yaml:\"ignore_resource_attributes,omitempty\"`",
        "comment_created_at": "2025-04-21T09:10:25+00:00",
        "comment_author": "antonjim-te",
        "comment_body": "Agree, I will apply the feedback. Thanks :) ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2057832573",
    "pr_number": 16426,
    "pr_file": "config/config.go",
    "created_at": "2025-04-24T08:21:44+00:00",
    "commented_code": "return err\n \t}\n \n+\tif c.PromoteAllResourceAttributes && len(c.PromoteResourceAttributes) > 0 {\n+\t\treturn errors.New(\"'promote_all_resource_attributes' and 'promote_resource_attributes' cannot be configured simultaneously\")\n+\t}\n+\n+\tif err := validateAttributes(c.IgnoreResourceAttributes); err != nil {\n+\t\treturn fmt.Errorf(\"invalid 'ignore_resource_attributes': %w\", err)\n+\t}\n+\tif err := validateAttributes(c.PromoteResourceAttributes); err != nil {\n+\t\treturn fmt.Errorf(\"invalid 'promote_resource_attributes': %w\", err)\n+\t}",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2057832573",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16426,
        "pr_file": "config/config.go",
        "discussion_id": "2057832573",
        "commented_code": "@@ -1527,21 +1529,35 @@ func (c *OTLPConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {\n \t\treturn err\n \t}\n \n+\tif c.PromoteAllResourceAttributes && len(c.PromoteResourceAttributes) > 0 {\n+\t\treturn errors.New(\"'promote_all_resource_attributes' and 'promote_resource_attributes' cannot be configured simultaneously\")\n+\t}\n+\n+\tif err := validateAttributes(c.IgnoreResourceAttributes); err != nil {\n+\t\treturn fmt.Errorf(\"invalid 'ignore_resource_attributes': %w\", err)\n+\t}\n+\tif err := validateAttributes(c.PromoteResourceAttributes); err != nil {\n+\t\treturn fmt.Errorf(\"invalid 'promote_resource_attributes': %w\", err)\n+\t}",
        "comment_created_at": "2025-04-24T08:21:44+00:00",
        "comment_author": "aknuds1",
        "comment_body": "I think this logic should be more complete, and only deal with `IgnoreResourceAttributes`/`PromoteResourceAttributes` for the corresponding modes:\r\n```suggestion\r\n\tif c.PromoteAllResourceAttributes {\r\n\t\tif len(c.PromoteResourceAttributes) > 0 {\r\n\t\t\treturn errors.New(\"'promote_all_resource_attributes' and 'promote_resource_attributes' cannot be configured simultaneously\")\r\n\t\t}\r\n\t\tif err := sanitizeAttributes(c.IgnoreResourceAttributes); err != nil {\r\n\t\t\treturn fmt.Errorf(\"invalid 'ignore_resource_attributes': %w\", err)\r\n\t\t}\r\n\t} else {\r\n\t\tif len(c.IgnoreResourceAttributes) > 0 {\r\n\t\t\treturn errors.New(\"'promote_resource_attributes' and 'ignore_resource_attributes' cannot be configured simultaneously\")\r\n\t\t}\r\n\t\tif err := sanitizeAttributes(c.PromoteResourceAttributes); err != nil {\r\n\t\t\treturn fmt.Errorf(\"invalid 'promote_resource_attributes': %w\", err)\r\n\t\t}\r\n\t}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2062618071",
    "pr_number": 16426,
    "pr_file": "config/config.go",
    "created_at": "2025-04-27T12:40:09+00:00",
    "commented_code": "return err\n \t}\n \n+\tif c.PromoteAllResourceAttributes {\n+\t\tif len(c.PromoteResourceAttributes) > 0 {\n+\t\t\treturn errors.New(\"'promote_all_resource_attributes' and 'promote_resource_attributes' cannot be configured simultaneously\")\n+\t\t}\n+\t\tif err := sanitizeAttributes(c.IgnoreResourceAttributes); err != nil {\n+\t\t\treturn fmt.Errorf(\"invalid 'ignore_resource_attributes': %w\", err)\n+\t\t}\n+\t} else {\n+\t\tif len(c.IgnoreResourceAttributes) > 0 {\n+\t\t\treturn errors.New(\"'promote_resource_attributes' and 'ignore_resource_attributes' cannot be configured simultaneously\")",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2062618071",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16426,
        "pr_file": "config/config.go",
        "discussion_id": "2062618071",
        "commented_code": "@@ -1542,21 +1544,41 @@ func (c *OTLPConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {\n \t\treturn err\n \t}\n \n+\tif c.PromoteAllResourceAttributes {\n+\t\tif len(c.PromoteResourceAttributes) > 0 {\n+\t\t\treturn errors.New(\"'promote_all_resource_attributes' and 'promote_resource_attributes' cannot be configured simultaneously\")\n+\t\t}\n+\t\tif err := sanitizeAttributes(c.IgnoreResourceAttributes); err != nil {\n+\t\t\treturn fmt.Errorf(\"invalid 'ignore_resource_attributes': %w\", err)\n+\t\t}\n+\t} else {\n+\t\tif len(c.IgnoreResourceAttributes) > 0 {\n+\t\t\treturn errors.New(\"'promote_resource_attributes' and 'ignore_resource_attributes' cannot be configured simultaneously\")",
        "comment_created_at": "2025-04-27T12:40:09+00:00",
        "comment_author": "aknuds1",
        "comment_body": "Sorry for missing this before, but this parameter only makes sense if `promote_all_resource_attributes'` is true.\r\n```suggestion\r\n\t\t\treturn errors.New(\"'ignore_resource_attributes' cannot be configured unless 'promote_all_resource_attributes' is true\")\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2072560559",
    "pr_number": 16426,
    "pr_file": "config/config_test.go",
    "created_at": "2025-05-04T08:56:32+00:00",
    "commented_code": "}\n \n func TestOTLPSanitizeResourceAttributes(t *testing.T) {\n-\tt.Run(\"good config\", func(t *testing.T) {\n-\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n+\tt.Run(\"good config - default resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_default_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.NoError(t, err)\n+\n+\t\tout, err := yaml.Marshal(want)\n+\t\trequire.NoError(t, err)\n+\t\tvar got Config\n+\t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n+\n+\t\trequire.False(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.IgnoreResourceAttributes, 0)\n+\t\trequire.Len(t, got.OTLPConfig.PromoteResourceAttributes, 0)\n+\t})\n+\n+\tt.Run(\"good config - promote resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_promote_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n \t\trequire.NoError(t, err)\n \n \t\tout, err := yaml.Marshal(want)\n \t\trequire.NoError(t, err)\n \t\tvar got Config\n \t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n \n+\t\trequire.False(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.IgnoreResourceAttributes, 0)\n \t\trequire.Equal(t, []string{\"k8s.cluster.name\", \"k8s.job.name\", \"k8s.namespace.name\"}, got.OTLPConfig.PromoteResourceAttributes)\n \t})\n \n-\tt.Run(\"bad config\", func(t *testing.T) {\n-\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())\n+\tt.Run(\"bad config - promote resource attributes\", func(t *testing.T) {\n+\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_promote_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.Contains(t, err.Error(), `invalid 'promote_resource_attributes'`)\n \t\trequire.ErrorContains(t, err, `duplicated promoted OTel resource attribute \"k8s.job.name\"`)\n \t\trequire.ErrorContains(t, err, `empty promoted OTel resource attribute`)\n \t})\n+\n+\tt.Run(\"good config - promote all resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_resource_attributes_promote_all.good.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.NoError(t, err)\n+\n+\t\tout, err := yaml.Marshal(want)\n+\t\trequire.NoError(t, err)\n+\t\tvar got Config\n+\t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n+\t\trequire.True(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.PromoteResourceAttributes, 0)\n+\t\trequire.Len(t, got.OTLPConfig.IgnoreResourceAttributes, 0)\n+\t})\n+\n+\tt.Run(\"good config - ignore resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_ignore_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.NoError(t, err)\n+\n+\t\tout, err := yaml.Marshal(want)\n+\t\trequire.NoError(t, err)\n+\t\tvar got Config\n+\t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n+\t\trequire.True(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.PromoteResourceAttributes, 0)\n+\t\trequire.Equal(t, []string{\"k8s.cluster.name\", \"k8s.job.name\", \"k8s.namespace.name\"}, got.OTLPConfig.IgnoreResourceAttributes)\n+\t})\n+\n+\tt.Run(\"bad config - ignore resource attributes\", func(t *testing.T) {\n+\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_ignore_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.Contains(t, err.Error(), `invalid 'ignore_resource_attributes'`)\n+\t\trequire.ErrorContains(t, err, `duplicated ignored OTel resource attribute \"k8s.job.name\"`)\n+\t\trequire.ErrorContains(t, err, `empty ignored OTel resource attribute`)\n+\t})\n+\n+\tt.Run(\"bad config - conflict promote all and promote specific resource attributes\", func(t *testing.T) {",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2072560559",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16426,
        "pr_file": "config/config_test.go",
        "discussion_id": "2072560559",
        "commented_code": "@@ -1629,23 +1629,88 @@ func TestRemoteWriteRetryOnRateLimit(t *testing.T) {\n }\n \n func TestOTLPSanitizeResourceAttributes(t *testing.T) {\n-\tt.Run(\"good config\", func(t *testing.T) {\n-\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n+\tt.Run(\"good config - default resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_default_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.NoError(t, err)\n+\n+\t\tout, err := yaml.Marshal(want)\n+\t\trequire.NoError(t, err)\n+\t\tvar got Config\n+\t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n+\n+\t\trequire.False(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.IgnoreResourceAttributes, 0)\n+\t\trequire.Len(t, got.OTLPConfig.PromoteResourceAttributes, 0)\n+\t})\n+\n+\tt.Run(\"good config - promote resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_promote_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n \t\trequire.NoError(t, err)\n \n \t\tout, err := yaml.Marshal(want)\n \t\trequire.NoError(t, err)\n \t\tvar got Config\n \t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n \n+\t\trequire.False(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.IgnoreResourceAttributes, 0)\n \t\trequire.Equal(t, []string{\"k8s.cluster.name\", \"k8s.job.name\", \"k8s.namespace.name\"}, got.OTLPConfig.PromoteResourceAttributes)\n \t})\n \n-\tt.Run(\"bad config\", func(t *testing.T) {\n-\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())\n+\tt.Run(\"bad config - promote resource attributes\", func(t *testing.T) {\n+\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_promote_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.Contains(t, err.Error(), `invalid 'promote_resource_attributes'`)\n \t\trequire.ErrorContains(t, err, `duplicated promoted OTel resource attribute \"k8s.job.name\"`)\n \t\trequire.ErrorContains(t, err, `empty promoted OTel resource attribute`)\n \t})\n+\n+\tt.Run(\"good config - promote all resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_resource_attributes_promote_all.good.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.NoError(t, err)\n+\n+\t\tout, err := yaml.Marshal(want)\n+\t\trequire.NoError(t, err)\n+\t\tvar got Config\n+\t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n+\t\trequire.True(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.PromoteResourceAttributes, 0)\n+\t\trequire.Len(t, got.OTLPConfig.IgnoreResourceAttributes, 0)\n+\t})\n+\n+\tt.Run(\"good config - ignore resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_ignore_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.NoError(t, err)\n+\n+\t\tout, err := yaml.Marshal(want)\n+\t\trequire.NoError(t, err)\n+\t\tvar got Config\n+\t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n+\t\trequire.True(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.PromoteResourceAttributes, 0)\n+\t\trequire.Equal(t, []string{\"k8s.cluster.name\", \"k8s.job.name\", \"k8s.namespace.name\"}, got.OTLPConfig.IgnoreResourceAttributes)\n+\t})\n+\n+\tt.Run(\"bad config - ignore resource attributes\", func(t *testing.T) {\n+\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_ignore_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.Contains(t, err.Error(), `invalid 'ignore_resource_attributes'`)\n+\t\trequire.ErrorContains(t, err, `duplicated ignored OTel resource attribute \"k8s.job.name\"`)\n+\t\trequire.ErrorContains(t, err, `empty ignored OTel resource attribute`)\n+\t})\n+\n+\tt.Run(\"bad config - conflict promote all and promote specific resource attributes\", func(t *testing.T) {",
        "comment_created_at": "2025-05-04T08:56:32+00:00",
        "comment_author": "aknuds1",
        "comment_body": "```suggestion\r\n\tt.Run(\"bad config - conflict between promote all and promote specific resource attributes\", func(t *testing.T) {\r\n```\r\n```suggestion\r\n\tt.Run(\"bad config - conflict promote all and promote specific resource attributes\", func(t *testing.T) {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2072560841",
    "pr_number": 16426,
    "pr_file": "config/config_test.go",
    "created_at": "2025-05-04T08:57:39+00:00",
    "commented_code": "}\n \n func TestOTLPSanitizeResourceAttributes(t *testing.T) {\n-\tt.Run(\"good config\", func(t *testing.T) {\n-\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n+\tt.Run(\"good config - default resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_default_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.NoError(t, err)\n+\n+\t\tout, err := yaml.Marshal(want)\n+\t\trequire.NoError(t, err)\n+\t\tvar got Config\n+\t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n+\n+\t\trequire.False(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.IgnoreResourceAttributes, 0)\n+\t\trequire.Len(t, got.OTLPConfig.PromoteResourceAttributes, 0)\n+\t})\n+\n+\tt.Run(\"good config - promote resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_promote_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n \t\trequire.NoError(t, err)\n \n \t\tout, err := yaml.Marshal(want)\n \t\trequire.NoError(t, err)\n \t\tvar got Config\n \t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n \n+\t\trequire.False(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.IgnoreResourceAttributes, 0)\n \t\trequire.Equal(t, []string{\"k8s.cluster.name\", \"k8s.job.name\", \"k8s.namespace.name\"}, got.OTLPConfig.PromoteResourceAttributes)\n \t})\n \n-\tt.Run(\"bad config\", func(t *testing.T) {\n-\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())\n+\tt.Run(\"bad config - promote resource attributes\", func(t *testing.T) {\n+\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_promote_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.Contains(t, err.Error(), `invalid 'promote_resource_attributes'`)\n \t\trequire.ErrorContains(t, err, `duplicated promoted OTel resource attribute \"k8s.job.name\"`)\n \t\trequire.ErrorContains(t, err, `empty promoted OTel resource attribute`)\n \t})\n+\n+\tt.Run(\"good config - promote all resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_resource_attributes_promote_all.good.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.NoError(t, err)\n+\n+\t\tout, err := yaml.Marshal(want)\n+\t\trequire.NoError(t, err)\n+\t\tvar got Config\n+\t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n+\t\trequire.True(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.PromoteResourceAttributes, 0)\n+\t\trequire.Len(t, got.OTLPConfig.IgnoreResourceAttributes, 0)\n+\t})\n+\n+\tt.Run(\"good config - ignore resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_ignore_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.NoError(t, err)\n+\n+\t\tout, err := yaml.Marshal(want)\n+\t\trequire.NoError(t, err)\n+\t\tvar got Config\n+\t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n+\t\trequire.True(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.PromoteResourceAttributes, 0)\n+\t\trequire.Equal(t, []string{\"k8s.cluster.name\", \"k8s.job.name\", \"k8s.namespace.name\"}, got.OTLPConfig.IgnoreResourceAttributes)\n+\t})\n+\n+\tt.Run(\"bad config - ignore resource attributes\", func(t *testing.T) {\n+\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_ignore_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.Contains(t, err.Error(), `invalid 'ignore_resource_attributes'`)\n+\t\trequire.ErrorContains(t, err, `duplicated ignored OTel resource attribute \"k8s.job.name\"`)\n+\t\trequire.ErrorContains(t, err, `empty ignored OTel resource attribute`)\n+\t})\n+\n+\tt.Run(\"bad config - conflict promote all and promote specific resource attributes\", func(t *testing.T) {\n+\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_promote_all_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.ErrorContains(t, err, `'promote_all_resource_attributes' and 'promote_resource_attributes' cannot be configured simultaneously`)\n+\t})\n+\n+\tt.Run(\"bad config - conflict promote all, promote specific resource attributes and ignore resource attributes\", func(t *testing.T) {\n+\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_promote_all_resource_attributes2.bad.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.ErrorContains(t, err, `'promote_all_resource_attributes' and 'promote_resource_attributes' cannot be configured simultaneously`)\n+\t})\n+\n+\tt.Run(\"bad config - conflict promote specific resource attributes and ignore resource attributes\", func(t *testing.T) {\n+\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_promote_and_ignore_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2072560841",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16426,
        "pr_file": "config/config_test.go",
        "discussion_id": "2072560841",
        "commented_code": "@@ -1629,23 +1629,88 @@ func TestRemoteWriteRetryOnRateLimit(t *testing.T) {\n }\n \n func TestOTLPSanitizeResourceAttributes(t *testing.T) {\n-\tt.Run(\"good config\", func(t *testing.T) {\n-\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n+\tt.Run(\"good config - default resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_default_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.NoError(t, err)\n+\n+\t\tout, err := yaml.Marshal(want)\n+\t\trequire.NoError(t, err)\n+\t\tvar got Config\n+\t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n+\n+\t\trequire.False(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.IgnoreResourceAttributes, 0)\n+\t\trequire.Len(t, got.OTLPConfig.PromoteResourceAttributes, 0)\n+\t})\n+\n+\tt.Run(\"good config - promote resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_promote_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n \t\trequire.NoError(t, err)\n \n \t\tout, err := yaml.Marshal(want)\n \t\trequire.NoError(t, err)\n \t\tvar got Config\n \t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n \n+\t\trequire.False(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.IgnoreResourceAttributes, 0)\n \t\trequire.Equal(t, []string{\"k8s.cluster.name\", \"k8s.job.name\", \"k8s.namespace.name\"}, got.OTLPConfig.PromoteResourceAttributes)\n \t})\n \n-\tt.Run(\"bad config\", func(t *testing.T) {\n-\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())\n+\tt.Run(\"bad config - promote resource attributes\", func(t *testing.T) {\n+\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_promote_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.Contains(t, err.Error(), `invalid 'promote_resource_attributes'`)\n \t\trequire.ErrorContains(t, err, `duplicated promoted OTel resource attribute \"k8s.job.name\"`)\n \t\trequire.ErrorContains(t, err, `empty promoted OTel resource attribute`)\n \t})\n+\n+\tt.Run(\"good config - promote all resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_resource_attributes_promote_all.good.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.NoError(t, err)\n+\n+\t\tout, err := yaml.Marshal(want)\n+\t\trequire.NoError(t, err)\n+\t\tvar got Config\n+\t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n+\t\trequire.True(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.PromoteResourceAttributes, 0)\n+\t\trequire.Len(t, got.OTLPConfig.IgnoreResourceAttributes, 0)\n+\t})\n+\n+\tt.Run(\"good config - ignore resource attributes\", func(t *testing.T) {\n+\t\twant, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_ignore_resource_attributes.good.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.NoError(t, err)\n+\n+\t\tout, err := yaml.Marshal(want)\n+\t\trequire.NoError(t, err)\n+\t\tvar got Config\n+\t\trequire.NoError(t, yaml.UnmarshalStrict(out, &got))\n+\t\trequire.True(t, got.OTLPConfig.PromoteAllResourceAttributes)\n+\t\trequire.Len(t, got.OTLPConfig.PromoteResourceAttributes, 0)\n+\t\trequire.Equal(t, []string{\"k8s.cluster.name\", \"k8s.job.name\", \"k8s.namespace.name\"}, got.OTLPConfig.IgnoreResourceAttributes)\n+\t})\n+\n+\tt.Run(\"bad config - ignore resource attributes\", func(t *testing.T) {\n+\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_sanitize_ignore_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.Contains(t, err.Error(), `invalid 'ignore_resource_attributes'`)\n+\t\trequire.ErrorContains(t, err, `duplicated ignored OTel resource attribute \"k8s.job.name\"`)\n+\t\trequire.ErrorContains(t, err, `empty ignored OTel resource attribute`)\n+\t})\n+\n+\tt.Run(\"bad config - conflict promote all and promote specific resource attributes\", func(t *testing.T) {\n+\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_promote_all_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.ErrorContains(t, err, `'promote_all_resource_attributes' and 'promote_resource_attributes' cannot be configured simultaneously`)\n+\t})\n+\n+\tt.Run(\"bad config - conflict promote all, promote specific resource attributes and ignore resource attributes\", func(t *testing.T) {\n+\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_promote_all_resource_attributes2.bad.yml\"), false, promslog.NewNopLogger())\n+\t\trequire.ErrorContains(t, err, `'promote_all_resource_attributes' and 'promote_resource_attributes' cannot be configured simultaneously`)\n+\t})\n+\n+\tt.Run(\"bad config - conflict promote specific resource attributes and ignore resource attributes\", func(t *testing.T) {\n+\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_promote_and_ignore_resource_attributes.bad.yml\"), false, promslog.NewNopLogger())",
        "comment_created_at": "2025-05-04T08:57:39+00:00",
        "comment_author": "aknuds1",
        "comment_body": "```suggestion\r\n\tt.Run(\"The actual problem is configuring ignoring of resource attributes without also enabling promotion of all resource attributes.\", func(t *testing.T) {\r\n\t\t_, err := LoadFile(filepath.Join(\"testdata\", \"otlp_ignore_resource_attributes_without_promote_all.bad.yml\"), false, promslog.NewNopLogger())\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2060010482",
    "pr_number": 16462,
    "pr_file": "cmd/prometheus/main.go",
    "created_at": "2025-04-25T10:49:04+00:00",
    "commented_code": "logger.Error(fmt.Sprintf(\"Error loading dynamic scrape config files from config (--config.file=%q)\", cfg.configFile), \"file\", absPath, \"err\", err)\n \t\tos.Exit(2)\n \t}\n+\n+\t// This section of the code is responsible for validating and parsing rule files\n+\t// specified in the Prometheus configuration. It ensures that all rule files\n+\t// match the provided patterns and are syntactically correct before Prometheus\n+\t// starts processing them.\n+\t// 1. Iterate through the list of rule file patterns specified in the configuration (`cfgFile.RuleFiles`).\n+\t// 2. Use `filepath.Glob` to expand each pattern into a list of matching files.\n+\t// 3. If an error occurs during pattern expansion, log the error, resolve the absolute path of the pattern, and exit with an error code.\n+\t// 4. For each matching file, attempt to parse it using `rules.ParseFile`.\n+\t// 5. If parsing fails, log the error, resolve the absolute path of the file, and exit with an error code.\n+\t//\n+\t// Errors are logged with details such as the configuration file path, the rule file pattern, and the specific error encountered.\n+\n+\tif len(cfgFile.RuleFiles) > 0 {\n+\t\tfor _, pat := range cfgFile.RuleFiles {\n+\t\t\tfiles, err := filepath.Glob(pat)\n+\t\t\tif err != nil {\n+\t\t\t\tabsPath, pathErr := filepath.Abs(pat)\n+\t\t\t\tif pathErr != nil {\n+\t\t\t\t\tabsPath = pat\n+\t\t\t\t}\n+\t\t\t\tlogger.Error(fmt.Sprintf(\"Error loading rules pattern (--config.file=%q)\", cfg.configFile), \"file\", absPath, \"pattern\", pat, \"err\", err)\n+\t\t\t\tos.Exit(2)\n+\t\t\t}\n+\t\t\tfor _, fn := range files {\n+\t\t\t\tif _, err := rules.ParseFile(fn); err != nil {\n+\t\t\t\t\tabsPath, pathErr := filepath.Abs(fn)\n+\t\t\t\t\tif pathErr != nil {\n+\t\t\t\t\t\tabsPath = fn\n+\t\t\t\t\t}\n+\t\t\t\t\tlogger.Error(fmt.Sprintf(\"Error loading rules file (--config.file=%q)\", cfg.configFile), \"file\", absPath, \"err\", err)\n+\t\t\t\t\tos.Exit(2)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2060010482",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16462,
        "pr_file": "cmd/prometheus/main.go",
        "discussion_id": "2060010482",
        "commented_code": "@@ -627,6 +627,43 @@ func main() {\n \t\tlogger.Error(fmt.Sprintf(\"Error loading dynamic scrape config files from config (--config.file=%q)\", cfg.configFile), \"file\", absPath, \"err\", err)\n \t\tos.Exit(2)\n \t}\n+\n+\t// This section of the code is responsible for validating and parsing rule files\n+\t// specified in the Prometheus configuration. It ensures that all rule files\n+\t// match the provided patterns and are syntactically correct before Prometheus\n+\t// starts processing them.\n+\t// 1. Iterate through the list of rule file patterns specified in the configuration (`cfgFile.RuleFiles`).\n+\t// 2. Use `filepath.Glob` to expand each pattern into a list of matching files.\n+\t// 3. If an error occurs during pattern expansion, log the error, resolve the absolute path of the pattern, and exit with an error code.\n+\t// 4. For each matching file, attempt to parse it using `rules.ParseFile`.\n+\t// 5. If parsing fails, log the error, resolve the absolute path of the file, and exit with an error code.\n+\t//\n+\t// Errors are logged with details such as the configuration file path, the rule file pattern, and the specific error encountered.\n+\n+\tif len(cfgFile.RuleFiles) > 0 {\n+\t\tfor _, pat := range cfgFile.RuleFiles {\n+\t\t\tfiles, err := filepath.Glob(pat)\n+\t\t\tif err != nil {\n+\t\t\t\tabsPath, pathErr := filepath.Abs(pat)\n+\t\t\t\tif pathErr != nil {\n+\t\t\t\t\tabsPath = pat\n+\t\t\t\t}\n+\t\t\t\tlogger.Error(fmt.Sprintf(\"Error loading rules pattern (--config.file=%q)\", cfg.configFile), \"file\", absPath, \"pattern\", pat, \"err\", err)\n+\t\t\t\tos.Exit(2)\n+\t\t\t}\n+\t\t\tfor _, fn := range files {\n+\t\t\t\tif _, err := rules.ParseFile(fn); err != nil {\n+\t\t\t\t\tabsPath, pathErr := filepath.Abs(fn)\n+\t\t\t\t\tif pathErr != nil {\n+\t\t\t\t\t\tabsPath = fn\n+\t\t\t\t\t}\n+\t\t\t\t\tlogger.Error(fmt.Sprintf(\"Error loading rules file (--config.file=%q)\", cfg.configFile), \"file\", absPath, \"err\", err)\n+\t\t\t\t\tos.Exit(2)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}",
        "comment_created_at": "2025-04-25T10:49:04+00:00",
        "comment_author": "aknuds1",
        "comment_body": "It's better to fully embed the logic in a function in the `rules` package:\r\n```suggestion\r\n\tif err := rules.ParseFiles(cfgFile.RuleFiles); err != nil {\r\n\t\tabsPath, pathErr := filepath.Abs(cfg.configFile)\r\n\t\tif pathErr != nil {\r\n\t\t\tabsPath = cfg.configFile\r\n\t\t}\r\n\t\tlogger.Error(fmt.Sprintf(\"Error loading rule file patterns from config (--config.file=%q)\", cfg.configFile), \"file\", absPath, \"err\", err)\r\n\t\tos.Exit(2)\r\n\t}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2066825960",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16462,
        "pr_file": "cmd/prometheus/main.go",
        "discussion_id": "2060010482",
        "commented_code": "@@ -627,6 +627,43 @@ func main() {\n \t\tlogger.Error(fmt.Sprintf(\"Error loading dynamic scrape config files from config (--config.file=%q)\", cfg.configFile), \"file\", absPath, \"err\", err)\n \t\tos.Exit(2)\n \t}\n+\n+\t// This section of the code is responsible for validating and parsing rule files\n+\t// specified in the Prometheus configuration. It ensures that all rule files\n+\t// match the provided patterns and are syntactically correct before Prometheus\n+\t// starts processing them.\n+\t// 1. Iterate through the list of rule file patterns specified in the configuration (`cfgFile.RuleFiles`).\n+\t// 2. Use `filepath.Glob` to expand each pattern into a list of matching files.\n+\t// 3. If an error occurs during pattern expansion, log the error, resolve the absolute path of the pattern, and exit with an error code.\n+\t// 4. For each matching file, attempt to parse it using `rules.ParseFile`.\n+\t// 5. If parsing fails, log the error, resolve the absolute path of the file, and exit with an error code.\n+\t//\n+\t// Errors are logged with details such as the configuration file path, the rule file pattern, and the specific error encountered.\n+\n+\tif len(cfgFile.RuleFiles) > 0 {\n+\t\tfor _, pat := range cfgFile.RuleFiles {\n+\t\t\tfiles, err := filepath.Glob(pat)\n+\t\t\tif err != nil {\n+\t\t\t\tabsPath, pathErr := filepath.Abs(pat)\n+\t\t\t\tif pathErr != nil {\n+\t\t\t\t\tabsPath = pat\n+\t\t\t\t}\n+\t\t\t\tlogger.Error(fmt.Sprintf(\"Error loading rules pattern (--config.file=%q)\", cfg.configFile), \"file\", absPath, \"pattern\", pat, \"err\", err)\n+\t\t\t\tos.Exit(2)\n+\t\t\t}\n+\t\t\tfor _, fn := range files {\n+\t\t\t\tif _, err := rules.ParseFile(fn); err != nil {\n+\t\t\t\t\tabsPath, pathErr := filepath.Abs(fn)\n+\t\t\t\t\tif pathErr != nil {\n+\t\t\t\t\t\tabsPath = fn\n+\t\t\t\t\t}\n+\t\t\t\t\tlogger.Error(fmt.Sprintf(\"Error loading rules file (--config.file=%q)\", cfg.configFile), \"file\", absPath, \"err\", err)\n+\t\t\t\t\tos.Exit(2)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}",
        "comment_created_at": "2025-04-29T15:28:17+00:00",
        "comment_author": "beorn7",
        "comment_body": "The comment hasn't been addressed yet.",
        "pr_file_module": null
      },
      {
        "comment_id": "2067971010",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16462,
        "pr_file": "cmd/prometheus/main.go",
        "discussion_id": "2060010482",
        "commented_code": "@@ -627,6 +627,43 @@ func main() {\n \t\tlogger.Error(fmt.Sprintf(\"Error loading dynamic scrape config files from config (--config.file=%q)\", cfg.configFile), \"file\", absPath, \"err\", err)\n \t\tos.Exit(2)\n \t}\n+\n+\t// This section of the code is responsible for validating and parsing rule files\n+\t// specified in the Prometheus configuration. It ensures that all rule files\n+\t// match the provided patterns and are syntactically correct before Prometheus\n+\t// starts processing them.\n+\t// 1. Iterate through the list of rule file patterns specified in the configuration (`cfgFile.RuleFiles`).\n+\t// 2. Use `filepath.Glob` to expand each pattern into a list of matching files.\n+\t// 3. If an error occurs during pattern expansion, log the error, resolve the absolute path of the pattern, and exit with an error code.\n+\t// 4. For each matching file, attempt to parse it using `rules.ParseFile`.\n+\t// 5. If parsing fails, log the error, resolve the absolute path of the file, and exit with an error code.\n+\t//\n+\t// Errors are logged with details such as the configuration file path, the rule file pattern, and the specific error encountered.\n+\n+\tif len(cfgFile.RuleFiles) > 0 {\n+\t\tfor _, pat := range cfgFile.RuleFiles {\n+\t\t\tfiles, err := filepath.Glob(pat)\n+\t\t\tif err != nil {\n+\t\t\t\tabsPath, pathErr := filepath.Abs(pat)\n+\t\t\t\tif pathErr != nil {\n+\t\t\t\t\tabsPath = pat\n+\t\t\t\t}\n+\t\t\t\tlogger.Error(fmt.Sprintf(\"Error loading rules pattern (--config.file=%q)\", cfg.configFile), \"file\", absPath, \"pattern\", pat, \"err\", err)\n+\t\t\t\tos.Exit(2)\n+\t\t\t}\n+\t\t\tfor _, fn := range files {\n+\t\t\t\tif _, err := rules.ParseFile(fn); err != nil {\n+\t\t\t\t\tabsPath, pathErr := filepath.Abs(fn)\n+\t\t\t\t\tif pathErr != nil {\n+\t\t\t\t\t\tabsPath = fn\n+\t\t\t\t\t}\n+\t\t\t\t\tlogger.Error(fmt.Sprintf(\"Error loading rules file (--config.file=%q)\", cfg.configFile), \"file\", absPath, \"err\", err)\n+\t\t\t\t\tos.Exit(2)\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}",
        "comment_created_at": "2025-04-30T06:55:10+00:00",
        "comment_author": "marcodebba",
        "comment_body": "I've used the existing function and deleted my not useful method. ",
        "pr_file_module": null
      }
    ]
  }
]