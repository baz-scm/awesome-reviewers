[
  {
    "discussion_id": "2135990860",
    "pr_number": 16401,
    "pr_file": "discovery/stackit/server.go",
    "created_at": "2025-06-09T15:56:49+00:00",
    "commented_code": "+// Copyright 2020 The Prometheus Authors\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package stackit\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"log/slog\"\n+\t\"net\"\n+\t\"net/http\"\n+\t\"strconv\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/prometheus/common/config\"\n+\t\"github.com/prometheus/common/model\"\n+\t\"github.com/stackitcloud/stackit-sdk-go/core/auth\"\n+\tstackitconfig \"github.com/stackitcloud/stackit-sdk-go/core/config\"\n+\n+\t\"github.com/prometheus/prometheus/discovery/refresh\"\n+\t\"github.com/prometheus/prometheus/discovery/targetgroup\"\n+\t\"github.com/prometheus/prometheus/util/strutil\"\n+)\n+\n+const (\n+\tstackitAPIEndpoint = \"https://iaas.api.%s.stackit.cloud\"\n+\n+\tstackitLabelPrivateIPv4  = stackitLabelPrefix + \"private_ipv4_\"\n+\tstackitLabelType         = stackitLabelPrefix + \"type\"\n+\tstackitLabelLabel        = stackitLabelPrefix + \"label_\"\n+\tstackitLabelLabelPresent = stackitLabelPrefix + \"labelpresent_\"\n+)\n+\n+// Discovery periodically performs STACKIT Cloud requests.\n+// It implements the Discoverer interface.\n+type iaasDiscovery struct {\n+\t*refresh.Discovery\n+\thttpClient  *http.Client\n+\tlogger      *slog.Logger\n+\tapiEndpoint string\n+\tproject     string\n+\tport        int\n+}\n+\n+// newServerDiscovery returns a new iaasDiscovery, which periodically refreshes its targets.\n+func newServerDiscovery(conf *SDConfig, logger *slog.Logger) (*iaasDiscovery, error) {\n+\td := &iaasDiscovery{\n+\t\tproject:     conf.Project,\n+\t\tport:        conf.Port,\n+\t\tapiEndpoint: conf.Endpoint,\n+\t\tlogger:      logger,\n+\t}\n+\n+\trt, err := config.NewRoundTripperFromConfig(conf.HTTPClientConfig, \"stackit_sd\")\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tendpoint := conf.Endpoint\n+\tif endpoint == \"\" {\n+\t\tendpoint = fmt.Sprintf(stackitAPIEndpoint, conf.Region)\n+\t}\n+\n+\tservers := stackitconfig.ServerConfigurations{}\n+\tnoAuth := true\n+\tservers = append(servers, stackitconfig.ServerConfiguration{\n+\t\tURL:         endpoint,\n+\t\tDescription: \"STACKIT IAAS API\",\n+\t})\n+\n+\t// If service account key and private key are set, use SDK authentication.\n+\tif conf.ServiceAccountKey != \"\" || conf.ServiceAccountKeyPath != \"\" {\n+\t\tnoAuth = false\n+\t}\n+\n+\td.httpClient = &http.Client{\n+\t\tTimeout:   time.Duration(conf.RefreshInterval),\n+\t\tTransport: rt,\n+\t}\n+\n+\tstackitConfiguration := &stackitconfig.Configuration{\n+\t\tUserAgent:  userAgent,\n+\t\tHTTPClient: d.httpClient,\n+\t\tServers:    servers,\n+\t\tNoAuth:     noAuth,",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2135990860",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16401,
        "pr_file": "discovery/stackit/server.go",
        "discussion_id": "2135990860",
        "commented_code": "@@ -0,0 +1,216 @@\n+// Copyright 2020 The Prometheus Authors\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package stackit\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"log/slog\"\n+\t\"net\"\n+\t\"net/http\"\n+\t\"strconv\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/prometheus/common/config\"\n+\t\"github.com/prometheus/common/model\"\n+\t\"github.com/stackitcloud/stackit-sdk-go/core/auth\"\n+\tstackitconfig \"github.com/stackitcloud/stackit-sdk-go/core/config\"\n+\n+\t\"github.com/prometheus/prometheus/discovery/refresh\"\n+\t\"github.com/prometheus/prometheus/discovery/targetgroup\"\n+\t\"github.com/prometheus/prometheus/util/strutil\"\n+)\n+\n+const (\n+\tstackitAPIEndpoint = \"https://iaas.api.%s.stackit.cloud\"\n+\n+\tstackitLabelPrivateIPv4  = stackitLabelPrefix + \"private_ipv4_\"\n+\tstackitLabelType         = stackitLabelPrefix + \"type\"\n+\tstackitLabelLabel        = stackitLabelPrefix + \"label_\"\n+\tstackitLabelLabelPresent = stackitLabelPrefix + \"labelpresent_\"\n+)\n+\n+// Discovery periodically performs STACKIT Cloud requests.\n+// It implements the Discoverer interface.\n+type iaasDiscovery struct {\n+\t*refresh.Discovery\n+\thttpClient  *http.Client\n+\tlogger      *slog.Logger\n+\tapiEndpoint string\n+\tproject     string\n+\tport        int\n+}\n+\n+// newServerDiscovery returns a new iaasDiscovery, which periodically refreshes its targets.\n+func newServerDiscovery(conf *SDConfig, logger *slog.Logger) (*iaasDiscovery, error) {\n+\td := &iaasDiscovery{\n+\t\tproject:     conf.Project,\n+\t\tport:        conf.Port,\n+\t\tapiEndpoint: conf.Endpoint,\n+\t\tlogger:      logger,\n+\t}\n+\n+\trt, err := config.NewRoundTripperFromConfig(conf.HTTPClientConfig, \"stackit_sd\")\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tendpoint := conf.Endpoint\n+\tif endpoint == \"\" {\n+\t\tendpoint = fmt.Sprintf(stackitAPIEndpoint, conf.Region)\n+\t}\n+\n+\tservers := stackitconfig.ServerConfigurations{}\n+\tnoAuth := true\n+\tservers = append(servers, stackitconfig.ServerConfiguration{\n+\t\tURL:         endpoint,\n+\t\tDescription: \"STACKIT IAAS API\",\n+\t})\n+\n+\t// If service account key and private key are set, use SDK authentication.\n+\tif conf.ServiceAccountKey != \"\" || conf.ServiceAccountKeyPath != \"\" {\n+\t\tnoAuth = false\n+\t}\n+\n+\td.httpClient = &http.Client{\n+\t\tTimeout:   time.Duration(conf.RefreshInterval),\n+\t\tTransport: rt,\n+\t}\n+\n+\tstackitConfiguration := &stackitconfig.Configuration{\n+\t\tUserAgent:  userAgent,\n+\t\tHTTPClient: d.httpClient,\n+\t\tServers:    servers,\n+\t\tNoAuth:     noAuth,",
        "comment_created_at": "2025-06-09T15:56:49+00:00",
        "comment_author": "machine424",
        "comment_body": "how about?\r\n```suggestion\r\n\t\tNoAuth:     conf.ServiceAccountKey == \"\" && conf.ServiceAccountKeyPath == \"\",\r\n```",
        "pr_file_module": null
      }
    ]
  }
]