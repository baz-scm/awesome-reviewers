[
  {
    "discussion_id": "2203227343",
    "pr_number": 16860,
    "pr_file": "promql/promqltest/testdata/functions.test",
    "created_at": "2025-07-13T08:07:00+00:00",
    "commented_code": "# One float in the vector.\n eval instant at 0m scalar({l=\"x\"})\n \t1\n+\n+clear\n+\n+# Test rate() with too many resets warning.\n+load 1m\n+    http_requests_total{job=\"api\"} 100 5 6 3 2 1\n+    http_requests_total{job=\"api2\"} 10 20 5 6 25\n+\n+eval instant at 5m rate(http_requests_total{job=\"api\"}[5m])\n+\texpect info",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2203227343",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16860,
        "pr_file": "promql/promqltest/testdata/functions.test",
        "discussion_id": "2203227343",
        "commented_code": "@@ -1954,3 +1954,20 @@ eval instant at 0m scalar({type=\"histogram\"})\n # One float in the vector.\n eval instant at 0m scalar({l=\"x\"})\n \t1\n+\n+clear\n+\n+# Test rate() with too many resets warning.\n+load 1m\n+    http_requests_total{job=\"api\"} 100 5 6 3 2 1\n+    http_requests_total{job=\"api2\"} 10 20 5 6 25\n+\n+eval instant at 5m rate(http_requests_total{job=\"api\"}[5m])\n+\texpect info",
        "comment_created_at": "2025-07-13T08:07:00+00:00",
        "comment_author": "darshanime",
        "comment_body": "can you use the new `expect` syntax to assert the exact msg too, see [ref](https://github.com/prometheus/prometheus/blob/main/promql/promqltest/README.md#expect-syntax)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167705105",
    "pr_number": 16585,
    "pr_file": "promql/promqltest/testdata/aggregators.test",
    "created_at": "2025-06-25T21:55:39+00:00",
    "commented_code": "{test=\"uneven samples\"} 2.8\n \n # The histogram is ignored here so the result doesn't change but it has an info annotation now.\n-eval_info instant at 1m quantile without(point)(0.8, {__name__=~\"data(_histogram)?\"})\n+eval instant at 1m quantile without(point)(0.8, {__name__=~\"data(_histogram)?\"})\n+\texpect info",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2167705105",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16585,
        "pr_file": "promql/promqltest/testdata/aggregators.test",
        "discussion_id": "2167705105",
        "commented_code": "@@ -462,13 +489,15 @@ eval instant at 1m quantile without(point)(0.8, data)\n \t{test=\"uneven samples\"} 2.8\n \n # The histogram is ignored here so the result doesn't change but it has an info annotation now.\n-eval_info instant at 1m quantile without(point)(0.8, {__name__=~\"data(_histogram)?\"})\n+eval instant at 1m quantile without(point)(0.8, {__name__=~\"data(_histogram)?\"})\n+\texpect info",
        "comment_created_at": "2025-06-25T21:55:39+00:00",
        "comment_author": "beorn7",
        "comment_body": "Which means we should add an `expect no_info` to the test up in line 487 to demonstrate that normally, there is no info annotation.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167714335",
    "pr_number": 16585,
    "pr_file": "promql/promqltest/testdata/functions.test",
    "created_at": "2025-06-25T22:00:52+00:00",
    "commented_code": "eval instant at 20m irate(http_requests_histogram{path=\"/b\"}[6m])\n \n-eval_warn instant at 20m irate(http_requests_histogram{path=\"/c\"}[20m])\n+eval instant at 20m irate(http_requests_histogram{path=\"/c\"}[20m])\n+\texpect warn\n \t{path=\"/c\"} {{sum:0.01 count:0.01 counter_reset_hint:gauge}}\n \n-eval_warn instant at 20m irate(http_requests_histogram{path=\"/d\"}[20m])\n+eval instant at 20m irate(http_requests_histogram{path=\"/d\"}[20m])\n+\texpect warn\n \t{path=\"/d\"} {{sum:0.01 count:0.01 counter_reset_hint:gauge}}\n \n-eval_warn instant at 20m irate(http_requests_histogram{path=\"/e\"}[20m])\n+eval instant at 20m irate(http_requests_histogram{path=\"/e\"}[20m])\n+  expect warn\n \n eval instant at 20m irate(http_requests_histogram{path=\"/f\"}[20m])\n \t{path=\"/f\"} {{schema:-53 sum:0.01 count:0.01 custom_values:[5 10] buckets:[0.01]}}",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2167714335",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16585,
        "pr_file": "promql/promqltest/testdata/functions.test",
        "discussion_id": "2167714335",
        "commented_code": "@@ -247,13 +247,16 @@ eval instant at 20m irate(http_requests_histogram{path=\"/b\"}[20m])\n \n eval instant at 20m irate(http_requests_histogram{path=\"/b\"}[6m])\n \n-eval_warn instant at 20m irate(http_requests_histogram{path=\"/c\"}[20m])\n+eval instant at 20m irate(http_requests_histogram{path=\"/c\"}[20m])\n+\texpect warn\n \t{path=\"/c\"} {{sum:0.01 count:0.01 counter_reset_hint:gauge}}\n \n-eval_warn instant at 20m irate(http_requests_histogram{path=\"/d\"}[20m])\n+eval instant at 20m irate(http_requests_histogram{path=\"/d\"}[20m])\n+\texpect warn\n \t{path=\"/d\"} {{sum:0.01 count:0.01 counter_reset_hint:gauge}}\n \n-eval_warn instant at 20m irate(http_requests_histogram{path=\"/e\"}[20m])\n+eval instant at 20m irate(http_requests_histogram{path=\"/e\"}[20m])\n+  expect warn\n \n eval instant at 20m irate(http_requests_histogram{path=\"/f\"}[20m])\n \t{path=\"/f\"} {{schema:-53 sum:0.01 count:0.01 custom_values:[5 10] buckets:[0.01]}}",
        "comment_created_at": "2025-06-25T22:00:52+00:00",
        "comment_author": "beorn7",
        "comment_body": "```suggestion\r\n\texpect no_warn\r\n\t{path=\"/f\"} {{schema:-53 sum:0.01 count:0.01 custom_values:[5 10] buckets:[0.01]}}\r\n```\r\n\r\nAnd similar to all the other tests based on this same data set. This section is all about when a warning is added and when not, so we should be explicit here about not having a warning for all the cases that do not get a warning annotated.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2077443128",
    "pr_number": 16562,
    "pr_file": "promql/promqltest/testdata/aggregators.test",
    "created_at": "2025-05-07T11:45:10+00:00",
    "commented_code": "{} 4\n \n # The histogram is ignored here so the result doesn't change but it has an info annotation now.\n-eval_info instant at 0m max({job=\"api-server\"})\n+eval instant at 0m max({job=\"api-server\"})\n+  expect info\n   {} 4\n \n # The histogram is ignored here so there is no result but it has an info annotation now.\n-eval_info instant at 0m max(http_requests_histogram)\n+eval instant at 0m max(http_requests_histogram)\n+  expect info\n \n eval instant at 0m min(http_requests)",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2077443128",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16562,
        "pr_file": "promql/promqltest/testdata/aggregators.test",
        "discussion_id": "2077443128",
        "commented_code": "@@ -235,21 +235,25 @@ eval instant at 0m max(http_requests)\n   {} 4\n \n # The histogram is ignored here so the result doesn't change but it has an info annotation now.\n-eval_info instant at 0m max({job=\"api-server\"})\n+eval instant at 0m max({job=\"api-server\"})\n+  expect info\n   {} 4\n \n # The histogram is ignored here so there is no result but it has an info annotation now.\n-eval_info instant at 0m max(http_requests_histogram)\n+eval instant at 0m max(http_requests_histogram)\n+  expect info\n \n eval instant at 0m min(http_requests)",
        "comment_created_at": "2025-05-07T11:45:10+00:00",
        "comment_author": "beorn7",
        "comment_body": "Since we are explicitly interested in this _not_ creating an annotation, an `expect no_info` would make sense here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2033722526",
    "pr_number": 16393,
    "pr_file": "promql/promqltest/testdata/aggregators.test",
    "created_at": "2025-04-08T17:35:32+00:00",
    "commented_code": "{test=\"uneven samples\"} 2.8",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2033722526",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16393,
        "pr_file": "promql/promqltest/testdata/aggregators.test",
        "discussion_id": "2033722526",
        "commented_code": "@@ -455,13 +471,15 @@ eval instant at 1m quantile without(point)(0.8, data)\n \t{test=\"uneven samples\"} 2.8",
        "comment_created_at": "2025-04-08T17:35:32+00:00",
        "comment_author": "beorn7",
        "comment_body": "For better comparison with the tests below (where an info annotation appears), let's put an `expect no_info` here. (Remember that the old `eval` behavior was to always assert that there is no annotation whatsoever. The new behavior is more tolerant, but we still want to assert the absence of an annotations where we feel it makes sense.)",
        "pr_file_module": null
      }
    ]
  }
]