[
  {
    "discussion_id": "1890506721",
    "pr_number": 15577,
    "pr_file": "util/annotations/annotations.go",
    "created_at": "2024-12-18T16:18:12+00:00",
    "commented_code": "// Add adds an annotation (modeled as a Go error) in-place and returns the\n // modified Annotations for convenience.\n-func (a *Annotations) Add(err error) Annotations {\n+func (a *Annotations) Add(err annoErr) Annotations {",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "1890506721",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 15577,
        "pr_file": "util/annotations/annotations.go",
        "discussion_id": "1890506721",
        "commented_code": "@@ -38,14 +38,24 @@ func New() *Annotations {\n \n // Add adds an annotation (modeled as a Go error) in-place and returns the\n // modified Annotations for convenience.\n-func (a *Annotations) Add(err error) Annotations {\n+func (a *Annotations) Add(err annoErr) Annotations {",
        "comment_created_at": "2024-12-18T16:18:12+00:00",
        "comment_author": "beorn7",
        "comment_body": "Again, it feels weird to expose a non-exported type in an exported method. The additional `AddRaw` also creates a lot of friction for the caller. Can we leave the old API intact (just with the one `Add(error)` method) and do the right thing behind the scenes with type assertions and `error.As`? (Does the latter work with interfaces?)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2160522428",
    "pr_number": 16619,
    "pr_file": "template/template.go",
    "created_at": "2025-06-22T23:13:54+00:00",
    "commented_code": "}\n \t\t\t\treturn float64(time.Duration(v)) / float64(time.Second), nil\n \t\t\t},\n+\t\t\t\"parseGoDuration\": func(d string) (time.Duration, error) {\n+\t\t\t\tv, err := model.ParseDuration(d)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\treturn 0, err\n+\t\t\t\t}\n+\t\t\t\treturn time.Duration(v), nil\n+\t\t\t},",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2160522428",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16619,
        "pr_file": "template/template.go",
        "discussion_id": "2160522428",
        "commented_code": "@@ -276,6 +279,13 @@ func NewTemplateExpander(\n \t\t\t\t}\n \t\t\t\treturn float64(time.Duration(v)) / float64(time.Second), nil\n \t\t\t},\n+\t\t\t\"parseGoDuration\": func(d string) (time.Duration, error) {\n+\t\t\t\tv, err := model.ParseDuration(d)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\treturn 0, err\n+\t\t\t\t}\n+\t\t\t\treturn time.Duration(v), nil\n+\t\t\t},",
        "comment_created_at": "2025-06-22T23:13:54+00:00",
        "comment_author": "beorn7",
        "comment_body": "To stay more in line with the other functions (i.e. deal with the Prometheus types everywhere but offer a conversion functions for Go types), let's simply enable negative durations above in `parseDuration` and instead of `parseGoDuration`, offer a `toDuration` functions similar to the existing `toTime` function.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1683232247",
    "pr_number": 14478,
    "pr_file": "rules/manager.go",
    "created_at": "2024-07-18T17:24:34+00:00",
    "commented_code": "ConcurrentEvalsEnabled    bool\n \tRuleConcurrencyController RuleConcurrencyController\n \tRuleDependencyController  RuleDependencyController\n-\n-\tMetrics *Metrics\n+\tMetrics                   *Metrics\n+\tAlertStore                AlertStore\n+\tAlertStoreFunc            AlertStateStoreFunc",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "1683232247",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 14478,
        "pr_file": "rules/manager.go",
        "discussion_id": "1683232247",
        "commented_code": "@@ -121,8 +152,9 @@ type ManagerOptions struct {\n \tConcurrentEvalsEnabled    bool\n \tRuleConcurrencyController RuleConcurrencyController\n \tRuleDependencyController  RuleDependencyController\n-\n-\tMetrics *Metrics\n+\tMetrics                   *Metrics\n+\tAlertStore                AlertStore\n+\tAlertStoreFunc            AlertStateStoreFunc",
        "comment_created_at": "2024-07-18T17:24:34+00:00",
        "comment_author": "bboreham",
        "comment_body": "Why do we need two things here?  \r\nIt seems one is called to set alerts and one to get them, but that is oddly asymmetric.",
        "pr_file_module": null
      },
      {
        "comment_id": "1683797603",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 14478,
        "pr_file": "rules/manager.go",
        "discussion_id": "1683232247",
        "commented_code": "@@ -121,8 +152,9 @@ type ManagerOptions struct {\n \tConcurrentEvalsEnabled    bool\n \tRuleConcurrencyController RuleConcurrencyController\n \tRuleDependencyController  RuleDependencyController\n-\n-\tMetrics *Metrics\n+\tMetrics                   *Metrics\n+\tAlertStore                AlertStore\n+\tAlertStoreFunc            AlertStateStoreFunc",
        "comment_created_at": "2024-07-19T05:15:06+00:00",
        "comment_author": "mustafain117",
        "comment_body": "Good point, AlertStoreFunc can be removed. I will update. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2053540443",
    "pr_number": 16463,
    "pr_file": "promql/promqltest/test.go",
    "created_at": "2025-04-22T07:48:58+00:00",
    "commented_code": ")\n \n type TBRun interface {\n-\ttesting.TB\n+\ttestutil.T\n \tRun(string, func(*testing.T)) bool",
    "repo_full_name": "prometheus/prometheus",
    "discussion_comments": [
      {
        "comment_id": "2053540443",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16463,
        "pr_file": "promql/promqltest/test.go",
        "discussion_id": "2053540443",
        "commented_code": "@@ -61,16 +61,33 @@ const (\n )\n \n type TBRun interface {\n-\ttesting.TB\n+\ttestutil.T\n \tRun(string, func(*testing.T)) bool",
        "comment_created_at": "2025-04-22T07:48:58+00:00",
        "comment_author": "bwplotka",
        "comment_body": "If all our public interfaces use `testutil.T` interface, why not, internally replace `TBRun` with:\r\n\r\n```\r\ntype InternalT interface {\r\n      # TB so we don't need to cast to *testing.T for Run implementations.\r\n      testing.TB\r\n      # Custom Run allowing passing custom implementations e.g. to skip or enhance test execution.\r\n      Run(string, func(InternalT)) bool\r\n}\r\n```\r\n\r\n....then create a `internalT` type that implements conversion from testing.T/testutil.T (e.g. if it implements InternalT, use as-is, if not, wrap with our `internalT` type.\r\n\r\nThen use `InternalT` in all private fields/methods here for consistency.\r\n\r\nPros:\r\n* No confusion what interface to use\r\n* No confusion around T or B or TB  (it's only T in practice)\r\n* Not prone to mistake of forgetting to wrap T when `Run(string, func(*testing.T)) bool` is used.\r\n* `TBRun` is bit confusing name ðŸ™ƒ \r\n\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2053559507",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16463,
        "pr_file": "promql/promqltest/test.go",
        "discussion_id": "2053540443",
        "commented_code": "@@ -61,16 +61,33 @@ const (\n )\n \n type TBRun interface {\n-\ttesting.TB\n+\ttestutil.T\n \tRun(string, func(*testing.T)) bool",
        "comment_created_at": "2025-04-22T07:59:00+00:00",
        "comment_author": "MichaHoffmann",
        "comment_body": "We also have \"testutil.T\" in some parts; it feels like this kinda belongs there anyway; should we just make \"Run\" a method of \"testutil.T\" ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2053668518",
        "repo_full_name": "prometheus/prometheus",
        "pr_number": 16463,
        "pr_file": "promql/promqltest/test.go",
        "discussion_id": "2053540443",
        "commented_code": "@@ -61,16 +61,33 @@ const (\n )\n \n type TBRun interface {\n-\ttesting.TB\n+\ttestutil.T\n \tRun(string, func(*testing.T)) bool",
        "comment_created_at": "2025-04-22T08:56:29+00:00",
        "comment_author": "bwplotka",
        "comment_body": "I was thinking about it too, but then what `Run` signature would you use? `Run(string, func(*testing.T)) bool` is impractical IMO. `Run(string, func(testutil.T)) bool` is also kind of ðŸ’© because users would need to cast to T anyway.\r\n\r\nI would start with `Run(string, func(InternalT)) bool` in promql for now. If more packages will want to adopt it, we can propagate. ",
        "pr_file_module": null
      }
    ]
  }
]