[
  {
    "discussion_id": "2189893962",
    "pr_number": 8196,
    "pr_file": "docs/developer-guide/lighthouse.md",
    "created_at": "2025-07-07T12:15:24+00:00",
    "commented_code": "+# Extending Prowler Lighthouse\n+\n+This guide helps developers customize and extend Prowler Lighthouse by adding or modifying AI agents.\n+\n+## Understanding AI Agents\n+\n+AI agents combine Large Language Models (LLMs) with specialized tools that provide environmental context. These tools can include API calls, system command execution, or any function-wrapped capability.\n+\n+### Types of AI Agents\n+\n+AI agents fall into two main categories:\n+\n+- **Autonomous Agents**: Freely choose from available tools to complete tasks, adapting their approach based on context. They decide which tools to use and when.\n+- **Workflow Agents**: Follow structured paths with predefined logic. They execute specific tool sequences, though modern workflows can include conditional logic.\n+\n+**Note**: To learn more about AI agents, read [Anthropic's blog post on building effective agents](https://www.anthropic.com/engineering/building-effective-agents).\n+\n+### LLM Dependency\n+\n+The autonomous nature of agents depends on the underlying LLM. Autonomous agents using identical system prompts and tools but powered by different LLM providers might approach user queries differently. Agent with one LLM might solve a problem efficiently, while with another it might take a different route or fail entirely.\n+\n+After evaluating multiple LLM providers (OpenAI, Gemini, Claude, LLama) based on tool calling features and response accuracy, we recommend using the `gpt-4o` model.\n+\n+## Prowler Lighthouse Architecture\n+\n+The Prowler Lighthouse uses a multi-agent architecture orchestrated by the [Langgraph-Supervisor](https://www.npmjs.com/package/@langchain/langgraph-supervisor) library.\n+\n+### Architecture Components\n+\n+<img src=\"../../tutorials/img/lighthouse-architecture.png\" alt=\"Prowler Lighthouse architecture\">\n+\n+The Prowler Lighthouse integrates with the NextJS application:\n+\n+- The [Langgraph-Supervisor](https://www.npmjs.com/package/@langchain/langgraph-supervisor) library integrates directly with NextJS\n+- The system uses the authenticated user session to interact with the Prowler API server\n+- Agents only access data the current user is authorized to view\n+- Session management operates automatically, ensuring Role-Based Access Control (RBAC) is maintained\n+\n+## Available Prowler AI Agents\n+\n+The following specialized AI agents are available in Prowler:\n+\n+### Agent Overview\n+\n+- **provider_agent**: Fetches information about cloud providers connected to Prowler\n+- **user_info_agent**: Retrieves information about Prowler users\n+- **scans_agent**: Fetches information about Prowler scans\n+- **compliance_agent**: Retrieves compliance overviews across scans\n+- **findings_agent**: Fetches information about individual findings across scans\n+- **overview_agent**: Retrieves overview information (providers, findings by status and severity, etc.)\n+\n+## How to Add New Capabilities\n+\n+### Updating the Supervisor Prompt\n+\n+The supervisor agent controls system behavior, tone, and capabilities. You can find the supervisor prompt at: [https://github.com/prowler-cloud/prowler/blob/master/ui/lib/lighthouse/prompts.ts](https://github.com/prowler-cloud/prowler/blob/master/ui/lib/lighthouse/prompts.ts)\n+\n+#### Supervisor Prompt Modifications\n+\n+Modifying the supervisor prompt allows you to:\n+\n+- Change personality or response style\n+- Add new high-level capabilities\n+- Modify task delegation to specialized agents\n+- Set up guardrails (query types to answer or decline)\n+\n+**Note**: The supervisor agent should not have its own tools. This design keeps the system modular and maintainable.\n+\n+### How to Create New Specialized Agents\n+\n+The supervisor agent and all specialized agents are defined in the `route.ts` file. The supervisor agent uses [langgraph-supervisor](https://www.npmjs.com/package/@langchain/langgraph-supervisor), while other agents use the prebuilt [create-react-agent](https://langchain-ai.github.io/langgraphjs/how-tos/create-react-agent/).\n+\n+To add new capabilities or all Lighthouse to interact with other APIs, create additional specialized agents:\n+\n+1. First determine what the new agent would do. Create a detailed prompt defining the agent's purpose and capabilities. You can see an example from [here](https://github.com/prowler-cloud/prowler/blob/master/ui/lib/lighthouse/prompts.ts#L359-L385).\n+**Note:** Ensure that the new agent's capabilities don't collide with existing agents. For example, if there's already a *findings_agent* that talks to findings APIs don't create a new agent to do the same.\n+\n+2. Create necessary tools for the agents to access specific data or perform actions. A tool is a specialized function that extends the capabilities of LLM by allowing it to access external data or APIs. A tool is triggered by LLM based on the description of the tool and the user's query.\n+For example, the description of getScanTool is \"Fetches detailed information about a specific scan by its ID.\" If the description doesn't convey what the tool is capable of doing, LLM will not invoke the function. If the description of getScanTool was set to something random or not set at all, LLM will not answer queries like \"Give me the critical issues from the scan ID xxxxxxxxxxxxxxx\"",
    "repo_full_name": "prowler-cloud/prowler",
    "discussion_comments": [
      {
        "comment_id": "2189893962",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 8196,
        "pr_file": "docs/developer-guide/lighthouse.md",
        "discussion_id": "2189893962",
        "commented_code": "@@ -0,0 +1,128 @@\n+# Extending Prowler Lighthouse\n+\n+This guide helps developers customize and extend Prowler Lighthouse by adding or modifying AI agents.\n+\n+## Understanding AI Agents\n+\n+AI agents combine Large Language Models (LLMs) with specialized tools that provide environmental context. These tools can include API calls, system command execution, or any function-wrapped capability.\n+\n+### Types of AI Agents\n+\n+AI agents fall into two main categories:\n+\n+- **Autonomous Agents**: Freely choose from available tools to complete tasks, adapting their approach based on context. They decide which tools to use and when.\n+- **Workflow Agents**: Follow structured paths with predefined logic. They execute specific tool sequences, though modern workflows can include conditional logic.\n+\n+**Note**: To learn more about AI agents, read [Anthropic's blog post on building effective agents](https://www.anthropic.com/engineering/building-effective-agents).\n+\n+### LLM Dependency\n+\n+The autonomous nature of agents depends on the underlying LLM. Autonomous agents using identical system prompts and tools but powered by different LLM providers might approach user queries differently. Agent with one LLM might solve a problem efficiently, while with another it might take a different route or fail entirely.\n+\n+After evaluating multiple LLM providers (OpenAI, Gemini, Claude, LLama) based on tool calling features and response accuracy, we recommend using the `gpt-4o` model.\n+\n+## Prowler Lighthouse Architecture\n+\n+The Prowler Lighthouse uses a multi-agent architecture orchestrated by the [Langgraph-Supervisor](https://www.npmjs.com/package/@langchain/langgraph-supervisor) library.\n+\n+### Architecture Components\n+\n+<img src=\"../../tutorials/img/lighthouse-architecture.png\" alt=\"Prowler Lighthouse architecture\">\n+\n+The Prowler Lighthouse integrates with the NextJS application:\n+\n+- The [Langgraph-Supervisor](https://www.npmjs.com/package/@langchain/langgraph-supervisor) library integrates directly with NextJS\n+- The system uses the authenticated user session to interact with the Prowler API server\n+- Agents only access data the current user is authorized to view\n+- Session management operates automatically, ensuring Role-Based Access Control (RBAC) is maintained\n+\n+## Available Prowler AI Agents\n+\n+The following specialized AI agents are available in Prowler:\n+\n+### Agent Overview\n+\n+- **provider_agent**: Fetches information about cloud providers connected to Prowler\n+- **user_info_agent**: Retrieves information about Prowler users\n+- **scans_agent**: Fetches information about Prowler scans\n+- **compliance_agent**: Retrieves compliance overviews across scans\n+- **findings_agent**: Fetches information about individual findings across scans\n+- **overview_agent**: Retrieves overview information (providers, findings by status and severity, etc.)\n+\n+## How to Add New Capabilities\n+\n+### Updating the Supervisor Prompt\n+\n+The supervisor agent controls system behavior, tone, and capabilities. You can find the supervisor prompt at: [https://github.com/prowler-cloud/prowler/blob/master/ui/lib/lighthouse/prompts.ts](https://github.com/prowler-cloud/prowler/blob/master/ui/lib/lighthouse/prompts.ts)\n+\n+#### Supervisor Prompt Modifications\n+\n+Modifying the supervisor prompt allows you to:\n+\n+- Change personality or response style\n+- Add new high-level capabilities\n+- Modify task delegation to specialized agents\n+- Set up guardrails (query types to answer or decline)\n+\n+**Note**: The supervisor agent should not have its own tools. This design keeps the system modular and maintainable.\n+\n+### How to Create New Specialized Agents\n+\n+The supervisor agent and all specialized agents are defined in the `route.ts` file. The supervisor agent uses [langgraph-supervisor](https://www.npmjs.com/package/@langchain/langgraph-supervisor), while other agents use the prebuilt [create-react-agent](https://langchain-ai.github.io/langgraphjs/how-tos/create-react-agent/).\n+\n+To add new capabilities or all Lighthouse to interact with other APIs, create additional specialized agents:\n+\n+1. First determine what the new agent would do. Create a detailed prompt defining the agent's purpose and capabilities. You can see an example from [here](https://github.com/prowler-cloud/prowler/blob/master/ui/lib/lighthouse/prompts.ts#L359-L385).\n+**Note:** Ensure that the new agent's capabilities don't collide with existing agents. For example, if there's already a *findings_agent* that talks to findings APIs don't create a new agent to do the same.\n+\n+2. Create necessary tools for the agents to access specific data or perform actions. A tool is a specialized function that extends the capabilities of LLM by allowing it to access external data or APIs. A tool is triggered by LLM based on the description of the tool and the user's query.\n+For example, the description of getScanTool is \"Fetches detailed information about a specific scan by its ID.\" If the description doesn't convey what the tool is capable of doing, LLM will not invoke the function. If the description of getScanTool was set to something random or not set at all, LLM will not answer queries like \"Give me the critical issues from the scan ID xxxxxxxxxxxxxxx\"",
        "comment_created_at": "2025-07-07T12:15:24+00:00",
        "comment_author": "jfagoagas",
        "comment_body": "```suggestion\nFor example, the description of `getScanTool` is \"Fetches detailed information about a specific scan by its ID.\" If the description doesn't convey what the tool is capable of doing, LLM will not invoke the function. If the description of `getScanTool` was set to something random or not set at all, LLM will not answer queries like \"Give me the critical issues from the scan ID xxxxxxxxxxxxxxx\"\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2189900168",
    "pr_number": 8196,
    "pr_file": "docs/tutorials/prowler-app-lighthouse.md",
    "created_at": "2025-07-07T12:17:53+00:00",
    "commented_code": "+# Prowler Lighthouse\n+\n+Prowler Lighthouse is an AI Cloud Security Analyst chatbot that helps you understand, prioritize, and remediate security findings in your cloud environments. It's designed to provide security expertise for teams without dedicated resources, acting as your 24/7 virtual cloud security analyst.\n+\n+<img src=\"../img/lighthouse-intro.png\" alt=\"Prowler Lighthouse\">\n+\n+## How It Works\n+\n+Prowler Lighthouse uses OpenAI's language models and integrates with your Prowler security findings data.\n+\n+Here's what's happening behind the scenes:\n+\n+- The system uses a multi-agent architecture built with LanggraphJS for LLM logic and Vercel AI SDK UI for frontend chatbot.\n+- It uses a \"supervisor\" architecture that interacts with different agents for specialized tasks. For example, findings_agent can analyze detected security findings, while overview_agent provides a summary of connected cloud accounts.",
    "repo_full_name": "prowler-cloud/prowler",
    "discussion_comments": [
      {
        "comment_id": "2189900168",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 8196,
        "pr_file": "docs/tutorials/prowler-app-lighthouse.md",
        "discussion_id": "2189900168",
        "commented_code": "@@ -0,0 +1,200 @@\n+# Prowler Lighthouse\n+\n+Prowler Lighthouse is an AI Cloud Security Analyst chatbot that helps you understand, prioritize, and remediate security findings in your cloud environments. It's designed to provide security expertise for teams without dedicated resources, acting as your 24/7 virtual cloud security analyst.\n+\n+<img src=\"../img/lighthouse-intro.png\" alt=\"Prowler Lighthouse\">\n+\n+## How It Works\n+\n+Prowler Lighthouse uses OpenAI's language models and integrates with your Prowler security findings data.\n+\n+Here's what's happening behind the scenes:\n+\n+- The system uses a multi-agent architecture built with LanggraphJS for LLM logic and Vercel AI SDK UI for frontend chatbot.\n+- It uses a \"supervisor\" architecture that interacts with different agents for specialized tasks. For example, findings_agent can analyze detected security findings, while overview_agent provides a summary of connected cloud accounts.",
        "comment_created_at": "2025-07-07T12:17:53+00:00",
        "comment_author": "jfagoagas",
        "comment_body": "```suggestion\n- It uses a \"supervisor\" architecture that interacts with different agents for specialized tasks. For example, `findings_agent` can analyze detected security findings, while `overview_agent` provides a summary of connected cloud accounts.\n```",
        "pr_file_module": null
      }
    ]
  }
]