[
  {
    "discussion_id": "2192230809",
    "pr_number": 8214,
    "pr_file": "api/src/backend/tasks/tests/test_tasks.py",
    "created_at": "2025-07-08T11:25:04+00:00",
    "commented_code": "with patch(\"tasks.tasks.ScanSummary.objects.filter\") as mock_filter:\n             mock_filter.return_value.exists.return_value = False\n \n-            result = generate_outputs(\n+            result = generate_outputs_task(",
    "repo_full_name": "prowler-cloud/prowler",
    "discussion_comments": [
      {
        "comment_id": "2192230809",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 8214,
        "pr_file": "api/src/backend/tasks/tests/test_tasks.py",
        "discussion_id": "2192230809",
        "commented_code": "@@ -17,7 +18,7 @@ def test_no_findings_returns_early(self):\n         with patch(\"tasks.tasks.ScanSummary.objects.filter\") as mock_filter:\n             mock_filter.return_value.exists.return_value = False\n \n-            result = generate_outputs(\n+            result = generate_outputs_task(",
        "comment_created_at": "2025-07-08T11:25:04+00:00",
        "comment_author": "jfagoagas",
        "comment_body": "Why this change? Just curious.",
        "pr_file_module": null
      },
      {
        "comment_id": "2192233491",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 8214,
        "pr_file": "api/src/backend/tasks/tests/test_tasks.py",
        "discussion_id": "2192230809",
        "commented_code": "@@ -17,7 +18,7 @@ def test_no_findings_returns_early(self):\n         with patch(\"tasks.tasks.ScanSummary.objects.filter\") as mock_filter:\n             mock_filter.return_value.exists.return_value = False\n \n-            result = generate_outputs(\n+            result = generate_outputs_task(",
        "comment_created_at": "2025-07-08T11:26:35+00:00",
        "comment_author": "vicferpoy",
        "comment_body": "Consistency. Every task had that suffix, except this one.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2163714243",
    "pr_number": 8089,
    "pr_file": "api/src/backend/api/v1/views.py",
    "created_at": "2025-06-24T11:31:39+00:00",
    "commented_code": "return response\n \n         extra = social_account.extra_data\n-        user.first_name = extra.get(\"firstName\", [\"\"])[0]\n-        user.last_name = extra.get(\"lastName\", [\"\"])[0]\n-        user.company_name = extra.get(\"organization\", [\"\"])[0]\n+        user.first_name = (\n+            extra.get(\"firstName\", [\"\"])[0] if extra.get(\"firstName\") else \"\"\n+        )\n+        user.last_name = extra.get(\"lastName\", [\"\"])[0] if extra.get(\"lastName\") else \"\"\n+        user.company_name = (\n+            extra.get(\"organization\", [\"\"])[0] if extra.get(\"organization\") else \"\"\n+        )\n         user.name = f\"{user.first_name} {user.last_name}\".strip()\n+        if user.name == \"\":\n+            user.name = \"NoName\"",
    "repo_full_name": "prowler-cloud/prowler",
    "discussion_comments": [
      {
        "comment_id": "2163714243",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 8089,
        "pr_file": "api/src/backend/api/v1/views.py",
        "discussion_id": "2163714243",
        "commented_code": "@@ -509,10 +509,16 @@ def dispatch(self, request, organization_slug):\n             return response\n \n         extra = social_account.extra_data\n-        user.first_name = extra.get(\"firstName\", [\"\"])[0]\n-        user.last_name = extra.get(\"lastName\", [\"\"])[0]\n-        user.company_name = extra.get(\"organization\", [\"\"])[0]\n+        user.first_name = (\n+            extra.get(\"firstName\", [\"\"])[0] if extra.get(\"firstName\") else \"\"\n+        )\n+        user.last_name = extra.get(\"lastName\", [\"\"])[0] if extra.get(\"lastName\") else \"\"\n+        user.company_name = (\n+            extra.get(\"organization\", [\"\"])[0] if extra.get(\"organization\") else \"\"\n+        )\n         user.name = f\"{user.first_name} {user.last_name}\".strip()\n+        if user.name == \"\":\n+            user.name = \"NoName\"",
        "comment_created_at": "2025-06-24T11:31:39+00:00",
        "comment_author": "vicferpoy",
        "comment_body": "Does `NoName` come from any convention or something?",
        "pr_file_module": null
      },
      {
        "comment_id": "2164043050",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 8089,
        "pr_file": "api/src/backend/api/v1/views.py",
        "discussion_id": "2163714243",
        "commented_code": "@@ -509,10 +509,16 @@ def dispatch(self, request, organization_slug):\n             return response\n \n         extra = social_account.extra_data\n-        user.first_name = extra.get(\"firstName\", [\"\"])[0]\n-        user.last_name = extra.get(\"lastName\", [\"\"])[0]\n-        user.company_name = extra.get(\"organization\", [\"\"])[0]\n+        user.first_name = (\n+            extra.get(\"firstName\", [\"\"])[0] if extra.get(\"firstName\") else \"\"\n+        )\n+        user.last_name = extra.get(\"lastName\", [\"\"])[0] if extra.get(\"lastName\") else \"\"\n+        user.company_name = (\n+            extra.get(\"organization\", [\"\"])[0] if extra.get(\"organization\") else \"\"\n+        )\n         user.name = f\"{user.first_name} {user.last_name}\".strip()\n+        if user.name == \"\":\n+            user.name = \"NoName\"",
        "comment_created_at": "2025-06-24T13:41:42+00:00",
        "comment_author": "AdriiiPRodri",
        "comment_body": "No, we need a value because the name is mandatory. We can define another value",
        "pr_file_module": null
      },
      {
        "comment_id": "2164047053",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 8089,
        "pr_file": "api/src/backend/api/v1/views.py",
        "discussion_id": "2163714243",
        "commented_code": "@@ -509,10 +509,16 @@ def dispatch(self, request, organization_slug):\n             return response\n \n         extra = social_account.extra_data\n-        user.first_name = extra.get(\"firstName\", [\"\"])[0]\n-        user.last_name = extra.get(\"lastName\", [\"\"])[0]\n-        user.company_name = extra.get(\"organization\", [\"\"])[0]\n+        user.first_name = (\n+            extra.get(\"firstName\", [\"\"])[0] if extra.get(\"firstName\") else \"\"\n+        )\n+        user.last_name = extra.get(\"lastName\", [\"\"])[0] if extra.get(\"lastName\") else \"\"\n+        user.company_name = (\n+            extra.get(\"organization\", [\"\"])[0] if extra.get(\"organization\") else \"\"\n+        )\n         user.name = f\"{user.first_name} {user.last_name}\".strip()\n+        if user.name == \"\":\n+            user.name = \"NoName\"",
        "comment_created_at": "2025-06-24T13:43:25+00:00",
        "comment_author": "vicferpoy",
        "comment_body": "Use `N/A` if possible then. For consistency with other wildcards.",
        "pr_file_module": null
      },
      {
        "comment_id": "2164048560",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 8089,
        "pr_file": "api/src/backend/api/v1/views.py",
        "discussion_id": "2163714243",
        "commented_code": "@@ -509,10 +509,16 @@ def dispatch(self, request, organization_slug):\n             return response\n \n         extra = social_account.extra_data\n-        user.first_name = extra.get(\"firstName\", [\"\"])[0]\n-        user.last_name = extra.get(\"lastName\", [\"\"])[0]\n-        user.company_name = extra.get(\"organization\", [\"\"])[0]\n+        user.first_name = (\n+            extra.get(\"firstName\", [\"\"])[0] if extra.get(\"firstName\") else \"\"\n+        )\n+        user.last_name = extra.get(\"lastName\", [\"\"])[0] if extra.get(\"lastName\") else \"\"\n+        user.company_name = (\n+            extra.get(\"organization\", [\"\"])[0] if extra.get(\"organization\") else \"\"\n+        )\n         user.name = f\"{user.first_name} {user.last_name}\".strip()\n+        if user.name == \"\":\n+            user.name = \"NoName\"",
        "comment_created_at": "2025-06-24T13:44:08+00:00",
        "comment_author": "AdriiiPRodri",
        "comment_body": "Ok, we can change it",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1998031524",
    "pr_number": 7233,
    "pr_file": "prowler/lib/outputs/jira/jira.py",
    "created_at": "2025-03-17T06:35:55+00:00",
    "commented_code": "_client_id: str = None\n     _client_secret: str = None\n     _access_token: str = None\n+    _client_mail: str = None\n+    _api_token: str = None",
    "repo_full_name": "prowler-cloud/prowler",
    "discussion_comments": [
      {
        "comment_id": "1998031524",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 7233,
        "pr_file": "prowler/lib/outputs/jira/jira.py",
        "discussion_id": "1998031524",
        "commented_code": "@@ -98,6 +100,10 @@ class Jira:\n     _client_id: str = None\n     _client_secret: str = None\n     _access_token: str = None\n+    _client_mail: str = None\n+    _api_token: str = None",
        "comment_created_at": "2025-03-17T06:35:55+00:00",
        "comment_author": "jfagoagas",
        "comment_body": "For me `user_mail`/`mail` and `token` are more appropriate here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1998419487",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 7233,
        "pr_file": "prowler/lib/outputs/jira/jira.py",
        "discussion_id": "1998031524",
        "commented_code": "@@ -98,6 +100,10 @@ class Jira:\n     _client_id: str = None\n     _client_secret: str = None\n     _access_token: str = None\n+    _client_mail: str = None\n+    _api_token: str = None",
        "comment_created_at": "2025-03-17T10:23:40+00:00",
        "comment_author": "pedrooot",
        "comment_body": "I changed it from `client_mail` -> `user_mail` but for the token, I like `api_token` since we are already using token var in other parts of the code and `api_token` sounds more distinctive for me ",
        "pr_file_module": null
      },
      {
        "comment_id": "1998492193",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 7233,
        "pr_file": "prowler/lib/outputs/jira/jira.py",
        "discussion_id": "1998031524",
        "commented_code": "@@ -98,6 +100,10 @@ class Jira:\n     _client_id: str = None\n     _client_secret: str = None\n     _access_token: str = None\n+    _client_mail: str = None\n+    _api_token: str = None",
        "comment_created_at": "2025-03-17T11:00:17+00:00",
        "comment_author": "jfagoagas",
        "comment_body": "Thanks for the clarification!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2107398206",
    "pr_number": 7822,
    "pr_file": "api/src/backend/api/models.py",
    "created_at": "2025-05-26T13:48:58+00:00",
    "commented_code": "]\n \n \n+class SAMLDomainIndex(models.Model):\n+    \"\"\"\n+    Public index of SAML domains. No RLS. Used for fast lookup in SAML login flow.\n+    \"\"\"\n+\n+    email_domain = models.CharField(max_length=254, unique=True)\n+    tenant = models.ForeignKey(\"Tenant\", on_delete=models.CASCADE)\n+\n+    class Meta:\n+        db_table = \"saml_domain_index\"\n+\n+        constraints = [\n+            models.UniqueConstraint(\n+                fields=(\"email_domain\", \"tenant\"),\n+                name=\"unique_resources_by_email_domain\",\n+            ),\n+            BaseSecurityConstraint(\n+                name=\"statements_on_%(class)s\",\n+                statements=[\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\"],\n+            ),\n+        ]\n+\n+\n+class SAMLConfigurations(RowLevelSecurityProtectedModel):",
    "repo_full_name": "prowler-cloud/prowler",
    "discussion_comments": [
      {
        "comment_id": "2107398206",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 7822,
        "pr_file": "api/src/backend/api/models.py",
        "discussion_id": "2107398206",
        "commented_code": "@@ -1284,6 +1288,219 @@ class Meta:\n         ]\n \n \n+class SAMLDomainIndex(models.Model):\n+    \"\"\"\n+    Public index of SAML domains. No RLS. Used for fast lookup in SAML login flow.\n+    \"\"\"\n+\n+    email_domain = models.CharField(max_length=254, unique=True)\n+    tenant = models.ForeignKey(\"Tenant\", on_delete=models.CASCADE)\n+\n+    class Meta:\n+        db_table = \"saml_domain_index\"\n+\n+        constraints = [\n+            models.UniqueConstraint(\n+                fields=(\"email_domain\", \"tenant\"),\n+                name=\"unique_resources_by_email_domain\",\n+            ),\n+            BaseSecurityConstraint(\n+                name=\"statements_on_%(class)s\",\n+                statements=[\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\"],\n+            ),\n+        ]\n+\n+\n+class SAMLConfigurations(RowLevelSecurityProtectedModel):",
        "comment_created_at": "2025-05-26T13:48:58+00:00",
        "comment_author": "vicferpoy",
        "comment_body": "```suggestion\r\nclass SAMLConfiguration(RowLevelSecurityProtectedModel):\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2107442519",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 7822,
        "pr_file": "api/src/backend/api/models.py",
        "discussion_id": "2107398206",
        "commented_code": "@@ -1284,6 +1288,219 @@ class Meta:\n         ]\n \n \n+class SAMLDomainIndex(models.Model):\n+    \"\"\"\n+    Public index of SAML domains. No RLS. Used for fast lookup in SAML login flow.\n+    \"\"\"\n+\n+    email_domain = models.CharField(max_length=254, unique=True)\n+    tenant = models.ForeignKey(\"Tenant\", on_delete=models.CASCADE)\n+\n+    class Meta:\n+        db_table = \"saml_domain_index\"\n+\n+        constraints = [\n+            models.UniqueConstraint(\n+                fields=(\"email_domain\", \"tenant\"),\n+                name=\"unique_resources_by_email_domain\",\n+            ),\n+            BaseSecurityConstraint(\n+                name=\"statements_on_%(class)s\",\n+                statements=[\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\"],\n+            ),\n+        ]\n+\n+\n+class SAMLConfigurations(RowLevelSecurityProtectedModel):",
        "comment_created_at": "2025-05-26T14:15:19+00:00",
        "comment_author": "vicferpoy",
        "comment_body": "https://www.django-antipatterns.com/antipattern/plural-model-class-names.html",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1973386537",
    "pr_number": 7057,
    "pr_file": "prowler/providers/microsoft365/services/sharepoint/sharepoint_service.py",
    "created_at": "2025-02-27T11:20:14+00:00",
    "commented_code": "+from asyncio import gather, get_event_loop\n+from typing import List, Optional\n+\n+from msgraph.generated.models.o_data_errors.o_data_error import ODataError\n+from pydantic import BaseModel\n+\n+from prowler.lib.logger import logger\n+from prowler.providers.microsoft365.lib.service.service import Microsoft365Service\n+from prowler.providers.microsoft365.microsoft365_provider import Microsoft365Provider\n+\n+\n+class SharePoint(Microsoft365Service):\n+    def __init__(self, provider: Microsoft365Provider):\n+        super().__init__(provider)\n+        loop = get_event_loop()\n+        self.tenant_domain = provider.identity.tenant_domain\n+        attributes = loop.run_until_complete(\n+            gather(\n+                self._get_settings(),\n+            )\n+        )\n+        self.settings = attributes[0]\n+\n+    async def _get_settings(self):\n+        logger.info(\"Microsoft365 - Getting SharePoint global settings...\")\n+        settings = None\n+        try:\n+            global_settings = await self.client.admin.sharepoint.settings.get()\n+\n+            settings = SharePointSettings(\n+                sharingCapability=(\n+                    str(global_settings.sharing_capability).split(\".\")[-1]\n+                    if global_settings.sharing_capability\n+                    else None\n+                ),\n+                sharingAllowedDomainList=global_settings.sharing_allowed_domain_list,\n+                sharingBlockedDomainList=global_settings.sharing_blocked_domain_list,\n+                sharingDomainRestrictionMode=global_settings.sharing_domain_restriction_mode,\n+                modernAuthentication=global_settings.is_legacy_auth_protocols_enabled,",
    "repo_full_name": "prowler-cloud/prowler",
    "discussion_comments": [
      {
        "comment_id": "1973386537",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 7057,
        "pr_file": "prowler/providers/microsoft365/services/sharepoint/sharepoint_service.py",
        "discussion_id": "1973386537",
        "commented_code": "@@ -0,0 +1,62 @@\n+from asyncio import gather, get_event_loop\n+from typing import List, Optional\n+\n+from msgraph.generated.models.o_data_errors.o_data_error import ODataError\n+from pydantic import BaseModel\n+\n+from prowler.lib.logger import logger\n+from prowler.providers.microsoft365.lib.service.service import Microsoft365Service\n+from prowler.providers.microsoft365.microsoft365_provider import Microsoft365Provider\n+\n+\n+class SharePoint(Microsoft365Service):\n+    def __init__(self, provider: Microsoft365Provider):\n+        super().__init__(provider)\n+        loop = get_event_loop()\n+        self.tenant_domain = provider.identity.tenant_domain\n+        attributes = loop.run_until_complete(\n+            gather(\n+                self._get_settings(),\n+            )\n+        )\n+        self.settings = attributes[0]\n+\n+    async def _get_settings(self):\n+        logger.info(\"Microsoft365 - Getting SharePoint global settings...\")\n+        settings = None\n+        try:\n+            global_settings = await self.client.admin.sharepoint.settings.get()\n+\n+            settings = SharePointSettings(\n+                sharingCapability=(\n+                    str(global_settings.sharing_capability).split(\".\")[-1]\n+                    if global_settings.sharing_capability\n+                    else None\n+                ),\n+                sharingAllowedDomainList=global_settings.sharing_allowed_domain_list,\n+                sharingBlockedDomainList=global_settings.sharing_blocked_domain_list,\n+                sharingDomainRestrictionMode=global_settings.sharing_domain_restriction_mode,\n+                modernAuthentication=global_settings.is_legacy_auth_protocols_enabled,",
        "comment_created_at": "2025-02-27T11:20:14+00:00",
        "comment_author": "andoniaf",
        "comment_body": "If legacy auth protocols are enabled, modernAuth shouldn't be false instead?",
        "pr_file_module": null
      },
      {
        "comment_id": "1973410497",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 7057,
        "pr_file": "prowler/providers/microsoft365/services/sharepoint/sharepoint_service.py",
        "discussion_id": "1973386537",
        "commented_code": "@@ -0,0 +1,62 @@\n+from asyncio import gather, get_event_loop\n+from typing import List, Optional\n+\n+from msgraph.generated.models.o_data_errors.o_data_error import ODataError\n+from pydantic import BaseModel\n+\n+from prowler.lib.logger import logger\n+from prowler.providers.microsoft365.lib.service.service import Microsoft365Service\n+from prowler.providers.microsoft365.microsoft365_provider import Microsoft365Provider\n+\n+\n+class SharePoint(Microsoft365Service):\n+    def __init__(self, provider: Microsoft365Provider):\n+        super().__init__(provider)\n+        loop = get_event_loop()\n+        self.tenant_domain = provider.identity.tenant_domain\n+        attributes = loop.run_until_complete(\n+            gather(\n+                self._get_settings(),\n+            )\n+        )\n+        self.settings = attributes[0]\n+\n+    async def _get_settings(self):\n+        logger.info(\"Microsoft365 - Getting SharePoint global settings...\")\n+        settings = None\n+        try:\n+            global_settings = await self.client.admin.sharepoint.settings.get()\n+\n+            settings = SharePointSettings(\n+                sharingCapability=(\n+                    str(global_settings.sharing_capability).split(\".\")[-1]\n+                    if global_settings.sharing_capability\n+                    else None\n+                ),\n+                sharingAllowedDomainList=global_settings.sharing_allowed_domain_list,\n+                sharingBlockedDomainList=global_settings.sharing_blocked_domain_list,\n+                sharingDomainRestrictionMode=global_settings.sharing_domain_restriction_mode,\n+                modernAuthentication=global_settings.is_legacy_auth_protocols_enabled,",
        "comment_created_at": "2025-02-27T11:38:18+00:00",
        "comment_author": "MrCloudSec",
        "comment_body": "Good catch! I think the naming is confusing.",
        "pr_file_module": null
      },
      {
        "comment_id": "1973411160",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 7057,
        "pr_file": "prowler/providers/microsoft365/services/sharepoint/sharepoint_service.py",
        "discussion_id": "1973386537",
        "commented_code": "@@ -0,0 +1,62 @@\n+from asyncio import gather, get_event_loop\n+from typing import List, Optional\n+\n+from msgraph.generated.models.o_data_errors.o_data_error import ODataError\n+from pydantic import BaseModel\n+\n+from prowler.lib.logger import logger\n+from prowler.providers.microsoft365.lib.service.service import Microsoft365Service\n+from prowler.providers.microsoft365.microsoft365_provider import Microsoft365Provider\n+\n+\n+class SharePoint(Microsoft365Service):\n+    def __init__(self, provider: Microsoft365Provider):\n+        super().__init__(provider)\n+        loop = get_event_loop()\n+        self.tenant_domain = provider.identity.tenant_domain\n+        attributes = loop.run_until_complete(\n+            gather(\n+                self._get_settings(),\n+            )\n+        )\n+        self.settings = attributes[0]\n+\n+    async def _get_settings(self):\n+        logger.info(\"Microsoft365 - Getting SharePoint global settings...\")\n+        settings = None\n+        try:\n+            global_settings = await self.client.admin.sharepoint.settings.get()\n+\n+            settings = SharePointSettings(\n+                sharingCapability=(\n+                    str(global_settings.sharing_capability).split(\".\")[-1]\n+                    if global_settings.sharing_capability\n+                    else None\n+                ),\n+                sharingAllowedDomainList=global_settings.sharing_allowed_domain_list,\n+                sharingBlockedDomainList=global_settings.sharing_blocked_domain_list,\n+                sharingDomainRestrictionMode=global_settings.sharing_domain_restriction_mode,\n+                modernAuthentication=global_settings.is_legacy_auth_protocols_enabled,",
        "comment_created_at": "2025-02-27T11:38:45+00:00",
        "comment_author": "MrCloudSec",
        "comment_body": "It should be `basicAuthentication`",
        "pr_file_module": null
      },
      {
        "comment_id": "1973429270",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 7057,
        "pr_file": "prowler/providers/microsoft365/services/sharepoint/sharepoint_service.py",
        "discussion_id": "1973386537",
        "commented_code": "@@ -0,0 +1,62 @@\n+from asyncio import gather, get_event_loop\n+from typing import List, Optional\n+\n+from msgraph.generated.models.o_data_errors.o_data_error import ODataError\n+from pydantic import BaseModel\n+\n+from prowler.lib.logger import logger\n+from prowler.providers.microsoft365.lib.service.service import Microsoft365Service\n+from prowler.providers.microsoft365.microsoft365_provider import Microsoft365Provider\n+\n+\n+class SharePoint(Microsoft365Service):\n+    def __init__(self, provider: Microsoft365Provider):\n+        super().__init__(provider)\n+        loop = get_event_loop()\n+        self.tenant_domain = provider.identity.tenant_domain\n+        attributes = loop.run_until_complete(\n+            gather(\n+                self._get_settings(),\n+            )\n+        )\n+        self.settings = attributes[0]\n+\n+    async def _get_settings(self):\n+        logger.info(\"Microsoft365 - Getting SharePoint global settings...\")\n+        settings = None\n+        try:\n+            global_settings = await self.client.admin.sharepoint.settings.get()\n+\n+            settings = SharePointSettings(\n+                sharingCapability=(\n+                    str(global_settings.sharing_capability).split(\".\")[-1]\n+                    if global_settings.sharing_capability\n+                    else None\n+                ),\n+                sharingAllowedDomainList=global_settings.sharing_allowed_domain_list,\n+                sharingBlockedDomainList=global_settings.sharing_blocked_domain_list,\n+                sharingDomainRestrictionMode=global_settings.sharing_domain_restriction_mode,\n+                modernAuthentication=global_settings.is_legacy_auth_protocols_enabled,",
        "comment_created_at": "2025-02-27T11:52:02+00:00",
        "comment_author": "andoniaf",
        "comment_body": "I'm not 100% sure legacy auth includes only basicAuth, maybe we could just call it `LegacyAuth` or `LegacyAuthentication`. To match [their docs](https://learn.microsoft.com/en-us/graph/api/sharepointsettings-update?view=graph-rest-1.0&tabs=http) description.",
        "pr_file_module": null
      },
      {
        "comment_id": "1973624897",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 7057,
        "pr_file": "prowler/providers/microsoft365/services/sharepoint/sharepoint_service.py",
        "discussion_id": "1973386537",
        "commented_code": "@@ -0,0 +1,62 @@\n+from asyncio import gather, get_event_loop\n+from typing import List, Optional\n+\n+from msgraph.generated.models.o_data_errors.o_data_error import ODataError\n+from pydantic import BaseModel\n+\n+from prowler.lib.logger import logger\n+from prowler.providers.microsoft365.lib.service.service import Microsoft365Service\n+from prowler.providers.microsoft365.microsoft365_provider import Microsoft365Provider\n+\n+\n+class SharePoint(Microsoft365Service):\n+    def __init__(self, provider: Microsoft365Provider):\n+        super().__init__(provider)\n+        loop = get_event_loop()\n+        self.tenant_domain = provider.identity.tenant_domain\n+        attributes = loop.run_until_complete(\n+            gather(\n+                self._get_settings(),\n+            )\n+        )\n+        self.settings = attributes[0]\n+\n+    async def _get_settings(self):\n+        logger.info(\"Microsoft365 - Getting SharePoint global settings...\")\n+        settings = None\n+        try:\n+            global_settings = await self.client.admin.sharepoint.settings.get()\n+\n+            settings = SharePointSettings(\n+                sharingCapability=(\n+                    str(global_settings.sharing_capability).split(\".\")[-1]\n+                    if global_settings.sharing_capability\n+                    else None\n+                ),\n+                sharingAllowedDomainList=global_settings.sharing_allowed_domain_list,\n+                sharingBlockedDomainList=global_settings.sharing_blocked_domain_list,\n+                sharingDomainRestrictionMode=global_settings.sharing_domain_restriction_mode,\n+                modernAuthentication=global_settings.is_legacy_auth_protocols_enabled,",
        "comment_created_at": "2025-02-27T13:53:01+00:00",
        "comment_author": "danibarranqueroo",
        "comment_body": "The naming is a bit confusing, that's true.\r\n\r\nWhen the parameter from the API `is_legacy_auth_protocols_enabled` returns True means that SharePoint allows access to applications that do NOT use Modern Authentication (this means that a True should be a FAIL because applications using Basic Auth are allowed).\r\n\r\nWe can just call it LegacyAuth as @andoniaf suggested and the logic of the check will be the same as now (also I suggest to add what I said above in a comment because it's very easy to confuse it)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1961568471",
    "pr_number": 6878,
    "pr_file": "api/src/backend/tasks/tasks.py",
    "created_at": "2025-02-19T12:12:22+00:00",
    "commented_code": "@shared_task(name=\"tenant-deletion\")\n def delete_tenant_task(tenant_id: str):\n     return delete_tenant(pk=tenant_id)\n+\n+\n+def batched(iterable, batch_size):\n+    \"\"\"\n+    Yield successive batches from an iterable.\n+\n+    Args:\n+        iterable: An iterable source of items.\n+        batch_size (int): The number of items per batch.\n+\n+    Yields:\n+        tuple: A pair (batch, is_last_batch) where:\n+            - batch (list): A list of items (with length equal to batch_size,\n+              except possibly for the last batch).\n+            - is_last_batch (bool): True if this is the final batch, False otherwise.\n+    \"\"\"\n+    batch = []\n+    for item in iterable:\n+        batch.append(item)\n+        if len(batch) == batch_size:\n+            yield batch, False\n+            batch = []\n+\n+    yield batch, True\n+\n+\n+@shared_task(base=RLSTask, name=\"scan-output\", queue=\"scans\")",
    "repo_full_name": "prowler-cloud/prowler",
    "discussion_comments": [
      {
        "comment_id": "1961568471",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 6878,
        "pr_file": "api/src/backend/tasks/tasks.py",
        "discussion_id": "1961568471",
        "commented_code": "@@ -152,3 +170,125 @@ def perform_scan_summary_task(tenant_id: str, scan_id: str):\n @shared_task(name=\"tenant-deletion\")\n def delete_tenant_task(tenant_id: str):\n     return delete_tenant(pk=tenant_id)\n+\n+\n+def batched(iterable, batch_size):\n+    \"\"\"\n+    Yield successive batches from an iterable.\n+\n+    Args:\n+        iterable: An iterable source of items.\n+        batch_size (int): The number of items per batch.\n+\n+    Yields:\n+        tuple: A pair (batch, is_last_batch) where:\n+            - batch (list): A list of items (with length equal to batch_size,\n+              except possibly for the last batch).\n+            - is_last_batch (bool): True if this is the final batch, False otherwise.\n+    \"\"\"\n+    batch = []\n+    for item in iterable:\n+        batch.append(item)\n+        if len(batch) == batch_size:\n+            yield batch, False\n+            batch = []\n+\n+    yield batch, True\n+\n+\n+@shared_task(base=RLSTask, name=\"scan-output\", queue=\"scans\")",
        "comment_created_at": "2025-02-19T12:12:22+00:00",
        "comment_author": "vicferpoy",
        "comment_body": "We talk about `reports` everywhere. Since it is a `RLSTask`, it means this task can be checked by the user using the `/tasks` endpoints. Shouldn't we call it `scan-report`?\r\n\r\nAlso, the queue concerns me. Regarding Prowler Cloud, we do not have active workers for the `scans` queue. This means that we will have to adapt more logic to deploy another ECS for this kind of tasks.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1888450729",
    "pr_number": 6226,
    "pr_file": "api/src/backend/api/base_views.py",
    "created_at": "2024-12-17T12:40:22+00:00",
    "commented_code": "ordering_fields = \"__all__\"\n     ordering = [\"id\"]\n \n+    def initial(self, request, *args, **kwargs):\n+        \"\"\"\n+        Sets required_permissions before permissions are checked.\n+        \"\"\"\n+        self.get_required_permissions()\n+        super().initial(request, *args, **kwargs)\n+\n+    def get_required_permissions(self):\n+        \"\"\"This is an abstract method that must be implemented by subclasses.\"\"\"\n+        NotImplemented",
    "repo_full_name": "prowler-cloud/prowler",
    "discussion_comments": [
      {
        "comment_id": "1888450729",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 6226,
        "pr_file": "api/src/backend/api/base_views.py",
        "discussion_id": "1888450729",
        "commented_code": "@@ -29,6 +31,17 @@ class BaseViewSet(ModelViewSet):\n     ordering_fields = \"__all__\"\n     ordering = [\"id\"]\n \n+    def initial(self, request, *args, **kwargs):\n+        \"\"\"\n+        Sets required_permissions before permissions are checked.\n+        \"\"\"\n+        self.get_required_permissions()\n+        super().initial(request, *args, **kwargs)\n+\n+    def get_required_permissions(self):\n+        \"\"\"This is an abstract method that must be implemented by subclasses.\"\"\"\n+        NotImplemented",
        "comment_created_at": "2024-12-17T12:40:22+00:00",
        "comment_author": "vicferpoy",
        "comment_body": "There are a few viewsets that do not implement this method. How is it working?",
        "pr_file_module": null
      },
      {
        "comment_id": "1888463640",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 6226,
        "pr_file": "api/src/backend/api/base_views.py",
        "discussion_id": "1888450729",
        "commented_code": "@@ -29,6 +31,17 @@ class BaseViewSet(ModelViewSet):\n     ordering_fields = \"__all__\"\n     ordering = [\"id\"]\n \n+    def initial(self, request, *args, **kwargs):\n+        \"\"\"\n+        Sets required_permissions before permissions are checked.\n+        \"\"\"\n+        self.get_required_permissions()\n+        super().initial(request, *args, **kwargs)\n+\n+    def get_required_permissions(self):\n+        \"\"\"This is an abstract method that must be implemented by subclasses.\"\"\"\n+        NotImplemented",
        "comment_created_at": "2024-12-17T12:47:24+00:00",
        "comment_author": "AdriiiPRodri",
        "comment_body": "They use their required_permissions parameter, so the function get_required_permissions does not return anything, maybe the interesting thing would be to change the name of this function to set_required_permissions.",
        "pr_file_module": null
      },
      {
        "comment_id": "1888553740",
        "repo_full_name": "prowler-cloud/prowler",
        "pr_number": 6226,
        "pr_file": "api/src/backend/api/base_views.py",
        "discussion_id": "1888450729",
        "commented_code": "@@ -29,6 +31,17 @@ class BaseViewSet(ModelViewSet):\n     ordering_fields = \"__all__\"\n     ordering = [\"id\"]\n \n+    def initial(self, request, *args, **kwargs):\n+        \"\"\"\n+        Sets required_permissions before permissions are checked.\n+        \"\"\"\n+        self.get_required_permissions()\n+        super().initial(request, *args, **kwargs)\n+\n+    def get_required_permissions(self):\n+        \"\"\"This is an abstract method that must be implemented by subclasses.\"\"\"\n+        NotImplemented",
        "comment_created_at": "2024-12-17T13:49:56+00:00",
        "comment_author": "vicferpoy",
        "comment_body": "Yes, I agree. Thanks for clarifying.",
        "pr_file_module": null
      }
    ]
  }
]