[
  {
    "discussion_id": "1848394960",
    "pr_number": 10863,
    "pr_file": "pydantic/_internal/_generate_schema.py",
    "created_at": "2024-11-19T13:45:29+00:00",
    "commented_code": "'`__get_validators__` is deprecated and will be removed, use `__get_pydantic_core_schema__` instead.',\n                     PydanticDeprecatedSince20,\n                 )\n-            schema = core_schema.chain_schema([core_schema.with_info_plain_validator_function(v) for v in validators()])\n-        else:\n-            # we have no existing schema information on the property, exit early so that we can go generate a schema\n-            return None\n-\n-        schema = self._unpack_refs_defs(schema)\n-\n-        if is_function_with_inner_schema(schema):\n-            ref = schema['schema'].pop('ref', None)  # pyright: ignore[reportCallIssue, reportArgumentType]\n-            if ref:\n-                schema['ref'] = ref\n-        else:\n-            ref = get_ref(schema)",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1848394960",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10863,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1848394960",
        "commented_code": "@@ -783,25 +776,7 @@ def _generate_schema_from_property(self, obj: Any, source: Any) -> core_schema.C\n                     '`__get_validators__` is deprecated and will be removed, use `__get_pydantic_core_schema__` instead.',\n                     PydanticDeprecatedSince20,\n                 )\n-            schema = core_schema.chain_schema([core_schema.with_info_plain_validator_function(v) for v in validators()])\n-        else:\n-            # we have no existing schema information on the property, exit early so that we can go generate a schema\n-            return None\n-\n-        schema = self._unpack_refs_defs(schema)\n-\n-        if is_function_with_inner_schema(schema):\n-            ref = schema['schema'].pop('ref', None)  # pyright: ignore[reportCallIssue, reportArgumentType]\n-            if ref:\n-                schema['ref'] = ref\n-        else:\n-            ref = get_ref(schema)",
        "comment_created_at": "2024-11-19T13:45:29+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Seems like we lost this logic - is this needed anywhere?",
        "pr_file_module": null
      },
      {
        "comment_id": "1848786895",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10863,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1848394960",
        "commented_code": "@@ -783,25 +776,7 @@ def _generate_schema_from_property(self, obj: Any, source: Any) -> core_schema.C\n                     '`__get_validators__` is deprecated and will be removed, use `__get_pydantic_core_schema__` instead.',\n                     PydanticDeprecatedSince20,\n                 )\n-            schema = core_schema.chain_schema([core_schema.with_info_plain_validator_function(v) for v in validators()])\n-        else:\n-            # we have no existing schema information on the property, exit early so that we can go generate a schema\n-            return None\n-\n-        schema = self._unpack_refs_defs(schema)\n-\n-        if is_function_with_inner_schema(schema):\n-            ref = schema['schema'].pop('ref', None)  # pyright: ignore[reportCallIssue, reportArgumentType]\n-            if ref:\n-                schema['ref'] = ref\n-        else:\n-            ref = get_ref(schema)",
        "comment_created_at": "2024-11-19T17:35:37+00:00",
        "comment_author": "Viicos",
        "comment_body": "This is related to what I mentioned:\r\n\r\n> the first one I could find: https://github.com/pydantic/pydantic/issues/7102. The https://github.com/pydantic/pydantic/issues/7102#issuecomment-1682288722 isn't really compelling, the user was doing things not the intended way. It also led to [a scary and hacky fix](https://github.com/pydantic/pydantic/pull/8066/files) that I would really like not having.\r\n\r\nThese removed lines had the effect of moving the ref from the inner schema of a `function-*` schema to the the `function-*` schema itself. With the following simplified test code added in the mentioned issue above:\r\n\r\n```python\r\nclass Numeric(BaseModel):\r\n    value: float\r\n\r\n    @classmethod\r\n    def __get_pydantic_core_schema__(cls, source_type, handler):\r\n        return core_schema.no_info_before_validator_function(cls.validate, handler(source_type))\r\n\r\n    @classmethod\r\n    def validate(cls, v):\r\n        ...\r\n\r\nclass OuterModel(BaseModel):\r\n    x: Numeric\r\n    y: Numeric\r\n```\r\n\r\nOn `main`, the schema of `OuterModel` would look like:\r\n\r\n<details>\r\n\r\n```python\r\n{\r\n│   'type': 'definitions',\r\n│   'schema': {\r\n│   │   'type': 'model',\r\n│   │   'cls': <class '__main__.OuterModel'>,\r\n│   │   'schema': {\r\n│   │   │   'type': 'model-fields',\r\n│   │   │   'fields': {\r\n│   │   │   │   'x': {'type': 'model-field', 'schema': {'type': 'definition-ref', 'schema_ref': '__main__.Numeric:109238506193520'}, 'metadata': {}},\r\n│   │   │   │   'y': {'type': 'model-field', 'schema': {'type': 'definition-ref', 'schema_ref': '__main__.Numeric:109238506193520'}, 'metadata': {}}\r\n│   │   │   },\r\n│   │   │   'model_name': 'OuterModel',\r\n│   │   │   'computed_fields': []\r\n│   │   },\r\n│   │   'config': {'title': 'OuterModel'},\r\n│   │   'ref': '__main__.OuterModel:109238503123056',\r\n│   │   'metadata': {'<stripped>'}\r\n│   },\r\n│   'definitions': [\r\n│   │   {\r\n│   │   │   'function': {'type': 'no-info', 'function': <bound method Numeric.validate of <class '__main__.Numeric'>>},\r\n│   │   │   'schema': {\r\n│   │   │   │   'type': 'model',\r\n│   │   │   │   'cls': <class '__main__.Numeric'>,\r\n│   │   │   │   'schema': {\r\n│   │   │   │   │   'type': 'model-fields',\r\n│   │   │   │   │   'fields': {'value': {'type': 'model-field', 'schema': {'type': 'float'}, 'metadata': {}}},\r\n│   │   │   │   │   'model_name': 'Numeric',\r\n│   │   │   │   │   'computed_fields': []\r\n│   │   │   │   },\r\n│   │   │   │   'config': {'title': 'Numeric'}\r\n│   │   │   },\r\n│   │   │   'ref': '__main__.Numeric:109238506193520',\r\n│   │   │   'metadata': {'<stripped>'},\r\n│   │   │   'type': 'function-before'\r\n│   │   }\r\n│   ]\r\n}\r\n```\r\n\r\n</details>\r\n\r\nOn this PR, it looks like:\r\n\r\n<details>\r\n\r\n```python\r\n{\r\n│   'type': 'definitions',\r\n│   'schema': {\r\n│   │   'type': 'model',\r\n│   │   'cls': <class '__main__.OuterModel'>,\r\n│   │   'schema': {\r\n│   │   │   'type': 'model-fields',\r\n│   │   │   'fields': {\r\n│   │   │   │   'x': {\r\n│   │   │   │   │   'type': 'model-field',\r\n│   │   │   │   │   'schema': {\r\n│   │   │   │   │   │   'function': {'type': 'no-info', 'function': <bound method Numeric.validate of <class '__main__.Numeric'>>},\r\n│   │   │   │   │   │   'schema': {\r\n│   │   │   │   │   │   │   'function': {'type': 'no-info', 'function': <bound method Numeric.validate of <class '__main__.Numeric'>>},\r\n│   │   │   │   │   │   │   'schema': {'type': 'definition-ref', 'schema_ref': '__main__.Numeric:105945921898336'},\r\n│   │   │   │   │   │   │   'metadata': {'<stripped>'},\r\n│   │   │   │   │   │   │   'type': 'function-before'\r\n│   │   │   │   │   │   },\r\n│   │   │   │   │   │   'metadata': {'<stripped>'},\r\n│   │   │   │   │   │   'type': 'function-before'\r\n│   │   │   │   │   },\r\n│   │   │   │   │   'metadata': {}\r\n│   │   │   │   },\r\n│   │   │   │   'y': {\r\n│   │   │   │   │   'type': 'model-field',\r\n│   │   │   │   │   'schema': {\r\n│   │   │   │   │   │   'function': {'type': 'no-info', 'function': <bound method Numeric.validate of <class '__main__.Numeric'>>},\r\n│   │   │   │   │   │   'schema': {\r\n│   │   │   │   │   │   │   'function': {'type': 'no-info', 'function': <bound method Numeric.validate of <class '__main__.Numeric'>>},\r\n│   │   │   │   │   │   │   'schema': {'type': 'definition-ref', 'schema_ref': '__main__.Numeric:105945921898336'},\r\n│   │   │   │   │   │   │   'metadata': {'<stripped>'},\r\n│   │   │   │   │   │   │   'type': 'function-before'\r\n│   │   │   │   │   │   },\r\n│   │   │   │   │   │   'metadata': {'<stripped>'},\r\n│   │   │   │   │   │   'type': 'function-before'\r\n│   │   │   │   │   },\r\n│   │   │   │   │   'metadata': {}\r\n│   │   │   │   }\r\n│   │   │   },\r\n│   │   │   'model_name': 'OuterModel',\r\n│   │   │   'computed_fields': []\r\n│   │   },\r\n│   │   'config': {'title': 'OuterModel'},\r\n│   │   'ref': '__main__.OuterModel:105945922827312',\r\n│   │   'metadata': {'<stripped>'}\r\n│   },\r\n│   'definitions': [\r\n│   │   {\r\n│   │   │   'type': 'model',\r\n│   │   │   'cls': <class '__main__.Numeric'>,\r\n│   │   │   'schema': {\r\n│   │   │   │   'type': 'model-fields',\r\n│   │   │   │   'fields': {'value': {'type': 'model-field', 'schema': {'type': 'float'}, 'metadata': {}}},\r\n│   │   │   │   'model_name': 'Numeric',\r\n│   │   │   │   'computed_fields': []\r\n│   │   │   },\r\n│   │   │   'config': {'title': 'Numeric'},\r\n│   │   │   'ref': '__main__.Numeric:105945921898336'\r\n│   │   }\r\n│   ]\r\n}\r\n```\r\n\r\n</details>\r\n\r\nEssentially, the difference in these two schemas is that we don't \"move\" the ref from the inner schema to the `function-before` schemas.\r\n\r\nThe changes in this PR + removing this reference moving coincidentally make it work still.\r\n\r\nHowever, doing so was a dangerous game: on _L793_, `schema` directly comes from another model. The `pop` calls removes the reference to the schema, and mutating schemas from other models has been a known issue. \r\n\r\nYou may be wondering: why this doesn't break things in the example I gave? Surely the `pop` call should have mutated the core schema of `Numeric`. Turns out it doesn't, because `Numeric.__get_pydantic_core_schema__` does not cache the schema, so calling it will generate a new one every time (and this is what happens during the schema gen of `OuterModel`). But on a similar issue, [I mentioned](https://github.com/pydantic/pydantic/issues/10160#issuecomment-2298257506) that explicitly caching the core schema in the `__get_pydantic_core_schema__` method would resolve the user issue (as the use case was slightly different)! \r\n\r\nSo to conclude, overriding `BaseModel.__get_pydantic_core_schema__` is full of unexpected behaviors, but that's fine as officially supporting them would be a huge pain.\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1914860077",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10863,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1848394960",
        "commented_code": "@@ -783,25 +776,7 @@ def _generate_schema_from_property(self, obj: Any, source: Any) -> core_schema.C\n                     '`__get_validators__` is deprecated and will be removed, use `__get_pydantic_core_schema__` instead.',\n                     PydanticDeprecatedSince20,\n                 )\n-            schema = core_schema.chain_schema([core_schema.with_info_plain_validator_function(v) for v in validators()])\n-        else:\n-            # we have no existing schema information on the property, exit early so that we can go generate a schema\n-            return None\n-\n-        schema = self._unpack_refs_defs(schema)\n-\n-        if is_function_with_inner_schema(schema):\n-            ref = schema['schema'].pop('ref', None)  # pyright: ignore[reportCallIssue, reportArgumentType]\n-            if ref:\n-                schema['ref'] = ref\n-        else:\n-            ref = get_ref(schema)",
        "comment_created_at": "2025-01-14T13:58:28+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Would it make sense to break this change out into a different PR?",
        "pr_file_module": null
      },
      {
        "comment_id": "1916202889",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10863,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1848394960",
        "commented_code": "@@ -783,25 +776,7 @@ def _generate_schema_from_property(self, obj: Any, source: Any) -> core_schema.C\n                     '`__get_validators__` is deprecated and will be removed, use `__get_pydantic_core_schema__` instead.',\n                     PydanticDeprecatedSince20,\n                 )\n-            schema = core_schema.chain_schema([core_schema.with_info_plain_validator_function(v) for v in validators()])\n-        else:\n-            # we have no existing schema information on the property, exit early so that we can go generate a schema\n-            return None\n-\n-        schema = self._unpack_refs_defs(schema)\n-\n-        if is_function_with_inner_schema(schema):\n-            ref = schema['schema'].pop('ref', None)  # pyright: ignore[reportCallIssue, reportArgumentType]\n-            if ref:\n-                schema['ref'] = ref\n-        else:\n-            ref = get_ref(schema)",
        "comment_created_at": "2025-01-15T09:13:01+00:00",
        "comment_author": "Viicos",
        "comment_body": "iirc (but I'm not sure), I was able to remove it only thanks to the other changes. This won't clutter the git diff though, because it's just a removal. Probably by having a proper commit description when merging, I can add a note about this?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1848385488",
    "pr_number": 10863,
    "pr_file": "pydantic/_internal/_generate_schema.py",
    "created_at": "2024-11-19T13:39:27+00:00",
    "commented_code": "return args[0], args[1]\n \n     def _generate_schema_inner(self, obj: Any) -> core_schema.CoreSchema:\n+        if _typing_extra.is_self(obj):\n+            obj = self._resolve_self_type(obj)\n+",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1848385488",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10863,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1848385488",
        "commented_code": "@@ -861,6 +836,9 @@ def _get_first_two_args_or_any(self, obj: Any) -> tuple[Any, Any]:\n         return args[0], args[1]\n \n     def _generate_schema_inner(self, obj: Any) -> core_schema.CoreSchema:\n+        if _typing_extra.is_self(obj):\n+            obj = self._resolve_self_type(obj)\n+",
        "comment_created_at": "2024-11-19T13:39:27+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Just curious, why do we need to add this here now?",
        "pr_file_module": null
      },
      {
        "comment_id": "1848502818",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10863,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1848385488",
        "commented_code": "@@ -861,6 +836,9 @@ def _get_first_two_args_or_any(self, obj: Any) -> tuple[Any, Any]:\n         return args[0], args[1]\n \n     def _generate_schema_inner(self, obj: Any) -> core_schema.CoreSchema:\n+        if _typing_extra.is_self(obj):\n+            obj = self._resolve_self_type(obj)\n+",
        "comment_created_at": "2024-11-19T14:47:35+00:00",
        "comment_author": "Viicos",
        "comment_body": "This was present inside `_generate_schema_from_property` before, but actually I think it should come first. Whenever you call `generate_schema`, if we pass in `typing(_extensions).Self`, we need to resolve the type before trying to build the schema.\r\n\r\nI moved it at the top of `GenerateSchema.generate_schema`",
        "pr_file_module": null
      },
      {
        "comment_id": "1850672364",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10863,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1848385488",
        "commented_code": "@@ -861,6 +836,9 @@ def _get_first_two_args_or_any(self, obj: Any) -> tuple[Any, Any]:\n         return args[0], args[1]\n \n     def _generate_schema_inner(self, obj: Any) -> core_schema.CoreSchema:\n+        if _typing_extra.is_self(obj):\n+            obj = self._resolve_self_type(obj)\n+",
        "comment_created_at": "2024-11-20T16:51:04+00:00",
        "comment_author": "Viicos",
        "comment_body": "Oops, seems like moving it breaks things, it needs to be right after the `__get_pydantic_core_schema__` check, so I'll leave it here",
        "pr_file_module": null
      }
    ]
  }
]