[
  {
    "discussion_id": "2143344719",
    "pr_number": 11914,
    "pr_file": "pydantic/_internal/_fields.py",
    "created_at": "2025-06-12T18:00:55+00:00",
    "commented_code": "continue\n \n         assigned_value = getattr(cls, ann_name, PydanticUndefined)\n+        if (",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "2143344719",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11914,
        "pr_file": "pydantic/_internal/_fields.py",
        "discussion_id": "2143344719",
        "commented_code": "@@ -265,6 +282,20 @@ def collect_model_fields(  # noqa: C901\n             continue\n \n         assigned_value = getattr(cls, ann_name, PydanticUndefined)\n+        if (",
        "comment_created_at": "2025-06-12T18:00:55+00:00",
        "comment_author": "DouweM",
        "comment_body": "I think we can make this a bit more performant by skipping the checks if `assigned_values is PydanticUndefined`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1848393876",
    "pr_number": 10863,
    "pr_file": "pydantic/_internal/_generate_schema.py",
    "created_at": "2024-11-19T13:44:44+00:00",
    "commented_code": "if maybe_schema is not None:\n                 return maybe_schema\n \n+            schema = cls.__dict__.get('__pydantic_core_schema__')\n+            if (\n+                schema is not None\n+                and not isinstance(schema, MockCoreSchema)\n+                # Due to the way generic classes are built, it's possible that an invalid schema may be temporarily\n+                # set on generic classes. Probably we could resolve this to ensure that we get proper schema caching\n+                # for generics, but for simplicity for now, we just always rebuild if the class has a generic origin:\n+                and not cls.__pydantic_generic_metadata__['origin']\n+            ):",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1848393876",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10863,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1848393876",
        "commented_code": "@@ -627,6 +618,23 @@ def _model_schema(self, cls: type[BaseModel]) -> core_schema.CoreSchema:\n             if maybe_schema is not None:\n                 return maybe_schema\n \n+            schema = cls.__dict__.get('__pydantic_core_schema__')\n+            if (\n+                schema is not None\n+                and not isinstance(schema, MockCoreSchema)\n+                # Due to the way generic classes are built, it's possible that an invalid schema may be temporarily\n+                # set on generic classes. Probably we could resolve this to ensure that we get proper schema caching\n+                # for generics, but for simplicity for now, we just always rebuild if the class has a generic origin:\n+                and not cls.__pydantic_generic_metadata__['origin']\n+            ):",
        "comment_created_at": "2024-11-19T13:44:44+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "@MarkusSintonen did a good job at intuitively extracting some of this logic as follows:\r\n\r\n```py\r\ndef get_existing_core_schema(obj: Any) -> core_schema.CoreSchema | None:\r\n    # Only use the cached value from this _exact_ class; we don't want one from a parent class\r\n    # This is why we check `cls.__dict__` and don't use `cls.__pydantic_core_schema__` or similar.\r\n    if (\r\n        hasattr(obj, '__dict__')\r\n        and (existing_schema := obj.__dict__.get('__pydantic_core_schema__')) is not None\r\n        and not isinstance(existing_schema, MockCoreSchema)\r\n    ):\r\n        return existing_schema\r\n    return None\r\n```\r\n\r\nMaybe we could eagerly pull changes like that into this PR, given that https://github.com/pydantic/pydantic/pull/10655 isn't quite ready to merge yet?",
        "pr_file_module": null
      },
      {
        "comment_id": "1848522677",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10863,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1848393876",
        "commented_code": "@@ -627,6 +618,23 @@ def _model_schema(self, cls: type[BaseModel]) -> core_schema.CoreSchema:\n             if maybe_schema is not None:\n                 return maybe_schema\n \n+            schema = cls.__dict__.get('__pydantic_core_schema__')\n+            if (\n+                schema is not None\n+                and not isinstance(schema, MockCoreSchema)\n+                # Due to the way generic classes are built, it's possible that an invalid schema may be temporarily\n+                # set on generic classes. Probably we could resolve this to ensure that we get proper schema caching\n+                # for generics, but for simplicity for now, we just always rebuild if the class has a generic origin:\n+                and not cls.__pydantic_generic_metadata__['origin']\n+            ):",
        "comment_created_at": "2024-11-19T14:58:26+00:00",
        "comment_author": "Viicos",
        "comment_body": "I also need to check that `cls.__pydantic_generic_metadata__['origin']` is `None` for Pydantic models, so maybe it's best to keep the (small) duplication of code here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1848548303",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10863,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1848393876",
        "commented_code": "@@ -627,6 +618,23 @@ def _model_schema(self, cls: type[BaseModel]) -> core_schema.CoreSchema:\n             if maybe_schema is not None:\n                 return maybe_schema\n \n+            schema = cls.__dict__.get('__pydantic_core_schema__')\n+            if (\n+                schema is not None\n+                and not isinstance(schema, MockCoreSchema)\n+                # Due to the way generic classes are built, it's possible that an invalid schema may be temporarily\n+                # set on generic classes. Probably we could resolve this to ensure that we get proper schema caching\n+                # for generics, but for simplicity for now, we just always rebuild if the class has a generic origin:\n+                and not cls.__pydantic_generic_metadata__['origin']\n+            ):",
        "comment_created_at": "2024-11-19T15:13:13+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "I'm ok with leaving this dupe for now",
        "pr_file_module": null
      }
    ]
  }
]