[
  {
    "discussion_id": "1848393876",
    "pr_number": 10863,
    "pr_file": "pydantic/_internal/_generate_schema.py",
    "created_at": "2024-11-19T13:44:44+00:00",
    "commented_code": "if maybe_schema is not None:\n                 return maybe_schema\n \n+            schema = cls.__dict__.get('__pydantic_core_schema__')\n+            if (\n+                schema is not None\n+                and not isinstance(schema, MockCoreSchema)\n+                # Due to the way generic classes are built, it's possible that an invalid schema may be temporarily\n+                # set on generic classes. Probably we could resolve this to ensure that we get proper schema caching\n+                # for generics, but for simplicity for now, we just always rebuild if the class has a generic origin:\n+                and not cls.__pydantic_generic_metadata__['origin']\n+            ):",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1848393876",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10863,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1848393876",
        "commented_code": "@@ -627,6 +618,23 @@ def _model_schema(self, cls: type[BaseModel]) -> core_schema.CoreSchema:\n             if maybe_schema is not None:\n                 return maybe_schema\n \n+            schema = cls.__dict__.get('__pydantic_core_schema__')\n+            if (\n+                schema is not None\n+                and not isinstance(schema, MockCoreSchema)\n+                # Due to the way generic classes are built, it's possible that an invalid schema may be temporarily\n+                # set on generic classes. Probably we could resolve this to ensure that we get proper schema caching\n+                # for generics, but for simplicity for now, we just always rebuild if the class has a generic origin:\n+                and not cls.__pydantic_generic_metadata__['origin']\n+            ):",
        "comment_created_at": "2024-11-19T13:44:44+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "@MarkusSintonen did a good job at intuitively extracting some of this logic as follows:\r\n\r\n```py\r\ndef get_existing_core_schema(obj: Any) -> core_schema.CoreSchema | None:\r\n    # Only use the cached value from this _exact_ class; we don't want one from a parent class\r\n    # This is why we check `cls.__dict__` and don't use `cls.__pydantic_core_schema__` or similar.\r\n    if (\r\n        hasattr(obj, '__dict__')\r\n        and (existing_schema := obj.__dict__.get('__pydantic_core_schema__')) is not None\r\n        and not isinstance(existing_schema, MockCoreSchema)\r\n    ):\r\n        return existing_schema\r\n    return None\r\n```\r\n\r\nMaybe we could eagerly pull changes like that into this PR, given that https://github.com/pydantic/pydantic/pull/10655 isn't quite ready to merge yet?",
        "pr_file_module": null
      },
      {
        "comment_id": "1848522677",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10863,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1848393876",
        "commented_code": "@@ -627,6 +618,23 @@ def _model_schema(self, cls: type[BaseModel]) -> core_schema.CoreSchema:\n             if maybe_schema is not None:\n                 return maybe_schema\n \n+            schema = cls.__dict__.get('__pydantic_core_schema__')\n+            if (\n+                schema is not None\n+                and not isinstance(schema, MockCoreSchema)\n+                # Due to the way generic classes are built, it's possible that an invalid schema may be temporarily\n+                # set on generic classes. Probably we could resolve this to ensure that we get proper schema caching\n+                # for generics, but for simplicity for now, we just always rebuild if the class has a generic origin:\n+                and not cls.__pydantic_generic_metadata__['origin']\n+            ):",
        "comment_created_at": "2024-11-19T14:58:26+00:00",
        "comment_author": "Viicos",
        "comment_body": "I also need to check that `cls.__pydantic_generic_metadata__['origin']` is `None` for Pydantic models, so maybe it's best to keep the (small) duplication of code here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1848548303",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10863,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1848393876",
        "commented_code": "@@ -627,6 +618,23 @@ def _model_schema(self, cls: type[BaseModel]) -> core_schema.CoreSchema:\n             if maybe_schema is not None:\n                 return maybe_schema\n \n+            schema = cls.__dict__.get('__pydantic_core_schema__')\n+            if (\n+                schema is not None\n+                and not isinstance(schema, MockCoreSchema)\n+                # Due to the way generic classes are built, it's possible that an invalid schema may be temporarily\n+                # set on generic classes. Probably we could resolve this to ensure that we get proper schema caching\n+                # for generics, but for simplicity for now, we just always rebuild if the class has a generic origin:\n+                and not cls.__pydantic_generic_metadata__['origin']\n+            ):",
        "comment_created_at": "2024-11-19T15:13:13+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "I'm ok with leaving this dupe for now",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1755013531",
    "pr_number": 10246,
    "pr_file": "tests/test_config.py",
    "created_at": "2024-09-11T15:44:32+00:00",
    "commented_code": "assert m.model_validate({'y': {'x': 1}}).y.x == 1\n     assert m.model_json_schema()['type'] == 'object'\n \n-    if defer_build:\n-        assert isinstance(MyNestedModel.__pydantic_validator__, MockValSer)\n-        assert isinstance(MyNestedModel.__pydantic_serializer__, MockValSer)\n-    else:\n-        assert isinstance(MyNestedModel.__pydantic_validator__, SchemaValidator)\n-        assert isinstance(MyNestedModel.__pydantic_serializer__, SchemaSerializer)\n-\n-    assert generate_schema_calls.count == expected_schema_count, 'Should not build duplicated core schemas'\n+    # validating `MyModel` requires building `MyNestedModel` as its validator/serializer is reused.\n+    assert isinstance(MyNestedModel.__pydantic_validator__, SchemaValidator)\n+    assert isinstance(MyNestedModel.__pydantic_serializer__, SchemaSerializer)\n+    assert generate_schema_calls.count == 2, 'Should not build duplicated core schemas'",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1755013531",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10246,
        "pr_file": "tests/test_config.py",
        "discussion_id": "1755013531",
        "commented_code": "@@ -800,14 +800,10 @@ class MyModel(BaseModel):\n     assert m.model_validate({'y': {'x': 1}}).y.x == 1\n     assert m.model_json_schema()['type'] == 'object'\n \n-    if defer_build:\n-        assert isinstance(MyNestedModel.__pydantic_validator__, MockValSer)\n-        assert isinstance(MyNestedModel.__pydantic_serializer__, MockValSer)\n-    else:\n-        assert isinstance(MyNestedModel.__pydantic_validator__, SchemaValidator)\n-        assert isinstance(MyNestedModel.__pydantic_serializer__, SchemaSerializer)\n-\n-    assert generate_schema_calls.count == expected_schema_count, 'Should not build duplicated core schemas'\n+    # validating `MyModel` requires building `MyNestedModel` as its validator/serializer is reused.\n+    assert isinstance(MyNestedModel.__pydantic_validator__, SchemaValidator)\n+    assert isinstance(MyNestedModel.__pydantic_serializer__, SchemaSerializer)\n+    assert generate_schema_calls.count == 2, 'Should not build duplicated core schemas'",
        "comment_created_at": "2024-09-11T15:44:32+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Why the removal of the `defer_build` check?",
        "pr_file_module": null
      },
      {
        "comment_id": "1755117530",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10246,
        "pr_file": "tests/test_config.py",
        "discussion_id": "1755013531",
        "commented_code": "@@ -800,14 +800,10 @@ class MyModel(BaseModel):\n     assert m.model_validate({'y': {'x': 1}}).y.x == 1\n     assert m.model_json_schema()['type'] == 'object'\n \n-    if defer_build:\n-        assert isinstance(MyNestedModel.__pydantic_validator__, MockValSer)\n-        assert isinstance(MyNestedModel.__pydantic_serializer__, MockValSer)\n-    else:\n-        assert isinstance(MyNestedModel.__pydantic_validator__, SchemaValidator)\n-        assert isinstance(MyNestedModel.__pydantic_serializer__, SchemaSerializer)\n-\n-    assert generate_schema_calls.count == expected_schema_count, 'Should not build duplicated core schemas'\n+    # validating `MyModel` requires building `MyNestedModel` as its validator/serializer is reused.\n+    assert isinstance(MyNestedModel.__pydantic_validator__, SchemaValidator)\n+    assert isinstance(MyNestedModel.__pydantic_serializer__, SchemaSerializer)\n+    assert generate_schema_calls.count == 2, 'Should not build duplicated core schemas'",
        "comment_created_at": "2024-09-11T16:15:12+00:00",
        "comment_author": "BoxyUwU",
        "comment_body": "Validating/Serializing `MyModel` reuses the validator/serializer from `MyNestedModel`, so if they are mocks then we automatically rebuild them for use in validation of `MyModel`. This means that even though we defer the build of `MyNestedModel` it gets built anyway later on.\r\n\r\nThis is a good example of a case where this PR can reduce amount of work we do. `MyModel` always required the core schema of `MyNestedModel` in order to validate but previously it was generated twice, once inline in `MyModel` and once separately when rebuilding `MyNestedModel` later. Now the schema is only generated once and reused between `MyModel` and `MyNestedModel`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1951789296",
    "pr_number": 11429,
    "pr_file": "pydantic/main.py",
    "created_at": "2025-02-12T00:27:20+00:00",
    "commented_code": "if not force and cls.__pydantic_complete__:\n             return None\n \n-        if '__pydantic_core_schema__' in cls.__dict__:\n-            delattr(cls, '__pydantic_core_schema__')  # delete cached value to ensure full rebuild happens\n+        for attr in ('__pydantic_core_schema__', '__pydantic_validator__', '__pydantic_serializer__'):\n+            if attr in cls.__dict__:\n+                # Deleting the validator/serializer is necessary as otherwise they can get reused in\n+                # core. Same applies for the core schema that can be reused in schema generation.",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1951789296",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11429,
        "pr_file": "pydantic/main.py",
        "discussion_id": "1951789296",
        "commented_code": "@@ -588,8 +588,13 @@ def model_rebuild(\n         if not force and cls.__pydantic_complete__:\n             return None\n \n-        if '__pydantic_core_schema__' in cls.__dict__:\n-            delattr(cls, '__pydantic_core_schema__')  # delete cached value to ensure full rebuild happens\n+        for attr in ('__pydantic_core_schema__', '__pydantic_validator__', '__pydantic_serializer__'):\n+            if attr in cls.__dict__:\n+                # Deleting the validator/serializer is necessary as otherwise they can get reused in\n+                # core. Same applies for the core schema that can be reused in schema generation.",
        "comment_created_at": "2025-02-12T00:27:20+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "```suggestion\r\n                # Deleting the validator/serializer is necessary as otherwise they can get reused in\r\n                # pydantic-core. Same applies for the core schema that can be reused in schema generation.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1847127547",
    "pr_number": 10868,
    "pr_file": "pydantic/main.py",
    "created_at": "2024-11-18T19:20:11+00:00",
    "commented_code": "raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\n \n         def __setattr__(self, name: str, value: Any) -> None:\n-            if name in self.__class_vars__:\n+            if (fast_memo_handler := self.__pydantic_setattr_handlers__.get(name)) is not None:\n+                fast_memo_handler(self, value)",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1847127547",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10868,
        "pr_file": "pydantic/main.py",
        "discussion_id": "1847127547",
        "commented_code": "@@ -890,53 +893,64 @@ def __getattr__(self, item: str) -> Any:\n                         raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\n \n         def __setattr__(self, name: str, value: Any) -> None:\n-            if name in self.__class_vars__:\n+            if (fast_memo_handler := self.__pydantic_setattr_handlers__.get(name)) is not None:\n+                fast_memo_handler(self, value)",
        "comment_created_at": "2024-11-18T19:20:11+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "I wouldn't expect to have a `slow_memo_handler`, given that the point of memoization is to make things fast. Maybe we could use `setattr_handler` instead?",
        "pr_file_module": null
      },
      {
        "comment_id": "1847174753",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10868,
        "pr_file": "pydantic/main.py",
        "discussion_id": "1847127547",
        "commented_code": "@@ -890,53 +893,64 @@ def __getattr__(self, item: str) -> Any:\n                         raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\n \n         def __setattr__(self, name: str, value: Any) -> None:\n-            if name in self.__class_vars__:\n+            if (fast_memo_handler := self.__pydantic_setattr_handlers__.get(name)) is not None:\n+                fast_memo_handler(self, value)",
        "comment_created_at": "2024-11-18T19:57:55+00:00",
        "comment_author": "dmontagu",
        "comment_body": "I think the word `fast` in the name of this variable is carrying some weight in terms of documenting what is going on here — it doesn't seem to be indicated explicitly that the reason for memoizing the attribute handler is purely for performance and isn't otherwise logically required. I mean, I know we have the docstring of `__pydantic_setattr_handlers__`, but that is far away from the implementing code and still doesn't make it clear that the current logic _only_ makes use of the memoization for performance reasons (and isn't otherwise dependent on the memoization), which may be useful context if we refactor this in the future.\r\n\r\nI don't really mind the word fast in the name, but I think either way we should add a comment here reiterating that the memoization is purely for performance reasons. And if we do, the word fast probably becomes less useful.",
        "pr_file_module": null
      },
      {
        "comment_id": "1847190363",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10868,
        "pr_file": "pydantic/main.py",
        "discussion_id": "1847127547",
        "commented_code": "@@ -890,53 +893,64 @@ def __getattr__(self, item: str) -> Any:\n                         raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\n \n         def __setattr__(self, name: str, value: Any) -> None:\n-            if name in self.__class_vars__:\n+            if (fast_memo_handler := self.__pydantic_setattr_handlers__.get(name)) is not None:\n+                fast_memo_handler(self, value)",
        "comment_created_at": "2024-11-18T20:04:54+00:00",
        "comment_author": "MarkusSintonen",
        "comment_body": "Done, simplified the name, it wasnt so pretty yet :) ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1847168578",
    "pr_number": 10868,
    "pr_file": "pydantic/main.py",
    "created_at": "2024-11-18T19:54:35+00:00",
    "commented_code": "This replaces `Model.__fields__` from Pydantic V1.\n     \"\"\"\n \n+    __pydantic_setattr_handlers__: ClassVar[Dict[str, Callable[[BaseModel, Any], None]]]  # noqa: UP006\n+    \"\"\"__setattr__ handlers. Used to speed up __setattr__.\"\"\"",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1847168578",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10868,
        "pr_file": "pydantic/main.py",
        "discussion_id": "1847168578",
        "commented_code": "@@ -169,6 +169,9 @@ class BaseModel(metaclass=_model_construction.ModelMetaclass):\n     This replaces `Model.__fields__` from Pydantic V1.\n     \"\"\"\n \n+    __pydantic_setattr_handlers__: ClassVar[Dict[str, Callable[[BaseModel, Any], None]]]  # noqa: UP006\n+    \"\"\"__setattr__ handlers. Used to speed up __setattr__.\"\"\"",
        "comment_created_at": "2024-11-18T19:54:35+00:00",
        "comment_author": "dmontagu",
        "comment_body": "I think it's worth a bit more strength/detail in this comment, e.g.:\r\n```suggestion\r\n    \"\"\"__setattr__ handlers. Memoizing the setattr handlers leads to a dramatic performance improvement in `__setattr__`\"\"\"\r\n```\r\n(that suggestion might need reformatting.)",
        "pr_file_module": null
      },
      {
        "comment_id": "1847190522",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10868,
        "pr_file": "pydantic/main.py",
        "discussion_id": "1847168578",
        "commented_code": "@@ -169,6 +169,9 @@ class BaseModel(metaclass=_model_construction.ModelMetaclass):\n     This replaces `Model.__fields__` from Pydantic V1.\n     \"\"\"\n \n+    __pydantic_setattr_handlers__: ClassVar[Dict[str, Callable[[BaseModel, Any], None]]]  # noqa: UP006\n+    \"\"\"__setattr__ handlers. Used to speed up __setattr__.\"\"\"",
        "comment_created_at": "2024-11-18T20:04:59+00:00",
        "comment_author": "MarkusSintonen",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  }
]