[
  {
    "discussion_id": "1927469618",
    "pr_number": 11334,
    "pr_file": "HISTORY.md",
    "created_at": "2025-01-23T18:27:56+00:00",
    "commented_code": "+## v2.10.6 (2025-01-23)\n+\n+[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.10.6)\n+\n+### What's Changed\n+\n+#### Fixes\n+\n+* Fix JSON Schema reference collection with `'examples'` keys by @Viicos in [#11325](https://github.com/pydantic/pydantic/pull/11325)\n+* Fix url python serialization by @sydney-runkle in [#11331](https://github.com/pydantic/pydantic/pull/11331)",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1927469618",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11334,
        "pr_file": "HISTORY.md",
        "discussion_id": "1927469618",
        "commented_code": "@@ -1,9 +1,23 @@\n+## v2.10.6 (2025-01-23)\n+\n+[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.10.6)\n+\n+### What's Changed\n+\n+#### Fixes\n+\n+* Fix JSON Schema reference collection with `'examples'` keys by @Viicos in [#11325](https://github.com/pydantic/pydantic/pull/11325)\n+* Fix url python serialization by @sydney-runkle in [#11331](https://github.com/pydantic/pydantic/pull/11331)",
        "comment_created_at": "2025-01-23T18:27:56+00:00",
        "comment_author": "hyperlint-ai[bot]",
        "comment_body": "````suggestion\n* Fix URL python serialization by @sydney-runkle in [#11331](https://github.com/pydantic/pydantic/pull/11331)\n````\n**Issues:**\n\n- Style Guide - (Spelling-error) Did you really mean 'url'?\n\n**Fix Explanation:**\n\nThe term 'url' should be capitalized to 'URL' to align with standard conventions and the style guide's recommendation.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1934555945",
    "pr_number": 11357,
    "pr_file": "HISTORY.md",
    "created_at": "2025-01-29T20:43:23+00:00",
    "commented_code": "+## v2.11.0a1 (2025-01-29)\n+\n+[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.11.0a1)\n+\n+### What's Changed\n+\n+Pydantic v2.11 is a version strongly focused on build time performance of Pydantic models (and core schema generation in general).\n+This is an early alpha release, meant to collect early feedback from users having issues with core schema builds.\n+\n+#### Packaging\n+\n+* Prep for v2.10.0 release by @sydney-runkle in [#10904](https://github.com/pydantic/pydantic/pull/10904)\n+* Prepare for v2.10.1 release by @sydney-runkle in [#10939](https://github.com/pydantic/pydantic/pull/10939)\n+* Update ruff to 0.8.0 by @Viicos in [#10980](https://github.com/pydantic/pydantic/pull/10980)\n+* Prepare for v2.10.2 release by @sydney-runkle in [#10982](https://github.com/pydantic/pydantic/pull/10982)\n+* Bump dawidd6/action-download-artifact from 6 to 7 by @dependabot in [#11018](https://github.com/pydantic/pydantic/pull/11018)\n+* Prep for v2.10.3 release by @sydney-runkle in [#11038](https://github.com/pydantic/pydantic/pull/11038)\n+* bump `pydantic-core` to 2.27.2 by @davidhewitt in [#11138](https://github.com/pydantic/pydantic/pull/11138)\n+* Prepare for v2.10.4 by @sydney-runkle in [#11144](https://github.com/pydantic/pydantic/pull/11144)\n+* Re-enable memray related tests on Python 3.12+ by @Viicos in [#11191](https://github.com/pydantic/pydantic/pull/11191)\n+* Bump astral-sh/setup-uv to 5 by @dependabot in [#11205](https://github.com/pydantic/pydantic/pull/11205)\n+* Prepare release v2.10.5 by @Viicos in [#11237](https://github.com/pydantic/pydantic/pull/11237)\n+* Bump `ruff` to v0.9.0 by @sydney-runkle in [#11254](https://github.com/pydantic/pydantic/pull/11254)\n+* Regular `uv.lock` deps update by @sydney-runkle in [#11333](https://github.com/pydantic/pydantic/pull/11333)\n+* Add a `check_pydantic_core_version()` function by @Viicos in [#11324](https://github.com/pydantic/pydantic/pull/11324)\n+* Remove `greenlet` development dependency by @Viicos in [#11351](https://github.com/pydantic/pydantic/pull/11351)\n+\n+#### New Features\n+\n+* Support unsubstituted type variables with both a default and a bound or constraints by @FyZzyss in [#10789](https://github.com/pydantic/pydantic/pull/10789)\n+* Add a `default_factory_takes_validated_data` property to `FieldInfo` by @Viicos in [#11034](https://github.com/pydantic/pydantic/pull/11034)\n+* Raise a better error when a generic alias is used inside `type[]` by @Viicos in [#11088](https://github.com/pydantic/pydantic/pull/11088)\n+* Properly support PEP 695 generics syntax by @Viicos in [#11189](https://github.com/pydantic/pydantic/pull/11189)\n+* Properly support type variable defaults by @Viicos in [#11332](https://github.com/pydantic/pydantic/pull/11332)\n+\n+#### Changes\n+\n+* Rework `create_model` field definitions format by @Viicos in [#11032](https://github.com/pydantic/pydantic/pull/11032)\n+* Raise a deprecation warning when a field is annotated as final with a default value by @Viicos in [#11168](https://github.com/pydantic/pydantic/pull/11168)\n+* Deprecate accessing `model_fields` and `model_computed_fields` on instances by @Viicos in [#11169](https://github.com/pydantic/pydantic/pull/11169)\n+* Move core schema generation logic for path types inside the `GenerateSchema` class by @sydney-runkle in [#10846](https://github.com/pydantic/pydantic/pull/10846)\n+* Move `Mapping` schema gen to `GenerateSchema` to complete removal of `prepare_annotations_for_known_type` workaround by @sydney-runkle in [#11247](https://github.com/pydantic/pydantic/pull/11247)\n+* Remove Python 3.8 Support by @sydney-runkle in [#11258](https://github.com/pydantic/pydantic/pull/11258)\n+* Disable `pydantic-core` core schema validation by @sydney-runkle in [#11271](https://github.com/pydantic/pydantic/pull/11271)\n+\n+#### Performance\n+\n+* Only evaluate `FieldInfo` annotations if required during schema building by @Viicos in [#10769](https://github.com/pydantic/pydantic/pull/10769)\n+* Optimize calls to `get_type_ref` by @Viicos in [#10863](https://github.com/pydantic/pydantic/pull/10863)\n+* Improve `__setattr__` performance of Pydantic models by caching setter functions by @MarkusSintonen in [#10868](https://github.com/pydantic/pydantic/pull/10868)\n+* Improve annotation application performance by @Viicos in [#11186](https://github.com/pydantic/pydantic/pull/11186)\n+* Improve performance of `_typing_extra` module by @Viicos in [#11255](https://github.com/pydantic/pydantic/pull/11255)\n+* Refactor and optimize schema cleaning logic by @Viicos and @MarkusSintonen in [#11244](https://github.com/pydantic/pydantic/pull/11244)\n+\n+#### Fixes\n+\n+* Add validation tests for `_internal/_validators.py` by @tkasuz in [#10763](https://github.com/pydantic/pydantic/pull/10763)\n+* Subclass all single host url classes from `AnyUrl` to preserve behavior from v2.9 by @sydney-runkle in [#10856](https://github.com/pydantic/pydantic/pull/10856)\n+* Improve `TypeAdapter` instance repr by @sydney-runkle in [#10872](https://github.com/pydantic/pydantic/pull/10872)\n+* Use the correct frame when instantiating a parametrized `TypeAdapter` by @Viicos in [#10893](https://github.com/pydantic/pydantic/pull/10893)\n+* Relax check for validated data in default factory utils by @sydney-runkle in [#10909](https://github.com/pydantic/pydantic/pull/10909)\n+* Fix type checking issue with `model_fields` and `model_computed_fields` by @sydney-runkle in [#10911](https://github.com/pydantic/pydantic/pull/10911)\n+* Use the parent configuration during schema generation for stdlib dataclasses by @sydney-runkle in [#10928](https://github.com/pydantic/pydantic/pull/10928)\n+* Use the globals of the function when evaluating the return type of serializers and computed_fields by @Viicos in [#10929](https://github.com/pydantic/pydantic/pull/10929)\n+* Fix url constraint application by @sydney-runkle in [#10922](https://github.com/pydantic/pydantic/pull/10922)\n+* Fix URL equality with different validation methods by @sydney-runkle in [#10934](https://github.com/pydantic/pydantic/pull/10934)\n+* Fix JSON schema title when specified as `''` by @sydney-runkle in [#10936](https://github.com/pydantic/pydantic/pull/10936)\n+* Revert \"ci: use locally built pydantic-core with debug symbols by @sydney-runkle in [#10942](https://github.com/pydantic/pydantic/pull/10942)",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1934555945",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11357,
        "pr_file": "HISTORY.md",
        "discussion_id": "1934555945",
        "commented_code": "@@ -1,3 +1,137 @@\n+## v2.11.0a1 (2025-01-29)\n+\n+[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.11.0a1)\n+\n+### What's Changed\n+\n+Pydantic v2.11 is a version strongly focused on build time performance of Pydantic models (and core schema generation in general).\n+This is an early alpha release, meant to collect early feedback from users having issues with core schema builds.\n+\n+#### Packaging\n+\n+* Prep for v2.10.0 release by @sydney-runkle in [#10904](https://github.com/pydantic/pydantic/pull/10904)\n+* Prepare for v2.10.1 release by @sydney-runkle in [#10939](https://github.com/pydantic/pydantic/pull/10939)\n+* Update ruff to 0.8.0 by @Viicos in [#10980](https://github.com/pydantic/pydantic/pull/10980)\n+* Prepare for v2.10.2 release by @sydney-runkle in [#10982](https://github.com/pydantic/pydantic/pull/10982)\n+* Bump dawidd6/action-download-artifact from 6 to 7 by @dependabot in [#11018](https://github.com/pydantic/pydantic/pull/11018)\n+* Prep for v2.10.3 release by @sydney-runkle in [#11038](https://github.com/pydantic/pydantic/pull/11038)\n+* bump `pydantic-core` to 2.27.2 by @davidhewitt in [#11138](https://github.com/pydantic/pydantic/pull/11138)\n+* Prepare for v2.10.4 by @sydney-runkle in [#11144](https://github.com/pydantic/pydantic/pull/11144)\n+* Re-enable memray related tests on Python 3.12+ by @Viicos in [#11191](https://github.com/pydantic/pydantic/pull/11191)\n+* Bump astral-sh/setup-uv to 5 by @dependabot in [#11205](https://github.com/pydantic/pydantic/pull/11205)\n+* Prepare release v2.10.5 by @Viicos in [#11237](https://github.com/pydantic/pydantic/pull/11237)\n+* Bump `ruff` to v0.9.0 by @sydney-runkle in [#11254](https://github.com/pydantic/pydantic/pull/11254)\n+* Regular `uv.lock` deps update by @sydney-runkle in [#11333](https://github.com/pydantic/pydantic/pull/11333)\n+* Add a `check_pydantic_core_version()` function by @Viicos in [#11324](https://github.com/pydantic/pydantic/pull/11324)\n+* Remove `greenlet` development dependency by @Viicos in [#11351](https://github.com/pydantic/pydantic/pull/11351)\n+\n+#### New Features\n+\n+* Support unsubstituted type variables with both a default and a bound or constraints by @FyZzyss in [#10789](https://github.com/pydantic/pydantic/pull/10789)\n+* Add a `default_factory_takes_validated_data` property to `FieldInfo` by @Viicos in [#11034](https://github.com/pydantic/pydantic/pull/11034)\n+* Raise a better error when a generic alias is used inside `type[]` by @Viicos in [#11088](https://github.com/pydantic/pydantic/pull/11088)\n+* Properly support PEP 695 generics syntax by @Viicos in [#11189](https://github.com/pydantic/pydantic/pull/11189)\n+* Properly support type variable defaults by @Viicos in [#11332](https://github.com/pydantic/pydantic/pull/11332)\n+\n+#### Changes\n+\n+* Rework `create_model` field definitions format by @Viicos in [#11032](https://github.com/pydantic/pydantic/pull/11032)\n+* Raise a deprecation warning when a field is annotated as final with a default value by @Viicos in [#11168](https://github.com/pydantic/pydantic/pull/11168)\n+* Deprecate accessing `model_fields` and `model_computed_fields` on instances by @Viicos in [#11169](https://github.com/pydantic/pydantic/pull/11169)\n+* Move core schema generation logic for path types inside the `GenerateSchema` class by @sydney-runkle in [#10846](https://github.com/pydantic/pydantic/pull/10846)\n+* Move `Mapping` schema gen to `GenerateSchema` to complete removal of `prepare_annotations_for_known_type` workaround by @sydney-runkle in [#11247](https://github.com/pydantic/pydantic/pull/11247)\n+* Remove Python 3.8 Support by @sydney-runkle in [#11258](https://github.com/pydantic/pydantic/pull/11258)\n+* Disable `pydantic-core` core schema validation by @sydney-runkle in [#11271](https://github.com/pydantic/pydantic/pull/11271)\n+\n+#### Performance\n+\n+* Only evaluate `FieldInfo` annotations if required during schema building by @Viicos in [#10769](https://github.com/pydantic/pydantic/pull/10769)\n+* Optimize calls to `get_type_ref` by @Viicos in [#10863](https://github.com/pydantic/pydantic/pull/10863)\n+* Improve `__setattr__` performance of Pydantic models by caching setter functions by @MarkusSintonen in [#10868](https://github.com/pydantic/pydantic/pull/10868)\n+* Improve annotation application performance by @Viicos in [#11186](https://github.com/pydantic/pydantic/pull/11186)\n+* Improve performance of `_typing_extra` module by @Viicos in [#11255](https://github.com/pydantic/pydantic/pull/11255)\n+* Refactor and optimize schema cleaning logic by @Viicos and @MarkusSintonen in [#11244](https://github.com/pydantic/pydantic/pull/11244)\n+\n+#### Fixes\n+\n+* Add validation tests for `_internal/_validators.py` by @tkasuz in [#10763](https://github.com/pydantic/pydantic/pull/10763)\n+* Subclass all single host url classes from `AnyUrl` to preserve behavior from v2.9 by @sydney-runkle in [#10856](https://github.com/pydantic/pydantic/pull/10856)\n+* Improve `TypeAdapter` instance repr by @sydney-runkle in [#10872](https://github.com/pydantic/pydantic/pull/10872)\n+* Use the correct frame when instantiating a parametrized `TypeAdapter` by @Viicos in [#10893](https://github.com/pydantic/pydantic/pull/10893)\n+* Relax check for validated data in default factory utils by @sydney-runkle in [#10909](https://github.com/pydantic/pydantic/pull/10909)\n+* Fix type checking issue with `model_fields` and `model_computed_fields` by @sydney-runkle in [#10911](https://github.com/pydantic/pydantic/pull/10911)\n+* Use the parent configuration during schema generation for stdlib dataclasses by @sydney-runkle in [#10928](https://github.com/pydantic/pydantic/pull/10928)\n+* Use the globals of the function when evaluating the return type of serializers and computed_fields by @Viicos in [#10929](https://github.com/pydantic/pydantic/pull/10929)\n+* Fix url constraint application by @sydney-runkle in [#10922](https://github.com/pydantic/pydantic/pull/10922)\n+* Fix URL equality with different validation methods by @sydney-runkle in [#10934](https://github.com/pydantic/pydantic/pull/10934)\n+* Fix JSON schema title when specified as `''` by @sydney-runkle in [#10936](https://github.com/pydantic/pydantic/pull/10936)\n+* Revert \"ci: use locally built pydantic-core with debug symbols by @sydney-runkle in [#10942](https://github.com/pydantic/pydantic/pull/10942)",
        "comment_created_at": "2025-01-29T20:43:23+00:00",
        "comment_author": "hyperlint-ai[bot]",
        "comment_body": "````suggestion\n* Revert \"ci: use locally built Pydantic-core with debug symbols by @sydney-runkle in [#10942](https://github.com/pydantic/pydantic/pull/10942)\n````\n**Issues:**\n\n- Style Guide - (Spelling-error) Did you really mean 'ci'?\n- Style Guide - (Terms-error) Use 'Pydantic' instead of 'pydantic'.\n\n**Fix Explanation:**\n\nThe term 'ci' is a common shorthand and is used in a code reference context, so no correction is needed. However, 'pydantic' should be capitalized to 'Pydantic' as it is not within a code reference or URL.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1847100081",
    "pr_number": 10878,
    "pr_file": "docs/concepts/json_schema.md",
    "created_at": "2024-11-18T18:56:15+00:00",
    "commented_code": "\"\"\"\n ```\n \n+#### Overriding field level json schema\n+Pydantic allows you to override the JSON schema for individual fields using the `json_schema_override parameter` in\n+the [`Field`][pydantic.fields.Field] function. This can be useful when you need to customize the schema\n+representation of a field beyond what Pydantic generates by default.\n+\n+To use `json_schema_override`, pass a dictionary with the desired schema attributes to the [`Field`][pydantic.fields.Field]\n+function. This dictionary will be merged with the automatically generated schema.\n+\n+Supported overrides:\n+\n+* `nullable`: Indicates whether the field can be `null`. If set to `False` to make it non-nullable in the json schema.",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1847100081",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10878,
        "pr_file": "docs/concepts/json_schema.md",
        "discussion_id": "1847100081",
        "commented_code": "@@ -397,6 +398,61 @@ print(json.dumps(User.model_json_schema(), indent=2))\n \"\"\"\n ```\n \n+#### Overriding field level json schema\n+Pydantic allows you to override the JSON schema for individual fields using the `json_schema_override parameter` in\n+the [`Field`][pydantic.fields.Field] function. This can be useful when you need to customize the schema\n+representation of a field beyond what Pydantic generates by default.\n+\n+To use `json_schema_override`, pass a dictionary with the desired schema attributes to the [`Field`][pydantic.fields.Field]\n+function. This dictionary will be merged with the automatically generated schema.\n+\n+Supported overrides:\n+\n+* `nullable`: Indicates whether the field can be `null`. If set to `False` to make it non-nullable in the json schema.",
        "comment_created_at": "2024-11-18T18:56:15+00:00",
        "comment_author": "hyperlint-ai[bot]",
        "comment_body": "````suggestion\n* `nullable`: Indicates whether the field can be `null`. If set to `False`, it makes the field non-nullable in the JSON schema.\n````\n**Issues:**\n\n- Style Guide - (Spelling-error) Did you really mean 'json'?\n\n**Fix Explanation:**\n\nThe term 'json' should be capitalized to 'JSON' to adhere to standard naming conventions. This change improves clarity and maintains consistency with common technical documentation practices.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1842629887",
    "pr_number": 10844,
    "pr_file": "docs/migration.md",
    "created_at": "2024-11-14T17:27:03+00:00",
    "commented_code": "* The new `@field_validator` decorator does not have the `each_item` keyword argument; validators you want to\n         apply to items within a generic container should be added by annotating the type argument. See\n         [validators in Annotated metadata](concepts/types.md#composing-types-via-annotated) for details.\n-        This looks like `List[Annotated[int, Field(ge=0)]]`\n+        This looks like `List[Annotated[int, Field(ge=0)]]`. In case you have a more sophisticated validator, you could use the `BeforeValidator` or `AfterValidator` as below:\n+      ```python\n+      from typing import Annotated, List\n+\n+      from pydantic import AfterValidator, BaseModel",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1842629887",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10844,
        "pr_file": "docs/migration.md",
        "discussion_id": "1842629887",
        "commented_code": "@@ -369,7 +369,28 @@ See the [`ConfigDict` API reference][pydantic.config.ConfigDict] for more detail\n     * The new `@field_validator` decorator does not have the `each_item` keyword argument; validators you want to\n         apply to items within a generic container should be added by annotating the type argument. See\n         [validators in Annotated metadata](concepts/types.md#composing-types-via-annotated) for details.\n-        This looks like `List[Annotated[int, Field(ge=0)]]`\n+        This looks like `List[Annotated[int, Field(ge=0)]]`. In case you have a more sophisticated validator, you could use the `BeforeValidator` or `AfterValidator` as below:\n+      ```python\n+      from typing import Annotated, List\n+\n+      from pydantic import AfterValidator, BaseModel",
        "comment_created_at": "2024-11-14T17:27:03+00:00",
        "comment_author": "hyperlint-ai[bot]",
        "comment_body": "````suggestion\n      from Pydantic import AfterValidator, BaseModel\n````\n**Issues:**\n\n- Style Guide - (Terms-error) Use 'Pydantic' instead of 'pydantic'.\n\n**Fix Explanation:**\n\nThe library name 'Pydantic' should be capitalized to adhere to the style guide. This change ensures consistency and correctness in the documentation.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1841078352",
    "pr_number": 10838,
    "pr_file": "HISTORY.md",
    "created_at": "2024-11-13T19:54:15+00:00",
    "commented_code": "+## v2.10.0b2 (2024-11-13)\n+\n+[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.10.0b2)\n+\n+### What's Changed\n+\n+#### Packaging\n+\n+* Replaced pdm with uv by @frfahim in [#10727](https://github.com/pydantic/pydantic/pull/10727)\n+\n+#### New Features\n+\n+* Add `trailing-strings` support to `experimental_allow_partial` by @sydney-runkle in [#10825](https://github.com/pydantic/pydantic/pull/10825)\n+* Add `rebuild()` method for `TypeAdapter` and simplify `defer_build` patterns by @sydney-runkle in [#10537](https://github.com/pydantic/pydantic/pull/10537)\n+\n+#### Fixes\n+\n+* Refactor `_typing_extra` module by @Viicos in [#10725](https://github.com/pydantic/pydantic/pull/10725)\n+* Support intuitive equality for urls by @sydney-runkle in [#10798](https://github.com/pydantic/pydantic/pull/10798)",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1841078352",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10838,
        "pr_file": "HISTORY.md",
        "discussion_id": "1841078352",
        "commented_code": "@@ -1,3 +1,34 @@\n+## v2.10.0b2 (2024-11-13)\n+\n+[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.10.0b2)\n+\n+### What's Changed\n+\n+#### Packaging\n+\n+* Replaced pdm with uv by @frfahim in [#10727](https://github.com/pydantic/pydantic/pull/10727)\n+\n+#### New Features\n+\n+* Add `trailing-strings` support to `experimental_allow_partial` by @sydney-runkle in [#10825](https://github.com/pydantic/pydantic/pull/10825)\n+* Add `rebuild()` method for `TypeAdapter` and simplify `defer_build` patterns by @sydney-runkle in [#10537](https://github.com/pydantic/pydantic/pull/10537)\n+\n+#### Fixes\n+\n+* Refactor `_typing_extra` module by @Viicos in [#10725](https://github.com/pydantic/pydantic/pull/10725)\n+* Support intuitive equality for urls by @sydney-runkle in [#10798](https://github.com/pydantic/pydantic/pull/10798)",
        "comment_created_at": "2024-11-13T19:54:15+00:00",
        "comment_author": "hyperlint-ai[bot]",
        "comment_body": "````suggestion\n* Support intuitive equality for URLs by @sydney-runkle in [#10798](https://github.com/pydantic/pydantic/pull/10798)\n````\n**Issues:**\n\n- Style Guide - (Spelling-error) Did you really mean 'urls'?\n\n**Fix Explanation:**\n\nThe term 'urls' should be capitalized to 'URLs' as it is an acronym for 'Uniform Resource Locators'. This aligns with standard technical writing practices where acronyms are capitalized. The rest of the sentence is correct and does not require any changes.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1831378925",
    "pr_number": 10779,
    "pr_file": "HISTORY.md",
    "created_at": "2024-11-06T16:39:22+00:00",
    "commented_code": "+## v2.10.0b1 (2024-11-06)\n+\n+[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.10.0b1)\n+\n+### What's Changed\n+\n+### Packaging\n+\n+* Bump `pydantic-core` to `v2.26.0` by @samuelcolvin in [#10748](https://github.com/pydantic/pydantic/pull/10748)\n+\n+#### New Features\n+\n+* Support `fractions.Fraction` by @sydney-runkle in [#10318](https://github.com/pydantic/pydantic/pull/10318)\n+* Support `Hashable` for json validation by @sydney-runkle in [#10324](https://github.com/pydantic/pydantic/pull/10324)\n+* Add a `SocketPath` type for `linux` systems by @theunkn0wn1 in [#10378](https://github.com/pydantic/pydantic/pull/10378)\n+* Allow arbitrary refs in JSON schema `examples` by @sydney-runkle in [#10417](https://github.com/pydantic/pydantic/pull/10417)\n+* Support `defer_build` for Pydantic dataclasses by @Viicos in [#10313](https://github.com/pydantic/pydantic/pull/10313)\n+* Adding v1 / v2 incompatibility warning for nested v1 model by @sydney-runkle in [#10431](https://github.com/pydantic/pydantic/pull/10431)\n+* Add support for unpacked `TypedDict` to type hint variadic keyword arguments with `@validate_call` by @Viicos in [#10416](https://github.com/pydantic/pydantic/pull/10416)\n+* Support compiled patterns in `protected_namespaces` by @sydney-runkle in [#10522](https://github.com/pydantic/pydantic/pull/10522)\n+* Add support for `propertyNames` in JSON schema by @FlorianSW in [#10478](https://github.com/pydantic/pydantic/pull/10478)\n+* Adding `__replace__` protocol for Python 3.13+ support by @sydney-runkle in [#10596](https://github.com/pydantic/pydantic/pull/10596)\n+* Expose public `sort` method for JSON schema generation by @sydney-runkle in [#10595](https://github.com/pydantic/pydantic/pull/10595)\n+* Add runtime validation of `@validate_call` callable argument by @Viicos in [#10627](https://github.com/pydantic/pydantic/pull/10627)\n+* Add `experimental_allow_partial` support by @samuelcolvin in [#10748](https://github.com/pydantic/pydantic/pull/10748)\n+* Support default factories taking validated data as an argument by @Viicos in [#10678](https://github.com/pydantic/pydantic/pull/10678)\n+* Allow subclassing `ValidationError` and `PydanticCustomError` by @Youssefares in [pydantic/pydantic-core#1413](https://github.com/pydantic/pydantic-core/pull/1413) - see release blog post for usage details.\n+\n+#### Changes\n+\n+* Don't allow customization of `SchemaGenerator` until interface is more stable by @sydney-runkle in [#10303](https://github.com/pydantic/pydantic/pull/10303)\n+* Cleanly `defer_build` on `TypeAdapters`, removing experimental flag by @sydney-runkle in [#10329](https://github.com/pydantic/pydantic/pull/10329)\n+* Fix `mro` of generic subclass  by @kc0506 in [#10100](https://github.com/pydantic/pydantic/pull/10100)\n+* Strip whitespaces on JSON Schema title generation by @sydney-runkle in [#10404](https://github.com/pydantic/pydantic/pull/10404)\n+* Use `b64decode` and `b64encode` for `Base64Bytes` type by @sydney-runkle in [#10486](https://github.com/pydantic/pydantic/pull/10486)\n+* Relax protected namespace config default by @sydney-runkle in [#10441](https://github.com/pydantic/pydantic/pull/10441) - see release blog post for more details.\n+* Revalidate parametrized generics if instance's origin is subclass of OG class by @sydney-runkle in [#10666](https://github.com/pydantic/pydantic/pull/10666)\n+* Warn if configuration is specified on the `@dataclass` decorator and with the `__pydantic_config__` attribute by @sydney-runkle in [#10406](https://github.com/pydantic/pydantic/pull/10406)\n+* Migrate to subclassing instead of annotated approach for pydantic url types by @sydney-runkle in [#10662](https://github.com/pydantic/pydantic/pull/10662)\n+* Change JSON schema generation of `Literal`s and `Enums` by @Viicos in [#10692](https://github.com/pydantic/pydantic/pull/10692)\n+* Do not require padding when decoding `base64` bytes by @bschoenmaeckers in [pydantic/pydantic-core#1448](https://github.com/pydantic/pydantic-core/pull/1448)\n+* Support dates all the way to 1BC by @changhc in [pydantic/speedate#77](https://github.com/pydantic/speedate/pull/77)\n+\n+#### Performance\n+\n+* Schema cleaning: skip unnecessary copies during schema walking by @Viicos in [#10286](https://github.com/pydantic/pydantic/pull/10286)\n+* Refactor namespace logic for annotations evaluation by @Viicos in [#10530](https://github.com/pydantic/pydantic/pull/10530)\n+* Improve email regexp on edge cases by @AlekseyLobanov in [#10601](https://github.com/pydantic/pydantic/pull/10601)\n+* `CoreMetadata` refactor with an emphasis on documentation, schema build time performance, and reducing complexity by @sydney-runkle in [#10675](https://github.com/pydantic/pydantic/pull/10675)\n+\n+#### Fixes\n+\n+* Remove guarding check on `computed_field` with `field_serializer` by @nix010 in [#10390](https://github.com/pydantic/pydantic/pull/10390)\n+* Do not check for `str` when using `has_instance_in_type` by @Viicos in [#10317](https://github.com/pydantic/pydantic/pull/10317)\n+* Fix `Predicate` issue in `v2.9.0` by @sydney-runkle in [#10321](https://github.com/pydantic/pydantic/pull/10321)\n+* Fixing `annotated-types` bound by @sydney-runkle in [#10327](https://github.com/pydantic/pydantic/pull/10327)\n+* Turn `tzdata` install requirement into optional `timezone` dependency by @jakob-keller in [#10331](https://github.com/pydantic/pydantic/pull/10331)\n+* Use correct types namespace when building `namedtuple` core schemas by @Viicos in [#10337](https://github.com/pydantic/pydantic/pull/10337)\n+* Fix evaluation of stringified annotations during namespace inspection by @Viicos in [#10347](https://github.com/pydantic/pydantic/pull/10347)\n+* Fix `IncEx` type alias definition by @Viicos in [#10339](https://github.com/pydantic/pydantic/pull/10339)\n+* Do not error when trying to evaluate annotations of private attributes by @Viicos in [#10358](https://github.com/pydantic/pydantic/pull/10358)\n+* Fix nested type statement by @kc0506 in [#10369](https://github.com/pydantic/pydantic/pull/10369)\n+* Simplify unions involving `Any` or `Never` when replacing type variables by @Viicos in [#10338](https://github.com/pydantic/pydantic/pull/10338)\n+* Improve typing of `ModelMetaclass.mro` by @Viicos in [#10372](https://github.com/pydantic/pydantic/pull/10372)\n+* Fix class access of deprecated `computed_field`s by @Viicos in [#10391](https://github.com/pydantic/pydantic/pull/10391)\n+* Make sure `inspect.iscoroutinefunction` works on coroutines decorated with `@validate_call` by @MovisLi in [#10374](https://github.com/pydantic/pydantic/pull/10374)\n+* Fix `NameError` when using `validate_call` with PEP 695 on a class by @kc0506 in [#10380](https://github.com/pydantic/pydantic/pull/10380)\n+* Fix `ZoneInfo` with various invalid types by @sydney-runkle in [#10408](https://github.com/pydantic/pydantic/pull/10408)\n+* Fix `PydanticUserError` on empty `model_config` with annotations by @cdwilson in [#10412](https://github.com/pydantic/pydantic/pull/10412)\n+* Fix variance issue in `_IncEx` type alias, only allow `True` by @Viicos in [#10414](https://github.com/pydantic/pydantic/pull/10414)\n+* Fix serialization schema generation when using `PlainValidator` by @Viicos in [#10427](https://github.com/pydantic/pydantic/pull/10427)\n+* Fix schema generation error when serialization schema holds references by @Viicos in [#10444](https://github.com/pydantic/pydantic/pull/10444)\n+* Inline references if possible when generating schema for `json_schema_input_type` by @Viicos in [#10439](https://github.com/pydantic/pydantic/pull/10439)\n+* Fix recursive arguments in `Representation` by @Viicos in [#10480](https://github.com/pydantic/pydantic/pull/10480)\n+* Fix representation for builtin function types by @kschwab in [#10479](https://github.com/pydantic/pydantic/pull/10479)\n+* Simplify `dataclass` check in `modify_model_json_schema` by @Viicos in [#10503](https://github.com/pydantic/pydantic/pull/10503)\n+* Add python validators for decimal constraints (`max_digits` and `decimal_places`) by @sydney-runkle in [#10506](https://github.com/pydantic/pydantic/pull/10506)\n+* Fix handling of `Literal` in `has_instance_in_type` by @Viicos in [#10514](https://github.com/pydantic/pydantic/pull/10514)\n+* Only fetch `__pydantic_core_schema__` from the current class during schema generation by @Viicos in [#10518](https://github.com/pydantic/pydantic/pull/10518)\n+* Fix `stacklevel` on deprecation warnings for `BaseModel` by @sydney-runkle in [#10520](https://github.com/pydantic/pydantic/pull/10520)\n+* Fix warning `stacklevel` in `BaseModel.__init__` by @Viicos in [#10526](https://github.com/pydantic/pydantic/pull/10526)\n+* Improve error handling for in-evaluable refs for discriminator application by @sydney-runkle in [#10440](https://github.com/pydantic/pydantic/pull/10440)\n+* Change the signature of `ConfigWrapper.core_config` to take the title directly by @Viicos in [#10562](https://github.com/pydantic/pydantic/pull/10562)\n+* Do not use the previous config from the stack for dataclasses without config by @Viicos in [#10576](https://github.com/pydantic/pydantic/pull/10576)\n+* Fix serialization for IP types with `mode='python'` by @sydney-runkle in [#10594](https://github.com/pydantic/pydantic/pull/10594)\n+* Support constraint application for `Base64Etc` types by @sydney-runkle in [#10584](https://github.com/pydantic/pydantic/pull/10584)\n+* Fix `validate_call` ignoring `Field` in `Annotated` by @kc0506 in [#10610](https://github.com/pydantic/pydantic/pull/10610)\n+* Raise an error when `Self` is invalid by @kc0506 in [#10609](https://github.com/pydantic/pydantic/pull/10609)\n+* Using `core_schema.InvalidSchema` instead of metadata injection + checks by @sydney-runkle in [#10523](https://github.com/pydantic/pydantic/pull/10523)\n+* Tweak type alias logic by @kc0506 in [#10643](https://github.com/pydantic/pydantic/pull/10643)\n+* Support usage of `type` with `typing.Self` and type aliases by @kc0506 in [#10621](https://github.com/pydantic/pydantic/pull/10621)\n+* Use overloads for `Field` and `PrivateAttr` functions by @Viicos in [#10651](https://github.com/pydantic/pydantic/pull/10651)\n+* Clean up the `mypy` plugin implementation by @Viicos in [#10669](https://github.com/pydantic/pydantic/pull/10669)\n+* Properly check for `typing_extensions` variant of `TypeAliasType` by @Daraan in [#10713](https://github.com/pydantic/pydantic/pull/10713)\n+* Allow any mapping in `BaseModel.model_copy()` by @Viicos in [#10751](https://github.com/pydantic/pydantic/pull/10751)\n+* Fix `isinstance` behavior for urls by @sydney-runkle in [#10766](https://github.com/pydantic/pydantic/pull/10766)\n+* Ensure `cached_property` can be set on Pydantic models by @Viicos in [#10774](https://github.com/pydantic/pydantic/pull/10774)\n+* Fix equality checks for primitives in literals by @sydney-runkle in [pydantic/pydantic-core#1459](https://github.com/pydantic/pydantic-core/pull/1459)\n+* Properly enforce `host_required` for URLs by @Viicos in [pydantic/pydantic-core#1488](https://github.com/pydantic/pydantic-core/pull/1488)\n+* Fix when `coerce_numbers_to_str` enabled and string has invalid unicode character by @andrey-berenda in [pydantic/pydantic-core#1515](https://github.com/pydantic/pydantic-core/pull/1515)",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1831378925",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10779,
        "pr_file": "HISTORY.md",
        "discussion_id": "1831378925",
        "commented_code": "@@ -1,3 +1,124 @@\n+## v2.10.0b1 (2024-11-06)\n+\n+[GitHub release](https://github.com/pydantic/pydantic/releases/tag/v2.10.0b1)\n+\n+### What's Changed\n+\n+### Packaging\n+\n+* Bump `pydantic-core` to `v2.26.0` by @samuelcolvin in [#10748](https://github.com/pydantic/pydantic/pull/10748)\n+\n+#### New Features\n+\n+* Support `fractions.Fraction` by @sydney-runkle in [#10318](https://github.com/pydantic/pydantic/pull/10318)\n+* Support `Hashable` for json validation by @sydney-runkle in [#10324](https://github.com/pydantic/pydantic/pull/10324)\n+* Add a `SocketPath` type for `linux` systems by @theunkn0wn1 in [#10378](https://github.com/pydantic/pydantic/pull/10378)\n+* Allow arbitrary refs in JSON schema `examples` by @sydney-runkle in [#10417](https://github.com/pydantic/pydantic/pull/10417)\n+* Support `defer_build` for Pydantic dataclasses by @Viicos in [#10313](https://github.com/pydantic/pydantic/pull/10313)\n+* Adding v1 / v2 incompatibility warning for nested v1 model by @sydney-runkle in [#10431](https://github.com/pydantic/pydantic/pull/10431)\n+* Add support for unpacked `TypedDict` to type hint variadic keyword arguments with `@validate_call` by @Viicos in [#10416](https://github.com/pydantic/pydantic/pull/10416)\n+* Support compiled patterns in `protected_namespaces` by @sydney-runkle in [#10522](https://github.com/pydantic/pydantic/pull/10522)\n+* Add support for `propertyNames` in JSON schema by @FlorianSW in [#10478](https://github.com/pydantic/pydantic/pull/10478)\n+* Adding `__replace__` protocol for Python 3.13+ support by @sydney-runkle in [#10596](https://github.com/pydantic/pydantic/pull/10596)\n+* Expose public `sort` method for JSON schema generation by @sydney-runkle in [#10595](https://github.com/pydantic/pydantic/pull/10595)\n+* Add runtime validation of `@validate_call` callable argument by @Viicos in [#10627](https://github.com/pydantic/pydantic/pull/10627)\n+* Add `experimental_allow_partial` support by @samuelcolvin in [#10748](https://github.com/pydantic/pydantic/pull/10748)\n+* Support default factories taking validated data as an argument by @Viicos in [#10678](https://github.com/pydantic/pydantic/pull/10678)\n+* Allow subclassing `ValidationError` and `PydanticCustomError` by @Youssefares in [pydantic/pydantic-core#1413](https://github.com/pydantic/pydantic-core/pull/1413) - see release blog post for usage details.\n+\n+#### Changes\n+\n+* Don't allow customization of `SchemaGenerator` until interface is more stable by @sydney-runkle in [#10303](https://github.com/pydantic/pydantic/pull/10303)\n+* Cleanly `defer_build` on `TypeAdapters`, removing experimental flag by @sydney-runkle in [#10329](https://github.com/pydantic/pydantic/pull/10329)\n+* Fix `mro` of generic subclass  by @kc0506 in [#10100](https://github.com/pydantic/pydantic/pull/10100)\n+* Strip whitespaces on JSON Schema title generation by @sydney-runkle in [#10404](https://github.com/pydantic/pydantic/pull/10404)\n+* Use `b64decode` and `b64encode` for `Base64Bytes` type by @sydney-runkle in [#10486](https://github.com/pydantic/pydantic/pull/10486)\n+* Relax protected namespace config default by @sydney-runkle in [#10441](https://github.com/pydantic/pydantic/pull/10441) - see release blog post for more details.\n+* Revalidate parametrized generics if instance's origin is subclass of OG class by @sydney-runkle in [#10666](https://github.com/pydantic/pydantic/pull/10666)\n+* Warn if configuration is specified on the `@dataclass` decorator and with the `__pydantic_config__` attribute by @sydney-runkle in [#10406](https://github.com/pydantic/pydantic/pull/10406)\n+* Migrate to subclassing instead of annotated approach for pydantic url types by @sydney-runkle in [#10662](https://github.com/pydantic/pydantic/pull/10662)\n+* Change JSON schema generation of `Literal`s and `Enums` by @Viicos in [#10692](https://github.com/pydantic/pydantic/pull/10692)\n+* Do not require padding when decoding `base64` bytes by @bschoenmaeckers in [pydantic/pydantic-core#1448](https://github.com/pydantic/pydantic-core/pull/1448)\n+* Support dates all the way to 1BC by @changhc in [pydantic/speedate#77](https://github.com/pydantic/speedate/pull/77)\n+\n+#### Performance\n+\n+* Schema cleaning: skip unnecessary copies during schema walking by @Viicos in [#10286](https://github.com/pydantic/pydantic/pull/10286)\n+* Refactor namespace logic for annotations evaluation by @Viicos in [#10530](https://github.com/pydantic/pydantic/pull/10530)\n+* Improve email regexp on edge cases by @AlekseyLobanov in [#10601](https://github.com/pydantic/pydantic/pull/10601)\n+* `CoreMetadata` refactor with an emphasis on documentation, schema build time performance, and reducing complexity by @sydney-runkle in [#10675](https://github.com/pydantic/pydantic/pull/10675)\n+\n+#### Fixes\n+\n+* Remove guarding check on `computed_field` with `field_serializer` by @nix010 in [#10390](https://github.com/pydantic/pydantic/pull/10390)\n+* Do not check for `str` when using `has_instance_in_type` by @Viicos in [#10317](https://github.com/pydantic/pydantic/pull/10317)\n+* Fix `Predicate` issue in `v2.9.0` by @sydney-runkle in [#10321](https://github.com/pydantic/pydantic/pull/10321)\n+* Fixing `annotated-types` bound by @sydney-runkle in [#10327](https://github.com/pydantic/pydantic/pull/10327)\n+* Turn `tzdata` install requirement into optional `timezone` dependency by @jakob-keller in [#10331](https://github.com/pydantic/pydantic/pull/10331)\n+* Use correct types namespace when building `namedtuple` core schemas by @Viicos in [#10337](https://github.com/pydantic/pydantic/pull/10337)\n+* Fix evaluation of stringified annotations during namespace inspection by @Viicos in [#10347](https://github.com/pydantic/pydantic/pull/10347)\n+* Fix `IncEx` type alias definition by @Viicos in [#10339](https://github.com/pydantic/pydantic/pull/10339)\n+* Do not error when trying to evaluate annotations of private attributes by @Viicos in [#10358](https://github.com/pydantic/pydantic/pull/10358)\n+* Fix nested type statement by @kc0506 in [#10369](https://github.com/pydantic/pydantic/pull/10369)\n+* Simplify unions involving `Any` or `Never` when replacing type variables by @Viicos in [#10338](https://github.com/pydantic/pydantic/pull/10338)\n+* Improve typing of `ModelMetaclass.mro` by @Viicos in [#10372](https://github.com/pydantic/pydantic/pull/10372)\n+* Fix class access of deprecated `computed_field`s by @Viicos in [#10391](https://github.com/pydantic/pydantic/pull/10391)\n+* Make sure `inspect.iscoroutinefunction` works on coroutines decorated with `@validate_call` by @MovisLi in [#10374](https://github.com/pydantic/pydantic/pull/10374)\n+* Fix `NameError` when using `validate_call` with PEP 695 on a class by @kc0506 in [#10380](https://github.com/pydantic/pydantic/pull/10380)\n+* Fix `ZoneInfo` with various invalid types by @sydney-runkle in [#10408](https://github.com/pydantic/pydantic/pull/10408)\n+* Fix `PydanticUserError` on empty `model_config` with annotations by @cdwilson in [#10412](https://github.com/pydantic/pydantic/pull/10412)\n+* Fix variance issue in `_IncEx` type alias, only allow `True` by @Viicos in [#10414](https://github.com/pydantic/pydantic/pull/10414)\n+* Fix serialization schema generation when using `PlainValidator` by @Viicos in [#10427](https://github.com/pydantic/pydantic/pull/10427)\n+* Fix schema generation error when serialization schema holds references by @Viicos in [#10444](https://github.com/pydantic/pydantic/pull/10444)\n+* Inline references if possible when generating schema for `json_schema_input_type` by @Viicos in [#10439](https://github.com/pydantic/pydantic/pull/10439)\n+* Fix recursive arguments in `Representation` by @Viicos in [#10480](https://github.com/pydantic/pydantic/pull/10480)\n+* Fix representation for builtin function types by @kschwab in [#10479](https://github.com/pydantic/pydantic/pull/10479)\n+* Simplify `dataclass` check in `modify_model_json_schema` by @Viicos in [#10503](https://github.com/pydantic/pydantic/pull/10503)\n+* Add python validators for decimal constraints (`max_digits` and `decimal_places`) by @sydney-runkle in [#10506](https://github.com/pydantic/pydantic/pull/10506)\n+* Fix handling of `Literal` in `has_instance_in_type` by @Viicos in [#10514](https://github.com/pydantic/pydantic/pull/10514)\n+* Only fetch `__pydantic_core_schema__` from the current class during schema generation by @Viicos in [#10518](https://github.com/pydantic/pydantic/pull/10518)\n+* Fix `stacklevel` on deprecation warnings for `BaseModel` by @sydney-runkle in [#10520](https://github.com/pydantic/pydantic/pull/10520)\n+* Fix warning `stacklevel` in `BaseModel.__init__` by @Viicos in [#10526](https://github.com/pydantic/pydantic/pull/10526)\n+* Improve error handling for in-evaluable refs for discriminator application by @sydney-runkle in [#10440](https://github.com/pydantic/pydantic/pull/10440)\n+* Change the signature of `ConfigWrapper.core_config` to take the title directly by @Viicos in [#10562](https://github.com/pydantic/pydantic/pull/10562)\n+* Do not use the previous config from the stack for dataclasses without config by @Viicos in [#10576](https://github.com/pydantic/pydantic/pull/10576)\n+* Fix serialization for IP types with `mode='python'` by @sydney-runkle in [#10594](https://github.com/pydantic/pydantic/pull/10594)\n+* Support constraint application for `Base64Etc` types by @sydney-runkle in [#10584](https://github.com/pydantic/pydantic/pull/10584)\n+* Fix `validate_call` ignoring `Field` in `Annotated` by @kc0506 in [#10610](https://github.com/pydantic/pydantic/pull/10610)\n+* Raise an error when `Self` is invalid by @kc0506 in [#10609](https://github.com/pydantic/pydantic/pull/10609)\n+* Using `core_schema.InvalidSchema` instead of metadata injection + checks by @sydney-runkle in [#10523](https://github.com/pydantic/pydantic/pull/10523)\n+* Tweak type alias logic by @kc0506 in [#10643](https://github.com/pydantic/pydantic/pull/10643)\n+* Support usage of `type` with `typing.Self` and type aliases by @kc0506 in [#10621](https://github.com/pydantic/pydantic/pull/10621)\n+* Use overloads for `Field` and `PrivateAttr` functions by @Viicos in [#10651](https://github.com/pydantic/pydantic/pull/10651)\n+* Clean up the `mypy` plugin implementation by @Viicos in [#10669](https://github.com/pydantic/pydantic/pull/10669)\n+* Properly check for `typing_extensions` variant of `TypeAliasType` by @Daraan in [#10713](https://github.com/pydantic/pydantic/pull/10713)\n+* Allow any mapping in `BaseModel.model_copy()` by @Viicos in [#10751](https://github.com/pydantic/pydantic/pull/10751)\n+* Fix `isinstance` behavior for urls by @sydney-runkle in [#10766](https://github.com/pydantic/pydantic/pull/10766)\n+* Ensure `cached_property` can be set on Pydantic models by @Viicos in [#10774](https://github.com/pydantic/pydantic/pull/10774)\n+* Fix equality checks for primitives in literals by @sydney-runkle in [pydantic/pydantic-core#1459](https://github.com/pydantic/pydantic-core/pull/1459)\n+* Properly enforce `host_required` for URLs by @Viicos in [pydantic/pydantic-core#1488](https://github.com/pydantic/pydantic-core/pull/1488)\n+* Fix when `coerce_numbers_to_str` enabled and string has invalid unicode character by @andrey-berenda in [pydantic/pydantic-core#1515](https://github.com/pydantic/pydantic-core/pull/1515)",
        "comment_created_at": "2024-11-06T16:39:22+00:00",
        "comment_author": "hyperlint-ai[bot]",
        "comment_body": "````suggestion\n* Fix when `coerce_numbers_to_str` enabled and string has invalid Unicode character by @andrey-berenda in [pydantic/pydantic-core#1515](https://github.com/pydantic/pydantic-core/pull/1515)\n````\n**Issues:**\n\n- Style Guide - (Spelling-error) Did you really mean 'unicode'?\n- Style Guide - (Terms-error) Use 'Pydantic' instead of 'pydantic'.\n- Style Guide - (Terms-error) Use 'Pydantic' instead of 'pydantic'.\n\n**Fix Explanation:**\n\nThe term 'unicode' should be capitalized to 'Unicode' to align with the style guide, as it is a proper noun. The other issues identified are part of a URL or a username, so they should not be changed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1811027227",
    "pr_number": 10686,
    "pr_file": "docs/concepts/dataclasses.md",
    "created_at": "2024-10-22T16:15:54+00:00",
    "commented_code": "#> Model(dc=DC2(a=ArbitraryType(value=3), b='qwe'), other='other')\n ```\n \n-### Checking if a dataclass is a pydantic dataclass\n+### Checking if a dataclass is a Pydantic dataclass\n \n-Pydantic dataclasses are still considered dataclasses, so using `dataclasses.is_dataclass` will return `True`. To check if a type is specifically a pydantic dataclass you can use `pydantic.dataclasses.is_pydantic_dataclass`.\n+Pydantic dataclasses are still considered dataclasses, so using [`dataclasses.is_dataclass`][] will return `True`. To check\n+if a type is specifically a pydantic dataclass you can use the [`is_pydantic_dataclass`][pydantic.dataclasses.is_pydantic_dataclass]",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1811027227",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10686,
        "pr_file": "docs/concepts/dataclasses.md",
        "discussion_id": "1811027227",
        "commented_code": "@@ -362,9 +346,11 @@ print(repr(m))\n #> Model(dc=DC2(a=ArbitraryType(value=3), b='qwe'), other='other')\n ```\n \n-### Checking if a dataclass is a pydantic dataclass\n+### Checking if a dataclass is a Pydantic dataclass\n \n-Pydantic dataclasses are still considered dataclasses, so using `dataclasses.is_dataclass` will return `True`. To check if a type is specifically a pydantic dataclass you can use `pydantic.dataclasses.is_pydantic_dataclass`.\n+Pydantic dataclasses are still considered dataclasses, so using [`dataclasses.is_dataclass`][] will return `True`. To check\n+if a type is specifically a pydantic dataclass you can use the [`is_pydantic_dataclass`][pydantic.dataclasses.is_pydantic_dataclass]",
        "comment_created_at": "2024-10-22T16:15:54+00:00",
        "comment_author": "hyperlint-ai[bot]",
        "comment_body": "````suggestion\nif a type is specifically a Pydantic dataclass you can use the [`is_pydantic_dataclass`][pydantic.dataclasses.is_pydantic_dataclass]\n````\n**Issues:**\n\n- Style Guide - (Terms-error) Use 'Pydantic' instead of 'pydantic'.\n- Style Guide - (Terms-error) Use 'Pydantic' instead of 'pydantic'.\n\n**Fix Explanation:**\n\nThe term 'Pydantic' should be capitalized to adhere to the style guide, as it is likely a proper noun or brand name. This change ensures consistency and professionalism in the documentation.",
        "pr_file_module": null
      }
    ]
  }
]