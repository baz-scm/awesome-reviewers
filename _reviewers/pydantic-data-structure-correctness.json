[
  {
    "discussion_id": "1946832381",
    "pr_number": 11402,
    "pr_file": "docs/errors/validation_errors.md",
    "created_at": "2025-02-07T16:37:42+00:00",
    "commented_code": "#> 'set_type'\n ```\n \n+## `set_item_not_hashable`\n+\n+This error is raised when one of the values being added to a `set` field is not hashable:",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1946832381",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11402,
        "pr_file": "docs/errors/validation_errors.md",
        "discussion_id": "1946832381",
        "commented_code": "@@ -1611,6 +1611,31 @@ except ValidationError as exc:\n     #> 'set_type'\n ```\n \n+## `set_item_not_hashable`\n+\n+This error is raised when one of the values being added to a `set` field is not hashable:",
        "comment_created_at": "2025-02-07T16:37:42+00:00",
        "comment_author": "Viicos",
        "comment_body": "```suggestion\r\nThis error is raised when an unhashable value is validated against a [`set`][] or a [`frozenset`][]```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1808812343",
    "pr_number": 10624,
    "pr_file": "docs/errors/usage_errors.md",
    "created_at": "2024-10-21T13:20:16+00:00",
    "commented_code": "assert exc_info.code == 'removed-kwargs'\n ```\n \n+## Circular reference schema {#circular-reference-schema}\n+\n+While Pydantic can handle recursive types, it does not allow _directly_ circular references in the schema.\n+\n+For example, these are valid types:\n+\n+```py test=\"skip\" lint=\"skip\" upgrade=\"skip\"\n+type A = A | int\n+\n+type B = list[C]\n+type C = B | None\n+```",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1808812343",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10624,
        "pr_file": "docs/errors/usage_errors.md",
        "discussion_id": "1808812343",
        "commented_code": "@@ -522,6 +522,53 @@ except PydanticUserError as exc_info:\n     assert exc_info.code == 'removed-kwargs'\n ```\n \n+## Circular reference schema {#circular-reference-schema}\n+\n+While Pydantic can handle recursive types, it does not allow _directly_ circular references in the schema.\n+\n+For example, these are valid types:\n+\n+```py test=\"skip\" lint=\"skip\" upgrade=\"skip\"\n+type A = A | int\n+\n+type B = list[C]\n+type C = B | None\n+```",
        "comment_created_at": "2024-10-21T13:20:16+00:00",
        "comment_author": "Viicos",
        "comment_body": "Actually this example is invalid from a type checking perspective, and it does makes sense in some way. I think the logic applied is \"can we end up with a stop when trying to match a value to the type?\".\r\n\r\nFor instance, with\r\n\r\n```python\r\ntype B = list[C]\r\ntype C = B | None\r\n```\r\n\r\nthe value `[None, [[None]], []]` successfully matches and we came to stop, thanks to the `| None` part. without it, there's no such value that can match the type alias without dealing with infinite recursion (hence my suggestion above).\r\n\r\nLet's go with:\r\n\r\n```suggestion\r\nFor example, this is a valid type alias:\r\n\r\n```py test=\"skip\" lint=\"skip\" upgrade=\"skip\"\r\ntype A = list[A] | None\r\n```\r\n```",
        "pr_file_module": null
      }
    ]
  }
]