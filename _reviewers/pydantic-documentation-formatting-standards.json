[
  {
    "discussion_id": "2075739238",
    "pr_number": 11838,
    "pr_file": "docs/examples/files.md",
    "created_at": "2025-05-06T15:31:59+00:00",
    "commented_code": "json_string = pathlib.Path('people.json').read_text()\n people = person_list_adapter.validate_json(json_string)\n-print(people)\n+print(repr(people))",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "2075739238",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11838,
        "pr_file": "docs/examples/files.md",
        "discussion_id": "2075739238",
        "commented_code": "@@ -123,7 +123,7 @@ person_list_adapter = TypeAdapter(list[Person])  # (1)!\n \n json_string = pathlib.Path('people.json').read_text()\n people = person_list_adapter.validate_json(json_string)\n-print(people)\n+print(repr(people))",
        "comment_created_at": "2025-05-06T15:31:59+00:00",
        "comment_author": "Viicos",
        "comment_body": "Was there a reason to change these? These examples are not tested (marked as `test=\"skip\"`) so I think this isn't right now, the actual comment showing the output is most likely different.",
        "pr_file_module": null
      },
      {
        "comment_id": "2075783987",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11838,
        "pr_file": "docs/examples/files.md",
        "discussion_id": "2075739238",
        "commented_code": "@@ -123,7 +123,7 @@ person_list_adapter = TypeAdapter(list[Person])  # (1)!\n \n json_string = pathlib.Path('people.json').read_text()\n people = person_list_adapter.validate_json(json_string)\n-print(people)\n+print(repr(people))",
        "comment_created_at": "2025-05-06T15:56:39+00:00",
        "comment_author": "karta9821",
        "comment_body": "This case used print(people) while the others used print(repr(people)). The output in the console is the same, and it has now been standardized across all cases",
        "pr_file_module": null
      },
      {
        "comment_id": "2099834112",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11838,
        "pr_file": "docs/examples/files.md",
        "discussion_id": "2075739238",
        "commented_code": "@@ -123,7 +123,7 @@ person_list_adapter = TypeAdapter(list[Person])  # (1)!\n \n json_string = pathlib.Path('people.json').read_text()\n people = person_list_adapter.validate_json(json_string)\n-print(people)\n+print(repr(people))",
        "comment_created_at": "2025-05-21T09:36:08+00:00",
        "comment_author": "Viicos",
        "comment_body": "Ah then let's unify all of them using `print(<inst>)` instead of `print(repr(<inst>))`",
        "pr_file_module": null
      },
      {
        "comment_id": "2099897100",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11838,
        "pr_file": "docs/examples/files.md",
        "discussion_id": "2075739238",
        "commented_code": "@@ -123,7 +123,7 @@ person_list_adapter = TypeAdapter(list[Person])  # (1)!\n \n json_string = pathlib.Path('people.json').read_text()\n people = person_list_adapter.validate_json(json_string)\n-print(people)\n+print(repr(people))",
        "comment_created_at": "2025-05-21T10:07:40+00:00",
        "comment_author": "karta9821",
        "comment_body": "Done for all `people` examples",
        "pr_file_module": null
      },
      {
        "comment_id": "2100438910",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11838,
        "pr_file": "docs/examples/files.md",
        "discussion_id": "2075739238",
        "commented_code": "@@ -123,7 +123,7 @@ person_list_adapter = TypeAdapter(list[Person])  # (1)!\n \n json_string = pathlib.Path('people.json').read_text()\n people = person_list_adapter.validate_json(json_string)\n-print(people)\n+print(repr(people))",
        "comment_created_at": "2025-05-21T14:24:41+00:00",
        "comment_author": "Viicos",
        "comment_body": "Hum I still see the `repr()` in the examples?",
        "pr_file_module": null
      },
      {
        "comment_id": "2100466409",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11838,
        "pr_file": "docs/examples/files.md",
        "discussion_id": "2075739238",
        "commented_code": "@@ -123,7 +123,7 @@ person_list_adapter = TypeAdapter(list[Person])  # (1)!\n \n json_string = pathlib.Path('people.json').read_text()\n people = person_list_adapter.validate_json(json_string)\n-print(people)\n+print(repr(people))",
        "comment_created_at": "2025-05-21T14:37:00+00:00",
        "comment_author": "karta9821",
        "comment_body": "I only changed it for the examples that are a list of `person` \u2013 `people`.\r\nI can change it for a single instance \u2013 `person` \u2013 but then the output in the terminal is:\r\n\r\n> name='John Doe' age=30 email='john@example.com'\r\n\r\nand using `repr` the output (which looks better imo) is\r\n\r\n> Person(name='John Doe', age=30, email='john@example.com')\r\n\r\nIf you want, I can change it to use only `print` in those examples",
        "pr_file_module": null
      },
      {
        "comment_id": "2100496735",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11838,
        "pr_file": "docs/examples/files.md",
        "discussion_id": "2075739238",
        "commented_code": "@@ -123,7 +123,7 @@ person_list_adapter = TypeAdapter(list[Person])  # (1)!\n \n json_string = pathlib.Path('people.json').read_text()\n people = person_list_adapter.validate_json(json_string)\n-print(people)\n+print(repr(people))",
        "comment_created_at": "2025-05-21T14:50:10+00:00",
        "comment_author": "karta9821",
        "comment_body": "Anyway, changed to `print(<inst>)`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1958516464",
    "pr_number": 11307,
    "pr_file": "docs/api/standard_library_types.md",
    "created_at": "2025-02-17T16:34:56+00:00",
    "commented_code": "types:\n \n ### [`datetime.datetime`][]\n-* `datetime` fields will accept values of type:\n \n-    * `datetime`; an existing `datetime` object\n-    * `int` or `float`; assumed as Unix time, i.e. seconds (if >= `-2e10` and <= `2e10`) or milliseconds\n+- `datetime` fields will accept values of type:\n+",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1958516464",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11307,
        "pr_file": "docs/api/standard_library_types.md",
        "discussion_id": "1958516464",
        "commented_code": "@@ -56,16 +56,17 @@ Pydantic supports the following [datetime](https://docs.python.org/library/datet\n types:\n \n ### [`datetime.datetime`][]\n-* `datetime` fields will accept values of type:\n \n-    * `datetime`; an existing `datetime` object\n-    * `int` or `float`; assumed as Unix time, i.e. seconds (if >= `-2e10` and <= `2e10`) or milliseconds\n+- `datetime` fields will accept values of type:\n+",
        "comment_created_at": "2025-02-17T16:34:56+00:00",
        "comment_author": "Viicos",
        "comment_body": "The added newline broke the rendering. Was it added by the linter? It seems the extra level of nesting below did not have the same newline added.\r\n\r\n| Before                                                                                    | After                                                                                     |\r\n|-------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------|\r\n| ![image](https://github.com/user-attachments/assets/643d5681-a822-48c8-85a9-445f25f16156) | ![image](https://github.com/user-attachments/assets/21435ae0-5eb9-47c6-9c4f-419e82811729) |",
        "pr_file_module": null
      },
      {
        "comment_id": "1999994066",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11307,
        "pr_file": "docs/api/standard_library_types.md",
        "discussion_id": "1958516464",
        "commented_code": "@@ -56,16 +56,17 @@ Pydantic supports the following [datetime](https://docs.python.org/library/datet\n types:\n \n ### [`datetime.datetime`][]\n-* `datetime` fields will accept values of type:\n \n-    * `datetime`; an existing `datetime` object\n-    * `int` or `float`; assumed as Unix time, i.e. seconds (if >= `-2e10` and <= `2e10`) or milliseconds\n+- `datetime` fields will accept values of type:\n+",
        "comment_created_at": "2025-03-18T02:01:14+00:00",
        "comment_author": "mschoettle",
        "comment_body": "As discussed below this is due to the 2 vs. 4 space indentation. 4 spaces indentation is required by `python-markdown`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1958519430",
    "pr_number": 11307,
    "pr_file": "docs/concepts/config.md",
    "created_at": "2025-02-17T16:37:30+00:00",
    "commented_code": "On Pydantic models, configuration can be specified in two ways:\n \n - Using the [`model_config`][pydantic.BaseModel.model_config] class attribute:\n+",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1958519430",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11307,
        "pr_file": "docs/concepts/config.md",
        "discussion_id": "1958519430",
        "commented_code": "@@ -7,6 +7,7 @@ specified for Pydantic's supported types.\n On Pydantic models, configuration can be specified in two ways:\n \n - Using the [`model_config`][pydantic.BaseModel.model_config] class attribute:\n+",
        "comment_created_at": "2025-02-17T16:37:30+00:00",
        "comment_author": "Viicos",
        "comment_body": "These new lines are required, as otherwise the code block isn't assumed to be part of the list element.\r\n\r\n| Before                                                                                    | After                                                                                     |\r\n|-------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------|\r\n| ![image](https://github.com/user-attachments/assets/0a282db3-571a-4f0c-81a7-9b8cb74beb75) | ![image](https://github.com/user-attachments/assets/0011b415-a802-4311-869a-a5c00d9df459) |\r\n\r\n(it also breaks admonitions/annotations defined after the code block)\r\n\r\nSeems like indenting the code block with two spaces (and keeping the newline, which should make the linter happy) works, could we apply this pattern?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1999994995",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11307,
        "pr_file": "docs/concepts/config.md",
        "discussion_id": "1958519430",
        "commented_code": "@@ -7,6 +7,7 @@ specified for Pydantic's supported types.\n On Pydantic models, configuration can be specified in two ways:\n \n - Using the [`model_config`][pydantic.BaseModel.model_config] class attribute:\n+",
        "comment_created_at": "2025-03-18T02:02:30+00:00",
        "comment_author": "mschoettle",
        "comment_body": "It has to be 4, otherwise it is not considered indented. Unfortunately, the linter does not complain about this. I did a search where code blocks were indented by 2 or 3 spaces and fixed them all.",
        "pr_file_module": null
      }
    ]
  }
]