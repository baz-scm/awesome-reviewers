[
  {
    "discussion_id": "1815062438",
    "pr_number": 10678,
    "pr_file": "pydantic/fields.py",
    "created_at": "2024-10-24T14:06:32+00:00",
    "commented_code": "return 'deprecated' if self.deprecated else None\n         return self.deprecated if isinstance(self.deprecated, str) else self.deprecated.message\n \n-    def get_default(self, *, call_default_factory: bool = False) -> Any:\n+    @overload\n+    def get_default(self, *, call_default_factory: Literal[False]) -> Any: ...\n+\n+    @overload\n+    def get_default(self, *, call_default_factory: Literal[True], validated_data: dict[str, Any]) -> Any: ...\n+\n+    def get_default(self, *, call_default_factory: bool, validated_data: dict[str, Any] | None = None) -> Any:\n         \"\"\"Get the default value.\n \n         We expose an option for whether to call the default_factory (if present), as calling it may\n         result in side effects that we want to avoid. However, there are times when it really should\n         be called (namely, when instantiating a model via `model_construct`).\n \n         Args:\n-            call_default_factory: Whether to call the default_factory or not. Defaults to `False`.\n+            call_default_factory: Whether to call the default factory or not.\n+            validated_data: The already validated data to be passed to the default factory.\n \n         Returns:\n             The default value, calling the default factory if requested or `None` if not set.\n         \"\"\"\n         if self.default_factory is None:\n             return _utils.smart_deepcopy(self.default)\n         elif call_default_factory:\n-            return self.default_factory()\n+            if validated_data is None:\n+                raise ValueError(\"'validated_data' must be provided if 'call_default_factory' is True.\")",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1815062438",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10678,
        "pr_file": "pydantic/fields.py",
        "discussion_id": "1815062438",
        "commented_code": "@@ -554,23 +555,36 @@ def deprecation_message(self) -> str | None:\n             return 'deprecated' if self.deprecated else None\n         return self.deprecated if isinstance(self.deprecated, str) else self.deprecated.message\n \n-    def get_default(self, *, call_default_factory: bool = False) -> Any:\n+    @overload\n+    def get_default(self, *, call_default_factory: Literal[False]) -> Any: ...\n+\n+    @overload\n+    def get_default(self, *, call_default_factory: Literal[True], validated_data: dict[str, Any]) -> Any: ...\n+\n+    def get_default(self, *, call_default_factory: bool, validated_data: dict[str, Any] | None = None) -> Any:\n         \"\"\"Get the default value.\n \n         We expose an option for whether to call the default_factory (if present), as calling it may\n         result in side effects that we want to avoid. However, there are times when it really should\n         be called (namely, when instantiating a model via `model_construct`).\n \n         Args:\n-            call_default_factory: Whether to call the default_factory or not. Defaults to `False`.\n+            call_default_factory: Whether to call the default factory or not.\n+            validated_data: The already validated data to be passed to the default factory.\n \n         Returns:\n             The default value, calling the default factory if requested or `None` if not set.\n         \"\"\"\n         if self.default_factory is None:\n             return _utils.smart_deepcopy(self.default)\n         elif call_default_factory:\n-            return self.default_factory()\n+            if validated_data is None:\n+                raise ValueError(\"'validated_data' must be provided if 'call_default_factory' is True.\")",
        "comment_created_at": "2024-10-24T14:06:32+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Is this true? Doesn't it only need to be not `None` when `_fields.takes_validated_data_argument(self.default_factory)` is True?",
        "pr_file_module": null
      },
      {
        "comment_id": "1815550723",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10678,
        "pr_file": "pydantic/fields.py",
        "discussion_id": "1815062438",
        "commented_code": "@@ -554,23 +555,36 @@ def deprecation_message(self) -> str | None:\n             return 'deprecated' if self.deprecated else None\n         return self.deprecated if isinstance(self.deprecated, str) else self.deprecated.message\n \n-    def get_default(self, *, call_default_factory: bool = False) -> Any:\n+    @overload\n+    def get_default(self, *, call_default_factory: Literal[False]) -> Any: ...\n+\n+    @overload\n+    def get_default(self, *, call_default_factory: Literal[True], validated_data: dict[str, Any]) -> Any: ...\n+\n+    def get_default(self, *, call_default_factory: bool, validated_data: dict[str, Any] | None = None) -> Any:\n         \"\"\"Get the default value.\n \n         We expose an option for whether to call the default_factory (if present), as calling it may\n         result in side effects that we want to avoid. However, there are times when it really should\n         be called (namely, when instantiating a model via `model_construct`).\n \n         Args:\n-            call_default_factory: Whether to call the default_factory or not. Defaults to `False`.\n+            call_default_factory: Whether to call the default factory or not.\n+            validated_data: The already validated data to be passed to the default factory.\n \n         Returns:\n             The default value, calling the default factory if requested or `None` if not set.\n         \"\"\"\n         if self.default_factory is None:\n             return _utils.smart_deepcopy(self.default)\n         elif call_default_factory:\n-            return self.default_factory()\n+            if validated_data is None:\n+                raise ValueError(\"'validated_data' must be provided if 'call_default_factory' is True.\")",
        "comment_created_at": "2024-10-24T18:44:25+00:00",
        "comment_author": "Viicos",
        "comment_body": "Yes I can probably move the check below, but I prefer enforcing the data to be provided as external users of this method don't know whether the default factory requires the argument or not, and I think it's best to unconditionally raise here (and enforcing the argument in the overload).",
        "pr_file_module": null
      },
      {
        "comment_id": "1815579202",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10678,
        "pr_file": "pydantic/fields.py",
        "discussion_id": "1815062438",
        "commented_code": "@@ -554,23 +555,36 @@ def deprecation_message(self) -> str | None:\n             return 'deprecated' if self.deprecated else None\n         return self.deprecated if isinstance(self.deprecated, str) else self.deprecated.message\n \n-    def get_default(self, *, call_default_factory: bool = False) -> Any:\n+    @overload\n+    def get_default(self, *, call_default_factory: Literal[False]) -> Any: ...\n+\n+    @overload\n+    def get_default(self, *, call_default_factory: Literal[True], validated_data: dict[str, Any]) -> Any: ...\n+\n+    def get_default(self, *, call_default_factory: bool, validated_data: dict[str, Any] | None = None) -> Any:\n         \"\"\"Get the default value.\n \n         We expose an option for whether to call the default_factory (if present), as calling it may\n         result in side effects that we want to avoid. However, there are times when it really should\n         be called (namely, when instantiating a model via `model_construct`).\n \n         Args:\n-            call_default_factory: Whether to call the default_factory or not. Defaults to `False`.\n+            call_default_factory: Whether to call the default factory or not.\n+            validated_data: The already validated data to be passed to the default factory.\n \n         Returns:\n             The default value, calling the default factory if requested or `None` if not set.\n         \"\"\"\n         if self.default_factory is None:\n             return _utils.smart_deepcopy(self.default)\n         elif call_default_factory:\n-            return self.default_factory()\n+            if validated_data is None:\n+                raise ValueError(\"'validated_data' must be provided if 'call_default_factory' is True.\")",
        "comment_created_at": "2024-10-24T19:11:41+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Fine by me, feel free to merge then :).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1766435379",
    "pr_number": 10367,
    "pr_file": "pydantic/_internal/_validate_call.py",
    "created_at": "2024-09-19T08:48:14+00:00",
    "commented_code": "if self.__return_pydantic_validator__:\n             return self.__return_pydantic_validator__(res)\n         return res\n+\n+\n+class ValidateCallInfo(TypedDict):\n+    validate_return: bool\n+    config: ConfigDict | None\n+    function: Callable[..., Any]\n+    local_namespace: dict[str, Any] | None\n+\n+\n+def validate_call_with_namespace(\n+    function: AnyCallableT | None = None,\n+    config: ConfigDict | None = None,\n+    validate_return: bool = False,\n+    local_namespace: dict[str, Any] | None = None,\n+) -> AnyCallableT | Callable[[AnyCallableT], AnyCallableT]:\n+    def validate(function: AnyCallableT) -> AnyCallableT:\n+        if isinstance(function, (classmethod, staticmethod)):\n+            name = type(function).__name__\n+            raise TypeError(f'The `@{name}` decorator should be applied after `@validate_call` (put `@{name}` on top)')\n+\n+        validate_call_wrapper = ValidateCallWrapper(function, config, validate_return, local_namespace)\n+\n+        if inspect.iscoroutinefunction(function):\n+\n+            @wraps(function)\n+            async def wrapper_function(*args, **kwargs):  # type: ignore\n+                return await validate_call_wrapper(*args, **kwargs)\n+        else:\n+\n+            @wraps(function)\n+            def wrapper_function(*args, **kwargs):\n+                return validate_call_wrapper(*args, **kwargs)\n+\n+        wrapper_function.raw_function = function  # type: ignore\n+\n+        info = ValidateCallInfo(\n+            validate_return=validate_return,\n+            config=config,\n+            function=function,\n+            local_namespace=local_namespace,\n+        )\n+        wrapper_function.__pydantic_validate_call_info__ = info  # type: ignore\n+\n+        return wrapper_function  # type: ignore\n+\n+    if function:\n+        return validate(function)\n+    else:\n+        return validate\n+\n+\n+def _is_wrapped_by_validate_call(obj: object) -> bool:\n+    return hasattr(obj, '__pydantic_validate_call_info__')\n+\n+\n+def collect_validate_call_info(namespace: Mapping[str, Any]) -> dict[str, ValidateCallInfo]:\n+    return {\n+        name: func.__pydantic_validate_call_info__\n+        for name, func in namespace.items()\n+        if _is_wrapped_by_validate_call(func)\n+    }\n+\n+\n+def _update_qualname(function: Callable[..., Any], model: type[BaseModel]) -> None:\n+    origin = model.__pydantic_generic_metadata__['origin']\n+    if not origin:\n+        return\n+\n+    name = function.__name__\n+    qualname = function.__qualname__\n+\n+    original_postfix = f'{origin.__name__}.{name}'\n+    assert qualname.endswith(original_postfix)\n+    function.__qualname__ = qualname.replace(original_postfix, f'{model.__name__}.{name}')\n+\n+\n+def update_generic_validate_calls(model: type[BaseModel]) -> None:",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1766435379",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10367,
        "pr_file": "pydantic/_internal/_validate_call.py",
        "discussion_id": "1766435379",
        "commented_code": "@@ -97,3 +105,122 @@ def __call__(self, *args: Any, **kwargs: Any) -> Any:\n         if self.__return_pydantic_validator__:\n             return self.__return_pydantic_validator__(res)\n         return res\n+\n+\n+class ValidateCallInfo(TypedDict):\n+    validate_return: bool\n+    config: ConfigDict | None\n+    function: Callable[..., Any]\n+    local_namespace: dict[str, Any] | None\n+\n+\n+def validate_call_with_namespace(\n+    function: AnyCallableT | None = None,\n+    config: ConfigDict | None = None,\n+    validate_return: bool = False,\n+    local_namespace: dict[str, Any] | None = None,\n+) -> AnyCallableT | Callable[[AnyCallableT], AnyCallableT]:\n+    def validate(function: AnyCallableT) -> AnyCallableT:\n+        if isinstance(function, (classmethod, staticmethod)):\n+            name = type(function).__name__\n+            raise TypeError(f'The `@{name}` decorator should be applied after `@validate_call` (put `@{name}` on top)')\n+\n+        validate_call_wrapper = ValidateCallWrapper(function, config, validate_return, local_namespace)\n+\n+        if inspect.iscoroutinefunction(function):\n+\n+            @wraps(function)\n+            async def wrapper_function(*args, **kwargs):  # type: ignore\n+                return await validate_call_wrapper(*args, **kwargs)\n+        else:\n+\n+            @wraps(function)\n+            def wrapper_function(*args, **kwargs):\n+                return validate_call_wrapper(*args, **kwargs)\n+\n+        wrapper_function.raw_function = function  # type: ignore\n+\n+        info = ValidateCallInfo(\n+            validate_return=validate_return,\n+            config=config,\n+            function=function,\n+            local_namespace=local_namespace,\n+        )\n+        wrapper_function.__pydantic_validate_call_info__ = info  # type: ignore\n+\n+        return wrapper_function  # type: ignore\n+\n+    if function:\n+        return validate(function)\n+    else:\n+        return validate\n+\n+\n+def _is_wrapped_by_validate_call(obj: object) -> bool:\n+    return hasattr(obj, '__pydantic_validate_call_info__')\n+\n+\n+def collect_validate_call_info(namespace: Mapping[str, Any]) -> dict[str, ValidateCallInfo]:\n+    return {\n+        name: func.__pydantic_validate_call_info__\n+        for name, func in namespace.items()\n+        if _is_wrapped_by_validate_call(func)\n+    }\n+\n+\n+def _update_qualname(function: Callable[..., Any], model: type[BaseModel]) -> None:\n+    origin = model.__pydantic_generic_metadata__['origin']\n+    if not origin:\n+        return\n+\n+    name = function.__name__\n+    qualname = function.__qualname__\n+\n+    original_postfix = f'{origin.__name__}.{name}'\n+    assert qualname.endswith(original_postfix)\n+    function.__qualname__ = qualname.replace(original_postfix, f'{model.__name__}.{name}')\n+\n+\n+def update_generic_validate_calls(model: type[BaseModel]) -> None:",
        "comment_created_at": "2024-09-19T08:48:14+00:00",
        "comment_author": "Viicos",
        "comment_body": "You will have to add a `try..finally` block in case any exception happens, as otherwise the original function will have its attributes mutated.\r\n\r\nAlso, I'll have to think about it more, but are we certain that every callable that can be used with `validate_call` can have the `__qualname__`/`__annotations__` etc arguments mutated?",
        "pr_file_module": null
      },
      {
        "comment_id": "1770604849",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10367,
        "pr_file": "pydantic/_internal/_validate_call.py",
        "discussion_id": "1766435379",
        "commented_code": "@@ -97,3 +105,122 @@ def __call__(self, *args: Any, **kwargs: Any) -> Any:\n         if self.__return_pydantic_validator__:\n             return self.__return_pydantic_validator__(res)\n         return res\n+\n+\n+class ValidateCallInfo(TypedDict):\n+    validate_return: bool\n+    config: ConfigDict | None\n+    function: Callable[..., Any]\n+    local_namespace: dict[str, Any] | None\n+\n+\n+def validate_call_with_namespace(\n+    function: AnyCallableT | None = None,\n+    config: ConfigDict | None = None,\n+    validate_return: bool = False,\n+    local_namespace: dict[str, Any] | None = None,\n+) -> AnyCallableT | Callable[[AnyCallableT], AnyCallableT]:\n+    def validate(function: AnyCallableT) -> AnyCallableT:\n+        if isinstance(function, (classmethod, staticmethod)):\n+            name = type(function).__name__\n+            raise TypeError(f'The `@{name}` decorator should be applied after `@validate_call` (put `@{name}` on top)')\n+\n+        validate_call_wrapper = ValidateCallWrapper(function, config, validate_return, local_namespace)\n+\n+        if inspect.iscoroutinefunction(function):\n+\n+            @wraps(function)\n+            async def wrapper_function(*args, **kwargs):  # type: ignore\n+                return await validate_call_wrapper(*args, **kwargs)\n+        else:\n+\n+            @wraps(function)\n+            def wrapper_function(*args, **kwargs):\n+                return validate_call_wrapper(*args, **kwargs)\n+\n+        wrapper_function.raw_function = function  # type: ignore\n+\n+        info = ValidateCallInfo(\n+            validate_return=validate_return,\n+            config=config,\n+            function=function,\n+            local_namespace=local_namespace,\n+        )\n+        wrapper_function.__pydantic_validate_call_info__ = info  # type: ignore\n+\n+        return wrapper_function  # type: ignore\n+\n+    if function:\n+        return validate(function)\n+    else:\n+        return validate\n+\n+\n+def _is_wrapped_by_validate_call(obj: object) -> bool:\n+    return hasattr(obj, '__pydantic_validate_call_info__')\n+\n+\n+def collect_validate_call_info(namespace: Mapping[str, Any]) -> dict[str, ValidateCallInfo]:\n+    return {\n+        name: func.__pydantic_validate_call_info__\n+        for name, func in namespace.items()\n+        if _is_wrapped_by_validate_call(func)\n+    }\n+\n+\n+def _update_qualname(function: Callable[..., Any], model: type[BaseModel]) -> None:\n+    origin = model.__pydantic_generic_metadata__['origin']\n+    if not origin:\n+        return\n+\n+    name = function.__name__\n+    qualname = function.__qualname__\n+\n+    original_postfix = f'{origin.__name__}.{name}'\n+    assert qualname.endswith(original_postfix)\n+    function.__qualname__ = qualname.replace(original_postfix, f'{model.__name__}.{name}')\n+\n+\n+def update_generic_validate_calls(model: type[BaseModel]) -> None:",
        "comment_created_at": "2024-09-22T18:02:57+00:00",
        "comment_author": "kc0506",
        "comment_body": "Ah, I think I forgot to consider callables with various type in many places. Later I should add more tests with `partial`, `wraps` etc. \r\n\r\nAlso, #10461 should probably be dealt with first to better recognize what types of functions we may have here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1725945368",
    "pr_number": 10207,
    "pr_file": "pydantic/types.py",
    "created_at": "2024-08-21T23:03:40+00:00",
    "commented_code": "@staticmethod\n     def validate_file(path: Path, _: core_schema.ValidationInfo) -> Path:\n-        if path.is_file():\n+        if isinstance(path, PosixPath) and os.statvfs(path.parent).f_namemax < len(path.name):\n+            raise PydanticCustomError('path_too_long', 'Path name is too long')\n+        elif path.is_file():\n             return path\n         else:\n             raise PydanticCustomError('path_not_file', 'Path does not point to a file')\n \n     @staticmethod\n     def validate_directory(path: Path, _: core_schema.ValidationInfo) -> Path:\n-        if path.is_dir():\n+        if isinstance(path, PosixPath) and path.exists() and os.statvfs(path).f_namemax < len(path.name):\n+            raise PydanticCustomError('path_too_long', 'Path name is too long')\n+        elif path.is_dir():\n             return path\n         else:\n             raise PydanticCustomError('path_not_directory', 'Path does not point to a directory')\n \n     @staticmethod\n     def validate_new(path: Path, _: core_schema.ValidationInfo) -> Path:\n-        if path.exists():\n+        if isinstance(path, PosixPath) and path.parent.exists() and os.statvfs(path.parent).f_namemax < len(path.name):",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1725945368",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10207,
        "pr_file": "pydantic/types.py",
        "discussion_id": "1725945368",
        "commented_code": "@@ -1262,21 +1263,27 @@ def __get_pydantic_core_schema__(self, source: Any, handler: GetCoreSchemaHandle\n \n     @staticmethod\n     def validate_file(path: Path, _: core_schema.ValidationInfo) -> Path:\n-        if path.is_file():\n+        if isinstance(path, PosixPath) and os.statvfs(path.parent).f_namemax < len(path.name):\n+            raise PydanticCustomError('path_too_long', 'Path name is too long')\n+        elif path.is_file():\n             return path\n         else:\n             raise PydanticCustomError('path_not_file', 'Path does not point to a file')\n \n     @staticmethod\n     def validate_directory(path: Path, _: core_schema.ValidationInfo) -> Path:\n-        if path.is_dir():\n+        if isinstance(path, PosixPath) and path.exists() and os.statvfs(path).f_namemax < len(path.name):\n+            raise PydanticCustomError('path_too_long', 'Path name is too long')\n+        elif path.is_dir():\n             return path\n         else:\n             raise PydanticCustomError('path_not_directory', 'Path does not point to a directory')\n \n     @staticmethod\n     def validate_new(path: Path, _: core_schema.ValidationInfo) -> Path:\n-        if path.exists():\n+        if isinstance(path, PosixPath) and path.parent.exists() and os.statvfs(path.parent).f_namemax < len(path.name):",
        "comment_created_at": "2024-08-21T23:03:40+00:00",
        "comment_author": "changhc",
        "comment_body": "I'm not sure if I should comment on your PR or the issue since this is a draft now, but I'll just leave the comments here for now.\r\n\r\nI guess we need to catch `OSError` in the validation methods anyway. The following will fail this check:\r\n```py\r\n>>> p = PosixPath(\"a\"*1000 + \"/\" +\"x\"*1000)\r\n>>> p.parent.exists()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/changhc/.pyenv/versions/3.12.3/lib/python3.12/pathlib.py\", line 860, in exists\r\n    self.stat(follow_symlinks=follow_symlinks)\r\n  File \"/home/changhc/.pyenv/versions/3.12.3/lib/python3.12/pathlib.py\", line 840, in stat\r\n    return os.stat(self, follow_symlinks=follow_symlinks)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nOSError: [Errno 36] File name too long: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\r\n```\r\n\r\nand this brings us back to the original problem. :(",
        "pr_file_module": null
      },
      {
        "comment_id": "1725950882",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10207,
        "pr_file": "pydantic/types.py",
        "discussion_id": "1725945368",
        "commented_code": "@@ -1262,21 +1263,27 @@ def __get_pydantic_core_schema__(self, source: Any, handler: GetCoreSchemaHandle\n \n     @staticmethod\n     def validate_file(path: Path, _: core_schema.ValidationInfo) -> Path:\n-        if path.is_file():\n+        if isinstance(path, PosixPath) and os.statvfs(path.parent).f_namemax < len(path.name):\n+            raise PydanticCustomError('path_too_long', 'Path name is too long')\n+        elif path.is_file():\n             return path\n         else:\n             raise PydanticCustomError('path_not_file', 'Path does not point to a file')\n \n     @staticmethod\n     def validate_directory(path: Path, _: core_schema.ValidationInfo) -> Path:\n-        if path.is_dir():\n+        if isinstance(path, PosixPath) and path.exists() and os.statvfs(path).f_namemax < len(path.name):\n+            raise PydanticCustomError('path_too_long', 'Path name is too long')\n+        elif path.is_dir():\n             return path\n         else:\n             raise PydanticCustomError('path_not_directory', 'Path does not point to a directory')\n \n     @staticmethod\n     def validate_new(path: Path, _: core_schema.ValidationInfo) -> Path:\n-        if path.exists():\n+        if isinstance(path, PosixPath) and path.parent.exists() and os.statvfs(path.parent).f_namemax < len(path.name):",
        "comment_created_at": "2024-08-21T23:13:31+00:00",
        "comment_author": "lmmx",
        "comment_body": "Oh interesting, so that's where both the directory and the file could never exist: both are prerequisites for a new file. I guess you could just wrap the `path.parent.exists()` in a block to catch the `OSError`, but yeah, not as neat, rats.\r\n\r\nI expect can access that error code 36...\r\n\r\n**edit** I made a test case here https://github.com/lmmx/fp-len-validation-testing/blob/master/examples/new_long_dir_and_file_names.py",
        "pr_file_module": null
      },
      {
        "comment_id": "1725987365",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10207,
        "pr_file": "pydantic/types.py",
        "discussion_id": "1725945368",
        "commented_code": "@@ -1262,21 +1263,27 @@ def __get_pydantic_core_schema__(self, source: Any, handler: GetCoreSchemaHandle\n \n     @staticmethod\n     def validate_file(path: Path, _: core_schema.ValidationInfo) -> Path:\n-        if path.is_file():\n+        if isinstance(path, PosixPath) and os.statvfs(path.parent).f_namemax < len(path.name):\n+            raise PydanticCustomError('path_too_long', 'Path name is too long')\n+        elif path.is_file():\n             return path\n         else:\n             raise PydanticCustomError('path_not_file', 'Path does not point to a file')\n \n     @staticmethod\n     def validate_directory(path: Path, _: core_schema.ValidationInfo) -> Path:\n-        if path.is_dir():\n+        if isinstance(path, PosixPath) and path.exists() and os.statvfs(path).f_namemax < len(path.name):\n+            raise PydanticCustomError('path_too_long', 'Path name is too long')\n+        elif path.is_dir():\n             return path\n         else:\n             raise PydanticCustomError('path_not_directory', 'Path does not point to a directory')\n \n     @staticmethod\n     def validate_new(path: Path, _: core_schema.ValidationInfo) -> Path:\n-        if path.exists():\n+        if isinstance(path, PosixPath) and path.parent.exists() and os.statvfs(path.parent).f_namemax < len(path.name):",
        "comment_created_at": "2024-08-22T00:20:57+00:00",
        "comment_author": "lmmx",
        "comment_body": "This is fixed now (6ef7e7b)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1852161064",
    "pr_number": 10909,
    "pr_file": "pydantic/fields.py",
    "created_at": "2024-11-21T13:56:14+00:00",
    "commented_code": "if self.default_factory is None:\n             return _utils.smart_deepcopy(self.default)\n         elif call_default_factory:\n-            if validated_data is None:\n-                raise ValueError(\"'validated_data' must be provided if 'call_default_factory' is True.\")\n             if _fields.takes_validated_data_argument(self.default_factory):\n+                if validated_data is None:\n+                    raise ValueError(\n+                        \"'validated_data' is missing but should be provided. This is a bug, please report this.\"",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1852161064",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10909,
        "pr_file": "pydantic/fields.py",
        "discussion_id": "1852161064",
        "commented_code": "@@ -594,9 +594,11 @@ def get_default(self, *, call_default_factory: bool = False, validated_data: dic\n         if self.default_factory is None:\n             return _utils.smart_deepcopy(self.default)\n         elif call_default_factory:\n-            if validated_data is None:\n-                raise ValueError(\"'validated_data' must be provided if 'call_default_factory' is True.\")\n             if _fields.takes_validated_data_argument(self.default_factory):\n+                if validated_data is None:\n+                    raise ValueError(\n+                        \"'validated_data' is missing but should be provided. This is a bug, please report this.\"",
        "comment_created_at": "2024-11-21T13:56:14+00:00",
        "comment_author": "Viicos",
        "comment_body": "```suggestion\r\n                       \"The default factory requires the 'validated_data' argument, which was not provided when calling 'get_default'.\"\r\n```\r\n\r\nI don't think mentioning \"this is a bug\" is correct, as users could really just call `get_default` in the wrong way.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1837161007",
    "pr_number": 10537,
    "pr_file": "pydantic/_internal/_mock_val_ser.py",
    "created_at": "2024-11-11T20:32:15+00:00",
    "commented_code": "return None\n \n \n+def set_type_adapter_mocks(adapter: TypeAdapter, type_repr: str) -> None:\n+    \"\"\"Set `core_schema`, `validator` and `serializer` to mock core types on a type adapter instance.\n+\n+    Args:\n+        adapter: The type adapter instance to set the mocks on\n+        type_repr: Name of the type used in the adapter, used in error messages\n+    \"\"\"\n+    undefined_type_error_message = (\n+        f'`TypeAdapter[{type_repr}]` is not fully defined; you should define `{type_repr}` and all referenced types,'",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1837161007",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10537,
        "pr_file": "pydantic/_internal/_mock_val_ser.py",
        "discussion_id": "1837161007",
        "commented_code": "@@ -108,8 +109,48 @@ def rebuild(self) -> ValSer | None:\n         return None\n \n \n+def set_type_adapter_mocks(adapter: TypeAdapter, type_repr: str) -> None:\n+    \"\"\"Set `core_schema`, `validator` and `serializer` to mock core types on a type adapter instance.\n+\n+    Args:\n+        adapter: The type adapter instance to set the mocks on\n+        type_repr: Name of the type used in the adapter, used in error messages\n+    \"\"\"\n+    undefined_type_error_message = (\n+        f'`TypeAdapter[{type_repr}]` is not fully defined; you should define `{type_repr}` and all referenced types,'",
        "comment_created_at": "2024-11-11T20:32:15+00:00",
        "comment_author": "Viicos",
        "comment_body": "The `TypeAdapter[...]` form seems a bit weird, especially because `type_repr` seems to be `str(type)` when called from `TypeAdapter`. Probably fine as is, just wanted to note that this may lead to weird string representations (maybe `_display.display_as_type` could be used, although it is costly to compute).",
        "pr_file_module": null
      },
      {
        "comment_id": "1840753117",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10537,
        "pr_file": "pydantic/_internal/_mock_val_ser.py",
        "discussion_id": "1837161007",
        "commented_code": "@@ -108,8 +109,48 @@ def rebuild(self) -> ValSer | None:\n         return None\n \n \n+def set_type_adapter_mocks(adapter: TypeAdapter, type_repr: str) -> None:\n+    \"\"\"Set `core_schema`, `validator` and `serializer` to mock core types on a type adapter instance.\n+\n+    Args:\n+        adapter: The type adapter instance to set the mocks on\n+        type_repr: Name of the type used in the adapter, used in error messages\n+    \"\"\"\n+    undefined_type_error_message = (\n+        f'`TypeAdapter[{type_repr}]` is not fully defined; you should define `{type_repr}` and all referenced types,'",
        "comment_created_at": "2024-11-13T16:27:04+00:00",
        "comment_author": "dmontagu",
        "comment_body": "you could probably rework the APIs a bit to make it possible to defer the cost of computing the error message if it's a concern. Like, make MockCoreSchema accept a callable for the error message rather than just a string",
        "pr_file_module": null
      },
      {
        "comment_id": "1841057809",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10537,
        "pr_file": "pydantic/_internal/_mock_val_ser.py",
        "discussion_id": "1837161007",
        "commented_code": "@@ -108,8 +109,48 @@ def rebuild(self) -> ValSer | None:\n         return None\n \n \n+def set_type_adapter_mocks(adapter: TypeAdapter, type_repr: str) -> None:\n+    \"\"\"Set `core_schema`, `validator` and `serializer` to mock core types on a type adapter instance.\n+\n+    Args:\n+        adapter: The type adapter instance to set the mocks on\n+        type_repr: Name of the type used in the adapter, used in error messages\n+    \"\"\"\n+    undefined_type_error_message = (\n+        f'`TypeAdapter[{type_repr}]` is not fully defined; you should define `{type_repr}` and all referenced types,'",
        "comment_created_at": "2024-11-13T19:36:36+00:00",
        "comment_author": "MarkusSintonen",
        "comment_body": "Suggested the same in other [comment](https://github.com/pydantic/pydantic/pull/10537#discussion_r1838395713) about making the error message forming lazy. So it only happens on errors",
        "pr_file_module": null
      }
    ]
  }
]