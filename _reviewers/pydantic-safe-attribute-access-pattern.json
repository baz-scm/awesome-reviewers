[
  {
    "discussion_id": "1960495012",
    "pr_number": 11451,
    "pr_file": "pydantic/_internal/_typing_extra.py",
    "created_at": "2025-02-18T19:51:53+00:00",
    "commented_code": "else:\n             annotations = function.__annotations__\n     except AttributeError:\n-        type_hints = get_type_hints(function)\n-        if isinstance(function, type):\n-            # `type[...]` is a callable, which returns an instance of itself.\n-            # At some point, we might even look into the return type of `__new__`\n-            # if it returns something else.\n-            type_hints.setdefault('return', function)\n-        return type_hints",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1960495012",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11451,
        "pr_file": "pydantic/_internal/_typing_extra.py",
        "discussion_id": "1960495012",
        "commented_code": "@@ -922,13 +920,8 @@ def get_function_type_hints(\n         else:\n             annotations = function.__annotations__\n     except AttributeError:\n-        type_hints = get_type_hints(function)\n-        if isinstance(function, type):\n-            # `type[...]` is a callable, which returns an instance of itself.\n-            # At some point, we might even look into the return type of `__new__`\n-            # if it returns something else.\n-            type_hints.setdefault('return', function)\n-        return type_hints",
        "comment_created_at": "2025-02-18T19:51:53+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Do we not even need to try this?",
        "pr_file_module": null
      },
      {
        "comment_id": "1961909607",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11451,
        "pr_file": "pydantic/_internal/_typing_extra.py",
        "discussion_id": "1960495012",
        "commented_code": "@@ -922,13 +920,8 @@ def get_function_type_hints(\n         else:\n             annotations = function.__annotations__\n     except AttributeError:\n-        type_hints = get_type_hints(function)\n-        if isinstance(function, type):\n-            # `type[...]` is a callable, which returns an instance of itself.\n-            # At some point, we might even look into the return type of `__new__`\n-            # if it returns something else.\n-            type_hints.setdefault('return', function)\n-        return type_hints",
        "comment_created_at": "2025-02-19T15:35:44+00:00",
        "comment_author": "Viicos",
        "comment_body": "This check did not really make sense in this `get_function_type_hints()`, but rather in `get_callable_return_type()` (this PR moved the check in this one), which has a smaller scope (i.e. analyzing callables used for validators/serializers functions)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1403320348",
    "pr_number": 6033,
    "pr_file": "pydantic/networks.py",
    "created_at": "2023-11-23T12:29:49+00:00",
    "commented_code": "import email_validator\n     except ImportError as e:\n         raise ImportError('email-validator is not installed, run `pip install pydantic[email]`') from e\n+    if hasattr(email_validator, '__version__') and getattr(email_validator, '__version__', '').partition('.')[0] == '2':",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1403320348",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 6033,
        "pr_file": "pydantic/networks.py",
        "discussion_id": "1403320348",
        "commented_code": "@@ -363,6 +363,13 @@ def import_email_validator() -> None:\n         import email_validator\n     except ImportError as e:\n         raise ImportError('email-validator is not installed, run `pip install pydantic[email]`') from e\n+    if hasattr(email_validator, '__version__') and getattr(email_validator, '__version__', '').partition('.')[0] == '2':",
        "comment_created_at": "2023-11-23T12:29:49+00:00",
        "comment_author": "Viicos",
        "comment_body": "```suggestion\r\n    if getattr(email_validator, '__version__', '').partition('.')[0] == '2':\r\n```\r\nWith `''` as a default value, `''.partition('.')` returns `('', '', '')`",
        "pr_file_module": null
      },
      {
        "comment_id": "1403587427",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 6033,
        "pr_file": "pydantic/networks.py",
        "discussion_id": "1403320348",
        "commented_code": "@@ -363,6 +363,13 @@ def import_email_validator() -> None:\n         import email_validator\n     except ImportError as e:\n         raise ImportError('email-validator is not installed, run `pip install pydantic[email]`') from e\n+    if hasattr(email_validator, '__version__') and getattr(email_validator, '__version__', '').partition('.')[0] == '2':",
        "comment_created_at": "2023-11-23T16:33:32+00:00",
        "comment_author": "commonism",
        "comment_body": "which is fine - \r\nv2.1 has `__version__` and will pass\r\nv1.x/v2.0 lack `__version__` and the test below distinguishes in v1.x and v2.0 by testing for `normalized`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1403598610",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 6033,
        "pr_file": "pydantic/networks.py",
        "discussion_id": "1403320348",
        "commented_code": "@@ -363,6 +363,13 @@ def import_email_validator() -> None:\n         import email_validator\n     except ImportError as e:\n         raise ImportError('email-validator is not installed, run `pip install pydantic[email]`') from e\n+    if hasattr(email_validator, '__version__') and getattr(email_validator, '__version__', '').partition('.')[0] == '2':",
        "comment_created_at": "2023-11-23T16:47:16+00:00",
        "comment_author": "Viicos",
        "comment_body": "Yes, what I meant is that the `hasattr` check is not necessary because of the `getattr` fallback to `''`. But I think it's fine to keep it for clarity",
        "pr_file_module": null
      },
      {
        "comment_id": "1406500918",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 6033,
        "pr_file": "pydantic/networks.py",
        "discussion_id": "1403320348",
        "commented_code": "@@ -363,6 +363,13 @@ def import_email_validator() -> None:\n         import email_validator\n     except ImportError as e:\n         raise ImportError('email-validator is not installed, run `pip install pydantic[email]`') from e\n+    if hasattr(email_validator, '__version__') and getattr(email_validator, '__version__', '').partition('.')[0] == '2':",
        "comment_created_at": "2023-11-27T17:23:22+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "I like the version @Viicos suggested.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1848812034",
    "pr_number": 10655,
    "pr_file": "pydantic/_internal/_discriminated_union.py",
    "created_at": "2024-11-19T17:54:50+00:00",
    "commented_code": "def set_discriminator_in_metadata(schema: CoreSchema, discriminator: Any) -> None:\n-    schema.setdefault('metadata', {})\n-    metadata = schema.get('metadata')\n-    assert metadata is not None\n-    metadata[CORE_SCHEMA_METADATA_DISCRIMINATOR_PLACEHOLDER_KEY] = discriminator\n-\n-\n-def apply_discriminators(schema: core_schema.CoreSchema) -> core_schema.CoreSchema:\n-    # We recursively walk through the `schema` passed to `apply_discriminators`, applying discriminators\n-    # where necessary at each level. During this recursion, we allow references to be resolved from the definitions\n-    # that are originally present on the original, outermost `schema`. Before `apply_discriminators` is called,\n-    # `simplify_schema_references` is called on the schema (in the `clean_schema` function),\n-    # which often puts the definitions in the outermost schema.\n-    global_definitions: dict[str, CoreSchema] = collect_definitions(schema)\n-\n-    def inner(s: core_schema.CoreSchema, recurse: _core_utils.Recurse) -> core_schema.CoreSchema:\n-        nonlocal global_definitions\n-\n-        s = recurse(s, inner)\n-        if s['type'] == 'tagged-union':\n-            return s\n-\n-        metadata = s.get('metadata', {})\n-        discriminator = metadata.pop(CORE_SCHEMA_METADATA_DISCRIMINATOR_PLACEHOLDER_KEY, None)\n-        if discriminator is not None:\n-            s = apply_discriminator(s, discriminator, global_definitions)\n-        return s\n-\n-    return _core_utils.walk_core_schema(schema, inner, copy=False)\n+    \"\"\"Sets the discriminator in the metadata of the schema. Used for deferred discriminator application.\n+    These are gathered for schema cleaning in pydantic-core.\n+    \"\"\"\n+    metadata: CoreMetadata = schema.setdefault('metadata', {})  # pyright: ignore[reportAssignmentType]",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1848812034",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10655,
        "pr_file": "pydantic/_internal/_discriminated_union.py",
        "discussion_id": "1848812034",
        "commented_code": "@@ -28,34 +24,11 @@ def __init__(self, ref: str) -> None:\n \n \n def set_discriminator_in_metadata(schema: CoreSchema, discriminator: Any) -> None:\n-    schema.setdefault('metadata', {})\n-    metadata = schema.get('metadata')\n-    assert metadata is not None\n-    metadata[CORE_SCHEMA_METADATA_DISCRIMINATOR_PLACEHOLDER_KEY] = discriminator\n-\n-\n-def apply_discriminators(schema: core_schema.CoreSchema) -> core_schema.CoreSchema:\n-    # We recursively walk through the `schema` passed to `apply_discriminators`, applying discriminators\n-    # where necessary at each level. During this recursion, we allow references to be resolved from the definitions\n-    # that are originally present on the original, outermost `schema`. Before `apply_discriminators` is called,\n-    # `simplify_schema_references` is called on the schema (in the `clean_schema` function),\n-    # which often puts the definitions in the outermost schema.\n-    global_definitions: dict[str, CoreSchema] = collect_definitions(schema)\n-\n-    def inner(s: core_schema.CoreSchema, recurse: _core_utils.Recurse) -> core_schema.CoreSchema:\n-        nonlocal global_definitions\n-\n-        s = recurse(s, inner)\n-        if s['type'] == 'tagged-union':\n-            return s\n-\n-        metadata = s.get('metadata', {})\n-        discriminator = metadata.pop(CORE_SCHEMA_METADATA_DISCRIMINATOR_PLACEHOLDER_KEY, None)\n-        if discriminator is not None:\n-            s = apply_discriminator(s, discriminator, global_definitions)\n-        return s\n-\n-    return _core_utils.walk_core_schema(schema, inner, copy=False)\n+    \"\"\"Sets the discriminator in the metadata of the schema. Used for deferred discriminator application.\n+    These are gathered for schema cleaning in pydantic-core.\n+    \"\"\"\n+    metadata: CoreMetadata = schema.setdefault('metadata', {})  # pyright: ignore[reportAssignmentType]",
        "comment_created_at": "2024-11-19T17:54:50+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Can you avoid the ignore with a `cast` like `metadata = cast(schema.setdefault('metadata', {})`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1848891786",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10655,
        "pr_file": "pydantic/_internal/_discriminated_union.py",
        "discussion_id": "1848812034",
        "commented_code": "@@ -28,34 +24,11 @@ def __init__(self, ref: str) -> None:\n \n \n def set_discriminator_in_metadata(schema: CoreSchema, discriminator: Any) -> None:\n-    schema.setdefault('metadata', {})\n-    metadata = schema.get('metadata')\n-    assert metadata is not None\n-    metadata[CORE_SCHEMA_METADATA_DISCRIMINATOR_PLACEHOLDER_KEY] = discriminator\n-\n-\n-def apply_discriminators(schema: core_schema.CoreSchema) -> core_schema.CoreSchema:\n-    # We recursively walk through the `schema` passed to `apply_discriminators`, applying discriminators\n-    # where necessary at each level. During this recursion, we allow references to be resolved from the definitions\n-    # that are originally present on the original, outermost `schema`. Before `apply_discriminators` is called,\n-    # `simplify_schema_references` is called on the schema (in the `clean_schema` function),\n-    # which often puts the definitions in the outermost schema.\n-    global_definitions: dict[str, CoreSchema] = collect_definitions(schema)\n-\n-    def inner(s: core_schema.CoreSchema, recurse: _core_utils.Recurse) -> core_schema.CoreSchema:\n-        nonlocal global_definitions\n-\n-        s = recurse(s, inner)\n-        if s['type'] == 'tagged-union':\n-            return s\n-\n-        metadata = s.get('metadata', {})\n-        discriminator = metadata.pop(CORE_SCHEMA_METADATA_DISCRIMINATOR_PLACEHOLDER_KEY, None)\n-        if discriminator is not None:\n-            s = apply_discriminator(s, discriminator, global_definitions)\n-        return s\n-\n-    return _core_utils.walk_core_schema(schema, inner, copy=False)\n+    \"\"\"Sets the discriminator in the metadata of the schema. Used for deferred discriminator application.\n+    These are gathered for schema cleaning in pydantic-core.\n+    \"\"\"\n+    metadata: CoreMetadata = schema.setdefault('metadata', {})  # pyright: ignore[reportAssignmentType]",
        "comment_created_at": "2024-11-19T19:01:15+00:00",
        "comment_author": "MarkusSintonen",
        "comment_body": "Done, although there is the typing issue",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1843950691",
    "pr_number": 10763,
    "pr_file": "pydantic/_internal/_validators.py",
    "created_at": "2024-11-15T14:54:21+00:00",
    "commented_code": "Though this could be divided into two separate functions, the logic is easier to follow if we couple the computation\n     of the number of decimals and digits together.\n     \"\"\"\n-    decimal_tuple = decimal.as_tuple()\n-    if not isinstance(decimal_tuple.exponent, int):\n-        raise TypeError(f'Unable to extract decimal digits info from supplied value {decimal}')\n-    exponent = decimal_tuple.exponent\n-    num_digits = len(decimal_tuple.digits)\n-\n-    if exponent >= 0:\n-        # A positive exponent adds that many trailing zeros\n-        # Ex: digit_tuple=(1, 2, 3), exponent=2 -> 12300 -> 0 decimal places, 5 digits\n-        num_digits += exponent\n-        decimal_places = 0\n-    else:\n-        # If the absolute value of the negative exponent is larger than the\n-        # number of digits, then it's the same as the number of digits,\n-        # because it'll consume all the digits in digit_tuple and then\n-        # add abs(exponent) - len(digit_tuple) leading zeros after the decimal point.\n-        # Ex: digit_tuple=(1, 2, 3), exponent=-2 -> 1.23 -> 2 decimal places, 3 digits\n-        # Ex: digit_tuple=(1, 2, 3), exponent=-4 -> 0.0123 -> 4 decimal places, 4 digits\n-        decimal_places = abs(exponent)\n-        num_digits = max(num_digits, decimal_places)\n+    try:\n+        decimal_tuple = decimal.as_tuple()\n \n-    return decimal_places, num_digits",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1843950691",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10763,
        "pr_file": "pydantic/_internal/_validators.py",
        "discussion_id": "1843950691",
        "commented_code": "@@ -346,35 +346,38 @@ def _extract_decimal_digits_info(decimal: Decimal) -> tuple[int, int]:\n     Though this could be divided into two separate functions, the logic is easier to follow if we couple the computation\n     of the number of decimals and digits together.\n     \"\"\"\n-    decimal_tuple = decimal.as_tuple()\n-    if not isinstance(decimal_tuple.exponent, int):\n-        raise TypeError(f'Unable to extract decimal digits info from supplied value {decimal}')\n-    exponent = decimal_tuple.exponent\n-    num_digits = len(decimal_tuple.digits)\n-\n-    if exponent >= 0:\n-        # A positive exponent adds that many trailing zeros\n-        # Ex: digit_tuple=(1, 2, 3), exponent=2 -> 12300 -> 0 decimal places, 5 digits\n-        num_digits += exponent\n-        decimal_places = 0\n-    else:\n-        # If the absolute value of the negative exponent is larger than the\n-        # number of digits, then it's the same as the number of digits,\n-        # because it'll consume all the digits in digit_tuple and then\n-        # add abs(exponent) - len(digit_tuple) leading zeros after the decimal point.\n-        # Ex: digit_tuple=(1, 2, 3), exponent=-2 -> 1.23 -> 2 decimal places, 3 digits\n-        # Ex: digit_tuple=(1, 2, 3), exponent=-4 -> 0.0123 -> 4 decimal places, 4 digits\n-        decimal_places = abs(exponent)\n-        num_digits = max(num_digits, decimal_places)\n+    try:\n+        decimal_tuple = decimal.as_tuple()\n \n-    return decimal_places, num_digits",
        "comment_created_at": "2024-11-15T14:54:21+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Can we leave this as is? What `AttributeError` might occur here?",
        "pr_file_module": null
      },
      {
        "comment_id": "1844739933",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10763,
        "pr_file": "pydantic/_internal/_validators.py",
        "discussion_id": "1843950691",
        "commented_code": "@@ -346,35 +346,38 @@ def _extract_decimal_digits_info(decimal: Decimal) -> tuple[int, int]:\n     Though this could be divided into two separate functions, the logic is easier to follow if we couple the computation\n     of the number of decimals and digits together.\n     \"\"\"\n-    decimal_tuple = decimal.as_tuple()\n-    if not isinstance(decimal_tuple.exponent, int):\n-        raise TypeError(f'Unable to extract decimal digits info from supplied value {decimal}')\n-    exponent = decimal_tuple.exponent\n-    num_digits = len(decimal_tuple.digits)\n-\n-    if exponent >= 0:\n-        # A positive exponent adds that many trailing zeros\n-        # Ex: digit_tuple=(1, 2, 3), exponent=2 -> 12300 -> 0 decimal places, 5 digits\n-        num_digits += exponent\n-        decimal_places = 0\n-    else:\n-        # If the absolute value of the negative exponent is larger than the\n-        # number of digits, then it's the same as the number of digits,\n-        # because it'll consume all the digits in digit_tuple and then\n-        # add abs(exponent) - len(digit_tuple) leading zeros after the decimal point.\n-        # Ex: digit_tuple=(1, 2, 3), exponent=-2 -> 1.23 -> 2 decimal places, 3 digits\n-        # Ex: digit_tuple=(1, 2, 3), exponent=-4 -> 0.0123 -> 4 decimal places, 4 digits\n-        decimal_places = abs(exponent)\n-        num_digits = max(num_digits, decimal_places)\n+    try:\n+        decimal_tuple = decimal.as_tuple()\n \n-    return decimal_places, num_digits",
        "comment_created_at": "2024-11-16T01:09:18+00:00",
        "comment_author": "tkasuz",
        "comment_body": "If the `decimal` argument is not a `Decimal` type, which is accepted as Any in the root function, an `AttributeError` might occur because the as_tuple method may not exist",
        "pr_file_module": null
      },
      {
        "comment_id": "1844740265",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10763,
        "pr_file": "pydantic/_internal/_validators.py",
        "discussion_id": "1843950691",
        "commented_code": "@@ -346,35 +346,38 @@ def _extract_decimal_digits_info(decimal: Decimal) -> tuple[int, int]:\n     Though this could be divided into two separate functions, the logic is easier to follow if we couple the computation\n     of the number of decimals and digits together.\n     \"\"\"\n-    decimal_tuple = decimal.as_tuple()\n-    if not isinstance(decimal_tuple.exponent, int):\n-        raise TypeError(f'Unable to extract decimal digits info from supplied value {decimal}')\n-    exponent = decimal_tuple.exponent\n-    num_digits = len(decimal_tuple.digits)\n-\n-    if exponent >= 0:\n-        # A positive exponent adds that many trailing zeros\n-        # Ex: digit_tuple=(1, 2, 3), exponent=2 -> 12300 -> 0 decimal places, 5 digits\n-        num_digits += exponent\n-        decimal_places = 0\n-    else:\n-        # If the absolute value of the negative exponent is larger than the\n-        # number of digits, then it's the same as the number of digits,\n-        # because it'll consume all the digits in digit_tuple and then\n-        # add abs(exponent) - len(digit_tuple) leading zeros after the decimal point.\n-        # Ex: digit_tuple=(1, 2, 3), exponent=-2 -> 1.23 -> 2 decimal places, 3 digits\n-        # Ex: digit_tuple=(1, 2, 3), exponent=-4 -> 0.0123 -> 4 decimal places, 4 digits\n-        decimal_places = abs(exponent)\n-        num_digits = max(num_digits, decimal_places)\n+    try:\n+        decimal_tuple = decimal.as_tuple()\n \n-    return decimal_places, num_digits",
        "comment_created_at": "2024-11-16T01:10:39+00:00",
        "comment_author": "tkasuz",
        "comment_body": "Would it be better to change the argument type to `Any` and add another `assert` to check if the type is `Decimal`? \ud83e\udd14",
        "pr_file_module": null
      },
      {
        "comment_id": "1845233312",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10763,
        "pr_file": "pydantic/_internal/_validators.py",
        "discussion_id": "1843950691",
        "commented_code": "@@ -346,35 +346,38 @@ def _extract_decimal_digits_info(decimal: Decimal) -> tuple[int, int]:\n     Though this could be divided into two separate functions, the logic is easier to follow if we couple the computation\n     of the number of decimals and digits together.\n     \"\"\"\n-    decimal_tuple = decimal.as_tuple()\n-    if not isinstance(decimal_tuple.exponent, int):\n-        raise TypeError(f'Unable to extract decimal digits info from supplied value {decimal}')\n-    exponent = decimal_tuple.exponent\n-    num_digits = len(decimal_tuple.digits)\n-\n-    if exponent >= 0:\n-        # A positive exponent adds that many trailing zeros\n-        # Ex: digit_tuple=(1, 2, 3), exponent=2 -> 12300 -> 0 decimal places, 5 digits\n-        num_digits += exponent\n-        decimal_places = 0\n-    else:\n-        # If the absolute value of the negative exponent is larger than the\n-        # number of digits, then it's the same as the number of digits,\n-        # because it'll consume all the digits in digit_tuple and then\n-        # add abs(exponent) - len(digit_tuple) leading zeros after the decimal point.\n-        # Ex: digit_tuple=(1, 2, 3), exponent=-2 -> 1.23 -> 2 decimal places, 3 digits\n-        # Ex: digit_tuple=(1, 2, 3), exponent=-4 -> 0.0123 -> 4 decimal places, 4 digits\n-        decimal_places = abs(exponent)\n-        num_digits = max(num_digits, decimal_places)\n+    try:\n+        decimal_tuple = decimal.as_tuple()\n \n-    return decimal_places, num_digits",
        "comment_created_at": "2024-11-16T20:22:33+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Makes sense, thanks for the improvement!",
        "pr_file_module": null
      }
    ]
  }
]