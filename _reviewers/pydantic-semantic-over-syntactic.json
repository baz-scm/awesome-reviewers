[
  {
    "discussion_id": "1972626514",
    "pr_number": 11479,
    "pr_file": "pydantic/_internal/_generate_schema.py",
    "created_at": "2025-02-27T00:34:57+00:00",
    "commented_code": "if schema is not None:\n             return schema\n \n-        if _typing_extra.is_type_alias_type(origin):\n+        if typing_objects.is_typealiastype(origin):",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1972626514",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11479,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1972626514",
        "commented_code": "@@ -1104,9 +1107,9 @@ def _match_generic_type(self, obj: Any, origin: Any) -> CoreSchema:  # noqa: C90\n         if schema is not None:\n             return schema\n \n-        if _typing_extra.is_type_alias_type(origin):\n+        if typing_objects.is_typealiastype(origin):",
        "comment_created_at": "2025-02-27T00:34:57+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Would `is_type_alias_type` make more sense?",
        "pr_file_module": null
      },
      {
        "comment_id": "1973287182",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11479,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1972626514",
        "commented_code": "@@ -1104,9 +1107,9 @@ def _match_generic_type(self, obj: Any, origin: Any) -> CoreSchema:  # noqa: C90\n         if schema is not None:\n             return schema\n \n-        if _typing_extra.is_type_alias_type(origin):\n+        if typing_objects.is_typealiastype(origin):",
        "comment_created_at": "2025-02-27T10:17:29+00:00",
        "comment_author": "Viicos",
        "comment_body": "I wanted to avoid having the name depending on the capitalization of the object, and simply have `is_<name>`, but both make sense I think",
        "pr_file_module": null
      },
      {
        "comment_id": "1973832092",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11479,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1972626514",
        "commented_code": "@@ -1104,9 +1107,9 @@ def _match_generic_type(self, obj: Any, origin: Any) -> CoreSchema:  # noqa: C90\n         if schema is not None:\n             return schema\n \n-        if _typing_extra.is_type_alias_type(origin):\n+        if typing_objects.is_typealiastype(origin):",
        "comment_created_at": "2025-02-27T15:31:23+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "I'd prefer `is_type_alias_type` just bc it's easier to read, but it's up to you, doesn't really matter!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1846856243",
    "pr_number": 10655,
    "pr_file": "pydantic/_internal/_generate_schema.py",
    "created_at": "2024-11-18T15:59:02+00:00",
    "commented_code": "}\n \n \n+class CollectedInvalid(Exception):\n+    pass",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1846856243",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10655,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1846856243",
        "commented_code": "@@ -2425,12 +2392,108 @@ def _common_field(\n     }\n \n \n+class CollectedInvalid(Exception):\n+    pass",
        "comment_created_at": "2024-11-18T15:59:02+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Maybe add `Schema` to the name of this? Or `CoreSchema`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1847176362",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10655,
        "pr_file": "pydantic/_internal/_generate_schema.py",
        "discussion_id": "1846856243",
        "commented_code": "@@ -2425,12 +2392,108 @@ def _common_field(\n     }\n \n \n+class CollectedInvalid(Exception):\n+    pass",
        "comment_created_at": "2024-11-18T19:58:50+00:00",
        "comment_author": "MarkusSintonen",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1898620168",
    "pr_number": 11169,
    "pr_file": "pydantic/_internal/_utils.py",
    "created_at": "2024-12-27T16:53:31+00:00",
    "commented_code": "def __contains__(self, key: str, /) -> bool:\n             return self.wrapped.__contains__(key)\n+\n+\n+_ModelT = TypeVar('_ModelT', bound='BaseModel')\n+_R = TypeVar('_R')",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1898620168",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11169,
        "pr_file": "pydantic/_internal/_utils.py",
        "discussion_id": "1898620168",
        "commented_code": "@@ -387,3 +390,35 @@ def __getitem__(self, key: str, /) -> Any:\n \n         def __contains__(self, key: str, /) -> bool:\n             return self.wrapped.__contains__(key)\n+\n+\n+_ModelT = TypeVar('_ModelT', bound='BaseModel')\n+_R = TypeVar('_R')",
        "comment_created_at": "2024-12-27T16:53:31+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Can we make this typevar more clear, maybe like `PropertyReturnType` or `ReturnType` or something like that?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1812676526",
    "pr_number": 10662,
    "pr_file": "pydantic/networks.py",
    "created_at": "2024-10-23T12:44:28+00:00",
    "commented_code": ")\n         )\n \n+    @property\n+    def set_constraints(self) -> dict[str, Any]:",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1812676526",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10662,
        "pr_file": "pydantic/networks.py",
        "discussion_id": "1812676526",
        "commented_code": "@@ -86,136 +88,294 @@ def __hash__(self) -> int:\n             )\n         )\n \n+    @property\n+    def set_constraints(self) -> dict[str, Any]:",
        "comment_created_at": "2024-10-23T12:44:28+00:00",
        "comment_author": "Viicos",
        "comment_body": "```suggestion\r\n    def defined_constraints(self) -> dict[str, Any]:\r\n```\r\n\r\nmaybe? set_constraints can be confusing at first, feels like this is representing an action of _setting_ something",
        "pr_file_module": null
      },
      {
        "comment_id": "1812895946",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10662,
        "pr_file": "pydantic/networks.py",
        "discussion_id": "1812676526",
        "commented_code": "@@ -86,136 +88,294 @@ def __hash__(self) -> int:\n             )\n         )\n \n+    @property\n+    def set_constraints(self) -> dict[str, Any]:",
        "comment_created_at": "2024-10-23T14:24:34+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Good call",
        "pr_file_module": null
      }
    ]
  }
]