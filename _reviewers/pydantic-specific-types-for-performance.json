[
  {
    "discussion_id": "1866654733",
    "pr_number": 11029,
    "pr_file": "docs/concepts/models.md",
    "created_at": "2024-12-02T21:34:37+00:00",
    "commented_code": "See [Changes to `pydantic.BaseModel`](../migration.md#changes-to-pydanticbasemodel) in the\n     [Migration Guide](../migration.md) for details on changes from Pydantic V1.\n \n+## Data conversion\n+\n+Pydantic may cast input data to force it to conform to model field types,\n+and in some cases this may result in a loss of information.\n+For example:\n+\n+```python\n+from pydantic import BaseModel\n+\n+\n+class Model(BaseModel):\n+    a: int\n+    b: float\n+    c: str\n+\n+\n+print(Model(a=3.000, b='2.72', c=b'binary data').model_dump())\n+#> {'a': 3, 'b': 2.72, 'c': 'binary data'}\n+```\n+\n+This is a deliberate decision of Pydantic, and is frequently the most useful approach. See\n+[here](https://github.com/pydantic/pydantic/issues/578) for a longer discussion on the subject.\n+\n+This is also the case for collections. In most cases, you shouldn't make use of abstract container classes\n+and just use a concrete type, such as [`list`][]:",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1866654733",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11029,
        "pr_file": "docs/concepts/models.md",
        "discussion_id": "1866654733",
        "commented_code": "@@ -168,6 +172,51 @@ Models possess the following methods and attributes:\n     See [Changes to `pydantic.BaseModel`](../migration.md#changes-to-pydanticbasemodel) in the\n     [Migration Guide](../migration.md) for details on changes from Pydantic V1.\n \n+## Data conversion\n+\n+Pydantic may cast input data to force it to conform to model field types,\n+and in some cases this may result in a loss of information.\n+For example:\n+\n+```python\n+from pydantic import BaseModel\n+\n+\n+class Model(BaseModel):\n+    a: int\n+    b: float\n+    c: str\n+\n+\n+print(Model(a=3.000, b='2.72', c=b'binary data').model_dump())\n+#> {'a': 3, 'b': 2.72, 'c': 'binary data'}\n+```\n+\n+This is a deliberate decision of Pydantic, and is frequently the most useful approach. See\n+[here](https://github.com/pydantic/pydantic/issues/578) for a longer discussion on the subject.\n+\n+This is also the case for collections. In most cases, you shouldn't make use of abstract container classes\n+and just use a concrete type, such as [`list`][]:",
        "comment_created_at": "2024-12-02T21:34:37+00:00",
        "comment_author": "Viicos",
        "comment_body": "This is added by me, as I think a common misconception is to use abstract containers as types thinking this will allow (in the case of `collections.abc.Sequence`) both lists and tuples to validate, while in fact this is already supported by Pydantic.",
        "pr_file_module": null
      },
      {
        "comment_id": "1867995756",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11029,
        "pr_file": "docs/concepts/models.md",
        "discussion_id": "1866654733",
        "commented_code": "@@ -168,6 +172,51 @@ Models possess the following methods and attributes:\n     See [Changes to `pydantic.BaseModel`](../migration.md#changes-to-pydanticbasemodel) in the\n     [Migration Guide](../migration.md) for details on changes from Pydantic V1.\n \n+## Data conversion\n+\n+Pydantic may cast input data to force it to conform to model field types,\n+and in some cases this may result in a loss of information.\n+For example:\n+\n+```python\n+from pydantic import BaseModel\n+\n+\n+class Model(BaseModel):\n+    a: int\n+    b: float\n+    c: str\n+\n+\n+print(Model(a=3.000, b='2.72', c=b'binary data').model_dump())\n+#> {'a': 3, 'b': 2.72, 'c': 'binary data'}\n+```\n+\n+This is a deliberate decision of Pydantic, and is frequently the most useful approach. See\n+[here](https://github.com/pydantic/pydantic/issues/578) for a longer discussion on the subject.\n+\n+This is also the case for collections. In most cases, you shouldn't make use of abstract container classes\n+and just use a concrete type, such as [`list`][]:",
        "comment_created_at": "2024-12-03T16:00:20+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "I like this example overall.\r\n\r\nI think we should:\r\n* Link to the related [performance section](https://docs.pydantic.dev/latest/concepts/performance/#sequence-vs-list-or-tuple-mapping-vs-dict)\r\n* Give a bit more context re efficiency here - the more specific you can be with a type, the better (sort of in a philosophical sense)",
        "pr_file_module": null
      },
      {
        "comment_id": "1868099779",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11029,
        "pr_file": "docs/concepts/models.md",
        "discussion_id": "1866654733",
        "commented_code": "@@ -168,6 +172,51 @@ Models possess the following methods and attributes:\n     See [Changes to `pydantic.BaseModel`](../migration.md#changes-to-pydanticbasemodel) in the\n     [Migration Guide](../migration.md) for details on changes from Pydantic V1.\n \n+## Data conversion\n+\n+Pydantic may cast input data to force it to conform to model field types,\n+and in some cases this may result in a loss of information.\n+For example:\n+\n+```python\n+from pydantic import BaseModel\n+\n+\n+class Model(BaseModel):\n+    a: int\n+    b: float\n+    c: str\n+\n+\n+print(Model(a=3.000, b='2.72', c=b'binary data').model_dump())\n+#> {'a': 3, 'b': 2.72, 'c': 'binary data'}\n+```\n+\n+This is a deliberate decision of Pydantic, and is frequently the most useful approach. See\n+[here](https://github.com/pydantic/pydantic/issues/578) for a longer discussion on the subject.\n+\n+This is also the case for collections. In most cases, you shouldn't make use of abstract container classes\n+and just use a concrete type, such as [`list`][]:",
        "comment_created_at": "2024-12-03T17:06:32+00:00",
        "comment_author": "Viicos",
        "comment_body": "I added the link. Regarding the second bullet point, not sure what you mean. Do you have a suggestion?",
        "pr_file_module": null
      },
      {
        "comment_id": "1868129437",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 11029,
        "pr_file": "docs/concepts/models.md",
        "discussion_id": "1866654733",
        "commented_code": "@@ -168,6 +172,51 @@ Models possess the following methods and attributes:\n     See [Changes to `pydantic.BaseModel`](../migration.md#changes-to-pydanticbasemodel) in the\n     [Migration Guide](../migration.md) for details on changes from Pydantic V1.\n \n+## Data conversion\n+\n+Pydantic may cast input data to force it to conform to model field types,\n+and in some cases this may result in a loss of information.\n+For example:\n+\n+```python\n+from pydantic import BaseModel\n+\n+\n+class Model(BaseModel):\n+    a: int\n+    b: float\n+    c: str\n+\n+\n+print(Model(a=3.000, b='2.72', c=b'binary data').model_dump())\n+#> {'a': 3, 'b': 2.72, 'c': 'binary data'}\n+```\n+\n+This is a deliberate decision of Pydantic, and is frequently the most useful approach. See\n+[here](https://github.com/pydantic/pydantic/issues/578) for a longer discussion on the subject.\n+\n+This is also the case for collections. In most cases, you shouldn't make use of abstract container classes\n+and just use a concrete type, such as [`list`][]:",
        "comment_created_at": "2024-12-03T17:26:11+00:00",
        "comment_author": "sydney-runkle",
        "comment_body": "Sure - basically, in one line or two, you can explain that generally, the more specific a type, the faster validation will be, as we don't have to perform as many checks / coercion attempts.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1809107968",
    "pr_number": 10666,
    "pr_file": "docs/concepts/models.md",
    "created_at": "2024-10-21T16:10:31+00:00",
    "commented_code": "\"\"\"\n ```\n \n-!!! tip",
    "repo_full_name": "pydantic/pydantic",
    "discussion_comments": [
      {
        "comment_id": "1809107968",
        "repo_full_name": "pydantic/pydantic",
        "pr_number": 10666,
        "pr_file": "docs/concepts/models.md",
        "discussion_id": "1809107968",
        "commented_code": "@@ -772,12 +772,6 @@ Order(id=1, product=ResponseModel[Product](content=Product(name='Apple', price=0\n \"\"\"\n ```\n \n-!!! tip",
        "comment_created_at": "2024-10-21T16:10:31+00:00",
        "comment_author": "dmontagu",
        "comment_body": "It's probably worth noting that if you don't do this you will incur a bit of validation overhead, and re-trigger things like `@model_validator`s that will run any time the instance is validated, since the disagreement in parametrization means it won't skip validation.\r\n\r\nBasically, I think it's worth keeping the tip here just changing the contents (and maybe pointing out that it's a bit of an advanced consideration / only relevant for very performance-sensitive usage).",
        "pr_file_module": null
      }
    ]
  }
]