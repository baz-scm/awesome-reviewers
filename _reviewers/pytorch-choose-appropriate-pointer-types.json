[
  {
    "discussion_id": "2112298533",
    "pr_number": 153977,
    "pr_file": "torch/csrc/distributed/c10d/ProcessGroupNCCL.hpp",
    "created_at": "2025-05-28T16:23:24+00:00",
    "commented_code": "std::string traceKeyEnd_;\n   };\n \n+  // Class that runs as a separate thread aside from watchdog\n+  // thread because we need to check the heartbeat from watchdog thread\n+  // so that when we get stuck in some NCCL/CUDA calls,\n+  // we can dump the debugging information and abort the process.\n+  class HeartbeatMonitor {\n+   public:\n+    HeartbeatMonitor(ProcessGroupNCCL* pg);",
    "repo_full_name": "pytorch/pytorch",
    "discussion_comments": [
      {
        "comment_id": "2112298533",
        "repo_full_name": "pytorch/pytorch",
        "pr_number": 153977,
        "pr_file": "torch/csrc/distributed/c10d/ProcessGroupNCCL.hpp",
        "discussion_id": "2112298533",
        "commented_code": "@@ -596,6 +596,87 @@ class TORCH_API ProcessGroupNCCL : public Backend {\n     std::string traceKeyEnd_;\n   };\n \n+  // Class that runs as a separate thread aside from watchdog\n+  // thread because we need to check the heartbeat from watchdog thread\n+  // so that when we get stuck in some NCCL/CUDA calls,\n+  // we can dump the debugging information and abort the process.\n+  class HeartbeatMonitor {\n+   public:\n+    HeartbeatMonitor(ProcessGroupNCCL* pg);",
        "comment_created_at": "2025-05-28T16:23:24+00:00",
        "comment_author": "kwen2501",
        "comment_body": "Use cpp way. `intrusive_ptr` or `shared_ptr`. \r\nAlso, to avoid cyclic dependency problem, this shared ptr can be a weak pointer:\r\n> A weak pointer is a type of smart pointer that allows you to hold a non-owning reference to an object that is owned by a shared pointer.",
        "pr_file_module": null
      },
      {
        "comment_id": "2112394858",
        "repo_full_name": "pytorch/pytorch",
        "pr_number": 153977,
        "pr_file": "torch/csrc/distributed/c10d/ProcessGroupNCCL.hpp",
        "discussion_id": "2112298533",
        "commented_code": "@@ -596,6 +596,87 @@ class TORCH_API ProcessGroupNCCL : public Backend {\n     std::string traceKeyEnd_;\n   };\n \n+  // Class that runs as a separate thread aside from watchdog\n+  // thread because we need to check the heartbeat from watchdog thread\n+  // so that when we get stuck in some NCCL/CUDA calls,\n+  // we can dump the debugging information and abort the process.\n+  class HeartbeatMonitor {\n+   public:\n+    HeartbeatMonitor(ProcessGroupNCCL* pg);",
        "comment_created_at": "2025-05-28T17:18:48+00:00",
        "comment_author": "fduwjj",
        "comment_body": "Actually that's why we don't use intrusive_ptr or shared_ptr here to avoid a cyclic dependency. And a raw pointer is indeed is ok here because the life cycle of this class is always within PGNCCL so we won't have illegal access?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2060878519",
    "pr_number": 152210,
    "pr_file": "aten/src/ATen/native/mps/OperationUtils.h",
    "created_at": "2025-04-25T21:01:33+00:00",
    "commented_code": "using MPSCacheKey = uint64_t;\n \n+struct MPSCachedKernel {\n+  MPSCachedKernel(NSObject* object) : _object([object retain]) {}",
    "repo_full_name": "pytorch/pytorch",
    "discussion_comments": [
      {
        "comment_id": "2060878519",
        "repo_full_name": "pytorch/pytorch",
        "pr_number": 152210,
        "pr_file": "aten/src/ATen/native/mps/OperationUtils.h",
        "discussion_id": "2060878519",
        "commented_code": "@@ -160,6 +160,22 @@ string get_mem_format_string(c10::MemoryFormat memory_format);\n \n using MPSCacheKey = uint64_t;\n \n+struct MPSCachedKernel {\n+  MPSCachedKernel(NSObject* object) : _object([object retain]) {}",
        "comment_created_at": "2025-04-25T21:01:33+00:00",
        "comment_author": "malfet",
        "comment_body": "Please either add a copy constructor or delete it, otherwise it'll be very prone to errors",
        "pr_file_module": null
      },
      {
        "comment_id": "2076304409",
        "repo_full_name": "pytorch/pytorch",
        "pr_number": 152210,
        "pr_file": "aten/src/ATen/native/mps/OperationUtils.h",
        "discussion_id": "2060878519",
        "commented_code": "@@ -160,6 +160,22 @@ string get_mem_format_string(c10::MemoryFormat memory_format);\n \n using MPSCacheKey = uint64_t;\n \n+struct MPSCachedKernel {\n+  MPSCachedKernel(NSObject* object) : _object([object retain]) {}",
        "comment_created_at": "2025-05-06T21:17:22+00:00",
        "comment_author": "jhavukainen",
        "comment_body": "Deleted it",
        "pr_file_module": null
      }
    ]
  }
]