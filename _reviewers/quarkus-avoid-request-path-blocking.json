[
  {
    "discussion_id": "2144668998",
    "pr_number": 48368,
    "pr_file": "docs/src/main/asciidoc/vertx-reference.adoc",
    "created_at": "2025-06-13T09:57:45+00:00",
    "commented_code": "[source, java]\n ----\n // Case 1\n-bus.sendAndForget(\"greeting\", name)\n+bus.send(\"greeting\", name)",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2144668998",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48368,
        "pr_file": "docs/src/main/asciidoc/vertx-reference.adoc",
        "discussion_id": "2144668998",
        "commented_code": "@@ -704,7 +704,7 @@ The `EventBus` object provides methods to:\n [source, java]\n ----\n // Case 1\n-bus.sendAndForget(\"greeting\", name)\n+bus.send(\"greeting\", name)",
        "comment_created_at": "2025-06-13T09:57:45+00:00",
        "comment_author": "mkouba",
        "comment_body": "I know that there is the `io.vertx.mutiny.core.eventbus.EventBus.requestAndForget(String, Object, DeliveryOptions)` method which has a little cleaner name but it registers a reply handler internally which is probably less efficient compared to `send()` so :shrug: ...",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2137585479",
    "pr_number": 48296,
    "pr_file": "docs/src/main/asciidoc/security-openid-connect-client-reference.adoc",
    "created_at": "2025-06-10T11:00:24+00:00",
    "commented_code": "`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.\n Additionally, the `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens that might cause HTTP 401 errors. For example, if this property is set to `3S` and the access token will expire in less than 3 seconds, then this token will be auto-refreshed.\n \n+By default, Quarkus will refresh the current expired token when you request tokens.\n+Performance critical applications may want to avoid this waiting during incoming requests and configure asynchronous token refresh like in the example below:",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2137585479",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48296,
        "pr_file": "docs/src/main/asciidoc/security-openid-connect-client-reference.adoc",
        "discussion_id": "2137585479",
        "commented_code": "@@ -713,6 +713,15 @@ You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcCl\n `OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.\n Additionally, the `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens that might cause HTTP 401 errors. For example, if this property is set to `3S` and the access token will expire in less than 3 seconds, then this token will be auto-refreshed.\n \n+By default, Quarkus will refresh the current expired token when you request tokens.\n+Performance critical applications may want to avoid this waiting during incoming requests and configure asynchronous token refresh like in the example below:",
        "comment_created_at": "2025-06-10T11:00:24+00:00",
        "comment_author": "sberyozkin",
        "comment_body": "```suggestion\r\nPerformance critical applications may want to avoid having to wait for a possible token refresh during the incoming requests and configure an asynchronous token refresh instead, for example:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1987195900",
    "pr_number": 46688,
    "pr_file": "docs/src/main/asciidoc/security-ldap.adoc",
    "created_at": "2025-03-10T12:33:21+00:00",
    "commented_code": "quarkus.security.ldap.dir-context.principal=uid=admin,ou=system\n quarkus.security.ldap.dir-context.url=ldaps://ldap.server.local <1>\n+%test.quarkus.security.ldap.dir-context.url=ldap://127.0.0.1:10389 <2>\n quarkus.security.ldap.dir-context.password=secret\n \n quarkus.security.ldap.identity-mapping.rdn-identifier=uid\n quarkus.security.ldap.identity-mapping.search-base-dn=ou=Users,dc=quarkus,dc=io\n \n quarkus.security.ldap.identity-mapping.attribute-mappings.\"0\".from=cn\n-quarkus.security.ldap.identity-mapping.attribute-mappings.\"0\".filter=(member=uid={0},ou=Users,dc=quarkus,dc=io) <2>\n+quarkus.security.ldap.identity-mapping.attribute-mappings.\"0\".filter=(member=uid={0},ou=Users,dc=quarkus,dc=io) <3>\n quarkus.security.ldap.identity-mapping.attribute-mappings.\"0\".filter-base-dn=ou=Roles,dc=quarkus,dc=io\n \n-%test.quarkus.security.ldap.dir-context.url=ldap://127.0.0.1:10389 <3>\n+quarkus.security.ldap.cache.enabled=true <4>\n ----\n <1> You need to provide the URL to an LDAP server. This example requires the LDAP server to have imported link:{quarkus-blob-url}/test-framework/ldap/src/main/resources/quarkus-io.ldif[this LDIF file].\n-<2> `{0}` is substituted by the `uid`.\n-<3> The URL used by our test resource. Tests may leverage `LdapServerTestResource` provided by Quarkus as link:{quickstarts-blob-url}/security-ldap-quickstart/src/test/java/org/acme/elytron/security/ldap/ElytronLdapExtensionTestResources.java[we do] in the test coverage of the example application.\n+<2> The URL used by our test resource. Tests may leverage `LdapServerTestResource` provided by Quarkus as link:{quickstarts-blob-url}/security-ldap-quickstart/src/test/java/org/acme/elytron/security/ldap/ElytronLdapExtensionTestResources.java[we do] in the test coverage of the example application.\n+<3> `{0}` is substituted by the `uid`.\n+<4> Without this configuration, every request to your service will cause an additional roundtrip to the LDAP server. Therefore, it's a common practice to cache these result to improve performance, but the tradeoff is that there will be a delay between changes in the LDAP getting effective in your service. The default cache max-age is `60s`.",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "1987195900",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46688,
        "pr_file": "docs/src/main/asciidoc/security-ldap.adoc",
        "discussion_id": "1987195900",
        "commented_code": "@@ -160,20 +160,22 @@ quarkus.security.ldap.enabled=true\n \n quarkus.security.ldap.dir-context.principal=uid=admin,ou=system\n quarkus.security.ldap.dir-context.url=ldaps://ldap.server.local <1>\n+%test.quarkus.security.ldap.dir-context.url=ldap://127.0.0.1:10389 <2>\n quarkus.security.ldap.dir-context.password=secret\n \n quarkus.security.ldap.identity-mapping.rdn-identifier=uid\n quarkus.security.ldap.identity-mapping.search-base-dn=ou=Users,dc=quarkus,dc=io\n \n quarkus.security.ldap.identity-mapping.attribute-mappings.\"0\".from=cn\n-quarkus.security.ldap.identity-mapping.attribute-mappings.\"0\".filter=(member=uid={0},ou=Users,dc=quarkus,dc=io) <2>\n+quarkus.security.ldap.identity-mapping.attribute-mappings.\"0\".filter=(member=uid={0},ou=Users,dc=quarkus,dc=io) <3>\n quarkus.security.ldap.identity-mapping.attribute-mappings.\"0\".filter-base-dn=ou=Roles,dc=quarkus,dc=io\n \n-%test.quarkus.security.ldap.dir-context.url=ldap://127.0.0.1:10389 <3>\n+quarkus.security.ldap.cache.enabled=true <4>\n ----\n <1> You need to provide the URL to an LDAP server. This example requires the LDAP server to have imported link:{quarkus-blob-url}/test-framework/ldap/src/main/resources/quarkus-io.ldif[this LDIF file].\n-<2> `{0}` is substituted by the `uid`.\n-<3> The URL used by our test resource. Tests may leverage `LdapServerTestResource` provided by Quarkus as link:{quickstarts-blob-url}/security-ldap-quickstart/src/test/java/org/acme/elytron/security/ldap/ElytronLdapExtensionTestResources.java[we do] in the test coverage of the example application.\n+<2> The URL used by our test resource. Tests may leverage `LdapServerTestResource` provided by Quarkus as link:{quickstarts-blob-url}/security-ldap-quickstart/src/test/java/org/acme/elytron/security/ldap/ElytronLdapExtensionTestResources.java[we do] in the test coverage of the example application.\n+<3> `{0}` is substituted by the `uid`.\n+<4> Without this configuration, every request to your service will cause an additional roundtrip to the LDAP server. Therefore, it's a common practice to cache these result to improve performance, but the tradeoff is that there will be a delay between changes in the LDAP getting effective in your service. The default cache max-age is `60s`.",
        "comment_created_at": "2025-03-10T12:33:21+00:00",
        "comment_author": "sberyozkin",
        "comment_body": "Thanks @t1, this information will be useful. \r\nHowever,  I'd like to propose to turn into a Note, that would inform users that by default,  LDAP request is made each time,  and you can set this property if you'd like to optimize, etc\r\n\r\nThe reason I propose it is because with this current  text we essentially recommend enabling the cache, in which case it would be reasonable for users to ask, why do we have to configure it ourselves?\r\n\r\nThe note, with pros and cons, would make it more obvious why users have to make this decision ",
        "pr_file_module": null
      }
    ]
  }
]