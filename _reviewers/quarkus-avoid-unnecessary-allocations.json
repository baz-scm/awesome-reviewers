[
  {
    "discussion_id": "2124426867",
    "pr_number": 48201,
    "pr_file": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Methods.java",
    "created_at": "2025-06-03T16:55:01+00:00",
    "commented_code": "@Override\n         public int hashCode() {\n-            return Objects.hash(name, params, returnType);",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2124426867",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48201,
        "pr_file": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Methods.java",
        "discussion_id": "2124426867",
        "commented_code": "@@ -362,7 +371,14 @@ public boolean equals(Object o) {\n \n         @Override\n         public int hashCode() {\n-            return Objects.hash(name, params, returnType);",
        "comment_created_at": "2025-06-03T16:55:01+00:00",
        "comment_author": "gsmet",
        "comment_body": "In general, we should avoid using this construct in objects that will end up as map keys. Resizing the maps will recompute the hashCode and this method, due to the varargs, is allocating an array.",
        "pr_file_module": null
      },
      {
        "comment_id": "2124527724",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48201,
        "pr_file": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Methods.java",
        "discussion_id": "2124426867",
        "commented_code": "@@ -362,7 +371,14 @@ public boolean equals(Object o) {\n \n         @Override\n         public int hashCode() {\n-            return Objects.hash(name, params, returnType);",
        "comment_created_at": "2025-06-03T17:49:38+00:00",
        "comment_author": "mkouba",
        "comment_body": "Yep, it's fine to build the hashcode like this. :+1: ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2124524020",
    "pr_number": 48201,
    "pr_file": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Methods.java",
    "created_at": "2025-06-03T17:47:40+00:00",
    "commented_code": "final List<DotName> params;\n         final DotName returnType;\n         final MethodInfo method; // this is intentionally ignored for equals/hashCode\n+        private final int hashCode;\n \n         public MethodKey(MethodInfo method) {\n             this.method = Objects.requireNonNull(method, \"Method must not be null\");\n             this.name = method.name();\n             this.returnType = method.returnType().name();\n-            this.params = new ArrayList<>();\n-            for (Type i : method.parameterTypes()) {\n-                params.add(i.name());\n+            if (method.parameterTypes().size() == 0) {",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2124524020",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48201,
        "pr_file": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Methods.java",
        "discussion_id": "2124524020",
        "commented_code": "@@ -337,15 +337,24 @@ static class MethodKey {\n         final List<DotName> params;\n         final DotName returnType;\n         final MethodInfo method; // this is intentionally ignored for equals/hashCode\n+        private final int hashCode;\n \n         public MethodKey(MethodInfo method) {\n             this.method = Objects.requireNonNull(method, \"Method must not be null\");\n             this.name = method.name();\n             this.returnType = method.returnType().name();\n-            this.params = new ArrayList<>();\n-            for (Type i : method.parameterTypes()) {\n-                params.add(i.name());\n+            if (method.parameterTypes().size() == 0) {",
        "comment_created_at": "2025-06-03T17:47:40+00:00",
        "comment_author": "mkouba",
        "comment_body": "I think that you should use a local variable to hold the param types as well because `MethodInfo#parameterTypes()` creates a new immutable collection per each call.\r\n\r\nOr maybe even something like:\r\n```java\r\nthis.params = switch (method.parametersCount()) {\r\n                case 0 -> List.of();\r\n                case 1 -> List.of(method.parameterTypes().get(0).name());\r\n                default -> {\r\n                    List<DotName> ret = new ArrayList<>(method.parametersCount());\r\n                    for (Type i : method.parameterTypes()) {\r\n                        ret.add(i.name());\r\n                    }\r\n                    yield ret;\r\n                }\r\n            };\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2125791182",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48201,
        "pr_file": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Methods.java",
        "discussion_id": "2124524020",
        "commented_code": "@@ -337,15 +337,24 @@ static class MethodKey {\n         final List<DotName> params;\n         final DotName returnType;\n         final MethodInfo method; // this is intentionally ignored for equals/hashCode\n+        private final int hashCode;\n \n         public MethodKey(MethodInfo method) {\n             this.method = Objects.requireNonNull(method, \"Method must not be null\");\n             this.name = method.name();\n             this.returnType = method.returnType().name();\n-            this.params = new ArrayList<>();\n-            for (Type i : method.parameterTypes()) {\n-                params.add(i.name());\n+            if (method.parameterTypes().size() == 0) {",
        "comment_created_at": "2025-06-04T06:48:29+00:00",
        "comment_author": "Ladicek",
        "comment_body": "Agree, I would certainly recommend using `method.parametersCount()` instead of `method.parameterTypes().size()`. Also @mkouba's `switch` looks better than the series of `if`s, I'd just recommend to add an option for _2_ parameters, as the immutable `List.of()` type has a variant for 1 and 2 elements.",
        "pr_file_module": null
      },
      {
        "comment_id": "2125830427",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48201,
        "pr_file": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Methods.java",
        "discussion_id": "2124524020",
        "commented_code": "@@ -337,15 +337,24 @@ static class MethodKey {\n         final List<DotName> params;\n         final DotName returnType;\n         final MethodInfo method; // this is intentionally ignored for equals/hashCode\n+        private final int hashCode;\n \n         public MethodKey(MethodInfo method) {\n             this.method = Objects.requireNonNull(method, \"Method must not be null\");\n             this.name = method.name();\n             this.returnType = method.returnType().name();\n-            this.params = new ArrayList<>();\n-            for (Type i : method.parameterTypes()) {\n-                params.add(i.name());\n+            if (method.parameterTypes().size() == 0) {",
        "comment_created_at": "2025-06-04T07:01:19+00:00",
        "comment_author": "gsmet",
        "comment_body": "Yeah, I thought about the 2 case as I remembered you did it in Jandex but then thought it was maybe a bit too much. I will revisit things along these lines. Thanks!",
        "pr_file_module": null
      },
      {
        "comment_id": "2125905646",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48201,
        "pr_file": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Methods.java",
        "discussion_id": "2124524020",
        "commented_code": "@@ -337,15 +337,24 @@ static class MethodKey {\n         final List<DotName> params;\n         final DotName returnType;\n         final MethodInfo method; // this is intentionally ignored for equals/hashCode\n+        private final int hashCode;\n \n         public MethodKey(MethodInfo method) {\n             this.method = Objects.requireNonNull(method, \"Method must not be null\");\n             this.name = method.name();\n             this.returnType = method.returnType().name();\n-            this.params = new ArrayList<>();\n-            for (Type i : method.parameterTypes()) {\n-                params.add(i.name());\n+            if (method.parameterTypes().size() == 0) {",
        "comment_created_at": "2025-06-04T07:40:38+00:00",
        "comment_author": "gsmet",
        "comment_body": "Done, thanks for the suggestions!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049478327",
    "pr_number": 47386,
    "pr_file": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java",
    "created_at": "2025-04-17T18:44:32+00:00",
    "commented_code": "}\n \n     public RequestMatch<T> map(String path) {\n-        var result = mapFromPathMatcher(path, requestPaths.match(path));\n-        if (result != null) {\n+        var result = mapFromPathMatcher(path, requestPaths.match(path), true);\n+        if (!result.isEmpty()) {\n+            return result.get(0);\n+        }\n+\n+        // the following code is meant to handle cases like https://github.com/quarkusio/quarkus/issues/30667\n+        result = mapFromPathMatcher(path, requestPaths.defaultMatch(path), true);\n+        if (!result.isEmpty()) {\n+            return result.get(0);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Retrieve all UriTemplate matches for a given path, ordered by how much of the path is remaining\n+     *\n+     * @param path path to search UriTemplate for\n+     * @return list, never null, may be empty\n+     */\n+    public List<RequestMatch<T>> allMatches(String path) {\n+        var result = mapFromPathMatcher(path, requestPaths.match(path), false);\n+        if (!result.isEmpty()) {\n             return result;\n         }\n \n         // the following code is meant to handle cases like https://github.com/quarkusio/quarkus/issues/30667\n-        return mapFromPathMatcher(path, requestPaths.defaultMatch(path));\n+        return mapFromPathMatcher(path, requestPaths.defaultMatch(path), false);\n     }\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-    private RequestMatch<T> mapFromPathMatcher(String path, PathMatcher.PathMatch<ArrayList<RequestPath<T>>> initialMatch) {\n+    private List<RequestMatch<T>> mapFromPathMatcher(String path,",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2049478327",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47386,
        "pr_file": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java",
        "discussion_id": "2049478327",
        "commented_code": "@@ -43,24 +43,46 @@ public void accept(String stem, ArrayList<RequestPath<T>> list) {\n     }\n \n     public RequestMatch<T> map(String path) {\n-        var result = mapFromPathMatcher(path, requestPaths.match(path));\n-        if (result != null) {\n+        var result = mapFromPathMatcher(path, requestPaths.match(path), true);\n+        if (!result.isEmpty()) {\n+            return result.get(0);\n+        }\n+\n+        // the following code is meant to handle cases like https://github.com/quarkusio/quarkus/issues/30667\n+        result = mapFromPathMatcher(path, requestPaths.defaultMatch(path), true);\n+        if (!result.isEmpty()) {\n+            return result.get(0);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Retrieve all UriTemplate matches for a given path, ordered by how much of the path is remaining\n+     *\n+     * @param path path to search UriTemplate for\n+     * @return list, never null, may be empty\n+     */\n+    public List<RequestMatch<T>> allMatches(String path) {\n+        var result = mapFromPathMatcher(path, requestPaths.match(path), false);\n+        if (!result.isEmpty()) {\n             return result;\n         }\n \n         // the following code is meant to handle cases like https://github.com/quarkusio/quarkus/issues/30667\n-        return mapFromPathMatcher(path, requestPaths.defaultMatch(path));\n+        return mapFromPathMatcher(path, requestPaths.defaultMatch(path), false);\n     }\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-    private RequestMatch<T> mapFromPathMatcher(String path, PathMatcher.PathMatch<ArrayList<RequestPath<T>>> initialMatch) {\n+    private List<RequestMatch<T>> mapFromPathMatcher(String path,",
        "comment_created_at": "2025-04-17T18:44:32+00:00",
        "comment_author": "franz1981",
        "comment_body": "Please have a version of this method which doesn't return a collection, but a single value - since is what is been used in some hot path \ud83d\ude4f",
        "pr_file_module": null
      },
      {
        "comment_id": "2050099255",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47386,
        "pr_file": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java",
        "discussion_id": "2049478327",
        "commented_code": "@@ -43,24 +43,46 @@ public void accept(String stem, ArrayList<RequestPath<T>> list) {\n     }\n \n     public RequestMatch<T> map(String path) {\n-        var result = mapFromPathMatcher(path, requestPaths.match(path));\n-        if (result != null) {\n+        var result = mapFromPathMatcher(path, requestPaths.match(path), true);\n+        if (!result.isEmpty()) {\n+            return result.get(0);\n+        }\n+\n+        // the following code is meant to handle cases like https://github.com/quarkusio/quarkus/issues/30667\n+        result = mapFromPathMatcher(path, requestPaths.defaultMatch(path), true);\n+        if (!result.isEmpty()) {\n+            return result.get(0);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Retrieve all UriTemplate matches for a given path, ordered by how much of the path is remaining\n+     *\n+     * @param path path to search UriTemplate for\n+     * @return list, never null, may be empty\n+     */\n+    public List<RequestMatch<T>> allMatches(String path) {\n+        var result = mapFromPathMatcher(path, requestPaths.match(path), false);\n+        if (!result.isEmpty()) {\n             return result;\n         }\n \n         // the following code is meant to handle cases like https://github.com/quarkusio/quarkus/issues/30667\n-        return mapFromPathMatcher(path, requestPaths.defaultMatch(path));\n+        return mapFromPathMatcher(path, requestPaths.defaultMatch(path), false);\n     }\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-    private RequestMatch<T> mapFromPathMatcher(String path, PathMatcher.PathMatch<ArrayList<RequestPath<T>>> initialMatch) {\n+    private List<RequestMatch<T>> mapFromPathMatcher(String path,",
        "comment_created_at": "2025-04-18T06:01:54+00:00",
        "comment_author": "Postremus",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2009809226",
    "pr_number": 46950,
    "pr_file": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java",
    "created_at": "2025-03-24T09:39:14+00:00",
    "commented_code": "if (list == null) {\n                 return Collections.emptyList();\n             } else {\n-                return list.stream()\n-                        .filter(h -> !h.isEmpty())\n-                        .toList();\n+                return filterEmpty(list);\n             }\n         }\n     }\n \n+    private static List<String> filterEmpty(List<String> list) {\n+        // empty and tiny lists are handled inlined\n+        int size = list.size();\n+        if (size == 0) {\n+            return list;\n+        }\n+        if (size == 1) {\n+            String val = list.get(0);\n+            if (val.isEmpty()) {\n+                return List.of();\n+            }\n+            return list;\n+        }\n+        // this shouldn't be common both on query params and header values\n+        return filterEmptyOnNonTinyList(list);\n+    }\n+\n+    private static List<String> filterEmptyOnNonTinyList(List<String> list) {\n+        assert list.size() > 1;\n+        List<String> nonEmptyList = null;",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2009809226",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46950,
        "pr_file": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java",
        "discussion_id": "2009809226",
        "commented_code": "@@ -850,13 +842,47 @@ public Object getHeader(String name, boolean single) {\n             if (list == null) {\n                 return Collections.emptyList();\n             } else {\n-                return list.stream()\n-                        .filter(h -> !h.isEmpty())\n-                        .toList();\n+                return filterEmpty(list);\n             }\n         }\n     }\n \n+    private static List<String> filterEmpty(List<String> list) {\n+        // empty and tiny lists are handled inlined\n+        int size = list.size();\n+        if (size == 0) {\n+            return list;\n+        }\n+        if (size == 1) {\n+            String val = list.get(0);\n+            if (val.isEmpty()) {\n+                return List.of();\n+            }\n+            return list;\n+        }\n+        // this shouldn't be common both on query params and header values\n+        return filterEmptyOnNonTinyList(list);\n+    }\n+\n+    private static List<String> filterEmptyOnNonTinyList(List<String> list) {\n+        assert list.size() > 1;\n+        List<String> nonEmptyList = null;",
        "comment_created_at": "2025-03-24T09:39:14+00:00",
        "comment_author": "blazmrak",
        "comment_body": "This is a huge edge case of an edge case imo. If you have a list of params, it's almost guaranteed that at least one will be non empty. It would be easier to just make `new ArrayList(list.size());` and filter the empty strings out.\r\n\r\nIf you want to keep your idea, I'd flip it around - make a copy only if you land on empty, otherwise you can just return `list`. I don't know if it would make a difference, but it should make less allocs in theory. It's an edge case though, so I wouldn't bother with this.\r\n\r\nUsing traditional for loops would also avoid that `remaining` counter and might improve performance a bit.",
        "pr_file_module": null
      },
      {
        "comment_id": "2009839848",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46950,
        "pr_file": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java",
        "discussion_id": "2009809226",
        "commented_code": "@@ -850,13 +842,47 @@ public Object getHeader(String name, boolean single) {\n             if (list == null) {\n                 return Collections.emptyList();\n             } else {\n-                return list.stream()\n-                        .filter(h -> !h.isEmpty())\n-                        .toList();\n+                return filterEmpty(list);\n             }\n         }\n     }\n \n+    private static List<String> filterEmpty(List<String> list) {\n+        // empty and tiny lists are handled inlined\n+        int size = list.size();\n+        if (size == 0) {\n+            return list;\n+        }\n+        if (size == 1) {\n+            String val = list.get(0);\n+            if (val.isEmpty()) {\n+                return List.of();\n+            }\n+            return list;\n+        }\n+        // this shouldn't be common both on query params and header values\n+        return filterEmptyOnNonTinyList(list);\n+    }\n+\n+    private static List<String> filterEmptyOnNonTinyList(List<String> list) {\n+        assert list.size() > 1;\n+        List<String> nonEmptyList = null;",
        "comment_created_at": "2025-03-24T09:56:47+00:00",
        "comment_author": "franz1981",
        "comment_body": ">  It would be easier to just make new ArrayList(list.size()); and filter the empty strings out.\r\n\r\nSince it's slow path I can make it, if it keeps the code more compact and simpler, thanks!\r\n\r\n> If you want to keep your idea, I'd flip it around - make a copy only if you land on empty, otherwise you can just return list\r\n\r\nI was thinking about it as well - but that means readding the non-empty ones already processed, from the beginning - which can be a waste for lil advantage - since it's already a slow path\r\n\r\n> Using traditional for loops\r\n\r\nI didn't do it because having `List:.get(index)` can be pretty bad with `LinkedList`s and it is what is been used by Vertx (sigh!). Iterating will just chase the next element instead - saving O(N^2) to happen \r\n\r\n\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2009868132",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46950,
        "pr_file": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java",
        "discussion_id": "2009809226",
        "commented_code": "@@ -850,13 +842,47 @@ public Object getHeader(String name, boolean single) {\n             if (list == null) {\n                 return Collections.emptyList();\n             } else {\n-                return list.stream()\n-                        .filter(h -> !h.isEmpty())\n-                        .toList();\n+                return filterEmpty(list);\n             }\n         }\n     }\n \n+    private static List<String> filterEmpty(List<String> list) {\n+        // empty and tiny lists are handled inlined\n+        int size = list.size();\n+        if (size == 0) {\n+            return list;\n+        }\n+        if (size == 1) {\n+            String val = list.get(0);\n+            if (val.isEmpty()) {\n+                return List.of();\n+            }\n+            return list;\n+        }\n+        // this shouldn't be common both on query params and header values\n+        return filterEmptyOnNonTinyList(list);\n+    }\n+\n+    private static List<String> filterEmptyOnNonTinyList(List<String> list) {\n+        assert list.size() > 1;\n+        List<String> nonEmptyList = null;",
        "comment_created_at": "2025-03-24T10:13:14+00:00",
        "comment_author": "blazmrak",
        "comment_body": "> and it is what is been used by Vertx\r\n\r\nOk, makes sense, I was assuming it was ArrayList under the hood :smile:",
        "pr_file_module": null
      }
    ]
  }
]