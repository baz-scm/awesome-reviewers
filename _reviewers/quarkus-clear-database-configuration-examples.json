[
  {
    "discussion_id": "2073114905",
    "pr_number": 47631,
    "pr_file": "docs/src/main/asciidoc/hibernate-reactive.adoc",
    "created_at": "2025-05-05T09:18:27+00:00",
    "commented_code": "----\n ====\n \n+[[hr-named-datasource]]\n+==== Named data sources\n+\n+Hibernate Reactive supports having named data sources\n+\n+[source,properties]\n+.Example `{config-file}`\n+----\n+# datasource configuration\n+quarkus.hibernate-orm.datasource = named-datasource\n+quarkus.datasource.\"named-datasource\".reactive\", true\n+quarkus.datasource.\"named-datasource\".db-kind\", postgresql\n+quarkus.datasource.\"named-datasource\".username\", quarkus_test\n+quarkus.datasource.\"named-datasource\".password\", quarkus_test",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2073114905",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47631,
        "pr_file": "docs/src/main/asciidoc/hibernate-reactive.adoc",
        "discussion_id": "2073114905",
        "commented_code": "@@ -354,6 +354,38 @@ public class SomeTest {\n ----\n ====\n \n+[[hr-named-datasource]]\n+==== Named data sources\n+\n+Hibernate Reactive supports having named data sources\n+\n+[source,properties]\n+.Example `{config-file}`\n+----\n+# datasource configuration\n+quarkus.hibernate-orm.datasource = named-datasource\n+quarkus.datasource.\"named-datasource\".reactive\", true\n+quarkus.datasource.\"named-datasource\".db-kind\", postgresql\n+quarkus.datasource.\"named-datasource\".username\", quarkus_test\n+quarkus.datasource.\"named-datasource\".password\", quarkus_test",
        "comment_created_at": "2025-05-05T09:18:27+00:00",
        "comment_author": "yrodiere",
        "comment_body": "Copy-pasted from tests, I assume?\r\n\r\n```suggestion\r\nquarkus.datasource.\"named-datasource\".reactive = true\r\nquarkus.datasource.\"named-datasource\".db-kind = postgresql\r\nquarkus.datasource.\"named-datasource\".username = quarkus_test\r\nquarkus.datasource.\"named-datasource\".password = quarkus_test\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2073117679",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47631,
        "pr_file": "docs/src/main/asciidoc/hibernate-reactive.adoc",
        "discussion_id": "2073114905",
        "commented_code": "@@ -354,6 +354,38 @@ public class SomeTest {\n ----\n ====\n \n+[[hr-named-datasource]]\n+==== Named data sources\n+\n+Hibernate Reactive supports having named data sources\n+\n+[source,properties]\n+.Example `{config-file}`\n+----\n+# datasource configuration\n+quarkus.hibernate-orm.datasource = named-datasource\n+quarkus.datasource.\"named-datasource\".reactive\", true\n+quarkus.datasource.\"named-datasource\".db-kind\", postgresql\n+quarkus.datasource.\"named-datasource\".username\", quarkus_test\n+quarkus.datasource.\"named-datasource\".password\", quarkus_test",
        "comment_created_at": "2025-05-05T09:19:37+00:00",
        "comment_author": "yrodiere",
        "comment_body": "Though really, the minimal configuration is just this:\r\n\r\n```suggestion\r\nquarkus.datasource.\"named-datasource\".db-kind = postgresql\r\n```\r\n\r\nThe rest is just the defaults and/or would need to be different in prod anyway.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2033085848",
    "pr_number": 44473,
    "pr_file": "docs/src/main/asciidoc/hibernate-reactive.adoc",
    "created_at": "2025-04-08T12:29:14+00:00",
    "commented_code": "Note that these configuration properties are not the same ones as in your typical Hibernate Reactive configuration file.\n They will often map to Hibernate Reactive configuration properties but could have different names and don't necessarily map 1:1 to each other.\n \n+Blocking (non-reactive) and reactive configuration can be mixed together in the same project. You can take an example from the Quarkus' integration test `quarkus-integration-test-hibernate-reactive-orm-compatibility`",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2033085848",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44473,
        "pr_file": "docs/src/main/asciidoc/hibernate-reactive.adoc",
        "discussion_id": "2033085848",
        "commented_code": "@@ -112,6 +112,8 @@ quarkus.hibernate-orm.database.generation=drop-and-create\n Note that these configuration properties are not the same ones as in your typical Hibernate Reactive configuration file.\n They will often map to Hibernate Reactive configuration properties but could have different names and don't necessarily map 1:1 to each other.\n \n+Blocking (non-reactive) and reactive configuration can be mixed together in the same project. You can take an example from the Quarkus' integration test `quarkus-integration-test-hibernate-reactive-orm-compatibility`",
        "comment_created_at": "2025-04-08T12:29:14+00:00",
        "comment_author": "yrodiere",
        "comment_body": "I think this deserves a separate section, similar to https://quarkus.io/guides/datasource#jdbc-and-reactive-datasources-simultaneously ? Especially since you introduced properties to disable the blocking part (thanks!).\r\n\r\nAlso, I wouldn't point to integration tests from the documentation... it'll likely confuse people more than help them. If you want, you can create a quickstart, but I personally don't think it's necessary. Just a paragraph explaining how it works should be enough IMO.",
        "pr_file_module": null
      },
      {
        "comment_id": "2035326082",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44473,
        "pr_file": "docs/src/main/asciidoc/hibernate-reactive.adoc",
        "discussion_id": "2033085848",
        "commented_code": "@@ -112,6 +112,8 @@ quarkus.hibernate-orm.database.generation=drop-and-create\n Note that these configuration properties are not the same ones as in your typical Hibernate Reactive configuration file.\n They will often map to Hibernate Reactive configuration properties but could have different names and don't necessarily map 1:1 to each other.\n \n+Blocking (non-reactive) and reactive configuration can be mixed together in the same project. You can take an example from the Quarkus' integration test `quarkus-integration-test-hibernate-reactive-orm-compatibility`",
        "comment_created_at": "2025-04-09T13:03:24+00:00",
        "comment_author": "lucamolteni",
        "comment_body": "Take a look at this https://github.com/quarkusio/quarkus/pull/44473/commits/9e58bc6ee728eecc3c95d2c5dac1b60e8ea0482d",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2035539454",
    "pr_number": 44473,
    "pr_file": "docs/src/main/asciidoc/hibernate-reactive.adoc",
    "created_at": "2025-04-09T14:45:15+00:00",
    "commented_code": "Note that these configuration properties are not the same ones as in your typical Hibernate Reactive configuration file.\n They will often map to Hibernate Reactive configuration properties but could have different names and don't necessarily map 1:1 to each other.\n \n-Also, Quarkus will set many Hibernate Reactive configuration settings automatically, and will often use more modern defaults.\n+Blocking (non-reactive) and reactive configuration can be mixed together in the same project.\n+\n+[[orm-and-reactive-extension-simultaneously]]\n+=== Hibernate ORM and Reactive extensions simultaneously\n+\n+If you add both Hibernate ORM and Hibernate Reactive extensions to your Quarkus app, they can work together.\n+\n+This is useful if your app normally uses Hibernate ORM (which is blocking), but you want to try Hibernate Reactive to see if it works better for your case.\n+\n+By adding the second extension, you can use the reactive API in another part of your code - without needing to create a separate app.",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2035539454",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44473,
        "pr_file": "docs/src/main/asciidoc/hibernate-reactive.adoc",
        "discussion_id": "2035539454",
        "commented_code": "@@ -112,7 +112,57 @@ quarkus.hibernate-orm.database.generation=drop-and-create\n Note that these configuration properties are not the same ones as in your typical Hibernate Reactive configuration file.\n They will often map to Hibernate Reactive configuration properties but could have different names and don't necessarily map 1:1 to each other.\n \n-Also, Quarkus will set many Hibernate Reactive configuration settings automatically, and will often use more modern defaults.\n+Blocking (non-reactive) and reactive configuration can be mixed together in the same project.\n+\n+[[orm-and-reactive-extension-simultaneously]]\n+=== Hibernate ORM and Reactive extensions simultaneously\n+\n+If you add both Hibernate ORM and Hibernate Reactive extensions to your Quarkus app, they can work together.\n+\n+This is useful if your app normally uses Hibernate ORM (which is blocking), but you want to try Hibernate Reactive to see if it works better for your case.\n+\n+By adding the second extension, you can use the reactive API in another part of your code - without needing to create a separate app.",
        "comment_created_at": "2025-04-09T14:45:15+00:00",
        "comment_author": "yrodiere",
        "comment_body": "Do you think this note would make sense?\r\n\r\n```suggestion\r\nThis is useful if your app normally uses Hibernate ORM (which is blocking), but you want to try Hibernate Reactive to see if it works better for your case.\r\n\r\nBy adding the second extension, you can use the reactive API in another part of your code - without needing to create a separate app.\r\n\r\nNOTE: Hibernate ORM and Hibernate Reactive won't share the same persistence context, so it's recommended you stick to one or the other in a given method. For example use Hibernate ORM in blocking REST endpoints, and use Hibernate Reactive in reactive REST endpoints.\r\n```\r\n\r\nAlternatively we could just give an example of a REST resource where one endpoint is blocking and calls a complicated service method (which we won't detail), and another endpoint returns a Multi that essentially streams entities -- a good use case for reactive?",
        "pr_file_module": null
      },
      {
        "comment_id": "2036988460",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44473,
        "pr_file": "docs/src/main/asciidoc/hibernate-reactive.adoc",
        "discussion_id": "2035539454",
        "commented_code": "@@ -112,7 +112,57 @@ quarkus.hibernate-orm.database.generation=drop-and-create\n Note that these configuration properties are not the same ones as in your typical Hibernate Reactive configuration file.\n They will often map to Hibernate Reactive configuration properties but could have different names and don't necessarily map 1:1 to each other.\n \n-Also, Quarkus will set many Hibernate Reactive configuration settings automatically, and will often use more modern defaults.\n+Blocking (non-reactive) and reactive configuration can be mixed together in the same project.\n+\n+[[orm-and-reactive-extension-simultaneously]]\n+=== Hibernate ORM and Reactive extensions simultaneously\n+\n+If you add both Hibernate ORM and Hibernate Reactive extensions to your Quarkus app, they can work together.\n+\n+This is useful if your app normally uses Hibernate ORM (which is blocking), but you want to try Hibernate Reactive to see if it works better for your case.\n+\n+By adding the second extension, you can use the reactive API in another part of your code - without needing to create a separate app.",
        "comment_created_at": "2025-04-10T10:01:02+00:00",
        "comment_author": "yrodiere",
        "comment_body": "I think this was forgotten about?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2036983193",
    "pr_number": 44473,
    "pr_file": "docs/src/main/asciidoc/hibernate-reactive.adoc",
    "created_at": "2025-04-10T09:58:01+00:00",
    "commented_code": "This will start a non-durable empty database: ideal for a quick experiment!\n ====\n \n+[[orm-and-reactive-extension-simultaneously]]\n+=== Hibernate ORM and Reactive extensions simultaneously\n+\n+If you add both Hibernate ORM and Hibernate Reactive extensions to your Quarkus app, they can work together.\n+\n+This is useful if your app normally uses Hibernate ORM (which is blocking), but you want to try Hibernate Reactive to see if it works better for your case.\n+\n+By adding the second extension, you can use the reactive API in another part of your code - without needing to create a separate app.\n+\n+* To use the both extension simultaneously, add both extension to the `pom.xml` file:\n++\n+[source,xml]\n+----\n+        <!-- Hibernate reactive -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-reactive</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-reactive-pg-client</artifactId>\n+        </dependency>\n+\n+        <!-- Hibernate ORM -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-jdbc-postgresql</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-orm</artifactId>\n+        </dependency>\n+----\n+\n+* Also update the `applications.properties` file:\n+[source,properties]\n+----\n+%prod.quarkus.datasource.reactive.url=postgresql:///your_database\n+%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+----\n+\n+* The presence of the JDBC driver will trigger Hibernate ORM. If you want to disabled it, you can use:",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2036983193",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44473,
        "pr_file": "docs/src/main/asciidoc/hibernate-reactive.adoc",
        "discussion_id": "2036983193",
        "commented_code": "@@ -209,6 +209,57 @@ docker run --rm --name postgres-quarkus-hibernate -e POSTGRES_USER=quarkus_test\n This will start a non-durable empty database: ideal for a quick experiment!\n ====\n \n+[[orm-and-reactive-extension-simultaneously]]\n+=== Hibernate ORM and Reactive extensions simultaneously\n+\n+If you add both Hibernate ORM and Hibernate Reactive extensions to your Quarkus app, they can work together.\n+\n+This is useful if your app normally uses Hibernate ORM (which is blocking), but you want to try Hibernate Reactive to see if it works better for your case.\n+\n+By adding the second extension, you can use the reactive API in another part of your code - without needing to create a separate app.\n+\n+* To use the both extension simultaneously, add both extension to the `pom.xml` file:\n++\n+[source,xml]\n+----\n+        <!-- Hibernate reactive -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-reactive</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-reactive-pg-client</artifactId>\n+        </dependency>\n+\n+        <!-- Hibernate ORM -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-jdbc-postgresql</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-orm</artifactId>\n+        </dependency>\n+----\n+\n+* Also update the `applications.properties` file:\n+[source,properties]\n+----\n+%prod.quarkus.datasource.reactive.url=postgresql:///your_database\n+%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+----\n+\n+* The presence of the JDBC driver will trigger Hibernate ORM. If you want to disabled it, you can use:",
        "comment_created_at": "2025-04-10T09:58:01+00:00",
        "comment_author": "yrodiere",
        "comment_body": "```suggestion\r\n* The presence of the JDBC driver will enable Hibernate ORM. If you want to disable it, and only use Hibernate Reactive, you can use:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2032782252",
    "pr_number": 47118,
    "pr_file": "docs/src/main/asciidoc/datasource.adoc",
    "created_at": "2025-04-08T09:26:12+00:00",
    "commented_code": "* `quarkus.datasource.jdbc.transactions` for default unnamed datasource\n * `quarkus.datasource._<datasource-name>_.jdbc.transactions` for named datasource\n \n+Datasources are also automatically registered with the transaction recovery system when recovery is enabled. Sometimes an application may wish to override this behaviour, such as when more than one datasource connects to the same database, by setting the configuration property `quarkus.datasource.xa.jdbc.enable-recovery` to `false`. Note that it is vital that at least one such XA capable datasource is enabled for recovery.",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2032782252",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47118,
        "pr_file": "docs/src/main/asciidoc/datasource.adoc",
        "discussion_id": "2032782252",
        "commented_code": "@@ -680,6 +680,8 @@ You can override this by setting the `transactions` configuration property:\n * `quarkus.datasource.jdbc.transactions` for default unnamed datasource\n * `quarkus.datasource._<datasource-name>_.jdbc.transactions` for named datasource\n \n+Datasources are also automatically registered with the transaction recovery system when recovery is enabled. Sometimes an application may wish to override this behaviour, such as when more than one datasource connects to the same database, by setting the configuration property `quarkus.datasource.xa.jdbc.enable-recovery` to `false`. Note that it is vital that at least one such XA capable datasource is enabled for recovery.",
        "comment_created_at": "2025-04-08T09:26:12+00:00",
        "comment_author": "yrodiere",
        "comment_body": "I know for certain that I'll get pinged during productization to solve these issues, so I'll mention them now...\r\n\r\n> Sometimes an application may wish to override this behaviour, such as when more than one datasource connects to the same database, by setting the configuration property `quarkus.datasource.xa.jdbc.enable-recovery` to `false`.\r\n\r\nFrom just this text, I'm not sure why having two datasources connecting to the same database would change anything -- wouldn't those two datasources have distinct transactions, and thus distinct recovery needs?\r\n\r\nAlso, IMO it should be `quarkus.datasource.\"datasource-name\".jdbc.enable-recovery`, not `quarkus.datasource.xa.jdbc.enable-recovery`. \"xa\" as a datasource name in documentation is very confusing.\r\n\r\n> Note that it is vital that at least one such XA capable datasource is enabled for recovery.\r\n\r\nYou may want to explain what the consequences of not doing this are? Surely nobody will die and \"vital\" is just a turn of phrase :)\r\n\r\n---\r\n\r\nActually I suspect this is just saying both too much and too little. I'd suggest keeping it simple and vague?\r\n\r\n```suggestion\r\nDatasources are also automatically registered with the transaction recovery system when recovery is enabled. This is a safe default, but you can override this behaviour on a per-datasource basis by setting `quarkus.datasource.jdbc.enable-recovery`/`quarkus.datasource.\"datasource-name\".jdbc.enable-recovery` to `false`. Only use this for advanced use cases and if you know recovery will not be necessary, otherwise it may result in data loss.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2035790209",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47118,
        "pr_file": "docs/src/main/asciidoc/datasource.adoc",
        "discussion_id": "2032782252",
        "commented_code": "@@ -680,6 +680,8 @@ You can override this by setting the `transactions` configuration property:\n * `quarkus.datasource.jdbc.transactions` for default unnamed datasource\n * `quarkus.datasource._<datasource-name>_.jdbc.transactions` for named datasource\n \n+Datasources are also automatically registered with the transaction recovery system when recovery is enabled. Sometimes an application may wish to override this behaviour, such as when more than one datasource connects to the same database, by setting the configuration property `quarkus.datasource.xa.jdbc.enable-recovery` to `false`. Note that it is vital that at least one such XA capable datasource is enabled for recovery.",
        "comment_created_at": "2025-04-09T17:07:01+00:00",
        "comment_author": "mmusgrov",
        "comment_body": "How about the following text:\r\n\r\n> When a datasource is enabled for XA (by setting `quarkus.datasource[.optional name].jdbc.transactions to xa)` and the transaction recovery system is enabled (by setting the property `quarkus.transaction-manager.enable-recovery` to true) then the datasource is automatically registered for recovery. This is a safe default, but you can override this behaviour on a per-datasource basis by setting `quarkus.datasource.jdbc.enable-recovery`/`quarkus.datasource.\"datasource-name\".jdbc.enable-recovery` to `false`. Only use this for advanced use cases and if you know recovery will not be necessary, otherwise it may result in data loss and/or data unavailability because resources may become locked indefinitely.",
        "pr_file_module": null
      },
      {
        "comment_id": "2035800190",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47118,
        "pr_file": "docs/src/main/asciidoc/datasource.adoc",
        "discussion_id": "2032782252",
        "commented_code": "@@ -680,6 +680,8 @@ You can override this by setting the `transactions` configuration property:\n * `quarkus.datasource.jdbc.transactions` for default unnamed datasource\n * `quarkus.datasource._<datasource-name>_.jdbc.transactions` for named datasource\n \n+Datasources are also automatically registered with the transaction recovery system when recovery is enabled. Sometimes an application may wish to override this behaviour, such as when more than one datasource connects to the same database, by setting the configuration property `quarkus.datasource.xa.jdbc.enable-recovery` to `false`. Note that it is vital that at least one such XA capable datasource is enabled for recovery.",
        "comment_created_at": "2025-04-09T17:14:12+00:00",
        "comment_author": "mmusgrov",
        "comment_body": "> Also, IMO it should be quarkus.datasource.\"datasource-name\".jdbc.enable-recovery, not quarkus.datasource.xa.jdbc.enable-recovery. \"xa\" as a datasource name in documentation is very confusing.\r\n\r\nYou're right, super catch - it was a cut and paste typo from the application.properties file I included with the tests, thanks.",
        "pr_file_module": null
      },
      {
        "comment_id": "2035828848",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47118,
        "pr_file": "docs/src/main/asciidoc/datasource.adoc",
        "discussion_id": "2032782252",
        "commented_code": "@@ -680,6 +680,8 @@ You can override this by setting the `transactions` configuration property:\n * `quarkus.datasource.jdbc.transactions` for default unnamed datasource\n * `quarkus.datasource._<datasource-name>_.jdbc.transactions` for named datasource\n \n+Datasources are also automatically registered with the transaction recovery system when recovery is enabled. Sometimes an application may wish to override this behaviour, such as when more than one datasource connects to the same database, by setting the configuration property `quarkus.datasource.xa.jdbc.enable-recovery` to `false`. Note that it is vital that at least one such XA capable datasource is enabled for recovery.",
        "comment_created_at": "2025-04-09T17:34:44+00:00",
        "comment_author": "mmusgrov",
        "comment_body": "> From just this text, I'm not sure why having two datasources connecting to the same database would change anything -- wouldn't those two datasources have distinct transactions, and thus distinct recovery needs?\r\n\r\nGiven the change to the text this question is not so relevant now. But the question does go to the heart of why the new feature is required so I'll provide more context:\r\n\r\nTwo datasource definitions can connect to the same underlying resource (for example they may have different credentials). The feature refers to how the recovery system finishes pending transaction branches: an XAResource supports a [recover](https://devdocs.io/openjdk~17/java.transaction.xa/javax/transaction/xa/xaresource#recover(int)) [1] operation for scanning XA capable resources to obtain a list of XIDs of transaction branches that are currently in a prepared or heuristically completed state, ie it works on behalf of all transactions that used that resource. The XAResource interface also supports an operation to test whether two resources correspond to [the same XAResource instance](https://devdocs.io/openjdk~17/java.transaction.xa/javax/transaction/xa/xaresource#isSameRM(javax.transaction.xa.XAResource)) [2] but not all resource vendors implement it correctly and as a result recovery can end up opening multiple connections to the same underlying resource which has been reported as being an issue. The recovery system will periodically try to complete (commit/rollback/forget) any XIDs that it \"owns\".\r\n\r\n[1] https://devdocs.io/openjdk~17/java.transaction.xa/javax/transaction/xa/xaresource#recover(int)\r\n[2] https://devdocs.io/openjdk~17/java.transaction.xa/javax/transaction/xa/xaresource#isSameRM(javax.transaction.xa.XAResource)\r\n",
        "pr_file_module": null
      }
    ]
  }
]