[
  {
    "discussion_id": "2175151685",
    "pr_number": 48688,
    "pr_file": "adr/0009-extension-structure.adoc",
    "created_at": "2025-06-30T13:58:37+00:00",
    "commented_code": "+= Extension Structure Guidelines\n+\n+* Status: Proposed\n+* Date: 2025-06-30\n+* Authors: @cescoffier, @gsmet\n+\n+== Context\n+\n+The Quarkus ecosystem includes more than 700 extensions, many of which were developed without a consistent structure. The Quarkus core repository alone contains over 150 extensions.\n+\n+Most extensions follow the basic runtime/deployment split, but the boundaries between API and internal logic have often blurred. Additionally, without clear package structure rules, many split packages have emerged. This situation introduces several issues:\n+\n+* It is unclear which classes are intended as public APIs versus internal implementations.\n+* There is no clear boundary between what an extension consumer can depend on and what they should not use.\n+* Some extensions mix SPI and implementation code, reducing modularity and increasing the chance of unwanted coupling.\n+* The need for build item re-use or coordination between extensions leads to ad-hoc patterns.\n+\n+More recently, we introduced dev-only dependencies, further increasing complexity.\n+\n+To address these issues and prepare for long-term maintainability (and possibly Java Platform Module System adoption), we propose a more structured layout for extension modules.\n+\n+== Decision\n+\n+Extensions may use a standardized structure composed of up to five optional modules, depending on their needs:\n+\n+* `runtime`: Contains the runtime implementation. It may expose public APIs if needed but should prefer delegation to the spi module.\n+* `spi`: Contains public APIs intended to be consumed by other extensions or application code. This module should have minimal dependencies. Depending on a spi module does not transitively include the full extension (i.e., it avoids pulling in runtime or deployment logic).\n+* `deployment`: Contains build-time logic, including BuildSteps and recorder logic. This module may define internal build items.\n+* `deployment-spi`: Contains build-time APIs intended to be reused across multiple extensions. Extensions contributing to or using build items from other extensions should depend on deployment-spi modules.\n+* `runtime-dev`: Contains runtime classes used exclusively in dev mode (e.g., for the Dev UI). This avoids shipping dev-only classes into production artifacts.\n+\n+All these modules are optional.\n+\n+=== Additional Rules\n+\n+\t* Module dependencies must follow strict rules:\n+\t* `deployment` depends on `runtime`, `runtime-dev` (if defined) and `deployment-spi` (if defined).\n+\t* `runtime` depends on `spi` (if defined).\n+\t* External consumers should rely only on `spi` or `deployment-spi` to be loose-coupled.\n+    * External consumers should rely only on `spi` or `deployment-spi` to be tightly-coupled (forcing the target extension to be present at execution).\n+\t* Public APIs must be explicitly documented, including build items meant for inter-extension use.\n+\t* Each module should provide an `Automatic-Module-Name` based on the root package:\n+\n+\t    ** Runtime: `io.<quarkus|quarkiverse>.<extension-name>`\n+\t    ** Deployment: `io.<quarkus|quarkiverse>.<extension-name>.deployment`\n+\t    ** Runtime SPI: `io.<quarkus|quarkiverse>.<extension-name>.spi`\n+\t    ** Deployment SPI: `io.<quarkus|quarkiverse>.<extension-name>.deployment.spi`\n+\t    ** Runtime Dev: `io.<quarkus|quarkiverse>.<extension-name>.runtime.dev`\n+\n+=== Package Name Rules\n+\n+Extensions must use a well-defined package structure to avoid split packages.\n+\n+==== runtime module\n+* `io.<quarkus|quarkiverse>.<extension-name>`: Public API. May include subpackages (excluding `spi`). Example: `io.quarkus.cache`.",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2175151685",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48688,
        "pr_file": "adr/0009-extension-structure.adoc",
        "discussion_id": "2175151685",
        "commented_code": "@@ -0,0 +1,162 @@\n+= Extension Structure Guidelines\n+\n+* Status: Proposed\n+* Date: 2025-06-30\n+* Authors: @cescoffier, @gsmet\n+\n+== Context\n+\n+The Quarkus ecosystem includes more than 700 extensions, many of which were developed without a consistent structure. The Quarkus core repository alone contains over 150 extensions.\n+\n+Most extensions follow the basic runtime/deployment split, but the boundaries between API and internal logic have often blurred. Additionally, without clear package structure rules, many split packages have emerged. This situation introduces several issues:\n+\n+* It is unclear which classes are intended as public APIs versus internal implementations.\n+* There is no clear boundary between what an extension consumer can depend on and what they should not use.\n+* Some extensions mix SPI and implementation code, reducing modularity and increasing the chance of unwanted coupling.\n+* The need for build item re-use or coordination between extensions leads to ad-hoc patterns.\n+\n+More recently, we introduced dev-only dependencies, further increasing complexity.\n+\n+To address these issues and prepare for long-term maintainability (and possibly Java Platform Module System adoption), we propose a more structured layout for extension modules.\n+\n+== Decision\n+\n+Extensions may use a standardized structure composed of up to five optional modules, depending on their needs:\n+\n+* `runtime`: Contains the runtime implementation. It may expose public APIs if needed but should prefer delegation to the spi module.\n+* `spi`: Contains public APIs intended to be consumed by other extensions or application code. This module should have minimal dependencies. Depending on a spi module does not transitively include the full extension (i.e., it avoids pulling in runtime or deployment logic).\n+* `deployment`: Contains build-time logic, including BuildSteps and recorder logic. This module may define internal build items.\n+* `deployment-spi`: Contains build-time APIs intended to be reused across multiple extensions. Extensions contributing to or using build items from other extensions should depend on deployment-spi modules.\n+* `runtime-dev`: Contains runtime classes used exclusively in dev mode (e.g., for the Dev UI). This avoids shipping dev-only classes into production artifacts.\n+\n+All these modules are optional.\n+\n+=== Additional Rules\n+\n+\t* Module dependencies must follow strict rules:\n+\t* `deployment` depends on `runtime`, `runtime-dev` (if defined) and `deployment-spi` (if defined).\n+\t* `runtime` depends on `spi` (if defined).\n+\t* External consumers should rely only on `spi` or `deployment-spi` to be loose-coupled.\n+    * External consumers should rely only on `spi` or `deployment-spi` to be tightly-coupled (forcing the target extension to be present at execution).\n+\t* Public APIs must be explicitly documented, including build items meant for inter-extension use.\n+\t* Each module should provide an `Automatic-Module-Name` based on the root package:\n+\n+\t    ** Runtime: `io.<quarkus|quarkiverse>.<extension-name>`\n+\t    ** Deployment: `io.<quarkus|quarkiverse>.<extension-name>.deployment`\n+\t    ** Runtime SPI: `io.<quarkus|quarkiverse>.<extension-name>.spi`\n+\t    ** Deployment SPI: `io.<quarkus|quarkiverse>.<extension-name>.deployment.spi`\n+\t    ** Runtime Dev: `io.<quarkus|quarkiverse>.<extension-name>.runtime.dev`\n+\n+=== Package Name Rules\n+\n+Extensions must use a well-defined package structure to avoid split packages.\n+\n+==== runtime module\n+* `io.<quarkus|quarkiverse>.<extension-name>`: Public API. May include subpackages (excluding `spi`). Example: `io.quarkus.cache`.",
        "comment_created_at": "2025-06-30T13:58:37+00:00",
        "comment_author": "dmlloyd",
        "comment_body": "One problem I think we have is that non-extension packages are in a conflicting namespace with extension packages. Would it be possible to change the recommendation going forward to be something like `io.<quarkus|quarkiverse>.ext.<extension-name>...`? Otherwise, we could put all non-extension classes under a single subpackage to minimize the conflict e.g. `io.quarkus.core.xxx`. Either way is breaking stuff but would prevent more/worse breakage in the future.",
        "pr_file_module": null
      },
      {
        "comment_id": "2176585499",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48688,
        "pr_file": "adr/0009-extension-structure.adoc",
        "discussion_id": "2175151685",
        "commented_code": "@@ -0,0 +1,162 @@\n+= Extension Structure Guidelines\n+\n+* Status: Proposed\n+* Date: 2025-06-30\n+* Authors: @cescoffier, @gsmet\n+\n+== Context\n+\n+The Quarkus ecosystem includes more than 700 extensions, many of which were developed without a consistent structure. The Quarkus core repository alone contains over 150 extensions.\n+\n+Most extensions follow the basic runtime/deployment split, but the boundaries between API and internal logic have often blurred. Additionally, without clear package structure rules, many split packages have emerged. This situation introduces several issues:\n+\n+* It is unclear which classes are intended as public APIs versus internal implementations.\n+* There is no clear boundary between what an extension consumer can depend on and what they should not use.\n+* Some extensions mix SPI and implementation code, reducing modularity and increasing the chance of unwanted coupling.\n+* The need for build item re-use or coordination between extensions leads to ad-hoc patterns.\n+\n+More recently, we introduced dev-only dependencies, further increasing complexity.\n+\n+To address these issues and prepare for long-term maintainability (and possibly Java Platform Module System adoption), we propose a more structured layout for extension modules.\n+\n+== Decision\n+\n+Extensions may use a standardized structure composed of up to five optional modules, depending on their needs:\n+\n+* `runtime`: Contains the runtime implementation. It may expose public APIs if needed but should prefer delegation to the spi module.\n+* `spi`: Contains public APIs intended to be consumed by other extensions or application code. This module should have minimal dependencies. Depending on a spi module does not transitively include the full extension (i.e., it avoids pulling in runtime or deployment logic).\n+* `deployment`: Contains build-time logic, including BuildSteps and recorder logic. This module may define internal build items.\n+* `deployment-spi`: Contains build-time APIs intended to be reused across multiple extensions. Extensions contributing to or using build items from other extensions should depend on deployment-spi modules.\n+* `runtime-dev`: Contains runtime classes used exclusively in dev mode (e.g., for the Dev UI). This avoids shipping dev-only classes into production artifacts.\n+\n+All these modules are optional.\n+\n+=== Additional Rules\n+\n+\t* Module dependencies must follow strict rules:\n+\t* `deployment` depends on `runtime`, `runtime-dev` (if defined) and `deployment-spi` (if defined).\n+\t* `runtime` depends on `spi` (if defined).\n+\t* External consumers should rely only on `spi` or `deployment-spi` to be loose-coupled.\n+    * External consumers should rely only on `spi` or `deployment-spi` to be tightly-coupled (forcing the target extension to be present at execution).\n+\t* Public APIs must be explicitly documented, including build items meant for inter-extension use.\n+\t* Each module should provide an `Automatic-Module-Name` based on the root package:\n+\n+\t    ** Runtime: `io.<quarkus|quarkiverse>.<extension-name>`\n+\t    ** Deployment: `io.<quarkus|quarkiverse>.<extension-name>.deployment`\n+\t    ** Runtime SPI: `io.<quarkus|quarkiverse>.<extension-name>.spi`\n+\t    ** Deployment SPI: `io.<quarkus|quarkiverse>.<extension-name>.deployment.spi`\n+\t    ** Runtime Dev: `io.<quarkus|quarkiverse>.<extension-name>.runtime.dev`\n+\n+=== Package Name Rules\n+\n+Extensions must use a well-defined package structure to avoid split packages.\n+\n+==== runtime module\n+* `io.<quarkus|quarkiverse>.<extension-name>`: Public API. May include subpackages (excluding `spi`). Example: `io.quarkus.cache`.",
        "comment_created_at": "2025-07-01T06:57:49+00:00",
        "comment_author": "cescoffier",
        "comment_body": "I would go with the latter.\r\n\r\nVert.x 2 and 3 (at the beginning) tried to use `ext` packages - it didn't fly. Very quickly, the `ext` looked odd and inconvenient. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2177544616",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48688,
        "pr_file": "adr/0009-extension-structure.adoc",
        "discussion_id": "2175151685",
        "commented_code": "@@ -0,0 +1,162 @@\n+= Extension Structure Guidelines\n+\n+* Status: Proposed\n+* Date: 2025-06-30\n+* Authors: @cescoffier, @gsmet\n+\n+== Context\n+\n+The Quarkus ecosystem includes more than 700 extensions, many of which were developed without a consistent structure. The Quarkus core repository alone contains over 150 extensions.\n+\n+Most extensions follow the basic runtime/deployment split, but the boundaries between API and internal logic have often blurred. Additionally, without clear package structure rules, many split packages have emerged. This situation introduces several issues:\n+\n+* It is unclear which classes are intended as public APIs versus internal implementations.\n+* There is no clear boundary between what an extension consumer can depend on and what they should not use.\n+* Some extensions mix SPI and implementation code, reducing modularity and increasing the chance of unwanted coupling.\n+* The need for build item re-use or coordination between extensions leads to ad-hoc patterns.\n+\n+More recently, we introduced dev-only dependencies, further increasing complexity.\n+\n+To address these issues and prepare for long-term maintainability (and possibly Java Platform Module System adoption), we propose a more structured layout for extension modules.\n+\n+== Decision\n+\n+Extensions may use a standardized structure composed of up to five optional modules, depending on their needs:\n+\n+* `runtime`: Contains the runtime implementation. It may expose public APIs if needed but should prefer delegation to the spi module.\n+* `spi`: Contains public APIs intended to be consumed by other extensions or application code. This module should have minimal dependencies. Depending on a spi module does not transitively include the full extension (i.e., it avoids pulling in runtime or deployment logic).\n+* `deployment`: Contains build-time logic, including BuildSteps and recorder logic. This module may define internal build items.\n+* `deployment-spi`: Contains build-time APIs intended to be reused across multiple extensions. Extensions contributing to or using build items from other extensions should depend on deployment-spi modules.\n+* `runtime-dev`: Contains runtime classes used exclusively in dev mode (e.g., for the Dev UI). This avoids shipping dev-only classes into production artifacts.\n+\n+All these modules are optional.\n+\n+=== Additional Rules\n+\n+\t* Module dependencies must follow strict rules:\n+\t* `deployment` depends on `runtime`, `runtime-dev` (if defined) and `deployment-spi` (if defined).\n+\t* `runtime` depends on `spi` (if defined).\n+\t* External consumers should rely only on `spi` or `deployment-spi` to be loose-coupled.\n+    * External consumers should rely only on `spi` or `deployment-spi` to be tightly-coupled (forcing the target extension to be present at execution).\n+\t* Public APIs must be explicitly documented, including build items meant for inter-extension use.\n+\t* Each module should provide an `Automatic-Module-Name` based on the root package:\n+\n+\t    ** Runtime: `io.<quarkus|quarkiverse>.<extension-name>`\n+\t    ** Deployment: `io.<quarkus|quarkiverse>.<extension-name>.deployment`\n+\t    ** Runtime SPI: `io.<quarkus|quarkiverse>.<extension-name>.spi`\n+\t    ** Deployment SPI: `io.<quarkus|quarkiverse>.<extension-name>.deployment.spi`\n+\t    ** Runtime Dev: `io.<quarkus|quarkiverse>.<extension-name>.runtime.dev`\n+\n+=== Package Name Rules\n+\n+Extensions must use a well-defined package structure to avoid split packages.\n+\n+==== runtime module\n+* `io.<quarkus|quarkiverse>.<extension-name>`: Public API. May include subpackages (excluding `spi`). Example: `io.quarkus.cache`.",
        "comment_created_at": "2025-07-01T12:59:13+00:00",
        "comment_author": "dmlloyd",
        "comment_body": "In that case we have a lot of packages to rename.",
        "pr_file_module": null
      },
      {
        "comment_id": "2182246618",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48688,
        "pr_file": "adr/0009-extension-structure.adoc",
        "discussion_id": "2175151685",
        "commented_code": "@@ -0,0 +1,162 @@\n+= Extension Structure Guidelines\n+\n+* Status: Proposed\n+* Date: 2025-06-30\n+* Authors: @cescoffier, @gsmet\n+\n+== Context\n+\n+The Quarkus ecosystem includes more than 700 extensions, many of which were developed without a consistent structure. The Quarkus core repository alone contains over 150 extensions.\n+\n+Most extensions follow the basic runtime/deployment split, but the boundaries between API and internal logic have often blurred. Additionally, without clear package structure rules, many split packages have emerged. This situation introduces several issues:\n+\n+* It is unclear which classes are intended as public APIs versus internal implementations.\n+* There is no clear boundary between what an extension consumer can depend on and what they should not use.\n+* Some extensions mix SPI and implementation code, reducing modularity and increasing the chance of unwanted coupling.\n+* The need for build item re-use or coordination between extensions leads to ad-hoc patterns.\n+\n+More recently, we introduced dev-only dependencies, further increasing complexity.\n+\n+To address these issues and prepare for long-term maintainability (and possibly Java Platform Module System adoption), we propose a more structured layout for extension modules.\n+\n+== Decision\n+\n+Extensions may use a standardized structure composed of up to five optional modules, depending on their needs:\n+\n+* `runtime`: Contains the runtime implementation. It may expose public APIs if needed but should prefer delegation to the spi module.\n+* `spi`: Contains public APIs intended to be consumed by other extensions or application code. This module should have minimal dependencies. Depending on a spi module does not transitively include the full extension (i.e., it avoids pulling in runtime or deployment logic).\n+* `deployment`: Contains build-time logic, including BuildSteps and recorder logic. This module may define internal build items.\n+* `deployment-spi`: Contains build-time APIs intended to be reused across multiple extensions. Extensions contributing to or using build items from other extensions should depend on deployment-spi modules.\n+* `runtime-dev`: Contains runtime classes used exclusively in dev mode (e.g., for the Dev UI). This avoids shipping dev-only classes into production artifacts.\n+\n+All these modules are optional.\n+\n+=== Additional Rules\n+\n+\t* Module dependencies must follow strict rules:\n+\t* `deployment` depends on `runtime`, `runtime-dev` (if defined) and `deployment-spi` (if defined).\n+\t* `runtime` depends on `spi` (if defined).\n+\t* External consumers should rely only on `spi` or `deployment-spi` to be loose-coupled.\n+    * External consumers should rely only on `spi` or `deployment-spi` to be tightly-coupled (forcing the target extension to be present at execution).\n+\t* Public APIs must be explicitly documented, including build items meant for inter-extension use.\n+\t* Each module should provide an `Automatic-Module-Name` based on the root package:\n+\n+\t    ** Runtime: `io.<quarkus|quarkiverse>.<extension-name>`\n+\t    ** Deployment: `io.<quarkus|quarkiverse>.<extension-name>.deployment`\n+\t    ** Runtime SPI: `io.<quarkus|quarkiverse>.<extension-name>.spi`\n+\t    ** Deployment SPI: `io.<quarkus|quarkiverse>.<extension-name>.deployment.spi`\n+\t    ** Runtime Dev: `io.<quarkus|quarkiverse>.<extension-name>.runtime.dev`\n+\n+=== Package Name Rules\n+\n+Extensions must use a well-defined package structure to avoid split packages.\n+\n+==== runtime module\n+* `io.<quarkus|quarkiverse>.<extension-name>`: Public API. May include subpackages (excluding `spi`). Example: `io.quarkus.cache`.",
        "comment_created_at": "2025-07-03T08:57:49+00:00",
        "comment_author": "aloubyansky",
        "comment_body": "What about `org.apache.camel.quarkus:camel-quarkus-activemq`? Should we make the examples more generic?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2012605376",
    "pr_number": 46974,
    "pr_file": "docs/src/main/asciidoc/security-authentication-mechanisms.adoc",
    "created_at": "2025-03-25T17:35:42+00:00",
    "commented_code": "include::{generated-dir}/config/quarkus-vertx-http_quarkus.http.auth.adoc[opts=optional, leveloffset=+1]\n \n+[[two-factor-auth]]\n+==== Two-factor authentication\n+\n+The form-based authentication mechanism supports two-factor authentication (2FA), with the second-factor being a one-time authorization code.\n+\n+.Enable two-factor authentication\n+[source,properties]\n+----\n+quarkus.http.auth.form.otac.enabled=true",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2012605376",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46974,
        "pr_file": "docs/src/main/asciidoc/security-authentication-mechanisms.adoc",
        "discussion_id": "2012605376",
        "commented_code": "@@ -217,6 +217,111 @@ The following properties can be used to configure form-based authentication:\n \n include::{generated-dir}/config/quarkus-vertx-http_quarkus.http.auth.adoc[opts=optional, leveloffset=+1]\n \n+[[two-factor-auth]]\n+==== Two-factor authentication\n+\n+The form-based authentication mechanism supports two-factor authentication (2FA), with the second-factor being a one-time authorization code.\n+\n+.Enable two-factor authentication\n+[source,properties]\n+----\n+quarkus.http.auth.form.otac.enabled=true",
        "comment_created_at": "2025-03-25T17:35:42+00:00",
        "comment_author": "sberyozkin",
        "comment_body": "```suggestion\r\nquarkus.http.auth.form.authorization-code.enabled=true\r\n```\r\n`otac` is a little bit cryptic",
        "pr_file_module": null
      },
      {
        "comment_id": "2012608187",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46974,
        "pr_file": "docs/src/main/asciidoc/security-authentication-mechanisms.adoc",
        "discussion_id": "2012605376",
        "commented_code": "@@ -217,6 +217,111 @@ The following properties can be used to configure form-based authentication:\n \n include::{generated-dir}/config/quarkus-vertx-http_quarkus.http.auth.adoc[opts=optional, leveloffset=+1]\n \n+[[two-factor-auth]]\n+==== Two-factor authentication\n+\n+The form-based authentication mechanism supports two-factor authentication (2FA), with the second-factor being a one-time authorization code.\n+\n+.Enable two-factor authentication\n+[source,properties]\n+----\n+quarkus.http.auth.form.otac.enabled=true",
        "comment_created_at": "2025-03-25T17:37:20+00:00",
        "comment_author": "sberyozkin",
        "comment_body": "Also, `authorization-code` can be a liltle bit confusing as in the OIDC it is actually a code that allows Quarkus acquire tokens.\r\n\r\nPerhaps, in context of 2FA, it should be called `authentication-token` ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2012716479",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46974,
        "pr_file": "docs/src/main/asciidoc/security-authentication-mechanisms.adoc",
        "discussion_id": "2012605376",
        "commented_code": "@@ -217,6 +217,111 @@ The following properties can be used to configure form-based authentication:\n \n include::{generated-dir}/config/quarkus-vertx-http_quarkus.http.auth.adoc[opts=optional, leveloffset=+1]\n \n+[[two-factor-auth]]\n+==== Two-factor authentication\n+\n+The form-based authentication mechanism supports two-factor authentication (2FA), with the second-factor being a one-time authorization code.\n+\n+.Enable two-factor authentication\n+[source,properties]\n+----\n+quarkus.http.auth.form.otac.enabled=true",
        "comment_created_at": "2025-03-25T18:25:44+00:00",
        "comment_author": "michalvavrik",
        "comment_body": "I didn't know about otac, but once I started reading up about one-time passwords, the OTAC seems liked exactly this feature (and more precise then one-time pwd). In order to avoid confusion with OIDC authorization code, I agree to switch to the `authentication-token`, it looks better then `otac` as well.",
        "pr_file_module": null
      },
      {
        "comment_id": "2014238940",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46974,
        "pr_file": "docs/src/main/asciidoc/security-authentication-mechanisms.adoc",
        "discussion_id": "2012605376",
        "commented_code": "@@ -217,6 +217,111 @@ The following properties can be used to configure form-based authentication:\n \n include::{generated-dir}/config/quarkus-vertx-http_quarkus.http.auth.adoc[opts=optional, leveloffset=+1]\n \n+[[two-factor-auth]]\n+==== Two-factor authentication\n+\n+The form-based authentication mechanism supports two-factor authentication (2FA), with the second-factor being a one-time authorization code.\n+\n+.Enable two-factor authentication\n+[source,properties]\n+----\n+quarkus.http.auth.form.otac.enabled=true",
        "comment_created_at": "2025-03-26T14:07:54+00:00",
        "comment_author": "michalvavrik",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1939115339",
    "pr_number": 45962,
    "pr_file": "docs/src/main/asciidoc/_attributes.adoc",
    "created_at": "2025-02-03T10:08:44+00:00",
    "commented_code": "// .\n :create-app-group-id: org.acme\n :create-cli-group-id: {create-app-group-id}\n+// Attributes required for single-sourcing to downstream.\n+:JDK-ver-other: 17\n+:JDK-ver-latest: 21\n+:JDK-ver-all: 17 or 21",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "1939115339",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 45962,
        "pr_file": "docs/src/main/asciidoc/_attributes.adoc",
        "discussion_id": "1939115339",
        "commented_code": "@@ -67,5 +67,15 @@\n // .\n :create-app-group-id: org.acme\n :create-cli-group-id: {create-app-group-id}\n+// Attributes required for single-sourcing to downstream.\n+:JDK-ver-other: 17\n+:JDK-ver-latest: 21\n+:JDK-ver-all: 17 or 21",
        "comment_created_at": "2025-02-03T10:08:44+00:00",
        "comment_author": "gsmet",
        "comment_body": "Maybe name them `jdk-version-...`. I'm really not a big fan of shortening things and let's try to keep things all lowercase.",
        "pr_file_module": null
      }
    ]
  }
]