[
  {
    "discussion_id": "2153761988",
    "pr_number": 48437,
    "pr_file": "extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/config/WebSocketsClientRuntimeConfig.java",
    "created_at": "2025-06-18T06:35:31+00:00",
    "commented_code": "*/\n     Optional<Duration> connectionIdleTimeout();\n \n+    /**\n+     * The amount of time a client will wait until it closes the TCP connection after sending a close frame.",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2153761988",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48437,
        "pr_file": "extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/config/WebSocketsClientRuntimeConfig.java",
        "discussion_id": "2153761988",
        "commented_code": "@@ -52,6 +52,14 @@ public interface WebSocketsClientRuntimeConfig {\n      */\n     Optional<Duration> connectionIdleTimeout();\n \n+    /**\n+     * The amount of time a client will wait until it closes the TCP connection after sending a close frame.",
        "comment_created_at": "2025-06-18T06:35:31+00:00",
        "comment_author": "mkouba",
        "comment_body": "We should probably mention that the duration is rounded to seconds?",
        "pr_file_module": null
      },
      {
        "comment_id": "2154584624",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48437,
        "pr_file": "extensions/websockets-next/runtime/src/main/java/io/quarkus/websockets/next/runtime/config/WebSocketsClientRuntimeConfig.java",
        "discussion_id": "2153761988",
        "commented_code": "@@ -52,6 +52,14 @@ public interface WebSocketsClientRuntimeConfig {\n      */\n     Optional<Duration> connectionIdleTimeout();\n \n+    /**\n+     * The amount of time a client will wait until it closes the TCP connection after sending a close frame.",
        "comment_created_at": "2025-06-18T13:16:37+00:00",
        "comment_author": "emattheis",
        "comment_body": "I added more detail to the comment.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2120700823",
    "pr_number": 48130,
    "pr_file": "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/offline/StartOfflineSchemaManagementTest.java",
    "created_at": "2025-06-02T10:22:23+00:00",
    "commented_code": "+package io.quarkus.hibernate.orm.offline;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hibernate.tool.schema.Action.CREATE_DROP;\n+\n+import jakarta.transaction.Transactional;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.hibernate.orm.MyEntity;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+/**\n+ * Test that if enable quarkus.hibernate-orm.schema-management.strategy during offline mode,\n+ * application start will fail\n+ */\n+public class StartOfflineSchemaManagementTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest runner = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(MyEntity.class)\n+                    .addAsResource(\"application-start-offline.properties\", \"application.properties\"))\n+            .overrideConfigKey(\"quarkus.hibernate-orm.schema-management.strategy\", CREATE_DROP.getExternalHbm2ddlName())\n+            .assertException(\n+                    throwable -> assertThat(throwable)\n+                            .hasNoSuppressedExceptions()\n+                            .hasMessageContaining(\n+                                    \"Version check `quarkus.hibernate-orm.schema-management.strategy` cannot be any different than `none` when using offline mode `quarkus.hibernate-orm.database.start-offline=true`\"));",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2120700823",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48130,
        "pr_file": "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/offline/StartOfflineSchemaManagementTest.java",
        "discussion_id": "2120700823",
        "commented_code": "@@ -0,0 +1,39 @@\n+package io.quarkus.hibernate.orm.offline;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hibernate.tool.schema.Action.CREATE_DROP;\n+\n+import jakarta.transaction.Transactional;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.hibernate.orm.MyEntity;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+/**\n+ * Test that if enable quarkus.hibernate-orm.schema-management.strategy during offline mode,\n+ * application start will fail\n+ */\n+public class StartOfflineSchemaManagementTest {\n+\n+    @RegisterExtension\n+    static QuarkusUnitTest runner = new QuarkusUnitTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClass(MyEntity.class)\n+                    .addAsResource(\"application-start-offline.properties\", \"application.properties\"))\n+            .overrideConfigKey(\"quarkus.hibernate-orm.schema-management.strategy\", CREATE_DROP.getExternalHbm2ddlName())\n+            .assertException(\n+                    throwable -> assertThat(throwable)\n+                            .hasNoSuppressedExceptions()\n+                            .hasMessageContaining(\n+                                    \"Version check `quarkus.hibernate-orm.schema-management.strategy` cannot be any different than `none` when using offline mode `quarkus.hibernate-orm.database.start-offline=true`\"));",
        "comment_created_at": "2025-06-02T10:22:23+00:00",
        "comment_author": "yrodiere",
        "comment_body": "Wording seems strange, especially the \"any different\"... Also it has nothing to do with the version check?\r\n\r\nI'd recommend something like this:\r\n\r\n```suggestion\r\n                                    \"Schema management strategy `quarkus.hibernate-orm.schema-management.strategy` only be set to `none` when using offline mode `quarkus.hibernate-orm.database.start-offline=true`\"));\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2139933755",
    "pr_number": 48296,
    "pr_file": "extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientConfig.java",
    "created_at": "2025-06-11T11:49:00+00:00",
    "commented_code": "*/\n     Map<String, String> headers();\n \n+    /**\n+     * Token refresh interval. By default, Quarkus refreshes tokens that are expired tokens or within access",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2139933755",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48296,
        "pr_file": "extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientConfig.java",
        "discussion_id": "2139933755",
        "commented_code": "@@ -172,6 +172,14 @@ public String getGrantType() {\n      */\n     Map<String, String> headers();\n \n+    /**\n+     * Token refresh interval. By default, Quarkus refreshes tokens that are expired tokens or within access",
        "comment_created_at": "2025-06-11T11:49:00+00:00",
        "comment_author": "sberyozkin",
        "comment_body": "@michalvavrik Can you please align it with the docs content, perhaps something like\r\n\r\n```\r\nToken refresh interval.\r\n\r\nBy default, OIDC client refreshes the token during the current request, when it detects that it has expired, or nearly expired if the {@link #refresh_token_time_skew} is configured. But, when this property is configured, OIDC client can refresh the token asynchronously in the configured interval.\r\n\r\nThis property is only effective with OIDC client filters and other {@link AbstractTokensProducer} extensions but not when you use  {@link OidcClient#getTokens} API directly.\r\n```\r\n\r\nPerhaps something like that ? Please tune it as preferred. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2140207341",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48296,
        "pr_file": "extensions/oidc-client/runtime/src/main/java/io/quarkus/oidc/client/runtime/OidcClientConfig.java",
        "discussion_id": "2139933755",
        "commented_code": "@@ -172,6 +172,14 @@ public String getGrantType() {\n      */\n     Map<String, String> headers();\n \n+    /**\n+     * Token refresh interval. By default, Quarkus refreshes tokens that are expired tokens or within access",
        "comment_created_at": "2025-06-11T13:45:25+00:00",
        "comment_author": "michalvavrik",
        "comment_body": "That suggestion looks good.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "745129125",
    "pr_number": 21286,
    "pr_file": "extensions/resteasy-classic/rest-client/config/src/main/java/io/quarkus/restclient/config/RestClientsConfig.java",
    "created_at": "2021-11-08T22:06:15+00:00",
    "commented_code": "@ConfigItem\n     public Optional<String> multipartPostEncoderMode;\n \n+    /**\n+     * Level of logging for the client.\n+     * <br/>\n+     * WARNING: beware of logging sensitive data\n+     * <br/>\n+     * The possible values are:\n+     * <ul>\n+     * <li>{@code request-response} - enables logging request and responses, including redirect responses</li>\n+     * <li>{@code all} - enables logging requests and responses and lower-level logging</li>\n+     * <li>{@code none} - no additional logging</li>\n+     * </ul>\n+     *\n+     * This property is applicable to reactive REST clients only.\n+     */\n+    @ConfigItem",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "745129125",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 21286,
        "pr_file": "extensions/resteasy-classic/rest-client/config/src/main/java/io/quarkus/restclient/config/RestClientsConfig.java",
        "discussion_id": "745129125",
        "commented_code": "@@ -45,4 +45,21 @@\n     @ConfigItem\n     public Optional<String> multipartPostEncoderMode;\n \n+    /**\n+     * Level of logging for the client.\n+     * <br/>\n+     * WARNING: beware of logging sensitive data\n+     * <br/>\n+     * The possible values are:\n+     * <ul>\n+     * <li>{@code request-response} - enables logging request and responses, including redirect responses</li>\n+     * <li>{@code all} - enables logging requests and responses and lower-level logging</li>\n+     * <li>{@code none} - no additional logging</li>\n+     * </ul>\n+     *\n+     * This property is applicable to reactive REST clients only.\n+     */\n+    @ConfigItem",
        "comment_created_at": "2021-11-08T22:06:15+00:00",
        "comment_author": "maxandersen",
        "comment_body": "is \"logLevel\" the right term ? we use \"log.level\" for debug/info/error/tracing else where which is not the same ....this here is more about \"detailLevel\" ?\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "745347466",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 21286,
        "pr_file": "extensions/resteasy-classic/rest-client/config/src/main/java/io/quarkus/restclient/config/RestClientsConfig.java",
        "discussion_id": "745129125",
        "commented_code": "@@ -45,4 +45,21 @@\n     @ConfigItem\n     public Optional<String> multipartPostEncoderMode;\n \n+    /**\n+     * Level of logging for the client.\n+     * <br/>\n+     * WARNING: beware of logging sensitive data\n+     * <br/>\n+     * The possible values are:\n+     * <ul>\n+     * <li>{@code request-response} - enables logging request and responses, including redirect responses</li>\n+     * <li>{@code all} - enables logging requests and responses and lower-level logging</li>\n+     * <li>{@code none} - no additional logging</li>\n+     * </ul>\n+     *\n+     * This property is applicable to reactive REST clients only.\n+     */\n+    @ConfigItem",
        "comment_created_at": "2021-11-09T07:28:25+00:00",
        "comment_author": "michalszynkiewicz",
        "comment_body": "maybe `quarkus.rest-client.logging.scope` ?\r\n\r\nChange from `-` to `.` would also open a possibility to have properties further customizing logging",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2075985203",
    "pr_number": 47320,
    "pr_file": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java",
    "created_at": "2025-05-06T17:51:55+00:00",
    "commented_code": "*/\n         public Optional<String> decryptionKeyLocation = Optional.empty();\n \n+        /**\n+         * Decrypt ID token.\n+         */\n+        Optional<Boolean> decryptIdToken = Optional.empty();",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2075985203",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47320,
        "pr_file": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java",
        "discussion_id": "2075985203",
        "commented_code": "@@ -2332,6 +2332,16 @@ public static Token fromAudience(String... audience) {\n          */\n         public Optional<String> decryptionKeyLocation = Optional.empty();\n \n+        /**\n+         * Decrypt ID token.\n+         */\n+        Optional<Boolean> decryptIdToken = Optional.empty();",
        "comment_created_at": "2025-05-06T17:51:55+00:00",
        "comment_author": "gastaldi",
        "comment_body": "```suggestion\r\n        /**\r\n         * Decrypt ID token.\r\n         */\r\n       boolean decryptIdToken;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2076004390",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47320,
        "pr_file": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java",
        "discussion_id": "2075985203",
        "commented_code": "@@ -2332,6 +2332,16 @@ public static Token fromAudience(String... audience) {\n          */\n         public Optional<String> decryptionKeyLocation = Optional.empty();\n \n+        /**\n+         * Decrypt ID token.\n+         */\n+        Optional<Boolean> decryptIdToken = Optional.empty();",
        "comment_created_at": "2025-05-06T18:03:18+00:00",
        "comment_author": "sberyozkin",
        "comment_body": "Hi @gastaldi, there is a reason I did this way, see `point 2` in the PR description, otherwise, it would definitely make no sense, good catch.\r\n\r\nDoes that point in the description make sense ? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2076008195",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47320,
        "pr_file": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java",
        "discussion_id": "2075985203",
        "commented_code": "@@ -2332,6 +2332,16 @@ public static Token fromAudience(String... audience) {\n          */\n         public Optional<String> decryptionKeyLocation = Optional.empty();\n \n+        /**\n+         * Decrypt ID token.\n+         */\n+        Optional<Boolean> decryptIdToken = Optional.empty();",
        "comment_created_at": "2025-05-06T18:06:13+00:00",
        "comment_author": "sberyozkin",
        "comment_body": "@gastaldi, so I'd like to ensure that the current behaviour where the decryption-key-location is set causes an ID token decryption attempt is retained, to avoid breaking changes, but also, I'd like to let users decrypt access tokens only but not ID tokens if that key location is set or if the alternative key material is used - the client secret",
        "pr_file_module": null
      },
      {
        "comment_id": "2076011688",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47320,
        "pr_file": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java",
        "discussion_id": "2075985203",
        "commented_code": "@@ -2332,6 +2332,16 @@ public static Token fromAudience(String... audience) {\n          */\n         public Optional<String> decryptionKeyLocation = Optional.empty();\n \n+        /**\n+         * Decrypt ID token.\n+         */\n+        Optional<Boolean> decryptIdToken = Optional.empty();",
        "comment_created_at": "2025-05-06T18:09:00+00:00",
        "comment_author": "sberyozkin",
        "comment_body": "Without `Optional`, with `false` by default, it is a breaking change",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1995240501",
    "pr_number": 46728,
    "pr_file": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevJsonRpcService.java",
    "created_at": "2025-03-14T09:39:07+00:00",
    "commented_code": "return getInfo().getNumberOfNamedQueries();\n     }\n \n+    private Optional<HibernateOrmDevInfo.PersistenceUnit> findPersistenceUnit(String persistenceUnitName) {\n+        return getInfo().getPersistenceUnits().stream().filter(pu -> pu.getName().equals(persistenceUnitName)).findFirst();\n+    }\n+\n+    public DataSet executeHQL(String persistenceUnit, String hql, Integer pageNumber, Integer pageSize) {\n+        if (!isDev) {\n+            return errorDataSet(\"This method is only allowed in dev mode\");\n+        }\n+\n+        if (!hqlIsValid(hql)) {\n+            return errorDataSet(\"The provided HQL was not valid\");\n+        }\n+\n+        Optional<HibernateOrmDevInfo.PersistenceUnit> pu = findPersistenceUnit(persistenceUnit);\n+        if (pu.isEmpty()) {\n+            return errorDataSet(\"No such persistence unit: \" + persistenceUnit);\n+        }\n+\n+        //noinspection resource\n+        SessionFactoryImplementor sf = pu.get().sessionFactory();\n+\n+        // Check the connection for this persistence unit points to an allowed datasource\n+        ConnectionProvider connectionProvider = sf.getServiceRegistry().requireService(ConnectionProvider.class);\n+        if (connectionProvider instanceof QuarkusConnectionProvider quarkusConnectionProvider) {\n+            if (!isAllowedDatabase(quarkusConnectionProvider.getDataSource())) {\n+                return errorDataSet(\"The persistence unit datasource points to a non-allowed datasource \" +\n+                        \"(by default, only local databases are allowed).\");",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "1995240501",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46728,
        "pr_file": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevJsonRpcService.java",
        "discussion_id": "1995240501",
        "commented_code": "@@ -18,4 +46,100 @@ public int getNumberOfNamedQueries() {\n         return getInfo().getNumberOfNamedQueries();\n     }\n \n+    private Optional<HibernateOrmDevInfo.PersistenceUnit> findPersistenceUnit(String persistenceUnitName) {\n+        return getInfo().getPersistenceUnits().stream().filter(pu -> pu.getName().equals(persistenceUnitName)).findFirst();\n+    }\n+\n+    public DataSet executeHQL(String persistenceUnit, String hql, Integer pageNumber, Integer pageSize) {\n+        if (!isDev) {\n+            return errorDataSet(\"This method is only allowed in dev mode\");\n+        }\n+\n+        if (!hqlIsValid(hql)) {\n+            return errorDataSet(\"The provided HQL was not valid\");\n+        }\n+\n+        Optional<HibernateOrmDevInfo.PersistenceUnit> pu = findPersistenceUnit(persistenceUnit);\n+        if (pu.isEmpty()) {\n+            return errorDataSet(\"No such persistence unit: \" + persistenceUnit);\n+        }\n+\n+        //noinspection resource\n+        SessionFactoryImplementor sf = pu.get().sessionFactory();\n+\n+        // Check the connection for this persistence unit points to an allowed datasource\n+        ConnectionProvider connectionProvider = sf.getServiceRegistry().requireService(ConnectionProvider.class);\n+        if (connectionProvider instanceof QuarkusConnectionProvider quarkusConnectionProvider) {\n+            if (!isAllowedDatabase(quarkusConnectionProvider.getDataSource())) {\n+                return errorDataSet(\"The persistence unit datasource points to a non-allowed datasource \" +\n+                        \"(by default, only local databases are allowed).\");",
        "comment_created_at": "2025-03-14T09:39:07+00:00",
        "comment_author": "yrodiere",
        "comment_body": "Maybe make this actionable by mentioning the configuration property to allow non-local DBs?",
        "pr_file_module": null
      },
      {
        "comment_id": "2001140866",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46728,
        "pr_file": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dev/HibernateOrmDevJsonRpcService.java",
        "discussion_id": "1995240501",
        "commented_code": "@@ -18,4 +46,100 @@ public int getNumberOfNamedQueries() {\n         return getInfo().getNumberOfNamedQueries();\n     }\n \n+    private Optional<HibernateOrmDevInfo.PersistenceUnit> findPersistenceUnit(String persistenceUnitName) {\n+        return getInfo().getPersistenceUnits().stream().filter(pu -> pu.getName().equals(persistenceUnitName)).findFirst();\n+    }\n+\n+    public DataSet executeHQL(String persistenceUnit, String hql, Integer pageNumber, Integer pageSize) {\n+        if (!isDev) {\n+            return errorDataSet(\"This method is only allowed in dev mode\");\n+        }\n+\n+        if (!hqlIsValid(hql)) {\n+            return errorDataSet(\"The provided HQL was not valid\");\n+        }\n+\n+        Optional<HibernateOrmDevInfo.PersistenceUnit> pu = findPersistenceUnit(persistenceUnit);\n+        if (pu.isEmpty()) {\n+            return errorDataSet(\"No such persistence unit: \" + persistenceUnit);\n+        }\n+\n+        //noinspection resource\n+        SessionFactoryImplementor sf = pu.get().sessionFactory();\n+\n+        // Check the connection for this persistence unit points to an allowed datasource\n+        ConnectionProvider connectionProvider = sf.getServiceRegistry().requireService(ConnectionProvider.class);\n+        if (connectionProvider instanceof QuarkusConnectionProvider quarkusConnectionProvider) {\n+            if (!isAllowedDatabase(quarkusConnectionProvider.getDataSource())) {\n+                return errorDataSet(\"The persistence unit datasource points to a non-allowed datasource \" +\n+                        \"(by default, only local databases are allowed).\");",
        "comment_created_at": "2025-03-18T14:07:30+00:00",
        "comment_author": "mbellade",
        "comment_body": "Changed to a more verbose message, mentioning the configuration property.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1959653661",
    "pr_number": 46314,
    "pr_file": "core/deployment/src/main/java/io/quarkus/deployment/configuration/BuildTimeConfigurationReader.java",
    "created_at": "2025-02-18T12:27:46+00:00",
    "commented_code": "assert phase == ConfigPhase.RUN_TIME;\n                 runTimeRoots.add(definition);\n             }\n+\n+            if (configRoot.getAnnotation(Deprecated.class) == null) {\n+                log.warn(configRoot.getName()\n+                        + \" is considered legacy and should be moved to use an interface and @ConfigMapping\");",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "1959653661",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46314,
        "pr_file": "core/deployment/src/main/java/io/quarkus/deployment/configuration/BuildTimeConfigurationReader.java",
        "discussion_id": "1959653661",
        "commented_code": "@@ -220,6 +220,11 @@ private BuildTimeConfigurationReader(ClassLoader classLoader, final List<Class<?\n                 assert phase == ConfigPhase.RUN_TIME;\n                 runTimeRoots.add(definition);\n             }\n+\n+            if (configRoot.getAnnotation(Deprecated.class) == null) {\n+                log.warn(configRoot.getName()\n+                        + \" is considered legacy and should be moved to use an interface and @ConfigMapping\");",
        "comment_created_at": "2025-02-18T12:27:46+00:00",
        "comment_author": "gastaldi",
        "comment_body": "It would be nice to have an URL to explain why and how to do that:\r\n\r\n```suggestion\r\n                        + \" is considered legacy and should be moved to use an interface and @ConfigMapping. See https://quarkus.io/guides/config-mappings for more info\");\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1959660250",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46314,
        "pr_file": "core/deployment/src/main/java/io/quarkus/deployment/configuration/BuildTimeConfigurationReader.java",
        "discussion_id": "1959653661",
        "commented_code": "@@ -220,6 +220,11 @@ private BuildTimeConfigurationReader(ClassLoader classLoader, final List<Class<?\n                 assert phase == ConfigPhase.RUN_TIME;\n                 runTimeRoots.add(definition);\n             }\n+\n+            if (configRoot.getAnnotation(Deprecated.class) == null) {\n+                log.warn(configRoot.getName()\n+                        + \" is considered legacy and should be moved to use an interface and @ConfigMapping\");",
        "comment_created_at": "2025-02-18T12:32:28+00:00",
        "comment_author": "gsmet",
        "comment_body": "Yeah, the message needs some tweaking, I will have a look soon.\r\n\r\nIt might be a bit too early to push it anyway.",
        "pr_file_module": null
      }
    ]
  }
]