[
  {
    "discussion_id": "2180432238",
    "pr_number": 48472,
    "pr_file": "docs/src/main/asciidoc/apicurio-registry-dev-services.adoc",
    "created_at": "2025-07-02T15:58:06+00:00",
    "commented_code": "----\n quarkus.apicurio-registry.devservices.image-name=apicurio/apicurio-registry-mem:latest-snapshot\n ----\n+\n+[[Compose]]\n+== Compose\n+\n+The Apicurio Dev Services supports xref:compose-dev-services.adoc[Compose].",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2180432238",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48472,
        "pr_file": "docs/src/main/asciidoc/apicurio-registry-dev-services.adoc",
        "discussion_id": "2180432238",
        "commented_code": "@@ -79,3 +79,18 @@ You can select any 2.x version from https://hub.docker.com/r/apicurio/apicurio-r\n ----\n quarkus.apicurio-registry.devservices.image-name=apicurio/apicurio-registry-mem:latest-snapshot\n ----\n+\n+[[Compose]]\n+== Compose\n+\n+The Apicurio Dev Services supports xref:compose-dev-services.adoc[Compose].",
        "comment_created_at": "2025-07-02T15:58:06+00:00",
        "comment_author": "gsmet",
        "comment_body": "It's minor but I would prefer:\r\n\r\n```suggestion\r\nThe Apicurio Dev Services supports xref:compose-dev-services.adoc[Compose Dev Services].\r\n```\r\n\r\nAnd same for all the other occurrences.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2039348241",
    "pr_number": 47012,
    "pr_file": "docs/src/main/asciidoc/hibernate-orm.adoc",
    "created_at": "2025-04-11T11:26:51+00:00",
    "commented_code": "Having multiple JSON (or XML) format mappers registered for the same persistence unit will result in an exception, because of the ambiguity.\n ====\n+\n+[[jakarta-data]]\n+== Static metamodel and Jakarta Data\n+\n+Both static metamodel and Jakarta Data capabilities of Hibernate ORM are available to the users\n+through the `hibernate-jpamodelgen` annotation processor. Since it is an annotation processor,\n+users are required to make an extra step of configuring the annotation processor in their build tool of choice:",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2039348241",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47012,
        "pr_file": "docs/src/main/asciidoc/hibernate-orm.adoc",
        "discussion_id": "2039348241",
        "commented_code": "@@ -1569,3 +1569,134 @@ Format mappers *must* have both `@PersistenceUnitExtension` and either `@JsonFor\n \n Having multiple JSON (or XML) format mappers registered for the same persistence unit will result in an exception, because of the ambiguity.\n ====\n+\n+[[jakarta-data]]\n+== Static metamodel and Jakarta Data\n+\n+Both static metamodel and Jakarta Data capabilities of Hibernate ORM are available to the users\n+through the `hibernate-jpamodelgen` annotation processor. Since it is an annotation processor,\n+users are required to make an extra step of configuring the annotation processor in their build tool of choice:",
        "comment_created_at": "2025-04-11T11:26:51+00:00",
        "comment_author": "yrodiere",
        "comment_body": "Don't ask me why, or where the rule is written, but in Quarkus documentation we're supposed to address directly to the reader.\r\n\r\n```suggestion\r\nyou must configure the annotation processor in your build tool:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1973757282",
    "pr_number": 46398,
    "pr_file": "docs/src/main/asciidoc/hibernate-orm.adoc",
    "created_at": "2025-02-27T14:59:29+00:00",
    "commented_code": "Having multiple JSON (or XML) format mappers registered for the same persistence unit will result in an exception, because of the ambiguity.\n ====\n+\n+[[validator_integration]]\n+== Validation modes and Hibernate Validator integration\n+\n+Hibernate Validator integration into Hibernate ORM opens up the following capabilities:\n+\n+- performing entity validation on lifecycle events\n+- applying constraint information from entities to DDL\n+\n+From Quarkus's perspective, this is controlled by the <<quarkus-hibernate-orm_quarkus-hibernate-orm-validation-mode,`quarkus.hibernate-orm.validation.mode` configuration property>>.\n+The available validation modes are:\n+\n+- `auto` -- the default option; works the same as `callback` and `ddl` enabled simultaneously\n+when the Jakarta Validation provider is available (i.e. the Hibernate Validator extension is enabled),\n+and as `none` if no provider is available.\n+- `callback` -- Hibernate Validator will perform the lifecycle event validation.\n+- `ddl` -- Jakarta Validation constraints will be considered for the DDL operations\n+- `none` -- Jakarta Validation integration will be disabled.",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "1973757282",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46398,
        "pr_file": "docs/src/main/asciidoc/hibernate-orm.adoc",
        "discussion_id": "1973757282",
        "commented_code": "@@ -1510,3 +1510,81 @@ Format mappers *must* have both `@PersistenceUnitExtension` and either `@JsonFor\n \n Having multiple JSON (or XML) format mappers registered for the same persistence unit will result in an exception, because of the ambiguity.\n ====\n+\n+[[validator_integration]]\n+== Validation modes and Hibernate Validator integration\n+\n+Hibernate Validator integration into Hibernate ORM opens up the following capabilities:\n+\n+- performing entity validation on lifecycle events\n+- applying constraint information from entities to DDL\n+\n+From Quarkus's perspective, this is controlled by the <<quarkus-hibernate-orm_quarkus-hibernate-orm-validation-mode,`quarkus.hibernate-orm.validation.mode` configuration property>>.\n+The available validation modes are:\n+\n+- `auto` -- the default option; works the same as `callback` and `ddl` enabled simultaneously\n+when the Jakarta Validation provider is available (i.e. the Hibernate Validator extension is enabled),\n+and as `none` if no provider is available.\n+- `callback` -- Hibernate Validator will perform the lifecycle event validation.\n+- `ddl` -- Jakarta Validation constraints will be considered for the DDL operations\n+- `none` -- Jakarta Validation integration will be disabled.",
        "comment_created_at": "2025-02-27T14:59:29+00:00",
        "comment_author": "yrodiere",
        "comment_body": "I'm really not sure about all this mixing \"Jakarta Validation\" with \"Hibernate Validator\".\r\n\r\nI think it'd be better to stick to \"Hibernate Validator\" -- since that's the name of the Quarkus extension -- and to mention \"Jakarta Validation\" only once at the start (maybe in the heading?).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1832257429",
    "pr_number": 44272,
    "pr_file": "docs/src/main/asciidoc/security-jwt.adoc",
    "created_at": "2024-11-07T08:34:16+00:00",
    "commented_code": "[[integration-testing]]\n === Testing\n \n+[[dev-mode]]\n+==== {extension-name} Dev Mode\n+\n+If you do not want to generate and configure a public and private key pair, the {extension-name} extension automatically provides an RSA-256 key pair for you in Dev Mode.",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "1832257429",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44272,
        "pr_file": "docs/src/main/asciidoc/security-jwt.adoc",
        "discussion_id": "1832257429",
        "commented_code": "@@ -818,6 +818,19 @@ Please see the xref:security-openid-connect-client-reference.adoc#token-propagat\n [[integration-testing]]\n === Testing\n \n+[[dev-mode]]\n+==== {extension-name} Dev Mode\n+\n+If you do not want to generate and configure a public and private key pair, the {extension-name} extension automatically provides an RSA-256 key pair for you in Dev Mode.",
        "comment_created_at": "2024-11-07T08:34:16+00:00",
        "comment_author": "gsmet",
        "comment_body": "Is this accurate? My understanding is that it also does that when testing?\r\n\r\nSo maybe the title should be about keys and the text say `in test and dev mode`?\r\n\r\nSmall nitpick, we usually don't capitalize `dev mode`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1833119609",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44272,
        "pr_file": "docs/src/main/asciidoc/security-jwt.adoc",
        "discussion_id": "1832257429",
        "commented_code": "@@ -818,6 +818,19 @@ Please see the xref:security-openid-connect-client-reference.adoc#token-propagat\n [[integration-testing]]\n === Testing\n \n+[[dev-mode]]\n+==== {extension-name} Dev Mode\n+\n+If you do not want to generate and configure a public and private key pair, the {extension-name} extension automatically provides an RSA-256 key pair for you in Dev Mode.",
        "comment_created_at": "2024-11-07T17:44:16+00:00",
        "comment_author": "mcruzdev",
        "comment_body": "It makes sense, it can be user for both dev/test environments.",
        "pr_file_module": null
      }
    ]
  }
]