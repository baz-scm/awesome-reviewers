[
  {
    "discussion_id": "1176591224",
    "pr_number": 32691,
    "pr_file": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/caffeine/CacheValue.java",
    "created_at": "2023-04-25T14:19:11+00:00",
    "commented_code": "+package io.quarkus.cache.runtime.caffeine;\n+\n+import java.time.Duration;\n+\n+public class CacheValue<T> {\n+\n+    CacheValue(T data, Duration expiresIn) {\n+        this.data = data;\n+        this.expiresIn = expiresIn;\n+    }\n+\n+    public static <T> CacheValueBuilder<T> builder() {\n+        return new CacheValueBuilder<>();\n+    }\n+\n+    public static class CacheValueBuilder<T> {\n+\n+        Duration expiresIn;\n+        T data;\n+\n+        public CacheValueBuilder<T> expiresIn(Duration expiresIn) {\n+            this.expiresIn = expiresIn;\n+            return this;\n+        }\n+\n+        public CacheValueBuilder<T> data(T data) {\n+            this.data = data;\n+            return this;\n+        }\n+\n+        public CacheValue<T> build() {\n+            return new CacheValue<>(data, expiresIn);\n+        }\n+    }\n+\n+    final Duration expiresIn;\n+    final T data;\n+\n+    public T getData() {",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "1176591224",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 32691,
        "pr_file": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/caffeine/CacheValue.java",
        "discussion_id": "1176591224",
        "commented_code": "@@ -0,0 +1,43 @@\n+package io.quarkus.cache.runtime.caffeine;\n+\n+import java.time.Duration;\n+\n+public class CacheValue<T> {\n+\n+    CacheValue(T data, Duration expiresIn) {\n+        this.data = data;\n+        this.expiresIn = expiresIn;\n+    }\n+\n+    public static <T> CacheValueBuilder<T> builder() {\n+        return new CacheValueBuilder<>();\n+    }\n+\n+    public static class CacheValueBuilder<T> {\n+\n+        Duration expiresIn;\n+        T data;\n+\n+        public CacheValueBuilder<T> expiresIn(Duration expiresIn) {\n+            this.expiresIn = expiresIn;\n+            return this;\n+        }\n+\n+        public CacheValueBuilder<T> data(T data) {\n+            this.data = data;\n+            return this;\n+        }\n+\n+        public CacheValue<T> build() {\n+            return new CacheValue<>(data, expiresIn);\n+        }\n+    }\n+\n+    final Duration expiresIn;\n+    final T data;\n+\n+    public T getData() {",
        "comment_created_at": "2023-04-25T14:19:11+00:00",
        "comment_author": "gastaldi",
        "comment_body": "How about naming it `data()` in case this class turns into a Java Record in the future? ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2175121489",
    "pr_number": 48610,
    "pr_file": "core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigDiagnostic.java",
    "created_at": "2025-06-30T13:44:58+00:00",
    "commented_code": "private static final DirectoryStream.Filter<Path> CONFIG_FILES_FILTER = new DirectoryStream.Filter<>() {\n         @Override\n         public boolean accept(final Path entry) {\n-            // Ignore .properties, because we know these are have a default loader in core\n-            // Ignore profile files. The loading rules require the main file to be present, so we only need the type\n             String filename = entry.getFileName().toString();\n-            return Files.isRegularFile(entry) && filename.startsWith(\"application.\") && !filename.endsWith(\".properties\");\n+            // Include application files with any extension and profiled files\n+            return Files.isRegularFile(entry)\n+                    && filename.length() > 11",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2175121489",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48610,
        "pr_file": "core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigDiagnostic.java",
        "discussion_id": "2175121489",
        "commented_code": "@@ -186,22 +186,24 @@ public static Set<String> getErrorKeys() {\n     private static final DirectoryStream.Filter<Path> CONFIG_FILES_FILTER = new DirectoryStream.Filter<>() {\n         @Override\n         public boolean accept(final Path entry) {\n-            // Ignore .properties, because we know these are have a default loader in core\n-            // Ignore profile files. The loading rules require the main file to be present, so we only need the type\n             String filename = entry.getFileName().toString();\n-            return Files.isRegularFile(entry) && filename.startsWith(\"application.\") && !filename.endsWith(\".properties\");\n+            // Include application files with any extension and profiled files\n+            return Files.isRegularFile(entry)\n+                    && filename.length() > 11",
        "comment_created_at": "2025-06-30T13:44:58+00:00",
        "comment_author": "geoand",
        "comment_body": "Can we replace `11` with a meaningfully named constant? Asking because it's sprinkled in a few places",
        "pr_file_module": null
      },
      {
        "comment_id": "2175998106",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48610,
        "pr_file": "core/runtime/src/main/java/io/quarkus/runtime/configuration/ConfigDiagnostic.java",
        "discussion_id": "2175121489",
        "commented_code": "@@ -186,22 +186,24 @@ public static Set<String> getErrorKeys() {\n     private static final DirectoryStream.Filter<Path> CONFIG_FILES_FILTER = new DirectoryStream.Filter<>() {\n         @Override\n         public boolean accept(final Path entry) {\n-            // Ignore .properties, because we know these are have a default loader in core\n-            // Ignore profile files. The loading rules require the main file to be present, so we only need the type\n             String filename = entry.getFileName().toString();\n-            return Files.isRegularFile(entry) && filename.startsWith(\"application.\") && !filename.endsWith(\".properties\");\n+            // Include application files with any extension and profiled files\n+            return Files.isRegularFile(entry)\n+                    && filename.length() > 11",
        "comment_created_at": "2025-06-30T21:27:50+00:00",
        "comment_author": "radcortez",
        "comment_body": "Sure!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2154943946",
    "pr_number": 48406,
    "pr_file": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/CurrentManagedContext.java",
    "created_at": "2025-06-18T15:40:22+00:00",
    "commented_code": "* @return {@code true} if the state was successfully invalidated, {@code false} otherwise\n          */\n         boolean invalidate() {\n-            // Atomically sets the value just like AtomicBoolean.compareAndSet(boolean, boolean)\n-            return IS_VALID.compareAndSet(this, VALID, INVALID);\n+            return set(VALID_MASK);\n         }\n \n         @Override\n         public boolean isValid() {\n-            return isValid == VALID;\n+            return isNotSet(VALID_MASK);",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2154943946",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48406,
        "pr_file": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/CurrentManagedContext.java",
        "discussion_id": "2154943946",
        "commented_code": "@@ -280,23 +272,39 @@ public Map<InjectableBean<?>, Object> getContextualInstances() {\n          * @return {@code true} if the state was successfully invalidated, {@code false} otherwise\n          */\n         boolean invalidate() {\n-            // Atomically sets the value just like AtomicBoolean.compareAndSet(boolean, boolean)\n-            return IS_VALID.compareAndSet(this, VALID, INVALID);\n+            return set(VALID_MASK);\n         }\n \n         @Override\n         public boolean isValid() {\n-            return isValid == VALID;\n+            return isNotSet(VALID_MASK);",
        "comment_created_at": "2025-06-18T15:40:22+00:00",
        "comment_author": "mkouba",
        "comment_body": "If \"valid mask not set\" means \"is valid\" then maybe the `VALID_MASK` should be named `INVALID_MASK` instead?",
        "pr_file_module": null
      },
      {
        "comment_id": "2154954089",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48406,
        "pr_file": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/CurrentManagedContext.java",
        "discussion_id": "2154943946",
        "commented_code": "@@ -280,23 +272,39 @@ public Map<InjectableBean<?>, Object> getContextualInstances() {\n          * @return {@code true} if the state was successfully invalidated, {@code false} otherwise\n          */\n         boolean invalidate() {\n-            // Atomically sets the value just like AtomicBoolean.compareAndSet(boolean, boolean)\n-            return IS_VALID.compareAndSet(this, VALID, INVALID);\n+            return set(VALID_MASK);\n         }\n \n         @Override\n         public boolean isValid() {\n-            return isValid == VALID;\n+            return isNotSet(VALID_MASK);",
        "comment_created_at": "2025-06-18T15:44:52+00:00",
        "comment_author": "franz1981",
        "comment_body": "I think you're right here that's a good point",
        "pr_file_module": null
      },
      {
        "comment_id": "2154958908",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48406,
        "pr_file": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/CurrentManagedContext.java",
        "discussion_id": "2154943946",
        "commented_code": "@@ -280,23 +272,39 @@ public Map<InjectableBean<?>, Object> getContextualInstances() {\n          * @return {@code true} if the state was successfully invalidated, {@code false} otherwise\n          */\n         boolean invalidate() {\n-            // Atomically sets the value just like AtomicBoolean.compareAndSet(boolean, boolean)\n-            return IS_VALID.compareAndSet(this, VALID, INVALID);\n+            return set(VALID_MASK);\n         }\n \n         @Override\n         public boolean isValid() {\n-            return isValid == VALID;\n+            return isNotSet(VALID_MASK);",
        "comment_created_at": "2025-06-18T15:47:22+00:00",
        "comment_author": "franz1981",
        "comment_body": "I see the original code was using `int VALID = 0;` which mean that `isValid` was checking that valid was `==  VALID`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2156238021",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48406,
        "pr_file": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/CurrentManagedContext.java",
        "discussion_id": "2154943946",
        "commented_code": "@@ -280,23 +272,39 @@ public Map<InjectableBean<?>, Object> getContextualInstances() {\n          * @return {@code true} if the state was successfully invalidated, {@code false} otherwise\n          */\n         boolean invalidate() {\n-            // Atomically sets the value just like AtomicBoolean.compareAndSet(boolean, boolean)\n-            return IS_VALID.compareAndSet(this, VALID, INVALID);\n+            return set(VALID_MASK);\n         }\n \n         @Override\n         public boolean isValid() {\n-            return isValid == VALID;\n+            return isNotSet(VALID_MASK);",
        "comment_created_at": "2025-06-19T06:37:04+00:00",
        "comment_author": "mkouba",
        "comment_body": "Yes, but my comment still applies ;-)",
        "pr_file_module": null
      },
      {
        "comment_id": "2156275301",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48406,
        "pr_file": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/CurrentManagedContext.java",
        "discussion_id": "2154943946",
        "commented_code": "@@ -280,23 +272,39 @@ public Map<InjectableBean<?>, Object> getContextualInstances() {\n          * @return {@code true} if the state was successfully invalidated, {@code false} otherwise\n          */\n         boolean invalidate() {\n-            // Atomically sets the value just like AtomicBoolean.compareAndSet(boolean, boolean)\n-            return IS_VALID.compareAndSet(this, VALID, INVALID);\n+            return set(VALID_MASK);\n         }\n \n         @Override\n         public boolean isValid() {\n-            return isValid == VALID;\n+            return isNotSet(VALID_MASK);",
        "comment_created_at": "2025-06-19T06:54:22+00:00",
        "comment_author": "franz1981",
        "comment_body": "Yep, i was trying to recollect why I have chosen such misleading name eheh \nI will happily fix it, thanks 🙏",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1969034316",
    "pr_number": 44981,
    "pr_file": "extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java",
    "created_at": "2025-02-25T06:28:53+00:00",
    "commented_code": "*/\n     @ConfigItem(defaultValue = \"false\")\n     boolean tryItOutEnabled;\n+\n+    /**\n+     * If application behind the proxy with custom location path.\n+     */\n+    @ConfigItem\n+    Optional<String> locationPath;",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "1969034316",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44981,
        "pr_file": "extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java",
        "discussion_id": "1969034316",
        "commented_code": "@@ -364,4 +364,10 @@ public class SwaggerUiConfig {\n      */\n     @ConfigItem(defaultValue = \"false\")\n     boolean tryItOutEnabled;\n+\n+    /**\n+     * If application behind the proxy with custom location path.\n+     */\n+    @ConfigItem\n+    Optional<String> locationPath;",
        "comment_created_at": "2025-02-25T06:28:53+00:00",
        "comment_author": "cescoffier",
        "comment_body": "Is it the root path for openapi?",
        "pr_file_module": null
      },
      {
        "comment_id": "1981677548",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44981,
        "pr_file": "extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java",
        "discussion_id": "1969034316",
        "commented_code": "@@ -364,4 +364,10 @@ public class SwaggerUiConfig {\n      */\n     @ConfigItem(defaultValue = \"false\")\n     boolean tryItOutEnabled;\n+\n+    /**\n+     * If application behind the proxy with custom location path.\n+     */\n+    @ConfigItem\n+    Optional<String> locationPath;",
        "comment_created_at": "2025-03-05T15:39:18+00:00",
        "comment_author": "alexey-plotnikoff",
        "comment_body": "",
        "pr_file_module": null
      },
      {
        "comment_id": "1981691281",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44981,
        "pr_file": "extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java",
        "discussion_id": "1969034316",
        "commented_code": "@@ -364,4 +364,10 @@ public class SwaggerUiConfig {\n      */\n     @ConfigItem(defaultValue = \"false\")\n     boolean tryItOutEnabled;\n+\n+    /**\n+     * If application behind the proxy with custom location path.\n+     */\n+    @ConfigItem\n+    Optional<String> locationPath;",
        "comment_created_at": "2025-03-05T15:46:38+00:00",
        "comment_author": "alexey-plotnikoff",
        "comment_body": "Maybe I should rename `locationPath` to `rootPath`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1986735686",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44981,
        "pr_file": "extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java",
        "discussion_id": "1969034316",
        "commented_code": "@@ -364,4 +364,10 @@ public class SwaggerUiConfig {\n      */\n     @ConfigItem(defaultValue = \"false\")\n     boolean tryItOutEnabled;\n+\n+    /**\n+     * If application behind the proxy with custom location path.\n+     */\n+    @ConfigItem\n+    Optional<String> locationPath;",
        "comment_created_at": "2025-03-10T07:26:28+00:00",
        "comment_author": "cescoffier",
        "comment_body": "Yes.",
        "pr_file_module": null
      },
      {
        "comment_id": "1987868415",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44981,
        "pr_file": "extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java",
        "discussion_id": "1969034316",
        "commented_code": "@@ -364,4 +364,10 @@ public class SwaggerUiConfig {\n      */\n     @ConfigItem(defaultValue = \"false\")\n     boolean tryItOutEnabled;\n+\n+    /**\n+     * If application behind the proxy with custom location path.\n+     */\n+    @ConfigItem\n+    Optional<String> locationPath;",
        "comment_created_at": "2025-03-10T19:06:10+00:00",
        "comment_author": "alexey-plotnikoff",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1822422015",
    "pr_number": 44105,
    "pr_file": "extensions/security-webauthn/runtime/src/main/java/io/quarkus/security/webauthn/WebAuthnRunTimeConfig.java",
    "created_at": "2024-10-30T11:27:40+00:00",
    "commented_code": "@ConfigRoot(phase = ConfigPhase.RUN_TIME)\n public interface WebAuthnRunTimeConfig {\n \n+    /**\n+     * PublicKeyCredential\n+     * https://www.iana.org/assignments/cose/cose.xhtml#algorithms\n+     */\n+    public enum PublicKeyCredential {",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "1822422015",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44105,
        "pr_file": "extensions/security-webauthn/runtime/src/main/java/io/quarkus/security/webauthn/WebAuthnRunTimeConfig.java",
        "discussion_id": "1822422015",
        "commented_code": "@@ -24,6 +23,172 @@\n @ConfigRoot(phase = ConfigPhase.RUN_TIME)\n public interface WebAuthnRunTimeConfig {\n \n+    /**\n+     * PublicKeyCredential\n+     * https://www.iana.org/assignments/cose/cose.xhtml#algorithms\n+     */\n+    public enum PublicKeyCredential {",
        "comment_created_at": "2024-10-30T11:27:40+00:00",
        "comment_author": "ynojima",
        "comment_body": "WebAuthn standard uses the name `PublicKeyCredential` for [other type](https://w3c.github.io/webauthn/#publickeycredential).\r\nCOSE algorithm type should be `COSEAlgorithmIdentifier`.\r\nhttps://www.w3.org/TR/webauthn-3/#typedefdef-cosealgorithmidentifier\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1827473970",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44105,
        "pr_file": "extensions/security-webauthn/runtime/src/main/java/io/quarkus/security/webauthn/WebAuthnRunTimeConfig.java",
        "discussion_id": "1822422015",
        "commented_code": "@@ -24,6 +23,172 @@\n @ConfigRoot(phase = ConfigPhase.RUN_TIME)\n public interface WebAuthnRunTimeConfig {\n \n+    /**\n+     * PublicKeyCredential\n+     * https://www.iana.org/assignments/cose/cose.xhtml#algorithms\n+     */\n+    public enum PublicKeyCredential {",
        "comment_created_at": "2024-11-04T10:02:21+00:00",
        "comment_author": "FroMage",
        "comment_body": "Absolutely, that's a mistake that I've no idea how it ended up there :-/",
        "pr_file_module": null
      },
      {
        "comment_id": "1827478969",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 44105,
        "pr_file": "extensions/security-webauthn/runtime/src/main/java/io/quarkus/security/webauthn/WebAuthnRunTimeConfig.java",
        "discussion_id": "1822422015",
        "commented_code": "@@ -24,6 +23,172 @@\n @ConfigRoot(phase = ConfigPhase.RUN_TIME)\n public interface WebAuthnRunTimeConfig {\n \n+    /**\n+     * PublicKeyCredential\n+     * https://www.iana.org/assignments/cose/cose.xhtml#algorithms\n+     */\n+    public enum PublicKeyCredential {",
        "comment_created_at": "2024-11-04T10:06:21+00:00",
        "comment_author": "FroMage",
        "comment_body": "Ah, probably because the config parameter is named `pubKeyCredParams`, which, BTW I should change to a non-abbreviated name.",
        "pr_file_module": null
      }
    ]
  }
]