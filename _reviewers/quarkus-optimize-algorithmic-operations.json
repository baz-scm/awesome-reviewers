[
  {
    "discussion_id": "1967450872",
    "pr_number": 46357,
    "pr_file": "core/runtime/src/main/java/io/quarkus/runtime/StartupContext.java",
    "created_at": "2025-02-24T11:20:59+00:00",
    "commented_code": "// For example, the raw command line args and ShutdownContext are set when the StartupContext is created\n     private final Map<String, Object> values = new HashMap<>();\n \n-    private final Deque<Runnable> shutdownTasks = new ConcurrentLinkedDeque<>();\n-    private final Deque<Runnable> lastShutdownTasks = new ConcurrentLinkedDeque<>();\n+    private final PriorityBlockingQueue<ShutdownTask> shutdownTasks = new PriorityBlockingQueue<>();\n+    private final PriorityBlockingQueue<ShutdownTask> lastShutdownTasks = new PriorityBlockingQueue<>();",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "1967450872",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46357,
        "pr_file": "core/runtime/src/main/java/io/quarkus/runtime/StartupContext.java",
        "discussion_id": "1967450872",
        "commented_code": "@@ -20,26 +20,26 @@ public class StartupContext implements Closeable {\n     // For example, the raw command line args and ShutdownContext are set when the StartupContext is created\n     private final Map<String, Object> values = new HashMap<>();\n \n-    private final Deque<Runnable> shutdownTasks = new ConcurrentLinkedDeque<>();\n-    private final Deque<Runnable> lastShutdownTasks = new ConcurrentLinkedDeque<>();\n+    private final PriorityBlockingQueue<ShutdownTask> shutdownTasks = new PriorityBlockingQueue<>();\n+    private final PriorityBlockingQueue<ShutdownTask> lastShutdownTasks = new PriorityBlockingQueue<>();",
        "comment_created_at": "2025-02-24T11:20:59+00:00",
        "comment_author": "yrodiere",
        "comment_body": "From the javadoc of `PriorityBlockingQueue`:\r\n\r\n> Operations on this class make no guarantees about the ordering of elements with equal priority\r\n\r\nThis looks problematic for backwards compatibility, where all tasks will share the same \"default\" priority, but will (probably) be added in a specific order that just happens to work?\r\n\r\nFWIW they also provide a solution in that same javadoc:\r\n\r\n> If you need to enforce an ordering, you can define custom classes or comparators that use a secondary key to break ties in primary priority values.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2152063039",
    "pr_number": 48426,
    "pr_file": "core/runtime/src/main/java/io/quarkus/runtime/graal/GraalVM.java",
    "created_at": "2025-06-17T11:47:53+00:00",
    "commented_code": "\"23\", \"24.1\",\n                 \"24\", \"24.2\",\n                 \"25\", \"25.0\");\n+        private static final Map<String, String> MANDREL_JDK_REV_MAP = Map.of(\n+                \"23.1\", \"21\",\n+                \"24.0\", \"22\",\n+                \"24.1\", \"23\",\n+                \"24.2\", \"24\",\n+                \"25.0\", \"25\");",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2152063039",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48426,
        "pr_file": "core/runtime/src/main/java/io/quarkus/runtime/graal/GraalVM.java",
        "discussion_id": "2152063039",
        "commented_code": "@@ -80,6 +80,12 @@ public static class Version implements Comparable<Version> {\n                 \"23\", \"24.1\",\n                 \"24\", \"24.2\",\n                 \"25\", \"25.0\");\n+        private static final Map<String, String> MANDREL_JDK_REV_MAP = Map.of(\n+                \"23.1\", \"21\",\n+                \"24.0\", \"22\",\n+                \"24.1\", \"23\",\n+                \"24.2\", \"24\",\n+                \"25.0\", \"25\");",
        "comment_created_at": "2025-06-17T11:47:53+00:00",
        "comment_author": "zakkak",
        "comment_body": "Since this is the inverse of `GRAAL_MAPPING` I suggest we either:\r\n\r\n1. Construct one based on the other\r\n2. Keep only one of them and retrieve the key by looking up the value for the other use case.",
        "pr_file_module": null
      },
      {
        "comment_id": "2152311035",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48426,
        "pr_file": "core/runtime/src/main/java/io/quarkus/runtime/graal/GraalVM.java",
        "discussion_id": "2152063039",
        "commented_code": "@@ -80,6 +80,12 @@ public static class Version implements Comparable<Version> {\n                 \"23\", \"24.1\",\n                 \"24\", \"24.2\",\n                 \"25\", \"25.0\");\n+        private static final Map<String, String> MANDREL_JDK_REV_MAP = Map.of(\n+                \"23.1\", \"21\",\n+                \"24.0\", \"22\",\n+                \"24.1\", \"23\",\n+                \"24.2\", \"24\",\n+                \"25.0\", \"25\");",
        "comment_created_at": "2025-06-17T13:40:49+00:00",
        "comment_author": "jerboaa",
        "comment_body": "Went with option 1)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2047618963",
    "pr_number": 47386,
    "pr_file": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java",
    "created_at": "2025-04-16T19:32:21+00:00",
    "commented_code": "remaining = path.substring(matchPos);\n                     }\n                 }\n-                return new RequestMatch(potentialMatch.template, potentialMatch.value, params, remaining);\n+                matches.add(new RequestMatch(potentialMatch.template, potentialMatch.value, params, remaining));\n             }\n         }\n-        return null;\n+\n+        matches.sort(Comparator.comparingInt(new ToIntFunction<RequestMatch<T>>() {",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2047618963",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47386,
        "pr_file": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java",
        "discussion_id": "2047618963",
        "commented_code": "@@ -138,10 +156,18 @@ private RequestMatch<T> mapFromPathMatcher(String path, PathMatcher.PathMatch<Ar\n                         remaining = path.substring(matchPos);\n                     }\n                 }\n-                return new RequestMatch(potentialMatch.template, potentialMatch.value, params, remaining);\n+                matches.add(new RequestMatch(potentialMatch.template, potentialMatch.value, params, remaining));\n             }\n         }\n-        return null;\n+\n+        matches.sort(Comparator.comparingInt(new ToIntFunction<RequestMatch<T>>() {",
        "comment_created_at": "2025-04-16T19:32:21+00:00",
        "comment_author": "franz1981",
        "comment_body": "Why not saving the comparator into a static final field?\r\n\r\nIn theory the sort could be avoided since most of the caller just get the first element (List.get(0)), which means that the list could be iterated (or during adding matches too, without iterating it again) and retrieved the top element to return.",
        "pr_file_module": null
      },
      {
        "comment_id": "2049422433",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47386,
        "pr_file": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java",
        "discussion_id": "2047618963",
        "commented_code": "@@ -138,10 +156,18 @@ private RequestMatch<T> mapFromPathMatcher(String path, PathMatcher.PathMatch<Ar\n                         remaining = path.substring(matchPos);\n                     }\n                 }\n-                return new RequestMatch(potentialMatch.template, potentialMatch.value, params, remaining);\n+                matches.add(new RequestMatch(potentialMatch.template, potentialMatch.value, params, remaining));\n             }\n         }\n-        return null;\n+\n+        matches.sort(Comparator.comparingInt(new ToIntFunction<RequestMatch<T>>() {",
        "comment_created_at": "2025-04-17T17:56:19+00:00",
        "comment_author": "Postremus",
        "comment_body": "No sort needed. I noticed that the list of `RequestPath`s is already sorted by length descending. \r\nSo we already get our `matches` list in ordered by remaining length ascending.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049479941",
    "pr_number": 47386,
    "pr_file": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java",
    "created_at": "2025-04-17T18:45:54+00:00",
    "commented_code": "remaining = path.substring(matchPos);\n                     }\n                 }\n-                return new RequestMatch(potentialMatch.template, potentialMatch.value, params, remaining);\n+                if (bestMatchOnly) {\n+                    return Collections",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2049479941",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47386,
        "pr_file": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java",
        "discussion_id": "2049479941",
        "commented_code": "@@ -138,10 +160,20 @@ private RequestMatch<T> mapFromPathMatcher(String path, PathMatcher.PathMatch<Ar\n                         remaining = path.substring(matchPos);\n                     }\n                 }\n-                return new RequestMatch(potentialMatch.template, potentialMatch.value, params, remaining);\n+                if (bestMatchOnly) {\n+                    return Collections",
        "comment_created_at": "2025-04-17T18:45:54+00:00",
        "comment_author": "franz1981",
        "comment_body": "List.of(..) on JDK have a better number of concrete types (2 iirc - for 0,1,2 and N elements) which tends to better perform in the caller ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1976394440",
    "pr_number": 46578,
    "pr_file": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/CreateExtension.java",
    "created_at": "2025-03-01T11:58:36+00:00",
    "commented_code": "final Optional<String> quarkusVersion = data.getStringValue(QUARKUS_VERSION);\n         // in 2.10.0.CR1 quarkus-bootstrap-maven-plugin was deprecated in favor of quarkus-extension-maven-plugin\n         if (quarkusVersion.isPresent() &&\n-                new DefaultArtifactVersion(\"2.10.0.CR1\").compareTo(new DefaultArtifactVersion(quarkusVersion.get())) > 0) {\n+                new ComparableVersion(\"2.10.0.CR1\").compareTo(new ComparableVersion(quarkusVersion.get())) > 0) {",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "1976394440",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46578,
        "pr_file": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/CreateExtension.java",
        "discussion_id": "1976394440",
        "commented_code": "@@ -355,7 +355,7 @@ public CreateExtensionCommandHandler prepare() throws QuarkusCommandException {\n         final Optional<String> quarkusVersion = data.getStringValue(QUARKUS_VERSION);\n         // in 2.10.0.CR1 quarkus-bootstrap-maven-plugin was deprecated in favor of quarkus-extension-maven-plugin\n         if (quarkusVersion.isPresent() &&\n-                new DefaultArtifactVersion(\"2.10.0.CR1\").compareTo(new DefaultArtifactVersion(quarkusVersion.get())) > 0) {\n+                new ComparableVersion(\"2.10.0.CR1\").compareTo(new ComparableVersion(quarkusVersion.get())) > 0) {",
        "comment_created_at": "2025-03-01T11:58:36+00:00",
        "comment_author": "gastaldi",
        "comment_body": "`DefaultArtifactVersion` uses `ComparableVersion` internally, so I guess this doesn't change anything",
        "pr_file_module": null
      },
      {
        "comment_id": "1976433907",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46578,
        "pr_file": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/CreateExtension.java",
        "discussion_id": "1976394440",
        "commented_code": "@@ -355,7 +355,7 @@ public CreateExtensionCommandHandler prepare() throws QuarkusCommandException {\n         final Optional<String> quarkusVersion = data.getStringValue(QUARKUS_VERSION);\n         // in 2.10.0.CR1 quarkus-bootstrap-maven-plugin was deprecated in favor of quarkus-extension-maven-plugin\n         if (quarkusVersion.isPresent() &&\n-                new DefaultArtifactVersion(\"2.10.0.CR1\").compareTo(new DefaultArtifactVersion(quarkusVersion.get())) > 0) {\n+                new ComparableVersion(\"2.10.0.CR1\").compareTo(new ComparableVersion(quarkusVersion.get())) > 0) {",
        "comment_created_at": "2025-03-01T14:59:00+00:00",
        "comment_author": "gsmet",
        "comment_body": "I wouldn't be that stupid :).\r\n\r\n`ComparableVersion` is fine, I tested it and I added tests there: https://github.com/quarkusio/conversational-release-action/blob/main/src/test/java/io/quarkus/bot/release/VersionSchemeTest.java#L28 to check things would be fine.\r\n\r\nWhat's not working is the code in `DefaultArtifactVersion` that extracts major/minor/... (and that's what I missed). It's a different path and this one is broken.\r\n`DefaultArtifactVersion` sorting is actually fine as based on `ComparableVersion` so the only thing that was actually wrong is the code that was extracting major/minor.\r\n\r\nSo actually using `ComparableVersion` is fine. We could switch to SmallRye Common Version though, I don't mind.",
        "pr_file_module": null
      },
      {
        "comment_id": "1976434085",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46578,
        "pr_file": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/CreateExtension.java",
        "discussion_id": "1976394440",
        "commented_code": "@@ -355,7 +355,7 @@ public CreateExtensionCommandHandler prepare() throws QuarkusCommandException {\n         final Optional<String> quarkusVersion = data.getStringValue(QUARKUS_VERSION);\n         // in 2.10.0.CR1 quarkus-bootstrap-maven-plugin was deprecated in favor of quarkus-extension-maven-plugin\n         if (quarkusVersion.isPresent() &&\n-                new DefaultArtifactVersion(\"2.10.0.CR1\").compareTo(new DefaultArtifactVersion(quarkusVersion.get())) > 0) {\n+                new ComparableVersion(\"2.10.0.CR1\").compareTo(new ComparableVersion(quarkusVersion.get())) > 0) {",
        "comment_created_at": "2025-03-01T15:00:24+00:00",
        "comment_author": "gsmet",
        "comment_body": "And to clarify, the reason I changed it wasn't to fix it (except for the extraction): it was to avoid the additional layer that was useless... and potentially harmful if we start using other methods of `DefaultArtifactVersion`.",
        "pr_file_module": null
      }
    ]
  }
]