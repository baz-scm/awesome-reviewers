[
  {
    "discussion_id": "2102849624",
    "pr_number": 48010,
    "pr_file": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java",
    "created_at": "2025-05-22T15:30:39+00:00",
    "commented_code": "String errorMessage = \"Token and UserInfo do not have matching `sub` claims\";\n                     return Uni.createFrom().failure(new AuthenticationCompletionException(errorMessage));\n                 }\n-\n+                final String principalClaim = resolvedContext.oidcConfig().token().principalClaim().orElse(null);\n+                if (principalClaim != null && !tokenJson.containsKey(principalClaim) && userInfo != null\n+                        && userInfo.contains(principalClaim)) {\n+                    tokenJson.put(principalClaim, userInfo.getString(principalClaim));\n+                }",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2102867687",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48010,
        "pr_file": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java",
        "discussion_id": "2102849624",
        "commented_code": "@@ -463,7 +463,11 @@ private Uni<SecurityIdentity> createSecurityIdentityWithOidcServer(TokenVerifica\n                     String errorMessage = \"Token and UserInfo do not have matching `sub` claims\";\n                     return Uni.createFrom().failure(new AuthenticationCompletionException(errorMessage));\n                 }\n-\n+                final String principalClaim = resolvedContext.oidcConfig().token().principalClaim().orElse(null);\n+                if (principalClaim != null && !tokenJson.containsKey(principalClaim) && userInfo != null\n+                        && userInfo.contains(principalClaim)) {\n+                    tokenJson.put(principalClaim, userInfo.getString(principalClaim));\n+                }",
        "comment_created_at": "2025-05-22T15:40:07+00:00",
        "comment_author": "sberyozkin",
        "comment_body": "@gastaldi  I guess I'll ignore this one though with the lambda expression :-)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2075986978",
    "pr_number": 47320,
    "pr_file": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java",
    "created_at": "2025-05-06T17:53:12+00:00",
    "commented_code": "}\n     }\n \n+    private static String decryptIdToken(TenantConfigContext configContext, String idToken) {\n+        if (configContext.oidcConfig().token().decryptIdToken().orElse(false)",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2075986978",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47320,
        "pr_file": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java",
        "discussion_id": "2075986978",
        "commented_code": "@@ -1157,6 +1138,15 @@ private void fireEvent(SecurityEvent.Type eventType, Map<String, Object> propert\n         }\n     }\n \n+    private static String decryptIdToken(TenantConfigContext configContext, String idToken) {\n+        if (configContext.oidcConfig().token().decryptIdToken().orElse(false)",
        "comment_created_at": "2025-05-06T17:53:12+00:00",
        "comment_author": "gastaldi",
        "comment_body": "No point in using `Optional<Boolean>` if you're expecting it to be `false` if it's not set.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2024347567",
    "pr_number": 46997,
    "pr_file": "test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java",
    "created_at": "2025-04-02T08:36:18+00:00",
    "commented_code": "}\n \n     public static boolean isTestClass(String className, ClassLoader classLoader, Path testLocation) {\n+        if (classLoader instanceof QuarkusClassLoader qcl) {\n+            // this appears to be a more efficient and reliable way of performing this check\n+            // the code after this IF block has an issue on Windows\n+            final List<ClassPathElement> cpeList = qcl.getElementsWithResource(fromClassNameToResourceName(className),\n+                    false);\n+            if (!cpeList.isEmpty()) {\n+                // if it's not empty, it's pretty much always a list with a single element\n+                if (cpeList.size() == 1) {\n+                    final ClassPathElement cpe = cpeList.get(0);\n+                    return cpe.isRuntime() && cpe.getRoot().equals(testLocation);",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2024347567",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46997,
        "pr_file": "test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java",
        "discussion_id": "2024347567",
        "commented_code": "@@ -323,6 +324,25 @@ public static Path getResourcesForClassesDirOrNull(Path classesDir, String name)\n     }\n \n     public static boolean isTestClass(String className, ClassLoader classLoader, Path testLocation) {\n+        if (classLoader instanceof QuarkusClassLoader qcl) {\n+            // this appears to be a more efficient and reliable way of performing this check\n+            // the code after this IF block has an issue on Windows\n+            final List<ClassPathElement> cpeList = qcl.getElementsWithResource(fromClassNameToResourceName(className),\n+                    false);\n+            if (!cpeList.isEmpty()) {\n+                // if it's not empty, it's pretty much always a list with a single element\n+                if (cpeList.size() == 1) {\n+                    final ClassPathElement cpe = cpeList.get(0);\n+                    return cpe.isRuntime() && cpe.getRoot().equals(testLocation);",
        "comment_created_at": "2025-04-02T08:36:18+00:00",
        "comment_author": "aloubyansky",
        "comment_body": "`cpe.getRoot()` theoretically could return `null`, so the `equals` call should be flipped. I can do that once the CI has finished.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2105768384",
    "pr_number": 47774,
    "pr_file": "extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/OpenTelemetryUtil.java",
    "created_at": "2025-05-24T09:22:54+00:00",
    "commented_code": "return Collections.emptyMap();\n         }\n         Span span = Span.fromContextOrNull(context);\n-        Map<String, String> spanData = new HashMap<>();\n+        Map<String, String> spanData = new HashMap<>(4, 1f);\n         if (span != null) {",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2105768384",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47774,
        "pr_file": "extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/OpenTelemetryUtil.java",
        "discussion_id": "2105768384",
        "commented_code": "@@ -83,7 +86,7 @@ public static Map<String, String> getSpanData(Context context) {\n             return Collections.emptyMap();\n         }\n         Span span = Span.fromContextOrNull(context);\n-        Map<String, String> spanData = new HashMap<>();\n+        Map<String, String> spanData = new HashMap<>(4, 1f);\n         if (span != null) {",
        "comment_created_at": "2025-05-24T09:22:54+00:00",
        "comment_author": "gsmet",
        "comment_body": "I wouldn't add these comments if you weren't already into micro-optimization mode but:\r\n\r\n- if `span` can be null quite often, you could also return `Collections.emptyMap()` in this case\r\n- I also wonder if it might be worth using `Map.of` and specializing the cases a bit more\r\n\r\nI was thinking of something like:\r\n\r\n```java\r\n    public static Map<String, String> getSpanData(Context context) {\r\n        if (context == null) {\r\n            return Collections.emptyMap();\r\n        }\r\n\r\n        Span span = Span.fromContextOrNull(context);\r\n        if (span == null) {\r\n            return Collections.emptyMap();\r\n        }\r\n\r\n        SpanContext spanContext = span.getSpanContext();\r\n        if (span instanceof ReadableSpan readableSpan\r\n                && readableSpan.getParentSpanContext() != null\r\n                && readableSpan.getParentSpanContext().isValid()) {\r\n            return Map.of(\r\n                    SPAN_ID, spanContext.getSpanId(),\r\n                    TRACE_ID, spanContext.getTraceId(),\r\n                    SAMPLED, Boolean.toString(spanContext.isSampled()),\r\n                    PARENT_ID, readableSpan.getParentSpanContext().getSpanId()\r\n            );\r\n        }\r\n\r\n        return Map.of(\r\n                SPAN_ID, spanContext.getSpanId(),\r\n                TRACE_ID, spanContext.getTraceId(),\r\n                SAMPLED, Boolean.toString(spanContext.isSampled())\r\n        );\r\n    }\r\n```\r\n\r\nIt might not be worth the additional trouble though so I will let you be the judge of if. I don't expect this code to change often so I think the duplication is not that big of a problem if it performs faster.\r\n\r\nAlso the second part only works if we expect the Map to be immutable, obviously :).",
        "pr_file_module": null
      },
      {
        "comment_id": "2105782365",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47774,
        "pr_file": "extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/OpenTelemetryUtil.java",
        "discussion_id": "2105768384",
        "commented_code": "@@ -83,7 +86,7 @@ public static Map<String, String> getSpanData(Context context) {\n             return Collections.emptyMap();\n         }\n         Span span = Span.fromContextOrNull(context);\n-        Map<String, String> spanData = new HashMap<>();\n+        Map<String, String> spanData = new HashMap<>(4, 1f);\n         if (span != null) {",
        "comment_created_at": "2025-05-24T10:34:20+00:00",
        "comment_author": "brunobat",
        "comment_body": "Immutability is why I didn't think about the Map.of()... I'll give it a try.\r\nPlease mind the execution path using the HashMap is now only used for logging. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2105782816",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47774,
        "pr_file": "extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/OpenTelemetryUtil.java",
        "discussion_id": "2105768384",
        "commented_code": "@@ -83,7 +86,7 @@ public static Map<String, String> getSpanData(Context context) {\n             return Collections.emptyMap();\n         }\n         Span span = Span.fromContextOrNull(context);\n-        Map<String, String> spanData = new HashMap<>();\n+        Map<String, String> spanData = new HashMap<>(4, 1f);\n         if (span != null) {",
        "comment_created_at": "2025-05-24T10:37:24+00:00",
        "comment_author": "gsmet",
        "comment_body": "Yeah, if it doesn't look like a good idea, just don't bother :).\r\nThe first part about not creating the Map if null might be a good idea though.\r\n\r\nI only added a comment because it was already micro optimization but at some point you have to decide that things are good enough!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1998972185",
    "pr_number": 34681,
    "pr_file": "test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java",
    "created_at": "2025-03-17T15:07:00+00:00",
    "commented_code": "return path;\n     }\n \n-    /**\n-     * Resolves the directory or the JAR file containing the application being tested by the test class.\n-     *\n-     * @param testClass the test class\n-     * @return directory or JAR containing the application being tested by the test class\n-     */\n-    public static Path getAppClassLocation(Class<?> testClass) {\n-        return getAppClassLocationForTestLocation(getTestClassesLocation(testClass));\n+    public static Path getTestClassesLocation(Class<?> requiredTestClass, CuratedApplication curatedApplication) {\n+        final WorkspaceModule module = curatedApplication.getApplicationModel().getAppArtifact().getWorkspaceModule();\n+\n+        ArtifactSources testSources = module.getTestSources();\n+        final String testClassFileName = ClassLoaderHelper\n+                .fromClassNameToResourceName(requiredTestClass.getName());\n+        if (testSources != null) {\n+            PathTree paths = testSources.getOutputTree();\n+            if (paths.contains(testClassFileName)) {",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "1998972185",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 34681,
        "pr_file": "test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java",
        "discussion_id": "1998972185",
        "commented_code": "@@ -161,14 +176,59 @@ public static Path getTestClassesLocation(Class<?> testClass) {\n         return path;\n     }\n \n-    /**\n-     * Resolves the directory or the JAR file containing the application being tested by the test class.\n-     *\n-     * @param testClass the test class\n-     * @return directory or JAR containing the application being tested by the test class\n-     */\n-    public static Path getAppClassLocation(Class<?> testClass) {\n-        return getAppClassLocationForTestLocation(getTestClassesLocation(testClass));\n+    public static Path getTestClassesLocation(Class<?> requiredTestClass, CuratedApplication curatedApplication) {\n+        final WorkspaceModule module = curatedApplication.getApplicationModel().getAppArtifact().getWorkspaceModule();\n+\n+        ArtifactSources testSources = module.getTestSources();\n+        final String testClassFileName = ClassLoaderHelper\n+                .fromClassNameToResourceName(requiredTestClass.getName());\n+        if (testSources != null) {\n+            PathTree paths = testSources.getOutputTree();\n+            if (paths.contains(testClassFileName)) {",
        "comment_created_at": "2025-03-17T15:07:00+00:00",
        "comment_author": "aloubyansky",
        "comment_body": "In this case, you could try doing\r\n```\r\nvar testClassesDir = paths.apply(testClassFileName, visit -> {\r\n    if(visit == null) {\r\n        // this path does not exist in this path tree\r\n        return null;\r\n    }\r\n    return visit.getRoot();\r\n});\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2003883557",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 34681,
        "pr_file": "test-framework/common/src/main/java/io/quarkus/test/common/PathTestHelper.java",
        "discussion_id": "1998972185",
        "commented_code": "@@ -161,14 +176,59 @@ public static Path getTestClassesLocation(Class<?> testClass) {\n         return path;\n     }\n \n-    /**\n-     * Resolves the directory or the JAR file containing the application being tested by the test class.\n-     *\n-     * @param testClass the test class\n-     * @return directory or JAR containing the application being tested by the test class\n-     */\n-    public static Path getAppClassLocation(Class<?> testClass) {\n-        return getAppClassLocationForTestLocation(getTestClassesLocation(testClass));\n+    public static Path getTestClassesLocation(Class<?> requiredTestClass, CuratedApplication curatedApplication) {\n+        final WorkspaceModule module = curatedApplication.getApplicationModel().getAppArtifact().getWorkspaceModule();\n+\n+        ArtifactSources testSources = module.getTestSources();\n+        final String testClassFileName = ClassLoaderHelper\n+                .fromClassNameToResourceName(requiredTestClass.getName());\n+        if (testSources != null) {\n+            PathTree paths = testSources.getOutputTree();\n+            if (paths.contains(testClassFileName)) {",
        "comment_created_at": "2025-03-19T17:25:27+00:00",
        "comment_author": "holly-cummins",
        "comment_body": "Will give it a go :) ",
        "pr_file_module": null
      }
    ]
  }
]