[
  {
    "discussion_id": "2111884575",
    "pr_number": 48007,
    "pr_file": "extensions/hibernate-reactive/deployment/src/test/java/io/quarkus/hibernate/reactive/compatibility/ORMReactiveCompatbilityNamedDataSourceNamedPersistenceUnitBothUnitTest.java",
    "created_at": "2025-05-28T13:20:14+00:00",
    "commented_code": "package io.quarkus.hibernate.reactive.compatibility;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n-\n import java.util.List;\n \n-import org.junit.jupiter.api.Assertions;\n+import jakarta.inject.Inject;\n+import jakarta.inject.Named;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.reactive.mutiny.Mutiny;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n import io.quarkus.builder.Version;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n import io.quarkus.hibernate.reactive.entities.Hero;\n import io.quarkus.maven.dependency.Dependency;\n-import io.quarkus.runtime.configuration.ConfigurationException;\n import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.test.vertx.RunOnVertxContext;\n+import io.quarkus.test.vertx.UniAsserter;\n \n public class ORMReactiveCompatbilityNamedDataSourceNamedPersistenceUnitBothUnitTest extends CompatibilityUnitTestBase {",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2111884575",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48007,
        "pr_file": "extensions/hibernate-reactive/deployment/src/test/java/io/quarkus/hibernate/reactive/compatibility/ORMReactiveCompatbilityNamedDataSourceNamedPersistenceUnitBothUnitTest.java",
        "discussion_id": "2111884575",
        "commented_code": "@@ -1,18 +1,22 @@\n package io.quarkus.hibernate.reactive.compatibility;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n-\n import java.util.List;\n \n-import org.junit.jupiter.api.Assertions;\n+import jakarta.inject.Inject;\n+import jakarta.inject.Named;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.reactive.mutiny.Mutiny;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n \n import io.quarkus.builder.Version;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n import io.quarkus.hibernate.reactive.entities.Hero;\n import io.quarkus.maven.dependency.Dependency;\n-import io.quarkus.runtime.configuration.ConfigurationException;\n import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.test.vertx.RunOnVertxContext;\n+import io.quarkus.test.vertx.UniAsserter;\n \n public class ORMReactiveCompatbilityNamedDataSourceNamedPersistenceUnitBothUnitTest extends CompatibilityUnitTestBase {",
        "comment_created_at": "2025-05-28T13:20:14+00:00",
        "comment_author": "yrodiere",
        "comment_body": "It's nice to have this test, but we might also want to test the simple case \"hibernate reactive alone with multiple persistence units\".\r\n\r\nCould you look if there are existing Hibernate ORM tests that could make sense to copy and adapt to Hibernate Reactive? E.g. from `extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2152015558",
    "pr_number": 48426,
    "pr_file": "core/deployment/src/test/java/io/quarkus/deployment/pkg/steps/GraalVMTest.java",
    "created_at": "2025-06-17T11:23:14+00:00",
    "commented_code": "\"Substrate VM GraalVM CE 21+35.1 (build 21+35, serial gc)\n\");\n     }\n \n+    /*\n+     * Exercise the code path used at native-image build time where the org.graalvm.vendorversion\n+     * property is being fed to the GraalVM version parsing machinery.\n+     */\n+    @Test\n+    public void testGraalVMRuntimeVersion() {\n+        // GraalVM CE/Community\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"GraalVM CE 26-dev+1.1\");\n+        io.quarkus.runtime.graal.GraalVM.Version v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"26.0\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(26, v.javaVersion.feature());\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"GraalVM CE 25-dev+26.1\");\n+        v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"25.0\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(25, v.javaVersion.feature());\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"GraalVM CE 24.0.1+9.1\");\n+        v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"24.2\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(24, v.javaVersion.feature());\n+\n+        // Mandrel\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"Mandrel-24.2.1.0-Final\");\n+        v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"24.2\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(24, v.javaVersion.feature());\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"Mandrel-23.1.7.0-1b2\");\n+        v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"23.1\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(21, v.javaVersion.feature());\n+        Assertions.assertEquals(7, v.javaVersion.update());",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2152015558",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48426,
        "pr_file": "core/deployment/src/test/java/io/quarkus/deployment/pkg/steps/GraalVMTest.java",
        "discussion_id": "2152015558",
        "commented_code": "@@ -184,6 +211,38 @@ public void testGraalVMVersionsOlderThan() {\n                         \"Substrate VM GraalVM CE 21+35.1 (build 21+35, serial gc)\\n\");\n     }\n \n+    /*\n+     * Exercise the code path used at native-image build time where the org.graalvm.vendorversion\n+     * property is being fed to the GraalVM version parsing machinery.\n+     */\n+    @Test\n+    public void testGraalVMRuntimeVersion() {\n+        // GraalVM CE/Community\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"GraalVM CE 26-dev+1.1\");\n+        io.quarkus.runtime.graal.GraalVM.Version v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"26.0\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(26, v.javaVersion.feature());\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"GraalVM CE 25-dev+26.1\");\n+        v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"25.0\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(25, v.javaVersion.feature());\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"GraalVM CE 24.0.1+9.1\");\n+        v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"24.2\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(24, v.javaVersion.feature());\n+\n+        // Mandrel\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"Mandrel-24.2.1.0-Final\");\n+        v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"24.2\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(24, v.javaVersion.feature());\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"Mandrel-23.1.7.0-1b2\");\n+        v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"23.1\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(21, v.javaVersion.feature());\n+        Assertions.assertEquals(7, v.javaVersion.update());",
        "comment_created_at": "2025-06-17T11:23:14+00:00",
        "comment_author": "zakkak",
        "comment_body": "I sugggest using `@ParameterizedTest` like in the tests `testJDKVersion` and `testJDKVersionCompare` to avoid code duplication.",
        "pr_file_module": null
      },
      {
        "comment_id": "2152297807",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 48426,
        "pr_file": "core/deployment/src/test/java/io/quarkus/deployment/pkg/steps/GraalVMTest.java",
        "discussion_id": "2152015558",
        "commented_code": "@@ -184,6 +211,38 @@ public void testGraalVMVersionsOlderThan() {\n                         \"Substrate VM GraalVM CE 21+35.1 (build 21+35, serial gc)\\n\");\n     }\n \n+    /*\n+     * Exercise the code path used at native-image build time where the org.graalvm.vendorversion\n+     * property is being fed to the GraalVM version parsing machinery.\n+     */\n+    @Test\n+    public void testGraalVMRuntimeVersion() {\n+        // GraalVM CE/Community\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"GraalVM CE 26-dev+1.1\");\n+        io.quarkus.runtime.graal.GraalVM.Version v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"26.0\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(26, v.javaVersion.feature());\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"GraalVM CE 25-dev+26.1\");\n+        v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"25.0\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(25, v.javaVersion.feature());\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"GraalVM CE 24.0.1+9.1\");\n+        v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"24.2\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(24, v.javaVersion.feature());\n+\n+        // Mandrel\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"Mandrel-24.2.1.0-Final\");\n+        v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"24.2\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(24, v.javaVersion.feature());\n+        System.setProperty(GRAALVM_VENDOR_VERSION_PROP, \"Mandrel-23.1.7.0-1b2\");\n+        v = io.quarkus.runtime.graal.GraalVM.Version.getCurrent();\n+        Assertions.assertEquals(\"23.1\", v.getMajorMinorAsString());\n+        Assertions.assertEquals(21, v.javaVersion.feature());\n+        Assertions.assertEquals(7, v.javaVersion.update());",
        "comment_created_at": "2025-06-17T13:35:21+00:00",
        "comment_author": "jerboaa",
        "comment_body": "OK.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1991354212",
    "pr_number": 46728,
    "pr_file": "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/dev/HibernateOrmDevJsonRpcServiceTest.java",
    "created_at": "2025-03-12T12:08:19+00:00",
    "commented_code": "+package io.quarkus.hibernate.orm.dev;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import io.quarkus.devui.tests.DevUIJsonRPCTest;\n+import io.quarkus.hibernate.orm.TestTags;\n+import io.quarkus.test.QuarkusDevModeTest;\n+\n+@Tag(TestTags.DEVMODE)\n+public class HibernateOrmDevJsonRpcServiceTest extends DevUIJsonRPCTest {\n+    @RegisterExtension\n+    final static QuarkusDevModeTest TEST = new QuarkusDevModeTest()\n+            .withApplicationRoot((jar) -> jar.addClasses(MyEntityWithSuccessfulDDLGeneration.class)\n+                    .addAsResource(\"application.properties\")\n+                    .addAsResource(\"import-custom-table-name.sql\", \"import.sql\"));\n+\n+    public HibernateOrmDevJsonRpcServiceTest() {\n+        super(\"io.quarkus.quarkus-hibernate-orm\");\n+    }\n+\n+    @Test\n+    public void testGetInfo() throws Exception {\n+        JsonNode info = super.executeJsonRPCMethod(\"getInfo\");\n+\n+        assertThat(info).isNotNull();\n+        assertThat(info.has(\"persistenceUnits\")).isTrue();\n+\n+        JsonNode persistenceUnits = info.get(\"persistenceUnits\");\n+        assertThat(persistenceUnits.isArray()).isTrue();\n+        assertThat(persistenceUnits.size()).isEqualTo(1);\n+\n+        JsonNode unit = persistenceUnits.get(0);\n+        assertThat(unit.get(\"name\").textValue()).isEqualTo(\"<default>\");\n+\n+        assertThat(unit.get(\"managedEntities\").size()).isEqualTo(1);\n+        JsonNode myEntity = unit.get(\"managedEntities\").get(0);\n+        assertThat(myEntity.get(\"name\").textValue()).isEqualTo(MyEntityWithSuccessfulDDLGeneration.NAME);\n+        assertThat(myEntity.get(\"className\").textValue()).isEqualTo(MyEntityWithSuccessfulDDLGeneration.class.getName());\n+        assertThat(myEntity.get(\"tableName\").textValue()).isEqualTo(MyEntityWithSuccessfulDDLGeneration.TABLE_NAME);\n+\n+        assertThat(unit.get(\"namedQueries\").size()).isEqualTo(1);\n+        JsonNode namedQuery = unit.get(\"namedQueries\").get(0);\n+        assertThat(namedQuery.get(\"name\").textValue()).isEqualTo(\"MyEntity.findAll\");\n+        assertThat(namedQuery.get(\"query\").textValue()).isEqualTo(\"SELECT e FROM MyEntity e ORDER BY e.name\");\n+    }\n+\n+    @Test\n+    public void testGetNumberOfPersistenceUnits() throws Exception {\n+        JsonNode units = super.executeJsonRPCMethod(\"getNumberOfPersistenceUnits\");\n+\n+        assertThat(units).isNotNull();\n+        assertThat(units.isNumber()).isTrue();\n+        assertThat(units.intValue()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    public void testGetNumberOfEntityTypes() throws Exception {\n+        JsonNode types = super.executeJsonRPCMethod(\"getNumberOfEntityTypes\");\n+\n+        assertThat(types).isNotNull();\n+        assertThat(types.isNumber()).isTrue();\n+        assertThat(types.intValue()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    public void testGetNumberOfNamedQueries() throws Exception {\n+        JsonNode queries = super.executeJsonRPCMethod(\"getNumberOfNamedQueries\");\n+\n+        assertThat(queries).isNotNull();\n+        assertThat(queries.isNumber()).isTrue();\n+        assertThat(queries.intValue()).isEqualTo(2);\n+    }",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "1991354212",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46728,
        "pr_file": "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/dev/HibernateOrmDevJsonRpcServiceTest.java",
        "discussion_id": "1991354212",
        "commented_code": "@@ -0,0 +1,127 @@\n+package io.quarkus.hibernate.orm.dev;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import io.quarkus.devui.tests.DevUIJsonRPCTest;\n+import io.quarkus.hibernate.orm.TestTags;\n+import io.quarkus.test.QuarkusDevModeTest;\n+\n+@Tag(TestTags.DEVMODE)\n+public class HibernateOrmDevJsonRpcServiceTest extends DevUIJsonRPCTest {\n+    @RegisterExtension\n+    final static QuarkusDevModeTest TEST = new QuarkusDevModeTest()\n+            .withApplicationRoot((jar) -> jar.addClasses(MyEntityWithSuccessfulDDLGeneration.class)\n+                    .addAsResource(\"application.properties\")\n+                    .addAsResource(\"import-custom-table-name.sql\", \"import.sql\"));\n+\n+    public HibernateOrmDevJsonRpcServiceTest() {\n+        super(\"io.quarkus.quarkus-hibernate-orm\");\n+    }\n+\n+    @Test\n+    public void testGetInfo() throws Exception {\n+        JsonNode info = super.executeJsonRPCMethod(\"getInfo\");\n+\n+        assertThat(info).isNotNull();\n+        assertThat(info.has(\"persistenceUnits\")).isTrue();\n+\n+        JsonNode persistenceUnits = info.get(\"persistenceUnits\");\n+        assertThat(persistenceUnits.isArray()).isTrue();\n+        assertThat(persistenceUnits.size()).isEqualTo(1);\n+\n+        JsonNode unit = persistenceUnits.get(0);\n+        assertThat(unit.get(\"name\").textValue()).isEqualTo(\"<default>\");\n+\n+        assertThat(unit.get(\"managedEntities\").size()).isEqualTo(1);\n+        JsonNode myEntity = unit.get(\"managedEntities\").get(0);\n+        assertThat(myEntity.get(\"name\").textValue()).isEqualTo(MyEntityWithSuccessfulDDLGeneration.NAME);\n+        assertThat(myEntity.get(\"className\").textValue()).isEqualTo(MyEntityWithSuccessfulDDLGeneration.class.getName());\n+        assertThat(myEntity.get(\"tableName\").textValue()).isEqualTo(MyEntityWithSuccessfulDDLGeneration.TABLE_NAME);\n+\n+        assertThat(unit.get(\"namedQueries\").size()).isEqualTo(1);\n+        JsonNode namedQuery = unit.get(\"namedQueries\").get(0);\n+        assertThat(namedQuery.get(\"name\").textValue()).isEqualTo(\"MyEntity.findAll\");\n+        assertThat(namedQuery.get(\"query\").textValue()).isEqualTo(\"SELECT e FROM MyEntity e ORDER BY e.name\");\n+    }\n+\n+    @Test\n+    public void testGetNumberOfPersistenceUnits() throws Exception {\n+        JsonNode units = super.executeJsonRPCMethod(\"getNumberOfPersistenceUnits\");\n+\n+        assertThat(units).isNotNull();\n+        assertThat(units.isNumber()).isTrue();\n+        assertThat(units.intValue()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    public void testGetNumberOfEntityTypes() throws Exception {\n+        JsonNode types = super.executeJsonRPCMethod(\"getNumberOfEntityTypes\");\n+\n+        assertThat(types).isNotNull();\n+        assertThat(types.isNumber()).isTrue();\n+        assertThat(types.intValue()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    public void testGetNumberOfNamedQueries() throws Exception {\n+        JsonNode queries = super.executeJsonRPCMethod(\"getNumberOfNamedQueries\");\n+\n+        assertThat(queries).isNotNull();\n+        assertThat(queries.isNumber()).isTrue();\n+        assertThat(queries.intValue()).isEqualTo(2);\n+    }",
        "comment_created_at": "2025-03-12T12:08:19+00:00",
        "comment_author": "yrodiere",
        "comment_body": "FWIW this is already tested in integration tests, e.g. https://github.com/quarkusio/quarkus/blob/4834e06c752639ad4a547622d5541775a6d3e8b8/integration-tests/devmode/src/test/java/io/quarkus/test/devui/AbstractDevUIHibernateOrmTest.java#L20-L19\r\n\r\n@phillip-kruger should we move all these tests to the `deployment` module instead?",
        "pr_file_module": null
      },
      {
        "comment_id": "1991821775",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 46728,
        "pr_file": "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/dev/HibernateOrmDevJsonRpcServiceTest.java",
        "discussion_id": "1991354212",
        "commented_code": "@@ -0,0 +1,127 @@\n+package io.quarkus.hibernate.orm.dev;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import io.quarkus.devui.tests.DevUIJsonRPCTest;\n+import io.quarkus.hibernate.orm.TestTags;\n+import io.quarkus.test.QuarkusDevModeTest;\n+\n+@Tag(TestTags.DEVMODE)\n+public class HibernateOrmDevJsonRpcServiceTest extends DevUIJsonRPCTest {\n+    @RegisterExtension\n+    final static QuarkusDevModeTest TEST = new QuarkusDevModeTest()\n+            .withApplicationRoot((jar) -> jar.addClasses(MyEntityWithSuccessfulDDLGeneration.class)\n+                    .addAsResource(\"application.properties\")\n+                    .addAsResource(\"import-custom-table-name.sql\", \"import.sql\"));\n+\n+    public HibernateOrmDevJsonRpcServiceTest() {\n+        super(\"io.quarkus.quarkus-hibernate-orm\");\n+    }\n+\n+    @Test\n+    public void testGetInfo() throws Exception {\n+        JsonNode info = super.executeJsonRPCMethod(\"getInfo\");\n+\n+        assertThat(info).isNotNull();\n+        assertThat(info.has(\"persistenceUnits\")).isTrue();\n+\n+        JsonNode persistenceUnits = info.get(\"persistenceUnits\");\n+        assertThat(persistenceUnits.isArray()).isTrue();\n+        assertThat(persistenceUnits.size()).isEqualTo(1);\n+\n+        JsonNode unit = persistenceUnits.get(0);\n+        assertThat(unit.get(\"name\").textValue()).isEqualTo(\"<default>\");\n+\n+        assertThat(unit.get(\"managedEntities\").size()).isEqualTo(1);\n+        JsonNode myEntity = unit.get(\"managedEntities\").get(0);\n+        assertThat(myEntity.get(\"name\").textValue()).isEqualTo(MyEntityWithSuccessfulDDLGeneration.NAME);\n+        assertThat(myEntity.get(\"className\").textValue()).isEqualTo(MyEntityWithSuccessfulDDLGeneration.class.getName());\n+        assertThat(myEntity.get(\"tableName\").textValue()).isEqualTo(MyEntityWithSuccessfulDDLGeneration.TABLE_NAME);\n+\n+        assertThat(unit.get(\"namedQueries\").size()).isEqualTo(1);\n+        JsonNode namedQuery = unit.get(\"namedQueries\").get(0);\n+        assertThat(namedQuery.get(\"name\").textValue()).isEqualTo(\"MyEntity.findAll\");\n+        assertThat(namedQuery.get(\"query\").textValue()).isEqualTo(\"SELECT e FROM MyEntity e ORDER BY e.name\");\n+    }\n+\n+    @Test\n+    public void testGetNumberOfPersistenceUnits() throws Exception {\n+        JsonNode units = super.executeJsonRPCMethod(\"getNumberOfPersistenceUnits\");\n+\n+        assertThat(units).isNotNull();\n+        assertThat(units.isNumber()).isTrue();\n+        assertThat(units.intValue()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    public void testGetNumberOfEntityTypes() throws Exception {\n+        JsonNode types = super.executeJsonRPCMethod(\"getNumberOfEntityTypes\");\n+\n+        assertThat(types).isNotNull();\n+        assertThat(types.isNumber()).isTrue();\n+        assertThat(types.intValue()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    public void testGetNumberOfNamedQueries() throws Exception {\n+        JsonNode queries = super.executeJsonRPCMethod(\"getNumberOfNamedQueries\");\n+\n+        assertThat(queries).isNotNull();\n+        assertThat(queries.isNumber()).isTrue();\n+        assertThat(queries.intValue()).isEqualTo(2);\n+    }",
        "comment_created_at": "2025-03-12T16:01:02+00:00",
        "comment_author": "mbellade",
        "comment_body": "I've completely missed the existing test. I've moved the tests for the `executeHQL` method there for now.\r\n\r\n+1 from me to move the test, though I'm fine with keeping it under ITs as well.",
        "pr_file_module": null
      }
    ]
  }
]