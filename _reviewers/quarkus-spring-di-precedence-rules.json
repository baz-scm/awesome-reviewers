[
  {
    "discussion_id": "2063210501",
    "pr_number": 47565,
    "pr_file": "extensions/spring-di/deployment/src/main/java/io/quarkus/spring/di/deployment/SpringDIProcessor.java",
    "created_at": "2025-04-28T08:50:59+00:00",
    "commented_code": ".map(AnnotationInstance::name)\n                     .collect(Collectors.toSet()));\n         }\n+        for (DotName scope : stereotypeScopes.keySet()) {\n+            customScopeBuildProducer.produce(new CustomScopeBuildItem(scope));",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2063210501",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47565,
        "pr_file": "extensions/spring-di/deployment/src/main/java/io/quarkus/spring/di/deployment/SpringDIProcessor.java",
        "discussion_id": "2063210501",
        "commented_code": "@@ -135,6 +138,9 @@ AnnotationsTransformerBuildItem beanTransformer(\n                     .map(AnnotationInstance::name)\n                     .collect(Collectors.toSet()));\n         }\n+        for (DotName scope : stereotypeScopes.keySet()) {\n+            customScopeBuildProducer.produce(new CustomScopeBuildItem(scope));",
        "comment_created_at": "2025-04-28T08:50:59+00:00",
        "comment_author": "mkouba",
        "comment_body": "`CustomScopeBuildItem` should only be produced for custom scopes; which isn't the case here, or?\r\n\r\n@ozangunalp Why exactly do we need this?",
        "pr_file_module": null
      },
      {
        "comment_id": "2063229132",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47565,
        "pr_file": "extensions/spring-di/deployment/src/main/java/io/quarkus/spring/di/deployment/SpringDIProcessor.java",
        "discussion_id": "2063210501",
        "commented_code": "@@ -135,6 +138,9 @@ AnnotationsTransformerBuildItem beanTransformer(\n                     .map(AnnotationInstance::name)\n                     .collect(Collectors.toSet()));\n         }\n+        for (DotName scope : stereotypeScopes.keySet()) {\n+            customScopeBuildProducer.produce(new CustomScopeBuildItem(scope));",
        "comment_created_at": "2025-04-28T08:59:59+00:00",
        "comment_author": "ozangunalp",
        "comment_body": "AFAICT the Spring DI extension is adding CDI scope annotations to classes where these Spring annotations are present. \r\n\r\nSo when it comes to other extensions adding default scope to classes containing some annotations (RM adding Dependent to classes containing Incoming/Outgoing, grpc adding Singleton to classes containing GrpcService, etc.) they can check whether custom scope is already present on the class. \r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2063264456",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47565,
        "pr_file": "extensions/spring-di/deployment/src/main/java/io/quarkus/spring/di/deployment/SpringDIProcessor.java",
        "discussion_id": "2063210501",
        "commented_code": "@@ -135,6 +138,9 @@ AnnotationsTransformerBuildItem beanTransformer(\n                     .map(AnnotationInstance::name)\n                     .collect(Collectors.toSet()));\n         }\n+        for (DotName scope : stereotypeScopes.keySet()) {\n+            customScopeBuildProducer.produce(new CustomScopeBuildItem(scope));",
        "comment_created_at": "2025-04-28T09:20:30+00:00",
        "comment_author": "mkouba",
        "comment_body": "I see. So the correct solution for multiple extensions trying to add an \"auto\" scope is to \"prioritize\", i.e. only one extension can win ;-).\r\n\r\nIn this particular case, I guess that Spring DI should win because of the `org.springframework.stereotype.Service` annotation used.\r\n\r\nTherefore, I'd recommend to (1) rewrite the [`SmallRyeReactiveMessagingProcessor#transformBeanScope()`](https://github.com/quarkusio/quarkus/blob/main/extensions/smallrye-reactive-messaging/deployment/src/main/java/io/quarkus/smallrye/reactivemessaging/deployment/SmallRyeReactiveMessagingProcessor.java#L128-L160) to produce a transformation with lower priority (Spring DI is using the default priority of `1000`). An idiomatic approach for an annotation transformer that merely adds a scope is to use the [`AutoAddScopeBuildItem`](https://quarkus.io/guides/cdi-integration#reason-2-class-is-discovered-but-has-no-bean-defining-annotation); it handles most of the tricky parts automatically (such as declared scope annotations). \r\n\r\nSomething like:\r\n```java\r\n@BuildStep\r\nAutoAddScopeBuildItem autoAddScope() {\r\n   return AutoAddScopeBuildItem.builder()\r\n      .containsAnnotations(INCOMING, OUTGOING, CHANNEL) \r\n      .defaultScope(BuiltinScope.DEPENDENT)\r\n      .build();\r\n}\r\n```\r\nHowever, the `AutoAddScopeBuildItem` transformer has the priority `2000` so we need to (2) modify the priority of the Spring DI's transformer as well. Or use a custom annotation transformer with lower priority instead of  `AutoAddScopeBuildItem`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2063380573",
    "pr_number": 47565,
    "pr_file": "extensions/smallrye-reactive-messaging/deployment/src/main/java/io/quarkus/smallrye/reactivemessaging/deployment/SmallRyeReactiveMessagingProcessor.java",
    "created_at": "2025-04-28T10:30:57+00:00",
    "commented_code": "return kind == org.jboss.jandex.AnnotationTarget.Kind.CLASS;\n             }\n \n+            @Override\n+            public int priority() {\n+                return 500;",
    "repo_full_name": "quarkusio/quarkus",
    "discussion_comments": [
      {
        "comment_id": "2063380573",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47565,
        "pr_file": "extensions/smallrye-reactive-messaging/deployment/src/main/java/io/quarkus/smallrye/reactivemessaging/deployment/SmallRyeReactiveMessagingProcessor.java",
        "discussion_id": "2063380573",
        "commented_code": "@@ -134,12 +135,17 @@ public boolean appliesTo(AnnotationTarget.Kind kind) {\n                 return kind == org.jboss.jandex.AnnotationTarget.Kind.CLASS;\n             }\n \n+            @Override\n+            public int priority() {\n+                return 500;",
        "comment_created_at": "2025-04-28T10:30:57+00:00",
        "comment_author": "mkouba",
        "comment_body": "It might make sense to add a comment that the value is `500` because the Spring DI's annotation transformer has the default priority of value `1000` and we want it to take precedence?\r\n\r\nAlso I would squash the changes, i.e. remove the first commit completely...",
        "pr_file_module": null
      },
      {
        "comment_id": "2063406463",
        "repo_full_name": "quarkusio/quarkus",
        "pr_number": 47565,
        "pr_file": "extensions/smallrye-reactive-messaging/deployment/src/main/java/io/quarkus/smallrye/reactivemessaging/deployment/SmallRyeReactiveMessagingProcessor.java",
        "discussion_id": "2063380573",
        "commented_code": "@@ -134,12 +135,17 @@ public boolean appliesTo(AnnotationTarget.Kind kind) {\n                 return kind == org.jboss.jandex.AnnotationTarget.Kind.CLASS;\n             }\n \n+            @Override\n+            public int priority() {\n+                return 500;",
        "comment_created_at": "2025-04-28T10:48:27+00:00",
        "comment_author": "ozangunalp",
        "comment_body": "Yes, I pushed the change to run the CI. Squasing now.",
        "pr_file_module": null
      }
    ]
  }
]