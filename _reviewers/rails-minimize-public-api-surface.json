[
  {
    "discussion_id": "1909420659",
    "pr_number": 54149,
    "pr_file": "activerecord/lib/active_record/associations/association.rb",
    "created_at": "2025-01-09T20:53:21+00:00",
    "commented_code": "self unless target.nil?\n      end\n\n      # Has the \\target been already \\loaded?\n      # Has the +target+ been already loaded?\n      def loaded?",
    "repo_full_name": "rails/rails",
    "discussion_comments": [
      {
        "comment_id": "1909420659",
        "repo_full_name": "rails/rails",
        "pr_number": 54149,
        "pr_file": "activerecord/lib/active_record/associations/association.rb",
        "discussion_id": "1909420659",
        "commented_code": "@@ -77,13 +101,13 @@ def reload(force = false)\n         self unless target.nil?\n       end\n \n-      # Has the \\target been already \\loaded?\n+      # Has the +target+ been already loaded?\n       def loaded?",
        "comment_created_at": "2025-01-09T20:53:21+00:00",
        "comment_author": "p8",
        "comment_body": "Should this be nodoc as well?\r\n```suggestion\r\n      def loaded? # :nodoc:\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1909424411",
        "repo_full_name": "rails/rails",
        "pr_number": 54149,
        "pr_file": "activerecord/lib/active_record/associations/association.rb",
        "discussion_id": "1909420659",
        "commented_code": "@@ -77,13 +101,13 @@ def reload(force = false)\n         self unless target.nil?\n       end\n \n-      # Has the \\target been already \\loaded?\n+      # Has the +target+ been already loaded?\n       def loaded?",
        "comment_created_at": "2025-01-09T20:56:59+00:00",
        "comment_author": "p8",
        "comment_body": "Same thing applies to `stale_target?`, `scope`, `strict_loading`, etc.",
        "pr_file_module": null
      },
      {
        "comment_id": "1909725966",
        "repo_full_name": "rails/rails",
        "pr_number": 54149,
        "pr_file": "activerecord/lib/active_record/associations/association.rb",
        "discussion_id": "1909420659",
        "commented_code": "@@ -77,13 +101,13 @@ def reload(force = false)\n         self unless target.nil?\n       end\n \n-      # Has the \\target been already \\loaded?\n+      # Has the +target+ been already loaded?\n       def loaded?",
        "comment_created_at": "2025-01-10T02:55:45+00:00",
        "comment_author": "zzak",
        "comment_body": "The idea here was to keep a small set of methods public which I felt were useful, and mostly the read-only ones except strict_loading.\r\n\r\nThat's why like `owner=` is not public.",
        "pr_file_module": null
      },
      {
        "comment_id": "1909851472",
        "repo_full_name": "rails/rails",
        "pr_number": 54149,
        "pr_file": "activerecord/lib/active_record/associations/association.rb",
        "discussion_id": "1909420659",
        "commented_code": "@@ -77,13 +101,13 @@ def reload(force = false)\n         self unless target.nil?\n       end\n \n-      # Has the \\target been already \\loaded?\n+      # Has the +target+ been already loaded?\n       def loaded?",
        "comment_created_at": "2025-01-10T05:33:04+00:00",
        "comment_author": "p8",
        "comment_body": "That's true. You probably never want to set the owner yourself.\r\n\r\n`set_strict_loading` seems an internal method though.\r\nWe already have a [public API](https://edgeguides.rubyonrails.org/active_record_querying.html#strict-loading) for setting strict loading.",
        "pr_file_module": null
      },
      {
        "comment_id": "1910156740",
        "repo_full_name": "rails/rails",
        "pr_number": 54149,
        "pr_file": "activerecord/lib/active_record/associations/association.rb",
        "discussion_id": "1909420659",
        "commented_code": "@@ -77,13 +101,13 @@ def reload(force = false)\n         self unless target.nil?\n       end\n \n-      # Has the \\target been already \\loaded?\n+      # Has the +target+ been already loaded?\n       def loaded?",
        "comment_created_at": "2025-01-10T10:22:12+00:00",
        "comment_author": "zzak",
        "comment_body": "I think `nodoc`ing methods that we aren't certain people are using,  especially writers, is a good idea.\r\n\r\nHere's the current list now:\r\n\r\n- `owner`\r\n- `reflection`\r\n- [collection?](https://zzak-public-association-api.rails-docs-preview.pages.dev/api/classes/ActiveRecord/Associations/Association.html#method-i-collection-3F)\r\n- [create](https://zzak-public-association-api.rails-docs-preview.pages.dev/api/classes/ActiveRecord/Associations/Association.html#method-i-create)\r\n- [create!](https://zzak-public-association-api.rails-docs-preview.pages.dev/api/classes/ActiveRecord/Associations/Association.html#method-i-create-21)\r\n- [extensions](https://zzak-public-association-api.rails-docs-preview.pages.dev/api/classes/ActiveRecord/Associations/Association.html#method-i-extensions)\r\n- [klass](https://zzak-public-association-api.rails-docs-preview.pages.dev/api/classes/ActiveRecord/Associations/Association.html#method-i-klass)\r\n- [load_target](https://zzak-public-association-api.rails-docs-preview.pages.dev/api/classes/ActiveRecord/Associations/Association.html#method-i-load_target)\r\n- [loaded?](https://zzak-public-association-api.rails-docs-preview.pages.dev/api/classes/ActiveRecord/Associations/Association.html#method-i-loaded-3F)\r\n- [reload](https://zzak-public-association-api.rails-docs-preview.pages.dev/api/classes/ActiveRecord/Associations/Association.html#method-i-reload)\r\n- [scope](https://zzak-public-association-api.rails-docs-preview.pages.dev/api/classes/ActiveRecord/Associations/Association.html#method-i-scope)\r\n- [stale_target?](https://zzak-public-association-api.rails-docs-preview.pages.dev/api/classes/ActiveRecord/Associations/Association.html#method-i-stale_target-3F)\r\n- [target](https://zzak-public-association-api.rails-docs-preview.pages.dev/api/classes/ActiveRecord/Associations/Association.html#method-i-target)\r\n\r\nThe original request was to make `owner`, `relection` and `target` public, so this might be more than necessary, happy to trim it down.",
        "pr_file_module": null
      },
      {
        "comment_id": "1913143645",
        "repo_full_name": "rails/rails",
        "pr_number": 54149,
        "pr_file": "activerecord/lib/active_record/associations/association.rb",
        "discussion_id": "1909420659",
        "commented_code": "@@ -77,13 +101,13 @@ def reload(force = false)\n         self unless target.nil?\n       end\n \n-      # Has the \\target been already \\loaded?\n+      # Has the +target+ been already loaded?\n       def loaded?",
        "comment_created_at": "2025-01-13T12:49:51+00:00",
        "comment_author": "p8",
        "comment_body": "I would reduce this to the methods we know we want to make public for now.\r\nWe can always add methods, but removing methods requires a deprecation cycle.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1972166561",
    "pr_number": 54512,
    "pr_file": "activesupport/lib/active_support/error_reporter.rb",
    "created_at": "2025-02-26T18:46:58+00:00",
    "commented_code": "DEFAULT_SOURCE = \"application\"\n    DEFAULT_RESCUE = [StandardError].freeze\n\n    attr_accessor :logger, :debug_mode\n    attr_accessor :logger, :debug_mode, :context_middlewares",
    "repo_full_name": "rails/rails",
    "discussion_comments": [
      {
        "comment_id": "1972166561",
        "repo_full_name": "rails/rails",
        "pr_number": 54512,
        "pr_file": "activesupport/lib/active_support/error_reporter.rb",
        "discussion_id": "1972166561",
        "commented_code": "@@ -28,14 +28,15 @@ class ErrorReporter\n     DEFAULT_SOURCE = \"application\"\n     DEFAULT_RESCUE = [StandardError].freeze\n \n-    attr_accessor :logger, :debug_mode\n+    attr_accessor :logger, :debug_mode, :context_middlewares",
        "comment_created_at": "2025-02-26T18:46:58+00:00",
        "comment_author": "byroot",
        "comment_body": "I think we'd rather expose a `add_middleware` method or something like that, and that should be enough as a public API.",
        "pr_file_module": null
      },
      {
        "comment_id": "1972179657",
        "repo_full_name": "rails/rails",
        "pr_number": 54512,
        "pr_file": "activesupport/lib/active_support/error_reporter.rb",
        "discussion_id": "1972166561",
        "commented_code": "@@ -28,14 +28,15 @@ class ErrorReporter\n     DEFAULT_SOURCE = \"application\"\n     DEFAULT_RESCUE = [StandardError].freeze\n \n-    attr_accessor :logger, :debug_mode\n+    attr_accessor :logger, :debug_mode, :context_middlewares",
        "comment_created_at": "2025-02-26T18:55:14+00:00",
        "comment_author": "dersam",
        "comment_body": "Done. I moved the documentation from the inner class to `add_middleware` since that's the main point of interaction.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1605522491",
    "pr_number": 51738,
    "pr_file": "activerecord/lib/active_record/associations/builder/belongs_to.rb",
    "created_at": "2024-05-17T20:34:48+00:00",
    "commented_code": "required = !reflection.options[:optional]\n      end\n\n      case reflection.options[:polymorphic]\n      when Array, String, Symbol",
    "repo_full_name": "rails/rails",
    "discussion_comments": [
      {
        "comment_id": "1605522491",
        "repo_full_name": "rails/rails",
        "pr_number": 51738,
        "pr_file": "activerecord/lib/active_record/associations/builder/belongs_to.rb",
        "discussion_id": "1605522491",
        "commented_code": "@@ -121,6 +121,13 @@ def self.define_validations(model, reflection)\n         required = !reflection.options[:optional]\n       end\n \n+      case reflection.options[:polymorphic]\n+      when Array, String, Symbol",
        "comment_created_at": "2024-05-17T20:34:48+00:00",
        "comment_author": "rafaelfranca",
        "comment_body": "Should we accept String and Symbol? If there is only one possible value people should just pass an array with one element",
        "pr_file_module": null
      },
      {
        "comment_id": "1605688670",
        "repo_full_name": "rails/rails",
        "pr_number": 51738,
        "pr_file": "activerecord/lib/active_record/associations/builder/belongs_to.rb",
        "discussion_id": "1605522491",
        "commented_code": "@@ -121,6 +121,13 @@ def self.define_validations(model, reflection)\n         required = !reflection.options[:optional]\n       end\n \n+      case reflection.options[:polymorphic]\n+      when Array, String, Symbol",
        "comment_created_at": "2024-05-18T06:51:26+00:00",
        "comment_author": "natematykiewicz",
        "comment_body": "Are you thinking we simply support arrays of strings? I was trying to be flexible, but only supporting an array of strings is certainly easier to document and explain.",
        "pr_file_module": null
      },
      {
        "comment_id": "1605688860",
        "repo_full_name": "rails/rails",
        "pr_number": 51738,
        "pr_file": "activerecord/lib/active_record/associations/builder/belongs_to.rb",
        "discussion_id": "1605522491",
        "commented_code": "@@ -121,6 +121,13 @@ def self.define_validations(model, reflection)\n         required = !reflection.options[:optional]\n       end\n \n+      case reflection.options[:polymorphic]\n+      when Array, String, Symbol",
        "comment_created_at": "2024-05-18T06:52:54+00:00",
        "comment_author": "natematykiewicz",
        "comment_body": "Or are you saying I just support an array, and then map the values to string still (which would allow an array of strings/symbols)?",
        "pr_file_module": null
      },
      {
        "comment_id": "1605799257",
        "repo_full_name": "rails/rails",
        "pr_number": 51738,
        "pr_file": "activerecord/lib/active_record/associations/builder/belongs_to.rb",
        "discussion_id": "1605522491",
        "commented_code": "@@ -121,6 +121,13 @@ def self.define_validations(model, reflection)\n         required = !reflection.options[:optional]\n       end\n \n+      case reflection.options[:polymorphic]\n+      when Array, String, Symbol",
        "comment_created_at": "2024-05-18T14:34:18+00:00",
        "comment_author": "flavorjones",
        "comment_body": "I think Rafael is suggesting the latter: just support `Array[String|Symbol]` and not support passing a single string or symbol.",
        "pr_file_module": null
      },
      {
        "comment_id": "1605945551",
        "repo_full_name": "rails/rails",
        "pr_number": 51738,
        "pr_file": "activerecord/lib/active_record/associations/builder/belongs_to.rb",
        "discussion_id": "1605522491",
        "commented_code": "@@ -121,6 +121,13 @@ def self.define_validations(model, reflection)\n         required = !reflection.options[:optional]\n       end\n \n+      case reflection.options[:polymorphic]\n+      when Array, String, Symbol",
        "comment_created_at": "2024-05-19T04:50:31+00:00",
        "comment_author": "natematykiewicz",
        "comment_body": "I've made the changes, but I'm not sure what to do about the changelog. I see @rafaelfranca changed the milestone to 8.0.0. So I need to rebase this to main's recently wiped changelog instead of 7.2.0's changelog?",
        "pr_file_module": null
      },
      {
        "comment_id": "1606082429",
        "repo_full_name": "rails/rails",
        "pr_number": 51738,
        "pr_file": "activerecord/lib/active_record/associations/builder/belongs_to.rb",
        "discussion_id": "1605522491",
        "commented_code": "@@ -121,6 +121,13 @@ def self.define_validations(model, reflection)\n         required = !reflection.options[:optional]\n       end\n \n+      case reflection.options[:polymorphic]\n+      when Array, String, Symbol",
        "comment_created_at": "2024-05-19T18:36:09+00:00",
        "comment_author": "flavorjones",
        "comment_body": "@natematykiewicz Yes, please do add it to the new (empty or nearly-empty) CHANGELOG file, this would now land in 8.0.",
        "pr_file_module": null
      },
      {
        "comment_id": "1606939704",
        "repo_full_name": "rails/rails",
        "pr_number": 51738,
        "pr_file": "activerecord/lib/active_record/associations/builder/belongs_to.rb",
        "discussion_id": "1605522491",
        "commented_code": "@@ -121,6 +121,13 @@ def self.define_validations(model, reflection)\n         required = !reflection.options[:optional]\n       end\n \n+      case reflection.options[:polymorphic]\n+      when Array, String, Symbol",
        "comment_created_at": "2024-05-20T15:37:31+00:00",
        "comment_author": "natematykiewicz",
        "comment_body": "Done @flavorjones!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1486219093",
    "pr_number": 51045,
    "pr_file": "activerecord/lib/active_record/relation/query_methods.rb",
    "created_at": "2024-02-12T13:58:20+00:00",
    "commented_code": "# Like #distinct, but modifies relation in place.\n    def distinct!(value = true) # :nodoc:\n      unless value == true || value == false",
    "repo_full_name": "rails/rails",
    "discussion_comments": [
      {
        "comment_id": "1486219093",
        "repo_full_name": "rails/rails",
        "pr_number": 51045,
        "pr_file": "activerecord/lib/active_record/relation/query_methods.rb",
        "discussion_id": "1486219093",
        "commented_code": "@@ -1312,6 +1312,10 @@ def distinct(value = true)\n \n     # Like #distinct, but modifies relation in place.\n     def distinct!(value = true) # :nodoc:\n+      unless value == true || value == false",
        "comment_created_at": "2024-02-12T13:58:20+00:00",
        "comment_author": "eileencodes",
        "comment_body": "The deprecation should be in the public method, not the private one. Apps shouldn't call `distinct!` as it's `nodoc`'d.\r\n\r\nThat said, I'm not convinced this is worth changing. Rails and Ruby are designed to be truthy and falsey. Even if we validate this one, you're still going to have to explain to juniors or anyone new to the language what truthy/falsey means. Also in 99% of cases, anyone calling `distinct` is passing no value at all.\r\n\r\nI appreciate you sending a PR, but I'm personally against making this change. Not sure if anyone else on Core feels strongly in favor.",
        "pr_file_module": null
      },
      {
        "comment_id": "1487314153",
        "repo_full_name": "rails/rails",
        "pr_number": 51045,
        "pr_file": "activerecord/lib/active_record/relation/query_methods.rb",
        "discussion_id": "1486219093",
        "commented_code": "@@ -1312,6 +1312,10 @@ def distinct(value = true)\n \n     # Like #distinct, but modifies relation in place.\n     def distinct!(value = true) # :nodoc:\n+      unless value == true || value == false",
        "comment_created_at": "2024-02-13T07:08:08+00:00",
        "comment_author": "ghiculescu",
        "comment_body": "The problem with `distinct` is that in SQL, `distinct` takes an argument which is the column you want to unique on (`select distinct name from users`). But in Rails it's different: `User.select(:name).distinct` is fine; `User.distinct(:name)` is wrong.\r\n\r\nIt's not surprising that (not just junior) developers forget this difference. If you agree that the Rails API is confusing, then I think it's worth doing what we can to make it less confusing.\r\n\r\n> Rails and Ruby are designed to be truthy and falsey.\r\n\r\nI agree with this in general, but do you think there's valid exceptions (and then do you think this is one of them)?\r\n\r\nhttps://github.com/rails/rails/pull/45229 is another example where technically any truthy argument works, but in practice there's no sensible use case for passing a value other than `true` or `false`.\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1487326708",
        "repo_full_name": "rails/rails",
        "pr_number": 51045,
        "pr_file": "activerecord/lib/active_record/relation/query_methods.rb",
        "discussion_id": "1486219093",
        "commented_code": "@@ -1312,6 +1312,10 @@ def distinct(value = true)\n \n     # Like #distinct, but modifies relation in place.\n     def distinct!(value = true) # :nodoc:\n+      unless value == true || value == false",
        "comment_created_at": "2024-02-13T07:21:06+00:00",
        "comment_author": "joshuay03",
        "comment_body": "> The deprecation should be in the public method, not the private one. Apps shouldn't call `distinct!` as it's `nodoc`'d.\r\n\r\nI was originally raising an `ArgumentError` and [questioned why both shouldn't be consistent](https://github.com/rails/rails/pull/51045#discussion_r1485400123), since the private method is utilised by the public method and is tested (to be specific, it had a test that passes in a non-boolean argument).\r\n\r\nI left the check where it was when I updated to warn of a deprecation instead so that it's easier for whomever swaps it for a raise in 7.1.3 to just update the one line, which will raise an error in both methods as I had it before.\r\n\r\nI'm happy to move it to just the public method if we also don't want the private method to raise in 7.1.3.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2121849843",
    "pr_number": 55127,
    "pr_file": "activejob/lib/active_job/continuable.rb",
    "created_at": "2025-06-02T18:16:36+00:00",
    "commented_code": "# frozen_string_literal: true\n\nmodule ActiveJob\n  # = Active Job Continuable\n  #\n  # Mix ActiveJob::Continuable into your job to enable continuations.\n  #\n  # See +ActiveJob::Continuation+ for usage. # The Continuable module provides the ability to track the progress of your jobs,\n  # and continue from where they left off if interrupted.\n  #\n  module Continuable\n    extend ActiveSupport::Concern\n\n    CONTINUATION_KEY = \"continuation\"\n\n    included do\n      retry_on Continuation::Interrupt, attempts: :unlimited\n      retry_on Continuation::AfterAdvancingError, attempts: :unlimited\n\n      around_perform :continue\n    end\n\n    def step(step_name, start: nil, &block)\n      continuation.step(step_name, start: start) do |step|\n        if block_given?\n          block.call(step)\n        else\n          step_method = method(step_name)\n\n          raise ArgumentError, \"Step method '#{step_name}' must accept 0 or 1 arguments\" if step_method.arity > 1\n\n          if step_method.parameters.any? { |type, name| type == :key || type == :keyreq }\n            raise ArgumentError, \"Step method '#{step_name}' must not accept keyword arguments\"\n          end\n\n          step_method.arity == 0 ? step_method.call : step_method.call(step)",
    "repo_full_name": "rails/rails",
    "discussion_comments": [
      {
        "comment_id": "2121849843",
        "repo_full_name": "rails/rails",
        "pr_number": 55127,
        "pr_file": "activejob/lib/active_job/continuable.rb",
        "discussion_id": "2121849843",
        "commented_code": "@@ -0,0 +1,59 @@\n+# frozen_string_literal: true\n+\n+module ActiveJob\n+  # = Active Job Continuable\n+  #\n+  # Mix ActiveJob::Continuable into your job to enable continuations.\n+  #\n+  # See +ActiveJob::Continuation+ for usage. # The Continuable module provides the ability to track the progress of your jobs,\n+  # and continue from where they left off if interrupted.\n+  #\n+  module Continuable\n+    extend ActiveSupport::Concern\n+\n+    CONTINUATION_KEY = \"continuation\"\n+\n+    included do\n+      retry_on Continuation::Interrupt, attempts: :unlimited\n+      retry_on Continuation::AfterAdvancingError, attempts: :unlimited\n+\n+      around_perform :continue\n+    end\n+\n+    def step(step_name, start: nil, &block)\n+      continuation.step(step_name, start: start) do |step|\n+        if block_given?\n+          block.call(step)\n+        else\n+          step_method = method(step_name)\n+\n+          raise ArgumentError, \"Step method '#{step_name}' must accept 0 or 1 arguments\" if step_method.arity > 1\n+\n+          if step_method.parameters.any? { |type, name| type == :key || type == :keyreq }\n+            raise ArgumentError, \"Step method '#{step_name}' must not accept keyword arguments\"\n+          end\n+\n+          step_method.arity == 0 ? step_method.call : step_method.call(step)",
        "comment_created_at": "2025-06-02T18:16:36+00:00",
        "comment_author": "byroot",
        "comment_body": "Is making the argument optional really this necessary? Allocating a `Method` instance and then its parameters isn't cheap.\r\n\r\nIt's actually very expensive once you compare it to a simple method call. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2123014138",
        "repo_full_name": "rails/rails",
        "pr_number": 55127,
        "pr_file": "activejob/lib/active_job/continuable.rb",
        "discussion_id": "2121849843",
        "commented_code": "@@ -0,0 +1,59 @@\n+# frozen_string_literal: true\n+\n+module ActiveJob\n+  # = Active Job Continuable\n+  #\n+  # Mix ActiveJob::Continuable into your job to enable continuations.\n+  #\n+  # See +ActiveJob::Continuation+ for usage. # The Continuable module provides the ability to track the progress of your jobs,\n+  # and continue from where they left off if interrupted.\n+  #\n+  module Continuable\n+    extend ActiveSupport::Concern\n+\n+    CONTINUATION_KEY = \"continuation\"\n+\n+    included do\n+      retry_on Continuation::Interrupt, attempts: :unlimited\n+      retry_on Continuation::AfterAdvancingError, attempts: :unlimited\n+\n+      around_perform :continue\n+    end\n+\n+    def step(step_name, start: nil, &block)\n+      continuation.step(step_name, start: start) do |step|\n+        if block_given?\n+          block.call(step)\n+        else\n+          step_method = method(step_name)\n+\n+          raise ArgumentError, \"Step method '#{step_name}' must accept 0 or 1 arguments\" if step_method.arity > 1\n+\n+          if step_method.parameters.any? { |type, name| type == :key || type == :keyreq }\n+            raise ArgumentError, \"Step method '#{step_name}' must not accept keyword arguments\"\n+          end\n+\n+          step_method.arity == 0 ? step_method.call : step_method.call(step)",
        "comment_created_at": "2025-06-03T07:45:20+00:00",
        "comment_author": "djmb",
        "comment_body": "Given that a job that is using continuations would be expected to be long running and to have a reasonably small number of steps, I wouldn't expect the cost of this to be significant.",
        "pr_file_module": null
      },
      {
        "comment_id": "2123364649",
        "repo_full_name": "rails/rails",
        "pr_number": 55127,
        "pr_file": "activejob/lib/active_job/continuable.rb",
        "discussion_id": "2121849843",
        "commented_code": "@@ -0,0 +1,59 @@\n+# frozen_string_literal: true\n+\n+module ActiveJob\n+  # = Active Job Continuable\n+  #\n+  # Mix ActiveJob::Continuable into your job to enable continuations.\n+  #\n+  # See +ActiveJob::Continuation+ for usage. # The Continuable module provides the ability to track the progress of your jobs,\n+  # and continue from where they left off if interrupted.\n+  #\n+  module Continuable\n+    extend ActiveSupport::Concern\n+\n+    CONTINUATION_KEY = \"continuation\"\n+\n+    included do\n+      retry_on Continuation::Interrupt, attempts: :unlimited\n+      retry_on Continuation::AfterAdvancingError, attempts: :unlimited\n+\n+      around_perform :continue\n+    end\n+\n+    def step(step_name, start: nil, &block)\n+      continuation.step(step_name, start: start) do |step|\n+        if block_given?\n+          block.call(step)\n+        else\n+          step_method = method(step_name)\n+\n+          raise ArgumentError, \"Step method '#{step_name}' must accept 0 or 1 arguments\" if step_method.arity > 1\n+\n+          if step_method.parameters.any? { |type, name| type == :key || type == :keyreq }\n+            raise ArgumentError, \"Step method '#{step_name}' must not accept keyword arguments\"\n+          end\n+\n+          step_method.arity == 0 ? step_method.call : step_method.call(step)",
        "comment_created_at": "2025-06-03T10:13:01+00:00",
        "comment_author": "byroot",
        "comment_body": "Right. This isn't a hill I'm gonna die on, and indeed in this specific case it is probably fine.\r\n\r\nI just tend to question more and more how helpful this type of DSL heavy API design really is. Aside from the performance consideration it makes the code harder to grep for / statically analyze for not a huge gain in term of readability:\r\n\r\ne.g.\r\n```ruby\r\nstep :finalize\r\n```\r\n\r\nIs only marginally nicer than:\r\n\r\n```ruby\r\nstep :finalize { finalize }\r\n```\r\n\r\nBut:\r\n\r\n  - Will be qualified of \"magic\".\r\n  - Will defeat JITs.\r\n  - Will dead code analysis harder.\r\n  - Requires you to know the continuation API well to understand which method is called. It's not immediately obvious to the uninitiated that `step :foo` does call `foo`.\r\n\r\nBut again, if you're set on it, I'm not gonna argue you forever on this.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2123573536",
        "repo_full_name": "rails/rails",
        "pr_number": 55127,
        "pr_file": "activejob/lib/active_job/continuable.rb",
        "discussion_id": "2121849843",
        "commented_code": "@@ -0,0 +1,59 @@\n+# frozen_string_literal: true\n+\n+module ActiveJob\n+  # = Active Job Continuable\n+  #\n+  # Mix ActiveJob::Continuable into your job to enable continuations.\n+  #\n+  # See +ActiveJob::Continuation+ for usage. # The Continuable module provides the ability to track the progress of your jobs,\n+  # and continue from where they left off if interrupted.\n+  #\n+  module Continuable\n+    extend ActiveSupport::Concern\n+\n+    CONTINUATION_KEY = \"continuation\"\n+\n+    included do\n+      retry_on Continuation::Interrupt, attempts: :unlimited\n+      retry_on Continuation::AfterAdvancingError, attempts: :unlimited\n+\n+      around_perform :continue\n+    end\n+\n+    def step(step_name, start: nil, &block)\n+      continuation.step(step_name, start: start) do |step|\n+        if block_given?\n+          block.call(step)\n+        else\n+          step_method = method(step_name)\n+\n+          raise ArgumentError, \"Step method '#{step_name}' must accept 0 or 1 arguments\" if step_method.arity > 1\n+\n+          if step_method.parameters.any? { |type, name| type == :key || type == :keyreq }\n+            raise ArgumentError, \"Step method '#{step_name}' must not accept keyword arguments\"\n+          end\n+\n+          step_method.arity == 0 ? step_method.call : step_method.call(step)",
        "comment_created_at": "2025-06-03T11:48:15+00:00",
        "comment_author": "djmb",
        "comment_body": "I take your points and just allowing the block format will make the implementation and documentation simpler.\r\n\r\nThere's not much in `step :finalize` vs `step :finalize { finalize }`, but when you have say 5 or more steps the repetition of the block format does start to grate a bit.\r\n\r\nWhat do you think @dhh?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1823621864",
    "pr_number": 53505,
    "pr_file": "activesupport/test/broadcast_logger_test.rb",
    "created_at": "2024-10-31T00:19:31+00:00",
    "commented_code": "assert_equal true, @logger.error(\"Hello\")\n    end\n\n    test \"with_level invokes its block one time, even when broadcasting to 2 or more loggers\" do\n      invocations = 0\n      log1 = ::Logger.new(nil)\n      log2 = ::Logger.new(nil)\n\n      logger = BroadcastLogger.new(log1, log2)\n\n      invocations = 0\n      logger.with_level(:info) do\n        invocations += 1\n      end\n\n      assert_equal 1, invocations\n    end\n\n    test \"with_level invokes its block one time, even when broadcasting to zero loggers\" do\n      logger = BroadcastLogger.new()\n\n      invocations = 0\n      logger.with_level(:info) do\n        invocations += 1\n      end\n\n      assert_equal 1, invocations",
    "repo_full_name": "rails/rails",
    "discussion_comments": [
      {
        "comment_id": "1823621864",
        "repo_full_name": "rails/rails",
        "pr_number": 53505,
        "pr_file": "activesupport/test/broadcast_logger_test.rb",
        "discussion_id": "1823621864",
        "commented_code": "@@ -307,6 +307,72 @@ def info(msg, &block)\n       assert_equal true, @logger.error(\"Hello\")\n     end\n \n+    test \"with_level invokes its block one time, even when broadcasting to 2 or more loggers\" do\n+      invocations = 0\n+      log1 = ::Logger.new(nil)\n+      log2 = ::Logger.new(nil)\n+\n+      logger = BroadcastLogger.new(log1, log2)\n+\n+      invocations = 0\n+      logger.with_level(:info) do\n+        invocations += 1\n+      end\n+\n+      assert_equal 1, invocations\n+    end\n+\n+    test \"with_level invokes its block one time, even when broadcasting to zero loggers\" do\n+      logger = BroadcastLogger.new()\n+\n+      invocations = 0\n+      logger.with_level(:info) do\n+        invocations += 1\n+      end\n+\n+      assert_equal 1, invocations",
        "comment_created_at": "2024-10-31T00:19:31+00:00",
        "comment_author": "meagar",
        "comment_body": "On `main` this test fails with:\r\n\r\n```\r\nNoMethodError: undefined method `with_level' for #<ActiveSupport::BroadcastLogger:0x0000000108200720 @broadcasts=[], @progname=\"Broadcast\">\r\n```\r\n\r\nBecause there are no internal broadcasts, and `respond_to_missing?` checks whether at least _one_ logger responds to the method, `BroadcastLogger` stops having a `with_level`method when you take away its last logger, which doesn't seem like a good or intentional API.",
        "pr_file_module": null
      }
    ]
  }
]