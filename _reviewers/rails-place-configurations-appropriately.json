[
  {
    "discussion_id": "2136334180",
    "pr_number": 55176,
    "pr_file": "activerecord/CHANGELOG.md",
    "created_at": "2025-06-09T19:18:51+00:00",
    "commented_code": "*   Add ability to change transaction isolation for all pools within a block.\n\n    If your application needs to change transaction isolation for the duration of a\n    block, use `ActiveRecord::Base.with_transaction_isolation_level {}`. This will change",
    "repo_full_name": "rails/rails",
    "discussion_comments": [
      {
        "comment_id": "2136334180",
        "repo_full_name": "rails/rails",
        "pr_number": 55176,
        "pr_file": "activerecord/CHANGELOG.md",
        "discussion_id": "2136334180",
        "commented_code": "@@ -1,3 +1,28 @@\n+*   Add ability to change transaction isolation for all pools within a block.\n+\n+    If your application needs to change transaction isolation for the duration of a\n+    block, use `ActiveRecord::Base.with_transaction_isolation_level {}`. This will change",
        "comment_created_at": "2025-06-09T19:18:51+00:00",
        "comment_author": "byroot",
        "comment_body": "If this is fully global, perhaps it would be better to define it on `ActiveRecord` rather than `ActiveRecord::Base`.\r\n\r\nThis way it doesn't look like it's a per model or per db_config action.",
        "pr_file_module": null
      },
      {
        "comment_id": "2136617185",
        "repo_full_name": "rails/rails",
        "pr_number": 55176,
        "pr_file": "activerecord/CHANGELOG.md",
        "discussion_id": "2136334180",
        "commented_code": "@@ -1,3 +1,28 @@\n+*   Add ability to change transaction isolation for all pools within a block.\n+\n+    If your application needs to change transaction isolation for the duration of a\n+    block, use `ActiveRecord::Base.with_transaction_isolation_level {}`. This will change",
        "comment_created_at": "2025-06-09T22:46:50+00:00",
        "comment_author": "eileencodes",
        "comment_body": "Good point, I'll move it tomorrow. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1909443107",
    "pr_number": 54066,
    "pr_file": "guides/source/debugging_rails_applications.md",
    "created_at": "2025-01-09T21:17:43+00:00",
    "commented_code": "=> #<Comment id: 2, author: \"1\", body: \"Well, actually...\", article_id: 1, created_at: \"2018-10-19 00:56:10\", updated_at: \"2018-10-19 00:56:10\">\n```\n\nBelow each database statement you can see arrows pointing to the specific source filename (and line number) of the method that resulted in a database call. This can help you identify and address performance problems caused by N+1 queries: single database queries that generates multiple additional queries.\nBelow each database statement you can see arrows pointing to the specific source filename (and line number) of the method that resulted in a database call e.g. `↳ app/models/article.rb:5`.\n\nThis can help you identify and address performance problems caused by N+1 queries: i.e. single database queries that generate multiple additional queries.\n\nVerbose query logs are enabled by default in the development environment logs after Rails 5.2.\nVerbose query logs are [enabled by default](configuring.html#config-active-record-verbose-query-logs) in the development environment logs.\n\nWARNING: We recommend against using this setting in production environments. It relies on Ruby's `Kernel#caller` method which tends to allocate a lot of memory in order to generate stacktraces of method calls. Use query log tags (see below) instead.\n\n### Verbose Enqueue Logs\n\nSimilar to the \"Verbose Query Logs\" above, allows to print source locations of methods that enqueue background jobs.\n\nIt is enabled by default in development. To enable in other environments, add in `application.rb` or any environment initializer:\nVerbose enqueue logs are enabled by default in the development environment logs after Rails 7.1.\n\n```rb\n```ruby\n# config/application.rb",
    "repo_full_name": "rails/rails",
    "discussion_comments": [
      {
        "comment_id": "1909443107",
        "repo_full_name": "rails/rails",
        "pr_number": 54066,
        "pr_file": "guides/source/debugging_rails_applications.md",
        "discussion_id": "1909443107",
        "commented_code": "@@ -232,23 +231,31 @@ irb(main):003:0> Article.pamplemousse\n => #<Comment id: 2, author: \"1\", body: \"Well, actually...\", article_id: 1, created_at: \"2018-10-19 00:56:10\", updated_at: \"2018-10-19 00:56:10\">\n ```\n \n-Below each database statement you can see arrows pointing to the specific source filename (and line number) of the method that resulted in a database call. This can help you identify and address performance problems caused by N+1 queries: single database queries that generates multiple additional queries.\n+Below each database statement you can see arrows pointing to the specific source filename (and line number) of the method that resulted in a database call e.g. `↳ app/models/article.rb:5`.\n+\n+This can help you identify and address performance problems caused by N+1 queries: i.e. single database queries that generate multiple additional queries.\n \n-Verbose query logs are enabled by default in the development environment logs after Rails 5.2.\n+Verbose query logs are [enabled by default](configuring.html#config-active-record-verbose-query-logs) in the development environment logs.\n \n WARNING: We recommend against using this setting in production environments. It relies on Ruby's `Kernel#caller` method which tends to allocate a lot of memory in order to generate stacktraces of method calls. Use query log tags (see below) instead.\n \n ### Verbose Enqueue Logs\n \n Similar to the \"Verbose Query Logs\" above, allows to print source locations of methods that enqueue background jobs.\n \n-It is enabled by default in development. To enable in other environments, add in `application.rb` or any environment initializer:\n+Verbose enqueue logs are enabled by default in the development environment logs after Rails 7.1.\n \n-```rb\n+```ruby\n+# config/application.rb",
        "comment_created_at": "2025-01-09T21:17:43+00:00",
        "comment_author": "p8",
        "comment_body": "If we recommend not enabling it in production, we should probably use an example that only sets it for development?\r\n```suggestion\r\n# config/environments/development.rb\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2020222689",
    "pr_number": 54422,
    "pr_file": "activerecord/CHANGELOG.md",
    "created_at": "2025-03-30T18:20:54+00:00",
    "commented_code": "*   Allow signed ID verifiers to be configurable via `Rails.application.message_verifiers`\n\n    Prior to this change, the primary way to configure signed ID verifiers was\n    to set `signed_id_verifier` on each model class:\n\n      ```ruby\n      Post.signed_id_verifier = ActiveSupport::MessageVerifier.new(...)\n      Comment.signed_id_verifier = ActiveSupport::MessageVerifier.new(...)\n      ```\n\n    And if the developer did not set `signed_id_verifier`, a verifier would be\n    instantiated with a secret derived from `secret_key_base` and the following\n    options:\n\n      ```ruby\n      { digest: \"SHA256\", serializer: JSON, url_safe: true }\n      ```\n\n    Thus it was cumbersome to rotate configuration for all verifiers.\n\n    This change defines a new Rails config: [`config.active_record.use_legacy_signed_id_verifier`][].\n    The default value is `:generate_and_verify`, which preserves the previous\n    behavior. However, when set to `:verify`, signed ID verifiers will use\n    configuration from `Rails.application.message_verifiers` (specifically,\n    `Rails.application.message_verifiers[\"active_record/signed_id\"]`) to\n    generate and verify signed IDs, but will also verify signed IDs using the\n    older configuration.\n\n    To avoid complication, the new behavior only applies when `signed_id_verifier_secret`\n    is not set on a model class, and `signed_id_verifier_secret` is now",
    "repo_full_name": "rails/rails",
    "discussion_comments": [
      {
        "comment_id": "2020222689",
        "repo_full_name": "rails/rails",
        "pr_number": 54422,
        "pr_file": "activerecord/CHANGELOG.md",
        "discussion_id": "2020222689",
        "commented_code": "@@ -1,3 +1,65 @@\n+*   Allow signed ID verifiers to be configurable via `Rails.application.message_verifiers`\n+\n+    Prior to this change, the primary way to configure signed ID verifiers was\n+    to set `signed_id_verifier` on each model class:\n+\n+      ```ruby\n+      Post.signed_id_verifier = ActiveSupport::MessageVerifier.new(...)\n+      Comment.signed_id_verifier = ActiveSupport::MessageVerifier.new(...)\n+      ```\n+\n+    And if the developer did not set `signed_id_verifier`, a verifier would be\n+    instantiated with a secret derived from `secret_key_base` and the following\n+    options:\n+\n+      ```ruby\n+      { digest: \"SHA256\", serializer: JSON, url_safe: true }\n+      ```\n+\n+    Thus it was cumbersome to rotate configuration for all verifiers.\n+\n+    This change defines a new Rails config: [`config.active_record.use_legacy_signed_id_verifier`][].\n+    The default value is `:generate_and_verify`, which preserves the previous\n+    behavior. However, when set to `:verify`, signed ID verifiers will use\n+    configuration from `Rails.application.message_verifiers` (specifically,\n+    `Rails.application.message_verifiers[\"active_record/signed_id\"]`) to\n+    generate and verify signed IDs, but will also verify signed IDs using the\n+    older configuration.\n+\n+    To avoid complication, the new behavior only applies when `signed_id_verifier_secret`\n+    is not set on a model class, and `signed_id_verifier_secret` is now",
        "comment_created_at": "2025-03-30T18:20:54+00:00",
        "comment_author": "AliSepehri",
        "comment_body": "Since it's also possible to set `signed_id_verifier_secret` for `ActiveRecord::Base`, perhaps we could mention \"for ActiveRecord or a specific model class\". wdyt?",
        "pr_file_module": null
      },
      {
        "comment_id": "2029940361",
        "repo_full_name": "rails/rails",
        "pr_number": 54422,
        "pr_file": "activerecord/CHANGELOG.md",
        "discussion_id": "2020222689",
        "commented_code": "@@ -1,3 +1,65 @@\n+*   Allow signed ID verifiers to be configurable via `Rails.application.message_verifiers`\n+\n+    Prior to this change, the primary way to configure signed ID verifiers was\n+    to set `signed_id_verifier` on each model class:\n+\n+      ```ruby\n+      Post.signed_id_verifier = ActiveSupport::MessageVerifier.new(...)\n+      Comment.signed_id_verifier = ActiveSupport::MessageVerifier.new(...)\n+      ```\n+\n+    And if the developer did not set `signed_id_verifier`, a verifier would be\n+    instantiated with a secret derived from `secret_key_base` and the following\n+    options:\n+\n+      ```ruby\n+      { digest: \"SHA256\", serializer: JSON, url_safe: true }\n+      ```\n+\n+    Thus it was cumbersome to rotate configuration for all verifiers.\n+\n+    This change defines a new Rails config: [`config.active_record.use_legacy_signed_id_verifier`][].\n+    The default value is `:generate_and_verify`, which preserves the previous\n+    behavior. However, when set to `:verify`, signed ID verifiers will use\n+    configuration from `Rails.application.message_verifiers` (specifically,\n+    `Rails.application.message_verifiers[\"active_record/signed_id\"]`) to\n+    generate and verify signed IDs, but will also verify signed IDs using the\n+    older configuration.\n+\n+    To avoid complication, the new behavior only applies when `signed_id_verifier_secret`\n+    is not set on a model class, and `signed_id_verifier_secret` is now",
        "comment_created_at": "2025-04-05T18:25:20+00:00",
        "comment_author": "jonathanhefner",
        "comment_body": "Sounds good.  I changed it to:\r\n\r\n  ```diff\r\n  --- a/activerecord/CHANGELOG.md\r\n  +++ b/activerecord/CHANGELOG.md\r\n  @@ -27,9 +27,10 @@\r\n       older configuration.\r\n\r\n       To avoid complication, the new behavior only applies when `signed_id_verifier_secret`\r\n  -    is not set on a model class, and `signed_id_verifier_secret` is now\r\n  -    deprecated. If you are currently setting `signed_id_verifier_secret` on a\r\n  -    model class, set `signed_id_verifier` instead:\r\n  +    is not set on a model class or any of its ancestors. Additionally,\r\n  +    `signed_id_verifier_secret` is now deprecated. If you are currently setting\r\n  +    `signed_id_verifier_secret` on a model class, you can set `signed_id_verifier`\r\n  +    instead:\r\n\r\n         ```ruby\r\n         # BEFORE\r\n  ```\r\n\r\nsince it is affected by any ancestor class (e.g. `ApplicationRecord`).\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2029957880",
        "repo_full_name": "rails/rails",
        "pr_number": 54422,
        "pr_file": "activerecord/CHANGELOG.md",
        "discussion_id": "2020222689",
        "commented_code": "@@ -1,3 +1,65 @@\n+*   Allow signed ID verifiers to be configurable via `Rails.application.message_verifiers`\n+\n+    Prior to this change, the primary way to configure signed ID verifiers was\n+    to set `signed_id_verifier` on each model class:\n+\n+      ```ruby\n+      Post.signed_id_verifier = ActiveSupport::MessageVerifier.new(...)\n+      Comment.signed_id_verifier = ActiveSupport::MessageVerifier.new(...)\n+      ```\n+\n+    And if the developer did not set `signed_id_verifier`, a verifier would be\n+    instantiated with a secret derived from `secret_key_base` and the following\n+    options:\n+\n+      ```ruby\n+      { digest: \"SHA256\", serializer: JSON, url_safe: true }\n+      ```\n+\n+    Thus it was cumbersome to rotate configuration for all verifiers.\n+\n+    This change defines a new Rails config: [`config.active_record.use_legacy_signed_id_verifier`][].\n+    The default value is `:generate_and_verify`, which preserves the previous\n+    behavior. However, when set to `:verify`, signed ID verifiers will use\n+    configuration from `Rails.application.message_verifiers` (specifically,\n+    `Rails.application.message_verifiers[\"active_record/signed_id\"]`) to\n+    generate and verify signed IDs, but will also verify signed IDs using the\n+    older configuration.\n+\n+    To avoid complication, the new behavior only applies when `signed_id_verifier_secret`\n+    is not set on a model class, and `signed_id_verifier_secret` is now",
        "comment_created_at": "2025-04-05T19:57:33+00:00",
        "comment_author": "AliSepehri",
        "comment_body": "👍🏽",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2020185627",
    "pr_number": 53687,
    "pr_file": "guides/source/active_record_postgresql.md",
    "created_at": "2025-03-30T15:34:38+00:00",
    "commented_code": "=> 2 days\n```\n\n### Timestamps\n\n* [Date/Time Types](https://www.postgresql.org/docs/current/datatype-datetime.html)\n\nRails migrations with timestamps store the time a model was created or updated. By default and for legacy reasons, the columns use the `timestamp without time zone` data type.\n\n```ruby\n# db/migrate/20241220144913_create_devices.rb\ncreate_table :post, id: :uuid do |t|\n  t.datetime :published_at\n  # By default, Active Record will set the data type of this column to `timestamp without time zone`.\nend\n```\n\nWhile this works ok, [PostgreSQL best practices](https://wiki.postgresql.org/wiki/Don't_Do_This#Don.27t_use_timestamp_.28without_time_zone.29) recommend that `timestamp with time zone` is used instead for timezone-aware timestamps.\nThis must be configured before it can be used for new migrations.\n\nTo configure `timestamp with time zone` as your new timestamp default data type, place the following configuration in the `config/application.rb` file.\n\n```ruby\n# config/application.rb\nActiveSupport.on_load(:active_record_postgresqladapter) do\n  self.datetime_type = :timestamptz\nend",
    "repo_full_name": "rails/rails",
    "discussion_comments": [
      {
        "comment_id": "2020185627",
        "repo_full_name": "rails/rails",
        "pr_number": 53687,
        "pr_file": "guides/source/active_record_postgresql.md",
        "discussion_id": "2020185627",
        "commented_code": "@@ -516,6 +516,34 @@ irb> event.duration\n => 2 days\n ```\n \n+### Timestamps\n+\n+* [Date/Time Types](https://www.postgresql.org/docs/current/datatype-datetime.html)\n+\n+Rails migrations with timestamps store the time a model was created or updated. By default and for legacy reasons, the columns use the `timestamp without time zone` data type.\n+\n+```ruby\n+# db/migrate/20241220144913_create_devices.rb\n+create_table :post, id: :uuid do |t|\n+  t.datetime :published_at\n+  # By default, Active Record will set the data type of this column to `timestamp without time zone`.\n+end\n+```\n+\n+While this works ok, [PostgreSQL best practices](https://wiki.postgresql.org/wiki/Don't_Do_This#Don.27t_use_timestamp_.28without_time_zone.29) recommend that `timestamp with time zone` is used instead for timezone-aware timestamps.\n+This must be configured before it can be used for new migrations.\n+\n+To configure `timestamp with time zone` as your new timestamp default data type, place the following configuration in the `config/application.rb` file.\n+\n+```ruby\n+# config/application.rb\n+ActiveSupport.on_load(:active_record_postgresqladapter) do\n+  self.datetime_type = :timestamptz\n+end",
        "comment_created_at": "2025-03-30T15:34:38+00:00",
        "comment_author": "skipkayhil",
        "comment_body": "> Should this be inside `config.after_initialize`?\r\n\r\nWhy is that necessary? This block will run whenever the load hook fires, so the location of this code shouldn't matter.\r\n\r\nEdit: original comment was deleted(?) so I've added the quote as context",
        "pr_file_module": null
      },
      {
        "comment_id": "2020325294",
        "repo_full_name": "rails/rails",
        "pr_number": 53687,
        "pr_file": "guides/source/active_record_postgresql.md",
        "discussion_id": "2020185627",
        "commented_code": "@@ -516,6 +516,34 @@ irb> event.duration\n => 2 days\n ```\n \n+### Timestamps\n+\n+* [Date/Time Types](https://www.postgresql.org/docs/current/datatype-datetime.html)\n+\n+Rails migrations with timestamps store the time a model was created or updated. By default and for legacy reasons, the columns use the `timestamp without time zone` data type.\n+\n+```ruby\n+# db/migrate/20241220144913_create_devices.rb\n+create_table :post, id: :uuid do |t|\n+  t.datetime :published_at\n+  # By default, Active Record will set the data type of this column to `timestamp without time zone`.\n+end\n+```\n+\n+While this works ok, [PostgreSQL best practices](https://wiki.postgresql.org/wiki/Don't_Do_This#Don.27t_use_timestamp_.28without_time_zone.29) recommend that `timestamp with time zone` is used instead for timezone-aware timestamps.\n+This must be configured before it can be used for new migrations.\n+\n+To configure `timestamp with time zone` as your new timestamp default data type, place the following configuration in the `config/application.rb` file.\n+\n+```ruby\n+# config/application.rb\n+ActiveSupport.on_load(:active_record_postgresqladapter) do\n+  self.datetime_type = :timestamptz\n+end",
        "comment_created_at": "2025-03-31T01:43:49+00:00",
        "comment_author": "ghiculescu",
        "comment_body": "@skipkayhil is your point that this could live in an intializer instead, that it doesn't have to be in `config/appliation.rb`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2021053710",
        "repo_full_name": "rails/rails",
        "pr_number": 53687,
        "pr_file": "guides/source/active_record_postgresql.md",
        "discussion_id": "2020185627",
        "commented_code": "@@ -516,6 +516,34 @@ irb> event.duration\n => 2 days\n ```\n \n+### Timestamps\n+\n+* [Date/Time Types](https://www.postgresql.org/docs/current/datatype-datetime.html)\n+\n+Rails migrations with timestamps store the time a model was created or updated. By default and for legacy reasons, the columns use the `timestamp without time zone` data type.\n+\n+```ruby\n+# db/migrate/20241220144913_create_devices.rb\n+create_table :post, id: :uuid do |t|\n+  t.datetime :published_at\n+  # By default, Active Record will set the data type of this column to `timestamp without time zone`.\n+end\n+```\n+\n+While this works ok, [PostgreSQL best practices](https://wiki.postgresql.org/wiki/Don't_Do_This#Don.27t_use_timestamp_.28without_time_zone.29) recommend that `timestamp with time zone` is used instead for timezone-aware timestamps.\n+This must be configured before it can be used for new migrations.\n+\n+To configure `timestamp with time zone` as your new timestamp default data type, place the following configuration in the `config/application.rb` file.\n+\n+```ruby\n+# config/application.rb\n+ActiveSupport.on_load(:active_record_postgresqladapter) do\n+  self.datetime_type = :timestamptz\n+end",
        "comment_created_at": "2025-03-31T13:31:09+00:00",
        "comment_author": "PatRogala",
        "comment_body": "can't we just create a initializer?\r\n\r\n```rb\r\nrequire \"active_record/connection_adapters/postgresql_adapter.rb\"\r\n\r\nActiveRecord::ConnectionAdapters::PostgreSQLAdapter.datetime_type = :timestamptz\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2021068852",
        "repo_full_name": "rails/rails",
        "pr_number": 53687,
        "pr_file": "guides/source/active_record_postgresql.md",
        "discussion_id": "2020185627",
        "commented_code": "@@ -516,6 +516,34 @@ irb> event.duration\n => 2 days\n ```\n \n+### Timestamps\n+\n+* [Date/Time Types](https://www.postgresql.org/docs/current/datatype-datetime.html)\n+\n+Rails migrations with timestamps store the time a model was created or updated. By default and for legacy reasons, the columns use the `timestamp without time zone` data type.\n+\n+```ruby\n+# db/migrate/20241220144913_create_devices.rb\n+create_table :post, id: :uuid do |t|\n+  t.datetime :published_at\n+  # By default, Active Record will set the data type of this column to `timestamp without time zone`.\n+end\n+```\n+\n+While this works ok, [PostgreSQL best practices](https://wiki.postgresql.org/wiki/Don't_Do_This#Don.27t_use_timestamp_.28without_time_zone.29) recommend that `timestamp with time zone` is used instead for timezone-aware timestamps.\n+This must be configured before it can be used for new migrations.\n+\n+To configure `timestamp with time zone` as your new timestamp default data type, place the following configuration in the `config/application.rb` file.\n+\n+```ruby\n+# config/application.rb\n+ActiveSupport.on_load(:active_record_postgresqladapter) do\n+  self.datetime_type = :timestamptz\n+end",
        "comment_created_at": "2025-03-31T13:40:48+00:00",
        "comment_author": "Edouard-chin",
        "comment_body": "You can add the config in an initializer if you want to (anything in the `application.rb` can be set in an initializer), but I don't see a good reason to add this in the documentation. \r\n\r\nI'd not recommend adding `require \"active_record/connection_adapters/postgresql_adapter.rb\"` and instead rely on a lazy load hook as described in the doc, otherwise this may conflict with the Rails initialization process (either now or in the future).",
        "pr_file_module": null
      },
      {
        "comment_id": "2021155284",
        "repo_full_name": "rails/rails",
        "pr_number": 53687,
        "pr_file": "guides/source/active_record_postgresql.md",
        "discussion_id": "2020185627",
        "commented_code": "@@ -516,6 +516,34 @@ irb> event.duration\n => 2 days\n ```\n \n+### Timestamps\n+\n+* [Date/Time Types](https://www.postgresql.org/docs/current/datatype-datetime.html)\n+\n+Rails migrations with timestamps store the time a model was created or updated. By default and for legacy reasons, the columns use the `timestamp without time zone` data type.\n+\n+```ruby\n+# db/migrate/20241220144913_create_devices.rb\n+create_table :post, id: :uuid do |t|\n+  t.datetime :published_at\n+  # By default, Active Record will set the data type of this column to `timestamp without time zone`.\n+end\n+```\n+\n+While this works ok, [PostgreSQL best practices](https://wiki.postgresql.org/wiki/Don't_Do_This#Don.27t_use_timestamp_.28without_time_zone.29) recommend that `timestamp with time zone` is used instead for timezone-aware timestamps.\n+This must be configured before it can be used for new migrations.\n+\n+To configure `timestamp with time zone` as your new timestamp default data type, place the following configuration in the `config/application.rb` file.\n+\n+```ruby\n+# config/application.rb\n+ActiveSupport.on_load(:active_record_postgresqladapter) do\n+  self.datetime_type = :timestamptz\n+end",
        "comment_created_at": "2025-03-31T14:23:46+00:00",
        "comment_author": "skipkayhil",
        "comment_body": "Wow, this thread got busy 😅 \r\n\r\n> @skipkayhil is your point that this could live in an intializer instead, that it doesn't have to be in config/appliation.rb?\r\n\r\nNo, nothing wrong with the code here. I was responding to (now deleted?) comment asking if this example should be in an `config.after_initialize` hook.",
        "pr_file_module": null
      },
      {
        "comment_id": "2021573000",
        "repo_full_name": "rails/rails",
        "pr_number": 53687,
        "pr_file": "guides/source/active_record_postgresql.md",
        "discussion_id": "2020185627",
        "commented_code": "@@ -516,6 +516,34 @@ irb> event.duration\n => 2 days\n ```\n \n+### Timestamps\n+\n+* [Date/Time Types](https://www.postgresql.org/docs/current/datatype-datetime.html)\n+\n+Rails migrations with timestamps store the time a model was created or updated. By default and for legacy reasons, the columns use the `timestamp without time zone` data type.\n+\n+```ruby\n+# db/migrate/20241220144913_create_devices.rb\n+create_table :post, id: :uuid do |t|\n+  t.datetime :published_at\n+  # By default, Active Record will set the data type of this column to `timestamp without time zone`.\n+end\n+```\n+\n+While this works ok, [PostgreSQL best practices](https://wiki.postgresql.org/wiki/Don't_Do_This#Don.27t_use_timestamp_.28without_time_zone.29) recommend that `timestamp with time zone` is used instead for timezone-aware timestamps.\n+This must be configured before it can be used for new migrations.\n+\n+To configure `timestamp with time zone` as your new timestamp default data type, place the following configuration in the `config/application.rb` file.\n+\n+```ruby\n+# config/application.rb\n+ActiveSupport.on_load(:active_record_postgresqladapter) do\n+  self.datetime_type = :timestamptz\n+end",
        "comment_created_at": "2025-03-31T18:26:49+00:00",
        "comment_author": "justinko",
        "comment_body": "Hi, that was me, I thought deleting my comment would delete the entire thread so as not to waste anyones time. Yes, no initializer needed (LLM gave me wrong info!). \r\n\r\nI still think the average user is not going to know where to put the hook. They're not used to putting things at the top level in `application.rb`. Perhaps the docs could demonstrate this:\r\n\r\n```ruby\r\n# config/application.rb\r\nBundler.require(*Rails.groups)\r\n\r\nActiveSupport.on_load(:active_record_postgresqladapter) do\r\n  self.datetime_type = :timestamptz\r\nend\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2022781699",
        "repo_full_name": "rails/rails",
        "pr_number": 53687,
        "pr_file": "guides/source/active_record_postgresql.md",
        "discussion_id": "2020185627",
        "commented_code": "@@ -516,6 +516,34 @@ irb> event.duration\n => 2 days\n ```\n \n+### Timestamps\n+\n+* [Date/Time Types](https://www.postgresql.org/docs/current/datatype-datetime.html)\n+\n+Rails migrations with timestamps store the time a model was created or updated. By default and for legacy reasons, the columns use the `timestamp without time zone` data type.\n+\n+```ruby\n+# db/migrate/20241220144913_create_devices.rb\n+create_table :post, id: :uuid do |t|\n+  t.datetime :published_at\n+  # By default, Active Record will set the data type of this column to `timestamp without time zone`.\n+end\n+```\n+\n+While this works ok, [PostgreSQL best practices](https://wiki.postgresql.org/wiki/Don't_Do_This#Don.27t_use_timestamp_.28without_time_zone.29) recommend that `timestamp with time zone` is used instead for timezone-aware timestamps.\n+This must be configured before it can be used for new migrations.\n+\n+To configure `timestamp with time zone` as your new timestamp default data type, place the following configuration in the `config/application.rb` file.\n+\n+```ruby\n+# config/application.rb\n+ActiveSupport.on_load(:active_record_postgresqladapter) do\n+  self.datetime_type = :timestamptz\n+end",
        "comment_created_at": "2025-04-01T12:44:10+00:00",
        "comment_author": "Edouard-chin",
        "comment_body": "> They're not used to putting things at the top level in application.rb\r\n\r\nThis doesn't need to be placed at the top. You may overthink this 😅. This doc is pretty much similar to all other existing examples whenever the `config/application.rb` file needs to be tweaked, with no mention whatsoever of where in the file the code should end up.\r\n\r\n(FWIW, I don't recall having to place anything at the top level, ever).",
        "pr_file_module": null
      },
      {
        "comment_id": "2023441071",
        "repo_full_name": "rails/rails",
        "pr_number": 53687,
        "pr_file": "guides/source/active_record_postgresql.md",
        "discussion_id": "2020185627",
        "commented_code": "@@ -516,6 +516,34 @@ irb> event.duration\n => 2 days\n ```\n \n+### Timestamps\n+\n+* [Date/Time Types](https://www.postgresql.org/docs/current/datatype-datetime.html)\n+\n+Rails migrations with timestamps store the time a model was created or updated. By default and for legacy reasons, the columns use the `timestamp without time zone` data type.\n+\n+```ruby\n+# db/migrate/20241220144913_create_devices.rb\n+create_table :post, id: :uuid do |t|\n+  t.datetime :published_at\n+  # By default, Active Record will set the data type of this column to `timestamp without time zone`.\n+end\n+```\n+\n+While this works ok, [PostgreSQL best practices](https://wiki.postgresql.org/wiki/Don't_Do_This#Don.27t_use_timestamp_.28without_time_zone.29) recommend that `timestamp with time zone` is used instead for timezone-aware timestamps.\n+This must be configured before it can be used for new migrations.\n+\n+To configure `timestamp with time zone` as your new timestamp default data type, place the following configuration in the `config/application.rb` file.\n+\n+```ruby\n+# config/application.rb\n+ActiveSupport.on_load(:active_record_postgresqladapter) do\n+  self.datetime_type = :timestamptz\n+end",
        "comment_created_at": "2025-04-01T18:04:52+00:00",
        "comment_author": "justinko",
        "comment_body": "It could be a first class config option: https://github.com/rails/rails/blob/main/activerecord/lib/active_record/railtie.rb#L197-L205\r\n\r\nBut I say no because adding a custom type would be awkward: https://github.com/rails/rails/blob/main/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb#L118\r\n\r\nI grep'd the guides and pretty much all `on_load` hooks are wrapped in an initializer. This is where my initial confusion lies. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1976496248",
    "pr_number": 54662,
    "pr_file": "guides/source/configuring.md",
    "created_at": "2025-03-01T21:45:32+00:00",
    "commented_code": "| 7.2                   | `true`               |\n| 8.1                   | `!Rails.env.local?`  |\n\n#### `config.yjit_options`\n\nAllows you to set options for YJIT. The default value is an empty hash.\nWhen `config.yjit` is `false`, this setting will be ignored.\n\n```ruby\nconfig.yjit = true\nconfig.yjit_options = { stats: true }",
    "repo_full_name": "rails/rails",
    "discussion_comments": [
      {
        "comment_id": "1976496248",
        "repo_full_name": "rails/rails",
        "pr_number": 54662,
        "pr_file": "guides/source/configuring.md",
        "discussion_id": "1976496248",
        "commented_code": "@@ -648,6 +648,16 @@ deploying to a memory constrained environment you may want to set this to `false\n | 7.2                   | `true`               |\n | 8.1                   | `!Rails.env.local?`  |\n \n+#### `config.yjit_options`\n+\n+Allows you to set options for YJIT. The default value is an empty hash.\n+When `config.yjit` is `false`, this setting will be ignored.\n+\n+```ruby\n+config.yjit = true\n+config.yjit_options = { stats: true }",
        "comment_created_at": "2025-03-01T21:45:32+00:00",
        "comment_author": "byroot",
        "comment_body": "I think we could simply allow:\r\n\r\n```suggestion\r\nconfig.yjit = { stats: true }\r\n```\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1976533283",
        "repo_full_name": "rails/rails",
        "pr_number": 54662,
        "pr_file": "guides/source/configuring.md",
        "discussion_id": "1976496248",
        "commented_code": "@@ -648,6 +648,16 @@ deploying to a memory constrained environment you may want to set this to `false\n | 7.2                   | `true`               |\n | 8.1                   | `!Rails.env.local?`  |\n \n+#### `config.yjit_options`\n+\n+Allows you to set options for YJIT. The default value is an empty hash.\n+When `config.yjit` is `false`, this setting will be ignored.\n+\n+```ruby\n+config.yjit = true\n+config.yjit_options = { stats: true }",
        "comment_created_at": "2025-03-02T03:33:42+00:00",
        "comment_author": "a5-stable",
        "comment_body": "Thank you! I simplified it by allowing a hash 🙇‍♀️ \r\n",
        "pr_file_module": null
      }
    ]
  }
]