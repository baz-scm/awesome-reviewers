[
  {
    "discussion_id": "2171267883",
    "pr_number": 33654,
    "pr_file": "packages/react-client/src/ReactFlightClient.js",
    "created_at": "2025-06-27T08:46:34+00:00",
    "commented_code": "",
    "repo_full_name": "facebook/react",
    "discussion_comments": [
      {
        "comment_id": "2171267883",
        "repo_full_name": "facebook/react",
        "pr_number": 33654,
        "pr_file": "packages/react-client/src/ReactFlightClient.js",
        "discussion_id": "2171267883",
        "commented_code": "@@ -933,15 +947,17 @@ function createElement(\n       handler.value = element;\n       handler.chunk = blockedChunk;\n       if (__DEV__) {\n-        const freeze = Object.freeze.bind(Object, element.props);\n-        blockedChunk.then(freeze, freeze);\n+        /// After we have initialized any blocked references, initialize stack etc.\n+        const init = initializeElement.bind(null, response, element);\n+        blockedChunk.then(init, init);\n       }\n       return createLazyChunkWrapper(blockedChunk);\n     }\n-  } else if (__DEV__) {\n+  }\n+  if (__DEV__) {\n     // TODO: We should be freezing the element but currently, we might write into\n     // _debugInfo later. We could move it into _store which remains mutable.",
        "comment_created_at": "2025-06-27T08:46:34+00:00",
        "comment_author": "unstubbable",
        "comment_body": "The comment is outdated now.",
        "pr_file_module": null
      },
      {
        "comment_id": "2171997003",
        "repo_full_name": "facebook/react",
        "pr_number": 33654,
        "pr_file": "packages/react-client/src/ReactFlightClient.js",
        "discussion_id": "2171267883",
        "commented_code": "@@ -933,15 +947,17 @@ function createElement(\n       handler.value = element;\n       handler.chunk = blockedChunk;\n       if (__DEV__) {\n-        const freeze = Object.freeze.bind(Object, element.props);\n-        blockedChunk.then(freeze, freeze);\n+        /// After we have initialized any blocked references, initialize stack etc.\n+        const init = initializeElement.bind(null, response, element);\n+        blockedChunk.then(init, init);\n       }\n       return createLazyChunkWrapper(blockedChunk);\n     }\n-  } else if (__DEV__) {\n+  }\n+  if (__DEV__) {\n     // TODO: We should be freezing the element but currently, we might write into\n     // _debugInfo later. We could move it into _store which remains mutable.",
        "comment_created_at": "2025-06-27T12:58:17+00:00",
        "comment_author": "sebmarkbage",
        "comment_body": "No, this is referring to the element which is still not frozen. I can move it into initializeElement to co locate it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2166606397",
    "pr_number": 33633,
    "pr_file": "packages/react-server/src/ReactFlightServer.js",
    "created_at": "2025-06-25T12:33:12+00:00",
    "commented_code": "",
    "repo_full_name": "facebook/react",
    "discussion_comments": [
      {
        "comment_id": "2166606397",
        "repo_full_name": "facebook/react",
        "pr_number": 33633,
        "pr_file": "packages/react-server/src/ReactFlightServer.js",
        "discussion_id": "2166606397",
        "commented_code": "@@ -5345,37 +5337,7 @@ export function abort(request: Request, reason: mixed): void {\n         callOnAllReadyIfReady(request);\n       }\n     }\n-    const abortListeners = request.abortListeners;\n-    if (abortListeners.size > 0) {\n-      let error;\n-      if (\n-        enablePostpone &&\n-        typeof reason === 'object' &&\n-        reason !== null &&\n-        (reason: any).$$typeof === REACT_POSTPONE_TYPE\n-      ) {\n-        // We aborted with a Postpone but since we're passing this to an\n-        // external handler, passing this object would leak it outside React.\n-        // We create an alternative reason for it instead.\n-        error = new Error('The render was aborted due to being postponed.');\n-      } else {\n-        error =\n-          reason === undefined\n-            ? new Error(\n-                'The render was aborted by the server without a reason.',\n-              )\n-            : typeof reason === 'object' &&\n-                reason !== null &&\n-                typeof reason.then === 'function'\n-              ? new Error(\n-                  'The render was aborted by the server with a promise.',\n-                )\n-              : reason;\n-      }\n-      abortListeners.forEach(callback => callback(error));\n-      abortListeners.clear();\n-      callOnAllReadyIfReady(request);\n-    }\n+    callOnAllReadyIfReady(request);",
        "comment_created_at": "2025-06-25T12:33:12+00:00",
        "comment_author": "unstubbable",
        "comment_body": "Nit: This was previously co-located with the `abortListeners.clear()` call. Should it now be in an `else` branch of `if (abortableTasks.size > 0) {`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2166700095",
        "repo_full_name": "facebook/react",
        "pr_number": 33633,
        "pr_file": "packages/react-server/src/ReactFlightServer.js",
        "discussion_id": "2166606397",
        "commented_code": "@@ -5345,37 +5337,7 @@ export function abort(request: Request, reason: mixed): void {\n         callOnAllReadyIfReady(request);\n       }\n     }\n-    const abortListeners = request.abortListeners;\n-    if (abortListeners.size > 0) {\n-      let error;\n-      if (\n-        enablePostpone &&\n-        typeof reason === 'object' &&\n-        reason !== null &&\n-        (reason: any).$$typeof === REACT_POSTPONE_TYPE\n-      ) {\n-        // We aborted with a Postpone but since we're passing this to an\n-        // external handler, passing this object would leak it outside React.\n-        // We create an alternative reason for it instead.\n-        error = new Error('The render was aborted due to being postponed.');\n-      } else {\n-        error =\n-          reason === undefined\n-            ? new Error(\n-                'The render was aborted by the server without a reason.',\n-              )\n-            : typeof reason === 'object' &&\n-                reason !== null &&\n-                typeof reason.then === 'function'\n-              ? new Error(\n-                  'The render was aborted by the server with a promise.',\n-                )\n-              : reason;\n-      }\n-      abortListeners.forEach(callback => callback(error));\n-      abortListeners.clear();\n-      callOnAllReadyIfReady(request);\n-    }\n+    callOnAllReadyIfReady(request);",
        "comment_created_at": "2025-06-25T13:18:50+00:00",
        "comment_author": "sebmarkbage",
        "comment_body": "I moved it back down here while debugging an unrelated issue. I'll move it back up. I think it should really be next to the abort listeners. In theory they might be the last thing to trigger a clean up. It should really be colocated with the thing that might trigger a side-effect to remove something from abortableTasks.",
        "pr_file_module": null
      }
    ]
  }
]