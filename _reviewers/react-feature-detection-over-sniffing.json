[
  {
    "discussion_id": "2138481509",
    "pr_number": 33499,
    "pr_file": "fixtures/view-transition/src/components/SwipeRecognizer.js",
    "created_at": "2025-06-10T17:54:49+00:00",
    "commented_code": "",
    "repo_full_name": "facebook/react",
    "discussion_comments": [
      {
        "comment_id": "2138481509",
        "repo_full_name": "facebook/react",
        "pr_number": 33499,
        "pr_file": "fixtures/view-transition/src/components/SwipeRecognizer.js",
        "discussion_id": "2138481509",
        "commented_code": "@@ -25,7 +25,14 @@ export default function SwipeRecognizer({\n     if (activeGesture.current !== null) {\n       return;\n     }\n-    if (typeof ScrollTimeline !== 'function') {\n+\n+    const ua = navigator.userAgent;\n+    const supportsScrollTimeline =\n+      typeof ScrollTimeline === 'function' &&\n+      (ua.indexOf('Safari') === -1 ||\n+        (ua.indexOf('iPhone') === -1 && ua.indexOf('iPad') === -1));",
        "comment_created_at": "2025-06-10T17:54:49+00:00",
        "comment_author": "sebmarkbage",
        "comment_body": "Instead of special casing iOS we might be able to deopt to the polyfill only if a touch event has happened before we start.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2162851827",
    "pr_number": 33627,
    "pr_file": "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientBrowser.js",
    "created_at": "2025-06-24T02:40:43+00:00",
    "commented_code": "",
    "repo_full_name": "facebook/react",
    "discussion_comments": [
      {
        "comment_id": "2162851827",
        "repo_full_name": "facebook/react",
        "pr_number": 33627,
        "pr_file": "packages/react-server-dom-webpack/src/client/ReactFlightDOMClientBrowser.js",
        "discussion_id": "2162851827",
        "commented_code": "@@ -42,12 +43,31 @@ type CallServerCallback = <A, T>(string, args: A) => Promise<T>;\n \n export type Options = {\n   callServer?: CallServerCallback,\n+  debugChannel?: {writable?: WritableStream, ...},",
        "comment_created_at": "2025-06-24T02:40:43+00:00",
        "comment_author": "sebmarkbage",
        "comment_body": "Notably the client is currently only included in the Browser builds. I guess in theory it could be useful to have a live connection between servers too.\r\n\r\nThis accepts a `writable: WritableStream` which is the shape that is provided by the modern [WebSocketStream](https://developer.mozilla.org/en-US/docs/Web/API/WebSocketStream) API. It's aligned with all our other modern usages for browsers - Web Streams.\r\n\r\nUnfortunately WebSocketStream is not available in Safari or Firefox so those need a polyfill. I didn't add support for the more widely supported [`WebSocket` API](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket) since that would also affect the `readable` directly where we stopped [supporting the XHR shape](https://github.com/facebook/react/pull/26827). So this is just left up to user space for now to polyfill or use a different transport protocol.\r\n\r\nIronically the `WebSocket` shape is commonly in Node.js and it has similar but not exact shape as Node Streams so I added support for the Web shape of `WebSocket` in Node.",
        "pr_file_module": null
      }
    ]
  }
]