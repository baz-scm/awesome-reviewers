[
  {
    "discussion_id": "2131745417",
    "pr_number": 51756,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/ReactFragment.kt",
    "created_at": "2025-06-06T08:21:19+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.os.Bundle\n+import android.view.KeyEvent\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.fragment.app.Fragment\n+import com.facebook.react.internal.featureflags.ReactNativeNewArchitectureFeatureFlags\n+import com.facebook.react.modules.core.PermissionAwareActivity\n+import com.facebook.react.modules.core.PermissionListener\n+\n+/**\n+ * Fragment for creating a React View. This allows the developer to \"embed\" a React Application\n+ * inside native components such as a Drawer, ViewPager, etc.\n+ */\n+public class ReactFragment : Fragment(), PermissionAwareActivity {\n+  protected var reactDelegate: ReactDelegate? = null\n+  private var disableHostLifecycleEvents = false\n+  private var permissionListener: PermissionListener? = null\n+\n+  public override fun onCreate(savedInstanceState: Bundle?) {\n+    super.onCreate(savedInstanceState)\n+    var mainComponentName: String? = null\n+    var launchOptions: Bundle? = null\n+    var fabricEnabled: Boolean = false\n+    getArguments()?.let {\n+      mainComponentName = it.getString(ARG_COMPONENT_NAME)\n+      launchOptions = it.getBundle(ARG_LAUNCH_OPTIONS)\n+      fabricEnabled = it.getBoolean(ARG_FABRIC_ENABLED)\n+      @Suppress(\"DEPRECATION\")\n+      disableHostLifecycleEvents = it.getBoolean(ARG_DISABLE_HOST_LIFECYCLE_EVENTS)\n+    }\n+    checkNotNull(mainComponentName) { \"Cannot loadApp if component name is null\" }\n+    if (ReactNativeNewArchitectureFeatureFlags.enableBridgelessArchitecture()) {\n+      reactDelegate =\n+          ReactDelegate(getActivity(), reactHost, mainComponentName, launchOptions)\n+    } else {\n+      reactDelegate =\n+        ReactDelegate(\n+          getActivity(),\n+          reactNativeHost,\n+          mainComponentName,\n+          launchOptions,\n+          fabricEnabled\n+        )\n+    }\n+  }\n+\n+  /**\n+   * Get the [ReactNativeHost] used by this app. By default, assumes [Activity.getApplication] is an instance of [ReactApplication] and calls [ReactApplication.getReactNativeHost]. Override this method if your application class does not\n+   * implement `ReactApplication` or you simply have a different mechanism for storing a\n+   * `ReactNativeHost`, e.g. as a static field somewhere.\n+   */\n+  protected val reactNativeHost: ReactNativeHost?\n+    get() = (getActivity()?.getApplication() as ReactApplication?)?.reactNativeHost\n+\n+  /**\n+   * Get the [ReactHost] used by this app. By default, assumes [Activity.getApplication] is an instance of [ReactApplication] and calls [ReactApplication.getReactHost]. Override this method if your application class does not\n+   * implement `ReactApplication` or you simply have a different mechanism for storing a\n+   * `ReactHost`, e.g. as a static field somewhere.\n+   *\n+   * If you're using Old Architecture/Bridge Mode, this method should return null as [ReactHost] is a Bridgeless-only concept.\n+   */\n+  protected val reactHost: ReactHost?\n+    get() = (getActivity()?.getApplication() as ReactApplication?)?.reactHost\n+\n+  public override fun onCreateView(\n+      inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?\n+  ): View? = reactDelegate?.let { it.loadApp(); it.reactRootView }\n+\n+  public override fun onResume() {\n+    super.onResume()\n+    if (!disableHostLifecycleEvents) {\n+      reactDelegate?.onHostResume()\n+    }\n+  }\n+\n+  public override fun onPause() {\n+    super.onPause()\n+    if (!disableHostLifecycleEvents) {\n+      reactDelegate?.onHostPause()\n+    }\n+  }\n+\n+  public override fun onDestroy() {\n+    super.onDestroy()\n+    if (!disableHostLifecycleEvents) {\n+      reactDelegate?.onHostDestroy()\n+    } else {\n+      reactDelegate?.unloadApp()\n+    }\n+  }\n+\n+  @Deprecated(\"Deprecated in Java\")\n+  public override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n+    @Suppress(\"DEPRECATION\")\n+    super.onActivityResult(requestCode, resultCode, data)\n+    reactDelegate?.onActivityResult(requestCode, resultCode, data, false)\n+  }\n+\n+  /**\n+   * Helper to forward hardware back presses to our React Native Host.\n+   *\n+   * This must be called via a forward from your host Activity.\n+   */\n+  public fun onBackPressed(): Boolean = reactDelegate?.onBackPressed() ?: false\n+\n+  /**\n+   * Helper to forward onKeyUp commands from our host Activity. This allows [ReactFragment] to handle\n+   * double tap reloads and dev menus.\n+   *\n+   * This must be called via a forward from your host Activity.\n+   *\n+   * @param keyCode keyCode\n+   * @param event event\n+   * @return true if we handled onKeyUp\n+   */\n+  public fun onKeyUp(keyCode: Int, event: KeyEvent): Boolean =\n+    reactDelegate?.shouldShowDevMenuOrReload(keyCode, event) ?: false\n+\n+  @Deprecated(\"Deprecated in Java\")\n+  public override fun onRequestPermissionsResult(\n+      requestCode: Int, permissions: Array<String>, grantResults: IntArray\n+  ) {\n+    @Suppress(\"DEPRECATION\")\n+    super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n+    permissionListener?.let {\n+      if (it.onRequestPermissionsResult(requestCode, permissions, grantResults)) {\n+        permissionListener = null\n+      }\n+    }\n+  }\n+\n+  override fun checkPermission(permission: String, pid: Int, uid: Int): Int =\n+    getActivity()?.checkPermission(permission, pid, uid) ?: 0\n+\n+  override fun checkSelfPermission(permission: String): Int =\n+    getActivity()?.checkSelfPermission(permission) ?: 0\n+\n+  @Suppress(\"DEPRECATION\")\n+  override fun requestPermissions(\n+      permissions: Array<String>, requestCode: Int, listener: PermissionListener?\n+  ): Unit {\n+    permissionListener = listener\n+    requestPermissions(permissions, requestCode)\n+  }\n+\n+  /** Builder class to help instantiate a ReactFragment. */\n+  public class Builder {\n+    public var mComponentName: String? = null\n+    public var mLaunchOptions: Bundle? = null\n+    public var mFabricEnabled: Boolean = false",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2131745417",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51756,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/ReactFragment.kt",
        "discussion_id": "2131745417",
        "commented_code": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.os.Bundle\n+import android.view.KeyEvent\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.fragment.app.Fragment\n+import com.facebook.react.internal.featureflags.ReactNativeNewArchitectureFeatureFlags\n+import com.facebook.react.modules.core.PermissionAwareActivity\n+import com.facebook.react.modules.core.PermissionListener\n+\n+/**\n+ * Fragment for creating a React View. This allows the developer to \"embed\" a React Application\n+ * inside native components such as a Drawer, ViewPager, etc.\n+ */\n+public class ReactFragment : Fragment(), PermissionAwareActivity {\n+  protected var reactDelegate: ReactDelegate? = null\n+  private var disableHostLifecycleEvents = false\n+  private var permissionListener: PermissionListener? = null\n+\n+  public override fun onCreate(savedInstanceState: Bundle?) {\n+    super.onCreate(savedInstanceState)\n+    var mainComponentName: String? = null\n+    var launchOptions: Bundle? = null\n+    var fabricEnabled: Boolean = false\n+    getArguments()?.let {\n+      mainComponentName = it.getString(ARG_COMPONENT_NAME)\n+      launchOptions = it.getBundle(ARG_LAUNCH_OPTIONS)\n+      fabricEnabled = it.getBoolean(ARG_FABRIC_ENABLED)\n+      @Suppress(\"DEPRECATION\")\n+      disableHostLifecycleEvents = it.getBoolean(ARG_DISABLE_HOST_LIFECYCLE_EVENTS)\n+    }\n+    checkNotNull(mainComponentName) { \"Cannot loadApp if component name is null\" }\n+    if (ReactNativeNewArchitectureFeatureFlags.enableBridgelessArchitecture()) {\n+      reactDelegate =\n+          ReactDelegate(getActivity(), reactHost, mainComponentName, launchOptions)\n+    } else {\n+      reactDelegate =\n+        ReactDelegate(\n+          getActivity(),\n+          reactNativeHost,\n+          mainComponentName,\n+          launchOptions,\n+          fabricEnabled\n+        )\n+    }\n+  }\n+\n+  /**\n+   * Get the [ReactNativeHost] used by this app. By default, assumes [Activity.getApplication] is an instance of [ReactApplication] and calls [ReactApplication.getReactNativeHost]. Override this method if your application class does not\n+   * implement `ReactApplication` or you simply have a different mechanism for storing a\n+   * `ReactNativeHost`, e.g. as a static field somewhere.\n+   */\n+  protected val reactNativeHost: ReactNativeHost?\n+    get() = (getActivity()?.getApplication() as ReactApplication?)?.reactNativeHost\n+\n+  /**\n+   * Get the [ReactHost] used by this app. By default, assumes [Activity.getApplication] is an instance of [ReactApplication] and calls [ReactApplication.getReactHost]. Override this method if your application class does not\n+   * implement `ReactApplication` or you simply have a different mechanism for storing a\n+   * `ReactHost`, e.g. as a static field somewhere.\n+   *\n+   * If you're using Old Architecture/Bridge Mode, this method should return null as [ReactHost] is a Bridgeless-only concept.\n+   */\n+  protected val reactHost: ReactHost?\n+    get() = (getActivity()?.getApplication() as ReactApplication?)?.reactHost\n+\n+  public override fun onCreateView(\n+      inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?\n+  ): View? = reactDelegate?.let { it.loadApp(); it.reactRootView }\n+\n+  public override fun onResume() {\n+    super.onResume()\n+    if (!disableHostLifecycleEvents) {\n+      reactDelegate?.onHostResume()\n+    }\n+  }\n+\n+  public override fun onPause() {\n+    super.onPause()\n+    if (!disableHostLifecycleEvents) {\n+      reactDelegate?.onHostPause()\n+    }\n+  }\n+\n+  public override fun onDestroy() {\n+    super.onDestroy()\n+    if (!disableHostLifecycleEvents) {\n+      reactDelegate?.onHostDestroy()\n+    } else {\n+      reactDelegate?.unloadApp()\n+    }\n+  }\n+\n+  @Deprecated(\"Deprecated in Java\")\n+  public override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n+    @Suppress(\"DEPRECATION\")\n+    super.onActivityResult(requestCode, resultCode, data)\n+    reactDelegate?.onActivityResult(requestCode, resultCode, data, false)\n+  }\n+\n+  /**\n+   * Helper to forward hardware back presses to our React Native Host.\n+   *\n+   * This must be called via a forward from your host Activity.\n+   */\n+  public fun onBackPressed(): Boolean = reactDelegate?.onBackPressed() ?: false\n+\n+  /**\n+   * Helper to forward onKeyUp commands from our host Activity. This allows [ReactFragment] to handle\n+   * double tap reloads and dev menus.\n+   *\n+   * This must be called via a forward from your host Activity.\n+   *\n+   * @param keyCode keyCode\n+   * @param event event\n+   * @return true if we handled onKeyUp\n+   */\n+  public fun onKeyUp(keyCode: Int, event: KeyEvent): Boolean =\n+    reactDelegate?.shouldShowDevMenuOrReload(keyCode, event) ?: false\n+\n+  @Deprecated(\"Deprecated in Java\")\n+  public override fun onRequestPermissionsResult(\n+      requestCode: Int, permissions: Array<String>, grantResults: IntArray\n+  ) {\n+    @Suppress(\"DEPRECATION\")\n+    super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n+    permissionListener?.let {\n+      if (it.onRequestPermissionsResult(requestCode, permissions, grantResults)) {\n+        permissionListener = null\n+      }\n+    }\n+  }\n+\n+  override fun checkPermission(permission: String, pid: Int, uid: Int): Int =\n+    getActivity()?.checkPermission(permission, pid, uid) ?: 0\n+\n+  override fun checkSelfPermission(permission: String): Int =\n+    getActivity()?.checkSelfPermission(permission) ?: 0\n+\n+  @Suppress(\"DEPRECATION\")\n+  override fun requestPermissions(\n+      permissions: Array<String>, requestCode: Int, listener: PermissionListener?\n+  ): Unit {\n+    permissionListener = listener\n+    requestPermissions(permissions, requestCode)\n+  }\n+\n+  /** Builder class to help instantiate a ReactFragment. */\n+  public class Builder {\n+    public var mComponentName: String? = null\n+    public var mLaunchOptions: Bundle? = null\n+    public var mFabricEnabled: Boolean = false",
        "comment_created_at": "2025-06-06T08:21:19+00:00",
        "comment_author": "cortinico",
        "comment_body": "can you rename them to don't use the `m` prefix?",
        "pr_file_module": null
      },
      {
        "comment_id": "2132478328",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51756,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/ReactFragment.kt",
        "discussion_id": "2131745417",
        "commented_code": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react\n+\n+import android.app.Activity\n+import android.content.Intent\n+import android.os.Bundle\n+import android.view.KeyEvent\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.fragment.app.Fragment\n+import com.facebook.react.internal.featureflags.ReactNativeNewArchitectureFeatureFlags\n+import com.facebook.react.modules.core.PermissionAwareActivity\n+import com.facebook.react.modules.core.PermissionListener\n+\n+/**\n+ * Fragment for creating a React View. This allows the developer to \"embed\" a React Application\n+ * inside native components such as a Drawer, ViewPager, etc.\n+ */\n+public class ReactFragment : Fragment(), PermissionAwareActivity {\n+  protected var reactDelegate: ReactDelegate? = null\n+  private var disableHostLifecycleEvents = false\n+  private var permissionListener: PermissionListener? = null\n+\n+  public override fun onCreate(savedInstanceState: Bundle?) {\n+    super.onCreate(savedInstanceState)\n+    var mainComponentName: String? = null\n+    var launchOptions: Bundle? = null\n+    var fabricEnabled: Boolean = false\n+    getArguments()?.let {\n+      mainComponentName = it.getString(ARG_COMPONENT_NAME)\n+      launchOptions = it.getBundle(ARG_LAUNCH_OPTIONS)\n+      fabricEnabled = it.getBoolean(ARG_FABRIC_ENABLED)\n+      @Suppress(\"DEPRECATION\")\n+      disableHostLifecycleEvents = it.getBoolean(ARG_DISABLE_HOST_LIFECYCLE_EVENTS)\n+    }\n+    checkNotNull(mainComponentName) { \"Cannot loadApp if component name is null\" }\n+    if (ReactNativeNewArchitectureFeatureFlags.enableBridgelessArchitecture()) {\n+      reactDelegate =\n+          ReactDelegate(getActivity(), reactHost, mainComponentName, launchOptions)\n+    } else {\n+      reactDelegate =\n+        ReactDelegate(\n+          getActivity(),\n+          reactNativeHost,\n+          mainComponentName,\n+          launchOptions,\n+          fabricEnabled\n+        )\n+    }\n+  }\n+\n+  /**\n+   * Get the [ReactNativeHost] used by this app. By default, assumes [Activity.getApplication] is an instance of [ReactApplication] and calls [ReactApplication.getReactNativeHost]. Override this method if your application class does not\n+   * implement `ReactApplication` or you simply have a different mechanism for storing a\n+   * `ReactNativeHost`, e.g. as a static field somewhere.\n+   */\n+  protected val reactNativeHost: ReactNativeHost?\n+    get() = (getActivity()?.getApplication() as ReactApplication?)?.reactNativeHost\n+\n+  /**\n+   * Get the [ReactHost] used by this app. By default, assumes [Activity.getApplication] is an instance of [ReactApplication] and calls [ReactApplication.getReactHost]. Override this method if your application class does not\n+   * implement `ReactApplication` or you simply have a different mechanism for storing a\n+   * `ReactHost`, e.g. as a static field somewhere.\n+   *\n+   * If you're using Old Architecture/Bridge Mode, this method should return null as [ReactHost] is a Bridgeless-only concept.\n+   */\n+  protected val reactHost: ReactHost?\n+    get() = (getActivity()?.getApplication() as ReactApplication?)?.reactHost\n+\n+  public override fun onCreateView(\n+      inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?\n+  ): View? = reactDelegate?.let { it.loadApp(); it.reactRootView }\n+\n+  public override fun onResume() {\n+    super.onResume()\n+    if (!disableHostLifecycleEvents) {\n+      reactDelegate?.onHostResume()\n+    }\n+  }\n+\n+  public override fun onPause() {\n+    super.onPause()\n+    if (!disableHostLifecycleEvents) {\n+      reactDelegate?.onHostPause()\n+    }\n+  }\n+\n+  public override fun onDestroy() {\n+    super.onDestroy()\n+    if (!disableHostLifecycleEvents) {\n+      reactDelegate?.onHostDestroy()\n+    } else {\n+      reactDelegate?.unloadApp()\n+    }\n+  }\n+\n+  @Deprecated(\"Deprecated in Java\")\n+  public override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n+    @Suppress(\"DEPRECATION\")\n+    super.onActivityResult(requestCode, resultCode, data)\n+    reactDelegate?.onActivityResult(requestCode, resultCode, data, false)\n+  }\n+\n+  /**\n+   * Helper to forward hardware back presses to our React Native Host.\n+   *\n+   * This must be called via a forward from your host Activity.\n+   */\n+  public fun onBackPressed(): Boolean = reactDelegate?.onBackPressed() ?: false\n+\n+  /**\n+   * Helper to forward onKeyUp commands from our host Activity. This allows [ReactFragment] to handle\n+   * double tap reloads and dev menus.\n+   *\n+   * This must be called via a forward from your host Activity.\n+   *\n+   * @param keyCode keyCode\n+   * @param event event\n+   * @return true if we handled onKeyUp\n+   */\n+  public fun onKeyUp(keyCode: Int, event: KeyEvent): Boolean =\n+    reactDelegate?.shouldShowDevMenuOrReload(keyCode, event) ?: false\n+\n+  @Deprecated(\"Deprecated in Java\")\n+  public override fun onRequestPermissionsResult(\n+      requestCode: Int, permissions: Array<String>, grantResults: IntArray\n+  ) {\n+    @Suppress(\"DEPRECATION\")\n+    super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n+    permissionListener?.let {\n+      if (it.onRequestPermissionsResult(requestCode, permissions, grantResults)) {\n+        permissionListener = null\n+      }\n+    }\n+  }\n+\n+  override fun checkPermission(permission: String, pid: Int, uid: Int): Int =\n+    getActivity()?.checkPermission(permission, pid, uid) ?: 0\n+\n+  override fun checkSelfPermission(permission: String): Int =\n+    getActivity()?.checkSelfPermission(permission) ?: 0\n+\n+  @Suppress(\"DEPRECATION\")\n+  override fun requestPermissions(\n+      permissions: Array<String>, requestCode: Int, listener: PermissionListener?\n+  ): Unit {\n+    permissionListener = listener\n+    requestPermissions(permissions, requestCode)\n+  }\n+\n+  /** Builder class to help instantiate a ReactFragment. */\n+  public class Builder {\n+    public var mComponentName: String? = null\n+    public var mLaunchOptions: Bundle? = null\n+    public var mFabricEnabled: Boolean = false",
        "comment_created_at": "2025-06-06T16:13:19+00:00",
        "comment_author": "mateoguzmana",
        "comment_body": "Done! we might need to mark this change as breaking as the builder is public and also these vars",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2047151752",
    "pr_number": 50754,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/DynamicFromObject.kt",
    "created_at": "2025-04-16T15:07:33+00:00",
    "commented_code": "+package com.facebook.react.bridge\n+\n+import com.facebook.common.logging.FLog\n+import com.facebook.react.common.ReactConstants\n+\n+public class DynamicFromObject(private var mObject: Any?) : Dynamic {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2047151752",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50754,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/DynamicFromObject.kt",
        "discussion_id": "2047151752",
        "commented_code": "@@ -0,0 +1,74 @@\n+package com.facebook.react.bridge\n+\n+import com.facebook.common.logging.FLog\n+import com.facebook.react.common.ReactConstants\n+\n+public class DynamicFromObject(private var mObject: Any?) : Dynamic {",
        "comment_created_at": "2025-04-16T15:07:33+00:00",
        "comment_author": "mateoguzmana",
        "comment_body": "Can you rename the `mObject` to something else to avoid using Hungarian notation?\r\n\r\nBecause `object` would be a reserved word, I can propose as alternative:\r\n\r\n```suggestion\r\npublic class DynamicFromObject(private var value: Any?) : Dynamic {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2047722305",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50754,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/DynamicFromObject.kt",
        "discussion_id": "2047151752",
        "commented_code": "@@ -0,0 +1,74 @@\n+package com.facebook.react.bridge\n+\n+import com.facebook.common.logging.FLog\n+import com.facebook.react.common.ReactConstants\n+\n+public class DynamicFromObject(private var mObject: Any?) : Dynamic {",
        "comment_created_at": "2025-04-16T20:44:03+00:00",
        "comment_author": "yasir6jan",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2039754710",
    "pr_number": 50616,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/uimanager/ReactStylesDiffMap.kt",
    "created_at": "2025-04-11T15:20:35+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.uimanager\n+\n+import com.facebook.react.bridge.Dynamic\n+import com.facebook.react.bridge.ReadableArray\n+import com.facebook.react.bridge.ReadableMap\n+\n+/**\n+ * Wrapper for [ReadableMap] which should be used for styles property map. It extends some of\n+ * the accessor methods of [ReadableMap] by adding a default value property such that caller\n+ * is enforced to provide a default value for a style property.\n+ *\n+ * Instances of this class are used to update [View] or [CSSNode] style properties.\n+ * Since properties are generated by React framework based on what has been updated each value in\n+ * this map should either be interpreted as a new value set for a style property or as a \"reset this\n+ * property to default\" command in case when value is null (this is a way React communicates change\n+ * in which the style key that was previously present in a map has been removed).\n+ *\n+ * NOTE: Accessor method with default value will throw an exception when the key is not present\n+ * in the map. Style applicator logic should verify whether the key exists in the map using [.hasKey]\n+ * before fetching the value. The motivation behind this is that in case when the updated\n+ * style diff map doesn't contain a certain style key it means that the corresponding view property\n+ * shouldn't be updated (whereas in all other cases it should be updated to the new value or the\n+ * property should be reset).\n+ */\n+\n+public class ReactStylesDiffMap(props: ReadableMap) {\n+\n+  @JvmField\n+  public val mBackingMap: ReadableMap = props",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2039754710",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50616,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/uimanager/ReactStylesDiffMap.kt",
        "discussion_id": "2039754710",
        "commented_code": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.uimanager\n+\n+import com.facebook.react.bridge.Dynamic\n+import com.facebook.react.bridge.ReadableArray\n+import com.facebook.react.bridge.ReadableMap\n+\n+/**\n+ * Wrapper for [ReadableMap] which should be used for styles property map. It extends some of\n+ * the accessor methods of [ReadableMap] by adding a default value property such that caller\n+ * is enforced to provide a default value for a style property.\n+ *\n+ * Instances of this class are used to update [View] or [CSSNode] style properties.\n+ * Since properties are generated by React framework based on what has been updated each value in\n+ * this map should either be interpreted as a new value set for a style property or as a \"reset this\n+ * property to default\" command in case when value is null (this is a way React communicates change\n+ * in which the style key that was previously present in a map has been removed).\n+ *\n+ * NOTE: Accessor method with default value will throw an exception when the key is not present\n+ * in the map. Style applicator logic should verify whether the key exists in the map using [.hasKey]\n+ * before fetching the value. The motivation behind this is that in case when the updated\n+ * style diff map doesn't contain a certain style key it means that the corresponding view property\n+ * shouldn't be updated (whereas in all other cases it should be updated to the new value or the\n+ * property should be reset).\n+ */\n+\n+public class ReactStylesDiffMap(props: ReadableMap) {\n+\n+  @JvmField\n+  public val mBackingMap: ReadableMap = props",
        "comment_created_at": "2025-04-11T15:20:35+00:00",
        "comment_author": "mateoguzmana",
        "comment_body": "@poonamjain96 could you please rename the field not to use Hungarian notation?\n\nAlso if possible, let's try making it private as it doesn't seem to have usages outside the repository. If private is not possible, it can be internal\r\n\r\n```suggestion\r\n  internal val backingMap: ReadableMap = props\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2039945473",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50616,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/uimanager/ReactStylesDiffMap.kt",
        "discussion_id": "2039754710",
        "commented_code": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.uimanager\n+\n+import com.facebook.react.bridge.Dynamic\n+import com.facebook.react.bridge.ReadableArray\n+import com.facebook.react.bridge.ReadableMap\n+\n+/**\n+ * Wrapper for [ReadableMap] which should be used for styles property map. It extends some of\n+ * the accessor methods of [ReadableMap] by adding a default value property such that caller\n+ * is enforced to provide a default value for a style property.\n+ *\n+ * Instances of this class are used to update [View] or [CSSNode] style properties.\n+ * Since properties are generated by React framework based on what has been updated each value in\n+ * this map should either be interpreted as a new value set for a style property or as a \"reset this\n+ * property to default\" command in case when value is null (this is a way React communicates change\n+ * in which the style key that was previously present in a map has been removed).\n+ *\n+ * NOTE: Accessor method with default value will throw an exception when the key is not present\n+ * in the map. Style applicator logic should verify whether the key exists in the map using [.hasKey]\n+ * before fetching the value. The motivation behind this is that in case when the updated\n+ * style diff map doesn't contain a certain style key it means that the corresponding view property\n+ * shouldn't be updated (whereas in all other cases it should be updated to the new value or the\n+ * property should be reset).\n+ */\n+\n+public class ReactStylesDiffMap(props: ReadableMap) {\n+\n+  @JvmField\n+  public val mBackingMap: ReadableMap = props",
        "comment_created_at": "2025-04-11T17:05:18+00:00",
        "comment_author": "poonamjain96",
        "comment_body": "@mateoguzmana \r\nmBackingMap have reference in multiple kt and java files. Will have to changes all over. Should i still proceed with this changes?",
        "pr_file_module": null
      },
      {
        "comment_id": "2039958449",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50616,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/uimanager/ReactStylesDiffMap.kt",
        "discussion_id": "2039754710",
        "commented_code": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.uimanager\n+\n+import com.facebook.react.bridge.Dynamic\n+import com.facebook.react.bridge.ReadableArray\n+import com.facebook.react.bridge.ReadableMap\n+\n+/**\n+ * Wrapper for [ReadableMap] which should be used for styles property map. It extends some of\n+ * the accessor methods of [ReadableMap] by adding a default value property such that caller\n+ * is enforced to provide a default value for a style property.\n+ *\n+ * Instances of this class are used to update [View] or [CSSNode] style properties.\n+ * Since properties are generated by React framework based on what has been updated each value in\n+ * this map should either be interpreted as a new value set for a style property or as a \"reset this\n+ * property to default\" command in case when value is null (this is a way React communicates change\n+ * in which the style key that was previously present in a map has been removed).\n+ *\n+ * NOTE: Accessor method with default value will throw an exception when the key is not present\n+ * in the map. Style applicator logic should verify whether the key exists in the map using [.hasKey]\n+ * before fetching the value. The motivation behind this is that in case when the updated\n+ * style diff map doesn't contain a certain style key it means that the corresponding view property\n+ * shouldn't be updated (whereas in all other cases it should be updated to the new value or the\n+ * property should be reset).\n+ */\n+\n+public class ReactStylesDiffMap(props: ReadableMap) {\n+\n+  @JvmField\n+  public val mBackingMap: ReadableMap = props",
        "comment_created_at": "2025-04-11T17:13:14+00:00",
        "comment_author": "poonamjain96",
        "comment_body": "Fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2041080446",
    "pr_number": 50679,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/uimanager/ReactClippingViewGroupHelper.kt",
    "created_at": "2025-04-13T09:02:57+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+ package com.facebook.react.uimanager\n+\n+ import android.graphics.Rect\n+ import android.view.View\n+ import com.facebook.infer.annotation.Nullsafe\n+ import javax.annotation.concurrent.NotThreadSafe\n+ \n+ /**\n+  * Provides implementation of common tasks for view and it's view manager supporting property\n+  * [removeClippedSubviews].\n+  */\n+ @Nullsafe(Nullsafe.Mode.LOCAL)\n+ @NotThreadSafe\n+ public object ReactClippingViewGroupHelper {\n+ \n+     public const val PROP_REMOVE_CLIPPED_SUBVIEWS: String = \"removeClippedSubviews\"\n+ \n+     private val sHelperRect: Rect = Rect()",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2041080446",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50679,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/uimanager/ReactClippingViewGroupHelper.kt",
        "discussion_id": "2041080446",
        "commented_code": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+ package com.facebook.react.uimanager\n+\n+ import android.graphics.Rect\n+ import android.view.View\n+ import com.facebook.infer.annotation.Nullsafe\n+ import javax.annotation.concurrent.NotThreadSafe\n+ \n+ /**\n+  * Provides implementation of common tasks for view and it's view manager supporting property\n+  * [removeClippedSubviews].\n+  */\n+ @Nullsafe(Nullsafe.Mode.LOCAL)\n+ @NotThreadSafe\n+ public object ReactClippingViewGroupHelper {\n+ \n+     public const val PROP_REMOVE_CLIPPED_SUBVIEWS: String = \"removeClippedSubviews\"\n+ \n+     private val sHelperRect: Rect = Rect()",
        "comment_created_at": "2025-04-13T09:02:57+00:00",
        "comment_author": "mateoguzmana",
        "comment_body": "Let's rename this to avoid using Hungarian notation:\r\n\r\n```suggestion\r\n     private val helperRect: Rect = Rect()\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2042145623",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50679,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/uimanager/ReactClippingViewGroupHelper.kt",
        "discussion_id": "2041080446",
        "commented_code": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+ package com.facebook.react.uimanager\n+\n+ import android.graphics.Rect\n+ import android.view.View\n+ import com.facebook.infer.annotation.Nullsafe\n+ import javax.annotation.concurrent.NotThreadSafe\n+ \n+ /**\n+  * Provides implementation of common tasks for view and it's view manager supporting property\n+  * [removeClippedSubviews].\n+  */\n+ @Nullsafe(Nullsafe.Mode.LOCAL)\n+ @NotThreadSafe\n+ public object ReactClippingViewGroupHelper {\n+ \n+     public const val PROP_REMOVE_CLIPPED_SUBVIEWS: String = \"removeClippedSubviews\"\n+ \n+     private val sHelperRect: Rect = Rect()",
        "comment_created_at": "2025-04-14T13:30:21+00:00",
        "comment_author": "Priyanka26012",
        "comment_body": "Changed ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1941145879",
    "pr_number": 49149,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/ProgressiveStringDecoder.kt",
    "created_at": "2025-02-04T13:17:00+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+package com.facebook.react.modules.network\n+\n+import com.facebook.common.logging.FLog\n+import com.facebook.react.common.ReactConstants\n+import java.nio.ByteBuffer\n+import java.nio.CharBuffer\n+import java.nio.charset.Charset\n+import java.nio.charset.CharsetDecoder\n+\n+/**\n+ * Class to decode encoded strings from byte array chunks. As in different encodings single\n+ * character could take up to 4 characters byte array passed to decode could have parts of the\n+ * characters which can't be correctly decoded.\n+ *\n+ * This class is designed in assumption that original byte stream is correctly formatted string in\n+ * given encoding. Otherwise some parts of the data won't be decoded.\n+ */\n+internal class ProgressiveStringDecoder(charset: Charset) {\n+  private val mDecoder: CharsetDecoder = charset.newDecoder()",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1941145879",
        "repo_full_name": "facebook/react-native",
        "pr_number": 49149,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/ProgressiveStringDecoder.kt",
        "discussion_id": "1941145879",
        "commented_code": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+package com.facebook.react.modules.network\n+\n+import com.facebook.common.logging.FLog\n+import com.facebook.react.common.ReactConstants\n+import java.nio.ByteBuffer\n+import java.nio.CharBuffer\n+import java.nio.charset.Charset\n+import java.nio.charset.CharsetDecoder\n+\n+/**\n+ * Class to decode encoded strings from byte array chunks. As in different encodings single\n+ * character could take up to 4 characters byte array passed to decode could have parts of the\n+ * characters which can't be correctly decoded.\n+ *\n+ * This class is designed in assumption that original byte stream is correctly formatted string in\n+ * given encoding. Otherwise some parts of the data won't be decoded.\n+ */\n+internal class ProgressiveStringDecoder(charset: Charset) {\n+  private val mDecoder: CharsetDecoder = charset.newDecoder()",
        "comment_created_at": "2025-02-04T13:17:00+00:00",
        "comment_author": "rshest",
        "comment_body": "Please make sure not to use Hungarian notation for the future changes.",
        "pr_file_module": null
      }
    ]
  }
]