[
  {
    "discussion_id": "2123335790",
    "pr_number": 51734,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/NativeModuleRegistry.kt",
    "created_at": "2025-06-03T09:58:35+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.bridge\n+\n+import com.facebook.infer.annotation.Assertions\n+import com.facebook.react.bridge.ReactMarker.logMarker\n+import com.facebook.react.common.annotations.internal.LegacyArchitecture\n+import com.facebook.react.common.annotations.internal.LegacyArchitectureLogLevel\n+import com.facebook.react.common.annotations.internal.LegacyArchitectureLogger.assertLegacyArchitecture\n+import com.facebook.react.module.annotations.ReactModule\n+import com.facebook.systrace.Systrace\n+import com.facebook.systrace.Systrace.beginSection\n+import com.facebook.systrace.Systrace.endSection\n+\n+/** A set of Java APIs to expose to a particular JavaScript instance. */\n+@LegacyArchitecture\n+public class NativeModuleRegistry(\n+    private val reactApplicationContext: ReactApplicationContext,\n+    private val modules: MutableMap<String, ModuleHolder>\n+) {\n+  private val moduleMap: Map<String, ModuleHolder>\n+    /** Private getters for combining NativeModuleRegistry's */\n+    get() = modules\n+\n+  public fun getJavaModules(jsInstance: JSInstance): Collection<JavaModuleWrapper> =\n+    ArrayList<JavaModuleWrapper>().apply {\n+      for ((_, value) in modules) {\n+        if (!value.isCxxModule) {\n+          add(JavaModuleWrapper(jsInstance, value))\n+        }\n+      }\n+    }\n+\n+  public val cxxModules: Collection<ModuleHolder>\n+    get() = ArrayList<ModuleHolder>().apply {\n+      for ((_, value) in modules) {\n+        if (value.isCxxModule) {\n+          add(value)\n+        }\n+      }\n+    }\n+\n+  /**\n+   * Adds any new modules to the current module registry\n+   */\n+  public fun registerModules(newRegister: NativeModuleRegistry) {\n+    Assertions.assertCondition(\n+      reactApplicationContext == newRegister.reactApplicationContext,\n+      \"Extending native modules with non-matching application contexts.\"\n+    )\n+\n+    val newModules = newRegister.moduleMap\n+\n+    for ((key, value) in newModules) {\n+      if (!modules.containsKey(key)) {\n+        modules[key] = value\n+      }\n+    }\n+  }\n+\n+  public fun notifyJSInstanceDestroy() {\n+    reactApplicationContext.assertOnNativeModulesQueueThread()\n+    beginSection(Systrace.TRACE_TAG_REACT, \"NativeModuleRegistry_notifyJSInstanceDestroy\")\n+    try {\n+      for (module in modules.values) {\n+        module.destroy()\n+      }\n+    } finally {\n+      endSection(Systrace.TRACE_TAG_REACT)\n+    }\n+  }\n+\n+  public fun notifyJSInstanceInitialized() {\n+    reactApplicationContext.assertOnNativeModulesQueueThread(\n+        \"From version React Native v0.44, \"\n+                + \"native modules are explicitly not initialized on the UI thread.\"\n+    )\n+    logMarker(ReactMarkerConstants.NATIVE_MODULE_INITIALIZE_START)\n+    beginSection(\n+      Systrace.TRACE_TAG_REACT, \"NativeModuleRegistry_notifyJSInstanceInitialized\"\n+    )\n+    try {\n+      for (module in modules.values) {\n+        module.markInitializable()\n+      }\n+    } finally {\n+      endSection(Systrace.TRACE_TAG_REACT)\n+      logMarker(ReactMarkerConstants.NATIVE_MODULE_INITIALIZE_END)\n+    }\n+  }\n+\n+  public fun onBatchComplete() {\n+    // The only native module that uses the onBatchComplete is the UI Manager. Hence, instead of\n+    // iterating over all the modules for find this one instance, and then calling it, we\n+    // short-circuit\n+    // the search, and simply call OnBatchComplete on the UI Manager.\n+    // With Fabric, UIManager would no longer be a NativeModule, so this call would simply go away\n+    assertLegacyArchitecture(\n+      \"NativeModuleRegistry.onBatchComplete()\", LegacyArchitectureLogLevel.WARNING\n+    )\n+    modules[\"UIManager\"]?.let {\n+      if (it.hasInstance()) {\n+        (it.module as OnBatchCompleteListener).onBatchComplete()\n+      }\n+    }\n+  }\n+\n+  public fun <T : NativeModule> hasModule(moduleInterface: Class<T>): Boolean {\n+    val annotation = moduleInterface.getAnnotation(ReactModule::class.java)\n+    requireNotNull(annotation) { \"Could not find @ReactModule annotation in class \" + moduleInterface.name }\n+    val name = annotation.name\n+    return modules.containsKey(name)\n+  }\n+\n+  public fun <T : NativeModule> getModule(moduleInterface: Class<T>): T {\n+    val annotation = moduleInterface.getAnnotation(ReactModule::class.java)\n+    requireNotNull(annotation) { \"Could not find @ReactModule annotation in class \" + moduleInterface.name }\n+    @Suppress(\"UNCHECKED_CAST\")\n+    return Assertions.assertNotNull(\n+      modules[annotation.name],\n+      (annotation.name\n+              + \" could not be found. Is it defined in \"\n+              + moduleInterface.name)\n+    )\n+      .module as T\n+  }\n+\n+  public fun hasModule(name: String): Boolean = modules.containsKey(name)\n+\n+  public fun getModule(name: String): NativeModule =\n+    Assertions.assertNotNull(",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2123335790",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51734,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/NativeModuleRegistry.kt",
        "discussion_id": "2123335790",
        "commented_code": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.bridge\n+\n+import com.facebook.infer.annotation.Assertions\n+import com.facebook.react.bridge.ReactMarker.logMarker\n+import com.facebook.react.common.annotations.internal.LegacyArchitecture\n+import com.facebook.react.common.annotations.internal.LegacyArchitectureLogLevel\n+import com.facebook.react.common.annotations.internal.LegacyArchitectureLogger.assertLegacyArchitecture\n+import com.facebook.react.module.annotations.ReactModule\n+import com.facebook.systrace.Systrace\n+import com.facebook.systrace.Systrace.beginSection\n+import com.facebook.systrace.Systrace.endSection\n+\n+/** A set of Java APIs to expose to a particular JavaScript instance. */\n+@LegacyArchitecture\n+public class NativeModuleRegistry(\n+    private val reactApplicationContext: ReactApplicationContext,\n+    private val modules: MutableMap<String, ModuleHolder>\n+) {\n+  private val moduleMap: Map<String, ModuleHolder>\n+    /** Private getters for combining NativeModuleRegistry's */\n+    get() = modules\n+\n+  public fun getJavaModules(jsInstance: JSInstance): Collection<JavaModuleWrapper> =\n+    ArrayList<JavaModuleWrapper>().apply {\n+      for ((_, value) in modules) {\n+        if (!value.isCxxModule) {\n+          add(JavaModuleWrapper(jsInstance, value))\n+        }\n+      }\n+    }\n+\n+  public val cxxModules: Collection<ModuleHolder>\n+    get() = ArrayList<ModuleHolder>().apply {\n+      for ((_, value) in modules) {\n+        if (value.isCxxModule) {\n+          add(value)\n+        }\n+      }\n+    }\n+\n+  /**\n+   * Adds any new modules to the current module registry\n+   */\n+  public fun registerModules(newRegister: NativeModuleRegistry) {\n+    Assertions.assertCondition(\n+      reactApplicationContext == newRegister.reactApplicationContext,\n+      \"Extending native modules with non-matching application contexts.\"\n+    )\n+\n+    val newModules = newRegister.moduleMap\n+\n+    for ((key, value) in newModules) {\n+      if (!modules.containsKey(key)) {\n+        modules[key] = value\n+      }\n+    }\n+  }\n+\n+  public fun notifyJSInstanceDestroy() {\n+    reactApplicationContext.assertOnNativeModulesQueueThread()\n+    beginSection(Systrace.TRACE_TAG_REACT, \"NativeModuleRegistry_notifyJSInstanceDestroy\")\n+    try {\n+      for (module in modules.values) {\n+        module.destroy()\n+      }\n+    } finally {\n+      endSection(Systrace.TRACE_TAG_REACT)\n+    }\n+  }\n+\n+  public fun notifyJSInstanceInitialized() {\n+    reactApplicationContext.assertOnNativeModulesQueueThread(\n+        \"From version React Native v0.44, \"\n+                + \"native modules are explicitly not initialized on the UI thread.\"\n+    )\n+    logMarker(ReactMarkerConstants.NATIVE_MODULE_INITIALIZE_START)\n+    beginSection(\n+      Systrace.TRACE_TAG_REACT, \"NativeModuleRegistry_notifyJSInstanceInitialized\"\n+    )\n+    try {\n+      for (module in modules.values) {\n+        module.markInitializable()\n+      }\n+    } finally {\n+      endSection(Systrace.TRACE_TAG_REACT)\n+      logMarker(ReactMarkerConstants.NATIVE_MODULE_INITIALIZE_END)\n+    }\n+  }\n+\n+  public fun onBatchComplete() {\n+    // The only native module that uses the onBatchComplete is the UI Manager. Hence, instead of\n+    // iterating over all the modules for find this one instance, and then calling it, we\n+    // short-circuit\n+    // the search, and simply call OnBatchComplete on the UI Manager.\n+    // With Fabric, UIManager would no longer be a NativeModule, so this call would simply go away\n+    assertLegacyArchitecture(\n+      \"NativeModuleRegistry.onBatchComplete()\", LegacyArchitectureLogLevel.WARNING\n+    )\n+    modules[\"UIManager\"]?.let {\n+      if (it.hasInstance()) {\n+        (it.module as OnBatchCompleteListener).onBatchComplete()\n+      }\n+    }\n+  }\n+\n+  public fun <T : NativeModule> hasModule(moduleInterface: Class<T>): Boolean {\n+    val annotation = moduleInterface.getAnnotation(ReactModule::class.java)\n+    requireNotNull(annotation) { \"Could not find @ReactModule annotation in class \" + moduleInterface.name }\n+    val name = annotation.name\n+    return modules.containsKey(name)\n+  }\n+\n+  public fun <T : NativeModule> getModule(moduleInterface: Class<T>): T {\n+    val annotation = moduleInterface.getAnnotation(ReactModule::class.java)\n+    requireNotNull(annotation) { \"Could not find @ReactModule annotation in class \" + moduleInterface.name }\n+    @Suppress(\"UNCHECKED_CAST\")\n+    return Assertions.assertNotNull(\n+      modules[annotation.name],\n+      (annotation.name\n+              + \" could not be found. Is it defined in \"\n+              + moduleInterface.name)\n+    )\n+      .module as T\n+  }\n+\n+  public fun hasModule(name: String): Boolean = modules.containsKey(name)\n+\n+  public fun getModule(name: String): NativeModule =\n+    Assertions.assertNotNull(",
        "comment_created_at": "2025-06-03T09:58:35+00:00",
        "comment_author": "cortinico",
        "comment_body": "use `checkNotNull` or `requireNotNull` as above",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2062649332",
    "pr_number": 50947,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/Inspector.kt",
    "created_at": "2025-04-27T14:54:20+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.bridge\n+\n+import com.facebook.common.logging.FLog\n+import com.facebook.jni.HybridData\n+import com.facebook.proguard.annotations.DoNotStrip\n+import com.facebook.react.common.ReactConstants\n+  \n+@DoNotStrip\n+public class Inspector private constructor(private val hybridData: HybridData) {\n+ \n+    public companion object {\n+        init {\n+            BridgeSoLoader.staticInit()\n+        }\n+\n+        @JvmStatic\n+        public fun getPages(): List<Page> {\n+            return try {\n+                instance().getPagesNative().toList()\n+            } catch (e: UnsatisfiedLinkError) {\n+                FLog.e(ReactConstants.TAG, \"Inspector doesn't work in open source yet\", e)\n+                emptyList()\n+            }\n+        }\n+\n+        @JvmStatic\n+        public fun connect(pageId: Int, remote: RemoteConnection): LocalConnection {\n+            return try {\n+                val local = instance().connectNative(pageId, remote)\n+                local ?: throw IllegalStateException(\"Can't open failed connection\")",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2062649332",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50947,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/Inspector.kt",
        "discussion_id": "2062649332",
        "commented_code": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.bridge\n+\n+import com.facebook.common.logging.FLog\n+import com.facebook.jni.HybridData\n+import com.facebook.proguard.annotations.DoNotStrip\n+import com.facebook.react.common.ReactConstants\n+  \n+@DoNotStrip\n+public class Inspector private constructor(private val hybridData: HybridData) {\n+ \n+    public companion object {\n+        init {\n+            BridgeSoLoader.staticInit()\n+        }\n+\n+        @JvmStatic\n+        public fun getPages(): List<Page> {\n+            return try {\n+                instance().getPagesNative().toList()\n+            } catch (e: UnsatisfiedLinkError) {\n+                FLog.e(ReactConstants.TAG, \"Inspector doesn't work in open source yet\", e)\n+                emptyList()\n+            }\n+        }\n+\n+        @JvmStatic\n+        public fun connect(pageId: Int, remote: RemoteConnection): LocalConnection {\n+            return try {\n+                val local = instance().connectNative(pageId, remote)\n+                local ?: throw IllegalStateException(\"Can't open failed connection\")",
        "comment_created_at": "2025-04-27T14:54:20+00:00",
        "comment_author": "mateoguzmana",
        "comment_body": "I think you can simplify this as:\r\n\r\n```suggestion\r\n                instance().connectNative(pageId, remote) ?: throw IllegalStateException(\"Can't open failed connection\")\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049159028",
    "pr_number": 50756,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/blob/BlobProvider.kt",
    "created_at": "2025-04-17T15:07:35+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+package com.facebook.react.modules.blob\n+\n+import android.content.ContentProvider\n+import android.content.ContentValues\n+import android.database.Cursor\n+import android.net.Uri\n+import android.os.ParcelFileDescriptor\n+import com.facebook.infer.annotation.Nullsafe\n+import com.facebook.react.ReactApplication\n+import java.io.FileNotFoundException\n+import java.io.IOException\n+import java.util.concurrent.ExecutorService\n+import java.util.concurrent.Executors\n+\n+public final class BlobProvider : ContentProvider() {\n+  private val executor: ExecutorService = Executors.newSingleThreadExecutor()\n+\n+  override fun onCreate(): Boolean {\n+    return true\n+  }\n+\n+  override fun query(\n+    uri: Uri,\n+    projection: Array<String>?,\n+    selection: String?,\n+    selectionArgs: Array<String>?,\n+    sortOrder: String?\n+  ): Cursor? {\n+    return null\n+  }\n+\n+  override fun getType(uri: Uri): String? {\n+    return null\n+  }\n+\n+  override fun insert(uri: Uri, values: ContentValues?): Uri? {\n+    return null\n+  }\n+\n+  override fun delete(uri: Uri, selection: String?, selectionArgs: Array<String>?): Int {\n+    return 0\n+  }\n+\n+  override fun update(\n+    uri: Uri,\n+    values: ContentValues?,\n+    selection: String?,\n+    selectionArgs: Array<String>?\n+  ): Int {\n+    return 0\n+  }\n+\n+  @Throws(FileNotFoundException::class)\n+  override fun openFile(uri: Uri, mode: String): ParcelFileDescriptor? {\n+    if (mode != \"r\") {\n+      throw FileNotFoundException(\"Cannot open $uri in mode '$mode'\")\n+    }\n+\n+    var blobModule: BlobModule? = null\n+    val context = context!!.applicationContext",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2049159028",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50756,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/blob/BlobProvider.kt",
        "discussion_id": "2049159028",
        "commented_code": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+package com.facebook.react.modules.blob\n+\n+import android.content.ContentProvider\n+import android.content.ContentValues\n+import android.database.Cursor\n+import android.net.Uri\n+import android.os.ParcelFileDescriptor\n+import com.facebook.infer.annotation.Nullsafe\n+import com.facebook.react.ReactApplication\n+import java.io.FileNotFoundException\n+import java.io.IOException\n+import java.util.concurrent.ExecutorService\n+import java.util.concurrent.Executors\n+\n+public final class BlobProvider : ContentProvider() {\n+  private val executor: ExecutorService = Executors.newSingleThreadExecutor()\n+\n+  override fun onCreate(): Boolean {\n+    return true\n+  }\n+\n+  override fun query(\n+    uri: Uri,\n+    projection: Array<String>?,\n+    selection: String?,\n+    selectionArgs: Array<String>?,\n+    sortOrder: String?\n+  ): Cursor? {\n+    return null\n+  }\n+\n+  override fun getType(uri: Uri): String? {\n+    return null\n+  }\n+\n+  override fun insert(uri: Uri, values: ContentValues?): Uri? {\n+    return null\n+  }\n+\n+  override fun delete(uri: Uri, selection: String?, selectionArgs: Array<String>?): Int {\n+    return 0\n+  }\n+\n+  override fun update(\n+    uri: Uri,\n+    values: ContentValues?,\n+    selection: String?,\n+    selectionArgs: Array<String>?\n+  ): Int {\n+    return 0\n+  }\n+\n+  @Throws(FileNotFoundException::class)\n+  override fun openFile(uri: Uri, mode: String): ParcelFileDescriptor? {\n+    if (mode != \"r\") {\n+      throw FileNotFoundException(\"Cannot open $uri in mode '$mode'\")\n+    }\n+\n+    var blobModule: BlobModule? = null\n+    val context = context!!.applicationContext",
        "comment_created_at": "2025-04-17T15:07:35+00:00",
        "comment_author": "mateoguzmana",
        "comment_body": "The `!!` implies that the context is not going to be null, is that guaranteed here?\r\n\r\nIf possible, let's find an alternative to avoid using it",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2047163093",
    "pr_number": 50754,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/DynamicFromObject.kt",
    "created_at": "2025-04-16T15:13:31+00:00",
    "commented_code": "+package com.facebook.react.bridge\n+\n+import com.facebook.common.logging.FLog\n+import com.facebook.react.common.ReactConstants\n+\n+public class DynamicFromObject(private var mObject: Any?) : Dynamic {\n+\n+  override fun recycle() {\n+    // Noop - nothing to recycle since there is no pooling\n+  }\n+\n+  override val isNull: Boolean\n+    get() = mObject == null\n+\n+\n+  override fun asBoolean(): Boolean {\n+    if (mObject !is Boolean) {\n+      throw ClassCastException(\"Dynamic value from Object is not a boolean\")\n+    }\n+    return mObject as Boolean\n+  }",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2047163093",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50754,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/DynamicFromObject.kt",
        "discussion_id": "2047163093",
        "commented_code": "@@ -0,0 +1,74 @@\n+package com.facebook.react.bridge\n+\n+import com.facebook.common.logging.FLog\n+import com.facebook.react.common.ReactConstants\n+\n+public class DynamicFromObject(private var mObject: Any?) : Dynamic {\n+\n+  override fun recycle() {\n+    // Noop - nothing to recycle since there is no pooling\n+  }\n+\n+  override val isNull: Boolean\n+    get() = mObject == null\n+\n+\n+  override fun asBoolean(): Boolean {\n+    if (mObject !is Boolean) {\n+      throw ClassCastException(\"Dynamic value from Object is not a boolean\")\n+    }\n+    return mObject as Boolean\n+  }",
        "comment_created_at": "2025-04-16T15:13:31+00:00",
        "comment_author": "mateoguzmana",
        "comment_body": "Can you try to avoid the unnecessary casting? you could turn the logic around to do something like this:\r\n\r\n```suggestion\r\n  override fun asBoolean(): Boolean {\r\n    if (mObject is Boolean) {\r\n      return mObject\r\n    }\r\n    throw ClassCastException(\"Dynamic value from Object is not a boolean\")\r\n  }\r\n```\r\n\r\nSame for the rest",
        "pr_file_module": null
      },
      {
        "comment_id": "2047746977",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50754,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/DynamicFromObject.kt",
        "discussion_id": "2047163093",
        "commented_code": "@@ -0,0 +1,74 @@\n+package com.facebook.react.bridge\n+\n+import com.facebook.common.logging.FLog\n+import com.facebook.react.common.ReactConstants\n+\n+public class DynamicFromObject(private var mObject: Any?) : Dynamic {\n+\n+  override fun recycle() {\n+    // Noop - nothing to recycle since there is no pooling\n+  }\n+\n+  override val isNull: Boolean\n+    get() = mObject == null\n+\n+\n+  override fun asBoolean(): Boolean {\n+    if (mObject !is Boolean) {\n+      throw ClassCastException(\"Dynamic value from Object is not a boolean\")\n+    }\n+    return mObject as Boolean\n+  }",
        "comment_created_at": "2025-04-16T20:53:59+00:00",
        "comment_author": "yasir6jan",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2048420783",
    "pr_number": 50754,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/DynamicFromObject.kt",
    "created_at": "2025-04-17T07:43:02+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+package com.facebook.react.bridge\n+\n+import com.facebook.common.logging.FLog\n+import com.facebook.infer.annotation.Nullsafe\n+import com.facebook.react.common.ReactConstants\n+\n+/** Implementation of Dynamic wrapping a ReadableArray.  */\n+@Nullsafe(Nullsafe.Mode.LOCAL)\n+public class DynamicFromObject(private val value: Any?) : Dynamic {\n+  override fun recycle() {\n+    // Noop - nothing to recycle since there is no pooling\n+  }\n+\n+  override val isNull: Boolean\n+    get() = value == null\n+\n+  override fun asBoolean(): Boolean {\n+    if (value is Boolean) {\n+      return value\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a boolean\")\n+  }\n+\n+  override fun asDouble(): Double {\n+    if (value is Number) {\n+      return value as Double\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a number\")\n+  }\n+\n+  override fun asInt(): Int {\n+    if (value is Number) {\n+      // Numbers from JS are always Doubles\n+      return (value as Double).toInt()\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a number\")\n+  }\n+\n+  override fun asString(): String? {\n+    if (value is String) {\n+      return value\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a string\")\n+  }\n+\n+  override fun asArray(): ReadableArray? {\n+    if (value is ReadableArray) {\n+      return value\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a ReadableArray\")\n+  }\n+\n+  override fun asMap(): ReadableMap? {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2048420783",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50754,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/DynamicFromObject.kt",
        "discussion_id": "2048420783",
        "commented_code": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+package com.facebook.react.bridge\n+\n+import com.facebook.common.logging.FLog\n+import com.facebook.infer.annotation.Nullsafe\n+import com.facebook.react.common.ReactConstants\n+\n+/** Implementation of Dynamic wrapping a ReadableArray.  */\n+@Nullsafe(Nullsafe.Mode.LOCAL)\n+public class DynamicFromObject(private val value: Any?) : Dynamic {\n+  override fun recycle() {\n+    // Noop - nothing to recycle since there is no pooling\n+  }\n+\n+  override val isNull: Boolean\n+    get() = value == null\n+\n+  override fun asBoolean(): Boolean {\n+    if (value is Boolean) {\n+      return value\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a boolean\")\n+  }\n+\n+  override fun asDouble(): Double {\n+    if (value is Number) {\n+      return value as Double\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a number\")\n+  }\n+\n+  override fun asInt(): Int {\n+    if (value is Number) {\n+      // Numbers from JS are always Doubles\n+      return (value as Double).toInt()\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a number\")\n+  }\n+\n+  override fun asString(): String? {\n+    if (value is String) {\n+      return value\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a string\")\n+  }\n+\n+  override fun asArray(): ReadableArray? {\n+    if (value is ReadableArray) {\n+      return value\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a ReadableArray\")\n+  }\n+\n+  override fun asMap(): ReadableMap? {",
        "comment_created_at": "2025-04-17T07:43:02+00:00",
        "comment_author": "alanleedev",
        "comment_body": "```suggestion\r\n  override fun asMap(): ReadableMap {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2048469937",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50754,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/DynamicFromObject.kt",
        "discussion_id": "2048420783",
        "commented_code": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+package com.facebook.react.bridge\n+\n+import com.facebook.common.logging.FLog\n+import com.facebook.infer.annotation.Nullsafe\n+import com.facebook.react.common.ReactConstants\n+\n+/** Implementation of Dynamic wrapping a ReadableArray.  */\n+@Nullsafe(Nullsafe.Mode.LOCAL)\n+public class DynamicFromObject(private val value: Any?) : Dynamic {\n+  override fun recycle() {\n+    // Noop - nothing to recycle since there is no pooling\n+  }\n+\n+  override val isNull: Boolean\n+    get() = value == null\n+\n+  override fun asBoolean(): Boolean {\n+    if (value is Boolean) {\n+      return value\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a boolean\")\n+  }\n+\n+  override fun asDouble(): Double {\n+    if (value is Number) {\n+      return value as Double\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a number\")\n+  }\n+\n+  override fun asInt(): Int {\n+    if (value is Number) {\n+      // Numbers from JS are always Doubles\n+      return (value as Double).toInt()\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a number\")\n+  }\n+\n+  override fun asString(): String? {\n+    if (value is String) {\n+      return value\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a string\")\n+  }\n+\n+  override fun asArray(): ReadableArray? {\n+    if (value is ReadableArray) {\n+      return value\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a ReadableArray\")\n+  }\n+\n+  override fun asMap(): ReadableMap? {",
        "comment_created_at": "2025-04-17T08:15:24+00:00",
        "comment_author": "alanleedev",
        "comment_body": "null is checked and throws exception so return value is always non-null. Same for others.",
        "pr_file_module": null
      },
      {
        "comment_id": "2048802133",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50754,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/DynamicFromObject.kt",
        "discussion_id": "2048420783",
        "commented_code": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+package com.facebook.react.bridge\n+\n+import com.facebook.common.logging.FLog\n+import com.facebook.infer.annotation.Nullsafe\n+import com.facebook.react.common.ReactConstants\n+\n+/** Implementation of Dynamic wrapping a ReadableArray.  */\n+@Nullsafe(Nullsafe.Mode.LOCAL)\n+public class DynamicFromObject(private val value: Any?) : Dynamic {\n+  override fun recycle() {\n+    // Noop - nothing to recycle since there is no pooling\n+  }\n+\n+  override val isNull: Boolean\n+    get() = value == null\n+\n+  override fun asBoolean(): Boolean {\n+    if (value is Boolean) {\n+      return value\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a boolean\")\n+  }\n+\n+  override fun asDouble(): Double {\n+    if (value is Number) {\n+      return value as Double\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a number\")\n+  }\n+\n+  override fun asInt(): Int {\n+    if (value is Number) {\n+      // Numbers from JS are always Doubles\n+      return (value as Double).toInt()\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a number\")\n+  }\n+\n+  override fun asString(): String? {\n+    if (value is String) {\n+      return value\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a string\")\n+  }\n+\n+  override fun asArray(): ReadableArray? {\n+    if (value is ReadableArray) {\n+      return value\n+    }\n+    throw ClassCastException(\"Dynamic value from Object is not a ReadableArray\")\n+  }\n+\n+  override fun asMap(): ReadableMap? {",
        "comment_created_at": "2025-04-17T12:01:35+00:00",
        "comment_author": "yasir6jan",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2033569480",
    "pr_number": 50532,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/frescosupport/FrescoBasedReactTextInlineImageSpan.kt",
    "created_at": "2025-04-08T16:19:55+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.views.text.frescosupport\n+\n+import android.content.res.Resources\n+import android.graphics.Canvas\n+import android.graphics.Paint\n+import android.graphics.PorterDuff\n+import android.graphics.drawable.Drawable\n+import android.net.Uri\n+import android.widget.TextView\n+import com.facebook.drawee.controller.AbstractDraweeControllerBuilder\n+import com.facebook.drawee.generic.GenericDraweeHierarchy\n+import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder\n+import com.facebook.drawee.view.DraweeHolder\n+import com.facebook.imagepipeline.request.ImageRequest\n+import com.facebook.imagepipeline.request.ImageRequestBuilder\n+import com.facebook.react.bridge.ReadableMap\n+import com.facebook.react.modules.fresco.ReactNetworkImageRequest\n+import com.facebook.react.uimanager.PixelUtil\n+import com.facebook.react.views.image.ImageResizeMode\n+import com.facebook.react.views.text.internal.span.TextInlineImageSpan\n+\n+/**\n+ * FrescoBasedTextInlineImageSpan is a span for Images that are inside <Text/>. It computes its size\n+ * based on the input size. When it is time to draw, it will use the Fresco framework to get the\n+ * right Drawable and let that draw.\n+ *\n+ * <p>Since Fresco needs to callback to the TextView that contains this, in the ViewManager, you\n+ * must tell the Span about the TextView\n+ *\n+ * <p>Note: It borrows code from DynamicDrawableSpan and if that code updates how it computes size\n+ * or draws, we need to update this as well.\n+ */\n+public class FrescoBasedReactTextInlineImageSpan(\n+    resources: Resources,\n+    height: Int,\n+    width: Int,\n+    private val tintColor: Int,\n+    uri: Uri?,\n+    private val headers: ReadableMap?,\n+    private val draweeControllerBuilder: AbstractDraweeControllerBuilder<*, ImageRequest, *, *>,\n+    private val callerContext: Any?,\n+    private val resizeMode: String?\n+) : TextInlineImageSpan() {\n+\n+    private var textView: TextView? = null\n+    private val _uri: Uri = uri ?: Uri.EMPTY\n+    private val _width: Int = PixelUtil.toPixelFromDIP(width.toDouble()).toInt()\n+    private val _height: Int = PixelUtil.toPixelFromDIP(height.toDouble()).toInt()\n+    private val draweeHolder: DraweeHolder<GenericDraweeHierarchy> =\n+        DraweeHolder(GenericDraweeHierarchyBuilder.newInstance(resources).build())\n+\n+    override val width: Int\n+        get() = _width\n+\n+    override val height: Int\n+        get() = _height\n+\n+    override var drawable: Drawable? = null\n+        private set\n+\n+    /**\n+     * The ReactTextView that holds this ImageSpan is responsible for passing these methods on so\n+     * that we can do proper lifetime management for Fresco\n+     */\n+    public override fun onDetachedFromWindow() {\n+        draweeHolder.onDetach()\n+    }\n+\n+    public override fun onStartTemporaryDetach() {\n+        draweeHolder.onDetach()\n+    }\n+\n+    public override fun onAttachedToWindow() {\n+        draweeHolder.onAttach()\n+    }\n+\n+    public override fun onFinishTemporaryDetach() {\n+        draweeHolder.onAttach()\n+    }\n+\n+    public override fun getSize(\n+        paint: Paint,\n+        text: CharSequence,\n+        start: Int,\n+        end: Int,\n+        fm: Paint.FontMetricsInt?\n+    ): Int {\n+        // NOTE: This getSize code is copied from DynamicDrawableSpan and modified\n+        // to not use a Drawable\n+\n+        fm?.let {\n+            it.ascent = -_height\n+            it.descent = 0\n+\n+            it.top = it.ascent\n+            it.bottom = 0\n+        }\n+\n+        return _width\n+    }\n+\n+    public override fun setTextView(textView: TextView?) {\n+        this.textView = textView\n+    }\n+\n+    public override fun draw(\n+        canvas: Canvas,\n+        text: CharSequence,\n+        start: Int,\n+        end: Int,\n+        x: Float,\n+        top: Int,\n+        y: Int,\n+        bottom: Int,\n+        paint: Paint\n+    ) {\n+        if (drawable == null) {\n+            val imageRequestBuilder = ImageRequestBuilder.newBuilderWithSource(_uri)\n+            val imageRequest: ImageRequest =\n+                ReactNetworkImageRequest.fromBuilderWithHeaders(imageRequestBuilder, headers)\n+\n+            draweeHolder.hierarchy.setActualImageScaleType(ImageResizeMode.toScaleType(resizeMode))\n+\n+            draweeControllerBuilder.reset()\n+            draweeControllerBuilder.oldController = draweeHolder.controller\n+\n+            callerContext?.let { draweeControllerBuilder.setCallerContext(it) }\n+\n+            draweeControllerBuilder.setImageRequest(imageRequest)\n+\n+            val draweeController = draweeControllerBuilder.build()\n+            draweeHolder.controller = draweeController\n+            draweeControllerBuilder.reset()\n+\n+            drawable = draweeHolder.topLevelDrawable!!\n+            drawable!!.setBounds(0, 0, _width, _height)\n+            drawable!!.takeIf { tintColor != 0 }?.setColorFilter(tintColor, PorterDuff.Mode.SRC_IN)\n+            drawable!!.callback = this.textView",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2033569480",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50532,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/frescosupport/FrescoBasedReactTextInlineImageSpan.kt",
        "discussion_id": "2033569480",
        "commented_code": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.views.text.frescosupport\n+\n+import android.content.res.Resources\n+import android.graphics.Canvas\n+import android.graphics.Paint\n+import android.graphics.PorterDuff\n+import android.graphics.drawable.Drawable\n+import android.net.Uri\n+import android.widget.TextView\n+import com.facebook.drawee.controller.AbstractDraweeControllerBuilder\n+import com.facebook.drawee.generic.GenericDraweeHierarchy\n+import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder\n+import com.facebook.drawee.view.DraweeHolder\n+import com.facebook.imagepipeline.request.ImageRequest\n+import com.facebook.imagepipeline.request.ImageRequestBuilder\n+import com.facebook.react.bridge.ReadableMap\n+import com.facebook.react.modules.fresco.ReactNetworkImageRequest\n+import com.facebook.react.uimanager.PixelUtil\n+import com.facebook.react.views.image.ImageResizeMode\n+import com.facebook.react.views.text.internal.span.TextInlineImageSpan\n+\n+/**\n+ * FrescoBasedTextInlineImageSpan is a span for Images that are inside <Text/>. It computes its size\n+ * based on the input size. When it is time to draw, it will use the Fresco framework to get the\n+ * right Drawable and let that draw.\n+ *\n+ * <p>Since Fresco needs to callback to the TextView that contains this, in the ViewManager, you\n+ * must tell the Span about the TextView\n+ *\n+ * <p>Note: It borrows code from DynamicDrawableSpan and if that code updates how it computes size\n+ * or draws, we need to update this as well.\n+ */\n+public class FrescoBasedReactTextInlineImageSpan(\n+    resources: Resources,\n+    height: Int,\n+    width: Int,\n+    private val tintColor: Int,\n+    uri: Uri?,\n+    private val headers: ReadableMap?,\n+    private val draweeControllerBuilder: AbstractDraweeControllerBuilder<*, ImageRequest, *, *>,\n+    private val callerContext: Any?,\n+    private val resizeMode: String?\n+) : TextInlineImageSpan() {\n+\n+    private var textView: TextView? = null\n+    private val _uri: Uri = uri ?: Uri.EMPTY\n+    private val _width: Int = PixelUtil.toPixelFromDIP(width.toDouble()).toInt()\n+    private val _height: Int = PixelUtil.toPixelFromDIP(height.toDouble()).toInt()\n+    private val draweeHolder: DraweeHolder<GenericDraweeHierarchy> =\n+        DraweeHolder(GenericDraweeHierarchyBuilder.newInstance(resources).build())\n+\n+    override val width: Int\n+        get() = _width\n+\n+    override val height: Int\n+        get() = _height\n+\n+    override var drawable: Drawable? = null\n+        private set\n+\n+    /**\n+     * The ReactTextView that holds this ImageSpan is responsible for passing these methods on so\n+     * that we can do proper lifetime management for Fresco\n+     */\n+    public override fun onDetachedFromWindow() {\n+        draweeHolder.onDetach()\n+    }\n+\n+    public override fun onStartTemporaryDetach() {\n+        draweeHolder.onDetach()\n+    }\n+\n+    public override fun onAttachedToWindow() {\n+        draweeHolder.onAttach()\n+    }\n+\n+    public override fun onFinishTemporaryDetach() {\n+        draweeHolder.onAttach()\n+    }\n+\n+    public override fun getSize(\n+        paint: Paint,\n+        text: CharSequence,\n+        start: Int,\n+        end: Int,\n+        fm: Paint.FontMetricsInt?\n+    ): Int {\n+        // NOTE: This getSize code is copied from DynamicDrawableSpan and modified\n+        // to not use a Drawable\n+\n+        fm?.let {\n+            it.ascent = -_height\n+            it.descent = 0\n+\n+            it.top = it.ascent\n+            it.bottom = 0\n+        }\n+\n+        return _width\n+    }\n+\n+    public override fun setTextView(textView: TextView?) {\n+        this.textView = textView\n+    }\n+\n+    public override fun draw(\n+        canvas: Canvas,\n+        text: CharSequence,\n+        start: Int,\n+        end: Int,\n+        x: Float,\n+        top: Int,\n+        y: Int,\n+        bottom: Int,\n+        paint: Paint\n+    ) {\n+        if (drawable == null) {\n+            val imageRequestBuilder = ImageRequestBuilder.newBuilderWithSource(_uri)\n+            val imageRequest: ImageRequest =\n+                ReactNetworkImageRequest.fromBuilderWithHeaders(imageRequestBuilder, headers)\n+\n+            draweeHolder.hierarchy.setActualImageScaleType(ImageResizeMode.toScaleType(resizeMode))\n+\n+            draweeControllerBuilder.reset()\n+            draweeControllerBuilder.oldController = draweeHolder.controller\n+\n+            callerContext?.let { draweeControllerBuilder.setCallerContext(it) }\n+\n+            draweeControllerBuilder.setImageRequest(imageRequest)\n+\n+            val draweeController = draweeControllerBuilder.build()\n+            draweeHolder.controller = draweeController\n+            draweeControllerBuilder.reset()\n+\n+            drawable = draweeHolder.topLevelDrawable!!\n+            drawable!!.setBounds(0, 0, _width, _height)\n+            drawable!!.takeIf { tintColor != 0 }?.setColorFilter(tintColor, PorterDuff.Mode.SRC_IN)\n+            drawable!!.callback = this.textView",
        "comment_created_at": "2025-04-08T16:19:55+00:00",
        "comment_author": "mateoguzmana",
        "comment_body": "!! assumes the value will never be null \u2014 is that guaranteed here? If not, we might want to add a proper null check.",
        "pr_file_module": null
      },
      {
        "comment_id": "2035390233",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50532,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/frescosupport/FrescoBasedReactTextInlineImageSpan.kt",
        "discussion_id": "2033569480",
        "commented_code": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.views.text.frescosupport\n+\n+import android.content.res.Resources\n+import android.graphics.Canvas\n+import android.graphics.Paint\n+import android.graphics.PorterDuff\n+import android.graphics.drawable.Drawable\n+import android.net.Uri\n+import android.widget.TextView\n+import com.facebook.drawee.controller.AbstractDraweeControllerBuilder\n+import com.facebook.drawee.generic.GenericDraweeHierarchy\n+import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder\n+import com.facebook.drawee.view.DraweeHolder\n+import com.facebook.imagepipeline.request.ImageRequest\n+import com.facebook.imagepipeline.request.ImageRequestBuilder\n+import com.facebook.react.bridge.ReadableMap\n+import com.facebook.react.modules.fresco.ReactNetworkImageRequest\n+import com.facebook.react.uimanager.PixelUtil\n+import com.facebook.react.views.image.ImageResizeMode\n+import com.facebook.react.views.text.internal.span.TextInlineImageSpan\n+\n+/**\n+ * FrescoBasedTextInlineImageSpan is a span for Images that are inside <Text/>. It computes its size\n+ * based on the input size. When it is time to draw, it will use the Fresco framework to get the\n+ * right Drawable and let that draw.\n+ *\n+ * <p>Since Fresco needs to callback to the TextView that contains this, in the ViewManager, you\n+ * must tell the Span about the TextView\n+ *\n+ * <p>Note: It borrows code from DynamicDrawableSpan and if that code updates how it computes size\n+ * or draws, we need to update this as well.\n+ */\n+public class FrescoBasedReactTextInlineImageSpan(\n+    resources: Resources,\n+    height: Int,\n+    width: Int,\n+    private val tintColor: Int,\n+    uri: Uri?,\n+    private val headers: ReadableMap?,\n+    private val draweeControllerBuilder: AbstractDraweeControllerBuilder<*, ImageRequest, *, *>,\n+    private val callerContext: Any?,\n+    private val resizeMode: String?\n+) : TextInlineImageSpan() {\n+\n+    private var textView: TextView? = null\n+    private val _uri: Uri = uri ?: Uri.EMPTY\n+    private val _width: Int = PixelUtil.toPixelFromDIP(width.toDouble()).toInt()\n+    private val _height: Int = PixelUtil.toPixelFromDIP(height.toDouble()).toInt()\n+    private val draweeHolder: DraweeHolder<GenericDraweeHierarchy> =\n+        DraweeHolder(GenericDraweeHierarchyBuilder.newInstance(resources).build())\n+\n+    override val width: Int\n+        get() = _width\n+\n+    override val height: Int\n+        get() = _height\n+\n+    override var drawable: Drawable? = null\n+        private set\n+\n+    /**\n+     * The ReactTextView that holds this ImageSpan is responsible for passing these methods on so\n+     * that we can do proper lifetime management for Fresco\n+     */\n+    public override fun onDetachedFromWindow() {\n+        draweeHolder.onDetach()\n+    }\n+\n+    public override fun onStartTemporaryDetach() {\n+        draweeHolder.onDetach()\n+    }\n+\n+    public override fun onAttachedToWindow() {\n+        draweeHolder.onAttach()\n+    }\n+\n+    public override fun onFinishTemporaryDetach() {\n+        draweeHolder.onAttach()\n+    }\n+\n+    public override fun getSize(\n+        paint: Paint,\n+        text: CharSequence,\n+        start: Int,\n+        end: Int,\n+        fm: Paint.FontMetricsInt?\n+    ): Int {\n+        // NOTE: This getSize code is copied from DynamicDrawableSpan and modified\n+        // to not use a Drawable\n+\n+        fm?.let {\n+            it.ascent = -_height\n+            it.descent = 0\n+\n+            it.top = it.ascent\n+            it.bottom = 0\n+        }\n+\n+        return _width\n+    }\n+\n+    public override fun setTextView(textView: TextView?) {\n+        this.textView = textView\n+    }\n+\n+    public override fun draw(\n+        canvas: Canvas,\n+        text: CharSequence,\n+        start: Int,\n+        end: Int,\n+        x: Float,\n+        top: Int,\n+        y: Int,\n+        bottom: Int,\n+        paint: Paint\n+    ) {\n+        if (drawable == null) {\n+            val imageRequestBuilder = ImageRequestBuilder.newBuilderWithSource(_uri)\n+            val imageRequest: ImageRequest =\n+                ReactNetworkImageRequest.fromBuilderWithHeaders(imageRequestBuilder, headers)\n+\n+            draweeHolder.hierarchy.setActualImageScaleType(ImageResizeMode.toScaleType(resizeMode))\n+\n+            draweeControllerBuilder.reset()\n+            draweeControllerBuilder.oldController = draweeHolder.controller\n+\n+            callerContext?.let { draweeControllerBuilder.setCallerContext(it) }\n+\n+            draweeControllerBuilder.setImageRequest(imageRequest)\n+\n+            val draweeController = draweeControllerBuilder.build()\n+            draweeHolder.controller = draweeController\n+            draweeControllerBuilder.reset()\n+\n+            drawable = draweeHolder.topLevelDrawable!!\n+            drawable!!.setBounds(0, 0, _width, _height)\n+            drawable!!.takeIf { tintColor != 0 }?.setColorFilter(tintColor, PorterDuff.Mode.SRC_IN)\n+            drawable!!.callback = this.textView",
        "comment_created_at": "2025-04-09T13:34:15+00:00",
        "comment_author": "gouravkhunger",
        "comment_body": "The original java implementation uses `Preconditions.checkNotNull`\r\n\r\nhttps://github.com/facebook/react-native/blob/a511c1bdeefb0b8a89ee804cb55bed793d761404/packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/frescosupport/FrescoBasedReactTextInlineImageSpan.java#L154\r\n\r\nwhich throws a [NPE](https://guava.dev/releases/19.0/api/docs/com/google/common/base/Preconditions.html#checkNotNull(T)) if the passed reference is null just how `!!` would.",
        "pr_file_module": null
      },
      {
        "comment_id": "2035707693",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50532,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/frescosupport/FrescoBasedReactTextInlineImageSpan.kt",
        "discussion_id": "2033569480",
        "commented_code": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.views.text.frescosupport\n+\n+import android.content.res.Resources\n+import android.graphics.Canvas\n+import android.graphics.Paint\n+import android.graphics.PorterDuff\n+import android.graphics.drawable.Drawable\n+import android.net.Uri\n+import android.widget.TextView\n+import com.facebook.drawee.controller.AbstractDraweeControllerBuilder\n+import com.facebook.drawee.generic.GenericDraweeHierarchy\n+import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder\n+import com.facebook.drawee.view.DraweeHolder\n+import com.facebook.imagepipeline.request.ImageRequest\n+import com.facebook.imagepipeline.request.ImageRequestBuilder\n+import com.facebook.react.bridge.ReadableMap\n+import com.facebook.react.modules.fresco.ReactNetworkImageRequest\n+import com.facebook.react.uimanager.PixelUtil\n+import com.facebook.react.views.image.ImageResizeMode\n+import com.facebook.react.views.text.internal.span.TextInlineImageSpan\n+\n+/**\n+ * FrescoBasedTextInlineImageSpan is a span for Images that are inside <Text/>. It computes its size\n+ * based on the input size. When it is time to draw, it will use the Fresco framework to get the\n+ * right Drawable and let that draw.\n+ *\n+ * <p>Since Fresco needs to callback to the TextView that contains this, in the ViewManager, you\n+ * must tell the Span about the TextView\n+ *\n+ * <p>Note: It borrows code from DynamicDrawableSpan and if that code updates how it computes size\n+ * or draws, we need to update this as well.\n+ */\n+public class FrescoBasedReactTextInlineImageSpan(\n+    resources: Resources,\n+    height: Int,\n+    width: Int,\n+    private val tintColor: Int,\n+    uri: Uri?,\n+    private val headers: ReadableMap?,\n+    private val draweeControllerBuilder: AbstractDraweeControllerBuilder<*, ImageRequest, *, *>,\n+    private val callerContext: Any?,\n+    private val resizeMode: String?\n+) : TextInlineImageSpan() {\n+\n+    private var textView: TextView? = null\n+    private val _uri: Uri = uri ?: Uri.EMPTY\n+    private val _width: Int = PixelUtil.toPixelFromDIP(width.toDouble()).toInt()\n+    private val _height: Int = PixelUtil.toPixelFromDIP(height.toDouble()).toInt()\n+    private val draweeHolder: DraweeHolder<GenericDraweeHierarchy> =\n+        DraweeHolder(GenericDraweeHierarchyBuilder.newInstance(resources).build())\n+\n+    override val width: Int\n+        get() = _width\n+\n+    override val height: Int\n+        get() = _height\n+\n+    override var drawable: Drawable? = null\n+        private set\n+\n+    /**\n+     * The ReactTextView that holds this ImageSpan is responsible for passing these methods on so\n+     * that we can do proper lifetime management for Fresco\n+     */\n+    public override fun onDetachedFromWindow() {\n+        draweeHolder.onDetach()\n+    }\n+\n+    public override fun onStartTemporaryDetach() {\n+        draweeHolder.onDetach()\n+    }\n+\n+    public override fun onAttachedToWindow() {\n+        draweeHolder.onAttach()\n+    }\n+\n+    public override fun onFinishTemporaryDetach() {\n+        draweeHolder.onAttach()\n+    }\n+\n+    public override fun getSize(\n+        paint: Paint,\n+        text: CharSequence,\n+        start: Int,\n+        end: Int,\n+        fm: Paint.FontMetricsInt?\n+    ): Int {\n+        // NOTE: This getSize code is copied from DynamicDrawableSpan and modified\n+        // to not use a Drawable\n+\n+        fm?.let {\n+            it.ascent = -_height\n+            it.descent = 0\n+\n+            it.top = it.ascent\n+            it.bottom = 0\n+        }\n+\n+        return _width\n+    }\n+\n+    public override fun setTextView(textView: TextView?) {\n+        this.textView = textView\n+    }\n+\n+    public override fun draw(\n+        canvas: Canvas,\n+        text: CharSequence,\n+        start: Int,\n+        end: Int,\n+        x: Float,\n+        top: Int,\n+        y: Int,\n+        bottom: Int,\n+        paint: Paint\n+    ) {\n+        if (drawable == null) {\n+            val imageRequestBuilder = ImageRequestBuilder.newBuilderWithSource(_uri)\n+            val imageRequest: ImageRequest =\n+                ReactNetworkImageRequest.fromBuilderWithHeaders(imageRequestBuilder, headers)\n+\n+            draweeHolder.hierarchy.setActualImageScaleType(ImageResizeMode.toScaleType(resizeMode))\n+\n+            draweeControllerBuilder.reset()\n+            draweeControllerBuilder.oldController = draweeHolder.controller\n+\n+            callerContext?.let { draweeControllerBuilder.setCallerContext(it) }\n+\n+            draweeControllerBuilder.setImageRequest(imageRequest)\n+\n+            val draweeController = draweeControllerBuilder.build()\n+            draweeHolder.controller = draweeController\n+            draweeControllerBuilder.reset()\n+\n+            drawable = draweeHolder.topLevelDrawable!!\n+            drawable!!.setBounds(0, 0, _width, _height)\n+            drawable!!.takeIf { tintColor != 0 }?.setColorFilter(tintColor, PorterDuff.Mode.SRC_IN)\n+            drawable!!.callback = this.textView",
        "comment_created_at": "2025-04-09T16:16:52+00:00",
        "comment_author": "mateoguzmana",
        "comment_body": "Understood. In this case, to make it cleaner, I think it's better to keep using the Kotlin equivalent [checkNotNull](https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/check-not-null.html), which would behave the same, and we wouldn't need to use the `!!` operator. Could you try that?",
        "pr_file_module": null
      },
      {
        "comment_id": "2035890152",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50532,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/frescosupport/FrescoBasedReactTextInlineImageSpan.kt",
        "discussion_id": "2033569480",
        "commented_code": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.views.text.frescosupport\n+\n+import android.content.res.Resources\n+import android.graphics.Canvas\n+import android.graphics.Paint\n+import android.graphics.PorterDuff\n+import android.graphics.drawable.Drawable\n+import android.net.Uri\n+import android.widget.TextView\n+import com.facebook.drawee.controller.AbstractDraweeControllerBuilder\n+import com.facebook.drawee.generic.GenericDraweeHierarchy\n+import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder\n+import com.facebook.drawee.view.DraweeHolder\n+import com.facebook.imagepipeline.request.ImageRequest\n+import com.facebook.imagepipeline.request.ImageRequestBuilder\n+import com.facebook.react.bridge.ReadableMap\n+import com.facebook.react.modules.fresco.ReactNetworkImageRequest\n+import com.facebook.react.uimanager.PixelUtil\n+import com.facebook.react.views.image.ImageResizeMode\n+import com.facebook.react.views.text.internal.span.TextInlineImageSpan\n+\n+/**\n+ * FrescoBasedTextInlineImageSpan is a span for Images that are inside <Text/>. It computes its size\n+ * based on the input size. When it is time to draw, it will use the Fresco framework to get the\n+ * right Drawable and let that draw.\n+ *\n+ * <p>Since Fresco needs to callback to the TextView that contains this, in the ViewManager, you\n+ * must tell the Span about the TextView\n+ *\n+ * <p>Note: It borrows code from DynamicDrawableSpan and if that code updates how it computes size\n+ * or draws, we need to update this as well.\n+ */\n+public class FrescoBasedReactTextInlineImageSpan(\n+    resources: Resources,\n+    height: Int,\n+    width: Int,\n+    private val tintColor: Int,\n+    uri: Uri?,\n+    private val headers: ReadableMap?,\n+    private val draweeControllerBuilder: AbstractDraweeControllerBuilder<*, ImageRequest, *, *>,\n+    private val callerContext: Any?,\n+    private val resizeMode: String?\n+) : TextInlineImageSpan() {\n+\n+    private var textView: TextView? = null\n+    private val _uri: Uri = uri ?: Uri.EMPTY\n+    private val _width: Int = PixelUtil.toPixelFromDIP(width.toDouble()).toInt()\n+    private val _height: Int = PixelUtil.toPixelFromDIP(height.toDouble()).toInt()\n+    private val draweeHolder: DraweeHolder<GenericDraweeHierarchy> =\n+        DraweeHolder(GenericDraweeHierarchyBuilder.newInstance(resources).build())\n+\n+    override val width: Int\n+        get() = _width\n+\n+    override val height: Int\n+        get() = _height\n+\n+    override var drawable: Drawable? = null\n+        private set\n+\n+    /**\n+     * The ReactTextView that holds this ImageSpan is responsible for passing these methods on so\n+     * that we can do proper lifetime management for Fresco\n+     */\n+    public override fun onDetachedFromWindow() {\n+        draweeHolder.onDetach()\n+    }\n+\n+    public override fun onStartTemporaryDetach() {\n+        draweeHolder.onDetach()\n+    }\n+\n+    public override fun onAttachedToWindow() {\n+        draweeHolder.onAttach()\n+    }\n+\n+    public override fun onFinishTemporaryDetach() {\n+        draweeHolder.onAttach()\n+    }\n+\n+    public override fun getSize(\n+        paint: Paint,\n+        text: CharSequence,\n+        start: Int,\n+        end: Int,\n+        fm: Paint.FontMetricsInt?\n+    ): Int {\n+        // NOTE: This getSize code is copied from DynamicDrawableSpan and modified\n+        // to not use a Drawable\n+\n+        fm?.let {\n+            it.ascent = -_height\n+            it.descent = 0\n+\n+            it.top = it.ascent\n+            it.bottom = 0\n+        }\n+\n+        return _width\n+    }\n+\n+    public override fun setTextView(textView: TextView?) {\n+        this.textView = textView\n+    }\n+\n+    public override fun draw(\n+        canvas: Canvas,\n+        text: CharSequence,\n+        start: Int,\n+        end: Int,\n+        x: Float,\n+        top: Int,\n+        y: Int,\n+        bottom: Int,\n+        paint: Paint\n+    ) {\n+        if (drawable == null) {\n+            val imageRequestBuilder = ImageRequestBuilder.newBuilderWithSource(_uri)\n+            val imageRequest: ImageRequest =\n+                ReactNetworkImageRequest.fromBuilderWithHeaders(imageRequestBuilder, headers)\n+\n+            draweeHolder.hierarchy.setActualImageScaleType(ImageResizeMode.toScaleType(resizeMode))\n+\n+            draweeControllerBuilder.reset()\n+            draweeControllerBuilder.oldController = draweeHolder.controller\n+\n+            callerContext?.let { draweeControllerBuilder.setCallerContext(it) }\n+\n+            draweeControllerBuilder.setImageRequest(imageRequest)\n+\n+            val draweeController = draweeControllerBuilder.build()\n+            draweeHolder.controller = draweeController\n+            draweeControllerBuilder.reset()\n+\n+            drawable = draweeHolder.topLevelDrawable!!\n+            drawable!!.setBounds(0, 0, _width, _height)\n+            drawable!!.takeIf { tintColor != 0 }?.setColorFilter(tintColor, PorterDuff.Mode.SRC_IN)\n+            drawable!!.callback = this.textView",
        "comment_created_at": "2025-04-09T18:16:35+00:00",
        "comment_author": "gouravkhunger",
        "comment_body": "Hi @mateoguzmana I've used that. PTAL",
        "pr_file_module": null
      },
      {
        "comment_id": "2035894872",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50532,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/frescosupport/FrescoBasedReactTextInlineImageSpan.kt",
        "discussion_id": "2033569480",
        "commented_code": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.views.text.frescosupport\n+\n+import android.content.res.Resources\n+import android.graphics.Canvas\n+import android.graphics.Paint\n+import android.graphics.PorterDuff\n+import android.graphics.drawable.Drawable\n+import android.net.Uri\n+import android.widget.TextView\n+import com.facebook.drawee.controller.AbstractDraweeControllerBuilder\n+import com.facebook.drawee.generic.GenericDraweeHierarchy\n+import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder\n+import com.facebook.drawee.view.DraweeHolder\n+import com.facebook.imagepipeline.request.ImageRequest\n+import com.facebook.imagepipeline.request.ImageRequestBuilder\n+import com.facebook.react.bridge.ReadableMap\n+import com.facebook.react.modules.fresco.ReactNetworkImageRequest\n+import com.facebook.react.uimanager.PixelUtil\n+import com.facebook.react.views.image.ImageResizeMode\n+import com.facebook.react.views.text.internal.span.TextInlineImageSpan\n+\n+/**\n+ * FrescoBasedTextInlineImageSpan is a span for Images that are inside <Text/>. It computes its size\n+ * based on the input size. When it is time to draw, it will use the Fresco framework to get the\n+ * right Drawable and let that draw.\n+ *\n+ * <p>Since Fresco needs to callback to the TextView that contains this, in the ViewManager, you\n+ * must tell the Span about the TextView\n+ *\n+ * <p>Note: It borrows code from DynamicDrawableSpan and if that code updates how it computes size\n+ * or draws, we need to update this as well.\n+ */\n+public class FrescoBasedReactTextInlineImageSpan(\n+    resources: Resources,\n+    height: Int,\n+    width: Int,\n+    private val tintColor: Int,\n+    uri: Uri?,\n+    private val headers: ReadableMap?,\n+    private val draweeControllerBuilder: AbstractDraweeControllerBuilder<*, ImageRequest, *, *>,\n+    private val callerContext: Any?,\n+    private val resizeMode: String?\n+) : TextInlineImageSpan() {\n+\n+    private var textView: TextView? = null\n+    private val _uri: Uri = uri ?: Uri.EMPTY\n+    private val _width: Int = PixelUtil.toPixelFromDIP(width.toDouble()).toInt()\n+    private val _height: Int = PixelUtil.toPixelFromDIP(height.toDouble()).toInt()\n+    private val draweeHolder: DraweeHolder<GenericDraweeHierarchy> =\n+        DraweeHolder(GenericDraweeHierarchyBuilder.newInstance(resources).build())\n+\n+    override val width: Int\n+        get() = _width\n+\n+    override val height: Int\n+        get() = _height\n+\n+    override var drawable: Drawable? = null\n+        private set\n+\n+    /**\n+     * The ReactTextView that holds this ImageSpan is responsible for passing these methods on so\n+     * that we can do proper lifetime management for Fresco\n+     */\n+    public override fun onDetachedFromWindow() {\n+        draweeHolder.onDetach()\n+    }\n+\n+    public override fun onStartTemporaryDetach() {\n+        draweeHolder.onDetach()\n+    }\n+\n+    public override fun onAttachedToWindow() {\n+        draweeHolder.onAttach()\n+    }\n+\n+    public override fun onFinishTemporaryDetach() {\n+        draweeHolder.onAttach()\n+    }\n+\n+    public override fun getSize(\n+        paint: Paint,\n+        text: CharSequence,\n+        start: Int,\n+        end: Int,\n+        fm: Paint.FontMetricsInt?\n+    ): Int {\n+        // NOTE: This getSize code is copied from DynamicDrawableSpan and modified\n+        // to not use a Drawable\n+\n+        fm?.let {\n+            it.ascent = -_height\n+            it.descent = 0\n+\n+            it.top = it.ascent\n+            it.bottom = 0\n+        }\n+\n+        return _width\n+    }\n+\n+    public override fun setTextView(textView: TextView?) {\n+        this.textView = textView\n+    }\n+\n+    public override fun draw(\n+        canvas: Canvas,\n+        text: CharSequence,\n+        start: Int,\n+        end: Int,\n+        x: Float,\n+        top: Int,\n+        y: Int,\n+        bottom: Int,\n+        paint: Paint\n+    ) {\n+        if (drawable == null) {\n+            val imageRequestBuilder = ImageRequestBuilder.newBuilderWithSource(_uri)\n+            val imageRequest: ImageRequest =\n+                ReactNetworkImageRequest.fromBuilderWithHeaders(imageRequestBuilder, headers)\n+\n+            draweeHolder.hierarchy.setActualImageScaleType(ImageResizeMode.toScaleType(resizeMode))\n+\n+            draweeControllerBuilder.reset()\n+            draweeControllerBuilder.oldController = draweeHolder.controller\n+\n+            callerContext?.let { draweeControllerBuilder.setCallerContext(it) }\n+\n+            draweeControllerBuilder.setImageRequest(imageRequest)\n+\n+            val draweeController = draweeControllerBuilder.build()\n+            draweeHolder.controller = draweeController\n+            draweeControllerBuilder.reset()\n+\n+            drawable = draweeHolder.topLevelDrawable!!\n+            drawable!!.setBounds(0, 0, _width, _height)\n+            drawable!!.takeIf { tintColor != 0 }?.setColorFilter(tintColor, PorterDuff.Mode.SRC_IN)\n+            drawable!!.callback = this.textView",
        "comment_created_at": "2025-04-09T18:20:03+00:00",
        "comment_author": "gouravkhunger",
        "comment_body": "Although we will have to use it here because kotlin won't infer that the object is asserted to be non null in the scope.\r\n\r\nhttps://github.com/facebook/react-native/blob/e3136d22923bf7afbdca207d898e07a76a22b19b/packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/frescosupport/FrescoBasedReactTextInlineImageSpan.kt#L166-L169\r\n\r\nTo avoid `!!` have to use a new variable like so:\r\n\r\n```kotlin\r\nval _drawable = checkNotNull(drawable) // might have to use val _drawable: Drawable\r\n// _drawable can be used without !!\r\n```\r\n\r\nIf you believe that's better I can do that. Thanks!",
        "pr_file_module": null
      },
      {
        "comment_id": "2035932138",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50532,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/frescosupport/FrescoBasedReactTextInlineImageSpan.kt",
        "discussion_id": "2033569480",
        "commented_code": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.views.text.frescosupport\n+\n+import android.content.res.Resources\n+import android.graphics.Canvas\n+import android.graphics.Paint\n+import android.graphics.PorterDuff\n+import android.graphics.drawable.Drawable\n+import android.net.Uri\n+import android.widget.TextView\n+import com.facebook.drawee.controller.AbstractDraweeControllerBuilder\n+import com.facebook.drawee.generic.GenericDraweeHierarchy\n+import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder\n+import com.facebook.drawee.view.DraweeHolder\n+import com.facebook.imagepipeline.request.ImageRequest\n+import com.facebook.imagepipeline.request.ImageRequestBuilder\n+import com.facebook.react.bridge.ReadableMap\n+import com.facebook.react.modules.fresco.ReactNetworkImageRequest\n+import com.facebook.react.uimanager.PixelUtil\n+import com.facebook.react.views.image.ImageResizeMode\n+import com.facebook.react.views.text.internal.span.TextInlineImageSpan\n+\n+/**\n+ * FrescoBasedTextInlineImageSpan is a span for Images that are inside <Text/>. It computes its size\n+ * based on the input size. When it is time to draw, it will use the Fresco framework to get the\n+ * right Drawable and let that draw.\n+ *\n+ * <p>Since Fresco needs to callback to the TextView that contains this, in the ViewManager, you\n+ * must tell the Span about the TextView\n+ *\n+ * <p>Note: It borrows code from DynamicDrawableSpan and if that code updates how it computes size\n+ * or draws, we need to update this as well.\n+ */\n+public class FrescoBasedReactTextInlineImageSpan(\n+    resources: Resources,\n+    height: Int,\n+    width: Int,\n+    private val tintColor: Int,\n+    uri: Uri?,\n+    private val headers: ReadableMap?,\n+    private val draweeControllerBuilder: AbstractDraweeControllerBuilder<*, ImageRequest, *, *>,\n+    private val callerContext: Any?,\n+    private val resizeMode: String?\n+) : TextInlineImageSpan() {\n+\n+    private var textView: TextView? = null\n+    private val _uri: Uri = uri ?: Uri.EMPTY\n+    private val _width: Int = PixelUtil.toPixelFromDIP(width.toDouble()).toInt()\n+    private val _height: Int = PixelUtil.toPixelFromDIP(height.toDouble()).toInt()\n+    private val draweeHolder: DraweeHolder<GenericDraweeHierarchy> =\n+        DraweeHolder(GenericDraweeHierarchyBuilder.newInstance(resources).build())\n+\n+    override val width: Int\n+        get() = _width\n+\n+    override val height: Int\n+        get() = _height\n+\n+    override var drawable: Drawable? = null\n+        private set\n+\n+    /**\n+     * The ReactTextView that holds this ImageSpan is responsible for passing these methods on so\n+     * that we can do proper lifetime management for Fresco\n+     */\n+    public override fun onDetachedFromWindow() {\n+        draweeHolder.onDetach()\n+    }\n+\n+    public override fun onStartTemporaryDetach() {\n+        draweeHolder.onDetach()\n+    }\n+\n+    public override fun onAttachedToWindow() {\n+        draweeHolder.onAttach()\n+    }\n+\n+    public override fun onFinishTemporaryDetach() {\n+        draweeHolder.onAttach()\n+    }\n+\n+    public override fun getSize(\n+        paint: Paint,\n+        text: CharSequence,\n+        start: Int,\n+        end: Int,\n+        fm: Paint.FontMetricsInt?\n+    ): Int {\n+        // NOTE: This getSize code is copied from DynamicDrawableSpan and modified\n+        // to not use a Drawable\n+\n+        fm?.let {\n+            it.ascent = -_height\n+            it.descent = 0\n+\n+            it.top = it.ascent\n+            it.bottom = 0\n+        }\n+\n+        return _width\n+    }\n+\n+    public override fun setTextView(textView: TextView?) {\n+        this.textView = textView\n+    }\n+\n+    public override fun draw(\n+        canvas: Canvas,\n+        text: CharSequence,\n+        start: Int,\n+        end: Int,\n+        x: Float,\n+        top: Int,\n+        y: Int,\n+        bottom: Int,\n+        paint: Paint\n+    ) {\n+        if (drawable == null) {\n+            val imageRequestBuilder = ImageRequestBuilder.newBuilderWithSource(_uri)\n+            val imageRequest: ImageRequest =\n+                ReactNetworkImageRequest.fromBuilderWithHeaders(imageRequestBuilder, headers)\n+\n+            draweeHolder.hierarchy.setActualImageScaleType(ImageResizeMode.toScaleType(resizeMode))\n+\n+            draweeControllerBuilder.reset()\n+            draweeControllerBuilder.oldController = draweeHolder.controller\n+\n+            callerContext?.let { draweeControllerBuilder.setCallerContext(it) }\n+\n+            draweeControllerBuilder.setImageRequest(imageRequest)\n+\n+            val draweeController = draweeControllerBuilder.build()\n+            draweeHolder.controller = draweeController\n+            draweeControllerBuilder.reset()\n+\n+            drawable = draweeHolder.topLevelDrawable!!\n+            drawable!!.setBounds(0, 0, _width, _height)\n+            drawable!!.takeIf { tintColor != 0 }?.setColorFilter(tintColor, PorterDuff.Mode.SRC_IN)\n+            drawable!!.callback = this.textView",
        "comment_created_at": "2025-04-09T18:44:14+00:00",
        "comment_author": "mateoguzmana",
        "comment_body": "I think that would be a good idea, let's go that way with the new variable \ud83d\udc4d",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2036164513",
    "pr_number": 50597,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/DynamicFromMap.kt",
    "created_at": "2025-04-09T21:25:23+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.bridge\n+\n+import androidx.core.util.Pools.SimplePool\n+\n+/** Implementation of Dynamic wrapping a ReadableMap. */\n+internal class DynamicFromMap\n+// This is a pools object. Hide the constructor.\n+private constructor() : Dynamic {\n+    private var mMap: ReadableMap? = null\n+    private var mName: String? = null\n+\n+    override fun recycle() {\n+        mMap = null\n+        mName = null\n+        sPool.get()?.release(this)\n+    }\n+\n+    override val isNull: Boolean\n+        get() {\n+            check(!(mMap == null || mName == null)) { DYNAMIC_VALUE_RECYCLED_FAILURE_MESSAGE }\n+            return mMap!!.isNull(mName!!)\n+        }\n+\n+    override fun asBoolean(): Boolean {\n+        check(!(mMap == null || mName == null)) { DYNAMIC_VALUE_RECYCLED_FAILURE_MESSAGE }\n+        return mMap!!.getBoolean(mName!!)\n+    }\n+\n+    override fun asDouble(): Double {\n+        check(!(mMap == null || mName == null)) { DYNAMIC_VALUE_RECYCLED_FAILURE_MESSAGE }\n+        return mMap!!.getDouble(mName!!)\n+    }",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2036164513",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50597,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/DynamicFromMap.kt",
        "discussion_id": "2036164513",
        "commented_code": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.bridge\n+\n+import androidx.core.util.Pools.SimplePool\n+\n+/** Implementation of Dynamic wrapping a ReadableMap. */\n+internal class DynamicFromMap\n+// This is a pools object. Hide the constructor.\n+private constructor() : Dynamic {\n+    private var mMap: ReadableMap? = null\n+    private var mName: String? = null\n+\n+    override fun recycle() {\n+        mMap = null\n+        mName = null\n+        sPool.get()?.release(this)\n+    }\n+\n+    override val isNull: Boolean\n+        get() {\n+            check(!(mMap == null || mName == null)) { DYNAMIC_VALUE_RECYCLED_FAILURE_MESSAGE }\n+            return mMap!!.isNull(mName!!)\n+        }\n+\n+    override fun asBoolean(): Boolean {\n+        check(!(mMap == null || mName == null)) { DYNAMIC_VALUE_RECYCLED_FAILURE_MESSAGE }\n+        return mMap!!.getBoolean(mName!!)\n+    }\n+\n+    override fun asDouble(): Double {\n+        check(!(mMap == null || mName == null)) { DYNAMIC_VALUE_RECYCLED_FAILURE_MESSAGE }\n+        return mMap!!.getDouble(mName!!)\n+    }",
        "comment_created_at": "2025-04-09T21:25:23+00:00",
        "comment_author": "mateoguzmana",
        "comment_body": "Using `!!` assumes the value is not null; is it guaranteed here? If possible, could you try an alternative to avoid using it?\r\n\r\nSame for the rest.\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2036193257",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50597,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/DynamicFromMap.kt",
        "discussion_id": "2036164513",
        "commented_code": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.bridge\n+\n+import androidx.core.util.Pools.SimplePool\n+\n+/** Implementation of Dynamic wrapping a ReadableMap. */\n+internal class DynamicFromMap\n+// This is a pools object. Hide the constructor.\n+private constructor() : Dynamic {\n+    private var mMap: ReadableMap? = null\n+    private var mName: String? = null\n+\n+    override fun recycle() {\n+        mMap = null\n+        mName = null\n+        sPool.get()?.release(this)\n+    }\n+\n+    override val isNull: Boolean\n+        get() {\n+            check(!(mMap == null || mName == null)) { DYNAMIC_VALUE_RECYCLED_FAILURE_MESSAGE }\n+            return mMap!!.isNull(mName!!)\n+        }\n+\n+    override fun asBoolean(): Boolean {\n+        check(!(mMap == null || mName == null)) { DYNAMIC_VALUE_RECYCLED_FAILURE_MESSAGE }\n+        return mMap!!.getBoolean(mName!!)\n+    }\n+\n+    override fun asDouble(): Double {\n+        check(!(mMap == null || mName == null)) { DYNAMIC_VALUE_RECYCLED_FAILURE_MESSAGE }\n+        return mMap!!.getDouble(mName!!)\n+    }",
        "comment_created_at": "2025-04-09T21:56:25+00:00",
        "comment_author": "artus9033",
        "comment_body": "Right, theoretically these could be modified between the check and access. I will refactor this to use `checkNotNull`.",
        "pr_file_module": null
      }
    ]
  }
]