[
  {
    "discussion_id": "2126118960",
    "pr_number": 51775,
    "pr_file": "packages/react-native/Libraries/NativeAnimation/Drivers/RCTAnimationDriver.h",
    "created_at": "2025-06-04T09:20:35+00:00",
    "commented_code": "#import <Foundation/Foundation.h>\n \n #import <React/RCTBridgeModule.h>\n-\n-static CGFloat RCTSingleFrameInterval = (CGFloat)(1.0 / 60.0);\n+#import <React/RCTUtils.h>\n+\n+static CGFloat RCTSingleFrameInterval(void)\n+{\n+  static CGFloat maximumFramesPerSecond;\n+  static dispatch_once_t onceToken;\n+  dispatch_once(&onceToken, ^{\n+    RCTUnsafeExecuteOnMainQueueSync(^{\n+      maximumFramesPerSecond = [UIScreen mainScreen].maximumFramesPerSecond;\n+    });",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2126118960",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51775,
        "pr_file": "packages/react-native/Libraries/NativeAnimation/Drivers/RCTAnimationDriver.h",
        "discussion_id": "2126118960",
        "commented_code": "@@ -9,8 +9,20 @@\n #import <Foundation/Foundation.h>\n \n #import <React/RCTBridgeModule.h>\n-\n-static CGFloat RCTSingleFrameInterval = (CGFloat)(1.0 / 60.0);\n+#import <React/RCTUtils.h>\n+\n+static CGFloat RCTSingleFrameInterval(void)\n+{\n+  static CGFloat maximumFramesPerSecond;\n+  static dispatch_once_t onceToken;\n+  dispatch_once(&onceToken, ^{\n+    RCTUnsafeExecuteOnMainQueueSync(^{\n+      maximumFramesPerSecond = [UIScreen mainScreen].maximumFramesPerSecond;\n+    });",
        "comment_created_at": "2025-06-04T09:20:35+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "this might deadlock... Do we have a list of devices that supports 120 vs 60?\r\nI kind of think that we don't have to support 60 FPS devices anymore...",
        "pr_file_module": null
      },
      {
        "comment_id": "2126157870",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51775,
        "pr_file": "packages/react-native/Libraries/NativeAnimation/Drivers/RCTAnimationDriver.h",
        "discussion_id": "2126118960",
        "commented_code": "@@ -9,8 +9,20 @@\n #import <Foundation/Foundation.h>\n \n #import <React/RCTBridgeModule.h>\n-\n-static CGFloat RCTSingleFrameInterval = (CGFloat)(1.0 / 60.0);\n+#import <React/RCTUtils.h>\n+\n+static CGFloat RCTSingleFrameInterval(void)\n+{\n+  static CGFloat maximumFramesPerSecond;\n+  static dispatch_once_t onceToken;\n+  dispatch_once(&onceToken, ^{\n+    RCTUnsafeExecuteOnMainQueueSync(^{\n+      maximumFramesPerSecond = [UIScreen mainScreen].maximumFramesPerSecond;\n+    });",
        "comment_created_at": "2025-06-04T09:39:08+00:00",
        "comment_author": "okwasniewski",
        "comment_body": "Hmm I think we still have to support 60fps, only the Pro iPhones come with Pro Motion (120 Hz refresh rate). For example iPhone 16 is still at 60hz. \r\n\r\nWhy would it deadlock? We are doing this kind of dispatch_once() that accesses UIScreen quite a lot in the code. \r\n\r\nLooks like JS refers to 60fps here: https://github.com/facebook/react-native/blob/1a6d466f18f0f2163d04008fd3c399cbd4108eb2/packages/react-native/Libraries/Animated/animations/TimingAnimation.js#L89\r\n\r\nWe would probably need to expose this `maximumFramesPerSecond` to JS. But I think we can do that through `NativeAnimatedTurboModule`",
        "pr_file_module": null
      },
      {
        "comment_id": "2128365007",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51775,
        "pr_file": "packages/react-native/Libraries/NativeAnimation/Drivers/RCTAnimationDriver.h",
        "discussion_id": "2126118960",
        "commented_code": "@@ -9,8 +9,20 @@\n #import <Foundation/Foundation.h>\n \n #import <React/RCTBridgeModule.h>\n-\n-static CGFloat RCTSingleFrameInterval = (CGFloat)(1.0 / 60.0);\n+#import <React/RCTUtils.h>\n+\n+static CGFloat RCTSingleFrameInterval(void)\n+{\n+  static CGFloat maximumFramesPerSecond;\n+  static dispatch_once_t onceToken;\n+  dispatch_once(&onceToken, ^{\n+    RCTUnsafeExecuteOnMainQueueSync(^{\n+      maximumFramesPerSecond = [UIScreen mainScreen].maximumFramesPerSecond;\n+    });",
        "comment_created_at": "2025-06-05T09:17:42+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "We had deadlocks in internal app at startup because multiple things can request access to the main queue.\r\n\r\nSo imagine that a process starts on the main queue, than dispatch sync to a BG queue, then the other queue calls `RCTSingleFrameInterval` which dispatch sync on the main queue. In this scenario the main queue is locked, waiting for the BG queue and we deadlock.\r\n\r\nI saw this happening in other parts of React Native that looked safe, unfortunately.\r\n\r\nPerhaps we can have `NativeAnimatedTurboModule` require the main queue to be initialized (if it does not need it already) and have the turbomodule compute this in the init. That would be safe.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1893868473",
    "pr_number": 48350,
    "pr_file": "packages/react-native/React/CxxBridge/RCTCxxBridge.mm",
    "created_at": "2024-12-20T12:14:46+00:00",
    "commented_code": "- (void)invalidate\n {\n-  if (_didInvalidate) {\n-    return;\n-  }\n+  RCTUnsafeExecuteOnMainQueueSync(^{",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1893868473",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48350,
        "pr_file": "packages/react-native/React/CxxBridge/RCTCxxBridge.mm",
        "discussion_id": "1893868473",
        "commented_code": "@@ -1189,86 +1189,88 @@ - (void)dispatchBlock:(dispatch_block_t)block queue:(dispatch_queue_t)queue\n \n - (void)invalidate\n {\n-  if (_didInvalidate) {\n-    return;\n-  }\n+  RCTUnsafeExecuteOnMainQueueSync(^{",
        "comment_created_at": "2024-12-20T12:14:46+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "This could potentially deadlock. We should not run the unsafe variant of this method. Can you change it with `RCTExecuteOnMainQueue`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1893909520",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48350,
        "pr_file": "packages/react-native/React/CxxBridge/RCTCxxBridge.mm",
        "discussion_id": "1893868473",
        "commented_code": "@@ -1189,86 +1189,88 @@ - (void)dispatchBlock:(dispatch_block_t)block queue:(dispatch_queue_t)queue\n \n - (void)invalidate\n {\n-  if (_didInvalidate) {\n-    return;\n-  }\n+  RCTUnsafeExecuteOnMainQueueSync(^{",
        "comment_created_at": "2024-12-20T12:56:06+00:00",
        "comment_author": "zhouzh1",
        "comment_body": "Changed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1893869338",
    "pr_number": 48350,
    "pr_file": "packages/react-native/React/CxxBridge/RCTCxxBridge.mm",
    "created_at": "2024-12-20T12:15:45+00:00",
    "commented_code": "- (void)invalidate\n {\n-  if (_didInvalidate) {\n-    return;\n-  }\n+  RCTUnsafeExecuteOnMainQueueSync(^{\n+    if (_didInvalidate) {\n+      return;\n+    }\n \n-  RCTAssertMainQueue();\n-  RCTLogInfo(@\"Invalidating %@ (parent: %@, executor: %@)\", self, _parentBridge, [self executorClass]);\n+    RCTAssertMainQueue();",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1893869338",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48350,
        "pr_file": "packages/react-native/React/CxxBridge/RCTCxxBridge.mm",
        "discussion_id": "1893869338",
        "commented_code": "@@ -1189,86 +1189,88 @@ - (void)dispatchBlock:(dispatch_block_t)block queue:(dispatch_queue_t)queue\n \n - (void)invalidate\n {\n-  if (_didInvalidate) {\n-    return;\n-  }\n+  RCTUnsafeExecuteOnMainQueueSync(^{\n+    if (_didInvalidate) {\n+      return;\n+    }\n \n-  RCTAssertMainQueue();\n-  RCTLogInfo(@\"Invalidating %@ (parent: %@, executor: %@)\", self, _parentBridge, [self executorClass]);\n+    RCTAssertMainQueue();",
        "comment_created_at": "2024-12-20T12:15:45+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "One thing that confuses me is that, in your stacktrace, the crash is happening in Thread 26... but this assert should force the app to be on the main thread, which is not the Thread 26... how's this possible?",
        "pr_file_module": null
      },
      {
        "comment_id": "1893902402",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48350,
        "pr_file": "packages/react-native/React/CxxBridge/RCTCxxBridge.mm",
        "discussion_id": "1893869338",
        "commented_code": "@@ -1189,86 +1189,88 @@ - (void)dispatchBlock:(dispatch_block_t)block queue:(dispatch_queue_t)queue\n \n - (void)invalidate\n {\n-  if (_didInvalidate) {\n-    return;\n-  }\n+  RCTUnsafeExecuteOnMainQueueSync(^{\n+    if (_didInvalidate) {\n+      return;\n+    }\n \n-  RCTAssertMainQueue();\n-  RCTLogInfo(@\"Invalidating %@ (parent: %@, executor: %@)\", self, _parentBridge, [self executorClass]);\n+    RCTAssertMainQueue();",
        "comment_created_at": "2024-12-20T12:48:58+00:00",
        "comment_author": "zhouzh1",
        "comment_body": "@cipolleschi Good question, that's because of actually the `RCTAssertMainQueue` only takes effects in dev build, when in the release build, it does nothing.",
        "pr_file_module": null
      },
      {
        "comment_id": "1893903443",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48350,
        "pr_file": "packages/react-native/React/CxxBridge/RCTCxxBridge.mm",
        "discussion_id": "1893869338",
        "commented_code": "@@ -1189,86 +1189,88 @@ - (void)dispatchBlock:(dispatch_block_t)block queue:(dispatch_queue_t)queue\n \n - (void)invalidate\n {\n-  if (_didInvalidate) {\n-    return;\n-  }\n+  RCTUnsafeExecuteOnMainQueueSync(^{\n+    if (_didInvalidate) {\n+      return;\n+    }\n \n-  RCTAssertMainQueue();\n-  RCTLogInfo(@\"Invalidating %@ (parent: %@, executor: %@)\", self, _parentBridge, [self executorClass]);\n+    RCTAssertMainQueue();",
        "comment_created_at": "2024-12-20T12:50:02+00:00",
        "comment_author": "zhouzh1",
        "comment_body": "That's why I added the `RCTUnsafeExecuteOnMainQueueSync` wrapper to ensure the code to run on the main thread.",
        "pr_file_module": null
      },
      {
        "comment_id": "1893918694",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48350,
        "pr_file": "packages/react-native/React/CxxBridge/RCTCxxBridge.mm",
        "discussion_id": "1893869338",
        "commented_code": "@@ -1189,86 +1189,88 @@ - (void)dispatchBlock:(dispatch_block_t)block queue:(dispatch_queue_t)queue\n \n - (void)invalidate\n {\n-  if (_didInvalidate) {\n-    return;\n-  }\n+  RCTUnsafeExecuteOnMainQueueSync(^{\n+    if (_didInvalidate) {\n+      return;\n+    }\n \n-  RCTAssertMainQueue();\n-  RCTLogInfo(@\"Invalidating %@ (parent: %@, executor: %@)\", self, _parentBridge, [self executorClass]);\n+    RCTAssertMainQueue();",
        "comment_created_at": "2024-12-20T13:05:42+00:00",
        "comment_author": "zhouzh1",
        "comment_body": "<img width=\"1068\" alt=\"image\" src=\"https://github.com/user-attachments/assets/e0df4205-59d8-499e-be31-4a2256df4cea\" />\r\nAs you can see, when the `NS_BLOCK_ASSERTIONS` is defined, the `RCTAssert` macro is actually empty, and generally the `NS_BLOCK_ASSERTIONS` is defined in release build.",
        "pr_file_module": null
      },
      {
        "comment_id": "1893939076",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48350,
        "pr_file": "packages/react-native/React/CxxBridge/RCTCxxBridge.mm",
        "discussion_id": "1893869338",
        "commented_code": "@@ -1189,86 +1189,88 @@ - (void)dispatchBlock:(dispatch_block_t)block queue:(dispatch_queue_t)queue\n \n - (void)invalidate\n {\n-  if (_didInvalidate) {\n-    return;\n-  }\n+  RCTUnsafeExecuteOnMainQueueSync(^{\n+    if (_didInvalidate) {\n+      return;\n+    }\n \n-  RCTAssertMainQueue();\n-  RCTLogInfo(@\"Invalidating %@ (parent: %@, executor: %@)\", self, _parentBridge, [self executorClass]);\n+    RCTAssertMainQueue();",
        "comment_created_at": "2024-12-20T13:26:13+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "That's a good explanation, but then we should see crashes in development happening because of the assertion. And IIUC, the app does not crash in development, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "1893952766",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48350,
        "pr_file": "packages/react-native/React/CxxBridge/RCTCxxBridge.mm",
        "discussion_id": "1893869338",
        "commented_code": "@@ -1189,86 +1189,88 @@ - (void)dispatchBlock:(dispatch_block_t)block queue:(dispatch_queue_t)queue\n \n - (void)invalidate\n {\n-  if (_didInvalidate) {\n-    return;\n-  }\n+  RCTUnsafeExecuteOnMainQueueSync(^{\n+    if (_didInvalidate) {\n+      return;\n+    }\n \n-  RCTAssertMainQueue();\n-  RCTLogInfo(@\"Invalidating %@ (parent: %@, executor: %@)\", self, _parentBridge, [self executorClass]);\n+    RCTAssertMainQueue();",
        "comment_created_at": "2024-12-20T13:39:24+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "By looking at the crash log, the JS thread is triggering the invalidation. I think that this is the root of the problem: after the JS thread detect the invalidation, we should jump on the UI thread to invalidate everything...",
        "pr_file_module": null
      },
      {
        "comment_id": "1894623226",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48350,
        "pr_file": "packages/react-native/React/CxxBridge/RCTCxxBridge.mm",
        "discussion_id": "1893869338",
        "commented_code": "@@ -1189,86 +1189,88 @@ - (void)dispatchBlock:(dispatch_block_t)block queue:(dispatch_queue_t)queue\n \n - (void)invalidate\n {\n-  if (_didInvalidate) {\n-    return;\n-  }\n+  RCTUnsafeExecuteOnMainQueueSync(^{\n+    if (_didInvalidate) {\n+      return;\n+    }\n \n-  RCTAssertMainQueue();\n-  RCTLogInfo(@\"Invalidating %@ (parent: %@, executor: %@)\", self, _parentBridge, [self executorClass]);\n+    RCTAssertMainQueue();",
        "comment_created_at": "2024-12-21T12:51:53+00:00",
        "comment_author": "zhouzh1",
        "comment_body": "I didn't encounter this crash in development, but I am not sure if it happens in it, you know, it's a occasional issue on itself.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1910134058",
    "pr_number": 48580,
    "pr_file": "packages/react-native/React/Fabric/Mounting/ComponentViews/ScrollView/RCTPullToRefreshViewComponentView.mm",
    "created_at": "2025-01-10T10:04:11+00:00",
    "commented_code": "{\n   [super didMoveToWindow];\n   if (self.window) {\n-    [self _attach];\n+    dispatch_async(dispatch_get_main_queue(), ^{",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1910134058",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48580,
        "pr_file": "packages/react-native/React/Fabric/Mounting/ComponentViews/ScrollView/RCTPullToRefreshViewComponentView.mm",
        "discussion_id": "1910134058",
        "commented_code": "@@ -148,7 +148,9 @@ - (void)didMoveToWindow\n {\n   [super didMoveToWindow];\n   if (self.window) {\n-    [self _attach];\n+    dispatch_async(dispatch_get_main_queue(), ^{",
        "comment_created_at": "2025-01-10T10:04:11+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "Can you use [RCTExecuteOnMainQueue](https://github.com/facebook/react-native/blob/main/packages/react-native/React/Base/RCTUtils.h#L41) instead? It avoids the jump if we are already on the main queue.",
        "pr_file_module": null
      },
      {
        "comment_id": "1910192409",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48580,
        "pr_file": "packages/react-native/React/Fabric/Mounting/ComponentViews/ScrollView/RCTPullToRefreshViewComponentView.mm",
        "discussion_id": "1910134058",
        "commented_code": "@@ -148,7 +148,9 @@ - (void)didMoveToWindow\n {\n   [super didMoveToWindow];\n   if (self.window) {\n-    [self _attach];\n+    dispatch_async(dispatch_get_main_queue(), ^{",
        "comment_created_at": "2025-01-10T10:43:07+00:00",
        "comment_author": "kkafar",
        "comment_body": "It's all about placing the block at the end of the queue - see my response here: https://github.com/facebook/react-native/pull/48580#issuecomment-2582382187",
        "pr_file_module": null
      }
    ]
  }
]