[
  {
    "discussion_id": "1890229419",
    "pr_number": 48319,
    "pr_file": "packages/react-native/ReactCommon/react/renderer/components/scrollview/ScrollViewEventEmitter.cpp",
    "created_at": "2024-12-18T13:20:58+00:00",
    "commented_code": "}\n \n void ScrollViewEventEmitter::onScrollEndDrag(\n-    const ScrollEvent& scrollEvent) const {\n-  dispatchScrollViewEvent(\"scrollEndDrag\", scrollEvent);\n+    const ScrollEndDragEvent& scrollEvent) const {\n+  dispatchEvent(\n+      \"scrollEndDrag\", std::make_shared<ScrollEndDragEvent>(scrollEvent));",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1890229419",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48319,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/components/scrollview/ScrollViewEventEmitter.cpp",
        "discussion_id": "1890229419",
        "commented_code": "@@ -25,8 +25,9 @@ void ScrollViewEventEmitter::onScrollBeginDrag(\n }\n \n void ScrollViewEventEmitter::onScrollEndDrag(\n-    const ScrollEvent& scrollEvent) const {\n-  dispatchScrollViewEvent(\"scrollEndDrag\", scrollEvent);\n+    const ScrollEndDragEvent& scrollEvent) const {\n+  dispatchEvent(\n+      \"scrollEndDrag\", std::make_shared<ScrollEndDragEvent>(scrollEvent));",
        "comment_created_at": "2024-12-18T13:20:58+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "I'm not sure we need to create a new pointer with `make_shared` here.\r\nThe type of the scrollEvent is already the right one. If previously we were passing the scrollEvent, we should be able to pass the scrollEvent even now, types should match.",
        "pr_file_module": null
      },
      {
        "comment_id": "1890500684",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48319,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/components/scrollview/ScrollViewEventEmitter.cpp",
        "discussion_id": "1890229419",
        "commented_code": "@@ -25,8 +25,9 @@ void ScrollViewEventEmitter::onScrollBeginDrag(\n }\n \n void ScrollViewEventEmitter::onScrollEndDrag(\n-    const ScrollEvent& scrollEvent) const {\n-  dispatchScrollViewEvent(\"scrollEndDrag\", scrollEvent);\n+    const ScrollEndDragEvent& scrollEvent) const {\n+  dispatchEvent(\n+      \"scrollEndDrag\", std::make_shared<ScrollEndDragEvent>(scrollEvent));",
        "comment_created_at": "2024-12-18T16:14:37+00:00",
        "comment_author": "zhongwuzw",
        "comment_body": "@cipolleschi Previously we call `dispatchScrollViewEvent ` but it std::make_shared<ScrollEvent> to create `ScrollEvent` shared ptr.",
        "pr_file_module": null
      },
      {
        "comment_id": "1891581774",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48319,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/components/scrollview/ScrollViewEventEmitter.cpp",
        "discussion_id": "1890229419",
        "commented_code": "@@ -25,8 +25,9 @@ void ScrollViewEventEmitter::onScrollBeginDrag(\n }\n \n void ScrollViewEventEmitter::onScrollEndDrag(\n-    const ScrollEvent& scrollEvent) const {\n-  dispatchScrollViewEvent(\"scrollEndDrag\", scrollEvent);\n+    const ScrollEndDragEvent& scrollEvent) const {\n+  dispatchEvent(\n+      \"scrollEndDrag\", std::make_shared<ScrollEndDragEvent>(scrollEvent));",
        "comment_created_at": "2024-12-19T10:34:48+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "`ScrollEndDragEvent` event is a subclass of `ScrollEvent`, we probably don't need to change this method at all, as you are allowed to pass a subclass to a method that accepts a superclass. The language should take care of it. ([LSP - Liskov substitution principle](https://en.wikipedia.org/wiki/Liskov_substitution_principle))\r\n\r\nCan you remove these changes and test if this works properly without these?\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2039099738",
    "pr_number": 50624,
    "pr_file": "packages/react-native/ReactCommon/react/renderer/core/ShadowNode.cpp",
    "created_at": "2025-04-11T08:46:34+00:00",
    "commented_code": "return std::const_pointer_cast<ShadowNode>(childNode);\n }\n \n+ShadowNode::Unshared ShadowNode::cloneMultipleRecursive(\n+    const ShadowNode& shadowNode,\n+    const std::unordered_set<const ShadowNodeFamily*>& families,\n+    const std::unordered_map<const ShadowNodeFamily*, int>& childrenCount,\n+    const std::function<Unshared(\n+        const ShadowNode& oldShadowNode,\n+        const std::optional<ShadowNode::ListOfShared>& newChildren)>& callback)\n+    const {\n+  const auto family = &shadowNode.getFamily();\n+  auto children = shadowNode.getChildren();",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2039099738",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50624,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/core/ShadowNode.cpp",
        "discussion_id": "2039099738",
        "commented_code": "@@ -368,6 +368,80 @@ ShadowNode::Unshared ShadowNode::cloneTree(\n   return std::const_pointer_cast<ShadowNode>(childNode);\n }\n \n+ShadowNode::Unshared ShadowNode::cloneMultipleRecursive(\n+    const ShadowNode& shadowNode,\n+    const std::unordered_set<const ShadowNodeFamily*>& families,\n+    const std::unordered_map<const ShadowNodeFamily*, int>& childrenCount,\n+    const std::function<Unshared(\n+        const ShadowNode& oldShadowNode,\n+        const std::optional<ShadowNode::ListOfShared>& newChildren)>& callback)\n+    const {\n+  const auto family = &shadowNode.getFamily();\n+  auto children = shadowNode.getChildren();",
        "comment_created_at": "2025-04-11T08:46:34+00:00",
        "comment_author": "javache",
        "comment_body": "Avoid copying the list\r\n```suggestion\r\n  const auto& children = shadowNode.getChildren();\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2039155308",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50624,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/core/ShadowNode.cpp",
        "discussion_id": "2039099738",
        "commented_code": "@@ -368,6 +368,80 @@ ShadowNode::Unshared ShadowNode::cloneTree(\n   return std::const_pointer_cast<ShadowNode>(childNode);\n }\n \n+ShadowNode::Unshared ShadowNode::cloneMultipleRecursive(\n+    const ShadowNode& shadowNode,\n+    const std::unordered_set<const ShadowNodeFamily*>& families,\n+    const std::unordered_map<const ShadowNodeFamily*, int>& childrenCount,\n+    const std::function<Unshared(\n+        const ShadowNode& oldShadowNode,\n+        const std::optional<ShadowNode::ListOfShared>& newChildren)>& callback)\n+    const {\n+  const auto family = &shadowNode.getFamily();\n+  auto children = shadowNode.getChildren();",
        "comment_created_at": "2025-04-11T09:17:58+00:00",
        "comment_author": "bartlomiejbloniarz",
        "comment_body": "I am copying that on purpose, as I want to modify it later on in the loop.",
        "pr_file_module": null
      },
      {
        "comment_id": "2104288131",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50624,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/core/ShadowNode.cpp",
        "discussion_id": "2039099738",
        "commented_code": "@@ -368,6 +368,80 @@ ShadowNode::Unshared ShadowNode::cloneTree(\n   return std::const_pointer_cast<ShadowNode>(childNode);\n }\n \n+ShadowNode::Unshared ShadowNode::cloneMultipleRecursive(\n+    const ShadowNode& shadowNode,\n+    const std::unordered_set<const ShadowNodeFamily*>& families,\n+    const std::unordered_map<const ShadowNodeFamily*, int>& childrenCount,\n+    const std::function<Unshared(\n+        const ShadowNode& oldShadowNode,\n+        const std::optional<ShadowNode::ListOfShared>& newChildren)>& callback)\n+    const {\n+  const auto family = &shadowNode.getFamily();\n+  auto children = shadowNode.getChildren();",
        "comment_created_at": "2025-05-23T10:18:59+00:00",
        "comment_author": "javache",
        "comment_body": "You could also model this as a std::optional<ListOfShared> and only do the copy when you first need to. That also avoids the need for `shouldUpdateChildren`.",
        "pr_file_module": null
      }
    ]
  }
]