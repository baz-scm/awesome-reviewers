[
  {
    "discussion_id": "1871999389",
    "pr_number": 48124,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/HeadlessJsTaskService.java",
    "created_at": "2024-12-05T20:00:15+00:00",
    "commented_code": "}\n \n   private void createReactContextAndScheduleTask(final HeadlessJsTaskConfig taskConfig) {\n-    final ReactHost reactHost = getReactHost();\n-\n-    if (reactHost == null) { // old arch\n-      final ReactInstanceManager reactInstanceManager =\n-          getReactNativeHost().getReactInstanceManager();\n-\n-      reactInstanceManager.addReactInstanceEventListener(\n+    if (ReactNativeFeatureFlags.enableBridgelessArchitecture()) {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1871999389",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48124,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/HeadlessJsTaskService.java",
        "discussion_id": "1871999389",
        "commented_code": "@@ -179,31 +179,30 @@ protected ReactContext getReactContext() {\n   }\n \n   private void createReactContextAndScheduleTask(final HeadlessJsTaskConfig taskConfig) {\n-    final ReactHost reactHost = getReactHost();\n-\n-    if (reactHost == null) { // old arch\n-      final ReactInstanceManager reactInstanceManager =\n-          getReactNativeHost().getReactInstanceManager();\n-\n-      reactInstanceManager.addReactInstanceEventListener(\n+    if (ReactNativeFeatureFlags.enableBridgelessArchitecture()) {",
        "comment_created_at": "2024-12-05T20:00:15+00:00",
        "comment_author": "mikehardy",
        "comment_body": "Tested this locally, worked with this slight tweak:\r\n\r\n```suggestion\r\n    if (ReactFeatureFlags.enableBridgelessArchitecture) {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1872295454",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48124,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/HeadlessJsTaskService.java",
        "discussion_id": "1871999389",
        "commented_code": "@@ -179,31 +179,30 @@ protected ReactContext getReactContext() {\n   }\n \n   private void createReactContextAndScheduleTask(final HeadlessJsTaskConfig taskConfig) {\n-    final ReactHost reactHost = getReactHost();\n-\n-    if (reactHost == null) { // old arch\n-      final ReactInstanceManager reactInstanceManager =\n-          getReactNativeHost().getReactInstanceManager();\n-\n-      reactInstanceManager.addReactInstanceEventListener(\n+    if (ReactNativeFeatureFlags.enableBridgelessArchitecture()) {",
        "comment_created_at": "2024-12-05T23:15:35+00:00",
        "comment_author": "cortinico",
        "comment_body": "Yeah that's because we replaced `ReactFeatureFlags` with `ReactNativeFeatureFlags` on `main`, but on the release branch we still reference the old class",
        "pr_file_module": null
      },
      {
        "comment_id": "1872304314",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48124,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/HeadlessJsTaskService.java",
        "discussion_id": "1871999389",
        "commented_code": "@@ -179,31 +179,30 @@ protected ReactContext getReactContext() {\n   }\n \n   private void createReactContextAndScheduleTask(final HeadlessJsTaskConfig taskConfig) {\n-    final ReactHost reactHost = getReactHost();\n-\n-    if (reactHost == null) { // old arch\n-      final ReactInstanceManager reactInstanceManager =\n-          getReactNativeHost().getReactInstanceManager();\n-\n-      reactInstanceManager.addReactInstanceEventListener(\n+    if (ReactNativeFeatureFlags.enableBridgelessArchitecture()) {",
        "comment_created_at": "2024-12-05T23:29:22+00:00",
        "comment_author": "mikehardy",
        "comment_body": "Ah of course, and my reproducer was 0.76.2 still (not even .3)\r\nI was confused how that even compiled otherwise and it was sailing right through CI! Makes sense\r\n\r\nOkay, then given this was really just symbol motion, not really a semantic change, you've nailed it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1811929850",
    "pr_number": 47122,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/TextLayoutManager.java",
    "created_at": "2024-10-23T06:02:14+00:00",
    "commented_code": "== LayoutDirection.RTL;\n   }\n \n-  private static Layout.Alignment getTextAlignment(MapBuffer attributedString, Spannable spanned) {\n+  @Nullable\n+  private static String getTextAlignmentAttr(MapBuffer attributedString) {\n     // TODO: Don't read AS_KEY_FRAGMENTS, which may be expensive, and is not present when using\n-    // cached Spannable\n     if (!attributedString.contains(AS_KEY_FRAGMENTS)) {\n-      return Layout.Alignment.ALIGN_NORMAL;\n+      return null;\n     }\n \n+    MapBuffer fragments = attributedString.getMapBuffer(AS_KEY_FRAGMENTS);\n+    if (fragments.getCount() != 0) {\n+      MapBuffer fragment = fragments.getMapBuffer(0);\n+      MapBuffer textAttributes = fragment.getMapBuffer(FR_KEY_TEXT_ATTRIBUTES);\n+\n+      if (textAttributes.contains(TextAttributeProps.TA_KEY_ALIGNMENT)) {\n+        return textAttributes.getString(TextAttributeProps.TA_KEY_ALIGNMENT);\n+      }\n+    }\n+\n+    return null;\n+  }\n+\n+\n+  private static int getTextJustificationMode(@Nullable String alignmentAttr) {\n+    int justificationMode = (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) ? 0 : Layout.JUSTIFICATION_MODE_NONE;",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1811929850",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47122,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/TextLayoutManager.java",
        "discussion_id": "1811929850",
        "commented_code": "@@ -146,13 +146,42 @@ public static boolean isRTL(MapBuffer attributedString) {\n         == LayoutDirection.RTL;\n   }\n \n-  private static Layout.Alignment getTextAlignment(MapBuffer attributedString, Spannable spanned) {\n+  @Nullable\n+  private static String getTextAlignmentAttr(MapBuffer attributedString) {\n     // TODO: Don't read AS_KEY_FRAGMENTS, which may be expensive, and is not present when using\n-    // cached Spannable\n     if (!attributedString.contains(AS_KEY_FRAGMENTS)) {\n-      return Layout.Alignment.ALIGN_NORMAL;\n+      return null;\n     }\n \n+    MapBuffer fragments = attributedString.getMapBuffer(AS_KEY_FRAGMENTS);\n+    if (fragments.getCount() != 0) {\n+      MapBuffer fragment = fragments.getMapBuffer(0);\n+      MapBuffer textAttributes = fragment.getMapBuffer(FR_KEY_TEXT_ATTRIBUTES);\n+\n+      if (textAttributes.contains(TextAttributeProps.TA_KEY_ALIGNMENT)) {\n+        return textAttributes.getString(TextAttributeProps.TA_KEY_ALIGNMENT);\n+      }\n+    }\n+\n+    return null;\n+  }\n+\n+\n+  private static int getTextJustificationMode(@Nullable String alignmentAttr) {\n+    int justificationMode = (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) ? 0 : Layout.JUSTIFICATION_MODE_NONE;",
        "comment_created_at": "2024-10-23T06:02:14+00:00",
        "comment_author": "NickGerleman",
        "comment_body": "@cortinico more code that will go away once we bump to minSdk 26",
        "pr_file_module": null
      }
    ]
  }
]