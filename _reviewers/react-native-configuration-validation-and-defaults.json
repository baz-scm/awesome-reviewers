[
  {
    "discussion_id": "1873766845",
    "pr_number": 47712,
    "pr_file": "packages/react-native/scripts/codegen/generate-artifacts-executor.js",
    "created_at": "2024-12-06T17:42:28+00:00",
    "commented_code": "});\n }\n \n+// Function to look for libraries explicitly unlinked from the app\n+// through the react-native.config.js file.\n+// If this happens, it might be that the app does not need\n+// to generate code for that library as it won't be used by that platform\n+// @return { [libraryName: string]: [platform: string] }\n+function findNotLinkedLibraries(projectRoot) {\n+  const rnConfig = readRNConfigJSFile(projectRoot);\n+\n+  if (rnConfig.dependencies == null) {\n+    return {};\n+  }\n+\n+  let notLinkedLibraries = {};\n+\n+  Object.keys(rnConfig.dependencies).forEach(name => {\n+    const dependency = rnConfig.dependencies[name];\n+    let notLinkedPlatforms = [];\n+    Object.keys(dependency.platforms).forEach(platform => {\n+      if (dependency.platforms[platform] == null) {\n+        notLinkedPlatforms.push(platform);\n+      }\n+    });",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1873766845",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47712,
        "pr_file": "packages/react-native/scripts/codegen/generate-artifacts-executor.js",
        "discussion_id": "1873766845",
        "commented_code": "@@ -289,6 +294,33 @@ function findLibrariesFromReactNativeConfig(projectRoot) {\n   });\n }\n \n+// Function to look for libraries explicitly unlinked from the app\n+// through the react-native.config.js file.\n+// If this happens, it might be that the app does not need\n+// to generate code for that library as it won't be used by that platform\n+// @return { [libraryName: string]: [platform: string] }\n+function findNotLinkedLibraries(projectRoot) {\n+  const rnConfig = readRNConfigJSFile(projectRoot);\n+\n+  if (rnConfig.dependencies == null) {\n+    return {};\n+  }\n+\n+  let notLinkedLibraries = {};\n+\n+  Object.keys(rnConfig.dependencies).forEach(name => {\n+    const dependency = rnConfig.dependencies[name];\n+    let notLinkedPlatforms = [];\n+    Object.keys(dependency.platforms).forEach(platform => {\n+      if (dependency.platforms[platform] == null) {\n+        notLinkedPlatforms.push(platform);\n+      }\n+    });",
        "comment_created_at": "2024-12-06T17:42:28+00:00",
        "comment_author": "satya164",
        "comment_body": "Previously this was sufficient for module to be linked:\r\n\r\n```js\r\n  dependencies: {\r\n    'name': {\r\n      root: '/path/to/your/module',\r\n    },\r\n  },\r\n```\r\n\r\nWith this change, projects with this config crash during `pod install` since the `platforms` field isn't present.",
        "pr_file_module": null
      },
      {
        "comment_id": "1876023363",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47712,
        "pr_file": "packages/react-native/scripts/codegen/generate-artifacts-executor.js",
        "discussion_id": "1873766845",
        "commented_code": "@@ -289,6 +294,33 @@ function findLibrariesFromReactNativeConfig(projectRoot) {\n   });\n }\n \n+// Function to look for libraries explicitly unlinked from the app\n+// through the react-native.config.js file.\n+// If this happens, it might be that the app does not need\n+// to generate code for that library as it won't be used by that platform\n+// @return { [libraryName: string]: [platform: string] }\n+function findNotLinkedLibraries(projectRoot) {\n+  const rnConfig = readRNConfigJSFile(projectRoot);\n+\n+  if (rnConfig.dependencies == null) {\n+    return {};\n+  }\n+\n+  let notLinkedLibraries = {};\n+\n+  Object.keys(rnConfig.dependencies).forEach(name => {\n+    const dependency = rnConfig.dependencies[name];\n+    let notLinkedPlatforms = [];\n+    Object.keys(dependency.platforms).forEach(platform => {\n+      if (dependency.platforms[platform] == null) {\n+        notLinkedPlatforms.push(platform);\n+      }\n+    });",
        "comment_created_at": "2024-12-09T13:56:49+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "Thanks for raising this other case. I believe that if there is just the path, it links for all the platforms, right? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1876063633",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47712,
        "pr_file": "packages/react-native/scripts/codegen/generate-artifacts-executor.js",
        "discussion_id": "1873766845",
        "commented_code": "@@ -289,6 +294,33 @@ function findLibrariesFromReactNativeConfig(projectRoot) {\n   });\n }\n \n+// Function to look for libraries explicitly unlinked from the app\n+// through the react-native.config.js file.\n+// If this happens, it might be that the app does not need\n+// to generate code for that library as it won't be used by that platform\n+// @return { [libraryName: string]: [platform: string] }\n+function findNotLinkedLibraries(projectRoot) {\n+  const rnConfig = readRNConfigJSFile(projectRoot);\n+\n+  if (rnConfig.dependencies == null) {\n+    return {};\n+  }\n+\n+  let notLinkedLibraries = {};\n+\n+  Object.keys(rnConfig.dependencies).forEach(name => {\n+    const dependency = rnConfig.dependencies[name];\n+    let notLinkedPlatforms = [];\n+    Object.keys(dependency.platforms).forEach(platform => {\n+      if (dependency.platforms[platform] == null) {\n+        notLinkedPlatforms.push(platform);\n+      }\n+    });",
        "comment_created_at": "2024-12-09T14:22:54+00:00",
        "comment_author": "satya164",
        "comment_body": "@cipolleschi currently it crashes when `dependency.platforms` isn't specified because the above check is accessing keys on `dependency.platforms` unconditionally\r\n\r\ncurrent workaround is to specify:\r\n\r\n```js\r\n  dependencies: {\r\n    'name': {\r\n      root: '/path/to/your/module',\r\n      platforms: { android: {}, ios: {} },\r\n    },\r\n  },\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1969757852",
    "pr_number": 49614,
    "pr_file": "scripts/releases/prebuild/cli.js",
    "created_at": "2025-02-25T13:12:58+00:00",
    "commented_code": "+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ * @format\n+ * @oncall react_native\n+ */\n+\n+const {dependencies, platforms} = require('./configuration');\n+const yargs = require('yargs');\n+\n+/*::\n+import type {Dependency, Platform} from './types';\n+import {skip} from \"rxjs/operators\";\n+*/\n+\n+const arrayLike = (value /*: Array<any> */) /*: Array<any> */ =>\n+  Array.isArray(value) ? value : [value];\n+\n+const cli = yargs\n+  .usage(\n+    'This script prepares iOS prebuilds for React Native. It downloads the dependencies, prepare them, builds them and creates the XCFrameworks.' +\n+      'Calling the script with no options will build all the dependencies for all the slices and configurations.',\n+  )\n+  .option('setup', {\n+    alias: 's',\n+    type: 'boolean',\n+    describe: 'Download and setup dependencies',",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1969757852",
        "repo_full_name": "facebook/react-native",
        "pr_number": 49614,
        "pr_file": "scripts/releases/prebuild/cli.js",
        "discussion_id": "1969757852",
        "commented_code": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ * @format\n+ * @oncall react_native\n+ */\n+\n+const {dependencies, platforms} = require('./configuration');\n+const yargs = require('yargs');\n+\n+/*::\n+import type {Dependency, Platform} from './types';\n+import {skip} from \"rxjs/operators\";\n+*/\n+\n+const arrayLike = (value /*: Array<any> */) /*: Array<any> */ =>\n+  Array.isArray(value) ? value : [value];\n+\n+const cli = yargs\n+  .usage(\n+    'This script prepares iOS prebuilds for React Native. It downloads the dependencies, prepare them, builds them and creates the XCFrameworks.' +\n+      'Calling the script with no options will build all the dependencies for all the slices and configurations.',\n+  )\n+  .option('setup', {\n+    alias: 's',\n+    type: 'boolean',\n+    describe: 'Download and setup dependencies',",
        "comment_created_at": "2025-02-25T13:12:58+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "what's the default? The question holds for all the items below\r\n\r\nWhat I don't like is that to do everything, we need to call\r\n```\r\nnode <script> -s -w -b -c\r\n```\r\n\r\nI would rather have the default case that does everything.",
        "pr_file_module": null
      },
      {
        "comment_id": "1969779137",
        "repo_full_name": "facebook/react-native",
        "pr_number": 49614,
        "pr_file": "scripts/releases/prebuild/cli.js",
        "discussion_id": "1969757852",
        "commented_code": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ * @format\n+ * @oncall react_native\n+ */\n+\n+const {dependencies, platforms} = require('./configuration');\n+const yargs = require('yargs');\n+\n+/*::\n+import type {Dependency, Platform} from './types';\n+import {skip} from \"rxjs/operators\";\n+*/\n+\n+const arrayLike = (value /*: Array<any> */) /*: Array<any> */ =>\n+  Array.isArray(value) ? value : [value];\n+\n+const cli = yargs\n+  .usage(\n+    'This script prepares iOS prebuilds for React Native. It downloads the dependencies, prepare them, builds them and creates the XCFrameworks.' +\n+      'Calling the script with no options will build all the dependencies for all the slices and configurations.',\n+  )\n+  .option('setup', {\n+    alias: 's',\n+    type: 'boolean',\n+    describe: 'Download and setup dependencies',",
        "comment_created_at": "2025-02-25T13:24:28+00:00",
        "comment_author": "chrfalch",
        "comment_body": "Default case runs all tasks... But that is probl. not super clear? The initial doc says \"Calling the script with no options will build all the dependencies for all the slices and configurations.\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1437035803",
    "pr_number": 41967,
    "pr_file": "packages/metro-config/index.js",
    "created_at": "2023-12-27T13:15:52+00:00",
    "commented_code": "].join('|'),\n );\n \n+/**\n+ * Resolves the root of an NPM or Yarn workspace, by traversing the file tree upwards from a `candidatePath` in the search for\n+ * - a directory with a package.json\n+ * - which has a `workspaces` array of strings\n+ * - which (possibly via a glob) includes the project root\n+ * @param {string} projectRoot Project root to find a workspace root for\n+ * @param {string | undefined} candidatePath Current path to search from\n+ * @returns Path of a workspace root or `undefined`\n+ */\n+function getWorkspaceRoot(projectRoot /*: string */, candidatePath /*: string */ = projectRoot) /*: string | void */ {\n+  const packageJsonPath = path.resolve(candidatePath, 'package.json');\n+  if (fs.existsSync(packageJsonPath)) {\n+    try {\n+      const { workspaces } = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n+      if (Array.isArray(workspaces)) {\n+        // If one of the workspaces match the project root, this is the workspace root\n+        // Note: While NPM workspaces doesn't currently support globs, Yarn does.\n+        const matches = fastGlob.sync(workspaces, {\n+          cwd: candidatePath,\n+          onlyDirectories: true,\n+          absolute: true,\n+        });\n+        if (matches.includes(projectRoot)) {\n+          return candidatePath;\n+        }\n+      }\n+    } catch (err) {\n+      console.warn(`Failed reading or parsing ${packageJsonPath}:`, err);",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1437035803",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/metro-config/index.js",
        "discussion_id": "1437035803",
        "commented_code": "@@ -36,6 +39,53 @@ const INTERNAL_CALLSITES_REGEX = new RegExp(\n   ].join('|'),\n );\n \n+/**\n+ * Resolves the root of an NPM or Yarn workspace, by traversing the file tree upwards from a `candidatePath` in the search for\n+ * - a directory with a package.json\n+ * - which has a `workspaces` array of strings\n+ * - which (possibly via a glob) includes the project root\n+ * @param {string} projectRoot Project root to find a workspace root for\n+ * @param {string | undefined} candidatePath Current path to search from\n+ * @returns Path of a workspace root or `undefined`\n+ */\n+function getWorkspaceRoot(projectRoot /*: string */, candidatePath /*: string */ = projectRoot) /*: string | void */ {\n+  const packageJsonPath = path.resolve(candidatePath, 'package.json');\n+  if (fs.existsSync(packageJsonPath)) {\n+    try {\n+      const { workspaces } = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n+      if (Array.isArray(workspaces)) {\n+        // If one of the workspaces match the project root, this is the workspace root\n+        // Note: While NPM workspaces doesn't currently support globs, Yarn does.\n+        const matches = fastGlob.sync(workspaces, {\n+          cwd: candidatePath,\n+          onlyDirectories: true,\n+          absolute: true,\n+        });\n+        if (matches.includes(projectRoot)) {\n+          return candidatePath;\n+        }\n+      }\n+    } catch (err) {\n+      console.warn(`Failed reading or parsing ${packageJsonPath}:`, err);",
        "comment_created_at": "2023-12-27T13:15:52+00:00",
        "comment_author": "robhogan",
        "comment_body": "Hmm.. this is awkward, because if there is an error here for whatever reason (less chance if we check for permissions above), even if the user explicitly specifies `watchFolders`, they can't (in this design) avoid running this auto-detection, generating warnings that aren't relevant to them.\r\n\r\nIdeally, this detection would only run if the user hasn't specified `watchFolders` themselves, but to do that I think we'd need to move it to the `@react-native/community-cli-plugin` - and tbh that might be a better place for it than amongst these static defaults. (WDYT @huntie ?)",
        "pr_file_module": null
      },
      {
        "comment_id": "1437568895",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/metro-config/index.js",
        "discussion_id": "1437035803",
        "commented_code": "@@ -36,6 +39,53 @@ const INTERNAL_CALLSITES_REGEX = new RegExp(\n   ].join('|'),\n );\n \n+/**\n+ * Resolves the root of an NPM or Yarn workspace, by traversing the file tree upwards from a `candidatePath` in the search for\n+ * - a directory with a package.json\n+ * - which has a `workspaces` array of strings\n+ * - which (possibly via a glob) includes the project root\n+ * @param {string} projectRoot Project root to find a workspace root for\n+ * @param {string | undefined} candidatePath Current path to search from\n+ * @returns Path of a workspace root or `undefined`\n+ */\n+function getWorkspaceRoot(projectRoot /*: string */, candidatePath /*: string */ = projectRoot) /*: string | void */ {\n+  const packageJsonPath = path.resolve(candidatePath, 'package.json');\n+  if (fs.existsSync(packageJsonPath)) {\n+    try {\n+      const { workspaces } = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n+      if (Array.isArray(workspaces)) {\n+        // If one of the workspaces match the project root, this is the workspace root\n+        // Note: While NPM workspaces doesn't currently support globs, Yarn does.\n+        const matches = fastGlob.sync(workspaces, {\n+          cwd: candidatePath,\n+          onlyDirectories: true,\n+          absolute: true,\n+        });\n+        if (matches.includes(projectRoot)) {\n+          return candidatePath;\n+        }\n+      }\n+    } catch (err) {\n+      console.warn(`Failed reading or parsing ${packageJsonPath}:`, err);",
        "comment_created_at": "2023-12-28T11:13:29+00:00",
        "comment_author": "huntie",
        "comment_body": "I think that sounds fair \ud83d\udc4d\ud83c\udffb\r\n\r\n[Expo does perform similar detection as part of its config defaults](https://github.com/expo/expo/blob/2a96b86e780a2cc6c4cf4d5b38849f108f0517b0/packages/%40expo/metro-config/src/ExpoMetroConfig.ts#L154), however that is (conceptually) downstream from this package. I'd rather locate config that is dependent on the _embedder_ (Community CLI, Expo), particularly if dynamic, outside this file. So yeah, into `@react-native/community-cli-plugin`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1437875826",
    "pr_number": 41967,
    "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
    "created_at": "2023-12-28T20:48:49+00:00",
    "commented_code": "],\n     },\n   };\n+\n+  if (config.watchFolders.length === 0) {\n+    overrides.watchFolders = getWatchFolders(ctx.root);\n+  }",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1437875826",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
        "discussion_id": "1437875826",
        "commented_code": "@@ -71,6 +77,12 @@ function getOverrideConfig(\n       ],\n     },\n   };\n+\n+  if (config.watchFolders.length === 0) {\n+    overrides.watchFolders = getWatchFolders(ctx.root);\n+  }",
        "comment_created_at": "2023-12-28T20:48:49+00:00",
        "comment_author": "kraenhansen",
        "comment_body": "The only potential problem I see with this approach of providing the default as an override after loading the user-land config, is that the developer has to provide at least one element in the `watchFolders` to disable this default.",
        "pr_file_module": null
      },
      {
        "comment_id": "1437877140",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
        "discussion_id": "1437875826",
        "commented_code": "@@ -71,6 +77,12 @@ function getOverrideConfig(\n       ],\n     },\n   };\n+\n+  if (config.watchFolders.length === 0) {\n+    overrides.watchFolders = getWatchFolders(ctx.root);\n+  }",
        "comment_created_at": "2023-12-28T20:53:22+00:00",
        "comment_author": "kraenhansen",
        "comment_body": "Another alternative would be to update the `metro-config` package to not provide an empty array for `watchFolders` and match on `undefined` instead of an empty array here. But .. that might be slightly breaking to developers that use the default `watchFolders` array by pushing their values into it \ud83e\udd14",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1437887841",
    "pr_number": 41967,
    "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
    "created_at": "2023-12-28T21:27:33+00:00",
    "commented_code": "],\n     },\n   };\n+\n+  // Applying the heuristic of appending workspace root as watch folder,\n+  // only if no other watch folder (beside the project root) has been given.\n+  if (!config.watchFolders.some(folder => folder !== ctx.root)) {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1437887841",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
        "discussion_id": "1437887841",
        "commented_code": "@@ -71,6 +72,17 @@ function getOverrideConfig(\n       ],\n     },\n   };\n+\n+  // Applying the heuristic of appending workspace root as watch folder,\n+  // only if no other watch folder (beside the project root) has been given.\n+  if (!config.watchFolders.some(folder => folder !== ctx.root)) {",
        "comment_created_at": "2023-12-28T21:27:33+00:00",
        "comment_author": "kraenhansen",
        "comment_body": "The only potential problem I see with this approach of providing the default as an override after loading the user-land config, is that the developer has to provide at least one element (other than the project root which is automatically injected) in the watchFolders to disable this default heuristic. I.e. it's not enough to simply pass an empty array from the user's config.",
        "pr_file_module": null
      },
      {
        "comment_id": "1439344706",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
        "discussion_id": "1437887841",
        "commented_code": "@@ -71,6 +72,17 @@ function getOverrideConfig(\n       ],\n     },\n   };\n+\n+  // Applying the heuristic of appending workspace root as watch folder,\n+  // only if no other watch folder (beside the project root) has been given.\n+  if (!config.watchFolders.some(folder => folder !== ctx.root)) {",
        "comment_created_at": "2024-01-02T11:00:06+00:00",
        "comment_author": "huntie",
        "comment_body": "Yeah it's tricky \ud83d\ude05.\r\n\r\nI think let's bypass this logic if `config.watchFolders != null`. i.e. _**any value set by the user is an opt-out**_. We'd also want to note this [in the docs](https://reactnative.dev/docs/metro) \u2014\u00a0under a header \"Workspaces detection\" or similar (which could also briefly describe this feature to users \ud83d\ude42).",
        "pr_file_module": null
      },
      {
        "comment_id": "1439498314",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
        "discussion_id": "1437887841",
        "commented_code": "@@ -71,6 +72,17 @@ function getOverrideConfig(\n       ],\n     },\n   };\n+\n+  // Applying the heuristic of appending workspace root as watch folder,\n+  // only if no other watch folder (beside the project root) has been given.\n+  if (!config.watchFolders.some(folder => folder !== ctx.root)) {",
        "comment_created_at": "2024-01-02T14:27:38+00:00",
        "comment_author": "kraenhansen",
        "comment_body": "> `config.watchFolders != null`\r\n\r\nOne problem with that is that `loadConfig` from `metro-config` injects the project root as watch folder: https://github.com/facebook/metro/blob/main/packages/metro-config/src/loadConfig.js#L325 .. so I don't think a user will ever be able to configure this as `null`.\r\n\r\nThinking about this more, I wonder if it'd be better to use the `defaultConfigOverrides` argument passed to `loadConfig` to implement this \ud83e\udd14 I'll experiment a bit with this.",
        "pr_file_module": null
      },
      {
        "comment_id": "1439549690",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
        "discussion_id": "1437887841",
        "commented_code": "@@ -71,6 +72,17 @@ function getOverrideConfig(\n       ],\n     },\n   };\n+\n+  // Applying the heuristic of appending workspace root as watch folder,\n+  // only if no other watch folder (beside the project root) has been given.\n+  if (!config.watchFolders.some(folder => folder !== ctx.root)) {",
        "comment_created_at": "2024-01-02T15:21:04+00:00",
        "comment_author": "huntie",
        "comment_body": "> Thinking about this more, I wonder if it'd be better to use the `defaultConfigOverrides` argument passed to `loadConfig` to implement this \ud83e\udd14\r\n\r\nYes I think that would work :). FYI the current result of `getOverrideConfig` _**must**_ be assigned last via `mergeConfig` (always overriding) \u2014\u00a0the case of `watchFolders` is distinct from this. Therefore we likely want another function in this file, e.g. `getDynamicDefaultConfig` \u2014\u00a0with a comment mentioning that this is assigned to `defaultConfigOverrides` and each value is overridable by the project (again distinct from this function).",
        "pr_file_module": null
      },
      {
        "comment_id": "1439600072",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
        "discussion_id": "1437887841",
        "commented_code": "@@ -71,6 +72,17 @@ function getOverrideConfig(\n       ],\n     },\n   };\n+\n+  // Applying the heuristic of appending workspace root as watch folder,\n+  // only if no other watch folder (beside the project root) has been given.\n+  if (!config.watchFolders.some(folder => folder !== ctx.root)) {",
        "comment_created_at": "2024-01-02T16:12:59+00:00",
        "comment_author": "kraenhansen",
        "comment_body": "I did some experiments passing the workspace root via the second parameter to `metro-config`'s `loadConfig` function.\r\n\r\nIt turns out that even if we omitted `watchFolders` from the config here: https://github.com/facebook/react-native/blob/f1a7f08feb2a63926e91d37b5d85130c7b74ee31/packages/metro-config/index.js#L85 it would still propagate as `[]` to the `community-cli-plugin` because the `metro-config` package as `watchFolders: []` here: https://github.com/facebook/metro/blob/main/packages/metro-config/src/defaults/index.js#L163 and we merge on top of that:\r\nhttps://github.com/facebook/react-native/blob/f1a7f08feb2a63926e91d37b5d85130c7b74ee31/packages/metro-config/index.js#L91-L94\r\n\r\nI tried explicitly setting the `watchFolders` to `undefined` in `@react-native/metro-config`, but `metro-config`'s `loadConfig` expects this to be iterable: https://github.com/facebook/metro/blob/main/packages/metro-config/src/loadConfig.js#L326 \ud83e\udd14 \r\n\r\nThe only way I can get it working is by deleting the `watchFolders` property on the object returned from `getDefaultValues` here: https://github.com/facebook/react-native/blob/f1a7f08feb2a63926e91d37b5d85130c7b74ee31/packages/metro-config/index.js#L92 while omitting the `watchFolders` from the `config` in `@react-native/metro-config` entirely. Only issue is that the object returned from `getDefaultValues` is `$ReadOnly`.\r\n\r\nI've pushed another branch to illustrate the changes we'll need: https://github.com/kraenhansen/react-native/compare/kh/metro-config-workspace-root...kraenhansen:react-native:kh/metro-config-workspace-root-defaults",
        "pr_file_module": null
      },
      {
        "comment_id": "1449052372",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
        "discussion_id": "1437887841",
        "commented_code": "@@ -71,6 +72,17 @@ function getOverrideConfig(\n       ],\n     },\n   };\n+\n+  // Applying the heuristic of appending workspace root as watch folder,\n+  // only if no other watch folder (beside the project root) has been given.\n+  if (!config.watchFolders.some(folder => folder !== ctx.root)) {",
        "comment_created_at": "2024-01-11T15:44:45+00:00",
        "comment_author": "huntie",
        "comment_body": "> metro-config's loadConfig expects this to be iterable: [facebook/metro@main/packages/metro-config/src/loadConfig.js#L326](https://github.com/facebook/metro/blob/main/packages/metro-config/src/loadConfig.js?rgh-link-date=2024-01-02T16%3A12%3A59Z#L326)\r\n\r\nInteresting! I think we should fix that in Metro as `watchFolders` can be `undefined` as indicated in `InputConfigT`.\r\n\r\n---\r\n\r\nSeparately, and back to the problem at hand (forgive me if I've lost context on something obvious) \u2014\u00a0can we instead:\r\n\r\n- Keep the default of `watchFolders = []`.\r\n- Apply the heuristic if `watchFolders` is `[]` or `== null`, and do nothing otherwise.\r\n    - What's relevant to the user is _have they set an override for `watchFolders` in their `metro.config.js`?_ (i.e. in the [template](https://github.com/facebook/react-native/blob/main/packages/react-native/template/metro.config.js#L9)). If not, then we can apply this :)\r\n    - This would be [documented](https://reactnative.dev/docs/metro) as ~\"**`watchFolders` behaviour and workspaces detection**: The default for `watchFolders` is `[]`. If you override this with a custom set of paths (i.e. a nonempty array), workspaces detection will not be applied.\"\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1449159584",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
        "discussion_id": "1437887841",
        "commented_code": "@@ -71,6 +72,17 @@ function getOverrideConfig(\n       ],\n     },\n   };\n+\n+  // Applying the heuristic of appending workspace root as watch folder,\n+  // only if no other watch folder (beside the project root) has been given.\n+  if (!config.watchFolders.some(folder => folder !== ctx.root)) {",
        "comment_created_at": "2024-01-11T17:09:36+00:00",
        "comment_author": "kraenhansen",
        "comment_body": "Okay. I misunderstood you then. I thought you wanted end-users to be able to use an empty array to indicate that they want to opt out of the workspace detection.\r\n\r\nThe [metro-config's loadConfig injects the project root as a watch folder](https://github.com/facebook/metro/blob/main/packages%2Fmetro-config%2Fsrc%2FloadConfig.js#L325), so from the cli plugin, it won't ever be empty, but instead I suggested to check if it contains any other value than the project root. (The line this thread refers to).",
        "pr_file_module": null
      },
      {
        "comment_id": "1449180703",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
        "discussion_id": "1437887841",
        "commented_code": "@@ -71,6 +72,17 @@ function getOverrideConfig(\n       ],\n     },\n   };\n+\n+  // Applying the heuristic of appending workspace root as watch folder,\n+  // only if no other watch folder (beside the project root) has been given.\n+  if (!config.watchFolders.some(folder => folder !== ctx.root)) {",
        "comment_created_at": "2024-01-11T17:28:45+00:00",
        "comment_author": "robhogan",
        "comment_body": "Hmm - a user may explicitly specify `watchFolders: []` and in that case we should *not* override it by applying auto-detection. A referential check *could* work (to differentiate explicit `[]` from the default `[]`), though not the clearest API.\r\n\r\n(IMO, this would be easier if `metro.config.js` exported a partial `InputConfigT`, as it used to, rather than a full `ConfigT` with defaults already merged and explicit intent lost, as it does post `@react-native/metro-config`. I don't fully recall why we did it that way @huntie? I think it was discussed and I'm just forgetting the trade-offs.)",
        "pr_file_module": null
      },
      {
        "comment_id": "1455314091",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
        "discussion_id": "1437887841",
        "commented_code": "@@ -71,6 +72,17 @@ function getOverrideConfig(\n       ],\n     },\n   };\n+\n+  // Applying the heuristic of appending workspace root as watch folder,\n+  // only if no other watch folder (beside the project root) has been given.\n+  if (!config.watchFolders.some(folder => folder !== ctx.root)) {",
        "comment_created_at": "2024-01-17T11:29:01+00:00",
        "comment_author": "huntie",
        "comment_body": "Hmm. That default config merge is applied inside `@react-native/metro-config`, so we have control. The partial config was our initial approach, pivoted away from here:\r\n\r\n- https://github.com/facebook/react-native/pull/38092\r\n\r\nIn short, it was the perceived UX benefit of being able to extend nonempty defaults from `@react-native/metro-config`, without separately requiring `metro-config` in an RN project.\r\n\r\nNow that we've [documented Metro config in RN better](https://reactnative.dev/docs/metro#advanced-using-a-config-function), perhaps we could move forward with the following changes in `@react-native/metro-config`:\r\n- Removing the default config merge.\r\n- Removing `watchFolders: []` in these defaults.\r\n- Artificially reading and assigning the defaults for `sourceExts` and `assetExts` (to fit user expectations as this is frequently extended from).",
        "pr_file_module": null
      },
      {
        "comment_id": "1475235748",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
        "discussion_id": "1437887841",
        "commented_code": "@@ -71,6 +72,17 @@ function getOverrideConfig(\n       ],\n     },\n   };\n+\n+  // Applying the heuristic of appending workspace root as watch folder,\n+  // only if no other watch folder (beside the project root) has been given.\n+  if (!config.watchFolders.some(folder => folder !== ctx.root)) {",
        "comment_created_at": "2024-02-01T22:27:59+00:00",
        "comment_author": "kraenhansen",
        "comment_body": "I finally found some time to get back to this:\r\n- I've implemented a couple of tests, including a failing test for the case where a developer explicitly set their `watchFolder: []` in the `metro.config.js`.\r\n- I've realised, that even if we fix the bug with `metro-config` not taking `watchFolders: undefined`, I would have to move out the injection of `configWithArgs.projectRoot` over to `community-cli-plugin` (to determine if the developer left out the value or explicitly set it to the empty array) .. but that could break someone relying on `metro-config` injecting this. I suggest adding an optional argument to `metro-config`'s `loadConfig` to disable this, while limiting breakage of anyone else depending on it.\r\n\r\nI've create a PR to metro to illustrate the change (https://github.com/facebook/metro/pull/1206). I'm copying [the entire `overriddenConfig` part](https://github.com/facebook/metro/blob/18210320c0466499f7874abc26eac1fe60ec519c/packages/metro-config/src/loadConfig.js#L322-L334) into [the `community-cli-plugin`'s overrides](https://github.com/facebook/react-native/blob/07e8ae42bed71f54bbe0e786ccad88b2f14648a4/packages/community-cli-plugin/src/utils/loadMetroConfig.js#L32C10-L32C27).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1438396890",
    "pr_number": 41967,
    "pr_file": "packages/community-cli-plugin/src/utils/getWorkspaceRoot.js",
    "created_at": "2023-12-29T20:06:49+00:00",
    "commented_code": "+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ * @format\n+ * @oncall react_native\n+ */\n+\n+const fs = require('fs');\n+const micromatch = require('micromatch');\n+const path = require('path');\n+const yaml = require('yaml');\n+\n+/**\n+ * Get the workspace paths from the path of a potential workspace root.\n+ *\n+ * This supports:\n+ * - [NPM workspaces](https://docs.npmjs.com/cli/v10/using-npm/workspaces)\n+ * - [Yarn workspaces](https://yarnpkg.com/features/workspaces)\n+ * - [PNPM workspaces](https://pnpm.io/workspaces)\n+ */\n+function getWorkspacePaths(packagePath /*: string */) /*: string[] */ {\n+  const result /*: string[] */ = [];",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1438396890",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/getWorkspaceRoot.js",
        "discussion_id": "1438396890",
        "commented_code": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ * @format\n+ * @oncall react_native\n+ */\n+\n+const fs = require('fs');\n+const micromatch = require('micromatch');\n+const path = require('path');\n+const yaml = require('yaml');\n+\n+/**\n+ * Get the workspace paths from the path of a potential workspace root.\n+ *\n+ * This supports:\n+ * - [NPM workspaces](https://docs.npmjs.com/cli/v10/using-npm/workspaces)\n+ * - [Yarn workspaces](https://yarnpkg.com/features/workspaces)\n+ * - [PNPM workspaces](https://pnpm.io/workspaces)\n+ */\n+function getWorkspacePaths(packagePath /*: string */) /*: string[] */ {\n+  const result /*: string[] */ = [];",
        "comment_created_at": "2023-12-29T20:06:49+00:00",
        "comment_author": "kraenhansen",
        "comment_body": "This function is pushing into an array of paths to avoid giving a preference to neither NPM/Yarn nor PNPM if someone has both configured. Before it would do an early return as soon as it found a `workspaces` array in the `package.json`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1439339001",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/getWorkspaceRoot.js",
        "discussion_id": "1438396890",
        "commented_code": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ * @format\n+ * @oncall react_native\n+ */\n+\n+const fs = require('fs');\n+const micromatch = require('micromatch');\n+const path = require('path');\n+const yaml = require('yaml');\n+\n+/**\n+ * Get the workspace paths from the path of a potential workspace root.\n+ *\n+ * This supports:\n+ * - [NPM workspaces](https://docs.npmjs.com/cli/v10/using-npm/workspaces)\n+ * - [Yarn workspaces](https://yarnpkg.com/features/workspaces)\n+ * - [PNPM workspaces](https://pnpm.io/workspaces)\n+ */\n+function getWorkspacePaths(packagePath /*: string */) /*: string[] */ {\n+  const result /*: string[] */ = [];",
        "comment_created_at": "2024-01-02T10:52:21+00:00",
        "comment_author": "huntie",
        "comment_body": "What use cases would there be for a project having both patterns configured? I think it's acceptable to be more strict, and/or prioritise a `pnpm-workspace.yaml` first.",
        "pr_file_module": null
      },
      {
        "comment_id": "1439511617",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/getWorkspaceRoot.js",
        "discussion_id": "1438396890",
        "commented_code": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ * @format\n+ * @oncall react_native\n+ */\n+\n+const fs = require('fs');\n+const micromatch = require('micromatch');\n+const path = require('path');\n+const yaml = require('yaml');\n+\n+/**\n+ * Get the workspace paths from the path of a potential workspace root.\n+ *\n+ * This supports:\n+ * - [NPM workspaces](https://docs.npmjs.com/cli/v10/using-npm/workspaces)\n+ * - [Yarn workspaces](https://yarnpkg.com/features/workspaces)\n+ * - [PNPM workspaces](https://pnpm.io/workspaces)\n+ */\n+function getWorkspacePaths(packagePath /*: string */) /*: string[] */ {\n+  const result /*: string[] */ = [];",
        "comment_created_at": "2024-01-02T14:42:25+00:00",
        "comment_author": "kraenhansen",
        "comment_body": "No valid use case. I just wanted the code to be agnostic, but I can look for the `pnpm-workspace.yaml` first \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1475757487",
    "pr_number": 41967,
    "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
    "created_at": "2024-02-02T08:59:21+00:00",
    "commented_code": "}\n   }\n \n-  const config = await loadConfig({\n-    cwd,\n-    ...options,\n-  });\n+  const config = await loadConfig(\n+    {\n+      cwd,\n+      ...options,\n+    },\n+    {\n+      // Enables users to explicitly specify watchFolders\n+      watchFolders: undefined,\n+    },\n+  );",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1475757487",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/loadMetroConfig.js",
        "discussion_id": "1475757487",
        "commented_code": "@@ -107,10 +124,16 @@ This warning will be removed in future (https://github.com/facebook/metro/issues\n     }\n   }\n \n-  const config = await loadConfig({\n-    cwd,\n-    ...options,\n-  });\n+  const config = await loadConfig(\n+    {\n+      cwd,\n+      ...options,\n+    },\n+    {\n+      // Enables users to explicitly specify watchFolders\n+      watchFolders: undefined,\n+    },\n+  );",
        "comment_created_at": "2024-02-02T08:59:21+00:00",
        "comment_author": "kraenhansen",
        "comment_body": "This would need an update once https://github.com/facebook/metro/pull/1206 is merged, released and pulled in.\r\n\r\n```suggestion\r\n  const config = await loadConfig(\r\n    {\r\n      cwd,\r\n      ...options,\r\n    },\r\n    {\r\n      // Enables users to explicitly specify watchFolders\r\n      watchFolders: undefined,\r\n    },\r\n    false\r\n  );\r\n```",
        "pr_file_module": null
      }
    ]
  }
]