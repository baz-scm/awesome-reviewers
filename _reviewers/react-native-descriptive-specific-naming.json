[
  {
    "discussion_id": "998490461",
    "pr_number": 30129,
    "pr_file": "Libraries/Image/AssetSourceResolver.js",
    "created_at": "2022-10-18T16:56:28+00:00",
    "commented_code": "return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n   }\n \n+  isCatalogAsset(): boolean {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "998490461",
        "repo_full_name": "facebook/react-native",
        "pr_number": 30129,
        "pr_file": "Libraries/Image/AssetSourceResolver.js",
        "discussion_id": "998490461",
        "commented_code": "@@ -71,6 +71,15 @@ class AssetSourceResolver {\n     return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n   }\n \n+  isCatalogAsset(): boolean {",
        "comment_created_at": "2022-10-18T16:56:28+00:00",
        "comment_author": "javache",
        "comment_body": "This should be made iOS-specific `isIOSCatalogAsset`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "998491352",
    "pr_number": 30129,
    "pr_file": "Libraries/Image/AssetSourceResolver.js",
    "created_at": "2022-10-18T16:57:20+00:00",
    "commented_code": ");\n   }\n \n+  assetFromCatalog(): ResolvedAssetSource {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "998491352",
        "repo_full_name": "facebook/react-native",
        "pr_number": 30129,
        "pr_file": "Libraries/Image/AssetSourceResolver.js",
        "discussion_id": "998491352",
        "commented_code": "@@ -123,6 +134,10 @@ class AssetSourceResolver {\n     );\n   }\n \n+  assetFromCatalog(): ResolvedAssetSource {",
        "comment_created_at": "2022-10-18T16:57:20+00:00",
        "comment_author": "javache",
        "comment_body": "It's confusing this is using `getAndroidResourceIdentifier` in an iOS code path. If this is right, can we rename `getAndroidResourceIdentifier` to be platform-independent?\r\n\r\n```suggestion\r\n  assetFromIOSCatalog(): ResolvedAssetSource {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "998529974",
        "repo_full_name": "facebook/react-native",
        "pr_number": 30129,
        "pr_file": "Libraries/Image/AssetSourceResolver.js",
        "discussion_id": "998491352",
        "commented_code": "@@ -123,6 +134,10 @@ class AssetSourceResolver {\n     );\n   }\n \n+  assetFromCatalog(): ResolvedAssetSource {",
        "comment_created_at": "2022-10-18T17:38:20+00:00",
        "comment_author": "janicduplessis",
        "comment_body": "I renamed it in the initial PR, but it added a lot of complexity to land this since it is in a separate package so we decided to leave it as is for now and land the name change in a follow up.",
        "pr_file_module": null
      },
      {
        "comment_id": "998637971",
        "repo_full_name": "facebook/react-native",
        "pr_number": 30129,
        "pr_file": "Libraries/Image/AssetSourceResolver.js",
        "discussion_id": "998491352",
        "commented_code": "@@ -123,6 +134,10 @@ class AssetSourceResolver {\n     );\n   }\n \n+  assetFromCatalog(): ResolvedAssetSource {",
        "comment_created_at": "2022-10-18T19:41:38+00:00",
        "comment_author": "javache",
        "comment_body": "Could you rename the method to `getResourceIndentifier` and a `getAndroidResourceIdentifier` that just calls the original method?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1380811670",
    "pr_number": 41218,
    "pr_file": "packages/rn-tester-e2e/tests/specs/components/button/cancelButton.test.js",
    "created_at": "2023-11-02T21:39:59+00:00",
    "commented_code": "+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ * @format\n+ */\n+\n+const {ComponentsScreen} = require('../../../screens/components.screen.js');\n+const {\n+  ButtonComponentScreen,\n+} = require('../../../screens/components/buttonComponent.screen.js');\n+\n+const cancelText = 'Your application has been cancelled!';\n+\n+describe('Test is checking cancel button', function () {\n+  it('Should view properly submit cancel text', async function () {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1380811670",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41218,
        "pr_file": "packages/rn-tester-e2e/tests/specs/components/button/cancelButton.test.js",
        "discussion_id": "1380811670",
        "commented_code": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ * @format\n+ */\n+\n+const {ComponentsScreen} = require('../../../screens/components.screen.js');\n+const {\n+  ButtonComponentScreen,\n+} = require('../../../screens/components/buttonComponent.screen.js');\n+\n+const cancelText = 'Your application has been cancelled!';\n+\n+describe('Test is checking cancel button', function () {\n+  it('Should view properly submit cancel text', async function () {",
        "comment_created_at": "2023-11-02T21:39:59+00:00",
        "comment_author": "samuelfreiberg",
        "comment_body": "Nit: Improve test name. An engineer debugging this should know exactly what the test does by reading the name. After reading this, I'm not sure what this test is doing - I have to read the code to figure that out.\r\n\r\nAn example of a better name:\r\n\r\n\"Press Cancel Button - Validate {Correct Action}\" but replace the {} with what you expect to happen ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2081567738",
    "pr_number": 51216,
    "pr_file": "packages/react-native/scripts/ios-prebuild/hermes.js",
    "created_at": "2025-05-09T12:28:31+00:00",
    "commented_code": "const fs = require('fs');\n const path = require('path');\n \n+/**\n+ * Downloads hermes artifacts from the specified version and build type. If you want to specify a specific\n+ * version of hermes, use the HERMES_VERSION environment variable. The path to the artifacts will be inside\n+ * the .build/artifacts/hermes folder, but this can be overridden by setting the HERMES_ENGINE_TARBALL_PATH\n+ * environment variable. If this varuable is set, the script will use the local tarball instead of downloading it.\n+ * @param {*} version\n+ * @param {*} buildType\n+ * @returns\n+ */\n async function prepareHermesArtifactsAsync(\n   version /*:string*/,\n   buildType /*:string*/,\n+  reactNativePath /*:string*/,\n ) /*: Promise<string> */ {\n+  const resolved_version = process.env.HERMES_VERSION ?? version;\n+  hermes_log(`Preparing Hermes v.${resolved_version}...`);\n+\n   // Check if the Hermes artifacts are already downloaded\n   const artifactsPath /*: string*/ = path.resolve(\n     process.cwd(),\n     '.build',\n     'artifacts',\n     'hermes',\n   );\n-  if (fs.existsSync(artifactsPath)) {\n-    return artifactsPath;\n+\n+  fs.mkdirSync(artifactsPath, {recursive: true});\n+\n+  let local_path = process.env.HERMES_ENGINE_TARBALL_PATH ?? '';\n+\n+  // Only check if the artifacts folder exists if we are not using a local tarball\n+  if (!local_path) {\n+    if (fs.existsSync(artifactsPath)) {\n+      // Check hermes version file\n+      const versionFilePath = path.join(artifactsPath, 'version.txt');\n+      if (fs.existsSync(versionFilePath)) {\n+        const versionFileContent = fs.readFileSync(versionFilePath, 'utf8');\n+        if (versionFileContent.trim() === resolved_version) {\n+          hermes_log(\n+            `Hermes artifacts already downloaded and up to date: ${artifactsPath}`,\n+          );\n+          return artifactsPath;\n+        }\n+      }\n+      // If the version file does not exist or the version does not match, delete the artifacts folder\n+      fs.rmSync(artifactsPath, {recursive: true, force: true});\n+      hermes_log(\n+        `Hermes artifacts folder already exists, but version does not match. Deleting: ${artifactsPath}`,\n+      );\n+      // Lets create the veresion.txt file\n+      fs.mkdirSync(artifactsPath, {recursive: true});\n+      fs.writeFileSync(versionFilePath, resolved_version, 'utf8');\n+      hermes_log(\n+        `Hermes artifacts folder created: ${artifactsPath} with version: ${resolved_version}`,\n+      );\n+    }\n+\n+    const sourceType = hermesSourceType(resolved_version, reactNativePath);\n+    local_path = resolve_source_type(\n+      sourceType,\n+      resolved_version,\n+      reactNativePath,\n+      artifactsPath,\n+    );\n+  } else {\n+    hermes_log('Using local tarball, skipping artifacts folder check');\n   }\n \n-  // Download the Hermes artifacts\n-  const url = getHermesArtifactsUrl(version, buildType);\n-  console.log(`Downloading Hermes artifacts from ${url}...`);\n+  // Extract the tar.gz\n+  execSync(`tar -xzf \"${local_path}\" -C \"${artifactsPath}\"`, {\n+    stdio: 'inherit',\n+  });\n+\n+  // Delete the tarball after extraction\n+  if (!process.env.HERMES_ENGINE_TARBALL_PATH) {\n+    fs.unlinkSync(local_path);\n+  }\n \n-  // download the file pointed to by the URL and store it in the ./.build/artifacts folder on disk\n-  await downloadAndExtract(url, artifactsPath);\n   return artifactsPath;\n }\n \n-async function downloadAndExtract(url /*:string*/, targetFolder /*:string*/) {\n-  const buildDir = path.resolve('.build', 'artifacts');\n-  const tarballPath = path.join(buildDir, 'artifact.tar.gz');\n+/*::\n+type HermesEngineSourceTypeT =\n+  | 'local_prebuilt_tarball'\n+  | 'download_prebuild_release_tarball'\n+  | 'download_prebuilt_nightly_tarball'\n+  | 'build_from_github_commit'\n+  | 'build_from_github_tag'\n+  | 'build_from_github_main'\n+  | 'build_from_local_source_dir';\n \n-  // Ensure build directory exists\n-  fs.mkdirSync(targetFolder, {recursive: true});\n+*/\n \n-  console.log(`Downloading file from ${url} to ${tarballPath}...`);\n+const HermesEngineSourceType = {\n+  LOCAL_PREBUILT_TARBALL: 'local_prebuilt_tarball',\n+  DOWNLOAD_PREBUILD_RELEASE_TARBALL: 'download_prebuild_release_tarball',\n+  DOWNLOAD_PREBUILT_NIGHTLY_TARBALL: 'download_prebuilt_nightly_tarball',\n+};\n \n+function hermesEngineTarballEnvvarDefined() /*: boolean */ {\n+  return !!process.env.HERMES_ENGINE_TARBALL_PATH;\n+}\n+\n+function releaseTarballUrl(\n+  version /*: string */,\n+  buildType /*: 'debug' | 'release' */,\n+) /*: string */ {\n+  const mavenRepoUrl = 'https://repo1.maven.org/maven2';\n+  const namespace = 'com/facebook/react';\n+  return `${mavenRepoUrl}/${namespace}/react-native-artifacts/${version}/react-native-artifacts-${version}-hermes-ios-${buildType}.tar.gz`;\n+}\n+\n+function nightlyTarballUrl(version /*: string */) /*: string */ {\n+  const params = `r=snapshots&g=com.facebook.react&a=react-native-artifacts&c=hermes-ios-debug&e=tar.gz&v=${version}-SNAPSHOT`;\n+  return resolveUrlRedirects(\n+    `http://oss.sonatype.org/service/local/artifact/maven/redirect?${params}`,\n+  );\n+}\n+\n+function resolveUrlRedirects(url /*: string */) /*: string */ {\n+  // Synchronously resolve the final URL after redirects using curl\n   try {\n-    // Download the file using curl via execSync\n-    execSync(`curl -L \"${url}\" -o \"${tarballPath}\"`, {stdio: 'inherit'});\n+    return execSync(`curl -Ls -o /dev/null -w '%{url_effective}' \"${url}\"`)\n+      .toString()\n+      .trim();\n+  } catch (e) {\n+    hermes_log(`Failed to resolve URL redirects\n${e}`, 'error');\n+    return url;\n+  }\n+}\n+\n+function hermesArtifactExists(tarballUrl /*: string */) /*: boolean */ {\n+  try {\n+    const code = execSync(\n+      `curl -o /dev/null --silent -Iw '%{http_code}' -L \"${tarballUrl}\"`,\n+    )\n+      .toString()\n+      .trim();\n+    return code === '200';\n+  } catch (e) {\n+    return false;\n+  }\n+}\n+\n+function releaseArtifactExists(version /*: string */) /*: boolean */ {\n+  return hermesArtifactExists(releaseTarballUrl(version, 'debug'));\n+}\n \n-    console.log('Download complete. Extracting...');\n+function nightlyArtifactExists(version /*: string */) /*: boolean */ {\n+  return hermesArtifactExists(nightlyTarballUrl(version).replace(/\\\\/g, ''));\n+}\n+\n+function hermesSourceType(\n+  version /*: string */,\n+  reactNativePath /*: string */,\n+) /*: HermesEngineSourceTypeT */ {\n+  if (hermesEngineTarballEnvvarDefined()) {\n+    hermes_log('Using local prebuild tarball');\n+    return HermesEngineSourceType.LOCAL_PREBUILT_TARBALL;\n+  }\n+  if (releaseArtifactExists(version)) {\n+    hermes_log('Using download prebuild release tarball');\n+    return HermesEngineSourceType.DOWNLOAD_PREBUILD_RELEASE_TARBALL;\n+  }\n+  if (nightlyArtifactExists(version)) {\n+    hermes_log('Using download prebuild nightly tarball');\n+    return HermesEngineSourceType.DOWNLOAD_PREBUILT_NIGHTLY_TARBALL;\n+  }\n+  //return HermesEngineSourceType.BUILD_FROM_GITHUB_MAIN;\n+  hermes_log(\n+    'Using download prebuild nightly tarball - this is a fallback and might not work.',\n+  );\n+  return HermesEngineSourceType.DOWNLOAD_PREBUILT_NIGHTLY_TARBALL;\n+}\n \n-    // Extract the tar.gz using execSync\n-    execSync(`tar -xzf \"${tarballPath}\" -C \"${targetFolder}\"`, {\n-      stdio: 'inherit',\n-    });\n+function resolve_source_type(\n+  sourceType /*: HermesEngineSourceTypeT */,\n+  version /*: string */,\n+  reactNativePath /*: string */,\n+  artifactsPath /*: string*/,\n+) /*: string */ {\n+  switch (sourceType) {\n+    case HermesEngineSourceType.LOCAL_PREBUILT_TARBALL:\n+      return local_prebuilt_tarball(artifactsPath);\n+    case HermesEngineSourceType.DOWNLOAD_PREBUILD_RELEASE_TARBALL:\n+      return _download_prebuild_release_tarball(\n+        reactNativePath,\n+        version,\n+        artifactsPath,\n+      );\n+    case HermesEngineSourceType.DOWNLOAD_PREBUILT_NIGHTLY_TARBALL:\n+      return _download_prebuilt_nightly_tarball(version, artifactsPath);\n+    default:\n+      abort(\n+        `[Hermes] Unsupported or invalid source type provided: ${sourceType}`,\n+      );\n+      return '';\n+  }\n+}\n \n-    // Delete the tarball after extraction\n-    fs.unlinkSync(tarballPath);\n+function local_prebuilt_tarball(artifactsPath /*: string*/) /*: string */ {\n+  const tarballPath = process.env.HERMES_ENGINE_TARBALL_PATH;\n+  if (tarballPath && fs.existsSync(tarballPath)) {\n+    hermes_log(\n+      `Using pre-built binary from local path defined by HERMES_ENGINE_TARBALL_PATH envvar: ${tarballPath}`,\n+    );\n+    return `file://${tarballPath}`;\n+  }\n+  abort(\n+    `[Hermes] HERMES_ENGINE_TARBALL_PATH is set, but points to a non-existing file: \"${tarballPath ?? 'unknown'}\"\nIf you don't want to use tarball, run 'unset HERMES_ENGINE_TARBALL_PATH'`,\n+  );\n+  return '';\n+}\n \n-    console.log('Download and extraction complete.');\n-  } catch (error) {\n-    if (fs.existsSync(tarballPath)) {\n-      fs.unlinkSync(tarballPath);\n+function _download_prebuild_release_tarball(",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2081567738",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51216,
        "pr_file": "packages/react-native/scripts/ios-prebuild/hermes.js",
        "discussion_id": "2081567738",
        "commented_code": "@@ -13,75 +13,302 @@ const {execSync} = require('child_process');\n const fs = require('fs');\n const path = require('path');\n \n+/**\n+ * Downloads hermes artifacts from the specified version and build type. If you want to specify a specific\n+ * version of hermes, use the HERMES_VERSION environment variable. The path to the artifacts will be inside\n+ * the .build/artifacts/hermes folder, but this can be overridden by setting the HERMES_ENGINE_TARBALL_PATH\n+ * environment variable. If this varuable is set, the script will use the local tarball instead of downloading it.\n+ * @param {*} version\n+ * @param {*} buildType\n+ * @returns\n+ */\n async function prepareHermesArtifactsAsync(\n   version /*:string*/,\n   buildType /*:string*/,\n+  reactNativePath /*:string*/,\n ) /*: Promise<string> */ {\n+  const resolved_version = process.env.HERMES_VERSION ?? version;\n+  hermes_log(`Preparing Hermes v.${resolved_version}...`);\n+\n   // Check if the Hermes artifacts are already downloaded\n   const artifactsPath /*: string*/ = path.resolve(\n     process.cwd(),\n     '.build',\n     'artifacts',\n     'hermes',\n   );\n-  if (fs.existsSync(artifactsPath)) {\n-    return artifactsPath;\n+\n+  fs.mkdirSync(artifactsPath, {recursive: true});\n+\n+  let local_path = process.env.HERMES_ENGINE_TARBALL_PATH ?? '';\n+\n+  // Only check if the artifacts folder exists if we are not using a local tarball\n+  if (!local_path) {\n+    if (fs.existsSync(artifactsPath)) {\n+      // Check hermes version file\n+      const versionFilePath = path.join(artifactsPath, 'version.txt');\n+      if (fs.existsSync(versionFilePath)) {\n+        const versionFileContent = fs.readFileSync(versionFilePath, 'utf8');\n+        if (versionFileContent.trim() === resolved_version) {\n+          hermes_log(\n+            `Hermes artifacts already downloaded and up to date: ${artifactsPath}`,\n+          );\n+          return artifactsPath;\n+        }\n+      }\n+      // If the version file does not exist or the version does not match, delete the artifacts folder\n+      fs.rmSync(artifactsPath, {recursive: true, force: true});\n+      hermes_log(\n+        `Hermes artifacts folder already exists, but version does not match. Deleting: ${artifactsPath}`,\n+      );\n+      // Lets create the veresion.txt file\n+      fs.mkdirSync(artifactsPath, {recursive: true});\n+      fs.writeFileSync(versionFilePath, resolved_version, 'utf8');\n+      hermes_log(\n+        `Hermes artifacts folder created: ${artifactsPath} with version: ${resolved_version}`,\n+      );\n+    }\n+\n+    const sourceType = hermesSourceType(resolved_version, reactNativePath);\n+    local_path = resolve_source_type(\n+      sourceType,\n+      resolved_version,\n+      reactNativePath,\n+      artifactsPath,\n+    );\n+  } else {\n+    hermes_log('Using local tarball, skipping artifacts folder check');\n   }\n \n-  // Download the Hermes artifacts\n-  const url = getHermesArtifactsUrl(version, buildType);\n-  console.log(`Downloading Hermes artifacts from ${url}...`);\n+  // Extract the tar.gz\n+  execSync(`tar -xzf \"${local_path}\" -C \"${artifactsPath}\"`, {\n+    stdio: 'inherit',\n+  });\n+\n+  // Delete the tarball after extraction\n+  if (!process.env.HERMES_ENGINE_TARBALL_PATH) {\n+    fs.unlinkSync(local_path);\n+  }\n \n-  // download the file pointed to by the URL and store it in the ./.build/artifacts folder on disk\n-  await downloadAndExtract(url, artifactsPath);\n   return artifactsPath;\n }\n \n-async function downloadAndExtract(url /*:string*/, targetFolder /*:string*/) {\n-  const buildDir = path.resolve('.build', 'artifacts');\n-  const tarballPath = path.join(buildDir, 'artifact.tar.gz');\n+/*::\n+type HermesEngineSourceTypeT =\n+  | 'local_prebuilt_tarball'\n+  | 'download_prebuild_release_tarball'\n+  | 'download_prebuilt_nightly_tarball'\n+  | 'build_from_github_commit'\n+  | 'build_from_github_tag'\n+  | 'build_from_github_main'\n+  | 'build_from_local_source_dir';\n \n-  // Ensure build directory exists\n-  fs.mkdirSync(targetFolder, {recursive: true});\n+*/\n \n-  console.log(`Downloading file from ${url} to ${tarballPath}...`);\n+const HermesEngineSourceType = {\n+  LOCAL_PREBUILT_TARBALL: 'local_prebuilt_tarball',\n+  DOWNLOAD_PREBUILD_RELEASE_TARBALL: 'download_prebuild_release_tarball',\n+  DOWNLOAD_PREBUILT_NIGHTLY_TARBALL: 'download_prebuilt_nightly_tarball',\n+};\n \n+function hermesEngineTarballEnvvarDefined() /*: boolean */ {\n+  return !!process.env.HERMES_ENGINE_TARBALL_PATH;\n+}\n+\n+function releaseTarballUrl(\n+  version /*: string */,\n+  buildType /*: 'debug' | 'release' */,\n+) /*: string */ {\n+  const mavenRepoUrl = 'https://repo1.maven.org/maven2';\n+  const namespace = 'com/facebook/react';\n+  return `${mavenRepoUrl}/${namespace}/react-native-artifacts/${version}/react-native-artifacts-${version}-hermes-ios-${buildType}.tar.gz`;\n+}\n+\n+function nightlyTarballUrl(version /*: string */) /*: string */ {\n+  const params = `r=snapshots&g=com.facebook.react&a=react-native-artifacts&c=hermes-ios-debug&e=tar.gz&v=${version}-SNAPSHOT`;\n+  return resolveUrlRedirects(\n+    `http://oss.sonatype.org/service/local/artifact/maven/redirect?${params}`,\n+  );\n+}\n+\n+function resolveUrlRedirects(url /*: string */) /*: string */ {\n+  // Synchronously resolve the final URL after redirects using curl\n   try {\n-    // Download the file using curl via execSync\n-    execSync(`curl -L \"${url}\" -o \"${tarballPath}\"`, {stdio: 'inherit'});\n+    return execSync(`curl -Ls -o /dev/null -w '%{url_effective}' \"${url}\"`)\n+      .toString()\n+      .trim();\n+  } catch (e) {\n+    hermes_log(`Failed to resolve URL redirects\\n${e}`, 'error');\n+    return url;\n+  }\n+}\n+\n+function hermesArtifactExists(tarballUrl /*: string */) /*: boolean */ {\n+  try {\n+    const code = execSync(\n+      `curl -o /dev/null --silent -Iw '%{http_code}' -L \"${tarballUrl}\"`,\n+    )\n+      .toString()\n+      .trim();\n+    return code === '200';\n+  } catch (e) {\n+    return false;\n+  }\n+}\n+\n+function releaseArtifactExists(version /*: string */) /*: boolean */ {\n+  return hermesArtifactExists(releaseTarballUrl(version, 'debug'));\n+}\n \n-    console.log('Download complete. Extracting...');\n+function nightlyArtifactExists(version /*: string */) /*: boolean */ {\n+  return hermesArtifactExists(nightlyTarballUrl(version).replace(/\\\\/g, ''));\n+}\n+\n+function hermesSourceType(\n+  version /*: string */,\n+  reactNativePath /*: string */,\n+) /*: HermesEngineSourceTypeT */ {\n+  if (hermesEngineTarballEnvvarDefined()) {\n+    hermes_log('Using local prebuild tarball');\n+    return HermesEngineSourceType.LOCAL_PREBUILT_TARBALL;\n+  }\n+  if (releaseArtifactExists(version)) {\n+    hermes_log('Using download prebuild release tarball');\n+    return HermesEngineSourceType.DOWNLOAD_PREBUILD_RELEASE_TARBALL;\n+  }\n+  if (nightlyArtifactExists(version)) {\n+    hermes_log('Using download prebuild nightly tarball');\n+    return HermesEngineSourceType.DOWNLOAD_PREBUILT_NIGHTLY_TARBALL;\n+  }\n+  //return HermesEngineSourceType.BUILD_FROM_GITHUB_MAIN;\n+  hermes_log(\n+    'Using download prebuild nightly tarball - this is a fallback and might not work.',\n+  );\n+  return HermesEngineSourceType.DOWNLOAD_PREBUILT_NIGHTLY_TARBALL;\n+}\n \n-    // Extract the tar.gz using execSync\n-    execSync(`tar -xzf \"${tarballPath}\" -C \"${targetFolder}\"`, {\n-      stdio: 'inherit',\n-    });\n+function resolve_source_type(\n+  sourceType /*: HermesEngineSourceTypeT */,\n+  version /*: string */,\n+  reactNativePath /*: string */,\n+  artifactsPath /*: string*/,\n+) /*: string */ {\n+  switch (sourceType) {\n+    case HermesEngineSourceType.LOCAL_PREBUILT_TARBALL:\n+      return local_prebuilt_tarball(artifactsPath);\n+    case HermesEngineSourceType.DOWNLOAD_PREBUILD_RELEASE_TARBALL:\n+      return _download_prebuild_release_tarball(\n+        reactNativePath,\n+        version,\n+        artifactsPath,\n+      );\n+    case HermesEngineSourceType.DOWNLOAD_PREBUILT_NIGHTLY_TARBALL:\n+      return _download_prebuilt_nightly_tarball(version, artifactsPath);\n+    default:\n+      abort(\n+        `[Hermes] Unsupported or invalid source type provided: ${sourceType}`,\n+      );\n+      return '';\n+  }\n+}\n \n-    // Delete the tarball after extraction\n-    fs.unlinkSync(tarballPath);\n+function local_prebuilt_tarball(artifactsPath /*: string*/) /*: string */ {\n+  const tarballPath = process.env.HERMES_ENGINE_TARBALL_PATH;\n+  if (tarballPath && fs.existsSync(tarballPath)) {\n+    hermes_log(\n+      `Using pre-built binary from local path defined by HERMES_ENGINE_TARBALL_PATH envvar: ${tarballPath}`,\n+    );\n+    return `file://${tarballPath}`;\n+  }\n+  abort(\n+    `[Hermes] HERMES_ENGINE_TARBALL_PATH is set, but points to a non-existing file: \"${tarballPath ?? 'unknown'}\"\\nIf you don't want to use tarball, run 'unset HERMES_ENGINE_TARBALL_PATH'`,\n+  );\n+  return '';\n+}\n \n-    console.log('Download and extraction complete.');\n-  } catch (error) {\n-    if (fs.existsSync(tarballPath)) {\n-      fs.unlinkSync(tarballPath);\n+function _download_prebuild_release_tarball(",
        "comment_created_at": "2025-05-09T12:28:31+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "```suggestion\r\nfunction _downloadPrebuildReleaseTarball(\r\n```\r\nThe leading `_` is ok, that's the convention for \"private\" methods",
        "pr_file_module": null
      }
    ]
  }
]