[
  {
    "discussion_id": "1919011449",
    "pr_number": 48496,
    "pr_file": "packages/react-native/ReactCommon/react/renderer/graphics/platform/ios/react/renderer/graphics/HostPlatformColor.h",
    "created_at": "2025-01-16T18:30:19+00:00",
    "commented_code": "struct std::hash<facebook::react::Color> {\n   size_t operator()(const facebook::react::Color& color) const {\n     auto seed = size_t{0};\n-    facebook::react::hash_combine(seed, color.getColor());\n+    facebook::react::hash_combine(seed, color.getUIColorHash());\n     return seed;",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1919011449",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48496,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/graphics/platform/ios/react/renderer/graphics/HostPlatformColor.h",
        "discussion_id": "1919011449",
        "commented_code": "@@ -104,7 +106,7 @@ template <>\n struct std::hash<facebook::react::Color> {\n   size_t operator()(const facebook::react::Color& color) const {\n     auto seed = size_t{0};\n-    facebook::react::hash_combine(seed, color.getColor());\n+    facebook::react::hash_combine(seed, color.getUIColorHash());\n     return seed;",
        "comment_created_at": "2025-01-16T18:30:19+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "@javache No value in calling hash_combine again with seed 0.\r\n```suggestion\r\nreturn color.getUIColorHash();\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "601571918",
    "pr_number": 31222,
    "pr_file": "React/Fabric/Mounting/ComponentViews/View/RCTViewComponentView.mm",
    "created_at": "2021-03-25T15:03:57+00:00",
    "commented_code": "NSMutableString *result = [NSMutableString stringWithString:@\"\"];\n   for (UIView *subview in view.subviews) {\n     NSString *label = subview.accessibilityLabel;\n-    if (!label) {\n+    static Class otherClass = nil;\n+    static BOOL otherClassLookedUp = NO;\n+    if (!otherClass && !otherClassLookedUp) {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "601571918",
        "repo_full_name": "facebook/react-native",
        "pr_number": 31222,
        "pr_file": "React/Fabric/Mounting/ComponentViews/View/RCTViewComponentView.mm",
        "discussion_id": "601571918",
        "commented_code": "@@ -558,7 +558,13 @@ - (NSObject *)accessibilityElement\n   NSMutableString *result = [NSMutableString stringWithString:@\"\"];\n   for (UIView *subview in view.subviews) {\n     NSString *label = subview.accessibilityLabel;\n-    if (!label) {\n+    static Class otherClass = nil;\n+    static BOOL otherClassLookedUp = NO;\n+    if (!otherClass && !otherClassLookedUp) {",
        "comment_created_at": "2021-03-25T15:03:57+00:00",
        "comment_author": "mechazod",
        "comment_body": "@mrmacete Is this intentional to be true always? I'm a bit confused on this, why you add this three (3) lines 561..563.",
        "pr_file_module": null
      },
      {
        "comment_id": "601622475",
        "repo_full_name": "facebook/react-native",
        "pr_number": 31222,
        "pr_file": "React/Fabric/Mounting/ComponentViews/View/RCTViewComponentView.mm",
        "discussion_id": "601571918",
        "commented_code": "@@ -558,7 +558,13 @@ - (NSObject *)accessibilityElement\n   NSMutableString *result = [NSMutableString stringWithString:@\"\"];\n   for (UIView *subview in view.subviews) {\n     NSString *label = subview.accessibilityLabel;\n-    if (!label) {\n+    static Class otherClass = nil;\n+    static BOOL otherClassLookedUp = NO;\n+    if (!otherClass && !otherClassLookedUp) {",
        "comment_created_at": "2021-03-25T15:58:27+00:00",
        "comment_author": "mrmacete",
        "comment_body": "The `static` variables are initialised only once, then on subsequent invocations of the same function they retain their value (like as if they were global variables, but scoped only to the function / block they belong to). \r\n\r\nIt's intended as an optimisation to avoid calling `NSClassFromString` all the time.",
        "pr_file_module": null
      },
      {
        "comment_id": "601638157",
        "repo_full_name": "facebook/react-native",
        "pr_number": 31222,
        "pr_file": "React/Fabric/Mounting/ComponentViews/View/RCTViewComponentView.mm",
        "discussion_id": "601571918",
        "commented_code": "@@ -558,7 +558,13 @@ - (NSObject *)accessibilityElement\n   NSMutableString *result = [NSMutableString stringWithString:@\"\"];\n   for (UIView *subview in view.subviews) {\n     NSString *label = subview.accessibilityLabel;\n-    if (!label) {\n+    static Class otherClass = nil;\n+    static BOOL otherClassLookedUp = NO;\n+    if (!otherClass && !otherClassLookedUp) {",
        "comment_created_at": "2021-03-25T16:16:20+00:00",
        "comment_author": "mechazod",
        "comment_body": "Got it, I think you can directly `![subview isKindOfClass:<>]`, removing line 561 to 566. Or not possible?",
        "pr_file_module": null
      },
      {
        "comment_id": "601641575",
        "repo_full_name": "facebook/react-native",
        "pr_number": 31222,
        "pr_file": "React/Fabric/Mounting/ComponentViews/View/RCTViewComponentView.mm",
        "discussion_id": "601571918",
        "commented_code": "@@ -558,7 +558,13 @@ - (NSObject *)accessibilityElement\n   NSMutableString *result = [NSMutableString stringWithString:@\"\"];\n   for (UIView *subview in view.subviews) {\n     NSString *label = subview.accessibilityLabel;\n-    if (!label) {\n+    static Class otherClass = nil;\n+    static BOOL otherClassLookedUp = NO;\n+    if (!otherClass && !otherClassLookedUp) {",
        "comment_created_at": "2021-03-25T16:20:11+00:00",
        "comment_author": "mrmacete",
        "comment_body": "dynamic lookup is safer and less noisy, because `RCTViewComponentView` and `RCTView` apparently don't \"know\" each other at compile time and they **may** not even be both present at the same time in any given compiled app.",
        "pr_file_module": null
      },
      {
        "comment_id": "601643007",
        "repo_full_name": "facebook/react-native",
        "pr_number": 31222,
        "pr_file": "React/Fabric/Mounting/ComponentViews/View/RCTViewComponentView.mm",
        "discussion_id": "601571918",
        "commented_code": "@@ -558,7 +558,13 @@ - (NSObject *)accessibilityElement\n   NSMutableString *result = [NSMutableString stringWithString:@\"\"];\n   for (UIView *subview in view.subviews) {\n     NSString *label = subview.accessibilityLabel;\n-    if (!label) {\n+    static Class otherClass = nil;\n+    static BOOL otherClassLookedUp = NO;\n+    if (!otherClass && !otherClassLookedUp) {",
        "comment_created_at": "2021-03-25T16:21:52+00:00",
        "comment_author": "mrmacete",
        "comment_body": "(and i think this is the fundamental reason why this code is duped)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1821101093",
    "pr_number": 47003,
    "pr_file": "packages/react-native/React/Fabric/Utils/RCTLinearGradient.mm",
    "created_at": "2024-10-29T15:47:57+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+#import \"RCTLinearGradient.h\"\n+\n+#import <React/RCTConversions.h>\n+\n+using namespace facebook::react;\n+\n+@implementation RCTLinearGradient\n+\n++ (CALayer *)gradientLayerWithSize:(CGSize)size\n+                          gradient:(const LinearGradient&) gradient {\n+  \n+  UIGraphicsImageRenderer *renderer = [[UIGraphicsImageRenderer alloc] initWithSize:size];\n+  auto orientation = gradient.orientation;\n+  auto colorStops = gradient.colorStops;",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1821101093",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47003,
        "pr_file": "packages/react-native/React/Fabric/Utils/RCTLinearGradient.mm",
        "discussion_id": "1821101093",
        "commented_code": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+#import \"RCTLinearGradient.h\"\n+\n+#import <React/RCTConversions.h>\n+\n+using namespace facebook::react;\n+\n+@implementation RCTLinearGradient\n+\n++ (CALayer *)gradientLayerWithSize:(CGSize)size\n+                          gradient:(const LinearGradient&) gradient {\n+  \n+  UIGraphicsImageRenderer *renderer = [[UIGraphicsImageRenderer alloc] initWithSize:size];\n+  auto orientation = gradient.orientation;\n+  auto colorStops = gradient.colorStops;",
        "comment_created_at": "2024-10-29T15:47:57+00:00",
        "comment_author": "NickGerleman",
        "comment_body": "```suggestion\r\n  const auto& orientation = gradient.orientation;\r\n  const auto& colorStops = gradient.colorStops;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1769324323",
    "pr_number": 46584,
    "pr_file": "packages/react-native/ReactCommon/react/renderer/components/view/YogaLayoutableShadowNode.h",
    "created_at": "2024-09-20T22:21:45+00:00",
    "commented_code": "public:\n   using Shared = std::shared_ptr<const YogaLayoutableShadowNode>;\n   using ListOfShared = std::vector<Shared>;\n+    \n+  /*\n+   * Describes a shadow node which is a direct child in the Yoga tree,\n+   * not necessarily in the shadow tree. In most cases directChild == yogaChild,\n+   * the exception being when directChild has its display set to `contents`.\n+   * In that case yogaChild points to a ShadowNode whose yogaNode is a direct\n+   * child of this one's.\n+   */\n+  struct ChildPair {\n+    Shared directChild;\n+    Shared yogaChild;\n+  };",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1769324323",
        "repo_full_name": "facebook/react-native",
        "pr_number": 46584,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/components/view/YogaLayoutableShadowNode.h",
        "discussion_id": "1769324323",
        "commented_code": "@@ -25,6 +25,18 @@ class YogaLayoutableShadowNode : public LayoutableShadowNode {\n  public:\n   using Shared = std::shared_ptr<const YogaLayoutableShadowNode>;\n   using ListOfShared = std::vector<Shared>;\n+    \n+  /*\n+   * Describes a shadow node which is a direct child in the Yoga tree,\n+   * not necessarily in the shadow tree. In most cases directChild == yogaChild,\n+   * the exception being when directChild has its display set to `contents`.\n+   * In that case yogaChild points to a ShadowNode whose yogaNode is a direct\n+   * child of this one's.\n+   */\n+  struct ChildPair {\n+    Shared directChild;\n+    Shared yogaChild;\n+  };",
        "comment_created_at": "2024-09-20T22:21:45+00:00",
        "comment_author": "NickGerleman",
        "comment_body": "Could you remind me why we need to store this state, vs deriving it during iteration?",
        "pr_file_module": null
      },
      {
        "comment_id": "1771159726",
        "repo_full_name": "facebook/react-native",
        "pr_number": 46584,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/components/view/YogaLayoutableShadowNode.h",
        "discussion_id": "1769324323",
        "commented_code": "@@ -25,6 +25,18 @@ class YogaLayoutableShadowNode : public LayoutableShadowNode {\n  public:\n   using Shared = std::shared_ptr<const YogaLayoutableShadowNode>;\n   using ListOfShared = std::vector<Shared>;\n+    \n+  /*\n+   * Describes a shadow node which is a direct child in the Yoga tree,\n+   * not necessarily in the shadow tree. In most cases directChild == yogaChild,\n+   * the exception being when directChild has its display set to `contents`.\n+   * In that case yogaChild points to a ShadowNode whose yogaNode is a direct\n+   * child of this one's.\n+   */\n+  struct ChildPair {\n+    Shared directChild;\n+    Shared yogaChild;\n+  };",
        "comment_created_at": "2024-09-23T10:33:02+00:00",
        "comment_author": "j-piasecki",
        "comment_body": "This way there's no need to check whether a child has `display: contents` set on it before doing anything on an item from the list. Otherwise, it would need to be checked first whether the node from the list is a direct child or not. In some cases, where access to the direct child is required (when replacing children), the direct child would need to be found.\r\n\r\nHaving access to both allows to just directly refer to the node that's needed at the time.",
        "pr_file_module": null
      }
    ]
  }
]