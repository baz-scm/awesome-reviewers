[
  {
    "discussion_id": "2083584366",
    "pr_number": 51207,
    "pr_file": "packages/react-native/ReactCommon/react/nativemodule/samples/platform/android/NativeSampleTurboModuleSpec.java",
    "created_at": "2025-05-11T17:57:39+00:00",
    "commented_code": "}\n \n   protected final void emitOnPress() {\n-    mEventEmitterCallback.invoke(\"onPress\");\n+    getEventEmitterCallback().invoke(\"onPress\");",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2083584366",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51207,
        "pr_file": "packages/react-native/ReactCommon/react/nativemodule/samples/platform/android/NativeSampleTurboModuleSpec.java",
        "discussion_id": "2083584366",
        "commented_code": "@@ -41,19 +41,19 @@ public NativeSampleTurboModuleSpec(ReactApplicationContext reactContext) {\n   }\n \n   protected final void emitOnPress() {\n-    mEventEmitterCallback.invoke(\"onPress\");\n+    getEventEmitterCallback().invoke(\"onPress\");",
        "comment_created_at": "2025-05-11T17:57:39+00:00",
        "comment_author": "mateoguzmana",
        "comment_body": "Normally when we have to do these changes after a migration, it indicates it is a breaking change. I've checked and this specific property is used in other open source packages: [See](https://github.com/search?type=code&q=NOT+is%3Afork+NOT+org%3Afacebook+NOT+repo%3Areact-native-tvos%2Freact-native-tvos+NOT+repo%3Anuagoz%2Freact-native+NOT+repo%3A2lambda123%2Freact-native+NOT+repo%3Abeanchips%2Ffacebookreactnative+NOT+repo%3AfabOnReact%2Freact-native-notes+NOT+user%3Ahuntie+NOT+user%3Acortinico+NOT+repo%3AMaxdev18%2Fpowersync_app+NOT+repo%3Acarter-0%2Finstagram-decompiled+NOT+repo%3Am0mosenpai%2Finstadamn+NOT+repo%3AA-Star100%2FA-Star100-AUG2-2024+NOT+repo%3Alclnrd%2Fdetox-scrollview-reproductible+NOT+repo%3ADionisisChytiris%2FWorldWiseTrivia_Main+NOT+repo%3Apast3l%2Fhi2+NOT+repo%3AoneDotpy%2FCaribouQuest+NOT+repo%3Abejayoharen%2Fdailytodo+NOT+repo%3Amolangning%2Freversing-discord+NOT+repo%3AScottPrzy%2Freact-native+NOT+repo%3Agabrieldonadel%2Freact-native-visionos+NOT+repo%3AGabriel2308%2FTestes-Soft+NOT+repo%3Adawnzs03%2FflakyBuild+NOT+repo%3Acga2351%2Fcode+NOT+repo%3Astreeg%2Ftcc+NOT+repo%3Asoftware-mansion-labs%2Freact-native-swiftui+NOT+repo%3Apkcsecurity%2Fdecompiled-lightbulb+mEventEmitterCallback)\r\n\r\nCould you try to find a way to maintain backwards compatibility? we might have to expose a getter separately, but leaving the property with the same name so it can also be accessed like the change you did here",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1907028775",
    "pr_number": 48338,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/ReactNativeHost.java",
    "created_at": "2025-01-08T11:20:30+00:00",
    "commented_code": "/** Returns whether dev mode should be enabled. This enables e.g. the dev menu. */\n   public abstract boolean getUseDeveloperSupport();\n \n+  /** Cleanup function for brownfield scenarios. */\n+  public abstract void invalidate();",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1907028775",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48338,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/ReactNativeHost.java",
        "discussion_id": "1907028775",
        "commented_code": "@@ -220,6 +220,9 @@ protected String getJSMainModuleName() {\n   /** Returns whether dev mode should be enabled. This enables e.g. the dev menu. */\n   public abstract boolean getUseDeveloperSupport();\n \n+  /** Cleanup function for brownfield scenarios. */\n+  public abstract void invalidate();",
        "comment_created_at": "2025-01-08T11:20:30+00:00",
        "comment_author": "cortinico",
        "comment_body": "I see that `ReactNativeHost` already has a `clear()` method.\r\nCould we instead do the invalidation in the `DefaultReactHost.clear()` method instead of having to create a brand new `invalidate()` abstract method?",
        "pr_file_module": null
      },
      {
        "comment_id": "1907248978",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48338,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/ReactNativeHost.java",
        "discussion_id": "1907028775",
        "commented_code": "@@ -220,6 +220,9 @@ protected String getJSMainModuleName() {\n   /** Returns whether dev mode should be enabled. This enables e.g. the dev menu. */\n   public abstract boolean getUseDeveloperSupport();\n \n+  /** Cleanup function for brownfield scenarios. */\n+  public abstract void invalidate();",
        "comment_created_at": "2025-01-08T14:12:51+00:00",
        "comment_author": "WoLewicki",
        "comment_body": "Ok so `clear` is a public API for cleaning all of those instances? If so, I think it will be the correct place to put it there then.",
        "pr_file_module": null
      },
      {
        "comment_id": "1907285844",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48338,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/ReactNativeHost.java",
        "discussion_id": "1907028775",
        "commented_code": "@@ -220,6 +220,9 @@ protected String getJSMainModuleName() {\n   /** Returns whether dev mode should be enabled. This enables e.g. the dev menu. */\n   public abstract boolean getUseDeveloperSupport();\n \n+  /** Cleanup function for brownfield scenarios. */\n+  public abstract void invalidate();",
        "comment_created_at": "2025-01-08T14:38:10+00:00",
        "comment_author": "WoLewicki",
        "comment_body": "I changed it but I am not sure if the `INSTANCE` is the proper way of getting the instance of kotlin object.",
        "pr_file_module": null
      }
    ]
  }
]