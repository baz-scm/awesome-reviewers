[
  {
    "discussion_id": "1255934036",
    "pr_number": 35803,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.java",
    "created_at": "2023-07-07T14:42:31+00:00",
    "commented_code": "public Object updateState(\n       ReactModalHostView view, ReactStylesDiffMap props, StateWrapper stateWrapper) {\n     view.getFabricViewStateManager().setStateWrapper(stateWrapper);\n-    Point modalSize = ModalHostHelper.getModalHostSize(view.getContext());\n-    view.updateState(modalSize.x, modalSize.y);",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1255934036",
        "repo_full_name": "facebook/react-native",
        "pr_number": 35803,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.java",
        "discussion_id": "1255934036",
        "commented_code": "@@ -168,8 +158,6 @@ protected void onAfterUpdateTransaction(ReactModalHostView view) {\n   public Object updateState(\n       ReactModalHostView view, ReactStylesDiffMap props, StateWrapper stateWrapper) {\n     view.getFabricViewStateManager().setStateWrapper(stateWrapper);\n-    Point modalSize = ModalHostHelper.getModalHostSize(view.getContext());\n-    view.updateState(modalSize.x, modalSize.y);",
        "comment_created_at": "2023-07-07T14:42:31+00:00",
        "comment_author": "sammy-SC",
        "comment_body": "I think the renderer needs this information. What if React Native's viewport is not full screen but only partially covers the screen? In that case, we need to feed the information about available size to React Native so it knows that whatever is within the modal, is not constrained by RN's viewport size.",
        "pr_file_module": null
      },
      {
        "comment_id": "1257889123",
        "repo_full_name": "facebook/react-native",
        "pr_number": 35803,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.java",
        "discussion_id": "1255934036",
        "commented_code": "@@ -168,8 +158,6 @@ protected void onAfterUpdateTransaction(ReactModalHostView view) {\n   public Object updateState(\n       ReactModalHostView view, ReactStylesDiffMap props, StateWrapper stateWrapper) {\n     view.getFabricViewStateManager().setStateWrapper(stateWrapper);\n-    Point modalSize = ModalHostHelper.getModalHostSize(view.getContext());\n-    view.updateState(modalSize.x, modalSize.y);",
        "comment_created_at": "2023-07-10T08:15:50+00:00",
        "comment_author": "WoLewicki",
        "comment_body": "Is there another direction that we could go to resolve the issue then @sammy-SC ?",
        "pr_file_module": null
      },
      {
        "comment_id": "1260281466",
        "repo_full_name": "facebook/react-native",
        "pr_number": 35803,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.java",
        "discussion_id": "1255934036",
        "commented_code": "@@ -168,8 +158,6 @@ protected void onAfterUpdateTransaction(ReactModalHostView view) {\n   public Object updateState(\n       ReactModalHostView view, ReactStylesDiffMap props, StateWrapper stateWrapper) {\n     view.getFabricViewStateManager().setStateWrapper(stateWrapper);\n-    Point modalSize = ModalHostHelper.getModalHostSize(view.getContext());\n-    view.updateState(modalSize.x, modalSize.y);",
        "comment_created_at": "2023-07-11T21:04:50+00:00",
        "comment_author": "sammy-SC",
        "comment_body": "I would try to investigate why is the height wrong in the new architecture. The height seems to be off exactly by the height of the status bar. Could it be that `ModalHostHelper.getModalHostSize(view.getContext())` returns height of React Native's view port instead of the desired size of the modal? Where is the height calculated for the old architecture and why is it correct? Maybe we missed something in the implementation for the new architecture.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1854867862",
    "pr_number": 47902,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java",
    "created_at": "2024-11-22T23:11:45+00:00",
    "commented_code": "// VisibleForTesting from {@link TextInputEventsTestCase}.\n   public void requestFocusFromJS() {\n     requestFocusInternal();\n+    hasSelectedTextOnFocus = true;",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1854867862",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47902,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java",
        "discussion_id": "1854867862",
        "commented_code": "@@ -630,6 +631,7 @@ public void maybeUpdateTypeface() {\n   // VisibleForTesting from {@link TextInputEventsTestCase}.\n   public void requestFocusFromJS() {\n     requestFocusInternal();\n+    hasSelectedTextOnFocus = true;",
        "comment_created_at": "2024-11-22T23:11:45+00:00",
        "comment_author": "NickGerleman",
        "comment_body": "Why do we avoid the onLayout focus here?",
        "pr_file_module": null
      },
      {
        "comment_id": "1858238431",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47902,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java",
        "discussion_id": "1854867862",
        "commented_code": "@@ -630,6 +631,7 @@ public void maybeUpdateTypeface() {\n   // VisibleForTesting from {@link TextInputEventsTestCase}.\n   public void requestFocusFromJS() {\n     requestFocusInternal();\n+    hasSelectedTextOnFocus = true;",
        "comment_created_at": "2024-11-26T10:41:01+00:00",
        "comment_author": "j-piasecki",
        "comment_body": "The original PR added this behavior to fix `autofocus` and `selectTextOnFocus` not working when used together. Since the focus logic was added to `onLayout` it may trigger in different cases also, you can see that in the first video (`Before` in the table), where the input is focused from JS (with no layout) and then layout change causes the text to be selected even though the focus didn't change.",
        "pr_file_module": null
      }
    ]
  }
]