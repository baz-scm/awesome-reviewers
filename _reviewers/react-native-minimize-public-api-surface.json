[
  {
    "discussion_id": "2136591584",
    "pr_number": 47554,
    "pr_file": "packages/react-native/React/CoreModules/RCTAppearance.mm",
    "created_at": "2025-06-09T22:22:13+00:00",
    "commented_code": "return self;\n }\n \n+- (void)initialize\n+{\n+  _constants = facebook::react::typedConstants<JS::NativeAppearance::Constants>({\n+      .IS_EDGE_TO_EDGE_ENABLED = true",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2136591584",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47554,
        "pr_file": "packages/react-native/React/CoreModules/RCTAppearance.mm",
        "discussion_id": "2136591584",
        "commented_code": "@@ -92,6 +93,13 @@ - (instancetype)init\n   return self;\n }\n \n+- (void)initialize\n+{\n+  _constants = facebook::react::typedConstants<JS::NativeAppearance::Constants>({\n+      .IS_EDGE_TO_EDGE_ENABLED = true",
        "comment_created_at": "2025-06-09T22:22:13+00:00",
        "comment_author": "alanleedev",
        "comment_body": "@zoontek If this is fixed value for iOS, do we need to call into the native module? What about just returning true in Javascript based on platform check?",
        "pr_file_module": null
      },
      {
        "comment_id": "2137226694",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47554,
        "pr_file": "packages/react-native/React/CoreModules/RCTAppearance.mm",
        "discussion_id": "2136591584",
        "commented_code": "@@ -92,6 +93,13 @@ - (instancetype)init\n   return self;\n }\n \n+- (void)initialize\n+{\n+  _constants = facebook::react::typedConstants<JS::NativeAppearance::Constants>({\n+      .IS_EDGE_TO_EDGE_ENABLED = true",
        "comment_created_at": "2025-06-10T08:15:43+00:00",
        "comment_author": "zoontek",
        "comment_body": "The value is not exposed in the public API, I plan to use it in [`react-native-is-edge-to-edge`](https://github.com/zoontek/react-native-edge-to-edge/tree/main/react-native-is-edge-to-edge) and the value check is only done on Android.\r\n\r\nIt's only declared on iOS because of codegen (similar to https://github.com/facebook/react-native/blob/v0.80.0-rc.5/packages/react-native/React/CoreModules/RCTStatusBarManager.mm#L82)",
        "pr_file_module": null
      },
      {
        "comment_id": "2137974339",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47554,
        "pr_file": "packages/react-native/React/CoreModules/RCTAppearance.mm",
        "discussion_id": "2136591584",
        "commented_code": "@@ -92,6 +93,13 @@ - (instancetype)init\n   return self;\n }\n \n+- (void)initialize\n+{\n+  _constants = facebook::react::typedConstants<JS::NativeAppearance::Constants>({\n+      .IS_EDGE_TO_EDGE_ENABLED = true",
        "comment_created_at": "2025-06-10T13:55:10+00:00",
        "comment_author": "zoontek",
        "comment_body": "Not needed anymore since it's now an optional value in the `NativeDeviceInfo` module.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2095310887",
    "pr_number": 51444,
    "pr_file": "packages/react-native/React/Base/RCTUtils.h",
    "created_at": "2025-05-19T09:43:03+00:00",
    "commented_code": "RCT_EXTERN CGFloat RCTFontSizeMultiplier(void);\n RCT_EXTERN CGSize RCTScreenSize(void);\n RCT_EXTERN CGSize RCTViewportSize(void);\n+RCT_EXTERN UIDeviceOrientation RCTDeviceOrientation(void);",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2095310887",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51444,
        "pr_file": "packages/react-native/React/Base/RCTUtils.h",
        "discussion_id": "2095310887",
        "commented_code": "@@ -56,6 +56,7 @@ RCT_EXTERN CGFloat RCTScreenScale(void);\n RCT_EXTERN CGFloat RCTFontSizeMultiplier(void);\n RCT_EXTERN CGSize RCTScreenSize(void);\n RCT_EXTERN CGSize RCTViewportSize(void);\n+RCT_EXTERN UIDeviceOrientation RCTDeviceOrientation(void);",
        "comment_created_at": "2025-05-19T09:43:03+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "do we really need this extra function in the header? This will be a new public API that we need to mmaintain. Given that it is used only in RCTUtils.mm, can we keep it private in the .mm file instead?",
        "pr_file_module": null
      },
      {
        "comment_id": "2095361799",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51444,
        "pr_file": "packages/react-native/React/Base/RCTUtils.h",
        "discussion_id": "2095310887",
        "commented_code": "@@ -56,6 +56,7 @@ RCT_EXTERN CGFloat RCTScreenScale(void);\n RCT_EXTERN CGFloat RCTFontSizeMultiplier(void);\n RCT_EXTERN CGSize RCTScreenSize(void);\n RCT_EXTERN CGSize RCTViewportSize(void);\n+RCT_EXTERN UIDeviceOrientation RCTDeviceOrientation(void);",
        "comment_created_at": "2025-05-19T10:10:27+00:00",
        "comment_author": "okwasniewski",
        "comment_body": "@cipolleschi We probably don't need to expose it. I removed it. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1802866175",
    "pr_number": 46973,
    "pr_file": "packages/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm",
    "created_at": "2024-10-16T10:49:27+00:00",
    "commented_code": "}\n \n - (void)_updateState\n+{\n+    NSAttributedString *attributedString = _backedTextInputView.attributedText;\n+    [self _updateStateWithString:attributedString];\n+}\n+\n+- (void)_updateStateWithString:(NSAttributedString*)attributedString\n {\n   if (!_state) {\n     return;\n   }\n-  NSAttributedString *attributedString = _backedTextInputView.attributedText;\n   auto data = _state->getData();\n   _lastStringStateWasUpdatedWith = attributedString;\n   data.attributedStringBox = RCTAttributedStringBoxFromNSAttributedString(attributedString);\n   _mostRecentEventCount += _comingFromJS ? 0 : 1;\n   data.mostRecentEventCount = _mostRecentEventCount;\n-  _state->updateState(std::move(data));\n+  const auto &textInputEventEmitter = static_cast<const TextInputEventEmitter &>(*_eventEmitter);\n+  // When the textInputDidChange gets called, the text is already updated\n+  // in the UI. We execute the state update synchronously so that the layout gets calculated immediately.\n+  textInputEventEmitter.experimental_flushSync([state = _state, data = std::move(data)]() mutable {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1802866175",
        "repo_full_name": "facebook/react-native",
        "pr_number": 46973,
        "pr_file": "packages/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm",
        "discussion_id": "1802866175",
        "commented_code": "@@ -614,17 +614,27 @@ - (void)handleInputAccessoryDoneButton\n }\n \n - (void)_updateState\n+{\n+    NSAttributedString *attributedString = _backedTextInputView.attributedText;\n+    [self _updateStateWithString:attributedString];\n+}\n+\n+- (void)_updateStateWithString:(NSAttributedString*)attributedString\n {\n   if (!_state) {\n     return;\n   }\n-  NSAttributedString *attributedString = _backedTextInputView.attributedText;\n   auto data = _state->getData();\n   _lastStringStateWasUpdatedWith = attributedString;\n   data.attributedStringBox = RCTAttributedStringBoxFromNSAttributedString(attributedString);\n   _mostRecentEventCount += _comingFromJS ? 0 : 1;\n   data.mostRecentEventCount = _mostRecentEventCount;\n-  _state->updateState(std::move(data));\n+  const auto &textInputEventEmitter = static_cast<const TextInputEventEmitter &>(*_eventEmitter);\n+  // When the textInputDidChange gets called, the text is already updated\n+  // in the UI. We execute the state update synchronously so that the layout gets calculated immediately.\n+  textInputEventEmitter.experimental_flushSync([state = _state, data = std::move(data)]() mutable {",
        "comment_created_at": "2024-10-16T10:49:27+00:00",
        "comment_author": "sammy-SC",
        "comment_body": "the API is not ready for a general adoption. We are still iterating on the design and trying to prove its usefulness in production.",
        "pr_file_module": null
      },
      {
        "comment_id": "1804235609",
        "repo_full_name": "facebook/react-native",
        "pr_number": 46973,
        "pr_file": "packages/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm",
        "discussion_id": "1802866175",
        "commented_code": "@@ -614,17 +614,27 @@ - (void)handleInputAccessoryDoneButton\n }\n \n - (void)_updateState\n+{\n+    NSAttributedString *attributedString = _backedTextInputView.attributedText;\n+    [self _updateStateWithString:attributedString];\n+}\n+\n+- (void)_updateStateWithString:(NSAttributedString*)attributedString\n {\n   if (!_state) {\n     return;\n   }\n-  NSAttributedString *attributedString = _backedTextInputView.attributedText;\n   auto data = _state->getData();\n   _lastStringStateWasUpdatedWith = attributedString;\n   data.attributedStringBox = RCTAttributedStringBoxFromNSAttributedString(attributedString);\n   _mostRecentEventCount += _comingFromJS ? 0 : 1;\n   data.mostRecentEventCount = _mostRecentEventCount;\n-  _state->updateState(std::move(data));\n+  const auto &textInputEventEmitter = static_cast<const TextInputEventEmitter &>(*_eventEmitter);\n+  // When the textInputDidChange gets called, the text is already updated\n+  // in the UI. We execute the state update synchronously so that the layout gets calculated immediately.\n+  textInputEventEmitter.experimental_flushSync([state = _state, data = std::move(data)]() mutable {",
        "comment_created_at": "2024-10-17T07:16:09+00:00",
        "comment_author": "hannojg",
        "comment_body": "okay, then lets hide it behind a feature flag?",
        "pr_file_module": null
      },
      {
        "comment_id": "1806265426",
        "repo_full_name": "facebook/react-native",
        "pr_number": 46973,
        "pr_file": "packages/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm",
        "discussion_id": "1802866175",
        "commented_code": "@@ -614,17 +614,27 @@ - (void)handleInputAccessoryDoneButton\n }\n \n - (void)_updateState\n+{\n+    NSAttributedString *attributedString = _backedTextInputView.attributedText;\n+    [self _updateStateWithString:attributedString];\n+}\n+\n+- (void)_updateStateWithString:(NSAttributedString*)attributedString\n {\n   if (!_state) {\n     return;\n   }\n-  NSAttributedString *attributedString = _backedTextInputView.attributedText;\n   auto data = _state->getData();\n   _lastStringStateWasUpdatedWith = attributedString;\n   data.attributedStringBox = RCTAttributedStringBoxFromNSAttributedString(attributedString);\n   _mostRecentEventCount += _comingFromJS ? 0 : 1;\n   data.mostRecentEventCount = _mostRecentEventCount;\n-  _state->updateState(std::move(data));\n+  const auto &textInputEventEmitter = static_cast<const TextInputEventEmitter &>(*_eventEmitter);\n+  // When the textInputDidChange gets called, the text is already updated\n+  // in the UI. We execute the state update synchronously so that the layout gets calculated immediately.\n+  textInputEventEmitter.experimental_flushSync([state = _state, data = std::move(data)]() mutable {",
        "comment_created_at": "2024-10-18T10:21:33+00:00",
        "comment_author": "sammy-SC",
        "comment_body": "let me share little more context :) \r\n\r\nFirst of all, the the general approach you are taking here is good. This is one of issues that sync events can fix as React Native will no longer need to do the round trip from the main thread to JS thread and back to main thread, resulting in unpleasant flicker.\r\n\r\nAs the method name suggests, the sync events are still experimental. We are not sure what the right API is at the moment. We are focusing on making the new architecture the default before fully embracing the new capabilities that is potentially breaking. experimental_flushSync works great in isolated cases but might lead to dropped frames when the JS thread is busy. We currently don't have good tools to help engineers find what the main thread is blocked on. \r\n\r\nOnce we have a good design for sync events, it will fix some issues with TextInput and significantly simplify the implementation. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1835871620",
    "pr_number": 47477,
    "pr_file": "packages/react-native/ReactCommon/react/renderer/graphics/Transform.h",
    "created_at": "2024-11-11T02:06:20+00:00",
    "commented_code": "*/\n   static Transform FromTransformOperation(\n       TransformOperation transformOperation,\n-      const Size& size);\n+      const Size& size,\n+      const Transform& transform = Transform::Identity());",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1835871620",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47477,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/graphics/Transform.h",
        "discussion_id": "1835871620",
        "commented_code": "@@ -101,7 +101,8 @@ struct Transform {\n    */\n   static Transform FromTransformOperation(\n       TransformOperation transformOperation,\n-      const Size& size);\n+      const Size& size,\n+      const Transform& transform = Transform::Identity());",
        "comment_created_at": "2024-11-11T02:06:20+00:00",
        "comment_author": "zhongwuzw",
        "comment_body": "@javache Should we need to keep `transform` optional to make API stable?",
        "pr_file_module": null
      },
      {
        "comment_id": "1836646919",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47477,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/graphics/Transform.h",
        "discussion_id": "1835871620",
        "commented_code": "@@ -101,7 +101,8 @@ struct Transform {\n    */\n   static Transform FromTransformOperation(\n       TransformOperation transformOperation,\n-      const Size& size);\n+      const Size& size,\n+      const Transform& transform = Transform::Identity());",
        "comment_created_at": "2024-11-11T13:08:44+00:00",
        "comment_author": "javache",
        "comment_body": "This seems ok to me. As long as C++ doesn't do anything silly like promoting all callers to value copies instead of refs.",
        "pr_file_module": null
      }
    ]
  }
]