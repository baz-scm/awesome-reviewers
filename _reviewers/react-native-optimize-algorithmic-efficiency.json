[
  {
    "discussion_id": "779106544",
    "pr_number": 29466,
    "pr_file": "ReactAndroid/src/main/java/com/facebook/react/views/scroll/ReactHorizontalScrollView.java",
    "created_at": "2022-01-05T20:10:22+00:00",
    "commented_code": "updateStateOnScroll(getScrollX(), getScrollY());\n   }\n \n+  /**\n+   * Called when a mContentView's layout has changed. Fixes the scroll position depending on\n+   * maintainVisibleContentPosition\n+   */\n+  @Override\n+  public void onLayoutChange(\n+      View v,\n+      int left,\n+      int top,\n+      int right,\n+      int bottom,\n+      int oldLeft,\n+      int oldTop,\n+      int oldRight,\n+      int oldBottom) {\n+    if (mContentView == null) {\n+      return;\n+    }\n+\n+    if (this.mMaintainVisibleContentPositionData != null) {\n+      scrollMaintainVisibleContentPosition();\n+    }\n+  }\n+\n+  /**\n+   * Called when maintainVisibleContentPosition is used and after a scroll. Finds the first\n+   * completely visible view in the ScrollView and stores it for later use.\n+   */\n+  private void computeFirstVisibleItemForMaintainVisibleContentPosition() {\n+    ReactScrollViewMaintainVisibleContentPositionData maintainVisibleContentPositionData =\n+        mMaintainVisibleContentPositionData;\n+    if (maintainVisibleContentPositionData == null) return;\n+\n+    int currentScrollX = getScrollX();\n+    int minIdx = maintainVisibleContentPositionData.minIndexForVisible;\n+\n+    ReactViewGroup contentView = (ReactViewGroup) getChildAt(0);\n+    if (contentView == null) return;\n+\n+    for (int i = minIdx; i < contentView.getChildCount(); i++) {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "779106544",
        "repo_full_name": "facebook/react-native",
        "pr_number": 29466,
        "pr_file": "ReactAndroid/src/main/java/com/facebook/react/views/scroll/ReactHorizontalScrollView.java",
        "discussion_id": "779106544",
        "commented_code": "@@ -1239,6 +1288,97 @@ private void updateStateOnScroll() {\n     updateStateOnScroll(getScrollX(), getScrollY());\n   }\n \n+  /**\n+   * Called when a mContentView's layout has changed. Fixes the scroll position depending on\n+   * maintainVisibleContentPosition\n+   */\n+  @Override\n+  public void onLayoutChange(\n+      View v,\n+      int left,\n+      int top,\n+      int right,\n+      int bottom,\n+      int oldLeft,\n+      int oldTop,\n+      int oldRight,\n+      int oldBottom) {\n+    if (mContentView == null) {\n+      return;\n+    }\n+\n+    if (this.mMaintainVisibleContentPositionData != null) {\n+      scrollMaintainVisibleContentPosition();\n+    }\n+  }\n+\n+  /**\n+   * Called when maintainVisibleContentPosition is used and after a scroll. Finds the first\n+   * completely visible view in the ScrollView and stores it for later use.\n+   */\n+  private void computeFirstVisibleItemForMaintainVisibleContentPosition() {\n+    ReactScrollViewMaintainVisibleContentPositionData maintainVisibleContentPositionData =\n+        mMaintainVisibleContentPositionData;\n+    if (maintainVisibleContentPositionData == null) return;\n+\n+    int currentScrollX = getScrollX();\n+    int minIdx = maintainVisibleContentPositionData.minIndexForVisible;\n+\n+    ReactViewGroup contentView = (ReactViewGroup) getChildAt(0);\n+    if (contentView == null) return;\n+\n+    for (int i = minIdx; i < contentView.getChildCount(); i++) {",
        "comment_created_at": "2022-01-05T20:10:22+00:00",
        "comment_author": "yungsters",
        "comment_body": "It would be better to use binary search here to reduce computational complexity.\r\n\r\nNormally this is not a big deal, but here we are calling this method on every scroll ends (with the debounce it's better, but still will call this a lot). If we have many items in the list, this could lead to a slow perf issue.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1855316323",
    "pr_number": 47634,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewGroup.java",
    "created_at": "2024-11-24T00:22:58+00:00",
    "commented_code": "private @Nullable ViewGroupDrawingOrderHelper mDrawingOrderHelper;\n   private float mBackfaceOpacity;\n   private String mBackfaceVisibility;\n+  private boolean mIsTransitioning = false;\n+  private @Nullable Set<Integer> mChildrenRemovedWhileTransitioning = null;",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1855316323",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47634,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewGroup.java",
        "discussion_id": "1855316323",
        "commented_code": "@@ -133,6 +133,8 @@ public void shutdown() {\n   private @Nullable ViewGroupDrawingOrderHelper mDrawingOrderHelper;\n   private float mBackfaceOpacity;\n   private String mBackfaceVisibility;\n+  private boolean mIsTransitioning = false;\n+  private @Nullable Set<Integer> mChildrenRemovedWhileTransitioning = null;",
        "comment_created_at": "2024-11-24T00:22:58+00:00",
        "comment_author": "kkafar",
        "comment_body": "I'm using `Set<Integer>` (holding only the view tag) instead of `Set<View>` to avoid any retain issues. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1858265659",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47634,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewGroup.java",
        "discussion_id": "1855316323",
        "commented_code": "@@ -133,6 +133,8 @@ public void shutdown() {\n   private @Nullable ViewGroupDrawingOrderHelper mDrawingOrderHelper;\n   private float mBackfaceOpacity;\n   private String mBackfaceVisibility;\n+  private boolean mIsTransitioning = false;\n+  private @Nullable Set<Integer> mChildrenRemovedWhileTransitioning = null;",
        "comment_created_at": "2024-11-26T10:58:44+00:00",
        "comment_author": "javache",
        "comment_body": "Consider using androidx.collection.MutableIntSet instead to avoid Integer boxing. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1858626920",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47634,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewGroup.java",
        "discussion_id": "1855316323",
        "commented_code": "@@ -133,6 +133,8 @@ public void shutdown() {\n   private @Nullable ViewGroupDrawingOrderHelper mDrawingOrderHelper;\n   private float mBackfaceOpacity;\n   private String mBackfaceVisibility;\n+  private boolean mIsTransitioning = false;\n+  private @Nullable Set<Integer> mChildrenRemovedWhileTransitioning = null;",
        "comment_created_at": "2024-11-26T14:18:55+00:00",
        "comment_author": "kkafar",
        "comment_body": "Thanks, I was not aware of this API! Hover it seems that it has been added few months ago in [`androidx.collection.MutableIntSet` 1.4.0](https://developer.android.com/reference/androidx/collection/MutableIntSet), while my development project (using recent react-native 0.76) uses version 1.1.0. I'm not sure where would I need to bump / add this dependency in RN to make use of it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1858932217",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47634,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewGroup.java",
        "discussion_id": "1855316323",
        "commented_code": "@@ -133,6 +133,8 @@ public void shutdown() {\n   private @Nullable ViewGroupDrawingOrderHelper mDrawingOrderHelper;\n   private float mBackfaceOpacity;\n   private String mBackfaceVisibility;\n+  private boolean mIsTransitioning = false;\n+  private @Nullable Set<Integer> mChildrenRemovedWhileTransitioning = null;",
        "comment_created_at": "2024-11-26T17:05:04+00:00",
        "comment_author": "javache",
        "comment_body": "Looks like this would need to be a new dependency in https://github.com/facebook/react-native/blob/main/packages/react-native/gradle/libs.versions.toml#L45 - let's add a comment to change this in the future.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1870468269",
    "pr_number": 47082,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/TextLayoutManager.java",
    "created_at": "2024-12-05T00:50:47+00:00",
    "commented_code": "&& maximumNumberOfLines != 0\n                 && layout.getLineCount() > maximumNumberOfLines)\n             || (heightYogaMeasureMode != YogaMeasureMode.UNDEFINED\n-                && layout.getHeight() > height))) {\n+                && layout.getHeight() > height)\n+            || (text.length() == 1 && layout.getPaint().measureText(text.toString()) > width))) {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1870468269",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47082,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/TextLayoutManager.java",
        "discussion_id": "1870468269",
        "commented_code": "@@ -630,7 +630,8 @@ private static Layout createLayout(\n                 && maximumNumberOfLines != 0\n                 && layout.getLineCount() > maximumNumberOfLines)\n             || (heightYogaMeasureMode != YogaMeasureMode.UNDEFINED\n-                && layout.getHeight() > height))) {\n+                && layout.getHeight() > height)\n+            || (text.length() == 1 && layout.getPaint().measureText(text.toString()) > width))) {",
        "comment_created_at": "2024-12-05T00:50:47+00:00",
        "comment_author": "NickGerleman",
        "comment_body": "This throws away metric effecting formatting on the text, like the font, whether its italic, how its justified, etc. It also throws out initial font size, which we only set on the paint after this.\r\n\r\nIf none of the existing line accessors in layout can tell that we've overflowed, and we really needed to do a new layout (we should avoid if possible), we would want to layout the full text, either using existing BoringLayout (simple not wrapping layout) which can give full width, or recreating a new layout without width constraint to get natural width. Though doing another layout here is really not ideal if there is any accessor on the existing layout that will give us this measurement.\r\n\r\nExisting layout has [`fillCharacterBounds()`](https://developer.android.com/reference/android/text/Layout#fillCharacterBounds(int,%20int,%20float[],%20int)) accessor to get glyph rects in the existing layout. At a glance, if none of the line accessors show where the single glyph lies, this would I think let us avoid relayout.",
        "pr_file_module": null
      },
      {
        "comment_id": "1870974084",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47082,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/TextLayoutManager.java",
        "discussion_id": "1870468269",
        "commented_code": "@@ -630,7 +630,8 @@ private static Layout createLayout(\n                 && maximumNumberOfLines != 0\n                 && layout.getLineCount() > maximumNumberOfLines)\n             || (heightYogaMeasureMode != YogaMeasureMode.UNDEFINED\n-                && layout.getHeight() > height))) {\n+                && layout.getHeight() > height)\n+            || (text.length() == 1 && layout.getPaint().measureText(text.toString()) > width))) {",
        "comment_created_at": "2024-12-05T09:20:25+00:00",
        "comment_author": "j-piasecki",
        "comment_body": "I changed it to `getLineWidth` in https://github.com/facebook/react-native/pull/47082/commits/fb3f1f0ac755007fcddf805a03cea02d878df2f2. It seems like this value isn't clipped to the width of the layout.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "750384849",
    "pr_number": 31150,
    "pr_file": "ReactAndroid/src/main/java/com/facebook/react/views/scroll/ReactHorizontalScrollView.java",
    "created_at": "2021-11-16T15:23:20+00:00",
    "commented_code": "}\n   }\n \n+  private HorizontalScrollView findNestedScrollViewForMotionEvent(MotionEvent ev) {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "750384849",
        "repo_full_name": "facebook/react-native",
        "pr_number": 31150,
        "pr_file": "ReactAndroid/src/main/java/com/facebook/react/views/scroll/ReactHorizontalScrollView.java",
        "discussion_id": "750384849",
        "commented_code": "@@ -423,12 +426,57 @@ protected void onScrollChanged(int x, int y, int oldX, int oldY) {\n     }\n   }\n \n+  private HorizontalScrollView findNestedScrollViewForMotionEvent(MotionEvent ev) {",
        "comment_created_at": "2021-11-16T15:23:20+00:00",
        "comment_author": "ShikaSD",
        "comment_body": "I believe we can avoid returning the instance and just check if there is a scroll view under the event coordinates. This should also ensure we don't go too deep looking for the scroll view if one exists",
        "pr_file_module": null
      }
    ]
  }
]