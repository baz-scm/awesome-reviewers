[
  {
    "discussion_id": "1380813945",
    "pr_number": 41218,
    "pr_file": "packages/rn-tester-e2e/tests/specs/components/button/cancelButton.test.js",
    "created_at": "2023-11-02T21:43:10+00:00",
    "commented_code": "+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ * @format\n+ */\n+\n+const {ComponentsScreen} = require('../../../screens/components.screen.js');\n+const {\n+  ButtonComponentScreen,\n+} = require('../../../screens/components/buttonComponent.screen.js');\n+\n+const cancelText = 'Your application has been cancelled!';\n+\n+describe('Test is checking cancel button', function () {\n+  it('Should view properly submit cancel text', async function () {\n+    expect(\n+      await ComponentsScreen.checkButtonComponentIsDisplayed(),",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1380813945",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41218,
        "pr_file": "packages/rn-tester-e2e/tests/specs/components/button/cancelButton.test.js",
        "discussion_id": "1380813945",
        "commented_code": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ * @format\n+ */\n+\n+const {ComponentsScreen} = require('../../../screens/components.screen.js');\n+const {\n+  ButtonComponentScreen,\n+} = require('../../../screens/components/buttonComponent.screen.js');\n+\n+const cancelText = 'Your application has been cancelled!';\n+\n+describe('Test is checking cancel button', function () {\n+  it('Should view properly submit cancel text', async function () {\n+    expect(\n+      await ComponentsScreen.checkButtonComponentIsDisplayed(),",
        "comment_created_at": "2023-11-02T21:43:10+00:00",
        "comment_author": "samuelfreiberg",
        "comment_body": "I'm wondering if this should be in a before hook? Or it's own test? It looks like this is handling setting up the app to get the correct state, which doesn't correlate to the test name.\r\n\r\nMaking sure each test is has a defined function is important for debugging purposes (and code readability). \r\n\r\nRather than having the following structure:\r\n\r\nit(\"Testing cancel button\")\r\n  // Setup app\r\n  // Test Cancel Button\r\n\r\nWe can organize as:\r\n\r\nit('Setup Cancel Button Testing')\r\n  // Setup app to test cancel button\r\n\r\nit('Test cancel button')\r\n  // Test cancel button",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "325591042",
    "pr_number": 26444,
    "pr_file": "Libraries/Lists/__tests__/VirtualizedList-test.js",
    "created_at": "2019-09-18T10:07:31+00:00",
    "commented_code": "}),\n     );\n   });\n+\n+  it('should be called onEndReached correctly', () => {\n+    function appendNewItems(items, count) {\n+      const nextId = (items.length > 0 ? items[items.length - 1].id : 0) + 1;\n+\n+      for (let loop = 1; loop <= count; loop++) {\n+        const id = nextId + loop;\n+        items.push({\n+          id: id,\n+          key: `k${id}`,\n+        });\n+      }\n+\n+      return items;\n+    }\n+\n+    let scrollTimeStamp = 0;\n+    function scrollList(instance, items, y) {\n+      scrollTimeStamp += 1000;\n+\n+      const nativeEvent = {\n+        contentOffset: {y, x: 0},\n+        layoutMeasurement: {width: 300, height: 600},\n+        contentSize: {width: 300, height: items.length * ITEM_HEIGHT},\n+        zoomScale: 1,\n+        contentInset: {right: 0, top: 0, left: 0, bottom: 0},\n+      };\n+\n+      instance._onScroll({\n+        timeStamp: scrollTimeStamp,\n+        nativeEvent,\n+      });\n+    }\n+\n+    const ITEM_HEIGHT = 100;\n+    const APPENDED_ITEM_COUNT = 10;\n+    const data = appendNewItems([], 10);\n+    const onEndReached = jest.fn(function() {\n+      appendNewItems(data, APPENDED_ITEM_COUNT);\n+    });\n+\n+    const props = {\n+      data,\n+      renderItem: ({item}) => <item value={item.key} />,\n+      getItem: (items, index) => items[index],\n+      getItemCount: items => items.length,\n+      getItemLayout: (items, index) => ({\n+        length: ITEM_HEIGHT,\n+        offset: ITEM_HEIGHT * index,\n+        index,\n+      }),\n+      onEndReached,\n+    };\n+\n+    const component = ReactTestRenderer.create(<VirtualizedList {...props} />);\n+    const instance = component.getInstance();\n+\n+    // It should not be called after the initial rendering\n+    expect(onEndReached).not.toHaveBeenCalled();\n+    expect(data.length).toBe(10);\n+\n+    // It should be called once after scrolling by 200\n+    scrollList(instance, data, 200);\n+\n+    expect(onEndReached).toHaveBeenCalledTimes(1);\n+    expect(onEndReached).toHaveBeenLastCalledWith({\n+      distanceFromEnd: 200,\n+    });\n+    expect(data.length).toBe(20);\n+\n+    // It should not be called after scrolling to the top\n+    scrollList(instance, data, 0);\n+\n+    expect(onEndReached).toHaveBeenCalledTimes(1);\n+    expect(data.length).toBe(20);\n+\n+    // It should not be called after scrolling back on the screen",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "325591042",
        "repo_full_name": "facebook/react-native",
        "pr_number": 26444,
        "pr_file": "Libraries/Lists/__tests__/VirtualizedList-test.js",
        "discussion_id": "325591042",
        "commented_code": "@@ -273,4 +273,92 @@ describe('VirtualizedList', () => {\n       }),\n     );\n   });\n+\n+  it('should be called onEndReached correctly', () => {\n+    function appendNewItems(items, count) {\n+      const nextId = (items.length > 0 ? items[items.length - 1].id : 0) + 1;\n+\n+      for (let loop = 1; loop <= count; loop++) {\n+        const id = nextId + loop;\n+        items.push({\n+          id: id,\n+          key: `k${id}`,\n+        });\n+      }\n+\n+      return items;\n+    }\n+\n+    let scrollTimeStamp = 0;\n+    function scrollList(instance, items, y) {\n+      scrollTimeStamp += 1000;\n+\n+      const nativeEvent = {\n+        contentOffset: {y, x: 0},\n+        layoutMeasurement: {width: 300, height: 600},\n+        contentSize: {width: 300, height: items.length * ITEM_HEIGHT},\n+        zoomScale: 1,\n+        contentInset: {right: 0, top: 0, left: 0, bottom: 0},\n+      };\n+\n+      instance._onScroll({\n+        timeStamp: scrollTimeStamp,\n+        nativeEvent,\n+      });\n+    }\n+\n+    const ITEM_HEIGHT = 100;\n+    const APPENDED_ITEM_COUNT = 10;\n+    const data = appendNewItems([], 10);\n+    const onEndReached = jest.fn(function() {\n+      appendNewItems(data, APPENDED_ITEM_COUNT);\n+    });\n+\n+    const props = {\n+      data,\n+      renderItem: ({item}) => <item value={item.key} />,\n+      getItem: (items, index) => items[index],\n+      getItemCount: items => items.length,\n+      getItemLayout: (items, index) => ({\n+        length: ITEM_HEIGHT,\n+        offset: ITEM_HEIGHT * index,\n+        index,\n+      }),\n+      onEndReached,\n+    };\n+\n+    const component = ReactTestRenderer.create(<VirtualizedList {...props} />);\n+    const instance = component.getInstance();\n+\n+    // It should not be called after the initial rendering\n+    expect(onEndReached).not.toHaveBeenCalled();\n+    expect(data.length).toBe(10);\n+\n+    // It should be called once after scrolling by 200\n+    scrollList(instance, data, 200);\n+\n+    expect(onEndReached).toHaveBeenCalledTimes(1);\n+    expect(onEndReached).toHaveBeenLastCalledWith({\n+      distanceFromEnd: 200,\n+    });\n+    expect(data.length).toBe(20);\n+\n+    // It should not be called after scrolling to the top\n+    scrollList(instance, data, 0);\n+\n+    expect(onEndReached).toHaveBeenCalledTimes(1);\n+    expect(data.length).toBe(20);\n+\n+    // It should not be called after scrolling back on the screen",
        "comment_created_at": "2019-09-18T10:07:31+00:00",
        "comment_author": "vonovak",
        "comment_body": "I don't understand what this is testing. What does \"scrolling back on the screen\" mean?\r\n\r\nThere are a lot of expectations in this test, would it be possible to split it into multiple smaller test cases that would each cover individual cases?",
        "pr_file_module": null
      },
      {
        "comment_id": "325713202",
        "repo_full_name": "facebook/react-native",
        "pr_number": 26444,
        "pr_file": "Libraries/Lists/__tests__/VirtualizedList-test.js",
        "discussion_id": "325591042",
        "commented_code": "@@ -273,4 +273,92 @@ describe('VirtualizedList', () => {\n       }),\n     );\n   });\n+\n+  it('should be called onEndReached correctly', () => {\n+    function appendNewItems(items, count) {\n+      const nextId = (items.length > 0 ? items[items.length - 1].id : 0) + 1;\n+\n+      for (let loop = 1; loop <= count; loop++) {\n+        const id = nextId + loop;\n+        items.push({\n+          id: id,\n+          key: `k${id}`,\n+        });\n+      }\n+\n+      return items;\n+    }\n+\n+    let scrollTimeStamp = 0;\n+    function scrollList(instance, items, y) {\n+      scrollTimeStamp += 1000;\n+\n+      const nativeEvent = {\n+        contentOffset: {y, x: 0},\n+        layoutMeasurement: {width: 300, height: 600},\n+        contentSize: {width: 300, height: items.length * ITEM_HEIGHT},\n+        zoomScale: 1,\n+        contentInset: {right: 0, top: 0, left: 0, bottom: 0},\n+      };\n+\n+      instance._onScroll({\n+        timeStamp: scrollTimeStamp,\n+        nativeEvent,\n+      });\n+    }\n+\n+    const ITEM_HEIGHT = 100;\n+    const APPENDED_ITEM_COUNT = 10;\n+    const data = appendNewItems([], 10);\n+    const onEndReached = jest.fn(function() {\n+      appendNewItems(data, APPENDED_ITEM_COUNT);\n+    });\n+\n+    const props = {\n+      data,\n+      renderItem: ({item}) => <item value={item.key} />,\n+      getItem: (items, index) => items[index],\n+      getItemCount: items => items.length,\n+      getItemLayout: (items, index) => ({\n+        length: ITEM_HEIGHT,\n+        offset: ITEM_HEIGHT * index,\n+        index,\n+      }),\n+      onEndReached,\n+    };\n+\n+    const component = ReactTestRenderer.create(<VirtualizedList {...props} />);\n+    const instance = component.getInstance();\n+\n+    // It should not be called after the initial rendering\n+    expect(onEndReached).not.toHaveBeenCalled();\n+    expect(data.length).toBe(10);\n+\n+    // It should be called once after scrolling by 200\n+    scrollList(instance, data, 200);\n+\n+    expect(onEndReached).toHaveBeenCalledTimes(1);\n+    expect(onEndReached).toHaveBeenLastCalledWith({\n+      distanceFromEnd: 200,\n+    });\n+    expect(data.length).toBe(20);\n+\n+    // It should not be called after scrolling to the top\n+    scrollList(instance, data, 0);\n+\n+    expect(onEndReached).toHaveBeenCalledTimes(1);\n+    expect(data.length).toBe(20);\n+\n+    // It should not be called after scrolling back on the screen",
        "comment_created_at": "2019-09-18T14:35:52+00:00",
        "comment_author": "ifsnow",
        "comment_body": "@vonovak It was a test for this case(scroll down -> scroll to the top -> scroll down again). This test doesn't seem so meaningful. :)\r\n\r\nI separated the test because I agree with you. Thanks for your review.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "326917633",
    "pr_number": 26444,
    "pr_file": "Libraries/Lists/__tests__/VirtualizedList-test.js",
    "created_at": "2019-09-22T20:11:20+00:00",
    "commented_code": "}),\n     );\n   });\n+\n+  it('OnEndReached should not be called after initial rendering', () => {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "326917633",
        "repo_full_name": "facebook/react-native",
        "pr_number": 26444,
        "pr_file": "Libraries/Lists/__tests__/VirtualizedList-test.js",
        "discussion_id": "326917633",
        "commented_code": "@@ -273,4 +273,149 @@ describe('VirtualizedList', () => {\n       }),\n     );\n   });\n+\n+  it('OnEndReached should not be called after initial rendering', () => {",
        "comment_created_at": "2019-09-22T20:11:20+00:00",
        "comment_author": "vonovak",
        "comment_body": "since all these tests pertain to `onEndReached`, you should wrap them all in `describe('onEndReached', ...)` and remove `onEndReached` from the `it` blocks because it becomes redundant.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "326917673",
    "pr_number": 26444,
    "pr_file": "Libraries/Lists/__tests__/VirtualizedList-test.js",
    "created_at": "2019-09-22T20:12:38+00:00",
    "commented_code": "}),\n     );\n   });\n+\n+  it('OnEndReached should not be called after initial rendering', () => {\n+    const ITEM_HEIGHT = 100;",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "326917673",
        "repo_full_name": "facebook/react-native",
        "pr_number": 26444,
        "pr_file": "Libraries/Lists/__tests__/VirtualizedList-test.js",
        "discussion_id": "326917673",
        "commented_code": "@@ -273,4 +273,149 @@ describe('VirtualizedList', () => {\n       }),\n     );\n   });\n+\n+  it('OnEndReached should not be called after initial rendering', () => {\n+    const ITEM_HEIGHT = 100;",
        "comment_created_at": "2019-09-22T20:12:38+00:00",
        "comment_author": "vonovak",
        "comment_body": "there is quite a bit of duplication in these tests, can you move the duplicated code into the aforementioned `describe` block / beforeEach?",
        "pr_file_module": null
      }
    ]
  }
]