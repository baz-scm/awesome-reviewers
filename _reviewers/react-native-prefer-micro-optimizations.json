[
  {
    "discussion_id": "1867700910",
    "pr_number": 48047,
    "pr_file": "packages/react-native/ReactCommon/react/renderer/core/RawValue.h",
    "created_at": "2024-12-03T13:13:02+00:00",
    "commented_code": "return true;\n   }\n \n+  template <typename T>\n+  static bool checkValueType(\n+      const jsi::Value& value,\n+      jsi::Runtime* runtime,\n+      std::vector<T>* /*type*/) noexcept {\n+    if (!value.isObject()) {\n+      return false;\n+    }\n+\n+    jsi::Object asObject = value.asObject(*runtime);",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1867700910",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48047,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/core/RawValue.h",
        "discussion_id": "1867700910",
        "commented_code": "@@ -183,6 +272,36 @@ class RawValue {\n     return true;\n   }\n \n+  template <typename T>\n+  static bool checkValueType(\n+      const jsi::Value& value,\n+      jsi::Runtime* runtime,\n+      std::vector<T>* /*type*/) noexcept {\n+    if (!value.isObject()) {\n+      return false;\n+    }\n+\n+    jsi::Object asObject = value.asObject(*runtime);",
        "comment_created_at": "2024-12-03T13:13:02+00:00",
        "comment_author": "mrousavy",
        "comment_body": "If you used `isObject()` before, you can now use `getObject` instead of `asObject` here. `getObject` is faster because it uses an assert.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1867707987",
    "pr_number": 48047,
    "pr_file": "packages/react-native/ReactCommon/react/renderer/core/RawValue.h",
    "created_at": "2024-12-03T13:17:56+00:00",
    "commented_code": "}\n     return result;\n   }\n+\n+  template <typename T>\n+  static std::unordered_map<std::string, T> castValue(\n+      const jsi::Value& value,\n+      jsi::Runtime* runtime,\n+      std::unordered_map<std::string, T>* /*type*/) {\n+    react_native_assert(value.isObject());\n+    jsi::Object object = value.asObject(*runtime);\n+    auto propertyNames = object.getPropertyNames(*runtime);\n+    auto size = propertyNames.size(*runtime);\n+    auto result = std::unordered_map<std::string, T>{};\n+    for (size_t i = 0; i < size; i++) {\n+      jsi::Value propertyNameValue = propertyNames.getValueAtIndex(*runtime, i);\n+      jsi::String propertyName = propertyNameValue.getString(*runtime);\n+      jsi::Value propertyValue = object.getProperty(*runtime, propertyName);\n+      if (propertyValue.isUndefined()) {\n+        // Skip undefined values to mimic JSIDynamic::dynamicFromValue behavior.\n+        // Null values are allowed in the map.\n+        continue;\n+      }\n+\n+      std::string propertyNameString = propertyName.utf8(*runtime);\n+      T property = castValue(propertyValue, runtime, (T*)nullptr);\n+      result[propertyNameString] = property;",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1867707987",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48047,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/core/RawValue.h",
        "discussion_id": "1867707987",
        "commented_code": "@@ -275,6 +510,33 @@ class RawValue {\n     }\n     return result;\n   }\n+\n+  template <typename T>\n+  static std::unordered_map<std::string, T> castValue(\n+      const jsi::Value& value,\n+      jsi::Runtime* runtime,\n+      std::unordered_map<std::string, T>* /*type*/) {\n+    react_native_assert(value.isObject());\n+    jsi::Object object = value.asObject(*runtime);\n+    auto propertyNames = object.getPropertyNames(*runtime);\n+    auto size = propertyNames.size(*runtime);\n+    auto result = std::unordered_map<std::string, T>{};\n+    for (size_t i = 0; i < size; i++) {\n+      jsi::Value propertyNameValue = propertyNames.getValueAtIndex(*runtime, i);\n+      jsi::String propertyName = propertyNameValue.getString(*runtime);\n+      jsi::Value propertyValue = object.getProperty(*runtime, propertyName);\n+      if (propertyValue.isUndefined()) {\n+        // Skip undefined values to mimic JSIDynamic::dynamicFromValue behavior.\n+        // Null values are allowed in the map.\n+        continue;\n+      }\n+\n+      std::string propertyNameString = propertyName.utf8(*runtime);\n+      T property = castValue(propertyValue, runtime, (T*)nullptr);\n+      result[propertyNameString] = property;",
        "comment_created_at": "2024-12-03T13:17:56+00:00",
        "comment_author": "mrousavy",
        "comment_body": "Use `.emplace(` and move `property` into it for better performance. No need for a copy here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1873292941",
    "pr_number": 48047,
    "pr_file": "packages/react-native/ReactCommon/react/renderer/core/RawValue.h",
    "created_at": "2024-12-06T12:55:09+00:00",
    "commented_code": "/*\n    * Constructors.\n    */\n-  RawValue() noexcept : dynamic_(nullptr) {}\n+  RawValue() noexcept : value_(folly::dynamic(nullptr)) {}\n \n-  RawValue(RawValue&& other) noexcept : dynamic_(std::move(other.dynamic_)) {}\n+  RawValue(RawValue&& other) noexcept : value_(std::move(other.value_)) {}\n \n   RawValue& operator=(RawValue&& other) noexcept {\n     if (this != &other) {\n-      dynamic_ = std::move(other.dynamic_);\n+      value_ = std::move(other.value_);\n     }\n     return *this;\n   }\n \n-  explicit RawValue(const folly::dynamic& dynamic) noexcept\n-      : dynamic_(dynamic) {}\n+  explicit RawValue(jsi::Runtime& runtime, const jsi::Value& value) noexcept\n+      : value_(std::make_pair(&runtime, jsi::Value(runtime, value))) {}\n+\n+  explicit RawValue(jsi::Runtime& runtime, jsi::Value&& value) noexcept\n+      : value_(std::make_pair(&runtime, std::move(value))) {}\n+\n+  explicit RawValue(const folly::dynamic& dynamic) noexcept : value_(dynamic) {}\n \n   explicit RawValue(folly::dynamic&& dynamic) noexcept\n-      : dynamic_(std::move(dynamic)) {}\n+      : value_(std::move(dynamic)) {}\n \n  private:\n   friend class RawProps;\n   friend class RawPropsParser;\n   friend class UIManagerBinding;\n \n-  /*\n-   * Copy constructor and copy assignment operator would be private and only for\n-   * internal use, but it's needed for user-code that does `auto val =\n-   * (butter::map<std::string, RawValue>)rawVal;`\n-   */\n-  RawValue(const RawValue& other) noexcept : dynamic_(other.dynamic_) {}\n+  RawValue(const RawValue& other) noexcept {\n+    if (std::holds_alternative<folly::dynamic>(other.value_)) {\n+      folly::dynamic dynamic = std::get<folly::dynamic>(other.value_);\n+      value_ = dynamic;",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1873292941",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48047,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/core/RawValue.h",
        "discussion_id": "1873292941",
        "commented_code": "@@ -54,38 +55,52 @@ class RawValue {\n   /*\n    * Constructors.\n    */\n-  RawValue() noexcept : dynamic_(nullptr) {}\n+  RawValue() noexcept : value_(folly::dynamic(nullptr)) {}\n \n-  RawValue(RawValue&& other) noexcept : dynamic_(std::move(other.dynamic_)) {}\n+  RawValue(RawValue&& other) noexcept : value_(std::move(other.value_)) {}\n \n   RawValue& operator=(RawValue&& other) noexcept {\n     if (this != &other) {\n-      dynamic_ = std::move(other.dynamic_);\n+      value_ = std::move(other.value_);\n     }\n     return *this;\n   }\n \n-  explicit RawValue(const folly::dynamic& dynamic) noexcept\n-      : dynamic_(dynamic) {}\n+  explicit RawValue(jsi::Runtime& runtime, const jsi::Value& value) noexcept\n+      : value_(std::make_pair(&runtime, jsi::Value(runtime, value))) {}\n+\n+  explicit RawValue(jsi::Runtime& runtime, jsi::Value&& value) noexcept\n+      : value_(std::make_pair(&runtime, std::move(value))) {}\n+\n+  explicit RawValue(const folly::dynamic& dynamic) noexcept : value_(dynamic) {}\n \n   explicit RawValue(folly::dynamic&& dynamic) noexcept\n-      : dynamic_(std::move(dynamic)) {}\n+      : value_(std::move(dynamic)) {}\n \n  private:\n   friend class RawProps;\n   friend class RawPropsParser;\n   friend class UIManagerBinding;\n \n-  /*\n-   * Copy constructor and copy assignment operator would be private and only for\n-   * internal use, but it's needed for user-code that does `auto val =\n-   * (butter::map<std::string, RawValue>)rawVal;`\n-   */\n-  RawValue(const RawValue& other) noexcept : dynamic_(other.dynamic_) {}\n+  RawValue(const RawValue& other) noexcept {\n+    if (std::holds_alternative<folly::dynamic>(other.value_)) {\n+      folly::dynamic dynamic = std::get<folly::dynamic>(other.value_);\n+      value_ = dynamic;",
        "comment_created_at": "2024-12-06T12:55:09+00:00",
        "comment_author": "javache",
        "comment_body": "std::move, since you've made a copy. Or better, keep it as a reference\r\n```suggestion\r\n      auto& dynamic = std::get<folly::dynamic>(other.value_);\r\n      value_ = dynamic;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1873294610",
    "pr_number": 48047,
    "pr_file": "packages/react-native/ReactCommon/react/renderer/core/RawValue.h",
    "created_at": "2024-12-06T12:56:41+00:00",
    "commented_code": "*/\n   template <typename T>\n   explicit operator T() const {\n-    return castValue(dynamic_, (T*)nullptr);\n+    if (std::holds_alternative<folly::dynamic>(value_)) {\n+      folly::dynamic dynamic = std::get<folly::dynamic>(value_);\n+      return castValue(dynamic, (T*)nullptr);\n+    } else {\n+      const auto& [runtime, value] = std::get<JsiValuePair>(value_);\n+      return castValue(runtime, value, (T*)nullptr);\n+    }\n   }\n \n   inline explicit operator folly::dynamic() const noexcept {\n-    return dynamic_;\n+    return std::get<folly::dynamic>(value_);\n   }\n \n   /*\n    * Checks if the stored value has specified type.\n    */\n   template <typename T>\n-  bool hasType() const noexcept {\n-    return checkValueType(dynamic_, (T*)nullptr);\n+  bool hasType() const {\n+    if (std::holds_alternative<folly::dynamic>(value_)) {\n+      folly::dynamic dynamic = std::get<folly::dynamic>(value_);",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1873294610",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48047,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/core/RawValue.h",
        "discussion_id": "1873294610",
        "commented_code": "@@ -96,73 +111,157 @@ class RawValue {\n    */\n   template <typename T>\n   explicit operator T() const {\n-    return castValue(dynamic_, (T*)nullptr);\n+    if (std::holds_alternative<folly::dynamic>(value_)) {\n+      folly::dynamic dynamic = std::get<folly::dynamic>(value_);\n+      return castValue(dynamic, (T*)nullptr);\n+    } else {\n+      const auto& [runtime, value] = std::get<JsiValuePair>(value_);\n+      return castValue(runtime, value, (T*)nullptr);\n+    }\n   }\n \n   inline explicit operator folly::dynamic() const noexcept {\n-    return dynamic_;\n+    return std::get<folly::dynamic>(value_);\n   }\n \n   /*\n    * Checks if the stored value has specified type.\n    */\n   template <typename T>\n-  bool hasType() const noexcept {\n-    return checkValueType(dynamic_, (T*)nullptr);\n+  bool hasType() const {\n+    if (std::holds_alternative<folly::dynamic>(value_)) {\n+      folly::dynamic dynamic = std::get<folly::dynamic>(value_);",
        "comment_created_at": "2024-12-06T12:56:41+00:00",
        "comment_author": "javache",
        "comment_body": "Grab a reference, not a copy\r\n\r\n```suggestion\r\n      auto& dynamic = std::get<folly::dynamic>(value_);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1805056405",
    "pr_number": 47003,
    "pr_file": "packages/react-native/React/Fabric/Utils/RCTLinearGradient.mm",
    "created_at": "2024-10-17T16:08:24+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+#import \"RCTLinearGradient.h\"\n+\n+#import <React/RCTConversions.h>\n+\n+using namespace facebook::react;\n+\n+@implementation RCTLinearGradient\n+\n++ (CALayer *)gradientLayerWithSize:(CGSize)size\n+                          gradient:(const LinearGradient&) gradient {\n+  \n+  UIGraphicsImageRenderer *renderer = [[UIGraphicsImageRenderer alloc] initWithSize:size];\n+  auto orientation = gradient.orientation;\n+  auto colorStops = gradient.colorStops;\n+  \n+  UIImage *gradientImage = [renderer imageWithActions:^(UIGraphicsImageRendererContext * _Nonnull rendererContext) {\n+    CGContextRef context = rendererContext.CGContext;\n+    NSMutableArray *colors = [NSMutableArray array];\n+    CGFloat *locations = (CGFloat *)malloc(sizeof(CGFloat) * colorStops.size());",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1805056405",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47003,
        "pr_file": "packages/react-native/React/Fabric/Utils/RCTLinearGradient.mm",
        "discussion_id": "1805056405",
        "commented_code": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+#import \"RCTLinearGradient.h\"\n+\n+#import <React/RCTConversions.h>\n+\n+using namespace facebook::react;\n+\n+@implementation RCTLinearGradient\n+\n++ (CALayer *)gradientLayerWithSize:(CGSize)size\n+                          gradient:(const LinearGradient&) gradient {\n+  \n+  UIGraphicsImageRenderer *renderer = [[UIGraphicsImageRenderer alloc] initWithSize:size];\n+  auto orientation = gradient.orientation;\n+  auto colorStops = gradient.colorStops;\n+  \n+  UIImage *gradientImage = [renderer imageWithActions:^(UIGraphicsImageRendererContext * _Nonnull rendererContext) {\n+    CGContextRef context = rendererContext.CGContext;\n+    NSMutableArray *colors = [NSMutableArray array];\n+    CGFloat *locations = (CGFloat *)malloc(sizeof(CGFloat) * colorStops.size());",
        "comment_created_at": "2024-10-17T16:08:24+00:00",
        "comment_author": "jorge-cab",
        "comment_body": "We really want to avoid malloc can we do something like:\r\n\r\n```suggestion\r\n    CGFloat locations[colorStops.size()];\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  }
]