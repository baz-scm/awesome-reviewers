[
  {
    "discussion_id": "2223106155",
    "pr_number": 52724,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/uimanager/ReactAccessibilityDelegate.java",
    "created_at": "2025-07-22T16:24:54+00:00",
    "commented_code": "if (accessibilityActions != null) {\n       for (int i = 0; i < accessibilityActions.size(); i++) {\n         final ReadableMap action = accessibilityActions.getMap(i);\n-        if (!action.hasKey(\"name\")) {\n+        if (!action.hasKey(\"name\") || !action.hasKey(\"label\")) {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2223106155",
        "repo_full_name": "facebook/react-native",
        "pr_number": 52724,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/uimanager/ReactAccessibilityDelegate.java",
        "discussion_id": "2223106155",
        "commented_code": "@@ -189,17 +191,26 @@ public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfoCo\n     if (accessibilityActions != null) {\n       for (int i = 0; i < accessibilityActions.size(); i++) {\n         final ReadableMap action = accessibilityActions.getMap(i);\n-        if (!action.hasKey(\"name\")) {\n+        if (!action.hasKey(\"name\") || !action.hasKey(\"label\")) {",
        "comment_created_at": "2025-07-22T16:24:54+00:00",
        "comment_author": "jorge-cab",
        "comment_body": "I'm curious why did you opt to also throw when we don't have a \"label\" key? Did you find an unhandled crash when calling the constructor for AccessibilityActionCompat?",
        "pr_file_module": null
      },
      {
        "comment_id": "2223129979",
        "repo_full_name": "facebook/react-native",
        "pr_number": 52724,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/uimanager/ReactAccessibilityDelegate.java",
        "discussion_id": "2223106155",
        "commented_code": "@@ -189,17 +191,26 @@ public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfoCo\n     if (accessibilityActions != null) {\n       for (int i = 0; i < accessibilityActions.size(); i++) {\n         final ReadableMap action = accessibilityActions.getMap(i);\n-        if (!action.hasKey(\"name\")) {\n+        if (!action.hasKey(\"name\") || !action.hasKey(\"label\")) {",
        "comment_created_at": "2025-07-22T16:30:55+00:00",
        "comment_author": "leg234-png",
        "comment_body": "hi, ohh i writed you on facebook hahahahah\r\n\r\nThank you so much for reviewing my PR!\r\nThat's a great question. I added the check for \"label\" primarily as a defensive measure. While working on the fix, I reasoned that an accessibility action without a label would not be useful to the end-user, as TalkBack would have nothing to announce. Making it a requirement seemed like a way to enforce best practices and prevent potential silent failures or confusing behavior for users of assistive technologies.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2223727250",
        "repo_full_name": "facebook/react-native",
        "pr_number": 52724,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/uimanager/ReactAccessibilityDelegate.java",
        "discussion_id": "2223106155",
        "commented_code": "@@ -189,17 +191,26 @@ public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfoCo\n     if (accessibilityActions != null) {\n       for (int i = 0; i < accessibilityActions.size(); i++) {\n         final ReadableMap action = accessibilityActions.getMap(i);\n-        if (!action.hasKey(\"name\")) {\n+        if (!action.hasKey(\"name\") || !action.hasKey(\"label\")) {",
        "comment_created_at": "2025-07-22T20:08:02+00:00",
        "comment_author": "jorge-cab",
        "comment_body": "If we were not previously crashing when \"label == null\" we should not create a new crash. This would mean that apps that are running fine that might be setting an action without a label (even if this is incorrect) now will start crashing in production. \r\n\r\nTalkBack not announcing anything is not a big deal but introducing a new crash would be. If we want to prevent this logic from running we can just gate the logic to only run when we have a label.\r\n\r\n```suggestion\r\n        if (!action.hasKey(\"name\")) {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2003035274",
    "pr_number": 50122,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java",
    "created_at": "2025-03-19T10:52:19+00:00",
    "commented_code": "for (UriHandler handler : mUriHandlers) {\n         if (handler.supports(uri, responseType)) {\n           WritableMap res = handler.fetch(uri);\n+          //fix: UriHandlers which are not using file:// scheme fail in whatwg-fetch at this line  https://github.com/JakeChampion/fetch/blob/main/fetch.js#L547\n+          if (\"content\".equals(uri.getScheme())){\n+            ResponseUtil.onResponseReceived(reactApplicationContext, requestId, 200, Arguments.createMap(), url);\n+          }",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2003035274",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50122,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java",
        "discussion_id": "2003035274",
        "commented_code": "@@ -286,6 +286,10 @@ public void sendRequestInternal(\n       for (UriHandler handler : mUriHandlers) {\n         if (handler.supports(uri, responseType)) {\n           WritableMap res = handler.fetch(uri);\n+          //fix: UriHandlers which are not using file:// scheme fail in whatwg-fetch at this line  https://github.com/JakeChampion/fetch/blob/main/fetch.js#L547\n+          if (\"content\".equals(uri.getScheme())){\n+            ResponseUtil.onResponseReceived(reactApplicationContext, requestId, 200, Arguments.createMap(), url);\n+          }",
        "comment_created_at": "2025-03-19T10:52:19+00:00",
        "comment_author": "javache",
        "comment_body": "Is there any reason we shouldn't just always call `onResponseReceived`? It seems like a gap in the implementation.",
        "pr_file_module": null
      },
      {
        "comment_id": "2003062979",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50122,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java",
        "discussion_id": "2003035274",
        "commented_code": "@@ -286,6 +286,10 @@ public void sendRequestInternal(\n       for (UriHandler handler : mUriHandlers) {\n         if (handler.supports(uri, responseType)) {\n           WritableMap res = handler.fetch(uri);\n+          //fix: UriHandlers which are not using file:// scheme fail in whatwg-fetch at this line  https://github.com/JakeChampion/fetch/blob/main/fetch.js#L547\n+          if (\"content\".equals(uri.getScheme())){\n+            ResponseUtil.onResponseReceived(reactApplicationContext, requestId, 200, Arguments.createMap(), url);\n+          }",
        "comment_created_at": "2025-03-19T11:01:01+00:00",
        "comment_author": "giantslogik",
        "comment_body": " The extra 200 response was generated only for 'content:' scheme urls, to prevent regressions and side effects in existing code handling 'file:' scheme urls. \r\n \r\nOn the js side the failing code already has special handling for 'file' urls here https://github.com/JakeChampion/fetch/blob/ba5cf1ed2e02ebb96fa1e60b4fd2eb04071b60e4/fetch.js#L547 .\r\n\r\nFor 'http/https' urls the response comes from the protocol. \r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2003097190",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50122,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java",
        "discussion_id": "2003035274",
        "commented_code": "@@ -286,6 +286,10 @@ public void sendRequestInternal(\n       for (UriHandler handler : mUriHandlers) {\n         if (handler.supports(uri, responseType)) {\n           WritableMap res = handler.fetch(uri);\n+          //fix: UriHandlers which are not using file:// scheme fail in whatwg-fetch at this line  https://github.com/JakeChampion/fetch/blob/main/fetch.js#L547\n+          if (\"content\".equals(uri.getScheme())){\n+            ResponseUtil.onResponseReceived(reactApplicationContext, requestId, 200, Arguments.createMap(), url);\n+          }",
        "comment_created_at": "2025-03-19T11:18:10+00:00",
        "comment_author": "javache",
        "comment_body": "It seems that we do not set a response code for any other request through custom `mUriHandlers`, which seems incorrect. It file resolution requires an `onResponseReceived` callback, so should all others.\r\n\r\nThe code you reference in fetch talks about file:// URIs, but the logic here is specific to content://?",
        "pr_file_module": null
      },
      {
        "comment_id": "2003122984",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50122,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java",
        "discussion_id": "2003035274",
        "commented_code": "@@ -286,6 +286,10 @@ public void sendRequestInternal(\n       for (UriHandler handler : mUriHandlers) {\n         if (handler.supports(uri, responseType)) {\n           WritableMap res = handler.fetch(uri);\n+          //fix: UriHandlers which are not using file:// scheme fail in whatwg-fetch at this line  https://github.com/JakeChampion/fetch/blob/main/fetch.js#L547\n+          if (\"content\".equals(uri.getScheme())){\n+            ResponseUtil.onResponseReceived(reactApplicationContext, requestId, 200, Arguments.createMap(), url);\n+          }",
        "comment_created_at": "2025-03-19T11:35:52+00:00",
        "comment_author": "giantslogik",
        "comment_body": ">If file resolution requires an onResponseReceived \r\n\r\n'file' does not require a onResponseReceived due to js side code.\r\n\r\nThis could be fixed for 'content' urls on the JS side by rewriting the check\r\n`if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {`\r\n\r\nTO \r\n\r\n`if ((request.url.indexOf('file://') === 0 || request.url.indexOf('content://') === 0) && (xhr.status < 200 || xhr.status > 599)) {`\r\n\r\nHowever it would be beyong the scope of that library to add react native specific handling.",
        "pr_file_module": null
      },
      {
        "comment_id": "2004312873",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50122,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java",
        "discussion_id": "2003035274",
        "commented_code": "@@ -286,6 +286,10 @@ public void sendRequestInternal(\n       for (UriHandler handler : mUriHandlers) {\n         if (handler.supports(uri, responseType)) {\n           WritableMap res = handler.fetch(uri);\n+          //fix: UriHandlers which are not using file:// scheme fail in whatwg-fetch at this line  https://github.com/JakeChampion/fetch/blob/main/fetch.js#L547\n+          if (\"content\".equals(uri.getScheme())){\n+            ResponseUtil.onResponseReceived(reactApplicationContext, requestId, 200, Arguments.createMap(), url);\n+          }",
        "comment_created_at": "2025-03-19T21:14:20+00:00",
        "comment_author": "javache",
        "comment_body": "I don't actually understand how that code affects the load of content:// URI's. As far as I can tell, the only thing it does is provide a default status for some loads. \r\n\r\nDo we rely on the status later in the response handling for blobs?",
        "pr_file_module": null
      },
      {
        "comment_id": "2005065624",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50122,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java",
        "discussion_id": "2003035274",
        "commented_code": "@@ -286,6 +286,10 @@ public void sendRequestInternal(\n       for (UriHandler handler : mUriHandlers) {\n         if (handler.supports(uri, responseType)) {\n           WritableMap res = handler.fetch(uri);\n+          //fix: UriHandlers which are not using file:// scheme fail in whatwg-fetch at this line  https://github.com/JakeChampion/fetch/blob/main/fetch.js#L547\n+          if (\"content\".equals(uri.getScheme())){\n+            ResponseUtil.onResponseReceived(reactApplicationContext, requestId, 200, Arguments.createMap(), url);\n+          }",
        "comment_created_at": "2025-03-20T08:40:40+00:00",
        "comment_author": "giantslogik",
        "comment_body": "The crash for content urls because status is not set occurs at https://github.com/JakeChampion/fetch/blob/ba5cf1ed2e02ebb96fa1e60b4fd2eb04071b60e4/fetch.js#L474\r\n\r\n```\r\nif (this.status < 200 || this.status > 599) {\r\n    throw new RangeError(\"Failed to construct 'Response': The status provided (0) is outside the range [200, 599].\")\r\n  }\r\n```\r\n\r\nSetting the status via the PR code , causes above check in fetch to suceed and avoids the crash in https://github.com/facebook/react-native/issues/48762. \r\n\r\nAfter which the response can be utilised as a Blob. Typical App  code would be:\r\n```\r\n    const response = await fetch(uri);\r\n    const blob = await response.blob();\r\n```\r\nAs you can see without the PR it would crash at fetch(uri) and Apps wouldn't be able to create a blob.\r\n\r\nFor file urls setting status wan't required due to the status being set in js.\r\nhttps://github.com/JakeChampion/fetch/blob/ba5cf1ed2e02ebb96fa1e60b4fd2eb04071b60e4/fetch.js#L547\r\n\r\n```\r\n      if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {\r\n        options.status = 200;\r\n      }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2005827400",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50122,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java",
        "discussion_id": "2003035274",
        "commented_code": "@@ -286,6 +286,10 @@ public void sendRequestInternal(\n       for (UriHandler handler : mUriHandlers) {\n         if (handler.supports(uri, responseType)) {\n           WritableMap res = handler.fetch(uri);\n+          //fix: UriHandlers which are not using file:// scheme fail in whatwg-fetch at this line  https://github.com/JakeChampion/fetch/blob/main/fetch.js#L547\n+          if (\"content\".equals(uri.getScheme())){\n+            ResponseUtil.onResponseReceived(reactApplicationContext, requestId, 200, Arguments.createMap(), url);\n+          }",
        "comment_created_at": "2025-03-20T14:51:13+00:00",
        "comment_author": "javache",
        "comment_body": "Thanks for those pointers! I still think we should call `ResponseUtil.onResponseReceived` for any response provided through `mUriHandlers`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2005957865",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50122,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java",
        "discussion_id": "2003035274",
        "commented_code": "@@ -286,6 +286,10 @@ public void sendRequestInternal(\n       for (UriHandler handler : mUriHandlers) {\n         if (handler.supports(uri, responseType)) {\n           WritableMap res = handler.fetch(uri);\n+          //fix: UriHandlers which are not using file:// scheme fail in whatwg-fetch at this line  https://github.com/JakeChampion/fetch/blob/main/fetch.js#L547\n+          if (\"content\".equals(uri.getScheme())){\n+            ResponseUtil.onResponseReceived(reactApplicationContext, requestId, 200, Arguments.createMap(), url);\n+          }",
        "comment_created_at": "2025-03-20T15:52:00+00:00",
        "comment_author": "giantslogik",
        "comment_body": "@javache \r\nThat was my first approach as well.  I didnt have the if condition around `ResponseUtil.onResponseReceived`.\r\n```\r\nif (\"content\".equals(uri.getScheme())){\r\n            ResponseUtil.onResponseReceived(reactApplicationContext, requestId, 200, Arguments.createMap(), url);\r\n          }\r\n```\r\n@tdn120 had concerns about regressions and side effect with existing code. https://github.com/facebook/react-native/pull/48766#issuecomment-2610028603\r\n\r\nWrapping it in the if condition avoids the need to verify behavior across all existing uris and handlers to ensure there are no regressions or side effects. \r\n\r\nIf you confirm , i will drop the if condition. It does work fine without it for both file/content urls.",
        "pr_file_module": null
      },
      {
        "comment_id": "2016395613",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50122,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/network/NetworkingModule.java",
        "discussion_id": "2003035274",
        "commented_code": "@@ -286,6 +286,10 @@ public void sendRequestInternal(\n       for (UriHandler handler : mUriHandlers) {\n         if (handler.supports(uri, responseType)) {\n           WritableMap res = handler.fetch(uri);\n+          //fix: UriHandlers which are not using file:// scheme fail in whatwg-fetch at this line  https://github.com/JakeChampion/fetch/blob/main/fetch.js#L547\n+          if (\"content\".equals(uri.getScheme())){\n+            ResponseUtil.onResponseReceived(reactApplicationContext, requestId, 200, Arguments.createMap(), url);\n+          }",
        "comment_created_at": "2025-03-27T12:02:33+00:00",
        "comment_author": "giantslogik",
        "comment_body": "Removed if condition to call ResponseUtil.onResponseReceived for all response provided through mUriHandlers.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1860806186",
    "pr_number": 47634,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewGroup.java",
    "created_at": "2024-11-27T14:52:59+00:00",
    "commented_code": "private @Nullable ViewGroupDrawingOrderHelper mDrawingOrderHelper;\n   private float mBackfaceOpacity;\n   private String mBackfaceVisibility;\n+  private boolean mIsTransitioning = false;\n+  private @Nullable Set<Integer> mChildrenRemovedWhileTransitioning = null;",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1860806186",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47634,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewGroup.java",
        "discussion_id": "1860806186",
        "commented_code": "@@ -137,6 +140,8 @@ public void shutdown() {\n   private @Nullable ViewGroupDrawingOrderHelper mDrawingOrderHelper;\n   private float mBackfaceOpacity;\n   private String mBackfaceVisibility;\n+  private boolean mIsTransitioning = false;\n+  private @Nullable Set<Integer> mChildrenRemovedWhileTransitioning = null;",
        "comment_created_at": "2024-11-27T14:52:59+00:00",
        "comment_author": "tdn120",
        "comment_body": "These need to be reset in initView() to ensure the view recycles properly.\r\nAs with comment below, once it's created, we can probably just call `mChildrenRemovedWhileTransitioning.clear()` rather than null it out.",
        "pr_file_module": null
      },
      {
        "comment_id": "1860876311",
        "repo_full_name": "facebook/react-native",
        "pr_number": 47634,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewGroup.java",
        "discussion_id": "1860806186",
        "commented_code": "@@ -137,6 +140,8 @@ public void shutdown() {\n   private @Nullable ViewGroupDrawingOrderHelper mDrawingOrderHelper;\n   private float mBackfaceOpacity;\n   private String mBackfaceVisibility;\n+  private boolean mIsTransitioning = false;\n+  private @Nullable Set<Integer> mChildrenRemovedWhileTransitioning = null;",
        "comment_created_at": "2024-11-27T15:34:13+00:00",
        "comment_author": "kkafar",
        "comment_body": "initView modified here: https://github.com/facebook/react-native/pull/47634/commits/c14e0268fcc10a78bb60fa65a274f34b14e808c2",
        "pr_file_module": null
      }
    ]
  }
]