[
  {
    "discussion_id": "2110236987",
    "pr_number": 51631,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/internal/interop/InteropUiBlockListener.kt",
    "created_at": "2025-05-27T20:59:17+00:00",
    "commented_code": "}\n \n   override fun willMountItems(uiManager: UIManager) {\n-    if (beforeUIBlocks.isEmpty()) {\n-      return\n-    }\n-    beforeUIBlocks.forEach {\n+    // avoid ConcurrentModificationException by iterating over a copy\n+    try {\n       if (uiManager is UIBlockViewResolver) {\n-        it.execute(uiManager)\n+        val snapshot = ArrayList(beforeUIBlocks)\n+        beforeUIBlocks.clear()",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2110236987",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51631,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/internal/interop/InteropUiBlockListener.kt",
        "discussion_id": "2110236987",
        "commented_code": "@@ -39,27 +39,29 @@ internal class InteropUIBlockListener : UIManagerListener {\n   }\n \n   override fun willMountItems(uiManager: UIManager) {\n-    if (beforeUIBlocks.isEmpty()) {\n-      return\n-    }\n-    beforeUIBlocks.forEach {\n+    // avoid ConcurrentModificationException by iterating over a copy\n+    try {\n       if (uiManager is UIBlockViewResolver) {\n-        it.execute(uiManager)\n+        val snapshot = ArrayList(beforeUIBlocks)\n+        beforeUIBlocks.clear()",
        "comment_created_at": "2025-05-27T20:59:17+00:00",
        "comment_author": "javache",
        "comment_body": "This should happen inside a synchronized, otherwise, it can still race with `prependUIBlock`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2111520345",
    "pr_number": 51631,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/internal/interop/InteropUiBlockListener.kt",
    "created_at": "2025-05-28T10:34:00+00:00",
    "commented_code": "afterUIBlocks.add(block)\n   }\n \n+  @Synchronized",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2111520345",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51631,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/internal/interop/InteropUiBlockListener.kt",
        "discussion_id": "2111520345",
        "commented_code": "@@ -38,28 +38,34 @@ internal class InteropUIBlockListener : UIManagerListener {\n     afterUIBlocks.add(block)\n   }\n \n+  @Synchronized",
        "comment_created_at": "2025-05-28T10:34:00+00:00",
        "comment_author": "javache",
        "comment_body": "If you wrap the entire method in @synchronized no copy is necessary as concurrent modification will be impossible. \r\n\r\nDoes the `synchronized(this)` I suggested not work?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2114368947",
    "pr_number": 51631,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/internal/interop/InteropUiBlockListener.kt",
    "created_at": "2025-05-29T16:55:11+00:00",
    "commented_code": "}\n \n   override fun willMountItems(uiManager: UIManager) {\n-    if (beforeUIBlocks.isEmpty()) {\n-      return\n+    val blocksToExecute: List<UIBlock> = synchronized(this) {\n+      if (beforeUIBlocks.isEmpty()) {\n+        return\n+      }\n+      // avoid ConcurrentModificationException by iterating over a copy\n+      ArrayList(beforeUIBlocks).also { beforeUIBlocks.clear() }",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2114368947",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51631,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/internal/interop/InteropUiBlockListener.kt",
        "discussion_id": "2114368947",
        "commented_code": "@@ -39,27 +39,35 @@ internal class InteropUIBlockListener : UIManagerListener {\n   }\n \n   override fun willMountItems(uiManager: UIManager) {\n-    if (beforeUIBlocks.isEmpty()) {\n-      return\n+    val blocksToExecute: List<UIBlock> = synchronized(this) {\n+      if (beforeUIBlocks.isEmpty()) {\n+        return\n+      }\n+      // avoid ConcurrentModificationException by iterating over a copy\n+      ArrayList(beforeUIBlocks).also { beforeUIBlocks.clear() }",
        "comment_created_at": "2025-05-29T16:55:11+00:00",
        "comment_author": "cortinico",
        "comment_body": "Just a nit\r\n\r\n```suggestion\r\n      beforeUIBlocks.toList().also { beforeUIBlocks.clear() }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2114369931",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51631,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/fabric/internal/interop/InteropUiBlockListener.kt",
        "discussion_id": "2114368947",
        "commented_code": "@@ -39,27 +39,35 @@ internal class InteropUIBlockListener : UIManagerListener {\n   }\n \n   override fun willMountItems(uiManager: UIManager) {\n-    if (beforeUIBlocks.isEmpty()) {\n-      return\n+    val blocksToExecute: List<UIBlock> = synchronized(this) {\n+      if (beforeUIBlocks.isEmpty()) {\n+        return\n+      }\n+      // avoid ConcurrentModificationException by iterating over a copy\n+      ArrayList(beforeUIBlocks).also { beforeUIBlocks.clear() }",
        "comment_created_at": "2025-05-29T16:55:48+00:00",
        "comment_author": "cortinico",
        "comment_body": "This applies also to the other callsite",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2032147252",
    "pr_number": 50536,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/UiThreadUtil.kt",
    "created_at": "2025-04-07T23:34:51+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+ package com.facebook.react.bridge\n+\n+ import android.os.Handler\n+ import android.os.Looper\n+ import com.facebook.react.common.build.ReactBuildConfig\n+ \n+ /**\n+  * Utility for interacting with the UI thread.\n+  */\n+ public object UiThreadUtil {\n+ \n+     @Volatile private var mainHandlerInternal: Handler? = null\n+ \n+     \n+     private val mainHandler: Handler\n+         get() {\n+             if (mainHandlerInternal == null) {\n+                 synchronized(this) {\n+                     if (mainHandlerInternal == null) {\n+                         mainHandlerInternal = Handler(Looper.getMainLooper())\n+                     }\n+                 }\n+             }\n+             return mainHandlerInternal!!\n+         }",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2032147252",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50536,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/UiThreadUtil.kt",
        "discussion_id": "2032147252",
        "commented_code": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+ package com.facebook.react.bridge\n+\n+ import android.os.Handler\n+ import android.os.Looper\n+ import com.facebook.react.common.build.ReactBuildConfig\n+ \n+ /**\n+  * Utility for interacting with the UI thread.\n+  */\n+ public object UiThreadUtil {\n+ \n+     @Volatile private var mainHandlerInternal: Handler? = null\n+ \n+     \n+     private val mainHandler: Handler\n+         get() {\n+             if (mainHandlerInternal == null) {\n+                 synchronized(this) {\n+                     if (mainHandlerInternal == null) {\n+                         mainHandlerInternal = Handler(Looper.getMainLooper())\n+                     }\n+                 }\n+             }\n+             return mainHandlerInternal!!\n+         }",
        "comment_created_at": "2025-04-07T23:34:51+00:00",
        "comment_author": "alanleedev",
        "comment_body": "Could you verify if this would also work here?\r\n\r\n```kotlin\r\nprivate val mainHandler: Handler by lazy {\r\n    Handler(Looper.getMainLooper())\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2032331814",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50536,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/UiThreadUtil.kt",
        "discussion_id": "2032147252",
        "commented_code": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+ package com.facebook.react.bridge\n+\n+ import android.os.Handler\n+ import android.os.Looper\n+ import com.facebook.react.common.build.ReactBuildConfig\n+ \n+ /**\n+  * Utility for interacting with the UI thread.\n+  */\n+ public object UiThreadUtil {\n+ \n+     @Volatile private var mainHandlerInternal: Handler? = null\n+ \n+     \n+     private val mainHandler: Handler\n+         get() {\n+             if (mainHandlerInternal == null) {\n+                 synchronized(this) {\n+                     if (mainHandlerInternal == null) {\n+                         mainHandlerInternal = Handler(Looper.getMainLooper())\n+                     }\n+                 }\n+             }\n+             return mainHandlerInternal!!\n+         }",
        "comment_created_at": "2025-04-08T03:49:32+00:00",
        "comment_author": "riteshshukla04",
        "comment_body": "Yes , The suggested one is much cleaner. Changed. Thanks for the review @alanleedev ",
        "pr_file_module": null
      }
    ]
  }
]