[
  {
    "discussion_id": "2081570192",
    "pr_number": 51216,
    "pr_file": "packages/react-native/scripts/ios-prebuild/utils.js",
    "created_at": "2025-05-09T12:29:29+00:00",
    "commented_code": "throw new Error('Cannot prepare the iOS prebuilds on an Eden checkout');\n }\n \n-module.exports = {\n-  createFolderIfNotExists,\n-  throwIfOnEden,\n-};\n+function prebuild_log(\n+  message /*: string */,\n+  level /*: 'info' | 'warning' | 'error' */ = 'warning',\n+) {\n+  // Simple log coloring for terminal output\n+  const prefix = '[Prebuild] ';\n+  let colorFn = (x /*:string*/) => x;\n+  if (process.stdout.isTTY) {\n+    if (level === 'info') colorFn = x => `\\x1b[32m${x}\\x1b[0m`;\n+    else if (level === 'error') colorFn = x => `\\x1b[31m${x}\\x1b[0m`;\n+    else colorFn = x => `\\x1b[33m${x}\\x1b[0m`;\n+  }\n+\n+  console.log(colorFn(prefix + message));\n+}",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2081570192",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51216,
        "pr_file": "packages/react-native/scripts/ios-prebuild/utils.js",
        "discussion_id": "2081570192",
        "commented_code": "@@ -38,7 +38,20 @@ function throwIfOnEden() {\n   throw new Error('Cannot prepare the iOS prebuilds on an Eden checkout');\n }\n \n-module.exports = {\n-  createFolderIfNotExists,\n-  throwIfOnEden,\n-};\n+function prebuild_log(\n+  message /*: string */,\n+  level /*: 'info' | 'warning' | 'error' */ = 'warning',\n+) {\n+  // Simple log coloring for terminal output\n+  const prefix = '[Prebuild] ';\n+  let colorFn = (x /*:string*/) => x;\n+  if (process.stdout.isTTY) {\n+    if (level === 'info') colorFn = x => `\\x1b[32m${x}\\x1b[0m`;\n+    else if (level === 'error') colorFn = x => `\\x1b[31m${x}\\x1b[0m`;\n+    else colorFn = x => `\\x1b[33m${x}\\x1b[0m`;\n+  }\n+\n+  console.log(colorFn(prefix + message));\n+}",
        "comment_created_at": "2025-05-09T12:29:29+00:00",
        "comment_author": "cipolleschi",
        "comment_body": "This should go in a different pr. Also:\r\n```suggestion\r\nfunction prebuildLog(\r\n  message /*: string */,\r\n  level /*: 'info' | 'warning' | 'error' */ = 'warning',\r\n) {\r\n  // Simple log coloring for terminal output\r\n  const prefix = '[Prebuild] ';\r\n  let colorFn = (x /*:string*/) => x;\r\n  if (process.stdout.isTTY) {\r\n    if (level === 'info') colorFn = x => `\\x1b[32m${x}\\x1b[0m`;\r\n    else if (level === 'error') colorFn = x => `\\x1b[31m${x}\\x1b[0m`;\r\n    else colorFn = x => `\\x1b[33m${x}\\x1b[0m`;\r\n  }\r\n\r\n  console.log(colorFn(prefix + message));\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1439337774",
    "pr_number": 41967,
    "pr_file": "packages/community-cli-plugin/src/utils/getWorkspaceRoot.js",
    "created_at": "2024-01-02T10:50:36+00:00",
    "commented_code": "+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ * @format\n+ * @oncall react_native\n+ */\n+\n+const fs = require('fs');\n+const micromatch = require('micromatch');\n+const path = require('path');\n+const yaml = require('yaml');\n+\n+/**\n+ * Get the workspace paths from the path of a potential workspace root.\n+ *\n+ * This supports:\n+ * - [NPM workspaces](https://docs.npmjs.com/cli/v10/using-npm/workspaces)\n+ * - [Yarn workspaces](https://yarnpkg.com/features/workspaces)\n+ * - [PNPM workspaces](https://pnpm.io/workspaces)\n+ */\n+function getWorkspacePaths(packagePath /*: string */) /*: string[] */ {\n+  const result /*: string[] */ = [];\n+  try {\n+    const packageJsonPath = path.resolve(packagePath, 'package.json');\n+    const {workspaces} = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n+    if (Array.isArray(workspaces)) {\n+      result.push(...workspaces);\n+    } else if (\n+      typeof workspaces === 'object' &&\n+      Array.isArray(workspaces.packages)\n+    ) {\n+      // An alternative way for Yarn to declare workspace packages\n+      result.push(...workspaces.packages);\n+    }\n+    // Falling back to PNPN workspaces\n+    const pnpmWorkspacePath = path.resolve(packagePath, 'pnpm-workspace.yaml');\n+    const pnpmWorkspaceConfig = yaml.parse(\n+      fs.readFileSync(pnpmWorkspacePath, 'utf8'),\n+    );\n+    if (\n+      typeof pnpmWorkspaceConfig === 'object' &&\n+      Array.isArray(pnpmWorkspaceConfig.packages)\n+    ) {\n+      result.push(...pnpmWorkspaceConfig.packages);\n+    }\n+  } catch (err) {\n+    if (err.code !== 'ENOENT') {\n+      console.warn(`Failed getting workspace root from ${packagePath}:`, err);",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1439337774",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/getWorkspaceRoot.js",
        "discussion_id": "1439337774",
        "commented_code": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ * @format\n+ * @oncall react_native\n+ */\n+\n+const fs = require('fs');\n+const micromatch = require('micromatch');\n+const path = require('path');\n+const yaml = require('yaml');\n+\n+/**\n+ * Get the workspace paths from the path of a potential workspace root.\n+ *\n+ * This supports:\n+ * - [NPM workspaces](https://docs.npmjs.com/cli/v10/using-npm/workspaces)\n+ * - [Yarn workspaces](https://yarnpkg.com/features/workspaces)\n+ * - [PNPM workspaces](https://pnpm.io/workspaces)\n+ */\n+function getWorkspacePaths(packagePath /*: string */) /*: string[] */ {\n+  const result /*: string[] */ = [];\n+  try {\n+    const packageJsonPath = path.resolve(packagePath, 'package.json');\n+    const {workspaces} = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n+    if (Array.isArray(workspaces)) {\n+      result.push(...workspaces);\n+    } else if (\n+      typeof workspaces === 'object' &&\n+      Array.isArray(workspaces.packages)\n+    ) {\n+      // An alternative way for Yarn to declare workspace packages\n+      result.push(...workspaces.packages);\n+    }\n+    // Falling back to PNPN workspaces\n+    const pnpmWorkspacePath = path.resolve(packagePath, 'pnpm-workspace.yaml');\n+    const pnpmWorkspaceConfig = yaml.parse(\n+      fs.readFileSync(pnpmWorkspacePath, 'utf8'),\n+    );\n+    if (\n+      typeof pnpmWorkspaceConfig === 'object' &&\n+      Array.isArray(pnpmWorkspaceConfig.packages)\n+    ) {\n+      result.push(...pnpmWorkspaceConfig.packages);\n+    }\n+  } catch (err) {\n+    if (err.code !== 'ENOENT') {\n+      console.warn(`Failed getting workspace root from ${packagePath}:`, err);",
        "comment_created_at": "2024-01-02T10:50:36+00:00",
        "comment_author": "huntie",
        "comment_body": "I think we'd want to log this silently (via `debug`: [example](https://github.com/facebook/react-native/blob/af8c56ac58c27e1cacc6192823ad3eb2c487bd6c/packages/dev-middleware/src/inspector-proxy/Device.js#L30)) \u2014\u00a0especially since we have logic that retries `getWorkspaceRoot`. Discovering a workspaces layout is a strictly optional behaviour and shouldn't leak to the user during the detection loop.\r\n\r\nNote that we have already logic elsewhere in CLI that depends on the presence of a `package.json` \u2014\u00a0so this case should be extremely rare.",
        "pr_file_module": null
      },
      {
        "comment_id": "1439534379",
        "repo_full_name": "facebook/react-native",
        "pr_number": 41967,
        "pr_file": "packages/community-cli-plugin/src/utils/getWorkspaceRoot.js",
        "discussion_id": "1439337774",
        "commented_code": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ * @format\n+ * @oncall react_native\n+ */\n+\n+const fs = require('fs');\n+const micromatch = require('micromatch');\n+const path = require('path');\n+const yaml = require('yaml');\n+\n+/**\n+ * Get the workspace paths from the path of a potential workspace root.\n+ *\n+ * This supports:\n+ * - [NPM workspaces](https://docs.npmjs.com/cli/v10/using-npm/workspaces)\n+ * - [Yarn workspaces](https://yarnpkg.com/features/workspaces)\n+ * - [PNPM workspaces](https://pnpm.io/workspaces)\n+ */\n+function getWorkspacePaths(packagePath /*: string */) /*: string[] */ {\n+  const result /*: string[] */ = [];\n+  try {\n+    const packageJsonPath = path.resolve(packagePath, 'package.json');\n+    const {workspaces} = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n+    if (Array.isArray(workspaces)) {\n+      result.push(...workspaces);\n+    } else if (\n+      typeof workspaces === 'object' &&\n+      Array.isArray(workspaces.packages)\n+    ) {\n+      // An alternative way for Yarn to declare workspace packages\n+      result.push(...workspaces.packages);\n+    }\n+    // Falling back to PNPN workspaces\n+    const pnpmWorkspacePath = path.resolve(packagePath, 'pnpm-workspace.yaml');\n+    const pnpmWorkspaceConfig = yaml.parse(\n+      fs.readFileSync(pnpmWorkspacePath, 'utf8'),\n+    );\n+    if (\n+      typeof pnpmWorkspaceConfig === 'object' &&\n+      Array.isArray(pnpmWorkspaceConfig.packages)\n+    ) {\n+      result.push(...pnpmWorkspaceConfig.packages);\n+    }\n+  } catch (err) {\n+    if (err.code !== 'ENOENT') {\n+      console.warn(`Failed getting workspace root from ${packagePath}:`, err);",
        "comment_created_at": "2024-01-02T15:04:31+00:00",
        "comment_author": "kraenhansen",
        "comment_body": "I noticed the `loadMetroConfig` file was already using `logger.debug`: https://github.com/facebook/react-native/blob/main/packages/community-cli-plugin/src/utils/loadMetroConfig.js#L93 and copied that pattern.",
        "pr_file_module": null
      }
    ]
  }
]