[
  {
    "discussion_id": "2135376123",
    "pr_number": 51884,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/ReactInstanceManagerBuilder.kt",
    "created_at": "2025-06-09T09:27:27+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react\n+\n+import android.app.Activity\n+import android.app.Application\n+import android.content.Context\n+import com.facebook.common.logging.FLog\n+import com.facebook.hermes.reactexecutor.HermesExecutor\n+import com.facebook.hermes.reactexecutor.HermesExecutorFactory\n+import com.facebook.infer.annotation.Assertions\n+import com.facebook.react.bridge.JSBundleLoader\n+import com.facebook.react.bridge.JSExceptionHandler\n+import com.facebook.react.bridge.JavaScriptExecutorFactory\n+import com.facebook.react.bridge.NotThreadSafeBridgeIdleDebugListener\n+import com.facebook.react.bridge.UIManagerProvider\n+import com.facebook.react.common.LifecycleState\n+import com.facebook.react.common.SurfaceDelegateFactory\n+import com.facebook.react.common.annotations.internal.LegacyArchitecture\n+import com.facebook.react.common.annotations.internal.LegacyArchitectureLogLevel\n+import com.facebook.react.common.annotations.internal.LegacyArchitectureLogger\n+import com.facebook.react.devsupport.DefaultDevSupportManagerFactory\n+import com.facebook.react.devsupport.DevSupportManagerFactory\n+import com.facebook.react.devsupport.interfaces.DevBundleDownloadListener\n+import com.facebook.react.devsupport.interfaces.DevLoadingViewManager\n+import com.facebook.react.devsupport.interfaces.DevSupportManager\n+import com.facebook.react.devsupport.interfaces.PausedInDebuggerOverlayManager\n+import com.facebook.react.devsupport.interfaces.RedBoxHandler\n+import com.facebook.react.internal.ChoreographerProvider\n+import com.facebook.react.jscexecutor.JSCExecutor\n+import com.facebook.react.jscexecutor.JSCExecutorFactory\n+import com.facebook.react.modules.core.DefaultHardwareBackBtnHandler\n+import com.facebook.react.modules.systeminfo.AndroidInfoHelpers\n+import com.facebook.react.packagerconnection.RequestHandler\n+import com.facebook.react.ReactInstanceManager.initializeSoLoaderIfNecessary\n+\n+/** Builder class for [ReactInstanceManager]. */\n+@LegacyArchitecture\n+public class ReactInstanceManagerBuilder {\n+  private val packages: MutableList<ReactPackage> = mutableListOf()\n+  private var jsBundleAssetUrl: String? = null\n+  private var jsBundleLoader: JSBundleLoader? = null\n+  private var jsMainModulePath: String? = null\n+  private var bridgeIdleDebugListener: NotThreadSafeBridgeIdleDebugListener? = null\n+  private var application: Application? = null\n+  private var useDeveloperSupport = false\n+  private var devSupportManagerFactory: DevSupportManagerFactory? = null\n+  private var requireActivity = false\n+  private var keepActivity = false\n+  private var initialLifecycleState: LifecycleState? = null\n+  private var jsExceptionHandler: JSExceptionHandler? = null\n+  private var currentActivity: Activity? = null\n+  private var defaultHardwareBackBtnHandler: DefaultHardwareBackBtnHandler? = null\n+  private var redBoxHandler: RedBoxHandler? = null\n+  private var lazyViewManagersEnabled = false\n+  private var devBundleDownloadListener: DevBundleDownloadListener? = null\n+  private var javaScriptExecutorFactory: JavaScriptExecutorFactory? = null\n+  private var minNumShakes = 1\n+  private var minTimeLeftInFrameForNonBatchedOperationMs = -1\n+  private var uiManagerProvider: UIManagerProvider? = null\n+  private var customPackagerCommandHandlers: Map<String, RequestHandler>? = null\n+  private var tmmDelegateBuilder: ReactPackageTurboModuleManagerDelegate.Builder? = null\n+  private var surfaceDelegateFactory: SurfaceDelegateFactory? = null\n+  private var devLoadingViewManager: DevLoadingViewManager? = null\n+  private var jsEngineResolutionAlgorithm: JSEngineResolutionAlgorithm? = null\n+  private var choreographerProvider: ChoreographerProvider? = null\n+  private var pausedInDebuggerOverlayManager: PausedInDebuggerOverlayManager? = null\n+\n+  /** Factory for desired implementation of JavaScriptExecutor. */\n+  public fun setJavaScriptExecutorFactory(\n+      javaScriptExecutorFactory: JavaScriptExecutorFactory?\n+  ): ReactInstanceManagerBuilder {\n+    this.javaScriptExecutorFactory = javaScriptExecutorFactory\n+    return this\n+  }\n+\n+  public fun setUIManagerProvider(uiManagerProvider: UIManagerProvider?): ReactInstanceManagerBuilder {\n+    this.uiManagerProvider = uiManagerProvider\n+    return this\n+  }\n+\n+  /**\n+   * Name of the JS bundle file to be loaded from application's raw assets.\n+   *\n+   * Example: `\"index.android.js\"`\n+   */\n+  public fun setBundleAssetName(bundleAssetName: String?): ReactInstanceManagerBuilder {\n+    jsBundleAssetUrl = (if (bundleAssetName == null) null else \"assets://$bundleAssetName\")\n+    jsBundleLoader = null\n+    return this\n+  }\n+\n+  /**\n+   * Path to the JS bundle file to be loaded from the file system.\n+   *\n+   * Example: `\"assets://index.android.js\"` or `\"/sdcard/main.jsbundle\"`\n+   */\n+  public fun setJSBundleFile(jsBundleFile: String): ReactInstanceManagerBuilder {\n+    if (jsBundleFile.startsWith(\"assets://\")) {\n+      jsBundleAssetUrl = jsBundleFile\n+      jsBundleLoader = null\n+      return this\n+    }\n+    return setJSBundleLoader(JSBundleLoader.createFileLoader(jsBundleFile))\n+  }\n+\n+  /**\n+   * Bundle loader to use when setting up JS environment. This supersedes prior invocations of\n+   * [.setJSBundleFile] and [.setBundleAssetName].\n+   *\n+   * Example: `JSBundleLoader.createFileLoader(application, bundleFile)`\n+   */\n+  public fun setJSBundleLoader(jsBundleLoader: JSBundleLoader): ReactInstanceManagerBuilder {\n+    this.jsBundleLoader = jsBundleLoader\n+    jsBundleAssetUrl = null\n+    return this\n+  }\n+\n+  /**\n+   * Sets the JS Engine to load as either Hermes or JSC. If not set, the default is JSC with a\n+   * Hermes fallback.\n+   */\n+  public fun setJSEngineResolutionAlgorithm(\n+      jsEngineResolutionAlgorithm: JSEngineResolutionAlgorithm?\n+  ): ReactInstanceManagerBuilder {\n+    this.jsEngineResolutionAlgorithm = jsEngineResolutionAlgorithm\n+    return this\n+  }\n+\n+  /**\n+   * Path to your app's main module on Metro. This is used when reloading JS during development. All\n+   * paths are relative to the root folder the packager is serving files from.\n+   * Examples: `\"index.android\"` or `\"subdirectory/index.android\"`\n+   */\n+  public fun setJSMainModulePath(jsMainModulePath: String): ReactInstanceManagerBuilder {\n+    this.jsMainModulePath = jsMainModulePath\n+    return this\n+  }\n+\n+  public fun addPackage(reactPackage: ReactPackage): ReactInstanceManagerBuilder {\n+    packages.add(reactPackage)\n+    return this\n+  }\n+\n+  public fun addPackages(reactPackages: List<ReactPackage>): ReactInstanceManagerBuilder {\n+    packages.addAll(reactPackages)\n+    return this\n+  }\n+\n+  public fun setBridgeIdleDebugListener(\n+      bridgeIdleDebugListener: NotThreadSafeBridgeIdleDebugListener\n+  ): ReactInstanceManagerBuilder {\n+    this.bridgeIdleDebugListener = bridgeIdleDebugListener\n+    return this\n+  }\n+\n+  /** Required. This must be your `Application` instance. */\n+  public fun setApplication(application: Application): ReactInstanceManagerBuilder {\n+    this.application = application\n+    return this\n+  }\n+\n+  public fun setCurrentActivity(activity: Activity): ReactInstanceManagerBuilder {\n+    currentActivity = activity\n+    return this\n+  }\n+\n+  public fun setDefaultHardwareBackBtnHandler(\n+      defaultHardwareBackBtnHandler: DefaultHardwareBackBtnHandler\n+  ): ReactInstanceManagerBuilder {\n+    this.defaultHardwareBackBtnHandler = defaultHardwareBackBtnHandler\n+    return this\n+  }\n+\n+  /**\n+   * When `true`, developer options such as JS reloading and debugging are enabled. Note you\n+   * still have to call [.showDevOptionsDialog] to show the dev menu, e.g. when the device\n+   * Menu button is pressed.\n+   */\n+  public fun setUseDeveloperSupport(useDeveloperSupport: Boolean): ReactInstanceManagerBuilder {\n+    this.useDeveloperSupport = useDeveloperSupport\n+    return this\n+  }\n+\n+  /**\n+   * Set the custom [DevSupportManagerFactory]. If not set, will use [DefaultDevSupportManagerFactory].\n+   */\n+  public fun setDevSupportManagerFactory(\n+      devSupportManagerFactory: DevSupportManagerFactory?\n+  ): ReactInstanceManagerBuilder {\n+    this.devSupportManagerFactory = devSupportManagerFactory\n+    return this\n+  }\n+\n+  /**\n+   * When `false`, indicates that correct usage of React Native will NOT involve an Activity.\n+   * For the vast majority of Android apps in the ecosystem, this will not need to change. Unless\n+   * you really know what you're doing, you should probably not change this!\n+   */\n+  public fun setRequireActivity(requireActivity: Boolean): ReactInstanceManagerBuilder {\n+    this.requireActivity = requireActivity\n+    return this\n+  }\n+\n+  public fun setKeepActivity(keepActivity: Boolean): ReactInstanceManagerBuilder {\n+    this.keepActivity = keepActivity\n+    return this\n+  }\n+\n+  /**\n+   * When the [SurfaceDelegateFactory] is provided, it will be used for native modules to get\n+   * a [SurfaceDelegate] to interact with the platform specific surface that they that needs\n+   * to be rendered in. For mobile platform this is default to be null so that these modules will\n+   * need to provide a default surface delegate. One example of such native module is [LogBoxModule],\n+   * which is rendered in mobile platform with [LogBoxDialog], while in VR platform with custom layer\n+   * provided by runtime.\n+   */\n+  public fun setSurfaceDelegateFactory(\n+      surfaceDelegateFactory: SurfaceDelegateFactory?\n+  ): ReactInstanceManagerBuilder {\n+    this.surfaceDelegateFactory = surfaceDelegateFactory\n+    return this\n+  }\n+\n+  /** Sets the Dev Loading View Manager. */\n+  public fun setDevLoadingViewManager(\n+      devLoadingViewManager: DevLoadingViewManager?\n+  ): ReactInstanceManagerBuilder {\n+    this.devLoadingViewManager = devLoadingViewManager\n+    return this\n+  }\n+\n+  public fun setPausedInDebuggerOverlayManager(\n+      pausedInDebuggerOverlayManager: PausedInDebuggerOverlayManager?\n+  ): ReactInstanceManagerBuilder {\n+    this.pausedInDebuggerOverlayManager = pausedInDebuggerOverlayManager\n+    return this\n+  }\n+\n+  /**\n+   * Sets the initial lifecycle state of the host. For example, if the host is already resumed at\n+   * creation time, we wouldn't expect an onResume call until we get an onPause call.\n+   */\n+  public fun setInitialLifecycleState(\n+      initialLifecycleState: LifecycleState\n+  ): ReactInstanceManagerBuilder {\n+    this.initialLifecycleState = initialLifecycleState\n+    return this\n+  }\n+\n+  /**\n+   * Set the exception handler for all native module calls. If not set, the default [DevSupportManager] will be used,\n+   * which shows a redbox in dev mode and rethrows (crashes the app) in prod mode.\n+   */\n+  public fun setJSExceptionHandler(handler: JSExceptionHandler?): ReactInstanceManagerBuilder {\n+    jsExceptionHandler = handler\n+    return this\n+  }\n+\n+  public fun setRedBoxHandler(redBoxHandler: RedBoxHandler?): ReactInstanceManagerBuilder {\n+    this.redBoxHandler = redBoxHandler\n+    return this\n+  }\n+\n+  public fun setLazyViewManagersEnabled(lazyViewManagersEnabled: Boolean): ReactInstanceManagerBuilder {\n+    this.lazyViewManagersEnabled = lazyViewManagersEnabled\n+    return this\n+  }\n+\n+  public fun setDevBundleDownloadListener(\n+      listener: DevBundleDownloadListener?\n+  ): ReactInstanceManagerBuilder {\n+    devBundleDownloadListener = listener\n+    return this\n+  }\n+\n+  public fun setMinNumShakes(minNumShakes: Int): ReactInstanceManagerBuilder {\n+    this.minNumShakes = minNumShakes\n+    return this\n+  }\n+\n+  public fun setMinTimeLeftInFrameForNonBatchedOperationMs(\n+      minTimeLeftInFrameForNonBatchedOperationMs: Int\n+  ): ReactInstanceManagerBuilder {\n+    this.minTimeLeftInFrameForNonBatchedOperationMs = minTimeLeftInFrameForNonBatchedOperationMs\n+    return this\n+  }\n+\n+  public fun setCustomPackagerCommandHandlers(\n+      customPackagerCommandHandlers: Map<String, RequestHandler>\n+  ): ReactInstanceManagerBuilder {\n+    this.customPackagerCommandHandlers = customPackagerCommandHandlers\n+    return this\n+  }\n+\n+  public fun setReactPackageTurboModuleManagerDelegateBuilder(\n+      builder: ReactPackageTurboModuleManagerDelegate.Builder?\n+  ): ReactInstanceManagerBuilder {\n+    tmmDelegateBuilder = builder\n+    return this\n+  }\n+\n+  public fun setChoreographerProvider(\n+      choreographerProvider: ChoreographerProvider?\n+  ): ReactInstanceManagerBuilder {\n+    this.choreographerProvider = choreographerProvider\n+    return this\n+  }\n+\n+  /**\n+   * Instantiates a new [ReactInstanceManager]. Before calling `build`, the following\n+   * must be called:\n+   *\n+   *  * [.setApplication]",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2135376123",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51884,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/ReactInstanceManagerBuilder.kt",
        "discussion_id": "2135376123",
        "commented_code": "@@ -0,0 +1,430 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react\n+\n+import android.app.Activity\n+import android.app.Application\n+import android.content.Context\n+import com.facebook.common.logging.FLog\n+import com.facebook.hermes.reactexecutor.HermesExecutor\n+import com.facebook.hermes.reactexecutor.HermesExecutorFactory\n+import com.facebook.infer.annotation.Assertions\n+import com.facebook.react.bridge.JSBundleLoader\n+import com.facebook.react.bridge.JSExceptionHandler\n+import com.facebook.react.bridge.JavaScriptExecutorFactory\n+import com.facebook.react.bridge.NotThreadSafeBridgeIdleDebugListener\n+import com.facebook.react.bridge.UIManagerProvider\n+import com.facebook.react.common.LifecycleState\n+import com.facebook.react.common.SurfaceDelegateFactory\n+import com.facebook.react.common.annotations.internal.LegacyArchitecture\n+import com.facebook.react.common.annotations.internal.LegacyArchitectureLogLevel\n+import com.facebook.react.common.annotations.internal.LegacyArchitectureLogger\n+import com.facebook.react.devsupport.DefaultDevSupportManagerFactory\n+import com.facebook.react.devsupport.DevSupportManagerFactory\n+import com.facebook.react.devsupport.interfaces.DevBundleDownloadListener\n+import com.facebook.react.devsupport.interfaces.DevLoadingViewManager\n+import com.facebook.react.devsupport.interfaces.DevSupportManager\n+import com.facebook.react.devsupport.interfaces.PausedInDebuggerOverlayManager\n+import com.facebook.react.devsupport.interfaces.RedBoxHandler\n+import com.facebook.react.internal.ChoreographerProvider\n+import com.facebook.react.jscexecutor.JSCExecutor\n+import com.facebook.react.jscexecutor.JSCExecutorFactory\n+import com.facebook.react.modules.core.DefaultHardwareBackBtnHandler\n+import com.facebook.react.modules.systeminfo.AndroidInfoHelpers\n+import com.facebook.react.packagerconnection.RequestHandler\n+import com.facebook.react.ReactInstanceManager.initializeSoLoaderIfNecessary\n+\n+/** Builder class for [ReactInstanceManager]. */\n+@LegacyArchitecture\n+public class ReactInstanceManagerBuilder {\n+  private val packages: MutableList<ReactPackage> = mutableListOf()\n+  private var jsBundleAssetUrl: String? = null\n+  private var jsBundleLoader: JSBundleLoader? = null\n+  private var jsMainModulePath: String? = null\n+  private var bridgeIdleDebugListener: NotThreadSafeBridgeIdleDebugListener? = null\n+  private var application: Application? = null\n+  private var useDeveloperSupport = false\n+  private var devSupportManagerFactory: DevSupportManagerFactory? = null\n+  private var requireActivity = false\n+  private var keepActivity = false\n+  private var initialLifecycleState: LifecycleState? = null\n+  private var jsExceptionHandler: JSExceptionHandler? = null\n+  private var currentActivity: Activity? = null\n+  private var defaultHardwareBackBtnHandler: DefaultHardwareBackBtnHandler? = null\n+  private var redBoxHandler: RedBoxHandler? = null\n+  private var lazyViewManagersEnabled = false\n+  private var devBundleDownloadListener: DevBundleDownloadListener? = null\n+  private var javaScriptExecutorFactory: JavaScriptExecutorFactory? = null\n+  private var minNumShakes = 1\n+  private var minTimeLeftInFrameForNonBatchedOperationMs = -1\n+  private var uiManagerProvider: UIManagerProvider? = null\n+  private var customPackagerCommandHandlers: Map<String, RequestHandler>? = null\n+  private var tmmDelegateBuilder: ReactPackageTurboModuleManagerDelegate.Builder? = null\n+  private var surfaceDelegateFactory: SurfaceDelegateFactory? = null\n+  private var devLoadingViewManager: DevLoadingViewManager? = null\n+  private var jsEngineResolutionAlgorithm: JSEngineResolutionAlgorithm? = null\n+  private var choreographerProvider: ChoreographerProvider? = null\n+  private var pausedInDebuggerOverlayManager: PausedInDebuggerOverlayManager? = null\n+\n+  /** Factory for desired implementation of JavaScriptExecutor. */\n+  public fun setJavaScriptExecutorFactory(\n+      javaScriptExecutorFactory: JavaScriptExecutorFactory?\n+  ): ReactInstanceManagerBuilder {\n+    this.javaScriptExecutorFactory = javaScriptExecutorFactory\n+    return this\n+  }\n+\n+  public fun setUIManagerProvider(uiManagerProvider: UIManagerProvider?): ReactInstanceManagerBuilder {\n+    this.uiManagerProvider = uiManagerProvider\n+    return this\n+  }\n+\n+  /**\n+   * Name of the JS bundle file to be loaded from application's raw assets.\n+   *\n+   * Example: `\"index.android.js\"`\n+   */\n+  public fun setBundleAssetName(bundleAssetName: String?): ReactInstanceManagerBuilder {\n+    jsBundleAssetUrl = (if (bundleAssetName == null) null else \"assets://$bundleAssetName\")\n+    jsBundleLoader = null\n+    return this\n+  }\n+\n+  /**\n+   * Path to the JS bundle file to be loaded from the file system.\n+   *\n+   * Example: `\"assets://index.android.js\"` or `\"/sdcard/main.jsbundle\"`\n+   */\n+  public fun setJSBundleFile(jsBundleFile: String): ReactInstanceManagerBuilder {\n+    if (jsBundleFile.startsWith(\"assets://\")) {\n+      jsBundleAssetUrl = jsBundleFile\n+      jsBundleLoader = null\n+      return this\n+    }\n+    return setJSBundleLoader(JSBundleLoader.createFileLoader(jsBundleFile))\n+  }\n+\n+  /**\n+   * Bundle loader to use when setting up JS environment. This supersedes prior invocations of\n+   * [.setJSBundleFile] and [.setBundleAssetName].\n+   *\n+   * Example: `JSBundleLoader.createFileLoader(application, bundleFile)`\n+   */\n+  public fun setJSBundleLoader(jsBundleLoader: JSBundleLoader): ReactInstanceManagerBuilder {\n+    this.jsBundleLoader = jsBundleLoader\n+    jsBundleAssetUrl = null\n+    return this\n+  }\n+\n+  /**\n+   * Sets the JS Engine to load as either Hermes or JSC. If not set, the default is JSC with a\n+   * Hermes fallback.\n+   */\n+  public fun setJSEngineResolutionAlgorithm(\n+      jsEngineResolutionAlgorithm: JSEngineResolutionAlgorithm?\n+  ): ReactInstanceManagerBuilder {\n+    this.jsEngineResolutionAlgorithm = jsEngineResolutionAlgorithm\n+    return this\n+  }\n+\n+  /**\n+   * Path to your app's main module on Metro. This is used when reloading JS during development. All\n+   * paths are relative to the root folder the packager is serving files from.\n+   * Examples: `\"index.android\"` or `\"subdirectory/index.android\"`\n+   */\n+  public fun setJSMainModulePath(jsMainModulePath: String): ReactInstanceManagerBuilder {\n+    this.jsMainModulePath = jsMainModulePath\n+    return this\n+  }\n+\n+  public fun addPackage(reactPackage: ReactPackage): ReactInstanceManagerBuilder {\n+    packages.add(reactPackage)\n+    return this\n+  }\n+\n+  public fun addPackages(reactPackages: List<ReactPackage>): ReactInstanceManagerBuilder {\n+    packages.addAll(reactPackages)\n+    return this\n+  }\n+\n+  public fun setBridgeIdleDebugListener(\n+      bridgeIdleDebugListener: NotThreadSafeBridgeIdleDebugListener\n+  ): ReactInstanceManagerBuilder {\n+    this.bridgeIdleDebugListener = bridgeIdleDebugListener\n+    return this\n+  }\n+\n+  /** Required. This must be your `Application` instance. */\n+  public fun setApplication(application: Application): ReactInstanceManagerBuilder {\n+    this.application = application\n+    return this\n+  }\n+\n+  public fun setCurrentActivity(activity: Activity): ReactInstanceManagerBuilder {\n+    currentActivity = activity\n+    return this\n+  }\n+\n+  public fun setDefaultHardwareBackBtnHandler(\n+      defaultHardwareBackBtnHandler: DefaultHardwareBackBtnHandler\n+  ): ReactInstanceManagerBuilder {\n+    this.defaultHardwareBackBtnHandler = defaultHardwareBackBtnHandler\n+    return this\n+  }\n+\n+  /**\n+   * When `true`, developer options such as JS reloading and debugging are enabled. Note you\n+   * still have to call [.showDevOptionsDialog] to show the dev menu, e.g. when the device\n+   * Menu button is pressed.\n+   */\n+  public fun setUseDeveloperSupport(useDeveloperSupport: Boolean): ReactInstanceManagerBuilder {\n+    this.useDeveloperSupport = useDeveloperSupport\n+    return this\n+  }\n+\n+  /**\n+   * Set the custom [DevSupportManagerFactory]. If not set, will use [DefaultDevSupportManagerFactory].\n+   */\n+  public fun setDevSupportManagerFactory(\n+      devSupportManagerFactory: DevSupportManagerFactory?\n+  ): ReactInstanceManagerBuilder {\n+    this.devSupportManagerFactory = devSupportManagerFactory\n+    return this\n+  }\n+\n+  /**\n+   * When `false`, indicates that correct usage of React Native will NOT involve an Activity.\n+   * For the vast majority of Android apps in the ecosystem, this will not need to change. Unless\n+   * you really know what you're doing, you should probably not change this!\n+   */\n+  public fun setRequireActivity(requireActivity: Boolean): ReactInstanceManagerBuilder {\n+    this.requireActivity = requireActivity\n+    return this\n+  }\n+\n+  public fun setKeepActivity(keepActivity: Boolean): ReactInstanceManagerBuilder {\n+    this.keepActivity = keepActivity\n+    return this\n+  }\n+\n+  /**\n+   * When the [SurfaceDelegateFactory] is provided, it will be used for native modules to get\n+   * a [SurfaceDelegate] to interact with the platform specific surface that they that needs\n+   * to be rendered in. For mobile platform this is default to be null so that these modules will\n+   * need to provide a default surface delegate. One example of such native module is [LogBoxModule],\n+   * which is rendered in mobile platform with [LogBoxDialog], while in VR platform with custom layer\n+   * provided by runtime.\n+   */\n+  public fun setSurfaceDelegateFactory(\n+      surfaceDelegateFactory: SurfaceDelegateFactory?\n+  ): ReactInstanceManagerBuilder {\n+    this.surfaceDelegateFactory = surfaceDelegateFactory\n+    return this\n+  }\n+\n+  /** Sets the Dev Loading View Manager. */\n+  public fun setDevLoadingViewManager(\n+      devLoadingViewManager: DevLoadingViewManager?\n+  ): ReactInstanceManagerBuilder {\n+    this.devLoadingViewManager = devLoadingViewManager\n+    return this\n+  }\n+\n+  public fun setPausedInDebuggerOverlayManager(\n+      pausedInDebuggerOverlayManager: PausedInDebuggerOverlayManager?\n+  ): ReactInstanceManagerBuilder {\n+    this.pausedInDebuggerOverlayManager = pausedInDebuggerOverlayManager\n+    return this\n+  }\n+\n+  /**\n+   * Sets the initial lifecycle state of the host. For example, if the host is already resumed at\n+   * creation time, we wouldn't expect an onResume call until we get an onPause call.\n+   */\n+  public fun setInitialLifecycleState(\n+      initialLifecycleState: LifecycleState\n+  ): ReactInstanceManagerBuilder {\n+    this.initialLifecycleState = initialLifecycleState\n+    return this\n+  }\n+\n+  /**\n+   * Set the exception handler for all native module calls. If not set, the default [DevSupportManager] will be used,\n+   * which shows a redbox in dev mode and rethrows (crashes the app) in prod mode.\n+   */\n+  public fun setJSExceptionHandler(handler: JSExceptionHandler?): ReactInstanceManagerBuilder {\n+    jsExceptionHandler = handler\n+    return this\n+  }\n+\n+  public fun setRedBoxHandler(redBoxHandler: RedBoxHandler?): ReactInstanceManagerBuilder {\n+    this.redBoxHandler = redBoxHandler\n+    return this\n+  }\n+\n+  public fun setLazyViewManagersEnabled(lazyViewManagersEnabled: Boolean): ReactInstanceManagerBuilder {\n+    this.lazyViewManagersEnabled = lazyViewManagersEnabled\n+    return this\n+  }\n+\n+  public fun setDevBundleDownloadListener(\n+      listener: DevBundleDownloadListener?\n+  ): ReactInstanceManagerBuilder {\n+    devBundleDownloadListener = listener\n+    return this\n+  }\n+\n+  public fun setMinNumShakes(minNumShakes: Int): ReactInstanceManagerBuilder {\n+    this.minNumShakes = minNumShakes\n+    return this\n+  }\n+\n+  public fun setMinTimeLeftInFrameForNonBatchedOperationMs(\n+      minTimeLeftInFrameForNonBatchedOperationMs: Int\n+  ): ReactInstanceManagerBuilder {\n+    this.minTimeLeftInFrameForNonBatchedOperationMs = minTimeLeftInFrameForNonBatchedOperationMs\n+    return this\n+  }\n+\n+  public fun setCustomPackagerCommandHandlers(\n+      customPackagerCommandHandlers: Map<String, RequestHandler>\n+  ): ReactInstanceManagerBuilder {\n+    this.customPackagerCommandHandlers = customPackagerCommandHandlers\n+    return this\n+  }\n+\n+  public fun setReactPackageTurboModuleManagerDelegateBuilder(\n+      builder: ReactPackageTurboModuleManagerDelegate.Builder?\n+  ): ReactInstanceManagerBuilder {\n+    tmmDelegateBuilder = builder\n+    return this\n+  }\n+\n+  public fun setChoreographerProvider(\n+      choreographerProvider: ChoreographerProvider?\n+  ): ReactInstanceManagerBuilder {\n+    this.choreographerProvider = choreographerProvider\n+    return this\n+  }\n+\n+  /**\n+   * Instantiates a new [ReactInstanceManager]. Before calling `build`, the following\n+   * must be called:\n+   *\n+   *  * [.setApplication]",
        "comment_created_at": "2025-06-09T09:27:27+00:00",
        "comment_author": "cortinico",
        "comment_body": "nit: I don't think KDoc wants a dot before the method name",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2031980678",
    "pr_number": 50536,
    "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/UiThreadUtil.kt",
    "created_at": "2025-04-07T20:43:25+00:00",
    "commented_code": "+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.bridge\n+\n+import android.os.Handler\n+import android.os.Looper\n+import com.facebook.react.common.build.ReactBuildConfig\n+ \n+/** Utility for interacting with the UI thread. */\n+public object UiThreadUtil {\n+ \n+    @Volatile private var sMainHandler: Handler? = null\n+ \n+    private val mainHandler: Handler\n+        get() {\n+             if (sMainHandler == null) {\n+                 synchronized(this) {\n+                     if (sMainHandler == null) {\n+                         sMainHandler = Handler(Looper.getMainLooper())\n+                     }\n+                 }\n+             }\n+             return sMainHandler!!\n+        }\n+ \n+    /** Exposed for Java interop (e.g. Java calls to `UiThreadUtil.getUiThreadHandler()`) */\n+    @JvmStatic\n+    public fun getUiThreadHandler(): Handler {\n+         return mainHandler\n+    }\n+ \n+    /** @return `true` if current thread is the UI thread. */\n+    @JvmStatic\n+    public fun isOnUiThread(): Boolean {\n+         return Looper.getMainLooper().thread == Thread.currentThread()\n+    }\n+ \n+    /**\n+      * Throws an {@link AssertionException} if the current thread is not the UI thread. This is a\n+      * noop in production, and is only meant to run in debug mode! If you need to check for\n+      * incorrect-thread issues in production, duplicate this code and call it elsewhere.\n+    */\n+    @JvmStatic\n+    public fun assertOnUiThread() {\n+         if (ReactBuildConfig.DEBUG) {\n+             SoftAssertions.assertCondition(isOnUiThread(), \"Expected to run on UI thread!\")\n+         }\n+    }\n+ \n+    /**\n+      * Throws an {@link AssertionException} if the current thread is the UI thread. This is a noop\n+      * in production, and is only meant to run in debug mode! If you need to check for\n+      * incorrect-thread issues in production, duplicate this code and call it elsewhere.\n+      */\n+    @JvmStatic\n+    public fun assertNotOnUiThread() {\n+         if (ReactBuildConfig.DEBUG) {\n+             SoftAssertions.assertCondition(!isOnUiThread(), \"Expected not to run on UI thread!\")\n+         }\n+    }\n+ \n+     /** Runs the given {@code Runnable} on the UI thread. */",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2031980678",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50536,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/UiThreadUtil.kt",
        "discussion_id": "2031980678",
        "commented_code": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.bridge\n+\n+import android.os.Handler\n+import android.os.Looper\n+import com.facebook.react.common.build.ReactBuildConfig\n+ \n+/** Utility for interacting with the UI thread. */\n+public object UiThreadUtil {\n+ \n+    @Volatile private var sMainHandler: Handler? = null\n+ \n+    private val mainHandler: Handler\n+        get() {\n+             if (sMainHandler == null) {\n+                 synchronized(this) {\n+                     if (sMainHandler == null) {\n+                         sMainHandler = Handler(Looper.getMainLooper())\n+                     }\n+                 }\n+             }\n+             return sMainHandler!!\n+        }\n+ \n+    /** Exposed for Java interop (e.g. Java calls to `UiThreadUtil.getUiThreadHandler()`) */\n+    @JvmStatic\n+    public fun getUiThreadHandler(): Handler {\n+         return mainHandler\n+    }\n+ \n+    /** @return `true` if current thread is the UI thread. */\n+    @JvmStatic\n+    public fun isOnUiThread(): Boolean {\n+         return Looper.getMainLooper().thread == Thread.currentThread()\n+    }\n+ \n+    /**\n+      * Throws an {@link AssertionException} if the current thread is not the UI thread. This is a\n+      * noop in production, and is only meant to run in debug mode! If you need to check for\n+      * incorrect-thread issues in production, duplicate this code and call it elsewhere.\n+    */\n+    @JvmStatic\n+    public fun assertOnUiThread() {\n+         if (ReactBuildConfig.DEBUG) {\n+             SoftAssertions.assertCondition(isOnUiThread(), \"Expected to run on UI thread!\")\n+         }\n+    }\n+ \n+    /**\n+      * Throws an {@link AssertionException} if the current thread is the UI thread. This is a noop\n+      * in production, and is only meant to run in debug mode! If you need to check for\n+      * incorrect-thread issues in production, duplicate this code and call it elsewhere.\n+      */\n+    @JvmStatic\n+    public fun assertNotOnUiThread() {\n+         if (ReactBuildConfig.DEBUG) {\n+             SoftAssertions.assertCondition(!isOnUiThread(), \"Expected not to run on UI thread!\")\n+         }\n+    }\n+ \n+     /** Runs the given {@code Runnable} on the UI thread. */",
        "comment_created_at": "2025-04-07T20:43:25+00:00",
        "comment_author": "mateoguzmana",
        "comment_body": "Could you use KDoc formatting instead of Javadoc formatting?\r\n\r\nE.g: \r\n\r\n```suggestion\r\n     /** Runs the given [Runnable] on the UI thread. */\r\n```\r\n\r\nSame for the others",
        "pr_file_module": null
      },
      {
        "comment_id": "2032034119",
        "repo_full_name": "facebook/react-native",
        "pr_number": 50536,
        "pr_file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/UiThreadUtil.kt",
        "discussion_id": "2031980678",
        "commented_code": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+package com.facebook.react.bridge\n+\n+import android.os.Handler\n+import android.os.Looper\n+import com.facebook.react.common.build.ReactBuildConfig\n+ \n+/** Utility for interacting with the UI thread. */\n+public object UiThreadUtil {\n+ \n+    @Volatile private var sMainHandler: Handler? = null\n+ \n+    private val mainHandler: Handler\n+        get() {\n+             if (sMainHandler == null) {\n+                 synchronized(this) {\n+                     if (sMainHandler == null) {\n+                         sMainHandler = Handler(Looper.getMainLooper())\n+                     }\n+                 }\n+             }\n+             return sMainHandler!!\n+        }\n+ \n+    /** Exposed for Java interop (e.g. Java calls to `UiThreadUtil.getUiThreadHandler()`) */\n+    @JvmStatic\n+    public fun getUiThreadHandler(): Handler {\n+         return mainHandler\n+    }\n+ \n+    /** @return `true` if current thread is the UI thread. */\n+    @JvmStatic\n+    public fun isOnUiThread(): Boolean {\n+         return Looper.getMainLooper().thread == Thread.currentThread()\n+    }\n+ \n+    /**\n+      * Throws an {@link AssertionException} if the current thread is not the UI thread. This is a\n+      * noop in production, and is only meant to run in debug mode! If you need to check for\n+      * incorrect-thread issues in production, duplicate this code and call it elsewhere.\n+    */\n+    @JvmStatic\n+    public fun assertOnUiThread() {\n+         if (ReactBuildConfig.DEBUG) {\n+             SoftAssertions.assertCondition(isOnUiThread(), \"Expected to run on UI thread!\")\n+         }\n+    }\n+ \n+    /**\n+      * Throws an {@link AssertionException} if the current thread is the UI thread. This is a noop\n+      * in production, and is only meant to run in debug mode! If you need to check for\n+      * incorrect-thread issues in production, duplicate this code and call it elsewhere.\n+      */\n+    @JvmStatic\n+    public fun assertNotOnUiThread() {\n+         if (ReactBuildConfig.DEBUG) {\n+             SoftAssertions.assertCondition(!isOnUiThread(), \"Expected not to run on UI thread!\")\n+         }\n+    }\n+ \n+     /** Runs the given {@code Runnable} on the UI thread. */",
        "comment_created_at": "2025-04-07T21:29:19+00:00",
        "comment_author": "riteshshukla04",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  }
]