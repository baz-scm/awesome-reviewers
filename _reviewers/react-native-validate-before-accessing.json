[
  {
    "discussion_id": "2077406106",
    "pr_number": 51103,
    "pr_file": "packages/react-native/ReactCommon/react/nativemodule/core/platform/ios/ReactCommon/RCTTurboModule.mm",
    "created_at": "2025-05-07T11:21:41+00:00",
    "commented_code": "// Message dispatch logic from old infra\n           id (*convert)(id, SEL, id) = (__typeof__(convert))objc_msgSend;\n           id convertedObjCArg = convert([RCTConvert class], rctConvertSelector, objCArg);\n+          \n+          if (objCArg == [NSNull null]) {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2077406106",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51103,
        "pr_file": "packages/react-native/ReactCommon/react/nativemodule/core/platform/ios/ReactCommon/RCTTurboModule.mm",
        "discussion_id": "2077406106",
        "commented_code": "@@ -639,6 +639,10 @@ TraceSection s(\n           // Message dispatch logic from old infra\n           id (*convert)(id, SEL, id) = (__typeof__(convert))objc_msgSend;\n           id convertedObjCArg = convert([RCTConvert class], rctConvertSelector, objCArg);\n+          \n+          if (objCArg == [NSNull null]) {",
        "comment_created_at": "2025-05-07T11:21:41+00:00",
        "comment_author": "javache",
        "comment_body": "Should this be looking at `convertedObjCArg` instead?",
        "pr_file_module": null
      },
      {
        "comment_id": "2077414221",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51103,
        "pr_file": "packages/react-native/ReactCommon/react/nativemodule/core/platform/ios/ReactCommon/RCTTurboModule.mm",
        "discussion_id": "2077406106",
        "commented_code": "@@ -639,6 +639,10 @@ TraceSection s(\n           // Message dispatch logic from old infra\n           id (*convert)(id, SEL, id) = (__typeof__(convert))objc_msgSend;\n           id convertedObjCArg = convert([RCTConvert class], rctConvertSelector, objCArg);\n+          \n+          if (objCArg == [NSNull null]) {",
        "comment_created_at": "2025-05-07T11:27:14+00:00",
        "comment_author": "zhongwuzw",
        "comment_body": "Actually I keep the same logic as `RCTInteropTurboModule`  : ) https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/core/platform/ios/ReactCommon/RCTInteropTurboModule.mm#L475-L483 .",
        "pr_file_module": null
      },
      {
        "comment_id": "2084828104",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51103,
        "pr_file": "packages/react-native/ReactCommon/react/nativemodule/core/platform/ios/ReactCommon/RCTTurboModule.mm",
        "discussion_id": "2077406106",
        "commented_code": "@@ -639,6 +639,10 @@ TraceSection s(\n           // Message dispatch logic from old infra\n           id (*convert)(id, SEL, id) = (__typeof__(convert))objc_msgSend;\n           id convertedObjCArg = convert([RCTConvert class], rctConvertSelector, objCArg);\n+          \n+          if (objCArg == [NSNull null]) {",
        "comment_created_at": "2025-05-12T14:33:26+00:00",
        "comment_author": "javache",
        "comment_body": "@zhongwuzw: that doesn't seem right. RCTInteropTurboModule looks at `arg`, which is the return value of the `RCTConvertTo` call (we should probably use that RCTConvertTo helper here too!) - so the equivalent would be to use `convertedObjCArg` here.",
        "pr_file_module": null
      },
      {
        "comment_id": "2085043772",
        "repo_full_name": "facebook/react-native",
        "pr_number": 51103,
        "pr_file": "packages/react-native/ReactCommon/react/nativemodule/core/platform/ios/ReactCommon/RCTTurboModule.mm",
        "discussion_id": "2077406106",
        "commented_code": "@@ -639,6 +639,10 @@ TraceSection s(\n           // Message dispatch logic from old infra\n           id (*convert)(id, SEL, id) = (__typeof__(convert))objc_msgSend;\n           id convertedObjCArg = convert([RCTConvert class], rctConvertSelector, objCArg);\n+          \n+          if (objCArg == [NSNull null]) {",
        "comment_created_at": "2025-05-12T16:26:57+00:00",
        "comment_author": "zhongwuzw",
        "comment_body": "Oops, you're right. \ud83d\udc4d  updated.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2092797517",
    "pr_number": 45425,
    "pr_file": "packages/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm",
    "created_at": "2025-05-16T10:33:48+00:00",
    "commented_code": "}\n }\n \n+- (void)textInputDidPaste:(NSString *)type withData:(NSString *)data\n+{\n+  if (_eventEmitter) {\n+    static_cast<const TextInputEventEmitter &>(*_eventEmitter).onPaste(std::string([type UTF8String]), std::string([data UTF8String]));\n+  }\n+}\n+",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "2092797517",
        "repo_full_name": "facebook/react-native",
        "pr_number": 45425,
        "pr_file": "packages/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm",
        "discussion_id": "2092797517",
        "commented_code": "@@ -432,6 +432,13 @@ - (void)textInputDidChangeSelection\n   }\n }\n \n+- (void)textInputDidPaste:(NSString *)type withData:(NSString *)data\n+{\n+  if (_eventEmitter) {\n+    static_cast<const TextInputEventEmitter &>(*_eventEmitter).onPaste(std::string([type UTF8String]), std::string([data UTF8String]));\n+  }\n+}\n+",
        "comment_created_at": "2025-05-16T10:33:48+00:00",
        "comment_author": "magrinj",
        "comment_body": "Well we used that patch in production and this part seems to cause crash:\r\n\r\nThe error:\r\n\r\n```\r\nApplication Specific Information:\r\ntextInputDidPaste:withData: >\r\nAttempted to dereference null pointer.\r\n\r\nThread 0 Crashed:\r\n0   libsystem_platform.dylib        0x41e872164         _platform_strlen\r\n1   LeChat                          0x202c4065c         std::__1::basic_string<T>::basic_string[abi:ne180100]<T>\r\n2   LeChat                          0x202b230c8         -[RCTTextInputComponentView textInputDidPaste:withData:]\r\n3   LeChat                          0x202b4e748         -[RCTBackedTextViewDelegateAdapter didPaste:withData:]\r\n4   LeChat                          0x202b5eb48         -[RCTUITextView paste:]\r\n```\r\n\r\nI've change that part to this, to try fix the bug, as I can't really reproduce it.\r\niOS is clearing the clipboard every 2 days or something like that, maybe it's related to that \ud83e\udd14\r\n\r\n```objective-c\r\n- (void)textInputDidPaste:(NSString *)type withData:(NSString *)data\r\n{\r\n  if (!_eventEmitter) {\r\n    return;\r\n  }\r\n\r\n  const char *typeCStr = [type isKindOfClass:[NSString class]] && type ? [type UTF8String] : \"\";\r\n  const char *dataCStr = [data isKindOfClass:[NSString class]] && data ? [data UTF8String] : \"\";\r\n  \r\n  static_cast<const TextInputEventEmitter &>(*_eventEmitter).onPaste(std::string(typeCStr), std::string(dataCStr));\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1901319439",
    "pr_number": 48410,
    "pr_file": "packages/react-native/ReactCommon/react/renderer/components/view/conversions.h",
    "created_at": "2025-01-02T22:34:21+00:00",
    "commented_code": "positionIt->second.hasType<Float>()) {\n               ColorStop colorStop;\n               colorStop.position = (Float)(positionIt->second);\n-              fromRawValue(context, colorIt->second, colorStop.color);\n+              if (colorIt->second.hasValue()) {",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1901319439",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48410,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/components/view/conversions.h",
        "discussion_id": "1901319439",
        "commented_code": "@@ -1331,7 +1331,13 @@ inline void fromRawValue(\n                 positionIt->second.hasType<Float>()) {\n               ColorStop colorStop;\n               colorStop.position = (Float)(positionIt->second);\n-              fromRawValue(context, colorIt->second, colorStop.color);\n+              if (colorIt->second.hasValue()) {",
        "comment_created_at": "2025-01-02T22:34:21+00:00",
        "comment_author": "joevilches",
        "comment_body": "what is the default value of the color in ColorStop? Will we be able to detect that this is a transition hint vs something like the color black?",
        "pr_file_module": null
      },
      {
        "comment_id": "1901572959",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48410,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/components/view/conversions.h",
        "discussion_id": "1901319439",
        "commented_code": "@@ -1331,7 +1331,13 @@ inline void fromRawValue(\n                 positionIt->second.hasType<Float>()) {\n               ColorStop colorStop;\n               colorStop.position = (Float)(positionIt->second);\n-              fromRawValue(context, colorIt->second, colorStop.color);\n+              if (colorIt->second.hasValue()) {",
        "comment_created_at": "2025-01-03T08:43:39+00:00",
        "comment_author": "intergalacticspacehighway",
        "comment_body": "here if JS color is `null`, that only happens if user passed transition hint. Then the color in ColorStop gets default SharedColor value i.e. `HostPlatformColor::UndefinedColor`. So for black color it should be alright!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1867702855",
    "pr_number": 48047,
    "pr_file": "packages/react-native/ReactCommon/react/renderer/core/RawValue.h",
    "created_at": "2024-12-03T13:14:28+00:00",
    "commented_code": "return true;\n   }\n \n+  template <typename T>\n+  static bool checkValueType(\n+      const jsi::Value& value,\n+      jsi::Runtime* runtime,\n+      std::unordered_map<std::string, T>* /*type*/) noexcept {\n+    if (!value.isObject()) {\n+      return false;\n+    }\n+\n+    jsi::Object asObject = value.asObject(*runtime);\n+\n+    if (asObject.isArray(*runtime)) {\n+      return false;\n+    }\n+\n+    auto propertyNames = asObject.getPropertyNames(*runtime);\n+    size_t size = propertyNames.size(*runtime);\n+    for (size_t i = 0; i < size; i++) {\n+      jsi::String propertyName =\n+          propertyNames.getValueAtIndex(*runtime, i).getString(*runtime);\n+      jsi::Value propertyValue = asObject.getProperty(*runtime, propertyName);\n+      if (!checkValueType(propertyValue, runtime, (T*)nullptr)) {\n+        return false;\n+      }\n+\n+      // Note: We test only one element.\n+      break;\n+    }\n+\n+    return true;\n+  }\n+\n   // Casts\n   static RawValue castValue(\n       const folly::dynamic& dynamic,\n       RawValue* /*type*/) noexcept {\n     return RawValue(dynamic);\n   }\n \n+  static RawValue castValue(\n+      const jsi::Value& value,\n+      jsi::Runtime* runtime,\n+      RawValue* /*type*/) noexcept {\n+    return RawValue(*runtime, value);\n+  }\n+\n   static bool castValue(const folly::dynamic& dynamic, bool* /*type*/) {\n     return dynamic.getBool();\n   }\n \n+  static bool\n+  castValue(const jsi::Value& value, jsi::Runtime* runtime, bool* /*type*/) {\n+    return value.asBool();\n+  }\n+\n   static int castValue(const folly::dynamic& dynamic, int* /*type*/) {\n     return static_cast<int>(dynamic.asInt());\n   }\n \n+  static int\n+  castValue(const jsi::Value& value, jsi::Runtime* runtime, int* /*type*/) {\n+    double number = value.asNumber();\n+    return static_cast<int>(number);\n+  }\n+\n   static int64_t castValue(const folly::dynamic& dynamic, int64_t* /*type*/) {\n     return dynamic.asInt();\n   }\n \n+  static int64_t\n+  castValue(const jsi::Value& value, jsi::Runtime* runtime, int64_t* /*type*/) {\n+    double number = value.asNumber();\n+    return static_cast<int64_t>(number);\n+  }\n+\n   static float castValue(const folly::dynamic& dynamic, float* /*type*/) {\n     return static_cast<float>(dynamic.asDouble());\n   }\n \n+  static float\n+  castValue(const jsi::Value& value, jsi::Runtime* runtime, float* /*type*/) {\n+    double number = value.asNumber();\n+    return static_cast<float>(number);\n+  }\n+\n   static double castValue(const folly::dynamic& dynamic, double* /*type*/) {\n     return dynamic.asDouble();\n   }\n \n+  static double\n+  castValue(const jsi::Value& value, jsi::Runtime* runtime, double* /*type*/) {\n+    return value.asNumber();\n+  }\n+\n   static std::string castValue(\n       const folly::dynamic& dynamic,\n       std::string* /*type*/) {\n     return dynamic.getString();\n   }\n \n+  static std::string castValue(\n+      const jsi::Value& value,\n+      jsi::Runtime* runtime,\n+      std::string* /*type*/) {\n+    jsi::String stringValue = value.getString(*runtime);",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1867702855",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48047,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/core/RawValue.h",
        "discussion_id": "1867702855",
        "commented_code": "@@ -204,39 +323,114 @@ class RawValue {\n     return true;\n   }\n \n+  template <typename T>\n+  static bool checkValueType(\n+      const jsi::Value& value,\n+      jsi::Runtime* runtime,\n+      std::unordered_map<std::string, T>* /*type*/) noexcept {\n+    if (!value.isObject()) {\n+      return false;\n+    }\n+\n+    jsi::Object asObject = value.asObject(*runtime);\n+\n+    if (asObject.isArray(*runtime)) {\n+      return false;\n+    }\n+\n+    auto propertyNames = asObject.getPropertyNames(*runtime);\n+    size_t size = propertyNames.size(*runtime);\n+    for (size_t i = 0; i < size; i++) {\n+      jsi::String propertyName =\n+          propertyNames.getValueAtIndex(*runtime, i).getString(*runtime);\n+      jsi::Value propertyValue = asObject.getProperty(*runtime, propertyName);\n+      if (!checkValueType(propertyValue, runtime, (T*)nullptr)) {\n+        return false;\n+      }\n+\n+      // Note: We test only one element.\n+      break;\n+    }\n+\n+    return true;\n+  }\n+\n   // Casts\n   static RawValue castValue(\n       const folly::dynamic& dynamic,\n       RawValue* /*type*/) noexcept {\n     return RawValue(dynamic);\n   }\n \n+  static RawValue castValue(\n+      const jsi::Value& value,\n+      jsi::Runtime* runtime,\n+      RawValue* /*type*/) noexcept {\n+    return RawValue(*runtime, value);\n+  }\n+\n   static bool castValue(const folly::dynamic& dynamic, bool* /*type*/) {\n     return dynamic.getBool();\n   }\n \n+  static bool\n+  castValue(const jsi::Value& value, jsi::Runtime* runtime, bool* /*type*/) {\n+    return value.asBool();\n+  }\n+\n   static int castValue(const folly::dynamic& dynamic, int* /*type*/) {\n     return static_cast<int>(dynamic.asInt());\n   }\n \n+  static int\n+  castValue(const jsi::Value& value, jsi::Runtime* runtime, int* /*type*/) {\n+    double number = value.asNumber();\n+    return static_cast<int>(number);\n+  }\n+\n   static int64_t castValue(const folly::dynamic& dynamic, int64_t* /*type*/) {\n     return dynamic.asInt();\n   }\n \n+  static int64_t\n+  castValue(const jsi::Value& value, jsi::Runtime* runtime, int64_t* /*type*/) {\n+    double number = value.asNumber();\n+    return static_cast<int64_t>(number);\n+  }\n+\n   static float castValue(const folly::dynamic& dynamic, float* /*type*/) {\n     return static_cast<float>(dynamic.asDouble());\n   }\n \n+  static float\n+  castValue(const jsi::Value& value, jsi::Runtime* runtime, float* /*type*/) {\n+    double number = value.asNumber();\n+    return static_cast<float>(number);\n+  }\n+\n   static double castValue(const folly::dynamic& dynamic, double* /*type*/) {\n     return dynamic.asDouble();\n   }\n \n+  static double\n+  castValue(const jsi::Value& value, jsi::Runtime* runtime, double* /*type*/) {\n+    return value.asNumber();\n+  }\n+\n   static std::string castValue(\n       const folly::dynamic& dynamic,\n       std::string* /*type*/) {\n     return dynamic.getString();\n   }\n \n+  static std::string castValue(\n+      const jsi::Value& value,\n+      jsi::Runtime* runtime,\n+      std::string* /*type*/) {\n+    jsi::String stringValue = value.getString(*runtime);",
        "comment_created_at": "2024-12-03T13:14:28+00:00",
        "comment_author": "mrousavy",
        "comment_body": "Do we want getString here? If value is not a string, it will assert/crash at runtime instead of throwing an error.\r\nIf we make sure that this value is a string before calling this func it is fine, otherwise asString is probably more appropriate.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1867704695",
    "pr_number": 48047,
    "pr_file": "packages/react-native/ReactCommon/react/renderer/core/RawValue.h",
    "created_at": "2024-12-03T13:15:47+00:00",
    "commented_code": "return result;\n   }\n \n+  template <typename T>\n+  static std::vector<T> castValue(\n+      const jsi::Value& value,\n+      jsi::Runtime* runtime,\n+      std::vector<T>* /*type*/) {\n+    react_native_assert(value.isObject());\n+    jsi::Object object = value.asObject(*runtime);\n+    react_native_assert(object.isArray(*runtime));\n+    auto array = object.asArray(*runtime);",
    "repo_full_name": "facebook/react-native",
    "discussion_comments": [
      {
        "comment_id": "1867704695",
        "repo_full_name": "facebook/react-native",
        "pr_number": 48047,
        "pr_file": "packages/react-native/ReactCommon/react/renderer/core/RawValue.h",
        "discussion_id": "1867704695",
        "commented_code": "@@ -250,6 +444,26 @@ class RawValue {\n     return result;\n   }\n \n+  template <typename T>\n+  static std::vector<T> castValue(\n+      const jsi::Value& value,\n+      jsi::Runtime* runtime,\n+      std::vector<T>* /*type*/) {\n+    react_native_assert(value.isObject());\n+    jsi::Object object = value.asObject(*runtime);\n+    react_native_assert(object.isArray(*runtime));\n+    auto array = object.asArray(*runtime);",
        "comment_created_at": "2024-12-03T13:15:47+00:00",
        "comment_author": "mrousavy",
        "comment_body": "why do we suddenly do asserts again? \r\n\r\nIf we assert before, we can use getObject and getArray again. \r\n\r\nAgain; `asT` checks even in release and throws exceptions if its the wrong type, `getT` only checks in debug and would read corrupt memory in release if it is not really a `T`.",
        "pr_file_module": null
      }
    ]
  }
]