[
  {
    "discussion_id": "2236820633",
    "pr_number": 14047,
    "pr_file": "packages/react-router/lib/dom/ssr/routeModules.ts",
    "created_at": "2025-07-28T14:52:57+00:00",
    "commented_code": "LoaderFunction | ClientLoaderFunction | unknown\n   > = Record<string, unknown>,\n > {\n+  /** @deprecated Use `loaderData` instead */",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2236820633",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 14047,
        "pr_file": "packages/react-router/lib/dom/ssr/routeModules.ts",
        "discussion_id": "2236820633",
        "commented_code": "@@ -160,11 +164,17 @@ export interface MetaArgs<\n     LoaderFunction | ClientLoaderFunction | unknown\n   > = Record<string, unknown>,\n > {\n+  /** @deprecated Use `loaderData` instead */",
        "comment_created_at": "2025-07-28T14:52:57+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "```suggestion\r\n  /** @deprecated Use `MetaArgs.loaderData` instead */\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2236824829",
    "pr_number": 14047,
    "pr_file": "packages/react-router/lib/router/utils.ts",
    "created_at": "2025-07-28T14:54:05+00:00",
    "commented_code": "* {@link https://reactrouter.com/start/framework/routing#dynamic-segments Dynamic route params} for the matched route.\n    **/\n   params: AgnosticRouteMatch[\"params\"];\n-  /** The return value from the matched route's loader or clientLoader */\n+  /**\n+   * The return value from the matched route's loader or clientLoader\n+   *\n+   * @deprecated Use `loaderData` instead",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2236824829",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 14047,
        "pr_file": "packages/react-router/lib/router/utils.ts",
        "discussion_id": "2236824829",
        "commented_code": "@@ -814,8 +814,14 @@ export interface UIMatch<Data = unknown, Handle = unknown> {\n    * {@link https://reactrouter.com/start/framework/routing#dynamic-segments Dynamic route params} for the matched route.\n    **/\n   params: AgnosticRouteMatch[\"params\"];\n-  /** The return value from the matched route's loader or clientLoader */\n+  /**\n+   * The return value from the matched route's loader or clientLoader\n+   *\n+   * @deprecated Use `loaderData` instead",
        "comment_created_at": "2025-07-28T14:54:05+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "```suggestion\r\n   * @deprecated Use `UIMatch.loaderData` instead\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2028852157",
    "pr_number": 13327,
    "pr_file": "packages/react-router-dev/typegen/index.ts",
    "created_at": "2025-04-04T13:49:31+00:00",
    "commented_code": "const virtual = ts`\n   declare module \"virtual:react-router/server-build\" {\n-    import { ServerBuild } from \"react-router\";\n+    import type { ServerBuild } from \"react-router\";    import { ServerBuild } from \"react-router\";",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2028852157",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13327,
        "pr_file": "packages/react-router-dev/typegen/index.ts",
        "discussion_id": "2028852157",
        "commented_code": "@@ -152,7 +152,7 @@ function register(ctx: Context) {\n \n const virtual = ts`\n   declare module \"virtual:react-router/server-build\" {\n-    import { ServerBuild } from \"react-router\";\n+    import type { ServerBuild } from \"react-router\";    import { ServerBuild } from \"react-router\";",
        "comment_created_at": "2025-04-04T13:49:31+00:00",
        "comment_author": "smorimoto",
        "comment_body": "```suggestion\r\n    import type { ServerBuild } from \"react-router\";\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1889305019",
    "pr_number": 12560,
    "pr_file": "packages/react-router/lib/dom/ssr/routeModules.ts",
    "created_at": "2024-12-17T22:22:27+00:00",
    "commented_code": "};\n \n /**\n- * ErrorBoundary to display for this route\n+ * Parameters passed to the [`headers`]{@link HeadersFunction} function\n  */\n-export type ErrorBoundaryComponent = ComponentType;\n+export type HeadersArgs = {\n+  loaderHeaders: Headers;\n+  parentHeaders: Headers;\n+  actionHeaders: Headers;\n+  errorHeaders: Headers | undefined;\n+};\n \n /**\n- * `<Route HydrateFallback>` component to render on initial loads\n- * when client loaders are present\n+ * A function that returns HTTP headers to be used for a route. These headers\n+ * will be merged with (and take precedence over) headers from parent routes.\n  */\n-export type HydrateFallbackComponent = ComponentType;\n+export interface HeadersFunction {\n+  (args: HeadersArgs): Headers | HeadersInit;\n+}",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1889305019",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12560,
        "pr_file": "packages/react-router/lib/dom/ssr/routeModules.ts",
        "discussion_id": "1889305019",
        "commented_code": "@@ -62,26 +125,30 @@ export type ClientLoaderFunctionArgs = LoaderFunctionArgs<undefined> & {\n };\n \n /**\n- * ErrorBoundary to display for this route\n+ * Parameters passed to the [`headers`]{@link HeadersFunction} function\n  */\n-export type ErrorBoundaryComponent = ComponentType;\n+export type HeadersArgs = {\n+  loaderHeaders: Headers;\n+  parentHeaders: Headers;\n+  actionHeaders: Headers;\n+  errorHeaders: Headers | undefined;\n+};\n \n /**\n- * `<Route HydrateFallback>` component to render on initial loads\n- * when client loaders are present\n+ * A function that returns HTTP headers to be used for a route. These headers\n+ * will be merged with (and take precedence over) headers from parent routes.\n  */\n-export type HydrateFallbackComponent = ComponentType;\n+export interface HeadersFunction {\n+  (args: HeadersArgs): Headers | HeadersInit;\n+}",
        "comment_created_at": "2024-12-17T22:22:27+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "This can be simplified to\r\n\r\n```suggestion\r\nexport type HeadersFunction  = (args: HeadersArgs) => Headers | HeadersInit;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1046207088",
    "pr_number": 9721,
    "pr_file": "packages/router/router.ts",
    "created_at": "2022-12-12T18:10:17+00:00",
    "commented_code": "};\n     }\n \n-    // Create a GET request for the loaders\n-    let loaderRequest = new Request(request.url, { signal: request.signal });\n+    // Create a request for the loaders\n+    let loaderRequest = new Request(request.url, {\n+      body: null,\n+      headers: request.headers,\n+      method: request.method,\n+      redirect: request.redirect,\n+      signal: request.signal,\n+    });",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1046207088",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 9721,
        "pr_file": "packages/router/router.ts",
        "discussion_id": "1046207088",
        "commented_code": "@@ -2256,8 +2256,14 @@ export function unstable_createStaticHandler(\n       };\n     }\n \n-    // Create a GET request for the loaders\n-    let loaderRequest = new Request(request.url, { signal: request.signal });\n+    // Create a request for the loaders\n+    let loaderRequest = new Request(request.url, {\n+      body: null,\n+      headers: request.headers,\n+      method: request.method,\n+      redirect: request.redirect,\n+      signal: request.signal,\n+    });",
        "comment_created_at": "2022-12-12T18:10:17+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Same as Remix was doing in 1.7.6: https://github.com/remix-run/remix/blob/remix%401.7.6/packages/remix-server-runtime/server.ts#L418",
        "pr_file_module": null
      },
      {
        "comment_id": "1047322323",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 9721,
        "pr_file": "packages/router/router.ts",
        "discussion_id": "1046207088",
        "commented_code": "@@ -2256,8 +2256,14 @@ export function unstable_createStaticHandler(\n       };\n     }\n \n-    // Create a GET request for the loaders\n-    let loaderRequest = new Request(request.url, { signal: request.signal });\n+    // Create a request for the loaders\n+    let loaderRequest = new Request(request.url, {\n+      body: null,\n+      headers: request.headers,\n+      method: request.method,\n+      redirect: request.redirect,\n+      signal: request.signal,\n+    });",
        "comment_created_at": "2022-12-13T15:32:27+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "For the moment we are not persisting `method:'POST'` as Remix did since we think that should be changed in Remix",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1638804995",
    "pr_number": 11631,
    "pr_file": "packages/react-router-dom/dom.ts",
    "created_at": "2024-06-13T19:57:40+00:00",
    "commented_code": "return _formDataSupportsSubmitter;\n }\n \n-export interface SubmitOptions {\n+export interface FetcherSubmitOptions {",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1638804995",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11631,
        "pr_file": "packages/react-router-dom/dom.ts",
        "discussion_id": "1638804995",
        "commented_code": "@@ -150,7 +150,7 @@ function isFormDataSubmitterSupported() {\n   return _formDataSupportsSubmitter;\n }\n \n-export interface SubmitOptions {\n+export interface FetcherSubmitOptions {",
        "comment_created_at": "2024-06-13T19:57:40+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Instead of directly definig these here, have a base private `SharedSubmitOptions` that can be extended.  That way it's not easy to add something fetcher-only and accidentally leak it to non-fetcher cases.  Do this for `FetcherFormProps` as well",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1492993655",
    "pr_number": 11098,
    "pr_file": "packages/router/router.ts",
    "created_at": "2024-02-16T21:17:11+00:00",
    "commented_code": "// we redirected to the exact same location we're currently at to avoid\n         // double back-buttons\n         replace =\n-          result.location === state.location.pathname + state.location.search;\n+          result.response.headers.get(\"Location\") ===\n+          state.location.pathname + state.location.search;",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1492993655",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11098,
        "pr_file": "packages/router/router.ts",
        "discussion_id": "1492993655",
        "commented_code": "@@ -1603,12 +1596,20 @@ export function createRouter(init: RouterInit): Router {\n         // we redirected to the exact same location we're currently at to avoid\n         // double back-buttons\n         replace =\n-          result.location === state.location.pathname + state.location.search;\n+          result.response.headers.get(\"Location\") ===\n+          state.location.pathname + state.location.search;",
        "comment_created_at": "2024-02-16T21:17:11+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "`RedirectResult`'s contain the raw response now, so just grab location from there",
        "pr_file_module": null
      },
      {
        "comment_id": "1493022627",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11098,
        "pr_file": "packages/router/router.ts",
        "discussion_id": "1492993655",
        "commented_code": "@@ -1603,12 +1596,20 @@ export function createRouter(init: RouterInit): Router {\n         // we redirected to the exact same location we're currently at to avoid\n         // double back-buttons\n         replace =\n-          result.location === state.location.pathname + state.location.search;\n+          result.response.headers.get(\"Location\") ===\n+          state.location.pathname + state.location.search;",
        "comment_created_at": "2024-02-16T22:01:02+00:00",
        "comment_author": "jacob-ebey",
        "comment_body": "Location could be a full URL to the same origin and should probably accounted for if that doesn't have a special existing meaning.",
        "pr_file_module": null
      },
      {
        "comment_id": "1493032891",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11098,
        "pr_file": "packages/router/router.ts",
        "discussion_id": "1492993655",
        "commented_code": "@@ -1603,12 +1596,20 @@ export function createRouter(init: RouterInit): Router {\n         // we redirected to the exact same location we're currently at to avoid\n         // double back-buttons\n         replace =\n-          result.location === state.location.pathname + state.location.search;\n+          result.response.headers.get(\"Location\") ===\n+          state.location.pathname + state.location.search;",
        "comment_created_at": "2024-02-16T22:17:42+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "good call - yeah I think previously we would have handled that on the value in `result.location` and reduced it to a root relative path but that's probably missed now.  We can move the logic into a util and leverage here - search for the code comment:\r\n\r\n```\r\n// Strip off the protocol+origin for same-origin + same-basename absolute redirects\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1518222584",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11098,
        "pr_file": "packages/router/router.ts",
        "discussion_id": "1492993655",
        "commented_code": "@@ -1603,12 +1596,20 @@ export function createRouter(init: RouterInit): Router {\n         // we redirected to the exact same location we're currently at to avoid\n         // double back-buttons\n         replace =\n-          result.location === state.location.pathname + state.location.search;\n+          result.response.headers.get(\"Location\") ===\n+          state.location.pathname + state.location.search;",
        "comment_created_at": "2024-03-08T19:44:04+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "\u2705 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1316384224",
    "pr_number": 10843,
    "pr_file": "packages/router/utils.ts",
    "created_at": "2023-09-05T20:40:16+00:00",
    "commented_code": "* Arguments passed to route loader/action functions.  Same for now but we keep\n  * this as a private implementation detail in case they diverge in the future.\n  */\n-interface DataFunctionArgs {\n+interface DataFunctionArgs<Context> {\n   request: Request;\n   params: Params;\n-  context?: any;\n+  context?: Context;\n }\n \n+// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n+//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n+\n /**\n  * Arguments passed to loader functions\n  */\n-export interface LoaderFunctionArgs extends DataFunctionArgs {}\n+export interface LoaderFunctionArgs<C = any> extends DataFunctionArgs<C> {}",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1316384224",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 10843,
        "pr_file": "packages/router/utils.ts",
        "discussion_id": "1316384224",
        "commented_code": "@@ -137,21 +137,24 @@ export type Submission =\n  * Arguments passed to route loader/action functions.  Same for now but we keep\n  * this as a private implementation detail in case they diverge in the future.\n  */\n-interface DataFunctionArgs {\n+interface DataFunctionArgs<Context> {\n   request: Request;\n   params: Params;\n-  context?: any;\n+  context?: Context;\n }\n \n+// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n+//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n+\n /**\n  * Arguments passed to loader functions\n  */\n-export interface LoaderFunctionArgs extends DataFunctionArgs {}\n+export interface LoaderFunctionArgs<C = any> extends DataFunctionArgs<C> {}",
        "comment_created_at": "2023-09-05T20:40:16+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "```suggestion\r\nexport interface LoaderFunctionArgs<Context = any> extends DataFunctionArgs<Context> {}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1316384371",
    "pr_number": 10843,
    "pr_file": "packages/router/utils.ts",
    "created_at": "2023-09-05T20:40:28+00:00",
    "commented_code": "* Arguments passed to route loader/action functions.  Same for now but we keep\n  * this as a private implementation detail in case they diverge in the future.\n  */\n-interface DataFunctionArgs {\n+interface DataFunctionArgs<Context> {\n   request: Request;\n   params: Params;\n-  context?: any;\n+  context?: Context;\n }\n \n+// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n+//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n+\n /**\n  * Arguments passed to loader functions\n  */\n-export interface LoaderFunctionArgs extends DataFunctionArgs {}\n+export interface LoaderFunctionArgs<C = any> extends DataFunctionArgs<C> {}\n \n /**\n  * Arguments passed to action functions\n  */\n-export interface ActionFunctionArgs extends DataFunctionArgs {}\n+export interface ActionFunctionArgs<C = any> extends DataFunctionArgs<C> {}",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1316384371",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 10843,
        "pr_file": "packages/router/utils.ts",
        "discussion_id": "1316384371",
        "commented_code": "@@ -137,21 +137,24 @@ export type Submission =\n  * Arguments passed to route loader/action functions.  Same for now but we keep\n  * this as a private implementation detail in case they diverge in the future.\n  */\n-interface DataFunctionArgs {\n+interface DataFunctionArgs<Context> {\n   request: Request;\n   params: Params;\n-  context?: any;\n+  context?: Context;\n }\n \n+// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n+//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n+\n /**\n  * Arguments passed to loader functions\n  */\n-export interface LoaderFunctionArgs extends DataFunctionArgs {}\n+export interface LoaderFunctionArgs<C = any> extends DataFunctionArgs<C> {}\n \n /**\n  * Arguments passed to action functions\n  */\n-export interface ActionFunctionArgs extends DataFunctionArgs {}\n+export interface ActionFunctionArgs<C = any> extends DataFunctionArgs<C> {}",
        "comment_created_at": "2023-09-05T20:40:28+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "```suggestion\r\nexport interface ActionFunctionArgs<Context = any> extends DataFunctionArgs<Context> {}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1316384561",
    "pr_number": 10843,
    "pr_file": "packages/router/utils.ts",
    "created_at": "2023-09-05T20:40:42+00:00",
    "commented_code": "/**\n  * Route loader function signature\n  */\n-export interface LoaderFunction {\n-  (args: LoaderFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n+export interface LoaderFunction<C = any> {\n+  (args: LoaderFunctionArgs<C>): Promise<DataFunctionValue> | DataFunctionValue;",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1316384561",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 10843,
        "pr_file": "packages/router/utils.ts",
        "discussion_id": "1316384561",
        "commented_code": "@@ -163,15 +166,15 @@ type DataFunctionValue = Response | NonNullable<unknown> | null;\n /**\n  * Route loader function signature\n  */\n-export interface LoaderFunction {\n-  (args: LoaderFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n+export interface LoaderFunction<C = any> {\n+  (args: LoaderFunctionArgs<C>): Promise<DataFunctionValue> | DataFunctionValue;",
        "comment_created_at": "2023-09-05T20:40:42+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "```suggestion\r\nexport interface LoaderFunction<Context = any> {\r\n  (args: LoaderFunctionArgs<Context>): Promise<DataFunctionValue> | DataFunctionValue;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1316384707",
    "pr_number": 10843,
    "pr_file": "packages/router/utils.ts",
    "created_at": "2023-09-05T20:40:53+00:00",
    "commented_code": "/**\n  * Route loader function signature\n  */\n-export interface LoaderFunction {\n-  (args: LoaderFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n+export interface LoaderFunction<C = any> {\n+  (args: LoaderFunctionArgs<C>): Promise<DataFunctionValue> | DataFunctionValue;\n }\n \n /**\n  * Route action function signature\n  */\n-export interface ActionFunction {\n-  (args: ActionFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n+export interface ActionFunction<C = any> {\n+  (args: ActionFunctionArgs<C>): Promise<DataFunctionValue> | DataFunctionValue;",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1316384707",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 10843,
        "pr_file": "packages/router/utils.ts",
        "discussion_id": "1316384707",
        "commented_code": "@@ -163,15 +166,15 @@ type DataFunctionValue = Response | NonNullable<unknown> | null;\n /**\n  * Route loader function signature\n  */\n-export interface LoaderFunction {\n-  (args: LoaderFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n+export interface LoaderFunction<C = any> {\n+  (args: LoaderFunctionArgs<C>): Promise<DataFunctionValue> | DataFunctionValue;\n }\n \n /**\n  * Route action function signature\n  */\n-export interface ActionFunction {\n-  (args: ActionFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n+export interface ActionFunction<C = any> {\n+  (args: ActionFunctionArgs<C>): Promise<DataFunctionValue> | DataFunctionValue;",
        "comment_created_at": "2023-09-05T20:40:53+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "```suggestion\r\nexport interface ActionFunction<Context = any> {\r\n  (args: ActionFunctionArgs<Context>): Promise<DataFunctionValue> | DataFunctionValue;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1267300692",
    "pr_number": 10705,
    "pr_file": "packages/router/utils.ts",
    "created_at": "2023-07-18T20:59:23+00:00",
    "commented_code": "});\n };\n \n+/**\n+ * A redirect response with a forced document reload. Sets a custom header to\n+ * trigger the client-side reload.\n+ * Defaults to \"302 Found\".\n+ */\n+export const redirectWithReload: RedirectFunction = (url, init = 302) => {\n+  let responseInit = init;\n+  if (typeof responseInit === \"number\") {\n+    responseInit = { status: responseInit };\n+  }\n+\n+  responseInit.headers = new Headers(responseInit.headers);\n+  responseInit.headers.set(\"X-Remix-Reload-Document\", \"true\");\n+\n+  return redirect(url, responseInit);\n+};",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1267300692",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 10705,
        "pr_file": "packages/router/utils.ts",
        "discussion_id": "1267300692",
        "commented_code": "@@ -1484,6 +1485,23 @@ export const redirect: RedirectFunction = (url, init = 302) => {\n   });\n };\n \n+/**\n+ * A redirect response with a forced document reload. Sets a custom header to\n+ * trigger the client-side reload.\n+ * Defaults to \"302 Found\".\n+ */\n+export const redirectWithReload: RedirectFunction = (url, init = 302) => {\n+  let responseInit = init;\n+  if (typeof responseInit === \"number\") {\n+    responseInit = { status: responseInit };\n+  }\n+\n+  responseInit.headers = new Headers(responseInit.headers);\n+  responseInit.headers.set(\"X-Remix-Reload-Document\", \"true\");\n+\n+  return redirect(url, responseInit);\n+};",
        "comment_created_at": "2023-07-18T20:59:23+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Could we build this around `redirect`?\r\n\r\n```suggestion\r\nexport const redirectWithReload: RedirectFunction = (url, init) => {\r\n  let response = redirect(url, init);\r\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\r\n  return response;\r\n};\r\n```",
        "pr_file_module": null
      }
    ]
  }
]