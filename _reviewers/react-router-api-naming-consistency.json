[
  {
    "discussion_id": "2236871830",
    "pr_number": 14047,
    "pr_file": ".changeset/rare-pears-walk.md",
    "created_at": "2025-07-28T15:05:27+00:00",
    "commented_code": "+---\n+\"react-router\": minor\n+---\n+\n+Add `loaderData` and deprecate `data` where possible",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2236871830",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 14047,
        "pr_file": ".changeset/rare-pears-walk.md",
        "discussion_id": "2236871830",
        "commented_code": "@@ -0,0 +1,5 @@\n+---\n+\"react-router\": minor\n+---\n+\n+Add `loaderData` and deprecate `data` where possible",
        "comment_created_at": "2025-07-28T15:05:27+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "```suggestion\r\nAdd `loaderData` arguments/properties alongside existing `data` arguments/properties to provide consistency and clarity between `loaderData` and `actionData` across the board\r\n - Updated types: `Route.MetaArgs`, `Route.MetaMatch`, `MetaArgs`, `MetaMatch`, `Route.ComponentProps.matches`, `UIMatch`\r\n - `@deprecated` warnings have been added to the existing `data` properties to point users to new `loaderData` properties, in preparation for removing the `data` properties in a future major release\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2191006063",
    "pr_number": 13947,
    "pr_file": "docs/api/rsc/matchRSCServerRequest.md",
    "created_at": "2025-07-07T21:01:36+00:00",
    "commented_code": "Matches the given routes to a Request and returns a RSC Response encoding an `RSCPayload` for consumption by a RSC enabled client router.\n \n+The usage of this may differ slightly based on your bundler choice. Here's how it's used with Parcel via `react-server-dom-parcel/server.edge`:\n+\n+```tsx filename=entry.rsc.ts lines=[10,17-33]\n+\"use server-entry\";\n+\n+import {\n+  createTemporaryReferenceSet,\n+  decodeAction,\n+  decodeReply,\n+  loadServerAction,\n+  renderToReadableStream,\n+} from \"react-server-dom-parcel/server.edge\";\n+import { unstable_matchRSCServerRequest as matchRSCServerRequest } from \"react-router\";\n+\n+import { routes } from \"./routes\";\n+\n+import \"./entry.browser.tsx\";\n+\n+export function fetchServer(request: Request) {\n+  return matchRSCServerRequest({\n+    createTemporaryReferenceSet,\n+    decodeReply,\n+    decodeAction,\n+    loadServerAction,\n+    request,\n+    routes,",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2191006063",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13947,
        "pr_file": "docs/api/rsc/matchRSCServerRequest.md",
        "discussion_id": "2191006063",
        "commented_code": "@@ -11,6 +11,45 @@ unstable: true\n \n Matches the given routes to a Request and returns a RSC Response encoding an `RSCPayload` for consumption by a RSC enabled client router.\n \n+The usage of this may differ slightly based on your bundler choice. Here's how it's used with Parcel via `react-server-dom-parcel/server.edge`:\n+\n+```tsx filename=entry.rsc.ts lines=[10,17-33]\n+\"use server-entry\";\n+\n+import {\n+  createTemporaryReferenceSet,\n+  decodeAction,\n+  decodeReply,\n+  loadServerAction,\n+  renderToReadableStream,\n+} from \"react-server-dom-parcel/server.edge\";\n+import { unstable_matchRSCServerRequest as matchRSCServerRequest } from \"react-router\";\n+\n+import { routes } from \"./routes\";\n+\n+import \"./entry.browser.tsx\";\n+\n+export function fetchServer(request: Request) {\n+  return matchRSCServerRequest({\n+    createTemporaryReferenceSet,\n+    decodeReply,\n+    decodeAction,\n+    loadServerAction,\n+    request,\n+    routes,",
        "comment_created_at": "2025-07-07T21:01:36+00:00",
        "comment_author": "brookslybrand",
        "comment_body": "Based on the [template](https://github.com/remix-run/react-router-templates/pull/139/files#diff-b77a93d26634b4a143ea18977a4bfc7a9afc3566c43a33c156cdee0b48fad655R28) I think we should encourage this to be a function, specifically because parcel seems to need it to [magically attach `bootstrapScript`](https://github.com/remix-run/react-router-templates/pull/139/files#diff-b77a93d26634b4a143ea18977a4bfc7a9afc3566c43a33c156cdee0b48fad655R64)\n\n```suggestion\n    routes: routes(),\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2192660857",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13947,
        "pr_file": "docs/api/rsc/matchRSCServerRequest.md",
        "discussion_id": "2191006063",
        "commented_code": "@@ -11,6 +11,45 @@ unstable: true\n \n Matches the given routes to a Request and returns a RSC Response encoding an `RSCPayload` for consumption by a RSC enabled client router.\n \n+The usage of this may differ slightly based on your bundler choice. Here's how it's used with Parcel via `react-server-dom-parcel/server.edge`:\n+\n+```tsx filename=entry.rsc.ts lines=[10,17-33]\n+\"use server-entry\";\n+\n+import {\n+  createTemporaryReferenceSet,\n+  decodeAction,\n+  decodeReply,\n+  loadServerAction,\n+  renderToReadableStream,\n+} from \"react-server-dom-parcel/server.edge\";\n+import { unstable_matchRSCServerRequest as matchRSCServerRequest } from \"react-router\";\n+\n+import { routes } from \"./routes\";\n+\n+import \"./entry.browser.tsx\";\n+\n+export function fetchServer(request: Request) {\n+  return matchRSCServerRequest({\n+    createTemporaryReferenceSet,\n+    decodeReply,\n+    decodeAction,\n+    loadServerAction,\n+    request,\n+    routes,",
        "comment_created_at": "2025-07-08T14:17:48+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "lol yeah I should have probably grabbed my examples from those templates and not the playgrounds in our repo.  I'll merge this change and also go through and see if there's other stuff I should be bringing over too",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2138558602",
    "pr_number": 13778,
    "pr_file": ".changeset/sharp-yaks-bathe.md",
    "created_at": "2025-06-10T18:41:43+00:00",
    "commented_code": "+---\n+\"@react-router/cloudflare\": minor\n+---\n+\n+Allow prefix on createWorkersKVSessionStorage",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2138558602",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13778,
        "pr_file": ".changeset/sharp-yaks-bathe.md",
        "discussion_id": "2138558602",
        "commented_code": "@@ -0,0 +1,5 @@\n+---\n+\"@react-router/cloudflare\": minor\n+---\n+\n+Allow prefix on createWorkersKVSessionStorage",
        "comment_created_at": "2025-06-10T18:41:43+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "```suggestion\r\nAllow `prefix` on `createWorkersKVSessionStorage`\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2121986492",
    "pr_number": 13725,
    "pr_file": ".changeset/witty-buttons-shake.md",
    "created_at": "2025-06-02T19:27:58+00:00",
    "commented_code": "+---\n+\"@react-router/dev\": patch\n+---\n+\n+Fix href types for optional dynamic params\n+\n+7.6.1 introduced fixes for `href` when using optional static segments,\n+but those fixes caused regressions with how optional dynamic params worked in 7.6.0:\n+\n+```ts\n+// 7.6.0\n+href(\"/users/:id?\"); // \u2705\n+href(\"/users/:id?\", { id: 1 }); // \u2705\n+\n+// 7.6.1\n+href(\"/users/:id?\"); // \u274c\n+href(\"/users/:id?\", { id: 1 }); // \u274c\n+```\n+\n+Now, optional static segments are expanded into different paths for `href`, but optional dynamic params are not.\n+This way `href` can unambiguously refer to an exact URL path, all while keeping the number of path options to a minimum.\n+\n+```ts\n+// 7.6.2\n+\n+// path: /users/:id?/edit?\n+href(\"\n+//    ^ suggestions when cursor is here:\n+//\n+//    /users/:id?\n+//    /users/:id?/edit\n+```\n+\n+Additionally, you can pass `params` from component props without needing to narrow them manually:\n+\n+```ts\n+declare const params: { id?: number };\n+\n+// 7.6.0\n+href(\"/users/:id?\", params);\n+\n+// 7.6.1\n+href(\"/users/:id?\", params); // \u274c\n+\"id\" in params ? href(\"/users/:id\", params) : href(\"/users\"); // works... but is annoying\n+\n+// 7.6.2\n+href(\"/users/:id?\", params); // restores convenience of 7.6.0",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2121986492",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13725,
        "pr_file": ".changeset/witty-buttons-shake.md",
        "discussion_id": "2121986492",
        "commented_code": "@@ -0,0 +1,48 @@\n+---\n+\"@react-router/dev\": patch\n+---\n+\n+Fix href types for optional dynamic params\n+\n+7.6.1 introduced fixes for `href` when using optional static segments,\n+but those fixes caused regressions with how optional dynamic params worked in 7.6.0:\n+\n+```ts\n+// 7.6.0\n+href(\"/users/:id?\"); // \u2705\n+href(\"/users/:id?\", { id: 1 }); // \u2705\n+\n+// 7.6.1\n+href(\"/users/:id?\"); // \u274c\n+href(\"/users/:id?\", { id: 1 }); // \u274c\n+```\n+\n+Now, optional static segments are expanded into different paths for `href`, but optional dynamic params are not.\n+This way `href` can unambiguously refer to an exact URL path, all while keeping the number of path options to a minimum.\n+\n+```ts\n+// 7.6.2\n+\n+// path: /users/:id?/edit?\n+href(\"\n+//    ^ suggestions when cursor is here:\n+//\n+//    /users/:id?\n+//    /users/:id?/edit\n+```\n+\n+Additionally, you can pass `params` from component props without needing to narrow them manually:\n+\n+```ts\n+declare const params: { id?: number };\n+\n+// 7.6.0\n+href(\"/users/:id?\", params);\n+\n+// 7.6.1\n+href(\"/users/:id?\", params); // \u274c\n+\"id\" in params ? href(\"/users/:id\", params) : href(\"/users\"); // works... but is annoying\n+\n+// 7.6.2\n+href(\"/users/:id?\", params); // restores convenience of 7.6.0",
        "comment_created_at": "2025-06-02T19:27:58+00:00",
        "comment_author": "brookslybrand",
        "comment_body": "```suggestion\r\nhref(\"/users/:id?\", params); // restores behavior of 7.6.0\r\n```\r\n\r\nit's more than just a convenience, I think \"behavior\" emphasizing that this is a \"breaking fix\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1805389020",
    "pr_number": 11750,
    "pr_file": ".changeset/ninety-queens-thank.md",
    "created_at": "2024-10-17T20:28:11+00:00",
    "commented_code": "+---\n+\"react-router-dom\": minor\n+\"react-router\": minor\n+---\n+\n+Log deprecation warnings for v7 flags",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1805389020",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11750,
        "pr_file": ".changeset/ninety-queens-thank.md",
        "discussion_id": "1805389020",
        "commented_code": "@@ -0,0 +1,6 @@\n+---\n+\"react-router-dom\": minor\n+\"react-router\": minor\n+---\n+\n+Log deprecation warnings for v7 flags",
        "comment_created_at": "2024-10-17T20:28:11+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "```suggestion\r\n- Log deprecation warnings for v7 flags\r\n- Add deprecation warnings to `json`/`defer` in favor of returning raw objects\r\n  - These methods will be removed in React Router v7\r\n```\r\n\r\n",
        "pr_file_module": null
      }
    ]
  }
]