[
  {
    "discussion_id": "1952620029",
    "pr_number": 12994,
    "pr_file": "packages/react-router/lib/href.ts",
    "created_at": "2025-02-12T13:12:30+00:00",
    "commented_code": "+import type { Register } from \"./types/register\";\n+import type { Equal } from \"./types/utils\";\n+\n+type AnyParams = Record<string, Record<string, string | undefined>>;\n+type Params = Register extends {\n+  params: infer RegisteredParams extends AnyParams;\n+}\n+  ? RegisteredParams\n+  : AnyParams;\n+\n+type Args = { [K in keyof Params]: ToArgs<Params[K]> };\n+\n+// prettier-ignore\n+type ToArgs<T> =\n+  // path without params -> no `params` arg\n+  Equal<T, {}> extends true ? [] :\n+  // path with only optional params -> optional `params` arg\n+  Partial<T> extends T ? [T] | [] :\n+  // otherwise, require `params` arg\n+  [T];\n+\n+/**\n+  Returns a resolved URL path for the specified route.\n+\n+  ```tsx\n+  const h = href(\"/:lang?/about\", { lang: \"en\" })\n+  // -> `/en/about`\n+\n+  <Link to={href(\"/products/:id\", { id: \"abc123\" })} />\n+  ```\n+ */\n+export function href<Path extends keyof Args>(\n+  path: Path,\n+  ...args: Args[Path]\n+): string {\n+  let params = args[0];\n+  return path\n+    .split(\"/\")\n+    .map((segment) => {\n+      const match = segment.match(/^:([\\w-]+)(\\?)?/);",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1952620029",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12994,
        "pr_file": "packages/react-router/lib/href.ts",
        "discussion_id": "1952620029",
        "commented_code": "@@ -0,0 +1,55 @@\n+import type { Register } from \"./types/register\";\n+import type { Equal } from \"./types/utils\";\n+\n+type AnyParams = Record<string, Record<string, string | undefined>>;\n+type Params = Register extends {\n+  params: infer RegisteredParams extends AnyParams;\n+}\n+  ? RegisteredParams\n+  : AnyParams;\n+\n+type Args = { [K in keyof Params]: ToArgs<Params[K]> };\n+\n+// prettier-ignore\n+type ToArgs<T> =\n+  // path without params -> no `params` arg\n+  Equal<T, {}> extends true ? [] :\n+  // path with only optional params -> optional `params` arg\n+  Partial<T> extends T ? [T] | [] :\n+  // otherwise, require `params` arg\n+  [T];\n+\n+/**\n+  Returns a resolved URL path for the specified route.\n+\n+  ```tsx\n+  const h = href(\"/:lang?/about\", { lang: \"en\" })\n+  // -> `/en/about`\n+\n+  <Link to={href(\"/products/:id\", { id: \"abc123\" })} />\n+  ```\n+ */\n+export function href<Path extends keyof Args>(\n+  path: Path,\n+  ...args: Args[Path]\n+): string {\n+  let params = args[0];\n+  return path\n+    .split(\"/\")\n+    .map((segment) => {\n+      const match = segment.match(/^:([\\w-]+)(\\?)?/);",
        "comment_created_at": "2025-02-12T13:12:30+00:00",
        "comment_author": "hilja",
        "comment_body": "Nit, but this regex could be cached outside the loop.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1715578255",
    "pr_number": 11883,
    "pr_file": "packages/router/router.ts",
    "created_at": "2024-08-13T16:18:58+00:00",
    "commented_code": "let unlistenHistory: (() => void) | null = null;\n   // Externally-provided functions to call on all state changes\n   let subscribers = new Set<RouterSubscriber>();\n+  // FIFO queue of previously discovered routes to prevent re-calling on\n+  // subsequent navigations to the same path\n+  let discoveredRoutesMaxSize = 1000;\n+  let discoveredRoutes = new Set<string>();",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1715578255",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11883,
        "pr_file": "packages/router/router.ts",
        "discussion_id": "1715578255",
        "commented_code": "@@ -814,6 +814,10 @@ export function createRouter(init: RouterInit): Router {\n   let unlistenHistory: (() => void) | null = null;\n   // Externally-provided functions to call on all state changes\n   let subscribers = new Set<RouterSubscriber>();\n+  // FIFO queue of previously discovered routes to prevent re-calling on\n+  // subsequent navigations to the same path\n+  let discoveredRoutesMaxSize = 1000;\n+  let discoveredRoutes = new Set<string>();",
        "comment_created_at": "2024-08-13T16:18:58+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Track up to 1000 paths (fifo) internally to avoid re-calling `patchRoutesOnMiss` on subsequent navigations to the same path",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1783835918",
    "pr_number": 12056,
    "pr_file": "packages/react-router-dev/vite/route-chunks.ts",
    "created_at": "2024-10-02T04:48:31+00:00",
    "commented_code": "}\n       }\n \n-      // Loop through all other exports to see if they have imported identifiers\n-      // in common with the export we're trying to chunk.\n-      if (dependencies.importedIdentifierNames.size > 0) {\n-        for (let [\n-          currentExportName,\n-          currentDependencies,\n-        ] of exportDependencies) {\n-          if (currentExportName === exportName) {\n-            continue;\n-          }\n-\n-          // As soon as we find any imported identifiers in common with another\n-          // export, we know this export cannot be placed in its own chunk. Note\n-          // that the chunk can still share top level import statements with\n-          // other exports because we filter out all unused imports, so we can\n-          // treat each imported identifier as a separate entity in this check.\n-          if (\n-            setsIntersect(\n-              currentDependencies.importedIdentifierNames,\n-              dependencies.importedIdentifierNames\n-            )\n-          ) {\n-            return false;\n-          }\n-        }\n+      // If the export we're trying to chunk depends on more than one exported\n+      // variable declarator (where one of them might be the chunked export\n+      // itself), it means it must depend on other exports and can't be chunked,\n+      // so we can bail out early before comparing against other exports.\n+      if (dependencies.exportedVariableDeclarators.size > 1) {",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1783835918",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12056,
        "pr_file": "packages/react-router-dev/vite/route-chunks.ts",
        "discussion_id": "1783835918",
        "commented_code": "@@ -498,35 +494,16 @@ export function hasChunkableExport(\n         }\n       }\n \n-      // Loop through all other exports to see if they have imported identifiers\n-      // in common with the export we're trying to chunk.\n-      if (dependencies.importedIdentifierNames.size > 0) {\n-        for (let [\n-          currentExportName,\n-          currentDependencies,\n-        ] of exportDependencies) {\n-          if (currentExportName === exportName) {\n-            continue;\n-          }\n-\n-          // As soon as we find any imported identifiers in common with another\n-          // export, we know this export cannot be placed in its own chunk. Note\n-          // that the chunk can still share top level import statements with\n-          // other exports because we filter out all unused imports, so we can\n-          // treat each imported identifier as a separate entity in this check.\n-          if (\n-            setsIntersect(\n-              currentDependencies.importedIdentifierNames,\n-              dependencies.importedIdentifierNames\n-            )\n-          ) {\n-            return false;\n-          }\n-        }\n+      // If the export we're trying to chunk depends on more than one exported\n+      // variable declarator (where one of them might be the chunked export\n+      // itself), it means it must depend on other exports and can't be chunked,\n+      // so we can bail out early before comparing against other exports.\n+      if (dependencies.exportedVariableDeclarators.size > 1) {",
        "comment_created_at": "2024-10-02T04:48:31+00:00",
        "comment_author": "markdalgleish",
        "comment_body": "While looking at imports and exports with fresh eyes, I also realised there's room for an early bail out here.",
        "pr_file_module": null
      }
    ]
  }
]