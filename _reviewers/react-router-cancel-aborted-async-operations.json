[
  {
    "discussion_id": "1658869042",
    "pr_number": 11744,
    "pr_file": "packages/react-router/lib/router/router.ts",
    "created_at": "2024-06-28T14:46:25+00:00",
    "commented_code": "pendingActionResult\n     );\n \n-    // Cancel pending deferreds for no-longer-matched routes or routes we're\n-    // about to reload.  Note that if this is an action reload we would have\n-    // already cancelled all pending deferreds so this would be a no-op\n-    cancelActiveDeferreds(\n-      (routeId) =>\n-        !(matches && matches.some((m) => m.route.id === routeId)) ||\n-        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n-    );",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1658869042",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11744,
        "pr_file": "packages/react-router/lib/router/router.ts",
        "discussion_id": "1658869042",
        "commented_code": "@@ -1933,15 +1906,6 @@ export function createRouter(init: RouterInit): Router {\n       pendingActionResult\n     );\n \n-    // Cancel pending deferreds for no-longer-matched routes or routes we're\n-    // about to reload.  Note that if this is an action reload we would have\n-    // already cancelled all pending deferreds so this would be a no-op\n-    cancelActiveDeferreds(\n-      (routeId) =>\n-        !(matches && matches.some((m) => m.route.id === routeId)) ||\n-        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n-    );",
        "comment_created_at": "2024-06-28T14:46:25+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "It will be up to users to abort their own promises going forward",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1295076797",
    "pr_number": 10792,
    "pr_file": "packages/router/router.ts",
    "created_at": "2023-08-15T20:27:44+00:00",
    "commented_code": "let abortPromise = new Promise((_, r) => (reject = r));\n     onReject = () => reject();\n     request.signal.addEventListener(\"abort\", onReject);\n+\n+    let runHandlerAndMaybeAbortDeferreds = async (\n+      handler: ActionFunction | LoaderFunction,\n+      args: LoaderFunctionArgs | ActionFunctionArgs\n+    ) => {\n+      // Since we Promise.race the handler against the request signal, if the\n+      // request is aborted we never get access to the returned value from the\n+      // handler.  If we get a defer() instance _after_ we've already aborted\n+      // the request, we should proxy that cancellation along so the defer()\n+      // controller also aborts.\n+      let result = await handler(args);\n+      if (args.request.signal.aborted && isDeferredData(result)) {\n+        result.cancel();",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1295076797",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 10792,
        "pr_file": "packages/router/router.ts",
        "discussion_id": "1295076797",
        "commented_code": "@@ -3627,8 +3629,25 @@ async function callLoaderOrAction(\n     let abortPromise = new Promise((_, r) => (reject = r));\n     onReject = () => reject();\n     request.signal.addEventListener(\"abort\", onReject);\n+\n+    let runHandlerAndMaybeAbortDeferreds = async (\n+      handler: ActionFunction | LoaderFunction,\n+      args: LoaderFunctionArgs | ActionFunctionArgs\n+    ) => {\n+      // Since we Promise.race the handler against the request signal, if the\n+      // request is aborted we never get access to the returned value from the\n+      // handler.  If we get a defer() instance _after_ we've already aborted\n+      // the request, we should proxy that cancellation along so the defer()\n+      // controller also aborts.\n+      let result = await handler(args);\n+      if (args.request.signal.aborted && isDeferredData(result)) {\n+        result.cancel();",
        "comment_created_at": "2023-08-15T20:27:44+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Cancel `defer()` instances created _after_ the `request` has already been aborted",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1295077117",
    "pr_number": 10792,
    "pr_file": "packages/router/router.ts",
    "created_at": "2023-08-15T20:28:07+00:00",
    "commented_code": "}\n \n   if (isDeferredData(result)) {\n+    if (request.signal.aborted) {\n+      // Don't think this is technically possible since we race the loader\n+      // against the request signal and we would short circuit via the error path\n+      // above on interruption. Included to be safe though :)\n+      result.cancel();\n+    } else {\n+      // Abort the defer() instance if we abort while waiting on other loaders\n+      // from this navigation\n+      let deferResult = result;\n+      request.signal.addEventListener(\"abort\", () => deferResult.cancel());",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1295077117",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 10792,
        "pr_file": "packages/router/router.ts",
        "discussion_id": "1295077117",
        "commented_code": "@@ -3792,6 +3811,17 @@ async function callLoaderOrAction(\n   }\n \n   if (isDeferredData(result)) {\n+    if (request.signal.aborted) {\n+      // Don't think this is technically possible since we race the loader\n+      // against the request signal and we would short circuit via the error path\n+      // above on interruption. Included to be safe though :)\n+      result.cancel();\n+    } else {\n+      // Abort the defer() instance if we abort while waiting on other loaders\n+      // from this navigation\n+      let deferResult = result;\n+      request.signal.addEventListener(\"abort\", () => deferResult.cancel());",
        "comment_created_at": "2023-08-15T20:28:07+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Cancel `defer()` instanced created _before_ the `request` is aborted",
        "pr_file_module": null
      }
    ]
  }
]