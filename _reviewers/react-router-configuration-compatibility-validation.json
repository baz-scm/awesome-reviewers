[
  {
    "discussion_id": "2168307512",
    "pr_number": 13888,
    "pr_file": "docs/api/framework-conventions/entry.server.tsx.md",
    "created_at": "2025-06-26T06:54:36+00:00",
    "commented_code": "+---\n+title: entry.server.tsx\n+order: 5\n+---\n+\n+# entry.server.tsx\n+\n+[MODES: framework]\n+\n+## Summary\n+\n+<docs-info>\n+This file is optional\n+</docs-info>\n+\n+This file is the server-side entry point that controls how your React Router application generates HTTP responses on the server.\n+\n+This module should render the markup for the current page using a [`<ServerRouter>`][serverrouter] element with the `context` and `url` for the current request. This markup will (optionally) be re-hydrated once JavaScript loads in the browser using the [client entry module][client-entry].\n+\n+## Generating `entry.server.tsx`\n+\n+By default, React Router will handle generating the HTTP Response for you. You can reveal the default entry server file with the following:\n+\n+```shellscript nonumber\n+npx react-router reveal\n+```\n+\n+## Exports\n+\n+### `default`\n+\n+The `default` export of this module is a function that lets you create the response, including HTTP status, headers, and HTML, giving you full control over the way the markup is generated and sent to the client.\n+\n+```tsx filename=app/entry.server.tsx\n+import { renderToString } from \"react-dom/server\";\n+import { ServerRouter } from \"react-router\";\n+\n+export default function handleRequest(\n+  request: Request,\n+  responseStatusCode: number,\n+  responseHeaders: Headers,\n+  routerContext: EntryContext\n+) {\n+  const markup = renderToString(",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2168307512",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13888,
        "pr_file": "docs/api/framework-conventions/entry.server.tsx.md",
        "discussion_id": "2168307512",
        "commented_code": "@@ -0,0 +1,141 @@\n+---\n+title: entry.server.tsx\n+order: 5\n+---\n+\n+# entry.server.tsx\n+\n+[MODES: framework]\n+\n+## Summary\n+\n+<docs-info>\n+This file is optional\n+</docs-info>\n+\n+This file is the server-side entry point that controls how your React Router application generates HTTP responses on the server.\n+\n+This module should render the markup for the current page using a [`<ServerRouter>`][serverrouter] element with the `context` and `url` for the current request. This markup will (optionally) be re-hydrated once JavaScript loads in the browser using the [client entry module][client-entry].\n+\n+## Generating `entry.server.tsx`\n+\n+By default, React Router will handle generating the HTTP Response for you. You can reveal the default entry server file with the following:\n+\n+```shellscript nonumber\n+npx react-router reveal\n+```\n+\n+## Exports\n+\n+### `default`\n+\n+The `default` export of this module is a function that lets you create the response, including HTTP status, headers, and HTML, giving you full control over the way the markup is generated and sent to the client.\n+\n+```tsx filename=app/entry.server.tsx\n+import { renderToString } from \"react-dom/server\";\n+import { ServerRouter } from \"react-router\";\n+\n+export default function handleRequest(\n+  request: Request,\n+  responseStatusCode: number,\n+  responseHeaders: Headers,\n+  routerContext: EntryContext\n+) {\n+  const markup = renderToString(",
        "comment_created_at": "2025-06-26T06:54:36+00:00",
        "comment_author": "pawelblaszczyk5",
        "comment_body": "I thought that with single fetch (which is the only option in RR framework mode) we can\u2019t use \u201crenderToString\u201d? \ud83e\udd14\r\n\r\nhttps://remix.run/docs/en/main/guides/single-fetch\r\n\r\nCan\u2019t deep link - 5th point in \u201cEnabling single fetch\u201d ",
        "pr_file_module": null
      },
      {
        "comment_id": "2169257941",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13888,
        "pr_file": "docs/api/framework-conventions/entry.server.tsx.md",
        "discussion_id": "2168307512",
        "commented_code": "@@ -0,0 +1,141 @@\n+---\n+title: entry.server.tsx\n+order: 5\n+---\n+\n+# entry.server.tsx\n+\n+[MODES: framework]\n+\n+## Summary\n+\n+<docs-info>\n+This file is optional\n+</docs-info>\n+\n+This file is the server-side entry point that controls how your React Router application generates HTTP responses on the server.\n+\n+This module should render the markup for the current page using a [`<ServerRouter>`][serverrouter] element with the `context` and `url` for the current request. This markup will (optionally) be re-hydrated once JavaScript loads in the browser using the [client entry module][client-entry].\n+\n+## Generating `entry.server.tsx`\n+\n+By default, React Router will handle generating the HTTP Response for you. You can reveal the default entry server file with the following:\n+\n+```shellscript nonumber\n+npx react-router reveal\n+```\n+\n+## Exports\n+\n+### `default`\n+\n+The `default` export of this module is a function that lets you create the response, including HTTP status, headers, and HTML, giving you full control over the way the markup is generated and sent to the client.\n+\n+```tsx filename=app/entry.server.tsx\n+import { renderToString } from \"react-dom/server\";\n+import { ServerRouter } from \"react-router\";\n+\n+export default function handleRequest(\n+  request: Request,\n+  responseStatusCode: number,\n+  responseHeaders: Headers,\n+  routerContext: EntryContext\n+) {\n+  const markup = renderToString(",
        "comment_created_at": "2025-06-26T14:48:56+00:00",
        "comment_author": "brookslybrand",
        "comment_body": "Oh yeah, good catch! Thanks @pawelblaszczyk5, this is why I can't just blindly copy old docs from Remix \ud83d\ude05\r\n\r\nI update the example to still be simple but realistic",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2132889164",
    "pr_number": 13769,
    "pr_file": "docs/how-to/file-route-conventions.md",
    "created_at": "2025-06-06T20:46:01+00:00",
    "commented_code": "}\n ```\n \n+## 404 Catch-all Route\n+\n+To create a global 404 catch-all route, create a file named `$.tsx` within your routes directory:",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2132889164",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13769,
        "pr_file": "docs/how-to/file-route-conventions.md",
        "discussion_id": "2132889164",
        "commented_code": "@@ -291,6 +291,17 @@ export async function serverLoader({ params }) {\n }\n ```\n \n+## 404 Catch-all Route\n+\n+To create a global 404 catch-all route, create a file named `$.tsx` within your routes directory:",
        "comment_created_at": "2025-06-06T20:46:01+00:00",
        "comment_author": "timdorr",
        "comment_body": "```suggestion\r\n## Catch-all Route\r\n\r\nTo create a route that will match any requests that don't match other defined routes (such as a 404 page), create a file named `$.tsx` within your routes directory:\r\n```\r\n\r\nThe catch-all isn't necessarily a 404 (it may not even return that HTTP code!), so I reworded it a tad to reflect that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1952858891",
    "pr_number": 13009,
    "pr_file": "docs/start/framework/navigating.md",
    "created_at": "2025-02-12T15:15:10+00:00",
    "commented_code": "## redirect\n \n-Inside of route loaders and actions, you can `redirect` to another URL.\n+Inside of route loaders and actions, you can `redirect` to another URL. Note: the `return` statement is mandatory.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1952858891",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13009,
        "pr_file": "docs/start/framework/navigating.md",
        "discussion_id": "1952858891",
        "commented_code": "@@ -126,7 +126,7 @@ Forms with `<Form method=\"post\" />` will also navigate to the action prop but wi\n \n ## redirect\n \n-Inside of route loaders and actions, you can `redirect` to another URL.\n+Inside of route loaders and actions, you can `redirect` to another URL. Note: the `return` statement is mandatory.",
        "comment_created_at": "2025-02-12T15:15:10+00:00",
        "comment_author": "timdorr",
        "comment_body": "```suggestion\nInside of route loaders and actions, you can return a `redirect` to another URL.\n```\n\nThis can be even more tiny \ud83d\ude01\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1929883575",
    "pr_number": 12838,
    "pr_file": "docs/start/framework/route-module.md",
    "created_at": "2025-01-26T22:18:13+00:00",
    "commented_code": "## Component (`default`)\n \n-Defines the component that will render when the route matches.\n+The default Component in a route module defines the component that will render when the route matches.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1929883575",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12838,
        "pr_file": "docs/start/framework/route-module.md",
        "discussion_id": "1929883575",
        "commented_code": "@@ -25,7 +25,7 @@ This guide is a quick overview of every route module feature. The rest of the ge\n \n ## Component (`default`)\n \n-Defines the component that will render when the route matches.\n+The default Component in a route module defines the component that will render when the route matches.",
        "comment_created_at": "2025-01-26T22:18:13+00:00",
        "comment_author": "timdorr",
        "comment_body": "```suggestion\r\nThe `default` export in a route module defines the component that will render when the route matches.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1767131907",
    "pr_number": 12010,
    "pr_file": "docs/guides/prerendering.md",
    "created_at": "2024-09-19T16:26:09+00:00",
    "commented_code": "## Configuration\n \n-To enable pre-rendering, add the `prerender` option to your React Router Vite plugin to tell React Router which paths to pre-render:\n+To enable pre-rendering, add the `prerender` option to your React Router Vite plugin to enable prerendering.\n+\n+In the simplest use-case, `prerender: true` will prerender all static routes defined in your application (excluding any paths that contain dynamic or splat params):\n+\n+```ts filename=vite.config.ts\n+import { reactRouter } from \"@react-router/dev/vite\";\n+import { defineConfig } from \"vite\";\n+\n+export default defineConfig({\n+  plugins: [\n+    reactRouter({\n+      prerender: true,\n+    }),\n+  ],\n+});\n+```\n+\n+Alternatively, you can tell React Router specifically which paths to pre-render:",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1767131907",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12010,
        "pr_file": "docs/guides/prerendering.md",
        "discussion_id": "1767131907",
        "commented_code": "@@ -17,7 +17,24 @@ This is still something that could be done entirely in userland, but it's be so\n \n ## Configuration\n \n-To enable pre-rendering, add the `prerender` option to your React Router Vite plugin to tell React Router which paths to pre-render:\n+To enable pre-rendering, add the `prerender` option to your React Router Vite plugin to enable prerendering.\n+\n+In the simplest use-case, `prerender: true` will prerender all static routes defined in your application (excluding any paths that contain dynamic or splat params):\n+\n+```ts filename=vite.config.ts\n+import { reactRouter } from \"@react-router/dev/vite\";\n+import { defineConfig } from \"vite\";\n+\n+export default defineConfig({\n+  plugins: [\n+    reactRouter({\n+      prerender: true,\n+    }),\n+  ],\n+});\n+```\n+\n+Alternatively, you can tell React Router specifically which paths to pre-render:",
        "comment_created_at": "2024-09-19T16:26:09+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "```suggestion\r\nIf you need to prerender paths with dynamic/splat parameters, or you only want to prerender a subset of your static paths, you can provide an array of paths:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1894289058",
    "pr_number": 12601,
    "pr_file": "docs/start/framework/data-loading.md",
    "created_at": "2024-12-20T19:02:14+00:00",
    "commented_code": "Loader data is automatically serialized from loaders and deserialized in components. In addition to primitive values like strings and numbers, loaders can return promises, maps, sets, dates and more.\n \n+The type for the `loaderData` prop is [automatically generated][type-safety].\n+\n ## Client Data Loading\n \n `clientLoader` is used to fetch data on the client. This is useful for pages or full projects that you'd prefer to fetch data from the browser only.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1894289058",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12601,
        "pr_file": "docs/start/framework/data-loading.md",
        "discussion_id": "1894289058",
        "commented_code": "@@ -9,6 +9,8 @@ Data is provided to the route component from `loader` and `clientLoader`.\n \n Loader data is automatically serialized from loaders and deserialized in components. In addition to primitive values like strings and numbers, loaders can return promises, maps, sets, dates and more.\n \n+The type for the `loaderData` prop is [automatically generated][type-safety].\n+\n ## Client Data Loading\n \n `clientLoader` is used to fetch data on the client. This is useful for pages or full projects that you'd prefer to fetch data from the browser only.",
        "comment_created_at": "2024-12-20T19:02:14+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "I might introduce `HydrateFallback` here since it can/should be used for this scenario where you have only a `clientLoader`, and no `loader`.  In that scenario, `clientLoader.hydrate` defaults to true because we _have_ to run it on hydration if we have no `loaderData` from the server.\r\n\r\nThen below you can mention:\r\n* When you provide a server `loader` in addition to a `clientLoader`, we _can_ render the during SSR using the server loader data\r\n* If if we do not want to render the route with only server loaderData, then set `clientLoader.hydrate=true` to run on hydration and provide a `HydrateFallback` to render until `clientLoader` completes",
        "pr_file_module": null
      }
    ]
  }
]