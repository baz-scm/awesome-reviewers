[
  {
    "discussion_id": "2148859031",
    "pr_number": 13744,
    "pr_file": "packages/react-router-dev/config/config.ts",
    "created_at": "2025-06-15T23:32:35+00:00",
    "commented_code": "let entryServerFile: string;\n   let entryClientFile = userEntryClientFile || \"entry.client.tsx\";\n \n-  let packageJsonPath = findEntry(rootDirectory, \"package\", {\n-    extensions: [\".json\"],\n-    absolute: true,\n-    walkParents: true,\n-  });\n-\n-  if (!packageJsonPath) {\n-    throw new Error(\n-      `Could not find package.json in ${rootDirectory} or any of its parent directories`\n-    );\n-  }\n-\n-  let packageJsonDirectory = Path.dirname(packageJsonPath);\n-  let pkgJson = await PackageJson.load(packageJsonDirectory);\n-  let deps = pkgJson.content.dependencies ?? {};\n-\n   if (userEntryServerFile) {\n     entryServerFile = userEntryServerFile;\n   } else {\n+    let packageJsonPath = findEntry(rootDirectory, \"package\", {\n+      extensions: [\".json\"],\n+      absolute: true,\n+      walkParents: true,\n+    });\n+\n+    if (!packageJsonPath) {\n+      throw new Error(\n+        `Could not find package.json in ${rootDirectory} or any of its parent directories. Please add a package.json, or provide a custom entry.server.tsx/jsx file in your app directory.`",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2148859031",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13744,
        "pr_file": "packages/react-router-dev/config/config.ts",
        "discussion_id": "2148859031",
        "commented_code": "@@ -844,25 +844,25 @@ export async function resolveEntryFiles({\n   let entryServerFile: string;\n   let entryClientFile = userEntryClientFile || \"entry.client.tsx\";\n \n-  let packageJsonPath = findEntry(rootDirectory, \"package\", {\n-    extensions: [\".json\"],\n-    absolute: true,\n-    walkParents: true,\n-  });\n-\n-  if (!packageJsonPath) {\n-    throw new Error(\n-      `Could not find package.json in ${rootDirectory} or any of its parent directories`\n-    );\n-  }\n-\n-  let packageJsonDirectory = Path.dirname(packageJsonPath);\n-  let pkgJson = await PackageJson.load(packageJsonDirectory);\n-  let deps = pkgJson.content.dependencies ?? {};\n-\n   if (userEntryServerFile) {\n     entryServerFile = userEntryServerFile;\n   } else {\n+    let packageJsonPath = findEntry(rootDirectory, \"package\", {\n+      extensions: [\".json\"],\n+      absolute: true,\n+      walkParents: true,\n+    });\n+\n+    if (!packageJsonPath) {\n+      throw new Error(\n+        `Could not find package.json in ${rootDirectory} or any of its parent directories. Please add a package.json, or provide a custom entry.server.tsx/jsx file in your app directory.`",
        "comment_created_at": "2025-06-15T23:32:35+00:00",
        "comment_author": "markdalgleish",
        "comment_body": "Now that this error can also be avoided by introducing a custom entry.server.tsx/jsx, I've expanded the error message to make this clear, similar to the error message following this one.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2062965495",
    "pr_number": 13472,
    "pr_file": "packages/react-router-dev/cli/commands.ts",
    "created_at": "2025-04-28T06:26:43+00:00",
    "commented_code": "return contents;\n }\n \n-export async function typegen(root: string, flags: { watch: boolean }) {\n-  root ??= process.cwd();\n+export async function typegen(\n+  root: string,\n+  flags: {\n+    watch?: boolean;\n+    config?: string;",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2062965495",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13472,
        "pr_file": "packages/react-router-dev/cli/commands.ts",
        "discussion_id": "2062965495",
        "commented_code": "@@ -198,8 +209,14 @@ async function createClientEntry(\n   return contents;\n }\n \n-export async function typegen(root: string, flags: { watch: boolean }) {\n-  root ??= process.cwd();\n+export async function typegen(\n+  root: string,\n+  flags: {\n+    watch?: boolean;\n+    config?: string;",
        "comment_created_at": "2025-04-28T06:26:43+00:00",
        "comment_author": "markdalgleish",
        "comment_body": "@pcattori Just calling out that since the `--config` flag impacts the project root directory (and hence where routes live etc.), I think it makes sense to support this in all CLI commands for consistency, even those that don't use the Vite config.",
        "pr_file_module": null
      },
      {
        "comment_id": "2062967790",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13472,
        "pr_file": "packages/react-router-dev/cli/commands.ts",
        "discussion_id": "2062965495",
        "commented_code": "@@ -198,8 +209,14 @@ async function createClientEntry(\n   return contents;\n }\n \n-export async function typegen(root: string, flags: { watch: boolean }) {\n-  root ??= process.cwd();\n+export async function typegen(\n+  root: string,\n+  flags: {\n+    watch?: boolean;\n+    config?: string;",
        "comment_created_at": "2025-04-28T06:28:43+00:00",
        "comment_author": "markdalgleish",
        "comment_body": "Side note, but I think this raises something I might have missed when we introduced `react-router.config.ts`, which is that the `--config` flag probably should have been updated to point to _our_ config, and any custom Vite config path should have been configured there, or via a separate `--vite-config` flag.\r\n\r\nThis is part of my rationale for this change. If our `--config` flag pointed to `react-router.config.ts`, I would want to support it here too.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2065162631",
    "pr_number": 13472,
    "pr_file": "packages/react-router-dev/cli/commands.ts",
    "created_at": "2025-04-29T00:58:24+00:00",
    "commented_code": ");\n }\n \n+function resolveRootDirectory(root?: string, flags?: { config?: string }) {\n+  if (root) {\n+    return path.resolve(root);",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2065162631",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13472,
        "pr_file": "packages/react-router-dev/cli/commands.ts",
        "discussion_id": "2065162631",
        "commented_code": "@@ -162,6 +162,17 @@ export async function generateEntry(\n   );\n }\n \n+function resolveRootDirectory(root?: string, flags?: { config?: string }) {\n+  if (root) {\n+    return path.resolve(root);",
        "comment_created_at": "2025-04-29T00:58:24+00:00",
        "comment_author": "markdalgleish",
        "comment_body": "Note that if a root directory was explicitly provided (e.g. `react-router build my/app/dir`) this will still take precedence. We only fall back to inferring the root when this isn't provided, so anyone relying on this should maintain existing behaviour.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1923869895",
    "pr_number": 12509,
    "pr_file": "packages/react-router/lib/deprecations.ts",
    "created_at": "2025-01-21T14:51:20+00:00",
    "commented_code": "const alreadyWarned: { [key: string]: boolean } = {};\n \n export function warnOnce(key: string, message: string): void {\n-  if (!alreadyWarned[message]) {\n+  if (process.env.NODE_ENV !== 'production' && !alreadyWarned[message]) {",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1923869895",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12509,
        "pr_file": "packages/react-router/lib/deprecations.ts",
        "discussion_id": "1923869895",
        "commented_code": "@@ -4,7 +4,7 @@ import type { FutureConfig as RenderFutureConfig } from \"./components\";\n const alreadyWarned: { [key: string]: boolean } = {};\n \n export function warnOnce(key: string, message: string): void {\n-  if (!alreadyWarned[message]) {\n+  if (process.env.NODE_ENV !== 'production' && !alreadyWarned[message]) {",
        "comment_created_at": "2025-01-21T14:51:20+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "We have a build time `__DEV__` constant we can swap out for dev/prod builds to allow the library to remain runtime agnostic\r\n\r\n```suggestion\r\n  if (__DEV__ && !alreadyWarned[message]) {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1876710059",
    "pr_number": 12505,
    "pr_file": "packages/react-router-dev/cli/index.ts",
    "created_at": "2024-12-09T20:25:46+00:00",
    "commented_code": "#!/usr/bin/env node\n-import { run } from \"./run\";\n+import { parseArgs } from \"./parse\";\n \n-run().then(\n-  () => {\n-    process.exit(0);\n-  },\n-  (error: unknown) => {\n-    if (error) console.error(error);\n-    process.exit(1);\n-  }\n-);\n+let { input, flags, command } = parseArgs();\n+\n+// If not already set, default `NODE_ENV` so React loads the proper\n+// version in it's CJS entry script.  We have to do this before importing `run.ts`\n+// since that is what imports `react` (indirectly via `react-router`)\n+if (command === \"dev\") {\n+  process.env.NODE_ENV = process.env.NODE_ENV ?? \"development\";\n+} else {\n+  process.env.NODE_ENV = process.env.NODE_ENV ?? \"production\";\n+}",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1876710059",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12505,
        "pr_file": "packages/react-router-dev/cli/index.ts",
        "discussion_id": "1876710059",
        "commented_code": "@@ -1,12 +1,25 @@\n #!/usr/bin/env node\n-import { run } from \"./run\";\n+import { parseArgs } from \"./parse\";\n \n-run().then(\n-  () => {\n-    process.exit(0);\n-  },\n-  (error: unknown) => {\n-    if (error) console.error(error);\n-    process.exit(1);\n-  }\n-);\n+let { input, flags, command } = parseArgs();\n+\n+// If not already set, default `NODE_ENV` so React loads the proper\n+// version in it's CJS entry script.  We have to do this before importing `run.ts`\n+// since that is what imports `react` (indirectly via `react-router`)\n+if (command === \"dev\") {\n+  process.env.NODE_ENV = process.env.NODE_ENV ?? \"development\";\n+} else {\n+  process.env.NODE_ENV = process.env.NODE_ENV ?? \"production\";\n+}",
        "comment_created_at": "2024-12-09T20:25:46+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Parse args and set `NODE_ENV` first",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1594319372",
    "pr_number": 11539,
    "pr_file": "packages/remix-dev/vite/plugin.ts",
    "created_at": "2024-05-08T16:38:24+00:00",
    "commented_code": ")};\n       export const basename = ${JSON.stringify(ctx.reactRouterConfig.basename)};\n       export const future = ${JSON.stringify(ctx.reactRouterConfig.future)};\n-      export const isSpaMode = ${!ctx.reactRouterConfig.ssr};\n+      export const isSpaMode = ${\n+        !ctx.reactRouterConfig.ssr && ctx.reactRouterConfig.prerender == null\n+      };",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1594319372",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11539,
        "pr_file": "packages/remix-dev/vite/plugin.ts",
        "discussion_id": "1594319372",
        "commented_code": "@@ -504,7 +506,9 @@ export const reactRouterVitePlugin: ReactRouterVitePlugin = (_config) => {\n       )};\n       export const basename = ${JSON.stringify(ctx.reactRouterConfig.basename)};\n       export const future = ${JSON.stringify(ctx.reactRouterConfig.future)};\n-      export const isSpaMode = ${!ctx.reactRouterConfig.ssr};\n+      export const isSpaMode = ${\n+        !ctx.reactRouterConfig.ssr && ctx.reactRouterConfig.prerender == null\n+      };",
        "comment_created_at": "2024-05-08T16:38:24+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "\"SPA Mode\" is specifically no SSR and only generating a root `index.html` - this `isSpaMode` flag is what tells the server.client not to SSR/hydrate beyond the root route.  ",
        "pr_file_module": null
      }
    ]
  }
]