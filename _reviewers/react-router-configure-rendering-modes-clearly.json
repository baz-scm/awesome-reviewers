[
  {
    "discussion_id": "1934244467",
    "pr_number": 12894,
    "pr_file": "packages/react-router-dev/vite/plugin.ts",
    "created_at": "2025-01-29T16:48:47+00:00",
    "commented_code": ");\n     }\n   }\n-\n-  await prerenderManifest(",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1934244467",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12894,
        "pr_file": "packages/react-router-dev/vite/plugin.ts",
        "discussion_id": "1934244467",
        "commented_code": "@@ -1908,13 +1920,6 @@ async function handlePrerender(\n       );\n     }\n   }\n-\n-  await prerenderManifest(",
        "comment_created_at": "2025-01-29T16:48:47+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Never need to prerender a manifest anymore\r\n- `ssr: true` will handle the manifest via the server handler\r\n- `ssr: false` will not have fog of war enabled",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1945384484",
    "pr_number": 12948,
    "pr_file": "packages/react-router-dev/vite/plugin.ts",
    "created_at": "2025-02-06T20:30:07+00:00",
    "commented_code": "return info;\n }\n \n+function isPrerenderingEnabled(\n+  reactRouterConfig: ReactRouterPluginContext[\"reactRouterConfig\"]\n+) {\n+  return (\n+    reactRouterConfig.prerender != null && reactRouterConfig.prerender !== false\n+  );\n+}\n+\n function isSpaModeEnabled(\n   reactRouterConfig: ReactRouterPluginContext[\"reactRouterConfig\"]\n ) {\n+  // \"SPA Mode\" is possible in 2 ways:\n+  //  - `ssr:false` and no `prerender` config (undefined or null)\n+  //  - `ssr:false` and `prerender: false`\n+  //    - not an expected config but since we support `prerender:true` we allow it\n+  //\n+  // \"SPA Mode\" means we will only prerender a *single* `index.html` file which\n+  // prerenders only to the root route and thus can hydrate for _any_ path and\n+  // the proper routes below the root will be loaded via `route.lazy` during\n+  // hydration.\n+  //\n+  // If `ssr:false` is specified and the user provided a `prerender` config -\n+  // then it's no longer a \"SPA\" because we are generating multiple HTML pages.\n+  // It's now a MPA and we can prerender down past the root, which unlocks the\n+  // ability to use loaders on any routes and prerender the UI with build-time\n+  // loaderData\n   return (\n-    reactRouterConfig.ssr === false &&\n-    (reactRouterConfig.prerender == null ||\n-      reactRouterConfig.prerender === false ||\n-      (Array.isArray(reactRouterConfig.prerender) &&\n-        reactRouterConfig.prerender.length === 1 &&\n-        reactRouterConfig.prerender[0] === \"/\"))",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1945384484",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12948,
        "pr_file": "packages/react-router-dev/vite/plugin.ts",
        "discussion_id": "1945384484",
        "commented_code": "@@ -2078,16 +2089,34 @@ async function getRouteMetadata(\n   return info;\n }\n \n+function isPrerenderingEnabled(\n+  reactRouterConfig: ReactRouterPluginContext[\"reactRouterConfig\"]\n+) {\n+  return (\n+    reactRouterConfig.prerender != null && reactRouterConfig.prerender !== false\n+  );\n+}\n+\n function isSpaModeEnabled(\n   reactRouterConfig: ReactRouterPluginContext[\"reactRouterConfig\"]\n ) {\n+  // \"SPA Mode\" is possible in 2 ways:\n+  //  - `ssr:false` and no `prerender` config (undefined or null)\n+  //  - `ssr:false` and `prerender: false`\n+  //    - not an expected config but since we support `prerender:true` we allow it\n+  //\n+  // \"SPA Mode\" means we will only prerender a *single* `index.html` file which\n+  // prerenders only to the root route and thus can hydrate for _any_ path and\n+  // the proper routes below the root will be loaded via `route.lazy` during\n+  // hydration.\n+  //\n+  // If `ssr:false` is specified and the user provided a `prerender` config -\n+  // then it's no longer a \"SPA\" because we are generating multiple HTML pages.\n+  // It's now a MPA and we can prerender down past the root, which unlocks the\n+  // ability to use loaders on any routes and prerender the UI with build-time\n+  // loaderData\n   return (\n-    reactRouterConfig.ssr === false &&\n-    (reactRouterConfig.prerender == null ||\n-      reactRouterConfig.prerender === false ||\n-      (Array.isArray(reactRouterConfig.prerender) &&\n-        reactRouterConfig.prerender.length === 1 &&\n-        reactRouterConfig.prerender[0] === \"/\"))",
        "comment_created_at": "2025-02-06T20:30:07+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "This went a bit too far - `ssr:false, prerender:['/']` is an explicit opt-into prerendering the `/` route and should trigger full SSG of the `/` route and prerender past the root.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1945387930",
    "pr_number": 12948,
    "pr_file": "packages/react-router-dev/vite/plugin.ts",
    "created_at": "2025-02-06T20:33:19+00:00",
    "commented_code": "serverBuildFile: string,\n   clientBuildDirectory: string\n ) {\n-  let { handler } = await getPrerenderBuildAndHandler(\n+  let { build, handler } = await getPrerenderBuildAndHandler(\n     viteConfig,\n     serverBuildDirectory,\n     serverBuildFile\n   );\n-  let request = new Request(`http://localhost${reactRouterConfig.basename}`);\n+  let request = new Request(`http://localhost${reactRouterConfig.basename}`, {\n+    headers: {\n+      // Enable SPA mode in the server runtime and only render down to the root\n+      \"X-React-Router-SPA-Mode\": \"yes\",\n+    },\n+  });\n   let response = await handler(request);\n   let html = await response.text();\n \n-  validatePrerenderedResponse(response, html, \"SPA Mode\", \"/\");\n-  validatePrerenderedHtml(html, \"SPA Mode\");\n+  // If the user prerendered `/`, then we write this out to a separate file\n+  // they can serve.  Otherwise it can be the main entry point.\n+  let isPrerenderSpaFallback = build.prerender.includes(\"/\");\n+  let filename = isPrerenderSpaFallback\n+    ? \"__spa-fallback__.html\"",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1945387930",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12948,
        "pr_file": "packages/react-router-dev/vite/plugin.ts",
        "discussion_id": "1945387930",
        "commented_code": "@@ -2112,26 +2141,58 @@ async function handleSpaMode(\n   serverBuildFile: string,\n   clientBuildDirectory: string\n ) {\n-  let { handler } = await getPrerenderBuildAndHandler(\n+  let { build, handler } = await getPrerenderBuildAndHandler(\n     viteConfig,\n     serverBuildDirectory,\n     serverBuildFile\n   );\n-  let request = new Request(`http://localhost${reactRouterConfig.basename}`);\n+  let request = new Request(`http://localhost${reactRouterConfig.basename}`, {\n+    headers: {\n+      // Enable SPA mode in the server runtime and only render down to the root\n+      \"X-React-Router-SPA-Mode\": \"yes\",\n+    },\n+  });\n   let response = await handler(request);\n   let html = await response.text();\n \n-  validatePrerenderedResponse(response, html, \"SPA Mode\", \"/\");\n-  validatePrerenderedHtml(html, \"SPA Mode\");\n+  // If the user prerendered `/`, then we write this out to a separate file\n+  // they can serve.  Otherwise it can be the main entry point.\n+  let isPrerenderSpaFallback = build.prerender.includes(\"/\");\n+  let filename = isPrerenderSpaFallback\n+    ? \"__spa-fallback__.html\"",
        "comment_created_at": "2025-02-06T20:33:19+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Write out this spa fallback file when the user chose `ssr:false + prerender:['/']` as a way for them to load/hydrate into non-prerendered paths without a runtime server",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1779327463",
    "pr_number": 12043,
    "pr_file": "packages/react-router-dev/vite/plugin.ts",
    "created_at": "2024-09-28T01:01:17+00:00",
    "commented_code": "let [filepath] = id.split(\"?\");\n \n         let ast = parse(code, { sourceType: \"module\" });\n-        removeExports(ast, SERVER_ONLY_ROUTE_EXPORTS);\n+        if (!options?.ssr) {\n+          removeExports(ast, SERVER_ONLY_ROUTE_EXPORTS);\n+        }",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1779327463",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12043,
        "pr_file": "packages/react-router-dev/vite/plugin.ts",
        "discussion_id": "1779327463",
        "commented_code": "@@ -1462,7 +1461,9 @@ export const reactRouterVitePlugin: ReactRouterVitePlugin = (_config) => {\n         let [filepath] = id.split(\"?\");\n \n         let ast = parse(code, { sourceType: \"module\" });\n-        removeExports(ast, SERVER_ONLY_ROUTE_EXPORTS);\n+        if (!options?.ssr) {\n+          removeExports(ast, SERVER_ONLY_ROUTE_EXPORTS);\n+        }",
        "comment_created_at": "2024-09-28T01:01:17+00:00",
        "comment_author": "pcattori",
        "comment_body": "This is the important part: the `WithProps.transform` (below) always needs to be applied so that SSR render also has data from props HOCs, which means we need to conditionally remove exports for `ssr: false` more precisely.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1594322698",
    "pr_number": 11539,
    "pr_file": "packages/remix-dev/vite/plugin.ts",
    "created_at": "2024-05-08T16:41:30+00:00",
    "commented_code": "colors.bold(path.relative(process.cwd(), clientBuildDirectory)) +\n       \" directory\"\n   );\n+}\n+\n+async function handlePrerender(\n+  viteConfig: Vite.ResolvedConfig,\n+  reactRouterConfig: Awaited<ReturnType<typeof resolveReactRouterConfig>>,\n+  serverBuildDirectory: string,\n+  clientBuildDirectory: string\n+) {\n+  let { build, handler } = await getPrerenderBuildAndHandler(\n+    viteConfig,\n+    reactRouterConfig,\n+    serverBuildDirectory\n+  );\n \n-  // Cleanup - we no longer need the server build assets\n-  fse.removeSync(serverBuildDirectoryPath);\n+  let routes = createPrerenderRoutes(build.routes);\n+  let routesToPrerender = reactRouterConfig.prerender || [\"/\"];\n+  let requestInit = {\n+    headers: {\n+      // Header that can be used in the loader to know if you're running at\n+      // build time or runtime\n+      \"X-React-Router-Prerender\": \"yes\",\n+    },\n+  };\n+  for (let path of routesToPrerender) {\n+    let hasLoaders = matchRoutes(routes, path)?.some((m) => m.route.loader);\n+    if (hasLoaders) {\n+      await prerenderData(\n+        handler,\n+        reactRouterConfig.basename,\n+        path,\n+        clientBuildDirectory,\n+        viteConfig,\n+        requestInit\n+      );\n+    }",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1594322698",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11539,
        "pr_file": "packages/remix-dev/vite/plugin.ts",
        "discussion_id": "1594322698",
        "commented_code": "@@ -1673,7 +1715,173 @@ async function handleSpaMode(\n       colors.bold(path.relative(process.cwd(), clientBuildDirectory)) +\n       \" directory\"\n   );\n+}\n+\n+async function handlePrerender(\n+  viteConfig: Vite.ResolvedConfig,\n+  reactRouterConfig: Awaited<ReturnType<typeof resolveReactRouterConfig>>,\n+  serverBuildDirectory: string,\n+  clientBuildDirectory: string\n+) {\n+  let { build, handler } = await getPrerenderBuildAndHandler(\n+    viteConfig,\n+    reactRouterConfig,\n+    serverBuildDirectory\n+  );\n \n-  // Cleanup - we no longer need the server build assets\n-  fse.removeSync(serverBuildDirectoryPath);\n+  let routes = createPrerenderRoutes(build.routes);\n+  let routesToPrerender = reactRouterConfig.prerender || [\"/\"];\n+  let requestInit = {\n+    headers: {\n+      // Header that can be used in the loader to know if you're running at\n+      // build time or runtime\n+      \"X-React-Router-Prerender\": \"yes\",\n+    },\n+  };\n+  for (let path of routesToPrerender) {\n+    let hasLoaders = matchRoutes(routes, path)?.some((m) => m.route.loader);\n+    if (hasLoaders) {\n+      await prerenderData(\n+        handler,\n+        reactRouterConfig.basename,\n+        path,\n+        clientBuildDirectory,\n+        viteConfig,\n+        requestInit\n+      );\n+    }",
        "comment_created_at": "2024-05-08T16:41:30+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Prerender `.data` files for any routes with at least one loader",
        "pr_file_module": null
      }
    ]
  }
]