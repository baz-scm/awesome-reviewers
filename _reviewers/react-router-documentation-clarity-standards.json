[
  {
    "discussion_id": "2199080334",
    "pr_number": 13971,
    "pr_file": "docs/how-to/react-server-components.md",
    "created_at": "2025-07-11T00:24:17+00:00",
    "commented_code": "---\n-title: React Server Components\n-# need to ship it first!\n-hidden: true\n+title: React Server Components (unstable)\n+unstable: true\n ---\n \n # React Server Components\n \n-<docs-info>This feature is still in development and not yet available.</docs-info>\n+[MODES: data]\n \n-In the future, async components can be rendered in loaders like any other data:\n+<br/>\n+<br/>\n \n-```tsx filename=app/product-page.tsx\n-// route(\"products/:pid\", \"./product-page.tsx\");\n-import type { Route } from \"./+types/product\";\n-import Product from \"./product\";\n-import Reviews from \"./reviews\";\n+<docs-warning>React Server Components support is experimental and subject to breaking changes.</docs-warning>\n \n-export async function loader({ params }: Route.LoaderArgs) {\n-  return {\n-    product: <Product id={params.pid} />,\n-    reviews: <Reviews productId={params.pid} />,\n-  };\n+React Server Components (RSC) refers generally to an architecture and set of APIs provided by React since version 19.\n+\n+From the docs:\n+\n+> Server Components are a new type of Component that renders ahead of time, before bundling, in an environment separate from your client app or SSR server.\n+> <cite>- [React \"Server Components\" docs][react-server-components-doc]</cite>\n+\n+React Router provides a set of APIs for integrating with RSC-native bundlers, allowing you to leverage [Server Components][react-server-components-doc] and [Server Functions][react-server-functions-doc] in your React Router applications.\n+\n+## Quick Start\n+\n+The quickest way to get started is with one of our templates.\n+\n+These templates come with React Router RSC APIs already configured with the respective bundler, offering you out of the box features such as:\n+\n+- Server Components Routes\n+- Server Side Rendering (SSR)\n+- Client Components (via [`\"use client\"`][use-client-docs] directive)\n+- Server Functions (via [`\"use server\"`][use-server-docs] directive)\n+\n+**Parcel Template**\n+\n+```shellscript\n+npx create-react-router-app@latest --template=unstable_rsc-parcel\n+```\n+\n+**Vite Template**\n+\n+```shellscript\n+npx create-react-router-app@latest --template=unstable_rsc-vite\n+```\n+\n+## Using RSC with React Router\n+\n+### Configuring Routes\n+\n+Routes are configured as an argument to [`matchRSCServerRequest`][match-rsc-server-request]. At a minimum, you need a path and component:\n+\n+```tsx\n+function Root() {\n+  return <h1>Hello world</h1>;\n+}\n+\n+matchRSCServerRequest({\n+  // ...other options\n+  routes: [{ path: \"/\", Component: Root }],\n+});\n+```\n+\n+While you can define components inline, we recommend using the `lazy()` option and defining [Route Modules][route-module] for both startup performance and code organization\n+\n+<docs-info>\n+\n+The [Route Modules][route-module] up until now have been a [Framework Mode][framework-mode] only feature. However, the `lazy` field of the RSC route config expects the same exports as the Route Module exports, unifying the APIs even further.\n+\n+</docs-info>\n+\n+```tsx filename=app/routes.ts\n+import type { unstable_RSCRouteConfig as RSCRouteConfig } from \"react-router\";\n+\n+export function routes() {\n+  return [\n+    {\n+      id: \"root\",\n+      path: \"\",\n+      lazy: () => import(\"./root/route\"),\n+      children: [\n+        {\n+          id: \"home\",\n+          index: true,\n+          lazy: () => import(\"./home/route\"),\n+        },\n+        {\n+          id: \"about\",\n+          path: \"about\",\n+          lazy: () => import(\"./about/route\"),\n+        },\n+      ],\n+    },\n+  ] satisfies RSCRouteConfig;\n }\n+```\n \n-export default function ProductPage({\n-  loaderData,\n-}: Route.ComponentProps) {\n+### Server Component Routes\n+\n+By default each route's `default` export renders a Server Component\n+\n+```tsx\n+export default function Home() {\n   return (\n-    <div>\n-      {loaderData.product}\n-      <Suspense fallback={<div>loading...</div>}>\n-        {loaderData.reviews}\n-      </Suspense>\n-    </div>\n+    <main>\n+      <article>\n+        <h1>Welcome to React Router RSC</h1>\n+        <p>\n+          You won't find me running any JavaScript in the\n+          browser!\n+        </p>\n+      </article>\n+    </main>\n   );\n }\n ```\n \n-```tsx filename=app/product.tsx\n-export async function Product({ id }: { id: string }) {\n-  const product = await fakeDb.getProduct(id);\n+A nice feature of Server Components is that you can fetch data directly from your component by making it asynchronous.\n+\n+```tsx\n+export default async function Home() {\n+  let user = await getUserData();\n+\n+  return (\n+    <main>\n+      <article>\n+        <h1>Welcome to React Router RSC</h1>\n+        <p>\n+          You won't find me running any JavaScript in the\n+          browser!\n+        </p>\n+        <p>\n+          Hello, {user ? user.name : \"anonymous person\"}!\n+        </p>\n+      </article>\n+    </main>\n+  );\n+}\n+```\n+\n+<docs-info>\n+\n+Server Components can also be returned from your loaders and actions. In general, if you are using RSC to build your application, loaders are primarily useful for things like setting `status` codes or return `redirect`s.\n+\n+Using Server Components in loaders can be helpful for incremental adoption of RSC.\n+\n+</docs-info>\n+\n+### Server Functions\n+\n+[Server Functions][react-server-functions-doc] are a React feature that allow you to call async functions executed on the server. They're defined with the [`\"use server\"`][use-server-docs] directive.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2199080334",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13971,
        "pr_file": "docs/how-to/react-server-components.md",
        "discussion_id": "2199080334",
        "commented_code": "@@ -1,50 +1,738 @@\n ---\n-title: React Server Components\n-# need to ship it first!\n-hidden: true\n+title: React Server Components (unstable)\n+unstable: true\n ---\n \n # React Server Components\n \n-<docs-info>This feature is still in development and not yet available.</docs-info>\n+[MODES: data]\n \n-In the future, async components can be rendered in loaders like any other data:\n+<br/>\n+<br/>\n \n-```tsx filename=app/product-page.tsx\n-// route(\"products/:pid\", \"./product-page.tsx\");\n-import type { Route } from \"./+types/product\";\n-import Product from \"./product\";\n-import Reviews from \"./reviews\";\n+<docs-warning>React Server Components support is experimental and subject to breaking changes.</docs-warning>\n \n-export async function loader({ params }: Route.LoaderArgs) {\n-  return {\n-    product: <Product id={params.pid} />,\n-    reviews: <Reviews productId={params.pid} />,\n-  };\n+React Server Components (RSC) refers generally to an architecture and set of APIs provided by React since version 19.\n+\n+From the docs:\n+\n+> Server Components are a new type of Component that renders ahead of time, before bundling, in an environment separate from your client app or SSR server.\n+> <cite>- [React \"Server Components\" docs][react-server-components-doc]</cite>\n+\n+React Router provides a set of APIs for integrating with RSC-native bundlers, allowing you to leverage [Server Components][react-server-components-doc] and [Server Functions][react-server-functions-doc] in your React Router applications.\n+\n+## Quick Start\n+\n+The quickest way to get started is with one of our templates.\n+\n+These templates come with React Router RSC APIs already configured with the respective bundler, offering you out of the box features such as:\n+\n+- Server Components Routes\n+- Server Side Rendering (SSR)\n+- Client Components (via [`\"use client\"`][use-client-docs] directive)\n+- Server Functions (via [`\"use server\"`][use-server-docs] directive)\n+\n+**Parcel Template**\n+\n+```shellscript\n+npx create-react-router-app@latest --template=unstable_rsc-parcel\n+```\n+\n+**Vite Template**\n+\n+```shellscript\n+npx create-react-router-app@latest --template=unstable_rsc-vite\n+```\n+\n+## Using RSC with React Router\n+\n+### Configuring Routes\n+\n+Routes are configured as an argument to [`matchRSCServerRequest`][match-rsc-server-request]. At a minimum, you need a path and component:\n+\n+```tsx\n+function Root() {\n+  return <h1>Hello world</h1>;\n+}\n+\n+matchRSCServerRequest({\n+  // ...other options\n+  routes: [{ path: \"/\", Component: Root }],\n+});\n+```\n+\n+While you can define components inline, we recommend using the `lazy()` option and defining [Route Modules][route-module] for both startup performance and code organization\n+\n+<docs-info>\n+\n+The [Route Modules][route-module] up until now have been a [Framework Mode][framework-mode] only feature. However, the `lazy` field of the RSC route config expects the same exports as the Route Module exports, unifying the APIs even further.\n+\n+</docs-info>\n+\n+```tsx filename=app/routes.ts\n+import type { unstable_RSCRouteConfig as RSCRouteConfig } from \"react-router\";\n+\n+export function routes() {\n+  return [\n+    {\n+      id: \"root\",\n+      path: \"\",\n+      lazy: () => import(\"./root/route\"),\n+      children: [\n+        {\n+          id: \"home\",\n+          index: true,\n+          lazy: () => import(\"./home/route\"),\n+        },\n+        {\n+          id: \"about\",\n+          path: \"about\",\n+          lazy: () => import(\"./about/route\"),\n+        },\n+      ],\n+    },\n+  ] satisfies RSCRouteConfig;\n }\n+```\n \n-export default function ProductPage({\n-  loaderData,\n-}: Route.ComponentProps) {\n+### Server Component Routes\n+\n+By default each route's `default` export renders a Server Component\n+\n+```tsx\n+export default function Home() {\n   return (\n-    <div>\n-      {loaderData.product}\n-      <Suspense fallback={<div>loading...</div>}>\n-        {loaderData.reviews}\n-      </Suspense>\n-    </div>\n+    <main>\n+      <article>\n+        <h1>Welcome to React Router RSC</h1>\n+        <p>\n+          You won't find me running any JavaScript in the\n+          browser!\n+        </p>\n+      </article>\n+    </main>\n   );\n }\n ```\n \n-```tsx filename=app/product.tsx\n-export async function Product({ id }: { id: string }) {\n-  const product = await fakeDb.getProduct(id);\n+A nice feature of Server Components is that you can fetch data directly from your component by making it asynchronous.\n+\n+```tsx\n+export default async function Home() {\n+  let user = await getUserData();\n+\n+  return (\n+    <main>\n+      <article>\n+        <h1>Welcome to React Router RSC</h1>\n+        <p>\n+          You won't find me running any JavaScript in the\n+          browser!\n+        </p>\n+        <p>\n+          Hello, {user ? user.name : \"anonymous person\"}!\n+        </p>\n+      </article>\n+    </main>\n+  );\n+}\n+```\n+\n+<docs-info>\n+\n+Server Components can also be returned from your loaders and actions. In general, if you are using RSC to build your application, loaders are primarily useful for things like setting `status` codes or return `redirect`s.\n+\n+Using Server Components in loaders can be helpful for incremental adoption of RSC.\n+\n+</docs-info>\n+\n+### Server Functions\n+\n+[Server Functions][react-server-functions-doc] are a React feature that allow you to call async functions executed on the server. They're defined with the [`\"use server\"`][use-server-docs] directive.",
        "comment_created_at": "2025-07-11T00:24:17+00:00",
        "comment_author": "steven-liao-rs",
        "comment_body": "Does `\"use server\"` have to be the first line of the file?",
        "pr_file_module": null
      },
      {
        "comment_id": "2200753907",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13971,
        "pr_file": "docs/how-to/react-server-components.md",
        "discussion_id": "2199080334",
        "commented_code": "@@ -1,50 +1,738 @@\n ---\n-title: React Server Components\n-# need to ship it first!\n-hidden: true\n+title: React Server Components (unstable)\n+unstable: true\n ---\n \n # React Server Components\n \n-<docs-info>This feature is still in development and not yet available.</docs-info>\n+[MODES: data]\n \n-In the future, async components can be rendered in loaders like any other data:\n+<br/>\n+<br/>\n \n-```tsx filename=app/product-page.tsx\n-// route(\"products/:pid\", \"./product-page.tsx\");\n-import type { Route } from \"./+types/product\";\n-import Product from \"./product\";\n-import Reviews from \"./reviews\";\n+<docs-warning>React Server Components support is experimental and subject to breaking changes.</docs-warning>\n \n-export async function loader({ params }: Route.LoaderArgs) {\n-  return {\n-    product: <Product id={params.pid} />,\n-    reviews: <Reviews productId={params.pid} />,\n-  };\n+React Server Components (RSC) refers generally to an architecture and set of APIs provided by React since version 19.\n+\n+From the docs:\n+\n+> Server Components are a new type of Component that renders ahead of time, before bundling, in an environment separate from your client app or SSR server.\n+> <cite>- [React \"Server Components\" docs][react-server-components-doc]</cite>\n+\n+React Router provides a set of APIs for integrating with RSC-native bundlers, allowing you to leverage [Server Components][react-server-components-doc] and [Server Functions][react-server-functions-doc] in your React Router applications.\n+\n+## Quick Start\n+\n+The quickest way to get started is with one of our templates.\n+\n+These templates come with React Router RSC APIs already configured with the respective bundler, offering you out of the box features such as:\n+\n+- Server Components Routes\n+- Server Side Rendering (SSR)\n+- Client Components (via [`\"use client\"`][use-client-docs] directive)\n+- Server Functions (via [`\"use server\"`][use-server-docs] directive)\n+\n+**Parcel Template**\n+\n+```shellscript\n+npx create-react-router-app@latest --template=unstable_rsc-parcel\n+```\n+\n+**Vite Template**\n+\n+```shellscript\n+npx create-react-router-app@latest --template=unstable_rsc-vite\n+```\n+\n+## Using RSC with React Router\n+\n+### Configuring Routes\n+\n+Routes are configured as an argument to [`matchRSCServerRequest`][match-rsc-server-request]. At a minimum, you need a path and component:\n+\n+```tsx\n+function Root() {\n+  return <h1>Hello world</h1>;\n+}\n+\n+matchRSCServerRequest({\n+  // ...other options\n+  routes: [{ path: \"/\", Component: Root }],\n+});\n+```\n+\n+While you can define components inline, we recommend using the `lazy()` option and defining [Route Modules][route-module] for both startup performance and code organization\n+\n+<docs-info>\n+\n+The [Route Modules][route-module] up until now have been a [Framework Mode][framework-mode] only feature. However, the `lazy` field of the RSC route config expects the same exports as the Route Module exports, unifying the APIs even further.\n+\n+</docs-info>\n+\n+```tsx filename=app/routes.ts\n+import type { unstable_RSCRouteConfig as RSCRouteConfig } from \"react-router\";\n+\n+export function routes() {\n+  return [\n+    {\n+      id: \"root\",\n+      path: \"\",\n+      lazy: () => import(\"./root/route\"),\n+      children: [\n+        {\n+          id: \"home\",\n+          index: true,\n+          lazy: () => import(\"./home/route\"),\n+        },\n+        {\n+          id: \"about\",\n+          path: \"about\",\n+          lazy: () => import(\"./about/route\"),\n+        },\n+      ],\n+    },\n+  ] satisfies RSCRouteConfig;\n }\n+```\n \n-export default function ProductPage({\n-  loaderData,\n-}: Route.ComponentProps) {\n+### Server Component Routes\n+\n+By default each route's `default` export renders a Server Component\n+\n+```tsx\n+export default function Home() {\n   return (\n-    <div>\n-      {loaderData.product}\n-      <Suspense fallback={<div>loading...</div>}>\n-        {loaderData.reviews}\n-      </Suspense>\n-    </div>\n+    <main>\n+      <article>\n+        <h1>Welcome to React Router RSC</h1>\n+        <p>\n+          You won't find me running any JavaScript in the\n+          browser!\n+        </p>\n+      </article>\n+    </main>\n   );\n }\n ```\n \n-```tsx filename=app/product.tsx\n-export async function Product({ id }: { id: string }) {\n-  const product = await fakeDb.getProduct(id);\n+A nice feature of Server Components is that you can fetch data directly from your component by making it asynchronous.\n+\n+```tsx\n+export default async function Home() {\n+  let user = await getUserData();\n+\n+  return (\n+    <main>\n+      <article>\n+        <h1>Welcome to React Router RSC</h1>\n+        <p>\n+          You won't find me running any JavaScript in the\n+          browser!\n+        </p>\n+        <p>\n+          Hello, {user ? user.name : \"anonymous person\"}!\n+        </p>\n+      </article>\n+    </main>\n+  );\n+}\n+```\n+\n+<docs-info>\n+\n+Server Components can also be returned from your loaders and actions. In general, if you are using RSC to build your application, loaders are primarily useful for things like setting `status` codes or return `redirect`s.\n+\n+Using Server Components in loaders can be helpful for incremental adoption of RSC.\n+\n+</docs-info>\n+\n+### Server Functions\n+\n+[Server Functions][react-server-functions-doc] are a React feature that allow you to call async functions executed on the server. They're defined with the [`\"use server\"`][use-server-docs] directive.",
        "comment_created_at": "2025-07-11T13:28:43+00:00",
        "comment_author": "brookslybrand",
        "comment_body": "According to the [React docs](https://react.dev/reference/rsc/use-server#use-server)\n\n> 'use server' must be at the very beginning of their function or module; above any other code including imports (comments above directives are OK). They must be written with single or double quotes, not backticks.\n\nIn this case I'm okay leaving the specifics details on how to use `\"use server\"` on the React docs that we link",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2199173952",
    "pr_number": 13971,
    "pr_file": "docs/how-to/react-server-components.md",
    "created_at": "2025-07-11T01:00:04+00:00",
    "commented_code": "---\n-title: React Server Components\n-# need to ship it first!\n-hidden: true\n+title: React Server Components (unstable)\n+unstable: true\n ---\n \n # React Server Components\n \n-<docs-info>This feature is still in development and not yet available.</docs-info>\n+[MODES: data]\n \n-In the future, async components can be rendered in loaders like any other data:\n+<br/>\n+<br/>\n \n-```tsx filename=app/product-page.tsx\n-// route(\"products/:pid\", \"./product-page.tsx\");\n-import type { Route } from \"./+types/product\";\n-import Product from \"./product\";\n-import Reviews from \"./reviews\";\n+<docs-warning>React Server Components support is experimental and subject to breaking changes.</docs-warning>\n \n-export async function loader({ params }: Route.LoaderArgs) {\n-  return {\n-    product: <Product id={params.pid} />,\n-    reviews: <Reviews productId={params.pid} />,\n-  };\n+React Server Components (RSC) refers generally to an architecture and set of APIs provided by React since version 19.\n+\n+From the docs:\n+\n+> Server Components are a new type of Component that renders ahead of time, before bundling, in an environment separate from your client app or SSR server.\n+> <cite>- [React \"Server Components\" docs][react-server-components-doc]</cite>\n+\n+React Router provides a set of APIs for integrating with RSC-native bundlers, allowing you to leverage [Server Components][react-server-components-doc] and [Server Functions][react-server-functions-doc] in your React Router applications.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2199173952",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13971,
        "pr_file": "docs/how-to/react-server-components.md",
        "discussion_id": "2199173952",
        "commented_code": "@@ -1,50 +1,738 @@\n ---\n-title: React Server Components\n-# need to ship it first!\n-hidden: true\n+title: React Server Components (unstable)\n+unstable: true\n ---\n \n # React Server Components\n \n-<docs-info>This feature is still in development and not yet available.</docs-info>\n+[MODES: data]\n \n-In the future, async components can be rendered in loaders like any other data:\n+<br/>\n+<br/>\n \n-```tsx filename=app/product-page.tsx\n-// route(\"products/:pid\", \"./product-page.tsx\");\n-import type { Route } from \"./+types/product\";\n-import Product from \"./product\";\n-import Reviews from \"./reviews\";\n+<docs-warning>React Server Components support is experimental and subject to breaking changes.</docs-warning>\n \n-export async function loader({ params }: Route.LoaderArgs) {\n-  return {\n-    product: <Product id={params.pid} />,\n-    reviews: <Reviews productId={params.pid} />,\n-  };\n+React Server Components (RSC) refers generally to an architecture and set of APIs provided by React since version 19.\n+\n+From the docs:\n+\n+> Server Components are a new type of Component that renders ahead of time, before bundling, in an environment separate from your client app or SSR server.\n+> <cite>- [React \"Server Components\" docs][react-server-components-doc]</cite>\n+\n+React Router provides a set of APIs for integrating with RSC-native bundlers, allowing you to leverage [Server Components][react-server-components-doc] and [Server Functions][react-server-functions-doc] in your React Router applications.",
        "comment_created_at": "2025-07-11T01:00:04+00:00",
        "comment_author": "markdalgleish",
        "comment_body": "With Vite's RSC support currently being a plugin rather than being built-in, my original use of the word \"native\" doesn't quite apply.\r\n\r\n```suggestion\r\nReact Router provides a set of APIs for integrating with RSC-compatible bundlers, allowing you to leverage [Server Components][react-server-components-doc] and [Server Functions][react-server-functions-doc] in your React Router applications.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2200762524",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13971,
        "pr_file": "docs/how-to/react-server-components.md",
        "discussion_id": "2199173952",
        "commented_code": "@@ -1,50 +1,738 @@\n ---\n-title: React Server Components\n-# need to ship it first!\n-hidden: true\n+title: React Server Components (unstable)\n+unstable: true\n ---\n \n # React Server Components\n \n-<docs-info>This feature is still in development and not yet available.</docs-info>\n+[MODES: data]\n \n-In the future, async components can be rendered in loaders like any other data:\n+<br/>\n+<br/>\n \n-```tsx filename=app/product-page.tsx\n-// route(\"products/:pid\", \"./product-page.tsx\");\n-import type { Route } from \"./+types/product\";\n-import Product from \"./product\";\n-import Reviews from \"./reviews\";\n+<docs-warning>React Server Components support is experimental and subject to breaking changes.</docs-warning>\n \n-export async function loader({ params }: Route.LoaderArgs) {\n-  return {\n-    product: <Product id={params.pid} />,\n-    reviews: <Reviews productId={params.pid} />,\n-  };\n+React Server Components (RSC) refers generally to an architecture and set of APIs provided by React since version 19.\n+\n+From the docs:\n+\n+> Server Components are a new type of Component that renders ahead of time, before bundling, in an environment separate from your client app or SSR server.\n+> <cite>- [React \"Server Components\" docs][react-server-components-doc]</cite>\n+\n+React Router provides a set of APIs for integrating with RSC-native bundlers, allowing you to leverage [Server Components][react-server-components-doc] and [Server Functions][react-server-functions-doc] in your React Router applications.",
        "comment_created_at": "2025-07-11T13:31:54+00:00",
        "comment_author": "brookslybrand",
        "comment_body": "Ah yeah, that makes sense. Thanks for the suggested terminology update",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2199183605",
    "pr_number": 13971,
    "pr_file": "docs/how-to/react-server-components.md",
    "created_at": "2025-07-11T01:01:52+00:00",
    "commented_code": "---\n-title: React Server Components\n-# need to ship it first!\n-hidden: true\n+title: React Server Components (unstable)\n+unstable: true\n ---\n \n # React Server Components\n \n-<docs-info>This feature is still in development and not yet available.</docs-info>\n+[MODES: data]\n \n-In the future, async components can be rendered in loaders like any other data:\n+<br/>\n+<br/>\n \n-```tsx filename=app/product-page.tsx\n-// route(\"products/:pid\", \"./product-page.tsx\");\n-import type { Route } from \"./+types/product\";\n-import Product from \"./product\";\n-import Reviews from \"./reviews\";\n+<docs-warning>React Server Components support is experimental and subject to breaking changes.</docs-warning>\n \n-export async function loader({ params }: Route.LoaderArgs) {\n-  return {\n-    product: <Product id={params.pid} />,\n-    reviews: <Reviews productId={params.pid} />,\n-  };\n+React Server Components (RSC) refers generally to an architecture and set of APIs provided by React since version 19.\n+\n+From the docs:\n+\n+> Server Components are a new type of Component that renders ahead of time, before bundling, in an environment separate from your client app or SSR server.\n+> <cite>- [React \"Server Components\" docs][react-server-components-doc]</cite>\n+\n+React Router provides a set of APIs for integrating with RSC-native bundlers, allowing you to leverage [Server Components][react-server-components-doc] and [Server Functions][react-server-functions-doc] in your React Router applications.\n+\n+## Quick Start\n+\n+The quickest way to get started is with one of our templates.\n+\n+These templates come with React Router RSC APIs already configured with the respective bundler, offering you out of the box features such as:\n+\n+- Server Components Routes\n+- Server Side Rendering (SSR)\n+- Client Components (via [`\"use client\"`][use-client-docs] directive)\n+- Server Functions (via [`\"use server\"`][use-server-docs] directive)\n+\n+**Parcel Template**\n+\n+```shellscript\n+npx create-react-router-app@latest --template=unstable_rsc-parcel\n+```\n+\n+**Vite Template**\n+\n+```shellscript\n+npx create-react-router-app@latest --template=unstable_rsc-vite\n+```\n+\n+## Using RSC with React Router\n+\n+### Configuring Routes\n+\n+Routes are configured as an argument to [`matchRSCServerRequest`][match-rsc-server-request]. At a minimum, you need a path and component:\n+\n+```tsx\n+function Root() {\n+  return <h1>Hello world</h1>;\n+}\n+\n+matchRSCServerRequest({\n+  // ...other options\n+  routes: [{ path: \"/\", Component: Root }],\n+});\n+```\n+\n+While you can define components inline, we recommend using the `lazy()` option and defining [Route Modules][route-module] for both startup performance and code organization\n+\n+<docs-info>\n+\n+The [Route Modules][route-module] up until now have been a [Framework Mode][framework-mode] only feature. However, the `lazy` field of the RSC route config expects the same exports as the Route Module exports, unifying the APIs even further.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2199183605",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13971,
        "pr_file": "docs/how-to/react-server-components.md",
        "discussion_id": "2199183605",
        "commented_code": "@@ -1,50 +1,738 @@\n ---\n-title: React Server Components\n-# need to ship it first!\n-hidden: true\n+title: React Server Components (unstable)\n+unstable: true\n ---\n \n # React Server Components\n \n-<docs-info>This feature is still in development and not yet available.</docs-info>\n+[MODES: data]\n \n-In the future, async components can be rendered in loaders like any other data:\n+<br/>\n+<br/>\n \n-```tsx filename=app/product-page.tsx\n-// route(\"products/:pid\", \"./product-page.tsx\");\n-import type { Route } from \"./+types/product\";\n-import Product from \"./product\";\n-import Reviews from \"./reviews\";\n+<docs-warning>React Server Components support is experimental and subject to breaking changes.</docs-warning>\n \n-export async function loader({ params }: Route.LoaderArgs) {\n-  return {\n-    product: <Product id={params.pid} />,\n-    reviews: <Reviews productId={params.pid} />,\n-  };\n+React Server Components (RSC) refers generally to an architecture and set of APIs provided by React since version 19.\n+\n+From the docs:\n+\n+> Server Components are a new type of Component that renders ahead of time, before bundling, in an environment separate from your client app or SSR server.\n+> <cite>- [React \"Server Components\" docs][react-server-components-doc]</cite>\n+\n+React Router provides a set of APIs for integrating with RSC-native bundlers, allowing you to leverage [Server Components][react-server-components-doc] and [Server Functions][react-server-functions-doc] in your React Router applications.\n+\n+## Quick Start\n+\n+The quickest way to get started is with one of our templates.\n+\n+These templates come with React Router RSC APIs already configured with the respective bundler, offering you out of the box features such as:\n+\n+- Server Components Routes\n+- Server Side Rendering (SSR)\n+- Client Components (via [`\"use client\"`][use-client-docs] directive)\n+- Server Functions (via [`\"use server\"`][use-server-docs] directive)\n+\n+**Parcel Template**\n+\n+```shellscript\n+npx create-react-router-app@latest --template=unstable_rsc-parcel\n+```\n+\n+**Vite Template**\n+\n+```shellscript\n+npx create-react-router-app@latest --template=unstable_rsc-vite\n+```\n+\n+## Using RSC with React Router\n+\n+### Configuring Routes\n+\n+Routes are configured as an argument to [`matchRSCServerRequest`][match-rsc-server-request]. At a minimum, you need a path and component:\n+\n+```tsx\n+function Root() {\n+  return <h1>Hello world</h1>;\n+}\n+\n+matchRSCServerRequest({\n+  // ...other options\n+  routes: [{ path: \"/\", Component: Root }],\n+});\n+```\n+\n+While you can define components inline, we recommend using the `lazy()` option and defining [Route Modules][route-module] for both startup performance and code organization\n+\n+<docs-info>\n+\n+The [Route Modules][route-module] up until now have been a [Framework Mode][framework-mode] only feature. However, the `lazy` field of the RSC route config expects the same exports as the Route Module exports, unifying the APIs even further.",
        "comment_created_at": "2025-07-11T01:01:52+00:00",
        "comment_author": "markdalgleish",
        "comment_body": "Nit:\r\n\r\n```suggestion\r\nThe [Route Module API][route-module] up until now has been a [Framework Mode][framework-mode] only feature. However, the `lazy` field of the RSC route config expects the same exports as the Route Module exports, unifying the APIs even further.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2199189812",
    "pr_number": 13971,
    "pr_file": "docs/how-to/react-server-components.md",
    "created_at": "2025-07-11T01:03:03+00:00",
    "commented_code": "---\n-title: React Server Components\n-# need to ship it first!\n-hidden: true\n+title: React Server Components (unstable)\n+unstable: true\n ---\n \n # React Server Components\n \n-<docs-info>This feature is still in development and not yet available.</docs-info>\n+[MODES: data]\n \n-In the future, async components can be rendered in loaders like any other data:\n+<br/>\n+<br/>\n \n-```tsx filename=app/product-page.tsx\n-// route(\"products/:pid\", \"./product-page.tsx\");\n-import type { Route } from \"./+types/product\";\n-import Product from \"./product\";\n-import Reviews from \"./reviews\";\n+<docs-warning>React Server Components support is experimental and subject to breaking changes.</docs-warning>\n \n-export async function loader({ params }: Route.LoaderArgs) {\n-  return {\n-    product: <Product id={params.pid} />,\n-    reviews: <Reviews productId={params.pid} />,\n-  };\n+React Server Components (RSC) refers generally to an architecture and set of APIs provided by React since version 19.\n+\n+From the docs:\n+\n+> Server Components are a new type of Component that renders ahead of time, before bundling, in an environment separate from your client app or SSR server.\n+> <cite>- [React \"Server Components\" docs][react-server-components-doc]</cite>\n+\n+React Router provides a set of APIs for integrating with RSC-native bundlers, allowing you to leverage [Server Components][react-server-components-doc] and [Server Functions][react-server-functions-doc] in your React Router applications.\n+\n+## Quick Start\n+\n+The quickest way to get started is with one of our templates.\n+\n+These templates come with React Router RSC APIs already configured with the respective bundler, offering you out of the box features such as:\n+\n+- Server Components Routes\n+- Server Side Rendering (SSR)\n+- Client Components (via [`\"use client\"`][use-client-docs] directive)\n+- Server Functions (via [`\"use server\"`][use-server-docs] directive)\n+\n+**Parcel Template**\n+\n+```shellscript\n+npx create-react-router-app@latest --template=unstable_rsc-parcel\n+```\n+\n+**Vite Template**\n+\n+```shellscript\n+npx create-react-router-app@latest --template=unstable_rsc-vite\n+```\n+\n+## Using RSC with React Router\n+\n+### Configuring Routes\n+\n+Routes are configured as an argument to [`matchRSCServerRequest`][match-rsc-server-request]. At a minimum, you need a path and component:\n+\n+```tsx\n+function Root() {\n+  return <h1>Hello world</h1>;\n+}\n+\n+matchRSCServerRequest({\n+  // ...other options\n+  routes: [{ path: \"/\", Component: Root }],\n+});\n+```\n+\n+While you can define components inline, we recommend using the `lazy()` option and defining [Route Modules][route-module] for both startup performance and code organization\n+\n+<docs-info>\n+\n+The [Route Modules][route-module] up until now have been a [Framework Mode][framework-mode] only feature. However, the `lazy` field of the RSC route config expects the same exports as the Route Module exports, unifying the APIs even further.\n+\n+</docs-info>\n+\n+```tsx filename=app/routes.ts\n+import type { unstable_RSCRouteConfig as RSCRouteConfig } from \"react-router\";\n+\n+export function routes() {\n+  return [\n+    {\n+      id: \"root\",\n+      path: \"\",\n+      lazy: () => import(\"./root/route\"),\n+      children: [\n+        {\n+          id: \"home\",\n+          index: true,\n+          lazy: () => import(\"./home/route\"),\n+        },\n+        {\n+          id: \"about\",\n+          path: \"about\",\n+          lazy: () => import(\"./about/route\"),\n+        },\n+      ],\n+    },\n+  ] satisfies RSCRouteConfig;\n }\n+```\n \n-export default function ProductPage({\n-  loaderData,\n-}: Route.ComponentProps) {\n+### Server Component Routes\n+\n+By default each route's `default` export renders a Server Component\n+\n+```tsx\n+export default function Home() {\n   return (\n-    <div>\n-      {loaderData.product}\n-      <Suspense fallback={<div>loading...</div>}>\n-        {loaderData.reviews}\n-      </Suspense>\n-    </div>\n+    <main>\n+      <article>\n+        <h1>Welcome to React Router RSC</h1>\n+        <p>\n+          You won't find me running any JavaScript in the\n+          browser!\n+        </p>\n+      </article>\n+    </main>\n   );\n }\n ```\n \n-```tsx filename=app/product.tsx\n-export async function Product({ id }: { id: string }) {\n-  const product = await fakeDb.getProduct(id);\n+A nice feature of Server Components is that you can fetch data directly from your component by making it asynchronous.\n+\n+```tsx\n+export default async function Home() {\n+  let user = await getUserData();\n+\n+  return (\n+    <main>\n+      <article>\n+        <h1>Welcome to React Router RSC</h1>\n+        <p>\n+          You won't find me running any JavaScript in the\n+          browser!\n+        </p>\n+        <p>\n+          Hello, {user ? user.name : \"anonymous person\"}!\n+        </p>\n+      </article>\n+    </main>\n+  );\n+}\n+```\n+\n+<docs-info>\n+\n+Server Components can also be returned from your loaders and actions. In general, if you are using RSC to build your application, loaders are primarily useful for things like setting `status` codes or return `redirect`s.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2199189812",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13971,
        "pr_file": "docs/how-to/react-server-components.md",
        "discussion_id": "2199189812",
        "commented_code": "@@ -1,50 +1,738 @@\n ---\n-title: React Server Components\n-# need to ship it first!\n-hidden: true\n+title: React Server Components (unstable)\n+unstable: true\n ---\n \n # React Server Components\n \n-<docs-info>This feature is still in development and not yet available.</docs-info>\n+[MODES: data]\n \n-In the future, async components can be rendered in loaders like any other data:\n+<br/>\n+<br/>\n \n-```tsx filename=app/product-page.tsx\n-// route(\"products/:pid\", \"./product-page.tsx\");\n-import type { Route } from \"./+types/product\";\n-import Product from \"./product\";\n-import Reviews from \"./reviews\";\n+<docs-warning>React Server Components support is experimental and subject to breaking changes.</docs-warning>\n \n-export async function loader({ params }: Route.LoaderArgs) {\n-  return {\n-    product: <Product id={params.pid} />,\n-    reviews: <Reviews productId={params.pid} />,\n-  };\n+React Server Components (RSC) refers generally to an architecture and set of APIs provided by React since version 19.\n+\n+From the docs:\n+\n+> Server Components are a new type of Component that renders ahead of time, before bundling, in an environment separate from your client app or SSR server.\n+> <cite>- [React \"Server Components\" docs][react-server-components-doc]</cite>\n+\n+React Router provides a set of APIs for integrating with RSC-native bundlers, allowing you to leverage [Server Components][react-server-components-doc] and [Server Functions][react-server-functions-doc] in your React Router applications.\n+\n+## Quick Start\n+\n+The quickest way to get started is with one of our templates.\n+\n+These templates come with React Router RSC APIs already configured with the respective bundler, offering you out of the box features such as:\n+\n+- Server Components Routes\n+- Server Side Rendering (SSR)\n+- Client Components (via [`\"use client\"`][use-client-docs] directive)\n+- Server Functions (via [`\"use server\"`][use-server-docs] directive)\n+\n+**Parcel Template**\n+\n+```shellscript\n+npx create-react-router-app@latest --template=unstable_rsc-parcel\n+```\n+\n+**Vite Template**\n+\n+```shellscript\n+npx create-react-router-app@latest --template=unstable_rsc-vite\n+```\n+\n+## Using RSC with React Router\n+\n+### Configuring Routes\n+\n+Routes are configured as an argument to [`matchRSCServerRequest`][match-rsc-server-request]. At a minimum, you need a path and component:\n+\n+```tsx\n+function Root() {\n+  return <h1>Hello world</h1>;\n+}\n+\n+matchRSCServerRequest({\n+  // ...other options\n+  routes: [{ path: \"/\", Component: Root }],\n+});\n+```\n+\n+While you can define components inline, we recommend using the `lazy()` option and defining [Route Modules][route-module] for both startup performance and code organization\n+\n+<docs-info>\n+\n+The [Route Modules][route-module] up until now have been a [Framework Mode][framework-mode] only feature. However, the `lazy` field of the RSC route config expects the same exports as the Route Module exports, unifying the APIs even further.\n+\n+</docs-info>\n+\n+```tsx filename=app/routes.ts\n+import type { unstable_RSCRouteConfig as RSCRouteConfig } from \"react-router\";\n+\n+export function routes() {\n+  return [\n+    {\n+      id: \"root\",\n+      path: \"\",\n+      lazy: () => import(\"./root/route\"),\n+      children: [\n+        {\n+          id: \"home\",\n+          index: true,\n+          lazy: () => import(\"./home/route\"),\n+        },\n+        {\n+          id: \"about\",\n+          path: \"about\",\n+          lazy: () => import(\"./about/route\"),\n+        },\n+      ],\n+    },\n+  ] satisfies RSCRouteConfig;\n }\n+```\n \n-export default function ProductPage({\n-  loaderData,\n-}: Route.ComponentProps) {\n+### Server Component Routes\n+\n+By default each route's `default` export renders a Server Component\n+\n+```tsx\n+export default function Home() {\n   return (\n-    <div>\n-      {loaderData.product}\n-      <Suspense fallback={<div>loading...</div>}>\n-        {loaderData.reviews}\n-      </Suspense>\n-    </div>\n+    <main>\n+      <article>\n+        <h1>Welcome to React Router RSC</h1>\n+        <p>\n+          You won't find me running any JavaScript in the\n+          browser!\n+        </p>\n+      </article>\n+    </main>\n   );\n }\n ```\n \n-```tsx filename=app/product.tsx\n-export async function Product({ id }: { id: string }) {\n-  const product = await fakeDb.getProduct(id);\n+A nice feature of Server Components is that you can fetch data directly from your component by making it asynchronous.\n+\n+```tsx\n+export default async function Home() {\n+  let user = await getUserData();\n+\n+  return (\n+    <main>\n+      <article>\n+        <h1>Welcome to React Router RSC</h1>\n+        <p>\n+          You won't find me running any JavaScript in the\n+          browser!\n+        </p>\n+        <p>\n+          Hello, {user ? user.name : \"anonymous person\"}!\n+        </p>\n+      </article>\n+    </main>\n+  );\n+}\n+```\n+\n+<docs-info>\n+\n+Server Components can also be returned from your loaders and actions. In general, if you are using RSC to build your application, loaders are primarily useful for things like setting `status` codes or return `redirect`s.",
        "comment_created_at": "2025-07-11T01:03:03+00:00",
        "comment_author": "markdalgleish",
        "comment_body": "```suggestion\r\nServer Components can also be returned from your loaders and actions. In general, if you are using RSC to build your application, loaders are primarily useful for things like setting `status` codes or returning a `redirect`.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1942276300",
    "pr_number": 12941,
    "pr_file": "decisions/0014-context-middleware.md",
    "created_at": "2025-02-05T05:42:21+00:00",
    "commented_code": "+# Middleware + Context\n+\n+Date: 2025-01-22\n+\n+Status: proposed\n+\n+## Context\n+\n+_Lol \"context\", get it \ud83d\ude09_\n+\n+The [Middleware RFC][rfc] is the _most-upvoted_ RFC/Proposal in the React Router repo. We actually tried to build and ship it quite some time ago but realized that without single fetch it didn't make much sense in an SSR world for 2 reasons:\n+\n+- With the individual HTTP requests per loader, middleware wouldn't actually reduce the # of queries to your DB/API's - it would just be a code convenience with no functional impact\n+- Individual HTTP requests meant a lack of a shared request scope across routes\n+\n+We've done a lot of work since then to get us to a place where we could ship a middleware API we were happy with:\n+\n+- Shipped [Single Fetch][single-fetch]\n+- Shipped [`dataStrategy`][data-strategy] for DIY middleware in React Router SPAs\n+- Iterated on middleware/context APIs in the [Remix the Web][remix-the-web] project\n+- Developed a non-invasive type-safe + composable [context][async-provider] API\n+\n+## Decision\n+\n+### Lean on existing `context` parameter for initial implementation\n+\n+During our experiments we realized that we could offload type-safe context to an external package.This would result in a simpler implementation within React Router and avoid the need to try to patch on type-safety to our existing `context` API which was designed as a quick escape hatch to cross the bridge from your server (i.e., `express` `req`/`res`) to the Remix handlers.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1942276300",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12941,
        "pr_file": "decisions/0014-context-middleware.md",
        "discussion_id": "1942276300",
        "commented_code": "@@ -0,0 +1,262 @@\n+# Middleware + Context\n+\n+Date: 2025-01-22\n+\n+Status: proposed\n+\n+## Context\n+\n+_Lol \"context\", get it \ud83d\ude09_\n+\n+The [Middleware RFC][rfc] is the _most-upvoted_ RFC/Proposal in the React Router repo. We actually tried to build and ship it quite some time ago but realized that without single fetch it didn't make much sense in an SSR world for 2 reasons:\n+\n+- With the individual HTTP requests per loader, middleware wouldn't actually reduce the # of queries to your DB/API's - it would just be a code convenience with no functional impact\n+- Individual HTTP requests meant a lack of a shared request scope across routes\n+\n+We've done a lot of work since then to get us to a place where we could ship a middleware API we were happy with:\n+\n+- Shipped [Single Fetch][single-fetch]\n+- Shipped [`dataStrategy`][data-strategy] for DIY middleware in React Router SPAs\n+- Iterated on middleware/context APIs in the [Remix the Web][remix-the-web] project\n+- Developed a non-invasive type-safe + composable [context][async-provider] API\n+\n+## Decision\n+\n+### Lean on existing `context` parameter for initial implementation\n+\n+During our experiments we realized that we could offload type-safe context to an external package.This would result in a simpler implementation within React Router and avoid the need to try to patch on type-safety to our existing `context` API which was designed as a quick escape hatch to cross the bridge from your server (i.e., `express` `req`/`res`) to the Remix handlers.",
        "comment_created_at": "2025-02-05T05:42:21+00:00",
        "comment_author": "markdalgleish",
        "comment_body": "```suggestion\r\nDuring our experiments we realized that we could offload type-safe context to an external package. This would result in a simpler implementation within React Router and avoid the need to try to patch on type-safety to our existing `context` API which was designed as a quick escape hatch to cross the bridge from your server (i.e., `express` `req`/`res`) to the Remix handlers.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2183624551",
    "pr_number": 13614,
    "pr_file": ".changeset/brave-buttons-build.md",
    "created_at": "2025-07-03T19:35:50+00:00",
    "commented_code": "+---\n+\"@react-router/remix-routes-option-adapter\": patch\n+---\n+\n+chore: export `DefineRouteFunction` type from remix adapter",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2183624551",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13614,
        "pr_file": ".changeset/brave-buttons-build.md",
        "discussion_id": "2183624551",
        "commented_code": "@@ -0,0 +1,5 @@\n+---\n+\"@react-router/remix-routes-option-adapter\": patch\n+---\n+\n+chore: export `DefineRouteFunction` type from remix adapter",
        "comment_created_at": "2025-07-03T19:35:50+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "```suggestion\r\nExport `DefineRouteFunction` type alongside `DefineRoutesFunction`\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2145852344",
    "pr_number": 13236,
    "pr_file": "docs/how-to/accessibility.md",
    "created_at": "2025-06-13T18:38:28+00:00",
    "commented_code": "+---\n+title: Accessibility\n+---\n+\n+# Accessibility\n+\n+Accessibility in a React Router app looks a lot like accessibility on the web in general. Using proper semantic markup and following the [Web Content Accessibility Guidelines (WCAG)][wcag] will get you most of the way there.\n+\n+React Router makes certain accessibility practices the default where possible and provides APIs to help where it's not. We are actively exploring and developing new APIs to make this even easier in the future.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2145852344",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13236,
        "pr_file": "docs/how-to/accessibility.md",
        "discussion_id": "2145852344",
        "commented_code": "@@ -0,0 +1,34 @@\n+---\n+title: Accessibility\n+---\n+\n+# Accessibility\n+\n+Accessibility in a React Router app looks a lot like accessibility on the web in general. Using proper semantic markup and following the [Web Content Accessibility Guidelines (WCAG)][wcag] will get you most of the way there.\n+\n+React Router makes certain accessibility practices the default where possible and provides APIs to help where it's not. We are actively exploring and developing new APIs to make this even easier in the future.",
        "comment_created_at": "2025-06-13T18:38:28+00:00",
        "comment_author": "brookslybrand",
        "comment_body": "```suggestion\r\nReact Router makes certain accessibility practices the default where possible and provides APIs to help where it's not.\r\n```\r\n\r\nI'm not entirely sure what this was referencing at the time, and either we've fulfilled that promise or decided it didn't make sense. Either way, I'd prefer us no longer make this promise so open ended when there aren't current plans to add anything more around accessibility than what we've already added",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2095666434",
    "pr_number": 13586,
    "pr_file": "docs/start/framework/route-module.md",
    "created_at": "2025-05-19T13:02:51+00:00",
    "commented_code": "Route meta defines meta tags to be rendered in the `<head>` of the document.\n \n+<docs-warning>\n+\n+Since the version 19 of React, the use of the built-in `<meta>` support is recommended other the use of the `meta` function. You can find the documentation [here](https://react.dev/reference/react-dom/components/meta).",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2095666434",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13586,
        "pr_file": "docs/start/framework/route-module.md",
        "discussion_id": "2095666434",
        "commented_code": "@@ -311,6 +311,30 @@ export default function Root() {\n \n Route meta defines meta tags to be rendered in the `<head>` of the document.\n \n+<docs-warning>\n+\n+Since the version 19 of React, the use of the built-in `<meta>` support is recommended other the use of the `meta` function. You can find the documentation [here](https://react.dev/reference/react-dom/components/meta).",
        "comment_created_at": "2025-05-19T13:02:51+00:00",
        "comment_author": "timdorr",
        "comment_body": "```suggestion\nSince React 19, [using the built-in `<meta>` element](https://react.dev/reference/react-dom/components/meta) is recommended over the use of the route module's `meta` export.\n```\nImproved the grammar and clarity a bit here. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1935926575",
    "pr_number": 12894,
    "pr_file": ".changeset/unlucky-dolphins-chew.md",
    "created_at": "2025-01-30T16:38:16+00:00",
    "commented_code": "+---\n+\"@react-router/dev\": patch\n+\"react-router\": patch\n+---\n+\n+Disable Lazy Route Discovery for all `ssr:false` app and not just \"SPA Mode\" because there is no runtime server to serve the search-param-configured `/__manifest` requests",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1935926575",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12894,
        "pr_file": ".changeset/unlucky-dolphins-chew.md",
        "discussion_id": "1935926575",
        "commented_code": "@@ -0,0 +1,9 @@\n+---\n+\"@react-router/dev\": patch\n+\"react-router\": patch\n+---\n+\n+Disable Lazy Route Discovery for all `ssr:false` app and not just \"SPA Mode\" because there is no runtime server to serve the search-param-configured `/__manifest` requests",
        "comment_created_at": "2025-01-30T16:38:16+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "```suggestion\r\nDisable Lazy Route Discovery for all `ssr:false` apps and not just \"SPA Mode\" because there is no runtime server to serve the search-param-configured `__manifest` requests\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1929885010",
    "pr_number": 12838,
    "pr_file": "docs/start/framework/route-module.md",
    "created_at": "2025-01-26T22:28:54+00:00",
    "commented_code": ");\n }\n ```\n+### Default props passed to the Component\n+1. `params`: An object containing the route parameters (if any).\n+\n+2. `location`: An object providing details about the current location (e.g., pathname, search, etc.).\n+\n+3. `navigate`: A function to programmatically navigate to another route.\n+\n+4. `loaderData`: The data returned from the loader function assigned to the route. eg. A loader might fetch some data from an API and return it for the route to use.\n+\n+### Using props\n+```tsx filename=app/routes/my-route-with-default-params.tsx\n+import type { Route } from './+types/route-name'\n+\n+export default function MyRouteComponent({ \n+  loaderData, \n+  actionData,\n+  params, \n+  matches \n+}: Route.ComponentProps) {\n+  return (\n+    <div>\n+      <h1>Welcome to My Route with Props!</h1>\n+      <p>Loader Data: {JSON.stringify(loaderData)}</p>\n+      <p>Action Data: {JSON.stringify(actionData)}</p>\n+      <p>Route Parameters: {JSON.stringify(params)}</p>\n+      <p>Matched Routes: {JSON.stringify(matches)}</p>\n+    </div>\n+  );\n+}\n+```\n+\n+### Benefits of using props\n+1. Route data is directly accessible via props, leading to more readable code.\n+2. Route data can be automatically typed when Route is imported from `+types`.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1929885010",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12838,
        "pr_file": "docs/start/framework/route-module.md",
        "discussion_id": "1929885010",
        "commented_code": "@@ -39,6 +39,40 @@ export default function MyRouteComponent() {\n   );\n }\n ```\n+### Default props passed to the Component\n+1. `params`: An object containing the route parameters (if any).\n+\n+2. `location`: An object providing details about the current location (e.g., pathname, search, etc.).\n+\n+3. `navigate`: A function to programmatically navigate to another route.\n+\n+4. `loaderData`: The data returned from the loader function assigned to the route. eg. A loader might fetch some data from an API and return it for the route to use.\n+\n+### Using props\n+```tsx filename=app/routes/my-route-with-default-params.tsx\n+import type { Route } from './+types/route-name'\n+\n+export default function MyRouteComponent({ \n+  loaderData, \n+  actionData,\n+  params, \n+  matches \n+}: Route.ComponentProps) {\n+  return (\n+    <div>\n+      <h1>Welcome to My Route with Props!</h1>\n+      <p>Loader Data: {JSON.stringify(loaderData)}</p>\n+      <p>Action Data: {JSON.stringify(actionData)}</p>\n+      <p>Route Parameters: {JSON.stringify(params)}</p>\n+      <p>Matched Routes: {JSON.stringify(matches)}</p>\n+    </div>\n+  );\n+}\n+```\n+\n+### Benefits of using props\n+1. Route data is directly accessible via props, leading to more readable code.\n+2. Route data can be automatically typed when Route is imported from `+types`.",
        "comment_created_at": "2025-01-26T22:28:54+00:00",
        "comment_author": "timdorr",
        "comment_body": "```suggestion\r\n### Props passed to the Component\r\n\r\nWhen the component is rendered, it is provided the props defined in `Route.ComponentProps` that React Router will automatically generate for you. These props include: \r\n\r\n1. `loaderData`: The data returned from the `loader` function in this route module\r\n2. `actionData`: The data returned from the `action` function in this route module\r\n3. `params`: An object containing the route parameters (if any).\r\n4. `matches`: An array of all the matches in the current route tree.\r\n\r\nYou can use these props in place of hooks like `useLoaderData` or `useParams`. This may be preferrable because they will be automatically typed correctly for the route. \r\n\r\n### Using props\r\n```tsx filename=app/routes/my-route-with-default-params.tsx\r\nimport type { Route } from './+types/route-name'\r\n\r\nexport default function MyRouteComponent({ \r\n  loaderData, \r\n  actionData,\r\n  params, \r\n  matches \r\n}: Route.ComponentProps) {\r\n  return (\r\n    <div>\r\n      <h1>Welcome to My Route with Props!</h1>\r\n      <p>Loader Data: {JSON.stringify(loaderData)}</p>\r\n      <p>Action Data: {JSON.stringify(actionData)}</p>\r\n      <p>Route Parameters: {JSON.stringify(params)}</p>\r\n      <p>Matched Routes: {JSON.stringify(matches)}</p>\r\n    </div>\r\n  );\r\n}\r\n```\r\n```\r\n\r\nFixed up the actual props that are passed (`location` and `navigate` aren't in there) and clarified some of the language.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1892452489",
    "pr_number": 12592,
    "pr_file": "docs/how-to/spa.md",
    "created_at": "2024-12-19T15:15:18+00:00",
    "commented_code": "- Use React components to generate the initial page users see\n - Re-enable server rendering later without changing anything about your UI\n \n-This is also why your project still needs a dependency on `@react-router/node`.\n+React Router will still server render your index route to generate that index.html file. This is why your project still needs a dependency on `@react-router/node` and your routes need to be SSR-safe. That means you can't call `window` or other browser-only APIs, even when server rendering is disabled.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1892452489",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12592,
        "pr_file": "docs/how-to/spa.md",
        "discussion_id": "1892452489",
        "commented_code": "@@ -71,4 +71,4 @@ In contrast `react-router build` (with server rendering disabled) pre-renders yo\n - Use React components to generate the initial page users see\n - Re-enable server rendering later without changing anything about your UI\n \n-This is also why your project still needs a dependency on `@react-router/node`.\n+React Router will still server render your index route to generate that index.html file. This is why your project still needs a dependency on `@react-router/node` and your routes need to be SSR-safe. That means you can't call `window` or other browser-only APIs, even when server rendering is disabled.",
        "comment_created_at": "2024-12-19T15:15:18+00:00",
        "comment_author": "brookslybrand",
        "comment_body": "```suggestion\r\nReact Router will still server render your index route to generate that `index.html` file. This is why your project still needs a dependency on `@react-router/node` and your routes need to be SSR-safe. That means you can't call `window` or other browser-only APIs during the initial render, even when server rendering is disabled.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1909356225",
    "pr_number": 12618,
    "pr_file": "docs/start/framework/routing.md",
    "created_at": "2025-01-09T19:49:50+00:00",
    "commented_code": "```\n \n If you prefer to define your routes via file naming conventions rather than configuration, the `@react-router/fs-routes` package provides a [file system routing convention.][file-route-conventions]\n+These approaches can also be combined, as shown below:",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1909356225",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12618,
        "pr_file": "docs/start/framework/routing.md",
        "discussion_id": "1909356225",
        "commented_code": "@@ -50,6 +50,18 @@ export default [\n ```\n \n If you prefer to define your routes via file naming conventions rather than configuration, the `@react-router/fs-routes` package provides a [file system routing convention.][file-route-conventions]\n+These approaches can also be combined, as shown below:",
        "comment_created_at": "2025-01-09T19:49:50+00:00",
        "comment_author": "brookslybrand",
        "comment_body": "```suggestion\r\nIf you prefer to define your routes via file naming conventions rather than configuration, the `@react-router/fs-routes` package provides a [file system routing convention][file-route-conventions]. You can even combine different routing conventions if you like:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1892493080",
    "pr_number": 12584,
    "pr_file": "docs/upgrading/component-routes.md",
    "created_at": "2024-12-19T15:28:28+00:00",
    "commented_code": "[View our guide on configuring routes][configuring-routes] to learn more about the `routes.ts` file.\n \n-## 7. Boot the app\n+### 7. Configure Typegen",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1892493080",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12584,
        "pr_file": "docs/upgrading/component-routes.md",
        "discussion_id": "1892493080",
        "commented_code": "@@ -245,7 +245,37 @@ export default function Component() {\n \n [View our guide on configuring routes][configuring-routes] to learn more about the `routes.ts` file.\n \n-## 7. Boot the app\n+### 7. Configure Typegen",
        "comment_created_at": "2024-12-19T15:28:28+00:00",
        "comment_author": "timdorr",
        "comment_body": "```suggestion\r\n## 7. Enable type safety\r\n```\r\nMatching the remix upgrade doc: https://reactrouter.com/upgrading/remix#7-enable-type-safety",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1892494618",
    "pr_number": 12584,
    "pr_file": "docs/upgrading/router-provider.md",
    "created_at": "2024-12-19T15:29:07+00:00",
    "commented_code": "[View our guide on configuring routes][configuring-routes] to learn more about the `routes.ts` file and helper functions to further simplify the route definitions.\n \n-## 7. Boot the app\n+### 7. Configure Typegen",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1892494618",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12584,
        "pr_file": "docs/upgrading/router-provider.md",
        "discussion_id": "1892494618",
        "commented_code": "@@ -394,7 +394,37 @@ export default [\n \n [View our guide on configuring routes][configuring-routes] to learn more about the `routes.ts` file and helper functions to further simplify the route definitions.\n \n-## 7. Boot the app\n+### 7. Configure Typegen",
        "comment_created_at": "2024-12-19T15:29:07+00:00",
        "comment_author": "timdorr",
        "comment_body": "```suggestion\r\n## 7. Enable type safety\r\n```\r\nAlso matching the remix upgrade doc: https://reactrouter.com/upgrading/remix#7-enable-type-safety",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1889345631",
    "pr_number": 12572,
    "pr_file": "docs/start/framework/installation.md",
    "created_at": "2024-12-17T22:56:13+00:00",
    "commented_code": "npx create-react-router@latest my-react-router-app\n ```\n \n+You can also create a project using one of the many available deployment templates, which will configure your project for the hosting provider.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1889345631",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12572,
        "pr_file": "docs/start/framework/installation.md",
        "discussion_id": "1889345631",
        "commented_code": "@@ -11,6 +11,18 @@ Most projects start with a template. Let's use a basic template maintained by Re\n npx create-react-router@latest my-react-router-app\n ```\n \n+You can also create a project using one of the many available deployment templates, which will configure your project for the hosting provider.",
        "comment_created_at": "2024-12-17T22:56:13+00:00",
        "comment_author": "thomasgauvin",
        "comment_body": "```suggestion\r\nYou can also create a project using one of the many available [deployment templates](https://github.com/remix-run/react-router-templates), which will configure your project for the hosting provider.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1878569347",
    "pr_number": 12504,
    "pr_file": "docs/tutorials/framework.md",
    "created_at": "2024-12-10T17:59:03+00:00",
    "commented_code": "+---\n+title: Framework Tutorial\n+order: 1\n+---\n+\n+# Framework Tutorial\n+\n+We'll be building a small, but feature-rich app that lets you keep track of your contacts. There's no database or other \"production ready\" things, so we can stay focused on the features React Router gives you. We expect it to take about 30m if you're following along, otherwise it's a quick read.\n+\n+TODO: add screenshot\n+\n+\ud83d\udc49 **Every time you see this it means you need to do something in the app!**\n+\n+The rest is just there for your information and deeper understanding. Let's get to it.\n+\n+## Setup\n+\n+\ud83d\udc49 **Generate a basic template**\n+\n+```shellscript nonumber\n+npx create-react-router@latest --template remix-run/react-router/tutorial\n+```\n+\n+This uses a pretty bare-bones template but includes our css and data model, so we can focus on React Router.\n+\n+\ud83d\udc49 **Start the app**\n+\n+```shellscript nonumber\n+# cd into the app directory\n+cd {wherever you put the app}\n+\n+# install dependencies if you haven't already\n+npm install\n+\n+# start the server\n+npm run dev\n+```\n+\n+You should be able to open up [http://localhost:5173][http-localhost-5173] and see an unstyled screen that looks like this:\n+\n+<!-- img elements will look will be in the form: <!-- <img class=\"tutorial\" src=\"/_docs/v7_framework_tutorial/n.webp\" /> -->\n+\n+## The Root Route\n+\n+Note the file at `app/root.tsx`. This is what we call the [\"Root Route\"][root-route]. It's the first component in the UI that renders, so it typically contains the global layout for the page, as well as a the default [Error Boundary][error-boundaries].\n+\n+<details>\n+\n+<summary>Expand here to see the root component code</summary>\n+\n+```tsx filename=app/root.tsx\n+import {\n+  Form,\n+  Scripts,\n+  ScrollRestoration,\n+  isRouteErrorResponse,\n+} from \"react-router\";\n+import type { Route } from \"./+types/root\";\n+\n+import appStylesHref from \"./app.css?url\";\n+\n+export function Layout({\n+  children,\n+}: {\n+  children: React.ReactNode;\n+}) {\n+  return (\n+    <html lang=\"en\">\n+      <head>\n+        <meta charSet=\"utf-8\" />\n+        <meta\n+          name=\"viewport\"\n+          content=\"width=device-width, initial-scale=1\"\n+        />\n+        <link rel=\"stylesheet\" href={appStylesHref} />\n+      </head>\n+      <body>\n+        {children}\n+        <ScrollRestoration />\n+        <Scripts />\n+      </body>\n+    </html>\n+  );\n+}\n+\n+export default function App() {\n+  return (\n+    <>\n+      <div id=\"sidebar\">\n+        <h1>React Router Contacts</h1>\n+        <div>\n+          <Form id=\"search-form\" role=\"search\">\n+            <input\n+              aria-label=\"Search contacts\"\n+              id=\"q\"\n+              name=\"q\"\n+              placeholder=\"Search\"\n+              type=\"search\"\n+            />\n+            <div\n+              aria-hidden\n+              hidden={true}\n+              id=\"search-spinner\"\n+            />\n+          </Form>\n+          <Form method=\"post\">\n+            <button type=\"submit\">New</button>\n+          </Form>\n+        </div>\n+        <nav>\n+          <ul>\n+            <li>\n+              <a href={`/contacts/1`}>Your Name</a>\n+            </li>\n+            <li>\n+              <a href={`/contacts/2`}>Your Friend</a>\n+            </li>\n+          </ul>\n+        </nav>\n+      </div>\n+    </>\n+  );\n+}\n+\n+export function ErrorBoundary({\n+  error,\n+}: Route.ErrorBoundaryProps) {\n+  let message = \"Oops!\";\n+  let details = \"An unexpected error occurred.\";\n+  let stack: string | undefined;\n+\n+  if (isRouteErrorResponse(error)) {\n+    message = error.status === 404 ? \"404\" : \"Error\";\n+    details =\n+      error.status === 404\n+        ? \"The requested page could not be found.\"\n+        : error.statusText || details;\n+  } else if (\n+    import.meta.env.DEV &&\n+    error &&\n+    error instanceof Error\n+  ) {\n+    details = error.message;\n+    stack = error.stack;\n+  }\n+\n+  return (\n+    <main id=\"error-page\">\n+      <h1>{message}</h1>\n+      <p>{details}</p>\n+      {stack && (\n+        <pre>\n+          <code>{stack}</code>\n+        </pre>\n+      )}\n+    </main>\n+  );\n+}\n+```\n+\n+</details>\n+\n+## The Contact Route UI\n+\n+If you click on one of the sidebar items you'll get the default 404 page. Let's create a route that matches the url `/contacts/1`.\n+\n+\ud83d\udc49 **Create a contact route module**\n+\n+```shellscript nonumber\n+mkdir app/pages\n+touch app/pages/contact.tsx\n+```\n+\n+We could put this file anywhere we want, but to make things a bit more organized, we'll put all our routes inside the `app/pages` directory.\n+\n+You can also use [file-based routing if you prefer][file-route-conventions].\n+\n+\ud83d\udc49 **Configure the route**\n+\n+We need to tell React Router about our new route. `routes.ts` is a special file where we can configure all our routes.\n+\n+```tsx filename=routes.ts lines=[2,5]\n+import type { RouteConfig } from \"@react-router/dev/routes\";\n+import { route } from \"@react-router/dev/routes\";\n+\n+export default [\n+  route(\"contacts/:contactId\", \"pages/contact.tsx\"),\n+] satisfies RouteConfig;\n+```\n+\n+In the React Router `:` makes a segment dynamic. We just made the following urls match the `pages/contact.tsx` route module:\n+\n+- `/contacts/123`\n+- `/contacts/abc`\n+\n+\ud83d\udc49 **Add the contact component UI**\n+\n+It's just a bunch of elements, feel free to copy/paste.\n+\n+```tsx filename=app/pages/contact.tsx\n+import { Form } from \"react-router\";\n+\n+import type { ContactRecord } from \"../data\";\n+\n+export default function Contact() {\n+  const contact = {\n+    first: \"Your\",\n+    last: \"Name\",\n+    avatar: \"https://placecats.com/200/200\",\n+    twitter: \"your_handle\",\n+    notes: \"Some notes\",\n+    favorite: true,\n+  };\n+\n+  return (\n+    <div id=\"contact\">\n+      <div>\n+        <img\n+          alt={`${contact.first} ${contact.last} avatar`}\n+          key={contact.avatar}\n+          src={contact.avatar}\n+        />\n+      </div>\n+\n+      <div>\n+        <h1>\n+          {contact.first || contact.last ? (\n+            <>\n+              {contact.first} {contact.last}\n+            </>\n+          ) : (\n+            <i>No Name</i>\n+          )}\n+          <Favorite contact={contact} />\n+        </h1>\n+\n+        {contact.twitter ? (\n+          <p>\n+            <a\n+              href={`https://twitter.com/${contact.twitter}`}\n+            >\n+              {contact.twitter}\n+            </a>\n+          </p>\n+        ) : null}\n+\n+        {contact.notes ? <p>{contact.notes}</p> : null}\n+\n+        <div>\n+          <Form action=\"edit\">\n+            <button type=\"submit\">Edit</button>\n+          </Form>\n+\n+          <Form\n+            action=\"destroy\"\n+            method=\"post\"\n+            onSubmit={(event) => {\n+              const response = confirm(\n+                \"Please confirm you want to delete this record.\"\n+              );\n+              if (!response) {\n+                event.preventDefault();\n+              }\n+            }}\n+          >\n+            <button type=\"submit\">Delete</button>\n+          </Form>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+}\n+\n+function Favorite({\n+  contact,\n+}: {\n+  contact: Pick<ContactRecord, \"favorite\">;\n+}) {\n+  const favorite = contact.favorite;\n+\n+  return (\n+    <Form method=\"post\">\n+      <button\n+        aria-label={\n+          favorite\n+            ? \"Remove from favorites\"\n+            : \"Add to favorites\"\n+        }\n+        name=\"favorite\"\n+        value={favorite ? \"false\" : \"true\"}\n+      >\n+        {favorite ? \"\u2605\" : \"\u2606\"}\n+      </button>\n+    </Form>\n+  );\n+}\n+```\n+\n+Now if we click one of the links or visit [`/contacts/1`][contacts-1] we get ... nothing new?\n+\n+TODO: add screenshot\n+\n+## Nested Routes and Outlets\n+\n+React Router supports nested routing. In order for child routes to render inside of parent layouts, we need to render an [`Outlet`][outlet-component] in the parent. Let's fix it, open up `app/root.tsx` and render an outlet inside.\n+\n+\ud83d\udc49 **Render an [`<Outlet />`][outlet-component]**\n+\n+```tsx filename=app/root.tsx lines=[3,15-17]\n+import {\n+  Form,\n+  Outlet,\n+  Scripts,\n+  ScrollRestoration,\n+  isRouteErrorResponse,\n+} from \"react-router\";\n+\n+// existing imports & exports\n+\n+export default function App() {\n+  return (\n+    <>\n+      <div id=\"sidebar\">{/* other elements */}</div>\n+      <div id=\"detail\">\n+        <Outlet />\n+      </div>\n+    </>\n+  );\n+}\n+```\n+\n+Now the child route should be rendering through the outlet.\n+\n+TODO: add screenshot\n+\n+## Client Side Routing\n+\n+You may or may not have noticed, but when we click the links in the sidebar, the browser is doing a full document request for the next URL instead of client side routing.\n+\n+Client side routing allows our app to update the URL without requesting another document from the server. Instead, the app can immediately render new UI. Let's make it happen with [`<Link>`][link-component].\n+\n+\ud83d\udc49 **Change the sidebar `<a href>` to `<Link to>`**\n+\n+```tsx filename=app/root.tsx lines=[3,20,23]\n+import {\n+  Form,\n+  Link,\n+  Outlet,\n+  Scripts,\n+  ScrollRestoration,\n+  isRouteErrorResponse,\n+} from \"react-router\";\n+\n+// existing imports & exports\n+\n+export default function App() {\n+  return (\n+    <>\n+      <div id=\"sidebar\">\n+        {/* other elements */}\n+        <nav>\n+          <ul>\n+            <li>\n+              <Link to={`/contacts/1`}>Your Name</Link>\n+            </li>\n+            <li>\n+              <Link to={`/contacts/2`}>Your Friend</Link>\n+            </li>\n+          </ul>\n+        </nav>\n+      </div>\n+      {/* other elements */}\n+    </>\n+  );\n+}\n+```\n+\n+You can open the network tab in the browser devtools to see that it's not requesting documents anymore.\n+\n+## Loading Data\n+\n+URL segments, layouts, and data are more often than not coupled (tripled?) together. We can see it in this app already:\n+\n+| URL Segment         | Component   | Data               |\n+| ------------------- | ----------- | ------------------ |\n+| /                   | `<App>`     | list of contacts   |\n+| contacts/:contactId | `<Contact>` | individual contact |\n+\n+Because of this natural coupling, React Router has data conventions to get data into your route components easily.\n+\n+First we'll create and export a [`clientLoader`][client-loader] function in the root route and then render the data.\n+\n+\ud83d\udc49 **Export a `clientLoader` function from `app/root.tsx` and render the data**\n+\n+<docs-info>The following code has a type error in it, we'll fix it in the next section</docs-info>\n+\n+```tsx filename=app/root.tsx lines=[2,6-9,11-12,19-42]\n+// existing imports\n+import { getContacts } from \"./data\";\n+\n+// existing exports\n+\n+export async function clientLoader() {\n+  const contacts = await getContacts();\n+  return { contacts };\n+}\n+\n+export default function App({ loaderData }) {\n+  const { contacts } = loaderData;\n+\n+  return (\n+    <>\n+      <div id=\"sidebar\">\n+        {/* other elements */}\n+        <nav>\n+          {contacts.length ? (\n+            <ul>\n+              {contacts.map((contact) => (\n+                <li key={contact.id}>\n+                  <Link to={`contacts/${contact.id}`}>\n+                    {contact.first || contact.last ? (\n+                      <>\n+                        {contact.first} {contact.last}\n+                      </>\n+                    ) : (\n+                      <i>No Name</i>\n+                    )}\n+                    {contact.favorite ? (\n+                      <span>\u2605</span>\n+                    ) : null}\n+                  </Link>\n+                </li>\n+              ))}\n+            </ul>\n+          ) : (\n+            <p>\n+              <i>No contacts</i>\n+            </p>\n+          )}\n+        </nav>\n+      </div>\n+      {/* other elements */}\n+    </>\n+  );\n+}\n+```\n+\n+That's it! React Router will now automatically keep that data in sync with your UI. The sidebar should now look like this:\n+\n+TODO: add screenshot\n+\n+You may be wondering why we're \"client\" loading data instead of loading the data on the server so we can do server-side rendering (SSR). Right now our contacts site is a [Single Page App][spa], so there's no server-side rendering. This makes it really easy to deploy to any static hosting provider, but we'll talk more about how to enable SSR in a bit so you can learn about all the different [rendering strategies][rendering-strategies] React Router offers.\n+\n+## Type Safety\n+\n+You probably noticed that we didn't assign a type to the `loaderData` prop. Let's fix that.\n+\n+\ud83d\udc49 **Add the `ComponentProps` type to the `App` component**\n+\n+```tsx filename=app/root.tsx lines=[5-7]\n+// existing imports\n+import type { Route } from \"./+types/root\";\n+// existing imports & exports\n+\n+export default function App({\n+  loaderData,\n+}: Route.ComponentProps) {\n+  const { contacts } = loaderData;\n+\n+  // existing code\n+}\n+```\n+\n+Wait, what? Where did these types come from?!\n+\n+We didn't define them, yet somehow they already know about the `contacts` property we returned from our `clientLoader`.\n+\n+That's because React Router [generates types for each route in your app][type-safety] to provide automatic type safety.\n+\n+## Adding a `HydrateFallback`\n+\n+We mentioned earlier that we are working on a [Single Page App][spa] with no server-side rendering. If you look inside of [`react-router.config.ts`][react-router-config] you'll see that this is configured with a simple boolean:\n+\n+```tsx filename=react-router.config.ts lines=[4]\n+import { type Config } from \"@react-router/dev/config\";\n+\n+export default {\n+  ssr: false,\n+} satisfies Config;\n+```\n+\n+You might have started noticing that whenever your refresh the page you get a flash of white before the app loads. Since we're only rendering on the client, there's nothing to show the user while the app is loading.\n+\n+\ud83d\udc49 **Add a `HydrateFallback` export**\n+\n+We can provide a fallback that will show up before the app is hydrated (rendering on the client for the first time) with a [`HydrateFallback`][hydrate-fallback] export.\n+\n+```tsx filename=app/root.tsx lines=[3-10]\n+// existing imports & exports\n+\n+export function HydrateFallback() {\n+  return (\n+    <div id=\"loading-splash\">\n+      <div id=\"loading-splash-spinner\" />\n+      <p>Loading, please wait...</p>\n+    </div>\n+  );\n+}\n+```\n+\n+Now if you refresh the page, you'll briefly see the loading splash before the app is hydrated.\n+\n+TODO: add screenshot\n+\n+## Adding an about page\n+\n+Before we move on to working dynamic data that the user can interact with, let's add a static page with content that we expect to rarely change. An about page will be perfect for this.\n+\n+\ud83d\udc49 **Create the about route**\n+\n+```shellscript nonumber\n+touch app/pages/about.tsx\n+```\n+\n+Don't forget to add the route to `app/routes.ts`:\n+\n+```tsx filename=app/routes.ts lines=[3]\n+export default [\n+  route(\"contacts/:contactId\", \"pages/contact.tsx\"),\n+  route(\"about\", \"pages/about.tsx\"),\n+] satisfies RouteConfig;\n+```\n+\n+\ud83d\udc49 **Add the about page UI**\n+\n+Nothing too special here, just copy and paste:\n+\n+```tsx filename=app/pages/about.tsx\n+import { Link } from \"react-router\";\n+\n+export default function About() {\n+  return (\n+    <div id=\"about\">\n+      <Link to=\"/\">\u2190 Go to demo</Link>\n+      <h1>About React Router Contacts</h1>\n+\n+      <div>\n+        <p>\n+          This is a demo application showing off some of the\n+          powerful features of React Router, including\n+          dynamic routing, nested routes, loaders, actions,\n+          and more.\n+        </p>\n+\n+        <h2>Features</h2>\n+        <p>\n+          Explore the demo to see how React Router handles:\n+        </p>\n+        <ul>\n+          <li>\n+            Data loading and mutations with loaders and\n+            actions\n+          </li>\n+          <li>\n+            Nested routing with parent/child relationships\n+          </li>\n+          <li>URL-based routing with dynamic segments</li>\n+          <li>Pending and optimistic UI</li>\n+        </ul>\n+\n+        <h2>Learn More</h2>\n+        <p>\n+          Check out the official documentation at{\" \"}\n+          <a href=\"https://reactrouter.com\">\n+            reactrouter.com\n+          </a>{\" \"}\n+          to learn more about building great web\n+          applications with React Router.\n+        </p>\n+      </div>\n+    </div>\n+  );\n+}\n+```\n+\n+\ud83d\udc49 **Add a link to the about page in the sidebar**\n+\n+```tsx filename=app/root.tsx lines=[5-7]\n+export default function App() {\n+  return (\n+    <>\n+      <div id=\"sidebar\">\n+        <h1>\n+          <Link to=\"about\">React Router Contacts</Link>\n+        </h1>\n+        {/* other elements */}\n+      </div>\n+      {/* other elements */}\n+    </>\n+  );\n+}\n+```\n+\n+Now navigate to the [about page][about-page] and it should look like this:\n+\n+TODO: add screenshot\n+\n+## Index Routes\n+\n+When we load up the app and we're not on the about page, you'll notice a big blank page on the right side of our list.\n+\n+TODO: add screenshot\n+\n+When a route has children, and you're at the parent route's path, the `<Outlet>` has nothing to render because no children match. You can think of [index routes][index-route] as the default child route to fill in that space.\n+\n+\ud83d\udc49 **Create an index route for the root route**\n+\n+```shellscript nonumber\n+touch app/pages/home.tsx\n+```\n+\n+```ts filename=app/routes.ts lines=[2,5]\n+import type { RouteConfig } from \"@react-router/dev/routes\";\n+import { index, route } from \"@react-router/dev/routes\";\n+\n+export default [\n+  index(\"pages/home.tsx\"),\n+  route(\"contacts/:contactId\", \"pages/contact.tsx\"),\n+  route(\"about\", \"pages/about.tsx\"),\n+] satisfies RouteConfig;\n+```\n+\n+\ud83d\udc49 **Fill in the index component's elements**\n+\n+Feel free to copy/paste, nothing special here.\n+\n+```tsx filename=app/pages/home.tsx\n+export default function Home() {\n+  return (\n+    <p id=\"index-page\">\n+      This is a demo for React Router.\n+      <br />\n+      Check out{\" \"}\n+      <a href=\"https://reactrouter.com\">\n+        the docs at reactrouter.com\n+      </a>\n+      .\n+    </p>\n+  );\n+}\n+```\n+\n+TODO: add screenshot\n+\n+Voil\u00e0! No more blank space. It's common to put dashboards, stats, feeds, etc. at index routes. They can participate in data loading as well.\n+\n+## Layout Routes\n+\n+We don't actually want the about page to be nested inside of the sidebar layout. Let's move the sidebar to a layout and apply it to the about page. Additionally, we want to avoid loading all the contacts data on the about page.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1878569347",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12504,
        "pr_file": "docs/tutorials/framework.md",
        "discussion_id": "1878569347",
        "commented_code": "@@ -0,0 +1,1960 @@\n+---\n+title: Framework Tutorial\n+order: 1\n+---\n+\n+# Framework Tutorial\n+\n+We'll be building a small, but feature-rich app that lets you keep track of your contacts. There's no database or other \"production ready\" things, so we can stay focused on the features React Router gives you. We expect it to take about 30m if you're following along, otherwise it's a quick read.\n+\n+TODO: add screenshot\n+\n+\ud83d\udc49 **Every time you see this it means you need to do something in the app!**\n+\n+The rest is just there for your information and deeper understanding. Let's get to it.\n+\n+## Setup\n+\n+\ud83d\udc49 **Generate a basic template**\n+\n+```shellscript nonumber\n+npx create-react-router@latest --template remix-run/react-router/tutorial\n+```\n+\n+This uses a pretty bare-bones template but includes our css and data model, so we can focus on React Router.\n+\n+\ud83d\udc49 **Start the app**\n+\n+```shellscript nonumber\n+# cd into the app directory\n+cd {wherever you put the app}\n+\n+# install dependencies if you haven't already\n+npm install\n+\n+# start the server\n+npm run dev\n+```\n+\n+You should be able to open up [http://localhost:5173][http-localhost-5173] and see an unstyled screen that looks like this:\n+\n+<!-- img elements will look will be in the form: <!-- <img class=\"tutorial\" src=\"/_docs/v7_framework_tutorial/n.webp\" /> -->\n+\n+## The Root Route\n+\n+Note the file at `app/root.tsx`. This is what we call the [\"Root Route\"][root-route]. It's the first component in the UI that renders, so it typically contains the global layout for the page, as well as a the default [Error Boundary][error-boundaries].\n+\n+<details>\n+\n+<summary>Expand here to see the root component code</summary>\n+\n+```tsx filename=app/root.tsx\n+import {\n+  Form,\n+  Scripts,\n+  ScrollRestoration,\n+  isRouteErrorResponse,\n+} from \"react-router\";\n+import type { Route } from \"./+types/root\";\n+\n+import appStylesHref from \"./app.css?url\";\n+\n+export function Layout({\n+  children,\n+}: {\n+  children: React.ReactNode;\n+}) {\n+  return (\n+    <html lang=\"en\">\n+      <head>\n+        <meta charSet=\"utf-8\" />\n+        <meta\n+          name=\"viewport\"\n+          content=\"width=device-width, initial-scale=1\"\n+        />\n+        <link rel=\"stylesheet\" href={appStylesHref} />\n+      </head>\n+      <body>\n+        {children}\n+        <ScrollRestoration />\n+        <Scripts />\n+      </body>\n+    </html>\n+  );\n+}\n+\n+export default function App() {\n+  return (\n+    <>\n+      <div id=\"sidebar\">\n+        <h1>React Router Contacts</h1>\n+        <div>\n+          <Form id=\"search-form\" role=\"search\">\n+            <input\n+              aria-label=\"Search contacts\"\n+              id=\"q\"\n+              name=\"q\"\n+              placeholder=\"Search\"\n+              type=\"search\"\n+            />\n+            <div\n+              aria-hidden\n+              hidden={true}\n+              id=\"search-spinner\"\n+            />\n+          </Form>\n+          <Form method=\"post\">\n+            <button type=\"submit\">New</button>\n+          </Form>\n+        </div>\n+        <nav>\n+          <ul>\n+            <li>\n+              <a href={`/contacts/1`}>Your Name</a>\n+            </li>\n+            <li>\n+              <a href={`/contacts/2`}>Your Friend</a>\n+            </li>\n+          </ul>\n+        </nav>\n+      </div>\n+    </>\n+  );\n+}\n+\n+export function ErrorBoundary({\n+  error,\n+}: Route.ErrorBoundaryProps) {\n+  let message = \"Oops!\";\n+  let details = \"An unexpected error occurred.\";\n+  let stack: string | undefined;\n+\n+  if (isRouteErrorResponse(error)) {\n+    message = error.status === 404 ? \"404\" : \"Error\";\n+    details =\n+      error.status === 404\n+        ? \"The requested page could not be found.\"\n+        : error.statusText || details;\n+  } else if (\n+    import.meta.env.DEV &&\n+    error &&\n+    error instanceof Error\n+  ) {\n+    details = error.message;\n+    stack = error.stack;\n+  }\n+\n+  return (\n+    <main id=\"error-page\">\n+      <h1>{message}</h1>\n+      <p>{details}</p>\n+      {stack && (\n+        <pre>\n+          <code>{stack}</code>\n+        </pre>\n+      )}\n+    </main>\n+  );\n+}\n+```\n+\n+</details>\n+\n+## The Contact Route UI\n+\n+If you click on one of the sidebar items you'll get the default 404 page. Let's create a route that matches the url `/contacts/1`.\n+\n+\ud83d\udc49 **Create a contact route module**\n+\n+```shellscript nonumber\n+mkdir app/pages\n+touch app/pages/contact.tsx\n+```\n+\n+We could put this file anywhere we want, but to make things a bit more organized, we'll put all our routes inside the `app/pages` directory.\n+\n+You can also use [file-based routing if you prefer][file-route-conventions].\n+\n+\ud83d\udc49 **Configure the route**\n+\n+We need to tell React Router about our new route. `routes.ts` is a special file where we can configure all our routes.\n+\n+```tsx filename=routes.ts lines=[2,5]\n+import type { RouteConfig } from \"@react-router/dev/routes\";\n+import { route } from \"@react-router/dev/routes\";\n+\n+export default [\n+  route(\"contacts/:contactId\", \"pages/contact.tsx\"),\n+] satisfies RouteConfig;\n+```\n+\n+In the React Router `:` makes a segment dynamic. We just made the following urls match the `pages/contact.tsx` route module:\n+\n+- `/contacts/123`\n+- `/contacts/abc`\n+\n+\ud83d\udc49 **Add the contact component UI**\n+\n+It's just a bunch of elements, feel free to copy/paste.\n+\n+```tsx filename=app/pages/contact.tsx\n+import { Form } from \"react-router\";\n+\n+import type { ContactRecord } from \"../data\";\n+\n+export default function Contact() {\n+  const contact = {\n+    first: \"Your\",\n+    last: \"Name\",\n+    avatar: \"https://placecats.com/200/200\",\n+    twitter: \"your_handle\",\n+    notes: \"Some notes\",\n+    favorite: true,\n+  };\n+\n+  return (\n+    <div id=\"contact\">\n+      <div>\n+        <img\n+          alt={`${contact.first} ${contact.last} avatar`}\n+          key={contact.avatar}\n+          src={contact.avatar}\n+        />\n+      </div>\n+\n+      <div>\n+        <h1>\n+          {contact.first || contact.last ? (\n+            <>\n+              {contact.first} {contact.last}\n+            </>\n+          ) : (\n+            <i>No Name</i>\n+          )}\n+          <Favorite contact={contact} />\n+        </h1>\n+\n+        {contact.twitter ? (\n+          <p>\n+            <a\n+              href={`https://twitter.com/${contact.twitter}`}\n+            >\n+              {contact.twitter}\n+            </a>\n+          </p>\n+        ) : null}\n+\n+        {contact.notes ? <p>{contact.notes}</p> : null}\n+\n+        <div>\n+          <Form action=\"edit\">\n+            <button type=\"submit\">Edit</button>\n+          </Form>\n+\n+          <Form\n+            action=\"destroy\"\n+            method=\"post\"\n+            onSubmit={(event) => {\n+              const response = confirm(\n+                \"Please confirm you want to delete this record.\"\n+              );\n+              if (!response) {\n+                event.preventDefault();\n+              }\n+            }}\n+          >\n+            <button type=\"submit\">Delete</button>\n+          </Form>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+}\n+\n+function Favorite({\n+  contact,\n+}: {\n+  contact: Pick<ContactRecord, \"favorite\">;\n+}) {\n+  const favorite = contact.favorite;\n+\n+  return (\n+    <Form method=\"post\">\n+      <button\n+        aria-label={\n+          favorite\n+            ? \"Remove from favorites\"\n+            : \"Add to favorites\"\n+        }\n+        name=\"favorite\"\n+        value={favorite ? \"false\" : \"true\"}\n+      >\n+        {favorite ? \"\u2605\" : \"\u2606\"}\n+      </button>\n+    </Form>\n+  );\n+}\n+```\n+\n+Now if we click one of the links or visit [`/contacts/1`][contacts-1] we get ... nothing new?\n+\n+TODO: add screenshot\n+\n+## Nested Routes and Outlets\n+\n+React Router supports nested routing. In order for child routes to render inside of parent layouts, we need to render an [`Outlet`][outlet-component] in the parent. Let's fix it, open up `app/root.tsx` and render an outlet inside.\n+\n+\ud83d\udc49 **Render an [`<Outlet />`][outlet-component]**\n+\n+```tsx filename=app/root.tsx lines=[3,15-17]\n+import {\n+  Form,\n+  Outlet,\n+  Scripts,\n+  ScrollRestoration,\n+  isRouteErrorResponse,\n+} from \"react-router\";\n+\n+// existing imports & exports\n+\n+export default function App() {\n+  return (\n+    <>\n+      <div id=\"sidebar\">{/* other elements */}</div>\n+      <div id=\"detail\">\n+        <Outlet />\n+      </div>\n+    </>\n+  );\n+}\n+```\n+\n+Now the child route should be rendering through the outlet.\n+\n+TODO: add screenshot\n+\n+## Client Side Routing\n+\n+You may or may not have noticed, but when we click the links in the sidebar, the browser is doing a full document request for the next URL instead of client side routing.\n+\n+Client side routing allows our app to update the URL without requesting another document from the server. Instead, the app can immediately render new UI. Let's make it happen with [`<Link>`][link-component].\n+\n+\ud83d\udc49 **Change the sidebar `<a href>` to `<Link to>`**\n+\n+```tsx filename=app/root.tsx lines=[3,20,23]\n+import {\n+  Form,\n+  Link,\n+  Outlet,\n+  Scripts,\n+  ScrollRestoration,\n+  isRouteErrorResponse,\n+} from \"react-router\";\n+\n+// existing imports & exports\n+\n+export default function App() {\n+  return (\n+    <>\n+      <div id=\"sidebar\">\n+        {/* other elements */}\n+        <nav>\n+          <ul>\n+            <li>\n+              <Link to={`/contacts/1`}>Your Name</Link>\n+            </li>\n+            <li>\n+              <Link to={`/contacts/2`}>Your Friend</Link>\n+            </li>\n+          </ul>\n+        </nav>\n+      </div>\n+      {/* other elements */}\n+    </>\n+  );\n+}\n+```\n+\n+You can open the network tab in the browser devtools to see that it's not requesting documents anymore.\n+\n+## Loading Data\n+\n+URL segments, layouts, and data are more often than not coupled (tripled?) together. We can see it in this app already:\n+\n+| URL Segment         | Component   | Data               |\n+| ------------------- | ----------- | ------------------ |\n+| /                   | `<App>`     | list of contacts   |\n+| contacts/:contactId | `<Contact>` | individual contact |\n+\n+Because of this natural coupling, React Router has data conventions to get data into your route components easily.\n+\n+First we'll create and export a [`clientLoader`][client-loader] function in the root route and then render the data.\n+\n+\ud83d\udc49 **Export a `clientLoader` function from `app/root.tsx` and render the data**\n+\n+<docs-info>The following code has a type error in it, we'll fix it in the next section</docs-info>\n+\n+```tsx filename=app/root.tsx lines=[2,6-9,11-12,19-42]\n+// existing imports\n+import { getContacts } from \"./data\";\n+\n+// existing exports\n+\n+export async function clientLoader() {\n+  const contacts = await getContacts();\n+  return { contacts };\n+}\n+\n+export default function App({ loaderData }) {\n+  const { contacts } = loaderData;\n+\n+  return (\n+    <>\n+      <div id=\"sidebar\">\n+        {/* other elements */}\n+        <nav>\n+          {contacts.length ? (\n+            <ul>\n+              {contacts.map((contact) => (\n+                <li key={contact.id}>\n+                  <Link to={`contacts/${contact.id}`}>\n+                    {contact.first || contact.last ? (\n+                      <>\n+                        {contact.first} {contact.last}\n+                      </>\n+                    ) : (\n+                      <i>No Name</i>\n+                    )}\n+                    {contact.favorite ? (\n+                      <span>\u2605</span>\n+                    ) : null}\n+                  </Link>\n+                </li>\n+              ))}\n+            </ul>\n+          ) : (\n+            <p>\n+              <i>No contacts</i>\n+            </p>\n+          )}\n+        </nav>\n+      </div>\n+      {/* other elements */}\n+    </>\n+  );\n+}\n+```\n+\n+That's it! React Router will now automatically keep that data in sync with your UI. The sidebar should now look like this:\n+\n+TODO: add screenshot\n+\n+You may be wondering why we're \"client\" loading data instead of loading the data on the server so we can do server-side rendering (SSR). Right now our contacts site is a [Single Page App][spa], so there's no server-side rendering. This makes it really easy to deploy to any static hosting provider, but we'll talk more about how to enable SSR in a bit so you can learn about all the different [rendering strategies][rendering-strategies] React Router offers.\n+\n+## Type Safety\n+\n+You probably noticed that we didn't assign a type to the `loaderData` prop. Let's fix that.\n+\n+\ud83d\udc49 **Add the `ComponentProps` type to the `App` component**\n+\n+```tsx filename=app/root.tsx lines=[5-7]\n+// existing imports\n+import type { Route } from \"./+types/root\";\n+// existing imports & exports\n+\n+export default function App({\n+  loaderData,\n+}: Route.ComponentProps) {\n+  const { contacts } = loaderData;\n+\n+  // existing code\n+}\n+```\n+\n+Wait, what? Where did these types come from?!\n+\n+We didn't define them, yet somehow they already know about the `contacts` property we returned from our `clientLoader`.\n+\n+That's because React Router [generates types for each route in your app][type-safety] to provide automatic type safety.\n+\n+## Adding a `HydrateFallback`\n+\n+We mentioned earlier that we are working on a [Single Page App][spa] with no server-side rendering. If you look inside of [`react-router.config.ts`][react-router-config] you'll see that this is configured with a simple boolean:\n+\n+```tsx filename=react-router.config.ts lines=[4]\n+import { type Config } from \"@react-router/dev/config\";\n+\n+export default {\n+  ssr: false,\n+} satisfies Config;\n+```\n+\n+You might have started noticing that whenever your refresh the page you get a flash of white before the app loads. Since we're only rendering on the client, there's nothing to show the user while the app is loading.\n+\n+\ud83d\udc49 **Add a `HydrateFallback` export**\n+\n+We can provide a fallback that will show up before the app is hydrated (rendering on the client for the first time) with a [`HydrateFallback`][hydrate-fallback] export.\n+\n+```tsx filename=app/root.tsx lines=[3-10]\n+// existing imports & exports\n+\n+export function HydrateFallback() {\n+  return (\n+    <div id=\"loading-splash\">\n+      <div id=\"loading-splash-spinner\" />\n+      <p>Loading, please wait...</p>\n+    </div>\n+  );\n+}\n+```\n+\n+Now if you refresh the page, you'll briefly see the loading splash before the app is hydrated.\n+\n+TODO: add screenshot\n+\n+## Adding an about page\n+\n+Before we move on to working dynamic data that the user can interact with, let's add a static page with content that we expect to rarely change. An about page will be perfect for this.\n+\n+\ud83d\udc49 **Create the about route**\n+\n+```shellscript nonumber\n+touch app/pages/about.tsx\n+```\n+\n+Don't forget to add the route to `app/routes.ts`:\n+\n+```tsx filename=app/routes.ts lines=[3]\n+export default [\n+  route(\"contacts/:contactId\", \"pages/contact.tsx\"),\n+  route(\"about\", \"pages/about.tsx\"),\n+] satisfies RouteConfig;\n+```\n+\n+\ud83d\udc49 **Add the about page UI**\n+\n+Nothing too special here, just copy and paste:\n+\n+```tsx filename=app/pages/about.tsx\n+import { Link } from \"react-router\";\n+\n+export default function About() {\n+  return (\n+    <div id=\"about\">\n+      <Link to=\"/\">\u2190 Go to demo</Link>\n+      <h1>About React Router Contacts</h1>\n+\n+      <div>\n+        <p>\n+          This is a demo application showing off some of the\n+          powerful features of React Router, including\n+          dynamic routing, nested routes, loaders, actions,\n+          and more.\n+        </p>\n+\n+        <h2>Features</h2>\n+        <p>\n+          Explore the demo to see how React Router handles:\n+        </p>\n+        <ul>\n+          <li>\n+            Data loading and mutations with loaders and\n+            actions\n+          </li>\n+          <li>\n+            Nested routing with parent/child relationships\n+          </li>\n+          <li>URL-based routing with dynamic segments</li>\n+          <li>Pending and optimistic UI</li>\n+        </ul>\n+\n+        <h2>Learn More</h2>\n+        <p>\n+          Check out the official documentation at{\" \"}\n+          <a href=\"https://reactrouter.com\">\n+            reactrouter.com\n+          </a>{\" \"}\n+          to learn more about building great web\n+          applications with React Router.\n+        </p>\n+      </div>\n+    </div>\n+  );\n+}\n+```\n+\n+\ud83d\udc49 **Add a link to the about page in the sidebar**\n+\n+```tsx filename=app/root.tsx lines=[5-7]\n+export default function App() {\n+  return (\n+    <>\n+      <div id=\"sidebar\">\n+        <h1>\n+          <Link to=\"about\">React Router Contacts</Link>\n+        </h1>\n+        {/* other elements */}\n+      </div>\n+      {/* other elements */}\n+    </>\n+  );\n+}\n+```\n+\n+Now navigate to the [about page][about-page] and it should look like this:\n+\n+TODO: add screenshot\n+\n+## Index Routes\n+\n+When we load up the app and we're not on the about page, you'll notice a big blank page on the right side of our list.\n+\n+TODO: add screenshot\n+\n+When a route has children, and you're at the parent route's path, the `<Outlet>` has nothing to render because no children match. You can think of [index routes][index-route] as the default child route to fill in that space.\n+\n+\ud83d\udc49 **Create an index route for the root route**\n+\n+```shellscript nonumber\n+touch app/pages/home.tsx\n+```\n+\n+```ts filename=app/routes.ts lines=[2,5]\n+import type { RouteConfig } from \"@react-router/dev/routes\";\n+import { index, route } from \"@react-router/dev/routes\";\n+\n+export default [\n+  index(\"pages/home.tsx\"),\n+  route(\"contacts/:contactId\", \"pages/contact.tsx\"),\n+  route(\"about\", \"pages/about.tsx\"),\n+] satisfies RouteConfig;\n+```\n+\n+\ud83d\udc49 **Fill in the index component's elements**\n+\n+Feel free to copy/paste, nothing special here.\n+\n+```tsx filename=app/pages/home.tsx\n+export default function Home() {\n+  return (\n+    <p id=\"index-page\">\n+      This is a demo for React Router.\n+      <br />\n+      Check out{\" \"}\n+      <a href=\"https://reactrouter.com\">\n+        the docs at reactrouter.com\n+      </a>\n+      .\n+    </p>\n+  );\n+}\n+```\n+\n+TODO: add screenshot\n+\n+Voil\u00e0! No more blank space. It's common to put dashboards, stats, feeds, etc. at index routes. They can participate in data loading as well.\n+\n+## Layout Routes\n+\n+We don't actually want the about page to be nested inside of the sidebar layout. Let's move the sidebar to a layout and apply it to the about page. Additionally, we want to avoid loading all the contacts data on the about page.",
        "comment_created_at": "2024-12-10T17:59:03+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "```suggestion\r\nWe don't actually want the about page to be nested inside of the sidebar layout. Let's move the sidebar to a layout so we can avoid applying it to the about page. Additionally, we want to avoid loading all the contacts data on the about page.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1807438370",
    "pr_number": 12158,
    "pr_file": "docs/upgrading/remix.md",
    "created_at": "2024-10-19T18:09:32+00:00",
    "commented_code": "### Step 6 - Rename components in entry files\n \n-If you have an `entry.server.tsx` and/or an `entry.client.tsx` file in your application, you will need to rename the main components in this files:\n+If you have an `entry.server.tsx` and/or an `entry.client.tsx` file in your application, you will need to `react-router-dom` package and rename the main components in this files:",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1807438370",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12158,
        "pr_file": "docs/upgrading/remix.md",
        "discussion_id": "1807438370",
        "commented_code": "@@ -89,12 +89,28 @@ export const routes: RouteConfig = flatRoutes();\n \n ### Step 6 - Rename components in entry files\n \n-If you have an `entry.server.tsx` and/or an `entry.client.tsx` file in your application, you will need to rename the main components in this files:\n+If you have an `entry.server.tsx` and/or an `entry.client.tsx` file in your application, you will need to `react-router-dom` package and rename the main components in this files:",
        "comment_created_at": "2024-10-19T18:09:32+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "```suggestion\r\nIf you have an `entry.client.tsx` and/or an `entry.server.tsx` file in your application, you will need to install `react-router` package and rename the main components in these files:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1794250835",
    "pr_number": 12103,
    "pr_file": "docs/start/overview.md",
    "created_at": "2024-10-09T21:28:58+00:00",
    "commented_code": "## Location State\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [location state][locationstate], which is a part of [`location`][location] object. You can get the [`location`][location] object using `useLocation`.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1794250835",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12103,
        "pr_file": "docs/start/overview.md",
        "discussion_id": "1794250835",
        "commented_code": "@@ -761,7 +761,52 @@ See:\n \n ## Location State\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [location state][locationstate], which is a part of [`location`][location] object. You can get the [`location`][location] object using `useLocation`.",
        "comment_created_at": "2024-10-09T21:28:58+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "```suggestion\r\nReact Router can read and modify the [location state][location-state], which is a part of the [`location`][location] object. You can get the [`location`][location] object using [`useLocation`][use-location].\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1794256746",
    "pr_number": 12103,
    "pr_file": "docs/start/overview.md",
    "created_at": "2024-10-09T21:33:46+00:00",
    "commented_code": "## Location State\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [location state][locationstate], which is a part of [`location`][location] object. You can get the [`location`][location] object using `useLocation`.\n+\n+```jsx lines=[2,5]\n+function App() {\n+  const location = useLocation();\n+\n+  //get location state object from location object\n+  const locationState = location.state;\n+\n+  return (\n+    <p>\n+      The current location state value is:\n+      {locationState.someValue}\n+    </p>\n+  );\n+}\n+```\n+\n+You can use `<Link state>` or `useNavigate` to change the location state.\n+\n+```jsx lines=[2,5,10]\n+function App() {\n+  const navigate = useNavigate();\n+\n+  function handleClick() {\n+    navigate(\"/home\", { state: { someValue: \"example\" } });\n+  }\n+",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1794256746",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12103,
        "pr_file": "docs/start/overview.md",
        "discussion_id": "1794256746",
        "commented_code": "@@ -761,7 +761,52 @@ See:\n \n ## Location State\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [location state][locationstate], which is a part of [`location`][location] object. You can get the [`location`][location] object using `useLocation`.\n+\n+```jsx lines=[2,5]\n+function App() {\n+  const location = useLocation();\n+\n+  //get location state object from location object\n+  const locationState = location.state;\n+\n+  return (\n+    <p>\n+      The current location state value is:\n+      {locationState.someValue}\n+    </p>\n+  );\n+}\n+```\n+\n+You can use `<Link state>` or `useNavigate` to change the location state.\n+\n+```jsx lines=[2,5,10]\n+function App() {\n+  const navigate = useNavigate();\n+\n+  function handleClick() {\n+    navigate(\"/home\", { state: { someValue: \"example\" } });\n+  }\n+",
        "comment_created_at": "2024-10-09T21:33:46+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "```suggestion\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1795535661",
    "pr_number": 12103,
    "pr_file": "docs/start/overview.md",
    "created_at": "2024-10-10T14:17:09+00:00",
    "commented_code": "## Location State\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [location state][location-state], which is a part of [`location`][location] object. You can get the [`location`][location] object using `useLocation`.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1795535661",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12103,
        "pr_file": "docs/start/overview.md",
        "discussion_id": "1795535661",
        "commented_code": "@@ -761,7 +761,51 @@ See:\n \n ## Location State\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [location state][location-state], which is a part of [`location`][location] object. You can get the [`location`][location] object using `useLocation`.",
        "comment_created_at": "2024-10-10T14:17:09+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "```suggestion\r\nReact Router can read and modify the [location state][location-state], which is a part of [`location`][location] object. You can get the [`location`][location] object using [`useLocation`][use-location].\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1797404324",
    "pr_number": 12103,
    "pr_file": "docs/start/overview.md",
    "created_at": "2024-10-11T20:38:59+00:00",
    "commented_code": "## Location State\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [location state][location-state], which is a part of [`location`][location] object. You can get the [`location`][location] object using [`useLocation`][use-location].\n+\n+```tsx lines=[2,7]\n+function App() {\n+  const location = useLocation();\n+\n+  return (\n+    <p>\n+      The current location state value is:\n+      {location.state.someValue}\n+    </p>\n+  );\n+}\n+```\n+\n+You can use [`<Link state>`][link-component-state-prop] or [`useNavigate`][use-navigate] to change the location state.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1797404324",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12103,
        "pr_file": "docs/start/overview.md",
        "discussion_id": "1797404324",
        "commented_code": "@@ -761,7 +761,51 @@ See:\n \n ## Location State\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [location state][location-state], which is a part of [`location`][location] object. You can get the [`location`][location] object using [`useLocation`][use-location].\n+\n+```tsx lines=[2,7]\n+function App() {\n+  const location = useLocation();\n+\n+  return (\n+    <p>\n+      The current location state value is:\n+      {location.state.someValue}\n+    </p>\n+  );\n+}\n+```\n+\n+You can use [`<Link state>`][link-component-state-prop] or [`useNavigate`][use-navigate] to change the location state.",
        "comment_created_at": "2024-10-11T20:38:59+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "```suggestion\r\nYou can use [`<Link state>`][link-component-state-prop] or [`useNavigate`][use-navigate] to change the [location state][location-state].\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1797641389",
    "pr_number": 12103,
    "pr_file": "docs/start/overview.md",
    "created_at": "2024-10-12T09:24:05+00:00",
    "commented_code": "## Location State\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [location state][location-state], which is a part of [`location`][location] object. You can get the [`location`][location] object using [`useLocation`][use-location].",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1797641389",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12103,
        "pr_file": "docs/start/overview.md",
        "discussion_id": "1797641389",
        "commented_code": "@@ -761,7 +761,51 @@ See:\n \n ## Location State\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [location state][location-state], which is a part of [`location`][location] object. You can get the [`location`][location] object using [`useLocation`][use-location].",
        "comment_created_at": "2024-10-12T09:24:05+00:00",
        "comment_author": "machour",
        "comment_body": "```suggestion\r\nReact Router can read and modify the [location state][location-state], which is a part of the [`location`][location] object. You can retrieve the [`location`][location] object using [`useLocation`][use-location].\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1795442471",
    "pr_number": 12104,
    "pr_file": "docs/upgrading/remix.md",
    "created_at": "2024-10-10T13:33:48+00:00",
    "commented_code": "# Upgrading from Remix\n \n-<docs-warning>This guide is still in development</docs-warning>\n+<docs-warning>This guide is still in development and is subject to change as React Router stabilizes prior to the `7.0.0` stable release</docs-warning>\n \n-After the final React Router v7 release, we will go back to Remix to add future flags to any changed APIs.\n+Our intention is for the **Remix v2 -> React Router v7** upgrade path to be as non-breaking as possible via the use of [Future Flags][future-flags] and codemods for minor and straightforward code adjustments. To best prepare for this eventual upgrade, you can start by adopting all of the existing [Remix v2 Future Flags][v2-future-flags].\n \n-If you want to attempt the rocky migration now, the following table will be helpful:\n+## Upgrading to the v7 Prerelease\n \n-| Remix v2 Package        |     | React Router v7 Package    |\n-| ----------------------- | --- | -------------------------- |\n-| `@remix-run/react`      | \u27a1\ufe0f  | `react-router`             |\n-| `@remix-run/dev`        | \u27a1\ufe0f  | `@react-router/dev`        |\n-| `@remix-run/node`       | \u27a1\ufe0f  | `@react-router/node`       |\n-| `@remix-run/cloudflare` | \u27a1\ufe0f  | `@react-router/cloudflare` |\n+If you want to attempt the (potentially rocky) migration now, the following steps should get you most of the way there. If you run into issues please let us know in [Discord][remix-discord] or [Github][github-new-issue].\n \n-Also note that nearly all modules your app needs come from `react-router` now instead of `@remix-run/node` and `@remix-run/cloudflare`, so try to import from there first.\n+### Step 1 - Adopt future flags\n+\n+Adopt all existing [future flags][v2-future-flags] in your Remix v2 application.\n+\n+### Step 2 - Update dependencies\n+\n+You'll need to update your dependencies from the `@remix-run/*` packages to `react-router` and `@react-router/*` packages in `package.json` and in your code where you import from packages:\n+\n+| Remix v2 Package            |     | React Router v7 Package    |\n+| --------------------------- | --- | -------------------------- |\n+| `@remix-run/architect`      | \u27a1\ufe0f  | `@react-router/architect`  |\n+| `@remix-run/cloudflare`     | \u27a1\ufe0f  | `@react-router/cloudflare` |\n+| `@remix-run/dev`            | \u27a1\ufe0f  | `@react-router/dev`        |\n+| `@remix-run/express`        | \u27a1\ufe0f  | `@react-router/express`    |\n+| `@remix-run/node`           | \u27a1\ufe0f  | `@react-router/node`       |\n+| `@remix-run/react`          | \u27a1\ufe0f  | `react-router`             |\n+| `@remix-run/serve`          | \u27a1\ufe0f  | `@react-router/serve`      |\n+| `@remix-run/server-runtime` | \u27a1\ufe0f  | `react-router`             |\n+| `@remix-run/testing`        | \u27a1\ufe0f  | `react-router`             |\n+\n+Most of the \"shared\" APIs that used to be re-exported through the runtime-specific packages (`@remix-run/node`, `@remix-run/cloudflare`, etc.) have all been collapsed into `react-router` in v7. So instead of importing from `@react-router/node` or `@react-router/cloudflare`, you'll import those directly from `react-router`.\n \n ```diff\n -import { redirect } from \"@react-router/node\";\n +import { redirect } from \"react-router\";\n ```\n+\n+The only APIs should be importing from the runtime-specific packages in v7 are APIs that are specific to that runtime, such as `createFileSessionStorage` for Node and `createWorkersKVSessionStorage` for Cloudflare.\n+\n+### Step 3 - Change `scripts` in `package.json`\n+\n+Update the scripts in your `package.json`:\n+\n+| Script      | Remix v2                            |     | React Router v7                            |\n+| ----------- | ----------------------------------- | --- | ------------------------------------------ |\n+| `dev`       | `remix vite:dev`                    | \u27a1\ufe0f  | `react-router dev`                         |\n+| `build`     | `remix vite:build`                  | \u27a1\ufe0f  | `react-router build`                       |\n+| `start`     | `remix-serve build/server/index.js` | \u27a1\ufe0f  | `react-router-serve build/server/index.js` |\n+| `typecheck` | `tsc`                               | \u27a1\ufe0f  | `react-router typegen && tsc`              |\n+\n+### Step 4 - Rename plugin in `vite.config`\n+\n+Update the import and rename the plugin in your `vite.config.ts`:\n+\n+```diff\n+-import { vitePlugin as remix } from \"@remix-run/dev\";\n++import { reactRouter } from \"@react-router/dev/vite\";\n+import { defineConfig } from \"vite\";\n+import tsconfigPaths from \"vite-tsconfig-paths\";\n+\n+export default defineConfig({\n+  plugins: [\n+-   remix({\n+-     future: {\n+-       // all future flags adopted\n+-     },\n+-   }),\n++   reactRouter(),\n+    tsconfigPaths(),\n+  ],\n+});\n+```\n+\n+### Step 5 - Add a `routes.ts` file\n+\n+In React Router v7 you define your routes using the [`app/routes.ts`][routing] file. For backwards-compatibility and for folks who prefer [file-based conventions][fs-routing], you can opt-into the same \"flat routes\" convention you are using in Remix v2 as follows:",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1795442471",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12104,
        "pr_file": "docs/upgrading/remix.md",
        "discussion_id": "1795442471",
        "commented_code": "@@ -5,22 +5,125 @@ hidden: true\n \n # Upgrading from Remix\n \n-<docs-warning>This guide is still in development</docs-warning>\n+<docs-warning>This guide is still in development and is subject to change as React Router stabilizes prior to the `7.0.0` stable release</docs-warning>\n \n-After the final React Router v7 release, we will go back to Remix to add future flags to any changed APIs.\n+Our intention is for the **Remix v2 -> React Router v7** upgrade path to be as non-breaking as possible via the use of [Future Flags][future-flags] and codemods for minor and straightforward code adjustments. To best prepare for this eventual upgrade, you can start by adopting all of the existing [Remix v2 Future Flags][v2-future-flags].\n \n-If you want to attempt the rocky migration now, the following table will be helpful:\n+## Upgrading to the v7 Prerelease\n \n-| Remix v2 Package        |     | React Router v7 Package    |\n-| ----------------------- | --- | -------------------------- |\n-| `@remix-run/react`      | \u27a1\ufe0f  | `react-router`             |\n-| `@remix-run/dev`        | \u27a1\ufe0f  | `@react-router/dev`        |\n-| `@remix-run/node`       | \u27a1\ufe0f  | `@react-router/node`       |\n-| `@remix-run/cloudflare` | \u27a1\ufe0f  | `@react-router/cloudflare` |\n+If you want to attempt the (potentially rocky) migration now, the following steps should get you most of the way there. If you run into issues please let us know in [Discord][remix-discord] or [Github][github-new-issue].\n \n-Also note that nearly all modules your app needs come from `react-router` now instead of `@remix-run/node` and `@remix-run/cloudflare`, so try to import from there first.\n+### Step 1 - Adopt future flags\n+\n+Adopt all existing [future flags][v2-future-flags] in your Remix v2 application.\n+\n+### Step 2 - Update dependencies\n+\n+You'll need to update your dependencies from the `@remix-run/*` packages to `react-router` and `@react-router/*` packages in `package.json` and in your code where you import from packages:\n+\n+| Remix v2 Package            |     | React Router v7 Package    |\n+| --------------------------- | --- | -------------------------- |\n+| `@remix-run/architect`      | \u27a1\ufe0f  | `@react-router/architect`  |\n+| `@remix-run/cloudflare`     | \u27a1\ufe0f  | `@react-router/cloudflare` |\n+| `@remix-run/dev`            | \u27a1\ufe0f  | `@react-router/dev`        |\n+| `@remix-run/express`        | \u27a1\ufe0f  | `@react-router/express`    |\n+| `@remix-run/node`           | \u27a1\ufe0f  | `@react-router/node`       |\n+| `@remix-run/react`          | \u27a1\ufe0f  | `react-router`             |\n+| `@remix-run/serve`          | \u27a1\ufe0f  | `@react-router/serve`      |\n+| `@remix-run/server-runtime` | \u27a1\ufe0f  | `react-router`             |\n+| `@remix-run/testing`        | \u27a1\ufe0f  | `react-router`             |\n+\n+Most of the \"shared\" APIs that used to be re-exported through the runtime-specific packages (`@remix-run/node`, `@remix-run/cloudflare`, etc.) have all been collapsed into `react-router` in v7. So instead of importing from `@react-router/node` or `@react-router/cloudflare`, you'll import those directly from `react-router`.\n \n ```diff\n -import { redirect } from \"@react-router/node\";\n +import { redirect } from \"react-router\";\n ```\n+\n+The only APIs should be importing from the runtime-specific packages in v7 are APIs that are specific to that runtime, such as `createFileSessionStorage` for Node and `createWorkersKVSessionStorage` for Cloudflare.\n+\n+### Step 3 - Change `scripts` in `package.json`\n+\n+Update the scripts in your `package.json`:\n+\n+| Script      | Remix v2                            |     | React Router v7                            |\n+| ----------- | ----------------------------------- | --- | ------------------------------------------ |\n+| `dev`       | `remix vite:dev`                    | \u27a1\ufe0f  | `react-router dev`                         |\n+| `build`     | `remix vite:build`                  | \u27a1\ufe0f  | `react-router build`                       |\n+| `start`     | `remix-serve build/server/index.js` | \u27a1\ufe0f  | `react-router-serve build/server/index.js` |\n+| `typecheck` | `tsc`                               | \u27a1\ufe0f  | `react-router typegen && tsc`              |\n+\n+### Step 4 - Rename plugin in `vite.config`\n+\n+Update the import and rename the plugin in your `vite.config.ts`:\n+\n+```diff\n+-import { vitePlugin as remix } from \"@remix-run/dev\";\n++import { reactRouter } from \"@react-router/dev/vite\";\n+import { defineConfig } from \"vite\";\n+import tsconfigPaths from \"vite-tsconfig-paths\";\n+\n+export default defineConfig({\n+  plugins: [\n+-   remix({\n+-     future: {\n+-       // all future flags adopted\n+-     },\n+-   }),\n++   reactRouter(),\n+    tsconfigPaths(),\n+  ],\n+});\n+```\n+\n+### Step 5 - Add a `routes.ts` file\n+\n+In React Router v7 you define your routes using the [`app/routes.ts`][routing] file. For backwards-compatibility and for folks who prefer [file-based conventions][fs-routing], you can opt-into the same \"flat routes\" convention you are using in Remix v2 as follows:",
        "comment_created_at": "2024-10-10T13:33:48+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "```suggestion\r\nIn React Router v7 you define your routes using the [`app/routes.ts`][routing] file. For backwards-compatibility and for folks who prefer [file-based conventions][fs-routing], you can opt-into the same \"flat routes\" convention you are using in Remix v2 via the new `@react-router/fs-routes` package:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1790877240",
    "pr_number": 12048,
    "pr_file": "docs/start/overview.md",
    "created_at": "2024-10-07T21:06:42+00:00",
    "commented_code": "## Search Params\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [query string][querystring]. This process is handeled with [`URLSearchParams`][urlsearchparams]. We often get and set the Search Params using `useSearchParams`.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1790877240",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12048,
        "pr_file": "docs/start/overview.md",
        "discussion_id": "1790877240",
        "commented_code": "@@ -697,7 +697,57 @@ When you get better at React Router, you get better at the web platform.\n \n ## Search Params\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [query string][querystring]. This process is handeled with [`URLSearchParams`][urlsearchparams]. We often get and set the Search Params using `useSearchParams`.",
        "comment_created_at": "2024-10-07T21:06:42+00:00",
        "comment_author": "brookslybrand",
        "comment_body": "```suggestion\r\nReact Router can read and modify the [query string][querystring]. You can set the search params using `useSearchParams`, which returns [`URLSearchParams`][urlsearchparams] and a setter function.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1645056323",
    "pr_number": 11633,
    "pr_file": ".changeset/thirty-swans-fail.md",
    "created_at": "2024-06-18T21:08:39+00:00",
    "commented_code": "+---\n+\"react-router\": patch\n+---\n+\n+Resolve relative paths correctly in hash routes that are children of pathless routes (#11629)",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1645056323",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11633,
        "pr_file": ".changeset/thirty-swans-fail.md",
        "discussion_id": "1645056323",
        "commented_code": "@@ -0,0 +1,5 @@\n+---\n+\"react-router\": patch\n+---\n+\n+Resolve relative paths correctly in hash routes that are children of pathless routes (#11629)",
        "comment_created_at": "2024-06-18T21:08:39+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "```suggestion\r\nWhen using `v7_relativeSplatPath`, properly resolve relative paths in splat routes that are children of pathless routes\r\n```\r\n\r\nThe pull request number will be added automatically during the release process, and the PR will link to the issue number :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1643326857",
    "pr_number": 11553,
    "pr_file": ".changeset/six-pianos-serve.md",
    "created_at": "2024-06-17T19:15:29+00:00",
    "commented_code": "+---\n+\"react-router-dom\": major",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1643326857",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11553,
        "pr_file": ".changeset/six-pianos-serve.md",
        "discussion_id": "1643326857",
        "commented_code": "@@ -0,0 +1,5 @@\n+---\n+\"react-router-dom\": major",
        "comment_created_at": "2024-06-17T19:15:29+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "```suggestion\r\n\"react-router-dom\": patch\r\n```\r\n\r\nThis can just be a patch - no new runtime functionality added, just exporting a missing existing type so it's more of a type bugfix IMO",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1643327276",
    "pr_number": 11553,
    "pr_file": ".changeset/six-pianos-serve.md",
    "created_at": "2024-06-17T19:15:57+00:00",
    "commented_code": "+---\n+\"react-router-dom\": patch\n+---\n+\n+Exported NavLinkRenderProps type. Usefull when typing custom NavLink callback.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1643327276",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11553,
        "pr_file": ".changeset/six-pianos-serve.md",
        "discussion_id": "1643327276",
        "commented_code": "@@ -0,0 +1,5 @@\n+---\n+\"react-router-dom\": patch\n+---\n+\n+Exported NavLinkRenderProps type. Usefull when typing custom NavLink callback.",
        "comment_created_at": "2024-06-17T19:15:57+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "```suggestion\r\nExport `NavLinkRenderProps` type for easier typing of custom `NavLink` callback\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1593875472",
    "pr_number": 11495,
    "pr_file": ".changeset/smooth-sloths-exist.md",
    "created_at": "2024-05-08T11:29:35+00:00",
    "commented_code": "+---\n+\"react-router-dom\": patch\n+\"react-router-dom-v5-compat\": patch\n+---\n+\n+useLocation retains a non-null state when state passed explicitly",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1593875472",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11495,
        "pr_file": ".changeset/smooth-sloths-exist.md",
        "discussion_id": "1593875472",
        "commented_code": "@@ -0,0 +1,6 @@\n+---\n+\"react-router-dom\": patch\n+\"react-router-dom-v5-compat\": patch\n+---\n+\n+useLocation retains a non-null state when state passed explicitly",
        "comment_created_at": "2024-05-08T11:29:35+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "```suggestion\r\nAllow falsy `location.state` values passed to `<StaticRouter>`\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1496283663",
    "pr_number": 11290,
    "pr_file": "docs/hooks/use-outlet-context.md",
    "created_at": "2024-02-20T18:13:26+00:00",
    "commented_code": "</details>\n \n-Often parent routes manage state or other values you want shared with child routes. You can create your own [context provider](https://reactjs.org/docs/context.html) if you like, but this is such a common situation that it's built-into `<Outlet />`:\n+Often parent routes manage state or other values you want shared with child routes. You can create your own [context provider](https://react.dev/reference/react/createContext) if you like, but this is such a common situation that it's built-into `<Outlet />`:",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1496283663",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11290,
        "pr_file": "docs/hooks/use-outlet-context.md",
        "discussion_id": "1496283663",
        "commented_code": "@@ -15,7 +15,7 @@ declare function useOutletContext<\n \n </details>\n \n-Often parent routes manage state or other values you want shared with child routes. You can create your own [context provider](https://reactjs.org/docs/context.html) if you like, but this is such a common situation that it's built-into `<Outlet />`:\n+Often parent routes manage state or other values you want shared with child routes. You can create your own [context provider](https://react.dev/reference/react/createContext) if you like, but this is such a common situation that it's built-into `<Outlet />`:",
        "comment_created_at": "2024-02-20T18:13:26+00:00",
        "comment_author": "timdorr",
        "comment_body": "```suggestion\r\nOften parent routes manage state or other values you want shared with child routes. You can create your own [context provider](https://react.dev/learn/passing-data-deeply-with-context) if you like, but this is such a common situation that it's built-into `<Outlet />`:\r\n```\r\n\r\nThis is the better page to point to.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1434892916",
    "pr_number": 11133,
    "pr_file": ".changeset/calm-items-listen.md",
    "created_at": "2023-12-22T09:39:17+00:00",
    "commented_code": "+---\n+\"react-router\": patch\n+\"@remix-run/router\": patch\n+---\n+\n+`useLocation` hook now accepts a state as generic.\n+\n+So, you are able to define",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1434892916",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11133,
        "pr_file": ".changeset/calm-items-listen.md",
        "discussion_id": "1434892916",
        "commented_code": "@@ -0,0 +1,14 @@\n+---\n+\"react-router\": patch\n+\"@remix-run/router\": patch\n+---\n+\n+`useLocation` hook now accepts a state as generic.\n+\n+So, you are able to define",
        "comment_created_at": "2023-12-22T09:39:17+00:00",
        "comment_author": "sbrauch",
        "comment_body": "Thus, if you've defined a state you want to send with navigate ```\r\nnavigate(\r\n  'thepath', { state: { from: 'yourMessage' } }) // string | boolean | number ...\r\n```\r\nyou can retrieve this state in your target component like this:",
        "pr_file_module": null
      }
    ]
  }
]