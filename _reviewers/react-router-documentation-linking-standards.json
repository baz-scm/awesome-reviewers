[
  {
    "discussion_id": "2207554334",
    "pr_number": 13985,
    "pr_file": "docs/api/hooks/useBlocker.md",
    "created_at": "2025-07-15T13:52:07+00:00",
    "commented_code": "[Reference Documentation \u2197](https://api.reactrouter.com/v7/functions/react_router.useBlocker.html)\n \n Allow the application to block navigations within the SPA and present the\n-user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n-using half-filled form data.  This does not handle hard-reloads or\n+user a confirmation dialog to confirm the navigation. Mostly used to avoid\n+using half-filled form data. This does not handle hard-reloads or\n cross-origin navigations.\n \n-The Blocker object returned by the hook has the following properties:\n+The [`Blocker`](https://api.reactrouter.com/v7/types/react_router.Blocker.html) object returned by the hook has the following properties:",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2207554334",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13985,
        "pr_file": "docs/api/hooks/useBlocker.md",
        "discussion_id": "2207554334",
        "commented_code": "@@ -22,11 +22,11 @@ changes are merged.\n [Reference Documentation \u2197](https://api.reactrouter.com/v7/functions/react_router.useBlocker.html)\n \n Allow the application to block navigations within the SPA and present the\n-user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n-using half-filled form data.  This does not handle hard-reloads or\n+user a confirmation dialog to confirm the navigation. Mostly used to avoid\n+using half-filled form data. This does not handle hard-reloads or\n cross-origin navigations.\n \n-The Blocker object returned by the hook has the following properties:\n+The [`Blocker`](https://api.reactrouter.com/v7/types/react_router.Blocker.html) object returned by the hook has the following properties:",
        "comment_created_at": "2025-07-15T13:52:07+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Same for typedocs - we when we don't find a `.md` file for the `@link` we look through the typedoc json (make sure you have run `pnpm run docs` locally before testing this out to generate the typedoc JSON file)\r\n\r\n```suggestion\r\nThe {@link Blocker} object returned by the hook has the following properties:\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2208193219",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13985,
        "pr_file": "docs/api/hooks/useBlocker.md",
        "discussion_id": "2207554334",
        "commented_code": "@@ -22,11 +22,11 @@ changes are merged.\n [Reference Documentation \u2197](https://api.reactrouter.com/v7/functions/react_router.useBlocker.html)\n \n Allow the application to block navigations within the SPA and present the\n-user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n-using half-filled form data.  This does not handle hard-reloads or\n+user a confirmation dialog to confirm the navigation. Mostly used to avoid\n+using half-filled form data. This does not handle hard-reloads or\n cross-origin navigations.\n \n-The Blocker object returned by the hook has the following properties:\n+The [`Blocker`](https://api.reactrouter.com/v7/types/react_router.Blocker.html) object returned by the hook has the following properties:",
        "comment_created_at": "2025-07-15T17:45:54+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "Same here",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167833062",
    "pr_number": 13888,
    "pr_file": "docs/api/framework-conventions/entry.server.tsx.md",
    "created_at": "2025-06-26T00:04:54+00:00",
    "commented_code": "+---\n+title: entry.server.tsx\n+order: 5\n+---\n+\n+# entry.server.tsx\n+\n+[MODES: framework]\n+\n+## Summary\n+\n+<docs-info>\n+This file is optional\n+</docs-info>\n+\n+This file is the server-side entry point that controls how your React Router application generates HTTP responses on the server.\n+\n+This module should render the markup for the current page using a [`<ServerRouter>`][serverrouter] element with the `context` and `url` for the current request. This markup will (optionally) be re-hydrated once JavaScript loads in the browser using the [client entry module][client-entry].\n+\n+## Generating `entry.server.tsx`\n+\n+By default, React Router will handle generating the HTTP Response for you. You can reveal the default entry server file with the following:\n+\n+```shellscript nonumber\n+npx react-router reveal\n+```\n+\n+## Exports\n+\n+### `default`\n+\n+The `default` export of this module is a function that lets you create the response, including HTTP status, headers, and HTML, giving you full control over the way the markup is generated and sent to the client.\n+\n+```tsx filename=app/entry.server.tsx\n+import { renderToString } from \"react-dom/server\";\n+import { ServerRouter } from \"react-router\";\n+\n+export default function handleRequest(\n+  request: Request,\n+  responseStatusCode: number,\n+  responseHeaders: Headers,\n+  routerContext: EntryContext\n+) {\n+  const markup = renderToString(\n+    <ServerRouter\n+      context={routerContext}\n+      url={request.url}\n+    />\n+  );\n+\n+  return new Response(\"<!DOCTYPE html>\" + markup, {\n+    status: responseStatusCode,\n+    headers: responseHeaders,\n+  });\n+}\n+```\n+\n+### `streamTimeout`\n+\n+If you are [streaming] responses, you can export an optional `streamTimeout` value (in milliseconds) that will control the amount of time the server will wait for streamed promises to settle before rejecting outstanding promises them and closing the stream.\n+\n+It's recommended to decouple this value from the timeout in which you abort the React renderer. You should always set the React rendering timeout to a higher value so it has time to stream down the underlying rejections from your `streamTimeout`.\n+\n+```tsx lines=[1-2,13-15]\n+// Reject all pending promises from handler functions after 10 seconds\n+export const streamTimeout = 10000;\n+\n+export default function handleRequest(...) {\n+  return new Promise((resolve, reject) => {\n+    // ...\n+\n+    const { pipe, abort } = renderToPipeableStream(\n+      <ServerRouter context={routerContext} url={request.url} />,\n+      { /* ... */ }\n+    );\n+\n+    // Abort the streaming render pass after 11 seconds to allow the rejected\n+    // boundaries to be flushed\n+    setTimeout(abort, streamTimeout + 1000);\n+  });\n+}\n+```\n+\n+### `handleDataRequest`\n+\n+You can export an optional `handleDataRequest` function that will allow you to modify the response of a data request. These are the requests that do not render HTML, but rather return the loader and action data to the browser once client-side hydration has occurred.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2167833062",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13888,
        "pr_file": "docs/api/framework-conventions/entry.server.tsx.md",
        "discussion_id": "2167833062",
        "commented_code": "@@ -0,0 +1,141 @@\n+---\n+title: entry.server.tsx\n+order: 5\n+---\n+\n+# entry.server.tsx\n+\n+[MODES: framework]\n+\n+## Summary\n+\n+<docs-info>\n+This file is optional\n+</docs-info>\n+\n+This file is the server-side entry point that controls how your React Router application generates HTTP responses on the server.\n+\n+This module should render the markup for the current page using a [`<ServerRouter>`][serverrouter] element with the `context` and `url` for the current request. This markup will (optionally) be re-hydrated once JavaScript loads in the browser using the [client entry module][client-entry].\n+\n+## Generating `entry.server.tsx`\n+\n+By default, React Router will handle generating the HTTP Response for you. You can reveal the default entry server file with the following:\n+\n+```shellscript nonumber\n+npx react-router reveal\n+```\n+\n+## Exports\n+\n+### `default`\n+\n+The `default` export of this module is a function that lets you create the response, including HTTP status, headers, and HTML, giving you full control over the way the markup is generated and sent to the client.\n+\n+```tsx filename=app/entry.server.tsx\n+import { renderToString } from \"react-dom/server\";\n+import { ServerRouter } from \"react-router\";\n+\n+export default function handleRequest(\n+  request: Request,\n+  responseStatusCode: number,\n+  responseHeaders: Headers,\n+  routerContext: EntryContext\n+) {\n+  const markup = renderToString(\n+    <ServerRouter\n+      context={routerContext}\n+      url={request.url}\n+    />\n+  );\n+\n+  return new Response(\"<!DOCTYPE html>\" + markup, {\n+    status: responseStatusCode,\n+    headers: responseHeaders,\n+  });\n+}\n+```\n+\n+### `streamTimeout`\n+\n+If you are [streaming] responses, you can export an optional `streamTimeout` value (in milliseconds) that will control the amount of time the server will wait for streamed promises to settle before rejecting outstanding promises them and closing the stream.\n+\n+It's recommended to decouple this value from the timeout in which you abort the React renderer. You should always set the React rendering timeout to a higher value so it has time to stream down the underlying rejections from your `streamTimeout`.\n+\n+```tsx lines=[1-2,13-15]\n+// Reject all pending promises from handler functions after 10 seconds\n+export const streamTimeout = 10000;\n+\n+export default function handleRequest(...) {\n+  return new Promise((resolve, reject) => {\n+    // ...\n+\n+    const { pipe, abort } = renderToPipeableStream(\n+      <ServerRouter context={routerContext} url={request.url} />,\n+      { /* ... */ }\n+    );\n+\n+    // Abort the streaming render pass after 11 seconds to allow the rejected\n+    // boundaries to be flushed\n+    setTimeout(abort, streamTimeout + 1000);\n+  });\n+}\n+```\n+\n+### `handleDataRequest`\n+\n+You can export an optional `handleDataRequest` function that will allow you to modify the response of a data request. These are the requests that do not render HTML, but rather return the loader and action data to the browser once client-side hydration has occurred.",
        "comment_created_at": "2025-06-26T00:04:54+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "Maybe link to `action`/`loader` docs?\r\n\r\n```suggestion\r\nYou can export an optional `handleDataRequest` function that will allow you to modify the response of a data request. These are the requests that do not render HTML, but rather return the [`loader`][loader] and [`action`][action] data to the browser once client-side hydration has occurred.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1794255894",
    "pr_number": 12103,
    "pr_file": "docs/start/overview.md",
    "created_at": "2024-10-09T21:32:38+00:00",
    "commented_code": "## Location State\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [location state][locationstate], which is a part of [`location`][location] object. You can get the [`location`][location] object using `useLocation`.\n+\n+```jsx lines=[2,5]\n+function App() {\n+  const location = useLocation();\n+\n+  //get location state object from location object\n+  const locationState = location.state;\n+\n+  return (\n+    <p>\n+      The current location state value is:\n+      {locationState.someValue}\n+    </p>\n+  );\n+}\n+```\n+\n+You can use `<Link state>` or `useNavigate` to change the location state.",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1794255894",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12103,
        "pr_file": "docs/start/overview.md",
        "discussion_id": "1794255894",
        "commented_code": "@@ -761,7 +761,52 @@ See:\n \n ## Location State\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [location state][locationstate], which is a part of [`location`][location] object. You can get the [`location`][location] object using `useLocation`.\n+\n+```jsx lines=[2,5]\n+function App() {\n+  const location = useLocation();\n+\n+  //get location state object from location object\n+  const locationState = location.state;\n+\n+  return (\n+    <p>\n+      The current location state value is:\n+      {locationState.someValue}\n+    </p>\n+  );\n+}\n+```\n+\n+You can use `<Link state>` or `useNavigate` to change the location state.",
        "comment_created_at": "2024-10-09T21:32:38+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "```suggestion\r\nYou can use [`<Link state>`][link-component-state-prop] or [`useNavigate`][use-navigate] to change the location state.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1795411863",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12103,
        "pr_file": "docs/start/overview.md",
        "discussion_id": "1794255894",
        "commented_code": "@@ -761,7 +761,52 @@ See:\n \n ## Location State\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [location state][locationstate], which is a part of [`location`][location] object. You can get the [`location`][location] object using `useLocation`.\n+\n+```jsx lines=[2,5]\n+function App() {\n+  const location = useLocation();\n+\n+  //get location state object from location object\n+  const locationState = location.state;\n+\n+  return (\n+    <p>\n+      The current location state value is:\n+      {locationState.someValue}\n+    </p>\n+  );\n+}\n+```\n+\n+You can use `<Link state>` or `useNavigate` to change the location state.",
        "comment_created_at": "2024-10-10T13:16:35+00:00",
        "comment_author": "OlegDev1",
        "comment_body": "In other parts of this document internal APIs, like hooks, are usually linked in the \"See\" section. Additionally, I don't think changing `usenavigate` to `use-navigate` is a good idea, since it will break other parts of the doc that use it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1795524280",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12103,
        "pr_file": "docs/start/overview.md",
        "discussion_id": "1794255894",
        "commented_code": "@@ -761,7 +761,52 @@ See:\n \n ## Location State\n \n-<docs-info>TODO:</docs-info>\n+React Router can read and modify the [location state][locationstate], which is a part of [`location`][location] object. You can get the [`location`][location] object using `useLocation`.\n+\n+```jsx lines=[2,5]\n+function App() {\n+  const location = useLocation();\n+\n+  //get location state object from location object\n+  const locationState = location.state;\n+\n+  return (\n+    <p>\n+      The current location state value is:\n+      {locationState.someValue}\n+    </p>\n+  );\n+}\n+```\n+\n+You can use `<Link state>` or `useNavigate` to change the location state.",
        "comment_created_at": "2024-10-10T14:12:59+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "We try to link as much as possible on the places where things are mentioned, hence why we should add a link in this place",
        "pr_file_module": null
      }
    ]
  }
]