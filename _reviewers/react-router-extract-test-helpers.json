[
  {
    "discussion_id": "2060714701",
    "pr_number": 13451,
    "pr_file": "packages/react-router/__tests__/dom/scroll-restoration-test.tsx",
    "created_at": "2025-04-25T18:35:38+00:00",
    "commented_code": "window.scrollTo = scrollTo;\n     });\n \n-    let context: FrameworkContextObject = {\n-      routeModules: { root: { default: () => null } },\n-      manifest: {\n-        routes: {\n-          root: {\n-            hasLoader: false,\n-            hasAction: false,\n-            hasErrorBoundary: false,\n-            id: \"root\",\n-            module: \"root.js\",\n-          },\n-        },\n-        entry: { imports: [], module: \"\" },\n-        url: \"\",\n-        version: \"\",\n-      },\n-    };\n+    let context = mockFrameworkContext();",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2060714701",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13451,
        "pr_file": "packages/react-router/__tests__/dom/scroll-restoration-test.tsx",
        "discussion_id": "2060714701",
        "commented_code": "@@ -207,23 +207,7 @@ describe(`ScrollRestoration`, () => {\n       window.scrollTo = scrollTo;\n     });\n \n-    let context: FrameworkContextObject = {\n-      routeModules: { root: { default: () => null } },\n-      manifest: {\n-        routes: {\n-          root: {\n-            hasLoader: false,\n-            hasAction: false,\n-            hasErrorBoundary: false,\n-            id: \"root\",\n-            module: \"root.js\",\n-          },\n-        },\n-        entry: { imports: [], module: \"\" },\n-        url: \"\",\n-        version: \"\",\n-      },\n-    };\n+    let context = mockFrameworkContext();",
        "comment_created_at": "2025-04-25T18:35:38+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Added some helpers for these things so we can add new fields in one spot and not have to go around and touch all tests that mock out a context",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1456369424",
    "pr_number": 11199,
    "pr_file": "packages/react-router-dom/__tests__/special-characters-test.tsx",
    "created_at": "2024-01-17T19:29:19+00:00",
    "commented_code": "let specialChars = [\n   // This set of characters never gets encoded by window.location\n-  { char: \"x\", pathChar: \"x\", searchChar: \"x\", hashChar: \"x\" },\n-  { char: \"X\", pathChar: \"X\", searchChar: \"X\", hashChar: \"X\" },\n-  { char: \"~\", pathChar: \"~\", searchChar: \"~\", hashChar: \"~\" },\n-  { char: \"!\", pathChar: \"!\", searchChar: \"!\", hashChar: \"!\" },\n-  { char: \"@\", pathChar: \"@\", searchChar: \"@\", hashChar: \"@\" },\n-  { char: \"$\", pathChar: \"$\", searchChar: \"$\", hashChar: \"$\" },\n-  { char: \"*\", pathChar: \"*\", searchChar: \"*\", hashChar: \"*\" },\n-  { char: \"(\", pathChar: \"(\", searchChar: \"(\", hashChar: \"(\" },\n-  { char: \")\", pathChar: \")\", searchChar: \")\", hashChar: \")\" },\n-  { char: \"_\", pathChar: \"_\", searchChar: \"_\", hashChar: \"_\" },\n-  { char: \"-\", pathChar: \"-\", searchChar: \"-\", hashChar: \"-\" },\n-  { char: \"+\", pathChar: \"+\", searchChar: \"+\", hashChar: \"+\" },\n-  { char: \"=\", pathChar: \"=\", searchChar: \"=\", hashChar: \"=\" },\n-  { char: \"[\", pathChar: \"[\", searchChar: \"[\", hashChar: \"[\" },\n-  { char: \"]\", pathChar: \"]\", searchChar: \"]\", hashChar: \"]\" },\n-  { char: \":\", pathChar: \":\", searchChar: \":\", hashChar: \":\" },\n-  { char: \";\", pathChar: \";\", searchChar: \";\", hashChar: \";\" },\n-  { char: \",\", pathChar: \",\", searchChar: \",\", hashChar: \",\" },\n+  { char: \"x\", pathChar: \"x\", searchChar: \"x\", hashChar: \"x\", decodedChar: \"x\" },\n+  { char: \"X\", pathChar: \"X\", searchChar: \"X\", hashChar: \"X\", decodedChar: \"X\" },\n+  { char: \"~\", pathChar: \"~\", searchChar: \"~\", hashChar: \"~\", decodedChar: \"~\" },\n+  { char: \"!\", pathChar: \"!\", searchChar: \"!\", hashChar: \"!\", decodedChar: \"!\" },\n+  { char: \"@\", pathChar: \"@\", searchChar: \"@\", hashChar: \"@\", decodedChar: \"@\" },\n+  { char: \"$\", pathChar: \"$\", searchChar: \"$\", hashChar: \"$\", decodedChar: \"$\" },\n+  { char: \"*\", pathChar: \"*\", searchChar: \"*\", hashChar: \"*\", decodedChar: \"*\" },\n+  { char: \"(\", pathChar: \"(\", searchChar: \"(\", hashChar: \"(\", decodedChar: \"(\" },\n+  { char: \")\", pathChar: \")\", searchChar: \")\", hashChar: \")\", decodedChar: \")\" },\n+  { char: \"_\", pathChar: \"_\", searchChar: \"_\", hashChar: \"_\", decodedChar: \"_\" },\n+  { char: \"-\", pathChar: \"-\", searchChar: \"-\", hashChar: \"-\", decodedChar: \"-\" },\n+  { char: \"+\", pathChar: \"+\", searchChar: \"+\", hashChar: \"+\", decodedChar: \"+\" },\n+  { char: \"=\", pathChar: \"=\", searchChar: \"=\", hashChar: \"=\", decodedChar: \"=\" },\n+  { char: \"[\", pathChar: \"[\", searchChar: \"[\", hashChar: \"[\", decodedChar: \"[\" },\n+  { char: \"]\", pathChar: \"]\", searchChar: \"]\", hashChar: \"]\", decodedChar: \"]\" },\n+  { char: \":\", pathChar: \":\", searchChar: \":\", hashChar: \":\", decodedChar: \":\" },\n+  { char: \";\", pathChar: \";\", searchChar: \";\", hashChar: \";\", decodedChar: \";\" },\n+  { char: \",\", pathChar: \",\", searchChar: \",\", hashChar: \",\", decodedChar: \",\" },",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1456369424",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11199,
        "pr_file": "packages/react-router-dom/__tests__/special-characters-test.tsx",
        "discussion_id": "1456369424",
        "commented_code": "@@ -45,24 +54,24 @@ import {\n \n let specialChars = [\n   // This set of characters never gets encoded by window.location\n-  { char: \"x\", pathChar: \"x\", searchChar: \"x\", hashChar: \"x\" },\n-  { char: \"X\", pathChar: \"X\", searchChar: \"X\", hashChar: \"X\" },\n-  { char: \"~\", pathChar: \"~\", searchChar: \"~\", hashChar: \"~\" },\n-  { char: \"!\", pathChar: \"!\", searchChar: \"!\", hashChar: \"!\" },\n-  { char: \"@\", pathChar: \"@\", searchChar: \"@\", hashChar: \"@\" },\n-  { char: \"$\", pathChar: \"$\", searchChar: \"$\", hashChar: \"$\" },\n-  { char: \"*\", pathChar: \"*\", searchChar: \"*\", hashChar: \"*\" },\n-  { char: \"(\", pathChar: \"(\", searchChar: \"(\", hashChar: \"(\" },\n-  { char: \")\", pathChar: \")\", searchChar: \")\", hashChar: \")\" },\n-  { char: \"_\", pathChar: \"_\", searchChar: \"_\", hashChar: \"_\" },\n-  { char: \"-\", pathChar: \"-\", searchChar: \"-\", hashChar: \"-\" },\n-  { char: \"+\", pathChar: \"+\", searchChar: \"+\", hashChar: \"+\" },\n-  { char: \"=\", pathChar: \"=\", searchChar: \"=\", hashChar: \"=\" },\n-  { char: \"[\", pathChar: \"[\", searchChar: \"[\", hashChar: \"[\" },\n-  { char: \"]\", pathChar: \"]\", searchChar: \"]\", hashChar: \"]\" },\n-  { char: \":\", pathChar: \":\", searchChar: \":\", hashChar: \":\" },\n-  { char: \";\", pathChar: \";\", searchChar: \";\", hashChar: \";\" },\n-  { char: \",\", pathChar: \",\", searchChar: \",\", hashChar: \",\" },\n+  { char: \"x\", pathChar: \"x\", searchChar: \"x\", hashChar: \"x\", decodedChar: \"x\" },\n+  { char: \"X\", pathChar: \"X\", searchChar: \"X\", hashChar: \"X\", decodedChar: \"X\" },\n+  { char: \"~\", pathChar: \"~\", searchChar: \"~\", hashChar: \"~\", decodedChar: \"~\" },\n+  { char: \"!\", pathChar: \"!\", searchChar: \"!\", hashChar: \"!\", decodedChar: \"!\" },\n+  { char: \"@\", pathChar: \"@\", searchChar: \"@\", hashChar: \"@\", decodedChar: \"@\" },\n+  { char: \"$\", pathChar: \"$\", searchChar: \"$\", hashChar: \"$\", decodedChar: \"$\" },\n+  { char: \"*\", pathChar: \"*\", searchChar: \"*\", hashChar: \"*\", decodedChar: \"*\" },\n+  { char: \"(\", pathChar: \"(\", searchChar: \"(\", hashChar: \"(\", decodedChar: \"(\" },\n+  { char: \")\", pathChar: \")\", searchChar: \")\", hashChar: \")\", decodedChar: \")\" },\n+  { char: \"_\", pathChar: \"_\", searchChar: \"_\", hashChar: \"_\", decodedChar: \"_\" },\n+  { char: \"-\", pathChar: \"-\", searchChar: \"-\", hashChar: \"-\", decodedChar: \"-\" },\n+  { char: \"+\", pathChar: \"+\", searchChar: \"+\", hashChar: \"+\", decodedChar: \"+\" },\n+  { char: \"=\", pathChar: \"=\", searchChar: \"=\", hashChar: \"=\", decodedChar: \"=\" },\n+  { char: \"[\", pathChar: \"[\", searchChar: \"[\", hashChar: \"[\", decodedChar: \"[\" },\n+  { char: \"]\", pathChar: \"]\", searchChar: \"]\", hashChar: \"]\", decodedChar: \"]\" },\n+  { char: \":\", pathChar: \":\", searchChar: \":\", hashChar: \":\", decodedChar: \":\" },\n+  { char: \";\", pathChar: \";\", searchChar: \";\", hashChar: \";\", decodedChar: \";\" },\n+  { char: \",\", pathChar: \",\", searchChar: \",\", hashChar: \",\", decodedChar: \",\" },",
        "comment_created_at": "2024-01-17T19:29:19+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Added the `decodedChar` to all existing setups - even though it's the same as the `char` since we now assert matched param values against `decodedChar`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1417522311",
    "pr_number": 11094,
    "pr_file": "packages/react-router-dom/__tests__/data-browser-router-test.tsx",
    "created_at": "2023-12-06T15:34:36+00:00",
    "commented_code": "expect(spy).toHaveBeenCalledTimes(2);\n       });\n     });\n-\n-    // TODO: Probably want these running against RouterProvider in react-router too?\n-    // Look into extracting the setState stuff and sharing the subscriber,\n-    // layout effect, navigator, render stuff",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1417522311",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11094,
        "pr_file": "packages/react-router-dom/__tests__/data-browser-router-test.tsx",
        "discussion_id": "1417522311",
        "commented_code": "@@ -7464,419 +7464,6 @@ function testDomRouter(\n         expect(spy).toHaveBeenCalledTimes(2);\n       });\n     });\n-\n-    // TODO: Probably want these running against RouterProvider in react-router too?\n-    // Look into extracting the setState stuff and sharing the subscriber,\n-    // layout effect, navigator, render stuff",
        "comment_created_at": "2023-12-06T15:34:36+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Moved to partial-hydration-test and these now also run against the `react-router` `RouterProvider` along with `createMemoryRouter`",
        "pr_file_module": null
      }
    ]
  }
]