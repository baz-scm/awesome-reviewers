[
  {
    "discussion_id": "1555998525",
    "pr_number": 11420,
    "pr_file": "packages/react-router-dom/index.tsx",
    "created_at": "2024-04-08T15:01:49+00:00",
    "commented_code": "try {\n             // @ts-expect-error\n             let error = new ErrorConstructor(val.message);\n-            // Wipe away the client-side stack trace.  Nothing to fill it in with\n-            // because we don't serialize SSR stack traces for security reasons\n-            error.stack = \"\";\n+            error.stack = val.stack;",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1555998525",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11420,
        "pr_file": "packages/react-router-dom/index.tsx",
        "discussion_id": "1555998525",
        "commented_code": "@@ -595,9 +595,7 @@ function deserializeErrors(\n           try {\n             // @ts-expect-error\n             let error = new ErrorConstructor(val.message);\n-            // Wipe away the client-side stack trace.  Nothing to fill it in with\n-            // because we don't serialize SSR stack traces for security reasons\n-            error.stack = \"\";\n+            error.stack = val.stack;",
        "comment_created_at": "2024-04-08T15:01:49+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "lol I was super confused for a bit - since we shouldn't be using this \"built-in\" hydration logic in Remix since we do our own hydration via `window.__remixContext`.  This is used to automatically hydrate from `StaticRouterProvider`'s `window.__staticRouterHydrationData` - but we specifically pass [`hydrate=false`](https://github.com/remix-run/react-router/blob/v7/packages/react-router-dom/ssr/server.tsx#L90) in the Remix SSR use case.\r\n\r\nTurns out we're just using the wrong implementation since we brought the Remix code over.  There's a dup version of this method in `ssr/errors.ts` that preserves the stack that we're not implementing since it found a local function with the same name.  \r\n\r\nThe original reason for automatically clearing stack traces is that it felt safer than assuming any DIY-SSR setups would always be stripping them on the server like Remix does so it prevented any accidental leakage of SSR stack traces.  Including the in dev-only mode felt like something advanced users could achieve via manual hydration.\r\n\r\nI think for now we can just de-dup them and maybe add a param to preserve the stack trace that we send from the Remix usage in `RouterProvider` and continue stripping in the RR case (`parseHydrationData`).\r\n\r\nI am also pretty sure the Remix usage can go away in v7 with single fetch but would need to look a bit deeper into that.  ",
        "pr_file_module": null
      },
      {
        "comment_id": "1556468808",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11420,
        "pr_file": "packages/react-router-dom/index.tsx",
        "discussion_id": "1555998525",
        "commented_code": "@@ -595,9 +595,7 @@ function deserializeErrors(\n           try {\n             // @ts-expect-error\n             let error = new ErrorConstructor(val.message);\n-            // Wipe away the client-side stack trace.  Nothing to fill it in with\n-            // because we don't serialize SSR stack traces for security reasons\n-            error.stack = \"\";\n+            error.stack = val.stack;",
        "comment_created_at": "2024-04-08T21:59:32+00:00",
        "comment_author": "markdalgleish",
        "comment_body": "Pairing with @pcattori, we've opted to go with this to keep things moving:\r\n\r\n```ts\r\nerror.stack = process.env.NODE_ENV === \"development\" ? val.stack : \"\";\r\n```\r\n\r\nDeduping feels like a larger task given the current structure so I've left that for now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1765628490",
    "pr_number": 11833,
    "pr_file": "packages/react-router/lib/dom/ssr/single-fetch.tsx",
    "created_at": "2024-09-18T19:52:41+00:00",
    "commented_code": "async function fetchAndDecode(url: URL, init: RequestInit) {\n   let res = await fetch(url, init);\n+  if (res.status === 404) {\n+    throw new ErrorResponseImpl(404, \"Not Found\", true);\n+  }",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1765628490",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11833,
        "pr_file": "packages/react-router/lib/dom/ssr/single-fetch.tsx",
        "discussion_id": "1765628490",
        "commented_code": "@@ -412,6 +412,9 @@ export function singleFetchUrl(reqUrl: URL | string) {\n \n async function fetchAndDecode(url: URL, init: RequestInit) {\n   let res = await fetch(url, init);\n+  if (res.status === 404) {\n+    throw new ErrorResponseImpl(404, \"Not Found\", true);\n+  }",
        "comment_created_at": "2024-09-18T19:52:41+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Bubble a proper 404 to our UI if we're in a prerendered app and there is no static file on the server",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1321768472",
    "pr_number": 10848,
    "pr_file": "packages/react-router-dom/index.tsx",
    "created_at": "2023-09-11T16:01:35+00:00",
    "commented_code": "let key = (getKey ? getKey(location, matches) : null) || location.key;\n         savedScrollPositions[key] = window.scrollY;\n       }\n-      sessionStorage.setItem(\n-        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n-        JSON.stringify(savedScrollPositions)\n-      );\n-      window.history.scrollRestoration = \"auto\";\n+      try {\n+        sessionStorage.setItem(\n+          storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n+          JSON.stringify(savedScrollPositions)\n+        );\n+        window.history.scrollRestoration = \"auto\";\n+      } catch (error) {\n+        console.warn(\"Failed to record scroll position in session storage. Scroll restoration will not work.\", error);\n+      }",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1321768472",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 10848,
        "pr_file": "packages/react-router-dom/index.tsx",
        "discussion_id": "1321768472",
        "commented_code": "@@ -1318,11 +1318,15 @@ function useScrollRestoration({\n         let key = (getKey ? getKey(location, matches) : null) || location.key;\n         savedScrollPositions[key] = window.scrollY;\n       }\n-      sessionStorage.setItem(\n-        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n-        JSON.stringify(savedScrollPositions)\n-      );\n-      window.history.scrollRestoration = \"auto\";\n+      try {\n+        sessionStorage.setItem(\n+          storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n+          JSON.stringify(savedScrollPositions)\n+        );\n+        window.history.scrollRestoration = \"auto\";\n+      } catch (error) {\n+        console.warn(\"Failed to record scroll position in session storage. Scroll restoration will not work.\", error);\n+      }",
        "comment_created_at": "2023-09-11T16:01:35+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "We have a built-in `warning` method we can use here:\r\n\r\n```suggestion\r\n      } catch (error) {\r\n          warning(\r\n            false,\r\n            \"Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly.\"\r\n          );\r\n          console.error(error);\r\n      }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1324185004",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 10848,
        "pr_file": "packages/react-router-dom/index.tsx",
        "discussion_id": "1321768472",
        "commented_code": "@@ -1318,11 +1318,15 @@ function useScrollRestoration({\n         let key = (getKey ? getKey(location, matches) : null) || location.key;\n         savedScrollPositions[key] = window.scrollY;\n       }\n-      sessionStorage.setItem(\n-        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n-        JSON.stringify(savedScrollPositions)\n-      );\n-      window.history.scrollRestoration = \"auto\";\n+      try {\n+        sessionStorage.setItem(\n+          storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n+          JSON.stringify(savedScrollPositions)\n+        );\n+        window.history.scrollRestoration = \"auto\";\n+      } catch (error) {\n+        console.warn(\"Failed to record scroll position in session storage. Scroll restoration will not work.\", error);\n+      }",
        "comment_created_at": "2023-09-13T08:44:41+00:00",
        "comment_author": "david-bezero",
        "comment_body": "why call `console.error`? I guess it's to make sure the cause is displayed somewhere, but since we can recover from the situation I don't think it should be reported as an error - could it remain `console.warn`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1324604969",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 10848,
        "pr_file": "packages/react-router-dom/index.tsx",
        "discussion_id": "1321768472",
        "commented_code": "@@ -1318,11 +1318,15 @@ function useScrollRestoration({\n         let key = (getKey ? getKey(location, matches) : null) || location.key;\n         savedScrollPositions[key] = window.scrollY;\n       }\n-      sessionStorage.setItem(\n-        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n-        JSON.stringify(savedScrollPositions)\n-      );\n-      window.history.scrollRestoration = \"auto\";\n+      try {\n+        sessionStorage.setItem(\n+          storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n+          JSON.stringify(savedScrollPositions)\n+        );\n+        window.history.scrollRestoration = \"auto\";\n+      } catch (error) {\n+        console.warn(\"Failed to record scroll position in session storage. Scroll restoration will not work.\", error);\n+      }",
        "comment_created_at": "2023-09-13T14:28:07+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Yeah the idea there was to show the actual underlying error, but we could probably inline `error.message` into the warning as well if we wanted to keep just one console entry and avoid a `console.error`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1324694724",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 10848,
        "pr_file": "packages/react-router-dom/index.tsx",
        "discussion_id": "1321768472",
        "commented_code": "@@ -1318,11 +1318,15 @@ function useScrollRestoration({\n         let key = (getKey ? getKey(location, matches) : null) || location.key;\n         savedScrollPositions[key] = window.scrollY;\n       }\n-      sessionStorage.setItem(\n-        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n-        JSON.stringify(savedScrollPositions)\n-      );\n-      window.history.scrollRestoration = \"auto\";\n+      try {\n+        sessionStorage.setItem(\n+          storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n+          JSON.stringify(savedScrollPositions)\n+        );\n+        window.history.scrollRestoration = \"auto\";\n+      } catch (error) {\n+        console.warn(\"Failed to record scroll position in session storage. Scroll restoration will not work.\", error);\n+      }",
        "comment_created_at": "2023-09-13T15:23:10+00:00",
        "comment_author": "david-bezero",
        "comment_body": "Added it using `message (${error}).` format, following an existing convention from `safelyDecodeURI`. This also avoids any issues if the thrown entity is not an object for whatever reason.",
        "pr_file_module": null
      }
    ]
  }
]