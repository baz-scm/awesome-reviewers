[
  {
    "discussion_id": "1659166843",
    "pr_number": 11693,
    "pr_file": "packages/react-router/lib/dom/ssr/browser.tsx",
    "created_at": "2024-06-28T18:37:50+00:00",
    "commented_code": "}\n \n     if (hydrationData && hydrationData.errors) {\n+      // If we rendered a 404 during SSR but then matched a prop route on the\n+      // client, we want to clear out the 404 and let the client route render.\n+      // This will cause a flicker/hydration error but will only happen in some\n+      // edge cases:\n+      // - During migrations from RouterProvider -> Vite Plugin\n+      // - If the app is using SSR\n+      // - If users actually enter the site on a client-only URL\n+      if (matchedPropRoute) {\n+        for (let [routeId, error] of Object.entries(hydrationData.errors)) {\n+          if (isRouteErrorResponse(error) && error.status === 404) {\n+            delete hydrationData.errors[routeId];",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1659166843",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11693,
        "pr_file": "packages/react-router/lib/dom/ssr/browser.tsx",
        "discussion_id": "1659166843",
        "commented_code": "@@ -168,6 +209,24 @@ function createHydratedRouter(): RemixRouter {\n     }\n \n     if (hydrationData && hydrationData.errors) {\n+      // If we rendered a 404 during SSR but then matched a prop route on the\n+      // client, we want to clear out the 404 and let the client route render.\n+      // This will cause a flicker/hydration error but will only happen in some\n+      // edge cases:\n+      // - During migrations from RouterProvider -> Vite Plugin\n+      // - If the app is using SSR\n+      // - If users actually enter the site on a client-only URL\n+      if (matchedPropRoute) {\n+        for (let [routeId, error] of Object.entries(hydrationData.errors)) {\n+          if (isRouteErrorResponse(error) && error.status === 404) {\n+            delete hydrationData.errors[routeId];",
        "comment_created_at": "2024-06-28T18:37:50+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Wipe out any SSR'd 404s if we now match our new client routes - we will have a hydration error/flicker but it will recover with the client render",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1290380313",
    "pr_number": 10769,
    "pr_file": "packages/react-router-dom/index.tsx",
    "created_at": "2023-08-10T16:19:20+00:00",
    "commented_code": "export { usePrompt as unstable_usePrompt };\n \n+/**\n+ * @private\n+ * Avoid hydration issues for auto-generated hrefs (i.e., to=\".\") on the server\n+ * since when we auto-generate on the client we'll take our current location\n+ * from window.location which will have encoded any special characters and\n+ * we'll get a hydration mismatch on the SSR attribute and the client attribute.\n+ */\n+function safelyEncodeSsrHref(to: To, href: string): string {\n+  let path = typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n+  // Only touch the href for auto-generated paths\n+  if (!path || path === \".\") {\n+    try {\n+      let encoded = new URL(href, \"http://localhost\");\n+      return encoded.pathname + encoded.search;\n+    } catch (e) {\n+      // no-op - don't change href if we aren't sure it needs encoding",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1290380313",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 10769,
        "pr_file": "packages/react-router-dom/index.tsx",
        "discussion_id": "1290380313",
        "commented_code": "@@ -1483,4 +1498,24 @@ function usePrompt({ when, message }: { when: boolean; message: string }) {\n \n export { usePrompt as unstable_usePrompt };\n \n+/**\n+ * @private\n+ * Avoid hydration issues for auto-generated hrefs (i.e., to=\".\") on the server\n+ * since when we auto-generate on the client we'll take our current location\n+ * from window.location which will have encoded any special characters and\n+ * we'll get a hydration mismatch on the SSR attribute and the client attribute.\n+ */\n+function safelyEncodeSsrHref(to: To, href: string): string {\n+  let path = typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n+  // Only touch the href for auto-generated paths\n+  if (!path || path === \".\") {\n+    try {\n+      let encoded = new URL(href, \"http://localhost\");\n+      return encoded.pathname + encoded.search;\n+    } catch (e) {\n+      // no-op - don't change href if we aren't sure it needs encoding",
        "comment_created_at": "2023-08-10T16:19:20+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "```suggestion\r\n      // no-op - no changes if we can't construct a valid URL\r\n```",
        "pr_file_module": null
      }
    ]
  }
]