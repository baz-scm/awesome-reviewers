[
  {
    "discussion_id": "2111064788",
    "pr_number": 13696,
    "pr_file": "integration/helpers/vite.ts",
    "created_at": "2025-05-28T06:47:54+00:00",
    "commented_code": "await waitOn({\n     resources: [\n-      `http://${args.host ?? \"localhost\"}:${args.port}${args.basename ?? \"/\"}`,\n+      `http://${args.host ?? \"localhost\"}:${args.port}${args.basename ?? \"/favicon.ico\"}`,",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2111064788",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13696,
        "pr_file": "integration/helpers/vite.ts",
        "discussion_id": "2111064788",
        "commented_code": "@@ -463,7 +463,7 @@ async function waitForServer(\n \n   await waitOn({\n     resources: [\n-      `http://${args.host ?? \"localhost\"}:${args.port}${args.basename ?? \"/\"}`,\n+      `http://${args.host ?? \"localhost\"}:${args.port}${args.basename ?? \"/favicon.ico\"}`,",
        "comment_created_at": "2025-05-28T06:47:54+00:00",
        "comment_author": "markdalgleish",
        "comment_body": "Why did this need to be changed?",
        "pr_file_module": null
      },
      {
        "comment_id": "2111908690",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13696,
        "pr_file": "integration/helpers/vite.ts",
        "discussion_id": "2111064788",
        "commented_code": "@@ -463,7 +463,7 @@ async function waitForServer(\n \n   await waitOn({\n     resources: [\n-      `http://${args.host ?? \"localhost\"}:${args.port}${args.basename ?? \"/\"}`,\n+      `http://${args.host ?? \"localhost\"}:${args.port}${args.basename ?? \"/favicon.ico\"}`,",
        "comment_created_at": "2025-05-28T13:25:35+00:00",
        "comment_author": "jacob-ebey",
        "comment_body": "The underlying logic for detecting \"has the server started\" seems to need a \"success\" status code. The test never starts because it responds with a 500. We should always have a favicon though, so just test start against it instead of app logic.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2060277798",
    "pr_number": 13460,
    "pr_file": "packages/react-router-dev/vite/node-adapter.ts",
    "created_at": "2025-04-25T13:46:12+00:00",
    "commented_code": "// https://github.com/solidjs/solid-start/blob/7398163869b489cce503c167e284891cf51a6613/packages/start/node/fetch.js#L162-L185\n export async function toNodeRequest(res: Response, nodeRes: ServerResponse) {\n   nodeRes.statusCode = res.status;\n-  nodeRes.statusMessage = res.statusText;\n+\n+  // HTTP/2 doesn't support status messages (RFC7540 8.1.2.4)",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2060277798",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13460,
        "pr_file": "packages/react-router-dev/vite/node-adapter.ts",
        "discussion_id": "2060277798",
        "commented_code": "@@ -86,7 +86,11 @@ export function fromNodeRequest(\n // https://github.com/solidjs/solid-start/blob/7398163869b489cce503c167e284891cf51a6613/packages/start/node/fetch.js#L162-L185\n export async function toNodeRequest(res: Response, nodeRes: ServerResponse) {\n   nodeRes.statusCode = res.status;\n-  nodeRes.statusMessage = res.statusText;\n+\n+  // HTTP/2 doesn't support status messages (RFC7540 8.1.2.4)",
        "comment_created_at": "2025-04-25T13:46:12+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Lets drop a link in here for easier lookup\r\n\r\n```suggestion\r\n  // HTTP/2 doesn't support status messages\r\n  // https://datatracker.ietf.org/doc/html/rfc7540#section-8.1.2.4\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2029028948",
    "pr_number": 13365,
    "pr_file": "packages/react-router-dev/vite/plugin.ts",
    "created_at": "2025-04-04T15:25:35+00:00",
    "commented_code": "let response = await handler(request);\n   let html = await response.text();\n \n-  if (response.status !== 200) {\n+  if (redirectStatusCodes.has(response.status)) {\n+    // This isn't ideal but gets the job done as a fallback if the user can't\n+    // implement proper redirects via .htaccess or something else.  This is the\n+    // approach used by Astro as well so there's some precedent.\n+    // https://github.com/withastro/roadmap/issues/466\n+    // https://github.com/withastro/astro/blob/main/packages/astro/src/core/routing/3xx.ts\n+    let location = response.headers.get(\"Location\");\n+    // A short delay causes Google to interpret the redirect as temporary.\n+    // https://developers.google.com/search/docs/crawling-indexing/301-redirects#metarefresh\n+    let delay = response.status === 302 ? 2 : 0;\n+    html = `<!doctype html>\n+<head>\n+<title>Redirecting to: ${location}</title>\n+<meta http-equiv=\"refresh\" content=\"${delay};url=${location}\">\n+<meta name=\"robots\" content=\"noindex\">\n+</head>\n+<body>\n+\t<a href=\"${location}\">\n+    Redirecting from <code>${normalizedPath}</code> to <code>${location}</code>\n+  </a>\n+</body>\n+</html>`;",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "2029028948",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 13365,
        "pr_file": "packages/react-router-dev/vite/plugin.ts",
        "discussion_id": "2029028948",
        "commented_code": "@@ -2796,7 +2799,29 @@ async function prerenderRoute(\n   let response = await handler(request);\n   let html = await response.text();\n \n-  if (response.status !== 200) {\n+  if (redirectStatusCodes.has(response.status)) {\n+    // This isn't ideal but gets the job done as a fallback if the user can't\n+    // implement proper redirects via .htaccess or something else.  This is the\n+    // approach used by Astro as well so there's some precedent.\n+    // https://github.com/withastro/roadmap/issues/466\n+    // https://github.com/withastro/astro/blob/main/packages/astro/src/core/routing/3xx.ts\n+    let location = response.headers.get(\"Location\");\n+    // A short delay causes Google to interpret the redirect as temporary.\n+    // https://developers.google.com/search/docs/crawling-indexing/301-redirects#metarefresh\n+    let delay = response.status === 302 ? 2 : 0;\n+    html = `<!doctype html>\n+<head>\n+<title>Redirecting to: ${location}</title>\n+<meta http-equiv=\"refresh\" content=\"${delay};url=${location}\">\n+<meta name=\"robots\" content=\"noindex\">\n+</head>\n+<body>\n+\t<a href=\"${location}\">\n+    Redirecting from <code>${normalizedPath}</code> to <code>${location}</code>\n+  </a>\n+</body>\n+</html>`;",
        "comment_created_at": "2025-04-04T15:25:35+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "When a prerendered document redirects we fall back on an http-equiv redirect",
        "pr_file_module": null
      }
    ]
  }
]