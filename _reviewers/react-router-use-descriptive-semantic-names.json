[
  {
    "discussion_id": "1927826789",
    "pr_number": 12264,
    "pr_file": "packages/react-router/lib/types/route-module.ts",
    "created_at": "2025-01-23T23:40:21+00:00",
    "commented_code": ">\n   >\n ];\n+\n+/**\n+ * A brand that can be applied to a type to indicate that it will serialize\n+ * to a specific type when transported to the client from a loader.\n+ * Only use this if you have additional serialization/deserialization logic\n+ * in your application.\n+ */\n+export type SerializesTo<T> = {\n+  $__RR_SerializesTo?: [T];",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1927826789",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12264,
        "pr_file": "packages/react-router/lib/types/route-module.ts",
        "discussion_id": "1927826789",
        "commented_code": "@@ -260,3 +260,13 @@ type __tests = [\n     >\n   >\n ];\n+\n+/**\n+ * A brand that can be applied to a type to indicate that it will serialize\n+ * to a specific type when transported to the client from a loader.\n+ * Only use this if you have additional serialization/deserialization logic\n+ * in your application.\n+ */\n+export type SerializesTo<T> = {\n+  $__RR_SerializesTo?: [T];",
        "comment_created_at": "2025-01-23T23:40:21+00:00",
        "comment_author": "pcattori",
        "comment_body": "Is the `$__` prefix a widely used convention? I was thinking of `__ReactRouter_` prefix instead of `$__RR_` just for increased clarity, but wasn't sure if there were conventions I'm unaware of",
        "pr_file_module": null
      },
      {
        "comment_id": "1928242325",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12264,
        "pr_file": "packages/react-router/lib/types/route-module.ts",
        "discussion_id": "1927826789",
        "commented_code": "@@ -260,3 +260,13 @@ type __tests = [\n     >\n   >\n ];\n+\n+/**\n+ * A brand that can be applied to a type to indicate that it will serialize\n+ * to a specific type when transported to the client from a loader.\n+ * Only use this if you have additional serialization/deserialization logic\n+ * in your application.\n+ */\n+export type SerializesTo<T> = {\n+  $__RR_SerializesTo?: [T];",
        "comment_created_at": "2025-01-24T07:39:43+00:00",
        "comment_author": "phryneas",
        "comment_body": "I'm perfectly fine with `__ReactRouter_SerializesTo`, too - I just hadn't seen any precedence and wanted to be extra sure :)\r\n\r\nWe use the `$ ` (even with a space) in GraphQL because it's not allowed per spec for field names and we avoid collisions, but here it's not really necessary.\r\n\r\nI'll fix this up to be `__ReactRouter_SerializesTo` later!",
        "pr_file_module": null
      },
      {
        "comment_id": "1928349730",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12264,
        "pr_file": "packages/react-router/lib/types/route-module.ts",
        "discussion_id": "1927826789",
        "commented_code": "@@ -260,3 +260,13 @@ type __tests = [\n     >\n   >\n ];\n+\n+/**\n+ * A brand that can be applied to a type to indicate that it will serialize\n+ * to a specific type when transported to the client from a loader.\n+ * Only use this if you have additional serialization/deserialization logic\n+ * in your application.\n+ */\n+export type SerializesTo<T> = {\n+  $__RR_SerializesTo?: [T];",
        "comment_created_at": "2025-01-24T08:57:59+00:00",
        "comment_author": "phryneas",
        "comment_body": "Okay, made that change!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1878862922",
    "pr_number": 12515,
    "pr_file": "packages/react-router/lib/router/router.ts",
    "created_at": "2024-12-10T21:11:47+00:00",
    "commented_code": "? actionMatch\n         : findNearestBoundary(matches, actionMatch.route.id);\n \n-      let context = await loadRouteData(\n+      let handlerContext = await loadRouteData(",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1878862922",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 12515,
        "pr_file": "packages/react-router/lib/router/router.ts",
        "discussion_id": "1878862922",
        "commented_code": "@@ -3676,7 +3679,7 @@ export function createStaticHandler(\n         ? actionMatch\n         : findNearestBoundary(matches, actionMatch.route.id);\n \n-      let context = await loadRouteData(\n+      let handlerContext = await loadRouteData(",
        "comment_created_at": "2024-12-10T21:11:47+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Rename for clarity:\r\n\r\n* `handlerContext`-> a `StaticHandlerContext` returned from `staticHandler.query()`\r\n* `requestContext` -> The `AppLoadContext` used passed to `staticHandler.query` by Remix SSR today\r\n* `routerContext` -> This new `DefaultRouterContext` used for SPAs since it's not tired to a request like the SSR use case\r\n\r\nIn shared code, `requestContext` becomes `routerContext`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1693471205",
    "pr_number": 11840,
    "pr_file": "packages/react-router/lib/router/router.ts",
    "created_at": "2024-07-26T18:52:13+00:00",
    "commented_code": "/**\n    * The action of the most recent navigation\n    */\n-  historyAction: HistoryAction;\n+  historyAction: NavigationType;",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1693471205",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11840,
        "pr_file": "packages/react-router/lib/router/router.ts",
        "discussion_id": "1693471205",
        "commented_code": "@@ -276,7 +276,7 @@ export interface RouterState {\n   /**\n    * The action of the most recent navigation\n    */\n-  historyAction: HistoryAction;\n+  historyAction: NavigationType;",
        "comment_created_at": "2024-07-26T18:52:13+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "I wonder if we should rename this to `navigationType` in v7 to align with `useNavigationType`...?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1727390066",
    "pr_number": 11620,
    "pr_file": "packages/react-router/lib/router/router.ts",
    "created_at": "2024-08-22T15:42:47+00:00",
    "commented_code": "// Flag to ignore the next history update, so we can revert the URL change on\n   // a POP navigation that was blocked by the user without touching router state\n-  let ignoreNextHistoryUpdate = false;\n+  let ignoreNextHistoryUpdate: (() => void) | undefined = undefined;",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1727390066",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11620,
        "pr_file": "packages/react-router/lib/router/router.ts",
        "discussion_id": "1727390066",
        "commented_code": "@@ -1007,7 +1007,7 @@ export function createRouter(init: RouterInit): Router {\n \n   // Flag to ignore the next history update, so we can revert the URL change on\n   // a POP navigation that was blocked by the user without touching router state\n-  let ignoreNextHistoryUpdate = false;\n+  let ignoreNextHistoryUpdate: (() => void) | undefined = undefined;",
        "comment_created_at": "2024-08-22T15:42:47+00:00",
        "comment_author": "brophdawg11",
        "comment_body": "Could we rename this to something like `unblockBlockerHistoryUpdate` to align with the new approach?",
        "pr_file_module": null
      },
      {
        "comment_id": "1728489513",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11620,
        "pr_file": "packages/react-router/lib/router/router.ts",
        "discussion_id": "1727390066",
        "commented_code": "@@ -1007,7 +1007,7 @@ export function createRouter(init: RouterInit): Router {\n \n   // Flag to ignore the next history update, so we can revert the URL change on\n   // a POP navigation that was blocked by the user without touching router state\n-  let ignoreNextHistoryUpdate = false;\n+  let ignoreNextHistoryUpdate: (() => void) | undefined = undefined;",
        "comment_created_at": "2024-08-23T07:14:37+00:00",
        "comment_author": "Artur-",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1537945850",
    "pr_number": 11371,
    "pr_file": "packages/dev/__tests__/cli-test.ts",
    "created_at": "2024-03-25T17:17:02+00:00",
    "commented_code": "+import childProcess from \"node:child_process\";\n+import os from \"node:os\";\n+import path from \"node:path\";\n+import util from \"node:util\";\n+import fse from \"fs-extra\";\n+\n+let execFile = util.promisify(childProcess.execFile);\n+\n+const TEMP_DIR = path.join(\n+  fse.realpathSync(os.tmpdir()),\n+  `rr-tests-${Math.random().toString(32).slice(2)}`\n+);\n+\n+jest.setTimeout(30_000);\n+beforeAll(async () => {\n+  await fse.remove(TEMP_DIR);\n+  await fse.ensureDir(TEMP_DIR);\n+});\n+\n+afterAll(async () => {\n+  await fse.remove(TEMP_DIR);\n+});\n+\n+async function execCli(\n+  args: Array<string>,\n+  options: Exclude<Parameters<typeof execFile>[2], null | undefined> = {}\n+) {\n+  if (process.platform === \"win32\") {\n+    let cp = childProcess.spawnSync(\n+      \"node\",\n+      [\n+        \"--require\",\n+        require.resolve(\"esbuild-register\"),\n+        path.resolve(__dirname, \"../cli.ts\"),\n+        ...args,\n+      ],\n+      {\n+        cwd: TEMP_DIR,\n+        ...options,\n+        env: {\n+          ...process.env,\n+          NO_COLOR: \"1\",\n+          ...options.env,\n+        },\n+      }\n+    );\n+\n+    return {\n+      stdout: cp.stdout?.toString(\"utf-8\"),\n+    };\n+  } else {\n+    let result = await execFile(\n+      \"node\",\n+      [\n+        \"--require\",\n+        require.resolve(\"esbuild-register\"),\n+        path.resolve(__dirname, \"../cli.ts\"),\n+        ...args,\n+      ],\n+      {\n+        cwd: TEMP_DIR,\n+        ...options,\n+        env: {\n+          ...process.env,\n+          NO_COLOR: \"1\",\n+          ...options.env,\n+        },\n+      }\n+    );\n+    return {\n+      ...result,\n+      stdout: result.stdout.replace(TEMP_DIR, \"<TEMP_DIR>\").trim(),\n+    };\n+  }\n+}\n+\n+describe(\"rr CLI\", () => {\n+  describe(\"the --help flag\", () => {\n+    it(\"prints top-level help info\", async () => {\n+      let { stdout } = await execCli([\"--help\"]);\n+      let version = require(\"../package.json\").version;\n+      expect(stdout.trim().replace(version, \"[VERSION]\"))\n+        .toMatchInlineSnapshot(`\n+        \"rr/[VERSION]\n+\n+        Usage:\n+          $ rr <command> [options]\n+\n+        Commands:\n+          vite:dev [root]    build for production",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1537945850",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11371,
        "pr_file": "packages/dev/__tests__/cli-test.ts",
        "discussion_id": "1537945850",
        "commented_code": "@@ -0,0 +1,154 @@\n+import childProcess from \"node:child_process\";\n+import os from \"node:os\";\n+import path from \"node:path\";\n+import util from \"node:util\";\n+import fse from \"fs-extra\";\n+\n+let execFile = util.promisify(childProcess.execFile);\n+\n+const TEMP_DIR = path.join(\n+  fse.realpathSync(os.tmpdir()),\n+  `rr-tests-${Math.random().toString(32).slice(2)}`\n+);\n+\n+jest.setTimeout(30_000);\n+beforeAll(async () => {\n+  await fse.remove(TEMP_DIR);\n+  await fse.ensureDir(TEMP_DIR);\n+});\n+\n+afterAll(async () => {\n+  await fse.remove(TEMP_DIR);\n+});\n+\n+async function execCli(\n+  args: Array<string>,\n+  options: Exclude<Parameters<typeof execFile>[2], null | undefined> = {}\n+) {\n+  if (process.platform === \"win32\") {\n+    let cp = childProcess.spawnSync(\n+      \"node\",\n+      [\n+        \"--require\",\n+        require.resolve(\"esbuild-register\"),\n+        path.resolve(__dirname, \"../cli.ts\"),\n+        ...args,\n+      ],\n+      {\n+        cwd: TEMP_DIR,\n+        ...options,\n+        env: {\n+          ...process.env,\n+          NO_COLOR: \"1\",\n+          ...options.env,\n+        },\n+      }\n+    );\n+\n+    return {\n+      stdout: cp.stdout?.toString(\"utf-8\"),\n+    };\n+  } else {\n+    let result = await execFile(\n+      \"node\",\n+      [\n+        \"--require\",\n+        require.resolve(\"esbuild-register\"),\n+        path.resolve(__dirname, \"../cli.ts\"),\n+        ...args,\n+      ],\n+      {\n+        cwd: TEMP_DIR,\n+        ...options,\n+        env: {\n+          ...process.env,\n+          NO_COLOR: \"1\",\n+          ...options.env,\n+        },\n+      }\n+    );\n+    return {\n+      ...result,\n+      stdout: result.stdout.replace(TEMP_DIR, \"<TEMP_DIR>\").trim(),\n+    };\n+  }\n+}\n+\n+describe(\"rr CLI\", () => {\n+  describe(\"the --help flag\", () => {\n+    it(\"prints top-level help info\", async () => {\n+      let { stdout } = await execCli([\"--help\"]);\n+      let version = require(\"../package.json\").version;\n+      expect(stdout.trim().replace(version, \"[VERSION]\"))\n+        .toMatchInlineSnapshot(`\n+        \"rr/[VERSION]\n+\n+        Usage:\n+          $ rr <command> [options]\n+\n+        Commands:\n+          vite:dev [root]    build for production",
        "comment_created_at": "2024-03-25T17:17:02+00:00",
        "comment_author": "jacob-ebey",
        "comment_body": "Can these just be `dev` and `build` without the `vite:` prefix?",
        "pr_file_module": null
      },
      {
        "comment_id": "1538144063",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 11371,
        "pr_file": "packages/dev/__tests__/cli-test.ts",
        "discussion_id": "1537945850",
        "commented_code": "@@ -0,0 +1,154 @@\n+import childProcess from \"node:child_process\";\n+import os from \"node:os\";\n+import path from \"node:path\";\n+import util from \"node:util\";\n+import fse from \"fs-extra\";\n+\n+let execFile = util.promisify(childProcess.execFile);\n+\n+const TEMP_DIR = path.join(\n+  fse.realpathSync(os.tmpdir()),\n+  `rr-tests-${Math.random().toString(32).slice(2)}`\n+);\n+\n+jest.setTimeout(30_000);\n+beforeAll(async () => {\n+  await fse.remove(TEMP_DIR);\n+  await fse.ensureDir(TEMP_DIR);\n+});\n+\n+afterAll(async () => {\n+  await fse.remove(TEMP_DIR);\n+});\n+\n+async function execCli(\n+  args: Array<string>,\n+  options: Exclude<Parameters<typeof execFile>[2], null | undefined> = {}\n+) {\n+  if (process.platform === \"win32\") {\n+    let cp = childProcess.spawnSync(\n+      \"node\",\n+      [\n+        \"--require\",\n+        require.resolve(\"esbuild-register\"),\n+        path.resolve(__dirname, \"../cli.ts\"),\n+        ...args,\n+      ],\n+      {\n+        cwd: TEMP_DIR,\n+        ...options,\n+        env: {\n+          ...process.env,\n+          NO_COLOR: \"1\",\n+          ...options.env,\n+        },\n+      }\n+    );\n+\n+    return {\n+      stdout: cp.stdout?.toString(\"utf-8\"),\n+    };\n+  } else {\n+    let result = await execFile(\n+      \"node\",\n+      [\n+        \"--require\",\n+        require.resolve(\"esbuild-register\"),\n+        path.resolve(__dirname, \"../cli.ts\"),\n+        ...args,\n+      ],\n+      {\n+        cwd: TEMP_DIR,\n+        ...options,\n+        env: {\n+          ...process.env,\n+          NO_COLOR: \"1\",\n+          ...options.env,\n+        },\n+      }\n+    );\n+    return {\n+      ...result,\n+      stdout: result.stdout.replace(TEMP_DIR, \"<TEMP_DIR>\").trim(),\n+    };\n+  }\n+}\n+\n+describe(\"rr CLI\", () => {\n+  describe(\"the --help flag\", () => {\n+    it(\"prints top-level help info\", async () => {\n+      let { stdout } = await execCli([\"--help\"]);\n+      let version = require(\"../package.json\").version;\n+      expect(stdout.trim().replace(version, \"[VERSION]\"))\n+        .toMatchInlineSnapshot(`\n+        \"rr/[VERSION]\n+\n+        Usage:\n+          $ rr <command> [options]\n+\n+        Commands:\n+          vite:dev [root]    build for production",
        "comment_created_at": "2024-03-25T19:43:27+00:00",
        "comment_author": "markdalgleish",
        "comment_body": "Updated \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1316382935",
    "pr_number": 10843,
    "pr_file": "packages/router/history.ts",
    "created_at": "2023-09-05T20:38:50+00:00",
    "commented_code": "hash: string;\n }\n \n+// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n+// remove Remix `useLocation` wrapper.\n+\n /**\n  * An entry in a history stack. A location contains information about the\n  * URL path, as well as possibly some arbitrary state and a key.\n  */\n-export interface Location extends Path {\n+export interface Location<S = any> extends Path {",
    "repo_full_name": "remix-run/react-router",
    "discussion_comments": [
      {
        "comment_id": "1316382935",
        "repo_full_name": "remix-run/react-router",
        "pr_number": 10843,
        "pr_file": "packages/router/history.ts",
        "discussion_id": "1316382935",
        "commented_code": "@@ -49,15 +49,18 @@ export interface Path {\n   hash: string;\n }\n \n+// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n+// remove Remix `useLocation` wrapper.\n+\n /**\n  * An entry in a history stack. A location contains information about the\n  * URL path, as well as possibly some arbitrary state and a key.\n  */\n-export interface Location extends Path {\n+export interface Location<S = any> extends Path {",
        "comment_created_at": "2023-09-05T20:38:50+00:00",
        "comment_author": "MichaelDeBoey",
        "comment_body": "```suggestion\r\nexport interface Location<State = any> extends Path {\r\n```",
        "pr_file_module": null
      }
    ]
  }
]