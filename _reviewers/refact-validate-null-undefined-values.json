[
  {
    "discussion_id": "2123389190",
    "pr_number": 807,
    "pr_file": "refact-agent/gui/src/features/Chat/Thread/selectors.ts",
    "created_at": "2025-06-03T10:25:31+00:00",
    "commented_code": "if (toolCalls.length === 0) return false;\n \n-    const toolMessages = tailMessages\n-      .filter(isToolMessage)\n-      .map((toolMessage) => toolMessage.content.tool_call_id);\n+    const toolMessages = tailMessages.map((msg) => {\n+      if (isToolMessage(msg)) {\n+        return msg.content.tool_call_id;\n+      }\n+      if (isDiffMessage(msg)) {\n+        return msg.tool_call_id;",
    "repo_full_name": "smallcloudai/refact",
    "discussion_comments": [
      {
        "comment_id": "2123389190",
        "repo_full_name": "smallcloudai/refact",
        "pr_number": 807,
        "pr_file": "refact-agent/gui/src/features/Chat/Thread/selectors.ts",
        "discussion_id": "2123389190",
        "commented_code": "@@ -136,9 +136,14 @@ export const selectHasUncalledTools = createSelector(\n \n     if (toolCalls.length === 0) return false;\n \n-    const toolMessages = tailMessages\n-      .filter(isToolMessage)\n-      .map((toolMessage) => toolMessage.content.tool_call_id);\n+    const toolMessages = tailMessages.map((msg) => {\n+      if (isToolMessage(msg)) {\n+        return msg.content.tool_call_id;\n+      }\n+      if (isDiffMessage(msg)) {\n+        return msg.tool_call_id;",
        "comment_created_at": "2025-06-03T10:25:31+00:00",
        "comment_author": "MarcMcIntosh",
        "comment_body": "I think more types can have tool call id,\r\nmost will have it at the top level. so `if (\"tool_call_id\" in msg) { ... }`\r\nalso remember to filter them so theres no `undefined` values in the array\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2107357912",
    "pr_number": 785,
    "pr_file": "refact-agent/gui/src/services/refact/integrations.ts",
    "created_at": "2025-05-26T13:26:19+00:00",
    "commented_code": "if (isPrimitive(value)) {\n       return true;\n     }\n-    if (typeof value === \"object\" && value !== null) {\n+    if (typeof value === \"object\") {",
    "repo_full_name": "smallcloudai/refact",
    "discussion_comments": [
      {
        "comment_id": "2107357912",
        "repo_full_name": "smallcloudai/refact",
        "pr_number": 785,
        "pr_file": "refact-agent/gui/src/services/refact/integrations.ts",
        "discussion_id": "2107357912",
        "commented_code": "@@ -290,7 +290,7 @@ function isIntegration(json: unknown): json is Integration {\n     if (isPrimitive(value)) {\n       return true;\n     }\n-    if (typeof value === \"object\" && value !== null) {\n+    if (typeof value === \"object\") {",
        "comment_created_at": "2025-05-26T13:26:19+00:00",
        "comment_author": "MarcMcIntosh",
        "comment_body": "better keep the null check or it might throw an error",
        "pr_file_module": null
      },
      {
        "comment_id": "2108169815",
        "repo_full_name": "smallcloudai/refact",
        "pr_number": 785,
        "pr_file": "refact-agent/gui/src/services/refact/integrations.ts",
        "discussion_id": "2107357912",
        "commented_code": "@@ -290,7 +290,7 @@ function isIntegration(json: unknown): json is Integration {\n     if (isPrimitive(value)) {\n       return true;\n     }\n-    if (typeof value === \"object\" && value !== null) {\n+    if (typeof value === \"object\") {",
        "comment_created_at": "2025-05-27T05:02:41+00:00",
        "comment_author": "alashchev17",
        "comment_body": "okay, keeping that",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2060443093",
    "pr_number": 710,
    "pr_file": "refact-agent/gui/src/features/Chat/Thread/utils.ts",
    "created_at": "2025-04-25T15:18:20+00:00",
    "commented_code": "const currentUsage = response.usage;\n \n-  if (currentUsage && response.choices.length === 0) {\n+  if (currentUsage) {\n     const lastAssistantIndex = lastIndexOf(messages, isAssistantMessage);\n     if (lastAssistantIndex === -1) return messages;\n \n+    const lastAssistantMessage = messages[lastAssistantIndex];\n+    if (!isAssistantMessage(lastAssistantMessage)) return messages;\n+\n+    const maybeLastAssistantMessageUsage = lastAssistantMessage.usage;\n+    let usageToStore = currentUsage;\n+\n+    if (maybeLastAssistantMessageUsage) {\n+      const allMatch = Object.entries(currentUsage).every(\n+        ([key, value]) =>\n+          maybeLastAssistantMessageUsage[key as keyof Usage] === value,",
    "repo_full_name": "smallcloudai/refact",
    "discussion_comments": [
      {
        "comment_id": "2060443093",
        "repo_full_name": "smallcloudai/refact",
        "pr_number": 710,
        "pr_file": "refact-agent/gui/src/features/Chat/Thread/utils.ts",
        "discussion_id": "2060443093",
        "commented_code": "@@ -232,13 +233,33 @@ export function formatChatResponse(\n \n   const currentUsage = response.usage;\n \n-  if (currentUsage && response.choices.length === 0) {\n+  if (currentUsage) {\n     const lastAssistantIndex = lastIndexOf(messages, isAssistantMessage);\n     if (lastAssistantIndex === -1) return messages;\n \n+    const lastAssistantMessage = messages[lastAssistantIndex];\n+    if (!isAssistantMessage(lastAssistantMessage)) return messages;\n+\n+    const maybeLastAssistantMessageUsage = lastAssistantMessage.usage;\n+    let usageToStore = currentUsage;\n+\n+    if (maybeLastAssistantMessageUsage) {\n+      const allMatch = Object.entries(currentUsage).every(\n+        ([key, value]) =>\n+          maybeLastAssistantMessageUsage[key as keyof Usage] === value,",
        "comment_created_at": "2025-04-25T15:18:20+00:00",
        "comment_author": "MarcMcIntosh",
        "comment_body": "Checking for the same reference, or should it be checking for the same value?",
        "pr_file_module": null
      },
      {
        "comment_id": "2060492775",
        "repo_full_name": "smallcloudai/refact",
        "pr_number": 710,
        "pr_file": "refact-agent/gui/src/features/Chat/Thread/utils.ts",
        "discussion_id": "2060443093",
        "commented_code": "@@ -232,13 +233,33 @@ export function formatChatResponse(\n \n   const currentUsage = response.usage;\n \n-  if (currentUsage && response.choices.length === 0) {\n+  if (currentUsage) {\n     const lastAssistantIndex = lastIndexOf(messages, isAssistantMessage);\n     if (lastAssistantIndex === -1) return messages;\n \n+    const lastAssistantMessage = messages[lastAssistantIndex];\n+    if (!isAssistantMessage(lastAssistantMessage)) return messages;\n+\n+    const maybeLastAssistantMessageUsage = lastAssistantMessage.usage;\n+    let usageToStore = currentUsage;\n+\n+    if (maybeLastAssistantMessageUsage) {\n+      const allMatch = Object.entries(currentUsage).every(\n+        ([key, value]) =>\n+          maybeLastAssistantMessageUsage[key as keyof Usage] === value,",
        "comment_created_at": "2025-04-25T15:51:18+00:00",
        "comment_author": "alashchev17",
        "comment_body": "it should take usage from last assistant message, then check if the `currentUsage` values with corresponding keys are equal with values of `maybeLastAssistantMessageUsage[key]`",
        "pr_file_module": null
      }
    ]
  }
]