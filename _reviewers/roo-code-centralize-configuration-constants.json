[
  {
    "discussion_id": "2211823381",
    "pr_number": 5788,
    "pr_file": "webview-ui/src/components/settings/MaxTokensControl.tsx",
    "created_at": "2025-07-16T23:31:17+00:00",
    "commented_code": "+import React from \"react\"\n+import { useAppTranslation } from \"@/i18n/TranslationContext\"\n+import { ModelInfo } from \"@roo-code/types\"\n+import { Input } from \"@/components/ui\"\n+\n+interface MaxTokensControlProps {\n+\tvalue?: number\n+\tonChange: (value: number | undefined) => void\n+\tmodelInfo?: ModelInfo\n+\tminValue?: number\n+\tmaxValue?: number\n+\tclassName?: string\n+}\n+\n+export const MaxTokensControl: React.FC<MaxTokensControlProps> = ({\n+\tvalue,\n+\tonChange,\n+\tmodelInfo,\n+\tminValue = 1000,\n+\tmaxValue = 200000,\n+\tclassName,\n+}) => {\n+\tconst { t } = useAppTranslation()\n+\n+\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n+\t\tconst inputValue = e.target.value\n+\t\tif (inputValue === \"\") {\n+\t\t\tonChange(undefined)\n+\t\t\treturn\n+\t\t}\n+\n+\t\tconst numValue = parseInt(inputValue, 10)\n+\t\tif (!isNaN(numValue)) {\n+\t\t\tonChange(numValue)\n+\t\t}\n+\t}\n+\n+\tconst effectiveMaxValue = modelInfo?.maxTokens || maxValue\n+\tconst displayValue = value ?? 8192",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2211823381",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5788,
        "pr_file": "webview-ui/src/components/settings/MaxTokensControl.tsx",
        "discussion_id": "2211823381",
        "commented_code": "@@ -0,0 +1,79 @@\n+import React from \"react\"\n+import { useAppTranslation } from \"@/i18n/TranslationContext\"\n+import { ModelInfo } from \"@roo-code/types\"\n+import { Input } from \"@/components/ui\"\n+\n+interface MaxTokensControlProps {\n+\tvalue?: number\n+\tonChange: (value: number | undefined) => void\n+\tmodelInfo?: ModelInfo\n+\tminValue?: number\n+\tmaxValue?: number\n+\tclassName?: string\n+}\n+\n+export const MaxTokensControl: React.FC<MaxTokensControlProps> = ({\n+\tvalue,\n+\tonChange,\n+\tmodelInfo,\n+\tminValue = 1000,\n+\tmaxValue = 200000,\n+\tclassName,\n+}) => {\n+\tconst { t } = useAppTranslation()\n+\n+\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n+\t\tconst inputValue = e.target.value\n+\t\tif (inputValue === \"\") {\n+\t\t\tonChange(undefined)\n+\t\t\treturn\n+\t\t}\n+\n+\t\tconst numValue = parseInt(inputValue, 10)\n+\t\tif (!isNaN(numValue)) {\n+\t\t\tonChange(numValue)\n+\t\t}\n+\t}\n+\n+\tconst effectiveMaxValue = modelInfo?.maxTokens || maxValue\n+\tconst displayValue = value ?? 8192",
        "comment_created_at": "2025-07-16T23:31:17+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "UI consideration: The component shows 8192 as the default value when no value is set. Would it be clearer to show the model's actual max tokens instead?\n\n```typescript\nconst displayValue = value ?? modelInfo?.maxTokens ?? 8192\n```\n\nThis would give users better context about what the model actually supports before they override it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2161770886",
    "pr_number": 5041,
    "pr_file": "webview-ui/src/components/settings/CodeIndexSettings.tsx",
    "created_at": "2025-06-23T14:26:47+00:00",
    "commented_code": "</div>\n \t\t\t\t\t</div>\n \n+\t\t\t\t\t<div className=\"flex flex-col gap-3\">\n+\t\t\t\t\t\t<div className=\"flex items-center gap-4 font-bold\">\n+\t\t\t\t\t\t\t<div>{t(\"settings:codeIndex.searchMinScoreLabel\")}</div>\n+\t\t\t\t\t\t</div>\n+\t\t\t\t\t\t<div className=\"flex flex-col gap-3\">\n+\t\t\t\t\t\t\t<div className=\"flex items-center gap-3\">\n+\t\t\t\t\t\t\t\t<span className=\"text-xs text-vscode-descriptionForeground min-w-[30px]\">0.0</span>\n+\t\t\t\t\t\t\t\t<input\n+\t\t\t\t\t\t\t\t\ttype=\"range\"\n+\t\t\t\t\t\t\t\t\tmin=\"0\"\n+\t\t\t\t\t\t\t\t\tmax=\"1\"\n+\t\t\t\t\t\t\t\t\tstep=\"0.05\"\n+\t\t\t\t\t\t\t\t\tvalue={codebaseIndexConfig.codebaseIndexSearchMinScore || 0.4}",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2161770886",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5041,
        "pr_file": "webview-ui/src/components/settings/CodeIndexSettings.tsx",
        "discussion_id": "2161770886",
        "commented_code": "@@ -449,6 +449,45 @@ export const CodeIndexSettings: React.FC<CodeIndexSettingsProps> = ({\n \t\t\t\t\t\t</div>\n \t\t\t\t\t</div>\n \n+\t\t\t\t\t<div className=\"flex flex-col gap-3\">\n+\t\t\t\t\t\t<div className=\"flex items-center gap-4 font-bold\">\n+\t\t\t\t\t\t\t<div>{t(\"settings:codeIndex.searchMinScoreLabel\")}</div>\n+\t\t\t\t\t\t</div>\n+\t\t\t\t\t\t<div className=\"flex flex-col gap-3\">\n+\t\t\t\t\t\t\t<div className=\"flex items-center gap-3\">\n+\t\t\t\t\t\t\t\t<span className=\"text-xs text-vscode-descriptionForeground min-w-[30px]\">0.0</span>\n+\t\t\t\t\t\t\t\t<input\n+\t\t\t\t\t\t\t\t\ttype=\"range\"\n+\t\t\t\t\t\t\t\t\tmin=\"0\"\n+\t\t\t\t\t\t\t\t\tmax=\"1\"\n+\t\t\t\t\t\t\t\t\tstep=\"0.05\"\n+\t\t\t\t\t\t\t\t\tvalue={codebaseIndexConfig.codebaseIndexSearchMinScore || 0.4}",
        "comment_created_at": "2025-06-23T14:26:47+00:00",
        "comment_author": "Copilot",
        "comment_body": "Avoid duplicating the default threshold (0.4) in the UI code; import and use the shared SEARCH_MIN_SCORE constant to keep defaults in sync across frontend and backend.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2126635465",
    "pr_number": 2955,
    "pr_file": "webview-ui/src/components/settings/SettingsView.tsx",
    "created_at": "2025-06-04T13:40:27+00:00",
    "commented_code": "return prevState\n \t\t\t\t}\n \n+\t\t\t\tconst newState: ExtensionStateContextType = {\n+\t\t\t\t\t...prevState,\n+\t\t\t\t\tapiConfiguration: { ...prevState.apiConfiguration, [field]: value },\n+\t\t\t\t}\n+\t\t\t\t// Update the field in root state for sync\n+\t\t\t\tif (field === \"diffEnabled\") {\n+\t\t\t\t\tnewState.diffEnabled = value as boolean // type is boolean\n+\t\t\t\t} else if (field === \"diffViewAutoFocus\") {\n+\t\t\t\t\tnewState.diffViewAutoFocus = value as boolean // type is boolean\n+\t\t\t\t} else if (field === \"autoCloseRooTabs\") {\n+\t\t\t\t\tnewState.autoCloseRooTabs = value as boolean // type is boolean\n+\t\t\t\t} else if (field === \"autoCloseAllRooTabs\") {\n+\t\t\t\t\tnewState.autoCloseAllRooTabs = value as boolean // type is boolean\n+\t\t\t\t} else if (field === \"fuzzyMatchThreshold\") {\n+\t\t\t\t\tnewState.fuzzyMatchThreshold = value as number // type is number\n+\t\t\t\t}\n+",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2126635465",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 2955,
        "pr_file": "webview-ui/src/components/settings/SettingsView.tsx",
        "discussion_id": "2126635465",
        "commented_code": "@@ -212,8 +215,25 @@ const SettingsView = forwardRef<SettingsViewRef, SettingsViewProps>(({ onDone, t\n \t\t\t\t\treturn prevState\n \t\t\t\t}\n \n+\t\t\t\tconst newState: ExtensionStateContextType = {\n+\t\t\t\t\t...prevState,\n+\t\t\t\t\tapiConfiguration: { ...prevState.apiConfiguration, [field]: value },\n+\t\t\t\t}\n+\t\t\t\t// Update the field in root state for sync\n+\t\t\t\tif (field === \"diffEnabled\") {\n+\t\t\t\t\tnewState.diffEnabled = value as boolean // type is boolean\n+\t\t\t\t} else if (field === \"diffViewAutoFocus\") {\n+\t\t\t\t\tnewState.diffViewAutoFocus = value as boolean // type is boolean\n+\t\t\t\t} else if (field === \"autoCloseRooTabs\") {\n+\t\t\t\t\tnewState.autoCloseRooTabs = value as boolean // type is boolean\n+\t\t\t\t} else if (field === \"autoCloseAllRooTabs\") {\n+\t\t\t\t\tnewState.autoCloseAllRooTabs = value as boolean // type is boolean\n+\t\t\t\t} else if (field === \"fuzzyMatchThreshold\") {\n+\t\t\t\t\tnewState.fuzzyMatchThreshold = value as number // type is number\n+\t\t\t\t}\n+",
        "comment_created_at": "2025-06-04T13:40:27+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "I'm curious about why this is needed? I think `setApiConfigurationField` should handle these state changes by itself without having to process them manually.",
        "pr_file_module": null
      },
      {
        "comment_id": "2133859886",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 2955,
        "pr_file": "webview-ui/src/components/settings/SettingsView.tsx",
        "discussion_id": "2126635465",
        "commented_code": "@@ -212,8 +215,25 @@ const SettingsView = forwardRef<SettingsViewRef, SettingsViewProps>(({ onDone, t\n \t\t\t\t\treturn prevState\n \t\t\t\t}\n \n+\t\t\t\tconst newState: ExtensionStateContextType = {\n+\t\t\t\t\t...prevState,\n+\t\t\t\t\tapiConfiguration: { ...prevState.apiConfiguration, [field]: value },\n+\t\t\t\t}\n+\t\t\t\t// Update the field in root state for sync\n+\t\t\t\tif (field === \"diffEnabled\") {\n+\t\t\t\t\tnewState.diffEnabled = value as boolean // type is boolean\n+\t\t\t\t} else if (field === \"diffViewAutoFocus\") {\n+\t\t\t\t\tnewState.diffViewAutoFocus = value as boolean // type is boolean\n+\t\t\t\t} else if (field === \"autoCloseRooTabs\") {\n+\t\t\t\t\tnewState.autoCloseRooTabs = value as boolean // type is boolean\n+\t\t\t\t} else if (field === \"autoCloseAllRooTabs\") {\n+\t\t\t\t\tnewState.autoCloseAllRooTabs = value as boolean // type is boolean\n+\t\t\t\t} else if (field === \"fuzzyMatchThreshold\") {\n+\t\t\t\t\tnewState.fuzzyMatchThreshold = value as number // type is number\n+\t\t\t\t}\n+",
        "comment_created_at": "2025-06-07T14:20:07+00:00",
        "comment_author": "felixAnhalt",
        "comment_body": "this was needed because I used the deconstructed values from `cachedState` and not the calues from `cachedState.apiConfiguration` to send via `postMessage`.\r\n\r\nI updated my approach here (and the one from `diffEnabled` as well to use `apiConfiguration` [cdab9aa](https://github.com/RooCodeInc/Roo-Code/pull/2955/commits/cdab9aa99d29a64619fb261a1dc3fe81c0bffe83).",
        "pr_file_module": null
      }
    ]
  }
]