[
  {
    "discussion_id": "2203532906",
    "pr_number": 5673,
    "pr_file": "packages/types/src/__tests__/manual-validation.test.cjs",
    "created_at": "2025-07-13T21:45:12+00:00",
    "commented_code": "+// Manual validation test for Playwright MCP template\n+// This uses basic Node.js modules to avoid dependency issues\n+\n+const fs = require('fs');\n+const path = require('path');\n+\n+// Simple test framework functions\n+function describe(name, fn) {\n+    console.log(`\n--- ${name} ---`);\n+    fn();\n+}\n+\n+function it(name, fn) {\n+    try {\n+        fn();\n+        console.log(`\u2713 ${name}`);\n+    } catch (error) {\n+        console.log(`\u2717 ${name}: ${error.message}`);\n+    }\n+}\n+\n+function expect(actual) {\n+    return {\n+        toBe: (expected) => {\n+            if (actual !== expected) {\n+                throw new Error(`Expected ${expected}, got ${actual}`);\n+            }\n+        },\n+        toContain: (expected) => {\n+            if (!actual.includes(expected)) {\n+                throw new Error(`Expected to contain ${expected}`);\n+            }\n+        },\n+        toBeDefined: () => {\n+            if (actual === undefined) {\n+                throw new Error('Expected to be defined');\n+            }\n+        },\n+        toHaveLength: (expected) => {\n+            if (actual.length !== expected) {\n+                throw new Error(`Expected length ${expected}, got ${actual.length}`);\n+            }\n+        }\n+    };\n+}\n+\n+// Validation tests\n+async function runValidation() {\n+    console.log('Running Playwright MCP Template Validation');\n+    \n+    try {\n+        // Read template file\n+        const templatePath = 'C:\\\\Users\\\\orphe\\\\Downloads\\\\playwright-mcp.yaml';",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2203532906",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5673,
        "pr_file": "packages/types/src/__tests__/manual-validation.test.cjs",
        "discussion_id": "2203532906",
        "commented_code": "@@ -0,0 +1,175 @@\n+// Manual validation test for Playwright MCP template\n+// This uses basic Node.js modules to avoid dependency issues\n+\n+const fs = require('fs');\n+const path = require('path');\n+\n+// Simple test framework functions\n+function describe(name, fn) {\n+    console.log(`\\n--- ${name} ---`);\n+    fn();\n+}\n+\n+function it(name, fn) {\n+    try {\n+        fn();\n+        console.log(`\u2713 ${name}`);\n+    } catch (error) {\n+        console.log(`\u2717 ${name}: ${error.message}`);\n+    }\n+}\n+\n+function expect(actual) {\n+    return {\n+        toBe: (expected) => {\n+            if (actual !== expected) {\n+                throw new Error(`Expected ${expected}, got ${actual}`);\n+            }\n+        },\n+        toContain: (expected) => {\n+            if (!actual.includes(expected)) {\n+                throw new Error(`Expected to contain ${expected}`);\n+            }\n+        },\n+        toBeDefined: () => {\n+            if (actual === undefined) {\n+                throw new Error('Expected to be defined');\n+            }\n+        },\n+        toHaveLength: (expected) => {\n+            if (actual.length !== expected) {\n+                throw new Error(`Expected length ${expected}, got ${actual.length}`);\n+            }\n+        }\n+    };\n+}\n+\n+// Validation tests\n+async function runValidation() {\n+    console.log('Running Playwright MCP Template Validation');\n+    \n+    try {\n+        // Read template file\n+        const templatePath = 'C:\\\\Users\\\\orphe\\\\Downloads\\\\playwright-mcp.yaml';",
        "comment_created_at": "2025-07-13T21:45:12+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The template file path is hardcoded as an absolute path ('C:\\Users\\orphe\\Downloads\\playwright-mcp.yaml'). Consider using a relative path or a configuration variable to enhance portability.\n```suggestion\n        const templatePath = path.join(__dirname, 'playwright-mcp.yaml');\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2193635727",
    "pr_number": 5487,
    "pr_file": ".roomodes",
    "created_at": "2025-07-08T23:48:45+00:00",
    "commented_code": "- edit\n       - command\n       - mcp\n-  - slug: issue-fixer-orchestrator\n-    name: \ud83d\udd27 Issue Fixer Orchestrator\n-    roleDefinition: |-\n-      You are an orchestrator for fixing GitHub issues. Your primary role is to coordinate a series of specialized subtasks to resolve an issue from start to finish.\n-      **Your Orchestration Responsibilities:** - Delegate analysis, implementation, and testing to specialized subtasks using the `new_task` tool. - Manage the workflow and pass context between steps using temporary files. - Present plans, results, and pull requests to the user for approval at key milestones.\n-      **Your Core Expertise Includes:** - Analyzing GitHub issues to understand requirements and acceptance criteria. - Exploring codebases to identify all affected files and dependencies. - Guiding the implementation of high-quality fixes and features. - Ensuring comprehensive test coverage. - Overseeing the creation of well-documented pull requests. - Using the GitHub CLI (gh) for all final GitHub operations like creating a pull request.\n-    whenToUse: Use this mode to orchestrate the process of fixing a GitHub issue. Provide a GitHub issue URL, and this mode will coordinate a series of subtasks to analyze the issue, explore the code, create a plan, implement the solution, and prepare a pull request.\n-    groups:\n-      - read\n-      - edit\n-      - command\n-    source: project\n   - slug: pr-fixer-orchestrator\n     name: \ud83d\udee0\ufe0f PR Fixer Orchestrator\n     roleDefinition: |-\n       You are an orchestrator for fixing pull requests. Your primary role is to coordinate a series of specialized subtasks to resolve PR issues from start to finish, whether or not the PR has existing context from issue fixing.\n       **Your Orchestration Responsibilities:**  - Delegate analysis, implementation, testing, and review to specialized subtasks using the `new_task` tool.  - Manage the workflow and pass context between steps using temporary files.  - Present findings, plans, and results to the user for approval at key milestones.  - Ensure the PR branch is properly synced with main and ready for merge.\n       **Your Core Expertise Includes:**  - Analyzing PR feedback, failing tests, and merge conflicts.  - Understanding the underlying issue or feature being implemented. - Exploring codebases to identify all affected files and dependencies. - Understanding CI/CD pipeline failures and test results.  - Coordinating code fixes based on review comments.  - Managing git operations including rebases and conflict resolution.  - Ensuring proper testing and validation of changes.  - Overseeing PR review before final submission.  - Using GitHub CLI (gh) for all GitHub operations.\n     whenToUse: Use this mode to orchestrate the process of fixing a pull request. Provide a GitHub PR URL or number, and this mode will coordinate a series of subtasks to analyze the PR issues, understand the underlying requirements, implement fixes, resolve conflicts, test changes, and ensure the PR is ready for merge. This mode works independently and does not require any pre-existing context files.\n-    groups:\n-      - read\n-      - edit\n-      - command\n+    groups: []",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2193635727",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5487,
        "pr_file": ".roomodes",
        "discussion_id": "2193635727",
        "commented_code": "@@ -184,27 +184,21 @@ customModes:\n       - edit\n       - command\n       - mcp\n-  - slug: issue-fixer-orchestrator\n-    name: \ud83d\udd27 Issue Fixer Orchestrator\n-    roleDefinition: |-\n-      You are an orchestrator for fixing GitHub issues. Your primary role is to coordinate a series of specialized subtasks to resolve an issue from start to finish.\n-      **Your Orchestration Responsibilities:** - Delegate analysis, implementation, and testing to specialized subtasks using the `new_task` tool. - Manage the workflow and pass context between steps using temporary files. - Present plans, results, and pull requests to the user for approval at key milestones.\n-      **Your Core Expertise Includes:** - Analyzing GitHub issues to understand requirements and acceptance criteria. - Exploring codebases to identify all affected files and dependencies. - Guiding the implementation of high-quality fixes and features. - Ensuring comprehensive test coverage. - Overseeing the creation of well-documented pull requests. - Using the GitHub CLI (gh) for all final GitHub operations like creating a pull request.\n-    whenToUse: Use this mode to orchestrate the process of fixing a GitHub issue. Provide a GitHub issue URL, and this mode will coordinate a series of subtasks to analyze the issue, explore the code, create a plan, implement the solution, and prepare a pull request.\n-    groups:\n-      - read\n-      - edit\n-      - command\n-    source: project\n   - slug: pr-fixer-orchestrator\n     name: \ud83d\udee0\ufe0f PR Fixer Orchestrator\n     roleDefinition: |-\n       You are an orchestrator for fixing pull requests. Your primary role is to coordinate a series of specialized subtasks to resolve PR issues from start to finish, whether or not the PR has existing context from issue fixing.\n       **Your Orchestration Responsibilities:**  - Delegate analysis, implementation, testing, and review to specialized subtasks using the `new_task` tool.  - Manage the workflow and pass context between steps using temporary files.  - Present findings, plans, and results to the user for approval at key milestones.  - Ensure the PR branch is properly synced with main and ready for merge.\n       **Your Core Expertise Includes:**  - Analyzing PR feedback, failing tests, and merge conflicts.  - Understanding the underlying issue or feature being implemented. - Exploring codebases to identify all affected files and dependencies. - Understanding CI/CD pipeline failures and test results.  - Coordinating code fixes based on review comments.  - Managing git operations including rebases and conflict resolution.  - Ensuring proper testing and validation of changes.  - Overseeing PR review before final submission.  - Using GitHub CLI (gh) for all GitHub operations.\n     whenToUse: Use this mode to orchestrate the process of fixing a pull request. Provide a GitHub PR URL or number, and this mode will coordinate a series of subtasks to analyze the PR issues, understand the underlying requirements, implement fixes, resolve conflicts, test changes, and ensure the PR is ready for merge. This mode works independently and does not require any pre-existing context files.\n-    groups:\n-      - read\n-      - edit\n-      - command\n+    groups: []",
        "comment_created_at": "2025-07-08T23:48:45+00:00",
        "comment_author": "Copilot",
        "comment_body": "The roleDefinition references the `new_task` tool, but this mode\u2019s groups are empty (`groups: []`), which prevents tool access. Consider restoring the required group permissions or updating the description to remove references to `new_task`.\n```suggestion\n    groups:\n      - read\n      - edit\n      - command\n      - mcp\n      - new_task\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2193635734",
    "pr_number": 5487,
    "pr_file": ".roomodes",
    "created_at": "2025-07-08T23:48:45+00:00",
    "commented_code": "- edit\n       - command\n       - mcp\n-  - slug: issue-fixer-orchestrator\n-    name: \ud83d\udd27 Issue Fixer Orchestrator\n-    roleDefinition: |-\n-      You are an orchestrator for fixing GitHub issues. Your primary role is to coordinate a series of specialized subtasks to resolve an issue from start to finish.\n-      **Your Orchestration Responsibilities:** - Delegate analysis, implementation, and testing to specialized subtasks using the `new_task` tool. - Manage the workflow and pass context between steps using temporary files. - Present plans, results, and pull requests to the user for approval at key milestones.\n-      **Your Core Expertise Includes:** - Analyzing GitHub issues to understand requirements and acceptance criteria. - Exploring codebases to identify all affected files and dependencies. - Guiding the implementation of high-quality fixes and features. - Ensuring comprehensive test coverage. - Overseeing the creation of well-documented pull requests. - Using the GitHub CLI (gh) for all final GitHub operations like creating a pull request.\n-    whenToUse: Use this mode to orchestrate the process of fixing a GitHub issue. Provide a GitHub issue URL, and this mode will coordinate a series of subtasks to analyze the issue, explore the code, create a plan, implement the solution, and prepare a pull request.\n-    groups:\n-      - read\n-      - edit\n-      - command\n-    source: project\n   - slug: pr-fixer-orchestrator\n     name: \ud83d\udee0\ufe0f PR Fixer Orchestrator\n     roleDefinition: |-\n       You are an orchestrator for fixing pull requests. Your primary role is to coordinate a series of specialized subtasks to resolve PR issues from start to finish, whether or not the PR has existing context from issue fixing.\n       **Your Orchestration Responsibilities:**  - Delegate analysis, implementation, testing, and review to specialized subtasks using the `new_task` tool.  - Manage the workflow and pass context between steps using temporary files.  - Present findings, plans, and results to the user for approval at key milestones.  - Ensure the PR branch is properly synced with main and ready for merge.\n       **Your Core Expertise Includes:**  - Analyzing PR feedback, failing tests, and merge conflicts.  - Understanding the underlying issue or feature being implemented. - Exploring codebases to identify all affected files and dependencies. - Understanding CI/CD pipeline failures and test results.  - Coordinating code fixes based on review comments.  - Managing git operations including rebases and conflict resolution.  - Ensuring proper testing and validation of changes.  - Overseeing PR review before final submission.  - Using GitHub CLI (gh) for all GitHub operations.\n     whenToUse: Use this mode to orchestrate the process of fixing a pull request. Provide a GitHub PR URL or number, and this mode will coordinate a series of subtasks to analyze the PR issues, understand the underlying requirements, implement fixes, resolve conflicts, test changes, and ensure the PR is ready for merge. This mode works independently and does not require any pre-existing context files.\n-    groups:\n-      - read\n-      - edit\n-      - command\n+    groups: []\n+    source: project\n+  - slug: issue-fixer-orchestrator\n+    name: \ud83d\udd27 Issue Fixer Orchestrator\n+    roleDefinition: |-\n+      You are an orchestrator for fixing GitHub issues. Your primary role is to coordinate a series of specialized subtasks to resolve an issue from start to finish.\n+      **Your Orchestration Responsibilities:** - Delegate analysis, implementation, and testing to specialized subtasks using the `new_task` tool. - Manage the workflow and pass context between steps using temporary files. - Present plans, results, and pull requests to the user for approval at key milestones.\n+      **Your Core Expertise Includes:** - Analyzing GitHub issues to understand requirements and acceptance criteria. - Exploring codebases to identify all affected files and dependencies. - Guiding the implementation of high-quality fixes and features. - Ensuring comprehensive test coverage. - Overseeing the creation of well-documented pull requests. - Using the GitHub CLI (gh) for all final GitHub operations like creating a pull request.\n+    whenToUse: Use this mode to orchestrate the process of fixing a GitHub issue. Provide a GitHub issue URL, and this mode will coordinate a series of subtasks to analyze the issue, explore the code, create a plan, implement the solution, and prepare a pull request.\n+    groups: []",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2193635734",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5487,
        "pr_file": ".roomodes",
        "discussion_id": "2193635734",
        "commented_code": "@@ -184,27 +184,21 @@ customModes:\n       - edit\n       - command\n       - mcp\n-  - slug: issue-fixer-orchestrator\n-    name: \ud83d\udd27 Issue Fixer Orchestrator\n-    roleDefinition: |-\n-      You are an orchestrator for fixing GitHub issues. Your primary role is to coordinate a series of specialized subtasks to resolve an issue from start to finish.\n-      **Your Orchestration Responsibilities:** - Delegate analysis, implementation, and testing to specialized subtasks using the `new_task` tool. - Manage the workflow and pass context between steps using temporary files. - Present plans, results, and pull requests to the user for approval at key milestones.\n-      **Your Core Expertise Includes:** - Analyzing GitHub issues to understand requirements and acceptance criteria. - Exploring codebases to identify all affected files and dependencies. - Guiding the implementation of high-quality fixes and features. - Ensuring comprehensive test coverage. - Overseeing the creation of well-documented pull requests. - Using the GitHub CLI (gh) for all final GitHub operations like creating a pull request.\n-    whenToUse: Use this mode to orchestrate the process of fixing a GitHub issue. Provide a GitHub issue URL, and this mode will coordinate a series of subtasks to analyze the issue, explore the code, create a plan, implement the solution, and prepare a pull request.\n-    groups:\n-      - read\n-      - edit\n-      - command\n-    source: project\n   - slug: pr-fixer-orchestrator\n     name: \ud83d\udee0\ufe0f PR Fixer Orchestrator\n     roleDefinition: |-\n       You are an orchestrator for fixing pull requests. Your primary role is to coordinate a series of specialized subtasks to resolve PR issues from start to finish, whether or not the PR has existing context from issue fixing.\n       **Your Orchestration Responsibilities:**  - Delegate analysis, implementation, testing, and review to specialized subtasks using the `new_task` tool.  - Manage the workflow and pass context between steps using temporary files.  - Present findings, plans, and results to the user for approval at key milestones.  - Ensure the PR branch is properly synced with main and ready for merge.\n       **Your Core Expertise Includes:**  - Analyzing PR feedback, failing tests, and merge conflicts.  - Understanding the underlying issue or feature being implemented. - Exploring codebases to identify all affected files and dependencies. - Understanding CI/CD pipeline failures and test results.  - Coordinating code fixes based on review comments.  - Managing git operations including rebases and conflict resolution.  - Ensuring proper testing and validation of changes.  - Overseeing PR review before final submission.  - Using GitHub CLI (gh) for all GitHub operations.\n     whenToUse: Use this mode to orchestrate the process of fixing a pull request. Provide a GitHub PR URL or number, and this mode will coordinate a series of subtasks to analyze the PR issues, understand the underlying requirements, implement fixes, resolve conflicts, test changes, and ensure the PR is ready for merge. This mode works independently and does not require any pre-existing context files.\n-    groups:\n-      - read\n-      - edit\n-      - command\n+    groups: []\n+    source: project\n+  - slug: issue-fixer-orchestrator\n+    name: \ud83d\udd27 Issue Fixer Orchestrator\n+    roleDefinition: |-\n+      You are an orchestrator for fixing GitHub issues. Your primary role is to coordinate a series of specialized subtasks to resolve an issue from start to finish.\n+      **Your Orchestration Responsibilities:** - Delegate analysis, implementation, and testing to specialized subtasks using the `new_task` tool. - Manage the workflow and pass context between steps using temporary files. - Present plans, results, and pull requests to the user for approval at key milestones.\n+      **Your Core Expertise Includes:** - Analyzing GitHub issues to understand requirements and acceptance criteria. - Exploring codebases to identify all affected files and dependencies. - Guiding the implementation of high-quality fixes and features. - Ensuring comprehensive test coverage. - Overseeing the creation of well-documented pull requests. - Using the GitHub CLI (gh) for all final GitHub operations like creating a pull request.\n+    whenToUse: Use this mode to orchestrate the process of fixing a GitHub issue. Provide a GitHub issue URL, and this mode will coordinate a series of subtasks to analyze the issue, explore the code, create a plan, implement the solution, and prepare a pull request.\n+    groups: []",
        "comment_created_at": "2025-07-08T23:48:45+00:00",
        "comment_author": "Copilot",
        "comment_body": "The roleDefinition still instructs use of the `new_task` tool, but with `groups: []` this mode cannot access any tools. Update the description or adjust `groups` to align the behavior.\n```suggestion\n    groups:\n      - read\n      - command\n      - mcp\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2193268271",
    "pr_number": 5474,
    "pr_file": ".gitattributes",
    "created_at": "2025-07-08T19:13:27+00:00",
    "commented_code": "demo.gif filter=lfs diff=lfs merge=lfs -text\n assets/docs/demo.gif filter=lfs diff=lfs merge=lfs -text\n src/assets/docs/demo.gif filter=lfs diff=lfs merge=lfs -text\n+\n+# Test snapshot files - mark as linguist-generated to exclude from GitHub language statistics\n+**/__snapshots__/** linguist-generated=true\n+**/snapshots/** linguist-generated=true\n+**/.snapshots/** linguist-generated=true\n+**/_snapshots/** linguist-generated=true\n+*.snap linguist-generated=true\n+*.snapshot linguist-generated=true",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2193268271",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5474,
        "pr_file": ".gitattributes",
        "discussion_id": "2193268271",
        "commented_code": "@@ -1,3 +1,11 @@\n demo.gif filter=lfs diff=lfs merge=lfs -text\n assets/docs/demo.gif filter=lfs diff=lfs merge=lfs -text\n src/assets/docs/demo.gif filter=lfs diff=lfs merge=lfs -text\n+\n+# Test snapshot files - mark as linguist-generated to exclude from GitHub language statistics\n+**/__snapshots__/** linguist-generated=true\n+**/snapshots/** linguist-generated=true\n+**/.snapshots/** linguist-generated=true\n+**/_snapshots/** linguist-generated=true\n+*.snap linguist-generated=true\n+*.snapshot linguist-generated=true",
        "comment_created_at": "2025-07-08T19:13:27+00:00",
        "comment_author": "mrubens",
        "comment_body": "```suggestion\r\n*.snap linguist-generated=true\r\n```",
        "pr_file_module": null
      }
    ]
  }
]