[
  {
    "discussion_id": "2219548929",
    "pr_number": 5185,
    "pr_file": "src/core/tools/useMcpToolTool.ts",
    "created_at": "2025-07-21T15:27:32+00:00",
    "commented_code": "})\n }\n \n-function processToolContent(toolResult: any): string {\n+/**\n+ * Calculate the approximate size of a base64 encoded image in MB\n+ */\n+function calculateImageSizeMB(base64Data: string): number {\n+\t// Base64 encoding increases size by ~33%, so actual bytes = base64Length * 0.75\n+\tconst sizeInBytes = base64Data.length * 0.75\n+\treturn sizeInBytes / (1024 * 1024) // Convert to MB\n+}\n+\n+async function processToolContent(toolResult: any, cline: Task): Promise<{ text: string; images: string[] }> {\n \tif (!toolResult?.content || toolResult.content.length === 0) {\n-\t\treturn \"\"\n+\t\treturn { text: \"\", images: [] }\n \t}\n \n-\treturn toolResult.content\n-\t\t.map((item: any) => {\n-\t\t\tif (item.type === \"text\") {\n-\t\t\t\treturn item.text\n+\tconst textParts: string[] = []\n+\tconst images: string[] = []\n+\n+\t// Get MCP settings from the extension's global state\n+\tconst state = await cline.providerRef.deref()?.getState()\n+\tconst maxImagesPerResponse = state?.mcpMaxImagesPerResponse ?? 20",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2219548929",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5185,
        "pr_file": "src/core/tools/useMcpToolTool.ts",
        "discussion_id": "2219548929",
        "commented_code": "@@ -89,24 +91,87 @@ async function sendExecutionStatus(cline: Task, status: McpExecutionStatus): Pro\n \t})\n }\n \n-function processToolContent(toolResult: any): string {\n+/**\n+ * Calculate the approximate size of a base64 encoded image in MB\n+ */\n+function calculateImageSizeMB(base64Data: string): number {\n+\t// Base64 encoding increases size by ~33%, so actual bytes = base64Length * 0.75\n+\tconst sizeInBytes = base64Data.length * 0.75\n+\treturn sizeInBytes / (1024 * 1024) // Convert to MB\n+}\n+\n+async function processToolContent(toolResult: any, cline: Task): Promise<{ text: string; images: string[] }> {\n \tif (!toolResult?.content || toolResult.content.length === 0) {\n-\t\treturn \"\"\n+\t\treturn { text: \"\", images: [] }\n \t}\n \n-\treturn toolResult.content\n-\t\t.map((item: any) => {\n-\t\t\tif (item.type === \"text\") {\n-\t\t\t\treturn item.text\n+\tconst textParts: string[] = []\n+\tconst images: string[] = []\n+\n+\t// Get MCP settings from the extension's global state\n+\tconst state = await cline.providerRef.deref()?.getState()\n+\tconst maxImagesPerResponse = state?.mcpMaxImagesPerResponse ?? 20",
        "comment_created_at": "2025-07-21T15:27:32+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "The current implementation uses the settings values without validating whether they're within reasonable bounds. For example, if someone manually edits their settings file and sets a negative number or an extremely large value, it could lead to unexpected behavior.\n\nIt might be worth adding validation like this:\n\n```ts\nconst maxImagesPerResponse = Math.max(1, Math.min(100, state?.mcpMaxImagesPerResponse ?? 20));\nconst maxImageSizeMB = Math.max(0.1, Math.min(50, state?.mcpMaxImageSizeMB ?? 10));\n````\n\nThis helps keep the values within safe operational limits, even in cases where the settings file is corrupted or manually modified.\n\n",
        "pr_file_module": null
      }
    ]
  }
]