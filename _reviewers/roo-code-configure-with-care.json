[
  {
    "discussion_id": "2219548929",
    "pr_number": 5185,
    "pr_file": "src/core/tools/useMcpToolTool.ts",
    "created_at": "2025-07-21T15:27:32+00:00",
    "commented_code": "})\n }\n \n-function processToolContent(toolResult: any): string {\n+/**\n+ * Calculate the approximate size of a base64 encoded image in MB\n+ */\n+function calculateImageSizeMB(base64Data: string): number {\n+\t// Base64 encoding increases size by ~33%, so actual bytes = base64Length * 0.75\n+\tconst sizeInBytes = base64Data.length * 0.75\n+\treturn sizeInBytes / (1024 * 1024) // Convert to MB\n+}\n+\n+async function processToolContent(toolResult: any, cline: Task): Promise<{ text: string; images: string[] }> {\n \tif (!toolResult?.content || toolResult.content.length === 0) {\n-\t\treturn \"\"\n+\t\treturn { text: \"\", images: [] }\n \t}\n \n-\treturn toolResult.content\n-\t\t.map((item: any) => {\n-\t\t\tif (item.type === \"text\") {\n-\t\t\t\treturn item.text\n+\tconst textParts: string[] = []\n+\tconst images: string[] = []\n+\n+\t// Get MCP settings from the extension's global state\n+\tconst state = await cline.providerRef.deref()?.getState()\n+\tconst maxImagesPerResponse = state?.mcpMaxImagesPerResponse ?? 20",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2219548929",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5185,
        "pr_file": "src/core/tools/useMcpToolTool.ts",
        "discussion_id": "2219548929",
        "commented_code": "@@ -89,24 +91,87 @@ async function sendExecutionStatus(cline: Task, status: McpExecutionStatus): Pro\n \t})\n }\n \n-function processToolContent(toolResult: any): string {\n+/**\n+ * Calculate the approximate size of a base64 encoded image in MB\n+ */\n+function calculateImageSizeMB(base64Data: string): number {\n+\t// Base64 encoding increases size by ~33%, so actual bytes = base64Length * 0.75\n+\tconst sizeInBytes = base64Data.length * 0.75\n+\treturn sizeInBytes / (1024 * 1024) // Convert to MB\n+}\n+\n+async function processToolContent(toolResult: any, cline: Task): Promise<{ text: string; images: string[] }> {\n \tif (!toolResult?.content || toolResult.content.length === 0) {\n-\t\treturn \"\"\n+\t\treturn { text: \"\", images: [] }\n \t}\n \n-\treturn toolResult.content\n-\t\t.map((item: any) => {\n-\t\t\tif (item.type === \"text\") {\n-\t\t\t\treturn item.text\n+\tconst textParts: string[] = []\n+\tconst images: string[] = []\n+\n+\t// Get MCP settings from the extension's global state\n+\tconst state = await cline.providerRef.deref()?.getState()\n+\tconst maxImagesPerResponse = state?.mcpMaxImagesPerResponse ?? 20",
        "comment_created_at": "2025-07-21T15:27:32+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "The current implementation uses the settings values without validating whether they're within reasonable bounds. For example, if someone manually edits their settings file and sets a negative number or an extremely large value, it could lead to unexpected behavior.\n\nIt might be worth adding validation like this:\n\n```ts\nconst maxImagesPerResponse = Math.max(1, Math.min(100, state?.mcpMaxImagesPerResponse ?? 20));\nconst maxImageSizeMB = Math.max(0.1, Math.min(50, state?.mcpMaxImageSizeMB ?? 10));\n````\n\nThis helps keep the values within safe operational limits, even in cases where the settings file is corrupted or manually modified.\n\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2213920974",
    "pr_number": 5825,
    "pr_file": "src/extension/api.ts",
    "created_at": "2025-07-17T17:34:49+00:00",
    "commented_code": ".getConfiguration(Package.name)\n \t\t\t\t\t.update(\"allowedCommands\", configuration.allowedCommands, vscode.ConfigurationTarget.Global)\n \t\t\t}\n+\n+\t\t\tif (configuration.deniedCommands) {\n+\t\t\t\tawait vscode.workspace\n+\t\t\t\t\t.getConfiguration(Package.name)\n+\t\t\t\t\t.update(\"deniedCommands\", configuration.deniedCommands, vscode.ConfigurationTarget.Global)\n+\t\t\t}\n+\n+\t\t\tif (configuration.commandExecutionTimeout) {",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2213920974",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5825,
        "pr_file": "src/extension/api.ts",
        "discussion_id": "2213920974",
        "commented_code": "@@ -125,6 +125,22 @@ export class API extends EventEmitter<RooCodeEvents> implements RooCodeAPI {\n \t\t\t\t\t.getConfiguration(Package.name)\n \t\t\t\t\t.update(\"allowedCommands\", configuration.allowedCommands, vscode.ConfigurationTarget.Global)\n \t\t\t}\n+\n+\t\t\tif (configuration.deniedCommands) {\n+\t\t\t\tawait vscode.workspace\n+\t\t\t\t\t.getConfiguration(Package.name)\n+\t\t\t\t\t.update(\"deniedCommands\", configuration.deniedCommands, vscode.ConfigurationTarget.Global)\n+\t\t\t}\n+\n+\t\t\tif (configuration.commandExecutionTimeout) {",
        "comment_created_at": "2025-07-17T17:34:49+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Using 'if (configuration.commandExecutionTimeout)' may skip valid zero values. Consider checking for '!== undefined' to ensure 0 is handled if intended.\n```suggestion\n\t\t\tif (configuration.commandExecutionTimeout !== undefined) {\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2205269737",
    "pr_number": 5617,
    "pr_file": "src/core/webview/ClineProvider.ts",
    "created_at": "2025-07-14T15:53:23+00:00",
    "commented_code": "codebaseIndexEmbedderProvider: codebaseIndexConfig?.codebaseIndexEmbedderProvider ?? \"openai\",\n \t\t\t\tcodebaseIndexEmbedderBaseUrl: codebaseIndexConfig?.codebaseIndexEmbedderBaseUrl ?? \"\",\n \t\t\t\tcodebaseIndexEmbedderModelId: codebaseIndexConfig?.codebaseIndexEmbedderModelId ?? \"\",\n+\t\t\t\tcodebaseIndexEmbedderModelDimension: codebaseIndexConfig?.codebaseIndexEmbedderModelDimension,",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2205269737",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5617,
        "pr_file": "src/core/webview/ClineProvider.ts",
        "discussion_id": "2205269737",
        "commented_code": "@@ -1542,6 +1542,10 @@ export class ClineProvider\n \t\t\t\tcodebaseIndexEmbedderProvider: codebaseIndexConfig?.codebaseIndexEmbedderProvider ?? \"openai\",\n \t\t\t\tcodebaseIndexEmbedderBaseUrl: codebaseIndexConfig?.codebaseIndexEmbedderBaseUrl ?? \"\",\n \t\t\t\tcodebaseIndexEmbedderModelId: codebaseIndexConfig?.codebaseIndexEmbedderModelId ?? \"\",\n+\t\t\t\tcodebaseIndexEmbedderModelDimension: codebaseIndexConfig?.codebaseIndexEmbedderModelDimension,",
        "comment_created_at": "2025-07-14T15:53:23+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "New configuration fields (codebaseIndexEmbedderModelDimension, codebaseIndexOpenAiCompatibleBaseUrl, codebaseIndexSearchMaxResults, codebaseIndexSearchMinScore) are added without fallback defaults. Consider validating the types (e.g. ensuring model dimension is numeric) or providing a default value if none is specified, to prevent downstream issues.\n```suggestion\n\t\t\t\tcodebaseIndexEmbedderModelDimension: codebaseIndexConfig?.codebaseIndexEmbedderModelDimension ?? 1536,\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2202043865",
    "pr_number": 5610,
    "pr_file": "src/integrations/claude-code/run.ts",
    "created_at": "2025-07-11T23:11:00+00:00",
    "commented_code": "stderr: \"pipe\",\n \t\tenv: {\n \t\t\t...process.env,\n-\t\t\t// The default is 32000. However, I've gotten larger responses, so we increase it unless the user specified it.\n-\t\t\tCLAUDE_CODE_MAX_OUTPUT_TOKENS: process.env.CLAUDE_CODE_MAX_OUTPUT_TOKENS || \"64000\",\n+\t\t\t// Use the configured value, or the environment variable, or default to 8192\n+\t\t\tCLAUDE_CODE_MAX_OUTPUT_TOKENS:\n+\t\t\t\tmaxOutputTokens?.toString() || process.env.CLAUDE_CODE_MAX_OUTPUT_TOKENS || \"8192\",",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2202043865",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5610,
        "pr_file": "src/integrations/claude-code/run.ts",
        "discussion_id": "2202043865",
        "commented_code": "@@ -134,8 +142,9 @@ function runProcess({ systemPrompt, messages, path, modelId }: ClaudeCodeOptions\n \t\tstderr: \"pipe\",\n \t\tenv: {\n \t\t\t...process.env,\n-\t\t\t// The default is 32000. However, I've gotten larger responses, so we increase it unless the user specified it.\n-\t\t\tCLAUDE_CODE_MAX_OUTPUT_TOKENS: process.env.CLAUDE_CODE_MAX_OUTPUT_TOKENS || \"64000\",\n+\t\t\t// Use the configured value, or the environment variable, or default to 8192\n+\t\t\tCLAUDE_CODE_MAX_OUTPUT_TOKENS:\n+\t\t\t\tmaxOutputTokens?.toString() || process.env.CLAUDE_CODE_MAX_OUTPUT_TOKENS || \"8192\",",
        "comment_created_at": "2025-07-11T23:11:00+00:00",
        "comment_author": "Copilot",
        "comment_body": "The hardcoded default of \"8192\" here conflicts with the 8000 default used elsewhere (UI slider and core logic). Consider centralizing the default in a shared constant so all parts use the same value.\n```suggestion\n\t\t\t// Use the configured value, or the environment variable, or default to the shared constant\n\t\t\tCLAUDE_CODE_MAX_OUTPUT_TOKENS:\n\t\t\t\tmaxOutputTokens?.toString() || process.env.CLAUDE_CODE_MAX_OUTPUT_TOKENS || DEFAULT_MAX_OUTPUT_TOKENS,\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2202043870",
    "pr_number": 5610,
    "pr_file": "src/shared/api.ts",
    "created_at": "2025-07-11T23:11:01+00:00",
    "commented_code": "model: ModelInfo\n \tsettings?: ProviderSettings\n }): number | undefined => {\n+\t// Check for Claude Code specific max output tokens setting\n+\tif (settings?.apiProvider === \"claude-code\") {\n+\t\t// Return the configured value or default to 8000\n+\t\treturn settings.claudeCodeMaxOutputTokens || 8000",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2202043870",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5610,
        "pr_file": "src/shared/api.ts",
        "discussion_id": "2202043870",
        "commented_code": "@@ -58,6 +58,12 @@ export const getModelMaxOutputTokens = ({\n \tmodel: ModelInfo\n \tsettings?: ProviderSettings\n }): number | undefined => {\n+\t// Check for Claude Code specific max output tokens setting\n+\tif (settings?.apiProvider === \"claude-code\") {\n+\t\t// Return the configured value or default to 8000\n+\t\treturn settings.claudeCodeMaxOutputTokens || 8000",
        "comment_created_at": "2025-07-11T23:11:01+00:00",
        "comment_author": "Copilot",
        "comment_body": "The literal `8000` appears here and in other modules; extract it into a shared constant to avoid drift when updating defaults.\n```suggestion\n\t\t// Return the configured value or default to DEFAULT_CLAUDE_CODE_MAX_OUTPUT_TOKENS\n\t\treturn settings.claudeCodeMaxOutputTokens || DEFAULT_CLAUDE_CODE_MAX_OUTPUT_TOKENS\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2202043874",
    "pr_number": 5610,
    "pr_file": "src/api/providers/claude-code.ts",
    "created_at": "2025-07-11T23:11:01+00:00",
    "commented_code": "const modelId = this.options.apiModelId\n \t\tif (modelId && modelId in claudeCodeModels) {\n \t\t\tconst id = modelId as ClaudeCodeModelId\n-\t\t\treturn { id, info: claudeCodeModels[id] }\n+\t\t\tconst modelInfo: ModelInfo = { ...claudeCodeModels[id] }\n+\n+\t\t\t// Override maxTokens with the configured value if provided\n+\t\t\tif (this.options.claudeCodeMaxOutputTokens) {",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2202043874",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5610,
        "pr_file": "src/api/providers/claude-code.ts",
        "discussion_id": "2202043874",
        "commented_code": "@@ -129,12 +130,26 @@ export class ClaudeCodeHandler extends BaseProvider implements ApiHandler {\n \t\tconst modelId = this.options.apiModelId\n \t\tif (modelId && modelId in claudeCodeModels) {\n \t\t\tconst id = modelId as ClaudeCodeModelId\n-\t\t\treturn { id, info: claudeCodeModels[id] }\n+\t\t\tconst modelInfo: ModelInfo = { ...claudeCodeModels[id] }\n+\n+\t\t\t// Override maxTokens with the configured value if provided\n+\t\t\tif (this.options.claudeCodeMaxOutputTokens) {",
        "comment_created_at": "2025-07-11T23:11:01+00:00",
        "comment_author": "Copilot",
        "comment_body": "Using a truthy check means a value of `0` won\u2019t override the default. It\u2019s safer to explicitly check for `undefined` to ensure all provided values are applied.\n```suggestion\n\t\t\tif (this.options.claudeCodeMaxOutputTokens !== undefined) {\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2191104123",
    "pr_number": 5459,
    "pr_file": "src/services/code-index/config-manager.ts",
    "created_at": "2025-07-07T22:29:30+00:00",
    "commented_code": "this.qdrantApiKey = qdrantApiKey ?? \"\"\n \t\tthis.searchMinScore = codebaseIndexSearchMinScore\n \t\tthis.searchMaxResults = codebaseIndexSearchMaxResults\n+\t\tthis.modelDimension = codebaseIndexConfig.codebaseIndexEmbedderModelDimension as number | undefined",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2191104123",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5459,
        "pr_file": "src/services/code-index/config-manager.ts",
        "discussion_id": "2191104123",
        "commented_code": "@@ -76,6 +74,7 @@ export class CodeIndexConfigManager {\n \t\tthis.qdrantApiKey = qdrantApiKey ?? \"\"\n \t\tthis.searchMinScore = codebaseIndexSearchMinScore\n \t\tthis.searchMaxResults = codebaseIndexSearchMaxResults\n+\t\tthis.modelDimension = codebaseIndexConfig.codebaseIndexEmbedderModelDimension as number | undefined",
        "comment_created_at": "2025-07-07T22:29:30+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Consider adding validation (or parsing) for codebaseIndexEmbedderModelDimension to ensure it\u2019s a valid number before assignment. This avoids propagating legacy non\u2010numeric values.\n```suggestion\n\t\tthis.modelDimension = typeof codebaseIndexConfig.codebaseIndexEmbedderModelDimension === 'number' && !isNaN(codebaseIndexConfig.codebaseIndexEmbedderModelDimension) ? codebaseIndexConfig.codebaseIndexEmbedderModelDimension : undefined\n```\n",
        "pr_file_module": null
      }
    ]
  }
]