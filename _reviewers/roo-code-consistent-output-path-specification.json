[
  {
    "discussion_id": "2214004435",
    "pr_number": 5832,
    "pr_file": ".roo/rules-pr-reviewer/4_github_operations.xml",
    "created_at": "2025-07-17T18:21:48+00:00",
    "commented_code": "<github_operations>\n   <overview>\n-    Guidelines for handling GitHub operations with fallback strategies\n-    when MCP tools are unavailable or failing.\n+    Guidelines for handling GitHub operations using the GitHub CLI (gh).\n+    This mode exclusively uses command-line operations for all GitHub interactions.\n   </overview>\n \n-  <mcp_vs_cli>\n-    <principle>\n-      Always try MCP tools first, fall back to GitHub CLI if they fail\n-    </principle>\n-    <benefits_of_mcp>\n-      - Structured data responses\n-      - Better error handling\n-      - Integrated with the system\n-    </benefits_of_mcp>\n-    <benefits_of_cli>\n-      - More reliable when MCP is down\n-      - Direct GitHub API access\n-      - Can handle complex queries\n-    </benefits_of_cli>\n-  </mcp_vs_cli>\n+  <prerequisites>\n+    <requirement name=\"github_cli\">\n+      <description>GitHub CLI must be installed and authenticated</description>\n+      <check_command>gh auth status</check_command>\n+      <install_url>https://cli.github.com/</install_url>\n+    </requirement>\n+    <requirement name=\"authentication\">\n+      <description>User must be authenticated with appropriate permissions</description>\n+      <setup_command>gh auth login</setup_command>\n+    </requirement>\n+  </prerequisites>\n \n   <operation_patterns>\n     <operation name=\"fetch_pr_details\">\n-      <mcp_approach>\n-        <tool>get_pull_request</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n-        <parse_json>true</parse_json>\n-      </cli_fallback>\n+      <description>Fetch comprehensive PR metadata</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n+      <output_format>JSON</output_format>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr-metadata.json</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_diff\">\n-      <mcp_approach>\n-        <tool>get_pull_request_diff</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request_diff</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n-        <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n-      </cli_fallback>\n+      <description>Get the full diff of PR changes</description>\n+      <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_files\">",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2214004435",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5832,
        "pr_file": ".roo/rules-pr-reviewer/4_github_operations.xml",
        "discussion_id": "2214004435",
        "commented_code": "@@ -1,226 +1,224 @@\n <github_operations>\n   <overview>\n-    Guidelines for handling GitHub operations with fallback strategies\n-    when MCP tools are unavailable or failing.\n+    Guidelines for handling GitHub operations using the GitHub CLI (gh).\n+    This mode exclusively uses command-line operations for all GitHub interactions.\n   </overview>\n \n-  <mcp_vs_cli>\n-    <principle>\n-      Always try MCP tools first, fall back to GitHub CLI if they fail\n-    </principle>\n-    <benefits_of_mcp>\n-      - Structured data responses\n-      - Better error handling\n-      - Integrated with the system\n-    </benefits_of_mcp>\n-    <benefits_of_cli>\n-      - More reliable when MCP is down\n-      - Direct GitHub API access\n-      - Can handle complex queries\n-    </benefits_of_cli>\n-  </mcp_vs_cli>\n+  <prerequisites>\n+    <requirement name=\"github_cli\">\n+      <description>GitHub CLI must be installed and authenticated</description>\n+      <check_command>gh auth status</check_command>\n+      <install_url>https://cli.github.com/</install_url>\n+    </requirement>\n+    <requirement name=\"authentication\">\n+      <description>User must be authenticated with appropriate permissions</description>\n+      <setup_command>gh auth login</setup_command>\n+    </requirement>\n+  </prerequisites>\n \n   <operation_patterns>\n     <operation name=\"fetch_pr_details\">\n-      <mcp_approach>\n-        <tool>get_pull_request</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n-        <parse_json>true</parse_json>\n-      </cli_fallback>\n+      <description>Fetch comprehensive PR metadata</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n+      <output_format>JSON</output_format>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr-metadata.json</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_diff\">\n-      <mcp_approach>\n-        <tool>get_pull_request_diff</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request_diff</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n-        <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n-      </cli_fallback>\n+      <description>Get the full diff of PR changes</description>\n+      <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_files\">",
        "comment_created_at": "2025-07-17T18:21:48+00:00",
        "comment_author": "Copilot",
        "comment_body": "Consider adding a <save_to> element for this operation to specify where the file list should be saved, consistent with other operations like fetch_pr_details and fetch_pr_diff.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2214004459",
    "pr_number": 5832,
    "pr_file": ".roo/rules-pr-reviewer/4_github_operations.xml",
    "created_at": "2025-07-17T18:21:49+00:00",
    "commented_code": "<github_operations>\n   <overview>\n-    Guidelines for handling GitHub operations with fallback strategies\n-    when MCP tools are unavailable or failing.\n+    Guidelines for handling GitHub operations using the GitHub CLI (gh).\n+    This mode exclusively uses command-line operations for all GitHub interactions.\n   </overview>\n \n-  <mcp_vs_cli>\n-    <principle>\n-      Always try MCP tools first, fall back to GitHub CLI if they fail\n-    </principle>\n-    <benefits_of_mcp>\n-      - Structured data responses\n-      - Better error handling\n-      - Integrated with the system\n-    </benefits_of_mcp>\n-    <benefits_of_cli>\n-      - More reliable when MCP is down\n-      - Direct GitHub API access\n-      - Can handle complex queries\n-    </benefits_of_cli>\n-  </mcp_vs_cli>\n+  <prerequisites>\n+    <requirement name=\"github_cli\">\n+      <description>GitHub CLI must be installed and authenticated</description>\n+      <check_command>gh auth status</check_command>\n+      <install_url>https://cli.github.com/</install_url>\n+    </requirement>\n+    <requirement name=\"authentication\">\n+      <description>User must be authenticated with appropriate permissions</description>\n+      <setup_command>gh auth login</setup_command>\n+    </requirement>\n+  </prerequisites>\n \n   <operation_patterns>\n     <operation name=\"fetch_pr_details\">\n-      <mcp_approach>\n-        <tool>get_pull_request</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n-        <parse_json>true</parse_json>\n-      </cli_fallback>\n+      <description>Fetch comprehensive PR metadata</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n+      <output_format>JSON</output_format>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr-metadata.json</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_diff\">\n-      <mcp_approach>\n-        <tool>get_pull_request_diff</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request_diff</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n-        <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n-      </cli_fallback>\n+      <description>Get the full diff of PR changes</description>\n+      <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_files\">\n-      <mcp_approach>\n-        <tool>get_pull_request_files</tool>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json files --jq '.files[].path'</command>\n-        <description>Lists all files changed in the PR</description>\n-      </cli_fallback>\n+      <description>List all files changed in the PR</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json files --jq '.files[].path'</command>\n+      <output_format>Line-separated file paths</output_format>\n     </operation>\n \n     <operation name=\"fetch_comments\">",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2214004459",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5832,
        "pr_file": ".roo/rules-pr-reviewer/4_github_operations.xml",
        "discussion_id": "2214004459",
        "commented_code": "@@ -1,226 +1,224 @@\n <github_operations>\n   <overview>\n-    Guidelines for handling GitHub operations with fallback strategies\n-    when MCP tools are unavailable or failing.\n+    Guidelines for handling GitHub operations using the GitHub CLI (gh).\n+    This mode exclusively uses command-line operations for all GitHub interactions.\n   </overview>\n \n-  <mcp_vs_cli>\n-    <principle>\n-      Always try MCP tools first, fall back to GitHub CLI if they fail\n-    </principle>\n-    <benefits_of_mcp>\n-      - Structured data responses\n-      - Better error handling\n-      - Integrated with the system\n-    </benefits_of_mcp>\n-    <benefits_of_cli>\n-      - More reliable when MCP is down\n-      - Direct GitHub API access\n-      - Can handle complex queries\n-    </benefits_of_cli>\n-  </mcp_vs_cli>\n+  <prerequisites>\n+    <requirement name=\"github_cli\">\n+      <description>GitHub CLI must be installed and authenticated</description>\n+      <check_command>gh auth status</check_command>\n+      <install_url>https://cli.github.com/</install_url>\n+    </requirement>\n+    <requirement name=\"authentication\">\n+      <description>User must be authenticated with appropriate permissions</description>\n+      <setup_command>gh auth login</setup_command>\n+    </requirement>\n+  </prerequisites>\n \n   <operation_patterns>\n     <operation name=\"fetch_pr_details\">\n-      <mcp_approach>\n-        <tool>get_pull_request</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n-        <parse_json>true</parse_json>\n-      </cli_fallback>\n+      <description>Fetch comprehensive PR metadata</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n+      <output_format>JSON</output_format>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr-metadata.json</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_diff\">\n-      <mcp_approach>\n-        <tool>get_pull_request_diff</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request_diff</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n-        <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n-      </cli_fallback>\n+      <description>Get the full diff of PR changes</description>\n+      <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_files\">\n-      <mcp_approach>\n-        <tool>get_pull_request_files</tool>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json files --jq '.files[].path'</command>\n-        <description>Lists all files changed in the PR</description>\n-      </cli_fallback>\n+      <description>List all files changed in the PR</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json files --jq '.files[].path'</command>\n+      <output_format>Line-separated file paths</output_format>\n     </operation>\n \n     <operation name=\"fetch_comments\">",
        "comment_created_at": "2025-07-17T18:21:49+00:00",
        "comment_author": "Copilot",
        "comment_body": "Consider adding a <save_to> element to specify where the comments JSON should be written, aligning with how other operations persist output.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2214004474",
    "pr_number": 5832,
    "pr_file": ".roo/rules-pr-reviewer/4_github_operations.xml",
    "created_at": "2025-07-17T18:21:49+00:00",
    "commented_code": "<github_operations>\n   <overview>\n-    Guidelines for handling GitHub operations with fallback strategies\n-    when MCP tools are unavailable or failing.\n+    Guidelines for handling GitHub operations using the GitHub CLI (gh).\n+    This mode exclusively uses command-line operations for all GitHub interactions.\n   </overview>\n \n-  <mcp_vs_cli>\n-    <principle>\n-      Always try MCP tools first, fall back to GitHub CLI if they fail\n-    </principle>\n-    <benefits_of_mcp>\n-      - Structured data responses\n-      - Better error handling\n-      - Integrated with the system\n-    </benefits_of_mcp>\n-    <benefits_of_cli>\n-      - More reliable when MCP is down\n-      - Direct GitHub API access\n-      - Can handle complex queries\n-    </benefits_of_cli>\n-  </mcp_vs_cli>\n+  <prerequisites>\n+    <requirement name=\"github_cli\">\n+      <description>GitHub CLI must be installed and authenticated</description>\n+      <check_command>gh auth status</check_command>\n+      <install_url>https://cli.github.com/</install_url>\n+    </requirement>\n+    <requirement name=\"authentication\">\n+      <description>User must be authenticated with appropriate permissions</description>\n+      <setup_command>gh auth login</setup_command>\n+    </requirement>\n+  </prerequisites>\n \n   <operation_patterns>\n     <operation name=\"fetch_pr_details\">\n-      <mcp_approach>\n-        <tool>get_pull_request</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n-        <parse_json>true</parse_json>\n-      </cli_fallback>\n+      <description>Fetch comprehensive PR metadata</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n+      <output_format>JSON</output_format>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr-metadata.json</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_diff\">\n-      <mcp_approach>\n-        <tool>get_pull_request_diff</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request_diff</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n-        <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n-      </cli_fallback>\n+      <description>Get the full diff of PR changes</description>\n+      <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_files\">\n-      <mcp_approach>\n-        <tool>get_pull_request_files</tool>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json files --jq '.files[].path'</command>\n-        <description>Lists all files changed in the PR</description>\n-      </cli_fallback>\n+      <description>List all files changed in the PR</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json files --jq '.files[].path'</command>\n+      <output_format>Line-separated file paths</output_format>\n     </operation>\n \n     <operation name=\"fetch_comments\">\n-      <mcp_approach>\n-        <tool>get_pull_request_comments</tool>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json comments --jq '.comments'</command>\n-      </cli_fallback>\n+      <description>Get all comments on the PR</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json comments --jq '.comments'</command>\n+      <output_format>JSON array of comments</output_format>\n     </operation>\n \n     <operation name=\"fetch_reviews\">",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2214004474",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5832,
        "pr_file": ".roo/rules-pr-reviewer/4_github_operations.xml",
        "discussion_id": "2214004474",
        "commented_code": "@@ -1,226 +1,224 @@\n <github_operations>\n   <overview>\n-    Guidelines for handling GitHub operations with fallback strategies\n-    when MCP tools are unavailable or failing.\n+    Guidelines for handling GitHub operations using the GitHub CLI (gh).\n+    This mode exclusively uses command-line operations for all GitHub interactions.\n   </overview>\n \n-  <mcp_vs_cli>\n-    <principle>\n-      Always try MCP tools first, fall back to GitHub CLI if they fail\n-    </principle>\n-    <benefits_of_mcp>\n-      - Structured data responses\n-      - Better error handling\n-      - Integrated with the system\n-    </benefits_of_mcp>\n-    <benefits_of_cli>\n-      - More reliable when MCP is down\n-      - Direct GitHub API access\n-      - Can handle complex queries\n-    </benefits_of_cli>\n-  </mcp_vs_cli>\n+  <prerequisites>\n+    <requirement name=\"github_cli\">\n+      <description>GitHub CLI must be installed and authenticated</description>\n+      <check_command>gh auth status</check_command>\n+      <install_url>https://cli.github.com/</install_url>\n+    </requirement>\n+    <requirement name=\"authentication\">\n+      <description>User must be authenticated with appropriate permissions</description>\n+      <setup_command>gh auth login</setup_command>\n+    </requirement>\n+  </prerequisites>\n \n   <operation_patterns>\n     <operation name=\"fetch_pr_details\">\n-      <mcp_approach>\n-        <tool>get_pull_request</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n-        <parse_json>true</parse_json>\n-      </cli_fallback>\n+      <description>Fetch comprehensive PR metadata</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n+      <output_format>JSON</output_format>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr-metadata.json</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_diff\">\n-      <mcp_approach>\n-        <tool>get_pull_request_diff</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request_diff</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n-        <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n-      </cli_fallback>\n+      <description>Get the full diff of PR changes</description>\n+      <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_files\">\n-      <mcp_approach>\n-        <tool>get_pull_request_files</tool>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json files --jq '.files[].path'</command>\n-        <description>Lists all files changed in the PR</description>\n-      </cli_fallback>\n+      <description>List all files changed in the PR</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json files --jq '.files[].path'</command>\n+      <output_format>Line-separated file paths</output_format>\n     </operation>\n \n     <operation name=\"fetch_comments\">\n-      <mcp_approach>\n-        <tool>get_pull_request_comments</tool>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json comments --jq '.comments'</command>\n-      </cli_fallback>\n+      <description>Get all comments on the PR</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json comments --jq '.comments'</command>\n+      <output_format>JSON array of comments</output_format>\n     </operation>\n \n     <operation name=\"fetch_reviews\">",
        "comment_created_at": "2025-07-17T18:21:49+00:00",
        "comment_author": "Copilot",
        "comment_body": "It may be helpful to include a <save_to> tag here so that the reviews output is saved to a temp file, mirroring the pattern used by other operations.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2214004489",
    "pr_number": 5832,
    "pr_file": ".roo/rules-pr-reviewer/4_github_operations.xml",
    "created_at": "2025-07-17T18:21:49+00:00",
    "commented_code": "<github_operations>\n   <overview>\n-    Guidelines for handling GitHub operations with fallback strategies\n-    when MCP tools are unavailable or failing.\n+    Guidelines for handling GitHub operations using the GitHub CLI (gh).\n+    This mode exclusively uses command-line operations for all GitHub interactions.\n   </overview>\n \n-  <mcp_vs_cli>\n-    <principle>\n-      Always try MCP tools first, fall back to GitHub CLI if they fail\n-    </principle>\n-    <benefits_of_mcp>\n-      - Structured data responses\n-      - Better error handling\n-      - Integrated with the system\n-    </benefits_of_mcp>\n-    <benefits_of_cli>\n-      - More reliable when MCP is down\n-      - Direct GitHub API access\n-      - Can handle complex queries\n-    </benefits_of_cli>\n-  </mcp_vs_cli>\n+  <prerequisites>\n+    <requirement name=\"github_cli\">\n+      <description>GitHub CLI must be installed and authenticated</description>\n+      <check_command>gh auth status</check_command>\n+      <install_url>https://cli.github.com/</install_url>\n+    </requirement>\n+    <requirement name=\"authentication\">\n+      <description>User must be authenticated with appropriate permissions</description>\n+      <setup_command>gh auth login</setup_command>\n+    </requirement>\n+  </prerequisites>\n \n   <operation_patterns>\n     <operation name=\"fetch_pr_details\">\n-      <mcp_approach>\n-        <tool>get_pull_request</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n-        <parse_json>true</parse_json>\n-      </cli_fallback>\n+      <description>Fetch comprehensive PR metadata</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n+      <output_format>JSON</output_format>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr-metadata.json</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_diff\">\n-      <mcp_approach>\n-        <tool>get_pull_request_diff</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request_diff</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n-        <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n-      </cli_fallback>\n+      <description>Get the full diff of PR changes</description>\n+      <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_files\">\n-      <mcp_approach>\n-        <tool>get_pull_request_files</tool>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json files --jq '.files[].path'</command>\n-        <description>Lists all files changed in the PR</description>\n-      </cli_fallback>\n+      <description>List all files changed in the PR</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json files --jq '.files[].path'</command>\n+      <output_format>Line-separated file paths</output_format>\n     </operation>\n \n     <operation name=\"fetch_comments\">\n-      <mcp_approach>\n-        <tool>get_pull_request_comments</tool>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json comments --jq '.comments'</command>\n-      </cli_fallback>\n+      <description>Get all comments on the PR</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json comments --jq '.comments'</command>\n+      <output_format>JSON array of comments</output_format>\n     </operation>\n \n     <operation name=\"fetch_reviews\">\n-      <mcp_approach>\n-        <tool>get_pull_request_reviews</tool>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json reviews --jq '.reviews'</command>\n-      </cli_fallback>\n+      <description>Get all reviews on the PR</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json reviews --jq '.reviews'</command>\n+      <output_format>JSON array of reviews</output_format>\n     </operation>\n \n     <operation name=\"checkout_pr\">\n-      <cli_only>\n-        <command>gh pr checkout [PR_NUMBER] --repo [owner]/[repo]</command>\n-        <note>No MCP equivalent - always use CLI</note>\n-      </cli_only>\n+      <description>Check out PR branch locally for analysis</description>\n+      <command>gh pr checkout [PR_NUMBER] --repo [owner]/[repo]</command>\n+      <note>This switches the current branch to the PR branch</note>\n     </operation>\n \n     <operation name=\"post_comment\">\n-      <mcp_approach>\n-        <tool>add_issue_comment</tool>\n-        <note>PRs use same comment system as issues</note>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr comment [PR_NUMBER] --repo [owner]/[repo] --body-file [file_path]</command>\n-        <alternative>gh pr comment [PR_NUMBER] --repo [owner]/[repo] --body \"[comment_text]\"</alternative>\n-      </cli_fallback>\n+      <description>Post a comment on the PR</description>\n+      <command>gh pr comment [PR_NUMBER] --repo [owner]/[repo] --body-file [file_path]</command>\n+      <alternative>gh pr comment [PR_NUMBER] --repo [owner]/[repo] --body \"[comment_text]\"</alternative>\n     </operation>\n \n     <operation name=\"create_review\">\n-      <mcp_approach>\n-        <sequence>\n-          1. create_pending_pull_request_review\n-          2. add_pull_request_review_comment_to_pending_review (multiple times)\n-          3. submit_pending_pull_request_review\n-        </sequence>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr review [PR_NUMBER] --repo [owner]/[repo] --comment --body-file [review_file]</command>\n-      </cli_fallback>\n+      <description>Create a PR review with comments</description>\n+      <command>gh pr review [PR_NUMBER] --repo [owner]/[repo] --comment --body-file [review_file]</command>\n+      <options>\n+        <option>--approve: Approve the PR</option>\n+        <option>--request-changes: Request changes</option>\n+        <option>--comment: Just comment without approval/rejection</option>\n+      </options>\n+    </operation>\n+\n+    <operation name=\"fetch_issue\">\n+      <description>Get issue details (for linked issues)</description>\n+      <command>gh issue view [issue_number] --repo [owner]/[repo] --json number,title,body,author,state</command>\n+      <output_format>JSON</output_format>",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2214004489",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5832,
        "pr_file": ".roo/rules-pr-reviewer/4_github_operations.xml",
        "discussion_id": "2214004489",
        "commented_code": "@@ -1,226 +1,224 @@\n <github_operations>\n   <overview>\n-    Guidelines for handling GitHub operations with fallback strategies\n-    when MCP tools are unavailable or failing.\n+    Guidelines for handling GitHub operations using the GitHub CLI (gh).\n+    This mode exclusively uses command-line operations for all GitHub interactions.\n   </overview>\n \n-  <mcp_vs_cli>\n-    <principle>\n-      Always try MCP tools first, fall back to GitHub CLI if they fail\n-    </principle>\n-    <benefits_of_mcp>\n-      - Structured data responses\n-      - Better error handling\n-      - Integrated with the system\n-    </benefits_of_mcp>\n-    <benefits_of_cli>\n-      - More reliable when MCP is down\n-      - Direct GitHub API access\n-      - Can handle complex queries\n-    </benefits_of_cli>\n-  </mcp_vs_cli>\n+  <prerequisites>\n+    <requirement name=\"github_cli\">\n+      <description>GitHub CLI must be installed and authenticated</description>\n+      <check_command>gh auth status</check_command>\n+      <install_url>https://cli.github.com/</install_url>\n+    </requirement>\n+    <requirement name=\"authentication\">\n+      <description>User must be authenticated with appropriate permissions</description>\n+      <setup_command>gh auth login</setup_command>\n+    </requirement>\n+  </prerequisites>\n \n   <operation_patterns>\n     <operation name=\"fetch_pr_details\">\n-      <mcp_approach>\n-        <tool>get_pull_request</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n-        <parse_json>true</parse_json>\n-      </cli_fallback>\n+      <description>Fetch comprehensive PR metadata</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json number,title,author,state,body,url,headRefName,baseRefName,files,additions,deletions,changedFiles</command>\n+      <output_format>JSON</output_format>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr-metadata.json</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_diff\">\n-      <mcp_approach>\n-        <tool>get_pull_request_diff</tool>\n-        <example><![CDATA[\n-<use_mcp_tool>\n-<server_name>github</server_name>\n-<tool_name>get_pull_request_diff</tool_name>\n-<arguments>\n-{\n-  \"owner\": \"RooCodeInc\",\n-  \"repo\": \"Roo-Code\",\n-  \"pullNumber\": 123\n-}\n-</arguments>\n-</use_mcp_tool>\n-        ]]></example>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n-        <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n-      </cli_fallback>\n+      <description>Get the full diff of PR changes</description>\n+      <command>gh pr diff [PR_NUMBER] --repo [owner]/[repo]</command>\n+      <save_to>.roo/temp/pr-[PR_NUMBER]/pr.diff</save_to>\n     </operation>\n \n     <operation name=\"fetch_pr_files\">\n-      <mcp_approach>\n-        <tool>get_pull_request_files</tool>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json files --jq '.files[].path'</command>\n-        <description>Lists all files changed in the PR</description>\n-      </cli_fallback>\n+      <description>List all files changed in the PR</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json files --jq '.files[].path'</command>\n+      <output_format>Line-separated file paths</output_format>\n     </operation>\n \n     <operation name=\"fetch_comments\">\n-      <mcp_approach>\n-        <tool>get_pull_request_comments</tool>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json comments --jq '.comments'</command>\n-      </cli_fallback>\n+      <description>Get all comments on the PR</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json comments --jq '.comments'</command>\n+      <output_format>JSON array of comments</output_format>\n     </operation>\n \n     <operation name=\"fetch_reviews\">\n-      <mcp_approach>\n-        <tool>get_pull_request_reviews</tool>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json reviews --jq '.reviews'</command>\n-      </cli_fallback>\n+      <description>Get all reviews on the PR</description>\n+      <command>gh pr view [PR_NUMBER] --repo [owner]/[repo] --json reviews --jq '.reviews'</command>\n+      <output_format>JSON array of reviews</output_format>\n     </operation>\n \n     <operation name=\"checkout_pr\">\n-      <cli_only>\n-        <command>gh pr checkout [PR_NUMBER] --repo [owner]/[repo]</command>\n-        <note>No MCP equivalent - always use CLI</note>\n-      </cli_only>\n+      <description>Check out PR branch locally for analysis</description>\n+      <command>gh pr checkout [PR_NUMBER] --repo [owner]/[repo]</command>\n+      <note>This switches the current branch to the PR branch</note>\n     </operation>\n \n     <operation name=\"post_comment\">\n-      <mcp_approach>\n-        <tool>add_issue_comment</tool>\n-        <note>PRs use same comment system as issues</note>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr comment [PR_NUMBER] --repo [owner]/[repo] --body-file [file_path]</command>\n-        <alternative>gh pr comment [PR_NUMBER] --repo [owner]/[repo] --body \"[comment_text]\"</alternative>\n-      </cli_fallback>\n+      <description>Post a comment on the PR</description>\n+      <command>gh pr comment [PR_NUMBER] --repo [owner]/[repo] --body-file [file_path]</command>\n+      <alternative>gh pr comment [PR_NUMBER] --repo [owner]/[repo] --body \"[comment_text]\"</alternative>\n     </operation>\n \n     <operation name=\"create_review\">\n-      <mcp_approach>\n-        <sequence>\n-          1. create_pending_pull_request_review\n-          2. add_pull_request_review_comment_to_pending_review (multiple times)\n-          3. submit_pending_pull_request_review\n-        </sequence>\n-      </mcp_approach>\n-      <cli_fallback>\n-        <command>gh pr review [PR_NUMBER] --repo [owner]/[repo] --comment --body-file [review_file]</command>\n-      </cli_fallback>\n+      <description>Create a PR review with comments</description>\n+      <command>gh pr review [PR_NUMBER] --repo [owner]/[repo] --comment --body-file [review_file]</command>\n+      <options>\n+        <option>--approve: Approve the PR</option>\n+        <option>--request-changes: Request changes</option>\n+        <option>--comment: Just comment without approval/rejection</option>\n+      </options>\n+    </operation>\n+\n+    <operation name=\"fetch_issue\">\n+      <description>Get issue details (for linked issues)</description>\n+      <command>gh issue view [issue_number] --repo [owner]/[repo] --json number,title,body,author,state</command>\n+      <output_format>JSON</output_format>",
        "comment_created_at": "2025-07-17T18:21:49+00:00",
        "comment_author": "Copilot",
        "comment_body": "This new operation should also specify a <save_to> path so that issue details are saved to a known temp location.\n```suggestion\n      <command>gh issue view [issue_number] --repo [owner]/[repo] --json number,title,body,author,state > [save_to]</command>\n      <output_format>JSON</output_format>\n      <save_to>/tmp/issue_details.json</save_to>\n```",
        "pr_file_module": null
      }
    ]
  }
]