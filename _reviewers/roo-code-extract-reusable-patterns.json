[
  {
    "discussion_id": "2219693783",
    "pr_number": 5626,
    "pr_file": "webview-ui/src/components/file-changes/FilesChangedOverview.tsx",
    "created_at": "2025-07-21T16:31:51+00:00",
    "commented_code": "+import React from \"react\"\n+import { FileChangeset, FileChange } from \"@roo-code/types\"\n+import { useTranslation } from \"react-i18next\"\n+import { useExtensionState } from \"@/context/ExtensionStateContext\"\n+import { vscode } from \"@/utils/vscode\"\n+\n+// eslint-disable-next-line @typescript-eslint/no-empty-object-type\n+interface FilesChangedOverviewProps {}\n+\n+interface _CheckpointEventData {\n+\ttype: \"checkpoint_created\" | \"checkpoint_restored\"\n+\tcheckpoint: string\n+\tpreviousCheckpoint?: string\n+}\n+\n+/**\n+ * FilesChangedOverview is a self-managing component that listens for checkpoint events\n+ * and displays file changes. It manages its own state and communicates with the backend\n+ * through VS Code message passing.\n+ */\n+const FilesChangedOverview: React.FC<FilesChangedOverviewProps> = () => {\n+\tconst { t } = useTranslation()\n+\tconst { filesChangedEnabled } = useExtensionState()\n+\n+\t// Self-managed state\n+\tconst [changeset, setChangeset] = React.useState<FileChangeset | null>(null)\n+\tconst [isInitialized, setIsInitialized] = React.useState(false)\n+\n+\tconst files = React.useMemo(() => changeset?.files || [], [changeset?.files])\n+\tconst [isCollapsed, setIsCollapsed] = React.useState(true)\n+\n+\t// Performance optimization: Use virtualization for large file lists\n+\tconst VIRTUALIZATION_THRESHOLD = 50\n+\tconst ITEM_HEIGHT = 32 // Approximate height of each file item\n+\tconst MAX_VISIBLE_ITEMS = 10\n+\tconst [scrollTop, setScrollTop] = React.useState(0)\n+\n+\tconst shouldVirtualize = files.length > VIRTUALIZATION_THRESHOLD\n+\n+\t// Calculate visible items for virtualization\n+\tconst visibleItems = React.useMemo(() => {\n+\t\tif (!shouldVirtualize) return files\n+\n+\t\tconst startIndex = Math.floor(scrollTop / ITEM_HEIGHT)\n+\t\tconst endIndex = Math.min(startIndex + MAX_VISIBLE_ITEMS, files.length)\n+\t\treturn files.slice(startIndex, endIndex).map((file, index) => ({\n+\t\t\t...file,\n+\t\t\tvirtualIndex: startIndex + index,\n+\t\t}))\n+\t}, [files, scrollTop, shouldVirtualize])\n+\n+\tconst totalHeight = shouldVirtualize ? files.length * ITEM_HEIGHT : \"auto\"\n+\tconst offsetY = shouldVirtualize ? Math.floor(scrollTop / ITEM_HEIGHT) * ITEM_HEIGHT : 0\n+\n+\t// Simple double-click prevention\n+\tconst [isProcessing, setIsProcessing] = React.useState(false)\n+\tconst timeoutRef = React.useRef<NodeJS.Timeout | null>(null)\n+\n+\t// Cleanup timeout on unmount\n+\tReact.useEffect(() => {\n+\t\treturn () => {\n+\t\t\tif (timeoutRef.current) {\n+\t\t\t\tclearTimeout(timeoutRef.current)\n+\t\t\t}\n+\t\t}\n+\t}, [])\n+\n+\t// FCO initialization logic\n+\tconst checkInit = React.useCallback(\n+\t\t(baseCheckpoint: string) => {\n+\t\t\tif (!isInitialized) {\n+\t\t\t\tconsole.log(\"[FCO] Initializing with base checkpoint:\", baseCheckpoint)\n+\t\t\t\tsetIsInitialized(true)\n+\t\t\t}\n+\t\t},\n+\t\t[isInitialized],\n+\t)\n+\n+\t// Update changeset - backend handles filtering, no local filtering needed\n+\tconst updateChangeset = React.useCallback((newChangeset: FileChangeset) => {\n+\t\tsetChangeset(newChangeset)\n+\t}, [])\n+\n+\t// Handle checkpoint creation\n+\tconst handleCheckpointCreated = React.useCallback(\n+\t\t(checkpoint: string, previousCheckpoint?: string) => {\n+\t\t\tif (!isInitialized) {\n+\t\t\t\tcheckInit(previousCheckpoint || checkpoint)\n+\t\t\t}\n+\t\t\t// Note: Backend automatically sends file changes during checkpoint creation\n+\t\t\t// No need to request them here - just wait for the filesChanged message\n+\t\t},\n+\t\t[isInitialized, checkInit],\n+\t)\n+\n+\t// Handle checkpoint restoration with the 4 examples logic\n+\tconst handleCheckpointRestored = React.useCallback((restoredCheckpoint: string) => {\n+\t\tconsole.log(\"[FCO] Handling checkpoint restore to:\", restoredCheckpoint)\n+\n+\t\t// Request file changes after checkpoint restore\n+\t\t// Backend should calculate changes from initial baseline to restored checkpoint\n+\t\tvscode.postMessage({ type: \"filesChangedRequest\" })\n+\t}, [])\n+\n+\t// Action handlers\n+\tconst handleViewDiff = React.useCallback((uri: string) => {\n+\t\tvscode.postMessage({ type: \"viewDiff\", uri })\n+\t}, [])\n+\n+\tconst handleAcceptFile = React.useCallback((uri: string) => {\n+\t\tvscode.postMessage({ type: \"acceptFileChange\", uri })\n+\t\t// Backend will send updated filesChanged message with filtered results\n+\t}, [])\n+\n+\tconst handleRejectFile = React.useCallback((uri: string) => {\n+\t\tvscode.postMessage({ type: \"rejectFileChange\", uri })\n+\t\t// Backend will send updated filesChanged message with filtered results\n+\t}, [])\n+\n+\tconst handleAcceptAll = React.useCallback(() => {\n+\t\tvscode.postMessage({ type: \"acceptAllFileChanges\" })\n+\t\t// Backend will send updated filesChanged message with filtered results\n+\t}, [])\n+\n+\tconst handleRejectAll = React.useCallback(() => {\n+\t\tconst visibleUris = files.map((file) => file.uri)\n+\t\tvscode.postMessage({ type: \"rejectAllFileChanges\", uris: visibleUris })\n+\t\t// Backend will send updated filesChanged message with filtered results\n+\t}, [files])\n+\n+\tconst handleWithDebounce = React.useCallback(",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2219693783",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5626,
        "pr_file": "webview-ui/src/components/file-changes/FilesChangedOverview.tsx",
        "discussion_id": "2219693783",
        "commented_code": "@@ -0,0 +1,516 @@\n+import React from \"react\"\n+import { FileChangeset, FileChange } from \"@roo-code/types\"\n+import { useTranslation } from \"react-i18next\"\n+import { useExtensionState } from \"@/context/ExtensionStateContext\"\n+import { vscode } from \"@/utils/vscode\"\n+\n+// eslint-disable-next-line @typescript-eslint/no-empty-object-type\n+interface FilesChangedOverviewProps {}\n+\n+interface _CheckpointEventData {\n+\ttype: \"checkpoint_created\" | \"checkpoint_restored\"\n+\tcheckpoint: string\n+\tpreviousCheckpoint?: string\n+}\n+\n+/**\n+ * FilesChangedOverview is a self-managing component that listens for checkpoint events\n+ * and displays file changes. It manages its own state and communicates with the backend\n+ * through VS Code message passing.\n+ */\n+const FilesChangedOverview: React.FC<FilesChangedOverviewProps> = () => {\n+\tconst { t } = useTranslation()\n+\tconst { filesChangedEnabled } = useExtensionState()\n+\n+\t// Self-managed state\n+\tconst [changeset, setChangeset] = React.useState<FileChangeset | null>(null)\n+\tconst [isInitialized, setIsInitialized] = React.useState(false)\n+\n+\tconst files = React.useMemo(() => changeset?.files || [], [changeset?.files])\n+\tconst [isCollapsed, setIsCollapsed] = React.useState(true)\n+\n+\t// Performance optimization: Use virtualization for large file lists\n+\tconst VIRTUALIZATION_THRESHOLD = 50\n+\tconst ITEM_HEIGHT = 32 // Approximate height of each file item\n+\tconst MAX_VISIBLE_ITEMS = 10\n+\tconst [scrollTop, setScrollTop] = React.useState(0)\n+\n+\tconst shouldVirtualize = files.length > VIRTUALIZATION_THRESHOLD\n+\n+\t// Calculate visible items for virtualization\n+\tconst visibleItems = React.useMemo(() => {\n+\t\tif (!shouldVirtualize) return files\n+\n+\t\tconst startIndex = Math.floor(scrollTop / ITEM_HEIGHT)\n+\t\tconst endIndex = Math.min(startIndex + MAX_VISIBLE_ITEMS, files.length)\n+\t\treturn files.slice(startIndex, endIndex).map((file, index) => ({\n+\t\t\t...file,\n+\t\t\tvirtualIndex: startIndex + index,\n+\t\t}))\n+\t}, [files, scrollTop, shouldVirtualize])\n+\n+\tconst totalHeight = shouldVirtualize ? files.length * ITEM_HEIGHT : \"auto\"\n+\tconst offsetY = shouldVirtualize ? Math.floor(scrollTop / ITEM_HEIGHT) * ITEM_HEIGHT : 0\n+\n+\t// Simple double-click prevention\n+\tconst [isProcessing, setIsProcessing] = React.useState(false)\n+\tconst timeoutRef = React.useRef<NodeJS.Timeout | null>(null)\n+\n+\t// Cleanup timeout on unmount\n+\tReact.useEffect(() => {\n+\t\treturn () => {\n+\t\t\tif (timeoutRef.current) {\n+\t\t\t\tclearTimeout(timeoutRef.current)\n+\t\t\t}\n+\t\t}\n+\t}, [])\n+\n+\t// FCO initialization logic\n+\tconst checkInit = React.useCallback(\n+\t\t(baseCheckpoint: string) => {\n+\t\t\tif (!isInitialized) {\n+\t\t\t\tconsole.log(\"[FCO] Initializing with base checkpoint:\", baseCheckpoint)\n+\t\t\t\tsetIsInitialized(true)\n+\t\t\t}\n+\t\t},\n+\t\t[isInitialized],\n+\t)\n+\n+\t// Update changeset - backend handles filtering, no local filtering needed\n+\tconst updateChangeset = React.useCallback((newChangeset: FileChangeset) => {\n+\t\tsetChangeset(newChangeset)\n+\t}, [])\n+\n+\t// Handle checkpoint creation\n+\tconst handleCheckpointCreated = React.useCallback(\n+\t\t(checkpoint: string, previousCheckpoint?: string) => {\n+\t\t\tif (!isInitialized) {\n+\t\t\t\tcheckInit(previousCheckpoint || checkpoint)\n+\t\t\t}\n+\t\t\t// Note: Backend automatically sends file changes during checkpoint creation\n+\t\t\t// No need to request them here - just wait for the filesChanged message\n+\t\t},\n+\t\t[isInitialized, checkInit],\n+\t)\n+\n+\t// Handle checkpoint restoration with the 4 examples logic\n+\tconst handleCheckpointRestored = React.useCallback((restoredCheckpoint: string) => {\n+\t\tconsole.log(\"[FCO] Handling checkpoint restore to:\", restoredCheckpoint)\n+\n+\t\t// Request file changes after checkpoint restore\n+\t\t// Backend should calculate changes from initial baseline to restored checkpoint\n+\t\tvscode.postMessage({ type: \"filesChangedRequest\" })\n+\t}, [])\n+\n+\t// Action handlers\n+\tconst handleViewDiff = React.useCallback((uri: string) => {\n+\t\tvscode.postMessage({ type: \"viewDiff\", uri })\n+\t}, [])\n+\n+\tconst handleAcceptFile = React.useCallback((uri: string) => {\n+\t\tvscode.postMessage({ type: \"acceptFileChange\", uri })\n+\t\t// Backend will send updated filesChanged message with filtered results\n+\t}, [])\n+\n+\tconst handleRejectFile = React.useCallback((uri: string) => {\n+\t\tvscode.postMessage({ type: \"rejectFileChange\", uri })\n+\t\t// Backend will send updated filesChanged message with filtered results\n+\t}, [])\n+\n+\tconst handleAcceptAll = React.useCallback(() => {\n+\t\tvscode.postMessage({ type: \"acceptAllFileChanges\" })\n+\t\t// Backend will send updated filesChanged message with filtered results\n+\t}, [])\n+\n+\tconst handleRejectAll = React.useCallback(() => {\n+\t\tconst visibleUris = files.map((file) => file.uri)\n+\t\tvscode.postMessage({ type: \"rejectAllFileChanges\", uris: visibleUris })\n+\t\t// Backend will send updated filesChanged message with filtered results\n+\t}, [files])\n+\n+\tconst handleWithDebounce = React.useCallback(",
        "comment_created_at": "2025-07-21T16:31:51+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "The debouncing logic is implemented directly in this component. Have you considered extracting it into a reusable custom hook? This could help improve separation of concerns.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2220000113",
    "pr_number": 5853,
    "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
    "created_at": "2025-07-21T18:54:09+00:00",
    "commented_code": "<VSCodeButton\n \t\t\t\t\t\t\t\t\t\t\t\tappearance=\"primary\"\n \t\t\t\t\t\t\t\t\t\t\t\tdisabled={!enableButtons}\n-\t\t\t\t\t\t\t\t\t\t\t\tclassName={secondaryButtonText ? \"flex-1 mr-[6px]\" : \"flex-[2] mr-0\"}\n+\t\t\t\t\t\t\t\t\t\t\t\tclassName={\n+\t\t\t\t\t\t\t\t\t\t\t\t\tprimaryButtonText === t(\"chat:startNewTask.title\") &&\n+\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentTaskItem?.id\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"flex-1 mr-[6px]\"\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t: secondaryButtonText\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"flex-1 mr-[6px]\"\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"flex-[2] mr-0\"\n+\t\t\t\t\t\t\t\t\t\t\t\t}",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2220000113",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5853,
        "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
        "discussion_id": "2220000113",
        "commented_code": "@@ -1812,12 +1813,22 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro\n \t\t\t\t\t\t\t\t\t\t\t<VSCodeButton\n \t\t\t\t\t\t\t\t\t\t\t\tappearance=\"primary\"\n \t\t\t\t\t\t\t\t\t\t\t\tdisabled={!enableButtons}\n-\t\t\t\t\t\t\t\t\t\t\t\tclassName={secondaryButtonText ? \"flex-1 mr-[6px]\" : \"flex-[2] mr-0\"}\n+\t\t\t\t\t\t\t\t\t\t\t\tclassName={\n+\t\t\t\t\t\t\t\t\t\t\t\t\tprimaryButtonText === t(\"chat:startNewTask.title\") &&\n+\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentTaskItem?.id\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"flex-1 mr-[6px]\"\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t: secondaryButtonText\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"flex-1 mr-[6px]\"\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"flex-[2] mr-0\"\n+\t\t\t\t\t\t\t\t\t\t\t\t}",
        "comment_created_at": "2025-07-21T18:54:09+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "The className logic here is getting quite complex with nested ternaries. Could we simplify this by extracting the condition to a variable?\n\n```tsx\nconst showShareButton = primaryButtonText === t(\"chat:startNewTask.title\") && currentTaskItem?.id;\nconst buttonClassName = showShareButton || secondaryButtonText \n  ? \"flex-1 mr-[6px]\" \n  : \"flex-[2] mr-0\";\n```\n\nThis would make the JSX cleaner and the logic more readable.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2216043083",
    "pr_number": 5856,
    "pr_file": "webview-ui/src/components/modes/ModesView.tsx",
    "created_at": "2025-07-18T13:25:31+00:00",
    "commented_code": "value={(() => {\n \t\t\t\t\t\t\t\tconst customMode = findModeBySlug(visualMode, customModes)\n \t\t\t\t\t\t\t\tconst prompt = customModePrompts?.[visualMode] as PromptComponent\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\t// Use local state if currently editing this field\n+\t\t\t\t\t\t\t\tif (currentEditingField === \"roleDefinition\" && currentEditingModeSlug === visualMode) {\n+\t\t\t\t\t\t\t\t\treturn localModeRoleDefinition\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\treturn (\n \t\t\t\t\t\t\t\t\tcustomMode?.roleDefinition ??\n \t\t\t\t\t\t\t\t\tprompt?.roleDefinition ??\n \t\t\t\t\t\t\t\t\tgetRoleDefinition(visualMode)\n \t\t\t\t\t\t\t\t)\n \t\t\t\t\t\t\t})()}\n+\t\t\t\t\t\t\tonFocus={() => {\n+\t\t\t\t\t\t\t\tconst customMode = findModeBySlug(visualMode, customModes)\n+\t\t\t\t\t\t\t\tconst prompt = customModePrompts?.[visualMode] as PromptComponent\n+\t\t\t\t\t\t\t\tconst currentValue = customMode?.roleDefinition ??\n+\t\t\t\t\t\t\t\t\tprompt?.roleDefinition ??\n+\t\t\t\t\t\t\t\t\tgetRoleDefinition(visualMode)\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\tsetCurrentEditingModeSlug(visualMode)\n+\t\t\t\t\t\t\t\tsetCurrentEditingField(\"roleDefinition\")\n+\t\t\t\t\t\t\t\tsetLocalModeRoleDefinition(currentValue)\n+\t\t\t\t\t\t\t}}\n \t\t\t\t\t\t\tonChange={(e) => {\n \t\t\t\t\t\t\t\tconst value =",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2216043083",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5856,
        "pr_file": "webview-ui/src/components/modes/ModesView.tsx",
        "discussion_id": "2216043083",
        "commented_code": "@@ -825,30 +835,58 @@ const ModesView = ({ onDone }: ModesViewProps) => {\n \t\t\t\t\t\t\tvalue={(() => {\n \t\t\t\t\t\t\t\tconst customMode = findModeBySlug(visualMode, customModes)\n \t\t\t\t\t\t\t\tconst prompt = customModePrompts?.[visualMode] as PromptComponent\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\t// Use local state if currently editing this field\n+\t\t\t\t\t\t\t\tif (currentEditingField === \"roleDefinition\" && currentEditingModeSlug === visualMode) {\n+\t\t\t\t\t\t\t\t\treturn localModeRoleDefinition\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\t\treturn (\n \t\t\t\t\t\t\t\t\tcustomMode?.roleDefinition ??\n \t\t\t\t\t\t\t\t\tprompt?.roleDefinition ??\n \t\t\t\t\t\t\t\t\tgetRoleDefinition(visualMode)\n \t\t\t\t\t\t\t\t)\n \t\t\t\t\t\t\t})()}\n+\t\t\t\t\t\t\tonFocus={() => {\n+\t\t\t\t\t\t\t\tconst customMode = findModeBySlug(visualMode, customModes)\n+\t\t\t\t\t\t\t\tconst prompt = customModePrompts?.[visualMode] as PromptComponent\n+\t\t\t\t\t\t\t\tconst currentValue = customMode?.roleDefinition ??\n+\t\t\t\t\t\t\t\t\tprompt?.roleDefinition ??\n+\t\t\t\t\t\t\t\t\tgetRoleDefinition(visualMode)\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\tsetCurrentEditingModeSlug(visualMode)\n+\t\t\t\t\t\t\t\tsetCurrentEditingField(\"roleDefinition\")\n+\t\t\t\t\t\t\t\tsetLocalModeRoleDefinition(currentValue)\n+\t\t\t\t\t\t\t}}\n \t\t\t\t\t\t\tonChange={(e) => {\n \t\t\t\t\t\t\t\tconst value =",
        "comment_created_at": "2025-07-18T13:25:31+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "There\u2019s a repeated pattern for extracting the new value from events: ' (e as unknown as CustomEvent)?.detail?.target?.value || ((e as any).target as HTMLTextAreaElement).value '. Consider extracting this logic to a small helper function to reduce repetition and improve readability.\n\n<sup>This comment was generated because it violated a code review rule: [irule_tTqpIuNs8DV0QFGj](https://app.ellipsis.dev/RooCodeInc/code-review/rules?id=irule_tTqpIuNs8DV0QFGj).</sup>",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2208109355",
    "pr_number": 5538,
    "pr_file": "webview-ui/src/components/chat/ChatTextArea.tsx",
    "created_at": "2025-07-15T17:21:55+00:00",
    "commented_code": "const placeholderBottomText = `\n(${t(\"chat:addContext\")}${shouldDisableImages ? `, ${t(\"chat:dragFiles\")}` : `, ${t(\"chat:dragFilesImages\")}`})`\n \n+\t\t// Common mode selector handler\n+\t\tconst handleModeChange = useCallback(\n+\t\t\t(value: Mode) => {\n+\t\t\t\tsetMode(value)\n+\t\t\t\tvscode.postMessage({ type: \"mode\", text: value })\n+\t\t\t},\n+\t\t\t[setMode],\n+\t\t)\n+\n+\t\t// Helper function to render mode selector\n+\t\tconst renderModeSelector = () => (\n+\t\t\t<ModeSelector\n+\t\t\t\tvalue={mode}\n+\t\t\t\ttitle={t(\"chat:selectMode\")}\n+\t\t\t\tonChange={handleModeChange}\n+\t\t\t\ttriggerClassName=\"w-full\"\n+\t\t\t\tmodeShortcutText={modeShortcutText}\n+\t\t\t\tcustomModes={customModes}\n+\t\t\t\tcustomModePrompts={customModePrompts}\n+\t\t\t/>\n+\t\t)\n+\n+\t\t// Helper function to render edit mode controls\n+\t\tconst renderEditModeControls = () => (\n+\t\t\t<div\n+\t\t\t\tclassName={cn(\n+\t\t\t\t\t\"flex\",\n+\t\t\t\t\t\"items-center\",\n+\t\t\t\t\t\"justify-between\",\n+\t\t\t\t\t\"absolute\",\n+\t\t\t\t\t\"bottom-2\",\n+\t\t\t\t\t\"left-2\",\n+\t\t\t\t\t\"right-2\",\n+\t\t\t\t\t\"z-30\",\n+\t\t\t\t)}>\n+\t\t\t\t<div className={cn(\"flex\", \"items-center\", \"gap-1\", \"flex-1\", \"min-w-0\")}>\n+\t\t\t\t\t<div className=\"shrink-0\">{renderModeSelector()}</div>\n+\t\t\t\t</div>\n+\t\t\t\t<div className={cn(\"flex\", \"items-center\", \"gap-0.5\", \"shrink-0\", \"ml-2\")}>\n+\t\t\t\t\t<Button\n+\t\t\t\t\t\tvariant=\"secondary\"\n+\t\t\t\t\t\tsize=\"sm\"\n+\t\t\t\t\t\tonClick={onCancel}\n+\t\t\t\t\t\tdisabled={sendingDisabled}\n+\t\t\t\t\t\tclassName=\"text-xs bg-vscode-toolbar-hoverBackground hover:bg-vscode-button-secondaryBackground text-vscode-button-secondaryForeground\">\n+\t\t\t\t\t\tCancel\n+\t\t\t\t\t</Button>\n+\t\t\t\t\t<StandardTooltip content={t(\"chat:addImages\")}>\n+\t\t\t\t\t\t<button\n+\t\t\t\t\t\t\taria-label={t(\"chat:addImages\")}\n+\t\t\t\t\t\t\tdisabled={shouldDisableImages}\n+\t\t\t\t\t\t\tonClick={!shouldDisableImages ? onSelectImages : undefined}\n+\t\t\t\t\t\t\tclassName={cn(\n+\t\t\t\t\t\t\t\t\"relative inline-flex items-center justify-center\",\n+\t\t\t\t\t\t\t\t\"bg-transparent border-none p-1.5\",\n+\t\t\t\t\t\t\t\t\"rounded-md min-w-[28px] min-h-[28px]\",\n+\t\t\t\t\t\t\t\t\"opacity-60 hover:opacity-100 text-vscode-descriptionForeground hover:text-vscode-foreground\",\n+\t\t\t\t\t\t\t\t\"transition-all duration-150\",\n+\t\t\t\t\t\t\t\t\"hover:bg-[rgba(255,255,255,0.03)] hover:border-[rgba(255,255,255,0.15)]\",\n+\t\t\t\t\t\t\t\t\"focus:outline-none focus-visible:ring-1 focus-visible:ring-vscode-focusBorder\",\n+\t\t\t\t\t\t\t\t\"active:bg-[rgba(255,255,255,0.1)]\",\n+\t\t\t\t\t\t\t\t!shouldDisableImages && \"cursor-pointer\",\n+\t\t\t\t\t\t\t\tshouldDisableImages &&\n+\t\t\t\t\t\t\t\t\t\"opacity-40 cursor-not-allowed grayscale-[30%] hover:bg-transparent hover:border-[rgba(255,255,255,0.08)] active:bg-transparent\",\n+\t\t\t\t\t\t\t)}>\n+\t\t\t\t\t\t\t<Image className=\"w-4 h-4\" />\n+\t\t\t\t\t\t</button>\n+\t\t\t\t\t</StandardTooltip>\n+\t\t\t\t\t<StandardTooltip content={t(\"chat:save.tooltip\")}>\n+\t\t\t\t\t\t<button\n+\t\t\t\t\t\t\taria-label={t(\"chat:save.tooltip\")}\n+\t\t\t\t\t\t\tdisabled={sendingDisabled}\n+\t\t\t\t\t\t\tonClick={!sendingDisabled ? onSend : undefined}\n+\t\t\t\t\t\t\tclassName={cn(\n+\t\t\t\t\t\t\t\t\"relative inline-flex items-center justify-center\",\n+\t\t\t\t\t\t\t\t\"bg-transparent border-none p-1.5\",\n+\t\t\t\t\t\t\t\t\"rounded-md min-w-[28px] min-h-[28px]\",\n+\t\t\t\t\t\t\t\t\"opacity-60 hover:opacity-100 text-vscode-descriptionForeground hover:text-vscode-foreground\",\n+\t\t\t\t\t\t\t\t\"transition-all duration-150\",\n+\t\t\t\t\t\t\t\t\"hover:bg-[rgba(255,255,255,0.03)] hover:border-[rgba(255,255,255,0.15)]\",\n+\t\t\t\t\t\t\t\t\"focus:outline-none focus-visible:ring-1 focus-visible:ring-vscode-focusBorder\",\n+\t\t\t\t\t\t\t\t\"active:bg-[rgba(255,255,255,0.1)]\",\n+\t\t\t\t\t\t\t\t!sendingDisabled && \"cursor-pointer\",\n+\t\t\t\t\t\t\t\tsendingDisabled &&\n+\t\t\t\t\t\t\t\t\t\"opacity-40 cursor-not-allowed grayscale-[30%] hover:bg-transparent hover:border-[rgba(255,255,255,0.08)] active:bg-transparent\",\n+\t\t\t\t\t\t\t)}>\n+\t\t\t\t\t\t\t<SendHorizontal className=\"w-4 h-4\" />\n+\t\t\t\t\t\t</button>\n+\t\t\t\t\t</StandardTooltip>\n+\t\t\t\t</div>\n+\t\t\t</div>\n+\t\t)",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2208109355",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5538,
        "pr_file": "webview-ui/src/components/chat/ChatTextArea.tsx",
        "discussion_id": "2208109355",
        "commented_code": "@@ -779,6 +784,449 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(\n \n \t\tconst placeholderBottomText = `\\n(${t(\"chat:addContext\")}${shouldDisableImages ? `, ${t(\"chat:dragFiles\")}` : `, ${t(\"chat:dragFilesImages\")}`})`\n \n+\t\t// Common mode selector handler\n+\t\tconst handleModeChange = useCallback(\n+\t\t\t(value: Mode) => {\n+\t\t\t\tsetMode(value)\n+\t\t\t\tvscode.postMessage({ type: \"mode\", text: value })\n+\t\t\t},\n+\t\t\t[setMode],\n+\t\t)\n+\n+\t\t// Helper function to render mode selector\n+\t\tconst renderModeSelector = () => (\n+\t\t\t<ModeSelector\n+\t\t\t\tvalue={mode}\n+\t\t\t\ttitle={t(\"chat:selectMode\")}\n+\t\t\t\tonChange={handleModeChange}\n+\t\t\t\ttriggerClassName=\"w-full\"\n+\t\t\t\tmodeShortcutText={modeShortcutText}\n+\t\t\t\tcustomModes={customModes}\n+\t\t\t\tcustomModePrompts={customModePrompts}\n+\t\t\t/>\n+\t\t)\n+\n+\t\t// Helper function to render edit mode controls\n+\t\tconst renderEditModeControls = () => (\n+\t\t\t<div\n+\t\t\t\tclassName={cn(\n+\t\t\t\t\t\"flex\",\n+\t\t\t\t\t\"items-center\",\n+\t\t\t\t\t\"justify-between\",\n+\t\t\t\t\t\"absolute\",\n+\t\t\t\t\t\"bottom-2\",\n+\t\t\t\t\t\"left-2\",\n+\t\t\t\t\t\"right-2\",\n+\t\t\t\t\t\"z-30\",\n+\t\t\t\t)}>\n+\t\t\t\t<div className={cn(\"flex\", \"items-center\", \"gap-1\", \"flex-1\", \"min-w-0\")}>\n+\t\t\t\t\t<div className=\"shrink-0\">{renderModeSelector()}</div>\n+\t\t\t\t</div>\n+\t\t\t\t<div className={cn(\"flex\", \"items-center\", \"gap-0.5\", \"shrink-0\", \"ml-2\")}>\n+\t\t\t\t\t<Button\n+\t\t\t\t\t\tvariant=\"secondary\"\n+\t\t\t\t\t\tsize=\"sm\"\n+\t\t\t\t\t\tonClick={onCancel}\n+\t\t\t\t\t\tdisabled={sendingDisabled}\n+\t\t\t\t\t\tclassName=\"text-xs bg-vscode-toolbar-hoverBackground hover:bg-vscode-button-secondaryBackground text-vscode-button-secondaryForeground\">\n+\t\t\t\t\t\tCancel\n+\t\t\t\t\t</Button>\n+\t\t\t\t\t<StandardTooltip content={t(\"chat:addImages\")}>\n+\t\t\t\t\t\t<button\n+\t\t\t\t\t\t\taria-label={t(\"chat:addImages\")}\n+\t\t\t\t\t\t\tdisabled={shouldDisableImages}\n+\t\t\t\t\t\t\tonClick={!shouldDisableImages ? onSelectImages : undefined}\n+\t\t\t\t\t\t\tclassName={cn(\n+\t\t\t\t\t\t\t\t\"relative inline-flex items-center justify-center\",\n+\t\t\t\t\t\t\t\t\"bg-transparent border-none p-1.5\",\n+\t\t\t\t\t\t\t\t\"rounded-md min-w-[28px] min-h-[28px]\",\n+\t\t\t\t\t\t\t\t\"opacity-60 hover:opacity-100 text-vscode-descriptionForeground hover:text-vscode-foreground\",\n+\t\t\t\t\t\t\t\t\"transition-all duration-150\",\n+\t\t\t\t\t\t\t\t\"hover:bg-[rgba(255,255,255,0.03)] hover:border-[rgba(255,255,255,0.15)]\",\n+\t\t\t\t\t\t\t\t\"focus:outline-none focus-visible:ring-1 focus-visible:ring-vscode-focusBorder\",\n+\t\t\t\t\t\t\t\t\"active:bg-[rgba(255,255,255,0.1)]\",\n+\t\t\t\t\t\t\t\t!shouldDisableImages && \"cursor-pointer\",\n+\t\t\t\t\t\t\t\tshouldDisableImages &&\n+\t\t\t\t\t\t\t\t\t\"opacity-40 cursor-not-allowed grayscale-[30%] hover:bg-transparent hover:border-[rgba(255,255,255,0.08)] active:bg-transparent\",\n+\t\t\t\t\t\t\t)}>\n+\t\t\t\t\t\t\t<Image className=\"w-4 h-4\" />\n+\t\t\t\t\t\t</button>\n+\t\t\t\t\t</StandardTooltip>\n+\t\t\t\t\t<StandardTooltip content={t(\"chat:save.tooltip\")}>\n+\t\t\t\t\t\t<button\n+\t\t\t\t\t\t\taria-label={t(\"chat:save.tooltip\")}\n+\t\t\t\t\t\t\tdisabled={sendingDisabled}\n+\t\t\t\t\t\t\tonClick={!sendingDisabled ? onSend : undefined}\n+\t\t\t\t\t\t\tclassName={cn(\n+\t\t\t\t\t\t\t\t\"relative inline-flex items-center justify-center\",\n+\t\t\t\t\t\t\t\t\"bg-transparent border-none p-1.5\",\n+\t\t\t\t\t\t\t\t\"rounded-md min-w-[28px] min-h-[28px]\",\n+\t\t\t\t\t\t\t\t\"opacity-60 hover:opacity-100 text-vscode-descriptionForeground hover:text-vscode-foreground\",\n+\t\t\t\t\t\t\t\t\"transition-all duration-150\",\n+\t\t\t\t\t\t\t\t\"hover:bg-[rgba(255,255,255,0.03)] hover:border-[rgba(255,255,255,0.15)]\",\n+\t\t\t\t\t\t\t\t\"focus:outline-none focus-visible:ring-1 focus-visible:ring-vscode-focusBorder\",\n+\t\t\t\t\t\t\t\t\"active:bg-[rgba(255,255,255,0.1)]\",\n+\t\t\t\t\t\t\t\t!sendingDisabled && \"cursor-pointer\",\n+\t\t\t\t\t\t\t\tsendingDisabled &&\n+\t\t\t\t\t\t\t\t\t\"opacity-40 cursor-not-allowed grayscale-[30%] hover:bg-transparent hover:border-[rgba(255,255,255,0.08)] active:bg-transparent\",\n+\t\t\t\t\t\t\t)}>\n+\t\t\t\t\t\t\t<SendHorizontal className=\"w-4 h-4\" />\n+\t\t\t\t\t\t</button>\n+\t\t\t\t\t</StandardTooltip>\n+\t\t\t\t</div>\n+\t\t\t</div>\n+\t\t)",
        "comment_created_at": "2025-07-15T17:21:55+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "The edit mode rendering logic is quite complex with multiple helper functions. Consider extracting the edit mode UI into a separate component for better maintainability:\n\n```typescript\nconst EditModeControls: React.FC<EditModeControlsProps> = ({ ... }) => {\n  // Edit mode specific UI logic\n};\n```\n\nThis would simplify the main component and make the code more modular.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2207247338",
    "pr_number": 5732,
    "pr_file": "webview-ui/src/App.tsx",
    "created_at": "2025-07-15T11:37:41+00:00",
    "commented_code": "// Do not conditionally load ChatView, it's expensive and there's state we\n \t// don't want to lose (user input, disableInput, askResponse promise, etc.)\n \treturn showWelcome ? (\n-\t\t<WelcomeView />\n+\t\t<ErrorBoundary componentName=\"WelcomeView\">\n+\t\t\t<WelcomeView />\n+\t\t</ErrorBoundary>\n \t) : (\n \t\t<>\n-\t\t\t{tab === \"modes\" && <ModesView onDone={() => switchTab(\"chat\")} />}\n-\t\t\t{tab === \"mcp\" && <McpView onDone={() => switchTab(\"chat\")} />}\n-\t\t\t{tab === \"history\" && <HistoryView onDone={() => switchTab(\"chat\")} />}\n+\t\t\t{tab === \"modes\" && (\n+\t\t\t\t<ErrorBoundary componentName=\"ModesView\">\n+\t\t\t\t\t<ModesView onDone={() => switchTab(\"chat\")} />\n+\t\t\t\t</ErrorBoundary>\n+\t\t\t)}\n+\t\t\t{tab === \"mcp\" && (\n+\t\t\t\t<ErrorBoundary componentName=\"McpView\">\n+\t\t\t\t\t<McpView onDone={() => switchTab(\"chat\")} />\n+\t\t\t\t</ErrorBoundary>\n+\t\t\t)}\n+\t\t\t{tab === \"history\" && (\n+\t\t\t\t<ErrorBoundary componentName=\"HistoryView\">\n+\t\t\t\t\t<HistoryView onDone={() => switchTab(\"chat\")} />\n+\t\t\t\t</ErrorBoundary>\n+\t\t\t)}\n \t\t\t{tab === \"settings\" && (\n-\t\t\t\t<SettingsView ref={settingsRef} onDone={() => setTab(\"chat\")} targetSection={currentSection} />\n+\t\t\t\t<ErrorBoundary componentName=\"SettingsView\">\n+\t\t\t\t\t<SettingsView ref={settingsRef} onDone={() => setTab(\"chat\")} targetSection={currentSection} />\n+\t\t\t\t</ErrorBoundary>\n \t\t\t)}\n \t\t\t{tab === \"marketplace\" && (\n-\t\t\t\t<MarketplaceView\n-\t\t\t\t\tstateManager={marketplaceStateManager}\n-\t\t\t\t\tonDone={() => switchTab(\"chat\")}\n-\t\t\t\t\ttargetTab={currentMarketplaceTab as \"mcp\" | \"mode\" | undefined}\n-\t\t\t\t/>\n+\t\t\t\t<ErrorBoundary componentName=\"MarketplaceView\">\n+\t\t\t\t\t<MarketplaceView\n+\t\t\t\t\t\tstateManager={marketplaceStateManager}\n+\t\t\t\t\t\tonDone={() => switchTab(\"chat\")}\n+\t\t\t\t\t\ttargetTab={currentMarketplaceTab as \"mcp\" | \"mode\" | undefined}\n+\t\t\t\t\t/>\n+\t\t\t\t</ErrorBoundary>\n \t\t\t)}\n \t\t\t{tab === \"account\" && (\n-\t\t\t\t<AccountView\n-\t\t\t\t\tuserInfo={cloudUserInfo}\n-\t\t\t\t\tisAuthenticated={cloudIsAuthenticated}\n-\t\t\t\t\tcloudApiUrl={cloudApiUrl}\n-\t\t\t\t\tonDone={() => switchTab(\"chat\")}\n-\t\t\t\t/>\n+\t\t\t\t<ErrorBoundary componentName=\"AccountView\">\n+\t\t\t\t\t<AccountView\n+\t\t\t\t\t\tuserInfo={cloudUserInfo}\n+\t\t\t\t\t\tisAuthenticated={cloudIsAuthenticated}\n+\t\t\t\t\t\tcloudApiUrl={cloudApiUrl}\n+\t\t\t\t\t\tonDone={() => switchTab(\"chat\")}\n+\t\t\t\t\t/>\n+\t\t\t\t</ErrorBoundary>\n \t\t\t)}\n-\t\t\t<ChatView\n-\t\t\t\tref={chatViewRef}\n-\t\t\t\tisHidden={tab !== \"chat\"}\n-\t\t\t\tshowAnnouncement={showAnnouncement}\n-\t\t\t\thideAnnouncement={() => setShowAnnouncement(false)}\n-\t\t\t/>\n-\t\t\t<HumanRelayDialog\n-\t\t\t\tisOpen={humanRelayDialogState.isOpen}\n-\t\t\t\trequestId={humanRelayDialogState.requestId}\n-\t\t\t\tpromptText={humanRelayDialogState.promptText}\n-\t\t\t\tonClose={() => setHumanRelayDialogState((prev) => ({ ...prev, isOpen: false }))}\n-\t\t\t\tonSubmit={(requestId, text) => vscode.postMessage({ type: \"humanRelayResponse\", requestId, text })}\n-\t\t\t\tonCancel={(requestId) => vscode.postMessage({ type: \"humanRelayCancel\", requestId })}\n-\t\t\t/>\n+\t\t\t<ErrorBoundary componentName=\"ChatView\">\n+\t\t\t\t<ChatView\n+\t\t\t\t\tref={chatViewRef}\n+\t\t\t\t\tisHidden={tab !== \"chat\"}\n+\t\t\t\t\tshowAnnouncement={showAnnouncement}\n+\t\t\t\t\thideAnnouncement={() => setShowAnnouncement(false)}\n+\t\t\t\t/>\n+\t\t\t</ErrorBoundary>\n+\t\t\t<ErrorBoundary componentName=\"HumanRelayDialog\">\n+\t\t\t\t<HumanRelayDialog\n+\t\t\t\t\tisOpen={humanRelayDialogState.isOpen}\n+\t\t\t\t\trequestId={humanRelayDialogState.requestId}\n+\t\t\t\t\tpromptText={humanRelayDialogState.promptText}\n+\t\t\t\t\tonClose={() => setHumanRelayDialogState((prev) => ({ ...prev, isOpen: false }))}\n+\t\t\t\t\tonSubmit={(requestId, text) => vscode.postMessage({ type: \"humanRelayResponse\", requestId, text })}\n+\t\t\t\t\tonCancel={(requestId) => vscode.postMessage({ type: \"humanRelayCancel\", requestId })}\n+\t\t\t\t/>\n+\t\t\t</ErrorBoundary>",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2207247338",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5732,
        "pr_file": "webview-ui/src/App.tsx",
        "discussion_id": "2207247338",
        "commented_code": "@@ -169,60 +170,86 @@ const App = () => {\n \t// Do not conditionally load ChatView, it's expensive and there's state we\n \t// don't want to lose (user input, disableInput, askResponse promise, etc.)\n \treturn showWelcome ? (\n-\t\t<WelcomeView />\n+\t\t<ErrorBoundary componentName=\"WelcomeView\">\n+\t\t\t<WelcomeView />\n+\t\t</ErrorBoundary>\n \t) : (\n \t\t<>\n-\t\t\t{tab === \"modes\" && <ModesView onDone={() => switchTab(\"chat\")} />}\n-\t\t\t{tab === \"mcp\" && <McpView onDone={() => switchTab(\"chat\")} />}\n-\t\t\t{tab === \"history\" && <HistoryView onDone={() => switchTab(\"chat\")} />}\n+\t\t\t{tab === \"modes\" && (\n+\t\t\t\t<ErrorBoundary componentName=\"ModesView\">\n+\t\t\t\t\t<ModesView onDone={() => switchTab(\"chat\")} />\n+\t\t\t\t</ErrorBoundary>\n+\t\t\t)}\n+\t\t\t{tab === \"mcp\" && (\n+\t\t\t\t<ErrorBoundary componentName=\"McpView\">\n+\t\t\t\t\t<McpView onDone={() => switchTab(\"chat\")} />\n+\t\t\t\t</ErrorBoundary>\n+\t\t\t)}\n+\t\t\t{tab === \"history\" && (\n+\t\t\t\t<ErrorBoundary componentName=\"HistoryView\">\n+\t\t\t\t\t<HistoryView onDone={() => switchTab(\"chat\")} />\n+\t\t\t\t</ErrorBoundary>\n+\t\t\t)}\n \t\t\t{tab === \"settings\" && (\n-\t\t\t\t<SettingsView ref={settingsRef} onDone={() => setTab(\"chat\")} targetSection={currentSection} />\n+\t\t\t\t<ErrorBoundary componentName=\"SettingsView\">\n+\t\t\t\t\t<SettingsView ref={settingsRef} onDone={() => setTab(\"chat\")} targetSection={currentSection} />\n+\t\t\t\t</ErrorBoundary>\n \t\t\t)}\n \t\t\t{tab === \"marketplace\" && (\n-\t\t\t\t<MarketplaceView\n-\t\t\t\t\tstateManager={marketplaceStateManager}\n-\t\t\t\t\tonDone={() => switchTab(\"chat\")}\n-\t\t\t\t\ttargetTab={currentMarketplaceTab as \"mcp\" | \"mode\" | undefined}\n-\t\t\t\t/>\n+\t\t\t\t<ErrorBoundary componentName=\"MarketplaceView\">\n+\t\t\t\t\t<MarketplaceView\n+\t\t\t\t\t\tstateManager={marketplaceStateManager}\n+\t\t\t\t\t\tonDone={() => switchTab(\"chat\")}\n+\t\t\t\t\t\ttargetTab={currentMarketplaceTab as \"mcp\" | \"mode\" | undefined}\n+\t\t\t\t\t/>\n+\t\t\t\t</ErrorBoundary>\n \t\t\t)}\n \t\t\t{tab === \"account\" && (\n-\t\t\t\t<AccountView\n-\t\t\t\t\tuserInfo={cloudUserInfo}\n-\t\t\t\t\tisAuthenticated={cloudIsAuthenticated}\n-\t\t\t\t\tcloudApiUrl={cloudApiUrl}\n-\t\t\t\t\tonDone={() => switchTab(\"chat\")}\n-\t\t\t\t/>\n+\t\t\t\t<ErrorBoundary componentName=\"AccountView\">\n+\t\t\t\t\t<AccountView\n+\t\t\t\t\t\tuserInfo={cloudUserInfo}\n+\t\t\t\t\t\tisAuthenticated={cloudIsAuthenticated}\n+\t\t\t\t\t\tcloudApiUrl={cloudApiUrl}\n+\t\t\t\t\t\tonDone={() => switchTab(\"chat\")}\n+\t\t\t\t\t/>\n+\t\t\t\t</ErrorBoundary>\n \t\t\t)}\n-\t\t\t<ChatView\n-\t\t\t\tref={chatViewRef}\n-\t\t\t\tisHidden={tab !== \"chat\"}\n-\t\t\t\tshowAnnouncement={showAnnouncement}\n-\t\t\t\thideAnnouncement={() => setShowAnnouncement(false)}\n-\t\t\t/>\n-\t\t\t<HumanRelayDialog\n-\t\t\t\tisOpen={humanRelayDialogState.isOpen}\n-\t\t\t\trequestId={humanRelayDialogState.requestId}\n-\t\t\t\tpromptText={humanRelayDialogState.promptText}\n-\t\t\t\tonClose={() => setHumanRelayDialogState((prev) => ({ ...prev, isOpen: false }))}\n-\t\t\t\tonSubmit={(requestId, text) => vscode.postMessage({ type: \"humanRelayResponse\", requestId, text })}\n-\t\t\t\tonCancel={(requestId) => vscode.postMessage({ type: \"humanRelayCancel\", requestId })}\n-\t\t\t/>\n+\t\t\t<ErrorBoundary componentName=\"ChatView\">\n+\t\t\t\t<ChatView\n+\t\t\t\t\tref={chatViewRef}\n+\t\t\t\t\tisHidden={tab !== \"chat\"}\n+\t\t\t\t\tshowAnnouncement={showAnnouncement}\n+\t\t\t\t\thideAnnouncement={() => setShowAnnouncement(false)}\n+\t\t\t\t/>\n+\t\t\t</ErrorBoundary>\n+\t\t\t<ErrorBoundary componentName=\"HumanRelayDialog\">\n+\t\t\t\t<HumanRelayDialog\n+\t\t\t\t\tisOpen={humanRelayDialogState.isOpen}\n+\t\t\t\t\trequestId={humanRelayDialogState.requestId}\n+\t\t\t\t\tpromptText={humanRelayDialogState.promptText}\n+\t\t\t\t\tonClose={() => setHumanRelayDialogState((prev) => ({ ...prev, isOpen: false }))}\n+\t\t\t\t\tonSubmit={(requestId, text) => vscode.postMessage({ type: \"humanRelayResponse\", requestId, text })}\n+\t\t\t\t\tonCancel={(requestId) => vscode.postMessage({ type: \"humanRelayCancel\", requestId })}\n+\t\t\t\t/>\n+\t\t\t</ErrorBoundary>",
        "comment_created_at": "2025-07-15T11:37:41+00:00",
        "comment_author": "elianiva",
        "comment_body": "A cleaner pattern would be to just use the HoC so we don't need to litter the existing markup with a bunch of wrappers, the wrapping happens on component's file export\r\n\r\nInstead of `export default Component` we'd do `export default withErrorBoundary(Component)` instead. That could be customised so we don't have repeated logic, all of the magic happens inside `withErroBoundary` wrapper.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2182961009",
    "pr_number": 5368,
    "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
    "created_at": "2025-07-03T14:36:56+00:00",
    "commented_code": "if (messagesRef.current.length === 0) {\n \t\t\t\t\tvscode.postMessage({ type: \"newTask\", text, images })\n \t\t\t\t} else if (clineAskRef.current) {\n+\t\t\t\t\t// Clear auto-approval timeout when user sends a message for follow-up questions\n+\t\t\t\t\t// This ensures the countdown timer is properly dismounted when users submit custom responses\n+\t\t\t\t\tif (clineAskRef.current === \"followup\") {\n+\t\t\t\t\t\tif (autoApproveTimeoutRef.current) {\n+\t\t\t\t\t\t\tclearTimeout(autoApproveTimeoutRef.current)\n+\t\t\t\t\t\t\tautoApproveTimeoutRef.current = null\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t// Mark the current follow-up question as answered\n+\t\t\t\t\t\tconst lastFollowUpMessage = messagesRef.current.findLast((msg) => msg.ask === \"followup\")\n+\t\t\t\t\t\tif (lastFollowUpMessage) {\n+\t\t\t\t\t\t\tsetFollowUpAnswered((prev) => new Set(prev).add(lastFollowUpMessage.ts))",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2182961009",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5368,
        "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
        "discussion_id": "2182961009",
        "commented_code": "@@ -507,6 +515,21 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro\n \t\t\t\tif (messagesRef.current.length === 0) {\n \t\t\t\t\tvscode.postMessage({ type: \"newTask\", text, images })\n \t\t\t\t} else if (clineAskRef.current) {\n+\t\t\t\t\t// Clear auto-approval timeout when user sends a message for follow-up questions\n+\t\t\t\t\t// This ensures the countdown timer is properly dismounted when users submit custom responses\n+\t\t\t\t\tif (clineAskRef.current === \"followup\") {\n+\t\t\t\t\t\tif (autoApproveTimeoutRef.current) {\n+\t\t\t\t\t\t\tclearTimeout(autoApproveTimeoutRef.current)\n+\t\t\t\t\t\t\tautoApproveTimeoutRef.current = null\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t// Mark the current follow-up question as answered\n+\t\t\t\t\t\tconst lastFollowUpMessage = messagesRef.current.findLast((msg) => msg.ask === \"followup\")\n+\t\t\t\t\t\tif (lastFollowUpMessage) {\n+\t\t\t\t\t\t\tsetFollowUpAnswered((prev) => new Set(prev).add(lastFollowUpMessage.ts))",
        "comment_created_at": "2025-07-03T14:36:56+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "Could you extract this logic into a shared function to avoid duplication? The same pattern appears in `handleSuggestionClickInRow`. Something like:\n\n```typescript\nconst markFollowUpAsAnswered = useCallback(() => {\n  const lastFollowUpMessage = messagesRef.current.findLast((msg) => msg.ask === \"followup\")\n  if (lastFollowUpMessage) {\n    setFollowUpAnswered((prev) => new Set(prev).add(lastFollowUpMessage.ts))\n  }\n}, [])\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2112890241",
    "pr_number": 4072,
    "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
    "created_at": "2025-05-28T22:51:44+00:00",
    "commented_code": "}\n \t\t\t\t\t\t\tbreak\n \t\t\t\t\t\tcase \"focusInput\":\n-\t\t\t\t\t\t\ttextAreaRef.current?.focus()\n+\t\t\t\t\t\t\tif (focusTimeoutRef.current) {\n+\t\t\t\t\t\t\t\tclearTimeout(focusTimeoutRef.current)\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tfocusTimeoutRef.current = setTimeout(() => {",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2112890241",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 4072,
        "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
        "discussion_id": "2112890241",
        "commented_code": "@@ -587,7 +588,20 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\tbreak\n \t\t\t\t\t\tcase \"focusInput\":\n-\t\t\t\t\t\t\ttextAreaRef.current?.focus()\n+\t\t\t\t\t\t\tif (focusTimeoutRef.current) {\n+\t\t\t\t\t\t\t\tclearTimeout(focusTimeoutRef.current)\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tfocusTimeoutRef.current = setTimeout(() => {",
        "comment_created_at": "2025-05-28T22:51:44+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "Since there's timeout logic here as well similar to what's on ClineProvider. Have you considered extracting this into a shared utility function or hook? Something like `useDebouncedFocus()` could handle the timeout.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2160443705",
    "pr_number": 4917,
    "pr_file": "webview-ui/src/components/modes/McpSelector.tsx",
    "created_at": "2025-06-22T19:30:05+00:00",
    "commented_code": "+import React, { useState, useRef, useEffect } from \"react\"\n+import { ChevronsUpDown, X } from \"lucide-react\"\n+import { VSCodeCheckbox } from \"@vscode/webview-ui-toolkit/react\"\n+import {\n+\tPopover,\n+\tPopoverContent,\n+\tPopoverTrigger,\n+\tButton,\n+\tCommand,\n+\tCommandInput,\n+\tCommandList,\n+\tCommandEmpty,\n+\tCommandGroup,\n+\tCommandItem,\n+} from \"@src/components/ui\"\n+import { useAppTranslation } from \"@src/i18n/TranslationContext\"\n+import { ModeConfig, GroupEntry, GroupOptions } from \"@roo-code/types\"\n+\n+type McpServer = {\n+\tname: string\n+\t[key: string]: any\n+}\n+\n+interface McpSelectorProps {\n+\tgroup: string\n+\tisEnabled: boolean\n+\tisCustomMode: boolean\n+\tmcpServers: McpServer[]\n+\tcurrentMode?: ModeConfig\n+\tvisualMode: string\n+\tcustomModes: ModeConfig[]\n+\tfindModeBySlug: (slug: string, modes: ModeConfig[]) => ModeConfig | undefined\n+\tupdateCustomMode: (slug: string, config: ModeConfig) => void\n+}\n+\n+const McpSelector: React.FC<McpSelectorProps> = ({\n+\tgroup,\n+\tisEnabled,\n+\tisCustomMode,\n+\tmcpServers,\n+\tcurrentMode,\n+\tvisualMode,\n+\tcustomModes,\n+\tfindModeBySlug,\n+\tupdateCustomMode,\n+}) => {\n+\tconst { t } = useAppTranslation()\n+\n+\t// State\n+\tconst [isDialogOpen, setIsDialogOpen] = useState(false)\n+\tconst [allowedMcpList, setAllowedMcpList] = useState<string[]>([])\n+\tconst [deniedMcpList, setDeniedMcpList] = useState<string[]>([])\n+\tconst [searchValue, setSearchValue] = useState(\"\")\n+\tconst searchInputRef = useRef<HTMLInputElement | null>(null)\n+\n+\t// Sync MCP settings\n+\tuseEffect(() => {\n+\t\tif (!currentMode) {\n+\t\t\tsetAllowedMcpList([])\n+\t\t\tsetDeniedMcpList([])\n+\t\t\treturn\n+\t\t}\n+\n+\t\tconst mcpGroupArr = currentMode.groups?.find(\n+\t\t\t(g: GroupEntry): g is [\"mcp\", GroupOptions] => Array.isArray(g) && g.length === 2 && g[0] === \"mcp\",\n+\t\t)\n+\n+\t\tconst rawGroupOptions: GroupOptions | undefined = mcpGroupArr ? mcpGroupArr[1] : undefined\n+\n+\t\tconst optionsToUse = {\n+\t\t\tallowedMcpList: rawGroupOptions?.allowedMcpList || [],\n+\t\t\tdeniedMcpList: rawGroupOptions?.deniedMcpList || [],\n+\t\t}\n+\n+\t\t// Sync MCP settings when mode changes\n+\t\tsetAllowedMcpList(optionsToUse.allowedMcpList)\n+\t\tsetDeniedMcpList(optionsToUse.deniedMcpList)\n+\t}, [currentMode])\n+\t// Handle save\n+\t// Migrate handleSaveMcpList logic here\n+\tconst handleSave = () => {",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2160443705",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 4917,
        "pr_file": "webview-ui/src/components/modes/McpSelector.tsx",
        "discussion_id": "2160443705",
        "commented_code": "@@ -0,0 +1,319 @@\n+import React, { useState, useRef, useEffect } from \"react\"\n+import { ChevronsUpDown, X } from \"lucide-react\"\n+import { VSCodeCheckbox } from \"@vscode/webview-ui-toolkit/react\"\n+import {\n+\tPopover,\n+\tPopoverContent,\n+\tPopoverTrigger,\n+\tButton,\n+\tCommand,\n+\tCommandInput,\n+\tCommandList,\n+\tCommandEmpty,\n+\tCommandGroup,\n+\tCommandItem,\n+} from \"@src/components/ui\"\n+import { useAppTranslation } from \"@src/i18n/TranslationContext\"\n+import { ModeConfig, GroupEntry, GroupOptions } from \"@roo-code/types\"\n+\n+type McpServer = {\n+\tname: string\n+\t[key: string]: any\n+}\n+\n+interface McpSelectorProps {\n+\tgroup: string\n+\tisEnabled: boolean\n+\tisCustomMode: boolean\n+\tmcpServers: McpServer[]\n+\tcurrentMode?: ModeConfig\n+\tvisualMode: string\n+\tcustomModes: ModeConfig[]\n+\tfindModeBySlug: (slug: string, modes: ModeConfig[]) => ModeConfig | undefined\n+\tupdateCustomMode: (slug: string, config: ModeConfig) => void\n+}\n+\n+const McpSelector: React.FC<McpSelectorProps> = ({\n+\tgroup,\n+\tisEnabled,\n+\tisCustomMode,\n+\tmcpServers,\n+\tcurrentMode,\n+\tvisualMode,\n+\tcustomModes,\n+\tfindModeBySlug,\n+\tupdateCustomMode,\n+}) => {\n+\tconst { t } = useAppTranslation()\n+\n+\t// State\n+\tconst [isDialogOpen, setIsDialogOpen] = useState(false)\n+\tconst [allowedMcpList, setAllowedMcpList] = useState<string[]>([])\n+\tconst [deniedMcpList, setDeniedMcpList] = useState<string[]>([])\n+\tconst [searchValue, setSearchValue] = useState(\"\")\n+\tconst searchInputRef = useRef<HTMLInputElement | null>(null)\n+\n+\t// Sync MCP settings\n+\tuseEffect(() => {\n+\t\tif (!currentMode) {\n+\t\t\tsetAllowedMcpList([])\n+\t\t\tsetDeniedMcpList([])\n+\t\t\treturn\n+\t\t}\n+\n+\t\tconst mcpGroupArr = currentMode.groups?.find(\n+\t\t\t(g: GroupEntry): g is [\"mcp\", GroupOptions] => Array.isArray(g) && g.length === 2 && g[0] === \"mcp\",\n+\t\t)\n+\n+\t\tconst rawGroupOptions: GroupOptions | undefined = mcpGroupArr ? mcpGroupArr[1] : undefined\n+\n+\t\tconst optionsToUse = {\n+\t\t\tallowedMcpList: rawGroupOptions?.allowedMcpList || [],\n+\t\t\tdeniedMcpList: rawGroupOptions?.deniedMcpList || [],\n+\t\t}\n+\n+\t\t// Sync MCP settings when mode changes\n+\t\tsetAllowedMcpList(optionsToUse.allowedMcpList)\n+\t\tsetDeniedMcpList(optionsToUse.deniedMcpList)\n+\t}, [currentMode])\n+\t// Handle save\n+\t// Migrate handleSaveMcpList logic here\n+\tconst handleSave = () => {",
        "comment_created_at": "2025-06-22T19:30:05+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "The `handleSave` function is quite complex with nested conditions and multiple responsibilities. Would it be cleaner to extract the group update logic into a separate utility function?\n\nFor example:\n```typescript\nfunction updateMcpGroupOptions(\n  groups: GroupEntry[],\n  allowedList: string[],\n  deniedList: string[]\n): GroupEntry[] {\n  // Group update logic here\n}\n```\n\nThis would make the code more testable and easier to understand.",
        "pr_file_module": null
      }
    ]
  }
]