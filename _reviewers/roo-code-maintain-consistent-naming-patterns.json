[
  {
    "discussion_id": "2213377662",
    "pr_number": 5814,
    "pr_file": "src/api/providers/fetchers/modelCache.ts",
    "created_at": "2025-07-17T13:38:28+00:00",
    "commented_code": "import { getGlamaModels } from \"./glama\"\n import { getUnboundModels } from \"./unbound\"\n import { getLiteLLMModels } from \"./litellm\"\n+import { getLmStudioModels } from \"./lm-studio\"",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2213377662",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5814,
        "pr_file": "src/api/providers/fetchers/modelCache.ts",
        "discussion_id": "2213377662",
        "commented_code": "@@ -14,6 +14,7 @@ import { getRequestyModels } from \"./requesty\"\n import { getGlamaModels } from \"./glama\"\n import { getUnboundModels } from \"./unbound\"\n import { getLiteLLMModels } from \"./litellm\"\n+import { getLmStudioModels } from \"./lm-studio\"",
        "comment_created_at": "2025-07-17T13:38:28+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "There's an inconsistency in the LMStudio imports. This new import uses `getLmStudioModels` from \"./lm-studio\", while an existing import (line 20) is `getLMStudioModels` from \"./lmstudio\". Please verify if both are intentional or if there's a typographical error with the casing/path.\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2213652851",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5814,
        "pr_file": "src/api/providers/fetchers/modelCache.ts",
        "discussion_id": "2213377662",
        "commented_code": "@@ -14,6 +14,7 @@ import { getRequestyModels } from \"./requesty\"\n import { getGlamaModels } from \"./glama\"\n import { getUnboundModels } from \"./unbound\"\n import { getLiteLLMModels } from \"./litellm\"\n+import { getLmStudioModels } from \"./lm-studio\"",
        "comment_created_at": "2025-07-17T15:22:05+00:00",
        "comment_author": "pwilkin",
        "comment_body": "True, removed the duplicate import and the duplicate method.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2217623422",
    "pr_number": 5984,
    "pr_file": "webview-ui/src/components/settings/searchUtils.ts",
    "created_at": "2025-07-20T06:28:38+00:00",
    "commented_code": "+// import type { ExtensionStateContextType } from \"@src/context/ExtensionStateContext\"\n+\n+export interface SearchableItem {\n+\tsectionId: string\n+\tsectionLabel: string\n+\tsettingId: string\n+\tsettingLabel: string\n+\tsettingDescription?: string\n+\tkeywords?: string[]\n+}\n+\n+// Define a mapping of setting keys to their search metadata\n+// This is much more maintainable than duplicating all settings\n+export const SETTINGS_SEARCH_CONFIG: Record<\n+\tstring,\n+\t{\n+\t\tsectionId: string\n+\t\ttranslationKey?: string\n+\t\tkeywords?: string[]\n+\t}\n+> = {\n+\t// Providers section\n+\tapiProvider: { sectionId: \"providers\", keywords: [\"api\", \"provider\", \"model\", \"configuration\"] },\n+\tmodel: { sectionId: \"providers\", keywords: [\"model\", \"ai\", \"llm\"] },\n+\n+\t// Auto-Approve section - mapped to correct translation keys\n+\talwaysAllowReadOnly: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"readOnly\",\n+\t\tkeywords: [\"read\", \"auto\", \"approve\", \"files\"],\n+\t},\n+\talwaysAllowReadOnlyOutsideWorkspace: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"readOnly.outsideWorkspace\",\n+\t\tkeywords: [\"read\", \"auto\", \"approve\", \"files\", \"outside\", \"workspace\"],\n+\t},\n+\talwaysAllowWrite: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"write\",\n+\t\tkeywords: [\"write\", \"auto\", \"approve\", \"edit\", \"create\"],\n+\t},\n+\talwaysAllowWriteOutsideWorkspace: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"write.outsideWorkspace\",\n+\t\tkeywords: [\"write\", \"auto\", \"approve\", \"edit\", \"create\", \"outside\", \"workspace\"],\n+\t},\n+\talwaysAllowWriteProtected: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"write.protected\",\n+\t\tkeywords: [\"write\", \"auto\", \"approve\", \"protected\", \"files\"],\n+\t},\n+\twriteDelayMs: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"write.delayLabel\",\n+\t\tkeywords: [\"write\", \"delay\", \"milliseconds\", \"timing\"],\n+\t},\n+\talwaysAllowExecute: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"execute\",\n+\t\tkeywords: [\"execute\", \"terminal\", \"command\", \"auto\", \"approve\"],\n+\t},\n+\tallowedCommands: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"execute.allowedCommands\",\n+\t\tkeywords: [\"commands\", \"allowed\", \"whitelist\", \"execute\"],\n+\t},\n+\tdeniedCommands: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"execute.deniedCommands\",\n+\t\tkeywords: [\"commands\", \"denied\", \"blacklist\", \"execute\"],\n+\t},\n+\talwaysAllowBrowser: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"browser\",\n+\t\tkeywords: [\"browser\", \"auto\", \"approve\"],\n+\t},\n+\talwaysAllowMcp: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"mcp\",\n+\t\tkeywords: [\"mcp\", \"auto\", \"approve\", \"model context protocol\"],\n+\t},\n+\talwaysAllowModeSwitch: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"modeSwitch\",\n+\t\tkeywords: [\"mode\", \"switch\", \"auto\", \"approve\"],\n+\t},\n+\talwaysAllowSubtasks: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"subtasks\",\n+\t\tkeywords: [\"subtasks\", \"auto\", \"approve\", \"tasks\"],\n+\t},\n+\talwaysAllowFollowupQuestions: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"followupQuestions\",\n+\t\tkeywords: [\"followup\", \"questions\", \"auto\", \"approve\"],\n+\t},\n+\talwaysAllowUpdateTodoList: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"updateTodoList\",\n+\t\tkeywords: [\"todo\", \"list\", \"auto\", \"approve\", \"update\"],\n+\t},\n+\tfollowupAutoApproveTimeoutMs: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"followupQuestions.timeoutLabel\",\n+\t\tkeywords: [\"followup\", \"timeout\", \"auto\", \"approve\", \"milliseconds\"],\n+\t},\n+\talwaysApproveResubmit: {",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2217623422",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5984,
        "pr_file": "webview-ui/src/components/settings/searchUtils.ts",
        "discussion_id": "2217623422",
        "commented_code": "@@ -0,0 +1,399 @@\n+// import type { ExtensionStateContextType } from \"@src/context/ExtensionStateContext\"\n+\n+export interface SearchableItem {\n+\tsectionId: string\n+\tsectionLabel: string\n+\tsettingId: string\n+\tsettingLabel: string\n+\tsettingDescription?: string\n+\tkeywords?: string[]\n+}\n+\n+// Define a mapping of setting keys to their search metadata\n+// This is much more maintainable than duplicating all settings\n+export const SETTINGS_SEARCH_CONFIG: Record<\n+\tstring,\n+\t{\n+\t\tsectionId: string\n+\t\ttranslationKey?: string\n+\t\tkeywords?: string[]\n+\t}\n+> = {\n+\t// Providers section\n+\tapiProvider: { sectionId: \"providers\", keywords: [\"api\", \"provider\", \"model\", \"configuration\"] },\n+\tmodel: { sectionId: \"providers\", keywords: [\"model\", \"ai\", \"llm\"] },\n+\n+\t// Auto-Approve section - mapped to correct translation keys\n+\talwaysAllowReadOnly: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"readOnly\",\n+\t\tkeywords: [\"read\", \"auto\", \"approve\", \"files\"],\n+\t},\n+\talwaysAllowReadOnlyOutsideWorkspace: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"readOnly.outsideWorkspace\",\n+\t\tkeywords: [\"read\", \"auto\", \"approve\", \"files\", \"outside\", \"workspace\"],\n+\t},\n+\talwaysAllowWrite: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"write\",\n+\t\tkeywords: [\"write\", \"auto\", \"approve\", \"edit\", \"create\"],\n+\t},\n+\talwaysAllowWriteOutsideWorkspace: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"write.outsideWorkspace\",\n+\t\tkeywords: [\"write\", \"auto\", \"approve\", \"edit\", \"create\", \"outside\", \"workspace\"],\n+\t},\n+\talwaysAllowWriteProtected: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"write.protected\",\n+\t\tkeywords: [\"write\", \"auto\", \"approve\", \"protected\", \"files\"],\n+\t},\n+\twriteDelayMs: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"write.delayLabel\",\n+\t\tkeywords: [\"write\", \"delay\", \"milliseconds\", \"timing\"],\n+\t},\n+\talwaysAllowExecute: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"execute\",\n+\t\tkeywords: [\"execute\", \"terminal\", \"command\", \"auto\", \"approve\"],\n+\t},\n+\tallowedCommands: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"execute.allowedCommands\",\n+\t\tkeywords: [\"commands\", \"allowed\", \"whitelist\", \"execute\"],\n+\t},\n+\tdeniedCommands: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"execute.deniedCommands\",\n+\t\tkeywords: [\"commands\", \"denied\", \"blacklist\", \"execute\"],\n+\t},\n+\talwaysAllowBrowser: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"browser\",\n+\t\tkeywords: [\"browser\", \"auto\", \"approve\"],\n+\t},\n+\talwaysAllowMcp: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"mcp\",\n+\t\tkeywords: [\"mcp\", \"auto\", \"approve\", \"model context protocol\"],\n+\t},\n+\talwaysAllowModeSwitch: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"modeSwitch\",\n+\t\tkeywords: [\"mode\", \"switch\", \"auto\", \"approve\"],\n+\t},\n+\talwaysAllowSubtasks: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"subtasks\",\n+\t\tkeywords: [\"subtasks\", \"auto\", \"approve\", \"tasks\"],\n+\t},\n+\talwaysAllowFollowupQuestions: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"followupQuestions\",\n+\t\tkeywords: [\"followup\", \"questions\", \"auto\", \"approve\"],\n+\t},\n+\talwaysAllowUpdateTodoList: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"updateTodoList\",\n+\t\tkeywords: [\"todo\", \"list\", \"auto\", \"approve\", \"update\"],\n+\t},\n+\tfollowupAutoApproveTimeoutMs: {\n+\t\tsectionId: \"autoApprove\",\n+\t\ttranslationKey: \"followupQuestions.timeoutLabel\",\n+\t\tkeywords: [\"followup\", \"timeout\", \"auto\", \"approve\", \"milliseconds\"],\n+\t},\n+\talwaysApproveResubmit: {",
        "comment_created_at": "2025-07-20T06:28:38+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Typographical consistency issue: The key name is 'alwaysApproveResubmit', while all other keys in this section use 'alwaysAllow...'. Consider renaming it to 'alwaysAllowResubmit' for consistency.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2217559495",
    "pr_number": 5976,
    "pr_file": "src/shared/ExtensionMessage.ts",
    "created_at": "2025-07-20T04:10:40+00:00",
    "commented_code": "| \"finishTask\"\n \t\t| \"searchAndReplace\"\n \t\t| \"insertContent\"\n+\t\t| \"web_preview\"",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2217559495",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5976,
        "pr_file": "src/shared/ExtensionMessage.ts",
        "discussion_id": "2217559495",
        "commented_code": "@@ -302,6 +304,7 @@ export interface ClineSayTool {\n \t\t| \"finishTask\"\n \t\t| \"searchAndReplace\"\n \t\t| \"insertContent\"\n+\t\t| \"web_preview\"",
        "comment_created_at": "2025-07-20T04:10:40+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Typographical issue: The new union value \"web_preview\" is using snake_case whereas the other values use camelCase (e.g. \"finishTask\", \"searchAndReplace\", \"insertContent\"). Consider using \"webPreview\" for consistency.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2217046970",
    "pr_number": 5933,
    "pr_file": "src/services/code-index/config-manager.ts",
    "created_at": "2025-07-18T23:53:35+00:00",
    "commented_code": "const openAiCompatibleBaseUrl = codebaseIndexConfig.codebaseIndexOpenAiCompatibleBaseUrl ?? \"\"\n \t\tconst openAiCompatibleApiKey = this.contextProxy?.getSecret(\"codebaseIndexOpenAiCompatibleApiKey\") ?? \"\"\n \t\tconst geminiApiKey = this.contextProxy?.getSecret(\"codebaseIndexGeminiApiKey\") ?? \"\"\n+\t\tconst mistralApiKey = this.contextProxy?.getSecret(\"mistralApiKey\") ?? \"\"",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2217046970",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5933,
        "pr_file": "src/services/code-index/config-manager.ts",
        "discussion_id": "2217046970",
        "commented_code": "@@ -67,6 +68,7 @@ export class CodeIndexConfigManager {\n \t\tconst openAiCompatibleBaseUrl = codebaseIndexConfig.codebaseIndexOpenAiCompatibleBaseUrl ?? \"\"\n \t\tconst openAiCompatibleApiKey = this.contextProxy?.getSecret(\"codebaseIndexOpenAiCompatibleApiKey\") ?? \"\"\n \t\tconst geminiApiKey = this.contextProxy?.getSecret(\"codebaseIndexGeminiApiKey\") ?? \"\"\n+\t\tconst mistralApiKey = this.contextProxy?.getSecret(\"mistralApiKey\") ?? \"\"",
        "comment_created_at": "2025-07-18T23:53:35+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The secret key for the Mistral API is fetched using `getSecret(\"mistralApiKey\")`, but elsewhere (e.g. in the zod schema and UI) the mistral key is referred to as `codebaseIndexMistralApiKey`. Consider aligning the secret key naming for consistency to avoid potential mismatches.\n```suggestion\n\t\tconst mistralApiKey = this.contextProxy?.getSecret(\"codebaseIndexMistralApiKey\") ?? \"\"\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2183256719",
    "pr_number": 5343,
    "pr_file": "src/services/code-index/constants/index.ts",
    "created_at": "2025-07-03T16:52:29+00:00",
    "commented_code": "/**Search */\n export const SEARCH_MIN_SCORE = 0.4\n-export const MAX_SEARCH_RESULTS = 50 // Maximum number of search results to return\n+export const DEFAULT_MAX_SEARCH_RESULTS = 50 // Default maximum number of search results to return",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2183256719",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5343,
        "pr_file": "src/services/code-index/constants/index.ts",
        "discussion_id": "2183256719",
        "commented_code": "@@ -6,7 +6,7 @@ export const MAX_CHARS_TOLERANCE_FACTOR = 1.15 // 15% tolerance for max chars\n \n /**Search */\n export const SEARCH_MIN_SCORE = 0.4\n-export const MAX_SEARCH_RESULTS = 50 // Maximum number of search results to return\n+export const DEFAULT_MAX_SEARCH_RESULTS = 50 // Default maximum number of search results to return",
        "comment_created_at": "2025-07-03T16:52:29+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "I noticed the naming pattern inconsistency here. You've renamed `MAX_SEARCH_RESULTS` to `DEFAULT_MAX_SEARCH_RESULTS` (which is good!), but `SEARCH_MIN_SCORE` doesn't follow the same pattern.\n\nFor consistency, should we consider renaming `SEARCH_MIN_SCORE` to `DEFAULT_SEARCH_MIN_SCORE`? This would make it clearer that both are default values that can be overridden by user configuration.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2083237172",
    "pr_number": 3445,
    "pr_file": "evals/packages/types/src/roo-code-defaults.ts",
    "created_at": "2025-05-10T16:49:13+00:00",
    "commented_code": "pinnedApiConfigs: {},\n \n+\tmarkdownBlockLineheight: 1.25,",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2083237172",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 3445,
        "pr_file": "evals/packages/types/src/roo-code-defaults.ts",
        "discussion_id": "2083237172",
        "commented_code": "@@ -8,6 +8,7 @@ export const rooCodeDefaults: RooCodeSettings = {\n \n \tpinnedApiConfigs: {},\n \n+\tmarkdownBlockLineheight: 1.25,",
        "comment_created_at": "2025-05-10T16:49:13+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Typographical: The property `markdownBlockLineheight` should likely be renamed to `markdownBlockLineHeight` to adhere to camelCase conventions for consistency with the rest of the file.\n\n<sup>This comment was generated because it violated a code review rule: [mrule_l9qHIfrVR9RDrBkJ](https://app.ellipsis.dev/RooVetGit/code-review/rules?id=mrule_l9qHIfrVR9RDrBkJ).</sup>",
        "pr_file_module": null
      },
      {
        "comment_id": "2086158791",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 3445,
        "pr_file": "evals/packages/types/src/roo-code-defaults.ts",
        "discussion_id": "2083237172",
        "commented_code": "@@ -8,6 +8,7 @@ export const rooCodeDefaults: RooCodeSettings = {\n \n \tpinnedApiConfigs: {},\n \n+\tmarkdownBlockLineheight: 1.25,",
        "comment_created_at": "2025-05-13T07:50:45+00:00",
        "comment_author": "KrabsWong",
        "comment_body": "Updated",
        "pr_file_module": null
      }
    ]
  }
]