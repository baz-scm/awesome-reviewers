[
  {
    "discussion_id": "2067117272",
    "pr_number": 3011,
    "pr_file": "webview-ui/src/components/chat/ApiRequestDetailsBlock.tsx",
    "created_at": "2025-04-29T18:28:49+00:00",
    "commented_code": "+import React from \"react\"\n+import { useTranslation } from \"react-i18next\"\n+import { safeJsonParse } from \"@roo/shared/safeJsonParse\"\n+import { vscode } from \"@src/utils/vscode\"\n+import { ClineApiReqInfo, ClineMessage } from \"@roo/shared/ExtensionMessage\"\n+\n+interface ApiRequestDetailsBlockProps {\n+\tmessage: ClineMessage\n+\ticon: React.ReactNode\n+\tcost: number | undefined\n+\tapiRequestFailedMessage: string | undefined\n+\tapiReqStreamingFailedMessage: string | undefined",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2067117272",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 3011,
        "pr_file": "webview-ui/src/components/chat/ApiRequestDetailsBlock.tsx",
        "discussion_id": "2067117272",
        "commented_code": "@@ -0,0 +1,65 @@\n+import React from \"react\"\n+import { useTranslation } from \"react-i18next\"\n+import { safeJsonParse } from \"@roo/shared/safeJsonParse\"\n+import { vscode } from \"@src/utils/vscode\"\n+import { ClineApiReqInfo, ClineMessage } from \"@roo/shared/ExtensionMessage\"\n+\n+interface ApiRequestDetailsBlockProps {\n+\tmessage: ClineMessage\n+\ticon: React.ReactNode\n+\tcost: number | undefined\n+\tapiRequestFailedMessage: string | undefined\n+\tapiReqStreamingFailedMessage: string | undefined",
        "comment_created_at": "2025-04-29T18:28:49+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The property name `apiReqStreamingFailedMessage` (line 12) is inconsistent with `apiRequestFailedMessage`. Consider renaming it to `apiRequestStreamingFailedMessage` for consistency and clarity.\n\n<sup>This comment was generated because it violated a code review rule: [mrule_aQsEnH8jWdOfHq2Z](https://app.ellipsis.dev/RooVetGit/code-review/rules?id=mrule_aQsEnH8jWdOfHq2Z).</sup>",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2135712467",
    "pr_number": 4360,
    "pr_file": "webview-ui/src/components/settings/MaxContextWindowControl.tsx",
    "created_at": "2025-06-09T13:21:15+00:00",
    "commented_code": "+import { VSCodeCheckbox } from \"@vscode/webview-ui-toolkit/react\"\n+import { useEffect, useState } from \"react\"\n+import { useAppTranslation } from \"@/i18n/TranslationContext\"\n+import { useDebounce } from \"react-use\"\n+\n+import { Slider } from \"@/components/ui\"\n+\n+interface MaxContextWindowControlProps {\n+\tvalue: number | undefined | null\n+\tonChange: (value: number | undefined | null) => void\n+\tmaxValue?: number\n+}\n+\n+export const MaxContextWindowControl = ({ value, onChange, maxValue = 1000000 }: MaxContextWindowControlProps) => {\n+\tconst { t } = useAppTranslation()\n+\tconst [isCustomMaxContextWindow, setIsCustomMaxContextWindow] = useState(value !== undefined)\n+\tconst [inputValue, setInputValue] = useState(value)\n+\n+\tuseDebounce(() => onChange(inputValue), 50, [onChange, inputValue])\n+\n+\t// Sync internal state with prop changes when switching profiles.\n+\tuseEffect(() => {\n+\t\tconst hasCustomTemperature = value !== undefined && value !== null",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2135712467",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 4360,
        "pr_file": "webview-ui/src/components/settings/MaxContextWindowControl.tsx",
        "discussion_id": "2135712467",
        "commented_code": "@@ -0,0 +1,71 @@\n+import { VSCodeCheckbox } from \"@vscode/webview-ui-toolkit/react\"\n+import { useEffect, useState } from \"react\"\n+import { useAppTranslation } from \"@/i18n/TranslationContext\"\n+import { useDebounce } from \"react-use\"\n+\n+import { Slider } from \"@/components/ui\"\n+\n+interface MaxContextWindowControlProps {\n+\tvalue: number | undefined | null\n+\tonChange: (value: number | undefined | null) => void\n+\tmaxValue?: number\n+}\n+\n+export const MaxContextWindowControl = ({ value, onChange, maxValue = 1000000 }: MaxContextWindowControlProps) => {\n+\tconst { t } = useAppTranslation()\n+\tconst [isCustomMaxContextWindow, setIsCustomMaxContextWindow] = useState(value !== undefined)\n+\tconst [inputValue, setInputValue] = useState(value)\n+\n+\tuseDebounce(() => onChange(inputValue), 50, [onChange, inputValue])\n+\n+\t// Sync internal state with prop changes when switching profiles.\n+\tuseEffect(() => {\n+\t\tconst hasCustomTemperature = value !== undefined && value !== null",
        "comment_created_at": "2025-06-09T13:21:15+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Typographical note: The variable name `hasCustomTemperature` appears inconsistent with the component's context (Max Context Window). Consider renaming it to something like `hasCustomMaxContextWindow` for clarity.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2111934985",
    "pr_number": 4076,
    "pr_file": "webview-ui/src/components/settings/providers/LMStudio.tsx",
    "created_at": "2025-05-28T13:31:52+00:00",
    "commented_code": "className=\"w-full\">\n \t\t\t\t<label className=\"block font-medium mb-1\">{t(\"settings:providers.lmStudio.modelId\")}</label>\n \t\t\t</VSCodeTextField>\n+\t\t\t<VSCodeTextField\n+\t\t\t\tvalue={apiConfiguration?.lmStudioApiTimeout?.toString() || \"10\"}\n+\t\t\t\tonInput={handleInputChange(\"lmStudioApiTimeout\", (e) => {\n+\t\t\t\t\tconst value = parseInt((e.target as HTMLInputElement).value)\n+\t\t\t\t\treturn isNaN(value) ? undefined : value\n+\t\t\t\t})}\n+\t\t\t\ttype=\"text\"\n+\t\t\t\tinputMode=\"numeric\"\n+\t\t\t\tplaceholder={t(\"settings:placeholders.numbers.maxTokens\")}\n+\t\t\t\tstyle={{\n+\t\t\t\t\tborderColor: (() => {\n+\t\t\t\t\t\tconst value = apiConfiguration?.lmStudioApiTimeout\n+\t\t\t\t\t\tif (!value) return \"var(--vscode-input-border)\"\n+\t\t\t\t\t\treturn value > 0 ? \"var(--vscode-charts-green)\" : \"var(--vscode-errorForeground)\"\n+\t\t\t\t\t})(),\n+\t\t\t\t}}\n+\t\t\t\tclassName=\"w-full mt-4\">\n+\t\t\t\t<label className=\"block font-medium mb-1\">{t(\"settings:providers.openAiApiTimeout\")}</label>",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2111934985",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 4076,
        "pr_file": "webview-ui/src/components/settings/providers/LMStudio.tsx",
        "discussion_id": "2111934985",
        "commented_code": "@@ -64,6 +64,28 @@ export const LMStudio = ({ apiConfiguration, setApiConfigurationField }: LMStudi\n \t\t\t\tclassName=\"w-full\">\n \t\t\t\t<label className=\"block font-medium mb-1\">{t(\"settings:providers.lmStudio.modelId\")}</label>\n \t\t\t</VSCodeTextField>\n+\t\t\t<VSCodeTextField\n+\t\t\t\tvalue={apiConfiguration?.lmStudioApiTimeout?.toString() || \"10\"}\n+\t\t\t\tonInput={handleInputChange(\"lmStudioApiTimeout\", (e) => {\n+\t\t\t\t\tconst value = parseInt((e.target as HTMLInputElement).value)\n+\t\t\t\t\treturn isNaN(value) ? undefined : value\n+\t\t\t\t})}\n+\t\t\t\ttype=\"text\"\n+\t\t\t\tinputMode=\"numeric\"\n+\t\t\t\tplaceholder={t(\"settings:placeholders.numbers.maxTokens\")}\n+\t\t\t\tstyle={{\n+\t\t\t\t\tborderColor: (() => {\n+\t\t\t\t\t\tconst value = apiConfiguration?.lmStudioApiTimeout\n+\t\t\t\t\t\tif (!value) return \"var(--vscode-input-border)\"\n+\t\t\t\t\t\treturn value > 0 ? \"var(--vscode-charts-green)\" : \"var(--vscode-errorForeground)\"\n+\t\t\t\t\t})(),\n+\t\t\t\t}}\n+\t\t\t\tclassName=\"w-full mt-4\">\n+\t\t\t\t<label className=\"block font-medium mb-1\">{t(\"settings:providers.openAiApiTimeout\")}</label>",
        "comment_created_at": "2025-05-28T13:31:52+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The label translation key here is `settings:providers.openAiApiTimeout`, but this is in the LMStudio component and the value comes from `lmStudioApiTimeout`. Consider renaming the translation key to be consistent (e.g., `lmStudioApiTimeout`).\n```suggestion\n\t\t\t\t<label className=\"block font-medium mb-1\">{t(\"settings:providers.lmStudio.apiTimeout\")}</label>\n```\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2111960415",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 4076,
        "pr_file": "webview-ui/src/components/settings/providers/LMStudio.tsx",
        "discussion_id": "2111934985",
        "commented_code": "@@ -64,6 +64,28 @@ export const LMStudio = ({ apiConfiguration, setApiConfigurationField }: LMStudi\n \t\t\t\tclassName=\"w-full\">\n \t\t\t\t<label className=\"block font-medium mb-1\">{t(\"settings:providers.lmStudio.modelId\")}</label>\n \t\t\t</VSCodeTextField>\n+\t\t\t<VSCodeTextField\n+\t\t\t\tvalue={apiConfiguration?.lmStudioApiTimeout?.toString() || \"10\"}\n+\t\t\t\tonInput={handleInputChange(\"lmStudioApiTimeout\", (e) => {\n+\t\t\t\t\tconst value = parseInt((e.target as HTMLInputElement).value)\n+\t\t\t\t\treturn isNaN(value) ? undefined : value\n+\t\t\t\t})}\n+\t\t\t\ttype=\"text\"\n+\t\t\t\tinputMode=\"numeric\"\n+\t\t\t\tplaceholder={t(\"settings:placeholders.numbers.maxTokens\")}\n+\t\t\t\tstyle={{\n+\t\t\t\t\tborderColor: (() => {\n+\t\t\t\t\t\tconst value = apiConfiguration?.lmStudioApiTimeout\n+\t\t\t\t\t\tif (!value) return \"var(--vscode-input-border)\"\n+\t\t\t\t\t\treturn value > 0 ? \"var(--vscode-charts-green)\" : \"var(--vscode-errorForeground)\"\n+\t\t\t\t\t})(),\n+\t\t\t\t}}\n+\t\t\t\tclassName=\"w-full mt-4\">\n+\t\t\t\t<label className=\"block font-medium mb-1\">{t(\"settings:providers.openAiApiTimeout\")}</label>",
        "comment_created_at": "2025-05-28T13:43:11+00:00",
        "comment_author": "Belerafon",
        "comment_body": "Since the LMStudio, Ollama, and OpenAI-Compatible providers all use the OpenAI API library, the timeout name, description, and behavior are identical. Therefore, a common translation key is intentionally used for all three providers.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2083237173",
    "pr_number": 3445,
    "pr_file": "webview-ui/src/components/settings/UISettings.tsx",
    "created_at": "2025-05-10T16:49:13+00:00",
    "commented_code": "+import { HTMLAttributes } from \"react\"\n+import { useAppTranslation } from \"@/i18n/TranslationContext\"\n+import { Database } from \"lucide-react\"\n+\n+import { cn } from \"@/lib/utils\"\n+import { Slider } from \"@/components/ui\"\n+\n+import { SetCachedStateField } from \"./types\"\n+import { SectionHeader } from \"./SectionHeader\"\n+import { Section } from \"./Section\"\n+\n+type UISettingsProps = HTMLAttributes<HTMLDivElement> & {\n+\tmarkdownBlockLineheight: number\n+\tsetCachedStateField: SetCachedStateField<\"markdownBlockLineheight\">\n+}\n+\n+export const UISettings = ({ markdownBlockLineheight, setCachedStateField, className, ...props }: UISettingsProps) => {\n+\tconst { t } = useAppTranslation()\n+\treturn (\n+\t\t<div className={cn(\"flex flex-col gap-2\", className)} {...props}>\n+\t\t\t<SectionHeader description={t(\"settings:uiSettings.description\")}>\n+\t\t\t\t<div className=\"flex items-center gap-2\">\n+\t\t\t\t\t<Database className=\"w-4\" />\n+\t\t\t\t\t<div>{t(\"settings:sections.uiSettings\")}</div>\n+\t\t\t\t</div>\n+\t\t\t</SectionHeader>\n+\n+\t\t\t<Section>\n+\t\t\t\t<div>\n+\t\t\t\t\t<span className=\"block font-medium mb-1\">\n+\t\t\t\t\t\t{t(\"settings:uiSettings.markdownBlockLineheight.label\")}\n+\t\t\t\t\t</span>\n+\t\t\t\t\t<div className=\"flex items-center gap-2\">\n+\t\t\t\t\t\t<Slider\n+\t\t\t\t\t\t\tmin={1.25}\n+\t\t\t\t\t\t\tmax={2}\n+\t\t\t\t\t\t\tstep={0.01}\n+\t\t\t\t\t\t\tvalue={[markdownBlockLineheight ?? 1.25]}\n+\t\t\t\t\t\t\tonValueChange={([value]) => setCachedStateField(\"markdownBlockLineheight\", value)}\n+\t\t\t\t\t\t\tdata-testid=\"open-tabs-limit-slider\"",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2083237173",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 3445,
        "pr_file": "webview-ui/src/components/settings/UISettings.tsx",
        "discussion_id": "2083237173",
        "commented_code": "@@ -0,0 +1,51 @@\n+import { HTMLAttributes } from \"react\"\n+import { useAppTranslation } from \"@/i18n/TranslationContext\"\n+import { Database } from \"lucide-react\"\n+\n+import { cn } from \"@/lib/utils\"\n+import { Slider } from \"@/components/ui\"\n+\n+import { SetCachedStateField } from \"./types\"\n+import { SectionHeader } from \"./SectionHeader\"\n+import { Section } from \"./Section\"\n+\n+type UISettingsProps = HTMLAttributes<HTMLDivElement> & {\n+\tmarkdownBlockLineheight: number\n+\tsetCachedStateField: SetCachedStateField<\"markdownBlockLineheight\">\n+}\n+\n+export const UISettings = ({ markdownBlockLineheight, setCachedStateField, className, ...props }: UISettingsProps) => {\n+\tconst { t } = useAppTranslation()\n+\treturn (\n+\t\t<div className={cn(\"flex flex-col gap-2\", className)} {...props}>\n+\t\t\t<SectionHeader description={t(\"settings:uiSettings.description\")}>\n+\t\t\t\t<div className=\"flex items-center gap-2\">\n+\t\t\t\t\t<Database className=\"w-4\" />\n+\t\t\t\t\t<div>{t(\"settings:sections.uiSettings\")}</div>\n+\t\t\t\t</div>\n+\t\t\t</SectionHeader>\n+\n+\t\t\t<Section>\n+\t\t\t\t<div>\n+\t\t\t\t\t<span className=\"block font-medium mb-1\">\n+\t\t\t\t\t\t{t(\"settings:uiSettings.markdownBlockLineheight.label\")}\n+\t\t\t\t\t</span>\n+\t\t\t\t\t<div className=\"flex items-center gap-2\">\n+\t\t\t\t\t\t<Slider\n+\t\t\t\t\t\t\tmin={1.25}\n+\t\t\t\t\t\t\tmax={2}\n+\t\t\t\t\t\t\tstep={0.01}\n+\t\t\t\t\t\t\tvalue={[markdownBlockLineheight ?? 1.25]}\n+\t\t\t\t\t\t\tonValueChange={([value]) => setCachedStateField(\"markdownBlockLineheight\", value)}\n+\t\t\t\t\t\t\tdata-testid=\"open-tabs-limit-slider\"",
        "comment_created_at": "2025-05-10T16:49:13+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Typographical inconsistency: The `data-testid` value `'open-tabs-limit-slider'` doesn't match the intended purpose of adjusting markdown block line height. Consider renaming it to something more descriptive like `'markdown-lineheight-slider'` to avoid confusion.\n```suggestion\n\t\t\t\t\t\t\tdata-testid=\"markdown-lineheight-slider\"\n```\n\n<sup>This comment was generated because it violated a code review rule: [mrule_htmKIslKUiIk1Afo](https://app.ellipsis.dev/RooVetGit/code-review/rules?id=mrule_htmKIslKUiIk1Afo).</sup>",
        "pr_file_module": null
      }
    ]
  }
]