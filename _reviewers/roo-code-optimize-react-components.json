[
  {
    "discussion_id": "2217525546",
    "pr_number": 5964,
    "pr_file": "webview-ui/src/components/settings/ToolsSettings.tsx",
    "created_at": "2025-07-20T01:27:35+00:00",
    "commented_code": "+import React from \"react\"\n+import { useAppTranslation } from \"@/i18n/TranslationContext\"\n+import { VSCodeCheckbox, VSCodeButton } from \"@vscode/webview-ui-toolkit/react\"\n+import { Wrench } from \"lucide-react\"\n+\n+import { SetCachedStateField } from \"./types\"\n+import { SectionHeader } from \"./SectionHeader\"\n+import { Section } from \"./Section\"\n+import { ExtensionStateContextType } from \"@/context/ExtensionStateContext\"\n+\n+interface ToolsSettingsProps {\n+\tenableToolExecuteCommand?: boolean\n+\tenableToolReadFile?: boolean\n+\tenableToolFetchInstructions?: boolean\n+\tenableToolWriteToFile?: boolean\n+\tenableToolApplyDiff?: boolean\n+\tenableToolInsertContent?: boolean\n+\tenableToolSearchAndReplace?: boolean\n+\tenableToolSearchFiles?: boolean\n+\tenableToolListFiles?: boolean\n+\tenableToolListCodeDefinitionNames?: boolean\n+\tenableToolBrowserAction?: boolean\n+\tenableToolUseMcpTool?: boolean\n+\tenableToolAccessMcpResource?: boolean\n+\tenableToolAskFollowupQuestion?: boolean\n+\tenableToolAttemptCompletion?: boolean\n+\tenableToolSwitchMode?: boolean\n+\tenableToolNewTask?: boolean\n+\tenableToolCodebaseSearch?: boolean\n+\tenableToolUpdateTodoList?: boolean\n+\tsetCachedStateField: SetCachedStateField<keyof ExtensionStateContextType>\n+}\n+\n+export const ToolsSettings: React.FC<ToolsSettingsProps> = ({\n+\tenableToolExecuteCommand = true,\n+\tenableToolReadFile = true,\n+\tenableToolFetchInstructions = true,\n+\tenableToolWriteToFile = true,\n+\tenableToolApplyDiff = true,\n+\tenableToolInsertContent = true,\n+\tenableToolSearchAndReplace = true,\n+\tenableToolSearchFiles = true,\n+\tenableToolListFiles = true,\n+\tenableToolListCodeDefinitionNames = true,\n+\tenableToolBrowserAction = true,\n+\tenableToolUseMcpTool = true,\n+\tenableToolAccessMcpResource = true,\n+\tenableToolAskFollowupQuestion = true,\n+\tenableToolAttemptCompletion = true,\n+\tenableToolSwitchMode = true,\n+\tenableToolNewTask = true,\n+\tenableToolCodebaseSearch = true,\n+\tenableToolUpdateTodoList = true,\n+\tsetCachedStateField,\n+}) => {\n+\tconst { t } = useAppTranslation()\n+\n+\tconst handleSelectAll = () => {\n+\t\tconst toolKeys = [\n+\t\t\t\"enableToolExecuteCommand\",\n+\t\t\t\"enableToolReadFile\",\n+\t\t\t\"enableToolFetchInstructions\",\n+\t\t\t\"enableToolWriteToFile\",\n+\t\t\t\"enableToolApplyDiff\",\n+\t\t\t\"enableToolInsertContent\",\n+\t\t\t\"enableToolSearchAndReplace\",\n+\t\t\t\"enableToolSearchFiles\",\n+\t\t\t\"enableToolListFiles\",\n+\t\t\t\"enableToolListCodeDefinitionNames\",\n+\t\t\t\"enableToolBrowserAction\",\n+\t\t\t\"enableToolUseMcpTool\",\n+\t\t\t\"enableToolAccessMcpResource\",\n+\t\t\t\"enableToolAskFollowupQuestion\",\n+\t\t\t\"enableToolAttemptCompletion\",\n+\t\t\t\"enableToolSwitchMode\",\n+\t\t\t\"enableToolNewTask\",\n+\t\t\t\"enableToolCodebaseSearch\",\n+\t\t\t\"enableToolUpdateTodoList\",\n+\t\t]\n+\n+\t\ttoolKeys.forEach((key) => {\n+\t\t\tsetCachedStateField(key as any, true)\n+\t\t})\n+\t}\n+\n+\tconst handleSelectNone = () => {\n+\t\tconst toolKeys = [\n+\t\t\t\"enableToolExecuteCommand\",\n+\t\t\t\"enableToolReadFile\",\n+\t\t\t\"enableToolFetchInstructions\",\n+\t\t\t\"enableToolWriteToFile\",\n+\t\t\t\"enableToolApplyDiff\",\n+\t\t\t\"enableToolInsertContent\",\n+\t\t\t\"enableToolSearchAndReplace\",\n+\t\t\t\"enableToolSearchFiles\",\n+\t\t\t\"enableToolListFiles\",\n+\t\t\t\"enableToolListCodeDefinitionNames\",\n+\t\t\t\"enableToolBrowserAction\",\n+\t\t\t\"enableToolUseMcpTool\",\n+\t\t\t\"enableToolAccessMcpResource\",\n+\t\t\t\"enableToolAskFollowupQuestion\",\n+\t\t\t\"enableToolAttemptCompletion\",\n+\t\t\t\"enableToolSwitchMode\",\n+\t\t\t\"enableToolNewTask\",\n+\t\t\t\"enableToolCodebaseSearch\",\n+\t\t\t\"enableToolUpdateTodoList\",\n+\t\t]\n+\n+\t\ttoolKeys.forEach((key) => {\n+\t\t\tsetCachedStateField(key as any, false)\n+\t\t})\n+\t}\n+\n+\t// Using existing tool groups from codebase, ordered by usage frequency (most common first)\n+\tconst toolGroups = [",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2217527197",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5964,
        "pr_file": "webview-ui/src/components/settings/ToolsSettings.tsx",
        "discussion_id": "2217525546",
        "commented_code": "@@ -0,0 +1,316 @@\n+import React from \"react\"\n+import { useAppTranslation } from \"@/i18n/TranslationContext\"\n+import { VSCodeCheckbox, VSCodeButton } from \"@vscode/webview-ui-toolkit/react\"\n+import { Wrench } from \"lucide-react\"\n+\n+import { SetCachedStateField } from \"./types\"\n+import { SectionHeader } from \"./SectionHeader\"\n+import { Section } from \"./Section\"\n+import { ExtensionStateContextType } from \"@/context/ExtensionStateContext\"\n+\n+interface ToolsSettingsProps {\n+\tenableToolExecuteCommand?: boolean\n+\tenableToolReadFile?: boolean\n+\tenableToolFetchInstructions?: boolean\n+\tenableToolWriteToFile?: boolean\n+\tenableToolApplyDiff?: boolean\n+\tenableToolInsertContent?: boolean\n+\tenableToolSearchAndReplace?: boolean\n+\tenableToolSearchFiles?: boolean\n+\tenableToolListFiles?: boolean\n+\tenableToolListCodeDefinitionNames?: boolean\n+\tenableToolBrowserAction?: boolean\n+\tenableToolUseMcpTool?: boolean\n+\tenableToolAccessMcpResource?: boolean\n+\tenableToolAskFollowupQuestion?: boolean\n+\tenableToolAttemptCompletion?: boolean\n+\tenableToolSwitchMode?: boolean\n+\tenableToolNewTask?: boolean\n+\tenableToolCodebaseSearch?: boolean\n+\tenableToolUpdateTodoList?: boolean\n+\tsetCachedStateField: SetCachedStateField<keyof ExtensionStateContextType>\n+}\n+\n+export const ToolsSettings: React.FC<ToolsSettingsProps> = ({\n+\tenableToolExecuteCommand = true,\n+\tenableToolReadFile = true,\n+\tenableToolFetchInstructions = true,\n+\tenableToolWriteToFile = true,\n+\tenableToolApplyDiff = true,\n+\tenableToolInsertContent = true,\n+\tenableToolSearchAndReplace = true,\n+\tenableToolSearchFiles = true,\n+\tenableToolListFiles = true,\n+\tenableToolListCodeDefinitionNames = true,\n+\tenableToolBrowserAction = true,\n+\tenableToolUseMcpTool = true,\n+\tenableToolAccessMcpResource = true,\n+\tenableToolAskFollowupQuestion = true,\n+\tenableToolAttemptCompletion = true,\n+\tenableToolSwitchMode = true,\n+\tenableToolNewTask = true,\n+\tenableToolCodebaseSearch = true,\n+\tenableToolUpdateTodoList = true,\n+\tsetCachedStateField,\n+}) => {\n+\tconst { t } = useAppTranslation()\n+\n+\tconst handleSelectAll = () => {\n+\t\tconst toolKeys = [\n+\t\t\t\"enableToolExecuteCommand\",\n+\t\t\t\"enableToolReadFile\",\n+\t\t\t\"enableToolFetchInstructions\",\n+\t\t\t\"enableToolWriteToFile\",\n+\t\t\t\"enableToolApplyDiff\",\n+\t\t\t\"enableToolInsertContent\",\n+\t\t\t\"enableToolSearchAndReplace\",\n+\t\t\t\"enableToolSearchFiles\",\n+\t\t\t\"enableToolListFiles\",\n+\t\t\t\"enableToolListCodeDefinitionNames\",\n+\t\t\t\"enableToolBrowserAction\",\n+\t\t\t\"enableToolUseMcpTool\",\n+\t\t\t\"enableToolAccessMcpResource\",\n+\t\t\t\"enableToolAskFollowupQuestion\",\n+\t\t\t\"enableToolAttemptCompletion\",\n+\t\t\t\"enableToolSwitchMode\",\n+\t\t\t\"enableToolNewTask\",\n+\t\t\t\"enableToolCodebaseSearch\",\n+\t\t\t\"enableToolUpdateTodoList\",\n+\t\t]\n+\n+\t\ttoolKeys.forEach((key) => {\n+\t\t\tsetCachedStateField(key as any, true)\n+\t\t})\n+\t}\n+\n+\tconst handleSelectNone = () => {\n+\t\tconst toolKeys = [\n+\t\t\t\"enableToolExecuteCommand\",\n+\t\t\t\"enableToolReadFile\",\n+\t\t\t\"enableToolFetchInstructions\",\n+\t\t\t\"enableToolWriteToFile\",\n+\t\t\t\"enableToolApplyDiff\",\n+\t\t\t\"enableToolInsertContent\",\n+\t\t\t\"enableToolSearchAndReplace\",\n+\t\t\t\"enableToolSearchFiles\",\n+\t\t\t\"enableToolListFiles\",\n+\t\t\t\"enableToolListCodeDefinitionNames\",\n+\t\t\t\"enableToolBrowserAction\",\n+\t\t\t\"enableToolUseMcpTool\",\n+\t\t\t\"enableToolAccessMcpResource\",\n+\t\t\t\"enableToolAskFollowupQuestion\",\n+\t\t\t\"enableToolAttemptCompletion\",\n+\t\t\t\"enableToolSwitchMode\",\n+\t\t\t\"enableToolNewTask\",\n+\t\t\t\"enableToolCodebaseSearch\",\n+\t\t\t\"enableToolUpdateTodoList\",\n+\t\t]\n+\n+\t\ttoolKeys.forEach((key) => {\n+\t\t\tsetCachedStateField(key as any, false)\n+\t\t})\n+\t}\n+\n+\t// Using existing tool groups from codebase, ordered by usage frequency (most common first)\n+\tconst toolGroups = [",
        "comment_created_at": "2025-07-20T01:37:17+00:00",
        "comment_author": "KJ7LNW",
        "comment_body": "done\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2182960610",
    "pr_number": 5368,
    "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
    "created_at": "2025-07-03T14:36:45+00:00",
    "commented_code": "}),\n \t)\n \tconst autoApproveTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n+\tconst [followUpAnswered, setFollowUpAnswered] = useState<Set<number>>(new Set())",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2182960610",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5368,
        "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
        "discussion_id": "2182960610",
        "commented_code": "@@ -163,6 +163,7 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro\n \t\t}),\n \t)\n \tconst autoApproveTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n+\tconst [followUpAnswered, setFollowUpAnswered] = useState<Set<number>>(new Set())",
        "comment_created_at": "2025-07-03T14:36:45+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "Have you considered using a simpler state management approach here? Instead of tracking all answered follow-ups in a Set, you could track just the current active follow-up question's timestamp and clear it when answered. This would avoid the need to manage a growing collection of timestamps.\n\nFor example:\n```typescript\nconst [currentFollowUpTs, setCurrentFollowUpTs] = useState<number | null>(null)\n```\n\nThen check `message.ts === currentFollowUpTs` instead of using a Set.",
        "pr_file_module": null
      },
      {
        "comment_id": "2183742941",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5368,
        "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
        "discussion_id": "2182960610",
        "commented_code": "@@ -163,6 +163,7 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro\n \t\t}),\n \t)\n \tconst autoApproveTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n+\tconst [followUpAnswered, setFollowUpAnswered] = useState<Set<number>>(new Set())",
        "comment_created_at": "2025-07-03T20:57:58+00:00",
        "comment_author": "liwilliam2021",
        "comment_body": "oh yeah I totally missed that-- yeah makes sense",
        "pr_file_module": null
      }
    ]
  }
]