[
  {
    "discussion_id": "2214050415",
    "pr_number": 5798,
    "pr_file": "webview-ui/src/components/chat/CommandPatternSelector.tsx",
    "created_at": "2025-07-17T18:47:03+00:00",
    "commented_code": "+import React, { useState } from \"react\"\n+import { Check, ChevronDown, Info, X } from \"lucide-react\"\n+import { cn } from \"../../lib/utils\"\n+import { useTranslation, Trans } from \"react-i18next\"\n+import { VSCodeLink } from \"@vscode/webview-ui-toolkit/react\"\n+import { CommandPattern } from \"../../utils/commandPatterns\"\n+import { StandardTooltip } from \"../ui/standard-tooltip\"\n+\n+interface CommandPatternSelectorProps {\n+\tpatterns: CommandPattern[]\n+\tallowedCommands: string[]\n+\tdeniedCommands: string[]\n+\tonAllowPatternChange: (pattern: string) => void\n+\tonDenyPatternChange: (pattern: string) => void\n+}\n+\n+export const CommandPatternSelector: React.FC<CommandPatternSelectorProps> = ({\n+\tpatterns,\n+\tallowedCommands,\n+\tdeniedCommands,\n+\tonAllowPatternChange,\n+\tonDenyPatternChange,\n+}) => {\n+\tconst { t } = useTranslation()\n+\tconst [isExpanded, setIsExpanded] = useState(false)\n+\n+\tconst getPatternStatus = (pattern: string): \"allowed\" | \"denied\" | \"none\" => {\n+\t\tif (allowedCommands.includes(pattern)) return \"allowed\"\n+\t\tif (deniedCommands.includes(pattern)) return \"denied\"\n+\t\treturn \"none\"\n+\t}\n+\n+\treturn (\n+\t\t<div className=\"border-t border-vscode-panel-border bg-vscode-sideBar-background/30\">\n+\t\t\t<button\n+\t\t\t\tonClick={() => setIsExpanded(!isExpanded)}\n+\t\t\t\tclassName=\"flex items-center gap-2 w-full px-3 py-2 text-xs text-vscode-descriptionForeground hover:text-vscode-foreground hover:bg-vscode-list-hoverBackground transition-all\"\n+\t\t\t\taria-expanded={isExpanded}\n+\t\t\t\taria-label={t(\n+\t\t\t\t\tisExpanded ? \"chat:commandExecution.collapseManagement\" : \"chat:commandExecution.expandManagement\",\n+\t\t\t\t)}>\n+\t\t\t\t<ChevronDown\n+\t\t\t\t\tclassName={cn(\"size-3 transition-transform duration-200\", {\n+\t\t\t\t\t\t\"rotate-0\": isExpanded,\n+\t\t\t\t\t\t\"-rotate-90\": !isExpanded,\n+\t\t\t\t\t})}\n+\t\t\t\t/>\n+\t\t\t\t<span className=\"font-medium\">{t(\"chat:commandExecution.manageCommands\")}</span>\n+\t\t\t\t<StandardTooltip\n+\t\t\t\t\tcontent={\n+\t\t\t\t\t\t<Trans\n+\t\t\t\t\t\t\ti18nKey=\"chat:commandExecution.commandManagementDescription\"\n+\t\t\t\t\t\t\tcomponents={{\n+\t\t\t\t\t\t\t\tsettingsLink: (\n+\t\t\t\t\t\t\t\t\t<VSCodeLink\n+\t\t\t\t\t\t\t\t\t\thref=\"#\"\n+\t\t\t\t\t\t\t\t\t\tonClick={(e) => {\n+\t\t\t\t\t\t\t\t\t\t\te.preventDefault()\n+\t\t\t\t\t\t\t\t\t\t\twindow.postMessage(\n+\t\t\t\t\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"action\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\taction: \"settingsButtonClicked\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\tvalues: { section: \"autoApprove\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\"*\",\n+\t\t\t\t\t\t\t\t\t\t\t)\n+\t\t\t\t\t\t\t\t\t\t}}\n+\t\t\t\t\t\t\t\t\t\tclassName=\"inline\"\n+\t\t\t\t\t\t\t\t\t/>\n+\t\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t\t}}\n+\t\t\t\t\t\t/>\n+\t\t\t\t\t}>\n+\t\t\t\t\t<Info className=\"size-3 ml-1\" />\n+\t\t\t\t</StandardTooltip>\n+\t\t\t</button>\n+\n+\t\t\t{isExpanded && (\n+\t\t\t\t<div className=\"px-3 pb-3 space-y-2\">\n+\t\t\t\t\t{patterns.map((item, index) => {\n+\t\t\t\t\t\tconst status = getPatternStatus(item.pattern)\n+\t\t\t\t\t\treturn (\n+\t\t\t\t\t\t\t<div key={`${item.pattern}-${index}`} className=\"ml-5 flex items-center gap-2\">",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2214050415",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5798,
        "pr_file": "webview-ui/src/components/chat/CommandPatternSelector.tsx",
        "discussion_id": "2214050415",
        "commented_code": "@@ -0,0 +1,130 @@\n+import React, { useState } from \"react\"\n+import { Check, ChevronDown, Info, X } from \"lucide-react\"\n+import { cn } from \"../../lib/utils\"\n+import { useTranslation, Trans } from \"react-i18next\"\n+import { VSCodeLink } from \"@vscode/webview-ui-toolkit/react\"\n+import { CommandPattern } from \"../../utils/commandPatterns\"\n+import { StandardTooltip } from \"../ui/standard-tooltip\"\n+\n+interface CommandPatternSelectorProps {\n+\tpatterns: CommandPattern[]\n+\tallowedCommands: string[]\n+\tdeniedCommands: string[]\n+\tonAllowPatternChange: (pattern: string) => void\n+\tonDenyPatternChange: (pattern: string) => void\n+}\n+\n+export const CommandPatternSelector: React.FC<CommandPatternSelectorProps> = ({\n+\tpatterns,\n+\tallowedCommands,\n+\tdeniedCommands,\n+\tonAllowPatternChange,\n+\tonDenyPatternChange,\n+}) => {\n+\tconst { t } = useTranslation()\n+\tconst [isExpanded, setIsExpanded] = useState(false)\n+\n+\tconst getPatternStatus = (pattern: string): \"allowed\" | \"denied\" | \"none\" => {\n+\t\tif (allowedCommands.includes(pattern)) return \"allowed\"\n+\t\tif (deniedCommands.includes(pattern)) return \"denied\"\n+\t\treturn \"none\"\n+\t}\n+\n+\treturn (\n+\t\t<div className=\"border-t border-vscode-panel-border bg-vscode-sideBar-background/30\">\n+\t\t\t<button\n+\t\t\t\tonClick={() => setIsExpanded(!isExpanded)}\n+\t\t\t\tclassName=\"flex items-center gap-2 w-full px-3 py-2 text-xs text-vscode-descriptionForeground hover:text-vscode-foreground hover:bg-vscode-list-hoverBackground transition-all\"\n+\t\t\t\taria-expanded={isExpanded}\n+\t\t\t\taria-label={t(\n+\t\t\t\t\tisExpanded ? \"chat:commandExecution.collapseManagement\" : \"chat:commandExecution.expandManagement\",\n+\t\t\t\t)}>\n+\t\t\t\t<ChevronDown\n+\t\t\t\t\tclassName={cn(\"size-3 transition-transform duration-200\", {\n+\t\t\t\t\t\t\"rotate-0\": isExpanded,\n+\t\t\t\t\t\t\"-rotate-90\": !isExpanded,\n+\t\t\t\t\t})}\n+\t\t\t\t/>\n+\t\t\t\t<span className=\"font-medium\">{t(\"chat:commandExecution.manageCommands\")}</span>\n+\t\t\t\t<StandardTooltip\n+\t\t\t\t\tcontent={\n+\t\t\t\t\t\t<Trans\n+\t\t\t\t\t\t\ti18nKey=\"chat:commandExecution.commandManagementDescription\"\n+\t\t\t\t\t\t\tcomponents={{\n+\t\t\t\t\t\t\t\tsettingsLink: (\n+\t\t\t\t\t\t\t\t\t<VSCodeLink\n+\t\t\t\t\t\t\t\t\t\thref=\"#\"\n+\t\t\t\t\t\t\t\t\t\tonClick={(e) => {\n+\t\t\t\t\t\t\t\t\t\t\te.preventDefault()\n+\t\t\t\t\t\t\t\t\t\t\twindow.postMessage(\n+\t\t\t\t\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"action\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\taction: \"settingsButtonClicked\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\tvalues: { section: \"autoApprove\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\"*\",\n+\t\t\t\t\t\t\t\t\t\t\t)\n+\t\t\t\t\t\t\t\t\t\t}}\n+\t\t\t\t\t\t\t\t\t\tclassName=\"inline\"\n+\t\t\t\t\t\t\t\t\t/>\n+\t\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t\t}}\n+\t\t\t\t\t\t/>\n+\t\t\t\t\t}>\n+\t\t\t\t\t<Info className=\"size-3 ml-1\" />\n+\t\t\t\t</StandardTooltip>\n+\t\t\t</button>\n+\n+\t\t\t{isExpanded && (\n+\t\t\t\t<div className=\"px-3 pb-3 space-y-2\">\n+\t\t\t\t\t{patterns.map((item, index) => {\n+\t\t\t\t\t\tconst status = getPatternStatus(item.pattern)\n+\t\t\t\t\t\treturn (\n+\t\t\t\t\t\t\t<div key={`${item.pattern}-${index}`} className=\"ml-5 flex items-center gap-2\">",
        "comment_created_at": "2025-07-17T18:47:03+00:00",
        "comment_author": "Copilot",
        "comment_body": "Using array index in React keys is discouraged when the list can change. Since patterns are unique strings, consider using just `item.pattern` as the key instead of `${item.pattern}-${index}`.\n```suggestion\n\t\t\t\t\t\t\t<div key={item.pattern} className=\"ml-5 flex items-center gap-2\">\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2217525546",
    "pr_number": 5964,
    "pr_file": "webview-ui/src/components/settings/ToolsSettings.tsx",
    "created_at": "2025-07-20T01:27:35+00:00",
    "commented_code": "+import React from \"react\"\n+import { useAppTranslation } from \"@/i18n/TranslationContext\"\n+import { VSCodeCheckbox, VSCodeButton } from \"@vscode/webview-ui-toolkit/react\"\n+import { Wrench } from \"lucide-react\"\n+\n+import { SetCachedStateField } from \"./types\"\n+import { SectionHeader } from \"./SectionHeader\"\n+import { Section } from \"./Section\"\n+import { ExtensionStateContextType } from \"@/context/ExtensionStateContext\"\n+\n+interface ToolsSettingsProps {\n+\tenableToolExecuteCommand?: boolean\n+\tenableToolReadFile?: boolean\n+\tenableToolFetchInstructions?: boolean\n+\tenableToolWriteToFile?: boolean\n+\tenableToolApplyDiff?: boolean\n+\tenableToolInsertContent?: boolean\n+\tenableToolSearchAndReplace?: boolean\n+\tenableToolSearchFiles?: boolean\n+\tenableToolListFiles?: boolean\n+\tenableToolListCodeDefinitionNames?: boolean\n+\tenableToolBrowserAction?: boolean\n+\tenableToolUseMcpTool?: boolean\n+\tenableToolAccessMcpResource?: boolean\n+\tenableToolAskFollowupQuestion?: boolean\n+\tenableToolAttemptCompletion?: boolean\n+\tenableToolSwitchMode?: boolean\n+\tenableToolNewTask?: boolean\n+\tenableToolCodebaseSearch?: boolean\n+\tenableToolUpdateTodoList?: boolean\n+\tsetCachedStateField: SetCachedStateField<keyof ExtensionStateContextType>\n+}\n+\n+export const ToolsSettings: React.FC<ToolsSettingsProps> = ({\n+\tenableToolExecuteCommand = true,\n+\tenableToolReadFile = true,\n+\tenableToolFetchInstructions = true,\n+\tenableToolWriteToFile = true,\n+\tenableToolApplyDiff = true,\n+\tenableToolInsertContent = true,\n+\tenableToolSearchAndReplace = true,\n+\tenableToolSearchFiles = true,\n+\tenableToolListFiles = true,\n+\tenableToolListCodeDefinitionNames = true,\n+\tenableToolBrowserAction = true,\n+\tenableToolUseMcpTool = true,\n+\tenableToolAccessMcpResource = true,\n+\tenableToolAskFollowupQuestion = true,\n+\tenableToolAttemptCompletion = true,\n+\tenableToolSwitchMode = true,\n+\tenableToolNewTask = true,\n+\tenableToolCodebaseSearch = true,\n+\tenableToolUpdateTodoList = true,\n+\tsetCachedStateField,\n+}) => {\n+\tconst { t } = useAppTranslation()\n+\n+\tconst handleSelectAll = () => {\n+\t\tconst toolKeys = [\n+\t\t\t\"enableToolExecuteCommand\",\n+\t\t\t\"enableToolReadFile\",\n+\t\t\t\"enableToolFetchInstructions\",\n+\t\t\t\"enableToolWriteToFile\",\n+\t\t\t\"enableToolApplyDiff\",\n+\t\t\t\"enableToolInsertContent\",\n+\t\t\t\"enableToolSearchAndReplace\",\n+\t\t\t\"enableToolSearchFiles\",\n+\t\t\t\"enableToolListFiles\",\n+\t\t\t\"enableToolListCodeDefinitionNames\",\n+\t\t\t\"enableToolBrowserAction\",\n+\t\t\t\"enableToolUseMcpTool\",\n+\t\t\t\"enableToolAccessMcpResource\",\n+\t\t\t\"enableToolAskFollowupQuestion\",\n+\t\t\t\"enableToolAttemptCompletion\",\n+\t\t\t\"enableToolSwitchMode\",\n+\t\t\t\"enableToolNewTask\",\n+\t\t\t\"enableToolCodebaseSearch\",\n+\t\t\t\"enableToolUpdateTodoList\",\n+\t\t]\n+\n+\t\ttoolKeys.forEach((key) => {\n+\t\t\tsetCachedStateField(key as any, true)\n+\t\t})\n+\t}\n+\n+\tconst handleSelectNone = () => {\n+\t\tconst toolKeys = [\n+\t\t\t\"enableToolExecuteCommand\",\n+\t\t\t\"enableToolReadFile\",\n+\t\t\t\"enableToolFetchInstructions\",\n+\t\t\t\"enableToolWriteToFile\",\n+\t\t\t\"enableToolApplyDiff\",\n+\t\t\t\"enableToolInsertContent\",\n+\t\t\t\"enableToolSearchAndReplace\",\n+\t\t\t\"enableToolSearchFiles\",\n+\t\t\t\"enableToolListFiles\",\n+\t\t\t\"enableToolListCodeDefinitionNames\",\n+\t\t\t\"enableToolBrowserAction\",\n+\t\t\t\"enableToolUseMcpTool\",\n+\t\t\t\"enableToolAccessMcpResource\",\n+\t\t\t\"enableToolAskFollowupQuestion\",\n+\t\t\t\"enableToolAttemptCompletion\",\n+\t\t\t\"enableToolSwitchMode\",\n+\t\t\t\"enableToolNewTask\",\n+\t\t\t\"enableToolCodebaseSearch\",\n+\t\t\t\"enableToolUpdateTodoList\",\n+\t\t]\n+\n+\t\ttoolKeys.forEach((key) => {\n+\t\t\tsetCachedStateField(key as any, false)\n+\t\t})\n+\t}\n+\n+\t// Using existing tool groups from codebase, ordered by usage frequency (most common first)\n+\tconst toolGroups = [",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2217525546",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5964,
        "pr_file": "webview-ui/src/components/settings/ToolsSettings.tsx",
        "discussion_id": "2217525546",
        "commented_code": "@@ -0,0 +1,316 @@\n+import React from \"react\"\n+import { useAppTranslation } from \"@/i18n/TranslationContext\"\n+import { VSCodeCheckbox, VSCodeButton } from \"@vscode/webview-ui-toolkit/react\"\n+import { Wrench } from \"lucide-react\"\n+\n+import { SetCachedStateField } from \"./types\"\n+import { SectionHeader } from \"./SectionHeader\"\n+import { Section } from \"./Section\"\n+import { ExtensionStateContextType } from \"@/context/ExtensionStateContext\"\n+\n+interface ToolsSettingsProps {\n+\tenableToolExecuteCommand?: boolean\n+\tenableToolReadFile?: boolean\n+\tenableToolFetchInstructions?: boolean\n+\tenableToolWriteToFile?: boolean\n+\tenableToolApplyDiff?: boolean\n+\tenableToolInsertContent?: boolean\n+\tenableToolSearchAndReplace?: boolean\n+\tenableToolSearchFiles?: boolean\n+\tenableToolListFiles?: boolean\n+\tenableToolListCodeDefinitionNames?: boolean\n+\tenableToolBrowserAction?: boolean\n+\tenableToolUseMcpTool?: boolean\n+\tenableToolAccessMcpResource?: boolean\n+\tenableToolAskFollowupQuestion?: boolean\n+\tenableToolAttemptCompletion?: boolean\n+\tenableToolSwitchMode?: boolean\n+\tenableToolNewTask?: boolean\n+\tenableToolCodebaseSearch?: boolean\n+\tenableToolUpdateTodoList?: boolean\n+\tsetCachedStateField: SetCachedStateField<keyof ExtensionStateContextType>\n+}\n+\n+export const ToolsSettings: React.FC<ToolsSettingsProps> = ({\n+\tenableToolExecuteCommand = true,\n+\tenableToolReadFile = true,\n+\tenableToolFetchInstructions = true,\n+\tenableToolWriteToFile = true,\n+\tenableToolApplyDiff = true,\n+\tenableToolInsertContent = true,\n+\tenableToolSearchAndReplace = true,\n+\tenableToolSearchFiles = true,\n+\tenableToolListFiles = true,\n+\tenableToolListCodeDefinitionNames = true,\n+\tenableToolBrowserAction = true,\n+\tenableToolUseMcpTool = true,\n+\tenableToolAccessMcpResource = true,\n+\tenableToolAskFollowupQuestion = true,\n+\tenableToolAttemptCompletion = true,\n+\tenableToolSwitchMode = true,\n+\tenableToolNewTask = true,\n+\tenableToolCodebaseSearch = true,\n+\tenableToolUpdateTodoList = true,\n+\tsetCachedStateField,\n+}) => {\n+\tconst { t } = useAppTranslation()\n+\n+\tconst handleSelectAll = () => {\n+\t\tconst toolKeys = [\n+\t\t\t\"enableToolExecuteCommand\",\n+\t\t\t\"enableToolReadFile\",\n+\t\t\t\"enableToolFetchInstructions\",\n+\t\t\t\"enableToolWriteToFile\",\n+\t\t\t\"enableToolApplyDiff\",\n+\t\t\t\"enableToolInsertContent\",\n+\t\t\t\"enableToolSearchAndReplace\",\n+\t\t\t\"enableToolSearchFiles\",\n+\t\t\t\"enableToolListFiles\",\n+\t\t\t\"enableToolListCodeDefinitionNames\",\n+\t\t\t\"enableToolBrowserAction\",\n+\t\t\t\"enableToolUseMcpTool\",\n+\t\t\t\"enableToolAccessMcpResource\",\n+\t\t\t\"enableToolAskFollowupQuestion\",\n+\t\t\t\"enableToolAttemptCompletion\",\n+\t\t\t\"enableToolSwitchMode\",\n+\t\t\t\"enableToolNewTask\",\n+\t\t\t\"enableToolCodebaseSearch\",\n+\t\t\t\"enableToolUpdateTodoList\",\n+\t\t]\n+\n+\t\ttoolKeys.forEach((key) => {\n+\t\t\tsetCachedStateField(key as any, true)\n+\t\t})\n+\t}\n+\n+\tconst handleSelectNone = () => {\n+\t\tconst toolKeys = [\n+\t\t\t\"enableToolExecuteCommand\",\n+\t\t\t\"enableToolReadFile\",\n+\t\t\t\"enableToolFetchInstructions\",\n+\t\t\t\"enableToolWriteToFile\",\n+\t\t\t\"enableToolApplyDiff\",\n+\t\t\t\"enableToolInsertContent\",\n+\t\t\t\"enableToolSearchAndReplace\",\n+\t\t\t\"enableToolSearchFiles\",\n+\t\t\t\"enableToolListFiles\",\n+\t\t\t\"enableToolListCodeDefinitionNames\",\n+\t\t\t\"enableToolBrowserAction\",\n+\t\t\t\"enableToolUseMcpTool\",\n+\t\t\t\"enableToolAccessMcpResource\",\n+\t\t\t\"enableToolAskFollowupQuestion\",\n+\t\t\t\"enableToolAttemptCompletion\",\n+\t\t\t\"enableToolSwitchMode\",\n+\t\t\t\"enableToolNewTask\",\n+\t\t\t\"enableToolCodebaseSearch\",\n+\t\t\t\"enableToolUpdateTodoList\",\n+\t\t]\n+\n+\t\ttoolKeys.forEach((key) => {\n+\t\t\tsetCachedStateField(key as any, false)\n+\t\t})\n+\t}\n+\n+\t// Using existing tool groups from codebase, ordered by usage frequency (most common first)\n+\tconst toolGroups = [",
        "comment_created_at": "2025-07-20T01:27:35+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "The component implements individual tool controls well. Consider memoizing the toolGroups array (using useMemo) so it isn\u2019t re-computed on every render. Also, instead of using numeric indices as keys for groups, use a unique string (e.g. the group title) for better React key stability.\n```suggestion\n\tconst toolGroups = React.useMemo(() => [\n```\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2217527197",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5964,
        "pr_file": "webview-ui/src/components/settings/ToolsSettings.tsx",
        "discussion_id": "2217525546",
        "commented_code": "@@ -0,0 +1,316 @@\n+import React from \"react\"\n+import { useAppTranslation } from \"@/i18n/TranslationContext\"\n+import { VSCodeCheckbox, VSCodeButton } from \"@vscode/webview-ui-toolkit/react\"\n+import { Wrench } from \"lucide-react\"\n+\n+import { SetCachedStateField } from \"./types\"\n+import { SectionHeader } from \"./SectionHeader\"\n+import { Section } from \"./Section\"\n+import { ExtensionStateContextType } from \"@/context/ExtensionStateContext\"\n+\n+interface ToolsSettingsProps {\n+\tenableToolExecuteCommand?: boolean\n+\tenableToolReadFile?: boolean\n+\tenableToolFetchInstructions?: boolean\n+\tenableToolWriteToFile?: boolean\n+\tenableToolApplyDiff?: boolean\n+\tenableToolInsertContent?: boolean\n+\tenableToolSearchAndReplace?: boolean\n+\tenableToolSearchFiles?: boolean\n+\tenableToolListFiles?: boolean\n+\tenableToolListCodeDefinitionNames?: boolean\n+\tenableToolBrowserAction?: boolean\n+\tenableToolUseMcpTool?: boolean\n+\tenableToolAccessMcpResource?: boolean\n+\tenableToolAskFollowupQuestion?: boolean\n+\tenableToolAttemptCompletion?: boolean\n+\tenableToolSwitchMode?: boolean\n+\tenableToolNewTask?: boolean\n+\tenableToolCodebaseSearch?: boolean\n+\tenableToolUpdateTodoList?: boolean\n+\tsetCachedStateField: SetCachedStateField<keyof ExtensionStateContextType>\n+}\n+\n+export const ToolsSettings: React.FC<ToolsSettingsProps> = ({\n+\tenableToolExecuteCommand = true,\n+\tenableToolReadFile = true,\n+\tenableToolFetchInstructions = true,\n+\tenableToolWriteToFile = true,\n+\tenableToolApplyDiff = true,\n+\tenableToolInsertContent = true,\n+\tenableToolSearchAndReplace = true,\n+\tenableToolSearchFiles = true,\n+\tenableToolListFiles = true,\n+\tenableToolListCodeDefinitionNames = true,\n+\tenableToolBrowserAction = true,\n+\tenableToolUseMcpTool = true,\n+\tenableToolAccessMcpResource = true,\n+\tenableToolAskFollowupQuestion = true,\n+\tenableToolAttemptCompletion = true,\n+\tenableToolSwitchMode = true,\n+\tenableToolNewTask = true,\n+\tenableToolCodebaseSearch = true,\n+\tenableToolUpdateTodoList = true,\n+\tsetCachedStateField,\n+}) => {\n+\tconst { t } = useAppTranslation()\n+\n+\tconst handleSelectAll = () => {\n+\t\tconst toolKeys = [\n+\t\t\t\"enableToolExecuteCommand\",\n+\t\t\t\"enableToolReadFile\",\n+\t\t\t\"enableToolFetchInstructions\",\n+\t\t\t\"enableToolWriteToFile\",\n+\t\t\t\"enableToolApplyDiff\",\n+\t\t\t\"enableToolInsertContent\",\n+\t\t\t\"enableToolSearchAndReplace\",\n+\t\t\t\"enableToolSearchFiles\",\n+\t\t\t\"enableToolListFiles\",\n+\t\t\t\"enableToolListCodeDefinitionNames\",\n+\t\t\t\"enableToolBrowserAction\",\n+\t\t\t\"enableToolUseMcpTool\",\n+\t\t\t\"enableToolAccessMcpResource\",\n+\t\t\t\"enableToolAskFollowupQuestion\",\n+\t\t\t\"enableToolAttemptCompletion\",\n+\t\t\t\"enableToolSwitchMode\",\n+\t\t\t\"enableToolNewTask\",\n+\t\t\t\"enableToolCodebaseSearch\",\n+\t\t\t\"enableToolUpdateTodoList\",\n+\t\t]\n+\n+\t\ttoolKeys.forEach((key) => {\n+\t\t\tsetCachedStateField(key as any, true)\n+\t\t})\n+\t}\n+\n+\tconst handleSelectNone = () => {\n+\t\tconst toolKeys = [\n+\t\t\t\"enableToolExecuteCommand\",\n+\t\t\t\"enableToolReadFile\",\n+\t\t\t\"enableToolFetchInstructions\",\n+\t\t\t\"enableToolWriteToFile\",\n+\t\t\t\"enableToolApplyDiff\",\n+\t\t\t\"enableToolInsertContent\",\n+\t\t\t\"enableToolSearchAndReplace\",\n+\t\t\t\"enableToolSearchFiles\",\n+\t\t\t\"enableToolListFiles\",\n+\t\t\t\"enableToolListCodeDefinitionNames\",\n+\t\t\t\"enableToolBrowserAction\",\n+\t\t\t\"enableToolUseMcpTool\",\n+\t\t\t\"enableToolAccessMcpResource\",\n+\t\t\t\"enableToolAskFollowupQuestion\",\n+\t\t\t\"enableToolAttemptCompletion\",\n+\t\t\t\"enableToolSwitchMode\",\n+\t\t\t\"enableToolNewTask\",\n+\t\t\t\"enableToolCodebaseSearch\",\n+\t\t\t\"enableToolUpdateTodoList\",\n+\t\t]\n+\n+\t\ttoolKeys.forEach((key) => {\n+\t\t\tsetCachedStateField(key as any, false)\n+\t\t})\n+\t}\n+\n+\t// Using existing tool groups from codebase, ordered by usage frequency (most common first)\n+\tconst toolGroups = [",
        "comment_created_at": "2025-07-20T01:37:17+00:00",
        "comment_author": "KJ7LNW",
        "comment_body": "done\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2219495775",
    "pr_number": 6018,
    "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
    "created_at": "2025-07-21T15:06:41+00:00",
    "commented_code": "handleSendMessage(inputValue, selectedImages)\n \t\t\t}\n \t\t},\n+\t\ttriggerEnhancePrompt: () => {\n+\t\t\t// Find the enhance prompt button and trigger its click\n+\t\t\tconst enhanceButton = document.querySelector('[aria-label*=\"enhance\"]') as HTMLButtonElement",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2219495775",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 6018,
        "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
        "discussion_id": "2219495775",
        "commented_code": "@@ -1616,6 +1617,13 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro\n \t\t\t\thandleSendMessage(inputValue, selectedImages)\n \t\t\t}\n \t\t},\n+\t\ttriggerEnhancePrompt: () => {\n+\t\t\t// Find the enhance prompt button and trigger its click\n+\t\t\tconst enhanceButton = document.querySelector('[aria-label*=\"enhance\"]') as HTMLButtonElement",
        "comment_created_at": "2025-07-21T15:06:41+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Instead of using document.querySelector('[aria-label*=\"enhance\"]') to find the enhance prompt button, consider passing a ref from the ChatTextArea component. This will improve reliability and maintainability.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2182960610",
    "pr_number": 5368,
    "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
    "created_at": "2025-07-03T14:36:45+00:00",
    "commented_code": "}),\n \t)\n \tconst autoApproveTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n+\tconst [followUpAnswered, setFollowUpAnswered] = useState<Set<number>>(new Set())",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2182960610",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5368,
        "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
        "discussion_id": "2182960610",
        "commented_code": "@@ -163,6 +163,7 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro\n \t\t}),\n \t)\n \tconst autoApproveTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n+\tconst [followUpAnswered, setFollowUpAnswered] = useState<Set<number>>(new Set())",
        "comment_created_at": "2025-07-03T14:36:45+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "Have you considered using a simpler state management approach here? Instead of tracking all answered follow-ups in a Set, you could track just the current active follow-up question's timestamp and clear it when answered. This would avoid the need to manage a growing collection of timestamps.\n\nFor example:\n```typescript\nconst [currentFollowUpTs, setCurrentFollowUpTs] = useState<number | null>(null)\n```\n\nThen check `message.ts === currentFollowUpTs` instead of using a Set.",
        "pr_file_module": null
      },
      {
        "comment_id": "2183742941",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5368,
        "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
        "discussion_id": "2182960610",
        "commented_code": "@@ -163,6 +163,7 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro\n \t\t}),\n \t)\n \tconst autoApproveTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n+\tconst [followUpAnswered, setFollowUpAnswered] = useState<Set<number>>(new Set())",
        "comment_created_at": "2025-07-03T20:57:58+00:00",
        "comment_author": "liwilliam2021",
        "comment_body": "oh yeah I totally missed that-- yeah makes sense",
        "pr_file_module": null
      }
    ]
  }
]