[
  {
    "discussion_id": "2130822276",
    "pr_number": 4002,
    "pr_file": "src/utils/fs.ts",
    "created_at": "2025-06-05T23:03:44+00:00",
    "commented_code": "return false\n \t}\n }\n+\n+/**\n+ * Safely read a file and return its trimmed content\n+ */\n+export async function safeReadFile(filePath: string): Promise<string> {\n+\ttry {\n+\t\tconst content = await fs.readFile(filePath, \"utf-8\")\n+\t\treturn content ? content.trim() : \"\"\n+\t} catch (err) {\n+\t\tconst errorCode = (err as NodeJS.ErrnoException).code\n+\t\tif (!errorCode || ![\"ENOENT\", \"EISDIR\"].includes(errorCode)) {",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2130822276",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 4002,
        "pr_file": "src/utils/fs.ts",
        "discussion_id": "2130822276",
        "commented_code": "@@ -45,3 +45,19 @@ export async function fileExistsAtPath(filePath: string): Promise<boolean> {\n \t\treturn false\n \t}\n }\n+\n+/**\n+ * Safely read a file and return its trimmed content\n+ */\n+export async function safeReadFile(filePath: string): Promise<string> {\n+\ttry {\n+\t\tconst content = await fs.readFile(filePath, \"utf-8\")\n+\t\treturn content ? content.trim() : \"\"\n+\t} catch (err) {\n+\t\tconst errorCode = (err as NodeJS.ErrnoException).code\n+\t\tif (!errorCode || ![\"ENOENT\", \"EISDIR\"].includes(errorCode)) {",
        "comment_created_at": "2025-06-05T23:03:44+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "This error handling pattern for ENOENT is duplicated in multiple places:\r\n- Here in `safeReadFile`\r\n- In `ClineProvider.updateContent`\r\n- In `custom-instructions.ts`\r\n- In `custom-system-prompt.ts`\r\n\r\nIt would be a good idea to consolidate this on a single helper function.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2093922018",
    "pr_number": 3693,
    "pr_file": "src/integrations/terminal/ExecaTerminalProcess.ts",
    "created_at": "2025-05-17T05:06:14+00:00",
    "commented_code": "timeoutId = setTimeout(() => {\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tsubprocess.kill(\"SIGKILL\")\n-\t\t\t\t\t\t} catch (e) {}\n+\t\t\t\t\t\t} catch {}",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2093962589",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 3693,
        "pr_file": "src/integrations/terminal/ExecaTerminalProcess.ts",
        "discussion_id": "2093922018",
        "commented_code": "@@ -70,7 +70,7 @@ export class ExecaTerminalProcess extends BaseTerminalProcess {\n \t\t\t\t\ttimeoutId = setTimeout(() => {\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tsubprocess.kill(\"SIGKILL\")\n-\t\t\t\t\t\t} catch (e) {}\n+\t\t\t\t\t\t} catch {}",
        "comment_created_at": "2025-05-17T05:56:52+00:00",
        "comment_author": "KJ7LNW",
        "comment_body": "maybe we need a lint for this?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2099080507",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 3693,
        "pr_file": "src/integrations/terminal/ExecaTerminalProcess.ts",
        "discussion_id": "2093922018",
        "commented_code": "@@ -70,7 +70,7 @@ export class ExecaTerminalProcess extends BaseTerminalProcess {\n \t\t\t\t\ttimeoutId = setTimeout(() => {\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tsubprocess.kill(\"SIGKILL\")\n-\t\t\t\t\t\t} catch (e) {}\n+\t\t\t\t\t\t} catch {}",
        "comment_created_at": "2025-05-21T00:33:19+00:00",
        "comment_author": "KJ7LNW",
        "comment_body": "fixed via no-empty",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2172827569",
    "pr_number": 5185,
    "pr_file": "src/core/tools/useMcpToolTool.ts",
    "created_at": "2025-06-27T20:25:13+00:00",
    "commented_code": "})\n }\n \n-function processToolContent(toolResult: any): string {\n+function processToolContent(toolResult: any): { text: string; images: string[] } {\n \tif (!toolResult?.content || toolResult.content.length === 0) {\n-\t\treturn \"\"\n+\t\treturn { text: \"\", images: [] }\n \t}\n \n-\treturn toolResult.content\n-\t\t.map((item: any) => {\n-\t\t\tif (item.type === \"text\") {\n-\t\t\t\treturn item.text\n+\tconst textParts: string[] = []\n+\tconst images: string[] = []\n+\n+\ttoolResult.content.forEach((item: any) => {\n+\t\tif (item.type === \"text\") {\n+\t\t\ttextParts.push(item.text)\n+\t\t} else if (item.type === \"image\") {\n+\t\t\tif (item.data && item.mimeType) {\n+\t\t\t\tconst validImageTypes = [\"image/png\", \"image/jpeg\", \"image/gif\", \"image/webp\"]\n+\t\t\t\tif (validImageTypes.includes(item.mimeType)) {\n+\t\t\t\t\tconst dataUrl = `data:${item.mimeType};base64,${item.data}`\n+\t\t\t\t\timages.push(dataUrl)",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2172827569",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5185,
        "pr_file": "src/core/tools/useMcpToolTool.ts",
        "discussion_id": "2172827569",
        "commented_code": "@@ -89,24 +89,39 @@ async function sendExecutionStatus(cline: Task, status: McpExecutionStatus): Pro\n \t})\n }\n \n-function processToolContent(toolResult: any): string {\n+function processToolContent(toolResult: any): { text: string; images: string[] } {\n \tif (!toolResult?.content || toolResult.content.length === 0) {\n-\t\treturn \"\"\n+\t\treturn { text: \"\", images: [] }\n \t}\n \n-\treturn toolResult.content\n-\t\t.map((item: any) => {\n-\t\t\tif (item.type === \"text\") {\n-\t\t\t\treturn item.text\n+\tconst textParts: string[] = []\n+\tconst images: string[] = []\n+\n+\ttoolResult.content.forEach((item: any) => {\n+\t\tif (item.type === \"text\") {\n+\t\t\ttextParts.push(item.text)\n+\t\t} else if (item.type === \"image\") {\n+\t\t\tif (item.data && item.mimeType) {\n+\t\t\t\tconst validImageTypes = [\"image/png\", \"image/jpeg\", \"image/gif\", \"image/webp\"]\n+\t\t\t\tif (validImageTypes.includes(item.mimeType)) {\n+\t\t\t\t\tconst dataUrl = `data:${item.mimeType};base64,${item.data}`\n+\t\t\t\t\timages.push(dataUrl)",
        "comment_created_at": "2025-06-27T20:25:13+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "What happens if the base64 data is corrupted or invalid? Would it be worth wrapping this in a try-catch to handle potential errors when constructing the data URL? This could prevent the entire tool response from failing due to a single corrupted image.",
        "pr_file_module": null
      }
    ]
  }
]