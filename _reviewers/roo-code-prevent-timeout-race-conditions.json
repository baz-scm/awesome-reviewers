[
  {
    "discussion_id": "2182961387",
    "pr_number": 5368,
    "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
    "created_at": "2025-07-03T14:37:06+00:00",
    "commented_code": "if (messagesRef.current.length === 0) {\n \t\t\t\t\tvscode.postMessage({ type: \"newTask\", text, images })\n \t\t\t\t} else if (clineAskRef.current) {\n+\t\t\t\t\t// Clear auto-approval timeout when user sends a message for follow-up questions\n+\t\t\t\t\t// This ensures the countdown timer is properly dismounted when users submit custom responses\n+\t\t\t\t\tif (clineAskRef.current === \"followup\") {\n+\t\t\t\t\t\tif (autoApproveTimeoutRef.current) {",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2182961387",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5368,
        "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
        "discussion_id": "2182961387",
        "commented_code": "@@ -507,6 +515,21 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro\n \t\t\t\tif (messagesRef.current.length === 0) {\n \t\t\t\t\tvscode.postMessage({ type: \"newTask\", text, images })\n \t\t\t\t} else if (clineAskRef.current) {\n+\t\t\t\t\t// Clear auto-approval timeout when user sends a message for follow-up questions\n+\t\t\t\t\t// This ensures the countdown timer is properly dismounted when users submit custom responses\n+\t\t\t\t\tif (clineAskRef.current === \"followup\") {\n+\t\t\t\t\t\tif (autoApproveTimeoutRef.current) {",
        "comment_created_at": "2025-07-03T14:37:06+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "Is there a potential race condition here? If the auto-approval timeout fires just as the user is typing/submitting a response, could both the manual response and auto-approval execute? The timeout clearing happens after the condition check, so there might be a small timing window.",
        "pr_file_module": null
      },
      {
        "comment_id": "2183748030",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5368,
        "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
        "discussion_id": "2182961387",
        "commented_code": "@@ -507,6 +515,21 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro\n \t\t\t\tif (messagesRef.current.length === 0) {\n \t\t\t\t\tvscode.postMessage({ type: \"newTask\", text, images })\n \t\t\t\t} else if (clineAskRef.current) {\n+\t\t\t\t\t// Clear auto-approval timeout when user sends a message for follow-up questions\n+\t\t\t\t\t// This ensures the countdown timer is properly dismounted when users submit custom responses\n+\t\t\t\t\tif (clineAskRef.current === \"followup\") {\n+\t\t\t\t\t\tif (autoApproveTimeoutRef.current) {",
        "comment_created_at": "2025-07-03T21:01:52+00:00",
        "comment_author": "liwilliam2021",
        "comment_body": "good point!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2183832512",
    "pr_number": 5368,
    "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
    "created_at": "2025-07-03T22:06:03+00:00",
    "commented_code": "if (messagesRef.current.length === 0) {\n \t\t\t\t\tvscode.postMessage({ type: \"newTask\", text, images })\n \t\t\t\t} else if (clineAskRef.current) {\n+\t\t\t\t\t// Clear auto-approval timeout FIRST to prevent race conditions\n+\t\t\t\t\t// This ensures the countdown timer is properly dismounted when users submit custom responses\n+\t\t\t\t\tif (autoApproveTimeoutRef.current) {",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2183832512",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5368,
        "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
        "discussion_id": "2183832512",
        "commented_code": "@@ -507,6 +522,17 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro\n \t\t\t\tif (messagesRef.current.length === 0) {\n \t\t\t\t\tvscode.postMessage({ type: \"newTask\", text, images })\n \t\t\t\t} else if (clineAskRef.current) {\n+\t\t\t\t\t// Clear auto-approval timeout FIRST to prevent race conditions\n+\t\t\t\t\t// This ensures the countdown timer is properly dismounted when users submit custom responses\n+\t\t\t\t\tif (autoApproveTimeoutRef.current) {",
        "comment_created_at": "2025-07-03T22:06:03+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "Is there a reason the timeout clearing happens inside the `clineAskRef.current` check rather than at the beginning of `handleSendMessage`? If we clear it unconditionally at the start, we could prevent any race conditions where the timeout fires while we're processing the user's input.\n\nThis would also simplify the logic since we wouldn't need to check for specific ask types.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2176175204",
    "pr_number": 5296,
    "pr_file": "webview-ui/src/components/chat/FollowUpSuggest.tsx",
    "created_at": "2025-07-01T00:18:53+00:00",
    "commented_code": "}\n \n export const FollowUpSuggest = ({ suggestions = [], onSuggestionClick, ts = 1 }: FollowUpSuggestProps) => {\n+\tconst { autoApprovalEnabled, alwaysAllowFollowupQuestions, followupAutoApproveTimeoutMs } = useExtensionState()\n+\tconst [countdown, setCountdown] = useState<number | null>(null)\n+\tconst [suggestionSelected, setSuggestionSelected] = useState(false)\n \tconst { t } = useAppTranslation()\n+\n+\t// Start countdown timer when auto-approval is enabled for follow-up questions\n+\tuseEffect(() => {\n+\t\t// Only start countdown if auto-approval is enabled for follow-up questions and no suggestion has been selected\n+\t\tif (autoApprovalEnabled && alwaysAllowFollowupQuestions && suggestions.length > 0 && !suggestionSelected) {\n+\t\t\t// Start with the configured timeout in seconds\n+\t\t\tconst timeoutMs =\n+\t\t\t\ttypeof followupAutoApproveTimeoutMs === \"number\" && !isNaN(followupAutoApproveTimeoutMs)\n+\t\t\t\t\t? followupAutoApproveTimeoutMs\n+\t\t\t\t\t: 10000\n+\n+\t\t\t// Convert milliseconds to seconds for the countdown\n+\t\t\tsetCountdown(Math.floor(timeoutMs / 1000))\n+\n+\t\t\t// Update countdown every second\n+\t\t\tconst intervalId = setInterval(() => {\n+\t\t\t\tsetCountdown((prevCountdown) => {\n+\t\t\t\t\tif (prevCountdown === null || prevCountdown <= 1) {\n+\t\t\t\t\t\tclearInterval(intervalId)\n+\t\t\t\t\t\treturn null\n+\t\t\t\t\t}\n+\t\t\t\t\treturn prevCountdown - 1\n+\t\t\t\t})\n+\t\t\t}, 1000)\n+\n+\t\t\t// Clean up interval on unmount\n+\t\t\treturn () => clearInterval(intervalId)",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2176175204",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5296,
        "pr_file": "webview-ui/src/components/chat/FollowUpSuggest.tsx",
        "discussion_id": "2176175204",
        "commented_code": "@@ -18,7 +19,47 @@ interface FollowUpSuggestProps {\n }\n \n export const FollowUpSuggest = ({ suggestions = [], onSuggestionClick, ts = 1 }: FollowUpSuggestProps) => {\n+\tconst { autoApprovalEnabled, alwaysAllowFollowupQuestions, followupAutoApproveTimeoutMs } = useExtensionState()\n+\tconst [countdown, setCountdown] = useState<number | null>(null)\n+\tconst [suggestionSelected, setSuggestionSelected] = useState(false)\n \tconst { t } = useAppTranslation()\n+\n+\t// Start countdown timer when auto-approval is enabled for follow-up questions\n+\tuseEffect(() => {\n+\t\t// Only start countdown if auto-approval is enabled for follow-up questions and no suggestion has been selected\n+\t\tif (autoApprovalEnabled && alwaysAllowFollowupQuestions && suggestions.length > 0 && !suggestionSelected) {\n+\t\t\t// Start with the configured timeout in seconds\n+\t\t\tconst timeoutMs =\n+\t\t\t\ttypeof followupAutoApproveTimeoutMs === \"number\" && !isNaN(followupAutoApproveTimeoutMs)\n+\t\t\t\t\t? followupAutoApproveTimeoutMs\n+\t\t\t\t\t: 10000\n+\n+\t\t\t// Convert milliseconds to seconds for the countdown\n+\t\t\tsetCountdown(Math.floor(timeoutMs / 1000))\n+\n+\t\t\t// Update countdown every second\n+\t\t\tconst intervalId = setInterval(() => {\n+\t\t\t\tsetCountdown((prevCountdown) => {\n+\t\t\t\t\tif (prevCountdown === null || prevCountdown <= 1) {\n+\t\t\t\t\t\tclearInterval(intervalId)\n+\t\t\t\t\t\treturn null\n+\t\t\t\t\t}\n+\t\t\t\t\treturn prevCountdown - 1\n+\t\t\t\t})\n+\t\t\t}, 1000)\n+\n+\t\t\t// Clean up interval on unmount\n+\t\t\treturn () => clearInterval(intervalId)",
        "comment_created_at": "2025-07-01T00:18:53+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "I notice there's a potential race condition here. If the component unmounts while the countdown is active, the interval cleanup happens, but what if the auto-approval in ChatView.tsx is still waiting? Could we consider using a shared cancellation mechanism or ensuring the ChatView's timeout is also cleared when this component unmounts?",
        "pr_file_module": null
      }
    ]
  }
]