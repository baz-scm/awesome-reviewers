[
  {
    "discussion_id": "2223256772",
    "pr_number": 5918,
    "pr_file": "webview-ui/src/components/chat/ChatTextArea.tsx",
    "created_at": "2025-07-22T17:05:21+00:00",
    "commented_code": "}\n \t\t}, [showContextMenu])\n \n+\t\t// Announce selected menu item for screen readers\n+\t\tuseEffect(() => {",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2223256772",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5918,
        "pr_file": "webview-ui/src/components/chat/ChatTextArea.tsx",
        "discussion_id": "2223256772",
        "commented_code": "@@ -559,6 +568,48 @@ const ChatTextArea = forwardRef<HTMLTextAreaElement, ChatTextAreaProps>(\n \t\t\t}\n \t\t}, [showContextMenu])\n \n+\t\t// Announce selected menu item for screen readers\n+\t\tuseEffect(() => {",
        "comment_created_at": "2025-07-22T17:05:21+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "This useEffect runs on every selectedMenuIndex change during keyboard navigation, which could impact performance. Consider debouncing the announcements or only announcing when navigation pauses:\n\n```typescript\nuseEffect(() => {\n  if (!showContextMenu || selectedMenuIndex < 0) return;\n  \n  const timeoutId = setTimeout(() => {\n    // announcement logic here\n  }, 100); // Small delay to avoid rapid announcements\n  \n  return () => clearTimeout(timeoutId);\n}, [showContextMenu, selectedMenuIndex, /* other deps */]);\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2208108957",
    "pr_number": 5538,
    "pr_file": "webview-ui/src/App.tsx",
    "created_at": "2025-07-15T17:21:46+00:00",
    "commented_code": "onSubmit={(requestId, text) => vscode.postMessage({ type: \"humanRelayResponse\", requestId, text })}\n \t\t\t\tonCancel={(requestId) => vscode.postMessage({ type: \"humanRelayCancel\", requestId })}\n \t\t\t/>\n+\t\t\t<DeleteMessageDialog\n+\t\t\t\topen={deleteMessageDialogState.isOpen}\n+\t\t\t\tonOpenChange={(open) => setDeleteMessageDialogState((prev) => ({ ...prev, isOpen: open }))}\n+\t\t\t\tonConfirm={() => {\n+\t\t\t\t\tvscode.postMessage({\n+\t\t\t\t\t\ttype: \"deleteMessageConfirm\",\n+\t\t\t\t\t\tmessageTs: deleteMessageDialogState.messageTs,\n+\t\t\t\t\t})\n+\t\t\t\t\tsetDeleteMessageDialogState((prev) => ({ ...prev, isOpen: false }))\n+\t\t\t\t}}\n+\t\t\t/>\n+\t\t\t<EditMessageDialog\n+\t\t\t\topen={editMessageDialogState.isOpen}\n+\t\t\t\tonOpenChange={(open) => setEditMessageDialogState((prev) => ({ ...prev, isOpen: open }))}\n+\t\t\t\tonConfirm={() => {\n+\t\t\t\t\tvscode.postMessage({\n+\t\t\t\t\t\ttype: \"editMessageConfirm\",\n+\t\t\t\t\t\tmessageTs: editMessageDialogState.messageTs,\n+\t\t\t\t\t\ttext: editMessageDialogState.text,\n+\t\t\t\t\t\timages: editMessageDialogState.images,\n+\t\t\t\t\t})\n+\t\t\t\t\tsetEditMessageDialogState((prev) => ({ ...prev, isOpen: false }))\n+\t\t\t\t}}\n+\t\t\t/>",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2208108957",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5538,
        "pr_file": "webview-ui/src/App.tsx",
        "discussion_id": "2208108957",
        "commented_code": "@@ -207,6 +241,30 @@ const App = () => {\n \t\t\t\tonSubmit={(requestId, text) => vscode.postMessage({ type: \"humanRelayResponse\", requestId, text })}\n \t\t\t\tonCancel={(requestId) => vscode.postMessage({ type: \"humanRelayCancel\", requestId })}\n \t\t\t/>\n+\t\t\t<DeleteMessageDialog\n+\t\t\t\topen={deleteMessageDialogState.isOpen}\n+\t\t\t\tonOpenChange={(open) => setDeleteMessageDialogState((prev) => ({ ...prev, isOpen: open }))}\n+\t\t\t\tonConfirm={() => {\n+\t\t\t\t\tvscode.postMessage({\n+\t\t\t\t\t\ttype: \"deleteMessageConfirm\",\n+\t\t\t\t\t\tmessageTs: deleteMessageDialogState.messageTs,\n+\t\t\t\t\t})\n+\t\t\t\t\tsetDeleteMessageDialogState((prev) => ({ ...prev, isOpen: false }))\n+\t\t\t\t}}\n+\t\t\t/>\n+\t\t\t<EditMessageDialog\n+\t\t\t\topen={editMessageDialogState.isOpen}\n+\t\t\t\tonOpenChange={(open) => setEditMessageDialogState((prev) => ({ ...prev, isOpen: open }))}\n+\t\t\t\tonConfirm={() => {\n+\t\t\t\t\tvscode.postMessage({\n+\t\t\t\t\t\ttype: \"editMessageConfirm\",\n+\t\t\t\t\t\tmessageTs: editMessageDialogState.messageTs,\n+\t\t\t\t\t\ttext: editMessageDialogState.text,\n+\t\t\t\t\t\timages: editMessageDialogState.images,\n+\t\t\t\t\t})\n+\t\t\t\t\tsetEditMessageDialogState((prev) => ({ ...prev, isOpen: false }))\n+\t\t\t\t}}\n+\t\t\t/>",
        "comment_created_at": "2025-07-15T17:21:46+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "Consider memoizing the dialog components to prevent unnecessary re-renders:\n\n```typescript\nconst MemoizedDeleteMessageDialog = React.memo(DeleteMessageDialog);\nconst MemoizedEditMessageDialog = React.memo(EditMessageDialog);\n```\n\nThis could improve performance, especially when the parent component re-renders frequently.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2178691968",
    "pr_number": 5322,
    "pr_file": "webview-ui/src/components/settings/SettingsView.tsx",
    "created_at": "2025-07-01T22:51:08+00:00",
    "commented_code": "}\n \t}, [settingsImportedAt, extensionState])\n \n+\t// Update cached state when allowedCommands changes from external sources (e.g., \"Add & Run\")\n+\tuseEffect(() => {\n+\t\t// Only update if the allowedCommands have actually changed\n+\t\tif (JSON.stringify(cachedState.allowedCommands) !== JSON.stringify(extensionState.allowedCommands)) {",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2178691968",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5322,
        "pr_file": "webview-ui/src/components/settings/SettingsView.tsx",
        "discussion_id": "2178691968",
        "commented_code": "@@ -200,6 +200,17 @@ const SettingsView = forwardRef<SettingsViewRef, SettingsViewProps>(({ onDone, t\n \t\t}\n \t}, [settingsImportedAt, extensionState])\n \n+\t// Update cached state when allowedCommands changes from external sources (e.g., \"Add & Run\")\n+\tuseEffect(() => {\n+\t\t// Only update if the allowedCommands have actually changed\n+\t\tif (JSON.stringify(cachedState.allowedCommands) !== JSON.stringify(extensionState.allowedCommands)) {",
        "comment_created_at": "2025-07-01T22:51:08+00:00",
        "comment_author": "Copilot",
        "comment_body": "Using `JSON.stringify` for deep comparison on every state update may be inefficient for larger command lists. Consider using a dedicated deep-equality check or memoized comparison to improve performance.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2165585138",
    "pr_number": 5098,
    "pr_file": "webview-ui/src/components/ui/standard-tooltip.tsx",
    "created_at": "2025-06-25T03:39:33+00:00",
    "commented_code": "+import * as React from \"react\"\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"./tooltip\"\n+\n+interface StandardTooltipProps {\n+\tchildren: React.ReactNode\n+\tcontent: React.ReactNode\n+\tside?: \"top\" | \"right\" | \"bottom\" | \"left\"\n+\talign?: \"start\" | \"center\" | \"end\"\n+\tsideOffset?: number\n+\tclassName?: string\n+\tasChild?: boolean\n+}\n+\n+/**\n+ * StandardTooltip component that enforces consistent 300ms delay across the application.\n+ * This component wraps the Radix UI tooltip with a standardized delay duration.\n+ */\n+export function StandardTooltip({\n+\tchildren,\n+\tcontent,\n+\tside = \"top\",\n+\talign = \"center\",\n+\tsideOffset = 4,\n+\tclassName,\n+\tasChild = true,\n+}: StandardTooltipProps) {\n+\treturn (\n+\t\t<TooltipProvider delayDuration={300}>",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2165585138",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5098,
        "pr_file": "webview-ui/src/components/ui/standard-tooltip.tsx",
        "discussion_id": "2165585138",
        "commented_code": "@@ -0,0 +1,37 @@\n+import * as React from \"react\"\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"./tooltip\"\n+\n+interface StandardTooltipProps {\n+\tchildren: React.ReactNode\n+\tcontent: React.ReactNode\n+\tside?: \"top\" | \"right\" | \"bottom\" | \"left\"\n+\talign?: \"start\" | \"center\" | \"end\"\n+\tsideOffset?: number\n+\tclassName?: string\n+\tasChild?: boolean\n+}\n+\n+/**\n+ * StandardTooltip component that enforces consistent 300ms delay across the application.\n+ * This component wraps the Radix UI tooltip with a standardized delay duration.\n+ */\n+export function StandardTooltip({\n+\tchildren,\n+\tcontent,\n+\tside = \"top\",\n+\talign = \"center\",\n+\tsideOffset = 4,\n+\tclassName,\n+\tasChild = true,\n+}: StandardTooltipProps) {\n+\treturn (\n+\t\t<TooltipProvider delayDuration={300}>",
        "comment_created_at": "2025-06-25T03:39:33+00:00",
        "comment_author": "hannesrudolph",
        "comment_body": "**Performance concern:** Each `StandardTooltip` creates its own `TooltipProvider`, which could lead to performance issues when many tooltips are rendered simultaneously.\n\nConsider using a single `TooltipProvider` at the app level instead:\n\n```tsx\n// Remove TooltipProvider from here\nexport function StandardTooltip({ ... }) {\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild={asChild}>{children}</TooltipTrigger>\n      <TooltipContent ...>{content}</TooltipContent>\n    </Tooltip>\n  )\n}\n```\n\nThen wrap the entire app with:\n```tsx\n<TooltipProvider delayDuration={STANDARD_TOOLTIP_DELAY}>\n  <App />\n</TooltipProvider>\n```\n\nThis would reduce overhead and ensure consistent behavior across all tooltips.",
        "pr_file_module": null
      }
    ]
  }
]