[
  {
    "discussion_id": "2164878422",
    "pr_number": 5085,
    "pr_file": "webview-ui/src/App.tsx",
    "created_at": "2025-06-24T20:51:37+00:00",
    "commented_code": ")\n }\n \n+type ErrorProps = {\n+\tchildren: React.ReactNode\n+}\n+\n+type ErrorState = {\n+\terror?: string\n+}\n+\n+class ErrorBoundary extends Component<ErrorProps, ErrorState> {\n+\tconstructor(props: ErrorProps) {\n+\t\tsuper(props)\n+\t\tthis.state = {}\n+\t}\n+\n+\tstatic getDerivedStateFromError(error: unknown) {",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2164878422",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5085,
        "pr_file": "webview-ui/src/App.tsx",
        "discussion_id": "2164878422",
        "commented_code": "@@ -207,16 +207,58 @@ const App = () => {\n \t)\n }\n \n+type ErrorProps = {\n+\tchildren: React.ReactNode\n+}\n+\n+type ErrorState = {\n+\terror?: string\n+}\n+\n+class ErrorBoundary extends Component<ErrorProps, ErrorState> {\n+\tconstructor(props: ErrorProps) {\n+\t\tsuper(props)\n+\t\tthis.state = {}\n+\t}\n+\n+\tstatic getDerivedStateFromError(error: unknown) {",
        "comment_created_at": "2025-06-24T20:51:37+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Consider adding a componentDidCatch method in the ErrorBoundary to log error details (e.g. to telemetry) in addition to updating state. This helps with debugging.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2164950253",
    "pr_number": 5085,
    "pr_file": "webview-ui/src/App.tsx",
    "created_at": "2025-06-24T21:30:31+00:00",
    "commented_code": ")\n }\n \n+type ErrorProps = {\n+\tchildren: React.ReactNode\n+}\n+\n+type ErrorState = {\n+\terror?: string\n+}\n+\n+class ErrorBoundary extends Component<ErrorProps, ErrorState> {\n+\tconstructor(props: ErrorProps) {\n+\t\tsuper(props)\n+\t\tthis.state = {}\n+\t}\n+\n+\tstatic getDerivedStateFromError(error: unknown) {\n+\t\treturn {\n+\t\t\terror: error instanceof Error ? (error.stack ?? error.message) : `${error}`,",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2164950253",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5085,
        "pr_file": "webview-ui/src/App.tsx",
        "discussion_id": "2164950253",
        "commented_code": "@@ -207,16 +207,58 @@ const App = () => {\n \t)\n }\n \n+type ErrorProps = {\n+\tchildren: React.ReactNode\n+}\n+\n+type ErrorState = {\n+\terror?: string\n+}\n+\n+class ErrorBoundary extends Component<ErrorProps, ErrorState> {\n+\tconstructor(props: ErrorProps) {\n+\t\tsuper(props)\n+\t\tthis.state = {}\n+\t}\n+\n+\tstatic getDerivedStateFromError(error: unknown) {\n+\t\treturn {\n+\t\t\terror: error instanceof Error ? (error.stack ?? error.message) : `${error}`,",
        "comment_created_at": "2025-06-24T21:30:31+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "The error handling logic looks good, but could this be more robust? Currently it falls back to string conversion for non-Error objects. Would it be helpful to also capture additional context like the component stack or timestamp when the error occurred?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2190863374",
    "pr_number": 5452,
    "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
    "created_at": "2025-07-07T19:22:18+00:00",
    "commented_code": "if (isBrowserSessionMessage(message)) {\n \t\t\t\t\tcurrentGroup.push(message)\n-\n-\t\t\t\t\t// Check if this is a close action\n-\t\t\t\t\tif (message.say === \"browser_action\") {\n-\t\t\t\t\t\tconst browserAction = JSON.parse(message.text || \"{}\") as ClineSayBrowserAction\n-\t\t\t\t\t\tif (browserAction.action === \"close\") {\n-\t\t\t\t\t\t\tendBrowserSession()\n+\t\t\t\t\tif (message.say === \"browser_action_result\") {\n+\t\t\t\t\t\t// Check if the previous browser_action was a close action\n+\t\t\t\t\t\tconst lastBrowserAction = [...currentGroup].reverse().find((m) => m.say === \"browser_action\")\n+\t\t\t\t\t\tif (lastBrowserAction) {\n+\t\t\t\t\t\t\tconst browserAction = JSON.parse(lastBrowserAction.text || \"{}\") as ClineSayBrowserAction",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2190863374",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5452,
        "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
        "discussion_id": "2190863374",
        "commented_code": "@@ -1063,12 +1075,14 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro\n \n \t\t\t\tif (isBrowserSessionMessage(message)) {\n \t\t\t\t\tcurrentGroup.push(message)\n-\n-\t\t\t\t\t// Check if this is a close action\n-\t\t\t\t\tif (message.say === \"browser_action\") {\n-\t\t\t\t\t\tconst browserAction = JSON.parse(message.text || \"{}\") as ClineSayBrowserAction\n-\t\t\t\t\t\tif (browserAction.action === \"close\") {\n-\t\t\t\t\t\t\tendBrowserSession()\n+\t\t\t\t\tif (message.say === \"browser_action_result\") {\n+\t\t\t\t\t\t// Check if the previous browser_action was a close action\n+\t\t\t\t\t\tconst lastBrowserAction = [...currentGroup].reverse().find((m) => m.say === \"browser_action\")\n+\t\t\t\t\t\tif (lastBrowserAction) {\n+\t\t\t\t\t\t\tconst browserAction = JSON.parse(lastBrowserAction.text || \"{}\") as ClineSayBrowserAction",
        "comment_created_at": "2025-07-07T19:22:18+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "JSON.parse is used here on lastBrowserAction.text without error handling. To avoid runtime exceptions on malformed JSON, consider wrapping this call in a try/catch (or use safeJsonParse).\n\n<sup>This comment was generated because it violated a code review rule: [irule_PTI8rjtnhwrWq6jS](https://app.ellipsis.dev/RooCodeInc/code-review/rules?id=irule_PTI8rjtnhwrWq6jS).</sup>",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2176175050",
    "pr_number": 5296,
    "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
    "created_at": "2025-07-01T00:18:43+00:00",
    "commented_code": "const autoApprove = async () => {\n \t\t\tif (lastMessage?.ask && isAutoApproved(lastMessage)) {\n-\t\t\t\tif (lastMessage.ask === \"tool\" && isWriteToolAction(lastMessage)) {\n+\t\t\t\t// Special handling for follow-up questions\n+\t\t\t\tif (lastMessage.ask === \"followup\") {\n+\t\t\t\t\tconst followUpData = JSON.parse(lastMessage.text || \"{}\")",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2176175050",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5296,
        "pr_file": "webview-ui/src/components/chat/ChatView.tsx",
        "discussion_id": "2176175050",
        "commented_code": "@@ -1270,19 +1277,35 @@ const ChatViewComponent: React.ForwardRefRenderFunction<ChatViewRef, ChatViewPro\n \n \t\tconst autoApprove = async () => {\n \t\t\tif (lastMessage?.ask && isAutoApproved(lastMessage)) {\n-\t\t\t\tif (lastMessage.ask === \"tool\" && isWriteToolAction(lastMessage)) {\n+\t\t\t\t// Special handling for follow-up questions\n+\t\t\t\tif (lastMessage.ask === \"followup\") {\n+\t\t\t\t\tconst followUpData = JSON.parse(lastMessage.text || \"{}\")",
        "comment_created_at": "2025-07-01T00:18:43+00:00",
        "comment_author": "daniel-lxs",
        "comment_body": "The JSON.parse() here could throw an error if lastMessage.text contains invalid JSON. Could we wrap this in a try-catch block to handle potential parsing errors gracefully?\n\n```typescript\nlet followUpData;\ntry {\n  followUpData = JSON.parse(lastMessage.text || \"{}\")\n} catch (error) {\n  console.error('Failed to parse follow-up data:', error);\n  return;\n}\n```",
        "pr_file_module": null
      }
    ]
  }
]