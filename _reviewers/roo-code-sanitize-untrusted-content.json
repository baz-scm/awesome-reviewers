[
  {
    "discussion_id": "2202510498",
    "pr_number": 5620,
    "pr_file": "webview-ui/src/components/common/TableParser.tsx",
    "created_at": "2025-07-12T10:55:46+00:00",
    "commented_code": "+import { parseInlineMarkdown } from \"./InlineParser\";\n+\n+const containsHtmlTags = (text: string): boolean => {\n+  return /<\\/?[a-z][a-z0-9]*\\b[^>]*>/i.test(text);\n+};\n+\n+const parseTableHeaderCells = (headerRow: string) => {\n+  return headerRow\n+    .split(\"|\")\n+    .slice(1, -1)\n+    .map(cell => cell.trim().replace(/^:[-]+:$|^:[-]+|[-]+:$/g, '').trim());\n+};\n+\n+const parseTableDataRows = (dataRows: string[], maxRows: number = 50) => {\n+  const rows = [];\n+  try {\n+    for (let i = 0; i < dataRows.length; i++) {\n+      const cells = dataRows[i]\n+        .split(\"|\")\n+        .slice(1, -1)\n+        .map(cell => cell.trim());\n+\n+      if (cells.length > 0) {\n+        rows.push(cells);\n+      }\n+\n+      if (rows.length >= maxRows) {\n+        break;\n+      }\n+    }\n+  } catch (error) {\n+    return [];\n+  }\n+  return rows;\n+};\n+\n+export const renderTableHeader = (headerCells: string[], keyPrefix: string) => {\n+  return (\n+    <thead className=\"bg-[--gray-1]\">\n+      <tr>\n+        {headerCells.map((cell, idx) => (\n+          <th\n+            key={`${keyPrefix}-header-${idx}`}\n+            className=\"border border-[--gray-3] px-4 py-2 text-left text-sm font-medium\"\n+          >\n+            {renderTableCell(cell, idx)}\n+          </th>\n+        ))}\n+      </tr>\n+    </thead>\n+  );\n+};\n+\n+export const renderTableBody = (rows: string[][], keyPrefix: string) => {\n+  return (\n+    <tbody>\n+      {rows.map((row, rowIdx) => (\n+        <tr\n+          key={`${keyPrefix}-row-${rowIdx}`}\n+          className={rowIdx % 2 === 0 ? \"bg-[--gray-2]\" : \"bg-[--gray-1]\"}\n+        >\n+          {row.map((cell, cellIdx) => (\n+            <td\n+              key={`${keyPrefix}-cell-${rowIdx}-${cellIdx}`}\n+              className=\"border border-[--gray-3] px-4 py-2 text-sm\"\n+            >\n+              {renderTableCell(cell, cellIdx + rowIdx * 100)}\n+            </td>\n+          ))}\n+        </tr>\n+      ))}\n+    </tbody>\n+  );\n+};\n+\n+const renderTableCell = (content: string, keyOffset: number) => {\n+  if (containsHtmlTags(content)) {\n+    return <div dangerouslySetInnerHTML={{ __html: content }} />;",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2202510498",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5620,
        "pr_file": "webview-ui/src/components/common/TableParser.tsx",
        "discussion_id": "2202510498",
        "commented_code": "@@ -0,0 +1,134 @@\n+import { parseInlineMarkdown } from \"./InlineParser\";\n+\n+const containsHtmlTags = (text: string): boolean => {\n+  return /<\\/?[a-z][a-z0-9]*\\b[^>]*>/i.test(text);\n+};\n+\n+const parseTableHeaderCells = (headerRow: string) => {\n+  return headerRow\n+    .split(\"|\")\n+    .slice(1, -1)\n+    .map(cell => cell.trim().replace(/^:[-]+:$|^:[-]+|[-]+:$/g, '').trim());\n+};\n+\n+const parseTableDataRows = (dataRows: string[], maxRows: number = 50) => {\n+  const rows = [];\n+  try {\n+    for (let i = 0; i < dataRows.length; i++) {\n+      const cells = dataRows[i]\n+        .split(\"|\")\n+        .slice(1, -1)\n+        .map(cell => cell.trim());\n+\n+      if (cells.length > 0) {\n+        rows.push(cells);\n+      }\n+\n+      if (rows.length >= maxRows) {\n+        break;\n+      }\n+    }\n+  } catch (error) {\n+    return [];\n+  }\n+  return rows;\n+};\n+\n+export const renderTableHeader = (headerCells: string[], keyPrefix: string) => {\n+  return (\n+    <thead className=\"bg-[--gray-1]\">\n+      <tr>\n+        {headerCells.map((cell, idx) => (\n+          <th\n+            key={`${keyPrefix}-header-${idx}`}\n+            className=\"border border-[--gray-3] px-4 py-2 text-left text-sm font-medium\"\n+          >\n+            {renderTableCell(cell, idx)}\n+          </th>\n+        ))}\n+      </tr>\n+    </thead>\n+  );\n+};\n+\n+export const renderTableBody = (rows: string[][], keyPrefix: string) => {\n+  return (\n+    <tbody>\n+      {rows.map((row, rowIdx) => (\n+        <tr\n+          key={`${keyPrefix}-row-${rowIdx}`}\n+          className={rowIdx % 2 === 0 ? \"bg-[--gray-2]\" : \"bg-[--gray-1]\"}\n+        >\n+          {row.map((cell, cellIdx) => (\n+            <td\n+              key={`${keyPrefix}-cell-${rowIdx}-${cellIdx}`}\n+              className=\"border border-[--gray-3] px-4 py-2 text-sm\"\n+            >\n+              {renderTableCell(cell, cellIdx + rowIdx * 100)}\n+            </td>\n+          ))}\n+        </tr>\n+      ))}\n+    </tbody>\n+  );\n+};\n+\n+const renderTableCell = (content: string, keyOffset: number) => {\n+  if (containsHtmlTags(content)) {\n+    return <div dangerouslySetInnerHTML={{ __html: content }} />;",
        "comment_created_at": "2025-07-12T10:55:46+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Using dangerouslySetInnerHTML in renderTableCell without sanitizing the HTML content may expose the application to XSS vulnerabilities. Ensure that the content is either sanitized or comes from a trusted source.\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2202539127",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 5620,
        "pr_file": "webview-ui/src/components/common/TableParser.tsx",
        "discussion_id": "2202510498",
        "commented_code": "@@ -0,0 +1,134 @@\n+import { parseInlineMarkdown } from \"./InlineParser\";\n+\n+const containsHtmlTags = (text: string): boolean => {\n+  return /<\\/?[a-z][a-z0-9]*\\b[^>]*>/i.test(text);\n+};\n+\n+const parseTableHeaderCells = (headerRow: string) => {\n+  return headerRow\n+    .split(\"|\")\n+    .slice(1, -1)\n+    .map(cell => cell.trim().replace(/^:[-]+:$|^:[-]+|[-]+:$/g, '').trim());\n+};\n+\n+const parseTableDataRows = (dataRows: string[], maxRows: number = 50) => {\n+  const rows = [];\n+  try {\n+    for (let i = 0; i < dataRows.length; i++) {\n+      const cells = dataRows[i]\n+        .split(\"|\")\n+        .slice(1, -1)\n+        .map(cell => cell.trim());\n+\n+      if (cells.length > 0) {\n+        rows.push(cells);\n+      }\n+\n+      if (rows.length >= maxRows) {\n+        break;\n+      }\n+    }\n+  } catch (error) {\n+    return [];\n+  }\n+  return rows;\n+};\n+\n+export const renderTableHeader = (headerCells: string[], keyPrefix: string) => {\n+  return (\n+    <thead className=\"bg-[--gray-1]\">\n+      <tr>\n+        {headerCells.map((cell, idx) => (\n+          <th\n+            key={`${keyPrefix}-header-${idx}`}\n+            className=\"border border-[--gray-3] px-4 py-2 text-left text-sm font-medium\"\n+          >\n+            {renderTableCell(cell, idx)}\n+          </th>\n+        ))}\n+      </tr>\n+    </thead>\n+  );\n+};\n+\n+export const renderTableBody = (rows: string[][], keyPrefix: string) => {\n+  return (\n+    <tbody>\n+      {rows.map((row, rowIdx) => (\n+        <tr\n+          key={`${keyPrefix}-row-${rowIdx}`}\n+          className={rowIdx % 2 === 0 ? \"bg-[--gray-2]\" : \"bg-[--gray-1]\"}\n+        >\n+          {row.map((cell, cellIdx) => (\n+            <td\n+              key={`${keyPrefix}-cell-${rowIdx}-${cellIdx}`}\n+              className=\"border border-[--gray-3] px-4 py-2 text-sm\"\n+            >\n+              {renderTableCell(cell, cellIdx + rowIdx * 100)}\n+            </td>\n+          ))}\n+        </tr>\n+      ))}\n+    </tbody>\n+  );\n+};\n+\n+const renderTableCell = (content: string, keyOffset: number) => {\n+  if (containsHtmlTags(content)) {\n+    return <div dangerouslySetInnerHTML={{ __html: content }} />;",
        "comment_created_at": "2025-07-12T11:27:21+00:00",
        "comment_author": "PaperBoardOfficial",
        "comment_body": "I have removed this code and its test case.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2147526649",
    "pr_number": 4727,
    "pr_file": "webview-ui/src/components/common/Thumbnails.tsx",
    "created_at": "2025-06-15T10:53:11+00:00",
    "commented_code": "rowGap: 3,\n \t\t\t\t...style,\n \t\t\t}}>\n-\t\t\t{images.map((image, index) => (\n-\t\t\t\t<div\n-\t\t\t\t\tkey={index}\n-\t\t\t\t\tstyle={{ position: \"relative\" }}\n-\t\t\t\t\tonMouseEnter={() => setHoveredIndex(index)}\n-\t\t\t\t\tonMouseLeave={() => setHoveredIndex(null)}>\n-\t\t\t\t\t<img\n-\t\t\t\t\t\tsrc={image}\n-\t\t\t\t\t\talt={`Thumbnail ${index + 1}`}\n-\t\t\t\t\t\tstyle={{\n-\t\t\t\t\t\t\twidth: 34,\n-\t\t\t\t\t\t\theight: 34,\n-\t\t\t\t\t\t\tobjectFit: \"cover\",\n-\t\t\t\t\t\t\tborderRadius: 4,\n-\t\t\t\t\t\t\tcursor: \"pointer\",\n-\t\t\t\t\t\t}}\n-\t\t\t\t\t\tonClick={() => handleImageClick(image)}\n-\t\t\t\t\t/>\n-\t\t\t\t\t{isDeletable && hoveredIndex === index && (\n-\t\t\t\t\t\t<div\n-\t\t\t\t\t\t\tonClick={() => handleDelete(index)}\n+\t\t\t{images.map((image, index) => {\n+\t\t\t\tconst sanitizedUrl = sanitizeImageUrl(image)\n+\t\t\t\t// Skip rendering if URL is invalid/unsafe\n+\t\t\t\tif (!sanitizedUrl) {\n+\t\t\t\t\treturn null\n+\t\t\t\t}\n+\n+\t\t\t\treturn (\n+\t\t\t\t\t<div\n+\t\t\t\t\t\tkey={index}\n+\t\t\t\t\t\tstyle={{ position: \"relative\" }}\n+\t\t\t\t\t\tonMouseEnter={() => setHoveredIndex(index)}\n+\t\t\t\t\t\tonMouseLeave={() => setHoveredIndex(null)}>\n+\t\t\t\t\t\t<img\n+\t\t\t\t\t\t\tsrc={sanitizedUrl}",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2147526649",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 4727,
        "pr_file": "webview-ui/src/components/common/Thumbnails.tsx",
        "discussion_id": "2147526649",
        "commented_code": "@@ -46,51 +68,59 @@\n \t\t\t\trowGap: 3,\n \t\t\t\t...style,\n \t\t\t}}>\n-\t\t\t{images.map((image, index) => (\n-\t\t\t\t<div\n-\t\t\t\t\tkey={index}\n-\t\t\t\t\tstyle={{ position: \"relative\" }}\n-\t\t\t\t\tonMouseEnter={() => setHoveredIndex(index)}\n-\t\t\t\t\tonMouseLeave={() => setHoveredIndex(null)}>\n-\t\t\t\t\t<img\n-\t\t\t\t\t\tsrc={image}\n-\t\t\t\t\t\talt={`Thumbnail ${index + 1}`}\n-\t\t\t\t\t\tstyle={{\n-\t\t\t\t\t\t\twidth: 34,\n-\t\t\t\t\t\t\theight: 34,\n-\t\t\t\t\t\t\tobjectFit: \"cover\",\n-\t\t\t\t\t\t\tborderRadius: 4,\n-\t\t\t\t\t\t\tcursor: \"pointer\",\n-\t\t\t\t\t\t}}\n-\t\t\t\t\t\tonClick={() => handleImageClick(image)}\n-\t\t\t\t\t/>\n-\t\t\t\t\t{isDeletable && hoveredIndex === index && (\n-\t\t\t\t\t\t<div\n-\t\t\t\t\t\t\tonClick={() => handleDelete(index)}\n+\t\t\t{images.map((image, index) => {\n+\t\t\t\tconst sanitizedUrl = sanitizeImageUrl(image)\n+\t\t\t\t// Skip rendering if URL is invalid/unsafe\n+\t\t\t\tif (!sanitizedUrl) {\n+\t\t\t\t\treturn null\n+\t\t\t\t}\n+\n+\t\t\t\treturn (\n+\t\t\t\t\t<div\n+\t\t\t\t\t\tkey={index}\n+\t\t\t\t\t\tstyle={{ position: \"relative\" }}\n+\t\t\t\t\t\tonMouseEnter={() => setHoveredIndex(index)}\n+\t\t\t\t\t\tonMouseLeave={() => setHoveredIndex(null)}>\n+\t\t\t\t\t\t<img\n+\t\t\t\t\t\t\tsrc={sanitizedUrl}",
        "comment_created_at": "2025-06-15T10:53:11+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Client-side cross-site scripting\n\nCross-site scripting vulnerability due to [user-provided value](1).\n\n[Show more details](https://github.com/RooCodeInc/Roo-Code/security/code-scanning/106)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2083696203",
    "pr_number": 3482,
    "pr_file": "webview-ui/src/components/history/HistoryView.tsx",
    "created_at": "2025-05-12T01:36:45+00:00",
    "commented_code": "wordBreak: \"break-word\",\n \t\t\t\t\t\t\t\t\t\t\toverflowWrap: \"anywhere\",\n \t\t\t\t\t\t\t\t\t\t}}\n-\t\t\t\t\t\t\t\t\t\tdata-testid=\"task-content\"\n-\t\t\t\t\t\t\t\t\t\tdangerouslySetInnerHTML={{ __html: item.task }}\n-\t\t\t\t\t\t\t\t\t/>\n-\t\t\t\t\t\t\t\t\t<div style={{ display: \"flex\", flexDirection: \"column\", gap: \"4px\" }}>\n+\t\t\t\t\t\t\t\t\t\tdata-testid=\"task-content\">\n+\t\t\t\t\t\t\t\t\t\t{item.lastActiveModeSlug &&\n+\t\t\t\t\t\t\t\t\t\t\t(() => {\n+\t\t\t\t\t\t\t\t\t\t\t\tconst mode = getModeBySlug(item.lastActiveModeSlug, customModes) as\n+\t\t\t\t\t\t\t\t\t\t\t\t\t| ModeConfig\n+\t\t\t\t\t\t\t\t\t\t\t\t\t| undefined\n+\t\t\t\t\t\t\t\t\t\t\t\tif (mode?.name) {\n+\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"font-semibold mr-1\">{`[Last Mode: ${mode.name}]`}</span>\n+\t\t\t\t\t\t\t\t\t\t\t\t\t)\n+\t\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\t\treturn null\n+\t\t\t\t\t\t\t\t\t\t\t})()}\n+\t\t\t\t\t\t\t\t\t\t<span dangerouslySetInnerHTML={{ __html: item.task }} />",
    "repo_full_name": "RooCodeInc/Roo-Code",
    "discussion_comments": [
      {
        "comment_id": "2083696203",
        "repo_full_name": "RooCodeInc/Roo-Code",
        "pr_number": 3482,
        "pr_file": "webview-ui/src/components/history/HistoryView.tsx",
        "discussion_id": "2083696203",
        "commented_code": "@@ -285,10 +289,22 @@ const HistoryView = ({ onDone }: HistoryViewProps) => {\n \t\t\t\t\t\t\t\t\t\t\twordBreak: \"break-word\",\n \t\t\t\t\t\t\t\t\t\t\toverflowWrap: \"anywhere\",\n \t\t\t\t\t\t\t\t\t\t}}\n-\t\t\t\t\t\t\t\t\t\tdata-testid=\"task-content\"\n-\t\t\t\t\t\t\t\t\t\tdangerouslySetInnerHTML={{ __html: item.task }}\n-\t\t\t\t\t\t\t\t\t/>\n-\t\t\t\t\t\t\t\t\t<div style={{ display: \"flex\", flexDirection: \"column\", gap: \"4px\" }}>\n+\t\t\t\t\t\t\t\t\t\tdata-testid=\"task-content\">\n+\t\t\t\t\t\t\t\t\t\t{item.lastActiveModeSlug &&\n+\t\t\t\t\t\t\t\t\t\t\t(() => {\n+\t\t\t\t\t\t\t\t\t\t\t\tconst mode = getModeBySlug(item.lastActiveModeSlug, customModes) as\n+\t\t\t\t\t\t\t\t\t\t\t\t\t| ModeConfig\n+\t\t\t\t\t\t\t\t\t\t\t\t\t| undefined\n+\t\t\t\t\t\t\t\t\t\t\t\tif (mode?.name) {\n+\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"font-semibold mr-1\">{`[Last Mode: ${mode.name}]`}</span>\n+\t\t\t\t\t\t\t\t\t\t\t\t\t)\n+\t\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\t\treturn null\n+\t\t\t\t\t\t\t\t\t\t\t})()}\n+\t\t\t\t\t\t\t\t\t\t<span dangerouslySetInnerHTML={{ __html: item.task }} />",
        "comment_created_at": "2025-05-12T01:36:45+00:00",
        "comment_author": "ellipsis-dev[bot]",
        "comment_body": "Similar to `HistoryPreview`, review the usage of `dangerouslySetInnerHTML`. Ensure that `item.task` is sanitized to prevent XSS vulnerabilities.\n",
        "pr_file_module": null
      }
    ]
  }
]