[
  {
    "discussion_id": "2298090835",
    "pr_number": 4980,
    "pr_file": "packages/router-core/src/utils.ts",
    "created_at": "2025-08-25T13:21:30+00:00",
    "commented_code": "typeof (value as Promise<T>).then === 'function',\n   )\n }\n+\n+export function findLast<T>(\n+  array: ReadonlyArray<T>,\n+  predicate: (item: T) => boolean,\n+): T | undefined {\n+  for (let i = array.length - 1; i >= 0; i--) {\n+    const item = array[i]!\n+    if (predicate(item)) return item\n+  }\n+  return undefined\n+}",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2298090835",
        "repo_full_name": "TanStack/router",
        "pr_number": 4980,
        "pr_file": "packages/router-core/src/utils.ts",
        "discussion_id": "2298090835",
        "commented_code": "@@ -483,3 +483,14 @@ export function isPromise<T>(\n       typeof (value as Promise<T>).then === 'function',\n   )\n }\n+\n+export function findLast<T>(\n+  array: ReadonlyArray<T>,\n+  predicate: (item: T) => boolean,\n+): T | undefined {\n+  for (let i = array.length - 1; i >= 0; i--) {\n+    const item = array[i]!\n+    if (predicate(item)) return item\n+  }\n+  return undefined\n+}",
        "comment_created_at": "2025-08-25T13:21:30+00:00",
        "comment_author": "levrik",
        "comment_body": "Is there anything that speaks against using the built-in?\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast",
        "pr_file_module": null
      },
      {
        "comment_id": "2298100875",
        "repo_full_name": "TanStack/router",
        "pr_number": 4980,
        "pr_file": "packages/router-core/src/utils.ts",
        "discussion_id": "2298090835",
        "commented_code": "@@ -483,3 +483,14 @@ export function isPromise<T>(\n       typeof (value as Promise<T>).then === 'function',\n   )\n }\n+\n+export function findLast<T>(\n+  array: ReadonlyArray<T>,\n+  predicate: (item: T) => boolean,\n+): T | undefined {\n+  for (let i = array.length - 1; i >= 0; i--) {\n+    const item = array[i]!\n+    if (predicate(item)) return item\n+  }\n+  return undefined\n+}",
        "comment_created_at": "2025-08-25T13:25:34+00:00",
        "comment_author": "Sheraff",
        "comment_body": "`.findLast` is still a little bit recent (safari 15.4), and I didn't want this PR to be a breaking change. But I'd love to use the built-in array method instead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1912496565",
    "pr_number": 3140,
    "pr_file": "packages/react-router/src/transformer.ts",
    "created_at": "2025-01-12T17:22:45+00:00",
    "commented_code": "// Key\n     'formData',\n     // Check\n-    (v) => v instanceof FormData,\n+    (v): v is FormData => v instanceof FormData,\n     // To\n-    (v: FormData) => {\n-      const entries: Record<string, any> = {}\n-      v.forEach((value, key) => {\n-        entries[key] = value\n-      })\n+    (v) => {\n+      const entries: Record<string, Array<any>> = {}\n+      v.forEach((value, key) => (entries[key] ??= []).push(value))",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1912496565",
        "repo_full_name": "TanStack/router",
        "pr_number": 3140,
        "pr_file": "packages/react-router/src/transformer.ts",
        "discussion_id": "1912496565",
        "commented_code": "@@ -130,21 +130,19 @@ const transformers = [\n     // Key\n     'formData',\n     // Check\n-    (v) => v instanceof FormData,\n+    (v): v is FormData => v instanceof FormData,\n     // To\n-    (v: FormData) => {\n-      const entries: Record<string, any> = {}\n-      v.forEach((value, key) => {\n-        entries[key] = value\n-      })\n+    (v) => {\n+      const entries: Record<string, Array<any>> = {}\n+      v.forEach((value, key) => (entries[key] ??= []).push(value))",
        "comment_created_at": "2025-01-12T17:22:45+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Is there anything that can be done here where all keys aren't by default an array? I'd rather switch it to an array **only** if multiple instances of the same `name` are encountered.\r\n\r\nIf you've got better reasoning for sticking with this approach, I'm open to pushback on this one.",
        "pr_file_module": null
      },
      {
        "comment_id": "1912499577",
        "repo_full_name": "TanStack/router",
        "pr_number": 3140,
        "pr_file": "packages/react-router/src/transformer.ts",
        "discussion_id": "1912496565",
        "commented_code": "@@ -130,21 +130,19 @@ const transformers = [\n     // Key\n     'formData',\n     // Check\n-    (v) => v instanceof FormData,\n+    (v): v is FormData => v instanceof FormData,\n     // To\n-    (v: FormData) => {\n-      const entries: Record<string, any> = {}\n-      v.forEach((value, key) => {\n-        entries[key] = value\n-      })\n+    (v) => {\n+      const entries: Record<string, Array<any>> = {}\n+      v.forEach((value, key) => (entries[key] ??= []).push(value))",
        "comment_created_at": "2025-01-12T17:39:44+00:00",
        "comment_author": "EskiMojo14",
        "comment_body": "just because it simplifies the logic, and it's only two extra characters when serialised. I can add the logic to switch it so you can see the difference ",
        "pr_file_module": null
      },
      {
        "comment_id": "1912503062",
        "repo_full_name": "TanStack/router",
        "pr_number": 3140,
        "pr_file": "packages/react-router/src/transformer.ts",
        "discussion_id": "1912496565",
        "commented_code": "@@ -130,21 +130,19 @@ const transformers = [\n     // Key\n     'formData',\n     // Check\n-    (v) => v instanceof FormData,\n+    (v): v is FormData => v instanceof FormData,\n     // To\n-    (v: FormData) => {\n-      const entries: Record<string, any> = {}\n-      v.forEach((value, key) => {\n-        entries[key] = value\n-      })\n+    (v) => {\n+      const entries: Record<string, Array<any>> = {}\n+      v.forEach((value, key) => (entries[key] ??= []).push(value))",
        "comment_created_at": "2025-01-12T18:01:10+00:00",
        "comment_author": "EskiMojo14",
        "comment_body": "updated",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1646658849",
    "pr_number": 1787,
    "pr_file": "packages/react-router/src/path.ts",
    "created_at": "2024-06-19T20:25:27+00:00",
    "commented_code": "}\n \n export function removeBasepath(basepath: string, pathname: string) {\n-  return basepath != '/' ? pathname.replace(basepath, '') : pathname\n+  switch (true) {",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1646658849",
        "repo_full_name": "TanStack/router",
        "pr_number": 1787,
        "pr_file": "packages/react-router/src/path.ts",
        "discussion_id": "1646658849",
        "commented_code": "@@ -241,7 +243,36 @@ export function matchPathname(\n }\n \n export function removeBasepath(basepath: string, pathname: string) {\n-  return basepath != '/' ? pathname.replace(basepath, '') : pathname\n+  switch (true) {",
        "comment_created_at": "2024-06-19T20:25:27+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "wouldn't it be much simpler to replace using\r\n\r\n```tsx\r\nnew RegExp(`^${basepath}`)\r\n```\r\n\r\nnotice the `^` to ensure it only replaces the basepath if it occurs at the start of the string",
        "pr_file_module": null
      },
      {
        "comment_id": "1646668510",
        "repo_full_name": "TanStack/router",
        "pr_number": 1787,
        "pr_file": "packages/react-router/src/path.ts",
        "discussion_id": "1646658849",
        "commented_code": "@@ -241,7 +243,36 @@ export function matchPathname(\n }\n \n export function removeBasepath(basepath: string, pathname: string) {\n-  return basepath != '/' ? pathname.replace(basepath, '') : pathname\n+  switch (true) {",
        "comment_created_at": "2024-06-19T20:41:47+00:00",
        "comment_author": "xobotyi",
        "comment_body": "1) your solution does not ensure full-segment match `/app` -> `/application` will still occur.\r\n2) such interpolation with no escaping (and there is no built-in regex-ascaping in JS AFAIK) is prone to errors, as URI's path syntax allows symbols that has meaning within regexes: `/[some-segment]` will have obviously different outcome than expected.\r\n3) i have no proof to that but my gut feeling tells compillation of regex for each invocation will be suboptimal compared to bunch of `if`s",
        "pr_file_module": null
      },
      {
        "comment_id": "1646672388",
        "repo_full_name": "TanStack/router",
        "pr_number": 1787,
        "pr_file": "packages/react-router/src/path.ts",
        "discussion_id": "1646658849",
        "commented_code": "@@ -241,7 +243,36 @@ export function matchPathname(\n }\n \n export function removeBasepath(basepath: string, pathname: string) {\n-  return basepath != '/' ? pathname.replace(basepath, '') : pathname\n+  switch (true) {",
        "comment_created_at": "2024-06-19T20:48:39+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "1. true, did not think about that\r\n2. hmm I'd say not super likely, but possible\r\n3. I wasn't optimizing for runtime performance, just wanted to keep the code complexity down if possible\r\n\r\nthanks for the detailed response",
        "pr_file_module": null
      }
    ]
  }
]