[
  {
    "discussion_id": "2224811326",
    "pr_number": 4754,
    "pr_file": "docs/router/framework/react/api/router/RouteMatchType.md",
    "created_at": "2025-07-23T08:31:04+00:00",
    "commented_code": "```tsx\n interface RouteMatch {\n   id: string\n-  routeId: string\n+  routeId: TRouteId\n+  fullPath: TFullPath\n+  index: number\n   pathname: string\n-  params: Route['allParams']\n-  status: 'pending' | 'success' | 'error'\n-  isFetching: boolean\n-  showPending: boolean\n+  params: TAllParams\n+  status: 'pending' | 'success' | 'error' | 'redirected' | 'notFound'\n+  isFetching: false | 'beforeLoad' | 'loader'\n   error: unknown\n   paramsError: unknown\n   searchError: unknown\n   updatedAt: number\n   loadPromise?: Promise<void>\n-  loaderData?: Route['loaderData']\n-  context: Route['allContext']\n-  search: Route['fullSearchSchema']\n-  fetchedAt: number\n+  beforeLoadPromise?: Promise<void>\n+  loaderPromise?: Promise<void>\n+  loaderData?: TLoaderData\n+  context: TAllContext\n+  search: TFullSearchSchema\n+  fetchCount: number\n   abortController: AbortController\n-  cause: 'enter' | 'stay'\n+  cause: 'preload' | 'enter' | 'stay'\n+  loaderDeps: TLoaderDeps\n+  preload: boolean\n+  invalid: boolean",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2224811326",
        "repo_full_name": "TanStack/router",
        "pr_number": 4754,
        "pr_file": "docs/router/framework/react/api/router/RouteMatchType.md",
        "discussion_id": "2224811326",
        "commented_code": "@@ -8,22 +8,40 @@ The `RouteMatch` type represents a route match in TanStack Router.\n ```tsx\n interface RouteMatch {\n   id: string\n-  routeId: string\n+  routeId: TRouteId\n+  fullPath: TFullPath\n+  index: number\n   pathname: string\n-  params: Route['allParams']\n-  status: 'pending' | 'success' | 'error'\n-  isFetching: boolean\n-  showPending: boolean\n+  params: TAllParams\n+  status: 'pending' | 'success' | 'error' | 'redirected' | 'notFound'\n+  isFetching: false | 'beforeLoad' | 'loader'\n   error: unknown\n   paramsError: unknown\n   searchError: unknown\n   updatedAt: number\n   loadPromise?: Promise<void>\n-  loaderData?: Route['loaderData']\n-  context: Route['allContext']\n-  search: Route['fullSearchSchema']\n-  fetchedAt: number\n+  beforeLoadPromise?: Promise<void>\n+  loaderPromise?: Promise<void>\n+  loaderData?: TLoaderData\n+  context: TAllContext\n+  search: TFullSearchSchema\n+  fetchCount: number\n   abortController: AbortController\n-  cause: 'enter' | 'stay'\n+  cause: 'preload' | 'enter' | 'stay'\n+  loaderDeps: TLoaderDeps\n+  preload: boolean\n+  invalid: boolean",
        "comment_created_at": "2025-07-23T08:31:04+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Don't make changes to the `RouterMatch` type, since that is more of an internal thing. We keep the public surface on the docs quite sparse on purpose.\r\n\r\nAt most, I'd keep the `status`, `isFetching`, and `ssr` changes.",
        "pr_file_module": null
      },
      {
        "comment_id": "2224875676",
        "repo_full_name": "TanStack/router",
        "pr_number": 4754,
        "pr_file": "docs/router/framework/react/api/router/RouteMatchType.md",
        "discussion_id": "2224811326",
        "commented_code": "@@ -8,22 +8,40 @@ The `RouteMatch` type represents a route match in TanStack Router.\n ```tsx\n interface RouteMatch {\n   id: string\n-  routeId: string\n+  routeId: TRouteId\n+  fullPath: TFullPath\n+  index: number\n   pathname: string\n-  params: Route['allParams']\n-  status: 'pending' | 'success' | 'error'\n-  isFetching: boolean\n-  showPending: boolean\n+  params: TAllParams\n+  status: 'pending' | 'success' | 'error' | 'redirected' | 'notFound'\n+  isFetching: false | 'beforeLoad' | 'loader'\n   error: unknown\n   paramsError: unknown\n   searchError: unknown\n   updatedAt: number\n   loadPromise?: Promise<void>\n-  loaderData?: Route['loaderData']\n-  context: Route['allContext']\n-  search: Route['fullSearchSchema']\n-  fetchedAt: number\n+  beforeLoadPromise?: Promise<void>\n+  loaderPromise?: Promise<void>\n+  loaderData?: TLoaderData\n+  context: TAllContext\n+  search: TFullSearchSchema\n+  fetchCount: number\n   abortController: AbortController\n-  cause: 'enter' | 'stay'\n+  cause: 'preload' | 'enter' | 'stay'\n+  loaderDeps: TLoaderDeps\n+  preload: boolean\n+  invalid: boolean",
        "comment_created_at": "2025-07-23T08:52:12+00:00",
        "comment_author": "leesb971204",
        "comment_body": "> Don't make changes to the `RouterMatch` type, since that is more of an internal thing. We keep the public surface on the docs quite sparse on purpose.\r\n> \r\n> At most, I'd keep the `status`, `isFetching`, and `ssr` changes.\r\n\r\nGot it.\r\nHowever, wouldn\u2019t it be confusing for users if there\u2019s no information here about the return value of the `head` method in `RouteOptionsType`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2225156143",
        "repo_full_name": "TanStack/router",
        "pr_number": 4754,
        "pr_file": "docs/router/framework/react/api/router/RouteMatchType.md",
        "discussion_id": "2224811326",
        "commented_code": "@@ -8,22 +8,40 @@ The `RouteMatch` type represents a route match in TanStack Router.\n ```tsx\n interface RouteMatch {\n   id: string\n-  routeId: string\n+  routeId: TRouteId\n+  fullPath: TFullPath\n+  index: number\n   pathname: string\n-  params: Route['allParams']\n-  status: 'pending' | 'success' | 'error'\n-  isFetching: boolean\n-  showPending: boolean\n+  params: TAllParams\n+  status: 'pending' | 'success' | 'error' | 'redirected' | 'notFound'\n+  isFetching: false | 'beforeLoad' | 'loader'\n   error: unknown\n   paramsError: unknown\n   searchError: unknown\n   updatedAt: number\n   loadPromise?: Promise<void>\n-  loaderData?: Route['loaderData']\n-  context: Route['allContext']\n-  search: Route['fullSearchSchema']\n-  fetchedAt: number\n+  beforeLoadPromise?: Promise<void>\n+  loaderPromise?: Promise<void>\n+  loaderData?: TLoaderData\n+  context: TAllContext\n+  search: TFullSearchSchema\n+  fetchCount: number\n   abortController: AbortController\n-  cause: 'enter' | 'stay'\n+  cause: 'preload' | 'enter' | 'stay'\n+  loaderDeps: TLoaderDeps\n+  preload: boolean\n+  invalid: boolean",
        "comment_created_at": "2025-07-23T10:55:03+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "You've already defined the `ReturnType` for `head` right?\r\n\r\nWhat I'm talking about is the type for the `RouteMatch` which is being publicly shown. \r\n\r\nIdeally, the user _should_ have very few interactions with the actual route match itself.",
        "pr_file_module": null
      },
      {
        "comment_id": "2225195371",
        "repo_full_name": "TanStack/router",
        "pr_number": 4754,
        "pr_file": "docs/router/framework/react/api/router/RouteMatchType.md",
        "discussion_id": "2224811326",
        "commented_code": "@@ -8,22 +8,40 @@ The `RouteMatch` type represents a route match in TanStack Router.\n ```tsx\n interface RouteMatch {\n   id: string\n-  routeId: string\n+  routeId: TRouteId\n+  fullPath: TFullPath\n+  index: number\n   pathname: string\n-  params: Route['allParams']\n-  status: 'pending' | 'success' | 'error'\n-  isFetching: boolean\n-  showPending: boolean\n+  params: TAllParams\n+  status: 'pending' | 'success' | 'error' | 'redirected' | 'notFound'\n+  isFetching: false | 'beforeLoad' | 'loader'\n   error: unknown\n   paramsError: unknown\n   searchError: unknown\n   updatedAt: number\n   loadPromise?: Promise<void>\n-  loaderData?: Route['loaderData']\n-  context: Route['allContext']\n-  search: Route['fullSearchSchema']\n-  fetchedAt: number\n+  beforeLoadPromise?: Promise<void>\n+  loaderPromise?: Promise<void>\n+  loaderData?: TLoaderData\n+  context: TAllContext\n+  search: TFullSearchSchema\n+  fetchCount: number\n   abortController: AbortController\n-  cause: 'enter' | 'stay'\n+  cause: 'preload' | 'enter' | 'stay'\n+  loaderDeps: TLoaderDeps\n+  preload: boolean\n+  invalid: boolean",
        "comment_created_at": "2025-07-23T11:08:51+00:00",
        "comment_author": "leesb971204",
        "comment_body": "> You've already defined the `ReturnType` for `head` right?\r\n> \r\n> What I'm talking about is the type for the `RouteMatch` which is being publicly shown.\r\n> \r\n> Ideally, the user _should_ have very few interactions with the actual route match itself.\r\n\r\nYes, exactly.\r\nHowever, I mentioned it because the return type of `head` references the `RouteMatch` type like below,\r\nso I assume users will look into `RouteMatch` to understand what type it is.\r\n\r\nSo I\u2019m wondering if, at the very least, these should remain in `RouteMatch`.\r\n\r\n```typescript\r\nlinks?: RouteMatch['links']\r\nscripts?: RouteMatch['headScripts']\r\nmeta?: RouteMatch['meta']\r\nstyles?: RouteMatch['styles']\r\n``` ",
        "pr_file_module": null
      },
      {
        "comment_id": "2225221385",
        "repo_full_name": "TanStack/router",
        "pr_number": 4754,
        "pr_file": "docs/router/framework/react/api/router/RouteMatchType.md",
        "discussion_id": "2224811326",
        "commented_code": "@@ -8,22 +8,40 @@ The `RouteMatch` type represents a route match in TanStack Router.\n ```tsx\n interface RouteMatch {\n   id: string\n-  routeId: string\n+  routeId: TRouteId\n+  fullPath: TFullPath\n+  index: number\n   pathname: string\n-  params: Route['allParams']\n-  status: 'pending' | 'success' | 'error'\n-  isFetching: boolean\n-  showPending: boolean\n+  params: TAllParams\n+  status: 'pending' | 'success' | 'error' | 'redirected' | 'notFound'\n+  isFetching: false | 'beforeLoad' | 'loader'\n   error: unknown\n   paramsError: unknown\n   searchError: unknown\n   updatedAt: number\n   loadPromise?: Promise<void>\n-  loaderData?: Route['loaderData']\n-  context: Route['allContext']\n-  search: Route['fullSearchSchema']\n-  fetchedAt: number\n+  beforeLoadPromise?: Promise<void>\n+  loaderPromise?: Promise<void>\n+  loaderData?: TLoaderData\n+  context: TAllContext\n+  search: TFullSearchSchema\n+  fetchCount: number\n   abortController: AbortController\n-  cause: 'enter' | 'stay'\n+  cause: 'preload' | 'enter' | 'stay'\n+  loaderDeps: TLoaderDeps\n+  preload: boolean\n+  invalid: boolean",
        "comment_created_at": "2025-07-23T11:18:02+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "The actual underlying type there is something similar to what we\u2019ve got going on here https://tanstack.com/router/latest/docs/framework/react/api/router/LinkPropsType\r\n\r\nor perhaps make up something like FrameworkMetaTagAttributes\r\n\r\nEither way, when it comes to RouteMatch type, that isn\u2019t some we want to commit to especially since we change that quite often.",
        "pr_file_module": null
      },
      {
        "comment_id": "2225231928",
        "repo_full_name": "TanStack/router",
        "pr_number": 4754,
        "pr_file": "docs/router/framework/react/api/router/RouteMatchType.md",
        "discussion_id": "2224811326",
        "commented_code": "@@ -8,22 +8,40 @@ The `RouteMatch` type represents a route match in TanStack Router.\n ```tsx\n interface RouteMatch {\n   id: string\n-  routeId: string\n+  routeId: TRouteId\n+  fullPath: TFullPath\n+  index: number\n   pathname: string\n-  params: Route['allParams']\n-  status: 'pending' | 'success' | 'error'\n-  isFetching: boolean\n-  showPending: boolean\n+  params: TAllParams\n+  status: 'pending' | 'success' | 'error' | 'redirected' | 'notFound'\n+  isFetching: false | 'beforeLoad' | 'loader'\n   error: unknown\n   paramsError: unknown\n   searchError: unknown\n   updatedAt: number\n   loadPromise?: Promise<void>\n-  loaderData?: Route['loaderData']\n-  context: Route['allContext']\n-  search: Route['fullSearchSchema']\n-  fetchedAt: number\n+  beforeLoadPromise?: Promise<void>\n+  loaderPromise?: Promise<void>\n+  loaderData?: TLoaderData\n+  context: TAllContext\n+  search: TFullSearchSchema\n+  fetchCount: number\n   abortController: AbortController\n-  cause: 'enter' | 'stay'\n+  cause: 'preload' | 'enter' | 'stay'\n+  loaderDeps: TLoaderDeps\n+  preload: boolean\n+  invalid: boolean",
        "comment_created_at": "2025-07-23T11:21:39+00:00",
        "comment_author": "leesb971204",
        "comment_body": "> The actual underlying type there is something similar to what we\u2019ve got going on here https://tanstack.com/router/latest/docs/framework/react/api/router/LinkPropsType\r\n> \r\n> or perhaps make up something like FrameworkMetaTagAttributes\r\n> \r\n> Either way, when it comes to RouteMatch type, that isn\u2019t some we want to commit to especially since we change that quite often.\r\n\r\nOh, I see \u2014 that makes perfect sense now.\r\nIn that case, I\u2019ll revert all the other changes except for `status`, `isFetching`, and `ssr`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1878644038",
    "pr_number": 1790,
    "pr_file": "docs/framework/react/api/router/useBlockerHook.md",
    "created_at": "2024-12-10T18:46:35+00:00",
    "commented_code": "## useBlocker options\n \n-The `useBlocker` hook accepts a single _optional_ argument, an option object:\n+The `useBlocker` hook accepts a single \\_required argument, an option object:\n \n-### `options.blockerFn` option\n+### `options.shouldBlockFn` option\n \n-- Optional\n+- Required",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1878644038",
        "repo_full_name": "TanStack/router",
        "pr_number": 1790,
        "pr_file": "docs/framework/react/api/router/useBlockerHook.md",
        "discussion_id": "1878644038",
        "commented_code": "@@ -7,19 +7,57 @@ The `useBlocker` method is a hook that [blocks navigation](../../guide/navigatio\n \n ## useBlocker options\n \n-The `useBlocker` hook accepts a single _optional_ argument, an option object:\n+The `useBlocker` hook accepts a single \\_required argument, an option object:\n \n-### `options.blockerFn` option\n+### `options.shouldBlockFn` option\n \n-- Optional\n+- Required",
        "comment_created_at": "2024-12-10T18:46:35+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "if this required now, that's an API break. please either update the docs or make it backwards compatible\r\n\r\nalso name of the property should be the same as previous, `blockerFn`\r\nOR you can add a new property, mark the old one as deprecated but still accept and use it if is presented",
        "pr_file_module": null
      },
      {
        "comment_id": "1883894992",
        "repo_full_name": "TanStack/router",
        "pr_number": 1790,
        "pr_file": "docs/framework/react/api/router/useBlockerHook.md",
        "discussion_id": "1878644038",
        "commented_code": "@@ -7,19 +7,57 @@ The `useBlocker` method is a hook that [blocks navigation](../../guide/navigatio\n \n ## useBlocker options\n \n-The `useBlocker` hook accepts a single _optional_ argument, an option object:\n+The `useBlocker` hook accepts a single \\_required argument, an option object:\n \n-### `options.blockerFn` option\n+### `options.shouldBlockFn` option\n \n-- Optional\n+- Required",
        "comment_created_at": "2024-12-13T12:52:22+00:00",
        "comment_author": "tomrehnstrom",
        "comment_body": "It should not be an API break since we still allow the old shape of input object\r\n```\r\nexport type UseBlockerOpts = {\r\n  shouldBlockFn: BlockerFn\r\n\r\n  enableBeforeUnload?: boolean | (() => boolean)\r\n  disabled?: boolean\r\n  withResolver?: boolean\r\n} & { .... }\r\n\r\ntype LegacyBlockerFn = () => Promise<any> | any\r\ntype LegacyBlockerOpts = {\r\n  blockerFn?: LegacyBlockerFn\r\n  condition?: boolean | any\r\n}\r\n\r\n opts?: UseBlockerOpts | LegacyBlockerOpts | LegacyBlockerFn,\r\n```\r\nBut when not using the deprecated signature, the function is required. This should be fine no?",
        "pr_file_module": null
      },
      {
        "comment_id": "1883905243",
        "repo_full_name": "TanStack/router",
        "pr_number": 1790,
        "pr_file": "docs/framework/react/api/router/useBlockerHook.md",
        "discussion_id": "1878644038",
        "commented_code": "@@ -7,19 +7,57 @@ The `useBlocker` method is a hook that [blocks navigation](../../guide/navigatio\n \n ## useBlocker options\n \n-The `useBlocker` hook accepts a single _optional_ argument, an option object:\n+The `useBlocker` hook accepts a single \\_required argument, an option object:\n \n-### `options.blockerFn` option\n+### `options.shouldBlockFn` option\n \n-- Optional\n+- Required",
        "comment_created_at": "2024-12-13T13:01:16+00:00",
        "comment_author": "tomrehnstrom",
        "comment_body": "I think I had to rename the function property to maintain backward compatibility here, but if there is a way to do it I missed, I can fix it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1878645780",
    "pr_number": 1790,
    "pr_file": "docs/framework/react/api/router/useBlockerHook.md",
    "created_at": "2024-12-10T18:47:46+00:00",
    "commented_code": "## useBlocker options\n \n-The `useBlocker` hook accepts a single _optional_ argument, an option object:\n+The `useBlocker` hook accepts a single \\_required argument, an option object:\n \n-### `options.blockerFn` option\n+### `options.shouldBlockFn` option\n \n-- Optional\n+- Required\n - Type: `BlockerFn`\n-- The function that returns a `boolean` or `Promise<boolean>` indicating whether to allow navigation.\n+- This function should return a `boolean` or a `Promise<boolean>` that tells the blocker if it should block the current navigation\n+- The function has the argument of type `BlockerFnArgs` passed to it, which tells you information about the current and next route and the action performed\n+- Think of this function as telling the router if it should block the navigation, so returning `true` mean that it should block the navgation and `false` that it should be allowed\n+\n+### `options.disabled` option\n+\n+- Optional - defaults to `false`\n+- Type: `boolean`\n+- Specifies if the blocker should be entirely disabled or not\n \n-### `options.condition` option\n+### `options.enableBeforeUnload` option",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1878645780",
        "repo_full_name": "TanStack/router",
        "pr_number": 1790,
        "pr_file": "docs/framework/react/api/router/useBlockerHook.md",
        "discussion_id": "1878645780",
        "commented_code": "@@ -7,19 +7,57 @@ The `useBlocker` method is a hook that [blocks navigation](../../guide/navigatio\n \n ## useBlocker options\n \n-The `useBlocker` hook accepts a single _optional_ argument, an option object:\n+The `useBlocker` hook accepts a single \\_required argument, an option object:\n \n-### `options.blockerFn` option\n+### `options.shouldBlockFn` option\n \n-- Optional\n+- Required\n - Type: `BlockerFn`\n-- The function that returns a `boolean` or `Promise<boolean>` indicating whether to allow navigation.\n+- This function should return a `boolean` or a `Promise<boolean>` that tells the blocker if it should block the current navigation\n+- The function has the argument of type `BlockerFnArgs` passed to it, which tells you information about the current and next route and the action performed\n+- Think of this function as telling the router if it should block the navigation, so returning `true` mean that it should block the navgation and `false` that it should be allowed\n+\n+### `options.disabled` option\n+\n+- Optional - defaults to `false`\n+- Type: `boolean`\n+- Specifies if the blocker should be entirely disabled or not\n \n-### `options.condition` option\n+### `options.enableBeforeUnload` option",
        "comment_created_at": "2024-12-10T18:47:46+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "same here. you can add a new property, mark the old one as deprecated but still accept and use it if is presented",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1878647873",
    "pr_number": 1790,
    "pr_file": "docs/framework/react/api/router/useBlockerHook.md",
    "created_at": "2024-12-10T18:49:05+00:00",
    "commented_code": "## useBlocker options\n \n-The `useBlocker` hook accepts a single _optional_ argument, an option object:\n+The `useBlocker` hook accepts a single \\_required argument, an option object:\n \n-### `options.blockerFn` option\n+### `options.shouldBlockFn` option\n \n-- Optional\n+- Required\n - Type: `BlockerFn`\n-- The function that returns a `boolean` or `Promise<boolean>` indicating whether to allow navigation.\n+- This function should return a `boolean` or a `Promise<boolean>` that tells the blocker if it should block the current navigation\n+- The function has the argument of type `BlockerFnArgs` passed to it, which tells you information about the current and next route and the action performed\n+- Think of this function as telling the router if it should block the navigation, so returning `true` mean that it should block the navgation and `false` that it should be allowed\n+\n+### `options.disabled` option\n+\n+- Optional - defaults to `false`\n+- Type: `boolean`\n+- Specifies if the blocker should be entirely disabled or not\n \n-### `options.condition` option\n+### `options.enableBeforeUnload` option\n \n - Optional - defaults to `true`\n+- Type: `boolean | (() => boolean)`\n+- Tell the blocker to sometimes or always block the browser `beforeUnload` event or not\n+\n+### `options.withResolver` option\n+\n+- Optional - defaults to `false`\n - Type: `boolean`\n-- A navigation attempt is blocked when this condition is `true`.\n+- Specify if your the resolver that the hook returns should be used or whether the information in your `shouldBlockFn` is enough the determine blocking",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1878647873",
        "repo_full_name": "TanStack/router",
        "pr_number": 1790,
        "pr_file": "docs/framework/react/api/router/useBlockerHook.md",
        "discussion_id": "1878647873",
        "commented_code": "@@ -7,19 +7,57 @@ The `useBlocker` method is a hook that [blocks navigation](../../guide/navigatio\n \n ## useBlocker options\n \n-The `useBlocker` hook accepts a single _optional_ argument, an option object:\n+The `useBlocker` hook accepts a single \\_required argument, an option object:\n \n-### `options.blockerFn` option\n+### `options.shouldBlockFn` option\n \n-- Optional\n+- Required\n - Type: `BlockerFn`\n-- The function that returns a `boolean` or `Promise<boolean>` indicating whether to allow navigation.\n+- This function should return a `boolean` or a `Promise<boolean>` that tells the blocker if it should block the current navigation\n+- The function has the argument of type `BlockerFnArgs` passed to it, which tells you information about the current and next route and the action performed\n+- Think of this function as telling the router if it should block the navigation, so returning `true` mean that it should block the navgation and `false` that it should be allowed\n+\n+### `options.disabled` option\n+\n+- Optional - defaults to `false`\n+- Type: `boolean`\n+- Specifies if the blocker should be entirely disabled or not\n \n-### `options.condition` option\n+### `options.enableBeforeUnload` option\n \n - Optional - defaults to `true`\n+- Type: `boolean | (() => boolean)`\n+- Tell the blocker to sometimes or always block the browser `beforeUnload` event or not\n+\n+### `options.withResolver` option\n+\n+- Optional - defaults to `false`\n - Type: `boolean`\n-- A navigation attempt is blocked when this condition is `true`.\n+- Specify if your the resolver that the hook returns should be used or whether the information in your `shouldBlockFn` is enough the determine blocking",
        "comment_created_at": "2024-12-10T18:49:05+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "```suggestion\r\n- Specify if you are the resolver that the hook returns should be used or whether the information in your `shouldBlockFn` is enough to determine blocking\r\n```",
        "pr_file_module": null
      }
    ]
  }
]