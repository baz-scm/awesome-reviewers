[
  {
    "discussion_id": "2281146816",
    "pr_number": 4985,
    "pr_file": "packages/router-core/tests/qss.test.ts",
    "created_at": "2025-08-18T02:02:48+00:00",
    "commented_code": "it('should handle encoding an object with array values', () => {\n     const obj = { token: ['foo', 'bar'], key: 'value' }\n     const queryString = encode(obj)\n-    expect(queryString).toEqual('token=foo&token=bar&key=value')\n+    expect(queryString).toEqual('token=foo%2Cbar&key=value')",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2281146816",
        "repo_full_name": "TanStack/router",
        "pr_number": 4985,
        "pr_file": "packages/router-core/tests/qss.test.ts",
        "discussion_id": "2281146816",
        "commented_code": "@@ -23,7 +17,7 @@ describe('encode function', () => {\n   it('should handle encoding an object with array values', () => {\n     const obj = { token: ['foo', 'bar'], key: 'value' }\n     const queryString = encode(obj)\n-    expect(queryString).toEqual('token=foo&token=bar&key=value')\n+    expect(queryString).toEqual('token=foo%2Cbar&key=value')",
        "comment_created_at": "2025-08-18T02:02:48+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "In its current form, this change to how arrays are represented in stringified format, would break any existing bookmarks. This'd be a problem and a breaking change.\n\nPlus, the general accepted spec for having the same key (i.e Array values) be repeated multiple times in the query parameters are as such.\n\n```\n?genre=Pop&genre=RNB&year=2005\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2281418481",
        "repo_full_name": "TanStack/router",
        "pr_number": 4985,
        "pr_file": "packages/router-core/tests/qss.test.ts",
        "discussion_id": "2281146816",
        "commented_code": "@@ -23,7 +17,7 @@ describe('encode function', () => {\n   it('should handle encoding an object with array values', () => {\n     const obj = { token: ['foo', 'bar'], key: 'value' }\n     const queryString = encode(obj)\n-    expect(queryString).toEqual('token=foo&token=bar&key=value')\n+    expect(queryString).toEqual('token=foo%2Cbar&key=value')",
        "comment_created_at": "2025-08-18T06:32:08+00:00",
        "comment_author": "Sheraff",
        "comment_body": "I removed `encode` support for array values because in practice we always provide a custom stringification. This should not represent a change in the public API.\r\n\r\nFor example, what we do looks like this:\r\n```ts\r\nencode({\r\n  token: stringify(['foo', 'bar'])\r\n})\r\n```\r\nSo I don't think this is an issue",
        "pr_file_module": null
      },
      {
        "comment_id": "2281659920",
        "repo_full_name": "TanStack/router",
        "pr_number": 4985,
        "pr_file": "packages/router-core/tests/qss.test.ts",
        "discussion_id": "2281146816",
        "commented_code": "@@ -23,7 +17,7 @@ describe('encode function', () => {\n   it('should handle encoding an object with array values', () => {\n     const obj = { token: ['foo', 'bar'], key: 'value' }\n     const queryString = encode(obj)\n-    expect(queryString).toEqual('token=foo&token=bar&key=value')\n+    expect(queryString).toEqual('token=foo%2Cbar&key=value')",
        "comment_created_at": "2025-08-18T08:25:01+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "What concerns me, is what gets printed out to the end-user's URL bar and what our \"sensible defaults\" are.\r\n\r\nSo, at runtime, will inputting `search = { genres=[Pop,Rock] }` change from `?genres=Pop&genres=Rock` to something else (i.e `?genres=Pop%2CRock`)?\r\n\r\n- **If so**, then this is a **breaking change**.\r\n- **If not,** then my bad. The way I interpreted the test case, gave me the impression that this had an effect on the defaults and what get's output into the URL bar.",
        "pr_file_module": null
      },
      {
        "comment_id": "2281686396",
        "repo_full_name": "TanStack/router",
        "pr_number": 4985,
        "pr_file": "packages/router-core/tests/qss.test.ts",
        "discussion_id": "2281146816",
        "commented_code": "@@ -23,7 +17,7 @@ describe('encode function', () => {\n   it('should handle encoding an object with array values', () => {\n     const obj = { token: ['foo', 'bar'], key: 'value' }\n     const queryString = encode(obj)\n-    expect(queryString).toEqual('token=foo&token=bar&key=value')\n+    expect(queryString).toEqual('token=foo%2Cbar&key=value')",
        "comment_created_at": "2025-08-18T08:35:37+00:00",
        "comment_author": "Sheraff",
        "comment_body": "No, there should not be any change visible to the user. This is because `encode` is actually wrapped inside of `stringifySearchWith`.\r\n\r\nThe tests here show what `encode` would output without a custom `stringify` function. But `stringifySearchWith` provides a custom function.\r\n\r\nThe other PR i opened (https://github.com/TanStack/router/pull/4987) adds tests for what the user will actually see. That way we can make sure this PR doesn't change that.",
        "pr_file_module": null
      },
      {
        "comment_id": "2281696026",
        "repo_full_name": "TanStack/router",
        "pr_number": 4985,
        "pr_file": "packages/router-core/tests/qss.test.ts",
        "discussion_id": "2281146816",
        "commented_code": "@@ -23,7 +17,7 @@ describe('encode function', () => {\n   it('should handle encoding an object with array values', () => {\n     const obj = { token: ['foo', 'bar'], key: 'value' }\n     const queryString = encode(obj)\n-    expect(queryString).toEqual('token=foo&token=bar&key=value')\n+    expect(queryString).toEqual('token=foo%2Cbar&key=value')",
        "comment_created_at": "2025-08-18T08:38:23+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Alrighty \ud83d\udc4d\ud83c\udffc\r\n\r\nAs long as the user sees no changes to any of their existing bookmarks, then all good from my side!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2218255985",
    "pr_number": 4730,
    "pr_file": "packages/router-core/src/router.ts",
    "created_at": "2025-07-21T05:53:59+00:00",
    "commented_code": "export interface MatchRoutesFn {\n   (\n     pathname: string,\n-    locationSearch: AnySchema,\n+    locationSearch?: AnySchema,",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2218255985",
        "repo_full_name": "TanStack/router",
        "pr_number": 4730,
        "pr_file": "packages/router-core/src/router.ts",
        "discussion_id": "2218255985",
        "commented_code": "@@ -625,9 +625,12 @@ export type StartTransitionFn = (fn: () => void) => void\n export interface MatchRoutesFn {\n   (\n     pathname: string,\n-    locationSearch: AnySchema,\n+    locationSearch?: AnySchema,",
        "comment_created_at": "2025-07-21T05:53:59+00:00",
        "comment_author": "leesb971204",
        "comment_body": "I\u2019m not sure if the `locationSearch` property needs to be required.\r\nThe original `matchRoutes` function worked fine even without `locationSearch`.\r\nI\u2019d appreciate it if you could share your thoughts on this.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2217790446",
    "pr_number": 4724,
    "pr_file": "packages/router-core/src/router.ts",
    "created_at": "2025-07-20T12:27:57+00:00",
    "commented_code": "throw err\n               }\n \n-              err.routerCode = routerCode\n               firstBadMatchIndex = firstBadMatchIndex ?? index\n               handleRedirectAndNotFound(this.getMatch(matchId)!, err)\n \n               try {\n-                route.options.onError?.(err)\n+                route.options.onError?.(err, routerCode)",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2217790446",
        "repo_full_name": "TanStack/router",
        "pr_number": 4724,
        "pr_file": "packages/router-core/src/router.ts",
        "discussion_id": "2217790446",
        "commented_code": "@@ -2187,12 +2189,11 @@ export class RouterCore<\n                 throw err\n               }\n \n-              err.routerCode = routerCode\n               firstBadMatchIndex = firstBadMatchIndex ?? index\n               handleRedirectAndNotFound(this.getMatch(matchId)!, err)\n \n               try {\n-                route.options.onError?.(err)\n+                route.options.onError?.(err, routerCode)",
        "comment_created_at": "2025-07-20T12:27:57+00:00",
        "comment_author": "leesb971204",
        "comment_body": "Applies minimal changes to preserve compatibility for users accessing `err.routerCode` in `onError`.\r\nIn fact, there are quite a few people who use it [this way](https://github.com/search?q=.routerCode&type=code).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1632213245",
    "pr_number": 1721,
    "pr_file": "packages/react-router/src/router.ts",
    "created_at": "2024-06-09T08:54:08+00:00",
    "commented_code": "preload: !!preload,\n                     context: parentContext,\n                     location,\n-                    navigate: (opts: any) =>\n-                      this.navigate({ ...opts, from: match.pathname }),\n+                    navigate: (opts: any) => this.navigate({ ...opts }),",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1632213245",
        "repo_full_name": "TanStack/router",
        "pr_number": 1721,
        "pr_file": "packages/react-router/src/router.ts",
        "discussion_id": "1632213245",
        "commented_code": "@@ -1773,8 +1786,7 @@ export class Router<\n                     preload: !!preload,\n                     context: parentContext,\n                     location,\n-                    navigate: (opts: any) =>\n-                      this.navigate({ ...opts, from: match.pathname }),\n+                    navigate: (opts: any) => this.navigate({ ...opts }),",
        "comment_created_at": "2024-06-09T08:54:08+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Could avoid the spread here yea?\r\n\r\n`navigate: (opts: any) => this.navigate(opts as any)`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1632213519",
    "pr_number": 1721,
    "pr_file": "packages/react-router/src/router.ts",
    "created_at": "2024-06-09T08:55:26+00:00",
    "commented_code": "} catch (err) {\n       if (isRedirect(err)) {\n         return await this.preloadRoute({\n-          fromSearch: next.search,",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1632213519",
        "repo_full_name": "TanStack/router",
        "pr_number": 1721,
        "pr_file": "packages/react-router/src/router.ts",
        "discussion_id": "1632213519",
        "commented_code": "@@ -2183,8 +2194,6 @@ export class Router<\n     } catch (err) {\n       if (isRedirect(err)) {\n         return await this.preloadRoute({\n-          fromSearch: next.search,",
        "comment_created_at": "2024-06-09T08:55:26+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "What's the purpose of removing `from` in the route preload?\r\n\r\nOr is this automatically being resolved in `buildLocation`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1632273781",
        "repo_full_name": "TanStack/router",
        "pr_number": 1721,
        "pr_file": "packages/react-router/src/router.ts",
        "discussion_id": "1632213519",
        "commented_code": "@@ -2183,8 +2194,6 @@ export class Router<\n     } catch (err) {\n       if (isRedirect(err)) {\n         return await this.preloadRoute({\n-          fromSearch: next.search,",
        "comment_created_at": "2024-06-09T12:50:23+00:00",
        "comment_author": "chorobin",
        "comment_body": "It seems like router was using the preloaded location for `from`. Problem with this is it might not match the current location and can cause the invariant to trigger. We decided its better if the user explicitly passes `from` if they want relative pathing",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1322264920",
    "pr_number": 720,
    "pr_file": "packages/router-core/src/router.ts",
    "created_at": "2023-09-12T01:40:15+00:00",
    "commented_code": "params,\n       replace,\n       resetScroll,\n+      state,",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1322264920",
        "repo_full_name": "TanStack/router",
        "pr_number": 720,
        "pr_file": "packages/router-core/src/router.ts",
        "discussion_id": "1322264920",
        "commented_code": "@@ -1209,6 +1210,7 @@ export class Router<\n       params,\n       replace,\n       resetScroll,\n+      state,",
        "comment_created_at": "2023-09-12T01:40:15+00:00",
        "comment_author": "DenIrkhin",
        "comment_body": "I tried locally and on stackblitz\r\n[forked beta v.188](https://stackblitz.com/edit/tanstack-router-bn5cgc?file=src%2Fmain.tsx)\r\n\r\n`state` is not passing through `navigate` still...\r\n\r\nAnother point:\r\nAfter the latest changes state object complies to `'true | NonNullableUpdater<LocationState> | undefined'`\r\n![image](https://github.com/TanStack/router/assets/20629939/1a5f9c53-786d-452a-949c-af26f19f37fe)\r\n\r\nthat's not how it is on docs `// `state` is either an object of state or a function that supplies the previous state and allows you to return a new one. State is stored in the history API and can be useful for passing data between routes that you do not with to permanently store in URL search params.` \r\n\r\nI tried to use it as it was described on the docs - to store additional state and keep URL route simple without putting the state in search params.  I know it looks against one of the main concepts of TanStack router ;) , but as soon it's documented I tried to use it and open the PR, because it didn't work for me.\r\n\r\nEdited: `<Link>` is passing `state` to location, but stared complaining about types as well.",
        "pr_file_module": null
      }
    ]
  }
]