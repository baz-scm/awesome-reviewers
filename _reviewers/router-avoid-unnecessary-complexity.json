[
  {
    "discussion_id": "2271883390",
    "pr_number": 4934,
    "pr_file": "docs/router/eslint/eslint-plugin-router.md",
    "created_at": "2025-08-13T01:47:32+00:00",
    "commented_code": "The following rules are available in the TanStack Router ESLint Plugin:\n \n - [@tanstack/router/create-route-property-order](../create-route-property-order.md)\n+\n+## Conflicts with other ESLint plugins\n+\n+If you are using other ESLint plugins you might need to adapt some rules to work well with TanStack Router.\n+\n+### `typescript-eslint`\n+\n+The [`@typescript-eslint/only-throw-error`](https://typescript-eslint.io/rules/only-throw-error/), enabled by default in the `recommended-type-checked` and `strict-type-checked` rule sets, disallows throwing non-Error values as exceptions, which is considered a good practice. To make it work well with TanStack Router, you should add redirect to the allowed thrown objects:",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2271883390",
        "repo_full_name": "TanStack/router",
        "pr_number": 4934,
        "pr_file": "docs/router/eslint/eslint-plugin-router.md",
        "discussion_id": "2271883390",
        "commented_code": "@@ -103,3 +103,27 @@ Alternatively, add `@tanstack/eslint-plugin-router` to the plugins section, and\n The following rules are available in the TanStack Router ESLint Plugin:\n \n - [@tanstack/router/create-route-property-order](../create-route-property-order.md)\n+\n+## Conflicts with other ESLint plugins\n+\n+If you are using other ESLint plugins you might need to adapt some rules to work well with TanStack Router.\n+\n+### `typescript-eslint`\n+\n+The [`@typescript-eslint/only-throw-error`](https://typescript-eslint.io/rules/only-throw-error/), enabled by default in the `recommended-type-checked` and `strict-type-checked` rule sets, disallows throwing non-Error values as exceptions, which is considered a good practice. To make it work well with TanStack Router, you should add redirect to the allowed thrown objects:",
        "comment_created_at": "2025-08-13T01:47:32+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "```suggestion\nThe [`@typescript-eslint/only-throw-error`](https://typescript-eslint.io/rules/only-throw-error/) rule, enabled by default in the `recommended-type-checked` and `strict-type-checked` rulesets, disallows the throwing of non-Error values as exceptions, which is considered a good practice.\n\nTo make sure it that it does not conflict with TanStack Router, you should add `redirect` to the allowed as a throwable objects.\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1984666219",
    "pr_number": 3677,
    "pr_file": "docs/router/framework/react/guide/custom-link.md",
    "created_at": "2025-03-07T08:41:10+00:00",
    "commented_code": "### MUI example\n \n+There is an [example](../examples/start-material-ui) available which uses these patterns.\n+\n+#### Link\n+\n+If the MUI `Link` should simply behave like the Router `Link`, it can be just wrapped with `createLink`:\n+\n ```tsx\n-import * as React from 'react'\n-import { createLink, LinkComponent } from '@tanstack/react-router'\n-import { Button, ButtonProps } from '@mui/material'\n+import { createLink } from '@tanstack/react-router'\n+import { Link } from '@mui/material'\n \n-interface MUILinkProps extends Omit<ButtonProps, 'href'> {\n-  // Add any additional props you want to pass to the button\n+export const CustomLink = createLink(Link)\n+```\n+\n+If the `Link` should be customized this approach can be used:\n+\n+```tsx\n+import React from 'react'\n+import { createLink } from '@tanstack/react-router'\n+import { Link } from '@mui/material'\n+import type { LinkProps } from '@mui/material'\n+import type { LinkComponent } from '@tanstack/react-router'\n+\n+interface MUIButtonLinkProps extends Omit<LinkProps, 'href'> {\n+  // Add any additional props you want to pass to the Link\n }\n \n-const MUILinkComponent = React.forwardRef<HTMLAnchorElement, MUILinkProps>(\n-  (props, ref) => {\n-    return <Button component={'a'} ref={ref} {...props} />\n-  },\n-)\n+const MUILinkComponent = React.forwardRef<\n+  HTMLAnchorElement,\n+  MUIButtonLinkProps\n+>((props, ref) => <Link ref={ref} {...props} />)\n \n const CreatedLinkComponent = createLink(MUILinkComponent)\n \n export const CustomLink: LinkComponent<typeof MUILinkComponent> = (props) => {\n   return <CreatedLinkComponent preload={'intent'} {...props} />\n }\n+\n+// Can also be styled\n+```\n+\n+#### Button\n+\n+```tsx\n+import React from 'react'\n+import { createLink } from '@tanstack/react-router'\n+import { Button } from '@mui/material'\n+import type { ButtonProps } from '@mui/material'\n+import type { LinkComponent } from '@tanstack/react-router'\n+\n+interface MUIButtonLinkProps extends Omit<ButtonProps<'a'>, 'href'> {",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1984666219",
        "repo_full_name": "TanStack/router",
        "pr_number": 3677,
        "pr_file": "docs/router/framework/react/guide/custom-link.md",
        "discussion_id": "1984666219",
        "commented_code": "@@ -146,26 +146,86 @@ export const CustomLink: LinkComponent<typeof ChakraLinkComponent> = (\n \n ### MUI example\n \n+There is an [example](../examples/start-material-ui) available which uses these patterns.\n+\n+#### Link\n+\n+If the MUI `Link` should simply behave like the Router `Link`, it can be just wrapped with `createLink`:\n+\n ```tsx\n-import * as React from 'react'\n-import { createLink, LinkComponent } from '@tanstack/react-router'\n-import { Button, ButtonProps } from '@mui/material'\n+import { createLink } from '@tanstack/react-router'\n+import { Link } from '@mui/material'\n \n-interface MUILinkProps extends Omit<ButtonProps, 'href'> {\n-  // Add any additional props you want to pass to the button\n+export const CustomLink = createLink(Link)\n+```\n+\n+If the `Link` should be customized this approach can be used:\n+\n+```tsx\n+import React from 'react'\n+import { createLink } from '@tanstack/react-router'\n+import { Link } from '@mui/material'\n+import type { LinkProps } from '@mui/material'\n+import type { LinkComponent } from '@tanstack/react-router'\n+\n+interface MUIButtonLinkProps extends Omit<LinkProps, 'href'> {\n+  // Add any additional props you want to pass to the Link\n }\n \n-const MUILinkComponent = React.forwardRef<HTMLAnchorElement, MUILinkProps>(\n-  (props, ref) => {\n-    return <Button component={'a'} ref={ref} {...props} />\n-  },\n-)\n+const MUILinkComponent = React.forwardRef<\n+  HTMLAnchorElement,\n+  MUIButtonLinkProps\n+>((props, ref) => <Link ref={ref} {...props} />)\n \n const CreatedLinkComponent = createLink(MUILinkComponent)\n \n export const CustomLink: LinkComponent<typeof MUILinkComponent> = (props) => {\n   return <CreatedLinkComponent preload={'intent'} {...props} />\n }\n+\n+// Can also be styled\n+```\n+\n+#### Button\n+\n+```tsx\n+import React from 'react'\n+import { createLink } from '@tanstack/react-router'\n+import { Button } from '@mui/material'\n+import type { ButtonProps } from '@mui/material'\n+import type { LinkComponent } from '@tanstack/react-router'\n+\n+interface MUIButtonLinkProps extends Omit<ButtonProps<'a'>, 'href'> {",
        "comment_created_at": "2025-03-07T08:41:10+00:00",
        "comment_author": "KiwiKilian",
        "comment_body": "Not sure why `href` has to be omitted? It seems to get overwritten by `createLink` anyways?",
        "pr_file_module": null
      },
      {
        "comment_id": "1984721424",
        "repo_full_name": "TanStack/router",
        "pr_number": 3677,
        "pr_file": "docs/router/framework/react/guide/custom-link.md",
        "discussion_id": "1984666219",
        "commented_code": "@@ -146,26 +146,86 @@ export const CustomLink: LinkComponent<typeof ChakraLinkComponent> = (\n \n ### MUI example\n \n+There is an [example](../examples/start-material-ui) available which uses these patterns.\n+\n+#### Link\n+\n+If the MUI `Link` should simply behave like the Router `Link`, it can be just wrapped with `createLink`:\n+\n ```tsx\n-import * as React from 'react'\n-import { createLink, LinkComponent } from '@tanstack/react-router'\n-import { Button, ButtonProps } from '@mui/material'\n+import { createLink } from '@tanstack/react-router'\n+import { Link } from '@mui/material'\n \n-interface MUILinkProps extends Omit<ButtonProps, 'href'> {\n-  // Add any additional props you want to pass to the button\n+export const CustomLink = createLink(Link)\n+```\n+\n+If the `Link` should be customized this approach can be used:\n+\n+```tsx\n+import React from 'react'\n+import { createLink } from '@tanstack/react-router'\n+import { Link } from '@mui/material'\n+import type { LinkProps } from '@mui/material'\n+import type { LinkComponent } from '@tanstack/react-router'\n+\n+interface MUIButtonLinkProps extends Omit<LinkProps, 'href'> {\n+  // Add any additional props you want to pass to the Link\n }\n \n-const MUILinkComponent = React.forwardRef<HTMLAnchorElement, MUILinkProps>(\n-  (props, ref) => {\n-    return <Button component={'a'} ref={ref} {...props} />\n-  },\n-)\n+const MUILinkComponent = React.forwardRef<\n+  HTMLAnchorElement,\n+  MUIButtonLinkProps\n+>((props, ref) => <Link ref={ref} {...props} />)\n \n const CreatedLinkComponent = createLink(MUILinkComponent)\n \n export const CustomLink: LinkComponent<typeof MUILinkComponent> = (props) => {\n   return <CreatedLinkComponent preload={'intent'} {...props} />\n }\n+\n+// Can also be styled\n+```\n+\n+#### Button\n+\n+```tsx\n+import React from 'react'\n+import { createLink } from '@tanstack/react-router'\n+import { Button } from '@mui/material'\n+import type { ButtonProps } from '@mui/material'\n+import type { LinkComponent } from '@tanstack/react-router'\n+\n+interface MUIButtonLinkProps extends Omit<ButtonProps<'a'>, 'href'> {",
        "comment_created_at": "2025-03-07T09:20:49+00:00",
        "comment_author": "reihwald",
        "comment_body": "I also wondered why the example is written like this. We don't do something like this in our codebase and never faced any issues.",
        "pr_file_module": null
      },
      {
        "comment_id": "1984740463",
        "repo_full_name": "TanStack/router",
        "pr_number": 3677,
        "pr_file": "docs/router/framework/react/guide/custom-link.md",
        "discussion_id": "1984666219",
        "commented_code": "@@ -146,26 +146,86 @@ export const CustomLink: LinkComponent<typeof ChakraLinkComponent> = (\n \n ### MUI example\n \n+There is an [example](../examples/start-material-ui) available which uses these patterns.\n+\n+#### Link\n+\n+If the MUI `Link` should simply behave like the Router `Link`, it can be just wrapped with `createLink`:\n+\n ```tsx\n-import * as React from 'react'\n-import { createLink, LinkComponent } from '@tanstack/react-router'\n-import { Button, ButtonProps } from '@mui/material'\n+import { createLink } from '@tanstack/react-router'\n+import { Link } from '@mui/material'\n \n-interface MUILinkProps extends Omit<ButtonProps, 'href'> {\n-  // Add any additional props you want to pass to the button\n+export const CustomLink = createLink(Link)\n+```\n+\n+If the `Link` should be customized this approach can be used:\n+\n+```tsx\n+import React from 'react'\n+import { createLink } from '@tanstack/react-router'\n+import { Link } from '@mui/material'\n+import type { LinkProps } from '@mui/material'\n+import type { LinkComponent } from '@tanstack/react-router'\n+\n+interface MUIButtonLinkProps extends Omit<LinkProps, 'href'> {\n+  // Add any additional props you want to pass to the Link\n }\n \n-const MUILinkComponent = React.forwardRef<HTMLAnchorElement, MUILinkProps>(\n-  (props, ref) => {\n-    return <Button component={'a'} ref={ref} {...props} />\n-  },\n-)\n+const MUILinkComponent = React.forwardRef<\n+  HTMLAnchorElement,\n+  MUIButtonLinkProps\n+>((props, ref) => <Link ref={ref} {...props} />)\n \n const CreatedLinkComponent = createLink(MUILinkComponent)\n \n export const CustomLink: LinkComponent<typeof MUILinkComponent> = (props) => {\n   return <CreatedLinkComponent preload={'intent'} {...props} />\n }\n+\n+// Can also be styled\n+```\n+\n+#### Button\n+\n+```tsx\n+import React from 'react'\n+import { createLink } from '@tanstack/react-router'\n+import { Button } from '@mui/material'\n+import type { ButtonProps } from '@mui/material'\n+import type { LinkComponent } from '@tanstack/react-router'\n+\n+interface MUIButtonLinkProps extends Omit<ButtonProps<'a'>, 'href'> {",
        "comment_created_at": "2025-03-07T09:33:22+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "then just remove the href omit if it's not necessary. might have just been copied over from another example ",
        "pr_file_module": null
      },
      {
        "comment_id": "1984777904",
        "repo_full_name": "TanStack/router",
        "pr_number": 3677,
        "pr_file": "docs/router/framework/react/guide/custom-link.md",
        "discussion_id": "1984666219",
        "commented_code": "@@ -146,26 +146,86 @@ export const CustomLink: LinkComponent<typeof ChakraLinkComponent> = (\n \n ### MUI example\n \n+There is an [example](../examples/start-material-ui) available which uses these patterns.\n+\n+#### Link\n+\n+If the MUI `Link` should simply behave like the Router `Link`, it can be just wrapped with `createLink`:\n+\n ```tsx\n-import * as React from 'react'\n-import { createLink, LinkComponent } from '@tanstack/react-router'\n-import { Button, ButtonProps } from '@mui/material'\n+import { createLink } from '@tanstack/react-router'\n+import { Link } from '@mui/material'\n \n-interface MUILinkProps extends Omit<ButtonProps, 'href'> {\n-  // Add any additional props you want to pass to the button\n+export const CustomLink = createLink(Link)\n+```\n+\n+If the `Link` should be customized this approach can be used:\n+\n+```tsx\n+import React from 'react'\n+import { createLink } from '@tanstack/react-router'\n+import { Link } from '@mui/material'\n+import type { LinkProps } from '@mui/material'\n+import type { LinkComponent } from '@tanstack/react-router'\n+\n+interface MUIButtonLinkProps extends Omit<LinkProps, 'href'> {\n+  // Add any additional props you want to pass to the Link\n }\n \n-const MUILinkComponent = React.forwardRef<HTMLAnchorElement, MUILinkProps>(\n-  (props, ref) => {\n-    return <Button component={'a'} ref={ref} {...props} />\n-  },\n-)\n+const MUILinkComponent = React.forwardRef<\n+  HTMLAnchorElement,\n+  MUIButtonLinkProps\n+>((props, ref) => <Link ref={ref} {...props} />)\n \n const CreatedLinkComponent = createLink(MUILinkComponent)\n \n export const CustomLink: LinkComponent<typeof MUILinkComponent> = (props) => {\n   return <CreatedLinkComponent preload={'intent'} {...props} />\n }\n+\n+// Can also be styled\n+```\n+\n+#### Button\n+\n+```tsx\n+import React from 'react'\n+import { createLink } from '@tanstack/react-router'\n+import { Button } from '@mui/material'\n+import type { ButtonProps } from '@mui/material'\n+import type { LinkComponent } from '@tanstack/react-router'\n+\n+interface MUIButtonLinkProps extends Omit<ButtonProps<'a'>, 'href'> {",
        "comment_created_at": "2025-03-07T09:56:19+00:00",
        "comment_author": "KiwiKilian",
        "comment_body": "Removed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1947554165",
    "pr_number": 3366,
    "pr_file": "docs/router/framework/react/guide/file-based-routing.md",
    "created_at": "2025-02-08T09:53:39+00:00",
    "commented_code": "- (Optional, **Defaults to `single`**) whether to use `single` or `double` quotes when formatting the generated route tree file.\n - **`semicolons`**\n   - (Optional, **Defaults to `false`**) whether to use semicolons in the generated route tree file.\n+- **`formatter`**",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1947554165",
        "repo_full_name": "TanStack/router",
        "pr_number": 3366,
        "pr_file": "docs/router/framework/react/guide/file-based-routing.md",
        "discussion_id": "1947554165",
        "commented_code": "@@ -416,6 +416,9 @@ The following options are available for configuration via the `tsr.config.json`\n   - (Optional, **Defaults to `single`**) whether to use `single` or `double` quotes when formatting the generated route tree file.\n - **`semicolons`**\n   - (Optional, **Defaults to `false`**) whether to use semicolons in the generated route tree file.\n+- **`formatter`**",
        "comment_created_at": "2025-02-08T09:53:39+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "we need a more descriptive name for this config option since this only affects route files",
        "pr_file_module": null
      },
      {
        "comment_id": "1947600799",
        "repo_full_name": "TanStack/router",
        "pr_number": 3366,
        "pr_file": "docs/router/framework/react/guide/file-based-routing.md",
        "discussion_id": "1947554165",
        "commented_code": "@@ -416,6 +416,9 @@ The following options are available for configuration via the `tsr.config.json`\n   - (Optional, **Defaults to `single`**) whether to use `single` or `double` quotes when formatting the generated route tree file.\n - **`semicolons`**\n   - (Optional, **Defaults to `false`**) whether to use semicolons in the generated route tree file.\n+- **`formatter`**",
        "comment_created_at": "2025-02-08T11:06:11+00:00",
        "comment_author": "benjamesfleming",
        "comment_body": "Yeah... I was wondering about this because both existing prettier options (quoteStyle and semicolons) are documented as settings for the generated route tree file, but from what I can tell they are only used to format the route files.\r\n\r\nMaybe there has been a regression in the docs?\r\n\r\nDid you have a name suggestion? How about `routeFileFormatter`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1947808448",
        "repo_full_name": "TanStack/router",
        "pr_number": 3366,
        "pr_file": "docs/router/framework/react/guide/file-based-routing.md",
        "discussion_id": "1947554165",
        "commented_code": "@@ -416,6 +416,9 @@ The following options are available for configuration via the `tsr.config.json`\n   - (Optional, **Defaults to `single`**) whether to use `single` or `double` quotes when formatting the generated route tree file.\n - **`semicolons`**\n   - (Optional, **Defaults to `false`**) whether to use semicolons in the generated route tree file.\n+- **`formatter`**",
        "comment_created_at": "2025-02-08T13:25:23+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "`routeFileFormatter` is better!\r\n\r\n@SeanCassiere often has good naming ideas, so let's wait for him",
        "pr_file_module": null
      },
      {
        "comment_id": "1947970550",
        "repo_full_name": "TanStack/router",
        "pr_number": 3366,
        "pr_file": "docs/router/framework/react/guide/file-based-routing.md",
        "discussion_id": "1947554165",
        "commented_code": "@@ -416,6 +416,9 @@ The following options are available for configuration via the `tsr.config.json`\n   - (Optional, **Defaults to `single`**) whether to use `single` or `double` quotes when formatting the generated route tree file.\n - **`semicolons`**\n   - (Optional, **Defaults to `false`**) whether to use semicolons in the generated route tree file.\n+- **`formatter`**",
        "comment_created_at": "2025-02-08T23:07:13+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "> Yeah... I was wondering about this because both existing prettier options (quoteStyle and semicolons) are documented as settings for the generated route tree file, but from what I can tell they are only used to format the route files.\r\n\r\nThat's probably a mistake in the docs. Those settings (semicolons and quotes) are used for both the `routeTree` and generated route files.\r\n\r\nIt's generally not an issue for the route files, since as soon as user content comes in, the router-generator should be pretty hands-off at that point. @schiller-manuel, I hate to say it, but a lot of this could be avoided, if these transformations in the route file, were done using AST transformations.",
        "pr_file_module": null
      },
      {
        "comment_id": "1947982407",
        "repo_full_name": "TanStack/router",
        "pr_number": 3366,
        "pr_file": "docs/router/framework/react/guide/file-based-routing.md",
        "discussion_id": "1947554165",
        "commented_code": "@@ -416,6 +416,9 @@ The following options are available for configuration via the `tsr.config.json`\n   - (Optional, **Defaults to `single`**) whether to use `single` or `double` quotes when formatting the generated route tree file.\n - **`semicolons`**\n   - (Optional, **Defaults to `false`**) whether to use semicolons in the generated route tree file.\n+- **`formatter`**",
        "comment_created_at": "2025-02-09T00:52:58+00:00",
        "comment_author": "benjamesfleming",
        "comment_body": "> That's probably a mistake in the docs.\r\n\r\nYeah. The existing options, and the new `formatter` option, apply to both the route tree file and the generated route files. I've updated the docs to reflect this.\r\n\r\n> I hate to say it, but a lot of this could be avoided, if these transformations in the route file, were done using AST transformations.\r\n\r\nJust using AST transformations would still run into formatting issues. If the AST transformation updates the route id to one that exceeds the line's character limit, then the user would still have to run their formatter over the transformed code to ensure compliance.",
        "pr_file_module": null
      },
      {
        "comment_id": "1947984356",
        "repo_full_name": "TanStack/router",
        "pr_number": 3366,
        "pr_file": "docs/router/framework/react/guide/file-based-routing.md",
        "discussion_id": "1947554165",
        "commented_code": "@@ -416,6 +416,9 @@ The following options are available for configuration via the `tsr.config.json`\n   - (Optional, **Defaults to `single`**) whether to use `single` or `double` quotes when formatting the generated route tree file.\n - **`semicolons`**\n   - (Optional, **Defaults to `false`**) whether to use semicolons in the generated route tree file.\n+- **`formatter`**",
        "comment_created_at": "2025-02-09T01:14:33+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "> Just using AST transformations would still run into formatting issues. If the AST transformation updates the route id to one that exceeds the line's character limit, then the user would still have to run their formatter over the transformed code to ensure compliance.\r\n\r\nEither way, it falls on the user, even if a `formatter='none'` option was introduced, that too would require the user to run their format on the output.\r\n\r\nSince the goal of `formatter='none'`, would be to save the file without making any **stylistic** changes (i.e what we are doing now with prettier), it'd make more sense (in my point of view) to make those changes via AST transformations and let the user's formatted do the necessary work on that side. This way, we really are guaranteeing that we aren't saving the route files with any opinions on code style.",
        "pr_file_module": null
      },
      {
        "comment_id": "1947995897",
        "repo_full_name": "TanStack/router",
        "pr_number": 3366,
        "pr_file": "docs/router/framework/react/guide/file-based-routing.md",
        "discussion_id": "1947554165",
        "commented_code": "@@ -416,6 +416,9 @@ The following options are available for configuration via the `tsr.config.json`\n   - (Optional, **Defaults to `single`**) whether to use `single` or `double` quotes when formatting the generated route tree file.\n - **`semicolons`**\n   - (Optional, **Defaults to `false`**) whether to use semicolons in the generated route tree file.\n+- **`formatter`**",
        "comment_created_at": "2025-02-09T03:05:52+00:00",
        "comment_author": "benjamesfleming",
        "comment_body": "The goal of `formatter='none'` is to allow the user to opt-out of the stylistic changes currently made to route files by TanStack Router, without introducing any breaking changes.\r\n\r\n> it'd make more sense (in my point of view) to make those changes via AST transformations \r\n\r\nMaybe I'm missing something, but wouldn't this just add extra dependencies/complexity, and require extra parsing options (e.g. babel config) to be configurable in the tsr config? How is this better than a simple string replacement?\r\n\r\n---\r\n\r\nMy question is - What's the simplest way to prevent TanStack Router formatting route files? I think a `formatter='none'` option is the answer to that question.\r\n\r\nIs there a pathway to getting this PR merged?",
        "pr_file_module": null
      },
      {
        "comment_id": "1947997196",
        "repo_full_name": "TanStack/router",
        "pr_number": 3366,
        "pr_file": "docs/router/framework/react/guide/file-based-routing.md",
        "discussion_id": "1947554165",
        "commented_code": "@@ -416,6 +416,9 @@ The following options are available for configuration via the `tsr.config.json`\n   - (Optional, **Defaults to `single`**) whether to use `single` or `double` quotes when formatting the generated route tree file.\n - **`semicolons`**\n   - (Optional, **Defaults to `false`**) whether to use semicolons in the generated route tree file.\n+- **`formatter`**",
        "comment_created_at": "2025-02-09T03:19:11+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "> The goal of formatter='none' is to allow the user to opt out of the stylistic changes currently made to route files by TanStack Router, without introducing any breaking changes.\r\n\r\nIn agreement with you here \ud83d\udc4d\ud83c\udffc\r\n\r\n> Maybe I'm missing something, but wouldn't this just add extra dependencies/complexity, and require extra parsing options (e.g. babel config) to be configurable in the tsr config? \r\n\r\nDefinitely not simpler but it would be the safer method of performing these changes. We've just be taking the existing babel utils be have in `router-utils`.\r\n\r\n> How is this better than a simple string replacement?\r\n\r\nCurrently, the string replacement is using `Regex`. This is a bottleneck of sorts since it inherently expects a certain level of formatting. Like the `createFileRoute('/posts/')` being on one line and not broken up like this due to a formatting change.\r\n\r\n```js\r\n// We could have parsing issues with this.\r\nexport const Route = createFileRoute(\r\n\t'/posts' // \ud83e\udde0 imagine a longer route ID here\r\n)\r\n```\r\n\r\n---\r\n\r\n@benjamesfleming Overall, I'm in agreement and support the goal of this PR \ud83d\udcaa\ud83c\udffc.\r\n\r\nI just want to make sure we correctly approaching the fix for it. \r\ncc @schiller-manuel ",
        "pr_file_module": null
      },
      {
        "comment_id": "1948247255",
        "repo_full_name": "TanStack/router",
        "pr_number": 3366,
        "pr_file": "docs/router/framework/react/guide/file-based-routing.md",
        "discussion_id": "1947554165",
        "commented_code": "@@ -416,6 +416,9 @@ The following options are available for configuration via the `tsr.config.json`\n   - (Optional, **Defaults to `single`**) whether to use `single` or `double` quotes when formatting the generated route tree file.\n - **`semicolons`**\n   - (Optional, **Defaults to `false`**) whether to use semicolons in the generated route tree file.\n+- **`formatter`**",
        "comment_created_at": "2025-02-09T21:47:55+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "@benjamesfleming speaking with @schiller-manuel, we've decided to go ahead with this PR, with one minor exception. The removal of the `formatter` option entirety.\r\n\r\nThe behavior would be as follows:\r\n\r\n- When the generator is saving the route file during an \"update\" event, then the formatter shouldn't be used.\r\n- However, on first write of the route file and any operations on the routeTree file, the formatter should still be in control.\r\n\r\nThis would make this the new behavior for all and would be classified as fix.",
        "pr_file_module": null
      },
      {
        "comment_id": "1948497156",
        "repo_full_name": "TanStack/router",
        "pr_number": 3366,
        "pr_file": "docs/router/framework/react/guide/file-based-routing.md",
        "discussion_id": "1947554165",
        "commented_code": "@@ -416,6 +416,9 @@ The following options are available for configuration via the `tsr.config.json`\n   - (Optional, **Defaults to `single`**) whether to use `single` or `double` quotes when formatting the generated route tree file.\n - **`semicolons`**\n   - (Optional, **Defaults to `false`**) whether to use semicolons in the generated route tree file.\n+- **`formatter`**",
        "comment_created_at": "2025-02-10T07:10:06+00:00",
        "comment_author": "benjamesfleming",
        "comment_body": "This makes sense \ud83d\udc4d \r\n\r\nI've updated the PR to match the described behaviour.",
        "pr_file_module": null
      }
    ]
  }
]