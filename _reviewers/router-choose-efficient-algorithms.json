[
  {
    "discussion_id": "2068113937",
    "pr_number": 4048,
    "pr_file": "packages/router-devtools-core/src/BaseTanStackRouterDevtoolsPanel.tsx",
    "created_at": "2025-04-30T08:02:32+00:00",
    "commented_code": "}\n   })\n \n+  const navigationTarget = createMemo<string | undefined>(() => {\n+    if (isRoot) return undefined // rootRouteId has no path\n+    if (!route.path) return undefined // no path to navigate to\n+\n+    // flatten all params in the router state, into a single object\n+    const allParams = matches()\n+      .flatMap((m) => m.params)\n+      .reduce((prev, curr) => {\n+        const keys = Object.keys(curr)\n+        for (const key of keys) {\n+          if (prev[key] === undefined) {\n+            prev[key] = curr[key]\n+          }\n+        }\n+        return prev\n+      }, {})",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2068113937",
        "repo_full_name": "TanStack/router",
        "pr_number": 4048,
        "pr_file": "packages/router-devtools-core/src/BaseTanStackRouterDevtoolsPanel.tsx",
        "discussion_id": "2068113937",
        "commented_code": "@@ -126,6 +149,45 @@ function RouteComp({\n     }\n   })\n \n+  const navigationTarget = createMemo<string | undefined>(() => {\n+    if (isRoot) return undefined // rootRouteId has no path\n+    if (!route.path) return undefined // no path to navigate to\n+\n+    // flatten all params in the router state, into a single object\n+    const allParams = matches()\n+      .flatMap((m) => m.params)\n+      .reduce((prev, curr) => {\n+        const keys = Object.keys(curr)\n+        for (const key of keys) {\n+          if (prev[key] === undefined) {\n+            prev[key] = curr[key]\n+          }\n+        }\n+        return prev\n+      }, {})",
        "comment_created_at": "2025-04-30T08:02:32+00:00",
        "comment_author": "scarf005",
        "comment_body": "```suggestion\r\n    const allParams = Object.assign(\r\n      {},\r\n      ...matches()\r\n        .reverse()\r\n        .flatMap((m) => m.params),\r\n    )\r\n```\r\n\r\n@SeanCassiere what do you think of this apporach?",
        "pr_file_module": null
      },
      {
        "comment_id": "2068199860",
        "repo_full_name": "TanStack/router",
        "pr_number": 4048,
        "pr_file": "packages/router-devtools-core/src/BaseTanStackRouterDevtoolsPanel.tsx",
        "discussion_id": "2068113937",
        "commented_code": "@@ -126,6 +149,45 @@ function RouteComp({\n     }\n   })\n \n+  const navigationTarget = createMemo<string | undefined>(() => {\n+    if (isRoot) return undefined // rootRouteId has no path\n+    if (!route.path) return undefined // no path to navigate to\n+\n+    // flatten all params in the router state, into a single object\n+    const allParams = matches()\n+      .flatMap((m) => m.params)\n+      .reduce((prev, curr) => {\n+        const keys = Object.keys(curr)\n+        for (const key of keys) {\n+          if (prev[key] === undefined) {\n+            prev[key] = curr[key]\n+          }\n+        }\n+        return prev\n+      }, {})",
        "comment_created_at": "2025-04-30T08:53:57+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Had to make a few modifications, but the essential gist of your suggestion has been applied.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1913786684",
    "pr_number": 2698,
    "pr_file": "packages/start/src/client/Meta.tsx",
    "created_at": "2025-01-13T20:46:37+00:00",
    "commented_code": "// children={`\n           // __TSR__ = {\n           //   matches: [],\n-          //   streamedValues: {},\n+          //   streamedValues: new Proxy(",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1913786684",
        "repo_full_name": "TanStack/router",
        "pr_number": 2698,
        "pr_file": "packages/start/src/client/Meta.tsx",
        "discussion_id": "1913786684",
        "commented_code": "@@ -126,7 +126,17 @@ export const useMetaElements = () => {\n           // children={`\n           // __TSR__ = {\n           //   matches: [],\n-          //   streamedValues: {},\n+          //   streamedValues: new Proxy(",
        "comment_created_at": "2025-01-13T20:46:37+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "is there as solution that does not need a proxy?",
        "pr_file_module": null
      },
      {
        "comment_id": "1913801684",
        "repo_full_name": "TanStack/router",
        "pr_number": 2698,
        "pr_file": "packages/start/src/client/Meta.tsx",
        "discussion_id": "1913786684",
        "commented_code": "@@ -126,7 +126,17 @@ export const useMetaElements = () => {\n           // children={`\n           // __TSR__ = {\n           //   matches: [],\n-          //   streamedValues: {},\n+          //   streamedValues: new Proxy(",
        "comment_created_at": "2025-01-13T21:01:58+00:00",
        "comment_author": "phryneas",
        "comment_body": "Not while keeping this a \"plain object\", as afaik there is no other way of detecting a property is added. \r\n\r\nIf the injected script tag would so something like `__TSR__.streamedValues.push([name, value])` on an array, or `__TSR__.streamedValues.set(name, value)` on a Map, those `.push` or `.set` properties could be overwritten to also call `__TSR__ROUTER__.emit` - but for a plain object property assignment the only way to do this is a Proxy.\r\n\r\nFor an \"array-type\" implementation, see https://github.com/apollographql/apollo-client-nextjs/blob/main/packages/client-react-streaming/src/ManualDataTransport/lateInitializingQueue.ts as an example - it is just created as an array and later `registerLateInitializingQueue` is called, consuming backpressure once and passing newly incoming data directly into the callback function.\r\nOf course that's a very different approach and I didn't want to change too much, so I went with this for now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1496315342",
    "pr_number": 1202,
    "pr_file": "packages/react-router/src/useNavigate.tsx",
    "created_at": "2024-02-20T18:30:24+00:00",
    "commented_code": "import { AnyRoute } from './route'\n import { RoutePaths } from './routeInfo'\n import { RegisteredRouter } from './router'\n-import { StringLiteral } from './utils'\n \n-export function useNavigate<\n+export type UseNavigateResult<TDefaultFrom extends string> = <\n   TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n-  TDefaultFrom extends RoutePaths<TRouteTree> | string = RoutePaths<TRouteTree>,\n->(_defaultOpts?: { from?: StringLiteral<TDefaultFrom> }) {\n+  TFrom extends RoutePaths<TRouteTree> | string = TDefaultFrom,\n+  TTo extends string = '',\n+  TMaskFrom extends RoutePaths<TRouteTree> | string = TFrom,\n+  TMaskTo extends string = '',\n+>({\n+  from,\n+  ...rest\n+}: NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>) => Promise<void>\n+\n+export function useNavigate<\n+  TDefaultFrom extends string = string,\n+>(_defaultOpts?: {\n+  from?:\n+    | TDefaultFrom",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1496315342",
        "repo_full_name": "TanStack/router",
        "pr_number": 1202,
        "pr_file": "packages/react-router/src/useNavigate.tsx",
        "discussion_id": "1496315342",
        "commented_code": "@@ -5,36 +5,41 @@ import { LinkOptions, NavigateOptions } from './link'\n import { AnyRoute } from './route'\n import { RoutePaths } from './routeInfo'\n import { RegisteredRouter } from './router'\n-import { StringLiteral } from './utils'\n \n-export function useNavigate<\n+export type UseNavigateResult<TDefaultFrom extends string> = <\n   TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n-  TDefaultFrom extends RoutePaths<TRouteTree> | string = RoutePaths<TRouteTree>,\n->(_defaultOpts?: { from?: StringLiteral<TDefaultFrom> }) {\n+  TFrom extends RoutePaths<TRouteTree> | string = TDefaultFrom,\n+  TTo extends string = '',\n+  TMaskFrom extends RoutePaths<TRouteTree> | string = TFrom,\n+  TMaskTo extends string = '',\n+>({\n+  from,\n+  ...rest\n+}: NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>) => Promise<void>\n+\n+export function useNavigate<\n+  TDefaultFrom extends string = string,\n+>(_defaultOpts?: {\n+  from?:\n+    | TDefaultFrom",
        "comment_created_at": "2024-02-20T18:30:24+00:00",
        "comment_author": "chorobin",
        "comment_body": "This still provides auto complete without defaulting TFrom to a huge union",
        "pr_file_module": null
      },
      {
        "comment_id": "1501229872",
        "repo_full_name": "TanStack/router",
        "pr_number": 1202,
        "pr_file": "packages/react-router/src/useNavigate.tsx",
        "discussion_id": "1496315342",
        "commented_code": "@@ -5,36 +5,41 @@ import { LinkOptions, NavigateOptions } from './link'\n import { AnyRoute } from './route'\n import { RoutePaths } from './routeInfo'\n import { RegisteredRouter } from './router'\n-import { StringLiteral } from './utils'\n \n-export function useNavigate<\n+export type UseNavigateResult<TDefaultFrom extends string> = <\n   TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n-  TDefaultFrom extends RoutePaths<TRouteTree> | string = RoutePaths<TRouteTree>,\n->(_defaultOpts?: { from?: StringLiteral<TDefaultFrom> }) {\n+  TFrom extends RoutePaths<TRouteTree> | string = TDefaultFrom,\n+  TTo extends string = '',\n+  TMaskFrom extends RoutePaths<TRouteTree> | string = TFrom,\n+  TMaskTo extends string = '',\n+>({\n+  from,\n+  ...rest\n+}: NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>) => Promise<void>\n+\n+export function useNavigate<\n+  TDefaultFrom extends string = string,\n+>(_defaultOpts?: {\n+  from?:\n+    | TDefaultFrom",
        "comment_created_at": "2024-02-23T22:19:09+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "what exactly is the relevant change here?\r\nwould `TDefaultFrom extends RoutePaths<TRouteTree> | string = string,` result in the same improvement?\r\n\r\njust trying to understand this better",
        "pr_file_module": null
      },
      {
        "comment_id": "1501347239",
        "repo_full_name": "TanStack/router",
        "pr_number": 1202,
        "pr_file": "packages/react-router/src/useNavigate.tsx",
        "discussion_id": "1496315342",
        "commented_code": "@@ -5,36 +5,41 @@ import { LinkOptions, NavigateOptions } from './link'\n import { AnyRoute } from './route'\n import { RoutePaths } from './routeInfo'\n import { RegisteredRouter } from './router'\n-import { StringLiteral } from './utils'\n \n-export function useNavigate<\n+export type UseNavigateResult<TDefaultFrom extends string> = <\n   TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n-  TDefaultFrom extends RoutePaths<TRouteTree> | string = RoutePaths<TRouteTree>,\n->(_defaultOpts?: { from?: StringLiteral<TDefaultFrom> }) {\n+  TFrom extends RoutePaths<TRouteTree> | string = TDefaultFrom,\n+  TTo extends string = '',\n+  TMaskFrom extends RoutePaths<TRouteTree> | string = TFrom,\n+  TMaskTo extends string = '',\n+>({\n+  from,\n+  ...rest\n+}: NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>) => Promise<void>\n+\n+export function useNavigate<\n+  TDefaultFrom extends string = string,\n+>(_defaultOpts?: {\n+  from?:\n+    | TDefaultFrom",
        "comment_created_at": "2024-02-24T05:21:10+00:00",
        "comment_author": "chorobin",
        "comment_body": "I tried this but it breaks autocomplete. I noticed you get autocomplete with:\r\n\r\n`TDefaultFrom extends RoutePaths<TRouteTree> | string = RoutePaths<TRouteTree>`. Which might be why it was defaulting to the union in the first place.\r\n\r\n`TDefaultFrom | RoutePaths<RouteTree> | (string & {})` provides loose autocomplete. But hopefully this gets fixed with just `TDefaultFrom | RoutePaths<RouteTree> | string` soon \r\n\r\nhttps://www.totaltypescript.com/typescript-5-3#automatic-loose-autocomplete-on-strings\r\n\r\nThis method keeps the TDefaultFrom looser but still provides autocomplete which I think is what you want here because the constraint was `RoutePaths<TRouteTree> | string` which is already very loose due to the `| string`\r\n\r\nThe point is to remove the default to a large union but to keep autocomplete. I think defaulting this to a large union could easily sneak in performance issues as you just need to do one `extends` and you're dealing with it being distributed and it could be hard to track this down.\r\n\r\n\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1501360898",
        "repo_full_name": "TanStack/router",
        "pr_number": 1202,
        "pr_file": "packages/react-router/src/useNavigate.tsx",
        "discussion_id": "1496315342",
        "commented_code": "@@ -5,36 +5,41 @@ import { LinkOptions, NavigateOptions } from './link'\n import { AnyRoute } from './route'\n import { RoutePaths } from './routeInfo'\n import { RegisteredRouter } from './router'\n-import { StringLiteral } from './utils'\n \n-export function useNavigate<\n+export type UseNavigateResult<TDefaultFrom extends string> = <\n   TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n-  TDefaultFrom extends RoutePaths<TRouteTree> | string = RoutePaths<TRouteTree>,\n->(_defaultOpts?: { from?: StringLiteral<TDefaultFrom> }) {\n+  TFrom extends RoutePaths<TRouteTree> | string = TDefaultFrom,\n+  TTo extends string = '',\n+  TMaskFrom extends RoutePaths<TRouteTree> | string = TFrom,\n+  TMaskTo extends string = '',\n+>({\n+  from,\n+  ...rest\n+}: NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>) => Promise<void>\n+\n+export function useNavigate<\n+  TDefaultFrom extends string = string,\n+>(_defaultOpts?: {\n+  from?:\n+    | TDefaultFrom",
        "comment_created_at": "2024-02-24T07:09:46+00:00",
        "comment_author": "chorobin",
        "comment_body": "I will also explain a separate issue which is connected to this but it was why `useNavigate` seemed so slow. `useNavigate` captured `TRouteTree` as a type parameter and this was used in `navigate` which is a function you return. It looks like Typescript was checking `TRouteTree` again when `navigate` was called. If I let `navigate` capture `TRouteTree` instead, the extra checking didn't happen. With a large tree this checking was taking seconds for me. I'm not sure why but this might be to do with generic constraints on `TRouteTree` and variance. But `TRouteTree` will never change so this checking was only slowing things down. Especially if the `TRouteTree` is large.\r\n\r\nAnyway, this change helps because `TDefaultFrom` is only constrained to `string` and is therefore cheap even if it has to check it",
        "pr_file_module": null
      }
    ]
  }
]