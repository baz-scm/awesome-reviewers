[
  {
    "discussion_id": "1788770975",
    "pr_number": 2480,
    "pr_file": "packages/react-router/tests/link.test.tsx",
    "created_at": "2024-10-06T00:20:06+00:00",
    "commented_code": "expect(errorText).toBeInTheDocument()\n   })\n \n+  test('when navigating to the root with an error in component', async () => {\n+    const notFoundComponent = vi.fn()\n+\n+    const rootRoute = createRootRoute({\n+      errorComponent: () => <span>Oops! Something went wrong!</span>,",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1788770975",
        "repo_full_name": "TanStack/router",
        "pr_number": 2480,
        "pr_file": "packages/react-router/tests/link.test.tsx",
        "discussion_id": "1788770975",
        "commented_code": "@@ -1095,6 +1095,33 @@ describe('Link', () => {\n     expect(errorText).toBeInTheDocument()\n   })\n \n+  test('when navigating to the root with an error in component', async () => {\n+    const notFoundComponent = vi.fn()\n+\n+    const rootRoute = createRootRoute({\n+      errorComponent: () => <span>Oops! Something went wrong!</span>,",
        "comment_created_at": "2024-10-06T00:20:06+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Please use different error messages both in the `errorComponent` and the `component` so that anyone reading the test knows exactly what the expected outcome is.\r\n\r\nSomething like:\r\n- `errorComponent` - \"Rendering errorComp message\"\r\n- `component` - \"Throwing from route component\"\r\n\r\nFeel free to change the exact verbiage as you please. Just please make them very distinctly unique.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1532292430",
    "pr_number": 1345,
    "pr_file": "packages/react-router/src/useParams.tsx",
    "created_at": "2024-03-20T15:24:46+00:00",
    "commented_code": "select?: (params: TParams) => TSelected\n   },\n ): TSelected {\n-  return useRouterState({\n-    select: (state: any) => {\n-      const params = (last(getRenderedMatches(state)) as any)?.params\n-      return opts?.select ? opts.select(params) : params\n+  return useMatch({\n+    ...opts,\n+    select: (match) => {\n+      return opts?.select ? opts.select(match.params) : match.params\n     },",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1532292430",
        "repo_full_name": "TanStack/router",
        "pr_number": 1345,
        "pr_file": "packages/react-router/src/useParams.tsx",
        "discussion_id": "1532292430",
        "commented_code": "@@ -19,10 +18,10 @@ export function useParams<\n     select?: (params: TParams) => TSelected\n   },\n ): TSelected {\n-  return useRouterState({\n-    select: (state: any) => {\n-      const params = (last(getRenderedMatches(state)) as any)?.params\n-      return opts?.select ? opts.select(params) : params\n+  return useMatch({\n+    ...opts,\n+    select: (match) => {\n+      return opts?.select ? opts.select(match.params) : match.params\n     },",
        "comment_created_at": "2024-03-20T15:24:46+00:00",
        "comment_author": "TkDodo",
        "comment_body": "I am not too confident in this refactoring. Is there a way to try out preview builds? In query, we have them set up with codesandbox.\r\n\r\nIt's curious that `opts` wasn't used at all before (apart from `select`), so `StrictOrFrom` didn't really do anything at runtime?\r\n\r\nI mainly made this refactoring so that `useParams()` will also fail with the good error messages we get from `useMatch`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1532628276",
        "repo_full_name": "TanStack/router",
        "pr_number": 1345,
        "pr_file": "packages/react-router/src/useParams.tsx",
        "discussion_id": "1532292430",
        "commented_code": "@@ -19,10 +18,10 @@ export function useParams<\n     select?: (params: TParams) => TSelected\n   },\n ): TSelected {\n-  return useRouterState({\n-    select: (state: any) => {\n-      const params = (last(getRenderedMatches(state)) as any)?.params\n-      return opts?.select ? opts.select(params) : params\n+  return useMatch({\n+    ...opts,\n+    select: (match) => {\n+      return opts?.select ? opts.select(match.params) : match.params\n     },",
        "comment_created_at": "2024-03-20T18:48:50+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "we don't have preview builds yet. however, you can run\r\n\r\n```shell\r\npnpm run dev\r\n```\r\n\r\nin the root router folder, and the same command in one of the example folders to test your changes locally",
        "pr_file_module": null
      },
      {
        "comment_id": "1532630038",
        "repo_full_name": "TanStack/router",
        "pr_number": 1345,
        "pr_file": "packages/react-router/src/useParams.tsx",
        "discussion_id": "1532292430",
        "commented_code": "@@ -19,10 +18,10 @@ export function useParams<\n     select?: (params: TParams) => TSelected\n   },\n ): TSelected {\n-  return useRouterState({\n-    select: (state: any) => {\n-      const params = (last(getRenderedMatches(state)) as any)?.params\n-      return opts?.select ? opts.select(params) : params\n+  return useMatch({\n+    ...opts,\n+    select: (match) => {\n+      return opts?.select ? opts.select(match.params) : match.params\n     },",
        "comment_created_at": "2024-03-20T18:50:22+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "> It's curious that `opts` wasn't used at all before (apart from `select`), so `StrictOrFrom` didn't really do anything at runtime?\r\n\r\nyeah looks strange, probably not meant that way. good catch.",
        "pr_file_module": null
      },
      {
        "comment_id": "1533414595",
        "repo_full_name": "TanStack/router",
        "pr_number": 1345,
        "pr_file": "packages/react-router/src/useParams.tsx",
        "discussion_id": "1532292430",
        "commented_code": "@@ -19,10 +18,10 @@ export function useParams<\n     select?: (params: TParams) => TSelected\n   },\n ): TSelected {\n-  return useRouterState({\n-    select: (state: any) => {\n-      const params = (last(getRenderedMatches(state)) as any)?.params\n-      return opts?.select ? opts.select(params) : params\n+  return useMatch({\n+    ...opts,\n+    select: (match) => {\n+      return opts?.select ? opts.select(match.params) : match.params\n     },",
        "comment_created_at": "2024-03-21T08:21:27+00:00",
        "comment_author": "TkDodo",
        "comment_body": "I've confirmed that it works locally. One thing I'm not fully happy with is the error message itself - since `useParams` and `useSearch` are built on top of `useMatch`, the error is now:\r\n\r\n```\r\nInvariant failed: No match found while rendering useMatch() in a component that is meant to render the '/about' route. Did you mean to 'useMatch({ strict: false })' instead?\r\n```\r\n\r\nHowever, we haven't called `useMatch()` ourselves, so the suggestion is not quite right. Do you think I should improve that and if so, how ?",
        "pr_file_module": null
      },
      {
        "comment_id": "1533428289",
        "repo_full_name": "TanStack/router",
        "pr_number": 1345,
        "pr_file": "packages/react-router/src/useParams.tsx",
        "discussion_id": "1532292430",
        "commented_code": "@@ -19,10 +18,10 @@ export function useParams<\n     select?: (params: TParams) => TSelected\n   },\n ): TSelected {\n-  return useRouterState({\n-    select: (state: any) => {\n-      const params = (last(getRenderedMatches(state)) as any)?.params\n-      return opts?.select ? opts.select(params) : params\n+  return useMatch({\n+    ...opts,\n+    select: (match) => {\n+      return opts?.select ? opts.select(match.params) : match.params\n     },",
        "comment_created_at": "2024-03-21T08:32:51+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "how about logging a stack trace? then it should be clear what's going on",
        "pr_file_module": null
      },
      {
        "comment_id": "1533457930",
        "repo_full_name": "TanStack/router",
        "pr_number": 1345,
        "pr_file": "packages/react-router/src/useParams.tsx",
        "discussion_id": "1532292430",
        "commented_code": "@@ -19,10 +18,10 @@ export function useParams<\n     select?: (params: TParams) => TSelected\n   },\n ): TSelected {\n-  return useRouterState({\n-    select: (state: any) => {\n-      const params = (last(getRenderedMatches(state)) as any)?.params\n-      return opts?.select ? opts.select(params) : params\n+  return useMatch({\n+    ...opts,\n+    select: (match) => {\n+      return opts?.select ? opts.select(match.params) : match.params\n     },",
        "comment_created_at": "2024-03-21T08:56:32+00:00",
        "comment_author": "TkDodo",
        "comment_body": "I think I found a better error message:\r\n\r\n```\r\nInvariant failed: No match found for route '/' while rendering the '/about' route. Did you mean to pass '{ strict: false }' instead?\r\n```\r\n\r\nthis will work for `useParams`, `useSearch` and `useMatch`.\r\n\r\n70f333f1",
        "pr_file_module": null
      }
    ]
  }
]