[
  {
    "discussion_id": "2070866131",
    "pr_number": 4075,
    "pr_file": "docs/router/framework/react/routing/routing-concepts.md",
    "created_at": "2025-05-01T22:04:18+00:00",
    "commented_code": "- The `posts.$postId.tsx` route is nested as normal under the `posts.tsx` route and will render `<Posts><Post>`.\n - The `posts_.$postId.edit.tsx` route **does not share** the same `posts` prefix as the other routes and therefore will be treated as if it is a top-level route and will render `<PostEditor>`.\n \n+## Excluding Files and Folders from Routes\n+\n+Files and folders can be excluded from route generation with a `-` prefix attached to the file name. This gives you the ability to colocate logic in the route directories.\n+\n+Consider the following route tree:\n+\n+```\n+routes/\n+\u251c\u2500\u2500 posts.tsx\n+\u251c\u2500\u2500 -posts-table.tsx",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2070866131",
        "repo_full_name": "TanStack/router",
        "pr_number": 4075,
        "pr_file": "docs/router/framework/react/routing/routing-concepts.md",
        "discussion_id": "2070866131",
        "commented_code": "@@ -318,6 +318,50 @@ The following table shows which component will be rendered based on the URL:\n - The `posts.$postId.tsx` route is nested as normal under the `posts.tsx` route and will render `<Posts><Post>`.\n - The `posts_.$postId.edit.tsx` route **does not share** the same `posts` prefix as the other routes and therefore will be treated as if it is a top-level route and will render `<PostEditor>`.\n \n+## Excluding Files and Folders from Routes\n+\n+Files and folders can be excluded from route generation with a `-` prefix attached to the file name. This gives you the ability to colocate logic in the route directories.\n+\n+Consider the following route tree:\n+\n+```\n+routes/\n+\u251c\u2500\u2500 posts.tsx\n+\u251c\u2500\u2500 -posts-table.tsx",
        "comment_created_at": "2025-05-01T22:04:18+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "```suggestion\r\n\u251c\u2500\u2500 -posts-table.tsx // \ud83d\udc48\ud83c\udffc ignored\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2070866423",
    "pr_number": 4075,
    "pr_file": "docs/router/framework/react/routing/routing-concepts.md",
    "created_at": "2025-05-01T22:04:25+00:00",
    "commented_code": "- The `posts.$postId.tsx` route is nested as normal under the `posts.tsx` route and will render `<Posts><Post>`.\n - The `posts_.$postId.edit.tsx` route **does not share** the same `posts` prefix as the other routes and therefore will be treated as if it is a top-level route and will render `<PostEditor>`.\n \n+## Excluding Files and Folders from Routes\n+\n+Files and folders can be excluded from route generation with a `-` prefix attached to the file name. This gives you the ability to colocate logic in the route directories.\n+\n+Consider the following route tree:\n+\n+```\n+routes/\n+\u251c\u2500\u2500 posts.tsx\n+\u251c\u2500\u2500 -posts-table.tsx\n+\u251c\u2500\u2500 -components.tsx\n+\u2502   \u251c\u2500\u2500 header.tsx",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2070866423",
        "repo_full_name": "TanStack/router",
        "pr_number": 4075,
        "pr_file": "docs/router/framework/react/routing/routing-concepts.md",
        "discussion_id": "2070866423",
        "commented_code": "@@ -318,6 +318,50 @@ The following table shows which component will be rendered based on the URL:\n - The `posts.$postId.tsx` route is nested as normal under the `posts.tsx` route and will render `<Posts><Post>`.\n - The `posts_.$postId.edit.tsx` route **does not share** the same `posts` prefix as the other routes and therefore will be treated as if it is a top-level route and will render `<PostEditor>`.\n \n+## Excluding Files and Folders from Routes\n+\n+Files and folders can be excluded from route generation with a `-` prefix attached to the file name. This gives you the ability to colocate logic in the route directories.\n+\n+Consider the following route tree:\n+\n+```\n+routes/\n+\u251c\u2500\u2500 posts.tsx\n+\u251c\u2500\u2500 -posts-table.tsx\n+\u251c\u2500\u2500 -components.tsx\n+\u2502   \u251c\u2500\u2500 header.tsx",
        "comment_created_at": "2025-05-01T22:04:25+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "```suggestion\r\n\u2502   \u251c\u2500\u2500 header.tsx // \ud83d\udc48\ud83c\udffc ignored\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2070866582",
    "pr_number": 4075,
    "pr_file": "docs/router/framework/react/routing/routing-concepts.md",
    "created_at": "2025-05-01T22:04:34+00:00",
    "commented_code": "- The `posts.$postId.tsx` route is nested as normal under the `posts.tsx` route and will render `<Posts><Post>`.\n - The `posts_.$postId.edit.tsx` route **does not share** the same `posts` prefix as the other routes and therefore will be treated as if it is a top-level route and will render `<PostEditor>`.\n \n+## Excluding Files and Folders from Routes\n+\n+Files and folders can be excluded from route generation with a `-` prefix attached to the file name. This gives you the ability to colocate logic in the route directories.\n+\n+Consider the following route tree:\n+\n+```\n+routes/\n+\u251c\u2500\u2500 posts.tsx\n+\u251c\u2500\u2500 -posts-table.tsx\n+\u251c\u2500\u2500 -components.tsx\n+\u2502   \u251c\u2500\u2500 header.tsx\n+\u2502   \u251c\u2500\u2500 footer.tsx",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2070866582",
        "repo_full_name": "TanStack/router",
        "pr_number": 4075,
        "pr_file": "docs/router/framework/react/routing/routing-concepts.md",
        "discussion_id": "2070866582",
        "commented_code": "@@ -318,6 +318,50 @@ The following table shows which component will be rendered based on the URL:\n - The `posts.$postId.tsx` route is nested as normal under the `posts.tsx` route and will render `<Posts><Post>`.\n - The `posts_.$postId.edit.tsx` route **does not share** the same `posts` prefix as the other routes and therefore will be treated as if it is a top-level route and will render `<PostEditor>`.\n \n+## Excluding Files and Folders from Routes\n+\n+Files and folders can be excluded from route generation with a `-` prefix attached to the file name. This gives you the ability to colocate logic in the route directories.\n+\n+Consider the following route tree:\n+\n+```\n+routes/\n+\u251c\u2500\u2500 posts.tsx\n+\u251c\u2500\u2500 -posts-table.tsx\n+\u251c\u2500\u2500 -components.tsx\n+\u2502   \u251c\u2500\u2500 header.tsx\n+\u2502   \u251c\u2500\u2500 footer.tsx",
        "comment_created_at": "2025-05-01T22:04:34+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "```suggestion\r\n\u2502   \u251c\u2500\u2500 footer.tsx // \ud83d\udc48\ud83c\udffc ignored\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1913848085",
    "pr_number": 3151,
    "pr_file": "docs/framework/react/installation.md",
    "created_at": "2025-01-13T21:48:02+00:00",
    "commented_code": "- React v18.x.x\n - ReactDOM v18.x.x\n+  - Note that `ReactDOM.createRoot` is also required and the legacy `render` function is not supported.",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1913848085",
        "repo_full_name": "TanStack/router",
        "pr_number": 3151,
        "pr_file": "docs/framework/react/installation.md",
        "discussion_id": "1913848085",
        "commented_code": "@@ -22,6 +22,7 @@ TanStack Router is currently only compatible with React and ReactDOM. If you wou\n \n - React v18.x.x\n - ReactDOM v18.x.x\n+  - Note that `ReactDOM.createRoot` is also required and the legacy `render` function is not supported.",
        "comment_created_at": "2025-01-13T21:48:02+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "```suggestion\r\n  - Note that `ReactDOM.createRoot` is required.\r\n  - The legacy `.render()` function is not supported.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1857731665",
    "pr_number": 2864,
    "pr_file": "docs/framework/react/guide/data-loading.md",
    "created_at": "2024-11-26T03:52:09+00:00",
    "commented_code": "Using these parameters, we can do a lot of cool things, but first, let's take a look at how we can control it and when the `loader` function is called.\n \n+## Consuming data from `loader`s\n+\n+To consume data from a `loader`, use the `useLoaderData` hook defined on your Route object.\n+\n+```tsx\n+const posts = Route.useLoaderData()\n+```\n+\n+If you don't have ready access to your route object (ie you're deep in the component tree for the current route), you can use `getRouteApi` to access the same hook (as well as the other hooks on the Route object). This should be preferred over importing the Route object, which is likely to create circular dependencies.",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1857731665",
        "repo_full_name": "TanStack/router",
        "pr_number": 2864,
        "pr_file": "docs/framework/react/guide/data-loading.md",
        "discussion_id": "1857731665",
        "commented_code": "@@ -84,6 +84,25 @@ The `loader` function receives a single object with the following properties:\n \n Using these parameters, we can do a lot of cool things, but first, let's take a look at how we can control it and when the `loader` function is called.\n \n+## Consuming data from `loader`s\n+\n+To consume data from a `loader`, use the `useLoaderData` hook defined on your Route object.\n+\n+```tsx\n+const posts = Route.useLoaderData()\n+```\n+\n+If you don't have ready access to your route object (ie you're deep in the component tree for the current route), you can use `getRouteApi` to access the same hook (as well as the other hooks on the Route object). This should be preferred over importing the Route object, which is likely to create circular dependencies.",
        "comment_created_at": "2024-11-26T03:52:09+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "```suggestion\r\nIf you don't have ready access to your route object (i.e. you're deep in the component tree for the current route), you can use `getRouteApi` to access the same hook (as well as the other hooks on the Route object). This should be preferred over importing the Route object, which is likely to create circular dependencies.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1770647548",
    "pr_number": 2347,
    "pr_file": "docs/framework/react/guide/custom-link.md",
    "created_at": "2024-09-22T22:23:41+00:00",
    "commented_code": "+---\n+title: Custom Link\n+---\n+\n+While repeating yourself can be fine in many cases, you may find yourself repeating yourself too much. Sometimes you may want to make cross cutting components with extra behavior or styles. Or sometimes you may also use third party libraries and combine it with TanStack Router's type safety\n+\n+# `createLink` for cross cutting concerns\n+\n+`createLink` creates a custom `Link` component with the same type parameters as `Link`. This means you can create your own component which provides the same type safety and typescript performance as `Link`.\n+\n+If you want to create a component which wraps `Link` with some additional styles or behavior then you can do so with the following\n+\n+```tsx\n+import { Link, createLink } from '@tanstack/react-router'\n+\n+export const NavigationLink = createLink(\n+  React.forwardRef((props: {}, ref: React.Ref<HTMLAnchorElement>) => {\n+    return (\n+      <Link\n+        {...props}\n+        ref={ref}\n+        className=\"block py-2 px-3 text-blue-700\"\n+        preload=\"intent\"\n+        activeProps={{ className: `font-bold` }}\n+      />\n+    )\n+  }),\n+)\n+```\n+\n+> React.forwardRef wil not be required in React 19 -->\n+\n+You can then use your newly created `Link` component as any other `Link`\n+\n+```tsx\n+<NavigationLink\n+  to=\"/dashboard/invoices/$invoiceId\"\n+  params={{\n+    invoiceId: 0,\n+  }}\n+/>\n+```\n+\n+# `createLink` with third party libraries\n+\n+You might want to use third party component libraries with TanStack Router. For example to use `Button` from MUI you can use `createLink` which infers the types from both `Button` and `Link` while keeping type parameters necessary for TanStack Router's type safety\n+\n+```tsx",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1770647548",
        "repo_full_name": "TanStack/router",
        "pr_number": 2347,
        "pr_file": "docs/framework/react/guide/custom-link.md",
        "discussion_id": "1770647548",
        "commented_code": "@@ -0,0 +1,67 @@\n+---\n+title: Custom Link\n+---\n+\n+While repeating yourself can be fine in many cases, you may find yourself repeating yourself too much. Sometimes you may want to make cross cutting components with extra behavior or styles. Or sometimes you may also use third party libraries and combine it with TanStack Router's type safety\n+\n+# `createLink` for cross cutting concerns\n+\n+`createLink` creates a custom `Link` component with the same type parameters as `Link`. This means you can create your own component which provides the same type safety and typescript performance as `Link`.\n+\n+If you want to create a component which wraps `Link` with some additional styles or behavior then you can do so with the following\n+\n+```tsx\n+import { Link, createLink } from '@tanstack/react-router'\n+\n+export const NavigationLink = createLink(\n+  React.forwardRef((props: {}, ref: React.Ref<HTMLAnchorElement>) => {\n+    return (\n+      <Link\n+        {...props}\n+        ref={ref}\n+        className=\"block py-2 px-3 text-blue-700\"\n+        preload=\"intent\"\n+        activeProps={{ className: `font-bold` }}\n+      />\n+    )\n+  }),\n+)\n+```\n+\n+> React.forwardRef wil not be required in React 19 -->\n+\n+You can then use your newly created `Link` component as any other `Link`\n+\n+```tsx\n+<NavigationLink\n+  to=\"/dashboard/invoices/$invoiceId\"\n+  params={{\n+    invoiceId: 0,\n+  }}\n+/>\n+```\n+\n+# `createLink` with third party libraries\n+\n+You might want to use third party component libraries with TanStack Router. For example to use `Button` from MUI you can use `createLink` which infers the types from both `Button` and `Link` while keeping type parameters necessary for TanStack Router's type safety\n+\n+```tsx",
        "comment_created_at": "2024-09-22T22:23:41+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "i would add all the imports for `createLink`, `Button` and `Link` here",
        "pr_file_module": null
      }
    ]
  }
]