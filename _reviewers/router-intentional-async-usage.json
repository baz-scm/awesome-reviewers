[
  {
    "discussion_id": "2267625837",
    "pr_number": 4925,
    "pr_file": "packages/router-core/src/router.ts",
    "created_at": "2025-08-11T18:21:15+00:00",
    "commented_code": "let loaderIsRunningAsync = false\n                   const route = this.looseRoutesById[routeId]!\n \n-                  const executeHead = async () => {\n+                  const executeHead = () => {\n                     const match = this.getMatch(matchId)\n                     // in case of a redirecting match during preload, the match does not exist\n                     if (!match) {\n                       return\n                     }\n+                    if (\n+                      !route.options.head &&\n+                      !route.options.scripts &&\n+                      !route.options.headers\n+                    ) {\n+                      return\n+                    }\n                     const assetContext = {\n                       matches,\n                       match,\n                       params: match.params,\n                       loaderData: match.loaderData,\n                     }\n-                    const headFnContent =\n-                      await route.options.head?.(assetContext)\n-                    const meta = headFnContent?.meta\n-                    const links = headFnContent?.links\n-                    const headScripts = headFnContent?.scripts\n-                    const styles = headFnContent?.styles\n-\n-                    const scripts = await route.options.scripts?.(assetContext)\n-                    const headers = await route.options.headers?.(assetContext)\n-                    return {\n-                      meta,\n-                      links,\n-                      headScripts,\n-                      headers,\n-                      scripts,\n-                      styles,\n-                    }\n+\n+                    return Promise.all([",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2267625837",
        "repo_full_name": "TanStack/router",
        "pr_number": 4925,
        "pr_file": "packages/router-core/src/router.ts",
        "discussion_id": "2267625837",
        "commented_code": "@@ -2463,35 +2463,45 @@ export class RouterCore<\n                   let loaderIsRunningAsync = false\n                   const route = this.looseRoutesById[routeId]!\n \n-                  const executeHead = async () => {\n+                  const executeHead = () => {\n                     const match = this.getMatch(matchId)\n                     // in case of a redirecting match during preload, the match does not exist\n                     if (!match) {\n                       return\n                     }\n+                    if (\n+                      !route.options.head &&\n+                      !route.options.scripts &&\n+                      !route.options.headers\n+                    ) {\n+                      return\n+                    }\n                     const assetContext = {\n                       matches,\n                       match,\n                       params: match.params,\n                       loaderData: match.loaderData,\n                     }\n-                    const headFnContent =\n-                      await route.options.head?.(assetContext)\n-                    const meta = headFnContent?.meta\n-                    const links = headFnContent?.links\n-                    const headScripts = headFnContent?.scripts\n-                    const styles = headFnContent?.styles\n-\n-                    const scripts = await route.options.scripts?.(assetContext)\n-                    const headers = await route.options.headers?.(assetContext)\n-                    return {\n-                      meta,\n-                      links,\n-                      headScripts,\n-                      headers,\n-                      scripts,\n-                      styles,\n-                    }\n+\n+                    return Promise.all([",
        "comment_created_at": "2025-08-11T18:21:15+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "why no `await Promise.all()`?\r\npersonally, i like async/await syntax more than \"then\".\r\nunless there is a technical reason?",
        "pr_file_module": null
      },
      {
        "comment_id": "2267862938",
        "repo_full_name": "TanStack/router",
        "pr_number": 4925,
        "pr_file": "packages/router-core/src/router.ts",
        "discussion_id": "2267625837",
        "commented_code": "@@ -2463,35 +2463,45 @@ export class RouterCore<\n                   let loaderIsRunningAsync = false\n                   const route = this.looseRoutesById[routeId]!\n \n-                  const executeHead = async () => {\n+                  const executeHead = () => {\n                     const match = this.getMatch(matchId)\n                     // in case of a redirecting match during preload, the match does not exist\n                     if (!match) {\n                       return\n                     }\n+                    if (\n+                      !route.options.head &&\n+                      !route.options.scripts &&\n+                      !route.options.headers\n+                    ) {\n+                      return\n+                    }\n                     const assetContext = {\n                       matches,\n                       match,\n                       params: match.params,\n                       loaderData: match.loaderData,\n                     }\n-                    const headFnContent =\n-                      await route.options.head?.(assetContext)\n-                    const meta = headFnContent?.meta\n-                    const links = headFnContent?.links\n-                    const headScripts = headFnContent?.scripts\n-                    const styles = headFnContent?.styles\n-\n-                    const scripts = await route.options.scripts?.(assetContext)\n-                    const headers = await route.options.headers?.(assetContext)\n-                    return {\n-                      meta,\n-                      links,\n-                      headScripts,\n-                      headers,\n-                      scripts,\n-                      styles,\n-                    }\n+\n+                    return Promise.all([",
        "comment_created_at": "2025-08-11T19:49:25+00:00",
        "comment_author": "Sheraff",
        "comment_body": "If we use `await` here, the function needs to be `async`, which means that it will always return a `Promise`, even if we returned early. I'd like to be able to do the `if('then' in foo)` thing where this function is called, but we can't do that if the function is `async`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1667447996",
    "pr_number": 1907,
    "pr_file": "packages/react-router/src/router.ts",
    "created_at": "2024-07-06T21:42:03+00:00",
    "commented_code": "location: next,\n           checkLatest: () => this.checkLatest(promise),\n           onReady: async () => {\n+            // eslint-disable-next-line ts/require-await",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1667447996",
        "repo_full_name": "TanStack/router",
        "pr_number": 1907,
        "pr_file": "packages/react-router/src/router.ts",
        "discussion_id": "1667447996",
        "commented_code": "@@ -1545,6 +1543,7 @@ export class Router<\n           location: next,\n           checkLatest: () => this.checkLatest(promise),\n           onReady: async () => {\n+            // eslint-disable-next-line ts/require-await",
        "comment_created_at": "2024-07-06T21:42:03+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "since we are awaiting this, shouldn't `this.startViewTransition` then return a promise?",
        "pr_file_module": null
      },
      {
        "comment_id": "1667448134",
        "repo_full_name": "TanStack/router",
        "pr_number": 1907,
        "pr_file": "packages/react-router/src/router.ts",
        "discussion_id": "1667447996",
        "commented_code": "@@ -1545,6 +1543,7 @@ export class Router<\n           location: next,\n           checkLatest: () => this.checkLatest(promise),\n           onReady: async () => {\n+            // eslint-disable-next-line ts/require-await",
        "comment_created_at": "2024-07-06T21:43:38+00:00",
        "comment_author": "tannerlinsley",
        "comment_body": "eslint complains that there is no await \ud83e\udd37 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1667448501",
        "repo_full_name": "TanStack/router",
        "pr_number": 1907,
        "pr_file": "packages/react-router/src/router.ts",
        "discussion_id": "1667447996",
        "commented_code": "@@ -1545,6 +1543,7 @@ export class Router<\n           location: next,\n           checkLatest: () => this.checkLatest(promise),\n           onReady: async () => {\n+            // eslint-disable-next-line ts/require-await",
        "comment_created_at": "2024-07-06T21:47:12+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "if I remove the `await` and this disable comment, eslint does not complain",
        "pr_file_module": null
      },
      {
        "comment_id": "1667598194",
        "repo_full_name": "TanStack/router",
        "pr_number": 1907,
        "pr_file": "packages/react-router/src/router.ts",
        "discussion_id": "1667447996",
        "commented_code": "@@ -1545,6 +1543,7 @@ export class Router<\n           location: next,\n           checkLatest: () => this.checkLatest(promise),\n           onReady: async () => {\n+            // eslint-disable-next-line ts/require-await",
        "comment_created_at": "2024-07-07T03:23:55+00:00",
        "comment_author": "tannerlinsley",
        "comment_body": "Let\u2019s do that then",
        "pr_file_module": null
      }
    ]
  }
]