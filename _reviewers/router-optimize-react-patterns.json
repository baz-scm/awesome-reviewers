[
  {
    "discussion_id": "2286405259",
    "pr_number": 4978,
    "pr_file": "packages/react-router/src/useActiveLocation.ts",
    "created_at": "2025-08-19T21:44:54+00:00",
    "commented_code": "+import { last } from '@tanstack/router-core'\n+import { useCallback, useEffect, useState } from 'react'\n+import { useRouter } from './useRouter'\n+import { useMatch } from './useMatch'\n+import type { AnyRouteMatch, ParsedLocation } from '@tanstack/router-core'\n+\n+export type UseLocationResult = {\n+  activeLocationMatch: AnyRouteMatch | undefined\n+  getFromPath: (from?: string) => string\n+}\n+\n+export const useActiveLocation = (location?: ParsedLocation) => {\n+  const { matchRoutes, state } = useRouter()\n+  const [activeLocation, setActiveLocation] = useState<ParsedLocation>(\n+    location ?? state.location,\n+  )\n+  const [customActiveLocation, _setCustomActiveLocation] =\n+    useState<ParsedLocation>(location ?? state.location)\n+  const [useCustomActiveLocation, setUseCustomActiveLocation] =",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2286405259",
        "repo_full_name": "TanStack/router",
        "pr_number": 4978,
        "pr_file": "packages/react-router/src/useActiveLocation.ts",
        "discussion_id": "2286405259",
        "commented_code": "@@ -0,0 +1,58 @@\n+import { last } from '@tanstack/router-core'\n+import { useCallback, useEffect, useState } from 'react'\n+import { useRouter } from './useRouter'\n+import { useMatch } from './useMatch'\n+import type { AnyRouteMatch, ParsedLocation } from '@tanstack/router-core'\n+\n+export type UseLocationResult = {\n+  activeLocationMatch: AnyRouteMatch | undefined\n+  getFromPath: (from?: string) => string\n+}\n+\n+export const useActiveLocation = (location?: ParsedLocation) => {\n+  const { matchRoutes, state } = useRouter()\n+  const [activeLocation, setActiveLocation] = useState<ParsedLocation>(\n+    location ?? state.location,\n+  )\n+  const [customActiveLocation, _setCustomActiveLocation] =\n+    useState<ParsedLocation>(location ?? state.location)\n+  const [useCustomActiveLocation, setUseCustomActiveLocation] =",
        "comment_created_at": "2025-08-19T21:44:54+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "This could just be a derived value yes? instead of being stored in state.",
        "pr_file_module": null
      },
      {
        "comment_id": "2286558392",
        "repo_full_name": "TanStack/router",
        "pr_number": 4978,
        "pr_file": "packages/react-router/src/useActiveLocation.ts",
        "discussion_id": "2286405259",
        "commented_code": "@@ -0,0 +1,58 @@\n+import { last } from '@tanstack/router-core'\n+import { useCallback, useEffect, useState } from 'react'\n+import { useRouter } from './useRouter'\n+import { useMatch } from './useMatch'\n+import type { AnyRouteMatch, ParsedLocation } from '@tanstack/router-core'\n+\n+export type UseLocationResult = {\n+  activeLocationMatch: AnyRouteMatch | undefined\n+  getFromPath: (from?: string) => string\n+}\n+\n+export const useActiveLocation = (location?: ParsedLocation) => {\n+  const { matchRoutes, state } = useRouter()\n+  const [activeLocation, setActiveLocation] = useState<ParsedLocation>(\n+    location ?? state.location,\n+  )\n+  const [customActiveLocation, _setCustomActiveLocation] =\n+    useState<ParsedLocation>(location ?? state.location)\n+  const [useCustomActiveLocation, setUseCustomActiveLocation] =",
        "comment_created_at": "2025-08-19T23:01:18+00:00",
        "comment_author": "nlynzaad",
        "comment_body": "yes, noticed this while looking into the code-rabbit recommendations. It is now being derived. useActiveLocation has been simplified a bit.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1947288810",
    "pr_number": 3364,
    "pr_file": "packages/react-router/src/utils.ts",
    "created_at": "2025-02-07T22:46:14+00:00",
    "commented_code": "*/\n export function useForwardedRef<T>(ref?: React.ForwardedRef<T>) {\n   const innerRef = React.useRef<T>(null)\n-\n-  React.useEffect(() => {\n-    if (!ref) return\n-    if (typeof ref === 'function') {\n-      ref(innerRef.current)\n-    } else {\n-      ref.current = innerRef.current\n-    }\n-  })\n-\n+  React.useImperativeHandle(ref, () => innerRef.current!, [])",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1947288810",
        "repo_full_name": "TanStack/router",
        "pr_number": 3364,
        "pr_file": "packages/react-router/src/utils.ts",
        "discussion_id": "1947288810",
        "commented_code": "@@ -131,15 +131,6 @@ export function useIntersectionObserver<T extends Element>(\n  */\n export function useForwardedRef<T>(ref?: React.ForwardedRef<T>) {\n   const innerRef = React.useRef<T>(null)\n-\n-  React.useEffect(() => {\n-    if (!ref) return\n-    if (typeof ref === 'function') {\n-      ref(innerRef.current)\n-    } else {\n-      ref.current = innerRef.current\n-    }\n-  })\n-\n+  React.useImperativeHandle(ref, () => innerRef.current!, [])",
        "comment_created_at": "2025-02-07T22:46:14+00:00",
        "comment_author": "Sheraff",
        "comment_body": "```suggestion\r\n  React.useImperativeHandle(ref, () => innerRef.current!)\r\n```\r\n\r\nMaybe we should leave the dep array out, if we want to be sure this reproduces the same behavior as the `useEffect` it replaces",
        "pr_file_module": null
      },
      {
        "comment_id": "1948246289",
        "repo_full_name": "TanStack/router",
        "pr_number": 3364,
        "pr_file": "packages/react-router/src/utils.ts",
        "discussion_id": "1947288810",
        "commented_code": "@@ -131,15 +131,6 @@ export function useIntersectionObserver<T extends Element>(\n  */\n export function useForwardedRef<T>(ref?: React.ForwardedRef<T>) {\n   const innerRef = React.useRef<T>(null)\n-\n-  React.useEffect(() => {\n-    if (!ref) return\n-    if (typeof ref === 'function') {\n-      ref(innerRef.current)\n-    } else {\n-      ref.current = innerRef.current\n-    }\n-  })\n-\n+  React.useImperativeHandle(ref, () => innerRef.current!, [])",
        "comment_created_at": "2025-02-09T21:41:54+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "I'm not too familiar with this hook, I guess it should be fine leaving out the deps array.",
        "pr_file_module": null
      },
      {
        "comment_id": "1948255420",
        "repo_full_name": "TanStack/router",
        "pr_number": 3364,
        "pr_file": "packages/react-router/src/utils.ts",
        "discussion_id": "1947288810",
        "commented_code": "@@ -131,15 +131,6 @@ export function useIntersectionObserver<T extends Element>(\n  */\n export function useForwardedRef<T>(ref?: React.ForwardedRef<T>) {\n   const innerRef = React.useRef<T>(null)\n-\n-  React.useEffect(() => {\n-    if (!ref) return\n-    if (typeof ref === 'function') {\n-      ref(innerRef.current)\n-    } else {\n-      ref.current = innerRef.current\n-    }\n-  })\n-\n+  React.useImperativeHandle(ref, () => innerRef.current!, [])",
        "comment_created_at": "2025-02-09T22:31:37+00:00",
        "comment_author": "Sheraff",
        "comment_body": "I tested with an empty deps array and it seemed fine: https://stackblitz.com/edit/vitejs-vite-usxaksas?file=src%2FApp.tsx&terminal=dev\r\n\r\nThe cost of removing the deps array and re-executing this on every render is probably low, but in this case (a regular DOM ref, and not an object with a closure scope that matters), using `[]` is fine because the value is static. At least that's my understanding.",
        "pr_file_module": null
      },
      {
        "comment_id": "1948256247",
        "repo_full_name": "TanStack/router",
        "pr_number": 3364,
        "pr_file": "packages/react-router/src/utils.ts",
        "discussion_id": "1947288810",
        "commented_code": "@@ -131,15 +131,6 @@ export function useIntersectionObserver<T extends Element>(\n  */\n export function useForwardedRef<T>(ref?: React.ForwardedRef<T>) {\n   const innerRef = React.useRef<T>(null)\n-\n-  React.useEffect(() => {\n-    if (!ref) return\n-    if (typeof ref === 'function') {\n-      ref(innerRef.current)\n-    } else {\n-      ref.current = innerRef.current\n-    }\n-  })\n-\n+  React.useImperativeHandle(ref, () => innerRef.current!, [])",
        "comment_created_at": "2025-02-09T22:35:30+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Are you satisfied with the PR? If so, I'm happy to merge.",
        "pr_file_module": null
      },
      {
        "comment_id": "1948256468",
        "repo_full_name": "TanStack/router",
        "pr_number": 3364,
        "pr_file": "packages/react-router/src/utils.ts",
        "discussion_id": "1947288810",
        "commented_code": "@@ -131,15 +131,6 @@ export function useIntersectionObserver<T extends Element>(\n  */\n export function useForwardedRef<T>(ref?: React.ForwardedRef<T>) {\n   const innerRef = React.useRef<T>(null)\n-\n-  React.useEffect(() => {\n-    if (!ref) return\n-    if (typeof ref === 'function') {\n-      ref(innerRef.current)\n-    } else {\n-      ref.current = innerRef.current\n-    }\n-  })\n-\n+  React.useImperativeHandle(ref, () => innerRef.current!, [])",
        "comment_created_at": "2025-02-09T22:36:51+00:00",
        "comment_author": "Sheraff",
        "comment_body": "Yeah let's go, i hope I'm not breaking anything, but I'm pretty confident this is correct.",
        "pr_file_module": null
      }
    ]
  }
]