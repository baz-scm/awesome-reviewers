[
  {
    "discussion_id": "2178581194",
    "pr_number": 4559,
    "pr_file": "packages/react-router/src/HeadContent.tsx",
    "created_at": "2025-07-01T21:35:39+00:00",
    "commented_code": "structuralSharing: true as any,\n   })\n \n+  const styles = useRouterState({\n+    select: (state) =>\n+      (\n+        state.matches\n+          .map((match) => match.styles!)\n+          .flat(1)\n+          .filter(Boolean) as Array<RouterManagedTag>\n+      ).map(({ children, ...style }) => ({\n+        tag: 'style',\n+        attrs: {\n+          ...style,\n+        },",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2178581194",
        "repo_full_name": "TanStack/router",
        "pr_number": 4559,
        "pr_file": "packages/react-router/src/HeadContent.tsx",
        "discussion_id": "2178581194",
        "commented_code": "@@ -120,6 +120,23 @@ export const useTags = () => {\n     structuralSharing: true as any,\n   })\n \n+  const styles = useRouterState({\n+    select: (state) =>\n+      (\n+        state.matches\n+          .map((match) => match.styles!)\n+          .flat(1)\n+          .filter(Boolean) as Array<RouterManagedTag>\n+      ).map(({ children, ...style }) => ({\n+        tag: 'style',\n+        attrs: {\n+          ...style,\n+        },",
        "comment_created_at": "2025-07-01T21:35:39+00:00",
        "comment_author": "Sheraff",
        "comment_body": "There is no need to make a shallow copy of `style` here, because it's already a *rest* object\r\n```suggestion\r\n      ).map(({ children, ...attrs }) => ({\r\n        tag: 'style',\r\n        attrs,\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1912495284",
    "pr_number": 3140,
    "pr_file": "e2e/start/basic/app/routes/-server-fns/serialize-formdata-fn-call.tsx",
    "created_at": "2025-01-12T17:15:09+00:00",
    "commented_code": "const testValues = {\n   name: 'Sean',\n   age: 25,\n+  pet1: 'dog',\n+  pet2: 'cat',\n   __adder: 1,\n }\n \n export const greetUser = createServerFn()\n-  .validator((data: unknown) => {\n+  .validator((data: FormData) => {\n     if (!(data instanceof FormData)) {\n       throw new Error('Invalid! FormData is required')\n     }\n     const name = data.get('name')\n     const age = data.get('age')\n+    const pets = data.getAll('pet')\n \n-    if (!name || !age) {\n-      throw new Error('Name and age are required')\n+    if (!name || !age || pets.length === 0) {\n+      throw new Error('Name, age and pets are required')\n     }\n \n     return {\n       name: name.toString(),\n       age: parseInt(age.toString(), 10),\n+      pets: pets.map((pet) => pet.toString()),\n     }\n   })\n-  .handler(async ({ data: { name, age } }) => {\n-    return `Hello, ${name}! You are ${age + testValues.__adder} years old.`\n-  })\n+  .handler(",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1912495284",
        "repo_full_name": "TanStack/router",
        "pr_number": 3140,
        "pr_file": "e2e/start/basic/app/routes/-server-fns/serialize-formdata-fn-call.tsx",
        "discussion_id": "1912495284",
        "commented_code": "@@ -4,29 +4,40 @@ import { createServerFn } from '@tanstack/start'\n const testValues = {\n   name: 'Sean',\n   age: 25,\n+  pet1: 'dog',\n+  pet2: 'cat',\n   __adder: 1,\n }\n \n export const greetUser = createServerFn()\n-  .validator((data: unknown) => {\n+  .validator((data: FormData) => {\n     if (!(data instanceof FormData)) {\n       throw new Error('Invalid! FormData is required')\n     }\n     const name = data.get('name')\n     const age = data.get('age')\n+    const pets = data.getAll('pet')\n \n-    if (!name || !age) {\n-      throw new Error('Name and age are required')\n+    if (!name || !age || pets.length === 0) {\n+      throw new Error('Name, age and pets are required')\n     }\n \n     return {\n       name: name.toString(),\n       age: parseInt(age.toString(), 10),\n+      pets: pets.map((pet) => pet.toString()),\n     }\n   })\n-  .handler(async ({ data: { name, age } }) => {\n-    return `Hello, ${name}! You are ${age + testValues.__adder} years old.`\n-  })\n+  .handler(",
        "comment_created_at": "2025-01-12T17:15:09+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Please switch this to using explicit returns with their brackets.\r\nAlso, don't restructure the pets array, instead just join with a comma.\r\n\r\n```js\r\n.handler(async ({ data: { name, age, pets } }) => {\r\n\treturn `Hello, ${name}! You are ${age + testValues.__adder} years old, and your favourite pets are ${pets.join(',')}.`\r\n})\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1912499657",
        "repo_full_name": "TanStack/router",
        "pr_number": 3140,
        "pr_file": "e2e/start/basic/app/routes/-server-fns/serialize-formdata-fn-call.tsx",
        "discussion_id": "1912495284",
        "commented_code": "@@ -4,29 +4,40 @@ import { createServerFn } from '@tanstack/start'\n const testValues = {\n   name: 'Sean',\n   age: 25,\n+  pet1: 'dog',\n+  pet2: 'cat',\n   __adder: 1,\n }\n \n export const greetUser = createServerFn()\n-  .validator((data: unknown) => {\n+  .validator((data: FormData) => {\n     if (!(data instanceof FormData)) {\n       throw new Error('Invalid! FormData is required')\n     }\n     const name = data.get('name')\n     const age = data.get('age')\n+    const pets = data.getAll('pet')\n \n-    if (!name || !age) {\n-      throw new Error('Name and age are required')\n+    if (!name || !age || pets.length === 0) {\n+      throw new Error('Name, age and pets are required')\n     }\n \n     return {\n       name: name.toString(),\n       age: parseInt(age.toString(), 10),\n+      pets: pets.map((pet) => pet.toString()),\n     }\n   })\n-  .handler(async ({ data: { name, age } }) => {\n-    return `Hello, ${name}! You are ${age + testValues.__adder} years old.`\n-  })\n+  .handler(",
        "comment_created_at": "2025-01-12T17:40:02+00:00",
        "comment_author": "EskiMojo14",
        "comment_body": "can do, but why, out of curiosity?",
        "pr_file_module": null
      },
      {
        "comment_id": "1912500042",
        "repo_full_name": "TanStack/router",
        "pr_number": 3140,
        "pr_file": "e2e/start/basic/app/routes/-server-fns/serialize-formdata-fn-call.tsx",
        "discussion_id": "1912495284",
        "commented_code": "@@ -4,29 +4,40 @@ import { createServerFn } from '@tanstack/start'\n const testValues = {\n   name: 'Sean',\n   age: 25,\n+  pet1: 'dog',\n+  pet2: 'cat',\n   __adder: 1,\n }\n \n export const greetUser = createServerFn()\n-  .validator((data: unknown) => {\n+  .validator((data: FormData) => {\n     if (!(data instanceof FormData)) {\n       throw new Error('Invalid! FormData is required')\n     }\n     const name = data.get('name')\n     const age = data.get('age')\n+    const pets = data.getAll('pet')\n \n-    if (!name || !age) {\n-      throw new Error('Name and age are required')\n+    if (!name || !age || pets.length === 0) {\n+      throw new Error('Name, age and pets are required')\n     }\n \n     return {\n       name: name.toString(),\n       age: parseInt(age.toString(), 10),\n+      pets: pets.map((pet) => pet.toString()),\n     }\n   })\n-  .handler(async ({ data: { name, age } }) => {\n-    return `Hello, ${name}! You are ${age + testValues.__adder} years old.`\n-  })\n+  .handler(",
        "comment_created_at": "2025-01-12T17:41:58+00:00",
        "comment_author": "EskiMojo14",
        "comment_body": "the linting was complaining about `async` with no `await`, fwiw",
        "pr_file_module": null
      },
      {
        "comment_id": "1912503111",
        "repo_full_name": "TanStack/router",
        "pr_number": 3140,
        "pr_file": "e2e/start/basic/app/routes/-server-fns/serialize-formdata-fn-call.tsx",
        "discussion_id": "1912495284",
        "commented_code": "@@ -4,29 +4,40 @@ import { createServerFn } from '@tanstack/start'\n const testValues = {\n   name: 'Sean',\n   age: 25,\n+  pet1: 'dog',\n+  pet2: 'cat',\n   __adder: 1,\n }\n \n export const greetUser = createServerFn()\n-  .validator((data: unknown) => {\n+  .validator((data: FormData) => {\n     if (!(data instanceof FormData)) {\n       throw new Error('Invalid! FormData is required')\n     }\n     const name = data.get('name')\n     const age = data.get('age')\n+    const pets = data.getAll('pet')\n \n-    if (!name || !age) {\n-      throw new Error('Name and age are required')\n+    if (!name || !age || pets.length === 0) {\n+      throw new Error('Name, age and pets are required')\n     }\n \n     return {\n       name: name.toString(),\n       age: parseInt(age.toString(), 10),\n+      pets: pets.map((pet) => pet.toString()),\n     }\n   })\n-  .handler(async ({ data: { name, age } }) => {\n-    return `Hello, ${name}! You are ${age + testValues.__adder} years old.`\n-  })\n+  .handler(",
        "comment_created_at": "2025-01-12T18:01:27+00:00",
        "comment_author": "EskiMojo14",
        "comment_body": "updated, sans async keyword",
        "pr_file_module": null
      },
      {
        "comment_id": "1912507290",
        "repo_full_name": "TanStack/router",
        "pr_number": 3140,
        "pr_file": "e2e/start/basic/app/routes/-server-fns/serialize-formdata-fn-call.tsx",
        "discussion_id": "1912495284",
        "commented_code": "@@ -4,29 +4,40 @@ import { createServerFn } from '@tanstack/start'\n const testValues = {\n   name: 'Sean',\n   age: 25,\n+  pet1: 'dog',\n+  pet2: 'cat',\n   __adder: 1,\n }\n \n export const greetUser = createServerFn()\n-  .validator((data: unknown) => {\n+  .validator((data: FormData) => {\n     if (!(data instanceof FormData)) {\n       throw new Error('Invalid! FormData is required')\n     }\n     const name = data.get('name')\n     const age = data.get('age')\n+    const pets = data.getAll('pet')\n \n-    if (!name || !age) {\n-      throw new Error('Name and age are required')\n+    if (!name || !age || pets.length === 0) {\n+      throw new Error('Name, age and pets are required')\n     }\n \n     return {\n       name: name.toString(),\n       age: parseInt(age.toString(), 10),\n+      pets: pets.map((pet) => pet.toString()),\n     }\n   })\n-  .handler(async ({ data: { name, age } }) => {\n-    return `Hello, ${name}! You are ${age + testValues.__adder} years old.`\n-  })\n+  .handler(",
        "comment_created_at": "2025-01-12T18:26:55+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "> can do, but why, out of curiosity?\r\n\r\nLegibility mostly. For a lib, the more legible the better.",
        "pr_file_module": null
      }
    ]
  }
]