[
  {
    "discussion_id": "2217989374",
    "pr_number": 4726,
    "pr_file": "packages/react-router/tests/loaders.test.tsx",
    "created_at": "2025-07-20T22:47:17+00:00",
    "commented_code": "expect(nestedPendingComponentOnMountMock).not.toHaveBeenCalled()\n   expect(fooPendingComponentOnMountMock).not.toHaveBeenCalled()\n })\n+\n+test('reproducer for #4696', async () => {\n+  const rootRoute = createRootRoute({\n+    beforeLoad: async ({ context }) => {\n+      return {\n+        ...context,\n+        isAuthenticated: true,\n+        isAdmin: false,\n+      }\n+    },\n+    loader: ({ context }) => context,\n+    pendingComponent: () => 'Loading...',\n+    wrapInSuspense: true,\n+    component: RootRouteContent,\n+  })\n+\n+  function RootRouteContent() {\n+    const routeData = rootRoute.useLoaderData()\n+    const isAuthenticated = routeData.isAuthenticated\n+    return (\n+      <>\n+        {!!isAuthenticated && (\n+          <nav style={{ display: 'flex', gap: 8 }}>\n+            <Link to=\"/\">Index</Link>\n+            <Link to=\"/dashboard\">Dashboard</Link>\n+          </nav>\n+        )}\n+        <hr />\n+        <Outlet />\n+      </>\n+    )\n+  }\n+\n+  const indexRoute = createRoute({\n+    getParentRoute: () => rootRoute,\n+    path: '/',\n+    component: () => <h1>Index</h1>,\n+  })\n+\n+  const dashboardRoute = createRoute({\n+    getParentRoute: () => rootRoute,\n+    path: '/dashboard',\n+    pendingComponent: () => 'Loading dashboard...',\n+    validateSearch: () => {\n+      return {\n+        page: 0,\n+      }\n+    },\n+    component: () => <h1>Dashboard</h1>,\n+  })\n+\n+  const routeTree = rootRoute.addChildren([indexRoute, dashboardRoute])\n+  const router = createRouter({ routeTree })\n+\n+  render(<RouterProvider router={router} />)\n+  await act(async () => {\n+    /* no-op */\n+  })\n+  expect(screen.getByRole('heading', { name: 'Index' })).toBeInTheDocument()",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2217989374",
        "repo_full_name": "TanStack/router",
        "pr_number": 4726,
        "pr_file": "packages/react-router/tests/loaders.test.tsx",
        "discussion_id": "2217989374",
        "commented_code": "@@ -729,3 +730,89 @@ test('clears pendingTimeout when match resolves', async () => {\n   expect(nestedPendingComponentOnMountMock).not.toHaveBeenCalled()\n   expect(fooPendingComponentOnMountMock).not.toHaveBeenCalled()\n })\n+\n+test('reproducer for #4696', async () => {\n+  const rootRoute = createRootRoute({\n+    beforeLoad: async ({ context }) => {\n+      return {\n+        ...context,\n+        isAuthenticated: true,\n+        isAdmin: false,\n+      }\n+    },\n+    loader: ({ context }) => context,\n+    pendingComponent: () => 'Loading...',\n+    wrapInSuspense: true,\n+    component: RootRouteContent,\n+  })\n+\n+  function RootRouteContent() {\n+    const routeData = rootRoute.useLoaderData()\n+    const isAuthenticated = routeData.isAuthenticated\n+    return (\n+      <>\n+        {!!isAuthenticated && (\n+          <nav style={{ display: 'flex', gap: 8 }}>\n+            <Link to=\"/\">Index</Link>\n+            <Link to=\"/dashboard\">Dashboard</Link>\n+          </nav>\n+        )}\n+        <hr />\n+        <Outlet />\n+      </>\n+    )\n+  }\n+\n+  const indexRoute = createRoute({\n+    getParentRoute: () => rootRoute,\n+    path: '/',\n+    component: () => <h1>Index</h1>,\n+  })\n+\n+  const dashboardRoute = createRoute({\n+    getParentRoute: () => rootRoute,\n+    path: '/dashboard',\n+    pendingComponent: () => 'Loading dashboard...',\n+    validateSearch: () => {\n+      return {\n+        page: 0,\n+      }\n+    },\n+    component: () => <h1>Dashboard</h1>,\n+  })\n+\n+  const routeTree = rootRoute.addChildren([indexRoute, dashboardRoute])\n+  const router = createRouter({ routeTree })\n+\n+  render(<RouterProvider router={router} />)\n+  await act(async () => {\n+    /* no-op */\n+  })\n+  expect(screen.getByRole('heading', { name: 'Index' })).toBeInTheDocument()",
        "comment_created_at": "2025-07-20T22:47:17+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "please use getByTestId and use `data-testid=\"...\"`\r\nwe try not to use getByRole in new tests anymore",
        "pr_file_module": null
      },
      {
        "comment_id": "2217991172",
        "repo_full_name": "TanStack/router",
        "pr_number": 4726,
        "pr_file": "packages/react-router/tests/loaders.test.tsx",
        "discussion_id": "2217989374",
        "commented_code": "@@ -729,3 +730,89 @@ test('clears pendingTimeout when match resolves', async () => {\n   expect(nestedPendingComponentOnMountMock).not.toHaveBeenCalled()\n   expect(fooPendingComponentOnMountMock).not.toHaveBeenCalled()\n })\n+\n+test('reproducer for #4696', async () => {\n+  const rootRoute = createRootRoute({\n+    beforeLoad: async ({ context }) => {\n+      return {\n+        ...context,\n+        isAuthenticated: true,\n+        isAdmin: false,\n+      }\n+    },\n+    loader: ({ context }) => context,\n+    pendingComponent: () => 'Loading...',\n+    wrapInSuspense: true,\n+    component: RootRouteContent,\n+  })\n+\n+  function RootRouteContent() {\n+    const routeData = rootRoute.useLoaderData()\n+    const isAuthenticated = routeData.isAuthenticated\n+    return (\n+      <>\n+        {!!isAuthenticated && (\n+          <nav style={{ display: 'flex', gap: 8 }}>\n+            <Link to=\"/\">Index</Link>\n+            <Link to=\"/dashboard\">Dashboard</Link>\n+          </nav>\n+        )}\n+        <hr />\n+        <Outlet />\n+      </>\n+    )\n+  }\n+\n+  const indexRoute = createRoute({\n+    getParentRoute: () => rootRoute,\n+    path: '/',\n+    component: () => <h1>Index</h1>,\n+  })\n+\n+  const dashboardRoute = createRoute({\n+    getParentRoute: () => rootRoute,\n+    path: '/dashboard',\n+    pendingComponent: () => 'Loading dashboard...',\n+    validateSearch: () => {\n+      return {\n+        page: 0,\n+      }\n+    },\n+    component: () => <h1>Dashboard</h1>,\n+  })\n+\n+  const routeTree = rootRoute.addChildren([indexRoute, dashboardRoute])\n+  const router = createRouter({ routeTree })\n+\n+  render(<RouterProvider router={router} />)\n+  await act(async () => {\n+    /* no-op */\n+  })\n+  expect(screen.getByRole('heading', { name: 'Index' })).toBeInTheDocument()",
        "comment_created_at": "2025-07-20T22:54:50+00:00",
        "comment_author": "Dakkers",
        "comment_body": "got it \u2013 why's that? (just curious)",
        "pr_file_module": null
      },
      {
        "comment_id": "2217991397",
        "repo_full_name": "TanStack/router",
        "pr_number": 4726,
        "pr_file": "packages/react-router/tests/loaders.test.tsx",
        "discussion_id": "2217989374",
        "commented_code": "@@ -729,3 +730,89 @@ test('clears pendingTimeout when match resolves', async () => {\n   expect(nestedPendingComponentOnMountMock).not.toHaveBeenCalled()\n   expect(fooPendingComponentOnMountMock).not.toHaveBeenCalled()\n })\n+\n+test('reproducer for #4696', async () => {\n+  const rootRoute = createRootRoute({\n+    beforeLoad: async ({ context }) => {\n+      return {\n+        ...context,\n+        isAuthenticated: true,\n+        isAdmin: false,\n+      }\n+    },\n+    loader: ({ context }) => context,\n+    pendingComponent: () => 'Loading...',\n+    wrapInSuspense: true,\n+    component: RootRouteContent,\n+  })\n+\n+  function RootRouteContent() {\n+    const routeData = rootRoute.useLoaderData()\n+    const isAuthenticated = routeData.isAuthenticated\n+    return (\n+      <>\n+        {!!isAuthenticated && (\n+          <nav style={{ display: 'flex', gap: 8 }}>\n+            <Link to=\"/\">Index</Link>\n+            <Link to=\"/dashboard\">Dashboard</Link>\n+          </nav>\n+        )}\n+        <hr />\n+        <Outlet />\n+      </>\n+    )\n+  }\n+\n+  const indexRoute = createRoute({\n+    getParentRoute: () => rootRoute,\n+    path: '/',\n+    component: () => <h1>Index</h1>,\n+  })\n+\n+  const dashboardRoute = createRoute({\n+    getParentRoute: () => rootRoute,\n+    path: '/dashboard',\n+    pendingComponent: () => 'Loading dashboard...',\n+    validateSearch: () => {\n+      return {\n+        page: 0,\n+      }\n+    },\n+    component: () => <h1>Dashboard</h1>,\n+  })\n+\n+  const routeTree = rootRoute.addChildren([indexRoute, dashboardRoute])\n+  const router = createRouter({ routeTree })\n+\n+  render(<RouterProvider router={router} />)\n+  await act(async () => {\n+    /* no-op */\n+  })\n+  expect(screen.getByRole('heading', { name: 'Index' })).toBeInTheDocument()",
        "comment_created_at": "2025-07-20T22:55:58+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "it allows to change text, tags etc without having to update the getByRole calls\r\nyou just need to make sure the test-id is correctly specified",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1667488788",
    "pr_number": 1907,
    "pr_file": "packages/react-router/tests/createLazyRoute.test.tsx",
    "created_at": "2024-07-06T22:54:47+00:00",
    "commented_code": "+import { afterEach, describe, expect, it, vi } from 'vitest'\n+import {\n+  RouterHistory,\n+  createMemoryHistory,\n+  createRootRoute,\n+  createRoute,\n+  createRouter,\n+} from '../src'\n+import { cleanup } from '@testing-library/react'\n+\n+afterEach(() => {\n+  vi.resetAllMocks()\n+  cleanup()\n+})\n+\n+function createTestRouter(initialHistory?: RouterHistory) {\n+  const history =\n+    initialHistory ?? createMemoryHistory({ initialEntries: ['/'] })\n+\n+  const rootRoute = createRootRoute({})\n+  const indexRoute = createRoute({ getParentRoute: () => rootRoute, path: '/' })\n+\n+  const heavyRoute = createRoute({\n+    getParentRoute: () => rootRoute,\n+    path: '/heavy',\n+  }).lazy(() => import('./lazy/heavy').then((d) => d.default('/heavy')))\n+\n+  const routeTree = rootRoute.addChildren([indexRoute, heavyRoute])\n+\n+  const router = createRouter({ routeTree, history })\n+\n+  return {\n+    router,\n+    routes: { indexRoute, heavyRoute },\n+  }\n+}\n+\n+describe('preload: matched routes', { timeout: 20000 }, () => {\n+  it('should wait for lazy options to be streamed in before ', async () => {\n+    const { router } = createTestRouter(\n+      createMemoryHistory({ initialEntries: ['/'] }),\n+    )\n+\n+    await router.load()\n+\n+    // Preload the route and navigate to it\n+    router.preloadRoute({ to: '/heavy' })\n+    await router.navigate({ to: '/heavy' })\n+\n+    await router.invalidate()\n+\n+    expect(router.state.location.pathname).toBe('/heavy')\n+\n+    const lazyRoute = router.routesByPath['/heavy']\n+\n+    expect(lazyRoute.options.component).toBeDefined()",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1667488788",
        "repo_full_name": "TanStack/router",
        "pr_number": 1907,
        "pr_file": "packages/react-router/tests/createLazyRoute.test.tsx",
        "discussion_id": "1667488788",
        "commented_code": "@@ -0,0 +1,58 @@\n+import { afterEach, describe, expect, it, vi } from 'vitest'\n+import {\n+  RouterHistory,\n+  createMemoryHistory,\n+  createRootRoute,\n+  createRoute,\n+  createRouter,\n+} from '../src'\n+import { cleanup } from '@testing-library/react'\n+\n+afterEach(() => {\n+  vi.resetAllMocks()\n+  cleanup()\n+})\n+\n+function createTestRouter(initialHistory?: RouterHistory) {\n+  const history =\n+    initialHistory ?? createMemoryHistory({ initialEntries: ['/'] })\n+\n+  const rootRoute = createRootRoute({})\n+  const indexRoute = createRoute({ getParentRoute: () => rootRoute, path: '/' })\n+\n+  const heavyRoute = createRoute({\n+    getParentRoute: () => rootRoute,\n+    path: '/heavy',\n+  }).lazy(() => import('./lazy/heavy').then((d) => d.default('/heavy')))\n+\n+  const routeTree = rootRoute.addChildren([indexRoute, heavyRoute])\n+\n+  const router = createRouter({ routeTree, history })\n+\n+  return {\n+    router,\n+    routes: { indexRoute, heavyRoute },\n+  }\n+}\n+\n+describe('preload: matched routes', { timeout: 20000 }, () => {\n+  it('should wait for lazy options to be streamed in before ', async () => {\n+    const { router } = createTestRouter(\n+      createMemoryHistory({ initialEntries: ['/'] }),\n+    )\n+\n+    await router.load()\n+\n+    // Preload the route and navigate to it\n+    router.preloadRoute({ to: '/heavy' })\n+    await router.navigate({ to: '/heavy' })\n+\n+    await router.invalidate()\n+\n+    expect(router.state.location.pathname).toBe('/heavy')\n+\n+    const lazyRoute = router.routesByPath['/heavy']\n+\n+    expect(lazyRoute.options.component).toBeDefined()",
        "comment_created_at": "2024-07-06T22:54:47+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "I think it'd be better if we beefed up this test, either by amending this or adding a new one, to-use testing library to make sure the component gets rendered on the screen (like how `routeContext.test.tsx` does).",
        "pr_file_module": null
      },
      {
        "comment_id": "1667514304",
        "repo_full_name": "TanStack/router",
        "pr_number": 1907,
        "pr_file": "packages/react-router/tests/createLazyRoute.test.tsx",
        "discussion_id": "1667488788",
        "commented_code": "@@ -0,0 +1,58 @@\n+import { afterEach, describe, expect, it, vi } from 'vitest'\n+import {\n+  RouterHistory,\n+  createMemoryHistory,\n+  createRootRoute,\n+  createRoute,\n+  createRouter,\n+} from '../src'\n+import { cleanup } from '@testing-library/react'\n+\n+afterEach(() => {\n+  vi.resetAllMocks()\n+  cleanup()\n+})\n+\n+function createTestRouter(initialHistory?: RouterHistory) {\n+  const history =\n+    initialHistory ?? createMemoryHistory({ initialEntries: ['/'] })\n+\n+  const rootRoute = createRootRoute({})\n+  const indexRoute = createRoute({ getParentRoute: () => rootRoute, path: '/' })\n+\n+  const heavyRoute = createRoute({\n+    getParentRoute: () => rootRoute,\n+    path: '/heavy',\n+  }).lazy(() => import('./lazy/heavy').then((d) => d.default('/heavy')))\n+\n+  const routeTree = rootRoute.addChildren([indexRoute, heavyRoute])\n+\n+  const router = createRouter({ routeTree, history })\n+\n+  return {\n+    router,\n+    routes: { indexRoute, heavyRoute },\n+  }\n+}\n+\n+describe('preload: matched routes', { timeout: 20000 }, () => {\n+  it('should wait for lazy options to be streamed in before ', async () => {\n+    const { router } = createTestRouter(\n+      createMemoryHistory({ initialEntries: ['/'] }),\n+    )\n+\n+    await router.load()\n+\n+    // Preload the route and navigate to it\n+    router.preloadRoute({ to: '/heavy' })\n+    await router.navigate({ to: '/heavy' })\n+\n+    await router.invalidate()\n+\n+    expect(router.state.location.pathname).toBe('/heavy')\n+\n+    const lazyRoute = router.routesByPath['/heavy']\n+\n+    expect(lazyRoute.options.component).toBeDefined()",
        "comment_created_at": "2024-07-07T00:52:06+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Resolved in https://github.com/TanStack/router/pull/1908",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1667489474",
    "pr_number": 1907,
    "pr_file": "packages/react-router/tests/routeContext.test.tsx",
    "created_at": "2024-07-06T23:02:58+00:00",
    "commented_code": "expect(mock).toHaveBeenCalledTimes(1)\n   })\n \n+  test(\"on navigate (with preload), loader isn't invoked with undefined context if beforeLoad is pending when navigation happens\", async () => {\n+    const mock = vi.fn()\n+\n+    const rootRoute = createRootRoute()\n+    const indexRoute = createRoute({\n+      getParentRoute: () => rootRoute,\n+      path: '/',\n+    })\n+    const aboutRoute = createRoute({\n+      getParentRoute: () => rootRoute,\n+      path: '/about',\n+      beforeLoad: async () => {\n+        await sleep(WAIT_TIME) // Use a longer delay here\n+        return { mock }\n+      },\n+      loader: async ({ context }) => {\n+        await sleep(WAIT_TIME)\n+        context.mock()\n+      },\n+    })\n+\n+    const routeTree = rootRoute.addChildren([aboutRoute, indexRoute])\n+    const router = createRouter({ routeTree, context: { foo: 'bar' } })\n+\n+    await router.load()\n+\n+    // Don't await, simulate user clicking before preload is done\n+    router.preloadRoute(aboutRoute)",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1667489474",
        "repo_full_name": "TanStack/router",
        "pr_number": 1907,
        "pr_file": "packages/react-router/tests/routeContext.test.tsx",
        "discussion_id": "1667489474",
        "commented_code": "@@ -381,6 +381,42 @@ describe('beforeLoad in the route definition', () => {\n     expect(mock).toHaveBeenCalledTimes(1)\n   })\n \n+  test(\"on navigate (with preload), loader isn't invoked with undefined context if beforeLoad is pending when navigation happens\", async () => {\n+    const mock = vi.fn()\n+\n+    const rootRoute = createRootRoute()\n+    const indexRoute = createRoute({\n+      getParentRoute: () => rootRoute,\n+      path: '/',\n+    })\n+    const aboutRoute = createRoute({\n+      getParentRoute: () => rootRoute,\n+      path: '/about',\n+      beforeLoad: async () => {\n+        await sleep(WAIT_TIME) // Use a longer delay here\n+        return { mock }\n+      },\n+      loader: async ({ context }) => {\n+        await sleep(WAIT_TIME)\n+        context.mock()\n+      },\n+    })\n+\n+    const routeTree = rootRoute.addChildren([aboutRoute, indexRoute])\n+    const router = createRouter({ routeTree, context: { foo: 'bar' } })\n+\n+    await router.load()\n+\n+    // Don't await, simulate user clicking before preload is done\n+    router.preloadRoute(aboutRoute)",
        "comment_created_at": "2024-07-06T23:02:58+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "In addition to this test, I think we should also be testing the user hover event from testing-library.\r\n\r\nSetting `defaultPreload: 'intent'` and doing `element.focus()` would also simulate a \"real\" interaction.",
        "pr_file_module": null
      },
      {
        "comment_id": "1667514443",
        "repo_full_name": "TanStack/router",
        "pr_number": 1907,
        "pr_file": "packages/react-router/tests/routeContext.test.tsx",
        "discussion_id": "1667489474",
        "commented_code": "@@ -381,6 +381,42 @@ describe('beforeLoad in the route definition', () => {\n     expect(mock).toHaveBeenCalledTimes(1)\n   })\n \n+  test(\"on navigate (with preload), loader isn't invoked with undefined context if beforeLoad is pending when navigation happens\", async () => {\n+    const mock = vi.fn()\n+\n+    const rootRoute = createRootRoute()\n+    const indexRoute = createRoute({\n+      getParentRoute: () => rootRoute,\n+      path: '/',\n+    })\n+    const aboutRoute = createRoute({\n+      getParentRoute: () => rootRoute,\n+      path: '/about',\n+      beforeLoad: async () => {\n+        await sleep(WAIT_TIME) // Use a longer delay here\n+        return { mock }\n+      },\n+      loader: async ({ context }) => {\n+        await sleep(WAIT_TIME)\n+        context.mock()\n+      },\n+    })\n+\n+    const routeTree = rootRoute.addChildren([aboutRoute, indexRoute])\n+    const router = createRouter({ routeTree, context: { foo: 'bar' } })\n+\n+    await router.load()\n+\n+    // Don't await, simulate user clicking before preload is done\n+    router.preloadRoute(aboutRoute)",
        "comment_created_at": "2024-07-07T00:52:11+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Resolved in https://github.com/TanStack/router/pull/1908",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1604983402",
    "pr_number": 1590,
    "pr_file": "packages/react-router/tests/link.test.tsx",
    "created_at": "2024-05-17T13:12:12+00:00",
    "commented_code": "import React from 'react'\n-import { describe, it, expect, afterEach } from 'vitest'\n-import { render, cleanup } from '@testing-library/react'\n+import '@testing-library/jest-dom/vitest'\n+import { afterEach, describe, expect, it, test, vi } from 'vitest'\n+import { cleanup, fireEvent, render, screen } from '@testing-library/react'\n \n import {\n-  createRouter,\n+  createLink,\n+  createMemoryHistory,\n   createRootRoute,\n   createRoute,\n-  createMemoryHistory,\n-  RouterProvider,\n-  createLink,\n+  createRouter,\n   Link,\n+  RouterProvider,\n+  useLoaderData,\n+  useSearch,\n+  redirect,\n+  useRouteContext,\n+  useParams,\n+  Outlet,\n } from '../src'\n \n afterEach(() => {\n+  window.history.replaceState(null, 'root', '/')\n   cleanup()\n })\n \n describe('Link', () => {\n-  it('should NOT pass the \"disabled\" prop to the rendered Link component', async () => {\n+  test('when a Link is disabled', async () => {\n     const rootRoute = createRootRoute()\n     const indexRoute = createRoute({\n       getParentRoute: () => rootRoute,\n       path: '/',\n       component: () => (\n-        <Link to=\"/\" disabled>\n-          Index\n-        </Link>\n+        <React.Fragment>\n+          <h1>Index</h1>\n+          <Link to=\"/posts\" disabled>\n+            Posts\n+          </Link>\n+        </React.Fragment>\n       ),\n     })\n+\n+    const postsRoute = createRoute({\n+      getParentRoute: () => rootRoute,\n+      path: '/posts',\n+      component: () => (\n+        <React.Fragment>\n+          <h1>Posts</h1>\n+        </React.Fragment>\n+      ),\n+    })\n+\n     const router = createRouter({\n-      routeTree: rootRoute.addChildren([indexRoute]),\n-      history: createMemoryHistory({ initialEntries: ['/'] }),\n+      routeTree: rootRoute.addChildren([indexRoute, postsRoute]),\n     })\n \n-    await router.load()\n+    render(<RouterProvider router={router} />)\n \n-    const rendered = render(<RouterProvider router={router} />)\n-    const customElement = rendered.queryByText('Index')\n+    const postsLink = await screen.findByRole('link', { name: 'Posts' })\n+\n+    expect(window.location.pathname).toBe('/')\n+\n+    expect(postsLink).not.toBeDisabled()\n+    expect(postsLink).toHaveAttribute('aria-disabled', 'true')\n+\n+    fireEvent.click(postsLink)\n+\n+    await expect(\n+      screen.findByRole('header', { name: 'Posts' }),\n+    ).rejects.toThrow()\n+  })\n+\n+  it('when the current route is the root', async () => {\n+    const rootRoute = createRootRoute()\n+    const indexRoute = createRoute({\n+      getParentRoute: () => rootRoute,\n+      path: '/',\n+      component: () => {\n+        return (\n+          <React.Fragment>\n+            <h1>Index</h1>\n+            <Link to=\"/\" activeProps={{ className: 'active' }}>\n+              Index\n+            </Link>\n+            <Link to=\"/posts\" inactiveProps={{ className: 'inactive' }}>\n+              Posts\n+            </Link>\n+          </React.Fragment>\n+        )\n+      },\n+    })\n+\n+    const postsRoute = createRoute({\n+      getParentRoute: () => rootRoute,\n+      path: '/posts',\n+      component: () => {\n+        return (\n+          <React.Fragment>\n+            <h1>Posts</h1>\n+          </React.Fragment>\n+        )\n+      },\n+    })\n+\n+    const router = createRouter({\n+      routeTree: rootRoute.addChildren([indexRoute, postsRoute]),\n+    })\n+\n+    render(<RouterProvider router={router} />)\n+\n+    const indexLink = await screen.findByRole('link', { name: 'Index' })\n+\n+    expect(window.location.pathname).toBe('/')\n+\n+    expect(indexLink).toHaveAttribute('aria-current', 'page')\n+    expect(indexLink).toHaveClass('active')\n+    expect(indexLink).toHaveAttribute('data-status', 'active')\n+    expect(indexLink).toHaveAttribute('href', '/')\n \n-    expect(customElement!.hasAttribute('disabled')).toBe(false)\n+    const postsLink = await screen.findByRole('link', { name: 'Posts' })\n+\n+    expect(postsLink).toHaveClass('inactive')\n+    expect(postsLink).toHaveAttribute('href', '/posts')",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1604983402",
        "repo_full_name": "TanStack/router",
        "pr_number": 1590,
        "pr_file": "packages/react-router/tests/link.test.tsx",
        "discussion_id": "1604983402",
        "commented_code": "@@ -1,44 +1,805 @@\n import React from 'react'\n-import { describe, it, expect, afterEach } from 'vitest'\n-import { render, cleanup } from '@testing-library/react'\n+import '@testing-library/jest-dom/vitest'\n+import { afterEach, describe, expect, it, test, vi } from 'vitest'\n+import { cleanup, fireEvent, render, screen } from '@testing-library/react'\n \n import {\n-  createRouter,\n+  createLink,\n+  createMemoryHistory,\n   createRootRoute,\n   createRoute,\n-  createMemoryHistory,\n-  RouterProvider,\n-  createLink,\n+  createRouter,\n   Link,\n+  RouterProvider,\n+  useLoaderData,\n+  useSearch,\n+  redirect,\n+  useRouteContext,\n+  useParams,\n+  Outlet,\n } from '../src'\n \n afterEach(() => {\n+  window.history.replaceState(null, 'root', '/')\n   cleanup()\n })\n \n describe('Link', () => {\n-  it('should NOT pass the \"disabled\" prop to the rendered Link component', async () => {\n+  test('when a Link is disabled', async () => {\n     const rootRoute = createRootRoute()\n     const indexRoute = createRoute({\n       getParentRoute: () => rootRoute,\n       path: '/',\n       component: () => (\n-        <Link to=\"/\" disabled>\n-          Index\n-        </Link>\n+        <React.Fragment>\n+          <h1>Index</h1>\n+          <Link to=\"/posts\" disabled>\n+            Posts\n+          </Link>\n+        </React.Fragment>\n       ),\n     })\n+\n+    const postsRoute = createRoute({\n+      getParentRoute: () => rootRoute,\n+      path: '/posts',\n+      component: () => (\n+        <React.Fragment>\n+          <h1>Posts</h1>\n+        </React.Fragment>\n+      ),\n+    })\n+\n     const router = createRouter({\n-      routeTree: rootRoute.addChildren([indexRoute]),\n-      history: createMemoryHistory({ initialEntries: ['/'] }),\n+      routeTree: rootRoute.addChildren([indexRoute, postsRoute]),\n     })\n \n-    await router.load()\n+    render(<RouterProvider router={router} />)\n \n-    const rendered = render(<RouterProvider router={router} />)\n-    const customElement = rendered.queryByText('Index')\n+    const postsLink = await screen.findByRole('link', { name: 'Posts' })\n+\n+    expect(window.location.pathname).toBe('/')\n+\n+    expect(postsLink).not.toBeDisabled()\n+    expect(postsLink).toHaveAttribute('aria-disabled', 'true')\n+\n+    fireEvent.click(postsLink)\n+\n+    await expect(\n+      screen.findByRole('header', { name: 'Posts' }),\n+    ).rejects.toThrow()\n+  })\n+\n+  it('when the current route is the root', async () => {\n+    const rootRoute = createRootRoute()\n+    const indexRoute = createRoute({\n+      getParentRoute: () => rootRoute,\n+      path: '/',\n+      component: () => {\n+        return (\n+          <React.Fragment>\n+            <h1>Index</h1>\n+            <Link to=\"/\" activeProps={{ className: 'active' }}>\n+              Index\n+            </Link>\n+            <Link to=\"/posts\" inactiveProps={{ className: 'inactive' }}>\n+              Posts\n+            </Link>\n+          </React.Fragment>\n+        )\n+      },\n+    })\n+\n+    const postsRoute = createRoute({\n+      getParentRoute: () => rootRoute,\n+      path: '/posts',\n+      component: () => {\n+        return (\n+          <React.Fragment>\n+            <h1>Posts</h1>\n+          </React.Fragment>\n+        )\n+      },\n+    })\n+\n+    const router = createRouter({\n+      routeTree: rootRoute.addChildren([indexRoute, postsRoute]),\n+    })\n+\n+    render(<RouterProvider router={router} />)\n+\n+    const indexLink = await screen.findByRole('link', { name: 'Index' })\n+\n+    expect(window.location.pathname).toBe('/')\n+\n+    expect(indexLink).toHaveAttribute('aria-current', 'page')\n+    expect(indexLink).toHaveClass('active')\n+    expect(indexLink).toHaveAttribute('data-status', 'active')\n+    expect(indexLink).toHaveAttribute('href', '/')\n \n-    expect(customElement!.hasAttribute('disabled')).toBe(false)\n+    const postsLink = await screen.findByRole('link', { name: 'Posts' })\n+\n+    expect(postsLink).toHaveClass('inactive')\n+    expect(postsLink).toHaveAttribute('href', '/posts')",
        "comment_created_at": "2024-05-17T13:12:12+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Could a test also be added in, testing the href value when a `basePath` value is set on the router.\r\n\r\n```tsx\r\nconst router = createRouter({\r\n  basePath: '/app'\r\n})\r\n```\r\n\r\nSeems like a good runtime check to guarantee.",
        "pr_file_module": null
      }
    ]
  }
]