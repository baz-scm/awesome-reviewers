[
  {
    "discussion_id": "2194079287",
    "pr_number": 4600,
    "pr_file": "packages/router-core/src/ssr/ssr-client.ts",
    "created_at": "2025-07-09T05:50:26+00:00",
    "commented_code": "import invariant from 'tiny-invariant'\n-import { isPlainObject } from '../utils'\n-import { tsrSerializer } from '../serializer'\n-import type { DeferredPromiseState } from '../defer'\n-import type { MakeRouteMatch } from '../Matches'\n-import type { AnyRouter, ControllablePromise } from '../router'\n+import type { AnyRouteMatch, MakeRouteMatch } from '../Matches'\n+import type { AnyRouter } from '../router'\n import type { Manifest } from '../manifest'\n import type { RouteContextOptions } from '../route'\n+import type { GLOBAL_TSR } from './ssr-server'\n \n declare global {\n   interface Window {\n-    __TSR_SSR__?: TsrSsrGlobal\n+    [GLOBAL_TSR]?: TsrSsrGlobal\n   }\n }\n \n-export interface TsrSsrGlobal {\n-  matches: Array<SsrMatch>\n-  streamedValues: Record<\n-    string,\n-    {\n-      value: any\n-      parsed: any\n+declare module '../router' {\n+  interface RouterEvents {\n+    onStreamedValue: {\n+      type: 'onStreamedValue'\n+      key: string\n     }\n-  >\n-  cleanScripts: () => void\n-  dehydrated?: any\n-  initMatch: (match: SsrMatch) => void\n-  resolvePromise: (opts: {\n-    matchId: string\n-    id: number\n-    promiseState: DeferredPromiseState<any>\n-  }) => void\n-  injectChunk: (opts: { matchId: string; id: number; chunk: string }) => void\n-  closeStream: (opts: { matchId: string; id: number }) => void\n-}\n-\n-export interface SsrMatch {\n-  id: string\n-  __beforeLoadContext: string\n-  loaderData?: string\n-  error?: string\n-  extracted?: Array<ClientExtractedEntry>\n-  updatedAt: MakeRouteMatch['updatedAt']\n-  status: MakeRouteMatch['status']\n-  ssr?: boolean | 'data-only'\n-}\n-\n-export type ClientExtractedEntry =\n-  | ClientExtractedStream\n-  | ClientExtractedPromise\n-\n-export interface ClientExtractedPromise extends ClientExtractedBaseEntry {\n-  type: 'promise'\n-  value?: ControllablePromise<any>\n+  }\n }\n-\n-export interface ClientExtractedStream extends ClientExtractedBaseEntry {\n-  type: 'stream'\n-  value?: ReadableStream & { controller?: ReadableStreamDefaultController }\n+export interface TsrSsrGlobal {\n+  r?: DehydratedRouter",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2194079287",
        "repo_full_name": "TanStack/router",
        "pr_number": 4600,
        "pr_file": "packages/router-core/src/ssr/ssr-client.ts",
        "discussion_id": "2194079287",
        "commented_code": "@@ -1,113 +1,77 @@\n import invariant from 'tiny-invariant'\n-import { isPlainObject } from '../utils'\n-import { tsrSerializer } from '../serializer'\n-import type { DeferredPromiseState } from '../defer'\n-import type { MakeRouteMatch } from '../Matches'\n-import type { AnyRouter, ControllablePromise } from '../router'\n+import type { AnyRouteMatch, MakeRouteMatch } from '../Matches'\n+import type { AnyRouter } from '../router'\n import type { Manifest } from '../manifest'\n import type { RouteContextOptions } from '../route'\n+import type { GLOBAL_TSR } from './ssr-server'\n \n declare global {\n   interface Window {\n-    __TSR_SSR__?: TsrSsrGlobal\n+    [GLOBAL_TSR]?: TsrSsrGlobal\n   }\n }\n \n-export interface TsrSsrGlobal {\n-  matches: Array<SsrMatch>\n-  streamedValues: Record<\n-    string,\n-    {\n-      value: any\n-      parsed: any\n+declare module '../router' {\n+  interface RouterEvents {\n+    onStreamedValue: {\n+      type: 'onStreamedValue'\n+      key: string\n     }\n-  >\n-  cleanScripts: () => void\n-  dehydrated?: any\n-  initMatch: (match: SsrMatch) => void\n-  resolvePromise: (opts: {\n-    matchId: string\n-    id: number\n-    promiseState: DeferredPromiseState<any>\n-  }) => void\n-  injectChunk: (opts: { matchId: string; id: number; chunk: string }) => void\n-  closeStream: (opts: { matchId: string; id: number }) => void\n-}\n-\n-export interface SsrMatch {\n-  id: string\n-  __beforeLoadContext: string\n-  loaderData?: string\n-  error?: string\n-  extracted?: Array<ClientExtractedEntry>\n-  updatedAt: MakeRouteMatch['updatedAt']\n-  status: MakeRouteMatch['status']\n-  ssr?: boolean | 'data-only'\n-}\n-\n-export type ClientExtractedEntry =\n-  | ClientExtractedStream\n-  | ClientExtractedPromise\n-\n-export interface ClientExtractedPromise extends ClientExtractedBaseEntry {\n-  type: 'promise'\n-  value?: ControllablePromise<any>\n+  }\n }\n-\n-export interface ClientExtractedStream extends ClientExtractedBaseEntry {\n-  type: 'stream'\n-  value?: ReadableStream & { controller?: ReadableStreamDefaultController }\n+export interface TsrSsrGlobal {\n+  r?: DehydratedRouter",
        "comment_created_at": "2025-07-09T05:50:26+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "While it makes sense for the `matches` to have keys be shortened (i.e. `i`, `b`, `l`, etc.), I think these single callers may benefit from just being left with having descriptive names to represent their purpose (i.e. `router/dehydratedRouter`, `close`, `whatever_v_is`).",
        "pr_file_module": null
      },
      {
        "comment_id": "2198821293",
        "repo_full_name": "TanStack/router",
        "pr_number": 4600,
        "pr_file": "packages/router-core/src/ssr/ssr-client.ts",
        "discussion_id": "2194079287",
        "commented_code": "@@ -1,113 +1,77 @@\n import invariant from 'tiny-invariant'\n-import { isPlainObject } from '../utils'\n-import { tsrSerializer } from '../serializer'\n-import type { DeferredPromiseState } from '../defer'\n-import type { MakeRouteMatch } from '../Matches'\n-import type { AnyRouter, ControllablePromise } from '../router'\n+import type { AnyRouteMatch, MakeRouteMatch } from '../Matches'\n+import type { AnyRouter } from '../router'\n import type { Manifest } from '../manifest'\n import type { RouteContextOptions } from '../route'\n+import type { GLOBAL_TSR } from './ssr-server'\n \n declare global {\n   interface Window {\n-    __TSR_SSR__?: TsrSsrGlobal\n+    [GLOBAL_TSR]?: TsrSsrGlobal\n   }\n }\n \n-export interface TsrSsrGlobal {\n-  matches: Array<SsrMatch>\n-  streamedValues: Record<\n-    string,\n-    {\n-      value: any\n-      parsed: any\n+declare module '../router' {\n+  interface RouterEvents {\n+    onStreamedValue: {\n+      type: 'onStreamedValue'\n+      key: string\n     }\n-  >\n-  cleanScripts: () => void\n-  dehydrated?: any\n-  initMatch: (match: SsrMatch) => void\n-  resolvePromise: (opts: {\n-    matchId: string\n-    id: number\n-    promiseState: DeferredPromiseState<any>\n-  }) => void\n-  injectChunk: (opts: { matchId: string; id: number; chunk: string }) => void\n-  closeStream: (opts: { matchId: string; id: number }) => void\n-}\n-\n-export interface SsrMatch {\n-  id: string\n-  __beforeLoadContext: string\n-  loaderData?: string\n-  error?: string\n-  extracted?: Array<ClientExtractedEntry>\n-  updatedAt: MakeRouteMatch['updatedAt']\n-  status: MakeRouteMatch['status']\n-  ssr?: boolean | 'data-only'\n-}\n-\n-export type ClientExtractedEntry =\n-  | ClientExtractedStream\n-  | ClientExtractedPromise\n-\n-export interface ClientExtractedPromise extends ClientExtractedBaseEntry {\n-  type: 'promise'\n-  value?: ControllablePromise<any>\n+  }\n }\n-\n-export interface ClientExtractedStream extends ClientExtractedBaseEntry {\n-  type: 'stream'\n-  value?: ReadableStream & { controller?: ReadableStreamDefaultController }\n+export interface TsrSsrGlobal {\n+  r?: DehydratedRouter",
        "comment_created_at": "2025-07-10T21:50:09+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "renamed r to router, v is gone\r\nadded a comment to c ( the cleanup function), this is called per script injection and thus benefits from a short name",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1947556335",
    "pr_number": 3355,
    "pr_file": "packages/router-plugin/src/core/config.ts",
    "created_at": "2025-02-08T10:08:56+00:00",
    "commented_code": "configSchema as generatorConfigSchema,\n   getConfig as getGeneratorConfig,\n } from '@tanstack/router-generator'\n+import { splitRouteIdentNodes } from './constants'\n+import type { CodeSplitGroupings } from './constants'\n+\n+export const splitGroupingsSchema = z\n+  .array(z.array(z.enum(splitRouteIdentNodes)), {\n+    message:\n+      \"  Must be an Array of Arrays containing the split groupings. i.e. [['component'], ['pendingComponent'], ['errorComponent', 'notFoundComponent']]\",\n+  })\n+  .superRefine((val, ctx) => {\n+    const flattened = val.flat()\n+    const unique = [...new Set(flattened)]\n+\n+    // Elements must be unique,\n+    // ie. this shouldn't be allows [['component'], ['component', 'loader']]\n+    if (unique.length !== flattened.length) {\n+      ctx.addIssue({\n+        code: 'custom',\n+        message:\n+          \"  Split groupings must be unique and not repeated. i.e. i.e. [['component'], ['pendingComponent'], ['errorComponent', 'notFoundComponent']].\" +\n+          `\n  You input was: ${JSON.stringify(val)}.`,\n+      })\n+    }\n+  })\n+\n+export type CodeSplittingOptions = {\n+  /**\n+   * Use this function to programmatically control the code splitting behaviour\n+   * based on the `routeId` for each route.\n+   *\n+   * If you just need to change the default behaviour, you can use the `defaultBehaviour` option.\n+   * @param params\n+   */\n+  splitBehaviour?: (params: {",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1947556335",
        "repo_full_name": "TanStack/router",
        "pr_number": 3355,
        "pr_file": "packages/router-plugin/src/core/config.ts",
        "discussion_id": "1947556335",
        "commented_code": "@@ -3,9 +3,59 @@ import {\n   configSchema as generatorConfigSchema,\n   getConfig as getGeneratorConfig,\n } from '@tanstack/router-generator'\n+import { splitRouteIdentNodes } from './constants'\n+import type { CodeSplitGroupings } from './constants'\n+\n+export const splitGroupingsSchema = z\n+  .array(z.array(z.enum(splitRouteIdentNodes)), {\n+    message:\n+      \"  Must be an Array of Arrays containing the split groupings. i.e. [['component'], ['pendingComponent'], ['errorComponent', 'notFoundComponent']]\",\n+  })\n+  .superRefine((val, ctx) => {\n+    const flattened = val.flat()\n+    const unique = [...new Set(flattened)]\n+\n+    // Elements must be unique,\n+    // ie. this shouldn't be allows [['component'], ['component', 'loader']]\n+    if (unique.length !== flattened.length) {\n+      ctx.addIssue({\n+        code: 'custom',\n+        message:\n+          \"  Split groupings must be unique and not repeated. i.e. i.e. [['component'], ['pendingComponent'], ['errorComponent', 'notFoundComponent']].\" +\n+          `\\n  You input was: ${JSON.stringify(val)}.`,\n+      })\n+    }\n+  })\n+\n+export type CodeSplittingOptions = {\n+  /**\n+   * Use this function to programmatically control the code splitting behaviour\n+   * based on the `routeId` for each route.\n+   *\n+   * If you just need to change the default behaviour, you can use the `defaultBehaviour` option.\n+   * @param params\n+   */\n+  splitBehaviour?: (params: {",
        "comment_created_at": "2025-02-08T10:08:56+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "probably best to use US spelling? `behavior` without `u`",
        "pr_file_module": null
      },
      {
        "comment_id": "1947556639",
        "repo_full_name": "TanStack/router",
        "pr_number": 3355,
        "pr_file": "packages/router-plugin/src/core/config.ts",
        "discussion_id": "1947556335",
        "commented_code": "@@ -3,9 +3,59 @@ import {\n   configSchema as generatorConfigSchema,\n   getConfig as getGeneratorConfig,\n } from '@tanstack/router-generator'\n+import { splitRouteIdentNodes } from './constants'\n+import type { CodeSplitGroupings } from './constants'\n+\n+export const splitGroupingsSchema = z\n+  .array(z.array(z.enum(splitRouteIdentNodes)), {\n+    message:\n+      \"  Must be an Array of Arrays containing the split groupings. i.e. [['component'], ['pendingComponent'], ['errorComponent', 'notFoundComponent']]\",\n+  })\n+  .superRefine((val, ctx) => {\n+    const flattened = val.flat()\n+    const unique = [...new Set(flattened)]\n+\n+    // Elements must be unique,\n+    // ie. this shouldn't be allows [['component'], ['component', 'loader']]\n+    if (unique.length !== flattened.length) {\n+      ctx.addIssue({\n+        code: 'custom',\n+        message:\n+          \"  Split groupings must be unique and not repeated. i.e. i.e. [['component'], ['pendingComponent'], ['errorComponent', 'notFoundComponent']].\" +\n+          `\\n  You input was: ${JSON.stringify(val)}.`,\n+      })\n+    }\n+  })\n+\n+export type CodeSplittingOptions = {\n+  /**\n+   * Use this function to programmatically control the code splitting behaviour\n+   * based on the `routeId` for each route.\n+   *\n+   * If you just need to change the default behaviour, you can use the `defaultBehaviour` option.\n+   * @param params\n+   */\n+  splitBehaviour?: (params: {",
        "comment_created_at": "2025-02-08T10:10:59+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Could you apply that change while doing the type-safe `routeId` stuff?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1911546440",
    "pr_number": 3140,
    "pr_file": "packages/react-router/src/transformer.ts",
    "created_at": "2025-01-10T22:18:09+00:00",
    "commented_code": "},\n }\n \n-const createTransformer = <T extends string>(\n-  key: T,\n-  check: (value: any) => boolean,\n-  toValue: (value: any) => any = (v) => v,\n-  fromValue: (value: any) => any = (v) => v,\n+const createTransformer = <TKey extends string, TFrom, TTo>(\n+  key: TKey,\n+  check: (value: any) => value is TFrom,\n+  toValue: (value: TFrom) => TTo = (v) => v as never,",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1911546440",
        "repo_full_name": "TanStack/router",
        "pr_number": 3140,
        "pr_file": "packages/react-router/src/transformer.ts",
        "discussion_id": "1911546440",
        "commented_code": "@@ -80,11 +80,11 @@ export const defaultTransformer: RouterTransformer = {\n   },\n }\n \n-const createTransformer = <T extends string>(\n-  key: T,\n-  check: (value: any) => boolean,\n-  toValue: (value: any) => any = (v) => v,\n-  fromValue: (value: any) => any = (v) => v,\n+const createTransformer = <TKey extends string, TFrom, TTo>(\n+  key: TKey,\n+  check: (value: any) => value is TFrom,\n+  toValue: (value: TFrom) => TTo = (v) => v as never,",
        "comment_created_at": "2025-01-10T22:18:09+00:00",
        "comment_author": "EskiMojo14",
        "comment_body": "these being optional seems odd - they're used in all of the current transformers, and I can't think of a situation where i'd want one and not the other, or neither",
        "pr_file_module": null
      },
      {
        "comment_id": "1912495558",
        "repo_full_name": "TanStack/router",
        "pr_number": 3140,
        "pr_file": "packages/react-router/src/transformer.ts",
        "discussion_id": "1911546440",
        "commented_code": "@@ -80,11 +80,11 @@ export const defaultTransformer: RouterTransformer = {\n   },\n }\n \n-const createTransformer = <T extends string>(\n-  key: T,\n-  check: (value: any) => boolean,\n-  toValue: (value: any) => any = (v) => v,\n-  fromValue: (value: any) => any = (v) => v,\n+const createTransformer = <TKey extends string, TFrom, TTo>(\n+  key: TKey,\n+  check: (value: any) => value is TFrom,\n+  toValue: (value: TFrom) => TTo = (v) => v as never,",
        "comment_created_at": "2025-01-12T17:16:49+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "cc @chorobin @schiller-manuel ",
        "pr_file_module": null
      },
      {
        "comment_id": "1912535741",
        "repo_full_name": "TanStack/router",
        "pr_number": 3140,
        "pr_file": "packages/react-router/src/transformer.ts",
        "discussion_id": "1911546440",
        "commented_code": "@@ -80,11 +80,11 @@ export const defaultTransformer: RouterTransformer = {\n   },\n }\n \n-const createTransformer = <T extends string>(\n-  key: T,\n-  check: (value: any) => boolean,\n-  toValue: (value: any) => any = (v) => v,\n-  fromValue: (value: any) => any = (v) => v,\n+const createTransformer = <TKey extends string, TFrom, TTo>(\n+  key: TKey,\n+  check: (value: any) => value is TFrom,\n+  toValue: (value: TFrom) => TTo = (v) => v as never,",
        "comment_created_at": "2025-01-12T20:59:26+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "Can you please choose different names than `TFrom` and `TTo` ? those are usually used in the navigation API for the `from` / `to` props\r\n\r\naside from that, LGTM",
        "pr_file_module": null
      },
      {
        "comment_id": "1912536670",
        "repo_full_name": "TanStack/router",
        "pr_number": 3140,
        "pr_file": "packages/react-router/src/transformer.ts",
        "discussion_id": "1911546440",
        "commented_code": "@@ -80,11 +80,11 @@ export const defaultTransformer: RouterTransformer = {\n   },\n }\n \n-const createTransformer = <T extends string>(\n-  key: T,\n-  check: (value: any) => boolean,\n-  toValue: (value: any) => any = (v) => v,\n-  fromValue: (value: any) => any = (v) => v,\n+const createTransformer = <TKey extends string, TFrom, TTo>(\n+  key: TKey,\n+  check: (value: any) => value is TFrom,\n+  toValue: (value: TFrom) => TTo = (v) => v as never,",
        "comment_created_at": "2025-01-12T21:04:34+00:00",
        "comment_author": "EskiMojo14",
        "comment_body": "renamed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1747827194",
    "pr_number": 2277,
    "pr_file": "examples/react/start-supabase-basic/app/utils/supabase.ts",
    "created_at": "2024-09-07T00:03:57+00:00",
    "commented_code": "+import { parseCookies, setCookie } from 'vinxi/http'\n+import { createServerClient } from '@supabase/ssr'\n+\n+export function useSupabase() {",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1747827194",
        "repo_full_name": "TanStack/router",
        "pr_number": 2277,
        "pr_file": "examples/react/start-supabase-basic/app/utils/supabase.ts",
        "discussion_id": "1747827194",
        "commented_code": "@@ -0,0 +1,25 @@\n+import { parseCookies, setCookie } from 'vinxi/http'\n+import { createServerClient } from '@supabase/ssr'\n+\n+export function useSupabase() {",
        "comment_created_at": "2024-09-07T00:03:57+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Please rename this util so it doesn't clash with the naming of React hooks. Maybe `getSupabaseServer`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1747865418",
        "repo_full_name": "TanStack/router",
        "pr_number": 2277,
        "pr_file": "examples/react/start-supabase-basic/app/utils/supabase.ts",
        "discussion_id": "1747827194",
        "commented_code": "@@ -0,0 +1,25 @@\n+import { parseCookies, setCookie } from 'vinxi/http'\n+import { createServerClient } from '@supabase/ssr'\n+\n+export function useSupabase() {",
        "comment_created_at": "2024-09-07T02:03:27+00:00",
        "comment_author": "ridwansameer",
        "comment_body": "Oops! Was trying to follow the previous example but that was indeed returning a hook. Changed!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1706552531",
    "pr_number": 2100,
    "pr_file": "packages/router-generator/src/config.ts",
    "created_at": "2024-08-07T07:53:36+00:00",
    "commented_code": "disableTypes: z.boolean().optional().default(false),\n   addExtensions: z.boolean().optional().default(false),\n   disableLogging: z.boolean().optional().default(false),\n+  generateManifest: z.boolean().optional().default(true),",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1706552531",
        "repo_full_name": "TanStack/router",
        "pr_number": 2100,
        "pr_file": "packages/router-generator/src/config.ts",
        "discussion_id": "1706552531",
        "commented_code": "@@ -13,6 +13,7 @@ export const configSchema = z.object({\n   disableTypes: z.boolean().optional().default(false),\n   addExtensions: z.boolean().optional().default(false),\n   disableLogging: z.boolean().optional().default(false),\n+  generateManifest: z.boolean().optional().default(true),",
        "comment_created_at": "2024-08-07T07:53:36+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "I believe this should follow the naming above and should be `disableManifestGeneration` or something to that effect.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1632211212",
    "pr_number": 1713,
    "pr_file": "packages/react-router/src/router.ts",
    "created_at": "2024-06-09T08:42:38+00:00",
    "commented_code": "route,\n                 }\n \n-                const fetch = async () => {\n+                const fetchAndResolveInLoaderLifetime = async () => {",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1632211212",
        "repo_full_name": "TanStack/router",
        "pr_number": 1713,
        "pr_file": "packages/react-router/src/router.ts",
        "discussion_id": "1632211212",
        "commented_code": "@@ -1833,7 +1837,7 @@ export class Router<\n                   route,\n                 }\n \n-                const fetch = async () => {\n+                const fetchAndResolveInLoaderLifetime = async () => {",
        "comment_created_at": "2024-06-09T08:42:38+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Better naming and to not compete with `fetch`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1552904749",
    "pr_number": 1425,
    "pr_file": "packages/react-router/src/route.ts",
    "created_at": "2024-04-05T04:55:21+00:00",
    "commented_code": "`Route cannot have both an 'id' and a 'path' option.`,\n     )\n     ;(this as any).$$typeof = Symbol.for('react.memo')\n+\n+    const paths = this.deriveProperties()",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1552904749",
        "repo_full_name": "TanStack/router",
        "pr_number": 1425,
        "pr_file": "packages/react-router/src/route.ts",
        "discussion_id": "1552904749",
        "commented_code": "@@ -668,6 +667,15 @@ export class Route<\n       `Route cannot have both an 'id' and a 'path' option.`,\n     )\n     ;(this as any).$$typeof = Symbol.for('react.memo')\n+\n+    const paths = this.deriveProperties()",
        "comment_created_at": "2024-04-05T04:55:21+00:00",
        "comment_author": "happycollision",
        "comment_body": "Maybe `paths` wasn't the best name here. `derived` is probably better.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1525342971",
    "pr_number": 1310,
    "pr_file": "packages/router-generator/src/config.ts",
    "created_at": "2024-03-14T18:40:19+00:00",
    "commented_code": "export const configSchema = z.object({\n   routeFilePrefix: z.string().optional(),\n   routeFileIgnorePrefix: z.string().optional().default('-'),\n+  routeFileIgnoreType: z.string().optional(),",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1525342971",
        "repo_full_name": "TanStack/router",
        "pr_number": 1310,
        "pr_file": "packages/router-generator/src/config.ts",
        "discussion_id": "1525342971",
        "commented_code": "@@ -5,6 +5,7 @@ import { z } from 'zod'\n export const configSchema = z.object({\n   routeFilePrefix: z.string().optional(),\n   routeFileIgnorePrefix: z.string().optional().default('-'),\n+  routeFileIgnoreType: z.string().optional(),",
        "comment_created_at": "2024-03-14T18:40:19+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "naming should be improved, how about `routeFileIgnorePattern`?",
        "pr_file_module": null
      }
    ]
  }
]