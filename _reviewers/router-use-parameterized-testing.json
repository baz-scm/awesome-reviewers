[
  {
    "discussion_id": "1978398565",
    "pr_number": 3644,
    "pr_file": "packages/history/tests/createHashHistory.test.ts",
    "created_at": "2025-03-03T23:52:33+00:00",
    "commented_code": "+import { describe, expect, test } from 'vitest'\n+\n+import { createHashHistory } from '../src'\n+\n+describe('createHashHistory', () => {\n+  test('parseLocation', () => {",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1978398565",
        "repo_full_name": "TanStack/router",
        "pr_number": 3644,
        "pr_file": "packages/history/tests/createHashHistory.test.ts",
        "discussion_id": "1978398565",
        "commented_code": "@@ -0,0 +1,24 @@\n+import { describe, expect, test } from 'vitest'\n+\n+import { createHashHistory } from '../src'\n+\n+describe('createHashHistory', () => {\n+  test('parseLocation', () => {",
        "comment_created_at": "2025-03-03T23:52:33+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Please break this one large test function into individual ones.\r\n\r\n```ts\r\ndescribe('createHashHistory', () => {\r\n\tdescribe('parseLocation',  () => {\r\n\t\ttest('...', () => {})\r\n\r\n\t\ttest('...', () => {})\r\n\r\n\t\t// ...\r\n\t})\r\n})\r\n```\r\n\r\nMaybe add some into a matrix where it checks both \"on load's `parseLocation` call\" and \"after pushState's `parseLocation`\" values.",
        "pr_file_module": null
      },
      {
        "comment_id": "1978412743",
        "repo_full_name": "TanStack/router",
        "pr_number": 3644,
        "pr_file": "packages/history/tests/createHashHistory.test.ts",
        "discussion_id": "1978398565",
        "commented_code": "@@ -0,0 +1,24 @@\n+import { describe, expect, test } from 'vitest'\n+\n+import { createHashHistory } from '../src'\n+\n+describe('createHashHistory', () => {\n+  test('parseLocation', () => {",
        "comment_created_at": "2025-03-04T00:12:59+00:00",
        "comment_author": "ohpyupi",
        "comment_body": "Sure. I'll break one test into smaller ones. Can you elaborate more on the other suggestion \"add some into a matrix ...\". I don't think I understand that.",
        "pr_file_module": null
      },
      {
        "comment_id": "1978436339",
        "repo_full_name": "TanStack/router",
        "pr_number": 3644,
        "pr_file": "packages/history/tests/createHashHistory.test.ts",
        "discussion_id": "1978398565",
        "commented_code": "@@ -0,0 +1,24 @@\n+import { describe, expect, test } from 'vitest'\n+\n+import { createHashHistory } from '../src'\n+\n+describe('createHashHistory', () => {\n+  test('parseLocation', () => {",
        "comment_created_at": "2025-03-04T00:48:08+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "Maybe the word matrix wasn't the right word here. Essentially, what I'm talking about is checking the behaviours in both \"on load\" and \"on navigate\" scenarios.\r\n\r\nSomething like this for example.\r\n\r\n```ts\r\ndescribe.each([\r\n\t['/', { pathname: '', search: '' }],\r\n\t// ...\r\n])('check for %i', ([path, exp]) => {\r\n\t// check if parseLocation works in initial load\r\n\ttest(`onLoad with ${path}`, () => {\r\n\t\twindow.location.href=path\r\n\t\tconst history = createHashHistory()\r\n\t\texpect(...).toBe(exp['...'])\r\n\t})\r\n\r\n\t// check if parseLocation works after navigate\r\n\ttest(`onNavigate with ${path}`, () => {\r\n\t\tconst history = createHashHistory()\r\n\t\twindow.history.pushState({}, null, path)\r\n\t\texpect(...).toBe(exp['...'])\r\n\t})\r\n})\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1978439293",
        "repo_full_name": "TanStack/router",
        "pr_number": 3644,
        "pr_file": "packages/history/tests/createHashHistory.test.ts",
        "discussion_id": "1978398565",
        "commented_code": "@@ -0,0 +1,24 @@\n+import { describe, expect, test } from 'vitest'\n+\n+import { createHashHistory } from '../src'\n+\n+describe('createHashHistory', () => {\n+  test('parseLocation', () => {",
        "comment_created_at": "2025-03-04T00:52:21+00:00",
        "comment_author": "ohpyupi",
        "comment_body": "Oh okay, thanks for the explanation. Sure will work on that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1978472753",
    "pr_number": 3644,
    "pr_file": "packages/history/tests/createHashHistory.test.ts",
    "created_at": "2025-03-04T01:34:53+00:00",
    "commented_code": "+import { describe, expect, test } from 'vitest'\n+\n+import { createHashHistory } from '../src'\n+\n+describe('createHashHistory', () => {\n+    describe('parseLocation', () => {\n+        describe.each([\n+            ['/', {pathname: '/', search: ''}, 'neither search params nor hash'],\n+            ['/#hello', {pathname: '/hello', search: ''}, 'hash present, no search params'],\n+            ['/?search=params', {pathname: '/', search: '?search=params'}, 'search params present, no hash'],\n+            ['/#hello?search=params', {pathname: '/hello', search: '?search=params'}, 'both hash and search params present, in that order'],\n+            ['/?search=params#hello', {pathname: '/hello', search: '?search=params'}, 'both search params and hash present, in that order'],\n+        ])('check for %s', (...[path, exp, desc]) => {\n+            test(`onLoad with ${path} (${desc})`, () => {\n+                const mockWindow = {\n+                    addEventListener: window.addEventListener,\n+                    history: window.history,\n+                    location: new URL(`https://www.example.com${path}`)",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1978472753",
        "repo_full_name": "TanStack/router",
        "pr_number": 3644,
        "pr_file": "packages/history/tests/createHashHistory.test.ts",
        "discussion_id": "1978472753",
        "commented_code": "@@ -0,0 +1,32 @@\n+import { describe, expect, test } from 'vitest'\n+\n+import { createHashHistory } from '../src'\n+\n+describe('createHashHistory', () => {\n+    describe('parseLocation', () => {\n+        describe.each([\n+            ['/', {pathname: '/', search: ''}, 'neither search params nor hash'],\n+            ['/#hello', {pathname: '/hello', search: ''}, 'hash present, no search params'],\n+            ['/?search=params', {pathname: '/', search: '?search=params'}, 'search params present, no hash'],\n+            ['/#hello?search=params', {pathname: '/hello', search: '?search=params'}, 'both hash and search params present, in that order'],\n+            ['/?search=params#hello', {pathname: '/hello', search: '?search=params'}, 'both search params and hash present, in that order'],\n+        ])('check for %s', (...[path, exp, desc]) => {\n+            test(`onLoad with ${path} (${desc})`, () => {\n+                const mockWindow = {\n+                    addEventListener: window.addEventListener,\n+                    history: window.history,\n+                    location: new URL(`https://www.example.com${path}`)",
        "comment_created_at": "2025-03-04T01:34:53+00:00",
        "comment_author": "ohpyupi",
        "comment_body": "@SeanCassiere The search params update triggers the page refresh, but such functionality isn't implemented in JSDOM, and it just throws an error. Thus, it requires mocking over the location.\r\n\r\nI found [this stackover flow post](https://stackoverflow.com/questions/54021037/how-to-mock-window-location-href-with-jest-vuejs) and took its idea to use the URL API to mock the location API. Please let me know if you have some concerns or other better ideas for it. Thanks.",
        "pr_file_module": null
      },
      {
        "comment_id": "1978482496",
        "repo_full_name": "TanStack/router",
        "pr_number": 3644,
        "pr_file": "packages/history/tests/createHashHistory.test.ts",
        "discussion_id": "1978472753",
        "commented_code": "@@ -0,0 +1,32 @@\n+import { describe, expect, test } from 'vitest'\n+\n+import { createHashHistory } from '../src'\n+\n+describe('createHashHistory', () => {\n+    describe('parseLocation', () => {\n+        describe.each([\n+            ['/', {pathname: '/', search: ''}, 'neither search params nor hash'],\n+            ['/#hello', {pathname: '/hello', search: ''}, 'hash present, no search params'],\n+            ['/?search=params', {pathname: '/', search: '?search=params'}, 'search params present, no hash'],\n+            ['/#hello?search=params', {pathname: '/hello', search: '?search=params'}, 'both hash and search params present, in that order'],\n+            ['/?search=params#hello', {pathname: '/hello', search: '?search=params'}, 'both search params and hash present, in that order'],\n+        ])('check for %s', (...[path, exp, desc]) => {\n+            test(`onLoad with ${path} (${desc})`, () => {\n+                const mockWindow = {\n+                    addEventListener: window.addEventListener,\n+                    history: window.history,\n+                    location: new URL(`https://www.example.com${path}`)",
        "comment_created_at": "2025-03-04T01:50:00+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "It might just be missing the correct setup for the testing env.\r\n\r\nCould you refactor to using `window.location` and then ping me? I'll fix up the deps and get the testing environment working.\r\n\r\nEdit: the correct testing environment should already be available in `packages/react-router`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1978502836",
        "repo_full_name": "TanStack/router",
        "pr_number": 3644,
        "pr_file": "packages/history/tests/createHashHistory.test.ts",
        "discussion_id": "1978472753",
        "commented_code": "@@ -0,0 +1,32 @@\n+import { describe, expect, test } from 'vitest'\n+\n+import { createHashHistory } from '../src'\n+\n+describe('createHashHistory', () => {\n+    describe('parseLocation', () => {\n+        describe.each([\n+            ['/', {pathname: '/', search: ''}, 'neither search params nor hash'],\n+            ['/#hello', {pathname: '/hello', search: ''}, 'hash present, no search params'],\n+            ['/?search=params', {pathname: '/', search: '?search=params'}, 'search params present, no hash'],\n+            ['/#hello?search=params', {pathname: '/hello', search: '?search=params'}, 'both hash and search params present, in that order'],\n+            ['/?search=params#hello', {pathname: '/hello', search: '?search=params'}, 'both search params and hash present, in that order'],\n+        ])('check for %s', (...[path, exp, desc]) => {\n+            test(`onLoad with ${path} (${desc})`, () => {\n+                const mockWindow = {\n+                    addEventListener: window.addEventListener,\n+                    history: window.history,\n+                    location: new URL(`https://www.example.com${path}`)",
        "comment_created_at": "2025-03-04T02:21:11+00:00",
        "comment_author": "ohpyupi",
        "comment_body": "So the JSDOM didn't implement the navigation functionality by design (see [here](https://github.com/jsdom/jsdom/issues/2112)).\r\n\r\nBasically, the `window` object is an object mocked by JSDOM because it exists only in the browser environment. Are you saying that the such mocking exists under the `packages/react-router`? For all test cases under that package, it uses `history` object instead of window.location. Could you point me to the code block if I missed it?",
        "pr_file_module": null
      },
      {
        "comment_id": "1978537507",
        "repo_full_name": "TanStack/router",
        "pr_number": 3644,
        "pr_file": "packages/history/tests/createHashHistory.test.ts",
        "discussion_id": "1978472753",
        "commented_code": "@@ -0,0 +1,32 @@\n+import { describe, expect, test } from 'vitest'\n+\n+import { createHashHistory } from '../src'\n+\n+describe('createHashHistory', () => {\n+    describe('parseLocation', () => {\n+        describe.each([\n+            ['/', {pathname: '/', search: ''}, 'neither search params nor hash'],\n+            ['/#hello', {pathname: '/hello', search: ''}, 'hash present, no search params'],\n+            ['/?search=params', {pathname: '/', search: '?search=params'}, 'search params present, no hash'],\n+            ['/#hello?search=params', {pathname: '/hello', search: '?search=params'}, 'both hash and search params present, in that order'],\n+            ['/?search=params#hello', {pathname: '/hello', search: '?search=params'}, 'both search params and hash present, in that order'],\n+        ])('check for %s', (...[path, exp, desc]) => {\n+            test(`onLoad with ${path} (${desc})`, () => {\n+                const mockWindow = {\n+                    addEventListener: window.addEventListener,\n+                    history: window.history,\n+                    location: new URL(`https://www.example.com${path}`)",
        "comment_created_at": "2025-03-04T03:12:03+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "You are right, my mistake. I was thinking about this https://github.com/TanStack/router/blob/35c7c495f38f89675a5570a9b4fa35e63f0a3525/packages/react-router/tests/link.test.tsx#L51\r\n\r\nIn that case, don't mock `window`, just do a `window.(push/replace)State` before calling `createHashHistory` for the \"on-load\" tests.",
        "pr_file_module": null
      },
      {
        "comment_id": "1978570447",
        "repo_full_name": "TanStack/router",
        "pr_number": 3644,
        "pr_file": "packages/history/tests/createHashHistory.test.ts",
        "discussion_id": "1978472753",
        "commented_code": "@@ -0,0 +1,32 @@\n+import { describe, expect, test } from 'vitest'\n+\n+import { createHashHistory } from '../src'\n+\n+describe('createHashHistory', () => {\n+    describe('parseLocation', () => {\n+        describe.each([\n+            ['/', {pathname: '/', search: ''}, 'neither search params nor hash'],\n+            ['/#hello', {pathname: '/hello', search: ''}, 'hash present, no search params'],\n+            ['/?search=params', {pathname: '/', search: '?search=params'}, 'search params present, no hash'],\n+            ['/#hello?search=params', {pathname: '/hello', search: '?search=params'}, 'both hash and search params present, in that order'],\n+            ['/?search=params#hello', {pathname: '/hello', search: '?search=params'}, 'both search params and hash present, in that order'],\n+        ])('check for %s', (...[path, exp, desc]) => {\n+            test(`onLoad with ${path} (${desc})`, () => {\n+                const mockWindow = {\n+                    addEventListener: window.addEventListener,\n+                    history: window.history,\n+                    location: new URL(`https://www.example.com${path}`)",
        "comment_created_at": "2025-03-04T04:00:32+00:00",
        "comment_author": "ohpyupi",
        "comment_body": "Alright, I've updated the PR. Please take a look when you get some time. Thanks.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1773987911",
    "pr_number": 2401,
    "pr_file": "packages/react-router/tests/path.test.ts",
    "created_at": "2024-09-24T19:46:29+00:00",
    "commented_code": "})\n   })\n })\n+\n+describe('getLastPathSegment', () => {\n+  ;[\n+    {\n+      name: 'should return the last segment with leading slash when path ends with a slash',\n+      path: '/_protected/test/',\n+      expected: '/test',\n+    },\n+    {\n+      name: 'should return the last segment with leading slash when path does not end with a slash',\n+      path: '/_protected/test',\n+      expected: '/test',\n+    },\n+    {\n+      name: 'should return the last segment in a longer path with trailing slash',\n+      path: '/another/path/example/',\n+      expected: '/example',\n+    },\n+    {\n+      name: 'should return the last segment in a longer path without trailing slash',\n+      path: '/another/path/example',\n+      expected: '/example',\n+    },\n+    {\n+      name: 'should return the only segment with leading slash',\n+      path: '/single',\n+      expected: '/single',\n+    },\n+    {\n+      name: 'should return the last segment with leading slash in a nested path',\n+      path: '/trailing/slash/',\n+      expected: '/slash',\n+    },\n+    {\n+      name: 'should return undefined for root path',\n+      path: '/',\n+      expected: undefined,\n+    },\n+    {\n+      name: 'should return undefined for empty string',\n+      path: '',\n+      expected: undefined,\n+    },\n+    {\n+      name: 'should handle paths with numbers correctly',\n+      path: '/users/123/',\n+      expected: '/123',\n+    },\n+    {\n+      name: 'should handle paths with special characters',\n+      path: '/path/with-special_chars!',\n+      expected: '/with-special_chars!',\n+    },\n+    {\n+      name: 'should handle paths with multiple special characters and trailing slash',\n+      path: '/path/with/$pecial-Chars123/',\n+      expected: '/$pecial-Chars123',\n+    },\n+    {\n+      name: 'should return undefined when there is no segment after the last slash',\n+      path: '/path/to/directory//',\n+      expected: undefined,\n+    },\n+    {\n+      name: 'should handle paths without leading slash',\n+      path: 'no/leading/slash',\n+      expected: '/slash',\n+    },\n+    {\n+      name: 'should handle single slash',\n+      path: '/',\n+      expected: undefined,\n+    },\n+    {\n+      name: 'should handle path with multiple trailing slashes',\n+      path: '/multiple/trailing/slashes///',\n+      expected: undefined,\n+    },\n+  ].forEach(({ name, path, expected }) => {\n+    it(name, () => {",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1773987911",
        "repo_full_name": "TanStack/router",
        "pr_number": 2401,
        "pr_file": "packages/react-router/tests/path.test.ts",
        "discussion_id": "1773987911",
        "commented_code": "@@ -276,3 +277,88 @@ describe('interpolatePath', () => {\n     })\n   })\n })\n+\n+describe('getLastPathSegment', () => {\n+  ;[\n+    {\n+      name: 'should return the last segment with leading slash when path ends with a slash',\n+      path: '/_protected/test/',\n+      expected: '/test',\n+    },\n+    {\n+      name: 'should return the last segment with leading slash when path does not end with a slash',\n+      path: '/_protected/test',\n+      expected: '/test',\n+    },\n+    {\n+      name: 'should return the last segment in a longer path with trailing slash',\n+      path: '/another/path/example/',\n+      expected: '/example',\n+    },\n+    {\n+      name: 'should return the last segment in a longer path without trailing slash',\n+      path: '/another/path/example',\n+      expected: '/example',\n+    },\n+    {\n+      name: 'should return the only segment with leading slash',\n+      path: '/single',\n+      expected: '/single',\n+    },\n+    {\n+      name: 'should return the last segment with leading slash in a nested path',\n+      path: '/trailing/slash/',\n+      expected: '/slash',\n+    },\n+    {\n+      name: 'should return undefined for root path',\n+      path: '/',\n+      expected: undefined,\n+    },\n+    {\n+      name: 'should return undefined for empty string',\n+      path: '',\n+      expected: undefined,\n+    },\n+    {\n+      name: 'should handle paths with numbers correctly',\n+      path: '/users/123/',\n+      expected: '/123',\n+    },\n+    {\n+      name: 'should handle paths with special characters',\n+      path: '/path/with-special_chars!',\n+      expected: '/with-special_chars!',\n+    },\n+    {\n+      name: 'should handle paths with multiple special characters and trailing slash',\n+      path: '/path/with/$pecial-Chars123/',\n+      expected: '/$pecial-Chars123',\n+    },\n+    {\n+      name: 'should return undefined when there is no segment after the last slash',\n+      path: '/path/to/directory//',\n+      expected: undefined,\n+    },\n+    {\n+      name: 'should handle paths without leading slash',\n+      path: 'no/leading/slash',\n+      expected: '/slash',\n+    },\n+    {\n+      name: 'should handle single slash',\n+      path: '/',\n+      expected: undefined,\n+    },\n+    {\n+      name: 'should handle path with multiple trailing slashes',\n+      path: '/multiple/trailing/slashes///',\n+      expected: undefined,\n+    },\n+  ].forEach(({ name, path, expected }) => {\n+    it(name, () => {",
        "comment_created_at": "2024-09-24T19:46:29+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "use `it.each` please",
        "pr_file_module": null
      },
      {
        "comment_id": "1774007364",
        "repo_full_name": "TanStack/router",
        "pr_number": 2401,
        "pr_file": "packages/react-router/tests/path.test.ts",
        "discussion_id": "1773987911",
        "commented_code": "@@ -276,3 +277,88 @@ describe('interpolatePath', () => {\n     })\n   })\n })\n+\n+describe('getLastPathSegment', () => {\n+  ;[\n+    {\n+      name: 'should return the last segment with leading slash when path ends with a slash',\n+      path: '/_protected/test/',\n+      expected: '/test',\n+    },\n+    {\n+      name: 'should return the last segment with leading slash when path does not end with a slash',\n+      path: '/_protected/test',\n+      expected: '/test',\n+    },\n+    {\n+      name: 'should return the last segment in a longer path with trailing slash',\n+      path: '/another/path/example/',\n+      expected: '/example',\n+    },\n+    {\n+      name: 'should return the last segment in a longer path without trailing slash',\n+      path: '/another/path/example',\n+      expected: '/example',\n+    },\n+    {\n+      name: 'should return the only segment with leading slash',\n+      path: '/single',\n+      expected: '/single',\n+    },\n+    {\n+      name: 'should return the last segment with leading slash in a nested path',\n+      path: '/trailing/slash/',\n+      expected: '/slash',\n+    },\n+    {\n+      name: 'should return undefined for root path',\n+      path: '/',\n+      expected: undefined,\n+    },\n+    {\n+      name: 'should return undefined for empty string',\n+      path: '',\n+      expected: undefined,\n+    },\n+    {\n+      name: 'should handle paths with numbers correctly',\n+      path: '/users/123/',\n+      expected: '/123',\n+    },\n+    {\n+      name: 'should handle paths with special characters',\n+      path: '/path/with-special_chars!',\n+      expected: '/with-special_chars!',\n+    },\n+    {\n+      name: 'should handle paths with multiple special characters and trailing slash',\n+      path: '/path/with/$pecial-Chars123/',\n+      expected: '/$pecial-Chars123',\n+    },\n+    {\n+      name: 'should return undefined when there is no segment after the last slash',\n+      path: '/path/to/directory//',\n+      expected: undefined,\n+    },\n+    {\n+      name: 'should handle paths without leading slash',\n+      path: 'no/leading/slash',\n+      expected: '/slash',\n+    },\n+    {\n+      name: 'should handle single slash',\n+      path: '/',\n+      expected: undefined,\n+    },\n+    {\n+      name: 'should handle path with multiple trailing slashes',\n+      path: '/multiple/trailing/slashes///',\n+      expected: undefined,\n+    },\n+  ].forEach(({ name, path, expected }) => {\n+    it(name, () => {",
        "comment_created_at": "2024-09-24T20:03:52+00:00",
        "comment_author": "stevenlyd",
        "comment_body": "done!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1646659619",
    "pr_number": 1787,
    "pr_file": "packages/react-router/tests/path.test.ts",
    "created_at": "2024-06-19T20:26:34+00:00",
    "commented_code": "import { describe, expect, it } from 'vitest'\n-import { exactPathTest, removeTrailingSlash } from '../src/path'\n+import { exactPathTest, removeBasepath, removeTrailingSlash } from '../src/path'\n+\n+describe('removeBasepath', () => {\n+  ;[\n+    {\n+      name: '`/` should leave pathname as-is',\n+      basepath: '/',\n+      pathname: '/path',\n+      expected: '/path',\n+    },\n+    {\n+      name: 'should return empty string if basepath is the same as pathname',\n+      basepath: '/path',\n+      pathname: '/path',\n+      expected: '',\n+    },\n+    {\n+      name: 'should remove basepath from the beginning of the pathname',\n+      basepath: '/app',\n+      pathname: '/app/path/app',\n+      expected: '/path/app',\n+    },\n+    {\n+      name: 'should remove multisegment basepath from the beginning of the pathname',\n+      basepath: '/app/new',\n+      pathname: '/app/new/path/app/new',\n+      expected: '/path/app/new',\n+    },\n+    {\n+      name: 'should remove basepath only in case it matches segments completely',\n+      basepath: '/app',\n+      pathname: '/application',\n+      expected: '/application',\n+    },\n+    {\n+      name: 'should remove multisegment basepath only in case it matches segments completely',\n+      basepath: '/app/new',\n+      pathname: '/app/new-application',\n+      expected: '/app/new-application',\n+    },\n+  ].forEach(({ name, basepath, pathname, expected }) => {",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1646659619",
        "repo_full_name": "TanStack/router",
        "pr_number": 1787,
        "pr_file": "packages/react-router/tests/path.test.ts",
        "discussion_id": "1646659619",
        "commented_code": "@@ -1,5 +1,50 @@\n import { describe, expect, it } from 'vitest'\n-import { exactPathTest, removeTrailingSlash } from '../src/path'\n+import { exactPathTest, removeBasepath, removeTrailingSlash } from '../src/path'\n+\n+describe('removeBasepath', () => {\n+  ;[\n+    {\n+      name: '`/` should leave pathname as-is',\n+      basepath: '/',\n+      pathname: '/path',\n+      expected: '/path',\n+    },\n+    {\n+      name: 'should return empty string if basepath is the same as pathname',\n+      basepath: '/path',\n+      pathname: '/path',\n+      expected: '',\n+    },\n+    {\n+      name: 'should remove basepath from the beginning of the pathname',\n+      basepath: '/app',\n+      pathname: '/app/path/app',\n+      expected: '/path/app',\n+    },\n+    {\n+      name: 'should remove multisegment basepath from the beginning of the pathname',\n+      basepath: '/app/new',\n+      pathname: '/app/new/path/app/new',\n+      expected: '/path/app/new',\n+    },\n+    {\n+      name: 'should remove basepath only in case it matches segments completely',\n+      basepath: '/app',\n+      pathname: '/application',\n+      expected: '/application',\n+    },\n+    {\n+      name: 'should remove multisegment basepath only in case it matches segments completely',\n+      basepath: '/app/new',\n+      pathname: '/app/new-application',\n+      expected: '/app/new-application',\n+    },\n+  ].forEach(({ name, basepath, pathname, expected }) => {",
        "comment_created_at": "2024-06-19T20:26:34+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "please use the `describe.each` syntax: https://vitest.dev/api/#describe-each",
        "pr_file_module": null
      },
      {
        "comment_id": "1646670229",
        "repo_full_name": "TanStack/router",
        "pr_number": 1787,
        "pr_file": "packages/react-router/tests/path.test.ts",
        "discussion_id": "1646659619",
        "commented_code": "@@ -1,5 +1,50 @@\n import { describe, expect, it } from 'vitest'\n-import { exactPathTest, removeTrailingSlash } from '../src/path'\n+import { exactPathTest, removeBasepath, removeTrailingSlash } from '../src/path'\n+\n+describe('removeBasepath', () => {\n+  ;[\n+    {\n+      name: '`/` should leave pathname as-is',\n+      basepath: '/',\n+      pathname: '/path',\n+      expected: '/path',\n+    },\n+    {\n+      name: 'should return empty string if basepath is the same as pathname',\n+      basepath: '/path',\n+      pathname: '/path',\n+      expected: '',\n+    },\n+    {\n+      name: 'should remove basepath from the beginning of the pathname',\n+      basepath: '/app',\n+      pathname: '/app/path/app',\n+      expected: '/path/app',\n+    },\n+    {\n+      name: 'should remove multisegment basepath from the beginning of the pathname',\n+      basepath: '/app/new',\n+      pathname: '/app/new/path/app/new',\n+      expected: '/path/app/new',\n+    },\n+    {\n+      name: 'should remove basepath only in case it matches segments completely',\n+      basepath: '/app',\n+      pathname: '/application',\n+      expected: '/application',\n+    },\n+    {\n+      name: 'should remove multisegment basepath only in case it matches segments completely',\n+      basepath: '/app/new',\n+      pathname: '/app/new-application',\n+      expected: '/app/new-application',\n+    },\n+  ].forEach(({ name, basepath, pathname, expected }) => {",
        "comment_created_at": "2024-06-19T20:45:01+00:00",
        "comment_author": "xobotyi",
        "comment_body": "According vitest's docs it will be a misuse of `each` since it is designed for `more than one test that depends on the same data` which is not true in this case since written is simply a table-test.\r\nBut okay.",
        "pr_file_module": null
      },
      {
        "comment_id": "1646673095",
        "repo_full_name": "TanStack/router",
        "pr_number": 1787,
        "pr_file": "packages/react-router/tests/path.test.ts",
        "discussion_id": "1646659619",
        "commented_code": "@@ -1,5 +1,50 @@\n import { describe, expect, it } from 'vitest'\n-import { exactPathTest, removeTrailingSlash } from '../src/path'\n+import { exactPathTest, removeBasepath, removeTrailingSlash } from '../src/path'\n+\n+describe('removeBasepath', () => {\n+  ;[\n+    {\n+      name: '`/` should leave pathname as-is',\n+      basepath: '/',\n+      pathname: '/path',\n+      expected: '/path',\n+    },\n+    {\n+      name: 'should return empty string if basepath is the same as pathname',\n+      basepath: '/path',\n+      pathname: '/path',\n+      expected: '',\n+    },\n+    {\n+      name: 'should remove basepath from the beginning of the pathname',\n+      basepath: '/app',\n+      pathname: '/app/path/app',\n+      expected: '/path/app',\n+    },\n+    {\n+      name: 'should remove multisegment basepath from the beginning of the pathname',\n+      basepath: '/app/new',\n+      pathname: '/app/new/path/app/new',\n+      expected: '/path/app/new',\n+    },\n+    {\n+      name: 'should remove basepath only in case it matches segments completely',\n+      basepath: '/app',\n+      pathname: '/application',\n+      expected: '/application',\n+    },\n+    {\n+      name: 'should remove multisegment basepath only in case it matches segments completely',\n+      basepath: '/app/new',\n+      pathname: '/app/new-application',\n+      expected: '/app/new-application',\n+    },\n+  ].forEach(({ name, basepath, pathname, expected }) => {",
        "comment_created_at": "2024-06-19T20:50:06+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "then `test.each`? https://vitest.dev/api/#test-each",
        "pr_file_module": null
      },
      {
        "comment_id": "1646677942",
        "repo_full_name": "TanStack/router",
        "pr_number": 1787,
        "pr_file": "packages/react-router/tests/path.test.ts",
        "discussion_id": "1646659619",
        "commented_code": "@@ -1,5 +1,50 @@\n import { describe, expect, it } from 'vitest'\n-import { exactPathTest, removeTrailingSlash } from '../src/path'\n+import { exactPathTest, removeBasepath, removeTrailingSlash } from '../src/path'\n+\n+describe('removeBasepath', () => {\n+  ;[\n+    {\n+      name: '`/` should leave pathname as-is',\n+      basepath: '/',\n+      pathname: '/path',\n+      expected: '/path',\n+    },\n+    {\n+      name: 'should return empty string if basepath is the same as pathname',\n+      basepath: '/path',\n+      pathname: '/path',\n+      expected: '',\n+    },\n+    {\n+      name: 'should remove basepath from the beginning of the pathname',\n+      basepath: '/app',\n+      pathname: '/app/path/app',\n+      expected: '/path/app',\n+    },\n+    {\n+      name: 'should remove multisegment basepath from the beginning of the pathname',\n+      basepath: '/app/new',\n+      pathname: '/app/new/path/app/new',\n+      expected: '/path/app/new',\n+    },\n+    {\n+      name: 'should remove basepath only in case it matches segments completely',\n+      basepath: '/app',\n+      pathname: '/application',\n+      expected: '/application',\n+    },\n+    {\n+      name: 'should remove multisegment basepath only in case it matches segments completely',\n+      basepath: '/app/new',\n+      pathname: '/app/new-application',\n+      expected: '/app/new-application',\n+    },\n+  ].forEach(({ name, basepath, pathname, expected }) => {",
        "comment_created_at": "2024-06-19T20:55:20+00:00",
        "comment_author": "xobotyi",
        "comment_body": "This will do)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1530086481",
    "pr_number": 1337,
    "pr_file": "packages/router-generator/tests/generator.test.ts",
    "created_at": "2024-03-19T10:19:37+00:00",
    "commented_code": "+import fs from 'fs/promises'\n+import { describe, it, expect } from 'vitest'\n+\n+import { generator, getConfig, type Config } from '../src'\n+\n+function getFolderDir(folder: string) {\n+  return process.cwd() + `/tests/${folder}`\n+}\n+\n+async function setupConfig(folder: string) {\n+  const dir = getFolderDir(folder)\n+  const config = await getConfig({\n+    disableLogging: true,\n+    routesDirectory: dir + '/routes',\n+    generatedRouteTree: dir + '/routeTree.gen.ts',\n+  })\n+  return config\n+}\n+\n+async function getRouteTreeFileText(config: Config) {\n+  const location = config.generatedRouteTree\n+  const text = await fs.readFile(location, 'utf-8')\n+  return text\n+}\n+\n+async function getExpectedRouteTreeFileText(folder: string) {\n+  const dir = getFolderDir(folder)\n+  const location = dir + '/routeTree.expected.ts'\n+  const text = await fs.readFile(location, 'utf-8')\n+  return text\n+}\n+\n+// Write a test\n+describe('with a default config', () => {\n+  it('should wire-up the routes for a \"single-level\" tree', async () => {\n+    const folderName = 'single-level'\n+    const config = await setupConfig(folderName)\n+\n+    await generator(config)\n+\n+    const [expectedRouteTree, generatedRouteTree] = await Promise.all([",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1530086481",
        "repo_full_name": "TanStack/router",
        "pr_number": 1337,
        "pr_file": "packages/router-generator/tests/generator.test.ts",
        "discussion_id": "1530086481",
        "commented_code": "@@ -0,0 +1,90 @@\n+import fs from 'fs/promises'\n+import { describe, it, expect } from 'vitest'\n+\n+import { generator, getConfig, type Config } from '../src'\n+\n+function getFolderDir(folder: string) {\n+  return process.cwd() + `/tests/${folder}`\n+}\n+\n+async function setupConfig(folder: string) {\n+  const dir = getFolderDir(folder)\n+  const config = await getConfig({\n+    disableLogging: true,\n+    routesDirectory: dir + '/routes',\n+    generatedRouteTree: dir + '/routeTree.gen.ts',\n+  })\n+  return config\n+}\n+\n+async function getRouteTreeFileText(config: Config) {\n+  const location = config.generatedRouteTree\n+  const text = await fs.readFile(location, 'utf-8')\n+  return text\n+}\n+\n+async function getExpectedRouteTreeFileText(folder: string) {\n+  const dir = getFolderDir(folder)\n+  const location = dir + '/routeTree.expected.ts'\n+  const text = await fs.readFile(location, 'utf-8')\n+  return text\n+}\n+\n+// Write a test\n+describe('with a default config', () => {\n+  it('should wire-up the routes for a \"single-level\" tree', async () => {\n+    const folderName = 'single-level'\n+    const config = await setupConfig(folderName)\n+\n+    await generator(config)\n+\n+    const [expectedRouteTree, generatedRouteTree] = await Promise.all([",
        "comment_created_at": "2024-03-19T10:19:37+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "can we reduce the verbosity one more step?\r\n\r\n```tsx\r\ndescribe('with a default config', () => {\r\nit.each([\r\n  ['single-level],\r\n  ['flat'],\r\n  // etc\r\n])('should wire-up the routes for a \"%s\" tree', async (folderName) => {\r\n    const config = await setupConfig(folderName)\r\n    await generator(config)\r\n    // ...\r\n});\r\n}\r\n```\r\n\r\nOR\r\nwe could iterate over all folders instead of enumerating them in the test?",
        "pr_file_module": null
      },
      {
        "comment_id": "1530110717",
        "repo_full_name": "TanStack/router",
        "pr_number": 1337,
        "pr_file": "packages/router-generator/tests/generator.test.ts",
        "discussion_id": "1530086481",
        "commented_code": "@@ -0,0 +1,90 @@\n+import fs from 'fs/promises'\n+import { describe, it, expect } from 'vitest'\n+\n+import { generator, getConfig, type Config } from '../src'\n+\n+function getFolderDir(folder: string) {\n+  return process.cwd() + `/tests/${folder}`\n+}\n+\n+async function setupConfig(folder: string) {\n+  const dir = getFolderDir(folder)\n+  const config = await getConfig({\n+    disableLogging: true,\n+    routesDirectory: dir + '/routes',\n+    generatedRouteTree: dir + '/routeTree.gen.ts',\n+  })\n+  return config\n+}\n+\n+async function getRouteTreeFileText(config: Config) {\n+  const location = config.generatedRouteTree\n+  const text = await fs.readFile(location, 'utf-8')\n+  return text\n+}\n+\n+async function getExpectedRouteTreeFileText(folder: string) {\n+  const dir = getFolderDir(folder)\n+  const location = dir + '/routeTree.expected.ts'\n+  const text = await fs.readFile(location, 'utf-8')\n+  return text\n+}\n+\n+// Write a test\n+describe('with a default config', () => {\n+  it('should wire-up the routes for a \"single-level\" tree', async () => {\n+    const folderName = 'single-level'\n+    const config = await setupConfig(folderName)\n+\n+    await generator(config)\n+\n+    const [expectedRouteTree, generatedRouteTree] = await Promise.all([",
        "comment_created_at": "2024-03-19T10:33:47+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "I'd go for the first option since this is currently just testing the `generator` function and this could change should we decide to test the `config` related stuff as well.\r\n\r\nAlso, didn't know that `it.each` was a thing...\r\nPS: Literally my first time ever writing tests... Pretty much yolo'd till now.",
        "pr_file_module": null
      },
      {
        "comment_id": "1530113293",
        "repo_full_name": "TanStack/router",
        "pr_number": 1337,
        "pr_file": "packages/router-generator/tests/generator.test.ts",
        "discussion_id": "1530086481",
        "commented_code": "@@ -0,0 +1,90 @@\n+import fs from 'fs/promises'\n+import { describe, it, expect } from 'vitest'\n+\n+import { generator, getConfig, type Config } from '../src'\n+\n+function getFolderDir(folder: string) {\n+  return process.cwd() + `/tests/${folder}`\n+}\n+\n+async function setupConfig(folder: string) {\n+  const dir = getFolderDir(folder)\n+  const config = await getConfig({\n+    disableLogging: true,\n+    routesDirectory: dir + '/routes',\n+    generatedRouteTree: dir + '/routeTree.gen.ts',\n+  })\n+  return config\n+}\n+\n+async function getRouteTreeFileText(config: Config) {\n+  const location = config.generatedRouteTree\n+  const text = await fs.readFile(location, 'utf-8')\n+  return text\n+}\n+\n+async function getExpectedRouteTreeFileText(folder: string) {\n+  const dir = getFolderDir(folder)\n+  const location = dir + '/routeTree.expected.ts'\n+  const text = await fs.readFile(location, 'utf-8')\n+  return text\n+}\n+\n+// Write a test\n+describe('with a default config', () => {\n+  it('should wire-up the routes for a \"single-level\" tree', async () => {\n+    const folderName = 'single-level'\n+    const config = await setupConfig(folderName)\n+\n+    await generator(config)\n+\n+    const [expectedRouteTree, generatedRouteTree] = await Promise.all([",
        "comment_created_at": "2024-03-19T10:35:50+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "I'll dump all the dirs inside a folder and get the foldernames from there.",
        "pr_file_module": null
      }
    ]
  }
]