[
  {
    "discussion_id": "1659679678",
    "pr_number": 1858,
    "pr_file": "docs/framework/react/guide/server-functions.md",
    "created_at": "2024-06-29T09:20:50+00:00",
    "commented_code": "+---\n+id: server-functions\n+title: Server Functions\n+---\n+\n+As [TanStack Start](./tanstack-start.md) is a full-stack framework, we need a way to write code that executes on the\n+server and can be called from the client.\n+\n+While some frameworks use special pragmas to denote a function that will execute on the server, Start uses a utility to\n+create an instance of a server function.\n+\n+```typescript\n+const yourFn = createServerFn('POST', async () => {\n+  // Server-side code lives here\n+})\n+```\n+\n+This function can then be called from the client:\n+\n+```tsx\n+function Component() {\n+  // Just to demonstrate that this is a client-side function\n+  const buttonRef = (el: HTMLButtonElement) => {\n+    if (!el) return\n+    el.addEventListener('click', async () => {\n+      const result = await yourFn()\n+      console.log(result)\n+    })\n+  }\n+\n+  return <button ref={buttonRef}>Click me!</button>\n+}\n+\n+// Or, even just:\n+function Component() {\n+  return <button onClick={yourFn}>Click me!</button>\n+}\n+```\n+\n+Or from another server function:\n+\n+```typescript\n+const yourFn2 = createServerFn('POST', async () => {\n+  const result = await yourFn()\n+  console.log(result)\n+})\n+```\n+\n+Or even from other server-side code:\n+\n+```typescript\n+async function someServerFunction() {\n+  const result = await yourFn()\n+  console(result)\n+}\n+```\n+\n+When this function is called from the client, it will make a request to the server, execute the server-side code, and\n+return the serialized result to the client.\n+\n+# Server Function Arguments\n+\n+Like any function, server functions can take arguments:\n+\n+```typescript\n+const yourFn = createServerFn('POST', async (val: number) => {\n+  // Server-side code lives here\n+})\n+\n+// Call it like this:\n+yourFn(123);\n+```\n+\n+Only one argument is supported, but you can pass an object if you need to pass multiple values:\n+\n+```typescript\n+const yourFn = createServerFn('POST', async (obj: { a: number, b: number }) => {\n+  // Server-side code lives here\n+})\n+```\n+\n+Any serializable value can be passed as an argument to a server function.\n+\n+# Serialization\n+\n+Anything that can be serialized via `JSON.stringify` and `JSON.parse` can be used as an argument to or returned from a\n+server function.\n+\n+This includes:\n+\n+- `string`\n+- `number`\n+- `boolean`\n+- `null`\n+- `Array`\n+- `Object`\n+\n+In addition, we support serializing the following:\n+\n+- [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream)s of other serializable types\n+- [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)s of other\n+  serializable types\n+\n+# No-JS Server Functions\n+\n+Without JavaScript enabled, there's only one way to execute server functions: by submitting a form.\n+\n+This is done by adding a `form` element to the page\n+with [the HTML attribute `action`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action).\n+\n+> Notice that we mentioned the **HTML** attribute `action`. This attribute only accepts a string in HTML, just like all\n+> other attributes.\n+>\n+> While React\n+> 19 [added support for passing a function to `action`](https://react.dev/reference/react-dom/components/form#form),\n+> it's\n+> a React-specific feature and not part of the HTML standard.\n+\n+The `action` attribute tells the browser where to send the form data when the form is submitted. In this case, we want\n+to send the form data to the server function.\n+\n+To do this, we can utilize the `url` property of the server function:\n+\n+```typescript\n+const yourFn = createServerFn('POST', async () => {\n+  // Server-side code lives here\n+})\n+\n+console.log(yourFn.url)\n+```\n+\n+And pass this to the `action` attribute of the form:\n+\n+```tsx\n+function Component() {\n+  return (\n+    <form action={yourFn.url} method=\"POST\">\n+      <button type=\"submit\">Click me!</button>\n+    </form>\n+  )\n+}\n+```\n+\n+When the form is submitted, the server function will be executed.\n+\n+## No-JS Server Function Arguments\n+\n+To pass arguments to a server function when submitting a form, you can use the `input` element with the `name` attribute\n+to attach the argument to the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) passed to your\n+server function:\n+\n+```tsx\n+const yourFn = createServerFn('POST', async (formData: FormData) => {\n+  // `val` will be '123'\n+  const val = formData.get('val');\n+  // ...\n+})\n+\n+function Component() {\n+  return (\n+    //  We need to tell the server that our data type is `multipart/form-data` by setting the `encType` attribute on the form.\n+    <form action={yourFn.url} method=\"POST\" encType=\"multipart/form-data\">\n+      <input type=\"hidden\" name=\"val\" value=\"123\" />",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1659679678",
        "repo_full_name": "TanStack/router",
        "pr_number": 1858,
        "pr_file": "docs/framework/react/guide/server-functions.md",
        "discussion_id": "1659679678",
        "commented_code": "@@ -0,0 +1,245 @@\n+---\n+id: server-functions\n+title: Server Functions\n+---\n+\n+As [TanStack Start](./tanstack-start.md) is a full-stack framework, we need a way to write code that executes on the\n+server and can be called from the client.\n+\n+While some frameworks use special pragmas to denote a function that will execute on the server, Start uses a utility to\n+create an instance of a server function.\n+\n+```typescript\n+const yourFn = createServerFn('POST', async () => {\n+  // Server-side code lives here\n+})\n+```\n+\n+This function can then be called from the client:\n+\n+```tsx\n+function Component() {\n+  // Just to demonstrate that this is a client-side function\n+  const buttonRef = (el: HTMLButtonElement) => {\n+    if (!el) return\n+    el.addEventListener('click', async () => {\n+      const result = await yourFn()\n+      console.log(result)\n+    })\n+  }\n+\n+  return <button ref={buttonRef}>Click me!</button>\n+}\n+\n+// Or, even just:\n+function Component() {\n+  return <button onClick={yourFn}>Click me!</button>\n+}\n+```\n+\n+Or from another server function:\n+\n+```typescript\n+const yourFn2 = createServerFn('POST', async () => {\n+  const result = await yourFn()\n+  console.log(result)\n+})\n+```\n+\n+Or even from other server-side code:\n+\n+```typescript\n+async function someServerFunction() {\n+  const result = await yourFn()\n+  console(result)\n+}\n+```\n+\n+When this function is called from the client, it will make a request to the server, execute the server-side code, and\n+return the serialized result to the client.\n+\n+# Server Function Arguments\n+\n+Like any function, server functions can take arguments:\n+\n+```typescript\n+const yourFn = createServerFn('POST', async (val: number) => {\n+  // Server-side code lives here\n+})\n+\n+// Call it like this:\n+yourFn(123);\n+```\n+\n+Only one argument is supported, but you can pass an object if you need to pass multiple values:\n+\n+```typescript\n+const yourFn = createServerFn('POST', async (obj: { a: number, b: number }) => {\n+  // Server-side code lives here\n+})\n+```\n+\n+Any serializable value can be passed as an argument to a server function.\n+\n+# Serialization\n+\n+Anything that can be serialized via `JSON.stringify` and `JSON.parse` can be used as an argument to or returned from a\n+server function.\n+\n+This includes:\n+\n+- `string`\n+- `number`\n+- `boolean`\n+- `null`\n+- `Array`\n+- `Object`\n+\n+In addition, we support serializing the following:\n+\n+- [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream)s of other serializable types\n+- [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)s of other\n+  serializable types\n+\n+# No-JS Server Functions\n+\n+Without JavaScript enabled, there's only one way to execute server functions: by submitting a form.\n+\n+This is done by adding a `form` element to the page\n+with [the HTML attribute `action`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action).\n+\n+> Notice that we mentioned the **HTML** attribute `action`. This attribute only accepts a string in HTML, just like all\n+> other attributes.\n+>\n+> While React\n+> 19 [added support for passing a function to `action`](https://react.dev/reference/react-dom/components/form#form),\n+> it's\n+> a React-specific feature and not part of the HTML standard.\n+\n+The `action` attribute tells the browser where to send the form data when the form is submitted. In this case, we want\n+to send the form data to the server function.\n+\n+To do this, we can utilize the `url` property of the server function:\n+\n+```typescript\n+const yourFn = createServerFn('POST', async () => {\n+  // Server-side code lives here\n+})\n+\n+console.log(yourFn.url)\n+```\n+\n+And pass this to the `action` attribute of the form:\n+\n+```tsx\n+function Component() {\n+  return (\n+    <form action={yourFn.url} method=\"POST\">\n+      <button type=\"submit\">Click me!</button>\n+    </form>\n+  )\n+}\n+```\n+\n+When the form is submitted, the server function will be executed.\n+\n+## No-JS Server Function Arguments\n+\n+To pass arguments to a server function when submitting a form, you can use the `input` element with the `name` attribute\n+to attach the argument to the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) passed to your\n+server function:\n+\n+```tsx\n+const yourFn = createServerFn('POST', async (formData: FormData) => {\n+  // `val` will be '123'\n+  const val = formData.get('val');\n+  // ...\n+})\n+\n+function Component() {\n+  return (\n+    //  We need to tell the server that our data type is `multipart/form-data` by setting the `encType` attribute on the form.\n+    <form action={yourFn.url} method=\"POST\" encType=\"multipart/form-data\">\n+      <input type=\"hidden\" name=\"val\" value=\"123\" />",
        "comment_created_at": "2024-06-29T09:20:50+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "I'd add a callout on how client-side fields like this should not be \"trusted\". Purely for security due-dilligence.",
        "pr_file_module": null
      },
      {
        "comment_id": "1659702595",
        "repo_full_name": "TanStack/router",
        "pr_number": 1858,
        "pr_file": "docs/framework/react/guide/server-functions.md",
        "discussion_id": "1659679678",
        "commented_code": "@@ -0,0 +1,245 @@\n+---\n+id: server-functions\n+title: Server Functions\n+---\n+\n+As [TanStack Start](./tanstack-start.md) is a full-stack framework, we need a way to write code that executes on the\n+server and can be called from the client.\n+\n+While some frameworks use special pragmas to denote a function that will execute on the server, Start uses a utility to\n+create an instance of a server function.\n+\n+```typescript\n+const yourFn = createServerFn('POST', async () => {\n+  // Server-side code lives here\n+})\n+```\n+\n+This function can then be called from the client:\n+\n+```tsx\n+function Component() {\n+  // Just to demonstrate that this is a client-side function\n+  const buttonRef = (el: HTMLButtonElement) => {\n+    if (!el) return\n+    el.addEventListener('click', async () => {\n+      const result = await yourFn()\n+      console.log(result)\n+    })\n+  }\n+\n+  return <button ref={buttonRef}>Click me!</button>\n+}\n+\n+// Or, even just:\n+function Component() {\n+  return <button onClick={yourFn}>Click me!</button>\n+}\n+```\n+\n+Or from another server function:\n+\n+```typescript\n+const yourFn2 = createServerFn('POST', async () => {\n+  const result = await yourFn()\n+  console.log(result)\n+})\n+```\n+\n+Or even from other server-side code:\n+\n+```typescript\n+async function someServerFunction() {\n+  const result = await yourFn()\n+  console(result)\n+}\n+```\n+\n+When this function is called from the client, it will make a request to the server, execute the server-side code, and\n+return the serialized result to the client.\n+\n+# Server Function Arguments\n+\n+Like any function, server functions can take arguments:\n+\n+```typescript\n+const yourFn = createServerFn('POST', async (val: number) => {\n+  // Server-side code lives here\n+})\n+\n+// Call it like this:\n+yourFn(123);\n+```\n+\n+Only one argument is supported, but you can pass an object if you need to pass multiple values:\n+\n+```typescript\n+const yourFn = createServerFn('POST', async (obj: { a: number, b: number }) => {\n+  // Server-side code lives here\n+})\n+```\n+\n+Any serializable value can be passed as an argument to a server function.\n+\n+# Serialization\n+\n+Anything that can be serialized via `JSON.stringify` and `JSON.parse` can be used as an argument to or returned from a\n+server function.\n+\n+This includes:\n+\n+- `string`\n+- `number`\n+- `boolean`\n+- `null`\n+- `Array`\n+- `Object`\n+\n+In addition, we support serializing the following:\n+\n+- [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream)s of other serializable types\n+- [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)s of other\n+  serializable types\n+\n+# No-JS Server Functions\n+\n+Without JavaScript enabled, there's only one way to execute server functions: by submitting a form.\n+\n+This is done by adding a `form` element to the page\n+with [the HTML attribute `action`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action).\n+\n+> Notice that we mentioned the **HTML** attribute `action`. This attribute only accepts a string in HTML, just like all\n+> other attributes.\n+>\n+> While React\n+> 19 [added support for passing a function to `action`](https://react.dev/reference/react-dom/components/form#form),\n+> it's\n+> a React-specific feature and not part of the HTML standard.\n+\n+The `action` attribute tells the browser where to send the form data when the form is submitted. In this case, we want\n+to send the form data to the server function.\n+\n+To do this, we can utilize the `url` property of the server function:\n+\n+```typescript\n+const yourFn = createServerFn('POST', async () => {\n+  // Server-side code lives here\n+})\n+\n+console.log(yourFn.url)\n+```\n+\n+And pass this to the `action` attribute of the form:\n+\n+```tsx\n+function Component() {\n+  return (\n+    <form action={yourFn.url} method=\"POST\">\n+      <button type=\"submit\">Click me!</button>\n+    </form>\n+  )\n+}\n+```\n+\n+When the form is submitted, the server function will be executed.\n+\n+## No-JS Server Function Arguments\n+\n+To pass arguments to a server function when submitting a form, you can use the `input` element with the `name` attribute\n+to attach the argument to the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) passed to your\n+server function:\n+\n+```tsx\n+const yourFn = createServerFn('POST', async (formData: FormData) => {\n+  // `val` will be '123'\n+  const val = formData.get('val');\n+  // ...\n+})\n+\n+function Component() {\n+  return (\n+    //  We need to tell the server that our data type is `multipart/form-data` by setting the `encType` attribute on the form.\n+    <form action={yourFn.url} method=\"POST\" encType=\"multipart/form-data\">\n+      <input type=\"hidden\" name=\"val\" value=\"123\" />",
        "comment_created_at": "2024-06-29T09:43:55+00:00",
        "comment_author": "crutchcorn",
        "comment_body": "Oh! I didn't even realize `type=\"hidden\"` was there. Removing!",
        "pr_file_module": null
      }
    ]
  }
]