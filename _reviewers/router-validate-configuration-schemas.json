[
  {
    "discussion_id": "2094632080",
    "pr_number": 4204,
    "pr_file": "packages/router-plugin/src/core/router-generator-plugin.ts",
    "created_at": "2025-05-18T21:36:18+00:00",
    "commented_code": "const PLUGIN_NAME = 'unplugin:router-generator'\n \n export const unpluginRouterGeneratorFactory: UnpluginFactory<\n-  Partial<Config> | undefined\n+  ConfigOptions | undefined\n > = (options = {}) => {\n   let ROOT: string = process.cwd()\n+   \n   let userConfig = options as Config",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "2094632080",
        "repo_full_name": "TanStack/router",
        "pr_number": 4204,
        "pr_file": "packages/router-plugin/src/core/router-generator-plugin.ts",
        "discussion_id": "2094632080",
        "commented_code": "@@ -15,9 +15,10 @@ const setLock = (bool: boolean) => {\n const PLUGIN_NAME = 'unplugin:router-generator'\n \n export const unpluginRouterGeneratorFactory: UnpluginFactory<\n-  Partial<Config> | undefined\n+  ConfigOptions | undefined\n > = (options = {}) => {\n   let ROOT: string = process.cwd()\n+   \n   let userConfig = options as Config",
        "comment_created_at": "2025-05-18T21:36:18+00:00",
        "comment_author": "RMHonor",
        "comment_body": "As an unrelated point, this type casting here is risky. `Config` is the `z.output` type, which will contain defined properties due to the default option, but what's being passed it hasn't been parsed by Zod yet (and so is the `z.input` type).\r\n\r\nFor example, `userConfig.routesDirectory` may not have been defined yet, so the usage on L24-26 is unsafe.\r\n\r\nThere is some complexity here, because we can't immediately parse the provided schema, as there may be later config retrieved from a `tsr.config.ts` file ([here](https://github.com/TanStack/router/blob/main/packages/router-generator/src/config.ts#L60)), and the default values would override anything provided in the config file. This could be fixed by allowing the file config to override the inline config, if that is the desired hierarchy.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1857867821",
    "pr_number": 2866,
    "pr_file": "packages/router-generator/tests/generator.test.ts",
    "created_at": "2024-11-26T06:22:36+00:00",
    "commented_code": "}\n }\n \n+function shouldUseInlineConfig(folder: string) {\n+  return folder !== 'config-json';\n+}\n+\n async function setupConfig(\n   folder: string,\n   inlineConfig: Partial<Omit<Config, 'routesDirectory'>> = {},\n ) {\n   const { generatedRouteTree = '/routeTree.gen.ts', ...rest } = inlineConfig\n   const dir = makeFolderDir(folder)\n \n-  const config = await getConfig({\n+  const defaultConfig = shouldUseInlineConfig(folder) === true ? {\n     disableLogging: true,\n     routesDirectory: dir + '/routes',\n     generatedRouteTree: dir + generatedRouteTree,\n     ...rest,\n-  })\n+  } : undefined;",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1857867821",
        "repo_full_name": "TanStack/router",
        "pr_number": 2866,
        "pr_file": "packages/router-generator/tests/generator.test.ts",
        "discussion_id": "1857867821",
        "commented_code": "@@ -40,19 +40,25 @@ async function traverseDirectory(\n   }\n }\n \n+function shouldUseInlineConfig(folder: string) {\n+  return folder !== 'config-json';\n+}\n+\n async function setupConfig(\n   folder: string,\n   inlineConfig: Partial<Omit<Config, 'routesDirectory'>> = {},\n ) {\n   const { generatedRouteTree = '/routeTree.gen.ts', ...rest } = inlineConfig\n   const dir = makeFolderDir(folder)\n \n-  const config = await getConfig({\n+  const defaultConfig = shouldUseInlineConfig(folder) === true ? {\n     disableLogging: true,\n     routesDirectory: dir + '/routes',\n     generatedRouteTree: dir + generatedRouteTree,\n     ...rest,\n-  })\n+  } : undefined;",
        "comment_created_at": "2024-11-26T06:22:36+00:00",
        "comment_author": "davidturissini",
        "comment_body": "If this test is specifically verifying config from the filesystem, bail on passing an inline config. Use the resolved config instead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1702432743",
    "pr_number": 2077,
    "pr_file": "examples/react/ssr-fastify-trpc/vite.config.ts",
    "created_at": "2024-08-03T02:01:42+00:00",
    "commented_code": "+import { dirname, join } from 'path'\n+import { TanStackRouterVite } from '@tanstack/router-plugin/vite'\n+import { defineConfig } from 'vite'\n+import { fileURLToPath } from 'url'\n+import react from '@vitejs/plugin-react'\n+\n+import tsrOptions from './tsr.config.json' assert { type: 'json' }\n+\n+// https://vitejs.dev/config/\n+export default defineConfig({\n+  plugins: [\n+    TanStackRouterVite(tsrOptions as Parameters<typeof TanStackRouterVite>[0]),",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1702432743",
        "repo_full_name": "TanStack/router",
        "pr_number": 2077,
        "pr_file": "examples/react/ssr-fastify-trpc/vite.config.ts",
        "discussion_id": "1702432743",
        "commented_code": "@@ -0,0 +1,16 @@\n+import { dirname, join } from 'path'\n+import { TanStackRouterVite } from '@tanstack/router-plugin/vite'\n+import { defineConfig } from 'vite'\n+import { fileURLToPath } from 'url'\n+import react from '@vitejs/plugin-react'\n+\n+import tsrOptions from './tsr.config.json' assert { type: 'json' }\n+\n+// https://vitejs.dev/config/\n+export default defineConfig({\n+  plugins: [\n+    TanStackRouterVite(tsrOptions as Parameters<typeof TanStackRouterVite>[0]),",
        "comment_created_at": "2024-08-03T02:01:42+00:00",
        "comment_author": "SeanCassiere",
        "comment_body": "You shouldn't need to do this, the vite plugin should automatically pickup the file.\r\n\r\nOr just simply inline the config with the file plugin here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1702729674",
        "repo_full_name": "TanStack/router",
        "pr_number": 2077,
        "pr_file": "examples/react/ssr-fastify-trpc/vite.config.ts",
        "discussion_id": "1702432743",
        "commented_code": "@@ -0,0 +1,16 @@\n+import { dirname, join } from 'path'\n+import { TanStackRouterVite } from '@tanstack/router-plugin/vite'\n+import { defineConfig } from 'vite'\n+import { fileURLToPath } from 'url'\n+import react from '@vitejs/plugin-react'\n+\n+import tsrOptions from './tsr.config.json' assert { type: 'json' }\n+\n+// https://vitejs.dev/config/\n+export default defineConfig({\n+  plugins: [\n+    TanStackRouterVite(tsrOptions as Parameters<typeof TanStackRouterVite>[0]),",
        "comment_created_at": "2024-08-03T12:10:36+00:00",
        "comment_author": "theMostCuriousHomunculus",
        "comment_body": "i had made the change but now when i run the dev server, this plugin is not using the values i specified in the tsr.config.json file.  i can inline the configuration if you'd prefer, but since i also have a routegen script specified in package.json (which does read from tsr.config.json), i was importing that configuration here so that the route generation configuration is only specified in one place (whether the user runes the routegen script or whether the vite plugin generates the routes while the dev server is running).  perhaps i have uncovered a bug?  should the plugin look for configurations specified in the tsr.config.json file as a default as the cli does?  i will copy the configuration from the json file here for now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1462132022",
    "pr_number": 1057,
    "pr_file": "packages/router-vite-plugin/src/index.ts",
    "created_at": "2024-01-22T16:44:59+00:00",
    "commented_code": "import { readFile } from 'fs/promises'\n import {\n   type Config,\n-  configSchema,\n+  getConfig,\n   generator,\n } from '@tanstack/router-generator'\n \n const CONFIG_FILE_NAME = 'tsr.config.json'\n \n type UserConfig = Partial<Config>\n \n-async function readConfigFile(path: string): Promise<UserConfig> {\n-  try {\n-    const raw = await readFile(path, 'utf-8')\n-    return JSON.parse(raw) as UserConfig\n-  } catch {\n-    return {} as UserConfig\n-  }\n-}\n-\n-async function buildConfig(config: UserConfig, root: string): Promise<Config> {\n-  const fileConfig = await readConfigFile(join(root, CONFIG_FILE_NAME))\n-  return configSchema.parse({\n-    ...fileConfig,\n-    ...config,\n-  })\n+async function buildConfig(inlineConfig: UserConfig): Promise<Config> {",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1462132022",
        "repo_full_name": "TanStack/router",
        "pr_number": 1057,
        "pr_file": "packages/router-vite-plugin/src/index.ts",
        "discussion_id": "1462132022",
        "commented_code": "@@ -3,29 +3,16 @@ import { join, normalize } from 'path'\n import { readFile } from 'fs/promises'\n import {\n   type Config,\n-  configSchema,\n+  getConfig,\n   generator,\n } from '@tanstack/router-generator'\n \n const CONFIG_FILE_NAME = 'tsr.config.json'\n \n type UserConfig = Partial<Config>\n \n-async function readConfigFile(path: string): Promise<UserConfig> {\n-  try {\n-    const raw = await readFile(path, 'utf-8')\n-    return JSON.parse(raw) as UserConfig\n-  } catch {\n-    return {} as UserConfig\n-  }\n-}\n-\n-async function buildConfig(config: UserConfig, root: string): Promise<Config> {\n-  const fileConfig = await readConfigFile(join(root, CONFIG_FILE_NAME))\n-  return configSchema.parse({\n-    ...fileConfig,\n-    ...config,\n-  })\n+async function buildConfig(inlineConfig: UserConfig): Promise<Config> {",
        "comment_created_at": "2024-01-22T16:44:59+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "can't we just call `getConfig` down there and remove this function?",
        "pr_file_module": null
      },
      {
        "comment_id": "1462257918",
        "repo_full_name": "TanStack/router",
        "pr_number": 1057,
        "pr_file": "packages/router-vite-plugin/src/index.ts",
        "discussion_id": "1462132022",
        "commented_code": "@@ -3,29 +3,16 @@ import { join, normalize } from 'path'\n import { readFile } from 'fs/promises'\n import {\n   type Config,\n-  configSchema,\n+  getConfig,\n   generator,\n } from '@tanstack/router-generator'\n \n const CONFIG_FILE_NAME = 'tsr.config.json'\n \n type UserConfig = Partial<Config>\n \n-async function readConfigFile(path: string): Promise<UserConfig> {\n-  try {\n-    const raw = await readFile(path, 'utf-8')\n-    return JSON.parse(raw) as UserConfig\n-  } catch {\n-    return {} as UserConfig\n-  }\n-}\n-\n-async function buildConfig(config: UserConfig, root: string): Promise<Config> {\n-  const fileConfig = await readConfigFile(join(root, CONFIG_FILE_NAME))\n-  return configSchema.parse({\n-    ...fileConfig,\n-    ...config,\n-  })\n+async function buildConfig(inlineConfig: UserConfig): Promise<Config> {",
        "comment_created_at": "2024-01-22T18:37:32+00:00",
        "comment_author": "wuarmin",
        "comment_body": "you are right, of course",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1463744519",
    "pr_number": 1057,
    "pr_file": "packages/router-generator/src/config.ts",
    "created_at": "2024-01-23T18:15:52+00:00",
    "commented_code": "const configFilePathJson = path.resolve(process.cwd(), 'tsr.config.json')\n \n-export async function getConfig(): Promise<Config> {\n+export async function getConfig(inlineConfig: Partial<Config> = {}): Promise<Config> {",
    "repo_full_name": "TanStack/router",
    "discussion_comments": [
      {
        "comment_id": "1463744519",
        "repo_full_name": "TanStack/router",
        "pr_number": 1057,
        "pr_file": "packages/router-generator/src/config.ts",
        "discussion_id": "1463744519",
        "commented_code": "@@ -15,17 +15,18 @@ export type Config = z.infer<typeof configSchema>\n \n const configFilePathJson = path.resolve(process.cwd(), 'tsr.config.json')\n \n-export async function getConfig(): Promise<Config> {\n+export async function getConfig(inlineConfig: Partial<Config> = {}): Promise<Config> {",
        "comment_created_at": "2024-01-23T18:15:52+00:00",
        "comment_author": "schiller-manuel",
        "comment_body": "please pass in the directory as an optional argument here\r\n\r\n```tsx\r\nexport async function getConfig(inlineConfig: Partial<Config> = {}, configDirectory?:string): Promise<Config> {\r\nif (configDirectory === undefined) {\r\n    configDirectory = process.cwd();\r\n}\r\nconst configFilePathJson = path.resolve(configDirectory, 'tsr.config.json')\r\n\r\n...\r\n",
        "pr_file_module": null
      }
    ]
  }
]