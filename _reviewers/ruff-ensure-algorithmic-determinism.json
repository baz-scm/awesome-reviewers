[
  {
    "discussion_id": "2125498558",
    "pr_number": 18452,
    "pr_file": "crates/ty_python_semantic/resources/mdtest/snapshots/union_call.md_-_Calling_a_union_of_f\u2026_-_Try_to_cover_all_pos\u2026_-_Cover_non-keyword_re\u2026_(707b284610419a54).snap",
    "created_at": "2025-06-04T03:34:40+00:00",
    "commented_code": "```\n \n-```\n-error[no-matching-overload]: No overload of method wrapper `__get__` of function `f` matches arguments\n-  --> src/mdtest_snippet.py:48:9\n-   |\n-46 |     # error: [no-matching-overload]\n-47 |     # error: [call-non-callable] \"Object of type `PossiblyNotCallable` is not callable (possibly unbound `__call__` method)\"\n-48 |     x = f(3)\n-   |         ^^^^\n-   |\n-info: Union variant `<method-wrapper `__get__` of `f`>` is incompatible with this call site\n-info: Attempted to call union type `(def f1() -> int) | (def f2(name: str) -> int) | (def f3(a: int, b: int) -> int) | (def f4(x: T) -> int) | Literal[5] | Unknown | (<method-wrapper `__get__` of `f`>) | PossiblyNotCallable`\n-info: rule `no-matching-overload` is enabled by default\n-\n-```",
    "repo_full_name": "astral-sh/ruff",
    "discussion_comments": [
      {
        "comment_id": "2125498558",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18452,
        "pr_file": "crates/ty_python_semantic/resources/mdtest/snapshots/union_call.md_-_Calling_a_union_of_f\u2026_-_Try_to_cover_all_pos\u2026_-_Cover_non-keyword_re\u2026_(707b284610419a54).snap",
        "discussion_id": "2125498558",
        "commented_code": "@@ -109,21 +109,6 @@ info: rule `missing-argument` is enabled by default\n \n ```\n \n-```\n-error[no-matching-overload]: No overload of method wrapper `__get__` of function `f` matches arguments\n-  --> src/mdtest_snippet.py:48:9\n-   |\n-46 |     # error: [no-matching-overload]\n-47 |     # error: [call-non-callable] \"Object of type `PossiblyNotCallable` is not callable (possibly unbound `__call__` method)\"\n-48 |     x = f(3)\n-   |         ^^^^\n-   |\n-info: Union variant `<method-wrapper `__get__` of `f`>` is incompatible with this call site\n-info: Attempted to call union type `(def f1() -> int) | (def f2(name: str) -> int) | (def f3(a: int, b: int) -> int) | (def f4(x: T) -> int) | Literal[5] | Unknown | (<method-wrapper `__get__` of `f`>) | PossiblyNotCallable`\n-info: rule `no-matching-overload` is enabled by default\n-\n-```",
        "comment_created_at": "2025-06-04T03:34:40+00:00",
        "comment_author": "dhruvmanila",
        "comment_body": "This seems correct to me as the reveal type of `x` in the following gives us the bound method:\r\n\r\n```py\r\nfrom inspect import getattr_static\r\nfrom typing import reveal_type\r\n\r\n\r\nclass OverloadExample:\r\n    def f(self, x: str) -> int:\r\n        return 0\r\n\r\n\r\nf5 = getattr_static(OverloadExample, \"f\").__get__\r\n\r\n# ty: Revealed type: `bound method Literal[3].f(x: str) -> int` [revealed-type]\r\nreveal_type(f5(3))\r\n```\r\n\r\nSo, it seems like this test is actually incorrect.\r\n\r\nThe overload matching did yield a matching overload but still it reported `no-matching-overload` diagnostic. You can see this in the following logs which suggests that the matching overload is at index 1 after the arity check and the type checking shouldn't fail either because `Literal[3]` is assignable to `~None`:\r\n\r\n```\r\nINFO matching overload index: 1\r\nINFO overload signature: (instance: ~None, owner: type | None = None, /) -> Unknown\r\nINFO argument types: Literal[3]\r\n```\r\n\r\nThe reason this was happening earlier is that we'd unconditionally report `no-matching-overload` without actually checking whether this is the case. This is the branch where that is happening:\r\n\r\nhttps://github.com/astral-sh/ruff/blob/a2cd6df429a3e76880a48a5eb8816a86c36927ed/crates/ty_python_semantic/src/types/call/bind.rs#L1590",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2098690793",
    "pr_number": 18226,
    "pr_file": "crates/ty_python_semantic/resources/mdtest/snapshots/mro.md_-_Method_Resolution_Or\u2026_-_`__bases__`_lists_wi\u2026_(ea7ebc83ec359b54).snap",
    "created_at": "2025-05-20T19:14:25+00:00",
    "commented_code": "```\n \n ```\n-error[duplicate-base]: Duplicate base class `Spam`\n+error[duplicate-base]: Duplicate base class `Eggs`",
    "repo_full_name": "astral-sh/ruff",
    "discussion_comments": [
      {
        "comment_id": "2098690793",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18226,
        "pr_file": "crates/ty_python_semantic/resources/mdtest/snapshots/mro.md_-_Method_Resolution_Or\u2026_-_`__bases__`_lists_wi\u2026_(ea7ebc83ec359b54).snap",
        "discussion_id": "2098690793",
        "commented_code": "@@ -141,7 +141,7 @@ info[revealed-type]: Revealed type\n ```\n \n ```\n-error[duplicate-base]: Duplicate base class `Spam`\n+error[duplicate-base]: Duplicate base class `Eggs`",
        "comment_created_at": "2025-05-20T19:14:25+00:00",
        "comment_author": "ibraheemdev",
        "comment_body": "This change is a little odd, maybe something to do with the ID generation affecting some sort order?",
        "pr_file_module": null
      },
      {
        "comment_id": "2098729302",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18226,
        "pr_file": "crates/ty_python_semantic/resources/mdtest/snapshots/mro.md_-_Method_Resolution_Or\u2026_-_`__bases__`_lists_wi\u2026_(ea7ebc83ec359b54).snap",
        "discussion_id": "2098690793",
        "commented_code": "@@ -141,7 +141,7 @@ info[revealed-type]: Revealed type\n ```\n \n ```\n-error[duplicate-base]: Duplicate base class `Spam`\n+error[duplicate-base]: Duplicate base class `Eggs`",
        "comment_created_at": "2025-05-20T19:39:14+00:00",
        "comment_author": "sharkdp",
        "comment_body": "Something was non-deterministic here before, so it's not related to your changes.",
        "pr_file_module": null
      },
      {
        "comment_id": "2101256474",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18226,
        "pr_file": "crates/ty_python_semantic/resources/mdtest/snapshots/mro.md_-_Method_Resolution_Or\u2026_-_`__bases__`_lists_wi\u2026_(ea7ebc83ec359b54).snap",
        "discussion_id": "2098690793",
        "commented_code": "@@ -141,7 +141,7 @@ info[revealed-type]: Revealed type\n ```\n \n ```\n-error[duplicate-base]: Duplicate base class `Spam`\n+error[duplicate-base]: Duplicate base class `Eggs`",
        "comment_created_at": "2025-05-21T22:08:50+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "I switched to using an `IndexMap` in https://github.com/astral-sh/ruff/commit/cb04343b3b5e7a8a0841c73537733fa5aac482a2 to try to improve the determinism of the order of diagnostics -- can you try rebasing and see if the order still changes after the rebase?",
        "pr_file_module": null
      },
      {
        "comment_id": "2110438551",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18226,
        "pr_file": "crates/ty_python_semantic/resources/mdtest/snapshots/mro.md_-_Method_Resolution_Or\u2026_-_`__bases__`_lists_wi\u2026_(ea7ebc83ec359b54).snap",
        "discussion_id": "2098690793",
        "commented_code": "@@ -141,7 +141,7 @@ info[revealed-type]: Revealed type\n ```\n \n ```\n-error[duplicate-base]: Duplicate base class `Spam`\n+error[duplicate-base]: Duplicate base class `Eggs`",
        "comment_created_at": "2025-05-27T22:49:14+00:00",
        "comment_author": "ibraheemdev",
        "comment_body": "Looks like that fixed it, thanks!",
        "pr_file_module": null
      },
      {
        "comment_id": "2110510337",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18226,
        "pr_file": "crates/ty_python_semantic/resources/mdtest/snapshots/mro.md_-_Method_Resolution_Or\u2026_-_`__bases__`_lists_wi\u2026_(ea7ebc83ec359b54).snap",
        "discussion_id": "2098690793",
        "commented_code": "@@ -141,7 +141,7 @@ info[revealed-type]: Revealed type\n ```\n \n ```\n-error[duplicate-base]: Duplicate base class `Spam`\n+error[duplicate-base]: Duplicate base class `Eggs`",
        "comment_created_at": "2025-05-27T23:23:33+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "Glad to hear it \ud83d\ude03",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2163919776",
    "pr_number": 18763,
    "pr_file": "crates/ruff_linter/src/rules/flake8_use_pathlib/snapshots/ruff_linter__rules__flake8_use_pathlib__tests__PTH202_PTH202.py.snap",
    "created_at": "2025-06-24T12:51:09+00:00",
    "commented_code": "---\n source: crates/ruff_linter/src/rules/flake8_use_pathlib/mod.rs\n ---\n-PTH202.py:6:1: PTH202 `os.path.getsize` should be replaced by `Path.stat().st_size`\n-  |\n-6 | os.path.getsize(\"filename\")\n-  | ^^^^^^^^^^^^^^^ PTH202\n-7 | os.path.getsize(b\"filename\")\n-8 | os.path.getsize(Path(\"filename\"))\n-  |\n+PTH202.py:10:1: PTH202 [*] `os.path.getsize` should be replaced by `Path.stat().st_size`\n+   |\n+10 | os.path.getsize(\"filename\")\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PTH202\n+11 | os.path.getsize(b\"filename\")\n+12 | os.path.getsize(Path(\"filename\"))\n+   |\n+   = help: Replace with `Path(...).stat().st_size`\n+\n+\u2139 Safe fix\n+7  7  | filename2 = Path(\"filename\")\n+8  8  | \n+9  9  | \n+10    |-os.path.getsize(\"filename\")\n+   10 |+Path(\"filename\").stat().st_size\n+11 11 | os.path.getsize(b\"filename\")\n+12 12 | os.path.getsize(Path(\"filename\"))\n+13 13 | os.path.getsize(__file__)\n+\n+PTH202.py:11:1: PTH202 [*] `os.path.getsize` should be replaced by `Path.stat().st_size`\n+   |\n+10 | os.path.getsize(\"filename\")\n+11 | os.path.getsize(b\"filename\")\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PTH202\n+12 | os.path.getsize(Path(\"filename\"))\n+13 | os.path.getsize(__file__)\n+   |\n+   = help: Replace with `Path(...).stat().st_size`\n+\n+\u2139 Safe fix\n+8  8  | \n+9  9  | \n+10 10 | os.path.getsize(\"filename\")\n+11    |-os.path.getsize(b\"filename\")\n+   11 |+Path(b\"filename\").stat().st_size\n+12 12 | os.path.getsize(Path(\"filename\"))\n+13 13 | os.path.getsize(__file__)\n+14 14 | \n+\n+PTH202.py:12:1: PTH202 [*] `os.path.getsize` should be replaced by `Path.stat().st_size`\n+   |\n+10 | os.path.getsize(\"filename\")\n+11 | os.path.getsize(b\"filename\")\n+12 | os.path.getsize(Path(\"filename\"))\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PTH202\n+13 | os.path.getsize(__file__)\n+   |\n+   = help: Replace with `Path(...).stat().st_size`\n+\n+\u2139 Safe fix\n+9  9  | \n+10 10 | os.path.getsize(\"filename\")\n+11 11 | os.path.getsize(b\"filename\")\n+12    |-os.path.getsize(Path(\"filename\"))\n+   12 |+Path(Path(\"filename\")).stat().st_size",
    "repo_full_name": "astral-sh/ruff",
    "discussion_comments": [
      {
        "comment_id": "2163919776",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18763,
        "pr_file": "crates/ruff_linter/src/rules/flake8_use_pathlib/snapshots/ruff_linter__rules__flake8_use_pathlib__tests__PTH202_PTH202.py.snap",
        "discussion_id": "2163919776",
        "commented_code": "@@ -1,74 +1,655 @@\n ---\n source: crates/ruff_linter/src/rules/flake8_use_pathlib/mod.rs\n ---\n-PTH202.py:6:1: PTH202 `os.path.getsize` should be replaced by `Path.stat().st_size`\n-  |\n-6 | os.path.getsize(\"filename\")\n-  | ^^^^^^^^^^^^^^^ PTH202\n-7 | os.path.getsize(b\"filename\")\n-8 | os.path.getsize(Path(\"filename\"))\n-  |\n+PTH202.py:10:1: PTH202 [*] `os.path.getsize` should be replaced by `Path.stat().st_size`\n+   |\n+10 | os.path.getsize(\"filename\")\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PTH202\n+11 | os.path.getsize(b\"filename\")\n+12 | os.path.getsize(Path(\"filename\"))\n+   |\n+   = help: Replace with `Path(...).stat().st_size`\n+\n+\u2139 Safe fix\n+7  7  | filename2 = Path(\"filename\")\n+8  8  | \n+9  9  | \n+10    |-os.path.getsize(\"filename\")\n+   10 |+Path(\"filename\").stat().st_size\n+11 11 | os.path.getsize(b\"filename\")\n+12 12 | os.path.getsize(Path(\"filename\"))\n+13 13 | os.path.getsize(__file__)\n+\n+PTH202.py:11:1: PTH202 [*] `os.path.getsize` should be replaced by `Path.stat().st_size`\n+   |\n+10 | os.path.getsize(\"filename\")\n+11 | os.path.getsize(b\"filename\")\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PTH202\n+12 | os.path.getsize(Path(\"filename\"))\n+13 | os.path.getsize(__file__)\n+   |\n+   = help: Replace with `Path(...).stat().st_size`\n+\n+\u2139 Safe fix\n+8  8  | \n+9  9  | \n+10 10 | os.path.getsize(\"filename\")\n+11    |-os.path.getsize(b\"filename\")\n+   11 |+Path(b\"filename\").stat().st_size\n+12 12 | os.path.getsize(Path(\"filename\"))\n+13 13 | os.path.getsize(__file__)\n+14 14 | \n+\n+PTH202.py:12:1: PTH202 [*] `os.path.getsize` should be replaced by `Path.stat().st_size`\n+   |\n+10 | os.path.getsize(\"filename\")\n+11 | os.path.getsize(b\"filename\")\n+12 | os.path.getsize(Path(\"filename\"))\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PTH202\n+13 | os.path.getsize(__file__)\n+   |\n+   = help: Replace with `Path(...).stat().st_size`\n+\n+\u2139 Safe fix\n+9  9  | \n+10 10 | os.path.getsize(\"filename\")\n+11 11 | os.path.getsize(b\"filename\")\n+12    |-os.path.getsize(Path(\"filename\"))\n+   12 |+Path(Path(\"filename\")).stat().st_size",
        "comment_created_at": "2025-06-24T12:51:09+00:00",
        "comment_author": "ntBre",
        "comment_body": "Have you looked into how hard it would be to detect this? I think it would just be a `match` on the argument to see if it's a call to `Path`. I don't think this is a deal-breaker for this PR, but it is a bit unfortunate, as you pointed out.\r\n\r\nI think if you look just for an `Expr::Call`, it should avoid your concern about additional attributes like `Path(...).resolve()` because those would be `Expr::Attribute`s.",
        "pr_file_module": null
      }
    ]
  }
]