[
  {
    "discussion_id": "2169605212",
    "pr_number": 18922,
    "pr_file": "crates/ruff_linter/resources/test/fixtures/flake8_use_pathlib/PTH203.py",
    "created_at": "2025-06-26T17:56:22+00:00",
    "commented_code": null,
    "repo_full_name": "astral-sh/ruff",
    "discussion_comments": [
      {
        "comment_id": "2169605212",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18922,
        "pr_file": "crates/ruff_linter/resources/test/fixtures/flake8_use_pathlib/PTH203.py",
        "discussion_id": "2169605212",
        "commented_code": null,
        "comment_created_at": "2025-06-26T17:56:22+00:00",
        "comment_author": "ntBre",
        "comment_body": "Do we need all of these new tests? The answer could definitely be \"yes,\" but could you explain what new coverage they're adding? I think it would make sense to add at least one case with comments to each rule, but this seems like a lot of new cases for rules I thought would already have good test coverage.",
        "pr_file_module": null
      },
      {
        "comment_id": "2171443613",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18922,
        "pr_file": "crates/ruff_linter/resources/test/fixtures/flake8_use_pathlib/PTH203.py",
        "discussion_id": "2169605212",
        "commented_code": null,
        "comment_created_at": "2025-06-27T09:49:10+00:00",
        "comment_author": "chirizxc",
        "comment_body": "I think we can cut the tests down to:\r\n```python\r\nimport os\r\nimport pathlib\r\nfrom os.path import getatime\r\nfrom pathlib import Path\r\n\r\nfile = __file__\r\n\r\nos.path.getatime(file)\r\nos.path.getatime(\"filename\")\r\nos.path.getatime(Path(\"filename\"))\r\n\r\nos.path.getatime(filename=\"filename\")\r\nos.path.getatime(filename=Path(\"filename\"))\r\n\r\ngetatime(\"filename\")\r\ngetatime(Path(\"filename\"))\r\n\r\nos.path.getatime(\r\n    \"filename\", # comment\r\n)\r\n\r\nos.path.getatime(\r\n    # comment\r\n    \"filename\"\r\n    ,\r\n    # comment\r\n)\r\n\r\nos.path.getatime( # comment\r\n    Path(__file__)\r\n    # comment\r\n) # comment\r\n\r\ngetatime( # comment\r\n    \"filename\")\r\n\r\ngetatime( # comment\r\n    b\"filename\",\r\n    #comment\r\n)\r\n\r\nos.path.getatime(\"file\" + \"name\")\r\n\r\ngetatime \\\r\n \\\r\n \\\r\n        ( # comment\r\n        \"filename\",\r\n    )\r\n\r\ngetatime(Path(\"filename\").resolve())\r\n\r\nos.path.getatime(pathlib.Path(\"filename\"))\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2171458466",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18922,
        "pr_file": "crates/ruff_linter/resources/test/fixtures/flake8_use_pathlib/PTH203.py",
        "discussion_id": "2169605212",
        "commented_code": null,
        "comment_created_at": "2025-06-27T09:54:46+00:00",
        "comment_author": "chirizxc",
        "comment_body": "new tests are needed to check unsafe fix when there are comments, check filename, and check that `pathlib.Path(pathlib.Path(\"test\"))` becomes `pathlib.Path(\"test\")` too",
        "pr_file_module": null
      },
      {
        "comment_id": "2171460251",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18922,
        "pr_file": "crates/ruff_linter/resources/test/fixtures/flake8_use_pathlib/PTH203.py",
        "discussion_id": "2169605212",
        "commented_code": null,
        "comment_created_at": "2025-06-27T09:55:19+00:00",
        "comment_author": "chirizxc",
        "comment_body": "![изображение](https://github.com/user-attachments/assets/bf095932-72b8-46bc-8b96-13ab80a200a5)\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1539073586",
    "pr_number": 10583,
    "pr_file": "crates/ruff_linter/resources/test/fixtures/refurb/FURB142.py",
    "created_at": "2024-03-26T11:50:55+00:00",
    "commented_code": "+# Errors\n+\n+s = set()\n+\n+for x in [1, 2, 3]:\n+    s.add(x)\n+\n+for x in {1, 2, 3}:\n+    s.add(x)\n+\n+for x in (1, 2, 3):\n+    s.add(x)\n+\n+for x in (1, 2, 3):\n+    s.discard(x)\n+\n+for x in (1, 2, 3):\n+    s.add(x + 1)\n+\n+for x, y in ((1, 2), (3, 4)):\n+    s.add((x, y))",
    "repo_full_name": "astral-sh/ruff",
    "discussion_comments": [
      {
        "comment_id": "1539073586",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 10583,
        "pr_file": "crates/ruff_linter/resources/test/fixtures/refurb/FURB142.py",
        "discussion_id": "1539073586",
        "commented_code": "@@ -0,0 +1,56 @@\n+# Errors\n+\n+s = set()\n+\n+for x in [1, 2, 3]:\n+    s.add(x)\n+\n+for x in {1, 2, 3}:\n+    s.add(x)\n+\n+for x in (1, 2, 3):\n+    s.add(x)\n+\n+for x in (1, 2, 3):\n+    s.discard(x)\n+\n+for x in (1, 2, 3):\n+    s.add(x + 1)\n+\n+for x, y in ((1, 2), (3, 4)):\n+    s.add((x, y))",
        "comment_created_at": "2024-03-26T11:50:55+00:00",
        "comment_author": "MichaReiser",
        "comment_body": "Would you mind adding a test case where the value passed to add also depends on other variables other than the loop variable, like https://github.com/apache/airflow/blob/e41b3c58e2d2f5968bd97b8d3b05a16e926be980/airflow/utils/dag_edges.py#L74",
        "pr_file_module": null
      },
      {
        "comment_id": "1539146325",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 10583,
        "pr_file": "crates/ruff_linter/resources/test/fixtures/refurb/FURB142.py",
        "discussion_id": "1539073586",
        "commented_code": "@@ -0,0 +1,56 @@\n+# Errors\n+\n+s = set()\n+\n+for x in [1, 2, 3]:\n+    s.add(x)\n+\n+for x in {1, 2, 3}:\n+    s.add(x)\n+\n+for x in (1, 2, 3):\n+    s.add(x)\n+\n+for x in (1, 2, 3):\n+    s.discard(x)\n+\n+for x in (1, 2, 3):\n+    s.add(x + 1)\n+\n+for x, y in ((1, 2), (3, 4)):\n+    s.add((x, y))",
        "comment_created_at": "2024-03-26T12:38:39+00:00",
        "comment_author": "alex-700",
        "comment_body": "Added.\r\nSee [commit](https://github.com/astral-sh/ruff/pull/10583/commits/02fa99ebbec92bca7d20be09d95da270baf0e08b)",
        "pr_file_module": null
      },
      {
        "comment_id": "1540652756",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 10583,
        "pr_file": "crates/ruff_linter/resources/test/fixtures/refurb/FURB142.py",
        "discussion_id": "1539073586",
        "commented_code": "@@ -0,0 +1,56 @@\n+# Errors\n+\n+s = set()\n+\n+for x in [1, 2, 3]:\n+    s.add(x)\n+\n+for x in {1, 2, 3}:\n+    s.add(x)\n+\n+for x in (1, 2, 3):\n+    s.add(x)\n+\n+for x in (1, 2, 3):\n+    s.discard(x)\n+\n+for x in (1, 2, 3):\n+    s.add(x + 1)\n+\n+for x, y in ((1, 2), (3, 4)):\n+    s.add((x, y))",
        "comment_created_at": "2024-03-27T08:25:15+00:00",
        "comment_author": "MichaReiser",
        "comment_body": "Thanks",
        "pr_file_module": null
      }
    ]
  }
]