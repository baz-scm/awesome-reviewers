[
  {
    "discussion_id": "2165275719",
    "pr_number": 18713,
    "pr_file": "crates/ty_python_semantic/src/types/class.rs",
    "created_at": "2025-06-25T01:52:14+00:00",
    "commented_code": "}\n }\n \n+#[salsa::tracked]\n+impl<'db> VarianceInferable<'db> for ClassLiteral<'db> {\n+    #[salsa::tracked(cycle_fn=crate::types::variance_cycle_recover, cycle_initial=crate::types::variance_cycle_initial)]\n+    fn variance_of(self, db: &'db dyn Db, type_var: TypeVarInstance<'db>) -> TypeVarVariance {\n+        let spec = self",
    "repo_full_name": "astral-sh/ruff",
    "discussion_comments": [
      {
        "comment_id": "2165275719",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18713,
        "pr_file": "crates/ty_python_semantic/src/types/class.rs",
        "discussion_id": "2165275719",
        "commented_code": "@@ -2061,6 +2111,62 @@ impl<'db> From<ClassLiteral<'db>> for Type<'db> {\n     }\n }\n \n+#[salsa::tracked]\n+impl<'db> VarianceInferable<'db> for ClassLiteral<'db> {\n+    #[salsa::tracked(cycle_fn=crate::types::variance_cycle_recover, cycle_initial=crate::types::variance_cycle_initial)]\n+    fn variance_of(self, db: &'db dyn Db, type_var: TypeVarInstance<'db>) -> TypeVarVariance {\n+        let spec = self",
        "comment_created_at": "2025-06-25T01:52:14+00:00",
        "comment_author": "dcreager",
        "comment_body": "This is a minor style nit, but we (or at least I!) try to avoid too much abbreviation in variable names. So I would prefer `spec` → `specialization`; `ctx` → `generic_context`; `tvar` → `typevar`; etc here and elsewhere",
        "pr_file_module": null
      },
      {
        "comment_id": "2173798202",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18713,
        "pr_file": "crates/ty_python_semantic/src/types/class.rs",
        "discussion_id": "2165275719",
        "commented_code": "@@ -2061,6 +2111,62 @@ impl<'db> From<ClassLiteral<'db>> for Type<'db> {\n     }\n }\n \n+#[salsa::tracked]\n+impl<'db> VarianceInferable<'db> for ClassLiteral<'db> {\n+    #[salsa::tracked(cycle_fn=crate::types::variance_cycle_recover, cycle_initial=crate::types::variance_cycle_initial)]\n+    fn variance_of(self, db: &'db dyn Db, type_var: TypeVarInstance<'db>) -> TypeVarVariance {\n+        let spec = self",
        "comment_created_at": "2025-06-29T15:34:58+00:00",
        "comment_author": "ericmarkmartin",
        "comment_body": "Do you have opinions about `typevar` vs `type_var`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2178089541",
    "pr_number": 19074,
    "pr_file": "crates/ty_python_semantic/src/types/tuple.rs",
    "created_at": "2025-07-01T16:55:31+00:00",
    "commented_code": ".prenormalized_suffix_elements(db, None)\n             .map(|ty| ty.normalized_impl(db, visitor))\n             .collect::<Vec<_>>();\n-        Self::mixed(prefix, self.variable.normalized(db), suffix)",
    "repo_full_name": "astral-sh/ruff",
    "discussion_comments": [
      {
        "comment_id": "2178089541",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 19074,
        "pr_file": "crates/ty_python_semantic/src/types/tuple.rs",
        "discussion_id": "2178089541",
        "commented_code": "@@ -654,7 +654,8 @@ impl<'db> VariableLengthTuple<Type<'db>> {\n             .prenormalized_suffix_elements(db, None)\n             .map(|ty| ty.normalized_impl(db, visitor))\n             .collect::<Vec<_>>();\n-        Self::mixed(prefix, self.variable.normalized(db), suffix)",
        "comment_created_at": "2025-07-01T16:55:31+00:00",
        "comment_author": "carljm",
        "comment_body": "This is the thing I'm least happy with in the current approach, is that it's so easy to just call `.normalized(db)` on a nested type when it should be `.normalized_impl(db, visitor)`. But I haven't come up with any good ideas for preventing that mistake, because `Type::normalized` does need to exist, for \"external\" use -- it just shouldn't be used inside another `normalized_impl` method.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2137420365",
    "pr_number": 17643,
    "pr_file": "crates/ty_python_semantic/src/types/infer.rs",
    "created_at": "2025-06-10T09:52:00+00:00",
    "commented_code": "match self\n                 .index\n                 .place_table(FileScopeId::global())\n-                .place_id_by_expr(expr)\n+                .place_id_by_expr(&expr.expr)",
    "repo_full_name": "astral-sh/ruff",
    "discussion_comments": [
      {
        "comment_id": "2137420365",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 17643,
        "pr_file": "crates/ty_python_semantic/src/types/infer.rs",
        "discussion_id": "2137420365",
        "commented_code": "@@ -1508,7 +1508,7 @@ impl<'db, 'ast> TypeInferenceBuilder<'db, 'ast> {\n             match self\n                 .index\n                 .place_table(FileScopeId::global())\n-                .place_id_by_expr(expr)\n+                .place_id_by_expr(&expr.expr)",
        "comment_created_at": "2025-06-10T09:52:00+00:00",
        "comment_author": "sharkdp",
        "comment_body": "I guess this suggests that `let expr = …` above should be `let place = …` (or `let place_expr`), so that this becomes `place.expr`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2135368067",
    "pr_number": 18534,
    "pr_file": "crates/ty_python_semantic/src/types/infer.rs",
    "created_at": "2025-06-09T09:22:49+00:00",
    "commented_code": "todo_type!(\"`TypeGuard[]` special form\")\n             }\n             SpecialFormType::Concatenate => {\n-                self.infer_type_expression(arguments_slice);\n-                todo_type!(\"`Concatenate[]` special form\")\n+                let arguments = if let ast::Expr::Tuple(tuple) = arguments_slice {\n+                    &*tuple.elts\n+                } else {\n+                    std::slice::from_ref(arguments_slice)\n+                };\n+                for argument in arguments {\n+                    self.infer_type_expression(argument);\n+                }\n+                let num_arguments = arguments.len();\n+                let ty = if num_arguments < 2 {",
    "repo_full_name": "astral-sh/ruff",
    "discussion_comments": [
      {
        "comment_id": "2135368067",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18534,
        "pr_file": "crates/ty_python_semantic/src/types/infer.rs",
        "discussion_id": "2135368067",
        "commented_code": "@@ -9350,8 +9350,29 @@ impl<'db> TypeInferenceBuilder<'db, '_> {\n                 todo_type!(\"`TypeGuard[]` special form\")\n             }\n             SpecialFormType::Concatenate => {\n-                self.infer_type_expression(arguments_slice);\n-                todo_type!(\"`Concatenate[]` special form\")\n+                let arguments = if let ast::Expr::Tuple(tuple) = arguments_slice {\n+                    &*tuple.elts\n+                } else {\n+                    std::slice::from_ref(arguments_slice)\n+                };\n+                for argument in arguments {\n+                    self.infer_type_expression(argument);\n+                }\n+                let num_arguments = arguments.len();\n+                let ty = if num_arguments < 2 {",
        "comment_created_at": "2025-06-09T09:22:49+00:00",
        "comment_author": "dhruvmanila",
        "comment_body": "nit: let's avoid using \"ty\" as variables :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2131192575",
    "pr_number": 18294,
    "pr_file": "crates/ty_python_semantic/src/types.rs",
    "created_at": "2025-06-06T01:00:54+00:00",
    "commented_code": "}\n }\n \n+#[salsa::interned(debug)]\n+pub struct TypeIsType<'db> {\n+    #[return_ref]\n+    ty: Type<'db>,",
    "repo_full_name": "astral-sh/ruff",
    "discussion_comments": [
      {
        "comment_id": "2131192575",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18294,
        "pr_file": "crates/ty_python_semantic/src/types.rs",
        "discussion_id": "2131192575",
        "commented_code": "@@ -9197,6 +9234,56 @@ impl<'db> BoundSuperType<'db> {\n     }\n }\n \n+#[salsa::interned(debug)]\n+pub struct TypeIsType<'db> {\n+    #[return_ref]\n+    ty: Type<'db>,",
        "comment_created_at": "2025-06-06T01:00:54+00:00",
        "comment_author": "carljm",
        "comment_body": "nit: would prefer a more descriptive name here, e.g. `narrowed_type`. (We've also been moving away from using variables named `ty`)",
        "pr_file_module": null
      }
    ]
  }
]