[
  {
    "discussion_id": "2133229270",
    "pr_number": 18527,
    "pr_file": "crates/ty_python_semantic/resources/mdtest/attributes.md",
    "created_at": "2025-06-07T02:32:03+00:00",
    "commented_code": "date.tz = \"UTC\"\n ```\n \n+### Setting attributes on unions\n+\n+Setting attributes on unions where all elements of the union have the attribute is acceptable\n+\n+```py\n+from typing import Union\n+\n+class A:\n+    x: int\n+\n+class B:\n+    x: int\n+\n+C = Union[A, B]\n+\n+a: C = A()\n+a.x = 42\n+```\n+\n+Setting attributes on unions where any element of the union does not have the attribute reports\n+possibly unbound\n+\n+```py\n+from typing import Union\n+\n+class A:\n+    pass\n+\n+class B:\n+    x: int\n+\n+C = Union[A, B]\n+\n+a: C = A()\n+\n+# instead of unresolved-attribute, this should report possibly-unbound-attribute\n+# TODO: error: [possibly-unbound-attribute]\n+# error: [unresolved-attribute]\n+a.x = 42",
    "repo_full_name": "astral-sh/ruff",
    "discussion_comments": [
      {
        "comment_id": "2133229270",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18527,
        "pr_file": "crates/ty_python_semantic/resources/mdtest/attributes.md",
        "discussion_id": "2133229270",
        "commented_code": "@@ -1628,6 +1628,70 @@ date.year = 2025\n date.tz = \"UTC\"\n ```\n \n+### Setting attributes on unions\n+\n+Setting attributes on unions where all elements of the union have the attribute is acceptable\n+\n+```py\n+from typing import Union\n+\n+class A:\n+    x: int\n+\n+class B:\n+    x: int\n+\n+C = Union[A, B]\n+\n+a: C = A()\n+a.x = 42\n+```\n+\n+Setting attributes on unions where any element of the union does not have the attribute reports\n+possibly unbound\n+\n+```py\n+from typing import Union\n+\n+class A:\n+    pass\n+\n+class B:\n+    x: int\n+\n+C = Union[A, B]\n+\n+a: C = A()\n+\n+# instead of unresolved-attribute, this should report possibly-unbound-attribute\n+# TODO: error: [possibly-unbound-attribute]\n+# error: [unresolved-attribute]\n+a.x = 42",
        "comment_created_at": "2025-06-07T02:32:03+00:00",
        "comment_author": "thejchap",
        "comment_body": "mypy:\r\n\r\n`../test.py:12: error: Item \"A\" of \"A | B\" has no attribute \"x\"  [union-attr]`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2135860407",
    "pr_number": 18593,
    "pr_file": "crates/ty_python_semantic/resources/mdtest/del.md",
    "created_at": "2025-06-09T14:44:12+00:00",
    "commented_code": "+# `del` statement\n+\n+## Basic\n+\n+```py\n+a = 1\n+del a\n+# error: [unresolved-reference]\n+reveal_type(a)  # revealed: Unknown",
    "repo_full_name": "astral-sh/ruff",
    "discussion_comments": [
      {
        "comment_id": "2135860407",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18593,
        "pr_file": "crates/ty_python_semantic/resources/mdtest/del.md",
        "discussion_id": "2135860407",
        "commented_code": "@@ -0,0 +1,105 @@\n+# `del` statement\n+\n+## Basic\n+\n+```py\n+a = 1\n+del a\n+# error: [unresolved-reference]\n+reveal_type(a)  # revealed: Unknown",
        "comment_created_at": "2025-06-09T14:44:12+00:00",
        "comment_author": "AlexWaygood",
        "comment_body": "```suggestion\r\nreveal_type(a)  # revealed: Unknown\r\n\r\n# TODO: we should emit `[unresolved-reference]` here since it's already been deleted from this scope:\r\ndel a\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2161996757",
    "pr_number": 18846,
    "pr_file": "crates/ty_python_semantic/resources/mdtest/subscript/class.md",
    "created_at": "2025-06-23T16:15:52+00:00",
    "commented_code": "else:\n         class Spam: ...\n-    # error: [possibly-unbound-implicit-call] \"Method `__class_getitem__` of type `<class 'Spam'> | <class 'Spam'>` is possibly unbound\"\n-    # revealed: str\n+    # error: [non-subscriptable] \"Cannot subscript object of type `<class 'Spam'>` with no `__class_getitem__` method\"\n+    # revealed: str | <class 'Spam'>",
    "repo_full_name": "astral-sh/ruff",
    "discussion_comments": [
      {
        "comment_id": "2161996757",
        "repo_full_name": "astral-sh/ruff",
        "pr_number": 18846,
        "pr_file": "crates/ty_python_semantic/resources/mdtest/subscript/class.md",
        "discussion_id": "2161996757",
        "commented_code": "@@ -63,8 +63,8 @@ def _(flag: bool):\n \n     else:\n         class Spam: ...\n-    # error: [possibly-unbound-implicit-call] \"Method `__class_getitem__` of type `<class 'Spam'> | <class 'Spam'>` is possibly unbound\"\n-    # revealed: str\n+    # error: [non-subscriptable] \"Cannot subscript object of type `<class 'Spam'>` with no `__class_getitem__` method\"\n+    # revealed: str | <class 'Spam'>",
        "comment_created_at": "2025-06-23T16:15:52+00:00",
        "comment_author": "carljm",
        "comment_body": "This is wrong; the definition of `Spam` that lacks a `__class_getitem__` should not resolve to `<class 'Spam'>` but to `Unknown`.\r\n\r\n```suggestion\r\n    # revealed: str | Unknown\r\n```\r\n\r\nIt looks like this is due to an old workaround that predates our support for generic types. We can just remove that workaround and fix this:\r\n\r\n```diff\r\ndiff --git a/crates/ty_python_semantic/src/types/infer.rs b/crates/ty_python_semantic/src/types/infer.rs\r\nindex 1580058159..b073460207 100644\r\n--- a/crates/ty_python_semantic/src/types/infer.rs\r\n+++ b/crates/ty_python_semantic/src/types/infer.rs\r\n@@ -8475,19 +8475,7 @@ impl<'db, 'ast> TypeInferenceBuilder<'db, 'ast> {\r\n                     );\r\n                 }\r\n\r\n-                match value_ty {\r\n-                    Type::ClassLiteral(_) => {\r\n-                        // TODO: proper support for generic classes\r\n-                        // For now, just infer `Sequence`, if we see something like `Sequence[str]`. This allows us\r\n-                        // to look up attributes on generic base classes, even if we don't understand generics yet.\r\n-                        // Note that this isn't handled by the clause up above for generic classes\r\n-                        // that use legacy type variables and an explicit `Generic` base class.\r\n-                        // Once we handle legacy typevars, this special case will be removed in\r\n-                        // favor of the specialization logic above.\r\n-                        value_ty\r\n-                    }\r\n-                    _ => Type::unknown(),\r\n-                }\r\n+                Type::unknown()\r\n             }\r\n         }\r\n     }\r\n```",
        "pr_file_module": null
      }
    ]
  }
]