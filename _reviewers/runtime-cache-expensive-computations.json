[
  {
    "discussion_id": "2127992389",
    "pr_number": 116082,
    "pr_file": "src/coreclr/tools/Common/TypeSystem/Common/TypeSystemHelpers.cs",
    "created_at": "2025-06-05T05:38:04+00:00",
    "commented_code": "public static bool HasLayout(this MetadataType mdType)\n        {\n            return mdType.IsSequentialLayout || mdType.IsExplicitLayout;\n            return mdType.GetClassLayout().Kind != MetadataLayoutKind.Auto;",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2127992389",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 116082,
        "pr_file": "src/coreclr/tools/Common/TypeSystem/Common/TypeSystemHelpers.cs",
        "discussion_id": "2127992389",
        "commented_code": "@@ -67,7 +67,7 @@ public static TypeDesc GetParameterType(this TypeDesc type)\n \n         public static bool HasLayout(this MetadataType mdType)\n         {\n-            return mdType.IsSequentialLayout || mdType.IsExplicitLayout;\n+            return mdType.GetClassLayout().Kind != MetadataLayoutKind.Auto;",
        "comment_created_at": "2025-06-05T05:38:04+00:00",
        "comment_author": "jkotas",
        "comment_body": "This is an expensive way to compute a bool. Should we have a virtual property for this?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2147387042",
    "pr_number": 116082,
    "pr_file": "src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/CompilerMetadataFieldLayoutAlgorithm.cs",
    "created_at": "2025-06-15T00:48:44+00:00",
    "commented_code": "protected override ComputedInstanceFieldLayout ComputeInstanceFieldLayout(MetadataType type, int numInstanceFields)\n        {\n            if (type.IsExplicitLayout)\n            return type.GetClassLayout().Kind switch\n            {\n                return ComputeExplicitFieldLayout(type, numInstanceFields);\n            }\n            // Sequential layout has to be respected for blittable types only. We use approximation and respect it for\n            // all types without GC references (ie C# unmanaged types).\n            else if (type.IsSequentialLayout && !type.ContainsGCPointers)\n            {\n                return ComputeSequentialFieldLayout(type, numInstanceFields);\n            }\n            else\n            {\n                return ComputeAutoFieldLayout(type, numInstanceFields);\n            }\n                MetadataLayoutKind.Explicit => ComputeExplicitFieldLayout(type, numInstanceFields),",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2147387042",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 116082,
        "pr_file": "src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/CompilerMetadataFieldLayoutAlgorithm.cs",
        "discussion_id": "2147387042",
        "commented_code": "@@ -41,20 +41,15 @@ protected override void FinalizeRuntimeSpecificStaticFieldLayout(TypeSystemConte\n \n         protected override ComputedInstanceFieldLayout ComputeInstanceFieldLayout(MetadataType type, int numInstanceFields)\n         {\n-            if (type.IsExplicitLayout)\n+            return type.GetClassLayout().Kind switch\n             {\n-                return ComputeExplicitFieldLayout(type, numInstanceFields);\n-            }\n-            // Sequential layout has to be respected for blittable types only. We use approximation and respect it for\n-            // all types without GC references (ie C# unmanaged types).\n-            else if (type.IsSequentialLayout && !type.ContainsGCPointers)\n-            {\n-                return ComputeSequentialFieldLayout(type, numInstanceFields);\n-            }\n-            else\n-            {\n-                return ComputeAutoFieldLayout(type, numInstanceFields);\n-            }\n+                MetadataLayoutKind.Explicit => ComputeExplicitFieldLayout(type, numInstanceFields),",
        "comment_created_at": "2025-06-15T00:48:44+00:00",
        "comment_author": "jkotas",
        "comment_body": "Pass the result of `type.GetClassLayout()` to the worked methods to avoid recomputing it? (All except `ComputeCStructFieldLayout` needs it on some path.) It can be passed around as `in` since it is likely going grow into a large struct over time.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2172434186",
    "pr_number": 117080,
    "pr_file": "src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/ObjectDataInterner.cs",
    "created_at": "2025-06-27T16:41:52+00:00",
    "commented_code": "if (_symbolRemapping != null)\n                return;\n\n            var symbolRemapping = new Dictionary<ISymbolNode, ISymbolNode>();\n            var methodHash = new HashSet<MethodInternKey>(new MethodInternComparer(factory));\n            Dictionary<ISymbolNode, ISymbolNode> previousSymbolRemapping;\n            Dictionary<ISymbolNode, ISymbolNode> symbolRemapping = null;\n\n            foreach (IMethodBodyNode body in factory.MetadataManager.GetCompiledMethodBodies())\n            do\n            {\n                // We don't track special unboxing thunks as virtual method use related so ignore them\n                if (body is ISpecialUnboxThunkNode unboxThunk && unboxThunk.IsSpecialUnboxingThunk)\n                    continue;\n                previousSymbolRemapping = symbolRemapping;\n                var methodHash = new HashSet<MethodInternKey>(new MethodInternComparer(factory, previousSymbolRemapping));\n                symbolRemapping = new Dictionary<ISymbolNode, ISymbolNode>();",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2172434186",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 117080,
        "pr_file": "src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/ObjectDataInterner.cs",
        "discussion_id": "2172434186",
        "commented_code": "@@ -25,30 +25,37 @@ private void EnsureMap(NodeFactory factory)\n             if (_symbolRemapping != null)\n                 return;\n \n-            var symbolRemapping = new Dictionary<ISymbolNode, ISymbolNode>();\n-            var methodHash = new HashSet<MethodInternKey>(new MethodInternComparer(factory));\n+            Dictionary<ISymbolNode, ISymbolNode> previousSymbolRemapping;\n+            Dictionary<ISymbolNode, ISymbolNode> symbolRemapping = null;\n \n-            foreach (IMethodBodyNode body in factory.MetadataManager.GetCompiledMethodBodies())\n+            do\n             {\n-                // We don't track special unboxing thunks as virtual method use related so ignore them\n-                if (body is ISpecialUnboxThunkNode unboxThunk && unboxThunk.IsSpecialUnboxingThunk)\n-                    continue;\n+                previousSymbolRemapping = symbolRemapping;\n+                var methodHash = new HashSet<MethodInternKey>(new MethodInternComparer(factory, previousSymbolRemapping));\n+                symbolRemapping = new Dictionary<ISymbolNode, ISymbolNode>();",
        "comment_created_at": "2025-06-27T16:41:52+00:00",
        "comment_author": "jkotas",
        "comment_body": "Pre-allocate this HashSet and Dictionary to avoid re-hashing?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2176495585",
    "pr_number": 117080,
    "pr_file": "src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/ObjectDataInterner.cs",
    "created_at": "2025-07-01T05:59:05+00:00",
    "commented_code": "if (_symbolRemapping != null)\n                return;\n\n            HashSet<MethodInternKey> previousMethodHash;\n            HashSet<MethodInternKey> methodHash = null;\n            Dictionary<ISymbolNode, ISymbolNode> previousSymbolRemapping;\n            Dictionary<ISymbolNode, ISymbolNode> symbolRemapping = null;\n\n            do\n            {\n                previousMethodHash = methodHash;\n                previousSymbolRemapping = symbolRemapping;\n                var methodHash = new HashSet<MethodInternKey>(new MethodInternComparer(factory, previousSymbolRemapping));\n                symbolRemapping = new Dictionary<ISymbolNode, ISymbolNode>();\n                methodHash = new HashSet<MethodInternKey>(previousMethodHash?.Count ?? 0, new MethodInternComparer(factory, previousSymbolRemapping));\n                symbolRemapping = new Dictionary<ISymbolNode, ISymbolNode>(previousSymbolRemapping?.Count ?? 0);",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2176495585",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 117080,
        "pr_file": "src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/ObjectDataInterner.cs",
        "discussion_id": "2176495585",
        "commented_code": "@@ -25,14 +25,17 @@ private void EnsureMap(NodeFactory factory)\n             if (_symbolRemapping != null)\n                 return;\n \n+            HashSet<MethodInternKey> previousMethodHash;\n+            HashSet<MethodInternKey> methodHash = null;\n             Dictionary<ISymbolNode, ISymbolNode> previousSymbolRemapping;\n             Dictionary<ISymbolNode, ISymbolNode> symbolRemapping = null;\n \n             do\n             {\n+                previousMethodHash = methodHash;\n                 previousSymbolRemapping = symbolRemapping;\n-                var methodHash = new HashSet<MethodInternKey>(new MethodInternComparer(factory, previousSymbolRemapping));\n-                symbolRemapping = new Dictionary<ISymbolNode, ISymbolNode>();\n+                methodHash = new HashSet<MethodInternKey>(previousMethodHash?.Count ?? 0, new MethodInternComparer(factory, previousSymbolRemapping));\n+                symbolRemapping = new Dictionary<ISymbolNode, ISymbolNode>(previousSymbolRemapping?.Count ?? 0);",
        "comment_created_at": "2025-07-01T05:59:05+00:00",
        "comment_author": "jkotas",
        "comment_body": "```suggestion\r\n                symbolRemapping = new Dictionary<ISymbolNode, ISymbolNode>((int)(1.05 * (previousSymbolRemapping?.Count ?? 0)));\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2176497054",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 117080,
        "pr_file": "src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/ObjectDataInterner.cs",
        "discussion_id": "2176495585",
        "commented_code": "@@ -25,14 +25,17 @@ private void EnsureMap(NodeFactory factory)\n             if (_symbolRemapping != null)\n                 return;\n \n+            HashSet<MethodInternKey> previousMethodHash;\n+            HashSet<MethodInternKey> methodHash = null;\n             Dictionary<ISymbolNode, ISymbolNode> previousSymbolRemapping;\n             Dictionary<ISymbolNode, ISymbolNode> symbolRemapping = null;\n \n             do\n             {\n+                previousMethodHash = methodHash;\n                 previousSymbolRemapping = symbolRemapping;\n-                var methodHash = new HashSet<MethodInternKey>(new MethodInternComparer(factory, previousSymbolRemapping));\n-                symbolRemapping = new Dictionary<ISymbolNode, ISymbolNode>();\n+                methodHash = new HashSet<MethodInternKey>(previousMethodHash?.Count ?? 0, new MethodInternComparer(factory, previousSymbolRemapping));\n+                symbolRemapping = new Dictionary<ISymbolNode, ISymbolNode>(previousSymbolRemapping?.Count ?? 0);",
        "comment_created_at": "2025-07-01T06:00:21+00:00",
        "comment_author": "jkotas",
        "comment_body": "Otherwise, we are guaranteed to rehash the whole thing on most iterations just to add a few more elements.",
        "pr_file_module": null
      }
    ]
  }
]