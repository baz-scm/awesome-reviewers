[
  {
    "discussion_id": "2180071388",
    "pr_number": 116852,
    "pr_file": "src/coreclr/jit/lowerarmarch.cpp",
    "created_at": "2025-07-02T13:28:12+00:00",
    "commented_code": "ContainCheckNode(mod);\n}\n\n//------------------------------------------------------------------------\n// LowerCnsMask: Lower GT_CNS_MSK. Ensure the mask matches a known pattern.\n//               If not then lower to a constant vector.\n//\n// Arguments:\n//    mask - the node to lower\n//\nGenTree* Lowering::LowerCnsMask(GenTreeMskCon* mask)\n{\n    // Try every type until a match is found\n\n    if (mask->IsZero())\n    {\n        return mask->gtNext;\n    }\n\n    if (EvaluateSimdMaskToPattern<simd16_t>(TYP_BYTE, mask->gtSimdMaskVal) != SveMaskPatternNone)\n    {\n        return mask->gtNext;\n    }\n\n    if (EvaluateSimdMaskToPattern<simd16_t>(TYP_SHORT, mask->gtSimdMaskVal) != SveMaskPatternNone)\n    {\n        return mask->gtNext;\n    }\n\n    if (EvaluateSimdMaskToPattern<simd16_t>(TYP_INT, mask->gtSimdMaskVal) != SveMaskPatternNone)\n    {\n        return mask->gtNext;\n    }\n\n    if (EvaluateSimdMaskToPattern<simd16_t>(TYP_LONG, mask->gtSimdMaskVal) != SveMaskPatternNone)\n    {\n        return mask->gtNext;\n    }\n\n    // Not a valid pattern, so cannot be created using ptrue/pfalse. Instead the mask will require\n    // loading from memory. There is no way to load to a predicate from memory using a PC relative\n    // address, so instead use a constant vector plus conversion to mask.\n\n    LABELEDDISPTREERANGE(\"lowering cns mask to cns vector (before)\", BlockRange(), mask);\n\n    LIR::Use use;\n    if (!BlockRange().TryGetUse(mask, &use))\n    {\n        unreached();\n    }",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2180071388",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 116852,
        "pr_file": "src/coreclr/jit/lowerarmarch.cpp",
        "discussion_id": "2180071388",
        "commented_code": "@@ -1134,6 +1134,78 @@ void Lowering::LowerModPow2(GenTree* node)\n     ContainCheckNode(mod);\n }\n \n+//------------------------------------------------------------------------\n+// LowerCnsMask: Lower GT_CNS_MSK. Ensure the mask matches a known pattern.\n+//               If not then lower to a constant vector.\n+//\n+// Arguments:\n+//    mask - the node to lower\n+//\n+GenTree* Lowering::LowerCnsMask(GenTreeMskCon* mask)\n+{\n+    // Try every type until a match is found\n+\n+    if (mask->IsZero())\n+    {\n+        return mask->gtNext;\n+    }\n+\n+    if (EvaluateSimdMaskToPattern<simd16_t>(TYP_BYTE, mask->gtSimdMaskVal) != SveMaskPatternNone)\n+    {\n+        return mask->gtNext;\n+    }\n+\n+    if (EvaluateSimdMaskToPattern<simd16_t>(TYP_SHORT, mask->gtSimdMaskVal) != SveMaskPatternNone)\n+    {\n+        return mask->gtNext;\n+    }\n+\n+    if (EvaluateSimdMaskToPattern<simd16_t>(TYP_INT, mask->gtSimdMaskVal) != SveMaskPatternNone)\n+    {\n+        return mask->gtNext;\n+    }\n+\n+    if (EvaluateSimdMaskToPattern<simd16_t>(TYP_LONG, mask->gtSimdMaskVal) != SveMaskPatternNone)\n+    {\n+        return mask->gtNext;\n+    }\n+\n+    // Not a valid pattern, so cannot be created using ptrue/pfalse. Instead the mask will require\n+    // loading from memory. There is no way to load to a predicate from memory using a PC relative\n+    // address, so instead use a constant vector plus conversion to mask.\n+\n+    LABELEDDISPTREERANGE(\"lowering cns mask to cns vector (before)\", BlockRange(), mask);\n+\n+    LIR::Use use;\n+    if (!BlockRange().TryGetUse(mask, &use))\n+    {\n+        unreached();\n+    }",
        "comment_created_at": "2025-07-02T13:28:12+00:00",
        "comment_author": "tannergooding",
        "comment_body": "We shouldn't assert unreached here. There are always scenarios where unused values get preserved, such as min-opts, and so we should prefer the typical pattern of `if (foundUse) { use.ReplaceWith(node); } else { node->SetUnusedValue(); }`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "423804786",
    "pr_number": 36267,
    "pr_file": "src/coreclr/src/jit/importer.cpp",
    "created_at": "2020-05-12T15:00:26+00:00",
    "commented_code": "if (mustExpand && (retNode == nullptr))\n    {\n        NO_WAY(\"JIT must expand the intrinsic!\");\n        assert(!\"Unhandled must expand intrinsic, throwing PlatformNotSupportedException\");\n        return impUnsupportedHWIntrinsic(CORINFO_HELP_THROW_PLATFORM_NOT_SUPPORTED, method, sig, mustExpand);",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "423804786",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 36267,
        "pr_file": "src/coreclr/src/jit/importer.cpp",
        "discussion_id": "423804786",
        "commented_code": "@@ -4272,7 +4272,8 @@ GenTree* Compiler::impIntrinsic(GenTree*                newobjThis,\n \n     if (mustExpand && (retNode == nullptr))\n     {\n-        NO_WAY(\"JIT must expand the intrinsic!\");\n+        assert(!\"Unhandled must expand intrinsic, throwing PlatformNotSupportedException\");\n+        return impUnsupportedHWIntrinsic(CORINFO_HELP_THROW_PLATFORM_NOT_SUPPORTED, method, sig, mustExpand);",
        "comment_created_at": "2020-05-12T15:00:26+00:00",
        "comment_author": "tannergooding",
        "comment_body": "Previously the JIT would fail fast with `The JIT compiler encountered invalid IL code or an internal limitation.`\r\n\r\nNow, it will assert in debug mode but will `throw PlatformNotSupportedException` at runtime.",
        "pr_file_module": null
      },
      {
        "comment_id": "423899202",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 36267,
        "pr_file": "src/coreclr/src/jit/importer.cpp",
        "discussion_id": "423804786",
        "commented_code": "@@ -4272,7 +4272,8 @@ GenTree* Compiler::impIntrinsic(GenTree*                newobjThis,\n \n     if (mustExpand && (retNode == nullptr))\n     {\n-        NO_WAY(\"JIT must expand the intrinsic!\");\n+        assert(!\"Unhandled must expand intrinsic, throwing PlatformNotSupportedException\");\n+        return impUnsupportedHWIntrinsic(CORINFO_HELP_THROW_PLATFORM_NOT_SUPPORTED, method, sig, mustExpand);",
        "comment_created_at": "2020-05-12T17:12:55+00:00",
        "comment_author": "tannergooding",
        "comment_body": "~This was changed to not use `impUnsupportedHWIntrinsic` and instead use `gtNewMustThrowException` directly.~\r\n\r\n`impUnsupportedHWIntrinsic` was renamed to `impUnsupportedNamedIntrinsic` and moved out of `FEATURE_HW_INTRINSIC`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2109477545",
    "pr_number": 116010,
    "pr_file": "src/coreclr/nativeaot/Runtime/ThunksMapping.cpp",
    "created_at": "2025-05-27T15:14:31+00:00",
    "commented_code": "}\nFCIMPLEND\n\nEXTERN_C void* QCALLTYPE RhAllocateThunksMapping()\nEXTERN_C void* QCALLTYPE RhAllocateThunksMapping(int* isOOM)",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2109477545",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 116010,
        "pr_file": "src/coreclr/nativeaot/Runtime/ThunksMapping.cpp",
        "discussion_id": "2109477545",
        "commented_code": "@@ -100,13 +100,18 @@ FCIMPL0(int, RhpGetThunkBlockSize)\n }\n FCIMPLEND\n \n-EXTERN_C void* QCALLTYPE RhAllocateThunksMapping()\n+EXTERN_C void* QCALLTYPE RhAllocateThunksMapping(int* isOOM)",
        "comment_created_at": "2025-05-27T15:14:31+00:00",
        "comment_author": "jkotas",
        "comment_body": "It is unusual to return error code via out argument, and only allow that error code to be OOM.\r\n\r\nCan we return proper error code, and return the pointer via `[out]` argument instead?\r\n\r\nThe error code can be an HRESULT or an enum specific to this call. (I know HRESULTs are Windows-specific, but they are part of BCL Exception so they are not going away x-plat, so there is not much value in trying hard to avoid them.)",
        "pr_file_module": null
      },
      {
        "comment_id": "2111355098",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 116010,
        "pr_file": "src/coreclr/nativeaot/Runtime/ThunksMapping.cpp",
        "discussion_id": "2109477545",
        "commented_code": "@@ -100,13 +100,18 @@ FCIMPL0(int, RhpGetThunkBlockSize)\n }\n FCIMPLEND\n \n-EXTERN_C void* QCALLTYPE RhAllocateThunksMapping()\n+EXTERN_C void* QCALLTYPE RhAllocateThunksMapping(int* isOOM)",
        "comment_created_at": "2025-05-28T09:13:04+00:00",
        "comment_author": "MichalStrehovsky",
        "comment_body": "Good idea with reusing HRESULT! I didn't like the bool either, but I didn't want to invent a dedicated enum that we need to keep in sync between native and managed.",
        "pr_file_module": null
      },
      {
        "comment_id": "2114772864",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 116010,
        "pr_file": "src/coreclr/nativeaot/Runtime/ThunksMapping.cpp",
        "discussion_id": "2109477545",
        "commented_code": "@@ -100,13 +100,18 @@ FCIMPL0(int, RhpGetThunkBlockSize)\n }\n FCIMPLEND\n \n-EXTERN_C void* QCALLTYPE RhAllocateThunksMapping()\n+EXTERN_C void* QCALLTYPE RhAllocateThunksMapping(int* isOOM)",
        "comment_created_at": "2025-05-29T21:24:11+00:00",
        "comment_author": "MichalStrehovsky",
        "comment_body": "@AaronRobinsonMSFT deleted the HRESULT definitions in #115858 so this no longer compiles.\r\n\r\nI would prefer going back to the bool if we don't want HRESULTs anymore.",
        "pr_file_module": null
      },
      {
        "comment_id": "2114808353",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 116010,
        "pr_file": "src/coreclr/nativeaot/Runtime/ThunksMapping.cpp",
        "discussion_id": "2109477545",
        "commented_code": "@@ -100,13 +100,18 @@ FCIMPL0(int, RhpGetThunkBlockSize)\n }\n FCIMPLEND\n \n-EXTERN_C void* QCALLTYPE RhAllocateThunksMapping()\n+EXTERN_C void* QCALLTYPE RhAllocateThunksMapping(int* isOOM)",
        "comment_created_at": "2025-05-29T21:55:03+00:00",
        "comment_author": "jkotas",
        "comment_body": "I think it is fine add back what you need to get this to compile. ",
        "pr_file_module": null
      }
    ]
  }
]