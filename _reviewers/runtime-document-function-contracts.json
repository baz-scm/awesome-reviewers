[
  {
    "discussion_id": "2143736572",
    "pr_number": 116310,
    "pr_file": "src/coreclr/vm/interoplibinterface_shared.cpp",
    "created_at": "2025-06-12T22:05:57+00:00",
    "commented_code": "ObjCMarshalNative::AfterRefCountedHandleCallbacks();\n#endif // FEATURE_OBJCMARSHAL\n}\n\n#ifdef FEATURE_GCBRIDGE\n\nnamespace\n{\n    Volatile<BOOL> g_GCBridgeActive = FALSE;\n    CLREvent* g_bridgeFinished = nullptr;\n\n    void ReleaseGCBridgeArgumentsWorker(\n        _In_ size_t sccsLen,\n        _In_ StronglyConnectedComponent* sccs,\n        _In_ ComponentCrossReference* ccrs)\n    {\n        CONTRACTL\n        {\n            NOTHROW;\n            GC_NOTRIGGER;\n        }\n        CONTRACTL_END;\n\n        // Memory was allocated for the collections by the GC.\n        // See callers of GCToEEInterface::TriggerGCBridge().\n\n        // Free memory in each of the SCCs\n        for (size_t i = 0; i < sccsLen; i++)\n        {\n            free(sccs[i].Context);\n        }\n        free(sccs);\n        free(ccrs);\n    }\n}\n\nbool Interop::IsGCBridgeActive()\n{\n    LIMITED_METHOD_CONTRACT;\n\n    return g_GCBridgeActive;\n}\n\nvoid Interop::WaitForGCBridgeFinish()\n{\n    CONTRACTL\n    {\n        MODE_COOPERATIVE;\n    }\n    CONTRACTL_END;\n\n    while (g_GCBridgeActive)\n    {\n        GCX_PREEMP();\n        g_bridgeFinished->Wait(INFINITE, false);\n        // In theory, even though we waited for bridge to finish, because we are in preemptive mode\n        // the thread could have been suspended and another GC could have happened, triggering bridge\n        // processing again. In this case we would wait again for bridge processing.\n    }\n}\n\nvoid Interop::TriggerClientBridgeProcessing(\n    _In_ size_t sccsLen,\n    _In_ StronglyConnectedComponent* sccs,\n    _In_ size_t ccrsLen,\n    _In_ ComponentCrossReference* ccrs)\n{\n    CONTRACTL\n    {\n        NOTHROW;\n        GC_NOTRIGGER;\n    }\n    CONTRACTL_END;",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2143736572",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 116310,
        "pr_file": "src/coreclr/vm/interoplibinterface_shared.cpp",
        "discussion_id": "2143736572",
        "commented_code": "@@ -154,3 +154,138 @@ void Interop::OnAfterGCScanRoots(_In_ bool isConcurrent)\n         ObjCMarshalNative::AfterRefCountedHandleCallbacks();\n #endif // FEATURE_OBJCMARSHAL\n }\n+\n+#ifdef FEATURE_GCBRIDGE\n+\n+namespace\n+{\n+    Volatile<BOOL> g_GCBridgeActive = FALSE;\n+    CLREvent* g_bridgeFinished = nullptr;\n+\n+    void ReleaseGCBridgeArgumentsWorker(\n+        _In_ size_t sccsLen,\n+        _In_ StronglyConnectedComponent* sccs,\n+        _In_ ComponentCrossReference* ccrs)\n+    {\n+        CONTRACTL\n+        {\n+            NOTHROW;\n+            GC_NOTRIGGER;\n+        }\n+        CONTRACTL_END;\n+\n+        // Memory was allocated for the collections by the GC.\n+        // See callers of GCToEEInterface::TriggerGCBridge().\n+\n+        // Free memory in each of the SCCs\n+        for (size_t i = 0; i < sccsLen; i++)\n+        {\n+            free(sccs[i].Context);\n+        }\n+        free(sccs);\n+        free(ccrs);\n+    }\n+}\n+\n+bool Interop::IsGCBridgeActive()\n+{\n+    LIMITED_METHOD_CONTRACT;\n+\n+    return g_GCBridgeActive;\n+}\n+\n+void Interop::WaitForGCBridgeFinish()\n+{\n+    CONTRACTL\n+    {\n+        MODE_COOPERATIVE;\n+    }\n+    CONTRACTL_END;\n+\n+    while (g_GCBridgeActive)\n+    {\n+        GCX_PREEMP();\n+        g_bridgeFinished->Wait(INFINITE, false);\n+        // In theory, even though we waited for bridge to finish, because we are in preemptive mode\n+        // the thread could have been suspended and another GC could have happened, triggering bridge\n+        // processing again. In this case we would wait again for bridge processing.\n+    }\n+}\n+\n+void Interop::TriggerClientBridgeProcessing(\n+    _In_ size_t sccsLen,\n+    _In_ StronglyConnectedComponent* sccs,\n+    _In_ size_t ccrsLen,\n+    _In_ ComponentCrossReference* ccrs)\n+{\n+    CONTRACTL\n+    {\n+        NOTHROW;\n+        GC_NOTRIGGER;\n+    }\n+    CONTRACTL_END;",
        "comment_created_at": "2025-06-12T22:05:57+00:00",
        "comment_author": "jkoritzinsky",
        "comment_body": "Can we add an a `PRECONDITION` for this being called during GC suspension? Makes it easier to understand the flow without tracing all of the callers (same for JavaNative::TriggerClientBridgeProcessing) especially since the contract doesn't have a GC mode requirement.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1020466658",
    "pr_number": 78236,
    "pr_file": "src/coreclr/jit/gentree.cpp",
    "created_at": "2022-11-11T18:26:43+00:00",
    "commented_code": "return gtNewSimdHWIntrinsicNode(type, op1, hwIntrinsicID, simdBaseJitType, simdSize, isSimdAsHWIntrinsic);\n}\n\nGenTree* Compiler::gtNewSimdCreateScalarNode(",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "1020466658",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 78236,
        "pr_file": "src/coreclr/jit/gentree.cpp",
        "discussion_id": "1020466658",
        "commented_code": "@@ -21054,6 +21150,225 @@ GenTree* Compiler::gtNewSimdCreateBroadcastNode(\n     return gtNewSimdHWIntrinsicNode(type, op1, hwIntrinsicID, simdBaseJitType, simdSize, isSimdAsHWIntrinsic);\n }\n \n+GenTree* Compiler::gtNewSimdCreateScalarNode(",
        "comment_created_at": "2022-11-11T18:26:43+00:00",
        "comment_author": "SingleAccretion",
        "comment_body": "Needs a header comment.\r\n\r\n(I realize some (most) other function here don't have them, but we should still add them for new code)",
        "pr_file_module": null
      },
      {
        "comment_id": "1020478402",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 78236,
        "pr_file": "src/coreclr/jit/gentree.cpp",
        "discussion_id": "1020466658",
        "commented_code": "@@ -21054,6 +21150,225 @@ GenTree* Compiler::gtNewSimdCreateBroadcastNode(\n     return gtNewSimdHWIntrinsicNode(type, op1, hwIntrinsicID, simdBaseJitType, simdSize, isSimdAsHWIntrinsic);\n }\n \n+GenTree* Compiler::gtNewSimdCreateScalarNode(",
        "comment_created_at": "2022-11-11T18:43:33+00:00",
        "comment_author": "tannergooding",
        "comment_body": "Fixed.",
        "pr_file_module": null
      }
    ]
  }
]