[
  {
    "discussion_id": "2144142323",
    "pr_number": 113956,
    "pr_file": "src/coreclr/jit/instrsxarch.h",
    "created_at": "2025-06-13T03:36:51+00:00",
    "commented_code": "INST3(vmovd_simd,       \"movd\",             IUM_WR, PCKDBL(0xD6),           BAD_CODE,     SSEFLT(0x7E),                  INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_EVEX)                                                                                                                                  // Move DWORD between xmm regs <-> memory/xmm regs\nINST3(vmovw_simd,       \"movw\",             IUM_WR, SSEFLTMAP(0x05, 0x7E),  BAD_CODE,     SSEFLTMAP(0x05, 0x6E),         INS_TT_TUPLE1_SCALAR,                Input_16Bit                      | REX_W0       | Encoding_EVEX)                                                                                                                                  // Move WORD  between xmm regs <-> memory/xmm regs\nINST3(vmpsadbw,         \"mpsadbw\",          IUM_WR, BAD_CODE,               BAD_CODE,     AVX3A(0x42),                   INS_TT_FULL_MEM,                                      KMask_Base8     | REX_W0       | Encoding_EVEX             | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Compute Multiple Packed Sums of Absolute Difference\nINST3(vpdpbssd,         \"pdpbssd\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf2, 0x50),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\nINST3(vpdpbssds,        \"pdpbssds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf2, 0x51),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\nINST3(vpdpbsud,         \"pdpbsud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0x50),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\nINST3(vpdpbsuds,        \"pdpbsuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0x51),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\nINST3(vpdpbuud,         \"pdpbuud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0x50),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\nINST3(vpdpbuuds,        \"pdpbuuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0x51),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\nINST3(vpdpwsud,         \"pdpwsud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0xD2),            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\nINST3(vpdpwsuds,        \"pdpwsuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0xD3),            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\nINST3(vpdpwusd,         \"pdpwusd\",          IUM_WR, BAD_CODE,               BAD_CODE,     SSE38(0xD2),                   INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\nINST3(vpdpwusds,        \"pdpwusds\",         IUM_WR, BAD_CODE,               BAD_CODE,     SSE38(0xD3),                   INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\nINST3(vpdpwuud,         \"pdpwuud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0xD2),            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\nINST3(vpdpwuuds,        \"pdpwuuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0xD3),            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\nINST3(vucomxsd,         \"ucomxsd\",          IUM_RD, BAD_CODE,               BAD_CODE,     SSEFLT(0x2f),                  INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_EVEX    | Writes_OF | Writes_SF | Writes_ZF | Writes_PF | Writes_CF | Resets_AF)                                                       // Perform an unordered compare of double precision floating point values and set flags\nINST3(vucomxss,         \"ucomxss\",          IUM_RD, BAD_CODE,               BAD_CODE,     SSEDBL(0x2E),                  INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_EVEX    | Writes_OF | Writes_SF | Writes_ZF | Writes_PF | Writes_CF | Resets_AF)                                                       // Perform an unordered compare of single precision floating point values and set flags\n#define LAST_AVX512_INSTRUCTION INS_vucomxss\n\n#define FIRST_AVXVNNIINT8_INSTRUCTION INS_vpdpwsud\nINST3(vpdpwsud,         \"pdpwsud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0xD2),            INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\nINST3(vpdpwsuds,        \"pdpwsuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0xD3),            INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\nINST3(vpdpwusd,         \"pdpwusd\",          IUM_WR, BAD_CODE,               BAD_CODE,     SSE38(0xD2),                   INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\nINST3(vpdpwusds,        \"pdpwusds\",         IUM_WR, BAD_CODE,               BAD_CODE,     SSE38(0xD3),                   INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\nINST3(vpdpwuud,         \"pdpwuud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0xD2),            INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\nINST3(vpdpwuuds,        \"pdpwuuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0xD3),            INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n#define LAST_AVXVNNIINT8_INSTRUCTION INS_vpdpwuuds",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2144142323",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 113956,
        "pr_file": "src/coreclr/jit/instrsxarch.h",
        "discussion_id": "2144142323",
        "commented_code": "@@ -1107,21 +1107,27 @@ INST3(vminmaxss,        \"minmaxss\",         IUM_WR, BAD_CODE,               BAD_\n INST3(vmovd_simd,       \"movd\",             IUM_WR, PCKDBL(0xD6),           BAD_CODE,     SSEFLT(0x7E),                  INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_EVEX)                                                                                                                                  // Move DWORD between xmm regs <-> memory/xmm regs\n INST3(vmovw_simd,       \"movw\",             IUM_WR, SSEFLTMAP(0x05, 0x7E),  BAD_CODE,     SSEFLTMAP(0x05, 0x6E),         INS_TT_TUPLE1_SCALAR,                Input_16Bit                      | REX_W0       | Encoding_EVEX)                                                                                                                                  // Move WORD  between xmm regs <-> memory/xmm regs\n INST3(vmpsadbw,         \"mpsadbw\",          IUM_WR, BAD_CODE,               BAD_CODE,     AVX3A(0x42),                   INS_TT_FULL_MEM,                                      KMask_Base8     | REX_W0       | Encoding_EVEX             | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Compute Multiple Packed Sums of Absolute Difference\n-INST3(vpdpbssd,         \"pdpbssd\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf2, 0x50),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\n-INST3(vpdpbssds,        \"pdpbssds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf2, 0x51),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\n-INST3(vpdpbsud,         \"pdpbsud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0x50),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\n-INST3(vpdpbsuds,        \"pdpbsuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0x51),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\n-INST3(vpdpbuud,         \"pdpbuud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0x50),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\n-INST3(vpdpbuuds,        \"pdpbuuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0x51),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\n-INST3(vpdpwsud,         \"pdpwsud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0xD2),            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n-INST3(vpdpwsuds,        \"pdpwsuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0xD3),            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n-INST3(vpdpwusd,         \"pdpwusd\",          IUM_WR, BAD_CODE,               BAD_CODE,     SSE38(0xD2),                   INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n-INST3(vpdpwusds,        \"pdpwusds\",         IUM_WR, BAD_CODE,               BAD_CODE,     SSE38(0xD3),                   INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n-INST3(vpdpwuud,         \"pdpwuud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0xD2),            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n-INST3(vpdpwuuds,        \"pdpwuuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0xD3),            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n INST3(vucomxsd,         \"ucomxsd\",          IUM_RD, BAD_CODE,               BAD_CODE,     SSEFLT(0x2f),                  INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_EVEX    | Writes_OF | Writes_SF | Writes_ZF | Writes_PF | Writes_CF | Resets_AF)                                                       // Perform an unordered compare of double precision floating point values and set flags\n INST3(vucomxss,         \"ucomxss\",          IUM_RD, BAD_CODE,               BAD_CODE,     SSEDBL(0x2E),                  INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_EVEX    | Writes_OF | Writes_SF | Writes_ZF | Writes_PF | Writes_CF | Resets_AF)                                                       // Perform an unordered compare of single precision floating point values and set flags\n-#define LAST_AVX512_INSTRUCTION INS_vucomxss\n+\n+#define FIRST_AVXVNNIINT8_INSTRUCTION INS_vpdpwsud\n+INST3(vpdpwsud,         \"pdpwsud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0xD2),            INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n+INST3(vpdpwsuds,        \"pdpwsuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0xD3),            INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n+INST3(vpdpwusd,         \"pdpwusd\",          IUM_WR, BAD_CODE,               BAD_CODE,     SSE38(0xD2),                   INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n+INST3(vpdpwusds,        \"pdpwusds\",         IUM_WR, BAD_CODE,               BAD_CODE,     SSE38(0xD3),                   INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n+INST3(vpdpwuud,         \"pdpwuud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0xD2),            INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n+INST3(vpdpwuuds,        \"pdpwuuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0xD3),            INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n+#define LAST_AVXVNNIINT8_INSTRUCTION INS_vpdpwuuds",
        "comment_created_at": "2025-06-13T03:36:51+00:00",
        "comment_author": "tannergooding",
        "comment_body": "nit: These should be moved up near the other `AVXVNNI` instructions so they're part of the `AVX` grouping rather than strictly the `AVX512` grouping checks.",
        "pr_file_module": null
      },
      {
        "comment_id": "2150962364",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 113956,
        "pr_file": "src/coreclr/jit/instrsxarch.h",
        "discussion_id": "2144142323",
        "commented_code": "@@ -1107,21 +1107,27 @@ INST3(vminmaxss,        \"minmaxss\",         IUM_WR, BAD_CODE,               BAD_\n INST3(vmovd_simd,       \"movd\",             IUM_WR, PCKDBL(0xD6),           BAD_CODE,     SSEFLT(0x7E),                  INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_EVEX)                                                                                                                                  // Move DWORD between xmm regs <-> memory/xmm regs\n INST3(vmovw_simd,       \"movw\",             IUM_WR, SSEFLTMAP(0x05, 0x7E),  BAD_CODE,     SSEFLTMAP(0x05, 0x6E),         INS_TT_TUPLE1_SCALAR,                Input_16Bit                      | REX_W0       | Encoding_EVEX)                                                                                                                                  // Move WORD  between xmm regs <-> memory/xmm regs\n INST3(vmpsadbw,         \"mpsadbw\",          IUM_WR, BAD_CODE,               BAD_CODE,     AVX3A(0x42),                   INS_TT_FULL_MEM,                                      KMask_Base8     | REX_W0       | Encoding_EVEX             | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Compute Multiple Packed Sums of Absolute Difference\n-INST3(vpdpbssd,         \"pdpbssd\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf2, 0x50),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\n-INST3(vpdpbssds,        \"pdpbssds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf2, 0x51),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\n-INST3(vpdpbsud,         \"pdpbsud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0x50),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\n-INST3(vpdpbsuds,        \"pdpbsuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0x51),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\n-INST3(vpdpbuud,         \"pdpbuud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0x50),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\n-INST3(vpdpbuuds,        \"pdpbuuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0x51),            INS_TT_FULL,                         Input_8Bit     | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual bytes of first source operand with individual bytes of second source operand and add the results\n-INST3(vpdpwsud,         \"pdpwsud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0xD2),            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n-INST3(vpdpwsuds,        \"pdpwsuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0xD3),            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n-INST3(vpdpwusd,         \"pdpwusd\",          IUM_WR, BAD_CODE,               BAD_CODE,     SSE38(0xD2),                   INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n-INST3(vpdpwusds,        \"pdpwusds\",         IUM_WR, BAD_CODE,               BAD_CODE,     SSE38(0xD3),                   INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n-INST3(vpdpwuud,         \"pdpwuud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0xD2),            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n-INST3(vpdpwuuds,        \"pdpwuuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0xD3),            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0       | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n INST3(vucomxsd,         \"ucomxsd\",          IUM_RD, BAD_CODE,               BAD_CODE,     SSEFLT(0x2f),                  INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_EVEX    | Writes_OF | Writes_SF | Writes_ZF | Writes_PF | Writes_CF | Resets_AF)                                                       // Perform an unordered compare of double precision floating point values and set flags\n INST3(vucomxss,         \"ucomxss\",          IUM_RD, BAD_CODE,               BAD_CODE,     SSEDBL(0x2E),                  INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_EVEX    | Writes_OF | Writes_SF | Writes_ZF | Writes_PF | Writes_CF | Resets_AF)                                                       // Perform an unordered compare of single precision floating point values and set flags\n-#define LAST_AVX512_INSTRUCTION INS_vucomxss\n+\n+#define FIRST_AVXVNNIINT8_INSTRUCTION INS_vpdpwsud\n+INST3(vpdpwsud,         \"pdpwsud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0xD2),            INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n+INST3(vpdpwsuds,        \"pdpwsuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0xf3, 0xD3),            INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n+INST3(vpdpwusd,         \"pdpwusd\",          IUM_WR, BAD_CODE,               BAD_CODE,     SSE38(0xD2),                   INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n+INST3(vpdpwusds,        \"pdpwusds\",         IUM_WR, BAD_CODE,               BAD_CODE,     SSE38(0xD3),                   INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n+INST3(vpdpwuud,         \"pdpwuud\",          IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0xD2),            INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n+INST3(vpdpwuuds,        \"pdpwuuds\",         IUM_WR, BAD_CODE,               BAD_CODE,     PSSE38(0x00, 0xD3),            INS_TT_FULL,                                          KMask_Base4     | REX_W0       |Encoding_VEX        | Encoding_EVEX                                                    | INS_Flags_IsDstSrcSrcAVXInstruction)                                         // Multiply individual words of first source operand with individual words of second source operand and add the results\n+#define LAST_AVXVNNIINT8_INSTRUCTION INS_vpdpwuuds",
        "comment_created_at": "2025-06-16T21:56:59+00:00",
        "comment_author": "khushal1996",
        "comment_body": "Moved.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2176057823",
    "pr_number": 117103,
    "pr_file": "src/libraries/System.Numerics.Tensors/src/System.Numerics.Tensors.csproj",
    "created_at": "2025-06-30T22:12:19+00:00",
    "commented_code": "<PackageDescription>Provides support for operating over tensors.</PackageDescription>\n    <GenAPIExcludeApiList>ReferenceAssemblyExclusions.txt</GenAPIExcludeApiList>\n    <GenAPITargetPath>$([MSBuild]::NormalizePath('$(MSBuildProjectDirectory)', '..', 'ref', '$(AssemblyName).netcore.cs'))</GenAPITargetPath>",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2176057823",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 117103,
        "pr_file": "src/libraries/System.Numerics.Tensors/src/System.Numerics.Tensors.csproj",
        "discussion_id": "2176057823",
        "commented_code": "@@ -7,16 +7,13 @@\n     <PackageDescription>Provides support for operating over tensors.</PackageDescription>\n     <GenAPIExcludeApiList>ReferenceAssemblyExclusions.txt</GenAPIExcludeApiList>\n     <GenAPITargetPath>$([MSBuild]::NormalizePath('$(MSBuildProjectDirectory)', '..', 'ref', '$(AssemblyName).netcore.cs'))</GenAPITargetPath>",
        "comment_created_at": "2025-06-30T22:12:19+00:00",
        "comment_author": "tannergooding",
        "comment_body": "```suggestion\r\n    <GenAPITargetPath>$([MSBuild]::NormalizePath('$(MSBuildProjectDirectory)', '..', 'ref', '$(AssemblyName).netcore.cs'))</GenAPITargetPath>\r\n    <!-- SA1001: Commas should not be preceded by a whitespace; needed due to ifdef -->\r\n    <NoWarn>$(NoWarn);SA1001</NoWarn>\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2166614837",
    "pr_number": 116779,
    "pr_file": "src/mono/mono/arch/s390x/s390x-codegen.h",
    "created_at": "2025-06-25T12:37:50+00:00",
    "commented_code": "#define s390_tmlh(c, r, m)\t\tS390_RI(c, 0xa70, r, m)\n#define s390_tmll(c, r, m)\t\tS390_RI(c, 0xa71, r, m)\n#define s390_tm(c, b, d, v)\t\tS390_SI(c, 0x91, b, d, v)\n#define s390_trap2(code)                S390_E(code, 0x01ff)\n#define s390_vab(c , v1, v2, v3)        S390_VRRc(c, 0xe7f3, v1, v2, v3, 0, 0, 0)",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2166614837",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 116779,
        "pr_file": "src/mono/mono/arch/s390x/s390x-codegen.h",
        "discussion_id": "2166614837",
        "commented_code": "@@ -1569,14 +1571,151 @@ typedef struct {\n #define s390_tmlh(c, r, m)\t\tS390_RI(c, 0xa70, r, m)\n #define s390_tmll(c, r, m)\t\tS390_RI(c, 0xa71, r, m)\n #define s390_tm(c, b, d, v)\t\tS390_SI(c, 0x91, b, d, v)\n+#define s390_trap2(code)                S390_E(code, 0x01ff)\n+#define s390_vab(c , v1, v2, v3)        S390_VRRc(c, 0xe7f3, v1, v2, v3, 0, 0, 0)",
        "comment_created_at": "2025-06-25T12:37:50+00:00",
        "comment_author": "uweigand",
        "comment_body": "Please use consistent formatting for all the new defines (no spaces before comma or parentheses), use tab instead of space between the two sides.",
        "pr_file_module": null
      }
    ]
  }
]