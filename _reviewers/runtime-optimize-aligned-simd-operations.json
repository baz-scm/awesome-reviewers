[
  {
    "discussion_id": "650254322",
    "pr_number": 54006,
    "pr_file": "src/libraries/Native/Unix/System.Native/pal_memory.c",
    "created_at": "2021-06-11T20:42:35+00:00",
    "commented_code": "#include <stdlib.h>\n#include <string.h>\n\nvoid* SystemNative_MemAlloc(uintptr_t size)\nvoid* SystemNative_AlignedAlloc(uintptr_t alignment, uintptr_t size)\n{\n    return malloc(size);\n#if HAVE_ALIGNED_ALLOC\n    return aligned_alloc(alignment, size);\n#elif\n    void* result = nullptr;\n    posix_memalign(&result, alignment, size);\n    return result;\n#else\n    #error \"Platform doesn't support aligned_alloc or posix_memalign\"",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "650254322",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 54006,
        "pr_file": "src/libraries/Native/Unix/System.Native/pal_memory.c",
        "discussion_id": "650254322",
        "commented_code": "@@ -6,22 +6,45 @@\n #include <stdlib.h>\n #include <string.h>\n \n-void* SystemNative_MemAlloc(uintptr_t size)\n+void* SystemNative_AlignedAlloc(uintptr_t alignment, uintptr_t size)\n {\n-    return malloc(size);\n+#if HAVE_ALIGNED_ALLOC\n+    return aligned_alloc(alignment, size);\n+#elif\n+    void* result = nullptr;\n+    posix_memalign(&result, alignment, size);\n+    return result;\n+#else\n+    #error \"Platform doesn't support aligned_alloc or posix_memalign\"",
        "comment_created_at": "2021-06-11T20:42:35+00:00",
        "comment_author": "tannergooding",
        "comment_body": "I have it erroring if `posix_memalign` isn't available as a fallback. `posix_memalign` is a very old (`_POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600`) function and should be always available.\r\n\r\nLikewise, I don't believe trying to polyfill via `malloc`/`free` is reliable as there is no guarantee that `free` works with arbitrary pointers:\r\n> The behavior is undefined if the value of ptr does not equal a value returned earlier by malloc(), calloc(), realloc(), or aligned_alloc() (since C11).\r\n\r\nLikewise, there is no reliable way to backtrack from a given aligned `ptr` to the actual `ptr` that `malloc` did return.",
        "pr_file_module": null
      },
      {
        "comment_id": "650259969",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 54006,
        "pr_file": "src/libraries/Native/Unix/System.Native/pal_memory.c",
        "discussion_id": "650254322",
        "commented_code": "@@ -6,22 +6,45 @@\n #include <stdlib.h>\n #include <string.h>\n \n-void* SystemNative_MemAlloc(uintptr_t size)\n+void* SystemNative_AlignedAlloc(uintptr_t alignment, uintptr_t size)\n {\n-    return malloc(size);\n+#if HAVE_ALIGNED_ALLOC\n+    return aligned_alloc(alignment, size);\n+#elif\n+    void* result = nullptr;\n+    posix_memalign(&result, alignment, size);\n+    return result;\n+#else\n+    #error \"Platform doesn't support aligned_alloc or posix_memalign\"",
        "comment_created_at": "2021-06-11T20:55:03+00:00",
        "comment_author": "jkotas",
        "comment_body": ">  I don't believe trying to polyfill via malloc/free is reliable as there is no guarantee that free works with arbitrary pointers:\r\n\r\nThe polyfill would have to be for both aligned alloc and free, something like this: https://github.com/dotnet/runtime/issues/33244#issuecomment-595848832",
        "pr_file_module": null
      },
      {
        "comment_id": "650262229",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 54006,
        "pr_file": "src/libraries/Native/Unix/System.Native/pal_memory.c",
        "discussion_id": "650254322",
        "commented_code": "@@ -6,22 +6,45 @@\n #include <stdlib.h>\n #include <string.h>\n \n-void* SystemNative_MemAlloc(uintptr_t size)\n+void* SystemNative_AlignedAlloc(uintptr_t alignment, uintptr_t size)\n {\n-    return malloc(size);\n+#if HAVE_ALIGNED_ALLOC\n+    return aligned_alloc(alignment, size);\n+#elif\n+    void* result = nullptr;\n+    posix_memalign(&result, alignment, size);\n+    return result;\n+#else\n+    #error \"Platform doesn't support aligned_alloc or posix_memalign\"",
        "comment_created_at": "2021-06-11T21:00:17+00:00",
        "comment_author": "tannergooding",
        "comment_body": "I'd like to see if any platforms don't actually have `posix_memalign` before falling back to storing the actual pointer before the returned pointer.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167013017",
    "pr_number": 116779,
    "pr_file": "src/mono/mono/mini/simd-intrinsics.c",
    "created_at": "2025-06-25T15:28:25+00:00",
    "commented_code": "case OP_XZERO:\n\tcase OP_XPHI:\n\tcase OP_LOADX_MEMBASE:\n#ifndef TARGET_S390X\n\tcase OP_LOADX_ALIGNED_MEMBASE:\n\tcase OP_STOREX_MEMBASE:\n\tcase OP_STOREX_ALIGNED_MEMBASE_REG:\n#endif",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2167013017",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 116779,
        "pr_file": "src/mono/mono/mini/simd-intrinsics.c",
        "discussion_id": "2167013017",
        "commented_code": "@@ -6725,9 +6885,11 @@ decompose_vtype_opt_uses_simd_intrinsics (MonoCompile *cfg, MonoInst *ins)\n \tcase OP_XZERO:\n \tcase OP_XPHI:\n \tcase OP_LOADX_MEMBASE:\n+#ifndef TARGET_S390X\n \tcase OP_LOADX_ALIGNED_MEMBASE:\n-\tcase OP_STOREX_MEMBASE:\n \tcase OP_STOREX_ALIGNED_MEMBASE_REG:\n+#endif",
        "comment_created_at": "2025-06-25T15:28:25+00:00",
        "comment_author": "uweigand",
        "comment_body": "Can't we just define the `ALIGNED` versions?   They could just be aliases for the unaligned versions, but in fact we *can* be more efficient by setting the alignment hint in the VL and VST instructions ...",
        "pr_file_module": null
      }
    ]
  }
]