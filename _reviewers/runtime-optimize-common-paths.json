[
  {
    "discussion_id": "2165844437",
    "pr_number": 105403,
    "pr_file": "src/coreclr/runtime/amd64/AllocFast.S",
    "created_at": "2025-06-25T05:53:21+00:00",
    "commented_code": "// Delegate overflow handling to the generic helper conservatively\n\n        cmp         rsi, (0x40000000 / 8) // sizeof(void*)\n        cmp         rsi, 0x8000000 // (0x40000000 / sizeof(void*))",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2165844437",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 105403,
        "pr_file": "src/coreclr/runtime/amd64/AllocFast.S",
        "discussion_id": "2165844437",
        "commented_code": "@@ -234,7 +234,7 @@ LEAF_ENTRY RhpNewPtrArrayFast, _TEXT\n \n         // Delegate overflow handling to the generic helper conservatively\n \n-        cmp         rsi, (0x40000000 / 8) // sizeof(void*)\n+        cmp         rsi, 0x8000000 // (0x40000000 / sizeof(void*))",
        "comment_created_at": "2025-06-25T05:53:21+00:00",
        "comment_author": "jkotas",
        "comment_body": "We build with both llvm and gcc successfully. What's the compiler used by SunOS that this needs fixing?",
        "pr_file_module": null
      },
      {
        "comment_id": "2166585294",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 105403,
        "pr_file": "src/coreclr/runtime/amd64/AllocFast.S",
        "discussion_id": "2165844437",
        "commented_code": "@@ -234,7 +234,7 @@ LEAF_ENTRY RhpNewPtrArrayFast, _TEXT\n \n         // Delegate overflow handling to the generic helper conservatively\n \n-        cmp         rsi, (0x40000000 / 8) // sizeof(void*)\n+        cmp         rsi, 0x8000000 // (0x40000000 / sizeof(void*))",
        "comment_created_at": "2025-06-25T12:22:30+00:00",
        "comment_author": "gwr",
        "comment_body": "$ /crossrootfs/x64/bin/x86_64-illumos-gcc --version\r\nx86_64-illumos-gcc (GCC) 13.3.0\r\nCopyright (C) 2023 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2166590337",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 105403,
        "pr_file": "src/coreclr/runtime/amd64/AllocFast.S",
        "discussion_id": "2165844437",
        "commented_code": "@@ -234,7 +234,7 @@ LEAF_ENTRY RhpNewPtrArrayFast, _TEXT\n \n         // Delegate overflow handling to the generic helper conservatively\n \n-        cmp         rsi, (0x40000000 / 8) // sizeof(void*)\n+        cmp         rsi, 0x8000000 // (0x40000000 / sizeof(void*))",
        "comment_created_at": "2025-06-25T12:25:08+00:00",
        "comment_author": "jkotas",
        "comment_body": "Why does this compile fine with gcc on Linux?",
        "pr_file_module": null
      },
      {
        "comment_id": "2166641381",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 105403,
        "pr_file": "src/coreclr/runtime/amd64/AllocFast.S",
        "discussion_id": "2165844437",
        "commented_code": "@@ -234,7 +234,7 @@ LEAF_ENTRY RhpNewPtrArrayFast, _TEXT\n \n         // Delegate overflow handling to the generic helper conservatively\n \n-        cmp         rsi, (0x40000000 / 8) // sizeof(void*)\n+        cmp         rsi, 0x8000000 // (0x40000000 / sizeof(void*))",
        "comment_created_at": "2025-06-25T12:50:52+00:00",
        "comment_author": "gwr",
        "comment_body": "I tried making a simple, stand-alone example test.S file with the original constant but I don't see an easy way to replicate all the CPP (and other?) pre-processing that's being used in this code.",
        "pr_file_module": null
      },
      {
        "comment_id": "2166736515",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 105403,
        "pr_file": "src/coreclr/runtime/amd64/AllocFast.S",
        "discussion_id": "2165844437",
        "commented_code": "@@ -234,7 +234,7 @@ LEAF_ENTRY RhpNewPtrArrayFast, _TEXT\n \n         // Delegate overflow handling to the generic helper conservatively\n \n-        cmp         rsi, (0x40000000 / 8) // sizeof(void*)\n+        cmp         rsi, 0x8000000 // (0x40000000 / sizeof(void*))",
        "comment_created_at": "2025-06-25T13:34:17+00:00",
        "comment_author": "gwr",
        "comment_body": "BTW, that line compiles OK if I just remove the parentheses:\r\n```\r\n        cmp         rsi, 0x40000000 / 8\r\n```\r\nbetter?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094708198",
    "pr_number": 115704,
    "pr_file": "src/coreclr/jit/instrsxarch.h",
    "created_at": "2025-05-19T01:33:33+00:00",
    "commented_code": "INST3(FIRST_SSE_INSTRUCTION, \"FIRST_SSE_INSTRUCTION\", IUM_WR, BAD_CODE, BAD_CODE, BAD_CODE, INS_TT_NONE, INS_FLAGS_None)\n\n// SSE\nINST3(addps,            \"addps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x58),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed singles\nINST3(addss,            \"addss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar singles\nINST3(andnps,           \"andnps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x55),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // And-Not packed singles\nINST3(andps,            \"andps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x54),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // AND packed singles\nINST3(cmpps,            \"cmpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC2),                            INS_TT_FULL,                         Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed singles\nINST3(cmpss,            \"cmpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar singles\nINST3(comiss,           \"comiss\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare singles\nINST3(cvtsi2ss32,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar single\nINST3(cvtsi2ss64,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar single\nINST3(cvtss2si,         \"cvtss2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit    | REX_WX       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar single to DWORD/QWORD\nINST3(cvttss2si32,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\nINST3(cvttss2si64,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\nINST3(divps,            \"divps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5E),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Divide packed singles\nINST3(divss,            \"divss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar singles\nINST3(maxps,            \"maxps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5F),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Maximum packed singles\nINST3(maxss,            \"maxss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar single\nINST3(minps,            \"minps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5D),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Minimum packed singles\nINST3(minss,            \"minss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar single\nINST3(movaps,           \"movaps\",           IUM_WR, PCKFLT(0x29), BAD_CODE,     PCKFLT(0x28),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movhlps,          \"movhlps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x12),                            INS_TT_NONE,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\nINST3(movhps,           \"movhps\",           IUM_WR, PCKFLT(0x17), BAD_CODE,     PCKFLT(0x16),                            INS_TT_TUPLE2,                       Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movlhps,          \"movlhps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x16),                            INS_TT_NONE,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\nINST3(movlps,           \"movlps\",           IUM_WR, PCKFLT(0x13), BAD_CODE,     PCKFLT(0x12),                            INS_TT_TUPLE2,                       Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movmskps,         \"movmskps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x50),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)\nINST3(movntps,          \"movntps\",          IUM_WR, PCKFLT(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movss,            \"movss\",            IUM_WR, SSEFLT(0x11), BAD_CODE,     SSEFLT(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movups,           \"movups\",           IUM_WR, PCKFLT(0x11), BAD_CODE,     PCKFLT(0x10),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(mulps,            \"mulps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x59),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Multiply packed singles\nINST3(mulss,            \"mulss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar single\nINST3(orps,             \"orps\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x56),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Or packed singles\nINST3(prefetchnta,      \"prefetchnta\",      IUM_RD, 0x000F0018,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\nINST3(prefetcht0,       \"prefetcht0\",       IUM_RD, 0x000F0818,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\nINST3(prefetcht1,       \"prefetcht1\",       IUM_RD, 0x000F1018,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\nINST3(prefetcht2,       \"prefetcht2\",       IUM_RD, 0x000F1818,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\nINST3(rcpps,            \"rcpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x53),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal of packed singles\nINST3(rcpss,            \"rcpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x53),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal of scalar single\nINST3(rsqrtps,          \"rsqrtps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x52),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal Sqrt of packed singles\nINST3(rsqrtss,          \"rsqrtss\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x52),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal Sqrt of scalar single\nINST3(shufps,           \"shufps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC6),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\nINST3(sfence,           \"sfence\",           IUM_RD, 0x000FF8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG)\nINST3(sqrtps,           \"sqrtps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x51),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // Sqrt of packed singles\nINST3(sqrtss,           \"sqrtss\",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x51),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Sqrt of scalar single\nINST3(subps,            \"subps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5C),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Subtract packed singles\nINST3(subss,            \"subss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5C),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract scalar singles\nINST3(ucomiss,          \"ucomiss\",          IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // unordered compare singles\nINST3(unpckhps,         \"unpckhps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x15),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\nINST3(unpcklps,         \"unpcklps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x14),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\nINST3(xorps,            \"xorps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x57),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // XOR packed singles\nINST3(addps,            \"addps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x58),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed singles\nINST3(addss,            \"addss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar singles\nINST3(andnps,           \"andnps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x55),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // And-Not packed singles\nINST3(andps,            \"andps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x54),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // AND packed singles\nINST3(cmpps,            \"cmpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC2),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed singles\nINST3(cmpss,            \"cmpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar singles\nINST3(comiss,           \"comiss\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare singles\nINST3(cvtsi2ss32,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar single\nINST3(cvtsi2ss64,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar single\nINST3(cvtss2si32,       \"cvtss2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar single to DWORD/QWORD\nINST3(cvtss2si64,       \"cvtss2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar single to DWORD/QWORD\nINST3(cvttss2si32,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\nINST3(cvttss2si64,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\nINST3(divps,            \"divps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5E),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide packed singles\nINST3(divss,            \"divss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar singles\nINST3(maxps,            \"maxps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5F),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum packed singles\nINST3(maxss,            \"maxss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar single\nINST3(minps,            \"minps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5D),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum packed singles\nINST3(minss,            \"minss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar single\nINST3(movaps,           \"movaps\",           IUM_WR, PCKFLT(0x29), BAD_CODE,     PCKFLT(0x28),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movhlps,          \"movhlps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x12),                            INS_TT_NONE,                                                            REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\nINST3(movhps,           \"movhps\",           IUM_WR, PCKFLT(0x17), BAD_CODE,     PCKFLT(0x16),                            INS_TT_TUPLE2,                       Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movlhps,          \"movlhps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x16),                            INS_TT_NONE,                                                            REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\nINST3(movlps,           \"movlps\",           IUM_WR, PCKFLT(0x13), BAD_CODE,     PCKFLT(0x12),                            INS_TT_TUPLE2,                       Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movmskps,         \"movmskps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x50),                            INS_TT_NONE,                                                            REX_WIG      | Encoding_VEX)\nINST3(movntps,          \"movntps\",          IUM_WR, PCKFLT(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                                                        REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movss,            \"movss\",            IUM_WR, SSEFLT(0x11), BAD_CODE,     SSEFLT(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movups,           \"movups\",           IUM_WR, PCKFLT(0x11), BAD_CODE,     PCKFLT(0x10),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(mulps,            \"mulps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x59),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply packed singles\nINST3(mulss,            \"mulss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar single\nINST3(orps,             \"orps\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x56),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Or packed singles\nINST3(prefetchnta,      \"prefetchnta\",      IUM_RD, 0x000F0018,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\nINST3(prefetcht0,       \"prefetcht0\",       IUM_RD, 0x000F0818,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\nINST3(prefetcht1,       \"prefetcht1\",       IUM_RD, 0x000F1018,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\nINST3(prefetcht2,       \"prefetcht2\",       IUM_RD, 0x000F1818,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\nINST3(rcpps,            \"rcpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x53),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal of packed singles\nINST3(rcpss,            \"rcpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x53),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal of scalar single\nINST3(rsqrtps,          \"rsqrtps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x52),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal Sqrt of packed singles\nINST3(rsqrtss,          \"rsqrtss\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x52),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal Sqrt of scalar single\nINST3(shufps,           \"shufps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC6),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\nINST3(sfence,           \"sfence\",           IUM_RD, 0x000FF8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                                            REX_WIG)\nINST3(sqrtps,           \"sqrtps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x51),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Sqrt of packed singles\nINST3(sqrtss,           \"sqrtss\",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x51),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Sqrt of scalar single\nINST3(subps,            \"subps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5C),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed singles\nINST3(subss,            \"subss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5C),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract scalar singles\nINST3(ucomiss,          \"ucomiss\",          IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // unordered compare singles\nINST3(unpckhps,         \"unpckhps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x15),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\nINST3(unpcklps,         \"unpcklps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x14),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\nINST3(xorps,            \"xorps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x57),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // XOR packed singles\n\n// SSE2\nINST3(addpd,            \"addpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x58),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed doubles\nINST3(addsd,            \"addsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar doubles\nINST3(andnpd,           \"andnpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x55),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // And-Not packed doubles\nINST3(andpd,            \"andpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x54),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // AND packed doubles\nINST3(cmppd,            \"cmppd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC2),                            INS_TT_FULL,                         Input_64Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed doubles\nINST3(cmpsd,            \"cmpsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar doubles\nINST3(comisd,           \"comisd\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKDBL(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare doubles\nINST3(cvtdq2pd,         \"cvtdq2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xE6),                            INS_TT_HALF,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed DWORDs to doubles\nINST3(cvtdq2ps,         \"cvtdq2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed DWORDs to singles\nINST3(cvtpd2dq,         \"cvtpd2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed doubles to DWORDs\nINST3(cvtpd2ps,         \"cvtpd2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5A),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed doubles to singles\nINST3(cvtps2dq,         \"cvtps2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed singles to DWORDs\nINST3(cvtps2pd,         \"cvtps2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5A),                            INS_TT_HALF,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed singles to doubles\nINST3(cvtsd2si,         \"cvtsd2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit    | REX_WX       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar double to DWORD\nINST3(cvtsd2ss,         \"cvtsd2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar double to scalar singles\nINST3(cvtsi2sd32,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar double\nINST3(cvtsi2sd64,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar double\nINST3(cvtss2sd,         \"cvtss2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar single to scalar doubles\nINST3(cvttpd2dq,        \"cvttpd2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // cvt with trunc packed doubles to DWORDs\nINST3(cvttps2dq,        \"cvttps2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // cvt with trunc packed singles to DWORDs\nINST3(cvttsd2si32,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\nINST3(cvttsd2si64,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\nINST3(divpd,            \"divpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5E),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Divide packed doubles\nINST3(divsd,            \"divsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar doubles\nINST3(lfence,           \"lfence\",           IUM_RD, 0x000FE8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG)\nINST3(maskmovdqu,       \"maskmovdqu\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF7),                            INS_TT_NONE,                                          REX_WIG)\nINST3(maxpd,            \"maxpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5F),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Maximum packed doubles\nINST3(maxsd,            \"maxsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar double\nINST3(mfence,           \"mfence\",           IUM_RD, 0x000FF0AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG)\nINST3(minpd,            \"minpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5D),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Minimum packed doubles\nINST3(minsd,            \"minsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar double\nINST3(movapd,           \"movapd\",           IUM_WR, PCKDBL(0x29), BAD_CODE,     PCKDBL(0x28),                            INS_TT_FULL_MEM,                     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movd,             \"movd\",             IUM_WR, PCKDBL(0x7E), BAD_CODE,     PCKDBL(0x6E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_WX       | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)                                                                                                                                  // Move DWORD/QWORD between xmm regs <-> memory/r32/r64 regs\nINST3(movdqa,           \"movdqa\",           IUM_WR, PCKDBL(0x7F), BAD_CODE,     PCKDBL(0x6F),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)\nINST3(movdqu,           \"movdqu\",           IUM_WR, SSEFLT(0x7F), BAD_CODE,     SSEFLT(0x6F),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2 )\nINST3(movhpd,           \"movhpd\",           IUM_WR, PCKDBL(0x17), BAD_CODE,     PCKDBL(0x16),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movlpd,           \"movlpd\",           IUM_WR, PCKDBL(0x13), BAD_CODE,     PCKDBL(0x12),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movmskpd,         \"movmskpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x50),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Extract 2-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros.\nINST3(movntdq,          \"movntdq\",          IUM_WR, PCKDBL(0xE7), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movnti,           \"movnti\",           IUM_WR, PCKFLT(0xC3), BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WX       | Encoding_REX2)\nINST3(movntpd,          \"movntpd\",          IUM_WR, PCKDBL(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movq,             \"movq\",             IUM_WR, PCKDBL(0xD6), BAD_CODE,     SSEFLT(0x7E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | Encoding_REX2)                                                                                                                                  // Move Quadword between memory/mm <-> regs\nINST3(movsd_simd,       \"movsd\",            IUM_WR, SSEDBL(0x11), BAD_CODE,     SSEDBL(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movupd,           \"movupd\",           IUM_WR, PCKDBL(0x11), BAD_CODE,     PCKDBL(0x10),                            INS_TT_FULL_MEM,                     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(mulpd,            \"mulpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x59),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Multiply packed doubles\nINST3(mulsd,            \"mulsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar doubles\nINST3(orpd,             \"orpd\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x56),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Or packed doubles\nINST3(packssdw,         \"packssdw\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Pack (narrow) int to short with saturation\nINST3(packsswb,         \"packsswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x63),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to byte with saturation\nINST3(packuswb,         \"packuswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x67),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to unsigned byte with saturation\nINST3(paddb,            \"paddb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFC),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed byte integers\nINST3(paddd,            \"paddd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFE),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed double-word (32-bit) integers\nINST3(paddq,            \"paddq\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD4),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed quad-word (64-bit) integers\nINST3(paddsb,           \"paddsb\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEC),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed byte integers and saturate the results\nINST3(paddsw,           \"paddsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xED),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed word integers and saturate the results\nINST3(paddusb,          \"paddusb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDC),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned byte integers and saturate the results\nINST3(paddusw,          \"paddusw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDD),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned word integers and saturate the results\nINST3(paddw,            \"paddw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFD),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed word (16-bit) integers\nINST3(pand,             \"pand\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDB),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise AND of two xmm regs\nINST3(pandn,            \"pandn\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDF),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise AND NOT of two xmm regs\nINST3(pavgb,            \"pavgb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE0),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed byte integers\nINST3(pavgw,            \"pavgw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE3),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed word integers\nINST3(pcmpeqb,          \"pcmpeqb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x74),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit integers for equality\nINST3(pcmpeqd,          \"pcmpeqd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x76),                            INS_TT_FULL,                         Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit integers for equality\nINST3(pcmpeqw,          \"pcmpeqw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x75),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit integers for equality\nINST3(pcmpgtb,          \"pcmpgtb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x64),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit signed integers for greater than\nINST3(pcmpgtd,          \"pcmpgtd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x66),                            INS_TT_FULL,                         Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit signed integers for greater than\nINST3(pcmpgtw,          \"pcmpgtw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x65),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit signed integers for greater than\nINST3(pextrw,           \"pextrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC5),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Extract 16-bit value into a r32 with zero extended to 32-bits\nINST3(pinsrw,           \"pinsrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC4),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Insert word at index\nINST3(pmaddwd,          \"pmaddwd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF5),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply packed signed 16-bit integers in a and b, producing intermediate signed 32-bit integers. Horizontally add adjacent pairs of intermediate 32-bit integers, and pack the results in dst\nINST3(pmaxsw,           \"pmaxsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEE),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed maximum signed words\nINST3(pmaxub,           \"pmaxub\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDE),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed maximum unsigned bytes\nINST3(pminsw,           \"pminsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEA),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed minimum signed words\nINST3(pminub,           \"pminub\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDA),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed minimum unsigned bytes\nINST3(pmovmskb,         \"pmovmskb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD7),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Move the MSB bits of all bytes in a xmm reg to an int reg\nINST3(pmulhuw,          \"pmulhuw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE4),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply high the packed 16-bit unsigned integers\nINST3(pmulhw,           \"pmulhw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE5),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply high the packed 16-bit signed integers\nINST3(pmullw,           \"pmullw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD5),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed multiply 16 bit unsigned integers and store lower 16 bits of each result\nINST3(pmuludq,          \"pmuludq\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF4),                            INS_TT_FULL,                         Input_32Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // packed multiply 32-bit unsigned integers and store 64-bit result\nINST3(por,              \"por\",              IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEB),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise OR of two xmm regs\nINST3(psadbw,           \"psadbw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF6),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Compute the sum of absolute differences of packed unsigned 8-bit integers\nINST3(pshufd,           \"pshufd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x70),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shuffle of 32-bit integers\nINST3(pshufhw,          \"pshufhw\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x70),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Shuffle the high words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.\nINST3(pshuflw,          \"pshuflw\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x70),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Shuffle the low words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.\nINST3(pslld,            \"pslld\",            IUM_WR, BAD_CODE,     PCKDBL(0x72), PCKDBL(0xF2),                            INS_TT_FULL     | INS_TT_MEM128,     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift left logical of 32-bit integers\nINST3(pslldq,           \"pslldq\",           IUM_WR, BAD_CODE,     PCKDBL(0x73), BAD_CODE,                                INS_TT_FULL_MEM,                                      REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Shift left logical of xmm reg by given number of bytes\nINST3(psllq,            \"psllq\",            IUM_WR, BAD_CODE,     PCKDBL(0x73), PCKDBL(0xF3),                            INS_TT_FULL     | INS_TT_MEM128,     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift left logical of 64-bit integers\nINST3(psllw,            \"psllw\",            IUM_WR, BAD_CODE,     PCKDBL(0x71), PCKDBL(0xF1),                            INS_TT_FULL_MEM | INS_TT_MEM128,     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed shift left logical of 16-bit integers\nINST3(psrad,            \"psrad\",            IUM_WR, BAD_CODE,     PCKDBL(0x72), PCKDBL(0xE2),                            INS_TT_FULL     | INS_TT_MEM128,     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift right arithmetic of 32-bit integers\nINST3(psraw,            \"psraw\",            IUM_WR, BAD_CODE,     PCKDBL(0x71), PCKDBL(0xE1),                            INS_TT_FULL_MEM | INS_TT_MEM128,     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed shift right arithmetic of 16-bit integers\nINST3(psrld,            \"psrld\",            IUM_WR, BAD_CODE,     PCKDBL(0x72), PCKDBL(0xD2),                            INS_TT_FULL     | INS_TT_MEM128,     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift right logical of 32-bit integers\nINST3(psrldq,           \"psrldq\",           IUM_WR, BAD_CODE,     PCKDBL(0x73), BAD_CODE,                                INS_TT_FULL_MEM,                                      REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Shift right logical of xmm reg by given number of bytes\nINST3(psrlq,            \"psrlq\",            IUM_WR, BAD_CODE,     PCKDBL(0x73), PCKDBL(0xD3),                            INS_TT_FULL     | INS_TT_MEM128,     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift right logical of 64-bit integers\nINST3(psrlw,            \"psrlw\",            IUM_WR, BAD_CODE,     PCKDBL(0x71), PCKDBL(0xD1),                            INS_TT_FULL_MEM | INS_TT_MEM128,     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed shift right logical of 16-bit integers\nINST3(psubb,            \"psubb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF8),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed word (16-bit) integers\nINST3(psubd,            \"psubd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFA),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Subtract packed double-word (32-bit) integers\nINST3(psubq,            \"psubq\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFB),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // subtract packed quad-word (64-bit) integers\nINST3(psubw,            \"psubw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF9),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed word (16-bit) integers\nINST3(psubsb,           \"psubsb\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE8),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed 8-bit integers in b from packed 8-bit integers in a using saturation\nINST3(psubsw,           \"psubsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE9),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed 16-bit integers in b from packed 16-bit integers in a using saturation\nINST3(psubusb,          \"psubusb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD8),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed unsigned 8-bit integers in b from packed unsigned 8-bit integers in a using saturation\nINST3(psubusw,          \"psubusw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD9),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed unsigned 16-bit integers in b from packed unsigned 16-bit integers in a using saturation\nINST3(punpckhbw,        \"punpckhbw\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x68),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ubyte to ushort (hi)\nINST3(punpckhdq,        \"punpckhdq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6A),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\nINST3(punpckhqdq,       \"punpckhqdq\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6D),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen uint to ulong (hi)\nINST3(punpckhwd,        \"punpckhwd\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x69),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ushort to uint (hi)\nINST3(punpcklbw,        \"punpcklbw\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x60),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ubyte to ushort (lo)\nINST3(punpckldq,        \"punpckldq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x62),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\nINST3(punpcklqdq,       \"punpcklqdq\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6C),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen uint to ulong (lo)\nINST3(punpcklwd,        \"punpcklwd\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x61),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ushort to uint (lo)\nINST3(pxor,             \"pxor\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEF),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise XOR of two xmm regs\nINST3(shufpd,           \"shufpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC6),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\nINST3(sqrtpd,           \"sqrtpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x51),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // Sqrt of packed doubles\nINST3(sqrtsd,           \"sqrtsd\",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x51),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Sqrt of scalar double\nINST3(subpd,            \"subpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5C),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Subtract packed doubles\nINST3(subsd,            \"subsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5C),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract scalar doubles\nINST3(ucomisd,          \"ucomisd\",          IUM_RD, BAD_CODE,     BAD_CODE,     PCKDBL(0x2E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // unordered compare doubles\nINST3(unpckhpd,         \"unpckhpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x15),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen ubyte to ushort (hi)\nINST3(unpcklpd,         \"unpcklpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x14),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen ubyte to ushort (hi)\nINST3(xorpd,            \"xorpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x57),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // XOR packed doubles\nINST3(addpd,            \"addpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x58),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed doubles\nINST3(addsd,            \"addsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar doubles\nINST3(andnpd,           \"andnpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x55),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // And-Not packed doubles\nINST3(andpd,            \"andpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x54),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // AND packed doubles\nINST3(cmppd,            \"cmppd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC2),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed doubles\nINST3(cmpsd,            \"cmpsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar doubles\nINST3(comisd,           \"comisd\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKDBL(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare doubles\nINST3(cvtdq2pd,         \"cvtdq2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xE6),                            INS_TT_HALF,                         Input_32Bit    | KMask_Base2     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed DWORDs to doubles\nINST3(cvtdq2ps,         \"cvtdq2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed DWORDs to singles\nINST3(cvtpd2dq,         \"cvtpd2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed doubles to DWORDs\nINST3(cvtpd2ps,         \"cvtpd2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5A),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed doubles to singles\nINST3(cvtps2dq,         \"cvtps2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed singles to DWORDs\nINST3(cvtps2pd,         \"cvtps2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5A),                            INS_TT_HALF,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed singles to doubles\nINST3(cvtsd2si32,       \"cvtsd2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar double to DWORD\nINST3(cvtsd2si64,       \"cvtsd2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar double to DWORD\nINST3(cvtsd2ss,         \"cvtsd2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar double to scalar singles\nINST3(cvtsi2sd32,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar double\nINST3(cvtsi2sd64,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar double\nINST3(cvtss2sd,         \"cvtss2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar single to scalar doubles\nINST3(cvttpd2dq,        \"cvttpd2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc packed doubles to DWORDs\nINST3(cvttps2dq,        \"cvttps2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc packed singles to DWORDs\nINST3(cvttsd2si32,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\nINST3(cvttsd2si64,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\nINST3(divpd,            \"divpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5E),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide packed doubles\nINST3(divsd,            \"divsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar doubles\nINST3(lfence,           \"lfence\",           IUM_RD, 0x000FE8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                                            REX_WIG)\nINST3(maskmovdqu,       \"maskmovdqu\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF7),                            INS_TT_NONE,                                                            REX_WIG)\nINST3(maxpd,            \"maxpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5F),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum packed doubles\nINST3(maxsd,            \"maxsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar double\nINST3(mfence,           \"mfence\",           IUM_RD, 0x000FF0AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                                            REX_WIG)\nINST3(minpd,            \"minpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5D),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum packed doubles\nINST3(minsd,            \"minsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar double\nINST3(movapd,           \"movapd\",           IUM_WR, PCKDBL(0x29), BAD_CODE,     PCKDBL(0x28),                            INS_TT_FULL_MEM,                                      KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movd32,           \"movd\",             IUM_WR, PCKDBL(0x7E), BAD_CODE,     PCKDBL(0x6E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)                                                                                                                  // Move DWORD between xmm regs <-> memory/r32 regs\nINST3(movd64,           \"movq\",             IUM_WR, PCKDBL(0x7E), BAD_CODE,     PCKDBL(0x6E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)                                                                                                                  // Move QWORD between xmm regs <-> memory/r64 regs\nINST3(movdqa32,         \"movdqa\",           IUM_WR, PCKDBL(0x7F), BAD_CODE,     PCKDBL(0x6F),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)\nINST3(movdqu32,         \"movdqu\",           IUM_WR, SSEFLT(0x7F), BAD_CODE,     SSEFLT(0x6F),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)\nINST3(movhpd,           \"movhpd\",           IUM_WR, PCKDBL(0x17), BAD_CODE,     PCKDBL(0x16),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movlpd,           \"movlpd\",           IUM_WR, PCKDBL(0x13), BAD_CODE,     PCKDBL(0x12),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movmskpd,         \"movmskpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x50),                            INS_TT_NONE,                                                            REX_WIG      | Encoding_VEX)                                                                                                                                                   // Extract 2-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros.\nINST3(movntdq,          \"movntdq\",          IUM_WR, PCKDBL(0xE7), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                                                        REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movnti32,         \"movnti\",           IUM_WR, PCKFLT(0xC3), BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_REX2)\nINST3(movnti64,         \"movnti\",           IUM_WR, PCKFLT(0xC3), BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_REX2)\nINST3(movntpd,          \"movntpd\",          IUM_WR, PCKDBL(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                                                        REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movq,             \"movq\",             IUM_WR, PCKDBL(0xD6), BAD_CODE,     SSEFLT(0x7E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | Encoding_REX2)                                                                                                                 // Move Quadword between memory/mm <-> regs\nINST3(movsd_simd,       \"movsd\",            IUM_WR, SSEDBL(0x11), BAD_CODE,     SSEDBL(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movupd,           \"movupd\",           IUM_WR, PCKDBL(0x11), BAD_CODE,     PCKDBL(0x10),                            INS_TT_FULL_MEM,                                      KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(mulpd,            \"mulpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x59),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply packed doubles\nINST3(mulsd,            \"mulsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar doubles\nINST3(orpd,             \"orpd\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x56),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Or packed doubles\nINST3(packssdw,         \"packssdw\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base8     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) int to short with saturation\nINST3(packsswb,         \"packsswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x63),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to byte with saturation\nINST3(packuswb,         \"packuswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x67),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to unsigned byte with saturation\nINST3(paddb,            \"paddb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFC),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed byte integers\nINST3(paddd,            \"paddd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFE),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed double-word (32-bit) integers\nINST3(paddq,            \"paddq\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD4),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed quad-word (64-bit) integers\nINST3(paddsb,           \"paddsb\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEC),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed byte integers and saturate the results\nINST3(paddsw,           \"paddsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xED),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed word integers and saturate the results\nINST3(paddusb,          \"paddusb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDC),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned byte integers and saturate the results\nINST3(paddusw,          \"paddusw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDD),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned word integers and saturate the results\nINST3(paddw,            \"paddw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFD),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed word (16-bit) integers\nINST3(pandd,            \"pand\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDB),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed bit-wise AND of two xmm regs\nINST3(pandnd,           \"pandn\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDF),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed bit-wise AND NOT of two xmm regs\nINST3(pavgb,            \"pavgb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE0),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed byte integers\nINST3(pavgw,            \"pavgw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE3),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed word integers\nINST3(pcmpeqb,          \"pcmpeqb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x74),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit integers for equality\nINST3(pcmpeqd,          \"pcmpeqd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x76),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit integers for equality\nINST3(pcmpeqw,          \"pcmpeqw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x75),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit integers for equality\nINST3(pcmpgtb,          \"pcmpgtb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x64),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit signed integers for greater than\nINST3(pcmpgtd,          \"pcmpgtd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x66),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit signed integers for greater than\nINST3(pcmpgtw,          \"pcmpgtw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x65),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit signed integers for greater than\nINST3(pextrw,           \"pextrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC5),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Extract 16-bit value into a r32 with zero extended to 32-bits\nINST3(pinsrw,           \"pinsrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC4),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Insert word at index",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2094708198",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 115704,
        "pr_file": "src/coreclr/jit/instrsxarch.h",
        "discussion_id": "2094708198",
        "commented_code": "@@ -198,418 +198,426 @@ INSTMUL(imul_15,        \"imul\",             IUM_RD, BAD_CODE,     0x4400003868,\n INST3(FIRST_SSE_INSTRUCTION, \"FIRST_SSE_INSTRUCTION\", IUM_WR, BAD_CODE, BAD_CODE, BAD_CODE, INS_TT_NONE, INS_FLAGS_None)\n \n // SSE\n-INST3(addps,            \"addps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x58),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed singles\n-INST3(addss,            \"addss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar singles\n-INST3(andnps,           \"andnps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x55),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // And-Not packed singles\n-INST3(andps,            \"andps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x54),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // AND packed singles\n-INST3(cmpps,            \"cmpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC2),                            INS_TT_FULL,                         Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed singles\n-INST3(cmpss,            \"cmpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar singles\n-INST3(comiss,           \"comiss\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare singles\n-INST3(cvtsi2ss32,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar single\n-INST3(cvtsi2ss64,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar single\n-INST3(cvtss2si,         \"cvtss2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit    | REX_WX       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar single to DWORD/QWORD\n-INST3(cvttss2si32,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\n-INST3(cvttss2si64,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\n-INST3(divps,            \"divps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5E),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Divide packed singles\n-INST3(divss,            \"divss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar singles\n-INST3(maxps,            \"maxps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5F),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Maximum packed singles\n-INST3(maxss,            \"maxss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar single\n-INST3(minps,            \"minps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5D),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Minimum packed singles\n-INST3(minss,            \"minss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar single\n-INST3(movaps,           \"movaps\",           IUM_WR, PCKFLT(0x29), BAD_CODE,     PCKFLT(0x28),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n-INST3(movhlps,          \"movhlps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x12),                            INS_TT_NONE,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\n-INST3(movhps,           \"movhps\",           IUM_WR, PCKFLT(0x17), BAD_CODE,     PCKFLT(0x16),                            INS_TT_TUPLE2,                       Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n-INST3(movlhps,          \"movlhps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x16),                            INS_TT_NONE,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\n-INST3(movlps,           \"movlps\",           IUM_WR, PCKFLT(0x13), BAD_CODE,     PCKFLT(0x12),                            INS_TT_TUPLE2,                       Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n-INST3(movmskps,         \"movmskps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x50),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)\n-INST3(movntps,          \"movntps\",          IUM_WR, PCKFLT(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n-INST3(movss,            \"movss\",            IUM_WR, SSEFLT(0x11), BAD_CODE,     SSEFLT(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n-INST3(movups,           \"movups\",           IUM_WR, PCKFLT(0x11), BAD_CODE,     PCKFLT(0x10),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n-INST3(mulps,            \"mulps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x59),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Multiply packed singles\n-INST3(mulss,            \"mulss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar single\n-INST3(orps,             \"orps\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x56),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Or packed singles\n-INST3(prefetchnta,      \"prefetchnta\",      IUM_RD, 0x000F0018,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\n-INST3(prefetcht0,       \"prefetcht0\",       IUM_RD, 0x000F0818,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\n-INST3(prefetcht1,       \"prefetcht1\",       IUM_RD, 0x000F1018,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\n-INST3(prefetcht2,       \"prefetcht2\",       IUM_RD, 0x000F1818,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\n-INST3(rcpps,            \"rcpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x53),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal of packed singles\n-INST3(rcpss,            \"rcpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x53),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal of scalar single\n-INST3(rsqrtps,          \"rsqrtps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x52),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal Sqrt of packed singles\n-INST3(rsqrtss,          \"rsqrtss\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x52),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal Sqrt of scalar single\n-INST3(shufps,           \"shufps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC6),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\n-INST3(sfence,           \"sfence\",           IUM_RD, 0x000FF8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG)\n-INST3(sqrtps,           \"sqrtps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x51),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // Sqrt of packed singles\n-INST3(sqrtss,           \"sqrtss\",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x51),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Sqrt of scalar single\n-INST3(subps,            \"subps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5C),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Subtract packed singles\n-INST3(subss,            \"subss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5C),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract scalar singles\n-INST3(ucomiss,          \"ucomiss\",          IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // unordered compare singles\n-INST3(unpckhps,         \"unpckhps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x15),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\n-INST3(unpcklps,         \"unpcklps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x14),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\n-INST3(xorps,            \"xorps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x57),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // XOR packed singles\n+INST3(addps,            \"addps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x58),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed singles\n+INST3(addss,            \"addss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar singles\n+INST3(andnps,           \"andnps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x55),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // And-Not packed singles\n+INST3(andps,            \"andps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x54),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // AND packed singles\n+INST3(cmpps,            \"cmpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC2),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed singles\n+INST3(cmpss,            \"cmpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar singles\n+INST3(comiss,           \"comiss\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare singles\n+INST3(cvtsi2ss32,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar single\n+INST3(cvtsi2ss64,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar single\n+INST3(cvtss2si32,       \"cvtss2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar single to DWORD/QWORD\n+INST3(cvtss2si64,       \"cvtss2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar single to DWORD/QWORD\n+INST3(cvttss2si32,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\n+INST3(cvttss2si64,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\n+INST3(divps,            \"divps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5E),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide packed singles\n+INST3(divss,            \"divss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar singles\n+INST3(maxps,            \"maxps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5F),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum packed singles\n+INST3(maxss,            \"maxss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar single\n+INST3(minps,            \"minps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5D),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum packed singles\n+INST3(minss,            \"minss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar single\n+INST3(movaps,           \"movaps\",           IUM_WR, PCKFLT(0x29), BAD_CODE,     PCKFLT(0x28),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n+INST3(movhlps,          \"movhlps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x12),                            INS_TT_NONE,                                                            REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\n+INST3(movhps,           \"movhps\",           IUM_WR, PCKFLT(0x17), BAD_CODE,     PCKFLT(0x16),                            INS_TT_TUPLE2,                       Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n+INST3(movlhps,          \"movlhps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x16),                            INS_TT_NONE,                                                            REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\n+INST3(movlps,           \"movlps\",           IUM_WR, PCKFLT(0x13), BAD_CODE,     PCKFLT(0x12),                            INS_TT_TUPLE2,                       Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n+INST3(movmskps,         \"movmskps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x50),                            INS_TT_NONE,                                                            REX_WIG      | Encoding_VEX)\n+INST3(movntps,          \"movntps\",          IUM_WR, PCKFLT(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                                                        REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n+INST3(movss,            \"movss\",            IUM_WR, SSEFLT(0x11), BAD_CODE,     SSEFLT(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n+INST3(movups,           \"movups\",           IUM_WR, PCKFLT(0x11), BAD_CODE,     PCKFLT(0x10),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n+INST3(mulps,            \"mulps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x59),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply packed singles\n+INST3(mulss,            \"mulss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar single\n+INST3(orps,             \"orps\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x56),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Or packed singles\n+INST3(prefetchnta,      \"prefetchnta\",      IUM_RD, 0x000F0018,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\n+INST3(prefetcht0,       \"prefetcht0\",       IUM_RD, 0x000F0818,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\n+INST3(prefetcht1,       \"prefetcht1\",       IUM_RD, 0x000F1018,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\n+INST3(prefetcht2,       \"prefetcht2\",       IUM_RD, 0x000F1818,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\n+INST3(rcpps,            \"rcpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x53),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal of packed singles\n+INST3(rcpss,            \"rcpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x53),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal of scalar single\n+INST3(rsqrtps,          \"rsqrtps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x52),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal Sqrt of packed singles\n+INST3(rsqrtss,          \"rsqrtss\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x52),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal Sqrt of scalar single\n+INST3(shufps,           \"shufps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC6),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\n+INST3(sfence,           \"sfence\",           IUM_RD, 0x000FF8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                                            REX_WIG)\n+INST3(sqrtps,           \"sqrtps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x51),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Sqrt of packed singles\n+INST3(sqrtss,           \"sqrtss\",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x51),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Sqrt of scalar single\n+INST3(subps,            \"subps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5C),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed singles\n+INST3(subss,            \"subss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5C),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract scalar singles\n+INST3(ucomiss,          \"ucomiss\",          IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // unordered compare singles\n+INST3(unpckhps,         \"unpckhps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x15),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\n+INST3(unpcklps,         \"unpcklps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x14),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\n+INST3(xorps,            \"xorps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x57),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // XOR packed singles\n \n // SSE2\n-INST3(addpd,            \"addpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x58),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed doubles\n-INST3(addsd,            \"addsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar doubles\n-INST3(andnpd,           \"andnpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x55),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // And-Not packed doubles\n-INST3(andpd,            \"andpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x54),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // AND packed doubles\n-INST3(cmppd,            \"cmppd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC2),                            INS_TT_FULL,                         Input_64Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed doubles\n-INST3(cmpsd,            \"cmpsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar doubles\n-INST3(comisd,           \"comisd\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKDBL(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare doubles\n-INST3(cvtdq2pd,         \"cvtdq2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xE6),                            INS_TT_HALF,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed DWORDs to doubles\n-INST3(cvtdq2ps,         \"cvtdq2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed DWORDs to singles\n-INST3(cvtpd2dq,         \"cvtpd2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed doubles to DWORDs\n-INST3(cvtpd2ps,         \"cvtpd2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5A),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed doubles to singles\n-INST3(cvtps2dq,         \"cvtps2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed singles to DWORDs\n-INST3(cvtps2pd,         \"cvtps2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5A),                            INS_TT_HALF,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed singles to doubles\n-INST3(cvtsd2si,         \"cvtsd2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit    | REX_WX       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar double to DWORD\n-INST3(cvtsd2ss,         \"cvtsd2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar double to scalar singles\n-INST3(cvtsi2sd32,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar double\n-INST3(cvtsi2sd64,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar double\n-INST3(cvtss2sd,         \"cvtss2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar single to scalar doubles\n-INST3(cvttpd2dq,        \"cvttpd2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // cvt with trunc packed doubles to DWORDs\n-INST3(cvttps2dq,        \"cvttps2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // cvt with trunc packed singles to DWORDs\n-INST3(cvttsd2si32,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\n-INST3(cvttsd2si64,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\n-INST3(divpd,            \"divpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5E),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Divide packed doubles\n-INST3(divsd,            \"divsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar doubles\n-INST3(lfence,           \"lfence\",           IUM_RD, 0x000FE8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG)\n-INST3(maskmovdqu,       \"maskmovdqu\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF7),                            INS_TT_NONE,                                          REX_WIG)\n-INST3(maxpd,            \"maxpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5F),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Maximum packed doubles\n-INST3(maxsd,            \"maxsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar double\n-INST3(mfence,           \"mfence\",           IUM_RD, 0x000FF0AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG)\n-INST3(minpd,            \"minpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5D),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Minimum packed doubles\n-INST3(minsd,            \"minsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar double\n-INST3(movapd,           \"movapd\",           IUM_WR, PCKDBL(0x29), BAD_CODE,     PCKDBL(0x28),                            INS_TT_FULL_MEM,                     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\n-INST3(movd,             \"movd\",             IUM_WR, PCKDBL(0x7E), BAD_CODE,     PCKDBL(0x6E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_WX       | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)                                                                                                                                  // Move DWORD/QWORD between xmm regs <-> memory/r32/r64 regs\n-INST3(movdqa,           \"movdqa\",           IUM_WR, PCKDBL(0x7F), BAD_CODE,     PCKDBL(0x6F),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)\n-INST3(movdqu,           \"movdqu\",           IUM_WR, SSEFLT(0x7F), BAD_CODE,     SSEFLT(0x6F),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2 )\n-INST3(movhpd,           \"movhpd\",           IUM_WR, PCKDBL(0x17), BAD_CODE,     PCKDBL(0x16),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n-INST3(movlpd,           \"movlpd\",           IUM_WR, PCKDBL(0x13), BAD_CODE,     PCKDBL(0x12),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n-INST3(movmskpd,         \"movmskpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x50),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Extract 2-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros.\n-INST3(movntdq,          \"movntdq\",          IUM_WR, PCKDBL(0xE7), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n-INST3(movnti,           \"movnti\",           IUM_WR, PCKFLT(0xC3), BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WX       | Encoding_REX2)\n-INST3(movntpd,          \"movntpd\",          IUM_WR, PCKDBL(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\n-INST3(movq,             \"movq\",             IUM_WR, PCKDBL(0xD6), BAD_CODE,     SSEFLT(0x7E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | Encoding_REX2)                                                                                                                                  // Move Quadword between memory/mm <-> regs\n-INST3(movsd_simd,       \"movsd\",            IUM_WR, SSEDBL(0x11), BAD_CODE,     SSEDBL(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n-INST3(movupd,           \"movupd\",           IUM_WR, PCKDBL(0x11), BAD_CODE,     PCKDBL(0x10),                            INS_TT_FULL_MEM,                     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\n-INST3(mulpd,            \"mulpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x59),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Multiply packed doubles\n-INST3(mulsd,            \"mulsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar doubles\n-INST3(orpd,             \"orpd\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x56),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Or packed doubles\n-INST3(packssdw,         \"packssdw\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Pack (narrow) int to short with saturation\n-INST3(packsswb,         \"packsswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x63),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to byte with saturation\n-INST3(packuswb,         \"packuswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x67),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to unsigned byte with saturation\n-INST3(paddb,            \"paddb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFC),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed byte integers\n-INST3(paddd,            \"paddd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFE),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed double-word (32-bit) integers\n-INST3(paddq,            \"paddq\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD4),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed quad-word (64-bit) integers\n-INST3(paddsb,           \"paddsb\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEC),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed byte integers and saturate the results\n-INST3(paddsw,           \"paddsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xED),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed word integers and saturate the results\n-INST3(paddusb,          \"paddusb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDC),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned byte integers and saturate the results\n-INST3(paddusw,          \"paddusw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDD),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned word integers and saturate the results\n-INST3(paddw,            \"paddw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFD),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed word (16-bit) integers\n-INST3(pand,             \"pand\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDB),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise AND of two xmm regs\n-INST3(pandn,            \"pandn\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDF),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise AND NOT of two xmm regs\n-INST3(pavgb,            \"pavgb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE0),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed byte integers\n-INST3(pavgw,            \"pavgw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE3),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed word integers\n-INST3(pcmpeqb,          \"pcmpeqb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x74),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit integers for equality\n-INST3(pcmpeqd,          \"pcmpeqd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x76),                            INS_TT_FULL,                         Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit integers for equality\n-INST3(pcmpeqw,          \"pcmpeqw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x75),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit integers for equality\n-INST3(pcmpgtb,          \"pcmpgtb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x64),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit signed integers for greater than\n-INST3(pcmpgtd,          \"pcmpgtd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x66),                            INS_TT_FULL,                         Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit signed integers for greater than\n-INST3(pcmpgtw,          \"pcmpgtw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x65),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit signed integers for greater than\n-INST3(pextrw,           \"pextrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC5),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Extract 16-bit value into a r32 with zero extended to 32-bits\n-INST3(pinsrw,           \"pinsrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC4),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Insert word at index\n-INST3(pmaddwd,          \"pmaddwd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF5),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply packed signed 16-bit integers in a and b, producing intermediate signed 32-bit integers. Horizontally add adjacent pairs of intermediate 32-bit integers, and pack the results in dst\n-INST3(pmaxsw,           \"pmaxsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEE),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed maximum signed words\n-INST3(pmaxub,           \"pmaxub\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDE),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed maximum unsigned bytes\n-INST3(pminsw,           \"pminsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEA),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed minimum signed words\n-INST3(pminub,           \"pminub\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDA),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed minimum unsigned bytes\n-INST3(pmovmskb,         \"pmovmskb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD7),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Move the MSB bits of all bytes in a xmm reg to an int reg\n-INST3(pmulhuw,          \"pmulhuw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE4),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply high the packed 16-bit unsigned integers\n-INST3(pmulhw,           \"pmulhw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE5),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply high the packed 16-bit signed integers\n-INST3(pmullw,           \"pmullw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD5),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed multiply 16 bit unsigned integers and store lower 16 bits of each result\n-INST3(pmuludq,          \"pmuludq\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF4),                            INS_TT_FULL,                         Input_32Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // packed multiply 32-bit unsigned integers and store 64-bit result\n-INST3(por,              \"por\",              IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEB),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise OR of two xmm regs\n-INST3(psadbw,           \"psadbw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF6),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Compute the sum of absolute differences of packed unsigned 8-bit integers\n-INST3(pshufd,           \"pshufd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x70),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shuffle of 32-bit integers\n-INST3(pshufhw,          \"pshufhw\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x70),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Shuffle the high words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.\n-INST3(pshuflw,          \"pshuflw\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x70),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Shuffle the low words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.\n-INST3(pslld,            \"pslld\",            IUM_WR, BAD_CODE,     PCKDBL(0x72), PCKDBL(0xF2),                            INS_TT_FULL     | INS_TT_MEM128,     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift left logical of 32-bit integers\n-INST3(pslldq,           \"pslldq\",           IUM_WR, BAD_CODE,     PCKDBL(0x73), BAD_CODE,                                INS_TT_FULL_MEM,                                      REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Shift left logical of xmm reg by given number of bytes\n-INST3(psllq,            \"psllq\",            IUM_WR, BAD_CODE,     PCKDBL(0x73), PCKDBL(0xF3),                            INS_TT_FULL     | INS_TT_MEM128,     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift left logical of 64-bit integers\n-INST3(psllw,            \"psllw\",            IUM_WR, BAD_CODE,     PCKDBL(0x71), PCKDBL(0xF1),                            INS_TT_FULL_MEM | INS_TT_MEM128,     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed shift left logical of 16-bit integers\n-INST3(psrad,            \"psrad\",            IUM_WR, BAD_CODE,     PCKDBL(0x72), PCKDBL(0xE2),                            INS_TT_FULL     | INS_TT_MEM128,     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift right arithmetic of 32-bit integers\n-INST3(psraw,            \"psraw\",            IUM_WR, BAD_CODE,     PCKDBL(0x71), PCKDBL(0xE1),                            INS_TT_FULL_MEM | INS_TT_MEM128,     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed shift right arithmetic of 16-bit integers\n-INST3(psrld,            \"psrld\",            IUM_WR, BAD_CODE,     PCKDBL(0x72), PCKDBL(0xD2),                            INS_TT_FULL     | INS_TT_MEM128,     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift right logical of 32-bit integers\n-INST3(psrldq,           \"psrldq\",           IUM_WR, BAD_CODE,     PCKDBL(0x73), BAD_CODE,                                INS_TT_FULL_MEM,                                      REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Shift right logical of xmm reg by given number of bytes\n-INST3(psrlq,            \"psrlq\",            IUM_WR, BAD_CODE,     PCKDBL(0x73), PCKDBL(0xD3),                            INS_TT_FULL     | INS_TT_MEM128,     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift right logical of 64-bit integers\n-INST3(psrlw,            \"psrlw\",            IUM_WR, BAD_CODE,     PCKDBL(0x71), PCKDBL(0xD1),                            INS_TT_FULL_MEM | INS_TT_MEM128,     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed shift right logical of 16-bit integers\n-INST3(psubb,            \"psubb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF8),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed word (16-bit) integers\n-INST3(psubd,            \"psubd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFA),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Subtract packed double-word (32-bit) integers\n-INST3(psubq,            \"psubq\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFB),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // subtract packed quad-word (64-bit) integers\n-INST3(psubw,            \"psubw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF9),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed word (16-bit) integers\n-INST3(psubsb,           \"psubsb\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE8),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed 8-bit integers in b from packed 8-bit integers in a using saturation\n-INST3(psubsw,           \"psubsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE9),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed 16-bit integers in b from packed 16-bit integers in a using saturation\n-INST3(psubusb,          \"psubusb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD8),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed unsigned 8-bit integers in b from packed unsigned 8-bit integers in a using saturation\n-INST3(psubusw,          \"psubusw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD9),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed unsigned 16-bit integers in b from packed unsigned 16-bit integers in a using saturation\n-INST3(punpckhbw,        \"punpckhbw\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x68),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ubyte to ushort (hi)\n-INST3(punpckhdq,        \"punpckhdq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6A),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\n-INST3(punpckhqdq,       \"punpckhqdq\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6D),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen uint to ulong (hi)\n-INST3(punpckhwd,        \"punpckhwd\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x69),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ushort to uint (hi)\n-INST3(punpcklbw,        \"punpcklbw\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x60),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ubyte to ushort (lo)\n-INST3(punpckldq,        \"punpckldq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x62),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\n-INST3(punpcklqdq,       \"punpcklqdq\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6C),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen uint to ulong (lo)\n-INST3(punpcklwd,        \"punpcklwd\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x61),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ushort to uint (lo)\n-INST3(pxor,             \"pxor\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEF),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise XOR of two xmm regs\n-INST3(shufpd,           \"shufpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC6),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\n-INST3(sqrtpd,           \"sqrtpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x51),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // Sqrt of packed doubles\n-INST3(sqrtsd,           \"sqrtsd\",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x51),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Sqrt of scalar double\n-INST3(subpd,            \"subpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5C),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Subtract packed doubles\n-INST3(subsd,            \"subsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5C),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract scalar doubles\n-INST3(ucomisd,          \"ucomisd\",          IUM_RD, BAD_CODE,     BAD_CODE,     PCKDBL(0x2E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // unordered compare doubles\n-INST3(unpckhpd,         \"unpckhpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x15),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen ubyte to ushort (hi)\n-INST3(unpcklpd,         \"unpcklpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x14),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen ubyte to ushort (hi)\n-INST3(xorpd,            \"xorpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x57),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // XOR packed doubles\n+INST3(addpd,            \"addpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x58),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed doubles\n+INST3(addsd,            \"addsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar doubles\n+INST3(andnpd,           \"andnpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x55),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // And-Not packed doubles\n+INST3(andpd,            \"andpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x54),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // AND packed doubles\n+INST3(cmppd,            \"cmppd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC2),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed doubles\n+INST3(cmpsd,            \"cmpsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar doubles\n+INST3(comisd,           \"comisd\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKDBL(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare doubles\n+INST3(cvtdq2pd,         \"cvtdq2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xE6),                            INS_TT_HALF,                         Input_32Bit    | KMask_Base2     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed DWORDs to doubles\n+INST3(cvtdq2ps,         \"cvtdq2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed DWORDs to singles\n+INST3(cvtpd2dq,         \"cvtpd2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed doubles to DWORDs\n+INST3(cvtpd2ps,         \"cvtpd2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5A),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed doubles to singles\n+INST3(cvtps2dq,         \"cvtps2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed singles to DWORDs\n+INST3(cvtps2pd,         \"cvtps2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5A),                            INS_TT_HALF,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed singles to doubles\n+INST3(cvtsd2si32,       \"cvtsd2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar double to DWORD\n+INST3(cvtsd2si64,       \"cvtsd2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar double to DWORD\n+INST3(cvtsd2ss,         \"cvtsd2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar double to scalar singles\n+INST3(cvtsi2sd32,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar double\n+INST3(cvtsi2sd64,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar double\n+INST3(cvtss2sd,         \"cvtss2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar single to scalar doubles\n+INST3(cvttpd2dq,        \"cvttpd2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc packed doubles to DWORDs\n+INST3(cvttps2dq,        \"cvttps2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc packed singles to DWORDs\n+INST3(cvttsd2si32,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\n+INST3(cvttsd2si64,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\n+INST3(divpd,            \"divpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5E),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide packed doubles\n+INST3(divsd,            \"divsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar doubles\n+INST3(lfence,           \"lfence\",           IUM_RD, 0x000FE8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                                            REX_WIG)\n+INST3(maskmovdqu,       \"maskmovdqu\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF7),                            INS_TT_NONE,                                                            REX_WIG)\n+INST3(maxpd,            \"maxpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5F),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum packed doubles\n+INST3(maxsd,            \"maxsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar double\n+INST3(mfence,           \"mfence\",           IUM_RD, 0x000FF0AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                                            REX_WIG)\n+INST3(minpd,            \"minpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5D),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum packed doubles\n+INST3(minsd,            \"minsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar double\n+INST3(movapd,           \"movapd\",           IUM_WR, PCKDBL(0x29), BAD_CODE,     PCKDBL(0x28),                            INS_TT_FULL_MEM,                                      KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\n+INST3(movd32,           \"movd\",             IUM_WR, PCKDBL(0x7E), BAD_CODE,     PCKDBL(0x6E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)                                                                                                                  // Move DWORD between xmm regs <-> memory/r32 regs\n+INST3(movd64,           \"movq\",             IUM_WR, PCKDBL(0x7E), BAD_CODE,     PCKDBL(0x6E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)                                                                                                                  // Move QWORD between xmm regs <-> memory/r64 regs\n+INST3(movdqa32,         \"movdqa\",           IUM_WR, PCKDBL(0x7F), BAD_CODE,     PCKDBL(0x6F),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)\n+INST3(movdqu32,         \"movdqu\",           IUM_WR, SSEFLT(0x7F), BAD_CODE,     SSEFLT(0x6F),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)\n+INST3(movhpd,           \"movhpd\",           IUM_WR, PCKDBL(0x17), BAD_CODE,     PCKDBL(0x16),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n+INST3(movlpd,           \"movlpd\",           IUM_WR, PCKDBL(0x13), BAD_CODE,     PCKDBL(0x12),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n+INST3(movmskpd,         \"movmskpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x50),                            INS_TT_NONE,                                                            REX_WIG      | Encoding_VEX)                                                                                                                                                   // Extract 2-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros.\n+INST3(movntdq,          \"movntdq\",          IUM_WR, PCKDBL(0xE7), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                                                        REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n+INST3(movnti32,         \"movnti\",           IUM_WR, PCKFLT(0xC3), BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_REX2)\n+INST3(movnti64,         \"movnti\",           IUM_WR, PCKFLT(0xC3), BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_REX2)\n+INST3(movntpd,          \"movntpd\",          IUM_WR, PCKDBL(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                                                        REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\n+INST3(movq,             \"movq\",             IUM_WR, PCKDBL(0xD6), BAD_CODE,     SSEFLT(0x7E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | Encoding_REX2)                                                                                                                 // Move Quadword between memory/mm <-> regs\n+INST3(movsd_simd,       \"movsd\",            IUM_WR, SSEDBL(0x11), BAD_CODE,     SSEDBL(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n+INST3(movupd,           \"movupd\",           IUM_WR, PCKDBL(0x11), BAD_CODE,     PCKDBL(0x10),                            INS_TT_FULL_MEM,                                      KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\n+INST3(mulpd,            \"mulpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x59),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply packed doubles\n+INST3(mulsd,            \"mulsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar doubles\n+INST3(orpd,             \"orpd\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x56),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Or packed doubles\n+INST3(packssdw,         \"packssdw\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base8     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) int to short with saturation\n+INST3(packsswb,         \"packsswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x63),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to byte with saturation\n+INST3(packuswb,         \"packuswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x67),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to unsigned byte with saturation\n+INST3(paddb,            \"paddb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFC),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed byte integers\n+INST3(paddd,            \"paddd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFE),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed double-word (32-bit) integers\n+INST3(paddq,            \"paddq\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD4),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed quad-word (64-bit) integers\n+INST3(paddsb,           \"paddsb\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEC),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed byte integers and saturate the results\n+INST3(paddsw,           \"paddsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xED),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed word integers and saturate the results\n+INST3(paddusb,          \"paddusb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDC),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned byte integers and saturate the results\n+INST3(paddusw,          \"paddusw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDD),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned word integers and saturate the results\n+INST3(paddw,            \"paddw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFD),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed word (16-bit) integers\n+INST3(pandd,            \"pand\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDB),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed bit-wise AND of two xmm regs\n+INST3(pandnd,           \"pandn\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDF),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed bit-wise AND NOT of two xmm regs\n+INST3(pavgb,            \"pavgb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE0),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed byte integers\n+INST3(pavgw,            \"pavgw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE3),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed word integers\n+INST3(pcmpeqb,          \"pcmpeqb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x74),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit integers for equality\n+INST3(pcmpeqd,          \"pcmpeqd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x76),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit integers for equality\n+INST3(pcmpeqw,          \"pcmpeqw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x75),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit integers for equality\n+INST3(pcmpgtb,          \"pcmpgtb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x64),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit signed integers for greater than\n+INST3(pcmpgtd,          \"pcmpgtd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x66),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit signed integers for greater than\n+INST3(pcmpgtw,          \"pcmpgtw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x65),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit signed integers for greater than\n+INST3(pextrw,           \"pextrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC5),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Extract 16-bit value into a r32 with zero extended to 32-bits\n+INST3(pinsrw,           \"pinsrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC4),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Insert word at index",
        "comment_created_at": "2025-05-19T01:33:33+00:00",
        "comment_author": "tannergooding",
        "comment_body": "Instructions like `pextrw` which extract to a general purpose register or like `pinsrw` which insert from a general-purpose register don't take masks.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094710307",
    "pr_number": 115704,
    "pr_file": "src/coreclr/jit/instrsxarch.h",
    "created_at": "2025-05-19T01:35:02+00:00",
    "commented_code": "INST3(FIRST_SSE_INSTRUCTION, \"FIRST_SSE_INSTRUCTION\", IUM_WR, BAD_CODE, BAD_CODE, BAD_CODE, INS_TT_NONE, INS_FLAGS_None)\n\n// SSE\nINST3(addps,            \"addps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x58),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed singles\nINST3(addss,            \"addss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar singles\nINST3(andnps,           \"andnps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x55),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // And-Not packed singles\nINST3(andps,            \"andps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x54),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // AND packed singles\nINST3(cmpps,            \"cmpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC2),                            INS_TT_FULL,                         Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed singles\nINST3(cmpss,            \"cmpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar singles\nINST3(comiss,           \"comiss\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare singles\nINST3(cvtsi2ss32,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar single\nINST3(cvtsi2ss64,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar single\nINST3(cvtss2si,         \"cvtss2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit    | REX_WX       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar single to DWORD/QWORD\nINST3(cvttss2si32,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\nINST3(cvttss2si64,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\nINST3(divps,            \"divps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5E),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Divide packed singles\nINST3(divss,            \"divss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar singles\nINST3(maxps,            \"maxps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5F),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Maximum packed singles\nINST3(maxss,            \"maxss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar single\nINST3(minps,            \"minps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5D),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Minimum packed singles\nINST3(minss,            \"minss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar single\nINST3(movaps,           \"movaps\",           IUM_WR, PCKFLT(0x29), BAD_CODE,     PCKFLT(0x28),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movhlps,          \"movhlps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x12),                            INS_TT_NONE,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\nINST3(movhps,           \"movhps\",           IUM_WR, PCKFLT(0x17), BAD_CODE,     PCKFLT(0x16),                            INS_TT_TUPLE2,                       Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movlhps,          \"movlhps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x16),                            INS_TT_NONE,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\nINST3(movlps,           \"movlps\",           IUM_WR, PCKFLT(0x13), BAD_CODE,     PCKFLT(0x12),                            INS_TT_TUPLE2,                       Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movmskps,         \"movmskps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x50),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)\nINST3(movntps,          \"movntps\",          IUM_WR, PCKFLT(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movss,            \"movss\",            IUM_WR, SSEFLT(0x11), BAD_CODE,     SSEFLT(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movups,           \"movups\",           IUM_WR, PCKFLT(0x11), BAD_CODE,     PCKFLT(0x10),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(mulps,            \"mulps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x59),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Multiply packed singles\nINST3(mulss,            \"mulss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar single\nINST3(orps,             \"orps\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x56),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Or packed singles\nINST3(prefetchnta,      \"prefetchnta\",      IUM_RD, 0x000F0018,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\nINST3(prefetcht0,       \"prefetcht0\",       IUM_RD, 0x000F0818,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\nINST3(prefetcht1,       \"prefetcht1\",       IUM_RD, 0x000F1018,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\nINST3(prefetcht2,       \"prefetcht2\",       IUM_RD, 0x000F1818,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\nINST3(rcpps,            \"rcpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x53),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal of packed singles\nINST3(rcpss,            \"rcpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x53),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal of scalar single\nINST3(rsqrtps,          \"rsqrtps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x52),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal Sqrt of packed singles\nINST3(rsqrtss,          \"rsqrtss\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x52),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal Sqrt of scalar single\nINST3(shufps,           \"shufps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC6),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\nINST3(sfence,           \"sfence\",           IUM_RD, 0x000FF8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG)\nINST3(sqrtps,           \"sqrtps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x51),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // Sqrt of packed singles\nINST3(sqrtss,           \"sqrtss\",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x51),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Sqrt of scalar single\nINST3(subps,            \"subps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5C),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Subtract packed singles\nINST3(subss,            \"subss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5C),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract scalar singles\nINST3(ucomiss,          \"ucomiss\",          IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // unordered compare singles\nINST3(unpckhps,         \"unpckhps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x15),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\nINST3(unpcklps,         \"unpcklps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x14),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\nINST3(xorps,            \"xorps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x57),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // XOR packed singles\nINST3(addps,            \"addps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x58),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed singles\nINST3(addss,            \"addss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar singles\nINST3(andnps,           \"andnps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x55),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // And-Not packed singles\nINST3(andps,            \"andps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x54),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // AND packed singles\nINST3(cmpps,            \"cmpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC2),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed singles\nINST3(cmpss,            \"cmpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar singles\nINST3(comiss,           \"comiss\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare singles\nINST3(cvtsi2ss32,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar single\nINST3(cvtsi2ss64,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar single\nINST3(cvtss2si32,       \"cvtss2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar single to DWORD/QWORD\nINST3(cvtss2si64,       \"cvtss2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar single to DWORD/QWORD\nINST3(cvttss2si32,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\nINST3(cvttss2si64,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\nINST3(divps,            \"divps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5E),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide packed singles\nINST3(divss,            \"divss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar singles\nINST3(maxps,            \"maxps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5F),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum packed singles\nINST3(maxss,            \"maxss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar single\nINST3(minps,            \"minps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5D),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum packed singles\nINST3(minss,            \"minss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar single\nINST3(movaps,           \"movaps\",           IUM_WR, PCKFLT(0x29), BAD_CODE,     PCKFLT(0x28),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movhlps,          \"movhlps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x12),                            INS_TT_NONE,                                                            REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\nINST3(movhps,           \"movhps\",           IUM_WR, PCKFLT(0x17), BAD_CODE,     PCKFLT(0x16),                            INS_TT_TUPLE2,                       Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movlhps,          \"movlhps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x16),                            INS_TT_NONE,                                                            REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\nINST3(movlps,           \"movlps\",           IUM_WR, PCKFLT(0x13), BAD_CODE,     PCKFLT(0x12),                            INS_TT_TUPLE2,                       Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movmskps,         \"movmskps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x50),                            INS_TT_NONE,                                                            REX_WIG      | Encoding_VEX)\nINST3(movntps,          \"movntps\",          IUM_WR, PCKFLT(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                                                        REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movss,            \"movss\",            IUM_WR, SSEFLT(0x11), BAD_CODE,     SSEFLT(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movups,           \"movups\",           IUM_WR, PCKFLT(0x11), BAD_CODE,     PCKFLT(0x10),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(mulps,            \"mulps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x59),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply packed singles\nINST3(mulss,            \"mulss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar single\nINST3(orps,             \"orps\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x56),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Or packed singles\nINST3(prefetchnta,      \"prefetchnta\",      IUM_RD, 0x000F0018,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\nINST3(prefetcht0,       \"prefetcht0\",       IUM_RD, 0x000F0818,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\nINST3(prefetcht1,       \"prefetcht1\",       IUM_RD, 0x000F1018,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\nINST3(prefetcht2,       \"prefetcht2\",       IUM_RD, 0x000F1818,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\nINST3(rcpps,            \"rcpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x53),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal of packed singles\nINST3(rcpss,            \"rcpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x53),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal of scalar single\nINST3(rsqrtps,          \"rsqrtps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x52),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal Sqrt of packed singles\nINST3(rsqrtss,          \"rsqrtss\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x52),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal Sqrt of scalar single\nINST3(shufps,           \"shufps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC6),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\nINST3(sfence,           \"sfence\",           IUM_RD, 0x000FF8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                                            REX_WIG)\nINST3(sqrtps,           \"sqrtps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x51),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Sqrt of packed singles\nINST3(sqrtss,           \"sqrtss\",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x51),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Sqrt of scalar single\nINST3(subps,            \"subps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5C),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed singles\nINST3(subss,            \"subss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5C),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract scalar singles\nINST3(ucomiss,          \"ucomiss\",          IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // unordered compare singles\nINST3(unpckhps,         \"unpckhps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x15),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\nINST3(unpcklps,         \"unpcklps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x14),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\nINST3(xorps,            \"xorps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x57),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // XOR packed singles\n\n// SSE2\nINST3(addpd,            \"addpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x58),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed doubles\nINST3(addsd,            \"addsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar doubles\nINST3(andnpd,           \"andnpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x55),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // And-Not packed doubles\nINST3(andpd,            \"andpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x54),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // AND packed doubles\nINST3(cmppd,            \"cmppd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC2),                            INS_TT_FULL,                         Input_64Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed doubles\nINST3(cmpsd,            \"cmpsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar doubles\nINST3(comisd,           \"comisd\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKDBL(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare doubles\nINST3(cvtdq2pd,         \"cvtdq2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xE6),                            INS_TT_HALF,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed DWORDs to doubles\nINST3(cvtdq2ps,         \"cvtdq2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed DWORDs to singles\nINST3(cvtpd2dq,         \"cvtpd2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed doubles to DWORDs\nINST3(cvtpd2ps,         \"cvtpd2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5A),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed doubles to singles\nINST3(cvtps2dq,         \"cvtps2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed singles to DWORDs\nINST3(cvtps2pd,         \"cvtps2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5A),                            INS_TT_HALF,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed singles to doubles\nINST3(cvtsd2si,         \"cvtsd2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit    | REX_WX       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar double to DWORD\nINST3(cvtsd2ss,         \"cvtsd2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar double to scalar singles\nINST3(cvtsi2sd32,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar double\nINST3(cvtsi2sd64,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar double\nINST3(cvtss2sd,         \"cvtss2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar single to scalar doubles\nINST3(cvttpd2dq,        \"cvttpd2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // cvt with trunc packed doubles to DWORDs\nINST3(cvttps2dq,        \"cvttps2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // cvt with trunc packed singles to DWORDs\nINST3(cvttsd2si32,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\nINST3(cvttsd2si64,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\nINST3(divpd,            \"divpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5E),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Divide packed doubles\nINST3(divsd,            \"divsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar doubles\nINST3(lfence,           \"lfence\",           IUM_RD, 0x000FE8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG)\nINST3(maskmovdqu,       \"maskmovdqu\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF7),                            INS_TT_NONE,                                          REX_WIG)\nINST3(maxpd,            \"maxpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5F),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Maximum packed doubles\nINST3(maxsd,            \"maxsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar double\nINST3(mfence,           \"mfence\",           IUM_RD, 0x000FF0AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG)\nINST3(minpd,            \"minpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5D),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Minimum packed doubles\nINST3(minsd,            \"minsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar double\nINST3(movapd,           \"movapd\",           IUM_WR, PCKDBL(0x29), BAD_CODE,     PCKDBL(0x28),                            INS_TT_FULL_MEM,                     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movd,             \"movd\",             IUM_WR, PCKDBL(0x7E), BAD_CODE,     PCKDBL(0x6E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_WX       | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)                                                                                                                                  // Move DWORD/QWORD between xmm regs <-> memory/r32/r64 regs\nINST3(movdqa,           \"movdqa\",           IUM_WR, PCKDBL(0x7F), BAD_CODE,     PCKDBL(0x6F),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)\nINST3(movdqu,           \"movdqu\",           IUM_WR, SSEFLT(0x7F), BAD_CODE,     SSEFLT(0x6F),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2 )\nINST3(movhpd,           \"movhpd\",           IUM_WR, PCKDBL(0x17), BAD_CODE,     PCKDBL(0x16),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movlpd,           \"movlpd\",           IUM_WR, PCKDBL(0x13), BAD_CODE,     PCKDBL(0x12),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movmskpd,         \"movmskpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x50),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Extract 2-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros.\nINST3(movntdq,          \"movntdq\",          IUM_WR, PCKDBL(0xE7), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movnti,           \"movnti\",           IUM_WR, PCKFLT(0xC3), BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WX       | Encoding_REX2)\nINST3(movntpd,          \"movntpd\",          IUM_WR, PCKDBL(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movq,             \"movq\",             IUM_WR, PCKDBL(0xD6), BAD_CODE,     SSEFLT(0x7E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | Encoding_REX2)                                                                                                                                  // Move Quadword between memory/mm <-> regs\nINST3(movsd_simd,       \"movsd\",            IUM_WR, SSEDBL(0x11), BAD_CODE,     SSEDBL(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movupd,           \"movupd\",           IUM_WR, PCKDBL(0x11), BAD_CODE,     PCKDBL(0x10),                            INS_TT_FULL_MEM,                     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(mulpd,            \"mulpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x59),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Multiply packed doubles\nINST3(mulsd,            \"mulsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar doubles\nINST3(orpd,             \"orpd\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x56),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Or packed doubles\nINST3(packssdw,         \"packssdw\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Pack (narrow) int to short with saturation\nINST3(packsswb,         \"packsswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x63),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to byte with saturation\nINST3(packuswb,         \"packuswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x67),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to unsigned byte with saturation\nINST3(paddb,            \"paddb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFC),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed byte integers\nINST3(paddd,            \"paddd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFE),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed double-word (32-bit) integers\nINST3(paddq,            \"paddq\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD4),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed quad-word (64-bit) integers\nINST3(paddsb,           \"paddsb\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEC),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed byte integers and saturate the results\nINST3(paddsw,           \"paddsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xED),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed word integers and saturate the results\nINST3(paddusb,          \"paddusb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDC),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned byte integers and saturate the results\nINST3(paddusw,          \"paddusw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDD),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned word integers and saturate the results\nINST3(paddw,            \"paddw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFD),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed word (16-bit) integers\nINST3(pand,             \"pand\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDB),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise AND of two xmm regs\nINST3(pandn,            \"pandn\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDF),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise AND NOT of two xmm regs\nINST3(pavgb,            \"pavgb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE0),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed byte integers\nINST3(pavgw,            \"pavgw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE3),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed word integers\nINST3(pcmpeqb,          \"pcmpeqb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x74),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit integers for equality\nINST3(pcmpeqd,          \"pcmpeqd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x76),                            INS_TT_FULL,                         Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit integers for equality\nINST3(pcmpeqw,          \"pcmpeqw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x75),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit integers for equality\nINST3(pcmpgtb,          \"pcmpgtb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x64),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit signed integers for greater than\nINST3(pcmpgtd,          \"pcmpgtd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x66),                            INS_TT_FULL,                         Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit signed integers for greater than\nINST3(pcmpgtw,          \"pcmpgtw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x65),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit signed integers for greater than\nINST3(pextrw,           \"pextrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC5),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Extract 16-bit value into a r32 with zero extended to 32-bits\nINST3(pinsrw,           \"pinsrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC4),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Insert word at index\nINST3(pmaddwd,          \"pmaddwd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF5),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply packed signed 16-bit integers in a and b, producing intermediate signed 32-bit integers. Horizontally add adjacent pairs of intermediate 32-bit integers, and pack the results in dst\nINST3(pmaxsw,           \"pmaxsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEE),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed maximum signed words\nINST3(pmaxub,           \"pmaxub\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDE),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed maximum unsigned bytes\nINST3(pminsw,           \"pminsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEA),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed minimum signed words\nINST3(pminub,           \"pminub\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDA),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed minimum unsigned bytes\nINST3(pmovmskb,         \"pmovmskb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD7),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Move the MSB bits of all bytes in a xmm reg to an int reg\nINST3(pmulhuw,          \"pmulhuw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE4),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply high the packed 16-bit unsigned integers\nINST3(pmulhw,           \"pmulhw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE5),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply high the packed 16-bit signed integers\nINST3(pmullw,           \"pmullw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD5),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed multiply 16 bit unsigned integers and store lower 16 bits of each result\nINST3(pmuludq,          \"pmuludq\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF4),                            INS_TT_FULL,                         Input_32Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // packed multiply 32-bit unsigned integers and store 64-bit result\nINST3(por,              \"por\",              IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEB),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise OR of two xmm regs\nINST3(psadbw,           \"psadbw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF6),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Compute the sum of absolute differences of packed unsigned 8-bit integers\nINST3(pshufd,           \"pshufd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x70),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shuffle of 32-bit integers\nINST3(pshufhw,          \"pshufhw\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x70),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Shuffle the high words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.\nINST3(pshuflw,          \"pshuflw\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x70),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Shuffle the low words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.\nINST3(pslld,            \"pslld\",            IUM_WR, BAD_CODE,     PCKDBL(0x72), PCKDBL(0xF2),                            INS_TT_FULL     | INS_TT_MEM128,     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift left logical of 32-bit integers\nINST3(pslldq,           \"pslldq\",           IUM_WR, BAD_CODE,     PCKDBL(0x73), BAD_CODE,                                INS_TT_FULL_MEM,                                      REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Shift left logical of xmm reg by given number of bytes\nINST3(psllq,            \"psllq\",            IUM_WR, BAD_CODE,     PCKDBL(0x73), PCKDBL(0xF3),                            INS_TT_FULL     | INS_TT_MEM128,     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift left logical of 64-bit integers\nINST3(psllw,            \"psllw\",            IUM_WR, BAD_CODE,     PCKDBL(0x71), PCKDBL(0xF1),                            INS_TT_FULL_MEM | INS_TT_MEM128,     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed shift left logical of 16-bit integers\nINST3(psrad,            \"psrad\",            IUM_WR, BAD_CODE,     PCKDBL(0x72), PCKDBL(0xE2),                            INS_TT_FULL     | INS_TT_MEM128,     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift right arithmetic of 32-bit integers\nINST3(psraw,            \"psraw\",            IUM_WR, BAD_CODE,     PCKDBL(0x71), PCKDBL(0xE1),                            INS_TT_FULL_MEM | INS_TT_MEM128,     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed shift right arithmetic of 16-bit integers\nINST3(psrld,            \"psrld\",            IUM_WR, BAD_CODE,     PCKDBL(0x72), PCKDBL(0xD2),                            INS_TT_FULL     | INS_TT_MEM128,     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift right logical of 32-bit integers\nINST3(psrldq,           \"psrldq\",           IUM_WR, BAD_CODE,     PCKDBL(0x73), BAD_CODE,                                INS_TT_FULL_MEM,                                      REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Shift right logical of xmm reg by given number of bytes\nINST3(psrlq,            \"psrlq\",            IUM_WR, BAD_CODE,     PCKDBL(0x73), PCKDBL(0xD3),                            INS_TT_FULL     | INS_TT_MEM128,     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift right logical of 64-bit integers\nINST3(psrlw,            \"psrlw\",            IUM_WR, BAD_CODE,     PCKDBL(0x71), PCKDBL(0xD1),                            INS_TT_FULL_MEM | INS_TT_MEM128,     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed shift right logical of 16-bit integers\nINST3(psubb,            \"psubb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF8),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed word (16-bit) integers\nINST3(psubd,            \"psubd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFA),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Subtract packed double-word (32-bit) integers\nINST3(psubq,            \"psubq\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFB),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // subtract packed quad-word (64-bit) integers\nINST3(psubw,            \"psubw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF9),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed word (16-bit) integers\nINST3(psubsb,           \"psubsb\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE8),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed 8-bit integers in b from packed 8-bit integers in a using saturation\nINST3(psubsw,           \"psubsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE9),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed 16-bit integers in b from packed 16-bit integers in a using saturation\nINST3(psubusb,          \"psubusb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD8),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed unsigned 8-bit integers in b from packed unsigned 8-bit integers in a using saturation\nINST3(psubusw,          \"psubusw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD9),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed unsigned 16-bit integers in b from packed unsigned 16-bit integers in a using saturation\nINST3(punpckhbw,        \"punpckhbw\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x68),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ubyte to ushort (hi)\nINST3(punpckhdq,        \"punpckhdq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6A),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\nINST3(punpckhqdq,       \"punpckhqdq\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6D),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen uint to ulong (hi)\nINST3(punpckhwd,        \"punpckhwd\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x69),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ushort to uint (hi)\nINST3(punpcklbw,        \"punpcklbw\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x60),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ubyte to ushort (lo)\nINST3(punpckldq,        \"punpckldq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x62),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\nINST3(punpcklqdq,       \"punpcklqdq\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6C),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen uint to ulong (lo)\nINST3(punpcklwd,        \"punpcklwd\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x61),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ushort to uint (lo)\nINST3(pxor,             \"pxor\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEF),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise XOR of two xmm regs\nINST3(shufpd,           \"shufpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC6),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\nINST3(sqrtpd,           \"sqrtpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x51),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // Sqrt of packed doubles\nINST3(sqrtsd,           \"sqrtsd\",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x51),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Sqrt of scalar double\nINST3(subpd,            \"subpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5C),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Subtract packed doubles\nINST3(subsd,            \"subsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5C),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract scalar doubles\nINST3(ucomisd,          \"ucomisd\",          IUM_RD, BAD_CODE,     BAD_CODE,     PCKDBL(0x2E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // unordered compare doubles\nINST3(unpckhpd,         \"unpckhpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x15),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen ubyte to ushort (hi)\nINST3(unpcklpd,         \"unpcklpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x14),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen ubyte to ushort (hi)\nINST3(xorpd,            \"xorpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x57),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // XOR packed doubles\nINST3(addpd,            \"addpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x58),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed doubles\nINST3(addsd,            \"addsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar doubles\nINST3(andnpd,           \"andnpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x55),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // And-Not packed doubles\nINST3(andpd,            \"andpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x54),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // AND packed doubles\nINST3(cmppd,            \"cmppd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC2),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed doubles\nINST3(cmpsd,            \"cmpsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar doubles\nINST3(comisd,           \"comisd\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKDBL(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare doubles\nINST3(cvtdq2pd,         \"cvtdq2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xE6),                            INS_TT_HALF,                         Input_32Bit    | KMask_Base2     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed DWORDs to doubles\nINST3(cvtdq2ps,         \"cvtdq2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed DWORDs to singles\nINST3(cvtpd2dq,         \"cvtpd2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed doubles to DWORDs\nINST3(cvtpd2ps,         \"cvtpd2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5A),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed doubles to singles\nINST3(cvtps2dq,         \"cvtps2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed singles to DWORDs\nINST3(cvtps2pd,         \"cvtps2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5A),                            INS_TT_HALF,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed singles to doubles\nINST3(cvtsd2si32,       \"cvtsd2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar double to DWORD\nINST3(cvtsd2si64,       \"cvtsd2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar double to DWORD\nINST3(cvtsd2ss,         \"cvtsd2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar double to scalar singles\nINST3(cvtsi2sd32,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar double\nINST3(cvtsi2sd64,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar double\nINST3(cvtss2sd,         \"cvtss2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar single to scalar doubles\nINST3(cvttpd2dq,        \"cvttpd2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc packed doubles to DWORDs\nINST3(cvttps2dq,        \"cvttps2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc packed singles to DWORDs\nINST3(cvttsd2si32,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\nINST3(cvttsd2si64,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\nINST3(divpd,            \"divpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5E),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide packed doubles\nINST3(divsd,            \"divsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar doubles\nINST3(lfence,           \"lfence\",           IUM_RD, 0x000FE8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                                            REX_WIG)\nINST3(maskmovdqu,       \"maskmovdqu\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF7),                            INS_TT_NONE,                                                            REX_WIG)\nINST3(maxpd,            \"maxpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5F),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum packed doubles\nINST3(maxsd,            \"maxsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar double\nINST3(mfence,           \"mfence\",           IUM_RD, 0x000FF0AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                                            REX_WIG)\nINST3(minpd,            \"minpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5D),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum packed doubles\nINST3(minsd,            \"minsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar double\nINST3(movapd,           \"movapd\",           IUM_WR, PCKDBL(0x29), BAD_CODE,     PCKDBL(0x28),                            INS_TT_FULL_MEM,                                      KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movd32,           \"movd\",             IUM_WR, PCKDBL(0x7E), BAD_CODE,     PCKDBL(0x6E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)                                                                                                                  // Move DWORD between xmm regs <-> memory/r32 regs\nINST3(movd64,           \"movq\",             IUM_WR, PCKDBL(0x7E), BAD_CODE,     PCKDBL(0x6E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)                                                                                                                  // Move QWORD between xmm regs <-> memory/r64 regs\nINST3(movdqa32,         \"movdqa\",           IUM_WR, PCKDBL(0x7F), BAD_CODE,     PCKDBL(0x6F),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)\nINST3(movdqu32,         \"movdqu\",           IUM_WR, SSEFLT(0x7F), BAD_CODE,     SSEFLT(0x6F),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)\nINST3(movhpd,           \"movhpd\",           IUM_WR, PCKDBL(0x17), BAD_CODE,     PCKDBL(0x16),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movlpd,           \"movlpd\",           IUM_WR, PCKDBL(0x13), BAD_CODE,     PCKDBL(0x12),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movmskpd,         \"movmskpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x50),                            INS_TT_NONE,                                                            REX_WIG      | Encoding_VEX)                                                                                                                                                   // Extract 2-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros.\nINST3(movntdq,          \"movntdq\",          IUM_WR, PCKDBL(0xE7), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                                                        REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movnti32,         \"movnti\",           IUM_WR, PCKFLT(0xC3), BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_REX2)\nINST3(movnti64,         \"movnti\",           IUM_WR, PCKFLT(0xC3), BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_REX2)\nINST3(movntpd,          \"movntpd\",          IUM_WR, PCKDBL(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                                                        REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(movq,             \"movq\",             IUM_WR, PCKDBL(0xD6), BAD_CODE,     SSEFLT(0x7E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | Encoding_REX2)                                                                                                                 // Move Quadword between memory/mm <-> regs\nINST3(movsd_simd,       \"movsd\",            IUM_WR, SSEDBL(0x11), BAD_CODE,     SSEDBL(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\nINST3(movupd,           \"movupd\",           IUM_WR, PCKDBL(0x11), BAD_CODE,     PCKDBL(0x10),                            INS_TT_FULL_MEM,                                      KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\nINST3(mulpd,            \"mulpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x59),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply packed doubles\nINST3(mulsd,            \"mulsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar doubles\nINST3(orpd,             \"orpd\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x56),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Or packed doubles\nINST3(packssdw,         \"packssdw\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base8     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) int to short with saturation\nINST3(packsswb,         \"packsswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x63),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to byte with saturation\nINST3(packuswb,         \"packuswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x67),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to unsigned byte with saturation\nINST3(paddb,            \"paddb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFC),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed byte integers\nINST3(paddd,            \"paddd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFE),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed double-word (32-bit) integers\nINST3(paddq,            \"paddq\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD4),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed quad-word (64-bit) integers\nINST3(paddsb,           \"paddsb\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEC),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed byte integers and saturate the results\nINST3(paddsw,           \"paddsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xED),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed word integers and saturate the results\nINST3(paddusb,          \"paddusb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDC),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned byte integers and saturate the results\nINST3(paddusw,          \"paddusw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDD),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned word integers and saturate the results\nINST3(paddw,            \"paddw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFD),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed word (16-bit) integers\nINST3(pandd,            \"pand\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDB),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed bit-wise AND of two xmm regs\nINST3(pandnd,           \"pandn\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDF),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed bit-wise AND NOT of two xmm regs\nINST3(pavgb,            \"pavgb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE0),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed byte integers\nINST3(pavgw,            \"pavgw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE3),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed word integers\nINST3(pcmpeqb,          \"pcmpeqb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x74),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit integers for equality\nINST3(pcmpeqd,          \"pcmpeqd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x76),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit integers for equality\nINST3(pcmpeqw,          \"pcmpeqw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x75),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit integers for equality\nINST3(pcmpgtb,          \"pcmpgtb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x64),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit signed integers for greater than\nINST3(pcmpgtd,          \"pcmpgtd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x66),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit signed integers for greater than\nINST3(pcmpgtw,          \"pcmpgtw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x65),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit signed integers for greater than\nINST3(pextrw,           \"pextrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC5),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Extract 16-bit value into a r32 with zero extended to 32-bits\nINST3(pinsrw,           \"pinsrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC4),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Insert word at index\nINST3(pmaddwd,          \"pmaddwd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF5),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply packed signed 16-bit integers in a and b, producing intermediate signed 32-bit integers. Horizontally add adjacent pairs of intermediate 32-bit integers, and pack the results in dst",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2094710307",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 115704,
        "pr_file": "src/coreclr/jit/instrsxarch.h",
        "discussion_id": "2094710307",
        "commented_code": "@@ -198,418 +198,426 @@ INSTMUL(imul_15,        \"imul\",             IUM_RD, BAD_CODE,     0x4400003868,\n INST3(FIRST_SSE_INSTRUCTION, \"FIRST_SSE_INSTRUCTION\", IUM_WR, BAD_CODE, BAD_CODE, BAD_CODE, INS_TT_NONE, INS_FLAGS_None)\n \n // SSE\n-INST3(addps,            \"addps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x58),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed singles\n-INST3(addss,            \"addss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar singles\n-INST3(andnps,           \"andnps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x55),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // And-Not packed singles\n-INST3(andps,            \"andps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x54),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // AND packed singles\n-INST3(cmpps,            \"cmpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC2),                            INS_TT_FULL,                         Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed singles\n-INST3(cmpss,            \"cmpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar singles\n-INST3(comiss,           \"comiss\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare singles\n-INST3(cvtsi2ss32,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar single\n-INST3(cvtsi2ss64,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar single\n-INST3(cvtss2si,         \"cvtss2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit    | REX_WX       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar single to DWORD/QWORD\n-INST3(cvttss2si32,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\n-INST3(cvttss2si64,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\n-INST3(divps,            \"divps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5E),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Divide packed singles\n-INST3(divss,            \"divss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar singles\n-INST3(maxps,            \"maxps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5F),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Maximum packed singles\n-INST3(maxss,            \"maxss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar single\n-INST3(minps,            \"minps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5D),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Minimum packed singles\n-INST3(minss,            \"minss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar single\n-INST3(movaps,           \"movaps\",           IUM_WR, PCKFLT(0x29), BAD_CODE,     PCKFLT(0x28),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n-INST3(movhlps,          \"movhlps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x12),                            INS_TT_NONE,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\n-INST3(movhps,           \"movhps\",           IUM_WR, PCKFLT(0x17), BAD_CODE,     PCKFLT(0x16),                            INS_TT_TUPLE2,                       Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n-INST3(movlhps,          \"movlhps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x16),                            INS_TT_NONE,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\n-INST3(movlps,           \"movlps\",           IUM_WR, PCKFLT(0x13), BAD_CODE,     PCKFLT(0x12),                            INS_TT_TUPLE2,                       Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n-INST3(movmskps,         \"movmskps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x50),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)\n-INST3(movntps,          \"movntps\",          IUM_WR, PCKFLT(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n-INST3(movss,            \"movss\",            IUM_WR, SSEFLT(0x11), BAD_CODE,     SSEFLT(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n-INST3(movups,           \"movups\",           IUM_WR, PCKFLT(0x11), BAD_CODE,     PCKFLT(0x10),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n-INST3(mulps,            \"mulps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x59),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Multiply packed singles\n-INST3(mulss,            \"mulss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar single\n-INST3(orps,             \"orps\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x56),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Or packed singles\n-INST3(prefetchnta,      \"prefetchnta\",      IUM_RD, 0x000F0018,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\n-INST3(prefetcht0,       \"prefetcht0\",       IUM_RD, 0x000F0818,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\n-INST3(prefetcht1,       \"prefetcht1\",       IUM_RD, 0x000F1018,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\n-INST3(prefetcht2,       \"prefetcht2\",       IUM_RD, 0x000F1818,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG      | Encoding_REX2)\n-INST3(rcpps,            \"rcpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x53),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal of packed singles\n-INST3(rcpss,            \"rcpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x53),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal of scalar single\n-INST3(rsqrtps,          \"rsqrtps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x52),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal Sqrt of packed singles\n-INST3(rsqrtss,          \"rsqrtss\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x52),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal Sqrt of scalar single\n-INST3(shufps,           \"shufps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC6),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\n-INST3(sfence,           \"sfence\",           IUM_RD, 0x000FF8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG)\n-INST3(sqrtps,           \"sqrtps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x51),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // Sqrt of packed singles\n-INST3(sqrtss,           \"sqrtss\",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x51),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Sqrt of scalar single\n-INST3(subps,            \"subps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5C),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Subtract packed singles\n-INST3(subss,            \"subss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5C),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract scalar singles\n-INST3(ucomiss,          \"ucomiss\",          IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // unordered compare singles\n-INST3(unpckhps,         \"unpckhps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x15),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\n-INST3(unpcklps,         \"unpcklps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x14),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\n-INST3(xorps,            \"xorps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x57),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // XOR packed singles\n+INST3(addps,            \"addps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x58),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed singles\n+INST3(addss,            \"addss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar singles\n+INST3(andnps,           \"andnps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x55),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // And-Not packed singles\n+INST3(andps,            \"andps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x54),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // AND packed singles\n+INST3(cmpps,            \"cmpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC2),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed singles\n+INST3(cmpss,            \"cmpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar singles\n+INST3(comiss,           \"comiss\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare singles\n+INST3(cvtsi2ss32,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar single\n+INST3(cvtsi2ss64,       \"cvtsi2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar single\n+INST3(cvtss2si32,       \"cvtss2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar single to DWORD/QWORD\n+INST3(cvtss2si64,       \"cvtss2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar single to DWORD/QWORD\n+INST3(cvttss2si32,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\n+INST3(cvttss2si64,      \"cvttss2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_32Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar single to DWORD\n+INST3(divps,            \"divps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5E),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide packed singles\n+INST3(divss,            \"divss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar singles\n+INST3(maxps,            \"maxps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5F),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum packed singles\n+INST3(maxss,            \"maxss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar single\n+INST3(minps,            \"minps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5D),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum packed singles\n+INST3(minss,            \"minss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar single\n+INST3(movaps,           \"movaps\",           IUM_WR, PCKFLT(0x29), BAD_CODE,     PCKFLT(0x28),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n+INST3(movhlps,          \"movhlps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x12),                            INS_TT_NONE,                                                            REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\n+INST3(movhps,           \"movhps\",           IUM_WR, PCKFLT(0x17), BAD_CODE,     PCKFLT(0x16),                            INS_TT_TUPLE2,                       Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n+INST3(movlhps,          \"movlhps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x16),                            INS_TT_NONE,                                                            REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\n+INST3(movlps,           \"movlps\",           IUM_WR, PCKFLT(0x13), BAD_CODE,     PCKFLT(0x12),                            INS_TT_TUPLE2,                       Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n+INST3(movmskps,         \"movmskps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x50),                            INS_TT_NONE,                                                            REX_WIG      | Encoding_VEX)\n+INST3(movntps,          \"movntps\",          IUM_WR, PCKFLT(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                                                        REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n+INST3(movss,            \"movss\",            IUM_WR, SSEFLT(0x11), BAD_CODE,     SSEFLT(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n+INST3(movups,           \"movups\",           IUM_WR, PCKFLT(0x11), BAD_CODE,     PCKFLT(0x10),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n+INST3(mulps,            \"mulps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x59),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply packed singles\n+INST3(mulss,            \"mulss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar single\n+INST3(orps,             \"orps\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x56),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Or packed singles\n+INST3(prefetchnta,      \"prefetchnta\",      IUM_RD, 0x000F0018,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\n+INST3(prefetcht0,       \"prefetcht0\",       IUM_RD, 0x000F0818,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\n+INST3(prefetcht1,       \"prefetcht1\",       IUM_RD, 0x000F1018,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\n+INST3(prefetcht2,       \"prefetcht2\",       IUM_RD, 0x000F1818,   BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_FIXED,                 Input_8Bit                       | REX_WIG      | Encoding_REX2)\n+INST3(rcpps,            \"rcpps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x53),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal of packed singles\n+INST3(rcpss,            \"rcpss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x53),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal of scalar single\n+INST3(rsqrtps,          \"rsqrtps\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x52),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX)                                                                                                                                                   // Reciprocal Sqrt of packed singles\n+INST3(rsqrtss,          \"rsqrtss\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x52),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Reciprocal Sqrt of scalar single\n+INST3(shufps,           \"shufps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0xC6),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\n+INST3(sfence,           \"sfence\",           IUM_RD, 0x000FF8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                                            REX_WIG)\n+INST3(sqrtps,           \"sqrtps\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x51),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Sqrt of packed singles\n+INST3(sqrtss,           \"sqrtss\",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x51),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Sqrt of scalar single\n+INST3(subps,            \"subps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5C),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed singles\n+INST3(subss,            \"subss\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5C),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract scalar singles\n+INST3(ucomiss,          \"ucomiss\",          IUM_RD, BAD_CODE,     BAD_CODE,     PCKFLT(0x2E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // unordered compare singles\n+INST3(unpckhps,         \"unpckhps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x15),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\n+INST3(unpcklps,         \"unpcklps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x14),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)\n+INST3(xorps,            \"xorps\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x57),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // XOR packed singles\n \n // SSE2\n-INST3(addpd,            \"addpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x58),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed doubles\n-INST3(addsd,            \"addsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar doubles\n-INST3(andnpd,           \"andnpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x55),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // And-Not packed doubles\n-INST3(andpd,            \"andpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x54),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // AND packed doubles\n-INST3(cmppd,            \"cmppd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC2),                            INS_TT_FULL,                         Input_64Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed doubles\n-INST3(cmpsd,            \"cmpsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar doubles\n-INST3(comisd,           \"comisd\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKDBL(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare doubles\n-INST3(cvtdq2pd,         \"cvtdq2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xE6),                            INS_TT_HALF,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed DWORDs to doubles\n-INST3(cvtdq2ps,         \"cvtdq2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed DWORDs to singles\n-INST3(cvtpd2dq,         \"cvtpd2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed doubles to DWORDs\n-INST3(cvtpd2ps,         \"cvtpd2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5A),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed doubles to singles\n-INST3(cvtps2dq,         \"cvtps2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed singles to DWORDs\n-INST3(cvtps2pd,         \"cvtps2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5A),                            INS_TT_HALF,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_EmbeddedBroadcastSupported)                                                                                          // cvt packed singles to doubles\n-INST3(cvtsd2si,         \"cvtsd2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit    | REX_WX       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar double to DWORD\n-INST3(cvtsd2ss,         \"cvtsd2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar double to scalar singles\n-INST3(cvtsi2sd32,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar double\n-INST3(cvtsi2sd64,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar double\n-INST3(cvtss2sd,         \"cvtss2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar single to scalar doubles\n-INST3(cvttpd2dq,        \"cvttpd2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // cvt with trunc packed doubles to DWORDs\n-INST3(cvttps2dq,        \"cvttps2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // cvt with trunc packed singles to DWORDs\n-INST3(cvttsd2si32,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\n-INST3(cvttsd2si64,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit    | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\n-INST3(divpd,            \"divpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5E),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Divide packed doubles\n-INST3(divsd,            \"divsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar doubles\n-INST3(lfence,           \"lfence\",           IUM_RD, 0x000FE8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG)\n-INST3(maskmovdqu,       \"maskmovdqu\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF7),                            INS_TT_NONE,                                          REX_WIG)\n-INST3(maxpd,            \"maxpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5F),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Maximum packed doubles\n-INST3(maxsd,            \"maxsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar double\n-INST3(mfence,           \"mfence\",           IUM_RD, 0x000FF0AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WIG)\n-INST3(minpd,            \"minpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5D),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Return Minimum packed doubles\n-INST3(minsd,            \"minsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar double\n-INST3(movapd,           \"movapd\",           IUM_WR, PCKDBL(0x29), BAD_CODE,     PCKDBL(0x28),                            INS_TT_FULL_MEM,                     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\n-INST3(movd,             \"movd\",             IUM_WR, PCKDBL(0x7E), BAD_CODE,     PCKDBL(0x6E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | REX_WX       | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)                                                                                                                                  // Move DWORD/QWORD between xmm regs <-> memory/r32/r64 regs\n-INST3(movdqa,           \"movdqa\",           IUM_WR, PCKDBL(0x7F), BAD_CODE,     PCKDBL(0x6F),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)\n-INST3(movdqu,           \"movdqu\",           IUM_WR, SSEFLT(0x7F), BAD_CODE,     SSEFLT(0x6F),                            INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2 )\n-INST3(movhpd,           \"movhpd\",           IUM_WR, PCKDBL(0x17), BAD_CODE,     PCKDBL(0x16),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n-INST3(movlpd,           \"movlpd\",           IUM_WR, PCKDBL(0x13), BAD_CODE,     PCKDBL(0x12),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n-INST3(movmskpd,         \"movmskpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x50),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Extract 2-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros.\n-INST3(movntdq,          \"movntdq\",          IUM_WR, PCKDBL(0xE7), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n-INST3(movnti,           \"movnti\",           IUM_WR, PCKFLT(0xC3), BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                          REX_WX       | Encoding_REX2)\n-INST3(movntpd,          \"movntpd\",          IUM_WR, PCKDBL(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\n-INST3(movq,             \"movq\",             IUM_WR, PCKDBL(0xD6), BAD_CODE,     SSEFLT(0x7E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | Encoding_REX2)                                                                                                                                  // Move Quadword between memory/mm <-> regs\n-INST3(movsd_simd,       \"movsd\",            IUM_WR, SSEDBL(0x11), BAD_CODE,     SSEDBL(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n-INST3(movupd,           \"movupd\",           IUM_WR, PCKDBL(0x11), BAD_CODE,     PCKDBL(0x10),                            INS_TT_FULL_MEM,                     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\n-INST3(mulpd,            \"mulpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x59),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Multiply packed doubles\n-INST3(mulsd,            \"mulsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar doubles\n-INST3(orpd,             \"orpd\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x56),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Or packed doubles\n-INST3(packssdw,         \"packssdw\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6B),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Pack (narrow) int to short with saturation\n-INST3(packsswb,         \"packsswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x63),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to byte with saturation\n-INST3(packuswb,         \"packuswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x67),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to unsigned byte with saturation\n-INST3(paddb,            \"paddb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFC),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed byte integers\n-INST3(paddd,            \"paddd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFE),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed double-word (32-bit) integers\n-INST3(paddq,            \"paddq\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD4),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Add packed quad-word (64-bit) integers\n-INST3(paddsb,           \"paddsb\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEC),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed byte integers and saturate the results\n-INST3(paddsw,           \"paddsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xED),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed word integers and saturate the results\n-INST3(paddusb,          \"paddusb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDC),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned byte integers and saturate the results\n-INST3(paddusw,          \"paddusw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDD),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned word integers and saturate the results\n-INST3(paddw,            \"paddw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFD),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed word (16-bit) integers\n-INST3(pand,             \"pand\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDB),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise AND of two xmm regs\n-INST3(pandn,            \"pandn\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDF),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise AND NOT of two xmm regs\n-INST3(pavgb,            \"pavgb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE0),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed byte integers\n-INST3(pavgw,            \"pavgw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE3),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed word integers\n-INST3(pcmpeqb,          \"pcmpeqb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x74),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit integers for equality\n-INST3(pcmpeqd,          \"pcmpeqd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x76),                            INS_TT_FULL,                         Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit integers for equality\n-INST3(pcmpeqw,          \"pcmpeqw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x75),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit integers for equality\n-INST3(pcmpgtb,          \"pcmpgtb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x64),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit signed integers for greater than\n-INST3(pcmpgtd,          \"pcmpgtd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x66),                            INS_TT_FULL,                         Input_32Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit signed integers for greater than\n-INST3(pcmpgtw,          \"pcmpgtw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x65),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit signed integers for greater than\n-INST3(pextrw,           \"pextrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC5),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Extract 16-bit value into a r32 with zero extended to 32-bits\n-INST3(pinsrw,           \"pinsrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC4),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit    | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Insert word at index\n-INST3(pmaddwd,          \"pmaddwd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF5),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply packed signed 16-bit integers in a and b, producing intermediate signed 32-bit integers. Horizontally add adjacent pairs of intermediate 32-bit integers, and pack the results in dst\n-INST3(pmaxsw,           \"pmaxsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEE),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed maximum signed words\n-INST3(pmaxub,           \"pmaxub\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDE),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed maximum unsigned bytes\n-INST3(pminsw,           \"pminsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEA),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed minimum signed words\n-INST3(pminub,           \"pminub\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDA),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // packed minimum unsigned bytes\n-INST3(pmovmskb,         \"pmovmskb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD7),                            INS_TT_NONE,                                          REX_WIG      | Encoding_VEX)                                                                                                                                                   // Move the MSB bits of all bytes in a xmm reg to an int reg\n-INST3(pmulhuw,          \"pmulhuw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE4),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply high the packed 16-bit unsigned integers\n-INST3(pmulhw,           \"pmulhw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE5),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply high the packed 16-bit signed integers\n-INST3(pmullw,           \"pmullw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD5),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed multiply 16 bit unsigned integers and store lower 16 bits of each result\n-INST3(pmuludq,          \"pmuludq\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF4),                            INS_TT_FULL,                         Input_32Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // packed multiply 32-bit unsigned integers and store 64-bit result\n-INST3(por,              \"por\",              IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEB),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise OR of two xmm regs\n-INST3(psadbw,           \"psadbw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF6),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Compute the sum of absolute differences of packed unsigned 8-bit integers\n-INST3(pshufd,           \"pshufd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x70),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shuffle of 32-bit integers\n-INST3(pshufhw,          \"pshufhw\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x70),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Shuffle the high words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.\n-INST3(pshuflw,          \"pshuflw\",          IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x70),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Shuffle the low words in xmm2/m128 based on the encoding in imm8 and store the result in xmm1.\n-INST3(pslld,            \"pslld\",            IUM_WR, BAD_CODE,     PCKDBL(0x72), PCKDBL(0xF2),                            INS_TT_FULL     | INS_TT_MEM128,     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift left logical of 32-bit integers\n-INST3(pslldq,           \"pslldq\",           IUM_WR, BAD_CODE,     PCKDBL(0x73), BAD_CODE,                                INS_TT_FULL_MEM,                                      REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Shift left logical of xmm reg by given number of bytes\n-INST3(psllq,            \"psllq\",            IUM_WR, BAD_CODE,     PCKDBL(0x73), PCKDBL(0xF3),                            INS_TT_FULL     | INS_TT_MEM128,     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift left logical of 64-bit integers\n-INST3(psllw,            \"psllw\",            IUM_WR, BAD_CODE,     PCKDBL(0x71), PCKDBL(0xF1),                            INS_TT_FULL_MEM | INS_TT_MEM128,     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed shift left logical of 16-bit integers\n-INST3(psrad,            \"psrad\",            IUM_WR, BAD_CODE,     PCKDBL(0x72), PCKDBL(0xE2),                            INS_TT_FULL     | INS_TT_MEM128,     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift right arithmetic of 32-bit integers\n-INST3(psraw,            \"psraw\",            IUM_WR, BAD_CODE,     PCKDBL(0x71), PCKDBL(0xE1),                            INS_TT_FULL_MEM | INS_TT_MEM128,     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed shift right arithmetic of 16-bit integers\n-INST3(psrld,            \"psrld\",            IUM_WR, BAD_CODE,     PCKDBL(0x72), PCKDBL(0xD2),                            INS_TT_FULL     | INS_TT_MEM128,     Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift right logical of 32-bit integers\n-INST3(psrldq,           \"psrldq\",           IUM_WR, BAD_CODE,     PCKDBL(0x73), BAD_CODE,                                INS_TT_FULL_MEM,                                      REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Shift right logical of xmm reg by given number of bytes\n-INST3(psrlq,            \"psrlq\",            IUM_WR, BAD_CODE,     PCKDBL(0x73), PCKDBL(0xD3),                            INS_TT_FULL     | INS_TT_MEM128,     Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed shift right logical of 64-bit integers\n-INST3(psrlw,            \"psrlw\",            IUM_WR, BAD_CODE,     PCKDBL(0x71), PCKDBL(0xD1),                            INS_TT_FULL_MEM | INS_TT_MEM128,     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed shift right logical of 16-bit integers\n-INST3(psubb,            \"psubb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF8),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed word (16-bit) integers\n-INST3(psubd,            \"psubd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFA),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Subtract packed double-word (32-bit) integers\n-INST3(psubq,            \"psubq\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFB),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // subtract packed quad-word (64-bit) integers\n-INST3(psubw,            \"psubw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF9),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed word (16-bit) integers\n-INST3(psubsb,           \"psubsb\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE8),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed 8-bit integers in b from packed 8-bit integers in a using saturation\n-INST3(psubsw,           \"psubsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE9),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed 16-bit integers in b from packed 16-bit integers in a using saturation\n-INST3(psubusb,          \"psubusb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD8),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed unsigned 8-bit integers in b from packed unsigned 8-bit integers in a using saturation\n-INST3(psubusw,          \"psubusw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD9),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract packed unsigned 16-bit integers in b from packed unsigned 16-bit integers in a using saturation\n-INST3(punpckhbw,        \"punpckhbw\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x68),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ubyte to ushort (hi)\n-INST3(punpckhdq,        \"punpckhdq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6A),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\n-INST3(punpckhqdq,       \"punpckhqdq\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6D),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen uint to ulong (hi)\n-INST3(punpckhwd,        \"punpckhwd\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x69),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ushort to uint (hi)\n-INST3(punpcklbw,        \"punpcklbw\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x60),                            INS_TT_FULL_MEM,                     Input_8Bit     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ubyte to ushort (lo)\n-INST3(punpckldq,        \"punpckldq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x62),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\n-INST3(punpcklqdq,       \"punpcklqdq\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6C),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen uint to ulong (lo)\n-INST3(punpcklwd,        \"punpcklwd\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x61),                            INS_TT_FULL_MEM,                     Input_16Bit    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed logical (unsigned) widen ushort to uint (lo)\n-INST3(pxor,             \"pxor\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEF),                            INS_TT_FULL,                         Input_32Bit    | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed bit-wise XOR of two xmm regs\n-INST3(shufpd,           \"shufpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC6),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)\n-INST3(sqrtpd,           \"sqrtpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x51),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | INS_Flags_EmbeddedBroadcastSupported)                                                    // Sqrt of packed doubles\n-INST3(sqrtsd,           \"sqrtsd\",           IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x51),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)                                                                                           // Sqrt of scalar double\n-INST3(subpd,            \"subpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5C),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Subtract packed doubles\n-INST3(subsd,            \"subsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5C),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Subtract scalar doubles\n-INST3(ucomisd,          \"ucomisd\",          IUM_RD, BAD_CODE,     BAD_CODE,     PCKDBL(0x2E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // unordered compare doubles\n-INST3(unpckhpd,         \"unpckhpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x15),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen ubyte to ushort (hi)\n-INST3(unpcklpd,         \"unpcklpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x14),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // Packed logical (unsigned) widen ubyte to ushort (hi)\n-INST3(xorpd,            \"xorpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x57),                            INS_TT_FULL,                         Input_64Bit    | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction | INS_Flags_EmbeddedBroadcastSupported)                                                    // XOR packed doubles\n+INST3(addpd,            \"addpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x58),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed doubles\n+INST3(addsd,            \"addsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x58),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add scalar doubles\n+INST3(andnpd,           \"andnpd\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x55),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // And-Not packed doubles\n+INST3(andpd,            \"andpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x54),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // AND packed doubles\n+INST3(cmppd,            \"cmppd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC2),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare packed doubles\n+INST3(cmpsd,            \"cmpsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xC2),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // compare scalar doubles\n+INST3(comisd,           \"comisd\",           IUM_RD, BAD_CODE,     BAD_CODE,     PCKDBL(0x2F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX                                        | Resets_OF    | Resets_SF    | Writes_ZF    | Resets_AF    | Writes_PF    | Writes_CF)    // ordered compare doubles\n+INST3(cvtdq2pd,         \"cvtdq2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0xE6),                            INS_TT_HALF,                         Input_32Bit    | KMask_Base2     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed DWORDs to doubles\n+INST3(cvtdq2ps,         \"cvtdq2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed DWORDs to singles\n+INST3(cvtpd2dq,         \"cvtpd2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed doubles to DWORDs\n+INST3(cvtpd2ps,         \"cvtpd2ps\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5A),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed doubles to singles\n+INST3(cvtps2dq,         \"cvtps2dq\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed singles to DWORDs\n+INST3(cvtps2pd,         \"cvtps2pd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKFLT(0x5A),                            INS_TT_HALF,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt packed singles to doubles\n+INST3(cvtsd2si32,       \"cvtsd2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar double to DWORD\n+INST3(cvtsd2si64,       \"cvtsd2si\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2D),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt scalar double to DWORD\n+INST3(cvtsd2ss,         \"cvtsd2ss\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar double to scalar singles\n+INST3(cvtsi2sd32,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt DWORD to scalar double\n+INST3(cvtsi2sd64,       \"cvtsi2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2A),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt QWORD to scalar double\n+INST3(cvtss2sd,         \"cvtss2sd\",         IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5A),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit    | KMask_Base1     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // cvt scalar single to scalar doubles\n+INST3(cvttpd2dq,        \"cvttpd2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE6),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc packed doubles to DWORDs\n+INST3(cvttps2dq,        \"cvttps2dq\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEFLT(0x5B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc packed singles to DWORDs\n+INST3(cvttsd2si32,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\n+INST3(cvttsd2si64,      \"cvttsd2si\",        IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x2C),                            INS_TT_TUPLE1_FIXED,                 Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // cvt with trunc scalar double to signed DWORDs\n+INST3(divpd,            \"divpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5E),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide packed doubles\n+INST3(divsd,            \"divsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Divide scalar doubles\n+INST3(lfence,           \"lfence\",           IUM_RD, 0x000FE8AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                                            REX_WIG)\n+INST3(maskmovdqu,       \"maskmovdqu\",       IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF7),                            INS_TT_NONE,                                                            REX_WIG)\n+INST3(maxpd,            \"maxpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5F),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum packed doubles\n+INST3(maxsd,            \"maxsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5F),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Maximum scalar double\n+INST3(mfence,           \"mfence\",           IUM_RD, 0x000FF0AE,   BAD_CODE,     BAD_CODE,                                INS_TT_NONE,                                                            REX_WIG)\n+INST3(minpd,            \"minpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x5D),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum packed doubles\n+INST3(minsd,            \"minsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x5D),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Return Minimum scalar double\n+INST3(movapd,           \"movapd\",           IUM_WR, PCKDBL(0x29), BAD_CODE,     PCKDBL(0x28),                            INS_TT_FULL_MEM,                                      KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\n+INST3(movd32,           \"movd\",             IUM_WR, PCKDBL(0x7E), BAD_CODE,     PCKDBL(0x6E),                            INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)                                                                                                                  // Move DWORD between xmm regs <-> memory/r32 regs\n+INST3(movd64,           \"movq\",             IUM_WR, PCKDBL(0x7E), BAD_CODE,     PCKDBL(0x6E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)                                                                                                                  // Move QWORD between xmm regs <-> memory/r64 regs\n+INST3(movdqa32,         \"movdqa\",           IUM_WR, PCKDBL(0x7F), BAD_CODE,     PCKDBL(0x6F),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)\n+INST3(movdqu32,         \"movdqu\",           IUM_WR, SSEFLT(0x7F), BAD_CODE,     SSEFLT(0x6F),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX | Encoding_REX2)\n+INST3(movhpd,           \"movhpd\",           IUM_WR, PCKDBL(0x17), BAD_CODE,     PCKDBL(0x16),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n+INST3(movlpd,           \"movlpd\",           IUM_WR, PCKDBL(0x13), BAD_CODE,     PCKDBL(0x12),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n+INST3(movmskpd,         \"movmskpd\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x50),                            INS_TT_NONE,                                                            REX_WIG      | Encoding_VEX)                                                                                                                                                   // Extract 2-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros.\n+INST3(movntdq,          \"movntdq\",          IUM_WR, PCKDBL(0xE7), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                                                        REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX)\n+INST3(movnti32,         \"movnti\",           IUM_WR, PCKFLT(0xC3), BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_SCALAR,                Input_32Bit                      | REX_W0       | Encoding_REX2)\n+INST3(movnti64,         \"movnti\",           IUM_WR, PCKFLT(0xC3), BAD_CODE,     BAD_CODE,                                INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1       | Encoding_REX2)\n+INST3(movntpd,          \"movntpd\",          IUM_WR, PCKDBL(0x2B), BAD_CODE,     BAD_CODE,                                INS_TT_FULL_MEM,                                                        REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\n+INST3(movq,             \"movq\",             IUM_WR, PCKDBL(0xD6), BAD_CODE,     SSEFLT(0x7E),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit                      | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | Encoding_REX2)                                                                                                                 // Move Quadword between memory/mm <-> regs\n+INST3(movsd_simd,       \"movsd\",            IUM_WR, SSEDBL(0x11), BAD_CODE,     SSEDBL(0x10),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstSrcSrcAVXInstruction)\n+INST3(movupd,           \"movupd\",           IUM_WR, PCKDBL(0x11), BAD_CODE,     PCKDBL(0x10),                            INS_TT_FULL_MEM,                                      KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX)\n+INST3(mulpd,            \"mulpd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x59),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply packed doubles\n+INST3(mulsd,            \"mulsd\",            IUM_WR, BAD_CODE,     BAD_CODE,     SSEDBL(0x59),                            INS_TT_TUPLE1_SCALAR,                Input_64Bit    | KMask_Base1     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply scalar doubles\n+INST3(orpd,             \"orpd\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x56),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Or packed doubles\n+INST3(packssdw,         \"packssdw\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x6B),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base8     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) int to short with saturation\n+INST3(packsswb,         \"packsswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x63),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to byte with saturation\n+INST3(packuswb,         \"packuswb\",         IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x67),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Pack (narrow) short to unsigned byte with saturation\n+INST3(paddb,            \"paddb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFC),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed byte integers\n+INST3(paddd,            \"paddd\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFE),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed double-word (32-bit) integers\n+INST3(paddq,            \"paddq\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xD4),                            INS_TT_FULL,                         Input_64Bit    | KMask_Base2     | REX_W1_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed quad-word (64-bit) integers\n+INST3(paddsb,           \"paddsb\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xEC),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed byte integers and saturate the results\n+INST3(paddsw,           \"paddsw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xED),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed signed word integers and saturate the results\n+INST3(paddusb,          \"paddusb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDC),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned byte integers and saturate the results\n+INST3(paddusw,          \"paddusw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDD),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed unsigned word integers and saturate the results\n+INST3(paddw,            \"paddw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xFD),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Add packed word (16-bit) integers\n+INST3(pandd,            \"pand\",             IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDB),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed bit-wise AND of two xmm regs\n+INST3(pandnd,           \"pandn\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xDF),                            INS_TT_FULL,                         Input_32Bit    | KMask_Base4     | REX_W0_EVEX  | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed bit-wise AND NOT of two xmm regs\n+INST3(pavgb,            \"pavgb\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE0),                            INS_TT_FULL_MEM,                                      KMask_Base16    | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed byte integers\n+INST3(pavgw,            \"pavgw\",            IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xE3),                            INS_TT_FULL_MEM,                                      KMask_Base8     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Average of packed word integers\n+INST3(pcmpeqb,          \"pcmpeqb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x74),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit integers for equality\n+INST3(pcmpeqd,          \"pcmpeqd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x76),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit integers for equality\n+INST3(pcmpeqw,          \"pcmpeqw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x75),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit integers for equality\n+INST3(pcmpgtb,          \"pcmpgtb\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x64),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 8-bit signed integers for greater than\n+INST3(pcmpgtd,          \"pcmpgtd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x66),                            INS_TT_FULL,                                                            REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 32-bit signed integers for greater than\n+INST3(pcmpgtw,          \"pcmpgtw\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0x65),                            INS_TT_FULL_MEM,                                                        REX_WIG      | Encoding_VEX                   | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Packed compare 16-bit signed integers for greater than\n+INST3(pextrw,           \"pextrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC5),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX)                                                                                                                                  // Extract 16-bit value into a r32 with zero extended to 32-bits\n+INST3(pinsrw,           \"pinsrw\",           IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xC4),                            INS_TT_TUPLE1_SCALAR,                Input_16Bit                      | REX_W0       | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Insert word at index\n+INST3(pmaddwd,          \"pmaddwd\",          IUM_WR, BAD_CODE,     BAD_CODE,     PCKDBL(0xF5),                            INS_TT_FULL_MEM,                                      KMask_Base4     | REX_WIG      | Encoding_VEX  | Encoding_EVEX  | INS_Flags_IsDstDstSrcAVXInstruction)                                                                                           // Multiply packed signed 16-bit integers in a and b, producing intermediate signed 32-bit integers. Horizontally add adjacent pairs of intermediate 32-bit integers, and pack the results in dst",
        "comment_created_at": "2025-05-19T01:35:02+00:00",
        "comment_author": "tannergooding",
        "comment_body": "Instructions like `pmaddwd` which are `INS_TT_FULL_MEM` don't have the `Input_*Bit` flag since they cannot support embedded broadcast and only ever take the full simd size.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1148418988",
    "pr_number": 83927,
    "pr_file": "src/coreclr/jit/lsra.h",
    "created_at": "2023-03-25T19:11:47+00:00",
    "commented_code": "template <class T>\nRegisterType regType(T type)\n{\n    return varTypeUsesFloatReg(TypeGet(type)) ? FloatRegisterType : IntRegisterType;\n    if (varTypeUsesIntReg(type))\n    {\n        return IntRegisterType;\n    }\n#if defined(TARGET_XARCH)\n    else if (varTypeUsesMaskReg(type))\n    {\n        return MaskRegisterType;\n    }\n#endif // TARGET_XARCH\n    else\n    {\n        assert(varTypeUsesFloatReg(type));\n        return FloatRegisterType;\n    }\n}",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "1148418988",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 83927,
        "pr_file": "src/coreclr/jit/lsra.h",
        "discussion_id": "1148418988",
        "commented_code": "@@ -46,7 +47,21 @@ typedef var_types RegisterType;\n template <class T>\n RegisterType regType(T type)\n {\n-    return varTypeUsesFloatReg(TypeGet(type)) ? FloatRegisterType : IntRegisterType;\n+    if (varTypeUsesIntReg(type))\n+    {\n+        return IntRegisterType;\n+    }\n+#if defined(TARGET_XARCH)\n+    else if (varTypeUsesMaskReg(type))\n+    {\n+        return MaskRegisterType;\n+    }\n+#endif // TARGET_XARCH\n+    else\n+    {\n+        assert(varTypeUsesFloatReg(type));\n+        return FloatRegisterType;\n+    }\n }",
        "comment_created_at": "2023-03-25T19:11:47+00:00",
        "comment_author": "tannergooding",
        "comment_body": "Checks throughout the JIT have been ordered under the presumption that `varTypeUsesIntReg` is the most likely occurrence. Where mask register handling is needed, `varTypeUsesMaskReg` is the middle case since we only need 1 additional check to cover all 3 cases. This allow the last case to `assert`.\r\n\r\nThis keeps 1-check for non-xarch, minimizes the total ifdefs when mask handling is needed, and ensures we need no more than 2 checks on xarch with the common case being 1 check. Ideally this helps keep it \"pay for play\".\r\n\r\nHaving `varTypeUsesIntReg` allowed a few other checks to become simplified/improved in general.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2144140230",
    "pr_number": 113956,
    "pr_file": "src/coreclr/jit/hwintrinsiclistxarch.h",
    "created_at": "2025-06-13T03:33:18+00:00",
    "commented_code": "HARDWARE_INTRINSIC(AVX10v2,         StoreScalar,                                                     16,              2,     {INS_invalid,           INS_invalid,            INS_vmovw_simd,         INS_vmovw_simd,         INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid},               HW_Category_MemoryStore,            HW_Flag_NoRMWSemantics|HW_Flag_BaseTypeFromSecondArg)\n#define LAST_NI_AVX10v2             NI_AVX10v2_StoreScalar\n\n// ***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************\n//                 ISA              Function name                                                    SIMD size       NumArg                                                                                                                            Instructions                                                                                                                  Category                            Flags\n//                                                                                                                          {TYP_BYTE,              TYP_UBYTE,              TYP_SHORT,              TYP_USHORT,             TYP_INT,                TYP_UINT,               TYP_LONG,               TYP_ULONG,              TYP_FLOAT,              TYP_DOUBLE}\n// ***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************\n//  AVXVNNIINT16 Intrinsics\n#define FIRST_NI_AVXVNNIINT        NI_AVXVNNIINT_MultiplyWideningAndAdd\nHARDWARE_INTRINSIC(AVXVNNIINT,     MultiplyWideningAndAdd,                                          -1,             3,     {INS_vpdpbssd,          INS_vpdpbuud,           INS_vpdpwsud,           INS_vpdpwusd,           INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,        INS_invalid},                 HW_Category_SimpleSIMD,             HW_Flag_BaseTypeFromSecondArg)\nHARDWARE_INTRINSIC(AVXVNNIINT,     MultiplyWideningAndAddByteByte,                                  -1,             3,     {INS_invalid,           INS_vpdpbuud,           INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,        INS_invalid},                 HW_Category_SimpleSIMD,             HW_Flag_BaseTypeFromSecondArg)",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2144140230",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 113956,
        "pr_file": "src/coreclr/jit/hwintrinsiclistxarch.h",
        "discussion_id": "2144140230",
        "commented_code": "@@ -1055,6 +1055,51 @@ HARDWARE_INTRINSIC(AVX10v2,         MultipleSumAbsoluteDifferences,\n HARDWARE_INTRINSIC(AVX10v2,         StoreScalar,                                                     16,              2,     {INS_invalid,           INS_invalid,            INS_vmovw_simd,         INS_vmovw_simd,         INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid},               HW_Category_MemoryStore,            HW_Flag_NoRMWSemantics|HW_Flag_BaseTypeFromSecondArg)\n #define LAST_NI_AVX10v2             NI_AVX10v2_StoreScalar\n \n+// ***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************\n+//                 ISA              Function name                                                    SIMD size       NumArg                                                                                                                            Instructions                                                                                                                  Category                            Flags\n+//                                                                                                                          {TYP_BYTE,              TYP_UBYTE,              TYP_SHORT,              TYP_USHORT,             TYP_INT,                TYP_UINT,               TYP_LONG,               TYP_ULONG,              TYP_FLOAT,              TYP_DOUBLE}\n+// ***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************\n+//  AVXVNNIINT16 Intrinsics\n+#define FIRST_NI_AVXVNNIINT        NI_AVXVNNIINT_MultiplyWideningAndAdd\n+HARDWARE_INTRINSIC(AVXVNNIINT,     MultiplyWideningAndAdd,                                          -1,             3,     {INS_vpdpbssd,          INS_vpdpbuud,           INS_vpdpwsud,           INS_vpdpwusd,           INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,        INS_invalid},                 HW_Category_SimpleSIMD,             HW_Flag_BaseTypeFromSecondArg)\n+HARDWARE_INTRINSIC(AVXVNNIINT,     MultiplyWideningAndAddByteByte,                                  -1,             3,     {INS_invalid,           INS_vpdpbuud,           INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,        INS_invalid},                 HW_Category_SimpleSIMD,             HW_Flag_BaseTypeFromSecondArg)",
        "comment_created_at": "2025-06-13T03:33:18+00:00",
        "comment_author": "tannergooding",
        "comment_body": "I think it'd be better to use the `AuxiliaryJitType` and mark these as `SpecialCodeGen` than to add a bunch of extra table entries. More similar to how `Gather/Scatter` get handled.\r\n\r\nIf we were to do the extra table entries, I'd rather they be moved to the bottom of the file with the other extra intrinsics that don't directly map to managed API names. That way the lookups for managed APIs remain cheaper and clearer.",
        "pr_file_module": null
      },
      {
        "comment_id": "2146143014",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 113956,
        "pr_file": "src/coreclr/jit/hwintrinsiclistxarch.h",
        "discussion_id": "2144140230",
        "commented_code": "@@ -1055,6 +1055,51 @@ HARDWARE_INTRINSIC(AVX10v2,         MultipleSumAbsoluteDifferences,\n HARDWARE_INTRINSIC(AVX10v2,         StoreScalar,                                                     16,              2,     {INS_invalid,           INS_invalid,            INS_vmovw_simd,         INS_vmovw_simd,         INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid},               HW_Category_MemoryStore,            HW_Flag_NoRMWSemantics|HW_Flag_BaseTypeFromSecondArg)\n #define LAST_NI_AVX10v2             NI_AVX10v2_StoreScalar\n \n+// ***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************\n+//                 ISA              Function name                                                    SIMD size       NumArg                                                                                                                            Instructions                                                                                                                  Category                            Flags\n+//                                                                                                                          {TYP_BYTE,              TYP_UBYTE,              TYP_SHORT,              TYP_USHORT,             TYP_INT,                TYP_UINT,               TYP_LONG,               TYP_ULONG,              TYP_FLOAT,              TYP_DOUBLE}\n+// ***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************\n+//  AVXVNNIINT16 Intrinsics\n+#define FIRST_NI_AVXVNNIINT        NI_AVXVNNIINT_MultiplyWideningAndAdd\n+HARDWARE_INTRINSIC(AVXVNNIINT,     MultiplyWideningAndAdd,                                          -1,             3,     {INS_vpdpbssd,          INS_vpdpbuud,           INS_vpdpwsud,           INS_vpdpwusd,           INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,        INS_invalid},                 HW_Category_SimpleSIMD,             HW_Flag_BaseTypeFromSecondArg)\n+HARDWARE_INTRINSIC(AVXVNNIINT,     MultiplyWideningAndAddByteByte,                                  -1,             3,     {INS_invalid,           INS_vpdpbuud,           INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,        INS_invalid},                 HW_Category_SimpleSIMD,             HW_Flag_BaseTypeFromSecondArg)",
        "comment_created_at": "2025-06-13T21:42:15+00:00",
        "comment_author": "khushal1996",
        "comment_body": "A single type such as `AuxiliaryJitType` does not work because of the fact that the instruction to use depends on `type` of second and third arg. Hence Both Second and third args are needed to decide which instruction needs to be emitted. But yes, I will move the non managed APIs to end of the table for `SpecialCodeGen`",
        "pr_file_module": null
      },
      {
        "comment_id": "2146260895",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 113956,
        "pr_file": "src/coreclr/jit/hwintrinsiclistxarch.h",
        "discussion_id": "2144140230",
        "commented_code": "@@ -1055,6 +1055,51 @@ HARDWARE_INTRINSIC(AVX10v2,         MultipleSumAbsoluteDifferences,\n HARDWARE_INTRINSIC(AVX10v2,         StoreScalar,                                                     16,              2,     {INS_invalid,           INS_invalid,            INS_vmovw_simd,         INS_vmovw_simd,         INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid},               HW_Category_MemoryStore,            HW_Flag_NoRMWSemantics|HW_Flag_BaseTypeFromSecondArg)\n #define LAST_NI_AVX10v2             NI_AVX10v2_StoreScalar\n \n+// ***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************\n+//                 ISA              Function name                                                    SIMD size       NumArg                                                                                                                            Instructions                                                                                                                  Category                            Flags\n+//                                                                                                                          {TYP_BYTE,              TYP_UBYTE,              TYP_SHORT,              TYP_USHORT,             TYP_INT,                TYP_UINT,               TYP_LONG,               TYP_ULONG,              TYP_FLOAT,              TYP_DOUBLE}\n+// ***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************\n+//  AVXVNNIINT16 Intrinsics\n+#define FIRST_NI_AVXVNNIINT        NI_AVXVNNIINT_MultiplyWideningAndAdd\n+HARDWARE_INTRINSIC(AVXVNNIINT,     MultiplyWideningAndAdd,                                          -1,             3,     {INS_vpdpbssd,          INS_vpdpbuud,           INS_vpdpwsud,           INS_vpdpwusd,           INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,        INS_invalid},                 HW_Category_SimpleSIMD,             HW_Flag_BaseTypeFromSecondArg)\n+HARDWARE_INTRINSIC(AVXVNNIINT,     MultiplyWideningAndAddByteByte,                                  -1,             3,     {INS_invalid,           INS_vpdpbuud,           INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,        INS_invalid},                 HW_Category_SimpleSIMD,             HW_Flag_BaseTypeFromSecondArg)",
        "comment_created_at": "2025-06-13T23:19:32+00:00",
        "comment_author": "tannergooding",
        "comment_body": "That's the purpose of `AuxiliaryJitType`, to give a secondary type to use.\r\n\r\n`SimdBaseJitType` is the primary type and for most intrinsics is the sole type needed to determine which instruction to use. Some special intrinsics need a secondary type and that's the purpose of `AuxiliaryJitType` so that we have a way to track it where required.",
        "pr_file_module": null
      },
      {
        "comment_id": "2150964480",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 113956,
        "pr_file": "src/coreclr/jit/hwintrinsiclistxarch.h",
        "discussion_id": "2144140230",
        "commented_code": "@@ -1055,6 +1055,51 @@ HARDWARE_INTRINSIC(AVX10v2,         MultipleSumAbsoluteDifferences,\n HARDWARE_INTRINSIC(AVX10v2,         StoreScalar,                                                     16,              2,     {INS_invalid,           INS_invalid,            INS_vmovw_simd,         INS_vmovw_simd,         INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid},               HW_Category_MemoryStore,            HW_Flag_NoRMWSemantics|HW_Flag_BaseTypeFromSecondArg)\n #define LAST_NI_AVX10v2             NI_AVX10v2_StoreScalar\n \n+// ***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************\n+//                 ISA              Function name                                                    SIMD size       NumArg                                                                                                                            Instructions                                                                                                                  Category                            Flags\n+//                                                                                                                          {TYP_BYTE,              TYP_UBYTE,              TYP_SHORT,              TYP_USHORT,             TYP_INT,                TYP_UINT,               TYP_LONG,               TYP_ULONG,              TYP_FLOAT,              TYP_DOUBLE}\n+// ***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************\n+//  AVXVNNIINT16 Intrinsics\n+#define FIRST_NI_AVXVNNIINT        NI_AVXVNNIINT_MultiplyWideningAndAdd\n+HARDWARE_INTRINSIC(AVXVNNIINT,     MultiplyWideningAndAdd,                                          -1,             3,     {INS_vpdpbssd,          INS_vpdpbuud,           INS_vpdpwsud,           INS_vpdpwusd,           INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,        INS_invalid},                 HW_Category_SimpleSIMD,             HW_Flag_BaseTypeFromSecondArg)\n+HARDWARE_INTRINSIC(AVXVNNIINT,     MultiplyWideningAndAddByteByte,                                  -1,             3,     {INS_invalid,           INS_vpdpbuud,           INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,            INS_invalid,        INS_invalid},                 HW_Category_SimpleSIMD,             HW_Flag_BaseTypeFromSecondArg)",
        "comment_created_at": "2025-06-16T21:58:40+00:00",
        "comment_author": "khushal1996",
        "comment_body": "Thanks. I was not aware of the `AuxiliaryJitType`. I have made the suggested changes and handled it accordingly. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2110681631",
    "pr_number": 115983,
    "pr_file": "src/tests/Common/testenvironment.proj",
    "created_at": "2025-05-28T01:39:46+00:00",
    "commented_code": "<TestEnvironment Include=\"jitstress_isas_incompletehwintrinsic\" EnableIncompleteISAClass=\"1\"  />\n    <TestEnvironment Include=\"jitstress_isas_nohwintrinsic\" EnableHWIntrinsic=\"0\" />\n    <TestEnvironment Include=\"jitstress_isas_x86_evex\" JitStressEvexEncoding=\"1\" PreferredVectorBitWidth=\"512\" />\n    <TestEnvironment Include=\"jitstress_isas_x86_noaes\" EnableAES=\"0\" /> <!-- Depends on SSE2 -->\n    <TestEnvironment Include=\"jitstress_isas_x86_noavx\" EnableAVX=\"0\" /> <!-- Depends on SSE42 -->\n    <TestEnvironment Include=\"jitstress_isas_x86_noavx2\" EnableAVX2=\"0\" /> <!-- Depends on AVX -->\n    <TestEnvironment Include=\"jitstress_isas_x86_noavx512\" EnableAVX512F=\"0\" /> <!-- Depends on AVX2 -->\n    <TestEnvironment Include=\"jitstress_isas_x86_nobmi1\" EnableBMI1=\"0\" /> <!-- No dependencies -->\n    <TestEnvironment Include=\"jitstress_isas_x86_nobmi2\" EnableBMI2=\"0\" /> <!-- No dependencies -->\n    <TestEnvironment Include=\"jitstress_isas_x86_nofma\" EnableFMA=\"0\" /> <!-- Depends on AVX -->",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2110681631",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 115983,
        "pr_file": "src/tests/Common/testenvironment.proj",
        "discussion_id": "2110681631",
        "commented_code": "@@ -118,63 +105,29 @@\n     <TestEnvironment Include=\"jitstress_isas_incompletehwintrinsic\" EnableIncompleteISAClass=\"1\"  />\n     <TestEnvironment Include=\"jitstress_isas_nohwintrinsic\" EnableHWIntrinsic=\"0\" />\n     <TestEnvironment Include=\"jitstress_isas_x86_evex\" JitStressEvexEncoding=\"1\" PreferredVectorBitWidth=\"512\" />\n-    <TestEnvironment Include=\"jitstress_isas_x86_noaes\" EnableAES=\"0\" /> <!-- Depends on SSE2 -->\n     <TestEnvironment Include=\"jitstress_isas_x86_noavx\" EnableAVX=\"0\" /> <!-- Depends on SSE42 -->\n     <TestEnvironment Include=\"jitstress_isas_x86_noavx2\" EnableAVX2=\"0\" /> <!-- Depends on AVX -->\n-    <TestEnvironment Include=\"jitstress_isas_x86_noavx512\" EnableAVX512F=\"0\" /> <!-- Depends on AVX2 -->\n-    <TestEnvironment Include=\"jitstress_isas_x86_nobmi1\" EnableBMI1=\"0\" /> <!-- No dependencies -->\n-    <TestEnvironment Include=\"jitstress_isas_x86_nobmi2\" EnableBMI2=\"0\" /> <!-- No dependencies -->\n-    <TestEnvironment Include=\"jitstress_isas_x86_nofma\" EnableFMA=\"0\" /> <!-- Depends on AVX -->",
        "comment_created_at": "2025-05-28T01:39:46+00:00",
        "comment_author": "tannergooding",
        "comment_body": "Most of these ISAs aren't meaningful to test anymore, especially since we aren't doing bringup of the ISAs.\r\n\r\nFor the most part, we just care about the unique ISA paths used in corelib or the JIT, which is primarily the SSE and AVX families that are already covering cases like FMA or BMI being disabled.\r\n\r\nI think we can even get it so that we don't need to test `nossse3, nosse41, and nosse42` as well; but we'd need to do a bit of cleanup in the JIT to achieve that.\r\n\r\n-- I'd like to get our support matrix down to effectively:\r\n* x86-64-v1: This is the baseline and is currently targeted by NAOT\r\n* x86-64-v2: This is everything up through SSE4.2+POPCNT\r\n* x86-64-v2 + AVX: This tests the VEX encoding and is known to have a decent user share\r\n* x86-64-v3: This is AVX2+FMA+BMI1+BMI2\r\n* x86-64-v4: This is AVX512 and covers the EVEX encoding\r\n\r\nFor x86-64-v2:\r\n* this is what is supported by the x64 on Arm emulation provided by Apple and Windows\r\n* it would be nice if NAOT could target this as the default, as its an 18 year old baseline\r\n* this is the target required by Win11 24H2 and boot is blocked if the ISAs aren't available\r\n* Win11 prior to 24H2 is documented as requiring SSE4.1 otherwise",
        "pr_file_module": null
      },
      {
        "comment_id": "2110913807",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 115983,
        "pr_file": "src/tests/Common/testenvironment.proj",
        "discussion_id": "2110681631",
        "commented_code": "@@ -118,63 +105,29 @@\n     <TestEnvironment Include=\"jitstress_isas_incompletehwintrinsic\" EnableIncompleteISAClass=\"1\"  />\n     <TestEnvironment Include=\"jitstress_isas_nohwintrinsic\" EnableHWIntrinsic=\"0\" />\n     <TestEnvironment Include=\"jitstress_isas_x86_evex\" JitStressEvexEncoding=\"1\" PreferredVectorBitWidth=\"512\" />\n-    <TestEnvironment Include=\"jitstress_isas_x86_noaes\" EnableAES=\"0\" /> <!-- Depends on SSE2 -->\n     <TestEnvironment Include=\"jitstress_isas_x86_noavx\" EnableAVX=\"0\" /> <!-- Depends on SSE42 -->\n     <TestEnvironment Include=\"jitstress_isas_x86_noavx2\" EnableAVX2=\"0\" /> <!-- Depends on AVX -->\n-    <TestEnvironment Include=\"jitstress_isas_x86_noavx512\" EnableAVX512F=\"0\" /> <!-- Depends on AVX2 -->\n-    <TestEnvironment Include=\"jitstress_isas_x86_nobmi1\" EnableBMI1=\"0\" /> <!-- No dependencies -->\n-    <TestEnvironment Include=\"jitstress_isas_x86_nobmi2\" EnableBMI2=\"0\" /> <!-- No dependencies -->\n-    <TestEnvironment Include=\"jitstress_isas_x86_nofma\" EnableFMA=\"0\" /> <!-- Depends on AVX -->",
        "comment_created_at": "2025-05-28T04:59:28+00:00",
        "comment_author": "jkotas",
        "comment_body": "> it would be nice if NAOT could target this as the default\r\n\r\nI do not think we want to have the baseline supported piecemeal (it is unlikely we would be able to it correctly since it is impossible to test). If we want to raise the baseline, we should do it for the whole product. I would not be opposed to raising the product baseline to x86-64-v2.\r\n\r\n>  its an 18 year old baseline\r\n\r\nWhen did Intel/Amd stop selling the last processor without x86-64-v2? It is the more interesting date for this discussion.\r\n\r\n> Win11 prior to 24H2 is documented as requiring SSE4.1 otherwise\r\n\r\nWhere is it documented?",
        "pr_file_module": null
      },
      {
        "comment_id": "2112285229",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 115983,
        "pr_file": "src/tests/Common/testenvironment.proj",
        "discussion_id": "2110681631",
        "commented_code": "@@ -118,63 +105,29 @@\n     <TestEnvironment Include=\"jitstress_isas_incompletehwintrinsic\" EnableIncompleteISAClass=\"1\"  />\n     <TestEnvironment Include=\"jitstress_isas_nohwintrinsic\" EnableHWIntrinsic=\"0\" />\n     <TestEnvironment Include=\"jitstress_isas_x86_evex\" JitStressEvexEncoding=\"1\" PreferredVectorBitWidth=\"512\" />\n-    <TestEnvironment Include=\"jitstress_isas_x86_noaes\" EnableAES=\"0\" /> <!-- Depends on SSE2 -->\n     <TestEnvironment Include=\"jitstress_isas_x86_noavx\" EnableAVX=\"0\" /> <!-- Depends on SSE42 -->\n     <TestEnvironment Include=\"jitstress_isas_x86_noavx2\" EnableAVX2=\"0\" /> <!-- Depends on AVX -->\n-    <TestEnvironment Include=\"jitstress_isas_x86_noavx512\" EnableAVX512F=\"0\" /> <!-- Depends on AVX2 -->\n-    <TestEnvironment Include=\"jitstress_isas_x86_nobmi1\" EnableBMI1=\"0\" /> <!-- No dependencies -->\n-    <TestEnvironment Include=\"jitstress_isas_x86_nobmi2\" EnableBMI2=\"0\" /> <!-- No dependencies -->\n-    <TestEnvironment Include=\"jitstress_isas_x86_nofma\" EnableFMA=\"0\" /> <!-- Depends on AVX -->",
        "comment_created_at": "2025-05-28T16:15:58+00:00",
        "comment_author": "tannergooding",
        "comment_body": "> I do not think we want to have the baseline supported piecemeal (it is unlikely we would be able to it correctly since it is impossible to test). If we want to raise the baseline, we should do it for the whole product. I would not be opposed to raising the product baseline to x86-64-v2.\r\n\r\n👍. I think it would provide a nice simplification in the JIT and libraries for what code paths we need to support. I don't want to raise the bar \"too high\" and negatively impact a significant number of customers, but I do think that `x86-64-v2` and `armv8.1-a` are reasonable baselines at this point.\r\n\r\n> Where is it documented?\r\n\r\nIn https://learn.microsoft.com/en-us/windows-hardware/design/minimum/minimum-hardware-requirements-overview, specifically under the Windows 11 document (last updated 2021)\r\n\r\n![image](https://github.com/user-attachments/assets/ad370ba3-9e00-49fc-8683-43d08338289a)\r\n\r\nWe got the notification that SSE4.2+POPCNT in 24H2+ when we had last reached out about Arm RDM support; although there's also been some news about the boot blocker that exists that went around last year as well.\r\n\r\nAzure, AWS, Google Cloud, and other major cloud providers that specify what hardware they provide are entirely on x86-64-v3 or later. There are also other 3rd party numbers out there, such as the Steam Hardware Survey, which shows 99.78% of reporting users have x86-64-v2 (while 97.31% have AVX and 94.66% have x86-64-v3).\r\n\r\n> When did Intel/Amd stop selling the last processor without x86-64-v2? It is the more interesting date for this discussion.\r\n\r\nFor Intel the last CPUs pre x86-64-v2 were discontinued in 2013, around the time x86-64-v3 was launched. This would have been the Bonnell microarchitecture (part of the Intel Atom lineup for low end machines). The Conroe/Merom and Penryn/Wolfdale chipsets had been discontinued in 2011-2012. AMD discontinued their 10h and Bobcat lineups in 2012-2013 as well.\r\n\r\nSo if we did try to raise the baseline in .NET 11, it should only be for 12-18 year old computers which are no longer supported by the CPU manufacturers, by MacOS, or by current Windows.\r\n",
        "pr_file_module": null
      }
    ]
  }
]