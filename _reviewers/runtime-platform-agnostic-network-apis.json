[
  {
    "discussion_id": "2164607486",
    "pr_number": 116940,
    "pr_file": "src/native/corehost/fxr/command_line.cpp",
    "created_at": "2025-06-24T18:05:35+00:00",
    "commented_code": "trace::verbose(_X(\"Application '%s' is not a managed executable.\"), app_candidate.c_str());\n                if (!exec_mode)\n                {\n                    // Check if this is a non-managed file with directory separator that exists\n                    // This should show a specific error instead of routing to CLI\n                    bool has_dir_separator = strchr(app_candidate.c_str(), DIR_SEPARATOR) != nullptr;",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2164607486",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 116940,
        "pr_file": "src/native/corehost/fxr/command_line.cpp",
        "discussion_id": "2164607486",
        "commented_code": "@@ -164,6 +164,19 @@ namespace\n                 trace::verbose(_X(\"Application '%s' is not a managed executable.\"), app_candidate.c_str());\n                 if (!exec_mode)\n                 {\n+                    // Check if this is a non-managed file with directory separator that exists\n+                    // This should show a specific error instead of routing to CLI\n+                    bool has_dir_separator = strchr(app_candidate.c_str(), DIR_SEPARATOR) != nullptr;",
        "comment_created_at": "2025-06-24T18:05:35+00:00",
        "comment_author": "elinor-fung",
        "comment_body": "This can call `app_candidate.find(DIR_SEPARATOR)` instead. `pal::string_t` is defined to be `std::string` or `std::wstring` based on the platform, so `strchr` will not work on all platforms.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "551743945",
    "pr_number": 46551,
    "pr_file": "src/coreclr/classlibnative/float/floatdouble.cpp",
    "created_at": "2021-01-05T06:42:31+00:00",
    "commented_code": "return (double)sin(x);\nFCIMPLEND\n\n/*====================================SinCos====================================\n**\n==============================================================================*/\nFCIMPL1_V(COMDouble::SinCosResult, COMDouble::SinCos, double x)\n    FCALL_CONTRACT;\n\n    SinCosResult result;\n\n#ifdef _MSC_VER\n    result.Sin = (double)sin(x);\n    result.Cos = (double)cos(x);\n#else\n    sincos(x, &result.Sin, &result.Cos);",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "551743945",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 46551,
        "pr_file": "src/coreclr/classlibnative/float/floatdouble.cpp",
        "discussion_id": "551743945",
        "commented_code": "@@ -280,6 +280,24 @@ FCIMPL1_V(double, COMDouble::Sin, double x)\n     return (double)sin(x);\n FCIMPLEND\n \n+/*====================================SinCos====================================\n+**\n+==============================================================================*/\n+FCIMPL1_V(COMDouble::SinCosResult, COMDouble::SinCos, double x)\n+    FCALL_CONTRACT;\n+\n+    SinCosResult result;\n+\n+#ifdef _MSC_VER\n+    result.Sin = (double)sin(x);\n+    result.Cos = (double)cos(x);\n+#else\n+    sincos(x, &result.Sin, &result.Cos);",
        "comment_created_at": "2021-01-05T06:42:31+00:00",
        "comment_author": "am11",
        "comment_body": "```suggestion\r\n#elif defined(__APPLE__)\r\n    __sincos(x, &result.Sin, &result.Cos);\r\n#else\r\n    sincos(x, &result.Sin, &result.Cos);\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "552117795",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 46551,
        "pr_file": "src/coreclr/classlibnative/float/floatdouble.cpp",
        "discussion_id": "551743945",
        "commented_code": "@@ -280,6 +280,24 @@ FCIMPL1_V(double, COMDouble::Sin, double x)\n     return (double)sin(x);\n FCIMPLEND\n \n+/*====================================SinCos====================================\n+**\n+==============================================================================*/\n+FCIMPL1_V(COMDouble::SinCosResult, COMDouble::SinCos, double x)\n+    FCALL_CONTRACT;\n+\n+    SinCosResult result;\n+\n+#ifdef _MSC_VER\n+    result.Sin = (double)sin(x);\n+    result.Cos = (double)cos(x);\n+#else\n+    sincos(x, &result.Sin, &result.Cos);",
        "comment_created_at": "2021-01-05T18:34:32+00:00",
        "comment_author": "tannergooding",
        "comment_body": "Unfortunately, it isn't this simple. Stuff on Unix has to go through the PAL layer so I need effectively something like the following in PAL instead:\r\n```cpp\r\n#if defined(__APPLE__)\r\n#define sincos __sincos\r\n#endif\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "552173874",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 46551,
        "pr_file": "src/coreclr/classlibnative/float/floatdouble.cpp",
        "discussion_id": "551743945",
        "commented_code": "@@ -280,6 +280,24 @@ FCIMPL1_V(double, COMDouble::Sin, double x)\n     return (double)sin(x);\n FCIMPLEND\n \n+/*====================================SinCos====================================\n+**\n+==============================================================================*/\n+FCIMPL1_V(COMDouble::SinCosResult, COMDouble::SinCos, double x)\n+    FCALL_CONTRACT;\n+\n+    SinCosResult result;\n+\n+#ifdef _MSC_VER\n+    result.Sin = (double)sin(x);\n+    result.Cos = (double)cos(x);\n+#else\n+    sincos(x, &result.Sin, &result.Cos);",
        "comment_created_at": "2021-01-05T20:23:47+00:00",
        "comment_author": "am11",
        "comment_body": "Ah right: https://github.com/dotnet/runtime/issues/43169#issuecomment-705761640",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "551743956",
    "pr_number": 46551,
    "pr_file": "src/coreclr/classlibnative/float/floatsingle.cpp",
    "created_at": "2021-01-05T06:42:35+00:00",
    "commented_code": "return (float)sinf(x);\nFCIMPLEND\n\n/*====================================SinCos====================================\n**\n==============================================================================*/\nFCIMPL1_V(COMSingle::SinCosResult, COMSingle::SinCos, float x)\n    FCALL_CONTRACT;\n\n    SinCosResult result;\n\n#ifdef _MSC_VER\n    result.Sin = (float)sinf(x);\n    result.Cos = (float)cosf(x);\n#else\n    sincosf(x, &result.Sin, &result.Cos);",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "551743956",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 46551,
        "pr_file": "src/coreclr/classlibnative/float/floatsingle.cpp",
        "discussion_id": "551743956",
        "commented_code": "@@ -267,6 +267,24 @@ FCIMPL1_V(float, COMSingle::Sin, float x)\n     return (float)sinf(x);\n FCIMPLEND\n \n+/*====================================SinCos====================================\n+**\n+==============================================================================*/\n+FCIMPL1_V(COMSingle::SinCosResult, COMSingle::SinCos, float x)\n+    FCALL_CONTRACT;\n+\n+    SinCosResult result;\n+\n+#ifdef _MSC_VER\n+    result.Sin = (float)sinf(x);\n+    result.Cos = (float)cosf(x);\n+#else\n+    sincosf(x, &result.Sin, &result.Cos);",
        "comment_created_at": "2021-01-05T06:42:35+00:00",
        "comment_author": "am11",
        "comment_body": "```suggestion\r\n#elif defined(__APPLE__)\r\n    __sincosf(x, &result.Sin, &result.Cos);\r\n#else\r\n    sincosf(x, &result.Sin, &result.Cos);\r\n```",
        "pr_file_module": null
      }
    ]
  }
]