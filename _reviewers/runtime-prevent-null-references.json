[
  {
    "discussion_id": "2168704810",
    "pr_number": 117044,
    "pr_file": "src/libraries/Common/src/System/Security/Cryptography/MLDsa.cs",
    "created_at": "2025-06-26T10:08:02+00:00",
    "commented_code": "SR.Argument_SignatureContextTooLong255);\n            }\n\n            if (destination.Length < Algorithm.SignatureSizeInBytes)\n            {\n                throw new ArgumentException(SR.Argument_DestinationTooShort, nameof(destination));\n            }\n\n            ThrowIfDisposed();\n            SignDataCore(data, context, destination.Slice(0, Algorithm.SignatureSizeInBytes));\n            return Algorithm.SignatureSizeInBytes;\n            SignDataCore(data, context, destination);\n        }\n\n        /// <summary>\n        ///   Signs the specified data.\n        /// </summary>\n        /// <param name=\"data\">\n        ///   The data to sign.\n        /// </param>\n        /// <param name=\"context\">\n        ///   An optional context-specific value to limit the scope of the signature.\n        ///   The default value is <see langword=\"null\" />.\n        /// </param>\n        /// <exception cref=\"ArgumentNullException\">\n        ///   <paramref name=\"data\"/> is <see langword=\"null\"/>.\n        /// </exception>\n        /// <exception cref=\"ArgumentOutOfRangeException\">\n        ///   <paramref name=\"context\"/> has a length in excess of 255 bytes.\n        /// </exception>\n        /// <exception cref=\"ObjectDisposedException\">\n        ///   This instance has been disposed.\n        /// </exception>\n        /// <exception cref=\"CryptographicException\">\n        ///   <para>The instance represents only a public key.</para>\n        ///   <para>-or-</para>\n        ///   <para>An error occurred while signing the data.</para>\n        /// </exception>\n        /// <remarks>\n        ///   A <see langword=\"null\" /> context is treated as empty.\n        /// </remarks>\n        public byte[] SignData(byte[] data, byte[]? context = default)\n        {\n            ArgumentNullException.ThrowIfNull(data);\n\n            byte[] destination = new byte[Algorithm.SignatureSizeInBytes];\n            SignData(new ReadOnlySpan<byte>(data), destination.AsSpan(), new ReadOnlySpan<byte>(context));",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2169375771",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 117044,
        "pr_file": "src/libraries/Common/src/System/Security/Cryptography/MLDsa.cs",
        "discussion_id": "2168704810",
        "commented_code": "@@ -119,14 +126,44 @@ public int SignData(ReadOnlySpan<byte> data, Span<byte> destination, ReadOnlySpa\n                     SR.Argument_SignatureContextTooLong255);\n             }\n \n-            if (destination.Length < Algorithm.SignatureSizeInBytes)\n-            {\n-                throw new ArgumentException(SR.Argument_DestinationTooShort, nameof(destination));\n-            }\n-\n             ThrowIfDisposed();\n-            SignDataCore(data, context, destination.Slice(0, Algorithm.SignatureSizeInBytes));\n-            return Algorithm.SignatureSizeInBytes;\n+            SignDataCore(data, context, destination);\n+        }\n+\n+        /// <summary>\n+        ///   Signs the specified data.\n+        /// </summary>\n+        /// <param name=\"data\">\n+        ///   The data to sign.\n+        /// </param>\n+        /// <param name=\"context\">\n+        ///   An optional context-specific value to limit the scope of the signature.\n+        ///   The default value is <see langword=\"null\" />.\n+        /// </param>\n+        /// <exception cref=\"ArgumentNullException\">\n+        ///   <paramref name=\"data\"/> is <see langword=\"null\"/>.\n+        /// </exception>\n+        /// <exception cref=\"ArgumentOutOfRangeException\">\n+        ///   <paramref name=\"context\"/> has a length in excess of 255 bytes.\n+        /// </exception>\n+        /// <exception cref=\"ObjectDisposedException\">\n+        ///   This instance has been disposed.\n+        /// </exception>\n+        /// <exception cref=\"CryptographicException\">\n+        ///   <para>The instance represents only a public key.</para>\n+        ///   <para>-or-</para>\n+        ///   <para>An error occurred while signing the data.</para>\n+        /// </exception>\n+        /// <remarks>\n+        ///   A <see langword=\"null\" /> context is treated as empty.\n+        /// </remarks>\n+        public byte[] SignData(byte[] data, byte[]? context = default)\n+        {\n+            ArgumentNullException.ThrowIfNull(data);\n+\n+            byte[] destination = new byte[Algorithm.SignatureSizeInBytes];\n+            SignData(new ReadOnlySpan<byte>(data), destination.AsSpan(), new ReadOnlySpan<byte>(context));",
        "comment_created_at": "2025-06-26T15:45:35+00:00",
        "comment_author": "krwq",
        "comment_body": "same as https://github.com/dotnet/runtime/pull/117044#discussion_r2168991551",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1897437891",
    "pr_number": 110945,
    "pr_file": "src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeCustomAttributeData.cs",
    "created_at": "2024-12-25T17:49:56+00:00",
    "commented_code": "RuntimeMethodInfo setMethod = property.GetSetMethod(true)!;\n\n                            // Public properties may have non-public setter methods\n                            if (!setMethod.IsPublic)\n                            if (setMethod == null || !setMethod.IsPublic)",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "1897437891",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 110945,
        "pr_file": "src/coreclr/System.Private.CoreLib/src/System/Reflection/RuntimeCustomAttributeData.cs",
        "discussion_id": "1897437891",
        "commented_code": "@@ -1580,7 +1580,7 @@ private static void AddCustomAttributes(\n                             RuntimeMethodInfo setMethod = property.GetSetMethod(true)!;\n \n                             // Public properties may have non-public setter methods\n-                            if (!setMethod.IsPublic)\n+                            if (setMethod == null || !setMethod.IsPublic)",
        "comment_created_at": "2024-12-25T17:49:56+00:00",
        "comment_author": "huoyaoyuan",
        "comment_body": "`is null` to avoid unnecessary comparison operator",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094247389",
    "pr_number": 115684,
    "pr_file": "src/libraries/Microsoft.Extensions.FileProviders.Composite/src/CompositeFileProvider.cs",
    "created_at": "2025-05-18T00:07:26+00:00",
    "commented_code": "foreach (IFileProvider fileProvider in _fileProviders)\n            {\n                IChangeToken changeToken = fileProvider.Watch(pattern);\n                if (changeToken != null)\n                if (changeToken is not null && changeToken is not NullChangeToken)",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2094247389",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 115684,
        "pr_file": "src/libraries/Microsoft.Extensions.FileProviders.Composite/src/CompositeFileProvider.cs",
        "discussion_id": "2094247389",
        "commented_code": "@@ -80,19 +80,18 @@ public IChangeToken Watch(string pattern)\n             foreach (IFileProvider fileProvider in _fileProviders)\n             {\n                 IChangeToken changeToken = fileProvider.Watch(pattern);\n-                if (changeToken != null)\n+                if (changeToken is not null && changeToken is not NullChangeToken)",
        "comment_created_at": "2025-05-18T00:07:26+00:00",
        "comment_author": "teo-tsirpanis",
        "comment_body": "```suggestion\r\n                if (changeToken is not (null or NullChangeToken))\r\n```",
        "pr_file_module": null
      }
    ]
  }
]