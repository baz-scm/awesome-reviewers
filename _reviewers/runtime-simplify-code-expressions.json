[
  {
    "discussion_id": "2127356971",
    "pr_number": 116310,
    "pr_file": "src/coreclr/vm/interoplibinterface_shared.cpp",
    "created_at": "2025-06-04T20:08:31+00:00",
    "commented_code": "ObjCMarshalNative::AfterRefCountedHandleCallbacks();\n#endif // FEATURE_OBJCMARSHAL\n}\n\n#ifdef FEATURE_GCBRIDGE\n\nnamespace\n{\n    Volatile<BOOL> g_GCBridgeActive = FALSE;",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2127356971",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 116310,
        "pr_file": "src/coreclr/vm/interoplibinterface_shared.cpp",
        "discussion_id": "2127356971",
        "commented_code": "@@ -154,3 +154,142 @@ void Interop::OnAfterGCScanRoots(_In_ bool isConcurrent)\n         ObjCMarshalNative::AfterRefCountedHandleCallbacks();\n #endif // FEATURE_OBJCMARSHAL\n }\n+\n+#ifdef FEATURE_GCBRIDGE\n+\n+namespace\n+{\n+    Volatile<BOOL> g_GCBridgeActive = FALSE;",
        "comment_created_at": "2025-06-04T20:08:31+00:00",
        "comment_author": "jkotas",
        "comment_body": "```suggestion\r\n    Volatile<bool> g_GCBridgeActive = false;\r\n```\r\nNit: It is fine to use native C/C++ bool for internal details.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2177644859",
    "pr_number": 115809,
    "pr_file": "src/coreclr/jit/emitxarch.cpp",
    "created_at": "2025-07-01T13:43:21+00:00",
    "commented_code": "*  Combine the given base format with the update mode of the instruction.\n */\n\ninline emitter::insFormat emitter::emitInsModeFormat(instruction ins, insFormat base)\ninline emitter::insFormat emitter::emitInsModeFormat(instruction ins, insFormat base, bool useNDD)\n{\n    assert(IF_RRD + IUM_RD == IF_RRD);\n    assert(IF_RRD + IUM_WR == IF_RWR);\n    assert(IF_RRD + IUM_RW == IF_RRW);\n\n#ifdef TARGET_AMD64\n    if (useNDD)\n    {\n        assert(IsApxNDDEncodableInstruction(ins));\n        if (ins == INS_rcl_N || ins == INS_rcr_N || ins == INS_rol_N || ins == INS_ror_N || ins == INS_shl_N ||\n            ins == INS_shr_N || ins == INS_sar_N)",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2177644859",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 115809,
        "pr_file": "src/coreclr/jit/emitxarch.cpp",
        "discussion_id": "2177644859",
        "commented_code": "@@ -3839,12 +3839,55 @@ unsigned const emitter::emitInsModeFmtCnt = ArrLen(emitInsModeFmtTab);\n  *  Combine the given base format with the update mode of the instruction.\n  */\n \n-inline emitter::insFormat emitter::emitInsModeFormat(instruction ins, insFormat base)\n+inline emitter::insFormat emitter::emitInsModeFormat(instruction ins, insFormat base, bool useNDD)\n {\n     assert(IF_RRD + IUM_RD == IF_RRD);\n     assert(IF_RRD + IUM_WR == IF_RWR);\n     assert(IF_RRD + IUM_RW == IF_RRW);\n \n+#ifdef TARGET_AMD64\n+    if (useNDD)\n+    {\n+        assert(IsApxNDDEncodableInstruction(ins));\n+        if (ins == INS_rcl_N || ins == INS_rcr_N || ins == INS_rol_N || ins == INS_ror_N || ins == INS_shl_N ||\n+            ins == INS_shr_N || ins == INS_sar_N)",
        "comment_created_at": "2025-07-01T13:43:21+00:00",
        "comment_author": "EgorBo",
        "comment_body": "@Ruihan-Yin nit for the future: we're required to use parentheses by our coding guidelines for such cases https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/clr-jit-coding-conventions.md#111-logical-and-arithmetic-expressions",
        "pr_file_module": null
      },
      {
        "comment_id": "2178063700",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 115809,
        "pr_file": "src/coreclr/jit/emitxarch.cpp",
        "discussion_id": "2177644859",
        "commented_code": "@@ -3839,12 +3839,55 @@ unsigned const emitter::emitInsModeFmtCnt = ArrLen(emitInsModeFmtTab);\n  *  Combine the given base format with the update mode of the instruction.\n  */\n \n-inline emitter::insFormat emitter::emitInsModeFormat(instruction ins, insFormat base)\n+inline emitter::insFormat emitter::emitInsModeFormat(instruction ins, insFormat base, bool useNDD)\n {\n     assert(IF_RRD + IUM_RD == IF_RRD);\n     assert(IF_RRD + IUM_WR == IF_RWR);\n     assert(IF_RRD + IUM_RW == IF_RRW);\n \n+#ifdef TARGET_AMD64\n+    if (useNDD)\n+    {\n+        assert(IsApxNDDEncodableInstruction(ins));\n+        if (ins == INS_rcl_N || ins == INS_rcr_N || ins == INS_rol_N || ins == INS_ror_N || ins == INS_shl_N ||\n+            ins == INS_shr_N || ins == INS_sar_N)",
        "comment_created_at": "2025-07-01T16:40:58+00:00",
        "comment_author": "Ruihan-Yin",
        "comment_body": "Understood, thanks for the notice!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1148585821",
    "pr_number": 83927,
    "pr_file": "src/coreclr/jit/codegencommon.cpp",
    "created_at": "2023-03-26T16:04:14+00:00",
    "commented_code": "//\nvoid CodeGen::genBitCast(var_types targetType, regNumber targetReg, var_types srcType, regNumber srcReg)\n{\n    const bool srcFltReg = varTypeUsesFloatReg(srcType) || varTypeIsSIMD(srcType);\n    const bool srcFltReg = varTypeUsesFloatReg(srcType);",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "1148585821",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 83927,
        "pr_file": "src/coreclr/jit/codegencommon.cpp",
        "discussion_id": "1148585821",
        "commented_code": "@@ -9335,10 +9346,10 @@ void CodeGen::genPoisonFrame(regMaskTP regLiveIn)\n //\n void CodeGen::genBitCast(var_types targetType, regNumber targetReg, var_types srcType, regNumber srcReg)\n {\n-    const bool srcFltReg = varTypeUsesFloatReg(srcType) || varTypeIsSIMD(srcType);\n+    const bool srcFltReg = varTypeUsesFloatReg(srcType);",
        "comment_created_at": "2023-03-26T16:04:14+00:00",
        "comment_author": "kunalspathak",
        "comment_body": "`varTypeIsSIMD()` does seems redundant when used with `varTypeUsesFloatReg()`, not sure why it was added in first place.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2112585246",
    "pr_number": 113956,
    "pr_file": "src/coreclr/jit/emitxarch.cpp",
    "created_at": "2025-05-28T19:16:46+00:00",
    "commented_code": "GenTreeIndir* indir,\n                                   insOpts       instOptions)\n{\n    assert(IsFMAInstruction(ins) || IsPermuteVar2xInstruction(ins) || IsAVXVNNIInstruction(ins));\n    assert(IsFMAInstruction(ins) || IsPermuteVar2xInstruction(ins) || IsAVXVNNIInstruction(ins) ||",
    "repo_full_name": "dotnet/runtime",
    "discussion_comments": [
      {
        "comment_id": "2112585246",
        "repo_full_name": "dotnet/runtime",
        "pr_number": 113956,
        "pr_file": "src/coreclr/jit/emitxarch.cpp",
        "discussion_id": "2112585246",
        "commented_code": "@@ -10008,7 +10049,8 @@ void emitter::emitIns_SIMD_R_R_R_A(instruction   ins,\n                                    GenTreeIndir* indir,\n                                    insOpts       instOptions)\n {\n-    assert(IsFMAInstruction(ins) || IsPermuteVar2xInstruction(ins) || IsAVXVNNIInstruction(ins));\n+    assert(IsFMAInstruction(ins) || IsPermuteVar2xInstruction(ins) || IsAVXVNNIInstruction(ins) ||",
        "comment_created_at": "2025-05-28T19:16:46+00:00",
        "comment_author": "tannergooding",
        "comment_body": "I think we could collapse `IsAVXVNNIInstruction(ins) || IsAVXVNNIINT8Instruction(ins) || IsAVXVNNIINT16Instruction(ins)` down into some `IsAvxVnniFamilyInstruction(ins)` given the places that are checking them",
        "pr_file_module": null
      }
    ]
  }
]