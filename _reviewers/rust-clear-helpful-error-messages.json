[
  {
    "discussion_id": "2206170446",
    "pr_number": 143719,
    "pr_file": "compiler/rustc_driver_impl/src/lib.rs",
    "created_at": "2025-07-15T02:49:24+00:00",
    "commented_code": "return None;\n     }\n \n+    // To avoid confusion, emit warning if no space\n+    // between `-o` and arg, e.g.`-optimize`, `-out-dir`, is applied, see issue #142812\n+    if let Some(name) = matches.opt_str(\"o\")\n+        && let Some(suspect) = args.iter().find(|arg| arg.starts_with(\"-o\") && *arg != \"-o\")\n+    {\n+        let confusables = [\"optimize\", \"o0\", \"o1\", \"o2\", \"o3\", \"ofast\", \"og\", \"os\", \"oz\"];\n+        if let Some(confusable) = check_confusables(&suspect, &confusables) {",
    "repo_full_name": "rust-lang/rust",
    "discussion_comments": [
      {
        "comment_id": "2206170446",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 143719,
        "pr_file": "compiler/rustc_driver_impl/src/lib.rs",
        "discussion_id": "2206170446",
        "commented_code": "@@ -1237,6 +1238,26 @@ pub fn handle_options(early_dcx: &EarlyDiagCtxt, args: &[String]) -> Option<geto\n         return None;\n     }\n \n+    // To avoid confusion, emit warning if no space\n+    // between `-o` and arg, e.g.`-optimize`, `-out-dir`, is applied, see issue #142812\n+    if let Some(name) = matches.opt_str(\"o\")\n+        && let Some(suspect) = args.iter().find(|arg| arg.starts_with(\"-o\") && *arg != \"-o\")\n+    {\n+        let confusables = [\"optimize\", \"o0\", \"o1\", \"o2\", \"o3\", \"ofast\", \"og\", \"os\", \"oz\"];\n+        if let Some(confusable) = check_confusables(&suspect, &confusables) {",
        "comment_created_at": "2025-07-15T02:49:24+00:00",
        "comment_author": "jieyouxu",
        "comment_body": "Discussion: hm, I would go for very simple heuristics given a `filename` supplied to `-o`:\r\n\r\n1. Check filename against `c_compiler_flag_confusables = [\"ptimize\", \"0\", \"1\", \"2\", \"3\", \"fast\", \"g\", \"s\", \"z\"];` (exact match).\r\n2. Check filename against names of `-C` codegen options (exact match).\r\n\r\nIf we have any match, consider it a high-value confusable we should warn on. Otherwise, don't bother.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2206173103",
    "pr_number": 143719,
    "pr_file": "compiler/rustc_driver_impl/src/lib.rs",
    "created_at": "2025-07-15T02:52:27+00:00",
    "commented_code": "return None;\n     }\n \n+    // To avoid confusion, emit warning if no space\n+    // between `-o` and arg, e.g.`-optimize`, `-out-dir`, is applied, see issue #142812\n+    if let Some(name) = matches.opt_str(\"o\")\n+        && let Some(suspect) = args.iter().find(|arg| arg.starts_with(\"-o\") && *arg != \"-o\")\n+    {\n+        let confusables = [\"optimize\", \"o0\", \"o1\", \"o2\", \"o3\", \"ofast\", \"og\", \"os\", \"oz\"];\n+        if let Some(confusable) = check_confusables(&suspect, &confusables) {\n+            early_dcx.early_warn(\n+                \"option `-o` has no space between flag name and value, which can be confusing\",\n+            );\n+            early_dcx.early_note(format!(\n+                \"option `-o {}` is applied instead of a flag named `o{}` to specify output filename `{}`\",\n+                name, name, name\n+            ));\n+            if !confusable.is_empty() {\n+                early_dcx.early_note(format!(\"Do you mean `{}`?\", confusable));\n+            }",
    "repo_full_name": "rust-lang/rust",
    "discussion_comments": [
      {
        "comment_id": "2206173103",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 143719,
        "pr_file": "compiler/rustc_driver_impl/src/lib.rs",
        "discussion_id": "2206173103",
        "commented_code": "@@ -1237,6 +1238,26 @@ pub fn handle_options(early_dcx: &EarlyDiagCtxt, args: &[String]) -> Option<geto\n         return None;\n     }\n \n+    // To avoid confusion, emit warning if no space\n+    // between `-o` and arg, e.g.`-optimize`, `-out-dir`, is applied, see issue #142812\n+    if let Some(name) = matches.opt_str(\"o\")\n+        && let Some(suspect) = args.iter().find(|arg| arg.starts_with(\"-o\") && *arg != \"-o\")\n+    {\n+        let confusables = [\"optimize\", \"o0\", \"o1\", \"o2\", \"o3\", \"ofast\", \"og\", \"os\", \"oz\"];\n+        if let Some(confusable) = check_confusables(&suspect, &confusables) {\n+            early_dcx.early_warn(\n+                \"option `-o` has no space between flag name and value, which can be confusing\",\n+            );\n+            early_dcx.early_note(format!(\n+                \"option `-o {}` is applied instead of a flag named `o{}` to specify output filename `{}`\",\n+                name, name, name\n+            ));\n+            if !confusable.is_empty() {\n+                early_dcx.early_note(format!(\"Do you mean `{}`?\", confusable));\n+            }",
        "comment_created_at": "2025-07-15T02:52:27+00:00",
        "comment_author": "jieyouxu",
        "comment_body": "Suggestion: probably message the `check_confusables` (maybe just inline) such that this is unconditionally present by the time we reach this. Also, this should probably be `early_help`.\r\n\r\n```suggestion\r\n            if !confusable.is_empty() {\r\n                early_dcx.early_help(format!(\"insert a space between `-o` and `{name}` if this is intentional: `-o {name}`\"));\r\n            }\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2185854661",
    "pr_number": 143280,
    "pr_file": "compiler/rustc_resolve/src/late.rs",
    "created_at": "2025-07-04T17:45:30+00:00",
    "commented_code": "}\n                 }\n \n-                if param.ident.name == kw::UnderscoreLifetime {\n+                // To avoid emitting two duplicate errors, we need to check if the span is a raw underscore lifetime, see issue #143152\n+                let is_raw_underscore = self\n+                    .r\n+                    .tcx\n+                    .sess\n+                    .psess\n+                    .raw_identifier_spans\n+                    .iter()\n+                    .any(|span| span == param.span());\n+                if param.ident.name == kw::UnderscoreLifetime && !is_raw_underscore {\n                     self.r\n                         .dcx()\n                         .emit_err(errors::UnderscoreLifetimeIsReserved { span: param.ident.span });",
    "repo_full_name": "rust-lang/rust",
    "discussion_comments": [
      {
        "comment_id": "2185854661",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 143280,
        "pr_file": "compiler/rustc_resolve/src/late.rs",
        "discussion_id": "2185854661",
        "commented_code": "@@ -2902,7 +2902,16 @@ impl<'a, 'ast, 'ra, 'tcx> LateResolutionVisitor<'a, 'ast, 'ra, 'tcx> {\n                     }\n                 }\n \n-                if param.ident.name == kw::UnderscoreLifetime {\n+                // To avoid emitting two duplicate errors, we need to check if the span is a raw underscore lifetime, see issue #143152\n+                let is_raw_underscore = self\n+                    .r\n+                    .tcx\n+                    .sess\n+                    .psess\n+                    .raw_identifier_spans\n+                    .iter()\n+                    .any(|span| span == param.span());\n+                if param.ident.name == kw::UnderscoreLifetime && !is_raw_underscore {\n                     self.r\n                         .dcx()\n                         .emit_err(errors::UnderscoreLifetimeIsReserved { span: param.ident.span });",
        "comment_created_at": "2025-07-04T17:45:30+00:00",
        "comment_author": "compiler-errors",
        "comment_body": "Use `emit_unless`, and also we don't need to factor this into a variable.\r\n\r\n```suggestion\r\n                self.r\r\n                  .dcx()\r\n                  .create_err(errors::UnderscoreLifetimeIsReserved {\r\n                      span: param.ident.span,\r\n                  })\r\n                  // To avoid emitting two duplicate errors, we need to check if the span is a raw underscore lifetime, see issue #143152\r\n                  .emit_unless(\r\n                      kw::UnderscoreLifetime\r\n                          && self\r\n                              .r\r\n                              .tcx\r\n                              .sess\r\n                              .psess\r\n                              .raw_identifier_spans\r\n                              .iter()\r\n                              .any(|span| span == param.span()),\r\n                  );\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2185854955",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 143280,
        "pr_file": "compiler/rustc_resolve/src/late.rs",
        "discussion_id": "2185854661",
        "commented_code": "@@ -2902,7 +2902,16 @@ impl<'a, 'ast, 'ra, 'tcx> LateResolutionVisitor<'a, 'ast, 'ra, 'tcx> {\n                     }\n                 }\n \n-                if param.ident.name == kw::UnderscoreLifetime {\n+                // To avoid emitting two duplicate errors, we need to check if the span is a raw underscore lifetime, see issue #143152\n+                let is_raw_underscore = self\n+                    .r\n+                    .tcx\n+                    .sess\n+                    .psess\n+                    .raw_identifier_spans\n+                    .iter()\n+                    .any(|span| span == param.span());\n+                if param.ident.name == kw::UnderscoreLifetime && !is_raw_underscore {\n                     self.r\n                         .dcx()\n                         .emit_err(errors::UnderscoreLifetimeIsReserved { span: param.ident.span });",
        "comment_created_at": "2025-07-04T17:46:01+00:00",
        "comment_author": "compiler-errors",
        "comment_body": "Also I think the comment could be tweaked; instead of \"two duplicate errors\", b/c the error is not duplicate, we should say something different.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2211379266",
    "pr_number": 143280,
    "pr_file": "compiler/rustc_resolve/src/late.rs",
    "created_at": "2025-07-16T19:35:57+00:00",
    "commented_code": "}\n                 }\n \n-                if param.ident.name == kw::UnderscoreLifetime {\n+                // To avoid emitting two similar errors, we need to check if the span is a raw underscore lifetime, see issue #143152\n+                let is_raw_underscore = self\n+                    .r\n+                    .tcx\n+                    .sess\n+                    .psess\n+                    .raw_identifier_spans\n+                    .iter()\n+                    .any(|span| span == param.span());\n+                if param.ident.name == kw::UnderscoreLifetime && !is_raw_underscore {",
    "repo_full_name": "rust-lang/rust",
    "discussion_comments": [
      {
        "comment_id": "2211379266",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 143280,
        "pr_file": "compiler/rustc_resolve/src/late.rs",
        "discussion_id": "2211379266",
        "commented_code": "@@ -2902,7 +2902,16 @@ impl<'a, 'ast, 'ra, 'tcx> LateResolutionVisitor<'a, 'ast, 'ra, 'tcx> {\n                     }\n                 }\n \n-                if param.ident.name == kw::UnderscoreLifetime {\n+                // To avoid emitting two similar errors, we need to check if the span is a raw underscore lifetime, see issue #143152\n+                let is_raw_underscore = self\n+                    .r\n+                    .tcx\n+                    .sess\n+                    .psess\n+                    .raw_identifier_spans\n+                    .iter()\n+                    .any(|span| span == param.span());\n+                if param.ident.name == kw::UnderscoreLifetime && !is_raw_underscore {",
        "comment_created_at": "2025-07-16T19:35:57+00:00",
        "comment_author": "compiler-errors",
        "comment_body": "You should still be able to `emit_unless(is_raw_underscore)`. I don't think calling `self.record_lifetime_param(param.id, LifetimeRes::Error);` matters if it's a raw underscore or not.",
        "pr_file_module": null
      },
      {
        "comment_id": "2211382324",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 143280,
        "pr_file": "compiler/rustc_resolve/src/late.rs",
        "discussion_id": "2211379266",
        "commented_code": "@@ -2902,7 +2902,16 @@ impl<'a, 'ast, 'ra, 'tcx> LateResolutionVisitor<'a, 'ast, 'ra, 'tcx> {\n                     }\n                 }\n \n-                if param.ident.name == kw::UnderscoreLifetime {\n+                // To avoid emitting two similar errors, we need to check if the span is a raw underscore lifetime, see issue #143152\n+                let is_raw_underscore = self\n+                    .r\n+                    .tcx\n+                    .sess\n+                    .psess\n+                    .raw_identifier_spans\n+                    .iter()\n+                    .any(|span| span == param.span());\n+                if param.ident.name == kw::UnderscoreLifetime && !is_raw_underscore {",
        "comment_created_at": "2025-07-16T19:37:56+00:00",
        "comment_author": "compiler-errors",
        "comment_body": "i.e.\r\n\r\n```\r\nif param.ident.name == kw::UnderscoreLifetime {\r\n  let is_raw_underscore = self\r\n    .r\r\n    .tcx\r\n    .sess\r\n    .psess\r\n    .raw_identifier_spans\r\n    .iter()\r\n    .any(|span| span == param.span());\r\n    self.r\r\n      .dcx()\r\n      .create_err(errors::UnderscoreLifetimeIsReserved { span: param.ident.span })\r\n      .emit_unless(is_raw_lifetime);\r\n  // Record lifetime res, so lowering knows there is something fishy.\r\n  self.record_lifetime_param(param.id, LifetimeRes::Error);\r\n  continue;\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2158168612",
    "pr_number": 142724,
    "pr_file": "compiler/rustc_builtin_macros/src/errors.rs",
    "created_at": "2025-06-20T06:39:01+00:00",
    "commented_code": "pub(crate) suggs: Vec<FormatUnknownTraitSugg>,\n }\n \n-#[derive(Subdiagnostic)]\n-#[suggestion(\n-    builtin_macros_suggestion,\n-    code = \"{fmt}\",\n-    style = \"tool-only\",\n-    applicability = \"maybe-incorrect\"\n-)]\n pub(crate) struct FormatUnknownTraitSugg {\n-    #[primary_span]\n     pub span: Span,\n     pub fmt: &'static str,\n     pub trait_name: &'static str,\n }\n \n+impl rustc_errors::Subdiagnostic for FormatUnknownTraitSugg {\n+    fn add_to_diag<G: rustc_errors::EmissionGuarantee>(self, diag: &mut rustc_errors::Diag<'_, G>) {\n+        diag.arg(\"fmt\", self.fmt);\n+        diag.arg(\"trait_name\", self.trait_name);\n+        let msg = diag.eagerly_translate(crate::fluent_generated::builtin_macros_suggestion);\n+        diag.remove_arg(\"fmt\");\n+        diag.remove_arg(\"trait_name\");",
    "repo_full_name": "rust-lang/rust",
    "discussion_comments": [
      {
        "comment_id": "2158168612",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 142724,
        "pr_file": "compiler/rustc_builtin_macros/src/errors.rs",
        "discussion_id": "2158168612",
        "commented_code": "@@ -643,20 +654,29 @@ pub(crate) struct FormatUnknownTrait<'a> {\n     pub(crate) suggs: Vec<FormatUnknownTraitSugg>,\n }\n \n-#[derive(Subdiagnostic)]\n-#[suggestion(\n-    builtin_macros_suggestion,\n-    code = \"{fmt}\",\n-    style = \"tool-only\",\n-    applicability = \"maybe-incorrect\"\n-)]\n pub(crate) struct FormatUnknownTraitSugg {\n-    #[primary_span]\n     pub span: Span,\n     pub fmt: &'static str,\n     pub trait_name: &'static str,\n }\n \n+impl rustc_errors::Subdiagnostic for FormatUnknownTraitSugg {\n+    fn add_to_diag<G: rustc_errors::EmissionGuarantee>(self, diag: &mut rustc_errors::Diag<'_, G>) {\n+        diag.arg(\"fmt\", self.fmt);\n+        diag.arg(\"trait_name\", self.trait_name);\n+        let msg = diag.eagerly_translate(crate::fluent_generated::builtin_macros_suggestion);\n+        diag.remove_arg(\"fmt\");\n+        diag.remove_arg(\"trait_name\");",
        "comment_created_at": "2025-06-20T06:39:01+00:00",
        "comment_author": "oli-obk",
        "comment_body": "afaict the derive also eagerly translates, so we could just change the derive to also remove all those args again after the calls",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2160075347",
    "pr_number": 142724,
    "pr_file": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs",
    "created_at": "2025-06-21T16:15:58+00:00",
    "commented_code": ".collect();\n \n         let formatting_init = &self.formatting_init;\n+\n+        // For #[derive(Subdiagnostic)]\n+        //\n+        // - Store args of the main diagnostic for later restore.\n+        // - add args of subdiagnostic.\n+        // - Generate the calls, such as note, label, etc.\n+        // - Remove the arguments for allowing Vec<Subdiagnostic> to be used.\n+        // - Restore the arguments for allowing main and subdiagnostic share the same fields.\n         Ok(quote! {\n             #init\n             #formatting_init\n             #attr_args\n+            #store_args\n             #plain_args\n             #calls\n+            #remove_args\n+            #restore_args",
    "repo_full_name": "rust-lang/rust",
    "discussion_comments": [
      {
        "comment_id": "2160075347",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 142724,
        "pr_file": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs",
        "discussion_id": "2160075347",
        "commented_code": "@@ -610,12 +619,23 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n             .collect();\n \n         let formatting_init = &self.formatting_init;\n+\n+        // For #[derive(Subdiagnostic)]\n+        //\n+        // - Store args of the main diagnostic for later restore.\n+        // - add args of subdiagnostic.\n+        // - Generate the calls, such as note, label, etc.\n+        // - Remove the arguments for allowing Vec<Subdiagnostic> to be used.\n+        // - Restore the arguments for allowing main and subdiagnostic share the same fields.\n         Ok(quote! {\n             #init\n             #formatting_init\n             #attr_args\n+            #store_args\n             #plain_args\n             #calls\n+            #remove_args\n+            #restore_args",
        "comment_created_at": "2025-06-21T16:15:58+00:00",
        "comment_author": "xizheyin",
        "comment_body": "For #[derive(Subdiagnostic)], I made two changes:\r\n1. After the subdiagnostic is rendered, remove all args of this subdiagnostic, which allows for usage like `Vec<Subdiag>`.\r\n2. Store `diag.args` before setting arguments, so that you can restore the contents of the main diagnostic after deleting the arguments after subdiagnostic is rendered, to avoid deleting the main diagnostic's arg when they have the same name args.",
        "pr_file_module": null
      }
    ]
  }
]