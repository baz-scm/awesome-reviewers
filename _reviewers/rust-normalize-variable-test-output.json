[
  {
    "discussion_id": "2108834629",
    "pr_number": 141642,
    "pr_file": "tests/ui/deprecation/deprecated_no_stack_check.stderr",
    "created_at": "2025-05-27T10:34:12+00:00",
    "commented_code": "|\n LL | #![feature(no_stack_check)]\n    |            ^^^^^^^^^^^^^^ feature has been removed\n+   |\n+   = note: removed in 1.0.0 (you are using 1.89.0-dev)",
    "repo_full_name": "rust-lang/rust",
    "discussion_comments": [
      {
        "comment_id": "2108834629",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 141642,
        "pr_file": "tests/ui/deprecation/deprecated_no_stack_check.stderr",
        "discussion_id": "2108834629",
        "commented_code": "@@ -3,6 +3,8 @@ error[E0557]: feature has been removed\n    |\n LL | #![feature(no_stack_check)]\n    |            ^^^^^^^^^^^^^^ feature has been removed\n+   |\n+   = note: removed in 1.0.0 (you are using 1.89.0-dev)",
        "comment_created_at": "2025-05-27T10:34:12+00:00",
        "comment_author": "mejrs",
        "comment_body": "The current rust version should be normalized so that these stderrs don't need updating every time rust gets version bumped. See https://rustc-dev-guide.rust-lang.org/tests/ui.html#normalization for more about that.",
        "pr_file_module": null
      },
      {
        "comment_id": "2108922488",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 141642,
        "pr_file": "tests/ui/deprecation/deprecated_no_stack_check.stderr",
        "discussion_id": "2108834629",
        "commented_code": "@@ -3,6 +3,8 @@ error[E0557]: feature has been removed\n    |\n LL | #![feature(no_stack_check)]\n    |            ^^^^^^^^^^^^^^ feature has been removed\n+   |\n+   = note: removed in 1.0.0 (you are using 1.89.0-dev)",
        "comment_created_at": "2025-05-27T11:20:52+00:00",
        "comment_author": "xizheyin",
        "comment_body": "Thank you. I'll revise it later.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2176863434",
    "pr_number": 142444,
    "pr_file": "tests/ui/autodiff/f64.stderr",
    "created_at": "2025-07-01T08:42:16+00:00",
    "commented_code": "+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+analyzing function preprocess_square\n+ + knowndata: ptr %0 : {[-1]:Pointer, [-1,0]:Float@double} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1",
    "repo_full_name": "rust-lang/rust",
    "discussion_comments": [
      {
        "comment_id": "2176863434",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 142444,
        "pr_file": "tests/ui/autodiff/f64.stderr",
        "discussion_id": "2176863434",
        "commented_code": "@@ -0,0 +1,40 @@\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+analyzing function preprocess_square\n+ + knowndata: ptr %0 : {[-1]:Pointer, [-1,0]:Float@double} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1",
        "comment_created_at": "2025-07-01T08:42:16+00:00",
        "comment_author": "ZuseZ4",
        "comment_body": "I'd assume that the dbg/noundef numbers like 384, 385 and 14 will change soon enough. Best case you replace all fixed constants like 384 and 385 with different variables, there's probably a good regex for it. I.e. on the first use of 384 you assign a name to it, and on all following usages of 384 you assure that it's the same name (value) showing up. There should be examples in Enzyme and the LLVM lit docs on how to do that.\r\nOtherwise at least make sure that all of these two numbers are replaced with an anonymous placeholder, so if they change tests don't break.\r\n\r\nEdit: now that we have a UI test ignore the comment about LLVM's lit test, still check if there's a way to avoid test failures if the numbers change. cc @jieyouxu who might have a suggestion.",
        "pr_file_module": null
      },
      {
        "comment_id": "2176960658",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 142444,
        "pr_file": "tests/ui/autodiff/f64.stderr",
        "discussion_id": "2176863434",
        "commented_code": "@@ -0,0 +1,40 @@\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+analyzing function preprocess_square\n+ + knowndata: ptr %0 : {[-1]:Pointer, [-1,0]:Float@double} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1",
        "comment_created_at": "2025-07-01T09:17:00+00:00",
        "comment_author": "jieyouxu",
        "comment_body": "I'm not sure how you would meaningfully normalize these. Maybe instead, use FileCheck inside a run-make test?\n\nOtherwise, this is going to break",
        "pr_file_module": null
      },
      {
        "comment_id": "2177016437",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 142444,
        "pr_file": "tests/ui/autodiff/f64.stderr",
        "discussion_id": "2176863434",
        "commented_code": "@@ -0,0 +1,40 @@\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+analyzing function preprocess_square\n+ + knowndata: ptr %0 : {[-1]:Pointer, [-1,0]:Float@double} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1",
        "comment_created_at": "2025-07-01T09:35:46+00:00",
        "comment_author": "KMJ-007",
        "comment_body": "i am thinking of using this regex:\r\n```\r\n//@ normalize-stderr: \"!(dbg|noundef) ![0-9]+\" -> \"!$1 !N\"\r\n//@ normalize-stderr: \"%[0-9]+\" -> \"%X\"\r\n//@ normalize-stdout: \"!(dbg|noundef) ![0-9]+\" -> \"!$1 !N\"\r\n//@ normalize-stdout: \"%[0-9]+\" -> \"%X\"\r\n\r\n```\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2177083125",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 142444,
        "pr_file": "tests/ui/autodiff/f64.stderr",
        "discussion_id": "2176863434",
        "commented_code": "@@ -0,0 +1,40 @@\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+analyzing function preprocess_square\n+ + knowndata: ptr %0 : {[-1]:Pointer, [-1,0]:Float@double} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1",
        "comment_created_at": "2025-07-01T09:59:13+00:00",
        "comment_author": "jieyouxu",
        "comment_body": "That normalization can still be fragile, because can't the instruction ordering also change?",
        "pr_file_module": null
      },
      {
        "comment_id": "2178290132",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 142444,
        "pr_file": "tests/ui/autodiff/f64.stderr",
        "discussion_id": "2176863434",
        "commented_code": "@@ -0,0 +1,40 @@\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+analyzing function preprocess_square\n+ + knowndata: ptr %0 : {[-1]:Pointer, [-1,0]:Float@double} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1",
        "comment_created_at": "2025-07-01T18:25:13+00:00",
        "comment_author": "workingjubilee",
        "comment_body": "Yes, any time there are multiple subsequent loads, they're independent enough that, while LLVM usually generates them in a reasonably reliable order, we do change things enough in our codebase that sometimes we change those orderings around. So we would want `CHECK-DAG` for those lines.",
        "pr_file_module": null
      },
      {
        "comment_id": "2178344621",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 142444,
        "pr_file": "tests/ui/autodiff/f64.stderr",
        "discussion_id": "2176863434",
        "commented_code": "@@ -0,0 +1,40 @@\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+analyzing function preprocess_square\n+ + knowndata: ptr %0 : {[-1]:Pointer, [-1,0]:Float@double} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1",
        "comment_created_at": "2025-07-01T19:01:27+00:00",
        "comment_author": "ZuseZ4",
        "comment_body": "@workingjubilee @jieyouxu these are currently ui tests since we test stderr/stdout output. Should they be something else? I don't think we can use the LLVM LIT test infrastructure in ui, or do we have a Rust equivalent which makes CHECK-DAG work?\r\n\r\nIn general, I want to make sure that we see all the type analysis info which enzyme deduces written out, even if it's looking fragile for now. His next PRs will start lowering Rust information to llvm metadata, which should be more reliable if we do it properly. In that case Enzyme will need to deduce less types, and we can narrow down what we're actually testing for (which is the metadata generated by us).",
        "pr_file_module": null
      },
      {
        "comment_id": "2178354228",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 142444,
        "pr_file": "tests/ui/autodiff/f64.stderr",
        "discussion_id": "2176863434",
        "commented_code": "@@ -0,0 +1,40 @@\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+analyzing function preprocess_square\n+ + knowndata: ptr %0 : {[-1]:Pointer, [-1,0]:Float@double} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1",
        "comment_created_at": "2025-07-01T19:08:54+00:00",
        "comment_author": "workingjubilee",
        "comment_body": "We have \"run arbitrary code to execute the test\" tests, called \"run-make\" because they used to be makefiles, but they actually are Rust executables now: https://github.com/rust-lang/rust/blob/master/tests/run-make/README.md\r\n\r\nYou can use that to run filecheck:\r\n\r\nhttps://github.com/rust-lang/rust/blob/4e973370053a5fe87ee96d43c506623e9bd1eb9d/src/tools/run-make-support/src/external_deps/llvm.rs#L23",
        "pr_file_module": null
      },
      {
        "comment_id": "2178938743",
        "repo_full_name": "rust-lang/rust",
        "pr_number": 142444,
        "pr_file": "tests/ui/autodiff/f64.stderr",
        "discussion_id": "2176863434",
        "commented_code": "@@ -0,0 +1,40 @@\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+analyzing function preprocess_square\n+ + knowndata: ptr %0 : {[-1]:Pointer, [-1,0]:Float@double} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer, [-1,0]:Float@double} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer, [-1,0]:Float@double} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {} new {[-1]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !17230, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !17231 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !17231 Changed=0 legal=1\n+analyzing function square\n+ + knowndata: ptr %0 : {[-1]:Pointer} - {}\n+ + retdata: {[-1]:Float@double}\n+updating analysis of val: ptr %0 current: {} new {[-1]:Pointer} from ptr %0 Changed=1 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from ptr %0 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=0 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=1 legal=1\n+updating analysis of val:   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val:   %3 = fmul double %2, %2, !dbg !385 current: {[-1]:Float@double} new {[-1]:Float@double} from   %3 = fmul double %2, %2, !dbg !385 Changed=0 legal=1\n+updating analysis of val: ptr %0 current: {[-1]:Pointer} new {[-1]:Pointer, [-1,0]:Float@double} from   %2 = load double, ptr %0, align 8, !dbg !384, !noundef !14 Changed=1 legal=1",
        "comment_created_at": "2025-07-02T03:48:40+00:00",
        "comment_author": "jieyouxu",
        "comment_body": "Yeah, I think using FileCheck within a run-make test is going to be least fragile, because you can also \"don't care\" about attributes and whatever and only match on stuff you do care about.",
        "pr_file_module": null
      }
    ]
  }
]