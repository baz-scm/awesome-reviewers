[
  {
    "discussion_id": "1334058821",
    "pr_number": 8690,
    "pr_file": "src/matching/SubAST_generic.ml",
    "created_at": "2023-09-22T08:23:49+00:00",
    "commented_code": "|> List.concat_map (function\n            | CasesAndBody (_, st) -> [ st ]\n            | CaseEllipsis _ -> [])\n-  | Try (_, st, xs, opt) -> (\n+  | Try (_, st, xs, opt1, opt2) -> (\n       [ st ]\n       @ (xs |> Common.map Common2.thd3)\n       @\n-      match opt with\n+      match opt1 with\n       | None -> []\n-      | Some (_, st) -> [ st ])\n+      | Some (_, st) -> (\n+          [ st ]\n+          @\n+          match opt2 with",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1334058821",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 8690,
        "pr_file": "src/matching/SubAST_generic.ml",
        "discussion_id": "1334058821",
        "commented_code": "@@ -302,13 +302,18 @@ let substmts_of_stmt st =\n       |> List.concat_map (function\n            | CasesAndBody (_, st) -> [ st ]\n            | CaseEllipsis _ -> [])\n-  | Try (_, st, xs, opt) -> (\n+  | Try (_, st, xs, opt1, opt2) -> (\n       [ st ]\n       @ (xs |> Common.map Common2.thd3)\n       @\n-      match opt with\n+      match opt1 with\n       | None -> []\n-      | Some (_, st) -> [ st ])\n+      | Some (_, st) -> (\n+          [ st ]\n+          @\n+          match opt2 with",
        "comment_created_at": "2023-09-22T08:23:49+00:00",
        "comment_author": "IagoAbal",
        "comment_body": "This doesn't look right, here `opt2` is only matched if `opt1` is `Some _`. If `opt1` is `None` and `opt2` is `Some _`, I think we still want to visit `opt2`, no? Shouldn't they be matched independently of each other?",
        "pr_file_module": null
      },
      {
        "comment_id": "1334614973",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 8690,
        "pr_file": "src/matching/SubAST_generic.ml",
        "discussion_id": "1334058821",
        "commented_code": "@@ -302,13 +302,18 @@ let substmts_of_stmt st =\n       |> List.concat_map (function\n            | CasesAndBody (_, st) -> [ st ]\n            | CaseEllipsis _ -> [])\n-  | Try (_, st, xs, opt) -> (\n+  | Try (_, st, xs, opt1, opt2) -> (\n       [ st ]\n       @ (xs |> Common.map Common2.thd3)\n       @\n-      match opt with\n+      match opt1 with\n       | None -> []\n-      | Some (_, st) -> [ st ])\n+      | Some (_, st) -> (\n+          [ st ]\n+          @\n+          match opt2 with",
        "comment_created_at": "2023-09-22T16:45:05+00:00",
        "comment_author": "amchiclet",
        "comment_body": "I think you're right. Thanks.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1514570635",
    "pr_number": 9889,
    "pr_file": "src/osemgrep/cli_ci/Ci_subcommand.ml",
    "created_at": "2024-03-06T14:23:08+00:00",
    "commented_code": "*)\n         report_scan_completed ~blocking_findings ~blocking_rules\n           ~non_blocking_findings ~non_blocking_rules;\n-        let scan_id_opt = Option.map fst scan_config_opt in\n         let app_block_override =\n-          upload_findings ~dry_run caps depl_opt scan_id_opt prj_meta\n-            blocking_findings filtered_rules cli_output\n+          upload_findings ~dry_run caps' depl scan_id prj_meta blocking_findings\n+            filtered_rules cli_output\n         in\n         let audit_mode = false in\n         (* TODO: audit_mode = metadata.event_name in audit_on *)\n         exit_code_of_blocking_findings ~audit_mode ~on:prj_meta.on\n           ~app_block_override blocking_findings\n   with\n   | Error.Semgrep_error (_, ex) as e ->\n-      (match (depl_opt, scan_config_opt) with\n-      | Some (token, _), Some (scan_id, _scan_config) ->\n-          let r =\n-            match ex with\n-            | None -> Exit_code.fatal ~__LOC__\n-            | Some exit_code -> exit_code\n-          in\n-          let caps = Auth.cap_token_and_network token caps in\n-          Semgrep_App.report_failure ~dry_run caps ~scan_id r\n-      | _else -> ());\n+      let r = ex ||| Exit_code.fatal ~__LOC__ in",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1514570635",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9889,
        "pr_file": "src/osemgrep/cli_ci/Ci_subcommand.ml",
        "discussion_id": "1514570635",
        "commented_code": "@@ -894,27 +856,18 @@ let run_conf (caps : caps) (ci_conf : Ci_CLI.conf) : Exit_code.t =\n         *)\n         report_scan_completed ~blocking_findings ~blocking_rules\n           ~non_blocking_findings ~non_blocking_rules;\n-        let scan_id_opt = Option.map fst scan_config_opt in\n         let app_block_override =\n-          upload_findings ~dry_run caps depl_opt scan_id_opt prj_meta\n-            blocking_findings filtered_rules cli_output\n+          upload_findings ~dry_run caps' depl scan_id prj_meta blocking_findings\n+            filtered_rules cli_output\n         in\n         let audit_mode = false in\n         (* TODO: audit_mode = metadata.event_name in audit_on *)\n         exit_code_of_blocking_findings ~audit_mode ~on:prj_meta.on\n           ~app_block_override blocking_findings\n   with\n   | Error.Semgrep_error (_, ex) as e ->\n-      (match (depl_opt, scan_config_opt) with\n-      | Some (token, _), Some (scan_id, _scan_config) ->\n-          let r =\n-            match ex with\n-            | None -> Exit_code.fatal ~__LOC__\n-            | Some exit_code -> exit_code\n-          in\n-          let caps = Auth.cap_token_and_network token caps in\n-          Semgrep_App.report_failure ~dry_run caps ~scan_id r\n-      | _else -> ());\n+      let r = ex ||| Exit_code.fatal ~__LOC__ in",
        "comment_created_at": "2024-03-06T14:23:08+00:00",
        "comment_author": "zzeleznick",
        "comment_body": "what does `|||` mean in OCaml?",
        "pr_file_module": null
      },
      {
        "comment_id": "1514576280",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9889,
        "pr_file": "src/osemgrep/cli_ci/Ci_subcommand.ml",
        "discussion_id": "1514570635",
        "commented_code": "@@ -894,27 +856,18 @@ let run_conf (caps : caps) (ci_conf : Ci_CLI.conf) : Exit_code.t =\n         *)\n         report_scan_completed ~blocking_findings ~blocking_rules\n           ~non_blocking_findings ~non_blocking_rules;\n-        let scan_id_opt = Option.map fst scan_config_opt in\n         let app_block_override =\n-          upload_findings ~dry_run caps depl_opt scan_id_opt prj_meta\n-            blocking_findings filtered_rules cli_output\n+          upload_findings ~dry_run caps' depl scan_id prj_meta blocking_findings\n+            filtered_rules cli_output\n         in\n         let audit_mode = false in\n         (* TODO: audit_mode = metadata.event_name in audit_on *)\n         exit_code_of_blocking_findings ~audit_mode ~on:prj_meta.on\n           ~app_block_override blocking_findings\n   with\n   | Error.Semgrep_error (_, ex) as e ->\n-      (match (depl_opt, scan_config_opt) with\n-      | Some (token, _), Some (scan_id, _scan_config) ->\n-          let r =\n-            match ex with\n-            | None -> Exit_code.fatal ~__LOC__\n-            | Some exit_code -> exit_code\n-          in\n-          let caps = Auth.cap_token_and_network token caps in\n-          Semgrep_App.report_failure ~dry_run caps ~scan_id r\n-      | _else -> ());\n+      let r = ex ||| Exit_code.fatal ~__LOC__ in",
        "comment_created_at": "2024-03-06T14:26:29+00:00",
        "comment_author": "aryx",
        "comment_body": "It's an operator I defined in Common.ml\r\n```\r\nlet ( ||| ) a b =\r\n  match a with\r\n  | Some x -> x\r\n  | None -> b\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1514591826",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9889,
        "pr_file": "src/osemgrep/cli_ci/Ci_subcommand.ml",
        "discussion_id": "1514570635",
        "commented_code": "@@ -894,27 +856,18 @@ let run_conf (caps : caps) (ci_conf : Ci_CLI.conf) : Exit_code.t =\n         *)\n         report_scan_completed ~blocking_findings ~blocking_rules\n           ~non_blocking_findings ~non_blocking_rules;\n-        let scan_id_opt = Option.map fst scan_config_opt in\n         let app_block_override =\n-          upload_findings ~dry_run caps depl_opt scan_id_opt prj_meta\n-            blocking_findings filtered_rules cli_output\n+          upload_findings ~dry_run caps' depl scan_id prj_meta blocking_findings\n+            filtered_rules cli_output\n         in\n         let audit_mode = false in\n         (* TODO: audit_mode = metadata.event_name in audit_on *)\n         exit_code_of_blocking_findings ~audit_mode ~on:prj_meta.on\n           ~app_block_override blocking_findings\n   with\n   | Error.Semgrep_error (_, ex) as e ->\n-      (match (depl_opt, scan_config_opt) with\n-      | Some (token, _), Some (scan_id, _scan_config) ->\n-          let r =\n-            match ex with\n-            | None -> Exit_code.fatal ~__LOC__\n-            | Some exit_code -> exit_code\n-          in\n-          let caps = Auth.cap_token_and_network token caps in\n-          Semgrep_App.report_failure ~dry_run caps ~scan_id r\n-      | _else -> ());\n+      let r = ex ||| Exit_code.fatal ~__LOC__ in",
        "comment_created_at": "2024-03-06T14:36:02+00:00",
        "comment_author": "zzeleznick",
        "comment_body": "ack \u2013 looks quite [similar](https://github.com/semgrep/semgrep/blob/9f07bade004c96b2f3fce583974552f608806570/src/osemgrep/configuring/Semgrep_envvars.ml#L44C5-L44C11) in flavor to our `env_or` function in `Semgrep_envvars.ml`\r\n\r\n```\r\nlet env_or conv var default =\r\n  match Sys.getenv_opt var with\r\n  | None -> default\r\n  | Some x -> conv x\r\n```\r\n\r\nOr the [nullish coalescing operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing) (`??`) in JavaScript",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1398795953",
    "pr_number": 9288,
    "pr_file": "src/core/Core_error.ml",
    "created_at": "2023-11-20T08:20:33+00:00",
    "commented_code": "Exception.reraise e\n       | exn ->\n           let trace = Exception.to_string e in\n-          let loc = Tok.first_loc_of_file file in\n+          let loc =\n+            if not String.(equal file \"\") then Tok.first_loc_of_file file",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1398795953",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9288,
        "pr_file": "src/core/Core_error.ml",
        "discussion_id": "1398795953",
        "commented_code": "@@ -216,7 +216,10 @@ let exn_to_error rule_id file (e : Exception.t) : t =\n           Exception.reraise e\n       | exn ->\n           let trace = Exception.to_string e in\n-          let loc = Tok.first_loc_of_file file in\n+          let loc =\n+            if not String.(equal file \"\") then Tok.first_loc_of_file file",
        "comment_created_at": "2023-11-20T08:20:33+00:00",
        "comment_author": "aryx",
        "comment_body": "maybe add a (* TODO: we should not build such Tok.t in the first place without any filename, but let's be defensive here *)",
        "pr_file_module": null
      },
      {
        "comment_id": "1406857904",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9288,
        "pr_file": "src/core/Core_error.ml",
        "discussion_id": "1398795953",
        "commented_code": "@@ -216,7 +216,10 @@ let exn_to_error rule_id file (e : Exception.t) : t =\n           Exception.reraise e\n       | exn ->\n           let trace = Exception.to_string e in\n-          let loc = Tok.first_loc_of_file file in\n+          let loc =\n+            if not String.(equal file \"\") then Tok.first_loc_of_file file",
        "comment_created_at": "2023-11-27T22:41:34+00:00",
        "comment_author": "mjambon",
        "comment_body": "I would write `if not (file = \"\") then ...`.",
        "pr_file_module": null
      }
    ]
  }
]