[
  {
    "discussion_id": "1580248705",
    "pr_number": 10121,
    "pr_file": "libs/tracing/ppx_tests/trace_debug.ml",
    "created_at": "2024-04-25T23:31:32+00:00",
    "commented_code": "+let top a b =\n+  let add_one a = a + 1 [@@trace] in\n+  add_one a + b\n+\n+let top a b =\n+  let add_one a = a + 1 [@@trace_debug] in",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1580248705",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10121,
        "pr_file": "libs/tracing/ppx_tests/trace_debug.ml",
        "discussion_id": "1580248705",
        "commented_code": "@@ -0,0 +1,17 @@\n+let top a b =\n+  let add_one a = a + 1 [@@trace] in\n+  add_one a + b\n+\n+let top a b =\n+  let add_one a = a + 1 [@@trace_debug] in",
        "comment_created_at": "2024-04-25T23:31:32+00:00",
        "comment_author": "kopecs",
        "comment_body": "Would rather something like `[@@trace { level = Debug }]`. I think that is a more consistent design with other ppx and more extensible if there are more settings we'd like.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1499634704",
    "pr_number": 9785,
    "pr_file": "libs/tracing/unix/Tracing.ml",
    "created_at": "2024-02-22T17:44:19+00:00",
    "commented_code": "* ALT: we could also have wrapped this with a `Otel.Scope.with_ambient_scope`\n      to ensure the trace_id is the same for all spans, but we decided that\n      having the top level time is a good default. *)\n-  Opentelemetry_client_ocurl.with_setup () @@ fun () ->\n+  let url =\n+    match Sys.getenv_opt endpoint_env_var with\n+    | Some url -> url\n+    | None -> default_endpoint\n+  in\n+  let config = Some (Opentelemetry_client_ocurl.Config.make ~url ()) in\n+  Opentelemetry_client_ocurl.with_setup ?config () @@ fun () ->",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1499634704",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9785,
        "pr_file": "libs/tracing/unix/Tracing.ml",
        "discussion_id": "1499634704",
        "commented_code": "@@ -83,7 +86,13 @@ let with_setup f =\n    * ALT: we could also have wrapped this with a `Otel.Scope.with_ambient_scope`\n      to ensure the trace_id is the same for all spans, but we decided that\n      having the top level time is a good default. *)\n-  Opentelemetry_client_ocurl.with_setup () @@ fun () ->\n+  let url =\n+    match Sys.getenv_opt endpoint_env_var with\n+    | Some url -> url\n+    | None -> default_endpoint\n+  in\n+  let config = Some (Opentelemetry_client_ocurl.Config.make ~url ()) in\n+  Opentelemetry_client_ocurl.with_setup ?config () @@ fun () ->",
        "comment_created_at": "2024-02-22T17:44:19+00:00",
        "comment_author": "kopecs",
        "comment_body": "```suggestion\r\n  let config = Opentelemetry_client_ocurl.Config.make ~url () in\r\n  Opentelemetry_client_ocurl.with_setup ~config () @@ fun () ->\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1482789271",
    "pr_number": 9561,
    "pr_file": "src/core_scan/Core_scan.ml",
    "created_at": "2024-02-08T11:03:25+00:00",
    "commented_code": "(* Entry point *)\n (*****************************************************************************)\n \n+let get_rules config =\n+  Common.with_time (fun () -> rules_from_rule_source config)",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1482789271",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9561,
        "pr_file": "src/core_scan/Core_scan.ml",
        "discussion_id": "1482789271",
        "commented_code": "@@ -1161,12 +1173,14 @@ let scan ?match_hook config ((valid_rules, invalid_rules), rules_parse_time) :\n (* Entry point *)\n (*****************************************************************************)\n \n+let get_rules config =\n+  Common.with_time (fun () -> rules_from_rule_source config)",
        "comment_created_at": "2024-02-08T11:03:25+00:00",
        "comment_author": "aryx",
        "comment_body": "why not put the [@@trace] in rules_from_rule_source instead?\r\nso you don't need this wrapper.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1426866614",
    "pr_number": 9448,
    "pr_file": "src/core_scan/Core_scan.ml",
    "created_at": "2023-12-14T15:20:32+00:00",
    "commented_code": "(* Entry point *)\n (*****************************************************************************)\n \n+let get_rules config =\n+  Common.with_time (fun () -> rules_from_rule_source config)\n+[@@trace]",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1426866614",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9448,
        "pr_file": "src/core_scan/Core_scan.ml",
        "discussion_id": "1426866614",
        "commented_code": "@@ -1017,11 +1017,15 @@ let scan ?match_hook config ((valid_rules, invalid_rules), rules_parse_time) :\n (* Entry point *)\n (*****************************************************************************)\n \n+let get_rules config =\n+  Common.with_time (fun () -> rules_from_rule_source config)\n+[@@trace]",
        "comment_created_at": "2023-12-14T15:20:32+00:00",
        "comment_author": "aryx",
        "comment_body": "maybe @@tracing, to imitate @@profiling?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1429043547",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9448,
        "pr_file": "src/core_scan/Core_scan.ml",
        "discussion_id": "1426866614",
        "commented_code": "@@ -1017,11 +1017,15 @@ let scan ?match_hook config ((valid_rules, invalid_rules), rules_parse_time) :\n (* Entry point *)\n (*****************************************************************************)\n \n+let get_rules config =\n+  Common.with_time (fun () -> rules_from_rule_source config)\n+[@@trace]",
        "comment_created_at": "2023-12-17T07:09:35+00:00",
        "comment_author": "emjin",
        "comment_body": "Other ppxes are usually verbs (`show`, `compare`), so  thought `trace` would be more consistent. But I don't have a very strong preference",
        "pr_file_module": null
      }
    ]
  }
]