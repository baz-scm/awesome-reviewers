[
  {
    "discussion_id": "1309387078",
    "pr_number": 8222,
    "pr_file": "cli/src/semgrep/target_manager.py",
    "created_at": "2023-08-29T21:49:26+00:00",
    "commented_code": ")\n \n     @lru_cache(maxsize=None)\n-    def files(self) -> FrozenSet[Path]:\n+    def files(self, ignore_baseline_handler: bool = False) -> FrozenSet[Path]:",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1309387078",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 8222,
        "pr_file": "cli/src/semgrep/target_manager.py",
        "discussion_id": "1309387078",
        "commented_code": "@@ -471,15 +477,15 @@ def files_from_filesystem(self) -> FrozenSet[Path]:\n         )\n \n     @lru_cache(maxsize=None)\n-    def files(self) -> FrozenSet[Path]:\n+    def files(self, ignore_baseline_handler: bool = False) -> FrozenSet[Path]:",
        "comment_created_at": "2023-08-29T21:49:26+00:00",
        "comment_author": "brendongo",
        "comment_body": "probably want to edit function level comment on what ignore_baseline_handler does when set to true (maybe also why we need it)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1560058963",
    "pr_number": 10006,
    "pr_file": "cli/src/semgrep/run_scan.py",
    "created_at": "2024-04-10T21:09:19+00:00",
    "commented_code": "baseline_target_strings = target_strings\n                     baseline_target_mode_config = target_mode_config\n                     if target_mode_config.is_pro_diff_scan:\n+                        scanned = [",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1560058963",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10006,
        "pr_file": "cli/src/semgrep/run_scan.py",
        "discussion_id": "1560058963",
        "commented_code": "@@ -635,13 +635,15 @@ def run_scan(\n                     baseline_target_strings = target_strings\n                     baseline_target_mode_config = target_mode_config\n                     if target_mode_config.is_pro_diff_scan:\n+                        scanned = [",
        "comment_created_at": "2024-04-10T21:09:19+00:00",
        "comment_author": "IagoAbal",
        "comment_body": "It would be nice having a comment here explaining what we do and why. We have to derive the set of files to scan the baseline from the previous scan because otherwise we may analyze fewer files, etc.",
        "pr_file_module": null
      },
      {
        "comment_id": "1560405778",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10006,
        "pr_file": "cli/src/semgrep/run_scan.py",
        "discussion_id": "1560058963",
        "commented_code": "@@ -635,13 +635,15 @@ def run_scan(\n                     baseline_target_strings = target_strings\n                     baseline_target_mode_config = target_mode_config\n                     if target_mode_config.is_pro_diff_scan:\n+                        scanned = [",
        "comment_created_at": "2024-04-11T03:59:55+00:00",
        "comment_author": "ihji",
        "comment_body": "done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1427419675",
    "pr_number": 9445,
    "pr_file": "cli/src/semgrep/metrics.py",
    "created_at": "2023-12-15T00:00:40+00:00",
    "commented_code": "self.metrics_state = metrics_state or MetricsState.AUTO\n \n+    # TODO(cooper): It would really be best if EngineType included all of the\n+    # information here, but I am a bit concerned about changing it, since it is\n+    # currently an enum. Ideally it would be more like osemgrep's Engine_type.t,\n+    # but that seems difficult to render here, and would seem to require\n+    # threading much more information through that type. Since we only really\n+    # care about the additional information being bundeled for metrics, we'll\n+    # just take some additional parameters here. Currently this is just for\n+    # secrets, but the same would apply for (supply chain)-related information.\n     @suppress_errors\n-    def add_engine_type(self, engineType: \"EngineType\") -> None:\n+    def add_engine_config(\n+        self, engineType: \"EngineType\", secrets_origins: Optional[str]",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1427419675",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9445,
        "pr_file": "cli/src/semgrep/metrics.py",
        "discussion_id": "1427419675",
        "commented_code": "@@ -157,12 +165,43 @@ def configure(\n \n         self.metrics_state = metrics_state or MetricsState.AUTO\n \n+    # TODO(cooper): It would really be best if EngineType included all of the\n+    # information here, but I am a bit concerned about changing it, since it is\n+    # currently an enum. Ideally it would be more like osemgrep's Engine_type.t,\n+    # but that seems difficult to render here, and would seem to require\n+    # threading much more information through that type. Since we only really\n+    # care about the additional information being bundeled for metrics, we'll\n+    # just take some additional parameters here. Currently this is just for\n+    # secrets, but the same would apply for (supply chain)-related information.\n     @suppress_errors\n-    def add_engine_type(self, engineType: \"EngineType\") -> None:\n+    def add_engine_config(\n+        self, engineType: \"EngineType\", secrets_origins: Optional[str]",
        "comment_created_at": "2023-12-15T00:00:40+00:00",
        "comment_author": "emjin",
        "comment_body": "At minimum, needs an explanation of what `secrets_origins` is. Ideally this is structured in a way that makes that easier to discover. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1428506991",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9445,
        "pr_file": "cli/src/semgrep/metrics.py",
        "discussion_id": "1427419675",
        "commented_code": "@@ -157,12 +165,43 @@ def configure(\n \n         self.metrics_state = metrics_state or MetricsState.AUTO\n \n+    # TODO(cooper): It would really be best if EngineType included all of the\n+    # information here, but I am a bit concerned about changing it, since it is\n+    # currently an enum. Ideally it would be more like osemgrep's Engine_type.t,\n+    # but that seems difficult to render here, and would seem to require\n+    # threading much more information through that type. Since we only really\n+    # care about the additional information being bundeled for metrics, we'll\n+    # just take some additional parameters here. Currently this is just for\n+    # secrets, but the same would apply for (supply chain)-related information.\n     @suppress_errors\n-    def add_engine_type(self, engineType: \"EngineType\") -> None:\n+    def add_engine_config(\n+        self, engineType: \"EngineType\", secrets_origins: Optional[str]",
        "comment_created_at": "2023-12-15T21:32:22+00:00",
        "comment_author": "kopecs",
        "comment_body": "Commenting on the other one; can add a docstring here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1424452932",
    "pr_number": 9396,
    "pr_file": "cli/tests/conftest.py",
    "created_at": "2023-12-12T18:57:52+00:00",
    "commented_code": "semgrepconfig_path.write_text(contents)\n \n \n+def make_settings_file(unique_path: Path) -> None:\n+    Path(unique_path).write_text(\n+        \"anonymous_user_id: 5f52484c-3f82-4779-9353-b29bbd3193b6\n\"",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1424452932",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9396,
        "pr_file": "cli/tests/conftest.py",
        "discussion_id": "1424452932",
        "commented_code": "@@ -81,6 +82,20 @@ def make_semgrepconfig_file(dir_path: Path, contents: str) -> None:\n     semgrepconfig_path.write_text(contents)\n \n \n+def make_settings_file(unique_path: Path) -> None:\n+    Path(unique_path).write_text(\n+        \"anonymous_user_id: 5f52484c-3f82-4779-9353-b29bbd3193b6\\n\"",
        "comment_created_at": "2023-12-12T18:57:52+00:00",
        "comment_author": "aryx",
        "comment_body": "would be good to comment why this magic string comes from. Does it correspond to an internal test user?\r\n",
        "pr_file_module": null
      }
    ]
  }
]