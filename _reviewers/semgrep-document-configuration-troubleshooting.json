[
  {
    "discussion_id": "1571177497",
    "pr_number": 10122,
    "pr_file": "src/main/flags.sh",
    "created_at": "2024-04-18T18:12:12+00:00",
    "commented_code": "#\n set -eu\n \n+OS=\"$1\"\n+\n+>&2 echo \"Generating flags for OS ${OS}\"\n+\n # Force the use of static linking in these scenarios:\n #\n # - the name of the opam switch refers to musl,\n #   e.g. '4.10.0+musl+static+flambda'\n # - we're on alpine, in which case the opam switch doesn't have a special\n #   name. It is assumed that the reason we're on alpine is to get\n #   statically-linked executables.\n-#\n-if [[ \"$(opam switch show)\" == *+static* || -e /etc/alpine-release ]]; then\n-  # The -cclib statically link in libcurl's dependencies.\n-  # This can be removed when we transition away from the ocurl otel collector\n-  #old: was just '--copt -static --copy -no-pie' before we dependended on libcurl\n-  echo \"(-cclib -lssl -cclib -lcrypto -cclib -lz -ccopt -static -ccopt -no-pie)\" > flags.sexp\n+if [[ \"$(opam switch show)\" == *+static* ]]; then\n+    FLAGS=()\n+    CCLIB=(\"-lssl\" \"-lcrypto\" \"-lz\")\n+    CCOPT=(\"-static\" \"-no-pie\")\n else\n-  echo \"( :standard )\" > flags.sexp\n+    case \"$OS\" in\n+    linux)\n+        if [[ -e /etc/alpine-release ]]; then\n+            # The -cclib statically link in libcurl's dependencies.\n+            # This can be removed when we transition away from the ocurl otel collector\n+            #old: was just '--copt -static --copy -no-pie' before we dependended on libcurl\n+            FLAGS=()\n+            CCLIB=(\"-lssl\" \"-lcrypto\" \"-lz\")\n+            CCOPT=(\"-static\" \"-no-pie\")\n+        else\n+            FLAGS=()\n+            CCLIB=()\n+            CCOPT=()\n+        fi\n+        ;;\n+    # In general, we want to statically link to make it easier to distribute\n+    # binaries since they won't carry runtime dependencies on various\n+    # libraries which would need to be separately installed or managed.\n+    # Additionally, this can be a bit fragile depending on which paths the\n+    # loader uses, and where dylibs are expected to be (and how possible\n+    # differences in the CI build versus other environments).\n+    #\n+    # However, on MacOS, it is a bit difficult to ensure libraries are linked\n+    # statically. It is not possible to link all libraries statically.\n+    # Notably, libSystem cannot (officially) be statically linked against,\n+    # since MacOS does not have a stable syscall ABI, but rather relies on\n+    # libSystem being stable. See, e.g.,\n+    # - <https://developer.apple.com/forums/thread/706419>\n+    # - <https://developer.apple.com/library/archive/qa/qa1118/_index.html>\n+    # - `man 1 ld`\n+    #\n+    # As a result, we cannot use a similar strategy to our Alpine build (which\n+    # works for Linux, since it is a rare case with a stable syscall ABI, See\n+    # <https://unix.stackexchange.com/questions/473137/do-other-unix-like-kernels-have-stable-syscall-abis>).\n+    # Previously we relied on a workaround where we deleted the `.dylib`\n+    # versions of libraries, leaving only the `.a` versions, thus forcing them\n+    # to be linked statically. However, this breaks the build in the case\n+    # where later build steps require programs which dynamically linked\n+    # against those libraries. Notably, this occurs for PCRE2. See\n+    # <https://github.com/semgrep/semgrep/pull/10064>.\n+    #\n+    # One might hope that we could specify the linker to use the `.a` version\n+    # without deleting the `.dylib`, but the only way to do this is to disable\n+    # autolinking and specify each library individually. Otherwise, on MacOS,\n+    # if both are present, the linker will link dynamically regardless.\n+    #\n+    # If you add a dependency which should be statically linked, it should be\n+    # added to this list. If it has a `.pc` file, ensure that the library is\n+    # appropriately added to PKG_CONFIG_PATH and use pkg-config to pick it up\n+    # below (see, e.g., gmp). If we expect it to always be installed via brew,\n+    # then use `brew --prefix <BREW PACKAGE NAME>`.\n+    macosx)\n+        # TODO: it would be best if this could be easily autogenerated from\n+        # languages/\n+        LANGS=(\n+            \"bash\"\n+            \"c_sharp\"\n+            \"c\"\n+            \"cairo\"",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1571177497",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10122,
        "pr_file": "src/main/flags.sh",
        "discussion_id": "1571177497",
        "commented_code": "@@ -4,19 +4,170 @@\n #\n set -eu\n \n+OS=\"$1\"\n+\n+>&2 echo \"Generating flags for OS ${OS}\"\n+\n # Force the use of static linking in these scenarios:\n #\n # - the name of the opam switch refers to musl,\n #   e.g. '4.10.0+musl+static+flambda'\n # - we're on alpine, in which case the opam switch doesn't have a special\n #   name. It is assumed that the reason we're on alpine is to get\n #   statically-linked executables.\n-#\n-if [[ \"$(opam switch show)\" == *+static* || -e /etc/alpine-release ]]; then\n-  # The -cclib statically link in libcurl's dependencies.\n-  # This can be removed when we transition away from the ocurl otel collector\n-  #old: was just '--copt -static --copy -no-pie' before we dependended on libcurl\n-  echo \"(-cclib -lssl -cclib -lcrypto -cclib -lz -ccopt -static -ccopt -no-pie)\" > flags.sexp\n+if [[ \"$(opam switch show)\" == *+static* ]]; then\n+    FLAGS=()\n+    CCLIB=(\"-lssl\" \"-lcrypto\" \"-lz\")\n+    CCOPT=(\"-static\" \"-no-pie\")\n else\n-  echo \"( :standard )\" > flags.sexp\n+    case \"$OS\" in\n+    linux)\n+        if [[ -e /etc/alpine-release ]]; then\n+            # The -cclib statically link in libcurl's dependencies.\n+            # This can be removed when we transition away from the ocurl otel collector\n+            #old: was just '--copt -static --copy -no-pie' before we dependended on libcurl\n+            FLAGS=()\n+            CCLIB=(\"-lssl\" \"-lcrypto\" \"-lz\")\n+            CCOPT=(\"-static\" \"-no-pie\")\n+        else\n+            FLAGS=()\n+            CCLIB=()\n+            CCOPT=()\n+        fi\n+        ;;\n+    # In general, we want to statically link to make it easier to distribute\n+    # binaries since they won't carry runtime dependencies on various\n+    # libraries which would need to be separately installed or managed.\n+    # Additionally, this can be a bit fragile depending on which paths the\n+    # loader uses, and where dylibs are expected to be (and how possible\n+    # differences in the CI build versus other environments).\n+    #\n+    # However, on MacOS, it is a bit difficult to ensure libraries are linked\n+    # statically. It is not possible to link all libraries statically.\n+    # Notably, libSystem cannot (officially) be statically linked against,\n+    # since MacOS does not have a stable syscall ABI, but rather relies on\n+    # libSystem being stable. See, e.g.,\n+    # - <https://developer.apple.com/forums/thread/706419>\n+    # - <https://developer.apple.com/library/archive/qa/qa1118/_index.html>\n+    # - `man 1 ld`\n+    #\n+    # As a result, we cannot use a similar strategy to our Alpine build (which\n+    # works for Linux, since it is a rare case with a stable syscall ABI, See\n+    # <https://unix.stackexchange.com/questions/473137/do-other-unix-like-kernels-have-stable-syscall-abis>).\n+    # Previously we relied on a workaround where we deleted the `.dylib`\n+    # versions of libraries, leaving only the `.a` versions, thus forcing them\n+    # to be linked statically. However, this breaks the build in the case\n+    # where later build steps require programs which dynamically linked\n+    # against those libraries. Notably, this occurs for PCRE2. See\n+    # <https://github.com/semgrep/semgrep/pull/10064>.\n+    #\n+    # One might hope that we could specify the linker to use the `.a` version\n+    # without deleting the `.dylib`, but the only way to do this is to disable\n+    # autolinking and specify each library individually. Otherwise, on MacOS,\n+    # if both are present, the linker will link dynamically regardless.\n+    #\n+    # If you add a dependency which should be statically linked, it should be\n+    # added to this list. If it has a `.pc` file, ensure that the library is\n+    # appropriately added to PKG_CONFIG_PATH and use pkg-config to pick it up\n+    # below (see, e.g., gmp). If we expect it to always be installed via brew,\n+    # then use `brew --prefix <BREW PACKAGE NAME>`.\n+    macosx)\n+        # TODO: it would be best if this could be easily autogenerated from\n+        # languages/\n+        LANGS=(\n+            \"bash\"\n+            \"c_sharp\"\n+            \"c\"\n+            \"cairo\"",
        "comment_created_at": "2024-04-18T18:12:12+00:00",
        "comment_author": "aryx",
        "comment_body": "What happens if you remove one?\r\nWe get an error in CI?\r\nWhat happens it tomorrow we add a new language? Will the error be good enough to point to\r\nthis file?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1571191567",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10122,
        "pr_file": "src/main/flags.sh",
        "discussion_id": "1571177497",
        "commented_code": "@@ -4,19 +4,170 @@\n #\n set -eu\n \n+OS=\"$1\"\n+\n+>&2 echo \"Generating flags for OS ${OS}\"\n+\n # Force the use of static linking in these scenarios:\n #\n # - the name of the opam switch refers to musl,\n #   e.g. '4.10.0+musl+static+flambda'\n # - we're on alpine, in which case the opam switch doesn't have a special\n #   name. It is assumed that the reason we're on alpine is to get\n #   statically-linked executables.\n-#\n-if [[ \"$(opam switch show)\" == *+static* || -e /etc/alpine-release ]]; then\n-  # The -cclib statically link in libcurl's dependencies.\n-  # This can be removed when we transition away from the ocurl otel collector\n-  #old: was just '--copt -static --copy -no-pie' before we dependended on libcurl\n-  echo \"(-cclib -lssl -cclib -lcrypto -cclib -lz -ccopt -static -ccopt -no-pie)\" > flags.sexp\n+if [[ \"$(opam switch show)\" == *+static* ]]; then\n+    FLAGS=()\n+    CCLIB=(\"-lssl\" \"-lcrypto\" \"-lz\")\n+    CCOPT=(\"-static\" \"-no-pie\")\n else\n-  echo \"( :standard )\" > flags.sexp\n+    case \"$OS\" in\n+    linux)\n+        if [[ -e /etc/alpine-release ]]; then\n+            # The -cclib statically link in libcurl's dependencies.\n+            # This can be removed when we transition away from the ocurl otel collector\n+            #old: was just '--copt -static --copy -no-pie' before we dependended on libcurl\n+            FLAGS=()\n+            CCLIB=(\"-lssl\" \"-lcrypto\" \"-lz\")\n+            CCOPT=(\"-static\" \"-no-pie\")\n+        else\n+            FLAGS=()\n+            CCLIB=()\n+            CCOPT=()\n+        fi\n+        ;;\n+    # In general, we want to statically link to make it easier to distribute\n+    # binaries since they won't carry runtime dependencies on various\n+    # libraries which would need to be separately installed or managed.\n+    # Additionally, this can be a bit fragile depending on which paths the\n+    # loader uses, and where dylibs are expected to be (and how possible\n+    # differences in the CI build versus other environments).\n+    #\n+    # However, on MacOS, it is a bit difficult to ensure libraries are linked\n+    # statically. It is not possible to link all libraries statically.\n+    # Notably, libSystem cannot (officially) be statically linked against,\n+    # since MacOS does not have a stable syscall ABI, but rather relies on\n+    # libSystem being stable. See, e.g.,\n+    # - <https://developer.apple.com/forums/thread/706419>\n+    # - <https://developer.apple.com/library/archive/qa/qa1118/_index.html>\n+    # - `man 1 ld`\n+    #\n+    # As a result, we cannot use a similar strategy to our Alpine build (which\n+    # works for Linux, since it is a rare case with a stable syscall ABI, See\n+    # <https://unix.stackexchange.com/questions/473137/do-other-unix-like-kernels-have-stable-syscall-abis>).\n+    # Previously we relied on a workaround where we deleted the `.dylib`\n+    # versions of libraries, leaving only the `.a` versions, thus forcing them\n+    # to be linked statically. However, this breaks the build in the case\n+    # where later build steps require programs which dynamically linked\n+    # against those libraries. Notably, this occurs for PCRE2. See\n+    # <https://github.com/semgrep/semgrep/pull/10064>.\n+    #\n+    # One might hope that we could specify the linker to use the `.a` version\n+    # without deleting the `.dylib`, but the only way to do this is to disable\n+    # autolinking and specify each library individually. Otherwise, on MacOS,\n+    # if both are present, the linker will link dynamically regardless.\n+    #\n+    # If you add a dependency which should be statically linked, it should be\n+    # added to this list. If it has a `.pc` file, ensure that the library is\n+    # appropriately added to PKG_CONFIG_PATH and use pkg-config to pick it up\n+    # below (see, e.g., gmp). If we expect it to always be installed via brew,\n+    # then use `brew --prefix <BREW PACKAGE NAME>`.\n+    macosx)\n+        # TODO: it would be best if this could be easily autogenerated from\n+        # languages/\n+        LANGS=(\n+            \"bash\"\n+            \"c_sharp\"\n+            \"c\"\n+            \"cairo\"",
        "comment_created_at": "2024-04-18T18:25:36+00:00",
        "comment_author": "kopecs",
        "comment_body": "You would get an error in CI and locally (if you're on MacOS). A representative error would be:\r\n```\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make minimal-build\r\ndune build _build/install/default/bin/semgrep-core\r\nGenerating flags for OS macosx\r\nFile \"src/main/dune\", line 2, characters 8-12:\r\n2 |  (names Main)\r\n            ^^^^\r\nUndefined symbols for architecture arm64:\r\n  \"_octs_create_parser_go\", referenced from:\r\n      _camlTree_sitter_go__Parse__parse_source_string_328 in tree_sitter_go.a[4](tree_sitter_go__Parse.o)\r\n      _camlTree_sitter_go__Parse__data_begin in tree_sitter_go.a[4](tree_sitter_go__Parse.o)\r\nld: symbol(s) not found for architecture arm64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nFile \"caml_startup\", line 1:\r\nError: Error during linking (exit code 1)\r\nmake[1]: *** [minimal-build] Error 1\r\nmake: *** [core] Error 2\r\n```\r\n(removing go)\r\n\r\nNot quite good enough (imo) in terms of pointing to this file, but obvious and reproducible between CI and locally. \r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1571200821",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10122,
        "pr_file": "src/main/flags.sh",
        "discussion_id": "1571177497",
        "commented_code": "@@ -4,19 +4,170 @@\n #\n set -eu\n \n+OS=\"$1\"\n+\n+>&2 echo \"Generating flags for OS ${OS}\"\n+\n # Force the use of static linking in these scenarios:\n #\n # - the name of the opam switch refers to musl,\n #   e.g. '4.10.0+musl+static+flambda'\n # - we're on alpine, in which case the opam switch doesn't have a special\n #   name. It is assumed that the reason we're on alpine is to get\n #   statically-linked executables.\n-#\n-if [[ \"$(opam switch show)\" == *+static* || -e /etc/alpine-release ]]; then\n-  # The -cclib statically link in libcurl's dependencies.\n-  # This can be removed when we transition away from the ocurl otel collector\n-  #old: was just '--copt -static --copy -no-pie' before we dependended on libcurl\n-  echo \"(-cclib -lssl -cclib -lcrypto -cclib -lz -ccopt -static -ccopt -no-pie)\" > flags.sexp\n+if [[ \"$(opam switch show)\" == *+static* ]]; then\n+    FLAGS=()\n+    CCLIB=(\"-lssl\" \"-lcrypto\" \"-lz\")\n+    CCOPT=(\"-static\" \"-no-pie\")\n else\n-  echo \"( :standard )\" > flags.sexp\n+    case \"$OS\" in\n+    linux)\n+        if [[ -e /etc/alpine-release ]]; then\n+            # The -cclib statically link in libcurl's dependencies.\n+            # This can be removed when we transition away from the ocurl otel collector\n+            #old: was just '--copt -static --copy -no-pie' before we dependended on libcurl\n+            FLAGS=()\n+            CCLIB=(\"-lssl\" \"-lcrypto\" \"-lz\")\n+            CCOPT=(\"-static\" \"-no-pie\")\n+        else\n+            FLAGS=()\n+            CCLIB=()\n+            CCOPT=()\n+        fi\n+        ;;\n+    # In general, we want to statically link to make it easier to distribute\n+    # binaries since they won't carry runtime dependencies on various\n+    # libraries which would need to be separately installed or managed.\n+    # Additionally, this can be a bit fragile depending on which paths the\n+    # loader uses, and where dylibs are expected to be (and how possible\n+    # differences in the CI build versus other environments).\n+    #\n+    # However, on MacOS, it is a bit difficult to ensure libraries are linked\n+    # statically. It is not possible to link all libraries statically.\n+    # Notably, libSystem cannot (officially) be statically linked against,\n+    # since MacOS does not have a stable syscall ABI, but rather relies on\n+    # libSystem being stable. See, e.g.,\n+    # - <https://developer.apple.com/forums/thread/706419>\n+    # - <https://developer.apple.com/library/archive/qa/qa1118/_index.html>\n+    # - `man 1 ld`\n+    #\n+    # As a result, we cannot use a similar strategy to our Alpine build (which\n+    # works for Linux, since it is a rare case with a stable syscall ABI, See\n+    # <https://unix.stackexchange.com/questions/473137/do-other-unix-like-kernels-have-stable-syscall-abis>).\n+    # Previously we relied on a workaround where we deleted the `.dylib`\n+    # versions of libraries, leaving only the `.a` versions, thus forcing them\n+    # to be linked statically. However, this breaks the build in the case\n+    # where later build steps require programs which dynamically linked\n+    # against those libraries. Notably, this occurs for PCRE2. See\n+    # <https://github.com/semgrep/semgrep/pull/10064>.\n+    #\n+    # One might hope that we could specify the linker to use the `.a` version\n+    # without deleting the `.dylib`, but the only way to do this is to disable\n+    # autolinking and specify each library individually. Otherwise, on MacOS,\n+    # if both are present, the linker will link dynamically regardless.\n+    #\n+    # If you add a dependency which should be statically linked, it should be\n+    # added to this list. If it has a `.pc` file, ensure that the library is\n+    # appropriately added to PKG_CONFIG_PATH and use pkg-config to pick it up\n+    # below (see, e.g., gmp). If we expect it to always be installed via brew,\n+    # then use `brew --prefix <BREW PACKAGE NAME>`.\n+    macosx)\n+        # TODO: it would be best if this could be easily autogenerated from\n+        # languages/\n+        LANGS=(\n+            \"bash\"\n+            \"c_sharp\"\n+            \"c\"\n+            \"cairo\"",
        "comment_created_at": "2024-04-18T18:34:29+00:00",
        "comment_author": "aryx",
        "comment_body": "since the error mention src/main/dune\r\nyou can probably add a comment in it saying \"if you get a linking error like XXX, you probably need to modify .../flags.sh  and add the necessary library ",
        "pr_file_module": null
      },
      {
        "comment_id": "1571263161",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10122,
        "pr_file": "src/main/flags.sh",
        "discussion_id": "1571177497",
        "commented_code": "@@ -4,19 +4,170 @@\n #\n set -eu\n \n+OS=\"$1\"\n+\n+>&2 echo \"Generating flags for OS ${OS}\"\n+\n # Force the use of static linking in these scenarios:\n #\n # - the name of the opam switch refers to musl,\n #   e.g. '4.10.0+musl+static+flambda'\n # - we're on alpine, in which case the opam switch doesn't have a special\n #   name. It is assumed that the reason we're on alpine is to get\n #   statically-linked executables.\n-#\n-if [[ \"$(opam switch show)\" == *+static* || -e /etc/alpine-release ]]; then\n-  # The -cclib statically link in libcurl's dependencies.\n-  # This can be removed when we transition away from the ocurl otel collector\n-  #old: was just '--copt -static --copy -no-pie' before we dependended on libcurl\n-  echo \"(-cclib -lssl -cclib -lcrypto -cclib -lz -ccopt -static -ccopt -no-pie)\" > flags.sexp\n+if [[ \"$(opam switch show)\" == *+static* ]]; then\n+    FLAGS=()\n+    CCLIB=(\"-lssl\" \"-lcrypto\" \"-lz\")\n+    CCOPT=(\"-static\" \"-no-pie\")\n else\n-  echo \"( :standard )\" > flags.sexp\n+    case \"$OS\" in\n+    linux)\n+        if [[ -e /etc/alpine-release ]]; then\n+            # The -cclib statically link in libcurl's dependencies.\n+            # This can be removed when we transition away from the ocurl otel collector\n+            #old: was just '--copt -static --copy -no-pie' before we dependended on libcurl\n+            FLAGS=()\n+            CCLIB=(\"-lssl\" \"-lcrypto\" \"-lz\")\n+            CCOPT=(\"-static\" \"-no-pie\")\n+        else\n+            FLAGS=()\n+            CCLIB=()\n+            CCOPT=()\n+        fi\n+        ;;\n+    # In general, we want to statically link to make it easier to distribute\n+    # binaries since they won't carry runtime dependencies on various\n+    # libraries which would need to be separately installed or managed.\n+    # Additionally, this can be a bit fragile depending on which paths the\n+    # loader uses, and where dylibs are expected to be (and how possible\n+    # differences in the CI build versus other environments).\n+    #\n+    # However, on MacOS, it is a bit difficult to ensure libraries are linked\n+    # statically. It is not possible to link all libraries statically.\n+    # Notably, libSystem cannot (officially) be statically linked against,\n+    # since MacOS does not have a stable syscall ABI, but rather relies on\n+    # libSystem being stable. See, e.g.,\n+    # - <https://developer.apple.com/forums/thread/706419>\n+    # - <https://developer.apple.com/library/archive/qa/qa1118/_index.html>\n+    # - `man 1 ld`\n+    #\n+    # As a result, we cannot use a similar strategy to our Alpine build (which\n+    # works for Linux, since it is a rare case with a stable syscall ABI, See\n+    # <https://unix.stackexchange.com/questions/473137/do-other-unix-like-kernels-have-stable-syscall-abis>).\n+    # Previously we relied on a workaround where we deleted the `.dylib`\n+    # versions of libraries, leaving only the `.a` versions, thus forcing them\n+    # to be linked statically. However, this breaks the build in the case\n+    # where later build steps require programs which dynamically linked\n+    # against those libraries. Notably, this occurs for PCRE2. See\n+    # <https://github.com/semgrep/semgrep/pull/10064>.\n+    #\n+    # One might hope that we could specify the linker to use the `.a` version\n+    # without deleting the `.dylib`, but the only way to do this is to disable\n+    # autolinking and specify each library individually. Otherwise, on MacOS,\n+    # if both are present, the linker will link dynamically regardless.\n+    #\n+    # If you add a dependency which should be statically linked, it should be\n+    # added to this list. If it has a `.pc` file, ensure that the library is\n+    # appropriately added to PKG_CONFIG_PATH and use pkg-config to pick it up\n+    # below (see, e.g., gmp). If we expect it to always be installed via brew,\n+    # then use `brew --prefix <BREW PACKAGE NAME>`.\n+    macosx)\n+        # TODO: it would be best if this could be easily autogenerated from\n+        # languages/\n+        LANGS=(\n+            \"bash\"\n+            \"c_sharp\"\n+            \"c\"\n+            \"cairo\"",
        "comment_created_at": "2024-04-18T19:28:58+00:00",
        "comment_author": "kopecs",
        "comment_body": "Added a printout from Make in 5a250d5b519220912a55ec234fddb427ed3f5441",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1571309148",
    "pr_number": 10122,
    "pr_file": "src/main/flags.sh",
    "created_at": "2024-04-18T20:03:43+00:00",
    "commented_code": "#\n set -eu\n \n+OS=\"$1\"",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1571309148",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10122,
        "pr_file": "src/main/flags.sh",
        "discussion_id": "1571309148",
        "commented_code": "@@ -4,19 +4,175 @@\n #\n set -eu\n \n+OS=\"$1\"",
        "comment_created_at": "2024-04-18T20:03:43+00:00",
        "comment_author": "ajbt200128",
        "comment_body": "can we add a short comment at the top here that's like \"if you added a dependency that's causing a linking error, here's how to find out what library is needed (opam depext or similar), here's what to update below etc.\"",
        "pr_file_module": null
      },
      {
        "comment_id": "1571309947",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10122,
        "pr_file": "src/main/flags.sh",
        "discussion_id": "1571309148",
        "commented_code": "@@ -4,19 +4,175 @@\n #\n set -eu\n \n+OS=\"$1\"",
        "comment_created_at": "2024-04-18T20:04:43+00:00",
        "comment_author": "ajbt200128",
        "comment_body": "also something about what to do if it's a language v opam package",
        "pr_file_module": null
      },
      {
        "comment_id": "1571413266",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10122,
        "pr_file": "src/main/flags.sh",
        "discussion_id": "1571309148",
        "commented_code": "@@ -4,19 +4,175 @@\n #\n set -eu\n \n+OS=\"$1\"",
        "comment_created_at": "2024-04-18T21:34:34+00:00",
        "comment_author": "kopecs",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1550653225",
    "pr_number": 10054,
    "pr_file": "scripts/osx-setup-opam-for-release.sh",
    "created_at": "2024-04-03T23:50:25+00:00",
    "commented_code": "+#!/usr/bin/env bash\n+set -eux\n+\n+# Setup the environment under MacOS to build and release semgrep-core.",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1550653225",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10054,
        "pr_file": "scripts/osx-setup-opam-for-release.sh",
        "discussion_id": "1550653225",
        "commented_code": "@@ -0,0 +1,38 @@\n+#!/usr/bin/env bash\n+set -eux\n+\n+# Setup the environment under MacOS to build and release semgrep-core.",
        "comment_created_at": "2024-04-03T23:50:25+00:00",
        "comment_author": "emjin",
        "comment_body": "```suggestion\r\n# Setup the opam environment under MacOS to build and release semgrep-core.\r\n# All other MacOS-related setup should be in `osx-setup-post-opam-for-release.sh`\r\n```",
        "pr_file_module": null
      }
    ]
  }
]