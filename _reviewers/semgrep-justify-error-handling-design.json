[
  {
    "discussion_id": "1386104685",
    "pr_number": 9191,
    "pr_file": "cli/src/semgrep/state.py",
    "created_at": "2023-11-08T07:10:16+00:00",
    "commented_code": "\"\"\"\n \n     app_session: AppSession = Factory(AppSession)\n+    request_id: UUID = Factory(uuid4)",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1386104685",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9191,
        "pr_file": "cli/src/semgrep/state.py",
        "discussion_id": "1386104685",
        "commented_code": "@@ -30,6 +32,7 @@ class SemgrepState:\n     \"\"\"\n \n     app_session: AppSession = Factory(AppSession)\n+    request_id: UUID = Factory(uuid4)",
        "comment_created_at": "2023-11-08T07:10:16+00:00",
        "comment_author": "aryx",
        "comment_body": "Can we avoid yet another global ...? Is there no other way?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1386975124",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9191,
        "pr_file": "cli/src/semgrep/state.py",
        "discussion_id": "1386104685",
        "commented_code": "@@ -30,6 +32,7 @@ class SemgrepState:\n     \"\"\"\n \n     app_session: AppSession = Factory(AppSession)\n+    request_id: UUID = Factory(uuid4)",
        "comment_created_at": "2023-11-08T17:29:00+00:00",
        "comment_author": "jbergler",
        "comment_body": "I don't think there are 'easy' solutions to this problem without leveraging global state. \r\n\r\nThe use case here requires that whenever something in `semgrep ci` fails this uuid gets sent to the fail-open endpoint so we can accurately correlate the backend requests with the failures and I don't think it's reasonable to rewrite the entire error handling implementation to solve this metrics gap.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1334268891",
    "pr_number": 8690,
    "pr_file": "tests/rules/taint_exception.py",
    "created_at": "2023-09-22T11:40:54+00:00",
    "commented_code": "+# This test aims to exercise various exception paths.\n+\n+def throw_exits(input):\n+  clean = None\n+  raise RuntimeError()\n+\n+  # ok:\n+  sink = clean\n+\n+def throw_in_catch_exits(input):\n+  clean = None\n+  try:\n+    raise RuntimeError()\n+  except Exception as e:\n+    raise RuntimeError()\n+\n+  #ok: unreachable, because throw inside the catch clause exits\n+  sink(clean)\n+\n+def throw_in_else_exits(input):\n+  clean = None\n+  try:\n+    pass\n+  except Exception as e:\n+    clean = input\n+    #ok: unreachable, because exception was not thrown",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1334268891",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 8690,
        "pr_file": "tests/rules/taint_exception.py",
        "discussion_id": "1334268891",
        "commented_code": "@@ -0,0 +1,242 @@\n+# This test aims to exercise various exception paths.\n+\n+def throw_exits(input):\n+  clean = None\n+  raise RuntimeError()\n+\n+  # ok:\n+  sink = clean\n+\n+def throw_in_catch_exits(input):\n+  clean = None\n+  try:\n+    raise RuntimeError()\n+  except Exception as e:\n+    raise RuntimeError()\n+\n+  #ok: unreachable, because throw inside the catch clause exits\n+  sink(clean)\n+\n+def throw_in_else_exits(input):\n+  clean = None\n+  try:\n+    pass\n+  except Exception as e:\n+    clean = input\n+    #ok: unreachable, because exception was not thrown",
        "comment_created_at": "2023-09-22T11:40:54+00:00",
        "comment_author": "IagoAbal",
        "comment_body": "I wonder if we're trying to be too smart here. Who writes this code? And if they write it, is it really that bad that we report a finding here?",
        "pr_file_module": null
      },
      {
        "comment_id": "1334271039",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 8690,
        "pr_file": "tests/rules/taint_exception.py",
        "discussion_id": "1334268891",
        "commented_code": "@@ -0,0 +1,242 @@\n+# This test aims to exercise various exception paths.\n+\n+def throw_exits(input):\n+  clean = None\n+  raise RuntimeError()\n+\n+  # ok:\n+  sink = clean\n+\n+def throw_in_catch_exits(input):\n+  clean = None\n+  try:\n+    raise RuntimeError()\n+  except Exception as e:\n+    raise RuntimeError()\n+\n+  #ok: unreachable, because throw inside the catch clause exits\n+  sink(clean)\n+\n+def throw_in_else_exits(input):\n+  clean = None\n+  try:\n+    pass\n+  except Exception as e:\n+    clean = input\n+    #ok: unreachable, because exception was not thrown",
        "comment_created_at": "2023-09-22T11:43:03+00:00",
        "comment_author": "IagoAbal",
        "comment_body": "Could you point me where in the code we make this unreachable?",
        "pr_file_module": null
      },
      {
        "comment_id": "1334275388",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 8690,
        "pr_file": "tests/rules/taint_exception.py",
        "discussion_id": "1334268891",
        "commented_code": "@@ -0,0 +1,242 @@\n+# This test aims to exercise various exception paths.\n+\n+def throw_exits(input):\n+  clean = None\n+  raise RuntimeError()\n+\n+  # ok:\n+  sink = clean\n+\n+def throw_in_catch_exits(input):\n+  clean = None\n+  try:\n+    raise RuntimeError()\n+  except Exception as e:\n+    raise RuntimeError()\n+\n+  #ok: unreachable, because throw inside the catch clause exits\n+  sink(clean)\n+\n+def throw_in_else_exits(input):\n+  clean = None\n+  try:\n+    pass\n+  except Exception as e:\n+    clean = input\n+    #ok: unreachable, because exception was not thrown",
        "comment_created_at": "2023-09-22T11:47:55+00:00",
        "comment_author": "IagoAbal",
        "comment_body": "Ah OK I see, now the arcs to the `catch` are only added via `throw_destination`. Fine with that, I think it deserves a comment where we used to connect `finaltry` with `catchesi`, like \"we do not directly connect finaltry with catchesi but whenever we encounter a Call or a Throw inside a Try, we add an arc ...\".",
        "pr_file_module": null
      },
      {
        "comment_id": "1335241639",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 8690,
        "pr_file": "tests/rules/taint_exception.py",
        "discussion_id": "1334268891",
        "commented_code": "@@ -0,0 +1,242 @@\n+# This test aims to exercise various exception paths.\n+\n+def throw_exits(input):\n+  clean = None\n+  raise RuntimeError()\n+\n+  # ok:\n+  sink = clean\n+\n+def throw_in_catch_exits(input):\n+  clean = None\n+  try:\n+    raise RuntimeError()\n+  except Exception as e:\n+    raise RuntimeError()\n+\n+  #ok: unreachable, because throw inside the catch clause exits\n+  sink(clean)\n+\n+def throw_in_else_exits(input):\n+  clean = None\n+  try:\n+    pass\n+  except Exception as e:\n+    clean = input\n+    #ok: unreachable, because exception was not thrown",
        "comment_created_at": "2023-09-24T20:34:14+00:00",
        "comment_author": "amchiclet",
        "comment_body": "Will add a comment to explain this.",
        "pr_file_module": null
      }
    ]
  }
]