[
  {
    "discussion_id": "1544827521",
    "pr_number": 10028,
    "pr_file": "src/osemgrep/reporting/Sarif_output.mli",
    "created_at": "2024-03-29T20:06:19+00:00",
    "commented_code": "val sarif_output :\n   bool ->\n+  string ->\n   Rule.hrules ->\n   Semgrep_output_v1_t.cli_output ->\n   Sarif.Sarif_v_2_1_0_t.sarif_json_schema",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1544827521",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10028,
        "pr_file": "src/osemgrep/reporting/Sarif_output.mli",
        "discussion_id": "1544827521",
        "commented_code": "@@ -1,5 +1,6 @@\n val sarif_output :\n   bool ->\n+  string ->\n   Rule.hrules ->\n   Semgrep_output_v1_t.cli_output ->\n   Sarif.Sarif_v_2_1_0_t.sarif_json_schema",
        "comment_created_at": "2024-03-29T20:06:19+00:00",
        "comment_author": "mjambon",
        "comment_body": "What about some labels for the bool and string arguments + some brief documentation what this module is about.",
        "pr_file_module": null
      },
      {
        "comment_id": "1545521262",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10028,
        "pr_file": "src/osemgrep/reporting/Sarif_output.mli",
        "discussion_id": "1544827521",
        "commented_code": "@@ -1,5 +1,6 @@\n val sarif_output :\n   bool ->\n+  string ->\n   Rule.hrules ->\n   Semgrep_output_v1_t.cli_output ->\n   Sarif.Sarif_v_2_1_0_t.sarif_json_schema",
        "comment_created_at": "2024-03-31T01:21:48+00:00",
        "comment_author": "amchiclet",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1520584986",
    "pr_number": 9907,
    "pr_file": "libs/tracing/Tracing.mli",
    "created_at": "2024-03-12T00:07:38+00:00",
    "commented_code": "See header of Tracing.ml for details",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1520584986",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9907,
        "pr_file": "libs/tracing/Tracing.mli",
        "discussion_id": "1520584986",
        "commented_code": "@@ -2,10 +2,41 @@\n    See header of Tracing.ml for details",
        "comment_created_at": "2024-03-12T00:07:38+00:00",
        "comment_author": "kopecs",
        "comment_body": "imo those details should be here (in the mli) so that ocamldoc uses them, etc..",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1508655931",
    "pr_number": 9863,
    "pr_file": "src/tainting/Taint_shape.ml",
    "created_at": "2024-03-01T08:34:44+00:00",
    "commented_code": "+(* Iago Abal\n+ *\n+ * Copyright (C) 2022-2024 r2c\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public License\n+ * version 2.1 as published by the Free Software Foundation, with the\n+ * special exception on linking described in file LICENSE.\n+ *\n+ * This library is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the file\n+ * LICENSE for more details.\n+ *)\n+\n+open Common\n+module T = Taint\n+module Taints = T.Taint_set\n+\n+(*****************************************************************************)\n+(* Prelude *)\n+(*****************************************************************************)",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1508655931",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9863,
        "pr_file": "src/tainting/Taint_shape.ml",
        "discussion_id": "1508655931",
        "commented_code": "@@ -0,0 +1,302 @@\n+(* Iago Abal\n+ *\n+ * Copyright (C) 2022-2024 r2c\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public License\n+ * version 2.1 as published by the Free Software Foundation, with the\n+ * special exception on linking described in file LICENSE.\n+ *\n+ * This library is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the file\n+ * LICENSE for more details.\n+ *)\n+\n+open Common\n+module T = Taint\n+module Taints = T.Taint_set\n+\n+(*****************************************************************************)\n+(* Prelude *)\n+(*****************************************************************************)",
        "comment_created_at": "2024-03-01T08:34:44+00:00",
        "comment_author": "aryx",
        "comment_body": "Please add a high level overview of the goal of the module here, just after the prelude.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1480498141",
    "pr_number": 9715,
    "pr_file": "src/core/Target_location.mli",
    "created_at": "2024-02-06T20:29:03+00:00",
    "commented_code": "+(* Cooper Pierce",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1480498141",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9715,
        "pr_file": "src/core/Target_location.mli",
        "discussion_id": "1480498141",
        "commented_code": "@@ -0,0 +1,72 @@\n+(* Cooper Pierce",
        "comment_created_at": "2024-02-06T20:29:03+00:00",
        "comment_author": "mjambon",
        "comment_body": "Same remark as above, a reader needs to know quickly what this module is about from reading the first few lines of the file.",
        "pr_file_module": null
      },
      {
        "comment_id": "1480638880",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9715,
        "pr_file": "src/core/Target_location.mli",
        "discussion_id": "1480498141",
        "commented_code": "@@ -0,0 +1,72 @@\n+(* Cooper Pierce",
        "comment_created_at": "2024-02-06T23:00:12+00:00",
        "comment_author": "emjin",
        "comment_body": "I think it's pretty common for our mli files to not have file header summary comments. I agree that the ml files need preludes.",
        "pr_file_module": null
      },
      {
        "comment_id": "1481915531",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9715,
        "pr_file": "src/core/Target_location.mli",
        "discussion_id": "1480498141",
        "commented_code": "@@ -0,0 +1,72 @@\n+(* Cooper Pierce",
        "comment_created_at": "2024-02-07T18:29:35+00:00",
        "comment_author": "kopecs",
        "comment_body": "Done in 53d1290887b2dfd54da804bf66665f5f3336c3d1",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1480499547",
    "pr_number": 9715,
    "pr_file": "libs/source/Source.ml",
    "created_at": "2024-02-06T20:30:37+00:00",
    "commented_code": "+type t = File of Fpath.t [@@deriving show, eq, ord]",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1480499547",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9715,
        "pr_file": "libs/source/Source.ml",
        "discussion_id": "1480499547",
        "commented_code": "@@ -0,0 +1,28 @@\n+type t = File of Fpath.t [@@deriving show, eq, ord]",
        "comment_created_at": "2024-02-06T20:30:37+00:00",
        "comment_author": "mjambon",
        "comment_body": "Did you intend to add other kinds of sources? You need to describe what this module is about and add an mli.",
        "pr_file_module": null
      },
      {
        "comment_id": "1480587039",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9715,
        "pr_file": "libs/source/Source.ml",
        "discussion_id": "1480499547",
        "commented_code": "@@ -0,0 +1,28 @@\n+type t = File of Fpath.t [@@deriving show, eq, ord]",
        "comment_created_at": "2024-02-06T21:58:12+00:00",
        "comment_author": "kopecs",
        "comment_body": "mli added in 3ef8b07eb",
        "pr_file_module": null
      },
      {
        "comment_id": "1481915166",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9715,
        "pr_file": "libs/source/Source.ml",
        "discussion_id": "1480499547",
        "commented_code": "@@ -0,0 +1,28 @@\n+type t = File of Fpath.t [@@deriving show, eq, ord]",
        "comment_created_at": "2024-02-07T18:29:13+00:00",
        "comment_author": "kopecs",
        "comment_body": "Docs in 7347e9833509121bdd69d72c7f88dd7cdc922577",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1489104046",
    "pr_number": 9715,
    "pr_file": "src/core/Xtarget.ml",
    "created_at": "2024-02-14T08:40:26+00:00",
    "commented_code": "-(* eXtended target.\n+(* Yoann Padioleau, Cooper Pierce\n  *\n- * This type is mostly used in the engine, to pass around extra information\n- * associated to each target.\n+ * Copyright (c) Semgrep Inc.\n  *\n- * related: Input_to_core.target, which is what is passed\n- * to semgrep-core via -target.\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public License\n+ * version 2.1 as published by the Free Software Foundation, with the\n+ * special exception on linking described in file LICENSE.\n+ *\n+ * This library is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the file\n+ * LICENSE for more details.\n+ *)\n+\n+(** eXtended target.\n+\n+   This type is mostly used in the engine to pass around extra information\n+   (e.g., contents, the AST) associated with each {{!Target.regular}target}.\n+\n+   See also {!Input_to_core_t.target}, which is what is passed to\n+   [semgrep-core] via [-target].\n  *)\n \n type t = {\n-  file : Fpath.t;\n-  xlang : Xlang.t;\n+  path : Target.path;\n+  xlang : Xlang.t;  (** The analyzer to use when scanning this target. *)\n   lazy_content : string lazy_t;\n-  (* This is valid only for xlang = Xlang.L ..., not for LRegex|LGeneric *)\n   lazy_ast_and_errors : (AST_generic.program * Tok.location list) lazy_t;\n+      (** This is valid only for xlang = Xlang.L ..., not for LRegex|LGeneric *)\n }\n+\n+let parse_file parser (analyzer : Xlang.t) path =",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1489104046",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9715,
        "pr_file": "src/core/Xtarget.ml",
        "discussion_id": "1489104046",
        "commented_code": "@@ -1,16 +1,56 @@\n-(* eXtended target.\n+(* Yoann Padioleau, Cooper Pierce\n  *\n- * This type is mostly used in the engine, to pass around extra information\n- * associated to each target.\n+ * Copyright (c) Semgrep Inc.\n  *\n- * related: Input_to_core.target, which is what is passed\n- * to semgrep-core via -target.\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public License\n+ * version 2.1 as published by the Free Software Foundation, with the\n+ * special exception on linking described in file LICENSE.\n+ *\n+ * This library is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the file\n+ * LICENSE for more details.\n+ *)\n+\n+(** eXtended target.\n+\n+   This type is mostly used in the engine to pass around extra information\n+   (e.g., contents, the AST) associated with each {{!Target.regular}target}.\n+\n+   See also {!Input_to_core_t.target}, which is what is passed to\n+   [semgrep-core] via [-target].\n  *)\n \n type t = {\n-  file : Fpath.t;\n-  xlang : Xlang.t;\n+  path : Target.path;\n+  xlang : Xlang.t;  (** The analyzer to use when scanning this target. *)\n   lazy_content : string lazy_t;\n-  (* This is valid only for xlang = Xlang.L ..., not for LRegex|LGeneric *)\n   lazy_ast_and_errors : (AST_generic.program * Tok.location list) lazy_t;\n+      (** This is valid only for xlang = Xlang.L ..., not for LRegex|LGeneric *)\n }\n+\n+let parse_file parser (analyzer : Xlang.t) path =",
        "comment_created_at": "2024-02-14T08:40:26+00:00",
        "comment_author": "aryx",
        "comment_body": "now that this type has a few functions, please add a Xtarget.mli\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1490217673",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9715,
        "pr_file": "src/core/Xtarget.ml",
        "discussion_id": "1489104046",
        "commented_code": "@@ -1,16 +1,56 @@\n-(* eXtended target.\n+(* Yoann Padioleau, Cooper Pierce\n  *\n- * This type is mostly used in the engine, to pass around extra information\n- * associated to each target.\n+ * Copyright (c) Semgrep Inc.\n  *\n- * related: Input_to_core.target, which is what is passed\n- * to semgrep-core via -target.\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public License\n+ * version 2.1 as published by the Free Software Foundation, with the\n+ * special exception on linking described in file LICENSE.\n+ *\n+ * This library is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the file\n+ * LICENSE for more details.\n+ *)\n+\n+(** eXtended target.\n+\n+   This type is mostly used in the engine to pass around extra information\n+   (e.g., contents, the AST) associated with each {{!Target.regular}target}.\n+\n+   See also {!Input_to_core_t.target}, which is what is passed to\n+   [semgrep-core] via [-target].\n  *)\n \n type t = {\n-  file : Fpath.t;\n-  xlang : Xlang.t;\n+  path : Target.path;\n+  xlang : Xlang.t;  (** The analyzer to use when scanning this target. *)\n   lazy_content : string lazy_t;\n-  (* This is valid only for xlang = Xlang.L ..., not for LRegex|LGeneric *)\n   lazy_ast_and_errors : (AST_generic.program * Tok.location list) lazy_t;\n+      (** This is valid only for xlang = Xlang.L ..., not for LRegex|LGeneric *)\n }\n+\n+let parse_file parser (analyzer : Xlang.t) path =",
        "comment_created_at": "2024-02-15T00:15:41+00:00",
        "comment_author": "kopecs",
        "comment_body": "Done in d57830ad536d2800a7e4c53159e6c156191eae83.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1482781501",
    "pr_number": 9561,
    "pr_file": "libs/tracing/Tracing.mli",
    "created_at": "2024-02-08T10:57:57+00:00",
    "commented_code": "+val with_span :",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1482781501",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9561,
        "pr_file": "libs/tracing/Tracing.mli",
        "discussion_id": "1482781501",
        "commented_code": "@@ -0,0 +1,14 @@\n+val with_span :",
        "comment_created_at": "2024-02-08T10:57:57+00:00",
        "comment_author": "aryx",
        "comment_body": "Please, add comments to each of those functions.\r\nSee Logs_.mli for example.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1475997910",
    "pr_number": 9706,
    "pr_file": "src/osemgrep/core/Cli_match.ml",
    "created_at": "2024-02-02T12:27:59+00:00",
    "commented_code": "+module OutT = Semgrep_output_v1_t",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1475997910",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9706,
        "pr_file": "src/osemgrep/core/Cli_match.ml",
        "discussion_id": "1475997910",
        "commented_code": "@@ -0,0 +1,99 @@\n+module OutT = Semgrep_output_v1_t",
        "comment_created_at": "2024-02-02T12:27:59+00:00",
        "comment_author": "aryx",
        "comment_body": "please add a .mli\r\n\r\nWe usually use just a .ml when the file is mostly type definitions (because it's a bit annoying to copy paste all those type definitions), but for files having mostly functions, we usually prefer to have a .mli explaining how to use the module.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1476028202",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9706,
        "pr_file": "src/osemgrep/core/Cli_match.ml",
        "discussion_id": "1475997910",
        "commented_code": "@@ -0,0 +1,99 @@\n+module OutT = Semgrep_output_v1_t",
        "comment_created_at": "2024-02-02T12:58:59+00:00",
        "comment_author": "hannesm",
        "comment_body": "done in [a7869a2](https://github.com/semgrep/semgrep/pull/9706/commits/a7869a28d7983febd689530478e839c9d02c6e5c) -- of course there could be even more documentation, and I didn't go into \"how to use the module\".",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1474093497",
    "pr_number": 9695,
    "pr_file": "src/engine/Match_dependency.ml",
    "created_at": "2024-02-01T09:22:29+00:00",
    "commented_code": "+module R = Rule",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1474093497",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9695,
        "pr_file": "src/engine/Match_dependency.ml",
        "discussion_id": "1474093497",
        "commented_code": "@@ -0,0 +1,126 @@\n+module R = Rule",
        "comment_created_at": "2024-02-01T09:22:29+00:00",
        "comment_author": "aryx",
        "comment_body": "Please add a .mli, with a toplevel comment explaining the goal of the module.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1418872505",
    "pr_number": 9404,
    "pr_file": "src/osemgrep/language_server/requests/Execute_command.mli",
    "created_at": "2023-12-07T12:13:48+00:00",
    "commented_code": "+val handle_execute_request :",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1418872505",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9404,
        "pr_file": "src/osemgrep/language_server/requests/Execute_command.mli",
        "discussion_id": "1418872505",
        "commented_code": "@@ -0,0 +1,5 @@\n+val handle_execute_request :",
        "comment_created_at": "2023-12-07T12:13:48+00:00",
        "comment_author": "aryx",
        "comment_body": "please add comment explaining what this function is doing.\r\nIts name is very vague.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1402669806",
    "pr_number": 9279,
    "pr_file": "libs/networking/http_helpers/http_helpers.ml",
    "created_at": "2023-11-22T20:10:29+00:00",
    "commented_code": "| None -> failwith \"HTTP client not initialized\")\n     in\n     let headers = Header.of_list headers in\n-    let%lwt response, body = Client.get ~headers url in\n-    let%lwt body = Cohttp_lwt.Body.to_string body in\n+    let%lwt response, orig_body = Client.get ~headers url in\n+    let%lwt body = Cohttp_lwt.Body.to_string orig_body in\n     let code = response |> Response.status |> Code.code_of_status in\n     match code with\n-    | _ when Code.is_success code -> Lwt.return (Ok body)\n+    | _ when Code.is_success code ->\n+        Lwt.return (Ok (body, { code; response; body = orig_body }))\n+    (* Automatically resolve redirects, in this case a 307 Temporary Redirect.\n+       This is important for installing the Semgrep Pro Engine binary, which\n+       receives a temporary redirect at the proper endpoint.\n+    *)\n+    | 307 -> (",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1402669806",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9279,
        "pr_file": "libs/networking/http_helpers/http_helpers.ml",
        "discussion_id": "1402669806",
        "commented_code": "@@ -48,21 +58,35 @@ struct\n            | None -> failwith \"HTTP client not initialized\")\n     in\n     let headers = Header.of_list headers in\n-    let%lwt response, body = Client.get ~headers url in\n-    let%lwt body = Cohttp_lwt.Body.to_string body in\n+    let%lwt response, orig_body = Client.get ~headers url in\n+    let%lwt body = Cohttp_lwt.Body.to_string orig_body in\n     let code = response |> Response.status |> Code.code_of_status in\n     match code with\n-    | _ when Code.is_success code -> Lwt.return (Ok body)\n+    | _ when Code.is_success code ->\n+        Lwt.return (Ok (body, { code; response; body = orig_body }))\n+    (* Automatically resolve redirects, in this case a 307 Temporary Redirect.\n+       This is important for installing the Semgrep Pro Engine binary, which\n+       receives a temporary redirect at the proper endpoint.\n+    *)\n+    | 307 -> (",
        "comment_created_at": "2023-11-22T20:10:29+00:00",
        "comment_author": "aryx",
        "comment_body": "please add a comment in the .mli about get_async and the fact it handles 307 errors and automatically redirect",
        "pr_file_module": null
      }
    ]
  }
]