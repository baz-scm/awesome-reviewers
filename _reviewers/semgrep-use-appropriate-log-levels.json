[
  {
    "discussion_id": "1475728135",
    "pr_number": 9703,
    "pr_file": "languages/c/ast/ast_c_build.ml",
    "created_at": "2024-02-02T08:33:31+00:00",
    "commented_code": "| Some ifdef -> (\n           match ifdef with\n           | Ifdef tok -> (\n-              logger#info \"skipping: %s\" (Tok.content_of_tok tok);\n+              Logs.info (fun m ->",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1475728135",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9703,
        "pr_file": "languages/c/ast/ast_c_build.ml",
        "discussion_id": "1475728135",
        "commented_code": "@@ -77,7 +77,8 @@ let rec ifdef_skipper xs f =\n       | Some ifdef -> (\n           match ifdef with\n           | Ifdef tok -> (\n-              logger#info \"skipping: %s\" (Tok.content_of_tok tok);\n+              Logs.info (fun m ->",
        "comment_created_at": "2024-02-02T08:33:31+00:00",
        "comment_author": "aryx",
        "comment_body": "Like I said in Slack, most of our logger#info should be converted in Logs.debug,\r\nbecause Logs.info can be seen by regular users when using --verbose.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1476673359",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9703,
        "pr_file": "languages/c/ast/ast_c_build.ml",
        "discussion_id": "1475728135",
        "commented_code": "@@ -77,7 +77,8 @@ let rec ifdef_skipper xs f =\n       | Some ifdef -> (\n           match ifdef with\n           | Ifdef tok -> (\n-              logger#info \"skipping: %s\" (Tok.content_of_tok tok);\n+              Logs.info (fun m ->",
        "comment_created_at": "2024-02-02T20:16:04+00:00",
        "comment_author": "mjambon",
        "comment_body": "I'll refine the recommendations in `Logs_.mli` as they become clearer to us.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1475730136",
    "pr_number": 9703,
    "pr_file": "languages/c/ast/ast_c_build.ml",
    "created_at": "2024-02-02T08:35:24+00:00",
    "commented_code": "A.Generic (tk, (l, (expr env e, args), r))\n   | IdSpecial (SizeOf, tk) -> A.IdSpecial (SizeOf, tk)\n   | ConstructedObject (_, _) ->\n-      logger#error \"BUG PARSING LOCAL DECL PROBABLY\";\n+      Logs.err (fun m -> m ~tags \"BUG PARSING LOCAL DECL PROBABLY\");",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1475730136",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9703,
        "pr_file": "languages/c/ast/ast_c_build.ml",
        "discussion_id": "1475730136",
        "commented_code": "@@ -627,7 +628,7 @@ and expr env e =\n       A.Generic (tk, (l, (expr env e, args), r))\n   | IdSpecial (SizeOf, tk) -> A.IdSpecial (SizeOf, tk)\n   | ConstructedObject (_, _) ->\n-      logger#error \"BUG PARSING LOCAL DECL PROBABLY\";\n+      Logs.err (fun m -> m ~tags \"BUG PARSING LOCAL DECL PROBABLY\");",
        "comment_created_at": "2024-02-02T08:35:24+00:00",
        "comment_author": "aryx",
        "comment_body": "This should be Logs.err, like you did, but then that means every semgrep users will now see those errors ...\r\n\r\nI think that we should configure logging so that any Logs.err or Logs.info with a ~tags should be masked and shown only when you use --debug really.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1476693803",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9703,
        "pr_file": "languages/c/ast/ast_c_build.ml",
        "discussion_id": "1475730136",
        "commented_code": "@@ -627,7 +628,7 @@ and expr env e =\n       A.Generic (tk, (l, (expr env e, args), r))\n   | IdSpecial (SizeOf, tk) -> A.IdSpecial (SizeOf, tk)\n   | ConstructedObject (_, _) ->\n-      logger#error \"BUG PARSING LOCAL DECL PROBABLY\";\n+      Logs.err (fun m -> m ~tags \"BUG PARSING LOCAL DECL PROBABLY\");",
        "comment_created_at": "2024-02-02T20:24:53+00:00",
        "comment_author": "mjambon",
        "comment_body": "My conclusion, as mentioned on Slack, is that no log message should be seen on stdout or stderr by the command-line user unless they turn it on (or run a server loop). In the end, these error-level messages are debugging helps just like all the other levels.",
        "pr_file_module": null
      },
      {
        "comment_id": "1485615595",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9703,
        "pr_file": "languages/c/ast/ast_c_build.ml",
        "discussion_id": "1475730136",
        "commented_code": "@@ -627,7 +628,7 @@ and expr env e =\n       A.Generic (tk, (l, (expr env e, args), r))\n   | IdSpecial (SizeOf, tk) -> A.IdSpecial (SizeOf, tk)\n   | ConstructedObject (_, _) ->\n-      logger#error \"BUG PARSING LOCAL DECL PROBABLY\";\n+      Logs.err (fun m -> m ~tags \"BUG PARSING LOCAL DECL PROBABLY\");",
        "comment_created_at": "2024-02-11T15:30:48+00:00",
        "comment_author": "aryx",
        "comment_body": "yes but then you should change this one to Logs.debug, because Logs.err will get displayed to the user I think.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1485613988",
    "pr_number": 9703,
    "pr_file": "src/core_cli/Core_CLI.ml",
    "created_at": "2024-02-11T15:20:34+00:00",
    "commented_code": "else if config.report_time then Core_profiling.mode := MTime\n   else Core_profiling.mode := MNo_info;\n \n+  Std_msg.setup ~highlight_setting:On ();\n   Logs_.setup_logging ?log_to_file:config.log_to_file\n-    ?require_one_of_these_tags:None ~force_color:true\n-    ~level:(if config.debug then Some Debug else Some Info)\n+    ?require_one_of_these_tags:None\n+    ~level:\n+      (if config.debug then Some Debug\n+         (* else if config.verbose then Some App *)\n+       else None)",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1485613988",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9703,
        "pr_file": "src/core_cli/Core_CLI.ml",
        "discussion_id": "1485613988",
        "commented_code": "@@ -680,9 +680,13 @@ let main_no_exn_handler (caps : Cap.all_caps) (sys_argv : string array) : unit =\n   else if config.report_time then Core_profiling.mode := MTime\n   else Core_profiling.mode := MNo_info;\n \n+  Std_msg.setup ~highlight_setting:On ();\n   Logs_.setup_logging ?log_to_file:config.log_to_file\n-    ?require_one_of_these_tags:None ~force_color:true\n-    ~level:(if config.debug then Some Debug else Some Info)\n+    ?require_one_of_these_tags:None\n+    ~level:\n+      (if config.debug then Some Debug\n+         (* else if config.verbose then Some App *)\n+       else None)",
        "comment_created_at": "2024-02-11T15:20:34+00:00",
        "comment_author": "aryx",
        "comment_body": "why we changed from Some Info to None now?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1486873615",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9703,
        "pr_file": "src/core_cli/Core_CLI.ml",
        "discussion_id": "1485613988",
        "commented_code": "@@ -680,9 +680,13 @@ let main_no_exn_handler (caps : Cap.all_caps) (sys_argv : string array) : unit =\n   else if config.report_time then Core_profiling.mode := MTime\n   else Core_profiling.mode := MNo_info;\n \n+  Std_msg.setup ~highlight_setting:On ();\n   Logs_.setup_logging ?log_to_file:config.log_to_file\n-    ?require_one_of_these_tags:None ~force_color:true\n-    ~level:(if config.debug then Some Debug else Some Info)\n+    ?require_one_of_these_tags:None\n+    ~level:\n+      (if config.debug then Some Debug\n+         (* else if config.verbose then Some App *)\n+       else None)",
        "comment_created_at": "2024-02-12T22:35:19+00:00",
        "comment_author": "mjambon",
        "comment_body": "Probably because semgrep-core suddenly started printing a lot of messages and the simplest way for me to deal with it was to suppress them. A sane thing to do would be to have a command-line option (and an environment variable) for choosing the log level. Right now, it's all or nothing. My comment `(* else if config.verbose then Some App *)` is a suggestion that we support `-verbose` like `semgrep` supports `--verbose`.\r\n\r\nBut this is semgrep-core... I don't know and don't care much about log levels. I'm fine with `-debug` and `LOG_TAGS=...` if necessary.\r\n\r\nI'll try to see what happens if we default to Info in a separate PR.",
        "pr_file_module": null
      },
      {
        "comment_id": "1486879654",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9703,
        "pr_file": "src/core_cli/Core_CLI.ml",
        "discussion_id": "1485613988",
        "commented_code": "@@ -680,9 +680,13 @@ let main_no_exn_handler (caps : Cap.all_caps) (sys_argv : string array) : unit =\n   else if config.report_time then Core_profiling.mode := MTime\n   else Core_profiling.mode := MNo_info;\n \n+  Std_msg.setup ~highlight_setting:On ();\n   Logs_.setup_logging ?log_to_file:config.log_to_file\n-    ?require_one_of_these_tags:None ~force_color:true\n-    ~level:(if config.debug then Some Debug else Some Info)\n+    ?require_one_of_these_tags:None\n+    ~level:\n+      (if config.debug then Some Debug\n+         (* else if config.verbose then Some App *)\n+       else None)",
        "comment_created_at": "2024-02-12T22:40:51+00:00",
        "comment_author": "mjambon",
        "comment_body": "Yes, with Info, we're getting a bunch of log messages at all levels, including ERROR. See a sample semgrep-core run below where the log level is Info:\r\n\r\n```\r\n~/semgrep $ semgrep-core -l py -e x cli/tests/ \r\n[00.00][INFO](cli, Core_CLI): Executed as: semgrep-core -l py -e x cli/tests/\r\n[00.00][INFO](cli, Core_CLI): Version: semgrep-core version: 1.60.1\r\n[00.05][WARNING](Core_command): -fast does not work with -f/-e, or you need also -json\r\ncli/tests/e2e-pro/targets/autofix/autofix.py:5\r\n   inputs[x] = 1\r\ncli/tests/e2e-pro/targets/autofix/autofix.py:6\r\n   if inputs[x + 1] == True:\r\ncli/tests/e2e-pro/targets/autofix/python-assert-statement.py:7\r\n x = \"abc\"\r\ncli/tests/e2e-pro/targets/autofix/python-ranges.py:8\r\n foo(x[1])\r\ncli/tests/e2e-pro/targets/autofix/python-ranges.py:9\r\n foo(x[1, 2])\r\n[00.10][ERROR](Pfff_or_tree_sitter): exn (Parsing_error.Syntax_error (cli/tests/e2e-pro/targets/bad/invalid_python.py:1:10 \"\\n    \")) with Pfff parser\r\n[00.10][ERROR](Parse_tree_sitter_helpers): Partial errors returned by Tree-sitter parser\r\nnode type: ERROR\r\nchildren: [\r\n  \"def\"\r\n  identifier\r\n  parameters\r\n  identifier\r\n  \"=\"\r\n  identifier\r\n  \".\"\r\n  identifier\r\n  \"(\"\r\n  string\r\n  \")\"\r\n]\r\nUnrecognized construct\r\n[00.10][ERROR](Pfff_or_tree_sitter): partial errors (1) with TreeSitter parser\r\nWARNING: fail to fully parse cli/tests/e2e-pro/targets/bad/invalid_python.py\r\ncli/tests/e2e-pro/targets/basic/stupid.py:8\r\n     x == x\r\ncli/tests/e2e-pro/targets/basic/stupid.py:8\r\n     x == x\r\ncli/tests/e2e-pro/targets/basic/stupid.py:12\r\n assertTrue(x == x)\r\ncli/tests/e2e-pro/targets/basic/stupid.py:12\r\n assertTrue(x == x)\r\ncli/tests/e2e-pro/targets/ci/foo.py:9\r\n     x == x  # nosemgrep\r\ncli/tests/e2e-pro/targets/ci/foo.py:9\r\n     x == x  # nosemgrep\r\ncli/tests/e2e-pro/targets/ci/foo.py:15\r\n     x == 5\r\ncli/tests/e2e-pro/targets/match_based_id/before/join.py:2\r\n x = z+z\r\ncli/tests/e2e-pro/targets/match_based_id/before/join.py:3\r\n if z == x:\r\ncli/tests/e2e-pro/targets/message_interpolation/pattern_either_basic.py:2\r\n     print(x)\r\ncli/tests/e2e-pro/targets/message_interpolation/propagated_constant.py:3\r\n        x = 0\r\ncli/tests/e2e-pro/targets/message_interpolation/propagated_constant.py:4\r\n        return x == 0\r\ncli/tests/e2e-pro/targets/multiline/stupid.py:11\r\n x = \"\"\"\r\ncli/tests/e2e-pro/targets/taint/taint.py:2\r\n     x = 'test string format {}'.format('foo')\r\ncli/tests/e2e-pro/targets/version-constraints/x.py:1\r\n x = \"hello\"\r\ncli/tests/e2e-pro/test_api.py:48\r\n     x = subprocess.run(\r\ncli/tests/e2e-pro/test_api.py:58\r\n     assert x.stdout == \"\"\r\ncli/tests/e2e-pro/test_api.py:59\r\n     assert x.stderr == \"\"\r\ncli/tests/e2e/targets/autofix/autofix.py:5\r\n   inputs[x] = 1\r\ncli/tests/e2e/targets/autofix/autofix.py:6\r\n   if inputs[x + 1] == True:\r\ncli/tests/e2e/targets/autofix/python-assert-statement.py:7\r\n x = \"abc\"\r\ncli/tests/e2e/targets/autofix/python-ranges.py:8\r\n foo(x[1])\r\ncli/tests/e2e/targets/autofix/python-ranges.py:9\r\n foo(x[1, 2])\r\n[00.21][ERROR](Pfff_or_tree_sitter): exn (Parsing_error.Syntax_error (cli/tests/e2e/targets/bad/invalid_python.py:1:10 \"\\n    \")) with Pfff parser\r\n[00.21][ERROR](Parse_tree_sitter_helpers): Partial errors returned by Tree-sitter parser\r\nnode type: ERROR\r\nchildren: [\r\n  \"def\"\r\n  identifier\r\n  parameters\r\n  identifier\r\n  \"=\"\r\n  identifier\r\n  \".\"\r\n  identifier\r\n  \"(\"\r\n  string\r\n  \")\"\r\n]\r\nUnrecognized construct\r\n[00.21][ERROR](Pfff_or_tree_sitter): partial errors (1) with TreeSitter parser\r\nWARNING: fail to fully parse cli/tests/e2e/targets/bad/invalid_python.py\r\ncli/tests/e2e/targets/basic/stupid.py:8\r\n     x == x\r\ncli/tests/e2e/targets/basic/stupid.py:8\r\n     x == x\r\ncli/tests/e2e/targets/basic/stupid.py:12\r\n assertTrue(x == x)\r\ncli/tests/e2e/targets/basic/stupid.py:12\r\n assertTrue(x == x)\r\ncli/tests/e2e/targets/ci/foo.py:9\r\n     x == x  # nosemgrep\r\ncli/tests/e2e/targets/ci/foo.py:9\r\n     x == x  # nosemgrep\r\ncli/tests/e2e/targets/ci/foo.py:15\r\n     x == 5\r\ncli/tests/e2e/targets/match_based_id/before/join.py:2\r\n x = z+z\r\ncli/tests/e2e/targets/match_based_id/before/join.py:3\r\n if z == x:\r\ncli/tests/e2e/targets/message_interpolation/pattern_either_basic.py:2\r\n     print(x)\r\ncli/tests/e2e/targets/message_interpolation/propagated_constant.py:3\r\n        x = 0\r\ncli/tests/e2e/targets/message_interpolation/propagated_constant.py:4\r\n        return x == 0\r\ncli/tests/e2e/targets/multiline/stupid.py:11\r\n x = \"\"\"\r\ncli/tests/e2e/targets/taint/taint.py:2\r\n     x = 'test string format {}'.format('foo')\r\ncli/tests/e2e/targets/version-constraints/x.py:1\r\n x = \"hello\"\r\n[00.32][ERROR](AST_to_IL): cli/tests/fixtures.py:35:8: Cannot translate Semgrep construct(s) into IL\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1488586268",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9703,
        "pr_file": "src/core_cli/Core_CLI.ml",
        "discussion_id": "1485613988",
        "commented_code": "@@ -680,9 +680,13 @@ let main_no_exn_handler (caps : Cap.all_caps) (sys_argv : string array) : unit =\n   else if config.report_time then Core_profiling.mode := MTime\n   else Core_profiling.mode := MNo_info;\n \n+  Std_msg.setup ~highlight_setting:On ();\n   Logs_.setup_logging ?log_to_file:config.log_to_file\n-    ?require_one_of_these_tags:None ~force_color:true\n-    ~level:(if config.debug then Some Debug else Some Info)\n+    ?require_one_of_these_tags:None\n+    ~level:\n+      (if config.debug then Some Debug\n+         (* else if config.verbose then Some App *)\n+       else None)",
        "comment_created_at": "2024-02-13T21:14:53+00:00",
        "comment_author": "mjambon",
        "comment_body": "done: https://github.com/semgrep/semgrep/pull/9757",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1435161054",
    "pr_number": 9497,
    "pr_file": "src/matching/Generic_vs_generic.ml",
    "created_at": "2023-12-22T15:29:16+00:00",
    "commented_code": "tin.config.commutative_boolop\n     | G.Eq\n     | G.NotEq ->\n-        tin.config.commutative_compop\n+        if tin.config.commutative_compop then\n+          logger#error",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1435161054",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9497,
        "pr_file": "src/matching/Generic_vs_generic.ml",
        "discussion_id": "1435161054",
        "commented_code": "@@ -1797,7 +1797,11 @@ and m_call_op aop toka aargs bop tokb bargs tin =\n         tin.config.commutative_boolop\n     | G.Eq\n     | G.NotEq ->\n-        tin.config.commutative_compop\n+        if tin.config.commutative_compop then\n+          logger#error",
        "comment_created_at": "2023-12-22T15:29:16+00:00",
        "comment_author": "IagoAbal",
        "comment_body": "Note that `logger#error` will likely not be seen by any user, so it isn't very useful. You would need to report this as an error that is then passed to the CLI, or just check for this in the CLI.",
        "pr_file_module": null
      },
      {
        "comment_id": "1435162462",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9497,
        "pr_file": "src/matching/Generic_vs_generic.ml",
        "discussion_id": "1435161054",
        "commented_code": "@@ -1797,7 +1797,11 @@ and m_call_op aop toka aargs bop tokb bargs tin =\n         tin.config.commutative_boolop\n     | G.Eq\n     | G.NotEq ->\n-        tin.config.commutative_compop\n+        if tin.config.commutative_compop then\n+          logger#error",
        "comment_created_at": "2023-12-22T15:30:46+00:00",
        "comment_author": "IagoAbal",
        "comment_body": "It could be fine to just leave the note in the changelog.",
        "pr_file_module": null
      }
    ]
  }
]