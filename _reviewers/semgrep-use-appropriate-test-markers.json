[
  {
    "discussion_id": "1507635408",
    "pr_number": 9849,
    "pr_file": "cli/tests/unit/test_clean_project_url.py",
    "created_at": "2024-02-29T14:02:40+00:00",
    "commented_code": "+import pytest\n+\n+from semgrep.git import clean_project_url\n+\n+\n+@pytest.mark.quick\n+@pytest.mark.no_semgrep_cli\n+@pytest.mark.osemfail",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1507635408",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9849,
        "pr_file": "cli/tests/unit/test_clean_project_url.py",
        "discussion_id": "1507635408",
        "commented_code": "@@ -0,0 +1,15 @@\n+import pytest\n+\n+from semgrep.git import clean_project_url\n+\n+\n+@pytest.mark.quick\n+@pytest.mark.no_semgrep_cli\n+@pytest.mark.osemfail",
        "comment_created_at": "2024-02-29T14:02:40+00:00",
        "comment_author": "aryx",
        "comment_body": "I think you can remove those osemfail and no_semgrep_cli annotations; they are relevant just for the tests/e2e/ tests I think.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1431040709",
    "pr_number": 9479,
    "pr_file": "cli/src/semgrep/metrics.py",
    "created_at": "2023-12-19T07:57:48+00:00",
    "commented_code": "bytesScanned=mock_int(_rule_bytes_scanned[rule.id2]),\n                 )\n                 for rule in rules\n+                # We consider only rules with match times and bytes scanned\n+                # greater than 0 to avoid making the metrics too bloated.\n+                if _rule_match_times[rule.id2] > 0.0",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1431040709",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9479,
        "pr_file": "cli/src/semgrep/metrics.py",
        "discussion_id": "1431040709",
        "commented_code": "@@ -249,6 +249,10 @@ def add_rules(self, rules: Sequence[Rule], profile: Optional[out.Profile]) -> No\n                     bytesScanned=mock_int(_rule_bytes_scanned[rule.id2]),\n                 )\n                 for rule in rules\n+                # We consider only rules with match times and bytes scanned\n+                # greater than 0 to avoid making the metrics too bloated.\n+                if _rule_match_times[rule.id2] > 0.0",
        "comment_created_at": "2023-12-19T07:57:48+00:00",
        "comment_author": "aryx",
        "comment_body": "maybe would be good to have some tests for that (the time will differ between runs, but we have some code\r\nin pytest to mask times.\r\nThat way we can also mark this tests as 'osemfail' so we know we need to port it.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1431613559",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9479,
        "pr_file": "cli/src/semgrep/metrics.py",
        "discussion_id": "1431040709",
        "commented_code": "@@ -249,6 +249,10 @@ def add_rules(self, rules: Sequence[Rule], profile: Optional[out.Profile]) -> No\n                     bytesScanned=mock_int(_rule_bytes_scanned[rule.id2]),\n                 )\n                 for rule in rules\n+                # We consider only rules with match times and bytes scanned\n+                # greater than 0 to avoid making the metrics too bloated.\n+                if _rule_match_times[rule.id2] > 0.0",
        "comment_created_at": "2023-12-19T15:57:49+00:00",
        "comment_author": "amchiclet",
        "comment_body": "Good idea. I'll try to add that change before merging.",
        "pr_file_module": null
      },
      {
        "comment_id": "1431615302",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9479,
        "pr_file": "cli/src/semgrep/metrics.py",
        "discussion_id": "1431040709",
        "commented_code": "@@ -249,6 +249,10 @@ def add_rules(self, rules: Sequence[Rule], profile: Optional[out.Profile]) -> No\n                     bytesScanned=mock_int(_rule_bytes_scanned[rule.id2]),\n                 )\n                 for rule in rules\n+                # We consider only rules with match times and bytes scanned\n+                # greater than 0 to avoid making the metrics too bloated.\n+                if _rule_match_times[rule.id2] > 0.0",
        "comment_created_at": "2023-12-19T15:59:07+00:00",
        "comment_author": "amchiclet",
        "comment_body": "But first, I probably need to figure out how to trigger this code path in pysemgrep.",
        "pr_file_module": null
      },
      {
        "comment_id": "1431890637",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9479,
        "pr_file": "cli/src/semgrep/metrics.py",
        "discussion_id": "1431040709",
        "commented_code": "@@ -249,6 +249,10 @@ def add_rules(self, rules: Sequence[Rule], profile: Optional[out.Profile]) -> No\n                     bytesScanned=mock_int(_rule_bytes_scanned[rule.id2]),\n                 )\n                 for rule in rules\n+                # We consider only rules with match times and bytes scanned\n+                # greater than 0 to avoid making the metrics too bloated.\n+                if _rule_match_times[rule.id2] > 0.0",
        "comment_created_at": "2023-12-19T20:07:57+00:00",
        "comment_author": "amchiclet",
        "comment_body": "Done. I was able to piggyback on one of the tests that test the metrics payload. Waiting for CI to merge.",
        "pr_file_module": null
      }
    ]
  }
]