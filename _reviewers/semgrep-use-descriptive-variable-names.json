[
  {
    "discussion_id": "1537983133",
    "pr_number": 9872,
    "pr_file": "cli/src/semgrep/engine.py",
    "created_at": "2024-03-25T17:41:34+00:00",
    "commented_code": "@classmethod\n     def decide_engine_type(\n         cls,\n-        requested_engine: Optional[\"EngineType\"] = None,\n+        logged_in: bool = False,\n+        engine_flag: Optional[\"EngineType\"] = None,\n+        run_secrets: bool = False,\n+        interfile_diff_scan_enabled: bool = False,\n+        # ci-only args\n         scan_handler: Optional[ScanHandler] = None,\n         git_meta: Optional[GitMeta] = None,\n-        run_secrets: bool = False,\n-        enable_pro_diff_scan: bool = False,\n         supply_chain_only: bool = False,\n     ) -> \"EngineType\":\n         \"\"\"Select which Semgrep engine type to use if none is explicitly requested.\n \n         Considers settings from Semgrep Cloud Platform and version control state.\n         \"\"\"\n-        # Change default to pro-engine intrafile if secrets was requested.\n-        # Secrets is built into pro-engine, but any pro-setting should work.\n-        if (\n-            not (scan_handler and scan_handler.deepsemgrep)\n-            and requested_engine is None\n-            and run_secrets\n-        ):\n-            requested_engine = cls.PRO_LANG\n-        elif run_secrets and requested_engine is cls.OSS:\n-            # Should be impossible if the CLI gates impossible arguement combinations.\n-            raise SemgrepError(\"Semgrep Secrets is not part of the open source engine\")\n+        interfile_is_requested_via_app = scan_handler and scan_handler.deepsemgrep\n \n-        if git_meta and scan_handler:\n-            if scan_handler.deepsemgrep and requested_engine is None:\n+        requested_engine = engine_flag",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1537983133",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9872,
        "pr_file": "cli/src/semgrep/engine.py",
        "discussion_id": "1537983133",
        "commented_code": "@@ -33,52 +33,54 @@ class EngineType(Enum):\n     @classmethod\n     def decide_engine_type(\n         cls,\n-        requested_engine: Optional[\"EngineType\"] = None,\n+        logged_in: bool = False,\n+        engine_flag: Optional[\"EngineType\"] = None,\n+        run_secrets: bool = False,\n+        interfile_diff_scan_enabled: bool = False,\n+        # ci-only args\n         scan_handler: Optional[ScanHandler] = None,\n         git_meta: Optional[GitMeta] = None,\n-        run_secrets: bool = False,\n-        enable_pro_diff_scan: bool = False,\n         supply_chain_only: bool = False,\n     ) -> \"EngineType\":\n         \"\"\"Select which Semgrep engine type to use if none is explicitly requested.\n \n         Considers settings from Semgrep Cloud Platform and version control state.\n         \"\"\"\n-        # Change default to pro-engine intrafile if secrets was requested.\n-        # Secrets is built into pro-engine, but any pro-setting should work.\n-        if (\n-            not (scan_handler and scan_handler.deepsemgrep)\n-            and requested_engine is None\n-            and run_secrets\n-        ):\n-            requested_engine = cls.PRO_LANG\n-        elif run_secrets and requested_engine is cls.OSS:\n-            # Should be impossible if the CLI gates impossible arguement combinations.\n-            raise SemgrepError(\"Semgrep Secrets is not part of the open source engine\")\n+        interfile_is_requested_via_app = scan_handler and scan_handler.deepsemgrep\n \n-        if git_meta and scan_handler:\n-            if scan_handler.deepsemgrep and requested_engine is None:\n+        requested_engine = engine_flag",
        "comment_created_at": "2024-03-25T17:41:34+00:00",
        "comment_author": "IagoAbal",
        "comment_body": "Why not just rename either the parameter of the variable ?",
        "pr_file_module": null
      },
      {
        "comment_id": "1537984852",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9872,
        "pr_file": "cli/src/semgrep/engine.py",
        "discussion_id": "1537983133",
        "commented_code": "@@ -33,52 +33,54 @@ class EngineType(Enum):\n     @classmethod\n     def decide_engine_type(\n         cls,\n-        requested_engine: Optional[\"EngineType\"] = None,\n+        logged_in: bool = False,\n+        engine_flag: Optional[\"EngineType\"] = None,\n+        run_secrets: bool = False,\n+        interfile_diff_scan_enabled: bool = False,\n+        # ci-only args\n         scan_handler: Optional[ScanHandler] = None,\n         git_meta: Optional[GitMeta] = None,\n-        run_secrets: bool = False,\n-        enable_pro_diff_scan: bool = False,\n         supply_chain_only: bool = False,\n     ) -> \"EngineType\":\n         \"\"\"Select which Semgrep engine type to use if none is explicitly requested.\n \n         Considers settings from Semgrep Cloud Platform and version control state.\n         \"\"\"\n-        # Change default to pro-engine intrafile if secrets was requested.\n-        # Secrets is built into pro-engine, but any pro-setting should work.\n-        if (\n-            not (scan_handler and scan_handler.deepsemgrep)\n-            and requested_engine is None\n-            and run_secrets\n-        ):\n-            requested_engine = cls.PRO_LANG\n-        elif run_secrets and requested_engine is cls.OSS:\n-            # Should be impossible if the CLI gates impossible arguement combinations.\n-            raise SemgrepError(\"Semgrep Secrets is not part of the open source engine\")\n+        interfile_is_requested_via_app = scan_handler and scan_handler.deepsemgrep\n \n-        if git_meta and scan_handler:\n-            if scan_handler.deepsemgrep and requested_engine is None:\n+        requested_engine = engine_flag",
        "comment_created_at": "2024-03-25T17:42:39+00:00",
        "comment_author": "IagoAbal",
        "comment_body": "Oh I see now.",
        "pr_file_module": null
      },
      {
        "comment_id": "1538003392",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9872,
        "pr_file": "cli/src/semgrep/engine.py",
        "discussion_id": "1537983133",
        "commented_code": "@@ -33,52 +33,54 @@ class EngineType(Enum):\n     @classmethod\n     def decide_engine_type(\n         cls,\n-        requested_engine: Optional[\"EngineType\"] = None,\n+        logged_in: bool = False,\n+        engine_flag: Optional[\"EngineType\"] = None,\n+        run_secrets: bool = False,\n+        interfile_diff_scan_enabled: bool = False,\n+        # ci-only args\n         scan_handler: Optional[ScanHandler] = None,\n         git_meta: Optional[GitMeta] = None,\n-        run_secrets: bool = False,\n-        enable_pro_diff_scan: bool = False,\n         supply_chain_only: bool = False,\n     ) -> \"EngineType\":\n         \"\"\"Select which Semgrep engine type to use if none is explicitly requested.\n \n         Considers settings from Semgrep Cloud Platform and version control state.\n         \"\"\"\n-        # Change default to pro-engine intrafile if secrets was requested.\n-        # Secrets is built into pro-engine, but any pro-setting should work.\n-        if (\n-            not (scan_handler and scan_handler.deepsemgrep)\n-            and requested_engine is None\n-            and run_secrets\n-        ):\n-            requested_engine = cls.PRO_LANG\n-        elif run_secrets and requested_engine is cls.OSS:\n-            # Should be impossible if the CLI gates impossible arguement combinations.\n-            raise SemgrepError(\"Semgrep Secrets is not part of the open source engine\")\n+        interfile_is_requested_via_app = scan_handler and scan_handler.deepsemgrep\n \n-        if git_meta and scan_handler:\n-            if scan_handler.deepsemgrep and requested_engine is None:\n+        requested_engine = engine_flag",
        "comment_created_at": "2024-03-25T17:51:17+00:00",
        "comment_author": "IagoAbal",
        "comment_body": "Maybe it would be more clear this way:\r\n\r\n```python\r\nif engine_flag is None:\r\n  ...\r\nelse:\r\n  requested_engine = engine_flag or (\r\n    cls.PRO_INTRAFILE\r\n    if is_logged_in_ci_scan\r\n    else cls.OSS\r\n  )\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1538007866",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9872,
        "pr_file": "cli/src/semgrep/engine.py",
        "discussion_id": "1537983133",
        "commented_code": "@@ -33,52 +33,54 @@ class EngineType(Enum):\n     @classmethod\n     def decide_engine_type(\n         cls,\n-        requested_engine: Optional[\"EngineType\"] = None,\n+        logged_in: bool = False,\n+        engine_flag: Optional[\"EngineType\"] = None,\n+        run_secrets: bool = False,\n+        interfile_diff_scan_enabled: bool = False,\n+        # ci-only args\n         scan_handler: Optional[ScanHandler] = None,\n         git_meta: Optional[GitMeta] = None,\n-        run_secrets: bool = False,\n-        enable_pro_diff_scan: bool = False,\n         supply_chain_only: bool = False,\n     ) -> \"EngineType\":\n         \"\"\"Select which Semgrep engine type to use if none is explicitly requested.\n \n         Considers settings from Semgrep Cloud Platform and version control state.\n         \"\"\"\n-        # Change default to pro-engine intrafile if secrets was requested.\n-        # Secrets is built into pro-engine, but any pro-setting should work.\n-        if (\n-            not (scan_handler and scan_handler.deepsemgrep)\n-            and requested_engine is None\n-            and run_secrets\n-        ):\n-            requested_engine = cls.PRO_LANG\n-        elif run_secrets and requested_engine is cls.OSS:\n-            # Should be impossible if the CLI gates impossible arguement combinations.\n-            raise SemgrepError(\"Semgrep Secrets is not part of the open source engine\")\n+        interfile_is_requested_via_app = scan_handler and scan_handler.deepsemgrep\n \n-        if git_meta and scan_handler:\n-            if scan_handler.deepsemgrep and requested_engine is None:\n+        requested_engine = engine_flag",
        "comment_created_at": "2024-03-25T17:52:45+00:00",
        "comment_author": "IagoAbal",
        "comment_body": "Actually I would even put more of the subsequent stuff under the `else:` because then it's more clear that it only applies when `engine_flag` is set.",
        "pr_file_module": null
      },
      {
        "comment_id": "1538372211",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9872,
        "pr_file": "cli/src/semgrep/engine.py",
        "discussion_id": "1537983133",
        "commented_code": "@@ -33,52 +33,54 @@ class EngineType(Enum):\n     @classmethod\n     def decide_engine_type(\n         cls,\n-        requested_engine: Optional[\"EngineType\"] = None,\n+        logged_in: bool = False,\n+        engine_flag: Optional[\"EngineType\"] = None,\n+        run_secrets: bool = False,\n+        interfile_diff_scan_enabled: bool = False,\n+        # ci-only args\n         scan_handler: Optional[ScanHandler] = None,\n         git_meta: Optional[GitMeta] = None,\n-        run_secrets: bool = False,\n-        enable_pro_diff_scan: bool = False,\n         supply_chain_only: bool = False,\n     ) -> \"EngineType\":\n         \"\"\"Select which Semgrep engine type to use if none is explicitly requested.\n \n         Considers settings from Semgrep Cloud Platform and version control state.\n         \"\"\"\n-        # Change default to pro-engine intrafile if secrets was requested.\n-        # Secrets is built into pro-engine, but any pro-setting should work.\n-        if (\n-            not (scan_handler and scan_handler.deepsemgrep)\n-            and requested_engine is None\n-            and run_secrets\n-        ):\n-            requested_engine = cls.PRO_LANG\n-        elif run_secrets and requested_engine is cls.OSS:\n-            # Should be impossible if the CLI gates impossible arguement combinations.\n-            raise SemgrepError(\"Semgrep Secrets is not part of the open source engine\")\n+        interfile_is_requested_via_app = scan_handler and scan_handler.deepsemgrep\n \n-        if git_meta and scan_handler:\n-            if scan_handler.deepsemgrep and requested_engine is None:\n+        requested_engine = engine_flag",
        "comment_created_at": "2024-03-25T23:44:29+00:00",
        "comment_author": "emjin",
        "comment_body": "Ok, how do you feel about it now?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1498388206",
    "pr_number": 9786,
    "pr_file": "cli/src/semgrep/commands/ci.py",
    "created_at": "2024-02-21T22:26:00+00:00",
    "commented_code": "\"  Semgrep Cloud Platform is still processing the results of the scan, they will be available soon:\"\n             )\n \n+        ref_if_deployment_name = f\"&ref={metadata.branch}\" if metadata.branch else \"\"",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1498388206",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9786,
        "pr_file": "cli/src/semgrep/commands/ci.py",
        "discussion_id": "1498388206",
        "commented_code": "@@ -615,8 +615,9 @@ def ci(\n                 \"  Semgrep Cloud Platform is still processing the results of the scan, they will be available soon:\"\n             )\n \n+        ref_if_deployment_name = f\"&ref={metadata.branch}\" if metadata.branch else \"\"",
        "comment_created_at": "2024-02-21T22:26:00+00:00",
        "comment_author": "chmccreery",
        "comment_body": "nit: what does deployment_name have to do with this? Did you mean more like `ref_if_available`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1447844765",
    "pr_number": 9544,
    "pr_file": "cli/src/semgrep/run_scan.py",
    "created_at": "2024-01-10T19:19:48+00:00",
    "commented_code": "def list_targets_and_exit(target_manager: TargetManager, product: out.Product) -> None:\n     targets = target_manager.get_files_for_language(None, product)\n     for path in sorted(targets.kept):\n-        print(f\"+ {path}\")\n+        print(f\"SEL {path}\")",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1447844765",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9544,
        "pr_file": "cli/src/semgrep/run_scan.py",
        "discussion_id": "1447844765",
        "commented_code": "@@ -312,9 +312,9 @@ def run_rules(\n def list_targets_and_exit(target_manager: TargetManager, product: out.Product) -> None:\n     targets = target_manager.get_files_for_language(None, product)\n     for path in sorted(targets.kept):\n-        print(f\"+ {path}\")\n+        print(f\"SEL {path}\")",
        "comment_created_at": "2024-01-10T19:19:48+00:00",
        "comment_author": "ajbt200128",
        "comment_body": "nit: SEL + IGN feels less clear to me  in meaning as a developer than + or -. Maybe we should just say \"selected\" and \"ignored\", or keep the + and -",
        "pr_file_module": null
      },
      {
        "comment_id": "1448026918",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9544,
        "pr_file": "cli/src/semgrep/run_scan.py",
        "discussion_id": "1447844765",
        "commented_code": "@@ -312,9 +312,9 @@ def run_rules(\n def list_targets_and_exit(target_manager: TargetManager, product: out.Product) -> None:\n     targets = target_manager.get_files_for_language(None, product)\n     for path in sorted(targets.kept):\n-        print(f\"+ {path}\")\n+        print(f\"SEL {path}\")",
        "comment_created_at": "2024-01-10T21:51:37+00:00",
        "comment_author": "mjambon",
        "comment_body": "Sure. `+` and `-` make it hard to read the diffs that add their own layer of `+` and `-`.",
        "pr_file_module": null
      }
    ]
  }
]