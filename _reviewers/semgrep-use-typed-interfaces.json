[
  {
    "discussion_id": "1589452257",
    "pr_number": 10180,
    "pr_file": "cli/src/semgrep/formatter/osemgrep_sarif.py",
    "created_at": "2024-05-03T16:50:32+00:00",
    "commented_code": "engine_label = \"PRO\" if is_pro else \"OSS\"\n \n+            show_dataflow_traces = extra[\"dataflow_traces\"]",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1589452257",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10180,
        "pr_file": "cli/src/semgrep/formatter/osemgrep_sarif.py",
        "discussion_id": "1589452257",
        "commented_code": "@@ -78,6 +78,8 @@ def _osemgrep_format(\n \n             engine_label = \"PRO\" if is_pro else \"OSS\"\n \n+            show_dataflow_traces = extra[\"dataflow_traces\"]",
        "comment_created_at": "2024-05-03T16:50:32+00:00",
        "comment_author": "aryx",
        "comment_body": "please use the cli_output_extra field which is typed, so you can access it via cli_output_extra.dataflow_traces so mypy can detect typo.",
        "pr_file_module": null
      },
      {
        "comment_id": "1591402032",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10180,
        "pr_file": "cli/src/semgrep/formatter/osemgrep_sarif.py",
        "discussion_id": "1589452257",
        "commented_code": "@@ -78,6 +78,8 @@ def _osemgrep_format(\n \n             engine_label = \"PRO\" if is_pro else \"OSS\"\n \n+            show_dataflow_traces = extra[\"dataflow_traces\"]",
        "comment_created_at": "2024-05-06T18:30:16+00:00",
        "comment_author": "amchiclet",
        "comment_body": "You mean to add it to the atd interface first, then make that change here. Is that correct?",
        "pr_file_module": null
      },
      {
        "comment_id": "1593011274",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10180,
        "pr_file": "cli/src/semgrep/formatter/osemgrep_sarif.py",
        "discussion_id": "1589452257",
        "commented_code": "@@ -78,6 +78,8 @@ def _osemgrep_format(\n \n             engine_label = \"PRO\" if is_pro else \"OSS\"\n \n+            show_dataflow_traces = extra[\"dataflow_traces\"]",
        "comment_created_at": "2024-05-07T20:10:06+00:00",
        "comment_author": "amchiclet",
        "comment_body": "I will try to get this PR in.\r\n\r\nIf you meant to also update the interface and use cli_output_extra, I'll do that as a follow up task.",
        "pr_file_module": null
      },
      {
        "comment_id": "1596702486",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10180,
        "pr_file": "cli/src/semgrep/formatter/osemgrep_sarif.py",
        "discussion_id": "1589452257",
        "commented_code": "@@ -78,6 +78,8 @@ def _osemgrep_format(\n \n             engine_label = \"PRO\" if is_pro else \"OSS\"\n \n+            show_dataflow_traces = extra[\"dataflow_traces\"]",
        "comment_created_at": "2024-05-10T12:39:17+00:00",
        "comment_author": "aryx",
        "comment_body": "I mean that in python we should avoid to use code that can't be typed by mypy.\r\nIf you use dict[\"some_field\"], there is no way mypy can know whether this \"some_field\" is valid.\r\nThis is why we gradualy changed the python code to use the typed interface in semgrep_output_v1.py (generated from semgrep_output_v1.atd).\r\nWe migrated lots of the python code to use more types, but there's still a few places where we don't.\r\nBut in that case, we have a dataflow_traces field defined in the cli_match_extra so you should use it.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1488302136",
    "pr_number": 9750,
    "pr_file": "cli/src/semgrep/meta.py",
    "created_at": "2024-02-13T17:29:25+00:00",
    "commented_code": "# REQUIRED for semgrep-app backend\n             repository=self.repo_name,\n             # OPTIONAL for semgrep-app backend\n+            repo_display_name=self.repo_display_name,",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1488302136",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9750,
        "pr_file": "cli/src/semgrep/meta.py",
        "discussion_id": "1488302136",
        "commented_code": "@@ -203,6 +208,7 @@ def to_project_metadata(self) -> out.ProjectMetadata:\n             # REQUIRED for semgrep-app backend\n             repository=self.repo_name,\n             # OPTIONAL for semgrep-app backend\n+            repo_display_name=self.repo_display_name,",
        "comment_created_at": "2024-02-13T17:29:25+00:00",
        "comment_author": "chmccreery",
        "comment_body": "nit: I think this should move up a line and be considered \"required\" if we are going to have it fall back on self.repo_name. Alternatively, you could have it not do that, and be of type `str | None` and leave it here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1470719748",
    "pr_number": 9682,
    "pr_file": "cli/src/semgrep/app/scans.py",
    "created_at": "2024-01-30T07:48:26+00:00",
    "commented_code": "dependency_counts = {k: len(v) for k, v in lockfile_dependencies.items()}\n \n+        # NOTE: This mirrors the logic in metrics.py to show the number of\n+        #  findings by product for SCP customers. See PA-3312\n+        #  We should consider refactoring this logic into a shared function\n+        #  in a future PR for metric and behavioral consistency.\n+        #  An open question remains on whether we should be including the number\n+        #  of ignored findings in this count.\n+\n+        findings_by_product: Dict[str, int] = Counter()\n+        for r, f in matches_by_rule.items():\n+            # NOTE: For parity with metrics.py, we are using the human-readable product name,\n+            #  (i.e. code) and falling back to the internal json string (i.e. sast) if we\n+            #  somehow drift out of sync with the product enum.\n+            name = USER_FRIENDLY_PRODUCT_NAMES.get(r.product, r.product.to_json())",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1470719748",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9682,
        "pr_file": "cli/src/semgrep/app/scans.py",
        "discussion_id": "1470719748",
        "commented_code": "@@ -338,6 +339,21 @@ def report_findings(\n \n         dependency_counts = {k: len(v) for k, v in lockfile_dependencies.items()}\n \n+        # NOTE: This mirrors the logic in metrics.py to show the number of\n+        #  findings by product for SCP customers. See PA-3312\n+        #  We should consider refactoring this logic into a shared function\n+        #  in a future PR for metric and behavioral consistency.\n+        #  An open question remains on whether we should be including the number\n+        #  of ignored findings in this count.\n+\n+        findings_by_product: Dict[str, int] = Counter()\n+        for r, f in matches_by_rule.items():\n+            # NOTE: For parity with metrics.py, we are using the human-readable product name,\n+            #  (i.e. code) and falling back to the internal json string (i.e. sast) if we\n+            #  somehow drift out of sync with the product enum.\n+            name = USER_FRIENDLY_PRODUCT_NAMES.get(r.product, r.product.to_json())",
        "comment_created_at": "2024-01-30T07:48:26+00:00",
        "comment_author": "amchiclet",
        "comment_body": "optional: maybe `str(r.product.to_json())`, so there's no need to worry about the type of `name` being String or Any.\r\n\r\nAlternatively for the next line, since there's only string conversion and no formatting, I'm wondering whether `str(name)` is clearer than `f\"{name}\"` or not.\r\n\r\nFeel free to ignore and resolve. I feel like you always have a good reason to do things, so I'll assume I'm missing something.",
        "pr_file_module": null
      },
      {
        "comment_id": "1471635549",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9682,
        "pr_file": "cli/src/semgrep/app/scans.py",
        "discussion_id": "1470719748",
        "commented_code": "@@ -338,6 +339,21 @@ def report_findings(\n \n         dependency_counts = {k: len(v) for k, v in lockfile_dependencies.items()}\n \n+        # NOTE: This mirrors the logic in metrics.py to show the number of\n+        #  findings by product for SCP customers. See PA-3312\n+        #  We should consider refactoring this logic into a shared function\n+        #  in a future PR for metric and behavioral consistency.\n+        #  An open question remains on whether we should be including the number\n+        #  of ignored findings in this count.\n+\n+        findings_by_product: Dict[str, int] = Counter()\n+        for r, f in matches_by_rule.items():\n+            # NOTE: For parity with metrics.py, we are using the human-readable product name,\n+            #  (i.e. code) and falling back to the internal json string (i.e. sast) if we\n+            #  somehow drift out of sync with the product enum.\n+            name = USER_FRIENDLY_PRODUCT_NAMES.get(r.product, r.product.to_json())",
        "comment_created_at": "2024-01-30T17:09:05+00:00",
        "comment_author": "zzeleznick",
        "comment_body": "Here's the situation for a hopeful aha moment \u2013 \r\n\r\nOn [line 354](https://github.com/semgrep/semgrep/pull/9682/files#diff-7c7cda58065ec85eebe55f7c9b79daed7e22b02b2ee553bb3379317a0ec4e505R354), name is a string in both the happy and fallback cases. \r\n\r\nIdeally, we would not need to call `.to_json()`on the product value if we had defined the `__str__` method for our dataclasses within our `atd` python code generator. Should we add this convenience feature to `atd`, usage of the f-string in the [next line](https://github.com/semgrep/semgrep/pull/9682/files#diff-7c7cda58065ec85eebe55f7c9b79daed7e22b02b2ee553bb3379317a0ec4e505R355) would be required vs a defensive programming technique for future-proofing and to please our little mypy checker.\r\n\r\nNote that f-strings are both faster than `str` ([ref](https://stackoverflow.com/a/56587856)) and generally more flexible.",
        "pr_file_module": null
      },
      {
        "comment_id": "1472193453",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9682,
        "pr_file": "cli/src/semgrep/app/scans.py",
        "discussion_id": "1470719748",
        "commented_code": "@@ -338,6 +339,21 @@ def report_findings(\n \n         dependency_counts = {k: len(v) for k, v in lockfile_dependencies.items()}\n \n+        # NOTE: This mirrors the logic in metrics.py to show the number of\n+        #  findings by product for SCP customers. See PA-3312\n+        #  We should consider refactoring this logic into a shared function\n+        #  in a future PR for metric and behavioral consistency.\n+        #  An open question remains on whether we should be including the number\n+        #  of ignored findings in this count.\n+\n+        findings_by_product: Dict[str, int] = Counter()\n+        for r, f in matches_by_rule.items():\n+            # NOTE: For parity with metrics.py, we are using the human-readable product name,\n+            #  (i.e. code) and falling back to the internal json string (i.e. sast) if we\n+            #  somehow drift out of sync with the product enum.\n+            name = USER_FRIENDLY_PRODUCT_NAMES.get(r.product, r.product.to_json())",
        "comment_created_at": "2024-01-31T01:20:13+00:00",
        "comment_author": "amchiclet",
        "comment_body": "> On line 354, name is a string in both the happy and fallback cases.\r\n\r\nHmm, now I'm wondering why mypy was complaining.\r\n\r\n> Note that f-strings are both faster than str (ref) and generally more flexible.\r\n\r\nTotally fine for this reason to use f-strings! I personally think `str` is clearer (aiming for clarity here), but I can be the minority who thinks that and it's a really minor point.",
        "pr_file_module": null
      }
    ]
  }
]