[
  {
    "discussion_id": "2016804490",
    "pr_number": 10915,
    "pr_file": "cli/src/semgrep/env.py",
    "created_at": "2025-03-27T14:27:58+00:00",
    "commented_code": "value = os.getenv(\"SEMGREP_VERSION_CACHE_PATH\")\n         if value:\n             return Path(value)\n-        return Path.home() / \".cache\" / \"semgrep_version\"\n+        cache_home = os.getenv(\"XDG_CACHE_HOME\")\n+        if cache_home is None or not Path(cache_home).is_dir():\n+            parent_dir = Path.home() / \".cache\"\n+        else:\n+            parent_dir = Path(cache_home)",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "2016804490",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10915,
        "pr_file": "cli/src/semgrep/env.py",
        "discussion_id": "2016804490",
        "commented_code": "@@ -105,7 +105,12 @@ def version_check_cache_path_default(self) -> Path:\n         value = os.getenv(\"SEMGREP_VERSION_CACHE_PATH\")\n         if value:\n             return Path(value)\n-        return Path.home() / \".cache\" / \"semgrep_version\"\n+        cache_home = os.getenv(\"XDG_CACHE_HOME\")\n+        if cache_home is None or not Path(cache_home).is_dir():\n+            parent_dir = Path.home() / \".cache\"\n+        else:\n+            parent_dir = Path(cache_home)",
        "comment_created_at": "2025-03-27T14:27:58+00:00",
        "comment_author": "tpetr",
        "comment_body": "```suggestion\r\n        if cache_home and Path(cache_home).is_dir():\r\n            parent_dir = Path(cache_home)\r\n        else:\r\n            parent_dir = Path.home() / \".cache\"\r\n```\r\n- flip the if-statement for readability\r\n- check for false-ness instead of explicit None to handle case where `XDG_CACHE_HOME` is empty string",
        "pr_file_module": null
      },
      {
        "comment_id": "2016833121",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 10915,
        "pr_file": "cli/src/semgrep/env.py",
        "discussion_id": "2016804490",
        "commented_code": "@@ -105,7 +105,12 @@ def version_check_cache_path_default(self) -> Path:\n         value = os.getenv(\"SEMGREP_VERSION_CACHE_PATH\")\n         if value:\n             return Path(value)\n-        return Path.home() / \".cache\" / \"semgrep_version\"\n+        cache_home = os.getenv(\"XDG_CACHE_HOME\")\n+        if cache_home is None or not Path(cache_home).is_dir():\n+            parent_dir = Path.home() / \".cache\"\n+        else:\n+            parent_dir = Path(cache_home)",
        "comment_created_at": "2025-03-27T14:40:08+00:00",
        "comment_author": "Jorenar",
        "comment_body": "Gladly!\r\nI've codded it this way only to match the check for `$XDG_CONFIG_HOME` from few lines below.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "613356111",
    "pr_number": 2923,
    "pr_file": "semgrep/tests/e2e/test_cli_test.py",
    "created_at": "2021-04-14T15:33:28+00:00",
    "commented_code": "results,\n         \"results.json\",\n     )\n+\n+\n+def test_cli_test_multiline_annotations(run_semgrep_in_tmp, snapshot):\n+    results = run_semgrep_in_tmp(\n+        \"rules/cli_test/multiple_annotations/\",\n+        options=[\"--test\"],\n+        target_name=\"cli_test/multiple_annotations/\",\n+        output_format=\"text\",\n+    )\n+    snapshot.assert_match(\n+        results,\n+        \"results.json\",",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "613356111",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 2923,
        "pr_file": "semgrep/tests/e2e/test_cli_test.py",
        "discussion_id": "613356111",
        "commented_code": "@@ -35,3 +35,16 @@ def test_cli_test_suffixes(run_semgrep_in_tmp, snapshot):\n         results,\n         \"results.json\",\n     )\n+\n+\n+def test_cli_test_multiline_annotations(run_semgrep_in_tmp, snapshot):\n+    results = run_semgrep_in_tmp(\n+        \"rules/cli_test/multiple_annotations/\",\n+        options=[\"--test\"],\n+        target_name=\"cli_test/multiple_annotations/\",\n+        output_format=\"text\",\n+    )\n+    snapshot.assert_match(\n+        results,\n+        \"results.json\",",
        "comment_created_at": "2021-04-14T15:33:28+00:00",
        "comment_author": "mschwager",
        "comment_body": "This isn't actually outputting JSON - I would either change `output_format=\"json\"` or use `results.txt` :+1: ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1499660213",
    "pr_number": 9732,
    "pr_file": "cli/tests/e2e-pro/test_ci.py",
    "created_at": "2024-02-22T17:55:53+00:00",
    "commented_code": "subprocess.run([\"git\", \"fetch\", \"origin\", \"--depth\", \"1\", \"bar:bar\"])\n     subprocess.run([\"git\", \"checkout\", \"bar\"], check=True, capture_output=True)\n \n+    start_scan_mock = start_scan_mock_maker(\n+        env.get(\"SEMGREP_URL\", \"https://semgrep.dev\")",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1499660213",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9732,
        "pr_file": "cli/tests/e2e-pro/test_ci.py",
        "discussion_id": "1499660213",
        "commented_code": "@@ -1297,6 +1335,16 @@ def test_shallow_wrong_merge_base(\n     subprocess.run([\"git\", \"fetch\", \"origin\", \"--depth\", \"1\", \"bar:bar\"])\n     subprocess.run([\"git\", \"checkout\", \"bar\"], check=True, capture_output=True)\n \n+    start_scan_mock = start_scan_mock_maker(\n+        env.get(\"SEMGREP_URL\", \"https://semgrep.dev\")",
        "comment_created_at": "2024-02-22T17:55:53+00:00",
        "comment_author": "brendongo",
        "comment_body": "Do these need to have env.get aka is SEMGREP_URL ever set on this test?",
        "pr_file_module": null
      },
      {
        "comment_id": "1499694731",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9732,
        "pr_file": "cli/tests/e2e-pro/test_ci.py",
        "discussion_id": "1499660213",
        "commented_code": "@@ -1297,6 +1335,16 @@ def test_shallow_wrong_merge_base(\n     subprocess.run([\"git\", \"fetch\", \"origin\", \"--depth\", \"1\", \"bar:bar\"])\n     subprocess.run([\"git\", \"checkout\", \"bar\"], check=True, capture_output=True)\n \n+    start_scan_mock = start_scan_mock_maker(\n+        env.get(\"SEMGREP_URL\", \"https://semgrep.dev\")",
        "comment_created_at": "2024-02-22T18:07:45+00:00",
        "comment_author": "armchairlinguist",
        "comment_body": "Not at this point, I'll remove it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1419471310",
    "pr_number": 9396,
    "pr_file": "cli/src/semgrep/settings.py",
    "created_at": "2023-12-07T18:53:54+00:00",
    "commented_code": "class SettingsSchema(TypedDict, total=False):\n     has_shown_metrics_notification: bool\n-    api_token: str\n+    api_token: Optional[str]\n     anonymous_user_id: str\n \n \n SettingsKeys = Literal[\n     \"has_shown_metrics_notification\", \"api_token\", \"anonymous_user_id\"\n ]\n \n-DEFAULT_SETTINGS: SettingsSchema = {\"anonymous_user_id\": str(uuid.uuid4())}\n+\n+def generate_anonymous_user_id(api_token: Optional[str]) -> str:\n+    return (\n+        str(uuid.uuid4())\n+        if api_token is None\n+        else str(\n+            uuid.uuid5(\n+                uuid.UUID(\"0\" * 32), hashlib.sha256(api_token.encode()).hexdigest()",
    "repo_full_name": "semgrep/semgrep",
    "discussion_comments": [
      {
        "comment_id": "1419471310",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9396,
        "pr_file": "cli/src/semgrep/settings.py",
        "discussion_id": "1419471310",
        "commented_code": "@@ -34,15 +36,41 @@\n \n class SettingsSchema(TypedDict, total=False):\n     has_shown_metrics_notification: bool\n-    api_token: str\n+    api_token: Optional[str]\n     anonymous_user_id: str\n \n \n SettingsKeys = Literal[\n     \"has_shown_metrics_notification\", \"api_token\", \"anonymous_user_id\"\n ]\n \n-DEFAULT_SETTINGS: SettingsSchema = {\"anonymous_user_id\": str(uuid.uuid4())}\n+\n+def generate_anonymous_user_id(api_token: Optional[str]) -> str:\n+    return (\n+        str(uuid.uuid4())\n+        if api_token is None\n+        else str(\n+            uuid.uuid5(\n+                uuid.UUID(\"0\" * 32), hashlib.sha256(api_token.encode()).hexdigest()",
        "comment_created_at": "2023-12-07T18:53:54+00:00",
        "comment_author": "kurt-r2c",
        "comment_body": "we will need to update `PRIVACY.md` as this statement will no longer be entirely correct:\r\nhttps://github.com/semgrep/semgrep/blob/ec7502c41093d3404119d8189aa0790aff4c5045/PRIVACY.md?plain=1#L197C16-L197C16\r\n\r\nUUIDs of authenticated users will be deterministic and not random",
        "pr_file_module": null
      },
      {
        "comment_id": "1419476738",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9396,
        "pr_file": "cli/src/semgrep/settings.py",
        "discussion_id": "1419471310",
        "commented_code": "@@ -34,15 +36,41 @@\n \n class SettingsSchema(TypedDict, total=False):\n     has_shown_metrics_notification: bool\n-    api_token: str\n+    api_token: Optional[str]\n     anonymous_user_id: str\n \n \n SettingsKeys = Literal[\n     \"has_shown_metrics_notification\", \"api_token\", \"anonymous_user_id\"\n ]\n \n-DEFAULT_SETTINGS: SettingsSchema = {\"anonymous_user_id\": str(uuid.uuid4())}\n+\n+def generate_anonymous_user_id(api_token: Optional[str]) -> str:\n+    return (\n+        str(uuid.uuid4())\n+        if api_token is None\n+        else str(\n+            uuid.uuid5(\n+                uuid.UUID(\"0\" * 32), hashlib.sha256(api_token.encode()).hexdigest()",
        "comment_created_at": "2023-12-07T18:58:27+00:00",
        "comment_author": "kurt-r2c",
        "comment_body": "If we ship this we'll also need to add a followup item to update the osemgrep implementation here: https://github.com/semgrep/semgrep/blob/ec7502c41093d3404119d8189aa0790aff4c5045/src/osemgrep/configuring/Semgrep_settings.ml#L21",
        "pr_file_module": null
      },
      {
        "comment_id": "1419784069",
        "repo_full_name": "semgrep/semgrep",
        "pr_number": 9396,
        "pr_file": "cli/src/semgrep/settings.py",
        "discussion_id": "1419471310",
        "commented_code": "@@ -34,15 +36,41 @@\n \n class SettingsSchema(TypedDict, total=False):\n     has_shown_metrics_notification: bool\n-    api_token: str\n+    api_token: Optional[str]\n     anonymous_user_id: str\n \n \n SettingsKeys = Literal[\n     \"has_shown_metrics_notification\", \"api_token\", \"anonymous_user_id\"\n ]\n \n-DEFAULT_SETTINGS: SettingsSchema = {\"anonymous_user_id\": str(uuid.uuid4())}\n+\n+def generate_anonymous_user_id(api_token: Optional[str]) -> str:\n+    return (\n+        str(uuid.uuid4())\n+        if api_token is None\n+        else str(\n+            uuid.uuid5(\n+                uuid.UUID(\"0\" * 32), hashlib.sha256(api_token.encode()).hexdigest()",
        "comment_created_at": "2023-12-08T00:05:11+00:00",
        "comment_author": "zzeleznick",
        "comment_body": "Created a ticket at GROW-92 and updating the UUID statement now.",
        "pr_file_module": null
      }
    ]
  }
]