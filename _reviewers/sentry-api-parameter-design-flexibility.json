[
  {
    "discussion_id": "2195814532",
    "pr_number": 94734,
    "pr_file": "static/app/utils/replays/resourceFrame.tsx",
    "created_at": "2025-07-09T19:24:49+00:00",
    "commented_code": "}\n   return undefined;\n }\n+\n+// Looks at conventions described in https://graphql.org/learn/serving-over-http/\n+// to infer if this is a GraphQL request, or GraphQL-like.\n+// The SDK must be configured to capture the request body.\n+export function isFrameGraphQLRequest(frame: SpanFrame): boolean {\n+  if (!isRequestFrame(frame) || !frame.data?.request) {\n+    return false;\n+  }\n+\n+  const request = frame.data.request;\n+  const contentType = request.headers?.['content-type'] ?? '';\n+\n+  // https://graphql.org/learn/serving-over-http/#headers\n+  // `application/graphql-response+json` is a good indicator\n+  if (contentType.includes('application/graphql-response+json')) {\n+    return true;\n+  }\n+  // Legacy servers required `application/json`\n+  if (!contentType.includes('application/json')) {\n+    return false;\n+  }\n+\n+  try {\n+    const url = new URL(frame.description);\n+    const hasUrlQuery = Boolean(url.searchParams.get('query'));",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2195814532",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94734,
        "pr_file": "static/app/utils/replays/resourceFrame.tsx",
        "discussion_id": "2195814532",
        "commented_code": "@@ -53,3 +55,100 @@ export function getResponseBodySize(frame: SpanFrame) {\n   }\n   return undefined;\n }\n+\n+// Looks at conventions described in https://graphql.org/learn/serving-over-http/\n+// to infer if this is a GraphQL request, or GraphQL-like.\n+// The SDK must be configured to capture the request body.\n+export function isFrameGraphQLRequest(frame: SpanFrame): boolean {\n+  if (!isRequestFrame(frame) || !frame.data?.request) {\n+    return false;\n+  }\n+\n+  const request = frame.data.request;\n+  const contentType = request.headers?.['content-type'] ?? '';\n+\n+  // https://graphql.org/learn/serving-over-http/#headers\n+  // `application/graphql-response+json` is a good indicator\n+  if (contentType.includes('application/graphql-response+json')) {\n+    return true;\n+  }\n+  // Legacy servers required `application/json`\n+  if (!contentType.includes('application/json')) {\n+    return false;\n+  }\n+\n+  try {\n+    const url = new URL(frame.description);\n+    const hasUrlQuery = Boolean(url.searchParams.get('query'));",
        "comment_created_at": "2025-07-09T19:24:49+00:00",
        "comment_author": "billyvg",
        "comment_body": "Would this be a false positive for our API requests since a lot of them use `query`? What would it look like in that case?",
        "pr_file_module": null
      },
      {
        "comment_id": "2195835501",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94734,
        "pr_file": "static/app/utils/replays/resourceFrame.tsx",
        "discussion_id": "2195814532",
        "commented_code": "@@ -53,3 +55,100 @@ export function getResponseBodySize(frame: SpanFrame) {\n   }\n   return undefined;\n }\n+\n+// Looks at conventions described in https://graphql.org/learn/serving-over-http/\n+// to infer if this is a GraphQL request, or GraphQL-like.\n+// The SDK must be configured to capture the request body.\n+export function isFrameGraphQLRequest(frame: SpanFrame): boolean {\n+  if (!isRequestFrame(frame) || !frame.data?.request) {\n+    return false;\n+  }\n+\n+  const request = frame.data.request;\n+  const contentType = request.headers?.['content-type'] ?? '';\n+\n+  // https://graphql.org/learn/serving-over-http/#headers\n+  // `application/graphql-response+json` is a good indicator\n+  if (contentType.includes('application/graphql-response+json')) {\n+    return true;\n+  }\n+  // Legacy servers required `application/json`\n+  if (!contentType.includes('application/json')) {\n+    return false;\n+  }\n+\n+  try {\n+    const url = new URL(frame.description);\n+    const hasUrlQuery = Boolean(url.searchParams.get('query'));",
        "comment_created_at": "2025-07-09T19:38:14+00:00",
        "comment_author": "ryan953",
        "comment_body": "hrm, yeah it could. \n\nbut it seems like we don't show any UI if we can't extract the names of things with `parseGraphQLQuery`. So looking at the preview site we're not showing graphql for requests on sentry.io. \n\nAt minimum we could rename this function from `isFrameGraphQLRequest` to like `isMaybeGraphQLFrameRequest` or something like that.",
        "pr_file_module": null
      },
      {
        "comment_id": "2195839552",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94734,
        "pr_file": "static/app/utils/replays/resourceFrame.tsx",
        "discussion_id": "2195814532",
        "commented_code": "@@ -53,3 +55,100 @@ export function getResponseBodySize(frame: SpanFrame) {\n   }\n   return undefined;\n }\n+\n+// Looks at conventions described in https://graphql.org/learn/serving-over-http/\n+// to infer if this is a GraphQL request, or GraphQL-like.\n+// The SDK must be configured to capture the request body.\n+export function isFrameGraphQLRequest(frame: SpanFrame): boolean {\n+  if (!isRequestFrame(frame) || !frame.data?.request) {\n+    return false;\n+  }\n+\n+  const request = frame.data.request;\n+  const contentType = request.headers?.['content-type'] ?? '';\n+\n+  // https://graphql.org/learn/serving-over-http/#headers\n+  // `application/graphql-response+json` is a good indicator\n+  if (contentType.includes('application/graphql-response+json')) {\n+    return true;\n+  }\n+  // Legacy servers required `application/json`\n+  if (!contentType.includes('application/json')) {\n+    return false;\n+  }\n+\n+  try {\n+    const url = new URL(frame.description);\n+    const hasUrlQuery = Boolean(url.searchParams.get('query'));",
        "comment_created_at": "2025-07-09T19:40:56+00:00",
        "comment_author": "billyvg",
        "comment_body": "Can we add a test case + comment?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2159283870",
    "pr_number": 93935,
    "pr_file": "static/gsApp/views/subscriptionPage/seerAutomationAlert.tsx",
    "created_at": "2025-06-20T15:46:57+00:00",
    "commented_code": "+import styled from '@emotion/styled';\n+\n+import {Alert} from 'sentry/components/core/alert';\n+import {Button} from 'sentry/components/core/button';\n+import Link from 'sentry/components/links/link';\n+import {IconClose} from 'sentry/icons';\n+import {t} from 'sentry/locale';\n+import {space} from 'sentry/styles/space';\n+import type {Organization} from 'sentry/types/organization';\n+import useDismissAlert from 'sentry/utils/useDismissAlert';\n+import {useLocation} from 'sentry/utils/useLocation';\n+\n+interface SeerAutomationAlertProps {\n+  organization: Organization;\n+}\n+\n+export default function SeerAutomationAlert({organization}: SeerAutomationAlertProps) {\n+  const location = useLocation();\n+  const isCheckoutRedirect = !!location.query.referrer; // only show this alert when redirected to this page, such as from the checkout page",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2159283870",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93935,
        "pr_file": "static/gsApp/views/subscriptionPage/seerAutomationAlert.tsx",
        "discussion_id": "2159283870",
        "commented_code": "@@ -0,0 +1,76 @@\n+import styled from '@emotion/styled';\n+\n+import {Alert} from 'sentry/components/core/alert';\n+import {Button} from 'sentry/components/core/button';\n+import Link from 'sentry/components/links/link';\n+import {IconClose} from 'sentry/icons';\n+import {t} from 'sentry/locale';\n+import {space} from 'sentry/styles/space';\n+import type {Organization} from 'sentry/types/organization';\n+import useDismissAlert from 'sentry/utils/useDismissAlert';\n+import {useLocation} from 'sentry/utils/useLocation';\n+\n+interface SeerAutomationAlertProps {\n+  organization: Organization;\n+}\n+\n+export default function SeerAutomationAlert({organization}: SeerAutomationAlertProps) {\n+  const location = useLocation();\n+  const isCheckoutRedirect = !!location.query.referrer; // only show this alert when redirected to this page, such as from the checkout page",
        "comment_created_at": "2025-06-20T15:46:57+00:00",
        "comment_author": "isabellaenriquez",
        "comment_body": "i don't think looking at the presence of `referrer` alone is sufficient here\r\n\r\nthere are a couple in-product places where we redirect to this page and provide a referrer that aren't from checkout",
        "pr_file_module": null
      },
      {
        "comment_id": "2159288357",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93935,
        "pr_file": "static/gsApp/views/subscriptionPage/seerAutomationAlert.tsx",
        "discussion_id": "2159283870",
        "commented_code": "@@ -0,0 +1,76 @@\n+import styled from '@emotion/styled';\n+\n+import {Alert} from 'sentry/components/core/alert';\n+import {Button} from 'sentry/components/core/button';\n+import Link from 'sentry/components/links/link';\n+import {IconClose} from 'sentry/icons';\n+import {t} from 'sentry/locale';\n+import {space} from 'sentry/styles/space';\n+import type {Organization} from 'sentry/types/organization';\n+import useDismissAlert from 'sentry/utils/useDismissAlert';\n+import {useLocation} from 'sentry/utils/useLocation';\n+\n+interface SeerAutomationAlertProps {\n+  organization: Organization;\n+}\n+\n+export default function SeerAutomationAlert({organization}: SeerAutomationAlertProps) {\n+  const location = useLocation();\n+  const isCheckoutRedirect = !!location.query.referrer; // only show this alert when redirected to this page, such as from the checkout page",
        "comment_created_at": "2025-06-20T15:50:13+00:00",
        "comment_author": "isabellaenriquez",
        "comment_body": "instead, we can modify the redirect in `submitCheckout` to pass a query parameter when the user has just bought seer, ie. \r\n```js\r\nhasBoughtSeer = // whatever logic to indicate a user just bought seer\r\nnormalizeUrl(\r\n        `/settings/${organization.slug}/billing/overview/?referrer=${referrer}&show_seer_automation_alert={hasBoughtSeer}`\r\n      )\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2159299537",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93935,
        "pr_file": "static/gsApp/views/subscriptionPage/seerAutomationAlert.tsx",
        "discussion_id": "2159283870",
        "commented_code": "@@ -0,0 +1,76 @@\n+import styled from '@emotion/styled';\n+\n+import {Alert} from 'sentry/components/core/alert';\n+import {Button} from 'sentry/components/core/button';\n+import Link from 'sentry/components/links/link';\n+import {IconClose} from 'sentry/icons';\n+import {t} from 'sentry/locale';\n+import {space} from 'sentry/styles/space';\n+import type {Organization} from 'sentry/types/organization';\n+import useDismissAlert from 'sentry/utils/useDismissAlert';\n+import {useLocation} from 'sentry/utils/useLocation';\n+\n+interface SeerAutomationAlertProps {\n+  organization: Organization;\n+}\n+\n+export default function SeerAutomationAlert({organization}: SeerAutomationAlertProps) {\n+  const location = useLocation();\n+  const isCheckoutRedirect = !!location.query.referrer; // only show this alert when redirected to this page, such as from the checkout page",
        "comment_created_at": "2025-06-20T15:58:08+00:00",
        "comment_author": "roaga",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2154819478",
    "pr_number": 93704,
    "pr_file": "static/app/components/gridEditable/index.tsx",
    "created_at": "2025-06-18T14:50:33+00:00",
    "commented_code": "bodyStyle?: React.CSSProperties;\n   emptyMessage?: React.ReactNode;\n   error?: unknown | null;\n+  fitMaxContent?: boolean;",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2154819478",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93704,
        "pr_file": "static/app/components/gridEditable/index.tsx",
        "discussion_id": "2154819478",
        "commented_code": "@@ -98,23 +98,24 @@ type GridEditableProps<DataRow, ColumnKey> = {\n   bodyStyle?: React.CSSProperties;\n   emptyMessage?: React.ReactNode;\n   error?: unknown | null;\n+  fitMaxContent?: boolean;",
        "comment_created_at": "2025-06-18T14:50:33+00:00",
        "comment_author": "JonasBa",
        "comment_body": "This API will restrict you from having different fit options later on. It would be preferable to use a string literal here as opposed to bool, that way you preserve some flexibility for the future.\r\n```suggestion\r\n  fit?: \"max-content\";\r\n```",
        "pr_file_module": null
      }
    ]
  }
]