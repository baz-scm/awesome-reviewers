[
  {
    "discussion_id": "2180897787",
    "pr_number": 94570,
    "pr_file": "static/app/views/dashboards/widgets/tableWidget/tableWidgetVisualization.tsx",
    "created_at": "2025-07-02T20:15:37+00:00",
    "commented_code": "* @param meta The full table metadata\n    */\n   makeBaggage?: BaggageMaker;\n+  /**\n+   * A callback function that is invoked after a user clicks a sortable column header and overrides default behaviour of navigating\n+   * @param sort `Sort` object contain the `field` and `kind` ('asc' or 'desc')\n+   */\n+  onColumnSortChange?: (sort: Sort) => void;",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2180897787",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94570,
        "pr_file": "static/app/views/dashboards/widgets/tableWidget/tableWidgetVisualization.tsx",
        "discussion_id": "2180897787",
        "commented_code": "@@ -73,10 +75,19 @@ interface TableWidgetVisualizationProps {\n    * @param meta The full table metadata\n    */\n   makeBaggage?: BaggageMaker;\n+  /**\n+   * A callback function that is invoked after a user clicks a sortable column header and overrides default behaviour of navigating\n+   * @param sort `Sort` object contain the `field` and `kind` ('asc' or 'desc')\n+   */\n+  onColumnSortChange?: (sort: Sort) => void;",
        "comment_created_at": "2025-07-02T20:15:37+00:00",
        "comment_author": "gggritso",
        "comment_body": "```suggestion\n  onSortChange?: (sort: Sort) => void;\n```\n\n`onSortChange` is nicer here, it's shorter and matches `sort`. Only columns can be sorted, right?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2183077110",
    "pr_number": 94861,
    "pr_file": "static/app/views/dashboards/widgets/tableWidget/tableWidgetVisualization.stories.tsx",
    "created_at": "2025-07-03T15:22:24+00:00",
    "commented_code": ");\n   });\n \n+  story('Sorting by Column', () => {\n+    const sortableColumns = customColumns.map(column => ({\n+      ...column,\n+      sortable: true,\n+      width: -1,\n+    }));\n+    const [curSort, setSort] = useState<Sort | undefined>(undefined);",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2183077110",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94861,
        "pr_file": "static/app/views/dashboards/widgets/tableWidget/tableWidgetVisualization.stories.tsx",
        "discussion_id": "2183077110",
        "commented_code": "@@ -112,6 +117,113 @@ ${JSON.stringify(aliases)}\n     );\n   });\n \n+  story('Sorting by Column', () => {\n+    const sortableColumns = customColumns.map(column => ({\n+      ...column,\n+      sortable: true,\n+      width: -1,\n+    }));\n+    const [curSort, setSort] = useState<Sort | undefined>(undefined);",
        "comment_created_at": "2025-07-03T15:22:24+00:00",
        "comment_author": "gggritso",
        "comment_body": "You can do this to get the same effect:\n\n```suggestion\n    const [sort, setSort] = useState<Sort>();\n```\n\nP.S. Maybe just me, but I think abbreviated variable names aren't worth the savings, `sort` or `currentSort` are better than `curSort`. `curSort` can mean all kinds of things like \"current sort\", or \"cursor sort\" or \"currency sort\", etc.",
        "pr_file_module": null
      },
      {
        "comment_id": "2183148551",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94861,
        "pr_file": "static/app/views/dashboards/widgets/tableWidget/tableWidgetVisualization.stories.tsx",
        "discussion_id": "2183077110",
        "commented_code": "@@ -112,6 +117,113 @@ ${JSON.stringify(aliases)}\n     );\n   });\n \n+  story('Sorting by Column', () => {\n+    const sortableColumns = customColumns.map(column => ({\n+      ...column,\n+      sortable: true,\n+      width: -1,\n+    }));\n+    const [curSort, setSort] = useState<Sort | undefined>(undefined);",
        "comment_created_at": "2025-07-03T15:54:22+00:00",
        "comment_author": "lzhao-sentry",
        "comment_body": "The main reason it was `curSort` was because of the `onChangeSort` function conflicting, but I can change that function to accept something like `newSort` instead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2183105295",
    "pr_number": 94861,
    "pr_file": "static/app/views/dashboards/widgets/tableWidget/tableWidgetVisualization.tsx",
    "created_at": "2025-07-03T15:32:28+00:00",
    "commented_code": "* @param meta The full table metadata\n    */\n   makeBaggage?: BaggageMaker;\n+  /**\n+   * A callback function that is invoked after a user clicks a sortable column header. If omitted, clicking a column header updates the sort in the URL\n+   * @param sort `Sort` object contain the `field` and `kind` ('asc' or 'desc')\n+   */\n+  onSortChange?: (sort: Sort) => void;",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2183105295",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94861,
        "pr_file": "static/app/views/dashboards/widgets/tableWidget/tableWidgetVisualization.tsx",
        "discussion_id": "2183105295",
        "commented_code": "@@ -73,10 +75,20 @@ interface TableWidgetVisualizationProps {\n    * @param meta The full table metadata\n    */\n   makeBaggage?: BaggageMaker;\n+  /**\n+   * A callback function that is invoked after a user clicks a sortable column header. If omitted, clicking a column header updates the sort in the URL\n+   * @param sort `Sort` object contain the `field` and `kind` ('asc' or 'desc')\n+   */\n+  onSortChange?: (sort: Sort) => void;",
        "comment_created_at": "2025-07-03T15:32:28+00:00",
        "comment_author": "gggritso",
        "comment_body": "```suggestion\n  onChangeSort?: (sort: Sort) => void;\n```\n\nThe usual pattern is \"on\" + \"action\" + \"object\"",
        "pr_file_module": null
      }
    ]
  }
]