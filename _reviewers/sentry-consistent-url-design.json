[
  {
    "discussion_id": "2172946477",
    "pr_number": 94556,
    "pr_file": "src/sentry/web/urls.py",
    "created_at": "2025-06-27T22:38:09+00:00",
    "commented_code": "),\n     # Dev toolbar\n     re_path(\n-        r\"^toolbar/\",\n+        r\"^toolbar/(?P<project_id_or_slug>[^/]+)/(?P<project_id_or_slug>[^/]+)/\",",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2172946477",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94556,
        "pr_file": "src/sentry/web/urls.py",
        "discussion_id": "2172946477",
        "commented_code": "@@ -898,17 +898,16 @@\n     ),\n     # Dev toolbar\n     re_path(\n-        r\"^toolbar/\",\n+        r\"^toolbar/(?P<project_id_or_slug>[^/]+)/(?P<project_id_or_slug>[^/]+)/\",",
        "comment_created_at": "2025-06-27T22:38:09+00:00",
        "comment_author": "ryan953",
        "comment_body": "```suggestion\r\n        r\"^toolbar/(?P<organization_slug>[^/]+)/(?P<project_id_or_slug>[^/]+)/\",\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2138419151",
    "pr_number": 93134,
    "pr_file": "src/sentry/api/endpoints/organization_feedback_summary.py",
    "created_at": "2025-06-10T17:21:39+00:00",
    "commented_code": "+import logging\n+from datetime import timedelta\n+\n+from rest_framework.exceptions import ParseError\n+from rest_framework.request import Request\n+from rest_framework.response import Response\n+\n+from sentry.api.api_owners import ApiOwner\n+from sentry.api.api_publish_status import ApiPublishStatus\n+from sentry.api.base import region_silo_endpoint\n+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationUserReportsPermission\n+from sentry.api.utils import get_date_range_from_stats_period\n+from sentry.exceptions import InvalidParams\n+from sentry.feedback.usecases.feedback_summaries import generate_summary\n+from sentry.issues.grouptype import FeedbackGroup\n+from sentry.models.group import Group, GroupStatus\n+from sentry.models.organization import Organization\n+\n+logger = logging.getLogger(__name__)\n+\n+MIN_FEEDBACKS_TO_SUMMARIZE = 10\n+MAX_FEEDBACKS_TO_SUMMARIZE = 1000\n+# Token limit is 1,048,576 tokens, see https://ai.google.dev/gemini-api/docs/models#gemini-2.0-flash\n+MAX_FEEDBACKS_TO_SUMMARIZE_CHARS = 1000000\n+\n+\n+@region_silo_endpoint\n+class OrganizationFeedbackSummaryEndpoint(OrganizationEndpoint):\n+    owner = ApiOwner.FEEDBACK\n+    publish_status = {\n+        \"GET\": ApiPublishStatus.EXPERIMENTAL,\n+    }\n+    permission_classes = (OrganizationUserReportsPermission,)\n+\n+    def get(self, request: Request, organization: Organization) -> Response:\n+        \"\"\"\n+        Get the summary of the user feedbacks of an organization\n+        ``````````````````````````````````````````````````\n+\n+        Returns the summary of the user feedbacks. The user feedbacks can be filtered by:\n+        - A list of projects\n+        - The date range that they were first seen in (defaults to 7 days)\n+\n+        :pparam string organization_id_or_slug: the id or slug of the organization.\n+        :qparam list[int] project: list of project IDs to filter by",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2138419151",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/endpoints/organization_feedback_summary.py",
        "discussion_id": "2138419151",
        "commented_code": "@@ -0,0 +1,103 @@\n+import logging\n+from datetime import timedelta\n+\n+from rest_framework.exceptions import ParseError\n+from rest_framework.request import Request\n+from rest_framework.response import Response\n+\n+from sentry.api.api_owners import ApiOwner\n+from sentry.api.api_publish_status import ApiPublishStatus\n+from sentry.api.base import region_silo_endpoint\n+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationUserReportsPermission\n+from sentry.api.utils import get_date_range_from_stats_period\n+from sentry.exceptions import InvalidParams\n+from sentry.feedback.usecases.feedback_summaries import generate_summary\n+from sentry.issues.grouptype import FeedbackGroup\n+from sentry.models.group import Group, GroupStatus\n+from sentry.models.organization import Organization\n+\n+logger = logging.getLogger(__name__)\n+\n+MIN_FEEDBACKS_TO_SUMMARIZE = 10\n+MAX_FEEDBACKS_TO_SUMMARIZE = 1000\n+# Token limit is 1,048,576 tokens, see https://ai.google.dev/gemini-api/docs/models#gemini-2.0-flash\n+MAX_FEEDBACKS_TO_SUMMARIZE_CHARS = 1000000\n+\n+\n+@region_silo_endpoint\n+class OrganizationFeedbackSummaryEndpoint(OrganizationEndpoint):\n+    owner = ApiOwner.FEEDBACK\n+    publish_status = {\n+        \"GET\": ApiPublishStatus.EXPERIMENTAL,\n+    }\n+    permission_classes = (OrganizationUserReportsPermission,)\n+\n+    def get(self, request: Request, organization: Organization) -> Response:\n+        \"\"\"\n+        Get the summary of the user feedbacks of an organization\n+        ``````````````````````````````````````````````````\n+\n+        Returns the summary of the user feedbacks. The user feedbacks can be filtered by:\n+        - A list of projects\n+        - The date range that they were first seen in (defaults to 7 days)\n+\n+        :pparam string organization_id_or_slug: the id or slug of the organization.\n+        :qparam list[int] project: list of project IDs to filter by",
        "comment_created_at": "2025-06-10T17:21:39+00:00",
        "comment_author": "aliu39",
        "comment_body": "I think our convention is to provide as\r\n`project=1&project=2`\r\ninstead of\r\n`project=[1,2]`\r\nso maybe the type shouldn't be list here",
        "pr_file_module": null
      },
      {
        "comment_id": "2138688376",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/endpoints/organization_feedback_summary.py",
        "discussion_id": "2138419151",
        "commented_code": "@@ -0,0 +1,103 @@\n+import logging\n+from datetime import timedelta\n+\n+from rest_framework.exceptions import ParseError\n+from rest_framework.request import Request\n+from rest_framework.response import Response\n+\n+from sentry.api.api_owners import ApiOwner\n+from sentry.api.api_publish_status import ApiPublishStatus\n+from sentry.api.base import region_silo_endpoint\n+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationUserReportsPermission\n+from sentry.api.utils import get_date_range_from_stats_period\n+from sentry.exceptions import InvalidParams\n+from sentry.feedback.usecases.feedback_summaries import generate_summary\n+from sentry.issues.grouptype import FeedbackGroup\n+from sentry.models.group import Group, GroupStatus\n+from sentry.models.organization import Organization\n+\n+logger = logging.getLogger(__name__)\n+\n+MIN_FEEDBACKS_TO_SUMMARIZE = 10\n+MAX_FEEDBACKS_TO_SUMMARIZE = 1000\n+# Token limit is 1,048,576 tokens, see https://ai.google.dev/gemini-api/docs/models#gemini-2.0-flash\n+MAX_FEEDBACKS_TO_SUMMARIZE_CHARS = 1000000\n+\n+\n+@region_silo_endpoint\n+class OrganizationFeedbackSummaryEndpoint(OrganizationEndpoint):\n+    owner = ApiOwner.FEEDBACK\n+    publish_status = {\n+        \"GET\": ApiPublishStatus.EXPERIMENTAL,\n+    }\n+    permission_classes = (OrganizationUserReportsPermission,)\n+\n+    def get(self, request: Request, organization: Organization) -> Response:\n+        \"\"\"\n+        Get the summary of the user feedbacks of an organization\n+        ``````````````````````````````````````````````````\n+\n+        Returns the summary of the user feedbacks. The user feedbacks can be filtered by:\n+        - A list of projects\n+        - The date range that they were first seen in (defaults to 7 days)\n+\n+        :pparam string organization_id_or_slug: the id or slug of the organization.\n+        :qparam list[int] project: list of project IDs to filter by",
        "comment_created_at": "2025-06-10T20:09:37+00:00",
        "comment_author": "michellewzhang",
        "comment_body": "i think the frontend can pass the projects param as a list, pretty sure the backend can parse both",
        "pr_file_module": null
      },
      {
        "comment_id": "2138693182",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/endpoints/organization_feedback_summary.py",
        "discussion_id": "2138419151",
        "commented_code": "@@ -0,0 +1,103 @@\n+import logging\n+from datetime import timedelta\n+\n+from rest_framework.exceptions import ParseError\n+from rest_framework.request import Request\n+from rest_framework.response import Response\n+\n+from sentry.api.api_owners import ApiOwner\n+from sentry.api.api_publish_status import ApiPublishStatus\n+from sentry.api.base import region_silo_endpoint\n+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationUserReportsPermission\n+from sentry.api.utils import get_date_range_from_stats_period\n+from sentry.exceptions import InvalidParams\n+from sentry.feedback.usecases.feedback_summaries import generate_summary\n+from sentry.issues.grouptype import FeedbackGroup\n+from sentry.models.group import Group, GroupStatus\n+from sentry.models.organization import Organization\n+\n+logger = logging.getLogger(__name__)\n+\n+MIN_FEEDBACKS_TO_SUMMARIZE = 10\n+MAX_FEEDBACKS_TO_SUMMARIZE = 1000\n+# Token limit is 1,048,576 tokens, see https://ai.google.dev/gemini-api/docs/models#gemini-2.0-flash\n+MAX_FEEDBACKS_TO_SUMMARIZE_CHARS = 1000000\n+\n+\n+@region_silo_endpoint\n+class OrganizationFeedbackSummaryEndpoint(OrganizationEndpoint):\n+    owner = ApiOwner.FEEDBACK\n+    publish_status = {\n+        \"GET\": ApiPublishStatus.EXPERIMENTAL,\n+    }\n+    permission_classes = (OrganizationUserReportsPermission,)\n+\n+    def get(self, request: Request, organization: Organization) -> Response:\n+        \"\"\"\n+        Get the summary of the user feedbacks of an organization\n+        ``````````````````````````````````````````````````\n+\n+        Returns the summary of the user feedbacks. The user feedbacks can be filtered by:\n+        - A list of projects\n+        - The date range that they were first seen in (defaults to 7 days)\n+\n+        :pparam string organization_id_or_slug: the id or slug of the organization.\n+        :qparam list[int] project: list of project IDs to filter by",
        "comment_created_at": "2025-06-10T20:12:34+00:00",
        "comment_author": "aliu39",
        "comment_body": "Ah ok, get_projects seems to use request.GET.getlist, not sure which type(s) it takes but let's test both formats!",
        "pr_file_module": null
      },
      {
        "comment_id": "2138739377",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/endpoints/organization_feedback_summary.py",
        "discussion_id": "2138419151",
        "commented_code": "@@ -0,0 +1,103 @@\n+import logging\n+from datetime import timedelta\n+\n+from rest_framework.exceptions import ParseError\n+from rest_framework.request import Request\n+from rest_framework.response import Response\n+\n+from sentry.api.api_owners import ApiOwner\n+from sentry.api.api_publish_status import ApiPublishStatus\n+from sentry.api.base import region_silo_endpoint\n+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationUserReportsPermission\n+from sentry.api.utils import get_date_range_from_stats_period\n+from sentry.exceptions import InvalidParams\n+from sentry.feedback.usecases.feedback_summaries import generate_summary\n+from sentry.issues.grouptype import FeedbackGroup\n+from sentry.models.group import Group, GroupStatus\n+from sentry.models.organization import Organization\n+\n+logger = logging.getLogger(__name__)\n+\n+MIN_FEEDBACKS_TO_SUMMARIZE = 10\n+MAX_FEEDBACKS_TO_SUMMARIZE = 1000\n+# Token limit is 1,048,576 tokens, see https://ai.google.dev/gemini-api/docs/models#gemini-2.0-flash\n+MAX_FEEDBACKS_TO_SUMMARIZE_CHARS = 1000000\n+\n+\n+@region_silo_endpoint\n+class OrganizationFeedbackSummaryEndpoint(OrganizationEndpoint):\n+    owner = ApiOwner.FEEDBACK\n+    publish_status = {\n+        \"GET\": ApiPublishStatus.EXPERIMENTAL,\n+    }\n+    permission_classes = (OrganizationUserReportsPermission,)\n+\n+    def get(self, request: Request, organization: Organization) -> Response:\n+        \"\"\"\n+        Get the summary of the user feedbacks of an organization\n+        ``````````````````````````````````````````````````\n+\n+        Returns the summary of the user feedbacks. The user feedbacks can be filtered by:\n+        - A list of projects\n+        - The date range that they were first seen in (defaults to 7 days)\n+\n+        :pparam string organization_id_or_slug: the id or slug of the organization.\n+        :qparam list[int] project: list of project IDs to filter by",
        "comment_created_at": "2025-06-10T20:45:32+00:00",
        "comment_author": "vishnupsatish",
        "comment_body": "Hmm, thinking about how to test both formats",
        "pr_file_module": null
      },
      {
        "comment_id": "2138758652",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/endpoints/organization_feedback_summary.py",
        "discussion_id": "2138419151",
        "commented_code": "@@ -0,0 +1,103 @@\n+import logging\n+from datetime import timedelta\n+\n+from rest_framework.exceptions import ParseError\n+from rest_framework.request import Request\n+from rest_framework.response import Response\n+\n+from sentry.api.api_owners import ApiOwner\n+from sentry.api.api_publish_status import ApiPublishStatus\n+from sentry.api.base import region_silo_endpoint\n+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationUserReportsPermission\n+from sentry.api.utils import get_date_range_from_stats_period\n+from sentry.exceptions import InvalidParams\n+from sentry.feedback.usecases.feedback_summaries import generate_summary\n+from sentry.issues.grouptype import FeedbackGroup\n+from sentry.models.group import Group, GroupStatus\n+from sentry.models.organization import Organization\n+\n+logger = logging.getLogger(__name__)\n+\n+MIN_FEEDBACKS_TO_SUMMARIZE = 10\n+MAX_FEEDBACKS_TO_SUMMARIZE = 1000\n+# Token limit is 1,048,576 tokens, see https://ai.google.dev/gemini-api/docs/models#gemini-2.0-flash\n+MAX_FEEDBACKS_TO_SUMMARIZE_CHARS = 1000000\n+\n+\n+@region_silo_endpoint\n+class OrganizationFeedbackSummaryEndpoint(OrganizationEndpoint):\n+    owner = ApiOwner.FEEDBACK\n+    publish_status = {\n+        \"GET\": ApiPublishStatus.EXPERIMENTAL,\n+    }\n+    permission_classes = (OrganizationUserReportsPermission,)\n+\n+    def get(self, request: Request, organization: Organization) -> Response:\n+        \"\"\"\n+        Get the summary of the user feedbacks of an organization\n+        ``````````````````````````````````````````````````\n+\n+        Returns the summary of the user feedbacks. The user feedbacks can be filtered by:\n+        - A list of projects\n+        - The date range that they were first seen in (defaults to 7 days)\n+\n+        :pparam string organization_id_or_slug: the id or slug of the organization.\n+        :qparam list[int] project: list of project IDs to filter by",
        "comment_created_at": "2025-06-10T20:59:24+00:00",
        "comment_author": "michellewzhang",
        "comment_body": "to test list format you can just pass into the query params like this:\r\n\r\nhttps://github.com/getsentry/sentry/blob/5cb52f9f94c69ac3be6499da39b1de4f4235c070/tests/sentry/api/endpoints/test_organization_users.py#L28\r\n\r\nto test the url param format:\r\n\r\nhttps://github.com/getsentry/sentry/blob/5cb52f9f94c69ac3be6499da39b1de4f4235c070/tests/sentry/issues/endpoints/test_organization_issue_metrics.py#L131-L134\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2138767877",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/endpoints/organization_feedback_summary.py",
        "discussion_id": "2138419151",
        "commented_code": "@@ -0,0 +1,103 @@\n+import logging\n+from datetime import timedelta\n+\n+from rest_framework.exceptions import ParseError\n+from rest_framework.request import Request\n+from rest_framework.response import Response\n+\n+from sentry.api.api_owners import ApiOwner\n+from sentry.api.api_publish_status import ApiPublishStatus\n+from sentry.api.base import region_silo_endpoint\n+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationUserReportsPermission\n+from sentry.api.utils import get_date_range_from_stats_period\n+from sentry.exceptions import InvalidParams\n+from sentry.feedback.usecases.feedback_summaries import generate_summary\n+from sentry.issues.grouptype import FeedbackGroup\n+from sentry.models.group import Group, GroupStatus\n+from sentry.models.organization import Organization\n+\n+logger = logging.getLogger(__name__)\n+\n+MIN_FEEDBACKS_TO_SUMMARIZE = 10\n+MAX_FEEDBACKS_TO_SUMMARIZE = 1000\n+# Token limit is 1,048,576 tokens, see https://ai.google.dev/gemini-api/docs/models#gemini-2.0-flash\n+MAX_FEEDBACKS_TO_SUMMARIZE_CHARS = 1000000\n+\n+\n+@region_silo_endpoint\n+class OrganizationFeedbackSummaryEndpoint(OrganizationEndpoint):\n+    owner = ApiOwner.FEEDBACK\n+    publish_status = {\n+        \"GET\": ApiPublishStatus.EXPERIMENTAL,\n+    }\n+    permission_classes = (OrganizationUserReportsPermission,)\n+\n+    def get(self, request: Request, organization: Organization) -> Response:\n+        \"\"\"\n+        Get the summary of the user feedbacks of an organization\n+        ``````````````````````````````````````````````````\n+\n+        Returns the summary of the user feedbacks. The user feedbacks can be filtered by:\n+        - A list of projects\n+        - The date range that they were first seen in (defaults to 7 days)\n+\n+        :pparam string organization_id_or_slug: the id or slug of the organization.\n+        :qparam list[int] project: list of project IDs to filter by",
        "comment_created_at": "2025-06-10T21:05:44+00:00",
        "comment_author": "vishnupsatish",
        "comment_body": "ah, that makes sense, thanks",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2138444606",
    "pr_number": 93134,
    "pr_file": "src/sentry/api/urls.py",
    "created_at": "2025-06-10T17:33:35+00:00",
    "commented_code": "OrganizationUserReportsEndpoint.as_view(),\n         name=\"sentry-api-0-organization-user-feedback\",\n     ),\n+    re_path(\n+        r\"^(?P<organization_id_or_slug>[^\\/]+)/user-feedback-summary/$\",",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2138444606",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/urls.py",
        "discussion_id": "2138444606",
        "commented_code": "@@ -2059,6 +2060,11 @@ def create_group_urls(name_prefix: str) -> list[URLPattern | URLResolver]:\n         OrganizationUserReportsEndpoint.as_view(),\n         name=\"sentry-api-0-organization-user-feedback\",\n     ),\n+    re_path(\n+        r\"^(?P<organization_id_or_slug>[^\\/]+)/user-feedback-summary/$\",",
        "comment_created_at": "2025-06-10T17:33:35+00:00",
        "comment_author": "aliu39",
        "comment_body": "I'd ask for feedback on this path w/the rest of the team",
        "pr_file_module": null
      },
      {
        "comment_id": "2140413121",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/urls.py",
        "discussion_id": "2138444606",
        "commented_code": "@@ -2059,6 +2060,11 @@ def create_group_urls(name_prefix: str) -> list[URLPattern | URLResolver]:\n         OrganizationUserReportsEndpoint.as_view(),\n         name=\"sentry-api-0-organization-user-feedback\",\n     ),\n+    re_path(\n+        r\"^(?P<organization_id_or_slug>[^\\/]+)/user-feedback-summary/$\",",
        "comment_created_at": "2025-06-11T14:53:00+00:00",
        "comment_author": "cmanallen",
        "comment_body": "I prefer when we have endpoints which do something like `/replays/<replay_id>/` that our URLs don't clash.  So adding `/replays/summary/` would mean we have ambiguity.  Is summary an ID or a literal?  The ordering of the URLs becomes important and rare but annoying issues can come up.\r\n\r\nIn the user-feedback case we don't have the `/<id>` endpoint.  So its fine.  But if its ever introduced then we'll have this issue.  `/user-feedback-summary` side steps this.\r\n\r\nBut honestly up to you what you want to name it.  I don't think we'll use the `/id` name space.  And if we do then its not the end of the world to order the definitions.  We do it elsewhere anyway.",
        "pr_file_module": null
      },
      {
        "comment_id": "2140796173",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/urls.py",
        "discussion_id": "2138444606",
        "commented_code": "@@ -2059,6 +2060,11 @@ def create_group_urls(name_prefix: str) -> list[URLPattern | URLResolver]:\n         OrganizationUserReportsEndpoint.as_view(),\n         name=\"sentry-api-0-organization-user-feedback\",\n     ),\n+    re_path(\n+        r\"^(?P<organization_id_or_slug>[^\\/]+)/user-feedback-summary/$\",",
        "comment_created_at": "2025-06-11T18:12:09+00:00",
        "comment_author": "vishnupsatish",
        "comment_body": "Right now it's `/user-feedback/summary`, do you recommend I change it back to `/user-feedback-summary`? Makes sense that there can be ambiguity if we do introduce a new endpoint like `/user-feedback/<id>`",
        "pr_file_module": null
      },
      {
        "comment_id": "2141193156",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/urls.py",
        "discussion_id": "2138444606",
        "commented_code": "@@ -2059,6 +2060,11 @@ def create_group_urls(name_prefix: str) -> list[URLPattern | URLResolver]:\n         OrganizationUserReportsEndpoint.as_view(),\n         name=\"sentry-api-0-organization-user-feedback\",\n     ),\n+    re_path(\n+        r\"^(?P<organization_id_or_slug>[^\\/]+)/user-feedback-summary/$\",",
        "comment_created_at": "2025-06-11T22:08:43+00:00",
        "comment_author": "aliu39",
        "comment_body": "Considering Colton's comment, I think `/feedback-summary/` would be best. To me feedback feels better than user-feedback because 1) that's the module name in our codebase and 2) historically we had a view called /user-feedback/ for the legacy data format. Also legacy API is called `captureUserFeedback` while the new one's `captureFeedback`. So I'd go with \"feedback\" here",
        "pr_file_module": null
      },
      {
        "comment_id": "2141194894",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/urls.py",
        "discussion_id": "2138444606",
        "commented_code": "@@ -2059,6 +2060,11 @@ def create_group_urls(name_prefix: str) -> list[URLPattern | URLResolver]:\n         OrganizationUserReportsEndpoint.as_view(),\n         name=\"sentry-api-0-organization-user-feedback\",\n     ),\n+    re_path(\n+        r\"^(?P<organization_id_or_slug>[^\\/]+)/user-feedback-summary/$\",",
        "comment_created_at": "2025-06-11T22:10:09+00:00",
        "comment_author": "vishnupsatish",
        "comment_body": "That sounds good, I'll update it",
        "pr_file_module": null
      }
    ]
  }
]