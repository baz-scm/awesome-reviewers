[
  {
    "discussion_id": "2190568744",
    "pr_number": 94893,
    "pr_file": "static/app/views/codecov/tests/testSearchBar/testSearchBar.tsx",
    "created_at": "2025-07-07T16:28:40+00:00",
    "commented_code": "+import {useMemo} from 'react';\n+import {useSearchParams} from 'react-router-dom';\n+import styled from '@emotion/styled';\n+import debounce from 'lodash/debounce';\n+\n+import BaseSearchBar from 'sentry/components/searchBar';\n+import {t} from 'sentry/locale';\n+import {space} from 'sentry/styles/space';\n+\n+const FILTER_TO_NAME = {\n+  slowestTests: 'Slowest Tests',\n+  flakyTests: 'Flaky Tests',\n+  failedTests: 'Failed Tests',\n+  skippedTests: 'Skipped Tests',\n+};\n+\n+type TestSearchBarProps = {\n+  testCount: number;\n+};\n+\n+export function TestSearchBar({testCount}: TestSearchBarProps) {\n+  const [searchParams, setSearchParams] = useSearchParams();\n+  const term = searchParams.get('term') || '';\n+\n+  const filterBy = searchParams.get('filterBy') || '';\n+  const testTitle =\n+    filterBy in FILTER_TO_NAME\n+      ? FILTER_TO_NAME[filterBy as keyof typeof FILTER_TO_NAME]\n+      : 'Tests';\n+  const count = testCount > 999 ? `${(testCount / 1000).toFixed(1)}K` : testCount;\n+  const searchTitle = `${testTitle} (${count})`;\n+\n+  const handleSearchChange = useMemo(\n+    () =>\n+      debounce((newValue: string) => {\n+        const currentParams = Object.fromEntries(searchParams.entries());\n+\n+        if (newValue) {\n+          currentParams.term = newValue;\n+        } else {\n+          delete currentParams.term;\n+        }\n+\n+        setSearchParams(currentParams);\n+      }, 500),\n+    [setSearchParams, searchParams]",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2190568744",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94893,
        "pr_file": "static/app/views/codecov/tests/testSearchBar/testSearchBar.tsx",
        "discussion_id": "2190568744",
        "commented_code": "@@ -0,0 +1,78 @@\n+import {useMemo} from 'react';\n+import {useSearchParams} from 'react-router-dom';\n+import styled from '@emotion/styled';\n+import debounce from 'lodash/debounce';\n+\n+import BaseSearchBar from 'sentry/components/searchBar';\n+import {t} from 'sentry/locale';\n+import {space} from 'sentry/styles/space';\n+\n+const FILTER_TO_NAME = {\n+  slowestTests: 'Slowest Tests',\n+  flakyTests: 'Flaky Tests',\n+  failedTests: 'Failed Tests',\n+  skippedTests: 'Skipped Tests',\n+};\n+\n+type TestSearchBarProps = {\n+  testCount: number;\n+};\n+\n+export function TestSearchBar({testCount}: TestSearchBarProps) {\n+  const [searchParams, setSearchParams] = useSearchParams();\n+  const term = searchParams.get('term') || '';\n+\n+  const filterBy = searchParams.get('filterBy') || '';\n+  const testTitle =\n+    filterBy in FILTER_TO_NAME\n+      ? FILTER_TO_NAME[filterBy as keyof typeof FILTER_TO_NAME]\n+      : 'Tests';\n+  const count = testCount > 999 ? `${(testCount / 1000).toFixed(1)}K` : testCount;\n+  const searchTitle = `${testTitle} (${count})`;\n+\n+  const handleSearchChange = useMemo(\n+    () =>\n+      debounce((newValue: string) => {\n+        const currentParams = Object.fromEntries(searchParams.entries());\n+\n+        if (newValue) {\n+          currentParams.term = newValue;\n+        } else {\n+          delete currentParams.term;\n+        }\n+\n+        setSearchParams(currentParams);\n+      }, 500),\n+    [setSearchParams, searchParams]",
        "comment_created_at": "2025-07-07T16:28:40+00:00",
        "comment_author": "calvin-codecov",
        "comment_body": "Having `searchParams` as a useMemo dependency will cause redefining handleSearchChange on every rerender since it is treated as a different object every time. I think we need a way to debounce this without relying on `searcchParams`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2190847158",
    "pr_number": 94887,
    "pr_file": "static/app/views/explore/logs/logsAutoRefresh.tsx",
    "created_at": "2025-07-07T19:11:34+00:00",
    "commented_code": "useSetLogsAutoRefresh,\n } from 'sentry/views/explore/contexts/logs/logsPageParams';\n import {AutoRefreshLabel} from 'sentry/views/explore/logs/styles';\n-import {checkSortIsTimeBased} from 'sentry/views/explore/logs/utils';\n+import {\n+  checkSortIsTimeBasedDescending,\n+  parseLinkHeaderFromLogsPage,\n+} from 'sentry/views/explore/logs/utils';\n+\n+const ABSOLUTE_MAX_AUTO_REFRESH_TIME_MS = 1000 * 60 * 10; // 10 minutes absolute max\n+const CONSECUTIVE_PAGES_WITH_MORE_DATA = 3; // Number of consecutive requests with more data before disabling\n \n-const MAX_AUTO_REFRESH_TIME_MS = 1000 * 60 * 5; // 5 minutes\n-const MAX_PAGES_PER_REFRESH = 10;\n-let _callCounts = 0;\n+type DisableReason = 'sort' | 'timeout' | 'rateLimit' | 'error';\n+\n+const SWITCH_DISABLE_REASONS: DisableReason[] = ['sort'];\n \n export function AutorefreshToggle() {\n+  const {selection} = usePageFilters();\n+  const previousProjects = usePrevious(selection.projects);\n   const checked = useLogsAutoRefresh();\n   const setChecked = useSetLogsAutoRefresh();\n   const sortBys = useLogsSortBys();\n   const refreshInterval = useLogsRefreshInterval();\n   const {infiniteLogsQueryResult} = useLogsPageData();\n-  const {fetchPreviousPage} = infiniteLogsQueryResult;\n+  const {fetchPreviousPage, isError} = infiniteLogsQueryResult;\n \n-  const refreshCallback = useRef(() => {}); // Since the interval fetches data, it's an infinite dependency loop.\n+  const sortBysString = JSON.stringify(sortBys);",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2190847158",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94887,
        "pr_file": "static/app/views/explore/logs/logsAutoRefresh.tsx",
        "discussion_id": "2190847158",
        "commented_code": "@@ -12,105 +15,243 @@ import {\n   useSetLogsAutoRefresh,\n } from 'sentry/views/explore/contexts/logs/logsPageParams';\n import {AutoRefreshLabel} from 'sentry/views/explore/logs/styles';\n-import {checkSortIsTimeBased} from 'sentry/views/explore/logs/utils';\n+import {\n+  checkSortIsTimeBasedDescending,\n+  parseLinkHeaderFromLogsPage,\n+} from 'sentry/views/explore/logs/utils';\n+\n+const ABSOLUTE_MAX_AUTO_REFRESH_TIME_MS = 1000 * 60 * 10; // 10 minutes absolute max\n+const CONSECUTIVE_PAGES_WITH_MORE_DATA = 3; // Number of consecutive requests with more data before disabling\n \n-const MAX_AUTO_REFRESH_TIME_MS = 1000 * 60 * 5; // 5 minutes\n-const MAX_PAGES_PER_REFRESH = 10;\n-let _callCounts = 0;\n+type DisableReason = 'sort' | 'timeout' | 'rateLimit' | 'error';\n+\n+const SWITCH_DISABLE_REASONS: DisableReason[] = ['sort'];\n \n export function AutorefreshToggle() {\n+  const {selection} = usePageFilters();\n+  const previousProjects = usePrevious(selection.projects);\n   const checked = useLogsAutoRefresh();\n   const setChecked = useSetLogsAutoRefresh();\n   const sortBys = useLogsSortBys();\n   const refreshInterval = useLogsRefreshInterval();\n   const {infiniteLogsQueryResult} = useLogsPageData();\n-  const {fetchPreviousPage} = infiniteLogsQueryResult;\n+  const {fetchPreviousPage, isError} = infiniteLogsQueryResult;\n \n-  const refreshCallback = useRef(() => {}); // Since the interval fetches data, it's an infinite dependency loop.\n+  const sortBysString = JSON.stringify(sortBys);",
        "comment_created_at": "2025-07-07T19:11:34+00:00",
        "comment_author": "AbhiPrasad",
        "comment_body": "we should probably `useMemo` this.",
        "pr_file_module": null
      }
    ]
  }
]