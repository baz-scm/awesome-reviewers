[
  {
    "discussion_id": "2171245817",
    "pr_number": 94509,
    "pr_file": "static/app/components/group/externalIssuesList/streamlinedExternalIssueList.tsx",
    "created_at": "2025-06-27T08:41:29+00:00",
    "commented_code": "}\n                 isHoverable\n               >\n-                <LinkedIssue\n+                <LinkButton\n                   href={linkedIssue.url}\n                   external\n                   size=\"zero\"\n                   icon={linkedIssue.displayIcon}\n                 >\n                   <IssueActionName>{linkedIssue.displayName}</IssueActionName>\n-                </LinkedIssue>\n+                </LinkButton>\n               </Tooltip>\n             </ErrorBoundary>\n           ))}\n         </IssueActionWrapper>\n       )}\n-      {integrations.length > 0 && (\n-        <IssueActionWrapper>\n-          {integrations.map(integration => {\n-            const sharedButtonProps: ButtonProps = {\n-              size: 'zero',\n-              icon: integration.displayIcon,\n-              children: <IssueActionName>{integration.displayName}</IssueActionName>,\n-            };\n+      <ExternalIssueMenu linkedIssues={linkedIssues} integrations={integrations} />\n+    </Flex>\n+  );\n+}\n \n+function ExternalIssueMenu(props: ReturnType<typeof useGroupExternalIssues>) {\n+  const organization = useOrganization({allowNull: false});\n+\n+  return (\n+    <Fragment>\n+      <CompositeSelect\n+        trigger={triggerProps => (\n+          <Button {...triggerProps} size=\"zero\" icon={<IconAdd />}>\n+            {props.linkedIssues.length === 0 ? t('Add Linked Issue') : null}\n+          </Button>\n+        )}\n+        // Required for submenu interactions\n+        isDismissable={false}\n+        menuTitle={t('Add Linked Issue')}\n+        hideOptions={props.integrations.length === 0}\n+        menuBody={props.integrations.length === 0 && <ExternalIssueMenuEmpty />}\n+        menuFooter={props.integrations.length > 0 && <ExternalIssueManageLink />}\n+      >\n+        <CompositeSelect.Region\n+          closeOnSelect={({value}) => {\n+            const integration = props.integrations.find(({key}) => key === value);\n+            if (!integration) {\n+              return true;\n+            }",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2171245817",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94509,
        "pr_file": "static/app/components/group/externalIssuesList/streamlinedExternalIssueList.tsx",
        "discussion_id": "2171245817",
        "commented_code": "@@ -112,143 +104,152 @@ export function StreamlinedExternalIssueList({\n                 }\n                 isHoverable\n               >\n-                <LinkedIssue\n+                <LinkButton\n                   href={linkedIssue.url}\n                   external\n                   size=\"zero\"\n                   icon={linkedIssue.displayIcon}\n                 >\n                   <IssueActionName>{linkedIssue.displayName}</IssueActionName>\n-                </LinkedIssue>\n+                </LinkButton>\n               </Tooltip>\n             </ErrorBoundary>\n           ))}\n         </IssueActionWrapper>\n       )}\n-      {integrations.length > 0 && (\n-        <IssueActionWrapper>\n-          {integrations.map(integration => {\n-            const sharedButtonProps: ButtonProps = {\n-              size: 'zero',\n-              icon: integration.displayIcon,\n-              children: <IssueActionName>{integration.displayName}</IssueActionName>,\n-            };\n+      <ExternalIssueMenu linkedIssues={linkedIssues} integrations={integrations} />\n+    </Flex>\n+  );\n+}\n \n+function ExternalIssueMenu(props: ReturnType<typeof useGroupExternalIssues>) {\n+  const organization = useOrganization({allowNull: false});\n+\n+  return (\n+    <Fragment>\n+      <CompositeSelect\n+        trigger={triggerProps => (\n+          <Button {...triggerProps} size=\"zero\" icon={<IconAdd />}>\n+            {props.linkedIssues.length === 0 ? t('Add Linked Issue') : null}\n+          </Button>\n+        )}\n+        // Required for submenu interactions\n+        isDismissable={false}\n+        menuTitle={t('Add Linked Issue')}\n+        hideOptions={props.integrations.length === 0}\n+        menuBody={props.integrations.length === 0 && <ExternalIssueMenuEmpty />}\n+        menuFooter={props.integrations.length > 0 && <ExternalIssueManageLink />}\n+      >\n+        <CompositeSelect.Region\n+          closeOnSelect={({value}) => {\n+            const integration = props.integrations.find(({key}) => key === value);\n+            if (!integration) {\n+              return true;\n+            }",
        "comment_created_at": "2025-06-27T08:41:29+00:00",
        "comment_author": "TkDodo",
        "comment_body": "also for the future: the fact that we need to map over `props.integrations` again here to find a value (that certainly exists!) seems like a design flaw in `CompositeSelect`. It\u2019s too bad that we aren\u2019t generic on the whole option itself - only on the value.\r\n\r\nIf `options` weren\u2019t `options: Array<SelectOption<Value>>` but rather fully generic over the Option itself: `options: Array<TSelectOption>` where `TSelectionOption extends SelectOption`, we could pass in the whole `props.integration` if we want and just extract `actions` from the param we get passed  in to `closeOnSelect` and `onChange`. At runtime, we already get the full option passed in.\r\n\r\nIt\u2019s these kinds of things that would make working with our core components much easier.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2126987324",
    "pr_number": 92848,
    "pr_file": "static/app/views/alerts/rules/metric/eapField.tsx",
    "created_at": "2025-06-04T16:18:52+00:00",
    "commented_code": "return [true, {label: t('spans'), value: DEFAULT_VISUALIZATION_FIELD}];\n     }\n \n-    if (aggregation === AggregationKey.EPM || aggregation === AggregationKey.EPS) {\n+    if (\n+      aggregation &&\n+      NO_ARGUMENT_SPAN_AGGREGATES.includes(aggregation as AggregationKey)",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2126987324",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 92848,
        "pr_file": "static/app/views/alerts/rules/metric/eapField.tsx",
        "discussion_id": "2126987324",
        "commented_code": "@@ -67,7 +68,10 @@ function EAPField({aggregate, onChange}: Props) {\n       return [true, {label: t('spans'), value: DEFAULT_VISUALIZATION_FIELD}];\n     }\n \n-    if (aggregation === AggregationKey.EPM || aggregation === AggregationKey.EPS) {\n+    if (\n+      aggregation &&\n+      NO_ARGUMENT_SPAN_AGGREGATES.includes(aggregation as AggregationKey)",
        "comment_created_at": "2025-06-04T16:18:52+00:00",
        "comment_author": "DominikB2014",
        "comment_body": "I checked via console.log, there are only 5 `NO_ARGUMENT_SPAN_AGGREGATES`.\r\n`(5)\u00a0['eps', 'epm', 'failure_rate', 'failure_count', 'last_seen']`\r\nOnly `epm` and `failure_rate` are exposed so this should have no side effects and make it easier to add more no argument aggregates\r\n",
        "pr_file_module": null
      }
    ]
  }
]