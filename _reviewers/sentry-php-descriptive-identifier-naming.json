[
  {
    "discussion_id": "976407565",
    "pr_number": 1360,
    "pr_file": "src/Tracing/DynamicSamplingContext.php",
    "created_at": "2022-09-21T11:49:51+00:00",
    "commented_code": "+<?php\n+\n+declare(strict_types=1);\n+\n+namespace Sentry\\Tracing;\n+\n+use Sentry\\State\\HubInterface;\n+use Sentry\\State\\Scope;\n+\n+/**\n+ * This class represents the Dynamic Sampling Context (dsc).\n+ *\n+ * @see https://develop.sentry.dev/sdk/performance/dynamic-sampling-context/\n+ */\n+final class DynamicSamplingContext\n+{\n+    public const SENTRY_ENTRY_PREFIX = 'sentry-';\n+\n+    /**\n+     * The dsc entries.\n+     *\n+     * @var array<string, string>\n+     */\n+    private $entries;\n+\n+    /**\n+     * Indicates that the dsc is frozen and cannot be mutated.\n+     *\n+     * @var bool\n+     */\n+    private $frozen = false;",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "976407565",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1360,
        "pr_file": "src/Tracing/DynamicSamplingContext.php",
        "discussion_id": "976407565",
        "commented_code": "@@ -0,0 +1,201 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+namespace Sentry\\Tracing;\n+\n+use Sentry\\State\\HubInterface;\n+use Sentry\\State\\Scope;\n+\n+/**\n+ * This class represents the Dynamic Sampling Context (dsc).\n+ *\n+ * @see https://develop.sentry.dev/sdk/performance/dynamic-sampling-context/\n+ */\n+final class DynamicSamplingContext\n+{\n+    public const SENTRY_ENTRY_PREFIX = 'sentry-';\n+\n+    /**\n+     * The dsc entries.\n+     *\n+     * @var array<string, string>\n+     */\n+    private $entries;\n+\n+    /**\n+     * Indicates that the dsc is frozen and cannot be mutated.\n+     *\n+     * @var bool\n+     */\n+    private $frozen = false;",
        "comment_created_at": "2022-09-21T11:49:51+00:00",
        "comment_author": "vladanpaunovic",
        "comment_body": "Why is this `false`?",
        "pr_file_module": null
      },
      {
        "comment_id": "976408649",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1360,
        "pr_file": "src/Tracing/DynamicSamplingContext.php",
        "discussion_id": "976407565",
        "commented_code": "@@ -0,0 +1,201 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+namespace Sentry\\Tracing;\n+\n+use Sentry\\State\\HubInterface;\n+use Sentry\\State\\Scope;\n+\n+/**\n+ * This class represents the Dynamic Sampling Context (dsc).\n+ *\n+ * @see https://develop.sentry.dev/sdk/performance/dynamic-sampling-context/\n+ */\n+final class DynamicSamplingContext\n+{\n+    public const SENTRY_ENTRY_PREFIX = 'sentry-';\n+\n+    /**\n+     * The dsc entries.\n+     *\n+     * @var array<string, string>\n+     */\n+    private $entries;\n+\n+    /**\n+     * Indicates that the dsc is frozen and cannot be mutated.\n+     *\n+     * @var bool\n+     */\n+    private $frozen = false;",
        "comment_created_at": "2022-09-21T11:51:10+00:00",
        "comment_author": "vladanpaunovic",
        "comment_body": "Also, for boolean variable names, it is always better to prefix them with `is`, `has` or something similar, where possible. This could be easier to read as `isFrozen`.",
        "pr_file_module": null
      },
      {
        "comment_id": "978648838",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1360,
        "pr_file": "src/Tracing/DynamicSamplingContext.php",
        "discussion_id": "976407565",
        "commented_code": "@@ -0,0 +1,201 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+namespace Sentry\\Tracing;\n+\n+use Sentry\\State\\HubInterface;\n+use Sentry\\State\\Scope;\n+\n+/**\n+ * This class represents the Dynamic Sampling Context (dsc).\n+ *\n+ * @see https://develop.sentry.dev/sdk/performance/dynamic-sampling-context/\n+ */\n+final class DynamicSamplingContext\n+{\n+    public const SENTRY_ENTRY_PREFIX = 'sentry-';\n+\n+    /**\n+     * The dsc entries.\n+     *\n+     * @var array<string, string>\n+     */\n+    private $entries;\n+\n+    /**\n+     * Indicates that the dsc is frozen and cannot be mutated.\n+     *\n+     * @var bool\n+     */\n+    private $frozen = false;",
        "comment_created_at": "2022-09-23T13:17:23+00:00",
        "comment_author": "cleptric",
        "comment_body": "By default, a DSC is mutable until you add values to it. This reflects that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "977016353",
    "pr_number": 1360,
    "pr_file": "src/Tracing/DynamicSamplingContext.php",
    "created_at": "2022-09-21T21:53:52+00:00",
    "commented_code": "+<?php\n+\n+declare(strict_types=1);\n+\n+namespace Sentry\\Tracing;\n+\n+use Sentry\\State\\HubInterface;\n+use Sentry\\State\\Scope;\n+\n+/**\n+ * This class represents the Dynamic Sampling Context (dsc).\n+ *\n+ * @see https://develop.sentry.dev/sdk/performance/dynamic-sampling-context/\n+ */\n+final class DynamicSamplingContext\n+{\n+    public const SENTRY_ENTRY_PREFIX = 'sentry-';\n+\n+    /**\n+     * The dsc entries.\n+     *\n+     * @var array<string, string>\n+     */\n+    private $entries;\n+\n+    /**\n+     * Indicates that the dsc is frozen and cannot be mutated.\n+     *\n+     * @var bool\n+     */\n+    private $frozen = false;\n+\n+    /**\n+     * Construct a new dsc object.\n+     */\n+    private function __construct()\n+    {\n+        $this->entries = [];\n+    }\n+\n+    /**\n+     * Set a new key value pair on the dsc.\n+     *\n+     * @param string $key   the list member key\n+     * @param string $value the list member value\n+     */\n+    public function set(string $key, string $value): void\n+    {\n+        if ($this->frozen) {\n+            return;\n+        }\n+\n+        $this->entries[$key] = $value;\n+    }\n+\n+    /**\n+     * Check if a key value pair is set on the dsc.\n+     *\n+     * @param string $key the list member key\n+     */\n+    public function has(string $key): bool\n+    {\n+        return isset($this->entries[$key]);\n+    }\n+\n+    /**\n+     * Get a value from the dsc.\n+     *\n+     * @param string      $key     the list member key\n+     * @param string|null $default the default value to return if no value exists\n+     */\n+    public function get(string $key, ?string $default = null): ?string\n+    {\n+        return $this->entries[$key] ?? $default;\n+    }\n+\n+    /**\n+     * Mark the dsc as frozen.\n+     */\n+    public function freeze(): void\n+    {\n+        $this->frozen = true;\n+    }\n+\n+    /**\n+     * Indicates that the dsc is frozen and cannot be mutated.\n+     */\n+    public function isFrozen(): bool\n+    {\n+        return $this->frozen;\n+    }\n+\n+    /**\n+     * Check if there are any entries set.\n+     */\n+    public function hasEntries(): bool\n+    {\n+        return !empty($this->entries);\n+    }\n+\n+    /**\n+     * Gets the dsc entries.\n+     *\n+     * @return array<string, string>\n+     */\n+    public function getEntries(): array\n+    {\n+        return $this->entries;\n+    }\n+\n+    /**\n+     * Parse the baggage header.\n+     *\n+     * @param string $header the baggage header contents\n+     */\n+    public static function fromHeader(string $header): self\n+    {\n+        $dsc = new self();",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "977016353",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1360,
        "pr_file": "src/Tracing/DynamicSamplingContext.php",
        "discussion_id": "977016353",
        "commented_code": "@@ -0,0 +1,201 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+namespace Sentry\\Tracing;\n+\n+use Sentry\\State\\HubInterface;\n+use Sentry\\State\\Scope;\n+\n+/**\n+ * This class represents the Dynamic Sampling Context (dsc).\n+ *\n+ * @see https://develop.sentry.dev/sdk/performance/dynamic-sampling-context/\n+ */\n+final class DynamicSamplingContext\n+{\n+    public const SENTRY_ENTRY_PREFIX = 'sentry-';\n+\n+    /**\n+     * The dsc entries.\n+     *\n+     * @var array<string, string>\n+     */\n+    private $entries;\n+\n+    /**\n+     * Indicates that the dsc is frozen and cannot be mutated.\n+     *\n+     * @var bool\n+     */\n+    private $frozen = false;\n+\n+    /**\n+     * Construct a new dsc object.\n+     */\n+    private function __construct()\n+    {\n+        $this->entries = [];\n+    }\n+\n+    /**\n+     * Set a new key value pair on the dsc.\n+     *\n+     * @param string $key   the list member key\n+     * @param string $value the list member value\n+     */\n+    public function set(string $key, string $value): void\n+    {\n+        if ($this->frozen) {\n+            return;\n+        }\n+\n+        $this->entries[$key] = $value;\n+    }\n+\n+    /**\n+     * Check if a key value pair is set on the dsc.\n+     *\n+     * @param string $key the list member key\n+     */\n+    public function has(string $key): bool\n+    {\n+        return isset($this->entries[$key]);\n+    }\n+\n+    /**\n+     * Get a value from the dsc.\n+     *\n+     * @param string      $key     the list member key\n+     * @param string|null $default the default value to return if no value exists\n+     */\n+    public function get(string $key, ?string $default = null): ?string\n+    {\n+        return $this->entries[$key] ?? $default;\n+    }\n+\n+    /**\n+     * Mark the dsc as frozen.\n+     */\n+    public function freeze(): void\n+    {\n+        $this->frozen = true;\n+    }\n+\n+    /**\n+     * Indicates that the dsc is frozen and cannot be mutated.\n+     */\n+    public function isFrozen(): bool\n+    {\n+        return $this->frozen;\n+    }\n+\n+    /**\n+     * Check if there are any entries set.\n+     */\n+    public function hasEntries(): bool\n+    {\n+        return !empty($this->entries);\n+    }\n+\n+    /**\n+     * Gets the dsc entries.\n+     *\n+     * @return array<string, string>\n+     */\n+    public function getEntries(): array\n+    {\n+        return $this->entries;\n+    }\n+\n+    /**\n+     * Parse the baggage header.\n+     *\n+     * @param string $header the baggage header contents\n+     */\n+    public static function fromHeader(string $header): self\n+    {\n+        $dsc = new self();",
        "comment_created_at": "2022-09-21T21:53:52+00:00",
        "comment_author": "ste93cry",
        "comment_body": "I'm not a fan of abbreviations and acronyms when writing code. What about renaming this variable to `samplingContext`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "978959637",
    "pr_number": 1360,
    "pr_file": "src/Tracing/Transaction.php",
    "created_at": "2022-09-23T18:23:27+00:00",
    "commented_code": "$this->name = $name;\n     }\n \n+    /**\n+     * Gets the transaction metadata.\n+     */\n+    public function getMetadata(): TransactionMetadata\n+    {\n+        return $this->metadata;\n+    }\n+\n+    /**\n+     * Gets the transaction dynamic sampling context.\n+     */\n+    public function getDynamicSamplingContext(): DynamicSamplingContext\n+    {\n+        if (null !== $this->getMetadata()->getDynamicSamplingContext()) {\n+            return $this->getMetadata()->getDynamicSamplingContext();\n+        }\n+\n+        $dsc = DynamicSamplingContext::fromTransaction($this->transaction, $this->hub);",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "978959637",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1360,
        "pr_file": "src/Tracing/Transaction.php",
        "discussion_id": "978959637",
        "commented_code": "@@ -59,6 +70,29 @@ public function setName(string $name): void\n         $this->name = $name;\n     }\n \n+    /**\n+     * Gets the transaction metadata.\n+     */\n+    public function getMetadata(): TransactionMetadata\n+    {\n+        return $this->metadata;\n+    }\n+\n+    /**\n+     * Gets the transaction dynamic sampling context.\n+     */\n+    public function getDynamicSamplingContext(): DynamicSamplingContext\n+    {\n+        if (null !== $this->getMetadata()->getDynamicSamplingContext()) {\n+            return $this->getMetadata()->getDynamicSamplingContext();\n+        }\n+\n+        $dsc = DynamicSamplingContext::fromTransaction($this->transaction, $this->hub);",
        "comment_created_at": "2022-09-23T18:23:27+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Nitpick: I think that renaming this variable to `$samplingContext` would be clearer for the reader in terms of cognitive load",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "445848561",
    "pr_number": 1030,
    "pr_file": "tests/Serializer/AbstractSerializerTest.php",
    "created_at": "2020-06-25T21:28:31+00:00",
    "commented_code": "$this->assertSame(['key' => 'value'], $result);\n     }\n \n+    public function traversableDataProvider(): \\Generator\n+    {\n+        yield [new \\ArrayIterator(['foo', 'bar']), ['foo', 'bar']];\n+\n+        // Also test with a non-rewindable non-cloneable iterator:\n+        $newGenerator = static function (array $array): \\Generator {\n+            yield from $array;\n+        };\n+\n+        yield [$newGenerator(['foo', 'bar']), ['foo', 'bar']];\n+    }\n+\n+    /**\n+     * @dataProvider traversableDataProvider\n+     */\n+    public function testTraversablesAreNotConsumed(\\Traversable $traversable, array $array): void",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "445848561",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1030,
        "pr_file": "tests/Serializer/AbstractSerializerTest.php",
        "discussion_id": "445848561",
        "commented_code": "@@ -65,6 +65,34 @@ public function testObjectsAreNotStrings(): void\n         $this->assertSame(['key' => 'value'], $result);\n     }\n \n+    public function traversableDataProvider(): \\Generator\n+    {\n+        yield [new \\ArrayIterator(['foo', 'bar']), ['foo', 'bar']];\n+\n+        // Also test with a non-rewindable non-cloneable iterator:\n+        $newGenerator = static function (array $array): \\Generator {\n+            yield from $array;\n+        };\n+\n+        yield [$newGenerator(['foo', 'bar']), ['foo', 'bar']];\n+    }\n+\n+    /**\n+     * @dataProvider traversableDataProvider\n+     */\n+    public function testTraversablesAreNotConsumed(\\Traversable $traversable, array $array): void",
        "comment_created_at": "2020-06-25T21:28:31+00:00",
        "comment_author": "ste93cry",
        "comment_body": "As previously we were serializing any `iterable` types I think that it would be more approprite to change the typehint accordingly. Also :pray: change `$array` to `$input` to keep consistency with the rest of the test methods of this class",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "280841284",
    "pr_number": 809,
    "pr_file": "src/Options.php",
    "created_at": "2019-05-03T16:23:48+00:00",
    "commented_code": "{\n         return $value >= 0 && $value <= self::DEFAULT_MAX_BREADCRUMBS;\n     }\n+\n+    /**\n+     * Validates all the class serializers are callables indexed by string keys.\n+     *\n+     * @param array $serializers\n+     *\n+     * @return bool\n+     */\n+    private function validateClassSerializers(array $serializers): bool\n+    {\n+        foreach ($serializers as $key => $serializer) {",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "280841284",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 809,
        "pr_file": "src/Options.php",
        "discussion_id": "280841284",
        "commented_code": "@@ -901,4 +926,22 @@ private function validateMaxBreadcrumbsOptions(int $value): bool\n     {\n         return $value >= 0 && $value <= self::DEFAULT_MAX_BREADCRUMBS;\n     }\n+\n+    /**\n+     * Validates all the class serializers are callables indexed by string keys.\n+     *\n+     * @param array $serializers\n+     *\n+     * @return bool\n+     */\n+    private function validateClassSerializers(array $serializers): bool\n+    {\n+        foreach ($serializers as $key => $serializer) {",
        "comment_created_at": "2019-05-03T16:23:48+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Please rename the `$key` variable to `$className`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "272750822",
    "pr_number": 798,
    "pr_file": "src/Breadcrumb.php",
    "created_at": "2019-04-05T21:33:52+00:00",
    "commented_code": "];\n     }\n \n+    /**\n+     * Constructon helper.\n+     *\n+     * @param array $array The set of construction key/value pairs\n+     */\n+    public static function fromArray(array $array): self",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "272750822",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 798,
        "pr_file": "src/Breadcrumb.php",
        "discussion_id": "272750822",
        "commented_code": "@@ -357,6 +362,22 @@ public function toArray(): array\n         ];\n     }\n \n+    /**\n+     * Constructon helper.\n+     *\n+     * @param array $array The set of construction key/value pairs\n+     */\n+    public static function fromArray(array $array): self",
        "comment_created_at": "2019-04-05T21:33:52+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Please rename the parameter to `$data`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "254230333",
    "pr_number": 752,
    "pr_file": "tests/EventTest.php",
    "created_at": "2019-02-06T11:18:53+00:00",
    "commented_code": "$this->assertEquals($expected, $event->toArray());\n     }\n \n-    public function testToArrayWithMessage(): void\n+    /**\n+     * @dataProvider toArrayWithMessageDataProvider\n+     */\n+    public function testToArrayWithMessage(array $message, $expectedValue): void",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "254230333",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 752,
        "pr_file": "tests/EventTest.php",
        "discussion_id": "254230333",
        "commented_code": "@@ -119,32 +119,27 @@ public function testToArray(): void\n         $this->assertEquals($expected, $event->toArray());\n     }\n \n-    public function testToArrayWithMessage(): void\n+    /**\n+     * @dataProvider toArrayWithMessageDataProvider\n+     */\n+    public function testToArrayWithMessage(array $message, $expectedValue): void",
        "comment_created_at": "2019-02-06T11:18:53+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Please rename this variable to something that better reflect what it stores (e.g. `$setMessageMethodArguments`)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "254234619",
    "pr_number": 752,
    "pr_file": "tests/EventTest.php",
    "created_at": "2019-02-06T11:32:52+00:00",
    "commented_code": "$this->assertSame($breadcrumbs, $data['breadcrumbs']['values']);\n     }\n \n+    /**\n+     * @dataProvider getMessageDataProvider\n+     */\n+    public function testGetMessage(array $message, array $expectedValue): void",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "254234619",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 752,
        "pr_file": "tests/EventTest.php",
        "discussion_id": "254234619",
        "commented_code": "@@ -165,6 +160,27 @@ public function testToArrayWithBreadcrumbs(): void\n         $this->assertSame($breadcrumbs, $data['breadcrumbs']['values']);\n     }\n \n+    /**\n+     * @dataProvider getMessageDataProvider\n+     */\n+    public function testGetMessage(array $message, array $expectedValue): void",
        "comment_created_at": "2019-02-06T11:32:52+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Please rename this variable to something that better reflect what it stores (e.g. `$setMessageMethodArguments`)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "253451187",
    "pr_number": 762,
    "pr_file": "src/ErrorHandler.php",
    "created_at": "2019-02-04T12:32:08+00:00",
    "commented_code": "private const DEFAULT_RESERVED_MEMORY_SIZE = 10240;\n \n     /**\n-     * @var callable Callback that will be invoked when an error is caught\n+     * @var self The current registered handler (this class is a singleton)\n      */\n-    private $callback;\n+    private static $registeredHandler;",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "253451187",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 762,
        "pr_file": "src/ErrorHandler.php",
        "discussion_id": "253451187",
        "commented_code": "@@ -20,9 +20,19 @@ final class ErrorHandler\n     private const DEFAULT_RESERVED_MEMORY_SIZE = 10240;\n \n     /**\n-     * @var callable Callback that will be invoked when an error is caught\n+     * @var self The current registered handler (this class is a singleton)\n      */\n-    private $callback;\n+    private static $registeredHandler;",
        "comment_created_at": "2019-02-04T12:32:08+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Maybe the name `$handlerInstance` is clearer?",
        "pr_file_module": null
      }
    ]
  }
]