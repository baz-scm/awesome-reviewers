[
  {
    "discussion_id": "2123384142",
    "pr_number": 1841,
    "pr_file": "src/HttpClient/HttpClient.php",
    "created_at": "2025-06-03T10:22:47+00:00",
    "commented_code": "use Sentry\\Options;\n use Sentry\\Util\\Http;\n \n-/**\n- * @internal\n- */",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "2123384142",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1841,
        "pr_file": "src/HttpClient/HttpClient.php",
        "discussion_id": "2123384142",
        "commented_code": "@@ -7,9 +7,6 @@\n use Sentry\\Options;\n use Sentry\\Util\\Http;\n \n-/**\n- * @internal\n- */",
        "comment_created_at": "2025-06-03T10:22:47+00:00",
        "comment_author": "cleptric",
        "comment_body": "This one should stay as is.",
        "pr_file_module": null
      },
      {
        "comment_id": "2123395906",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1841,
        "pr_file": "src/HttpClient/HttpClient.php",
        "discussion_id": "2123384142",
        "commented_code": "@@ -7,9 +7,6 @@\n use Sentry\\Options;\n use Sentry\\Util\\Http;\n \n-/**\n- * @internal\n- */",
        "comment_created_at": "2025-06-03T10:29:11+00:00",
        "comment_author": "kafkiansky",
        "comment_body": "It is declared as nonâ€“final and its fields are protected, so it can be inherited in userland.",
        "pr_file_module": null
      },
      {
        "comment_id": "2123548064",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1841,
        "pr_file": "src/HttpClient/HttpClient.php",
        "discussion_id": "2123384142",
        "commented_code": "@@ -7,9 +7,6 @@\n use Sentry\\Options;\n use Sentry\\Util\\Http;\n \n-/**\n- * @internal\n- */",
        "comment_created_at": "2025-06-03T11:37:32+00:00",
        "comment_author": "cleptric",
        "comment_body": "We are not guaranteeing any BC in our Client. We want to be able to make breaking changes even in minors, hence it's marked as `@internal`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2133952523",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1841,
        "pr_file": "src/HttpClient/HttpClient.php",
        "discussion_id": "2123384142",
        "commented_code": "@@ -7,9 +7,6 @@\n use Sentry\\Options;\n use Sentry\\Util\\Http;\n \n-/**\n- * @internal\n- */",
        "comment_created_at": "2025-06-07T15:45:49+00:00",
        "comment_author": "kafkiansky",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "330480064",
    "pr_number": 821,
    "pr_file": "src/Serializer/AbstractSerializer.php",
    "created_at": "2019-10-02T10:36:19+00:00",
    "commented_code": "}\n \n     /**\n+     * This method is provided as a non-BC upgrade of serializeCallable,\n+     * since using the callable type raises a deprecation in some cases.\n+     *\n+     * @param callable $callable\n+     *\n+     * @return string\n+     */\n+    protected function serializeCallableWithoutTypeHint($callable): string\n+    {\n+        if (!\\is_callable($callable)) {\n+            throw new \\InvalidArgumentException('Expecting callable, got ' . \\gettype($callable));\n+        }\n+\n+        if (\\is_string($callable) && !\\function_exists($callable)) {\n+            return $callable;\n+        }\n+\n+        return $this->serializeCallable($callable);\n+    }\n+\n+    /**\n+     * @internal Use serializeCallableWithoutTypeHint instead (no type in argument)",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "330480064",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 821,
        "pr_file": "src/Serializer/AbstractSerializer.php",
        "discussion_id": "330480064",
        "commented_code": "@@ -261,17 +261,44 @@ protected function serializeValue($value)\n     }\n \n     /**\n+     * This method is provided as a non-BC upgrade of serializeCallable,\n+     * since using the callable type raises a deprecation in some cases.\n+     *\n+     * @param callable $callable\n+     *\n+     * @return string\n+     */\n+    protected function serializeCallableWithoutTypeHint($callable): string\n+    {\n+        if (!\\is_callable($callable)) {\n+            throw new \\InvalidArgumentException('Expecting callable, got ' . \\gettype($callable));\n+        }\n+\n+        if (\\is_string($callable) && !\\function_exists($callable)) {\n+            return $callable;\n+        }\n+\n+        return $this->serializeCallable($callable);\n+    }\n+\n+    /**\n+     * @internal Use serializeCallableWithoutTypeHint instead (no type in argument)",
        "comment_created_at": "2019-10-02T10:36:19+00:00",
        "comment_author": "ste93cry",
        "comment_body": "We cannot mark an already existing method as `@internal` or we may be tempted in the future to make changes without worrying about BC when we must instead since it was part of the public API in the past. Just leave the note instead with a link to the issue and remove the comment from the parameter instead",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "524425153",
    "pr_number": 1134,
    "pr_file": "src/State/HubInterface.php",
    "created_at": "2020-11-16T17:02:14+00:00",
    "commented_code": "* Sentry.\n      *\n      * @param TransactionContext $context Properties of the new transaction\n+     * @param array<string, mixed> $customSamplingContext Additional context that will be passed to the SamplingContext\n      */\n-    public function startTransaction(TransactionContext $context): Transaction;\n+    public function startTransaction(TransactionContext $context, ?array $customSamplingContext): Transaction;",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "524425153",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1134,
        "pr_file": "src/State/HubInterface.php",
        "discussion_id": "524425153",
        "commented_code": "@@ -139,8 +140,9 @@ public function getIntegration(string $className): ?IntegrationInterface;\n      * Sentry.\n      *\n      * @param TransactionContext $context Properties of the new transaction\n+     * @param array<string, mixed> $customSamplingContext Additional context that will be passed to the SamplingContext\n      */\n-    public function startTransaction(TransactionContext $context): Transaction;\n+    public function startTransaction(TransactionContext $context, ?array $customSamplingContext): Transaction;",
        "comment_created_at": "2020-11-16T17:02:14+00:00",
        "comment_author": "ste93cry",
        "comment_body": "This is a huge breaking change, which is not acceptable without releasing a new major version. Rather than adding this argument for real, you can comment it and handle it with `func_get_arg` in the implementation class to avoid the break: we already did it in the past and it worked even though it was a bit messy",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "356311254",
    "pr_number": 931,
    "pr_file": "src/State/Scope.php",
    "created_at": "2019-12-10T22:25:03+00:00",
    "commented_code": "/**\n      * Sets the given data in the user context.\n      *\n-     * @param array $data The data\n+     * @param array $data  The data\n+     * @param bool  $merge If true, $data will be merged into user context instead of replacing it\n      *\n      * @return $this\n      */\n-    public function setUser(array $data): self\n+    public function setUser(array $data, bool $merge = false): self\n     {\n+        if ($merge) {\n+            $this->user->merge($data);\n+\n+            return $this;\n+        }\n+\n+        @trigger_error('Replacing user context on setUser is deprecated since sentry-php 2.3 and will be changed to a merge on 3.0. '\n+             . 'For now you can use $merge = true to merge instead of replacing it.', E_USER_DEPRECATED);\n+\n         $this->user->replaceData($data);\n \n         return $this;\n     }\n \n+    /**\n+     * Clears all user context data.\n+     *\n+     * @return $this\n+     */\n+    public function clearUser(): self",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "356311254",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 931,
        "pr_file": "src/State/Scope.php",
        "discussion_id": "356311254",
        "commented_code": "@@ -130,17 +130,39 @@ public function setExtras(array $extras): self\n     /**\n      * Sets the given data in the user context.\n      *\n-     * @param array $data The data\n+     * @param array $data  The data\n+     * @param bool  $merge If true, $data will be merged into user context instead of replacing it\n      *\n      * @return $this\n      */\n-    public function setUser(array $data): self\n+    public function setUser(array $data, bool $merge = false): self\n     {\n+        if ($merge) {\n+            $this->user->merge($data);\n+\n+            return $this;\n+        }\n+\n+        @trigger_error('Replacing user context on setUser is deprecated since sentry-php 2.3 and will be changed to a merge on 3.0. '\n+             . 'For now you can use $merge = true to merge instead of replacing it.', E_USER_DEPRECATED);\n+\n         $this->user->replaceData($data);\n \n         return $this;\n     }\n \n+    /**\n+     * Clears all user context data.\n+     *\n+     * @return $this\n+     */\n+    public function clearUser(): self",
        "comment_created_at": "2019-12-10T22:25:03+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Although having the `clear` word in the method's name is fine for me, Unified API specs talks about a `removeUser` method so we should stick with it. But if @HazAT is fine with changing such specs (I don't know if any of the other SDKs implement this method) we may leave it as is or rename it to `clearUserContext` (but this would be inconsistent with the rest of the methods, which I would have named with the `Context` suffix by the way)",
        "pr_file_module": null
      },
      {
        "comment_id": "356567742",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 931,
        "pr_file": "src/State/Scope.php",
        "discussion_id": "356311254",
        "commented_code": "@@ -130,17 +130,39 @@ public function setExtras(array $extras): self\n     /**\n      * Sets the given data in the user context.\n      *\n-     * @param array $data The data\n+     * @param array $data  The data\n+     * @param bool  $merge If true, $data will be merged into user context instead of replacing it\n      *\n      * @return $this\n      */\n-    public function setUser(array $data): self\n+    public function setUser(array $data, bool $merge = false): self\n     {\n+        if ($merge) {\n+            $this->user->merge($data);\n+\n+            return $this;\n+        }\n+\n+        @trigger_error('Replacing user context on setUser is deprecated since sentry-php 2.3 and will be changed to a merge on 3.0. '\n+             . 'For now you can use $merge = true to merge instead of replacing it.', E_USER_DEPRECATED);\n+\n         $this->user->replaceData($data);\n \n         return $this;\n     }\n \n+    /**\n+     * Clears all user context data.\n+     *\n+     * @return $this\n+     */\n+    public function clearUser(): self",
        "comment_created_at": "2019-12-11T12:24:22+00:00",
        "comment_author": "volkyeth",
        "comment_body": "I named it that way to be consistent with `Scope::clear()` and `Scope::clearBreadcrumbs()`, but yeah, we should go with the unified spec. Renamed it to removeUser(): 304803c\r\n\r\n(I find the behaviour of clearing the context on setUser() with an empty array to be pretty cryptic)",
        "pr_file_module": null
      },
      {
        "comment_id": "356654043",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 931,
        "pr_file": "src/State/Scope.php",
        "discussion_id": "356311254",
        "commented_code": "@@ -130,17 +130,39 @@ public function setExtras(array $extras): self\n     /**\n      * Sets the given data in the user context.\n      *\n-     * @param array $data The data\n+     * @param array $data  The data\n+     * @param bool  $merge If true, $data will be merged into user context instead of replacing it\n      *\n      * @return $this\n      */\n-    public function setUser(array $data): self\n+    public function setUser(array $data, bool $merge = false): self\n     {\n+        if ($merge) {\n+            $this->user->merge($data);\n+\n+            return $this;\n+        }\n+\n+        @trigger_error('Replacing user context on setUser is deprecated since sentry-php 2.3 and will be changed to a merge on 3.0. '\n+             . 'For now you can use $merge = true to merge instead of replacing it.', E_USER_DEPRECATED);\n+\n         $this->user->replaceData($data);\n \n         return $this;\n     }\n \n+    /**\n+     * Clears all user context data.\n+     *\n+     * @return $this\n+     */\n+    public function clearUser(): self",
        "comment_created_at": "2019-12-11T15:11:40+00:00",
        "comment_author": "ste93cry",
        "comment_body": "I had a look at the other SDKs and I read again the documentation and I think I misunderstood what was written there. Basically, the documentation suggests as a way to remove data from a context the `remove*` method. However this method should not clear the whole context, but just remove a given item from it, so can you please update the code to selectively unset a certain key of the context?",
        "pr_file_module": null
      },
      {
        "comment_id": "356761393",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 931,
        "pr_file": "src/State/Scope.php",
        "discussion_id": "356311254",
        "commented_code": "@@ -130,17 +130,39 @@ public function setExtras(array $extras): self\n     /**\n      * Sets the given data in the user context.\n      *\n-     * @param array $data The data\n+     * @param array $data  The data\n+     * @param bool  $merge If true, $data will be merged into user context instead of replacing it\n      *\n      * @return $this\n      */\n-    public function setUser(array $data): self\n+    public function setUser(array $data, bool $merge = false): self\n     {\n+        if ($merge) {\n+            $this->user->merge($data);\n+\n+            return $this;\n+        }\n+\n+        @trigger_error('Replacing user context on setUser is deprecated since sentry-php 2.3 and will be changed to a merge on 3.0. '\n+             . 'For now you can use $merge = true to merge instead of replacing it.', E_USER_DEPRECATED);\n+\n         $this->user->replaceData($data);\n \n         return $this;\n     }\n \n+    /**\n+     * Clears all user context data.\n+     *\n+     * @return $this\n+     */\n+    public function clearUser(): self",
        "comment_created_at": "2019-12-11T18:27:54+00:00",
        "comment_author": "volkyeth",
        "comment_body": "Ref: https://docs.sentry.io/development/sdk-dev/unified-api/#scope\r\n\r\n> scope.set_user(user): Shallow merges user configuration (email, username, â€¦). Removing user data is SDK-defined, either with a remove_user function or by passing nothing as data.\r\n\r\nYeah, it's not absolutelly clear if they meant for it to remove all context or just part of the data, but look at this other spec:\r\n> scope.set_extra(key, value): Sets the extra key to an arbitrary value, overwriting a potential previous value. Removing a key is SDK-defined, either with a remove_extra function or by passing nothing as data.\r\n\r\nComparing with this spec, what I get is that on methods which set a single key of context, remove* should remove a single key (worded: \"Removing **a key** is SDK-defined\". The specifically mention \"**a key**\"). On the other hand, when having methods that set the whole context at once, without a key, the remove* method should clear the whole context (worded: \"Removing **user data** is SDK-defined\", as opposed to \"**a key**\"). \r\n\r\nWDYT?",
        "pr_file_module": null
      },
      {
        "comment_id": "356762963",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 931,
        "pr_file": "src/State/Scope.php",
        "discussion_id": "356311254",
        "commented_code": "@@ -130,17 +130,39 @@ public function setExtras(array $extras): self\n     /**\n      * Sets the given data in the user context.\n      *\n-     * @param array $data The data\n+     * @param array $data  The data\n+     * @param bool  $merge If true, $data will be merged into user context instead of replacing it\n      *\n      * @return $this\n      */\n-    public function setUser(array $data): self\n+    public function setUser(array $data, bool $merge = false): self\n     {\n+        if ($merge) {\n+            $this->user->merge($data);\n+\n+            return $this;\n+        }\n+\n+        @trigger_error('Replacing user context on setUser is deprecated since sentry-php 2.3 and will be changed to a merge on 3.0. '\n+             . 'For now you can use $merge = true to merge instead of replacing it.', E_USER_DEPRECATED);\n+\n         $this->user->replaceData($data);\n \n         return $this;\n     }\n \n+    /**\n+     * Clears all user context data.\n+     *\n+     * @return $this\n+     */\n+    public function clearUser(): self",
        "comment_created_at": "2019-12-11T18:30:58+00:00",
        "comment_author": "volkyeth",
        "comment_body": "We could also open an issue on the docs asking them to clarify on that topic and go without a `removeUser` method for now. I can't actually see much use for it anyways, as the scope should be entirely cleared when changing context on the application.",
        "pr_file_module": null
      },
      {
        "comment_id": "356832125",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 931,
        "pr_file": "src/State/Scope.php",
        "discussion_id": "356311254",
        "commented_code": "@@ -130,17 +130,39 @@ public function setExtras(array $extras): self\n     /**\n      * Sets the given data in the user context.\n      *\n-     * @param array $data The data\n+     * @param array $data  The data\n+     * @param bool  $merge If true, $data will be merged into user context instead of replacing it\n      *\n      * @return $this\n      */\n-    public function setUser(array $data): self\n+    public function setUser(array $data, bool $merge = false): self\n     {\n+        if ($merge) {\n+            $this->user->merge($data);\n+\n+            return $this;\n+        }\n+\n+        @trigger_error('Replacing user context on setUser is deprecated since sentry-php 2.3 and will be changed to a merge on 3.0. '\n+             . 'For now you can use $merge = true to merge instead of replacing it.', E_USER_DEPRECATED);\n+\n         $this->user->replaceData($data);\n \n         return $this;\n     }\n \n+    /**\n+     * Clears all user context data.\n+     *\n+     * @return $this\n+     */\n+    public function clearUser(): self",
        "comment_created_at": "2019-12-11T21:03:13+00:00",
        "comment_author": "ste93cry",
        "comment_body": "I think that you are right in saying that generally speaking the specs should be more clear on how these methods should act, because in certain parts they are and in others they are not. I suggest to go with the `removeUser` method that unsets a given key and not the whole context, as it may turn useful for example if something out of the control of the user sets some information on a parent scope and without such method you would have no way to remove it because inner scopes just inherit all data. We can add a `clearUser` context if we see that people need it",
        "pr_file_module": null
      },
      {
        "comment_id": "357110850",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 931,
        "pr_file": "src/State/Scope.php",
        "discussion_id": "356311254",
        "commented_code": "@@ -130,17 +130,39 @@ public function setExtras(array $extras): self\n     /**\n      * Sets the given data in the user context.\n      *\n-     * @param array $data The data\n+     * @param array $data  The data\n+     * @param bool  $merge If true, $data will be merged into user context instead of replacing it\n      *\n      * @return $this\n      */\n-    public function setUser(array $data): self\n+    public function setUser(array $data, bool $merge = false): self\n     {\n+        if ($merge) {\n+            $this->user->merge($data);\n+\n+            return $this;\n+        }\n+\n+        @trigger_error('Replacing user context on setUser is deprecated since sentry-php 2.3 and will be changed to a merge on 3.0. '\n+             . 'For now you can use $merge = true to merge instead of replacing it.', E_USER_DEPRECATED);\n+\n         $this->user->replaceData($data);\n \n         return $this;\n     }\n \n+    /**\n+     * Clears all user context data.\n+     *\n+     * @return $this\n+     */\n+    public function clearUser(): self",
        "comment_created_at": "2019-12-12T12:09:58+00:00",
        "comment_author": "volkyeth",
        "comment_body": "Makes sense, there you go: 744a040",
        "pr_file_module": null
      },
      {
        "comment_id": "357116644",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 931,
        "pr_file": "src/State/Scope.php",
        "discussion_id": "356311254",
        "commented_code": "@@ -130,17 +130,39 @@ public function setExtras(array $extras): self\n     /**\n      * Sets the given data in the user context.\n      *\n-     * @param array $data The data\n+     * @param array $data  The data\n+     * @param bool  $merge If true, $data will be merged into user context instead of replacing it\n      *\n      * @return $this\n      */\n-    public function setUser(array $data): self\n+    public function setUser(array $data, bool $merge = false): self\n     {\n+        if ($merge) {\n+            $this->user->merge($data);\n+\n+            return $this;\n+        }\n+\n+        @trigger_error('Replacing user context on setUser is deprecated since sentry-php 2.3 and will be changed to a merge on 3.0. '\n+             . 'For now you can use $merge = true to merge instead of replacing it.', E_USER_DEPRECATED);\n+\n         $this->user->replaceData($data);\n \n         return $this;\n     }\n \n+    /**\n+     * Clears all user context data.\n+     *\n+     * @return $this\n+     */\n+    public function clearUser(): self",
        "comment_created_at": "2019-12-12T12:24:42+00:00",
        "comment_author": "volkyeth",
        "comment_body": "We can revisit this after getting feedback on https://github.com/getsentry/sentry-docs/issues/1407 âœŒ",
        "pr_file_module": null
      },
      {
        "comment_id": "357816557",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 931,
        "pr_file": "src/State/Scope.php",
        "discussion_id": "356311254",
        "commented_code": "@@ -130,17 +130,39 @@ public function setExtras(array $extras): self\n     /**\n      * Sets the given data in the user context.\n      *\n-     * @param array $data The data\n+     * @param array $data  The data\n+     * @param bool  $merge If true, $data will be merged into user context instead of replacing it\n      *\n      * @return $this\n      */\n-    public function setUser(array $data): self\n+    public function setUser(array $data, bool $merge = false): self\n     {\n+        if ($merge) {\n+            $this->user->merge($data);\n+\n+            return $this;\n+        }\n+\n+        @trigger_error('Replacing user context on setUser is deprecated since sentry-php 2.3 and will be changed to a merge on 3.0. '\n+             . 'For now you can use $merge = true to merge instead of replacing it.', E_USER_DEPRECATED);\n+\n         $this->user->replaceData($data);\n \n         return $this;\n     }\n \n+    /**\n+     * Clears all user context data.\n+     *\n+     * @return $this\n+     */\n+    public function clearUser(): self",
        "comment_created_at": "2019-12-13T20:18:47+00:00",
        "comment_author": "ste93cry",
        "comment_body": "I'm sorry to change one more time my mind, but since the discussion in the referenced issue may last for a long time, let's drop the `removeUser` method so that we can merge this PR as-is and if something will change in the future regarding this topic we will update the SDK accordingly",
        "pr_file_module": null
      },
      {
        "comment_id": "358219362",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 931,
        "pr_file": "src/State/Scope.php",
        "discussion_id": "356311254",
        "commented_code": "@@ -130,17 +130,39 @@ public function setExtras(array $extras): self\n     /**\n      * Sets the given data in the user context.\n      *\n-     * @param array $data The data\n+     * @param array $data  The data\n+     * @param bool  $merge If true, $data will be merged into user context instead of replacing it\n      *\n      * @return $this\n      */\n-    public function setUser(array $data): self\n+    public function setUser(array $data, bool $merge = false): self\n     {\n+        if ($merge) {\n+            $this->user->merge($data);\n+\n+            return $this;\n+        }\n+\n+        @trigger_error('Replacing user context on setUser is deprecated since sentry-php 2.3 and will be changed to a merge on 3.0. '\n+             . 'For now you can use $merge = true to merge instead of replacing it.', E_USER_DEPRECATED);\n+\n         $this->user->replaceData($data);\n \n         return $this;\n     }\n \n+    /**\n+     * Clears all user context data.\n+     *\n+     * @return $this\n+     */\n+    public function clearUser(): self",
        "comment_created_at": "2019-12-16T13:01:48+00:00",
        "comment_author": "volkyeth",
        "comment_body": "there you go 031baaf",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "321728075",
    "pr_number": 877,
    "pr_file": "src/HttpClient/Plugin/GzipEncoderPlugin.php",
    "created_at": "2019-09-06T13:14:47+00:00",
    "commented_code": "*/\n final class GzipEncoderPlugin implements PluginInterface\n {\n+    /**\n+     * @var StreamFactoryInterface The PSR-17 stream factory\n+     */\n+    private $streamFactory;\n+\n     /**\n      * Constructor.\n      *\n+     * @param StreamFactoryInterface $streamFactory The stream factory\n+     *\n      * @throws \\RuntimeException If the zlib extension is not enabled\n      */\n-    public function __construct()\n+    public function __construct(StreamFactoryInterface $streamFactory)",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "321728075",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 877,
        "pr_file": "src/HttpClient/Plugin/GzipEncoderPlugin.php",
        "discussion_id": "321728075",
        "commented_code": "@@ -16,16 +16,25 @@\n  */\n final class GzipEncoderPlugin implements PluginInterface\n {\n+    /**\n+     * @var StreamFactoryInterface The PSR-17 stream factory\n+     */\n+    private $streamFactory;\n+\n     /**\n      * Constructor.\n      *\n+     * @param StreamFactoryInterface $streamFactory The stream factory\n+     *\n      * @throws \\RuntimeException If the zlib extension is not enabled\n      */\n-    public function __construct()\n+    public function __construct(StreamFactoryInterface $streamFactory)",
        "comment_created_at": "2019-09-06T13:14:47+00:00",
        "comment_author": "Jean85",
        "comment_body": "This is a BC; we could make that argument optional and use the `StreamFactoryDiscovery::find()` paired with a deprecation.",
        "pr_file_module": null
      },
      {
        "comment_id": "321752445",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 877,
        "pr_file": "src/HttpClient/Plugin/GzipEncoderPlugin.php",
        "discussion_id": "321728075",
        "commented_code": "@@ -16,16 +16,25 @@\n  */\n final class GzipEncoderPlugin implements PluginInterface\n {\n+    /**\n+     * @var StreamFactoryInterface The PSR-17 stream factory\n+     */\n+    private $streamFactory;\n+\n     /**\n      * Constructor.\n      *\n+     * @param StreamFactoryInterface $streamFactory The stream factory\n+     *\n      * @throws \\RuntimeException If the zlib extension is not enabled\n      */\n-    public function __construct()\n+    public function __construct(StreamFactoryInterface $streamFactory)",
        "comment_created_at": "2019-09-06T14:08:50+00:00",
        "comment_author": "stayallive",
        "comment_body": "You are correct. I've added that, should be all sorted.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "300732047",
    "pr_number": 846,
    "pr_file": "src/ClientBuilder.php",
    "created_at": "2019-07-05T15:49:29+00:00",
    "commented_code": "* @param string $packageName The package name that will be used to get the version from (i.e. \"sentry/sentry\")\n      *\n      * @return $this\n+     *\n+     * @deprecated since version 2.2, to be removed in 3.0\n      */\n     public function setSdkVersionByPackageName(string $packageName): ClientBuilderInterface\n     {\n+        @trigger_error(sprintf('Method %s() is deprecated since version 2.2 and will be removed in 3.0.', __METHOD__), E_USER_DEPRECATED);",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "300732047",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 846,
        "pr_file": "src/ClientBuilder.php",
        "discussion_id": "300732047",
        "commented_code": "@@ -252,9 +239,13 @@ public function setSdkVersion(string $sdkVersion): ClientBuilderInterface\n      * @param string $packageName The package name that will be used to get the version from (i.e. \"sentry/sentry\")\n      *\n      * @return $this\n+     *\n+     * @deprecated since version 2.2, to be removed in 3.0\n      */\n     public function setSdkVersionByPackageName(string $packageName): ClientBuilderInterface\n     {\n+        @trigger_error(sprintf('Method %s() is deprecated since version 2.2 and will be removed in 3.0.', __METHOD__), E_USER_DEPRECATED);",
        "comment_created_at": "2019-07-05T15:49:29+00:00",
        "comment_author": "Jean85",
        "comment_body": "I'm against this. It's used at least by `sentry/symfony`",
        "pr_file_module": null
      },
      {
        "comment_id": "300830597",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 846,
        "pr_file": "src/ClientBuilder.php",
        "discussion_id": "300732047",
        "commented_code": "@@ -252,9 +239,13 @@ public function setSdkVersion(string $sdkVersion): ClientBuilderInterface\n      * @param string $packageName The package name that will be used to get the version from (i.e. \"sentry/sentry\")\n      *\n      * @return $this\n+     *\n+     * @deprecated since version 2.2, to be removed in 3.0\n      */\n     public function setSdkVersionByPackageName(string $packageName): ClientBuilderInterface\n     {\n+        @trigger_error(sprintf('Method %s() is deprecated since version 2.2 and will be removed in 3.0.', __METHOD__), E_USER_DEPRECATED);",
        "comment_created_at": "2019-07-06T13:03:44+00:00",
        "comment_author": "ste93cry",
        "comment_body": "You are still able to set both the SDK identifier and version using the appropriate methods `setSdkIdentifier` and `setSdkVersion`. The only thing this method did was to automate retrieving the version of a package using the `PrettyVersions` class, which can be done from the user so that we can simplify a bit our code",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "281081271",
    "pr_number": 799,
    "pr_file": "src/State/HubInterface.php",
    "created_at": "2019-05-06T07:20:09+00:00",
    "commented_code": "*/\n     public function addBreadcrumb(Breadcrumb $breadcrumb): bool;\n \n+    /**\n+     * Await all async transports, this effectively forces all async event to be\n+     * transported immediately.\n+     */\n+    public function await(): void;",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "281081271",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 799,
        "pr_file": "src/State/HubInterface.php",
        "discussion_id": "281081271",
        "commented_code": "@@ -119,6 +119,12 @@ public function captureLastError(): ?string;\n      */\n     public function addBreadcrumb(Breadcrumb $breadcrumb): bool;\n \n+    /**\n+     * Await all async transports, this effectively forces all async event to be\n+     * transported immediately.\n+     */\n+    public function await(): void;",
        "comment_created_at": "2019-05-06T07:20:09+00:00",
        "comment_author": "Jean85",
        "comment_body": "This is a breaking change, if anyone extended the Hub.",
        "pr_file_module": null
      },
      {
        "comment_id": "281505789",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 799,
        "pr_file": "src/State/HubInterface.php",
        "discussion_id": "281081271",
        "commented_code": "@@ -119,6 +119,12 @@ public function captureLastError(): ?string;\n      */\n     public function addBreadcrumb(Breadcrumb $breadcrumb): bool;\n \n+    /**\n+     * Await all async transports, this effectively forces all async event to be\n+     * transported immediately.\n+     */\n+    public function await(): void;",
        "comment_created_at": "2019-05-07T07:36:50+00:00",
        "comment_author": "stayallive",
        "comment_body": "This is true, probably the best to keep it on our own ~hub~ client implementation for now.",
        "pr_file_module": null
      }
    ]
  }
]