[
  {
    "discussion_id": "1278288936",
    "pr_number": 1573,
    "pr_file": "src/State/Hub.php",
    "created_at": "2023-07-29T11:48:14+00:00",
    "commented_code": "return null;\n     }\n \n+    public function captureCheckIn(string $slug, MonitorConfig $upsertMonitorConfig, CheckInStatus $status, ?CheckIn $previous = null): ?CheckIn\n+    {\n+        $client = $this->getClient();\n+\n+        if (!$client instanceof ClientInterface) {",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "1278288936",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1573,
        "pr_file": "src/State/Hub.php",
        "discussion_id": "1278288936",
        "commented_code": "@@ -169,6 +172,31 @@ public function captureLastError(?EventHint $hint = null): ?EventId\n         return null;\n     }\n \n+    public function captureCheckIn(string $slug, MonitorConfig $upsertMonitorConfig, CheckInStatus $status, ?CheckIn $previous = null): ?CheckIn\n+    {\n+        $client = $this->getClient();\n+\n+        if (!$client instanceof ClientInterface) {",
        "comment_created_at": "2023-07-29T11:48:14+00:00",
        "comment_author": "ste93cry",
        "comment_body": "I would find more appropriate to check that the client is not `null` because the the real meaning of this line is to ensure that that instance is not `null` and not that it implements the interface. It is a small change indeed, but imo it conveyes to the reader the expectation in a clearer way.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "515606390",
    "pr_number": 1123,
    "pr_file": "src/Serializer/PayloadSerializer.php",
    "created_at": "2020-11-01T10:53:26+00:00",
    "commented_code": "$result['spans'] = array_values(array_map([$this, 'serializeSpan'], $event->getSpans()));\n         }\n \n+        if ($stacktrace = $event->getStacktrace()) {",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "515606390",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1123,
        "pr_file": "src/Serializer/PayloadSerializer.php",
        "discussion_id": "515606390",
        "commented_code": "@@ -152,6 +152,12 @@ private function serializeAsEvent(Event $event): string\n             $result['spans'] = array_values(array_map([$this, 'serializeSpan'], $event->getSpans()));\n         }\n \n+        if ($stacktrace = $event->getStacktrace()) {",
        "comment_created_at": "2020-11-01T10:53:26+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Can you please avoid assigning the variable in the `if` statement and check for `null` explicitly?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "486123437",
    "pr_number": 1083,
    "pr_file": "src/Options.php",
    "created_at": "2020-09-10T07:28:14+00:00",
    "commented_code": "$this->options = $this->resolver->resolve($options);\n     }\n \n+    /**\n+     * Gets a callback that will be invoked when we sample a Transaction.\n+     *\n+     * @psalm-return null|callable(\\Sentry\\Tracing\\SamplingContext): float\n+     */\n+    public function getTracesSampler()",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "486123437",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1083,
        "pr_file": "src/Options.php",
        "discussion_id": "486123437",
        "commented_code": "@@ -658,6 +658,31 @@ public function setClassSerializers(array $serializers): void\n         $this->options = $this->resolver->resolve($options);\n     }\n \n+    /**\n+     * Gets a callback that will be invoked when we sample a Transaction.\n+     *\n+     * @psalm-return null|callable(\\Sentry\\Tracing\\SamplingContext): float\n+     */\n+    public function getTracesSampler()",
        "comment_created_at": "2020-09-10T07:28:14+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Please typehint the return tpe as `?callable`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "253455963",
    "pr_number": 762,
    "pr_file": "src/Integration/ErrorListenerIntegration.php",
    "created_at": "2019-02-04T12:49:19+00:00",
    "commented_code": "+<?php\n+\n+declare(strict_types=1);\n+\n+namespace Sentry\\Integration;\n+\n+use Sentry\\ErrorHandler;\n+use Sentry\\ErrorListenerInterface;\n+use Sentry\\Options;\n+use Sentry\\State\\Hub;\n+\n+/**\n+ * This integration hooks into the global error handlers and emits events to\n+ * Sentry.\n+ */\n+final class ErrorListenerIntegration implements IntegrationInterface, ErrorListenerInterface\n+{\n+    /** @var Options The options, to know which error level to use */\n+    private $options;\n+\n+    /**\n+     * ErrorListenerIntegration constructor.\n+     *\n+     * @param Options $options\n+     */\n+    public function __construct(Options $options)\n+    {\n+        $this->options = $options;\n+    }\n+\n+    public function setupOnce(): void\n+    {\n+        ErrorHandler::addErrorListener($this);\n+    }\n+\n+    public function __invoke(\\ErrorException $error): void\n+    {\n+        if ($this->options->getErrorTypes() & $error->getSeverity()) {\n+            $client = Hub::getCurrent()->getClient();\n+\n+            if ($client) {",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "253455963",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 762,
        "pr_file": "src/Integration/ErrorListenerIntegration.php",
        "discussion_id": "253455963",
        "commented_code": "@@ -0,0 +1,46 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+namespace Sentry\\Integration;\n+\n+use Sentry\\ErrorHandler;\n+use Sentry\\ErrorListenerInterface;\n+use Sentry\\Options;\n+use Sentry\\State\\Hub;\n+\n+/**\n+ * This integration hooks into the global error handlers and emits events to\n+ * Sentry.\n+ */\n+final class ErrorListenerIntegration implements IntegrationInterface, ErrorListenerInterface\n+{\n+    /** @var Options The options, to know which error level to use */\n+    private $options;\n+\n+    /**\n+     * ErrorListenerIntegration constructor.\n+     *\n+     * @param Options $options\n+     */\n+    public function __construct(Options $options)\n+    {\n+        $this->options = $options;\n+    }\n+\n+    public function setupOnce(): void\n+    {\n+        ErrorHandler::addErrorListener($this);\n+    }\n+\n+    public function __invoke(\\ErrorException $error): void\n+    {\n+        if ($this->options->getErrorTypes() & $error->getSeverity()) {\n+            $client = Hub::getCurrent()->getClient();\n+\n+            if ($client) {",
        "comment_created_at": "2019-02-04T12:49:19+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Always be explicit about the check, so `null !== $client`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "253456082",
    "pr_number": 762,
    "pr_file": "src/Integration/ExceptionListenerIntegration.php",
    "created_at": "2019-02-04T12:49:42+00:00",
    "commented_code": "+<?php\n+\n+declare(strict_types=1);\n+\n+namespace Sentry\\Integration;\n+\n+use Sentry\\ErrorHandler;\n+use Sentry\\ExceptionListenerInterface;\n+use Sentry\\State\\Hub;\n+\n+/**\n+ * This integration hooks into the global error handlers and emits events to\n+ * Sentry.\n+ */\n+final class ExceptionListenerIntegration implements IntegrationInterface, ExceptionListenerInterface\n+{\n+    public function setupOnce(): void\n+    {\n+        ErrorHandler::addExceptionListener($this);\n+    }\n+\n+    public function __invoke(\\Throwable $throwable): void\n+    {\n+        $client = Hub::getCurrent()->getClient();\n+\n+        if ($client) {",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "253456082",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 762,
        "pr_file": "src/Integration/ExceptionListenerIntegration.php",
        "discussion_id": "253456082",
        "commented_code": "@@ -0,0 +1,30 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+namespace Sentry\\Integration;\n+\n+use Sentry\\ErrorHandler;\n+use Sentry\\ExceptionListenerInterface;\n+use Sentry\\State\\Hub;\n+\n+/**\n+ * This integration hooks into the global error handlers and emits events to\n+ * Sentry.\n+ */\n+final class ExceptionListenerIntegration implements IntegrationInterface, ExceptionListenerInterface\n+{\n+    public function setupOnce(): void\n+    {\n+        ErrorHandler::addExceptionListener($this);\n+    }\n+\n+    public function __invoke(\\Throwable $throwable): void\n+    {\n+        $client = Hub::getCurrent()->getClient();\n+\n+        if ($client) {",
        "comment_created_at": "2019-02-04T12:49:42+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Always be explicit about the check, so `null !== $client`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1083280668",
    "pr_number": 1451,
    "pr_file": "src/ExceptionMechanism.php",
    "created_at": "2023-01-21T11:49:08+00:00",
    "commented_code": "*/\n     private $handled;\n \n+    /**\n+     * @var array|null Arbitrary extra data that might help the user understand\n+     *                 the error thrown by this mechanism\n+     */\n+    private $data;\n+\n     /**\n      * Class constructor.\n      *\n-     * @param string $type    Unique identifier of this mechanism determining\n-     *                        rendering and processing of the mechanism data\n-     * @param bool   $handled Flag indicating whether the exception has been\n-     *                        handled by the user (e.g. via try..catch)\n+     * @param string     $type    Unique identifier of this mechanism determining\n+     *                            rendering and processing of the mechanism data\n+     * @param bool       $handled Flag indicating whether the exception has been\n+     *                            handled by the user (e.g. via try..catch)\n+     * @param array|null $data    Arbitrary extra data that might help the user\n+     *                            understand the error thrown by this mechanism\n+     * @psalm-param array<string, mixed>|null $data\n      */\n-    public function __construct(string $type, bool $handled)\n+    public function __construct(string $type, bool $handled, array $data = null)",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "1083280668",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1451,
        "pr_file": "src/ExceptionMechanism.php",
        "discussion_id": "1083280668",
        "commented_code": "@@ -26,18 +26,28 @@ final class ExceptionMechanism\n      */\n     private $handled;\n \n+    /**\n+     * @var array|null Arbitrary extra data that might help the user understand\n+     *                 the error thrown by this mechanism\n+     */\n+    private $data;\n+\n     /**\n      * Class constructor.\n      *\n-     * @param string $type    Unique identifier of this mechanism determining\n-     *                        rendering and processing of the mechanism data\n-     * @param bool   $handled Flag indicating whether the exception has been\n-     *                        handled by the user (e.g. via try..catch)\n+     * @param string     $type    Unique identifier of this mechanism determining\n+     *                            rendering and processing of the mechanism data\n+     * @param bool       $handled Flag indicating whether the exception has been\n+     *                            handled by the user (e.g. via try..catch)\n+     * @param array|null $data    Arbitrary extra data that might help the user\n+     *                            understand the error thrown by this mechanism\n+     * @psalm-param array<string, mixed>|null $data\n      */\n-    public function __construct(string $type, bool $handled)\n+    public function __construct(string $type, bool $handled, array $data = null)",
        "comment_created_at": "2023-01-21T11:49:08+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Why having this argument to be `null` by default instead of an empty `array`? I think that if we want to leave it as-is, then we should make the argument `nullable` for consistency: it doesn't make sense that an argument cannot accept `null`, but its default value is `null`",
        "pr_file_module": null
      }
    ]
  }
]