[
  {
    "discussion_id": "553895096",
    "pr_number": 1161,
    "pr_file": "src/Integration/RequestIntegration.php",
    "created_at": "2021-01-08T11:37:36+00:00",
    "commented_code": "{\n         $keysToRemove = ['authorization', 'cookie', 'set-cookie', 'remote_addr'];",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "553895096",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1161,
        "pr_file": "src/Integration/RequestIntegration.php",
        "discussion_id": "553895096",
        "commented_code": "@@ -144,13 +144,16 @@ private function removePiiFromHeaders(array $headers): array\n     {\n         $keysToRemove = ['authorization', 'cookie', 'set-cookie', 'remote_addr'];",
        "comment_created_at": "2021-01-08T11:37:36+00:00",
        "comment_author": "ste93cry",
        "comment_body": "While we're at it, can you please extract this variable into a `private` class constant named `HEADERS_TO_SANITIZE`?",
        "pr_file_module": null
      },
      {
        "comment_id": "554163707",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1161,
        "pr_file": "src/Integration/RequestIntegration.php",
        "discussion_id": "553895096",
        "commented_code": "@@ -144,13 +144,16 @@ private function removePiiFromHeaders(array $headers): array\n     {\n         $keysToRemove = ['authorization', 'cookie', 'set-cookie', 'remote_addr'];",
        "comment_created_at": "2021-01-08T20:05:37+00:00",
        "comment_author": "soundsgoodsofar",
        "comment_body": "Sure thing.  While we're at it are we suuuuure we don't want to just move it into Options?  Seems like it would be great to have that flexibility, but just tell me what you'd like @ste93cry .",
        "pr_file_module": null
      },
      {
        "comment_id": "554245007",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1161,
        "pr_file": "src/Integration/RequestIntegration.php",
        "discussion_id": "553895096",
        "commented_code": "@@ -144,13 +144,16 @@ private function removePiiFromHeaders(array $headers): array\n     {\n         $keysToRemove = ['authorization', 'cookie', 'set-cookie', 'remote_addr'];",
        "comment_created_at": "2021-01-08T23:26:06+00:00",
        "comment_author": "ste93cry",
        "comment_body": "I don't have a strong contrary opinion about having a configurable set of options, although I would prefer to implement them as options of the integration itself rather than of the SDK, but since I also believe that Relay is the right tool for this job and knowing the we said these kind of things should not be in the SDKs, I will let you decide how to proceed @HazAT",
        "pr_file_module": null
      },
      {
        "comment_id": "554478093",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1161,
        "pr_file": "src/Integration/RequestIntegration.php",
        "discussion_id": "553895096",
        "commented_code": "@@ -144,13 +144,16 @@ private function removePiiFromHeaders(array $headers): array\n     {\n         $keysToRemove = ['authorization', 'cookie', 'set-cookie', 'remote_addr'];",
        "comment_created_at": "2021-01-09T22:00:59+00:00",
        "comment_author": "soundsgoodsofar",
        "comment_body": "Yeah I can understand that.  Happy to change it back if you'd prefer just let me know.",
        "pr_file_module": null
      },
      {
        "comment_id": "555263826",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1161,
        "pr_file": "src/Integration/RequestIntegration.php",
        "discussion_id": "553895096",
        "commented_code": "@@ -144,13 +144,16 @@ private function removePiiFromHeaders(array $headers): array\n     {\n         $keysToRemove = ['authorization', 'cookie', 'set-cookie', 'remote_addr'];",
        "comment_created_at": "2021-01-11T18:46:56+00:00",
        "comment_author": "ste93cry",
        "comment_body": "So, I've talked on Discord with @HazAT and we agreed to expose this option as option of the integration itself. You can take a look at the `IgnoreErrorsIntegration` class to see how we implemented something similar \ud83d\ude03 I will review again the code once you submit all the new changes",
        "pr_file_module": null
      },
      {
        "comment_id": "566406051",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1161,
        "pr_file": "src/Integration/RequestIntegration.php",
        "discussion_id": "553895096",
        "commented_code": "@@ -144,13 +144,16 @@ private function removePiiFromHeaders(array $headers): array\n     {\n         $keysToRemove = ['authorization', 'cookie', 'set-cookie', 'remote_addr'];",
        "comment_created_at": "2021-01-28T21:05:28+00:00",
        "comment_author": "soundsgoodsofar",
        "comment_body": "@ste93cry hey, \r\n\r\n> @soundsgoodsofar do you still have plans to finish the work? Otherwise, if it's ok for you I would like to do it for you so that we can merge the PR\r\n\r\nHey @ste93cry , thanks for checking.  I've gotten a bit busy on other things and I'm not sure I'll be able to get back to this immediately.  If you're able to help implement that would be much appreciated.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "484369885",
    "pr_number": 1083,
    "pr_file": "src/Options.php",
    "created_at": "2020-09-07T11:22:35+00:00",
    "commented_code": "$this->options = $this->resolver->resolve($options);\n     }\n \n+    /**\n+     * Gets a callback that will be invoked when we sample a Transaction.\n+     *\n+     * @psalm-return \\Sentry\\Tracing\\TracesSamplerInterface|callable(\\Sentry\\Tracing\\SamplingContext): float\n+     */\n+    public function getTracesSampler()\n+    {\n+        if (\\is_string($this->options['traces_sampler']) && class_exists($this->options['traces_sampler'])) {\n+            return new $this->options['traces_sampler']();\n+        }\n+\n+        return $this->options['traces_sampler'];\n+    }\n+\n+    /**\n+     * Sets a callback that will be invoked when we take the sampling decision for Transactions.\n+     * Return a number between 0 and 1 to define the sample rate for the provided SamplingContext.\n+     *\n+     * @param callable $sampler The sampler\n+     *\n+     * @psalm-param \\Sentry\\Tracing\\TracesSamplerInterface|callable(\\Sentry\\Tracing\\SamplingContext): float $sampler\n+     */\n+    public function setTracesSampler($sampler): void",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "484369885",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1083,
        "pr_file": "src/Options.php",
        "discussion_id": "484369885",
        "commented_code": "@@ -658,6 +659,35 @@ public function setClassSerializers(array $serializers): void\n         $this->options = $this->resolver->resolve($options);\n     }\n \n+    /**\n+     * Gets a callback that will be invoked when we sample a Transaction.\n+     *\n+     * @psalm-return \\Sentry\\Tracing\\TracesSamplerInterface|callable(\\Sentry\\Tracing\\SamplingContext): float\n+     */\n+    public function getTracesSampler()\n+    {\n+        if (\\is_string($this->options['traces_sampler']) && class_exists($this->options['traces_sampler'])) {\n+            return new $this->options['traces_sampler']();\n+        }\n+\n+        return $this->options['traces_sampler'];\n+    }\n+\n+    /**\n+     * Sets a callback that will be invoked when we take the sampling decision for Transactions.\n+     * Return a number between 0 and 1 to define the sample rate for the provided SamplingContext.\n+     *\n+     * @param callable $sampler The sampler\n+     *\n+     * @psalm-param \\Sentry\\Tracing\\TracesSamplerInterface|callable(\\Sentry\\Tracing\\SamplingContext): float $sampler\n+     */\n+    public function setTracesSampler($sampler): void",
        "comment_created_at": "2020-09-07T11:22:35+00:00",
        "comment_author": "ste93cry",
        "comment_body": "What's the reason this option can be all those things? Wouldn't a simple `callable` be enough? If someone wants to use a class he can either code it to make it self-invokable or he can wrap the call to the class into the `callable` itself",
        "pr_file_module": null
      },
      {
        "comment_id": "485420013",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1083,
        "pr_file": "src/Options.php",
        "discussion_id": "484369885",
        "commented_code": "@@ -658,6 +659,35 @@ public function setClassSerializers(array $serializers): void\n         $this->options = $this->resolver->resolve($options);\n     }\n \n+    /**\n+     * Gets a callback that will be invoked when we sample a Transaction.\n+     *\n+     * @psalm-return \\Sentry\\Tracing\\TracesSamplerInterface|callable(\\Sentry\\Tracing\\SamplingContext): float\n+     */\n+    public function getTracesSampler()\n+    {\n+        if (\\is_string($this->options['traces_sampler']) && class_exists($this->options['traces_sampler'])) {\n+            return new $this->options['traces_sampler']();\n+        }\n+\n+        return $this->options['traces_sampler'];\n+    }\n+\n+    /**\n+     * Sets a callback that will be invoked when we take the sampling decision for Transactions.\n+     * Return a number between 0 and 1 to define the sample rate for the provided SamplingContext.\n+     *\n+     * @param callable $sampler The sampler\n+     *\n+     * @psalm-param \\Sentry\\Tracing\\TracesSamplerInterface|callable(\\Sentry\\Tracing\\SamplingContext): float $sampler\n+     */\n+    public function setTracesSampler($sampler): void",
        "comment_created_at": "2020-09-09T08:09:23+00:00",
        "comment_author": "HazAT",
        "comment_body": "The reason was mostly how people like to configure these things in laravel like:\r\n`'traces_sampler' => App\\Helpers\\General\\TracesSampler::class`\r\n\r\nWhile you are right, they can just create a callable class which might even be better since it's less code.",
        "pr_file_module": null
      },
      {
        "comment_id": "486123323",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1083,
        "pr_file": "src/Options.php",
        "discussion_id": "484369885",
        "commented_code": "@@ -658,6 +659,35 @@ public function setClassSerializers(array $serializers): void\n         $this->options = $this->resolver->resolve($options);\n     }\n \n+    /**\n+     * Gets a callback that will be invoked when we sample a Transaction.\n+     *\n+     * @psalm-return \\Sentry\\Tracing\\TracesSamplerInterface|callable(\\Sentry\\Tracing\\SamplingContext): float\n+     */\n+    public function getTracesSampler()\n+    {\n+        if (\\is_string($this->options['traces_sampler']) && class_exists($this->options['traces_sampler'])) {\n+            return new $this->options['traces_sampler']();\n+        }\n+\n+        return $this->options['traces_sampler'];\n+    }\n+\n+    /**\n+     * Sets a callback that will be invoked when we take the sampling decision for Transactions.\n+     * Return a number between 0 and 1 to define the sample rate for the provided SamplingContext.\n+     *\n+     * @param callable $sampler The sampler\n+     *\n+     * @psalm-param \\Sentry\\Tracing\\TracesSamplerInterface|callable(\\Sentry\\Tracing\\SamplingContext): float $sampler\n+     */\n+    public function setTracesSampler($sampler): void",
        "comment_created_at": "2020-09-10T07:28:02+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Please typehint the parameter as `?callable`",
        "pr_file_module": null
      },
      {
        "comment_id": "487071349",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1083,
        "pr_file": "src/Options.php",
        "discussion_id": "484369885",
        "commented_code": "@@ -658,6 +659,35 @@ public function setClassSerializers(array $serializers): void\n         $this->options = $this->resolver->resolve($options);\n     }\n \n+    /**\n+     * Gets a callback that will be invoked when we sample a Transaction.\n+     *\n+     * @psalm-return \\Sentry\\Tracing\\TracesSamplerInterface|callable(\\Sentry\\Tracing\\SamplingContext): float\n+     */\n+    public function getTracesSampler()\n+    {\n+        if (\\is_string($this->options['traces_sampler']) && class_exists($this->options['traces_sampler'])) {\n+            return new $this->options['traces_sampler']();\n+        }\n+\n+        return $this->options['traces_sampler'];\n+    }\n+\n+    /**\n+     * Sets a callback that will be invoked when we take the sampling decision for Transactions.\n+     * Return a number between 0 and 1 to define the sample rate for the provided SamplingContext.\n+     *\n+     * @param callable $sampler The sampler\n+     *\n+     * @psalm-param \\Sentry\\Tracing\\TracesSamplerInterface|callable(\\Sentry\\Tracing\\SamplingContext): float $sampler\n+     */\n+    public function setTracesSampler($sampler): void",
        "comment_created_at": "2020-09-11T14:10:37+00:00",
        "comment_author": "Jean85",
        "comment_body": "Symfony too is not so keen on using callables since it has a lot of YAML config by default. I could write a callable inside the bundle to handle FQCN string though.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "484370359",
    "pr_number": 1083,
    "pr_file": "src/Options.php",
    "created_at": "2020-09-07T11:23:37+00:00",
    "commented_code": "'prefixes' => explode(PATH_SEPARATOR, get_include_path()),\n             'sample_rate' => 1,\n             'traces_sample_rate' => 0,\n+            'traces_sampler' => null,",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "484370359",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1083,
        "pr_file": "src/Options.php",
        "discussion_id": "484370359",
        "commented_code": "@@ -675,6 +705,7 @@ private function configureOptions(OptionsResolver $resolver): void\n             'prefixes' => explode(PATH_SEPARATOR, get_include_path()),\n             'sample_rate' => 1,\n             'traces_sample_rate' => 0,\n+            'traces_sampler' => null,",
        "comment_created_at": "2020-09-07T11:23:37+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Missing the validation of the option, `string|callable|object` should work",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "336046621",
    "pr_number": 907,
    "pr_file": "src/Options.php",
    "created_at": "2019-10-17T14:41:23+00:00",
    "commented_code": "$resolver->setAllowedTypes('in_app_exclude', 'array');\n         $resolver->setAllowedTypes('project_root', ['null', 'string']);\n         $resolver->setAllowedTypes('logger', 'string');\n+        $resolver->setAllowedValues('error_logger', \\Closure::fromCallable([$this, 'validateLoggerOption']));",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "336046621",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 907,
        "pr_file": "src/Options.php",
        "discussion_id": "336046621",
        "commented_code": "@@ -789,6 +814,7 @@ private function configureOptions(OptionsResolver $resolver): void\n         $resolver->setAllowedTypes('in_app_exclude', 'array');\n         $resolver->setAllowedTypes('project_root', ['null', 'string']);\n         $resolver->setAllowedTypes('logger', 'string');\n+        $resolver->setAllowedValues('error_logger', \\Closure::fromCallable([$this, 'validateLoggerOption']));",
        "comment_created_at": "2019-10-17T14:41:23+00:00",
        "comment_author": "Jean85",
        "comment_body": "I think you should be able to use `setAllowedTypes('error_logger', LoggerInterface::class);` here",
        "pr_file_module": null
      },
      {
        "comment_id": "336082861",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 907,
        "pr_file": "src/Options.php",
        "discussion_id": "336046621",
        "commented_code": "@@ -789,6 +814,7 @@ private function configureOptions(OptionsResolver $resolver): void\n         $resolver->setAllowedTypes('in_app_exclude', 'array');\n         $resolver->setAllowedTypes('project_root', ['null', 'string']);\n         $resolver->setAllowedTypes('logger', 'string');\n+        $resolver->setAllowedValues('error_logger', \\Closure::fromCallable([$this, 'validateLoggerOption']));",
        "comment_created_at": "2019-10-17T15:42:26+00:00",
        "comment_author": "helhum",
        "comment_body": "Yes, this works. Thanks. Will update the PR",
        "pr_file_module": null
      }
    ]
  }
]