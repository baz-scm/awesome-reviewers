[
  {
    "discussion_id": "1453693393",
    "pr_number": 1679,
    "pr_file": "src/functions.php",
    "created_at": "2024-01-16T16:42:57+00:00",
    "commented_code": "return SentrySdk::getCurrentHub()->captureCheckIn($slug, $status, $duration, $monitorConfig, $checkInId);\n }\n \n+/**\n+ * Execute the given callable while wrapping it in a monitor check-in.\n+ *\n+ * @param string             $slug          Identifier of the Monitor\n+ * @param callable           $callback      The callable that is going to be monitored\n+ * @param MonitorConfig|null $monitorConfig Configuration of the Monitor\n+ *\n+ * @return mixed\n+ */\n+function withMonitor(string $slug, callable $callback, ?MonitorConfig $monitorConfig = null)\n+{\n+    $checkInId = SentrySdk::getCurrentHub()->captureCheckIn($slug, CheckInStatus::inProgress(), null, $monitorConfig);\n+\n+    $status = CheckInStatus::ok();\n+    $duration = 0;\n+\n+    try {\n+        $start = microtime(true);\n+        $result = $callback();\n+        $duration = microtime(true) - $start;\n+\n+        return $result;\n+    } catch (\\Throwable $e) {\n+        $status = CheckInStatus::error();\n+    } finally {",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "1453693393",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1679,
        "pr_file": "src/functions.php",
        "discussion_id": "1453693393",
        "commented_code": "@@ -81,6 +81,35 @@ function captureCheckIn(string $slug, CheckInStatus $status, $duration = null, ?\n     return SentrySdk::getCurrentHub()->captureCheckIn($slug, $status, $duration, $monitorConfig, $checkInId);\n }\n \n+/**\n+ * Execute the given callable while wrapping it in a monitor check-in.\n+ *\n+ * @param string             $slug          Identifier of the Monitor\n+ * @param callable           $callback      The callable that is going to be monitored\n+ * @param MonitorConfig|null $monitorConfig Configuration of the Monitor\n+ *\n+ * @return mixed\n+ */\n+function withMonitor(string $slug, callable $callback, ?MonitorConfig $monitorConfig = null)\n+{\n+    $checkInId = SentrySdk::getCurrentHub()->captureCheckIn($slug, CheckInStatus::inProgress(), null, $monitorConfig);\n+\n+    $status = CheckInStatus::ok();\n+    $duration = 0;\n+\n+    try {\n+        $start = microtime(true);\n+        $result = $callback();\n+        $duration = microtime(true) - $start;\n+\n+        return $result;\n+    } catch (\\Throwable $e) {\n+        $status = CheckInStatus::error();\n+    } finally {",
        "comment_created_at": "2024-01-16T16:42:57+00:00",
        "comment_author": "stayallive",
        "comment_body": "I believe that with a catch you do need to rethrow the error otherwise it's swallowed.\r\n\r\n```suggestion\r\n    } catch (\\Throwable $e) {\r\n        $status = CheckInStatus::error();\r\n        \r\n        throw $e;\r\n    } finally {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1386971420",
    "pr_number": 1633,
    "pr_file": "src/ErrorHandler.php",
    "created_at": "2023-11-08T17:25:49+00:00",
    "commented_code": "*\n      * @internal\n      */\n-    public const DEFAULT_RESERVED_MEMORY_SIZE = 10240;\n+    public const DEFAULT_RESERVED_MEMORY_SIZE = 16 * 1024; // 16 KiB\n+\n+    /**\n+     * The regular expression used to match the message of an out of memory error.\n+     */\n+    private const OOM_MESSAGE_MATCHER = '/^Allowed memory size of (?<memory_limit>\\d+) bytes exhausted \\(tried to allocate \\d+ bytes\\)/';",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "1386971420",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1633,
        "pr_file": "src/ErrorHandler.php",
        "discussion_id": "1386971420",
        "commented_code": "@@ -22,7 +22,12 @@ final class ErrorHandler\n      *\n      * @internal\n      */\n-    public const DEFAULT_RESERVED_MEMORY_SIZE = 10240;\n+    public const DEFAULT_RESERVED_MEMORY_SIZE = 16 * 1024; // 16 KiB\n+\n+    /**\n+     * The regular expression used to match the message of an out of memory error.\n+     */\n+    private const OOM_MESSAGE_MATCHER = '/^Allowed memory size of (?<memory_limit>\\d+) bytes exhausted \\(tried to allocate \\d+ bytes\\)/';",
        "comment_created_at": "2023-11-08T17:25:49+00:00",
        "comment_author": "Jean85",
        "comment_body": "Are we sure that the message matches on different PHP versions? We should test for that.",
        "pr_file_module": null
      },
      {
        "comment_id": "1387011072",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1633,
        "pr_file": "src/ErrorHandler.php",
        "discussion_id": "1386971420",
        "commented_code": "@@ -22,7 +22,12 @@ final class ErrorHandler\n      *\n      * @internal\n      */\n-    public const DEFAULT_RESERVED_MEMORY_SIZE = 10240;\n+    public const DEFAULT_RESERVED_MEMORY_SIZE = 16 * 1024; // 16 KiB\n+\n+    /**\n+     * The regular expression used to match the message of an out of memory error.\n+     */\n+    private const OOM_MESSAGE_MATCHER = '/^Allowed memory size of (?<memory_limit>\\d+) bytes exhausted \\(tried to allocate \\d+ bytes\\)/';",
        "comment_created_at": "2023-11-08T17:59:57+00:00",
        "comment_author": "stayallive",
        "comment_body": "Well, we are indirectly testing it, because disabling the memory increase (which is the same as a incorrect matcher) fails the added `phpt` test which I think is good enough.",
        "pr_file_module": null
      },
      {
        "comment_id": "1387050246",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1633,
        "pr_file": "src/ErrorHandler.php",
        "discussion_id": "1386971420",
        "commented_code": "@@ -22,7 +22,12 @@ final class ErrorHandler\n      *\n      * @internal\n      */\n-    public const DEFAULT_RESERVED_MEMORY_SIZE = 10240;\n+    public const DEFAULT_RESERVED_MEMORY_SIZE = 16 * 1024; // 16 KiB\n+\n+    /**\n+     * The regular expression used to match the message of an out of memory error.\n+     */\n+    private const OOM_MESSAGE_MATCHER = '/^Allowed memory size of (?<memory_limit>\\d+) bytes exhausted \\(tried to allocate \\d+ bytes\\)/';",
        "comment_created_at": "2023-11-08T18:36:42+00:00",
        "comment_author": "jarstelfox",
        "comment_body": "It does look like [this string is relatively safe to assume](https://github.com/search?q=repo%3Aphp%2Fphp-src%20%22Allowed%20memory%20size%20of%22&type=code).\r\n\r\n[Here is a slightly better regex](https://github.com/php/php-src/blob/524b13460752fba908f88e3c4428b91fa66c083a/Zend/tests/new_oom.phpt#L15) from PHP's source tests.\r\n\r\nYou may want to use this regex instead.",
        "pr_file_module": null
      },
      {
        "comment_id": "1387057983",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1633,
        "pr_file": "src/ErrorHandler.php",
        "discussion_id": "1386971420",
        "commented_code": "@@ -22,7 +22,12 @@ final class ErrorHandler\n      *\n      * @internal\n      */\n-    public const DEFAULT_RESERVED_MEMORY_SIZE = 10240;\n+    public const DEFAULT_RESERVED_MEMORY_SIZE = 16 * 1024; // 16 KiB\n+\n+    /**\n+     * The regular expression used to match the message of an out of memory error.\n+     */\n+    private const OOM_MESSAGE_MATCHER = '/^Allowed memory size of (?<memory_limit>\\d+) bytes exhausted \\(tried to allocate \\d+ bytes\\)/';",
        "comment_created_at": "2023-11-08T18:44:37+00:00",
        "comment_author": "stayallive",
        "comment_body": "I've updated the regex, only the optional newline was different (`\\d+` is functionally identical to `[0-9]+` in this case) and I don't need to match the full string, the first part is enough confirmation it's a OOM error IMHO.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "332905852",
    "pr_number": 898,
    "pr_file": "src/Transport/HttpTransport.php",
    "created_at": "2019-10-09T09:09:54+00:00",
    "commented_code": "*/\n     public function send(Event $event): ?string\n     {\n-        $projectId = $this->config->getProjectId();\n-\n-        if (null === $projectId) {\n-            throw new MissingProjectIdCredentialException();\n+        try {",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "332905852",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 898,
        "pr_file": "src/Transport/HttpTransport.php",
        "discussion_id": "332905852",
        "commented_code": "@@ -88,28 +89,32 @@ public function __destruct()\n      */\n     public function send(Event $event): ?string\n     {\n-        $projectId = $this->config->getProjectId();\n-\n-        if (null === $projectId) {\n-            throw new MissingProjectIdCredentialException();\n+        try {",
        "comment_created_at": "2019-10-09T09:09:54+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Instead of catching the entire code of the method we should just wrap the `wait` function call. The same should be done in the `cleanupPendingRequests` method. The strange thing is that when `false` is passed to the `wait` method no exceptions should be thrown but just returned (effectively doing the same as a `try`/`catch` block), so there is a bug somewhere in the vendor or the exception is not raised there (the other point where it could be raised is the `sendAsyncRequest` method, but since we saw that the request is not sent until `wait` is called I don't think it's the case)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "284641799",
    "pr_number": 809,
    "pr_file": "src/Serializer/AbstractSerializer.php",
    "created_at": "2019-05-16T10:29:19+00:00",
    "commented_code": "}\n \n         if (\\is_object($value)) {\n+            $classSerializers = $this->resolveClassSerializers($value);\n+\n+            // Try each serializer until there is none left or the serializer returned data\n+            foreach ($classSerializers as $classSerializer) {\n+                try {\n+                    $serializedObjectData = $classSerializer($value);\n+\n+                    if (\\is_array($serializedObjectData)) {\n+                        return [\n+                            'class' => \\get_class($value),\n+                            'data' => $this->serializeRecursively($serializedObjectData, $_depth + 1),\n+                        ];\n+                    }\n+                } catch (\\Exception $e) {",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "284641799",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 809,
        "pr_file": "src/Serializer/AbstractSerializer.php",
        "discussion_id": "284641799",
        "commented_code": "@@ -122,14 +122,61 @@ protected function serializeRecursively($value, int $_depth = 0)\n         }\n \n         if (\\is_object($value)) {\n+            $classSerializers = $this->resolveClassSerializers($value);\n+\n+            // Try each serializer until there is none left or the serializer returned data\n+            foreach ($classSerializers as $classSerializer) {\n+                try {\n+                    $serializedObjectData = $classSerializer($value);\n+\n+                    if (\\is_array($serializedObjectData)) {\n+                        return [\n+                            'class' => \\get_class($value),\n+                            'data' => $this->serializeRecursively($serializedObjectData, $_depth + 1),\n+                        ];\n+                    }\n+                } catch (\\Exception $e) {",
        "comment_created_at": "2019-05-16T10:29:19+00:00",
        "comment_author": "ste93cry",
        "comment_body": "It probably makes more sense to catch `\\Throwable` instead of `\\Exception`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "259335399",
    "pr_number": 775,
    "pr_file": "src/ClientBuilder.php",
    "created_at": "2019-02-22T13:12:30+00:00",
    "commented_code": "$this->messageFactory = $this->messageFactory ?? MessageFactoryDiscovery::find();\n         $this->uriFactory = $this->uriFactory ?? UriFactoryDiscovery::find();\n+\n+        if (null === $this->httpClient && null !== $this->options->getHttpProxy()) {\n+            try {",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "259335399",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 775,
        "pr_file": "src/ClientBuilder.php",
        "discussion_id": "259335399",
        "commented_code": "@@ -314,6 +314,20 @@ private function createTransportInstance(): TransportInterface\n \n         $this->messageFactory = $this->messageFactory ?? MessageFactoryDiscovery::find();\n         $this->uriFactory = $this->uriFactory ?? UriFactoryDiscovery::find();\n+\n+        if (null === $this->httpClient && null !== $this->options->getHttpProxy()) {\n+            try {",
        "comment_created_at": "2019-02-22T13:12:30+00:00",
        "comment_author": "ste93cry",
        "comment_body": "This `try`/`catch` block is misleading, since it's catching any exception to rethrow with a generic message that says that the cURL client must be installed while the problem may be something else entirely. What about removing it and just let a possible error to be thrown?",
        "pr_file_module": null
      },
      {
        "comment_id": "259337353",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 775,
        "pr_file": "src/ClientBuilder.php",
        "discussion_id": "259335399",
        "commented_code": "@@ -314,6 +314,20 @@ private function createTransportInstance(): TransportInterface\n \n         $this->messageFactory = $this->messageFactory ?? MessageFactoryDiscovery::find();\n         $this->uriFactory = $this->uriFactory ?? UriFactoryDiscovery::find();\n+\n+        if (null === $this->httpClient && null !== $this->options->getHttpProxy()) {\n+            try {",
        "comment_created_at": "2019-02-22T13:18:44+00:00",
        "comment_author": "HazAT",
        "comment_body": "Restructured the code.",
        "pr_file_module": null
      }
    ]
  }
]