[
  {
    "discussion_id": "1431244007",
    "pr_number": 1663,
    "pr_file": "tests/State/HubAdapterTest.php",
    "created_at": "2023-12-19T10:56:48+00:00",
    "commented_code": "$this->expectException(\\BadMethodCallException::class);\n         $this->expectExceptionMessage('Unserializing instances of this class is forbidden.');\n \n+        $this->expectException(\\BadMethodCallException::class);",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "1431244007",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1663,
        "pr_file": "tests/State/HubAdapterTest.php",
        "discussion_id": "1431244007",
        "commented_code": "@@ -47,6 +47,9 @@ public function testGetInstanceReturnsUnserializableInstance(): void\n         $this->expectException(\\BadMethodCallException::class);\n         $this->expectExceptionMessage('Unserializing instances of this class is forbidden.');\n \n+        $this->expectException(\\BadMethodCallException::class);",
        "comment_created_at": "2023-12-19T10:56:48+00:00",
        "comment_author": "ste93cry",
        "comment_body": "You should split the test into two, because only one exception can be thrown at time. Furthermore, `expectException()` is in no case cumulative. I suggest to rename this test method to `testHubAdapterThrowsExceptionOnSerialization`, and add `testHubAdapterThrowsExceptionOnUnserialization`",
        "pr_file_module": null
      },
      {
        "comment_id": "1432095422",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1663,
        "pr_file": "tests/State/HubAdapterTest.php",
        "discussion_id": "1431244007",
        "commented_code": "@@ -47,6 +47,9 @@ public function testGetInstanceReturnsUnserializableInstance(): void\n         $this->expectException(\\BadMethodCallException::class);\n         $this->expectExceptionMessage('Unserializing instances of this class is forbidden.');\n \n+        $this->expectException(\\BadMethodCallException::class);",
        "comment_created_at": "2023-12-20T01:42:34+00:00",
        "comment_author": "cleptric",
        "comment_body": "How should we test `unserialize` when we need to call `serialize` first?",
        "pr_file_module": null
      },
      {
        "comment_id": "1432378483",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1663,
        "pr_file": "tests/State/HubAdapterTest.php",
        "discussion_id": "1431244007",
        "commented_code": "@@ -47,6 +47,9 @@ public function testGetInstanceReturnsUnserializableInstance(): void\n         $this->expectException(\\BadMethodCallException::class);\n         $this->expectExceptionMessage('Unserializing instances of this class is forbidden.');\n \n+        $this->expectException(\\BadMethodCallException::class);",
        "comment_created_at": "2023-12-20T08:03:24+00:00",
        "comment_author": "ste93cry",
        "comment_body": "We could hardcode the argument passed to `unserialize()` to be `O:23:\"Sentry\\State\\HubAdapter\":0:{}`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "590560643",
    "pr_number": 1193,
    "pr_file": "tests/BreadcrumbTest.php",
    "created_at": "2021-03-09T17:12:13+00:00",
    "commented_code": "$this->assertSame(['foo' => 'bar'], $breadcrumb->getMetadata());\n         $this->assertArrayNotHasKey('foo', $newBreadcrumb->getMetadata());\n     }\n+\n+    public function testTimestampIsAutomaticallyPopulated(): void",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "590560643",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 1193,
        "pr_file": "tests/BreadcrumbTest.php",
        "discussion_id": "590560643",
        "commented_code": "@@ -144,4 +144,22 @@ public function testWithoutMetadata(): void\n         $this->assertSame(['foo' => 'bar'], $breadcrumb->getMetadata());\n         $this->assertArrayNotHasKey('foo', $newBreadcrumb->getMetadata());\n     }\n+\n+    public function testTimestampIsAutomaticallyPopulated(): void",
        "comment_created_at": "2021-03-09T17:12:13+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Instead of having two test methods for the same thing, what about changing the `testConstructor()` method to use a data provider that returns first `null` and then a `float` and then compare those values with the result of `getTimestamp()`? You can use the `Symfony\\Bridge\\PhpUnit\\ClockMock` class to mock the current time to a specific value in the test cases that needs it. There should already be a test that does something similar somewhere in the codebase ðŸ˜ƒ ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "340487767",
    "pr_number": 839,
    "pr_file": "tests/EventTest.php",
    "created_at": "2019-10-30T08:48:54+00:00",
    "commented_code": "$this->assertEquals($expected, $event->toArray());\n     }\n \n+    public function testToArrayMergeUserContexts(): void",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "340487767",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 839,
        "pr_file": "tests/EventTest.php",
        "discussion_id": "340487767",
        "commented_code": "@@ -119,6 +119,94 @@ public function testToArray(): void\n         $this->assertEquals($expected, $event->toArray());\n     }\n \n+    public function testToArrayMergeUserContexts(): void",
        "comment_created_at": "2019-10-30T08:48:54+00:00",
        "comment_author": "ste93cry",
        "comment_body": "What about merging this test and the one below using a data provider?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "272793367",
    "pr_number": 798,
    "pr_file": "tests/BreadcrumbTest.php",
    "created_at": "2019-04-06T11:47:39+00:00",
    "commented_code": "$this->assertEquals(microtime(true), $breadcrumb->getTimestamp());\n     }\n \n+    public function testFromArray(): void\n+    {\n+        $breadcrumb = Breadcrumb::fromArray([\n+            'level' => Breadcrumb::LEVEL_INFO,\n+            'type' => Breadcrumb::TYPE_USER,\n+            'category' => 'foo',\n+            'message' => 'foo bar',\n+            'data' => ['baz'],\n+        ]);\n+\n+        $this->assertEquals('foo', $breadcrumb->getCategory());\n+        $this->assertEquals(Breadcrumb::LEVEL_INFO, $breadcrumb->getLevel());\n+        $this->assertEquals('foo bar', $breadcrumb->getMessage());\n+        $this->assertEquals(Breadcrumb::TYPE_USER, $breadcrumb->getType());\n+        $this->assertEquals(['baz'], $breadcrumb->getMetadata());\n+        $this->assertEquals(microtime(true), $breadcrumb->getTimestamp());\n+    }\n+\n+    public function testFromArrayDefaults(): void",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "272793367",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 798,
        "pr_file": "tests/BreadcrumbTest.php",
        "discussion_id": "272793367",
        "commented_code": "@@ -43,6 +43,39 @@ public function testConstructor(): void\n         $this->assertEquals(microtime(true), $breadcrumb->getTimestamp());\n     }\n \n+    public function testFromArray(): void\n+    {\n+        $breadcrumb = Breadcrumb::fromArray([\n+            'level' => Breadcrumb::LEVEL_INFO,\n+            'type' => Breadcrumb::TYPE_USER,\n+            'category' => 'foo',\n+            'message' => 'foo bar',\n+            'data' => ['baz'],\n+        ]);\n+\n+        $this->assertEquals('foo', $breadcrumb->getCategory());\n+        $this->assertEquals(Breadcrumb::LEVEL_INFO, $breadcrumb->getLevel());\n+        $this->assertEquals('foo bar', $breadcrumb->getMessage());\n+        $this->assertEquals(Breadcrumb::TYPE_USER, $breadcrumb->getType());\n+        $this->assertEquals(['baz'], $breadcrumb->getMetadata());\n+        $this->assertEquals(microtime(true), $breadcrumb->getTimestamp());\n+    }\n+\n+    public function testFromArrayDefaults(): void",
        "comment_created_at": "2019-04-06T11:47:39+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Instad of splitting the test into two different methods, simply use the one above with a data provider that provides the input `$data` parameter to pass to the `fromArray` method and an `$expectedResult` that can be compared to what the `toArray` method returns",
        "pr_file_module": null
      },
      {
        "comment_id": "274030485",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 798,
        "pr_file": "tests/BreadcrumbTest.php",
        "discussion_id": "272793367",
        "commented_code": "@@ -43,6 +43,39 @@ public function testConstructor(): void\n         $this->assertEquals(microtime(true), $breadcrumb->getTimestamp());\n     }\n \n+    public function testFromArray(): void\n+    {\n+        $breadcrumb = Breadcrumb::fromArray([\n+            'level' => Breadcrumb::LEVEL_INFO,\n+            'type' => Breadcrumb::TYPE_USER,\n+            'category' => 'foo',\n+            'message' => 'foo bar',\n+            'data' => ['baz'],\n+        ]);\n+\n+        $this->assertEquals('foo', $breadcrumb->getCategory());\n+        $this->assertEquals(Breadcrumb::LEVEL_INFO, $breadcrumb->getLevel());\n+        $this->assertEquals('foo bar', $breadcrumb->getMessage());\n+        $this->assertEquals(Breadcrumb::TYPE_USER, $breadcrumb->getType());\n+        $this->assertEquals(['baz'], $breadcrumb->getMetadata());\n+        $this->assertEquals(microtime(true), $breadcrumb->getTimestamp());\n+    }\n+\n+    public function testFromArrayDefaults(): void",
        "comment_created_at": "2019-04-10T15:45:16+00:00",
        "comment_author": "Peter-Sparksuite",
        "comment_body": "ok.  I think I've done as you ask now.  please review.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "252613079",
    "pr_number": 752,
    "pr_file": "tests/EventTest.php",
    "created_at": "2019-01-31T10:34:03+00:00",
    "commented_code": "$this->assertSame($breadcrumbs, $data['breadcrumbs']['values']);\n     }\n \n+    public function testToArrayWithMessageWithFormatted(): void",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "252613079",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 752,
        "pr_file": "tests/EventTest.php",
        "discussion_id": "252613079",
        "commented_code": "@@ -165,6 +165,38 @@ public function testToArrayWithBreadcrumbs(): void\n         $this->assertSame($breadcrumbs, $data['breadcrumbs']['values']);\n     }\n \n+    public function testToArrayWithMessageWithFormatted(): void",
        "comment_created_at": "2019-01-31T10:34:03+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Can we refactor the `testToArrayWithMessage` method to use a data provider and unify that test case with this one?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "252652524",
    "pr_number": 752,
    "pr_file": "tests/EventTest.php",
    "created_at": "2019-01-31T12:45:05+00:00",
    "commented_code": "$this->assertSame($breadcrumbs, $data['breadcrumbs']['values']);\n     }\n \n+    public function testToArrayWithMessageWithFormatted(): void\n+    {\n+        $expected = [\n+            'message' => 'foo @bar',\n+            'params' => ['@bar' => 'bar'],\n+            'formatted' => 'foo bar',\n+        ];\n+\n+        $event = new Event();\n+        $event->setMessage('foo @bar', ['@bar' => 'bar'], 'foo bar');\n+\n+        $data = $event->toArray();\n+\n+        $this->assertArrayHasKey('message', $data);\n+        $this->assertSame($expected, $data['message']);\n+    }\n+\n+    public function testGetMessage(): void",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "252652524",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 752,
        "pr_file": "tests/EventTest.php",
        "discussion_id": "252652524",
        "commented_code": "@@ -165,6 +165,38 @@ public function testToArrayWithBreadcrumbs(): void\n         $this->assertSame($breadcrumbs, $data['breadcrumbs']['values']);\n     }\n \n+    public function testToArrayWithMessageWithFormatted(): void\n+    {\n+        $expected = [\n+            'message' => 'foo @bar',\n+            'params' => ['@bar' => 'bar'],\n+            'formatted' => 'foo bar',\n+        ];\n+\n+        $event = new Event();\n+        $event->setMessage('foo @bar', ['@bar' => 'bar'], 'foo bar');\n+\n+        $data = $event->toArray();\n+\n+        $this->assertArrayHasKey('message', $data);\n+        $this->assertSame($expected, $data['message']);\n+    }\n+\n+    public function testGetMessage(): void",
        "comment_created_at": "2019-01-31T12:45:05+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Instead of having multiple test conditions into a single test case please use a data provider",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "254233222",
    "pr_number": 752,
    "pr_file": "tests/EventFactoryTest.php",
    "created_at": "2019-02-06T11:27:48+00:00",
    "commented_code": "],\n                 ],\n             ],\n+            [\n+                [\n+                    'message' => 'testMessage @param',",
    "repo_full_name": "getsentry/sentry-php",
    "discussion_comments": [
      {
        "comment_id": "254233222",
        "repo_full_name": "getsentry/sentry-php",
        "pr_number": 752,
        "pr_file": "tests/EventFactoryTest.php",
        "discussion_id": "254233222",
        "commented_code": "@@ -92,6 +92,20 @@ public function createWithPayloadDataProvider()\n                     ],\n                 ],\n             ],\n+            [\n+                [\n+                    'message' => 'testMessage @param',",
        "comment_created_at": "2019-02-06T11:27:48+00:00",
        "comment_author": "ste93cry",
        "comment_body": "Assuming that this test case covers the case in which a `message_formatted` param is specified in the payload, please use the `sprintf` notation for the value of the `message` key and a totally different message for the value of the `formatted` key so that we can catch if the override works",
        "pr_file_module": null
      }
    ]
  }
]