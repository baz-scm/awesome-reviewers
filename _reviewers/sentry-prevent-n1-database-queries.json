[
  {
    "discussion_id": "2190715744",
    "pr_number": 94879,
    "pr_file": "src/sentry/incidents/logic.py",
    "created_at": "2025-07-07T17:45:51+00:00",
    "commented_code": "snuba_query_snapshot: SnubaQuery = deepcopy(_unpack_snuba_query(alert_rule))\n         nullify_id(snuba_query_snapshot)\n         snuba_query_snapshot.save()\n+\n+        event_types = SnubaQueryEventType.objects.filter(\n+            snuba_query=_unpack_snuba_query(alert_rule)\n+        )\n+        for event_type in event_types:\n+            event_type_snapshot = deepcopy(event_type)\n+            nullify_id(event_type_snapshot)\n+            event_type_snapshot.snuba_query = snuba_query_snapshot\n+            event_type_snapshot.save()",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2190715744",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94879,
        "pr_file": "src/sentry/incidents/logic.py",
        "discussion_id": "2190715744",
        "commented_code": "@@ -698,6 +698,16 @@ def nullify_id(model: Model) -> None:\n         snuba_query_snapshot: SnubaQuery = deepcopy(_unpack_snuba_query(alert_rule))\n         nullify_id(snuba_query_snapshot)\n         snuba_query_snapshot.save()\n+\n+        event_types = SnubaQueryEventType.objects.filter(\n+            snuba_query=_unpack_snuba_query(alert_rule)\n+        )\n+        for event_type in event_types:\n+            event_type_snapshot = deepcopy(event_type)\n+            nullify_id(event_type_snapshot)\n+            event_type_snapshot.snuba_query = snuba_query_snapshot\n+            event_type_snapshot.save()",
        "comment_created_at": "2025-07-07T17:45:51+00:00",
        "comment_author": "saponifi3d",
        "comment_body": "since this is saving in the loop, will it create an N+1 query? \ud83e\udd14 i wonder if we could make this a batch operation instead.",
        "pr_file_module": null
      },
      {
        "comment_id": "2192662750",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94879,
        "pr_file": "src/sentry/incidents/logic.py",
        "discussion_id": "2190715744",
        "commented_code": "@@ -698,6 +698,16 @@ def nullify_id(model: Model) -> None:\n         snuba_query_snapshot: SnubaQuery = deepcopy(_unpack_snuba_query(alert_rule))\n         nullify_id(snuba_query_snapshot)\n         snuba_query_snapshot.save()\n+\n+        event_types = SnubaQueryEventType.objects.filter(\n+            snuba_query=_unpack_snuba_query(alert_rule)\n+        )\n+        for event_type in event_types:\n+            event_type_snapshot = deepcopy(event_type)\n+            nullify_id(event_type_snapshot)\n+            event_type_snapshot.snuba_query = snuba_query_snapshot\n+            event_type_snapshot.save()",
        "comment_created_at": "2025-07-08T14:18:38+00:00",
        "comment_author": "shruthilayaj",
        "comment_body": "Most snuba queries likely just have one event type associated with them (with a max of 2 when error and default types are selected) but good callout, I made it a bulk create!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2127875247",
    "pr_number": 91100,
    "pr_file": "src/sentry/users/api/serializers/user.py",
    "created_at": "2025-06-05T03:38:28+00:00",
    "commented_code": "\"Incorrectly calling `DetailedSelfUserSerializer`. See docstring for details.\"\n             )\n         return d\n+\n+\n+class UserSerializerWithOrgMemberships(UserSerializer):\n+    def get_attrs(\n+        self,\n+        item_list: Sequence[User],\n+        user: User | AnonymousUser | RpcUser,\n+        **kwargs: Any,\n+    ) -> MutableMapping[User, Any]:\n+        attrs = super().get_attrs(item_list, user, **kwargs)\n+\n+        memberships = OrganizationMemberMapping.objects.filter(\n+            user_id__in={u.id for u in item_list}\n+        ).values_list(\"user_id\", \"organization_id\", named=True)\n+        oms = OrganizationMapping.objects.filter(\n+            organization_id__in={m.organization_id for m in memberships},\n+            status=OrganizationStatus.ACTIVE,\n+        )\n+        active_organization_ids = [om.organization_id for om in oms]\n+        active_organization_names = {}\n+        for om in oms:\n+            active_organization_names[om.organization_id] = om.name",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2127875247",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 91100,
        "pr_file": "src/sentry/users/api/serializers/user.py",
        "discussion_id": "2127875247",
        "commented_code": "@@ -396,3 +400,50 @@ def serialize(\n                 \"Incorrectly calling `DetailedSelfUserSerializer`. See docstring for details.\"\n             )\n         return d\n+\n+\n+class UserSerializerWithOrgMemberships(UserSerializer):\n+    def get_attrs(\n+        self,\n+        item_list: Sequence[User],\n+        user: User | AnonymousUser | RpcUser,\n+        **kwargs: Any,\n+    ) -> MutableMapping[User, Any]:\n+        attrs = super().get_attrs(item_list, user, **kwargs)\n+\n+        memberships = OrganizationMemberMapping.objects.filter(\n+            user_id__in={u.id for u in item_list}\n+        ).values_list(\"user_id\", \"organization_id\", named=True)\n+        oms = OrganizationMapping.objects.filter(\n+            organization_id__in={m.organization_id for m in memberships},\n+            status=OrganizationStatus.ACTIVE,\n+        )\n+        active_organization_ids = [om.organization_id for om in oms]\n+        active_organization_names = {}\n+        for om in oms:\n+            active_organization_names[om.organization_id] = om.name",
        "comment_created_at": "2025-06-05T03:38:28+00:00",
        "comment_author": "cathteng",
        "comment_body": "nit: i like to use this hack to get a mapping directly from a QuerySet\r\n\r\n```suggestion\r\n        active_org_id_to_name = dict(OrganizationMapping.objects.filter(\r\n            organization_id__in={m.organization_id for m in memberships},\r\n            status=OrganizationStatus.ACTIVE,\r\n        ).values_list(\"id\", \"name\"))\r\n        active_organization_ids = active_org_id_to_name.keys()\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2127876493",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 91100,
        "pr_file": "src/sentry/users/api/serializers/user.py",
        "discussion_id": "2127875247",
        "commented_code": "@@ -396,3 +400,50 @@ def serialize(\n                 \"Incorrectly calling `DetailedSelfUserSerializer`. See docstring for details.\"\n             )\n         return d\n+\n+\n+class UserSerializerWithOrgMemberships(UserSerializer):\n+    def get_attrs(\n+        self,\n+        item_list: Sequence[User],\n+        user: User | AnonymousUser | RpcUser,\n+        **kwargs: Any,\n+    ) -> MutableMapping[User, Any]:\n+        attrs = super().get_attrs(item_list, user, **kwargs)\n+\n+        memberships = OrganizationMemberMapping.objects.filter(\n+            user_id__in={u.id for u in item_list}\n+        ).values_list(\"user_id\", \"organization_id\", named=True)\n+        oms = OrganizationMapping.objects.filter(\n+            organization_id__in={m.organization_id for m in memberships},\n+            status=OrganizationStatus.ACTIVE,\n+        )\n+        active_organization_ids = [om.organization_id for om in oms]\n+        active_organization_names = {}\n+        for om in oms:\n+            active_organization_names[om.organization_id] = om.name",
        "comment_created_at": "2025-06-05T03:40:25+00:00",
        "comment_author": "cathteng",
        "comment_body": "you could also use the list of `active_organization_ids` to further filter memberships before applying the `values_list` operation\r\n\r\n```python\r\nmemberships = OrganizationMemberMapping.objects.filter(\r\n    user_id__in={u.id for u in item_list}\r\n)\r\n# get active org ids...\r\nmemberships = memberships.filter(organization_id__in=active_organization_ids).values_list(\"user_id\", \"organization_id\", named=True)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2136507201",
    "pr_number": 93078,
    "pr_file": "src/sentry/sentry_apps/services/app/impl.py",
    "created_at": "2025-06-09T21:02:21+00:00",
    "commented_code": "except SentryApp.DoesNotExist:\n             return None\n \n+    def get_sentry_apps_by_proxy_users(self, *, proxy_user_ids: list[int]) -> list[RpcSentryApp]:\n+        sentry_apps = SentryApp.objects.filter(proxy_user_id__in=proxy_user_ids)\n+        sentry_app_avatars = SentryAppAvatar.objects.filter(\n+            sentry_app_id__in=sentry_apps.values_list(\"id\", flat=True)\n+        )\n+        sentry_app_avatar_map = defaultdict(list)\n+        for avatar in sentry_app_avatars:\n+            sentry_app_avatar_map[avatar.sentry_app_id].append(avatar)",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2136507201",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93078,
        "pr_file": "src/sentry/sentry_apps/services/app/impl.py",
        "discussion_id": "2136507201",
        "commented_code": "@@ -98,6 +99,19 @@ def get_sentry_app_by_slug(self, *, slug: str) -> RpcSentryApp | None:\n         except SentryApp.DoesNotExist:\n             return None\n \n+    def get_sentry_apps_by_proxy_users(self, *, proxy_user_ids: list[int]) -> list[RpcSentryApp]:\n+        sentry_apps = SentryApp.objects.filter(proxy_user_id__in=proxy_user_ids)\n+        sentry_app_avatars = SentryAppAvatar.objects.filter(\n+            sentry_app_id__in=sentry_apps.values_list(\"id\", flat=True)\n+        )\n+        sentry_app_avatar_map = defaultdict(list)\n+        for avatar in sentry_app_avatars:\n+            sentry_app_avatar_map[avatar.sentry_app_id].append(avatar)",
        "comment_created_at": "2025-06-09T21:02:21+00:00",
        "comment_author": "Christinarlong",
        "comment_body": "Kinda random thing I learned but we can do [.prefetch_related()](https://docs.djangoproject.com/en/5.2/ref/models/querysets/#prefetch-related) to get the associated `sentry_app_avatars` per `sentry_app` e.g\r\n```\r\nsentry_apps = SentryApp.objects.filter(proxy_user_id__in=proxy_user_ids).prefetch_related('sentryappavatar')\r\n...\r\nsentry_app_avatar_map = defaultdict(list)\r\nfor app in sentry_apps:\r\n            sentry_app_avatar_map[app.id] = app.sentryappavatar.all()\r\n\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2143145593",
    "pr_number": 93327,
    "pr_file": "src/sentry/insights/migrations/0002_backfill_team_starred.py",
    "created_at": "2025-06-12T16:08:10+00:00",
    "commented_code": "+# Generated by Django 5.2.1 on 2025-06-10 16:25\n+import logging\n+from typing import cast\n+\n+from django.db import IntegrityError, migrations, router, transaction\n+from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n+from django.db.migrations.state import StateApps\n+\n+from sentry.discover.models import TeamKeyTransaction\n+from sentry.insights.models import InsightsStarredSegment\n+from sentry.models.organization import Organization\n+from sentry.models.organizationmemberteam import (\n+    OrganizationMemberTeam as OrganizationMemberTeamType,\n+)\n+from sentry.models.projectteam import ProjectTeam\n+from sentry.new_migrations.migrations import CheckedMigration\n+from sentry.utils.query import RangeQuerySetWrapperWithProgressBar\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+def get_user_ids_from_team(projectTeam: ProjectTeam, apps: StateApps):\n+    OrganizationMemberTeam = cast(\n+        OrganizationMemberTeamType, apps.get_model(\"sentry\", \"Organizationmemberteam\")\n+    )\n+\n+    team = projectTeam.team\n+    team_members = OrganizationMemberTeam.objects.filter(team=team)\n+    return [member.organizationmember.user_id for member in team_members]",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2143145593",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93327,
        "pr_file": "src/sentry/insights/migrations/0002_backfill_team_starred.py",
        "discussion_id": "2143145593",
        "commented_code": "@@ -0,0 +1,97 @@\n+# Generated by Django 5.2.1 on 2025-06-10 16:25\n+import logging\n+from typing import cast\n+\n+from django.db import IntegrityError, migrations, router, transaction\n+from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n+from django.db.migrations.state import StateApps\n+\n+from sentry.discover.models import TeamKeyTransaction\n+from sentry.insights.models import InsightsStarredSegment\n+from sentry.models.organization import Organization\n+from sentry.models.organizationmemberteam import (\n+    OrganizationMemberTeam as OrganizationMemberTeamType,\n+)\n+from sentry.models.projectteam import ProjectTeam\n+from sentry.new_migrations.migrations import CheckedMigration\n+from sentry.utils.query import RangeQuerySetWrapperWithProgressBar\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+def get_user_ids_from_team(projectTeam: ProjectTeam, apps: StateApps):\n+    OrganizationMemberTeam = cast(\n+        OrganizationMemberTeamType, apps.get_model(\"sentry\", \"Organizationmemberteam\")\n+    )\n+\n+    team = projectTeam.team\n+    team_members = OrganizationMemberTeam.objects.filter(team=team)\n+    return [member.organizationmember.user_id for member in team_members]",
        "comment_created_at": "2025-06-12T16:08:10+00:00",
        "comment_author": "markstory",
        "comment_body": "You'll do an N+1 query here when accessing `member.organizationmember`. You can avoid that with `select_related()` on the `team_members` queryset. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2143692284",
    "pr_number": 93327,
    "pr_file": "src/sentry/insights/migrations/0002_backfill_team_starred.py",
    "created_at": "2025-06-12T21:27:12+00:00",
    "commented_code": "+# Generated by Django 5.2.1 on 2025-06-10 16:25\n+import logging\n+from typing import cast\n+\n+from django.db import IntegrityError, migrations, router, transaction\n+from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n+from django.db.migrations.state import StateApps\n+\n+from sentry.discover.models import TeamKeyTransaction\n+from sentry.insights.models import InsightsStarredSegment\n+from sentry.models.organization import Organization\n+from sentry.models.organizationmemberteam import (\n+    OrganizationMemberTeam as OrganizationMemberTeamType,\n+)\n+from sentry.models.projectteam import ProjectTeam\n+from sentry.new_migrations.migrations import CheckedMigration\n+from sentry.utils.query import RangeQuerySetWrapperWithProgressBar\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+def get_user_ids_from_team(projectTeam: ProjectTeam, apps: StateApps):\n+    OrganizationMemberTeam = cast(\n+        OrganizationMemberTeamType, apps.get_model(\"sentry\", \"Organizationmemberteam\")\n+    )\n+\n+    team = projectTeam.team\n+    team_members = OrganizationMemberTeam.objects.filter(team=team)\n+    return [member.organizationmember.user_id for member in team_members]\n+\n+\n+def migrate_team_stars_to_user_stars(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor):\n+    TeamStarredTransaction = cast(\n+        TeamKeyTransaction, apps.get_model(\"sentry\", \"teamkeytransaction\")\n+    )\n+    queryset = TeamStarredTransaction.objects.filter()",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2143692284",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93327,
        "pr_file": "src/sentry/insights/migrations/0002_backfill_team_starred.py",
        "discussion_id": "2143692284",
        "commented_code": "@@ -0,0 +1,97 @@\n+# Generated by Django 5.2.1 on 2025-06-10 16:25\n+import logging\n+from typing import cast\n+\n+from django.db import IntegrityError, migrations, router, transaction\n+from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n+from django.db.migrations.state import StateApps\n+\n+from sentry.discover.models import TeamKeyTransaction\n+from sentry.insights.models import InsightsStarredSegment\n+from sentry.models.organization import Organization\n+from sentry.models.organizationmemberteam import (\n+    OrganizationMemberTeam as OrganizationMemberTeamType,\n+)\n+from sentry.models.projectteam import ProjectTeam\n+from sentry.new_migrations.migrations import CheckedMigration\n+from sentry.utils.query import RangeQuerySetWrapperWithProgressBar\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+def get_user_ids_from_team(projectTeam: ProjectTeam, apps: StateApps):\n+    OrganizationMemberTeam = cast(\n+        OrganizationMemberTeamType, apps.get_model(\"sentry\", \"Organizationmemberteam\")\n+    )\n+\n+    team = projectTeam.team\n+    team_members = OrganizationMemberTeam.objects.filter(team=team)\n+    return [member.organizationmember.user_id for member in team_members]\n+\n+\n+def migrate_team_stars_to_user_stars(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor):\n+    TeamStarredTransaction = cast(\n+        TeamKeyTransaction, apps.get_model(\"sentry\", \"teamkeytransaction\")\n+    )\n+    queryset = TeamStarredTransaction.objects.filter()",
        "comment_created_at": "2025-06-12T21:27:12+00:00",
        "comment_author": "wedamija",
        "comment_body": "You can add `.select_related(\"organization\", \"project_team\", \"project_team__team\", \"project_team__project\")` to avoid a bunch of extra queries here.",
        "pr_file_module": null
      }
    ]
  }
]