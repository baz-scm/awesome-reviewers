[
  {
    "discussion_id": "2152575986",
    "pr_number": 93685,
    "pr_file": "tests/sentry/event_manager/test_event_manager.py",
    "created_at": "2025-06-17T15:31:09+00:00",
    "commented_code": ")\n         GroupHash.objects.filter(group=group).update(group=None, group_tombstone_id=tombstone.id)\n \n-        manager = EventManager(\n-            make_event(message=\"foo\", event_id=\"b\" * 32, fingerprint=[\"a\" * 32]),\n-            project=self.project,\n-        )\n-        manager.normalize()\n+        from sentry.utils.outcomes import track_outcome\n \n         a1 = CachedAttachment(name=\"a1\", data=b\"hello\")\n         a2 = CachedAttachment(name=\"a2\", data=b\"world\")\n \n-        cache_key = cache_key_for_event(manager.get_data())\n-        attachment_cache.set(cache_key, attachments=[a1, a2])\n-\n-        from sentry.utils.outcomes import track_outcome\n-\n-        mock_track_outcome = mock.Mock(wraps=track_outcome)\n-        with mock.patch(\"sentry.event_manager.track_outcome\", mock_track_outcome):\n-            with self.feature(\"organizations:event-attachments\"):\n-                with self.tasks():\n-                    with pytest.raises(HashDiscarded):\n-                        manager.save(self.project.id, cache_key=cache_key, has_attachments=True)\n-\n-        assert mock_track_outcome.call_count == 3\n-\n-        for o in mock_track_outcome.mock_calls:\n-            assert o.kwargs[\"outcome\"] == Outcome.FILTERED\n-            assert o.kwargs[\"reason\"] == FilterStatKeys.DISCARDED_HASH\n-\n-        o = mock_track_outcome.mock_calls[0]\n-        assert o.kwargs[\"category\"] == DataCategory.ERROR\n-\n-        for o in mock_track_outcome.mock_calls[1:]:\n-            assert o.kwargs[\"category\"] == DataCategory.ATTACHMENT\n-            assert o.kwargs[\"quantity\"] == 5\n+        for i, event_id in enumerate([\"b\" * 32, \"c\" * 32]):\n+            manager = EventManager(\n+                make_event(message=\"foo\", event_id=event_id, fingerprint=[\"a\" * 32]),\n+                project=self.project,\n+            )\n+            manager.normalize()\n+            discarded_event = Event(\n+                project_id=self.project.id, event_id=event_id, data=manager.get_data()\n+            )\n+\n+            cache_key = cache_key_for_event(manager.get_data())\n+            attachment_cache.set(cache_key, attachments=[a1, a2])\n+\n+            mock_track_outcome = mock.Mock(wraps=track_outcome)\n+            with mock.patch(\"sentry.event_manager.track_outcome\", mock_track_outcome):\n+                with self.feature(\"organizations:event-attachments\"):\n+                    with self.tasks():\n+                        with self.feature(\"organizations:grouptombstones-hit-counter\"):\n+                            with pytest.raises(HashDiscarded):",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2152575986",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93685,
        "pr_file": "tests/sentry/event_manager/test_event_manager.py",
        "discussion_id": "2152575986",
        "commented_code": "@@ -2117,39 +2117,51 @@ def test_throws_when_matches_discarded_hash(self) -> None:\n         )\n         GroupHash.objects.filter(group=group).update(group=None, group_tombstone_id=tombstone.id)\n \n-        manager = EventManager(\n-            make_event(message=\"foo\", event_id=\"b\" * 32, fingerprint=[\"a\" * 32]),\n-            project=self.project,\n-        )\n-        manager.normalize()\n+        from sentry.utils.outcomes import track_outcome\n \n         a1 = CachedAttachment(name=\"a1\", data=b\"hello\")\n         a2 = CachedAttachment(name=\"a2\", data=b\"world\")\n \n-        cache_key = cache_key_for_event(manager.get_data())\n-        attachment_cache.set(cache_key, attachments=[a1, a2])\n-\n-        from sentry.utils.outcomes import track_outcome\n-\n-        mock_track_outcome = mock.Mock(wraps=track_outcome)\n-        with mock.patch(\"sentry.event_manager.track_outcome\", mock_track_outcome):\n-            with self.feature(\"organizations:event-attachments\"):\n-                with self.tasks():\n-                    with pytest.raises(HashDiscarded):\n-                        manager.save(self.project.id, cache_key=cache_key, has_attachments=True)\n-\n-        assert mock_track_outcome.call_count == 3\n-\n-        for o in mock_track_outcome.mock_calls:\n-            assert o.kwargs[\"outcome\"] == Outcome.FILTERED\n-            assert o.kwargs[\"reason\"] == FilterStatKeys.DISCARDED_HASH\n-\n-        o = mock_track_outcome.mock_calls[0]\n-        assert o.kwargs[\"category\"] == DataCategory.ERROR\n-\n-        for o in mock_track_outcome.mock_calls[1:]:\n-            assert o.kwargs[\"category\"] == DataCategory.ATTACHMENT\n-            assert o.kwargs[\"quantity\"] == 5\n+        for i, event_id in enumerate([\"b\" * 32, \"c\" * 32]):\n+            manager = EventManager(\n+                make_event(message=\"foo\", event_id=event_id, fingerprint=[\"a\" * 32]),\n+                project=self.project,\n+            )\n+            manager.normalize()\n+            discarded_event = Event(\n+                project_id=self.project.id, event_id=event_id, data=manager.get_data()\n+            )\n+\n+            cache_key = cache_key_for_event(manager.get_data())\n+            attachment_cache.set(cache_key, attachments=[a1, a2])\n+\n+            mock_track_outcome = mock.Mock(wraps=track_outcome)\n+            with mock.patch(\"sentry.event_manager.track_outcome\", mock_track_outcome):\n+                with self.feature(\"organizations:event-attachments\"):\n+                    with self.tasks():\n+                        with self.feature(\"organizations:grouptombstones-hit-counter\"):\n+                            with pytest.raises(HashDiscarded):",
        "comment_created_at": "2025-06-17T15:31:09+00:00",
        "comment_author": "markstory",
        "comment_body": "You could combine all of these\r\n\r\n```python\r\nwith (\r\n  mock.patch(...),\r\n  self.feature(...)\r\n):\r\n``` \r\n\r\nwhich can help with the indentation levels.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2154651947",
    "pr_number": 93685,
    "pr_file": "src/sentry/event_manager.py",
    "created_at": "2025-06-18T13:43:45+00:00",
    "commented_code": "return query[:max_crashreports].count()\n \n \n+def increment_group_tombstone_hit_counter(tombstone_id: int | None, event: Event) -> None:\n+    if tombstone_id:",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2154651947",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93685,
        "pr_file": "src/sentry/event_manager.py",
        "discussion_id": "2154651947",
        "commented_code": "@@ -294,6 +294,31 @@ def get_stored_crashreports(cache_key: str | None, event: Event, max_crashreport\n     return query[:max_crashreports].count()\n \n \n+def increment_group_tombstone_hit_counter(tombstone_id: int | None, event: Event) -> None:\n+    if tombstone_id:",
        "comment_created_at": "2025-06-18T13:43:45+00:00",
        "comment_author": "JoshFerge",
        "comment_body": "nit: prefer r[eturn early](https://medium.com/swlh/return-early-pattern-3d18a41bba8) to minimize [code arrowing](https://blog.codinghorror.com/flattening-arrow-code/), e.g. `if not tombstone_id return`",
        "pr_file_module": null
      }
    ]
  }
]