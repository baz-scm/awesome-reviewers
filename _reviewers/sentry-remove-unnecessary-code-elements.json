[
  {
    "discussion_id": "2159343232",
    "pr_number": 93902,
    "pr_file": "static/app/views/dashboards/widgets/tableWidget/defaultTableCellRenderers.tsx",
    "created_at": "2025-06-20T16:28:47+00:00",
    "commented_code": "+import type {Theme} from '@emotion/react';\n+import styled from '@emotion/styled';\n+import type {Location} from 'history';\n+\n+import {Tooltip} from 'sentry/components/core/tooltip';\n+import type {GridColumnOrder} from 'sentry/components/gridEditable';\n+import SortLink from 'sentry/components/gridEditable/sortLink';\n+import type {Organization} from 'sentry/types/organization';\n+import {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\n+import type {ColumnValueType} from 'sentry/utils/discover/fields';\n+import {fieldAlignment} from 'sentry/utils/discover/fields';\n+import type {\n+  TabularColumn,\n+  TabularData,\n+  TabularRow,\n+} from 'sentry/views/dashboards/widgets/common/types';\n+\n+/**\n+ * Renderers that use any supplied renderer, but fallback to default rendering if none are provided\n+ */\n+interface DefaultHeadCellRenderProps {\n+  renderTableHeadCell?: (\n+    column: GridColumnOrder,\n+    columnIndex: number\n+  ) => React.ReactNode | undefined;\n+}\n+\n+interface DefaultBodyCellRenderProps {\n+  location: Location;\n+  organization: Organization;\n+  theme: Theme;\n+  renderTableBodyCell?: (\n+    column: GridColumnOrder,\n+    dataRow: Record<string, any>,\n+    rowIndex: number,\n+    columnIndex: number\n+  ) => React.ReactNode | undefined;\n+  tableData?: TabularData;\n+}\n+\n+// TODO: expand on some basic sorting functionality\n+export const renderDefaultHeadCell = ({\n+  renderTableHeadCell,\n+}: DefaultHeadCellRenderProps) =>\n+  function (\n+    column: TabularColumn<keyof TabularRow>,\n+    _columnIndex: number\n+  ): React.ReactNode {\n+    const cell: React.ReactNode = renderTableHeadCell?.(column, _columnIndex);",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2159343232",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93902,
        "pr_file": "static/app/views/dashboards/widgets/tableWidget/defaultTableCellRenderers.tsx",
        "discussion_id": "2159343232",
        "commented_code": "@@ -0,0 +1,112 @@\n+import type {Theme} from '@emotion/react';\n+import styled from '@emotion/styled';\n+import type {Location} from 'history';\n+\n+import {Tooltip} from 'sentry/components/core/tooltip';\n+import type {GridColumnOrder} from 'sentry/components/gridEditable';\n+import SortLink from 'sentry/components/gridEditable/sortLink';\n+import type {Organization} from 'sentry/types/organization';\n+import {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\n+import type {ColumnValueType} from 'sentry/utils/discover/fields';\n+import {fieldAlignment} from 'sentry/utils/discover/fields';\n+import type {\n+  TabularColumn,\n+  TabularData,\n+  TabularRow,\n+} from 'sentry/views/dashboards/widgets/common/types';\n+\n+/**\n+ * Renderers that use any supplied renderer, but fallback to default rendering if none are provided\n+ */\n+interface DefaultHeadCellRenderProps {\n+  renderTableHeadCell?: (\n+    column: GridColumnOrder,\n+    columnIndex: number\n+  ) => React.ReactNode | undefined;\n+}\n+\n+interface DefaultBodyCellRenderProps {\n+  location: Location;\n+  organization: Organization;\n+  theme: Theme;\n+  renderTableBodyCell?: (\n+    column: GridColumnOrder,\n+    dataRow: Record<string, any>,\n+    rowIndex: number,\n+    columnIndex: number\n+  ) => React.ReactNode | undefined;\n+  tableData?: TabularData;\n+}\n+\n+// TODO: expand on some basic sorting functionality\n+export const renderDefaultHeadCell = ({\n+  renderTableHeadCell,\n+}: DefaultHeadCellRenderProps) =>\n+  function (\n+    column: TabularColumn<keyof TabularRow>,\n+    _columnIndex: number\n+  ): React.ReactNode {\n+    const cell: React.ReactNode = renderTableHeadCell?.(column, _columnIndex);",
        "comment_created_at": "2025-06-20T16:28:47+00:00",
        "comment_author": "gggritso",
        "comment_body": "```suggestion\r\n    const cell = renderTableHeadCell?.(column, _columnIndex);\r\n```\r\n\r\nI think you can omit the type annotation here and let TypeScript infer it from the return type of `renderTableHeadCell`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2011455606",
    "pr_number": 87702,
    "pr_file": "static/app/components/events/interfaces/sourceMapsDebuggerModal.tsx",
    "created_at": "2025-03-25T07:08:31+00:00",
    "commented_code": "<Body>\n         <p>\n           {t(\n-            \"It looks like the original source code for this stack frame couldn't be determined when this error was captured. To get the original code for this stack frame, Sentry needs source maps to be configured.\"\n+            'It looks like the original source code for this stack frame. To get the original code for this stack frame, Sentry needs source maps to be uploaded.'\n           )}\n         </p>\n-        {metaFrameworksWithSentryWizardInOnboarding.includes(platform) ? (\n+        {isReactNativeSDK({\n+          sdkName: sourceResolutionResults.sdkName,\n+        }) ? (\n+          <Fragment>\n+            <WizardInstructionParagraph>\n+              {tct(\n+                \"For React Native projects, source maps should be generated and uploaded automatically during the build process. If your source maps aren't showing up, consult our [link:React Native source maps documentation].\",\n+                {\n+                  link: (\n+                    <ExternalLinkWithIcon href=\"https://docs.sentry.io/platforms/react-native/sourcemaps/\" />\n+                  ),\n+                }\n+              )}\n+            </WizardInstructionParagraph>\n+          </Fragment>",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2011455606",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 87702,
        "pr_file": "static/app/components/events/interfaces/sourceMapsDebuggerModal.tsx",
        "discussion_id": "2011455606",
        "commented_code": "@@ -482,10 +482,25 @@ export function SourceMapsDebuggerModal({\n       <Body>\n         <p>\n           {t(\n-            \"It looks like the original source code for this stack frame couldn't be determined when this error was captured. To get the original code for this stack frame, Sentry needs source maps to be configured.\"\n+            'It looks like the original source code for this stack frame. To get the original code for this stack frame, Sentry needs source maps to be uploaded.'\n           )}\n         </p>\n-        {metaFrameworksWithSentryWizardInOnboarding.includes(platform) ? (\n+        {isReactNativeSDK({\n+          sdkName: sourceResolutionResults.sdkName,\n+        }) ? (\n+          <Fragment>\n+            <WizardInstructionParagraph>\n+              {tct(\n+                \"For React Native projects, source maps should be generated and uploaded automatically during the build process. If your source maps aren't showing up, consult our [link:React Native source maps documentation].\",\n+                {\n+                  link: (\n+                    <ExternalLinkWithIcon href=\"https://docs.sentry.io/platforms/react-native/sourcemaps/\" />\n+                  ),\n+                }\n+              )}\n+            </WizardInstructionParagraph>\n+          </Fragment>",
        "comment_created_at": "2025-03-25T07:08:31+00:00",
        "comment_author": "priscilawebdev",
        "comment_body": "`Fragment` is only used to wrap multiple children. We have only 1 in this case, so we can remove it \r\n```suggestion\r\n         <WizardInstructionParagraph>\r\n              {tct(\r\n                \"For React Native projects, source maps should be generated and uploaded automatically during the build process. If your source maps aren't showing up, consult our [link:React Native source maps documentation].\",\r\n                {\r\n                  link: (\r\n                    <ExternalLinkWithIcon href=\"https://docs.sentry.io/platforms/react-native/sourcemaps/\" />\r\n                  ),\r\n                }\r\n              )}\r\n            </WizardInstructionParagraph>\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2154825005",
    "pr_number": 93704,
    "pr_file": "static/app/components/gridEditable/styles.tsx",
    "created_at": "2025-06-18T14:52:41+00:00",
    "commented_code": "showVerticalScrollbar?: boolean;\n   }) => (\n     <Panel {...props}>\n-      <PanelBody>{children}</PanelBody>\n+      <PanelBody style={{height: '100%'}}>{children}</PanelBody>",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2154825005",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93704,
        "pr_file": "static/app/components/gridEditable/styles.tsx",
        "discussion_id": "2154825005",
        "commented_code": "@@ -57,7 +57,7 @@ export const Body = styled(\n     showVerticalScrollbar?: boolean;\n   }) => (\n     <Panel {...props}>\n-      <PanelBody>{children}</PanelBody>\n+      <PanelBody style={{height: '100%'}}>{children}</PanelBody>",
        "comment_created_at": "2025-06-18T14:52:41+00:00",
        "comment_author": "JonasBa",
        "comment_body": "I would prefer if you restyled PanelBody, so that we don't have multiple different ways of defining CSS (it makes it harder to track values down if we need to look in multiple places)",
        "pr_file_module": null
      },
      {
        "comment_id": "2154909641",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93704,
        "pr_file": "static/app/components/gridEditable/styles.tsx",
        "discussion_id": "2154825005",
        "commented_code": "@@ -57,7 +57,7 @@ export const Body = styled(\n     showVerticalScrollbar?: boolean;\n   }) => (\n     <Panel {...props}>\n-      <PanelBody>{children}</PanelBody>\n+      <PanelBody style={{height: '100%'}}>{children}</PanelBody>",
        "comment_created_at": "2025-06-18T15:26:27+00:00",
        "comment_author": "lzhao-sentry",
        "comment_body": "@JonasBa Just to clarify--would I just add a StyledPanelBody at the bottom of the file? Or do you mean add this style directly to PanelBody?",
        "pr_file_module": null
      },
      {
        "comment_id": "2155001001",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93704,
        "pr_file": "static/app/components/gridEditable/styles.tsx",
        "discussion_id": "2154825005",
        "commented_code": "@@ -57,7 +57,7 @@ export const Body = styled(\n     showVerticalScrollbar?: boolean;\n   }) => (\n     <Panel {...props}>\n-      <PanelBody>{children}</PanelBody>\n+      <PanelBody style={{height: '100%'}}>{children}</PanelBody>",
        "comment_created_at": "2025-06-18T16:07:37+00:00",
        "comment_author": "lzhao-sentry",
        "comment_body": "Ended up adding it to the bottom as StyledPanelBody",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2159723808",
    "pr_number": 94001,
    "pr_file": "static/app/components/feedback/feedbackSummary.tsx",
    "created_at": "2025-06-20T22:22:48+00:00",
    "commented_code": "const organization = useOrganization();\n \n-  if (\n-    !organization.features.includes('user-feedback-ai-summaries') ||\n-    tooFewFeedbacks ||\n-    isError\n-  ) {\n+  if (!organization.features.includes('user-feedback-ai-summaries') || isError) {\n     return null;\n   }\n \n-  if (isPending) {\n-    return <Placeholder height=\"100px\" />;\n-  }\n-\n   return (\n     <SummaryIconContainer>\n       <IconSeer size=\"xs\" />\n       <SummaryContainer>\n         <SummaryHeader>{t('Feedback Summary')}</SummaryHeader>\n-        <SummaryContent>{summary}</SummaryContent>\n+        {isPending ? (\n+          <LoadingContainer>\n+            <LoadingIndicator style={{margin: 0, marginTop: space(0.5)}} size={24} />",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2159723808",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94001,
        "pr_file": "static/app/components/feedback/feedbackSummary.tsx",
        "discussion_id": "2159723808",
        "commented_code": "@@ -12,29 +12,39 @@ export default function FeedbackSummary() {\n \n   const organization = useOrganization();\n \n-  if (\n-    !organization.features.includes('user-feedback-ai-summaries') ||\n-    tooFewFeedbacks ||\n-    isError\n-  ) {\n+  if (!organization.features.includes('user-feedback-ai-summaries') || isError) {\n     return null;\n   }\n \n-  if (isPending) {\n-    return <Placeholder height=\"100px\" />;\n-  }\n-\n   return (\n     <SummaryIconContainer>\n       <IconSeer size=\"xs\" />\n       <SummaryContainer>\n         <SummaryHeader>{t('Feedback Summary')}</SummaryHeader>\n-        <SummaryContent>{summary}</SummaryContent>\n+        {isPending ? (\n+          <LoadingContainer>\n+            <LoadingIndicator style={{margin: 0, marginTop: space(0.5)}} size={24} />",
        "comment_created_at": "2025-06-20T22:22:48+00:00",
        "comment_author": "michellewzhang",
        "comment_body": "can we style the `LoadingIndicator` down below with `styled` rather than doing inline styles?",
        "pr_file_module": null
      },
      {
        "comment_id": "2159725544",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94001,
        "pr_file": "static/app/components/feedback/feedbackSummary.tsx",
        "discussion_id": "2159723808",
        "commented_code": "@@ -12,29 +12,39 @@ export default function FeedbackSummary() {\n \n   const organization = useOrganization();\n \n-  if (\n-    !organization.features.includes('user-feedback-ai-summaries') ||\n-    tooFewFeedbacks ||\n-    isError\n-  ) {\n+  if (!organization.features.includes('user-feedback-ai-summaries') || isError) {\n     return null;\n   }\n \n-  if (isPending) {\n-    return <Placeholder height=\"100px\" />;\n-  }\n-\n   return (\n     <SummaryIconContainer>\n       <IconSeer size=\"xs\" />\n       <SummaryContainer>\n         <SummaryHeader>{t('Feedback Summary')}</SummaryHeader>\n-        <SummaryContent>{summary}</SummaryContent>\n+        {isPending ? (\n+          <LoadingContainer>\n+            <LoadingIndicator style={{margin: 0, marginTop: space(0.5)}} size={24} />",
        "comment_created_at": "2025-06-20T22:24:43+00:00",
        "comment_author": "michellewzhang",
        "comment_body": "would look something like this\r\n\r\n```\r\nconst StyledLoadingIndicator = styled(LoadingIndicator)`\r\n    margin: ${space(0.5)} 0 0 0;\r\n`;\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2157466184",
    "pr_number": 93902,
    "pr_file": "static/app/views/dashboards/widgets/tableWidget/tableWidgetVisualization.tsx",
    "created_at": "2025-06-19T17:58:42+00:00",
    "commented_code": "+import type {CSSProperties} from 'react';\n+import {Fragment} from 'react';\n+import {useTheme} from '@emotion/react';\n+\n+import type {GridColumnOrder} from 'sentry/components/gridEditable';\n+import GridEditable from 'sentry/components/gridEditable';\n+import type {TableData} from 'sentry/utils/discover/discoverQuery';\n+import {useLocation} from 'sentry/utils/useLocation';\n+import useOrganization from 'sentry/utils/useOrganization';\n+import {\n+  renderDefaultBodyCell,\n+  renderDefaultHeadCell,\n+} from 'sentry/views/dashboards/widgets/tableWidget/defaultTableCellRenderers';\n+import type {TableColumn} from 'sentry/views/discover/table/types';\n+\n+interface TableWidgetVisualizationProps {\n+  columns: Array<TableColumn<string>>;\n+  loading: boolean;\n+  tableData: TableData;\n+  fitMaxContent?: boolean;\n+  minTableColumnWidth?: number;\n+  renderTableBodyCell?: (\n+    column: GridColumnOrder,\n+    dataRow: Record<string, any>,\n+    rowIndex: number,\n+    columnIndex: number\n+  ) => React.ReactNode;\n+  renderTableHeadCell?: (column: GridColumnOrder, columnIndex: number) => React.ReactNode;\n+  scrollable?: boolean;\n+  stickyHeader?: boolean;\n+  style?: CSSProperties;\n+}\n+\n+function TableWidgetVisualization(props: TableWidgetVisualizationProps) {\n+  const {\n+    tableData,\n+    loading,\n+    stickyHeader,\n+    scrollable,\n+    minTableColumnWidth,\n+    style,\n+    renderTableBodyCell,\n+    renderTableHeadCell,\n+    columns,\n+  } = props;\n+\n+  const theme = useTheme();\n+  const location = useLocation();\n+  const organization = useOrganization();\n+\n+  return (\n+    <Fragment>\n+      <GridEditable\n+        isLoading={loading}\n+        data={tableData?.data ?? []}\n+        columnOrder={columns}\n+        columnSortBy={[]}\n+        grid={{\n+          renderHeadCell: renderTableHeadCell\n+            ? renderTableHeadCell\n+            : (renderDefaultHeadCell({tableData}) as (\n+                column: GridColumnOrder,\n+                columnIndex: number\n+              ) => React.ReactNode),\n+          renderBodyCell: renderTableBodyCell\n+            ? renderTableBodyCell\n+            : renderDefaultBodyCell({\n+                tableData,\n+                location,\n+                organization,\n+                theme,\n+              }),\n+        }}\n+        stickyHeader={stickyHeader}\n+        scrollable={scrollable}\n+        height={'100%'}",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2157466184",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93902,
        "pr_file": "static/app/views/dashboards/widgets/tableWidget/tableWidgetVisualization.tsx",
        "discussion_id": "2157466184",
        "commented_code": "@@ -0,0 +1,86 @@\n+import type {CSSProperties} from 'react';\n+import {Fragment} from 'react';\n+import {useTheme} from '@emotion/react';\n+\n+import type {GridColumnOrder} from 'sentry/components/gridEditable';\n+import GridEditable from 'sentry/components/gridEditable';\n+import type {TableData} from 'sentry/utils/discover/discoverQuery';\n+import {useLocation} from 'sentry/utils/useLocation';\n+import useOrganization from 'sentry/utils/useOrganization';\n+import {\n+  renderDefaultBodyCell,\n+  renderDefaultHeadCell,\n+} from 'sentry/views/dashboards/widgets/tableWidget/defaultTableCellRenderers';\n+import type {TableColumn} from 'sentry/views/discover/table/types';\n+\n+interface TableWidgetVisualizationProps {\n+  columns: Array<TableColumn<string>>;\n+  loading: boolean;\n+  tableData: TableData;\n+  fitMaxContent?: boolean;\n+  minTableColumnWidth?: number;\n+  renderTableBodyCell?: (\n+    column: GridColumnOrder,\n+    dataRow: Record<string, any>,\n+    rowIndex: number,\n+    columnIndex: number\n+  ) => React.ReactNode;\n+  renderTableHeadCell?: (column: GridColumnOrder, columnIndex: number) => React.ReactNode;\n+  scrollable?: boolean;\n+  stickyHeader?: boolean;\n+  style?: CSSProperties;\n+}\n+\n+function TableWidgetVisualization(props: TableWidgetVisualizationProps) {\n+  const {\n+    tableData,\n+    loading,\n+    stickyHeader,\n+    scrollable,\n+    minTableColumnWidth,\n+    style,\n+    renderTableBodyCell,\n+    renderTableHeadCell,\n+    columns,\n+  } = props;\n+\n+  const theme = useTheme();\n+  const location = useLocation();\n+  const organization = useOrganization();\n+\n+  return (\n+    <Fragment>\n+      <GridEditable\n+        isLoading={loading}\n+        data={tableData?.data ?? []}\n+        columnOrder={columns}\n+        columnSortBy={[]}\n+        grid={{\n+          renderHeadCell: renderTableHeadCell\n+            ? renderTableHeadCell\n+            : (renderDefaultHeadCell({tableData}) as (\n+                column: GridColumnOrder,\n+                columnIndex: number\n+              ) => React.ReactNode),\n+          renderBodyCell: renderTableBodyCell\n+            ? renderTableBodyCell\n+            : renderDefaultBodyCell({\n+                tableData,\n+                location,\n+                organization,\n+                theme,\n+              }),\n+        }}\n+        stickyHeader={stickyHeader}\n+        scrollable={scrollable}\n+        height={'100%'}",
        "comment_created_at": "2025-06-19T17:58:42+00:00",
        "comment_author": "narsaynorath",
        "comment_body": "small nit, usually if it's just a string we drop the braces\r\n\r\n```suggestion\r\n        height=\"100%\"\r\n```",
        "pr_file_module": null
      }
    ]
  }
]