[
  {
    "discussion_id": "2172636868",
    "pr_number": 94500,
    "pr_file": "src/sentry/api/endpoints/seer_rpc.py",
    "created_at": "2025-06-27T18:26:48+00:00",
    "commented_code": "return {\"attributes_and_values\": attributes_and_values}\n \n \n+def get_github_enterprise_integration_config(\n+    *, organization_id: int, integration_id: int\n+) -> dict[str, Any]:\n+    integration = integration_service.get_integration(\n+        integration_id=integration_id,\n+        provider=IntegrationProviderSlug.GITHUB_ENTERPRISE.value,\n+        organization_id=organization_id,\n+        status=ObjectStatus.ACTIVE,\n+    )\n+    if integration is None:\n+        raise Integration.DoesNotExist\n+\n+    installation = integration.get_installation(organization_id=organization_id)\n+\n+    return {\n+        \"base_url\": f\"https://{installation.model.metadata[\"domain_name\"].split(\"/\")[0]}/api/v3\",\n+        \"private_key\": installation.model.metadata[\"installation\"][\"private_key\"],",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2172636868",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94500,
        "pr_file": "src/sentry/api/endpoints/seer_rpc.py",
        "discussion_id": "2172636868",
        "commented_code": "@@ -459,6 +462,29 @@ def get_attributes_and_values(\n     return {\"attributes_and_values\": attributes_and_values}\n \n \n+def get_github_enterprise_integration_config(\n+    *, organization_id: int, integration_id: int\n+) -> dict[str, Any]:\n+    integration = integration_service.get_integration(\n+        integration_id=integration_id,\n+        provider=IntegrationProviderSlug.GITHUB_ENTERPRISE.value,\n+        organization_id=organization_id,\n+        status=ObjectStatus.ACTIVE,\n+    )\n+    if integration is None:\n+        raise Integration.DoesNotExist\n+\n+    installation = integration.get_installation(organization_id=organization_id)\n+\n+    return {\n+        \"base_url\": f\"https://{installation.model.metadata[\"domain_name\"].split(\"/\")[0]}/api/v3\",\n+        \"private_key\": installation.model.metadata[\"installation\"][\"private_key\"],",
        "comment_created_at": "2025-06-27T18:26:48+00:00",
        "comment_author": "GabeVillalobos",
        "comment_body": "We'll want to encrypt this key prior to surfacing it to Seer via a shared secret (cc: @jennmueng @getsentry/security if you have preferred ways of doing this).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2190757275",
    "pr_number": 94500,
    "pr_file": "src/sentry/api/endpoints/seer_rpc.py",
    "created_at": "2025-07-07T18:12:53+00:00",
    "commented_code": "return {\"attributes_and_values\": attributes_and_values}\n \n \n+def get_github_enterprise_integration_config(\n+    *, organization_id: int, integration_id: int\n+) -> dict[str, Any]:\n+    if not settings.SEER_API_SHARED_SECRET:\n+        raise RuntimeError(\"Cannot encrypt access token without SEER_API_SHARED_SECRET\")\n+\n+    if len(settings.SEER_API_SHARED_SECRET.encode(\"utf-8\")) != 32:\n+        raise RuntimeError(\n+            \"SEER_API_SHARED_SECRET must be 32 bytes long (after UTF-8 encoding) for Fernet encryption\"\n+        )\n+\n+    integration = integration_service.get_integration(\n+        integration_id=integration_id,\n+        provider=IntegrationProviderSlug.GITHUB_ENTERPRISE.value,\n+        organization_id=organization_id,\n+        status=ObjectStatus.ACTIVE,\n+    )\n+    if integration is None:\n+        raise Integration.DoesNotExist\n+\n+    installation = integration.get_installation(organization_id=organization_id)\n+    assert isinstance(installation, GitHubEnterpriseIntegration)\n+\n+    client = installation.get_client()\n+    access_token = client.get_access_token()\n+\n+    if not access_token:\n+        raise RuntimeError(\"No access token found\")\n+\n+    fernet = Fernet(base64.urlsafe_b64encode(settings.SEER_API_SHARED_SECRET.encode(\"utf-8\")))\n+    encrypted_access_token = fernet.encrypt(access_token.encode(\"utf-8\")).decode(\"utf-8\")",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2190757275",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94500,
        "pr_file": "src/sentry/api/endpoints/seer_rpc.py",
        "discussion_id": "2190757275",
        "commented_code": "@@ -459,6 +465,45 @@ def get_attributes_and_values(\n     return {\"attributes_and_values\": attributes_and_values}\n \n \n+def get_github_enterprise_integration_config(\n+    *, organization_id: int, integration_id: int\n+) -> dict[str, Any]:\n+    if not settings.SEER_API_SHARED_SECRET:\n+        raise RuntimeError(\"Cannot encrypt access token without SEER_API_SHARED_SECRET\")\n+\n+    if len(settings.SEER_API_SHARED_SECRET.encode(\"utf-8\")) != 32:\n+        raise RuntimeError(\n+            \"SEER_API_SHARED_SECRET must be 32 bytes long (after UTF-8 encoding) for Fernet encryption\"\n+        )\n+\n+    integration = integration_service.get_integration(\n+        integration_id=integration_id,\n+        provider=IntegrationProviderSlug.GITHUB_ENTERPRISE.value,\n+        organization_id=organization_id,\n+        status=ObjectStatus.ACTIVE,\n+    )\n+    if integration is None:\n+        raise Integration.DoesNotExist\n+\n+    installation = integration.get_installation(organization_id=organization_id)\n+    assert isinstance(installation, GitHubEnterpriseIntegration)\n+\n+    client = installation.get_client()\n+    access_token = client.get_access_token()\n+\n+    if not access_token:\n+        raise RuntimeError(\"No access token found\")\n+\n+    fernet = Fernet(base64.urlsafe_b64encode(settings.SEER_API_SHARED_SECRET.encode(\"utf-8\")))\n+    encrypted_access_token = fernet.encrypt(access_token.encode(\"utf-8\")).decode(\"utf-8\")",
        "comment_created_at": "2025-07-07T18:12:53+00:00",
        "comment_author": "mdtro",
        "comment_body": "It's not necessary to decode this, you could probably skip it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2190947045",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94500,
        "pr_file": "src/sentry/api/endpoints/seer_rpc.py",
        "discussion_id": "2190757275",
        "commented_code": "@@ -459,6 +465,45 @@ def get_attributes_and_values(\n     return {\"attributes_and_values\": attributes_and_values}\n \n \n+def get_github_enterprise_integration_config(\n+    *, organization_id: int, integration_id: int\n+) -> dict[str, Any]:\n+    if not settings.SEER_API_SHARED_SECRET:\n+        raise RuntimeError(\"Cannot encrypt access token without SEER_API_SHARED_SECRET\")\n+\n+    if len(settings.SEER_API_SHARED_SECRET.encode(\"utf-8\")) != 32:\n+        raise RuntimeError(\n+            \"SEER_API_SHARED_SECRET must be 32 bytes long (after UTF-8 encoding) for Fernet encryption\"\n+        )\n+\n+    integration = integration_service.get_integration(\n+        integration_id=integration_id,\n+        provider=IntegrationProviderSlug.GITHUB_ENTERPRISE.value,\n+        organization_id=organization_id,\n+        status=ObjectStatus.ACTIVE,\n+    )\n+    if integration is None:\n+        raise Integration.DoesNotExist\n+\n+    installation = integration.get_installation(organization_id=organization_id)\n+    assert isinstance(installation, GitHubEnterpriseIntegration)\n+\n+    client = installation.get_client()\n+    access_token = client.get_access_token()\n+\n+    if not access_token:\n+        raise RuntimeError(\"No access token found\")\n+\n+    fernet = Fernet(base64.urlsafe_b64encode(settings.SEER_API_SHARED_SECRET.encode(\"utf-8\")))\n+    encrypted_access_token = fernet.encrypt(access_token.encode(\"utf-8\")).decode(\"utf-8\")",
        "comment_created_at": "2025-07-07T20:20:17+00:00",
        "comment_author": "jianyuan",
        "comment_body": "Unfortunately they are necessary as both `base64.urlsafe_b64encode` and `fernet.encrypt` expect bytes.",
        "pr_file_module": null
      },
      {
        "comment_id": "2193465574",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94500,
        "pr_file": "src/sentry/api/endpoints/seer_rpc.py",
        "discussion_id": "2190757275",
        "commented_code": "@@ -459,6 +465,45 @@ def get_attributes_and_values(\n     return {\"attributes_and_values\": attributes_and_values}\n \n \n+def get_github_enterprise_integration_config(\n+    *, organization_id: int, integration_id: int\n+) -> dict[str, Any]:\n+    if not settings.SEER_API_SHARED_SECRET:\n+        raise RuntimeError(\"Cannot encrypt access token without SEER_API_SHARED_SECRET\")\n+\n+    if len(settings.SEER_API_SHARED_SECRET.encode(\"utf-8\")) != 32:\n+        raise RuntimeError(\n+            \"SEER_API_SHARED_SECRET must be 32 bytes long (after UTF-8 encoding) for Fernet encryption\"\n+        )\n+\n+    integration = integration_service.get_integration(\n+        integration_id=integration_id,\n+        provider=IntegrationProviderSlug.GITHUB_ENTERPRISE.value,\n+        organization_id=organization_id,\n+        status=ObjectStatus.ACTIVE,\n+    )\n+    if integration is None:\n+        raise Integration.DoesNotExist\n+\n+    installation = integration.get_installation(organization_id=organization_id)\n+    assert isinstance(installation, GitHubEnterpriseIntegration)\n+\n+    client = installation.get_client()\n+    access_token = client.get_access_token()\n+\n+    if not access_token:\n+        raise RuntimeError(\"No access token found\")\n+\n+    fernet = Fernet(base64.urlsafe_b64encode(settings.SEER_API_SHARED_SECRET.encode(\"utf-8\")))\n+    encrypted_access_token = fernet.encrypt(access_token.encode(\"utf-8\")).decode(\"utf-8\")",
        "comment_created_at": "2025-07-08T21:22:36+00:00",
        "comment_author": "mdtro",
        "comment_body": "Let's move to a secret specific for this functionality then. Apologies for my original suggestion on re-using this.\r\n\r\nIt should be generated with `Fernet.generate_key()` to ensure secure randomness. It'll return the base64 encoded bytes that can be used as is.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2136254128",
    "pr_number": 93134,
    "pr_file": "src/sentry/api/endpoints/organization_feedback_summary.py",
    "created_at": "2025-06-09T18:34:34+00:00",
    "commented_code": "+import logging\n+from datetime import timedelta\n+\n+from rest_framework.exceptions import ParseError\n+from rest_framework.request import Request\n+from rest_framework.response import Response\n+\n+from sentry.api.api_owners import ApiOwner\n+from sentry.api.api_publish_status import ApiPublishStatus\n+from sentry.api.base import region_silo_endpoint\n+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationUserReportsPermission\n+from sentry.api.utils import get_date_range_from_stats_period\n+from sentry.exceptions import InvalidParams\n+from sentry.feedback.usecases.feedback_summaries import generate_summary\n+from sentry.issues.grouptype import FeedbackGroup\n+from sentry.models.group import Group, GroupStatus\n+from sentry.models.organization import Organization\n+\n+logger = logging.getLogger(__name__)\n+\n+MIN_FEEDBACKS_TO_SUMMARIZE = 10\n+MAX_FEEDBACKS_TO_SUMMARIZE = 1000\n+# The input token limit for the model is 1,048,576 tokens, see https://ai.google.dev/gemini-api/docs/models#gemini-2.0-flash\n+MAX_FEEDBACKS_TO_SUMMARIZE_CHARS = 1000000\n+\n+\n+@region_silo_endpoint\n+class OrganizationFeedbackSummaryEndpoint(OrganizationEndpoint):\n+    owner = ApiOwner.FEEDBACK\n+    publish_status = {\n+        \"GET\": ApiPublishStatus.EXPERIMENTAL,\n+    }\n+    permission_classes = (OrganizationUserReportsPermission,)\n+\n+    def get(self, request: Request, organization: Organization) -> Response:\n+        \"\"\"\n+        Get the summary of the user feedbacks of an organization\n+        ``````````````````````````````````````````````````\n+\n+        Returns the summary of the user feedbacks. The user feedbacks can be filtered by a list of projects and the date range that they were created in.\n+\n+        :pparam string organization_id_or_slug: the id or slug of the organization the\n+                                          release belongs to.\n+        :pparam string version: the version identifier of the release.\n+        :auth: required\n+        \"\"\"\n+\n+        # TODO: add a feature flag for this endpoint\n+\n+        # stolen from organization_group_index.py\n+        try:\n+            start, end = get_date_range_from_stats_period(\n+                request.GET,\n+                optional=False,\n+                default_stats_period=timedelta(days=7),\n+            )\n+        except InvalidParams as e:\n+            raise ParseError(detail=str(e))",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2136256731",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/endpoints/organization_feedback_summary.py",
        "discussion_id": "2136254128",
        "commented_code": "@@ -0,0 +1,108 @@\n+import logging\n+from datetime import timedelta\n+\n+from rest_framework.exceptions import ParseError\n+from rest_framework.request import Request\n+from rest_framework.response import Response\n+\n+from sentry.api.api_owners import ApiOwner\n+from sentry.api.api_publish_status import ApiPublishStatus\n+from sentry.api.base import region_silo_endpoint\n+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationUserReportsPermission\n+from sentry.api.utils import get_date_range_from_stats_period\n+from sentry.exceptions import InvalidParams\n+from sentry.feedback.usecases.feedback_summaries import generate_summary\n+from sentry.issues.grouptype import FeedbackGroup\n+from sentry.models.group import Group, GroupStatus\n+from sentry.models.organization import Organization\n+\n+logger = logging.getLogger(__name__)\n+\n+MIN_FEEDBACKS_TO_SUMMARIZE = 10\n+MAX_FEEDBACKS_TO_SUMMARIZE = 1000\n+# The input token limit for the model is 1,048,576 tokens, see https://ai.google.dev/gemini-api/docs/models#gemini-2.0-flash\n+MAX_FEEDBACKS_TO_SUMMARIZE_CHARS = 1000000\n+\n+\n+@region_silo_endpoint\n+class OrganizationFeedbackSummaryEndpoint(OrganizationEndpoint):\n+    owner = ApiOwner.FEEDBACK\n+    publish_status = {\n+        \"GET\": ApiPublishStatus.EXPERIMENTAL,\n+    }\n+    permission_classes = (OrganizationUserReportsPermission,)\n+\n+    def get(self, request: Request, organization: Organization) -> Response:\n+        \"\"\"\n+        Get the summary of the user feedbacks of an organization\n+        ``````````````````````````````````````````````````\n+\n+        Returns the summary of the user feedbacks. The user feedbacks can be filtered by a list of projects and the date range that they were created in.\n+\n+        :pparam string organization_id_or_slug: the id or slug of the organization the\n+                                          release belongs to.\n+        :pparam string version: the version identifier of the release.\n+        :auth: required\n+        \"\"\"\n+\n+        # TODO: add a feature flag for this endpoint\n+\n+        # stolen from organization_group_index.py\n+        try:\n+            start, end = get_date_range_from_stats_period(\n+                request.GET,\n+                optional=False,\n+                default_stats_period=timedelta(days=7),\n+            )\n+        except InvalidParams as e:\n+            raise ParseError(detail=str(e))",
        "comment_created_at": "2025-06-09T18:36:38+00:00",
        "comment_author": "vishnupsatish",
        "comment_body": "hmm, this is how it is done in other places so wondering why this is unsafe",
        "pr_file_module": null
      },
      {
        "comment_id": "2136437971",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/endpoints/organization_feedback_summary.py",
        "discussion_id": "2136254128",
        "commented_code": "@@ -0,0 +1,108 @@\n+import logging\n+from datetime import timedelta\n+\n+from rest_framework.exceptions import ParseError\n+from rest_framework.request import Request\n+from rest_framework.response import Response\n+\n+from sentry.api.api_owners import ApiOwner\n+from sentry.api.api_publish_status import ApiPublishStatus\n+from sentry.api.base import region_silo_endpoint\n+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationUserReportsPermission\n+from sentry.api.utils import get_date_range_from_stats_period\n+from sentry.exceptions import InvalidParams\n+from sentry.feedback.usecases.feedback_summaries import generate_summary\n+from sentry.issues.grouptype import FeedbackGroup\n+from sentry.models.group import Group, GroupStatus\n+from sentry.models.organization import Organization\n+\n+logger = logging.getLogger(__name__)\n+\n+MIN_FEEDBACKS_TO_SUMMARIZE = 10\n+MAX_FEEDBACKS_TO_SUMMARIZE = 1000\n+# The input token limit for the model is 1,048,576 tokens, see https://ai.google.dev/gemini-api/docs/models#gemini-2.0-flash\n+MAX_FEEDBACKS_TO_SUMMARIZE_CHARS = 1000000\n+\n+\n+@region_silo_endpoint\n+class OrganizationFeedbackSummaryEndpoint(OrganizationEndpoint):\n+    owner = ApiOwner.FEEDBACK\n+    publish_status = {\n+        \"GET\": ApiPublishStatus.EXPERIMENTAL,\n+    }\n+    permission_classes = (OrganizationUserReportsPermission,)\n+\n+    def get(self, request: Request, organization: Organization) -> Response:\n+        \"\"\"\n+        Get the summary of the user feedbacks of an organization\n+        ``````````````````````````````````````````````````\n+\n+        Returns the summary of the user feedbacks. The user feedbacks can be filtered by a list of projects and the date range that they were created in.\n+\n+        :pparam string organization_id_or_slug: the id or slug of the organization the\n+                                          release belongs to.\n+        :pparam string version: the version identifier of the release.\n+        :auth: required\n+        \"\"\"\n+\n+        # TODO: add a feature flag for this endpoint\n+\n+        # stolen from organization_group_index.py\n+        try:\n+            start, end = get_date_range_from_stats_period(\n+                request.GET,\n+                optional=False,\n+                default_stats_period=timedelta(days=7),\n+            )\n+        except InvalidParams as e:\n+            raise ParseError(detail=str(e))",
        "comment_created_at": "2025-06-09T20:18:48+00:00",
        "comment_author": "michellewzhang",
        "comment_body": "hmm that's interesting... \r\n\r\ncc @cmanallen ",
        "pr_file_module": null
      },
      {
        "comment_id": "2140439548",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/endpoints/organization_feedback_summary.py",
        "discussion_id": "2136254128",
        "commented_code": "@@ -0,0 +1,108 @@\n+import logging\n+from datetime import timedelta\n+\n+from rest_framework.exceptions import ParseError\n+from rest_framework.request import Request\n+from rest_framework.response import Response\n+\n+from sentry.api.api_owners import ApiOwner\n+from sentry.api.api_publish_status import ApiPublishStatus\n+from sentry.api.base import region_silo_endpoint\n+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationUserReportsPermission\n+from sentry.api.utils import get_date_range_from_stats_period\n+from sentry.exceptions import InvalidParams\n+from sentry.feedback.usecases.feedback_summaries import generate_summary\n+from sentry.issues.grouptype import FeedbackGroup\n+from sentry.models.group import Group, GroupStatus\n+from sentry.models.organization import Organization\n+\n+logger = logging.getLogger(__name__)\n+\n+MIN_FEEDBACKS_TO_SUMMARIZE = 10\n+MAX_FEEDBACKS_TO_SUMMARIZE = 1000\n+# The input token limit for the model is 1,048,576 tokens, see https://ai.google.dev/gemini-api/docs/models#gemini-2.0-flash\n+MAX_FEEDBACKS_TO_SUMMARIZE_CHARS = 1000000\n+\n+\n+@region_silo_endpoint\n+class OrganizationFeedbackSummaryEndpoint(OrganizationEndpoint):\n+    owner = ApiOwner.FEEDBACK\n+    publish_status = {\n+        \"GET\": ApiPublishStatus.EXPERIMENTAL,\n+    }\n+    permission_classes = (OrganizationUserReportsPermission,)\n+\n+    def get(self, request: Request, organization: Organization) -> Response:\n+        \"\"\"\n+        Get the summary of the user feedbacks of an organization\n+        ``````````````````````````````````````````````````\n+\n+        Returns the summary of the user feedbacks. The user feedbacks can be filtered by a list of projects and the date range that they were created in.\n+\n+        :pparam string organization_id_or_slug: the id or slug of the organization the\n+                                          release belongs to.\n+        :pparam string version: the version identifier of the release.\n+        :auth: required\n+        \"\"\"\n+\n+        # TODO: add a feature flag for this endpoint\n+\n+        # stolen from organization_group_index.py\n+        try:\n+            start, end = get_date_range_from_stats_period(\n+                request.GET,\n+                optional=False,\n+                default_stats_period=timedelta(days=7),\n+            )\n+        except InvalidParams as e:\n+            raise ParseError(detail=str(e))",
        "comment_created_at": "2025-06-11T15:04:16+00:00",
        "comment_author": "cmanallen",
        "comment_body": "Its not encouraged to `str` an exception because you can accidentally leak confidential details.  In this case its fine because this exception class is meant to be returned.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2136273149",
    "pr_number": 93134,
    "pr_file": "src/sentry/api/endpoints/organization_feedback_summary.py",
    "created_at": "2025-06-09T18:48:26+00:00",
    "commented_code": "+import logging\n+from datetime import timedelta\n+\n+from rest_framework.exceptions import ParseError\n+from rest_framework.request import Request\n+from rest_framework.response import Response\n+\n+from sentry.api.api_owners import ApiOwner\n+from sentry.api.api_publish_status import ApiPublishStatus\n+from sentry.api.base import region_silo_endpoint\n+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationUserReportsPermission\n+from sentry.api.utils import get_date_range_from_stats_period\n+from sentry.exceptions import InvalidParams\n+from sentry.feedback.usecases.feedback_summaries import generate_summary\n+from sentry.issues.grouptype import FeedbackGroup\n+from sentry.models.group import Group, GroupStatus\n+from sentry.models.organization import Organization\n+\n+logger = logging.getLogger(__name__)\n+\n+MIN_FEEDBACKS_TO_SUMMARIZE = 10\n+MAX_FEEDBACKS_TO_SUMMARIZE = 1000\n+# Token limit is 1,048,576 tokens, see https://ai.google.dev/gemini-api/docs/models#gemini-2.0-flash\n+MAX_FEEDBACKS_TO_SUMMARIZE_CHARS = 1000000\n+\n+\n+@region_silo_endpoint\n+class OrganizationFeedbackSummaryEndpoint(OrganizationEndpoint):\n+    owner = ApiOwner.FEEDBACK\n+    publish_status = {\n+        \"GET\": ApiPublishStatus.EXPERIMENTAL,\n+    }\n+    permission_classes = (OrganizationUserReportsPermission,)\n+\n+    def get(self, request: Request, organization: Organization) -> Response:\n+        \"\"\"\n+        Get the summary of the user feedbacks of an organization\n+        ``````````````````````````````````````````````````\n+\n+        Returns the summary of the user feedbacks. The user feedbacks can be filtered by:\n+        - A list of projects\n+        - The date range that they were first seen in (defaults to 7 days)\n+\n+        :pparam string organization_id_or_slug: the id or slug of the organization.\n+        :qparam list[int] project: list of project IDs to filter by\n+        :qparam string statsPeriod: filter feedbacks by date range (e.g. \"14d\")\n+        :qparam string start: start date range (alternative to statsPeriod)\n+        :qparam string end: end date range (alternative to statsPeriod)\n+        :auth: required\n+        \"\"\"\n+\n+        try:\n+            start, end = get_date_range_from_stats_period(\n+                request.GET,\n+                optional=False,\n+                default_stats_period=timedelta(days=7),\n+            )\n+        except InvalidParams as e:\n+            raise ParseError(detail=str(e))",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2138405490",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93134,
        "pr_file": "src/sentry/api/endpoints/organization_feedback_summary.py",
        "discussion_id": "2136273149",
        "commented_code": "@@ -0,0 +1,105 @@\n+import logging\n+from datetime import timedelta\n+\n+from rest_framework.exceptions import ParseError\n+from rest_framework.request import Request\n+from rest_framework.response import Response\n+\n+from sentry.api.api_owners import ApiOwner\n+from sentry.api.api_publish_status import ApiPublishStatus\n+from sentry.api.base import region_silo_endpoint\n+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationUserReportsPermission\n+from sentry.api.utils import get_date_range_from_stats_period\n+from sentry.exceptions import InvalidParams\n+from sentry.feedback.usecases.feedback_summaries import generate_summary\n+from sentry.issues.grouptype import FeedbackGroup\n+from sentry.models.group import Group, GroupStatus\n+from sentry.models.organization import Organization\n+\n+logger = logging.getLogger(__name__)\n+\n+MIN_FEEDBACKS_TO_SUMMARIZE = 10\n+MAX_FEEDBACKS_TO_SUMMARIZE = 1000\n+# Token limit is 1,048,576 tokens, see https://ai.google.dev/gemini-api/docs/models#gemini-2.0-flash\n+MAX_FEEDBACKS_TO_SUMMARIZE_CHARS = 1000000\n+\n+\n+@region_silo_endpoint\n+class OrganizationFeedbackSummaryEndpoint(OrganizationEndpoint):\n+    owner = ApiOwner.FEEDBACK\n+    publish_status = {\n+        \"GET\": ApiPublishStatus.EXPERIMENTAL,\n+    }\n+    permission_classes = (OrganizationUserReportsPermission,)\n+\n+    def get(self, request: Request, organization: Organization) -> Response:\n+        \"\"\"\n+        Get the summary of the user feedbacks of an organization\n+        ``````````````````````````````````````````````````\n+\n+        Returns the summary of the user feedbacks. The user feedbacks can be filtered by:\n+        - A list of projects\n+        - The date range that they were first seen in (defaults to 7 days)\n+\n+        :pparam string organization_id_or_slug: the id or slug of the organization.\n+        :qparam list[int] project: list of project IDs to filter by\n+        :qparam string statsPeriod: filter feedbacks by date range (e.g. \"14d\")\n+        :qparam string start: start date range (alternative to statsPeriod)\n+        :qparam string end: end date range (alternative to statsPeriod)\n+        :auth: required\n+        \"\"\"\n+\n+        try:\n+            start, end = get_date_range_from_stats_period(\n+                request.GET,\n+                optional=False,\n+                default_stats_period=timedelta(days=7),\n+            )\n+        except InvalidParams as e:\n+            raise ParseError(detail=str(e))",
        "comment_created_at": "2025-06-10T17:16:57+00:00",
        "comment_author": "aliu39",
        "comment_body": "The autofix is pretty good here, maybe something like \"Invalid or missing date range\"",
        "pr_file_module": null
      }
    ]
  }
]