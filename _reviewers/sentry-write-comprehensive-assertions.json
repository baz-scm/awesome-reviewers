[
  {
    "discussion_id": "2159347459",
    "pr_number": 93902,
    "pr_file": "static/app/views/dashboards/widgets/tableWidget/tableWidgetVisualization.spec.tsx",
    "created_at": "2025-06-20T16:32:02+00:00",
    "commented_code": "+import {render, screen} from 'sentry-test/reactTestingLibrary';\n+\n+import {DurationUnit, RateUnit} from 'sentry/utils/discover/fields';\n+import type {TabularData} from 'sentry/views/dashboards/widgets/common/types';\n+import {sampleHTTPRequestTableData} from 'sentry/views/dashboards/widgets/tableWidget/fixtures/sampleTableData';\n+import {TabularColumnFixture} from 'sentry/views/dashboards/widgets/tableWidget/fixtures/tabularColumn';\n+import {TableWidgetVisualization} from 'sentry/views/dashboards/widgets/tableWidget/tableWidgetVisualization';\n+\n+describe('tableWidgetVisualization', function () {\n+  it('Basic table renders correctly', async function () {\n+    render(<TableWidgetVisualization tableData={sampleHTTPRequestTableData} />);\n+\n+    expect(await screen.findByText('http.request_method')).toBeInTheDocument();\n+    expect(await screen.findByText('count(span.duration)')).toBeInTheDocument();\n+  });\n+\n+  it('Table applies columns prop and their custom names over fallback if provided', async function () {\n+    render(\n+      <TableWidgetVisualization\n+        tableData={sampleHTTPRequestTableData}\n+        columns={TabularColumnFixture()}\n+      />\n+    );\n+\n+    expect(await screen.findByText('http request_method')).toBeInTheDocument();\n+    expect(await screen.findByText('count span.duration')).toBeInTheDocument();",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2159347459",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 93902,
        "pr_file": "static/app/views/dashboards/widgets/tableWidget/tableWidgetVisualization.spec.tsx",
        "discussion_id": "2159347459",
        "commented_code": "@@ -0,0 +1,67 @@\n+import {render, screen} from 'sentry-test/reactTestingLibrary';\n+\n+import {DurationUnit, RateUnit} from 'sentry/utils/discover/fields';\n+import type {TabularData} from 'sentry/views/dashboards/widgets/common/types';\n+import {sampleHTTPRequestTableData} from 'sentry/views/dashboards/widgets/tableWidget/fixtures/sampleTableData';\n+import {TabularColumnFixture} from 'sentry/views/dashboards/widgets/tableWidget/fixtures/tabularColumn';\n+import {TableWidgetVisualization} from 'sentry/views/dashboards/widgets/tableWidget/tableWidgetVisualization';\n+\n+describe('tableWidgetVisualization', function () {\n+  it('Basic table renders correctly', async function () {\n+    render(<TableWidgetVisualization tableData={sampleHTTPRequestTableData} />);\n+\n+    expect(await screen.findByText('http.request_method')).toBeInTheDocument();\n+    expect(await screen.findByText('count(span.duration)')).toBeInTheDocument();\n+  });\n+\n+  it('Table applies columns prop and their custom names over fallback if provided', async function () {\n+    render(\n+      <TableWidgetVisualization\n+        tableData={sampleHTTPRequestTableData}\n+        columns={TabularColumnFixture()}\n+      />\n+    );\n+\n+    expect(await screen.findByText('http request_method')).toBeInTheDocument();\n+    expect(await screen.findByText('count span.duration')).toBeInTheDocument();",
        "comment_created_at": "2025-06-20T16:32:02+00:00",
        "comment_author": "gggritso",
        "comment_body": "Another good assertion to add would be to check that the column order matches what's specified in `TabularColumnFixture()`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2180664570",
    "pr_number": 94474,
    "pr_file": "static/app/components/events/interfaces/breadcrumbs/breadcrumbs.spec.tsx",
    "created_at": "2025-07-02T18:02:10+00:00",
    "commented_code": "expect(screen.getByText('/settings/')).toHaveAttribute(\n         'href',\n-        '/organizations/org-slug/insights/backend/project-slug:abcdabcdabcdabcdabcdabcdabcdabcd/?referrer=breadcrumbs'\n+        '/organizations/org-slug/traces/trace/undefined/?referrer=breadcrumbs&statsPeriod=14d'",
    "repo_full_name": "getsentry/sentry",
    "discussion_comments": [
      {
        "comment_id": "2180664570",
        "repo_full_name": "getsentry/sentry",
        "pr_number": 94474,
        "pr_file": "static/app/components/events/interfaces/breadcrumbs/breadcrumbs.spec.tsx",
        "discussion_id": "2180664570",
        "commented_code": "@@ -209,7 +209,7 @@ describe('Breadcrumbs', () => {\n \n       expect(screen.getByText('/settings/')).toHaveAttribute(\n         'href',\n-        '/organizations/org-slug/insights/backend/project-slug:abcdabcdabcdabcdabcdabcdabcdabcd/?referrer=breadcrumbs'\n+        '/organizations/org-slug/traces/trace/undefined/?referrer=breadcrumbs&statsPeriod=14d'",
        "comment_created_at": "2025-07-02T18:02:10+00:00",
        "comment_author": "edwardgou-sentry",
        "comment_body": "Any way we can add a mock somewhere so that the trace id isn't `undefined`? Feels like that should be part of the test. Unless this flow isn't valid anymore, in which case maybe it makes sense to just delete this test",
        "pr_file_module": null
      }
    ]
  }
]