[
  {
    "discussion_id": "2296715492",
    "pr_number": 524,
    "pr_file": "src/solidlsp/language_servers/intelephense.py",
    "created_at": "2025-08-24T15:49:13+00:00",
    "commented_code": "}\n             ],\n         }\n-\n+        initialization_options = {}\n         # Add license key if provided via environment variable\n         license_key = os.environ.get(\"INTELEPHENSE_LICENSE_KEY\")\n         if license_key:\n-            initialize_params[\"initializationOptions\"] = {\"licenceKey\": license_key}\n+            initialization_options[\"licenceKey\"] = license_key\n+\n+        custom_intelephense_settings = self._solidlsp_settings.ls_specifics.get(self.__class__.__name__, {})",
    "repo_full_name": "oraios/serena",
    "discussion_comments": [
      {
        "comment_id": "2296715492",
        "repo_full_name": "oraios/serena",
        "pr_number": 524,
        "pr_file": "src/solidlsp/language_servers/intelephense.py",
        "discussion_id": "2296715492",
        "commented_code": "@@ -123,12 +126,21 @@ def _get_initialize_params(repository_absolute_path: str) -> InitializeParams:\n                 }\n             ],\n         }\n-\n+        initialization_options = {}\n         # Add license key if provided via environment variable\n         license_key = os.environ.get(\"INTELEPHENSE_LICENSE_KEY\")\n         if license_key:\n-            initialize_params[\"initializationOptions\"] = {\"licenceKey\": license_key}\n+            initialization_options[\"licenceKey\"] = license_key\n+\n+        custom_intelephense_settings = self._solidlsp_settings.ls_specifics.get(self.__class__.__name__, {})",
        "comment_created_at": "2025-08-24T15:49:13+00:00",
        "comment_author": "opcode81",
        "comment_body": "We originally discussed that we would use the enum item's value that is associated with the language server.\r\nDo you think the class name is a better option?\r\nRight now, the `Language` enum is actually a `LanguageServer` enum - and perhaps we should rename it accordingly - and use it accordingly.",
        "pr_file_module": null
      },
      {
        "comment_id": "2296716630",
        "repo_full_name": "oraios/serena",
        "pr_number": 524,
        "pr_file": "src/solidlsp/language_servers/intelephense.py",
        "discussion_id": "2296715492",
        "commented_code": "@@ -123,12 +126,21 @@ def _get_initialize_params(repository_absolute_path: str) -> InitializeParams:\n                 }\n             ],\n         }\n-\n+        initialization_options = {}\n         # Add license key if provided via environment variable\n         license_key = os.environ.get(\"INTELEPHENSE_LICENSE_KEY\")\n         if license_key:\n-            initialize_params[\"initializationOptions\"] = {\"licenceKey\": license_key}\n+            initialization_options[\"licenceKey\"] = license_key\n+\n+        custom_intelephense_settings = self._solidlsp_settings.ls_specifics.get(self.__class__.__name__, {})",
        "comment_created_at": "2025-08-24T15:51:52+00:00",
        "comment_author": "opcode81",
        "comment_body": "I think the enum value would be preferable, because the user is already familiar with the respective values.\r\nAnd we should probably document the possible options in `serena_config.yml` to make this accessible.",
        "pr_file_module": null
      },
      {
        "comment_id": "2298232060",
        "repo_full_name": "oraios/serena",
        "pr_number": 524,
        "pr_file": "src/solidlsp/language_servers/intelephense.py",
        "discussion_id": "2296715492",
        "commented_code": "@@ -123,12 +126,21 @@ def _get_initialize_params(repository_absolute_path: str) -> InitializeParams:\n                 }\n             ],\n         }\n-\n+        initialization_options = {}\n         # Add license key if provided via environment variable\n         license_key = os.environ.get(\"INTELEPHENSE_LICENSE_KEY\")\n         if license_key:\n-            initialize_params[\"initializationOptions\"] = {\"licenceKey\": license_key}\n+            initialization_options[\"licenceKey\"] = license_key\n+\n+        custom_intelephense_settings = self._solidlsp_settings.ls_specifics.get(self.__class__.__name__, {})",
        "comment_created_at": "2025-08-25T14:12:44+00:00",
        "comment_author": "MischaPanch",
        "comment_body": "Done",
        "pr_file_module": null
      },
      {
        "comment_id": "2304930867",
        "repo_full_name": "oraios/serena",
        "pr_number": 524,
        "pr_file": "src/solidlsp/language_servers/intelephense.py",
        "discussion_id": "2296715492",
        "commented_code": "@@ -123,12 +126,21 @@ def _get_initialize_params(repository_absolute_path: str) -> InitializeParams:\n                 }\n             ],\n         }\n-\n+        initialization_options = {}\n         # Add license key if provided via environment variable\n         license_key = os.environ.get(\"INTELEPHENSE_LICENSE_KEY\")\n         if license_key:\n-            initialize_params[\"initializationOptions\"] = {\"licenceKey\": license_key}\n+            initialization_options[\"licenceKey\"] = license_key\n+\n+        custom_intelephense_settings = self._solidlsp_settings.ls_specifics.get(self.__class__.__name__, {})",
        "comment_created_at": "2025-08-27T18:11:39+00:00",
        "comment_author": "opcode81",
        "comment_body": "The documentation in `serena_config.template..yml` is not updated to describe the new usage and does not list the possible options. Still says this:\r\n> Maps the language server class name to the options. Have a look at the docstring of the constructors of the LS implementations ...",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2228961970",
    "pr_number": 346,
    "pr_file": "src/serena/cli.py",
    "created_at": "2025-07-24T16:12:49+00:00",
    "commented_code": "@click.command(\"index-deprecated\", help=\"Deprecated alias for 'serena project index'.\")\n     @click.argument(\"project\", type=click.Path(exists=True), default=os.getcwd(), required=False)\n     @click.option(\"--log-level\", type=click.Choice([\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]), default=\"WARNING\")\n-    def index_deprecated(project: str, log_level: str = \"WARNING\") -> None:\n+    @click.option(\"--max-memory\", type=int, help=\"Maximum memory (MB) for Intelephense language server (minimum 256)\")",
    "repo_full_name": "oraios/serena",
    "discussion_comments": [
      {
        "comment_id": "2228961970",
        "repo_full_name": "oraios/serena",
        "pr_number": 346,
        "pr_file": "src/serena/cli.py",
        "discussion_id": "2228961970",
        "commented_code": "@@ -424,16 +424,33 @@ def index(project: str, log_level: str = \"WARNING\") -> None:\n     @click.command(\"index-deprecated\", help=\"Deprecated alias for 'serena project index'.\")\n     @click.argument(\"project\", type=click.Path(exists=True), default=os.getcwd(), required=False)\n     @click.option(\"--log-level\", type=click.Choice([\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]), default=\"WARNING\")\n-    def index_deprecated(project: str, log_level: str = \"WARNING\") -> None:\n+    @click.option(\"--max-memory\", type=int, help=\"Maximum memory (MB) for Intelephense language server (minimum 256)\")",
        "comment_created_at": "2025-07-24T16:12:49+00:00",
        "comment_author": "MischaPanch",
        "comment_body": "we shouldn't have language specific things here, but you can add general `--ls-max-memory`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2228964090",
    "pr_number": 346,
    "pr_file": "src/serena/cli.py",
    "created_at": "2025-07-24T16:13:53+00:00",
    "commented_code": "@click.command(\"index-deprecated\", help=\"Deprecated alias for 'serena project index'.\")\n     @click.argument(\"project\", type=click.Path(exists=True), default=os.getcwd(), required=False)\n     @click.option(\"--log-level\", type=click.Choice([\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]), default=\"WARNING\")\n-    def index_deprecated(project: str, log_level: str = \"WARNING\") -> None:\n+    @click.option(\"--max-memory\", type=int, help=\"Maximum memory (MB) for Intelephense language server (minimum 256)\")\n+    @click.option(\"--max-file-size\", type=int, help=\"Maximum file size (bytes) for Intelephense to process (default 1000000)\")\n+    def index_deprecated(project: str, log_level: str = \"WARNING\", max_memory: int | None = None, max_file_size: int | None = None) -> None:\n         click.echo(\"Deprecated! Use `project index` instead.\")\n-        ProjectCommands._index_project(project, log_level)\n+\n+        # Validate parameters\n+        if max_memory is not None and max_memory < 256:\n+            raise click.BadParameter(\"max-memory must be at least 256 MB\")\n+        if max_file_size is not None and max_file_size <= 0:\n+            raise click.BadParameter(\"max-file-size must be greater than 0\")\n+\n+        ProjectCommands._index_project(project, log_level, max_memory, max_file_size)\n \n     @staticmethod\n-    def _index_project(project: str, log_level: str) -> None:\n+    def _index_project(project: str, log_level: str, max_memory: int | None = None, max_file_size: int | None = None) -> None:\n         lvl = logging.getLevelNamesMapping()[log_level.upper()]\n         proj = Project.load(os.path.abspath(project))\n         print(f\"Indexing symbols in project {project}\u2026\")\n-        ls = proj.create_language_server(log_level=lvl)\n+\n+        # Prepare Intelephense options if provided\n+        intelephense_options = {}\n+        if max_memory is not None:\n+            intelephense_options[\"maxMemory\"] = max_memory",
    "repo_full_name": "oraios/serena",
    "discussion_comments": [
      {
        "comment_id": "2228964090",
        "repo_full_name": "oraios/serena",
        "pr_number": 346,
        "pr_file": "src/serena/cli.py",
        "discussion_id": "2228964090",
        "commented_code": "@@ -424,16 +424,33 @@ def index(project: str, log_level: str = \"WARNING\") -> None:\n     @click.command(\"index-deprecated\", help=\"Deprecated alias for 'serena project index'.\")\n     @click.argument(\"project\", type=click.Path(exists=True), default=os.getcwd(), required=False)\n     @click.option(\"--log-level\", type=click.Choice([\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]), default=\"WARNING\")\n-    def index_deprecated(project: str, log_level: str = \"WARNING\") -> None:\n+    @click.option(\"--max-memory\", type=int, help=\"Maximum memory (MB) for Intelephense language server (minimum 256)\")\n+    @click.option(\"--max-file-size\", type=int, help=\"Maximum file size (bytes) for Intelephense to process (default 1000000)\")\n+    def index_deprecated(project: str, log_level: str = \"WARNING\", max_memory: int | None = None, max_file_size: int | None = None) -> None:\n         click.echo(\"Deprecated! Use `project index` instead.\")\n-        ProjectCommands._index_project(project, log_level)\n+\n+        # Validate parameters\n+        if max_memory is not None and max_memory < 256:\n+            raise click.BadParameter(\"max-memory must be at least 256 MB\")\n+        if max_file_size is not None and max_file_size <= 0:\n+            raise click.BadParameter(\"max-file-size must be greater than 0\")\n+\n+        ProjectCommands._index_project(project, log_level, max_memory, max_file_size)\n \n     @staticmethod\n-    def _index_project(project: str, log_level: str) -> None:\n+    def _index_project(project: str, log_level: str, max_memory: int | None = None, max_file_size: int | None = None) -> None:\n         lvl = logging.getLevelNamesMapping()[log_level.upper()]\n         proj = Project.load(os.path.abspath(project))\n         print(f\"Indexing symbols in project {project}\u2026\")\n-        ls = proj.create_language_server(log_level=lvl)\n+\n+        # Prepare Intelephense options if provided\n+        intelephense_options = {}\n+        if max_memory is not None:\n+            intelephense_options[\"maxMemory\"] = max_memory",
        "comment_created_at": "2025-07-24T16:13:53+00:00",
        "comment_author": "MischaPanch",
        "comment_body": "same as above, it has to be language agnostic. It is fine to introduce an interface for max memory and max file size and for now ignore it in other language servers",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2228970939",
    "pr_number": 346,
    "pr_file": "src/solidlsp/language_servers/intelephense.py",
    "created_at": "2025-07-24T16:17:13+00:00",
    "commented_code": "return f\"{intelephense_executable_path} --stdio\"\n \n-    def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str):\n+    def __init__(\n+        self,\n+        config: LanguageServerConfig,\n+        logger: LanguageServerLogger,\n+        repository_root_path: str,\n+        intelephense_options: dict[str, int] | None = None,",
    "repo_full_name": "oraios/serena",
    "discussion_comments": [
      {
        "comment_id": "2228970939",
        "repo_full_name": "oraios/serena",
        "pr_number": 346,
        "pr_file": "src/solidlsp/language_servers/intelephense.py",
        "discussion_id": "2228970939",
        "commented_code": "@@ -79,17 +79,23 @@ def _setup_runtime_dependencies(cls, logger: LanguageServerLogger, config: Langu\n \n         return f\"{intelephense_executable_path} --stdio\"\n \n-    def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str):\n+    def __init__(\n+        self,\n+        config: LanguageServerConfig,\n+        logger: LanguageServerLogger,\n+        repository_root_path: str,\n+        intelephense_options: dict[str, int] | None = None,",
        "comment_created_at": "2025-07-24T16:17:13+00:00",
        "comment_author": "MischaPanch",
        "comment_body": "see above. We already have LanguageServerConfig - this is where such parameters should be naturally set, I think.\n\nLanguage servers that don't support max memory and max file should log a warning that this option is ignored\n\n @opcode81 wdyt?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2031569865",
    "pr_number": 35,
    "pr_file": "src/serena/agent.py",
    "created_at": "2025-04-07T16:05:53+00:00",
    "commented_code": "if project_root is None:\n             project_root = Path(config_dict[\"project_root\"])\n         self.project_root: str = str(project_root.resolve())\n-        self.ignored_dirs: list[str] = config_dict.get(\"ignored_dirs\", [])\n+        self.ignored_paths: list[str] = config_dict.get(\"ignored_paths\", [])",
    "repo_full_name": "oraios/serena",
    "discussion_comments": [
      {
        "comment_id": "2031569865",
        "repo_full_name": "oraios/serena",
        "pr_number": 35,
        "pr_file": "src/serena/agent.py",
        "discussion_id": "2031569865",
        "commented_code": "@@ -47,8 +47,12 @@ def __init__(self, config_dict: dict[str, Any], project_name: str, project_root:\n         if project_root is None:\n             project_root = Path(config_dict[\"project_root\"])\n         self.project_root: str = str(project_root.resolve())\n-        self.ignored_dirs: list[str] = config_dict.get(\"ignored_dirs\", [])\n+        self.ignored_paths: list[str] = config_dict.get(\"ignored_paths\", [])",
        "comment_created_at": "2025-04-07T16:05:53+00:00",
        "comment_author": "opcode81",
        "comment_body": "This is problematic. Users who don't update their configs (still have `ignored_dirs`) will have this fail silently, so we need an exception if it's not there.",
        "pr_file_module": null
      },
      {
        "comment_id": "2031573443",
        "repo_full_name": "oraios/serena",
        "pr_number": 35,
        "pr_file": "src/serena/agent.py",
        "discussion_id": "2031569865",
        "commented_code": "@@ -47,8 +47,12 @@ def __init__(self, config_dict: dict[str, Any], project_name: str, project_root:\n         if project_root is None:\n             project_root = Path(config_dict[\"project_root\"])\n         self.project_root: str = str(project_root.resolve())\n-        self.ignored_dirs: list[str] = config_dict.get(\"ignored_dirs\", [])\n+        self.ignored_paths: list[str] = config_dict.get(\"ignored_paths\", [])",
        "comment_created_at": "2025-04-07T16:08:16+00:00",
        "comment_author": "opcode81",
        "comment_body": "I see that you (perhaps unexpectedly) handled backward compatbility below.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2031571077",
    "pr_number": 35,
    "pr_file": "src/serena/agent.py",
    "created_at": "2025-04-07T16:06:41+00:00",
    "commented_code": "if project_root is None:\n             project_root = Path(config_dict[\"project_root\"])\n         self.project_root: str = str(project_root.resolve())\n-        self.ignored_dirs: list[str] = config_dict.get(\"ignored_dirs\", [])\n+        self.ignored_paths: list[str] = config_dict.get(\"ignored_paths\", [])\n         self.excluded_tools: set[str] = set(config_dict.get(\"excluded_tools\", []))\n+        self.ignore_all_files_in_gitignore = config_dict.get(\"ignore_all_files_in_gitignore\", True)",
    "repo_full_name": "oraios/serena",
    "discussion_comments": [
      {
        "comment_id": "2031571077",
        "repo_full_name": "oraios/serena",
        "pr_number": 35,
        "pr_file": "src/serena/agent.py",
        "discussion_id": "2031571077",
        "commented_code": "@@ -47,8 +47,12 @@ def __init__(self, config_dict: dict[str, Any], project_name: str, project_root:\n         if project_root is None:\n             project_root = Path(config_dict[\"project_root\"])\n         self.project_root: str = str(project_root.resolve())\n-        self.ignored_dirs: list[str] = config_dict.get(\"ignored_dirs\", [])\n+        self.ignored_paths: list[str] = config_dict.get(\"ignored_paths\", [])\n         self.excluded_tools: set[str] = set(config_dict.get(\"excluded_tools\", []))\n+        self.ignore_all_files_in_gitignore = config_dict.get(\"ignore_all_files_in_gitignore\", True)",
        "comment_created_at": "2025-04-07T16:06:41+00:00",
        "comment_author": "opcode81",
        "comment_body": "Same here. We should not assume that a default is OK.",
        "pr_file_module": null
      },
      {
        "comment_id": "2031574830",
        "repo_full_name": "oraios/serena",
        "pr_number": 35,
        "pr_file": "src/serena/agent.py",
        "discussion_id": "2031571077",
        "commented_code": "@@ -47,8 +47,12 @@ def __init__(self, config_dict: dict[str, Any], project_name: str, project_root:\n         if project_root is None:\n             project_root = Path(config_dict[\"project_root\"])\n         self.project_root: str = str(project_root.resolve())\n-        self.ignored_dirs: list[str] = config_dict.get(\"ignored_dirs\", [])\n+        self.ignored_paths: list[str] = config_dict.get(\"ignored_paths\", [])\n         self.excluded_tools: set[str] = set(config_dict.get(\"excluded_tools\", []))\n+        self.ignore_all_files_in_gitignore = config_dict.get(\"ignore_all_files_in_gitignore\", True)",
        "comment_created_at": "2025-04-07T16:08:57+00:00",
        "comment_author": "opcode81",
        "comment_body": "If a default is OK, it is False instead of True, because that's what users had previously.",
        "pr_file_module": null
      },
      {
        "comment_id": "2031604382",
        "repo_full_name": "oraios/serena",
        "pr_number": 35,
        "pr_file": "src/serena/agent.py",
        "discussion_id": "2031571077",
        "commented_code": "@@ -47,8 +47,12 @@ def __init__(self, config_dict: dict[str, Any], project_name: str, project_root:\n         if project_root is None:\n             project_root = Path(config_dict[\"project_root\"])\n         self.project_root: str = str(project_root.resolve())\n-        self.ignored_dirs: list[str] = config_dict.get(\"ignored_dirs\", [])\n+        self.ignored_paths: list[str] = config_dict.get(\"ignored_paths\", [])\n         self.excluded_tools: set[str] = set(config_dict.get(\"excluded_tools\", []))\n+        self.ignore_all_files_in_gitignore = config_dict.get(\"ignore_all_files_in_gitignore\", True)",
        "comment_created_at": "2025-04-07T16:27:28+00:00",
        "comment_author": "MischaPanch",
        "comment_body": "I would rather roll it out automatically to those who already setup their configs. It's not like they consciously chose to not include gitignore, and I suspect it's a behavior that most if not all users would want",
        "pr_file_module": null
      },
      {
        "comment_id": "2031615769",
        "repo_full_name": "oraios/serena",
        "pr_number": 35,
        "pr_file": "src/serena/agent.py",
        "discussion_id": "2031571077",
        "commented_code": "@@ -47,8 +47,12 @@ def __init__(self, config_dict: dict[str, Any], project_name: str, project_root:\n         if project_root is None:\n             project_root = Path(config_dict[\"project_root\"])\n         self.project_root: str = str(project_root.resolve())\n-        self.ignored_dirs: list[str] = config_dict.get(\"ignored_dirs\", [])\n+        self.ignored_paths: list[str] = config_dict.get(\"ignored_paths\", [])\n         self.excluded_tools: set[str] = set(config_dict.get(\"excluded_tools\", []))\n+        self.ignore_all_files_in_gitignore = config_dict.get(\"ignore_all_files_in_gitignore\", True)",
        "comment_created_at": "2025-04-07T16:35:00+00:00",
        "comment_author": "opcode81",
        "comment_body": "The option you chose can cause unexpected behaviour.\r\nThe two valid options are:\r\n* False as a default (unchanged behaviour)\r\n* forcing a decision via an exception\r\n\r\nI don't truly care, but it's usually the best approach to never make _any_ assumptions about what the user really wants.",
        "pr_file_module": null
      },
      {
        "comment_id": "2031646014",
        "repo_full_name": "oraios/serena",
        "pr_number": 35,
        "pr_file": "src/serena/agent.py",
        "discussion_id": "2031571077",
        "commented_code": "@@ -47,8 +47,12 @@ def __init__(self, config_dict: dict[str, Any], project_name: str, project_root:\n         if project_root is None:\n             project_root = Path(config_dict[\"project_root\"])\n         self.project_root: str = str(project_root.resolve())\n-        self.ignored_dirs: list[str] = config_dict.get(\"ignored_dirs\", [])\n+        self.ignored_paths: list[str] = config_dict.get(\"ignored_paths\", [])\n         self.excluded_tools: set[str] = set(config_dict.get(\"excluded_tools\", []))\n+        self.ignore_all_files_in_gitignore = config_dict.get(\"ignore_all_files_in_gitignore\", True)",
        "comment_created_at": "2025-04-07T16:55:38+00:00",
        "comment_author": "opcode81",
        "comment_body": "There are advantages to forcing a decision, as it also creates awareness of the new feature.\r\nIf we never force users to make decisions on new settings, some of them will likely continue with the original set of settings forever (and even copy their configs instead of the template).",
        "pr_file_module": null
      },
      {
        "comment_id": "2031869029",
        "repo_full_name": "oraios/serena",
        "pr_number": 35,
        "pr_file": "src/serena/agent.py",
        "discussion_id": "2031571077",
        "commented_code": "@@ -47,8 +47,12 @@ def __init__(self, config_dict: dict[str, Any], project_name: str, project_root:\n         if project_root is None:\n             project_root = Path(config_dict[\"project_root\"])\n         self.project_root: str = str(project_root.resolve())\n-        self.ignored_dirs: list[str] = config_dict.get(\"ignored_dirs\", [])\n+        self.ignored_paths: list[str] = config_dict.get(\"ignored_paths\", [])\n         self.excluded_tools: set[str] = set(config_dict.get(\"excluded_tools\", []))\n+        self.ignore_all_files_in_gitignore = config_dict.get(\"ignore_all_files_in_gitignore\", True)",
        "comment_created_at": "2025-04-07T19:18:33+00:00",
        "comment_author": "MischaPanch",
        "comment_body": "I agree, let's force. I added a callout section to the readme warning about this, and to the changelog about the breaking changes in the config",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2031579255",
    "pr_number": 35,
    "pr_file": "src/serena/agent.py",
    "created_at": "2025-04-07T16:11:33+00:00",
    "commented_code": "if not os.path.exists(config_file):\n             raise FileNotFoundError(f\"Serena configuration file not found: {config_file}\")\n         with open(config_file, encoding=\"utf-8\") as f:\n-            config_yaml = yaml.safe_load(f)\n+            try:\n+                log.info(f\"Loading Serena configuration from {config_file}\")\n+                config_yaml = yaml.safe_load(f)\n+            except Exception as e:\n+                raise ValueError(f\"Error loading Serena configuration from {config_file}: {e}\") from e\n \n         # read projects\n         self.projects: dict[str, ProjectConfig] = {}\n-        for project_config_path in config_yaml[\"projects\"]:\n+        for project_config_path in config_yaml.get(\"projects\", []):",
    "repo_full_name": "oraios/serena",
    "discussion_comments": [
      {
        "comment_id": "2031579255",
        "repo_full_name": "oraios/serena",
        "pr_number": 35,
        "pr_file": "src/serena/agent.py",
        "discussion_id": "2031579255",
        "commented_code": "@@ -79,23 +83,31 @@ def __init__(self) -> None:\n         if not os.path.exists(config_file):\n             raise FileNotFoundError(f\"Serena configuration file not found: {config_file}\")\n         with open(config_file, encoding=\"utf-8\") as f:\n-            config_yaml = yaml.safe_load(f)\n+            try:\n+                log.info(f\"Loading Serena configuration from {config_file}\")\n+                config_yaml = yaml.safe_load(f)\n+            except Exception as e:\n+                raise ValueError(f\"Error loading Serena configuration from {config_file}: {e}\") from e\n \n         # read projects\n         self.projects: dict[str, ProjectConfig] = {}\n-        for project_config_path in config_yaml[\"projects\"]:\n+        for project_config_path in config_yaml.get(\"projects\", []):",
        "comment_created_at": "2025-04-07T16:11:33+00:00",
        "comment_author": "opcode81",
        "comment_body": "Why?",
        "pr_file_module": null
      },
      {
        "comment_id": "2031601470",
        "repo_full_name": "oraios/serena",
        "pr_number": 35,
        "pr_file": "src/serena/agent.py",
        "discussion_id": "2031579255",
        "commented_code": "@@ -79,23 +83,31 @@ def __init__(self) -> None:\n         if not os.path.exists(config_file):\n             raise FileNotFoundError(f\"Serena configuration file not found: {config_file}\")\n         with open(config_file, encoding=\"utf-8\") as f:\n-            config_yaml = yaml.safe_load(f)\n+            try:\n+                log.info(f\"Loading Serena configuration from {config_file}\")\n+                config_yaml = yaml.safe_load(f)\n+            except Exception as e:\n+                raise ValueError(f\"Error loading Serena configuration from {config_file}: {e}\") from e\n \n         # read projects\n         self.projects: dict[str, ProjectConfig] = {}\n-        for project_config_path in config_yaml[\"projects\"]:\n+        for project_config_path in config_yaml.get(\"projects\", []):",
        "comment_created_at": "2025-04-07T16:25:31+00:00",
        "comment_author": "MischaPanch",
        "comment_body": "It's fine to have an empty list of projects, right? I find crashes with key errors to be rather bad, so if the key is missing, I'd rather raise a proper error (if empty list is not allowed)",
        "pr_file_module": null
      },
      {
        "comment_id": "2031620223",
        "repo_full_name": "oraios/serena",
        "pr_number": 35,
        "pr_file": "src/serena/agent.py",
        "discussion_id": "2031579255",
        "commented_code": "@@ -79,23 +83,31 @@ def __init__(self) -> None:\n         if not os.path.exists(config_file):\n             raise FileNotFoundError(f\"Serena configuration file not found: {config_file}\")\n         with open(config_file, encoding=\"utf-8\") as f:\n-            config_yaml = yaml.safe_load(f)\n+            try:\n+                log.info(f\"Loading Serena configuration from {config_file}\")\n+                config_yaml = yaml.safe_load(f)\n+            except Exception as e:\n+                raise ValueError(f\"Error loading Serena configuration from {config_file}: {e}\") from e\n \n         # read projects\n         self.projects: dict[str, ProjectConfig] = {}\n-        for project_config_path in config_yaml[\"projects\"]:\n+        for project_config_path in config_yaml.get(\"projects\", []):",
        "comment_created_at": "2025-04-07T16:38:08+00:00",
        "comment_author": "opcode81",
        "comment_body": "It can be empty if the user specifies a project at startup. The correct handling is ensured by the SerenaAgent constructor.\r\n\r\nBut if it is empty, it should be empty explicitly, i.e. the value should always be there. It not being there is an indication of an error, which should be raised.",
        "pr_file_module": null
      },
      {
        "comment_id": "2031865353",
        "repo_full_name": "oraios/serena",
        "pr_number": 35,
        "pr_file": "src/serena/agent.py",
        "discussion_id": "2031579255",
        "commented_code": "@@ -79,23 +83,31 @@ def __init__(self) -> None:\n         if not os.path.exists(config_file):\n             raise FileNotFoundError(f\"Serena configuration file not found: {config_file}\")\n         with open(config_file, encoding=\"utf-8\") as f:\n-            config_yaml = yaml.safe_load(f)\n+            try:\n+                log.info(f\"Loading Serena configuration from {config_file}\")\n+                config_yaml = yaml.safe_load(f)\n+            except Exception as e:\n+                raise ValueError(f\"Error loading Serena configuration from {config_file}: {e}\") from e\n \n         # read projects\n         self.projects: dict[str, ProjectConfig] = {}\n-        for project_config_path in config_yaml[\"projects\"]:\n+        for project_config_path in config_yaml.get(\"projects\", []):",
        "comment_created_at": "2025-04-07T19:16:59+00:00",
        "comment_author": "MischaPanch",
        "comment_body": "Raising dedicated exception now",
        "pr_file_module": null
      }
    ]
  }
]