[
  {
    "discussion_id": "478954477",
    "pr_number": 8143,
    "pr_file": "lib/plugins/aws/package/compile/events/schedule/index.js",
    "created_at": "2020-08-28T08:43:49+00:00",
    "commented_code": "const _ = require('lodash');\n \n-const rateSyntaxPattern = /^rate\\((?:1 (?:minute|hour|day)|(?:1\\d+|[2-9]\\d*) (?:minute|hour|day)s)\\)$/;\n-const cronSyntaxPattern = /^cron\\(\\S+ \\S+ \\S+ \\S+ \\S+ \\S+\\)$/;\n+const rateSyntax = '^rate\\\\((?:1 (?:minute|hour|day)|(?:1\\\\d+|[2-9]\\\\d*) (?:minute|hour|day)s)\\\\)$';\n+const cronSyntax = '^cron\\\\(\\\\S+ \\\\S+ \\\\S+ \\\\S+ \\\\S+ \\\\S+\\\\)$';\n+const scheduleSyntax = `${rateSyntax}|${cronSyntax}`;\n+\n+const jsonPattern = '^\\\\{.*\\\\}$';",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "478954477",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8143,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule/index.js",
        "discussion_id": "478954477",
        "commented_code": "@@ -2,8 +2,11 @@\n \n const _ = require('lodash');\n \n-const rateSyntaxPattern = /^rate\\((?:1 (?:minute|hour|day)|(?:1\\d+|[2-9]\\d*) (?:minute|hour|day)s)\\)$/;\n-const cronSyntaxPattern = /^cron\\(\\S+ \\S+ \\S+ \\S+ \\S+ \\S+\\)$/;\n+const rateSyntax = '^rate\\\\((?:1 (?:minute|hour|day)|(?:1\\\\d+|[2-9]\\\\d*) (?:minute|hour|day)s)\\\\)$';\n+const cronSyntax = '^cron\\\\(\\\\S+ \\\\S+ \\\\S+ \\\\S+ \\\\S+ \\\\S+\\\\)$';\n+const scheduleSyntax = `${rateSyntax}|${cronSyntax}`;\n+\n+const jsonPattern = '^\\\\{.*\\\\}$';",
        "comment_created_at": "2020-08-28T08:43:49+00:00",
        "comment_author": "medikoo",
        "comment_body": "This pattern allows only _object_, while JSON can represent many other types (_array_, _string_ etc.)\r\n\r\nIs it  only _object_ representation that  is supported by AWS?",
        "pr_file_module": null
      },
      {
        "comment_id": "479634316",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8143,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule/index.js",
        "discussion_id": "478954477",
        "commented_code": "@@ -2,8 +2,11 @@\n \n const _ = require('lodash');\n \n-const rateSyntaxPattern = /^rate\\((?:1 (?:minute|hour|day)|(?:1\\d+|[2-9]\\d*) (?:minute|hour|day)s)\\)$/;\n-const cronSyntaxPattern = /^cron\\(\\S+ \\S+ \\S+ \\S+ \\S+ \\S+\\)$/;\n+const rateSyntax = '^rate\\\\((?:1 (?:minute|hour|day)|(?:1\\\\d+|[2-9]\\\\d*) (?:minute|hour|day)s)\\\\)$';\n+const cronSyntax = '^cron\\\\(\\\\S+ \\\\S+ \\\\S+ \\\\S+ \\\\S+ \\\\S+\\\\)$';\n+const scheduleSyntax = `${rateSyntax}|${cronSyntax}`;\n+\n+const jsonPattern = '^\\\\{.*\\\\}$';",
        "comment_created_at": "2020-08-29T10:15:50+00:00",
        "comment_author": "andyjduncan",
        "comment_body": "It just says JSON string.  IIRC it turns in into an input object but it's a while since I've used this.  This should probably be either stricter or looser, but see the discussion for the mutually exclusive properties below.",
        "pr_file_module": null
      },
      {
        "comment_id": "480026179",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8143,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule/index.js",
        "discussion_id": "478954477",
        "commented_code": "@@ -2,8 +2,11 @@\n \n const _ = require('lodash');\n \n-const rateSyntaxPattern = /^rate\\((?:1 (?:minute|hour|day)|(?:1\\d+|[2-9]\\d*) (?:minute|hour|day)s)\\)$/;\n-const cronSyntaxPattern = /^cron\\(\\S+ \\S+ \\S+ \\S+ \\S+ \\S+\\)$/;\n+const rateSyntax = '^rate\\\\((?:1 (?:minute|hour|day)|(?:1\\\\d+|[2-9]\\\\d*) (?:minute|hour|day)s)\\\\)$';\n+const cronSyntax = '^cron\\\\(\\\\S+ \\\\S+ \\\\S+ \\\\S+ \\\\S+ \\\\S+\\\\)$';\n+const scheduleSyntax = `${rateSyntax}|${cronSyntax}`;\n+\n+const jsonPattern = '^\\\\{.*\\\\}$';",
        "comment_created_at": "2020-08-31T10:06:53+00:00",
        "comment_author": "medikoo",
        "comment_body": "If you're sure that AWS will crash on non object JSON input (e.g. array, or string), then I think it's fine to keep it. Otherwise I would validate JSON string simply as _string_ without constraints.",
        "pr_file_module": null
      },
      {
        "comment_id": "480244620",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8143,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule/index.js",
        "discussion_id": "478954477",
        "commented_code": "@@ -2,8 +2,11 @@\n \n const _ = require('lodash');\n \n-const rateSyntaxPattern = /^rate\\((?:1 (?:minute|hour|day)|(?:1\\d+|[2-9]\\d*) (?:minute|hour|day)s)\\)$/;\n-const cronSyntaxPattern = /^cron\\(\\S+ \\S+ \\S+ \\S+ \\S+ \\S+\\)$/;\n+const rateSyntax = '^rate\\\\((?:1 (?:minute|hour|day)|(?:1\\\\d+|[2-9]\\\\d*) (?:minute|hour|day)s)\\\\)$';\n+const cronSyntax = '^cron\\\\(\\\\S+ \\\\S+ \\\\S+ \\\\S+ \\\\S+ \\\\S+\\\\)$';\n+const scheduleSyntax = `${rateSyntax}|${cronSyntax}`;\n+\n+const jsonPattern = '^\\\\{.*\\\\}$';",
        "comment_created_at": "2020-08-31T16:27:48+00:00",
        "comment_author": "andyjduncan",
        "comment_body": "I'm not sure enough.  I think replacing it with simple type and length validation and letting AWS validate the content is probably safest.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "478956661",
    "pr_number": 8143,
    "pr_file": "lib/plugins/aws/package/compile/events/schedule/index.js",
    "created_at": "2020-08-28T08:46:02+00:00",
    "commented_code": "'package:compileEvents': this.compileScheduledEvents.bind(this),\n     };\n \n-    // TODO: Complete schema, see https://github.com/serverless/serverless/issues/8032\n     this.serverless.configSchemaHandler.defineFunctionEvent('aws', 'schedule', {\n-      anyOf: [{ type: 'string' }, { type: 'object' }],\n+      oneOf: [\n+        { type: 'string', pattern: scheduleSyntax },\n+        {\n+          type: 'object',\n+          properties: {\n+            rate: { type: 'string', pattern: scheduleSyntax },\n+            enabled: { type: 'boolean' },\n+            name: { type: 'string', minLength: 1, maxLength: 64, pattern: '[\\\\.\\\\-_A-Za-z0-9]+' },\n+            description: { type: 'string', maxLength: 512 },\n+            input: {\n+              oneOf: [\n+                { type: 'string', maxLength: 8192, pattern: jsonPattern },\n+                {\n+                  type: 'object',\n+                  properties: {\n+                    body: { type: 'string', pattern: jsonPattern },\n+                  },\n+                },",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "478956661",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8143,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule/index.js",
        "discussion_id": "478956661",
        "commented_code": "@@ -14,22 +17,67 @@ class AwsCompileScheduledEvents {\n       'package:compileEvents': this.compileScheduledEvents.bind(this),\n     };\n \n-    // TODO: Complete schema, see https://github.com/serverless/serverless/issues/8032\n     this.serverless.configSchemaHandler.defineFunctionEvent('aws', 'schedule', {\n-      anyOf: [{ type: 'string' }, { type: 'object' }],\n+      oneOf: [\n+        { type: 'string', pattern: scheduleSyntax },\n+        {\n+          type: 'object',\n+          properties: {\n+            rate: { type: 'string', pattern: scheduleSyntax },\n+            enabled: { type: 'boolean' },\n+            name: { type: 'string', minLength: 1, maxLength: 64, pattern: '[\\\\.\\\\-_A-Za-z0-9]+' },\n+            description: { type: 'string', maxLength: 512 },\n+            input: {\n+              oneOf: [\n+                { type: 'string', maxLength: 8192, pattern: jsonPattern },\n+                {\n+                  type: 'object',\n+                  properties: {\n+                    body: { type: 'string', pattern: jsonPattern },\n+                  },\n+                },",
        "comment_created_at": "2020-08-28T08:46:02+00:00",
        "comment_author": "medikoo",
        "comment_body": "Is this correct to support those two formats? AWS docs (https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-events-rule-target.html#cfn-events-rule-target-input) seem to outline only _Valid JSON text passed_ as supported format",
        "pr_file_module": null
      },
      {
        "comment_id": "479634322",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8143,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule/index.js",
        "discussion_id": "478956661",
        "commented_code": "@@ -14,22 +17,67 @@ class AwsCompileScheduledEvents {\n       'package:compileEvents': this.compileScheduledEvents.bind(this),\n     };\n \n-    // TODO: Complete schema, see https://github.com/serverless/serverless/issues/8032\n     this.serverless.configSchemaHandler.defineFunctionEvent('aws', 'schedule', {\n-      anyOf: [{ type: 'string' }, { type: 'object' }],\n+      oneOf: [\n+        { type: 'string', pattern: scheduleSyntax },\n+        {\n+          type: 'object',\n+          properties: {\n+            rate: { type: 'string', pattern: scheduleSyntax },\n+            enabled: { type: 'boolean' },\n+            name: { type: 'string', minLength: 1, maxLength: 64, pattern: '[\\\\.\\\\-_A-Za-z0-9]+' },\n+            description: { type: 'string', maxLength: 512 },\n+            input: {\n+              oneOf: [\n+                { type: 'string', maxLength: 8192, pattern: jsonPattern },\n+                {\n+                  type: 'object',\n+                  properties: {\n+                    body: { type: 'string', pattern: jsonPattern },\n+                  },\n+                },",
        "comment_created_at": "2020-08-29T10:15:54+00:00",
        "comment_author": "andyjduncan",
        "comment_body": "If I'm reading [lines 76-95](https://github.com/serverless/serverless/pull/8143/files#diff-7efc760eaebd10dfdc553d056336cf08L76-L95) correctly there are three ways the input property can be used: as a string that is passed to the function, as an object that is stringified, or as an object with a key `body` with a string value that is parsed, set to the body property, and then stringified (and presumably those last two could be mixed).  The first and second don't seem unreasonable, but I have to say, I can't see the use of the third form.",
        "pr_file_module": null
      },
      {
        "comment_id": "480023936",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8143,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule/index.js",
        "discussion_id": "478956661",
        "commented_code": "@@ -14,22 +17,67 @@ class AwsCompileScheduledEvents {\n       'package:compileEvents': this.compileScheduledEvents.bind(this),\n     };\n \n-    // TODO: Complete schema, see https://github.com/serverless/serverless/issues/8032\n     this.serverless.configSchemaHandler.defineFunctionEvent('aws', 'schedule', {\n-      anyOf: [{ type: 'string' }, { type: 'object' }],\n+      oneOf: [\n+        { type: 'string', pattern: scheduleSyntax },\n+        {\n+          type: 'object',\n+          properties: {\n+            rate: { type: 'string', pattern: scheduleSyntax },\n+            enabled: { type: 'boolean' },\n+            name: { type: 'string', minLength: 1, maxLength: 64, pattern: '[\\\\.\\\\-_A-Za-z0-9]+' },\n+            description: { type: 'string', maxLength: 512 },\n+            input: {\n+              oneOf: [\n+                { type: 'string', maxLength: 8192, pattern: jsonPattern },\n+                {\n+                  type: 'object',\n+                  properties: {\n+                    body: { type: 'string', pattern: jsonPattern },\n+                  },\n+                },",
        "comment_created_at": "2020-08-31T10:01:55+00:00",
        "comment_author": "medikoo",
        "comment_body": "Indeed @andyjduncan I missed that it's on our side where we support those three notations.\r\n\r\nEven if it's not clear why we support some of them, to not be breaking I believe we should maintain support for these.\r\n\r\nI think we could improve a bit definition by adding `additionalProperties: false` to `Input.body` case, and add third option for object with whatever properties (then I believe we also need to switch from `oneOf` to `anyOf`, as afaik `oneOf` will fail if more than one option matches)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "480244667",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8143,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule/index.js",
        "discussion_id": "478956661",
        "commented_code": "@@ -14,22 +17,67 @@ class AwsCompileScheduledEvents {\n       'package:compileEvents': this.compileScheduledEvents.bind(this),\n     };\n \n-    // TODO: Complete schema, see https://github.com/serverless/serverless/issues/8032\n     this.serverless.configSchemaHandler.defineFunctionEvent('aws', 'schedule', {\n-      anyOf: [{ type: 'string' }, { type: 'object' }],\n+      oneOf: [\n+        { type: 'string', pattern: scheduleSyntax },\n+        {\n+          type: 'object',\n+          properties: {\n+            rate: { type: 'string', pattern: scheduleSyntax },\n+            enabled: { type: 'boolean' },\n+            name: { type: 'string', minLength: 1, maxLength: 64, pattern: '[\\\\.\\\\-_A-Za-z0-9]+' },\n+            description: { type: 'string', maxLength: 512 },\n+            input: {\n+              oneOf: [\n+                { type: 'string', maxLength: 8192, pattern: jsonPattern },\n+                {\n+                  type: 'object',\n+                  properties: {\n+                    body: { type: 'string', pattern: jsonPattern },\n+                  },\n+                },",
        "comment_created_at": "2020-08-31T16:27:53+00:00",
        "comment_author": "andyjduncan",
        "comment_body": "I've done some experimentation, and adding `additionalProperties: false` and an additional clause for the free object doesn't work due to the string version.  However, I think this gives the expected behaviour:\r\n\r\n```\r\n            input: {\r\n              oneOf: [\r\n                {type: 'string', maxLength: 8192},\r\n                {\r\n                  type: 'object',\r\n                  oneOf: [\r\n                    {\r\n                      properties: {\r\n                        body: {type: 'string', maxLength: 8192},\r\n                      },\r\n                      required: ['body'],\r\n                      additionalProperties: false\r\n                    },\r\n                    {\r\n                      not: {\r\n                        required: ['body']\r\n                      },\r\n                      additionalProperties: true\r\n                    }\r\n                  ]\r\n                },\r\n              ],\r\n            },\r\n```\r\n\r\nIf that looks good, I'll push an update with this validation and remove the JSON and mutual exclusion validation.",
        "pr_file_module": null
      },
      {
        "comment_id": "480967375",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8143,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule/index.js",
        "discussion_id": "478956661",
        "commented_code": "@@ -14,22 +17,67 @@ class AwsCompileScheduledEvents {\n       'package:compileEvents': this.compileScheduledEvents.bind(this),\n     };\n \n-    // TODO: Complete schema, see https://github.com/serverless/serverless/issues/8032\n     this.serverless.configSchemaHandler.defineFunctionEvent('aws', 'schedule', {\n-      anyOf: [{ type: 'string' }, { type: 'object' }],\n+      oneOf: [\n+        { type: 'string', pattern: scheduleSyntax },\n+        {\n+          type: 'object',\n+          properties: {\n+            rate: { type: 'string', pattern: scheduleSyntax },\n+            enabled: { type: 'boolean' },\n+            name: { type: 'string', minLength: 1, maxLength: 64, pattern: '[\\\\.\\\\-_A-Za-z0-9]+' },\n+            description: { type: 'string', maxLength: 512 },\n+            input: {\n+              oneOf: [\n+                { type: 'string', maxLength: 8192, pattern: jsonPattern },\n+                {\n+                  type: 'object',\n+                  properties: {\n+                    body: { type: 'string', pattern: jsonPattern },\n+                  },\n+                },",
        "comment_created_at": "2020-09-01T08:34:10+00:00",
        "comment_author": "medikoo",
        "comment_body": "@andyjduncan I think that looks good. On our side error will resolve to _unsupported configuration format_, which will not be detailed, but that's probably better than being silent on such structure.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "490242639",
    "pr_number": 8250,
    "pr_file": "lib/plugins/aws/package/compile/events/cloudFront/index.js",
    "created_at": "2020-09-17T13:25:58+00:00",
    "commented_code": "'before:remove:remove': this.logRemoveReminder.bind(this),\n     };\n \n-    // TODO: Complete schema, see https://github.com/serverless/serverless/issues/8025\n+    const originObjectSchema = {\n+      type: 'object',\n+      properties: {\n+        ConnectionAttempts: { type: 'integer', miminum: 1, maximum: 3 },\n+        ConnectionTimeout: { type: 'integer', miminum: 1, maximum: 10 },\n+        CustomOriginConfig: {\n+          type: 'object',\n+          properties: {\n+            HTTPPort: { type: 'integer' },\n+            HTTPSPort: { type: 'integer' },\n+            OriginKeepaliveTimeout: { type: 'integer', miminum: 1, maximum: 60 },\n+            OriginProtocolPolicy: {\n+              type: 'string',\n+              enum: ['http-only', 'match-viewer', 'https-only'],\n+            },\n+            OriginReadTimeout: { type: 'integer', miminum: 1, maximum: 60 },\n+            OriginSSLProtocols: {\n+              type: 'array',\n+              items: { type: 'string', enum: ['SSLv3', 'TLSv1', 'TLSv1.1', 'TLSv1.2'] },\n+            },\n+          },\n+          additionalProperties: false,\n+          required: ['OriginProtocolPolicy'],\n+        },\n+        DomainName: { type: 'string' },\n+        Id: { type: 'string' },\n+        OriginCustomHeaders: {\n+          type: 'array',\n+          items: {\n+            type: 'object',\n+            properties: {\n+              HeaderName: { type: 'string' },\n+              HeaderValue: { type: 'string' },\n+            },\n+            additionalProperties: false,\n+            required: ['HeaderName', 'HeaderValue'],\n+          },\n+        },\n+        OriginPath: { type: 'string' },\n+        S3OriginConfig: {\n+          type: 'object',\n+          properties: {\n+            OriginAccessIdentity: {\n+              type: 'string',\n+              pattern: '^origin-access-identity/cloudfront/.+',\n+            },\n+          },\n+          additionalProperties: false,\n+        },\n+      },\n+      additionalProperties: false,\n+      required: ['DomainName', 'Id'],\n+      oneOf: [{ required: ['CustomOriginConfig'] }, { required: ['S3OriginConfig'] }],\n+    };\n+\n+    const behaviorObjectSchema = {\n+      type: 'object',\n+      properties: {\n+        AllowedMethods: {\n+          oneOf: [\n+            { type: 'array', items: [{ const: 'GET' }, { const: 'HEAD' }] },\n+            { type: 'array', items: [{ const: 'GET' }, { const: 'HEAD' }, { const: 'OPTIONS' }] },\n+            {\n+              type: 'array',\n+              items: [\n+                { const: 'GET' },\n+                { const: 'HEAD' },\n+                { const: 'OPTIONS' },\n+                { const: 'PUT' },\n+                { const: 'PATCH' },\n+                { const: 'POST' },\n+                { const: 'DELETE' },\n+              ],\n+            },",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "490242639",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8250,
        "pr_file": "lib/plugins/aws/package/compile/events/cloudFront/index.js",
        "discussion_id": "490242639",
        "commented_code": "@@ -27,9 +27,118 @@ class AwsCompileCloudFrontEvents {\n       'before:remove:remove': this.logRemoveReminder.bind(this),\n     };\n \n-    // TODO: Complete schema, see https://github.com/serverless/serverless/issues/8025\n+    const originObjectSchema = {\n+      type: 'object',\n+      properties: {\n+        ConnectionAttempts: { type: 'integer', miminum: 1, maximum: 3 },\n+        ConnectionTimeout: { type: 'integer', miminum: 1, maximum: 10 },\n+        CustomOriginConfig: {\n+          type: 'object',\n+          properties: {\n+            HTTPPort: { type: 'integer' },\n+            HTTPSPort: { type: 'integer' },\n+            OriginKeepaliveTimeout: { type: 'integer', miminum: 1, maximum: 60 },\n+            OriginProtocolPolicy: {\n+              type: 'string',\n+              enum: ['http-only', 'match-viewer', 'https-only'],\n+            },\n+            OriginReadTimeout: { type: 'integer', miminum: 1, maximum: 60 },\n+            OriginSSLProtocols: {\n+              type: 'array',\n+              items: { type: 'string', enum: ['SSLv3', 'TLSv1', 'TLSv1.1', 'TLSv1.2'] },\n+            },\n+          },\n+          additionalProperties: false,\n+          required: ['OriginProtocolPolicy'],\n+        },\n+        DomainName: { type: 'string' },\n+        Id: { type: 'string' },\n+        OriginCustomHeaders: {\n+          type: 'array',\n+          items: {\n+            type: 'object',\n+            properties: {\n+              HeaderName: { type: 'string' },\n+              HeaderValue: { type: 'string' },\n+            },\n+            additionalProperties: false,\n+            required: ['HeaderName', 'HeaderValue'],\n+          },\n+        },\n+        OriginPath: { type: 'string' },\n+        S3OriginConfig: {\n+          type: 'object',\n+          properties: {\n+            OriginAccessIdentity: {\n+              type: 'string',\n+              pattern: '^origin-access-identity/cloudfront/.+',\n+            },\n+          },\n+          additionalProperties: false,\n+        },\n+      },\n+      additionalProperties: false,\n+      required: ['DomainName', 'Id'],\n+      oneOf: [{ required: ['CustomOriginConfig'] }, { required: ['S3OriginConfig'] }],\n+    };\n+\n+    const behaviorObjectSchema = {\n+      type: 'object',\n+      properties: {\n+        AllowedMethods: {\n+          oneOf: [\n+            { type: 'array', items: [{ const: 'GET' }, { const: 'HEAD' }] },\n+            { type: 'array', items: [{ const: 'GET' }, { const: 'HEAD' }, { const: 'OPTIONS' }] },\n+            {\n+              type: 'array',\n+              items: [\n+                { const: 'GET' },\n+                { const: 'HEAD' },\n+                { const: 'OPTIONS' },\n+                { const: 'PUT' },\n+                { const: 'PATCH' },\n+                { const: 'POST' },\n+                { const: 'DELETE' },\n+              ],\n+            },",
        "comment_created_at": "2020-09-17T13:25:58+00:00",
        "comment_author": "medikoo",
        "comment_body": "If understand we allow three exact collections. If it's the case then above doesn't meet that, as `AllowedMethods: [\"GET\"]` will pass.\r\n\r\nI believe we can achieve needed validation through `{ enum: [[\"GET\", \"HEAD\"], [... ], [...]] }`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "488540044",
    "pr_number": 8227,
    "pr_file": "lib/plugins/aws/package/compile/events/sqs/index.js",
    "created_at": "2020-09-15T09:55:34+00:00",
    "commented_code": "'package:compileEvents': this.compileSQSEvents.bind(this),\n     };\n \n-    // TODO: Complete schema, see https://github.com/serverless/serverless/issues/8033\n     this.serverless.configSchemaHandler.defineFunctionEvent('aws', 'sqs', {\n-      anyOf: [{ type: 'string' }, { type: 'object' }],\n+      oneOf: [\n+        { $ref: '#/definitions/awsArn' },\n+        {\n+          type: 'object',\n+          properties: {\n+            arn: { $ref: '#/definitions/awsArn' },\n+            batchSize: { type: 'integer', minimum: 1, maximum: 10000 },",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "488540044",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8227,
        "pr_file": "lib/plugins/aws/package/compile/events/sqs/index.js",
        "discussion_id": "488540044",
        "commented_code": "@@ -12,9 +12,20 @@ class AwsCompileSQSEvents {\n       'package:compileEvents': this.compileSQSEvents.bind(this),\n     };\n \n-    // TODO: Complete schema, see https://github.com/serverless/serverless/issues/8033\n     this.serverless.configSchemaHandler.defineFunctionEvent('aws', 'sqs', {\n-      anyOf: [{ type: 'string' }, { type: 'object' }],\n+      oneOf: [\n+        { $ref: '#/definitions/awsArn' },\n+        {\n+          type: 'object',\n+          properties: {\n+            arn: { $ref: '#/definitions/awsArn' },\n+            batchSize: { type: 'integer', minimum: 1, maximum: 10000 },",
        "comment_created_at": "2020-09-15T09:55:34+00:00",
        "comment_author": "medikoo",
        "comment_body": "If I see correctly in AWS docs, for SQS maximum is `10` -> https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-eventsourcemapping.html#cfn-lambda-eventsourcemapping-batchsize",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "497487818",
    "pr_number": 8308,
    "pr_file": "lib/plugins/aws/package/compile/events/cloudFront/index.js",
    "created_at": "2020-09-30T12:57:43+00:00",
    "commented_code": "properties: {\n         AllowedMethods: {\n           oneOf: [\n-            { enum: ['GET', 'HEAD'] },\n-            { enum: ['GET', 'HEAD', 'OPTIONS'] },\n-            { enum: ['GET', 'HEAD', 'OPTIONS', 'PUT', 'PATCH', 'POST', 'DELETE'] },\n+            {\n+              uniqueItems: true,\n+              minItems: 2,\n+              items: { enum: ['GET', 'HEAD'] },\n+            },\n+            {\n+              uniqueItems: true,\n+              minItems: 3,\n+              items: { enum: ['GET', 'HEAD', 'OPTIONS'] },\n+            },\n+            {\n+              uniqueItems: true,\n+              minItems: 7,\n+              items: { enum: ['GET', 'HEAD', 'OPTIONS', 'PUT', 'PATCH', 'POST', 'DELETE'] },\n+            },\n           ],\n         },\n         CachedMethods: {\n-          oneOf: [{ enum: ['GET', 'HEAD'] }, { enum: ['GET', 'HEAD', 'OPTIONS'] }],\n+          oneOf: [\n+            {\n+              uniqueItems: true,\n+              minItems: 2,\n+              items: { enum: ['GET', 'HEAD'] },\n+            },\n+            {\n+              uniqueItems: true,\n+              minItems: 3,\n+              items: { enum: ['GET', 'HEAD', 'OPTIONS'] },\n+            },\n+          ],",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "497487818",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8308,
        "pr_file": "lib/plugins/aws/package/compile/events/cloudFront/index.js",
        "discussion_id": "497487818",
        "commented_code": "@@ -85,13 +85,45 @@ class AwsCompileCloudFrontEvents {\n       properties: {\n         AllowedMethods: {\n           oneOf: [\n-            { enum: ['GET', 'HEAD'] },\n-            { enum: ['GET', 'HEAD', 'OPTIONS'] },\n-            { enum: ['GET', 'HEAD', 'OPTIONS', 'PUT', 'PATCH', 'POST', 'DELETE'] },\n+            {\n+              uniqueItems: true,\n+              minItems: 2,\n+              items: { enum: ['GET', 'HEAD'] },\n+            },\n+            {\n+              uniqueItems: true,\n+              minItems: 3,\n+              items: { enum: ['GET', 'HEAD', 'OPTIONS'] },\n+            },\n+            {\n+              uniqueItems: true,\n+              minItems: 7,\n+              items: { enum: ['GET', 'HEAD', 'OPTIONS', 'PUT', 'PATCH', 'POST', 'DELETE'] },\n+            },\n           ],\n         },\n         CachedMethods: {\n-          oneOf: [{ enum: ['GET', 'HEAD'] }, { enum: ['GET', 'HEAD', 'OPTIONS'] }],\n+          oneOf: [\n+            {\n+              uniqueItems: true,\n+              minItems: 2,\n+              items: { enum: ['GET', 'HEAD'] },\n+            },\n+            {\n+              uniqueItems: true,\n+              minItems: 3,\n+              items: { enum: ['GET', 'HEAD', 'OPTIONS'] },\n+            },\n+          ],",
        "comment_created_at": "2020-09-30T12:57:43+00:00",
        "comment_author": "medikoo",
        "comment_body": "In original PR I suggested it to be as:\r\n\r\n```javascript\r\nAllowedMethods: {\r\n  enum: [['GET', 'HEAD'], ['GET', 'HEAD', 'OPTIONS'], ...]\r\n}\r\n```\r\n\r\nhttps://github.com/serverless/serverless/pull/8250#discussion_r490242639\r\n\r\nI have no idea how it went other way, and why I accept it :)\r\n\r\nThis is also way simpler form as proposed now. I believe I tested above proposed approach locally. Can you confirm it works and update to that?",
        "pr_file_module": null
      },
      {
        "comment_id": "497493752",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8308,
        "pr_file": "lib/plugins/aws/package/compile/events/cloudFront/index.js",
        "discussion_id": "497487818",
        "commented_code": "@@ -85,13 +85,45 @@ class AwsCompileCloudFrontEvents {\n       properties: {\n         AllowedMethods: {\n           oneOf: [\n-            { enum: ['GET', 'HEAD'] },\n-            { enum: ['GET', 'HEAD', 'OPTIONS'] },\n-            { enum: ['GET', 'HEAD', 'OPTIONS', 'PUT', 'PATCH', 'POST', 'DELETE'] },\n+            {\n+              uniqueItems: true,\n+              minItems: 2,\n+              items: { enum: ['GET', 'HEAD'] },\n+            },\n+            {\n+              uniqueItems: true,\n+              minItems: 3,\n+              items: { enum: ['GET', 'HEAD', 'OPTIONS'] },\n+            },\n+            {\n+              uniqueItems: true,\n+              minItems: 7,\n+              items: { enum: ['GET', 'HEAD', 'OPTIONS', 'PUT', 'PATCH', 'POST', 'DELETE'] },\n+            },\n           ],\n         },\n         CachedMethods: {\n-          oneOf: [{ enum: ['GET', 'HEAD'] }, { enum: ['GET', 'HEAD', 'OPTIONS'] }],\n+          oneOf: [\n+            {\n+              uniqueItems: true,\n+              minItems: 2,\n+              items: { enum: ['GET', 'HEAD'] },\n+            },\n+            {\n+              uniqueItems: true,\n+              minItems: 3,\n+              items: { enum: ['GET', 'HEAD', 'OPTIONS'] },\n+            },\n+          ],",
        "comment_created_at": "2020-09-30T13:06:35+00:00",
        "comment_author": "jede",
        "comment_body": "Yes, it works for the standard cases! However then for instance `AllowedMethods: ['HEAD', 'GET']` is not valid since the order matters. But maybe we can live with that? ",
        "pr_file_module": null
      },
      {
        "comment_id": "497499738",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8308,
        "pr_file": "lib/plugins/aws/package/compile/events/cloudFront/index.js",
        "discussion_id": "497487818",
        "commented_code": "@@ -85,13 +85,45 @@ class AwsCompileCloudFrontEvents {\n       properties: {\n         AllowedMethods: {\n           oneOf: [\n-            { enum: ['GET', 'HEAD'] },\n-            { enum: ['GET', 'HEAD', 'OPTIONS'] },\n-            { enum: ['GET', 'HEAD', 'OPTIONS', 'PUT', 'PATCH', 'POST', 'DELETE'] },\n+            {\n+              uniqueItems: true,\n+              minItems: 2,\n+              items: { enum: ['GET', 'HEAD'] },\n+            },\n+            {\n+              uniqueItems: true,\n+              minItems: 3,\n+              items: { enum: ['GET', 'HEAD', 'OPTIONS'] },\n+            },\n+            {\n+              uniqueItems: true,\n+              minItems: 7,\n+              items: { enum: ['GET', 'HEAD', 'OPTIONS', 'PUT', 'PATCH', 'POST', 'DELETE'] },\n+            },\n           ],\n         },\n         CachedMethods: {\n-          oneOf: [{ enum: ['GET', 'HEAD'] }, { enum: ['GET', 'HEAD', 'OPTIONS'] }],\n+          oneOf: [\n+            {\n+              uniqueItems: true,\n+              minItems: 2,\n+              items: { enum: ['GET', 'HEAD'] },\n+            },\n+            {\n+              uniqueItems: true,\n+              minItems: 3,\n+              items: { enum: ['GET', 'HEAD', 'OPTIONS'] },\n+            },\n+          ],",
        "comment_created_at": "2020-09-30T13:15:34+00:00",
        "comment_author": "medikoo",
        "comment_body": "@jede very good point. I didn't realize that. In light of that, I think it's better if we stick to what you've originally proposed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "700269167",
    "pr_number": 9903,
    "pr_file": "lib/plugins/aws/package/compile/events/eventBridge/index.js",
    "created_at": "2021-09-01T14:28:02+00:00",
    "commented_code": "required: ['inputTemplate'],\n           additionalProperties: false,\n         },\n+        retryPolicy: {\n+          type: 'object',\n+          properties: {\n+            maximumEventAge: {\n+              type: 'integer',\n+              minLength: 60,\n+              maxLength: 86400,\n+            },\n+            maximumRetryAttempts: {\n+              type: 'integer',\n+              minLength: 0,",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "700269167",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9903,
        "pr_file": "lib/plugins/aws/package/compile/events/eventBridge/index.js",
        "discussion_id": "700269167",
        "commented_code": "@@ -87,6 +87,27 @@ class AwsCompileEventBridgeEvents {\n           required: ['inputTemplate'],\n           additionalProperties: false,\n         },\n+        retryPolicy: {\n+          type: 'object',\n+          properties: {\n+            maximumEventAge: {\n+              type: 'integer',\n+              minLength: 60,\n+              maxLength: 86400,\n+            },\n+            maximumRetryAttempts: {\n+              type: 'integer',\n+              minLength: 0,",
        "comment_created_at": "2021-09-01T14:28:02+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "This is integer type and `minLength` and `maxLength` is e.g. for `string` type. I believe you wanted to use `maximum`, etc? ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "700269218",
    "pr_number": 9903,
    "pr_file": "lib/plugins/aws/package/compile/events/eventBridge/index.js",
    "created_at": "2021-09-01T14:28:05+00:00",
    "commented_code": "required: ['inputTemplate'],\n           additionalProperties: false,\n         },\n+        retryPolicy: {\n+          type: 'object',\n+          properties: {\n+            maximumEventAge: {\n+              type: 'integer',\n+              minLength: 60,",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "700269218",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9903,
        "pr_file": "lib/plugins/aws/package/compile/events/eventBridge/index.js",
        "discussion_id": "700269218",
        "commented_code": "@@ -87,6 +87,27 @@ class AwsCompileEventBridgeEvents {\n           required: ['inputTemplate'],\n           additionalProperties: false,\n         },\n+        retryPolicy: {\n+          type: 'object',\n+          properties: {\n+            maximumEventAge: {\n+              type: 'integer',\n+              minLength: 60,",
        "comment_created_at": "2021-09-01T14:28:05+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "This is integer type and `minLength` and `maxLength` is e.g. for `string` type. I believe you wanted to use `maximum`, etc? ",
        "pr_file_module": null
      }
    ]
  }
]