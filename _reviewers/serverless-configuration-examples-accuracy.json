[
  {
    "discussion_id": "1122757227",
    "pr_number": 11770,
    "pr_file": "docs/providers/aws/guide/functions.md",
    "created_at": "2023-03-02T08:40:05+00:00",
    "commented_code": "architecture: arm64\n ```\n \n+## Runtime\n+\n+The `runtime` configuration is required and specifies which [AWS Runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) your functions use. If you set `runtime` to `provided` or `provided.al2`, include your provided runtime as a [layer](#layers).",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1122757227",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11770,
        "pr_file": "docs/providers/aws/guide/functions.md",
        "discussion_id": "1122757227",
        "commented_code": "@@ -402,6 +402,28 @@ functions:\n     architecture: arm64\n ```\n \n+## Runtime\n+\n+The `runtime` configuration is required and specifies which [AWS Runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) your functions use. If you set `runtime` to `provided` or `provided.al2`, include your provided runtime as a [layer](#layers). ",
        "comment_created_at": "2023-03-02T08:40:05+00:00",
        "comment_author": "medikoo",
        "comment_body": "Runtime configuration is not required (we default to `nodejs14.x` when not set in configuration)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1181214946",
    "pr_number": 11940,
    "pr_file": "docs/providers/tencent/cli-reference/create.md",
    "created_at": "2023-04-30T11:33:14+00:00",
    "commented_code": "- tencent-php\n - tencent-go\n \n-**Note:** The templates will deploy the latest version of runtime by default. When you want to configure specific version of runtime, like `Node.js6`, `Python2.7` or `PHP5`, you have to configure the `runtime` property in `serverless.yml`.\n+**Note:** The templates will deploy the latest version of runtime by default. When you want to configure specific version of runtime, like `Node.js18`, `Python3.10` or `PHP5`, you have to configure the `runtime` property in `serverless.yml`.",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1181214946",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11940,
        "pr_file": "docs/providers/tencent/cli-reference/create.md",
        "discussion_id": "1181214946",
        "commented_code": "@@ -53,7 +53,7 @@ Most commonly used templates:\n - tencent-php\n - tencent-go\n \n-**Note:** The templates will deploy the latest version of runtime by default. When you want to configure specific version of runtime, like `Node.js6`, `Python2.7` or `PHP5`, you have to configure the `runtime` property in `serverless.yml`.\n+**Note:** The templates will deploy the latest version of runtime by default. When you want to configure specific version of runtime, like `Node.js18`, `Python3.10` or `PHP5`, you have to configure the `runtime` property in `serverless.yml`.",
        "comment_created_at": "2023-04-30T11:33:14+00:00",
        "comment_author": "GrahamCampbell",
        "comment_body": "Probably we should use Python 3.9 here, like in the other places.",
        "pr_file_module": null
      },
      {
        "comment_id": "1181215092",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11940,
        "pr_file": "docs/providers/tencent/cli-reference/create.md",
        "discussion_id": "1181214946",
        "commented_code": "@@ -53,7 +53,7 @@ Most commonly used templates:\n - tencent-php\n - tencent-go\n \n-**Note:** The templates will deploy the latest version of runtime by default. When you want to configure specific version of runtime, like `Node.js6`, `Python2.7` or `PHP5`, you have to configure the `runtime` property in `serverless.yml`.\n+**Note:** The templates will deploy the latest version of runtime by default. When you want to configure specific version of runtime, like `Node.js18`, `Python3.10` or `PHP5`, you have to configure the `runtime` property in `serverless.yml`.",
        "comment_created_at": "2023-04-30T11:34:22+00:00",
        "comment_author": "GrahamCampbell",
        "comment_body": "In any case, we can't add Python 3.10 here until after https://github.com/serverless/serverless/pull/11922 is merged.",
        "pr_file_module": null
      },
      {
        "comment_id": "1181278467",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11940,
        "pr_file": "docs/providers/tencent/cli-reference/create.md",
        "discussion_id": "1181214946",
        "commented_code": "@@ -53,7 +53,7 @@ Most commonly used templates:\n - tencent-php\n - tencent-go\n \n-**Note:** The templates will deploy the latest version of runtime by default. When you want to configure specific version of runtime, like `Node.js6`, `Python2.7` or `PHP5`, you have to configure the `runtime` property in `serverless.yml`.\n+**Note:** The templates will deploy the latest version of runtime by default. When you want to configure specific version of runtime, like `Node.js18`, `Python3.10` or `PHP5`, you have to configure the `runtime` property in `serverless.yml`.",
        "comment_created_at": "2023-04-30T18:58:50+00:00",
        "comment_author": "bartelemi",
        "comment_body": "Good catch, I will change it to Python 3.9.\r\n\r\nI will keep the other Python3.10 changes thought and I suggest we wait until that PR is merged. I will make sure to resolve any conflicts swiftly.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1094221210",
    "pr_number": 11715,
    "pr_file": "docs/providers/aws/guide/functions.md",
    "created_at": "2023-02-02T09:05:38+00:00",
    "commented_code": "architecture: arm64\n ```\n \n+## Runtime Management\n+\n+[Runtime Management](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html) allows for fine-grained control of the runtime being used for a lambda function in the rare event of compatibility issues with a function.\n+\n+For automatic updates, set `runtimeManagement` to `auto`, and set it to `onFunctionUpdate`\n+\n+To configure runtime management for all functions, configure `runtimeManagement` at `provider` level as follows:\n+\n+```yml\n+provider:\n+  ...\n+  runtimeManagement: auto\n+```\n+",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1094221210",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11715,
        "pr_file": "docs/providers/aws/guide/functions.md",
        "discussion_id": "1094221210",
        "commented_code": "@@ -398,6 +402,42 @@ functions:\n     architecture: arm64\n ```\n \n+## Runtime Management\n+\n+[Runtime Management](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html) allows for fine-grained control of the runtime being used for a lambda function in the rare event of compatibility issues with a function.\n+\n+For automatic updates, set `runtimeManagement` to `auto`, and set it to `onFunctionUpdate`\n+\n+To configure runtime management for all functions, configure `runtimeManagement` at `provider` level as follows:\n+\n+```yml\n+provider:\n+  ...\n+  runtimeManagement: auto\n+```\n+",
        "comment_created_at": "2023-02-02T09:05:38+00:00",
        "comment_author": "medikoo",
        "comment_body": "`runtimeManagement: auto` has no effect, so I don't there's a point in showing such example (we can just write that it defaults to `auto`, which is the AWS default)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "613163542",
    "pr_number": 9296,
    "pr_file": "docs/providers/aws/guide/variables.md",
    "created_at": "2021-04-14T11:27:38+00:00",
    "commented_code": "APIG_DEPLOYMENT_ID: ApiGatewayDeployment${sls:instanceId}\n ```\n \n+**stage**\n+\n+The stage used by the Serverless CLI. The `${sls:stage}` variable is a shortcut for `${opt:stage, self:provider.stage}`.",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "613163542",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9296,
        "pr_file": "docs/providers/aws/guide/variables.md",
        "discussion_id": "613163542",
        "commented_code": "@@ -134,6 +134,10 @@ functions:\n       APIG_DEPLOYMENT_ID: ApiGatewayDeployment${sls:instanceId}\n ```\n \n+**stage**\n+\n+The stage used by the Serverless CLI. The `${sls:stage}` variable is a shortcut for `${opt:stage, self:provider.stage}`.",
        "comment_created_at": "2021-04-14T11:27:38+00:00",
        "comment_author": "medikoo",
        "comment_body": "It's technically a shortcut for `${opt:stage, self:provider.stage, \"dev\"}`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "860819215",
    "pr_number": 10915,
    "pr_file": "docs/tutorial.md",
    "created_at": "2022-04-28T12:16:45+00:00",
    "commented_code": "+<!--\n+title: Tutorial: Your First Serverless Framework Project\n+menuText: Your First Project\n+-->\n+\n+# Tutorial: Your First Serverless Framework Project\n+\n+<iframe width=\"700\" height=\"394\" src=\"https://www.youtube.com/embed/dMVfqCTzuwk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n+\n+This guide helps you create and deploy a REST API with Serverless Framework and AWS.\n+\n+We won't be going deep into the details behind why we are doing what we are doing; this guide is meant to help you get this API up and running so you can see the value of Serverless as fast as possible and decide from there where you want to go next. We will provide links to more details where appropriate if you want to dive deeper into specific topics.\n+\n+You can [download this project](https://github.com/serverless/tutorial/tree/main/getting-started) on GitHub.\n+\n+## Create an AWS account\n+\n+The first thing we need to accomplish is to have somewhere to deploy to. Serverless development relies on cloud vendors to help get your applications onto the web as fast as possible and the most widely used vendor for this is AWS.\n+\n+If you already have a verified AWS account you can use, then please skip ahead. Otherwise, you will need to go to the [AWS account creation page](https://portal.aws.amazon.com/billing/signup#/start) and follow the instructions for creating the account. The account will also need to be fully verified in order to be able to deploy our Serverless services.\n+\n+## Installing Serverless Framework\n+\n+Installing the Serverless Framework is, thankfully, very easy. Since it is an NPM module, it requires Node and NPM to be installed. In case you do not have them installed, you can find details on how to do so here for your preferred platform: https://nodejs.org/en/download/\n+\n+With Node and NPM installed, it is recommended to install Serverless Framework as a global module. This can be done with:\n+\n+```bash\n+npm install -g serverless\n+```\n+\n+## Create a new service\n+\n+In order to get started, we need to create our first service, and the Serverless Framework has a great way to help us get bootstrapped quickly and easily. In your CLI, just run the following command:\n+\n+```bash\n+serverless\n+```\n+\n+This will then start a wizard-like process to help you bootstrap a new service.\n+\n+![img](https://assets-global.website-files.com/60acbb950c4d66d0ab3e2007/61f2c5537aaa4ac109b9b7e1_61f19876940e2064c1716616_px6lapq9CNkkO1sK71mgc0Mtudjo369IQzQnwHHn-nzCXnUSEeFv4ovmJI50ZFIPmsPfuK-A39OjujXE4nW3gj9D1tiWkLveg3PZLF9fz7mWtsQp3xzMZESpnP6KEaR5-asUh6AL.png)\n+\n+## Using the `serverless` command\n+\n+The first option you should see is to choose the type of template you want to base your service on. This is only to get you started and everything can be changed later if you so desire.\n+\n+1. For our purposes in this Getting Started, let\u2019s choose the option \u201cAWS - Node.js - HTTP API\u201d.\n+2. In the next step, feel free to name this new service whatever you wish or just press \u201cEnter\u201d to keep the default of aws-node-http-api-project\n+3. This will then create a new folder with the same name as in step 2 and also pull the template related to our choice\n+4. We are now prompted about whether we want to login or register for Serverless Dashboard.\n+\n+## What is Serverless Dashboard?\n+\n+[Serverless Dashboard](http://app.serverless.com) is a tool provided by the Serverless Framework to help make managing connections to AWS easier, manage configuration data for your services, monitoring capabilities and the ability to read logs for your Lambda functions amongst many other features.\n+\n+The dashboard is free for single developer use and we will be using it for the purpose of the getting started, because the dashboard makes it so much easier to manage connections to our AWS account for the deployment we will shortly be doing.\n+\n+For all these reasons, lets choose Y (or just press Enter), to get ourselves set up with the dashboard. This will then open a window in your browser.\n+\n+Let's click the \u201cRegister\u201d link near the bottom to create our account, either using GiHub, Google or your own email address and password. Clicking register, when prompted for a username, go ahead and use a unique username that contains only numbers and lowercase letters.\n+\n+Once the account is created, the CLI will then do one of two things:\n+\n+1. If you already have AWS credentials on your machine for some reason, you will get prompted to deploy to your AWS account using those credentials. I would recommend saying no at this point and checking out the next step \u201cSetting up provider manually\u201d\n+2. If you do not have AWS credentials on your machine, the CLI will ask you if you want to set-up an \u201cAWS Access Role\u201d or \u201cLocal AWS Keys\u201d. Let's choose the AWS Access Role to continue for now.\n+\n+![img](https://assets-global.website-files.com/60acbb950c4d66d0ab3e2007/61f2c552c28dcc79f3f80f05_61f1987653c42f714ad26aff_gUC-yZhdcWsu_vBv8GFQv6QlY15cpyWKgt7EbQ8CkiKGB88_02ITmfnLbBD3dgKygFoxWFEKVSoWsRiQszZfMYebIsmMrYig-8Q3_nURFLOBhaJA4fyC2jJZcWbabf4RjDGuPD_x.png)\n+\n+When you choose \u201cAWS Access Role\u201d another browser window should open (if not, the CLI provides you a link to use to open the window manually), and this is where we configure our Provider within our dashboard account.\n+\n+![img](https://assets-global.website-files.com/60acbb950c4d66d0ab3e2007/61f2c55319969220814ce2b7_61f198766d6b9c8fa8d6d1f7_xmNC49vOm8J4Y0xafU-3edJvkDSmmthrm4zFTFnGX3Ght03vHaiG41DodIXKBPIw_dWpuzSTb6uC8XQ6qWVz93oM6lA_F2ORGYOLgazshBUAkcsnrmEYKgZm8i32Q4PfGaojzeo1.png)\n+\n+Feel free to read through the documentation you may see, and on the next step make sure to choose the \u201cSimple\u201d option and then click \u201cConnect AWS provider\u201d. This will open a page to your AWS account titled \u201cQuick create stack\u201d. There is nothing we need to change here, just scroll down so that we can check the confirmation box at the bottom of the page, then click \u201cCreate Stack\u201d.\n+\n+![img](https://assets-global.website-files.com/60acbb950c4d66d0ab3e2007/61f2c5536e2099d8789f8e51_61f19876fb7773f309babd62_dLslnDYmsFl77J11WwIGCh7_-A5YKMy-KSB-PCyf5E6FuvJKFdM8B8-19bPWqYRpvn45cddUFLPFraAHsqIdD_qbC_JHQ5xi8j-7U3xl5S1B2oIg1ltAR74UzS3mvd2O8Dj93aoM.png)\n+\n+At this point we need to sit and wait a few seconds for AWS to create what\u2019s needed, we can click the refresh button to the list on the left until the status says `CREATE_COMPLETE`.\n+\n+![img](https://assets-global.website-files.com/60acbb950c4d66d0ab3e2007/61f2c5530e8a37e3fc5d9d8f_61f198761ad0e7703e31939f_5emBZ5ekR_hdYe1VSsB4d_K7DTConZQaECnBDniEbEaNneZ2eKpKX3aISLr9EmHVhntKPXSAsE82Ln-6m3HvSfuPju7CQOfoDyXTLaTkxMyupeJ4Ws62qQZ8LzyTtZ5LbVufOH7H.png)\n+\n+Once that is done, you can close that tab to go back to the provider creation page on the dashboard. The dashboard should automatically detect that the provider created successfully, and so should the CLI. At this point, go ahead and reply \"Y\" to the question about deploying and we wait a few minutes for this new service to get deployed.\n+\n+## Setting up a provider manually\n+\n+If you already had AWS credentials on your machine and chose \u201cNo\u201d when asked if you wanted to deploy, you still need to setup a Provider. Thankfully to get one setup is pretty easy. Go to app.serverless.com and register an account as described above. Then when you get through to the app listing page, click on \u201corg\u201d on the left, then choose the \u201cproviders\u201d tab and finally \u201cadd\u201d.\n+\n+At this point adding your provider is exactly the same as described above, and once done, you can go back to your service in the CLI. Make sure to `cd` into the services folder then run `serverless deploy`. This will now use your Provider you created to deploy to your AWS account.\n+\n+## Using local AWS credentials\n+\n+Of course, if you don\u2019t want to set-up a provider on a dashboard account, you can use local credentials setup on your own machine. This involves creating a user with the right permissions and adding the credentials on your machine. While we won\u2019t cover how to do that in this guide, we have some [great documentation](https://www.serverless.com/framework/docs/providers/aws/guide/credentials#creating-aws-access-keys) on how to accomplish this.\n+\n+## What have we just done?\n+\n+After a successful deployment you should see, either in the dashboard or on the CLI, that you have an HTTP endpoint you can call. Also, if you open the service we just created in your favourite IDE or text editor and look at the contents of the `serverless.yml`, this is what controls pretty much everything in our service. You will notice a section where the functions you have are defined with events attached to them. Also take note that the code that executes when this HTTP endpoint is called is defined in the `handler.js` file in a function called `hello`. If you edit this file then run `serverless deploy` your changes will be pushed to your AWS account and when you next call that endpoint either in the browser or using curl, you should see your changes reflected:\n+\n+```bash\n+curl [your endpoint address]\n+```\n+\n+## Create a new web API endpoint\n+\n+Now that we have some basics under our belt, let\u2019s expand this further and add some useful endpoints. It would be great to have a POST endpoint so we can add new records to a database. In order to do this we will use an AWS service called DynamoDB that makes having a datastore for Lambda functions quick and easy and very uncomplicated.\n+\n+## Adding a DynamoDB database\n+\n+In order to do this, let\u2019s open `serverless.yml` and paste the following at the end of the file:\n+\n+```yaml\n+resources:\n+  Resources:\n+    CustomerTable:\n+      Type: AWS::DynamoDB::Table\n+      Properties:\n+        AttributeDefinitions:\n+          - AttributeName: primary_key\n+            AttributeType: S\n+        BillingMode: PAY_PER_REQUEST\n+        KeySchema:\n+          - AttributeName: primary_key\n+            KeyType: HASH\n+        TableName: ${self:service}-customerTable-${sls:stage}\n+```\n+\n+And lets create a new file in the same folder as the `serverless.yml` called `createCustomer.js` and add the following code to it:\n+\n+```javascript\n+'use strict';\n+const AWS = require('aws-sdk');\n+\n+module.exports.createCustomer = async (event) => {\n+  const body = JSON.parse(Buffer.from(event.body, 'base64').toString());\n+  const dynamoDb = new AWS.DynamoDB.DocumentClient();\n+  const putParams = {\n+    TableName: process.env.DYNAMODB_CUSTOMER_TABLE,\n+    Item: {\n+      primary_key: body.name,\n+      email: body.email,\n+    },\n+  };\n+  await dynamoDb.put(putParams).promise();\n+\n+  return {\n+    statusCode: 201,\n+  };\n+};\n+```\n+\n+You may have noticed we include an npm module to help us talk to AWS, so lets make sure we install this required npm module as a part of our service with the following command:\n+\n+```bash\n+npm install \u2013save aws-sdk\n+```\n+\n+Note: If you would like this entire project as a reference to clone, you can find this on [GitHub](https://github.com/serverless/tutorial/tree/main/getting-started) but just remember to add your own org and app names to `serverless.yml` to connect to your Serverless Dashboard account before deploying.\n+\n+## Making the database table name available to the function\n+\n+In order for our function to know what table to access, we need some way to make that name available and thankfully Lambda has the concept of environment variables. You can set an environment variable in your `serverless.yml` that is then accessible to the function in code. Under the provider section of your `serverless.yml` add the following:\n+\n+```yaml\n+provider:\n+  environment:\n+    DYNAMODB_CUSTOMER_TABLE: ${self:service}-customerTable-${sls:stage}\n+```\n+\n+In our function code, you may have noticed we access this environment variable with the following: `process.env.DYNAMODB_CUSTOMER_TABLE`. Environment variables become a very powerful way to pass configuration details we need to our Lambda functions.\n+\n+## Setting function permissions\n+\n+While we could go ahead and deploy our changes already (feel free to do so with the command `serverless deploy`), we do need to add one more thing to allow our code to talk to our database. By default, and for good security reasons, AWS requires that we add explicit permissions to allow Lambda functions to access other AWS services. This requires us adding some more configuration to our `serverless.yml`. Within the `provider` block of our `serverless.yml`, make sure you have the following:\n+\n+```yaml\n+provider:\n+  iamRoleStatements:",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "860819215",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10915,
        "pr_file": "docs/tutorial.md",
        "discussion_id": "860819215",
        "commented_code": "@@ -0,0 +1,285 @@\n+<!--\n+title: Tutorial: Your First Serverless Framework Project\n+menuText: Your First Project\n+-->\n+\n+# Tutorial: Your First Serverless Framework Project\n+\n+<iframe width=\"700\" height=\"394\" src=\"https://www.youtube.com/embed/dMVfqCTzuwk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n+\n+This guide helps you create and deploy a REST API with Serverless Framework and AWS.\n+\n+We won't be going deep into the details behind why we are doing what we are doing; this guide is meant to help you get this API up and running so you can see the value of Serverless as fast as possible and decide from there where you want to go next. We will provide links to more details where appropriate if you want to dive deeper into specific topics.\n+\n+You can [download this project](https://github.com/serverless/tutorial/tree/main/getting-started) on GitHub.\n+\n+## Create an AWS account\n+\n+The first thing we need to accomplish is to have somewhere to deploy to. Serverless development relies on cloud vendors to help get your applications onto the web as fast as possible and the most widely used vendor for this is AWS.\n+\n+If you already have a verified AWS account you can use, then please skip ahead. Otherwise, you will need to go to the [AWS account creation page](https://portal.aws.amazon.com/billing/signup#/start) and follow the instructions for creating the account. The account will also need to be fully verified in order to be able to deploy our Serverless services.\n+\n+## Installing Serverless Framework\n+\n+Installing the Serverless Framework is, thankfully, very easy. Since it is an NPM module, it requires Node and NPM to be installed. In case you do not have them installed, you can find details on how to do so here for your preferred platform: https://nodejs.org/en/download/\n+\n+With Node and NPM installed, it is recommended to install Serverless Framework as a global module. This can be done with:\n+\n+```bash\n+npm install -g serverless\n+```\n+\n+## Create a new service\n+\n+In order to get started, we need to create our first service, and the Serverless Framework has a great way to help us get bootstrapped quickly and easily. In your CLI, just run the following command:\n+\n+```bash\n+serverless\n+```\n+\n+This will then start a wizard-like process to help you bootstrap a new service.\n+\n+![img](https://assets-global.website-files.com/60acbb950c4d66d0ab3e2007/61f2c5537aaa4ac109b9b7e1_61f19876940e2064c1716616_px6lapq9CNkkO1sK71mgc0Mtudjo369IQzQnwHHn-nzCXnUSEeFv4ovmJI50ZFIPmsPfuK-A39OjujXE4nW3gj9D1tiWkLveg3PZLF9fz7mWtsQp3xzMZESpnP6KEaR5-asUh6AL.png)\n+\n+## Using the `serverless` command\n+\n+The first option you should see is to choose the type of template you want to base your service on. This is only to get you started and everything can be changed later if you so desire.\n+\n+1. For our purposes in this Getting Started, let\u2019s choose the option \u201cAWS - Node.js - HTTP API\u201d.\n+2. In the next step, feel free to name this new service whatever you wish or just press \u201cEnter\u201d to keep the default of aws-node-http-api-project\n+3. This will then create a new folder with the same name as in step 2 and also pull the template related to our choice\n+4. We are now prompted about whether we want to login or register for Serverless Dashboard.\n+\n+## What is Serverless Dashboard?\n+\n+[Serverless Dashboard](http://app.serverless.com) is a tool provided by the Serverless Framework to help make managing connections to AWS easier, manage configuration data for your services, monitoring capabilities and the ability to read logs for your Lambda functions amongst many other features.\n+\n+The dashboard is free for single developer use and we will be using it for the purpose of the getting started, because the dashboard makes it so much easier to manage connections to our AWS account for the deployment we will shortly be doing.\n+\n+For all these reasons, lets choose Y (or just press Enter), to get ourselves set up with the dashboard. This will then open a window in your browser.\n+\n+Let's click the \u201cRegister\u201d link near the bottom to create our account, either using GiHub, Google or your own email address and password. Clicking register, when prompted for a username, go ahead and use a unique username that contains only numbers and lowercase letters.\n+\n+Once the account is created, the CLI will then do one of two things:\n+\n+1. If you already have AWS credentials on your machine for some reason, you will get prompted to deploy to your AWS account using those credentials. I would recommend saying no at this point and checking out the next step \u201cSetting up provider manually\u201d\n+2. If you do not have AWS credentials on your machine, the CLI will ask you if you want to set-up an \u201cAWS Access Role\u201d or \u201cLocal AWS Keys\u201d. Let's choose the AWS Access Role to continue for now.\n+\n+![img](https://assets-global.website-files.com/60acbb950c4d66d0ab3e2007/61f2c552c28dcc79f3f80f05_61f1987653c42f714ad26aff_gUC-yZhdcWsu_vBv8GFQv6QlY15cpyWKgt7EbQ8CkiKGB88_02ITmfnLbBD3dgKygFoxWFEKVSoWsRiQszZfMYebIsmMrYig-8Q3_nURFLOBhaJA4fyC2jJZcWbabf4RjDGuPD_x.png)\n+\n+When you choose \u201cAWS Access Role\u201d another browser window should open (if not, the CLI provides you a link to use to open the window manually), and this is where we configure our Provider within our dashboard account.\n+\n+![img](https://assets-global.website-files.com/60acbb950c4d66d0ab3e2007/61f2c55319969220814ce2b7_61f198766d6b9c8fa8d6d1f7_xmNC49vOm8J4Y0xafU-3edJvkDSmmthrm4zFTFnGX3Ght03vHaiG41DodIXKBPIw_dWpuzSTb6uC8XQ6qWVz93oM6lA_F2ORGYOLgazshBUAkcsnrmEYKgZm8i32Q4PfGaojzeo1.png)\n+\n+Feel free to read through the documentation you may see, and on the next step make sure to choose the \u201cSimple\u201d option and then click \u201cConnect AWS provider\u201d. This will open a page to your AWS account titled \u201cQuick create stack\u201d. There is nothing we need to change here, just scroll down so that we can check the confirmation box at the bottom of the page, then click \u201cCreate Stack\u201d.\n+\n+![img](https://assets-global.website-files.com/60acbb950c4d66d0ab3e2007/61f2c5536e2099d8789f8e51_61f19876fb7773f309babd62_dLslnDYmsFl77J11WwIGCh7_-A5YKMy-KSB-PCyf5E6FuvJKFdM8B8-19bPWqYRpvn45cddUFLPFraAHsqIdD_qbC_JHQ5xi8j-7U3xl5S1B2oIg1ltAR74UzS3mvd2O8Dj93aoM.png)\n+\n+At this point we need to sit and wait a few seconds for AWS to create what\u2019s needed, we can click the refresh button to the list on the left until the status says `CREATE_COMPLETE`.\n+\n+![img](https://assets-global.website-files.com/60acbb950c4d66d0ab3e2007/61f2c5530e8a37e3fc5d9d8f_61f198761ad0e7703e31939f_5emBZ5ekR_hdYe1VSsB4d_K7DTConZQaECnBDniEbEaNneZ2eKpKX3aISLr9EmHVhntKPXSAsE82Ln-6m3HvSfuPju7CQOfoDyXTLaTkxMyupeJ4Ws62qQZ8LzyTtZ5LbVufOH7H.png)\n+\n+Once that is done, you can close that tab to go back to the provider creation page on the dashboard. The dashboard should automatically detect that the provider created successfully, and so should the CLI. At this point, go ahead and reply \"Y\" to the question about deploying and we wait a few minutes for this new service to get deployed.\n+\n+## Setting up a provider manually\n+\n+If you already had AWS credentials on your machine and chose \u201cNo\u201d when asked if you wanted to deploy, you still need to setup a Provider. Thankfully to get one setup is pretty easy. Go to app.serverless.com and register an account as described above. Then when you get through to the app listing page, click on \u201corg\u201d on the left, then choose the \u201cproviders\u201d tab and finally \u201cadd\u201d.\n+\n+At this point adding your provider is exactly the same as described above, and once done, you can go back to your service in the CLI. Make sure to `cd` into the services folder then run `serverless deploy`. This will now use your Provider you created to deploy to your AWS account.\n+\n+## Using local AWS credentials\n+\n+Of course, if you don\u2019t want to set-up a provider on a dashboard account, you can use local credentials setup on your own machine. This involves creating a user with the right permissions and adding the credentials on your machine. While we won\u2019t cover how to do that in this guide, we have some [great documentation](https://www.serverless.com/framework/docs/providers/aws/guide/credentials#creating-aws-access-keys) on how to accomplish this.\n+\n+## What have we just done?\n+\n+After a successful deployment you should see, either in the dashboard or on the CLI, that you have an HTTP endpoint you can call. Also, if you open the service we just created in your favourite IDE or text editor and look at the contents of the `serverless.yml`, this is what controls pretty much everything in our service. You will notice a section where the functions you have are defined with events attached to them. Also take note that the code that executes when this HTTP endpoint is called is defined in the `handler.js` file in a function called `hello`. If you edit this file then run `serverless deploy` your changes will be pushed to your AWS account and when you next call that endpoint either in the browser or using curl, you should see your changes reflected:\n+\n+```bash\n+curl [your endpoint address]\n+```\n+\n+## Create a new web API endpoint\n+\n+Now that we have some basics under our belt, let\u2019s expand this further and add some useful endpoints. It would be great to have a POST endpoint so we can add new records to a database. In order to do this we will use an AWS service called DynamoDB that makes having a datastore for Lambda functions quick and easy and very uncomplicated.\n+\n+## Adding a DynamoDB database\n+\n+In order to do this, let\u2019s open `serverless.yml` and paste the following at the end of the file:\n+\n+```yaml\n+resources:\n+  Resources:\n+    CustomerTable:\n+      Type: AWS::DynamoDB::Table\n+      Properties:\n+        AttributeDefinitions:\n+          - AttributeName: primary_key\n+            AttributeType: S\n+        BillingMode: PAY_PER_REQUEST\n+        KeySchema:\n+          - AttributeName: primary_key\n+            KeyType: HASH\n+        TableName: ${self:service}-customerTable-${sls:stage}\n+```\n+\n+And lets create a new file in the same folder as the `serverless.yml` called `createCustomer.js` and add the following code to it:\n+\n+```javascript\n+'use strict';\n+const AWS = require('aws-sdk');\n+\n+module.exports.createCustomer = async (event) => {\n+  const body = JSON.parse(Buffer.from(event.body, 'base64').toString());\n+  const dynamoDb = new AWS.DynamoDB.DocumentClient();\n+  const putParams = {\n+    TableName: process.env.DYNAMODB_CUSTOMER_TABLE,\n+    Item: {\n+      primary_key: body.name,\n+      email: body.email,\n+    },\n+  };\n+  await dynamoDb.put(putParams).promise();\n+\n+  return {\n+    statusCode: 201,\n+  };\n+};\n+```\n+\n+You may have noticed we include an npm module to help us talk to AWS, so lets make sure we install this required npm module as a part of our service with the following command:\n+\n+```bash\n+npm install \u2013save aws-sdk\n+```\n+\n+Note: If you would like this entire project as a reference to clone, you can find this on [GitHub](https://github.com/serverless/tutorial/tree/main/getting-started) but just remember to add your own org and app names to `serverless.yml` to connect to your Serverless Dashboard account before deploying.\n+\n+## Making the database table name available to the function\n+\n+In order for our function to know what table to access, we need some way to make that name available and thankfully Lambda has the concept of environment variables. You can set an environment variable in your `serverless.yml` that is then accessible to the function in code. Under the provider section of your `serverless.yml` add the following:\n+\n+```yaml\n+provider:\n+  environment:\n+    DYNAMODB_CUSTOMER_TABLE: ${self:service}-customerTable-${sls:stage}\n+```\n+\n+In our function code, you may have noticed we access this environment variable with the following: `process.env.DYNAMODB_CUSTOMER_TABLE`. Environment variables become a very powerful way to pass configuration details we need to our Lambda functions.\n+\n+## Setting function permissions\n+\n+While we could go ahead and deploy our changes already (feel free to do so with the command `serverless deploy`), we do need to add one more thing to allow our code to talk to our database. By default, and for good security reasons, AWS requires that we add explicit permissions to allow Lambda functions to access other AWS services. This requires us adding some more configuration to our `serverless.yml`. Within the `provider` block of our `serverless.yml`, make sure you have the following:\n+\n+```yaml\n+provider:\n+  iamRoleStatements:",
        "comment_created_at": "2022-04-28T12:16:45+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "Let's not promote syntax that is no longer supported - it should be using `iam.role.statements`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "786925185",
    "pr_number": 10468,
    "pr_file": "docs/providers/aws/guide/serverless.yml.md",
    "created_at": "2022-01-18T16:21:01+00:00",
    "commented_code": "Here is a list of all available properties in `serverless.yml` when the provider is set to `aws`.\n \n+## Root properties\n+\n ```yml\n # serverless.yml\n \n-service: myService\n+# Service name\n+service: myservice\n \n+# Framework version constraint: '3', '>=2.33', '^2.33'",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "786925185",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10468,
        "pr_file": "docs/providers/aws/guide/serverless.yml.md",
        "discussion_id": "786925185",
        "commented_code": "@@ -16,115 +16,272 @@ layout: Doc\n \n Here is a list of all available properties in `serverless.yml` when the provider is set to `aws`.\n \n+## Root properties\n+\n ```yml\n # serverless.yml\n \n-service: myService\n+# Service name\n+service: myservice\n \n+# Framework version constraint: '3', '>=2.33', '^2.33'",
        "comment_created_at": "2022-01-18T16:21:01+00:00",
        "comment_author": "medikoo",
        "comment_body": "Notation as `>=2.33` is an anti-pattern (as it matches also any major greater than 2), so while it's a valid semver range, I would not list that as an example (there's never a valid reason for such range)",
        "pr_file_module": null
      },
      {
        "comment_id": "791506423",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10468,
        "pr_file": "docs/providers/aws/guide/serverless.yml.md",
        "discussion_id": "786925185",
        "commented_code": "@@ -16,115 +16,272 @@ layout: Doc\n \n Here is a list of all available properties in `serverless.yml` when the provider is set to `aws`.\n \n+## Root properties\n+\n ```yml\n # serverless.yml\n \n-service: myService\n+# Service name\n+service: myservice\n \n+# Framework version constraint: '3', '>=2.33', '^2.33'",
        "comment_created_at": "2022-01-25T09:16:12+00:00",
        "comment_author": "mnapoli",
        "comment_body": "This could be useful especially with v3 when you know your service is compatible with v2 and v3, yet you don't want to force everyone to use either v2 or v3 (e.g. in a team where devs have different versions installed).",
        "pr_file_module": null
      },
      {
        "comment_id": "791511300",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10468,
        "pr_file": "docs/providers/aws/guide/serverless.yml.md",
        "discussion_id": "786925185",
        "commented_code": "@@ -16,115 +16,272 @@ layout: Doc\n \n Here is a list of all available properties in `serverless.yml` when the provider is set to `aws`.\n \n+## Root properties\n+\n ```yml\n # serverless.yml\n \n-service: myService\n+# Service name\n+service: myservice\n \n+# Framework version constraint: '3', '>=2.33', '^2.33'",
        "comment_created_at": "2022-01-25T09:21:42+00:00",
        "comment_author": "medikoo",
        "comment_body": "> This could be useful especially with v3 when you know your service is compatible with v2 and v3\r\n\r\nThat is best expressed with `2 || 3` (so 4, 5 etc are not recognized as supported)",
        "pr_file_module": null
      },
      {
        "comment_id": "791529053",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10468,
        "pr_file": "docs/providers/aws/guide/serverless.yml.md",
        "discussion_id": "786925185",
        "commented_code": "@@ -16,115 +16,272 @@ layout: Doc\n \n Here is a list of all available properties in `serverless.yml` when the provider is set to `aws`.\n \n+## Root properties\n+\n ```yml\n # serverless.yml\n \n-service: myService\n+# Service name\n+service: myservice\n \n+# Framework version constraint: '3', '>=2.33', '^2.33'",
        "comment_created_at": "2022-01-25T09:41:49+00:00",
        "comment_author": "mnapoli",
        "comment_body": "Right, I understand that `^2.67 || 3` is technically better, but it's much simpler and obvious for users to go with `>=2.67`, and it's not that risky since major versions are so far apart in time. The thing is that not everyone is familiar with semver range constraints.",
        "pr_file_module": null
      },
      {
        "comment_id": "791541776",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10468,
        "pr_file": "docs/providers/aws/guide/serverless.yml.md",
        "discussion_id": "786925185",
        "commented_code": "@@ -16,115 +16,272 @@ layout: Doc\n \n Here is a list of all available properties in `serverless.yml` when the provider is set to `aws`.\n \n+## Root properties\n+\n ```yml\n # serverless.yml\n \n-service: myService\n+# Service name\n+service: myservice\n \n+# Framework version constraint: '3', '>=2.33', '^2.33'",
        "comment_created_at": "2022-01-25T09:56:06+00:00",
        "comment_author": "medikoo",
        "comment_body": "> it's not that risky since major versions are so far apart in time.\r\n\r\nIt's risky, and just that is a valid concern imo. It's unlikely for users to revisit the range, then, while many services are destined to be in service for years simply in maintenance mode.\r\n\r\nFor same reason, you never put such a range in packages published on npm. We're giving poor's man advice that way.\r\n\r\nAlso I don't understand the argument that `^2.67 || 3` is more \"hard\" to use. It looks very clean and straightforward to me. \r\n\r\n>  The thing is that not everyone is familiar with semver range constraints.\r\n\r\nIt's exactly why, we should provide a future-proof examples, that will prevent users running into issues, long term.",
        "pr_file_module": null
      }
    ]
  }
]