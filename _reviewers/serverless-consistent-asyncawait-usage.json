[
  {
    "discussion_id": "562658429",
    "pr_number": 8788,
    "pr_file": "lib/utils/createFromTemplate.js",
    "created_at": "2021-01-22T14:14:54+00:00",
    "commented_code": "}\n         resolve(\n           BbPromise.all([\n-            new BbPromise((gitignoreRenameResolve, gitIgnoreRenameReject) => {\n+            new BbPromise(async (gitignoreRenameResolve, gitIgnoreRenameReject) => {\n               const gitignorePath = join(destPath, 'gitignore');\n-              exists(gitignorePath, (hasGitignore) => {\n-                if (!hasGitignore) {\n-                  gitignoreRenameResolve();\n-                  return;\n-                }\n+\n+              try {\n+                await fs.promises.access(gitignorePath);",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "562658429",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8788,
        "pr_file": "lib/utils/createFromTemplate.js",
        "discussion_id": "562658429",
        "commented_code": "@@ -43,18 +44,18 @@ module.exports = (templateName, destPath, options = {}) =>\n         }\n         resolve(\n           BbPromise.all([\n-            new BbPromise((gitignoreRenameResolve, gitIgnoreRenameReject) => {\n+            new BbPromise(async (gitignoreRenameResolve, gitIgnoreRenameReject) => {\n               const gitignorePath = join(destPath, 'gitignore');\n-              exists(gitignorePath, (hasGitignore) => {\n-                if (!hasGitignore) {\n-                  gitignoreRenameResolve();\n-                  return;\n-                }\n+\n+              try {\n+                await fs.promises.access(gitignorePath);",
        "comment_created_at": "2021-01-22T14:14:54+00:00",
        "comment_author": "medikoo",
        "comment_body": "In this scenario we need to go with regular `promise.then` syntax.\r\n\r\nAlternatively we may first refactor this function to async/await (in other PR), and then go back to this PR and rely on async/await",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1139969753",
    "pr_number": 11824,
    "pr_file": "test/unit/lib/plugins/aws/lib/monitor-stack.test.js",
    "created_at": "2023-03-17T09:07:38+00:00",
    "commented_code": "describeStackEventsStub.onCall(2).resolves(updateRollbackEvent);\n       describeStackEventsStub.onCall(3).resolves(updateRollbackComplete);\n \n-      return awsPlugin.monitorStack('update', cfDataMock, { frequency: 10 }).catch((e) => {\n-        let errorMessage = 'An error occurred: ';\n-        errorMessage += 'mochaS3 - Bucket already exists.';\n-        if (e.name !== 'ServerlessError') throw e;\n-        expect(e.name).to.be.equal('ServerlessError');\n-        expect(e.message).to.be.equal(errorMessage);\n-        expect(describeStackEventsStub.callCount).to.be.equal(4);\n-        expect(\n-          describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n-            StackName: cfDataMock.StackId,\n-          })\n-        ).to.be.equal(true);\n-        awsPlugin.provider.request.restore();\n-      });\n+      await expect(awsPlugin.monitorStack('update', cfDataMock, { frequency: 10 }))\n+        .to.eventually.be.rejectedWith(\n+          ServerlessError,\n+          'An error occurred: mochaS3 - Bucket already exists.'\n+        )\n+        .then(() => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1139969753",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11824,
        "pr_file": "test/unit/lib/plugins/aws/lib/monitor-stack.test.js",
        "discussion_id": "1139969753",
        "commented_code": "@@ -443,20 +444,21 @@ describe('monitorStack', () => {\n       describeStackEventsStub.onCall(2).resolves(updateRollbackEvent);\n       describeStackEventsStub.onCall(3).resolves(updateRollbackComplete);\n \n-      return awsPlugin.monitorStack('update', cfDataMock, { frequency: 10 }).catch((e) => {\n-        let errorMessage = 'An error occurred: ';\n-        errorMessage += 'mochaS3 - Bucket already exists.';\n-        if (e.name !== 'ServerlessError') throw e;\n-        expect(e.name).to.be.equal('ServerlessError');\n-        expect(e.message).to.be.equal(errorMessage);\n-        expect(describeStackEventsStub.callCount).to.be.equal(4);\n-        expect(\n-          describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n-            StackName: cfDataMock.StackId,\n-          })\n-        ).to.be.equal(true);\n-        awsPlugin.provider.request.restore();\n-      });\n+      await expect(awsPlugin.monitorStack('update', cfDataMock, { frequency: 10 }))\n+        .to.eventually.be.rejectedWith(\n+          ServerlessError,\n+          'An error occurred: mochaS3 - Bucket already exists.'\n+        )\n+        .then(() => {",
        "comment_created_at": "2023-03-17T09:07:38+00:00",
        "comment_author": "medikoo",
        "comment_body": "Once we refactor it this way, ,let's not use `then`. Below logic can simply follow `awat expect..`\r\n\r\n(and let's apply same in other refactored cases)",
        "pr_file_module": null
      },
      {
        "comment_id": "1139974630",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11824,
        "pr_file": "test/unit/lib/plugins/aws/lib/monitor-stack.test.js",
        "discussion_id": "1139969753",
        "commented_code": "@@ -443,20 +444,21 @@ describe('monitorStack', () => {\n       describeStackEventsStub.onCall(2).resolves(updateRollbackEvent);\n       describeStackEventsStub.onCall(3).resolves(updateRollbackComplete);\n \n-      return awsPlugin.monitorStack('update', cfDataMock, { frequency: 10 }).catch((e) => {\n-        let errorMessage = 'An error occurred: ';\n-        errorMessage += 'mochaS3 - Bucket already exists.';\n-        if (e.name !== 'ServerlessError') throw e;\n-        expect(e.name).to.be.equal('ServerlessError');\n-        expect(e.message).to.be.equal(errorMessage);\n-        expect(describeStackEventsStub.callCount).to.be.equal(4);\n-        expect(\n-          describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n-            StackName: cfDataMock.StackId,\n-          })\n-        ).to.be.equal(true);\n-        awsPlugin.provider.request.restore();\n-      });\n+      await expect(awsPlugin.monitorStack('update', cfDataMock, { frequency: 10 }))\n+        .to.eventually.be.rejectedWith(\n+          ServerlessError,\n+          'An error occurred: mochaS3 - Bucket already exists.'\n+        )\n+        .then(() => {",
        "comment_created_at": "2023-03-17T09:12:34+00:00",
        "comment_author": "sleepwithcoffee",
        "comment_body": "alright, I agree\r\n\r\nusing `await` can reduce nesting and also avoid magical deeply nested promise chain",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "736252541",
    "pr_number": 10108,
    "pr_file": "lib/plugins/aws/package/compile/events/apiGateway/lib/hack/disassociateUsagePlan.js",
    "created_at": "2021-10-26T07:56:06+00:00",
    "commented_code": "'use strict';\n \n const BbPromise = require('bluebird');\n-const _ = require('lodash');\n+const { flattenDeep, get } = require('lodash');\n const { legacy, log } = require('@serverless/utils/log');\n \n module.exports = {\n   async disassociateUsagePlan() {\n     const apiKeys =\n-      _.get(this.serverless.service.provider.apiGateway, 'apiKeys') ||\n+      get(this.serverless.service.provider.apiGateway, 'apiKeys') ||\n       this.serverless.service.provider.apiKeys;\n \n     if (apiKeys && apiKeys.length) {\n       legacy.log('Removing usage plan association...');\n       log.info('Removing usage plan association');\n       const stackName = `${this.provider.naming.getStackName()}`;\n-      return BbPromise.all([\n-        this.provider.request('CloudFormation', 'describeStackResource', {\n-          StackName: stackName,\n-          LogicalResourceId: this.provider.naming.getRestApiLogicalId(),\n-        }),\n+\n+      const [describeStackResource, getUsagePlans] = await BbPromise.all([",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "736252541",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10108,
        "pr_file": "lib/plugins/aws/package/compile/events/apiGateway/lib/hack/disassociateUsagePlan.js",
        "discussion_id": "736252541",
        "commented_code": "@@ -1,55 +1,69 @@\n 'use strict';\n \n const BbPromise = require('bluebird');\n-const _ = require('lodash');\n+const { flattenDeep, get } = require('lodash');\n const { legacy, log } = require('@serverless/utils/log');\n \n module.exports = {\n   async disassociateUsagePlan() {\n     const apiKeys =\n-      _.get(this.serverless.service.provider.apiGateway, 'apiKeys') ||\n+      get(this.serverless.service.provider.apiGateway, 'apiKeys') ||\n       this.serverless.service.provider.apiKeys;\n \n     if (apiKeys && apiKeys.length) {\n       legacy.log('Removing usage plan association...');\n       log.info('Removing usage plan association');\n       const stackName = `${this.provider.naming.getStackName()}`;\n-      return BbPromise.all([\n-        this.provider.request('CloudFormation', 'describeStackResource', {\n-          StackName: stackName,\n-          LogicalResourceId: this.provider.naming.getRestApiLogicalId(),\n-        }),\n+\n+      const [describeStackResource, getUsagePlans] = await BbPromise.all([",
        "comment_created_at": "2021-10-26T07:56:06+00:00",
        "comment_author": "medikoo",
        "comment_body": "As this function stands on old bluebird promises. It'll be great to first prepare PR that refactors this to native promises and async/await (with no logic changes), and then this PR should just focus on functionality in question",
        "pr_file_module": null
      },
      {
        "comment_id": "736263171",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10108,
        "pr_file": "lib/plugins/aws/package/compile/events/apiGateway/lib/hack/disassociateUsagePlan.js",
        "discussion_id": "736252541",
        "commented_code": "@@ -1,55 +1,69 @@\n 'use strict';\n \n const BbPromise = require('bluebird');\n-const _ = require('lodash');\n+const { flattenDeep, get } = require('lodash');\n const { legacy, log } = require('@serverless/utils/log');\n \n module.exports = {\n   async disassociateUsagePlan() {\n     const apiKeys =\n-      _.get(this.serverless.service.provider.apiGateway, 'apiKeys') ||\n+      get(this.serverless.service.provider.apiGateway, 'apiKeys') ||\n       this.serverless.service.provider.apiKeys;\n \n     if (apiKeys && apiKeys.length) {\n       legacy.log('Removing usage plan association...');\n       log.info('Removing usage plan association');\n       const stackName = `${this.provider.naming.getStackName()}`;\n-      return BbPromise.all([\n-        this.provider.request('CloudFormation', 'describeStackResource', {\n-          StackName: stackName,\n-          LogicalResourceId: this.provider.naming.getRestApiLogicalId(),\n-        }),\n+\n+      const [describeStackResource, getUsagePlans] = await BbPromise.all([",
        "comment_created_at": "2021-10-26T08:04:44+00:00",
        "comment_author": "philiiiiiipp",
        "comment_body": "Ok I will look into it some time this week. ",
        "pr_file_module": null
      },
      {
        "comment_id": "736278335",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10108,
        "pr_file": "lib/plugins/aws/package/compile/events/apiGateway/lib/hack/disassociateUsagePlan.js",
        "discussion_id": "736252541",
        "commented_code": "@@ -1,55 +1,69 @@\n 'use strict';\n \n const BbPromise = require('bluebird');\n-const _ = require('lodash');\n+const { flattenDeep, get } = require('lodash');\n const { legacy, log } = require('@serverless/utils/log');\n \n module.exports = {\n   async disassociateUsagePlan() {\n     const apiKeys =\n-      _.get(this.serverless.service.provider.apiGateway, 'apiKeys') ||\n+      get(this.serverless.service.provider.apiGateway, 'apiKeys') ||\n       this.serverless.service.provider.apiKeys;\n \n     if (apiKeys && apiKeys.length) {\n       legacy.log('Removing usage plan association...');\n       log.info('Removing usage plan association');\n       const stackName = `${this.provider.naming.getStackName()}`;\n-      return BbPromise.all([\n-        this.provider.request('CloudFormation', 'describeStackResource', {\n-          StackName: stackName,\n-          LogicalResourceId: this.provider.naming.getRestApiLogicalId(),\n-        }),\n+\n+      const [describeStackResource, getUsagePlans] = await BbPromise.all([",
        "comment_created_at": "2021-10-26T08:23:02+00:00",
        "comment_author": "medikoo",
        "comment_body": "Thank you \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1200148888",
    "pr_number": 11981,
    "pr_file": "lib/utils/download-template-from-repo.js",
    "created_at": "2023-05-22T08:30:09+00:00",
    "commented_code": "if (isPlainGitURL(inputUrl)) {\n       return spawn('git', ['clone', inputUrl, downloadServicePath]).then(() => {\n+        fse.removeSync(path.join(dirName, '/.git'));",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1200148888",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11981,
        "pr_file": "lib/utils/download-template-from-repo.js",
        "discussion_id": "1200148888",
        "commented_code": "@@ -291,6 +291,7 @@ async function downloadTemplateFromRepo(inputUrl, templateName, downloadPath) {\n \n     if (isPlainGitURL(inputUrl)) {\n       return spawn('git', ['clone', inputUrl, downloadServicePath]).then(() => {\n+        fse.removeSync(path.join(dirName, '/.git'));",
        "comment_created_at": "2023-05-22T08:30:09+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's in first PR refactor `downloadTemplateFromRepo` function into async/await, and then introduce this change, but using _async_ fs interface",
        "pr_file_module": null
      },
      {
        "comment_id": "1200539094",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11981,
        "pr_file": "lib/utils/download-template-from-repo.js",
        "discussion_id": "1200148888",
        "commented_code": "@@ -291,6 +291,7 @@ async function downloadTemplateFromRepo(inputUrl, templateName, downloadPath) {\n \n     if (isPlainGitURL(inputUrl)) {\n       return spawn('git', ['clone', inputUrl, downloadServicePath]).then(() => {\n+        fse.removeSync(path.join(dirName, '/.git'));",
        "comment_created_at": "2023-05-22T13:43:45+00:00",
        "comment_author": "bonespiked",
        "comment_body": "will do.  Thanks for note.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1152811161",
    "pr_number": 11871,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/events/websockets/lib/authorizers.test.js",
    "created_at": "2023-03-30T06:54:48+00:00",
    "commented_code": "expect(resources).to.deep.equal({});\n     });\n   });\n+\n+  describe('external authorizer', () => {\n+    it('should add a permission resource for the external authorizer function', () => {\n+      return runServerless({\n+        fixture: 'websocket-external-auth',\n+        command: 'package',\n+      }).then(({ cfTemplate }) => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1152811161",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11871,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/websockets/lib/authorizers.test.js",
        "discussion_id": "1152811161",
        "commented_code": "@@ -146,4 +147,23 @@ describe('#compileAuthorizers()', () => {\n       expect(resources).to.deep.equal({});\n     });\n   });\n+\n+  describe('external authorizer', () => {\n+    it('should add a permission resource for the external authorizer function', () => {\n+      return runServerless({\n+        fixture: 'websocket-external-auth',\n+        command: 'package',\n+      }).then(({ cfTemplate }) => {",
        "comment_created_at": "2023-03-30T06:54:48+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's stick to async/await",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1153292436",
    "pr_number": 11875,
    "pr_file": "lib/plugins/plugin/list.js",
    "created_at": "2023-03-30T13:47:38+00:00",
    "commented_code": "};\n \n     this.hooks = {\n-      'plugin:list:list': async () => BbPromise.bind(this).then(this.list),\n+      'plugin:list:list': async () => this.list(),\n     };\n   }\n \n   async list() {\n-    return BbPromise.bind(this)\n-      .then(this.getPlugins)\n+    return Promise.resolve(this)",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1153292436",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11875,
        "pr_file": "lib/plugins/plugin/list.js",
        "discussion_id": "1153292436",
        "commented_code": "@@ -22,13 +21,13 @@ class PluginList {\n     };\n \n     this.hooks = {\n-      'plugin:list:list': async () => BbPromise.bind(this).then(this.list),\n+      'plugin:list:list': async () => this.list(),\n     };\n   }\n \n   async list() {\n-    return BbPromise.bind(this)\n-      .then(this.getPlugins)\n+    return Promise.resolve(this)",
        "comment_created_at": "2023-03-30T13:47:38+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's remove `Promise.resolve(this)` it's ineffective",
        "pr_file_module": null
      },
      {
        "comment_id": "1153299056",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11875,
        "pr_file": "lib/plugins/plugin/list.js",
        "discussion_id": "1153292436",
        "commented_code": "@@ -22,13 +21,13 @@ class PluginList {\n     };\n \n     this.hooks = {\n-      'plugin:list:list': async () => BbPromise.bind(this).then(this.list),\n+      'plugin:list:list': async () => this.list(),\n     };\n   }\n \n   async list() {\n-    return BbPromise.bind(this)\n-      .then(this.getPlugins)\n+    return Promise.resolve(this)",
        "comment_created_at": "2023-03-30T13:51:58+00:00",
        "comment_author": "sleepwithcoffee",
        "comment_body": "We still need that to pass `this` context to the following functions, either that or:\r\n\r\n```\r\nreturn this.getPlugins()\r\n      .then(this.display(plugins).bind(this));\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1153303438",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11875,
        "pr_file": "lib/plugins/plugin/list.js",
        "discussion_id": "1153292436",
        "commented_code": "@@ -22,13 +21,13 @@ class PluginList {\n     };\n \n     this.hooks = {\n-      'plugin:list:list': async () => BbPromise.bind(this).then(this.list),\n+      'plugin:list:list': async () => this.list(),\n     };\n   }\n \n   async list() {\n-    return BbPromise.bind(this)\n-      .then(this.getPlugins)\n+    return Promise.resolve(this)",
        "comment_created_at": "2023-03-30T13:54:54+00:00",
        "comment_author": "medikoo",
        "comment_body": "It's not needed, you can write same as:\r\n\r\n```javascript\r\nasync () {\r\n  return this.getPlugins().then((plugins) => this.display(plugins));\r\n}\r\n```\r\n\r\nand actually we can already refactor to async await as:\r\n\r\n```javascript\r\nasync  list() {\r\n  await this.display(await this.getPlugins());\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1153398855",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11875,
        "pr_file": "lib/plugins/plugin/list.js",
        "discussion_id": "1153292436",
        "commented_code": "@@ -22,13 +21,13 @@ class PluginList {\n     };\n \n     this.hooks = {\n-      'plugin:list:list': async () => BbPromise.bind(this).then(this.list),\n+      'plugin:list:list': async () => this.list(),\n     };\n   }\n \n   async list() {\n-    return BbPromise.bind(this)\n-      .then(this.getPlugins)\n+    return Promise.resolve(this)",
        "comment_created_at": "2023-03-30T14:59:56+00:00",
        "comment_author": "sleepwithcoffee",
        "comment_body": "thanks for pointing it out, it was so obvious that I didn't think about it",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1147359328",
    "pr_number": 11853,
    "pr_file": "test/unit/lib/plugins/aws/utils/credentials.test.js",
    "created_at": "2023-03-24T09:59:34+00:00",
    "commented_code": "`aws_secret_access_key = ${profile2.secretAccessKey}`,\n     ].join('\n')}\n`;\n \n-    return new BbPromise((resolve, reject) => {\n-      outputFile(credentialsFilePath, credentialsFileContent, (error) => {\n-        if (error) reject(error);\n-        else resolve();\n-      });\n-    }).then(() =>\n-      credentials\n-        .resolveFileProfiles()\n-        .then((resolvedProfiles) => expect(resolvedProfiles).to.deep.equal(profiles))\n+    const resolvedProfiles = await outputFile(credentialsFilePath, credentialsFileContent).then(",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1147359328",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11853,
        "pr_file": "test/unit/lib/plugins/aws/utils/credentials.test.js",
        "discussion_id": "1147359328",
        "commented_code": "@@ -57,16 +56,11 @@ describe('#credentials', () => {\n       `aws_secret_access_key = ${profile2.secretAccessKey}`,\n     ].join('\\n')}\\n`;\n \n-    return new BbPromise((resolve, reject) => {\n-      outputFile(credentialsFilePath, credentialsFileContent, (error) => {\n-        if (error) reject(error);\n-        else resolve();\n-      });\n-    }).then(() =>\n-      credentials\n-        .resolveFileProfiles()\n-        .then((resolvedProfiles) => expect(resolvedProfiles).to.deep.equal(profiles))\n+    const resolvedProfiles = await outputFile(credentialsFilePath, credentialsFileContent).then(",
        "comment_created_at": "2023-03-24T09:59:34+00:00",
        "comment_author": "medikoo",
        "comment_body": "If we're refactoring to async/await, let's get rid of `.then`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "555734879",
    "pr_number": 8742,
    "pr_file": "lib/Serverless.js",
    "created_at": "2021-01-12T12:29:25+00:00",
    "commented_code": "}\n   }\n \n-  run() {\n+  async run() {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "555734879",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8742,
        "pr_file": "lib/Serverless.js",
        "discussion_id": "555734879",
        "commented_code": "@@ -168,7 +168,7 @@ class Serverless {\n     }\n   }\n \n-  run() {\n+  async run() {",
        "comment_created_at": "2021-01-12T12:29:25+00:00",
        "comment_author": "medikoo",
        "comment_body": "It'll be nice to fully refactor this method to async/await (just with other commit or PR)",
        "pr_file_module": null
      },
      {
        "comment_id": "555747172",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8742,
        "pr_file": "lib/Serverless.js",
        "discussion_id": "555734879",
        "commented_code": "@@ -168,7 +168,7 @@ class Serverless {\n     }\n   }\n \n-  run() {\n+  async run() {",
        "comment_created_at": "2021-01-12T12:51:35+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "totally, I didn't want to introduce it as a part of this PR, but another commit makes sense, I'll do it :+1: ",
        "pr_file_module": null
      },
      {
        "comment_id": "555748618",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8742,
        "pr_file": "lib/Serverless.js",
        "discussion_id": "555734879",
        "commented_code": "@@ -168,7 +168,7 @@ class Serverless {\n     }\n   }\n \n-  run() {\n+  async run() {",
        "comment_created_at": "2021-01-12T12:54:02+00:00",
        "comment_author": "medikoo",
        "comment_body": "Yes, usually in such cases I think it's good to _precede_ addition of new functionality with commit or PR that refactors updated functionality to async/await.\r\n\r\nAdding async/await syntax to not refactored parts looks confusing.",
        "pr_file_module": null
      },
      {
        "comment_id": "555753756",
        "repo_full_name": "serverless/serverless",
        "pr_number": 8742,
        "pr_file": "lib/Serverless.js",
        "discussion_id": "555734879",
        "commented_code": "@@ -168,7 +168,7 @@ class Serverless {\n     }\n   }\n \n-  run() {\n+  async run() {",
        "comment_created_at": "2021-01-12T13:02:58+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "Added that as a part of separate PR (which should be merged first): https://github.com/serverless/serverless/pull/8749",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "771994380",
    "pr_number": 10384,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/validate.test.js",
    "created_at": "2021-12-19T20:04:31+00:00",
    "commented_code": "expect(() => awsCompileApigEvents.validate()).not.to.throw(Error);\n   });\n \n+  it('should throw when using a CUSTOM authorizer without an authorizer id', async () => {\n+    await expect(\n+      runServerless({\n+        fixture: 'function',\n+        command: 'package',\n+        configExt: {\n+          functions: {\n+            first: {\n+              handler: 'index.handler',\n+              events: [\n+                {\n+                  http: {\n+                    method: 'POST',\n+                    path: '/custom-authorizer',\n+                    integration: 'lambda-proxy',\n+                    authorizer: {\n+                      type: 'CUSTOM',\n+                    },\n+                  },\n+                },\n+              ],\n+            },\n+          },\n+        },\n+      })\n+    ).to.be.eventually.rejected.and.have.property(\n+      'code',\n+      'API_GATEWAY_MISSING_AUTHORIZER_NAME_OR_ARN'\n+    );\n+  });\n+\n+  it('should not throw when using CUSTOM authorizer with an authorizer id', async () => {\n+    await runServerless({\n+      fixture: 'function',\n+      command: 'package',\n+      configExt: {\n+        functions: {\n+          first: {\n+            handler: 'index.handler',\n+            events: [\n+              {\n+                http: {\n+                  method: 'POST',\n+                  path: '/custom-authorizer',\n+                  integration: 'lambda-proxy',\n+                  authorizer: {\n+                    type: 'CUSTOM',\n+                    authorizerId: 'MyAuthorizerId',\n+                  },\n+                },\n+              },\n+            ],\n+          },\n+        },\n+      },\n+    }).then(({ awsNaming: naming, cfTemplate }) => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "771994380",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10384,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/validate.test.js",
        "discussion_id": "771994380",
        "commented_code": "@@ -235,6 +235,69 @@ describe('#validate()', () => {\n     expect(() => awsCompileApigEvents.validate()).not.to.throw(Error);\n   });\n \n+  it('should throw when using a CUSTOM authorizer without an authorizer id', async () => {\n+    await expect(\n+      runServerless({\n+        fixture: 'function',\n+        command: 'package',\n+        configExt: {\n+          functions: {\n+            first: {\n+              handler: 'index.handler',\n+              events: [\n+                {\n+                  http: {\n+                    method: 'POST',\n+                    path: '/custom-authorizer',\n+                    integration: 'lambda-proxy',\n+                    authorizer: {\n+                      type: 'CUSTOM',\n+                    },\n+                  },\n+                },\n+              ],\n+            },\n+          },\n+        },\n+      })\n+    ).to.be.eventually.rejected.and.have.property(\n+      'code',\n+      'API_GATEWAY_MISSING_AUTHORIZER_NAME_OR_ARN'\n+    );\n+  });\n+\n+  it('should not throw when using CUSTOM authorizer with an authorizer id', async () => {\n+    await runServerless({\n+      fixture: 'function',\n+      command: 'package',\n+      configExt: {\n+        functions: {\n+          first: {\n+            handler: 'index.handler',\n+            events: [\n+              {\n+                http: {\n+                  method: 'POST',\n+                  path: '/custom-authorizer',\n+                  integration: 'lambda-proxy',\n+                  authorizer: {\n+                    type: 'CUSTOM',\n+                    authorizerId: 'MyAuthorizerId',\n+                  },\n+                },\n+              },\n+            ],\n+          },\n+        },\n+      },\n+    }).then(({ awsNaming: naming, cfTemplate }) => {",
        "comment_created_at": "2021-12-19T20:04:31+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "Let's use `async/await` instead of `then`",
        "pr_file_module": null
      }
    ]
  }
]