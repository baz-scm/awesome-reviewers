[
  {
    "discussion_id": "1243904653",
    "pr_number": 12030,
    "pr_file": "lib/plugins/aws/package/compile/events/schedule.js",
    "created_at": "2023-06-27T15:01:01+00:00",
    "commented_code": "Name = event.schedule.name;\n               timezone = event.schedule.timezone;\n               Description = event.schedule.description;\n-              roleArn = {\n-                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'],\n-              };\n+\n+              const functionLogicalId = this.provider.naming.getLambdaLogicalId(functionName);\n+              const functionResource = resources[functionLogicalId];\n+\n+              roleArn = resources.IamRoleLambdaExecution\n+                ? { 'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'] }\n+                : functionResource.Properties.Role;",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1243904653",
        "repo_full_name": "serverless/serverless",
        "pr_number": 12030,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule.js",
        "discussion_id": "1243904653",
        "commented_code": "@@ -136,9 +136,13 @@ class AwsCompileScheduledEvents {\n               Name = event.schedule.name;\n               timezone = event.schedule.timezone;\n               Description = event.schedule.description;\n-              roleArn = {\n-                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'],\n-              };\n+\n+              const functionLogicalId = this.provider.naming.getLambdaLogicalId(functionName);\n+              const functionResource = resources[functionLogicalId];\n+\n+              roleArn = resources.IamRoleLambdaExecution\n+                ? { 'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'] }\n+                : functionResource.Properties.Role;",
        "comment_created_at": "2023-06-27T15:01:01+00:00",
        "comment_author": "medikoo",
        "comment_body": "Can't we unconditionally set it as:\r\n\r\n```javascript\r\nroleArn = functionResource.Properties.Role;\r\n```\r\n\r\n?",
        "pr_file_module": null
      },
      {
        "comment_id": "1243908586",
        "repo_full_name": "serverless/serverless",
        "pr_number": 12030,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule.js",
        "discussion_id": "1243904653",
        "commented_code": "@@ -136,9 +136,13 @@ class AwsCompileScheduledEvents {\n               Name = event.schedule.name;\n               timezone = event.schedule.timezone;\n               Description = event.schedule.description;\n-              roleArn = {\n-                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'],\n-              };\n+\n+              const functionLogicalId = this.provider.naming.getLambdaLogicalId(functionName);\n+              const functionResource = resources[functionLogicalId];\n+\n+              roleArn = resources.IamRoleLambdaExecution\n+                ? { 'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'] }\n+                : functionResource.Properties.Role;",
        "comment_created_at": "2023-06-27T15:03:20+00:00",
        "comment_author": "tie624",
        "comment_body": "I was thinking that if there was another function that uses the default execution role, then the role will be created and we can use it here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1243911506",
        "repo_full_name": "serverless/serverless",
        "pr_number": 12030,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule.js",
        "discussion_id": "1243904653",
        "commented_code": "@@ -136,9 +136,13 @@ class AwsCompileScheduledEvents {\n               Name = event.schedule.name;\n               timezone = event.schedule.timezone;\n               Description = event.schedule.description;\n-              roleArn = {\n-                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'],\n-              };\n+\n+              const functionLogicalId = this.provider.naming.getLambdaLogicalId(functionName);\n+              const functionResource = resources[functionLogicalId];\n+\n+              roleArn = resources.IamRoleLambdaExecution\n+                ? { 'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'] }\n+                : functionResource.Properties.Role;",
        "comment_created_at": "2023-06-27T15:05:07+00:00",
        "comment_author": "medikoo",
        "comment_body": "But here we're just referencing some external role, and creating one, right? Shouldn't we then always reference same role to which function is attached (?)",
        "pr_file_module": null
      },
      {
        "comment_id": "1243919821",
        "repo_full_name": "serverless/serverless",
        "pr_number": 12030,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule.js",
        "discussion_id": "1243904653",
        "commented_code": "@@ -136,9 +136,13 @@ class AwsCompileScheduledEvents {\n               Name = event.schedule.name;\n               timezone = event.schedule.timezone;\n               Description = event.schedule.description;\n-              roleArn = {\n-                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'],\n-              };\n+\n+              const functionLogicalId = this.provider.naming.getLambdaLogicalId(functionName);\n+              const functionResource = resources[functionLogicalId];\n+\n+              roleArn = resources.IamRoleLambdaExecution\n+                ? { 'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'] }\n+                : functionResource.Properties.Role;",
        "comment_created_at": "2023-06-27T15:09:47+00:00",
        "comment_author": "tie624",
        "comment_body": "Let's say we have 2 functions. 1 uses a custom role and the 1 does not have role defined and will use the default execution role. Then we want to use the default execution role for all scheduler schedules because it will be created have the right permissions. \r\n\r\nIf both functions use the custom role, then the default execution role will not be created. Then the scheduler will then use the same role as the function and the warning will be displayed.\r\n\r\nThe point is to always use the default execution role if it's being created.",
        "pr_file_module": null
      },
      {
        "comment_id": "1243925314",
        "repo_full_name": "serverless/serverless",
        "pr_number": 12030,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule.js",
        "discussion_id": "1243904653",
        "commented_code": "@@ -136,9 +136,13 @@ class AwsCompileScheduledEvents {\n               Name = event.schedule.name;\n               timezone = event.schedule.timezone;\n               Description = event.schedule.description;\n-              roleArn = {\n-                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'],\n-              };\n+\n+              const functionLogicalId = this.provider.naming.getLambdaLogicalId(functionName);\n+              const functionResource = resources[functionLogicalId];\n+\n+              roleArn = resources.IamRoleLambdaExecution\n+                ? { 'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'] }\n+                : functionResource.Properties.Role;",
        "comment_created_at": "2023-06-27T15:13:29+00:00",
        "comment_author": "medikoo",
        "comment_body": "What is the downside of always using the role to which function is attached? We anyway create different scheduler resource for each configured event",
        "pr_file_module": null
      },
      {
        "comment_id": "1243942995",
        "repo_full_name": "serverless/serverless",
        "pr_number": 12030,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule.js",
        "discussion_id": "1243904653",
        "commented_code": "@@ -136,9 +136,13 @@ class AwsCompileScheduledEvents {\n               Name = event.schedule.name;\n               timezone = event.schedule.timezone;\n               Description = event.schedule.description;\n-              roleArn = {\n-                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'],\n-              };\n+\n+              const functionLogicalId = this.provider.naming.getLambdaLogicalId(functionName);\n+              const functionResource = resources[functionLogicalId];\n+\n+              roleArn = resources.IamRoleLambdaExecution\n+                ? { 'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'] }\n+                : functionResource.Properties.Role;",
        "comment_created_at": "2023-06-27T15:25:44+00:00",
        "comment_author": "tie624",
        "comment_body": "The warning is only shown if the default execution role doesn't exist. So one of the downsides is that the warning won't show if we use the custom role in the function for the scheduler, but the default execution role exists.\r\n\r\nIf we use the default execution role, then the user does not need to set up all the correct permissions on the custom role.",
        "pr_file_module": null
      },
      {
        "comment_id": "1243956507",
        "repo_full_name": "serverless/serverless",
        "pr_number": 12030,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule.js",
        "discussion_id": "1243904653",
        "commented_code": "@@ -136,9 +136,13 @@ class AwsCompileScheduledEvents {\n               Name = event.schedule.name;\n               timezone = event.schedule.timezone;\n               Description = event.schedule.description;\n-              roleArn = {\n-                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'],\n-              };\n+\n+              const functionLogicalId = this.provider.naming.getLambdaLogicalId(functionName);\n+              const functionResource = resources[functionLogicalId];\n+\n+              roleArn = resources.IamRoleLambdaExecution\n+                ? { 'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'] }\n+                : functionResource.Properties.Role;",
        "comment_created_at": "2023-06-27T15:35:15+00:00",
        "comment_author": "medikoo",
        "comment_body": "It indeed may feel more convenient to simply attach to role which may not require further customisations.\r\n\r\nYet logically I think event, with no exceptions, should work in context of a role which is assigned to function.\r\nIt can be assumed as security breach if suddenly we rely on role that's dedicated for function A, when configuring the resource for function B.\r\n\r\nMany users would prefer to have IAM permissions isolated and configured per function (see https://github.com/serverless/serverless/issues/4313) So now attempting here to reach out of role that's used for function doesn't feel as right direction\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1243980245",
        "repo_full_name": "serverless/serverless",
        "pr_number": 12030,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule.js",
        "discussion_id": "1243904653",
        "commented_code": "@@ -136,9 +136,13 @@ class AwsCompileScheduledEvents {\n               Name = event.schedule.name;\n               timezone = event.schedule.timezone;\n               Description = event.schedule.description;\n-              roleArn = {\n-                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'],\n-              };\n+\n+              const functionLogicalId = this.provider.naming.getLambdaLogicalId(functionName);\n+              const functionResource = resources[functionLogicalId];\n+\n+              roleArn = resources.IamRoleLambdaExecution\n+                ? { 'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'] }\n+                : functionResource.Properties.Role;",
        "comment_created_at": "2023-06-27T15:51:03+00:00",
        "comment_author": "tie624",
        "comment_body": "I will change it back to what I had before, to use the same role as the function. \r\n\r\nHowever, it's my opinion that the scheduler role should not be the same as the Lambda execution role and should be customizable just like for functions. But we can save that for a future issue.",
        "pr_file_module": null
      },
      {
        "comment_id": "1243984286",
        "repo_full_name": "serverless/serverless",
        "pr_number": 12030,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule.js",
        "discussion_id": "1243904653",
        "commented_code": "@@ -136,9 +136,13 @@ class AwsCompileScheduledEvents {\n               Name = event.schedule.name;\n               timezone = event.schedule.timezone;\n               Description = event.schedule.description;\n-              roleArn = {\n-                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'],\n-              };\n+\n+              const functionLogicalId = this.provider.naming.getLambdaLogicalId(functionName);\n+              const functionResource = resources[functionLogicalId];\n+\n+              roleArn = resources.IamRoleLambdaExecution\n+                ? { 'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn'] }\n+                : functionResource.Properties.Role;",
        "comment_created_at": "2023-06-27T15:54:07+00:00",
        "comment_author": "medikoo",
        "comment_body": "> However, it's my opinion that the scheduler role should not be the same as the Lambda execution role and should be customizable just like for functions.\r\n\r\nIf there's a use case for it, I think we can make it customisable, but otherwise I believe with no exceptions it should fall back to same role that's used by function",
        "pr_file_module": null
      }
    ]
  }
]