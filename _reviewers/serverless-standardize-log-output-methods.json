[
  {
    "discussion_id": "426488945",
    "pr_number": 7741,
    "pr_file": "lib/utils/logDeprecation.js",
    "created_at": "2020-05-18T09:25:10+00:00",
    "commented_code": "+'use strict';\n+const chalk = require('chalk');\n+const memoizee = require('memoizee');\n+\n+const loggedDeprecations = {};\n+\n+function consoleLog(...args) {\n+  console.log(...args); // eslint-disable-line no-console\n+}\n+\n+function extractCodes(codesStr) {\n+  if (!codesStr) {\n+    return [];\n+  }\n+  return codesStr.split(',').reduce((acc, code) => {\n+    acc[code] = true;\n+    return acc;\n+  }, {});\n+}\n+\n+const prepareCodes = memoizee((serviceConfigCodesStr, envCodesStr) => {\n+  const serviceConfigCodes = extractCodes(serviceConfigCodesStr);\n+  const envCodes = extractCodes(envCodesStr);\n+  const disabledCodes = Object.assign({}, envCodes, serviceConfigCodes);\n+  return disabledCodes;\n+});\n+\n+function writeDeprecation(message, docURL) {\n+  consoleLog(`${chalk.red(message)}\n${chalk.dim(`More Info: ${docURL}`)}`);",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "426488945",
        "repo_full_name": "serverless/serverless",
        "pr_number": 7741,
        "pr_file": "lib/utils/logDeprecation.js",
        "discussion_id": "426488945",
        "commented_code": "@@ -0,0 +1,44 @@\n+'use strict';\n+const chalk = require('chalk');\n+const memoizee = require('memoizee');\n+\n+const loggedDeprecations = {};\n+\n+function consoleLog(...args) {\n+  console.log(...args); // eslint-disable-line no-console\n+}\n+\n+function extractCodes(codesStr) {\n+  if (!codesStr) {\n+    return [];\n+  }\n+  return codesStr.split(',').reduce((acc, code) => {\n+    acc[code] = true;\n+    return acc;\n+  }, {});\n+}\n+\n+const prepareCodes = memoizee((serviceConfigCodesStr, envCodesStr) => {\n+  const serviceConfigCodes = extractCodes(serviceConfigCodesStr);\n+  const envCodes = extractCodes(envCodesStr);\n+  const disabledCodes = Object.assign({}, envCodes, serviceConfigCodes);\n+  return disabledCodes;\n+});\n+\n+function writeDeprecation(message, docURL) {\n+  consoleLog(`${chalk.red(message)}\\n${chalk.dim(`More Info: ${docURL}`)}`);",
        "comment_created_at": "2020-05-18T09:25:10+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's use `process.stdout.write` instead of `console.log` (it allow us to implement this without fooling linter).\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "426545961",
        "repo_full_name": "serverless/serverless",
        "pr_number": 7741,
        "pr_file": "lib/utils/logDeprecation.js",
        "discussion_id": "426488945",
        "commented_code": "@@ -0,0 +1,44 @@\n+'use strict';\n+const chalk = require('chalk');\n+const memoizee = require('memoizee');\n+\n+const loggedDeprecations = {};\n+\n+function consoleLog(...args) {\n+  console.log(...args); // eslint-disable-line no-console\n+}\n+\n+function extractCodes(codesStr) {\n+  if (!codesStr) {\n+    return [];\n+  }\n+  return codesStr.split(',').reduce((acc, code) => {\n+    acc[code] = true;\n+    return acc;\n+  }, {});\n+}\n+\n+const prepareCodes = memoizee((serviceConfigCodesStr, envCodesStr) => {\n+  const serviceConfigCodes = extractCodes(serviceConfigCodesStr);\n+  const envCodes = extractCodes(envCodesStr);\n+  const disabledCodes = Object.assign({}, envCodes, serviceConfigCodes);\n+  return disabledCodes;\n+});\n+\n+function writeDeprecation(message, docURL) {\n+  consoleLog(`${chalk.red(message)}\\n${chalk.dim(`More Info: ${docURL}`)}`);",
        "comment_created_at": "2020-05-18T11:06:12+00:00",
        "comment_author": "AhmedFat7y",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "426491250",
    "pr_number": 7741,
    "pr_file": "lib/utils/logDeprecation.js",
    "created_at": "2020-05-18T09:28:42+00:00",
    "commented_code": "+'use strict';\n+const chalk = require('chalk');\n+const memoizee = require('memoizee');\n+\n+const loggedDeprecations = {};\n+\n+function consoleLog(...args) {\n+  console.log(...args); // eslint-disable-line no-console\n+}\n+\n+function extractCodes(codesStr) {\n+  if (!codesStr) {\n+    return [];\n+  }\n+  return codesStr.split(',').reduce((acc, code) => {\n+    acc[code] = true;\n+    return acc;\n+  }, {});\n+}\n+\n+const prepareCodes = memoizee((serviceConfigCodesStr, envCodesStr) => {\n+  const serviceConfigCodes = extractCodes(serviceConfigCodesStr);\n+  const envCodes = extractCodes(envCodesStr);\n+  const disabledCodes = Object.assign({}, envCodes, serviceConfigCodes);\n+  return disabledCodes;\n+});\n+\n+function writeDeprecation(message, docURL) {\n+  consoleLog(`${chalk.red(message)}\n${chalk.dim(`More Info: ${docURL}`)}`);",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "426491250",
        "repo_full_name": "serverless/serverless",
        "pr_number": 7741,
        "pr_file": "lib/utils/logDeprecation.js",
        "discussion_id": "426491250",
        "commented_code": "@@ -0,0 +1,44 @@\n+'use strict';\n+const chalk = require('chalk');\n+const memoizee = require('memoizee');\n+\n+const loggedDeprecations = {};\n+\n+function consoleLog(...args) {\n+  console.log(...args); // eslint-disable-line no-console\n+}\n+\n+function extractCodes(codesStr) {\n+  if (!codesStr) {\n+    return [];\n+  }\n+  return codesStr.split(',').reduce((acc, code) => {\n+    acc[code] = true;\n+    return acc;\n+  }, {});\n+}\n+\n+const prepareCodes = memoizee((serviceConfigCodesStr, envCodesStr) => {\n+  const serviceConfigCodes = extractCodes(serviceConfigCodesStr);\n+  const envCodes = extractCodes(envCodesStr);\n+  const disabledCodes = Object.assign({}, envCodes, serviceConfigCodes);\n+  return disabledCodes;\n+});\n+\n+function writeDeprecation(message, docURL) {\n+  consoleLog(`${chalk.red(message)}\\n${chalk.dim(`More Info: ${docURL}`)}`);",
        "comment_created_at": "2020-05-18T09:28:42+00:00",
        "comment_author": "medikoo",
        "comment_body": "Also I think better format would be:\r\n\r\n```javascript\r\n`Serverless: ${chalk.red(`Deprecation Warning: ${message}`)\\n           ${chalk.dim(`More Info: ttps://www.serverless.com/framework/docs/deprecations/#${code}`)}}`\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "426545957",
        "repo_full_name": "serverless/serverless",
        "pr_number": 7741,
        "pr_file": "lib/utils/logDeprecation.js",
        "discussion_id": "426491250",
        "commented_code": "@@ -0,0 +1,44 @@\n+'use strict';\n+const chalk = require('chalk');\n+const memoizee = require('memoizee');\n+\n+const loggedDeprecations = {};\n+\n+function consoleLog(...args) {\n+  console.log(...args); // eslint-disable-line no-console\n+}\n+\n+function extractCodes(codesStr) {\n+  if (!codesStr) {\n+    return [];\n+  }\n+  return codesStr.split(',').reduce((acc, code) => {\n+    acc[code] = true;\n+    return acc;\n+  }, {});\n+}\n+\n+const prepareCodes = memoizee((serviceConfigCodesStr, envCodesStr) => {\n+  const serviceConfigCodes = extractCodes(serviceConfigCodesStr);\n+  const envCodes = extractCodes(envCodesStr);\n+  const disabledCodes = Object.assign({}, envCodes, serviceConfigCodes);\n+  return disabledCodes;\n+});\n+\n+function writeDeprecation(message, docURL) {\n+  consoleLog(`${chalk.red(message)}\\n${chalk.dim(`More Info: ${docURL}`)}`);",
        "comment_created_at": "2020-05-18T11:06:12+00:00",
        "comment_author": "AhmedFat7y",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "427943340",
    "pr_number": 7741,
    "pr_file": "lib/utils/logDeprecation.js",
    "created_at": "2020-05-20T11:43:15+00:00",
    "commented_code": "+'use strict';\n+const chalk = require('chalk');\n+const memoizee = require('memoizee');\n+\n+const disabledCodesByEnv = extractCodes(process.env.SLS_DEPRECATION_DISABLE);\n+\n+const loggedDeprecations = new Set();\n+\n+function extractCodes(codesStr) {\n+  if (!codesStr) {\n+    return new Set();\n+  }\n+  return new Set(codesStr.split(','));\n+}\n+\n+const resolveDeprecatedByService = memoizee((serviceConfig = {}) => {\n+  let disabledDeprecations = [];\n+  if (typeof serviceConfig.disabledDeprecations === 'string') {\n+    disabledDeprecations = [serviceConfig.disabledDeprecations];\n+  } else {\n+    disabledDeprecations = serviceConfig.disabledDeprecations || [];\n+  }\n+  return new Set(disabledDeprecations);\n+});\n+\n+function writeDeprecation(code, message) {\n+  process.stdout.write(\n+    [\n+      `Serverless: ${chalk.red(`Deprecation Warning: ${message}`)}`,\n+      `            ${chalk.dim(\n+        `More Info: https://www.serverless.com/framework/docs/deprecations/#${code}`\n+      )}}`,\n+    ].join('\n')\n+  );",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "427943340",
        "repo_full_name": "serverless/serverless",
        "pr_number": 7741,
        "pr_file": "lib/utils/logDeprecation.js",
        "discussion_id": "427943340",
        "commented_code": "@@ -0,0 +1,51 @@\n+'use strict';\n+const chalk = require('chalk');\n+const memoizee = require('memoizee');\n+\n+const disabledCodesByEnv = extractCodes(process.env.SLS_DEPRECATION_DISABLE);\n+\n+const loggedDeprecations = new Set();\n+\n+function extractCodes(codesStr) {\n+  if (!codesStr) {\n+    return new Set();\n+  }\n+  return new Set(codesStr.split(','));\n+}\n+\n+const resolveDeprecatedByService = memoizee((serviceConfig = {}) => {\n+  let disabledDeprecations = [];\n+  if (typeof serviceConfig.disabledDeprecations === 'string') {\n+    disabledDeprecations = [serviceConfig.disabledDeprecations];\n+  } else {\n+    disabledDeprecations = serviceConfig.disabledDeprecations || [];\n+  }\n+  return new Set(disabledDeprecations);\n+});\n+\n+function writeDeprecation(code, message) {\n+  process.stdout.write(\n+    [\n+      `Serverless: ${chalk.red(`Deprecation Warning: ${message}`)}`,\n+      `            ${chalk.dim(\n+        `More Info: https://www.serverless.com/framework/docs/deprecations/#${code}`\n+      )}}`,\n+    ].join('\\n')\n+  );",
        "comment_created_at": "2020-05-20T11:43:15+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's also add new line at the end (in case of `process.stdout.write` they're not added as it's with `console.log`",
        "pr_file_module": null
      },
      {
        "comment_id": "428245056",
        "repo_full_name": "serverless/serverless",
        "pr_number": 7741,
        "pr_file": "lib/utils/logDeprecation.js",
        "discussion_id": "427943340",
        "commented_code": "@@ -0,0 +1,51 @@\n+'use strict';\n+const chalk = require('chalk');\n+const memoizee = require('memoizee');\n+\n+const disabledCodesByEnv = extractCodes(process.env.SLS_DEPRECATION_DISABLE);\n+\n+const loggedDeprecations = new Set();\n+\n+function extractCodes(codesStr) {\n+  if (!codesStr) {\n+    return new Set();\n+  }\n+  return new Set(codesStr.split(','));\n+}\n+\n+const resolveDeprecatedByService = memoizee((serviceConfig = {}) => {\n+  let disabledDeprecations = [];\n+  if (typeof serviceConfig.disabledDeprecations === 'string') {\n+    disabledDeprecations = [serviceConfig.disabledDeprecations];\n+  } else {\n+    disabledDeprecations = serviceConfig.disabledDeprecations || [];\n+  }\n+  return new Set(disabledDeprecations);\n+});\n+\n+function writeDeprecation(code, message) {\n+  process.stdout.write(\n+    [\n+      `Serverless: ${chalk.red(`Deprecation Warning: ${message}`)}`,\n+      `            ${chalk.dim(\n+        `More Info: https://www.serverless.com/framework/docs/deprecations/#${code}`\n+      )}}`,\n+    ].join('\\n')\n+  );",
        "comment_created_at": "2020-05-20T19:05:49+00:00",
        "comment_author": "AhmedFat7y",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "816052865",
    "pr_number": 10768,
    "pr_file": "lib/plugins/aws/utils/format-lambda-log-event.js",
    "created_at": "2022-02-28T16:30:42+00:00",
    "commented_code": "if (msg.startsWith('REPORT')) {\n     const splitted = msg.split('\\t');\n-    // Replace REPORT with END and filter out RequestId\n-    msg = `END ${splitted.slice(1).join('\\t')}`;\n+    const durationItem = splitted[1];\n+    const maxMemoryUsedItem = splitted[4];\n+    const initDurationItem = splitted[5];\n+    // Simplify the output and trim out unnecessary information\n+    msg = `END ${durationItem} (init:${initDurationItem.split(':')[1]}) ${maxMemoryUsedItem.slice(",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "816052865",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10768,
        "pr_file": "lib/plugins/aws/utils/format-lambda-log-event.js",
        "discussion_id": "816052865",
        "commented_code": "@@ -16,8 +16,13 @@ module.exports = (msgParam) => {\n \n   if (msg.startsWith('REPORT')) {\n     const splitted = msg.split('\\t');\n-    // Replace REPORT with END and filter out RequestId\n-    msg = `END ${splitted.slice(1).join('\\t')}`;\n+    const durationItem = splitted[1];\n+    const maxMemoryUsedItem = splitted[4];\n+    const initDurationItem = splitted[5];\n+    // Simplify the output and trim out unnecessary information\n+    msg = `END ${durationItem} (init:${initDurationItem.split(':')[1]}) ${maxMemoryUsedItem.slice(",
        "comment_created_at": "2022-02-28T16:30:42+00:00",
        "comment_author": "mnapoli",
        "comment_body": "I just tested it out and noted 2 things:\r\n\r\n```\r\nEND Duration: 96.76 ms (init:undefined) Memory Used: 77 MB\r\n```\r\n\r\nThere should be a space after `init:`, and we should support cases where there's no init duration. Sorry for not catching this earlier!",
        "pr_file_module": null
      },
      {
        "comment_id": "816067887",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10768,
        "pr_file": "lib/plugins/aws/utils/format-lambda-log-event.js",
        "discussion_id": "816052865",
        "commented_code": "@@ -16,8 +16,13 @@ module.exports = (msgParam) => {\n \n   if (msg.startsWith('REPORT')) {\n     const splitted = msg.split('\\t');\n-    // Replace REPORT with END and filter out RequestId\n-    msg = `END ${splitted.slice(1).join('\\t')}`;\n+    const durationItem = splitted[1];\n+    const maxMemoryUsedItem = splitted[4];\n+    const initDurationItem = splitted[5];\n+    // Simplify the output and trim out unnecessary information\n+    msg = `END ${durationItem} (init:${initDurationItem.split(':')[1]}) ${maxMemoryUsedItem.slice(",
        "comment_created_at": "2022-02-28T16:47:42+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "ah that's a bummer, I didn't catch it too, I'll push a fix asap",
        "pr_file_module": null
      }
    ]
  }
]