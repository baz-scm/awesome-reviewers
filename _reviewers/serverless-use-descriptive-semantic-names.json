[
  {
    "discussion_id": "730808953",
    "pr_number": 10067,
    "pr_file": "lib/plugins/aws/package/lib/resolveIamRoles.js",
    "created_at": "2021-10-18T11:03:48+00:00",
    "commented_code": "+'use strict';\n+\n+const _ = require('lodash');\n+const deepSortObjectByKey = require('../../../../utils/deepSortObjectByKey');\n+\n+module.exports = {\n+  resolveIamRoles() {\n+    const iamRoleLambdaExecution =\n+      this.serverless.service.provider.compiledCloudFormationTemplate.Resources[\n+        this.provider.naming.getRoleLogicalId()\n+      ];\n+\n+    if (!iamRoleLambdaExecution) {\n+      return;\n+    }\n+\n+    const context = { iamRoleLambdaExecution };\n+\n+    this.resolveServicePrincipals(context);\n+    this.resolveStatements(context);\n+    this.pushManagedPolicies(context);\n+  },\n+\n+  resolveServicePrincipals({ iamRoleLambdaExecution }) {\n+    const lambdaAssumeStatement =\n+      iamRoleLambdaExecution.Properties.AssumeRolePolicyDocument.Statement.find((statement) =>\n+        statement.Principal.Service.includes('lambda.amazonaws.com')\n+      );\n+\n+    lambdaAssumeStatement.Principal.Service = Array.from(\n+      new Set([\n+        ...lambdaAssumeStatement.Principal.Service,\n+        ...this.provider.iamConfig.servicePrincipals,\n+        ..._.flatten(\n+          Object.values(this.serverless.service.functions).map(({ iamConfig }) => [\n+            ...iamConfig.servicePrincipals,\n+          ])\n+        ),\n+      ])\n+    );\n+  },\n+\n+  resolveStatements({ iamRoleLambdaExecution }) {\n+    const statements = [\n+      ...iamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement,\n+      ...this.provider.iamConfig.policyStatements,\n+      ..._.flatten(\n+        Object.values(this.serverless.service.functions).map(\n+          ({ iamConfig }) => iamConfig.policyStatements\n+        )\n+      ),\n+    ];\n+\n+    iamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement = this.mergeStatements(\n+      _.uniqWith(statements, _.isEqual)\n+    );\n+  },\n+\n+  pushManagedPolicies({ iamRoleLambdaExecution }) {\n+    const managedPolicies = [\n+      ...(iamRoleLambdaExecution.Properties.ManagedPolicyArns || []),\n+      ...this.provider.iamConfig.managedPolicies,\n+      ..._.flatten(\n+        Object.values(this.serverless.service.functions).map(\n+          ({ iamConfig }) => iamConfig.managedPolicies\n+        )\n+      ),\n+    ];\n+\n+    if (!managedPolicies.length) return;\n+\n+    iamRoleLambdaExecution.Properties.ManagedPolicyArns = _.uniqWith(managedPolicies, _.isEqual);\n+  },\n+\n+  mergeStatements(statements) {\n+    const groups = _.groupBy(statements, (statement) => {\n+      const { Resource, ...keySegments } = statement; // eslint-disable-line\n+      const sortedKeySegments = deepSortObjectByKey(keySegments);\n+      Object.values(sortedKeySegments).forEach((keySegement) => {\n+        if (Array.isArray(keySegement)) {\n+          keySegement.sort();\n+        }\n+      });\n+      return JSON.stringify(sortedKeySegments);\n+    });\n+\n+    const merged = [];\n+\n+    Object.values(groups).forEach((statements_) => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "730808953",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10067,
        "pr_file": "lib/plugins/aws/package/lib/resolveIamRoles.js",
        "discussion_id": "730808953",
        "commented_code": "@@ -0,0 +1,107 @@\n+'use strict';\n+\n+const _ = require('lodash');\n+const deepSortObjectByKey = require('../../../../utils/deepSortObjectByKey');\n+\n+module.exports = {\n+  resolveIamRoles() {\n+    const iamRoleLambdaExecution =\n+      this.serverless.service.provider.compiledCloudFormationTemplate.Resources[\n+        this.provider.naming.getRoleLogicalId()\n+      ];\n+\n+    if (!iamRoleLambdaExecution) {\n+      return;\n+    }\n+\n+    const context = { iamRoleLambdaExecution };\n+\n+    this.resolveServicePrincipals(context);\n+    this.resolveStatements(context);\n+    this.pushManagedPolicies(context);\n+  },\n+\n+  resolveServicePrincipals({ iamRoleLambdaExecution }) {\n+    const lambdaAssumeStatement =\n+      iamRoleLambdaExecution.Properties.AssumeRolePolicyDocument.Statement.find((statement) =>\n+        statement.Principal.Service.includes('lambda.amazonaws.com')\n+      );\n+\n+    lambdaAssumeStatement.Principal.Service = Array.from(\n+      new Set([\n+        ...lambdaAssumeStatement.Principal.Service,\n+        ...this.provider.iamConfig.servicePrincipals,\n+        ..._.flatten(\n+          Object.values(this.serverless.service.functions).map(({ iamConfig }) => [\n+            ...iamConfig.servicePrincipals,\n+          ])\n+        ),\n+      ])\n+    );\n+  },\n+\n+  resolveStatements({ iamRoleLambdaExecution }) {\n+    const statements = [\n+      ...iamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement,\n+      ...this.provider.iamConfig.policyStatements,\n+      ..._.flatten(\n+        Object.values(this.serverless.service.functions).map(\n+          ({ iamConfig }) => iamConfig.policyStatements\n+        )\n+      ),\n+    ];\n+\n+    iamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement = this.mergeStatements(\n+      _.uniqWith(statements, _.isEqual)\n+    );\n+  },\n+\n+  pushManagedPolicies({ iamRoleLambdaExecution }) {\n+    const managedPolicies = [\n+      ...(iamRoleLambdaExecution.Properties.ManagedPolicyArns || []),\n+      ...this.provider.iamConfig.managedPolicies,\n+      ..._.flatten(\n+        Object.values(this.serverless.service.functions).map(\n+          ({ iamConfig }) => iamConfig.managedPolicies\n+        )\n+      ),\n+    ];\n+\n+    if (!managedPolicies.length) return;\n+\n+    iamRoleLambdaExecution.Properties.ManagedPolicyArns = _.uniqWith(managedPolicies, _.isEqual);\n+  },\n+\n+  mergeStatements(statements) {\n+    const groups = _.groupBy(statements, (statement) => {\n+      const { Resource, ...keySegments } = statement; // eslint-disable-line\n+      const sortedKeySegments = deepSortObjectByKey(keySegments);\n+      Object.values(sortedKeySegments).forEach((keySegement) => {\n+        if (Array.isArray(keySegement)) {\n+          keySegement.sort();\n+        }\n+      });\n+      return JSON.stringify(sortedKeySegments);\n+    });\n+\n+    const merged = [];\n+\n+    Object.values(groups).forEach((statements_) => {",
        "comment_created_at": "2021-10-18T11:03:48+00:00",
        "comment_author": "medikoo",
        "comment_body": "What's the reason for trailing `_` in the name?\r\n\r\nIf intention is to escape collision with top level var. Let's simply give more specific name, e.g. `groupStatements`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "730826851",
    "pr_number": 10067,
    "pr_file": "test/utils/iam.js",
    "created_at": "2021-10-18T11:29:21+00:00",
    "commented_code": "+'use strict';\n+\n+const chai = require('chai');\n+const { isMergeablePolicyStatement } = require('../../lib/plugins/aws/package/lib/utils');\n+\n+const expect = chai.expect;\n+\n+module.exports = {\n+  // Confirm that `statement` is reflected in `statements`\n+  expectToIncludeStatement: (statements, statement) => {\n+    const statement_ = statements.find((el) => isMergeablePolicyStatement(el, statement)) || {};",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "730826851",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10067,
        "pr_file": "test/utils/iam.js",
        "discussion_id": "730826851",
        "commented_code": "@@ -0,0 +1,19 @@\n+'use strict';\n+\n+const chai = require('chai');\n+const { isMergeablePolicyStatement } = require('../../lib/plugins/aws/package/lib/utils');\n+\n+const expect = chai.expect;\n+\n+module.exports = {\n+  // Confirm that `statement` is reflected in `statements`\n+  expectToIncludeStatement: (statements, statement) => {\n+    const statement_ = statements.find((el) => isMergeablePolicyStatement(el, statement)) || {};",
        "comment_created_at": "2021-10-18T11:29:21+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's not create variables with trailing `_`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "731015086",
    "pr_number": 10067,
    "pr_file": "lib/plugins/aws/package/lib/resolveIamRoles.js",
    "created_at": "2021-10-18T14:53:57+00:00",
    "commented_code": "+'use strict';\n+\n+const _ = require('lodash');\n+\n+module.exports = {\n+  resolveIamRoles() {\n+    const iamRoleLambdaExecution =\n+      this.serverless.service.provider.compiledCloudFormationTemplate.Resources[\n+        this.provider.naming.getRoleLogicalId()\n+      ];\n+\n+    if (!iamRoleLambdaExecution) {\n+      return;\n+    }\n+\n+    const context = { iamRoleLambdaExecution };\n+\n+    this.resolveServicePrincipals(context);\n+    this.resolveStatements(context);\n+    this.pushManagedPolicies(context);\n+  },\n+\n+  resolveServicePrincipals({ iamRoleLambdaExecution }) {\n+    const lambdaAssumeStatement =\n+      iamRoleLambdaExecution.Properties.AssumeRolePolicyDocument.Statement.find((statement) =>\n+        statement.Principal.Service.includes('lambda.amazonaws.com')\n+      );\n+\n+    lambdaAssumeStatement.Principal.Service = Array.from(\n+      new Set([\n+        ...lambdaAssumeStatement.Principal.Service,\n+        ...this.provider.iamConfig.servicePrincipals,\n+        ..._.flatten(\n+          Object.values(this.serverless.service.functions).map(({ iamConfig }) => [\n+            ...iamConfig.servicePrincipals,\n+          ])\n+        ),\n+      ])\n+    );\n+  },\n+\n+  resolveStatements({ iamRoleLambdaExecution }) {\n+    const statements = [\n+      ...iamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement,\n+      ...this.provider.iamConfig.policyStatements,\n+      ..._.flatten(\n+        Object.values(this.serverless.service.functions).map(\n+          ({ iamConfig }) => iamConfig.policyStatements\n+        )\n+      ),\n+    ];\n+\n+    const filteredStatements = statements.filter(\n+      ({ Resource }) => Resource && (Array.isArray(Resource) ? Resource.length : true)\n+    );\n+\n+    iamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement = this.mergeStatements(\n+      _.uniqWith(filteredStatements, _.isEqual)\n+    );\n+  },\n+\n+  pushManagedPolicies({ iamRoleLambdaExecution }) {\n+    const managedPolicies = [\n+      ...(iamRoleLambdaExecution.Properties.ManagedPolicyArns || []),\n+      ...this.provider.iamConfig.managedPolicies,\n+      ..._.flatten(\n+        Object.values(this.serverless.service.functions).map(\n+          ({ iamConfig }) => iamConfig.managedPolicies\n+        )\n+      ),\n+    ];\n+\n+    if (!managedPolicies.length) return;\n+\n+    iamRoleLambdaExecution.Properties.ManagedPolicyArns = _.uniqWith(managedPolicies, _.isEqual);\n+  },\n+\n+  mergeStatements(statements) {\n+    const groups = _.groupBy(statements, ({ Effect, Action, NotAction }) => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "731015086",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10067,
        "pr_file": "lib/plugins/aws/package/lib/resolveIamRoles.js",
        "discussion_id": "731015086",
        "commented_code": "@@ -0,0 +1,110 @@\n+'use strict';\n+\n+const _ = require('lodash');\n+\n+module.exports = {\n+  resolveIamRoles() {\n+    const iamRoleLambdaExecution =\n+      this.serverless.service.provider.compiledCloudFormationTemplate.Resources[\n+        this.provider.naming.getRoleLogicalId()\n+      ];\n+\n+    if (!iamRoleLambdaExecution) {\n+      return;\n+    }\n+\n+    const context = { iamRoleLambdaExecution };\n+\n+    this.resolveServicePrincipals(context);\n+    this.resolveStatements(context);\n+    this.pushManagedPolicies(context);\n+  },\n+\n+  resolveServicePrincipals({ iamRoleLambdaExecution }) {\n+    const lambdaAssumeStatement =\n+      iamRoleLambdaExecution.Properties.AssumeRolePolicyDocument.Statement.find((statement) =>\n+        statement.Principal.Service.includes('lambda.amazonaws.com')\n+      );\n+\n+    lambdaAssumeStatement.Principal.Service = Array.from(\n+      new Set([\n+        ...lambdaAssumeStatement.Principal.Service,\n+        ...this.provider.iamConfig.servicePrincipals,\n+        ..._.flatten(\n+          Object.values(this.serverless.service.functions).map(({ iamConfig }) => [\n+            ...iamConfig.servicePrincipals,\n+          ])\n+        ),\n+      ])\n+    );\n+  },\n+\n+  resolveStatements({ iamRoleLambdaExecution }) {\n+    const statements = [\n+      ...iamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement,\n+      ...this.provider.iamConfig.policyStatements,\n+      ..._.flatten(\n+        Object.values(this.serverless.service.functions).map(\n+          ({ iamConfig }) => iamConfig.policyStatements\n+        )\n+      ),\n+    ];\n+\n+    const filteredStatements = statements.filter(\n+      ({ Resource }) => Resource && (Array.isArray(Resource) ? Resource.length : true)\n+    );\n+\n+    iamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement = this.mergeStatements(\n+      _.uniqWith(filteredStatements, _.isEqual)\n+    );\n+  },\n+\n+  pushManagedPolicies({ iamRoleLambdaExecution }) {\n+    const managedPolicies = [\n+      ...(iamRoleLambdaExecution.Properties.ManagedPolicyArns || []),\n+      ...this.provider.iamConfig.managedPolicies,\n+      ..._.flatten(\n+        Object.values(this.serverless.service.functions).map(\n+          ({ iamConfig }) => iamConfig.managedPolicies\n+        )\n+      ),\n+    ];\n+\n+    if (!managedPolicies.length) return;\n+\n+    iamRoleLambdaExecution.Properties.ManagedPolicyArns = _.uniqWith(managedPolicies, _.isEqual);\n+  },\n+\n+  mergeStatements(statements) {\n+    const groups = _.groupBy(statements, ({ Effect, Action, NotAction }) => {",
        "comment_created_at": "2021-10-18T14:53:57+00:00",
        "comment_author": "medikoo",
        "comment_body": "Ideally, if we do not use uppercase variable names for not constructors.\r\n\r\nI know it's a tad of inconvenient here, but it'll be less confusing (by first glance, `Effect` suggests we deal with class constructor while it's not the case)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "731016031",
    "pr_number": 10067,
    "pr_file": "test/utils/iam.js",
    "created_at": "2021-10-18T14:54:51+00:00",
    "commented_code": "+'use strict';\n+\n+const _ = require('lodash');\n+const chai = require('chai');\n+\n+const expect = chai.expect;\n+\n+module.exports = {\n+  // Confirm that `statement` is reflected in `statements`\n+  expectToIncludeStatement: (statements, statement) => {\n+    const matchingStatement =\n+      statements.find((el) => _areMergeablePolicyStatements(el, statement)) || {};\n+\n+    const toArray = (value) => {\n+      return Array.isArray(value) ? [...value] : [value];\n+    };\n+\n+    expect(toArray(matchingStatement.Resource)).to.deep.include.members(\n+      toArray(statement.Resource)\n+    );\n+  },\n+};\n+\n+const _areMergeablePolicyStatements = (a, b) => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "731016031",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10067,
        "pr_file": "test/utils/iam.js",
        "discussion_id": "731016031",
        "commented_code": "@@ -0,0 +1,34 @@\n+'use strict';\n+\n+const _ = require('lodash');\n+const chai = require('chai');\n+\n+const expect = chai.expect;\n+\n+module.exports = {\n+  // Confirm that `statement` is reflected in `statements`\n+  expectToIncludeStatement: (statements, statement) => {\n+    const matchingStatement =\n+      statements.find((el) => _areMergeablePolicyStatements(el, statement)) || {};\n+\n+    const toArray = (value) => {\n+      return Array.isArray(value) ? [...value] : [value];\n+    };\n+\n+    expect(toArray(matchingStatement.Resource)).to.deep.include.members(\n+      toArray(statement.Resource)\n+    );\n+  },\n+};\n+\n+const _areMergeablePolicyStatements = (a, b) => {",
        "comment_created_at": "2021-10-18T14:54:51+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's not use `_` prefixes and postfixes",
        "pr_file_module": null
      },
      {
        "comment_id": "731017619",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10067,
        "pr_file": "test/utils/iam.js",
        "discussion_id": "731016031",
        "commented_code": "@@ -0,0 +1,34 @@\n+'use strict';\n+\n+const _ = require('lodash');\n+const chai = require('chai');\n+\n+const expect = chai.expect;\n+\n+module.exports = {\n+  // Confirm that `statement` is reflected in `statements`\n+  expectToIncludeStatement: (statements, statement) => {\n+    const matchingStatement =\n+      statements.find((el) => _areMergeablePolicyStatements(el, statement)) || {};\n+\n+    const toArray = (value) => {\n+      return Array.isArray(value) ? [...value] : [value];\n+    };\n+\n+    expect(toArray(matchingStatement.Resource)).to.deep.include.members(\n+      toArray(statement.Resource)\n+    );\n+  },\n+};\n+\n+const _areMergeablePolicyStatements = (a, b) => {",
        "comment_created_at": "2021-10-18T14:56:28+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's rename it to `areDuplicateStatements` (mergeable suggests, whether it's possible to merge them with some other statement set, and that feels ok for any statement)",
        "pr_file_module": null
      },
      {
        "comment_id": "732786223",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10067,
        "pr_file": "test/utils/iam.js",
        "discussion_id": "731016031",
        "commented_code": "@@ -0,0 +1,34 @@\n+'use strict';\n+\n+const _ = require('lodash');\n+const chai = require('chai');\n+\n+const expect = chai.expect;\n+\n+module.exports = {\n+  // Confirm that `statement` is reflected in `statements`\n+  expectToIncludeStatement: (statements, statement) => {\n+    const matchingStatement =\n+      statements.find((el) => _areMergeablePolicyStatements(el, statement)) || {};\n+\n+    const toArray = (value) => {\n+      return Array.isArray(value) ? [...value] : [value];\n+    };\n+\n+    expect(toArray(matchingStatement.Resource)).to.deep.include.members(\n+      toArray(statement.Resource)\n+    );\n+  },\n+};\n+\n+const _areMergeablePolicyStatements = (a, b) => {",
        "comment_created_at": "2021-10-20T13:37:36+00:00",
        "comment_author": "issea1015",
        "comment_body": "@medikoo Always thanks! for sharing reasonings",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1202318734",
    "pr_number": 11980,
    "pr_file": "lib/plugins/aws/package/lib/save-compiled-template.js",
    "created_at": "2023-05-23T13:19:13+00:00",
    "commented_code": "compiledTemplateFileName\n     );\n \n-    this.serverless.utils.writeFileSync(\n-      compiledTemplateFilePath,\n-      this.serverless.service.provider.compiledCloudFormationTemplate\n-    );\n+    const minify = this.options['minify-template'];",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1202318734",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11980,
        "pr_file": "lib/plugins/aws/package/lib/save-compiled-template.js",
        "discussion_id": "1202318734",
        "commented_code": "@@ -12,9 +13,12 @@ module.exports = {\n       compiledTemplateFileName\n     );\n \n-    this.serverless.utils.writeFileSync(\n-      compiledTemplateFilePath,\n-      this.serverless.service.provider.compiledCloudFormationTemplate\n-    );\n+    const minify = this.options['minify-template'];",
        "comment_created_at": "2023-05-23T13:19:13+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's name this variable `shouldMinify`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1087777145",
    "pr_number": 11707,
    "pr_file": "lib/plugins/aws/package/compile/events/schedule.js",
    "created_at": "2023-01-26T12:15:50+00:00",
    "commented_code": "let InputTransformer;\n             let Name;\n             let Description;\n+            let Method;",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1087777145",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11707,
        "pr_file": "lib/plugins/aws/package/compile/events/schedule.js",
        "discussion_id": "1087777145",
        "commented_code": "@@ -92,6 +96,7 @@ class AwsCompileScheduledEvents {\n             let InputTransformer;\n             let Name;\n             let Description;\n+            let Method;",
        "comment_created_at": "2023-01-26T12:15:50+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's use lower case.\r\n\r\nI know it'll be inconsistent with other var names, but it's other var names that should be renamed (in JS var starting with capital, suggests function constructor, so it's highly confusing).\r\n\r\nI'll be happy to take in other PR a refactor that renames all those vars to lowercase",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1130628243",
    "pr_number": 11782,
    "pr_file": "lib/cli/interactive-setup/console-instrument.js",
    "created_at": "2023-03-09T08:15:33+00:00",
    "commented_code": "+'use strict';",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1130628243",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11782,
        "pr_file": "lib/cli/interactive-setup/console-instrument.js",
        "discussion_id": "1130628243",
        "commented_code": "@@ -0,0 +1,202 @@\n+'use strict';",
        "comment_created_at": "2023-03-09T08:15:33+00:00",
        "comment_author": "medikoo",
        "comment_body": "Maybe let's name this step `console-enable-dev-mode` ? \"Instrument\" feels very general.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1135763462",
    "pr_number": 11782,
    "pr_file": "lib/cli/interactive-setup/index.js",
    "created_at": "2023-03-14T15:42:30+00:00",
    "commented_code": "}\n   }\n \n+  if (options.dev && initialContext.isInServiceContext) {\n+    context.isConsole = true;\n+    context.launchDev = true;",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1135763462",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11782,
        "pr_file": "lib/cli/interactive-setup/index.js",
        "discussion_id": "1135763462",
        "commented_code": "@@ -63,6 +65,11 @@ module.exports = async (context) => {\n     }\n   }\n \n+  if (options.dev && initialContext.isInServiceContext) {\n+    context.isConsole = true;\n+    context.launchDev = true;",
        "comment_created_at": "2023-03-14T15:42:30+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's stick to convention where booleans are names as questions. So, as we have `isConsole` (for general console integration) maybe  we should have `isConsoleDevMode` for dev mode integration.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "915157196",
    "pr_number": 11201,
    "pr_file": "lib/plugins/aws/package/compile/events/cognito-user-pool.js",
    "created_at": "2022-07-06T18:52:29+00:00",
    "commented_code": "trigger: { enum: validTriggerSources },\n         existing: { type: 'boolean' },\n         forceDeploy: { type: 'boolean' },\n+        kmsKeyId: {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "915157196",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11201,
        "pr_file": "lib/plugins/aws/package/compile/events/cognito-user-pool.js",
        "discussion_id": "915157196",
        "commented_code": "@@ -40,6 +43,18 @@ class AwsCompileCognitoUserPoolEvents {\n         trigger: { enum: validTriggerSources },\n         existing: { type: 'boolean' },\n         forceDeploy: { type: 'boolean' },\n+        kmsKeyId: {",
        "comment_created_at": "2022-07-06T18:52:29+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "If it's an arn, maybe we should call it `kmsKeyArn`? Also, we already have a definition for ARN of KMS key format in `provider.js` called `awsKmsKey`",
        "pr_file_module": null
      },
      {
        "comment_id": "915226216",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11201,
        "pr_file": "lib/plugins/aws/package/compile/events/cognito-user-pool.js",
        "discussion_id": "915157196",
        "commented_code": "@@ -40,6 +43,18 @@ class AwsCompileCognitoUserPoolEvents {\n         trigger: { enum: validTriggerSources },\n         existing: { type: 'boolean' },\n         forceDeploy: { type: 'boolean' },\n+        kmsKeyId: {",
        "comment_created_at": "2022-07-06T20:25:05+00:00",
        "comment_author": "AustinMathuw",
        "comment_body": "I will check this out.",
        "pr_file_module": null
      },
      {
        "comment_id": "915940415",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11201,
        "pr_file": "lib/plugins/aws/package/compile/events/cognito-user-pool.js",
        "discussion_id": "915157196",
        "commented_code": "@@ -40,6 +43,18 @@ class AwsCompileCognitoUserPoolEvents {\n         trigger: { enum: validTriggerSources },\n         existing: { type: 'boolean' },\n         forceDeploy: { type: 'boolean' },\n+        kmsKeyId: {",
        "comment_created_at": "2022-07-07T14:26:58+00:00",
        "comment_author": "AustinMathuw",
        "comment_body": "@pgrzesik I agree with changing the name to kmsKeyArn, however, AWS refers to this value as `KMSKeyID`. Should we go against the naming convention?\r\n\r\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-lambdaconfig.html#cfn-cognito-userpool-lambdaconfig-kmskeyid",
        "pr_file_module": null
      },
      {
        "comment_id": "916733563",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11201,
        "pr_file": "lib/plugins/aws/package/compile/events/cognito-user-pool.js",
        "discussion_id": "915157196",
        "commented_code": "@@ -40,6 +43,18 @@ class AwsCompileCognitoUserPoolEvents {\n         trigger: { enum: validTriggerSources },\n         existing: { type: 'boolean' },\n         forceDeploy: { type: 'boolean' },\n+        kmsKeyId: {",
        "comment_created_at": "2022-07-08T11:36:41+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "oh, in that case maybe let's stay in line with AWS suggestions",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "853432225",
    "pr_number": 10931,
    "pr_file": "lib/plugins/aws/provider.js",
    "created_at": "2022-04-19T19:50:39+00:00",
    "commented_code": "vpc: { $ref: '#/definitions/awsLambdaVpcConfig' },\n             vpcEndpointIds: { $ref: '#/definitions/awsCfArrayInstruction' },\n             versionFunctions: { $ref: '#/definitions/awsLambdaVersioning' },\n+            websockets: {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "853432225",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10931,
        "pr_file": "lib/plugins/aws/provider.js",
        "discussion_id": "853432225",
        "commented_code": "@@ -1199,6 +1199,13 @@ class AwsProvider {\n             vpc: { $ref: '#/definitions/awsLambdaVpcConfig' },\n             vpcEndpointIds: { $ref: '#/definitions/awsCfArrayInstruction' },\n             versionFunctions: { $ref: '#/definitions/awsLambdaVersioning' },\n+            websockets: {",
        "comment_created_at": "2022-04-19T19:50:39+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "Let's use `provider.websocket` instead of `provider.websockets` to be consistent with the event name",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "857776783",
    "pr_number": 11005,
    "pr_file": "test/unit/commands/plugin-install.test.js",
    "created_at": "2022-04-25T15:47:23+00:00",
    "commented_code": "});\n     expect(serverlessFileObj.plugins).to.include(pluginName);\n   });\n+\n+  it('should not add plugin to serverless file if it is already present in configuration but configured behind a variable', async () => {\n+    const installPlugin = proxyquire('../../../commands/plugin-install', {\n+      'child-process-ext/spawn': sinon.fake(),\n+    });\n+\n+    const fixture = await fixturesEngine.setup('function', {\n+      configExt: {\n+        plugins: ['${self:custom.pluginName}'],\n+        custom: {\n+          pluginName,\n+        },\n+      },\n+    });\n+\n+    const configuration = fixture.serviceConfig;\n+\n+    // Simulate that the variable has been resolved\n+    configuration.plugins = [pluginName];\n+    const sDir = fixture.servicePath;",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "857776783",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11005,
        "pr_file": "test/unit/commands/plugin-install.test.js",
        "discussion_id": "857776783",
        "commented_code": "@@ -59,4 +59,43 @@ describe('test/unit/commands/plugin-install.test.js', async () => {\n     });\n     expect(serverlessFileObj.plugins).to.include(pluginName);\n   });\n+\n+  it('should not add plugin to serverless file if it is already present in configuration but configured behind a variable', async () => {\n+    const installPlugin = proxyquire('../../../commands/plugin-install', {\n+      'child-process-ext/spawn': sinon.fake(),\n+    });\n+\n+    const fixture = await fixturesEngine.setup('function', {\n+      configExt: {\n+        plugins: ['${self:custom.pluginName}'],\n+        custom: {\n+          pluginName,\n+        },\n+      },\n+    });\n+\n+    const configuration = fixture.serviceConfig;\n+\n+    // Simulate that the variable has been resolved\n+    configuration.plugins = [pluginName];\n+    const sDir = fixture.servicePath;",
        "comment_created_at": "2022-04-25T15:47:23+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's use meaningful names, so `serviceDir` instead of `sDir` (when reading the code later, it's hard to assume  what `sDir` is about)",
        "pr_file_module": null
      },
      {
        "comment_id": "857783894",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11005,
        "pr_file": "test/unit/commands/plugin-install.test.js",
        "discussion_id": "857776783",
        "commented_code": "@@ -59,4 +59,43 @@ describe('test/unit/commands/plugin-install.test.js', async () => {\n     });\n     expect(serverlessFileObj.plugins).to.include(pluginName);\n   });\n+\n+  it('should not add plugin to serverless file if it is already present in configuration but configured behind a variable', async () => {\n+    const installPlugin = proxyquire('../../../commands/plugin-install', {\n+      'child-process-ext/spawn': sinon.fake(),\n+    });\n+\n+    const fixture = await fixturesEngine.setup('function', {\n+      configExt: {\n+        plugins: ['${self:custom.pluginName}'],\n+        custom: {\n+          pluginName,\n+        },\n+      },\n+    });\n+\n+    const configuration = fixture.serviceConfig;\n+\n+    // Simulate that the variable has been resolved\n+    configuration.plugins = [pluginName];\n+    const sDir = fixture.servicePath;",
        "comment_created_at": "2022-04-25T15:53:33+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "I've shortened the name here on purpose because otherwise it was shadowing `serviceDir` from upper scope - I'll think of something better",
        "pr_file_module": null
      },
      {
        "comment_id": "857787236",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11005,
        "pr_file": "test/unit/commands/plugin-install.test.js",
        "discussion_id": "857776783",
        "commented_code": "@@ -59,4 +59,43 @@ describe('test/unit/commands/plugin-install.test.js', async () => {\n     });\n     expect(serverlessFileObj.plugins).to.include(pluginName);\n   });\n+\n+  it('should not add plugin to serverless file if it is already present in configuration but configured behind a variable', async () => {\n+    const installPlugin = proxyquire('../../../commands/plugin-install', {\n+      'child-process-ext/spawn': sinon.fake(),\n+    });\n+\n+    const fixture = await fixturesEngine.setup('function', {\n+      configExt: {\n+        plugins: ['${self:custom.pluginName}'],\n+        custom: {\n+          pluginName,\n+        },\n+      },\n+    });\n+\n+    const configuration = fixture.serviceConfig;\n+\n+    // Simulate that the variable has been resolved\n+    configuration.plugins = [pluginName];\n+    const sDir = fixture.servicePath;",
        "comment_created_at": "2022-04-25T15:56:58+00:00",
        "comment_author": "medikoo",
        "comment_body": "I think the problem then is, that this test is included in `describe` of which `before` job is not relevant to it?\r\n\r\nIn such case, let's introduce two nested independent describes. \r\n\r\nAlso I think `installPlugin` can be reused among all of them",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "831204558",
    "pr_number": 10845,
    "pr_file": "lib/plugins/aws/package/compile/functions.js",
    "created_at": "2022-03-21T14:57:43+00:00",
    "commented_code": "cfResources[this.provider.naming.getLambdaEventConfigLogicalId(functionName)] = resource;\n   }\n \n+  getDestinationsArn(destinationsProperty) {\n+    if (typeof destinationsProperty === 'object') {\n+      return destinationsProperty.arn;\n+    }\n+    return destinationsProperty.startsWith('arn:')\n+      ? destinationsProperty\n+      : this.provider.resolveFunctionArn(destinationsProperty);\n+  }\n+\n   // Memoized in a constructor\n   ensureTargetExecutionPermission(functionAddress) {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "831204558",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10845,
        "pr_file": "lib/plugins/aws/package/compile/functions.js",
        "discussion_id": "831204558",
        "commented_code": "@@ -650,38 +648,60 @@ class AwsCompileFunctions {\n     cfResources[this.provider.naming.getLambdaEventConfigLogicalId(functionName)] = resource;\n   }\n \n+  getDestinationsArn(destinationsProperty) {\n+    if (typeof destinationsProperty === 'object') {\n+      return destinationsProperty.arn;\n+    }\n+    return destinationsProperty.startsWith('arn:')\n+      ? destinationsProperty\n+      : this.provider.resolveFunctionArn(destinationsProperty);\n+  }\n+\n   // Memoized in a constructor\n   ensureTargetExecutionPermission(functionAddress) {",
        "comment_created_at": "2022-03-21T14:57:43+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "Let's maybe replace the name `functionAddress` with something more generic? It's a bit confusing at the moment as it's not really a function address in most cases",
        "pr_file_module": null
      },
      {
        "comment_id": "831761528",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10845,
        "pr_file": "lib/plugins/aws/package/compile/functions.js",
        "discussion_id": "831204558",
        "commented_code": "@@ -650,38 +648,60 @@ class AwsCompileFunctions {\n     cfResources[this.provider.naming.getLambdaEventConfigLogicalId(functionName)] = resource;\n   }\n \n+  getDestinationsArn(destinationsProperty) {\n+    if (typeof destinationsProperty === 'object') {\n+      return destinationsProperty.arn;\n+    }\n+    return destinationsProperty.startsWith('arn:')\n+      ? destinationsProperty\n+      : this.provider.resolveFunctionArn(destinationsProperty);\n+  }\n+\n   // Memoized in a constructor\n   ensureTargetExecutionPermission(functionAddress) {",
        "comment_created_at": "2022-03-22T04:35:23+00:00",
        "comment_author": "ALOHACREPES345",
        "comment_body": "important.\r\nsorry for my lack of consideration.\ud83d\ude23",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "802584540",
    "pr_number": 10657,
    "pr_file": "lib/classes/plugin-manager.js",
    "created_at": "2022-02-09T11:56:12+00:00",
    "commented_code": "if (isLocatedAtLegacyPluginsPath) return require(absolutePluginPath);\n     }\n     const serviceDirRequire = getRequire(serviceDir);\n-    const entryFilePath = (() => {\n+    let entryFilePath = (() => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "802584540",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10657,
        "pr_file": "lib/classes/plugin-manager.js",
        "discussion_id": "802584540",
        "commented_code": "@@ -154,7 +154,7 @@ class PluginManager {\n       if (isLocatedAtLegacyPluginsPath) return require(absolutePluginPath);\n     }\n     const serviceDirRequire = getRequire(serviceDir);\n-    const entryFilePath = (() => {\n+    let entryFilePath = (() => {",
        "comment_created_at": "2022-02-09T11:56:12+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's maintain `const` but maybe name this var: `localPluginPath`, and the other below: `externalPluginPath`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "801447270",
    "pr_number": 10662,
    "pr_file": "scripts/serverless.js",
    "created_at": "2022-02-08T09:52:12+00:00",
    "commented_code": "if (!isHelpRequest && (isInteractiveSetup || isStandaloneCommand)) {\n       if (configuration) require('../lib/cli/ensure-supported-command')(configuration);\n       if (isInteractiveSetup) {\n-        if (!process.stdin.isTTY && !process.env.SLS_INTERACTIVE_SETUP_ENABLE) {\n+        if (!require('@serverless/utils/log').isInteractive) {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "801447270",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10662,
        "pr_file": "scripts/serverless.js",
        "discussion_id": "801447270",
        "commented_code": "@@ -481,7 +481,7 @@ processSpanPromise = (async () => {\n     if (!isHelpRequest && (isInteractiveSetup || isStandaloneCommand)) {\n       if (configuration) require('../lib/cli/ensure-supported-command')(configuration);\n       if (isInteractiveSetup) {\n-        if (!process.stdin.isTTY && !process.env.SLS_INTERACTIVE_SETUP_ENABLE) {\n+        if (!require('@serverless/utils/log').isInteractive) {",
        "comment_created_at": "2022-02-08T09:52:12+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "I've went with direct require here instead of top level as we already have a variable `isInteractiveSetup` that is very similar and could cause confusion ",
        "pr_file_module": null
      },
      {
        "comment_id": "801656810",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10662,
        "pr_file": "scripts/serverless.js",
        "discussion_id": "801447270",
        "commented_code": "@@ -481,7 +481,7 @@ processSpanPromise = (async () => {\n     if (!isHelpRequest && (isInteractiveSetup || isStandaloneCommand)) {\n       if (configuration) require('../lib/cli/ensure-supported-command')(configuration);\n       if (isInteractiveSetup) {\n-        if (!process.stdin.isTTY && !process.env.SLS_INTERACTIVE_SETUP_ENABLE) {\n+        if (!require('@serverless/utils/log').isInteractive) {",
        "comment_created_at": "2022-02-08T13:56:10+00:00",
        "comment_author": "medikoo",
        "comment_body": "I think it'll be cleaner to take that var in top `'@serverless/utils/log'` require, and name var `isInteractiveTerminal`, (`isIntereactiveSetup` is answering whether it's _interactive setup_ command that's triggered, so it's a different thing, and I don't see a collision or confusion here)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "754259238",
    "pr_number": 10259,
    "pr_file": "lib/classes/PluginManager.js",
    "created_at": "2021-11-22T13:07:34+00:00",
    "commented_code": ");\n   }\n \n+  getLocalPluginsPaths() {\n+    const fs = require('fs');\n+\n+    const pluginsPaths = this.localPluginsPaths.map(({ entryFileRealPath, originalPath }) => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "754259238",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10259,
        "pr_file": "lib/classes/PluginManager.js",
        "discussion_id": "754259238",
        "commented_code": "@@ -215,6 +220,38 @@ class PluginManager {\n     );\n   }\n \n+  getLocalPluginsPaths() {\n+    const fs = require('fs');\n+\n+    const pluginsPaths = this.localPluginsPaths.map(({ entryFileRealPath, originalPath }) => {",
        "comment_created_at": "2021-11-22T13:07:34+00:00",
        "comment_author": "medikoo",
        "comment_body": "I would name `entryFileRealPath` as `resolvedPath` and `originalPath` as `inputPath`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "774448283",
    "pr_number": 10406,
    "pr_file": "lib/utils/telemetry/generatePayload.js",
    "created_at": "2021-12-23T09:47:14+00:00",
    "commented_code": "payload.isConfigValid = getConfigurationValidationResult(configuration);\n     payload.dashboard.orgUid = serverless && serverless.service.orgUid;\n \n-    if (serverless && command === 'deploy' && isAwsProvider) {\n+    if (isAwsProvider && serverless && (command === 'deploy' || command === '')) {\n       const serviceName = isObject(configuration.service)\n         ? configuration.service.name\n         : configuration.service;\n-      const accountId = serverless.getProvider('aws').accountId;\n+      const accountId = serverless && serverless.getProvider('aws').accountId;\n       if (serviceName && accountId) {\n         payload.projectId = crypto\n           .createHash('sha256')\n           .update(`${serviceName}-${accountId}`)\n           .digest('base64');\n       }\n+\n+      payload.didCreateStack = Boolean(serverless && serverless.getProvider('aws').didCreateStack);",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "774448283",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10406,
        "pr_file": "lib/utils/telemetry/generatePayload.js",
        "discussion_id": "774448283",
        "commented_code": "@@ -300,17 +300,19 @@ module.exports = ({\n     payload.isConfigValid = getConfigurationValidationResult(configuration);\n     payload.dashboard.orgUid = serverless && serverless.service.orgUid;\n \n-    if (serverless && command === 'deploy' && isAwsProvider) {\n+    if (isAwsProvider && serverless && (command === 'deploy' || command === '')) {\n       const serviceName = isObject(configuration.service)\n         ? configuration.service.name\n         : configuration.service;\n-      const accountId = serverless.getProvider('aws').accountId;\n+      const accountId = serverless && serverless.getProvider('aws').accountId;\n       if (serviceName && accountId) {\n         payload.projectId = crypto\n           .createHash('sha256')\n           .update(`${serviceName}-${accountId}`)\n           .digest('base64');\n       }\n+\n+      payload.didCreateStack = Boolean(serverless && serverless.getProvider('aws').didCreateStack);",
        "comment_created_at": "2021-12-23T09:47:14+00:00",
        "comment_author": "medikoo",
        "comment_body": "In platform PR I've suggested that maybe it'll be better to give it a more agnostic name as `didCreateService`, so if eventually later we will support non-CF-related deployments, this name stays accurate.\r\n\r\nWDYT?",
        "pr_file_module": null
      },
      {
        "comment_id": "774454575",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10406,
        "pr_file": "lib/utils/telemetry/generatePayload.js",
        "discussion_id": "774448283",
        "commented_code": "@@ -300,17 +300,19 @@ module.exports = ({\n     payload.isConfigValid = getConfigurationValidationResult(configuration);\n     payload.dashboard.orgUid = serverless && serverless.service.orgUid;\n \n-    if (serverless && command === 'deploy' && isAwsProvider) {\n+    if (isAwsProvider && serverless && (command === 'deploy' || command === '')) {\n       const serviceName = isObject(configuration.service)\n         ? configuration.service.name\n         : configuration.service;\n-      const accountId = serverless.getProvider('aws').accountId;\n+      const accountId = serverless && serverless.getProvider('aws').accountId;\n       if (serviceName && accountId) {\n         payload.projectId = crypto\n           .createHash('sha256')\n           .update(`${serviceName}-${accountId}`)\n           .digest('base64');\n       }\n+\n+      payload.didCreateStack = Boolean(serverless && serverless.getProvider('aws').didCreateStack);",
        "comment_created_at": "2021-12-23T09:57:16+00:00",
        "comment_author": "mnapoli",
        "comment_body": "Not sure if that applies to the metric name as well, but for the metric name +1 to have it a bit more generic",
        "pr_file_module": null
      },
      {
        "comment_id": "774510363",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10406,
        "pr_file": "lib/utils/telemetry/generatePayload.js",
        "discussion_id": "774448283",
        "commented_code": "@@ -300,17 +300,19 @@ module.exports = ({\n     payload.isConfigValid = getConfigurationValidationResult(configuration);\n     payload.dashboard.orgUid = serverless && serverless.service.orgUid;\n \n-    if (serverless && command === 'deploy' && isAwsProvider) {\n+    if (isAwsProvider && serverless && (command === 'deploy' || command === '')) {\n       const serviceName = isObject(configuration.service)\n         ? configuration.service.name\n         : configuration.service;\n-      const accountId = serverless.getProvider('aws').accountId;\n+      const accountId = serverless && serverless.getProvider('aws').accountId;\n       if (serviceName && accountId) {\n         payload.projectId = crypto\n           .createHash('sha256')\n           .update(`${serviceName}-${accountId}`)\n           .digest('base64');\n       }\n+\n+      payload.didCreateStack = Boolean(serverless && serverless.getProvider('aws').didCreateStack);",
        "comment_created_at": "2021-12-23T11:34:11+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "Great suggestion @medikoo \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  }
]