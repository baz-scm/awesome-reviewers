[
  {
    "discussion_id": "1205401178",
    "pr_number": 11985,
    "pr_file": "test/unit/lib/plugins/aws/custom-resources/index.test.js",
    "created_at": "2023-05-25T11:49:35+00:00",
    "commented_code": "Resources.CustomDashresourceDashexistingDashs3LambdaFunction.Properties.FunctionName.length\n     ).to.be.below(65);\n   });\n+\n+  it('should configure vpc configs for the custom resource lambda function if vpc is configured', async () => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1205401178",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11985,
        "pr_file": "test/unit/lib/plugins/aws/custom-resources/index.test.js",
        "discussion_id": "1205401178",
        "commented_code": "@@ -347,6 +347,48 @@ describe('#addCustomResourceToService()', () => {\n       Resources.CustomDashresourceDashexistingDashs3LambdaFunction.Properties.FunctionName.length\n     ).to.be.below(65);\n   });\n+\n+  it('should configure vpc configs for the custom resource lambda function if vpc is configured', async () => {",
        "comment_created_at": "2023-05-25T11:49:35+00:00",
        "comment_author": "medikoo",
        "comment_body": "@Lokesh-Jawale all new tests should be configured with `runServerless`. see: https://github.com/serverless/serverless/tree/main/test#unit-tests\r\n\r\nI think in tests should configure `vpc` settings for service, and then confirm in the generated template that those settings are reflected on the generated custom resource. \r\n\r\n(there's already one `runServerless` based test configured in context of this test file)",
        "pr_file_module": null
      },
      {
        "comment_id": "1205886965",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11985,
        "pr_file": "test/unit/lib/plugins/aws/custom-resources/index.test.js",
        "discussion_id": "1205401178",
        "commented_code": "@@ -347,6 +347,48 @@ describe('#addCustomResourceToService()', () => {\n       Resources.CustomDashresourceDashexistingDashs3LambdaFunction.Properties.FunctionName.length\n     ).to.be.below(65);\n   });\n+\n+  it('should configure vpc configs for the custom resource lambda function if vpc is configured', async () => {",
        "comment_created_at": "2023-05-25T18:41:48+00:00",
        "comment_author": "Lokesh-Jawale",
        "comment_body": "Hi thanks for the review. I will update the test.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "730718939",
    "pr_number": 10108,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/hack/disassociateUsagePlan.test.js",
    "created_at": "2021-10-18T09:06:03+00:00",
    "commented_code": "awsProvider.request.restore();\n   });\n \n-  it('should remove association from the usage plan', () => {\n+  it('should remove association from the usage plan', async () => {\n     disassociateUsagePlan.serverless.service.provider.apiGateway = { apiKeys: ['apiKey1'] };\n \n-    return disassociateUsagePlan.disassociateUsagePlan().then(() => {\n-      expect(providerRequestStub.callCount).to.be.equal(3);\n+    await disassociateUsagePlan.disassociateUsagePlan();",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "730718939",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10108,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/hack/disassociateUsagePlan.test.js",
        "discussion_id": "730718939",
        "commented_code": "@@ -62,43 +65,85 @@ describe('#disassociateUsagePlan()', () => {\n     awsProvider.request.restore();\n   });\n \n-  it('should remove association from the usage plan', () => {\n+  it('should remove association from the usage plan', async () => {\n     disassociateUsagePlan.serverless.service.provider.apiGateway = { apiKeys: ['apiKey1'] };\n \n-    return disassociateUsagePlan.disassociateUsagePlan().then(() => {\n-      expect(providerRequestStub.callCount).to.be.equal(3);\n+    await disassociateUsagePlan.disassociateUsagePlan();",
        "comment_created_at": "2021-10-18T09:06:03+00:00",
        "comment_author": "medikoo",
        "comment_body": "We have a policy to configure all new tests with help of [`runServerless`](https://github.com/serverless/test/blob/master/docs/run-serverless.md) util.\r\n\r\nHere it'll involve some AWS SDK mocks, which easily can be configured with help of `awsRequestStubMap` option, e.g. example of such test, can be found here: https://github.com/mars-lan/serverless/blob/25e8ad1fed1ebaffc4e81b306b352a385ae4b2d9/test/unit/lib/plugins/aws/remove/lib/bucket.test.js#L156-L218",
        "pr_file_module": null
      },
      {
        "comment_id": "730737064",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10108,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/hack/disassociateUsagePlan.test.js",
        "discussion_id": "730718939",
        "commented_code": "@@ -62,43 +65,85 @@ describe('#disassociateUsagePlan()', () => {\n     awsProvider.request.restore();\n   });\n \n-  it('should remove association from the usage plan', () => {\n+  it('should remove association from the usage plan', async () => {\n     disassociateUsagePlan.serverless.service.provider.apiGateway = { apiKeys: ['apiKey1'] };\n \n-    return disassociateUsagePlan.disassociateUsagePlan().then(() => {\n-      expect(providerRequestStub.callCount).to.be.equal(3);\n+    await disassociateUsagePlan.disassociateUsagePlan();",
        "comment_created_at": "2021-10-18T09:27:34+00:00",
        "comment_author": "philiiiiiipp",
        "comment_body": "Okay great, I was trying to figure out the correct approach to this. I will have a look later this week :-)",
        "pr_file_module": null
      },
      {
        "comment_id": "732544693",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10108,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/hack/disassociateUsagePlan.test.js",
        "discussion_id": "730718939",
        "commented_code": "@@ -62,43 +65,85 @@ describe('#disassociateUsagePlan()', () => {\n     awsProvider.request.restore();\n   });\n \n-  it('should remove association from the usage plan', () => {\n+  it('should remove association from the usage plan', async () => {\n     disassociateUsagePlan.serverless.service.provider.apiGateway = { apiKeys: ['apiKey1'] };\n \n-    return disassociateUsagePlan.disassociateUsagePlan().then(() => {\n-      expect(providerRequestStub.callCount).to.be.equal(3);\n+    await disassociateUsagePlan.disassociateUsagePlan();",
        "comment_created_at": "2021-10-20T08:41:39+00:00",
        "comment_author": "philiiiiiipp",
        "comment_body": "I looked into it but was not able to figure out how this works, for some reason it just hangs and I have the feeling that it actually makes requests to `AWS`. @medikoo if you have time could you have a look ? I pushed the changes I made to the test file.\r\n\r\nOtherwise I might look into it with a bit more time next week.",
        "pr_file_module": null
      },
      {
        "comment_id": "733385028",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10108,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/hack/disassociateUsagePlan.test.js",
        "discussion_id": "730718939",
        "commented_code": "@@ -62,43 +65,85 @@ describe('#disassociateUsagePlan()', () => {\n     awsProvider.request.restore();\n   });\n \n-  it('should remove association from the usage plan', () => {\n+  it('should remove association from the usage plan', async () => {\n     disassociateUsagePlan.serverless.service.provider.apiGateway = { apiKeys: ['apiKey1'] };\n \n-    return disassociateUsagePlan.disassociateUsagePlan().then(() => {\n-      expect(providerRequestStub.callCount).to.be.equal(3);\n+    await disassociateUsagePlan.disassociateUsagePlan();",
        "comment_created_at": "2021-10-21T07:17:52+00:00",
        "comment_author": "medikoo",
        "comment_body": "I checked the commited code, but I don't see tests constructed with `runServerless`. Are you sure you've pushed that?",
        "pr_file_module": null
      },
      {
        "comment_id": "733538321",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10108,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/hack/disassociateUsagePlan.test.js",
        "discussion_id": "730718939",
        "commented_code": "@@ -62,43 +65,85 @@ describe('#disassociateUsagePlan()', () => {\n     awsProvider.request.restore();\n   });\n \n-  it('should remove association from the usage plan', () => {\n+  it('should remove association from the usage plan', async () => {\n     disassociateUsagePlan.serverless.service.provider.apiGateway = { apiKeys: ['apiKey1'] };\n \n-    return disassociateUsagePlan.disassociateUsagePlan().then(() => {\n-      expect(providerRequestStub.callCount).to.be.equal(3);\n+    await disassociateUsagePlan.disassociateUsagePlan();",
        "comment_created_at": "2021-10-21T10:27:29+00:00",
        "comment_author": "philiiiiiipp",
        "comment_body": "It yes, its the last test called `it.only('should still fail on error', async () => {` I also added a comment to the bottom",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "731044722",
    "pr_number": 10105,
    "pr_file": "test/unit/lib/plugins/aws/invokeLocal/index.test.js",
    "created_at": "2021-10-18T15:22:52+00:00",
    "commented_code": "describe('for different handler paths', () => {\n       [\n-        { path: 'handler.hello', expected: 'handler' },\n-        { path: '.build/handler.hello', expected: '.build/handler' },\n+        {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "731044722",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10105,
        "pr_file": "test/unit/lib/plugins/aws/invokeLocal/index.test.js",
        "discussion_id": "731044722",
        "commented_code": "@@ -414,8 +414,90 @@ describe('AwsInvokeLocal', () => {\n \n     describe('for different handler paths', () => {\n       [\n-        { path: 'handler.hello', expected: 'handler' },\n-        { path: '.build/handler.hello', expected: '.build/handler' },\n+        {",
        "comment_created_at": "2021-10-18T15:22:52+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "We should not expand the old-style tests but rather all new ones should use `runServerless`-based approach",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "724805375",
    "pr_number": 10067,
    "pr_file": "test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js",
    "created_at": "2021-10-08T08:25:06+00:00",
    "commented_code": "const expect = chai.expect;\n \n-describe('lib/plugins/aws/package/lib/mergeIamTemplates.test.js', () => {\n+describe('lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js', () => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "724805375",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10067,
        "pr_file": "test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js",
        "discussion_id": "724805375",
        "commented_code": "@@ -7,7 +7,7 @@ chai.use(require('chai-as-promised'));\n \n const expect = chai.expect;\n \n-describe('lib/plugins/aws/package/lib/mergeIamTemplates.test.js', () => {\n+describe('lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js', () => {",
        "comment_created_at": "2021-10-08T08:25:06+00:00",
        "comment_author": "medikoo",
        "comment_body": "This test file ideally if it's updated to test following:\r\n\r\n- Confirm adding log groups for functions\r\n- Confirm support for logRententionInDays\r\n- Confirm support of `provider.iam.tags\r\n- Confirm support of `provider.iam.permissionsBoundary`\r\n- Confirm support of `provider.iam.statements`\r\n- Confirm support of `provider.iam.managedPolicies`\r\n- Confirm that needed managed policy is added if `provider.vpc`\r\n\r\nAlso all tests should be done with `runServerless` util (and best if those runs are reused if possible, e.g. all IAM extensions can be tested with one run)",
        "pr_file_module": null
      },
      {
        "comment_id": "725436178",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10067,
        "pr_file": "test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js",
        "discussion_id": "724805375",
        "commented_code": "@@ -7,7 +7,7 @@ chai.use(require('chai-as-promised'));\n \n const expect = chai.expect;\n \n-describe('lib/plugins/aws/package/lib/mergeIamTemplates.test.js', () => {\n+describe('lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js', () => {",
        "comment_created_at": "2021-10-09T05:26:40+00:00",
        "comment_author": "issea1015",
        "comment_body": "It seems like all test cases you specified are covered in this file:\r\n* Confirm adding log groups for functions\r\n    * https://github.com/serverless/serverless/blob/d13cca7d83306d5c21d08a3399b259d2494551a2/test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js#L112\r\n* Confirm support for logRententionInDays\r\n    * https://github.com/serverless/serverless/blob/d13cca7d83306d5c21d08a3399b259d2494551a2/test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js#L379\r\n* Confirm support of `provider.iam.tags\r\n    * https://github.com/serverless/serverless/blob/d13cca7d83306d5c21d08a3399b259d2494551a2/test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js#L387\r\n* Confirm support of\u00a0provider.iam.permissionsBoundary\r\n    * https://github.com/serverless/serverless/blob/d13cca7d83306d5c21d08a3399b259d2494551a2/test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js#L200\r\n    * https://github.com/serverless/serverless/blob/d13cca7d83306d5c21d08a3399b259d2494551a2/test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js#L327\r\n* Confirm support of\u00a0provider.iam.statements\r\n    * https://github.com/serverless/serverless/blob/d13cca7d83306d5c21d08a3399b259d2494551a2/test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js#L302\r\n* Confirm support of\u00a0provider.iam.managedPolicies\r\n    * https://github.com/serverless/serverless/blob/d13cca7d83306d5c21d08a3399b259d2494551a2/test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js#L314\r\n* Confirm that needed managed policy is added if\u00a0provider.vpc\r\n    * https://github.com/serverless/serverless/blob/d13cca7d83306d5c21d08a3399b259d2494551a2/test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js#L363\r\n\r\n**And they are all done with\u00a0`runServerless`\u00a0util.**\r\n\r\n@medikoo Therefore in which way we need to update this file is not clear to me.\r\n- Do you want to remove test cases other than those you specified?",
        "pr_file_module": null
      },
      {
        "comment_id": "726022560",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10067,
        "pr_file": "test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js",
        "discussion_id": "724805375",
        "commented_code": "@@ -7,7 +7,7 @@ chai.use(require('chai-as-promised'));\n \n const expect = chai.expect;\n \n-describe('lib/plugins/aws/package/lib/mergeIamTemplates.test.js', () => {\n+describe('lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js', () => {",
        "comment_created_at": "2021-10-11T11:15:26+00:00",
        "comment_author": "medikoo",
        "comment_body": "@issea1015 those tests are currently in `lib/plugins/aws/package/lib/mergeIamTemplates.test.js` in master, and in this PR you were renaming this file and having those tests removed.\r\n\r\nThose tests should remain present in a test file that corresponds to the module which implements the functionality\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "727191380",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10067,
        "pr_file": "test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js",
        "discussion_id": "724805375",
        "commented_code": "@@ -7,7 +7,7 @@ chai.use(require('chai-as-promised'));\n \n const expect = chai.expect;\n \n-describe('lib/plugins/aws/package/lib/mergeIamTemplates.test.js', () => {\n+describe('lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js', () => {",
        "comment_created_at": "2021-10-12T14:24:35+00:00",
        "comment_author": "issea1015",
        "comment_body": "@medikoo The test case links I shared in this thread \u261d\ufe0f  belong to this PR, so they exist also in this PR not only in the master.\r\n\r\nThe test cases for function scope IAM might have confused you. I moved them from `mergeIamTemplate.test.js` to `compile/functions.test.js` as the functionality is moved to `compile/functions.js`\r\n\r\n### 1\r\n- from: https://github.com/issea1015/serverless/commit/40c932e7f03a78bc1284b2af699842642f83bbc0#diff-4d2074dfc15bd7fa715bfc5dcf8ec41d65c4aa5f756c7875fb75f68011ae852cL113-L156\r\n- to: https://github.com/issea1015/serverless/commit/40c932e7f03a78bc1284b2af699842642f83bbc0#diff-b0a2f2c747c874b3ac996b289739e323313d074cf998a8cf83910d2d9380b181R2551-R2594\r\n\r\n### 2\r\n- from: https://github.com/issea1015/serverless/commit/40c932e7f03a78bc1284b2af699842642f83bbc0#diff-4d2074dfc15bd7fa715bfc5dcf8ec41d65c4aa5f756c7875fb75f68011ae852cL496-L554\r\n- to: https://github.com/issea1015/serverless/commit/40c932e7f03a78bc1284b2af699842642f83bbc0#diff-b0a2f2c747c874b3ac996b289739e323313d074cf998a8cf83910d2d9380b181R2595-R2651",
        "pr_file_module": null
      },
      {
        "comment_id": "727196799",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10067,
        "pr_file": "test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js",
        "discussion_id": "724805375",
        "commented_code": "@@ -7,7 +7,7 @@ chai.use(require('chai-as-promised'));\n \n const expect = chai.expect;\n \n-describe('lib/plugins/aws/package/lib/mergeIamTemplates.test.js', () => {\n+describe('lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js', () => {",
        "comment_created_at": "2021-10-12T14:29:46+00:00",
        "comment_author": "medikoo",
        "comment_body": "> The test cases for function scope IAM might have confused you. I moved them from mergeIamTemplate.test.js to compile/functions.test.js as the functionality is moved to compile/functions.js\r\n\r\nThat's good then. If functionality is tested in scope of module that implements it, then it's the way it should be :)",
        "pr_file_module": null
      },
      {
        "comment_id": "727203127",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10067,
        "pr_file": "test/unit/lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js",
        "discussion_id": "724805375",
        "commented_code": "@@ -7,7 +7,7 @@ chai.use(require('chai-as-promised'));\n \n const expect = chai.expect;\n \n-describe('lib/plugins/aws/package/lib/mergeIamTemplates.test.js', () => {\n+describe('lib/plugins/aws/package/lib/generateIamRoleLambdaExecutionTemplate.test.js', () => {",
        "comment_created_at": "2021-10-12T14:35:54+00:00",
        "comment_author": "issea1015",
        "comment_body": "Thanks to confirm :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "688323315",
    "pr_number": 9831,
    "pr_file": "test/unit/lib/plugins/aws/lib/updateStack.test.js",
    "created_at": "2021-08-13T08:02:11+00:00",
    "commented_code": "});\n     });\n \n+    it('should include custom stack policy during updates', () => {\n+      awsDeploy.serverless.service.provider.stackPolicyDuringUpdate = [",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "688323315",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9831,
        "pr_file": "test/unit/lib/plugins/aws/lib/updateStack.test.js",
        "discussion_id": "688323315",
        "commented_code": "@@ -197,6 +197,23 @@ describe('updateStack', () => {\n       });\n     });\n \n+    it('should include custom stack policy during updates', () => {\n+      awsDeploy.serverless.service.provider.stackPolicyDuringUpdate = [",
        "comment_created_at": "2021-08-13T08:02:11+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "We're moving away from these old-style tests and instead all new tests suites should be written using `runServerless` utility e.g. like here: https://github.com/serverless/serverless/blob/21aeda4482b4128c0e8df9bf7b35315964c99751/test/unit/lib/plugins/aws/deployFunction.test.js#L908",
        "pr_file_module": null
      },
      {
        "comment_id": "688778922",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9831,
        "pr_file": "test/unit/lib/plugins/aws/lib/updateStack.test.js",
        "discussion_id": "688323315",
        "commented_code": "@@ -197,6 +197,23 @@ describe('updateStack', () => {\n       });\n     });\n \n+    it('should include custom stack policy during updates', () => {\n+      awsDeploy.serverless.service.provider.stackPolicyDuringUpdate = [",
        "comment_created_at": "2021-08-13T21:01:24+00:00",
        "comment_author": "thetrevdev",
        "comment_body": "done.  I refactored the test to use runServerless",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "777555244",
    "pr_number": 10435,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/events/cognitoUserPool.test.js",
    "created_at": "2022-01-03T15:47:47+00:00",
    "commented_code": "Trigger: 'CustomMessage',\n               },\n             ],\n+            ForceDeploy: undefined,\n+          },\n+        });\n+      });\n+    });\n+\n+    it('should create the necessary resources for the most minimal configuration with forceDeploy', () => {\n+      awsCompileCognitoUserPoolEvents.serverless.service.functions = {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "777555244",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10435,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/cognitoUserPool.test.js",
        "discussion_id": "777555244",
        "commented_code": "@@ -339,6 +339,77 @@ describe('AwsCompileCognitoUserPoolEvents', () => {\n                 Trigger: 'CustomMessage',\n               },\n             ],\n+            ForceDeploy: undefined,\n+          },\n+        });\n+      });\n+    });\n+\n+    it('should create the necessary resources for the most minimal configuration with forceDeploy', () => {\n+      awsCompileCognitoUserPoolEvents.serverless.service.functions = {",
        "comment_created_at": "2022-01-03T15:47:47+00:00",
        "comment_author": "medikoo",
        "comment_body": "Sorry, didn't notice that one earlier.\r\n\r\nIn new tests we always rely on `runServerless` util (we have already a tons of tests configured for it, which can self as reference).\r\n\r\nCan you update that one, so it's also `runServerless` based?",
        "pr_file_module": null
      },
      {
        "comment_id": "777861635",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10435,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/cognitoUserPool.test.js",
        "discussion_id": "777555244",
        "commented_code": "@@ -339,6 +339,77 @@ describe('AwsCompileCognitoUserPoolEvents', () => {\n                 Trigger: 'CustomMessage',\n               },\n             ],\n+            ForceDeploy: undefined,\n+          },\n+        });\n+      });\n+    });\n+\n+    it('should create the necessary resources for the most minimal configuration with forceDeploy', () => {\n+      awsCompileCognitoUserPoolEvents.serverless.service.functions = {",
        "comment_created_at": "2022-01-04T07:00:46+00:00",
        "comment_author": "TsimpDim",
        "comment_body": "Sure! I had to do some reading because I'm not familiar at all with testing in Javascript (or the internals of Serverless) but I came up with this:\r\n\r\n```\r\n    it('should create the necessary resources for the most minimal configuration with forceDeploy', () =>\r\n      runServerless({\r\n        fixture: 'cognitoUserPool',\r\n        configExt: {\r\n          functions: {\r\n            existingSimple: {\r\n              events: [\r\n                {\r\n                  cognitoUserPool: {\r\n                    forceDeploy: true\r\n                  },\r\n                },\r\n              ],\r\n            }\r\n          }\r\n        },\r\n        command: 'package',\r\n      }).then(({ awsNaming, cfTemplate }) => {\r\n        const { Resources } = cfTemplate;\r\n        let customResource = Resources[awsNaming.getCustomResourceCognitoUserPoolResourceLogicalId('existingSimple')];\r\n        \r\n        expect(customResource.Properties.ForceDeploy).to.not.deep.equal(undefined);\r\n    }));\r\n```\r\n\r\n(only one `expect()` statement instead of the previous three, for now at least). Will something like this do?",
        "pr_file_module": null
      },
      {
        "comment_id": "778020170",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10435,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/cognitoUserPool.test.js",
        "discussion_id": "777555244",
        "commented_code": "@@ -339,6 +339,77 @@ describe('AwsCompileCognitoUserPoolEvents', () => {\n                 Trigger: 'CustomMessage',\n               },\n             ],\n+            ForceDeploy: undefined,\n+          },\n+        });\n+      });\n+    });\n+\n+    it('should create the necessary resources for the most minimal configuration with forceDeploy', () => {\n+      awsCompileCognitoUserPoolEvents.serverless.service.functions = {",
        "comment_created_at": "2022-01-04T11:45:56+00:00",
        "comment_author": "medikoo",
        "comment_body": "Yes, that looks very good.\r\nJust use async/await (instead of `.then()`), and rather confirm on property as `expect(typeof ..).to.equal('string')`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "712779270",
    "pr_number": 9904,
    "pr_file": "test/unit/lib/plugins/aws/provider.test.js",
    "created_at": "2021-09-21T07:38:20+00:00",
    "commented_code": "return expect(awsProvider.options['aws-s3-accelerate']).to.be.undefined;\n     });\n   });\n+\n+  describe('#s3CodeArtifactsDirectoryPath', () => {\n+    beforeEach(() => {\n+      awsProvider.hooks.initialize();\n+    });\n+    it('should provide proper code artifacts S3 directory path', () => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "712779270",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9904,
        "pr_file": "test/unit/lib/plugins/aws/provider.test.js",
        "discussion_id": "712779270",
        "commented_code": "@@ -326,6 +327,28 @@ describe('AwsProvider', () => {\n       return expect(awsProvider.options['aws-s3-accelerate']).to.be.undefined;\n     });\n   });\n+\n+  describe('#s3CodeArtifactsDirectoryPath', () => {\n+    beforeEach(() => {\n+      awsProvider.hooks.initialize();\n+    });\n+    it('should provide proper code artifacts S3 directory path', () => {",
        "comment_created_at": "2021-09-21T07:38:20+00:00",
        "comment_author": "medikoo",
        "comment_body": "Any new tests should be based on [`runServerless`](https://github.com/serverless/test/blob/master/docs/run-serverless.md) util, e.g. see how `provider.getRegion()` is tested: https://github.com/serverless/serverless/blob/9e308bdf041c73eb2d27408ae4e03bc10fe9bf8a/test/unit/lib/plugins/aws/provider.test.js#L602-L637",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1151466688",
    "pr_number": 11871,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/events/websockets/lib/permissions.test.js",
    "created_at": "2023-03-29T06:50:56+00:00",
    "commented_code": "},\n     });\n   });\n+\n+  it('should create a permission resource for an external authorizer function', () => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1151466688",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11871,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/websockets/lib/permissions.test.js",
        "discussion_id": "1151466688",
        "commented_code": "@@ -113,4 +113,47 @@ describe('#compilePermissions()', () => {\n       },\n     });\n   });\n+\n+  it('should create a permission resource for an external authorizer function', () => {",
        "comment_created_at": "2023-03-29T06:50:56+00:00",
        "comment_author": "medikoo",
        "comment_body": "New tests should be configured via `runServerless` util, as e.g. tests in this block: https://github.com/serverless/serverless/blob/5d1c3f7ed4d481619d412b6b453d6eaf94b32b4a/test/unit/lib/plugins/aws/package/compile/events/websockets/index.test.js#L116-L258\r\n\r\nSee also: https://github.com/serverless/serverless/tree/main/test#unit-tests",
        "pr_file_module": null
      },
      {
        "comment_id": "1152006748",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11871,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/websockets/lib/permissions.test.js",
        "discussion_id": "1151466688",
        "commented_code": "@@ -113,4 +113,47 @@ describe('#compilePermissions()', () => {\n       },\n     });\n   });\n+\n+  it('should create a permission resource for an external authorizer function', () => {",
        "comment_created_at": "2023-03-29T14:10:06+00:00",
        "comment_author": "JamesKyburz",
        "comment_body": "Thanks I didn't know that, was updating an older test file :)\r\n\r\nI have now moved the new test to [test/unit/lib/plugins/aws/package/compile/events/websockets/lib/authorizers.test.js](./test/unit/lib/plugins/aws/package/compile/events/websockets/lib/authorizers.test.js) using runServerless.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1194029507",
    "pr_number": 11888,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js",
    "created_at": "2023-05-15T15:46:57+00:00",
    "commented_code": "},\n     });\n   });\n+  it('should accept alb header as both array and key-value object', () => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1194029507",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11888,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js",
        "discussion_id": "1194029507",
        "commented_code": "@@ -144,6 +144,78 @@ describe('#validate()', () => {\n       },\n     });\n   });\n+  it('should accept alb header as both array and key-value object', () => {",
        "comment_created_at": "2023-05-15T15:46:57+00:00",
        "comment_author": "medikoo",
        "comment_body": "@Inqnuam all new tests need to be configured via `runServerless` util (it's the only reliable way to confirm that functionality is working as expected).\r\n\r\nYou can find such tests already configured at https://github.com/serverless/serverless/blob/544e25da567de367ec174d491462a57f46a6228c/test/unit/lib/plugins/aws/package/compile/events/alb/index.test.js and I believe you can add one created here as well.\r\n\r\nSee tests documentation: https://github.com/serverless/serverless/tree/main/test#unit-tests",
        "pr_file_module": null
      },
      {
        "comment_id": "1202869341",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11888,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js",
        "discussion_id": "1194029507",
        "commented_code": "@@ -144,6 +144,78 @@ describe('#validate()', () => {\n       },\n     });\n   });\n+  it('should accept alb header as both array and key-value object', () => {",
        "comment_created_at": "2023-05-23T19:05:23+00:00",
        "comment_author": "Inqnuam",
        "comment_body": "Thanks for the info!\r\nJust added new tests for both single and multiple header conditions.\r\nPlease let me know if something is wrong.",
        "pr_file_module": null
      },
      {
        "comment_id": "1203946368",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11888,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js",
        "discussion_id": "1194029507",
        "commented_code": "@@ -144,6 +144,78 @@ describe('#validate()', () => {\n       },\n     });\n   });\n+  it('should accept alb header as both array and key-value object', () => {",
        "comment_created_at": "2023-05-24T11:32:04+00:00",
        "comment_author": "medikoo",
        "comment_body": "@Inqnuam if PR is ready for re-review, just re-request review in reviewers box, Thanks \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1202320868",
    "pr_number": 11980,
    "pr_file": "test/unit/lib/plugins/aws/package/lib/save-compiled-template.test.js",
    "created_at": "2023-05-23T13:20:27+00:00",
    "commented_code": "const AwsPackage = require('../../../../../../../lib/plugins/aws/package/index');\n const Serverless = require('../../../../../../../lib/serverless');\n const AwsProvider = require('../../../../../../../lib/plugins/aws/provider');\n+const fs = require('fs');",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1202320868",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11980,
        "pr_file": "test/unit/lib/plugins/aws/package/lib/save-compiled-template.test.js",
        "discussion_id": "1202320868",
        "commented_code": "@@ -6,12 +6,13 @@ const path = require('path');\n const AwsPackage = require('../../../../../../../lib/plugins/aws/package/index');\n const Serverless = require('../../../../../../../lib/serverless');\n const AwsProvider = require('../../../../../../../lib/plugins/aws/provider');\n+const fs = require('fs');",
        "comment_created_at": "2023-05-23T13:20:27+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's refactor this tests to rely on `runServerless` utils (we also then don't have to do any mocking)\r\n\r\nSee: https://github.com/serverless/serverless/tree/main/test#unit-tests\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "701858967",
    "pr_number": 9706,
    "pr_file": "lib/plugins/aws/lib/naming.js",
    "created_at": "2021-09-03T12:40:50+00:00",
    "commented_code": "getStreamConsumerName(functionName, streamName) {\n     return `${functionName}${streamName}Consumer`;\n   },\n+  getServiceSpecificStreamConsumerName(functionName, streamName) {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "701858967",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9706,
        "pr_file": "lib/plugins/aws/lib/naming.js",
        "discussion_id": "701858967",
        "commented_code": "@@ -374,6 +374,11 @@ module.exports = {\n   getStreamConsumerName(functionName, streamName) {\n     return `${functionName}${streamName}Consumer`;\n   },\n+  getServiceSpecificStreamConsumerName(functionName, streamName) {",
        "comment_created_at": "2021-09-03T12:40:50+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "it would be good to cover this with unit test",
        "pr_file_module": null
      },
      {
        "comment_id": "701859793",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9706,
        "pr_file": "lib/plugins/aws/lib/naming.js",
        "discussion_id": "701858967",
        "commented_code": "@@ -374,6 +374,11 @@ module.exports = {\n   getStreamConsumerName(functionName, streamName) {\n     return `${functionName}${streamName}Consumer`;\n   },\n+  getServiceSpecificStreamConsumerName(functionName, streamName) {",
        "comment_created_at": "2021-09-03T12:42:17+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "Additionally, I think it would be better to not have separate util for that but go with the similar route to `getHttpApiName` for example with encapsulating that logic inside",
        "pr_file_module": null
      },
      {
        "comment_id": "702919618",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9706,
        "pr_file": "lib/plugins/aws/lib/naming.js",
        "discussion_id": "701858967",
        "commented_code": "@@ -374,6 +374,11 @@ module.exports = {\n   getStreamConsumerName(functionName, streamName) {\n     return `${functionName}${streamName}Consumer`;\n   },\n+  getServiceSpecificStreamConsumerName(functionName, streamName) {",
        "comment_created_at": "2021-09-06T13:54:48+00:00",
        "comment_author": "preshetin",
        "comment_body": "Yes, I'll add tests and will try to make it similar to `getHttpApiName `",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "701860628",
    "pr_number": 9706,
    "pr_file": "lib/plugins/aws/package/compile/events/stream.js",
    "created_at": "2021-09-03T12:43:35+00:00",
    "commented_code": "if (event.stream.consumer && streamType === 'kinesis') {\n               if (event.stream.consumer === true) {\n-                const consumerName = this.provider.naming.getStreamConsumerName(\n+                let consumerName = this.provider.naming.getStreamConsumerName(\n                   functionName,\n                   streamName\n                 );\n+                const providerKinesisConfig = this.serverless.service.provider.kinesis;\n+                if (\n+                  providerKinesisConfig &&\n+                  providerKinesisConfig.consumerNamingMode &&\n+                  providerKinesisConfig.consumerNamingMode === 'serviceSpecific'",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "701860628",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9706,
        "pr_file": "lib/plugins/aws/package/compile/events/stream.js",
        "discussion_id": "701860628",
        "commented_code": "@@ -273,10 +286,21 @@ class AwsCompileStreamEvents {\n \n             if (event.stream.consumer && streamType === 'kinesis') {\n               if (event.stream.consumer === true) {\n-                const consumerName = this.provider.naming.getStreamConsumerName(\n+                let consumerName = this.provider.naming.getStreamConsumerName(\n                   functionName,\n                   streamName\n                 );\n+                const providerKinesisConfig = this.serverless.service.provider.kinesis;\n+                if (\n+                  providerKinesisConfig &&\n+                  providerKinesisConfig.consumerNamingMode &&\n+                  providerKinesisConfig.consumerNamingMode === 'serviceSpecific'",
        "comment_created_at": "2021-09-03T12:43:35+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "It would be good to cover these two cases with separate tests ",
        "pr_file_module": null
      },
      {
        "comment_id": "701860862",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9706,
        "pr_file": "lib/plugins/aws/package/compile/events/stream.js",
        "discussion_id": "701860628",
        "commented_code": "@@ -273,10 +286,21 @@ class AwsCompileStreamEvents {\n \n             if (event.stream.consumer && streamType === 'kinesis') {\n               if (event.stream.consumer === true) {\n-                const consumerName = this.provider.naming.getStreamConsumerName(\n+                let consumerName = this.provider.naming.getStreamConsumerName(\n                   functionName,\n                   streamName\n                 );\n+                const providerKinesisConfig = this.serverless.service.provider.kinesis;\n+                if (\n+                  providerKinesisConfig &&\n+                  providerKinesisConfig.consumerNamingMode &&\n+                  providerKinesisConfig.consumerNamingMode === 'serviceSpecific'",
        "comment_created_at": "2021-09-03T12:43:59+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "We should also add information about that property to documentation about Kinesis",
        "pr_file_module": null
      },
      {
        "comment_id": "702903665",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9706,
        "pr_file": "lib/plugins/aws/package/compile/events/stream.js",
        "discussion_id": "701860628",
        "commented_code": "@@ -273,10 +286,21 @@ class AwsCompileStreamEvents {\n \n             if (event.stream.consumer && streamType === 'kinesis') {\n               if (event.stream.consumer === true) {\n-                const consumerName = this.provider.naming.getStreamConsumerName(\n+                let consumerName = this.provider.naming.getStreamConsumerName(\n                   functionName,\n                   streamName\n                 );\n+                const providerKinesisConfig = this.serverless.service.provider.kinesis;\n+                if (\n+                  providerKinesisConfig &&\n+                  providerKinesisConfig.consumerNamingMode &&\n+                  providerKinesisConfig.consumerNamingMode === 'serviceSpecific'",
        "comment_created_at": "2021-09-06T13:29:43+00:00",
        "comment_author": "preshetin",
        "comment_body": "> It would be good to cover these two cases with separate tests\r\n\r\n@pgrzesik can you give a hint on how to create this test? I'm trying to make use of `runServerless` utility when adding a test like this:\r\n\r\n```javascript\r\n\r\ndescribe('Naming Mode Deprecation', () => {\r\n  it('should show deprecation message when old naming is used', async () => {\r\n    await runServerless({\r\n      fixture: 'function',\r\n      configExt: {\r\n        functions: {\r\n          foo: {\r\n            events: [{\r\n              stream: {\r\n                type: 'kinesis',\r\n                arn: 'arn:aws:kinesis:us-east-1:027546143534:stream/Foo',\r\n                consumer: true\r\n              },\r\n            }],\r\n          },\r\n        },\r\n      },\r\n      command: 'package',\r\n    });\r\n    // TODO: assert that stdoutData contains deprecation message\r\n  });\r\n});\r\n```\r\n\r\nwhen I run this test it fails with this error: \r\n\r\n```\r\n% npx mocha /Users/petrreshetin/Code/serverless-serverless/test/unit/lib/plugins/aws/package/compile/events/stream.test.js --grep Deprecation                     \r\n\r\n\r\n  Naming Mode Deprecation\r\n    1) should show deprecation message when old naming is used\r\n2021-09-06T13:21:10.722Z \u2716 mocha test fail ServerlessError: consumerNamingMode will be different in v3. The new naming will cause redeployment which may lead to delay in data processing\\n' +\r\n  '  More Info: https://www.serverless.com/framework/docs/deprecations/#consumerNamingMode\\n' +\r\n  '    at module.exports (lib/utils/logDeprecation.js:88:15)\\n' +\r\n```\r\n\r\nI tried to wrap this test with expect(...).to.throw(ServerlessError) however it does not work",
        "pr_file_module": null
      },
      {
        "comment_id": "702944028",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9706,
        "pr_file": "lib/plugins/aws/package/compile/events/stream.js",
        "discussion_id": "701860628",
        "commented_code": "@@ -273,10 +286,21 @@ class AwsCompileStreamEvents {\n \n             if (event.stream.consumer && streamType === 'kinesis') {\n               if (event.stream.consumer === true) {\n-                const consumerName = this.provider.naming.getStreamConsumerName(\n+                let consumerName = this.provider.naming.getStreamConsumerName(\n                   functionName,\n                   streamName\n                 );\n+                const providerKinesisConfig = this.serverless.service.provider.kinesis;\n+                if (\n+                  providerKinesisConfig &&\n+                  providerKinesisConfig.consumerNamingMode &&\n+                  providerKinesisConfig.consumerNamingMode === 'serviceSpecific'",
        "comment_created_at": "2021-09-06T14:33:53+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "You can ignore deprecations with `runServerless` runs with `disabledDeprecations` passed into `configExt` so it's still possible to test old logic. As for testing if deprecation is displayed, I think it can be skipped ",
        "pr_file_module": null
      },
      {
        "comment_id": "715624423",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9706,
        "pr_file": "lib/plugins/aws/package/compile/events/stream.js",
        "discussion_id": "701860628",
        "commented_code": "@@ -273,10 +286,21 @@ class AwsCompileStreamEvents {\n \n             if (event.stream.consumer && streamType === 'kinesis') {\n               if (event.stream.consumer === true) {\n-                const consumerName = this.provider.naming.getStreamConsumerName(\n+                let consumerName = this.provider.naming.getStreamConsumerName(\n                   functionName,\n                   streamName\n                 );\n+                const providerKinesisConfig = this.serverless.service.provider.kinesis;\n+                if (\n+                  providerKinesisConfig &&\n+                  providerKinesisConfig.consumerNamingMode &&\n+                  providerKinesisConfig.consumerNamingMode === 'serviceSpecific'",
        "comment_created_at": "2021-09-24T13:43:09+00:00",
        "comment_author": "preshetin",
        "comment_body": "> It would be good to cover these two cases with separate tests\r\n\r\nSince there is already a test covering the standard naming case I just added another one handling the new naming mode case",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1194987664",
    "pr_number": 9706,
    "pr_file": "test/unit/lib/plugins/aws/lib/naming.test.js",
    "created_at": "2023-05-16T10:56:57+00:00",
    "commented_code": "'functionNamestreamNameConsumer'\n       );\n     });\n+\n+    it('should return service specific stream consumer name', () => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1194987664",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9706,
        "pr_file": "test/unit/lib/plugins/aws/lib/naming.test.js",
        "discussion_id": "1194987664",
        "commented_code": "@@ -583,6 +583,15 @@ describe('#naming()', () => {\n         'functionNamestreamNameConsumer'\n       );\n     });\n+\n+    it('should return service specific stream consumer name', () => {",
        "comment_created_at": "2023-05-16T10:56:57+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's not add a test here.\r\n\r\nInstead, let's ensure it's tested in the context of https://github.com/serverless/serverless/blob/d6de3346ce962392c053f7f6480f52dcdb918624/test/unit/lib/plugins/aws/package/compile/events/stream.test.js#L1474 (properly with `runServerless` util)\r\n\r\nNote that currently test over there fail, as deprecation is presented (in tests deprecations provoke command fails - to ensure we always handle them). So I believe updating the test to new naming, will automatically create test coverage for this update",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1195032501",
    "pr_number": 11935,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/events/schedule.test.js",
    "created_at": "2023-05-16T11:38:10+00:00",
    "commented_code": "InputTemplate: '{\"time\": <eventTime>, \"key\": \"value\"}',\n       InputPathsMap: { eventTime: '$.time' },\n     });\n+    expect(scheduleCfResources[8].Properties.Target.InputTransformer).to.be.undefined;\n+    expect(scheduleCfResources[9].Properties.Target.InputTransformer).to.be.undefined;\n+  });\n+\n+  it('should throw when passing \"inputPath\" or \"inputTransformer\" to method:schedule resources', async () => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1195032501",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11935,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/schedule.test.js",
        "discussion_id": "1195032501",
        "commented_code": "@@ -223,9 +272,130 @@ describe('test/unit/lib/plugins/aws/package/compile/events/schedule.test.js', ()\n       InputTemplate: '{\"time\": <eventTime>, \"key\": \"value\"}',\n       InputPathsMap: { eventTime: '$.time' },\n     });\n+    expect(scheduleCfResources[8].Properties.Target.InputTransformer).to.be.undefined;\n+    expect(scheduleCfResources[9].Properties.Target.InputTransformer).to.be.undefined;\n+  });\n+\n+  it('should throw when passing \"inputPath\" or \"inputTransformer\" to method:schedule resources', async () => {",
        "comment_created_at": "2023-05-16T11:38:10+00:00",
        "comment_author": "medikoo",
        "comment_body": "This `it` should not be in context of this `describe` (e.g. it doesn't require the `before` job as configured here).\r\n\r\nI think to have it clean, we need to reorganize this describe:\r\n1. Move tests that confirm on the outcome of the first `run`, into nested `describe('basic', () => ... )`  block\r\n2. Reorganize following tests as follows:\r\n   1. If outcome of `run` is tested in context of one `it` block, it can remain to be configured with one `it`\r\n   2. If outcome of `run` is tested with multiple `it` blocks, let's wrap it into `describe`",
        "pr_file_module": null
      },
      {
        "comment_id": "1195186297",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11935,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/schedule.test.js",
        "discussion_id": "1195032501",
        "commented_code": "@@ -223,9 +272,130 @@ describe('test/unit/lib/plugins/aws/package/compile/events/schedule.test.js', ()\n       InputTemplate: '{\"time\": <eventTime>, \"key\": \"value\"}',\n       InputPathsMap: { eventTime: '$.time' },\n     });\n+    expect(scheduleCfResources[8].Properties.Target.InputTransformer).to.be.undefined;\n+    expect(scheduleCfResources[9].Properties.Target.InputTransformer).to.be.undefined;\n+  });\n+\n+  it('should throw when passing \"inputPath\" or \"inputTransformer\" to method:schedule resources', async () => {",
        "comment_created_at": "2023-05-16T13:41:39+00:00",
        "comment_author": "tie624",
        "comment_body": "I will reorganize these tests.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1087790349",
    "pr_number": 11707,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/events/schedule.test.js",
    "created_at": "2023-01-26T12:25:24+00:00",
    "commented_code": "},\n         },\n       },\n+      {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1087790349",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11707,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/schedule.test.js",
        "discussion_id": "1087790349",
        "commented_code": "@@ -102,15 +103,38 @@ describe('test/unit/lib/plugins/aws/package/compile/events/schedule.test.js', ()\n           },\n         },\n       },\n+      {",
        "comment_created_at": "2023-01-26T12:25:24+00:00",
        "comment_author": "medikoo",
        "comment_body": "New tests should be configured purely with `runServerless` util. See: https://github.com/serverless/serverless/tree/main/test#unit-tests\r\n\r\nIn existing file we usually then introduce a new describe block for those tests (and old ones ideally at some point should be refactored to also go there), e.g. check https://github.com/serverless/serverless/blob/741847d2327e87eb95b9a2349642fac5b7e316e1/test/unit/lib/plugins/aws/package/compile/events/cloud-front.test.js#L171\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1089749364",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11707,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/schedule.test.js",
        "discussion_id": "1087790349",
        "commented_code": "@@ -102,15 +103,38 @@ describe('test/unit/lib/plugins/aws/package/compile/events/schedule.test.js', ()\n           },\n         },\n       },\n+      {",
        "comment_created_at": "2023-01-28T14:43:10+00:00",
        "comment_author": "joelwalden",
        "comment_body": "@medikoo Does this line in `schedule.test.js` not setup the whole file to run using `runServerless`? https://github.com/serverless/serverless/blob/bf79934e9b43a0b2e8613ee29f9430fa22c41481/test/unit/lib/plugins/aws/package/compile/events/schedule.test.js#L23",
        "pr_file_module": null
      },
      {
        "comment_id": "1090376264",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11707,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/schedule.test.js",
        "discussion_id": "1087790349",
        "commented_code": "@@ -102,15 +103,38 @@ describe('test/unit/lib/plugins/aws/package/compile/events/schedule.test.js', ()\n           },\n         },\n       },\n+      {",
        "comment_created_at": "2023-01-30T09:37:10+00:00",
        "comment_author": "medikoo",
        "comment_body": "@joelwalden indeed! Sorry I got fooled by the not common `runServerless` setup. Ignore my comment then",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1151471008",
    "pr_number": 11864,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js",
    "created_at": "2023-03-29T06:55:47+00:00",
    "commented_code": "awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate\n           .Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Type\n       ).to.equal('AWS::Logs::SubscriptionFilter');\n+      expect(",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1151471008",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11864,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js",
        "discussion_id": "1151471008",
        "commented_code": "@@ -46,10 +46,18 @@ describe('AwsCompileCloudWatchLogEvents', () => {\n         awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate\n           .Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Type\n       ).to.equal('AWS::Logs::SubscriptionFilter');\n+      expect(",
        "comment_created_at": "2023-03-29T06:55:47+00:00",
        "comment_author": "medikoo",
        "comment_body": "New tests should be configured via `runServerless` util, as e.g. tests in this block: https://github.com/serverless/serverless/blob/5d1c3f7ed4d481619d412b6b453d6eaf94b32b4a/test/unit/lib/plugins/aws/package/compile/events/websockets/index.test.js#L116-L258\r\n\r\nSee also: https://github.com/serverless/serverless/tree/main/test#unit-tests\r\n\r\nIn this test file let's add a new `describe` block, that will host those new tests",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1043268429",
    "pr_number": 11576,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/functions.test.js",
    "created_at": "2022-12-08T11:52:01+00:00",
    "commented_code": ").to.deep.equal(compiledFunction);\n       });\n     });\n+\n+    it('should set function SnapStart ApplyOn to PublishedVersions when enabled', () => {\n+      awsCompileFunctions.serverless.service.functions = {\n+        func: {\n+          handler: 'func.function.handler',\n+          name: 'new-service-dev-func',\n+          snapStart: true,\n+        },\n+      };\n+\n+      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n+        expect(\n+          awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources\n+            .FuncLambdaFunction.Properties.SnapStart\n+        ).to.deep.equal({ ApplyOn: 'PublishedVersions' });\n+      });\n+    });\n+\n+    it('should set function SnapStart ApplyOn to None when disabled', () => {\n+      awsCompileFunctions.serverless.service.functions = {\n+        func: {\n+          handler: 'func.function.handler',\n+          name: 'new-service-dev-func',\n+          snapStart: false,\n+        },\n+      };\n+\n+      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n+        expect(\n+          awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources\n+            .FuncLambdaFunction.Properties.SnapStart\n+        ).to.deep.equal({ ApplyOn: 'None' });\n+      });\n+    });",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "1043268429",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11576,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/functions.test.js",
        "discussion_id": "1043268429",
        "commented_code": "@@ -931,6 +931,40 @@ describe('AwsCompileFunctions', () => {\n         ).to.deep.equal(compiledFunction);\n       });\n     });\n+\n+    it('should set function SnapStart ApplyOn to PublishedVersions when enabled', () => {\n+      awsCompileFunctions.serverless.service.functions = {\n+        func: {\n+          handler: 'func.function.handler',\n+          name: 'new-service-dev-func',\n+          snapStart: true,\n+        },\n+      };\n+\n+      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n+        expect(\n+          awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources\n+            .FuncLambdaFunction.Properties.SnapStart\n+        ).to.deep.equal({ ApplyOn: 'PublishedVersions' });\n+      });\n+    });\n+\n+    it('should set function SnapStart ApplyOn to None when disabled', () => {\n+      awsCompileFunctions.serverless.service.functions = {\n+        func: {\n+          handler: 'func.function.handler',\n+          name: 'new-service-dev-func',\n+          snapStart: false,\n+        },\n+      };\n+\n+      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n+        expect(\n+          awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources\n+            .FuncLambdaFunction.Properties.SnapStart\n+        ).to.deep.equal({ ApplyOn: 'None' });\n+      });\n+    });",
        "comment_created_at": "2022-12-08T11:52:01+00:00",
        "comment_author": "medikoo",
        "comment_body": "Let's write tests with `runServerless` util only (see second part of this test file, and https://github.com/serverless/serverless/tree/main/test#unit-tests",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "915159777",
    "pr_number": 11201,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js",
    "created_at": "2022-07-06T18:55:52+00:00",
    "commented_code": "});\n \n   describe('#newCognitoUserPools()', () => {\n+    it('should throw when invalid CUP event is given', () => {\n+      awsCompileCognitoUserPoolEvents.serverless.service.functions = {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "915159777",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11201,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js",
        "discussion_id": "915159777",
        "commented_code": "@@ -41,6 +41,26 @@ describe('AwsCompileCognitoUserPoolEvents', () => {\n   });\n \n   describe('#newCognitoUserPools()', () => {\n+    it('should throw when invalid CUP event is given', () => {\n+      awsCompileCognitoUserPoolEvents.serverless.service.functions = {",
        "comment_created_at": "2022-07-06T18:55:52+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "Let's not use such tests - we are slowly migrating away from them and all new tests should be based on `runServerless` utility",
        "pr_file_module": null
      },
      {
        "comment_id": "915231601",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11201,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js",
        "discussion_id": "915159777",
        "commented_code": "@@ -41,6 +41,26 @@ describe('AwsCompileCognitoUserPoolEvents', () => {\n   });\n \n   describe('#newCognitoUserPools()', () => {\n+    it('should throw when invalid CUP event is given', () => {\n+      awsCompileCognitoUserPoolEvents.serverless.service.functions = {",
        "comment_created_at": "2022-07-06T20:32:13+00:00",
        "comment_author": "AustinMathuw",
        "comment_body": "Sounds good! I did it this way for file consistency. If wanted, I can update the entire file to use runServerless.",
        "pr_file_module": null
      },
      {
        "comment_id": "916734645",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11201,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js",
        "discussion_id": "915159777",
        "commented_code": "@@ -41,6 +41,26 @@ describe('AwsCompileCognitoUserPoolEvents', () => {\n   });\n \n   describe('#newCognitoUserPools()', () => {\n+    it('should throw when invalid CUP event is given', () => {\n+      awsCompileCognitoUserPoolEvents.serverless.service.functions = {",
        "comment_created_at": "2022-07-08T11:38:26+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "I think for not expanding the scope, let's focus on just new tests and if you'd be interested, please do the refactor for all the other tests in a separate PR, it would be much appreciated \ud83d\ude47 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "926435008",
    "pr_number": 11201,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js",
    "created_at": "2022-07-21T09:01:42+00:00",
    "commented_code": ").to.equal('AWS::Lambda::Permission');\n     });\n   });\n+\n+  describe('Custom Sender Sources', () => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "926435008",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11201,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js",
        "discussion_id": "926435008",
        "commented_code": "@@ -802,4 +963,426 @@ describe('AwsCompileCognitoUserPoolEvents', () => {\n       ).to.equal('AWS::Lambda::Permission');\n     });\n   });\n+\n+  describe('Custom Sender Sources', () => {",
        "comment_created_at": "2022-07-21T09:01:42+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "let's put all new tests based on `runServerless` in a separate `describe`",
        "pr_file_module": null
      },
      {
        "comment_id": "926630653",
        "repo_full_name": "serverless/serverless",
        "pr_number": 11201,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js",
        "discussion_id": "926435008",
        "commented_code": "@@ -802,4 +963,426 @@ describe('AwsCompileCognitoUserPoolEvents', () => {\n       ).to.equal('AWS::Lambda::Permission');\n     });\n   });\n+\n+  describe('Custom Sender Sources', () => {",
        "comment_created_at": "2022-07-21T12:45:24+00:00",
        "comment_author": "AustinMathuw",
        "comment_body": "Sounds great!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "847182904",
    "pr_number": 10956,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js",
    "created_at": "2022-04-11T10:35:39+00:00",
    "commented_code": ").to.equal(true);\n       });\n     });\n+\n+    it('should set a specific log Format if provider has format', () => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "847182904",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10956,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js",
        "discussion_id": "847182904",
        "commented_code": "@@ -191,5 +191,139 @@ describe('#compileStage()', () => {\n         ).to.equal(true);\n       });\n     });\n+\n+    it('should set a specific log Format if provider has format', () => {",
        "comment_created_at": "2022-04-11T10:35:39+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "Let's not use the old-style tests - we're slowly moving away from them and for all new funcitonalities we're using `runServerless`-based tests - please see some examples in `websockets/index.test.js` at the end of the file.",
        "pr_file_module": null
      },
      {
        "comment_id": "847871370",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10956,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js",
        "discussion_id": "847182904",
        "commented_code": "@@ -191,5 +191,139 @@ describe('#compileStage()', () => {\n         ).to.equal(true);\n       });\n     });\n+\n+    it('should set a specific log Format if provider has format', () => {",
        "comment_created_at": "2022-04-12T01:49:10+00:00",
        "comment_author": "Ariette",
        "comment_body": "I applied the new-style test. Please check the new commit. Thank you.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "812776427",
    "pr_number": 10746,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/events/api-gateway/lib/rest-api.test.js",
    "created_at": "2022-02-23T11:01:00+00:00",
    "commented_code": "Properties: {\n         BinaryMediaTypes: ['*/*'],\n         DisableExecuteApiEndpoint: undefined,\n+        Description: undefined,\n+        EndpointConfiguration: {\n+          Types: ['EDGE'],\n+        },\n+        Name: 'dev-new-service',\n+        Policy: '',\n+      },\n+    });\n+  });\n+\n+  it('should set description if defined at the apiGateway provider config level', () => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "812776427",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10746,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/api-gateway/lib/rest-api.test.js",
        "discussion_id": "812776427",
        "commented_code": "@@ -148,6 +151,30 @@ describe('#compileRestApi()', () => {\n       Properties: {\n         BinaryMediaTypes: ['*/*'],\n         DisableExecuteApiEndpoint: undefined,\n+        Description: undefined,\n+        EndpointConfiguration: {\n+          Types: ['EDGE'],\n+        },\n+        Name: 'dev-new-service',\n+        Policy: '',\n+      },\n+    });\n+  });\n+\n+  it('should set description if defined at the apiGateway provider config level', () => {",
        "comment_created_at": "2022-02-23T11:01:00+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "We should not introduce new tests based on the \"legacy\" approach - all new tests should be written with `runServerless` utility - please see the tests at the bottom for an example ",
        "pr_file_module": null
      },
      {
        "comment_id": "812815879",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10746,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/api-gateway/lib/rest-api.test.js",
        "discussion_id": "812776427",
        "commented_code": "@@ -148,6 +151,30 @@ describe('#compileRestApi()', () => {\n       Properties: {\n         BinaryMediaTypes: ['*/*'],\n         DisableExecuteApiEndpoint: undefined,\n+        Description: undefined,\n+        EndpointConfiguration: {\n+          Types: ['EDGE'],\n+        },\n+        Name: 'dev-new-service',\n+        Policy: '',\n+      },\n+    });\n+  });\n+\n+  it('should set description if defined at the apiGateway provider config level', () => {",
        "comment_created_at": "2022-02-23T11:54:43+00:00",
        "comment_author": "ALOHACREPES345",
        "comment_body": "Thanks for taking your time to kind review.\r\nI should be more careful to read the doc\u2026\r\nI updated new test with using runServerless. Nice util!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "794006462",
    "pr_number": 10576,
    "pr_file": "test/unit/lib/plugins/create/create.test.js",
    "created_at": "2022-01-27T21:18:32+00:00",
    "commented_code": "'use strict';\n \n const chai = require('chai');\n-const fs = require('fs');\n+const fsp = require('fs').promises;\n const path = require('path');\n const fse = require('fs-extra');\n-const Create = require('../../../../../lib/plugins/create/create');\n-const Serverless = require('../../../../../lib/serverless');\n-const sinon = require('sinon');\n-const walkDirSync = require('../../../../../lib/utils/fs/walk-dir-sync');\n-const download = require('../../../../../lib/utils/download-template-from-repo');\n const { getTmpDirPath } = require('../../../../utils/fs');\n+const runServerless = require('../../../../utils/run-serverless');\n \n chai.use(require('chai-as-promised'));\n-chai.use(require('sinon-chai'));\n-const { expect } = require('chai');\n \n-const templatesPath = path.resolve(__dirname, '../../../../../lib/plugins/create/templates');\n-\n-describe('Create', () => {\n-  let create;\n-\n-  before(() => {\n-    const serverless = new Serverless({ commands: [], options: {} });\n-    const options = {};\n-    create = new Create(serverless, options);\n-    create.serverless.cli = new serverless.classes.CLI();\n+const expect = chai.expect;\n+\n+// TODO: MOVE TO INTEGRATION TESTS?",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "794006462",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10576,
        "pr_file": "test/unit/lib/plugins/create/create.test.js",
        "discussion_id": "794006462",
        "commented_code": "@@ -1,1222 +1,117 @@\n 'use strict';\n \n const chai = require('chai');\n-const fs = require('fs');\n+const fsp = require('fs').promises;\n const path = require('path');\n const fse = require('fs-extra');\n-const Create = require('../../../../../lib/plugins/create/create');\n-const Serverless = require('../../../../../lib/serverless');\n-const sinon = require('sinon');\n-const walkDirSync = require('../../../../../lib/utils/fs/walk-dir-sync');\n-const download = require('../../../../../lib/utils/download-template-from-repo');\n const { getTmpDirPath } = require('../../../../utils/fs');\n+const runServerless = require('../../../../utils/run-serverless');\n \n chai.use(require('chai-as-promised'));\n-chai.use(require('sinon-chai'));\n-const { expect } = require('chai');\n \n-const templatesPath = path.resolve(__dirname, '../../../../../lib/plugins/create/templates');\n-\n-describe('Create', () => {\n-  let create;\n-\n-  before(() => {\n-    const serverless = new Serverless({ commands: [], options: {} });\n-    const options = {};\n-    create = new Create(serverless, options);\n-    create.serverless.cli = new serverless.classes.CLI();\n+const expect = chai.expect;\n+\n+// TODO: MOVE TO INTEGRATION TESTS?",
        "comment_created_at": "2022-01-27T21:18:32+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "@medikoo What do you think of placing these tests in `tests/integration` and running it only as a part of integration test suite? The reason behind it is that these now require internet connectivity and take a few seconds to execute as they're downloading templates. I think it might be fine to leave them here as well, but if we add extra similar tests in the future, it might quickly add up to a significant time overhead for out unit tests. ",
        "pr_file_module": null
      },
      {
        "comment_id": "794441989",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10576,
        "pr_file": "test/unit/lib/plugins/create/create.test.js",
        "discussion_id": "794006462",
        "commented_code": "@@ -1,1222 +1,117 @@\n 'use strict';\n \n const chai = require('chai');\n-const fs = require('fs');\n+const fsp = require('fs').promises;\n const path = require('path');\n const fse = require('fs-extra');\n-const Create = require('../../../../../lib/plugins/create/create');\n-const Serverless = require('../../../../../lib/serverless');\n-const sinon = require('sinon');\n-const walkDirSync = require('../../../../../lib/utils/fs/walk-dir-sync');\n-const download = require('../../../../../lib/utils/download-template-from-repo');\n const { getTmpDirPath } = require('../../../../utils/fs');\n+const runServerless = require('../../../../utils/run-serverless');\n \n chai.use(require('chai-as-promised'));\n-chai.use(require('sinon-chai'));\n-const { expect } = require('chai');\n \n-const templatesPath = path.resolve(__dirname, '../../../../../lib/plugins/create/templates');\n-\n-describe('Create', () => {\n-  let create;\n-\n-  before(() => {\n-    const serverless = new Serverless({ commands: [], options: {} });\n-    const options = {};\n-    create = new Create(serverless, options);\n-    create.serverless.cli = new serverless.classes.CLI();\n+const expect = chai.expect;\n+\n+// TODO: MOVE TO INTEGRATION TESTS?",
        "comment_created_at": "2022-01-28T11:56:52+00:00",
        "comment_author": "medikoo",
        "comment_body": "@pgrzesik if they require internet then definitely they should go into integration set (unit tests ideally should be runnable offline)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "754580591",
    "pr_number": 10259,
    "pr_file": "test/unit/lib/classes/PluginManager.test.js",
    "created_at": "2021-11-22T19:37:53+00:00",
    "commented_code": "localPath: serviceDir,\n         modules: ['local-plugin'],\n       });\n-      // Had to use contructor.name because the class will be loaded via\n+      // Had to use constructor.name because the class will be loaded via\n       // require and the reference will not match with SynchronousPluginMock\n       expect(pluginManager.plugins).to.satisfy((plugins) =>\n         plugins.some((plugin) => plugin.constructor.name === 'SynchronousPluginMock')\n       );\n     });\n \n-    it('should load plugins from custom folder outside of serviceDir', () => {\n-      serviceDir = path.join(tmpDir, 'serverless-plugins-custom');\n-      const localPluginDir = path.join(serviceDir, 'local-plugin');\n-      installPlugin(localPluginDir, SynchronousPluginMock);\n+    describe('#getLocalPluginsPathPatterns()', () => {\n+      it('should return empty list without any plugins', () => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "754580591",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10259,
        "pr_file": "test/unit/lib/classes/PluginManager.test.js",
        "discussion_id": "754580591",
        "commented_code": "@@ -1837,27 +1837,47 @@ describe('PluginManager', () => {\n         localPath: serviceDir,\n         modules: ['local-plugin'],\n       });\n-      // Had to use contructor.name because the class will be loaded via\n+      // Had to use constructor.name because the class will be loaded via\n       // require and the reference will not match with SynchronousPluginMock\n       expect(pluginManager.plugins).to.satisfy((plugins) =>\n         plugins.some((plugin) => plugin.constructor.name === 'SynchronousPluginMock')\n       );\n     });\n \n-    it('should load plugins from custom folder outside of serviceDir', () => {\n-      serviceDir = path.join(tmpDir, 'serverless-plugins-custom');\n-      const localPluginDir = path.join(serviceDir, 'local-plugin');\n-      installPlugin(localPluginDir, SynchronousPluginMock);\n+    describe('#getLocalPluginsPathPatterns()', () => {\n+      it('should return empty list without any plugins', () => {",
        "comment_created_at": "2021-11-22T19:37:53+00:00",
        "comment_author": "medikoo",
        "comment_body": "We have a policy to configure all new tests with [`runServerless`](https://github.com/serverless/test/blob/master/docs/run-serverless.md). We have already plenty of such tests configured.\r\n\r\nI think here it'll be good to rely on [`packaging`](https://github.com/serverless/serverless/tree/master/test/fixtures/programmatic/packaging) fixture, and extend configuration with local plugins that resemble direct file and directory, and confirm that in generated artifact those files are not included",
        "pr_file_module": null
      },
      {
        "comment_id": "754601721",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10259,
        "pr_file": "test/unit/lib/classes/PluginManager.test.js",
        "discussion_id": "754580591",
        "commented_code": "@@ -1837,27 +1837,47 @@ describe('PluginManager', () => {\n         localPath: serviceDir,\n         modules: ['local-plugin'],\n       });\n-      // Had to use contructor.name because the class will be loaded via\n+      // Had to use constructor.name because the class will be loaded via\n       // require and the reference will not match with SynchronousPluginMock\n       expect(pluginManager.plugins).to.satisfy((plugins) =>\n         plugins.some((plugin) => plugin.constructor.name === 'SynchronousPluginMock')\n       );\n     });\n \n-    it('should load plugins from custom folder outside of serviceDir', () => {\n-      serviceDir = path.join(tmpDir, 'serverless-plugins-custom');\n-      const localPluginDir = path.join(serviceDir, 'local-plugin');\n-      installPlugin(localPluginDir, SynchronousPluginMock);\n+    describe('#getLocalPluginsPathPatterns()', () => {\n+      it('should return empty list without any plugins', () => {",
        "comment_created_at": "2021-11-22T20:11:52+00:00",
        "comment_author": "shalvah",
        "comment_body": "You mean an integration test? Yes, I agree. That was my first choice, but I couldn't locate any existing tests that checked packaging that I could copy from. I'll try again.",
        "pr_file_module": null
      },
      {
        "comment_id": "754606209",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10259,
        "pr_file": "test/unit/lib/classes/PluginManager.test.js",
        "discussion_id": "754580591",
        "commented_code": "@@ -1837,27 +1837,47 @@ describe('PluginManager', () => {\n         localPath: serviceDir,\n         modules: ['local-plugin'],\n       });\n-      // Had to use contructor.name because the class will be loaded via\n+      // Had to use constructor.name because the class will be loaded via\n       // require and the reference will not match with SynchronousPluginMock\n       expect(pluginManager.plugins).to.satisfy((plugins) =>\n         plugins.some((plugin) => plugin.constructor.name === 'SynchronousPluginMock')\n       );\n     });\n \n-    it('should load plugins from custom folder outside of serviceDir', () => {\n-      serviceDir = path.join(tmpDir, 'serverless-plugins-custom');\n-      const localPluginDir = path.join(serviceDir, 'local-plugin');\n-      installPlugin(localPluginDir, SynchronousPluginMock);\n+    describe('#getLocalPluginsPathPatterns()', () => {\n+      it('should return empty list without any plugins', () => {",
        "comment_created_at": "2021-11-22T20:19:17+00:00",
        "comment_author": "medikoo",
        "comment_body": "No, I mean unit test (in sense that we can run it offline without dependency on AWS or any other remote instance).\r\n\r\nIdeally if test is constructed with `runServerless` util, and then contents of result artifact is confirmed, in similar way as it is done in our old packaging tests: https://github.com/serverless/serverless/blob/ce66591a688ca734eb34eff929163134d1d21ae8/test/integrationPackage/lambda-files.tests.js#L52 (they should be at some point moved to regular unit tests and refactored to rely on `runServerless`)",
        "pr_file_module": null
      },
      {
        "comment_id": "754738671",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10259,
        "pr_file": "test/unit/lib/classes/PluginManager.test.js",
        "discussion_id": "754580591",
        "commented_code": "@@ -1837,27 +1837,47 @@ describe('PluginManager', () => {\n         localPath: serviceDir,\n         modules: ['local-plugin'],\n       });\n-      // Had to use contructor.name because the class will be loaded via\n+      // Had to use constructor.name because the class will be loaded via\n       // require and the reference will not match with SynchronousPluginMock\n       expect(pluginManager.plugins).to.satisfy((plugins) =>\n         plugins.some((plugin) => plugin.constructor.name === 'SynchronousPluginMock')\n       );\n     });\n \n-    it('should load plugins from custom folder outside of serviceDir', () => {\n-      serviceDir = path.join(tmpDir, 'serverless-plugins-custom');\n-      const localPluginDir = path.join(serviceDir, 'local-plugin');\n-      installPlugin(localPluginDir, SynchronousPluginMock);\n+    describe('#getLocalPluginsPathPatterns()', () => {\n+      it('should return empty list without any plugins', () => {",
        "comment_created_at": "2021-11-23T00:52:44+00:00",
        "comment_author": "shalvah",
        "comment_body": "Yeah, I shoulda called them \"feature tests\" instead.\r\n\r\nAdded! Thanks for the guidance.\r\n\r\n(Also, that's some really lovely test infrastructure.)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "771197313",
    "pr_number": 10384,
    "pr_file": "test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/validate.test.js",
    "created_at": "2021-12-17T08:33:56+00:00",
    "commented_code": "expect(() => awsCompileApigEvents.validate()).not.to.throw(Error);\n   });\n \n+  it('should throw when using a CUSTOM authorizer without an authorizer id', () => {",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "771197313",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10384,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/validate.test.js",
        "discussion_id": "771197313",
        "commented_code": "@@ -235,6 +235,52 @@ describe('#validate()', () => {\n     expect(() => awsCompileApigEvents.validate()).not.to.throw(Error);\n   });\n \n+  it('should throw when using a CUSTOM authorizer without an authorizer id', () => {",
        "comment_created_at": "2021-12-17T08:33:56+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "For a long time now we're only accepting new tests written with using `runServerless` utility and are slowly migrating away from the old approach. Could you please cover it with such tests instead? ",
        "pr_file_module": null
      },
      {
        "comment_id": "771566909",
        "repo_full_name": "serverless/serverless",
        "pr_number": 10384,
        "pr_file": "test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/validate.test.js",
        "discussion_id": "771197313",
        "commented_code": "@@ -235,6 +235,52 @@ describe('#validate()', () => {\n     expect(() => awsCompileApigEvents.validate()).not.to.throw(Error);\n   });\n \n+  it('should throw when using a CUSTOM authorizer without an authorizer id', () => {",
        "comment_created_at": "2021-12-17T17:28:07+00:00",
        "comment_author": "darksun",
        "comment_body": "No problem, sorry I had missed that earlier in the test README.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "625570472",
    "pr_number": 9412,
    "pr_file": "test/unit/lib/plugins/aws/package/lib/cleanupTemplateResources.test.js",
    "created_at": "2021-05-04T07:39:32+00:00",
    "commented_code": "it('Should not affect resources without null props', async () => {\n     expect(Object.keys(finalTemplate.Resources.anotherBucket.Properties).length).to.equal(1);\n   });\n+\n+  it('should remove empty resources for first policy document', async () => {\n+    const result = await runServerless({\n+      fixture: 'aws',",
    "repo_full_name": "serverless/serverless",
    "discussion_comments": [
      {
        "comment_id": "625570472",
        "repo_full_name": "serverless/serverless",
        "pr_number": 9412,
        "pr_file": "test/unit/lib/plugins/aws/package/lib/cleanupTemplateResources.test.js",
        "discussion_id": "625570472",
        "commented_code": "@@ -42,4 +42,23 @@ describe('test/unit/lib/plugins/aws/package/lib/stripNullPropsFromTemplateResour\n   it('Should not affect resources without null props', async () => {\n     expect(Object.keys(finalTemplate.Resources.anotherBucket.Properties).length).to.equal(1);\n   });\n+\n+  it('should remove empty resources for first policy document', async () => {\n+    const result = await runServerless({\n+      fixture: 'aws',",
        "comment_created_at": "2021-05-04T07:39:32+00:00",
        "comment_author": "pgrzesik",
        "comment_body": "Could we use the `function` fixture here instead? It will allow us to not extend the `aws` fixture with additional `index.js` with function implementation to keep it \"plain\". ",
        "pr_file_module": null
      }
    ]
  }
]