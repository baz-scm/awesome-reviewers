[
  {
    "discussion_id": "2293571107",
    "pr_number": 38846,
    "pr_file": "python/wpt/ohos_webdriver_test.py",
    "created_at": "2025-08-22T12:18:48+00:00",
    "commented_code": "+# This Source Code Form is subject to the terms of the Mozilla Public\n+# License, v. 2.0. If a copy of the MPL was not distributed with this\n+# file, You can obtain one at https://mozilla.org/MPL/2.0/.\n+\n+#!/usr/bin/env python3\n+\n+import argparse\n+import json\n+import logging\n+import os\n+import subprocess\n+import time\n+import sys\n+import urllib.request\n+import urllib.error\n+from typing import Dict, Optional, Any\n+\n+\n+class OHOSWebDriverController:\n+    \"\"\"Controller for running WebDriver tests on OHOS devices using HTTP API.\"\"\"\n+\n+    def __init__(self, webdriver_port: int = 7000, wpt_server_port: int = 8000) -> None:\n+        self.webdriver_port = webdriver_port\n+        self.wpt_server_port = wpt_server_port\n+        self.session_id: Optional[str] = None\n+        self.hdc_process: Optional[subprocess.Popen] = None\n+        self.wpt_server_process: Optional[subprocess.Popen] = None\n+        self.wpt_reverse_port_process: Optional[subprocess.Popen] = None\n+\n+    def setup_wpt_server_access(self) -> bool:\n+        \"\"\"Set up access to WPT server for OHOS device.\"\"\"\n+        try:\n+            cmd = [\"hdc\", \"rport\", f\"tcp:{self.wpt_server_port}\", f\"tcp:{self.wpt_server_port}\"]\n+            logging.info(f\"Setting up HDC reverse port forwarding for WPT: {' '.join(cmd)}\")\n+            self.wpt_reverse_port_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+\n+            time.sleep(2)\n+\n+            if self.wpt_reverse_port_process.poll() is not None:\n+                stdout, stderr = self.wpt_reverse_port_process.communicate()\n+                if self.wpt_reverse_port_process.returncode != 0:\n+                    logging.warning(f\"HDC reverse port forwarding failed: {stderr.decode()}\")\n+                    self.wpt_reverse_port_process = None\n+                    return False\n+\n+            logging.info(f\"HDC reverse port forwarding established for WPT server on port {self.wpt_server_port}\")\n+            return True\n+\n+        except FileNotFoundError:\n+            logging.error(\"HDC command not found. Please install HDC and add it to PATH\")\n+            return False\n+        except Exception as e:\n+            logging.error(f\"Failed to set up WPT server access: {e}\")\n+            return False\n+\n+    def setup_hdc_forwarding(self) -> bool:\n+        \"\"\"Set up HDC port forwarding for WebDriver communication.\"\"\"\n+        try:\n+            cmd = [\"hdc\", \"fport\", f\"tcp:{self.webdriver_port}\", f\"tcp:{self.webdriver_port}\"]\n+            logging.info(f\"Setting up HDC port forwarding: {' '.join(cmd)}\")\n+            self.hdc_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            time.sleep(2)",
    "repo_full_name": "servo/servo",
    "discussion_comments": [
      {
        "comment_id": "2293571107",
        "repo_full_name": "servo/servo",
        "pr_number": 38846,
        "pr_file": "python/wpt/ohos_webdriver_test.py",
        "discussion_id": "2293571107",
        "commented_code": "@@ -0,0 +1,527 @@\n+# This Source Code Form is subject to the terms of the Mozilla Public\n+# License, v. 2.0. If a copy of the MPL was not distributed with this\n+# file, You can obtain one at https://mozilla.org/MPL/2.0/.\n+\n+#!/usr/bin/env python3\n+\n+import argparse\n+import json\n+import logging\n+import os\n+import subprocess\n+import time\n+import sys\n+import urllib.request\n+import urllib.error\n+from typing import Dict, Optional, Any\n+\n+\n+class OHOSWebDriverController:\n+    \"\"\"Controller for running WebDriver tests on OHOS devices using HTTP API.\"\"\"\n+\n+    def __init__(self, webdriver_port: int = 7000, wpt_server_port: int = 8000) -> None:\n+        self.webdriver_port = webdriver_port\n+        self.wpt_server_port = wpt_server_port\n+        self.session_id: Optional[str] = None\n+        self.hdc_process: Optional[subprocess.Popen] = None\n+        self.wpt_server_process: Optional[subprocess.Popen] = None\n+        self.wpt_reverse_port_process: Optional[subprocess.Popen] = None\n+\n+    def setup_wpt_server_access(self) -> bool:\n+        \"\"\"Set up access to WPT server for OHOS device.\"\"\"\n+        try:\n+            cmd = [\"hdc\", \"rport\", f\"tcp:{self.wpt_server_port}\", f\"tcp:{self.wpt_server_port}\"]\n+            logging.info(f\"Setting up HDC reverse port forwarding for WPT: {' '.join(cmd)}\")\n+            self.wpt_reverse_port_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+\n+            time.sleep(2)\n+\n+            if self.wpt_reverse_port_process.poll() is not None:\n+                stdout, stderr = self.wpt_reverse_port_process.communicate()\n+                if self.wpt_reverse_port_process.returncode != 0:\n+                    logging.warning(f\"HDC reverse port forwarding failed: {stderr.decode()}\")\n+                    self.wpt_reverse_port_process = None\n+                    return False\n+\n+            logging.info(f\"HDC reverse port forwarding established for WPT server on port {self.wpt_server_port}\")\n+            return True\n+\n+        except FileNotFoundError:\n+            logging.error(\"HDC command not found. Please install HDC and add it to PATH\")\n+            return False\n+        except Exception as e:\n+            logging.error(f\"Failed to set up WPT server access: {e}\")\n+            return False\n+\n+    def setup_hdc_forwarding(self) -> bool:\n+        \"\"\"Set up HDC port forwarding for WebDriver communication.\"\"\"\n+        try:\n+            cmd = [\"hdc\", \"fport\", f\"tcp:{self.webdriver_port}\", f\"tcp:{self.webdriver_port}\"]\n+            logging.info(f\"Setting up HDC port forwarding: {' '.join(cmd)}\")\n+            self.hdc_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            time.sleep(2)",
        "comment_created_at": "2025-08-22T12:18:48+00:00",
        "comment_author": "jschwe",
        "comment_body": "I think it would be easier to just use `subprocess.run()` or `subprocess.check_output()`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2293577808",
    "pr_number": 38846,
    "pr_file": "python/wpt/ohos_webdriver_test.py",
    "created_at": "2025-08-22T12:21:00+00:00",
    "commented_code": "+# This Source Code Form is subject to the terms of the Mozilla Public\n+# License, v. 2.0. If a copy of the MPL was not distributed with this\n+# file, You can obtain one at https://mozilla.org/MPL/2.0/.\n+\n+#!/usr/bin/env python3\n+\n+import argparse\n+import json\n+import logging\n+import os\n+import subprocess\n+import time\n+import sys\n+import urllib.request\n+import urllib.error\n+from typing import Dict, Optional, Any\n+\n+\n+class OHOSWebDriverController:\n+    \"\"\"Controller for running WebDriver tests on OHOS devices using HTTP API.\"\"\"\n+\n+    def __init__(self, webdriver_port: int = 7000, wpt_server_port: int = 8000) -> None:\n+        self.webdriver_port = webdriver_port\n+        self.wpt_server_port = wpt_server_port\n+        self.session_id: Optional[str] = None\n+        self.hdc_process: Optional[subprocess.Popen] = None\n+        self.wpt_server_process: Optional[subprocess.Popen] = None\n+        self.wpt_reverse_port_process: Optional[subprocess.Popen] = None\n+\n+    def setup_wpt_server_access(self) -> bool:\n+        \"\"\"Set up access to WPT server for OHOS device.\"\"\"\n+        try:\n+            cmd = [\"hdc\", \"rport\", f\"tcp:{self.wpt_server_port}\", f\"tcp:{self.wpt_server_port}\"]\n+            logging.info(f\"Setting up HDC reverse port forwarding for WPT: {' '.join(cmd)}\")\n+            self.wpt_reverse_port_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+\n+            time.sleep(2)\n+\n+            if self.wpt_reverse_port_process.poll() is not None:\n+                stdout, stderr = self.wpt_reverse_port_process.communicate()\n+                if self.wpt_reverse_port_process.returncode != 0:\n+                    logging.warning(f\"HDC reverse port forwarding failed: {stderr.decode()}\")\n+                    self.wpt_reverse_port_process = None\n+                    return False\n+\n+            logging.info(f\"HDC reverse port forwarding established for WPT server on port {self.wpt_server_port}\")\n+            return True\n+\n+        except FileNotFoundError:\n+            logging.error(\"HDC command not found. Please install HDC and add it to PATH\")\n+            return False\n+        except Exception as e:\n+            logging.error(f\"Failed to set up WPT server access: {e}\")\n+            return False\n+\n+    def setup_hdc_forwarding(self) -> bool:\n+        \"\"\"Set up HDC port forwarding for WebDriver communication.\"\"\"\n+        try:\n+            cmd = [\"hdc\", \"fport\", f\"tcp:{self.webdriver_port}\", f\"tcp:{self.webdriver_port}\"]\n+            logging.info(f\"Setting up HDC port forwarding: {' '.join(cmd)}\")\n+            self.hdc_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            time.sleep(2)\n+\n+            if self.hdc_process.poll() is not None:\n+                stdout, stderr = self.hdc_process.communicate()\n+                if self.hdc_process.returncode != 0:\n+                    raise RuntimeError(f\"HDC forwarding failed: {stderr.decode()}\")",
    "repo_full_name": "servo/servo",
    "discussion_comments": [
      {
        "comment_id": "2293577808",
        "repo_full_name": "servo/servo",
        "pr_number": 38846,
        "pr_file": "python/wpt/ohos_webdriver_test.py",
        "discussion_id": "2293577808",
        "commented_code": "@@ -0,0 +1,527 @@\n+# This Source Code Form is subject to the terms of the Mozilla Public\n+# License, v. 2.0. If a copy of the MPL was not distributed with this\n+# file, You can obtain one at https://mozilla.org/MPL/2.0/.\n+\n+#!/usr/bin/env python3\n+\n+import argparse\n+import json\n+import logging\n+import os\n+import subprocess\n+import time\n+import sys\n+import urllib.request\n+import urllib.error\n+from typing import Dict, Optional, Any\n+\n+\n+class OHOSWebDriverController:\n+    \"\"\"Controller for running WebDriver tests on OHOS devices using HTTP API.\"\"\"\n+\n+    def __init__(self, webdriver_port: int = 7000, wpt_server_port: int = 8000) -> None:\n+        self.webdriver_port = webdriver_port\n+        self.wpt_server_port = wpt_server_port\n+        self.session_id: Optional[str] = None\n+        self.hdc_process: Optional[subprocess.Popen] = None\n+        self.wpt_server_process: Optional[subprocess.Popen] = None\n+        self.wpt_reverse_port_process: Optional[subprocess.Popen] = None\n+\n+    def setup_wpt_server_access(self) -> bool:\n+        \"\"\"Set up access to WPT server for OHOS device.\"\"\"\n+        try:\n+            cmd = [\"hdc\", \"rport\", f\"tcp:{self.wpt_server_port}\", f\"tcp:{self.wpt_server_port}\"]\n+            logging.info(f\"Setting up HDC reverse port forwarding for WPT: {' '.join(cmd)}\")\n+            self.wpt_reverse_port_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+\n+            time.sleep(2)\n+\n+            if self.wpt_reverse_port_process.poll() is not None:\n+                stdout, stderr = self.wpt_reverse_port_process.communicate()\n+                if self.wpt_reverse_port_process.returncode != 0:\n+                    logging.warning(f\"HDC reverse port forwarding failed: {stderr.decode()}\")\n+                    self.wpt_reverse_port_process = None\n+                    return False\n+\n+            logging.info(f\"HDC reverse port forwarding established for WPT server on port {self.wpt_server_port}\")\n+            return True\n+\n+        except FileNotFoundError:\n+            logging.error(\"HDC command not found. Please install HDC and add it to PATH\")\n+            return False\n+        except Exception as e:\n+            logging.error(f\"Failed to set up WPT server access: {e}\")\n+            return False\n+\n+    def setup_hdc_forwarding(self) -> bool:\n+        \"\"\"Set up HDC port forwarding for WebDriver communication.\"\"\"\n+        try:\n+            cmd = [\"hdc\", \"fport\", f\"tcp:{self.webdriver_port}\", f\"tcp:{self.webdriver_port}\"]\n+            logging.info(f\"Setting up HDC port forwarding: {' '.join(cmd)}\")\n+            self.hdc_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            time.sleep(2)\n+\n+            if self.hdc_process.poll() is not None:\n+                stdout, stderr = self.hdc_process.communicate()\n+                if self.hdc_process.returncode != 0:\n+                    raise RuntimeError(f\"HDC forwarding failed: {stderr.decode()}\")",
        "comment_created_at": "2025-08-22T12:21:00+00:00",
        "comment_author": "jschwe",
        "comment_body": "I remember some `hdc` commands always return 0, even if they fail. Could you do a quick test if `hdc` returns something non-zero if you do something wrong like `hdc fport tcp: tcp:`",
        "pr_file_module": null
      },
      {
        "comment_id": "2309505067",
        "repo_full_name": "servo/servo",
        "pr_number": 38846,
        "pr_file": "python/wpt/ohos_webdriver_test.py",
        "discussion_id": "2293577808",
        "commented_code": "@@ -0,0 +1,527 @@\n+# This Source Code Form is subject to the terms of the Mozilla Public\n+# License, v. 2.0. If a copy of the MPL was not distributed with this\n+# file, You can obtain one at https://mozilla.org/MPL/2.0/.\n+\n+#!/usr/bin/env python3\n+\n+import argparse\n+import json\n+import logging\n+import os\n+import subprocess\n+import time\n+import sys\n+import urllib.request\n+import urllib.error\n+from typing import Dict, Optional, Any\n+\n+\n+class OHOSWebDriverController:\n+    \"\"\"Controller for running WebDriver tests on OHOS devices using HTTP API.\"\"\"\n+\n+    def __init__(self, webdriver_port: int = 7000, wpt_server_port: int = 8000) -> None:\n+        self.webdriver_port = webdriver_port\n+        self.wpt_server_port = wpt_server_port\n+        self.session_id: Optional[str] = None\n+        self.hdc_process: Optional[subprocess.Popen] = None\n+        self.wpt_server_process: Optional[subprocess.Popen] = None\n+        self.wpt_reverse_port_process: Optional[subprocess.Popen] = None\n+\n+    def setup_wpt_server_access(self) -> bool:\n+        \"\"\"Set up access to WPT server for OHOS device.\"\"\"\n+        try:\n+            cmd = [\"hdc\", \"rport\", f\"tcp:{self.wpt_server_port}\", f\"tcp:{self.wpt_server_port}\"]\n+            logging.info(f\"Setting up HDC reverse port forwarding for WPT: {' '.join(cmd)}\")\n+            self.wpt_reverse_port_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+\n+            time.sleep(2)\n+\n+            if self.wpt_reverse_port_process.poll() is not None:\n+                stdout, stderr = self.wpt_reverse_port_process.communicate()\n+                if self.wpt_reverse_port_process.returncode != 0:\n+                    logging.warning(f\"HDC reverse port forwarding failed: {stderr.decode()}\")\n+                    self.wpt_reverse_port_process = None\n+                    return False\n+\n+            logging.info(f\"HDC reverse port forwarding established for WPT server on port {self.wpt_server_port}\")\n+            return True\n+\n+        except FileNotFoundError:\n+            logging.error(\"HDC command not found. Please install HDC and add it to PATH\")\n+            return False\n+        except Exception as e:\n+            logging.error(f\"Failed to set up WPT server access: {e}\")\n+            return False\n+\n+    def setup_hdc_forwarding(self) -> bool:\n+        \"\"\"Set up HDC port forwarding for WebDriver communication.\"\"\"\n+        try:\n+            cmd = [\"hdc\", \"fport\", f\"tcp:{self.webdriver_port}\", f\"tcp:{self.webdriver_port}\"]\n+            logging.info(f\"Setting up HDC port forwarding: {' '.join(cmd)}\")\n+            self.hdc_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            time.sleep(2)\n+\n+            if self.hdc_process.poll() is not None:\n+                stdout, stderr = self.hdc_process.communicate()\n+                if self.hdc_process.returncode != 0:\n+                    raise RuntimeError(f\"HDC forwarding failed: {stderr.decode()}\")",
        "comment_created_at": "2025-08-29T08:16:03+00:00",
        "comment_author": "abdelrahman1234567",
        "comment_body": "Yeah i just tested, it actually always returns 0. I will try to check the error message instead of the return code",
        "pr_file_module": null
      }
    ]
  }
]