[
  {
    "discussion_id": "2283947820",
    "pr_number": 9278,
    "pr_file": "python/sglang/srt/layers/communicator.py",
    "created_at": "2025-08-19T03:05:23+00:00",
    "commented_code": "and forward_batch.dp_padding_mode.is_max_len()\n         )\n \n+    def should_fuse_mlp_allreduce_with_next_layer(\n+        self, forward_batch: ForwardBatch\n+    ) -> bool:\n+        try:\n+            speculative_algo = global_server_args_dict.get(\n+                \"speculative_algorithm\", None\n+            )\n+            if (\n+                is_dp_attention_enabled()\n+                and speculative_algo is not None\n+                and hasattr(speculative_algo, \"is_eagle\")\n+                and speculative_algo.is_eagle()\n+            ):\n+                return False\n+        except Exception:",
    "repo_full_name": "sgl-project/sglang",
    "discussion_comments": [
      {
        "comment_id": "2283947820",
        "repo_full_name": "sgl-project/sglang",
        "pr_number": 9278,
        "pr_file": "python/sglang/srt/layers/communicator.py",
        "discussion_id": "2283947820",
        "commented_code": "@@ -264,6 +269,49 @@ def should_use_reduce_scatter(self, forward_batch: ForwardBatch):\n             and forward_batch.dp_padding_mode.is_max_len()\n         )\n \n+    def should_fuse_mlp_allreduce_with_next_layer(\n+        self, forward_batch: ForwardBatch\n+    ) -> bool:\n+        try:\n+            speculative_algo = global_server_args_dict.get(\n+                \"speculative_algorithm\", None\n+            )\n+            if (\n+                is_dp_attention_enabled()\n+                and speculative_algo is not None\n+                and hasattr(speculative_algo, \"is_eagle\")\n+                and speculative_algo.is_eagle()\n+            ):\n+                return False\n+        except Exception:",
        "comment_created_at": "2025-08-19T03:05:23+00:00",
        "comment_author": "fzyzcjy",
        "comment_body": "nit: would be great if we do not do `except Exception`. which part is throwing here? we may do more checks, e.g. the `hasattr` looks reasonable",
        "pr_file_module": null
      },
      {
        "comment_id": "2283955565",
        "repo_full_name": "sgl-project/sglang",
        "pr_number": 9278,
        "pr_file": "python/sglang/srt/layers/communicator.py",
        "discussion_id": "2283947820",
        "commented_code": "@@ -264,6 +269,49 @@ def should_use_reduce_scatter(self, forward_batch: ForwardBatch):\n             and forward_batch.dp_padding_mode.is_max_len()\n         )\n \n+    def should_fuse_mlp_allreduce_with_next_layer(\n+        self, forward_batch: ForwardBatch\n+    ) -> bool:\n+        try:\n+            speculative_algo = global_server_args_dict.get(\n+                \"speculative_algorithm\", None\n+            )\n+            if (\n+                is_dp_attention_enabled()\n+                and speculative_algo is not None\n+                and hasattr(speculative_algo, \"is_eagle\")\n+                and speculative_algo.is_eagle()\n+            ):\n+                return False\n+        except Exception:",
        "comment_created_at": "2025-08-19T03:12:50+00:00",
        "comment_author": "BBuf",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2279018517",
    "pr_number": 9234,
    "pr_file": "python/sglang/srt/model_executor/mindspore_runner.py",
    "created_at": "2025-08-18T13:06:55+00:00",
    "commented_code": "+# SPDX-License-Identifier: Apache-2.0\n+# SPDX-FileCopyrightText: Copyright contributors to the SGLang project\n+\"\"\"ms_runner launch MindSpore distributed modules.\"\"\"\n+\n+import multiprocessing as mp\n+import os\n+import sys\n+from pathlib import Path\n+\n+import mindspore as ms\n+import torch\n+from mindspore._c_expression import GroupOptions\n+from mindspore.communication import create_group\n+\n+from sglang.srt.distributed.parallel_state import _groups\n+\n+\n+class _Tmp:\n+    def __init__(self):\n+        self.sched_p = None\n+\n+    def set_sched_process(self, p):\n+        self.sched_p = p\n+\n+    def __del__(self):\n+        if self.sched_p:\n+            self.sched_p.kill()\n+\n+\n+_tmp = _Tmp()\n+\n+\n+def _get_host_and_ip(distributed_init_method):\n+    try:\n+        ip_str, port_str = distributed_init_method.split(\":\")[-2:]\n+        ip = ip_str.split(\"/\")[-1]\n+        port = int(port_str)\n+    except Exception as e:\n+        raise RuntimeError(\n+            \"Cannot get host and port information from %s, error: %s!\"\n+            % (distributed_init_method, str(e))\n+        )",
    "repo_full_name": "sgl-project/sglang",
    "discussion_comments": [
      {
        "comment_id": "2282346103",
        "repo_full_name": "sgl-project/sglang",
        "pr_number": 9234,
        "pr_file": "python/sglang/srt/model_executor/mindspore_runner.py",
        "discussion_id": "2279018517",
        "commented_code": "@@ -0,0 +1,117 @@\n+# SPDX-License-Identifier: Apache-2.0\n+# SPDX-FileCopyrightText: Copyright contributors to the SGLang project\n+\"\"\"ms_runner launch MindSpore distributed modules.\"\"\"\n+\n+import multiprocessing as mp\n+import os\n+import sys\n+from pathlib import Path\n+\n+import mindspore as ms\n+import torch\n+from mindspore._c_expression import GroupOptions\n+from mindspore.communication import create_group\n+\n+from sglang.srt.distributed.parallel_state import _groups\n+\n+\n+class _Tmp:\n+    def __init__(self):\n+        self.sched_p = None\n+\n+    def set_sched_process(self, p):\n+        self.sched_p = p\n+\n+    def __del__(self):\n+        if self.sched_p:\n+            self.sched_p.kill()\n+\n+\n+_tmp = _Tmp()\n+\n+\n+def _get_host_and_ip(distributed_init_method):\n+    try:\n+        ip_str, port_str = distributed_init_method.split(\":\")[-2:]\n+        ip = ip_str.split(\"/\")[-1]\n+        port = int(port_str)\n+    except Exception as e:\n+        raise RuntimeError(\n+            \"Cannot get host and port information from %s, error: %s!\"\n+            % (distributed_init_method, str(e))\n+        )",
        "comment_created_at": "2025-08-18T13:06:55+00:00",
        "comment_author": "chz34",
        "comment_body": "Need to catch all kinds of exception and raise the runtime error to show the corresponding information.",
        "pr_file_module": null
      }
    ]
  }
]