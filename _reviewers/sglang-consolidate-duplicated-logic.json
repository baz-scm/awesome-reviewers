[
  {
    "discussion_id": "2241380203",
    "pr_number": 6946,
    "pr_file": "sgl-kernel/csrc/moe/moe_fused_gate.cu",
    "created_at": "2025-07-30T02:09:47+00:00",
    "commented_code": "int thread_group_idx = tidx % params.THREADS_PER_ROW;\n   int first_elt_read_by_thread = thread_group_idx * params.VPT;\n \n-  // Create local arrays for the row chunk and bias chunk and then reinterpret the address of row_chunk as a pointer to\n-  // AccessType.\n-  T* thread_read_ptr = thread_row_ptr + first_elt_read_by_thread;\n-  Array<T, MAX_VPT> row_chunk;\n-  AccessType<T> const* vec_thread_read_ptr = reinterpret_cast<AccessType<T> const*>(thread_read_ptr);\n-\n-  T* bias_thread_read_ptr = bias_ptr + first_elt_read_by_thread;\n-  Array<T, MAX_VPT> bias_chunk;\n-  AccessType<T> const* vec_bias_thread_read_ptr = reinterpret_cast<AccessType<T> const*>(bias_thread_read_ptr);\n-\n+  // Select the execution path based on the VPT value\n+  if (params.VPT <= 32) {",
    "repo_full_name": "sgl-project/sglang",
    "discussion_comments": [
      {
        "comment_id": "2241380203",
        "repo_full_name": "sgl-project/sglang",
        "pr_number": 6946,
        "pr_file": "sgl-kernel/csrc/moe/moe_fused_gate.cu",
        "discussion_id": "2241380203",
        "commented_code": "@@ -78,176 +86,475 @@ __device__ void moe_fused_gate_impl(\n   int thread_group_idx = tidx % params.THREADS_PER_ROW;\n   int first_elt_read_by_thread = thread_group_idx * params.VPT;\n \n-  // Create local arrays for the row chunk and bias chunk and then reinterpret the address of row_chunk as a pointer to\n-  // AccessType.\n-  T* thread_read_ptr = thread_row_ptr + first_elt_read_by_thread;\n-  Array<T, MAX_VPT> row_chunk;\n-  AccessType<T> const* vec_thread_read_ptr = reinterpret_cast<AccessType<T> const*>(thread_read_ptr);\n-\n-  T* bias_thread_read_ptr = bias_ptr + first_elt_read_by_thread;\n-  Array<T, MAX_VPT> bias_chunk;\n-  AccessType<T> const* vec_bias_thread_read_ptr = reinterpret_cast<AccessType<T> const*>(bias_thread_read_ptr);\n-\n+  // Select the execution path based on the VPT value\n+  if (params.VPT <= 32) {",
        "comment_created_at": "2025-07-30T02:09:47+00:00",
        "comment_author": "yuan-luo",
        "comment_body": "There are quite a lot of duplicated code between \"params.VPT <= 32\" and \"else\" branches, I think they can be consolidated into one sub kernel, or split them into 2 separated kernels.",
        "pr_file_module": null
      },
      {
        "comment_id": "2246888972",
        "repo_full_name": "sgl-project/sglang",
        "pr_number": 6946,
        "pr_file": "sgl-kernel/csrc/moe/moe_fused_gate.cu",
        "discussion_id": "2241380203",
        "commented_code": "@@ -78,176 +86,475 @@ __device__ void moe_fused_gate_impl(\n   int thread_group_idx = tidx % params.THREADS_PER_ROW;\n   int first_elt_read_by_thread = thread_group_idx * params.VPT;\n \n-  // Create local arrays for the row chunk and bias chunk and then reinterpret the address of row_chunk as a pointer to\n-  // AccessType.\n-  T* thread_read_ptr = thread_row_ptr + first_elt_read_by_thread;\n-  Array<T, MAX_VPT> row_chunk;\n-  AccessType<T> const* vec_thread_read_ptr = reinterpret_cast<AccessType<T> const*>(thread_read_ptr);\n-\n-  T* bias_thread_read_ptr = bias_ptr + first_elt_read_by_thread;\n-  Array<T, MAX_VPT> bias_chunk;\n-  AccessType<T> const* vec_bias_thread_read_ptr = reinterpret_cast<AccessType<T> const*>(bias_thread_read_ptr);\n-\n+  // Select the execution path based on the VPT value\n+  if (params.VPT <= 32) {",
        "comment_created_at": "2025-08-01T04:50:04+00:00",
        "comment_author": "ltaodream",
        "comment_body": "Thanks for your suggestion! I have refactored the code to consolidate the logic for both small and large VPT cases into a unified kernel implementation, minimizing code duplication while keeping the structure clear and maintainable.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2265095709",
    "pr_number": 9014,
    "pr_file": "sgl-kernel/csrc/elementwise/pos_enc.cuh",
    "created_at": "2025-08-10T03:20:35+00:00",
    "commented_code": null,
    "repo_full_name": "sgl-project/sglang",
    "discussion_comments": [
      {
        "comment_id": "2265095709",
        "repo_full_name": "sgl-project/sglang",
        "pr_number": 9014,
        "pr_file": "sgl-kernel/csrc/elementwise/pos_enc.cuh",
        "discussion_id": "2265095709",
        "commented_code": null,
        "comment_created_at": "2025-08-10T03:20:35+00:00",
        "comment_author": "fzyzcjy",
        "comment_body": "confused why do we have a new file instead of minor modifications",
        "pr_file_module": null
      },
      {
        "comment_id": "2265147365",
        "repo_full_name": "sgl-project/sglang",
        "pr_number": 9014,
        "pr_file": "sgl-kernel/csrc/elementwise/pos_enc.cuh",
        "discussion_id": "2265095709",
        "commented_code": null,
        "comment_created_at": "2025-08-10T07:07:51+00:00",
        "comment_author": "JeremieMelo",
        "comment_body": "I am unsure about the best practice for such modifications, e.g., ensuring compatibility. I currently use this style to avoid touching any old files/functions/logic, and introduce fully standalone files to decouple. Any suggestion to make it more compatible /extensible for future updates is appreciated.",
        "pr_file_module": null
      },
      {
        "comment_id": "2265153518",
        "repo_full_name": "sgl-project/sglang",
        "pr_number": 9014,
        "pr_file": "sgl-kernel/csrc/elementwise/pos_enc.cuh",
        "discussion_id": "2265095709",
        "commented_code": null,
        "comment_created_at": "2025-08-10T07:25:53+00:00",
        "comment_author": "fzyzcjy",
        "comment_body": "I personally think the fuse is only a dozen lines thus can be inlined. note that you can use c++ template and constexpr if there are overheads",
        "pr_file_module": null
      }
    ]
  }
]