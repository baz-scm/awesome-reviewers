[
  {
    "discussion_id": "2288390958",
    "pr_number": 8464,
    "pr_file": "python/sglang/srt/layers/moe/cutlass_w4a8_moe.py",
    "created_at": "2025-08-20T14:36:30+00:00",
    "commented_code": "Returns:\n     - torch.Tensor: The fp8 output tensor after applying the MoE layer.\n     \"\"\"\n-    assert topk_weights.shape == topk_ids_.shape, \"topk shape mismatch\"\n+    assert (\n+        topk_weights.shape == topk_ids_.shape if topk_weights is not None else True\n+    ), \"topk shape mismatch\"",
    "repo_full_name": "sgl-project/sglang",
    "discussion_comments": [
      {
        "comment_id": "2288390958",
        "repo_full_name": "sgl-project/sglang",
        "pr_number": 8464,
        "pr_file": "python/sglang/srt/layers/moe/cutlass_w4a8_moe.py",
        "discussion_id": "2288390958",
        "commented_code": "@@ -83,10 +85,14 @@ def cutlass_w4a8_moe(\n     Returns:\n     - torch.Tensor: The fp8 output tensor after applying the MoE layer.\n     \"\"\"\n-    assert topk_weights.shape == topk_ids_.shape, \"topk shape mismatch\"\n+    assert (\n+        topk_weights.shape == topk_ids_.shape if topk_weights is not None else True\n+    ), \"topk shape mismatch\"",
        "comment_created_at": "2025-08-20T14:36:30+00:00",
        "comment_author": "fzyzcjy",
        "comment_body": "```suggestion\n    assert (\n        (topk_weights is None) or (topk_weights.shape == topk_ids_.shape)\n    ), \"topk shape mismatch\"\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2279123996",
    "pr_number": 6407,
    "pr_file": "python/sglang/srt/managers/scheduler_update_weights_mixin.py",
    "created_at": "2025-08-15T14:45:20+00:00",
    "commented_code": "url = params[\"url\"]\n \n         worker = self.tp_worker.worker\n-\n         worker.model_runner.save_remote_model(url)\n \n+        if self.draft_worker is not None:\n+            draft_worker = self.draft_worker.worker\n+            draft_url = params[\"draft_url\"]",
    "repo_full_name": "sgl-project/sglang",
    "discussion_comments": [
      {
        "comment_id": "2279123996",
        "repo_full_name": "sgl-project/sglang",
        "pr_number": 6407,
        "pr_file": "python/sglang/srt/managers/scheduler_update_weights_mixin.py",
        "discussion_id": "2279123996",
        "commented_code": "@@ -115,9 +115,14 @@ def save_remote_model(self, params):\n         url = params[\"url\"]\n \n         worker = self.tp_worker.worker\n-\n         worker.model_runner.save_remote_model(url)\n \n+        if self.draft_worker is not None:\n+            draft_worker = self.draft_worker.worker\n+            draft_url = params[\"draft_url\"]",
        "comment_created_at": "2025-08-15T14:45:20+00:00",
        "comment_author": "mickqian",
        "comment_body": "we should use `params.get(\"draft_url\", None)` to avoid KeyError",
        "pr_file_module": null
      },
      {
        "comment_id": "2279124864",
        "repo_full_name": "sgl-project/sglang",
        "pr_number": 6407,
        "pr_file": "python/sglang/srt/managers/scheduler_update_weights_mixin.py",
        "discussion_id": "2279123996",
        "commented_code": "@@ -115,9 +115,14 @@ def save_remote_model(self, params):\n         url = params[\"url\"]\n \n         worker = self.tp_worker.worker\n-\n         worker.model_runner.save_remote_model(url)\n \n+        if self.draft_worker is not None:\n+            draft_worker = self.draft_worker.worker\n+            draft_url = params[\"draft_url\"]",
        "comment_created_at": "2025-08-15T14:45:50+00:00",
        "comment_author": "mickqian",
        "comment_body": "And also, move line 121 to before 124",
        "pr_file_module": null
      },
      {
        "comment_id": "2279319775",
        "repo_full_name": "sgl-project/sglang",
        "pr_number": 6407,
        "pr_file": "python/sglang/srt/managers/scheduler_update_weights_mixin.py",
        "discussion_id": "2279123996",
        "commented_code": "@@ -115,9 +115,14 @@ def save_remote_model(self, params):\n         url = params[\"url\"]\n \n         worker = self.tp_worker.worker\n-\n         worker.model_runner.save_remote_model(url)\n \n+        if self.draft_worker is not None:\n+            draft_worker = self.draft_worker.worker\n+            draft_url = params[\"draft_url\"]",
        "comment_created_at": "2025-08-15T15:41:32+00:00",
        "comment_author": "DellCurry",
        "comment_body": "hello @mickqian, all comments resolved. Thanks for your advice and hoping for review again!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2280726040",
    "pr_number": 9249,
    "pr_file": "python/sglang/test/runners.py",
    "created_at": "2025-08-17T05:16:33+00:00",
    "commented_code": "tp_size: int = 1,\n         model_impl: str = \"auto\",\n         port: int = DEFAULT_PORT_FOR_SRT_TEST_RUNNER,\n-        lora_paths: List[str] = None,\n+        lora_paths: Union[None, list[str], list[dict]] = None,",
    "repo_full_name": "sgl-project/sglang",
    "discussion_comments": [
      {
        "comment_id": "2280726040",
        "repo_full_name": "sgl-project/sglang",
        "pr_number": 9249,
        "pr_file": "python/sglang/test/runners.py",
        "discussion_id": "2280726040",
        "commented_code": "@@ -488,7 +488,7 @@ def __init__(\n         tp_size: int = 1,\n         model_impl: str = \"auto\",\n         port: int = DEFAULT_PORT_FOR_SRT_TEST_RUNNER,\n-        lora_paths: List[str] = None,\n+        lora_paths: Union[None, list[str], list[dict]] = None,",
        "comment_created_at": "2025-08-17T05:16:33+00:00",
        "comment_author": "Fridge003",
        "comment_body": "Also, we may use Optional instead",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2258719239",
    "pr_number": 8666,
    "pr_file": "python/sglang/srt/layers/attention/torch_native_backend.py",
    "created_at": "2025-08-07T02:25:29+00:00",
    "commented_code": "seq_lens: torch.Tensor,\n         extend_prefix_lens: torch.Tensor,\n         extend_seq_lens: torch.Tensor,\n+        encoder_lens=None,",
    "repo_full_name": "sgl-project/sglang",
    "discussion_comments": [
      {
        "comment_id": "2258719239",
        "repo_full_name": "sgl-project/sglang",
        "pr_number": 8666,
        "pr_file": "python/sglang/srt/layers/attention/torch_native_backend.py",
        "discussion_id": "2258719239",
        "commented_code": "@@ -35,9 +35,11 @@ def _run_sdpa_forward_extend(\n         seq_lens: torch.Tensor,\n         extend_prefix_lens: torch.Tensor,\n         extend_seq_lens: torch.Tensor,\n+        encoder_lens=None,",
        "comment_created_at": "2025-08-07T02:25:29+00:00",
        "comment_author": "mingfeima",
        "comment_body": "```suggestion\r\n        encoder_lens: Optional[torch.Tensor] = None,\r\n```\r\n\r\nUse Optional.",
        "pr_file_module": null
      }
    ]
  }
]