[
  {
    "discussion_id": "2270803912",
    "pr_number": 8733,
    "pr_file": "frontend/src/lib/newQueryBuilder/transformQueryBuilderDataModel.ts",
    "created_at": "2025-08-12T18:41:05+00:00",
    "commented_code": "queryData.push({\n \t\t\t\t\t...baseQuery,\n \t\t\t\t\tfilters: queryFromData.filters,\n+\t\t\t\t\tfilter: queryFromData.filter,\n+\t\t\t\t\taggregations: queryFromData.aggregations,\n+\t\t\t\t\thaving: queryFromData.having,",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2270803912",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8733,
        "pr_file": "frontend/src/lib/newQueryBuilder/transformQueryBuilderDataModel.ts",
        "discussion_id": "2270803912",
        "commented_code": "@@ -45,6 +45,9 @@ export const transformQueryBuilderDataModel = (\n \t\t\t\tqueryData.push({\n \t\t\t\t\t...baseQuery,\n \t\t\t\t\tfilters: queryFromData.filters,\n+\t\t\t\t\tfilter: queryFromData.filter,\n+\t\t\t\t\taggregations: queryFromData.aggregations,\n+\t\t\t\t\thaving: queryFromData.having,",
        "comment_created_at": "2025-08-12T18:41:05+00:00",
        "comment_author": "srikanthccv",
        "comment_body": "Please help me understand the code paths here.\n\nWhat is\n\n1. transformQueryBuilderDataModel\n2. mapQueryDataFromApi\n3. Why is QueryBuilderData passed to `transformQueryBuilderDataModel`\n4. Why is something desided on the undefined check of `if (!isUndefined(baseQuery)) {`?\n5. How can I know where else is `aggregations:` are not passed correctly? Or in other words how can we quickly glance the codebase and see where it should be populated but not populated.",
        "pr_file_module": null
      },
      {
        "comment_id": "2275595806",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8733,
        "pr_file": "frontend/src/lib/newQueryBuilder/transformQueryBuilderDataModel.ts",
        "discussion_id": "2270803912",
        "commented_code": "@@ -45,6 +45,9 @@ export const transformQueryBuilderDataModel = (\n \t\t\t\tqueryData.push({\n \t\t\t\t\t...baseQuery,\n \t\t\t\t\tfilters: queryFromData.filters,\n+\t\t\t\t\tfilter: queryFromData.filter,\n+\t\t\t\t\taggregations: queryFromData.aggregations,\n+\t\t\t\t\thaving: queryFromData.having,",
        "comment_created_at": "2025-08-14T06:19:32+00:00",
        "comment_author": "SagarRajput-7",
        "comment_body": "I revisited the whole thing. Here is the summary - \r\n\r\n`mapQueryDataFromApi` is used for converting compositeQuery to Query, it's a format change required to push the result to the url compositeQuery format, for e.g. in alert creation flow, we have a payload format to give to the `sub_var` api, from its response, we pick the `mapQueryDataFromApi(compositequery)` part and push it to the url and use that to redirect to a new alert page.\r\n\r\ntransformQueryBuilderDataModel - is a function that splits the queries to (query and queryformula) - eventually to make builderqueries, its sub-function helper for the main - mapQueryDataFromApi\r\n\r\nFor the rest, I went through the logic again to identify why the `!isUndefined(baseQuery)` or, say, baseQuery in general was used. It was because with the older `format` api, the stepIntervals were getting intelligently modified by the BE according to the timerange, etc., so to retain the true value from the user while creating alerts from the dashboard, this logic was introduced to use the baseQuery, i.e. the original query config from the dashboard, to have the true value of the stepInterval.\r\n\r\nBut as with the new `sub_var` api, we won't be having this issue, as I see I am getting stepInterval back as it was earlier, hence this whole logic is no longer required (though I need to confirm once with @srikanthccv if this expectation is correct).\r\n\r\nHence, I have refactored the logic around this\r\n\r\nRegarding the last part with aggregations, there are essentially two categories to it: [explorer, dashboard] and [alert, views] \r\n\r\n[explorer, dashboard] - either it gets from the dashboard JSON/config or through the QB (unerlining using - prepareQueryRangePayloadV5 and convertV5ResponseToLegacy, used for payload and response)\r\n\r\n[alert, views] - through QB or the above flow, where they were created from explorer or dashboard panels, where they go through `mapQueryDataFromApi`\r\n\r\nWith this change we have covered those areas.",
        "pr_file_module": null
      },
      {
        "comment_id": "2277355697",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8733,
        "pr_file": "frontend/src/lib/newQueryBuilder/transformQueryBuilderDataModel.ts",
        "discussion_id": "2270803912",
        "commented_code": "@@ -45,6 +45,9 @@ export const transformQueryBuilderDataModel = (\n \t\t\t\tqueryData.push({\n \t\t\t\t\t...baseQuery,\n \t\t\t\t\tfilters: queryFromData.filters,\n+\t\t\t\t\tfilter: queryFromData.filter,\n+\t\t\t\t\taggregations: queryFromData.aggregations,\n+\t\t\t\t\thaving: queryFromData.having,",
        "comment_created_at": "2025-08-14T17:50:37+00:00",
        "comment_author": "srikanthccv",
        "comment_body": ">Regarding the last part with aggregations, there are essentially two categories to it: [explorer, dashboard] and [alert, views]\r\n\r\n\r\nThis doesn't answer my question. What I am looking for is, how do we ensure that `aggregations` is always passed (as missing aggregations array creates bugs)",
        "pr_file_module": null
      },
      {
        "comment_id": "2282912922",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8733,
        "pr_file": "frontend/src/lib/newQueryBuilder/transformQueryBuilderDataModel.ts",
        "discussion_id": "2270803912",
        "commented_code": "@@ -45,6 +45,9 @@ export const transformQueryBuilderDataModel = (\n \t\t\t\tqueryData.push({\n \t\t\t\t\t...baseQuery,\n \t\t\t\t\tfilters: queryFromData.filters,\n+\t\t\t\t\tfilter: queryFromData.filter,\n+\t\t\t\t\taggregations: queryFromData.aggregations,\n+\t\t\t\t\thaving: queryFromData.having,",
        "comment_created_at": "2025-08-18T16:36:41+00:00",
        "comment_author": "SagarRajput-7",
        "comment_body": "As discussed, we will take it up in a more global scope and under this ticket - https://github.com/SigNoz/engineering-pod/issues/2821",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2296516763",
    "pr_number": 8902,
    "pr_file": "frontend/src/api/v5/queryRange/prepareQueryRangePayloadV5.ts",
    "created_at": "2025-08-24T05:35:00+00:00",
    "commented_code": "selectFields: isEmpty(nonEmptySelectColumns)\n \t\t\t? undefined\n \t\t\t: nonEmptySelectColumns?.map(\n-\t\t\t\t\t(column: any): TelemetryFieldKey => ({\n-\t\t\t\t\t\tname: column.name ?? column.key,\n-\t\t\t\t\t\tfieldDataType:\n-\t\t\t\t\t\t\tcolumn?.fieldDataType ?? (column?.dataType as FieldDataType),\n-\t\t\t\t\t\tfieldContext: column?.fieldContext ?? (column?.type as FieldContext),\n-\t\t\t\t\t\tsignal: column?.signal ?? undefined,\n-\t\t\t\t\t}),\n+\t\t\t\t\t(column: any): TelemetryFieldKey => {\n+\t\t\t\t\t\tconst fieldName = column.name ?? column.key;\n+\t\t\t\t\t\tconst isDeprecated = isDeprecatedField(fieldName);\n+\n+\t\t\t\t\t\tconst fieldObj: TelemetryFieldKey = {\n+\t\t\t\t\t\t\tname: fieldName,\n+\t\t\t\t\t\t\tfieldDataType:\n+\t\t\t\t\t\t\t\tcolumn?.fieldDataType ?? (column?.dataType as FieldDataType),\n+\t\t\t\t\t\t\tsignal: column?.signal ?? undefined,\n+\t\t\t\t\t\t};\n+\n+\t\t\t\t\t\t// Only add fieldContext if the field is NOT deprecated\n+\t\t\t\t\t\tif (!isDeprecated && fieldName !== 'name') {",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2296516763",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8902,
        "pr_file": "frontend/src/api/v5/queryRange/prepareQueryRangePayloadV5.ts",
        "discussion_id": "2296516763",
        "commented_code": "@@ -140,16 +177,29 @@ function createBaseSpec(\n \t\tselectFields: isEmpty(nonEmptySelectColumns)\n \t\t\t? undefined\n \t\t\t: nonEmptySelectColumns?.map(\n-\t\t\t\t\t(column: any): TelemetryFieldKey => ({\n-\t\t\t\t\t\tname: column.name ?? column.key,\n-\t\t\t\t\t\tfieldDataType:\n-\t\t\t\t\t\t\tcolumn?.fieldDataType ?? (column?.dataType as FieldDataType),\n-\t\t\t\t\t\tfieldContext: column?.fieldContext ?? (column?.type as FieldContext),\n-\t\t\t\t\t\tsignal: column?.signal ?? undefined,\n-\t\t\t\t\t}),\n+\t\t\t\t\t(column: any): TelemetryFieldKey => {\n+\t\t\t\t\t\tconst fieldName = column.name ?? column.key;\n+\t\t\t\t\t\tconst isDeprecated = isDeprecatedField(fieldName);\n+\n+\t\t\t\t\t\tconst fieldObj: TelemetryFieldKey = {\n+\t\t\t\t\t\t\tname: fieldName,\n+\t\t\t\t\t\t\tfieldDataType:\n+\t\t\t\t\t\t\t\tcolumn?.fieldDataType ?? (column?.dataType as FieldDataType),\n+\t\t\t\t\t\t\tsignal: column?.signal ?? undefined,\n+\t\t\t\t\t\t};\n+\n+\t\t\t\t\t\t// Only add fieldContext if the field is NOT deprecated\n+\t\t\t\t\t\tif (!isDeprecated && fieldName !== 'name') {",
        "comment_created_at": "2025-08-24T05:35:00+00:00",
        "comment_author": "SagarRajput-7",
        "comment_body": "Why does the 'name' need to be separately handled?",
        "pr_file_module": null
      },
      {
        "comment_id": "2296517367",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8902,
        "pr_file": "frontend/src/api/v5/queryRange/prepareQueryRangePayloadV5.ts",
        "discussion_id": "2296516763",
        "commented_code": "@@ -140,16 +177,29 @@ function createBaseSpec(\n \t\tselectFields: isEmpty(nonEmptySelectColumns)\n \t\t\t? undefined\n \t\t\t: nonEmptySelectColumns?.map(\n-\t\t\t\t\t(column: any): TelemetryFieldKey => ({\n-\t\t\t\t\t\tname: column.name ?? column.key,\n-\t\t\t\t\t\tfieldDataType:\n-\t\t\t\t\t\t\tcolumn?.fieldDataType ?? (column?.dataType as FieldDataType),\n-\t\t\t\t\t\tfieldContext: column?.fieldContext ?? (column?.type as FieldContext),\n-\t\t\t\t\t\tsignal: column?.signal ?? undefined,\n-\t\t\t\t\t}),\n+\t\t\t\t\t(column: any): TelemetryFieldKey => {\n+\t\t\t\t\t\tconst fieldName = column.name ?? column.key;\n+\t\t\t\t\t\tconst isDeprecated = isDeprecatedField(fieldName);\n+\n+\t\t\t\t\t\tconst fieldObj: TelemetryFieldKey = {\n+\t\t\t\t\t\t\tname: fieldName,\n+\t\t\t\t\t\t\tfieldDataType:\n+\t\t\t\t\t\t\t\tcolumn?.fieldDataType ?? (column?.dataType as FieldDataType),\n+\t\t\t\t\t\t\tsignal: column?.signal ?? undefined,\n+\t\t\t\t\t\t};\n+\n+\t\t\t\t\t\t// Only add fieldContext if the field is NOT deprecated\n+\t\t\t\t\t\tif (!isDeprecated && fieldName !== 'name') {",
        "comment_created_at": "2025-08-24T05:38:59+00:00",
        "comment_author": "srikanthccv",
        "comment_body": "`name` is a standard intrinsic field (not deprecated), but when we send it with `fieldContext: \"tag\"` in the payload, the system incorrectly tries to fetch it as an attribute value instead of the actual span name, resulting in empty values being returned. This is why we treat it here. \r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2254948366",
    "pr_number": 8700,
    "pr_file": "frontend/src/api/metrics/getQueryRange.ts",
    "created_at": "2025-08-05T17:39:20+00:00",
    "commented_code": "version: string,\n \tsignal: AbortSignal,\n \theaders?: Record<string, string>,\n-): Promise<SuccessResponse<MetricRangePayloadV3> | ErrorResponse> => {\n+): Promise<\n+\t(SuccessResponse<MetricRangePayloadV3> & { warning?: Warning }) | ErrorResponse",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2254948366",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8700,
        "pr_file": "frontend/src/api/metrics/getQueryRange.ts",
        "discussion_id": "2254948366",
        "commented_code": "@@ -13,7 +13,9 @@ export const getMetricsQueryRange = async (\n \tversion: string,\n \tsignal: AbortSignal,\n \theaders?: Record<string, string>,\n-): Promise<SuccessResponse<MetricRangePayloadV3> | ErrorResponse> => {\n+): Promise<\n+\t(SuccessResponse<MetricRangePayloadV3> & { warning?: Warning }) | ErrorResponse",
        "comment_created_at": "2025-08-05T17:39:20+00:00",
        "comment_author": "ahrefabhi",
        "comment_body": "can you add warning in MatricRangePayloadV3 itself?",
        "pr_file_module": null
      }
    ]
  }
]