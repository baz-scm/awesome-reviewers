[
  {
    "discussion_id": "2239289990",
    "pr_number": 8649,
    "pr_file": "frontend/src/container/GeneralSettings/GeneralSettings.tsx",
    "created_at": "2025-07-29T10:23:12+00:00",
    "commented_code": "logsTtlValuesRefetch();\n \t\t\t\tif (!hasSetTTLFailed)\n \t\t\t\t\t// Updates the currentTTL Values in order to avoid pushing the same values.\n-\t\t\t\t\tsetLogsCurrentTTLValues({\n+\t\t\t\t\tsetLogsCurrentTTLValues((prev) => ({\n+\t\t\t\t\t\t...prev,\n \t\t\t\t\t\tlogs_ttl_duration_hrs: logsTotalRetentionPeriod || -1,\n \t\t\t\t\t\tlogs_move_ttl_duration_hrs: logsS3RetentionPeriod || -1,\n-\t\t\t\t\t\tstatus: '',\n-\t\t\t\t\t});\n+\t\t\t\t\t\tdefault_ttl_days: logsTotalRetentionPeriod\n+\t\t\t\t\t\t\t? logsTotalRetentionPeriod / 24 // convert Hours to days",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2239317594",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8649,
        "pr_file": "frontend/src/container/GeneralSettings/GeneralSettings.tsx",
        "discussion_id": "2239289990",
        "commented_code": "@@ -376,11 +376,14 @@ function GeneralSettings({\n \t\t\t\tlogsTtlValuesRefetch();\n \t\t\t\tif (!hasSetTTLFailed)\n \t\t\t\t\t// Updates the currentTTL Values in order to avoid pushing the same values.\n-\t\t\t\t\tsetLogsCurrentTTLValues({\n+\t\t\t\t\tsetLogsCurrentTTLValues((prev) => ({\n+\t\t\t\t\t\t...prev,\n \t\t\t\t\t\tlogs_ttl_duration_hrs: logsTotalRetentionPeriod || -1,\n \t\t\t\t\t\tlogs_move_ttl_duration_hrs: logsS3RetentionPeriod || -1,\n-\t\t\t\t\t\tstatus: '',\n-\t\t\t\t\t});\n+\t\t\t\t\t\tdefault_ttl_days: logsTotalRetentionPeriod\n+\t\t\t\t\t\t\t? logsTotalRetentionPeriod / 24 // convert Hours to days",
        "comment_created_at": "2025-07-29T10:23:12+00:00",
        "comment_author": "ahrefabhi",
        "comment_body": "We won't be supporting hours when this moves, only days will be selected, so there's no point to round it up.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2272349906",
    "pr_number": 8729,
    "pr_file": "frontend/src/container/QueryTable/Drilldown/BreakoutOptions.tsx",
    "created_at": "2025-08-13T07:35:09+00:00",
    "commented_code": "+import './Breakoutoptions.styles.scss';\n+\n+import { Input, Skeleton } from 'antd';\n+import { getKeySuggestions } from 'api/querySuggestions/getKeySuggestions';\n+import OverlayScrollbar from 'components/OverlayScrollbar/OverlayScrollbar';\n+import useDebounce from 'hooks/useDebounce';\n+import { ContextMenu } from 'periscope/components/ContextMenu';\n+import { useCallback, useMemo, useState } from 'react';\n+import { useQuery } from 'react-query';\n+import {\n+\tBaseAutocompleteData,\n+\tDataTypes,\n+} from 'types/api/queryBuilder/queryAutocompleteResponse';\n+\n+import { BreakoutOptionsProps } from './contextConfig';\n+\n+function OptionsSkeleton(): JSX.Element {\n+\treturn (\n+\t\t<div className=\"breakout-options-skeleton\">\n+\t\t\t{Array.from({ length: 5 }).map((_, index) => (\n+\t\t\t\t<Skeleton.Input\n+\t\t\t\t\tactive\n+\t\t\t\t\tsize=\"small\"\n+\t\t\t\t\t// eslint-disable-next-line react/no-array-index-key\n+\t\t\t\t\tkey={index}\n+\t\t\t\t/>\n+\t\t\t))}\n+\t\t</div>\n+\t);\n+}\n+\n+function BreakoutOptions({\n+\tqueryData,\n+\tonColumnClick,\n+}: BreakoutOptionsProps): JSX.Element {\n+\tconst { groupBy = [] } = queryData;\n+\tconst [searchText, setSearchText] = useState<string>('');\n+\tconst debouncedSearchText = useDebounce(searchText, 400);\n+\n+\tconst handleInputChange = useCallback(\n+\t\t(e: React.ChangeEvent<HTMLInputElement>): void => {\n+\t\t\tconst value = e.target.value.trim().toLowerCase();\n+\t\t\tsetSearchText(value);\n+\t\t},\n+\t\t[],\n+\t);\n+\n+\t// Using getKeySuggestions directly like in QuerySearch\n+\tconst { data, isFetching } = useQuery(\n+\t\t[\n+\t\t\t'keySuggestions',\n+\t\t\tqueryData.dataSource,\n+\t\t\tdebouncedSearchText,\n+\t\t\tqueryData.aggregateAttribute?.key,\n+\t\t],\n+\t\t() =>\n+\t\t\tgetKeySuggestions({\n+\t\t\t\tsignal: queryData.dataSource,\n+\t\t\t\tsearchText: debouncedSearchText,\n+\t\t\t\tmetricName: queryData.aggregateAttribute?.key,",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2272349906",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8729,
        "pr_file": "frontend/src/container/QueryTable/Drilldown/BreakoutOptions.tsx",
        "discussion_id": "2272349906",
        "commented_code": "@@ -0,0 +1,138 @@\n+import './Breakoutoptions.styles.scss';\n+\n+import { Input, Skeleton } from 'antd';\n+import { getKeySuggestions } from 'api/querySuggestions/getKeySuggestions';\n+import OverlayScrollbar from 'components/OverlayScrollbar/OverlayScrollbar';\n+import useDebounce from 'hooks/useDebounce';\n+import { ContextMenu } from 'periscope/components/ContextMenu';\n+import { useCallback, useMemo, useState } from 'react';\n+import { useQuery } from 'react-query';\n+import {\n+\tBaseAutocompleteData,\n+\tDataTypes,\n+} from 'types/api/queryBuilder/queryAutocompleteResponse';\n+\n+import { BreakoutOptionsProps } from './contextConfig';\n+\n+function OptionsSkeleton(): JSX.Element {\n+\treturn (\n+\t\t<div className=\"breakout-options-skeleton\">\n+\t\t\t{Array.from({ length: 5 }).map((_, index) => (\n+\t\t\t\t<Skeleton.Input\n+\t\t\t\t\tactive\n+\t\t\t\t\tsize=\"small\"\n+\t\t\t\t\t// eslint-disable-next-line react/no-array-index-key\n+\t\t\t\t\tkey={index}\n+\t\t\t\t/>\n+\t\t\t))}\n+\t\t</div>\n+\t);\n+}\n+\n+function BreakoutOptions({\n+\tqueryData,\n+\tonColumnClick,\n+}: BreakoutOptionsProps): JSX.Element {\n+\tconst { groupBy = [] } = queryData;\n+\tconst [searchText, setSearchText] = useState<string>('');\n+\tconst debouncedSearchText = useDebounce(searchText, 400);\n+\n+\tconst handleInputChange = useCallback(\n+\t\t(e: React.ChangeEvent<HTMLInputElement>): void => {\n+\t\t\tconst value = e.target.value.trim().toLowerCase();\n+\t\t\tsetSearchText(value);\n+\t\t},\n+\t\t[],\n+\t);\n+\n+\t// Using getKeySuggestions directly like in QuerySearch\n+\tconst { data, isFetching } = useQuery(\n+\t\t[\n+\t\t\t'keySuggestions',\n+\t\t\tqueryData.dataSource,\n+\t\t\tdebouncedSearchText,\n+\t\t\tqueryData.aggregateAttribute?.key,\n+\t\t],\n+\t\t() =>\n+\t\t\tgetKeySuggestions({\n+\t\t\t\tsignal: queryData.dataSource,\n+\t\t\t\tsearchText: debouncedSearchText,\n+\t\t\t\tmetricName: queryData.aggregateAttribute?.key,",
        "comment_created_at": "2025-08-13T07:35:09+00:00",
        "comment_author": "SagarRajput-7",
        "comment_body": "in new query config we wont have aagregateAttribute so for metric name add this as a fallback but check on queryData.aggregation?[0].metricName first",
        "pr_file_module": null
      }
    ]
  }
]