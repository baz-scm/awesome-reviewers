[
  {
    "discussion_id": "2153015168",
    "pr_number": 8279,
    "pr_file": "pkg/analytics/noopanalytics/provider.go",
    "created_at": "2025-06-17T19:22:39+00:00",
    "commented_code": "return nil\n }\n \n-func (provider *provider) Send(ctx context.Context, messages ...analyticstypes.Message) {}\n+func (provider *provider) Send(ctx context.Context, messages ...analyticstypes.Message) {\n+\t// do nothing",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2153015168",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8279,
        "pr_file": "pkg/analytics/noopanalytics/provider.go",
        "discussion_id": "2153015168",
        "commented_code": "@@ -27,7 +27,25 @@ func (provider *provider) Start(_ context.Context) error {\n \treturn nil\n }\n \n-func (provider *provider) Send(ctx context.Context, messages ...analyticstypes.Message) {}\n+func (provider *provider) Send(ctx context.Context, messages ...analyticstypes.Message) {\n+\t// do nothing",
        "comment_created_at": "2025-06-17T19:22:39+00:00",
        "comment_author": "vikrantgupta25",
        "comment_body": "log here as well explicitly telling that noop analytics was being called. silence becomes dangerous in DI ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1726198198",
    "pr_number": 5740,
    "pr_file": "pkg/http/middleware/logging.go",
    "created_at": "2024-08-22T03:53:12+00:00",
    "commented_code": "+package middleware\n+\n+import (\n+\t\"bytes\"\n+\t\"net\"\n+\t\"net/http\"\n+\t\"time\"\n+\n+\t\"github.com/gorilla/mux\"\n+\tsemconv \"go.opentelemetry.io/otel/semconv/v1.26.0\"\n+\t\"go.uber.org/zap\"\n+)\n+\n+const (\n+\tlogMessage string = \"::RECEIVED-REQUEST::\"\n+)\n+\n+type Logging struct {\n+\tlogger *zap.Logger\n+}\n+\n+func NewLogging(logger *zap.Logger) *Logging {\n+\tif logger == nil {\n+\t\tpanic(\"cannot build logging, logger is empty\")\n+\t}\n+\n+\treturn &Logging{\n+\t\tlogger: logger.Named(pkgname),\n+\t}\n+}\n+\n+func (middleware *Logging) Wrap(next http.Handler) http.Handler {\n+\treturn http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {\n+\t\tctx := req.Context()\n+\t\tstart := time.Now()\n+\t\thost, port, _ := net.SplitHostPort(req.Host)\n+\t\tpath, err := mux.CurrentRoute(req).GetPathTemplate()\n+\t\tif err != nil {\n+\t\t\tpath = req.URL.Path\n+\t\t}\n+\n+\t\tfields := []zap.Field{\n+\t\t\tzap.Any(\"context\", ctx),\n+\t\t\tzap.String(string(semconv.ClientAddressKey), req.RemoteAddr),\n+\t\t\tzap.String(string(semconv.UserAgentOriginalKey), req.UserAgent()),\n+\t\t\tzap.String(string(semconv.ServerAddressKey), host),\n+\t\t\tzap.String(string(semconv.ServerPortKey), port),\n+\t\t\tzap.Int64(string(semconv.HTTPRequestSizeKey), req.ContentLength),\n+\t\t\tzap.String(string(semconv.HTTPRouteKey), path),\n+\t\t}\n+\n+\t\tbuf := new(bytes.Buffer)\n+\t\twriter := newBadResponseLoggingWriter(rw, buf)\n+\t\tnext.ServeHTTP(writer, req)\n+\n+\t\tstatusCode, err := writer.StatusCode(), writer.WriteError()\n+\t\tfields = append(fields,\n+\t\t\tzap.Int(string(semconv.HTTPResponseStatusCodeKey), statusCode),\n+\t\t\tzap.Duration(string(semconv.HTTPServerRequestDurationName), time.Since(start)),\n+\t\t)\n+\t\tif err != nil {\n+\t\t\tfields = append(fields, zap.Error(err))\n+\t\t\tmiddleware.logger.Error(logMessage, fields...)\n+\t\t}\n+\n+\t\tif buf.Len() != 0 {\n+\t\t\tfields = append(fields, zap.String(\"response.body\", buf.String()))\n+\t\t}\n+\n+\t\tmiddleware.logger.Info(logMessage, fields...)",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "1726198198",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 5740,
        "pr_file": "pkg/http/middleware/logging.go",
        "discussion_id": "1726198198",
        "commented_code": "@@ -0,0 +1,72 @@\n+package middleware\n+\n+import (\n+\t\"bytes\"\n+\t\"net\"\n+\t\"net/http\"\n+\t\"time\"\n+\n+\t\"github.com/gorilla/mux\"\n+\tsemconv \"go.opentelemetry.io/otel/semconv/v1.26.0\"\n+\t\"go.uber.org/zap\"\n+)\n+\n+const (\n+\tlogMessage string = \"::RECEIVED-REQUEST::\"\n+)\n+\n+type Logging struct {\n+\tlogger *zap.Logger\n+}\n+\n+func NewLogging(logger *zap.Logger) *Logging {\n+\tif logger == nil {\n+\t\tpanic(\"cannot build logging, logger is empty\")\n+\t}\n+\n+\treturn &Logging{\n+\t\tlogger: logger.Named(pkgname),\n+\t}\n+}\n+\n+func (middleware *Logging) Wrap(next http.Handler) http.Handler {\n+\treturn http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {\n+\t\tctx := req.Context()\n+\t\tstart := time.Now()\n+\t\thost, port, _ := net.SplitHostPort(req.Host)\n+\t\tpath, err := mux.CurrentRoute(req).GetPathTemplate()\n+\t\tif err != nil {\n+\t\t\tpath = req.URL.Path\n+\t\t}\n+\n+\t\tfields := []zap.Field{\n+\t\t\tzap.Any(\"context\", ctx),\n+\t\t\tzap.String(string(semconv.ClientAddressKey), req.RemoteAddr),\n+\t\t\tzap.String(string(semconv.UserAgentOriginalKey), req.UserAgent()),\n+\t\t\tzap.String(string(semconv.ServerAddressKey), host),\n+\t\t\tzap.String(string(semconv.ServerPortKey), port),\n+\t\t\tzap.Int64(string(semconv.HTTPRequestSizeKey), req.ContentLength),\n+\t\t\tzap.String(string(semconv.HTTPRouteKey), path),\n+\t\t}\n+\n+\t\tbuf := new(bytes.Buffer)\n+\t\twriter := newBadResponseLoggingWriter(rw, buf)\n+\t\tnext.ServeHTTP(writer, req)\n+\n+\t\tstatusCode, err := writer.StatusCode(), writer.WriteError()\n+\t\tfields = append(fields,\n+\t\t\tzap.Int(string(semconv.HTTPResponseStatusCodeKey), statusCode),\n+\t\t\tzap.Duration(string(semconv.HTTPServerRequestDurationName), time.Since(start)),\n+\t\t)\n+\t\tif err != nil {\n+\t\t\tfields = append(fields, zap.Error(err))\n+\t\t\tmiddleware.logger.Error(logMessage, fields...)\n+\t\t}\n+\n+\t\tif buf.Len() != 0 {\n+\t\t\tfields = append(fields, zap.String(\"response.body\", buf.String()))\n+\t\t}\n+\n+\t\tmiddleware.logger.Info(logMessage, fields...)",
        "comment_created_at": "2024-08-22T03:53:12+00:00",
        "comment_author": "srikanthccv",
        "comment_body": "It will be confusing to see errors followed by info with also same set of fields. Can we make it just one log?",
        "pr_file_module": null
      },
      {
        "comment_id": "1726550263",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 5740,
        "pr_file": "pkg/http/middleware/logging.go",
        "discussion_id": "1726198198",
        "commented_code": "@@ -0,0 +1,72 @@\n+package middleware\n+\n+import (\n+\t\"bytes\"\n+\t\"net\"\n+\t\"net/http\"\n+\t\"time\"\n+\n+\t\"github.com/gorilla/mux\"\n+\tsemconv \"go.opentelemetry.io/otel/semconv/v1.26.0\"\n+\t\"go.uber.org/zap\"\n+)\n+\n+const (\n+\tlogMessage string = \"::RECEIVED-REQUEST::\"\n+)\n+\n+type Logging struct {\n+\tlogger *zap.Logger\n+}\n+\n+func NewLogging(logger *zap.Logger) *Logging {\n+\tif logger == nil {\n+\t\tpanic(\"cannot build logging, logger is empty\")\n+\t}\n+\n+\treturn &Logging{\n+\t\tlogger: logger.Named(pkgname),\n+\t}\n+}\n+\n+func (middleware *Logging) Wrap(next http.Handler) http.Handler {\n+\treturn http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {\n+\t\tctx := req.Context()\n+\t\tstart := time.Now()\n+\t\thost, port, _ := net.SplitHostPort(req.Host)\n+\t\tpath, err := mux.CurrentRoute(req).GetPathTemplate()\n+\t\tif err != nil {\n+\t\t\tpath = req.URL.Path\n+\t\t}\n+\n+\t\tfields := []zap.Field{\n+\t\t\tzap.Any(\"context\", ctx),\n+\t\t\tzap.String(string(semconv.ClientAddressKey), req.RemoteAddr),\n+\t\t\tzap.String(string(semconv.UserAgentOriginalKey), req.UserAgent()),\n+\t\t\tzap.String(string(semconv.ServerAddressKey), host),\n+\t\t\tzap.String(string(semconv.ServerPortKey), port),\n+\t\t\tzap.Int64(string(semconv.HTTPRequestSizeKey), req.ContentLength),\n+\t\t\tzap.String(string(semconv.HTTPRouteKey), path),\n+\t\t}\n+\n+\t\tbuf := new(bytes.Buffer)\n+\t\twriter := newBadResponseLoggingWriter(rw, buf)\n+\t\tnext.ServeHTTP(writer, req)\n+\n+\t\tstatusCode, err := writer.StatusCode(), writer.WriteError()\n+\t\tfields = append(fields,\n+\t\t\tzap.Int(string(semconv.HTTPResponseStatusCodeKey), statusCode),\n+\t\t\tzap.Duration(string(semconv.HTTPServerRequestDurationName), time.Since(start)),\n+\t\t)\n+\t\tif err != nil {\n+\t\t\tfields = append(fields, zap.Error(err))\n+\t\t\tmiddleware.logger.Error(logMessage, fields...)\n+\t\t}\n+\n+\t\tif buf.Len() != 0 {\n+\t\t\tfields = append(fields, zap.String(\"response.body\", buf.String()))\n+\t\t}\n+\n+\t\tmiddleware.logger.Info(logMessage, fields...)",
        "comment_created_at": "2024-08-22T07:59:40+00:00",
        "comment_author": "grandwizard28",
        "comment_body": "Done!",
        "pr_file_module": null
      }
    ]
  }
]