[
  {
    "discussion_id": "2239664102",
    "pr_number": 8628,
    "pr_file": "frontend/src/pages/TracesFunnelDetails/constants.ts",
    "created_at": "2025-07-29T12:31:09+00:00",
    "commented_code": "items: [],\n \t\t\top: 'and',\n \t\t},\n-\t\tlatency_pointer: 'start',\n+\t\tlatency_pointer: 'end',",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2239664102",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8628,
        "pr_file": "frontend/src/pages/TracesFunnelDetails/constants.ts",
        "discussion_id": "2239664102",
        "commented_code": "@@ -23,7 +23,7 @@ export const createInitialStepsData = (): FunnelStepData[] => [\n \t\t\titems: [],\n \t\t\top: 'and',\n \t\t},\n-\t\tlatency_pointer: 'start',\n+\t\tlatency_pointer: 'end',",
        "comment_created_at": "2025-07-29T12:31:09+00:00",
        "comment_author": "ahmadshaheer",
        "comment_body": "@ankitnayan, is this intentional? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2240319065",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8628,
        "pr_file": "frontend/src/pages/TracesFunnelDetails/constants.ts",
        "discussion_id": "2239664102",
        "commented_code": "@@ -23,7 +23,7 @@ export const createInitialStepsData = (): FunnelStepData[] => [\n \t\t\titems: [],\n \t\t\top: 'and',\n \t\t},\n-\t\tlatency_pointer: 'start',\n+\t\tlatency_pointer: 'end',",
        "comment_created_at": "2025-07-29T16:04:39+00:00",
        "comment_author": "ankitnayan",
        "comment_body": "yes...making the latency pointer default to `end` for all steps except the 1st step",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2121322841",
    "pr_number": 7903,
    "pr_file": "frontend/src/providers/preferences/sync/usePreferenceSync.ts",
    "created_at": "2025-06-02T14:27:17+00:00",
    "commented_code": "+import { defaultLogsSelectedColumns } from 'container/OptionsMenu/constants';\n+import { defaultSelectedColumns as defaultTracesSelectedColumns } from 'container/TracesExplorer/ListView/configs';\n+import { useGetAllViews } from 'hooks/saveViews/useGetAllViews';\n+import { useEffect, useState } from 'react';\n+import { BaseAutocompleteData } from 'types/api/queryBuilder/queryAutocompleteResponse';\n+import { DataSource } from 'types/common/queryBuilder';\n+\n+import { usePreferenceLoader } from '../loader/usePreferenceLoader';\n+import { FormattingOptions, PreferenceMode, Preferences } from '../types';\n+import { usePreferenceUpdater } from '../updater/usePreferenceUpdater';\n+\n+export function usePreferenceSync({\n+\tmode,\n+\tdataSource,\n+\tsavedViewId,\n+}: {\n+\tmode: PreferenceMode;\n+\tdataSource: DataSource;\n+\tsavedViewId: string | undefined;\n+}): {\n+\tpreferences: Preferences | null;\n+\tloading: boolean;\n+\terror: Error | null;\n+\tupdateColumns: (newColumns: BaseAutocompleteData[]) => void;\n+\tupdateFormatting: (newFormatting: FormattingOptions) => void;\n+} {\n+\tconst { data: viewsData } = useGetAllViews(dataSource);\n+\n+\tconst [\n+\t\tsavedViewPreferences,\n+\t\tsetSavedViewPreferences,\n+\t] = useState<Preferences | null>(null);\n+\n+\tuseEffect(() => {\n+\t\tconst extraData = viewsData?.data?.data?.find(\n+\t\t\t(view) => view.id === savedViewId,\n+\t\t)?.extraData;\n+\n+\t\tconst parsedExtraData = JSON.parse(extraData || '{}');\n+\t\tlet columns: BaseAutocompleteData[] = [];\n+\t\tlet formatting: FormattingOptions | undefined;\n+\t\tif (dataSource === DataSource.LOGS) {\n+\t\t\tcolumns = parsedExtraData?.selectColumns || defaultLogsSelectedColumns;\n+\t\t\tformatting = {\n+\t\t\t\tmaxLines: parsedExtraData?.maxLines ?? 2,\n+\t\t\t\tformat: parsedExtraData?.format ?? 'table',\n+\t\t\t\tfontSize: parsedExtraData?.fontSize ?? 'small',\n+\t\t\t\tversion: parsedExtraData?.version ?? 1,\n+\t\t\t};\n+\t\t}\n+\t\tif (dataSource === DataSource.TRACES) {\n+\t\t\tcolumns = parsedExtraData?.selectColumns || defaultTracesSelectedColumns;\n+\t\t}\n+\t\tsetSavedViewPreferences({ columns, formatting });\n+\t}, [viewsData, dataSource, savedViewId, mode]);\n+\n+\t// We are using a reSync state because we have URL updates as well as local storage updates\n+\t// and we want to make sure we are always using the latest preferences\n+\tconst [reSync, setReSync] = useState(0);",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2121322841",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7903,
        "pr_file": "frontend/src/providers/preferences/sync/usePreferenceSync.ts",
        "discussion_id": "2121322841",
        "commented_code": "@@ -0,0 +1,80 @@\n+import { defaultLogsSelectedColumns } from 'container/OptionsMenu/constants';\n+import { defaultSelectedColumns as defaultTracesSelectedColumns } from 'container/TracesExplorer/ListView/configs';\n+import { useGetAllViews } from 'hooks/saveViews/useGetAllViews';\n+import { useEffect, useState } from 'react';\n+import { BaseAutocompleteData } from 'types/api/queryBuilder/queryAutocompleteResponse';\n+import { DataSource } from 'types/common/queryBuilder';\n+\n+import { usePreferenceLoader } from '../loader/usePreferenceLoader';\n+import { FormattingOptions, PreferenceMode, Preferences } from '../types';\n+import { usePreferenceUpdater } from '../updater/usePreferenceUpdater';\n+\n+export function usePreferenceSync({\n+\tmode,\n+\tdataSource,\n+\tsavedViewId,\n+}: {\n+\tmode: PreferenceMode;\n+\tdataSource: DataSource;\n+\tsavedViewId: string | undefined;\n+}): {\n+\tpreferences: Preferences | null;\n+\tloading: boolean;\n+\terror: Error | null;\n+\tupdateColumns: (newColumns: BaseAutocompleteData[]) => void;\n+\tupdateFormatting: (newFormatting: FormattingOptions) => void;\n+} {\n+\tconst { data: viewsData } = useGetAllViews(dataSource);\n+\n+\tconst [\n+\t\tsavedViewPreferences,\n+\t\tsetSavedViewPreferences,\n+\t] = useState<Preferences | null>(null);\n+\n+\tuseEffect(() => {\n+\t\tconst extraData = viewsData?.data?.data?.find(\n+\t\t\t(view) => view.id === savedViewId,\n+\t\t)?.extraData;\n+\n+\t\tconst parsedExtraData = JSON.parse(extraData || '{}');\n+\t\tlet columns: BaseAutocompleteData[] = [];\n+\t\tlet formatting: FormattingOptions | undefined;\n+\t\tif (dataSource === DataSource.LOGS) {\n+\t\t\tcolumns = parsedExtraData?.selectColumns || defaultLogsSelectedColumns;\n+\t\t\tformatting = {\n+\t\t\t\tmaxLines: parsedExtraData?.maxLines ?? 2,\n+\t\t\t\tformat: parsedExtraData?.format ?? 'table',\n+\t\t\t\tfontSize: parsedExtraData?.fontSize ?? 'small',\n+\t\t\t\tversion: parsedExtraData?.version ?? 1,\n+\t\t\t};\n+\t\t}\n+\t\tif (dataSource === DataSource.TRACES) {\n+\t\t\tcolumns = parsedExtraData?.selectColumns || defaultTracesSelectedColumns;\n+\t\t}\n+\t\tsetSavedViewPreferences({ columns, formatting });\n+\t}, [viewsData, dataSource, savedViewId, mode]);\n+\n+\t// We are using a reSync state because we have URL updates as well as local storage updates\n+\t// and we want to make sure we are always using the latest preferences\n+\tconst [reSync, setReSync] = useState(0);",
        "comment_created_at": "2025-06-02T14:27:17+00:00",
        "comment_author": "aks07",
        "comment_body": "Are we using resync to re-run usePreferenceLoader? Seems hacky. Can reSync be just boolean based?",
        "pr_file_module": null
      }
    ]
  }
]