[
  {
    "discussion_id": "2239464452",
    "pr_number": 8619,
    "pr_file": "tests/integration/fixtures/logs.py",
    "created_at": "2025-07-29T11:25:50+00:00",
    "commented_code": "+import datetime\n+import json\n+from abc import ABC\n+from typing import Any, Callable, Generator, List\n+\n+import numpy as np\n+import pytest\n+from ksuid import KsuidMs\n+\n+from fixtures import types\n+from fixtures.fingerprint import LogsOrTracesFingerprint\n+\n+\n+class LogsResource(ABC):",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2239464452",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8619,
        "pr_file": "tests/integration/fixtures/logs.py",
        "discussion_id": "2239464452",
        "commented_code": "@@ -0,0 +1,402 @@\n+import datetime\n+import json\n+from abc import ABC\n+from typing import Any, Callable, Generator, List\n+\n+import numpy as np\n+import pytest\n+from ksuid import KsuidMs\n+\n+from fixtures import types\n+from fixtures.fingerprint import LogsOrTracesFingerprint\n+\n+\n+class LogsResource(ABC):",
        "comment_created_at": "2025-07-29T11:25:50+00:00",
        "comment_author": "vikrantgupta25",
        "comment_body": "why do these classes need to be ABC ? there are no abstract methods here ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2239483958",
    "pr_number": 8619,
    "pr_file": "tests/integration/fixtures/logs.py",
    "created_at": "2025-07-29T11:30:32+00:00",
    "commented_code": "+import datetime\n+import json\n+from abc import ABC\n+from typing import Any, Callable, Generator, List\n+\n+import numpy as np\n+import pytest\n+from ksuid import KsuidMs\n+\n+from fixtures import types\n+from fixtures.fingerprint import LogsOrTracesFingerprint\n+\n+\n+class LogsResource(ABC):\n+    labels: str\n+    fingerprint: str\n+    seen_at_ts_bucket_start: np.int64\n+\n+    def __init__(\n+        self,\n+        labels: dict[str, str],\n+        fingerprint: str,\n+        seen_at_ts_bucket_start: np.int64,\n+    ) -> None:\n+        self.labels = json.dumps(labels)\n+        self.fingerprint = fingerprint\n+        self.seen_at_ts_bucket_start = seen_at_ts_bucket_start\n+\n+    def np_arr(self) -> np.array:\n+        return np.array([self.labels, self.fingerprint, self.seen_at_ts_bucket_start])\n+\n+\n+class LogsResourceOrAttributeKeys(ABC):",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2239483958",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8619,
        "pr_file": "tests/integration/fixtures/logs.py",
        "discussion_id": "2239483958",
        "commented_code": "@@ -0,0 +1,402 @@\n+import datetime\n+import json\n+from abc import ABC\n+from typing import Any, Callable, Generator, List\n+\n+import numpy as np\n+import pytest\n+from ksuid import KsuidMs\n+\n+from fixtures import types\n+from fixtures.fingerprint import LogsOrTracesFingerprint\n+\n+\n+class LogsResource(ABC):\n+    labels: str\n+    fingerprint: str\n+    seen_at_ts_bucket_start: np.int64\n+\n+    def __init__(\n+        self,\n+        labels: dict[str, str],\n+        fingerprint: str,\n+        seen_at_ts_bucket_start: np.int64,\n+    ) -> None:\n+        self.labels = json.dumps(labels)\n+        self.fingerprint = fingerprint\n+        self.seen_at_ts_bucket_start = seen_at_ts_bucket_start\n+\n+    def np_arr(self) -> np.array:\n+        return np.array([self.labels, self.fingerprint, self.seen_at_ts_bucket_start])\n+\n+\n+class LogsResourceOrAttributeKeys(ABC):",
        "comment_created_at": "2025-07-29T11:30:32+00:00",
        "comment_author": "vikrantgupta25",
        "comment_body": "we can define a base ABC with np_arr and db methods, extend these ABC's in each sub class and call their methods in `insert_logs`",
        "pr_file_module": null
      }
    ]
  }
]