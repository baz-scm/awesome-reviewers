[
  {
    "discussion_id": "2163589239",
    "pr_number": 8326,
    "pr_file": "pkg/query-service/app/http_handler.go",
    "created_at": "2025-06-24T10:38:40+00:00",
    "commented_code": "aH.Respond(w, resp)\n }\n \n-func sendQueryResultEvents(r *http.Request, result []*v3.Result, queryRangeParams *v3.QueryRangeParamsV3) {\n+func (aH *APIHandler) sendQueryResultEvents(r *http.Request, result []*v3.Result, queryRangeParams *v3.QueryRangeParamsV3, version string) {\n+\tclaims, err := authtypes.ClaimsFromContext(r.Context())\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\tqueryInfoResult := NewQueryInfoResult(queryRangeParams, version)\n+\taH.Signoz.Analytics.TrackUser(r.Context(), claims.OrgID, claims.UserID, \"Telemetry Queried\", queryInfoResult.ToMap())\n+\n+\tif !(queryInfoResult.LogsUsed || queryInfoResult.MetricsUsed || queryInfoResult.TracesUsed) {\n+\t\treturn\n+\t}\n+\n \treferrer := r.Header.Get(\"Referer\")\n+\tif referrer == \"\" {\n+\t\treturn\n+\t}\n \n-\tdashboardMatched, err := regexp.MatchString(`/dashboard/[a-zA-Z0-9\\-]+/(new|edit)(?:\\?.*)?$`, referrer)\n-\tif err != nil {\n-\t\tzap.L().Error(\"error while matching the referrer\", zap.Error(err))\n-\t}\n-\talertMatched, err := regexp.MatchString(`/alerts/(new|edit)(?:\\?.*)?$`, referrer)\n-\tif err != nil {\n-\t\tzap.L().Error(\"error while matching the alert: \", zap.Error(err))\n-\t}\n-\n-\tif alertMatched || dashboardMatched {\n-\n-\t\tif len(result) > 0 && (len(result[0].Series) > 0 || len(result[0].List) > 0) {\n-\n-\t\t\tclaims, errv2 := authtypes.ClaimsFromContext(r.Context())\n-\t\t\tif errv2 == nil {\n-\t\t\t\tqueryInfoResult := telemetry.GetInstance().CheckQueryInfo(queryRangeParams)\n-\t\t\t\tif queryInfoResult.LogsUsed || queryInfoResult.MetricsUsed || queryInfoResult.TracesUsed {\n-\n-\t\t\t\t\tif dashboardMatched {\n-\t\t\t\t\t\tvar dashboardID, widgetID string\n-\t\t\t\t\t\tvar dashboardIDMatch, widgetIDMatch []string\n-\t\t\t\t\t\tdashboardIDRegex, err := regexp.Compile(`/dashboard/([a-f0-9\\-]+)/`)\n-\t\t\t\t\t\tif err == nil {\n-\t\t\t\t\t\t\tdashboardIDMatch = dashboardIDRegex.FindStringSubmatch(referrer)\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tzap.S().Errorf(\"error while matching the dashboardIDRegex: %v\", err)\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\twidgetIDRegex, err := regexp.Compile(`widgetId=([a-f0-9\\-]+)`)\n-\t\t\t\t\t\tif err == nil {\n-\t\t\t\t\t\t\twidgetIDMatch = widgetIDRegex.FindStringSubmatch(referrer)\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tzap.S().Errorf(\"error while matching the widgetIDRegex: %v\", err)\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tif len(dashboardIDMatch) > 1 {\n-\t\t\t\t\t\t\tdashboardID = dashboardIDMatch[1]\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tif len(widgetIDMatch) > 1 {\n-\t\t\t\t\t\t\twidgetID = widgetIDMatch[1]\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\ttelemetry.GetInstance().SendEvent(telemetry.TELEMETRY_EVENT_SUCCESSFUL_DASHBOARD_PANEL_QUERY, map[string]interface{}{\n-\t\t\t\t\t\t\t\"queryType\":             queryRangeParams.CompositeQuery.QueryType,\n-\t\t\t\t\t\t\t\"panelType\":             queryRangeParams.CompositeQuery.PanelType,\n-\t\t\t\t\t\t\t\"tracesUsed\":            queryInfoResult.TracesUsed,\n-\t\t\t\t\t\t\t\"logsUsed\":              queryInfoResult.LogsUsed,\n-\t\t\t\t\t\t\t\"metricsUsed\":           queryInfoResult.MetricsUsed,\n-\t\t\t\t\t\t\t\"numberOfQueries\":       queryInfoResult.NumberOfQueries,\n-\t\t\t\t\t\t\t\"groupByApplied\":        queryInfoResult.GroupByApplied,\n-\t\t\t\t\t\t\t\"aggregateOperator\":     queryInfoResult.AggregateOperator,\n-\t\t\t\t\t\t\t\"aggregateAttributeKey\": queryInfoResult.AggregateAttributeKey,\n-\t\t\t\t\t\t\t\"filterApplied\":         queryInfoResult.FilterApplied,\n-\t\t\t\t\t\t\t\"dashboardId\":           dashboardID,\n-\t\t\t\t\t\t\t\"widgetId\":              widgetID,\n-\t\t\t\t\t\t}, claims.Email, true, false)\n-\t\t\t\t\t}\n-\t\t\t\t\tif alertMatched {\n-\t\t\t\t\t\tvar alertID string\n-\t\t\t\t\t\tvar alertIDMatch []string\n-\t\t\t\t\t\talertIDRegex, err := regexp.Compile(`ruleId=(\\d+)`)\n-\t\t\t\t\t\tif err != nil {\n-\t\t\t\t\t\t\tzap.S().Errorf(\"error while matching the alertIDRegex: %v\", err)\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\talertIDMatch = alertIDRegex.FindStringSubmatch(referrer)\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tif len(alertIDMatch) > 1 {\n-\t\t\t\t\t\t\talertID = alertIDMatch[1]\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\ttelemetry.GetInstance().SendEvent(telemetry.TELEMETRY_EVENT_SUCCESSFUL_ALERT_QUERY, map[string]interface{}{\n-\t\t\t\t\t\t\t\"queryType\":             queryRangeParams.CompositeQuery.QueryType,\n-\t\t\t\t\t\t\t\"panelType\":             queryRangeParams.CompositeQuery.PanelType,\n-\t\t\t\t\t\t\t\"tracesUsed\":            queryInfoResult.TracesUsed,\n-\t\t\t\t\t\t\t\"logsUsed\":              queryInfoResult.LogsUsed,\n-\t\t\t\t\t\t\t\"metricsUsed\":           queryInfoResult.MetricsUsed,\n-\t\t\t\t\t\t\t\"numberOfQueries\":       queryInfoResult.NumberOfQueries,\n-\t\t\t\t\t\t\t\"groupByApplied\":        queryInfoResult.GroupByApplied,\n-\t\t\t\t\t\t\t\"aggregateOperator\":     queryInfoResult.AggregateOperator,\n-\t\t\t\t\t\t\t\"aggregateAttributeKey\": queryInfoResult.AggregateAttributeKey,\n-\t\t\t\t\t\t\t\"filterApplied\":         queryInfoResult.FilterApplied,\n-\t\t\t\t\t\t\t\"alertId\":               alertID,\n-\t\t\t\t\t\t}, claims.Email, true, false)\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\tif matched, _ := regexp.MatchString(`/dashboard/[a-zA-Z0-9\\-]+/(new|edit)(?:\\?.*)?$`, referrer); matched {\n+\t\tproperties := queryInfoResult.ToMap()\n+\n+\t\tif dashboardIDRegex, err := regexp.Compile(`/dashboard/([a-f0-9\\-]+)/`); err == nil {\n+\t\t\tif matches := dashboardIDRegex.FindStringSubmatch(referrer); len(matches) > 1 {\n+\t\t\t\tproperties[\"dashboard_id\"] = matches[1]\n \t\t\t}\n \t\t}\n+\n+\t\tif widgetIDRegex, err := regexp.Compile(`widgetId=([a-f0-9\\-]+)`); err == nil {\n+\t\t\tif matches := widgetIDRegex.FindStringSubmatch(referrer); len(matches) > 1 {\n+\t\t\t\tproperties[\"widget_id\"] = matches[1]\n+\t\t\t}\n+\t\t}\n+\n+\t\tproperties[\"referrer\"] = referrer\n+\t\tproperties[\"module_name\"] = \"dashboard\"\n+\t\taH.Signoz.Analytics.TrackUser(r.Context(), claims.OrgID, claims.UserID, \"Telemetry Queried\", properties)\n \t}\n+\n+\tif matched, _ := regexp.MatchString(`/alerts/(new|edit)(?:\\?.*)?$`, referrer); matched {\n+\t\tproperties := queryInfoResult.ToMap()\n+\n+\t\tif alertIDRegex, err := regexp.Compile(`ruleId=(\\d+)`); err == nil {\n+\t\t\tif matches := alertIDRegex.FindStringSubmatch(referrer); len(matches) > 1 {\n+\t\t\t\tproperties[\"alert_id\"] = matches[1]\n+\t\t\t}\n+\t\t}\n+\n+\t\tproperties[\"referrer\"] = referrer\n+\t\tproperties[\"module_name\"] = \"rule\"\n+\t\taH.Signoz.Analytics.TrackUser(r.Context(), claims.OrgID, claims.UserID, \"Telemetry Queried\", properties)",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2163589239",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8326,
        "pr_file": "pkg/query-service/app/http_handler.go",
        "discussion_id": "2163589239",
        "commented_code": "@@ -4554,96 +4501,58 @@ func (aH *APIHandler) queryRangeV3(ctx context.Context, queryRangeParams *v3.Que\n \taH.Respond(w, resp)\n }\n \n-func sendQueryResultEvents(r *http.Request, result []*v3.Result, queryRangeParams *v3.QueryRangeParamsV3) {\n+func (aH *APIHandler) sendQueryResultEvents(r *http.Request, result []*v3.Result, queryRangeParams *v3.QueryRangeParamsV3, version string) {\n+\tclaims, err := authtypes.ClaimsFromContext(r.Context())\n+\tif err != nil {\n+\t\treturn\n+\t}\n+\n+\tqueryInfoResult := NewQueryInfoResult(queryRangeParams, version)\n+\taH.Signoz.Analytics.TrackUser(r.Context(), claims.OrgID, claims.UserID, \"Telemetry Queried\", queryInfoResult.ToMap())\n+\n+\tif !(queryInfoResult.LogsUsed || queryInfoResult.MetricsUsed || queryInfoResult.TracesUsed) {\n+\t\treturn\n+\t}\n+\n \treferrer := r.Header.Get(\"Referer\")\n+\tif referrer == \"\" {\n+\t\treturn\n+\t}\n \n-\tdashboardMatched, err := regexp.MatchString(`/dashboard/[a-zA-Z0-9\\-]+/(new|edit)(?:\\?.*)?$`, referrer)\n-\tif err != nil {\n-\t\tzap.L().Error(\"error while matching the referrer\", zap.Error(err))\n-\t}\n-\talertMatched, err := regexp.MatchString(`/alerts/(new|edit)(?:\\?.*)?$`, referrer)\n-\tif err != nil {\n-\t\tzap.L().Error(\"error while matching the alert: \", zap.Error(err))\n-\t}\n-\n-\tif alertMatched || dashboardMatched {\n-\n-\t\tif len(result) > 0 && (len(result[0].Series) > 0 || len(result[0].List) > 0) {\n-\n-\t\t\tclaims, errv2 := authtypes.ClaimsFromContext(r.Context())\n-\t\t\tif errv2 == nil {\n-\t\t\t\tqueryInfoResult := telemetry.GetInstance().CheckQueryInfo(queryRangeParams)\n-\t\t\t\tif queryInfoResult.LogsUsed || queryInfoResult.MetricsUsed || queryInfoResult.TracesUsed {\n-\n-\t\t\t\t\tif dashboardMatched {\n-\t\t\t\t\t\tvar dashboardID, widgetID string\n-\t\t\t\t\t\tvar dashboardIDMatch, widgetIDMatch []string\n-\t\t\t\t\t\tdashboardIDRegex, err := regexp.Compile(`/dashboard/([a-f0-9\\-]+)/`)\n-\t\t\t\t\t\tif err == nil {\n-\t\t\t\t\t\t\tdashboardIDMatch = dashboardIDRegex.FindStringSubmatch(referrer)\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tzap.S().Errorf(\"error while matching the dashboardIDRegex: %v\", err)\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\twidgetIDRegex, err := regexp.Compile(`widgetId=([a-f0-9\\-]+)`)\n-\t\t\t\t\t\tif err == nil {\n-\t\t\t\t\t\t\twidgetIDMatch = widgetIDRegex.FindStringSubmatch(referrer)\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tzap.S().Errorf(\"error while matching the widgetIDRegex: %v\", err)\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tif len(dashboardIDMatch) > 1 {\n-\t\t\t\t\t\t\tdashboardID = dashboardIDMatch[1]\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tif len(widgetIDMatch) > 1 {\n-\t\t\t\t\t\t\twidgetID = widgetIDMatch[1]\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\ttelemetry.GetInstance().SendEvent(telemetry.TELEMETRY_EVENT_SUCCESSFUL_DASHBOARD_PANEL_QUERY, map[string]interface{}{\n-\t\t\t\t\t\t\t\"queryType\":             queryRangeParams.CompositeQuery.QueryType,\n-\t\t\t\t\t\t\t\"panelType\":             queryRangeParams.CompositeQuery.PanelType,\n-\t\t\t\t\t\t\t\"tracesUsed\":            queryInfoResult.TracesUsed,\n-\t\t\t\t\t\t\t\"logsUsed\":              queryInfoResult.LogsUsed,\n-\t\t\t\t\t\t\t\"metricsUsed\":           queryInfoResult.MetricsUsed,\n-\t\t\t\t\t\t\t\"numberOfQueries\":       queryInfoResult.NumberOfQueries,\n-\t\t\t\t\t\t\t\"groupByApplied\":        queryInfoResult.GroupByApplied,\n-\t\t\t\t\t\t\t\"aggregateOperator\":     queryInfoResult.AggregateOperator,\n-\t\t\t\t\t\t\t\"aggregateAttributeKey\": queryInfoResult.AggregateAttributeKey,\n-\t\t\t\t\t\t\t\"filterApplied\":         queryInfoResult.FilterApplied,\n-\t\t\t\t\t\t\t\"dashboardId\":           dashboardID,\n-\t\t\t\t\t\t\t\"widgetId\":              widgetID,\n-\t\t\t\t\t\t}, claims.Email, true, false)\n-\t\t\t\t\t}\n-\t\t\t\t\tif alertMatched {\n-\t\t\t\t\t\tvar alertID string\n-\t\t\t\t\t\tvar alertIDMatch []string\n-\t\t\t\t\t\talertIDRegex, err := regexp.Compile(`ruleId=(\\d+)`)\n-\t\t\t\t\t\tif err != nil {\n-\t\t\t\t\t\t\tzap.S().Errorf(\"error while matching the alertIDRegex: %v\", err)\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\talertIDMatch = alertIDRegex.FindStringSubmatch(referrer)\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tif len(alertIDMatch) > 1 {\n-\t\t\t\t\t\t\talertID = alertIDMatch[1]\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\ttelemetry.GetInstance().SendEvent(telemetry.TELEMETRY_EVENT_SUCCESSFUL_ALERT_QUERY, map[string]interface{}{\n-\t\t\t\t\t\t\t\"queryType\":             queryRangeParams.CompositeQuery.QueryType,\n-\t\t\t\t\t\t\t\"panelType\":             queryRangeParams.CompositeQuery.PanelType,\n-\t\t\t\t\t\t\t\"tracesUsed\":            queryInfoResult.TracesUsed,\n-\t\t\t\t\t\t\t\"logsUsed\":              queryInfoResult.LogsUsed,\n-\t\t\t\t\t\t\t\"metricsUsed\":           queryInfoResult.MetricsUsed,\n-\t\t\t\t\t\t\t\"numberOfQueries\":       queryInfoResult.NumberOfQueries,\n-\t\t\t\t\t\t\t\"groupByApplied\":        queryInfoResult.GroupByApplied,\n-\t\t\t\t\t\t\t\"aggregateOperator\":     queryInfoResult.AggregateOperator,\n-\t\t\t\t\t\t\t\"aggregateAttributeKey\": queryInfoResult.AggregateAttributeKey,\n-\t\t\t\t\t\t\t\"filterApplied\":         queryInfoResult.FilterApplied,\n-\t\t\t\t\t\t\t\"alertId\":               alertID,\n-\t\t\t\t\t\t}, claims.Email, true, false)\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\tif matched, _ := regexp.MatchString(`/dashboard/[a-zA-Z0-9\\-]+/(new|edit)(?:\\?.*)?$`, referrer); matched {\n+\t\tproperties := queryInfoResult.ToMap()\n+\n+\t\tif dashboardIDRegex, err := regexp.Compile(`/dashboard/([a-f0-9\\-]+)/`); err == nil {\n+\t\t\tif matches := dashboardIDRegex.FindStringSubmatch(referrer); len(matches) > 1 {\n+\t\t\t\tproperties[\"dashboard_id\"] = matches[1]\n \t\t\t}\n \t\t}\n+\n+\t\tif widgetIDRegex, err := regexp.Compile(`widgetId=([a-f0-9\\-]+)`); err == nil {\n+\t\t\tif matches := widgetIDRegex.FindStringSubmatch(referrer); len(matches) > 1 {\n+\t\t\t\tproperties[\"widget_id\"] = matches[1]\n+\t\t\t}\n+\t\t}\n+\n+\t\tproperties[\"referrer\"] = referrer\n+\t\tproperties[\"module_name\"] = \"dashboard\"\n+\t\taH.Signoz.Analytics.TrackUser(r.Context(), claims.OrgID, claims.UserID, \"Telemetry Queried\", properties)\n \t}\n+\n+\tif matched, _ := regexp.MatchString(`/alerts/(new|edit)(?:\\?.*)?$`, referrer); matched {\n+\t\tproperties := queryInfoResult.ToMap()\n+\n+\t\tif alertIDRegex, err := regexp.Compile(`ruleId=(\\d+)`); err == nil {\n+\t\t\tif matches := alertIDRegex.FindStringSubmatch(referrer); len(matches) > 1 {\n+\t\t\t\tproperties[\"alert_id\"] = matches[1]\n+\t\t\t}\n+\t\t}\n+\n+\t\tproperties[\"referrer\"] = referrer\n+\t\tproperties[\"module_name\"] = \"rule\"\n+\t\taH.Signoz.Analytics.TrackUser(r.Context(), claims.OrgID, claims.UserID, \"Telemetry Queried\", properties)",
        "comment_created_at": "2025-06-24T10:38:40+00:00",
        "comment_author": "makeavish",
        "comment_body": "Using this event we can't know if user actually saw the data on UI or not so this event is not a replacement for `TELEMETRY_EVENT_SUCCESSFUL_DASHBOARD_PANEL_QUERY` or `TELEMETRY_EVENT_SUCCESSFUL_ALERT_QUERY`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2056261883",
    "pr_number": 7711,
    "pr_file": "pkg/query-service/app/integrations/thirdPartyApi/translator.go",
    "created_at": "2025-04-23T14:59:59+00:00",
    "commented_code": "Legend:            \"endpoints\",\n \t\tDataSource:        v3.DataSourceTraces,\n \t\tStepInterval:      defaultStepInterval,\n-\t\tAggregateOperator: v3.AggregateOperatorCountDistinct,\n+\t\tAggregateOperator: v3.AggregateOperatorCount,\n \t\tAggregateAttribute: v3.AttributeKey{\n \t\t\tKey:      \"http.url\",\n \t\t\tDataType: v3.AttributeKeyDataTypeString,",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2056261883",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7711,
        "pr_file": "pkg/query-service/app/integrations/thirdPartyApi/translator.go",
        "discussion_id": "2056261883",
        "commented_code": "@@ -61,7 +61,7 @@ func BuildDomainList(thirdPartyApis *ThirdPartyApis) (*v3.QueryRangeParamsV3, er\n \t\tLegend:            \"endpoints\",\n \t\tDataSource:        v3.DataSourceTraces,\n \t\tStepInterval:      defaultStepInterval,\n-\t\tAggregateOperator: v3.AggregateOperatorCountDistinct,\n+\t\tAggregateOperator: v3.AggregateOperatorCount,\n \t\tAggregateAttribute: v3.AttributeKey{\n \t\t\tKey:      \"http.url\",\n \t\t\tDataType: v3.AttributeKeyDataTypeString,",
        "comment_created_at": "2025-04-23T14:59:59+00:00",
        "comment_author": "srikanthccv",
        "comment_body": "why was this changed?",
        "pr_file_module": null
      },
      {
        "comment_id": "2056273121",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7711,
        "pr_file": "pkg/query-service/app/integrations/thirdPartyApi/translator.go",
        "discussion_id": "2056261883",
        "commented_code": "@@ -61,7 +61,7 @@ func BuildDomainList(thirdPartyApis *ThirdPartyApis) (*v3.QueryRangeParamsV3, er\n \t\tLegend:            \"endpoints\",\n \t\tDataSource:        v3.DataSourceTraces,\n \t\tStepInterval:      defaultStepInterval,\n-\t\tAggregateOperator: v3.AggregateOperatorCountDistinct,\n+\t\tAggregateOperator: v3.AggregateOperatorCount,\n \t\tAggregateAttribute: v3.AttributeKey{\n \t\t\tKey:      \"http.url\",\n \t\t\tDataType: v3.AttributeKeyDataTypeString,",
        "comment_created_at": "2025-04-23T15:05:19+00:00",
        "comment_author": "shivanshuraj1333",
        "comment_body": "okay I see, the count distinct only make sense for span ids, but then the assumption there is, that the span ids are distinct, but there could be cases where the spans are not distinct, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "2056290354",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7711,
        "pr_file": "pkg/query-service/app/integrations/thirdPartyApi/translator.go",
        "discussion_id": "2056261883",
        "commented_code": "@@ -61,7 +61,7 @@ func BuildDomainList(thirdPartyApis *ThirdPartyApis) (*v3.QueryRangeParamsV3, er\n \t\tLegend:            \"endpoints\",\n \t\tDataSource:        v3.DataSourceTraces,\n \t\tStepInterval:      defaultStepInterval,\n-\t\tAggregateOperator: v3.AggregateOperatorCountDistinct,\n+\t\tAggregateOperator: v3.AggregateOperatorCount,\n \t\tAggregateAttribute: v3.AttributeKey{\n \t\t\tKey:      \"http.url\",\n \t\t\tDataType: v3.AttributeKeyDataTypeString,",
        "comment_created_at": "2025-04-23T15:14:16+00:00",
        "comment_author": "srikanthccv",
        "comment_body": "Correctness is a non-negotiable requirement. The existing aggregation is countDistinct(http.url), which you're changing to count. These are not equivalent operations. However, countDistinct(span_id) would be the same as count because each row in the table already represents a unique span. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2056291822",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7711,
        "pr_file": "pkg/query-service/app/integrations/thirdPartyApi/translator.go",
        "discussion_id": "2056261883",
        "commented_code": "@@ -61,7 +61,7 @@ func BuildDomainList(thirdPartyApis *ThirdPartyApis) (*v3.QueryRangeParamsV3, er\n \t\tLegend:            \"endpoints\",\n \t\tDataSource:        v3.DataSourceTraces,\n \t\tStepInterval:      defaultStepInterval,\n-\t\tAggregateOperator: v3.AggregateOperatorCountDistinct,\n+\t\tAggregateOperator: v3.AggregateOperatorCount,\n \t\tAggregateAttribute: v3.AttributeKey{\n \t\t\tKey:      \"http.url\",\n \t\t\tDataType: v3.AttributeKeyDataTypeString,",
        "comment_created_at": "2025-04-23T15:15:04+00:00",
        "comment_author": "srikanthccv",
        "comment_body": "> that the span ids are distinct, but there could be cases where the spans are not distinct, right?\r\n\r\nWhen does this happen?",
        "pr_file_module": null
      },
      {
        "comment_id": "2056294392",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7711,
        "pr_file": "pkg/query-service/app/integrations/thirdPartyApi/translator.go",
        "discussion_id": "2056261883",
        "commented_code": "@@ -61,7 +61,7 @@ func BuildDomainList(thirdPartyApis *ThirdPartyApis) (*v3.QueryRangeParamsV3, er\n \t\tLegend:            \"endpoints\",\n \t\tDataSource:        v3.DataSourceTraces,\n \t\tStepInterval:      defaultStepInterval,\n-\t\tAggregateOperator: v3.AggregateOperatorCountDistinct,\n+\t\tAggregateOperator: v3.AggregateOperatorCount,\n \t\tAggregateAttribute: v3.AttributeKey{\n \t\t\tKey:      \"http.url\",\n \t\t\tDataType: v3.AttributeKeyDataTypeString,",
        "comment_created_at": "2025-04-23T15:16:30+00:00",
        "comment_author": "shivanshuraj1333",
        "comment_body": "have updated it, but should we worry duplication for span_id, or consider it as a rare corner case and for better perf, just use count instead?",
        "pr_file_module": null
      },
      {
        "comment_id": "2056299453",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7711,
        "pr_file": "pkg/query-service/app/integrations/thirdPartyApi/translator.go",
        "discussion_id": "2056261883",
        "commented_code": "@@ -61,7 +61,7 @@ func BuildDomainList(thirdPartyApis *ThirdPartyApis) (*v3.QueryRangeParamsV3, er\n \t\tLegend:            \"endpoints\",\n \t\tDataSource:        v3.DataSourceTraces,\n \t\tStepInterval:      defaultStepInterval,\n-\t\tAggregateOperator: v3.AggregateOperatorCountDistinct,\n+\t\tAggregateOperator: v3.AggregateOperatorCount,\n \t\tAggregateAttribute: v3.AttributeKey{\n \t\t\tKey:      \"http.url\",\n \t\t\tDataType: v3.AttributeKeyDataTypeString,",
        "comment_created_at": "2025-04-23T15:19:15+00:00",
        "comment_author": "shivanshuraj1333",
        "comment_body": "> When does this happen?\r\n\r\nI encountered this here https://github.com/SigNoz/signoz/issues/7286, more detailed issue is here https://github.com/SigNoz/signoz/issues/7281",
        "pr_file_module": null
      },
      {
        "comment_id": "2056314717",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7711,
        "pr_file": "pkg/query-service/app/integrations/thirdPartyApi/translator.go",
        "discussion_id": "2056261883",
        "commented_code": "@@ -61,7 +61,7 @@ func BuildDomainList(thirdPartyApis *ThirdPartyApis) (*v3.QueryRangeParamsV3, er\n \t\tLegend:            \"endpoints\",\n \t\tDataSource:        v3.DataSourceTraces,\n \t\tStepInterval:      defaultStepInterval,\n-\t\tAggregateOperator: v3.AggregateOperatorCountDistinct,\n+\t\tAggregateOperator: v3.AggregateOperatorCount,\n \t\tAggregateAttribute: v3.AttributeKey{\n \t\t\tKey:      \"http.url\",\n \t\t\tDataType: v3.AttributeKeyDataTypeString,",
        "comment_created_at": "2025-04-23T15:27:16+00:00",
        "comment_author": "srikanthccv",
        "comment_body": "Yes, as you can see this is not specific to your current feature implementation but rather points to a broader issue that needs to be addressed separately.",
        "pr_file_module": null
      },
      {
        "comment_id": "2056320515",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7711,
        "pr_file": "pkg/query-service/app/integrations/thirdPartyApi/translator.go",
        "discussion_id": "2056261883",
        "commented_code": "@@ -61,7 +61,7 @@ func BuildDomainList(thirdPartyApis *ThirdPartyApis) (*v3.QueryRangeParamsV3, er\n \t\tLegend:            \"endpoints\",\n \t\tDataSource:        v3.DataSourceTraces,\n \t\tStepInterval:      defaultStepInterval,\n-\t\tAggregateOperator: v3.AggregateOperatorCountDistinct,\n+\t\tAggregateOperator: v3.AggregateOperatorCount,\n \t\tAggregateAttribute: v3.AttributeKey{\n \t\t\tKey:      \"http.url\",\n \t\t\tDataType: v3.AttributeKeyDataTypeString,",
        "comment_created_at": "2025-04-23T15:30:36+00:00",
        "comment_author": "shivanshuraj1333",
        "comment_body": "yes, can you please re-review this PR?",
        "pr_file_module": null
      }
    ]
  }
]