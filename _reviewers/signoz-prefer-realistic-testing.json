[
  {
    "discussion_id": "2054097968",
    "pr_number": 7692,
    "pr_file": "frontend/src/hooks/TracesFunnels/useFunnelGraph.tsx",
    "created_at": "2025-04-22T13:17:03+00:00",
    "commented_code": "const totalSpans = successSpans + errorSpans;\n \n \t\t\treturn (\n-\t\t\t\t<div key={step} className=\"funnel-graph__legend-column\">\n+\t\t\t\t<div\n+\t\t\t\t\tkey={step}\n+\t\t\t\t\tclassName=\"funnel-graph__legend-column\"\n+\t\t\t\t\tdata-testid=\"funnel-graph-legend-column\"",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2054097968",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7692,
        "pr_file": "frontend/src/hooks/TracesFunnels/useFunnelGraph.tsx",
        "discussion_id": "2054097968",
        "commented_code": "@@ -162,7 +162,11 @@ function useFunnelGraph({ data }: UseFunnelGraphProps): UseFunnelGraph {\n \t\t\tconst totalSpans = successSpans + errorSpans;\n \n \t\t\treturn (\n-\t\t\t\t<div key={step} className=\"funnel-graph__legend-column\">\n+\t\t\t\t<div\n+\t\t\t\t\tkey={step}\n+\t\t\t\t\tclassName=\"funnel-graph__legend-column\"\n+\t\t\t\t\tdata-testid=\"funnel-graph-legend-column\"",
        "comment_created_at": "2025-04-22T13:17:03+00:00",
        "comment_author": "aks07",
        "comment_body": "Let's minimize the use of `data-testid` in test cases and prefer queries like `getByRole`, `getByLabelText`, etc. These align better with how users interact with the UI and make the tests more robust. It also helps reduce unnecessary attributes being shipped to production.",
        "pr_file_module": null
      },
      {
        "comment_id": "2054470400",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7692,
        "pr_file": "frontend/src/hooks/TracesFunnels/useFunnelGraph.tsx",
        "discussion_id": "2054097968",
        "commented_code": "@@ -162,7 +162,11 @@ function useFunnelGraph({ data }: UseFunnelGraphProps): UseFunnelGraph {\n \t\t\tconst totalSpans = successSpans + errorSpans;\n \n \t\t\treturn (\n-\t\t\t\t<div key={step} className=\"funnel-graph__legend-column\">\n+\t\t\t\t<div\n+\t\t\t\t\tkey={step}\n+\t\t\t\t\tclassName=\"funnel-graph__legend-column\"\n+\t\t\t\t\tdata-testid=\"funnel-graph-legend-column\"",
        "comment_created_at": "2025-04-22T16:35:56+00:00",
        "comment_author": "ahmadshaheer",
        "comment_body": "@aks07, in most cases, I have added the data-testid only if I was not able to access the elements using other selectors. but we can revisit this separately and improve wherever needed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2054066124",
    "pr_number": 7537,
    "pr_file": "frontend/src/container/QueryBuilder/filters/QueryBuilderSearchV2/__test__/QueryBuilderSearchV2.test.tsx",
    "created_at": "2025-04-22T12:59:47+00:00",
    "commented_code": "+/* eslint-disable react/jsx-props-no-spreading */\n+import {\n+\tact,\n+\tfireEvent,\n+\trender,\n+\tRenderResult,\n+\tscreen,\n+} from '@testing-library/react';\n+import {\n+\tinitialQueriesMap,\n+\tinitialQueryBuilderFormValues,\n+} from 'constants/queryBuilder';\n+import { QueryBuilderContext } from 'providers/QueryBuilder';\n+import { QueryClient, QueryClientProvider } from 'react-query';\n+import { DataTypes } from 'types/api/queryBuilder/queryAutocompleteResponse';\n+import { DataSource } from 'types/common/queryBuilder';\n+\n+import QueryBuilderSearchV2 from '../QueryBuilderSearchV2';\n+\n+const queryClient = new QueryClient({\n+\tdefaultOptions: {\n+\t\tqueries: {\n+\t\t\trefetchOnWindowFocus: false,\n+\t\t},\n+\t},\n+});\n+\n+describe('Span scope selector', () => {\n+\tit('should render span scope selector when data source is TRACES', () => {\n+\t\tconst { getByTestId } = render(\n+\t\t\t<QueryClientProvider client={queryClient}>\n+\t\t\t\t<QueryBuilderSearchV2\n+\t\t\t\t\tquery={{\n+\t\t\t\t\t\t...initialQueryBuilderFormValues,\n+\t\t\t\t\t\tdataSource: DataSource.TRACES,\n+\t\t\t\t\t}}\n+\t\t\t\t\tonChange={jest.fn()}\n+\t\t\t\t/>\n+\t\t\t</QueryClientProvider>,\n+\t\t);\n+\n+\t\texpect(getByTestId('span-scope-selector')).toBeInTheDocument();\n+\t});\n+\n+\tit('should not render span scope selector for non-TRACES data sources', () => {\n+\t\tconst { queryByTestId } = render(\n+\t\t\t<QueryClientProvider client={queryClient}>\n+\t\t\t\t<QueryBuilderSearchV2\n+\t\t\t\t\tquery={{\n+\t\t\t\t\t\t...initialQueryBuilderFormValues,\n+\t\t\t\t\t\tdataSource: DataSource.METRICS,\n+\t\t\t\t\t}}\n+\t\t\t\t\tonChange={jest.fn()}\n+\t\t\t\t/>\n+\t\t\t</QueryClientProvider>,\n+\t\t);\n+\n+\t\texpect(queryByTestId('span-scope-selector')).not.toBeInTheDocument();\n+\t});\n+});\n+\n+const mockOnChange = jest.fn();\n+const mockHandleRunQuery = jest.fn();\n+const defaultProps = {\n+\tquery: {\n+\t\t...initialQueriesMap.traces.builder.queryData[0],\n+\t\tdataSource: DataSource.TRACES,\n+\t\tqueryName: 'traces_query',\n+\t},\n+\tonChange: mockOnChange,\n+};\n+\n+const renderWithContext = (props = {}): RenderResult => {\n+\tconst mergedProps = { ...defaultProps, ...props };\n+\n+\treturn render(\n+\t\t<QueryClientProvider client={queryClient}>\n+\t\t\t<QueryBuilderContext.Provider\n+\t\t\t\tvalue={\n+\t\t\t\t\t{\n+\t\t\t\t\t\tcurrentQuery: initialQueriesMap.traces,\n+\t\t\t\t\t\thandleRunQuery: mockHandleRunQuery,\n+\t\t\t\t\t} as any\n+\t\t\t\t}\n+\t\t\t>\n+\t\t\t\t<QueryBuilderSearchV2 {...mergedProps} />\n+\t\t\t</QueryBuilderContext.Provider>\n+\t\t</QueryClientProvider>,\n+\t);\n+};\n+\n+const mockAggregateKeysData = {\n+\tpayload: {\n+\t\tattributeKeys: [\n+\t\t\t{\n+\t\t\t\t// eslint-disable-next-line sonarjs/no-duplicate-string\n+\t\t\t\tkey: 'http.status',\n+\t\t\t\tdataType: DataTypes.String,\n+\t\t\t\ttype: 'tag',\n+\t\t\t\tisColumn: false,\n+\t\t\t\tisJSON: false,\n+\t\t\t\tid: 'http.status--string--tag--false',\n+\t\t\t},\n+\t\t],\n+\t},\n+};\n+\n+jest.mock('hooks/queryBuilder/useGetAggregateKeys', () => ({",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2054066124",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7537,
        "pr_file": "frontend/src/container/QueryBuilder/filters/QueryBuilderSearchV2/__test__/QueryBuilderSearchV2.test.tsx",
        "discussion_id": "2054066124",
        "commented_code": "@@ -0,0 +1,196 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+import {\n+\tact,\n+\tfireEvent,\n+\trender,\n+\tRenderResult,\n+\tscreen,\n+} from '@testing-library/react';\n+import {\n+\tinitialQueriesMap,\n+\tinitialQueryBuilderFormValues,\n+} from 'constants/queryBuilder';\n+import { QueryBuilderContext } from 'providers/QueryBuilder';\n+import { QueryClient, QueryClientProvider } from 'react-query';\n+import { DataTypes } from 'types/api/queryBuilder/queryAutocompleteResponse';\n+import { DataSource } from 'types/common/queryBuilder';\n+\n+import QueryBuilderSearchV2 from '../QueryBuilderSearchV2';\n+\n+const queryClient = new QueryClient({\n+\tdefaultOptions: {\n+\t\tqueries: {\n+\t\t\trefetchOnWindowFocus: false,\n+\t\t},\n+\t},\n+});\n+\n+describe('Span scope selector', () => {\n+\tit('should render span scope selector when data source is TRACES', () => {\n+\t\tconst { getByTestId } = render(\n+\t\t\t<QueryClientProvider client={queryClient}>\n+\t\t\t\t<QueryBuilderSearchV2\n+\t\t\t\t\tquery={{\n+\t\t\t\t\t\t...initialQueryBuilderFormValues,\n+\t\t\t\t\t\tdataSource: DataSource.TRACES,\n+\t\t\t\t\t}}\n+\t\t\t\t\tonChange={jest.fn()}\n+\t\t\t\t/>\n+\t\t\t</QueryClientProvider>,\n+\t\t);\n+\n+\t\texpect(getByTestId('span-scope-selector')).toBeInTheDocument();\n+\t});\n+\n+\tit('should not render span scope selector for non-TRACES data sources', () => {\n+\t\tconst { queryByTestId } = render(\n+\t\t\t<QueryClientProvider client={queryClient}>\n+\t\t\t\t<QueryBuilderSearchV2\n+\t\t\t\t\tquery={{\n+\t\t\t\t\t\t...initialQueryBuilderFormValues,\n+\t\t\t\t\t\tdataSource: DataSource.METRICS,\n+\t\t\t\t\t}}\n+\t\t\t\t\tonChange={jest.fn()}\n+\t\t\t\t/>\n+\t\t\t</QueryClientProvider>,\n+\t\t);\n+\n+\t\texpect(queryByTestId('span-scope-selector')).not.toBeInTheDocument();\n+\t});\n+});\n+\n+const mockOnChange = jest.fn();\n+const mockHandleRunQuery = jest.fn();\n+const defaultProps = {\n+\tquery: {\n+\t\t...initialQueriesMap.traces.builder.queryData[0],\n+\t\tdataSource: DataSource.TRACES,\n+\t\tqueryName: 'traces_query',\n+\t},\n+\tonChange: mockOnChange,\n+};\n+\n+const renderWithContext = (props = {}): RenderResult => {\n+\tconst mergedProps = { ...defaultProps, ...props };\n+\n+\treturn render(\n+\t\t<QueryClientProvider client={queryClient}>\n+\t\t\t<QueryBuilderContext.Provider\n+\t\t\t\tvalue={\n+\t\t\t\t\t{\n+\t\t\t\t\t\tcurrentQuery: initialQueriesMap.traces,\n+\t\t\t\t\t\thandleRunQuery: mockHandleRunQuery,\n+\t\t\t\t\t} as any\n+\t\t\t\t}\n+\t\t\t>\n+\t\t\t\t<QueryBuilderSearchV2 {...mergedProps} />\n+\t\t\t</QueryBuilderContext.Provider>\n+\t\t</QueryClientProvider>,\n+\t);\n+};\n+\n+const mockAggregateKeysData = {\n+\tpayload: {\n+\t\tattributeKeys: [\n+\t\t\t{\n+\t\t\t\t// eslint-disable-next-line sonarjs/no-duplicate-string\n+\t\t\t\tkey: 'http.status',\n+\t\t\t\tdataType: DataTypes.String,\n+\t\t\t\ttype: 'tag',\n+\t\t\t\tisColumn: false,\n+\t\t\t\tisJSON: false,\n+\t\t\t\tid: 'http.status--string--tag--false',\n+\t\t\t},\n+\t\t],\n+\t},\n+};\n+\n+jest.mock('hooks/queryBuilder/useGetAggregateKeys', () => ({",
        "comment_created_at": "2025-04-22T12:59:47+00:00",
        "comment_author": "aks07",
        "comment_body": "Suggestion: Let's stick to using `msw` for use cases where data is being fetched via hooks. This ensures consistency with other parts of the codebase and helps test the complete render cycle. Mocking the hook directly removes the need to pass props to it, which can lead to less realistic test scenarios.",
        "pr_file_module": null
      },
      {
        "comment_id": "2054334418",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7537,
        "pr_file": "frontend/src/container/QueryBuilder/filters/QueryBuilderSearchV2/__test__/QueryBuilderSearchV2.test.tsx",
        "discussion_id": "2054066124",
        "commented_code": "@@ -0,0 +1,196 @@\n+/* eslint-disable react/jsx-props-no-spreading */\n+import {\n+\tact,\n+\tfireEvent,\n+\trender,\n+\tRenderResult,\n+\tscreen,\n+} from '@testing-library/react';\n+import {\n+\tinitialQueriesMap,\n+\tinitialQueryBuilderFormValues,\n+} from 'constants/queryBuilder';\n+import { QueryBuilderContext } from 'providers/QueryBuilder';\n+import { QueryClient, QueryClientProvider } from 'react-query';\n+import { DataTypes } from 'types/api/queryBuilder/queryAutocompleteResponse';\n+import { DataSource } from 'types/common/queryBuilder';\n+\n+import QueryBuilderSearchV2 from '../QueryBuilderSearchV2';\n+\n+const queryClient = new QueryClient({\n+\tdefaultOptions: {\n+\t\tqueries: {\n+\t\t\trefetchOnWindowFocus: false,\n+\t\t},\n+\t},\n+});\n+\n+describe('Span scope selector', () => {\n+\tit('should render span scope selector when data source is TRACES', () => {\n+\t\tconst { getByTestId } = render(\n+\t\t\t<QueryClientProvider client={queryClient}>\n+\t\t\t\t<QueryBuilderSearchV2\n+\t\t\t\t\tquery={{\n+\t\t\t\t\t\t...initialQueryBuilderFormValues,\n+\t\t\t\t\t\tdataSource: DataSource.TRACES,\n+\t\t\t\t\t}}\n+\t\t\t\t\tonChange={jest.fn()}\n+\t\t\t\t/>\n+\t\t\t</QueryClientProvider>,\n+\t\t);\n+\n+\t\texpect(getByTestId('span-scope-selector')).toBeInTheDocument();\n+\t});\n+\n+\tit('should not render span scope selector for non-TRACES data sources', () => {\n+\t\tconst { queryByTestId } = render(\n+\t\t\t<QueryClientProvider client={queryClient}>\n+\t\t\t\t<QueryBuilderSearchV2\n+\t\t\t\t\tquery={{\n+\t\t\t\t\t\t...initialQueryBuilderFormValues,\n+\t\t\t\t\t\tdataSource: DataSource.METRICS,\n+\t\t\t\t\t}}\n+\t\t\t\t\tonChange={jest.fn()}\n+\t\t\t\t/>\n+\t\t\t</QueryClientProvider>,\n+\t\t);\n+\n+\t\texpect(queryByTestId('span-scope-selector')).not.toBeInTheDocument();\n+\t});\n+});\n+\n+const mockOnChange = jest.fn();\n+const mockHandleRunQuery = jest.fn();\n+const defaultProps = {\n+\tquery: {\n+\t\t...initialQueriesMap.traces.builder.queryData[0],\n+\t\tdataSource: DataSource.TRACES,\n+\t\tqueryName: 'traces_query',\n+\t},\n+\tonChange: mockOnChange,\n+};\n+\n+const renderWithContext = (props = {}): RenderResult => {\n+\tconst mergedProps = { ...defaultProps, ...props };\n+\n+\treturn render(\n+\t\t<QueryClientProvider client={queryClient}>\n+\t\t\t<QueryBuilderContext.Provider\n+\t\t\t\tvalue={\n+\t\t\t\t\t{\n+\t\t\t\t\t\tcurrentQuery: initialQueriesMap.traces,\n+\t\t\t\t\t\thandleRunQuery: mockHandleRunQuery,\n+\t\t\t\t\t} as any\n+\t\t\t\t}\n+\t\t\t>\n+\t\t\t\t<QueryBuilderSearchV2 {...mergedProps} />\n+\t\t\t</QueryBuilderContext.Provider>\n+\t\t</QueryClientProvider>,\n+\t);\n+};\n+\n+const mockAggregateKeysData = {\n+\tpayload: {\n+\t\tattributeKeys: [\n+\t\t\t{\n+\t\t\t\t// eslint-disable-next-line sonarjs/no-duplicate-string\n+\t\t\t\tkey: 'http.status',\n+\t\t\t\tdataType: DataTypes.String,\n+\t\t\t\ttype: 'tag',\n+\t\t\t\tisColumn: false,\n+\t\t\t\tisJSON: false,\n+\t\t\t\tid: 'http.status--string--tag--false',\n+\t\t\t},\n+\t\t],\n+\t},\n+};\n+\n+jest.mock('hooks/queryBuilder/useGetAggregateKeys', () => ({",
        "comment_created_at": "2025-04-22T15:13:24+00:00",
        "comment_author": "ahmadshaheer",
        "comment_body": "that's a good suggestion, @aks07, I'll address this in a separate PR.",
        "pr_file_module": null
      }
    ]
  }
]