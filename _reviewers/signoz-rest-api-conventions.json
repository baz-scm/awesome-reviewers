[
  {
    "discussion_id": "2307270246",
    "pr_number": 8936,
    "pr_file": "ee/query-service/app/api/api.go",
    "created_at": "2025-08-28T12:30:58+00:00",
    "commented_code": "router.HandleFunc(\"/api/v1/billing\", am.AdminAccess(ah.getBilling)).Methods(http.MethodGet)\n \trouter.HandleFunc(\"/api/v1/portal\", am.AdminAccess(ah.LicensingAPI.Portal)).Methods(http.MethodPost)\n \n+\t// export\n+\trouter.HandleFunc(\"/api/v1/export\", am.OpenAccess(ah.Export)).Methods(http.MethodGet)",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2307270246",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8936,
        "pr_file": "ee/query-service/app/api/api.go",
        "discussion_id": "2307270246",
        "commented_code": "@@ -102,6 +102,9 @@ func (ah *APIHandler) RegisterRoutes(router *mux.Router, am *middleware.AuthZ) {\n \trouter.HandleFunc(\"/api/v1/billing\", am.AdminAccess(ah.getBilling)).Methods(http.MethodGet)\n \trouter.HandleFunc(\"/api/v1/portal\", am.AdminAccess(ah.LicensingAPI.Portal)).Methods(http.MethodPost)\n \n+\t// export\n+\trouter.HandleFunc(\"/api/v1/export\", am.OpenAccess(ah.Export)).Methods(http.MethodGet)",
        "comment_created_at": "2025-08-28T12:30:58+00:00",
        "comment_author": "nityanandagohain",
        "comment_body": "let's put this endpoint for both ee and community, add it to http_handler.go. Also let's add viewAccess instead of openAccess. As openAccess will allow downloding without any authentication key.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2131588334",
    "pr_number": 8165,
    "pr_file": "pkg/types/querybuildertypes/querybuildertypesv5/trace_operator.go",
    "created_at": "2025-06-06T06:26:02+00:00",
    "commented_code": "+package querybuildertypesv5\n+\n+import (\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/SigNoz/signoz/pkg/errors\"\n+\t\"github.com/SigNoz/signoz/pkg/types/telemetrytypes\"\n+\t\"github.com/SigNoz/signoz/pkg/valuer\"\n+)\n+\n+// TraceOperatorType defines the type of trace operator\n+type TraceOperatorType struct{ valuer.String }\n+\n+var (\n+\tTraceOperatorDirectDescendant   = TraceOperatorType{valuer.NewString(\"=>\")}\n+\tTraceOperatorIndirectDescendant = TraceOperatorType{valuer.NewString(\"->\")}\n+\tTraceOperatorAnd                = TraceOperatorType{valuer.NewString(\"&&\")}\n+\tTraceOperatorOr                 = TraceOperatorType{valuer.NewString(\"||\")}\n+\tTraceOperatorNot                = TraceOperatorType{valuer.NewString(\"NOT\")}\n+\tTraceOperatorExclude            = TraceOperatorType{valuer.NewString(\"NOT\")}\n+)\n+\n+// TraceFilterCondition represents a condition for trace-level filtering\n+type TraceFilterCondition struct {\n+\tOperator FilterOperator `json:\"operator\"`\n+\tValue    string         `json:\"value,omitempty\"`\n+\tValues   []string       `json:\"values,omitempty\"`\n+}\n+\n+// TraceFilters represents trace-level conditions\n+type TraceFilters struct {\n+\tSpanCount     *TraceFilterCondition `json:\"span_count,omitempty\"`\n+\tTraceDuration *TraceFilterCondition `json:\"trace_duration,omitempty\"`\n+}\n+\n+// QueryBuilderTraceOperator represents a trace operator query\n+type QueryBuilderTraceOperator struct {\n+\tName     string `json:\"name\"`\n+\tDisabled bool   `json:\"disabled,omitempty\"`\n+\n+\tExpression string `json:\"expression\"`\n+\n+\tTraceFilters *TraceFilters `json:\"traceFilters,omitempty\"`\n+\n+\tSelectFields []telemetrytypes.TelemetryFieldKey `json:\"selectFields,omitempty\"`\n+\tOrder        []OrderBy                          `json:\"order,omitempty\"`\n+\tLimit        int                                `json:\"limit,omitempty\"`",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2131588334",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8165,
        "pr_file": "pkg/types/querybuildertypes/querybuildertypesv5/trace_operator.go",
        "discussion_id": "2131588334",
        "commented_code": "@@ -0,0 +1,360 @@\n+package querybuildertypesv5\n+\n+import (\n+\t\"regexp\"\n+\t\"strings\"\n+\n+\t\"github.com/SigNoz/signoz/pkg/errors\"\n+\t\"github.com/SigNoz/signoz/pkg/types/telemetrytypes\"\n+\t\"github.com/SigNoz/signoz/pkg/valuer\"\n+)\n+\n+// TraceOperatorType defines the type of trace operator\n+type TraceOperatorType struct{ valuer.String }\n+\n+var (\n+\tTraceOperatorDirectDescendant   = TraceOperatorType{valuer.NewString(\"=>\")}\n+\tTraceOperatorIndirectDescendant = TraceOperatorType{valuer.NewString(\"->\")}\n+\tTraceOperatorAnd                = TraceOperatorType{valuer.NewString(\"&&\")}\n+\tTraceOperatorOr                 = TraceOperatorType{valuer.NewString(\"||\")}\n+\tTraceOperatorNot                = TraceOperatorType{valuer.NewString(\"NOT\")}\n+\tTraceOperatorExclude            = TraceOperatorType{valuer.NewString(\"NOT\")}\n+)\n+\n+// TraceFilterCondition represents a condition for trace-level filtering\n+type TraceFilterCondition struct {\n+\tOperator FilterOperator `json:\"operator\"`\n+\tValue    string         `json:\"value,omitempty\"`\n+\tValues   []string       `json:\"values,omitempty\"`\n+}\n+\n+// TraceFilters represents trace-level conditions\n+type TraceFilters struct {\n+\tSpanCount     *TraceFilterCondition `json:\"span_count,omitempty\"`\n+\tTraceDuration *TraceFilterCondition `json:\"trace_duration,omitempty\"`\n+}\n+\n+// QueryBuilderTraceOperator represents a trace operator query\n+type QueryBuilderTraceOperator struct {\n+\tName     string `json:\"name\"`\n+\tDisabled bool   `json:\"disabled,omitempty\"`\n+\n+\tExpression string `json:\"expression\"`\n+\n+\tTraceFilters *TraceFilters `json:\"traceFilters,omitempty\"`\n+\n+\tSelectFields []telemetrytypes.TelemetryFieldKey `json:\"selectFields,omitempty\"`\n+\tOrder        []OrderBy                          `json:\"order,omitempty\"`\n+\tLimit        int                                `json:\"limit,omitempty\"`",
        "comment_created_at": "2025-06-06T06:26:02+00:00",
        "comment_author": "srikanthccv",
        "comment_body": "limit alone won't be enough for pagination, there should be other info. Of all the alternatives, cursor/token based pagination is recommended and common for paginated APIs https://google.aip.dev/158",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2067079982",
    "pr_number": 7763,
    "pr_file": "pkg/query-service/app/http_handler.go",
    "created_at": "2025-04-29T18:07:53+00:00",
    "commented_code": "}\n \taH.Respond(w, resp)\n }\n+\n+// RegisterTraceFunnelsRoutes adds trace funnels routes\n+func (aH *APIHandler) RegisterTraceFunnelsRoutes(router *mux.Router, am *middleware.AuthZ) {\n+\t// Main trace funnels router\n+\ttraceFunnelsRouter := router.PathPrefix(\"/api/v1/trace-funnels\").Subrouter()\n+\n+\t// API endpoints\n+\ttraceFunnelsRouter.HandleFunc(\"/new\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.New)).\n+\t\tMethods(http.MethodPost)\n+\ttraceFunnelsRouter.HandleFunc(\"/list\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.List)).\n+\t\tMethods(http.MethodGet)\n+\ttraceFunnelsRouter.HandleFunc(\"/steps/update\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.UpdateSteps)).\n+\t\tMethods(http.MethodPut)\n+\n+\ttraceFunnelsRouter.HandleFunc(\"/{funnel_id}\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.Get)).\n+\t\tMethods(http.MethodGet)\n+\ttraceFunnelsRouter.HandleFunc(\"/{funnel_id}\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.Delete)).\n+\t\tMethods(http.MethodDelete)\n+\ttraceFunnelsRouter.HandleFunc(\"/{funnel_id}\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.UpdateFunnel)).\n+\t\tMethods(http.MethodPut)\n+\ttraceFunnelsRouter.HandleFunc(\"/save\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.Save)).\n+\t\tMethods(http.MethodPost)",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2067079982",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7763,
        "pr_file": "pkg/query-service/app/http_handler.go",
        "discussion_id": "2067079982",
        "commented_code": "@@ -5425,3 +5425,33 @@ func (aH *APIHandler) getDomainInfo(w http.ResponseWriter, r *http.Request) {\n \t}\n \taH.Respond(w, resp)\n }\n+\n+// RegisterTraceFunnelsRoutes adds trace funnels routes\n+func (aH *APIHandler) RegisterTraceFunnelsRoutes(router *mux.Router, am *middleware.AuthZ) {\n+\t// Main trace funnels router\n+\ttraceFunnelsRouter := router.PathPrefix(\"/api/v1/trace-funnels\").Subrouter()\n+\n+\t// API endpoints\n+\ttraceFunnelsRouter.HandleFunc(\"/new\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.New)).\n+\t\tMethods(http.MethodPost)\n+\ttraceFunnelsRouter.HandleFunc(\"/list\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.List)).\n+\t\tMethods(http.MethodGet)\n+\ttraceFunnelsRouter.HandleFunc(\"/steps/update\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.UpdateSteps)).\n+\t\tMethods(http.MethodPut)\n+\n+\ttraceFunnelsRouter.HandleFunc(\"/{funnel_id}\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.Get)).\n+\t\tMethods(http.MethodGet)\n+\ttraceFunnelsRouter.HandleFunc(\"/{funnel_id}\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.Delete)).\n+\t\tMethods(http.MethodDelete)\n+\ttraceFunnelsRouter.HandleFunc(\"/{funnel_id}\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.UpdateFunnel)).\n+\t\tMethods(http.MethodPut)\n+\ttraceFunnelsRouter.HandleFunc(\"/save\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.Save)).\n+\t\tMethods(http.MethodPost)",
        "comment_created_at": "2025-04-29T18:07:53+00:00",
        "comment_author": "grandwizard28",
        "comment_body": "HTTP Rest Convention\r\n\r\n`POST /api/v1/orgs/me/trace-funnels -> HTTP 201 created (module.Create)  | Non-Idempotent`\r\n`GET /api/v1/orgs/me/trace-funnels -> HTTP 200 OK (module.List)  | Idempotent`\r\n`GET /api/v1/orgs/me/trace-funnels/:id -> HTTP 200 OK (module.Get)  | Idempotent`\r\n`PUT /api/v1/orgs/me/trace-funnels/:id -> HTTP 200 OK (then return the updated) / HTTP 204 No Content (no return) (module.Put/module.Update) | Idempotent`\r\n`DELETE /api/v1/orgs/me/trace-funnels/:id -> HTTP 204 No Content | Idempotent` ",
        "pr_file_module": null
      },
      {
        "comment_id": "2103973106",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7763,
        "pr_file": "pkg/query-service/app/http_handler.go",
        "discussion_id": "2067079982",
        "commented_code": "@@ -5425,3 +5425,33 @@ func (aH *APIHandler) getDomainInfo(w http.ResponseWriter, r *http.Request) {\n \t}\n \taH.Respond(w, resp)\n }\n+\n+// RegisterTraceFunnelsRoutes adds trace funnels routes\n+func (aH *APIHandler) RegisterTraceFunnelsRoutes(router *mux.Router, am *middleware.AuthZ) {\n+\t// Main trace funnels router\n+\ttraceFunnelsRouter := router.PathPrefix(\"/api/v1/trace-funnels\").Subrouter()\n+\n+\t// API endpoints\n+\ttraceFunnelsRouter.HandleFunc(\"/new\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.New)).\n+\t\tMethods(http.MethodPost)\n+\ttraceFunnelsRouter.HandleFunc(\"/list\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.List)).\n+\t\tMethods(http.MethodGet)\n+\ttraceFunnelsRouter.HandleFunc(\"/steps/update\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.UpdateSteps)).\n+\t\tMethods(http.MethodPut)\n+\n+\ttraceFunnelsRouter.HandleFunc(\"/{funnel_id}\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.Get)).\n+\t\tMethods(http.MethodGet)\n+\ttraceFunnelsRouter.HandleFunc(\"/{funnel_id}\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.Delete)).\n+\t\tMethods(http.MethodDelete)\n+\ttraceFunnelsRouter.HandleFunc(\"/{funnel_id}\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.UpdateFunnel)).\n+\t\tMethods(http.MethodPut)\n+\ttraceFunnelsRouter.HandleFunc(\"/save\",\n+\t\tam.ViewAccess(aH.Signoz.Handlers.TraceFunnel.Save)).\n+\t\tMethods(http.MethodPost)",
        "comment_created_at": "2025-05-23T07:21:36+00:00",
        "comment_author": "shivanshuraj1333",
        "comment_body": "this will break a lot of things, none of the API follows this today, will do it after the release.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2102461860",
    "pr_number": 7969,
    "pr_file": "pkg/modules/user/impluser/handler.go",
    "created_at": "2025-05-22T12:40:26+00:00",
    "commented_code": "return\n \t}\n \n-\t_, err = h.module.CreateBulkInvite(ctx, claims.OrgID, claims.UserID, &types.PostableBulkInviteRequest{\n+\tinvites, err := h.module.CreateBulkInvite(ctx, claims.OrgID, claims.UserID, &types.PostableBulkInviteRequest{\n \t\tInvites: []types.PostableInvite{req},\n \t})\n \tif err != nil {\n \t\trender.Error(rw, err)\n \t\treturn\n \t}\n \n-\trender.Success(rw, http.StatusCreated, nil)\n-\treturn\n+\trender.Success(rw, http.StatusCreated, &types.GettableCreateInviteResponse{InviteToken: invites[0].Token})",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2102461860",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7969,
        "pr_file": "pkg/modules/user/impluser/handler.go",
        "discussion_id": "2102461860",
        "commented_code": "@@ -92,16 +92,15 @@ func (h *handler) CreateInvite(rw http.ResponseWriter, r *http.Request) {\n \t\treturn\n \t}\n \n-\t_, err = h.module.CreateBulkInvite(ctx, claims.OrgID, claims.UserID, &types.PostableBulkInviteRequest{\n+\tinvites, err := h.module.CreateBulkInvite(ctx, claims.OrgID, claims.UserID, &types.PostableBulkInviteRequest{\n \t\tInvites: []types.PostableInvite{req},\n \t})\n \tif err != nil {\n \t\trender.Error(rw, err)\n \t\treturn\n \t}\n \n-\trender.Success(rw, http.StatusCreated, nil)\n-\treturn\n+\trender.Success(rw, http.StatusCreated, &types.GettableCreateInviteResponse{InviteToken: invites[0].Token})",
        "comment_created_at": "2025-05-22T12:40:26+00:00",
        "comment_author": "grandwizard28",
        "comment_body": "```suggestion\r\n\trender.Success(rw, http.StatusCreated, &types.GettableCreateInviteResponse{InviteToken: invites[0].Token})\r\n```\r\n\r\nSend the entire invite here please. `ID` is mandatory.",
        "pr_file_module": null
      }
    ]
  }
]