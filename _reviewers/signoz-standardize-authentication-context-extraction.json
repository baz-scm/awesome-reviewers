[
  {
    "discussion_id": "2108854092",
    "pr_number": 7763,
    "pr_file": "pkg/modules/tracefunnel/impltracefunnel/handler.go",
    "created_at": "2025-05-27T10:44:35+00:00",
    "commented_code": "+package impltracefunnel\n+\n+import (\n+\t\"encoding/json\"\n+\t\"github.com/SigNoz/signoz/pkg/valuer\"\n+\t\"net/http\"\n+\t\"time\"\n+\n+\t\"github.com/SigNoz/signoz/pkg/errors\"\n+\t\"github.com/SigNoz/signoz/pkg/http/render\"\n+\t\"github.com/SigNoz/signoz/pkg/modules/tracefunnel\"\n+\ttf \"github.com/SigNoz/signoz/pkg/types/tracefunneltypes\"\n+\t\"github.com/gorilla/mux\"\n+)\n+\n+type handler struct {\n+\tmodule tracefunnel.Module\n+}\n+\n+func NewHandler(module tracefunnel.Module) tracefunnel.Handler {\n+\treturn &handler{module: module}\n+}\n+\n+func (handler *handler) New(rw http.ResponseWriter, r *http.Request) {\n+\tvar req tf.PostableFunnel\n+\tif err := json.NewDecoder(r.Body).Decode(&req); err != nil {\n+\t\trender.Error(rw, err)\n+\t\treturn\n+\t}\n+\n+\tclaims, err := tf.GetClaims(r)",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2108854092",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7763,
        "pr_file": "pkg/modules/tracefunnel/impltracefunnel/handler.go",
        "discussion_id": "2108854092",
        "commented_code": "@@ -0,0 +1,297 @@\n+package impltracefunnel\n+\n+import (\n+\t\"encoding/json\"\n+\t\"github.com/SigNoz/signoz/pkg/valuer\"\n+\t\"net/http\"\n+\t\"time\"\n+\n+\t\"github.com/SigNoz/signoz/pkg/errors\"\n+\t\"github.com/SigNoz/signoz/pkg/http/render\"\n+\t\"github.com/SigNoz/signoz/pkg/modules/tracefunnel\"\n+\ttf \"github.com/SigNoz/signoz/pkg/types/tracefunneltypes\"\n+\t\"github.com/gorilla/mux\"\n+)\n+\n+type handler struct {\n+\tmodule tracefunnel.Module\n+}\n+\n+func NewHandler(module tracefunnel.Module) tracefunnel.Handler {\n+\treturn &handler{module: module}\n+}\n+\n+func (handler *handler) New(rw http.ResponseWriter, r *http.Request) {\n+\tvar req tf.PostableFunnel\n+\tif err := json.NewDecoder(r.Body).Decode(&req); err != nil {\n+\t\trender.Error(rw, err)\n+\t\treturn\n+\t}\n+\n+\tclaims, err := tf.GetClaims(r)",
        "comment_created_at": "2025-05-27T10:44:35+00:00",
        "comment_author": "nityanandagohain",
        "comment_body": "use ` authtypes.ClaimsFromContext`",
        "pr_file_module": null
      },
      {
        "comment_id": "2113572928",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7763,
        "pr_file": "pkg/modules/tracefunnel/impltracefunnel/handler.go",
        "discussion_id": "2108854092",
        "commented_code": "@@ -0,0 +1,297 @@\n+package impltracefunnel\n+\n+import (\n+\t\"encoding/json\"\n+\t\"github.com/SigNoz/signoz/pkg/valuer\"\n+\t\"net/http\"\n+\t\"time\"\n+\n+\t\"github.com/SigNoz/signoz/pkg/errors\"\n+\t\"github.com/SigNoz/signoz/pkg/http/render\"\n+\t\"github.com/SigNoz/signoz/pkg/modules/tracefunnel\"\n+\ttf \"github.com/SigNoz/signoz/pkg/types/tracefunneltypes\"\n+\t\"github.com/gorilla/mux\"\n+)\n+\n+type handler struct {\n+\tmodule tracefunnel.Module\n+}\n+\n+func NewHandler(module tracefunnel.Module) tracefunnel.Handler {\n+\treturn &handler{module: module}\n+}\n+\n+func (handler *handler) New(rw http.ResponseWriter, r *http.Request) {\n+\tvar req tf.PostableFunnel\n+\tif err := json.NewDecoder(r.Body).Decode(&req); err != nil {\n+\t\trender.Error(rw, err)\n+\t\treturn\n+\t}\n+\n+\tclaims, err := tf.GetClaims(r)",
        "comment_created_at": "2025-05-29T09:27:50+00:00",
        "comment_author": "shivanshuraj1333",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2070114977",
    "pr_number": 7712,
    "pr_file": "pkg/modules/quickfilter/api.go",
    "created_at": "2025-05-01T10:00:46+00:00",
    "commented_code": "+package quickfilter\n+\n+import (\n+\t\"encoding/json\"\n+\terrorsV2 \"github.com/SigNoz/signoz/pkg/errors\"\n+\t\"github.com/SigNoz/signoz/pkg/http/render\"\n+\t\"github.com/SigNoz/signoz/pkg/types/authtypes\"\n+\t\"github.com/SigNoz/signoz/pkg/types/quickfiltertypes\"\n+\t\"github.com/SigNoz/signoz/pkg/valuer\"\n+\t\"github.com/gorilla/mux\"\n+\t\"net/http\"\n+)\n+\n+type API interface {\n+\tGetQuickFilters(http.ResponseWriter, *http.Request)\n+\tUpdateQuickFilters(http.ResponseWriter, *http.Request)\n+\tGetSignalFilters(http.ResponseWriter, *http.Request)\n+}\n+\n+type quickFiltersAPI struct {\n+\tusecase Usecase\n+}\n+\n+func NewAPI(usecase Usecase) API {\n+\treturn &quickFiltersAPI{usecase: usecase}\n+}\n+\n+func (q *quickFiltersAPI) GetQuickFilters(rw http.ResponseWriter, r *http.Request) {\n+\tclaims, ok := authtypes.ClaimsFromContext(r.Context())\n+\tif ok != nil {\n+\t\trender.Error(rw, errorsV2.Newf(errorsV2.TypeUnauthenticated, errorsV2.CodeUnauthenticated, \"unauthenticated\"))\n+\t\treturn\n+\t}\n+\n+\tfilters, err := q.usecase.GetQuickFilters(r.Context(), valuer.MustNewUUID(claims.OrgID))\n+\tif err != nil {\n+\t\trender.Error(rw, err)\n+\t\treturn\n+\t}\n+\n+\trender.Success(rw, http.StatusOK, filters)\n+}\n+\n+func (q *quickFiltersAPI) UpdateQuickFilters(rw http.ResponseWriter, r *http.Request) {\n+\tclaims, ok := authtypes.ClaimsFromContext(r.Context())\n+\tif ok != nil {\n+\t\trender.Error(rw, errorsV2.Newf(errorsV2.TypeUnauthenticated, errorsV2.CodeUnauthenticated, \"unauthenticated\"))\n+\t\treturn\n+\t}",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2070114977",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7712,
        "pr_file": "pkg/modules/quickfilter/api.go",
        "discussion_id": "2070114977",
        "commented_code": "@@ -0,0 +1,84 @@\n+package quickfilter\n+\n+import (\n+\t\"encoding/json\"\n+\terrorsV2 \"github.com/SigNoz/signoz/pkg/errors\"\n+\t\"github.com/SigNoz/signoz/pkg/http/render\"\n+\t\"github.com/SigNoz/signoz/pkg/types/authtypes\"\n+\t\"github.com/SigNoz/signoz/pkg/types/quickfiltertypes\"\n+\t\"github.com/SigNoz/signoz/pkg/valuer\"\n+\t\"github.com/gorilla/mux\"\n+\t\"net/http\"\n+)\n+\n+type API interface {\n+\tGetQuickFilters(http.ResponseWriter, *http.Request)\n+\tUpdateQuickFilters(http.ResponseWriter, *http.Request)\n+\tGetSignalFilters(http.ResponseWriter, *http.Request)\n+}\n+\n+type quickFiltersAPI struct {\n+\tusecase Usecase\n+}\n+\n+func NewAPI(usecase Usecase) API {\n+\treturn &quickFiltersAPI{usecase: usecase}\n+}\n+\n+func (q *quickFiltersAPI) GetQuickFilters(rw http.ResponseWriter, r *http.Request) {\n+\tclaims, ok := authtypes.ClaimsFromContext(r.Context())\n+\tif ok != nil {\n+\t\trender.Error(rw, errorsV2.Newf(errorsV2.TypeUnauthenticated, errorsV2.CodeUnauthenticated, \"unauthenticated\"))\n+\t\treturn\n+\t}\n+\n+\tfilters, err := q.usecase.GetQuickFilters(r.Context(), valuer.MustNewUUID(claims.OrgID))\n+\tif err != nil {\n+\t\trender.Error(rw, err)\n+\t\treturn\n+\t}\n+\n+\trender.Success(rw, http.StatusOK, filters)\n+}\n+\n+func (q *quickFiltersAPI) UpdateQuickFilters(rw http.ResponseWriter, r *http.Request) {\n+\tclaims, ok := authtypes.ClaimsFromContext(r.Context())\n+\tif ok != nil {\n+\t\trender.Error(rw, errorsV2.Newf(errorsV2.TypeUnauthenticated, errorsV2.CodeUnauthenticated, \"unauthenticated\"))\n+\t\treturn\n+\t}",
        "comment_created_at": "2025-05-01T10:00:46+00:00",
        "comment_author": "grandwizard28",
        "comment_body": "```suggestion\r\n\tclaims, err := authtypes.ClaimsFromContext(r.Context())\r\n\tif err != nil {\r\n\t\trender.Error(rw, err)\r\n\t\treturn\r\n\t}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2070115147",
    "pr_number": 7712,
    "pr_file": "pkg/modules/quickfilter/api.go",
    "created_at": "2025-05-01T10:01:02+00:00",
    "commented_code": "+package quickfilter\n+\n+import (\n+\t\"encoding/json\"\n+\terrorsV2 \"github.com/SigNoz/signoz/pkg/errors\"\n+\t\"github.com/SigNoz/signoz/pkg/http/render\"\n+\t\"github.com/SigNoz/signoz/pkg/types/authtypes\"\n+\t\"github.com/SigNoz/signoz/pkg/types/quickfiltertypes\"\n+\t\"github.com/SigNoz/signoz/pkg/valuer\"\n+\t\"github.com/gorilla/mux\"\n+\t\"net/http\"\n+)\n+\n+type API interface {\n+\tGetQuickFilters(http.ResponseWriter, *http.Request)\n+\tUpdateQuickFilters(http.ResponseWriter, *http.Request)\n+\tGetSignalFilters(http.ResponseWriter, *http.Request)\n+}\n+\n+type quickFiltersAPI struct {\n+\tusecase Usecase\n+}\n+\n+func NewAPI(usecase Usecase) API {\n+\treturn &quickFiltersAPI{usecase: usecase}\n+}\n+\n+func (q *quickFiltersAPI) GetQuickFilters(rw http.ResponseWriter, r *http.Request) {\n+\tclaims, ok := authtypes.ClaimsFromContext(r.Context())\n+\tif ok != nil {\n+\t\trender.Error(rw, errorsV2.Newf(errorsV2.TypeUnauthenticated, errorsV2.CodeUnauthenticated, \"unauthenticated\"))\n+\t\treturn\n+\t}",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2070115147",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7712,
        "pr_file": "pkg/modules/quickfilter/api.go",
        "discussion_id": "2070115147",
        "commented_code": "@@ -0,0 +1,84 @@\n+package quickfilter\n+\n+import (\n+\t\"encoding/json\"\n+\terrorsV2 \"github.com/SigNoz/signoz/pkg/errors\"\n+\t\"github.com/SigNoz/signoz/pkg/http/render\"\n+\t\"github.com/SigNoz/signoz/pkg/types/authtypes\"\n+\t\"github.com/SigNoz/signoz/pkg/types/quickfiltertypes\"\n+\t\"github.com/SigNoz/signoz/pkg/valuer\"\n+\t\"github.com/gorilla/mux\"\n+\t\"net/http\"\n+)\n+\n+type API interface {\n+\tGetQuickFilters(http.ResponseWriter, *http.Request)\n+\tUpdateQuickFilters(http.ResponseWriter, *http.Request)\n+\tGetSignalFilters(http.ResponseWriter, *http.Request)\n+}\n+\n+type quickFiltersAPI struct {\n+\tusecase Usecase\n+}\n+\n+func NewAPI(usecase Usecase) API {\n+\treturn &quickFiltersAPI{usecase: usecase}\n+}\n+\n+func (q *quickFiltersAPI) GetQuickFilters(rw http.ResponseWriter, r *http.Request) {\n+\tclaims, ok := authtypes.ClaimsFromContext(r.Context())\n+\tif ok != nil {\n+\t\trender.Error(rw, errorsV2.Newf(errorsV2.TypeUnauthenticated, errorsV2.CodeUnauthenticated, \"unauthenticated\"))\n+\t\treturn\n+\t}",
        "comment_created_at": "2025-05-01T10:01:02+00:00",
        "comment_author": "grandwizard28",
        "comment_body": "```suggestion\r\n\tclaims, err := authtypes.ClaimsFromContext(r.Context())\r\n\tif err != nil {\r\n\t\trender.Error(rw, err)\r\n\t\treturn\r\n\t}\r\n```",
        "pr_file_module": null
      }
    ]
  }
]