[
  {
    "discussion_id": "2168032583",
    "pr_number": 8352,
    "pr_file": "frontend/src/hooks/queryBuilder/useCreateAlerts.tsx",
    "created_at": "2025-06-26T03:38:21+00:00",
    "commented_code": "widget?.query,\n \t\t\t\t);\n \n-\t\t\t\thistory.push(\n-\t\t\t\t\t`${ROUTES.ALERTS_NEW}?${QueryParams.compositeQuery}=${encodeURIComponent(\n-\t\t\t\t\t\tJSON.stringify(updatedQuery),\n-\t\t\t\t\t)}&${QueryParams.panelTypes}=${widget.panelTypes}&version=${\n-\t\t\t\t\t\tselectedDashboard?.data.version || DEFAULT_ENTITY_VERSION\n-\t\t\t\t\t}`,\n-\t\t\t\t);\n+\t\t\t\tlet url = `${ROUTES.ALERTS_NEW}?${\n+\t\t\t\t\tQueryParams.compositeQuery\n+\t\t\t\t}=${encodeURIComponent(JSON.stringify(updatedQuery))}&${\n+\t\t\t\t\tQueryParams.panelTypes\n+\t\t\t\t}=${widget.panelTypes}&version=${\n+\t\t\t\t\tselectedDashboard?.data.version || DEFAULT_ENTITY_VERSION\n+\t\t\t\t}`;\n+\n+\t\t\t\tif (thresholds?.length) {\n+\t\t\t\t\turl += `&thresholds=${encodeURIComponent(JSON.stringify(thresholds))}`;\n+\t\t\t\t}",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2168032583",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8352,
        "pr_file": "frontend/src/hooks/queryBuilder/useCreateAlerts.tsx",
        "discussion_id": "2168032583",
        "commented_code": "@@ -66,13 +71,19 @@ const useCreateAlerts = (widget?: Widgets, caller?: string): VoidFunction => {\n \t\t\t\t\twidget?.query,\n \t\t\t\t);\n \n-\t\t\t\thistory.push(\n-\t\t\t\t\t`${ROUTES.ALERTS_NEW}?${QueryParams.compositeQuery}=${encodeURIComponent(\n-\t\t\t\t\t\tJSON.stringify(updatedQuery),\n-\t\t\t\t\t)}&${QueryParams.panelTypes}=${widget.panelTypes}&version=${\n-\t\t\t\t\t\tselectedDashboard?.data.version || DEFAULT_ENTITY_VERSION\n-\t\t\t\t\t}`,\n-\t\t\t\t);\n+\t\t\t\tlet url = `${ROUTES.ALERTS_NEW}?${\n+\t\t\t\t\tQueryParams.compositeQuery\n+\t\t\t\t}=${encodeURIComponent(JSON.stringify(updatedQuery))}&${\n+\t\t\t\t\tQueryParams.panelTypes\n+\t\t\t\t}=${widget.panelTypes}&version=${\n+\t\t\t\t\tselectedDashboard?.data.version || DEFAULT_ENTITY_VERSION\n+\t\t\t\t}`;\n+\n+\t\t\t\tif (thresholds?.length) {\n+\t\t\t\t\turl += `&thresholds=${encodeURIComponent(JSON.stringify(thresholds))}`;\n+\t\t\t\t}",
        "comment_created_at": "2025-06-26T03:38:21+00:00",
        "comment_author": "srikanthccv",
        "comment_body": "So you are passing the threshold from the URL, and then on the alert page, pre-filling them. This is not \"testable code\" because testing such code wouldn't be trivial. The other problem is that there is going to state transition from the empty form => form will fill values suddenly, making it a flashy update, which is not a good UX. Pass the complete initial state through the route state.",
        "pr_file_module": null
      },
      {
        "comment_id": "2168649121",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 8352,
        "pr_file": "frontend/src/hooks/queryBuilder/useCreateAlerts.tsx",
        "discussion_id": "2168032583",
        "commented_code": "@@ -66,13 +71,19 @@ const useCreateAlerts = (widget?: Widgets, caller?: string): VoidFunction => {\n \t\t\t\t\twidget?.query,\n \t\t\t\t);\n \n-\t\t\t\thistory.push(\n-\t\t\t\t\t`${ROUTES.ALERTS_NEW}?${QueryParams.compositeQuery}=${encodeURIComponent(\n-\t\t\t\t\t\tJSON.stringify(updatedQuery),\n-\t\t\t\t\t)}&${QueryParams.panelTypes}=${widget.panelTypes}&version=${\n-\t\t\t\t\t\tselectedDashboard?.data.version || DEFAULT_ENTITY_VERSION\n-\t\t\t\t\t}`,\n-\t\t\t\t);\n+\t\t\t\tlet url = `${ROUTES.ALERTS_NEW}?${\n+\t\t\t\t\tQueryParams.compositeQuery\n+\t\t\t\t}=${encodeURIComponent(JSON.stringify(updatedQuery))}&${\n+\t\t\t\t\tQueryParams.panelTypes\n+\t\t\t\t}=${widget.panelTypes}&version=${\n+\t\t\t\t\tselectedDashboard?.data.version || DEFAULT_ENTITY_VERSION\n+\t\t\t\t}`;\n+\n+\t\t\t\tif (thresholds?.length) {\n+\t\t\t\t\turl += `&thresholds=${encodeURIComponent(JSON.stringify(thresholds))}`;\n+\t\t\t\t}",
        "comment_created_at": "2025-06-26T09:39:22+00:00",
        "comment_author": "amlannandy",
        "comment_body": "Regarding the URL, I'll move it to the route state.\r\nFor the flashy update issue, now I'm setting the result from the hook directly in the initial state, so that shouldn't be an issue. Once the loading state transitions to the form, it will be pre-filled from 1st render itself.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2121194698",
    "pr_number": 7903,
    "pr_file": "frontend/src/providers/preferences/context/PreferenceContextProvider.tsx",
    "created_at": "2025-06-02T13:41:25+00:00",
    "commented_code": "+import { PreferenceContextValue } from 'providers/preferences/types';\n+import React, { createContext, useContext, useMemo } from 'react';\n+import { useLocation } from 'react-router-dom';\n+import { DataSource } from 'types/common/queryBuilder';\n+\n+import { usePreferenceSync } from '../sync/usePreferenceSync';\n+\n+// This will help in identifying the mode of the preference context\n+// savedView - when the preference is loaded from a saved view\n+// direct - when the preference is loaded from a direct query\n+\n+export type PreferenceMode = 'savedView' | 'direct';\n+\n+const PreferenceContext = createContext<PreferenceContextValue | undefined>(\n+\tundefined,\n+);\n+\n+export function PreferenceContextProvider({\n+\tchildren,\n+}: {\n+\tchildren: React.ReactNode;\n+}): JSX.Element {\n+\tconst location = useLocation();\n+\tconst params = new URLSearchParams(location.search);",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2121194698",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7903,
        "pr_file": "frontend/src/providers/preferences/context/PreferenceContextProvider.tsx",
        "discussion_id": "2121194698",
        "commented_code": "@@ -0,0 +1,86 @@\n+import { PreferenceContextValue } from 'providers/preferences/types';\n+import React, { createContext, useContext, useMemo } from 'react';\n+import { useLocation } from 'react-router-dom';\n+import { DataSource } from 'types/common/queryBuilder';\n+\n+import { usePreferenceSync } from '../sync/usePreferenceSync';\n+\n+// This will help in identifying the mode of the preference context\n+// savedView - when the preference is loaded from a saved view\n+// direct - when the preference is loaded from a direct query\n+\n+export type PreferenceMode = 'savedView' | 'direct';\n+\n+const PreferenceContext = createContext<PreferenceContextValue | undefined>(\n+\tundefined,\n+);\n+\n+export function PreferenceContextProvider({\n+\tchildren,\n+}: {\n+\tchildren: React.ReactNode;\n+}): JSX.Element {\n+\tconst location = useLocation();\n+\tconst params = new URLSearchParams(location.search);",
        "comment_created_at": "2025-06-02T13:41:25+00:00",
        "comment_author": "aks07",
        "comment_body": "Try using existing hook for this. useUrlQuery.\nAlso define QueryParams as constants (viewKey)",
        "pr_file_module": null
      },
      {
        "comment_id": "2122784717",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7903,
        "pr_file": "frontend/src/providers/preferences/context/PreferenceContextProvider.tsx",
        "discussion_id": "2121194698",
        "commented_code": "@@ -0,0 +1,86 @@\n+import { PreferenceContextValue } from 'providers/preferences/types';\n+import React, { createContext, useContext, useMemo } from 'react';\n+import { useLocation } from 'react-router-dom';\n+import { DataSource } from 'types/common/queryBuilder';\n+\n+import { usePreferenceSync } from '../sync/usePreferenceSync';\n+\n+// This will help in identifying the mode of the preference context\n+// savedView - when the preference is loaded from a saved view\n+// direct - when the preference is loaded from a direct query\n+\n+export type PreferenceMode = 'savedView' | 'direct';\n+\n+const PreferenceContext = createContext<PreferenceContextValue | undefined>(\n+\tundefined,\n+);\n+\n+export function PreferenceContextProvider({\n+\tchildren,\n+}: {\n+\tchildren: React.ReactNode;\n+}): JSX.Element {\n+\tconst location = useLocation();\n+\tconst params = new URLSearchParams(location.search);",
        "comment_created_at": "2025-06-03T05:54:12+00:00",
        "comment_author": "sawhil",
        "comment_body": "Will do",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2033514719",
    "pr_number": 7546,
    "pr_file": "frontend/src/container/TraceWaterfall/TraceWaterfallStates/Success/Success.tsx",
    "created_at": "2025-04-08T15:52:33+00:00",
    "commented_code": "const leftOffset = ((span.timestamp - traceMetadata.startTime) * 1e2) / spread;\n \tconst width = (span.durationNano * 1e2) / (spread * 1e6);\n \n+\tconst { search } = useLocation();\n+\tconst history = useHistory();\n+\tconst searchParams = new URLSearchParams(search);\n+\n \tlet color = generateColor(span.serviceName, themeColors.traceDetailColors);\n \n \tif (span.hasError) {\n \t\tcolor = `var(--bg-cherry-500)`;\n \t}\n \n+\tconst [hasActionButtons, setHasActionButtons] = useState(false);\n+\n+\tconst handleMouseEnter = (): void => {\n+\t\tsetHasActionButtons(true);\n+\t};\n+\n+\tconst handleMouseLeave = (): void => {\n+\t\tsetHasActionButtons(false);\n+\t};\n+\n \treturn (\n \t\t<div\n \t\t\tclassName={cx(\n \t\t\t\t'span-duration',\n \t\t\t\tselectedSpan?.spanId === span.spanId ? 'interested-span' : '',\n \t\t\t)}\n+\t\t\tonMouseEnter={handleMouseEnter}\n+\t\t\tonMouseLeave={handleMouseLeave}\n \t\t\tonClick={(): void => {\n \t\t\t\tsetSelectedSpan(span);\n+\t\t\t\tsearchParams.set('spanId', span.spanId);\n+\t\t\t\thistory.replace({ search: searchParams.toString() });",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2033514719",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7546,
        "pr_file": "frontend/src/container/TraceWaterfall/TraceWaterfallStates/Success/Success.tsx",
        "discussion_id": "2033514719",
        "commented_code": "@@ -166,20 +169,38 @@ function SpanDuration({\n \tconst leftOffset = ((span.timestamp - traceMetadata.startTime) * 1e2) / spread;\n \tconst width = (span.durationNano * 1e2) / (spread * 1e6);\n \n+\tconst { search } = useLocation();\n+\tconst history = useHistory();\n+\tconst searchParams = new URLSearchParams(search);\n+\n \tlet color = generateColor(span.serviceName, themeColors.traceDetailColors);\n \n \tif (span.hasError) {\n \t\tcolor = `var(--bg-cherry-500)`;\n \t}\n \n+\tconst [hasActionButtons, setHasActionButtons] = useState(false);\n+\n+\tconst handleMouseEnter = (): void => {\n+\t\tsetHasActionButtons(true);\n+\t};\n+\n+\tconst handleMouseLeave = (): void => {\n+\t\tsetHasActionButtons(false);\n+\t};\n+\n \treturn (\n \t\t<div\n \t\t\tclassName={cx(\n \t\t\t\t'span-duration',\n \t\t\t\tselectedSpan?.spanId === span.spanId ? 'interested-span' : '',\n \t\t\t)}\n+\t\t\tonMouseEnter={handleMouseEnter}\n+\t\t\tonMouseLeave={handleMouseLeave}\n \t\t\tonClick={(): void => {\n \t\t\t\tsetSelectedSpan(span);\n+\t\t\t\tsearchParams.set('spanId', span.spanId);\n+\t\t\t\thistory.replace({ search: searchParams.toString() });",
        "comment_created_at": "2025-04-08T15:52:33+00:00",
        "comment_author": "ahmadshaheer",
        "comment_body": "can you use safeNavigate here? as with history.replace, the browser back navigation won't properly work (i.e. with safeNavigate, we can go back in history to set the previous span as active).",
        "pr_file_module": null
      },
      {
        "comment_id": "2041201437",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7546,
        "pr_file": "frontend/src/container/TraceWaterfall/TraceWaterfallStates/Success/Success.tsx",
        "discussion_id": "2033514719",
        "commented_code": "@@ -166,20 +169,38 @@ function SpanDuration({\n \tconst leftOffset = ((span.timestamp - traceMetadata.startTime) * 1e2) / spread;\n \tconst width = (span.durationNano * 1e2) / (spread * 1e6);\n \n+\tconst { search } = useLocation();\n+\tconst history = useHistory();\n+\tconst searchParams = new URLSearchParams(search);\n+\n \tlet color = generateColor(span.serviceName, themeColors.traceDetailColors);\n \n \tif (span.hasError) {\n \t\tcolor = `var(--bg-cherry-500)`;\n \t}\n \n+\tconst [hasActionButtons, setHasActionButtons] = useState(false);\n+\n+\tconst handleMouseEnter = (): void => {\n+\t\tsetHasActionButtons(true);\n+\t};\n+\n+\tconst handleMouseLeave = (): void => {\n+\t\tsetHasActionButtons(false);\n+\t};\n+\n \treturn (\n \t\t<div\n \t\t\tclassName={cx(\n \t\t\t\t'span-duration',\n \t\t\t\tselectedSpan?.spanId === span.spanId ? 'interested-span' : '',\n \t\t\t)}\n+\t\t\tonMouseEnter={handleMouseEnter}\n+\t\t\tonMouseLeave={handleMouseLeave}\n \t\t\tonClick={(): void => {\n \t\t\t\tsetSelectedSpan(span);\n+\t\t\t\tsearchParams.set('spanId', span.spanId);\n+\t\t\t\thistory.replace({ search: searchParams.toString() });",
        "comment_created_at": "2025-04-13T20:13:09+00:00",
        "comment_author": "sawhil",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2033541051",
    "pr_number": 7546,
    "pr_file": "frontend/src/container/TraceWaterfall/TraceWaterfallStates/Success/Success.tsx",
    "created_at": "2025-04-08T16:05:25+00:00",
    "commented_code": "const leftOffset = ((span.timestamp - traceMetadata.startTime) * 1e2) / spread;\n \tconst width = (span.durationNano * 1e2) / (spread * 1e6);\n \n+\tconst { search } = useLocation();\n+\tconst history = useHistory();\n+\tconst searchParams = new URLSearchParams(search);",
    "repo_full_name": "SigNoz/signoz",
    "discussion_comments": [
      {
        "comment_id": "2033541051",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7546,
        "pr_file": "frontend/src/container/TraceWaterfall/TraceWaterfallStates/Success/Success.tsx",
        "discussion_id": "2033541051",
        "commented_code": "@@ -166,20 +169,38 @@ function SpanDuration({\n \tconst leftOffset = ((span.timestamp - traceMetadata.startTime) * 1e2) / spread;\n \tconst width = (span.durationNano * 1e2) / (spread * 1e6);\n \n+\tconst { search } = useLocation();\n+\tconst history = useHistory();\n+\tconst searchParams = new URLSearchParams(search);",
        "comment_created_at": "2025-04-08T16:05:25+00:00",
        "comment_author": "ahmadshaheer",
        "comment_body": "nit: can we use `useUrlQuery` here similar to https://github.com/SigNoz/signoz/blob/328a6b929eb2c8181da260269c33bcedd54427ce/frontend/src/hooks/trace/useCopySpanLink.ts#L11-L12?",
        "pr_file_module": null
      },
      {
        "comment_id": "2041201485",
        "repo_full_name": "SigNoz/signoz",
        "pr_number": 7546,
        "pr_file": "frontend/src/container/TraceWaterfall/TraceWaterfallStates/Success/Success.tsx",
        "discussion_id": "2033541051",
        "commented_code": "@@ -166,20 +169,38 @@ function SpanDuration({\n \tconst leftOffset = ((span.timestamp - traceMetadata.startTime) * 1e2) / spread;\n \tconst width = (span.durationNano * 1e2) / (spread * 1e6);\n \n+\tconst { search } = useLocation();\n+\tconst history = useHistory();\n+\tconst searchParams = new URLSearchParams(search);",
        "comment_created_at": "2025-04-13T20:13:16+00:00",
        "comment_author": "sawhil",
        "comment_body": "done ",
        "pr_file_module": null
      }
    ]
  }
]