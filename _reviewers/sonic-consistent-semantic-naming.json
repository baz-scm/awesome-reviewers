[
  {
    "discussion_id": "1241050552",
    "pr_number": 455,
    "pr_file": "native/goIntSlice.c",
    "created_at": "2023-06-25T06:23:36+00:00",
    "commented_code": "+#include <stdio.h>\n+#include <malloc.h>\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stddef.h>\n+#include <string.h>\n+\n+#include \"native.h\"\n+#include \"types.h\"\n+\n+#define ERR_INVAL       2\n+#define ERR_RECURSE_MAX 7\n+\n+typedef struct {\n+    union {                    // the pointer of u64 or i64 array \n+        int64_t*  iptr;\n+        uint64_t* uptr; \n+    };\n+    size_t len;                // the length of slice\n+    size_t cap;               // the capacity of slice \n+} GoIntSlice;\n+\n+\n+\n+bool isSpace(char a){\n+    if( a == ' '){\n+        return true;\n+    }else{\n+        return false;\n+    }\n+}\n+\n+bool isIntger(char a){\n+\tif(a<'0' ||a>'9'){\n+\t\treturn false;\n+\t}else{\n+\t\treturn true;\n+\t}\n+}\n+\n+int charToNum(char c){",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "1241050552",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 455,
        "pr_file": "native/goIntSlice.c",
        "discussion_id": "1241050552",
        "commented_code": "@@ -0,0 +1,190 @@\n+#include <stdio.h>\n+#include <malloc.h>\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stddef.h>\n+#include <string.h>\n+\n+#include \"native.h\"\n+#include \"types.h\"\n+\n+#define ERR_INVAL       2\n+#define ERR_RECURSE_MAX 7\n+\n+typedef struct {\n+    union {                    // the pointer of u64 or i64 array \n+        int64_t*  iptr;\n+        uint64_t* uptr; \n+    };\n+    size_t len;                // the length of slice\n+    size_t cap;               // the capacity of slice \n+} GoIntSlice;\n+\n+\n+\n+bool isSpace(char a){\n+    if( a == ' '){\n+        return true;\n+    }else{\n+        return false;\n+    }\n+}\n+\n+bool isIntger(char a){\n+\tif(a<'0' ||a>'9'){\n+\t\treturn false;\n+\t}else{\n+\t\treturn true;\n+\t}\n+}\n+\n+int charToNum(char c){",
        "comment_created_at": "2023-06-25T06:23:36+00:00",
        "comment_author": "liuq19",
        "comment_body": "\u51fd\u6570\u547d\u540d\u98ce\u683c\u9700\u8981\u7edf\u4e00\uff0c\u8fd9\u91cc\u7edf\u4e00\u7528\u4e0b\u5212\u7ebf\u98ce\u683c\uff0c\u5305\u62ec\u5176\u4ed6\u51fd\u6570",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1243072791",
    "pr_number": 455,
    "pr_file": "native/goIntSlice.c",
    "created_at": "2023-06-27T02:39:41+00:00",
    "commented_code": "+#include <stdio.h>\n+#include <malloc.h>\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stddef.h>\n+#include <string.h>\n+\n+#include \"native.h\"\n+#include \"types.h\"\n+\n+#define ERR_INVAL       2\n+#define ERR_RECURSE_MAX 7\n+\n+typedef struct {\n+    union {                    // the pointer of u64 or i64 array \n+        int64_t*  iptr;\n+        uint64_t* uptr; \n+    };\n+    size_t len;                // the length of slice\n+    size_t cap;                // the capacity of slice \n+} GoIntSlice;\n+\n+\n+\n+bool isSpace(char a){\n+    if( a == ' '||a == '\\t'||a == '\\r'||a == '\n'){\n+        return true;\n+    }else{\n+        return false;\n+    }\n+}\n+\n+bool isInteger(char a){\n+    if(a<'0' ||a>'9'){\n+\treturn false;\n+    }else{\n+\treturn true;\n+    }\n+}\n+\n+int char_to_num(char c){\n+    return c-'0';\n+}\n+\n+\n+long decode_u64_array( const GoString* src, long* p, GoIntSlice* arr){  \n+    char* pos = src->buf;\n+    int i =0;\n+    \n+    while(isSpace(pos[i])){                                          //If there is a space before the beginning, eat the space first",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "1243072791",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 455,
        "pr_file": "native/goIntSlice.c",
        "discussion_id": "1243072791",
        "commented_code": "@@ -0,0 +1,210 @@\n+#include <stdio.h>\n+#include <malloc.h>\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stddef.h>\n+#include <string.h>\n+\n+#include \"native.h\"\n+#include \"types.h\"\n+\n+#define ERR_INVAL       2\n+#define ERR_RECURSE_MAX 7\n+\n+typedef struct {\n+    union {                    // the pointer of u64 or i64 array \n+        int64_t*  iptr;\n+        uint64_t* uptr; \n+    };\n+    size_t len;                // the length of slice\n+    size_t cap;                // the capacity of slice \n+} GoIntSlice;\n+\n+\n+\n+bool isSpace(char a){\n+    if( a == ' '||a == '\\t'||a == '\\r'||a == '\\n'){\n+        return true;\n+    }else{\n+        return false;\n+    }\n+}\n+\n+bool isInteger(char a){\n+    if(a<'0' ||a>'9'){\n+\treturn false;\n+    }else{\n+\treturn true;\n+    }\n+}\n+\n+int char_to_num(char c){\n+    return c-'0';\n+}\n+\n+\n+long decode_u64_array( const GoString* src, long* p, GoIntSlice* arr){  \n+    char* pos = src->buf;\n+    int i =0;\n+    \n+    while(isSpace(pos[i])){                                          //If there is a space before the beginning, eat the space first ",
        "comment_created_at": "2023-06-27T02:39:41+00:00",
        "comment_author": "liuq19",
        "comment_body": "1. \u8fd9\u91cc\u7684isspace\u51fd\u6570\u547d\u540d\u4e5f\u9700\u8981\u7edf\u4e00\u89c4\u8303\r\n2. \u8fd8\u6709\u65c1\u8fb9\u6bd4\u8f83\u957f\u7684\u6ce8\u91ca\uff0c\u53ef\u4ee5\u5355\u72ec\u5360\u4e00\u884c\u653e\u5728\u4ee3\u7801\u4e0a\u65b9\r\n\r\n\u4ee5\u4e0a\u8fd9\u4e24\u70b9\u8bf7\u5168\u5c40\u68c0\u67e5",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1234740689",
    "pr_number": 459,
    "pr_file": "native/sort.c",
    "created_at": "2023-06-20T05:07:07+00:00",
    "commented_code": "+#include <stdio.h>\n+\n+#include \"native.h\"\n+\n+typedef struct MapPair{\n+    GoString  key;\n+    void*     value;\n+} MapPair;\n+\n+// swap elems in MapPair\n+void swap(MapPair* lhs, MapPair* rhs) {\n+    MapPair temp;\n+    temp = *lhs;\n+    *lhs = *rhs;\n+    *rhs = temp;\n+}\n+\n+int _strcmp(const char *p,const char *q){\n+    while(*p && *q && *p == *q) {\n+        p++, q++;\n+    }\n+\n+    return *p - *q;\n+}\n+\n+bool compare(MapPair lhs, MapPair rhs) {",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "1234740689",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 459,
        "pr_file": "native/sort.c",
        "discussion_id": "1234740689",
        "commented_code": "@@ -0,0 +1,74 @@\n+#include <stdio.h>\n+\n+#include \"native.h\"\n+\n+typedef struct MapPair{\n+    GoString  key;\n+    void*     value;\n+} MapPair;\n+\n+// swap elems in MapPair\n+void swap(MapPair* lhs, MapPair* rhs) {\n+    MapPair temp;\n+    temp = *lhs;\n+    *lhs = *rhs;\n+    *rhs = temp;\n+}\n+\n+int _strcmp(const char *p,const char *q){\n+    while(*p && *q && *p == *q) {\n+        p++, q++;\n+    }\n+\n+    return *p - *q;\n+}\n+\n+bool compare(MapPair lhs, MapPair rhs) {",
        "comment_created_at": "2023-06-20T05:07:07+00:00",
        "comment_author": "liuq19",
        "comment_body": "\"compare\" name is confuse, maybe \"less(lhs, rhs)\" is more concrete",
        "pr_file_module": null
      },
      {
        "comment_id": "1234741324",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 459,
        "pr_file": "native/sort.c",
        "discussion_id": "1234740689",
        "commented_code": "@@ -0,0 +1,74 @@\n+#include <stdio.h>\n+\n+#include \"native.h\"\n+\n+typedef struct MapPair{\n+    GoString  key;\n+    void*     value;\n+} MapPair;\n+\n+// swap elems in MapPair\n+void swap(MapPair* lhs, MapPair* rhs) {\n+    MapPair temp;\n+    temp = *lhs;\n+    *lhs = *rhs;\n+    *rhs = temp;\n+}\n+\n+int _strcmp(const char *p,const char *q){\n+    while(*p && *q && *p == *q) {\n+        p++, q++;\n+    }\n+\n+    return *p - *q;\n+}\n+\n+bool compare(MapPair lhs, MapPair rhs) {",
        "comment_created_at": "2023-06-20T05:08:12+00:00",
        "comment_author": "liuq19",
        "comment_body": "Also, this function is short, and we can add \"inline\" to optimize the function call.",
        "pr_file_module": null
      },
      {
        "comment_id": "1235342328",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 459,
        "pr_file": "native/sort.c",
        "discussion_id": "1234740689",
        "commented_code": "@@ -0,0 +1,74 @@\n+#include <stdio.h>\n+\n+#include \"native.h\"\n+\n+typedef struct MapPair{\n+    GoString  key;\n+    void*     value;\n+} MapPair;\n+\n+// swap elems in MapPair\n+void swap(MapPair* lhs, MapPair* rhs) {\n+    MapPair temp;\n+    temp = *lhs;\n+    *lhs = *rhs;\n+    *rhs = temp;\n+}\n+\n+int _strcmp(const char *p,const char *q){\n+    while(*p && *q && *p == *q) {\n+        p++, q++;\n+    }\n+\n+    return *p - *q;\n+}\n+\n+bool compare(MapPair lhs, MapPair rhs) {",
        "comment_created_at": "2023-06-20T14:18:22+00:00",
        "comment_author": "Skyseaee",
        "comment_body": "Thanks, I will make the necessary modifications as suggested.",
        "pr_file_module": null
      },
      {
        "comment_id": "1236282498",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 459,
        "pr_file": "native/sort.c",
        "discussion_id": "1234740689",
        "commented_code": "@@ -0,0 +1,74 @@\n+#include <stdio.h>\n+\n+#include \"native.h\"\n+\n+typedef struct MapPair{\n+    GoString  key;\n+    void*     value;\n+} MapPair;\n+\n+// swap elems in MapPair\n+void swap(MapPair* lhs, MapPair* rhs) {\n+    MapPair temp;\n+    temp = *lhs;\n+    *lhs = *rhs;\n+    *rhs = temp;\n+}\n+\n+int _strcmp(const char *p,const char *q){\n+    while(*p && *q && *p == *q) {\n+        p++, q++;\n+    }\n+\n+    return *p - *q;\n+}\n+\n+bool compare(MapPair lhs, MapPair rhs) {",
        "comment_created_at": "2023-06-21T05:01:38+00:00",
        "comment_author": "liuq19",
        "comment_body": "thanks~",
        "pr_file_module": null
      }
    ]
  }
]