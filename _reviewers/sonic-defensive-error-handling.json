[
  {
    "discussion_id": "2122634142",
    "pr_number": 802,
    "pr_file": "internal/decoder/api/stream.go",
    "created_at": "2025-06-03T04:35:42+00:00",
    "commented_code": "if y := native.SkipOneFast(&src, &x); y < 0 {\n             if self.readMore()  {\n                 goto try_skip\n-            } else {\n-                err = SyntaxError{e, self.s, types.ParsingError(-s), \"\"}\n-                self.setErr(err)\n-                return\n+            }                \n+            if self.err == nil {",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "2122634142",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 802,
        "pr_file": "internal/decoder/api/stream.go",
        "discussion_id": "2122634142",
        "commented_code": "@@ -76,11 +76,12 @@ func (self *StreamDecoder) Decode(val interface{}) (err error) {\n         if y := native.SkipOneFast(&src, &x); y < 0 {\n             if self.readMore()  {\n                 goto try_skip\n-            } else {\n-                err = SyntaxError{e, self.s, types.ParsingError(-s), \"\"}\n-                self.setErr(err)\n-                return\n+            }                \n+            if self.err == nil {",
        "comment_created_at": "2025-06-03T04:35:42+00:00",
        "comment_author": "xiaost",
        "comment_body": "```\r\nif self.err == nil {\r\n    self.setErr(SyntaxError{e, self.s, types.ParsingError(-s), \"\"})\r\n}\r\nreturn self.err\r\n```\r\n\r\nno need to call `setErr` again if `self.err != nil `",
        "pr_file_module": null
      },
      {
        "comment_id": "2122677134",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 802,
        "pr_file": "internal/decoder/api/stream.go",
        "discussion_id": "2122634142",
        "commented_code": "@@ -76,11 +76,12 @@ func (self *StreamDecoder) Decode(val interface{}) (err error) {\n         if y := native.SkipOneFast(&src, &x); y < 0 {\n             if self.readMore()  {\n                 goto try_skip\n-            } else {\n-                err = SyntaxError{e, self.s, types.ParsingError(-s), \"\"}\n-                self.setErr(err)\n-                return\n+            }                \n+            if self.err == nil {",
        "comment_created_at": "2025-06-03T04:59:44+00:00",
        "comment_author": "AsterDY",
        "comment_body": "ok, fix",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1689914092",
    "pr_number": 661,
    "pr_file": "ast/encode.go",
    "created_at": "2024-07-24T14:21:02+00:00",
    "commented_code": "}\n \n func (self *Node) encodeRaw(buf *[]byte) error {\n-    raw, err := self.Raw()\n-    if err != nil {\n-        return err\n+    lock := self.rlock()\n+    if !self.isRaw() {\n+        self.runlock()\n+        return self.encode(buf)\n+    }\n+    raw := self.toString()\n+    if lock {",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "1689914092",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 661,
        "pr_file": "ast/encode.go",
        "discussion_id": "1689914092",
        "commented_code": "@@ -145,9 +145,14 @@ func (self *Node) encode(buf *[]byte) error {\n }\n \n func (self *Node) encodeRaw(buf *[]byte) error {\n-    raw, err := self.Raw()\n-    if err != nil {\n-        return err\n+    lock := self.rlock()\n+    if !self.isRaw() {\n+        self.runlock()\n+        return self.encode(buf)\n+    }\n+    raw := self.toString()\n+    if lock {",
        "comment_created_at": "2024-07-24T14:21:02+00:00",
        "comment_author": "liuq19",
        "comment_body": "\u8fd9\u4e00\u884c\u5e94\u8be5\u662f\u4e0d\u9700\u8981\u5224\u65ad\u7684\uff0crunlock \u91cc\u9762\u6709\u5224\u65ad\u4e86",
        "pr_file_module": null
      },
      {
        "comment_id": "1691696026",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 661,
        "pr_file": "ast/encode.go",
        "discussion_id": "1689914092",
        "commented_code": "@@ -145,9 +145,14 @@ func (self *Node) encode(buf *[]byte) error {\n }\n \n func (self *Node) encodeRaw(buf *[]byte) error {\n-    raw, err := self.Raw()\n-    if err != nil {\n-        return err\n+    lock := self.rlock()\n+    if !self.isRaw() {\n+        self.runlock()\n+        return self.encode(buf)\n+    }\n+    raw := self.toString()\n+    if lock {",
        "comment_created_at": "2024-07-25T15:44:20+00:00",
        "comment_author": "AsterDY",
        "comment_body": "\u7406\u8bba\u4e0a\u662f\u4e0d\u9700\u8981\u68c0\u67e5\u4e86\u3002\u4f46\u662f\u9632\u5fa1\u6027\u7f16\u7a0b\u8fd8\u662f\u52a0\u4e0a\u5427\u3002\u907f\u514d\u540e\u9762\u6539\u9519",
        "pr_file_module": null
      }
    ]
  }
]