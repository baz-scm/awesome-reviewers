[
  {
    "discussion_id": "1968778714",
    "pr_number": 751,
    "pr_file": "internal/decoder/optdec/slice.go",
    "created_at": "2025-02-25T03:19:06+00:00",
    "commented_code": "return nil\n \t}\n \n-\treturn node.AsSliceEface(ctx, vp)\n+\t/* if slice is empty, just call `AsSliceEface` */\n+\tif ((*rt.GoSlice)(vp)).Len == 0 {\n+\t\treturn node.AsSliceEface(ctx, vp)\n+\t}",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "1968778714",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 751,
        "pr_file": "internal/decoder/optdec/slice.go",
        "discussion_id": "1968778714",
        "commented_code": "@@ -95,7 +95,18 @@ func (d *sliceEfaceDecoder) FromDom(vp unsafe.Pointer, node Node, ctx *context)\n \t\treturn nil\n \t}\n \n-\treturn node.AsSliceEface(ctx, vp)\n+\t/* if slice is empty, just call `AsSliceEface` */\n+\tif ((*rt.GoSlice)(vp)).Len == 0 {\n+\t\treturn node.AsSliceEface(ctx, vp)\n+\t}",
        "comment_created_at": "2025-02-25T03:19:06+00:00",
        "comment_author": "gbjk",
        "comment_body": "I don't have a use-case for this, but doesn't this imply that we'll still be losing the slice type?\r\nI'm thinking that a second unmarshal would see `*[]interface{}` and that could be a problem.\r\nThat is: We didn't update the original `*[]string` the first time, because there was nothing to put there, but we did lose our reference to it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1968786210",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 751,
        "pr_file": "internal/decoder/optdec/slice.go",
        "discussion_id": "1968778714",
        "commented_code": "@@ -95,7 +95,18 @@ func (d *sliceEfaceDecoder) FromDom(vp unsafe.Pointer, node Node, ctx *context)\n \t\treturn nil\n \t}\n \n-\treturn node.AsSliceEface(ctx, vp)\n+\t/* if slice is empty, just call `AsSliceEface` */\n+\tif ((*rt.GoSlice)(vp)).Len == 0 {\n+\t\treturn node.AsSliceEface(ctx, vp)\n+\t}",
        "comment_created_at": "2025-02-25T03:30:33+00:00",
        "comment_author": "liuq19",
        "comment_body": "encoding/json RFC here.\r\n```\r\nTo unmarshal a JSON array into a slice, Unmarshal resets the slice length to zero and then appends each element to the slice. As a special case, to unmarshal an empty JSON array into a slice, Unmarshal replaces the slice with a new empty slice.\r\n```\r\n\r\nwhen `vp` is empty, we do not need to be aware of the element type... ",
        "pr_file_module": null
      },
      {
        "comment_id": "1968788589",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 751,
        "pr_file": "internal/decoder/optdec/slice.go",
        "discussion_id": "1968778714",
        "commented_code": "@@ -95,7 +95,18 @@ func (d *sliceEfaceDecoder) FromDom(vp unsafe.Pointer, node Node, ctx *context)\n \t\treturn nil\n \t}\n \n-\treturn node.AsSliceEface(ctx, vp)\n+\t/* if slice is empty, just call `AsSliceEface` */\n+\tif ((*rt.GoSlice)(vp)).Len == 0 {\n+\t\treturn node.AsSliceEface(ctx, vp)\n+\t}",
        "comment_created_at": "2025-02-25T03:33:19+00:00",
        "comment_author": "gbjk",
        "comment_body": "Purfect. Works as expected then \ud83c\udf89 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1197585772",
    "pr_number": 409,
    "pr_file": "decoder/assembler_amd64_go116.go",
    "created_at": "2023-05-18T09:06:56+00:00",
    "commented_code": "self.Emit(\"MOVQ\" , _AX, jit.Ptr(_VP, 8))        // MOVQ    AX, 8(VP)\n }\n \n+func (self *_Assembler) _asm_OP_check_empty(p *_Instr) {\n+    rbrace := p.vb()\n+    if rbrace == ']' {\n+        self.check_eof(1)\n+        self.Emit(\"LEAQ\", jit.Ptr(_IC, 1), _AX)                            // LEAQ    1(IC), AX\n+        self.Emit(\"CMPB\", jit.Sib(_IP, _IC, 1, 0), jit.Imm(int64(rbrace))) // CMPB    (IP)(IC), ']'\n+        self.Sjmp(\"JNE\", \"_not_empty_array{n}\")                            // JNE     _not_empty_array{n}\n+        self.Emit(\"MOVQ\", _AX, _IC)                                        // MOVQ    AX, IC\n+        self.Emit(\"MOVQ\", jit.Imm(_Zero_Base), jit.Ptr(_VP, 0))            // MOVQ    $zerobase, (VP)",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "1197585772",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 409,
        "pr_file": "decoder/assembler_amd64_go116.go",
        "discussion_id": "1197585772",
        "commented_code": "@@ -1642,6 +1646,23 @@ func (self *_Assembler) _asm_OP_slice_init(p *_Instr) {\n     self.Emit(\"MOVQ\" , _AX, jit.Ptr(_VP, 8))        // MOVQ    AX, 8(VP)\n }\n \n+func (self *_Assembler) _asm_OP_check_empty(p *_Instr) {\n+    rbrace := p.vb()\n+    if rbrace == ']' {\n+        self.check_eof(1)\n+        self.Emit(\"LEAQ\", jit.Ptr(_IC, 1), _AX)                            // LEAQ    1(IC), AX\n+        self.Emit(\"CMPB\", jit.Sib(_IP, _IC, 1, 0), jit.Imm(int64(rbrace))) // CMPB    (IP)(IC), ']'\n+        self.Sjmp(\"JNE\", \"_not_empty_array{n}\")                            // JNE     _not_empty_array{n}\n+        self.Emit(\"MOVQ\", _AX, _IC)                                        // MOVQ    AX, IC\n+        self.Emit(\"MOVQ\", jit.Imm(_Zero_Base), jit.Ptr(_VP, 0))            // MOVQ    $zerobase, (VP)",
        "comment_created_at": "2023-05-18T09:06:56+00:00",
        "comment_author": "AsterDY",
        "comment_body": "\u4e3a\u5565\u4e0d\u76f4\u63a5\u7528nil\u6307\u9488\uff1f",
        "pr_file_module": null
      },
      {
        "comment_id": "1197587705",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 409,
        "pr_file": "decoder/assembler_amd64_go116.go",
        "discussion_id": "1197585772",
        "commented_code": "@@ -1642,6 +1646,23 @@ func (self *_Assembler) _asm_OP_slice_init(p *_Instr) {\n     self.Emit(\"MOVQ\" , _AX, jit.Ptr(_VP, 8))        // MOVQ    AX, 8(VP)\n }\n \n+func (self *_Assembler) _asm_OP_check_empty(p *_Instr) {\n+    rbrace := p.vb()\n+    if rbrace == ']' {\n+        self.check_eof(1)\n+        self.Emit(\"LEAQ\", jit.Ptr(_IC, 1), _AX)                            // LEAQ    1(IC), AX\n+        self.Emit(\"CMPB\", jit.Sib(_IP, _IC, 1, 0), jit.Imm(int64(rbrace))) // CMPB    (IP)(IC), ']'\n+        self.Sjmp(\"JNE\", \"_not_empty_array{n}\")                            // JNE     _not_empty_array{n}\n+        self.Emit(\"MOVQ\", _AX, _IC)                                        // MOVQ    AX, IC\n+        self.Emit(\"MOVQ\", jit.Imm(_Zero_Base), jit.Ptr(_VP, 0))            // MOVQ    $zerobase, (VP)",
        "comment_created_at": "2023-05-18T09:09:04+00:00",
        "comment_author": "liuq19",
        "comment_body": "nil slice \u548c emty slice \u662f\u4e0d\u540c\u7684\u3002empty slice \u90fd\u662f\u6307\u5411\u7684 zerobase \u6307\u9488\uff0cslice \u662fnil\u65f6\uff0c\u624d\u6307\u5411\u7684nil \u6307\u9488\u3002",
        "pr_file_module": null
      },
      {
        "comment_id": "1197592707",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 409,
        "pr_file": "decoder/assembler_amd64_go116.go",
        "discussion_id": "1197585772",
        "commented_code": "@@ -1642,6 +1646,23 @@ func (self *_Assembler) _asm_OP_slice_init(p *_Instr) {\n     self.Emit(\"MOVQ\" , _AX, jit.Ptr(_VP, 8))        // MOVQ    AX, 8(VP)\n }\n \n+func (self *_Assembler) _asm_OP_check_empty(p *_Instr) {\n+    rbrace := p.vb()\n+    if rbrace == ']' {\n+        self.check_eof(1)\n+        self.Emit(\"LEAQ\", jit.Ptr(_IC, 1), _AX)                            // LEAQ    1(IC), AX\n+        self.Emit(\"CMPB\", jit.Sib(_IP, _IC, 1, 0), jit.Imm(int64(rbrace))) // CMPB    (IP)(IC), ']'\n+        self.Sjmp(\"JNE\", \"_not_empty_array{n}\")                            // JNE     _not_empty_array{n}\n+        self.Emit(\"MOVQ\", _AX, _IC)                                        // MOVQ    AX, IC\n+        self.Emit(\"MOVQ\", jit.Imm(_Zero_Base), jit.Ptr(_VP, 0))            // MOVQ    $zerobase, (VP)",
        "comment_created_at": "2023-05-18T09:14:27+00:00",
        "comment_author": "AsterDY",
        "comment_body": "\u4f46\u662f\u5bf9\u7528\u6237\u6765\u8bf4\u6ca1\u5f71\u54cd\uff1f",
        "pr_file_module": null
      },
      {
        "comment_id": "1197599556",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 409,
        "pr_file": "decoder/assembler_amd64_go116.go",
        "discussion_id": "1197585772",
        "commented_code": "@@ -1642,6 +1646,23 @@ func (self *_Assembler) _asm_OP_slice_init(p *_Instr) {\n     self.Emit(\"MOVQ\" , _AX, jit.Ptr(_VP, 8))        // MOVQ    AX, 8(VP)\n }\n \n+func (self *_Assembler) _asm_OP_check_empty(p *_Instr) {\n+    rbrace := p.vb()\n+    if rbrace == ']' {\n+        self.check_eof(1)\n+        self.Emit(\"LEAQ\", jit.Ptr(_IC, 1), _AX)                            // LEAQ    1(IC), AX\n+        self.Emit(\"CMPB\", jit.Sib(_IP, _IC, 1, 0), jit.Imm(int64(rbrace))) // CMPB    (IP)(IC), ']'\n+        self.Sjmp(\"JNE\", \"_not_empty_array{n}\")                            // JNE     _not_empty_array{n}\n+        self.Emit(\"MOVQ\", _AX, _IC)                                        // MOVQ    AX, IC\n+        self.Emit(\"MOVQ\", jit.Imm(_Zero_Base), jit.Ptr(_VP, 0))            // MOVQ    $zerobase, (VP)",
        "comment_created_at": "2023-05-18T09:21:41+00:00",
        "comment_author": "liuq19",
        "comment_body": "\u5e94\u8be5\u6709\u5f71\u54cd\uff0c\u548c\u6807\u51c6\u5e93\u89e3\u6790\u7684\u7ed3\u679c\u4e0d\u5bf9\u7b49\u4e86\uff0c\u6d4b\u8bd5\u7528\u4f8b\u901a\u4e0d\u8fc7....\u800c\u4e14\u8fd9\u91cc\u7528nil\u7684\u8bdd\uff0c\u4e5f\u662fMOV(0, VP(0)) \uff0c\u6ca1\u6709\u6027\u80fd\u4f18\u5316",
        "pr_file_module": null
      },
      {
        "comment_id": "1197623922",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 409,
        "pr_file": "decoder/assembler_amd64_go116.go",
        "discussion_id": "1197585772",
        "commented_code": "@@ -1642,6 +1646,23 @@ func (self *_Assembler) _asm_OP_slice_init(p *_Instr) {\n     self.Emit(\"MOVQ\" , _AX, jit.Ptr(_VP, 8))        // MOVQ    AX, 8(VP)\n }\n \n+func (self *_Assembler) _asm_OP_check_empty(p *_Instr) {\n+    rbrace := p.vb()\n+    if rbrace == ']' {\n+        self.check_eof(1)\n+        self.Emit(\"LEAQ\", jit.Ptr(_IC, 1), _AX)                            // LEAQ    1(IC), AX\n+        self.Emit(\"CMPB\", jit.Sib(_IP, _IC, 1, 0), jit.Imm(int64(rbrace))) // CMPB    (IP)(IC), ']'\n+        self.Sjmp(\"JNE\", \"_not_empty_array{n}\")                            // JNE     _not_empty_array{n}\n+        self.Emit(\"MOVQ\", _AX, _IC)                                        // MOVQ    AX, IC\n+        self.Emit(\"MOVQ\", jit.Imm(_Zero_Base), jit.Ptr(_VP, 0))            // MOVQ    $zerobase, (VP)",
        "comment_created_at": "2023-05-18T09:48:29+00:00",
        "comment_author": "AsterDY",
        "comment_body": "\u5982\u679c\u548cstd\u4e00\u81f4\uff0c\u662f\u4e0d\u662f\u5e94\u8be5\u7528\u5176\u89e3\u6790\u51fa\u6765\u7684[]\u6307\u5411\u7684ptr\uff1f",
        "pr_file_module": null
      },
      {
        "comment_id": "1197709395",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 409,
        "pr_file": "decoder/assembler_amd64_go116.go",
        "discussion_id": "1197585772",
        "commented_code": "@@ -1642,6 +1646,23 @@ func (self *_Assembler) _asm_OP_slice_init(p *_Instr) {\n     self.Emit(\"MOVQ\" , _AX, jit.Ptr(_VP, 8))        // MOVQ    AX, 8(VP)\n }\n \n+func (self *_Assembler) _asm_OP_check_empty(p *_Instr) {\n+    rbrace := p.vb()\n+    if rbrace == ']' {\n+        self.check_eof(1)\n+        self.Emit(\"LEAQ\", jit.Ptr(_IC, 1), _AX)                            // LEAQ    1(IC), AX\n+        self.Emit(\"CMPB\", jit.Sib(_IP, _IC, 1, 0), jit.Imm(int64(rbrace))) // CMPB    (IP)(IC), ']'\n+        self.Sjmp(\"JNE\", \"_not_empty_array{n}\")                            // JNE     _not_empty_array{n}\n+        self.Emit(\"MOVQ\", _AX, _IC)                                        // MOVQ    AX, IC\n+        self.Emit(\"MOVQ\", jit.Imm(_Zero_Base), jit.Ptr(_VP, 0))            // MOVQ    $zerobase, (VP)",
        "comment_created_at": "2023-05-18T11:31:01+00:00",
        "comment_author": "liuq19",
        "comment_body": "\u90a3\u6837\u4f1a\u6709go1.15 \u4e0b\u9762\u7684linkname \u95ee\u9898\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u5c3d\u91cf\u4fdd\u6301\u4e00\u81f4\u53ef\u4ee5\u8bd5\u8bd5 go1.15 \u7528\u81ea\u5b9a\u4e49zerobase",
        "pr_file_module": null
      }
    ]
  }
]