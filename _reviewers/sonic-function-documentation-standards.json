[
  {
    "discussion_id": "1249534481",
    "pr_number": 471,
    "pr_file": "ast/visitor.go",
    "created_at": "2023-07-02T13:42:51+00:00",
    "commented_code": "+/*\n+ * Copyright 2021 ByteDance Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package ast\n+\n+import (\n+    `encoding/json`\n+\n+    `github.com/bytedance/sonic/internal/native/types`\n+)\n+\n+// Visitor handles the callbacks during preorder traversal of a JSON AST.\n+//\n+// According to the JSON RFC8259, a JSON AST can be defined by\n+// the following rules without seperator / whitespace tokens.\n+//\n+//  JSON-AST  = value\n+//  value     = false / null / true / object / array / number / string\n+//  object    = begin-object [ member *( member ) ] end-object\n+//  member    = string value\n+//  array     = begin-array [ value *( value ) ] end-array\n+//\n+type Visitor interface {\n+\n+    // OnNull handles a JSON null value.\n+    OnNull() error\n+\n+    // OnTrue handles a JSON true value.\n+    OnTrue() error\n+\n+    // OnFalse handles a JSON false value.\n+    OnFalse() error\n+\n+    // OnString handles a JSON string value.\n+    OnString(v string) error\n+\n+    // OnNumber handles a JSON number value with its type after conversion.\n+    //\n+    // For a valid JSON, the v.Int64() method should parse the JSON number\n+    // correctly and return no error if isInt64 is true, otherwise\n+    // the v.Float64() method should work.\n+    OnNumber(v json.Number, isInt64 bool) error\n+\n+    // OnObjectBegin handles the beginning of a JSON object value with a\n+    // suggested capacity that can be used to make your custom object container.\n+    //\n+    // After this point the visitor will receive a sequence of callbacks like\n+    // [string, value, string, value, ......, ObjectEnd].\n+    //\n+    // Notice that this is a recursive definition which means the value can\n+    // also be a JSON object / array described by a sequence of callbacks.\n+    OnObjectBegin(capacity int) error",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "1249534481",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 471,
        "pr_file": "ast/visitor.go",
        "discussion_id": "1249534481",
        "commented_code": "@@ -0,0 +1,278 @@\n+/*\n+ * Copyright 2021 ByteDance Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package ast\n+\n+import (\n+    `encoding/json`\n+\n+    `github.com/bytedance/sonic/internal/native/types`\n+)\n+\n+// Visitor handles the callbacks during preorder traversal of a JSON AST.\n+//\n+// According to the JSON RFC8259, a JSON AST can be defined by\n+// the following rules without seperator / whitespace tokens.\n+//\n+//  JSON-AST  = value\n+//  value     = false / null / true / object / array / number / string\n+//  object    = begin-object [ member *( member ) ] end-object\n+//  member    = string value\n+//  array     = begin-array [ value *( value ) ] end-array\n+//\n+type Visitor interface {\n+\n+    // OnNull handles a JSON null value.\n+    OnNull() error\n+\n+    // OnTrue handles a JSON true value.\n+    OnTrue() error\n+\n+    // OnFalse handles a JSON false value.\n+    OnFalse() error\n+\n+    // OnString handles a JSON string value.\n+    OnString(v string) error\n+\n+    // OnNumber handles a JSON number value with its type after conversion.\n+    //\n+    // For a valid JSON, the v.Int64() method should parse the JSON number\n+    // correctly and return no error if isInt64 is true, otherwise\n+    // the v.Float64() method should work.\n+    OnNumber(v json.Number, isInt64 bool) error\n+\n+    // OnObjectBegin handles the beginning of a JSON object value with a\n+    // suggested capacity that can be used to make your custom object container.\n+    //\n+    // After this point the visitor will receive a sequence of callbacks like\n+    // [string, value, string, value, ......, ObjectEnd].\n+    //\n+    // Notice that this is a recursive definition which means the value can\n+    // also be a JSON object / array described by a sequence of callbacks.\n+    OnObjectBegin(capacity int) error",
        "comment_created_at": "2023-07-02T13:42:51+00:00",
        "comment_author": "AsterDY",
        "comment_body": "\u8fd9\u4e2acapacity\u770b\u8d77\u6765\u8fd9\u91cc\u76ee\u524d\u552f\u4e00\u7684\u4f5c\u7528\u662f\u544a\u8bc9Visitor\u5f53\u524d\u662f\u4e00\u4e2aempty\u8282\u70b9\uff0c\u53ef\u4ee5\u6ce8\u91ca\u8bf4\u660e\u4e00\u4e0b\uff0c\u540e\u7eed\u6211\u4eec\u8fd9\u8fb9\u53ef\u4ee5\u8003\u8651\u52a0\u4e2asimd\u626b\u63cf\u7ed9\u51fa\u4e00\u4e2a\u9884\u4f30\u7684\u5143\u7d20\u4e2a\u6570",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "756767912",
    "pr_number": 137,
    "pr_file": "option/option.go",
    "created_at": "2021-11-25T10:36:51+00:00",
    "commented_code": "+/*\n+ * Copyright 2021 ByteDance Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package option\n+\n+// CompileOptions is used for encoder or decoder compiler\n+type CompileOptions struct {\n+    RecursiveDepth int // the depth of recursive compile\n+}\n+\n+func DefaultCompileOptions() CompileOptions {\n+    return CompileOptions{\n+        RecursiveDepth: 0,\n+    }\n+}\n+\n+type CompileOption struct {\n+    Set func(o *CompileOptions)\n+}\n+\n+// Set the depth of recursive compile for decoder and encoder.",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "756767912",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 137,
        "pr_file": "option/option.go",
        "discussion_id": "756767912",
        "commented_code": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2021 ByteDance Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package option\n+\n+// CompileOptions is used for encoder or decoder compiler\n+type CompileOptions struct {\n+    RecursiveDepth int // the depth of recursive compile\n+}\n+\n+func DefaultCompileOptions() CompileOptions {\n+    return CompileOptions{\n+        RecursiveDepth: 0,\n+    }\n+}\n+\n+type CompileOption struct {\n+    Set func(o *CompileOptions)\n+}\n+\n+// Set the depth of recursive compile for decoder and encoder. ",
        "comment_created_at": "2021-11-25T10:36:51+00:00",
        "comment_author": "chenzhuoyu",
        "comment_body": " doc comment \u5e94\u8be5\u4ee5\u51fd\u6570\u540d\u300cWithCompileRecursiveDepth\u300d\u5f00\u5934",
        "pr_file_module": null
      },
      {
        "comment_id": "756769135",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 137,
        "pr_file": "option/option.go",
        "discussion_id": "756767912",
        "commented_code": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2021 ByteDance Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package option\n+\n+// CompileOptions is used for encoder or decoder compiler\n+type CompileOptions struct {\n+    RecursiveDepth int // the depth of recursive compile\n+}\n+\n+func DefaultCompileOptions() CompileOptions {\n+    return CompileOptions{\n+        RecursiveDepth: 0,\n+    }\n+}\n+\n+type CompileOption struct {\n+    Set func(o *CompileOptions)\n+}\n+\n+// Set the depth of recursive compile for decoder and encoder. ",
        "comment_created_at": "2021-11-25T10:38:29+00:00",
        "comment_author": "chenzhuoyu",
        "comment_body": "\u4f8b\u5982\uff1a\r\n```\r\n// WithCompileRecursiveDepth sets the depth of ....\r\n```",
        "pr_file_module": null
      }
    ]
  }
]