[
  {
    "discussion_id": "980685330",
    "pr_number": 306,
    "pr_file": "sonic_!amd64.go",
    "created_at": "2022-09-27T03:01:06+00:00",
    "commented_code": "+//go:build !amd64\n+\n+/*\n+ * Copyright 2022 ByteDance Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package sonic\n+\n+import (\n+\t\"reflect\"",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "980685330",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 306,
        "pr_file": "sonic_!amd64.go",
        "discussion_id": "980685330",
        "commented_code": "@@ -0,0 +1,36 @@\n+//go:build !amd64\n+\n+/*\n+ * Copyright 2022 ByteDance Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package sonic\n+\n+import (\n+\t\"reflect\"",
        "comment_created_at": "2022-09-27T03:01:06+00:00",
        "comment_author": "AsterDY",
        "comment_body": "please use the same format with other sonic codes:\r\n- single quote import package\r\n- four space as indent",
        "pr_file_module": null
      },
      {
        "comment_id": "980689338",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 306,
        "pr_file": "sonic_!amd64.go",
        "discussion_id": "980685330",
        "commented_code": "@@ -0,0 +1,36 @@\n+//go:build !amd64\n+\n+/*\n+ * Copyright 2022 ByteDance Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package sonic\n+\n+import (\n+\t\"reflect\"",
        "comment_created_at": "2022-09-27T03:11:24+00:00",
        "comment_author": "xiekeyi98",
        "comment_body": "Okay.\r\nI was wondering why we do not use `gofmt` to format golang code.\r\n\r\nIs there a script tool or shell script to automatically format it?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "754973856",
    "pr_number": 137,
    "pr_file": "encoder/compiler.go",
    "created_at": "2021-11-23T10:16:56+00:00",
    "commented_code": "}\n \n func (self *_Compiler) compileRec(p *_Program, sp int, vt reflect.Type, pv bool) {\n+    // println(\"[begin] compilRec type is \", vt.Name(), \" @ \", sp)",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "754973856",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 137,
        "pr_file": "encoder/compiler.go",
        "discussion_id": "754973856",
        "commented_code": "@@ -406,6 +408,7 @@ func (self *_Compiler) compileOne(p *_Program, sp int, vt reflect.Type, pv bool)\n }\n \n func (self *_Compiler) compileRec(p *_Program, sp int, vt reflect.Type, pv bool) {\n+    // println(\"[begin] compilRec type is \", vt.Name(), \" @ \", sp)",
        "comment_created_at": "2021-11-23T10:16:56+00:00",
        "comment_author": "chenzhuoyu",
        "comment_body": "\u4e0d\u7528\u7684\u4ee3\u7801\u76f4\u63a5\u5220\u6389\uff0c\u4e0d\u8981\u6ce8\u91ca\u6389",
        "pr_file_module": null
      }
    ]
  }
]