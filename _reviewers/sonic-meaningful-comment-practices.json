[
  {
    "discussion_id": "1241051415",
    "pr_number": 455,
    "pr_file": "native/goIntSlice.c",
    "created_at": "2023-06-25T06:26:42+00:00",
    "commented_code": "+#include <stdio.h>\n+#include <malloc.h>\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stddef.h>\n+#include <string.h>\n+\n+#include \"native.h\"\n+#include \"types.h\"\n+\n+#define ERR_INVAL       2\n+#define ERR_RECURSE_MAX 7\n+\n+typedef struct {\n+    union {                    // the pointer of u64 or i64 array \n+        int64_t*  iptr;\n+        uint64_t* uptr; \n+    };\n+    size_t len;                // the length of slice\n+    size_t cap;               // the capacity of slice \n+} GoIntSlice;\n+\n+\n+\n+bool isSpace(char a){\n+    if( a == ' '){\n+        return true;\n+    }else{\n+        return false;\n+    }\n+}\n+\n+bool isIntger(char a){\n+\tif(a<'0' ||a>'9'){\n+\t\treturn false;\n+\t}else{\n+\t\treturn true;\n+\t}\n+}\n+\n+int charToNum(char c){\n+\treturn c-'0';\n+}\n+\n+\n+long decode_u64_array( const GoString* src, long* p, GoIntSlice* arr){  \n+    char* pos = src->buf;\n+    int i =0;\n+    \n+    while(isSpace(pos[i])){                                             //If there is a space before the beginning, eat the space first \n+    \ti++;                           \n+\t}\n+    if(pos[i] != '['){                                                  //If the first one is not a left bracket, returning it directly is illegal\n+        *p = i+1;                                                       //P points to the first position after the error \n+        arr->len = 0;\n+        return ERR_INVAL;\n+    }\n+    i++;                                                                //It's a left parenthesis",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "1241051415",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 455,
        "pr_file": "native/goIntSlice.c",
        "discussion_id": "1241051415",
        "commented_code": "@@ -0,0 +1,190 @@\n+#include <stdio.h>\n+#include <malloc.h>\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stddef.h>\n+#include <string.h>\n+\n+#include \"native.h\"\n+#include \"types.h\"\n+\n+#define ERR_INVAL       2\n+#define ERR_RECURSE_MAX 7\n+\n+typedef struct {\n+    union {                    // the pointer of u64 or i64 array \n+        int64_t*  iptr;\n+        uint64_t* uptr; \n+    };\n+    size_t len;                // the length of slice\n+    size_t cap;               // the capacity of slice \n+} GoIntSlice;\n+\n+\n+\n+bool isSpace(char a){\n+    if( a == ' '){\n+        return true;\n+    }else{\n+        return false;\n+    }\n+}\n+\n+bool isIntger(char a){\n+\tif(a<'0' ||a>'9'){\n+\t\treturn false;\n+\t}else{\n+\t\treturn true;\n+\t}\n+}\n+\n+int charToNum(char c){\n+\treturn c-'0';\n+}\n+\n+\n+long decode_u64_array( const GoString* src, long* p, GoIntSlice* arr){  \n+    char* pos = src->buf;\n+    int i =0;\n+    \n+    while(isSpace(pos[i])){                                             //If there is a space before the beginning, eat the space first \n+    \ti++;                           \n+\t}\n+    if(pos[i] != '['){                                                  //If the first one is not a left bracket, returning it directly is illegal\n+        *p = i+1;                                                       //P points to the first position after the error \n+        arr->len = 0;\n+        return ERR_INVAL;\n+    }\n+    i++;                                                                //It's a left parenthesis",
        "comment_created_at": "2023-06-25T06:26:42+00:00",
        "comment_author": "liuq19",
        "comment_body": "\u6ce8\u91ca\u5e94\u8be5\u8868\u8fbe\u201d\u4ee3\u7801\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u5199\u201c\uff0c\u800c\u4e0d\u662f\u91cd\u590d\u7528\u6587\u5b57\u8868\u793a\u201d\u4ee3\u7801\u5199\u4e86\u4ec0\u4e48\u201c\uff0c\u56e0\u4e3a\u540e\u8005\u76f4\u63a5\u770b\u4ee3\u7801\u5c31\u80fd\u5f97\u5230\u4fe1\u606f\u3002 \r\n\u53ef\u4ee5\u6362\u4f4d\u601d\u8003\u60f3\u4e00\u4e0b",
        "pr_file_module": null
      },
      {
        "comment_id": "1241051486",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 455,
        "pr_file": "native/goIntSlice.c",
        "discussion_id": "1241051415",
        "commented_code": "@@ -0,0 +1,190 @@\n+#include <stdio.h>\n+#include <malloc.h>\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stddef.h>\n+#include <string.h>\n+\n+#include \"native.h\"\n+#include \"types.h\"\n+\n+#define ERR_INVAL       2\n+#define ERR_RECURSE_MAX 7\n+\n+typedef struct {\n+    union {                    // the pointer of u64 or i64 array \n+        int64_t*  iptr;\n+        uint64_t* uptr; \n+    };\n+    size_t len;                // the length of slice\n+    size_t cap;               // the capacity of slice \n+} GoIntSlice;\n+\n+\n+\n+bool isSpace(char a){\n+    if( a == ' '){\n+        return true;\n+    }else{\n+        return false;\n+    }\n+}\n+\n+bool isIntger(char a){\n+\tif(a<'0' ||a>'9'){\n+\t\treturn false;\n+\t}else{\n+\t\treturn true;\n+\t}\n+}\n+\n+int charToNum(char c){\n+\treturn c-'0';\n+}\n+\n+\n+long decode_u64_array( const GoString* src, long* p, GoIntSlice* arr){  \n+    char* pos = src->buf;\n+    int i =0;\n+    \n+    while(isSpace(pos[i])){                                             //If there is a space before the beginning, eat the space first \n+    \ti++;                           \n+\t}\n+    if(pos[i] != '['){                                                  //If the first one is not a left bracket, returning it directly is illegal\n+        *p = i+1;                                                       //P points to the first position after the error \n+        arr->len = 0;\n+        return ERR_INVAL;\n+    }\n+    i++;                                                                //It's a left parenthesis",
        "comment_created_at": "2023-06-25T06:27:41+00:00",
        "comment_author": "liuq19",
        "comment_body": "\u8fd8\u6709\u4e00\u4e2a\u6ce8\u91ca\u98ce\u683c\uff0c\u5982\u679c\u8f83\u957f\u7684\u6ce8\u91ca\uff0c\u8bf7\u5c3d\u53ef\u80fd\u53e6\u8d77\u4e00\u884c\uff0c\u5728\u4ee3\u7801\u4e0a\u65b9",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1243578801",
    "pr_number": 455,
    "pr_file": "native/goIntSlice.c",
    "created_at": "2023-06-27T11:24:52+00:00",
    "commented_code": "+#include <stdio.h>\n+#include <malloc.h>\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stddef.h>\n+#include <string.h>\n+\n+#include \"native.h\"\n+#include \"types.h\"\n+\n+#define ERR_INVAL       2\n+#define ERR_RECURSE_MAX 7\n+\n+typedef struct {\n+    union {                    // the pointer of u64 or i64 array \n+        int64_t*  iptr;\n+        uint64_t* uptr; \n+    };\n+    size_t len;                // the length of slice\n+    size_t cap;                // the capacity of slice \n+} GoIntSlice;\n+\n+bool is_space(char a){\n+    if( a == ' '||a == '\\t'||a == '\\r'||a == '\n'){\n+        return true;\n+    }else{\n+        return false;\n+    }\n+}\n+\n+bool is_integer(char a){\n+    return a>='0'&& a<='9';\n+}\n+\n+bool is_overflow(int i ,size_t srclen){\n+    return i >= srclen;\n+} \n+\n+int char_to_num(char c){\n+    return c-'0';\n+}\n+\n+long decode_u64_array( const GoString* src, long* p, GoIntSlice* arr){  \n+    char* pos = src->buf;\n+    int i =*p;\n+    //If there is a space before the beginning, eat the space first\n+    while(is_space(pos[i])){                                  \n+        i++;                           \n+    }\n+    if(is_overflow(i,src->len)){\n+        *p = i;\n+\tarr->len = 0;\n+\treturn ERR_INVAL;\n+    }\n+    //If the first one is not a left bracket, returning it directly is illegal\n+    if(pos[i] != '['){\n+\t//P points to the first position after the error",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "1243578801",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 455,
        "pr_file": "native/goIntSlice.c",
        "discussion_id": "1243578801",
        "commented_code": "@@ -0,0 +1,279 @@\n+#include <stdio.h>\n+#include <malloc.h>\n+#include <stdbool.h>\n+#include <stdint.h>\n+#include <stddef.h>\n+#include <string.h>\n+\n+#include \"native.h\"\n+#include \"types.h\"\n+\n+#define ERR_INVAL       2\n+#define ERR_RECURSE_MAX 7\n+\n+typedef struct {\n+    union {                    // the pointer of u64 or i64 array \n+        int64_t*  iptr;\n+        uint64_t* uptr; \n+    };\n+    size_t len;                // the length of slice\n+    size_t cap;                // the capacity of slice \n+} GoIntSlice;\n+\n+bool is_space(char a){\n+    if( a == ' '||a == '\\t'||a == '\\r'||a == '\\n'){\n+        return true;\n+    }else{\n+        return false;\n+    }\n+}\n+\n+bool is_integer(char a){\n+    return a>='0'&& a<='9';\n+}\n+\n+bool is_overflow(int i ,size_t srclen){\n+    return i >= srclen;\n+} \n+\n+int char_to_num(char c){\n+    return c-'0';\n+}\n+\n+long decode_u64_array( const GoString* src, long* p, GoIntSlice* arr){  \n+    char* pos = src->buf;\n+    int i =*p;\n+    //If there is a space before the beginning, eat the space first\n+    while(is_space(pos[i])){                                  \n+        i++;                           \n+    }\n+    if(is_overflow(i,src->len)){\n+        *p = i;\n+\tarr->len = 0;\n+\treturn ERR_INVAL;\n+    }\n+    //If the first one is not a left bracket, returning it directly is illegal\n+    if(pos[i] != '['){\n+\t//P points to the first position after the error                                   ",
        "comment_created_at": "2023-06-27T11:24:52+00:00",
        "comment_author": "liuq19",
        "comment_body": "\u8fd9\u91cc\u5e94\u8be5\u6ce8\u91ca\u5f53\u505aapi\u6ce8\u91ca\uff0c\u5199\u5230 long decode_u64_array( const GoString* src, long* p, GoIntSlice* arr){   \u4e0a\u65b9",
        "pr_file_module": null
      }
    ]
  }
]