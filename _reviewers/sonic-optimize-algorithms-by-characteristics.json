[
  {
    "discussion_id": "1889883600",
    "pr_number": 723,
    "pr_file": "internal/encoder/compiler.go",
    "created_at": "2024-12-18T09:14:02+00:00",
    "commented_code": "case reflect.Bool:\n \t\tp.Add(ir.OP_bool)\n \tcase reflect.Int:\n-\t\tp.Add(ir.OP_int())\n+\t\tp.Add(ir.OP_int(), ir.OP_i)",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "1889883600",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 723,
        "pr_file": "internal/encoder/compiler.go",
        "discussion_id": "1889883600",
        "commented_code": "@@ -179,7 +179,7 @@ func (self *Compiler) compileOps(p *ir.Program, sp int, vt reflect.Type) {\n \tcase reflect.Bool:\n \t\tp.Add(ir.OP_bool)\n \tcase reflect.Int:\n-\t\tp.Add(ir.OP_int())\n+\t\tp.Add(ir.OP_int(), ir.OP_i)",
        "comment_created_at": "2024-12-18T09:14:02+00:00",
        "comment_author": "AsterDY",
        "comment_body": "\u8fd9\u91cc\u6ca1\u770b\u61c2\uff0c\u5e94\u8be5\u6ca1\u5fc5\u8981\u52a0\u8fd9\u4e2aCompactOp\u3002\u5728\u5177\u4f53\u7684 OP_i64\u8bfb\u53d6flag bit\u6216IsMapKey()\u8fdb\u884c\u5904\u7406\u5c31\u884c\u4e86",
        "pr_file_module": null
      },
      {
        "comment_id": "1891286647",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 723,
        "pr_file": "internal/encoder/compiler.go",
        "discussion_id": "1889883600",
        "commented_code": "@@ -179,7 +179,7 @@ func (self *Compiler) compileOps(p *ir.Program, sp int, vt reflect.Type) {\n \tcase reflect.Bool:\n \t\tp.Add(ir.OP_bool)\n \tcase reflect.Int:\n-\t\tp.Add(ir.OP_int())\n+\t\tp.Add(ir.OP_int(), ir.OP_i)",
        "comment_created_at": "2024-12-19T07:41:37+00:00",
        "comment_author": "period331",
        "comment_body": "\u56e0\u4e3avm\u91cc\u662f\u7528uint64\u7684\u903b\u8f91\u5904\u7406int\u7684\uff0c\u5982\u679c\u6ca1\u6709compatOp\uff0c\u5219\u4f1a\u628aint\u4e5f\u5904\u7406",
        "pr_file_module": null
      },
      {
        "comment_id": "1893558911",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 723,
        "pr_file": "internal/encoder/compiler.go",
        "discussion_id": "1889883600",
        "commented_code": "@@ -179,7 +179,7 @@ func (self *Compiler) compileOps(p *ir.Program, sp int, vt reflect.Type) {\n \tcase reflect.Bool:\n \t\tp.Add(ir.OP_bool)\n \tcase reflect.Int:\n-\t\tp.Add(ir.OP_int())\n+\t\tp.Add(ir.OP_int(), ir.OP_i)",
        "comment_created_at": "2024-12-20T07:15:15+00:00",
        "comment_author": "AsterDY",
        "comment_body": "\u5e95\u5c42\u7684OP int\u548cuint\u90fd\u662f\u5206\u5f00\u7684\uff0c\u8fd9\u91cc\u80af\u5b9a\u662f\u4e0d\u9700\u8981\u7684\u3002\u201cvm\u91cc\u662f\u7528uint64\u7684\u903b\u8f91\u5904\u7406int\u7684\u201d\r\nvm\u4ee3\u7801\u91cc\u9762\u660e\u660e\u662f\u5206\u5f00\u7684\uff0c\u4e0d\u77e5\u9053\u4f60\u6307\u7684\u662f\u5565\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1897242526",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 723,
        "pr_file": "internal/encoder/compiler.go",
        "discussion_id": "1889883600",
        "commented_code": "@@ -179,7 +179,7 @@ func (self *Compiler) compileOps(p *ir.Program, sp int, vt reflect.Type) {\n \tcase reflect.Bool:\n \t\tp.Add(ir.OP_bool)\n \tcase reflect.Int:\n-\t\tp.Add(ir.OP_int())\n+\t\tp.Add(ir.OP_int(), ir.OP_i)",
        "comment_created_at": "2024-12-25T09:57:40+00:00",
        "comment_author": "period331",
        "comment_body": "@AsterDY \r\n> \u5e95\u5c42\u7684OP int\u548cuint\u90fd\u662f\u5206\u5f00\u7684\r\n\r\nvm\u91cc\u786e\u5b9e\u662f\u5206\u5f00\u7684\uff0c\u4f46\u662fvm\u91ccAdd\u65f6\uff0c\u8c03\u7528\u4e86\u8fd9\u6837\u4e00\u4e2a\u51fd\u6570\uff1a\r\n\r\n```\r\nfunc OP_int() Op {\r\n\tswitch _INT_SIZE {\r\n\tcase 32:\r\n\t\treturn OP_i32\r\n\tcase 64:\r\n\t\treturn OP_i64\r\n\tdefault:\r\n\t\tpanic(\"unsupported int size\")\r\n\t}\r\n}\r\n```\r\n\r\nuint\u4e5f\u6709\u7c7b\u4f3c\u5904\u7406\uff0c\u8fd9\u76f8\u5f53\u4e8eint\u7528int64\u3001uint\u7528uint64\u7684\u76f8\u5173\u51fd\u6570\u6765\u5904\u7406\u4e86\r\n\u5982\u679c\u6ca1\u6709CompatOp\u7684\u8bdd\uff0c\u5728int64/uint64\u7684\u76f8\u5173\u5904\u7406\u51fd\u6570\u5185\uff0c\u5c31\u4e0d\u77e5\u9053\u5904\u7406\u7684\u662fint/uint\u4e86\r\n\r\n\u8fd8\u6709\u522b\u7684\u5730\u65b9\u505a\u5dee\u5f02\u5316\u5904\u7406\u4e86\u5417\uff1f",
        "pr_file_module": null
      },
      {
        "comment_id": "1899989305",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 723,
        "pr_file": "internal/encoder/compiler.go",
        "discussion_id": "1889883600",
        "commented_code": "@@ -179,7 +179,7 @@ func (self *Compiler) compileOps(p *ir.Program, sp int, vt reflect.Type) {\n \tcase reflect.Bool:\n \t\tp.Add(ir.OP_bool)\n \tcase reflect.Int:\n-\t\tp.Add(ir.OP_int())\n+\t\tp.Add(ir.OP_int(), ir.OP_i)",
        "comment_created_at": "2024-12-31T08:44:32+00:00",
        "comment_author": "AsterDY",
        "comment_body": "uint\u4e5f\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6ea2\u51fa\uff0c\u4e3a\u5565\u4e0d\u652f\u6301\u8fd9\u4e2a\u9009\u9879\uff1f\u6211\u89c9\u5f97\u8fd9\u4e2a\u9009\u9879\u53ea\u8003\u8651uint64\u4e0d\u5408\u7406",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1679707879",
    "pr_number": 674,
    "pr_file": "internal/rt/stubs.go",
    "created_at": "2024-07-16T16:18:27+00:00",
    "commented_code": "var emptyBytes = make([]byte, 0, 0)\n var EmptySlice = *(*GoSlice)(unsafe.Pointer(&emptyBytes))\n+\n+//go:linkname makeslice runtime.makeslice\n+//goland:noinspection GoUnusedParameter\n+func makeslice(et *GoType, len int, cap int) unsafe.Pointer\n+\n+func MakeSlice(oldPtr unsafe.Pointer, et *GoType, newLen int) *GoSlice {\n+\tif newLen == 0 {\n+\t\treturn &EmptySlice\n+\t}\n+\n+\tif *(*unsafe.Pointer)(oldPtr) == nil {\n+\t\treturn &GoSlice{\n+\t\t\tPtr: makeslice(et, newLen, newLen),\n+\t\t\tLen: newLen,\n+\t\t\tCap: newLen,\n+\t\t}\n+\t}\n+\n+\told := (*GoSlice)(oldPtr)\n+\tif old.Cap >= newLen {\n+\t\told.Len = newLen\n+\t\treturn old\n+\t}\n+\n+\tnew := GrowSlice(et, *old, newLen)\n+\n+\t// we sould clear the memory from [oldLen:newLen]\n+\tif et.PtrData == 0 {",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "1679707879",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 674,
        "pr_file": "internal/rt/stubs.go",
        "discussion_id": "1679707879",
        "commented_code": "@@ -127,3 +127,39 @@ func GetMap64Assign(vt reflect.Type) Map64Assign {\n \n var emptyBytes = make([]byte, 0, 0)\n var EmptySlice = *(*GoSlice)(unsafe.Pointer(&emptyBytes))\n+\n+//go:linkname makeslice runtime.makeslice\n+//goland:noinspection GoUnusedParameter\n+func makeslice(et *GoType, len int, cap int) unsafe.Pointer\n+\n+func MakeSlice(oldPtr unsafe.Pointer, et *GoType, newLen int) *GoSlice {\n+\tif newLen == 0 {\n+\t\treturn &EmptySlice\n+\t}\n+\n+\tif *(*unsafe.Pointer)(oldPtr) == nil {\n+\t\treturn &GoSlice{\n+\t\t\tPtr: makeslice(et, newLen, newLen),\n+\t\t\tLen: newLen,\n+\t\t\tCap: newLen,\n+\t\t}\n+\t}\n+\n+\told := (*GoSlice)(oldPtr)\n+\tif old.Cap >= newLen {\n+\t\told.Len = newLen\n+\t\treturn old\n+\t}\n+\n+\tnew := GrowSlice(et, *old, newLen)\n+\n+\t// we sould clear the memory from [oldLen:newLen]\n+\tif et.PtrData == 0 {",
        "comment_created_at": "2024-07-16T16:18:27+00:00",
        "comment_author": "AsterDY",
        "comment_body": "\u4e3a\u5565noscan\u9700\u8981\u6e05\u7406\uff1fscan\u7c7b\u578b\u4e0d\u9700\u8981\u6e05\u7406\uff1f\uff1f",
        "pr_file_module": null
      },
      {
        "comment_id": "1680331590",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 674,
        "pr_file": "internal/rt/stubs.go",
        "discussion_id": "1679707879",
        "commented_code": "@@ -127,3 +127,39 @@ func GetMap64Assign(vt reflect.Type) Map64Assign {\n \n var emptyBytes = make([]byte, 0, 0)\n var EmptySlice = *(*GoSlice)(unsafe.Pointer(&emptyBytes))\n+\n+//go:linkname makeslice runtime.makeslice\n+//goland:noinspection GoUnusedParameter\n+func makeslice(et *GoType, len int, cap int) unsafe.Pointer\n+\n+func MakeSlice(oldPtr unsafe.Pointer, et *GoType, newLen int) *GoSlice {\n+\tif newLen == 0 {\n+\t\treturn &EmptySlice\n+\t}\n+\n+\tif *(*unsafe.Pointer)(oldPtr) == nil {\n+\t\treturn &GoSlice{\n+\t\t\tPtr: makeslice(et, newLen, newLen),\n+\t\t\tLen: newLen,\n+\t\t\tCap: newLen,\n+\t\t}\n+\t}\n+\n+\told := (*GoSlice)(oldPtr)\n+\tif old.Cap >= newLen {\n+\t\told.Len = newLen\n+\t\treturn old\n+\t}\n+\n+\tnew := GrowSlice(et, *old, newLen)\n+\n+\t// we sould clear the memory from [oldLen:newLen]\n+\tif et.PtrData == 0 {",
        "comment_created_at": "2024-07-17T02:44:21+00:00",
        "comment_author": "liuq19",
        "comment_body": "\u662f\u7684\uff0c\u56e0\u4e3aruntime.growslice \u5bf9\u4e8e [oldlen, newlen) \u8fd9\u6bb5\u533a\u95f4\u7684\u7684\u975e\u6307\u9488\u6570\u636e\u662f\u4e0d\u9700\u8981\u6e05\u7a7a\u7684",
        "pr_file_module": null
      },
      {
        "comment_id": "1680361144",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 674,
        "pr_file": "internal/rt/stubs.go",
        "discussion_id": "1679707879",
        "commented_code": "@@ -127,3 +127,39 @@ func GetMap64Assign(vt reflect.Type) Map64Assign {\n \n var emptyBytes = make([]byte, 0, 0)\n var EmptySlice = *(*GoSlice)(unsafe.Pointer(&emptyBytes))\n+\n+//go:linkname makeslice runtime.makeslice\n+//goland:noinspection GoUnusedParameter\n+func makeslice(et *GoType, len int, cap int) unsafe.Pointer\n+\n+func MakeSlice(oldPtr unsafe.Pointer, et *GoType, newLen int) *GoSlice {\n+\tif newLen == 0 {\n+\t\treturn &EmptySlice\n+\t}\n+\n+\tif *(*unsafe.Pointer)(oldPtr) == nil {\n+\t\treturn &GoSlice{\n+\t\t\tPtr: makeslice(et, newLen, newLen),\n+\t\t\tLen: newLen,\n+\t\t\tCap: newLen,\n+\t\t}\n+\t}\n+\n+\told := (*GoSlice)(oldPtr)\n+\tif old.Cap >= newLen {\n+\t\told.Len = newLen\n+\t\treturn old\n+\t}\n+\n+\tnew := GrowSlice(et, *old, newLen)\n+\n+\t// we sould clear the memory from [oldLen:newLen]\n+\tif et.PtrData == 0 {",
        "comment_created_at": "2024-07-17T03:36:30+00:00",
        "comment_author": "AsterDY",
        "comment_body": "\u90a3noscan\u6570\u636e\u5c31\u810f\u7740\u5457\uff0c\u4e0d\u6e05\u7406\u6709\u5565\u95ee\u9898\u5417",
        "pr_file_module": null
      },
      {
        "comment_id": "1680374028",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 674,
        "pr_file": "internal/rt/stubs.go",
        "discussion_id": "1679707879",
        "commented_code": "@@ -127,3 +127,39 @@ func GetMap64Assign(vt reflect.Type) Map64Assign {\n \n var emptyBytes = make([]byte, 0, 0)\n var EmptySlice = *(*GoSlice)(unsafe.Pointer(&emptyBytes))\n+\n+//go:linkname makeslice runtime.makeslice\n+//goland:noinspection GoUnusedParameter\n+func makeslice(et *GoType, len int, cap int) unsafe.Pointer\n+\n+func MakeSlice(oldPtr unsafe.Pointer, et *GoType, newLen int) *GoSlice {\n+\tif newLen == 0 {\n+\t\treturn &EmptySlice\n+\t}\n+\n+\tif *(*unsafe.Pointer)(oldPtr) == nil {\n+\t\treturn &GoSlice{\n+\t\t\tPtr: makeslice(et, newLen, newLen),\n+\t\t\tLen: newLen,\n+\t\t\tCap: newLen,\n+\t\t}\n+\t}\n+\n+\told := (*GoSlice)(oldPtr)\n+\tif old.Cap >= newLen {\n+\t\told.Len = newLen\n+\t\treturn old\n+\t}\n+\n+\tnew := GrowSlice(et, *old, newLen)\n+\n+\t// we sould clear the memory from [oldLen:newLen]\n+\tif et.PtrData == 0 {",
        "comment_created_at": "2024-07-17T04:02:18+00:00",
        "comment_author": "liuq19",
        "comment_body": "\u56e0\u4e3a makeslice \u91cc\u9762\u957f\u5ea6\u4f1a\u53d8\u6210 newLen, \u800c\u4e14\u5982\u679c\u9047\u5230\u975e\u5339\u914d\u7c7b\u578b\uff0c\u4f1a\u8df3\u8fc7\u8fd9\u4e9b\u7c7b\u578b\u3002\u56e0\u6b64\u9700\u8981\u6e05\u7a7a",
        "pr_file_module": null
      },
      {
        "comment_id": "1680374455",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 674,
        "pr_file": "internal/rt/stubs.go",
        "discussion_id": "1679707879",
        "commented_code": "@@ -127,3 +127,39 @@ func GetMap64Assign(vt reflect.Type) Map64Assign {\n \n var emptyBytes = make([]byte, 0, 0)\n var EmptySlice = *(*GoSlice)(unsafe.Pointer(&emptyBytes))\n+\n+//go:linkname makeslice runtime.makeslice\n+//goland:noinspection GoUnusedParameter\n+func makeslice(et *GoType, len int, cap int) unsafe.Pointer\n+\n+func MakeSlice(oldPtr unsafe.Pointer, et *GoType, newLen int) *GoSlice {\n+\tif newLen == 0 {\n+\t\treturn &EmptySlice\n+\t}\n+\n+\tif *(*unsafe.Pointer)(oldPtr) == nil {\n+\t\treturn &GoSlice{\n+\t\t\tPtr: makeslice(et, newLen, newLen),\n+\t\t\tLen: newLen,\n+\t\t\tCap: newLen,\n+\t\t}\n+\t}\n+\n+\told := (*GoSlice)(oldPtr)\n+\tif old.Cap >= newLen {\n+\t\told.Len = newLen\n+\t\treturn old\n+\t}\n+\n+\tnew := GrowSlice(et, *old, newLen)\n+\n+\t// we sould clear the memory from [oldLen:newLen]\n+\tif et.PtrData == 0 {",
        "comment_created_at": "2024-07-17T04:03:09+00:00",
        "comment_author": "liuq19",
        "comment_body": "\u56e0\u4e3amakeslice \u7684\u8bed\u4e49\u5176\u5b9e\u662f\u9700\u8981\u521d\u59cb\u5316\u6240\u6709\u5143\u7d20\u7684\uff0c\u56e0\u4e3a\u5982\u679cdecode \u9047\u5230\u4e0d\u9700\u8981\u89e3\u6790\u7684\u7c7b\u578b\u4f1a\u76f4\u63a5skip\uff0c\u4e0d\u521d\u59cb\u5316\u53ef\u80fd\u4f1a\u6709\u810f\u6570\u636e",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1148733715",
    "pr_number": 392,
    "pr_file": "decoder/compiler.go",
    "created_at": "2023-03-27T02:48:02+00:00",
    "commented_code": "/* dereference all the way down */\n     for et.Kind() == reflect.Ptr {\n-        et = et.Elem()\n+        pt := et\n+\n+        /* check for `json.Unmarshaler` with pointer receiver */\n+        if pt.Implements(jsonUnmarshalerType) {\n+            p.rtt(_OP_unmarshal_p, pt)\n+            return\n+        }\n+\n+        /* check for `encoding.TextMarshaler` with pointer receiver */\n+        if pt.Implements(encodingTextUnmarshalerType) {\n+            p.add(_OP_lspace)\n+            self.compileUnmarshalTextPtr(p, pt)\n+            return\n+        }\n+\n+        et = pt.Elem()\n         p.rtt(_OP_deref, et)\n     }\n+    self.compileBasic(p, sp, et)",
    "repo_full_name": "bytedance/sonic",
    "discussion_comments": [
      {
        "comment_id": "1148733715",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 392,
        "pr_file": "decoder/compiler.go",
        "discussion_id": "1148733715",
        "commented_code": "@@ -679,12 +695,26 @@ func (self *_Compiler) compilePtr(p *_Program, sp int, et reflect.Type) {\n \n     /* dereference all the way down */\n     for et.Kind() == reflect.Ptr {\n-        et = et.Elem()\n+        pt := et\n+\n+        /* check for `json.Unmarshaler` with pointer receiver */\n+        if pt.Implements(jsonUnmarshalerType) {\n+            p.rtt(_OP_unmarshal_p, pt)\n+            return\n+        }\n+\n+        /* check for `encoding.TextMarshaler` with pointer receiver */\n+        if pt.Implements(encodingTextUnmarshalerType) {\n+            p.add(_OP_lspace)\n+            self.compileUnmarshalTextPtr(p, pt)\n+            return\n+        }\n+\n+        et = pt.Elem()\n         p.rtt(_OP_deref, et)\n     }\n+    self.compileBasic(p, sp, et)",
        "comment_created_at": "2023-03-27T02:48:02+00:00",
        "comment_author": "AsterDY",
        "comment_body": "sp+1",
        "pr_file_module": null
      },
      {
        "comment_id": "1149963656",
        "repo_full_name": "bytedance/sonic",
        "pr_number": 392,
        "pr_file": "decoder/compiler.go",
        "discussion_id": "1148733715",
        "commented_code": "@@ -679,12 +695,26 @@ func (self *_Compiler) compilePtr(p *_Program, sp int, et reflect.Type) {\n \n     /* dereference all the way down */\n     for et.Kind() == reflect.Ptr {\n-        et = et.Elem()\n+        pt := et\n+\n+        /* check for `json.Unmarshaler` with pointer receiver */\n+        if pt.Implements(jsonUnmarshalerType) {\n+            p.rtt(_OP_unmarshal_p, pt)\n+            return\n+        }\n+\n+        /* check for `encoding.TextMarshaler` with pointer receiver */\n+        if pt.Implements(encodingTextUnmarshalerType) {\n+            p.add(_OP_lspace)\n+            self.compileUnmarshalTextPtr(p, pt)\n+            return\n+        }\n+\n+        et = pt.Elem()\n         p.rtt(_OP_deref, et)\n     }\n+    self.compileBasic(p, sp, et)",
        "comment_created_at": "2023-03-28T02:36:38+00:00",
        "comment_author": "liuq19",
        "comment_body": "sp+1 \u53ef\u80fd\u4f1a\u6709\u4e24\u4e2a\u95ee\u9898\uff1a\r\n1. compile\u8fbe\u5230\u9650\u5236\u7684\u6df1\u5ea6\uff0c\u8fd9\u65f6\u4f1a\u5c06 elem\u7c7b\u578b recurse\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u81ea\u5b9a\u4e49\u7684\u6307\u9488\u7c7b\u578b\u4fe1\u606f\u5f97\u4e0d\u5230\u4fdd\u7559\u3002\u540e\u7eedrecurse\u7f16\u8bd1\u4ecd\u7136\u4f1a\u9519\u8bef\u3002\r\n2. \u6307\u9488\u5728\u7f16\u8bd1\u65f6\u4ee3\u7801\u91cf\u5f88\u5c11\uff0c\u5e94\u8be5\u53ef\u4ee5\u5b8c\u5168\u5185\u8054\uff0c\u4e0d\u9700\u8981\u989d\u5916\u8bb0\u5f55\u7f16\u8bd1\u6df1\u5ea6\u3002\u76ee\u524d\u6d4b\u8bd5\uff0c\u9ed8\u8ba4\u5185\u8054\u6df1\u5ea6\u662f3\uff0cmap[string]*Type \u5728 \u7f16\u8bd1Type\u65f6\u4f1arecurse, \u4f46\u5176\u5b9e\u4e0d\u5fc5\u8981\u3002\u8fd9\u91cc\u7684*Type\u6307\u9488\u5e94\u8be5\u53ef\u4ee5\u5b8c\u5168\u5185\u8054\u3002",
        "pr_file_module": null
      }
    ]
  }
]