[
  {
    "discussion_id": "2218842707",
    "pr_number": 51101,
    "pr_file": "python/pyspark/sql/tests/streaming/test_streaming_foreach_batch.py",
    "created_at": "2025-07-21T10:59:00+00:00",
    "commented_code": "df = self.spark.read.format(\"text\").load(\"python/test_support/sql/streaming\")\n             self.assertEqual(sorted(df.collect()), sorted(actual.collect()))\n \n+    def test_streaming_foreach_batch_external_column(self):\n+        from pyspark.sql import functions as sf\n+\n+        table_name = \"testTable_foreach_batch_external_column\"",
    "repo_full_name": "apache/spark",
    "discussion_comments": [
      {
        "comment_id": "2218842707",
        "repo_full_name": "apache/spark",
        "pr_number": 51101,
        "pr_file": "python/pyspark/sql/tests/streaming/test_streaming_foreach_batch.py",
        "discussion_id": "2218842707",
        "commented_code": "@@ -204,6 +204,27 @@ def func(df: DataFrame, batch_id: int):\n             df = self.spark.read.format(\"text\").load(\"python/test_support/sql/streaming\")\n             self.assertEqual(sorted(df.collect()), sorted(actual.collect()))\n \n+    def test_streaming_foreach_batch_external_column(self):\n+        from pyspark.sql import functions as sf\n+\n+        table_name = \"testTable_foreach_batch_external_column\"",
        "comment_created_at": "2025-07-21T10:59:00+00:00",
        "comment_author": "HyukjinKwon",
        "comment_body": "Can we drop this table after being used? Seems like it affects other tests (especially catalog related tests) when they run in parallel https://github.com/apache/spark/actions/runs/16302054252/job/46038875385",
        "pr_file_module": null
      },
      {
        "comment_id": "2221277155",
        "repo_full_name": "apache/spark",
        "pr_number": 51101,
        "pr_file": "python/pyspark/sql/tests/streaming/test_streaming_foreach_batch.py",
        "discussion_id": "2218842707",
        "commented_code": "@@ -204,6 +204,27 @@ def func(df: DataFrame, batch_id: int):\n             df = self.spark.read.format(\"text\").load(\"python/test_support/sql/streaming\")\n             self.assertEqual(sorted(df.collect()), sorted(actual.collect()))\n \n+    def test_streaming_foreach_batch_external_column(self):\n+        from pyspark.sql import functions as sf\n+\n+        table_name = \"testTable_foreach_batch_external_column\"",
        "comment_created_at": "2025-07-22T05:46:02+00:00",
        "comment_author": "haoyangeng-db",
        "comment_body": "Sent out https://github.com/apache/spark/pull/51611.\r\n\r\nJust curious -- why wasn't this noticed early on, is it because of the other tests only fail non-deterministically?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2213303242",
    "pr_number": 51537,
    "pr_file": "python/pyspark/tests/test_util.py",
    "created_at": "2025-07-17T13:08:15+00:00",
    "commented_code": "with self.assertRaisesRegex(ValueError, \"invalid format\"):\n             _parse_memory(\"2gs\")\n \n+    @eventually(timeout=180, catch_timeout=True)",
    "repo_full_name": "apache/spark",
    "discussion_comments": [
      {
        "comment_id": "2213303242",
        "repo_full_name": "apache/spark",
        "pr_number": 51537,
        "pr_file": "python/pyspark/tests/test_util.py",
        "discussion_id": "2213303242",
        "commented_code": "@@ -148,6 +148,17 @@ def test_parse_memory(self):\n         with self.assertRaisesRegex(ValueError, \"invalid format\"):\n             _parse_memory(\"2gs\")\n \n+    @eventually(timeout=180, catch_timeout=True)",
        "comment_created_at": "2025-07-17T13:08:15+00:00",
        "comment_author": "zhengruifeng",
        "comment_body": "the test log is like\r\n```\r\n----------------------------------------------------------------------\r\n  test_retry_timeout_test (pyspark.tests.test_util.UtilTests.test_retry_timeout_test) ... WARNING: Using incubator modules: jdk.incubator.vector\r\nSetting default log level to \"WARN\".\r\nTo adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\r\nhanging for 1 hour\r\n\r\nAttempt #1 failed!\r\nFunction test_retry_timeout_test timed out after 1 seconds\r\nhanging for 1 hour\r\n\r\nAttempt #2 failed!\r\nFunction test_retry_timeout_test timed out after 1 seconds\r\nhanging for 1 hour\r\n\r\nAttempt #3 failed!\r\nFunction test_retry_timeout_test timed out after 1 seconds\r\nsucceeding immediately\r\nok (4.856s)\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 4.856s\r\n\r\nOK\r\n```",
        "pr_file_module": null
      }
    ]
  }
]