[
  {
    "discussion_id": "2214622574",
    "pr_number": 51545,
    "pr_file": "common/utils/src/main/java/org/apache/spark/network/util/JavaUtils.java",
    "created_at": "2025-07-18T01:02:59+00:00",
    "commented_code": "// On Unix systems, use operating system command to run faster\n     // If that does not work out, fallback to the Java IO way\n     // We exclude Apple Silicon test environment due to the limited resource issues.\n-    if (SystemUtils.IS_OS_UNIX && filter == null && !(SystemUtils.IS_OS_MAC_OSX &&\n+    String osName = System.getProperty(\"os.name\");\n+    boolean isMac = osName.regionMatches(true, 0, \"Mac OS X\", 0, 8);\n+    String[] prefixes = {\n+        \"AIX\", \"HP-UX\", \"Irix\", \"Linux\", \"Mac OS X\", \"Solaris\", \"SunOS\", \"FreeBSD\",\n+        \"OpenBSD\", \"NetBSD\"\n+    };\n+    boolean isUnix = Arrays.stream(prefixes)\n+        .anyMatch(prefix -> osName.regionMatches(true, 0, prefix, 0, prefix.length()));\n+    if (isUnix && filter == null && !(isMac &&",
    "repo_full_name": "apache/spark",
    "discussion_comments": [
      {
        "comment_id": "2214622574",
        "repo_full_name": "apache/spark",
        "pr_number": 51545,
        "pr_file": "common/utils/src/main/java/org/apache/spark/network/util/JavaUtils.java",
        "discussion_id": "2214622574",
        "commented_code": "@@ -110,7 +108,15 @@ public static void deleteRecursively(File file, FilenameFilter filter)\n     // On Unix systems, use operating system command to run faster\n     // If that does not work out, fallback to the Java IO way\n     // We exclude Apple Silicon test environment due to the limited resource issues.\n-    if (SystemUtils.IS_OS_UNIX && filter == null && !(SystemUtils.IS_OS_MAC_OSX &&\n+    String osName = System.getProperty(\"os.name\");\n+    boolean isMac = osName.regionMatches(true, 0, \"Mac OS X\", 0, 8);\n+    String[] prefixes = {\n+        \"AIX\", \"HP-UX\", \"Irix\", \"Linux\", \"Mac OS X\", \"Solaris\", \"SunOS\", \"FreeBSD\",\n+        \"OpenBSD\", \"NetBSD\"\n+    };\n+    boolean isUnix = Arrays.stream(prefixes)\n+        .anyMatch(prefix -> osName.regionMatches(true, 0, prefix, 0, prefix.length()));\n+    if (isUnix && filter == null && !(isMac &&",
        "comment_created_at": "2025-07-18T01:02:59+00:00",
        "comment_author": "dongjoon-hyun",
        "comment_body": "Since this is the only usage of `SystemUtils` in `main` code, I clean this up in this PR together.\r\n\r\n**BEFORE**\r\n```\r\n$ git grep SystemUtils | grep -v test\r\ncommon/utils/src/main/java/org/apache/spark/network/util/JavaUtils.java:import org.apache.commons.lang3.SystemUtils;\r\ncommon/utils/src/main/java/org/apache/spark/network/util/JavaUtils.java:    if (SystemUtils.IS_OS_UNIX && filter == null && !(SystemUtils.IS_OS_MAC_OSX &&\r\ncore/src/main/scala/org/apache/spark/util/Utils.scala:import org.apache.commons.lang3.SystemUtils\r\ncore/src/main/scala/org/apache/spark/util/Utils.scala:  val isUnix = SystemUtils.IS_OS_UNIX\r\ncore/src/main/scala/org/apache/spark/util/Utils.scala:  val isWindows = SystemUtils.IS_OS_WINDOWS\r\ncore/src/main/scala/org/apache/spark/util/Utils.scala:  val isMac = SystemUtils.IS_OS_MAC_OSX\r\ncore/src/main/scala/org/apache/spark/util/Utils.scala:  val isMacOnAppleSilicon = SystemUtils.IS_OS_MAC_OSX && SystemUtils.OS_ARCH.equals(\"aarch64\")\r\n```\r\n\r\n**AFTER**\r\n```\r\n$ git grep SystemUtils | grep -v test\r\ncommon/utils/src/main/scala/org/apache/spark/util/SparkSystemUtils.scala:private[spark] trait SparkSystemUtils {\r\ncommon/utils/src/main/scala/org/apache/spark/util/SparkSystemUtils.scala:object SparkSystemUtils extends SparkSystemUtils\r\ncore/src/main/scala/org/apache/spark/util/Utils.scala:  with SparkSystemUtils {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2205341848",
    "pr_number": 51476,
    "pr_file": "common/network-common/src/main/java/org/apache/spark/network/server/TransportServer.java",
    "created_at": "2025-07-14T16:31:30+00:00",
    "commented_code": "EventLoopGroup workerGroup =  NettyUtils.createEventLoop(ioMode, conf.serverThreads(),\n       conf.getModuleName() + \"-server\");\n \n+    boolean isNotWindows = !System.getProperty(\"os.name\").regionMatches(true, 0, \"Windows\", 0, 7);",
    "repo_full_name": "apache/spark",
    "discussion_comments": [
      {
        "comment_id": "2205341848",
        "repo_full_name": "apache/spark",
        "pr_number": 51476,
        "pr_file": "common/network-common/src/main/java/org/apache/spark/network/server/TransportServer.java",
        "discussion_id": "2205341848",
        "commented_code": "@@ -105,11 +104,12 @@ private void init(String hostToBind, int portToBind) {\n     EventLoopGroup workerGroup =  NettyUtils.createEventLoop(ioMode, conf.serverThreads(),\n       conf.getModuleName() + \"-server\");\n \n+    boolean isNotWindows = !System.getProperty(\"os.name\").regionMatches(true, 0, \"Windows\", 0, 7);",
        "comment_created_at": "2025-07-14T16:31:30+00:00",
        "comment_author": "dongjoon-hyun",
        "comment_body": "This is the equivalent of the original.\r\n\r\nhttps://github.com/apache/commons-lang/blame/2a513149dd92dd8aa57f8fbfae867ca044755565/src/main/java/org/apache/commons/lang3/SystemUtils.java#L1646\r\n\r\n```java\r\npublic static final boolean IS_OS_WINDOWS = getOsMatchesName(OS_NAME_WINDOWS_PREFIX);\r\n```\r\n\r\nhttps://github.com/apache/commons-lang/blob/4711998927a52abe70bec7075f9f89e02824b404/src/main/java/org/apache/commons/lang3/SystemUtils.java#L2160-L2162\r\n\r\n```java\r\nreturn isOsNameMatch(OS_NAME, osNamePrefix);\r\n```\r\n\r\n```java\r\nreturn Strings.CI.startsWith(osName, osNamePrefix);\r\n```\r\n\r\n```java\r\nreturn CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, preLen);\r\n```\r\n\r\n```java\r\nreturn ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\r\n```\r\n\r\nhttps://github.com/apache/commons-lang/blob/4711998927a52abe70bec7075f9f89e02824b404/src/main/java/org/apache/commons/lang3/SystemUtils.java#L597\r\n\r\n```java\r\npublic static final String OS_NAME = SystemProperties.getOsName();\r\n```\r\n\r\n```java\r\nreturn getProperty(OS_NAME);\r\n```\r\n\r\n```java\r\npublic static final String OS_NAME = \"os.name\";\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2205652126",
        "repo_full_name": "apache/spark",
        "pr_number": 51476,
        "pr_file": "common/network-common/src/main/java/org/apache/spark/network/server/TransportServer.java",
        "discussion_id": "2205341848",
        "commented_code": "@@ -105,11 +104,12 @@ private void init(String hostToBind, int portToBind) {\n     EventLoopGroup workerGroup =  NettyUtils.createEventLoop(ioMode, conf.serverThreads(),\n       conf.getModuleName() + \"-server\");\n \n+    boolean isNotWindows = !System.getProperty(\"os.name\").regionMatches(true, 0, \"Windows\", 0, 7);",
        "comment_created_at": "2025-07-14T19:29:23+00:00",
        "comment_author": "viirya",
        "comment_body": "I confirmed that `OS_NAME_WINDOWS_PREFIX` is \"Windows\".\r\n\r\n```\r\n// SystemUtils.java\r\nprivate static boolean getOsMatchesName(final String osNamePrefix) {\r\n  return isOsNameMatch(OS_NAME, osNamePrefix);\r\n}\r\n\r\nstatic boolean isOsNameMatch(final String osName, final String osNamePrefix) {\r\n  if (osName == null) {\r\n    return false;\r\n  }\r\n  return osName.startsWith(osNamePrefix);\r\n}\r\n\r\npublic static final String OS_NAME = SystemProperties.getOsName();\r\n\r\n// SystemProperties.java\r\npublic static String getOsName() {\r\n  return getProperty(OS_NAME);\r\n}\r\npublic static final String OS_NAME = \"os.name\";\r\n```",
        "pr_file_module": null
      }
    ]
  }
]