[
  {
    "discussion_id": "1808400617",
    "pr_number": 48470,
    "pr_file": "common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java",
    "created_at": "2024-10-21T09:17:42+00:00",
    "commented_code": "public UTF8String[] split(UTF8String pattern, int limit) {\n     // For the empty `pattern` a `split` function ignores trailing empty strings unless original\n     // string is empty.\n-    if (numBytes() != 0 && pattern.numBytes() == 0) {\n+    if (numBytes() != 0 && (pattern.numBytes() == 0 || lowercaseRegexPrefix.equals(pattern))) {",
    "repo_full_name": "apache/spark",
    "discussion_comments": [
      {
        "comment_id": "1808400617",
        "repo_full_name": "apache/spark",
        "pr_number": 48470,
        "pr_file": "common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java",
        "discussion_id": "1808400617",
        "commented_code": "@@ -1484,17 +1485,17 @@ public static UTF8String concatWs(UTF8String separator, UTF8String... inputs) {\n   public UTF8String[] split(UTF8String pattern, int limit) {\n     // For the empty `pattern` a `split` function ignores trailing empty strings unless original\n     // string is empty.\n-    if (numBytes() != 0 && pattern.numBytes() == 0) {\n+    if (numBytes() != 0 && (pattern.numBytes() == 0 || lowercaseRegexPrefix.equals(pattern))) {",
        "comment_created_at": "2024-10-21T09:17:42+00:00",
        "comment_author": "uros-db",
        "comment_body": "how about: instead of checking whether the pattern equals to the (?ui) prefix, we modify the collation implementation (prefixing logic) to avoid appending the prefix at all in the case that pattern is an empty string",
        "pr_file_module": null
      },
      {
        "comment_id": "1808417962",
        "repo_full_name": "apache/spark",
        "pr_number": 48470,
        "pr_file": "common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java",
        "discussion_id": "1808400617",
        "commented_code": "@@ -1484,17 +1485,17 @@ public static UTF8String concatWs(UTF8String separator, UTF8String... inputs) {\n   public UTF8String[] split(UTF8String pattern, int limit) {\n     // For the empty `pattern` a `split` function ignores trailing empty strings unless original\n     // string is empty.\n-    if (numBytes() != 0 && pattern.numBytes() == 0) {\n+    if (numBytes() != 0 && (pattern.numBytes() == 0 || lowercaseRegexPrefix.equals(pattern))) {",
        "comment_created_at": "2024-10-21T09:28:54+00:00",
        "comment_author": "DenineLu",
        "comment_body": "I agree with what you're saying, but should we consider that the user's pattern itself might be `(?ui)` and is unrelated to prefixing logic?",
        "pr_file_module": null
      },
      {
        "comment_id": "1808430241",
        "repo_full_name": "apache/spark",
        "pr_number": 48470,
        "pr_file": "common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java",
        "discussion_id": "1808400617",
        "commented_code": "@@ -1484,17 +1485,17 @@ public static UTF8String concatWs(UTF8String separator, UTF8String... inputs) {\n   public UTF8String[] split(UTF8String pattern, int limit) {\n     // For the empty `pattern` a `split` function ignores trailing empty strings unless original\n     // string is empty.\n-    if (numBytes() != 0 && pattern.numBytes() == 0) {\n+    if (numBytes() != 0 && (pattern.numBytes() == 0 || lowercaseRegexPrefix.equals(pattern))) {",
        "comment_created_at": "2024-10-21T09:37:17+00:00",
        "comment_author": "uros-db",
        "comment_body": "that is an interesting observation, although in that case I don't see why the user's pattern can't be any other flag modifier combination, such as: (?m), (?s), (?x), (?a)\r\n\r\ntaking this into consideration, there is really nothing special about `lowercaseRegexPrefix`. instead, you should look for a library method that can discern whether a pattern is \"functionally\" empty, instead of doing a manual check against `lowercaseRegexPrefix`",
        "pr_file_module": null
      },
      {
        "comment_id": "1808703775",
        "repo_full_name": "apache/spark",
        "pr_number": 48470,
        "pr_file": "common/unsafe/src/main/java/org/apache/spark/unsafe/types/UTF8String.java",
        "discussion_id": "1808400617",
        "commented_code": "@@ -1484,17 +1485,17 @@ public static UTF8String concatWs(UTF8String separator, UTF8String... inputs) {\n   public UTF8String[] split(UTF8String pattern, int limit) {\n     // For the empty `pattern` a `split` function ignores trailing empty strings unless original\n     // string is empty.\n-    if (numBytes() != 0 && pattern.numBytes() == 0) {\n+    if (numBytes() != 0 && (pattern.numBytes() == 0 || lowercaseRegexPrefix.equals(pattern))) {",
        "comment_created_at": "2024-10-21T12:30:06+00:00",
        "comment_author": "DenineLu",
        "comment_body": "Thank you for your explanation. It looks like there\u2019s no way to validate this \"weird\" situation without losing performance. I made changes according to your advice. Thanks again.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2115283538",
    "pr_number": 50933,
    "pr_file": "common/sketch/src/test/java/org/apache/spark/util/sketch/TestSparkBloomFilter.java",
    "created_at": "2025-05-30T07:13:02+00:00",
    "commented_code": "+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.sketch;\n+\n+import org.junit.jupiter.api.*;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest.Values;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+@Disabled",
    "repo_full_name": "apache/spark",
    "discussion_comments": [
      {
        "comment_id": "2115283538",
        "repo_full_name": "apache/spark",
        "pr_number": 50933,
        "pr_file": "common/sketch/src/test/java/org/apache/spark/util/sketch/TestSparkBloomFilter.java",
        "discussion_id": "2115283538",
        "commented_code": "@@ -0,0 +1,336 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.sketch;\n+\n+import org.junit.jupiter.api.*;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest.Values;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+@Disabled",
        "comment_created_at": "2025-05-30T07:13:02+00:00",
        "comment_author": "LuciferYang",
        "comment_body": "Submitting a test case and directly disabling it is not an ideal approach. Why can't it undergo regular validation through GitHub Actions? \r\n\r\nAdditionally, I suggest first creating a micro-benchmark relevant to this scenario and recording the results without this pr. Then, update the code and the new benchmark results in this pr to demonstrate the optimization effect.",
        "pr_file_module": null
      },
      {
        "comment_id": "2115468216",
        "repo_full_name": "apache/spark",
        "pr_number": 50933,
        "pr_file": "common/sketch/src/test/java/org/apache/spark/util/sketch/TestSparkBloomFilter.java",
        "discussion_id": "2115283538",
        "commented_code": "@@ -0,0 +1,336 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.sketch;\n+\n+import org.junit.jupiter.api.*;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest.Values;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+@Disabled",
        "comment_created_at": "2025-05-30T09:07:24+00:00",
        "comment_author": "LuciferYang",
        "comment_body": "Or can the scenarios in `org.apache.spark.sql.execution.benchmark.BloomFilterBenchmark` reflect the optimizations brought about by the current pr?",
        "pr_file_module": null
      },
      {
        "comment_id": "2116047515",
        "repo_full_name": "apache/spark",
        "pr_number": 50933,
        "pr_file": "common/sketch/src/test/java/org/apache/spark/util/sketch/TestSparkBloomFilter.java",
        "discussion_id": "2115283538",
        "commented_code": "@@ -0,0 +1,336 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.sketch;\n+\n+import org.junit.jupiter.api.*;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest.Values;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+@Disabled",
        "comment_created_at": "2025-05-30T14:34:44+00:00",
        "comment_author": "ishnagy",
        "comment_body": "> Submitting a test case and directly disabling it is not an ideal approach. Why can't it undergo regular validation through GitHub Actions?\r\n\r\nI agree, in spirit, this test code I submitted is much more close to a benchmark (measurement rather than validation) than to an actual test case, with the emphasis on expectations and assertions.\r\n\r\nThe reason I disabled it by default, because on a single thread, it takes 10+ hours to run the all the cases, and I didn't want to interfere with running time of the regular test suites.\r\n\r\nI wasn't aware of the benchmark workflow, I will have a look whether I can fit this logic in there. Not sure, if it will be a snap in fit, because the code focuses on obtaining a Bloom filter specific measure, the false pos rate, not some more usual or generic measures like running time or resource consumption.\r\n\r\nMoreover, the performance gains won't be directly apparent on the sketch level. If anything, it will have a slightly worse running time (but shouldn't consume more mem than the previous logic). The gains should only be measurable in client code (like sql) that uses the sketch implementation. E.g. with a reasonably low error rate in the implementation won't force almost any queried element (in a client) on the slow path when the filter is saturated.\r\n\r\n> Or can the scenarios in `org.apache.spark.sql.execution.benchmark.BloomFilterBenchmark` reflect the optimizations brought about by the current pr?\r\n\r\nThis may or may not be measurable with the current benchmarks, I haven't looked into that yet. As a rule of thumb, in the current implementation, after a few hundred million elements the false pos rate gets noticeably (a few percents) higher than expected, around about a billion (2^30) it diverges significantly (a few tens of percents), and above 2G (2^31) items, it gets prohibitively high (90%+). With the proposed new logic the error rate remains within a few percents off of the expected on all scales.\r\n\r\nIf the current benchmarks already use Bloom filters with more than a few hundred million items inserted, then the  performance improvements should be visible there.",
        "pr_file_module": null
      },
      {
        "comment_id": "2116049614",
        "repo_full_name": "apache/spark",
        "pr_number": 50933,
        "pr_file": "common/sketch/src/test/java/org/apache/spark/util/sketch/TestSparkBloomFilter.java",
        "discussion_id": "2115283538",
        "commented_code": "@@ -0,0 +1,336 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.sketch;\n+\n+import org.junit.jupiter.api.*;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest.Values;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+@Disabled",
        "comment_created_at": "2025-05-30T14:35:53+00:00",
        "comment_author": "ishnagy",
        "comment_body": "I'll try to adapt the current tests into the benchmark workflow.",
        "pr_file_module": null
      },
      {
        "comment_id": "2132235593",
        "repo_full_name": "apache/spark",
        "pr_number": 50933,
        "pr_file": "common/sketch/src/test/java/org/apache/spark/util/sketch/TestSparkBloomFilter.java",
        "discussion_id": "2115283538",
        "commented_code": "@@ -0,0 +1,336 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.sketch;\n+\n+import org.junit.jupiter.api.*;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest.Values;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+@Disabled",
        "comment_created_at": "2025-06-06T13:47:50+00:00",
        "comment_author": "peter-toth",
        "comment_body": "Yeah, unfortunately Spark benchmarks can measure only time, but can't measure qualities like the false positive rate of a bloom filter.\r\n\r\nI wonder shall we remove `TestSparkBloomFilter` from this PR or add some comments to it to explain why it is disabled?",
        "pr_file_module": null
      },
      {
        "comment_id": "2132539969",
        "repo_full_name": "apache/spark",
        "pr_number": 50933,
        "pr_file": "common/sketch/src/test/java/org/apache/spark/util/sketch/TestSparkBloomFilter.java",
        "discussion_id": "2115283538",
        "commented_code": "@@ -0,0 +1,336 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.sketch;\n+\n+import org.junit.jupiter.api.*;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest.Values;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+@Disabled",
        "comment_created_at": "2025-06-06T16:54:36+00:00",
        "comment_author": "LuciferYang",
        "comment_body": "If there are other test cases that already cover the changes in the current pull request? If so, I agree to remove `TestSparkBloomFilter` (as per Spark's coding conventions, it should actually be named `SparkBloomFilterSuite`). There's no point in adding a test case that cannot be continuously verified by GitHub Actions, as it's likely that no one will remember to execute it later on.",
        "pr_file_module": null
      },
      {
        "comment_id": "2133864921",
        "repo_full_name": "apache/spark",
        "pr_number": 50933,
        "pr_file": "common/sketch/src/test/java/org/apache/spark/util/sketch/TestSparkBloomFilter.java",
        "discussion_id": "2115283538",
        "commented_code": "@@ -0,0 +1,336 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.sketch;\n+\n+import org.junit.jupiter.api.*;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest.Values;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+@Disabled",
        "comment_created_at": "2025-06-07T14:33:53+00:00",
        "comment_author": "LuciferYang",
        "comment_body": "> add some comments to it to explain why it is disabled?\r\n\r\n@peter-toth I suspect the reason it was marked with `@Disabled` is that the execution time was too long. I tried running it using GitHub Actions, but it was eventually terminated because it exceeded the two-hour execution limit...\r\n\r\n- https://github.com/LuciferYang/spark/actions/runs/15495958232/job/43632855094\r\n\r\n![image](https://github.com/user-attachments/assets/641d20e6-fbc0-4f78-8573-a0efea91bd22)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2134629683",
        "repo_full_name": "apache/spark",
        "pr_number": 50933,
        "pr_file": "common/sketch/src/test/java/org/apache/spark/util/sketch/TestSparkBloomFilter.java",
        "discussion_id": "2115283538",
        "commented_code": "@@ -0,0 +1,336 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.sketch;\n+\n+import org.junit.jupiter.api.*;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest.Values;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+@Disabled",
        "comment_created_at": "2025-06-08T11:07:52+00:00",
        "comment_author": "peter-toth",
        "comment_body": "Yeah. Another option is to reduce the test cases to still validate the improvement of the PR, but with reasoable runtimes.\r\n\r\nIt seems like the degradation of false positive rate is not yet visible at `n = 1M`. But when `n = 1000M` the actual FPP is much higher than the expected. (Actuals are 50.920521%, 59.888499% and 76.025548% when expecteds are 5%, 3% and 1%). Unfortunately it seems those test cases took 30-40 mins to complete each.\r\nSo how about testing only 1 `n` between those 2 where the improvement of the PR is visible but the test completes in let's say 5-10 mins. It shoule be enough to test the 3% default FPP case.",
        "pr_file_module": null
      },
      {
        "comment_id": "2134631957",
        "repo_full_name": "apache/spark",
        "pr_number": 50933,
        "pr_file": "common/sketch/src/test/java/org/apache/spark/util/sketch/TestSparkBloomFilter.java",
        "discussion_id": "2115283538",
        "commented_code": "@@ -0,0 +1,336 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.sketch;\n+\n+import org.junit.jupiter.api.*;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest.Values;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+@Disabled",
        "comment_created_at": "2025-06-08T11:12:46+00:00",
        "comment_author": "LuciferYang",
        "comment_body": "It would be excellent if the verification could be carried out within a relatively concise case. \r\nMoreover, it would be even better if the test case could be rewritten in Scala.",
        "pr_file_module": null
      },
      {
        "comment_id": "2149912132",
        "repo_full_name": "apache/spark",
        "pr_number": 50933,
        "pr_file": "common/sketch/src/test/java/org/apache/spark/util/sketch/TestSparkBloomFilter.java",
        "discussion_id": "2115283538",
        "commented_code": "@@ -0,0 +1,336 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.spark.util.sketch;\n+\n+import org.junit.jupiter.api.*;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest;\n+import org.junitpioneer.jupiter.cartesian.CartesianTest.Values;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+\n+@Disabled",
        "comment_created_at": "2025-06-16T12:38:07+00:00",
        "comment_author": "ishnagy",
        "comment_body": "Sorry for the late reply, I got a bit lost in the test configuration of the project, it took a while until I could come up with something reasonable to address the concerns.\r\n\r\n> Submitting a test case and directly disabling it is not an ideal approach. Why can't it undergo regular validation through GitHub Actions?\r\n\r\nI think I have already mentioned why I disabled the test in the first place, just for the sake of completeness repeating it here, indeed, the main reason is the impractical running time. If not parallelized properly, running all the slower testcases one after the other, the total running time could easily end up at dozens of hours. \r\n\r\nThe intention wasn't removing it from regular runs altogether, but to err on the safe side, and not to add an extra 10+ hours of runtime accidentally to e.g. pre-merge runs (supposedly on a fast path).\r\n\r\nFortunately, the individual cases can be run concurrently, so if there are enough threads to run the suite, even the slowest cases can complete in ~2.5h\r\n\r\n> Or can the scenarios in org.apache.spark.sql.execution.benchmark.BloomFilterBenchmark reflect the optimizations brought about by the current pr?\r\n\r\npossibly, yes, but I haven't managed to run the sql benchmarks, and we would still have to solve the problem of capturing a custom measure (error rate) in the benchmarks, instead of the currently supported (e.g. running time).\r\n\r\n> [...] (as per Spark's coding conventions, it should actually be named SparkBloomFilterSuite). [...]\r\nI have renamed the testclass, Idea now complains about:\r\n```\r\nTest class name 'SparkBloomFilterSuite' doesn't match regex '[A-Z][A-Za-z\\d]*Test(s|Case)?|Test[A-Z][A-Za-z\\d]*|IT(.*)|(.*) IT(Case)?' \r\n```\r\nother than that, everything seems functional.\r\n\r\nI would rather not remove the new tests, in the end, at the moment these are the only piece of logic that can demonstrate the error with the current implementation. Rewriting the tests in scala may be an option, but I'm not that comfortable with my scala skills, to confidently jump into that.",
        "pr_file_module": null
      }
    ]
  }
]