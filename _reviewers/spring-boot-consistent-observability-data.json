[
  {
    "discussion_id": "859025124",
    "pr_number": 30628,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ProjectMetricsAutoConfiguration.java",
    "created_at": "2022-04-26T18:27:50+00:00",
    "commented_code": "+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics;\n+\n+import java.util.function.Supplier;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.binder.MeterBinder;\n+\n+import org.springframework.boot.autoconfigure.AutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration;\n+import org.springframework.boot.info.BuildProperties;\n+import org.springframework.boot.info.GitProperties;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Auto-configuration that exposes Git and build information as metrics.\n+ *\n+ * @author Matthias Friedrich\n+ * @since 3.0.0\n+ */\n+@AutoConfiguration(after = { MetricsAutoConfiguration.class, CompositeMeterRegistryAutoConfiguration.class,\n+\t\tProjectInfoAutoConfiguration.class })\n+@ConditionalOnClass(MeterRegistry.class)\n+@ConditionalOnBean(MeterRegistry.class)\n+public class ProjectMetricsAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnBean(GitProperties.class)\n+\tpublic MeterBinder gitInfoMetrics(GitProperties props) {\n+\t\treturn (registry) -> {\n+\t\t\tGauge.Builder<Supplier<Number>> builder = Gauge.builder(\"git.info\", () -> 1L)\n+\t\t\t\t\t.description(\"Project Git information\").strongReference(true);\n+\n+\t\t\taddTag(builder, \"branch\", props.getBranch());\n+\t\t\taddTag(builder, \"id\", props.getShortCommitId());\n+\t\t\taddTag(builder, \"time\", props.getCommitTime());",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "859025124",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30628,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ProjectMetricsAutoConfiguration.java",
        "discussion_id": "859025124",
        "commented_code": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics;\n+\n+import java.util.function.Supplier;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.binder.MeterBinder;\n+\n+import org.springframework.boot.autoconfigure.AutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration;\n+import org.springframework.boot.info.BuildProperties;\n+import org.springframework.boot.info.GitProperties;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Auto-configuration that exposes Git and build information as metrics.\n+ *\n+ * @author Matthias Friedrich\n+ * @since 3.0.0\n+ */\n+@AutoConfiguration(after = { MetricsAutoConfiguration.class, CompositeMeterRegistryAutoConfiguration.class,\n+\t\tProjectInfoAutoConfiguration.class })\n+@ConditionalOnClass(MeterRegistry.class)\n+@ConditionalOnBean(MeterRegistry.class)\n+public class ProjectMetricsAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnBean(GitProperties.class)\n+\tpublic MeterBinder gitInfoMetrics(GitProperties props) {\n+\t\treturn (registry) -> {\n+\t\t\tGauge.Builder<Supplier<Number>> builder = Gauge.builder(\"git.info\", () -> 1L)\n+\t\t\t\t\t.description(\"Project Git information\").strongReference(true);\n+\n+\t\t\taddTag(builder, \"branch\", props.getBranch());\n+\t\t\taddTag(builder, \"id\", props.getShortCommitId());\n+\t\t\taddTag(builder, \"time\", props.getCommitTime());",
        "comment_created_at": "2022-04-26T18:27:50+00:00",
        "comment_author": "jonatan-ivanov",
        "comment_body": "How would you use this?\r\nI'm not sure this is very usable with other metrics but it might be useful for setting up an alert to detect apps that were build against a commit before a certain date (e.g.: we made a company wide change that everyone needs to adopt and if your last change is before this date you did not).",
        "pr_file_module": null
      },
      {
        "comment_id": "860110132",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30628,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ProjectMetricsAutoConfiguration.java",
        "discussion_id": "859025124",
        "commented_code": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics;\n+\n+import java.util.function.Supplier;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.binder.MeterBinder;\n+\n+import org.springframework.boot.autoconfigure.AutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration;\n+import org.springframework.boot.info.BuildProperties;\n+import org.springframework.boot.info.GitProperties;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Auto-configuration that exposes Git and build information as metrics.\n+ *\n+ * @author Matthias Friedrich\n+ * @since 3.0.0\n+ */\n+@AutoConfiguration(after = { MetricsAutoConfiguration.class, CompositeMeterRegistryAutoConfiguration.class,\n+\t\tProjectInfoAutoConfiguration.class })\n+@ConditionalOnClass(MeterRegistry.class)\n+@ConditionalOnBean(MeterRegistry.class)\n+public class ProjectMetricsAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnBean(GitProperties.class)\n+\tpublic MeterBinder gitInfoMetrics(GitProperties props) {\n+\t\treturn (registry) -> {\n+\t\t\tGauge.Builder<Supplier<Number>> builder = Gauge.builder(\"git.info\", () -> 1L)\n+\t\t\t\t\t.description(\"Project Git information\").strongReference(true);\n+\n+\t\t\taddTag(builder, \"branch\", props.getBranch());\n+\t\t\taddTag(builder, \"id\", props.getShortCommitId());\n+\t\t\taddTag(builder, \"time\", props.getCommitTime());",
        "comment_created_at": "2022-04-27T18:09:16+00:00",
        "comment_author": "mafr",
        "comment_body": "We found this very handy on Grafana dashboards in development systems. Product owners often asked us whether a specific branch (or yesterday's fix) has already been deployed. I haven't used the commit time it in any type of reporting query yet.\r\n\r\nAs for why these tags and not others: For consistency reasons I decided to expose the exact information that Actuator's Info endpoint provides.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "859041317",
    "pr_number": 30628,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ProjectMetricsAutoConfiguration.java",
    "created_at": "2022-04-26T18:48:43+00:00",
    "commented_code": "+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics;\n+\n+import java.util.function.Supplier;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.binder.MeterBinder;\n+\n+import org.springframework.boot.autoconfigure.AutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration;\n+import org.springframework.boot.info.BuildProperties;\n+import org.springframework.boot.info.GitProperties;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Auto-configuration that exposes Git and build information as metrics.\n+ *\n+ * @author Matthias Friedrich\n+ * @since 3.0.0\n+ */\n+@AutoConfiguration(after = { MetricsAutoConfiguration.class, CompositeMeterRegistryAutoConfiguration.class,\n+\t\tProjectInfoAutoConfiguration.class })\n+@ConditionalOnClass(MeterRegistry.class)\n+@ConditionalOnBean(MeterRegistry.class)\n+public class ProjectMetricsAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnBean(GitProperties.class)\n+\tpublic MeterBinder gitInfoMetrics(GitProperties props) {\n+\t\treturn (registry) -> {\n+\t\t\tGauge.Builder<Supplier<Number>> builder = Gauge.builder(\"git.info\", () -> 1L)\n+\t\t\t\t\t.description(\"Project Git information\").strongReference(true);\n+\n+\t\t\taddTag(builder, \"branch\", props.getBranch());\n+\t\t\taddTag(builder, \"id\", props.getShortCommitId());\n+\t\t\taddTag(builder, \"time\", props.getCommitTime());\n+\n+\t\t\tbuilder.register(registry);\n+\t\t};\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnBean(BuildProperties.class)\n+\tpublic MeterBinder buildInfoMetrics(BuildProperties props) {\n+\t\treturn (registry) -> {\n+\t\t\tGauge.Builder<Supplier<Number>> builder = Gauge.builder(\"build.info\", () -> 1L)\n+\t\t\t\t\t.description(\"Project build information\").strongReference(true);\n+\n+\t\t\taddTag(builder, \"name\", props.getName());\n+\t\t\taddTag(builder, \"artifact\", props.getArtifact());\n+\t\t\taddTag(builder, \"group\", props.getGroup());\n+\t\t\taddTag(builder, \"version\", props.getVersion());\n+\t\t\taddTag(builder, \"time\", props.getTime());\n+\n+\t\t\tbuilder.register(registry);\n+\t\t};\n+\t}\n+\n+\tprivate static void addTag(Gauge.Builder<Supplier<Number>> builder, String name, Object value) {\n+\t\tif (value != null) {",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "859041317",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30628,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ProjectMetricsAutoConfiguration.java",
        "discussion_id": "859041317",
        "commented_code": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics;\n+\n+import java.util.function.Supplier;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.binder.MeterBinder;\n+\n+import org.springframework.boot.autoconfigure.AutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration;\n+import org.springframework.boot.info.BuildProperties;\n+import org.springframework.boot.info.GitProperties;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Auto-configuration that exposes Git and build information as metrics.\n+ *\n+ * @author Matthias Friedrich\n+ * @since 3.0.0\n+ */\n+@AutoConfiguration(after = { MetricsAutoConfiguration.class, CompositeMeterRegistryAutoConfiguration.class,\n+\t\tProjectInfoAutoConfiguration.class })\n+@ConditionalOnClass(MeterRegistry.class)\n+@ConditionalOnBean(MeterRegistry.class)\n+public class ProjectMetricsAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnBean(GitProperties.class)\n+\tpublic MeterBinder gitInfoMetrics(GitProperties props) {\n+\t\treturn (registry) -> {\n+\t\t\tGauge.Builder<Supplier<Number>> builder = Gauge.builder(\"git.info\", () -> 1L)\n+\t\t\t\t\t.description(\"Project Git information\").strongReference(true);\n+\n+\t\t\taddTag(builder, \"branch\", props.getBranch());\n+\t\t\taddTag(builder, \"id\", props.getShortCommitId());\n+\t\t\taddTag(builder, \"time\", props.getCommitTime());\n+\n+\t\t\tbuilder.register(registry);\n+\t\t};\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnBean(BuildProperties.class)\n+\tpublic MeterBinder buildInfoMetrics(BuildProperties props) {\n+\t\treturn (registry) -> {\n+\t\t\tGauge.Builder<Supplier<Number>> builder = Gauge.builder(\"build.info\", () -> 1L)\n+\t\t\t\t\t.description(\"Project build information\").strongReference(true);\n+\n+\t\t\taddTag(builder, \"name\", props.getName());\n+\t\t\taddTag(builder, \"artifact\", props.getArtifact());\n+\t\t\taddTag(builder, \"group\", props.getGroup());\n+\t\t\taddTag(builder, \"version\", props.getVersion());\n+\t\t\taddTag(builder, \"time\", props.getTime());\n+\n+\t\t\tbuilder.register(registry);\n+\t\t};\n+\t}\n+\n+\tprivate static void addTag(Gauge.Builder<Supplier<Number>> builder, String name, Object value) {\n+\t\tif (value != null) {",
        "comment_created_at": "2022-04-26T18:48:43+00:00",
        "comment_author": "jonatan-ivanov",
        "comment_body": "This can be a little dangerous. Let's say one app has the all the git info, the other does not. If that happens you will end-up with the same metric name but different set of tags. This can lead to all sorts of issues and some backends does not or does not like to support this (e.g.: [prometheus](https://github.com/prometheus/client_java/issues/696#issuecomment-920353692)). I would return a default value like `unknown` or `N/A` if the value is missing but I would always want to have the same set of keys.\r\n\r\nHere's is an example (ServiceA has all the details, ServiceB only has the commit id)\r\n```\r\ngit_info{service=\"serviceA\",branch=\"main\",id=\"cafecafe\",time=\"2022-04-26T18:39:18\"} 1.0\r\ngit_info{service=\"serviceB\",id=\"deadbeef\"} 1.0\r\n```\r\nThis can be problematic (see above), my proposal instead is:\r\n```\r\ngit_info{service=\"serviceA\",branch=\"main\",id=\"cafecafe\",time=\"2022-04-26T18:39:18\"} 1.0\r\ngit_info{service=\"serviceB\",branch=\"unknown\",id=\"deadbeef\",time=\"unknown\"} 1.0\r\n```\r\n\r\nI have a sad but real-life example for this. If you use heroku in a way that it will build your app when you deploy, heroku removes the .git folder so the git plugin will fail. You can [generate](https://github.com/jonatan-ivanov/resourceater/blob/bd0b061c8d70fd3b8330ed4430491cc3a439f2c4/build.gradle#L69) `git.properties` on your own but heroku will only tell you the commit id so the git info will be [incomplete](https://resourceater.herokuapp.com/actuator/info) (this page might take some time to load).",
        "pr_file_module": null
      },
      {
        "comment_id": "859048533",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30628,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ProjectMetricsAutoConfiguration.java",
        "discussion_id": "859041317",
        "commented_code": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics;\n+\n+import java.util.function.Supplier;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.binder.MeterBinder;\n+\n+import org.springframework.boot.autoconfigure.AutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration;\n+import org.springframework.boot.info.BuildProperties;\n+import org.springframework.boot.info.GitProperties;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Auto-configuration that exposes Git and build information as metrics.\n+ *\n+ * @author Matthias Friedrich\n+ * @since 3.0.0\n+ */\n+@AutoConfiguration(after = { MetricsAutoConfiguration.class, CompositeMeterRegistryAutoConfiguration.class,\n+\t\tProjectInfoAutoConfiguration.class })\n+@ConditionalOnClass(MeterRegistry.class)\n+@ConditionalOnBean(MeterRegistry.class)\n+public class ProjectMetricsAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnBean(GitProperties.class)\n+\tpublic MeterBinder gitInfoMetrics(GitProperties props) {\n+\t\treturn (registry) -> {\n+\t\t\tGauge.Builder<Supplier<Number>> builder = Gauge.builder(\"git.info\", () -> 1L)\n+\t\t\t\t\t.description(\"Project Git information\").strongReference(true);\n+\n+\t\t\taddTag(builder, \"branch\", props.getBranch());\n+\t\t\taddTag(builder, \"id\", props.getShortCommitId());\n+\t\t\taddTag(builder, \"time\", props.getCommitTime());\n+\n+\t\t\tbuilder.register(registry);\n+\t\t};\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnBean(BuildProperties.class)\n+\tpublic MeterBinder buildInfoMetrics(BuildProperties props) {\n+\t\treturn (registry) -> {\n+\t\t\tGauge.Builder<Supplier<Number>> builder = Gauge.builder(\"build.info\", () -> 1L)\n+\t\t\t\t\t.description(\"Project build information\").strongReference(true);\n+\n+\t\t\taddTag(builder, \"name\", props.getName());\n+\t\t\taddTag(builder, \"artifact\", props.getArtifact());\n+\t\t\taddTag(builder, \"group\", props.getGroup());\n+\t\t\taddTag(builder, \"version\", props.getVersion());\n+\t\t\taddTag(builder, \"time\", props.getTime());\n+\n+\t\t\tbuilder.register(registry);\n+\t\t};\n+\t}\n+\n+\tprivate static void addTag(Gauge.Builder<Supplier<Number>> builder, String name, Object value) {\n+\t\tif (value != null) {",
        "comment_created_at": "2022-04-26T18:57:39+00:00",
        "comment_author": "jonatan-ivanov",
        "comment_body": "If you do this, you can also simplify things above.\r\n\r\n```java\r\nGauge.builder(\"git.info\", () -> 1L)\r\n        .description(\"Project Git information\").strongReference(true);\r\n        .tag(\"branch\", getOrDefault(props.getBranch()));\r\n\t.tag(\"id\", getOrDefault(props.getShortCommitId()));\r\n\t.tag(\"time\", getOrDefault(props.getCommitTime()));\r\n\t.register(registry);\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "860111144",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30628,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/ProjectMetricsAutoConfiguration.java",
        "discussion_id": "859041317",
        "commented_code": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics;\n+\n+import java.util.function.Supplier;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.binder.MeterBinder;\n+\n+import org.springframework.boot.autoconfigure.AutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration;\n+import org.springframework.boot.info.BuildProperties;\n+import org.springframework.boot.info.GitProperties;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * Auto-configuration that exposes Git and build information as metrics.\n+ *\n+ * @author Matthias Friedrich\n+ * @since 3.0.0\n+ */\n+@AutoConfiguration(after = { MetricsAutoConfiguration.class, CompositeMeterRegistryAutoConfiguration.class,\n+\t\tProjectInfoAutoConfiguration.class })\n+@ConditionalOnClass(MeterRegistry.class)\n+@ConditionalOnBean(MeterRegistry.class)\n+public class ProjectMetricsAutoConfiguration {\n+\n+\t@Bean\n+\t@ConditionalOnBean(GitProperties.class)\n+\tpublic MeterBinder gitInfoMetrics(GitProperties props) {\n+\t\treturn (registry) -> {\n+\t\t\tGauge.Builder<Supplier<Number>> builder = Gauge.builder(\"git.info\", () -> 1L)\n+\t\t\t\t\t.description(\"Project Git information\").strongReference(true);\n+\n+\t\t\taddTag(builder, \"branch\", props.getBranch());\n+\t\t\taddTag(builder, \"id\", props.getShortCommitId());\n+\t\t\taddTag(builder, \"time\", props.getCommitTime());\n+\n+\t\t\tbuilder.register(registry);\n+\t\t};\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnBean(BuildProperties.class)\n+\tpublic MeterBinder buildInfoMetrics(BuildProperties props) {\n+\t\treturn (registry) -> {\n+\t\t\tGauge.Builder<Supplier<Number>> builder = Gauge.builder(\"build.info\", () -> 1L)\n+\t\t\t\t\t.description(\"Project build information\").strongReference(true);\n+\n+\t\t\taddTag(builder, \"name\", props.getName());\n+\t\t\taddTag(builder, \"artifact\", props.getArtifact());\n+\t\t\taddTag(builder, \"group\", props.getGroup());\n+\t\t\taddTag(builder, \"version\", props.getVersion());\n+\t\t\taddTag(builder, \"time\", props.getTime());\n+\n+\t\t\tbuilder.register(registry);\n+\t\t};\n+\t}\n+\n+\tprivate static void addTag(Gauge.Builder<Supplier<Number>> builder, String name, Object value) {\n+\t\tif (value != null) {",
        "comment_created_at": "2022-04-27T18:10:34+00:00",
        "comment_author": "mafr",
        "comment_body": "Sounds good to me!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1546268504",
    "pr_number": 40023,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/tracing/prometheus/PrometheusExemplarsAutoConfigurationTests.java",
    "created_at": "2024-04-01T12:21:16+00:00",
    "commented_code": ".map((matchResult) -> new TraceInfo(matchResult.group(2), matchResult.group(1)))\n \t\t\t\t.findFirst();\n \n-\t\t\tOptional<TraceInfo> counterTraceInfo = openMetricsOutput.lines()\n-\t\t\t\t.filter((line) -> line.contains(\"test_observation_seconds_count\") && line.contains(\"span_id\"))\n-\t\t\t\t.map(COUNTER_TRACE_INFO_PATTERN::matcher)\n-\t\t\t\t.flatMap(Matcher::results)\n-\t\t\t\t.map((matchResult) -> new TraceInfo(matchResult.group(2), matchResult.group(1)))\n-\t\t\t\t.findFirst();\n-\n-\t\t\tassertThat(bucketTraceInfo).isNotEmpty().contains(counterTraceInfo.orElse(null));\n+\t\t\tassertThat(bucketTraceInfo).isNotEmpty();\n \t\t});\n \t}\n \n+\t@Test\n+\tvoid prometheusOpenMetricsOutputCanBeConfiguredToContainExemplarsOnHistogramCount() {\n+\t\tthis.contextRunner.withSystemProperties(\"io.prometheus.exporter.exemplarsOnAllMetricTypes=true\")",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1546268504",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 40023,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/tracing/prometheus/PrometheusExemplarsAutoConfigurationTests.java",
        "discussion_id": "1546268504",
        "commented_code": "@@ -105,24 +105,51 @@ void prometheusOpenMetricsOutputShouldContainExemplars() {\n \t\t\t\t.map((matchResult) -> new TraceInfo(matchResult.group(2), matchResult.group(1)))\n \t\t\t\t.findFirst();\n \n-\t\t\tOptional<TraceInfo> counterTraceInfo = openMetricsOutput.lines()\n-\t\t\t\t.filter((line) -> line.contains(\"test_observation_seconds_count\") && line.contains(\"span_id\"))\n-\t\t\t\t.map(COUNTER_TRACE_INFO_PATTERN::matcher)\n-\t\t\t\t.flatMap(Matcher::results)\n-\t\t\t\t.map((matchResult) -> new TraceInfo(matchResult.group(2), matchResult.group(1)))\n-\t\t\t\t.findFirst();\n-\n-\t\t\tassertThat(bucketTraceInfo).isNotEmpty().contains(counterTraceInfo.orElse(null));\n+\t\t\tassertThat(bucketTraceInfo).isNotEmpty();\n \t\t});\n \t}\n \n+\t@Test\n+\tvoid prometheusOpenMetricsOutputCanBeConfiguredToContainExemplarsOnHistogramCount() {\n+\t\tthis.contextRunner.withSystemProperties(\"io.prometheus.exporter.exemplarsOnAllMetricTypes=true\")",
        "comment_created_at": "2024-04-01T12:21:16+00:00",
        "comment_author": "shakuzen",
        "comment_body": "The Prometheus client does not add exemplars to the count of a histogram by default. This configuration is needed to restore that behavior that Micrometer had previously. We are in discussion about a way to expose this configuration via Micrometer. You can see more about it in the Prometheus client documentation: https://prometheus.github.io/client_java/config/config/",
        "pr_file_module": null
      },
      {
        "comment_id": "1553149658",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 40023,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/tracing/prometheus/PrometheusExemplarsAutoConfigurationTests.java",
        "discussion_id": "1546268504",
        "commented_code": "@@ -105,24 +105,51 @@ void prometheusOpenMetricsOutputShouldContainExemplars() {\n \t\t\t\t.map((matchResult) -> new TraceInfo(matchResult.group(2), matchResult.group(1)))\n \t\t\t\t.findFirst();\n \n-\t\t\tOptional<TraceInfo> counterTraceInfo = openMetricsOutput.lines()\n-\t\t\t\t.filter((line) -> line.contains(\"test_observation_seconds_count\") && line.contains(\"span_id\"))\n-\t\t\t\t.map(COUNTER_TRACE_INFO_PATTERN::matcher)\n-\t\t\t\t.flatMap(Matcher::results)\n-\t\t\t\t.map((matchResult) -> new TraceInfo(matchResult.group(2), matchResult.group(1)))\n-\t\t\t\t.findFirst();\n-\n-\t\t\tassertThat(bucketTraceInfo).isNotEmpty().contains(counterTraceInfo.orElse(null));\n+\t\t\tassertThat(bucketTraceInfo).isNotEmpty();\n \t\t});\n \t}\n \n+\t@Test\n+\tvoid prometheusOpenMetricsOutputCanBeConfiguredToContainExemplarsOnHistogramCount() {\n+\t\tthis.contextRunner.withSystemProperties(\"io.prometheus.exporter.exemplarsOnAllMetricTypes=true\")",
        "comment_created_at": "2024-04-05T08:04:24+00:00",
        "comment_author": "shakuzen",
        "comment_body": "Since https://github.com/micrometer-metrics/micrometer/pull/4921 and the corresponding updates I made to this PR in https://github.com/spring-projects/spring-boot/pull/40023/commits/63a3d2a4ee413f8e24faa25735d284029057f19c things are back to having exemplars on the histogram count by default (when using Micrometer). Configuration can be done via Micrometer's PrometheusConfig and consequently Boot's PrometheusProperties now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1204761447",
    "pr_number": 35611,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/BraveAutoConfiguration.java",
    "created_at": "2023-05-24T21:08:11+00:00",
    "commented_code": "}\n \n+\t/**\n+\t * Factory for {@link Factory propagation factories}.\n+\t */\n+\tprivate static class PropagationFactoryFactory {\n+\n+\t\tprivate PropagationFactoryFactory() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Creates a new B3 propagation factory.\n+\t\t * @return B3 propagation factory.\n+\t\t */\n+\t\tprivate static Factory b3() {\n+\t\t\treturn B3Propagation.newFactoryBuilder().injectFormat(B3Propagation.Format.SINGLE_NO_PARENT).build();",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1204761447",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35611,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/BraveAutoConfiguration.java",
        "discussion_id": "1204761447",
        "commented_code": "@@ -252,4 +255,59 @@ ScopeDecorator correlationScopeDecorator(CorrelationScopeDecorator.Builder build\n \n \t}\n \n+\t/**\n+\t * Factory for {@link Factory propagation factories}.\n+\t */\n+\tprivate static class PropagationFactoryFactory {\n+\n+\t\tprivate PropagationFactoryFactory() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Creates a new B3 propagation factory.\n+\t\t * @return B3 propagation factory.\n+\t\t */\n+\t\tprivate static Factory b3() {\n+\t\t\treturn B3Propagation.newFactoryBuilder().injectFormat(B3Propagation.Format.SINGLE_NO_PARENT).build();",
        "comment_created_at": "2023-05-24T21:08:11+00:00",
        "comment_author": "jonatan-ivanov",
        "comment_body": "Just a note for the docs: I would call it out that W3C and B3 single is used by default, if users want B3 multi instead (or both?), they need to create their own `CompositePropagationFactory` instance and `BaggagePropagation.FactoryBuilder` bean.",
        "pr_file_module": null
      },
      {
        "comment_id": "1205293578",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35611,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/BraveAutoConfiguration.java",
        "discussion_id": "1204761447",
        "commented_code": "@@ -252,4 +255,59 @@ ScopeDecorator correlationScopeDecorator(CorrelationScopeDecorator.Builder build\n \n \t}\n \n+\t/**\n+\t * Factory for {@link Factory propagation factories}.\n+\t */\n+\tprivate static class PropagationFactoryFactory {\n+\n+\t\tprivate PropagationFactoryFactory() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Creates a new B3 propagation factory.\n+\t\t * @return B3 propagation factory.\n+\t\t */\n+\t\tprivate static Factory b3() {\n+\t\t\treturn B3Propagation.newFactoryBuilder().injectFormat(B3Propagation.Format.SINGLE_NO_PARENT).build();",
        "comment_created_at": "2023-05-25T10:05:03+00:00",
        "comment_author": "shakuzen",
        "comment_body": "I wonder if it wouldn't be better for compatibility to check for B3 multi but check it last (so it only happens when other, higher precedent formats aren't present). Unless the concern is about the added cost of trying to extract b3 multi when no trace context is present. Perhaps then we could measure the cost. What do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "1205926507",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35611,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/BraveAutoConfiguration.java",
        "discussion_id": "1204761447",
        "commented_code": "@@ -252,4 +255,59 @@ ScopeDecorator correlationScopeDecorator(CorrelationScopeDecorator.Builder build\n \n \t}\n \n+\t/**\n+\t * Factory for {@link Factory propagation factories}.\n+\t */\n+\tprivate static class PropagationFactoryFactory {\n+\n+\t\tprivate PropagationFactoryFactory() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Creates a new B3 propagation factory.\n+\t\t * @return B3 propagation factory.\n+\t\t */\n+\t\tprivate static Factory b3() {\n+\t\t\treturn B3Propagation.newFactoryBuilder().injectFormat(B3Propagation.Format.SINGLE_NO_PARENT).build();",
        "comment_created_at": "2023-05-25T19:27:18+00:00",
        "comment_author": "jonatan-ivanov",
        "comment_body": "For compatibility, it would be definitely better. From cost perspective and trying to move away from B3 multi, it would not. I _assume_ the cost would be minimal since this should be just a map lookup.\r\nIf we do this, should not we also support it on the output (i.e.: `B3_SINGE` and `B3_MULTI`) too?",
        "pr_file_module": null
      },
      {
        "comment_id": "1209891514",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35611,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/BraveAutoConfiguration.java",
        "discussion_id": "1204761447",
        "commented_code": "@@ -252,4 +255,59 @@ ScopeDecorator correlationScopeDecorator(CorrelationScopeDecorator.Builder build\n \n \t}\n \n+\t/**\n+\t * Factory for {@link Factory propagation factories}.\n+\t */\n+\tprivate static class PropagationFactoryFactory {\n+\n+\t\tprivate PropagationFactoryFactory() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Creates a new B3 propagation factory.\n+\t\t * @return B3 propagation factory.\n+\t\t */\n+\t\tprivate static Factory b3() {\n+\t\t\treturn B3Propagation.newFactoryBuilder().injectFormat(B3Propagation.Format.SINGLE_NO_PARENT).build();",
        "comment_created_at": "2023-05-30T08:13:38+00:00",
        "comment_author": "shakuzen",
        "comment_body": "Yeah, probably. I think `B3` for single and `B3_MULTI` make sense.",
        "pr_file_module": null
      },
      {
        "comment_id": "1209907238",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35611,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/BraveAutoConfiguration.java",
        "discussion_id": "1204761447",
        "commented_code": "@@ -252,4 +255,59 @@ ScopeDecorator correlationScopeDecorator(CorrelationScopeDecorator.Builder build\n \n \t}\n \n+\t/**\n+\t * Factory for {@link Factory propagation factories}.\n+\t */\n+\tprivate static class PropagationFactoryFactory {\n+\n+\t\tprivate PropagationFactoryFactory() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Creates a new B3 propagation factory.\n+\t\t * @return B3 propagation factory.\n+\t\t */\n+\t\tprivate static Factory b3() {\n+\t\t\treturn B3Propagation.newFactoryBuilder().injectFormat(B3Propagation.Format.SINGLE_NO_PARENT).build();",
        "comment_created_at": "2023-05-30T08:23:38+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "Great, thanks. I'll add `B3` for B3 single and `B3_MULTI` for B3 multi.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1205284385",
    "pr_number": 35611,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/BraveAutoConfiguration.java",
    "created_at": "2023-05-25T09:56:43+00:00",
    "commented_code": "@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tFactory propagationFactory(TracingProperties tracing) {\n-\t\t\treturn switch (tracing.getPropagation().getType()) {\n-\t\t\t\tcase B3 ->\n-\t\t\t\t\tB3Propagation.newFactoryBuilder().injectFormat(B3Propagation.Format.SINGLE_NO_PARENT).build();\n-\t\t\t\tcase W3C -> new W3CPropagation();\n-\t\t\t};\n+\t\tFactory propagationFactory(TracingProperties properties) {\n+\t\t\tIterable<Factory> injectorFactories = PropagationFactoryFactory\n+\t\t\t\t.factoriesFor(properties.getPropagation().getType());\n+\t\t\tIterable<Factory> extractorFactories = PropagationFactoryFactory.factoriesFor(PropagationType.values());",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1205284385",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35611,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/BraveAutoConfiguration.java",
        "discussion_id": "1205284385",
        "commented_code": "@@ -169,12 +173,11 @@ static class BraveNoBaggageConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tFactory propagationFactory(TracingProperties tracing) {\n-\t\t\treturn switch (tracing.getPropagation().getType()) {\n-\t\t\t\tcase B3 ->\n-\t\t\t\t\tB3Propagation.newFactoryBuilder().injectFormat(B3Propagation.Format.SINGLE_NO_PARENT).build();\n-\t\t\t\tcase W3C -> new W3CPropagation();\n-\t\t\t};\n+\t\tFactory propagationFactory(TracingProperties properties) {\n+\t\t\tIterable<Factory> injectorFactories = PropagationFactoryFactory\n+\t\t\t\t.factoriesFor(properties.getPropagation().getType());\n+\t\t\tIterable<Factory> extractorFactories = PropagationFactoryFactory.factoriesFor(PropagationType.values());",
        "comment_created_at": "2023-05-25T09:56:43+00:00",
        "comment_author": "shakuzen",
        "comment_body": "We want to be specific about the behavior by which we will extract a trace context. Currently this uses the declaration order of the enum and extracts from the first format found (if I'm reading the code correctly). Is that the order we want (B3 then W3C)?",
        "pr_file_module": null
      },
      {
        "comment_id": "1209908664",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35611,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/BraveAutoConfiguration.java",
        "discussion_id": "1205284385",
        "commented_code": "@@ -169,12 +173,11 @@ static class BraveNoBaggageConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tFactory propagationFactory(TracingProperties tracing) {\n-\t\t\treturn switch (tracing.getPropagation().getType()) {\n-\t\t\t\tcase B3 ->\n-\t\t\t\t\tB3Propagation.newFactoryBuilder().injectFormat(B3Propagation.Format.SINGLE_NO_PARENT).build();\n-\t\t\t\tcase W3C -> new W3CPropagation();\n-\t\t\t};\n+\t\tFactory propagationFactory(TracingProperties properties) {\n+\t\t\tIterable<Factory> injectorFactories = PropagationFactoryFactory\n+\t\t\t\t.factoriesFor(properties.getPropagation().getType());\n+\t\t\tIterable<Factory> extractorFactories = PropagationFactoryFactory.factoriesFor(PropagationType.values());",
        "comment_created_at": "2023-05-30T08:24:24+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "Not sure, I could make that more explicit. What order would be sensible?",
        "pr_file_module": null
      },
      {
        "comment_id": "1209936030",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35611,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/BraveAutoConfiguration.java",
        "discussion_id": "1205284385",
        "commented_code": "@@ -169,12 +173,11 @@ static class BraveNoBaggageConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tFactory propagationFactory(TracingProperties tracing) {\n-\t\t\treturn switch (tracing.getPropagation().getType()) {\n-\t\t\t\tcase B3 ->\n-\t\t\t\t\tB3Propagation.newFactoryBuilder().injectFormat(B3Propagation.Format.SINGLE_NO_PARENT).build();\n-\t\t\t\tcase W3C -> new W3CPropagation();\n-\t\t\t};\n+\t\tFactory propagationFactory(TracingProperties properties) {\n+\t\t\tIterable<Factory> injectorFactories = PropagationFactoryFactory\n+\t\t\t\t.factoriesFor(properties.getPropagation().getType());\n+\t\t\tIterable<Factory> extractorFactories = PropagationFactoryFactory.factoriesFor(PropagationType.values());",
        "comment_created_at": "2023-05-30T08:41:42+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "I'll make this more explicit. Our extraction order will be:\r\n\r\n1. `W3C` (as this is the format we produce by default)\r\n2. `B3` (single)\r\n3. `B3_MULTI`\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1205290111",
    "pr_number": 35611,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/BraveAutoConfiguration.java",
    "created_at": "2023-05-25T10:01:47+00:00",
    "commented_code": "}\n \n+\t/**\n+\t * Factory for {@link Factory propagation factories}.\n+\t */\n+\tprivate static class PropagationFactoryFactory {\n+\n+\t\tprivate PropagationFactoryFactory() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Creates a new B3 propagation factory.\n+\t\t * @return B3 propagation factory.\n+\t\t */\n+\t\tprivate static Factory b3() {\n+\t\t\treturn B3Propagation.newFactoryBuilder().injectFormat(B3Propagation.Format.SINGLE_NO_PARENT).build();",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1205290111",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35611,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/BraveAutoConfiguration.java",
        "discussion_id": "1205290111",
        "commented_code": "@@ -252,4 +255,59 @@ ScopeDecorator correlationScopeDecorator(CorrelationScopeDecorator.Builder build\n \n \t}\n \n+\t/**\n+\t * Factory for {@link Factory propagation factories}.\n+\t */\n+\tprivate static class PropagationFactoryFactory {\n+\n+\t\tprivate PropagationFactoryFactory() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Creates a new B3 propagation factory.\n+\t\t * @return B3 propagation factory.\n+\t\t */\n+\t\tprivate static Factory b3() {\n+\t\t\treturn B3Propagation.newFactoryBuilder().injectFormat(B3Propagation.Format.SINGLE_NO_PARENT).build();",
        "comment_created_at": "2023-05-25T10:01:47+00:00",
        "comment_author": "shakuzen",
        "comment_body": "I'm assuming this was taken from existing code where users haven't been complaining about the choice, but it stood out to me the choice of `SINGLE_NO_PARENT` which was as far as I can tell meant for specific cases where it was known the parent span wasn't needed (example in the javadoc is messaging). As opposed to the more generally usable (but slightly more costly) `B3Propagation.Format.SINGLE`. Does the no-parent variant not cause issues for downstream services who have `supportsJoin` as true?",
        "pr_file_module": null
      },
      {
        "comment_id": "1209916639",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35611,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/BraveAutoConfiguration.java",
        "discussion_id": "1205290111",
        "commented_code": "@@ -252,4 +255,59 @@ ScopeDecorator correlationScopeDecorator(CorrelationScopeDecorator.Builder build\n \n \t}\n \n+\t/**\n+\t * Factory for {@link Factory propagation factories}.\n+\t */\n+\tprivate static class PropagationFactoryFactory {\n+\n+\t\tprivate PropagationFactoryFactory() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Creates a new B3 propagation factory.\n+\t\t * @return B3 propagation factory.\n+\t\t */\n+\t\tprivate static Factory b3() {\n+\t\t\treturn B3Propagation.newFactoryBuilder().injectFormat(B3Propagation.Format.SINGLE_NO_PARENT).build();",
        "comment_created_at": "2023-05-30T08:29:28+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "We agreed to change that to `SINGLE`, but only in Boot 3.2.",
        "pr_file_module": null
      },
      {
        "comment_id": "1209939480",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35611,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/BraveAutoConfiguration.java",
        "discussion_id": "1205290111",
        "commented_code": "@@ -252,4 +255,59 @@ ScopeDecorator correlationScopeDecorator(CorrelationScopeDecorator.Builder build\n \n \t}\n \n+\t/**\n+\t * Factory for {@link Factory propagation factories}.\n+\t */\n+\tprivate static class PropagationFactoryFactory {\n+\n+\t\tprivate PropagationFactoryFactory() {\n+\t\t}\n+\n+\t\t/**\n+\t\t * Creates a new B3 propagation factory.\n+\t\t * @return B3 propagation factory.\n+\t\t */\n+\t\tprivate static Factory b3() {\n+\t\t\treturn B3Propagation.newFactoryBuilder().injectFormat(B3Propagation.Format.SINGLE_NO_PARENT).build();",
        "comment_created_at": "2023-05-30T08:43:54+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "FTR: https://github.com/spring-projects/spring-boot/issues/35674",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "906015256",
    "pr_number": 31516,
    "pr_file": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java",
    "created_at": "2022-06-24T12:28:59+00:00",
    "commented_code": "Iterable<Tag> tags = this.tagsProvider.httpRequestTags(exchange, cause);\n \t\t\tlong duration = System.nanoTime() - start;\n \t\t\tAutoTimer.apply(this.autoTimer, this.metricName, annotations,\n-\t\t\t\t\t(builder) -> builder.tags(tags).register(this.registry).record(duration, TimeUnit.NANOSECONDS));\n+\t\t\t\t\t(builder) -> builder.description(\"Duration of requests made to HTTP Server\").tags(tags)",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "906015256",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 31516,
        "pr_file": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java",
        "discussion_id": "906015256",
        "commented_code": "@@ -109,7 +109,8 @@ private void record(ServerWebExchange exchange, Throwable cause, long start) {\n \t\t\tIterable<Tag> tags = this.tagsProvider.httpRequestTags(exchange, cause);\n \t\t\tlong duration = System.nanoTime() - start;\n \t\t\tAutoTimer.apply(this.autoTimer, this.metricName, annotations,\n-\t\t\t\t\t(builder) -> builder.tags(tags).register(this.registry).record(duration, TimeUnit.NANOSECONDS));\n+\t\t\t\t\t(builder) -> builder.description(\"Duration of requests made to HTTP Server\").tags(tags)",
        "comment_created_at": "2022-06-24T12:28:59+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I wonder if something like \"Duration of HTTP server request handling\" would be better here? To me, it makes it clearer that the metric is for a server handling a request from a client rather than a client making a request to a server.",
        "pr_file_module": null
      },
      {
        "comment_id": "906716487",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 31516,
        "pr_file": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java",
        "discussion_id": "906015256",
        "commented_code": "@@ -109,7 +109,8 @@ private void record(ServerWebExchange exchange, Throwable cause, long start) {\n \t\t\tIterable<Tag> tags = this.tagsProvider.httpRequestTags(exchange, cause);\n \t\t\tlong duration = System.nanoTime() - start;\n \t\t\tAutoTimer.apply(this.autoTimer, this.metricName, annotations,\n-\t\t\t\t\t(builder) -> builder.tags(tags).register(this.registry).record(duration, TimeUnit.NANOSECONDS));\n+\t\t\t\t\t(builder) -> builder.description(\"Duration of requests made to HTTP Server\").tags(tags)",
        "comment_created_at": "2022-06-25T19:29:05+00:00",
        "comment_author": "jakubskalak",
        "comment_body": "Yeah, definitely I agree.",
        "pr_file_module": null
      }
    ]
  }
]