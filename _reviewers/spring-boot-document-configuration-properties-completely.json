[
  {
    "discussion_id": "1749796069",
    "pr_number": 42180,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/pulsar/PulsarProperties.java",
    "created_at": "2024-09-09T08:20:32+00:00",
    "commented_code": "this.readCompacted = readCompacted;\n \t\t}\n \n+\t\tpublic Startup getStartup() {\n+\t\t\treturn this.startup;\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class Startup {\n+\n+\t\t/**\n+\t\t * The max time to wait for the container to start.\n+\t\t */\n+\t\tprivate Duration timeout;",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1749796069",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 42180,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/pulsar/PulsarProperties.java",
        "discussion_id": "1749796069",
        "commented_code": "@@ -916,6 +930,53 @@ public void setReadCompacted(boolean readCompacted) {\n \t\t\tthis.readCompacted = readCompacted;\n \t\t}\n \n+\t\tpublic Startup getStartup() {\n+\t\t\treturn this.startup;\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class Startup {\n+\n+\t\t/**\n+\t\t * The max time to wait for the container to start.\n+\t\t */\n+\t\tprivate Duration timeout;",
        "comment_created_at": "2024-09-09T08:20:32+00:00",
        "comment_author": "snicoll",
        "comment_body": "Is there a default for this property? If so I think we should use the opportunity to set the default so that it's documented, and very in a test that it's consistent in case it changes.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1507243424",
    "pr_number": 39797,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/web/SpringDataWebProperties.java",
    "created_at": "2024-02-29T09:08:03+00:00",
    "commented_code": "*/\n \t\tprivate int maxPageSize = 2000;\n \n+\t\t/**\n+\t\t * Configures how to render {@link org.springframework.data.domain.PageImpl}\n+\t\t * instances. Defaults to {@link PageSerializationMode#DIRECT} for backward\n+\t\t * compatibility reasons. Prefer explicitly setting this to\n+\t\t * {@link PageSerializationMode#VIA_DTO}, or manually convert\n+\t\t * {@link org.springframework.data.domain.PageImpl} instances before handing them\n+\t\t * out of a controller method, either by manually calling\n+\t\t * {@code new PagedModel<>(page)} or using Spring HATEOAS\n+\t\t * {@link org.springframework.hateoas.PagedModel} abstraction.\n+\t\t * @since 3.3\n+\t\t */\n+\t\tprivate PageSerializationMode serializationMode = PageSerializationMode.DIRECT;",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1507243424",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 39797,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/web/SpringDataWebProperties.java",
        "discussion_id": "1507243424",
        "commented_code": "@@ -81,6 +83,19 @@ public static class Pageable {\n \t\t */\n \t\tprivate int maxPageSize = 2000;\n \n+\t\t/**\n+\t\t * Configures how to render {@link org.springframework.data.domain.PageImpl}\n+\t\t * instances. Defaults to {@link PageSerializationMode#DIRECT} for backward\n+\t\t * compatibility reasons. Prefer explicitly setting this to\n+\t\t * {@link PageSerializationMode#VIA_DTO}, or manually convert\n+\t\t * {@link org.springframework.data.domain.PageImpl} instances before handing them\n+\t\t * out of a controller method, either by manually calling\n+\t\t * {@code new PagedModel<>(page)} or using Spring HATEOAS\n+\t\t * {@link org.springframework.hateoas.PagedModel} abstraction.\n+\t\t * @since 3.3\n+\t\t */\n+\t\tprivate PageSerializationMode serializationMode = PageSerializationMode.DIRECT;",
        "comment_created_at": "2024-02-29T09:08:03+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "The annotation processor the generates configuration property metadata can't handle enums due to a limitation of the annotation processing model. Please add an entry to `additional-spring-configuration-metadata.json` for this property's default value.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "847646610",
    "pr_number": 30567,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ReactiveKafkaProperties.java",
    "created_at": "2022-04-11T19:03:05+00:00",
    "commented_code": "+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.kafka;\n+\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.clients.consumer.RetriableCommitFailedException;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import reactor.kafka.receiver.KafkaReceiver;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.PropertyMapper;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Configuration properties for Project Reactor for Apache Kafka.\n+ * <p>\n+ * Users should refer to Reactor Kafka documentation for complete descriptions of these\n+ * properties.\n+ *\n+ * @author Almog Tavor\n+ * @since 2.7.0\n+ */\n+@ConfigurationProperties(prefix = \"spring.reactor.kafka\")\n+public class ReactiveKafkaProperties {\n+\n+\t/**\n+\t * Additional properties, common to producers and consumers, used to configure the\n+\t * client.\n+\t */\n+\tprivate final Map<String, String> properties = new HashMap<>();\n+\n+\tprivate final Receiver receiver = new Receiver();\n+\n+\tprivate final Sender sender = new Sender();\n+\n+\tpublic Map<String, String> getProperties() {\n+\t\treturn this.properties;\n+\t}\n+\n+\tpublic Receiver getReceiver() {\n+\t\treturn this.receiver;\n+\t}\n+\n+\tpublic Sender getSender() {\n+\t\treturn this.sender;\n+\t}\n+\n+\tprivate Map<String, Object> buildCommonProperties() {\n+\t\tMap<String, Object> commonProperties = new HashMap<>();\n+\t\tif (!CollectionUtils.isEmpty(this.properties)) {\n+\t\t\tcommonProperties.putAll(this.properties);\n+\t\t}\n+\t\treturn commonProperties;\n+\t}\n+\n+\t/**\n+\t * Create an initial map of consumer properties from the state of this instance.\n+\t * <p>\n+\t * This allows you to add additional properties, if necessary, and override the\n+\t * default kafkaReceiver bean.\n+\t * @return the consumer properties initialized with the customizations defined on this\n+\t * instance\n+\t */\n+\tpublic Map<String, Object> buildReceiverProperties() {\n+\t\tMap<String, Object> receiverProperties = buildCommonProperties();\n+\t\treceiverProperties.putAll(this.receiver.buildProperties());\n+\t\treturn receiverProperties;\n+\t}\n+\n+\t/**\n+\t * Create an initial map of producer properties from the state of this instance. This\n+\t * allows you to add additional properties, if necessary, and override the default\n+\t * kafkaSender bean.\n+\t * @return the producer properties initialized with the customizations defined on this\n+\t * instance\n+\t */\n+\tpublic Map<String, Object> buildSenderProperties() {\n+\t\tMap<String, Object> senderProperties = buildCommonProperties();\n+\t\tsenderProperties.putAll(this.sender.buildProperties());\n+\t\treturn senderProperties;\n+\t}\n+\n+\tpublic static class Receiver {\n+\n+\t\t/**\n+\t\t * Sets the timeout for each {@link KafkaConsumer#poll(Duration)} operation. Since\n+\t\t * the underlying Kafka consumer is not thread-safe, long poll intervals may delay\n+\t\t * commits and other operations invoked using\n+\t\t * {@link KafkaReceiver#doOnConsumer(java.util.function.Function)}. Very short\n+\t\t * timeouts may reduce batching and increase load on the broker.",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "847646610",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30567,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ReactiveKafkaProperties.java",
        "discussion_id": "847646610",
        "commented_code": "@@ -0,0 +1,341 @@\n+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.kafka;\n+\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.clients.consumer.RetriableCommitFailedException;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import reactor.kafka.receiver.KafkaReceiver;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.PropertyMapper;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Configuration properties for Project Reactor for Apache Kafka.\n+ * <p>\n+ * Users should refer to Reactor Kafka documentation for complete descriptions of these\n+ * properties.\n+ *\n+ * @author Almog Tavor\n+ * @since 2.7.0\n+ */\n+@ConfigurationProperties(prefix = \"spring.reactor.kafka\")\n+public class ReactiveKafkaProperties {\n+\n+\t/**\n+\t * Additional properties, common to producers and consumers, used to configure the\n+\t * client.\n+\t */\n+\tprivate final Map<String, String> properties = new HashMap<>();\n+\n+\tprivate final Receiver receiver = new Receiver();\n+\n+\tprivate final Sender sender = new Sender();\n+\n+\tpublic Map<String, String> getProperties() {\n+\t\treturn this.properties;\n+\t}\n+\n+\tpublic Receiver getReceiver() {\n+\t\treturn this.receiver;\n+\t}\n+\n+\tpublic Sender getSender() {\n+\t\treturn this.sender;\n+\t}\n+\n+\tprivate Map<String, Object> buildCommonProperties() {\n+\t\tMap<String, Object> commonProperties = new HashMap<>();\n+\t\tif (!CollectionUtils.isEmpty(this.properties)) {\n+\t\t\tcommonProperties.putAll(this.properties);\n+\t\t}\n+\t\treturn commonProperties;\n+\t}\n+\n+\t/**\n+\t * Create an initial map of consumer properties from the state of this instance.\n+\t * <p>\n+\t * This allows you to add additional properties, if necessary, and override the\n+\t * default kafkaReceiver bean.\n+\t * @return the consumer properties initialized with the customizations defined on this\n+\t * instance\n+\t */\n+\tpublic Map<String, Object> buildReceiverProperties() {\n+\t\tMap<String, Object> receiverProperties = buildCommonProperties();\n+\t\treceiverProperties.putAll(this.receiver.buildProperties());\n+\t\treturn receiverProperties;\n+\t}\n+\n+\t/**\n+\t * Create an initial map of producer properties from the state of this instance. This\n+\t * allows you to add additional properties, if necessary, and override the default\n+\t * kafkaSender bean.\n+\t * @return the producer properties initialized with the customizations defined on this\n+\t * instance\n+\t */\n+\tpublic Map<String, Object> buildSenderProperties() {\n+\t\tMap<String, Object> senderProperties = buildCommonProperties();\n+\t\tsenderProperties.putAll(this.sender.buildProperties());\n+\t\treturn senderProperties;\n+\t}\n+\n+\tpublic static class Receiver {\n+\n+\t\t/**\n+\t\t * Sets the timeout for each {@link KafkaConsumer#poll(Duration)} operation. Since\n+\t\t * the underlying Kafka consumer is not thread-safe, long poll intervals may delay\n+\t\t * commits and other operations invoked using\n+\t\t * {@link KafkaReceiver#doOnConsumer(java.util.function.Function)}. Very short\n+\t\t * timeouts may reduce batching and increase load on the broker.",
        "comment_created_at": "2022-04-11T19:03:05+00:00",
        "comment_author": "artembilan",
        "comment_body": "The description is these configuration properties must be short and simple.\r\nAnd it cannot be like a method Javadoc: we must not use any Javadoc tag and style in this descriptions.\r\nThis property indeed doesn't set anything.\r\nSee docs for more info: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.developing-auto-configuration.custom-starter.configuration-keys",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1419330638",
    "pr_number": 38703,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java",
    "created_at": "2023-12-07T17:24:26+00:00",
    "commented_code": "@DurationUnit(ChronoUnit.SECONDS)\n \t\t\tprivate Duration timeout = Duration.ofMinutes(30);\n \n+\t\t\t/**\n+\t\t\t * The maximum number of sessions that can be stored.\n+\t\t\t */\n+\t\t\tprivate Integer maxSessions;",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1419330638",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 38703,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java",
        "discussion_id": "1419330638",
        "commented_code": "@@ -329,6 +329,11 @@ public static class Session {\n \t\t\t@DurationUnit(ChronoUnit.SECONDS)\n \t\t\tprivate Duration timeout = Duration.ofMinutes(30);\n \n+\t\t\t/**\n+\t\t\t * The maximum number of sessions that can be stored.\n+\t\t\t */\n+\t\t\tprivate Integer maxSessions;",
        "comment_created_at": "2023-12-07T17:24:26+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "This should be an `int` with a default value that matches that of `InMemoryWebSessionStore`. Providing a default improves the metadata that's used for auto-completion when editing application properties and YAML files. A test should be added to assert that the defaults are in sync.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1165540380",
    "pr_number": 34958,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/otlp/OtlpProperties.java",
    "created_at": "2023-04-13T13:40:56+00:00",
    "commented_code": "*/\n \tprivate String url = \"http://localhost:4318/v1/metrics\";\n \n+\t/**\n+\t * {@link AggregationTemporality} of sums. It defines the way additive values are",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1165540380",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 34958,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/otlp/OtlpProperties.java",
        "discussion_id": "1165540380",
        "commented_code": "@@ -36,6 +39,13 @@ public class OtlpProperties extends StepRegistryProperties {\n \t */\n \tprivate String url = \"http://localhost:4318/v1/metrics\";\n \n+\t/**\n+\t * {@link AggregationTemporality} of sums. It defines the way additive values are",
        "comment_created_at": "2023-04-13T13:40:56+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "Unfortunately, we can't use javadoc tags in the descriptions of configuration properties as it doesn't work well with configuration property metadata generation. We'll have to use `AggregationTemporality` or even just `Aggregation temporality` instead.",
        "pr_file_module": null
      },
      {
        "comment_id": "1165818182",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 34958,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/otlp/OtlpProperties.java",
        "discussion_id": "1165540380",
        "commented_code": "@@ -36,6 +39,13 @@ public class OtlpProperties extends StepRegistryProperties {\n \t */\n \tprivate String url = \"http://localhost:4318/v1/metrics\";\n \n+\t/**\n+\t * {@link AggregationTemporality} of sums. It defines the way additive values are",
        "comment_created_at": "2023-04-13T17:12:25+00:00",
        "comment_author": "jonatan-ivanov",
        "comment_body": "Makes sense, fixed, thanks!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "965527043",
    "pr_number": 32214,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
    "created_at": "2022-09-08T05:52:50+00:00",
    "commented_code": "}\n \n+\tpublic static class Baggage {\n+\n+\t\t/**\n+\t\t * Enables correlating the baggage context with logging contexts.\n+\t\t */\n+\t\tprivate boolean correlationEnabled = true;\n+\n+\t\t/**\n+\t\t * List of fields that should be propagated over the wire.\n+\t\t */\n+\t\tprivate List<String> correlationFields = new ArrayList<>();\n+\n+\t\t/**\n+\t\t * List of fields that should be accessible within the JVM process but not propagated\n+\t\t * over the wire.\n+\t\t */\n+\t\tprivate List<String> localFields = new ArrayList<>();\n+\n+\t\t/**\n+\t\t * List of fields that are referenced the same in-process as it is on the wire. For\n+\t\t * example, the field \"x-vcap-request-id\" would be set as-is including the prefix.\n+\t\t */\n+\t\tprivate List<String> remoteFields = new ArrayList<>();\n+\n+\t\t/**\n+\t\t * List of fields that should automatically become tags.\n+\t\t */\n+\t\tprivate List<String> tagFields = new ArrayList<>();\n+\n+\t\tpublic boolean isCorrelationEnabled() {\n+\t\t\treturn correlationEnabled;\n+\t\t}\n+\n+\t\tpublic void setCorrelationEnabled(boolean correlationEnabled) {\n+\t\t\tthis.correlationEnabled = correlationEnabled;\n+\t\t}\n+\n+\t\tpublic List<String> getCorrelationFields() {\n+\t\t\treturn correlationFields;\n+\t\t}\n+\n+\t\tpublic void setCorrelationFields(List<String> correlationFields) {\n+\t\t\tthis.correlationFields = correlationFields;\n+\t\t}\n+\n+\t\tpublic List<String> getLocalFields() {\n+\t\t\treturn localFields;\n+\t\t}\n+\n+\t\tpublic void setLocalFields(List<String> localFields) {\n+\t\t\tthis.localFields = localFields;\n+\t\t}\n+\n+\t\tpublic List<String> getRemoteFields() {\n+\t\t\treturn remoteFields;\n+\t\t}\n+\n+\t\tpublic void setRemoteFields(List<String> remoteFields) {\n+\t\t\tthis.remoteFields = remoteFields;\n+\t\t}\n+\n+\t\tpublic List<String> getTagFields() {\n+\t\t\treturn this.tagFields;\n+\t\t}\n+\n+\t\tpublic void setTagFields(List<String> tagFields) {\n+\t\t\tthis.tagFields = tagFields;\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class Propagation {\n+\n+\t\t/**\n+\t\t * Tracing context propagation types.\n+\t\t */\n+\t\t// TODO: Should this be the default?\n+\t\tprivate PropagationType type = PropagationType.B3;",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "965527043",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 32214,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
        "discussion_id": "965527043",
        "commented_code": "@@ -53,4 +74,119 @@ public void setProbability(float probability) {\n \n \t}\n \n+\tpublic static class Baggage {\n+\n+\t\t/**\n+\t\t * Enables correlating the baggage context with logging contexts.\n+\t\t */\n+\t\tprivate boolean correlationEnabled = true;\n+\n+\t\t/**\n+\t\t * List of fields that should be propagated over the wire.\n+\t\t */\n+\t\tprivate List<String> correlationFields = new ArrayList<>();\n+\n+\t\t/**\n+\t\t * List of fields that should be accessible within the JVM process but not propagated\n+\t\t * over the wire.\n+\t\t */\n+\t\tprivate List<String> localFields = new ArrayList<>();\n+\n+\t\t/**\n+\t\t * List of fields that are referenced the same in-process as it is on the wire. For\n+\t\t * example, the field \"x-vcap-request-id\" would be set as-is including the prefix.\n+\t\t */\n+\t\tprivate List<String> remoteFields = new ArrayList<>();\n+\n+\t\t/**\n+\t\t * List of fields that should automatically become tags.\n+\t\t */\n+\t\tprivate List<String> tagFields = new ArrayList<>();\n+\n+\t\tpublic boolean isCorrelationEnabled() {\n+\t\t\treturn correlationEnabled;\n+\t\t}\n+\n+\t\tpublic void setCorrelationEnabled(boolean correlationEnabled) {\n+\t\t\tthis.correlationEnabled = correlationEnabled;\n+\t\t}\n+\n+\t\tpublic List<String> getCorrelationFields() {\n+\t\t\treturn correlationFields;\n+\t\t}\n+\n+\t\tpublic void setCorrelationFields(List<String> correlationFields) {\n+\t\t\tthis.correlationFields = correlationFields;\n+\t\t}\n+\n+\t\tpublic List<String> getLocalFields() {\n+\t\t\treturn localFields;\n+\t\t}\n+\n+\t\tpublic void setLocalFields(List<String> localFields) {\n+\t\t\tthis.localFields = localFields;\n+\t\t}\n+\n+\t\tpublic List<String> getRemoteFields() {\n+\t\t\treturn remoteFields;\n+\t\t}\n+\n+\t\tpublic void setRemoteFields(List<String> remoteFields) {\n+\t\t\tthis.remoteFields = remoteFields;\n+\t\t}\n+\n+\t\tpublic List<String> getTagFields() {\n+\t\t\treturn this.tagFields;\n+\t\t}\n+\n+\t\tpublic void setTagFields(List<String> tagFields) {\n+\t\t\tthis.tagFields = tagFields;\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class Propagation {\n+\n+\t\t/**\n+\t\t * Tracing context propagation types.\n+\t\t */\n+\t\t// TODO: Should this be the default?\n+\t\tprivate PropagationType type = PropagationType.B3;",
        "comment_created_at": "2022-09-08T05:52:50+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "This default should be declared in the additional metadata as the annotation processor cannot detect default enum values.",
        "pr_file_module": null
      }
    ]
  }
]