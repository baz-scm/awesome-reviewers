[
  {
    "discussion_id": "2002205294",
    "pr_number": 44767,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/docs/antora/modules/api/pages/rest/actuator/metrics.adoc",
    "created_at": "2025-03-19T00:45:37+00:00",
    "commented_code": "[[metrics]]\n = Metrics (`metrics`)\n \n-The `metrics` endpoint provides access to application metrics.\n+The `metrics` endpoint provides access to application metrics to diagnose the metrics the application has recorded. This endpoint should not be \"scraped\" or used as a metrics backend in production. It's purpose is to show the currently registered metrics so users can see what metrics are available, what their current values are, and if triggering certain operations cause any change in certain values. If you want to diagnose your applications through the metrics they collect, you should use an external metrics backend. In this case, the `metrics` endpoint can still be useful.",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "2002205294",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44767,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/docs/antora/modules/api/pages/rest/actuator/metrics.adoc",
        "discussion_id": "2002205294",
        "commented_code": "@@ -1,7 +1,7 @@\n [[metrics]]\n = Metrics (`metrics`)\n \n-The `metrics` endpoint provides access to application metrics.\n+The `metrics` endpoint provides access to application metrics to diagnose the metrics the application has recorded. This endpoint should not be \"scraped\" or used as a metrics backend in production. It's purpose is to show the currently registered metrics so users can see what metrics are available, what their current values are, and if triggering certain operations cause any change in certain values. If you want to diagnose your applications through the metrics they collect, you should use an external metrics backend. In this case, the `metrics` endpoint can still be useful.",
        "comment_created_at": "2025-03-19T00:45:37+00:00",
        "comment_author": "jonatan-ivanov",
        "comment_body": "I wanted to link \"external metrics backend\" to https://docs.spring.io/spring-boot/reference/actuator/metrics.html but Antora did not like `xref:reference:actuator/metrics.adoc[external metrics backend]`, could somebody help me  with the right `xref`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2004168034",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44767,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/docs/antora/modules/api/pages/rest/actuator/metrics.adoc",
        "discussion_id": "2002205294",
        "commented_code": "@@ -1,7 +1,7 @@\n [[metrics]]\n = Metrics (`metrics`)\n \n-The `metrics` endpoint provides access to application metrics.\n+The `metrics` endpoint provides access to application metrics to diagnose the metrics the application has recorded. This endpoint should not be \"scraped\" or used as a metrics backend in production. It's purpose is to show the currently registered metrics so users can see what metrics are available, what their current values are, and if triggering certain operations cause any change in certain values. If you want to diagnose your applications through the metrics they collect, you should use an external metrics backend. In this case, the `metrics` endpoint can still be useful.",
        "comment_created_at": "2025-03-19T19:45:38+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "What failure did you get? That `xref` seems to work for me.",
        "pr_file_module": null
      },
      {
        "comment_id": "2004171143",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44767,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/docs/antora/modules/api/pages/rest/actuator/metrics.adoc",
        "discussion_id": "2002205294",
        "commented_code": "@@ -1,7 +1,7 @@\n [[metrics]]\n = Metrics (`metrics`)\n \n-The `metrics` endpoint provides access to application metrics.\n+The `metrics` endpoint provides access to application metrics to diagnose the metrics the application has recorded. This endpoint should not be \"scraped\" or used as a metrics backend in production. It's purpose is to show the currently registered metrics so users can see what metrics are available, what their current values are, and if triggering certain operations cause any change in certain values. If you want to diagnose your applications through the metrics they collect, you should use an external metrics backend. In this case, the `metrics` endpoint can still be useful.",
        "comment_created_at": "2025-03-19T19:47:20+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I just pushed a change to your branch. Let's see what CI makes of it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2004252723",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44767,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/docs/antora/modules/api/pages/rest/actuator/metrics.adoc",
        "discussion_id": "2002205294",
        "commented_code": "@@ -1,7 +1,7 @@\n [[metrics]]\n = Metrics (`metrics`)\n \n-The `metrics` endpoint provides access to application metrics.\n+The `metrics` endpoint provides access to application metrics to diagnose the metrics the application has recorded. This endpoint should not be \"scraped\" or used as a metrics backend in production. It's purpose is to show the currently registered metrics so users can see what metrics are available, what their current values are, and if triggering certain operations cause any change in certain values. If you want to diagnose your applications through the metrics they collect, you should use an external metrics backend. In this case, the `metrics` endpoint can still be useful.",
        "comment_created_at": "2025-03-19T20:34:30+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "It failed. `:spring-boot-project:spring-boot-docs:antora` which pulls in the Actuator API docs worked for me locally. It's `spring-boot-project:spring-boot-actuator-autoconfigure:antora` that's failing on CI though.\r\n\r\nAny ideas, @philwebb? The reference works fine when built as part of `spring-boot-docs` but not when just building the Actuator API docs on their own.",
        "pr_file_module": null
      },
      {
        "comment_id": "2004289396",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44767,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/docs/antora/modules/api/pages/rest/actuator/metrics.adoc",
        "discussion_id": "2002205294",
        "commented_code": "@@ -1,7 +1,7 @@\n [[metrics]]\n = Metrics (`metrics`)\n \n-The `metrics` endpoint provides access to application metrics.\n+The `metrics` endpoint provides access to application metrics to diagnose the metrics the application has recorded. This endpoint should not be \"scraped\" or used as a metrics backend in production. It's purpose is to show the currently registered metrics so users can see what metrics are available, what their current values are, and if triggering certain operations cause any change in certain values. If you want to diagnose your applications through the metrics they collect, you should use an external metrics backend. In this case, the `metrics` endpoint can still be useful.",
        "comment_created_at": "2025-03-19T20:56:36+00:00",
        "comment_author": "jonatan-ivanov",
        "comment_body": "I ran `./gradlew antora` and got the same error as CI:\r\n```\r\nERROR (asciidoctor): target of xref not found: reference:actuator/metrics.adoc\r\n```\r\nNot sure if it helps but here's my build-scan (pulling down the changes you made and running the \"root\" `antora` task): https://ge.spring.io/s/g7ozmgj4eabn2",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1923809779",
    "pr_number": 43879,
    "pr_file": "spring-boot-project/spring-boot-docs/src/docs/antora/modules/reference/pages/features/dev-services.adoc",
    "created_at": "2025-01-21T14:16:26+00:00",
    "commented_code": "When using devtools, you can annotate beans and bean methods with javadoc:org.springframework.boot.devtools.restart.RestartScope[format=annotation].\n Such beans won't be recreated when the devtools restart the application.\n-This is especially useful for Testcontainer javadoc:org.testcontainers.containers.Container[] beans, as they keep their state despite the application restart.\n+This is especially useful for Testcontainers javadoc:org.testcontainers.containers.Container[] beans, as they keep their state despite the application restart.",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1923809779",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 43879,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/antora/modules/reference/pages/features/dev-services.adoc",
        "discussion_id": "1923809779",
        "commented_code": "@@ -402,7 +402,7 @@ You can also add javadoc:org.springframework.test.context.DynamicPropertySource[\n \n When using devtools, you can annotate beans and bean methods with javadoc:org.springframework.boot.devtools.restart.RestartScope[format=annotation].\n Such beans won't be recreated when the devtools restart the application.\n-This is especially useful for Testcontainer javadoc:org.testcontainers.containers.Container[] beans, as they keep their state despite the application restart.\n+This is especially useful for Testcontainers javadoc:org.testcontainers.containers.Container[] beans, as they keep their state despite the application restart.",
        "comment_created_at": "2025-01-21T14:16:26+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I think this was intentionally singular. If it's to change, I think it should be changed to \"container\".",
        "pr_file_module": null
      },
      {
        "comment_id": "1923844524",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 43879,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/antora/modules/reference/pages/features/dev-services.adoc",
        "discussion_id": "1923809779",
        "commented_code": "@@ -402,7 +402,7 @@ You can also add javadoc:org.springframework.test.context.DynamicPropertySource[\n \n When using devtools, you can annotate beans and bean methods with javadoc:org.springframework.boot.devtools.restart.RestartScope[format=annotation].\n Such beans won't be recreated when the devtools restart the application.\n-This is especially useful for Testcontainer javadoc:org.testcontainers.containers.Container[] beans, as they keep their state despite the application restart.\n+This is especially useful for Testcontainers javadoc:org.testcontainers.containers.Container[] beans, as they keep their state despite the application restart.",
        "comment_created_at": "2025-01-21T14:36:16+00:00",
        "comment_author": "izeye",
        "comment_body": "@wilkinsona How about \"Testcontainers'\" or just removing \"Testcontainer\"?\r\n\r\n\"container Container beans\" doesn't sound right to me.",
        "pr_file_module": null
      },
      {
        "comment_id": "1923854293",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 43879,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/antora/modules/reference/pages/features/dev-services.adoc",
        "discussion_id": "1923809779",
        "commented_code": "@@ -402,7 +402,7 @@ You can also add javadoc:org.springframework.test.context.DynamicPropertySource[\n \n When using devtools, you can annotate beans and bean methods with javadoc:org.springframework.boot.devtools.restart.RestartScope[format=annotation].\n Such beans won't be recreated when the devtools restart the application.\n-This is especially useful for Testcontainer javadoc:org.testcontainers.containers.Container[] beans, as they keep their state despite the application restart.\n+This is especially useful for Testcontainers javadoc:org.testcontainers.containers.Container[] beans, as they keep their state despite the application restart.",
        "comment_created_at": "2025-01-21T14:42:02+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "Oops. Yeah, I think we can just remove it as we're already in a section about Testcontainers. I think \"for Container beans\" reads better and there's enough context to know that it's a Testcontainers container.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1735314475",
    "pr_number": 41825,
    "pr_file": "spring-boot-project/spring-boot-docs/src/docs/antora/modules/reference/pages/actuator/loggers.adoc",
    "created_at": "2024-08-28T21:32:26+00:00",
    "commented_code": "----\n \n TIP: To \"`reset`\" the specific level of the logger (and use the default configuration instead), you can pass a value of `null` as the `configuredLevel`.\n+\n+== OpenTelemetry\n+By default, the OpenTelemetry SDK logs are not configured. You can provide the location of the OpenTelemetry logs endpoint to configure it:\n+\n+[source,yaml]\n+----\n+management:\n+  otlp:\n+    logging:\n+      endpoint: \"https://otlp.example.com:4318/v1/logs\"\n+----\n+\n+Note: The OpenTelemetry Logback appender and Log4j appender are not part of Spring Boot. You have to provide and configure them yourself. For more details, https://github.com/spring-projects/spring-boot/pull/40961[see this pull request].",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1735314475",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 41825,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/antora/modules/reference/pages/actuator/loggers.adoc",
        "discussion_id": "1735314475",
        "commented_code": "@@ -31,3 +31,16 @@ To configure a given logger, `POST` a partial entity to the resource's URI, as t\n ----\n \n TIP: To \"`reset`\" the specific level of the logger (and use the default configuration instead), you can pass a value of `null` as the `configuredLevel`.\n+\n+== OpenTelemetry\n+By default, the OpenTelemetry SDK logs are not configured. You can provide the location of the OpenTelemetry logs endpoint to configure it:\n+\n+[source,yaml]\n+----\n+management:\n+  otlp:\n+    logging:\n+      endpoint: \"https://otlp.example.com:4318/v1/logs\"\n+----\n+\n+Note: The OpenTelemetry Logback appender and Log4j appender are not part of Spring Boot. You have to provide and configure them yourself. For more details, https://github.com/spring-projects/spring-boot/pull/40961[see this pull request].",
        "comment_created_at": "2024-08-28T21:32:26+00:00",
        "comment_author": "philwebb",
        "comment_body": "`Note` should be `NOTE` and we prefer one sentence per line.\r\n\r\nI'm not sure that we should link to the pull request. Perhaps we can say \"For more details, see the Logback and Log4j2 appenders in the https://github.com/open-telemetry/opentelemetry-java-instrumentation[OpenTelemetry GitHub repository]",
        "pr_file_module": null
      },
      {
        "comment_id": "1735896754",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 41825,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/antora/modules/reference/pages/actuator/loggers.adoc",
        "discussion_id": "1735314475",
        "commented_code": "@@ -31,3 +31,16 @@ To configure a given logger, `POST` a partial entity to the resource's URI, as t\n ----\n \n TIP: To \"`reset`\" the specific level of the logger (and use the default configuration instead), you can pass a value of `null` as the `configuredLevel`.\n+\n+== OpenTelemetry\n+By default, the OpenTelemetry SDK logs are not configured. You can provide the location of the OpenTelemetry logs endpoint to configure it:\n+\n+[source,yaml]\n+----\n+management:\n+  otlp:\n+    logging:\n+      endpoint: \"https://otlp.example.com:4318/v1/logs\"\n+----\n+\n+Note: The OpenTelemetry Logback appender and Log4j appender are not part of Spring Boot. You have to provide and configure them yourself. For more details, https://github.com/spring-projects/spring-boot/pull/40961[see this pull request].",
        "comment_created_at": "2024-08-29T09:39:47+00:00",
        "comment_author": "famaridon",
        "comment_body": "the pull request link add informtion on how to link the appender to the OpenTelemetry sdk.\r\n\r\nCan I add this sample to the documentation?\r\n```java\r\n@Bean\r\npublic ApplicationListener<ApplicationReadyEvent> logbackOtelAppenderInitializer(OpenTelemetry openTelemetry) {\r\n    return event -> OpenTelemetryAppender.install(openTelemetry);\r\n}\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1736180036",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 41825,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/antora/modules/reference/pages/actuator/loggers.adoc",
        "discussion_id": "1735314475",
        "commented_code": "@@ -31,3 +31,16 @@ To configure a given logger, `POST` a partial entity to the resource's URI, as t\n ----\n \n TIP: To \"`reset`\" the specific level of the logger (and use the default configuration instead), you can pass a value of `null` as the `configuredLevel`.\n+\n+== OpenTelemetry\n+By default, the OpenTelemetry SDK logs are not configured. You can provide the location of the OpenTelemetry logs endpoint to configure it:\n+\n+[source,yaml]\n+----\n+management:\n+  otlp:\n+    logging:\n+      endpoint: \"https://otlp.example.com:4318/v1/logs\"\n+----\n+\n+Note: The OpenTelemetry Logback appender and Log4j appender are not part of Spring Boot. You have to provide and configure them yourself. For more details, https://github.com/spring-projects/spring-boot/pull/40961[see this pull request].",
        "comment_created_at": "2024-08-29T13:10:46+00:00",
        "comment_author": "famaridon",
        "comment_body": "I tried to add code sample but I don't know how to check the result with antora.",
        "pr_file_module": null
      },
      {
        "comment_id": "1736768392",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 41825,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/antora/modules/reference/pages/actuator/loggers.adoc",
        "discussion_id": "1735314475",
        "commented_code": "@@ -31,3 +31,16 @@ To configure a given logger, `POST` a partial entity to the resource's URI, as t\n ----\n \n TIP: To \"`reset`\" the specific level of the logger (and use the default configuration instead), you can pass a value of `null` as the `configuredLevel`.\n+\n+== OpenTelemetry\n+By default, the OpenTelemetry SDK logs are not configured. You can provide the location of the OpenTelemetry logs endpoint to configure it:\n+\n+[source,yaml]\n+----\n+management:\n+  otlp:\n+    logging:\n+      endpoint: \"https://otlp.example.com:4318/v1/logs\"\n+----\n+\n+Note: The OpenTelemetry Logback appender and Log4j appender are not part of Spring Boot. You have to provide and configure them yourself. For more details, https://github.com/spring-projects/spring-boot/pull/40961[see this pull request].",
        "comment_created_at": "2024-08-29T17:20:47+00:00",
        "comment_author": "philwebb",
        "comment_body": "If you want to check the docs, you should be able to run `./gradlew antora` then `open spring-boot-project/spring-boot-docs/build/site/index.html`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1738697744",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 41825,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/antora/modules/reference/pages/actuator/loggers.adoc",
        "discussion_id": "1735314475",
        "commented_code": "@@ -31,3 +31,16 @@ To configure a given logger, `POST` a partial entity to the resource's URI, as t\n ----\n \n TIP: To \"`reset`\" the specific level of the logger (and use the default configuration instead), you can pass a value of `null` as the `configuredLevel`.\n+\n+== OpenTelemetry\n+By default, the OpenTelemetry SDK logs are not configured. You can provide the location of the OpenTelemetry logs endpoint to configure it:\n+\n+[source,yaml]\n+----\n+management:\n+  otlp:\n+    logging:\n+      endpoint: \"https://otlp.example.com:4318/v1/logs\"\n+----\n+\n+Note: The OpenTelemetry Logback appender and Log4j appender are not part of Spring Boot. You have to provide and configure them yourself. For more details, https://github.com/spring-projects/spring-boot/pull/40961[see this pull request].",
        "comment_created_at": "2024-08-30T13:42:18+00:00",
        "comment_author": "famaridon",
        "comment_body": "It's not a good idea. The `OpenTelemetryAppende`r is not in the classpath, and it broke the build. I changed the code sample into two tips, and they do the job.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1263555912",
    "pr_number": 34763,
    "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/messaging/pulsar.adoc",
    "created_at": "2023-07-14T10:09:48+00:00",
    "commented_code": "+[[messaging.pulsar]]\n+== Apache Pulsar Support\n+https://pulsar.apache.org/[Apache Pulsar] is supported by providing auto-configuration of the {spring-pulsar-docs}[Spring for Apache Pulsar] project.\n+\n+Spring Boot will auto-configure and register the classic (imperative) Spring Pulsar components when `org.springframework.pulsar:spring-pulsar` is on the classpath.\n+It will do the same for the reactive components when both `org.springframework.pulsar:spring-pulsar-reactive` and Project Reactor are on the classpath.\n+\n+There are `spring-boot-starter-pulsar` and `spring-boot-starter-pulsar-reactive` \"`Starters`\" for conveniently collecting the dependencies for imperative and reactive use, respectively.\n+\n+TIP: The Reactive support is built on top of the imperative support and therefore the reactive starter includes the imperative starter.\n+As such, the imperative components are auto-configured and available in both reactive and imperative scenarios.\n+\n+[[messaging.pulsar.connecting]]\n+=== Connecting to Pulsar\n+When you use the Pulsar starter, Spring Boot will auto-configure and register a `PulsarClient` bean.\n+\n+By default, the application tries to connect to a local Pulsar instance at `pulsar://localhost:6650`.\n+This can be adjusted by setting the `spring.pulsar.client.service-url` property to a different value.\n+\n+TIP: The value must be a valid https://pulsar.apache.org/docs/client-libraries-java/#connection-urls[Pulsar Protocol] URL\n+\n+[[messaging.pulsar.connecting.auth]]\n+==== Authentication\n+To connect to a Pulsar cluster that requires authentication, you need to specify which authentication plugin to use by setting the `authPluginClassName` and any parameters required by the plugin.\n+You can set the parameters as a single JSON-encoded string or as map of parameter names to parameter values.\n+The following listings show both approaches:\n+\n+[source,yaml,indent=0,subs=\"verbatim\",role=\"primary\"]\n+.[.small]#Map#\n+----\n+spring:\n+  pulsar:\n+    client:\n+      auth-plugin-class-name: org.apache.pulsar.client.impl.auth.oauth2.AuthenticationOAuth2\n+      authentication:\n+        issuer-url: https://auth.server.cloud/\n+        private-key: file:///Users/some-key.json\n+        audience: urn:sn:acme:dev:my-instance\n+----\n+\n+.[.small]#JSON encoded string#\n+[source,yaml,indent=0,subs=\"verbatim\",role=\"secondary\"]\n+----\n+spring:\n+  pulsar:\n+    client:\n+      auth-plugin-class-name: org.apache.pulsar.client.impl.auth.oauth2.AuthenticationOAuth2\n+      auth-params: \"{\\\"privateKey\\\":\\\"file:///Users/some-key.json\\\",\\\"issuerUrl\\\":\\\"https://auth.server.cloud/\", \\\"audience\\\":\\\"urn:sn:acme:dev:my-instance\"}\"\n+----\n+\n+TIP: Using a map is the recommended approach as it is less error-prone and easier to read.",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1263555912",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 34763,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/messaging/pulsar.adoc",
        "discussion_id": "1263555912",
        "commented_code": "@@ -0,0 +1,144 @@\n+[[messaging.pulsar]]\n+== Apache Pulsar Support\n+https://pulsar.apache.org/[Apache Pulsar] is supported by providing auto-configuration of the {spring-pulsar-docs}[Spring for Apache Pulsar] project.\n+\n+Spring Boot will auto-configure and register the classic (imperative) Spring Pulsar components when `org.springframework.pulsar:spring-pulsar` is on the classpath.\n+It will do the same for the reactive components when both `org.springframework.pulsar:spring-pulsar-reactive` and Project Reactor are on the classpath.\n+\n+There are `spring-boot-starter-pulsar` and `spring-boot-starter-pulsar-reactive` \"`Starters`\" for conveniently collecting the dependencies for imperative and reactive use, respectively.\n+\n+TIP: The Reactive support is built on top of the imperative support and therefore the reactive starter includes the imperative starter.\n+As such, the imperative components are auto-configured and available in both reactive and imperative scenarios.\n+\n+[[messaging.pulsar.connecting]]\n+=== Connecting to Pulsar\n+When you use the Pulsar starter, Spring Boot will auto-configure and register a `PulsarClient` bean.\n+\n+By default, the application tries to connect to a local Pulsar instance at `pulsar://localhost:6650`.\n+This can be adjusted by setting the `spring.pulsar.client.service-url` property to a different value.\n+\n+TIP: The value must be a valid https://pulsar.apache.org/docs/client-libraries-java/#connection-urls[Pulsar Protocol] URL\n+\n+[[messaging.pulsar.connecting.auth]]\n+==== Authentication\n+To connect to a Pulsar cluster that requires authentication, you need to specify which authentication plugin to use by setting the `authPluginClassName` and any parameters required by the plugin.\n+You can set the parameters as a single JSON-encoded string or as map of parameter names to parameter values.\n+The following listings show both approaches:\n+\n+[source,yaml,indent=0,subs=\"verbatim\",role=\"primary\"]\n+.[.small]#Map#\n+----\n+spring:\n+  pulsar:\n+    client:\n+      auth-plugin-class-name: org.apache.pulsar.client.impl.auth.oauth2.AuthenticationOAuth2\n+      authentication:\n+        issuer-url: https://auth.server.cloud/\n+        private-key: file:///Users/some-key.json\n+        audience: urn:sn:acme:dev:my-instance\n+----\n+\n+.[.small]#JSON encoded string#\n+[source,yaml,indent=0,subs=\"verbatim\",role=\"secondary\"]\n+----\n+spring:\n+  pulsar:\n+    client:\n+      auth-plugin-class-name: org.apache.pulsar.client.impl.auth.oauth2.AuthenticationOAuth2\n+      auth-params: \"{\\\"privateKey\\\":\\\"file:///Users/some-key.json\\\",\\\"issuerUrl\\\":\\\"https://auth.server.cloud/\", \\\"audience\\\":\\\"urn:sn:acme:dev:my-instance\"}\"\n+----\n+\n+TIP: Using a map is the recommended approach as it is less error-prone and easier to read.",
        "comment_created_at": "2023-07-14T10:09:48+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I'd just document the map-based approach.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "738083646",
    "pr_number": 28464,
    "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/actuator/endpoints.adoc",
    "created_at": "2021-10-28T07:13:29+00:00",
    "commented_code": "Each individual endpoint can be <<actuator#actuator.endpoints.enabling, enabled or disabled>> and <<actuator#actuator.endpoints.exposing, exposed (made remotely accessible) over HTTP or JMX>>.\n An endpoint is considered to be available when it is both enabled and exposed.\n The built-in endpoints will only be auto-configured when they are available.\n-Most applications choose exposure via HTTP, where the ID of the endpoint along with a prefix of `/actuator` is mapped to a URL.\n+Most applications choose exposure through HTTP, where the ID of the endpoint along with a prefix of `/actuator` is mapped to a URL.",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "738083646",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 28464,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/actuator/endpoints.adoc",
        "discussion_id": "738083646",
        "commented_code": "@@ -7,7 +7,7 @@ For example, the `health` endpoint provides basic application health information\n Each individual endpoint can be <<actuator#actuator.endpoints.enabling, enabled or disabled>> and <<actuator#actuator.endpoints.exposing, exposed (made remotely accessible) over HTTP or JMX>>.\n An endpoint is considered to be available when it is both enabled and exposed.\n The built-in endpoints will only be auto-configured when they are available.\n-Most applications choose exposure via HTTP, where the ID of the endpoint along with a prefix of `/actuator` is mapped to a URL.\n+Most applications choose exposure through HTTP, where the ID of the endpoint along with a prefix of `/actuator` is mapped to a URL.",
        "comment_created_at": "2021-10-28T07:13:29+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "Could we use \"over\" here? I think it's more idiomatic when talking about a protocol.",
        "pr_file_module": null
      },
      {
        "comment_id": "738548669",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 28464,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/actuator/endpoints.adoc",
        "discussion_id": "738083646",
        "commented_code": "@@ -7,7 +7,7 @@ For example, the `health` endpoint provides basic application health information\n Each individual endpoint can be <<actuator#actuator.endpoints.enabling, enabled or disabled>> and <<actuator#actuator.endpoints.exposing, exposed (made remotely accessible) over HTTP or JMX>>.\n An endpoint is considered to be available when it is both enabled and exposed.\n The built-in endpoints will only be auto-configured when they are available.\n-Most applications choose exposure via HTTP, where the ID of the endpoint along with a prefix of `/actuator` is mapped to a URL.\n+Most applications choose exposure through HTTP, where the ID of the endpoint along with a prefix of `/actuator` is mapped to a URL.",
        "comment_created_at": "2021-10-28T16:12:26+00:00",
        "comment_author": "Buzzardo",
        "comment_body": "I thought about \"over\" as well, so OK.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "730859141",
    "pr_number": 28355,
    "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/messaging/spring-integration.adoc",
    "created_at": "2021-10-18T12:14:41+00:00",
    "commented_code": "----\n \n See the {spring-boot-autoconfigure-module-code}/integration/IntegrationAutoConfiguration.java[`IntegrationAutoConfiguration`] and {spring-boot-autoconfigure-module-code}/integration/IntegrationProperties.java[`IntegrationProperties`] classes for more details.\n-\n-By default, if a Micrometer `meterRegistry` bean is present, Spring Integration metrics will be managed by Micrometer.",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "730859141",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 28355,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/messaging/spring-integration.adoc",
        "discussion_id": "730859141",
        "commented_code": "@@ -46,6 +46,3 @@ Spring Boot can also auto-configure an `ClientRSocketConnector` using configurat\n ----\n \n See the {spring-boot-autoconfigure-module-code}/integration/IntegrationAutoConfiguration.java[`IntegrationAutoConfiguration`] and {spring-boot-autoconfigure-module-code}/integration/IntegrationProperties.java[`IntegrationProperties`] classes for more details.\n-\n-By default, if a Micrometer `meterRegistry` bean is present, Spring Integration metrics will be managed by Micrometer.",
        "comment_created_at": "2021-10-18T12:14:41+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "This looks to be unrelated to the rest of the changes. Could it please be made separately?",
        "pr_file_module": null
      },
      {
        "comment_id": "730930787",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 28355,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/messaging/spring-integration.adoc",
        "discussion_id": "730859141",
        "commented_code": "@@ -46,6 +46,3 @@ Spring Boot can also auto-configure an `ClientRSocketConnector` using configurat\n ----\n \n See the {spring-boot-autoconfigure-module-code}/integration/IntegrationAutoConfiguration.java[`IntegrationAutoConfiguration`] and {spring-boot-autoconfigure-module-code}/integration/IntegrationProperties.java[`IntegrationProperties`] classes for more details.\n-\n-By default, if a Micrometer `meterRegistry` bean is present, Spring Integration metrics will be managed by Micrometer.",
        "comment_created_at": "2021-10-18T13:37:57+00:00",
        "comment_author": "artembilan",
        "comment_body": "Agree. It's not related, but this one had to be done long time ago. \r\nWas going to add something about a new prop, but then I realized that we point already to JavaDocs for those `IntegrationProperties`.\r\nMeanwhile this sentence made my eyes to bleed since we don't have those legacy metrics for years already.\r\nThe Micrometer is de-facto only single metrics mechanism we support, so I find an obvious message in the docs as redundant. \r\n\r\nIf you still insist, I can move it to separate PR.\r\n\r\nLet me know, please, if you are OK with that property placeholder approach in the `EnableIntegrationManagementConfiguration` instead of direct `IntegrationProperties` processing and respective beans configuration.\r\n\r\nThank you for feedback, Andy!",
        "pr_file_module": null
      },
      {
        "comment_id": "730971972",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 28355,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/messaging/spring-integration.adoc",
        "discussion_id": "730859141",
        "commented_code": "@@ -46,6 +46,3 @@ Spring Boot can also auto-configure an `ClientRSocketConnector` using configurat\n ----\n \n See the {spring-boot-autoconfigure-module-code}/integration/IntegrationAutoConfiguration.java[`IntegrationAutoConfiguration`] and {spring-boot-autoconfigure-module-code}/integration/IntegrationProperties.java[`IntegrationProperties`] classes for more details.\n-\n-By default, if a Micrometer `meterRegistry` bean is present, Spring Integration metrics will be managed by Micrometer.",
        "comment_created_at": "2021-10-18T14:15:33+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "> If you still insist, I can move it to separate PR.\r\n\r\nYes please, Artem. It sounds like we should get rid of that sentence in 2.4.x and later whereas the rest of the changes proposed here will land in 2.6.",
        "pr_file_module": null
      }
    ]
  }
]