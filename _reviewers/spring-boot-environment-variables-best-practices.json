[
  {
    "discussion_id": "1981244786",
    "pr_number": 44493,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/build.gradle",
    "created_at": "2025-03-05T11:40:56+00:00",
    "commented_code": "testImplementation(\"org.springframework.restdocs:spring-restdocs-webtestclient\")\n \ttestImplementation(\"org.springframework.security:spring-security-test\")\n \ttestImplementation(\"org.yaml:snakeyaml\")\n+\ttestImplementation(\"uk.org.webcompere:system-stubs-jupiter:2.1.7\")",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1981244786",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44493,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/build.gradle",
        "discussion_id": "1981244786",
        "commented_code": "@@ -175,6 +175,7 @@ dependencies {\n \ttestImplementation(\"org.springframework.restdocs:spring-restdocs-webtestclient\")\n \ttestImplementation(\"org.springframework.security:spring-security-test\")\n \ttestImplementation(\"org.yaml:snakeyaml\")\n+\ttestImplementation(\"uk.org.webcompere:system-stubs-jupiter:2.1.7\")",
        "comment_created_at": "2025-03-05T11:40:56+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "This library has been added for mocking environment variables. But on the [GitHub page](https://github.com/webcompere/system-stubs) it says:\r\n\r\n> From JDK16 onwards, there are deeper restrictions on the ability to use reflection. [...] Consequently, this library now uses bytebuddy to enable the interception of calls for reading environment variables. This might interact with your chosen version of Mockito or other libraries.\r\n\r\nI wanted to know the team's opinion if we want to have that library for tests or if we want to ditch the tests (`whenPropertiesUrlIsNotSetAndOtelExporterOtlpEndpointIsSetAdapterUrlUsesIt` and `whenPropertiesUrlIsNotSetAndOtelExporterOtlpMetricsEndpointIsSetAdapterUrlUsesIt`).",
        "pr_file_module": null
      },
      {
        "comment_id": "1981276098",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44493,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/build.gradle",
        "discussion_id": "1981244786",
        "commented_code": "@@ -175,6 +175,7 @@ dependencies {\n \ttestImplementation(\"org.springframework.restdocs:spring-restdocs-webtestclient\")\n \ttestImplementation(\"org.springframework.security:spring-security-test\")\n \ttestImplementation(\"org.yaml:snakeyaml\")\n+\ttestImplementation(\"uk.org.webcompere:system-stubs-jupiter:2.1.7\")",
        "comment_created_at": "2025-03-05T12:04:06+00:00",
        "comment_author": "nosan",
        "comment_body": "It seems like these tests verify the Micrometer `OtlpConfig` implementation rather than the `OtlpMetricsPropertiesConfigAdapter`.\r\n\r\nI believe `OtlpMetricsPropertiesConfigAdapter` tests can be a little updated to ensure that\r\nadapter delegates to `OtlpConfig.url()` when the URL is not set.\r\n\r\n```java\r\n\r\n@Test\r\nvoid whenPropertiesUrlIsNotSetAdapterUrlReturnsDefault() {\r\n\tassertThat(this.properties.getUrl()).isNull();\r\n\tassertThat(createAdapter().url()).isEqualTo(\"http://localhost:4318/v1/metrics\");\r\n}\r\n\r\n@Test\r\nvoid whenPropertiesUrlIsNotSetThanUseOtlpConfigUrlAsFallback() {\r\n\tassertThat(this.properties.getUrl()).isNull();\r\n\tOtlpMetricsPropertiesConfigAdapter adapter = spy(createAdapter());\r\n\twhen(adapter.get(\"management.otlp.metrics.export.url\")).thenReturn(\"https://my-endpoint/v1/metrics\");\r\n\tassertThat(adapter.url()).isEqualTo(\"https://my-endpoint/v1/metrics\");\r\n}\r\n\r\n```\r\n\r\nIn that case, `uk.org.webcompere:system-stubs-jupiter:2.1.7`  is unnecessary.",
        "pr_file_module": null
      },
      {
        "comment_id": "1981309955",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44493,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/build.gradle",
        "discussion_id": "1981244786",
        "commented_code": "@@ -175,6 +175,7 @@ dependencies {\n \ttestImplementation(\"org.springframework.restdocs:spring-restdocs-webtestclient\")\n \ttestImplementation(\"org.springframework.security:spring-security-test\")\n \ttestImplementation(\"org.yaml:snakeyaml\")\n+\ttestImplementation(\"uk.org.webcompere:system-stubs-jupiter:2.1.7\")",
        "comment_created_at": "2025-03-05T12:29:11+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I'm not in favor of trying to mock environment variables so +1 for @nosan's suggestion.\r\n\r\nMore generally, where we need to test environment variables, we try to allow the `Map` to be injected for testing purposes. If third-party code doesn't allow that then I'd prefer that we accept that it can't be tested rather than relying on reflection to hack into `System.getenv`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "816003775",
    "pr_number": 30012,
    "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/features/external-config.adoc",
    "created_at": "2022-02-28T15:39:54+00:00",
    "commented_code": "TIP: Properties that use the `[index]` notation can be bound to Java `List` or `Set` objects using Spring Boot's `Binder` class.\n For more details see the \"`<<features#features.external-config.typesafe-configuration-properties>>`\" section below.\n \n+[[features.external-config.yaml.using-env-variables-in-yaml]]\n+==== Using environment variables and default values in YAML property definitions\n+\n+In order to use environment variable as a source for application property, one can use placeholders like this: \n+\n+[source,yaml,indent=0,subs=\"verbatim\"]\n+----\n+\tenvironments:\n+\t  dev:\n+\t    url: ${DEV_ENV_URL}\n+\t    name: ${DEV_ENV_NAME:development-environment}",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "816003775",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30012,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/features/external-config.adoc",
        "discussion_id": "816003775",
        "commented_code": "@@ -608,6 +608,19 @@ The preceding example would be transformed into these properties:\n TIP: Properties that use the `[index]` notation can be bound to Java `List` or `Set` objects using Spring Boot's `Binder` class.\n For more details see the \"`<<features#features.external-config.typesafe-configuration-properties>>`\" section below.\n \n+[[features.external-config.yaml.using-env-variables-in-yaml]]\n+==== Using environment variables and default values in YAML property definitions\n+\n+In order to use environment variable as a source for application property, one can use placeholders like this: \n+\n+[source,yaml,indent=0,subs=\"verbatim\"]\n+----\n+\tenvironments:\n+\t  dev:\n+\t    url: ${DEV_ENV_URL}\n+\t    name: ${DEV_ENV_NAME:development-environment}",
        "comment_created_at": "2022-02-28T15:39:54+00:00",
        "comment_author": "62mkv",
        "comment_body": "by the way, would be great to see how to use values with spaces, or \"in quotes\", as default values",
        "pr_file_module": null
      },
      {
        "comment_id": "818592148",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30012,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/features/external-config.adoc",
        "discussion_id": "816003775",
        "commented_code": "@@ -608,6 +608,19 @@ The preceding example would be transformed into these properties:\n TIP: Properties that use the `[index]` notation can be bound to Java `List` or `Set` objects using Spring Boot's `Binder` class.\n For more details see the \"`<<features#features.external-config.typesafe-configuration-properties>>`\" section below.\n \n+[[features.external-config.yaml.using-env-variables-in-yaml]]\n+==== Using environment variables and default values in YAML property definitions\n+\n+In order to use environment variable as a source for application property, one can use placeholders like this: \n+\n+[source,yaml,indent=0,subs=\"verbatim\"]\n+----\n+\tenvironments:\n+\t  dev:\n+\t    url: ${DEV_ENV_URL}\n+\t    name: ${DEV_ENV_NAME:development-environment}",
        "comment_created_at": "2022-03-03T12:06:42+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I don't think spaces in the default makes any difference. For example, you can do this:\r\n\r\n```\r\nproperty.example=${some.other.property:The default value}\r\n```\r\n\r\nAssuming that `some.other.property` hasn't been set the value of `property.example` will default to `The default value`.",
        "pr_file_module": null
      }
    ]
  }
]