[
  {
    "discussion_id": "1189712818",
    "pr_number": 35286,
    "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/web/spring-security.adoc",
    "created_at": "2023-05-10T10:36:09+00:00",
    "commented_code": "Alternatively, you can define your own `OpaqueTokenIntrospector` bean for servlet applications or a `ReactiveOpaqueTokenIntrospector` for reactive applications.\n \n+The OAuth2 resource server now supports validating audience (aud) claims in JSON Web Tokens (JWTs) issued by an authorization server. \n+This feature is added to complement the existing validation of issuer (iss) claims.\n \n+To enable audience validation, set the `spring.security.oauth2.resourceserver.jwt.audience` property in your Spring Boot application",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1189712818",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35286,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/web/spring-security.adoc",
        "discussion_id": "1189712818",
        "commented_code": "@@ -223,7 +223,19 @@ Again, the same properties are applicable for both servlet and reactive applicat\n \n Alternatively, you can define your own `OpaqueTokenIntrospector` bean for servlet applications or a `ReactiveOpaqueTokenIntrospector` for reactive applications.\n \n+The OAuth2 resource server now supports validating audience (aud) claims in JSON Web Tokens (JWTs) issued by an authorization server. \n+This feature is added to complement the existing validation of issuer (iss) claims.\n \n+To enable audience validation, set the `spring.security.oauth2.resourceserver.jwt.audience` property in your Spring Boot application ",
        "comment_created_at": "2023-05-10T10:36:09+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "This property name is incorrect. It should be `spring.security.oauth2.resourceserver.jwt.audiences`. As previously requested, please use the `configprop:spring.security.oauth2.resourceserver.jwt.audiences[]` syntax so that the name is checked as part of the build.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1190081787",
    "pr_number": 35286,
    "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/web/spring-security.adoc",
    "created_at": "2023-05-10T15:28:35+00:00",
    "commented_code": "Alternatively, you can define your own `OpaqueTokenIntrospector` bean for servlet applications or a `ReactiveOpaqueTokenIntrospector` for reactive applications.\n \n+To enable audience validation, set the `spring.security.oauth2.resourceserver.jwt.audiences` property in your Spring Boot application \n+configuration file. This property specifies the expected value(s) of the aud claim in JWTs.\n \n+For example, to expect the JWTs to contain an aud claim with the value `my-audience`, you can add the following line to your \n+application.properties file:\n+\n+[source,yaml,indent=0,subs=\"verbatim\",configprops,configblocks]\n+----\n+configprop:spring.security.oauth2.resourceserver.jwt.audiences[]",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1190081787",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35286,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/web/spring-security.adoc",
        "discussion_id": "1190081787",
        "commented_code": "@@ -223,7 +223,23 @@ Again, the same properties are applicable for both servlet and reactive applicat\n \n Alternatively, you can define your own `OpaqueTokenIntrospector` bean for servlet applications or a `ReactiveOpaqueTokenIntrospector` for reactive applications.\n \n+To enable audience validation, set the `spring.security.oauth2.resourceserver.jwt.audiences` property in your Spring Boot application \n+configuration file. This property specifies the expected value(s) of the aud claim in JWTs.\n \n+For example, to expect the JWTs to contain an aud claim with the value `my-audience`, you can add the following line to your \n+application.properties file:\n+\n+[source,yaml,indent=0,subs=\"verbatim\",configprops,configblocks]\n+----\n+configprop:spring.security.oauth2.resourceserver.jwt.audiences[]",
        "comment_created_at": "2023-05-10T15:28:35+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "This (line 234) should not be here. It should be part of line 226.",
        "pr_file_module": null
      },
      {
        "comment_id": "1190170141",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35286,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/web/spring-security.adoc",
        "discussion_id": "1190081787",
        "commented_code": "@@ -223,7 +223,23 @@ Again, the same properties are applicable for both servlet and reactive applicat\n \n Alternatively, you can define your own `OpaqueTokenIntrospector` bean for servlet applications or a `ReactiveOpaqueTokenIntrospector` for reactive applications.\n \n+To enable audience validation, set the `spring.security.oauth2.resourceserver.jwt.audiences` property in your Spring Boot application \n+configuration file. This property specifies the expected value(s) of the aud claim in JWTs.\n \n+For example, to expect the JWTs to contain an aud claim with the value `my-audience`, you can add the following line to your \n+application.properties file:\n+\n+[source,yaml,indent=0,subs=\"verbatim\",configprops,configblocks]\n+----\n+configprop:spring.security.oauth2.resourceserver.jwt.audiences[]",
        "comment_created_at": "2023-05-10T16:46:51+00:00",
        "comment_author": "bikash30851",
        "comment_body": "I have moved it. I am afraid that the syntax might not be right. Thank you for your patience. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1190187231",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35286,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/web/spring-security.adoc",
        "discussion_id": "1190081787",
        "commented_code": "@@ -223,7 +223,23 @@ Again, the same properties are applicable for both servlet and reactive applicat\n \n Alternatively, you can define your own `OpaqueTokenIntrospector` bean for servlet applications or a `ReactiveOpaqueTokenIntrospector` for reactive applications.\n \n+To enable audience validation, set the `spring.security.oauth2.resourceserver.jwt.audiences` property in your Spring Boot application \n+configuration file. This property specifies the expected value(s) of the aud claim in JWTs.\n \n+For example, to expect the JWTs to contain an aud claim with the value `my-audience`, you can add the following line to your \n+application.properties file:\n+\n+[source,yaml,indent=0,subs=\"verbatim\",configprops,configblocks]\n+----\n+configprop:spring.security.oauth2.resourceserver.jwt.audiences[]",
        "comment_created_at": "2023-05-10T17:03:25+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "Sorry, it's still not right and you've moved it to line 229 rather than updating 226 as I requested above. Please don't make any more changes. I'll take things from here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1191589034",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35286,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/web/spring-security.adoc",
        "discussion_id": "1190081787",
        "commented_code": "@@ -223,7 +223,23 @@ Again, the same properties are applicable for both servlet and reactive applicat\n \n Alternatively, you can define your own `OpaqueTokenIntrospector` bean for servlet applications or a `ReactiveOpaqueTokenIntrospector` for reactive applications.\n \n+To enable audience validation, set the `spring.security.oauth2.resourceserver.jwt.audiences` property in your Spring Boot application \n+configuration file. This property specifies the expected value(s) of the aud claim in JWTs.\n \n+For example, to expect the JWTs to contain an aud claim with the value `my-audience`, you can add the following line to your \n+application.properties file:\n+\n+[source,yaml,indent=0,subs=\"verbatim\",configprops,configblocks]\n+----\n+configprop:spring.security.oauth2.resourceserver.jwt.audiences[]",
        "comment_created_at": "2023-05-11T19:10:49+00:00",
        "comment_author": "bikash30851",
        "comment_body": "I did a lot of troubleshooting and the build is successful now.\r\n\r\nMay I commit my changes, please? @wilkinsona \r\n\r\n<b>This is what it would look like.</b>\r\n----------------------------------------------------------------------------------------------------------------\r\n\r\nTo enable audience validation, set the `configprop:spring.security.oauth2.resourceserver.jwt.audiences[]` property in your Spring Boot application\r\nconfiguration file. This property specifies the expected value(s) of the aud claim in JWTs.\r\n\r\nFor example, to expect the JWTs to contain an aud claim with the value `my-audience`, you can add the following line to your \r\napplication.properties file:\r\n\r\n[source,yaml,indent=0,subs=\"verbatim\",configprops,configblocks]\r\n----\r\n\tspring:\r\n\t  security:\r\n\t    oauth2:\r\n\t      resourceserver:\r\n\t        jwt:\r\n\t          audiences:\r\n\t            - \"my-audience\"\r\n----\r\n---------------------------------------------------------------------------------------------------------------------",
        "pr_file_module": null
      },
      {
        "comment_id": "1191599694",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 35286,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/web/spring-security.adoc",
        "discussion_id": "1190081787",
        "commented_code": "@@ -223,7 +223,23 @@ Again, the same properties are applicable for both servlet and reactive applicat\n \n Alternatively, you can define your own `OpaqueTokenIntrospector` bean for servlet applications or a `ReactiveOpaqueTokenIntrospector` for reactive applications.\n \n+To enable audience validation, set the `spring.security.oauth2.resourceserver.jwt.audiences` property in your Spring Boot application \n+configuration file. This property specifies the expected value(s) of the aud claim in JWTs.\n \n+For example, to expect the JWTs to contain an aud claim with the value `my-audience`, you can add the following line to your \n+application.properties file:\n+\n+[source,yaml,indent=0,subs=\"verbatim\",configprops,configblocks]\n+----\n+configprop:spring.security.oauth2.resourceserver.jwt.audiences[]",
        "comment_created_at": "2023-05-11T19:23:11+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "That looks better. Please go ahead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "811650196",
    "pr_number": 29932,
    "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/features/sql.adoc",
    "created_at": "2022-02-22T07:38:10+00:00",
    "commented_code": "+[[features.sql.h2-web-console.spring-security]]\n+==== Configuring Spring Security for H2 Console\n+H2 Console uses frames and, as it's intended for development only, does not implement CSRF protection measures. If your application uses Spring Security, you need to configure it accordingly.\n+\n+For example, Spring Security will ignore the console if the following `WebSecurityCustomizer` is exposed:",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "811650196",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 29932,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/features/sql.adoc",
        "discussion_id": "811650196",
        "commented_code": "@@ -322,6 +322,21 @@ You can customize the console's path by using the configprop:spring.h2.console.p\n \n \n \n+[[features.sql.h2-web-console.spring-security]]\n+==== Configuring Spring Security for H2 Console\n+H2 Console uses frames and, as it's intended for development only, does not implement CSRF protection measures. If your application uses Spring Security, you need to configure it accordingly.\n+\n+For example, Spring Security will ignore the console if the following `WebSecurityCustomizer` is exposed:",
        "comment_created_at": "2022-02-22T07:38:10+00:00",
        "comment_author": "snicoll",
        "comment_body": "I think we need to be more explicit than \"ignoring\" and mention anybody could access it.",
        "pr_file_module": null
      },
      {
        "comment_id": "815756527",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 29932,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/features/sql.adoc",
        "discussion_id": "811650196",
        "commented_code": "@@ -322,6 +322,21 @@ You can customize the console's path by using the configprop:spring.h2.console.p\n \n \n \n+[[features.sql.h2-web-console.spring-security]]\n+==== Configuring Spring Security for H2 Console\n+H2 Console uses frames and, as it's intended for development only, does not implement CSRF protection measures. If your application uses Spring Security, you need to configure it accordingly.\n+\n+For example, Spring Security will ignore the console if the following `WebSecurityCustomizer` is exposed:",
        "comment_created_at": "2022-02-28T10:25:19+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I agree. In the context of CSRF, it would be better to just disable Security's protection rather than ignoring entirely. This is what the old (1.x) auto-configuration for the console used to do:\r\n\r\nhttps://github.com/spring-projects/spring-boot/blob/10a5cef4ef33e7c86d18e1f92793c2aaa57d5a82/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleAutoConfiguration.java#L97-L113",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "819510839",
    "pr_number": 30065,
    "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/actuator/endpoints.adoc",
    "created_at": "2022-03-04T11:58:51+00:00",
    "commented_code": "[[actuator.endpoints.security]]\n === Security\n-For security purposes, all actuators other than `/health` are disabled by default.\n-You can use the configprop:management.endpoints.web.exposure.include[] property to enable the actuators.\n+For security purposes, all actuator's endpoints that are exposed over HTTP are secret by default except `/health` endpoint.",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "819510839",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30065,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/actuator/endpoints.adoc",
        "discussion_id": "819510839",
        "commented_code": "@@ -316,8 +316,18 @@ TIP: If you want to implement your own strategy for when endpoints are exposed,\n \n [[actuator.endpoints.security]]\n === Security\n-For security purposes, all actuators other than `/health` are disabled by default.\n-You can use the configprop:management.endpoints.web.exposure.include[] property to enable the actuators.\n+For security purposes, all actuator's endpoints that are exposed over HTTP are secret by default except `/health` endpoint.",
        "comment_created_at": "2022-03-04T11:58:51+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "The goal here is to consistently use the term \"expose\" but this change uses \"secret\". I think this sentence would be better if it was something like the following:\r\n\r\n> For security purposes, only the `/health` endpoint is exposed over HTTP by default.",
        "pr_file_module": null
      },
      {
        "comment_id": "819609326",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30065,
        "pr_file": "spring-boot-project/spring-boot-docs/src/docs/asciidoc/actuator/endpoints.adoc",
        "discussion_id": "819510839",
        "commented_code": "@@ -316,8 +316,18 @@ TIP: If you want to implement your own strategy for when endpoints are exposed,\n \n [[actuator.endpoints.security]]\n === Security\n-For security purposes, all actuators other than `/health` are disabled by default.\n-You can use the configprop:management.endpoints.web.exposure.include[] property to enable the actuators.\n+For security purposes, all actuator's endpoints that are exposed over HTTP are secret by default except `/health` endpoint.",
        "comment_created_at": "2022-03-04T14:20:22+00:00",
        "comment_author": "cmabdullah",
        "comment_body": "Updated according to your suggestions, thanks for your concern.",
        "pr_file_module": null
      }
    ]
  }
]