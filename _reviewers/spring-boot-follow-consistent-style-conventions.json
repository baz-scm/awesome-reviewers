[
  {
    "discussion_id": "1678895943",
    "pr_number": 41511,
    "pr_file": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresEnvironment.java",
    "created_at": "2024-07-16T07:29:29+00:00",
    "commented_code": "}\n \n \tprivate String extractPassword(Map<String, String> env) {\n+\t\tif (hasTrustAuthMethod(env)) {\n+\t\t\treturn null;\n+\t\t}\n \t\tString password = env.getOrDefault(\"POSTGRES_PASSWORD\", env.get(\"POSTGRESQL_PASSWORD\"));\n \t\tAssert.state(StringUtils.hasLength(password), \"PostgreSQL password must be provided\");\n \t\treturn password;\n \t}\n \n+\tprivate Boolean hasTrustAuthMethod(Map<String, String> env) {\n+\t\tString postgresAuthMethod = env.getOrDefault(\"POSTGRES_HOST_AUTH_METHOD\", \"password\");\n+\t\treturn Objects.equals(postgresAuthMethod, \"trust\");",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1678895943",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 41511,
        "pr_file": "spring-boot-project/spring-boot-docker-compose/src/main/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresEnvironment.java",
        "discussion_id": "1678895943",
        "commented_code": "@@ -44,11 +46,19 @@ class PostgresEnvironment {\n \t}\n \n \tprivate String extractPassword(Map<String, String> env) {\n+\t\tif (hasTrustAuthMethod(env)) {\n+\t\t\treturn null;\n+\t\t}\n \t\tString password = env.getOrDefault(\"POSTGRES_PASSWORD\", env.get(\"POSTGRESQL_PASSWORD\"));\n \t\tAssert.state(StringUtils.hasLength(password), \"PostgreSQL password must be provided\");\n \t\treturn password;\n \t}\n \n+\tprivate Boolean hasTrustAuthMethod(Map<String, String> env) {\n+\t\tString postgresAuthMethod = env.getOrDefault(\"POSTGRES_HOST_AUTH_METHOD\", \"password\");\n+\t\treturn Objects.equals(postgresAuthMethod, \"trust\");",
        "comment_created_at": "2024-07-16T07:29:29+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "We don't really use `Objects.equals`. This could be `return \"trust\".equals(postgresAuthMethod);` instead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "868554001",
    "pr_number": 30567,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ReactiveKafkaAutoConfiguration.java",
    "created_at": "2022-05-09T22:49:03+00:00",
    "commented_code": "+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.kafka;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.sender.KafkaSender;\n+import reactor.kafka.sender.SenderOptions;\n+\n+import org.springframework.boot.autoconfigure.AutoConfiguration;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.context.properties.PropertyMapper;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for the Reactive client of Apache\n+ * Kafka.\n+ *\n+ * @author Almog Tavor\n+ * @since 2.7.0\n+ */\n+@AutoConfiguration\n+@ConditionalOnClass({ KafkaReceiver.class, KafkaSender.class })\n+@ConditionalOnBean(KafkaProperties.class)\n+@EnableConfigurationProperties(ReactiveKafkaProperties.class)\n+public class ReactiveKafkaAutoConfiguration {\n+\n+\tprivate final KafkaProperties kafkaProperties;\n+\n+\tprivate final ReactiveKafkaProperties reactiveKafkaProperties;\n+\n+\tprivate static final PropertyMapper map = PropertyMapper.get();\n+\n+\tpublic ReactiveKafkaAutoConfiguration(KafkaProperties kafkaProperties,\n+\t\t\tReactiveKafkaProperties reactiveKafkaProperties) {\n+\t\tthis.kafkaProperties = kafkaProperties;\n+\t\tthis.reactiveKafkaProperties = reactiveKafkaProperties;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(ReceiverOptions.class)\n+\tpublic <K, V> ReceiverOptions<K, V> receiverOptions() {\n+\t\tMap<String, Object> properties = this.kafkaProperties.buildConsumerProperties();\n+\t\tReceiverOptions<K, V> receiverOptions = ReceiverOptions.create(properties);\n+\t\tReactiveKafkaProperties.Receiver receiverProperties = this.reactiveKafkaProperties.getReceiver();\n+\t\treceiverOptions = setPropertyWhenGreaterThanZero(receiverProperties.getAtmostOnceCommitAheadSize(),",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "868554001",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30567,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ReactiveKafkaAutoConfiguration.java",
        "discussion_id": "868554001",
        "commented_code": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.kafka;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.sender.KafkaSender;\n+import reactor.kafka.sender.SenderOptions;\n+\n+import org.springframework.boot.autoconfigure.AutoConfiguration;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.context.properties.PropertyMapper;\n+import org.springframework.context.annotation.Bean;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for the Reactive client of Apache\n+ * Kafka.\n+ *\n+ * @author Almog Tavor\n+ * @since 2.7.0\n+ */\n+@AutoConfiguration\n+@ConditionalOnClass({ KafkaReceiver.class, KafkaSender.class })\n+@ConditionalOnBean(KafkaProperties.class)\n+@EnableConfigurationProperties(ReactiveKafkaProperties.class)\n+public class ReactiveKafkaAutoConfiguration {\n+\n+\tprivate final KafkaProperties kafkaProperties;\n+\n+\tprivate final ReactiveKafkaProperties reactiveKafkaProperties;\n+\n+\tprivate static final PropertyMapper map = PropertyMapper.get();\n+\n+\tpublic ReactiveKafkaAutoConfiguration(KafkaProperties kafkaProperties,\n+\t\t\tReactiveKafkaProperties reactiveKafkaProperties) {\n+\t\tthis.kafkaProperties = kafkaProperties;\n+\t\tthis.reactiveKafkaProperties = reactiveKafkaProperties;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean(ReceiverOptions.class)\n+\tpublic <K, V> ReceiverOptions<K, V> receiverOptions() {\n+\t\tMap<String, Object> properties = this.kafkaProperties.buildConsumerProperties();\n+\t\tReceiverOptions<K, V> receiverOptions = ReceiverOptions.create(properties);\n+\t\tReactiveKafkaProperties.Receiver receiverProperties = this.reactiveKafkaProperties.getReceiver();\n+\t\treceiverOptions = setPropertyWhenGreaterThanZero(receiverProperties.getAtmostOnceCommitAheadSize(),",
        "comment_created_at": "2022-05-09T22:49:03+00:00",
        "comment_author": "onobc",
        "comment_body": "**[NIT-PREFERENCE]** I would prefer to use the PropertyMapper API inline w/o the convenience methods below. There are many examples that do this same thing such as [CassandraAutoConfiguration](https://github.com/spring-projects/spring-boot/blob/770cb840c32869cf8f8935d6acd8e7b8e88093c8/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraAutoConfiguration.java#L166) and [JettyWebServerFactoryCustomizer](https://github.com/spring-projects/spring-boot/blob/770cb840c32869cf8f8935d6acd8e7b8e88093c8/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizer.java#L85)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1285821103",
    "pr_number": 34763,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/pulsar/PulsarAutoConfiguration.java",
    "created_at": "2023-08-07T12:49:21+00:00",
    "commented_code": "+/*\n+ * Copyright 2012-2023 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.pulsar;\n+\n+import java.util.Optional;\n+\n+import org.apache.pulsar.client.api.PulsarClient;\n+import org.apache.pulsar.client.api.PulsarClientException;\n+import org.apache.pulsar.client.api.interceptor.ProducerInterceptor;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.AutoConfiguration;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.pulsar.core.CachingPulsarProducerFactory;\n+import org.springframework.pulsar.core.DefaultPulsarClientFactory;\n+import org.springframework.pulsar.core.DefaultPulsarConsumerFactory;\n+import org.springframework.pulsar.core.DefaultPulsarProducerFactory;\n+import org.springframework.pulsar.core.DefaultPulsarReaderFactory;\n+import org.springframework.pulsar.core.DefaultSchemaResolver;\n+import org.springframework.pulsar.core.DefaultTopicResolver;\n+import org.springframework.pulsar.core.PulsarAdministration;\n+import org.springframework.pulsar.core.PulsarClientBuilderCustomizer;\n+import org.springframework.pulsar.core.PulsarConsumerFactory;\n+import org.springframework.pulsar.core.PulsarProducerFactory;\n+import org.springframework.pulsar.core.PulsarReaderFactory;\n+import org.springframework.pulsar.core.PulsarTemplate;\n+import org.springframework.pulsar.core.SchemaResolver;\n+import org.springframework.pulsar.core.SchemaResolver.SchemaResolverCustomizer;\n+import org.springframework.pulsar.core.TopicResolver;\n+import org.springframework.pulsar.function.PulsarFunction;\n+import org.springframework.pulsar.function.PulsarFunctionAdministration;\n+import org.springframework.pulsar.function.PulsarSink;\n+import org.springframework.pulsar.function.PulsarSource;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Apache Pulsar.\n+ *\n+ * @author Soby Chacko\n+ * @author Chris Bono\n+ * @author Alexander Preu\u00df\n+ * @since 3.2.0\n+ */\n+@AutoConfiguration\n+@ConditionalOnClass(PulsarTemplate.class)\n+@EnableConfigurationProperties(PulsarProperties.class)\n+@Import({ PulsarAnnotationDrivenConfiguration.class })\n+public class PulsarAutoConfiguration {\n+\n+\tprivate final PulsarProperties properties;\n+\n+\tPulsarAutoConfiguration(PulsarProperties properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tPulsarClientBuilderConfigurer pulsarClientBuilderConfigurer(PulsarProperties pulsarProperties,\n+\t\t\tObjectProvider<PulsarClientBuilderCustomizer> customizers) {\n+\t\treturn new PulsarClientBuilderConfigurer(pulsarProperties, customizers.orderedStream().toList());\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tPulsarClient pulsarClient(PulsarClientBuilderConfigurer configurer) {\n+\t\tvar clientFactory = new DefaultPulsarClientFactory(configurer::configure);",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1285821103",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 34763,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/pulsar/PulsarAutoConfiguration.java",
        "discussion_id": "1285821103",
        "commented_code": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2012-2023 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.pulsar;\n+\n+import java.util.Optional;\n+\n+import org.apache.pulsar.client.api.PulsarClient;\n+import org.apache.pulsar.client.api.PulsarClientException;\n+import org.apache.pulsar.client.api.interceptor.ProducerInterceptor;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.AutoConfiguration;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.pulsar.core.CachingPulsarProducerFactory;\n+import org.springframework.pulsar.core.DefaultPulsarClientFactory;\n+import org.springframework.pulsar.core.DefaultPulsarConsumerFactory;\n+import org.springframework.pulsar.core.DefaultPulsarProducerFactory;\n+import org.springframework.pulsar.core.DefaultPulsarReaderFactory;\n+import org.springframework.pulsar.core.DefaultSchemaResolver;\n+import org.springframework.pulsar.core.DefaultTopicResolver;\n+import org.springframework.pulsar.core.PulsarAdministration;\n+import org.springframework.pulsar.core.PulsarClientBuilderCustomizer;\n+import org.springframework.pulsar.core.PulsarConsumerFactory;\n+import org.springframework.pulsar.core.PulsarProducerFactory;\n+import org.springframework.pulsar.core.PulsarReaderFactory;\n+import org.springframework.pulsar.core.PulsarTemplate;\n+import org.springframework.pulsar.core.SchemaResolver;\n+import org.springframework.pulsar.core.SchemaResolver.SchemaResolverCustomizer;\n+import org.springframework.pulsar.core.TopicResolver;\n+import org.springframework.pulsar.function.PulsarFunction;\n+import org.springframework.pulsar.function.PulsarFunctionAdministration;\n+import org.springframework.pulsar.function.PulsarSink;\n+import org.springframework.pulsar.function.PulsarSource;\n+\n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} for Apache Pulsar.\n+ *\n+ * @author Soby Chacko\n+ * @author Chris Bono\n+ * @author Alexander Preu\u00df\n+ * @since 3.2.0\n+ */\n+@AutoConfiguration\n+@ConditionalOnClass(PulsarTemplate.class)\n+@EnableConfigurationProperties(PulsarProperties.class)\n+@Import({ PulsarAnnotationDrivenConfiguration.class })\n+public class PulsarAutoConfiguration {\n+\n+\tprivate final PulsarProperties properties;\n+\n+\tPulsarAutoConfiguration(PulsarProperties properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tPulsarClientBuilderConfigurer pulsarClientBuilderConfigurer(PulsarProperties pulsarProperties,\n+\t\t\tObjectProvider<PulsarClientBuilderCustomizer> customizers) {\n+\t\treturn new PulsarClientBuilderConfigurer(pulsarProperties, customizers.orderedStream().toList());\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tPulsarClient pulsarClient(PulsarClientBuilderConfigurer configurer) {\n+\t\tvar clientFactory = new DefaultPulsarClientFactory(configurer::configure);",
        "comment_created_at": "2023-08-07T12:49:21+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "We don't use `var` in Boot's code base. Please declare variables' types explicitly.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1419331309",
    "pr_number": 38703,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java",
    "created_at": "2023-12-07T17:24:57+00:00",
    "commented_code": "public WebSessionManager webSessionManager(ObjectProvider<WebSessionIdResolver> webSessionIdResolver) {\n \t\t\tDefaultWebSessionManager webSessionManager = new DefaultWebSessionManager();\n \t\t\tDuration timeout = this.serverProperties.getReactive().getSession().getTimeout();\n-\t\t\twebSessionManager.setSessionStore(new MaxIdleTimeInMemoryWebSessionStore(timeout));\n+\t\t\tvar maxSessions = this.serverProperties.getReactive().getSession().getMaxSessions();\n+\t\t\tvar sessionStore = new MaxIdleTimeInMemoryWebSessionStore(timeout);",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1419331309",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 38703,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java",
        "discussion_id": "1419331309",
        "commented_code": "@@ -332,7 +332,12 @@ public LocaleContextResolver localeContextResolver() {\n \t\tpublic WebSessionManager webSessionManager(ObjectProvider<WebSessionIdResolver> webSessionIdResolver) {\n \t\t\tDefaultWebSessionManager webSessionManager = new DefaultWebSessionManager();\n \t\t\tDuration timeout = this.serverProperties.getReactive().getSession().getTimeout();\n-\t\t\twebSessionManager.setSessionStore(new MaxIdleTimeInMemoryWebSessionStore(timeout));\n+\t\t\tvar maxSessions = this.serverProperties.getReactive().getSession().getMaxSessions();\n+\t\t\tvar sessionStore = new MaxIdleTimeInMemoryWebSessionStore(timeout);",
        "comment_created_at": "2023-12-07T17:24:57+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "We don't use `var` in Spring Boot's code.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1398491420",
    "pr_number": 38390,
    "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java",
    "created_at": "2023-11-19T20:45:21+00:00",
    "commented_code": "/**\n \t * {@link LoggingSystemFactory} that returns {@link LogbackLoggingSystem} if possible.\n \t */\n-\t@Order(Ordered.LOWEST_PRECEDENCE)",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1398491420",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 38390,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java",
        "discussion_id": "1398491420",
        "commented_code": "@@ -474,7 +473,7 @@ private void withLoggingSuppressed(Runnable action) {\n \t/**\n \t * {@link LoggingSystemFactory} that returns {@link LogbackLoggingSystem} if possible.\n \t */\n-\t@Order(Ordered.LOWEST_PRECEDENCE)",
        "comment_created_at": "2023-11-19T20:45:21+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "There are [several other places where we use `@Order(Ordered.LOWEST_PRECEDENCE)`. If we're going to change one, we should change them all. Personally, I don't think we should change any of them as I prefer to see the order explicitly declared.",
        "pr_file_module": null
      },
      {
        "comment_id": "1398640775",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 38390,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java",
        "discussion_id": "1398491420",
        "commented_code": "@@ -474,7 +473,7 @@ private void withLoggingSuppressed(Runnable action) {\n \t/**\n \t * {@link LoggingSystemFactory} that returns {@link LogbackLoggingSystem} if possible.\n \t */\n-\t@Order(Ordered.LOWEST_PRECEDENCE)",
        "comment_created_at": "2023-11-20T04:01:39+00:00",
        "comment_author": "abdullah-jaffer",
        "comment_body": "That makes sense for the sake of consistency, I removed it because IntelliJ usually doesn't recommend explicitly mentioning default values for annotations. Have added the constant back.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "965518533",
    "pr_number": 32214,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/OpenTelemetryConfigurations.java",
    "created_at": "2022-09-08T05:36:33+00:00",
    "commented_code": "}\n \n \t\t@Bean\n-\t\t@ConditionalOnMissingBean\n \t\tSpanProcessor otelSpanProcessor(List<SpanExporter> spanExporter) {\n \t\t\treturn SpanProcessor.composite(spanExporter.stream()\n-\t\t\t\t\t.map((exporter) -> BatchSpanProcessor.builder(exporter).build()).collect(Collectors.toList()));\n+\t\t\t\t\t.map(exporter -> BatchSpanProcessor.builder(exporter).build()).collect(Collectors.toList()));",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "965518533",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 32214,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/OpenTelemetryConfigurations.java",
        "discussion_id": "965518533",
        "commented_code": "@@ -105,10 +120,9 @@ Sampler otelSampler(TracingProperties properties) {\n \t\t}\n \n \t\t@Bean\n-\t\t@ConditionalOnMissingBean\n \t\tSpanProcessor otelSpanProcessor(List<SpanExporter> spanExporter) {\n \t\t\treturn SpanProcessor.composite(spanExporter.stream()\n-\t\t\t\t\t.map((exporter) -> BatchSpanProcessor.builder(exporter).build()).collect(Collectors.toList()));\n+\t\t\t\t\t.map(exporter -> BatchSpanProcessor.builder(exporter).build()).collect(Collectors.toList()));",
        "comment_created_at": "2022-09-08T05:36:33+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "`(exporter) ->` is Spring Boot's code style and this doesn't pass Checkstyle. Please build your changes before submitting them.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1923866364",
    "pr_number": 43876,
    "pr_file": "buildSrc/src/main/java/org/springframework/boot/build/bom/Library.java",
    "created_at": "2025-01-21T14:49:15+00:00",
    "commented_code": "public record Link(String rootName, Function<LibraryVersion, String> factory, List<String> packages) {\n \n-\t\tprivate static final Pattern PACKAGE_EXPAND = Pattern.compile(\"^(.*)\\\\[(.*)\\\\]$\");\n+\t\tprivate static final Pattern PACKAGE_EXPAND = Pattern.compile(\"^(.*)\\\\[(.*)]$\");",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1923866364",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 43876,
        "pr_file": "buildSrc/src/main/java/org/springframework/boot/build/bom/Library.java",
        "discussion_id": "1923866364",
        "commented_code": "@@ -541,7 +541,7 @@ public String toString() {\n \n \tpublic record Link(String rootName, Function<LibraryVersion, String> factory, List<String> packages) {\n \n-\t\tprivate static final Pattern PACKAGE_EXPAND = Pattern.compile(\"^(.*)\\\\[(.*)\\\\]$\");\n+\t\tprivate static final Pattern PACKAGE_EXPAND = Pattern.compile(\"^(.*)\\\\[(.*)]$\");",
        "comment_created_at": "2025-01-21T14:49:15+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "We're still escaping the opening `[` but the closing `]` is no longer escaped. I think the parser may cope with that but I find the expression harder to read as you have to know that the parser treats the `]` as a plain `]` rather than closing a never-opened character set. Please revert.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1775109911",
    "pr_number": 42416,
    "pr_file": "spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java",
    "created_at": "2024-09-25T12:10:04+00:00",
    "commented_code": "/**\n \t * A container image suitable for testing Redis via Bitnami.\n \t */\n-\tBITNAMI_REDIS(\"bitnami/redis\", \"7.2.4\");\n+\tBITNAMI_REDIS(\"bitnami/redis\", \"7.2.4\"),\n+\n+\t/**\n+\t * A container image suitable for testing Hazelcast.\n+\t */\n+\tHAZELCAST(\"hazelcast/hazelcast\", \"5.5.0-slim\", () -> HazelcastContainer.class);",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1775109911",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 42416,
        "pr_file": "spring-boot-project/spring-boot-tools/spring-boot-test-support-docker/src/main/java/org/springframework/boot/testsupport/container/TestImage.java",
        "discussion_id": "1775109911",
        "commented_code": "@@ -272,7 +272,12 @@ public enum TestImage {\n \t/**\n \t * A container image suitable for testing Redis via Bitnami.\n \t */\n-\tBITNAMI_REDIS(\"bitnami/redis\", \"7.2.4\");\n+\tBITNAMI_REDIS(\"bitnami/redis\", \"7.2.4\"),\n+\n+\t/**\n+\t * A container image suitable for testing Hazelcast.\n+\t */\n+\tHAZELCAST(\"hazelcast/hazelcast\", \"5.5.0-slim\", () -> HazelcastContainer.class);",
        "comment_created_at": "2024-09-25T12:10:04+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "The values in that enum should be sorted alphabetically. (All the bitnami images are at the bottom).",
        "pr_file_module": null
      }
    ]
  }
]