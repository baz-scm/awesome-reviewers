[
  {
    "discussion_id": "1987019596",
    "pr_number": 44655,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
    "created_at": "2025-03-10T10:33:03+00:00",
    "commented_code": "}\n \n+\tpublic static class OpenTelemetry {\n+\n+\t\t/**\n+\t\t * Batch Span Processor configuration.\n+\t\t */\n+\t\tprivate final BatchSpanProcessor batchSpanProcessor = new BatchSpanProcessor();\n+\n+\t\tpublic BatchSpanProcessor getBatchSpanProcessor() {",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1987019596",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44655,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
        "discussion_id": "1987019596",
        "commented_code": "@@ -293,4 +303,87 @@ public void setSpanJoiningSupported(boolean spanJoiningSupported) {\n \n \t}\n \n+\tpublic static class OpenTelemetry {\n+\n+\t\t/**\n+\t\t * Batch Span Processor configuration.\n+\t\t */\n+\t\tprivate final BatchSpanProcessor batchSpanProcessor = new BatchSpanProcessor();\n+\n+\t\tpublic BatchSpanProcessor getBatchSpanProcessor() {",
        "comment_created_at": "2025-03-10T10:33:03+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "I'd prefer a different naming. Just `batch` perhaps?",
        "pr_file_module": null
      },
      {
        "comment_id": "1987039285",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44655,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
        "discussion_id": "1987019596",
        "commented_code": "@@ -293,4 +303,87 @@ public void setSpanJoiningSupported(boolean spanJoiningSupported) {\n \n \t}\n \n+\tpublic static class OpenTelemetry {\n+\n+\t\t/**\n+\t\t * Batch Span Processor configuration.\n+\t\t */\n+\t\tprivate final BatchSpanProcessor batchSpanProcessor = new BatchSpanProcessor();\n+\n+\t\tpublic BatchSpanProcessor getBatchSpanProcessor() {",
        "comment_created_at": "2025-03-10T10:45:50+00:00",
        "comment_author": "nosan",
        "comment_body": "`batch` sounds great, but Iâ€™m concerned about what might happen if `OpenTelemetry`\r\nintroduces a new feature also prefixed with `BatchXxxYyy`. In that case, `batch` could\r\nbecome ambiguous.\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1987232665",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44655,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
        "discussion_id": "1987019596",
        "commented_code": "@@ -293,4 +303,87 @@ public void setSpanJoiningSupported(boolean spanJoiningSupported) {\n \n \t}\n \n+\tpublic static class OpenTelemetry {\n+\n+\t\t/**\n+\t\t * Batch Span Processor configuration.\n+\t\t */\n+\t\tprivate final BatchSpanProcessor batchSpanProcessor = new BatchSpanProcessor();\n+\n+\t\tpublic BatchSpanProcessor getBatchSpanProcessor() {",
        "comment_created_at": "2025-03-10T12:56:26+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "`spanbatching`? We try to not use dashes in parts before the final property name.",
        "pr_file_module": null
      },
      {
        "comment_id": "1987237160",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44655,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
        "discussion_id": "1987019596",
        "commented_code": "@@ -293,4 +303,87 @@ public void setSpanJoiningSupported(boolean spanJoiningSupported) {\n \n \t}\n \n+\tpublic static class OpenTelemetry {\n+\n+\t\t/**\n+\t\t * Batch Span Processor configuration.\n+\t\t */\n+\t\tprivate final BatchSpanProcessor batchSpanProcessor = new BatchSpanProcessor();\n+\n+\t\tpublic BatchSpanProcessor getBatchSpanProcessor() {",
        "comment_created_at": "2025-03-10T12:58:33+00:00",
        "comment_author": "nosan",
        "comment_body": "How about **.batchspan.xxx**? \r\n\r\n`management.tracing.opentelemetry.batchspan.export-unsampled-spans` **batchspan**\r\n`management.tracing.opentelemetry.batchspanprocessor.export-unsampled-spans` **batchspanprocessor**\r\n`management.tracing.opentelemetry.spanbatching.export-unsampled-spans` **spanbatching**\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1987264130",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44655,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
        "discussion_id": "1987019596",
        "commented_code": "@@ -293,4 +303,87 @@ public void setSpanJoiningSupported(boolean spanJoiningSupported) {\n \n \t}\n \n+\tpublic static class OpenTelemetry {\n+\n+\t\t/**\n+\t\t * Batch Span Processor configuration.\n+\t\t */\n+\t\tprivate final BatchSpanProcessor batchSpanProcessor = new BatchSpanProcessor();\n+\n+\t\tpublic BatchSpanProcessor getBatchSpanProcessor() {",
        "comment_created_at": "2025-03-10T13:15:25+00:00",
        "comment_author": "nosan",
        "comment_body": "I'm not sure, but in my opinion, `batchspanprocessor`  seems like the most logical choice.  Can't argue that it looks a bit ugly.",
        "pr_file_module": null
      },
      {
        "comment_id": "1987288375",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44655,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
        "discussion_id": "1987019596",
        "commented_code": "@@ -293,4 +303,87 @@ public void setSpanJoiningSupported(boolean spanJoiningSupported) {\n \n \t}\n \n+\tpublic static class OpenTelemetry {\n+\n+\t\t/**\n+\t\t * Batch Span Processor configuration.\n+\t\t */\n+\t\tprivate final BatchSpanProcessor batchSpanProcessor = new BatchSpanProcessor();\n+\n+\t\tpublic BatchSpanProcessor getBatchSpanProcessor() {",
        "comment_created_at": "2025-03-10T13:29:36+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I wonder if it would be better if we ignored that fact that it's `BatchSpanProcessor` that's the component that's doing the exporting and focussed instead on the properties affecting span export.\r\n\r\n\r\n```\r\nmanagement.tracing.opentelemetry.span.export.include-unsampled\r\nmanagement.tracing.opentelemetry.span.export.schedule-delay\r\nmanagement.tracing.opentelemetry.span.export.timeout\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1987748365",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44655,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
        "discussion_id": "1987019596",
        "commented_code": "@@ -293,4 +303,87 @@ public void setSpanJoiningSupported(boolean spanJoiningSupported) {\n \n \t}\n \n+\tpublic static class OpenTelemetry {\n+\n+\t\t/**\n+\t\t * Batch Span Processor configuration.\n+\t\t */\n+\t\tprivate final BatchSpanProcessor batchSpanProcessor = new BatchSpanProcessor();\n+\n+\t\tpublic BatchSpanProcessor getBatchSpanProcessor() {",
        "comment_created_at": "2025-03-10T17:38:42+00:00",
        "comment_author": "nosan",
        "comment_body": ">  that's the component that's doing the exporting and focussed instead on the properties affecting span export.\r\n\r\nHowever, these properties only impact the `BatchSpanProcessor` and cannot be applied, for instance, to the `SimpleSpanProcessor` or other processors. In my opinion, there should be some indication that these properties are intended for batch processing.\r\n\r\nMaybe, `management.tracing.opentelemetry.span.export.batch.include-unsampled`, in case of the `SimpleSpanProcessor` there could be: `management.tracing.opentelemetry.span.export.simple.include-unsampled`, etc.   (though the name is quite long) \r\n\r\n\r\nBoth `management.tracing.opentelemetry.span.export.include-unsampled` and `management.tracing.opentelemetry.span.export.batch.include-unsampled` seem much more complex to me compared to the simpler and more straightforward `management.tracing.opentelemetry.batchspanprocessor.export-unsampled-spans`\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1988988233",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44655,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
        "discussion_id": "1987019596",
        "commented_code": "@@ -293,4 +303,87 @@ public void setSpanJoiningSupported(boolean spanJoiningSupported) {\n \n \t}\n \n+\tpublic static class OpenTelemetry {\n+\n+\t\t/**\n+\t\t * Batch Span Processor configuration.\n+\t\t */\n+\t\tprivate final BatchSpanProcessor batchSpanProcessor = new BatchSpanProcessor();\n+\n+\t\tpublic BatchSpanProcessor getBatchSpanProcessor() {",
        "comment_created_at": "2025-03-11T11:03:28+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "> However, these properties only impact the BatchSpanProcessor and cannot be applied, for instance, to the SimpleSpanProcessor or other processors.\r\n\r\nBoot doesn't auto-configure the `SimpleSpanProcessor` so hopefully that confusion will not arise. The property names make no mention of processing so hopefully no one will expect them to apply to other processors either.\r\n\r\n>  In my opinion, there should be some indication that these properties are intended for batch processing\r\n\r\nDoesn't the `max-batch-size` property (that we omitted in the property examples above) do that?\r\n\r\nThe complete set of properties would be:\r\n\r\n```\r\nmanagement.tracing.opentelemetry.span.export.include-unsampled\r\nmanagement.tracing.opentelemetry.span.export.max-batch-size\r\nmanagement.tracing.opentelemetry.span.export.max-queue-size\r\nmanagement.tracing.opentelemetry.span.export.schedule-delay\r\nmanagement.tracing.opentelemetry.span.export.timeout\r\n```\r\n\r\nI'm not totally sold on the prefix here. In part, it's the `otlp` vs `opentelemetry` problem again. I think this export may use Zipkin or OTLP depending on which of `ZipkinSpanExporter`, `OtlpHttpSpanExporter`, and `OtlpGrpcSpanExporter` has been auto-configured. We already have a couple of export-related properties for those:\r\n\r\n- `management.otlp.tracing.export.enabled`\r\n- `management.zipkin.tracing.export.enabled`",
        "pr_file_module": null
      },
      {
        "comment_id": "1989146548",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44655,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
        "discussion_id": "1987019596",
        "commented_code": "@@ -293,4 +303,87 @@ public void setSpanJoiningSupported(boolean spanJoiningSupported) {\n \n \t}\n \n+\tpublic static class OpenTelemetry {\n+\n+\t\t/**\n+\t\t * Batch Span Processor configuration.\n+\t\t */\n+\t\tprivate final BatchSpanProcessor batchSpanProcessor = new BatchSpanProcessor();\n+\n+\t\tpublic BatchSpanProcessor getBatchSpanProcessor() {",
        "comment_created_at": "2025-03-11T12:28:55+00:00",
        "comment_author": "nosan",
        "comment_body": "> Doesn't the max-batch-size property (that we omitted in the property examples above) do\r\n> that?\r\n\r\nFair enough ðŸ˜„\r\n\r\n> I'm not totally sold on the prefix here. In part, it's the otlp vs opentelemetry problem\r\n> again.\r\n\r\nI had the same feeling when I was choosing between the `otlp` and `opentelemetry`\r\nprefixes but ended up using the latter.\r\n\r\nI am curious whether `.span.` is needed at all, since OpenTelemetry exports only spans. \r\n\r\n```properties\r\nmanagement.tracing.opentelemetry.export.include-unsampled\r\nmanagement.tracing.opentelemetry.export.max-batch-size\r\nmanagement.tracing.opentelemetry.export.max-queue-size\r\nmanagement.tracing.opentelemetry.export.schedule-delay\r\nmanagement.tracing.opentelemetry.export.timeout\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1989155008",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44655,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
        "discussion_id": "1987019596",
        "commented_code": "@@ -293,4 +303,87 @@ public void setSpanJoiningSupported(boolean spanJoiningSupported) {\n \n \t}\n \n+\tpublic static class OpenTelemetry {\n+\n+\t\t/**\n+\t\t * Batch Span Processor configuration.\n+\t\t */\n+\t\tprivate final BatchSpanProcessor batchSpanProcessor = new BatchSpanProcessor();\n+\n+\t\tpublic BatchSpanProcessor getBatchSpanProcessor() {",
        "comment_created_at": "2025-03-11T12:33:14+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I think `opentelemetry` is better here as this is configuring parts of the OpenTelemetry SDK. The protocol used for the export won't necessarily by OTLP so I think `otlp` would be inaccurate. This naming and its subtleties are more complex than we'd like but that complexity isn't of our making and there's only so much we can do to hide it.\r\n\r\n+1 for dropping `.span.` from the names.",
        "pr_file_module": null
      },
      {
        "comment_id": "1989175862",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44655,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
        "discussion_id": "1987019596",
        "commented_code": "@@ -293,4 +303,87 @@ public void setSpanJoiningSupported(boolean spanJoiningSupported) {\n \n \t}\n \n+\tpublic static class OpenTelemetry {\n+\n+\t\t/**\n+\t\t * Batch Span Processor configuration.\n+\t\t */\n+\t\tprivate final BatchSpanProcessor batchSpanProcessor = new BatchSpanProcessor();\n+\n+\t\tpublic BatchSpanProcessor getBatchSpanProcessor() {",
        "comment_created_at": "2025-03-11T12:41:56+00:00",
        "comment_author": "nosan",
        "comment_body": "@mhalbritter\r\nWhat do you think? Do you have any concerns on your side?",
        "pr_file_module": null
      },
      {
        "comment_id": "1991068888",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44655,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/TracingProperties.java",
        "discussion_id": "1987019596",
        "commented_code": "@@ -293,4 +303,87 @@ public void setSpanJoiningSupported(boolean spanJoiningSupported) {\n \n \t}\n \n+\tpublic static class OpenTelemetry {\n+\n+\t\t/**\n+\t\t * Batch Span Processor configuration.\n+\t\t */\n+\t\tprivate final BatchSpanProcessor batchSpanProcessor = new BatchSpanProcessor();\n+\n+\t\tpublic BatchSpanProcessor getBatchSpanProcessor() {",
        "comment_created_at": "2025-03-12T09:42:03+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "That sounds good to me. `opentelemetry` is the right prefix here, as it's not tied to OTLP. Dropping `span` is a good idea.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1775069868",
    "pr_number": 42443,
    "pr_file": "spring-boot-project/spring-boot-testcontainers/src/dockerTest/java/org/springframework/boot/testcontainers/service/connection/amqp/RabbitStreamContainerConnectionDetailsFactoryIntegrationTests.java",
    "created_at": "2024-09-25T11:40:31+00:00",
    "commented_code": "+/*\n+ * Copyright 2012-2024 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.testcontainers.service.connection.amqp;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.rabbitmq.stream.Address;\n+import com.rabbitmq.stream.Environment;\n+import org.awaitility.Awaitility;\n+import org.junit.jupiter.api.Test;\n+import org.testcontainers.containers.RabbitMQContainer;\n+import org.testcontainers.images.builder.Transferable;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n+\n+import org.springframework.amqp.rabbit.annotation.RabbitListener;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.ImportAutoConfiguration;\n+import org.springframework.boot.autoconfigure.amqp.EnvironmentBuilderCustomizer;\n+import org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\n+import org.springframework.boot.autoconfigure.amqp.RabbitStreamConnectionDetails;\n+import org.springframework.boot.testcontainers.service.connection.ServiceConnection;\n+import org.springframework.boot.testsupport.container.TestImage;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.rabbit.stream.producer.RabbitStreamTemplate;\n+import org.springframework.rabbit.stream.support.StreamAdmin;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Tests for {@link RabbitStreamContainerConnectionDetailsFactory}.\n+ *\n+ * @author EddÃº MelÃ©ndez\n+ */\n+@SpringJUnitConfig\n+@TestPropertySource(\n+\t\tproperties = { \"spring.rabbitmq.stream.name=stream.queue1\", \"spring.rabbitmq.listener.type=stream\" })\n+@Testcontainers(disabledWithoutDocker = true)\n+class RabbitStreamContainerConnectionDetailsFactoryIntegrationTests {\n+\n+\tprivate static final int RABBITMQ_STREAMS_PORT = 5552;\n+\n+\t@Container\n+\t@ServiceConnection\n+\tstatic final RabbitMQContainer rabbit = getRabbitMqStreamContainer();\n+\n+\tprivate static RabbitMQContainer getRabbitMqStreamContainer() {\n+\t\tRabbitMQContainer container = TestImage.container(RabbitMQContainer.class);\n+\t\tcontainer.addExposedPorts(RABBITMQ_STREAMS_PORT);\n+\t\tvar enabledPlugins = \"[rabbitmq_stream,rabbitmq_prometheus].\";",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1775069868",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 42443,
        "pr_file": "spring-boot-project/spring-boot-testcontainers/src/dockerTest/java/org/springframework/boot/testcontainers/service/connection/amqp/RabbitStreamContainerConnectionDetailsFactoryIntegrationTests.java",
        "discussion_id": "1775069868",
        "commented_code": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2012-2024 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.testcontainers.service.connection.amqp;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.rabbitmq.stream.Address;\n+import com.rabbitmq.stream.Environment;\n+import org.awaitility.Awaitility;\n+import org.junit.jupiter.api.Test;\n+import org.testcontainers.containers.RabbitMQContainer;\n+import org.testcontainers.images.builder.Transferable;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n+\n+import org.springframework.amqp.rabbit.annotation.RabbitListener;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.ImportAutoConfiguration;\n+import org.springframework.boot.autoconfigure.amqp.EnvironmentBuilderCustomizer;\n+import org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\n+import org.springframework.boot.autoconfigure.amqp.RabbitStreamConnectionDetails;\n+import org.springframework.boot.testcontainers.service.connection.ServiceConnection;\n+import org.springframework.boot.testsupport.container.TestImage;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.rabbit.stream.producer.RabbitStreamTemplate;\n+import org.springframework.rabbit.stream.support.StreamAdmin;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Tests for {@link RabbitStreamContainerConnectionDetailsFactory}.\n+ *\n+ * @author EddÃº MelÃ©ndez\n+ */\n+@SpringJUnitConfig\n+@TestPropertySource(\n+\t\tproperties = { \"spring.rabbitmq.stream.name=stream.queue1\", \"spring.rabbitmq.listener.type=stream\" })\n+@Testcontainers(disabledWithoutDocker = true)\n+class RabbitStreamContainerConnectionDetailsFactoryIntegrationTests {\n+\n+\tprivate static final int RABBITMQ_STREAMS_PORT = 5552;\n+\n+\t@Container\n+\t@ServiceConnection\n+\tstatic final RabbitMQContainer rabbit = getRabbitMqStreamContainer();\n+\n+\tprivate static RabbitMQContainer getRabbitMqStreamContainer() {\n+\t\tRabbitMQContainer container = TestImage.container(RabbitMQContainer.class);\n+\t\tcontainer.addExposedPorts(RABBITMQ_STREAMS_PORT);\n+\t\tvar enabledPlugins = \"[rabbitmq_stream,rabbitmq_prometheus].\";",
        "comment_created_at": "2024-09-25T11:40:31+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "We don't use `var` in the codebase.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1626232784",
    "pr_number": 40986,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java",
    "created_at": "2024-06-04T15:34:45+00:00",
    "commented_code": "assertThat(RuntimeHintsPredicates.resource().forResource(\"db/changelog/tables/init.sql\")).accepts(hints);\n \t}\n \n+\t@Test\n+\tvoid customizer() {",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1626232784",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 40986,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java",
        "discussion_id": "1626232784",
        "commented_code": "@@ -532,6 +535,14 @@ void shouldRegisterHints() {\n \t\tassertThat(RuntimeHintsPredicates.resource().forResource(\"db/changelog/tables/init.sql\")).accepts(hints);\n \t}\n \n+\t@Test\n+\tvoid customizer() {",
        "comment_created_at": "2024-06-04T15:34:45+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "We prefer longer names for test methods that describe what's being tested. Something like `whenCustomizerBeanIsDefinedThenItIsConfiguredOnSpringLiquibase`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1169242444",
    "pr_number": 34945,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/SdkTracerProviderCustomizer.java",
    "created_at": "2023-04-17T20:36:07+00:00",
    "commented_code": "+/*\n+ * Copyright 2012-2023 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.tracing;\n+\n+import io.opentelemetry.sdk.trace.SdkTracerProviderBuilder;\n+\n+/**\n+ * Callback interface that can be used to customize auto-configured\n+ * {@link SdkTracerProviderBuilder}.\n+ *\n+ * @author Yanming Zhou\n+ * @since 3.1.0\n+ */\n+@FunctionalInterface\n+public interface SdkTracerProviderCustomizer {",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1169242444",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 34945,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/SdkTracerProviderCustomizer.java",
        "discussion_id": "1169242444",
        "commented_code": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2012-2023 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.tracing;\n+\n+import io.opentelemetry.sdk.trace.SdkTracerProviderBuilder;\n+\n+/**\n+ * Callback interface that can be used to customize auto-configured\n+ * {@link SdkTracerProviderBuilder}.\n+ *\n+ * @author Yanming Zhou\n+ * @since 3.1.0\n+ */\n+@FunctionalInterface\n+public interface SdkTracerProviderCustomizer {",
        "comment_created_at": "2023-04-17T20:36:07+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I think this should be called `SdkTracerProviderBuilderCustomizer`. We can take care of that as part of merging it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1169401408",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 34945,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/SdkTracerProviderCustomizer.java",
        "discussion_id": "1169242444",
        "commented_code": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2012-2023 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.tracing;\n+\n+import io.opentelemetry.sdk.trace.SdkTracerProviderBuilder;\n+\n+/**\n+ * Callback interface that can be used to customize auto-configured\n+ * {@link SdkTracerProviderBuilder}.\n+ *\n+ * @author Yanming Zhou\n+ * @since 3.1.0\n+ */\n+@FunctionalInterface\n+public interface SdkTracerProviderCustomizer {",
        "comment_created_at": "2023-04-18T01:31:45+00:00",
        "comment_author": "quaff",
        "comment_body": "Actually I named it that at first, after some thoughts, I think `SdkTracerProviderCustomizer` is identical to `SdkTracerProviderBuilderCustomizer`, because `SdkTracerProvider` cannot constructed without `SdkTracerProviderBuilder`, and the only purpose of `SdkTracerProviderBuilder` is building `SdkTracerProvider`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1169607012",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 34945,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/SdkTracerProviderCustomizer.java",
        "discussion_id": "1169242444",
        "commented_code": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2012-2023 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.tracing;\n+\n+import io.opentelemetry.sdk.trace.SdkTracerProviderBuilder;\n+\n+/**\n+ * Callback interface that can be used to customize auto-configured\n+ * {@link SdkTracerProviderBuilder}.\n+ *\n+ * @author Yanming Zhou\n+ * @since 3.1.0\n+ */\n+@FunctionalInterface\n+public interface SdkTracerProviderCustomizer {",
        "comment_created_at": "2023-04-18T07:25:24+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I think we should aim for consistency with other similar interfaces that already exist. We have many that are named `â€¦BuilderCustomizer` because the class that they are customising is a `â€¦Builder`. The same applies here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "857463587",
    "pr_number": 30773,
    "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java",
    "created_at": "2022-04-25T10:05:33+00:00",
    "commented_code": "int i2 = 0;\n \t\twhile (i1 < l1) {\n \t\t\tif (i2 >= l2) {\n-\t\t\t\treturn remainderIsNotAlphaNumberic(e1, i, i1);\n+\t\t\t\treturn remainderIsNotAlphaNumeric(e1, i, i1);",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "857463587",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30773,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java",
        "discussion_id": "857463587",
        "commented_code": "@@ -448,7 +448,7 @@ private boolean defaultElementEquals(Elements e1, Elements e2, int i) {\n \t\tint i2 = 0;\n \t\twhile (i1 < l1) {\n \t\t\tif (i2 >= l2) {\n-\t\t\t\treturn remainderIsNotAlphaNumberic(e1, i, i1);\n+\t\t\t\treturn remainderIsNotAlphaNumeric(e1, i, i1);",
        "comment_created_at": "2022-04-25T10:05:33+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "For consistency with `alpha-numeric -> alphanumeric`, this method should be renamed to `remainderIsNotAlphanumeric`.",
        "pr_file_module": null
      },
      {
        "comment_id": "857915105",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30773,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java",
        "discussion_id": "857463587",
        "commented_code": "@@ -448,7 +448,7 @@ private boolean defaultElementEquals(Elements e1, Elements e2, int i) {\n \t\tint i2 = 0;\n \t\twhile (i1 < l1) {\n \t\t\tif (i2 >= l2) {\n-\t\t\t\treturn remainderIsNotAlphaNumberic(e1, i, i1);\n+\t\t\t\treturn remainderIsNotAlphaNumeric(e1, i, i1);",
        "comment_created_at": "2022-04-25T18:33:03+00:00",
        "comment_author": "marcwrobel",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "806539668",
    "pr_number": 29812,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java",
    "created_at": "2022-02-15T07:48:22+00:00",
    "commented_code": "private final Security security = new Security();\n \n+\tprivate final RetryTopic retryTopic = new RetryTopic();",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "806539668",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 29812,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java",
        "discussion_id": "806539668",
        "commented_code": "@@ -93,6 +94,8 @@\n \n \tprivate final Security security = new Security();\n \n+\tprivate final RetryTopic retryTopic = new RetryTopic();",
        "comment_created_at": "2022-02-15T07:48:22+00:00",
        "comment_author": "snicoll",
        "comment_body": "This would create a `retry-topic` group and we don't use dashes in group parts. Perhaps a `Retry` inner type with a `Topic` if that makes sense to separate them. This would give `spring.kafka.retry.topic`. ",
        "pr_file_module": null
      },
      {
        "comment_id": "807057197",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 29812,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java",
        "discussion_id": "806539668",
        "commented_code": "@@ -93,6 +94,8 @@\n \n \tprivate final Security security = new Security();\n \n+\tprivate final RetryTopic retryTopic = new RetryTopic();",
        "comment_created_at": "2022-02-15T16:47:40+00:00",
        "comment_author": "tomazfernandes",
        "comment_body": "I see, thanks. I think it might make sense to separate these because, although we currently don't have support for blocking retries auto-configuration, if we do add that in the future the `Retry` class and group would already be there.\r\n\r\nIn this sense, maybe `retry.non-blocking` or `retry.topic-based` would be better names, but then we'd get back to the dashing problem. So I think `retry.topic` is a good call, and is consistent with how we name the feature throughout the code.\r\n\r\nOf course, if anyone has a different idea please let me know - naming things is often so much harder than making them work.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "846111876",
    "pr_number": 30251,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/wavefront/WavefrontProperties.java",
    "created_at": "2022-04-08T13:28:16+00:00",
    "commented_code": "+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.wavefront;\n+\n+import java.net.InetAddress;\n+import java.net.URI;\n+import java.net.UnknownHostException;\n+import java.time.Duration;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.properties.PushRegistryProperties;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.source.InvalidConfigurationPropertyValueException;\n+import org.springframework.util.unit.DataSize;\n+\n+/**\n+ * Configuration properties to configure Wavefront.\n+ *\n+ * @author Moritz Halbritter\n+ * @since 3.0.0\n+ */\n+@ConfigurationProperties(prefix = \"management.wavefront\")\n+public class WavefrontProperties {\n+\n+\t/**\n+\t * URI to ship metrics to.\n+\t */\n+\tprivate URI uri = URI.create(\"https://longboard.wavefront.com\");\n+\n+\t/**\n+\t * Unique identifier for the app instance that is the source of metrics being\n+\t * published to Wavefront. Defaults to the local host name.\n+\t */\n+\tprivate String source;\n+\n+\t/**\n+\t * API token used when publishing metrics directly to the Wavefront API host.\n+\t */\n+\tprivate String apiToken;\n+\n+\t/**\n+\t * Sender configuration.\n+\t */\n+\tprivate final Sender sender = new Sender();\n+\n+\t/**\n+\t * Metrics configuration.\n+\t */\n+\tprivate final Metrics metrics = new Metrics();\n+\n+\t/**\n+\t * Tracing configuration.\n+\t */\n+\tprivate final Tracing tracing = new Tracing();\n+\n+\tpublic Sender getSender() {\n+\t\treturn this.sender;\n+\t}\n+\n+\tpublic Metrics getMetrics() {\n+\t\treturn this.metrics;\n+\t}\n+\n+\tpublic Tracing getTracing() {\n+\t\treturn this.tracing;\n+\t}\n+\n+\tpublic URI getUri() {\n+\t\treturn this.uri;\n+\t}\n+\n+\tpublic void setUri(URI uri) {\n+\t\tthis.uri = uri;\n+\t}\n+\n+\tpublic String getSource() {\n+\t\treturn this.source;\n+\t}\n+\n+\tpublic void setSource(String source) {\n+\t\tthis.source = source;\n+\t}\n+\n+\tpublic String getApiToken() {\n+\t\treturn this.apiToken;\n+\t}\n+\n+\tpublic void setApiToken(String apiToken) {\n+\t\tthis.apiToken = apiToken;\n+\t}\n+\n+\t/**\n+\t * Returns the effective URI of the wavefront instance. This will not be the same URI\n+\t * given through {@link #setUri(URI)} when a proxy is used.\n+\t * @return the effective URI of the wavefront instance\n+\t */\n+\tpublic URI getEffectiveUri() {\n+\t\tif (usesProxy()) {\n+\t\t\t// See io.micrometer.wavefront.WavefrontMeterRegistry.getWavefrontReportingUri\n+\t\t\treturn URI.create(this.uri.toString().replace(\"proxy://\", \"http://\"));\n+\t\t}\n+\t\treturn this.uri;\n+\t}\n+\n+\t/**\n+\t * Returns the API token or throws an exception if the API token is mandatory. If a\n+\t * proxy is used, the API token is optional.\n+\t * @return the API token\n+\t */\n+\tpublic String getApiTokenOrThrow() {\n+\t\tif (this.apiToken == null && !usesProxy()) {\n+\t\t\tthrow new InvalidConfigurationPropertyValueException(\"management.wavefront.api-token\", null,\n+\t\t\t\t\t\"This property is mandatory whenever publishing directly to the Wavefront API\");\n+\t\t}\n+\t\treturn this.apiToken;\n+\t}\n+\n+\tpublic String getSourceOrDefault() {\n+\t\tif (this.source != null) {\n+\t\t\treturn this.source;\n+\t\t}\n+\t\treturn getSourceDefault();\n+\t}\n+\n+\tprivate String getSourceDefault() {\n+\t\ttry {\n+\t\t\treturn InetAddress.getLocalHost().getHostName();\n+\t\t}\n+\t\tcatch (UnknownHostException ex) {\n+\t\t\treturn \"unknown\";\n+\t\t}\n+\t}\n+\n+\tprivate boolean usesProxy() {\n+\t\treturn \"proxy\".equals(this.uri.getScheme());\n+\t}\n+\n+\tpublic static class Sender {\n+\n+\t\t/**\n+\t\t * Maximum size of queued messages.\n+\t\t */\n+\t\tprivate int maxQueueSize = 50000;\n+\n+\t\t/**\n+\t\t * Flush interval to send queued messages.\n+\t\t */\n+\t\tprivate Duration flushInterval = Duration.ofSeconds(1);\n+\n+\t\t/**\n+\t\t * Maximum size of a message.\n+\t\t */\n+\t\tprivate DataSize messageSize = DataSize.ofBytes(Integer.MAX_VALUE);\n+\n+\t\t/**\n+\t\t * Number of measurements per request to use for this backend. If more\n+\t\t * measurements are found, then multiple requests will be made.\n+\t\t */\n+\t\tprivate int batchSize = 10000;\n+\n+\t\tpublic int getMaxQueueSize() {\n+\t\t\treturn this.maxQueueSize;\n+\t\t}\n+\n+\t\tpublic void setMaxQueueSize(int maxQueueSize) {\n+\t\t\tthis.maxQueueSize = maxQueueSize;\n+\t\t}\n+\n+\t\tpublic Duration getFlushInterval() {\n+\t\t\treturn this.flushInterval;\n+\t\t}\n+\n+\t\tpublic void setFlushInterval(Duration flushInterval) {\n+\t\t\tthis.flushInterval = flushInterval;\n+\t\t}\n+\n+\t\tpublic DataSize getMessageSize() {\n+\t\t\treturn this.messageSize;\n+\t\t}\n+\n+\t\tpublic void setMessageSize(DataSize messageSize) {\n+\t\t\tthis.messageSize = messageSize;\n+\t\t}\n+\n+\t\tpublic int getBatchSize() {\n+\t\t\treturn this.batchSize;\n+\t\t}\n+\n+\t\tpublic void setBatchSize(int batchSize) {\n+\t\t\tthis.batchSize = batchSize;\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class Metrics {\n+\n+\t\t/**\n+\t\t * Export configuration.\n+\t\t */\n+\t\tprivate Export export = new Export();\n+\n+\t\tpublic Export getExport() {\n+\t\t\treturn this.export;\n+\t\t}\n+\n+\t\tpublic void setExport(Export export) {\n+\t\t\tthis.export = export;\n+\t\t}\n+\n+\t\tpublic static class Export extends PushRegistryProperties {\n+\n+\t\t\t/**\n+\t\t\t * Global prefix to separate metrics originating from this app's white box",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "846111876",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30251,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/wavefront/WavefrontProperties.java",
        "discussion_id": "846111876",
        "commented_code": "@@ -0,0 +1,294 @@\n+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.wavefront;\n+\n+import java.net.InetAddress;\n+import java.net.URI;\n+import java.net.UnknownHostException;\n+import java.time.Duration;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.properties.PushRegistryProperties;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.source.InvalidConfigurationPropertyValueException;\n+import org.springframework.util.unit.DataSize;\n+\n+/**\n+ * Configuration properties to configure Wavefront.\n+ *\n+ * @author Moritz Halbritter\n+ * @since 3.0.0\n+ */\n+@ConfigurationProperties(prefix = \"management.wavefront\")\n+public class WavefrontProperties {\n+\n+\t/**\n+\t * URI to ship metrics to.\n+\t */\n+\tprivate URI uri = URI.create(\"https://longboard.wavefront.com\");\n+\n+\t/**\n+\t * Unique identifier for the app instance that is the source of metrics being\n+\t * published to Wavefront. Defaults to the local host name.\n+\t */\n+\tprivate String source;\n+\n+\t/**\n+\t * API token used when publishing metrics directly to the Wavefront API host.\n+\t */\n+\tprivate String apiToken;\n+\n+\t/**\n+\t * Sender configuration.\n+\t */\n+\tprivate final Sender sender = new Sender();\n+\n+\t/**\n+\t * Metrics configuration.\n+\t */\n+\tprivate final Metrics metrics = new Metrics();\n+\n+\t/**\n+\t * Tracing configuration.\n+\t */\n+\tprivate final Tracing tracing = new Tracing();\n+\n+\tpublic Sender getSender() {\n+\t\treturn this.sender;\n+\t}\n+\n+\tpublic Metrics getMetrics() {\n+\t\treturn this.metrics;\n+\t}\n+\n+\tpublic Tracing getTracing() {\n+\t\treturn this.tracing;\n+\t}\n+\n+\tpublic URI getUri() {\n+\t\treturn this.uri;\n+\t}\n+\n+\tpublic void setUri(URI uri) {\n+\t\tthis.uri = uri;\n+\t}\n+\n+\tpublic String getSource() {\n+\t\treturn this.source;\n+\t}\n+\n+\tpublic void setSource(String source) {\n+\t\tthis.source = source;\n+\t}\n+\n+\tpublic String getApiToken() {\n+\t\treturn this.apiToken;\n+\t}\n+\n+\tpublic void setApiToken(String apiToken) {\n+\t\tthis.apiToken = apiToken;\n+\t}\n+\n+\t/**\n+\t * Returns the effective URI of the wavefront instance. This will not be the same URI\n+\t * given through {@link #setUri(URI)} when a proxy is used.\n+\t * @return the effective URI of the wavefront instance\n+\t */\n+\tpublic URI getEffectiveUri() {\n+\t\tif (usesProxy()) {\n+\t\t\t// See io.micrometer.wavefront.WavefrontMeterRegistry.getWavefrontReportingUri\n+\t\t\treturn URI.create(this.uri.toString().replace(\"proxy://\", \"http://\"));\n+\t\t}\n+\t\treturn this.uri;\n+\t}\n+\n+\t/**\n+\t * Returns the API token or throws an exception if the API token is mandatory. If a\n+\t * proxy is used, the API token is optional.\n+\t * @return the API token\n+\t */\n+\tpublic String getApiTokenOrThrow() {\n+\t\tif (this.apiToken == null && !usesProxy()) {\n+\t\t\tthrow new InvalidConfigurationPropertyValueException(\"management.wavefront.api-token\", null,\n+\t\t\t\t\t\"This property is mandatory whenever publishing directly to the Wavefront API\");\n+\t\t}\n+\t\treturn this.apiToken;\n+\t}\n+\n+\tpublic String getSourceOrDefault() {\n+\t\tif (this.source != null) {\n+\t\t\treturn this.source;\n+\t\t}\n+\t\treturn getSourceDefault();\n+\t}\n+\n+\tprivate String getSourceDefault() {\n+\t\ttry {\n+\t\t\treturn InetAddress.getLocalHost().getHostName();\n+\t\t}\n+\t\tcatch (UnknownHostException ex) {\n+\t\t\treturn \"unknown\";\n+\t\t}\n+\t}\n+\n+\tprivate boolean usesProxy() {\n+\t\treturn \"proxy\".equals(this.uri.getScheme());\n+\t}\n+\n+\tpublic static class Sender {\n+\n+\t\t/**\n+\t\t * Maximum size of queued messages.\n+\t\t */\n+\t\tprivate int maxQueueSize = 50000;\n+\n+\t\t/**\n+\t\t * Flush interval to send queued messages.\n+\t\t */\n+\t\tprivate Duration flushInterval = Duration.ofSeconds(1);\n+\n+\t\t/**\n+\t\t * Maximum size of a message.\n+\t\t */\n+\t\tprivate DataSize messageSize = DataSize.ofBytes(Integer.MAX_VALUE);\n+\n+\t\t/**\n+\t\t * Number of measurements per request to use for this backend. If more\n+\t\t * measurements are found, then multiple requests will be made.\n+\t\t */\n+\t\tprivate int batchSize = 10000;\n+\n+\t\tpublic int getMaxQueueSize() {\n+\t\t\treturn this.maxQueueSize;\n+\t\t}\n+\n+\t\tpublic void setMaxQueueSize(int maxQueueSize) {\n+\t\t\tthis.maxQueueSize = maxQueueSize;\n+\t\t}\n+\n+\t\tpublic Duration getFlushInterval() {\n+\t\t\treturn this.flushInterval;\n+\t\t}\n+\n+\t\tpublic void setFlushInterval(Duration flushInterval) {\n+\t\t\tthis.flushInterval = flushInterval;\n+\t\t}\n+\n+\t\tpublic DataSize getMessageSize() {\n+\t\t\treturn this.messageSize;\n+\t\t}\n+\n+\t\tpublic void setMessageSize(DataSize messageSize) {\n+\t\t\tthis.messageSize = messageSize;\n+\t\t}\n+\n+\t\tpublic int getBatchSize() {\n+\t\t\treturn this.batchSize;\n+\t\t}\n+\n+\t\tpublic void setBatchSize(int batchSize) {\n+\t\t\tthis.batchSize = batchSize;\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class Metrics {\n+\n+\t\t/**\n+\t\t * Export configuration.\n+\t\t */\n+\t\tprivate Export export = new Export();\n+\n+\t\tpublic Export getExport() {\n+\t\t\treturn this.export;\n+\t\t}\n+\n+\t\tpublic void setExport(Export export) {\n+\t\t\tthis.export = export;\n+\t\t}\n+\n+\t\tpublic static class Export extends PushRegistryProperties {\n+\n+\t\t\t/**\n+\t\t\t * Global prefix to separate metrics originating from this app's white box",
        "comment_created_at": "2022-04-08T13:28:16+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "Is white box a recognised Wavefront term? We try to avoid white box and black box if we can as they're jargon that can confuse people, particularly those with English as a second language.",
        "pr_file_module": null
      },
      {
        "comment_id": "846156265",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30251,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/wavefront/WavefrontProperties.java",
        "discussion_id": "846111876",
        "commented_code": "@@ -0,0 +1,294 @@\n+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.wavefront;\n+\n+import java.net.InetAddress;\n+import java.net.URI;\n+import java.net.UnknownHostException;\n+import java.time.Duration;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.properties.PushRegistryProperties;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.source.InvalidConfigurationPropertyValueException;\n+import org.springframework.util.unit.DataSize;\n+\n+/**\n+ * Configuration properties to configure Wavefront.\n+ *\n+ * @author Moritz Halbritter\n+ * @since 3.0.0\n+ */\n+@ConfigurationProperties(prefix = \"management.wavefront\")\n+public class WavefrontProperties {\n+\n+\t/**\n+\t * URI to ship metrics to.\n+\t */\n+\tprivate URI uri = URI.create(\"https://longboard.wavefront.com\");\n+\n+\t/**\n+\t * Unique identifier for the app instance that is the source of metrics being\n+\t * published to Wavefront. Defaults to the local host name.\n+\t */\n+\tprivate String source;\n+\n+\t/**\n+\t * API token used when publishing metrics directly to the Wavefront API host.\n+\t */\n+\tprivate String apiToken;\n+\n+\t/**\n+\t * Sender configuration.\n+\t */\n+\tprivate final Sender sender = new Sender();\n+\n+\t/**\n+\t * Metrics configuration.\n+\t */\n+\tprivate final Metrics metrics = new Metrics();\n+\n+\t/**\n+\t * Tracing configuration.\n+\t */\n+\tprivate final Tracing tracing = new Tracing();\n+\n+\tpublic Sender getSender() {\n+\t\treturn this.sender;\n+\t}\n+\n+\tpublic Metrics getMetrics() {\n+\t\treturn this.metrics;\n+\t}\n+\n+\tpublic Tracing getTracing() {\n+\t\treturn this.tracing;\n+\t}\n+\n+\tpublic URI getUri() {\n+\t\treturn this.uri;\n+\t}\n+\n+\tpublic void setUri(URI uri) {\n+\t\tthis.uri = uri;\n+\t}\n+\n+\tpublic String getSource() {\n+\t\treturn this.source;\n+\t}\n+\n+\tpublic void setSource(String source) {\n+\t\tthis.source = source;\n+\t}\n+\n+\tpublic String getApiToken() {\n+\t\treturn this.apiToken;\n+\t}\n+\n+\tpublic void setApiToken(String apiToken) {\n+\t\tthis.apiToken = apiToken;\n+\t}\n+\n+\t/**\n+\t * Returns the effective URI of the wavefront instance. This will not be the same URI\n+\t * given through {@link #setUri(URI)} when a proxy is used.\n+\t * @return the effective URI of the wavefront instance\n+\t */\n+\tpublic URI getEffectiveUri() {\n+\t\tif (usesProxy()) {\n+\t\t\t// See io.micrometer.wavefront.WavefrontMeterRegistry.getWavefrontReportingUri\n+\t\t\treturn URI.create(this.uri.toString().replace(\"proxy://\", \"http://\"));\n+\t\t}\n+\t\treturn this.uri;\n+\t}\n+\n+\t/**\n+\t * Returns the API token or throws an exception if the API token is mandatory. If a\n+\t * proxy is used, the API token is optional.\n+\t * @return the API token\n+\t */\n+\tpublic String getApiTokenOrThrow() {\n+\t\tif (this.apiToken == null && !usesProxy()) {\n+\t\t\tthrow new InvalidConfigurationPropertyValueException(\"management.wavefront.api-token\", null,\n+\t\t\t\t\t\"This property is mandatory whenever publishing directly to the Wavefront API\");\n+\t\t}\n+\t\treturn this.apiToken;\n+\t}\n+\n+\tpublic String getSourceOrDefault() {\n+\t\tif (this.source != null) {\n+\t\t\treturn this.source;\n+\t\t}\n+\t\treturn getSourceDefault();\n+\t}\n+\n+\tprivate String getSourceDefault() {\n+\t\ttry {\n+\t\t\treturn InetAddress.getLocalHost().getHostName();\n+\t\t}\n+\t\tcatch (UnknownHostException ex) {\n+\t\t\treturn \"unknown\";\n+\t\t}\n+\t}\n+\n+\tprivate boolean usesProxy() {\n+\t\treturn \"proxy\".equals(this.uri.getScheme());\n+\t}\n+\n+\tpublic static class Sender {\n+\n+\t\t/**\n+\t\t * Maximum size of queued messages.\n+\t\t */\n+\t\tprivate int maxQueueSize = 50000;\n+\n+\t\t/**\n+\t\t * Flush interval to send queued messages.\n+\t\t */\n+\t\tprivate Duration flushInterval = Duration.ofSeconds(1);\n+\n+\t\t/**\n+\t\t * Maximum size of a message.\n+\t\t */\n+\t\tprivate DataSize messageSize = DataSize.ofBytes(Integer.MAX_VALUE);\n+\n+\t\t/**\n+\t\t * Number of measurements per request to use for this backend. If more\n+\t\t * measurements are found, then multiple requests will be made.\n+\t\t */\n+\t\tprivate int batchSize = 10000;\n+\n+\t\tpublic int getMaxQueueSize() {\n+\t\t\treturn this.maxQueueSize;\n+\t\t}\n+\n+\t\tpublic void setMaxQueueSize(int maxQueueSize) {\n+\t\t\tthis.maxQueueSize = maxQueueSize;\n+\t\t}\n+\n+\t\tpublic Duration getFlushInterval() {\n+\t\t\treturn this.flushInterval;\n+\t\t}\n+\n+\t\tpublic void setFlushInterval(Duration flushInterval) {\n+\t\t\tthis.flushInterval = flushInterval;\n+\t\t}\n+\n+\t\tpublic DataSize getMessageSize() {\n+\t\t\treturn this.messageSize;\n+\t\t}\n+\n+\t\tpublic void setMessageSize(DataSize messageSize) {\n+\t\t\tthis.messageSize = messageSize;\n+\t\t}\n+\n+\t\tpublic int getBatchSize() {\n+\t\t\treturn this.batchSize;\n+\t\t}\n+\n+\t\tpublic void setBatchSize(int batchSize) {\n+\t\t\tthis.batchSize = batchSize;\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class Metrics {\n+\n+\t\t/**\n+\t\t * Export configuration.\n+\t\t */\n+\t\tprivate Export export = new Export();\n+\n+\t\tpublic Export getExport() {\n+\t\t\treturn this.export;\n+\t\t}\n+\n+\t\tpublic void setExport(Export export) {\n+\t\t\tthis.export = export;\n+\t\t}\n+\n+\t\tpublic static class Export extends PushRegistryProperties {\n+\n+\t\t\t/**\n+\t\t\t * Global prefix to separate metrics originating from this app's white box",
        "comment_created_at": "2022-04-08T14:14:18+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "Ah, thanks for spotting this. I copied it from somewhere, gonna change this.",
        "pr_file_module": null
      },
      {
        "comment_id": "849254502",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30251,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/wavefront/WavefrontProperties.java",
        "discussion_id": "846111876",
        "commented_code": "@@ -0,0 +1,294 @@\n+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.wavefront;\n+\n+import java.net.InetAddress;\n+import java.net.URI;\n+import java.net.UnknownHostException;\n+import java.time.Duration;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.properties.PushRegistryProperties;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.source.InvalidConfigurationPropertyValueException;\n+import org.springframework.util.unit.DataSize;\n+\n+/**\n+ * Configuration properties to configure Wavefront.\n+ *\n+ * @author Moritz Halbritter\n+ * @since 3.0.0\n+ */\n+@ConfigurationProperties(prefix = \"management.wavefront\")\n+public class WavefrontProperties {\n+\n+\t/**\n+\t * URI to ship metrics to.\n+\t */\n+\tprivate URI uri = URI.create(\"https://longboard.wavefront.com\");\n+\n+\t/**\n+\t * Unique identifier for the app instance that is the source of metrics being\n+\t * published to Wavefront. Defaults to the local host name.\n+\t */\n+\tprivate String source;\n+\n+\t/**\n+\t * API token used when publishing metrics directly to the Wavefront API host.\n+\t */\n+\tprivate String apiToken;\n+\n+\t/**\n+\t * Sender configuration.\n+\t */\n+\tprivate final Sender sender = new Sender();\n+\n+\t/**\n+\t * Metrics configuration.\n+\t */\n+\tprivate final Metrics metrics = new Metrics();\n+\n+\t/**\n+\t * Tracing configuration.\n+\t */\n+\tprivate final Tracing tracing = new Tracing();\n+\n+\tpublic Sender getSender() {\n+\t\treturn this.sender;\n+\t}\n+\n+\tpublic Metrics getMetrics() {\n+\t\treturn this.metrics;\n+\t}\n+\n+\tpublic Tracing getTracing() {\n+\t\treturn this.tracing;\n+\t}\n+\n+\tpublic URI getUri() {\n+\t\treturn this.uri;\n+\t}\n+\n+\tpublic void setUri(URI uri) {\n+\t\tthis.uri = uri;\n+\t}\n+\n+\tpublic String getSource() {\n+\t\treturn this.source;\n+\t}\n+\n+\tpublic void setSource(String source) {\n+\t\tthis.source = source;\n+\t}\n+\n+\tpublic String getApiToken() {\n+\t\treturn this.apiToken;\n+\t}\n+\n+\tpublic void setApiToken(String apiToken) {\n+\t\tthis.apiToken = apiToken;\n+\t}\n+\n+\t/**\n+\t * Returns the effective URI of the wavefront instance. This will not be the same URI\n+\t * given through {@link #setUri(URI)} when a proxy is used.\n+\t * @return the effective URI of the wavefront instance\n+\t */\n+\tpublic URI getEffectiveUri() {\n+\t\tif (usesProxy()) {\n+\t\t\t// See io.micrometer.wavefront.WavefrontMeterRegistry.getWavefrontReportingUri\n+\t\t\treturn URI.create(this.uri.toString().replace(\"proxy://\", \"http://\"));\n+\t\t}\n+\t\treturn this.uri;\n+\t}\n+\n+\t/**\n+\t * Returns the API token or throws an exception if the API token is mandatory. If a\n+\t * proxy is used, the API token is optional.\n+\t * @return the API token\n+\t */\n+\tpublic String getApiTokenOrThrow() {\n+\t\tif (this.apiToken == null && !usesProxy()) {\n+\t\t\tthrow new InvalidConfigurationPropertyValueException(\"management.wavefront.api-token\", null,\n+\t\t\t\t\t\"This property is mandatory whenever publishing directly to the Wavefront API\");\n+\t\t}\n+\t\treturn this.apiToken;\n+\t}\n+\n+\tpublic String getSourceOrDefault() {\n+\t\tif (this.source != null) {\n+\t\t\treturn this.source;\n+\t\t}\n+\t\treturn getSourceDefault();\n+\t}\n+\n+\tprivate String getSourceDefault() {\n+\t\ttry {\n+\t\t\treturn InetAddress.getLocalHost().getHostName();\n+\t\t}\n+\t\tcatch (UnknownHostException ex) {\n+\t\t\treturn \"unknown\";\n+\t\t}\n+\t}\n+\n+\tprivate boolean usesProxy() {\n+\t\treturn \"proxy\".equals(this.uri.getScheme());\n+\t}\n+\n+\tpublic static class Sender {\n+\n+\t\t/**\n+\t\t * Maximum size of queued messages.\n+\t\t */\n+\t\tprivate int maxQueueSize = 50000;\n+\n+\t\t/**\n+\t\t * Flush interval to send queued messages.\n+\t\t */\n+\t\tprivate Duration flushInterval = Duration.ofSeconds(1);\n+\n+\t\t/**\n+\t\t * Maximum size of a message.\n+\t\t */\n+\t\tprivate DataSize messageSize = DataSize.ofBytes(Integer.MAX_VALUE);\n+\n+\t\t/**\n+\t\t * Number of measurements per request to use for this backend. If more\n+\t\t * measurements are found, then multiple requests will be made.\n+\t\t */\n+\t\tprivate int batchSize = 10000;\n+\n+\t\tpublic int getMaxQueueSize() {\n+\t\t\treturn this.maxQueueSize;\n+\t\t}\n+\n+\t\tpublic void setMaxQueueSize(int maxQueueSize) {\n+\t\t\tthis.maxQueueSize = maxQueueSize;\n+\t\t}\n+\n+\t\tpublic Duration getFlushInterval() {\n+\t\t\treturn this.flushInterval;\n+\t\t}\n+\n+\t\tpublic void setFlushInterval(Duration flushInterval) {\n+\t\t\tthis.flushInterval = flushInterval;\n+\t\t}\n+\n+\t\tpublic DataSize getMessageSize() {\n+\t\t\treturn this.messageSize;\n+\t\t}\n+\n+\t\tpublic void setMessageSize(DataSize messageSize) {\n+\t\t\tthis.messageSize = messageSize;\n+\t\t}\n+\n+\t\tpublic int getBatchSize() {\n+\t\t\treturn this.batchSize;\n+\t\t}\n+\n+\t\tpublic void setBatchSize(int batchSize) {\n+\t\t\tthis.batchSize = batchSize;\n+\t\t}\n+\n+\t}\n+\n+\tpublic static class Metrics {\n+\n+\t\t/**\n+\t\t * Export configuration.\n+\t\t */\n+\t\tprivate Export export = new Export();\n+\n+\t\tpublic Export getExport() {\n+\t\t\treturn this.export;\n+\t\t}\n+\n+\t\tpublic void setExport(Export export) {\n+\t\t\tthis.export = export;\n+\t\t}\n+\n+\t\tpublic static class Export extends PushRegistryProperties {\n+\n+\t\t\t/**\n+\t\t\t * Global prefix to separate metrics originating from this app's white box",
        "comment_created_at": "2022-04-13T09:05:12+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "I created https://github.com/spring-projects/spring-boot/issues/30649 to fix that in 2.5.x.",
        "pr_file_module": null
      }
    ]
  }
]