[
  {
    "discussion_id": "1954346885",
    "pr_number": 44134,
    "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java",
    "created_at": "2025-02-13T11:42:30+00:00",
    "commented_code": "super.refresh();\n \t\t}\n \t\tcatch (RuntimeException ex) {\n-\t\t\tWebServerManager serverManager = this.serverManager;\n-\t\t\tif (serverManager != null) {\n-\t\t\t\tserverManager.getWebServer().stop();\n+\t\t\ttry {\n+\t\t\t\tWebServer webServer = getWebServer();\n+\t\t\t\tif (webServer != null) {\n+\t\t\t\t\twebServer.stop();\n+\t\t\t\t\twebServer.destroy();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Exception shutdownEx) {\n+\t\t\t\tex.addSuppressed(shutdownEx);",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1954346885",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44134,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java",
        "discussion_id": "1954346885",
        "commented_code": "@@ -66,9 +66,15 @@ public final void refresh() throws BeansException, IllegalStateException {\n \t\t\tsuper.refresh();\n \t\t}\n \t\tcatch (RuntimeException ex) {\n-\t\t\tWebServerManager serverManager = this.serverManager;\n-\t\t\tif (serverManager != null) {\n-\t\t\t\tserverManager.getWebServer().stop();\n+\t\t\ttry {\n+\t\t\t\tWebServer webServer = getWebServer();\n+\t\t\t\tif (webServer != null) {\n+\t\t\t\t\twebServer.stop();\n+\t\t\t\t\twebServer.destroy();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Exception shutdownEx) {\n+\t\t\t\tex.addSuppressed(shutdownEx);",
        "comment_created_at": "2025-02-13T11:42:30+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "Let's consider this separately please. If we do it, it should be applied on the servlet side as well.",
        "pr_file_module": null
      },
      {
        "comment_id": "1954374364",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44134,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java",
        "discussion_id": "1954346885",
        "commented_code": "@@ -66,9 +66,15 @@ public final void refresh() throws BeansException, IllegalStateException {\n \t\t\tsuper.refresh();\n \t\t}\n \t\tcatch (RuntimeException ex) {\n-\t\t\tWebServerManager serverManager = this.serverManager;\n-\t\t\tif (serverManager != null) {\n-\t\t\t\tserverManager.getWebServer().stop();\n+\t\t\ttry {\n+\t\t\t\tWebServer webServer = getWebServer();\n+\t\t\t\tif (webServer != null) {\n+\t\t\t\t\twebServer.stop();\n+\t\t\t\t\twebServer.destroy();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Exception shutdownEx) {\n+\t\t\t\tex.addSuppressed(shutdownEx);",
        "comment_created_at": "2025-02-13T12:02:13+00:00",
        "comment_author": "nosan",
        "comment_body": "Sure, I've reverted these changes. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1958512748",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44134,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java",
        "discussion_id": "1954346885",
        "commented_code": "@@ -66,9 +66,15 @@ public final void refresh() throws BeansException, IllegalStateException {\n \t\t\tsuper.refresh();\n \t\t}\n \t\tcatch (RuntimeException ex) {\n-\t\t\tWebServerManager serverManager = this.serverManager;\n-\t\t\tif (serverManager != null) {\n-\t\t\t\tserverManager.getWebServer().stop();\n+\t\t\ttry {\n+\t\t\t\tWebServer webServer = getWebServer();\n+\t\t\t\tif (webServer != null) {\n+\t\t\t\t\twebServer.stop();\n+\t\t\t\t\twebServer.destroy();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Exception shutdownEx) {\n+\t\t\t\tex.addSuppressed(shutdownEx);",
        "comment_created_at": "2025-02-17T16:32:01+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "We think that adding the stop or destroy failure as a suppressed exception is a good idea. Would you like to open a PR for it or would you prefer that we take care of it?",
        "pr_file_module": null
      },
      {
        "comment_id": "1958588187",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44134,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java",
        "discussion_id": "1954346885",
        "commented_code": "@@ -66,9 +66,15 @@ public final void refresh() throws BeansException, IllegalStateException {\n \t\t\tsuper.refresh();\n \t\t}\n \t\tcatch (RuntimeException ex) {\n-\t\t\tWebServerManager serverManager = this.serverManager;\n-\t\t\tif (serverManager != null) {\n-\t\t\t\tserverManager.getWebServer().stop();\n+\t\t\ttry {\n+\t\t\t\tWebServer webServer = getWebServer();\n+\t\t\t\tif (webServer != null) {\n+\t\t\t\t\twebServer.stop();\n+\t\t\t\t\twebServer.destroy();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Exception shutdownEx) {\n+\t\t\t\tex.addSuppressed(shutdownEx);",
        "comment_created_at": "2025-02-17T17:29:28+00:00",
        "comment_author": "nosan",
        "comment_body": "[#44310](https://github.com/spring-projects/spring-boot/pull/44310)",
        "pr_file_module": null
      },
      {
        "comment_id": "1958599374",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44134,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java",
        "discussion_id": "1954346885",
        "commented_code": "@@ -66,9 +66,15 @@ public final void refresh() throws BeansException, IllegalStateException {\n \t\t\tsuper.refresh();\n \t\t}\n \t\tcatch (RuntimeException ex) {\n-\t\t\tWebServerManager serverManager = this.serverManager;\n-\t\t\tif (serverManager != null) {\n-\t\t\t\tserverManager.getWebServer().stop();\n+\t\t\ttry {\n+\t\t\t\tWebServer webServer = getWebServer();\n+\t\t\t\tif (webServer != null) {\n+\t\t\t\t\twebServer.stop();\n+\t\t\t\t\twebServer.destroy();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Exception shutdownEx) {\n+\t\t\t\tex.addSuppressed(shutdownEx);",
        "comment_created_at": "2025-02-17T17:34:40+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "Thanks!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1314925789",
    "pr_number": 37119,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidatorAdapter.java",
    "created_at": "2023-09-04T13:04:43+00:00",
    "commented_code": "return validator;\n \t}\n \n+\t@Override\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic <T> T unwrap(Class<T> type) {\n+\t\tif (this.target == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (type.isAssignableFrom(this.target.getClass())) {\n+\t\t\tif (this.target instanceof SpringValidatorAdapter adapter) {\n+\t\t\t\treturn adapter.unwrap(type);\n+\t\t\t}\n+\t\t\treturn (T) this.target;\n+\t\t}\n+\n+\t\tthrow new ValidationException(\"Cannot unwrap to \" + type);",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1314925789",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 37119,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidatorAdapter.java",
        "discussion_id": "1314925789",
        "commented_code": "@@ -153,4 +154,20 @@ private static Validator wrap(Validator validator, boolean existingBean) {\n \t\treturn validator;\n \t}\n \n+\t@Override\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic <T> T unwrap(Class<T> type) {\n+\t\tif (this.target == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (type.isAssignableFrom(this.target.getClass())) {\n+\t\t\tif (this.target instanceof SpringValidatorAdapter adapter) {\n+\t\t\t\treturn adapter.unwrap(type);\n+\t\t\t}\n+\t\t\treturn (T) this.target;\n+\t\t}\n+\n+\t\tthrow new ValidationException(\"Cannot unwrap to \" + type);",
        "comment_created_at": "2023-09-04T13:04:43+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I think an `IllegalStateException` or `IllegalArgumentException` (it depends if you consider `target` or `type` to be the problem) might be better here and perhaps the error message should include `target`. Something like `\"Cannot unwrap \" + target + \" to \" + type.getName()`",
        "pr_file_module": null
      },
      {
        "comment_id": "1315215500",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 37119,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidatorAdapter.java",
        "discussion_id": "1314925789",
        "commented_code": "@@ -153,4 +154,20 @@ private static Validator wrap(Validator validator, boolean existingBean) {\n \t\treturn validator;\n \t}\n \n+\t@Override\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic <T> T unwrap(Class<T> type) {\n+\t\tif (this.target == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (type.isAssignableFrom(this.target.getClass())) {\n+\t\t\tif (this.target instanceof SpringValidatorAdapter adapter) {\n+\t\t\t\treturn adapter.unwrap(type);\n+\t\t\t}\n+\t\t\treturn (T) this.target;\n+\t\t}\n+\n+\t\tthrow new ValidationException(\"Cannot unwrap to \" + type);",
        "comment_created_at": "2023-09-04T22:12:46+00:00",
        "comment_author": "zpavloudis",
        "comment_body": "Went with an IllegalArgumentException when given a `type` a `SmartValidator` cannot be unwrapped to as it seemed more sound to me?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1308629668",
    "pr_number": 37112,
    "pr_file": "spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonTestersAutoConfiguration.java",
    "created_at": "2023-08-29T10:56:57+00:00",
    "commented_code": "@Override\n \t\tpublic void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n+\t\t\tMethod initializeMethod = ReflectionUtils.findMethod(this.tester, \"initialize\", Class.class,\n+\t\t\t\t\tResolvableType.class);\n+\n+\t\t\tif (initializeMethod == null) {\n+\t\t\t\tthrow new IllegalStateException(\"unable to find initialize method for \" + this.tester);\n+\t\t\t}\n+\n \t\t\tReflectionHints reflection = hints.reflection();\n \t\t\treflection.registerType(this.tester, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n-\t\t\treflection.registerMethod(\n-\t\t\t\t\tReflectionUtils.findMethod(this.tester, \"initialize\", Class.class, ResolvableType.class),\n-\t\t\t\t\tExecutableMode.INVOKE);\n+\t\t\treflection.registerMethod(initializeMethod, ExecutableMode.INVOKE);",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1308629668",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 37112,
        "pr_file": "spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonTestersAutoConfiguration.java",
        "discussion_id": "1308629668",
        "commented_code": "@@ -234,11 +235,16 @@ static class AbstractJsonMarshalTesterRuntimeHints implements RuntimeHintsRegist\n \n \t\t@Override\n \t\tpublic void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n+\t\t\tMethod initializeMethod = ReflectionUtils.findMethod(this.tester, \"initialize\", Class.class,\n+\t\t\t\t\tResolvableType.class);\n+\n+\t\t\tif (initializeMethod == null) {\n+\t\t\t\tthrow new IllegalStateException(\"unable to find initialize method for \" + this.tester);\n+\t\t\t}\n+\n \t\t\tReflectionHints reflection = hints.reflection();\n \t\t\treflection.registerType(this.tester, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS);\n-\t\t\treflection.registerMethod(\n-\t\t\t\t\tReflectionUtils.findMethod(this.tester, \"initialize\", Class.class, ResolvableType.class),\n-\t\t\t\t\tExecutableMode.INVOKE);\n+\t\t\treflection.registerMethod(initializeMethod, ExecutableMode.INVOKE);",
        "comment_created_at": "2023-08-29T10:56:57+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I'd rather this failed with an NPE as the initialize method should always be present.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1267696129",
    "pr_number": 36422,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/HikariLifecycle.java",
    "created_at": "2023-07-19T08:00:34+00:00",
    "commented_code": "+/*\n+ * Copyright 2023 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.jdbc;\n+\n+import java.lang.reflect.Field;\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Supplier;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.zaxxer.hikari.HikariPoolMXBean;\n+import com.zaxxer.hikari.pool.HikariPool;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import org.springframework.aop.TargetSource;\n+import org.springframework.aop.framework.Advised;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.context.Lifecycle;\n+import org.springframework.util.Assert;\n+import org.springframework.util.ReflectionUtils;\n+\n+/**\n+ * {@link Lifecycle} management for a {@link HikariDataSource} taking care of\n+ * {@link Lifecycle#start() starting}/{@link Lifecycle#stop() stopping} the\n+ * {@link javax.sql.DataSource} by {@link HikariDataSource#isAllowPoolSuspension()\n+ * eventually} suspending/resuming the underlying {@link HikariPool connection pool} and\n+ * {@link HikariPoolMXBean#softEvictConnections() evicting} open & idle connections.\n+ *\n+ * @author Christoph Strobl\n+ */\n+class HikariLifecycle implements Lifecycle {\n+\n+\tprivate final HikariDataSource dataSource;\n+\n+\tprivate final LifecycleExecutor lifecycleExecutor;\n+\n+\tHikariLifecycle(HikariDataSource dataSource) {\n+\n+\t\tthis.dataSource = dataSource;\n+\t\tthis.lifecycleExecutor = new LifecycleExecutor(dataSource);\n+\t}\n+\n+\tHikariDataSource getManagedInstance() {\n+\t\treturn this.dataSource;\n+\t}\n+\n+\t@Override\n+\tpublic void start() {\n+\n+\t\tif (this.dataSource.isRunning()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (this.dataSource.isClosed()) {\n+\t\t\tthrow new IllegalStateException(\"DataSource has been closed and cannot be restarted\");\n+\t\t}\n+\n+\t\tthis.lifecycleExecutor.resume();\n+\t}\n+\n+\t@Override\n+\tpublic void stop() {\n+\t\tif (this.dataSource.isRunning()) {\n+\t\t\tthis.lifecycleExecutor.pause();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isRunning() {\n+\t\treturn this.dataSource.isRunning();\n+\t}\n+\n+\t/**\n+\t * Component to help suspend/resume a {@link HikariDataSource} by taking the pool\n+\t * suspension flag into account. Will perform best effort to make sure connections\n+\t * reported as closed buy the {@link HikariPoolMXBean} have actually been closed by\n+\t * the {@link java.util.concurrent.Executor} that is in charge of closing them.\n+\t *\n+\t * @author Christoph Strobl\n+\t */\n+\tprivate static class LifecycleExecutor {\n+\n+\t\tprivate static final Log logger = LogFactory.getLog(LifecycleExecutor.class);\n+\n+\t\tprivate final HikariDataSource dataSource;\n+\n+\t\tprivate Supplier<Boolean> hasOpenConnections;\n+\n+\t\tLifecycleExecutor(HikariDataSource hikariDataSource) {\n+\n+\t\t\tthis.dataSource = getUltimateTargetObject(hikariDataSource);\n+\n+\t\t\tif (hikariDataSource.getHikariPoolMXBean() instanceof HikariPool pool) {\n+\n+\t\t\t\tField closeConnectionExecutor = ReflectionUtils.findField(HikariPool.class, \"closeConnectionExecutor\");\n+\t\t\t\tif (closeConnectionExecutor != null) {",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1267696129",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 36422,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/HikariLifecycle.java",
        "discussion_id": "1267696129",
        "commented_code": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright 2023 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.jdbc;\n+\n+import java.lang.reflect.Field;\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Supplier;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.zaxxer.hikari.HikariPoolMXBean;\n+import com.zaxxer.hikari.pool.HikariPool;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import org.springframework.aop.TargetSource;\n+import org.springframework.aop.framework.Advised;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.context.Lifecycle;\n+import org.springframework.util.Assert;\n+import org.springframework.util.ReflectionUtils;\n+\n+/**\n+ * {@link Lifecycle} management for a {@link HikariDataSource} taking care of\n+ * {@link Lifecycle#start() starting}/{@link Lifecycle#stop() stopping} the\n+ * {@link javax.sql.DataSource} by {@link HikariDataSource#isAllowPoolSuspension()\n+ * eventually} suspending/resuming the underlying {@link HikariPool connection pool} and\n+ * {@link HikariPoolMXBean#softEvictConnections() evicting} open & idle connections.\n+ *\n+ * @author Christoph Strobl\n+ */\n+class HikariLifecycle implements Lifecycle {\n+\n+\tprivate final HikariDataSource dataSource;\n+\n+\tprivate final LifecycleExecutor lifecycleExecutor;\n+\n+\tHikariLifecycle(HikariDataSource dataSource) {\n+\n+\t\tthis.dataSource = dataSource;\n+\t\tthis.lifecycleExecutor = new LifecycleExecutor(dataSource);\n+\t}\n+\n+\tHikariDataSource getManagedInstance() {\n+\t\treturn this.dataSource;\n+\t}\n+\n+\t@Override\n+\tpublic void start() {\n+\n+\t\tif (this.dataSource.isRunning()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (this.dataSource.isClosed()) {\n+\t\t\tthrow new IllegalStateException(\"DataSource has been closed and cannot be restarted\");\n+\t\t}\n+\n+\t\tthis.lifecycleExecutor.resume();\n+\t}\n+\n+\t@Override\n+\tpublic void stop() {\n+\t\tif (this.dataSource.isRunning()) {\n+\t\t\tthis.lifecycleExecutor.pause();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isRunning() {\n+\t\treturn this.dataSource.isRunning();\n+\t}\n+\n+\t/**\n+\t * Component to help suspend/resume a {@link HikariDataSource} by taking the pool\n+\t * suspension flag into account. Will perform best effort to make sure connections\n+\t * reported as closed buy the {@link HikariPoolMXBean} have actually been closed by\n+\t * the {@link java.util.concurrent.Executor} that is in charge of closing them.\n+\t *\n+\t * @author Christoph Strobl\n+\t */\n+\tprivate static class LifecycleExecutor {\n+\n+\t\tprivate static final Log logger = LogFactory.getLog(LifecycleExecutor.class);\n+\n+\t\tprivate final HikariDataSource dataSource;\n+\n+\t\tprivate Supplier<Boolean> hasOpenConnections;\n+\n+\t\tLifecycleExecutor(HikariDataSource hikariDataSource) {\n+\n+\t\t\tthis.dataSource = getUltimateTargetObject(hikariDataSource);\n+\n+\t\t\tif (hikariDataSource.getHikariPoolMXBean() instanceof HikariPool pool) {\n+\n+\t\t\t\tField closeConnectionExecutor = ReflectionUtils.findField(HikariPool.class, \"closeConnectionExecutor\");\n+\t\t\t\tif (closeConnectionExecutor != null) {",
        "comment_created_at": "2023-07-19T08:00:34+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "If the field's not found something's gone really wrong. I think it would be better to fail hard.",
        "pr_file_module": null
      },
      {
        "comment_id": "1267764911",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 36422,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/HikariLifecycle.java",
        "discussion_id": "1267696129",
        "commented_code": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright 2023 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.jdbc;\n+\n+import java.lang.reflect.Field;\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Supplier;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.zaxxer.hikari.HikariPoolMXBean;\n+import com.zaxxer.hikari.pool.HikariPool;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import org.springframework.aop.TargetSource;\n+import org.springframework.aop.framework.Advised;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.context.Lifecycle;\n+import org.springframework.util.Assert;\n+import org.springframework.util.ReflectionUtils;\n+\n+/**\n+ * {@link Lifecycle} management for a {@link HikariDataSource} taking care of\n+ * {@link Lifecycle#start() starting}/{@link Lifecycle#stop() stopping} the\n+ * {@link javax.sql.DataSource} by {@link HikariDataSource#isAllowPoolSuspension()\n+ * eventually} suspending/resuming the underlying {@link HikariPool connection pool} and\n+ * {@link HikariPoolMXBean#softEvictConnections() evicting} open & idle connections.\n+ *\n+ * @author Christoph Strobl\n+ */\n+class HikariLifecycle implements Lifecycle {\n+\n+\tprivate final HikariDataSource dataSource;\n+\n+\tprivate final LifecycleExecutor lifecycleExecutor;\n+\n+\tHikariLifecycle(HikariDataSource dataSource) {\n+\n+\t\tthis.dataSource = dataSource;\n+\t\tthis.lifecycleExecutor = new LifecycleExecutor(dataSource);\n+\t}\n+\n+\tHikariDataSource getManagedInstance() {\n+\t\treturn this.dataSource;\n+\t}\n+\n+\t@Override\n+\tpublic void start() {\n+\n+\t\tif (this.dataSource.isRunning()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (this.dataSource.isClosed()) {\n+\t\t\tthrow new IllegalStateException(\"DataSource has been closed and cannot be restarted\");\n+\t\t}\n+\n+\t\tthis.lifecycleExecutor.resume();\n+\t}\n+\n+\t@Override\n+\tpublic void stop() {\n+\t\tif (this.dataSource.isRunning()) {\n+\t\t\tthis.lifecycleExecutor.pause();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isRunning() {\n+\t\treturn this.dataSource.isRunning();\n+\t}\n+\n+\t/**\n+\t * Component to help suspend/resume a {@link HikariDataSource} by taking the pool\n+\t * suspension flag into account. Will perform best effort to make sure connections\n+\t * reported as closed buy the {@link HikariPoolMXBean} have actually been closed by\n+\t * the {@link java.util.concurrent.Executor} that is in charge of closing them.\n+\t *\n+\t * @author Christoph Strobl\n+\t */\n+\tprivate static class LifecycleExecutor {\n+\n+\t\tprivate static final Log logger = LogFactory.getLog(LifecycleExecutor.class);\n+\n+\t\tprivate final HikariDataSource dataSource;\n+\n+\t\tprivate Supplier<Boolean> hasOpenConnections;\n+\n+\t\tLifecycleExecutor(HikariDataSource hikariDataSource) {\n+\n+\t\t\tthis.dataSource = getUltimateTargetObject(hikariDataSource);\n+\n+\t\t\tif (hikariDataSource.getHikariPoolMXBean() instanceof HikariPool pool) {\n+\n+\t\t\t\tField closeConnectionExecutor = ReflectionUtils.findField(HikariPool.class, \"closeConnectionExecutor\");\n+\t\t\t\tif (closeConnectionExecutor != null) {",
        "comment_created_at": "2023-07-19T08:52:33+00:00",
        "comment_author": "christophstrobl",
        "comment_body": "The idea was to be very defensive here, and fall back to checking _total connections_ if for whatever reason `HikariPool` does not meet the expectations.  ",
        "pr_file_module": null
      },
      {
        "comment_id": "1267783654",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 36422,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/HikariLifecycle.java",
        "discussion_id": "1267696129",
        "commented_code": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright 2023 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.autoconfigure.jdbc;\n+\n+import java.lang.reflect.Field;\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Supplier;\n+\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.zaxxer.hikari.HikariPoolMXBean;\n+import com.zaxxer.hikari.pool.HikariPool;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import org.springframework.aop.TargetSource;\n+import org.springframework.aop.framework.Advised;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.context.Lifecycle;\n+import org.springframework.util.Assert;\n+import org.springframework.util.ReflectionUtils;\n+\n+/**\n+ * {@link Lifecycle} management for a {@link HikariDataSource} taking care of\n+ * {@link Lifecycle#start() starting}/{@link Lifecycle#stop() stopping} the\n+ * {@link javax.sql.DataSource} by {@link HikariDataSource#isAllowPoolSuspension()\n+ * eventually} suspending/resuming the underlying {@link HikariPool connection pool} and\n+ * {@link HikariPoolMXBean#softEvictConnections() evicting} open & idle connections.\n+ *\n+ * @author Christoph Strobl\n+ */\n+class HikariLifecycle implements Lifecycle {\n+\n+\tprivate final HikariDataSource dataSource;\n+\n+\tprivate final LifecycleExecutor lifecycleExecutor;\n+\n+\tHikariLifecycle(HikariDataSource dataSource) {\n+\n+\t\tthis.dataSource = dataSource;\n+\t\tthis.lifecycleExecutor = new LifecycleExecutor(dataSource);\n+\t}\n+\n+\tHikariDataSource getManagedInstance() {\n+\t\treturn this.dataSource;\n+\t}\n+\n+\t@Override\n+\tpublic void start() {\n+\n+\t\tif (this.dataSource.isRunning()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (this.dataSource.isClosed()) {\n+\t\t\tthrow new IllegalStateException(\"DataSource has been closed and cannot be restarted\");\n+\t\t}\n+\n+\t\tthis.lifecycleExecutor.resume();\n+\t}\n+\n+\t@Override\n+\tpublic void stop() {\n+\t\tif (this.dataSource.isRunning()) {\n+\t\t\tthis.lifecycleExecutor.pause();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isRunning() {\n+\t\treturn this.dataSource.isRunning();\n+\t}\n+\n+\t/**\n+\t * Component to help suspend/resume a {@link HikariDataSource} by taking the pool\n+\t * suspension flag into account. Will perform best effort to make sure connections\n+\t * reported as closed buy the {@link HikariPoolMXBean} have actually been closed by\n+\t * the {@link java.util.concurrent.Executor} that is in charge of closing them.\n+\t *\n+\t * @author Christoph Strobl\n+\t */\n+\tprivate static class LifecycleExecutor {\n+\n+\t\tprivate static final Log logger = LogFactory.getLog(LifecycleExecutor.class);\n+\n+\t\tprivate final HikariDataSource dataSource;\n+\n+\t\tprivate Supplier<Boolean> hasOpenConnections;\n+\n+\t\tLifecycleExecutor(HikariDataSource hikariDataSource) {\n+\n+\t\t\tthis.dataSource = getUltimateTargetObject(hikariDataSource);\n+\n+\t\t\tif (hikariDataSource.getHikariPoolMXBean() instanceof HikariPool pool) {\n+\n+\t\t\t\tField closeConnectionExecutor = ReflectionUtils.findField(HikariPool.class, \"closeConnectionExecutor\");\n+\t\t\t\tif (closeConnectionExecutor != null) {",
        "comment_created_at": "2023-07-19T09:06:10+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "If Hikari doesn't meet expectations then I think we should just give up as we have no way of knowing that our approach is valid. We'll know, through tests, that it works with the version of Hikari in dependency management. If someone overrides that version and Hikari has changed incompatibility I think we'd be better to fail fast. That'll make the problem much easier to diagnose rather than dealing with a checkpoint failure and trying to figure out why it occurred.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1239636219",
    "pr_number": 36039,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherApplicationRunner.java",
    "created_at": "2023-06-23T10:08:07+00:00",
    "commented_code": "}\n \t\t\t\tcatch (NoSuchJobException ex) {\n \t\t\t\t\tlogger.debug(LogMessage.format(\"No job found in registry for job name: %s\", jobName));\n+\t\t\t\t\tthrow new JobExecutionException(ex.getMessage(), ex);",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1239636219",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 36039,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherApplicationRunner.java",
        "discussion_id": "1239636219",
        "commented_code": "@@ -187,6 +187,7 @@ private void executeRegisteredJobs(JobParameters jobParameters) throws JobExecut\n \t\t\t\t}\n \t\t\t\tcatch (NoSuchJobException ex) {\n \t\t\t\t\tlogger.debug(LogMessage.format(\"No job found in registry for job name: %s\", jobName));\n+\t\t\t\t\tthrow new JobExecutionException(ex.getMessage(), ex);",
        "comment_created_at": "2023-06-23T10:08:07+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "`NoSuchJobException` is a `JobExecutionException` so I don't think there's any need to create a new exception. Instead, I think the `try` and `catch` could be removed completely so that the method just throws the original `NoSuchJobException`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1240353901",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 36039,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherApplicationRunner.java",
        "discussion_id": "1239636219",
        "commented_code": "@@ -187,6 +187,7 @@ private void executeRegisteredJobs(JobParameters jobParameters) throws JobExecut\n \t\t\t\t}\n \t\t\t\tcatch (NoSuchJobException ex) {\n \t\t\t\t\tlogger.debug(LogMessage.format(\"No job found in registry for job name: %s\", jobName));\n+\t\t\t\t\tthrow new JobExecutionException(ex.getMessage(), ex);",
        "comment_created_at": "2023-06-23T20:37:23+00:00",
        "comment_author": "itsAkshayDubey",
        "comment_body": "Fixed in [this](https://github.com/spring-projects/spring-boot/pull/36039/commits/c4d7bef0ae3c202a2765c2a3dbfd626a069ff8e4) commit.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "896847031",
    "pr_number": 30792,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/zipkin/ZipkinWebClientSender.java",
    "created_at": "2022-06-14T13:50:47+00:00",
    "commented_code": "+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.tracing.zipkin;\n+\n+import zipkin2.Call;\n+\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+/**\n+ * A Zipkin {@link HttpSender} which uses {@link WebClient} for HTTP communication.\n+ *\n+ * @author Stefan Bratanov\n+ */\n+class ZipkinWebClientSender extends HttpSender {\n+\n+\tprivate final String endpoint;\n+\n+\tprivate final WebClient webClient;\n+\n+\tZipkinWebClientSender(String endpoint, WebClient webClient) {\n+\t\tthis.endpoint = endpoint;\n+\t\tthis.webClient = webClient;\n+\t}\n+\n+\t@Override\n+\tpublic HttpPostCall sendSpans(byte[] batchedEncodedSpans) {\n+\t\treturn new WebClientHttpPostCall(this.endpoint, batchedEncodedSpans, this.webClient);\n+\t}\n+\n+\tprivate static class WebClientHttpPostCall extends HttpPostCall {\n+\n+\t\tprivate final String endpoint;\n+\n+\t\tprivate final WebClient webClient;\n+\n+\t\tWebClientHttpPostCall(String endpoint, byte[] body, WebClient webClient) {\n+\t\t\tsuper(body);\n+\t\t\tthis.endpoint = endpoint;\n+\t\t\tthis.webClient = webClient;\n+\t\t}\n+\n+\t\t@Override\n+\t\tvoid post(byte[] body, HttpHeaders defaultHeaders) {\n+\t\t\tthis.webClient.post().uri(this.endpoint).headers((headers) -> headers.addAll(defaultHeaders))\n+\t\t\t\t\t.bodyValue(body).retrieve().toBodilessEntity().subscribe((__) -> {\n+\t\t\t\t\t}, (__) -> {",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "896847031",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 30792,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/tracing/zipkin/ZipkinWebClientSender.java",
        "discussion_id": "896847031",
        "commented_code": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2012-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.tracing.zipkin;\n+\n+import zipkin2.Call;\n+\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+/**\n+ * A Zipkin {@link HttpSender} which uses {@link WebClient} for HTTP communication.\n+ *\n+ * @author Stefan Bratanov\n+ */\n+class ZipkinWebClientSender extends HttpSender {\n+\n+\tprivate final String endpoint;\n+\n+\tprivate final WebClient webClient;\n+\n+\tZipkinWebClientSender(String endpoint, WebClient webClient) {\n+\t\tthis.endpoint = endpoint;\n+\t\tthis.webClient = webClient;\n+\t}\n+\n+\t@Override\n+\tpublic HttpPostCall sendSpans(byte[] batchedEncodedSpans) {\n+\t\treturn new WebClientHttpPostCall(this.endpoint, batchedEncodedSpans, this.webClient);\n+\t}\n+\n+\tprivate static class WebClientHttpPostCall extends HttpPostCall {\n+\n+\t\tprivate final String endpoint;\n+\n+\t\tprivate final WebClient webClient;\n+\n+\t\tWebClientHttpPostCall(String endpoint, byte[] body, WebClient webClient) {\n+\t\t\tsuper(body);\n+\t\t\tthis.endpoint = endpoint;\n+\t\t\tthis.webClient = webClient;\n+\t\t}\n+\n+\t\t@Override\n+\t\tvoid post(byte[] body, HttpHeaders defaultHeaders) {\n+\t\t\tthis.webClient.post().uri(this.endpoint).headers((headers) -> headers.addAll(defaultHeaders))\n+\t\t\t\t\t.bodyValue(body).retrieve().toBodilessEntity().subscribe((__) -> {\n+\t\t\t\t\t}, (__) -> {",
        "comment_created_at": "2022-06-14T13:50:47+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "This looks wrong, the errors will be suppressed. The webclient and the Zipkin Sender interface both support callbacks, maybe we could refactor this to fix the error handling?",
        "pr_file_module": null
      }
    ]
  }
]