[
  {
    "discussion_id": "2168368432",
    "pr_number": 46007,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/SpelTagValueExpressionResolverTests.java",
    "created_at": "2025-06-26T07:22:40+00:00",
    "commented_code": "+/*\n+ * Copyright 2012-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import org.springframework.data.util.Pair;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n+\n+class SpelTagValueExpressionResolverTests {\n+\n+\tfinal SpelTagValueExpressionResolver resolver = new SpelTagValueExpressionResolver();\n+\n+\t@ParameterizedTest\n+\t@MethodSource\n+\tvoid checkValidExpression(Object value, String expression, String expected) {\n+\t\tassertThat(this.resolver.resolve(expression, value)).isEqualTo(expected);\n+\t}\n+\n+\tstatic Stream<Arguments> checkValidExpression() {\n+\t\treturn Stream.of(Arguments.of(\"foo\", \"length\", \"3\"), Arguments.of(\"foo\", \"isEmpty\", \"false\"),\n+\t\t\t\tArguments.of(Pair.of(\"left\", \"right\"), \"first\", \"left\"),\n+\t\t\t\tArguments.of(Map.of(\"foo\", \"bar\"), \"['foo']\", \"bar\"),\n+\t\t\t\tArguments.of(Map.of(\"foo\", \"bar\"), \"['baz']\", null),\n+\t\t\t\tArguments.of(Map.of(\"foo\", Pair.of(1, 2)), \"['foo'].first\", \"1\"),\n+\t\t\t\tArguments.of(Map.of(\"foo\", Pair.of(1, 2)), \"['bar']?.first\", null));\n+\t}",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "2168368432",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 46007,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/SpelTagValueExpressionResolverTests.java",
        "discussion_id": "2168368432",
        "commented_code": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2012-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import org.springframework.data.util.Pair;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n+\n+class SpelTagValueExpressionResolverTests {\n+\n+\tfinal SpelTagValueExpressionResolver resolver = new SpelTagValueExpressionResolver();\n+\n+\t@ParameterizedTest\n+\t@MethodSource\n+\tvoid checkValidExpression(Object value, String expression, String expected) {\n+\t\tassertThat(this.resolver.resolve(expression, value)).isEqualTo(expected);\n+\t}\n+\n+\tstatic Stream<Arguments> checkValidExpression() {\n+\t\treturn Stream.of(Arguments.of(\"foo\", \"length\", \"3\"), Arguments.of(\"foo\", \"isEmpty\", \"false\"),\n+\t\t\t\tArguments.of(Pair.of(\"left\", \"right\"), \"first\", \"left\"),\n+\t\t\t\tArguments.of(Map.of(\"foo\", \"bar\"), \"['foo']\", \"bar\"),\n+\t\t\t\tArguments.of(Map.of(\"foo\", \"bar\"), \"['baz']\", null),\n+\t\t\t\tArguments.of(Map.of(\"foo\", Pair.of(1, 2)), \"['foo'].first\", \"1\"),\n+\t\t\t\tArguments.of(Map.of(\"foo\", Pair.of(1, 2)), \"['bar']?.first\", null));\n+\t}",
        "comment_created_at": "2025-06-26T07:22:40+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "This is largely testing the underlying SpEL support. It could be simplified to test a single valid expression.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2168369001",
    "pr_number": 46007,
    "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/SpelTagValueExpressionResolverTests.java",
    "created_at": "2025-06-26T07:22:59+00:00",
    "commented_code": "+/*\n+ * Copyright 2012-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import org.springframework.data.util.Pair;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n+\n+class SpelTagValueExpressionResolverTests {\n+\n+\tfinal SpelTagValueExpressionResolver resolver = new SpelTagValueExpressionResolver();\n+\n+\t@ParameterizedTest\n+\t@MethodSource\n+\tvoid checkValidExpression(Object value, String expression, String expected) {\n+\t\tassertThat(this.resolver.resolve(expression, value)).isEqualTo(expected);\n+\t}\n+\n+\tstatic Stream<Arguments> checkValidExpression() {\n+\t\treturn Stream.of(Arguments.of(\"foo\", \"length\", \"3\"), Arguments.of(\"foo\", \"isEmpty\", \"false\"),\n+\t\t\t\tArguments.of(Pair.of(\"left\", \"right\"), \"first\", \"left\"),\n+\t\t\t\tArguments.of(Map.of(\"foo\", \"bar\"), \"['foo']\", \"bar\"),\n+\t\t\t\tArguments.of(Map.of(\"foo\", \"bar\"), \"['baz']\", null),\n+\t\t\t\tArguments.of(Map.of(\"foo\", Pair.of(1, 2)), \"['foo'].first\", \"1\"),\n+\t\t\t\tArguments.of(Map.of(\"foo\", Pair.of(1, 2)), \"['bar']?.first\", null));\n+\t}\n+\n+\t@ParameterizedTest\n+\t@MethodSource\n+\tvoid checkInvalidExpression(Object value, String expression) {\n+\t\tassertThatIllegalStateException().isThrownBy(() -> this.resolver.resolve(expression, value));\n+\t}\n+\n+\tstatic Stream<Arguments> checkInvalidExpression() {\n+\t\treturn Stream.of(Arguments.of(\"foo\", \"unknownMethod\"), Arguments.of(null, \"length\"),\n+\t\t\t\tArguments.of(Map.of(\"foo\", Pair.of(1, 2)), \"['bar'].first\"),\n+\t\t\t\tArguments.of(Collections.emptyMap(), \"invalid expression\"));\n+\t}",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "2168369001",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 46007,
        "pr_file": "spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/SpelTagValueExpressionResolverTests.java",
        "discussion_id": "2168369001",
        "commented_code": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2012-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.autoconfigure.metrics;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import org.springframework.data.util.Pair;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n+\n+class SpelTagValueExpressionResolverTests {\n+\n+\tfinal SpelTagValueExpressionResolver resolver = new SpelTagValueExpressionResolver();\n+\n+\t@ParameterizedTest\n+\t@MethodSource\n+\tvoid checkValidExpression(Object value, String expression, String expected) {\n+\t\tassertThat(this.resolver.resolve(expression, value)).isEqualTo(expected);\n+\t}\n+\n+\tstatic Stream<Arguments> checkValidExpression() {\n+\t\treturn Stream.of(Arguments.of(\"foo\", \"length\", \"3\"), Arguments.of(\"foo\", \"isEmpty\", \"false\"),\n+\t\t\t\tArguments.of(Pair.of(\"left\", \"right\"), \"first\", \"left\"),\n+\t\t\t\tArguments.of(Map.of(\"foo\", \"bar\"), \"['foo']\", \"bar\"),\n+\t\t\t\tArguments.of(Map.of(\"foo\", \"bar\"), \"['baz']\", null),\n+\t\t\t\tArguments.of(Map.of(\"foo\", Pair.of(1, 2)), \"['foo'].first\", \"1\"),\n+\t\t\t\tArguments.of(Map.of(\"foo\", Pair.of(1, 2)), \"['bar']?.first\", null));\n+\t}\n+\n+\t@ParameterizedTest\n+\t@MethodSource\n+\tvoid checkInvalidExpression(Object value, String expression) {\n+\t\tassertThatIllegalStateException().isThrownBy(() -> this.resolver.resolve(expression, value));\n+\t}\n+\n+\tstatic Stream<Arguments> checkInvalidExpression() {\n+\t\treturn Stream.of(Arguments.of(\"foo\", \"unknownMethod\"), Arguments.of(null, \"length\"),\n+\t\t\t\tArguments.of(Map.of(\"foo\", Pair.of(1, 2)), \"['bar'].first\"),\n+\t\t\t\tArguments.of(Collections.emptyMap(), \"invalid expression\"));\n+\t}",
        "comment_created_at": "2025-06-26T07:22:59+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "This is largely testing the underlying SpEL support. It could be simplified to test a single invalid expression.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1781113329",
    "pr_number": 42460,
    "pr_file": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java",
    "created_at": "2024-09-30T13:16:39+00:00",
    "commented_code": "assertConnectionDetails(connectionDetails);\n \t}\n \n+\t@DockerComposeTest(composeFile = \"postgres-compose-application-name-label.yaml\", image = TestImage.POSTGRESQL,",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1781113329",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 42460,
        "pr_file": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java",
        "discussion_id": "1781113329",
        "commented_code": "@@ -57,6 +57,38 @@ void runWithBitnamiImageCreatesConnectionDetails(JdbcConnectionDetails connectio\n \t\tassertConnectionDetails(connectionDetails);\n \t}\n \n+\t@DockerComposeTest(composeFile = \"postgres-compose-application-name-label.yaml\", image = TestImage.POSTGRESQL,",
        "comment_created_at": "2024-09-30T13:16:39+00:00",
        "comment_author": "snicoll",
        "comment_body": "Those tests shouldn't need to be full integration tests. The only thing that we assert here is that the `ConnectionDetails` auto-configured bean has the correct state. I can see that we don't have such tests so far but I wonder if it wouldn't be useful to put something in place so that we don't need all the docker machinery.",
        "pr_file_module": null
      },
      {
        "comment_id": "1781166431",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 42460,
        "pr_file": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/java/org/springframework/boot/docker/compose/service/connection/postgres/PostgresJdbcDockerComposeConnectionDetailsFactoryIntegrationTests.java",
        "discussion_id": "1781113329",
        "commented_code": "@@ -57,6 +57,38 @@ void runWithBitnamiImageCreatesConnectionDetails(JdbcConnectionDetails connectio\n \t\tassertConnectionDetails(connectionDetails);\n \t}\n \n+\t@DockerComposeTest(composeFile = \"postgres-compose-application-name-label.yaml\", image = TestImage.POSTGRESQL,",
        "comment_created_at": "2024-09-30T13:45:39+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "+1. For this to warrant being a Docker-based test, I think it should somehow check that setting the `application_name` has had the desired effect on the Postgres side of things.\r\n\r\nI'd then prefer that we only have a single Docker-based test that checks this and that the precedence of the different sources of the application name is unit tested without involving Docker. Right now we're adding a lot to the build time and I don't think the extra test coverage warrants that increase.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1859508647",
    "pr_number": 43286,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizerTests.java",
    "created_at": "2024-11-27T00:57:54+00:00",
    "commented_code": ".isEqualTo(DataSize.ofMegabytes(10).toBytes()));\n \t}\n \n+\t@ParameterizedTest\n+\t@ValueSource(ints = { -1, 0, 100 })",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1859508647",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 43286,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizerTests.java",
        "discussion_id": "1859508647",
        "commented_code": "@@ -194,6 +197,14 @@ void customMaxHttpRequestHeaderSize() {\n \t\t\t.isEqualTo(DataSize.ofMegabytes(10).toBytes()));\n \t}\n \n+\t@ParameterizedTest\n+\t@ValueSource(ints = { -1, 0, 100 })",
        "comment_created_at": "2024-11-27T00:57:54+00:00",
        "comment_author": "quaff",
        "comment_body": "Is `@ParameterizedTest` required here to test negative value? @wilkinsona ",
        "pr_file_module": null
      },
      {
        "comment_id": "1860283193",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 43286,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizerTests.java",
        "discussion_id": "1859508647",
        "commented_code": "@@ -194,6 +197,14 @@ void customMaxHttpRequestHeaderSize() {\n \t\t\t.isEqualTo(DataSize.ofMegabytes(10).toBytes()));\n \t}\n \n+\t@ParameterizedTest\n+\t@ValueSource(ints = { -1, 0, 100 })",
        "comment_created_at": "2024-11-27T09:18:24+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I don't think so. Given that all three values are passed through and then returned by `getMaxParameterCount()` without any having special treatment, I think testing with a single value would be sufficient.",
        "pr_file_module": null
      },
      {
        "comment_id": "1860310797",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 43286,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizerTests.java",
        "discussion_id": "1859508647",
        "commented_code": "@@ -194,6 +197,14 @@ void customMaxHttpRequestHeaderSize() {\n \t\t\t.isEqualTo(DataSize.ofMegabytes(10).toBytes()));\n \t}\n \n+\t@ParameterizedTest\n+\t@ValueSource(ints = { -1, 0, 100 })",
        "comment_created_at": "2024-11-27T09:31:20+00:00",
        "comment_author": "quaff",
        "comment_body": "OK, I reverted this part.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1717824277",
    "pr_number": 41205,
    "pr_file": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-tomcat-ssl/src/test/java/smoketest/tomcat/ssl/SampleTomcatSslApplicationTests.java",
    "created_at": "2024-08-15T03:09:40+00:00",
    "commented_code": "assertThat(entity.getBody()).isEqualTo(\"Hello, world\");\n \t}\n \n+\t@Test\n+\tvoid testSslInfo() {\n+\t\tResponseEntity<String> entity = this.restTemplate.getForEntity(\"/actuator/info\", String.class);\n+\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n+\t\tassertThat(entity.getBody()).contains(\"\\\"name\\\":\\\"ssldemo\\\"\")\n+\t\t\t.contains(\"\\\"alias\\\":\\\"spring-boot-ssl-sample\\\"\")\n+\t\t\t.contains(\"\\\"status\\\":\\\"EXPIRED\\\"\")\n+\t\t\t.contains(\"\\\"subject\\\":\\\"CN=localhost,OU=Unknown,O=Unknown,L=Unknown,ST=Unknown,C=Unknown\\\"\");",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1717824277",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 41205,
        "pr_file": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-tomcat-ssl/src/test/java/smoketest/tomcat/ssl/SampleTomcatSslApplicationTests.java",
        "discussion_id": "1717824277",
        "commented_code": "@@ -49,4 +49,24 @@ void testHome() {\n \t\tassertThat(entity.getBody()).isEqualTo(\"Hello, world\");\n \t}\n \n+\t@Test\n+\tvoid testSslInfo() {\n+\t\tResponseEntity<String> entity = this.restTemplate.getForEntity(\"/actuator/info\", String.class);\n+\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n+\t\tassertThat(entity.getBody()).contains(\"\\\"name\\\":\\\"ssldemo\\\"\")\n+\t\t\t.contains(\"\\\"alias\\\":\\\"spring-boot-ssl-sample\\\"\")\n+\t\t\t.contains(\"\\\"status\\\":\\\"EXPIRED\\\"\")\n+\t\t\t.contains(\"\\\"subject\\\":\\\"CN=localhost,OU=Unknown,O=Unknown,L=Unknown,ST=Unknown,C=Unknown\\\"\");",
        "comment_created_at": "2024-08-15T03:09:40+00:00",
        "comment_author": "jonatan-ivanov",
        "comment_body": "Is there a test tool in Boot that can do better verifications like this?\r\nE.g.: Verifying values via JSONPath, RestAssured has a nice DSL around this.",
        "pr_file_module": null
      },
      {
        "comment_id": "1718479327",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 41205,
        "pr_file": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-tomcat-ssl/src/test/java/smoketest/tomcat/ssl/SampleTomcatSslApplicationTests.java",
        "discussion_id": "1717824277",
        "commented_code": "@@ -49,4 +49,24 @@ void testHome() {\n \t\tassertThat(entity.getBody()).isEqualTo(\"Hello, world\");\n \t}\n \n+\t@Test\n+\tvoid testSslInfo() {\n+\t\tResponseEntity<String> entity = this.restTemplate.getForEntity(\"/actuator/info\", String.class);\n+\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n+\t\tassertThat(entity.getBody()).contains(\"\\\"name\\\":\\\"ssldemo\\\"\")\n+\t\t\t.contains(\"\\\"alias\\\":\\\"spring-boot-ssl-sample\\\"\")\n+\t\t\t.contains(\"\\\"status\\\":\\\"EXPIRED\\\"\")\n+\t\t\t.contains(\"\\\"subject\\\":\\\"CN=localhost,OU=Unknown,O=Unknown,L=Unknown,ST=Unknown,C=Unknown\\\"\");",
        "comment_created_at": "2024-08-15T14:26:03+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "The paths aren't right in this example, but Framwork 6.2's `JsonContent` is an option here:\r\n\r\n```java\r\nJsonContent body = new JsonContent(entity.getBody());\r\nassertThat(body).extractingPath(\"alias\").isEqualTo(\"spring-boot-ssl-sample\");\r\nassertThat(body).extractingPath(\"status\").isEqualTo(\"EXPIRED\");\r\nassertThat(body).extractingPath(\"subject\")\r\n\t.isEqualTo(\"CN=localhost,OU=Unknown,O=Unknown,L=Unknown,ST=Unknown,C=Unknown\");\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1719121991",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 41205,
        "pr_file": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-tomcat-ssl/src/test/java/smoketest/tomcat/ssl/SampleTomcatSslApplicationTests.java",
        "discussion_id": "1717824277",
        "commented_code": "@@ -49,4 +49,24 @@ void testHome() {\n \t\tassertThat(entity.getBody()).isEqualTo(\"Hello, world\");\n \t}\n \n+\t@Test\n+\tvoid testSslInfo() {\n+\t\tResponseEntity<String> entity = this.restTemplate.getForEntity(\"/actuator/info\", String.class);\n+\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n+\t\tassertThat(entity.getBody()).contains(\"\\\"name\\\":\\\"ssldemo\\\"\")\n+\t\t\t.contains(\"\\\"alias\\\":\\\"spring-boot-ssl-sample\\\"\")\n+\t\t\t.contains(\"\\\"status\\\":\\\"EXPIRED\\\"\")\n+\t\t\t.contains(\"\\\"subject\\\":\\\"CN=localhost,OU=Unknown,O=Unknown,L=Unknown,ST=Unknown,C=Unknown\\\"\");",
        "comment_created_at": "2024-08-15T23:45:10+00:00",
        "comment_author": "jonatan-ivanov",
        "comment_body": "Oh, this is so much better, thank you!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1316666851",
    "pr_number": 37196,
    "pr_file": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-pulsar/src/test/java/smoketest/pulsar/SamplePulsarApplicationTests.java",
    "created_at": "2023-09-06T03:16:15+00:00",
    "commented_code": "registry.add(\"spring.pulsar.admin.service-url\", PULSAR_CONTAINER::getHttpServiceUrl);\n \t}\n \n-\t@Test\n-\tvoid appProducesAndConsumesSampleMessages(@Autowired SampleMessageConsumer consumer) {\n-\t\tAwaitility.await()\n-\t\t\t.atMost(Duration.ofMinutes(3))\n-\t\t\t.with()\n-\t\t\t.pollInterval(Duration.ofMillis(500))\n-\t\t\t.untilAsserted(() -> hasExpectedIds(consumer));\n+\t@Nested\n+\t@SpringBootTest\n+\t@ActiveProfiles(\"smoketest.pulsar.imperative\")\n+\tclass ImperativeApp {\n+\n+\t\t@Test\n+\t\tvoid appProducesAndConsumesMessages(CapturedOutput output) {\n+\t\t\tList<String> expectedOutput = new ArrayList<>();\n+\t\t\tIntStream.range(0, 10).forEachOrdered((i) -> {\n+\t\t\t\texpectedOutput.add(\"++++++PRODUCE IMPERATIVE:(\" + i + \")------\");\n+\t\t\t\texpectedOutput.add(\"++++++CONSUME IMPERATIVE:(\" + i + \")------\");\n+\t\t\t});\n+\t\t\tAwaitility.waitAtMost(Duration.ofSeconds(30))",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1316666851",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 37196,
        "pr_file": "spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-pulsar/src/test/java/smoketest/pulsar/SamplePulsarApplicationTests.java",
        "discussion_id": "1316666851",
        "commented_code": "@@ -50,17 +54,40 @@ static void pulsarProperties(DynamicPropertyRegistry registry) {\n \t\tregistry.add(\"spring.pulsar.admin.service-url\", PULSAR_CONTAINER::getHttpServiceUrl);\n \t}\n \n-\t@Test\n-\tvoid appProducesAndConsumesSampleMessages(@Autowired SampleMessageConsumer consumer) {\n-\t\tAwaitility.await()\n-\t\t\t.atMost(Duration.ofMinutes(3))\n-\t\t\t.with()\n-\t\t\t.pollInterval(Duration.ofMillis(500))\n-\t\t\t.untilAsserted(() -> hasExpectedIds(consumer));\n+\t@Nested\n+\t@SpringBootTest\n+\t@ActiveProfiles(\"smoketest.pulsar.imperative\")\n+\tclass ImperativeApp {\n+\n+\t\t@Test\n+\t\tvoid appProducesAndConsumesMessages(CapturedOutput output) {\n+\t\t\tList<String> expectedOutput = new ArrayList<>();\n+\t\t\tIntStream.range(0, 10).forEachOrdered((i) -> {\n+\t\t\t\texpectedOutput.add(\"++++++PRODUCE IMPERATIVE:(\" + i + \")------\");\n+\t\t\t\texpectedOutput.add(\"++++++CONSUME IMPERATIVE:(\" + i + \")------\");\n+\t\t\t});\n+\t\t\tAwaitility.waitAtMost(Duration.ofSeconds(30))",
        "comment_created_at": "2023-09-06T03:16:15+00:00",
        "comment_author": "onobc",
        "comment_body": "Using captured output simplifies by removing the need for the message consumer component and the list of messages etc..",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1555216536",
    "pr_number": 40189,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/pulsar/PulsarPropertiesTests.java",
    "created_at": "2024-04-08T04:48:30+00:00",
    "commented_code": "void bind() {\n \t\t\tMap<String, String> map = new HashMap<>();\n \t\t\tmap.put(\"spring.pulsar.template.observations-enabled\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.enabled\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.required\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.timeout\", \"60s\");\n \t\t\tPulsarProperties.Template properties = bindPropeties(map).getTemplate();\n \t\t\tassertThat(properties.isObservationsEnabled()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().isEnabled()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().isRequired()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().getTimeout()).isEqualTo(Duration.ofSeconds(60));\n+\t\t}\n+\n+\t}\n+\n+\t@Nested\n+\tclass TransactionProperties {\n+\n+\t\t@ParameterizedTest\n+\t\t@MethodSource\n+\t\tvoid transactionsEnabledTests(boolean listenerEnablesTransactions, boolean templateEnablesTransactions,",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1555216536",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 40189,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/pulsar/PulsarPropertiesTests.java",
        "discussion_id": "1555216536",
        "commented_code": "@@ -390,8 +400,34 @@ class TemplateProperties {\n \t\tvoid bind() {\n \t\t\tMap<String, String> map = new HashMap<>();\n \t\t\tmap.put(\"spring.pulsar.template.observations-enabled\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.enabled\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.required\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.timeout\", \"60s\");\n \t\t\tPulsarProperties.Template properties = bindPropeties(map).getTemplate();\n \t\t\tassertThat(properties.isObservationsEnabled()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().isEnabled()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().isRequired()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().getTimeout()).isEqualTo(Duration.ofSeconds(60));\n+\t\t}\n+\n+\t}\n+\n+\t@Nested\n+\tclass TransactionProperties {\n+\n+\t\t@ParameterizedTest\n+\t\t@MethodSource\n+\t\tvoid transactionsEnabledTests(boolean listenerEnablesTransactions, boolean templateEnablesTransactions,",
        "comment_created_at": "2024-04-08T04:48:30+00:00",
        "comment_author": "onobc",
        "comment_body": "I am on the fence here w/ the use of `@ParameterizedTest` w/ 4 items in the test arguments stream provider vs. having 4 individual (yet repetitive) tests methods (feels a bit \"\"six of one, half a dozen of the other\"). \r\n\r\nOn one hand, the 4 individual test methods makes it clear what is being tested. And to get that same clarity w/ this impl we have to add the test name as arg0 and then do `@ParameterizedTest(name = \"{0}\")`. \r\nOn the other hand, this current impl reduces the 4 tests that are about 99% the same. 🤷🏻 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1559639697",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 40189,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/pulsar/PulsarPropertiesTests.java",
        "discussion_id": "1555216536",
        "commented_code": "@@ -390,8 +400,34 @@ class TemplateProperties {\n \t\tvoid bind() {\n \t\t\tMap<String, String> map = new HashMap<>();\n \t\t\tmap.put(\"spring.pulsar.template.observations-enabled\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.enabled\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.required\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.timeout\", \"60s\");\n \t\t\tPulsarProperties.Template properties = bindPropeties(map).getTemplate();\n \t\t\tassertThat(properties.isObservationsEnabled()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().isEnabled()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().isRequired()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().getTimeout()).isEqualTo(Duration.ofSeconds(60));\n+\t\t}\n+\n+\t}\n+\n+\t@Nested\n+\tclass TransactionProperties {\n+\n+\t\t@ParameterizedTest\n+\t\t@MethodSource\n+\t\tvoid transactionsEnabledTests(boolean listenerEnablesTransactions, boolean templateEnablesTransactions,",
        "comment_created_at": "2024-04-10T15:15:44+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "I don't feel strongly one way or the other. That said, I do wonder if the intent would be clearer with four separate methods with names that make the expectations clear. They could all then delegate to a common method that looks a lot like this one.",
        "pr_file_module": null
      },
      {
        "comment_id": "1559815024",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 40189,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/pulsar/PulsarPropertiesTests.java",
        "discussion_id": "1555216536",
        "commented_code": "@@ -390,8 +400,34 @@ class TemplateProperties {\n \t\tvoid bind() {\n \t\t\tMap<String, String> map = new HashMap<>();\n \t\t\tmap.put(\"spring.pulsar.template.observations-enabled\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.enabled\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.required\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.timeout\", \"60s\");\n \t\t\tPulsarProperties.Template properties = bindPropeties(map).getTemplate();\n \t\t\tassertThat(properties.isObservationsEnabled()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().isEnabled()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().isRequired()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().getTimeout()).isEqualTo(Duration.ofSeconds(60));\n+\t\t}\n+\n+\t}\n+\n+\t@Nested\n+\tclass TransactionProperties {\n+\n+\t\t@ParameterizedTest\n+\t\t@MethodSource\n+\t\tvoid transactionsEnabledTests(boolean listenerEnablesTransactions, boolean templateEnablesTransactions,",
        "comment_created_at": "2024-04-10T17:10:03+00:00",
        "comment_author": "onobc",
        "comment_body": "Yeh, I think the value for doing this for 4 cases does not outweigh having 4 concise test methods (delegating to a single test impl method). I will adjust. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1563340432",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 40189,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/pulsar/PulsarPropertiesTests.java",
        "discussion_id": "1555216536",
        "commented_code": "@@ -390,8 +400,34 @@ class TemplateProperties {\n \t\tvoid bind() {\n \t\t\tMap<String, String> map = new HashMap<>();\n \t\t\tmap.put(\"spring.pulsar.template.observations-enabled\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.enabled\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.required\", \"true\");\n+\t\t\tmap.put(\"spring.pulsar.template.transaction.timeout\", \"60s\");\n \t\t\tPulsarProperties.Template properties = bindPropeties(map).getTemplate();\n \t\t\tassertThat(properties.isObservationsEnabled()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().isEnabled()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().isRequired()).isTrue();\n+\t\t\tassertThat(properties.getTransaction().getTimeout()).isEqualTo(Duration.ofSeconds(60));\n+\t\t}\n+\n+\t}\n+\n+\t@Nested\n+\tclass TransactionProperties {\n+\n+\t\t@ParameterizedTest\n+\t\t@MethodSource\n+\t\tvoid transactionsEnabledTests(boolean listenerEnablesTransactions, boolean templateEnablesTransactions,",
        "comment_created_at": "2024-04-12T23:23:33+00:00",
        "comment_author": "onobc",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1248239276",
    "pr_number": 36060,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfigurationTests.java",
    "created_at": "2023-06-30T19:56:39+00:00",
    "commented_code": ".hasBean(\"customInitializer\"));\n \t}\n \n+\t@Test\n+\tvoid testExecuteLocalAndNonConfiguredJob() {\n+\t\tthis.contextRunner\n+\t\t.withUserConfiguration(NamedJobConfigurationWithLocalJob.class, EmbeddedDataSourceConfiguration.class)\n+\t\t.withPropertyValues(\"spring.batch.job.names:discreteLocalJob,nonConfiguredJob\")\n+\t\t.run((context) -> {\n+\t\t\tassertThat(context).hasSingleBean(JobLauncher.class);\n+\t\t\tassertThrows(NoSuchJobException.class,()->{",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1248239276",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 36060,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfigurationTests.java",
        "discussion_id": "1248239276",
        "commented_code": "@@ -374,6 +377,21 @@ void whenTheUserDefinesTheirOwnDatabaseInitializerThenTheAutoConfiguredBatchInit\n \t\t\t\t.hasBean(\"customInitializer\"));\n \t}\n \n+\t@Test\n+\tvoid testExecuteLocalAndNonConfiguredJob() {\n+\t\tthis.contextRunner\n+\t\t.withUserConfiguration(NamedJobConfigurationWithLocalJob.class, EmbeddedDataSourceConfiguration.class)\n+\t\t.withPropertyValues(\"spring.batch.job.names:discreteLocalJob,nonConfiguredJob\")\n+\t\t.run((context) -> {\n+\t\t\tassertThat(context).hasSingleBean(JobLauncher.class);\n+\t\t\tassertThrows(NoSuchJobException.class,()->{",
        "comment_created_at": "2023-06-30T19:56:39+00:00",
        "comment_author": "scottfrederick",
        "comment_body": "The Spring Boot style rules don't allow JUnit `assertThrows()`. Please use the AssertJ `assertThatIllegalArgumentException()` or `assertThatExceptionOfType()` instead. ",
        "pr_file_module": null
      }
    ]
  }
]