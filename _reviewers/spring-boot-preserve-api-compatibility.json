[
  {
    "discussion_id": "795071859",
    "pr_number": 29596,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/RequestMatcherProvider.java",
    "created_at": "2022-01-29T16:31:27+00:00",
    "commented_code": "* @param pattern the request pattern\n \t * @return a request matcher\n \t */\n-\tRequestMatcher getRequestMatcher(String pattern);\n+\tdefault RequestMatcher getRequestMatcher(String pattern) {\n+\t\treturn getRequestMatcher(pattern, null);\n+\t}\n+\n+\t/**\n+\t * Return the {@link RequestMatcher} to be used for the specified pattern and http\n+\t * method.\n+\t * @param pattern the request pattern\n+\t * @param httpMethod the http method\n+\t * @return a request matcher\n+\t */\n+\tRequestMatcher getRequestMatcher(String pattern, HttpMethod httpMethod);",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "795071859",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 29596,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/RequestMatcherProvider.java",
        "discussion_id": "795071859",
        "commented_code": "@@ -33,6 +35,17 @@\n \t * @param pattern the request pattern\n \t * @return a request matcher\n \t */\n-\tRequestMatcher getRequestMatcher(String pattern);\n+\tdefault RequestMatcher getRequestMatcher(String pattern) {\n+\t\treturn getRequestMatcher(pattern, null);\n+\t}\n+\n+\t/**\n+\t * Return the {@link RequestMatcher} to be used for the specified pattern and http\n+\t * method.\n+\t * @param pattern the request pattern\n+\t * @param httpMethod the http method\n+\t * @return a request matcher\n+\t */\n+\tRequestMatcher getRequestMatcher(String pattern, HttpMethod httpMethod);",
        "comment_created_at": "2022-01-29T16:31:27+00:00",
        "comment_author": "onobc",
        "comment_body": "I am not super-excited about this change. However, this seemed the least intrusive from a breakage standpoint. This leaves the other API in tact but it would break any previous lambda usage as the functional interface method now takes `(pattern, method)` vs. the previous `(pattern)`.",
        "pr_file_module": null
      },
      {
        "comment_id": "795343024",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 29596,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/RequestMatcherProvider.java",
        "discussion_id": "795071859",
        "commented_code": "@@ -33,6 +35,17 @@\n \t * @param pattern the request pattern\n \t * @return a request matcher\n \t */\n-\tRequestMatcher getRequestMatcher(String pattern);\n+\tdefault RequestMatcher getRequestMatcher(String pattern) {\n+\t\treturn getRequestMatcher(pattern, null);\n+\t}\n+\n+\t/**\n+\t * Return the {@link RequestMatcher} to be used for the specified pattern and http\n+\t * method.\n+\t * @param pattern the request pattern\n+\t * @param httpMethod the http method\n+\t * @return a request matcher\n+\t */\n+\tRequestMatcher getRequestMatcher(String pattern, HttpMethod httpMethod);",
        "comment_created_at": "2022-01-31T04:57:17+00:00",
        "comment_author": "philwebb",
        "comment_body": "I've been playing with this locally and I'll try to push something soon. I think this API is really in wrong place so we could deprecate it here and move it to `org.springframework.boot.actuate.autoconfigure.security.servlet` where it's closer to the actual thing that uses it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1446986911",
    "pr_number": 38762,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqExceptionTranslator.java",
    "created_at": "2024-01-10T07:34:26+00:00",
    "commented_code": "import org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;\n \n /**\n- * Transforms {@link java.sql.SQLException} into a Spring-specific\n+ * A {@link ExecuteListener} which can transforms or translate {@link Exception} into a Spring-specific\n  * {@link DataAccessException}.\n  *\n- * @author Lukas Eder\n- * @author Andreas Ahlenstorf\n- * @author Phillip Webb\n- * @author Stephane Nicoll\n- * @since 1.5.10\n+ * @author Dennis Melzer\n+ * @since 3.2.1\n  */\n-public class JooqExceptionTranslator implements ExecuteListener {\n-\n-\t// Based on the jOOQ-spring-example from https://github.com/jOOQ/jOOQ\n-\n-\tprivate static final Log logger = LogFactory.getLog(JooqExceptionTranslator.class);\n-\n-\t@Override\n-\tpublic void exception(ExecuteContext context) {\n-\t\tSQLExceptionTranslator translator = getTranslator(context);\n-\t\t// The exception() callback is not only triggered for SQL exceptions but also for\n-\t\t// \"normal\" exceptions. In those cases sqlException() returns null.\n-\t\tSQLException exception = context.sqlException();\n-\t\twhile (exception != null) {\n-\t\t\thandle(context, translator, exception);\n-\t\t\texception = exception.getNextException();\n-\t\t}\n-\t}\n-\n-\tprivate SQLExceptionTranslator getTranslator(ExecuteContext context) {\n-\t\tSQLDialect dialect = context.configuration().dialect();\n-\t\tif (dialect != null && dialect.thirdParty() != null) {\n-\t\t\tString dbName = dialect.thirdParty().springDbName();\n-\t\t\tif (dbName != null) {\n-\t\t\t\treturn new SQLErrorCodeSQLExceptionTranslator(dbName);\n-\t\t\t}\n-\t\t}\n-\t\treturn new SQLStateSQLExceptionTranslator();\n-\t}\n+public interface JooqExceptionTranslator extends ExecuteListener {",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1446986911",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 38762,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqExceptionTranslator.java",
        "discussion_id": "1446986911",
        "commented_code": "@@ -30,68 +30,17 @@\n import org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;\n \n /**\n- * Transforms {@link java.sql.SQLException} into a Spring-specific\n+ * A {@link ExecuteListener} which can transforms or translate {@link Exception} into a Spring-specific\n  * {@link DataAccessException}.\n  *\n- * @author Lukas Eder\n- * @author Andreas Ahlenstorf\n- * @author Phillip Webb\n- * @author Stephane Nicoll\n- * @since 1.5.10\n+ * @author Dennis Melzer\n+ * @since 3.2.1\n  */\n-public class JooqExceptionTranslator implements ExecuteListener {\n-\n-\t// Based on the jOOQ-spring-example from https://github.com/jOOQ/jOOQ\n-\n-\tprivate static final Log logger = LogFactory.getLog(JooqExceptionTranslator.class);\n-\n-\t@Override\n-\tpublic void exception(ExecuteContext context) {\n-\t\tSQLExceptionTranslator translator = getTranslator(context);\n-\t\t// The exception() callback is not only triggered for SQL exceptions but also for\n-\t\t// \"normal\" exceptions. In those cases sqlException() returns null.\n-\t\tSQLException exception = context.sqlException();\n-\t\twhile (exception != null) {\n-\t\t\thandle(context, translator, exception);\n-\t\t\texception = exception.getNextException();\n-\t\t}\n-\t}\n-\n-\tprivate SQLExceptionTranslator getTranslator(ExecuteContext context) {\n-\t\tSQLDialect dialect = context.configuration().dialect();\n-\t\tif (dialect != null && dialect.thirdParty() != null) {\n-\t\t\tString dbName = dialect.thirdParty().springDbName();\n-\t\t\tif (dbName != null) {\n-\t\t\t\treturn new SQLErrorCodeSQLExceptionTranslator(dbName);\n-\t\t\t}\n-\t\t}\n-\t\treturn new SQLStateSQLExceptionTranslator();\n-\t}\n+public interface JooqExceptionTranslator extends ExecuteListener {",
        "comment_created_at": "2024-01-10T07:34:26+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "This change breaks backwards compatability. Unfortunately `JooqExceptionTranslator` is public and therefore we need to either deprecate it and then replace it. Or we leave it in place as it is and let users subclass it if they want to change something.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1402248319",
    "pr_number": 38501,
    "pr_file": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DefaultHealthContributorRegistry.java",
    "created_at": "2023-11-22T15:35:10+00:00",
    "commented_code": "}\n \n \tpublic DefaultHealthContributorRegistry(Map<String, HealthContributor> contributors,\n-\t\t\tFunction<String, String> nameFactory) {\n+\t\t\tUnaryOperator<String> nameFactory) {",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1402248319",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 38501,
        "pr_file": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DefaultHealthContributorRegistry.java",
        "discussion_id": "1402248319",
        "commented_code": "@@ -36,7 +36,7 @@ public DefaultHealthContributorRegistry(Map<String, HealthContributor> contribut\n \t}\n \n \tpublic DefaultHealthContributorRegistry(Map<String, HealthContributor> contributors,\n-\t\t\tFunction<String, String> nameFactory) {\n+\t\t\tUnaryOperator<String> nameFactory) {",
        "comment_created_at": "2023-11-22T15:35:10+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "This changes public API in a non-backward compatible way.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1402248458",
    "pr_number": 38501,
    "pr_file": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DefaultReactiveHealthContributorRegistry.java",
    "created_at": "2023-11-22T15:35:16+00:00",
    "commented_code": "}\n \n \tpublic DefaultReactiveHealthContributorRegistry(Map<String, ReactiveHealthContributor> contributors,\n-\t\t\tFunction<String, String> nameFactory) {\n+\t\t\tUnaryOperator<String> nameFactory) {",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1402248458",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 38501,
        "pr_file": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DefaultReactiveHealthContributorRegistry.java",
        "discussion_id": "1402248458",
        "commented_code": "@@ -36,7 +36,7 @@ public DefaultReactiveHealthContributorRegistry(Map<String, ReactiveHealthContri\n \t}\n \n \tpublic DefaultReactiveHealthContributorRegistry(Map<String, ReactiveHealthContributor> contributors,\n-\t\t\tFunction<String, String> nameFactory) {\n+\t\t\tUnaryOperator<String> nameFactory) {",
        "comment_created_at": "2023-11-22T15:35:16+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "This changes public API in a non-backward compatible way.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1402249558",
    "pr_number": 38501,
    "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java",
    "created_at": "2023-11-22T15:36:05+00:00",
    "commented_code": "* @return the default value resolver\n \t * @since 3.2.0\n \t */\n-\tprotected Function<String, String> getDefaultValueResolver(Environment environment) {\n+\tprotected UnaryOperator<String> getDefaultValueResolver(Environment environment) {",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1402249558",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 38501,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java",
        "discussion_id": "1402249558",
        "commented_code": "@@ -184,7 +185,7 @@ protected final void applySystemProperties(Environment environment, LogFile logF\n \t * @return the default value resolver\n \t * @since 3.2.0\n \t */\n-\tprotected Function<String, String> getDefaultValueResolver(Environment environment) {\n+\tprotected UnaryOperator<String> getDefaultValueResolver(Environment environment) {",
        "comment_created_at": "2023-11-22T15:36:05+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "This changes public API in a non-backward compatible way.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1402249717",
    "pr_number": 38501,
    "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystemProperties.java",
    "created_at": "2023-11-22T15:36:11+00:00",
    "commented_code": "* properties\n \t * @since 3.2.0\n \t */\n-\tpublic LoggingSystemProperties(Environment environment, Function<String, String> defaultValueResolver,\n+\tpublic LoggingSystemProperties(Environment environment, UnaryOperator<String> defaultValueResolver,",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1402249717",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 38501,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystemProperties.java",
        "discussion_id": "1402249717",
        "commented_code": "@@ -194,7 +194,7 @@ public LoggingSystemProperties(Environment environment, BiConsumer<String, Strin\n \t * properties\n \t * @since 3.2.0\n \t */\n-\tpublic LoggingSystemProperties(Environment environment, Function<String, String> defaultValueResolver,\n+\tpublic LoggingSystemProperties(Environment environment, UnaryOperator<String> defaultValueResolver,",
        "comment_created_at": "2023-11-22T15:36:11+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "This changes public API in a non-backward compatible way.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1402249802",
    "pr_number": 38501,
    "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java",
    "created_at": "2023-11-22T15:36:16+00:00",
    "commented_code": "* properties\n \t * @since 3.2.0\n \t */\n-\tpublic LogbackLoggingSystemProperties(Environment environment, Function<String, String> defaultValueResolver,\n+\tpublic LogbackLoggingSystemProperties(Environment environment, UnaryOperator<String> defaultValueResolver,",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1402249802",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 38501,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystemProperties.java",
        "discussion_id": "1402249802",
        "commented_code": "@@ -116,7 +116,7 @@ public LogbackLoggingSystemProperties(Environment environment, BiConsumer<String\n \t * properties\n \t * @since 3.2.0\n \t */\n-\tpublic LogbackLoggingSystemProperties(Environment environment, Function<String, String> defaultValueResolver,\n+\tpublic LogbackLoggingSystemProperties(Environment environment, UnaryOperator<String> defaultValueResolver,",
        "comment_created_at": "2023-11-22T15:36:16+00:00",
        "comment_author": "mhalbritter",
        "comment_body": "This changes public API in a non-backward compatible way.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1319588029",
    "pr_number": 37146,
    "pr_file": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/configuration/DockerConfiguration.java",
    "created_at": "2023-09-08T09:10:27+00:00",
    "commented_code": "return this.publishAuthentication;\n \t}\n \n-\tpublic DockerConfiguration withHost(String address, boolean secure, String certificatePath) {\n+\tpublic DockerConfiguration withHost(String address, boolean secure, String certificatePath, Integer socketTimeout) {",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1319588029",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 37146,
        "pr_file": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/configuration/DockerConfiguration.java",
        "discussion_id": "1319588029",
        "commented_code": "@@ -63,16 +63,17 @@ public DockerRegistryAuthentication getPublishRegistryAuthentication() {\n \t\treturn this.publishAuthentication;\n \t}\n \n-\tpublic DockerConfiguration withHost(String address, boolean secure, String certificatePath) {\n+\tpublic DockerConfiguration withHost(String address, boolean secure, String certificatePath, Integer socketTimeout) {",
        "comment_created_at": "2023-09-08T09:10:27+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "This is a breaking API change. A separate method for the timeout would be better.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1319588182",
    "pr_number": 37146,
    "pr_file": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/configuration/DockerConfiguration.java",
    "created_at": "2023-09-08T09:10:36+00:00",
    "commented_code": "return this.publishAuthentication;\n \t}\n \n-\tpublic DockerConfiguration withHost(String address, boolean secure, String certificatePath) {\n+\tpublic DockerConfiguration withHost(String address, boolean secure, String certificatePath, Integer socketTimeout) {\n \t\tAssert.notNull(address, \"Address must not be null\");\n-\t\treturn new DockerConfiguration(DockerHostConfiguration.forAddress(address, secure, certificatePath),\n+\t\treturn new DockerConfiguration(\n+\t\t\t\tDockerHostConfiguration.forAddress(address, secure, certificatePath, socketTimeout),\n \t\t\t\tthis.builderAuthentication, this.publishAuthentication, this.bindHostToBuilder);\n \t}\n \n-\tpublic DockerConfiguration withContext(String context) {\n+\tpublic DockerConfiguration withContext(String context, Integer socketTimeout) {",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1319588182",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 37146,
        "pr_file": "spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/docker/configuration/DockerConfiguration.java",
        "discussion_id": "1319588182",
        "commented_code": "@@ -63,16 +63,17 @@ public DockerRegistryAuthentication getPublishRegistryAuthentication() {\n \t\treturn this.publishAuthentication;\n \t}\n \n-\tpublic DockerConfiguration withHost(String address, boolean secure, String certificatePath) {\n+\tpublic DockerConfiguration withHost(String address, boolean secure, String certificatePath, Integer socketTimeout) {\n \t\tAssert.notNull(address, \"Address must not be null\");\n-\t\treturn new DockerConfiguration(DockerHostConfiguration.forAddress(address, secure, certificatePath),\n+\t\treturn new DockerConfiguration(\n+\t\t\t\tDockerHostConfiguration.forAddress(address, secure, certificatePath, socketTimeout),\n \t\t\t\tthis.builderAuthentication, this.publishAuthentication, this.bindHostToBuilder);\n \t}\n \n-\tpublic DockerConfiguration withContext(String context) {\n+\tpublic DockerConfiguration withContext(String context, Integer socketTimeout) {",
        "comment_created_at": "2023-09-08T09:10:36+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "This is a breaking API change. A separate method for the timeout would be better.",
        "pr_file_module": null
      }
    ]
  }
]