[
  {
    "discussion_id": "884621371",
    "pr_number": 31185,
    "pr_file": ".gitpod.yml",
    "created_at": "2022-05-30T09:28:30+00:00",
    "commented_code": "+## Learn more about this file at 'https://www.gitpod.io/docs/references/gitpod-yml'\n+##\n+## This '.gitpod.yml' file when placed at the root of a project instructs\n+## Gitpod how to prepare & build the project, start development environments\n+## and configure continuous prebuilds. Prebuilds when enabled builds a project\n+## like a CI server so you can start coding right away - no more waiting for\n+## dependencies to download and builds to finish when reviewing pull-requests\n+## or hacking on something new.\n+##\n+## With Gitpod you can develop software from any device (even iPads) via \n+## desktop or browser based versions of VS Code or any JetBrains IDE and\n+## customise it to your individual needs - from themes to extensions, you\n+## have full control.\n+##\n+## The easiest way to try out Gitpod is install the browser extenion:\n+## 'https://www.gitpod.io/docs/browser-extension' or by prefixing\n+## 'https://gitpod.io#' to the source control URL of any project.\n+##\n+## For example: 'https://gitpod.io#https://github.com/gitpod-io/gitpod'\n+\n+\n+## The 'image' section defines which Docker image Gitpod should use. \n+## By default, Gitpod uses a standard Docker Image called 'workspace-full'\n+## which can be found at 'https://github.com/gitpod-io/workspace-images'\n+##\n+## Workspaces started based on this default image come pre-installed with\n+## Docker, Go, Java, Node.js, C/C++, Python, Ruby, Rust, PHP as well as\n+## tools such as Homebrew, Tailscale, Nginx and several more.\n+##\n+## If this image does not include the tools needed for your project then\n+## a public Docker image or your own Docker file can be configured.\n+## \n+## Learn more about images at 'https://www.gitpod.io/docs/config-docker'\n+\n+#image: node:buster                        # use 'https://hub.docker.com/_/node'\n+#\n+#image:                                    # leave image undefined if using a Dockerfile\n+#  file: .gitpod.Dockerfile                # relative path to the Dockerfile from the\n+#                                          # root of the project\n+\n+## The 'tasks' section defines how Gitpod prepares and builds this project\n+## or how Gitpod can start development servers. With Gitpod, there are three\n+## types of tasks:\n+##\n+## - before: Use this for tasks that need to run before init and before command. \n+## - init: Use this to configure prebuilds of heavy-lifting tasks such as\n+##         downloading dependencies or compiling source code.\n+## - command: Use this to start your database or application when the workspace starts.\n+##\n+## Learn more about these tasks at 'https://www.gitpod.io/docs/config-start-tasks'\n+\n+#tasks:\n+#  - before: |\n+#      # commands to execute...\n+#\n+#  - init: |\n+#      # sudo apt-get install python3     # can be used to install operating system \n+#                                         # dependencies but these are not kept after the\n+#                                         # prebuild completes thus Gitpod recommends moving\n+#                                         # operating system dependency installation steps\n+#                                         # to a custom Dockerfile to make prebuilds faster\n+#                                         # and to keep your codebase DRY.  \n+#                                         # 'https://www.gitpod.io/docs/config-docker'\n+#\n+#      # pip install -r requirements.txt  # install codebase dependencies\n+#      # cmake                            # precompile codebase\n+#\n+#  - name: Web Server\n+#    openMode: split-left\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     python3 -m http.server $WEBSERVER_PORT\n+#\n+#  - name: Web Browser\n+#    openMode: split-right\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     gp await-port $WEBSERVER_PORT\n+#     lynx `gp url`\n+\n+tasks:\n+  - init: yes | sdk install java && ./gradlew build",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "884621371",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 31185,
        "pr_file": ".gitpod.yml",
        "discussion_id": "884621371",
        "commented_code": "@@ -0,0 +1,139 @@\n+## Learn more about this file at 'https://www.gitpod.io/docs/references/gitpod-yml'\n+##\n+## This '.gitpod.yml' file when placed at the root of a project instructs\n+## Gitpod how to prepare & build the project, start development environments\n+## and configure continuous prebuilds. Prebuilds when enabled builds a project\n+## like a CI server so you can start coding right away - no more waiting for\n+## dependencies to download and builds to finish when reviewing pull-requests\n+## or hacking on something new.\n+##\n+## With Gitpod you can develop software from any device (even iPads) via \n+## desktop or browser based versions of VS Code or any JetBrains IDE and\n+## customise it to your individual needs - from themes to extensions, you\n+## have full control.\n+##\n+## The easiest way to try out Gitpod is install the browser extenion:\n+## 'https://www.gitpod.io/docs/browser-extension' or by prefixing\n+## 'https://gitpod.io#' to the source control URL of any project.\n+##\n+## For example: 'https://gitpod.io#https://github.com/gitpod-io/gitpod'\n+\n+\n+## The 'image' section defines which Docker image Gitpod should use. \n+## By default, Gitpod uses a standard Docker Image called 'workspace-full'\n+## which can be found at 'https://github.com/gitpod-io/workspace-images'\n+##\n+## Workspaces started based on this default image come pre-installed with\n+## Docker, Go, Java, Node.js, C/C++, Python, Ruby, Rust, PHP as well as\n+## tools such as Homebrew, Tailscale, Nginx and several more.\n+##\n+## If this image does not include the tools needed for your project then\n+## a public Docker image or your own Docker file can be configured.\n+## \n+## Learn more about images at 'https://www.gitpod.io/docs/config-docker'\n+\n+#image: node:buster                        # use 'https://hub.docker.com/_/node'\n+#\n+#image:                                    # leave image undefined if using a Dockerfile\n+#  file: .gitpod.Dockerfile                # relative path to the Dockerfile from the\n+#                                          # root of the project\n+\n+## The 'tasks' section defines how Gitpod prepares and builds this project\n+## or how Gitpod can start development servers. With Gitpod, there are three\n+## types of tasks:\n+##\n+## - before: Use this for tasks that need to run before init and before command. \n+## - init: Use this to configure prebuilds of heavy-lifting tasks such as\n+##         downloading dependencies or compiling source code.\n+## - command: Use this to start your database or application when the workspace starts.\n+##\n+## Learn more about these tasks at 'https://www.gitpod.io/docs/config-start-tasks'\n+\n+#tasks:\n+#  - before: |\n+#      # commands to execute...\n+#\n+#  - init: |\n+#      # sudo apt-get install python3     # can be used to install operating system \n+#                                         # dependencies but these are not kept after the\n+#                                         # prebuild completes thus Gitpod recommends moving\n+#                                         # operating system dependency installation steps\n+#                                         # to a custom Dockerfile to make prebuilds faster\n+#                                         # and to keep your codebase DRY.  \n+#                                         # 'https://www.gitpod.io/docs/config-docker'\n+#\n+#      # pip install -r requirements.txt  # install codebase dependencies\n+#      # cmake                            # precompile codebase\n+#\n+#  - name: Web Server\n+#    openMode: split-left\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     python3 -m http.server $WEBSERVER_PORT\n+#\n+#  - name: Web Browser\n+#    openMode: split-right\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     gp await-port $WEBSERVER_PORT\n+#     lynx `gp url`\n+\n+tasks:\n+  - init: yes | sdk install java && ./gradlew build",
        "comment_created_at": "2022-05-30T09:28:30+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "Is it possible to tie this to the version that's configured in `.sdkmanrc`? That's particularly important for branches other than `main` where a Java 8 install is required.",
        "pr_file_module": null
      },
      {
        "comment_id": "885238106",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 31185,
        "pr_file": ".gitpod.yml",
        "discussion_id": "884621371",
        "commented_code": "@@ -0,0 +1,139 @@\n+## Learn more about this file at 'https://www.gitpod.io/docs/references/gitpod-yml'\n+##\n+## This '.gitpod.yml' file when placed at the root of a project instructs\n+## Gitpod how to prepare & build the project, start development environments\n+## and configure continuous prebuilds. Prebuilds when enabled builds a project\n+## like a CI server so you can start coding right away - no more waiting for\n+## dependencies to download and builds to finish when reviewing pull-requests\n+## or hacking on something new.\n+##\n+## With Gitpod you can develop software from any device (even iPads) via \n+## desktop or browser based versions of VS Code or any JetBrains IDE and\n+## customise it to your individual needs - from themes to extensions, you\n+## have full control.\n+##\n+## The easiest way to try out Gitpod is install the browser extenion:\n+## 'https://www.gitpod.io/docs/browser-extension' or by prefixing\n+## 'https://gitpod.io#' to the source control URL of any project.\n+##\n+## For example: 'https://gitpod.io#https://github.com/gitpod-io/gitpod'\n+\n+\n+## The 'image' section defines which Docker image Gitpod should use. \n+## By default, Gitpod uses a standard Docker Image called 'workspace-full'\n+## which can be found at 'https://github.com/gitpod-io/workspace-images'\n+##\n+## Workspaces started based on this default image come pre-installed with\n+## Docker, Go, Java, Node.js, C/C++, Python, Ruby, Rust, PHP as well as\n+## tools such as Homebrew, Tailscale, Nginx and several more.\n+##\n+## If this image does not include the tools needed for your project then\n+## a public Docker image or your own Docker file can be configured.\n+## \n+## Learn more about images at 'https://www.gitpod.io/docs/config-docker'\n+\n+#image: node:buster                        # use 'https://hub.docker.com/_/node'\n+#\n+#image:                                    # leave image undefined if using a Dockerfile\n+#  file: .gitpod.Dockerfile                # relative path to the Dockerfile from the\n+#                                          # root of the project\n+\n+## The 'tasks' section defines how Gitpod prepares and builds this project\n+## or how Gitpod can start development servers. With Gitpod, there are three\n+## types of tasks:\n+##\n+## - before: Use this for tasks that need to run before init and before command. \n+## - init: Use this to configure prebuilds of heavy-lifting tasks such as\n+##         downloading dependencies or compiling source code.\n+## - command: Use this to start your database or application when the workspace starts.\n+##\n+## Learn more about these tasks at 'https://www.gitpod.io/docs/config-start-tasks'\n+\n+#tasks:\n+#  - before: |\n+#      # commands to execute...\n+#\n+#  - init: |\n+#      # sudo apt-get install python3     # can be used to install operating system \n+#                                         # dependencies but these are not kept after the\n+#                                         # prebuild completes thus Gitpod recommends moving\n+#                                         # operating system dependency installation steps\n+#                                         # to a custom Dockerfile to make prebuilds faster\n+#                                         # and to keep your codebase DRY.  \n+#                                         # 'https://www.gitpod.io/docs/config-docker'\n+#\n+#      # pip install -r requirements.txt  # install codebase dependencies\n+#      # cmake                            # precompile codebase\n+#\n+#  - name: Web Server\n+#    openMode: split-left\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     python3 -m http.server $WEBSERVER_PORT\n+#\n+#  - name: Web Browser\n+#    openMode: split-right\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     gp await-port $WEBSERVER_PORT\n+#     lynx `gp url`\n+\n+tasks:\n+  - init: yes | sdk install java && ./gradlew build",
        "comment_created_at": "2022-05-31T06:14:36+00:00",
        "comment_author": "Siddhant-K-code",
        "comment_body": "yeah, we can directly use the command \r\n```yml\r\nsdk env install\r\n``` \r\n\r\nto download the required Java Version.\r\n\r\nUpdated the init command. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "884625378",
    "pr_number": 31185,
    "pr_file": ".gitpod.yml",
    "created_at": "2022-05-30T09:32:41+00:00",
    "commented_code": "+## Learn more about this file at 'https://www.gitpod.io/docs/references/gitpod-yml'\n+##\n+## This '.gitpod.yml' file when placed at the root of a project instructs\n+## Gitpod how to prepare & build the project, start development environments\n+## and configure continuous prebuilds. Prebuilds when enabled builds a project\n+## like a CI server so you can start coding right away - no more waiting for\n+## dependencies to download and builds to finish when reviewing pull-requests\n+## or hacking on something new.\n+##\n+## With Gitpod you can develop software from any device (even iPads) via \n+## desktop or browser based versions of VS Code or any JetBrains IDE and\n+## customise it to your individual needs - from themes to extensions, you\n+## have full control.\n+##\n+## The easiest way to try out Gitpod is install the browser extenion:\n+## 'https://www.gitpod.io/docs/browser-extension' or by prefixing\n+## 'https://gitpod.io#' to the source control URL of any project.\n+##\n+## For example: 'https://gitpod.io#https://github.com/gitpod-io/gitpod'\n+\n+\n+## The 'image' section defines which Docker image Gitpod should use. \n+## By default, Gitpod uses a standard Docker Image called 'workspace-full'\n+## which can be found at 'https://github.com/gitpod-io/workspace-images'\n+##\n+## Workspaces started based on this default image come pre-installed with\n+## Docker, Go, Java, Node.js, C/C++, Python, Ruby, Rust, PHP as well as\n+## tools such as Homebrew, Tailscale, Nginx and several more.\n+##\n+## If this image does not include the tools needed for your project then\n+## a public Docker image or your own Docker file can be configured.\n+## \n+## Learn more about images at 'https://www.gitpod.io/docs/config-docker'\n+\n+#image: node:buster                        # use 'https://hub.docker.com/_/node'\n+#\n+#image:                                    # leave image undefined if using a Dockerfile\n+#  file: .gitpod.Dockerfile                # relative path to the Dockerfile from the\n+#                                          # root of the project\n+\n+## The 'tasks' section defines how Gitpod prepares and builds this project\n+## or how Gitpod can start development servers. With Gitpod, there are three\n+## types of tasks:\n+##\n+## - before: Use this for tasks that need to run before init and before command. \n+## - init: Use this to configure prebuilds of heavy-lifting tasks such as\n+##         downloading dependencies or compiling source code.\n+## - command: Use this to start your database or application when the workspace starts.\n+##\n+## Learn more about these tasks at 'https://www.gitpod.io/docs/config-start-tasks'\n+\n+#tasks:\n+#  - before: |\n+#      # commands to execute...\n+#\n+#  - init: |\n+#      # sudo apt-get install python3     # can be used to install operating system \n+#                                         # dependencies but these are not kept after the\n+#                                         # prebuild completes thus Gitpod recommends moving\n+#                                         # operating system dependency installation steps\n+#                                         # to a custom Dockerfile to make prebuilds faster\n+#                                         # and to keep your codebase DRY.  \n+#                                         # 'https://www.gitpod.io/docs/config-docker'\n+#\n+#      # pip install -r requirements.txt  # install codebase dependencies\n+#      # cmake                            # precompile codebase\n+#\n+#  - name: Web Server\n+#    openMode: split-left\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     python3 -m http.server $WEBSERVER_PORT\n+#\n+#  - name: Web Browser\n+#    openMode: split-right\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     gp await-port $WEBSERVER_PORT\n+#     lynx `gp url`\n+\n+tasks:\n+  - init: yes | sdk install java && ./gradlew build\n+\n+## The 'ports' section defines various ports your may listen on are \n+## configured in Gitpod on an authenticated URL. By default, all ports\n+## are in private visibility state.\n+##\n+## Learn more about ports at 'https://www.gitpod.io/docs/config-ports'\n+\n+#ports:\n+#  - port: 8080 # alternatively configure entire ranges via '8080-8090'\n+#    visibility: private # either 'public' or 'private' (default)\n+#    onOpen: open-browser # either 'open-browser', 'open-preview' or 'ignore'\n+\n+\n+## The 'vscode' section defines a list of Visual Studio Code extensions from\n+## the OpenVSX.org registry to be installed upon workspace startup. OpenVSX\n+## is an open alternative to the proprietary Visual Studio Code Marketplace\n+## and extensions can be added by sending a pull-request with the extension\n+## identifier to https://github.com/open-vsx/publish-extensions\n+##\n+## The identifier of an extension is always ${publisher}.${name}.\n+##\n+## For example: 'vscodevim.vim'\n+##\n+## Learn more at 'https://www.gitpod.io/docs/ides-and-editors/vscode'\n+\n+#vscode:\n+#  extensions: \n+#    - vscodevim.vim\n+#    - esbenp.prettier-vscode@9.5.0\n+#    - https://example.com/abc/releases/extension-0.26.0.vsix\n+\n+\n+## The 'github' section defines configuration of continuous prebuilds\n+## for GitHub repositories when the GitHub application\n+## 'https://github.com/apps/gitpod-io' is installed in GitHub and granted\n+## permissions to access the repository.\n+##\n+## Learn more at 'https://www.gitpod.io/docs/prebuilds'\n+\n+github: \n+  prebuilds:\n+    # enable for the default branch\n+    master: true\n+    # enable for all branches in this repo\n+    branches: true\n+    # enable for pull requests coming from this repo\n+    pullRequests: true\n+    # enable for pull requests coming from forks\n+    pullRequestsFromForks: true\n+    # add a check to pull requests\n+    addCheck: true\n+    # add a \"Review in Gitpod\" button as a comment to pull requests\n+    addComment: false\n+    # add a \"Review in Gitpod\" button to the pull request's description\n+    addBadge: true",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "884625378",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 31185,
        "pr_file": ".gitpod.yml",
        "discussion_id": "884625378",
        "commented_code": "@@ -0,0 +1,139 @@\n+## Learn more about this file at 'https://www.gitpod.io/docs/references/gitpod-yml'\n+##\n+## This '.gitpod.yml' file when placed at the root of a project instructs\n+## Gitpod how to prepare & build the project, start development environments\n+## and configure continuous prebuilds. Prebuilds when enabled builds a project\n+## like a CI server so you can start coding right away - no more waiting for\n+## dependencies to download and builds to finish when reviewing pull-requests\n+## or hacking on something new.\n+##\n+## With Gitpod you can develop software from any device (even iPads) via \n+## desktop or browser based versions of VS Code or any JetBrains IDE and\n+## customise it to your individual needs - from themes to extensions, you\n+## have full control.\n+##\n+## The easiest way to try out Gitpod is install the browser extenion:\n+## 'https://www.gitpod.io/docs/browser-extension' or by prefixing\n+## 'https://gitpod.io#' to the source control URL of any project.\n+##\n+## For example: 'https://gitpod.io#https://github.com/gitpod-io/gitpod'\n+\n+\n+## The 'image' section defines which Docker image Gitpod should use. \n+## By default, Gitpod uses a standard Docker Image called 'workspace-full'\n+## which can be found at 'https://github.com/gitpod-io/workspace-images'\n+##\n+## Workspaces started based on this default image come pre-installed with\n+## Docker, Go, Java, Node.js, C/C++, Python, Ruby, Rust, PHP as well as\n+## tools such as Homebrew, Tailscale, Nginx and several more.\n+##\n+## If this image does not include the tools needed for your project then\n+## a public Docker image or your own Docker file can be configured.\n+## \n+## Learn more about images at 'https://www.gitpod.io/docs/config-docker'\n+\n+#image: node:buster                        # use 'https://hub.docker.com/_/node'\n+#\n+#image:                                    # leave image undefined if using a Dockerfile\n+#  file: .gitpod.Dockerfile                # relative path to the Dockerfile from the\n+#                                          # root of the project\n+\n+## The 'tasks' section defines how Gitpod prepares and builds this project\n+## or how Gitpod can start development servers. With Gitpod, there are three\n+## types of tasks:\n+##\n+## - before: Use this for tasks that need to run before init and before command. \n+## - init: Use this to configure prebuilds of heavy-lifting tasks such as\n+##         downloading dependencies or compiling source code.\n+## - command: Use this to start your database or application when the workspace starts.\n+##\n+## Learn more about these tasks at 'https://www.gitpod.io/docs/config-start-tasks'\n+\n+#tasks:\n+#  - before: |\n+#      # commands to execute...\n+#\n+#  - init: |\n+#      # sudo apt-get install python3     # can be used to install operating system \n+#                                         # dependencies but these are not kept after the\n+#                                         # prebuild completes thus Gitpod recommends moving\n+#                                         # operating system dependency installation steps\n+#                                         # to a custom Dockerfile to make prebuilds faster\n+#                                         # and to keep your codebase DRY.  \n+#                                         # 'https://www.gitpod.io/docs/config-docker'\n+#\n+#      # pip install -r requirements.txt  # install codebase dependencies\n+#      # cmake                            # precompile codebase\n+#\n+#  - name: Web Server\n+#    openMode: split-left\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     python3 -m http.server $WEBSERVER_PORT\n+#\n+#  - name: Web Browser\n+#    openMode: split-right\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     gp await-port $WEBSERVER_PORT\n+#     lynx `gp url`\n+\n+tasks:\n+  - init: yes | sdk install java && ./gradlew build\n+\n+## The 'ports' section defines various ports your may listen on are \n+## configured in Gitpod on an authenticated URL. By default, all ports\n+## are in private visibility state.\n+##\n+## Learn more about ports at 'https://www.gitpod.io/docs/config-ports'\n+\n+#ports:\n+#  - port: 8080 # alternatively configure entire ranges via '8080-8090'\n+#    visibility: private # either 'public' or 'private' (default)\n+#    onOpen: open-browser # either 'open-browser', 'open-preview' or 'ignore'\n+\n+\n+## The 'vscode' section defines a list of Visual Studio Code extensions from\n+## the OpenVSX.org registry to be installed upon workspace startup. OpenVSX\n+## is an open alternative to the proprietary Visual Studio Code Marketplace\n+## and extensions can be added by sending a pull-request with the extension\n+## identifier to https://github.com/open-vsx/publish-extensions\n+##\n+## The identifier of an extension is always ${publisher}.${name}.\n+##\n+## For example: 'vscodevim.vim'\n+##\n+## Learn more at 'https://www.gitpod.io/docs/ides-and-editors/vscode'\n+\n+#vscode:\n+#  extensions: \n+#    - vscodevim.vim\n+#    - esbenp.prettier-vscode@9.5.0\n+#    - https://example.com/abc/releases/extension-0.26.0.vsix\n+\n+\n+## The 'github' section defines configuration of continuous prebuilds\n+## for GitHub repositories when the GitHub application\n+## 'https://github.com/apps/gitpod-io' is installed in GitHub and granted\n+## permissions to access the repository.\n+##\n+## Learn more at 'https://www.gitpod.io/docs/prebuilds'\n+\n+github: \n+  prebuilds:\n+    # enable for the default branch\n+    master: true\n+    # enable for all branches in this repo\n+    branches: true\n+    # enable for pull requests coming from this repo\n+    pullRequests: true\n+    # enable for pull requests coming from forks\n+    pullRequestsFromForks: true\n+    # add a check to pull requests\n+    addCheck: true\n+    # add a \"Review in Gitpod\" button as a comment to pull requests\n+    addComment: false\n+    # add a \"Review in Gitpod\" button to the pull request's description\n+    addBadge: true",
        "comment_created_at": "2022-05-30T09:32:41+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "To avoid the risk of editing conflicts, I think we might prefer to have this disabled too.",
        "pr_file_module": null
      },
      {
        "comment_id": "885208959",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 31185,
        "pr_file": ".gitpod.yml",
        "discussion_id": "884625378",
        "commented_code": "@@ -0,0 +1,139 @@\n+## Learn more about this file at 'https://www.gitpod.io/docs/references/gitpod-yml'\n+##\n+## This '.gitpod.yml' file when placed at the root of a project instructs\n+## Gitpod how to prepare & build the project, start development environments\n+## and configure continuous prebuilds. Prebuilds when enabled builds a project\n+## like a CI server so you can start coding right away - no more waiting for\n+## dependencies to download and builds to finish when reviewing pull-requests\n+## or hacking on something new.\n+##\n+## With Gitpod you can develop software from any device (even iPads) via \n+## desktop or browser based versions of VS Code or any JetBrains IDE and\n+## customise it to your individual needs - from themes to extensions, you\n+## have full control.\n+##\n+## The easiest way to try out Gitpod is install the browser extenion:\n+## 'https://www.gitpod.io/docs/browser-extension' or by prefixing\n+## 'https://gitpod.io#' to the source control URL of any project.\n+##\n+## For example: 'https://gitpod.io#https://github.com/gitpod-io/gitpod'\n+\n+\n+## The 'image' section defines which Docker image Gitpod should use. \n+## By default, Gitpod uses a standard Docker Image called 'workspace-full'\n+## which can be found at 'https://github.com/gitpod-io/workspace-images'\n+##\n+## Workspaces started based on this default image come pre-installed with\n+## Docker, Go, Java, Node.js, C/C++, Python, Ruby, Rust, PHP as well as\n+## tools such as Homebrew, Tailscale, Nginx and several more.\n+##\n+## If this image does not include the tools needed for your project then\n+## a public Docker image or your own Docker file can be configured.\n+## \n+## Learn more about images at 'https://www.gitpod.io/docs/config-docker'\n+\n+#image: node:buster                        # use 'https://hub.docker.com/_/node'\n+#\n+#image:                                    # leave image undefined if using a Dockerfile\n+#  file: .gitpod.Dockerfile                # relative path to the Dockerfile from the\n+#                                          # root of the project\n+\n+## The 'tasks' section defines how Gitpod prepares and builds this project\n+## or how Gitpod can start development servers. With Gitpod, there are three\n+## types of tasks:\n+##\n+## - before: Use this for tasks that need to run before init and before command. \n+## - init: Use this to configure prebuilds of heavy-lifting tasks such as\n+##         downloading dependencies or compiling source code.\n+## - command: Use this to start your database or application when the workspace starts.\n+##\n+## Learn more about these tasks at 'https://www.gitpod.io/docs/config-start-tasks'\n+\n+#tasks:\n+#  - before: |\n+#      # commands to execute...\n+#\n+#  - init: |\n+#      # sudo apt-get install python3     # can be used to install operating system \n+#                                         # dependencies but these are not kept after the\n+#                                         # prebuild completes thus Gitpod recommends moving\n+#                                         # operating system dependency installation steps\n+#                                         # to a custom Dockerfile to make prebuilds faster\n+#                                         # and to keep your codebase DRY.  \n+#                                         # 'https://www.gitpod.io/docs/config-docker'\n+#\n+#      # pip install -r requirements.txt  # install codebase dependencies\n+#      # cmake                            # precompile codebase\n+#\n+#  - name: Web Server\n+#    openMode: split-left\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     python3 -m http.server $WEBSERVER_PORT\n+#\n+#  - name: Web Browser\n+#    openMode: split-right\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     gp await-port $WEBSERVER_PORT\n+#     lynx `gp url`\n+\n+tasks:\n+  - init: yes | sdk install java && ./gradlew build\n+\n+## The 'ports' section defines various ports your may listen on are \n+## configured in Gitpod on an authenticated URL. By default, all ports\n+## are in private visibility state.\n+##\n+## Learn more about ports at 'https://www.gitpod.io/docs/config-ports'\n+\n+#ports:\n+#  - port: 8080 # alternatively configure entire ranges via '8080-8090'\n+#    visibility: private # either 'public' or 'private' (default)\n+#    onOpen: open-browser # either 'open-browser', 'open-preview' or 'ignore'\n+\n+\n+## The 'vscode' section defines a list of Visual Studio Code extensions from\n+## the OpenVSX.org registry to be installed upon workspace startup. OpenVSX\n+## is an open alternative to the proprietary Visual Studio Code Marketplace\n+## and extensions can be added by sending a pull-request with the extension\n+## identifier to https://github.com/open-vsx/publish-extensions\n+##\n+## The identifier of an extension is always ${publisher}.${name}.\n+##\n+## For example: 'vscodevim.vim'\n+##\n+## Learn more at 'https://www.gitpod.io/docs/ides-and-editors/vscode'\n+\n+#vscode:\n+#  extensions: \n+#    - vscodevim.vim\n+#    - esbenp.prettier-vscode@9.5.0\n+#    - https://example.com/abc/releases/extension-0.26.0.vsix\n+\n+\n+## The 'github' section defines configuration of continuous prebuilds\n+## for GitHub repositories when the GitHub application\n+## 'https://github.com/apps/gitpod-io' is installed in GitHub and granted\n+## permissions to access the repository.\n+##\n+## Learn more at 'https://www.gitpod.io/docs/prebuilds'\n+\n+github: \n+  prebuilds:\n+    # enable for the default branch\n+    master: true\n+    # enable for all branches in this repo\n+    branches: true\n+    # enable for pull requests coming from this repo\n+    pullRequests: true\n+    # enable for pull requests coming from forks\n+    pullRequestsFromForks: true\n+    # add a check to pull requests\n+    addCheck: true\n+    # add a \"Review in Gitpod\" button as a comment to pull requests\n+    addComment: false\n+    # add a \"Review in Gitpod\" button to the pull request's description\n+    addBadge: true",
        "comment_created_at": "2022-05-31T05:12:52+00:00",
        "comment_author": "Siddhant-K-code",
        "comment_body": "It won't create any editing conflict. It would just add a button on PR, so that PR reviewer can easily open that PR in gitpod & test it out. \r\n\r\n> Related Docs.: [`prebuilds.addBadge`](https://www.gitpod.io/docs/references/gitpod-yml#prebuildsaddbadge)",
        "pr_file_module": null
      },
      {
        "comment_id": "885293310",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 31185,
        "pr_file": ".gitpod.yml",
        "discussion_id": "884625378",
        "commented_code": "@@ -0,0 +1,139 @@\n+## Learn more about this file at 'https://www.gitpod.io/docs/references/gitpod-yml'\n+##\n+## This '.gitpod.yml' file when placed at the root of a project instructs\n+## Gitpod how to prepare & build the project, start development environments\n+## and configure continuous prebuilds. Prebuilds when enabled builds a project\n+## like a CI server so you can start coding right away - no more waiting for\n+## dependencies to download and builds to finish when reviewing pull-requests\n+## or hacking on something new.\n+##\n+## With Gitpod you can develop software from any device (even iPads) via \n+## desktop or browser based versions of VS Code or any JetBrains IDE and\n+## customise it to your individual needs - from themes to extensions, you\n+## have full control.\n+##\n+## The easiest way to try out Gitpod is install the browser extenion:\n+## 'https://www.gitpod.io/docs/browser-extension' or by prefixing\n+## 'https://gitpod.io#' to the source control URL of any project.\n+##\n+## For example: 'https://gitpod.io#https://github.com/gitpod-io/gitpod'\n+\n+\n+## The 'image' section defines which Docker image Gitpod should use. \n+## By default, Gitpod uses a standard Docker Image called 'workspace-full'\n+## which can be found at 'https://github.com/gitpod-io/workspace-images'\n+##\n+## Workspaces started based on this default image come pre-installed with\n+## Docker, Go, Java, Node.js, C/C++, Python, Ruby, Rust, PHP as well as\n+## tools such as Homebrew, Tailscale, Nginx and several more.\n+##\n+## If this image does not include the tools needed for your project then\n+## a public Docker image or your own Docker file can be configured.\n+## \n+## Learn more about images at 'https://www.gitpod.io/docs/config-docker'\n+\n+#image: node:buster                        # use 'https://hub.docker.com/_/node'\n+#\n+#image:                                    # leave image undefined if using a Dockerfile\n+#  file: .gitpod.Dockerfile                # relative path to the Dockerfile from the\n+#                                          # root of the project\n+\n+## The 'tasks' section defines how Gitpod prepares and builds this project\n+## or how Gitpod can start development servers. With Gitpod, there are three\n+## types of tasks:\n+##\n+## - before: Use this for tasks that need to run before init and before command. \n+## - init: Use this to configure prebuilds of heavy-lifting tasks such as\n+##         downloading dependencies or compiling source code.\n+## - command: Use this to start your database or application when the workspace starts.\n+##\n+## Learn more about these tasks at 'https://www.gitpod.io/docs/config-start-tasks'\n+\n+#tasks:\n+#  - before: |\n+#      # commands to execute...\n+#\n+#  - init: |\n+#      # sudo apt-get install python3     # can be used to install operating system \n+#                                         # dependencies but these are not kept after the\n+#                                         # prebuild completes thus Gitpod recommends moving\n+#                                         # operating system dependency installation steps\n+#                                         # to a custom Dockerfile to make prebuilds faster\n+#                                         # and to keep your codebase DRY.  \n+#                                         # 'https://www.gitpod.io/docs/config-docker'\n+#\n+#      # pip install -r requirements.txt  # install codebase dependencies\n+#      # cmake                            # precompile codebase\n+#\n+#  - name: Web Server\n+#    openMode: split-left\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     python3 -m http.server $WEBSERVER_PORT\n+#\n+#  - name: Web Browser\n+#    openMode: split-right\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     gp await-port $WEBSERVER_PORT\n+#     lynx `gp url`\n+\n+tasks:\n+  - init: yes | sdk install java && ./gradlew build\n+\n+## The 'ports' section defines various ports your may listen on are \n+## configured in Gitpod on an authenticated URL. By default, all ports\n+## are in private visibility state.\n+##\n+## Learn more about ports at 'https://www.gitpod.io/docs/config-ports'\n+\n+#ports:\n+#  - port: 8080 # alternatively configure entire ranges via '8080-8090'\n+#    visibility: private # either 'public' or 'private' (default)\n+#    onOpen: open-browser # either 'open-browser', 'open-preview' or 'ignore'\n+\n+\n+## The 'vscode' section defines a list of Visual Studio Code extensions from\n+## the OpenVSX.org registry to be installed upon workspace startup. OpenVSX\n+## is an open alternative to the proprietary Visual Studio Code Marketplace\n+## and extensions can be added by sending a pull-request with the extension\n+## identifier to https://github.com/open-vsx/publish-extensions\n+##\n+## The identifier of an extension is always ${publisher}.${name}.\n+##\n+## For example: 'vscodevim.vim'\n+##\n+## Learn more at 'https://www.gitpod.io/docs/ides-and-editors/vscode'\n+\n+#vscode:\n+#  extensions: \n+#    - vscodevim.vim\n+#    - esbenp.prettier-vscode@9.5.0\n+#    - https://example.com/abc/releases/extension-0.26.0.vsix\n+\n+\n+## The 'github' section defines configuration of continuous prebuilds\n+## for GitHub repositories when the GitHub application\n+## 'https://github.com/apps/gitpod-io' is installed in GitHub and granted\n+## permissions to access the repository.\n+##\n+## Learn more at 'https://www.gitpod.io/docs/prebuilds'\n+\n+github: \n+  prebuilds:\n+    # enable for the default branch\n+    master: true\n+    # enable for all branches in this repo\n+    branches: true\n+    # enable for pull requests coming from this repo\n+    pullRequests: true\n+    # enable for pull requests coming from forks\n+    pullRequestsFromForks: true\n+    # add a check to pull requests\n+    addCheck: true\n+    # add a \"Review in Gitpod\" button as a comment to pull requests\n+    addComment: false\n+    # add a \"Review in Gitpod\" button to the pull request's description\n+    addBadge: true",
        "comment_created_at": "2022-05-31T07:28:43+00:00",
        "comment_author": "wilkinsona",
        "comment_body": "Those docs, which is where I learned of the potential for a conflict, say that adding the badge \"can also create a concurrent editing conflict when the bot and a user try to edit the description of a pull request at the same time\".",
        "pr_file_module": null
      },
      {
        "comment_id": "885443048",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 31185,
        "pr_file": ".gitpod.yml",
        "discussion_id": "884625378",
        "commented_code": "@@ -0,0 +1,139 @@\n+## Learn more about this file at 'https://www.gitpod.io/docs/references/gitpod-yml'\n+##\n+## This '.gitpod.yml' file when placed at the root of a project instructs\n+## Gitpod how to prepare & build the project, start development environments\n+## and configure continuous prebuilds. Prebuilds when enabled builds a project\n+## like a CI server so you can start coding right away - no more waiting for\n+## dependencies to download and builds to finish when reviewing pull-requests\n+## or hacking on something new.\n+##\n+## With Gitpod you can develop software from any device (even iPads) via \n+## desktop or browser based versions of VS Code or any JetBrains IDE and\n+## customise it to your individual needs - from themes to extensions, you\n+## have full control.\n+##\n+## The easiest way to try out Gitpod is install the browser extenion:\n+## 'https://www.gitpod.io/docs/browser-extension' or by prefixing\n+## 'https://gitpod.io#' to the source control URL of any project.\n+##\n+## For example: 'https://gitpod.io#https://github.com/gitpod-io/gitpod'\n+\n+\n+## The 'image' section defines which Docker image Gitpod should use. \n+## By default, Gitpod uses a standard Docker Image called 'workspace-full'\n+## which can be found at 'https://github.com/gitpod-io/workspace-images'\n+##\n+## Workspaces started based on this default image come pre-installed with\n+## Docker, Go, Java, Node.js, C/C++, Python, Ruby, Rust, PHP as well as\n+## tools such as Homebrew, Tailscale, Nginx and several more.\n+##\n+## If this image does not include the tools needed for your project then\n+## a public Docker image or your own Docker file can be configured.\n+## \n+## Learn more about images at 'https://www.gitpod.io/docs/config-docker'\n+\n+#image: node:buster                        # use 'https://hub.docker.com/_/node'\n+#\n+#image:                                    # leave image undefined if using a Dockerfile\n+#  file: .gitpod.Dockerfile                # relative path to the Dockerfile from the\n+#                                          # root of the project\n+\n+## The 'tasks' section defines how Gitpod prepares and builds this project\n+## or how Gitpod can start development servers. With Gitpod, there are three\n+## types of tasks:\n+##\n+## - before: Use this for tasks that need to run before init and before command. \n+## - init: Use this to configure prebuilds of heavy-lifting tasks such as\n+##         downloading dependencies or compiling source code.\n+## - command: Use this to start your database or application when the workspace starts.\n+##\n+## Learn more about these tasks at 'https://www.gitpod.io/docs/config-start-tasks'\n+\n+#tasks:\n+#  - before: |\n+#      # commands to execute...\n+#\n+#  - init: |\n+#      # sudo apt-get install python3     # can be used to install operating system \n+#                                         # dependencies but these are not kept after the\n+#                                         # prebuild completes thus Gitpod recommends moving\n+#                                         # operating system dependency installation steps\n+#                                         # to a custom Dockerfile to make prebuilds faster\n+#                                         # and to keep your codebase DRY.  \n+#                                         # 'https://www.gitpod.io/docs/config-docker'\n+#\n+#      # pip install -r requirements.txt  # install codebase dependencies\n+#      # cmake                            # precompile codebase\n+#\n+#  - name: Web Server\n+#    openMode: split-left\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     python3 -m http.server $WEBSERVER_PORT\n+#\n+#  - name: Web Browser\n+#    openMode: split-right\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     gp await-port $WEBSERVER_PORT\n+#     lynx `gp url`\n+\n+tasks:\n+  - init: yes | sdk install java && ./gradlew build\n+\n+## The 'ports' section defines various ports your may listen on are \n+## configured in Gitpod on an authenticated URL. By default, all ports\n+## are in private visibility state.\n+##\n+## Learn more about ports at 'https://www.gitpod.io/docs/config-ports'\n+\n+#ports:\n+#  - port: 8080 # alternatively configure entire ranges via '8080-8090'\n+#    visibility: private # either 'public' or 'private' (default)\n+#    onOpen: open-browser # either 'open-browser', 'open-preview' or 'ignore'\n+\n+\n+## The 'vscode' section defines a list of Visual Studio Code extensions from\n+## the OpenVSX.org registry to be installed upon workspace startup. OpenVSX\n+## is an open alternative to the proprietary Visual Studio Code Marketplace\n+## and extensions can be added by sending a pull-request with the extension\n+## identifier to https://github.com/open-vsx/publish-extensions\n+##\n+## The identifier of an extension is always ${publisher}.${name}.\n+##\n+## For example: 'vscodevim.vim'\n+##\n+## Learn more at 'https://www.gitpod.io/docs/ides-and-editors/vscode'\n+\n+#vscode:\n+#  extensions: \n+#    - vscodevim.vim\n+#    - esbenp.prettier-vscode@9.5.0\n+#    - https://example.com/abc/releases/extension-0.26.0.vsix\n+\n+\n+## The 'github' section defines configuration of continuous prebuilds\n+## for GitHub repositories when the GitHub application\n+## 'https://github.com/apps/gitpod-io' is installed in GitHub and granted\n+## permissions to access the repository.\n+##\n+## Learn more at 'https://www.gitpod.io/docs/prebuilds'\n+\n+github: \n+  prebuilds:\n+    # enable for the default branch\n+    master: true\n+    # enable for all branches in this repo\n+    branches: true\n+    # enable for pull requests coming from this repo\n+    pullRequests: true\n+    # enable for pull requests coming from forks\n+    pullRequestsFromForks: true\n+    # add a check to pull requests\n+    addCheck: true\n+    # add a \"Review in Gitpod\" button as a comment to pull requests\n+    addComment: false\n+    # add a \"Review in Gitpod\" button to the pull request's description\n+    addBadge: true",
        "comment_created_at": "2022-05-31T09:56:37+00:00",
        "comment_author": "Siddhant-K-code",
        "comment_body": "yeah, make sense. Will change it to false. ",
        "pr_file_module": null
      },
      {
        "comment_id": "885459875",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 31185,
        "pr_file": ".gitpod.yml",
        "discussion_id": "884625378",
        "commented_code": "@@ -0,0 +1,139 @@\n+## Learn more about this file at 'https://www.gitpod.io/docs/references/gitpod-yml'\n+##\n+## This '.gitpod.yml' file when placed at the root of a project instructs\n+## Gitpod how to prepare & build the project, start development environments\n+## and configure continuous prebuilds. Prebuilds when enabled builds a project\n+## like a CI server so you can start coding right away - no more waiting for\n+## dependencies to download and builds to finish when reviewing pull-requests\n+## or hacking on something new.\n+##\n+## With Gitpod you can develop software from any device (even iPads) via \n+## desktop or browser based versions of VS Code or any JetBrains IDE and\n+## customise it to your individual needs - from themes to extensions, you\n+## have full control.\n+##\n+## The easiest way to try out Gitpod is install the browser extenion:\n+## 'https://www.gitpod.io/docs/browser-extension' or by prefixing\n+## 'https://gitpod.io#' to the source control URL of any project.\n+##\n+## For example: 'https://gitpod.io#https://github.com/gitpod-io/gitpod'\n+\n+\n+## The 'image' section defines which Docker image Gitpod should use. \n+## By default, Gitpod uses a standard Docker Image called 'workspace-full'\n+## which can be found at 'https://github.com/gitpod-io/workspace-images'\n+##\n+## Workspaces started based on this default image come pre-installed with\n+## Docker, Go, Java, Node.js, C/C++, Python, Ruby, Rust, PHP as well as\n+## tools such as Homebrew, Tailscale, Nginx and several more.\n+##\n+## If this image does not include the tools needed for your project then\n+## a public Docker image or your own Docker file can be configured.\n+## \n+## Learn more about images at 'https://www.gitpod.io/docs/config-docker'\n+\n+#image: node:buster                        # use 'https://hub.docker.com/_/node'\n+#\n+#image:                                    # leave image undefined if using a Dockerfile\n+#  file: .gitpod.Dockerfile                # relative path to the Dockerfile from the\n+#                                          # root of the project\n+\n+## The 'tasks' section defines how Gitpod prepares and builds this project\n+## or how Gitpod can start development servers. With Gitpod, there are three\n+## types of tasks:\n+##\n+## - before: Use this for tasks that need to run before init and before command. \n+## - init: Use this to configure prebuilds of heavy-lifting tasks such as\n+##         downloading dependencies or compiling source code.\n+## - command: Use this to start your database or application when the workspace starts.\n+##\n+## Learn more about these tasks at 'https://www.gitpod.io/docs/config-start-tasks'\n+\n+#tasks:\n+#  - before: |\n+#      # commands to execute...\n+#\n+#  - init: |\n+#      # sudo apt-get install python3     # can be used to install operating system \n+#                                         # dependencies but these are not kept after the\n+#                                         # prebuild completes thus Gitpod recommends moving\n+#                                         # operating system dependency installation steps\n+#                                         # to a custom Dockerfile to make prebuilds faster\n+#                                         # and to keep your codebase DRY.  \n+#                                         # 'https://www.gitpod.io/docs/config-docker'\n+#\n+#      # pip install -r requirements.txt  # install codebase dependencies\n+#      # cmake                            # precompile codebase\n+#\n+#  - name: Web Server\n+#    openMode: split-left\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     python3 -m http.server $WEBSERVER_PORT\n+#\n+#  - name: Web Browser\n+#    openMode: split-right\n+#    env:\n+#      WEBSERVER_PORT: 8080\n+#    command: |\n+#     gp await-port $WEBSERVER_PORT\n+#     lynx `gp url`\n+\n+tasks:\n+  - init: yes | sdk install java && ./gradlew build\n+\n+## The 'ports' section defines various ports your may listen on are \n+## configured in Gitpod on an authenticated URL. By default, all ports\n+## are in private visibility state.\n+##\n+## Learn more about ports at 'https://www.gitpod.io/docs/config-ports'\n+\n+#ports:\n+#  - port: 8080 # alternatively configure entire ranges via '8080-8090'\n+#    visibility: private # either 'public' or 'private' (default)\n+#    onOpen: open-browser # either 'open-browser', 'open-preview' or 'ignore'\n+\n+\n+## The 'vscode' section defines a list of Visual Studio Code extensions from\n+## the OpenVSX.org registry to be installed upon workspace startup. OpenVSX\n+## is an open alternative to the proprietary Visual Studio Code Marketplace\n+## and extensions can be added by sending a pull-request with the extension\n+## identifier to https://github.com/open-vsx/publish-extensions\n+##\n+## The identifier of an extension is always ${publisher}.${name}.\n+##\n+## For example: 'vscodevim.vim'\n+##\n+## Learn more at 'https://www.gitpod.io/docs/ides-and-editors/vscode'\n+\n+#vscode:\n+#  extensions: \n+#    - vscodevim.vim\n+#    - esbenp.prettier-vscode@9.5.0\n+#    - https://example.com/abc/releases/extension-0.26.0.vsix\n+\n+\n+## The 'github' section defines configuration of continuous prebuilds\n+## for GitHub repositories when the GitHub application\n+## 'https://github.com/apps/gitpod-io' is installed in GitHub and granted\n+## permissions to access the repository.\n+##\n+## Learn more at 'https://www.gitpod.io/docs/prebuilds'\n+\n+github: \n+  prebuilds:\n+    # enable for the default branch\n+    master: true\n+    # enable for all branches in this repo\n+    branches: true\n+    # enable for pull requests coming from this repo\n+    pullRequests: true\n+    # enable for pull requests coming from forks\n+    pullRequestsFromForks: true\n+    # add a check to pull requests\n+    addCheck: true\n+    # add a \"Review in Gitpod\" button as a comment to pull requests\n+    addComment: false\n+    # add a \"Review in Gitpod\" button to the pull request's description\n+    addBadge: true",
        "comment_created_at": "2022-05-31T10:15:04+00:00",
        "comment_author": "Siddhant-K-code",
        "comment_body": "Resolved in [`8785659`](https://github.com/spring-projects/spring-boot/commit/8785659a8909f8f1d252494542adaafbeeb85330)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1774298601",
    "pr_number": 42395,
    "pr_file": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/resources/org/springframework/boot/docker/compose/service/connection/db2/db2-compose.yaml",
    "created_at": "2024-09-25T01:54:37+00:00",
    "commented_code": "+services:\n+  database:\n+    image: '{imageName}'\n+    ports:\n+      - '50000:50000'\n+    privileged: true\n+    environment:\n+      - 'LICENSE=accept'\n+      - 'DB2INSTANCE=db2inst1'\n+      - 'DB2INST1_PASSWORD=secret'\n+      - 'DBNAME=testdb'\n+      - 'AUTOCONFIG=false'\n+      - 'ARCHIVE_LOGS=false'\n+    healthcheck:\n+      test: [ 'CMD', 'sleep', '115' ]",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1774298601",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 42395,
        "pr_file": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/resources/org/springframework/boot/docker/compose/service/connection/db2/db2-compose.yaml",
        "discussion_id": "1774298601",
        "commented_code": "@@ -0,0 +1,20 @@\n+services:\n+  database:\n+    image: '{imageName}'\n+    ports:\n+      - '50000:50000'\n+    privileged: true\n+    environment:\n+      - 'LICENSE=accept'\n+      - 'DB2INSTANCE=db2inst1'\n+      - 'DB2INST1_PASSWORD=secret'\n+      - 'DBNAME=testdb'\n+      - 'AUTOCONFIG=false'\n+      - 'ARCHIVE_LOGS=false'\n+    healthcheck:\n+      test: [ 'CMD', 'sleep', '115' ]",
        "comment_created_at": "2024-09-25T01:54:37+00:00",
        "comment_author": "quaff",
        "comment_body": "Didn't find better way for waiting DB2 fully up.",
        "pr_file_module": null
      },
      {
        "comment_id": "1774311654",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 42395,
        "pr_file": "spring-boot-project/spring-boot-docker-compose/src/dockerTest/resources/org/springframework/boot/docker/compose/service/connection/db2/db2-compose.yaml",
        "discussion_id": "1774298601",
        "commented_code": "@@ -0,0 +1,20 @@\n+services:\n+  database:\n+    image: '{imageName}'\n+    ports:\n+      - '50000:50000'\n+    privileged: true\n+    environment:\n+      - 'LICENSE=accept'\n+      - 'DB2INSTANCE=db2inst1'\n+      - 'DB2INST1_PASSWORD=secret'\n+      - 'DBNAME=testdb'\n+      - 'AUTOCONFIG=false'\n+      - 'ARCHIVE_LOGS=false'\n+    healthcheck:\n+      test: [ 'CMD', 'sleep', '115' ]",
        "comment_created_at": "2024-09-25T02:15:32+00:00",
        "comment_author": "quaff",
        "comment_body": "Testcontainers `Db2Container` use `LogMessageWaitStrategy() .withRegEx(\".*Setup has completed\\\\..*\")` , is there an equivalent way with compose file?",
        "pr_file_module": null
      }
    ]
  }
]