[
  {
    "discussion_id": "1983711925",
    "pr_number": 44627,
    "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/JsonValueWriter.java",
    "created_at": "2025-03-06T16:43:01+00:00",
    "commented_code": "*/\n class JsonValueWriter {\n \n+\tprivate static final int DEFAULT_MAX_NESTING_DEPTH = 1000;",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "1983711925",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44627,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/JsonValueWriter.java",
        "discussion_id": "1983711925",
        "commented_code": "@@ -46,8 +46,12 @@\n  */\n class JsonValueWriter {\n \n+\tprivate static final int DEFAULT_MAX_NESTING_DEPTH = 1000;",
        "comment_created_at": "2025-03-06T16:43:01+00:00",
        "comment_author": "nosan",
        "comment_body": "I'm wondering if such a deep nesting level is necessary, as `JsonWriter` is primarily used for **StructuredLogging**, and such depth seems practically impossible.",
        "pr_file_module": null
      },
      {
        "comment_id": "1986429379",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44627,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/JsonValueWriter.java",
        "discussion_id": "1983711925",
        "commented_code": "@@ -46,8 +46,12 @@\n  */\n class JsonValueWriter {\n \n+\tprivate static final int DEFAULT_MAX_NESTING_DEPTH = 1000;",
        "comment_created_at": "2025-03-09T21:53:39+00:00",
        "comment_author": "thecooldrop",
        "comment_body": "Maybe this should be configurable? If user decides they want  more, they should be able to get more. Default level should be maybe lower, something like 32. Note that this is not only a stack-overflow protection, but also protection against overflowing the storage space for logs.",
        "pr_file_module": null
      },
      {
        "comment_id": "1987102561",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 44627,
        "pr_file": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/json/JsonValueWriter.java",
        "discussion_id": "1983711925",
        "commented_code": "@@ -46,8 +46,12 @@\n  */\n class JsonValueWriter {\n \n+\tprivate static final int DEFAULT_MAX_NESTING_DEPTH = 1000;",
        "comment_created_at": "2025-03-10T11:28:03+00:00",
        "comment_author": "nosan",
        "comment_body": "I've prototyped some changes https://github.com/spring-projects/spring-boot/compare/main...nosan:44502-json-writer-configuration\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "722910906",
    "pr_number": 28204,
    "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleAutoConfiguration.java",
    "created_at": "2021-10-06T06:03:50+00:00",
    "commented_code": "String urlMapping = path + (path.endsWith(\"/\") ? \"*\" : \"/*\");\n \t\tServletRegistrationBean<WebServlet> registration = new ServletRegistrationBean<>(new WebServlet(), urlMapping);\n \t\tconfigureH2ConsoleSettings(registration, properties.getSettings());\n-\t\tdataSource.ifAvailable((available) -> {\n+\t\tlogger.info(\"H2 console available at '\" + path + \"'.\");\n+\t\tdataSource.orderedStream().forEachOrdered((available) -> {\n \t\t\ttry (Connection connection = available.getConnection()) {\n-\t\t\t\tlogger.info(\"H2 console available at '\" + path + \"'. Database available at '\"\n+\t\t\t\tlogger.info(\"Database available at '\"",
    "repo_full_name": "spring-projects/spring-boot",
    "discussion_comments": [
      {
        "comment_id": "722910906",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 28204,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleAutoConfiguration.java",
        "discussion_id": "722910906",
        "commented_code": "@@ -63,9 +63,10 @@\n \t\tString urlMapping = path + (path.endsWith(\"/\") ? \"*\" : \"/*\");\n \t\tServletRegistrationBean<WebServlet> registration = new ServletRegistrationBean<>(new WebServlet(), urlMapping);\n \t\tconfigureH2ConsoleSettings(registration, properties.getSettings());\n-\t\tdataSource.ifAvailable((available) -> {\n+\t\tlogger.info(\"H2 console available at '\" + path + \"'.\");\n+\t\tdataSource.orderedStream().forEachOrdered((available) -> {\n \t\t\ttry (Connection connection = available.getConnection()) {\n-\t\t\t\tlogger.info(\"H2 console available at '\" + path + \"'. Database available at '\"\n+\t\t\t\tlogger.info(\"Database available at '\"",
        "comment_created_at": "2021-10-06T06:03:50+00:00",
        "comment_author": "snicoll",
        "comment_body": "I'd rather create a single log entry with them. Ideally, something that shortcuts to the following log if there is only one and an optimized one for the multi-datasources scenario.",
        "pr_file_module": null
      },
      {
        "comment_id": "722913425",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 28204,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleAutoConfiguration.java",
        "discussion_id": "722910906",
        "commented_code": "@@ -63,9 +63,10 @@\n \t\tString urlMapping = path + (path.endsWith(\"/\") ? \"*\" : \"/*\");\n \t\tServletRegistrationBean<WebServlet> registration = new ServletRegistrationBean<>(new WebServlet(), urlMapping);\n \t\tconfigureH2ConsoleSettings(registration, properties.getSettings());\n-\t\tdataSource.ifAvailable((available) -> {\n+\t\tlogger.info(\"H2 console available at '\" + path + \"'.\");\n+\t\tdataSource.orderedStream().forEachOrdered((available) -> {\n \t\t\ttry (Connection connection = available.getConnection()) {\n-\t\t\t\tlogger.info(\"H2 console available at '\" + path + \"'. Database available at '\"\n+\t\t\t\tlogger.info(\"Database available at '\"",
        "comment_created_at": "2021-10-06T06:09:28+00:00",
        "comment_author": "StitzL",
        "comment_body": "Thank you for the kind suggestion, I'll implement that. I actually had this in mind as well, but did not want to overcomplicate things, this being my first contribution.",
        "pr_file_module": null
      },
      {
        "comment_id": "722913874",
        "repo_full_name": "spring-projects/spring-boot",
        "pr_number": 28204,
        "pr_file": "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleAutoConfiguration.java",
        "discussion_id": "722910906",
        "commented_code": "@@ -63,9 +63,10 @@\n \t\tString urlMapping = path + (path.endsWith(\"/\") ? \"*\" : \"/*\");\n \t\tServletRegistrationBean<WebServlet> registration = new ServletRegistrationBean<>(new WebServlet(), urlMapping);\n \t\tconfigureH2ConsoleSettings(registration, properties.getSettings());\n-\t\tdataSource.ifAvailable((available) -> {\n+\t\tlogger.info(\"H2 console available at '\" + path + \"'.\");\n+\t\tdataSource.orderedStream().forEachOrdered((available) -> {\n \t\t\ttry (Connection connection = available.getConnection()) {\n-\t\t\t\tlogger.info(\"H2 console available at '\" + path + \"'. Database available at '\"\n+\t\t\t\tlogger.info(\"Database available at '\"",
        "comment_created_at": "2021-10-06T06:10:26+00:00",
        "comment_author": "snicoll",
        "comment_body": "Yeah, let's see how that will look like and we can refine if necessary. Thanks for the contribution!",
        "pr_file_module": null
      }
    ]
  }
]