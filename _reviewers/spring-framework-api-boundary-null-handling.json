[
  {
    "discussion_id": "1539415797",
    "pr_number": 26478,
    "pr_file": "spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java",
    "created_at": "2024-03-26T14:53:57+00:00",
    "commented_code": "return this.propertyAccessors;\n \t}\n \n+\t@Override\n+\tpublic List<IndexAccessor> getIndexAccessors() {\n+\t\treturn null;",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1539415797",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 26478,
        "pr_file": "spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java",
        "discussion_id": "1539415797",
        "commented_code": "@@ -135,6 +136,11 @@ public List<PropertyAccessor> getPropertyAccessors() {\n \t\treturn this.propertyAccessors;\n \t}\n \n+\t@Override\n+\tpublic List<IndexAccessor> getIndexAccessors() {\n+\t\treturn null;",
        "comment_created_at": "2024-03-26T14:53:57+00:00",
        "comment_author": "sbrannen",
        "comment_body": "This breaks our null-safety contracts.\r\n\r\nIf we were to implement this method in `SimpleEvaluationContext`, we would want to return an empty list.\r\n\r\nHowever, by changing the method to a default method in `EvaluationContext`, we will no longer need to override this method (unless we decide to support custom `IndexAccessor` implementations in `SimpleEvaluationContext`).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1306661490",
    "pr_number": 31115,
    "pr_file": "spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java",
    "created_at": "2023-08-27T12:58:44+00:00",
    "commented_code": "* @since 5.2\n \t */\n \tpublic static Matcher matcher(byte[]... delimiters) {\n-\t\tAssert.isTrue(delimiters.length > 0, \"Delimiters must not be empty\");\n+\t\tAssert.notEmpty(delimiters, \"Delimiters must not be empty\");",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1306661490",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 31115,
        "pr_file": "spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java",
        "discussion_id": "1306661490",
        "commented_code": "@@ -622,7 +622,7 @@ public static Matcher matcher(byte[] delimiter) {\n \t * @since 5.2\n \t */\n \tpublic static Matcher matcher(byte[]... delimiters) {\n-\t\tAssert.isTrue(delimiters.length > 0, \"Delimiters must not be empty\");\n+\t\tAssert.notEmpty(delimiters, \"Delimiters must not be empty\");",
        "comment_created_at": "2023-08-27T12:58:44+00:00",
        "comment_author": "sbrannen",
        "comment_body": "We rely on nullability constraints in such cases, and `delimiters` should never be `null`, since `@Nullable` is not declared for that method parameter.\r\n\r\nIf a user supplies a `null` value for the var-args array, the resulting `NullPointerException` should suffice to inform them of their error.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1238254282",
    "pr_number": 30696,
    "pr_file": "spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java",
    "created_at": "2023-06-22T09:23:12+00:00",
    "commented_code": "public ReactorServerHttpResponse(HttpServerResponse response, DataBufferFactory bufferFactory) {\n \t\tsuper(bufferFactory, new HttpHeaders(new NettyHeadersAdapter(response.responseHeaders())));",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1238254282",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 30696,
        "pr_file": "spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java",
        "discussion_id": "1238254282",
        "commented_code": "@@ -56,7 +56,6 @@ class ReactorServerHttpResponse extends AbstractServerHttpResponse implements Ze\n \n \tpublic ReactorServerHttpResponse(HttpServerResponse response, DataBufferFactory bufferFactory) {\n \t\tsuper(bufferFactory, new HttpHeaders(new NettyHeadersAdapter(response.responseHeaders())));",
        "comment_created_at": "2023-06-22T09:23:12+00:00",
        "comment_author": "sbrannen",
        "comment_body": "```suggestion\r\n\t\tsuper(bufferFactory, new HttpHeaders(new NettyHeadersAdapter(Objects.requireNonNull(response, \"HttpServerResponse must not be null\").responseHeaders())));\r\n```\r\n\r\nAlthough it will throw a `NullPointerException` instead of an `IllegalArgumentException`, if we use `Objects.requireNonNull` we can still have a custom error message.\r\n\r\nSo let's go with that.",
        "pr_file_module": null
      },
      {
        "comment_id": "1238296194",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 30696,
        "pr_file": "spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java",
        "discussion_id": "1238254282",
        "commented_code": "@@ -56,7 +56,6 @@ class ReactorServerHttpResponse extends AbstractServerHttpResponse implements Ze\n \n \tpublic ReactorServerHttpResponse(HttpServerResponse response, DataBufferFactory bufferFactory) {\n \t\tsuper(bufferFactory, new HttpHeaders(new NettyHeadersAdapter(response.responseHeaders())));",
        "comment_created_at": "2023-06-22T09:58:11+00:00",
        "comment_author": "kooixh",
        "comment_body": "Made the change",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "109860241",
    "pr_number": 1376,
    "pr_file": "spring-web/src/main/java/org/springframework/http/converter/HttpMessageConversionException.java",
    "created_at": "2017-04-05T08:46:03+00:00",
    "commented_code": "package org.springframework.http.converter;\n \n import org.springframework.core.NestedRuntimeException;\n+import org.springframework.http.HttpStatus;\n+\n+import java.util.Optional;\n \n /**\n  * Thrown by {@link HttpMessageConverter} implementations when a conversion attempt fails.\n  *\n  * @author Arjen Poutsma\n+ * @author Sebastien Deleuze\n  * @since 3.0\n  */\n @SuppressWarnings(\"serial\")\n public class HttpMessageConversionException extends NestedRuntimeException {\n \n+\tprivate final Optional<HttpStatus> errorStatus;",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "109860241",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1376,
        "pr_file": "spring-web/src/main/java/org/springframework/http/converter/HttpMessageConversionException.java",
        "discussion_id": "109860241",
        "commented_code": "@@ -17,22 +17,29 @@\n package org.springframework.http.converter;\n \n import org.springframework.core.NestedRuntimeException;\n+import org.springframework.http.HttpStatus;\n+\n+import java.util.Optional;\n \n /**\n  * Thrown by {@link HttpMessageConverter} implementations when a conversion attempt fails.\n  *\n  * @author Arjen Poutsma\n+ * @author Sebastien Deleuze\n  * @since 3.0\n  */\n @SuppressWarnings(\"serial\")\n public class HttpMessageConversionException extends NestedRuntimeException {\n \n+\tprivate final Optional<HttpStatus> errorStatus;",
        "comment_created_at": "2017-04-05T08:46:03+00:00",
        "comment_author": "poutsma",
        "comment_body": "In general, `Optional`s should only be used as a return type, not a field value. So I would store this as a `HttpStatus` field with a potential null value. See http://blog.joda.org/2014/11/optional-in-java-se-8.html for reasons why.",
        "pr_file_module": null
      },
      {
        "comment_id": "109868529",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1376,
        "pr_file": "spring-web/src/main/java/org/springframework/http/converter/HttpMessageConversionException.java",
        "discussion_id": "109860241",
        "commented_code": "@@ -17,22 +17,29 @@\n package org.springframework.http.converter;\n \n import org.springframework.core.NestedRuntimeException;\n+import org.springframework.http.HttpStatus;\n+\n+import java.util.Optional;\n \n /**\n  * Thrown by {@link HttpMessageConverter} implementations when a conversion attempt fails.\n  *\n  * @author Arjen Poutsma\n+ * @author Sebastien Deleuze\n  * @since 3.0\n  */\n @SuppressWarnings(\"serial\")\n public class HttpMessageConversionException extends NestedRuntimeException {\n \n+\tprivate final Optional<HttpStatus> errorStatus;",
        "comment_created_at": "2017-04-05T09:25:40+00:00",
        "comment_author": "sdeleuze",
        "comment_body": "Make sense, fixed",
        "pr_file_module": null
      },
      {
        "comment_id": "109869429",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1376,
        "pr_file": "spring-web/src/main/java/org/springframework/http/converter/HttpMessageConversionException.java",
        "discussion_id": "109860241",
        "commented_code": "@@ -17,22 +17,29 @@\n package org.springframework.http.converter;\n \n import org.springframework.core.NestedRuntimeException;\n+import org.springframework.http.HttpStatus;\n+\n+import java.util.Optional;\n \n /**\n  * Thrown by {@link HttpMessageConverter} implementations when a conversion attempt fails.\n  *\n  * @author Arjen Poutsma\n+ * @author Sebastien Deleuze\n  * @since 3.0\n  */\n @SuppressWarnings(\"serial\")\n public class HttpMessageConversionException extends NestedRuntimeException {\n \n+\tprivate final Optional<HttpStatus> errorStatus;",
        "comment_created_at": "2017-04-05T09:30:02+00:00",
        "comment_author": "jhoeller",
        "comment_body": "We should generally remain defensive against overuse of `Optional`. So agreed, let's avoid it as field type and only expose it for method signatures where it nicely aligns with typical use of the method.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "401617968",
    "pr_number": 24700,
    "pr_file": "spring-web/src/main/java/org/springframework/http/client/reactive/HttpComponentsClientHttpConnector.java",
    "created_at": "2020-04-01T13:33:20+00:00",
    "commented_code": "+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.http.client.reactive;\n+\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.apache.hc.client5.http.cookie.BasicCookieStore;\n+import org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient;\n+import org.apache.hc.client5.http.impl.async.HttpAsyncClients;\n+import org.apache.hc.client5.http.protocol.HttpClientContext;\n+import org.apache.hc.core5.concurrent.FutureCallback;\n+import org.apache.hc.core5.http.ContentType;\n+import org.apache.hc.core5.http.HttpResponse;\n+import org.apache.hc.core5.http.Message;\n+import org.apache.hc.core5.http.nio.support.BasicRequestProducer;\n+import org.apache.hc.core5.reactive.ReactiveEntityProducer;\n+import org.apache.hc.core5.reactive.ReactiveResponseConsumer;\n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.MonoSink;\n+\n+import org.springframework.core.io.buffer.DataBufferFactory;\n+import org.springframework.core.io.buffer.DefaultDataBufferFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.lang.Nullable;\n+\n+/**\n+ * {@link ClientHttpConnector} implementation for the Apache HttpComponents HttpClient 5.x.\n+ *\n+ * @author Martin Tarj\u00e1nyi\n+ * @since 5.3\n+ * @see <a href=\"https://hc.apache.org/index.html\">Apache HttpComponents</a>\n+ */\n+public class HttpComponentsClientHttpConnector implements ClientHttpConnector {\n+\n+\tprivate final CloseableHttpAsyncClient client;\n+\n+\tprivate final DataBufferFactory dataBufferFactory;\n+\n+\tprivate final Supplier<? extends HttpClientContext> contextSupplier;\n+\n+\n+\t/**\n+\t * Default constructor that creates and starts a new instance of {@link CloseableHttpAsyncClient}.\n+\t */\n+\tpublic HttpComponentsClientHttpConnector() {\n+\t\tthis(HttpAsyncClients.createDefault());\n+\t}\n+\n+\t/**\n+\t * Constructor with a pre-configured {@link CloseableHttpAsyncClient} instance.\n+\t * @param client the client to use\n+\t */\n+\tpublic HttpComponentsClientHttpConnector(CloseableHttpAsyncClient client) {\n+\t\tthis(client, HttpClientContext::create);\n+\t}\n+\n+\t/**\n+\t * Constructor with a pre-configured {@link CloseableHttpAsyncClient} instance\n+\t * and a {@link HttpClientContext} supplier lambda which is called before each request\n+\t * and passed to the client.\n+\t * @param client the client to use\n+\t * @param contextSupplier a {@link HttpClientContext} supplier\n+\t */\n+\tpublic HttpComponentsClientHttpConnector(CloseableHttpAsyncClient client,\n+\t\t\tSupplier<? extends HttpClientContext> contextSupplier) {\n+\n+\t\tthis.dataBufferFactory = new DefaultDataBufferFactory();\n+\t\tthis.contextSupplier = contextSupplier;\n+\t\tthis.client = client;\n+\t\tthis.client.start();\n+\t}\n+\n+\n+\t@Override\n+\tpublic Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n+\t\t\tFunction<? super ClientHttpRequest, Mono<Void>> requestCallback) {\n+\n+\t\tHttpClientContext context = this.contextSupplier.get();\n+\n+\t\tif (context.getCookieStore() == null) {\n+\t\t\tcontext.setCookieStore(new BasicCookieStore());\n+\t\t}\n+\n+\t\tHttpComponentsClientHttpRequest request = new HttpComponentsClientHttpRequest(method, uri,\n+\t\t\t\tcontext, this.dataBufferFactory);\n+\n+\t\treturn requestCallback.apply(request).then(Mono.defer(() -> execute(request, context)));\n+\t}\n+\n+\tprivate Mono<ClientHttpResponse> execute(HttpComponentsClientHttpRequest request, HttpClientContext context) {\n+\t\tFlux<ByteBuffer> byteBufferFlux = request.getByteBufferFlux();\n+\n+\t\tReactiveEntityProducer reactiveEntityProducer = createReactiveEntityProducer(request, byteBufferFlux);\n+\n+\t\tBasicRequestProducer basicRequestProducer = new BasicRequestProducer(request.getHttpRequest(),\n+\t\t\t\treactiveEntityProducer);\n+\n+\t\treturn Mono.<Message<HttpResponse, Publisher<ByteBuffer>>>create(sink -> {\n+\t\t\tReactiveResponseConsumer reactiveResponseConsumer =\n+\t\t\t\t\tnew ReactiveResponseConsumer(new MonoFutureCallbackAdapter<>(sink));\n+\n+\t\t\tthis.client.execute(basicRequestProducer, reactiveResponseConsumer, context, null);\n+\t\t}).map(message -> new HttpComponentsClientHttpResponse(this.dataBufferFactory, message, context));\n+\t}\n+\n+\t@Nullable\n+\tprivate ReactiveEntityProducer createReactiveEntityProducer(HttpComponentsClientHttpRequest request,\n+\t\t\t@Nullable Flux<ByteBuffer> byteBufferFlux) {\n+\n+\t\tif (byteBufferFlux == null) {\n+\t\t\treturn null;\n+\t\t}",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "401617968",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24700,
        "pr_file": "spring-web/src/main/java/org/springframework/http/client/reactive/HttpComponentsClientHttpConnector.java",
        "discussion_id": "401617968",
        "commented_code": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.http.client.reactive;\n+\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.apache.hc.client5.http.cookie.BasicCookieStore;\n+import org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient;\n+import org.apache.hc.client5.http.impl.async.HttpAsyncClients;\n+import org.apache.hc.client5.http.protocol.HttpClientContext;\n+import org.apache.hc.core5.concurrent.FutureCallback;\n+import org.apache.hc.core5.http.ContentType;\n+import org.apache.hc.core5.http.HttpResponse;\n+import org.apache.hc.core5.http.Message;\n+import org.apache.hc.core5.http.nio.support.BasicRequestProducer;\n+import org.apache.hc.core5.reactive.ReactiveEntityProducer;\n+import org.apache.hc.core5.reactive.ReactiveResponseConsumer;\n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.MonoSink;\n+\n+import org.springframework.core.io.buffer.DataBufferFactory;\n+import org.springframework.core.io.buffer.DefaultDataBufferFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.lang.Nullable;\n+\n+/**\n+ * {@link ClientHttpConnector} implementation for the Apache HttpComponents HttpClient 5.x.\n+ *\n+ * @author Martin Tarj\u00e1nyi\n+ * @since 5.3\n+ * @see <a href=\"https://hc.apache.org/index.html\">Apache HttpComponents</a>\n+ */\n+public class HttpComponentsClientHttpConnector implements ClientHttpConnector {\n+\n+\tprivate final CloseableHttpAsyncClient client;\n+\n+\tprivate final DataBufferFactory dataBufferFactory;\n+\n+\tprivate final Supplier<? extends HttpClientContext> contextSupplier;\n+\n+\n+\t/**\n+\t * Default constructor that creates and starts a new instance of {@link CloseableHttpAsyncClient}.\n+\t */\n+\tpublic HttpComponentsClientHttpConnector() {\n+\t\tthis(HttpAsyncClients.createDefault());\n+\t}\n+\n+\t/**\n+\t * Constructor with a pre-configured {@link CloseableHttpAsyncClient} instance.\n+\t * @param client the client to use\n+\t */\n+\tpublic HttpComponentsClientHttpConnector(CloseableHttpAsyncClient client) {\n+\t\tthis(client, HttpClientContext::create);\n+\t}\n+\n+\t/**\n+\t * Constructor with a pre-configured {@link CloseableHttpAsyncClient} instance\n+\t * and a {@link HttpClientContext} supplier lambda which is called before each request\n+\t * and passed to the client.\n+\t * @param client the client to use\n+\t * @param contextSupplier a {@link HttpClientContext} supplier\n+\t */\n+\tpublic HttpComponentsClientHttpConnector(CloseableHttpAsyncClient client,\n+\t\t\tSupplier<? extends HttpClientContext> contextSupplier) {\n+\n+\t\tthis.dataBufferFactory = new DefaultDataBufferFactory();\n+\t\tthis.contextSupplier = contextSupplier;\n+\t\tthis.client = client;\n+\t\tthis.client.start();\n+\t}\n+\n+\n+\t@Override\n+\tpublic Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n+\t\t\tFunction<? super ClientHttpRequest, Mono<Void>> requestCallback) {\n+\n+\t\tHttpClientContext context = this.contextSupplier.get();\n+\n+\t\tif (context.getCookieStore() == null) {\n+\t\t\tcontext.setCookieStore(new BasicCookieStore());\n+\t\t}\n+\n+\t\tHttpComponentsClientHttpRequest request = new HttpComponentsClientHttpRequest(method, uri,\n+\t\t\t\tcontext, this.dataBufferFactory);\n+\n+\t\treturn requestCallback.apply(request).then(Mono.defer(() -> execute(request, context)));\n+\t}\n+\n+\tprivate Mono<ClientHttpResponse> execute(HttpComponentsClientHttpRequest request, HttpClientContext context) {\n+\t\tFlux<ByteBuffer> byteBufferFlux = request.getByteBufferFlux();\n+\n+\t\tReactiveEntityProducer reactiveEntityProducer = createReactiveEntityProducer(request, byteBufferFlux);\n+\n+\t\tBasicRequestProducer basicRequestProducer = new BasicRequestProducer(request.getHttpRequest(),\n+\t\t\t\treactiveEntityProducer);\n+\n+\t\treturn Mono.<Message<HttpResponse, Publisher<ByteBuffer>>>create(sink -> {\n+\t\t\tReactiveResponseConsumer reactiveResponseConsumer =\n+\t\t\t\t\tnew ReactiveResponseConsumer(new MonoFutureCallbackAdapter<>(sink));\n+\n+\t\t\tthis.client.execute(basicRequestProducer, reactiveResponseConsumer, context, null);\n+\t\t}).map(message -> new HttpComponentsClientHttpResponse(this.dataBufferFactory, message, context));\n+\t}\n+\n+\t@Nullable\n+\tprivate ReactiveEntityProducer createReactiveEntityProducer(HttpComponentsClientHttpRequest request,\n+\t\t\t@Nullable Flux<ByteBuffer> byteBufferFlux) {\n+\n+\t\tif (byteBufferFlux == null) {\n+\t\t\treturn null;\n+\t\t}",
        "comment_created_at": "2020-04-01T13:33:20+00:00",
        "comment_author": "poutsma",
        "comment_body": "It's good to check for a null body, but probably not to return null from here. Maybe create an empty body?",
        "pr_file_module": null
      },
      {
        "comment_id": "402604732",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24700,
        "pr_file": "spring-web/src/main/java/org/springframework/http/client/reactive/HttpComponentsClientHttpConnector.java",
        "discussion_id": "401617968",
        "commented_code": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.http.client.reactive;\n+\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.apache.hc.client5.http.cookie.BasicCookieStore;\n+import org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient;\n+import org.apache.hc.client5.http.impl.async.HttpAsyncClients;\n+import org.apache.hc.client5.http.protocol.HttpClientContext;\n+import org.apache.hc.core5.concurrent.FutureCallback;\n+import org.apache.hc.core5.http.ContentType;\n+import org.apache.hc.core5.http.HttpResponse;\n+import org.apache.hc.core5.http.Message;\n+import org.apache.hc.core5.http.nio.support.BasicRequestProducer;\n+import org.apache.hc.core5.reactive.ReactiveEntityProducer;\n+import org.apache.hc.core5.reactive.ReactiveResponseConsumer;\n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.MonoSink;\n+\n+import org.springframework.core.io.buffer.DataBufferFactory;\n+import org.springframework.core.io.buffer.DefaultDataBufferFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.lang.Nullable;\n+\n+/**\n+ * {@link ClientHttpConnector} implementation for the Apache HttpComponents HttpClient 5.x.\n+ *\n+ * @author Martin Tarj\u00e1nyi\n+ * @since 5.3\n+ * @see <a href=\"https://hc.apache.org/index.html\">Apache HttpComponents</a>\n+ */\n+public class HttpComponentsClientHttpConnector implements ClientHttpConnector {\n+\n+\tprivate final CloseableHttpAsyncClient client;\n+\n+\tprivate final DataBufferFactory dataBufferFactory;\n+\n+\tprivate final Supplier<? extends HttpClientContext> contextSupplier;\n+\n+\n+\t/**\n+\t * Default constructor that creates and starts a new instance of {@link CloseableHttpAsyncClient}.\n+\t */\n+\tpublic HttpComponentsClientHttpConnector() {\n+\t\tthis(HttpAsyncClients.createDefault());\n+\t}\n+\n+\t/**\n+\t * Constructor with a pre-configured {@link CloseableHttpAsyncClient} instance.\n+\t * @param client the client to use\n+\t */\n+\tpublic HttpComponentsClientHttpConnector(CloseableHttpAsyncClient client) {\n+\t\tthis(client, HttpClientContext::create);\n+\t}\n+\n+\t/**\n+\t * Constructor with a pre-configured {@link CloseableHttpAsyncClient} instance\n+\t * and a {@link HttpClientContext} supplier lambda which is called before each request\n+\t * and passed to the client.\n+\t * @param client the client to use\n+\t * @param contextSupplier a {@link HttpClientContext} supplier\n+\t */\n+\tpublic HttpComponentsClientHttpConnector(CloseableHttpAsyncClient client,\n+\t\t\tSupplier<? extends HttpClientContext> contextSupplier) {\n+\n+\t\tthis.dataBufferFactory = new DefaultDataBufferFactory();\n+\t\tthis.contextSupplier = contextSupplier;\n+\t\tthis.client = client;\n+\t\tthis.client.start();\n+\t}\n+\n+\n+\t@Override\n+\tpublic Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n+\t\t\tFunction<? super ClientHttpRequest, Mono<Void>> requestCallback) {\n+\n+\t\tHttpClientContext context = this.contextSupplier.get();\n+\n+\t\tif (context.getCookieStore() == null) {\n+\t\t\tcontext.setCookieStore(new BasicCookieStore());\n+\t\t}\n+\n+\t\tHttpComponentsClientHttpRequest request = new HttpComponentsClientHttpRequest(method, uri,\n+\t\t\t\tcontext, this.dataBufferFactory);\n+\n+\t\treturn requestCallback.apply(request).then(Mono.defer(() -> execute(request, context)));\n+\t}\n+\n+\tprivate Mono<ClientHttpResponse> execute(HttpComponentsClientHttpRequest request, HttpClientContext context) {\n+\t\tFlux<ByteBuffer> byteBufferFlux = request.getByteBufferFlux();\n+\n+\t\tReactiveEntityProducer reactiveEntityProducer = createReactiveEntityProducer(request, byteBufferFlux);\n+\n+\t\tBasicRequestProducer basicRequestProducer = new BasicRequestProducer(request.getHttpRequest(),\n+\t\t\t\treactiveEntityProducer);\n+\n+\t\treturn Mono.<Message<HttpResponse, Publisher<ByteBuffer>>>create(sink -> {\n+\t\t\tReactiveResponseConsumer reactiveResponseConsumer =\n+\t\t\t\t\tnew ReactiveResponseConsumer(new MonoFutureCallbackAdapter<>(sink));\n+\n+\t\t\tthis.client.execute(basicRequestProducer, reactiveResponseConsumer, context, null);\n+\t\t}).map(message -> new HttpComponentsClientHttpResponse(this.dataBufferFactory, message, context));\n+\t}\n+\n+\t@Nullable\n+\tprivate ReactiveEntityProducer createReactiveEntityProducer(HttpComponentsClientHttpRequest request,\n+\t\t\t@Nullable Flux<ByteBuffer> byteBufferFlux) {\n+\n+\t\tif (byteBufferFlux == null) {\n+\t\t\treturn null;\n+\t\t}",
        "comment_created_at": "2020-04-02T21:24:16+00:00",
        "comment_author": "martin-tarjanyi",
        "comment_body": "When you say empty body you mean an empty `Flux` as the byte buffer publisher?\r\nI tried this approach but it made the client hang.",
        "pr_file_module": null
      },
      {
        "comment_id": "402991566",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24700,
        "pr_file": "spring-web/src/main/java/org/springframework/http/client/reactive/HttpComponentsClientHttpConnector.java",
        "discussion_id": "401617968",
        "commented_code": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.http.client.reactive;\n+\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.apache.hc.client5.http.cookie.BasicCookieStore;\n+import org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient;\n+import org.apache.hc.client5.http.impl.async.HttpAsyncClients;\n+import org.apache.hc.client5.http.protocol.HttpClientContext;\n+import org.apache.hc.core5.concurrent.FutureCallback;\n+import org.apache.hc.core5.http.ContentType;\n+import org.apache.hc.core5.http.HttpResponse;\n+import org.apache.hc.core5.http.Message;\n+import org.apache.hc.core5.http.nio.support.BasicRequestProducer;\n+import org.apache.hc.core5.reactive.ReactiveEntityProducer;\n+import org.apache.hc.core5.reactive.ReactiveResponseConsumer;\n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.MonoSink;\n+\n+import org.springframework.core.io.buffer.DataBufferFactory;\n+import org.springframework.core.io.buffer.DefaultDataBufferFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.lang.Nullable;\n+\n+/**\n+ * {@link ClientHttpConnector} implementation for the Apache HttpComponents HttpClient 5.x.\n+ *\n+ * @author Martin Tarj\u00e1nyi\n+ * @since 5.3\n+ * @see <a href=\"https://hc.apache.org/index.html\">Apache HttpComponents</a>\n+ */\n+public class HttpComponentsClientHttpConnector implements ClientHttpConnector {\n+\n+\tprivate final CloseableHttpAsyncClient client;\n+\n+\tprivate final DataBufferFactory dataBufferFactory;\n+\n+\tprivate final Supplier<? extends HttpClientContext> contextSupplier;\n+\n+\n+\t/**\n+\t * Default constructor that creates and starts a new instance of {@link CloseableHttpAsyncClient}.\n+\t */\n+\tpublic HttpComponentsClientHttpConnector() {\n+\t\tthis(HttpAsyncClients.createDefault());\n+\t}\n+\n+\t/**\n+\t * Constructor with a pre-configured {@link CloseableHttpAsyncClient} instance.\n+\t * @param client the client to use\n+\t */\n+\tpublic HttpComponentsClientHttpConnector(CloseableHttpAsyncClient client) {\n+\t\tthis(client, HttpClientContext::create);\n+\t}\n+\n+\t/**\n+\t * Constructor with a pre-configured {@link CloseableHttpAsyncClient} instance\n+\t * and a {@link HttpClientContext} supplier lambda which is called before each request\n+\t * and passed to the client.\n+\t * @param client the client to use\n+\t * @param contextSupplier a {@link HttpClientContext} supplier\n+\t */\n+\tpublic HttpComponentsClientHttpConnector(CloseableHttpAsyncClient client,\n+\t\t\tSupplier<? extends HttpClientContext> contextSupplier) {\n+\n+\t\tthis.dataBufferFactory = new DefaultDataBufferFactory();\n+\t\tthis.contextSupplier = contextSupplier;\n+\t\tthis.client = client;\n+\t\tthis.client.start();\n+\t}\n+\n+\n+\t@Override\n+\tpublic Mono<ClientHttpResponse> connect(HttpMethod method, URI uri,\n+\t\t\tFunction<? super ClientHttpRequest, Mono<Void>> requestCallback) {\n+\n+\t\tHttpClientContext context = this.contextSupplier.get();\n+\n+\t\tif (context.getCookieStore() == null) {\n+\t\t\tcontext.setCookieStore(new BasicCookieStore());\n+\t\t}\n+\n+\t\tHttpComponentsClientHttpRequest request = new HttpComponentsClientHttpRequest(method, uri,\n+\t\t\t\tcontext, this.dataBufferFactory);\n+\n+\t\treturn requestCallback.apply(request).then(Mono.defer(() -> execute(request, context)));\n+\t}\n+\n+\tprivate Mono<ClientHttpResponse> execute(HttpComponentsClientHttpRequest request, HttpClientContext context) {\n+\t\tFlux<ByteBuffer> byteBufferFlux = request.getByteBufferFlux();\n+\n+\t\tReactiveEntityProducer reactiveEntityProducer = createReactiveEntityProducer(request, byteBufferFlux);\n+\n+\t\tBasicRequestProducer basicRequestProducer = new BasicRequestProducer(request.getHttpRequest(),\n+\t\t\t\treactiveEntityProducer);\n+\n+\t\treturn Mono.<Message<HttpResponse, Publisher<ByteBuffer>>>create(sink -> {\n+\t\t\tReactiveResponseConsumer reactiveResponseConsumer =\n+\t\t\t\t\tnew ReactiveResponseConsumer(new MonoFutureCallbackAdapter<>(sink));\n+\n+\t\t\tthis.client.execute(basicRequestProducer, reactiveResponseConsumer, context, null);\n+\t\t}).map(message -> new HttpComponentsClientHttpResponse(this.dataBufferFactory, message, context));\n+\t}\n+\n+\t@Nullable\n+\tprivate ReactiveEntityProducer createReactiveEntityProducer(HttpComponentsClientHttpRequest request,\n+\t\t\t@Nullable Flux<ByteBuffer> byteBufferFlux) {\n+\n+\t\tif (byteBufferFlux == null) {\n+\t\t\treturn null;\n+\t\t}",
        "comment_created_at": "2020-04-03T13:07:26+00:00",
        "comment_author": "poutsma",
        "comment_body": "Ok, that's fine then. I guess Apache HC does accept an empty data producer, but not empty an empty publisher.",
        "pr_file_module": null
      }
    ]
  }
]