[
  {
    "discussion_id": "2144654931",
    "pr_number": 35046,
    "pr_file": "spring-core/src/main/java/org/springframework/core/io/AbstractResource.java",
    "created_at": "2025-06-13T09:51:06+00:00",
    "commented_code": "}\n \t\t\treturn size;\n \t\t}\n-\t\tfinally {",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "2144654931",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 35046,
        "pr_file": "spring-core/src/main/java/org/springframework/core/io/AbstractResource.java",
        "discussion_id": "2144654931",
        "commented_code": "@@ -163,14 +162,6 @@ public long contentLength() throws IOException {\n \t\t\t}\n \t\t\treturn size;\n \t\t}\n-\t\tfinally {",
        "comment_created_at": "2025-06-13T09:51:06+00:00",
        "comment_author": "bclozel",
        "comment_body": "Please revert. The exception thrown while closing the stream is not caught/logged anymore.\r\nSee [this message](https://mail.openjdk.org/pipermail/coin-dev/2009-April/001503.html) for a discussion on possible workarounds. I think we should keep the current code.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2144668665",
    "pr_number": 35046,
    "pr_file": "spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java",
    "created_at": "2025-06-13T09:57:33+00:00",
    "commented_code": "// We cannot use try-with-resources here for the InputStream, since we have\n \t\t// custom handling of the close() method in a finally-block.\n \t\ttry {\n-\t\t\tInputStream in = resource.getInputStream();\n-\t\t\ttry {\n-\t\t\t\tOutputStream out = outputMessage.getBody();\n-\t\t\t\tin.transferTo(out);\n-\t\t\t\tout.flush();\n-\t\t\t}\n-\t\t\tcatch (NullPointerException ex) {\n-\t\t\t\t// ignore, see SPR-13620\n-\t\t\t}\n-\t\t\tfinally {\n+\t\t\ttry (InputStream in = resource.getInputStream()) {\n \t\t\t\ttry {\n-\t\t\t\t\tin.close();\n-\t\t\t\t}\n-\t\t\t\tcatch (Throwable ex) {\n-\t\t\t\t\t// ignore, see SPR-12999",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "2144668665",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 35046,
        "pr_file": "spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java",
        "discussion_id": "2144668665",
        "commented_code": "@@ -152,22 +152,16 @@ protected void writeContent(Resource resource, HttpOutputMessage outputMessage)\n \t\t// We cannot use try-with-resources here for the InputStream, since we have\n \t\t// custom handling of the close() method in a finally-block.\n \t\ttry {\n-\t\t\tInputStream in = resource.getInputStream();\n-\t\t\ttry {\n-\t\t\t\tOutputStream out = outputMessage.getBody();\n-\t\t\t\tin.transferTo(out);\n-\t\t\t\tout.flush();\n-\t\t\t}\n-\t\t\tcatch (NullPointerException ex) {\n-\t\t\t\t// ignore, see SPR-13620\n-\t\t\t}\n-\t\t\tfinally {\n+\t\t\ttry (InputStream in = resource.getInputStream()) {\n \t\t\t\ttry {\n-\t\t\t\t\tin.close();\n-\t\t\t\t}\n-\t\t\t\tcatch (Throwable ex) {\n-\t\t\t\t\t// ignore, see SPR-12999",
        "comment_created_at": "2025-06-13T09:57:33+00:00",
        "comment_author": "bclozel",
        "comment_body": "Please revert. This will catch all Throwable thrown by the code block, not just when the resource is closed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1093558958",
    "pr_number": 29703,
    "pr_file": "spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java",
    "created_at": "2023-02-01T17:57:09+00:00",
    "commented_code": "txObject.getConnectionHolder().clear();\n \t\t\t\t}\n \t\t\t\treturn Mono.empty();\n-\t\t\t}));\n+\t\t\t})).onErrorResume(e -> {",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1093558958",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 29703,
        "pr_file": "spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java",
        "discussion_id": "1093558958",
        "commented_code": "@@ -373,7 +373,19 @@ protected Mono<Void> doCleanupAfterCompletion(TransactionSynchronizationManager\n \t\t\t\t\ttxObject.getConnectionHolder().clear();\n \t\t\t\t}\n \t\t\t\treturn Mono.empty();\n-\t\t\t}));\n+\t\t\t})).onErrorResume(e -> {",
        "comment_created_at": "2023-02-01T17:57:09+00:00",
        "comment_author": "simonbasle",
        "comment_body": "the `doCleanupAfterCompletion` javadoc states that it \"Should not throw any exceptions but just issue warnings on errors\", so that's a good direction \ud83d\udc4d \r\n\r\nBut its duplicates the logic a bit, and doesn't help in two additional corner cases: the `setIsolationLevel` call a few lines above fails or the `releaseConnection` inside this particular defer fails.\r\n\r\nIt would be better if each 3 steps were protected against errors (and if we did some logging while we're at it).\r\n\r\nThe three steps are represented as a `Mono<Void>` that gets concatenated to the `afterCleanup` via the `.then(step)` operator. Note that for the last one (deferred \"Releasing R2DBC Connection\" step), the only thing that actually needs protection is the inner call to `ConnectionFactoryUtils.releaseConnection`.\r\n\r\nThe following method would be a way of doing so with the `onErrorComplete()` operator:\r\n```java\r\n\t@NotNull\r\n\tprivate Mono<Void> safeCleanupStep(String stepDescription, Mono<Void> stepMono) {\r\n\t\tif (!this.logger.isDebugEnabled()) {\r\n\t\t\treturn stepMono.onErrorComplete();\r\n\t\t}\r\n\t\treturn stepMono.doOnError(e -> this.logger.debug(String.format(\"Error ignored during %s: %s\", stepDescription, e)))\r\n\t\t\t\t.onErrorComplete();\r\n\t}\r\n```\r\n\r\nit can be used as in the following example:\r\n```java\r\nif (shouldDoFoo) {\r\n    Mono<Void> step = safeCleanupStep(\"doCleanupAfterCompletion when doing foo\",\r\n        someMonoForFoo());\r\n    afterCleanup = afterCleanup.then(step);\r\n}\r\n```\r\n\r\nwdyt?\r\n\r\n\r\n(edit: the `LogFormatUtils` method with the full stacktrace I was originally referring to doesn't exist outside of my local machine. simplified the logging in `safeCleanupStep`)",
        "pr_file_module": null
      },
      {
        "comment_id": "1094860749",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 29703,
        "pr_file": "spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/R2dbcTransactionManager.java",
        "discussion_id": "1093558958",
        "commented_code": "@@ -373,7 +373,19 @@ protected Mono<Void> doCleanupAfterCompletion(TransactionSynchronizationManager\n \t\t\t\t\ttxObject.getConnectionHolder().clear();\n \t\t\t\t}\n \t\t\t\treturn Mono.empty();\n-\t\t\t}));\n+\t\t\t})).onErrorResume(e -> {",
        "comment_created_at": "2023-02-02T17:40:05+00:00",
        "comment_author": "FutureGadget",
        "comment_body": "I agree with you.\r\nIt seems like setIsolationLevel has been removed since fae36e98b4c3d72941e3f209a87047332ff51ba1.\r\nHere is the updated code: 3724bb0\r\nThank you!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "902633366",
    "pr_number": 28669,
    "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java",
    "created_at": "2022-06-21T13:39:28+00:00",
    "commented_code": "* {@link DataSource#getConnection()} into an {@link IllegalStateException}.\n \t * @param dataSource the DataSource to obtain Connections from\n \t * @return a JDBC Connection from the given DataSource (never {@code null})\n-\t * @throws SQLException if thrown by JDBC methods\n-\t * @throws IllegalStateException if the DataSource returned a null value\n+\t * @throws SQLException if thrown by JDBC methods or the DataSource returned a null value\n \t * @see DataSource#getConnection()\n \t */\n \tprivate static Connection fetchConnection(DataSource dataSource) throws SQLException {\n \t\tConnection con = dataSource.getConnection();\n \t\tif (con == null) {\n-\t\t\tthrow new IllegalStateException(\"DataSource returned null from getConnection(): \" + dataSource);\n+\t\t\tthrow new SQLException(\"DataSource returned null from getConnection(): \" + dataSource);",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "902633366",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 28669,
        "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java",
        "discussion_id": "902633366",
        "commented_code": "@@ -151,14 +148,13 @@ public static Connection doGetConnection(DataSource dataSource) throws SQLExcept\n \t * {@link DataSource#getConnection()} into an {@link IllegalStateException}.\n \t * @param dataSource the DataSource to obtain Connections from\n \t * @return a JDBC Connection from the given DataSource (never {@code null})\n-\t * @throws SQLException if thrown by JDBC methods\n-\t * @throws IllegalStateException if the DataSource returned a null value\n+\t * @throws SQLException if thrown by JDBC methods or the DataSource returned a null value\n \t * @see DataSource#getConnection()\n \t */\n \tprivate static Connection fetchConnection(DataSource dataSource) throws SQLException {\n \t\tConnection con = dataSource.getConnection();\n \t\tif (con == null) {\n-\t\t\tthrow new IllegalStateException(\"DataSource returned null from getConnection(): \" + dataSource);\n+\t\t\tthrow new SQLException(\"DataSource returned null from getConnection(): \" + dataSource);",
        "comment_created_at": "2022-06-21T13:39:28+00:00",
        "comment_author": "snicoll",
        "comment_body": "That change doesn't sound right to me. We shouldn't be throwing `SQLException` here.",
        "pr_file_module": null
      },
      {
        "comment_id": "902656180",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 28669,
        "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java",
        "discussion_id": "902633366",
        "commented_code": "@@ -151,14 +148,13 @@ public static Connection doGetConnection(DataSource dataSource) throws SQLExcept\n \t * {@link DataSource#getConnection()} into an {@link IllegalStateException}.\n \t * @param dataSource the DataSource to obtain Connections from\n \t * @return a JDBC Connection from the given DataSource (never {@code null})\n-\t * @throws SQLException if thrown by JDBC methods\n-\t * @throws IllegalStateException if the DataSource returned a null value\n+\t * @throws SQLException if thrown by JDBC methods or the DataSource returned a null value\n \t * @see DataSource#getConnection()\n \t */\n \tprivate static Connection fetchConnection(DataSource dataSource) throws SQLException {\n \t\tConnection con = dataSource.getConnection();\n \t\tif (con == null) {\n-\t\t\tthrow new IllegalStateException(\"DataSource returned null from getConnection(): \" + dataSource);\n+\t\t\tthrow new SQLException(\"DataSource returned null from getConnection(): \" + dataSource);",
        "comment_created_at": "2022-06-21T13:57:22+00:00",
        "comment_author": "kevin0x90",
        "comment_body": "I did this change because the `CannotGetJdbcConnectionException` only accepts SQLException as cause parameter. \r\nSo what do you think of relaxing the type constraint in `CannotGetJdbcConnectionException` a bit so that also IllegalStateException could be provided either via a constructor overload or a more relaxed type specified.",
        "pr_file_module": null
      },
      {
        "comment_id": "902678739",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 28669,
        "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java",
        "discussion_id": "902633366",
        "commented_code": "@@ -151,14 +148,13 @@ public static Connection doGetConnection(DataSource dataSource) throws SQLExcept\n \t * {@link DataSource#getConnection()} into an {@link IllegalStateException}.\n \t * @param dataSource the DataSource to obtain Connections from\n \t * @return a JDBC Connection from the given DataSource (never {@code null})\n-\t * @throws SQLException if thrown by JDBC methods\n-\t * @throws IllegalStateException if the DataSource returned a null value\n+\t * @throws SQLException if thrown by JDBC methods or the DataSource returned a null value\n \t * @see DataSource#getConnection()\n \t */\n \tprivate static Connection fetchConnection(DataSource dataSource) throws SQLException {\n \t\tConnection con = dataSource.getConnection();\n \t\tif (con == null) {\n-\t\t\tthrow new IllegalStateException(\"DataSource returned null from getConnection(): \" + dataSource);\n+\t\t\tthrow new SQLException(\"DataSource returned null from getConnection(): \" + dataSource);",
        "comment_created_at": "2022-06-21T14:15:59+00:00",
        "comment_author": "jhoeller",
        "comment_body": "I don't think this is worth changing to begin with. A `DataSource` returning `null` can only be a mock without a corresponding instruction, not a real `DataSource`. Since this only comes up in such a specific case, primarily even just within our own mock-based JDBC test suite, internal handling of it - just preserving the message - does not really hurt. Such an internal `IllegalStateException` is arguably not worth preserving.",
        "pr_file_module": null
      },
      {
        "comment_id": "902741366",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 28669,
        "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java",
        "discussion_id": "902633366",
        "commented_code": "@@ -151,14 +148,13 @@ public static Connection doGetConnection(DataSource dataSource) throws SQLExcept\n \t * {@link DataSource#getConnection()} into an {@link IllegalStateException}.\n \t * @param dataSource the DataSource to obtain Connections from\n \t * @return a JDBC Connection from the given DataSource (never {@code null})\n-\t * @throws SQLException if thrown by JDBC methods\n-\t * @throws IllegalStateException if the DataSource returned a null value\n+\t * @throws SQLException if thrown by JDBC methods or the DataSource returned a null value\n \t * @see DataSource#getConnection()\n \t */\n \tprivate static Connection fetchConnection(DataSource dataSource) throws SQLException {\n \t\tConnection con = dataSource.getConnection();\n \t\tif (con == null) {\n-\t\t\tthrow new IllegalStateException(\"DataSource returned null from getConnection(): \" + dataSource);\n+\t\t\tthrow new SQLException(\"DataSource returned null from getConnection(): \" + dataSource);",
        "comment_created_at": "2022-06-21T15:06:31+00:00",
        "comment_author": "kevin0x90",
        "comment_body": "So i would interpret this like the PR could be just closed.",
        "pr_file_module": null
      },
      {
        "comment_id": "902771466",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 28669,
        "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java",
        "discussion_id": "902633366",
        "commented_code": "@@ -151,14 +148,13 @@ public static Connection doGetConnection(DataSource dataSource) throws SQLExcept\n \t * {@link DataSource#getConnection()} into an {@link IllegalStateException}.\n \t * @param dataSource the DataSource to obtain Connections from\n \t * @return a JDBC Connection from the given DataSource (never {@code null})\n-\t * @throws SQLException if thrown by JDBC methods\n-\t * @throws IllegalStateException if the DataSource returned a null value\n+\t * @throws SQLException if thrown by JDBC methods or the DataSource returned a null value\n \t * @see DataSource#getConnection()\n \t */\n \tprivate static Connection fetchConnection(DataSource dataSource) throws SQLException {\n \t\tConnection con = dataSource.getConnection();\n \t\tif (con == null) {\n-\t\t\tthrow new IllegalStateException(\"DataSource returned null from getConnection(): \" + dataSource);\n+\t\t\tthrow new SQLException(\"DataSource returned null from getConnection(): \" + dataSource);",
        "comment_created_at": "2022-06-21T15:32:45+00:00",
        "comment_author": "jhoeller",
        "comment_body": "Actually, there is a case that I missed so far, namely the specific one likely to be causing the original #28258 report: A `ConnectionHandle.getConnection()` call for a thread-bound transactional resource may throw an `IllegalStateException` of its own, totally unrelated to our null handling in `DataSourceUtils.fetchConnection`. Unfortunately we would catch that and turn it into an exception message as well. That part is worth revisiting, however, with a different strategy than the initial PR: leaving `fetchConnection` as-is, just preserving the `IllegalStateException` as a root cause in the `DataSourceUtils.getConnection` catch block through a corresponding overloaded `CannotGetJdbcConnectionException` constructor (as you hinted at above).\r\n\r\nIn other words, the internal `IllegalStateException` thrown within `DataSourceUtils.fetchConnection` is not actually the culprit here. It's rather `ConnectionHandle.getConnection()` throwing an `IllegalStateException` which crosses into our `DataSourceUtils.getConnection` catch block that was only meant to catch our internal `IllegalStateException`. For that case, we should preserve the root cause indeed. If we also preserve the root cause for our internal `IllegalStateException` that way, that's an acceptable side effect but not actually the goal here.\r\n\r\nWould you like to change this PR towards such an overloaded constructor on `CannotGetJdbcConnectionException`, ideally specifically for `IllegalStateException`, along with the `DataSourceUtils.getConnection` catch block passing the cause into it? Ideally the PR would be based on 5.3.x since we'd certainly include this revision there.\r\n\r\nOtherwise we can also do it in a separate commit along with other refinement work on the 5.3.x branch.",
        "pr_file_module": null
      },
      {
        "comment_id": "902793696",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 28669,
        "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java",
        "discussion_id": "902633366",
        "commented_code": "@@ -151,14 +148,13 @@ public static Connection doGetConnection(DataSource dataSource) throws SQLExcept\n \t * {@link DataSource#getConnection()} into an {@link IllegalStateException}.\n \t * @param dataSource the DataSource to obtain Connections from\n \t * @return a JDBC Connection from the given DataSource (never {@code null})\n-\t * @throws SQLException if thrown by JDBC methods\n-\t * @throws IllegalStateException if the DataSource returned a null value\n+\t * @throws SQLException if thrown by JDBC methods or the DataSource returned a null value\n \t * @see DataSource#getConnection()\n \t */\n \tprivate static Connection fetchConnection(DataSource dataSource) throws SQLException {\n \t\tConnection con = dataSource.getConnection();\n \t\tif (con == null) {\n-\t\t\tthrow new IllegalStateException(\"DataSource returned null from getConnection(): \" + dataSource);\n+\t\t\tthrow new SQLException(\"DataSource returned null from getConnection(): \" + dataSource);",
        "comment_created_at": "2022-06-21T15:53:12+00:00",
        "comment_author": "kevin0x90",
        "comment_body": "Ok i will adjust the code accordingly.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "770543206",
    "pr_number": 27823,
    "pr_file": "spring-context-indexer/src/main/java/org/springframework/context/index/processor/MetadataStore.java",
    "created_at": "2021-12-16T13:35:50+00:00",
    "commented_code": "private CandidateComponentsMetadata readMetadata(InputStream in) throws IOException {\n-\t\ttry {\n+\t\ttry (in) {",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "770543206",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27823,
        "pr_file": "spring-context-indexer/src/main/java/org/springframework/context/index/processor/MetadataStore.java",
        "discussion_id": "770543206",
        "commented_code": "@@ -62,12 +62,9 @@ public void writeMetadata(CandidateComponentsMetadata metadata) throws IOExcepti\n \n \n \tprivate CandidateComponentsMetadata readMetadata(InputStream in) throws IOException {\n-\t\ttry {\n+\t\ttry (in) {",
        "comment_created_at": "2021-12-16T13:35:50+00:00",
        "comment_author": "sbrannen",
        "comment_body": "At a quick glance, this change is the only change in this PR that does not break existing behavior.\r\n\r\nCan you please revisit your changes and ensure that existing behavior is not altered?\r\n\r\nFor example, a try-with-resources block will close the `AutoCloseable` object, but it will not swallow exceptions thrown by the invocation of `close()`. So anywhere that we were previously intentionally swallowing exceptions such as `IOException`, we would still have to swallow those exceptions.\r\n\r\nIn addition, we would have to be able to disambiguate between an `IOException` thrown from within the try-block vs. one thrown by the invocation of `close()`.\r\n\r\nIn light of that, I don't think it makes sense to use try-with-resources in such use cases, but I'm happy to be proven wrong.",
        "pr_file_module": null
      },
      {
        "comment_id": "770581831",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27823,
        "pr_file": "spring-context-indexer/src/main/java/org/springframework/context/index/processor/MetadataStore.java",
        "discussion_id": "770543206",
        "commented_code": "@@ -62,12 +62,9 @@ public void writeMetadata(CandidateComponentsMetadata metadata) throws IOExcepti\n \n \n \tprivate CandidateComponentsMetadata readMetadata(InputStream in) throws IOException {\n-\t\ttry {\n+\t\ttry (in) {",
        "comment_created_at": "2021-12-16T14:22:20+00:00",
        "comment_author": "mdeinum",
        "comment_body": "You are right, I mistakenly thought that exceptions in a try-with-resource were going to be swallowed. They aren't and still bubble up. Lets remove and forget about this pull request :). ",
        "pr_file_module": null
      },
      {
        "comment_id": "770589485",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27823,
        "pr_file": "spring-context-indexer/src/main/java/org/springframework/context/index/processor/MetadataStore.java",
        "discussion_id": "770543206",
        "commented_code": "@@ -62,12 +62,9 @@ public void writeMetadata(CandidateComponentsMetadata metadata) throws IOExcepti\n \n \n \tprivate CandidateComponentsMetadata readMetadata(InputStream in) throws IOException {\n-\t\ttry {\n+\t\ttry (in) {",
        "comment_created_at": "2021-12-16T14:30:26+00:00",
        "comment_author": "sbrannen",
        "comment_body": "Actually, I'd appreciate it if you could keep the one valid change and add inline documentation to the other locations to point out why try-with-resources should not be used there.\r\n\r\nThat will provide a big help to the team to make sure we don't accidentally switch to try-with-resources for those use cases in the future.",
        "pr_file_module": null
      },
      {
        "comment_id": "770636419",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27823,
        "pr_file": "spring-context-indexer/src/main/java/org/springframework/context/index/processor/MetadataStore.java",
        "discussion_id": "770543206",
        "commented_code": "@@ -62,12 +62,9 @@ public void writeMetadata(CandidateComponentsMetadata metadata) throws IOExcepti\n \n \n \tprivate CandidateComponentsMetadata readMetadata(InputStream in) throws IOException {\n-\t\ttry {\n+\t\ttry (in) {",
        "comment_created_at": "2021-12-16T15:20:32+00:00",
        "comment_author": "sbrannen",
        "comment_body": ">Actually, I'd appreciate it if you could keep the one valid change and add inline documentation to the other locations to point out why try-with-resources should not be used there.\r\n\r\nOf course if you'd prefer to simply close this PR, that's also fine.\r\n\r\nI'll leave it up to you.",
        "pr_file_module": null
      },
      {
        "comment_id": "771144409",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27823,
        "pr_file": "spring-context-indexer/src/main/java/org/springframework/context/index/processor/MetadataStore.java",
        "discussion_id": "770543206",
        "commented_code": "@@ -62,12 +62,9 @@ public void writeMetadata(CandidateComponentsMetadata metadata) throws IOExcepti\n \n \n \tprivate CandidateComponentsMetadata readMetadata(InputStream in) throws IOException {\n-\t\ttry {\n+\t\ttry (in) {",
        "comment_created_at": "2021-12-17T06:52:20+00:00",
        "comment_author": "mdeinum",
        "comment_body": "Done. Left the one in place, placed a remark on the others. ",
        "pr_file_module": null
      },
      {
        "comment_id": "773286446",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27823,
        "pr_file": "spring-context-indexer/src/main/java/org/springframework/context/index/processor/MetadataStore.java",
        "discussion_id": "770543206",
        "commented_code": "@@ -62,12 +62,9 @@ public void writeMetadata(CandidateComponentsMetadata metadata) throws IOExcepti\n \n \n \tprivate CandidateComponentsMetadata readMetadata(InputStream in) throws IOException {\n-\t\ttry {\n+\t\ttry (in) {",
        "comment_created_at": "2021-12-21T16:38:20+00:00",
        "comment_author": "sbrannen",
        "comment_body": "Thanks for making the changes. That looks good now.",
        "pr_file_module": null
      }
    ]
  }
]