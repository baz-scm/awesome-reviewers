[
  {
    "discussion_id": "1791264218",
    "pr_number": 32097,
    "pr_file": "spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java",
    "created_at": "2024-10-08T06:20:57+00:00",
    "commented_code": "Assert.notNull(original, \"ServerHttpRequest is required\");\n \n \t\tthis.uri = original.getURI();\n-\t\tthis.headers = new HttpHeaders(original.getHeaders());\n+\t\t// original headers can be immutable, so create a copy\n+\t\tthis.headers = new HttpHeaders(new LinkedMultiValueMap<>(original.getHeaders()));",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1791264218",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 32097,
        "pr_file": "spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java",
        "discussion_id": "1791264218",
        "commented_code": "@@ -70,7 +71,8 @@ public DefaultServerHttpRequestBuilder(ServerHttpRequest original) {\n \t\tAssert.notNull(original, \"ServerHttpRequest is required\");\n \n \t\tthis.uri = original.getURI();\n-\t\tthis.headers = new HttpHeaders(original.getHeaders());\n+\t\t// original headers can be immutable, so create a copy\n+\t\tthis.headers = new HttpHeaders(new LinkedMultiValueMap<>(original.getHeaders()));",
        "comment_created_at": "2024-10-08T06:20:57+00:00",
        "comment_author": "JohnNiang",
        "comment_body": "If the headers is copied into LinkedMultiValueMap directly, it will break the case insensitive behavior of header names.\r\n\r\ne.g.: If the headers contain an entry `content-type: application/json`(HTTP2 requires header names with lowercase), and the result of `headers.getContentType()` or `headers.getFirst(\"Content-Type\")` will be null forever.\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1791430014",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 32097,
        "pr_file": "spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java",
        "discussion_id": "1791264218",
        "commented_code": "@@ -70,7 +71,8 @@ public DefaultServerHttpRequestBuilder(ServerHttpRequest original) {\n \t\tAssert.notNull(original, \"ServerHttpRequest is required\");\n \n \t\tthis.uri = original.getURI();\n-\t\tthis.headers = new HttpHeaders(original.getHeaders());\n+\t\t// original headers can be immutable, so create a copy\n+\t\tthis.headers = new HttpHeaders(new LinkedMultiValueMap<>(original.getHeaders()));",
        "comment_created_at": "2024-10-08T08:25:28+00:00",
        "comment_author": "bclozel",
        "comment_body": "Can you raise this as a new issue?",
        "pr_file_module": null
      },
      {
        "comment_id": "1791457377",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 32097,
        "pr_file": "spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java",
        "discussion_id": "1791264218",
        "commented_code": "@@ -70,7 +71,8 @@ public DefaultServerHttpRequestBuilder(ServerHttpRequest original) {\n \t\tAssert.notNull(original, \"ServerHttpRequest is required\");\n \n \t\tthis.uri = original.getURI();\n-\t\tthis.headers = new HttpHeaders(original.getHeaders());\n+\t\t// original headers can be immutable, so create a copy\n+\t\tthis.headers = new HttpHeaders(new LinkedMultiValueMap<>(original.getHeaders()));",
        "comment_created_at": "2024-10-08T08:41:04+00:00",
        "comment_author": "simonbasle",
        "comment_body": "indeed, thanks for the feedback! I've created issue #33666 to track and fix this in RC2",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "222440182",
    "pr_number": 1977,
    "pr_file": "spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java",
    "created_at": "2018-10-03T19:35:21+00:00",
    "commented_code": "Assert.isInstanceOf(String.class, key, \"Key must be a String-based header name\");\n \n \t\t\tCollection<String> values1 = servletResponse.getHeaders((String) key);\n+\t\t\tif (headersWritten) {\n+\t\t\t\treturn new ArrayList<>(values1);",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "222440182",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1977,
        "pr_file": "spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java",
        "discussion_id": "222440182",
        "commented_code": "@@ -153,6 +153,9 @@ public String getFirst(String headerName) {\n \t\t\tAssert.isInstanceOf(String.class, key, \"Key must be a String-based header name\");\n \n \t\t\tCollection<String> values1 = servletResponse.getHeaders((String) key);\n+\t\t\tif (headersWritten) {\n+\t\t\t\treturn new ArrayList<>(values1);",
        "comment_created_at": "2018-10-03T19:35:21+00:00",
        "comment_author": "bclozel",
        "comment_body": "without that change, I'm seeing duplicate response headers because both the native servlet response ones and the ones held by Spring's servlet response are added. Once the response is committed and headers written, reading headers from both yields duplicates. I think this is a bug uncovered by other changes in this PR.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "222441140",
    "pr_number": 1977,
    "pr_file": "spring-webflux/src/main/java/org/springframework/web/reactive/socket/server/support/HandshakeWebSocketService.java",
    "created_at": "2018-10-03T19:38:32+00:00",
    "commented_code": "@Nullable String protocol, Map<String, Object> attributes) {\n \n \t\tURI uri = request.getURI();\n-\t\tHttpHeaders headers = request.getHeaders();\n+\t\tHttpHeaders headers = new HttpHeaders();\n+\t\theaders.addAll(request.getHeaders());",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "222441140",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1977,
        "pr_file": "spring-webflux/src/main/java/org/springframework/web/reactive/socket/server/support/HandshakeWebSocketService.java",
        "discussion_id": "222441140",
        "commented_code": "@@ -272,7 +272,8 @@ private HandshakeInfo createHandshakeInfo(ServerWebExchange exchange, ServerHttp\n \t\t\t@Nullable String protocol, Map<String, Object> attributes) {\n \n \t\tURI uri = request.getURI();\n-\t\tHttpHeaders headers = request.getHeaders();\n+\t\tHttpHeaders headers = new HttpHeaders();\n+\t\theaders.addAll(request.getHeaders());",
        "comment_created_at": "2018-10-03T19:38:32+00:00",
        "comment_author": "bclozel",
        "comment_body": "As mentioned in the commit message, this is the only place where we actually need to clone the request headers.\r\nBecause native headers are often pooled by the server, those values are recycled by the time the HTTP handshake is done and those aren't available anymore during the websocket session.",
        "pr_file_module": null
      }
    ]
  }
]