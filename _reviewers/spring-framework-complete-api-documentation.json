[
  {
    "discussion_id": "2154202641",
    "pr_number": 35055,
    "pr_file": "spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java",
    "created_at": "2025-06-18T10:02:06+00:00",
    "commented_code": "return (this.bean.hashCode() * 31 + super.hashCode());\n \t}\n \n+\t/**\n+\t * Returns the description of this handler method.\n+\t * This method is used in log and error messages,\n+\t * so the returned description should typically include the method signature\n+\t * of the underlying handler method for clarity and debugging purposes.\n+\t */",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "2154202641",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 35055,
        "pr_file": "spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java",
        "discussion_id": "2154202641",
        "commented_code": "@@ -352,6 +352,12 @@ public int hashCode() {\n \t\treturn (this.bean.hashCode() * 31 + super.hashCode());\n \t}\n \n+\t/**\n+\t * Returns the description of this handler method.\n+\t * This method is used in log and error messages,\n+\t * so the returned description should typically include the method signature\n+\t * of the underlying handler method for clarity and debugging purposes.\n+\t */",
        "comment_created_at": "2025-06-18T10:02:06+00:00",
        "comment_author": "sbrannen",
        "comment_body": "```suggestion\r\n\t/**\r\n\t * Returns a concise description of this {@code HandlerMethod}, which is used\r\n\t * in log and error messages.\r\n\t * <p>The description should typically include the method signature of the\r\n\t * underlying handler method for clarity and debugging purposes.\r\n\t */\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2126235366",
    "pr_number": 34716,
    "pr_file": "spring-core/src/main/java/org/springframework/core/retry/RetryListener.java",
    "created_at": "2025-06-04T10:13:44+00:00",
    "commented_code": "+/*\n+ * Copyright 2002-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.core.retry;\n+\n+import org.springframework.core.retry.support.CompositeRetryListener;\n+\n+/**\n+ * An extension point that allows to inject code during key retry phases.\n+ *\n+ * <p>Typically registered in a {@link RetryTemplate}, and can be composed using\n+ * a {@link CompositeRetryListener}.\n+ *\n+ * @author Mahmoud Ben Hassine\n+ * @since 7.0\n+ * @see CompositeRetryListener\n+ */\n+public interface RetryListener {\n+\n+\t/**\n+\t * Called before every retry attempt.\n+\t */\n+\tdefault void beforeRetry(RetryExecution retryExecution) {",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "2126235366",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 34716,
        "pr_file": "spring-core/src/main/java/org/springframework/core/retry/RetryListener.java",
        "discussion_id": "2126235366",
        "commented_code": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2002-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.core.retry;\n+\n+import org.springframework.core.retry.support.CompositeRetryListener;\n+\n+/**\n+ * An extension point that allows to inject code during key retry phases.\n+ *\n+ * <p>Typically registered in a {@link RetryTemplate}, and can be composed using\n+ * a {@link CompositeRetryListener}.\n+ *\n+ * @author Mahmoud Ben Hassine\n+ * @since 7.0\n+ * @see CompositeRetryListener\n+ */\n+public interface RetryListener {\n+\n+\t/**\n+\t * Called before every retry attempt.\n+\t */\n+\tdefault void beforeRetry(RetryExecution retryExecution) {",
        "comment_created_at": "2025-06-04T10:13:44+00:00",
        "comment_author": "sbrannen",
        "comment_body": "Please document the `RetryExecution` parameter in all methods in this interface.",
        "pr_file_module": null
      },
      {
        "comment_id": "2126528300",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 34716,
        "pr_file": "spring-core/src/main/java/org/springframework/core/retry/RetryListener.java",
        "discussion_id": "2126235366",
        "commented_code": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2002-2025 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.core.retry;\n+\n+import org.springframework.core.retry.support.CompositeRetryListener;\n+\n+/**\n+ * An extension point that allows to inject code during key retry phases.\n+ *\n+ * <p>Typically registered in a {@link RetryTemplate}, and can be composed using\n+ * a {@link CompositeRetryListener}.\n+ *\n+ * @author Mahmoud Ben Hassine\n+ * @since 7.0\n+ * @see CompositeRetryListener\n+ */\n+public interface RetryListener {\n+\n+\t/**\n+\t * Called before every retry attempt.\n+\t */\n+\tdefault void beforeRetry(RetryExecution retryExecution) {",
        "comment_created_at": "2025-06-04T12:53:23+00:00",
        "comment_author": "fmbenhassine",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "827070171",
    "pr_number": 28131,
    "pr_file": "spring-context/src/main/java/org/springframework/context/nativex/NativeConfigurationGenerator.java",
    "created_at": "2022-03-15T14:53:43+00:00",
    "commented_code": "+/*\n+ * Copyright 2002-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.context.nativex;\n+\n+import org.springframework.aot.hint.RuntimeHints;\n+\n+public interface NativeConfigurationGenerator {",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "827070171",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 28131,
        "pr_file": "spring-context/src/main/java/org/springframework/context/nativex/NativeConfigurationGenerator.java",
        "discussion_id": "827070171",
        "commented_code": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2002-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.context.nativex;\n+\n+import org.springframework.aot.hint.RuntimeHints;\n+\n+public interface NativeConfigurationGenerator {",
        "comment_created_at": "2022-03-15T14:53:43+00:00",
        "comment_author": "sbrannen",
        "comment_body": "Add class-level Javadoc.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1539400780",
    "pr_number": 26478,
    "pr_file": "spring-expression/src/main/java/org/springframework/expression/IndexAccessor.java",
    "created_at": "2024-03-26T14:46:15+00:00",
    "commented_code": "+/*\n+ * Copyright 2002-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.expression;\n+\n+import org.springframework.expression.spel.ast.ValueRef;\n+import org.springframework.lang.Nullable;\n+\n+/**\n+ * A index accessor is able to read from (and possibly write to) an array's elements.",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1539400780",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 26478,
        "pr_file": "spring-expression/src/main/java/org/springframework/expression/IndexAccessor.java",
        "discussion_id": "1539400780",
        "commented_code": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2002-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.expression;\n+\n+import org.springframework.expression.spel.ast.ValueRef;\n+import org.springframework.lang.Nullable;\n+\n+/**\n+ * A index accessor is able to read from (and possibly write to) an array's elements.",
        "comment_created_at": "2024-03-26T14:46:15+00:00",
        "comment_author": "sbrannen",
        "comment_body": "Indexing it not limited to arrays.\r\n\r\nIn addition, the rest of the Javadoc in this class was copied from `PropertyAccessor` and needs to updated to discuss indexing instead of property access.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1050810926",
    "pr_number": 29697,
    "pr_file": "spring-beans/src/main/java/org/springframework/beans/factory/xml/ResourceEntityResolver.java",
    "created_at": "2022-12-16T14:24:02+00:00",
    "commented_code": "}\n \t\t\t}\n \t\t\telse if (systemId.endsWith(DTD_SUFFIX) || systemId.endsWith(XSD_SUFFIX)) {\n-\t\t\t\t// External dtd/xsd lookup via https even for canonical http declaration\n-\t\t\t\tString url = systemId;\n-\t\t\t\tif (url.startsWith(\"http:\")) {\n-\t\t\t\t\turl = \"https:\" + url.substring(5);\n-\t\t\t\t}\n-\t\t\t\ttry {\n-\t\t\t\t\tsource = new InputSource(ResourceUtils.toURL(url).openStream());\n-\t\t\t\t\tsource.setPublicId(publicId);\n-\t\t\t\t\tsource.setSystemId(systemId);\n-\t\t\t\t}\n-\t\t\t\tcatch (IOException ex) {\n-\t\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\t\tlogger.debug(\"Could not resolve XML entity [\" + systemId + \"] through URL [\" + url + \"]\", ex);\n-\t\t\t\t\t}\n-\t\t\t\t\t// Fall back to the parser's default behavior.\n-\t\t\t\t\tsource = null;\n-\t\t\t\t}\n+\t\t\t\tsource = resolveEntityFallbackForSchemas(publicId, systemId);\n \t\t\t}\n \t\t}\n \n \t\treturn source;\n \t}\n \n+\t/**\n+\t * A fallback method for {@link #resolveEntity(String, String)} used when a \"schema\" entity (DTD or XSD) couldn't\n+\t * be resolved as a local resource. The default behavior is to perform a remote resolution over https.\n+\t * Override this method if this behavior is not desirable.\n+\t * @param publicId the public identifier of the external entity being referenced, or null if none was supplied.\n+\t * @param systemId the system identifier of the external entity being referenced.\n+\t * @return an InputSource object describing the new input source, or null to request that the\n+\t * parser open a regular URI connection to the system identifier.\n+\t */",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1050810926",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 29697,
        "pr_file": "spring-beans/src/main/java/org/springframework/beans/factory/xml/ResourceEntityResolver.java",
        "discussion_id": "1050810926",
        "commented_code": "@@ -110,27 +110,46 @@ public InputSource resolveEntity(@Nullable String publicId, @Nullable String sys\n \t\t\t\t}\n \t\t\t}\n \t\t\telse if (systemId.endsWith(DTD_SUFFIX) || systemId.endsWith(XSD_SUFFIX)) {\n-\t\t\t\t// External dtd/xsd lookup via https even for canonical http declaration\n-\t\t\t\tString url = systemId;\n-\t\t\t\tif (url.startsWith(\"http:\")) {\n-\t\t\t\t\turl = \"https:\" + url.substring(5);\n-\t\t\t\t}\n-\t\t\t\ttry {\n-\t\t\t\t\tsource = new InputSource(ResourceUtils.toURL(url).openStream());\n-\t\t\t\t\tsource.setPublicId(publicId);\n-\t\t\t\t\tsource.setSystemId(systemId);\n-\t\t\t\t}\n-\t\t\t\tcatch (IOException ex) {\n-\t\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\t\tlogger.debug(\"Could not resolve XML entity [\" + systemId + \"] through URL [\" + url + \"]\", ex);\n-\t\t\t\t\t}\n-\t\t\t\t\t// Fall back to the parser's default behavior.\n-\t\t\t\t\tsource = null;\n-\t\t\t\t}\n+\t\t\t\tsource = resolveEntityFallbackForSchemas(publicId, systemId);\n \t\t\t}\n \t\t}\n \n \t\treturn source;\n \t}\n \n+\t/**\n+\t * A fallback method for {@link #resolveEntity(String, String)} used when a \"schema\" entity (DTD or XSD) couldn't\n+\t * be resolved as a local resource. The default behavior is to perform a remote resolution over https.\n+\t * Override this method if this behavior is not desirable.\n+\t * @param publicId the public identifier of the external entity being referenced, or null if none was supplied.\n+\t * @param systemId the system identifier of the external entity being referenced.\n+\t * @return an InputSource object describing the new input source, or null to request that the\n+\t * parser open a regular URI connection to the system identifier.\n+\t */",
        "comment_created_at": "2022-12-16T14:24:02+00:00",
        "comment_author": "sbrannen",
        "comment_body": "In Spring Framework, we attempt to wrap Javadoc around 90 characters, and we never end a `@param` or `@return` description with a period `.` unless the description includes sentences (which we try avoid).",
        "pr_file_module": null
      },
      {
        "comment_id": "1050908542",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 29697,
        "pr_file": "spring-beans/src/main/java/org/springframework/beans/factory/xml/ResourceEntityResolver.java",
        "discussion_id": "1050810926",
        "commented_code": "@@ -110,27 +110,46 @@ public InputSource resolveEntity(@Nullable String publicId, @Nullable String sys\n \t\t\t\t}\n \t\t\t}\n \t\t\telse if (systemId.endsWith(DTD_SUFFIX) || systemId.endsWith(XSD_SUFFIX)) {\n-\t\t\t\t// External dtd/xsd lookup via https even for canonical http declaration\n-\t\t\t\tString url = systemId;\n-\t\t\t\tif (url.startsWith(\"http:\")) {\n-\t\t\t\t\turl = \"https:\" + url.substring(5);\n-\t\t\t\t}\n-\t\t\t\ttry {\n-\t\t\t\t\tsource = new InputSource(ResourceUtils.toURL(url).openStream());\n-\t\t\t\t\tsource.setPublicId(publicId);\n-\t\t\t\t\tsource.setSystemId(systemId);\n-\t\t\t\t}\n-\t\t\t\tcatch (IOException ex) {\n-\t\t\t\t\tif (logger.isDebugEnabled()) {\n-\t\t\t\t\t\tlogger.debug(\"Could not resolve XML entity [\" + systemId + \"] through URL [\" + url + \"]\", ex);\n-\t\t\t\t\t}\n-\t\t\t\t\t// Fall back to the parser's default behavior.\n-\t\t\t\t\tsource = null;\n-\t\t\t\t}\n+\t\t\t\tsource = resolveEntityFallbackForSchemas(publicId, systemId);\n \t\t\t}\n \t\t}\n \n \t\treturn source;\n \t}\n \n+\t/**\n+\t * A fallback method for {@link #resolveEntity(String, String)} used when a \"schema\" entity (DTD or XSD) couldn't\n+\t * be resolved as a local resource. The default behavior is to perform a remote resolution over https.\n+\t * Override this method if this behavior is not desirable.\n+\t * @param publicId the public identifier of the external entity being referenced, or null if none was supplied.\n+\t * @param systemId the system identifier of the external entity being referenced.\n+\t * @return an InputSource object describing the new input source, or null to request that the\n+\t * parser open a regular URI connection to the system identifier.\n+\t */",
        "comment_created_at": "2022-12-16T15:57:04+00:00",
        "comment_author": "simonbasle",
        "comment_body": "done, and integrated your code suggestions in the change",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1062663968",
    "pr_number": 29721,
    "pr_file": "spring-test/src/main/java/org/springframework/test/web/client/response/ExecutingResponseCreator.java",
    "created_at": "2023-01-05T16:29:16+00:00",
    "commented_code": "+/*\n+ * Copyright 2002-2023 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.test.web.client.response;\n+\n+import java.io.IOException;\n+\n+import org.springframework.http.client.ClientHttpRequest;\n+import org.springframework.http.client.ClientHttpRequestFactory;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.mock.http.client.MockClientHttpRequest;\n+import org.springframework.test.web.client.ResponseCreator;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StreamUtils;\n+\n+/**\n+ * A {@code ResponseCreator} which delegates to a {@link ClientHttpRequestFactory}\n+ * to perform the request and return the associated response.",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1062663968",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 29721,
        "pr_file": "spring-test/src/main/java/org/springframework/test/web/client/response/ExecutingResponseCreator.java",
        "discussion_id": "1062663968",
        "commented_code": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2002-2023 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.test.web.client.response;\n+\n+import java.io.IOException;\n+\n+import org.springframework.http.client.ClientHttpRequest;\n+import org.springframework.http.client.ClientHttpRequestFactory;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.mock.http.client.MockClientHttpRequest;\n+import org.springframework.test.web.client.ResponseCreator;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StreamUtils;\n+\n+/**\n+ * A {@code ResponseCreator} which delegates to a {@link ClientHttpRequestFactory}\n+ * to perform the request and return the associated response.",
        "comment_created_at": "2023-01-05T16:29:16+00:00",
        "comment_author": "rstoyanchev",
        "comment_body": "I think it would be good to have a second sentence that starts with \"This is useful when...\". As far as I can tell it's about testing code that calls multiple remote service, where some need to be called rather than mocked. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1063424393",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 29721,
        "pr_file": "spring-test/src/main/java/org/springframework/test/web/client/response/ExecutingResponseCreator.java",
        "discussion_id": "1062663968",
        "commented_code": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2002-2023 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.test.web.client.response;\n+\n+import java.io.IOException;\n+\n+import org.springframework.http.client.ClientHttpRequest;\n+import org.springframework.http.client.ClientHttpRequestFactory;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.mock.http.client.MockClientHttpRequest;\n+import org.springframework.test.web.client.ResponseCreator;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StreamUtils;\n+\n+/**\n+ * A {@code ResponseCreator} which delegates to a {@link ClientHttpRequestFactory}\n+ * to perform the request and return the associated response.",
        "comment_created_at": "2023-01-06T13:12:25+00:00",
        "comment_author": "simonbasle",
        "comment_body": "thanks for the feedback. I've addressed the documentation and discoverability suggestions.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "85366066",
    "pr_number": 1201,
    "pr_file": "spring-web/src/main/java/org/springframework/web/multipart/reactive/Part.java",
    "created_at": "2016-10-27T15:43:45+00:00",
    "commented_code": "+/*\n+ * Copyright 2002-2016 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.web.multipart.reactive;\n+\n+import java.io.File;\n+import java.util.Optional;\n+\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import org.springframework.core.io.buffer.DataBuffer;\n+import org.springframework.http.HttpHeaders;\n+\n+/**\n+ * A representation of a part received in a multipart request. Could contain a file, the\n+ * string or json value of a parameter.\n+ *\n+ * @author Sebastien Deleuze\n+ * @since 5.0\n+ */\n+public interface Part {\n+\n+\t/**\n+\t * @return the headers of this part\n+\t */\n+\tHttpHeaders getHeaders();\n+\n+\t/**\n+\t * @return the name of the parameter in the multipart form\n+\t */\n+\tString getName();\n+\n+\t/**\n+\t * @return optionally the filename if the part contains a file\n+\t */\n+\tOptional<String> getFilename();\n+\n+\t/**\n+\t * @return the content of the part as a String\n+\t */\n+\tMono<String> getValue();",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "85366066",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1201,
        "pr_file": "spring-web/src/main/java/org/springframework/web/multipart/reactive/Part.java",
        "discussion_id": "85366066",
        "commented_code": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2002-2016 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.web.multipart.reactive;\n+\n+import java.io.File;\n+import java.util.Optional;\n+\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import org.springframework.core.io.buffer.DataBuffer;\n+import org.springframework.http.HttpHeaders;\n+\n+/**\n+ * A representation of a part received in a multipart request. Could contain a file, the\n+ * string or json value of a parameter.\n+ *\n+ * @author Sebastien Deleuze\n+ * @since 5.0\n+ */\n+public interface Part {\n+\n+\t/**\n+\t * @return the headers of this part\n+\t */\n+\tHttpHeaders getHeaders();\n+\n+\t/**\n+\t * @return the name of the parameter in the multipart form\n+\t */\n+\tString getName();\n+\n+\t/**\n+\t * @return optionally the filename if the part contains a file\n+\t */\n+\tOptional<String> getFilename();\n+\n+\t/**\n+\t * @return the content of the part as a String\n+\t */\n+\tMono<String> getValue();",
        "comment_created_at": "2016-10-27T15:43:45+00:00",
        "comment_author": "rstoyanchev",
        "comment_body": "The Javadoc should mention the algorithm to determine the charset and what if there is no indication, is there a natural default or does it error out? \n\nAlso as this is a shortcut method it would make sense to call it `getContentAsString()`. Technically the method could be even left out but It helps to support form field values.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "509979906",
    "pr_number": 25647,
    "pr_file": "spring-web/src/main/java/org/springframework/http/ContentDisposition.java",
    "created_at": "2020-10-22T08:35:56+00:00",
    "commented_code": "return new BuilderImpl(type);\n \t}\n \n+\t/**\n+\t * Return a builder for a {@code ContentDisposition} with\n+\t * the {@link #ATTACHMENT attachment} type.\n+\t * @return the builder",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "509979906",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 25647,
        "pr_file": "spring-web/src/main/java/org/springframework/http/ContentDisposition.java",
        "discussion_id": "509979906",
        "commented_code": "@@ -264,6 +276,33 @@ public static Builder builder(String type) {\n \t\treturn new BuilderImpl(type);\n \t}\n \n+\t/**\n+\t * Return a builder for a {@code ContentDisposition} with\n+\t * the {@link #ATTACHMENT attachment} type.\n+\t * @return the builder",
        "comment_created_at": "2020-10-22T08:35:56+00:00",
        "comment_author": "rstoyanchev",
        "comment_body": "Please add `@since 5.3` tags to all new methods.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "370562570",
    "pr_number": 24406,
    "pr_file": "spring-web/src/main/java/org/springframework/http/RequestEntity.java",
    "created_at": "2020-01-24T10:20:56+00:00",
    "commented_code": "return new DefaultBodyBuilder(method, url);\n \t}\n \n+\t/**\n+\t * Create a builder with the given method and given string base uri template.\n+\t * @param method the HTTP method (GET, POST, etc)\n+\t * @param uri the uri\n+\t * @return the created builder\n+\t */\n+\tpublic static BodyBuilder method(HttpMethod method, String uri) {\n+\t\treturn new DefaultBodyBuilder(method, uri);\n+\t}",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "370562570",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24406,
        "pr_file": "spring-web/src/main/java/org/springframework/http/RequestEntity.java",
        "discussion_id": "370562570",
        "commented_code": "@@ -241,6 +284,17 @@ public static BodyBuilder method(HttpMethod method, URI url) {\n \t\treturn new DefaultBodyBuilder(method, url);\n \t}\n \n+\t/**\n+\t * Create a builder with the given method and given string base uri template.\n+\t * @param method the HTTP method (GET, POST, etc)\n+\t * @param uri the uri\n+\t * @return the created builder\n+\t */\n+\tpublic static BodyBuilder method(HttpMethod method, String uri) {\n+\t\treturn new DefaultBodyBuilder(method, uri);\n+\t}",
        "comment_created_at": "2020-01-24T10:20:56+00:00",
        "comment_author": "rstoyanchev",
        "comment_body": "All methods that take a `String` uri need to mention in the Javadoc that this is a URI template that may contain URI variable placeholders and mention that URI variables can be provided through the builder either as a vararg or as a map (probably best to `@link` to the corresponding builder methods). \r\n\r\nIt be useful also to link to `getUrl()` which would expand through `DefaultUriBuilderFactory` and encode as explained in `DefaultUriBuilderFactory#setEncodingMode`, unless the `UriTemplateHandler` is provided.\r\n\r\nTo avoid repeating this in many places, you could document at the class level that there are `URI` and `String` uri based factory methods, and explain how the `String` uri variants work. Then refer to class-level Javadoc from each factory method.",
        "pr_file_module": null
      },
      {
        "comment_id": "371631543",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24406,
        "pr_file": "spring-web/src/main/java/org/springframework/http/RequestEntity.java",
        "discussion_id": "370562570",
        "commented_code": "@@ -241,6 +284,17 @@ public static BodyBuilder method(HttpMethod method, URI url) {\n \t\treturn new DefaultBodyBuilder(method, url);\n \t}\n \n+\t/**\n+\t * Create a builder with the given method and given string base uri template.\n+\t * @param method the HTTP method (GET, POST, etc)\n+\t * @param uri the uri\n+\t * @return the created builder\n+\t */\n+\tpublic static BodyBuilder method(HttpMethod method, String uri) {\n+\t\treturn new DefaultBodyBuilder(method, uri);\n+\t}",
        "comment_created_at": "2020-01-28T06:47:10+00:00",
        "comment_author": "parviz-93",
        "comment_body": "Sorry for pause. I had a holidays.\r\nI added javadocs, but maybe also added grammatical errors, because I'm not a native English speaker",
        "pr_file_module": null
      },
      {
        "comment_id": "373446063",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24406,
        "pr_file": "spring-web/src/main/java/org/springframework/http/RequestEntity.java",
        "discussion_id": "370562570",
        "commented_code": "@@ -241,6 +284,17 @@ public static BodyBuilder method(HttpMethod method, URI url) {\n \t\treturn new DefaultBodyBuilder(method, url);\n \t}\n \n+\t/**\n+\t * Create a builder with the given method and given string base uri template.\n+\t * @param method the HTTP method (GET, POST, etc)\n+\t * @param uri the uri\n+\t * @return the created builder\n+\t */\n+\tpublic static BodyBuilder method(HttpMethod method, String uri) {\n+\t\treturn new DefaultBodyBuilder(method, uri);\n+\t}",
        "comment_created_at": "2020-01-31T11:59:24+00:00",
        "comment_author": "rstoyanchev",
        "comment_body": "Okay thanks.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "370564941",
    "pr_number": 24406,
    "pr_file": "spring-web/src/main/java/org/springframework/http/RequestEntity.java",
    "created_at": "2020-01-24T10:26:36+00:00",
    "commented_code": "* @return the URL as a {@code URI}\n \t */\n \tpublic URI getUrl() {\n-\t\treturn this.url;\n+\t\tif (uri == null) {\n+\t\t\treturn this.url;\n+\t\t}\n+\t\treturn DEFAULT_URI_BUILDER_FACTORY.expand(uri, uriVariables);\n+\t}\n+\n+\t/**\n+\t * Return the URL of the request.\n+\t * @return the URL as a {@code URI}\n+\t */\n+\tpublic URI getUrl(UriTemplateHandler uriTemplateHandler) {\n+\t\tif (uri == null) {\n+\t\t\treturn this.url;\n+\t\t}\n+\t\treturn uriTemplateHandler.expand(uri, uriVariables);",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "370564941",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24406,
        "pr_file": "spring-web/src/main/java/org/springframework/http/RequestEntity.java",
        "discussion_id": "370564941",
        "commented_code": "@@ -169,9 +197,24 @@ public HttpMethod getMethod() {\n \t * @return the URL as a {@code URI}\n \t */\n \tpublic URI getUrl() {\n-\t\treturn this.url;\n+\t\tif (uri == null) {\n+\t\t\treturn this.url;\n+\t\t}\n+\t\treturn DEFAULT_URI_BUILDER_FACTORY.expand(uri, uriVariables);\n+\t}\n+\n+\t/**\n+\t * Return the URL of the request.\n+\t * @return the URL as a {@code URI}\n+\t */\n+\tpublic URI getUrl(UriTemplateHandler uriTemplateHandler) {\n+\t\tif (uri == null) {\n+\t\t\treturn this.url;\n+\t\t}\n+\t\treturn uriTemplateHandler.expand(uri, uriVariables);",
        "comment_created_at": "2020-01-24T10:26:36+00:00",
        "comment_author": "rstoyanchev",
        "comment_body": "All new public methods should have `@since 5.3` tags in the Javadoc.",
        "pr_file_module": null
      }
    ]
  }
]