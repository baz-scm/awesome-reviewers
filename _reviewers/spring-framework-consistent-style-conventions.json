[
  {
    "discussion_id": "1980926471",
    "pr_number": 34489,
    "pr_file": ".editorconfig",
    "created_at": "2025-03-05T08:32:00+00:00",
    "commented_code": "root = true\n \n-[*.{adoc,bat,groovy,html,java,js,jsp,kt,kts,md,properties,py,rb,sh,sql,svg,txt,xml,xsd}]\n+[*]\n charset = utf-8\n+end_of_line = lf\n+indent_style = space",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1980926471",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 34489,
        "pr_file": ".editorconfig",
        "discussion_id": "1980926471",
        "commented_code": "@@ -1,10 +1,16 @@\n root = true\n \n-[*.{adoc,bat,groovy,html,java,js,jsp,kt,kts,md,properties,py,rb,sh,sql,svg,txt,xml,xsd}]\n+[*]\n charset = utf-8\n+end_of_line = lf\n+indent_style = space",
        "comment_created_at": "2025-03-05T08:32:00+00:00",
        "comment_author": "Pankraz76",
        "comment_body": "is the intend space for all others as it was only specified on an explicit set?\r\n```suggestion\r\nindent_style = tab\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1227800784",
    "pr_number": 30651,
    "pr_file": "spring-test/spring-test.gradle",
    "created_at": "2023-06-13T09:13:04+00:00",
    "commented_code": "optional(\"io.projectreactor:reactor-test\")\n \toptional(\"org.jetbrains.kotlinx:kotlinx-coroutines-core\")\n \toptional(\"org.jetbrains.kotlinx:kotlinx-coroutines-reactor\")\n+\toptional('io.micrometer:micrometer-observation')\n+\toptional('io.micrometer:context-propagation')",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1227800784",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 30651,
        "pr_file": "spring-test/spring-test.gradle",
        "discussion_id": "1227800784",
        "commented_code": "@@ -50,6 +50,8 @@ dependencies {\n \toptional(\"io.projectreactor:reactor-test\")\n \toptional(\"org.jetbrains.kotlinx:kotlinx-coroutines-core\")\n \toptional(\"org.jetbrains.kotlinx:kotlinx-coroutines-reactor\")\n+\toptional('io.micrometer:micrometer-observation')\n+\toptional('io.micrometer:context-propagation')",
        "comment_created_at": "2023-06-13T09:13:04+00:00",
        "comment_author": "sbrannen",
        "comment_body": "Please sort dependencies alphabetically in the build script.",
        "pr_file_module": null
      },
      {
        "comment_id": "1227881360",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 30651,
        "pr_file": "spring-test/spring-test.gradle",
        "discussion_id": "1227800784",
        "commented_code": "@@ -50,6 +50,8 @@ dependencies {\n \toptional(\"io.projectreactor:reactor-test\")\n \toptional(\"org.jetbrains.kotlinx:kotlinx-coroutines-core\")\n \toptional(\"org.jetbrains.kotlinx:kotlinx-coroutines-reactor\")\n+\toptional('io.micrometer:micrometer-observation')\n+\toptional('io.micrometer:context-propagation')",
        "comment_created_at": "2023-06-13T10:12:41+00:00",
        "comment_author": "marcingrzejszczak",
        "comment_body": "I've changed the order",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "374638248",
    "pr_number": 24398,
    "pr_file": "src/docs/asciidoc/data-access.adoc",
    "created_at": "2020-02-04T12:20:55+00:00",
    "commented_code": "If the last two snippets of code actually existed in the same application, it would make\n-sense to remove the duplication present in the two `RowMapper` anonymous inner classes\n-and extract them out into a single class (typically a `static` nested class) that could\n-then be referenced by DAO methods as needed. For example, it may be better to write the\n+sense to remove the duplication present in the two `RowMapper` lambda expressions and\n+extract them out into a single expression or class (typically a `static` nested class) that\n+could then be referenced by DAO methods as needed. For example, it may be better to write the\n preceding code snippet as follows:\n \n [source,java,indent=0,subs=\"verbatim,quotes\",role=\"primary\"]\n .Java\n ----\n \tpublic List<Actor> findAllActors() {\n-\t\treturn this.jdbcTemplate.query( \"select first_name, last_name from t_actor\", new ActorMapper());\n+\t\treturn this.jdbcTemplate.query( \"select first_name, last_name from t_actor\", getActorMapper());\n \t}\n \n-\tprivate static final class ActorMapper implements RowMapper<Actor> {\n-\n-\t\tpublic Actor mapRow(ResultSet rs, int rowNum) throws SQLException {\n+\tprivate RowMapper<Actor> getActorMapper() {",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "374638248",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24398,
        "pr_file": "src/docs/asciidoc/data-access.adoc",
        "discussion_id": "374638248",
        "commented_code": "@@ -2777,26 +2774,25 @@ The following query finds and populates a number of domain objects:\n \n \n If the last two snippets of code actually existed in the same application, it would make\n-sense to remove the duplication present in the two `RowMapper` anonymous inner classes\n-and extract them out into a single class (typically a `static` nested class) that could\n-then be referenced by DAO methods as needed. For example, it may be better to write the\n+sense to remove the duplication present in the two `RowMapper` lambda expressions and\n+extract them out into a single expression or class (typically a `static` nested class) that\n+could then be referenced by DAO methods as needed. For example, it may be better to write the\n preceding code snippet as follows:\n \n [source,java,indent=0,subs=\"verbatim,quotes\",role=\"primary\"]\n .Java\n ----\n \tpublic List<Actor> findAllActors() {\n-\t\treturn this.jdbcTemplate.query( \"select first_name, last_name from t_actor\", new ActorMapper());\n+\t\treturn this.jdbcTemplate.query( \"select first_name, last_name from t_actor\", getActorMapper());\n \t}\n \n-\tprivate static final class ActorMapper implements RowMapper<Actor> {\n-\n-\t\tpublic Actor mapRow(ResultSet rs, int rowNum) throws SQLException {\n+\tprivate RowMapper<Actor> getActorMapper() {",
        "comment_created_at": "2020-02-04T12:20:55+00:00",
        "comment_author": "sbrannen",
        "comment_body": "The `RowMapper` implementation is stateless. Therefore, please store a single reference to it in a `final` field and remove the `getActorMapper()` method.",
        "pr_file_module": null
      },
      {
        "comment_id": "375638364",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24398,
        "pr_file": "src/docs/asciidoc/data-access.adoc",
        "discussion_id": "374638248",
        "commented_code": "@@ -2777,26 +2774,25 @@ The following query finds and populates a number of domain objects:\n \n \n If the last two snippets of code actually existed in the same application, it would make\n-sense to remove the duplication present in the two `RowMapper` anonymous inner classes\n-and extract them out into a single class (typically a `static` nested class) that could\n-then be referenced by DAO methods as needed. For example, it may be better to write the\n+sense to remove the duplication present in the two `RowMapper` lambda expressions and\n+extract them out into a single expression or class (typically a `static` nested class) that\n+could then be referenced by DAO methods as needed. For example, it may be better to write the\n preceding code snippet as follows:\n \n [source,java,indent=0,subs=\"verbatim,quotes\",role=\"primary\"]\n .Java\n ----\n \tpublic List<Actor> findAllActors() {\n-\t\treturn this.jdbcTemplate.query( \"select first_name, last_name from t_actor\", new ActorMapper());\n+\t\treturn this.jdbcTemplate.query( \"select first_name, last_name from t_actor\", getActorMapper());\n \t}\n \n-\tprivate static final class ActorMapper implements RowMapper<Actor> {\n-\n-\t\tpublic Actor mapRow(ResultSet rs, int rowNum) throws SQLException {\n+\tprivate RowMapper<Actor> getActorMapper() {",
        "comment_created_at": "2020-02-06T04:44:57+00:00",
        "comment_author": "maxxedev",
        "comment_body": "Ok, stored as instance field `actorRowMapper`. Please let me know if a static field `ACTOR_ROW_MAPPER` is preferred",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "374638655",
    "pr_number": 24398,
    "pr_file": "src/docs/asciidoc/data-access.adoc",
    "created_at": "2020-02-04T12:21:52+00:00",
    "commented_code": "final String name = \"Rob\";\n \n \tKeyHolder keyHolder = new GeneratedKeyHolder();\n-\tjdbcTemplate.update(\n-\t\tnew PreparedStatementCreator() {\n-\t\t\tpublic PreparedStatement createPreparedStatement(Connection connection) throws SQLException {\n-\t\t\t\tPreparedStatement ps = connection.prepareStatement(INSERT_SQL, new String[] {\"id\"});\n-\t\t\t\tps.setString(1, name);\n-\t\t\t\treturn ps;\n-\t\t\t}\n-\t\t},\n-\t\tkeyHolder);\n+\tPreparedStatementCreator statementCreator = connection -> {\n+\t\tPreparedStatement ps = connection.prepareStatement(INSERT_SQL, new String[] { \"id\" });\n+\t\tps.setString(1, name);\n+\t\treturn ps;\n+\t};\n+\tjdbcTemplate.update(statementCreator, keyHolder);",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "374638655",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24398,
        "pr_file": "src/docs/asciidoc/data-access.adoc",
        "discussion_id": "374638655",
        "commented_code": "@@ -3562,15 +3558,12 @@ on Oracle but may not work on other platforms:\n \tfinal String name = \"Rob\";\n \n \tKeyHolder keyHolder = new GeneratedKeyHolder();\n-\tjdbcTemplate.update(\n-\t\tnew PreparedStatementCreator() {\n-\t\t\tpublic PreparedStatement createPreparedStatement(Connection connection) throws SQLException {\n-\t\t\t\tPreparedStatement ps = connection.prepareStatement(INSERT_SQL, new String[] {\"id\"});\n-\t\t\t\tps.setString(1, name);\n-\t\t\t\treturn ps;\n-\t\t\t}\n-\t\t},\n-\t\tkeyHolder);\n+\tPreparedStatementCreator statementCreator = connection -> {\n+\t\tPreparedStatement ps = connection.prepareStatement(INSERT_SQL, new String[] { \"id\" });\n+\t\tps.setString(1, name);\n+\t\treturn ps;\n+\t};\n+\tjdbcTemplate.update(statementCreator, keyHolder);",
        "comment_created_at": "2020-02-04T12:21:52+00:00",
        "comment_author": "sbrannen",
        "comment_body": "Please inline the lambda expression.",
        "pr_file_module": null
      }
    ]
  }
]