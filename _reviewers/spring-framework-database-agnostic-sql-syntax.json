[
  {
    "discussion_id": "397689314",
    "pr_number": 24013,
    "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java",
    "created_at": "2020-03-25T08:48:51+00:00",
    "commented_code": "/** Collection of TableParameterMetaData objects. */\n \tprivate List<TableParameterMetaData> tableParameterMetaData = new ArrayList<>();\n \n+\t/** the string used to quote SQL identifiers. */\n+\tprivate String identifierQuoteString = \"\";",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "397689314",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24013,
        "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java",
        "discussion_id": "397689314",
        "commented_code": "@@ -76,6 +76,8 @@\n \t/** Collection of TableParameterMetaData objects. */\n \tprivate List<TableParameterMetaData> tableParameterMetaData = new ArrayList<>();\n \n+\t/** the string used to quote SQL identifiers. */\n+\tprivate String identifierQuoteString = \"\";",
        "comment_created_at": "2020-03-25T08:48:51+00:00",
        "comment_author": "foldvari",
        "comment_body": "There is at least one RDBMS (MS SQL) which uses different characters for opening and closing. ( [identifier] )",
        "pr_file_module": null
      },
      {
        "comment_id": "397791309",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24013,
        "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java",
        "discussion_id": "397689314",
        "commented_code": "@@ -76,6 +76,8 @@\n \t/** Collection of TableParameterMetaData objects. */\n \tprivate List<TableParameterMetaData> tableParameterMetaData = new ArrayList<>();\n \n+\t/** the string used to quote SQL identifiers. */\n+\tprivate String identifierQuoteString = \"\";",
        "comment_created_at": "2020-03-25T11:42:37+00:00",
        "comment_author": "kitaisreal",
        "comment_body": "Could you please provide link to documentation where it is mentioned ? I could only find this https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/quoted-identifiers?view=sql-server-ver15. \r\nWe are getting this identifier to quote SQL from database metadata https://docs.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getIdentifierQuoteString%28%29. If this class does not support case where there are 2 different characters to quote SQL identifiers, we also could not.",
        "pr_file_module": null
      },
      {
        "comment_id": "398506850",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24013,
        "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java",
        "discussion_id": "397689314",
        "commented_code": "@@ -76,6 +76,8 @@\n \t/** Collection of TableParameterMetaData objects. */\n \tprivate List<TableParameterMetaData> tableParameterMetaData = new ArrayList<>();\n \n+\t/** the string used to quote SQL identifiers. */\n+\tprivate String identifierQuoteString = \"\";",
        "comment_created_at": "2020-03-26T11:41:16+00:00",
        "comment_author": "foldvari",
        "comment_body": "Thanks for the links to the documentation. It seems that the driver takes care about switching on the support of quoted identifiers (QUOTED_IDENTIFIER) so the change will work with MS SQL as well.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1315101563",
    "pr_number": 24013,
    "pr_file": "spring-jdbc/src/test/java/org/springframework/jdbc/core/simple/SimpleJdbcInsertTests.java",
    "created_at": "2023-09-04T16:20:08+00:00",
    "commented_code": "verify(resultSet).close();\n \t}\n \n+\t@Test\n+\tpublic void testSimpleJdbcInsert() {\n+\t\tSimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(dataSource).withTableName(\"T\").usingColumns(\"F\", \"S\");\n+\t\tjdbcInsert.compile();\n+\t\tString expected = \"INSERT INTO T (F, S) VALUES(?, ?)\";\n+\t\tString actual = jdbcInsert.getInsertString();\n+\t\tassertThat(actual).isEqualTo(expected);\n+\t}\n+\n+\t@Test\n+\tpublic void testSimpleJdbcInsertWithEscapingWithSchemaName() throws Exception {\n+\t\tSimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(dataSource).withSchemaName(\"S\").withTableName(\"T\").usingColumns(\"F\", \"S\").usingEscaping(true);\n+\n+\t\tgiven(databaseMetaData.getIdentifierQuoteString()).willReturn(\"`\");\n+\n+\t\tjdbcInsert.compile();\n+\t\tString expected = \"INSERT INTO `S.T` (`F`, `S`) VALUES(?, ?)\";",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1315101563",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24013,
        "pr_file": "spring-jdbc/src/test/java/org/springframework/jdbc/core/simple/SimpleJdbcInsertTests.java",
        "discussion_id": "1315101563",
        "commented_code": "@@ -81,4 +82,36 @@ public void testNoSuchTable() throws Exception {\n \t\tverify(resultSet).close();\n \t}\n \n+\t@Test\n+\tpublic void testSimpleJdbcInsert() {\n+\t\tSimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(dataSource).withTableName(\"T\").usingColumns(\"F\", \"S\");\n+\t\tjdbcInsert.compile();\n+\t\tString expected = \"INSERT INTO T (F, S) VALUES(?, ?)\";\n+\t\tString actual = jdbcInsert.getInsertString();\n+\t\tassertThat(actual).isEqualTo(expected);\n+\t}\n+\n+\t@Test\n+\tpublic void testSimpleJdbcInsertWithEscapingWithSchemaName() throws Exception {\n+\t\tSimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(dataSource).withSchemaName(\"S\").withTableName(\"T\").usingColumns(\"F\", \"S\").usingEscaping(true);\n+\n+\t\tgiven(databaseMetaData.getIdentifierQuoteString()).willReturn(\"`\");\n+\n+\t\tjdbcInsert.compile();\n+\t\tString expected = \"INSERT INTO `S.T` (`F`, `S`) VALUES(?, ?)\";",
        "comment_created_at": "2023-09-04T16:20:08+00:00",
        "comment_author": "sbrannen",
        "comment_body": "```suggestion\r\n\t\tString expected = \"INSERT INTO `S`.`T` (`F`, `S`) VALUES(?, ?)\";\r\n```\r\n\r\nJust a side note: the schema and table names have to be quoted independently.\r\n\r\nI've fixed this in my local branch and added integration tests with H2 to verify it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "777346657",
    "pr_number": 27870,
    "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/support/incrementer/H2SequenceMaxValueIncrementer.java",
    "created_at": "2022-01-03T08:41:57+00:00",
    "commented_code": "@Override\n \tprotected String getSequenceQuery() {\n-\t\treturn \"select \" + getIncrementerName() + \".nextval from dual\";\n+\t\treturn \"select next value for \" + getIncrementerName() + \" from dual\";",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "777346657",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27870,
        "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/support/incrementer/H2SequenceMaxValueIncrementer.java",
        "discussion_id": "777346657",
        "commented_code": "@@ -47,7 +47,7 @@ public H2SequenceMaxValueIncrementer(DataSource dataSource, String incrementerNa\n \n \t@Override\n \tprotected String getSequenceQuery() {\n-\t\treturn \"select \" + getIncrementerName() + \".nextval from dual\";\n+\t\treturn \"select next value for \" + getIncrementerName() + \" from dual\";",
        "comment_created_at": "2022-01-03T08:41:57+00:00",
        "comment_author": "katzyn",
        "comment_body": "Please, use standard-compliant `VALUES NEXT VALUE FOR sequenceName`. All other constructions aren't guaranteed to work in all compatibility modes of all versions of H2.\r\n\r\n`SELECT \u2026 FROM DUAL` is also an Oracle compatibility feature that may be rejected by H2 or interpreted in some unexpected way.",
        "pr_file_module": null
      },
      {
        "comment_id": "777351644",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27870,
        "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/support/incrementer/H2SequenceMaxValueIncrementer.java",
        "discussion_id": "777346657",
        "commented_code": "@@ -47,7 +47,7 @@ public H2SequenceMaxValueIncrementer(DataSource dataSource, String incrementerNa\n \n \t@Override\n \tprotected String getSequenceQuery() {\n-\t\treturn \"select \" + getIncrementerName() + \".nextval from dual\";\n+\t\treturn \"select next value for \" + getIncrementerName() + \" from dual\";",
        "comment_created_at": "2022-01-03T08:53:58+00:00",
        "comment_author": "hpoettker",
        "comment_body": "@katzyn Thanks! Changed.",
        "pr_file_module": null
      }
    ]
  }
]