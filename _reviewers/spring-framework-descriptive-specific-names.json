[
  {
    "discussion_id": "1480023957",
    "pr_number": 29958,
    "pr_file": "spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java",
    "created_at": "2024-02-06T15:23:12+00:00",
    "commented_code": "*/\n class ReactorClientHttpRequest extends AbstractClientHttpRequest implements ZeroCopyHttpOutputMessage {\n \n+\tpublic static final String ATTRIBUTES_CHANNEL_KEY = \"attributes\";",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1480023957",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 29958,
        "pr_file": "spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java",
        "discussion_id": "1480023957",
        "commented_code": "@@ -45,6 +48,8 @@\n  */\n class ReactorClientHttpRequest extends AbstractClientHttpRequest implements ZeroCopyHttpOutputMessage {\n \n+\tpublic static final String ATTRIBUTES_CHANNEL_KEY = \"attributes\";",
        "comment_created_at": "2024-02-06T15:23:12+00:00",
        "comment_author": "rstoyanchev",
        "comment_body": "The attribute name should be a little more qualified. Typically we would use something like: \r\n```java\r\nReactorClientHttpRequest.class.getName() + \".attributes\"\r\n``` ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1289201670",
    "pr_number": 28132,
    "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java",
    "created_at": "2023-08-09T21:11:17+00:00",
    "commented_code": "return result;\n \t}\n \n+\tprivate void storeGeneratedKeys(KeyHolder generatedKeyHolder, PreparedStatement ps, int rowsExpected) throws SQLException {\n+\t\tList<Map<String, Object>> generatedKeys = generatedKeyHolder.getKeyList();\n+\t\tResultSet keys = ps.getGeneratedKeys();\n+\t\tif (keys != null) {\n+\t\t\ttry {\n+\t\t\t\tRowMapperResultSetExtractor<Map<String, Object>> rse =\n+\t\t\t\t\t\tnew RowMapperResultSetExtractor<>(getColumnMapRowMapper(), rowsExpected);\n+\t\t\t\tgeneratedKeys.addAll(result(rse.extractData(keys)));\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tJdbcUtils.closeResultSet(keys);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate PreparedStatementCallback<int[]> getPreparedStatementCallback(BatchPreparedStatementSetter pss, @Nullable KeyHolder generatedKeyHolder) {",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1289201670",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 28132,
        "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java",
        "discussion_id": "1289201670",
        "commented_code": "@@ -1567,6 +1527,72 @@ private static int updateCount(@Nullable Integer result) {\n \t\treturn result;\n \t}\n \n+\tprivate void storeGeneratedKeys(KeyHolder generatedKeyHolder, PreparedStatement ps, int rowsExpected) throws SQLException {\n+\t\tList<Map<String, Object>> generatedKeys = generatedKeyHolder.getKeyList();\n+\t\tResultSet keys = ps.getGeneratedKeys();\n+\t\tif (keys != null) {\n+\t\t\ttry {\n+\t\t\t\tRowMapperResultSetExtractor<Map<String, Object>> rse =\n+\t\t\t\t\t\tnew RowMapperResultSetExtractor<>(getColumnMapRowMapper(), rowsExpected);\n+\t\t\t\tgeneratedKeys.addAll(result(rse.extractData(keys)));\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tJdbcUtils.closeResultSet(keys);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate PreparedStatementCallback<int[]> getPreparedStatementCallback(BatchPreparedStatementSetter pss, @Nullable KeyHolder generatedKeyHolder) {",
        "comment_created_at": "2023-08-09T21:11:17+00:00",
        "comment_author": "ePaul",
        "comment_body": "I would suggest a more descriptive name:\r\n```suggestion\r\n\tprivate PreparedStatementCallback<int[]> getPreparedStatementCallbackForBatchUpdate(BatchPreparedStatementSetter pss, @Nullable KeyHolder generatedKeyHolder) {\r\n```\r\n(Of course, also adjust this where it's used.)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1311395719",
    "pr_number": 24013,
    "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java",
    "created_at": "2023-08-31T09:59:53+00:00",
    "commented_code": "// Are we using generated key columns\n \tprivate boolean generatedKeyColumnsUsed = false;\n \n+\t// Are we using escaping for SQL identifiers\n+\tprivate boolean usingEscaping = false;",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1311395719",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24013,
        "pr_file": "spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java",
        "discussion_id": "1311395719",
        "commented_code": "@@ -78,6 +78,9 @@ public class TableMetaDataContext {\n \t// Are we using generated key columns\n \tprivate boolean generatedKeyColumnsUsed = false;\n \n+\t// Are we using escaping for SQL identifiers\n+\tprivate boolean usingEscaping = false;",
        "comment_created_at": "2023-08-31T09:59:53+00:00",
        "comment_author": "sbrannen",
        "comment_body": "```suggestion\r\n\tprivate boolean quoteIdentifiers = false;\r\n```\r\n\r\n\"Using escaping\" is too generic and could potentially conflict with a (yet unknown) future feature.\r\n\r\nLet's name this according to what it is actually used for.\r\n\r\nNote that I've updated the title of this PR to reflect that as well.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "389265912",
    "pr_number": 24651,
    "pr_file": "spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java",
    "created_at": "2020-03-07T16:27:07+00:00",
    "commented_code": "con.setRequestMethod(\"HEAD\");\n \t}\n \n+\t/**\n+\t * This implementation returns the contents of a file as a string using the\n+\t * system default Charset. Provided the resource exists and the context has\n+\t * access to it, the contents will be returned as a single string with line\n+\t * feed characters retained.\n+\t * @return the contents of the requested file as a {@code String}.\n+\t * @throws FileNotFoundException in the event the file path is invalid.\n+\t * @throws IOException if the file can not be read or cannot be serialzied.\n+\t */\n+\t@Override\n+\tpublic String getContentAsString() throws IOException {\n+\n+\t\tif( !exists() ) {\n+\t\t\tthrow new FileNotFoundException(getDescription() + \" cannot be found.\");\n+\t\t}\n+\t\tif ( !isReadable() ) {\n+\t\t\tthrow new IOException(getDescription() + \" cannot be opened for reading.\");\n+\t\t}\n+\t\treturn new String(Files.readAllBytes(Paths.get(getFile().getAbsolutePath())), Charset.defaultCharset());\n+\t}\n+\n+\t@Override\n+\tpublic String getContentAsString(Charset encoding) throws IOException {",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "389265912",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24651,
        "pr_file": "spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java",
        "discussion_id": "389265912",
        "commented_code": "@@ -298,6 +301,39 @@ protected void customizeConnection(HttpURLConnection con) throws IOException {\n \t\tcon.setRequestMethod(\"HEAD\");\n \t}\n \n+\t/**\n+\t * This implementation returns the contents of a file as a string using the\n+\t * system default Charset. Provided the resource exists and the context has\n+\t * access to it, the contents will be returned as a single string with line\n+\t * feed characters retained.\n+\t * @return the contents of the requested file as a {@code String}.\n+\t * @throws FileNotFoundException in the event the file path is invalid.\n+\t * @throws IOException if the file can not be read or cannot be serialzied.\n+\t */\n+\t@Override\n+\tpublic String getContentAsString() throws IOException {\n+\n+\t\tif( !exists() ) {\n+\t\t\tthrow new FileNotFoundException(getDescription() + \" cannot be found.\");\n+\t\t}\n+\t\tif ( !isReadable() ) {\n+\t\t\tthrow new IOException(getDescription() + \" cannot be opened for reading.\");\n+\t\t}\n+\t\treturn new String(Files.readAllBytes(Paths.get(getFile().getAbsolutePath())), Charset.defaultCharset());\n+\t}\n+\n+\t@Override\n+\tpublic String getContentAsString(Charset encoding) throws IOException {",
        "comment_created_at": "2020-03-07T16:27:07+00:00",
        "comment_author": "NathanQingyangXu",
        "comment_body": "I would suggest renaming 'encoding' to 'charset' to avoid confusion. Technically speaking, charset has different meaning than 'encoding'. I double checked naming convention in JDK and found either 'charset' or 'cs' is used. For string type parameter, 'charsetName' is used.",
        "pr_file_module": null
      },
      {
        "comment_id": "389314611",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24651,
        "pr_file": "spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java",
        "discussion_id": "389265912",
        "commented_code": "@@ -298,6 +301,39 @@ protected void customizeConnection(HttpURLConnection con) throws IOException {\n \t\tcon.setRequestMethod(\"HEAD\");\n \t}\n \n+\t/**\n+\t * This implementation returns the contents of a file as a string using the\n+\t * system default Charset. Provided the resource exists and the context has\n+\t * access to it, the contents will be returned as a single string with line\n+\t * feed characters retained.\n+\t * @return the contents of the requested file as a {@code String}.\n+\t * @throws FileNotFoundException in the event the file path is invalid.\n+\t * @throws IOException if the file can not be read or cannot be serialzied.\n+\t */\n+\t@Override\n+\tpublic String getContentAsString() throws IOException {\n+\n+\t\tif( !exists() ) {\n+\t\t\tthrow new FileNotFoundException(getDescription() + \" cannot be found.\");\n+\t\t}\n+\t\tif ( !isReadable() ) {\n+\t\t\tthrow new IOException(getDescription() + \" cannot be opened for reading.\");\n+\t\t}\n+\t\treturn new String(Files.readAllBytes(Paths.get(getFile().getAbsolutePath())), Charset.defaultCharset());\n+\t}\n+\n+\t@Override\n+\tpublic String getContentAsString(Charset encoding) throws IOException {",
        "comment_created_at": "2020-03-07T21:48:08+00:00",
        "comment_author": "derrick-pericipio",
        "comment_body": "I've changed the param name to `charset`",
        "pr_file_module": null
      },
      {
        "comment_id": "390338400",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24651,
        "pr_file": "spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java",
        "discussion_id": "389265912",
        "commented_code": "@@ -298,6 +301,39 @@ protected void customizeConnection(HttpURLConnection con) throws IOException {\n \t\tcon.setRequestMethod(\"HEAD\");\n \t}\n \n+\t/**\n+\t * This implementation returns the contents of a file as a string using the\n+\t * system default Charset. Provided the resource exists and the context has\n+\t * access to it, the contents will be returned as a single string with line\n+\t * feed characters retained.\n+\t * @return the contents of the requested file as a {@code String}.\n+\t * @throws FileNotFoundException in the event the file path is invalid.\n+\t * @throws IOException if the file can not be read or cannot be serialzied.\n+\t */\n+\t@Override\n+\tpublic String getContentAsString() throws IOException {\n+\n+\t\tif( !exists() ) {\n+\t\t\tthrow new FileNotFoundException(getDescription() + \" cannot be found.\");\n+\t\t}\n+\t\tif ( !isReadable() ) {\n+\t\t\tthrow new IOException(getDescription() + \" cannot be opened for reading.\");\n+\t\t}\n+\t\treturn new String(Files.readAllBytes(Paths.get(getFile().getAbsolutePath())), Charset.defaultCharset());\n+\t}\n+\n+\t@Override\n+\tpublic String getContentAsString(Charset encoding) throws IOException {",
        "comment_created_at": "2020-03-10T14:07:35+00:00",
        "comment_author": "derrick-pericipio",
        "comment_body": "Let me know if there's anything else that can be improved. ",
        "pr_file_module": null
      },
      {
        "comment_id": "390446463",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24651,
        "pr_file": "spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java",
        "discussion_id": "389265912",
        "commented_code": "@@ -298,6 +301,39 @@ protected void customizeConnection(HttpURLConnection con) throws IOException {\n \t\tcon.setRequestMethod(\"HEAD\");\n \t}\n \n+\t/**\n+\t * This implementation returns the contents of a file as a string using the\n+\t * system default Charset. Provided the resource exists and the context has\n+\t * access to it, the contents will be returned as a single string with line\n+\t * feed characters retained.\n+\t * @return the contents of the requested file as a {@code String}.\n+\t * @throws FileNotFoundException in the event the file path is invalid.\n+\t * @throws IOException if the file can not be read or cannot be serialzied.\n+\t */\n+\t@Override\n+\tpublic String getContentAsString() throws IOException {\n+\n+\t\tif( !exists() ) {\n+\t\t\tthrow new FileNotFoundException(getDescription() + \" cannot be found.\");\n+\t\t}\n+\t\tif ( !isReadable() ) {\n+\t\t\tthrow new IOException(getDescription() + \" cannot be opened for reading.\");\n+\t\t}\n+\t\treturn new String(Files.readAllBytes(Paths.get(getFile().getAbsolutePath())), Charset.defaultCharset());\n+\t}\n+\n+\t@Override\n+\tpublic String getContentAsString(Charset encoding) throws IOException {",
        "comment_created_at": "2020-03-10T16:29:27+00:00",
        "comment_author": "NathanQingyangXu",
        "comment_body": "no further concern from my side",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "224105715",
    "pr_number": 1977,
    "pr_file": "spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpHeaders.java",
    "created_at": "2018-10-10T14:40:02+00:00",
    "commented_code": "+/*\n+ * Copyright 2002-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.http.server.reactive;\n+\n+import java.util.AbstractSet;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import io.netty.handler.codec.http.HttpHeaders;\n+\n+import org.springframework.lang.Nullable;\n+import org.springframework.util.MultiValueMap;\n+\n+/**\n+ * {@code MultiValueMap} implementation for wrapping Reactor Netty HTTP headers.\n+ *\n+ * @author Brian Clozel\n+ * @since 5.1\n+ */\n+class ReactorServerHttpHeaders implements MultiValueMap<String, String> {",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "224105715",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1977,
        "pr_file": "spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpHeaders.java",
        "discussion_id": "224105715",
        "commented_code": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2002-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.http.server.reactive;\n+\n+import java.util.AbstractSet;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import io.netty.handler.codec.http.HttpHeaders;\n+\n+import org.springframework.lang.Nullable;\n+import org.springframework.util.MultiValueMap;\n+\n+/**\n+ * {@code MultiValueMap} implementation for wrapping Reactor Netty HTTP headers.\n+ *\n+ * @author Brian Clozel\n+ * @since 5.1\n+ */\n+class ReactorServerHttpHeaders implements MultiValueMap<String, String> {",
        "comment_created_at": "2018-10-10T14:40:02+00:00",
        "comment_author": "rstoyanchev",
        "comment_body": "A few questions on the class name.\r\n\r\n1. `HttpHeaders` is from Netty so probably shouldn't be called Reactor? It could be used with other Netty based runtimes too besides Reactor.\r\n2. The Netty `HttpHeaders` are for client and server use, so \"Server\" is a misnomer.\r\n3. Both Netty and Spring have \"HttpHeaders\", and this class is an instance of neither, so calling it `HttpHeaders` is not ideal. It is a MultiValueMap but that would be long. It is an Adapter so perhaps `NettyHeadersAdapter`?\r\n4. \r\n\r\nFor Jetty the adapted `HttpFields` is also both client and server. Perhaps `JettyHeadersAdapter`. \r\n\r\nFor Tomcat and Undertow they're server specific but no strong reason to use \"Server\" (what else could they be?) so `TomcatHeadersAdapter` and `UndertowHeadersAdapter` for consistency.\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "509456326",
    "pr_number": 25951,
    "pr_file": "spring-web/src/main/java/org/springframework/web/util/UriBuilder.java",
    "created_at": "2020-10-21T17:07:54+00:00",
    "commented_code": "*/\n \tUriBuilder queryParam(String name, Object... values);\n \n+\t/**\n+\t * Append the given query parameter and value if and only if a value is present in the Optional.\n+\t * No action will be taken, and the query parameter name will not be added, if the passed Optional is empty.\n+\t * @param name the query parameter name\n+\t * @param optionalValue an Optional, either empty or holding the query parameter value.\n+\t * @return\n+\t */\n+\tUriBuilder optionalQueryParam(String name, Optional<?> optionalValue);",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "509456326",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 25951,
        "pr_file": "spring-web/src/main/java/org/springframework/web/util/UriBuilder.java",
        "discussion_id": "509456326",
        "commented_code": "@@ -185,6 +186,15 @@\n \t */\n \tUriBuilder queryParam(String name, Object... values);\n \n+\t/**\n+\t * Append the given query parameter and value if and only if a value is present in the Optional.\n+\t * No action will be taken, and the query parameter name will not be added, if the passed Optional is empty.\n+\t * @param name the query parameter name\n+\t * @param optionalValue an Optional, either empty or holding the query parameter value.\n+\t * @return\n+\t */\n+\tUriBuilder optionalQueryParam(String name, Optional<?> optionalValue);",
        "comment_created_at": "2020-10-21T17:07:54+00:00",
        "comment_author": "rstoyanchev",
        "comment_body": "`queryParamIfPresent` aligns better with terminology from `Optional` and it sorts better alphabetically with the existing `queryParam` methods.",
        "pr_file_module": null
      },
      {
        "comment_id": "509545326",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 25951,
        "pr_file": "spring-web/src/main/java/org/springframework/web/util/UriBuilder.java",
        "discussion_id": "509456326",
        "commented_code": "@@ -185,6 +186,15 @@\n \t */\n \tUriBuilder queryParam(String name, Object... values);\n \n+\t/**\n+\t * Append the given query parameter and value if and only if a value is present in the Optional.\n+\t * No action will be taken, and the query parameter name will not be added, if the passed Optional is empty.\n+\t * @param name the query parameter name\n+\t * @param optionalValue an Optional, either empty or holding the query parameter value.\n+\t * @return\n+\t */\n+\tUriBuilder optionalQueryParam(String name, Optional<?> optionalValue);",
        "comment_created_at": "2020-10-21T18:18:52+00:00",
        "comment_author": "robinroos",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "417165344",
    "pr_number": 24866,
    "pr_file": "spring-core/src/main/java/org/springframework/core/codec/ByteBufDecoder.java",
    "created_at": "2020-04-29T08:57:07+00:00",
    "commented_code": "+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.core.codec;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import org.springframework.core.ResolvableType;\n+import org.springframework.core.io.buffer.DataBuffer;\n+import org.springframework.core.io.buffer.DataBufferUtils;\n+import org.springframework.core.io.buffer.NettyDataBuffer;\n+import org.springframework.lang.Nullable;\n+import org.springframework.util.MimeType;\n+import org.springframework.util.MimeTypeUtils;\n+\n+import java.util.Map;\n+\n+/**\n+ * Decoder for {@link ByteBuf ByteBufs}.\n+ *\n+ * @author Vladislav Kisel\n+ * @since 5.3\n+ */\n+public class ByteBufDecoder extends AbstractDataBufferDecoder<ByteBuf> {\n+\n+\tpublic ByteBufDecoder() {\n+\t\tsuper(MimeTypeUtils.ALL);\n+\t}\n+\n+\n+\t@Override\n+\tpublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\n+\t\treturn (ByteBuf.class.isAssignableFrom(elementType.toClass()) &&\n+\t\t\t\tsuper.canDecode(elementType, mimeType));\n+\t}\n+\n+\t@Override\n+\tpublic ByteBuf decode(DataBuffer dataBuffer, ResolvableType elementType,\n+\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n+\n+\t\t// Copies the dataBuffer if needed only\n+\t\tByteBuf copy;",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "417165344",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24866,
        "pr_file": "spring-core/src/main/java/org/springframework/core/codec/ByteBufDecoder.java",
        "discussion_id": "417165344",
        "commented_code": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.core.codec;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import org.springframework.core.ResolvableType;\n+import org.springframework.core.io.buffer.DataBuffer;\n+import org.springframework.core.io.buffer.DataBufferUtils;\n+import org.springframework.core.io.buffer.NettyDataBuffer;\n+import org.springframework.lang.Nullable;\n+import org.springframework.util.MimeType;\n+import org.springframework.util.MimeTypeUtils;\n+\n+import java.util.Map;\n+\n+/**\n+ * Decoder for {@link ByteBuf ByteBufs}.\n+ *\n+ * @author Vladislav Kisel\n+ * @since 5.3\n+ */\n+public class ByteBufDecoder extends AbstractDataBufferDecoder<ByteBuf> {\n+\n+\tpublic ByteBufDecoder() {\n+\t\tsuper(MimeTypeUtils.ALL);\n+\t}\n+\n+\n+\t@Override\n+\tpublic boolean canDecode(ResolvableType elementType, @Nullable MimeType mimeType) {\n+\t\treturn (ByteBuf.class.isAssignableFrom(elementType.toClass()) &&\n+\t\t\t\tsuper.canDecode(elementType, mimeType));\n+\t}\n+\n+\t@Override\n+\tpublic ByteBuf decode(DataBuffer dataBuffer, ResolvableType elementType,\n+\t\t\t@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {\n+\n+\t\t// Copies the dataBuffer if needed only\n+\t\tByteBuf copy;",
        "comment_created_at": "2020-04-29T08:57:07+00:00",
        "comment_author": "poutsma",
        "comment_body": "This variable should be renamed (to `byteBuf`), as it does not always contain a copy (i.e. in the case of a `NettyDataBuffer`).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "417166656",
    "pr_number": 24866,
    "pr_file": "spring-core/src/main/java/org/springframework/core/codec/ByteBufEncoder.java",
    "created_at": "2020-04-29T08:59:25+00:00",
    "commented_code": "+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.core.codec;\n+\n+import io.netty.buffer.ByteBuf;\n+import org.reactivestreams.Publisher;\n+import org.springframework.core.ResolvableType;\n+import org.springframework.core.io.buffer.DataBuffer;\n+import org.springframework.core.io.buffer.DataBufferFactory;\n+import org.springframework.core.io.buffer.NettyDataBufferFactory;\n+import org.springframework.lang.Nullable;\n+import org.springframework.util.MimeType;\n+import org.springframework.util.MimeTypeUtils;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.Map;\n+\n+/**\n+ * Encoder for {@link ByteBuf ByteBufs}.\n+ *\n+ * @author Vladislav Kisel\n+ * @since 5.3\n+ */\n+public class ByteBufEncoder extends AbstractEncoder<ByteBuf> {\n+\n+\tpublic ByteBufEncoder() {\n+\t\tsuper(MimeTypeUtils.ALL);\n+\t}\n+\n+\n+\t@Override\n+\tpublic boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {\n+\t\tClass<?> clazz = elementType.toClass();\n+\t\treturn super.canEncode(elementType, mimeType) && ByteBuf.class.isAssignableFrom(clazz);\n+\t}\n+\n+\t@Override\n+\tpublic Flux<DataBuffer> encode(Publisher<? extends ByteBuf> inputStream,\n+\t\t\tDataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType,\n+\t\t\t@Nullable Map<String, Object> hints) {\n+\n+\t\treturn Flux.from(inputStream).map(byteBuffer ->\n+\t\t\t\tencodeValue(byteBuffer, bufferFactory, elementType, mimeType, hints));\n+\t}\n+\n+\t@Override\n+\tpublic DataBuffer encodeValue(ByteBuf byteBuffer, DataBufferFactory bufferFactory,",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "417166656",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24866,
        "pr_file": "spring-core/src/main/java/org/springframework/core/codec/ByteBufEncoder.java",
        "discussion_id": "417166656",
        "commented_code": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.core.codec;\n+\n+import io.netty.buffer.ByteBuf;\n+import org.reactivestreams.Publisher;\n+import org.springframework.core.ResolvableType;\n+import org.springframework.core.io.buffer.DataBuffer;\n+import org.springframework.core.io.buffer.DataBufferFactory;\n+import org.springframework.core.io.buffer.NettyDataBufferFactory;\n+import org.springframework.lang.Nullable;\n+import org.springframework.util.MimeType;\n+import org.springframework.util.MimeTypeUtils;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.Map;\n+\n+/**\n+ * Encoder for {@link ByteBuf ByteBufs}.\n+ *\n+ * @author Vladislav Kisel\n+ * @since 5.3\n+ */\n+public class ByteBufEncoder extends AbstractEncoder<ByteBuf> {\n+\n+\tpublic ByteBufEncoder() {\n+\t\tsuper(MimeTypeUtils.ALL);\n+\t}\n+\n+\n+\t@Override\n+\tpublic boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType) {\n+\t\tClass<?> clazz = elementType.toClass();\n+\t\treturn super.canEncode(elementType, mimeType) && ByteBuf.class.isAssignableFrom(clazz);\n+\t}\n+\n+\t@Override\n+\tpublic Flux<DataBuffer> encode(Publisher<? extends ByteBuf> inputStream,\n+\t\t\tDataBufferFactory bufferFactory, ResolvableType elementType, @Nullable MimeType mimeType,\n+\t\t\t@Nullable Map<String, Object> hints) {\n+\n+\t\treturn Flux.from(inputStream).map(byteBuffer ->\n+\t\t\t\tencodeValue(byteBuffer, bufferFactory, elementType, mimeType, hints));\n+\t}\n+\n+\t@Override\n+\tpublic DataBuffer encodeValue(ByteBuf byteBuffer, DataBufferFactory bufferFactory,",
        "comment_created_at": "2020-04-29T08:59:25+00:00",
        "comment_author": "poutsma",
        "comment_body": "The `byteBuffer` parameter should be renamed as well (to `byteBuf`). The current name suggests it's a `java.nio.ByteBuffer`.",
        "pr_file_module": null
      }
    ]
  }
]