[
  {
    "discussion_id": "2087205248",
    "pr_number": 34860,
    "pr_file": "spring-beans/src/test/kotlin/org/springframework/beans/BeanUtilsKotlinTests.kt",
    "created_at": "2025-05-13T16:20:46+00:00",
    "commented_code": "assertThat(instance).isEqualTo(ConstructorWithNullablePrimitiveValueClass(null))\n \t}\n \n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with Foo`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(Foo::class.java)!!\n+\t\tval names = BeanUtils.getParameterNames(ctor)\n+\t\tassertThat(names).containsExactly(\"param1\", \"param2\")\n+\t}\n+\n+\n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with Bar`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(Bar::class.java)!!\n+\t\tval names = BeanUtils.getParameterNames(ctor)\n+\t\tassertThat(names).containsExactly(\"param1\", \"param2\")\n+\t}\n+\n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with Baz`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(Baz::class.java)!!\n+\t\tval names = BeanUtils.getParameterNames(ctor)\n+\t\tassertThat(names).containsExactly(\"param1\", \"param2\")\n+\t}\n+\n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with Qux`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(Qux::class.java)!!\n+\t\tval names = BeanUtils.getParameterNames(ctor)\n+\t\tassertThat(names).containsExactly(\"param1\", \"param2\")\n+\t}\n+\n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with ConstructorWithValueClass`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(ConstructorWithValueClass::class.java)!!\n+\t\tassertThat(ctor).isNotNull()",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "2087205248",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 34860,
        "pr_file": "spring-beans/src/test/kotlin/org/springframework/beans/BeanUtilsKotlinTests.kt",
        "discussion_id": "2087205248",
        "commented_code": "@@ -157,6 +157,67 @@ class BeanUtilsKotlinTests {\n \t\tassertThat(instance).isEqualTo(ConstructorWithNullablePrimitiveValueClass(null))\n \t}\n \n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with Foo`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(Foo::class.java)!!\n+\t\tval names = BeanUtils.getParameterNames(ctor)\n+\t\tassertThat(names).containsExactly(\"param1\", \"param2\")\n+\t}\n+\n+\n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with Bar`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(Bar::class.java)!!\n+\t\tval names = BeanUtils.getParameterNames(ctor)\n+\t\tassertThat(names).containsExactly(\"param1\", \"param2\")\n+\t}\n+\n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with Baz`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(Baz::class.java)!!\n+\t\tval names = BeanUtils.getParameterNames(ctor)\n+\t\tassertThat(names).containsExactly(\"param1\", \"param2\")\n+\t}\n+\n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with Qux`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(Qux::class.java)!!\n+\t\tval names = BeanUtils.getParameterNames(ctor)\n+\t\tassertThat(names).containsExactly(\"param1\", \"param2\")\n+\t}\n+\n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with ConstructorWithValueClass`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(ConstructorWithValueClass::class.java)!!\n+\t\tassertThat(ctor).isNotNull()",
        "comment_created_at": "2025-05-13T16:20:46+00:00",
        "comment_author": "dmitrysulman",
        "comment_body": "Looks like this assertion is redundant because  `!!` is used in the previous statement.",
        "pr_file_module": null
      },
      {
        "comment_id": "2087588509",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 34860,
        "pr_file": "spring-beans/src/test/kotlin/org/springframework/beans/BeanUtilsKotlinTests.kt",
        "discussion_id": "2087205248",
        "commented_code": "@@ -157,6 +157,67 @@ class BeanUtilsKotlinTests {\n \t\tassertThat(instance).isEqualTo(ConstructorWithNullablePrimitiveValueClass(null))\n \t}\n \n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with Foo`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(Foo::class.java)!!\n+\t\tval names = BeanUtils.getParameterNames(ctor)\n+\t\tassertThat(names).containsExactly(\"param1\", \"param2\")\n+\t}\n+\n+\n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with Bar`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(Bar::class.java)!!\n+\t\tval names = BeanUtils.getParameterNames(ctor)\n+\t\tassertThat(names).containsExactly(\"param1\", \"param2\")\n+\t}\n+\n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with Baz`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(Baz::class.java)!!\n+\t\tval names = BeanUtils.getParameterNames(ctor)\n+\t\tassertThat(names).containsExactly(\"param1\", \"param2\")\n+\t}\n+\n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with Qux`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(Qux::class.java)!!\n+\t\tval names = BeanUtils.getParameterNames(ctor)\n+\t\tassertThat(names).containsExactly(\"param1\", \"param2\")\n+\t}\n+\n+\t@Test\n+\tfun `getParameterNames filters out DefaultConstructorMarker with ConstructorWithValueClass`() {\n+\t\tval ctor = BeanUtils.findPrimaryConstructor(ConstructorWithValueClass::class.java)!!\n+\t\tassertThat(ctor).isNotNull()",
        "comment_created_at": "2025-05-13T20:33:23+00:00",
        "comment_author": "Emil-Stampfly-He",
        "comment_body": "Hi @dmitrysulman, thanks for your review! I have removed the redundant null-assertions. Plus, there are also the same type of redundant null-assertions in the previous tests so I removed them too.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "822503038",
    "pr_number": 27308,
    "pr_file": "spring-tx/src/main/kotlin/org/springframework/transaction/reactive/TransactionalOperatorExtensions.kt",
    "created_at": "2022-03-09T10:28:44+00:00",
    "commented_code": "+/*\n+ * Copyright 2002-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.springframework.transaction.reactive\n \n-import java.util.Optional\n import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.Job\n import kotlinx.coroutines.flow.Flow\n import kotlinx.coroutines.reactive.asFlow\n import kotlinx.coroutines.reactive.awaitLast\n import kotlinx.coroutines.reactor.asFlux\n import kotlinx.coroutines.reactor.mono\n import org.springframework.transaction.ReactiveTransaction\n+import java.util.Optional\n+import kotlin.coroutines.CoroutineContext\n+import kotlin.coroutines.EmptyCoroutineContext\n+import kotlin.coroutines.coroutineContext\n \n /**\n  * Coroutines variant of [TransactionalOperator.transactional] as a [Flow] extension.\n  *\n  * @author Sebastien Deleuze\n  * @since 5.2\n  */\n-fun <T : Any> Flow<T>.transactional(operator: TransactionalOperator): Flow<T> =\n-\t\toperator.transactional(asFlux()).asFlow()\n+fun <T : Any> Flow<T>.transactional(\n+\toperator: TransactionalOperator,\n+\tcontext: CoroutineContext = EmptyCoroutineContext\n+): Flow<T> =\n+\toperator.transactional(asFlux(context)).asFlow()\n \n /**\n-* Coroutines variant of [TransactionalOperator.execute] with a suspending lambda\n-* parameter.\n-*\n-* @author Sebastien Deleuze\n-* @author Mark Paluch\n-* @since 5.2\n-*/\n-suspend fun <T : Any> TransactionalOperator.executeAndAwait(f: suspend (ReactiveTransaction) -> T?): T? =\n-\t\texecute { status -> mono(Dispatchers.Unconfined) { f(status) } }.map { value -> Optional.of(value) }\n-\t\t\t\t.defaultIfEmpty(Optional.empty()).awaitLast().orElse(null)\n+ * Coroutines variant of [TransactionalOperator.execute] with a suspending lambda\n+ * parameter.\n+ *\n+ * @author Sebastien Deleuze\n+ * @author Mark Paluch\n+ * @since 5.2\n+ */\n+suspend fun <T> TransactionalOperator.executeAndAwait(f: suspend (ReactiveTransaction) -> T): T {",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "822503038",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27308,
        "pr_file": "spring-tx/src/main/kotlin/org/springframework/transaction/reactive/TransactionalOperatorExtensions.kt",
        "discussion_id": "822503038",
        "commented_code": "@@ -1,31 +1,56 @@\n+/*\n+ * Copyright 2002-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.springframework.transaction.reactive\n \n-import java.util.Optional\n import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.Job\n import kotlinx.coroutines.flow.Flow\n import kotlinx.coroutines.reactive.asFlow\n import kotlinx.coroutines.reactive.awaitLast\n import kotlinx.coroutines.reactor.asFlux\n import kotlinx.coroutines.reactor.mono\n import org.springframework.transaction.ReactiveTransaction\n+import java.util.Optional\n+import kotlin.coroutines.CoroutineContext\n+import kotlin.coroutines.EmptyCoroutineContext\n+import kotlin.coroutines.coroutineContext\n \n /**\n  * Coroutines variant of [TransactionalOperator.transactional] as a [Flow] extension.\n  *\n  * @author Sebastien Deleuze\n  * @since 5.2\n  */\n-fun <T : Any> Flow<T>.transactional(operator: TransactionalOperator): Flow<T> =\n-\t\toperator.transactional(asFlux()).asFlow()\n+fun <T : Any> Flow<T>.transactional(\n+\toperator: TransactionalOperator,\n+\tcontext: CoroutineContext = EmptyCoroutineContext\n+): Flow<T> =\n+\toperator.transactional(asFlux(context)).asFlow()\n \n /**\n-* Coroutines variant of [TransactionalOperator.execute] with a suspending lambda\n-* parameter.\n-*\n-* @author Sebastien Deleuze\n-* @author Mark Paluch\n-* @since 5.2\n-*/\n-suspend fun <T : Any> TransactionalOperator.executeAndAwait(f: suspend (ReactiveTransaction) -> T?): T? =\n-\t\texecute { status -> mono(Dispatchers.Unconfined) { f(status) } }.map { value -> Optional.of(value) }\n-\t\t\t\t.defaultIfEmpty(Optional.empty()).awaitLast().orElse(null)\n+ * Coroutines variant of [TransactionalOperator.execute] with a suspending lambda\n+ * parameter.\n+ *\n+ * @author Sebastien Deleuze\n+ * @author Mark Paluch\n+ * @since 5.2\n+ */\n+suspend fun <T> TransactionalOperator.executeAndAwait(f: suspend (ReactiveTransaction) -> T): T {",
        "comment_created_at": "2022-03-09T10:28:44+00:00",
        "comment_author": "sdeleuze",
        "comment_body": "I am not sure about the principle of this change of null-safety, and in any case it should not be part of this PR.\r\n\r\n@mp911de Any take on the change of null-safety requested here?",
        "pr_file_module": null
      },
      {
        "comment_id": "822520973",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27308,
        "pr_file": "spring-tx/src/main/kotlin/org/springframework/transaction/reactive/TransactionalOperatorExtensions.kt",
        "discussion_id": "822503038",
        "commented_code": "@@ -1,31 +1,56 @@\n+/*\n+ * Copyright 2002-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.springframework.transaction.reactive\n \n-import java.util.Optional\n import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.Job\n import kotlinx.coroutines.flow.Flow\n import kotlinx.coroutines.reactive.asFlow\n import kotlinx.coroutines.reactive.awaitLast\n import kotlinx.coroutines.reactor.asFlux\n import kotlinx.coroutines.reactor.mono\n import org.springframework.transaction.ReactiveTransaction\n+import java.util.Optional\n+import kotlin.coroutines.CoroutineContext\n+import kotlin.coroutines.EmptyCoroutineContext\n+import kotlin.coroutines.coroutineContext\n \n /**\n  * Coroutines variant of [TransactionalOperator.transactional] as a [Flow] extension.\n  *\n  * @author Sebastien Deleuze\n  * @since 5.2\n  */\n-fun <T : Any> Flow<T>.transactional(operator: TransactionalOperator): Flow<T> =\n-\t\toperator.transactional(asFlux()).asFlow()\n+fun <T : Any> Flow<T>.transactional(\n+\toperator: TransactionalOperator,\n+\tcontext: CoroutineContext = EmptyCoroutineContext\n+): Flow<T> =\n+\toperator.transactional(asFlux(context)).asFlow()\n \n /**\n-* Coroutines variant of [TransactionalOperator.execute] with a suspending lambda\n-* parameter.\n-*\n-* @author Sebastien Deleuze\n-* @author Mark Paluch\n-* @since 5.2\n-*/\n-suspend fun <T : Any> TransactionalOperator.executeAndAwait(f: suspend (ReactiveTransaction) -> T?): T? =\n-\t\texecute { status -> mono(Dispatchers.Unconfined) { f(status) } }.map { value -> Optional.of(value) }\n-\t\t\t\t.defaultIfEmpty(Optional.empty()).awaitLast().orElse(null)\n+ * Coroutines variant of [TransactionalOperator.execute] with a suspending lambda\n+ * parameter.\n+ *\n+ * @author Sebastien Deleuze\n+ * @author Mark Paluch\n+ * @since 5.2\n+ */\n+suspend fun <T> TransactionalOperator.executeAndAwait(f: suspend (ReactiveTransaction) -> T): T {",
        "comment_created_at": "2022-03-09T10:49:15+00:00",
        "comment_author": "mp911de",
        "comment_body": "A reactive transaction can complete without emitting a value, so we should keep `T` nullable.",
        "pr_file_module": null
      },
      {
        "comment_id": "881209396",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27308,
        "pr_file": "spring-tx/src/main/kotlin/org/springframework/transaction/reactive/TransactionalOperatorExtensions.kt",
        "discussion_id": "822503038",
        "commented_code": "@@ -1,31 +1,56 @@\n+/*\n+ * Copyright 2002-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.springframework.transaction.reactive\n \n-import java.util.Optional\n import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.Job\n import kotlinx.coroutines.flow.Flow\n import kotlinx.coroutines.reactive.asFlow\n import kotlinx.coroutines.reactive.awaitLast\n import kotlinx.coroutines.reactor.asFlux\n import kotlinx.coroutines.reactor.mono\n import org.springframework.transaction.ReactiveTransaction\n+import java.util.Optional\n+import kotlin.coroutines.CoroutineContext\n+import kotlin.coroutines.EmptyCoroutineContext\n+import kotlin.coroutines.coroutineContext\n \n /**\n  * Coroutines variant of [TransactionalOperator.transactional] as a [Flow] extension.\n  *\n  * @author Sebastien Deleuze\n  * @since 5.2\n  */\n-fun <T : Any> Flow<T>.transactional(operator: TransactionalOperator): Flow<T> =\n-\t\toperator.transactional(asFlux()).asFlow()\n+fun <T : Any> Flow<T>.transactional(\n+\toperator: TransactionalOperator,\n+\tcontext: CoroutineContext = EmptyCoroutineContext\n+): Flow<T> =\n+\toperator.transactional(asFlux(context)).asFlow()\n \n /**\n-* Coroutines variant of [TransactionalOperator.execute] with a suspending lambda\n-* parameter.\n-*\n-* @author Sebastien Deleuze\n-* @author Mark Paluch\n-* @since 5.2\n-*/\n-suspend fun <T : Any> TransactionalOperator.executeAndAwait(f: suspend (ReactiveTransaction) -> T?): T? =\n-\t\texecute { status -> mono(Dispatchers.Unconfined) { f(status) } }.map { value -> Optional.of(value) }\n-\t\t\t\t.defaultIfEmpty(Optional.empty()).awaitLast().orElse(null)\n+ * Coroutines variant of [TransactionalOperator.execute] with a suspending lambda\n+ * parameter.\n+ *\n+ * @author Sebastien Deleuze\n+ * @author Mark Paluch\n+ * @since 5.2\n+ */\n+suspend fun <T> TransactionalOperator.executeAndAwait(f: suspend (ReactiveTransaction) -> T): T {",
        "comment_created_at": "2022-05-25T04:38:36+00:00",
        "comment_author": "jamesbassett",
        "comment_body": "I ran into this as well. I was expecting the signature to be\r\n\r\n `suspend fun <T> TransactionalOperator.executeAndAwait(f: suspend (ReactiveTransaction) -> T): T {`\r\n\r\n i.e. for `T` to not be nullable and to not have the upper bound on `Any`.\r\n\r\nThis would make all of the following possible...\r\n\r\n```kotlin\r\n    val test1: Int = transactionalOperator.executeAndAwait { 1 }\r\n    val test2: Int? = transactionalOperator.executeAndAwait { \"1\".toIntOrNull() }\r\n    val test3: Int? = transactionalOperator.executeAndAwait { null }\r\n```\r\n\r\nCurrently in the first example I have to resort to `!!`, i.e.\r\n\r\n```kotlin\r\n    val test1: Int = transactionalOperator.executeAndAwait { 1 }!!\r\n```\r\n\r\n\r\nAm I missing something? The implicit upper bound if you don't specify is nullable (i.e. `T: Any?`) and in this case would allow the return type of `executeAndAwait` to match whatever the lambda returns, as in the above examples.",
        "pr_file_module": null
      },
      {
        "comment_id": "881727706",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27308,
        "pr_file": "spring-tx/src/main/kotlin/org/springframework/transaction/reactive/TransactionalOperatorExtensions.kt",
        "discussion_id": "822503038",
        "commented_code": "@@ -1,31 +1,56 @@\n+/*\n+ * Copyright 2002-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.springframework.transaction.reactive\n \n-import java.util.Optional\n import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.Job\n import kotlinx.coroutines.flow.Flow\n import kotlinx.coroutines.reactive.asFlow\n import kotlinx.coroutines.reactive.awaitLast\n import kotlinx.coroutines.reactor.asFlux\n import kotlinx.coroutines.reactor.mono\n import org.springframework.transaction.ReactiveTransaction\n+import java.util.Optional\n+import kotlin.coroutines.CoroutineContext\n+import kotlin.coroutines.EmptyCoroutineContext\n+import kotlin.coroutines.coroutineContext\n \n /**\n  * Coroutines variant of [TransactionalOperator.transactional] as a [Flow] extension.\n  *\n  * @author Sebastien Deleuze\n  * @since 5.2\n  */\n-fun <T : Any> Flow<T>.transactional(operator: TransactionalOperator): Flow<T> =\n-\t\toperator.transactional(asFlux()).asFlow()\n+fun <T : Any> Flow<T>.transactional(\n+\toperator: TransactionalOperator,\n+\tcontext: CoroutineContext = EmptyCoroutineContext\n+): Flow<T> =\n+\toperator.transactional(asFlux(context)).asFlow()\n \n /**\n-* Coroutines variant of [TransactionalOperator.execute] with a suspending lambda\n-* parameter.\n-*\n-* @author Sebastien Deleuze\n-* @author Mark Paluch\n-* @since 5.2\n-*/\n-suspend fun <T : Any> TransactionalOperator.executeAndAwait(f: suspend (ReactiveTransaction) -> T?): T? =\n-\t\texecute { status -> mono(Dispatchers.Unconfined) { f(status) } }.map { value -> Optional.of(value) }\n-\t\t\t\t.defaultIfEmpty(Optional.empty()).awaitLast().orElse(null)\n+ * Coroutines variant of [TransactionalOperator.execute] with a suspending lambda\n+ * parameter.\n+ *\n+ * @author Sebastien Deleuze\n+ * @author Mark Paluch\n+ * @since 5.2\n+ */\n+suspend fun <T> TransactionalOperator.executeAndAwait(f: suspend (ReactiveTransaction) -> T): T {",
        "comment_created_at": "2022-05-25T14:29:50+00:00",
        "comment_author": "ks-yim",
        "comment_body": "@mp911de Sorry that I didn't give a feedback for this comment for so long.\r\nI ran into the same issue that @jamesbassett has just pointed out.\r\n\r\nAny special reason to return `T?` instead of just `T`?\r\nI got to always cast the returned value with `!!` even if the lambda is guaranteed to return a non-null value.",
        "pr_file_module": null
      },
      {
        "comment_id": "1094550206",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27308,
        "pr_file": "spring-tx/src/main/kotlin/org/springframework/transaction/reactive/TransactionalOperatorExtensions.kt",
        "discussion_id": "822503038",
        "commented_code": "@@ -1,31 +1,56 @@\n+/*\n+ * Copyright 2002-2021 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.springframework.transaction.reactive\n \n-import java.util.Optional\n import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.Job\n import kotlinx.coroutines.flow.Flow\n import kotlinx.coroutines.reactive.asFlow\n import kotlinx.coroutines.reactive.awaitLast\n import kotlinx.coroutines.reactor.asFlux\n import kotlinx.coroutines.reactor.mono\n import org.springframework.transaction.ReactiveTransaction\n+import java.util.Optional\n+import kotlin.coroutines.CoroutineContext\n+import kotlin.coroutines.EmptyCoroutineContext\n+import kotlin.coroutines.coroutineContext\n \n /**\n  * Coroutines variant of [TransactionalOperator.transactional] as a [Flow] extension.\n  *\n  * @author Sebastien Deleuze\n  * @since 5.2\n  */\n-fun <T : Any> Flow<T>.transactional(operator: TransactionalOperator): Flow<T> =\n-\t\toperator.transactional(asFlux()).asFlow()\n+fun <T : Any> Flow<T>.transactional(\n+\toperator: TransactionalOperator,\n+\tcontext: CoroutineContext = EmptyCoroutineContext\n+): Flow<T> =\n+\toperator.transactional(asFlux(context)).asFlow()\n \n /**\n-* Coroutines variant of [TransactionalOperator.execute] with a suspending lambda\n-* parameter.\n-*\n-* @author Sebastien Deleuze\n-* @author Mark Paluch\n-* @since 5.2\n-*/\n-suspend fun <T : Any> TransactionalOperator.executeAndAwait(f: suspend (ReactiveTransaction) -> T?): T? =\n-\t\texecute { status -> mono(Dispatchers.Unconfined) { f(status) } }.map { value -> Optional.of(value) }\n-\t\t\t\t.defaultIfEmpty(Optional.empty()).awaitLast().orElse(null)\n+ * Coroutines variant of [TransactionalOperator.execute] with a suspending lambda\n+ * parameter.\n+ *\n+ * @author Sebastien Deleuze\n+ * @author Mark Paluch\n+ * @since 5.2\n+ */\n+suspend fun <T> TransactionalOperator.executeAndAwait(f: suspend (ReactiveTransaction) -> T): T {",
        "comment_created_at": "2023-02-02T13:44:00+00:00",
        "comment_author": "sdeleuze",
        "comment_body": "Fixed by #29919",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1086638162",
    "pr_number": 29527,
    "pr_file": "spring-webflux/src/test/java/org/springframework/web/reactive/function/client/support/WebClientHttpServiceProxyKotlinTests.kt",
    "created_at": "2023-01-25T13:26:16+00:00",
    "commented_code": "+/*\n+ * Copyright 2002-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.web.reactive.function.client.support\n+\n+import kotlinx.coroutines.reactor.mono\n+import kotlinx.coroutines.runBlocking\n+import okhttp3.mockwebserver.MockResponse\n+import okhttp3.mockwebserver.MockWebServer\n+import org.assertj.core.api.Assertions\n+import org.junit.jupiter.api.AfterEach\n+import org.junit.jupiter.api.BeforeEach\n+import org.junit.jupiter.api.Test\n+import org.springframework.web.bind.annotation.RequestAttribute\n+import org.springframework.web.reactive.function.client.ClientRequest\n+import org.springframework.web.reactive.function.client.ExchangeFunction\n+import org.springframework.web.reactive.function.client.WebClient\n+import org.springframework.web.service.annotation.GetExchange\n+import org.springframework.web.service.invoker.HttpServiceProxyFactory\n+import reactor.core.publisher.Mono\n+import reactor.test.StepVerifier\n+import java.time.Duration\n+import java.util.function.Consumer\n+\n+/**\n+ * Integration tests for [HTTP Service proxy][HttpServiceProxyFactory]\n+ * using [WebClient] and [MockWebServer].\n+ *\n+ * @author DongHyeon Kim (wplong11)\n+ */\n+class WebClientHttpServiceProxyKotlinTests {\n+\tprivate var server: MockWebServer? = null",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1086638162",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 29527,
        "pr_file": "spring-webflux/src/test/java/org/springframework/web/reactive/function/client/support/WebClientHttpServiceProxyKotlinTests.kt",
        "discussion_id": "1086638162",
        "commented_code": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2002-2022 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.web.reactive.function.client.support\n+\n+import kotlinx.coroutines.reactor.mono\n+import kotlinx.coroutines.runBlocking\n+import okhttp3.mockwebserver.MockResponse\n+import okhttp3.mockwebserver.MockWebServer\n+import org.assertj.core.api.Assertions\n+import org.junit.jupiter.api.AfterEach\n+import org.junit.jupiter.api.BeforeEach\n+import org.junit.jupiter.api.Test\n+import org.springframework.web.bind.annotation.RequestAttribute\n+import org.springframework.web.reactive.function.client.ClientRequest\n+import org.springframework.web.reactive.function.client.ExchangeFunction\n+import org.springframework.web.reactive.function.client.WebClient\n+import org.springframework.web.service.annotation.GetExchange\n+import org.springframework.web.service.invoker.HttpServiceProxyFactory\n+import reactor.core.publisher.Mono\n+import reactor.test.StepVerifier\n+import java.time.Duration\n+import java.util.function.Consumer\n+\n+/**\n+ * Integration tests for [HTTP Service proxy][HttpServiceProxyFactory]\n+ * using [WebClient] and [MockWebServer].\n+ *\n+ * @author DongHyeon Kim (wplong11)\n+ */\n+class WebClientHttpServiceProxyKotlinTests {\n+\tprivate var server: MockWebServer? = null",
        "comment_created_at": "2023-01-25T13:26:16+00:00",
        "comment_author": "sdeleuze",
        "comment_body": "Please turn it to `private lateinit var server: MockWebServer` in order to be able to remove the unnecessary null checks.",
        "pr_file_module": null
      }
    ]
  }
]