[
  {
    "discussion_id": "2124057196",
    "pr_number": 34820,
    "pr_file": "spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java",
    "created_at": "2025-06-03T14:35:13+00:00",
    "commented_code": "}\n \t\t\t}\n \t\t\timports.addAll(sourceClass.getAnnotationAttributes(Import.class.getName(), \"value\"));\n+\n+\t\t\tfor (SourceClass ifc : sourceClass.getInterfaces()) {\n+\t\t\t\tcollectImports(ifc, imports, visited);\n+\t\t\t}",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "2124057196",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 34820,
        "pr_file": "spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java",
        "discussion_id": "2124057196",
        "commented_code": "@@ -565,6 +569,10 @@ private void collectImports(SourceClass sourceClass, Set<SourceClass> imports, S\n \t\t\t\t}\n \t\t\t}\n \t\t\timports.addAll(sourceClass.getAnnotationAttributes(Import.class.getName(), \"value\"));\n+\n+\t\t\tfor (SourceClass ifc : sourceClass.getInterfaces()) {\n+\t\t\t\tcollectImports(ifc, imports, visited);\n+\t\t\t}",
        "comment_created_at": "2025-06-03T14:35:13+00:00",
        "comment_author": "sbrannen",
        "comment_body": "Please move the interface search above the annotation search on the current class (i.e., directly under `if (visited.add(sourceClass)) {`).\r\n\r\nAlso, please add a test which verifies that locally declared `@Import` annotations are processed _after_ `@Import` annotations discovered on implemented interfaces. For example, a bean imported from a local `@Import` annotation should be able to override a bean imported via an `@Import` declaration on an implemented interface.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2126313324",
    "pr_number": 34820,
    "pr_file": "spring-context/src/test/java/org/springframework/context/annotation/ImportSelectorTests.java",
    "created_at": "2025-06-04T10:58:06+00:00",
    "commented_code": "assertThat(TestImportGroup.environment).isEqualTo(context.getEnvironment());\n \t}\n \n+\t@Test\n+\tvoid importAnnotationOnImplementedInterfaceIsRespected() {\n+\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n+\t\t\t\tInterfaceBasedConfig.class);\n+\n+\t\tassertThat(context.getBean(ImportedConfig.class)).isNotNull();\n+\t\tassertThat(context.getBean(ImportedBean.class)).isNotNull();\n+\t\tassertThat(context.getBean(ImportedBean.class).name()).isEqualTo(\"imported\");\n+\t}\n+\n+\t@Test\n+\tvoid localImportShouldOverrideInterfaceImport() {\n+\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n+\t\t\t\tOverridingConfig.class);\n+\n+\t\tassertThat(context.getBean(ImportedConfig.class)).isNotNull();\n+\t\tassertThat(context.getBean(ImportedBean.class)).isNotNull();\n+\t\tassertThat(context.getBean(ImportedBean.class).name()).isEqualTo(\"from class\");\n+\t}\n+\n+\t@Import(ImportedConfig.class)\n+\tinterface ConfigImportMarker {\n+\t}\n+\n+\t@Configuration\n+\tstatic class InterfaceBasedConfig implements ConfigImportMarker {\n+\t}\n+\n+\t@Configuration\n+\tstatic class OverridingConfig implements ConfigImportMarker {",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "2126313324",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 34820,
        "pr_file": "spring-context/src/test/java/org/springframework/context/annotation/ImportSelectorTests.java",
        "discussion_id": "2126313324",
        "commented_code": "@@ -203,6 +204,66 @@ void invokeAwareMethodsInImportGroup() {\n \t\tassertThat(TestImportGroup.environment).isEqualTo(context.getEnvironment());\n \t}\n \n+\t@Test\n+\tvoid importAnnotationOnImplementedInterfaceIsRespected() {\n+\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n+\t\t\t\tInterfaceBasedConfig.class);\n+\n+\t\tassertThat(context.getBean(ImportedConfig.class)).isNotNull();\n+\t\tassertThat(context.getBean(ImportedBean.class)).isNotNull();\n+\t\tassertThat(context.getBean(ImportedBean.class).name()).isEqualTo(\"imported\");\n+\t}\n+\n+\t@Test\n+\tvoid localImportShouldOverrideInterfaceImport() {\n+\t\tAnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n+\t\t\t\tOverridingConfig.class);\n+\n+\t\tassertThat(context.getBean(ImportedConfig.class)).isNotNull();\n+\t\tassertThat(context.getBean(ImportedBean.class)).isNotNull();\n+\t\tassertThat(context.getBean(ImportedBean.class).name()).isEqualTo(\"from class\");\n+\t}\n+\n+\t@Import(ImportedConfig.class)\n+\tinterface ConfigImportMarker {\n+\t}\n+\n+\t@Configuration\n+\tstatic class InterfaceBasedConfig implements ConfigImportMarker {\n+\t}\n+\n+\t@Configuration\n+\tstatic class OverridingConfig implements ConfigImportMarker {",
        "comment_created_at": "2025-06-04T10:58:06+00:00",
        "comment_author": "sbrannen",
        "comment_body": "`OverridingConfig` should be annotated with `@Import` (and import something that overrides the `ImportedBean`) in order for `localImportShouldOverrideInterfaceImport()` to test this use case.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1327321202",
    "pr_number": 27285,
    "pr_file": "spring-test/src/main/java/org/springframework/test/context/jdbc/Sql.java",
    "created_at": "2023-09-15T13:52:56+00:00",
    "commented_code": "*/\n \tSqlConfig config() default @SqlConfig;\n \n-\n \t/**\n \t * Enumeration of <em>phases</em> that dictate when SQL scripts are executed.\n \t */\n \tenum ExecutionPhase {\n \n+\t\t/**\n+\t\t * The configured SQL scripts and statements will be executed\n+\t\t * once <em>before</em> any test method is run.\n+\t\t */\n+\t\tBEFORE_TEST_CLASS,",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1327321202",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27285,
        "pr_file": "spring-test/src/main/java/org/springframework/test/context/jdbc/Sql.java",
        "discussion_id": "1327321202",
        "commented_code": "@@ -148,12 +153,23 @@\n \t */\n \tSqlConfig config() default @SqlConfig;\n \n-\n \t/**\n \t * Enumeration of <em>phases</em> that dictate when SQL scripts are executed.\n \t */\n \tenum ExecutionPhase {\n \n+\t\t/**\n+\t\t * The configured SQL scripts and statements will be executed\n+\t\t * once <em>before</em> any test method is run.\n+\t\t */\n+\t\tBEFORE_TEST_CLASS,",
        "comment_created_at": "2023-09-15T13:52:56+00:00",
        "comment_author": "snicoll",
        "comment_body": "It's a bit strange to have a method level annotation that can dictate something that applies to the whole class.",
        "pr_file_module": null
      },
      {
        "comment_id": "1327369273",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27285,
        "pr_file": "spring-test/src/main/java/org/springframework/test/context/jdbc/Sql.java",
        "discussion_id": "1327321202",
        "commented_code": "@@ -148,12 +153,23 @@\n \t */\n \tSqlConfig config() default @SqlConfig;\n \n-\n \t/**\n \t * Enumeration of <em>phases</em> that dictate when SQL scripts are executed.\n \t */\n \tenum ExecutionPhase {\n \n+\t\t/**\n+\t\t * The configured SQL scripts and statements will be executed\n+\t\t * once <em>before</em> any test method is run.\n+\t\t */\n+\t\tBEFORE_TEST_CLASS,",
        "comment_created_at": "2023-09-15T14:28:55+00:00",
        "comment_author": "aahlenst",
        "comment_body": "I'm aware that it's not optimal. As mentioned in the PR description, there are more consistency issues. My question is: Is this acceptable? Or would it be better to introduce a new annotation like `@SqlPerClass` (might not be the best name)? The upside would be that the problems around `MergeMode` would be gone, too.",
        "pr_file_module": null
      },
      {
        "comment_id": "1327946308",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27285,
        "pr_file": "spring-test/src/main/java/org/springframework/test/context/jdbc/Sql.java",
        "discussion_id": "1327321202",
        "commented_code": "@@ -148,12 +153,23 @@\n \t */\n \tSqlConfig config() default @SqlConfig;\n \n-\n \t/**\n \t * Enumeration of <em>phases</em> that dictate when SQL scripts are executed.\n \t */\n \tenum ExecutionPhase {\n \n+\t\t/**\n+\t\t * The configured SQL scripts and statements will be executed\n+\t\t * once <em>before</em> any test method is run.\n+\t\t */\n+\t\tBEFORE_TEST_CLASS,",
        "comment_created_at": "2023-09-16T10:54:50+00:00",
        "comment_author": "aahlenst",
        "comment_body": "[DirtiesContext](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/annotation/DirtiesContext.html) has a similar design, but exposes two elements:`classMode` and `methodMode`. Still, nothing prevents me from annotating a method with `@DirtiesContext(classMode = BEFORE_CLASS)` which has no effect.",
        "pr_file_module": null
      },
      {
        "comment_id": "1327970100",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27285,
        "pr_file": "spring-test/src/main/java/org/springframework/test/context/jdbc/Sql.java",
        "discussion_id": "1327321202",
        "commented_code": "@@ -148,12 +153,23 @@\n \t */\n \tSqlConfig config() default @SqlConfig;\n \n-\n \t/**\n \t * Enumeration of <em>phases</em> that dictate when SQL scripts are executed.\n \t */\n \tenum ExecutionPhase {\n \n+\t\t/**\n+\t\t * The configured SQL scripts and statements will be executed\n+\t\t * once <em>before</em> any test method is run.\n+\t\t */\n+\t\tBEFORE_TEST_CLASS,",
        "comment_created_at": "2023-09-16T14:48:48+00:00",
        "comment_author": "sbrannen",
        "comment_body": "Before @aahlenst posted those last two comments, I was also going to point out that there is a precedent for this, namely `@DirtiesContext`.\r\n\r\nI agree that it is a bit strange for it to be possible to specify a class-level setting at the method level that simply gets ignored; however, I am not in favor of introducing yet another SQL-related annotation for this purpose. We already have quite a few. And I don't think it necessarily warrants an additional enum and annotation attribute.\r\n\r\nAs it stands in the proposal, the addition of the two new enum constants in `ExecutionPhase` makes it impossible for a user to configure conflicting phases for a given `@Sql` declaration, and that's a good thing.\r\n\r\nFWIW, I have never heard any complaints from users about the `ClassMode` and `MethodMode` dichotomy in `@DirtiesContext`, and the documentation clearly states that setting an inappropriate mode \"has no meaning\" (i.e., will be ignored).\r\n\r\nIn light of that, I am OK with the PR as-is.",
        "pr_file_module": null
      },
      {
        "comment_id": "1328061473",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27285,
        "pr_file": "spring-test/src/main/java/org/springframework/test/context/jdbc/Sql.java",
        "discussion_id": "1327321202",
        "commented_code": "@@ -148,12 +153,23 @@\n \t */\n \tSqlConfig config() default @SqlConfig;\n \n-\n \t/**\n \t * Enumeration of <em>phases</em> that dictate when SQL scripts are executed.\n \t */\n \tenum ExecutionPhase {\n \n+\t\t/**\n+\t\t * The configured SQL scripts and statements will be executed\n+\t\t * once <em>before</em> any test method is run.\n+\t\t */\n+\t\tBEFORE_TEST_CLASS,",
        "comment_created_at": "2023-09-17T08:18:57+00:00",
        "comment_author": "snicoll",
        "comment_body": "Can we at least throw an exception if you're using the class-level mode on a method?",
        "pr_file_module": null
      },
      {
        "comment_id": "1328082993",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27285,
        "pr_file": "spring-test/src/main/java/org/springframework/test/context/jdbc/Sql.java",
        "discussion_id": "1327321202",
        "commented_code": "@@ -148,12 +153,23 @@\n \t */\n \tSqlConfig config() default @SqlConfig;\n \n-\n \t/**\n \t * Enumeration of <em>phases</em> that dictate when SQL scripts are executed.\n \t */\n \tenum ExecutionPhase {\n \n+\t\t/**\n+\t\t * The configured SQL scripts and statements will be executed\n+\t\t * once <em>before</em> any test method is run.\n+\t\t */\n+\t\tBEFORE_TEST_CLASS,",
        "comment_created_at": "2023-09-17T11:40:17+00:00",
        "comment_author": "sbrannen",
        "comment_body": "Yes, we can definitely throw an exception for inappropriate user configuration.\r\n\r\n`IllegalArgumentException` sounds reasonable to me.",
        "pr_file_module": null
      },
      {
        "comment_id": "1328093201",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27285,
        "pr_file": "spring-test/src/main/java/org/springframework/test/context/jdbc/Sql.java",
        "discussion_id": "1327321202",
        "commented_code": "@@ -148,12 +153,23 @@\n \t */\n \tSqlConfig config() default @SqlConfig;\n \n-\n \t/**\n \t * Enumeration of <em>phases</em> that dictate when SQL scripts are executed.\n \t */\n \tenum ExecutionPhase {\n \n+\t\t/**\n+\t\t * The configured SQL scripts and statements will be executed\n+\t\t * once <em>before</em> any test method is run.\n+\t\t */\n+\t\tBEFORE_TEST_CLASS,",
        "comment_created_at": "2023-09-17T13:17:37+00:00",
        "comment_author": "aahlenst",
        "comment_body": "We throw now.\r\n\r\nJust thinking aloud: If `@Sql` has this, wouldn't it be nice if `@DirtiesContext` had it, too? Or would that be too disruptive years after the introduction?",
        "pr_file_module": null
      },
      {
        "comment_id": "1342153327",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27285,
        "pr_file": "spring-test/src/main/java/org/springframework/test/context/jdbc/Sql.java",
        "discussion_id": "1327321202",
        "commented_code": "@@ -148,12 +153,23 @@\n \t */\n \tSqlConfig config() default @SqlConfig;\n \n-\n \t/**\n \t * Enumeration of <em>phases</em> that dictate when SQL scripts are executed.\n \t */\n \tenum ExecutionPhase {\n \n+\t\t/**\n+\t\t * The configured SQL scripts and statements will be executed\n+\t\t * once <em>before</em> any test method is run.\n+\t\t */\n+\t\tBEFORE_TEST_CLASS,",
        "comment_created_at": "2023-10-01T15:46:33+00:00",
        "comment_author": "sbrannen",
        "comment_body": "> We throw now.\r\n\r\nThanks\r\n\r\n> Just thinking aloud: If `@Sql` has this, wouldn't it be nice if `@DirtiesContext` had it, too? Or would that be too disruptive years after the introduction?\r\n\r\n`@Sql` is different because it has a single enum-based `executionPhase` attribute, which means we can easily detect a user configuration error.\r\n\r\nWhereas, `@DirtiesContext` has two mutually exclusive enum-based attributes: `classMode` and `methodMode`, and each of those has a `default` value. Thus, we cannot actually detect a user configuration error.\r\n\r\nThe only way to be able to detect a user configuration error for `@DirtiesContext` would be to introduce new `DEFAULT` enum constants in `ClassMode` and `MethodMode` and use those as the `default` attribute values going forward.\r\n\r\nHowever, that would be a breaking change for any users who had inadvertently explicitly supplied the previous default values for those attributes.\r\n\r\nPlus, it would make things a bit more cumbersome.\r\n\r\nIn light of the above, I don't think we should make any changes to `@DirtiesContext` in this regard this late in the game.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "357997163",
    "pr_number": 24002,
    "pr_file": "spring-context/src/main/java/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.java",
    "created_at": "2019-12-15T18:40:54+00:00",
    "commented_code": "}\n \t}\n \n-\t/**\n-\t * Collect any {@link AsyncConfigurer} beans through autowiring.\n-\t */\n-\t@Autowired(required = false)\n-\tvoid setConfigurers(Collection<AsyncConfigurer> configurers) {\n-\t\tif (CollectionUtils.isEmpty(configurers)) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (configurers.size() > 1) {\n-\t\t\tthrow new IllegalStateException(\"Only one AsyncConfigurer may exist\");\n-\t\t}\n-\t\tAsyncConfigurer configurer = configurers.iterator().next();\n-\t\tthis.executor = configurer::getAsyncExecutor;\n-\t\tthis.exceptionHandler = configurer::getAsyncUncaughtExceptionHandler;\n+\t@Autowired\n+\tvoid setConfigurers(Optional<AsyncConfigurer> configurerOptional) {",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "357997163",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24002,
        "pr_file": "spring-context/src/main/java/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.java",
        "discussion_id": "357997163",
        "commented_code": "@@ -62,20 +61,12 @@ public void setImportMetadata(AnnotationMetadata importMetadata) {\n \t\t}\n \t}\n \n-\t/**\n-\t * Collect any {@link AsyncConfigurer} beans through autowiring.\n-\t */\n-\t@Autowired(required = false)\n-\tvoid setConfigurers(Collection<AsyncConfigurer> configurers) {\n-\t\tif (CollectionUtils.isEmpty(configurers)) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (configurers.size() > 1) {\n-\t\t\tthrow new IllegalStateException(\"Only one AsyncConfigurer may exist\");\n-\t\t}\n-\t\tAsyncConfigurer configurer = configurers.iterator().next();\n-\t\tthis.executor = configurer::getAsyncExecutor;\n-\t\tthis.exceptionHandler = configurer::getAsyncUncaughtExceptionHandler;\n+\t@Autowired\n+\tvoid setConfigurers(Optional<AsyncConfigurer> configurerOptional) {",
        "comment_created_at": "2019-12-15T18:40:54+00:00",
        "comment_author": "spac-valentin",
        "comment_body": "In my opinion, a better approach would be to create a new function which clearly shows the intent (if exists, only one configurer should be used) and deprecate the old one. This would still allow configuration using `@Primary` \r\n```\r\n@Autowired(required = false)\r\nvoid setAsyncConfigurer(AsyncConfigurer asyncConfigurer)\r\n``` ",
        "pr_file_module": null
      },
      {
        "comment_id": "359012645",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24002,
        "pr_file": "spring-context/src/main/java/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.java",
        "discussion_id": "357997163",
        "commented_code": "@@ -62,20 +61,12 @@ public void setImportMetadata(AnnotationMetadata importMetadata) {\n \t\t}\n \t}\n \n-\t/**\n-\t * Collect any {@link AsyncConfigurer} beans through autowiring.\n-\t */\n-\t@Autowired(required = false)\n-\tvoid setConfigurers(Collection<AsyncConfigurer> configurers) {\n-\t\tif (CollectionUtils.isEmpty(configurers)) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (configurers.size() > 1) {\n-\t\t\tthrow new IllegalStateException(\"Only one AsyncConfigurer may exist\");\n-\t\t}\n-\t\tAsyncConfigurer configurer = configurers.iterator().next();\n-\t\tthis.executor = configurer::getAsyncExecutor;\n-\t\tthis.exceptionHandler = configurer::getAsyncUncaughtExceptionHandler;\n+\t@Autowired\n+\tvoid setConfigurers(Optional<AsyncConfigurer> configurerOptional) {",
        "comment_created_at": "2019-12-17T20:30:33+00:00",
        "comment_author": "michaldo",
        "comment_body": "I agree, that looks better comparing to version with `Optional`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "810432022",
    "pr_number": 27986,
    "pr_file": "spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java",
    "created_at": "2022-02-19T02:05:02+00:00",
    "commented_code": "}\n \n \t\tBeanDefinition existingDefinition = this.beanDefinitionMap.get(beanName);\n+\t\tif (isAllowBeanDefinitionOverriding() || existingDefinition == null) {",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "810432022",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27986,
        "pr_file": "spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java",
        "discussion_id": "810432022",
        "commented_code": "@@ -965,11 +965,15 @@ public void registerBeanDefinition(String beanName, BeanDefinition beanDefinitio\n \t\t}\n \n \t\tBeanDefinition existingDefinition = this.beanDefinitionMap.get(beanName);\n+\t\tif (isAllowBeanDefinitionOverriding() || existingDefinition == null) {",
        "comment_created_at": "2022-02-19T02:05:02+00:00",
        "comment_author": "bironran",
        "comment_body": "That is dangerous. It can hide redefinition that are not identical if `isAllowBeanDefinitionOverriding()` returns false. e.g. X is defined, then X' (same name, different definition) is defined somewhere else. Whether X or X' are used is, sometimes, a matter of loading order which can be unpredictable.\r\nIf `isAllowBeanDefinitionOverriding()` is false then the desire of the developer is often to be notified about such cases and not hide them (at least that was the behavior until now).",
        "pr_file_module": null
      }
    ]
  }
]