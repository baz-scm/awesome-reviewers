[
  {
    "discussion_id": "1738348369",
    "pr_number": 33449,
    "pr_file": "framework-docs/modules/ROOT/pages/core/aop/proxying.adoc",
    "created_at": "2024-08-30T09:59:06+00:00",
    "commented_code": "----\n \tpublic class SimplePojo implements Pojo {\n \n+\t    @Autowired\n+        private SimplePojo self;",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1738348369",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 33449,
        "pr_file": "framework-docs/modules/ROOT/pages/core/aop/proxying.adoc",
        "discussion_id": "1738348369",
        "commented_code": "@@ -205,9 +204,12 @@ Java::\n ----\n \tpublic class SimplePojo implements Pojo {\n \n+\t    @Autowired\n+        private SimplePojo self;",
        "comment_created_at": "2024-08-30T09:59:06+00:00",
        "comment_author": "sbrannen",
        "comment_body": "```suggestion\r\n        private Pojo self;\r\n```\r\n\r\nUnless you are certain CGLIB proxies are being created, this would need to be `Pojo`.\r\n\r\nThough, there's no need to update this PR. I'll address that after merging.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "613420357",
    "pr_number": 26805,
    "pr_file": "src/docs/asciidoc/core/core-beans.adoc",
    "created_at": "2021-04-14T16:58:00+00:00",
    "commented_code": "[source,java,indent=0,subs=\"verbatim,quotes\",role=\"primary\"]\n .Java\n ----\n-\t@Component\n+\t@Configuration",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "613420357",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 26805,
        "pr_file": "src/docs/asciidoc/core/core-beans.adoc",
        "discussion_id": "613420357",
        "commented_code": "@@ -6642,7 +6642,7 @@ annotated classes. The following example shows how to do so:\n [source,java,indent=0,subs=\"verbatim,quotes\",role=\"primary\"]\n .Java\n ----\n-\t@Component\n+\t@Configuration",
        "comment_created_at": "2021-04-14T16:58:00+00:00",
        "comment_author": "hrybs",
        "comment_body": "The documentation is correct.\r\nWe can define methods with **@Bean** annotation inside any **@Component** classes.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "613420479",
    "pr_number": 26805,
    "pr_file": "src/docs/asciidoc/core/core-beans.adoc",
    "created_at": "2021-04-14T16:58:12+00:00",
    "commented_code": "[source,kotlin,indent=0,subs=\"verbatim,quotes\",role=\"secondary\"]\n .Kotlin\n ----\n-\t@Component\n+\t@Configuration",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "613420479",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 26805,
        "pr_file": "src/docs/asciidoc/core/core-beans.adoc",
        "discussion_id": "613420479",
        "commented_code": "@@ -6659,7 +6659,7 @@ annotated classes. The following example shows how to do so:\n [source,kotlin,indent=0,subs=\"verbatim,quotes\",role=\"secondary\"]\n .Kotlin\n ----\n-\t@Component\n+\t@Configuration",
        "comment_created_at": "2021-04-14T16:58:12+00:00",
        "comment_author": "hrybs",
        "comment_body": "The documentation is correct.\r\nWe can define methods with **@Bean** annotation inside any **@Component** classes.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "119540436",
    "pr_number": 1441,
    "pr_file": "src/asciidoc/core-beans.adoc",
    "created_at": "2017-06-01T07:00:46+00:00",
    "commented_code": "}\n ----\n \n-[NOTE]\n+[WARNING]\n ====\n-`@Autowired`, `@Inject`, `@Resource`, and `@Value` annotations are handled by Spring\n+`@Autowired`, `@Inject`, `@Resource`, and `@Value`  annotations are handled by Spring\n `BeanPostProcessor` implementations which in turn means that you __cannot__ apply these\n annotations within your own `BeanPostProcessor` or `BeanFactoryPostProcessor` types (if\n any). These types must be 'wired up' explicitly via XML or using a Spring `@Bean` method.\n-====\n \n+Also, do not use `@Autowired`, `@Inject`, and `@Resource` annotations within a BeanFactory class nor any of its dependencies. Doing so can result in a `BeanCurrentlyInCreationException`. The `@Value` annotation may also cause the problem, d\n+epending on whether it causes a bean to be instantiated.\n+====",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "119540436",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1441,
        "pr_file": "src/asciidoc/core-beans.adoc",
        "discussion_id": "119540436",
        "commented_code": "@@ -4562,14 +4562,16 @@ automatically resolved, with no special setup necessary.\n \t}\n ----\n \n-[NOTE]\n+[WARNING]\n ====\n-`@Autowired`, `@Inject`, `@Resource`, and `@Value` annotations are handled by Spring\n+`@Autowired`, `@Inject`, `@Resource`, and `@Value`  annotations are handled by Spring\n `BeanPostProcessor` implementations which in turn means that you __cannot__ apply these\n annotations within your own `BeanPostProcessor` or `BeanFactoryPostProcessor` types (if\n any). These types must be 'wired up' explicitly via XML or using a Spring `@Bean` method.\n-====\n \n+Also, do not use `@Autowired`, `@Inject`, and `@Resource` annotations within a BeanFactory class nor any of its dependencies. Doing so can result in a `BeanCurrentlyInCreationException`. The `@Value` annotation may also cause the problem, d\n+epending on whether it causes a bean to be instantiated.\n+====",
        "comment_created_at": "2017-06-01T07:00:46+00:00",
        "comment_author": "snicoll",
        "comment_body": "that looks like a complete different conversation to me. What do you mean by \"within a `BeanFactory`\". I wouldn't expect anyone to use those annotations there (and that's not very typical in user code anyway).\r\n\r\nThe `@Value` is yet another thing.\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "119612265",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1441,
        "pr_file": "src/asciidoc/core-beans.adoc",
        "discussion_id": "119540436",
        "commented_code": "@@ -4562,14 +4562,16 @@ automatically resolved, with no special setup necessary.\n \t}\n ----\n \n-[NOTE]\n+[WARNING]\n ====\n-`@Autowired`, `@Inject`, `@Resource`, and `@Value` annotations are handled by Spring\n+`@Autowired`, `@Inject`, `@Resource`, and `@Value`  annotations are handled by Spring\n `BeanPostProcessor` implementations which in turn means that you __cannot__ apply these\n annotations within your own `BeanPostProcessor` or `BeanFactoryPostProcessor` types (if\n any). These types must be 'wired up' explicitly via XML or using a Spring `@Bean` method.\n-====\n \n+Also, do not use `@Autowired`, `@Inject`, and `@Resource` annotations within a BeanFactory class nor any of its dependencies. Doing so can result in a `BeanCurrentlyInCreationException`. The `@Value` annotation may also cause the problem, d\n+epending on whether it causes a bean to be instantiated.\n+====",
        "comment_created_at": "2017-06-01T13:25:12+00:00",
        "comment_author": "Buzzardo",
        "comment_body": "I thought about making it into a separate warning. That would have resulted in two adjacent warnings that addressed the same set of annotations, so I combined them. I can split them, though, if that works better.\r\n\r\nI didn't have the problem. Someone else did. Then the topic came up on Slack, where various folks mentioned that they had tried this and had trouble. I thought it rated a documentation update.\r\n\r\nSeveral people have tried to use those annotations within a BeanFactory (or the dependencies of a BeanFactory) and have had trouble as a result. You can see the evidence of it in the following issues:\r\nhttps://jira.spring.io/browse/SPR-9255\r\nhttps://jira.spring.io/browse/SPR-8704\r\nhttps://jira.spring.io/browse/SPR-10349\r\n\r\nIf you can tell me additional details around using @Value in this context, please do. I'll be happy to add them to the document.",
        "pr_file_module": null
      },
      {
        "comment_id": "119618851",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1441,
        "pr_file": "src/asciidoc/core-beans.adoc",
        "discussion_id": "119540436",
        "commented_code": "@@ -4562,14 +4562,16 @@ automatically resolved, with no special setup necessary.\n \t}\n ----\n \n-[NOTE]\n+[WARNING]\n ====\n-`@Autowired`, `@Inject`, `@Resource`, and `@Value` annotations are handled by Spring\n+`@Autowired`, `@Inject`, `@Resource`, and `@Value`  annotations are handled by Spring\n `BeanPostProcessor` implementations which in turn means that you __cannot__ apply these\n annotations within your own `BeanPostProcessor` or `BeanFactoryPostProcessor` types (if\n any). These types must be 'wired up' explicitly via XML or using a Spring `@Bean` method.\n-====\n \n+Also, do not use `@Autowired`, `@Inject`, and `@Resource` annotations within a BeanFactory class nor any of its dependencies. Doing so can result in a `BeanCurrentlyInCreationException`. The `@Value` annotation may also cause the problem, d\n+epending on whether it causes a bean to be instantiated.\n+====",
        "comment_created_at": "2017-06-01T13:51:00+00:00",
        "comment_author": "rstoyanchev",
        "comment_body": "Good find digging up those tickets. \r\n\r\nOne of tickets SPR-8704 shows that it was turned into a documentation task and documentation updates were applied on this topic already including both master https://github.com/spring-projects/spring-framework/commit/fd41f63ec065b890a539451532392fa9b5bb0b28 and 4.3 https://github.com/spring-projects/spring-framework/commit/28e114b569d0e3e19ea0e0160704b6726810f428.\r\n\r\nI think the explanation here is not very good because explaining things in terms of the exception doesn't help much and made me go lookup the javadoc for that exception which didn't bring a more satisfying answer either:\r\n> Doing so can result in a `BeanCurrentlyInCreationException`\r\n\r\nI find this explanation under the ticket much more useful because it tells me why I shouldn't do it (interface vs annotation based dependency injection):\r\n>  we tend to generally recommend against using annotation-driven injection in FactoryBean implementations. Since such classes implement an interface-based contract to begin with, I would rather design them to use programmatic BeanFactory lookups for the target beans needed.\r\n\r\n@jhoeller from the above linked tickets it seems that quite a few people are running into this and documentation alone is not effective in preventing time wasted debugging. If there is anything that could be done to detect or proactively reject..\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "119631468",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1441,
        "pr_file": "src/asciidoc/core-beans.adoc",
        "discussion_id": "119540436",
        "commented_code": "@@ -4562,14 +4562,16 @@ automatically resolved, with no special setup necessary.\n \t}\n ----\n \n-[NOTE]\n+[WARNING]\n ====\n-`@Autowired`, `@Inject`, `@Resource`, and `@Value` annotations are handled by Spring\n+`@Autowired`, `@Inject`, `@Resource`, and `@Value`  annotations are handled by Spring\n `BeanPostProcessor` implementations which in turn means that you __cannot__ apply these\n annotations within your own `BeanPostProcessor` or `BeanFactoryPostProcessor` types (if\n any). These types must be 'wired up' explicitly via XML or using a Spring `@Bean` method.\n-====\n \n+Also, do not use `@Autowired`, `@Inject`, and `@Resource` annotations within a BeanFactory class nor any of its dependencies. Doing so can result in a `BeanCurrentlyInCreationException`. The `@Value` annotation may also cause the problem, d\n+epending on whether it causes a bean to be instantiated.\n+====",
        "comment_created_at": "2017-06-01T14:36:29+00:00",
        "comment_author": "Buzzardo",
        "comment_body": "I find the explanation at the bottom of https://github.com/spring-projects/spring-framework/commit/28e114b569d0e3e19ea0e0160704b6726810f428 to be insufficient (no offense meant). It should be a warning. It doesn't mention the consequences: getting an exception.\r\n\r\nIt's a comment in code, and I'm working on the reference guide. Also, it’s about FactoryBean, and I’m dealing with BeanFactory.  If we need to call out the connection between the two to address the issue of these annotations causing a synchronization problem that sometimes raises an exception, please let me know.\r\n\r\nAs for this particular content, suppose we borrow a bit of content from that code comment and make a warning that reads as follows: \r\n\r\n[WARNING]\r\nAdding any of the `@Autowired`, `@Inject`, or `@Resource` annotations to a BeanFactory object or any of its dependencies can result in an `BeanCurrentlyInCreationException`, as the injections performed by those annotations may happen before the BeanFactory object has been completed.\r\n\r\nI still need to know whether to include @Value in the list of annotations that can cause the problem.\r\n\r\nThanks.",
        "pr_file_module": null
      },
      {
        "comment_id": "119637597",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1441,
        "pr_file": "src/asciidoc/core-beans.adoc",
        "discussion_id": "119540436",
        "commented_code": "@@ -4562,14 +4562,16 @@ automatically resolved, with no special setup necessary.\n \t}\n ----\n \n-[NOTE]\n+[WARNING]\n ====\n-`@Autowired`, `@Inject`, `@Resource`, and `@Value` annotations are handled by Spring\n+`@Autowired`, `@Inject`, `@Resource`, and `@Value`  annotations are handled by Spring\n `BeanPostProcessor` implementations which in turn means that you __cannot__ apply these\n annotations within your own `BeanPostProcessor` or `BeanFactoryPostProcessor` types (if\n any). These types must be 'wired up' explicitly via XML or using a Spring `@Bean` method.\n-====\n \n+Also, do not use `@Autowired`, `@Inject`, and `@Resource` annotations within a BeanFactory class nor any of its dependencies. Doing so can result in a `BeanCurrentlyInCreationException`. The `@Value` annotation may also cause the problem, d\n+epending on whether it causes a bean to be instantiated.\n+====",
        "comment_created_at": "2017-06-01T14:56:04+00:00",
        "comment_author": "gregturn",
        "comment_body": "If FactoryBean and BeanFactory are in the same text, perhaps an admonition like \"Don't confuse FactoryBean, a factory-method built bean with BeanFactory, an internal blah blah for creating beans\" is called for?",
        "pr_file_module": null
      }
    ]
  }
]