[
  {
    "discussion_id": "91990214",
    "pr_number": 1255,
    "pr_file": "spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java",
    "created_at": "2016-12-12T17:00:21+00:00",
    "commented_code": "package org.springframework.core.annotation;\n \n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.subpackage.NonPublicAnnotatedClass;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.ClassUtils;\n+import org.springframework.util.ReflectionUtils;\n+",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "91990214",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1255,
        "pr_file": "spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java",
        "discussion_id": "91990214",
        "commented_code": "@@ -16,6 +16,16 @@\n \n package org.springframework.core.annotation;\n \n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.subpackage.NonPublicAnnotatedClass;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.ClassUtils;\n+import org.springframework.util.ReflectionUtils;\n+",
        "comment_created_at": "2016-12-12T17:00:21+00:00",
        "comment_author": "sbrannen",
        "comment_body": "In general, contributors are required to adhere to the [Spring Framework Code Style](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Code-Style). So please familiarize yourself with that and rework your PR.\r\n\r\nFor example, you need to undo **all** changes to import ordering and static imports throughout all changed classes.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "787832879",
    "pr_number": 27945,
    "pr_file": "spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyDynamicElementReader.java",
    "created_at": "2022-01-19T14:55:17+00:00",
    "commented_code": "+/*\n+ * Copyright 2002-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.beans.factory.groovy;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Map;\n+\n+import groovy.lang.Closure;\n+import groovy.lang.GroovyObject;\n+import groovy.lang.GroovyObjectSupport;\n+import groovy.lang.Writable;\n+import groovy.xml.StreamingMarkupBuilder;\n+import org.w3c.dom.Element;\n+\n+import org.springframework.beans.factory.config.BeanDefinitionHolder;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.beans.factory.xml.BeanDefinitionParserDelegate;\n+\n+/**\n+ * Used by GroovyBeanDefinitionReader to read a Spring XML namespace expression\n+ * in the Groovy DSL.\n+ *\n+ * @author Jeff Brown\n+ * @author Juergen Hoeller\n+ * @since 4.0\n+ */\n+class GroovyDynamicElementReader extends GroovyObjectSupport {\n+\n+\tprivate final String rootNamespace;\n+\n+\tprivate final Map<String, String> xmlNamespaces;\n+\n+\tprivate final BeanDefinitionParserDelegate delegate;\n+\n+\tprivate final GroovyBeanDefinitionWrapper beanDefinition;\n+\n+\tprotected final boolean decorating;\n+\n+\tprivate boolean callAfterInvocation = true;\n+\n+\n+\tpublic GroovyDynamicElementReader(String namespace, Map<String, String> namespaceMap,\n+\t\t\tBeanDefinitionParserDelegate delegate, GroovyBeanDefinitionWrapper beanDefinition, boolean decorating) {\n+\t\tsuper();\n+\t\tthis.rootNamespace = namespace;\n+\t\tthis.xmlNamespaces = namespaceMap;\n+\t\tthis.delegate = delegate;\n+\t\tthis.beanDefinition = beanDefinition;\n+\t\tthis.decorating = decorating;\n+\t}\n+\n+\n+\t@Override\n+\tpublic Object invokeMethod(String name, Object obj) {\n+\t\tObject[] args = ((Object[])obj);\n+\t\tif (name.equals(\"doCall\")) {\n+\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\tClosure<Object> callable = (Closure<Object>) args[0];\n+\t\t\tcallable.setResolveStrategy(Closure.DELEGATE_FIRST);\n+\t\t\tcallable.setDelegate(this);\n+\t\t\tvar result = callable.call();",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "787832879",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27945,
        "pr_file": "spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyDynamicElementReader.java",
        "discussion_id": "787832879",
        "commented_code": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2002-2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.beans.factory.groovy;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Map;\n+\n+import groovy.lang.Closure;\n+import groovy.lang.GroovyObject;\n+import groovy.lang.GroovyObjectSupport;\n+import groovy.lang.Writable;\n+import groovy.xml.StreamingMarkupBuilder;\n+import org.w3c.dom.Element;\n+\n+import org.springframework.beans.factory.config.BeanDefinitionHolder;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.beans.factory.xml.BeanDefinitionParserDelegate;\n+\n+/**\n+ * Used by GroovyBeanDefinitionReader to read a Spring XML namespace expression\n+ * in the Groovy DSL.\n+ *\n+ * @author Jeff Brown\n+ * @author Juergen Hoeller\n+ * @since 4.0\n+ */\n+class GroovyDynamicElementReader extends GroovyObjectSupport {\n+\n+\tprivate final String rootNamespace;\n+\n+\tprivate final Map<String, String> xmlNamespaces;\n+\n+\tprivate final BeanDefinitionParserDelegate delegate;\n+\n+\tprivate final GroovyBeanDefinitionWrapper beanDefinition;\n+\n+\tprotected final boolean decorating;\n+\n+\tprivate boolean callAfterInvocation = true;\n+\n+\n+\tpublic GroovyDynamicElementReader(String namespace, Map<String, String> namespaceMap,\n+\t\t\tBeanDefinitionParserDelegate delegate, GroovyBeanDefinitionWrapper beanDefinition, boolean decorating) {\n+\t\tsuper();\n+\t\tthis.rootNamespace = namespace;\n+\t\tthis.xmlNamespaces = namespaceMap;\n+\t\tthis.delegate = delegate;\n+\t\tthis.beanDefinition = beanDefinition;\n+\t\tthis.decorating = decorating;\n+\t}\n+\n+\n+\t@Override\n+\tpublic Object invokeMethod(String name, Object obj) {\n+\t\tObject[] args = ((Object[])obj);\n+\t\tif (name.equals(\"doCall\")) {\n+\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\tClosure<Object> callable = (Closure<Object>) args[0];\n+\t\t\tcallable.setResolveStrategy(Closure.DELEGATE_FIRST);\n+\t\t\tcallable.setDelegate(this);\n+\t\t\tvar result = callable.call();",
        "comment_created_at": "2022-01-19T14:55:17+00:00",
        "comment_author": "sbrannen",
        "comment_body": "The team has not yet decided to permit `var` declarations in _production code_ yet, so please use typed variable declarations for the time being.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1768250869",
    "pr_number": 33566,
    "pr_file": "spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java",
    "created_at": "2024-09-20T09:01:01+00:00",
    "commented_code": "private final HttpRequest.Builder builder;\n \n \n-\tpublic JdkClientHttpRequest(HttpMethod httpMethod, URI uri, DataBufferFactory bufferFactory,\n+\tJdkClientHttpRequest(HttpMethod httpMethod, URI uri, DataBufferFactory bufferFactory,",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1768250869",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 33566,
        "pr_file": "spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java",
        "discussion_id": "1768250869",
        "commented_code": "@@ -59,7 +59,7 @@ class JdkClientHttpRequest extends AbstractClientHttpRequest {\n \tprivate final HttpRequest.Builder builder;\n \n \n-\tpublic JdkClientHttpRequest(HttpMethod httpMethod, URI uri, DataBufferFactory bufferFactory,\n+\tJdkClientHttpRequest(HttpMethod httpMethod, URI uri, DataBufferFactory bufferFactory,",
        "comment_created_at": "2024-09-20T09:01:01+00:00",
        "comment_author": "sbrannen",
        "comment_body": "Although I fully understand the desire to remove `public` here, historically the code base often makes constructors `public` even if the enclosing type is not `public`.\r\n\r\nLook at the other `JdkClientHttpRequest` implementation as well as neighboring classes for examples.\r\n\r\nIn light of that, I removed this change when merging the PR.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1716213715",
    "pr_number": 33369,
    "pr_file": "spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java",
    "created_at": "2024-08-14T01:57:35+00:00",
    "commented_code": "*/\n \tMultiValueMap<String, ResponseCookie> getCookies();\n \n+\tstatic long mergeMaxAgeAndExpires(@Nullable String maxAgeAttribute, @Nullable String expiresAttribute) {\n+\t\tif (maxAgeAttribute != null) {\n+\t\t\treturn Long.parseLong(maxAgeAttribute);\n+\t\t}\n+\t\telse if (expiresAttribute != null) {\n+\t\t\tZonedDateTime expiresDate = HttpHeaders.getZonedDateTime(expiresAttribute);\n+\n+\t\t\t// Verify that the input date is in the future\n+\t\t\tZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC);\n+\t\t\tif (expiresDate == null || expiresDate.isBefore(now)) {\n+\t\t\t\treturn -1;\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t// Calculate the difference in seconds\n+\t\t\t\treturn ChronoUnit.SECONDS.between(now, expiresDate);\n+\t\t\t}\n+\t\t}\n+\t\treturn -1;",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1716213715",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 33369,
        "pr_file": "spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java",
        "discussion_id": "1716213715",
        "commented_code": "@@ -51,4 +57,24 @@ default String getId() {\n \t */\n \tMultiValueMap<String, ResponseCookie> getCookies();\n \n+\tstatic long mergeMaxAgeAndExpires(@Nullable String maxAgeAttribute, @Nullable String expiresAttribute) {\n+\t\tif (maxAgeAttribute != null) {\n+\t\t\treturn Long.parseLong(maxAgeAttribute);\n+\t\t}\n+\t\telse if (expiresAttribute != null) {\n+\t\t\tZonedDateTime expiresDate = HttpHeaders.getZonedDateTime(expiresAttribute);\n+\n+\t\t\t// Verify that the input date is in the future\n+\t\t\tZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC);\n+\t\t\tif (expiresDate == null || expiresDate.isBefore(now)) {\n+\t\t\t\treturn -1;\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t// Calculate the difference in seconds\n+\t\t\t\treturn ChronoUnit.SECONDS.between(now, expiresDate);\n+\t\t\t}\n+\t\t}\n+\t\treturn -1;",
        "comment_created_at": "2024-08-14T01:57:35+00:00",
        "comment_author": "GovindarajanL",
        "comment_body": "The -1 return value could be replaced with a named constant for better readability. or add some comments here please",
        "pr_file_module": null
      },
      {
        "comment_id": "1716272722",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 33369,
        "pr_file": "spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java",
        "discussion_id": "1716213715",
        "commented_code": "@@ -51,4 +57,24 @@ default String getId() {\n \t */\n \tMultiValueMap<String, ResponseCookie> getCookies();\n \n+\tstatic long mergeMaxAgeAndExpires(@Nullable String maxAgeAttribute, @Nullable String expiresAttribute) {\n+\t\tif (maxAgeAttribute != null) {\n+\t\t\treturn Long.parseLong(maxAgeAttribute);\n+\t\t}\n+\t\telse if (expiresAttribute != null) {\n+\t\t\tZonedDateTime expiresDate = HttpHeaders.getZonedDateTime(expiresAttribute);\n+\n+\t\t\t// Verify that the input date is in the future\n+\t\t\tZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC);\n+\t\t\tif (expiresDate == null || expiresDate.isBefore(now)) {\n+\t\t\t\treturn -1;\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t// Calculate the difference in seconds\n+\t\t\t\treturn ChronoUnit.SECONDS.between(now, expiresDate);\n+\t\t\t}\n+\t\t}\n+\t\treturn -1;",
        "comment_created_at": "2024-08-14T03:47:06+00:00",
        "comment_author": "imvtsl",
        "comment_body": "I believe it should be fine because that's the way it is done at all the places for which this fix is intended: [HttpComponentsClientHttpResponse](https://github.com/spring-projects/spring-framework/blob/e1cf2032951ca5956f3b7d77302bc01949e82fec/spring-web/src/main/java/org/springframework/http/client/reactive/HttpComponentsClientHttpResponse.java#L74),  [ReactorNetty2ClientHttpResponse](https://github.com/spring-projects/spring-framework/blob/e1cf2032951ca5956f3b7d77302bc01949e82fec/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorNetty2ClientHttpResponse.java#L145)",
        "pr_file_module": null
      },
      {
        "comment_id": "1717380760",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 33369,
        "pr_file": "spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java",
        "discussion_id": "1716213715",
        "commented_code": "@@ -51,4 +57,24 @@ default String getId() {\n \t */\n \tMultiValueMap<String, ResponseCookie> getCookies();\n \n+\tstatic long mergeMaxAgeAndExpires(@Nullable String maxAgeAttribute, @Nullable String expiresAttribute) {\n+\t\tif (maxAgeAttribute != null) {\n+\t\t\treturn Long.parseLong(maxAgeAttribute);\n+\t\t}\n+\t\telse if (expiresAttribute != null) {\n+\t\t\tZonedDateTime expiresDate = HttpHeaders.getZonedDateTime(expiresAttribute);\n+\n+\t\t\t// Verify that the input date is in the future\n+\t\t\tZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC);\n+\t\t\tif (expiresDate == null || expiresDate.isBefore(now)) {\n+\t\t\t\treturn -1;\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t// Calculate the difference in seconds\n+\t\t\t\treturn ChronoUnit.SECONDS.between(now, expiresDate);\n+\t\t\t}\n+\t\t}\n+\t\treturn -1;",
        "comment_created_at": "2024-08-14T18:24:46+00:00",
        "comment_author": "GovindarajanL",
        "comment_body": "ok\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1491860473",
    "pr_number": 32259,
    "pr_file": "spring-web/src/main/java/org/springframework/http/HttpHeaders.java",
    "created_at": "2024-02-16T01:29:23+00:00",
    "commented_code": "*/\n \tpublic List<Locale.LanguageRange> getAcceptLanguage() {\n \t\tString value = getFirst(ACCEPT_LANGUAGE);\n+\t\tif (value != null) {\n+\t\t\tvalue = StringUtils.trimTrailingCharacter(value, ';');",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1491860473",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 32259,
        "pr_file": "spring-web/src/main/java/org/springframework/http/HttpHeaders.java",
        "discussion_id": "1491860473",
        "commented_code": "@@ -502,6 +502,9 @@ public void setAcceptLanguage(List<Locale.LanguageRange> languages) {\n \t */\n \tpublic List<Locale.LanguageRange> getAcceptLanguage() {\n \t\tString value = getFirst(ACCEPT_LANGUAGE);\n+\t\tif (value != null) {\n+\t\t\tvalue = StringUtils.trimTrailingCharacter(value, ';');",
        "comment_created_at": "2024-02-16T01:29:23+00:00",
        "comment_author": "jdicke",
        "comment_body": "';' should be a variable",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1589230311",
    "pr_number": 32704,
    "pr_file": "spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java",
    "created_at": "2024-05-03T13:48:29+00:00",
    "commented_code": "import org.springframework.util.CollectionUtils;\n import org.springframework.util.MethodInvoker;\n \n+import static org.springframework.util.ObjectUtils.isArray;",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1589230311",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 32704,
        "pr_file": "spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectionHelper.java",
        "discussion_id": "1589230311",
        "commented_code": "@@ -36,6 +36,8 @@\n import org.springframework.util.CollectionUtils;\n import org.springframework.util.MethodInvoker;\n \n+import static org.springframework.util.ObjectUtils.isArray;",
        "comment_created_at": "2024-05-03T13:48:29+00:00",
        "comment_author": "sbrannen",
        "comment_body": "We do not use static imports for utility methods in the core Spring Framework.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "830576938",
    "pr_number": 28201,
    "pr_file": "spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java",
    "created_at": "2022-03-20T08:16:57+00:00",
    "commented_code": "*/\n \t@Override\n \tpublic void setBeanFactory(BeanFactory beanFactory) {\n-\t\tthis.beanFactory = beanFactory;\n+\t\tif (!Objects.equals( this.beanFactory, beanFactory )) {",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "830576938",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 28201,
        "pr_file": "spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java",
        "discussion_id": "830576938",
        "commented_code": "@@ -152,7 +160,10 @@ public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler)\n \t */\n \t@Override\n \tpublic void setBeanFactory(BeanFactory beanFactory) {\n-\t\tthis.beanFactory = beanFactory;\n+\t\tif (!Objects.equals( this.beanFactory, beanFactory )) {",
        "comment_created_at": "2022-03-20T08:16:57+00:00",
        "comment_author": "andrei-ivanov",
        "comment_body": "is this passing the style checks?",
        "pr_file_module": null
      },
      {
        "comment_id": "830581365",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 28201,
        "pr_file": "spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java",
        "discussion_id": "830576938",
        "commented_code": "@@ -152,7 +160,10 @@ public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler)\n \t */\n \t@Override\n \tpublic void setBeanFactory(BeanFactory beanFactory) {\n-\t\tthis.beanFactory = beanFactory;\n+\t\tif (!Objects.equals( this.beanFactory, beanFactory )) {",
        "comment_created_at": "2022-03-20T08:53:41+00:00",
        "comment_author": "cdalexndr",
        "comment_body": " Task :spring-aop:checkstyleMain reports no error",
        "pr_file_module": null
      },
      {
        "comment_id": "830614044",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 28201,
        "pr_file": "spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java",
        "discussion_id": "830576938",
        "commented_code": "@@ -152,7 +160,10 @@ public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler)\n \t */\n \t@Override\n \tpublic void setBeanFactory(BeanFactory beanFactory) {\n-\t\tthis.beanFactory = beanFactory;\n+\t\tif (!Objects.equals( this.beanFactory, beanFactory )) {",
        "comment_created_at": "2022-03-20T13:07:39+00:00",
        "comment_author": "sbrannen",
        "comment_body": "In any case, please remove empty space after an opening parenthesis and before a closing parenthesis, since that is the standard convention within the Spring Framework codebase.\r\n\r\nAnd please make that change consistently within this PR.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "607026964",
    "pr_number": 26761,
    "pr_file": "spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java",
    "created_at": "2021-04-05T10:37:49+00:00",
    "commented_code": "import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.beans.factory.config.PlaceholderConfigurerSupport;\n import org.springframework.context.EnvironmentAware;\n-import org.springframework.core.env.ConfigurablePropertyResolver;\n-import org.springframework.core.env.Environment;\n-import org.springframework.core.env.MutablePropertySources;\n-import org.springframework.core.env.PropertiesPropertySource;\n-import org.springframework.core.env.PropertySource;\n-import org.springframework.core.env.PropertySources;\n-import org.springframework.core.env.PropertySourcesPropertyResolver;\n+import org.springframework.core.env.*;",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "607026964",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 26761,
        "pr_file": "spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java",
        "discussion_id": "607026964",
        "commented_code": "@@ -24,13 +24,7 @@\n import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.beans.factory.config.PlaceholderConfigurerSupport;\n import org.springframework.context.EnvironmentAware;\n-import org.springframework.core.env.ConfigurablePropertyResolver;\n-import org.springframework.core.env.Environment;\n-import org.springframework.core.env.MutablePropertySources;\n-import org.springframework.core.env.PropertiesPropertySource;\n-import org.springframework.core.env.PropertySource;\n-import org.springframework.core.env.PropertySources;\n-import org.springframework.core.env.PropertySourcesPropertyResolver;\n+import org.springframework.core.env.*;",
        "comment_created_at": "2021-04-05T10:37:49+00:00",
        "comment_author": "cuspymd",
        "comment_body": "As [Spring Coding Style](https://github.com/spring-projects/spring-framework/wiki/Code-Style#import-statements), Wildcard import is forbidden.",
        "pr_file_module": null
      },
      {
        "comment_id": "607449655",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 26761,
        "pr_file": "spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java",
        "discussion_id": "607026964",
        "commented_code": "@@ -24,13 +24,7 @@\n import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.beans.factory.config.PlaceholderConfigurerSupport;\n import org.springframework.context.EnvironmentAware;\n-import org.springframework.core.env.ConfigurablePropertyResolver;\n-import org.springframework.core.env.Environment;\n-import org.springframework.core.env.MutablePropertySources;\n-import org.springframework.core.env.PropertiesPropertySource;\n-import org.springframework.core.env.PropertySource;\n-import org.springframework.core.env.PropertySources;\n-import org.springframework.core.env.PropertySourcesPropertyResolver;\n+import org.springframework.core.env.*;",
        "comment_created_at": "2021-04-06T02:48:09+00:00",
        "comment_author": "1zg12",
        "comment_body": "updated, thanks @cuspymd.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1241156822",
    "pr_number": 30744,
    "pr_file": "spring-core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java",
    "created_at": "2023-06-25T12:30:56+00:00",
    "commented_code": "@Override\n \t@SuppressWarnings(\"resource\")\n \tpublic Object deserialize(InputStream inputStream) throws IOException {\n-\t\tObjectInputStream objectInputStream = new ConfigurableObjectInputStream(inputStream, this.classLoader);\n-\t\ttry {\n+\t\ttry (var objectInputStream = new ConfigurableObjectInputStream(inputStream, this.classLoader)){",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1241156822",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 30744,
        "pr_file": "spring-core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java",
        "discussion_id": "1241156822",
        "commented_code": "@@ -67,8 +67,7 @@ public DefaultDeserializer(@Nullable ClassLoader classLoader) {\n \t@Override\n \t@SuppressWarnings(\"resource\")\n \tpublic Object deserialize(InputStream inputStream) throws IOException {\n-\t\tObjectInputStream objectInputStream = new ConfigurableObjectInputStream(inputStream, this.classLoader);\n-\t\ttry {\n+\t\ttry (var objectInputStream = new ConfigurableObjectInputStream(inputStream, this.classLoader)){",
        "comment_created_at": "2023-06-25T12:30:56+00:00",
        "comment_author": "sbrannen",
        "comment_body": "We don't use `var` in Spring Framework.\r\n\r\nThus, please remove all usage of `var` in this PR.",
        "pr_file_module": null
      },
      {
        "comment_id": "1241218285",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 30744,
        "pr_file": "spring-core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java",
        "discussion_id": "1241156822",
        "commented_code": "@@ -67,8 +67,7 @@ public DefaultDeserializer(@Nullable ClassLoader classLoader) {\n \t@Override\n \t@SuppressWarnings(\"resource\")\n \tpublic Object deserialize(InputStream inputStream) throws IOException {\n-\t\tObjectInputStream objectInputStream = new ConfigurableObjectInputStream(inputStream, this.classLoader);\n-\t\ttry {\n+\t\ttry (var objectInputStream = new ConfigurableObjectInputStream(inputStream, this.classLoader)){",
        "comment_created_at": "2023-06-25T15:13:31+00:00",
        "comment_author": "devdilson",
        "comment_body": "Good to know, removed all instances.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "757834326",
    "pr_number": 27735,
    "pr_file": "spring-tx/src/main/java/org/springframework/dao/support/DataAccessUtils.java",
    "created_at": "2021-11-28T02:37:54+00:00",
    "commented_code": "return results.iterator().next();\n \t}\n \n+\t/**\n+\t * Return a single result object from the given Stream.\n+\t * <p>Returns {@code null} if 0 result objects found;\n+\t * throws an exception if more than 1 element found.\n+\t * @param results the result Stream (can be {@code null})\n+\t * @return the single result object, or {@code null} if none\n+\t * @throws IncorrectResultSizeDataAccessException if more than one\n+\t * element has been found in the given Stream\n+\t */\n+\t@Nullable\n+\tpublic static <T> T singleResult(@Nullable Stream<T> results) throws IncorrectResultSizeDataAccessException {\n+\t\tif (results == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\ttry (results) {\n+\t\t\tList<T> resultList = results.limit(2).toList();\n+\t\t\tif (resultList.size() > 1) {\n+\t\t\t\tthrow new IncorrectResultSizeDataAccessException(1, resultList.size());\n+\t\t\t}\n+\t\t\treturn CollectionUtils.isEmpty(resultList) ? null : resultList.get(0);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Return a single result object from the given Iterator.\n+\t * <p>Returns {@code null} if 0 result objects found;\n+\t * throws an exception if more than 1 element found.\n+\t * @param results the result Iterator (can be {@code null})\n+\t * @return the single result object, or {@code null} if none\n+\t * @throws IncorrectResultSizeDataAccessException if more than one\n+\t * element has been found in the given Iterator\n+\t */\n+\t@Nullable\n+\tpublic static <T> T singleResult(@Nullable Iterator<T> results) throws IncorrectResultSizeDataAccessException {\n+\t\tif (results == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tT result = results.hasNext() ? results.next() : null;\n+\t\tif (results.hasNext()) {\n+\t\t\tthrow new IncorrectResultSizeDataAccessException(1, 2);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\t/**\n+\t * Return a single result object from the given Collection.\n+\t * <p>Returns {@code Optional.empty()} if 0 result objects found;\n+\t * throws an exception if more than 1 element found.\n+\t * @param results the result Collection (can be {@code null})\n+\t * @return the single optional result object, or {@code Optional.empty()} if none\n+\t * @throws IncorrectResultSizeDataAccessException if more than one\n+\t * element has been found in the given Collection\n+\t */\n+\tpublic static <T> Optional<T> optionalResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {\n+\t\tif (CollectionUtils.isEmpty(results)) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\tif (results.size() > 1) {\n+\t\t\tthrow new IncorrectResultSizeDataAccessException(1, results.size());\n+\t\t}\n+\t\treturn results.stream().findFirst();",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "757834326",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27735,
        "pr_file": "spring-tx/src/main/java/org/springframework/dao/support/DataAccessUtils.java",
        "discussion_id": "757834326",
        "commented_code": "@@ -56,6 +60,111 @@\n \t\treturn results.iterator().next();\n \t}\n \n+\t/**\n+\t * Return a single result object from the given Stream.\n+\t * <p>Returns {@code null} if 0 result objects found;\n+\t * throws an exception if more than 1 element found.\n+\t * @param results the result Stream (can be {@code null})\n+\t * @return the single result object, or {@code null} if none\n+\t * @throws IncorrectResultSizeDataAccessException if more than one\n+\t * element has been found in the given Stream\n+\t */\n+\t@Nullable\n+\tpublic static <T> T singleResult(@Nullable Stream<T> results) throws IncorrectResultSizeDataAccessException {\n+\t\tif (results == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\ttry (results) {\n+\t\t\tList<T> resultList = results.limit(2).toList();\n+\t\t\tif (resultList.size() > 1) {\n+\t\t\t\tthrow new IncorrectResultSizeDataAccessException(1, resultList.size());\n+\t\t\t}\n+\t\t\treturn CollectionUtils.isEmpty(resultList) ? null : resultList.get(0);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Return a single result object from the given Iterator.\n+\t * <p>Returns {@code null} if 0 result objects found;\n+\t * throws an exception if more than 1 element found.\n+\t * @param results the result Iterator (can be {@code null})\n+\t * @return the single result object, or {@code null} if none\n+\t * @throws IncorrectResultSizeDataAccessException if more than one\n+\t * element has been found in the given Iterator\n+\t */\n+\t@Nullable\n+\tpublic static <T> T singleResult(@Nullable Iterator<T> results) throws IncorrectResultSizeDataAccessException {\n+\t\tif (results == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tT result = results.hasNext() ? results.next() : null;\n+\t\tif (results.hasNext()) {\n+\t\t\tthrow new IncorrectResultSizeDataAccessException(1, 2);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\t/**\n+\t * Return a single result object from the given Collection.\n+\t * <p>Returns {@code Optional.empty()} if 0 result objects found;\n+\t * throws an exception if more than 1 element found.\n+\t * @param results the result Collection (can be {@code null})\n+\t * @return the single optional result object, or {@code Optional.empty()} if none\n+\t * @throws IncorrectResultSizeDataAccessException if more than one\n+\t * element has been found in the given Collection\n+\t */\n+\tpublic static <T> Optional<T> optionalResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {\n+\t\tif (CollectionUtils.isEmpty(results)) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\tif (results.size() > 1) {\n+\t\t\tthrow new IncorrectResultSizeDataAccessException(1, results.size());\n+\t\t}\n+\t\treturn results.stream().findFirst();",
        "comment_created_at": "2021-11-28T02:37:54+00:00",
        "comment_author": "rkvigneswaran",
        "comment_body": "Would it be better if we delegate this to original `singleResult(Collection<T>)` method?\r\n\r\n```suggestion\r\n\t\treturn Optional.ofNullable(singleResult(results));\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "757835959",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 27735,
        "pr_file": "spring-tx/src/main/java/org/springframework/dao/support/DataAccessUtils.java",
        "discussion_id": "757834326",
        "commented_code": "@@ -56,6 +60,111 @@\n \t\treturn results.iterator().next();\n \t}\n \n+\t/**\n+\t * Return a single result object from the given Stream.\n+\t * <p>Returns {@code null} if 0 result objects found;\n+\t * throws an exception if more than 1 element found.\n+\t * @param results the result Stream (can be {@code null})\n+\t * @return the single result object, or {@code null} if none\n+\t * @throws IncorrectResultSizeDataAccessException if more than one\n+\t * element has been found in the given Stream\n+\t */\n+\t@Nullable\n+\tpublic static <T> T singleResult(@Nullable Stream<T> results) throws IncorrectResultSizeDataAccessException {\n+\t\tif (results == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\ttry (results) {\n+\t\t\tList<T> resultList = results.limit(2).toList();\n+\t\t\tif (resultList.size() > 1) {\n+\t\t\t\tthrow new IncorrectResultSizeDataAccessException(1, resultList.size());\n+\t\t\t}\n+\t\t\treturn CollectionUtils.isEmpty(resultList) ? null : resultList.get(0);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Return a single result object from the given Iterator.\n+\t * <p>Returns {@code null} if 0 result objects found;\n+\t * throws an exception if more than 1 element found.\n+\t * @param results the result Iterator (can be {@code null})\n+\t * @return the single result object, or {@code null} if none\n+\t * @throws IncorrectResultSizeDataAccessException if more than one\n+\t * element has been found in the given Iterator\n+\t */\n+\t@Nullable\n+\tpublic static <T> T singleResult(@Nullable Iterator<T> results) throws IncorrectResultSizeDataAccessException {\n+\t\tif (results == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tT result = results.hasNext() ? results.next() : null;\n+\t\tif (results.hasNext()) {\n+\t\t\tthrow new IncorrectResultSizeDataAccessException(1, 2);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\t/**\n+\t * Return a single result object from the given Collection.\n+\t * <p>Returns {@code Optional.empty()} if 0 result objects found;\n+\t * throws an exception if more than 1 element found.\n+\t * @param results the result Collection (can be {@code null})\n+\t * @return the single optional result object, or {@code Optional.empty()} if none\n+\t * @throws IncorrectResultSizeDataAccessException if more than one\n+\t * element has been found in the given Collection\n+\t */\n+\tpublic static <T> Optional<T> optionalResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {\n+\t\tif (CollectionUtils.isEmpty(results)) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\tif (results.size() > 1) {\n+\t\t\tthrow new IncorrectResultSizeDataAccessException(1, results.size());\n+\t\t}\n+\t\treturn results.stream().findFirst();",
        "comment_created_at": "2021-11-28T03:01:28+00:00",
        "comment_author": "KaidosGH",
        "comment_body": "Hi @rkvigneswaran,\r\n\r\nthat is actually pretty smart. Cuts out a lot of redundant code! \ud83d\udc4d \r\n\r\nedit: i commited all 3 enhancements",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1195310293",
    "pr_number": 30497,
    "pr_file": "spring-test/src/test/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilderTests.java",
    "created_at": "2023-05-16T15:03:54+00:00",
    "commented_code": "assertThat(request.getUserPrincipal()).isEqualTo(user);\n \t}\n \n+\t@Test\n+\tvoid remoteAddress() {\n+\t\tfinal String ip = \"10.0.0.1\";",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1195310293",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 30497,
        "pr_file": "spring-test/src/test/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilderTests.java",
        "discussion_id": "1195310293",
        "commented_code": "@@ -559,6 +558,15 @@ void principal() {\n \t\tassertThat(request.getUserPrincipal()).isEqualTo(user);\n \t}\n \n+\t@Test\n+\tvoid remoteAddress() {\n+\t\tfinal String ip = \"10.0.0.1\";",
        "comment_created_at": "2023-05-16T15:03:54+00:00",
        "comment_author": "sbrannen",
        "comment_body": "```suggestion\r\n\t\tString ip = \"10.0.0.1\";\r\n```\r\n\r\nWe don't typically declare local variables as final unless there's a compelling reason.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "623860498",
    "pr_number": 26869,
    "pr_file": "spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java",
    "created_at": "2021-04-30T13:03:36+00:00",
    "commented_code": "// (similar to JSTL EL). If the property doesn't exist in the\n \t\t// first place, let the exception through.\n \t\ttry {\n-\t\t\tthis.beanWrapper.setWrappedInstance(obj);\n-\t\t\treturn this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty());\n+            BeanWrapperImpl beanWrapper = new BeanWrapperImpl(false);\n+            beanWrapper.setWrappedInstance(obj);\n+            return beanWrapper.getPropertyValue(this.sortDefinition.getProperty());\n \t\t}",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "623860498",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 26869,
        "pr_file": "spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java",
        "discussion_id": "623860498",
        "commented_code": "@@ -115,8 +113,9 @@ private Object getPropertyValue(Object obj) {\n \t\t// (similar to JSTL EL). If the property doesn't exist in the\n \t\t// first place, let the exception through.\n \t\ttry {\n-\t\t\tthis.beanWrapper.setWrappedInstance(obj);\n-\t\t\treturn this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty());\n+            BeanWrapperImpl beanWrapper = new BeanWrapperImpl(false);\n+            beanWrapper.setWrappedInstance(obj);\n+            return beanWrapper.getPropertyValue(this.sortDefinition.getProperty());\n \t\t}",
        "comment_created_at": "2021-04-30T13:03:36+00:00",
        "comment_author": "sbrannen",
        "comment_body": "Please note that the formatting you introduced fails the build with the following.\r\n\r\n```\r\n> Task :spring-beans:checkstyleMain\r\n[ant:checkstyle] [ERROR] /.../spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java:116: Line has leading space characters; indentation should be performed with tabs only. [RegexpSinglelineJava]\r\n[ant:checkstyle] [ERROR] /.../spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java:117: Line has leading space characters; indentation should be performed with tabs only. [RegexpSinglelineJava]\r\n[ant:checkstyle] [ERROR] /.../spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java:118: Line has leading space characters; indentation should be performed with tabs only. [RegexpSinglelineJava]\r\n```\r\n\r\nPlease make sure you run `./gradlew check` before submitting a PR to catch such errors locally.\r\n\r\nI'll fix the formatting before merging, so there's no need to update this PR.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "369804022",
    "pr_number": 24406,
    "pr_file": "spring-web/src/main/java/org/springframework/http/RequestEntity.java",
    "created_at": "2020-01-22T21:08:27+00:00",
    "commented_code": "/**\n \t * Constructor with method, URL, headers, body and type.\n-\t * @param body the body\n+\t * @param body    the body\n \t * @param headers the headers\n-\t * @param method the method\n-\t * @param url the URL\n-\t * @param type the type used for generic type resolution\n+\t * @param method  the method\n+\t * @param url     the URL\n+\t * @param type    the type used for generic type resolution\n \t * @since 4.3\n \t */\n \tpublic RequestEntity(@Nullable T body, @Nullable MultiValueMap<String, String> headers,\n-\t\t\t@Nullable HttpMethod method, URI url, @Nullable Type type) {\n+\t\t\t\t\t\t @Nullable HttpMethod method, URI url, @Nullable Type type) {\n \n \t\tsuper(body, headers);\n \t\tthis.method = method;\n \t\tthis.url = url;\n \t\tthis.type = type;\n \t}\n \n+\t/**\n+\t * Private Constructor with method, URL, UriTemplate and varargs urivariables but without body nor headers.\n+\t * @param method       the method\n+\t * @param url          the URL\n+\t * @param uriTemplate  the UriTemplate\n+\t * @param uriVariables the uriVariables\n+\t */\n+\tprivate RequestEntity(MultiValueMap<String, String> headers,HttpMethod method, URI url, UriTemplate uriTemplate, Object... uriVariables) {\n+\t\tsuper(null, headers);\n+\t\tthis.method = method;\n+\t\tthis.url = url;\n+\t\tthis.type = null;\n+\t\tthis.uriTemplate = uriTemplate;\n+\t\tthis.uriVariables = uriVariables;\n+\t}",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "369804022",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24406,
        "pr_file": "spring-web/src/main/java/org/springframework/http/RequestEntity.java",
        "discussion_id": "369804022",
        "commented_code": "@@ -138,22 +148,38 @@ public RequestEntity(@Nullable T body, @Nullable MultiValueMap<String, String> h\n \n \t/**\n \t * Constructor with method, URL, headers, body and type.\n-\t * @param body the body\n+\t * @param body    the body\n \t * @param headers the headers\n-\t * @param method the method\n-\t * @param url the URL\n-\t * @param type the type used for generic type resolution\n+\t * @param method  the method\n+\t * @param url     the URL\n+\t * @param type    the type used for generic type resolution\n \t * @since 4.3\n \t */\n \tpublic RequestEntity(@Nullable T body, @Nullable MultiValueMap<String, String> headers,\n-\t\t\t@Nullable HttpMethod method, URI url, @Nullable Type type) {\n+\t\t\t\t\t\t @Nullable HttpMethod method, URI url, @Nullable Type type) {\n \n \t\tsuper(body, headers);\n \t\tthis.method = method;\n \t\tthis.url = url;\n \t\tthis.type = type;\n \t}\n \n+\t/**\n+\t * Private Constructor with method, URL, UriTemplate and varargs urivariables but without body nor headers.\n+\t * @param method       the method\n+\t * @param url          the URL\n+\t * @param uriTemplate  the UriTemplate\n+\t * @param uriVariables the uriVariables\n+\t */\n+\tprivate RequestEntity(MultiValueMap<String, String> headers,HttpMethod method, URI url, UriTemplate uriTemplate, Object... uriVariables) {\n+\t\tsuper(null, headers);\n+\t\tthis.method = method;\n+\t\tthis.url = url;\n+\t\tthis.type = null;\n+\t\tthis.uriTemplate = uriTemplate;\n+\t\tthis.uriVariables = uriVariables;\n+\t}",
        "comment_created_at": "2020-01-22T21:08:27+00:00",
        "comment_author": "rstoyanchev",
        "comment_body": "Here you'll find our [Source Code Style](https://github.com/spring-projects/spring-framework/wiki/Code-Style) guidelines. Specifically the section on line wrapping (aim for 90, no more than 120, but only 80 for Javadoc).",
        "pr_file_module": null
      },
      {
        "comment_id": "370011295",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24406,
        "pr_file": "spring-web/src/main/java/org/springframework/http/RequestEntity.java",
        "discussion_id": "369804022",
        "commented_code": "@@ -138,22 +148,38 @@ public RequestEntity(@Nullable T body, @Nullable MultiValueMap<String, String> h\n \n \t/**\n \t * Constructor with method, URL, headers, body and type.\n-\t * @param body the body\n+\t * @param body    the body\n \t * @param headers the headers\n-\t * @param method the method\n-\t * @param url the URL\n-\t * @param type the type used for generic type resolution\n+\t * @param method  the method\n+\t * @param url     the URL\n+\t * @param type    the type used for generic type resolution\n \t * @since 4.3\n \t */\n \tpublic RequestEntity(@Nullable T body, @Nullable MultiValueMap<String, String> headers,\n-\t\t\t@Nullable HttpMethod method, URI url, @Nullable Type type) {\n+\t\t\t\t\t\t @Nullable HttpMethod method, URI url, @Nullable Type type) {\n \n \t\tsuper(body, headers);\n \t\tthis.method = method;\n \t\tthis.url = url;\n \t\tthis.type = type;\n \t}\n \n+\t/**\n+\t * Private Constructor with method, URL, UriTemplate and varargs urivariables but without body nor headers.\n+\t * @param method       the method\n+\t * @param url          the URL\n+\t * @param uriTemplate  the UriTemplate\n+\t * @param uriVariables the uriVariables\n+\t */\n+\tprivate RequestEntity(MultiValueMap<String, String> headers,HttpMethod method, URI url, UriTemplate uriTemplate, Object... uriVariables) {\n+\t\tsuper(null, headers);\n+\t\tthis.method = method;\n+\t\tthis.url = url;\n+\t\tthis.type = null;\n+\t\tthis.uriTemplate = uriTemplate;\n+\t\tthis.uriVariables = uriVariables;\n+\t}",
        "comment_created_at": "2020-01-23T09:32:38+00:00",
        "comment_author": "parviz-93",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  }
]