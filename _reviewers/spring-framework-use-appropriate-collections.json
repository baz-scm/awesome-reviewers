[
  {
    "discussion_id": "73420957",
    "pr_number": 1128,
    "pr_file": "spring-core/src/main/java/org/springframework/util/StringUtils.java",
    "created_at": "2016-08-03T21:06:40+00:00",
    "commented_code": "}\n \t\tList<String> result = new ArrayList<>();\n \t\tresult.addAll(Arrays.asList(array1));\n+\t\tSet<String> stringSet = new HashSet<>(result);",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "73420957",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1128,
        "pr_file": "spring-core/src/main/java/org/springframework/util/StringUtils.java",
        "discussion_id": "73420957",
        "commented_code": "@@ -810,8 +811,9 @@ public static TimeZone parseTimeZoneString(String timeZoneString) {\n \t\t}\n \t\tList<String> result = new ArrayList<>();\n \t\tresult.addAll(Arrays.asList(array1));\n+\t\tSet<String> stringSet = new HashSet<>(result);",
        "comment_created_at": "2016-08-03T21:06:40+00:00",
        "comment_author": "a-derevyanko",
        "comment_body": "You can create HashSet from Arrays.asList(array1) (the \"result\" list is not required). \n\nBut this way is not clear. I see an easier way:\n/*\nSet<String> result = new LinkedHashSet<>();\nCollections.addAll(result, array1);\nCollections.addAll(result, array2);\n*/\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "73504774",
    "pr_number": 1128,
    "pr_file": "spring-core/src/main/java/org/springframework/util/StringUtils.java",
    "created_at": "2016-08-04T11:23:26+00:00",
    "commented_code": "}\n \t\tList<String> result = new ArrayList<>();\n \t\tresult.addAll(Arrays.asList(array1));\n+\t\tSet<String> stringSet = new HashSet<>(result);",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "73504774",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1128,
        "pr_file": "spring-core/src/main/java/org/springframework/util/StringUtils.java",
        "discussion_id": "73504774",
        "commented_code": "@@ -810,8 +811,9 @@ public static TimeZone parseTimeZoneString(String timeZoneString) {\n \t\t}\n \t\tList<String> result = new ArrayList<>();\n \t\tresult.addAll(Arrays.asList(array1));\n+\t\tSet<String> stringSet = new HashSet<>(result);",
        "comment_created_at": "2016-08-04T11:23:26+00:00",
        "comment_author": "a-derevyanko",
        "comment_body": "It is a Set. Not List.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "73506068",
    "pr_number": 1128,
    "pr_file": "spring-core/src/main/java/org/springframework/util/StringUtils.java",
    "created_at": "2016-08-04T11:35:25+00:00",
    "commented_code": "}\n \t\tList<String> result = new ArrayList<>();\n \t\tresult.addAll(Arrays.asList(array1));\n+\t\tSet<String> stringSet = new HashSet<>(result);",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "73506068",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1128,
        "pr_file": "spring-core/src/main/java/org/springframework/util/StringUtils.java",
        "discussion_id": "73506068",
        "commented_code": "@@ -810,8 +811,9 @@ public static TimeZone parseTimeZoneString(String timeZoneString) {\n \t\t}\n \t\tList<String> result = new ArrayList<>();\n \t\tresult.addAll(Arrays.asList(array1));\n+\t\tSet<String> stringSet = new HashSet<>(result);",
        "comment_created_at": "2016-08-04T11:35:25+00:00",
        "comment_author": "Akirus",
        "comment_body": "just look at original code\n\n```\nList<String> result = new ArrayList<>();\n        result.addAll(Arrays.asList(array1));\n        for (String str : array2) {\n            if (!result.contains(str)) {\n                result.add(str);\n            }\n        }\n        return toStringArray(result);\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "73513322",
    "pr_number": 1128,
    "pr_file": "spring-core/src/main/java/org/springframework/util/StringUtils.java",
    "created_at": "2016-08-04T12:38:50+00:00",
    "commented_code": "}\n \t\tList<String> result = new ArrayList<>();\n \t\tresult.addAll(Arrays.asList(array1));\n+\t\tSet<String> stringSet = new HashSet<>(result);",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "73513322",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 1128,
        "pr_file": "spring-core/src/main/java/org/springframework/util/StringUtils.java",
        "discussion_id": "73513322",
        "commented_code": "@@ -810,8 +811,9 @@ public static TimeZone parseTimeZoneString(String timeZoneString) {\n \t\t}\n \t\tList<String> result = new ArrayList<>();\n \t\tresult.addAll(Arrays.asList(array1));\n+\t\tSet<String> stringSet = new HashSet<>(result);",
        "comment_created_at": "2016-08-04T12:38:50+00:00",
        "comment_author": "a-derevyanko",
        "comment_body": "Sorry, you was right. But HashSet wrapping looks like overengineering (original result.addAll(Arrays.asList(array1)) too :), can be replaced with Collections.addAll()). Have you tested, how your improvement works on large String arrays? How much faster your proposal than the original?\n\n---\n\nBut you did the same mistake like me) If second array contains duplicate items, you put to  \"result\" _both_ of duplicates (because your stringSet dont know about new items in result).  \n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "464155060",
    "pr_number": 25506,
    "pr_file": "spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java",
    "created_at": "2020-08-03T01:43:55+00:00",
    "commented_code": "lifecycleBeans.forEach((beanName, bean) -> {\n \t\t\tif (!autoStartupOnly || (bean instanceof SmartLifecycle && ((SmartLifecycle) bean).isAutoStartup())) {\n \t\t\t\tint phase = getPhase(bean);\n-\t\t\t\tLifecycleGroup group = phases.get(phase);\n-\t\t\t\tif (group == null) {\n-\t\t\t\t\tgroup = new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly);\n-\t\t\t\t\tphases.put(phase, group);\n-\t\t\t\t}\n+\t\t\t\tLifecycleGroup group = phases.computeIfAbsent(phase,\n+\t\t\t\t\t\tp -> new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly));",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "464155060",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 25506,
        "pr_file": "spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java",
        "discussion_id": "464155060",
        "commented_code": "@@ -143,11 +143,8 @@ private void startBeans(boolean autoStartupOnly) {\n \t\tlifecycleBeans.forEach((beanName, bean) -> {\n \t\t\tif (!autoStartupOnly || (bean instanceof SmartLifecycle && ((SmartLifecycle) bean).isAutoStartup())) {\n \t\t\t\tint phase = getPhase(bean);\n-\t\t\t\tLifecycleGroup group = phases.get(phase);\n-\t\t\t\tif (group == null) {\n-\t\t\t\t\tgroup = new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly);\n-\t\t\t\t\tphases.put(phase, group);\n-\t\t\t\t}\n+\t\t\t\tLifecycleGroup group = phases.computeIfAbsent(phase,\n+\t\t\t\t\t\tp -> new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly));",
        "comment_created_at": "2020-08-03T01:43:55+00:00",
        "comment_author": "wind57",
        "comment_body": "documentation of `computeIfAbsent` says:\r\n\r\n>  return the current (**existing or computed**) value...\r\n\r\nso you could do:\r\n\r\n```\r\nphases.computeIfAbsent(\r\n\t\t\t\t\t\tphase,\r\n\t\t\t\t\t\tp -> new LifecycleGroup(phase, timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly)\r\n\t\t\t\t).add(beanName, bean);\r\n```\r\n\r\nBut looking at the implementation, `phases` is really just a sorted by Keys, which mean it's really supposed to be a `TreeMap`? So that code could be written as :\r\n\r\n```\r\n\tprivate void startBeans(boolean autoStartupOnly) {\r\n\t\tMap<String, Lifecycle> lifecycleBeans = getLifecycleBeans();\r\n\t\tMap<Integer, LifecycleGroup> phases = new TreeMap<>();\r\n\r\n\t\tlifecycleBeans.forEach((beanName, bean) -> {\r\n\t\t\tif (!autoStartupOnly || (bean instanceof SmartLifecycle && ((SmartLifecycle) bean).isAutoStartup())) {\r\n\r\n\t\t\t\tint phase = getPhase(bean);\r\n\t\t\t\tphases.computeIfAbsent(\r\n\t\t\t\t\t\tphase,\r\n\t\t\t\t\t\tp -> new LifecycleGroup(phase, timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly)\r\n\t\t\t\t).add(beanName, bean);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tphases.forEach((key, value) -> value.start());\r\n\t}\r\n```\r\n\r\nThe use of `forEach` is safe since it is documented as :\r\n\r\n>  Unless otherwise specified by the implementing class, actions are performed in **the order of entry set** iteration\r\n\r\nand `TreeMap::entrySet` is documented as :\r\n\r\n> The set's iterator returns the entries in ascending key order...\r\n\r\nWhat do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "464175695",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 25506,
        "pr_file": "spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java",
        "discussion_id": "464155060",
        "commented_code": "@@ -143,11 +143,8 @@ private void startBeans(boolean autoStartupOnly) {\n \t\tlifecycleBeans.forEach((beanName, bean) -> {\n \t\t\tif (!autoStartupOnly || (bean instanceof SmartLifecycle && ((SmartLifecycle) bean).isAutoStartup())) {\n \t\t\t\tint phase = getPhase(bean);\n-\t\t\t\tLifecycleGroup group = phases.get(phase);\n-\t\t\t\tif (group == null) {\n-\t\t\t\t\tgroup = new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly);\n-\t\t\t\t\tphases.put(phase, group);\n-\t\t\t\t}\n+\t\t\t\tLifecycleGroup group = phases.computeIfAbsent(phase,\n+\t\t\t\t\t\tp -> new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly));",
        "comment_created_at": "2020-08-03T03:25:43+00:00",
        "comment_author": "chenqimiao",
        "comment_body": "I think what you said makes sense, but I added a judgment to reduce the execution of the iterator automatic code.\r\nThanks !\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "464451670",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 25506,
        "pr_file": "spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java",
        "discussion_id": "464155060",
        "commented_code": "@@ -143,11 +143,8 @@ private void startBeans(boolean autoStartupOnly) {\n \t\tlifecycleBeans.forEach((beanName, bean) -> {\n \t\t\tif (!autoStartupOnly || (bean instanceof SmartLifecycle && ((SmartLifecycle) bean).isAutoStartup())) {\n \t\t\t\tint phase = getPhase(bean);\n-\t\t\t\tLifecycleGroup group = phases.get(phase);\n-\t\t\t\tif (group == null) {\n-\t\t\t\t\tgroup = new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly);\n-\t\t\t\t\tphases.put(phase, group);\n-\t\t\t\t}\n+\t\t\t\tLifecycleGroup group = phases.computeIfAbsent(phase,\n+\t\t\t\t\t\tp -> new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly));",
        "comment_created_at": "2020-08-03T14:31:25+00:00",
        "comment_author": "wind57",
        "comment_body": "I'm sorry, but can you explain \"but I added a judgment to reduce the execution of the iterator automatic code\" - what this means? I don't get it. thank you",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "317358076",
    "pr_number": 23458,
    "pr_file": "spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java",
    "created_at": "2019-08-24T13:42:56+00:00",
    "commented_code": "aspect2.setOrder(5);\n \t\tadvisors.addAll(\n \t\t\t\tgetFixture().getAdvisors(new SingletonMetadataAwareAspectInstanceFactory(aspect2, \"someBean2\")));\n-\t\tCollections.sort(advisors, new OrderComparator());\n+\t\tadvisors.sort(new OrderComparator());",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "317358076",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 23458,
        "pr_file": "spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java",
        "discussion_id": "317358076",
        "commented_code": "@@ -144,7 +145,7 @@ public void testMultiplePerTargetAspects() throws SecurityException, NoSuchMetho\n \t\taspect2.setOrder(5);\n \t\tadvisors.addAll(\n \t\t\t\tgetFixture().getAdvisors(new SingletonMetadataAwareAspectInstanceFactory(aspect2, \"someBean2\")));\n-\t\tCollections.sort(advisors, new OrderComparator());\n+\t\tadvisors.sort(new OrderComparator());",
        "comment_created_at": "2019-08-24T13:42:56+00:00",
        "comment_author": "mentallurg",
        "comment_body": "If optimize, then do one step further :)\r\n\r\n> sort(advisors, OrderComparator.INSTANCE);\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "317359268",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 23458,
        "pr_file": "spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java",
        "discussion_id": "317358076",
        "commented_code": "@@ -144,7 +145,7 @@ public void testMultiplePerTargetAspects() throws SecurityException, NoSuchMetho\n \t\taspect2.setOrder(5);\n \t\tadvisors.addAll(\n \t\t\t\tgetFixture().getAdvisors(new SingletonMetadataAwareAspectInstanceFactory(aspect2, \"someBean2\")));\n-\t\tCollections.sort(advisors, new OrderComparator());\n+\t\tadvisors.sort(new OrderComparator());",
        "comment_created_at": "2019-08-24T14:26:17+00:00",
        "comment_author": "lijunyzzZ",
        "comment_body": "modify to OrderComparator.sort(advisors);",
        "pr_file_module": null
      }
    ]
  }
]