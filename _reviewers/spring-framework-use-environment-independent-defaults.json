[
  {
    "discussion_id": "2005135191",
    "pr_number": 34555,
    "pr_file": "spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java",
    "created_at": "2025-03-20T09:17:29+00:00",
    "commented_code": "import org.springframework.web.util.UriBuilder;\n import org.springframework.web.util.UriBuilderFactory;\n \n+import static org.springframework.web.reactive.function.client.CoExchangeFilterFunction.COROUTINE_CONTEXT_ATTRIBUTE;",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "2005135191",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 34555,
        "pr_file": "spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java",
        "discussion_id": "2005135191",
        "commented_code": "@@ -58,6 +58,8 @@\n import org.springframework.web.util.UriBuilder;\n import org.springframework.web.util.UriBuilderFactory;\n \n+import static org.springframework.web.reactive.function.client.CoExchangeFilterFunction.COROUTINE_CONTEXT_ATTRIBUTE;",
        "comment_created_at": "2025-03-20T09:17:29+00:00",
        "comment_author": "dmitrysulman",
        "comment_body": "@sdeleuze \r\nShould I replace this import with a private constant, similar to what was done [here](https://github.com/spring-projects/spring-framework/commit/abb296c7d2ed89a00ee64d4303c7c1d994c416f7#diff-d2daf724ed3ba8cd6a88f15a95cb2140dafae112b63ebd34d7af192eb55e9200R294-R296)?\r\n\r\n```java\r\n// Copy of CoWebFilter.COROUTINE_CONTEXT_ATTRIBUTE value to avoid compilation errors in Eclipse\r\nprivate static final String COROUTINE_CONTEXT_ATTRIBUTE = \"org.springframework.web.server.CoWebFilter.context\";\r\n```\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2005146038",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 34555,
        "pr_file": "spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java",
        "discussion_id": "2005135191",
        "commented_code": "@@ -58,6 +58,8 @@\n import org.springframework.web.util.UriBuilder;\n import org.springframework.web.util.UriBuilderFactory;\n \n+import static org.springframework.web.reactive.function.client.CoExchangeFilterFunction.COROUTINE_CONTEXT_ATTRIBUTE;",
        "comment_created_at": "2025-03-20T09:21:14+00:00",
        "comment_author": "dmitrysulman",
        "comment_body": "Not sure if this Eclipse issue is still present.",
        "pr_file_module": null
      },
      {
        "comment_id": "2005299514",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 34555,
        "pr_file": "spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java",
        "discussion_id": "2005135191",
        "commented_code": "@@ -58,6 +58,8 @@\n import org.springframework.web.util.UriBuilder;\n import org.springframework.web.util.UriBuilderFactory;\n \n+import static org.springframework.web.reactive.function.client.CoExchangeFilterFunction.COROUTINE_CONTEXT_ATTRIBUTE;",
        "comment_created_at": "2025-03-20T10:44:38+00:00",
        "comment_author": "sdeleuze",
        "comment_body": "@sbrannen Could you please do a quick check with the branch to confirm or not the same trick is needed?",
        "pr_file_module": null
      },
      {
        "comment_id": "2007304067",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 34555,
        "pr_file": "spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java",
        "discussion_id": "2005135191",
        "commented_code": "@@ -58,6 +58,8 @@\n import org.springframework.web.util.UriBuilder;\n import org.springframework.web.util.UriBuilderFactory;\n \n+import static org.springframework.web.reactive.function.client.CoExchangeFilterFunction.COROUTINE_CONTEXT_ATTRIBUTE;",
        "comment_created_at": "2025-03-21T10:36:40+00:00",
        "comment_author": "sbrannen",
        "comment_body": "Yes, that's problematic in Eclipse IDE.\r\n\r\n```\r\nThe import org.springframework.web.reactive.function.client.CoExchangeFilterFunction cannot be resolved\r\n\r\nDefaultWebClient.java\r\n\r\n/spring-webflux/src/main/java/org/springframework/web/reactive/function/client\r\n\r\nline 61\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2007488949",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 34555,
        "pr_file": "spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java",
        "discussion_id": "2005135191",
        "commented_code": "@@ -58,6 +58,8 @@\n import org.springframework.web.util.UriBuilder;\n import org.springframework.web.util.UriBuilderFactory;\n \n+import static org.springframework.web.reactive.function.client.CoExchangeFilterFunction.COROUTINE_CONTEXT_ATTRIBUTE;",
        "comment_created_at": "2025-03-21T12:32:24+00:00",
        "comment_author": "sdeleuze",
        "comment_body": "@dmitrysulman So please change to a private constant with a related comment like I did.",
        "pr_file_module": null
      },
      {
        "comment_id": "2007513335",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 34555,
        "pr_file": "spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java",
        "discussion_id": "2005135191",
        "commented_code": "@@ -58,6 +58,8 @@\n import org.springframework.web.util.UriBuilder;\n import org.springframework.web.util.UriBuilderFactory;\n \n+import static org.springframework.web.reactive.function.client.CoExchangeFilterFunction.COROUTINE_CONTEXT_ATTRIBUTE;",
        "comment_created_at": "2025-03-21T12:48:23+00:00",
        "comment_author": "dmitrysulman",
        "comment_body": "@sbrannen Thank you for checking.\r\n@sdeleuze Fixed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1452272174",
    "pr_number": 31924,
    "pr_file": "spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java",
    "created_at": "2024-01-15T11:41:33+00:00",
    "commented_code": "public static MultiValueMap<String, ?> parse(MockClientHttpRequest request) {\n \t\t\ttry {\n \t\t\t\tFileUpload fileUpload = new FileUpload();\n-\t\t\t\tfileUpload.setFileItemFactory(new DiskFileItemFactory());\n+\t\t\t\tDiskFileItemFactory factory = new DiskFileItemFactory();\n+\t\t\t\tfactory.setDefaultCharset(DEFAULT_ENCODING);\n+\t\t\t\tfileUpload.setFileItemFactory(factory);",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1452272174",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 31924,
        "pr_file": "spring-test/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java",
        "discussion_id": "1452272174",
        "commented_code": "@@ -363,7 +365,9 @@ private static class MultipartHelper {\n \t\tpublic static MultiValueMap<String, ?> parse(MockClientHttpRequest request) {\n \t\t\ttry {\n \t\t\t\tFileUpload fileUpload = new FileUpload();\n-\t\t\t\tfileUpload.setFileItemFactory(new DiskFileItemFactory());\n+\t\t\t\tDiskFileItemFactory factory = new DiskFileItemFactory();\n+\t\t\t\tfactory.setDefaultCharset(DEFAULT_ENCODING);\n+\t\t\t\tfileUpload.setFileItemFactory(factory);",
        "comment_created_at": "2024-01-15T11:41:33+00:00",
        "comment_author": "rstoyanchev",
        "comment_body": "Switching the general default could break existing tests, and that should wait for a major or minor release. In the meantime, we could narrow the scope and default to UTF-8 specifically for JSON. That would be safer and addresses the original issue.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1381778418",
    "pr_number": 31538,
    "pr_file": "spring-webflux/src/main/java/org/springframework/web/reactive/config/ResourceChainRegistration.java",
    "created_at": "2023-11-03T14:32:20+00:00",
    "commented_code": "public ResourceChainRegistration addResolver(ResourceResolver resolver) {\n \t\tAssert.notNull(resolver, \"The provided ResourceResolver should not be null\");\n \t\tthis.resolvers.add(resolver);\n-\t\tif (resolver instanceof VersionResourceResolver) {\n-\t\t\tthis.hasVersionResolver = true;\n-\t\t}\n-\t\telse if (resolver instanceof PathResourceResolver) {\n-\t\t\tthis.hasPathResolver = true;\n-\t\t}\n-\t\telse if (resolver instanceof WebJarsResourceResolver) {\n-\t\t\tthis.hasWebjarsResolver = true;\n-\t\t}\n+\n+        switch (resolver) {\n+            case VersionResourceResolver ignored -> this.hasVersionResolver = true;\n+            case PathResourceResolver ignored -> this.hasPathResolver = true;\n+            case WebJarsResourceResolver ignored -> this.hasWebjarsResolver = true;\n+        }\n+",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1381778418",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 31538,
        "pr_file": "spring-webflux/src/main/java/org/springframework/web/reactive/config/ResourceChainRegistration.java",
        "discussion_id": "1381778418",
        "commented_code": "@@ -81,15 +81,13 @@ public ResourceChainRegistration(boolean cacheResources, @Nullable Cache cache)\n \tpublic ResourceChainRegistration addResolver(ResourceResolver resolver) {\n \t\tAssert.notNull(resolver, \"The provided ResourceResolver should not be null\");\n \t\tthis.resolvers.add(resolver);\n-\t\tif (resolver instanceof VersionResourceResolver) {\n-\t\t\tthis.hasVersionResolver = true;\n-\t\t}\n-\t\telse if (resolver instanceof PathResourceResolver) {\n-\t\t\tthis.hasPathResolver = true;\n-\t\t}\n-\t\telse if (resolver instanceof WebJarsResourceResolver) {\n-\t\t\tthis.hasWebjarsResolver = true;\n-\t\t}\n+\n+        switch (resolver) {\n+            case VersionResourceResolver ignored -> this.hasVersionResolver = true;\n+            case PathResourceResolver ignored -> this.hasPathResolver = true;\n+            case WebJarsResourceResolver ignored -> this.hasWebjarsResolver = true;\n+        }\n+\t\t",
        "comment_created_at": "2023-11-03T14:32:20+00:00",
        "comment_author": "sbrannen",
        "comment_body": "These changes break the build.\r\n\r\nPlease revert these changes.\r\n\r\n[Pattern Matching for switch](https://openjdk.org/jeps/441) did not become an \"enabled\" feature until Java 21, and we have a Java 17 baseline.\r\n\r\nMore importantly, please ensure that you actually run the build before submitting a PR. \r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "760980732",
    "pr_number": 24651,
    "pr_file": "spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java",
    "created_at": "2021-12-02T10:57:24+00:00",
    "commented_code": "con.setRequestMethod(\"HEAD\");\n \t}\n \n+\t/**\n+\t * This implementation returns the contents of a file as a string using the\n+\t * system default Charset. Provided the resource exists and the context has\n+\t * access to it, the contents will be returned as a single string with line\n+\t * feed characters retained.\n+\t * @return the contents of the requested file as a {@code String}.\n+\t * @throws FileNotFoundException in the event the file path is invalid.\n+\t * @throws IOException if the file can not be read or cannot be serialzied.\n+\t */\n+\t@Override\n+\tpublic String getContentAsString() throws IOException {\n+\n+\t\tif( !exists() ) {\n+\t\t\tthrow new FileNotFoundException(getDescription() + \" cannot be found.\");\n+\t\t}\n+\t\tif ( !isReadable() ) {\n+\t\t\tthrow new IOException(getDescription() + \" cannot be opened for reading.\");\n+\t\t}\n+\t\treturn new String(Files.readAllBytes(Paths.get(getFile().getAbsolutePath())), Charset.defaultCharset());",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "760980732",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24651,
        "pr_file": "spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java",
        "discussion_id": "760980732",
        "commented_code": "@@ -298,6 +301,39 @@ protected void customizeConnection(HttpURLConnection con) throws IOException {\n \t\tcon.setRequestMethod(\"HEAD\");\n \t}\n \n+\t/**\n+\t * This implementation returns the contents of a file as a string using the\n+\t * system default Charset. Provided the resource exists and the context has\n+\t * access to it, the contents will be returned as a single string with line\n+\t * feed characters retained.\n+\t * @return the contents of the requested file as a {@code String}.\n+\t * @throws FileNotFoundException in the event the file path is invalid.\n+\t * @throws IOException if the file can not be read or cannot be serialzied.\n+\t */\n+\t@Override\n+\tpublic String getContentAsString() throws IOException {\n+\n+\t\tif( !exists() ) {\n+\t\t\tthrow new FileNotFoundException(getDescription() + \" cannot be found.\");\n+\t\t}\n+\t\tif ( !isReadable() ) {\n+\t\t\tthrow new IOException(getDescription() + \" cannot be opened for reading.\");\n+\t\t}\n+\t\treturn new String(Files.readAllBytes(Paths.get(getFile().getAbsolutePath())), Charset.defaultCharset());",
        "comment_created_at": "2021-12-02T10:57:24+00:00",
        "comment_author": "poutsma",
        "comment_body": "Relying on the default charset is a recipe for disaster, as it can vary between environments and make code fail in collocation that runs fine in another.\r\n\r\nBecause we cannot determine the resource's charset with a 100% certainty, `Resource::getContentAsString()` should be removed, or it should be defined to use UTF-8 as default. (see `Files::readString`)",
        "pr_file_module": null
      },
      {
        "comment_id": "761230342",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 24651,
        "pr_file": "spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java",
        "discussion_id": "760980732",
        "commented_code": "@@ -298,6 +301,39 @@ protected void customizeConnection(HttpURLConnection con) throws IOException {\n \t\tcon.setRequestMethod(\"HEAD\");\n \t}\n \n+\t/**\n+\t * This implementation returns the contents of a file as a string using the\n+\t * system default Charset. Provided the resource exists and the context has\n+\t * access to it, the contents will be returned as a single string with line\n+\t * feed characters retained.\n+\t * @return the contents of the requested file as a {@code String}.\n+\t * @throws FileNotFoundException in the event the file path is invalid.\n+\t * @throws IOException if the file can not be read or cannot be serialzied.\n+\t */\n+\t@Override\n+\tpublic String getContentAsString() throws IOException {\n+\n+\t\tif( !exists() ) {\n+\t\t\tthrow new FileNotFoundException(getDescription() + \" cannot be found.\");\n+\t\t}\n+\t\tif ( !isReadable() ) {\n+\t\t\tthrow new IOException(getDescription() + \" cannot be opened for reading.\");\n+\t\t}\n+\t\treturn new String(Files.readAllBytes(Paths.get(getFile().getAbsolutePath())), Charset.defaultCharset());",
        "comment_created_at": "2021-12-02T15:53:08+00:00",
        "comment_author": "derrick-anderson",
        "comment_body": "Thanks Poutsma! \r\n\r\nAs this function is the core of this feature proposal I'll update the request to use utf-8 by default instead of throwing out the whole PR lol.",
        "pr_file_module": null
      }
    ]
  }
]