[
  {
    "discussion_id": "1169915587",
    "pr_number": 30318,
    "pr_file": "framework-docs/src/docs/asciidoc/core/core-expressions.adoc",
    "created_at": "2023-04-18T11:50:18+00:00",
    "commented_code": "This will inject a system property `pop3.port` if it is defined or 25 if not.\n =====\n \n+CAUTION: Beware that the behavior of the Elvis operator follows boolean semantics as opposed\n+to object reference semantics. Thus, rather than returning the first operand if it is non-null,\n+it returns the first operand if it evaluates to true based on the rules that comprise\n+https://groovy-lang.org/semantics.html#the-groovy-truth[The Groovy Truth].\n+",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "1169915587",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 30318,
        "pr_file": "framework-docs/src/docs/asciidoc/core/core-expressions.adoc",
        "discussion_id": "1169915587",
        "commented_code": "@@ -1775,6 +1775,11 @@ example shows how to use the Elvis operator in a `@Value` expression:\n This will inject a system property `pop3.port` if it is defined or 25 if not.\n =====\n \n+CAUTION: Beware that the behavior of the Elvis operator follows boolean semantics as opposed\n+to object reference semantics. Thus, rather than returning the first operand if it is non-null,\n+it returns the first operand if it evaluates to true based on the rules that comprise\n+https://groovy-lang.org/semantics.html#the-groovy-truth[The Groovy Truth].\n+",
        "comment_created_at": "2023-04-18T11:50:18+00:00",
        "comment_author": "sbrannen",
        "comment_body": "That's not entirely true.\r\n\r\nSpEL does not honor all of Groovy's \"truth\" rules.\r\n\r\nThe SpEL Elvis operator checks for values that are non-null **and** non-empty (for Strings).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "620358257",
    "pr_number": 26852,
    "pr_file": "src/docs/asciidoc/core/core-expressions.adoc",
    "created_at": "2021-04-26T14:36:06+00:00",
    "commented_code": "\"members.?[nationality == 'Serbian']\").getValue(societyContext) as List<Inventor>\n ----\n \n-Selection is possible upon both lists and maps. For a list, the selection\n-criteria is evaluated against each individual list element. Against a map, the\n+Selection is possible upon lists, arrays and maps. For a list or array, the selection",
    "repo_full_name": "spring-projects/spring-framework",
    "discussion_comments": [
      {
        "comment_id": "620358257",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 26852,
        "pr_file": "src/docs/asciidoc/core/core-expressions.adoc",
        "discussion_id": "620358257",
        "commented_code": "@@ -1820,8 +1820,8 @@ selection lets us easily get a list of Serbian inventors, as the following examp\n \t\t\t\"members.?[nationality == 'Serbian']\").getValue(societyContext) as List<Inventor>\n ----\n \n-Selection is possible upon both lists and maps. For a list, the selection\n-criteria is evaluated against each individual list element. Against a map, the\n+Selection is possible upon lists, arrays and maps. For a list or array, the selection",
        "comment_created_at": "2021-04-26T14:36:06+00:00",
        "comment_author": "sbrannen",
        "comment_body": "Selection is actually supported for arrays and anything that implements `java.lang.Iterable` or `java.util.Map`.\r\n\r\nWould you like to update your PR to reflect that?",
        "pr_file_module": null
      },
      {
        "comment_id": "620450547",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 26852,
        "pr_file": "src/docs/asciidoc/core/core-expressions.adoc",
        "discussion_id": "620358257",
        "commented_code": "@@ -1820,8 +1820,8 @@ selection lets us easily get a list of Serbian inventors, as the following examp\n \t\t\t\"members.?[nationality == 'Serbian']\").getValue(societyContext) as List<Inventor>\n ----\n \n-Selection is possible upon both lists and maps. For a list, the selection\n-criteria is evaluated against each individual list element. Against a map, the\n+Selection is possible upon lists, arrays and maps. For a list or array, the selection",
        "comment_created_at": "2021-04-26T16:19:32+00:00",
        "comment_author": "hrybs",
        "comment_body": "Yes.\r\nSure.",
        "pr_file_module": null
      },
      {
        "comment_id": "620519693",
        "repo_full_name": "spring-projects/spring-framework",
        "pr_number": 26852,
        "pr_file": "src/docs/asciidoc/core/core-expressions.adoc",
        "discussion_id": "620358257",
        "commented_code": "@@ -1820,8 +1820,8 @@ selection lets us easily get a list of Serbian inventors, as the following examp\n \t\t\t\"members.?[nationality == 'Serbian']\").getValue(societyContext) as List<Inventor>\n ----\n \n-Selection is possible upon both lists and maps. For a list, the selection\n-criteria is evaluated against each individual list element. Against a map, the\n+Selection is possible upon lists, arrays and maps. For a list or array, the selection",
        "comment_created_at": "2021-04-26T17:51:21+00:00",
        "comment_author": "hrybs",
        "comment_body": "Done.\r\n",
        "pr_file_module": null
      }
    ]
  }
]