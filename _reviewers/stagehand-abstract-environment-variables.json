[
  {
    "discussion_id": "1902136678",
    "pr_number": 370,
    "pr_file": "evals/deterministic/stagehand.config.ts",
    "created_at": "2025-01-03T20:24:18+00:00",
    "commented_code": "import type { ConstructorParams, LogLine } from \"../../lib\";\n \n const StagehandConfig: ConstructorParams = {\n-  env: \"LOCAL\" /* Environment to run Stagehand in */,\n-  apiKey: process.env.BROWSERBASE_API_KEY! /* API key for authentication */,\n-  projectId: process.env.BROWSERBASE_PROJECT_ID! /* Project identifier */,\n-  verbose: 1 /* Logging verbosity level (0=quiet, 1=normal, 2=verbose) */,\n-  debugDom: true /* Enable DOM debugging features */,\n-  headless: true /* Run browser in headless mode */,\n-  logger: (message: LogLine) =>\n-    console.log(\n-      `[stagehand::${message.category}] ${message.message}`,\n-    ) /* Custom logging function */,\n-  domSettleTimeoutMs: 30_000 /* Timeout for DOM to settle in milliseconds */,\n-  browserbaseSessionCreateParams: {\n-    projectId: process.env.BROWSERBASE_PROJECT_ID!,\n+  env: \"LOCAL\",\n+\n+  // Only set these if environment variables are present\n+  apiKey: process.env.BROWSERBASE_API_KEY || undefined,",
    "repo_full_name": "browserbase/stagehand",
    "discussion_comments": [
      {
        "comment_id": "1902136678",
        "repo_full_name": "browserbase/stagehand",
        "pr_number": 370,
        "pr_file": "evals/deterministic/stagehand.config.ts",
        "discussion_id": "1902136678",
        "commented_code": "@@ -1,26 +1,30 @@\n import type { ConstructorParams, LogLine } from \"../../lib\";\n \n const StagehandConfig: ConstructorParams = {\n-  env: \"LOCAL\" /* Environment to run Stagehand in */,\n-  apiKey: process.env.BROWSERBASE_API_KEY! /* API key for authentication */,\n-  projectId: process.env.BROWSERBASE_PROJECT_ID! /* Project identifier */,\n-  verbose: 1 /* Logging verbosity level (0=quiet, 1=normal, 2=verbose) */,\n-  debugDom: true /* Enable DOM debugging features */,\n-  headless: true /* Run browser in headless mode */,\n-  logger: (message: LogLine) =>\n-    console.log(\n-      `[stagehand::${message.category}] ${message.message}`,\n-    ) /* Custom logging function */,\n-  domSettleTimeoutMs: 30_000 /* Timeout for DOM to settle in milliseconds */,\n-  browserbaseSessionCreateParams: {\n-    projectId: process.env.BROWSERBASE_PROJECT_ID!,\n+  env: \"LOCAL\",\n+\n+  // Only set these if environment variables are present\n+  apiKey: process.env.BROWSERBASE_API_KEY || undefined,",
        "comment_created_at": "2025-01-03T20:24:18+00:00",
        "comment_author": "kamath",
        "comment_body": "unnecessary; `process.env.variable` defaults to undefined if not present; the `!` we added makes it required. we can just remove the exclamation points in the existing `stagehand.config.ts` and keep the same config + comments",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1875131486",
    "pr_number": 283,
    "pr_file": "evals/index.eval.ts",
    "created_at": "2024-12-09T00:58:45+00:00",
    "commented_code": "import fs from \"fs\";\n import path from \"path\";\n import process from \"process\";\n-import { EvalFunction } from \"../types/evals\";\n+import { EvalCategory, EvalFunction } from \"../types/evals\";\n import { AvailableModel } from \"../types/model\";\n import { EvalLogger, env } from \"./utils\";\n \n-const models: AvailableModel[] = [\"gpt-4o\", \"claude-3-5-sonnet-latest\"];\n+const MODELS: AvailableModel[] = process.env.EVAL_MODELS.split(\",\").map(",
    "repo_full_name": "browserbase/stagehand",
    "discussion_comments": [
      {
        "comment_id": "1875131486",
        "repo_full_name": "browserbase/stagehand",
        "pr_number": 283,
        "pr_file": "evals/index.eval.ts",
        "discussion_id": "1875131486",
        "commented_code": "@@ -2,30 +2,47 @@ import { Eval } from \"braintrust\";\n import fs from \"fs\";\n import path from \"path\";\n import process from \"process\";\n-import { EvalFunction } from \"../types/evals\";\n+import { EvalCategory, EvalFunction } from \"../types/evals\";\n import { AvailableModel } from \"../types/model\";\n import { EvalLogger, env } from \"./utils\";\n \n-const models: AvailableModel[] = [\"gpt-4o\", \"claude-3-5-sonnet-latest\"];\n+const MODELS: AvailableModel[] = process.env.EVAL_MODELS.split(\",\").map(",
        "comment_created_at": "2024-12-09T00:58:45+00:00",
        "comment_author": "kamath",
        "comment_body": "let's do `const DEFAULT_EVAL_MODELS = process.env.EVAL_MODELS ? \r\nprocess.env.EVAL_MODELS.split(\",\") : [\"gpt-4o\", \"claude-3-5-sonnet-latest\"]`\r\n\r\nand then reference `DEFAULT_EVAL_MODELS` directly. SAme with below. Good practice to not directly reference env vars",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1881418747",
    "pr_number": 283,
    "pr_file": "evals/index.eval.ts",
    "created_at": "2024-12-12T05:49:14+00:00",
    "commented_code": "}\n }\n \n-const models: AvailableModel[] =\n+const DEFAULT_EVAL_MODELS = process.env.EVAL_MODELS",
    "repo_full_name": "browserbase/stagehand",
    "discussion_comments": [
      {
        "comment_id": "1881418747",
        "repo_full_name": "browserbase/stagehand",
        "pr_number": 283,
        "pr_file": "evals/index.eval.ts",
        "discussion_id": "1881418747",
        "commented_code": "@@ -85,10 +99,22 @@ if (args.length > 0) {\n   }\n }\n \n-const models: AvailableModel[] =\n+const DEFAULT_EVAL_MODELS = process.env.EVAL_MODELS",
        "comment_created_at": "2024-12-12T05:49:14+00:00",
        "comment_author": "kamath",
        "comment_body": "can we instead have like `DEFAULT_EVAL_MODELS` and `EXPERIMENTAL_EVAL_MODELS`? the filter can then be parameterized too and it's easier to read",
        "pr_file_module": null
      }
    ]
  }
]