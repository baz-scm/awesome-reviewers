[
  {
    "discussion_id": "2067150156",
    "pr_number": 698,
    "pr_file": "evals/index.eval.ts",
    "created_at": "2025-04-29T18:51:55+00:00",
    "commented_code": "import { CustomOpenAIClient } from \"@/examples/external_clients/customOpenAI\";\n import OpenAI from \"openai\";\n import { initStagehand } from \"./initStagehand\";\n-import { AISdkClient } from \"@/examples/external_clients/aisdk\";\n import { google } from \"@ai-sdk/google\";\n import { anthropic } from \"@ai-sdk/anthropic\";\n import { groq } from \"@ai-sdk/groq\";\n import { cerebras } from \"@ai-sdk/cerebras\";\n import { openai } from \"@ai-sdk/openai\";\n+import { AISdkClient } from \"@/lib/llm/aisdk\";",
    "repo_full_name": "browserbase/stagehand",
    "discussion_comments": [
      {
        "comment_id": "2067150156",
        "repo_full_name": "browserbase/stagehand",
        "pr_number": 698,
        "pr_file": "evals/index.eval.ts",
        "discussion_id": "2067150156",
        "commented_code": "@@ -34,12 +34,12 @@ import { StagehandEvalError } from \"@/types/stagehandErrors\";\n import { CustomOpenAIClient } from \"@/examples/external_clients/customOpenAI\";\n import OpenAI from \"openai\";\n import { initStagehand } from \"./initStagehand\";\n-import { AISdkClient } from \"@/examples/external_clients/aisdk\";\n import { google } from \"@ai-sdk/google\";\n import { anthropic } from \"@ai-sdk/anthropic\";\n import { groq } from \"@ai-sdk/groq\";\n import { cerebras } from \"@ai-sdk/cerebras\";\n import { openai } from \"@ai-sdk/openai\";\n+import { AISdkClient } from \"@/lib/llm/aisdk\";",
        "comment_created_at": "2025-04-29T18:51:55+00:00",
        "comment_author": "kamath",
        "comment_body": "evals should only reference `dist`, not `lib`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2054780897",
    "pr_number": 668,
    "pr_file": "evals/evaluator.ts",
    "created_at": "2025-04-22T20:08:22+00:00",
    "commented_code": null,
    "repo_full_name": "browserbase/stagehand",
    "discussion_comments": [
      {
        "comment_id": "2054780897",
        "repo_full_name": "browserbase/stagehand",
        "pr_number": 668,
        "pr_file": "evals/evaluator.ts",
        "discussion_id": "2054780897",
        "commented_code": null,
        "comment_created_at": "2025-04-22T20:08:22+00:00",
        "comment_author": "seanmcguire12",
        "comment_body": "nit: should prob put these prompts & prompt building functions in `prompts.ts`, could do this in a fast follow",
        "pr_file_module": null
      },
      {
        "comment_id": "2054847257",
        "repo_full_name": "browserbase/stagehand",
        "pr_number": 668,
        "pr_file": "evals/evaluator.ts",
        "discussion_id": "2054780897",
        "commented_code": null,
        "comment_created_at": "2025-04-22T20:45:29+00:00",
        "comment_author": "miguelg719",
        "comment_body": "sg made a note for this",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2031710296",
    "pr_number": 637,
    "pr_file": "evals/initStagehand.ts",
    "created_at": "2025-04-07T17:41:20+00:00",
    "commented_code": "*/\n \n import { enableCaching, env } from \"./env\";\n-import {\n-  AvailableModel,\n-  ConstructorParams,\n-  LLMClient,\n-  LogLine,\n-  Stagehand,\n-} from \"@/dist\";\n+import { ConstructorParams, LLMClient, Stagehand } from \"@/dist\";\n import { EvalLogger } from \"./logger\";\n-import { StagehandEvalError } from \"@/types/stagehandErrors\";\n+\n+export type StagehandInitResult = {\n+  stagehand: Stagehand;\n+  logger: EvalLogger;\n+  debugUrl: string;\n+  sessionUrl: string;\n+  useTextExtract: boolean;\n+  stagehandConfig: ConstructorParams;\n+};",
    "repo_full_name": "browserbase/stagehand",
    "discussion_comments": [
      {
        "comment_id": "2031710296",
        "repo_full_name": "browserbase/stagehand",
        "pr_number": 637,
        "pr_file": "evals/initStagehand.ts",
        "discussion_id": "2031710296",
        "commented_code": "@@ -11,15 +11,17 @@\n  */\n \n import { enableCaching, env } from \"./env\";\n-import {\n-  AvailableModel,\n-  ConstructorParams,\n-  LLMClient,\n-  LogLine,\n-  Stagehand,\n-} from \"@/dist\";\n+import { ConstructorParams, LLMClient, Stagehand } from \"@/dist\";\n import { EvalLogger } from \"./logger\";\n-import { StagehandEvalError } from \"@/types/stagehandErrors\";\n+\n+export type StagehandInitResult = {\n+  stagehand: Stagehand;\n+  logger: EvalLogger;\n+  debugUrl: string;\n+  sessionUrl: string;\n+  useTextExtract: boolean;\n+  stagehandConfig: ConstructorParams;\n+};",
        "comment_created_at": "2025-04-07T17:41:20+00:00",
        "comment_author": "seanmcguire12",
        "comment_body": "Move`StagehandInitResult` to `types/evals.ts`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1920845951",
    "pr_number": 412,
    "pr_file": "lib/handlers/observeHandler.ts",
    "created_at": "2025-01-17T22:51:31+00:00",
    "commented_code": "return elementsWithSelectors;\n   }\n }\n+\n+type AccessibilityNode = {\n+  role: string;\n+  name?: string;\n+  description?: string;\n+  value?: string;\n+  children?: AccessibilityNode[];\n+  childIds?: string[];\n+  parentId?: string;\n+  nodeId?: string;\n+};\n+\n+interface TreeResult {\n+  tree: AccessibilityNode[];\n+  simplified: string;\n+}\n+\n+// Parser function for str output\n+function formatSimplifiedTree(node: AccessibilityNode, level = 0): string {",
    "repo_full_name": "browserbase/stagehand",
    "discussion_comments": [
      {
        "comment_id": "1920845951",
        "repo_full_name": "browserbase/stagehand",
        "pr_number": 412,
        "pr_file": "lib/handlers/observeHandler.ts",
        "discussion_id": "1920845951",
        "commented_code": "@@ -156,3 +238,191 @@ export class StagehandObserveHandler {\n     return elementsWithSelectors;\n   }\n }\n+\n+type AccessibilityNode = {\n+  role: string;\n+  name?: string;\n+  description?: string;\n+  value?: string;\n+  children?: AccessibilityNode[];\n+  childIds?: string[];\n+  parentId?: string;\n+  nodeId?: string;\n+};\n+\n+interface TreeResult {\n+  tree: AccessibilityNode[];\n+  simplified: string;\n+}\n+\n+// Parser function for str output\n+function formatSimplifiedTree(node: AccessibilityNode, level = 0): string {",
        "comment_created_at": "2025-01-17T22:51:31+00:00",
        "comment_author": "kamath",
        "comment_body": "can we make a `lib/a11y` directory and move these functions to `lib/a11y/utils.ts`? ",
        "pr_file_module": null
      }
    ]
  }
]