[
  {
    "discussion_id": "2206433942",
    "pr_number": 37105,
    "pr_file": "apps/studio/components/interfaces/Database/Replication/PipelineStatus.tsx",
    "created_at": "2025-07-15T05:35:42+00:00",
    "commented_code": "isSuccess,\n   requestStatus,\n }: PipelineStatusProps) => {\n+  const [isErrorDetailsOpen, setIsErrorDetailsOpen] = useState(false)\n+  const errorDetailsRef = useRef<HTMLDivElement>(null)\n+\n+  useEffect(() => {\n+    const handleClickOutside = (event: MouseEvent) => {\n+      if (errorDetailsRef.current && !errorDetailsRef.current.contains(event.target as Node)) {\n+        setIsErrorDetailsOpen(false)\n+      }\n+    }\n+\n+    if (isErrorDetailsOpen) {\n+      document.addEventListener('mousedown', handleClickOutside)\n+    }\n+\n+    return () => {\n+      document.removeEventListener('mousedown', handleClickOutside)\n+    }\n+  }, [isErrorDetailsOpen])\n+\n+  const handleCopyToClipboard = async (text: string) => {\n+    try {\n+      await copyToClipboard(text)\n+      toast.success('Error details copied to clipboard')\n+    } catch (error) {\n+      toast.error('Failed to copy error details')\n+    }\n+  }\n+\n+  const isFailedStatus = (\n+    status: ReplicationPipelineStatusData['status'] | undefined\n+  ): status is FailedStatus => {\n+    return (\n+      status !== null &&\n+      status !== undefined &&\n+      typeof status === 'object' &&\n+      status.name === PipelineStatusName.FAILED\n+    )\n+  }\n+\n+  const isLogLoadingState = (failedStatus: FailedStatus): boolean => {\n+    // Right now we hardcode the error message which is returned when k8s is not able to find logs, which seems\n+    // to be a transient error. In case we find a way to properly handle this in the backend, this hack will not\n+    // be needed anymore.\n+    return (\n+      failedStatus.message?.startsWith('unable to retrieve container logs for containerd://') ===",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2206433942",
        "repo_full_name": "supabase/supabase",
        "pr_number": 37105,
        "pr_file": "apps/studio/components/interfaces/Database/Replication/PipelineStatus.tsx",
        "discussion_id": "2206433942",
        "commented_code": "@@ -28,6 +52,175 @@ const PipelineStatus = ({\n   isSuccess,\n   requestStatus,\n }: PipelineStatusProps) => {\n+  const [isErrorDetailsOpen, setIsErrorDetailsOpen] = useState(false)\n+  const errorDetailsRef = useRef<HTMLDivElement>(null)\n+\n+  useEffect(() => {\n+    const handleClickOutside = (event: MouseEvent) => {\n+      if (errorDetailsRef.current && !errorDetailsRef.current.contains(event.target as Node)) {\n+        setIsErrorDetailsOpen(false)\n+      }\n+    }\n+\n+    if (isErrorDetailsOpen) {\n+      document.addEventListener('mousedown', handleClickOutside)\n+    }\n+\n+    return () => {\n+      document.removeEventListener('mousedown', handleClickOutside)\n+    }\n+  }, [isErrorDetailsOpen])\n+\n+  const handleCopyToClipboard = async (text: string) => {\n+    try {\n+      await copyToClipboard(text)\n+      toast.success('Error details copied to clipboard')\n+    } catch (error) {\n+      toast.error('Failed to copy error details')\n+    }\n+  }\n+\n+  const isFailedStatus = (\n+    status: ReplicationPipelineStatusData['status'] | undefined\n+  ): status is FailedStatus => {\n+    return (\n+      status !== null &&\n+      status !== undefined &&\n+      typeof status === 'object' &&\n+      status.name === PipelineStatusName.FAILED\n+    )\n+  }\n+\n+  const isLogLoadingState = (failedStatus: FailedStatus): boolean => {\n+    // Right now we hardcode the error message which is returned when k8s is not able to find logs, which seems\n+    // to be a transient error. In case we find a way to properly handle this in the backend, this hack will not\n+    // be needed anymore.\n+    return (\n+      failedStatus.message?.startsWith('unable to retrieve container logs for containerd://') ===",
        "comment_created_at": "2025-07-15T05:35:42+00:00",
        "comment_author": "imor",
        "comment_body": "We do not want to expose the fact that we are running containers. Users might not even care, so the error could be more general \"failed to fetch logs\" or something.",
        "pr_file_module": null
      },
      {
        "comment_id": "2206717823",
        "repo_full_name": "supabase/supabase",
        "pr_number": 37105,
        "pr_file": "apps/studio/components/interfaces/Database/Replication/PipelineStatus.tsx",
        "discussion_id": "2206433942",
        "commented_code": "@@ -28,6 +52,175 @@ const PipelineStatus = ({\n   isSuccess,\n   requestStatus,\n }: PipelineStatusProps) => {\n+  const [isErrorDetailsOpen, setIsErrorDetailsOpen] = useState(false)\n+  const errorDetailsRef = useRef<HTMLDivElement>(null)\n+\n+  useEffect(() => {\n+    const handleClickOutside = (event: MouseEvent) => {\n+      if (errorDetailsRef.current && !errorDetailsRef.current.contains(event.target as Node)) {\n+        setIsErrorDetailsOpen(false)\n+      }\n+    }\n+\n+    if (isErrorDetailsOpen) {\n+      document.addEventListener('mousedown', handleClickOutside)\n+    }\n+\n+    return () => {\n+      document.removeEventListener('mousedown', handleClickOutside)\n+    }\n+  }, [isErrorDetailsOpen])\n+\n+  const handleCopyToClipboard = async (text: string) => {\n+    try {\n+      await copyToClipboard(text)\n+      toast.success('Error details copied to clipboard')\n+    } catch (error) {\n+      toast.error('Failed to copy error details')\n+    }\n+  }\n+\n+  const isFailedStatus = (\n+    status: ReplicationPipelineStatusData['status'] | undefined\n+  ): status is FailedStatus => {\n+    return (\n+      status !== null &&\n+      status !== undefined &&\n+      typeof status === 'object' &&\n+      status.name === PipelineStatusName.FAILED\n+    )\n+  }\n+\n+  const isLogLoadingState = (failedStatus: FailedStatus): boolean => {\n+    // Right now we hardcode the error message which is returned when k8s is not able to find logs, which seems\n+    // to be a transient error. In case we find a way to properly handle this in the backend, this hack will not\n+    // be needed anymore.\n+    return (\n+      failedStatus.message?.startsWith('unable to retrieve container logs for containerd://') ===",
        "comment_created_at": "2025-07-15T07:52:11+00:00",
        "comment_author": "iambriccardo",
        "comment_body": "This is a limitation since this error is thrown by the K8S client itself, what we can do to hide this is to actually return `loading` from the backend when the error is this one and the frontend just spins when loading is true.",
        "pr_file_module": null
      },
      {
        "comment_id": "2206843909",
        "repo_full_name": "supabase/supabase",
        "pr_number": 37105,
        "pr_file": "apps/studio/components/interfaces/Database/Replication/PipelineStatus.tsx",
        "discussion_id": "2206433942",
        "commented_code": "@@ -28,6 +52,175 @@ const PipelineStatus = ({\n   isSuccess,\n   requestStatus,\n }: PipelineStatusProps) => {\n+  const [isErrorDetailsOpen, setIsErrorDetailsOpen] = useState(false)\n+  const errorDetailsRef = useRef<HTMLDivElement>(null)\n+\n+  useEffect(() => {\n+    const handleClickOutside = (event: MouseEvent) => {\n+      if (errorDetailsRef.current && !errorDetailsRef.current.contains(event.target as Node)) {\n+        setIsErrorDetailsOpen(false)\n+      }\n+    }\n+\n+    if (isErrorDetailsOpen) {\n+      document.addEventListener('mousedown', handleClickOutside)\n+    }\n+\n+    return () => {\n+      document.removeEventListener('mousedown', handleClickOutside)\n+    }\n+  }, [isErrorDetailsOpen])\n+\n+  const handleCopyToClipboard = async (text: string) => {\n+    try {\n+      await copyToClipboard(text)\n+      toast.success('Error details copied to clipboard')\n+    } catch (error) {\n+      toast.error('Failed to copy error details')\n+    }\n+  }\n+\n+  const isFailedStatus = (\n+    status: ReplicationPipelineStatusData['status'] | undefined\n+  ): status is FailedStatus => {\n+    return (\n+      status !== null &&\n+      status !== undefined &&\n+      typeof status === 'object' &&\n+      status.name === PipelineStatusName.FAILED\n+    )\n+  }\n+\n+  const isLogLoadingState = (failedStatus: FailedStatus): boolean => {\n+    // Right now we hardcode the error message which is returned when k8s is not able to find logs, which seems\n+    // to be a transient error. In case we find a way to properly handle this in the backend, this hack will not\n+    // be needed anymore.\n+    return (\n+      failedStatus.message?.startsWith('unable to retrieve container logs for containerd://') ===",
        "comment_created_at": "2025-07-15T08:36:30+00:00",
        "comment_author": "imor",
        "comment_body": "I don't think this is about where we put this logic, it more generally sounds like a losing battle to rely on error message contents. This whole approach about how to show the status needs to be rethought/revisited.\r\n\r\nI just checked how the project status button (see below screenshot) shows status for other services and it's a healthcheck call. We'll mostly likely have to expose a health check endpoint from inside the replicator.\r\n\r\n<img width=\"253\" height=\"355\" alt=\"image\" src=\"https://github.com/user-attachments/assets/c43041d6-0591-42b5-a932-c151c4243b4b\" />\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2206850470",
        "repo_full_name": "supabase/supabase",
        "pr_number": 37105,
        "pr_file": "apps/studio/components/interfaces/Database/Replication/PipelineStatus.tsx",
        "discussion_id": "2206433942",
        "commented_code": "@@ -28,6 +52,175 @@ const PipelineStatus = ({\n   isSuccess,\n   requestStatus,\n }: PipelineStatusProps) => {\n+  const [isErrorDetailsOpen, setIsErrorDetailsOpen] = useState(false)\n+  const errorDetailsRef = useRef<HTMLDivElement>(null)\n+\n+  useEffect(() => {\n+    const handleClickOutside = (event: MouseEvent) => {\n+      if (errorDetailsRef.current && !errorDetailsRef.current.contains(event.target as Node)) {\n+        setIsErrorDetailsOpen(false)\n+      }\n+    }\n+\n+    if (isErrorDetailsOpen) {\n+      document.addEventListener('mousedown', handleClickOutside)\n+    }\n+\n+    return () => {\n+      document.removeEventListener('mousedown', handleClickOutside)\n+    }\n+  }, [isErrorDetailsOpen])\n+\n+  const handleCopyToClipboard = async (text: string) => {\n+    try {\n+      await copyToClipboard(text)\n+      toast.success('Error details copied to clipboard')\n+    } catch (error) {\n+      toast.error('Failed to copy error details')\n+    }\n+  }\n+\n+  const isFailedStatus = (\n+    status: ReplicationPipelineStatusData['status'] | undefined\n+  ): status is FailedStatus => {\n+    return (\n+      status !== null &&\n+      status !== undefined &&\n+      typeof status === 'object' &&\n+      status.name === PipelineStatusName.FAILED\n+    )\n+  }\n+\n+  const isLogLoadingState = (failedStatus: FailedStatus): boolean => {\n+    // Right now we hardcode the error message which is returned when k8s is not able to find logs, which seems\n+    // to be a transient error. In case we find a way to properly handle this in the backend, this hack will not\n+    // be needed anymore.\n+    return (\n+      failedStatus.message?.startsWith('unable to retrieve container logs for containerd://') ===",
        "comment_created_at": "2025-07-15T08:39:05+00:00",
        "comment_author": "iambriccardo",
        "comment_body": "Happy to discuss any improvements. If you want we can drop entirely the error message and just show that it failed and maybe prompt to check logflare? Wdyt?",
        "pr_file_module": null
      },
      {
        "comment_id": "2206912144",
        "repo_full_name": "supabase/supabase",
        "pr_number": 37105,
        "pr_file": "apps/studio/components/interfaces/Database/Replication/PipelineStatus.tsx",
        "discussion_id": "2206433942",
        "commented_code": "@@ -28,6 +52,175 @@ const PipelineStatus = ({\n   isSuccess,\n   requestStatus,\n }: PipelineStatusProps) => {\n+  const [isErrorDetailsOpen, setIsErrorDetailsOpen] = useState(false)\n+  const errorDetailsRef = useRef<HTMLDivElement>(null)\n+\n+  useEffect(() => {\n+    const handleClickOutside = (event: MouseEvent) => {\n+      if (errorDetailsRef.current && !errorDetailsRef.current.contains(event.target as Node)) {\n+        setIsErrorDetailsOpen(false)\n+      }\n+    }\n+\n+    if (isErrorDetailsOpen) {\n+      document.addEventListener('mousedown', handleClickOutside)\n+    }\n+\n+    return () => {\n+      document.removeEventListener('mousedown', handleClickOutside)\n+    }\n+  }, [isErrorDetailsOpen])\n+\n+  const handleCopyToClipboard = async (text: string) => {\n+    try {\n+      await copyToClipboard(text)\n+      toast.success('Error details copied to clipboard')\n+    } catch (error) {\n+      toast.error('Failed to copy error details')\n+    }\n+  }\n+\n+  const isFailedStatus = (\n+    status: ReplicationPipelineStatusData['status'] | undefined\n+  ): status is FailedStatus => {\n+    return (\n+      status !== null &&\n+      status !== undefined &&\n+      typeof status === 'object' &&\n+      status.name === PipelineStatusName.FAILED\n+    )\n+  }\n+\n+  const isLogLoadingState = (failedStatus: FailedStatus): boolean => {\n+    // Right now we hardcode the error message which is returned when k8s is not able to find logs, which seems\n+    // to be a transient error. In case we find a way to properly handle this in the backend, this hack will not\n+    // be needed anymore.\n+    return (\n+      failedStatus.message?.startsWith('unable to retrieve container logs for containerd://') ===",
        "comment_created_at": "2025-07-15T09:01:41+00:00",
        "comment_author": "imor",
        "comment_body": "We can merge this PR, since this will be useful for debugging on staging, but iterate on the design in new PRs.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2111286320",
    "pr_number": 35809,
    "pr_file": "apps/studio/components/ui/ProjectSettings/DisplayApiSettings.tsx",
    "created_at": "2025-05-28T08:39:59+00:00",
    "commented_code": "// api keys should not be empty. However it can be populated with a delay on project creation\n   const isApiKeysEmpty = apiKeys.length === 0\n \n+  const { isLoading: isLoadingLastUsed, logData: lastUsedLogData } = useLogsQuery(projectRef, {\n+    iso_timestamp_start: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n+    iso_timestamp_end: new Date().toISOString(),\n+    sql: \"-- last-used-anon--service_role-api-keys\nSELECT unix_millis(max(timestamp)) as timestamp, payload.role, payload.signature_prefix FROM edge_logs cross join unnest(metadata) as m cross join unnest(m.request) as request cross join unnest(request.sb) as sb cross join unnest(sb.jwt) as jwt cross join unnest(jwt.apikey) as apikey cross join unnest(apikey.payload) as payload WHERE apikey.invalid is null and payload.issuer = 'supabase' and payload.algorithm = 'HS256' and payload.role in ('anon', 'service_role') GROUP BY payload.role, payload.signature_prefix\",\n+  })\n+\n+  const lastUsedAPIKeys = useMemo(() => {",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2111286320",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35809,
        "pr_file": "apps/studio/components/ui/ProjectSettings/DisplayApiSettings.tsx",
        "discussion_id": "2111286320",
        "commented_code": "@@ -42,6 +50,36 @@ const DisplayApiSettings = ({\n   // api keys should not be empty. However it can be populated with a delay on project creation\n   const isApiKeysEmpty = apiKeys.length === 0\n \n+  const { isLoading: isLoadingLastUsed, logData: lastUsedLogData } = useLogsQuery(projectRef, {\n+    iso_timestamp_start: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n+    iso_timestamp_end: new Date().toISOString(),\n+    sql: \"-- last-used-anon--service_role-api-keys\\nSELECT unix_millis(max(timestamp)) as timestamp, payload.role, payload.signature_prefix FROM edge_logs cross join unnest(metadata) as m cross join unnest(m.request) as request cross join unnest(request.sb) as sb cross join unnest(sb.jwt) as jwt cross join unnest(jwt.apikey) as apikey cross join unnest(apikey.payload) as payload WHERE apikey.invalid is null and payload.issuer = 'supabase' and payload.algorithm = 'HS256' and payload.role in ('anon', 'service_role') GROUP BY payload.role, payload.signature_prefix\",\n+  })\n+\n+  const lastUsedAPIKeys = useMemo(() => {",
        "comment_created_at": "2025-05-28T08:39:59+00:00",
        "comment_author": "jordienr",
        "comment_body": "Can you turn this into a function and wrap it in a trycatch? I'm worried it could cause runtime issues since we dont validate the data coming from the LF query\r\n\r\nfunction getLastUsedAPIKeys(lastUsedLogData)...\r\n\r\nconst lastUsedAPIKeys = getLastUsedAPIKeys()...\r\n\r\nAlso this will make it easier to add a test if we have to update this logic. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2042594496",
    "pr_number": 34803,
    "pr_file": "apps/ui-library/registry/default/blocks/social-auth-nextjs/app/auth/error/page.tsx",
    "created_at": "2025-04-14T17:23:35+00:00",
    "commented_code": "+import { Card, CardContent, CardHeader, CardTitle } from '@/registry/default/components/ui/card'\n+\n+export default async function Page({ searchParams }: { searchParams: Promise<{ error: string }> }) {\n+  const params = await searchParams\n+\n+  return (\n+    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\n+      <div className=\"w-full max-w-sm\">\n+        <div className=\"flex flex-col gap-6\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle className=\"text-2xl\">Sorry, something went wrong.</CardTitle>\n+            </CardHeader>\n+            <CardContent>\n+              {params?.error ? (\n+                <p className=\"text-sm text-muted-foreground\">Code error: {params.error}</p>",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2042594496",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34803,
        "pr_file": "apps/ui-library/registry/default/blocks/social-auth-nextjs/app/auth/error/page.tsx",
        "discussion_id": "2042594496",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { Card, CardContent, CardHeader, CardTitle } from '@/registry/default/components/ui/card'\n+\n+export default async function Page({ searchParams }: { searchParams: Promise<{ error: string }> }) {\n+  const params = await searchParams\n+\n+  return (\n+    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\n+      <div className=\"w-full max-w-sm\">\n+        <div className=\"flex flex-col gap-6\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle className=\"text-2xl\">Sorry, something went wrong.</CardTitle>\n+            </CardHeader>\n+            <CardContent>\n+              {params?.error ? (\n+                <p className=\"text-sm text-muted-foreground\">Code error: {params.error}</p>",
        "comment_created_at": "2025-04-14T17:23:35+00:00",
        "comment_author": "saltcod",
        "comment_body": "got an error on this but my url was \r\n\r\nhttp://localhost:3000/auth/error#error=server_error&error_code=unexpected_failure&error_description=Database+error+saving+new+user\r\n\r\nso the error wasn't formatted here\r\n![screenshot-2025-04-14-at-14 52 17](https://github.com/user-attachments/assets/9fdc628a-e530-4a8a-80c6-0e534d5a16b9)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2042643864",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34803,
        "pr_file": "apps/ui-library/registry/default/blocks/social-auth-nextjs/app/auth/error/page.tsx",
        "discussion_id": "2042594496",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { Card, CardContent, CardHeader, CardTitle } from '@/registry/default/components/ui/card'\n+\n+export default async function Page({ searchParams }: { searchParams: Promise<{ error: string }> }) {\n+  const params = await searchParams\n+\n+  return (\n+    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\n+      <div className=\"w-full max-w-sm\">\n+        <div className=\"flex flex-col gap-6\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle className=\"text-2xl\">Sorry, something went wrong.</CardTitle>\n+            </CardHeader>\n+            <CardContent>\n+              {params?.error ? (\n+                <p className=\"text-sm text-muted-foreground\">Code error: {params.error}</p>",
        "comment_created_at": "2025-04-14T18:00:22+00:00",
        "comment_author": "saltcod",
        "comment_body": "(this was a project specific problem \u2014\u00a0it worked when I used a different project \u2014\u00a0just noting that the url format isn't what's expected in this error message handling) ",
        "pr_file_module": null
      },
      {
        "comment_id": "2046501549",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34803,
        "pr_file": "apps/ui-library/registry/default/blocks/social-auth-nextjs/app/auth/error/page.tsx",
        "discussion_id": "2042594496",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { Card, CardContent, CardHeader, CardTitle } from '@/registry/default/components/ui/card'\n+\n+export default async function Page({ searchParams }: { searchParams: Promise<{ error: string }> }) {\n+  const params = await searchParams\n+\n+  return (\n+    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\n+      <div className=\"w-full max-w-sm\">\n+        <div className=\"flex flex-col gap-6\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle className=\"text-2xl\">Sorry, something went wrong.</CardTitle>\n+            </CardHeader>\n+            <CardContent>\n+              {params?.error ? (\n+                <p className=\"text-sm text-muted-foreground\">Code error: {params.error}</p>",
        "comment_created_at": "2025-04-16T09:25:10+00:00",
        "comment_author": "ivasilov",
        "comment_body": "How did you get that error?",
        "pr_file_module": null
      },
      {
        "comment_id": "2046995393",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34803,
        "pr_file": "apps/ui-library/registry/default/blocks/social-auth-nextjs/app/auth/error/page.tsx",
        "discussion_id": "2042594496",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { Card, CardContent, CardHeader, CardTitle } from '@/registry/default/components/ui/card'\n+\n+export default async function Page({ searchParams }: { searchParams: Promise<{ error: string }> }) {\n+  const params = await searchParams\n+\n+  return (\n+    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\n+      <div className=\"w-full max-w-sm\">\n+        <div className=\"flex flex-col gap-6\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle className=\"text-2xl\">Sorry, something went wrong.</CardTitle>\n+            </CardHeader>\n+            <CardContent>\n+              {params?.error ? (\n+                <p className=\"text-sm text-muted-foreground\">Code error: {params.error}</p>",
        "comment_created_at": "2025-04-16T13:54:25+00:00",
        "comment_author": "saltcod",
        "comment_body": "there's an issue with a trigger or function in my project that caused creating a new user to fail when I tried to sign up \r\n\r\nit brought me here \u2014 if you visit this, you'll see that just the \"something went wrong\" message shows, not the error as it isn't in a search param\r\n\r\nhttp://localhost:3000/auth/error#error=server_error&error_code=unexpected_failure&error_description=Database+error+saving+new+user",
        "pr_file_module": null
      },
      {
        "comment_id": "2047006844",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34803,
        "pr_file": "apps/ui-library/registry/default/blocks/social-auth-nextjs/app/auth/error/page.tsx",
        "discussion_id": "2042594496",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { Card, CardContent, CardHeader, CardTitle } from '@/registry/default/components/ui/card'\n+\n+export default async function Page({ searchParams }: { searchParams: Promise<{ error: string }> }) {\n+  const params = await searchParams\n+\n+  return (\n+    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\n+      <div className=\"w-full max-w-sm\">\n+        <div className=\"flex flex-col gap-6\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle className=\"text-2xl\">Sorry, something went wrong.</CardTitle>\n+            </CardHeader>\n+            <CardContent>\n+              {params?.error ? (\n+                <p className=\"text-sm text-muted-foreground\">Code error: {params.error}</p>",
        "comment_created_at": "2025-04-16T14:00:27+00:00",
        "comment_author": "saltcod",
        "comment_body": "could just add a simple condition to check for error_description? \r\n\r\n![screenshot-2025-04-16-at-11 29 51](https://github.com/user-attachments/assets/ad95f823-9a22-4cb2-a64d-6806477431e4)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2047149893",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34803,
        "pr_file": "apps/ui-library/registry/default/blocks/social-auth-nextjs/app/auth/error/page.tsx",
        "discussion_id": "2042594496",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { Card, CardContent, CardHeader, CardTitle } from '@/registry/default/components/ui/card'\n+\n+export default async function Page({ searchParams }: { searchParams: Promise<{ error: string }> }) {\n+  const params = await searchParams\n+\n+  return (\n+    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\n+      <div className=\"w-full max-w-sm\">\n+        <div className=\"flex flex-col gap-6\">\n+          <Card>\n+            <CardHeader>\n+              <CardTitle className=\"text-2xl\">Sorry, something went wrong.</CardTitle>\n+            </CardHeader>\n+            <CardContent>\n+              {params?.error ? (\n+                <p className=\"text-sm text-muted-foreground\">Code error: {params.error}</p>",
        "comment_created_at": "2025-04-16T15:06:34+00:00",
        "comment_author": "ivasilov",
        "comment_body": "That URL is not possible to get to through the block. In case of an error, the oauth flow redirects to `/auth/error?error=${error?.message}` which doesn't have any hashes. Are you sure your app isn't somehow misusing the block?",
        "pr_file_module": null
      }
    ]
  }
]