[
  {
    "discussion_id": "2219568716",
    "pr_number": 37290,
    "pr_file": "apps/studio/components/layouts/TableEditorLayout/TableEditorMenu.tsx",
    "created_at": "2025-07-21T15:36:29+00:00",
    "commented_code": "Viewing protected schema\n                 </AlertTitle_Shadcn_>\n                 <AlertDescription_Shadcn_ className=\"text-xs\">\n-                  <p className=\"mb-2\">",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2219568716",
        "repo_full_name": "supabase/supabase",
        "pr_number": 37290,
        "pr_file": "apps/studio/components/layouts/TableEditorLayout/TableEditorMenu.tsx",
        "discussion_id": "2219568716",
        "commented_code": "@@ -164,12 +155,30 @@ const TableEditorMenu = () => {\n                   Viewing protected schema\n                 </AlertTitle_Shadcn_>\n                 <AlertDescription_Shadcn_ className=\"text-xs\">\n-                  <p className=\"mb-2\">",
        "comment_created_at": "2025-07-21T15:36:29+00:00",
        "comment_author": "joshenlim",
        "comment_body": "this Alert_Shadcn can be replaced by ProtectedSchemaWarning?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2092714930",
    "pr_number": 35705,
    "pr_file": "apps/studio/components/interfaces/Home/ServiceStatus.tsx",
    "created_at": "2025-05-16T09:40:01+00:00",
    "commented_code": "isProjectNew: boolean\n   status?: ProjectServiceStatus\n }) => {\n+  if (isSuccess) return 'Healthy'",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2092714930",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35705,
        "pr_file": "apps/studio/components/interfaces/Home/ServiceStatus.tsx",
        "discussion_id": "2092714930",
        "commented_code": "@@ -33,12 +33,12 @@ const StatusMessage = ({\n   isProjectNew: boolean\n   status?: ProjectServiceStatus\n }) => {\n+  if (isSuccess) return 'Healthy'",
        "comment_created_at": "2025-05-16T09:40:01+00:00",
        "comment_author": "ivasilov",
        "comment_body": "Shouldn't this be\r\n```\r\n  if (isLoading) return 'Checking status'\r\n  if (isSuccess) {\r\n    if (status === 'UNHEALTHY') return 'Unhealthy'\r\n    if (status === 'COMING_UP') return 'Coming up...'\r\n    if (status === 'ACTIVE_HEALTHY') return 'Healthy'\r\n  }\r\n  if (isProjectNew) return 'Coming up...'\r\n  return 'Unable to connect'\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2092732003",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35705,
        "pr_file": "apps/studio/components/interfaces/Home/ServiceStatus.tsx",
        "discussion_id": "2092714930",
        "commented_code": "@@ -33,12 +33,12 @@ const StatusMessage = ({\n   isProjectNew: boolean\n   status?: ProjectServiceStatus\n }) => {\n+  if (isSuccess) return 'Healthy'",
        "comment_created_at": "2025-05-16T09:50:28+00:00",
        "comment_author": "joshenlim",
        "comment_body": "isSuccess shouldn't be mashed with status imo\r\n\r\ni realised this is confusing but `isSuccess` here isn't from react-query, so its not indicative of a successful network request\r\n\r\n![image](https://github.com/user-attachments/assets/c13c6b75-d518-4ea3-beba-f69de3d391c2)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2092733693",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35705,
        "pr_file": "apps/studio/components/interfaces/Home/ServiceStatus.tsx",
        "discussion_id": "2092714930",
        "commented_code": "@@ -33,12 +33,12 @@ const StatusMessage = ({\n   isProjectNew: boolean\n   status?: ProjectServiceStatus\n }) => {\n+  if (isSuccess) return 'Healthy'",
        "comment_created_at": "2025-05-16T09:51:27+00:00",
        "comment_author": "joshenlim",
        "comment_body": "lemme refactor this to change `isSuccess` to `isHealthy`, its very easily confused haha",
        "pr_file_module": null
      },
      {
        "comment_id": "2092736066",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35705,
        "pr_file": "apps/studio/components/interfaces/Home/ServiceStatus.tsx",
        "discussion_id": "2092714930",
        "commented_code": "@@ -33,12 +33,12 @@ const StatusMessage = ({\n   isProjectNew: boolean\n   status?: ProjectServiceStatus\n }) => {\n+  if (isSuccess) return 'Healthy'",
        "comment_created_at": "2025-05-16T09:52:54+00:00",
        "comment_author": "joshenlim",
        "comment_body": "okay just pushed!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2038732223",
    "pr_number": 34922,
    "pr_file": "apps/studio/components/interfaces/Organization/BillingSettings/BillingAddress/BillingAddressDialog.tsx",
    "created_at": "2025-04-11T03:10:04+00:00",
    "commented_code": "+import { useState } from 'react'\n+import { Button, Dialog, DialogContent } from 'ui'\n+import { Label_Shadcn_ as Label } from 'ui'\n+import BillingAddressForm from './BillingAddressForm'\n+import { Pencil } from 'lucide-react'\n+\n+import { useCheckPermissions } from 'hooks/misc/useCheckPermissions'\n+import { useOrganizationCustomerProfileQuery } from 'data/organizations/organization-customer-profile-query'\n+import { PermissionAction } from '@supabase/shared-types/out/constants'\n+import NoPermission from 'components/ui/NoPermission'\n+import ShimmeringLoader from 'components/ui/ShimmeringLoader'\n+import AlertError from 'components/ui/AlertError'\n+\n+interface BillingAddressDialogProps {\n+  slug: string\n+}\n+\n+const BillingAddressDialog = ({ slug }: BillingAddressDialogProps) => {",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2038732223",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34922,
        "pr_file": "apps/studio/components/interfaces/Organization/BillingSettings/BillingAddress/BillingAddressDialog.tsx",
        "discussion_id": "2038732223",
        "commented_code": "@@ -0,0 +1,117 @@\n+import { useState } from 'react'\n+import { Button, Dialog, DialogContent } from 'ui'\n+import { Label_Shadcn_ as Label } from 'ui'\n+import BillingAddressForm from './BillingAddressForm'\n+import { Pencil } from 'lucide-react'\n+\n+import { useCheckPermissions } from 'hooks/misc/useCheckPermissions'\n+import { useOrganizationCustomerProfileQuery } from 'data/organizations/organization-customer-profile-query'\n+import { PermissionAction } from '@supabase/shared-types/out/constants'\n+import NoPermission from 'components/ui/NoPermission'\n+import ShimmeringLoader from 'components/ui/ShimmeringLoader'\n+import AlertError from 'components/ui/AlertError'\n+\n+interface BillingAddressDialogProps {\n+  slug: string\n+}\n+\n+const BillingAddressDialog = ({ slug }: BillingAddressDialogProps) => {",
        "comment_created_at": "2025-04-11T03:10:04+00:00",
        "comment_author": "kevcodez",
        "comment_body": "might be better to rename this modal to something like BillingCustomerDataDialog or so, as it will cover address + tax id",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2015588047",
    "pr_number": 34459,
    "pr_file": "apps/www/components/LaunchWeek/14/hooks/use-conf-data.tsx",
    "created_at": "2025-03-27T04:05:32+00:00",
    "commented_code": "+import { RealtimeChannel, Session, SupabaseClient } from '@supabase/supabase-js'\n+import { useRouter } from 'next/router'\n+import { createContext, Dispatch, useContext, useEffect, useMemo, useReducer } from 'react'\n+\n+/**\n+ * This is copy of shared use-conf-data.ts. For laynch week 14 we need different ticket states.\n+ * To not break the existing functionality, we are creating a new context and hook.\n+ */\n+\n+export type TicketState = 'registration' | 'ticket-visible' | 'loading' | 'ticket-loading'\n+\n+export type UserTicketData = {\n+  id?: string\n+  email?: string\n+  username?: string\n+  name?: string\n+  ticket_number?: number\n+  platinum?: boolean\n+  golden?: boolean\n+  referrals?: number\n+  bg_image_id?: number\n+  role?: string\n+  company?: string\n+  location?: string\n+  metadata?: {\n+    role?: string\n+    company?: string\n+    location?: string\n+    hasSecretTicket?: boolean\n+    hasSharedSecret?: boolean\n+    hideAvatar?: boolean\n+    hideMetadata?: boolean\n+    theme?: string\n+  }\n+  shared_on_twitter?: string\n+  shared_on_linkedin?: string\n+  secret?: boolean\n+}\n+\n+type LwAction =\n+  | { type: 'USER_TICKET_FETCH_STARTED' }\n+  | { type: 'USER_TICKET_FETCH_SUCCESS'; payload: UserTicketData }\n+  | { type: 'USER_TICKET_FETCH_ERROR'; payload: Error }\n+  | { type: 'USER_TICKET_UPDATED'; payload: UserTicketData }\n+  | { type: 'SESSION_UPDATED'; payload: Session | null }\n+  | { type: 'TICKET_LOADING_START' }\n+  | { type: 'TICKET_LOADING_SUCCESS' }\n+  | { type: 'TICKET_LOADING_ERROR'; payload?: Error }\n+  | { type: 'PARTYMODE_ENABLE'; payload: RealtimeChannel }\n+  | { type: 'PARTYMODE_DISABLE' }\n+  | { type: 'URL_PARAMS_LOADED'; payload: { referal?: string } }",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2015588047",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34459,
        "pr_file": "apps/www/components/LaunchWeek/14/hooks/use-conf-data.tsx",
        "discussion_id": "2015588047",
        "commented_code": "@@ -0,0 +1,233 @@\n+import { RealtimeChannel, Session, SupabaseClient } from '@supabase/supabase-js'\n+import { useRouter } from 'next/router'\n+import { createContext, Dispatch, useContext, useEffect, useMemo, useReducer } from 'react'\n+\n+/**\n+ * This is copy of shared use-conf-data.ts. For laynch week 14 we need different ticket states.\n+ * To not break the existing functionality, we are creating a new context and hook.\n+ */\n+\n+export type TicketState = 'registration' | 'ticket-visible' | 'loading' | 'ticket-loading'\n+\n+export type UserTicketData = {\n+  id?: string\n+  email?: string\n+  username?: string\n+  name?: string\n+  ticket_number?: number\n+  platinum?: boolean\n+  golden?: boolean\n+  referrals?: number\n+  bg_image_id?: number\n+  role?: string\n+  company?: string\n+  location?: string\n+  metadata?: {\n+    role?: string\n+    company?: string\n+    location?: string\n+    hasSecretTicket?: boolean\n+    hasSharedSecret?: boolean\n+    hideAvatar?: boolean\n+    hideMetadata?: boolean\n+    theme?: string\n+  }\n+  shared_on_twitter?: string\n+  shared_on_linkedin?: string\n+  secret?: boolean\n+}\n+\n+type LwAction =\n+  | { type: 'USER_TICKET_FETCH_STARTED' }\n+  | { type: 'USER_TICKET_FETCH_SUCCESS'; payload: UserTicketData }\n+  | { type: 'USER_TICKET_FETCH_ERROR'; payload: Error }\n+  | { type: 'USER_TICKET_UPDATED'; payload: UserTicketData }\n+  | { type: 'SESSION_UPDATED'; payload: Session | null }\n+  | { type: 'TICKET_LOADING_START' }\n+  | { type: 'TICKET_LOADING_SUCCESS' }\n+  | { type: 'TICKET_LOADING_ERROR'; payload?: Error }\n+  | { type: 'PARTYMODE_ENABLE'; payload: RealtimeChannel }\n+  | { type: 'PARTYMODE_DISABLE' }\n+  | { type: 'URL_PARAMS_LOADED'; payload: { referal?: string } }",
        "comment_created_at": "2025-03-27T04:05:32+00:00",
        "comment_author": "github-actions[bot]",
        "comment_body": "**[misspell]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\"referal\" is a misspelling of \"referral\"\n<!-- __reviewdog__:ChA3NDgxMDczZTAwZGY2ZTgyEghtaXNzcGVsbA== -->\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2015588070",
    "pr_number": 34459,
    "pr_file": "apps/www/components/LaunchWeek/14/hooks/use-conf-data.tsx",
    "created_at": "2025-03-27T04:05:33+00:00",
    "commented_code": "+import { RealtimeChannel, Session, SupabaseClient } from '@supabase/supabase-js'\n+import { useRouter } from 'next/router'\n+import { createContext, Dispatch, useContext, useEffect, useMemo, useReducer } from 'react'\n+\n+/**\n+ * This is copy of shared use-conf-data.ts. For laynch week 14 we need different ticket states.\n+ * To not break the existing functionality, we are creating a new context and hook.\n+ */\n+\n+export type TicketState = 'registration' | 'ticket-visible' | 'loading' | 'ticket-loading'\n+\n+export type UserTicketData = {\n+  id?: string\n+  email?: string\n+  username?: string\n+  name?: string\n+  ticket_number?: number\n+  platinum?: boolean\n+  golden?: boolean\n+  referrals?: number\n+  bg_image_id?: number\n+  role?: string\n+  company?: string\n+  location?: string\n+  metadata?: {\n+    role?: string\n+    company?: string\n+    location?: string\n+    hasSecretTicket?: boolean\n+    hasSharedSecret?: boolean\n+    hideAvatar?: boolean\n+    hideMetadata?: boolean\n+    theme?: string\n+  }\n+  shared_on_twitter?: string\n+  shared_on_linkedin?: string\n+  secret?: boolean\n+}\n+\n+type LwAction =\n+  | { type: 'USER_TICKET_FETCH_STARTED' }\n+  | { type: 'USER_TICKET_FETCH_SUCCESS'; payload: UserTicketData }\n+  | { type: 'USER_TICKET_FETCH_ERROR'; payload: Error }\n+  | { type: 'USER_TICKET_UPDATED'; payload: UserTicketData }\n+  | { type: 'SESSION_UPDATED'; payload: Session | null }\n+  | { type: 'TICKET_LOADING_START' }\n+  | { type: 'TICKET_LOADING_SUCCESS' }\n+  | { type: 'TICKET_LOADING_ERROR'; payload?: Error }\n+  | { type: 'PARTYMODE_ENABLE'; payload: RealtimeChannel }\n+  | { type: 'PARTYMODE_DISABLE' }\n+  | { type: 'URL_PARAMS_LOADED'; payload: { referal?: string } }\n+  | {\n+      type: 'GAUGES_DATA_FETCHED'\n+      payload: {\n+        payloadSaturation?: number\n+        payloadFill?: number\n+        meetupsAmount?: number\n+        peopleOnline?: number\n+      }\n+    }\n+\n+// Define state interface\n+interface LwState {\n+  userTicketData: UserTicketData\n+  ticketState: TicketState\n+  session: Session | null\n+  userTicketDataState: 'unloaded' | 'loading' | 'error' | 'loaded'\n+  userTicketDataError: Error | null\n+  ticketLoadingState: 'unloaded' | 'loading' | 'error' | 'loaded'\n+  ticketVisibility: boolean\n+  claimFormState: 'initial' | 'visible' | 'hidden'\n+  partymodeStatus: 'on' | 'off'\n+  realtimeGaugesChannel: RealtimeChannel | null\n+  referal?: string\n+  gaugesData: {\n+    payloadSaturation: number | null\n+    payloadFill: number | null\n+    meetupsAmount: number | null\n+    peopleOnline: number | null\n+  } | null\n+  urlParamsLoaded: boolean\n+}\n+\n+export const lwReducer = (state: LwState, action: LwAction): LwState => {\n+  switch (action.type) {\n+    case 'SESSION_UPDATED':\n+      return {\n+        ...state,\n+        session: action.payload,\n+        // Show claim form if session is not available. Form triggers authentication flow.\n+        claimFormState: !action.payload ? 'visible' : 'hidden',\n+      }\n+    case 'USER_TICKET_FETCH_STARTED':\n+      return { ...state, userTicketDataState: 'loading', userTicketDataError: null }\n+    case 'USER_TICKET_FETCH_SUCCESS':\n+      return {\n+        ...state,\n+        userTicketData: action.payload,\n+        ticketVisibility: action.payload !== null && state.ticketLoadingState === 'loaded',\n+      }\n+    case 'USER_TICKET_FETCH_ERROR':\n+      return {\n+        ...state,\n+        session: null,\n+        ticketState: \"registration\", \n+        userTicketDataState: 'error',\n+        userTicketDataError: action.payload,\n+      }\n+    case 'USER_TICKET_UPDATED':\n+      return {\n+        ...state,\n+        userTicketData: action.payload,\n+        userTicketDataState: Boolean(action.payload.id) ? 'loaded' : 'unloaded',\n+        userTicketDataError: null,\n+      }\n+    case 'TICKET_LOADING_START':\n+      return {\n+        ...state,\n+        ticketLoadingState: 'loading',\n+        ticketVisibility: false,\n+      }\n+    case 'TICKET_LOADING_SUCCESS':\n+      return {\n+        ...state,\n+        ticketLoadingState: 'loaded',\n+        ticketVisibility: Boolean(state.userTicketData.id),\n+      }\n+    case 'TICKET_LOADING_ERROR':\n+      return {\n+        ...state,\n+        ticketLoadingState: 'error',\n+        ticketVisibility: false,\n+        claimFormState: 'visible',\n+      }\n+    case 'PARTYMODE_ENABLE': {\n+      return {\n+        ...state,\n+        realtimeGaugesChannel: action.payload,\n+        partymodeStatus: 'on',\n+      }\n+    }\n+    case 'PARTYMODE_DISABLE': {\n+      return {\n+        ...state,\n+        realtimeGaugesChannel: null,\n+        partymodeStatus: 'off',\n+      }\n+    }\n+    case 'GAUGES_DATA_FETCHED': {\n+      const nonNullableKeys = Object.fromEntries(\n+        Object.entries(action.payload).filter(([_, v]) => v !== undefined)\n+      ) as typeof action.payload\n+      const newGaugeData = state.gaugesData\n+        ? { ...state.gaugesData, ...nonNullableKeys }\n+        : {\n+            payloadSaturation: null,\n+            payloadFill: null,\n+            meetupsAmount: null,\n+            peopleOnline: null,\n+            ...nonNullableKeys,\n+          }\n+\n+      return {\n+        ...state,\n+        gaugesData: newGaugeData,\n+      }\n+    }\n+    case 'URL_PARAMS_LOADED': {\n+      return { ...state, urlParamsLoaded: true, referal: action.payload.referal }\n+    }\n+    default:\n+      action satisfies never\n+      return state\n+  }\n+}\n+\n+export const Lw14ConfDataContext = createContext<[LwState, Dispatch<LwAction>] | null>(null)\n+\n+function takeFirst(param: string | string[] | undefined): string | undefined {\n+  if (Array.isArray(param)) {\n+    return param[0]\n+  }\n+\n+  return param ?? undefined\n+}\n+\n+export const Lw14ConfDataProvider = ({\n+  children,\n+  initState,\n+}: {\n+  children: React.ReactNode\n+  initState?: Partial<LwState>\n+}) => {\n+  const { query, isReady } = useRouter()\n+\n+  const providerValue = useReducer(lwReducer, {\n+    userTicketData: {},\n+    ticketState: 'loading',\n+    session: null,\n+    ticketLoadingState: 'unloaded',\n+    ticketVisibility: false,\n+    userTicketDataState: 'unloaded',\n+    userTicketDataError: null,\n+    claimFormState: 'initial',\n+    realtimeGaugesChannel: null,\n+    partymodeStatus: 'off',\n+    gaugesData: null,\n+    urlParamsLoaded: false,\n+    ...initState,\n+  })\n+  const [, dispatch] = providerValue\n+\n+  useEffect(() => {\n+    if (isReady) {\n+      dispatch({\n+        type: 'URL_PARAMS_LOADED',\n+        payload: { referal: takeFirst(query.referal) ?? takeFirst(query.username) },",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2015588070",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34459,
        "pr_file": "apps/www/components/LaunchWeek/14/hooks/use-conf-data.tsx",
        "discussion_id": "2015588070",
        "commented_code": "@@ -0,0 +1,233 @@\n+import { RealtimeChannel, Session, SupabaseClient } from '@supabase/supabase-js'\n+import { useRouter } from 'next/router'\n+import { createContext, Dispatch, useContext, useEffect, useMemo, useReducer } from 'react'\n+\n+/**\n+ * This is copy of shared use-conf-data.ts. For laynch week 14 we need different ticket states.\n+ * To not break the existing functionality, we are creating a new context and hook.\n+ */\n+\n+export type TicketState = 'registration' | 'ticket-visible' | 'loading' | 'ticket-loading'\n+\n+export type UserTicketData = {\n+  id?: string\n+  email?: string\n+  username?: string\n+  name?: string\n+  ticket_number?: number\n+  platinum?: boolean\n+  golden?: boolean\n+  referrals?: number\n+  bg_image_id?: number\n+  role?: string\n+  company?: string\n+  location?: string\n+  metadata?: {\n+    role?: string\n+    company?: string\n+    location?: string\n+    hasSecretTicket?: boolean\n+    hasSharedSecret?: boolean\n+    hideAvatar?: boolean\n+    hideMetadata?: boolean\n+    theme?: string\n+  }\n+  shared_on_twitter?: string\n+  shared_on_linkedin?: string\n+  secret?: boolean\n+}\n+\n+type LwAction =\n+  | { type: 'USER_TICKET_FETCH_STARTED' }\n+  | { type: 'USER_TICKET_FETCH_SUCCESS'; payload: UserTicketData }\n+  | { type: 'USER_TICKET_FETCH_ERROR'; payload: Error }\n+  | { type: 'USER_TICKET_UPDATED'; payload: UserTicketData }\n+  | { type: 'SESSION_UPDATED'; payload: Session | null }\n+  | { type: 'TICKET_LOADING_START' }\n+  | { type: 'TICKET_LOADING_SUCCESS' }\n+  | { type: 'TICKET_LOADING_ERROR'; payload?: Error }\n+  | { type: 'PARTYMODE_ENABLE'; payload: RealtimeChannel }\n+  | { type: 'PARTYMODE_DISABLE' }\n+  | { type: 'URL_PARAMS_LOADED'; payload: { referal?: string } }\n+  | {\n+      type: 'GAUGES_DATA_FETCHED'\n+      payload: {\n+        payloadSaturation?: number\n+        payloadFill?: number\n+        meetupsAmount?: number\n+        peopleOnline?: number\n+      }\n+    }\n+\n+// Define state interface\n+interface LwState {\n+  userTicketData: UserTicketData\n+  ticketState: TicketState\n+  session: Session | null\n+  userTicketDataState: 'unloaded' | 'loading' | 'error' | 'loaded'\n+  userTicketDataError: Error | null\n+  ticketLoadingState: 'unloaded' | 'loading' | 'error' | 'loaded'\n+  ticketVisibility: boolean\n+  claimFormState: 'initial' | 'visible' | 'hidden'\n+  partymodeStatus: 'on' | 'off'\n+  realtimeGaugesChannel: RealtimeChannel | null\n+  referal?: string\n+  gaugesData: {\n+    payloadSaturation: number | null\n+    payloadFill: number | null\n+    meetupsAmount: number | null\n+    peopleOnline: number | null\n+  } | null\n+  urlParamsLoaded: boolean\n+}\n+\n+export const lwReducer = (state: LwState, action: LwAction): LwState => {\n+  switch (action.type) {\n+    case 'SESSION_UPDATED':\n+      return {\n+        ...state,\n+        session: action.payload,\n+        // Show claim form if session is not available. Form triggers authentication flow.\n+        claimFormState: !action.payload ? 'visible' : 'hidden',\n+      }\n+    case 'USER_TICKET_FETCH_STARTED':\n+      return { ...state, userTicketDataState: 'loading', userTicketDataError: null }\n+    case 'USER_TICKET_FETCH_SUCCESS':\n+      return {\n+        ...state,\n+        userTicketData: action.payload,\n+        ticketVisibility: action.payload !== null && state.ticketLoadingState === 'loaded',\n+      }\n+    case 'USER_TICKET_FETCH_ERROR':\n+      return {\n+        ...state,\n+        session: null,\n+        ticketState: \"registration\", \n+        userTicketDataState: 'error',\n+        userTicketDataError: action.payload,\n+      }\n+    case 'USER_TICKET_UPDATED':\n+      return {\n+        ...state,\n+        userTicketData: action.payload,\n+        userTicketDataState: Boolean(action.payload.id) ? 'loaded' : 'unloaded',\n+        userTicketDataError: null,\n+      }\n+    case 'TICKET_LOADING_START':\n+      return {\n+        ...state,\n+        ticketLoadingState: 'loading',\n+        ticketVisibility: false,\n+      }\n+    case 'TICKET_LOADING_SUCCESS':\n+      return {\n+        ...state,\n+        ticketLoadingState: 'loaded',\n+        ticketVisibility: Boolean(state.userTicketData.id),\n+      }\n+    case 'TICKET_LOADING_ERROR':\n+      return {\n+        ...state,\n+        ticketLoadingState: 'error',\n+        ticketVisibility: false,\n+        claimFormState: 'visible',\n+      }\n+    case 'PARTYMODE_ENABLE': {\n+      return {\n+        ...state,\n+        realtimeGaugesChannel: action.payload,\n+        partymodeStatus: 'on',\n+      }\n+    }\n+    case 'PARTYMODE_DISABLE': {\n+      return {\n+        ...state,\n+        realtimeGaugesChannel: null,\n+        partymodeStatus: 'off',\n+      }\n+    }\n+    case 'GAUGES_DATA_FETCHED': {\n+      const nonNullableKeys = Object.fromEntries(\n+        Object.entries(action.payload).filter(([_, v]) => v !== undefined)\n+      ) as typeof action.payload\n+      const newGaugeData = state.gaugesData\n+        ? { ...state.gaugesData, ...nonNullableKeys }\n+        : {\n+            payloadSaturation: null,\n+            payloadFill: null,\n+            meetupsAmount: null,\n+            peopleOnline: null,\n+            ...nonNullableKeys,\n+          }\n+\n+      return {\n+        ...state,\n+        gaugesData: newGaugeData,\n+      }\n+    }\n+    case 'URL_PARAMS_LOADED': {\n+      return { ...state, urlParamsLoaded: true, referal: action.payload.referal }\n+    }\n+    default:\n+      action satisfies never\n+      return state\n+  }\n+}\n+\n+export const Lw14ConfDataContext = createContext<[LwState, Dispatch<LwAction>] | null>(null)\n+\n+function takeFirst(param: string | string[] | undefined): string | undefined {\n+  if (Array.isArray(param)) {\n+    return param[0]\n+  }\n+\n+  return param ?? undefined\n+}\n+\n+export const Lw14ConfDataProvider = ({\n+  children,\n+  initState,\n+}: {\n+  children: React.ReactNode\n+  initState?: Partial<LwState>\n+}) => {\n+  const { query, isReady } = useRouter()\n+\n+  const providerValue = useReducer(lwReducer, {\n+    userTicketData: {},\n+    ticketState: 'loading',\n+    session: null,\n+    ticketLoadingState: 'unloaded',\n+    ticketVisibility: false,\n+    userTicketDataState: 'unloaded',\n+    userTicketDataError: null,\n+    claimFormState: 'initial',\n+    realtimeGaugesChannel: null,\n+    partymodeStatus: 'off',\n+    gaugesData: null,\n+    urlParamsLoaded: false,\n+    ...initState,\n+  })\n+  const [, dispatch] = providerValue\n+\n+  useEffect(() => {\n+    if (isReady) {\n+      dispatch({\n+        type: 'URL_PARAMS_LOADED',\n+        payload: { referal: takeFirst(query.referal) ?? takeFirst(query.username) },",
        "comment_created_at": "2025-03-27T04:05:33+00:00",
        "comment_author": "github-actions[bot]",
        "comment_body": "**[misspell]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\"referal\" is a misspelling of \"referral\"\n<!-- __reviewdog__:ChA5ODlhNjU4NGQ5N2JmZDYyEghtaXNzcGVsbA== -->\n",
        "pr_file_module": null
      }
    ]
  }
]