[
  {
    "discussion_id": "2013398728",
    "pr_number": 34393,
    "pr_file": "apps/docs/content/guides/realtime/benchmarks.mdx",
    "created_at": "2025-03-26T05:04:13+00:00",
    "commented_code": "---\n title: 'Benchmarks'\n-subtitle: 'Benchmark results for Supabase Realtime.'\n-description: 'Check out reference numbers for Supabase Realtime performance.'\n+subtitle: 'Scalabillity Benchmarks for Supabase Realtime.'\n+description: 'Scalabillity Benchmarks for Supabase Realtime.'\n ---\n \n-This guide explores what can be expected from Realtime's Postgres Changes, broadcast and presence performance. A set of load tests demonstrates its scaling capabilities.\n+This guide explores the scalability of Realtime's features: Broadcast, Presence performance, and Postgres Changes.",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2013398728",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34393,
        "pr_file": "apps/docs/content/guides/realtime/benchmarks.mdx",
        "discussion_id": "2013398728",
        "commented_code": "@@ -1,22 +1,23 @@\n ---\n title: 'Benchmarks'\n-subtitle: 'Benchmark results for Supabase Realtime.'\n-description: 'Check out reference numbers for Supabase Realtime performance.'\n+subtitle: 'Scalabillity Benchmarks for Supabase Realtime.'\n+description: 'Scalabillity Benchmarks for Supabase Realtime.'\n ---\n \n-This guide explores what can be expected from Realtime's Postgres Changes, broadcast and presence performance. A set of load tests demonstrates its scaling capabilities.\n+This guide explores the scalability of Realtime's features: Broadcast, Presence performance, and Postgres Changes.",
        "comment_created_at": "2025-03-26T05:04:13+00:00",
        "comment_author": "charislam",
        "comment_body": "```suggestion\r\nThis guide explores the scalability of Realtime's features: Broadcast, Presence, and Postgres Changes.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2013399474",
    "pr_number": 34393,
    "pr_file": "apps/docs/content/guides/realtime/benchmarks.mdx",
    "created_at": "2025-03-26T05:05:16+00:00",
    "commented_code": "---\n title: 'Benchmarks'\n-subtitle: 'Benchmark results for Supabase Realtime.'\n-description: 'Check out reference numbers for Supabase Realtime performance.'\n+subtitle: 'Scalabillity Benchmarks for Supabase Realtime.'\n+description: 'Scalabillity Benchmarks for Supabase Realtime.'\n ---\n \n-This guide explores what can be expected from Realtime's Postgres Changes, broadcast and presence performance. A set of load tests demonstrates its scaling capabilities.\n+This guide explores the scalability of Realtime's features: Broadcast, Presence performance, and Postgres Changes.\n \n ## Methodology\n \n-The benchmarks were conducted using k6, an open-source load testing tool, against a Realtime Cluster deployed on AWS. The cluster configurations used 2-6 nodes, tested in both single-region and multi-region setups, all connected to a single Supabase project. The load generators (k6 servers) were also deployed on AWS to minimize network latency impact on the results. Tests were executed with the full load from the start without warm-up runs.\n+- The benchmarks are conducted using k6, an open-source load testing tool, against a Realtime Cluster deployed on AWS.\n+- The cluster configurations used 2-6 nodes, tested in both single-region and multi-region setups, all connected to a single Supabase project.\n+- The load generators (k6 servers) are deployed on AWS to minimize network latency impact on the results.\n+- Tests are executed with a full load from the start without warm-up runs.\n \n-The metrics collected include message throughput, latency percentiles, CPU and memory utilization, and connection success rates. It's worth noting that performance in production environments may vary based on factors such as network conditions, hardware specifications, and specific usage patterns.\n+The metrics collected include: message throughput, latency percentiles, CPU and memory utilization, and connection success rates. It's worth noting that performance in production environments may vary based on factors such as network conditions, hardware specifications, and specific usage patterns.\n \n ## Workloads\n \n-The proposed workloads are designed to demonstrate Supabase Realtime's throughput and scalability capabilities. These benchmarks focus on core functionality and common usage patterns.\n-\n-The benchmarking results include the following workloads:\n+The proposed workloads are designed to demonstrate Supabase Realtime's throughput and scalability capabilities. These benchmarks focus on core functionality and common usage patterns. The benchmarking results include the following workloads:",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2013399474",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34393,
        "pr_file": "apps/docs/content/guides/realtime/benchmarks.mdx",
        "discussion_id": "2013399474",
        "commented_code": "@@ -1,22 +1,23 @@\n ---\n title: 'Benchmarks'\n-subtitle: 'Benchmark results for Supabase Realtime.'\n-description: 'Check out reference numbers for Supabase Realtime performance.'\n+subtitle: 'Scalabillity Benchmarks for Supabase Realtime.'\n+description: 'Scalabillity Benchmarks for Supabase Realtime.'\n ---\n \n-This guide explores what can be expected from Realtime's Postgres Changes, broadcast and presence performance. A set of load tests demonstrates its scaling capabilities.\n+This guide explores the scalability of Realtime's features: Broadcast, Presence performance, and Postgres Changes.\n \n ## Methodology\n \n-The benchmarks were conducted using k6, an open-source load testing tool, against a Realtime Cluster deployed on AWS. The cluster configurations used 2-6 nodes, tested in both single-region and multi-region setups, all connected to a single Supabase project. The load generators (k6 servers) were also deployed on AWS to minimize network latency impact on the results. Tests were executed with the full load from the start without warm-up runs.\n+- The benchmarks are conducted using k6, an open-source load testing tool, against a Realtime Cluster deployed on AWS.\n+- The cluster configurations used 2-6 nodes, tested in both single-region and multi-region setups, all connected to a single Supabase project.\n+- The load generators (k6 servers) are deployed on AWS to minimize network latency impact on the results.\n+- Tests are executed with a full load from the start without warm-up runs.\n \n-The metrics collected include message throughput, latency percentiles, CPU and memory utilization, and connection success rates. It's worth noting that performance in production environments may vary based on factors such as network conditions, hardware specifications, and specific usage patterns.\n+The metrics collected include: message throughput, latency percentiles, CPU and memory utilization, and connection success rates. It's worth noting that performance in production environments may vary based on factors such as network conditions, hardware specifications, and specific usage patterns.\n \n ## Workloads\n \n-The proposed workloads are designed to demonstrate Supabase Realtime's throughput and scalability capabilities. These benchmarks focus on core functionality and common usage patterns.\n-\n-The benchmarking results include the following workloads:\n+The proposed workloads are designed to demonstrate Supabase Realtime's throughput and scalability capabilities. These benchmarks focus on core functionality and common usage patterns. The benchmarking results include the following workloads:",
        "comment_created_at": "2025-03-26T05:05:16+00:00",
        "comment_author": "charislam",
        "comment_body": "```suggestion\r\nThe proposed workloads are designed to demonstrate Supabase Realtime's throughput and scalability. These benchmarks focus on core functionality and common usage patterns. The benchmarking results include the following workloads:\r\n```",
        "pr_file_module": null
      }
    ]
  }
]