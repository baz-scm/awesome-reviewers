[
  {
    "discussion_id": "2125689252",
    "pr_number": 36157,
    "pr_file": "apps/studio/pages/project/[ref]/index.tsx",
    "created_at": "2025-06-04T05:36:34+00:00",
    "commented_code": "projectRef: project?.ref,\n   })\n \n-  const tablesCount = tablesData?.length ?? 0\n-  const functionsCount = functionsData?.length ?? 0\n-  const replicasCount = (replicasData?.length ?? 1) - 1",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2125689252",
        "repo_full_name": "supabase/supabase",
        "pr_number": 36157,
        "pr_file": "apps/studio/pages/project/[ref]/index.tsx",
        "discussion_id": "2125689252",
        "commented_code": "@@ -70,9 +70,9 @@ const Home: NextPageWithLayout = () => {\n     projectRef: project?.ref,\n   })\n \n-  const tablesCount = tablesData?.length ?? 0\n-  const functionsCount = functionsData?.length ?? 0\n-  const replicasCount = (replicasData?.length ?? 1) - 1",
        "comment_created_at": "2025-06-04T05:36:34+00:00",
        "comment_author": "joshenlim",
        "comment_body": "hmm iirc we need to minus one here, cause replicasData also includes the primary database (which shouldn't be considered as a replica) and we'd be showing 2 incorrectly then - i'll double check on this branch",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2059829833",
    "pr_number": 35254,
    "pr_file": "apps/studio/components/interfaces/Database/Triggers/TriggerSheet.tsx",
    "created_at": "2025-04-25T08:47:44+00:00",
    "commented_code": "+import { zodResolver } from '@hookform/resolvers/zod'\n+import { Terminal } from 'lucide-react'\n+import { useEffect, useState } from 'react'\n+import { SubmitHandler, useForm } from 'react-hook-form'\n+import { toast } from 'sonner'\n+import * as z from 'zod'\n+\n+import { PostgresTrigger } from '@supabase/postgres-meta'\n+import FormBoxEmpty from 'components/ui/FormBoxEmpty'\n+import { useDatabaseTriggerCreateMutation } from 'data/database-triggers/database-trigger-create-mutation'\n+import { useDatabaseTriggerUpdateMutation } from 'data/database-triggers/database-trigger-update-mutation'\n+import { useTablesQuery } from 'data/tables/tables-query'\n+import { useSelectedProject } from 'hooks/misc/useSelectedProject'\n+import { PROTECTED_SCHEMAS } from 'lib/constants/schemas'\n+import {\n+  Button,\n+  Checkbox_Shadcn_,\n+  cn,\n+  Form_Shadcn_,\n+  FormControl_Shadcn_,\n+  FormField_Shadcn_,\n+  Input_Shadcn_,\n+  Select_Shadcn_,\n+  SelectContent_Shadcn_,\n+  SelectItem_Shadcn_,\n+  SelectTrigger_Shadcn_,\n+  SelectValue_Shadcn_,\n+  Separator,\n+  Sheet,\n+  SheetContent,\n+  SheetFooter,\n+  SheetHeader,\n+  SheetTitle,\n+} from 'ui'\n+import { FormItemLayout } from 'ui-patterns/form/FormItemLayout/FormItemLayout'\n+import ChooseFunctionForm from './ChooseFunctionForm'\n+import {\n+  TRIGGER_ENABLED_MODES,\n+  TRIGGER_EVENTS,\n+  TRIGGER_ORIENTATIONS,\n+  TRIGGER_TYPES,\n+} from './Triggers.constants'\n+\n+const formId = 'create-trigger'\n+\n+const FormSchema = z.object({\n+  name: z\n+    .string()\n+    .min(1, 'Please provide a name for your trigger')\n+    .regex(/^\\S+$/, 'Name should not contain spaces or whitespaces'),\n+  schema: z.string(),\n+  table: z.string(),\n+  activation: z.string(),\n+  enabled_mode: z.string(),\n+  orientation: z.string(),\n+  function_name: z.string(),\n+  function_schema: z.string(),\n+  events: z.array(z.string()).min(1, 'Please select at least one event'),\n+\n+  // For UI handling, not to be passed to the final request\n+  tableId: z.string().optional(),\n+})\n+\n+const defaultValues = {\n+  name: '',\n+  schema: '',\n+  table: '',\n+  activation: 'BEFORE',\n+  orientation: 'STATEMENT',",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2059829833",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35254,
        "pr_file": "apps/studio/components/interfaces/Database/Triggers/TriggerSheet.tsx",
        "discussion_id": "2059829833",
        "commented_code": "@@ -0,0 +1,448 @@\n+import { zodResolver } from '@hookform/resolvers/zod'\n+import { Terminal } from 'lucide-react'\n+import { useEffect, useState } from 'react'\n+import { SubmitHandler, useForm } from 'react-hook-form'\n+import { toast } from 'sonner'\n+import * as z from 'zod'\n+\n+import { PostgresTrigger } from '@supabase/postgres-meta'\n+import FormBoxEmpty from 'components/ui/FormBoxEmpty'\n+import { useDatabaseTriggerCreateMutation } from 'data/database-triggers/database-trigger-create-mutation'\n+import { useDatabaseTriggerUpdateMutation } from 'data/database-triggers/database-trigger-update-mutation'\n+import { useTablesQuery } from 'data/tables/tables-query'\n+import { useSelectedProject } from 'hooks/misc/useSelectedProject'\n+import { PROTECTED_SCHEMAS } from 'lib/constants/schemas'\n+import {\n+  Button,\n+  Checkbox_Shadcn_,\n+  cn,\n+  Form_Shadcn_,\n+  FormControl_Shadcn_,\n+  FormField_Shadcn_,\n+  Input_Shadcn_,\n+  Select_Shadcn_,\n+  SelectContent_Shadcn_,\n+  SelectItem_Shadcn_,\n+  SelectTrigger_Shadcn_,\n+  SelectValue_Shadcn_,\n+  Separator,\n+  Sheet,\n+  SheetContent,\n+  SheetFooter,\n+  SheetHeader,\n+  SheetTitle,\n+} from 'ui'\n+import { FormItemLayout } from 'ui-patterns/form/FormItemLayout/FormItemLayout'\n+import ChooseFunctionForm from './ChooseFunctionForm'\n+import {\n+  TRIGGER_ENABLED_MODES,\n+  TRIGGER_EVENTS,\n+  TRIGGER_ORIENTATIONS,\n+  TRIGGER_TYPES,\n+} from './Triggers.constants'\n+\n+const formId = 'create-trigger'\n+\n+const FormSchema = z.object({\n+  name: z\n+    .string()\n+    .min(1, 'Please provide a name for your trigger')\n+    .regex(/^\\S+$/, 'Name should not contain spaces or whitespaces'),\n+  schema: z.string(),\n+  table: z.string(),\n+  activation: z.string(),\n+  enabled_mode: z.string(),\n+  orientation: z.string(),\n+  function_name: z.string(),\n+  function_schema: z.string(),\n+  events: z.array(z.string()).min(1, 'Please select at least one event'),\n+\n+  // For UI handling, not to be passed to the final request\n+  tableId: z.string().optional(),\n+})\n+\n+const defaultValues = {\n+  name: '',\n+  schema: '',\n+  table: '',\n+  activation: 'BEFORE',\n+  orientation: 'STATEMENT',",
        "comment_created_at": "2025-04-25T08:47:44+00:00",
        "comment_author": "alaister",
        "comment_body": "Personally I think we should flip these defaults\r\n\r\n```suggestion\r\n  activation: 'AFTER',\r\n  orientation: 'ROW',\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2000287285",
    "pr_number": 30380,
    "pr_file": "apps/studio/components/layouts/TableEditorLayout/EntityListItem.tsx",
    "created_at": "2025-03-18T06:17:06+00:00",
    "commented_code": "}\n   }\n \n+  const isView = entity.type === ENTITY_TYPE.VIEW || entity.type === ENTITY_TYPE.MATERIALIZED_VIEW;",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2000287285",
        "repo_full_name": "supabase/supabase",
        "pr_number": 30380,
        "pr_file": "apps/studio/components/layouts/TableEditorLayout/EntityListItem.tsx",
        "discussion_id": "2000287285",
        "commented_code": "@@ -208,6 +212,58 @@ const EntityListItem: ItemRenderer<Entity, EntityListItemProps> = ({\n     }\n   }\n \n+  const isView = entity.type === ENTITY_TYPE.VIEW || entity.type === ENTITY_TYPE.MATERIALIZED_VIEW;",
        "comment_created_at": "2025-03-18T06:17:06+00:00",
        "comment_author": "SimonGodefroid",
        "comment_body": "```suggestion\r\n  const isView = entity.type === ENTITY_TYPE.VIEW;\r\n  const isMaterializedView = entity.type === ENTITY_TYPE.MATERIALIZED_VIEW;\r\n  const isViewEntity = isView || isMaterializedView;\r\n//  ...\r\n const prepend = isView\r\n      ? `create view ${entity.schema}.${entity.name} as\\n`\r\n      : isMaterializedView\r\n        ? `create materialized view ${entity.schema}.${entity.name} as\\n`\r\n        : ''\r\n```",
        "pr_file_module": null
      }
    ]
  }
]