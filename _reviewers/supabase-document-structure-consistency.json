[
  {
    "discussion_id": "1631509355",
    "pr_number": 27087,
    "pr_file": "apps/docs/content/guides/database/replication-cdc/overview.mdx",
    "created_at": "2024-06-07T17:33:14+00:00",
    "commented_code": "+---\n+id: 'replication'\n+title: 'Replication and Analytics with Supabase'\n+description: 'Performing Extract Transform Load (ETL) with Supabase'\n+sidebar_label: 'Overview'\n+---\n+\n+# Logical Replication and Change Data Capture (CDC)",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "1631509355",
        "repo_full_name": "supabase/supabase",
        "pr_number": 27087,
        "pr_file": "apps/docs/content/guides/database/replication-cdc/overview.mdx",
        "discussion_id": "1631509355",
        "commented_code": "@@ -0,0 +1,31 @@\n+---\n+id: 'replication'\n+title: 'Replication and Analytics with Supabase'\n+description: 'Performing Extract Transform Load (ETL) with Supabase'\n+sidebar_label: 'Overview'\n+---\n+\n+# Logical Replication and Change Data Capture (CDC)",
        "comment_created_at": "2024-06-07T17:33:14+00:00",
        "comment_author": "charislam",
        "comment_body": "```suggestion\r\n```\r\n\r\nThe H1 on this page is the title from the frontmatter, so adding another H1 looks odd. Just jump right into the content, and start any extra headers you need as H2.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2022167738",
    "pr_number": 34599,
    "pr_file": "apps/docs/content/guides/functions/quickstart.mdx",
    "created_at": "2025-04-01T05:29:25+00:00",
    "commented_code": "---\n id: 'functions-quickstart'\n-title: 'Developing Edge Functions locally'\n-description: 'Get started with Edge Functions on your local machine.'\n-subtitle: 'Get started with Edge Functions on your local machine.'\n+title: 'Developing Edge Functions with Supabase'\n+description: 'Get started with Edge Functions on the Supabase dashboard.'\n+subtitle: 'Get started with Edge Functions on the Supabase dashboard.'\n tocVideo: '5OWH9c4u68M'\n ---\n \n-Let's create a basic Edge Function on your local machine and then invoke it using the Supabase CLI.\n+In this guide we'll cover how to create a basic Edge Function on the Supabase dashboard, and access it using the Supabase CLI.\n \n-## Initialize a project\n+## Deploy from Dashboard\n \n-Create a new Supabase project in a folder on your local machine:\n+Go to your project > Edge Functions > Deploy a new function > Via Editor\n \n-```bash\n-supabase init\n-```\n+<Image\n+  alt=\"Deploy functions from the dashboard\"\n+  src={{\n+    light: '/docs/img/guides/functions/dashboard/deploy-function--light.png',\n+    dark: '/docs/img/guides/functions/dashboard/deploy-function--light.png',\n+  }}\n+  zoomable\n+/>\n \n-<Admonition type=\"tip\" label=\"CLI not installed?\">\n+This will scaffold a new function for you.\n \n-Check out the [CLI Docs](/docs/guides/cli) to learn how to install the Supabase CLI on your local machine.\n+<Image\n+  alt=\"Scaffold functions through the dashboard editor\"\n+  src={{\n+    light: '/docs/img/guides/functions/dashboard/scaffold-function--light.png',\n+    dark: '/docs/img/guides/functions/dashboard/scaffold-function--light.png',\n+  }}\n+  zoomable\n+/>\n \n-</Admonition>\n+Modify the function as needed, name it, and click `Deploy function`\n+\n+That's it! Your function is now active. Use the endpoint on the function's Details page to call the edge function.\n \n-<Admonition type=\"tip\">\n+## Access deployed functions via Supabase CLI\n \n-If you're using VS code you can have the CLI automatically create helpful Deno settings when running `supabase init`. Select `y` when prompted \"Generate VS Code settings for Deno? [y/N]\"!\n+<Admonition type=\"tip\" label=\"CLI not installed?\">\n+\n+Check out the [CLI Docs](/docs/guides/cli) to learn how to install the Supabase CLI on your local machine.\n \n </Admonition>\n \n-<Admonition type=\"tip\">\n+Now that your function is deployed, you can access it from your local development environment.\n+Here's how:\n \n-If you're using an IntelliJ IDEA editor such as WebStorm, you can use the `--with-intellij-settings` flag with `supabase init` to create an auto generated Deno config.\n+1. **Link your project** to your local environment.\n \n-</Admonition>\n+   You can find your project reference ID in the URL of your Supabase dashboard or in the project settings.\n \n-## Create an Edge Function\n+   ```bash\n+   supabase link --project-ref your-project-ref\n+   ```\n \n-Let's create a new Edge Function called `hello-world` inside your project:\n+2. **List all Functions** in the linked Supabase project.\n \n-```bash\n-supabase functions new hello-world\n-```\n+   ```bash\n+   supabase functions list\n+   ```\n \n-This creates a function stub in your `supabase` folder:\n+3. **Access the specific function** you want to work on.\n \n-```bash\n-└── supabase\n-    ├── functions\n-    │   └── hello-world\n-    │   │   └── index.ts ## Your function code\n-    └── config.toml\n-```\n+   ```bash\n+   supabase functions download function-name\n+   ```\n \n-## How to write the code\n+4. **Make local edits** to the function code as needed.\n \n-The generated function uses native [Deno.serve](https://docs.deno.com/runtime/manual/runtime/http_server_apis) to handle requests. It gives you access to `Request` and `Response` objects.\n+5. **Run your function locally** before redeploying.\n \n-Here's the generated Hello World Edge Function, that accepts a name in the `Request` and responds with a greeting:\n+   ```bash\n+   supabase functions serve function-name\n+   ```\n \n-```tsx\n-Deno.serve(async (req) => {\n-  const { name } = await req.json()\n-  const data = {\n-    message: `Hello ${name}!`,\n-  }\n+6. **Redeploy** when you're ready with your changes.\n \n-  return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })\n-})\n-```\n+   ```bash\n+   supabase functions deploy function-name\n+   ```\n \n-## Running Edge Functions locally\n+## Deploy via Assistant\n \n-You can run your Edge Function locally using [`supabase functions serve`](/docs/reference/cli/usage#supabase-functions-serve):\n+You can also leverage the Supabase Assistant to help you write and deploy edge functions.\n \n-```bash\n-supabase start # start the supabase stack\n-supabase functions serve # start the Functions watcher\n-```\n+Go to your project > Edge Functions > Click on the Assistant icon to Create with Supabase Assistant\n \n-The `functions serve` command has hot-reloading capabilities. It will watch for any changes to your files and restart the Deno server.\n+<Image\n+  alt=\"Open Supabase Assistant\"\n+  src={{\n+    light: '/docs/img/guides/functions/dashboard/create-with-assistant--light.png',\n+    dark: '/docs/img/guides/functions/dashboard/create-with-assistant--light.png',\n+  }}\n+  zoomable\n+/>\n \n-## Invoking Edge Functions locally\n+This brings up an assistant window with a pre-filled prompt for generating edge functions.\n+Write up your Edge Function requirement, and let Supabase Assistant do the rest.\n \n-While serving your local Edge Function, you can invoke it using curl or one of the client libraries.\n-To call the function from a browser you need to handle CORS requests. See [CORS](/docs/guides/functions/cors).\n+<div style={{ width: '75%', position: 'relative', aspectRatio: 'auto' }}>\n+  <Image\n+    alt=\"Generate a function with the assistant\"\n+    src={{\n+      light: '/docs/img/guides/functions/dashboard/assistant-function-gen--light.png',\n+      dark: '/docs/img/guides/functions/dashboard/assistant-function-gen--light.png',\n+    }}\n+    zoomable\n+  />\n+</div>\n \n-<$CodeTabs>\n+Click Deploy and the Assistant will automatically deploy your function.\n \n-```bash name=cURL\n-curl --request POST 'http://localhost:54321/functions/v1/hello-world' \\\n-  --header 'Authorization: Bearer SUPABASE_ANON_KEY' \\\n-  --header 'Content-Type: application/json' \\\n-  --data '{ \"name\":\"Functions\" }'\n-```\n+This function requires an OpenAI API key. You can add the key in your Edge Functions secrets page, or ask Assistant for help.\n \n-```js name=JavaScript\n-import { createClient } from '@supabase/supabase-js'\n+1. Navigate to your Edge Functions > Secrets page.\n+2. Look for the option to add environment variables.\n+3. Add a new environment variable with the key `OPENAI_API_KEY` and set its value to your actual OpenAI API key.\n \n-const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY)\n+Once you've set this environment variable, your edge functions will be able to access the OPENAI_API_KEY securely without hardcoding it into the function code. This is a best practice for keeping sensitive information safe.\n \n-const { data, error } = await supabase.functions.invoke('hello-world', {\n-  body: { name: 'Functions' },\n-})\n-```\n+With your variable set, you can test by sending a request via the dashboard. Navigate to the function's details page, and click on the test button. Then provide a Request Body your function expects.\n+\n+<div style={{ width: '60%', position: 'relative', aspectRatio: 'auto' }}>\n+  <Image\n+    alt=\"Provide a request body to test your function\"\n+    src={{\n+      light: '/docs/img/guides/functions/dashboard/test-request-body--light.png',\n+      dark: '/docs/img/guides/functions/dashboard/test-request-body--light.png',\n+    }}\n+    zoomable\n+  />\n+</div>\n \n-</$CodeTabs>\n+## Editing functions from the Dashboard\n \n-<Admonition type=\"tip\" label=\"Where is my SUPABASE_ANON_KEY?\">\n+<Admonition type=\"caution\" label=\"Be careful: there is currently no version control for edits\">\n \n-Run `supabase status` to see your local credentials.\n+The Dashboard's Edge Function editor currently does not support versioning or rollbacks. We recommend using it only for quick testing and prototypes. When you’re ready to go to production, store Edge Functions code in a source code repository (e.g., git) and deploy it using one of the [CI integrations](https://supabase.com/docs/guides/functions/cicd-workflow).\n \n </Admonition>\n \n-You should see the response `{ \"message\":\"Hello Functions!\" }`.\n+1. From the functions page, click on the function you want to edit. From the function page, click on the Code tab.\n \n-If you execute the function with a different payload, the response will change.\n+2. This opens up a code editor in the dashboard where you can see your deployed function's code.\n \n-Modify the `--data '{\"name\":\"Functions\"}'` line to `--data '{\"name\":\"World\"}'` and try invoking the command again.\n+3. Modify the code as needed, then click Deploy updates. This will overwrite the existing deployment with the newly edited function code.\n \n ## Next steps\n \n-Check out the [Deploy to Production](/docs/guides/functions/deploy) guide to make your Edge Function available to the world.\n+Check out the [Local development](/docs/guides/functions/local-quickstart) guide for more details on working with Edge Functions.\n \n Read on for some common development tips.",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2022167738",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34599,
        "pr_file": "apps/docs/content/guides/functions/quickstart.mdx",
        "discussion_id": "2022167738",
        "commented_code": "@@ -1,126 +1,155 @@\n ---\n id: 'functions-quickstart'\n-title: 'Developing Edge Functions locally'\n-description: 'Get started with Edge Functions on your local machine.'\n-subtitle: 'Get started with Edge Functions on your local machine.'\n+title: 'Developing Edge Functions with Supabase'\n+description: 'Get started with Edge Functions on the Supabase dashboard.'\n+subtitle: 'Get started with Edge Functions on the Supabase dashboard.'\n tocVideo: '5OWH9c4u68M'\n ---\n \n-Let's create a basic Edge Function on your local machine and then invoke it using the Supabase CLI.\n+In this guide we'll cover how to create a basic Edge Function on the Supabase dashboard, and access it using the Supabase CLI.\n \n-## Initialize a project\n+## Deploy from Dashboard\n \n-Create a new Supabase project in a folder on your local machine:\n+Go to your project > Edge Functions > Deploy a new function > Via Editor\n \n-```bash\n-supabase init\n-```\n+<Image\n+  alt=\"Deploy functions from the dashboard\"\n+  src={{\n+    light: '/docs/img/guides/functions/dashboard/deploy-function--light.png',\n+    dark: '/docs/img/guides/functions/dashboard/deploy-function--light.png',\n+  }}\n+  zoomable\n+/>\n \n-<Admonition type=\"tip\" label=\"CLI not installed?\">\n+This will scaffold a new function for you.\n \n-Check out the [CLI Docs](/docs/guides/cli) to learn how to install the Supabase CLI on your local machine.\n+<Image\n+  alt=\"Scaffold functions through the dashboard editor\"\n+  src={{\n+    light: '/docs/img/guides/functions/dashboard/scaffold-function--light.png',\n+    dark: '/docs/img/guides/functions/dashboard/scaffold-function--light.png',\n+  }}\n+  zoomable\n+/>\n \n-</Admonition>\n+Modify the function as needed, name it, and click `Deploy function`\n+\n+That's it! Your function is now active. Use the endpoint on the function's Details page to call the edge function.\n \n-<Admonition type=\"tip\">\n+## Access deployed functions via Supabase CLI\n \n-If you're using VS code you can have the CLI automatically create helpful Deno settings when running `supabase init`. Select `y` when prompted \"Generate VS Code settings for Deno? [y/N]\"!\n+<Admonition type=\"tip\" label=\"CLI not installed?\">\n+\n+Check out the [CLI Docs](/docs/guides/cli) to learn how to install the Supabase CLI on your local machine.\n \n </Admonition>\n \n-<Admonition type=\"tip\">\n+Now that your function is deployed, you can access it from your local development environment.\n+Here's how:\n \n-If you're using an IntelliJ IDEA editor such as WebStorm, you can use the `--with-intellij-settings` flag with `supabase init` to create an auto generated Deno config.\n+1. **Link your project** to your local environment.\n \n-</Admonition>\n+   You can find your project reference ID in the URL of your Supabase dashboard or in the project settings.\n \n-## Create an Edge Function\n+   ```bash\n+   supabase link --project-ref your-project-ref\n+   ```\n \n-Let's create a new Edge Function called `hello-world` inside your project:\n+2. **List all Functions** in the linked Supabase project.\n \n-```bash\n-supabase functions new hello-world\n-```\n+   ```bash\n+   supabase functions list\n+   ```\n \n-This creates a function stub in your `supabase` folder:\n+3. **Access the specific function** you want to work on.\n \n-```bash\n-└── supabase\n-    ├── functions\n-    │   └── hello-world\n-    │   │   └── index.ts ## Your function code\n-    └── config.toml\n-```\n+   ```bash\n+   supabase functions download function-name\n+   ```\n \n-## How to write the code\n+4. **Make local edits** to the function code as needed.\n \n-The generated function uses native [Deno.serve](https://docs.deno.com/runtime/manual/runtime/http_server_apis) to handle requests. It gives you access to `Request` and `Response` objects.\n+5. **Run your function locally** before redeploying.\n \n-Here's the generated Hello World Edge Function, that accepts a name in the `Request` and responds with a greeting:\n+   ```bash\n+   supabase functions serve function-name\n+   ```\n \n-```tsx\n-Deno.serve(async (req) => {\n-  const { name } = await req.json()\n-  const data = {\n-    message: `Hello ${name}!`,\n-  }\n+6. **Redeploy** when you're ready with your changes.\n \n-  return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })\n-})\n-```\n+   ```bash\n+   supabase functions deploy function-name\n+   ```\n \n-## Running Edge Functions locally\n+## Deploy via Assistant\n \n-You can run your Edge Function locally using [`supabase functions serve`](/docs/reference/cli/usage#supabase-functions-serve):\n+You can also leverage the Supabase Assistant to help you write and deploy edge functions.\n \n-```bash\n-supabase start # start the supabase stack\n-supabase functions serve # start the Functions watcher\n-```\n+Go to your project > Edge Functions > Click on the Assistant icon to Create with Supabase Assistant\n \n-The `functions serve` command has hot-reloading capabilities. It will watch for any changes to your files and restart the Deno server.\n+<Image\n+  alt=\"Open Supabase Assistant\"\n+  src={{\n+    light: '/docs/img/guides/functions/dashboard/create-with-assistant--light.png',\n+    dark: '/docs/img/guides/functions/dashboard/create-with-assistant--light.png',\n+  }}\n+  zoomable\n+/>\n \n-## Invoking Edge Functions locally\n+This brings up an assistant window with a pre-filled prompt for generating edge functions.\n+Write up your Edge Function requirement, and let Supabase Assistant do the rest.\n \n-While serving your local Edge Function, you can invoke it using curl or one of the client libraries.\n-To call the function from a browser you need to handle CORS requests. See [CORS](/docs/guides/functions/cors).\n+<div style={{ width: '75%', position: 'relative', aspectRatio: 'auto' }}>\n+  <Image\n+    alt=\"Generate a function with the assistant\"\n+    src={{\n+      light: '/docs/img/guides/functions/dashboard/assistant-function-gen--light.png',\n+      dark: '/docs/img/guides/functions/dashboard/assistant-function-gen--light.png',\n+    }}\n+    zoomable\n+  />\n+</div>\n \n-<$CodeTabs>\n+Click Deploy and the Assistant will automatically deploy your function.\n \n-```bash name=cURL\n-curl --request POST 'http://localhost:54321/functions/v1/hello-world' \\\n-  --header 'Authorization: Bearer SUPABASE_ANON_KEY' \\\n-  --header 'Content-Type: application/json' \\\n-  --data '{ \"name\":\"Functions\" }'\n-```\n+This function requires an OpenAI API key. You can add the key in your Edge Functions secrets page, or ask Assistant for help.\n \n-```js name=JavaScript\n-import { createClient } from '@supabase/supabase-js'\n+1. Navigate to your Edge Functions > Secrets page.\n+2. Look for the option to add environment variables.\n+3. Add a new environment variable with the key `OPENAI_API_KEY` and set its value to your actual OpenAI API key.\n \n-const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY)\n+Once you've set this environment variable, your edge functions will be able to access the OPENAI_API_KEY securely without hardcoding it into the function code. This is a best practice for keeping sensitive information safe.\n \n-const { data, error } = await supabase.functions.invoke('hello-world', {\n-  body: { name: 'Functions' },\n-})\n-```\n+With your variable set, you can test by sending a request via the dashboard. Navigate to the function's details page, and click on the test button. Then provide a Request Body your function expects.\n+\n+<div style={{ width: '60%', position: 'relative', aspectRatio: 'auto' }}>\n+  <Image\n+    alt=\"Provide a request body to test your function\"\n+    src={{\n+      light: '/docs/img/guides/functions/dashboard/test-request-body--light.png',\n+      dark: '/docs/img/guides/functions/dashboard/test-request-body--light.png',\n+    }}\n+    zoomable\n+  />\n+</div>\n \n-</$CodeTabs>\n+## Editing functions from the Dashboard\n \n-<Admonition type=\"tip\" label=\"Where is my SUPABASE_ANON_KEY?\">\n+<Admonition type=\"caution\" label=\"Be careful: there is currently no version control for edits\">\n \n-Run `supabase status` to see your local credentials.\n+The Dashboard's Edge Function editor currently does not support versioning or rollbacks. We recommend using it only for quick testing and prototypes. When you’re ready to go to production, store Edge Functions code in a source code repository (e.g., git) and deploy it using one of the [CI integrations](https://supabase.com/docs/guides/functions/cicd-workflow).\n \n </Admonition>\n \n-You should see the response `{ \"message\":\"Hello Functions!\" }`.\n+1. From the functions page, click on the function you want to edit. From the function page, click on the Code tab.\n \n-If you execute the function with a different payload, the response will change.\n+2. This opens up a code editor in the dashboard where you can see your deployed function's code.\n \n-Modify the `--data '{\"name\":\"Functions\"}'` line to `--data '{\"name\":\"World\"}'` and try invoking the command again.\n+3. Modify the code as needed, then click Deploy updates. This will overwrite the existing deployment with the newly edited function code.\n \n ## Next steps\n \n-Check out the [Deploy to Production](/docs/guides/functions/deploy) guide to make your Edge Function available to the world.\n+Check out the [Local development](/docs/guides/functions/local-quickstart) guide for more details on working with Edge Functions.\n \n Read on for some common development tips.",
        "comment_created_at": "2025-04-01T05:29:25+00:00",
        "comment_author": "laktek",
        "comment_body": "Shall we move the development tips to a separate page? That makes Quickstart look succinct. Also, currently they are repeated on both Quickstart and Local Development. Better to keep them in a single and link to from other pages.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2014802250",
    "pr_number": 34439,
    "pr_file": "apps/docs/content/guides/auth/third-party/clerk.mdx",
    "created_at": "2025-03-26T18:39:25+00:00",
    "commented_code": "+---\n+id: 'auth-third-party-clerk'\n+title: 'Clerk'\n+subtitle: 'Use Clerk with your Supabase project'\n+---\n+\n+Clerk can be used as a third-party authentication provider alongside Supabase Auth, or standalone, with your Supabase project.\n+\n+## Getting started\n+\n+Getting started is incredibly easy. Start off by visiting [Clerk's Connect with Supabase page](https://dashboard.clerk.com/setup/supabase) to configure your Clerk instance for Supabase compatibility.\n+\n+Finally add a [new Third-Party Auth integration with Clerk](/dashboard/project/_/auth/third-party) in the Supabase dashboard.\n+\n+### Setting up the Supabase CLI\n+\n+In the CLI add the following config to your `supabase/config.toml` file:\n+\n+```toml\n+[auth.third_party.clerk]\n+enabled = true\n+domain = \"example.clerk.accounts.dev\"\n+```\n+\n+### Manually configuring your Clerk instance\n+\n+If you are not able to use [Clerk's Connect with Supabase page](https://dashboard.clerk.com/setup/supabase) to easily configure your Clerk instance for working with Supabase, follow these steps.",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2014802250",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34439,
        "pr_file": "apps/docs/content/guides/auth/third-party/clerk.mdx",
        "discussion_id": "2014802250",
        "commented_code": "@@ -0,0 +1,142 @@\n+---\n+id: 'auth-third-party-clerk'\n+title: 'Clerk'\n+subtitle: 'Use Clerk with your Supabase project'\n+---\n+\n+Clerk can be used as a third-party authentication provider alongside Supabase Auth, or standalone, with your Supabase project.\n+\n+## Getting started\n+\n+Getting started is incredibly easy. Start off by visiting [Clerk's Connect with Supabase page](https://dashboard.clerk.com/setup/supabase) to configure your Clerk instance for Supabase compatibility.\n+\n+Finally add a [new Third-Party Auth integration with Clerk](/dashboard/project/_/auth/third-party) in the Supabase dashboard.\n+\n+### Setting up the Supabase CLI\n+\n+In the CLI add the following config to your `supabase/config.toml` file:\n+\n+```toml\n+[auth.third_party.clerk]\n+enabled = true\n+domain = \"example.clerk.accounts.dev\"\n+```\n+\n+### Manually configuring your Clerk instance\n+\n+If you are not able to use [Clerk's Connect with Supabase page](https://dashboard.clerk.com/setup/supabase) to easily configure your Clerk instance for working with Supabase, follow these steps.",
        "comment_created_at": "2025-03-26T18:39:25+00:00",
        "comment_author": "charislam",
        "comment_body": "The way this is worded, I expected to see a list of steps immediately underneath, and got kind of confused what the steps were when I got to the next paragraph. Also, this seems like yet another variation right? I think a clearer order would be:\r\n\r\nStep 1: Configure Clerk for Supabase compatibility\r\n- Method 1: Use Clerk's automatic thingamajig\r\n- Method 2: Manually customize your session token\r\n\r\nStep 2: Configure Supabse for clerk compatibility\r\n- Method 1: Use the dashboard\r\n- Method 2: Use the CLI",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2016867372",
    "pr_number": 34476,
    "pr_file": "apps/docs/content/guides/platform/read-replicas.mdx",
    "created_at": "2025-03-27T14:55:14+00:00",
    "commented_code": "The experimental routing mode can be enabled by sending the header `sb-lb-routing-mode: alpha-all-services` along with requests. This gives the option to opt-in and try out the new routing, but still have the peace of mind that the original behavior is there should it be needed.\n \n+Additionally, starting on April 4th, 2025, projects using experimental routing will benefit from our new geo-aware routing strategy:\n+\n+* Previous behavior: Requests not sent to the primary were distributed in a round-robin fashion among available replicas.\n+* New behavior: Requests not sent to the primary will be directed to the closest available replica based on geographic proximity.",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2016867372",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34476,
        "pr_file": "apps/docs/content/guides/platform/read-replicas.mdx",
        "discussion_id": "2016867372",
        "commented_code": "@@ -116,6 +116,13 @@ Due to the requirements of the Auth service, all Auth requests are handled by th\n \n The experimental routing mode can be enabled by sending the header `sb-lb-routing-mode: alpha-all-services` along with requests. This gives the option to opt-in and try out the new routing, but still have the peace of mind that the original behavior is there should it be needed.\n \n+Additionally, starting on April 4th, 2025, projects using experimental routing will benefit from our new geo-aware routing strategy:\n+\n+* Previous behavior: Requests not sent to the primary were distributed in a round-robin fashion among available replicas.\n+* New behavior: Requests not sent to the primary will be directed to the closest available replica based on geographic proximity.",
        "comment_created_at": "2025-03-27T14:55:14+00:00",
        "comment_author": "Crispy1975",
        "comment_body": "@jose-ledesma What about putting the key differences in an `<Admonition type=\"caution\"></Admonition>` block (`caution` or `info`)? Might call out the key changes a bit more clearly so users are not surprised by the behavior change?",
        "pr_file_module": null
      },
      {
        "comment_id": "2016874908",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34476,
        "pr_file": "apps/docs/content/guides/platform/read-replicas.mdx",
        "discussion_id": "2016867372",
        "commented_code": "@@ -116,6 +116,13 @@ Due to the requirements of the Auth service, all Auth requests are handled by th\n \n The experimental routing mode can be enabled by sending the header `sb-lb-routing-mode: alpha-all-services` along with requests. This gives the option to opt-in and try out the new routing, but still have the peace of mind that the original behavior is there should it be needed.\n \n+Additionally, starting on April 4th, 2025, projects using experimental routing will benefit from our new geo-aware routing strategy:\n+\n+* Previous behavior: Requests not sent to the primary were distributed in a round-robin fashion among available replicas.\n+* New behavior: Requests not sent to the primary will be directed to the closest available replica based on geographic proximity.",
        "comment_created_at": "2025-03-27T14:58:57+00:00",
        "comment_author": "jose-ledesma",
        "comment_body": "I've updated it, let me know wdyt @Crispy1975 ",
        "pr_file_module": null
      }
    ]
  }
]