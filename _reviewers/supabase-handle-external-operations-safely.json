[
  {
    "discussion_id": "2196380602",
    "pr_number": 37006,
    "pr_file": "apps/studio/pages/api/ai/sql/generate-v4.ts",
    "created_at": "2025-07-10T02:37:13+00:00",
    "commented_code": "const aiOptInLevel = getAiOptInLevel(selectedOrg?.opt_in_tags)\n \n+  // Check enabled database extensions to potentially restrict data access\n+  let effectiveAiOptInLevel = aiOptInLevel\n+\n+  try {\n+    let headers = new Headers()\n+    if (authorization) headers.set('Authorization', authorization)\n+\n+    const dbExtensions = await getDatabaseExtensions(\n+      { projectRef, connectionString },\n+      undefined,\n+      headers\n+    )\n+\n+    effectiveAiOptInLevel = checkNetworkExtensionsAndAdjustOptInLevel(\n+      dbExtensions,\n+      effectiveAiOptInLevel\n+    )\n+  } catch (error) {\n+    console.error('Failed to fetch database extensions:', error)",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2196380602",
        "repo_full_name": "supabase/supabase",
        "pr_number": 37006,
        "pr_file": "apps/studio/pages/api/ai/sql/generate-v4.ts",
        "discussion_id": "2196380602",
        "commented_code": "@@ -102,6 +104,27 @@ async function handlePost(req: NextApiRequest, res: NextApiResponse) {\n \n   const aiOptInLevel = getAiOptInLevel(selectedOrg?.opt_in_tags)\n \n+  // Check enabled database extensions to potentially restrict data access\n+  let effectiveAiOptInLevel = aiOptInLevel\n+\n+  try {\n+    let headers = new Headers()\n+    if (authorization) headers.set('Authorization', authorization)\n+\n+    const dbExtensions = await getDatabaseExtensions(\n+      { projectRef, connectionString },\n+      undefined,\n+      headers\n+    )\n+\n+    effectiveAiOptInLevel = checkNetworkExtensionsAndAdjustOptInLevel(\n+      dbExtensions,\n+      effectiveAiOptInLevel\n+    )\n+  } catch (error) {\n+    console.error('Failed to fetch database extensions:', error)",
        "comment_created_at": "2025-07-10T02:37:13+00:00",
        "comment_author": "gregnr",
        "comment_body": "Would be safer to default downgrade opt-in in an error case, or let this bubble up and fail the entire request.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2153791913",
    "pr_number": 36503,
    "pr_file": "apps/studio/data/service-status/edge-functions-status-query.ts",
    "created_at": "2025-06-18T06:54:28+00:00",
    "commented_code": "}\n \n export async function getEdgeFunctionServiceStatus(signal?: AbortSignal) {\n-  const res = await get(`https://obuldanrptloktxcffvn.supabase.co/functions/v1/health-check`, {\n+  const res = await fetch('https://obuldanrptloktxcffvn.supabase.co/functions/v1/health-check', {",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2153791913",
        "repo_full_name": "supabase/supabase",
        "pr_number": 36503,
        "pr_file": "apps/studio/data/service-status/edge-functions-status-query.ts",
        "discussion_id": "2153791913",
        "commented_code": "@@ -9,10 +8,12 @@ export type EdgeFunctionServiceStatusVariables = {\n }\n \n export async function getEdgeFunctionServiceStatus(signal?: AbortSignal) {\n-  const res = await get(`https://obuldanrptloktxcffvn.supabase.co/functions/v1/health-check`, {\n+  const res = await fetch('https://obuldanrptloktxcffvn.supabase.co/functions/v1/health-check', {",
        "comment_created_at": "2025-06-18T06:54:28+00:00",
        "comment_author": "ivasilov",
        "comment_body": "We should add throw/catch here if the network fails.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2084029820",
    "pr_number": 35532,
    "pr_file": "apps/studio/data/database-columns/database-column-create-mutation.ts",
    "created_at": "2025-05-12T07:41:49+00:00",
    "commented_code": "let headers = new Headers()\n   if (connectionString) headers.set('x-connection-encrypted', connectionString)\n \n-  const { data, error } = await post('/platform/pg-meta/{ref}/columns', {\n-    params: {\n-      header: { 'x-connection-encrypted': connectionString! },\n-      path: { ref: projectRef },\n-    },\n-    body: payload,\n-    headers,\n+  const { sql } = pgMeta.columns.create({\n+    schema: payload.schema,\n+    table: payload.table,\n+    name: payload.name,\n+    type: payload.type,\n+    default_value: payload.defaultValue,\n+    default_value_format: payload.defaultValueFormat,\n+    is_identity: payload.isIdentity,\n+    identity_generation: payload.identityGeneration,\n+    is_nullable: payload.isNullable,\n+    is_primary_key: payload.isPrimaryKey,\n+    is_unique: payload.isUnique,\n+    comment: payload.comment,\n+    check: payload.check,\n+  })\n+\n+  const { result } = await executeSql({\n+    projectRef,\n+    connectionString,\n+    sql,\n+    queryKey: ['column', 'create'],\n   })",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2084029820",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35532,
        "pr_file": "apps/studio/data/database-columns/database-column-create-mutation.ts",
        "discussion_id": "2084029820",
        "commented_code": "@@ -21,17 +25,30 @@ export async function createDatabaseColumn({\n   let headers = new Headers()\n   if (connectionString) headers.set('x-connection-encrypted', connectionString)\n \n-  const { data, error } = await post('/platform/pg-meta/{ref}/columns', {\n-    params: {\n-      header: { 'x-connection-encrypted': connectionString! },\n-      path: { ref: projectRef },\n-    },\n-    body: payload,\n-    headers,\n+  const { sql } = pgMeta.columns.create({\n+    schema: payload.schema,\n+    table: payload.table,\n+    name: payload.name,\n+    type: payload.type,\n+    default_value: payload.defaultValue,\n+    default_value_format: payload.defaultValueFormat,\n+    is_identity: payload.isIdentity,\n+    identity_generation: payload.identityGeneration,\n+    is_nullable: payload.isNullable,\n+    is_primary_key: payload.isPrimaryKey,\n+    is_unique: payload.isUnique,\n+    comment: payload.comment,\n+    check: payload.check,\n+  })\n+\n+  const { result } = await executeSql({\n+    projectRef,\n+    connectionString,\n+    sql,\n+    queryKey: ['column', 'create'],\n   })",
        "comment_created_at": "2025-05-12T07:41:49+00:00",
        "comment_author": "avallete",
        "comment_body": "**issue**\r\n\r\nThis will throw an error when `connectionString` is not valid (which happen often with new project until an ipv6 is setup), we handled the error with `handleError` before, we wanna do the same I think:\r\n\r\n```ts\r\ntry {\r\n    await executeSql(...)\r\n    return data\r\n} catch (error) {\r\n   handleError(error)\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2084979891",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35532,
        "pr_file": "apps/studio/data/database-columns/database-column-create-mutation.ts",
        "discussion_id": "2084029820",
        "commented_code": "@@ -21,17 +25,30 @@ export async function createDatabaseColumn({\n   let headers = new Headers()\n   if (connectionString) headers.set('x-connection-encrypted', connectionString)\n \n-  const { data, error } = await post('/platform/pg-meta/{ref}/columns', {\n-    params: {\n-      header: { 'x-connection-encrypted': connectionString! },\n-      path: { ref: projectRef },\n-    },\n-    body: payload,\n-    headers,\n+  const { sql } = pgMeta.columns.create({\n+    schema: payload.schema,\n+    table: payload.table,\n+    name: payload.name,\n+    type: payload.type,\n+    default_value: payload.defaultValue,\n+    default_value_format: payload.defaultValueFormat,\n+    is_identity: payload.isIdentity,\n+    identity_generation: payload.identityGeneration,\n+    is_nullable: payload.isNullable,\n+    is_primary_key: payload.isPrimaryKey,\n+    is_unique: payload.isUnique,\n+    comment: payload.comment,\n+    check: payload.check,\n+  })\n+\n+  const { result } = await executeSql({\n+    projectRef,\n+    connectionString,\n+    sql,\n+    queryKey: ['column', 'create'],\n   })",
        "comment_created_at": "2025-05-12T15:47:42+00:00",
        "comment_author": "sweatybridge",
        "comment_body": "The [handleError](https://github.com/supabase/supabase/blob/master/apps/studio/data/sql/execute-sql-query.ts#L102-L103) is called within executeSql so not necessary here.",
        "pr_file_module": null
      },
      {
        "comment_id": "2086140291",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35532,
        "pr_file": "apps/studio/data/database-columns/database-column-create-mutation.ts",
        "discussion_id": "2084029820",
        "commented_code": "@@ -21,17 +25,30 @@ export async function createDatabaseColumn({\n   let headers = new Headers()\n   if (connectionString) headers.set('x-connection-encrypted', connectionString)\n \n-  const { data, error } = await post('/platform/pg-meta/{ref}/columns', {\n-    params: {\n-      header: { 'x-connection-encrypted': connectionString! },\n-      path: { ref: projectRef },\n-    },\n-    body: payload,\n-    headers,\n+  const { sql } = pgMeta.columns.create({\n+    schema: payload.schema,\n+    table: payload.table,\n+    name: payload.name,\n+    type: payload.type,\n+    default_value: payload.defaultValue,\n+    default_value_format: payload.defaultValueFormat,\n+    is_identity: payload.isIdentity,\n+    identity_generation: payload.identityGeneration,\n+    is_nullable: payload.isNullable,\n+    is_primary_key: payload.isPrimaryKey,\n+    is_unique: payload.isUnique,\n+    comment: payload.comment,\n+    check: payload.check,\n+  })\n+\n+  const { result } = await executeSql({\n+    projectRef,\n+    connectionString,\n+    sql,\n+    queryKey: ['column', 'create'],\n   })",
        "comment_created_at": "2025-05-13T07:40:32+00:00",
        "comment_author": "avallete",
        "comment_body": "Not exactly at the same level though with the old code, we were always calling the `post` method, then the `pgMetaGuard` would take place and would return an error if the connectionString wasn't valid, which would result in always calling `handleError` because `if(error)` would be true.\r\n\r\nThe logic within `executeSql` throw before the call to `post`, so the `handleError` won't be called in this case. \r\nMight wanna either: \r\n\r\n1. Remove the early check here: https://github.com/supabase/supabase/blob/71b261932e394de25d95a939ccbb228c622968a9/apps/studio/data/sql/execute-sql-query.ts#L44-L45 as the guard will already be in `post`\r\n2. Keep the guard, and use a try/catch to call `handleError`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2086152273",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35532,
        "pr_file": "apps/studio/data/database-columns/database-column-create-mutation.ts",
        "discussion_id": "2084029820",
        "commented_code": "@@ -21,17 +25,30 @@ export async function createDatabaseColumn({\n   let headers = new Headers()\n   if (connectionString) headers.set('x-connection-encrypted', connectionString)\n \n-  const { data, error } = await post('/platform/pg-meta/{ref}/columns', {\n-    params: {\n-      header: { 'x-connection-encrypted': connectionString! },\n-      path: { ref: projectRef },\n-    },\n-    body: payload,\n-    headers,\n+  const { sql } = pgMeta.columns.create({\n+    schema: payload.schema,\n+    table: payload.table,\n+    name: payload.name,\n+    type: payload.type,\n+    default_value: payload.defaultValue,\n+    default_value_format: payload.defaultValueFormat,\n+    is_identity: payload.isIdentity,\n+    identity_generation: payload.identityGeneration,\n+    is_nullable: payload.isNullable,\n+    is_primary_key: payload.isPrimaryKey,\n+    is_unique: payload.isUnique,\n+    comment: payload.comment,\n+    check: payload.check,\n+  })\n+\n+  const { result } = await executeSql({\n+    projectRef,\n+    connectionString,\n+    sql,\n+    queryKey: ['column', 'create'],\n   })",
        "comment_created_at": "2025-05-13T07:47:11+00:00",
        "comment_author": "avallete",
        "comment_body": "Made a PR applying 1 here: https://github.com/supabase/supabase/pull/35635",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2083992277",
    "pr_number": 35617,
    "pr_file": "apps/studio/data/fetchers.ts",
    "created_at": "2025-05-12T07:18:52+00:00",
    "commented_code": "// If there is no valid `x-connection-encrypted`, pg-meta will necesseraly fail to connect to the target database\n     // in such case, we save the hops and throw a 421 response instead\n     if (!isValidConnString(request.headers.get('x-connection-encrypted'))) {\n-      // TODO: Maybe here add a sentry warning to monitor how often this happen\n-      // Simulate a 421 response by throwing an error\n-      throw {\n-        code: 421,\n-        message: 'x-connection-encrypted header is required for /platform/pg-meta/ requests',\n-        requestId: request.headers.get('X-Request-Id'),\n-      }\n+      throw new ResponseError(\n+        'x-connection-encrypted header is required for /platform/pg-meta/ requests',\n+        400,",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2083992277",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35617,
        "pr_file": "apps/studio/data/fetchers.ts",
        "discussion_id": "2083992277",
        "commented_code": "@@ -63,13 +63,11 @@ function pgMetaGuard(request: Request) {\n     // If there is no valid `x-connection-encrypted`, pg-meta will necesseraly fail to connect to the target database\n     // in such case, we save the hops and throw a 421 response instead\n     if (!isValidConnString(request.headers.get('x-connection-encrypted'))) {\n-      // TODO: Maybe here add a sentry warning to monitor how often this happen\n-      // Simulate a 421 response by throwing an error\n-      throw {\n-        code: 421,\n-        message: 'x-connection-encrypted header is required for /platform/pg-meta/ requests',\n-        requestId: request.headers.get('X-Request-Id'),\n-      }\n+      throw new ResponseError(\n+        'x-connection-encrypted header is required for /platform/pg-meta/ requests',\n+        400,",
        "comment_created_at": "2025-05-12T07:18:52+00:00",
        "comment_author": "avallete",
        "comment_body": "**note**\r\n\r\nTurned 421 to 400, 421 is misredirect which doesn't seems appropriate. Use the generic \"Bad Request\" instead.",
        "pr_file_module": null
      },
      {
        "comment_id": "2088540256",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35617,
        "pr_file": "apps/studio/data/fetchers.ts",
        "discussion_id": "2083992277",
        "commented_code": "@@ -63,13 +63,11 @@ function pgMetaGuard(request: Request) {\n     // If there is no valid `x-connection-encrypted`, pg-meta will necesseraly fail to connect to the target database\n     // in such case, we save the hops and throw a 421 response instead\n     if (!isValidConnString(request.headers.get('x-connection-encrypted'))) {\n-      // TODO: Maybe here add a sentry warning to monitor how often this happen\n-      // Simulate a 421 response by throwing an error\n-      throw {\n-        code: 421,\n-        message: 'x-connection-encrypted header is required for /platform/pg-meta/ requests',\n-        requestId: request.headers.get('X-Request-Id'),\n-      }\n+      throw new ResponseError(\n+        'x-connection-encrypted header is required for /platform/pg-meta/ requests',\n+        400,",
        "comment_created_at": "2025-05-14T09:48:59+00:00",
        "comment_author": "sweatybridge",
        "comment_body": "The previous code threw an object but the new code threw an exception. This might be causing elevated error due to different error handling path?",
        "pr_file_module": null
      }
    ]
  }
]