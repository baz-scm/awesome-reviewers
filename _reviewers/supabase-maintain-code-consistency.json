[
  {
    "discussion_id": "2216172727",
    "pr_number": 37280,
    "pr_file": "apps/docs/content/guides/realtime/protocol.mdx",
    "created_at": "2025-07-18T14:24:03+00:00",
    "commented_code": "description: 'Understanding Realtime Protocol'\n ---\n \n-The Realtime Protocol is a set of message formats used for communication over a WebSocket connection between a Realtime client and server. These messages are used to initiate a connection, update access tokens, receive system status updates, and receive real-time updates from the Postgres database.\n+## WebSocket connection setup\n \n-## Connection\n+To start the connection we use the WebSocket URL, which for:\n \n-In the initial message, the client sends a message specifying the features they want to use (Broadcast, Presence, Postgres Changes).\n+- Supabase projects: `wss://<PROJECT_REF>.supabase.co/realtime/v1/websocket?apikey=<API_KEY>`\n+- self-hosted projects: `wss://<HOST>:<PORT>/socket/websocket?apikey=<API_KEY>`\n+\n+{/* supa-mdx-lint-disable Rule003Spelling */}",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2216172727",
        "repo_full_name": "supabase/supabase",
        "pr_number": 37280,
        "pr_file": "apps/docs/content/guides/realtime/protocol.mdx",
        "discussion_id": "2216172727",
        "commented_code": "@@ -4,187 +4,315 @@ title: 'Realtime Protocol'\n description: 'Understanding Realtime Protocol'\n ---\n \n-The Realtime Protocol is a set of message formats used for communication over a WebSocket connection between a Realtime client and server. These messages are used to initiate a connection, update access tokens, receive system status updates, and receive real-time updates from the Postgres database.\n+## WebSocket connection setup\n \n-## Connection\n+To start the connection we use the WebSocket URL, which for:\n \n-In the initial message, the client sends a message specifying the features they want to use (Broadcast, Presence, Postgres Changes).\n+- Supabase projects: `wss://<PROJECT_REF>.supabase.co/realtime/v1/websocket?apikey=<API_KEY>`\n+- self-hosted projects: `wss://<HOST>:<PORT>/socket/websocket?apikey=<API_KEY>`\n+\n+{/* supa-mdx-lint-disable Rule003Spelling */}",
        "comment_created_at": "2025-07-18T14:24:03+00:00",
        "comment_author": "charislam",
        "comment_body": "```suggestion\n{/* supa-mdx-lint-disable-next-line Rule003Spelling */}\n```\n\nLet's not turn off spellcheck for the entire file ðŸ˜„ If you need websocat multiple times, add it to exceptions",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2212030541",
    "pr_number": 37227,
    "pr_file": "apps/docs/content/guides/auth/social-login/auth-google.mdx",
    "created_at": "2025-07-17T02:40:57+00:00",
    "commented_code": "import Script from 'next/script'\n import { createClient } from '@/utils/supabase/client'\n-import { CredentialResponse } from 'google-one-tap'\n+import type { accounts, CredentialResponse } from 'google-one-tap'\n import { useRouter } from 'next/navigation'\n import { useEffect } from 'react'\n \n+declare const google: { accounts: accounts }\n+\n+// generate nonce to use for google id token sign-in\n+const generateNonce = async (): Promise<string[]> => {\n+  const nonce = btoa(String.fromCharCode(...crypto.getRandomValues(new Uint8Array(32))))\n+  const encoder = new TextEncoder()\n+  const encodedNonce = encoder.encode(nonce)\n+  const hashBuffer = await crypto.subtle.digest('SHA-256', encodedNonce)\n+  const hashArray = Array.from(new Uint8Array(hashBuffer))\n+  const hashedNonce = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('')\n+\n+  return [nonce, hashedNonce]\n+}",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2212030541",
        "repo_full_name": "supabase/supabase",
        "pr_number": 37227,
        "pr_file": "apps/docs/content/guides/auth/social-login/auth-google.mdx",
        "discussion_id": "2212030541",
        "commented_code": "@@ -376,81 +376,74 @@ If you're integrating Google One-Tap with your Next.js application, you can refe\n \n import Script from 'next/script'\n import { createClient } from '@/utils/supabase/client'\n-import { CredentialResponse } from 'google-one-tap'\n+import type { accounts, CredentialResponse } from 'google-one-tap'\n import { useRouter } from 'next/navigation'\n import { useEffect } from 'react'\n \n+declare const google: { accounts: accounts }\n+\n+// generate nonce to use for google id token sign-in\n+const generateNonce = async (): Promise<string[]> => {\n+  const nonce = btoa(String.fromCharCode(...crypto.getRandomValues(new Uint8Array(32))))\n+  const encoder = new TextEncoder()\n+  const encodedNonce = encoder.encode(nonce)\n+  const hashBuffer = await crypto.subtle.digest('SHA-256', encodedNonce)\n+  const hashArray = Array.from(new Uint8Array(hashBuffer))\n+  const hashedNonce = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('')\n+\n+  return [nonce, hashedNonce]\n+}",
        "comment_created_at": "2025-07-17T02:40:57+00:00",
        "comment_author": "BayanBennett",
        "comment_body": "Moved this out of the component since it has no dependency on the component itself",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1879659397",
    "pr_number": 30840,
    "pr_file": "apps/docs/content/guides/auth/quickstarts/react.mdx",
    "created_at": "2024-12-11T09:07:03+00:00",
    "commented_code": "```js src/App.js\n-        import './index.css'\n-        import { useState, useEffect } from 'react'\n+        import React, { useState } from 'react';\n         import { createClient } from '@supabase/supabase-js'\n-        import { Auth } from '@supabase/auth-ui-react'\n-        import { ThemeSupa } from '@supabase/auth-ui-shared'\n-\n-        const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\n-\n-        export default function App() {\n-          const [session, setSession] = useState(null)\n-\n-          useEffect(() => {\n-            supabase.auth.getSession().then(({ data: { session } }) => {\n-              setSession(session)\n-            })\n-\n-            const {\n-              data: { subscription },\n-            } = supabase.auth.onAuthStateChange((_event, session) => {\n-              setSession(session)\n-            })\n-\n-            return () => subscription.unsubscribe()\n-          }, [])\n-\n-          if (!session) {\n-            return (<Auth supabaseClient={supabase} appearance={{ theme: ThemeSupa }} />)\n-          }\n-          else {\n-            return (<div>Logged in!</div>)\n-          }\n+\n+\n+        function App() {\n+            const [email, setEmail] = useState('');\n+            const [password, setPassword] = useState('');\n+            const [loading, setLoading] = useState(false);\n+\n+            const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\n+\n+            async function signInWithEmail() {\n+                setLoading(true);\n+                const { error } = await supabase.auth.signInWithPassword({ email, password});\n+                if (error) alert(error.message);\n+                setLoading(false);\n+            }\n+\n+            async function signUpWithEmail() {\n+                setLoading(true);\n+                const { data: { session }, error} = await supabase.auth.signUp({ email, password});\n+                if (error) alert(error.message);\n+                if (!session) alert('Please check your inbox for email verification!');\n+                setLoading(false);\n+            }\n+\n+            const styles = {\n+                container: {\n+                    maxWidth: '300px',\n+                    margin: '20px auto',\n+                    padding: '20px',\n+                },\n+                formGroup: {\n+                    marginBottom: '15px',\n+                },\n+                label: {\n+                    display: 'block',\n+                    marginBottom: '5px',\n+                },\n+                input: {\n+                    width: '100%',\n+                    padding: '8px',\n+                    marginBottom: '10px',\n+                },\n+                button: {\n+                    padding: '8px 16px',\n+                    marginRight: '10px',\n+                    cursor: 'pointer',\n+                }\n+            };\n+\n+            return (\n+                <div style={styles.container}>\n+                <div style={styles.formGroup}>\n+                    <label style={styles.label}>\n+                    Email:\n+                    <input\n+                        type=\"email\"\n+                        value={email}\n+                        onChange={(e) => setEmail(e.target.value)}\n+                        placeholder=\"email@address.com\"\n+                        style={styles.input}\n+                    />\n+                    </label>\n+                </div>\n+\n+                <div style={styles.formGroup}>\n+                    <label style={styles.label}>\n+                    Password:\n+                    <input\n+                        type=\"password\"\n+                        value={password}\n+                        onChange={(e) => setPassword(e.target.value)}\n+                        placeholder=\"Password\"\n+                        style={styles.input}\n+                    />\n+                    </label>\n+                </div>\n+\n+                <button",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "1879659397",
        "repo_full_name": "supabase/supabase",
        "pr_number": 30840,
        "pr_file": "apps/docs/content/guides/auth/quickstarts/react.mdx",
        "discussion_id": "1879659397",
        "commented_code": "@@ -75,38 +73,103 @@ hideToc: true\n \n \n       ```js src/App.js\n-        import './index.css'\n-        import { useState, useEffect } from 'react'\n+        import React, { useState } from 'react';\n         import { createClient } from '@supabase/supabase-js'\n-        import { Auth } from '@supabase/auth-ui-react'\n-        import { ThemeSupa } from '@supabase/auth-ui-shared'\n-\n-        const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\n-\n-        export default function App() {\n-          const [session, setSession] = useState(null)\n-\n-          useEffect(() => {\n-            supabase.auth.getSession().then(({ data: { session } }) => {\n-              setSession(session)\n-            })\n-\n-            const {\n-              data: { subscription },\n-            } = supabase.auth.onAuthStateChange((_event, session) => {\n-              setSession(session)\n-            })\n-\n-            return () => subscription.unsubscribe()\n-          }, [])\n-\n-          if (!session) {\n-            return (<Auth supabaseClient={supabase} appearance={{ theme: ThemeSupa }} />)\n-          }\n-          else {\n-            return (<div>Logged in!</div>)\n-          }\n+\n+\n+        function App() {\n+            const [email, setEmail] = useState('');\n+            const [password, setPassword] = useState('');\n+            const [loading, setLoading] = useState(false);\n+\n+            const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\n+\n+            async function signInWithEmail() {\n+                setLoading(true);\n+                const { error } = await supabase.auth.signInWithPassword({ email, password});\n+                if (error) alert(error.message);\n+                setLoading(false);\n+            }\n+\n+            async function signUpWithEmail() {\n+                setLoading(true);\n+                const { data: { session }, error} = await supabase.auth.signUp({ email, password});\n+                if (error) alert(error.message);\n+                if (!session) alert('Please check your inbox for email verification!');\n+                setLoading(false);\n+            }\n+\n+            const styles = {\n+                container: {\n+                    maxWidth: '300px',\n+                    margin: '20px auto',\n+                    padding: '20px',\n+                },\n+                formGroup: {\n+                    marginBottom: '15px',\n+                },\n+                label: {\n+                    display: 'block',\n+                    marginBottom: '5px',\n+                },\n+                input: {\n+                    width: '100%',\n+                    padding: '8px',\n+                    marginBottom: '10px',\n+                },\n+                button: {\n+                    padding: '8px 16px',\n+                    marginRight: '10px',\n+                    cursor: 'pointer',\n+                }\n+            };\n+\n+            return (\n+                <div style={styles.container}>\n+                <div style={styles.formGroup}>\n+                    <label style={styles.label}>\n+                    Email:\n+                    <input\n+                        type=\"email\"\n+                        value={email}\n+                        onChange={(e) => setEmail(e.target.value)}\n+                        placeholder=\"email@address.com\"\n+                        style={styles.input}\n+                    />\n+                    </label>\n+                </div>\n+\n+                <div style={styles.formGroup}>\n+                    <label style={styles.label}>\n+                    Password:\n+                    <input\n+                        type=\"password\"\n+                        value={password}\n+                        onChange={(e) => setPassword(e.target.value)}\n+                        placeholder=\"Password\"\n+                        style={styles.input}\n+                    />\n+                    </label>\n+                </div>\n+\n+                <button",
        "comment_created_at": "2024-12-11T09:07:03+00:00",
        "comment_author": "MildTomato",
        "comment_body": "everything should be in a `<form/>`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2014803690",
    "pr_number": 34439,
    "pr_file": "apps/docs/content/guides/auth/third-party/clerk.mdx",
    "created_at": "2025-03-26T18:40:31+00:00",
    "commented_code": "+---\n+id: 'auth-third-party-clerk'\n+title: 'Clerk'\n+subtitle: 'Use Clerk with your Supabase project'\n+---\n+\n+Clerk can be used as a third-party authentication provider alongside Supabase Auth, or standalone, with your Supabase project.\n+\n+## Getting started\n+\n+Getting started is incredibly easy. Start off by visiting [Clerk's Connect with Supabase page](https://dashboard.clerk.com/setup/supabase) to configure your Clerk instance for Supabase compatibility.\n+\n+Finally add a [new Third-Party Auth integration with Clerk](/dashboard/project/_/auth/third-party) in the Supabase dashboard.\n+\n+### Setting up the Supabase CLI\n+\n+In the CLI add the following config to your `supabase/config.toml` file:\n+\n+```toml\n+[auth.third_party.clerk]\n+enabled = true\n+domain = \"example.clerk.accounts.dev\"\n+```\n+\n+### Manually configuring your Clerk instance\n+\n+If you are not able to use [Clerk's Connect with Supabase page](https://dashboard.clerk.com/setup/supabase) to easily configure your Clerk instance for working with Supabase, follow these steps.\n+\n+All Clerk [session tokens](https://clerk.com/docs/backend-requests/resources/session-tokens) you send to Supabase must contain a `role` claim. End-users who are authenticated should have the `authenticated` value. In some cases you may wish to change the role to match your advanced Postgres setup.\n+\n+Follow Clerk's guide on [customizing the session token](https://clerk.com/docs/backend-requests/custom-session-token) to add or modify the `role` claim based on your project's needs.\n+\n+Once all Clerk session tokens for your instance contain the `role` claim, add a [new Third-Party Auth integration with Clerk](/dashboard/project/_/auth/third-party) in the Supabase dashboard or register it in the CLI as instructed above.\n+\n+## Setup the Supabase client library\n+\n+<Tabs type=\"underlined\" queryGroup=\"clerk-create-client\">",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2014803690",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34439,
        "pr_file": "apps/docs/content/guides/auth/third-party/clerk.mdx",
        "discussion_id": "2014803690",
        "commented_code": "@@ -0,0 +1,142 @@\n+---\n+id: 'auth-third-party-clerk'\n+title: 'Clerk'\n+subtitle: 'Use Clerk with your Supabase project'\n+---\n+\n+Clerk can be used as a third-party authentication provider alongside Supabase Auth, or standalone, with your Supabase project.\n+\n+## Getting started\n+\n+Getting started is incredibly easy. Start off by visiting [Clerk's Connect with Supabase page](https://dashboard.clerk.com/setup/supabase) to configure your Clerk instance for Supabase compatibility.\n+\n+Finally add a [new Third-Party Auth integration with Clerk](/dashboard/project/_/auth/third-party) in the Supabase dashboard.\n+\n+### Setting up the Supabase CLI\n+\n+In the CLI add the following config to your `supabase/config.toml` file:\n+\n+```toml\n+[auth.third_party.clerk]\n+enabled = true\n+domain = \"example.clerk.accounts.dev\"\n+```\n+\n+### Manually configuring your Clerk instance\n+\n+If you are not able to use [Clerk's Connect with Supabase page](https://dashboard.clerk.com/setup/supabase) to easily configure your Clerk instance for working with Supabase, follow these steps.\n+\n+All Clerk [session tokens](https://clerk.com/docs/backend-requests/resources/session-tokens) you send to Supabase must contain a `role` claim. End-users who are authenticated should have the `authenticated` value. In some cases you may wish to change the role to match your advanced Postgres setup.\n+\n+Follow Clerk's guide on [customizing the session token](https://clerk.com/docs/backend-requests/custom-session-token) to add or modify the `role` claim based on your project's needs.\n+\n+Once all Clerk session tokens for your instance contain the `role` claim, add a [new Third-Party Auth integration with Clerk](/dashboard/project/_/auth/third-party) in the Supabase dashboard or register it in the CLI as instructed above.\n+\n+## Setup the Supabase client library\n+\n+<Tabs type=\"underlined\" queryGroup=\"clerk-create-client\">",
        "comment_created_at": "2025-03-26T18:40:31+00:00",
        "comment_author": "charislam",
        "comment_body": "```suggestion\r\n<Tabs type=\"underlined\" queryGroup=\"language\">\r\n```\r\n\r\nthis will align user language preferences globally across the site",
        "pr_file_module": null
      }
    ]
  }
]