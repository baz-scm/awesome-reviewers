[
  {
    "discussion_id": "1980643255",
    "pr_number": 33989,
    "pr_file": "apps/docs/content/guides/functions/examples/elevenlabs-generate-speech-stream.mdx",
    "created_at": "2025-03-05T03:47:04+00:00",
    "commented_code": "+---\n+title: Streaming Speech with ElevenLabs\n+subtitle: Generate and stream speech through Supabase Edge Functions. Store speech in Supabase Storage and cache responses via built-in CDN.\n+tocVideo: '4Roog4PAmZ8'\n+---\n+\n+## Introduction\n+\n+In this tutorial you will learn how to build and edge API to generate, stream, store, and cache speech from text using Supabase Edge Functions, Supabase Storage, and ElevenLabs.`\n+\n+<Admonition type=\"tip\">\n+  Find the [example project on GitHub](https://github.com/elevenlabs/elevenlabs-examples/tree/main/examples/text-to-speech/supabase/stream-and-cache-storage).\n+</Admonition>\n+\n+## Requirements\n+\n+- An ElevenLabs account with an [API key](/app/settings/api-keys).\n+- A [Supabase](https://supabase.com) account (you can sign up for a free account via [database.new](https://database.new)).\n+- The [Supabase CLI](https://supabase.com/docs/guides/local-development) installed on your machine.\n+- The [Deno runtime](https://docs.deno.com/runtime/getting_started/installation/) installed on your machine and optionally [setup in your facourite IDE](https://docs.deno.com/runtime/getting_started/setup_your_environment).\n+\n+## Setup\n+\n+### Create a Supabase project locally\n+\n+After installing the [Supabase CLI](https://supabase.com/docs/guides/local-development), run the following command to create a new Supabase project locally:\n+\n+```bash\n+supabase init\n+```\n+\n+### Configure the storage bucket\n+\n+You can configure the Supabase CLI to automatically generate a storage bucket by adding this configuration in the `config.toml` file:\n+\n+```toml ./supabase/config.toml\n+[storage.buckets.audio]\n+public = false\n+file_size_limit = \"50MiB\"\n+allowed_mime_types = [\"audio/mp3\"]\n+objects_path = \"./audio\"\n+```\n+\n+<Admonition type=\"tip\">\n+  Upon running `supabase start` this will create a new storage bucket in your local Supabase\n+  project. Should you want to push this to your hosted Supabase project, you can run `supabase seed\n+  buckets --linked`.\n+</Admonition>\n+\n+### Configure background tasks for Supabase Edge Functions\n+\n+To use background tasks in Supabase Edge Functions when developing locally, you need to add the following configuration in the `config.toml` file:\n+\n+```toml ./supabase/config.toml\n+[edge_runtime]\n+policy = \"per_worker\"\n+```\n+\n+<Admonition type=\"tip\">\n+  When running with `per_worker` policy, Function won't auto-reload on edits. You will need to\n+  manually restart it by running `supabase functions serve`.\n+</Admonition>\n+\n+### Create a Supabase Edge Function for Speech generation\n+\n+Create a new Edge Function by running the following command:\n+\n+```bash\n+supabase functions new text-to-speech\n+```\n+\n+If you're using VS Code or Cursor, select `y` when the CLI prompts \"Generate VS Code settings for Deno? [y/N]\"!\n+\n+### Set up the environment variables\n+\n+Within the `supabase/functions` directory, create a new `.env` file and add the following variables:\n+\n+```env supabase/functions/.env\n+# Find / create an API key at https://elevenlabs.io/app/settings/api-keys\n+ELEVENLABS_API_KEY=your_api_key\n+```\n+\n+### Dependencies\n+\n+The project uses a couple of dependencies:\n+\n+- The [@supabase/supabase-js](https://supabase.com/docs/reference/javascript) library to interact with the Supabase database.\n+- The ElevenLabs [JavaScript SDK](/docs/quickstart) to interact with the text-to-speech API.\n+- The open-source [object-hash](https://www.npmjs.com/package/object-hash) to generate a hash from the request parameters.\n+\n+Since Supabase Edge Function uses the [Deno runtime](https://deno.land/), you don't need to install the dependencies, rather you can [import](https://docs.deno.com/examples/npm/) them via the `npm:` prefix.\n+\n+## Code the Supabase Edge Function\n+\n+In your newly created `supabase/functions/text-to-speech/index.ts` file, add the following code:\n+\n+```ts supabase/functions/text-to-speech/index.ts\n+// Setup type definitions for built-in Supabase Runtime APIs\n+import 'jsr:@supabase/functions-js/edge-runtime.d.ts';\n+import { createClient } from 'jsr:@supabase/supabase-js@2';\n+import { ElevenLabsClient } from 'npm:elevenlabs';",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "1980643255",
        "repo_full_name": "supabase/supabase",
        "pr_number": 33989,
        "pr_file": "apps/docs/content/guides/functions/examples/elevenlabs-generate-speech-stream.mdx",
        "discussion_id": "1980643255",
        "commented_code": "@@ -0,0 +1,244 @@\n+---\n+title: Streaming Speech with ElevenLabs\n+subtitle: Generate and stream speech through Supabase Edge Functions. Store speech in Supabase Storage and cache responses via built-in CDN.\n+tocVideo: '4Roog4PAmZ8'\n+---\n+\n+## Introduction\n+\n+In this tutorial you will learn how to build and edge API to generate, stream, store, and cache speech from text using Supabase Edge Functions, Supabase Storage, and ElevenLabs.`\n+\n+<Admonition type=\"tip\">\n+  Find the [example project on GitHub](https://github.com/elevenlabs/elevenlabs-examples/tree/main/examples/text-to-speech/supabase/stream-and-cache-storage).\n+</Admonition>\n+\n+## Requirements\n+\n+- An ElevenLabs account with an [API key](/app/settings/api-keys).\n+- A [Supabase](https://supabase.com) account (you can sign up for a free account via [database.new](https://database.new)).\n+- The [Supabase CLI](https://supabase.com/docs/guides/local-development) installed on your machine.\n+- The [Deno runtime](https://docs.deno.com/runtime/getting_started/installation/) installed on your machine and optionally [setup in your facourite IDE](https://docs.deno.com/runtime/getting_started/setup_your_environment).\n+\n+## Setup\n+\n+### Create a Supabase project locally\n+\n+After installing the [Supabase CLI](https://supabase.com/docs/guides/local-development), run the following command to create a new Supabase project locally:\n+\n+```bash\n+supabase init\n+```\n+\n+### Configure the storage bucket\n+\n+You can configure the Supabase CLI to automatically generate a storage bucket by adding this configuration in the `config.toml` file:\n+\n+```toml ./supabase/config.toml\n+[storage.buckets.audio]\n+public = false\n+file_size_limit = \"50MiB\"\n+allowed_mime_types = [\"audio/mp3\"]\n+objects_path = \"./audio\"\n+```\n+\n+<Admonition type=\"tip\">\n+  Upon running `supabase start` this will create a new storage bucket in your local Supabase\n+  project. Should you want to push this to your hosted Supabase project, you can run `supabase seed\n+  buckets --linked`.\n+</Admonition>\n+\n+### Configure background tasks for Supabase Edge Functions\n+\n+To use background tasks in Supabase Edge Functions when developing locally, you need to add the following configuration in the `config.toml` file:\n+\n+```toml ./supabase/config.toml\n+[edge_runtime]\n+policy = \"per_worker\"\n+```\n+\n+<Admonition type=\"tip\">\n+  When running with `per_worker` policy, Function won't auto-reload on edits. You will need to\n+  manually restart it by running `supabase functions serve`.\n+</Admonition>\n+\n+### Create a Supabase Edge Function for Speech generation\n+\n+Create a new Edge Function by running the following command:\n+\n+```bash\n+supabase functions new text-to-speech\n+```\n+\n+If you're using VS Code or Cursor, select `y` when the CLI prompts \"Generate VS Code settings for Deno? [y/N]\"!\n+\n+### Set up the environment variables\n+\n+Within the `supabase/functions` directory, create a new `.env` file and add the following variables:\n+\n+```env supabase/functions/.env\n+# Find / create an API key at https://elevenlabs.io/app/settings/api-keys\n+ELEVENLABS_API_KEY=your_api_key\n+```\n+\n+### Dependencies\n+\n+The project uses a couple of dependencies:\n+\n+- The [@supabase/supabase-js](https://supabase.com/docs/reference/javascript) library to interact with the Supabase database.\n+- The ElevenLabs [JavaScript SDK](/docs/quickstart) to interact with the text-to-speech API.\n+- The open-source [object-hash](https://www.npmjs.com/package/object-hash) to generate a hash from the request parameters.\n+\n+Since Supabase Edge Function uses the [Deno runtime](https://deno.land/), you don't need to install the dependencies, rather you can [import](https://docs.deno.com/examples/npm/) them via the `npm:` prefix.\n+\n+## Code the Supabase Edge Function\n+\n+In your newly created `supabase/functions/text-to-speech/index.ts` file, add the following code:\n+\n+```ts supabase/functions/text-to-speech/index.ts\n+// Setup type definitions for built-in Supabase Runtime APIs\n+import 'jsr:@supabase/functions-js/edge-runtime.d.ts';\n+import { createClient } from 'jsr:@supabase/supabase-js@2';\n+import { ElevenLabsClient } from 'npm:elevenlabs';",
        "comment_created_at": "2025-03-05T03:47:04+00:00",
        "comment_author": "laktek",
        "comment_body": "nit: let's specify versions for npm dependencies",
        "pr_file_module": null
      },
      {
        "comment_id": "1981376284",
        "repo_full_name": "supabase/supabase",
        "pr_number": 33989,
        "pr_file": "apps/docs/content/guides/functions/examples/elevenlabs-generate-speech-stream.mdx",
        "discussion_id": "1980643255",
        "commented_code": "@@ -0,0 +1,244 @@\n+---\n+title: Streaming Speech with ElevenLabs\n+subtitle: Generate and stream speech through Supabase Edge Functions. Store speech in Supabase Storage and cache responses via built-in CDN.\n+tocVideo: '4Roog4PAmZ8'\n+---\n+\n+## Introduction\n+\n+In this tutorial you will learn how to build and edge API to generate, stream, store, and cache speech from text using Supabase Edge Functions, Supabase Storage, and ElevenLabs.`\n+\n+<Admonition type=\"tip\">\n+  Find the [example project on GitHub](https://github.com/elevenlabs/elevenlabs-examples/tree/main/examples/text-to-speech/supabase/stream-and-cache-storage).\n+</Admonition>\n+\n+## Requirements\n+\n+- An ElevenLabs account with an [API key](/app/settings/api-keys).\n+- A [Supabase](https://supabase.com) account (you can sign up for a free account via [database.new](https://database.new)).\n+- The [Supabase CLI](https://supabase.com/docs/guides/local-development) installed on your machine.\n+- The [Deno runtime](https://docs.deno.com/runtime/getting_started/installation/) installed on your machine and optionally [setup in your facourite IDE](https://docs.deno.com/runtime/getting_started/setup_your_environment).\n+\n+## Setup\n+\n+### Create a Supabase project locally\n+\n+After installing the [Supabase CLI](https://supabase.com/docs/guides/local-development), run the following command to create a new Supabase project locally:\n+\n+```bash\n+supabase init\n+```\n+\n+### Configure the storage bucket\n+\n+You can configure the Supabase CLI to automatically generate a storage bucket by adding this configuration in the `config.toml` file:\n+\n+```toml ./supabase/config.toml\n+[storage.buckets.audio]\n+public = false\n+file_size_limit = \"50MiB\"\n+allowed_mime_types = [\"audio/mp3\"]\n+objects_path = \"./audio\"\n+```\n+\n+<Admonition type=\"tip\">\n+  Upon running `supabase start` this will create a new storage bucket in your local Supabase\n+  project. Should you want to push this to your hosted Supabase project, you can run `supabase seed\n+  buckets --linked`.\n+</Admonition>\n+\n+### Configure background tasks for Supabase Edge Functions\n+\n+To use background tasks in Supabase Edge Functions when developing locally, you need to add the following configuration in the `config.toml` file:\n+\n+```toml ./supabase/config.toml\n+[edge_runtime]\n+policy = \"per_worker\"\n+```\n+\n+<Admonition type=\"tip\">\n+  When running with `per_worker` policy, Function won't auto-reload on edits. You will need to\n+  manually restart it by running `supabase functions serve`.\n+</Admonition>\n+\n+### Create a Supabase Edge Function for Speech generation\n+\n+Create a new Edge Function by running the following command:\n+\n+```bash\n+supabase functions new text-to-speech\n+```\n+\n+If you're using VS Code or Cursor, select `y` when the CLI prompts \"Generate VS Code settings for Deno? [y/N]\"!\n+\n+### Set up the environment variables\n+\n+Within the `supabase/functions` directory, create a new `.env` file and add the following variables:\n+\n+```env supabase/functions/.env\n+# Find / create an API key at https://elevenlabs.io/app/settings/api-keys\n+ELEVENLABS_API_KEY=your_api_key\n+```\n+\n+### Dependencies\n+\n+The project uses a couple of dependencies:\n+\n+- The [@supabase/supabase-js](https://supabase.com/docs/reference/javascript) library to interact with the Supabase database.\n+- The ElevenLabs [JavaScript SDK](/docs/quickstart) to interact with the text-to-speech API.\n+- The open-source [object-hash](https://www.npmjs.com/package/object-hash) to generate a hash from the request parameters.\n+\n+Since Supabase Edge Function uses the [Deno runtime](https://deno.land/), you don't need to install the dependencies, rather you can [import](https://docs.deno.com/examples/npm/) them via the `npm:` prefix.\n+\n+## Code the Supabase Edge Function\n+\n+In your newly created `supabase/functions/text-to-speech/index.ts` file, add the following code:\n+\n+```ts supabase/functions/text-to-speech/index.ts\n+// Setup type definitions for built-in Supabase Runtime APIs\n+import 'jsr:@supabase/functions-js/edge-runtime.d.ts';\n+import { createClient } from 'jsr:@supabase/supabase-js@2';\n+import { ElevenLabsClient } from 'npm:elevenlabs';",
        "comment_created_at": "2025-03-05T13:16:19+00:00",
        "comment_author": "thorwebdev",
        "comment_body": "Done \u2705 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2083516173",
    "pr_number": 35080,
    "pr_file": "e2e/studio/supabase/.gitignore",
    "created_at": "2025-05-11T12:50:43+00:00",
    "commented_code": null,
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2083516173",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35080,
        "pr_file": "e2e/studio/supabase/.gitignore",
        "discussion_id": "2083516173",
        "commented_code": null,
        "comment_created_at": "2025-05-11T12:50:43+00:00",
        "comment_author": "kiwicopple",
        "comment_body": "I think we should remove the `supabase` folder completely from this `e2e/studio` folder (and add it to .gitignore). If you start adding code test-specific functionality in here then the e2e tests are not going to be reproducible on other environments (prod, staging, etc)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2060244568",
    "pr_number": 35267,
    "pr_file": "apps/docs/content/guides/local-development/cli/testing-and-linting.mdx",
    "created_at": "2025-04-25T13:27:40+00:00",
    "commented_code": "## Testing Auth emails\n \n-The Supabase CLI uses [Inbucket](https://github.com/inbucket/inbucket) to capture emails sent from your local machine. This is useful for testing emails sent from Supabase Auth.\n+The Supabase CLI uses [Mailpit](https://github.com/axllent/mailpit) to capture emails sent from your local machine. This is useful for testing emails sent from Supabase Auth.\n \n-### Accessing Inbucket\n+### Accessing Mailpit\n \n-By default, Inbucket is available at [localhost:54324](http://localhost:54324) when you run `supabase start`. Open this URL in your browser to view the emails.\n+By default, Mailpit is available at [localhost:54324](http://localhost:54324) when you run `supabase start`. Open this URL in your browser to view the emails.",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2060244568",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35267,
        "pr_file": "apps/docs/content/guides/local-development/cli/testing-and-linting.mdx",
        "discussion_id": "2060244568",
        "commented_code": "@@ -36,11 +36,11 @@ Edge Functions are powered by Deno, which provides a [native set of testing tool\n \n ## Testing Auth emails\n \n-The Supabase CLI uses [Inbucket](https://github.com/inbucket/inbucket) to capture emails sent from your local machine. This is useful for testing emails sent from Supabase Auth.\n+The Supabase CLI uses [Mailpit](https://github.com/axllent/mailpit) to capture emails sent from your local machine. This is useful for testing emails sent from Supabase Auth.\n \n-### Accessing Inbucket\n+### Accessing Mailpit\n \n-By default, Inbucket is available at [localhost:54324](http://localhost:54324) when you run `supabase start`. Open this URL in your browser to view the emails.\n+By default, Mailpit is available at [localhost:54324](http://localhost:54324) when you run `supabase start`. Open this URL in your browser to view the emails.",
        "comment_created_at": "2025-04-25T13:27:40+00:00",
        "comment_author": "charislam",
        "comment_body": "```suggestion\r\nBy default, Mailpit is available at [localhost:54324](http://localhost:54324) when you run `supabase start`. Open this URL in your browser to view the emails.\r\n\r\n<Admonition type=\"note\">\r\n\r\nThe local mail service used by the CLI used to be Inbucket. This was changed to Mailpit in [version 2.17.0](https://github.com/supabase/cli/releases/tag/v2.17.0). If you are on an older version of the CLI, you might still be using Inbucket. The instructions remain the same.\r\n\r\n</Admonition>\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2018228601",
    "pr_number": 34507,
    "pr_file": "apps/docs/content/guides/deployment/going-into-prod.mdx",
    "created_at": "2025-03-28T09:28:16+00:00",
    "commented_code": "- Use your own SMTP credentials so that you have full control over the deliverability of your transactional auth emails (see Settings > Auth)\n   - you can grab SMTP credentials from any major email provider such as SendGrid, AWS SES, etc. You can refer to our [SMTP guide](/docs/guides/auth/auth-smtp) for more details.\n   - The default rate limit for auth emails when using a custom SMTP provider is 30 new users per hour, if doing a major public announcement you will likely require more than this.\n-- If your application is on the Free Plan and is **not** expected to be queried at least once every 7 days, then it may be paused by Supabase to save on server resources.\n+- Applications on the on the Free Plan that exhibit extremely low activity in a 7 day period will be paused by Supabase to save on server resources.",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2018228601",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34507,
        "pr_file": "apps/docs/content/guides/deployment/going-into-prod.mdx",
        "discussion_id": "2018228601",
        "commented_code": "@@ -50,7 +50,7 @@ After developing your project and deciding it's Production Ready, you should run\n - Use your own SMTP credentials so that you have full control over the deliverability of your transactional auth emails (see Settings > Auth)\n   - you can grab SMTP credentials from any major email provider such as SendGrid, AWS SES, etc. You can refer to our [SMTP guide](/docs/guides/auth/auth-smtp) for more details.\n   - The default rate limit for auth emails when using a custom SMTP provider is 30 new users per hour, if doing a major public announcement you will likely require more than this.\n-- If your application is on the Free Plan and is **not** expected to be queried at least once every 7 days, then it may be paused by Supabase to save on server resources.\n+- Applications on the on the Free Plan that exhibit extremely low activity in a 7 day period will be paused by Supabase to save on server resources.",
        "comment_created_at": "2025-03-28T09:28:16+00:00",
        "comment_author": "thebengeu",
        "comment_body": "It's likely but not certain in some circumstances, so \"may\" instead of \"will\"?",
        "pr_file_module": null
      },
      {
        "comment_id": "2018247788",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34507,
        "pr_file": "apps/docs/content/guides/deployment/going-into-prod.mdx",
        "discussion_id": "2018228601",
        "commented_code": "@@ -50,7 +50,7 @@ After developing your project and deciding it's Production Ready, you should run\n - Use your own SMTP credentials so that you have full control over the deliverability of your transactional auth emails (see Settings > Auth)\n   - you can grab SMTP credentials from any major email provider such as SendGrid, AWS SES, etc. You can refer to our [SMTP guide](/docs/guides/auth/auth-smtp) for more details.\n   - The default rate limit for auth emails when using a custom SMTP provider is 30 new users per hour, if doing a major public announcement you will likely require more than this.\n-- If your application is on the Free Plan and is **not** expected to be queried at least once every 7 days, then it may be paused by Supabase to save on server resources.\n+- Applications on the on the Free Plan that exhibit extremely low activity in a 7 day period will be paused by Supabase to save on server resources.",
        "comment_created_at": "2025-03-28T09:37:40+00:00",
        "comment_author": "Crispy1975",
        "comment_body": "Fixed.",
        "pr_file_module": null
      }
    ]
  }
]