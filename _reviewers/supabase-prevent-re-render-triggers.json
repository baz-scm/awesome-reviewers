[
  {
    "discussion_id": "2197624781",
    "pr_number": 36918,
    "pr_file": "apps/studio/components/interfaces/Integrations/Wrappers/EditWrapperSheet.tsx",
    "created_at": "2025-07-10T12:39:32+00:00",
    "commented_code": "},\n   })\n \n-  const [wrapperTables, setWrapperTables] = useState<any[]>(\n-    formatWrapperTables(wrapper, wrapperMeta)\n-  )\n+  const [wrapperTables, setWrapperTables] = useState(formatWrapperTables(wrapper, wrapperMeta))",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2197624781",
        "repo_full_name": "supabase/supabase",
        "pr_number": 36918,
        "pr_file": "apps/studio/components/interfaces/Integrations/Wrappers/EditWrapperSheet.tsx",
        "discussion_id": "2197624781",
        "commented_code": "@@ -57,11 +58,11 @@ export const EditWrapperSheet = ({\n     },\n   })\n \n-  const [wrapperTables, setWrapperTables] = useState<any[]>(\n-    formatWrapperTables(wrapper, wrapperMeta)\n-  )\n+  const [wrapperTables, setWrapperTables] = useState(formatWrapperTables(wrapper, wrapperMeta))",
        "comment_created_at": "2025-07-10T12:39:32+00:00",
        "comment_author": "alaister",
        "comment_body": "nit(perf)\r\n```suggestion\r\n  const [wrapperTables, setWrapperTables] = useState(() => formatWrapperTables(wrapper, wrapperMeta))\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2193546988",
    "pr_number": 36948,
    "pr_file": "apps/studio/components/ui/AIAssistantPanel/AIOnboarding.tsx",
    "created_at": "2025-07-08T22:36:31+00:00",
    "commented_code": "title: 'Create a back-end',",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2193546988",
        "repo_full_name": "supabase/supabase",
        "pr_number": 36948,
        "pr_file": "apps/studio/components/ui/AIAssistantPanel/AIOnboarding.tsx",
        "discussion_id": "2193546988",
        "commented_code": "@@ -33,51 +32,42 @@ export const AIOnboarding = ({\n       title: 'Create a back-end',",
        "comment_created_at": "2025-07-08T22:36:31+00:00",
        "comment_author": "ivasilov",
        "comment_body": "Take the `defaultPrompts` out of the component, they're causing rerenders because a new array is created each render.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1973056509",
    "pr_number": 33875,
    "pr_file": "apps/studio/components/interfaces/Realtime/RealtimeSettings.tsx",
    "created_at": "2025-02-27T08:01:33+00:00",
    "commented_code": "+import { zodResolver } from '@hookform/resolvers/zod'\n+import { PermissionAction } from '@supabase/shared-types/out/constants'\n+import { useEffect } from 'react'\n+import { SubmitHandler, useForm } from 'react-hook-form'\n+import { toast } from 'sonner'\n+import * as z from 'zod'\n+\n+import { useParams } from 'common'\n+import { ScaffoldSection } from 'components/layouts/Scaffold'\n+import { convertFromBytes } from 'components/to-be-cleaned/Storage/StorageSettings/StorageSettings.utils'\n+import AlertError from 'components/ui/AlertError'\n+import { FormSection, FormSectionContent, FormSectionLabel } from 'components/ui/Forms/FormSection'\n+import { useRealtimeConfigurationUpdateMutation } from 'data/realtime/realtime-config-mutation'\n+import {\n+  REALTIME_DEFAULT_CONFIG,\n+  useRealtimeConfigurationQuery,\n+} from 'data/realtime/realtime-config-query'\n+import { useCheckPermissions } from 'hooks/misc/useCheckPermissions'\n+import {\n+  Button,\n+  Card,\n+  CardContent,\n+  CardFooter,\n+  Form_Shadcn_,\n+  FormControl_Shadcn_,\n+  FormField_Shadcn_,\n+  Input_Shadcn_,\n+  Switch,\n+} from 'ui'\n+import { FormItemLayout } from 'ui-patterns/form/FormItemLayout/FormItemLayout'\n+\n+const formId = 'realtime-configuration-form'\n+\n+const FormSchema = z.object({\n+  private_only: z.boolean(),\n+  connection_pool: z.number().min(1).max(100),\n+  max_concurrent_users: z.number().min(1).max(50000),\n+  max_events_per_second: z.number().min(1).max(50000),\n+  max_bytes_per_second: z.number().min(1).max(10000000),\n+  max_channels_per_client: z.number().min(1).max(10000),\n+  max_joins_per_second: z.number().min(1).max(5000),\n+})\n+\n+export const RealtimeSettings = () => {\n+  const { ref: projectRef } = useParams()\n+  const canUpdateConfig = useCheckPermissions(PermissionAction.REALTIME_ADMIN_READ, '*')\n+\n+  const { data, error, isLoading, isSuccess, isError } = useRealtimeConfigurationQuery({\n+    projectRef,\n+  })\n+  const { mutate: updateRealtimeConfig, isLoading: isUpdatingConfig } =\n+    useRealtimeConfigurationUpdateMutation({\n+      onSuccess: () => {\n+        form.reset(form.getValues())\n+        toast.success('Successfully updated realtime settings')\n+      },\n+    })\n+\n+  const form = useForm<z.infer<typeof FormSchema>>({\n+    resolver: zodResolver(FormSchema),\n+    defaultValues: REALTIME_DEFAULT_CONFIG,\n+  })\n+  const { max_bytes_per_second } = form.watch()\n+\n+  const onSubmit: SubmitHandler<z.infer<typeof FormSchema>> = (data) => {\n+    if (!projectRef) return console.error('Project ref is required')\n+    updateRealtimeConfig({ ref: projectRef, ...data })\n+  }\n+\n+  useEffect(() => {\n+    // [Joshen] Temp typed with any - API typing marks all the properties as nullable,\n+    // but checked with Filipe that they're not supposed to\n+    if (data) form.reset(data as any)\n+  }, [isSuccess])\n+\n+  return (\n+    <ScaffoldSection isFullWidth>\n+      <Form_Shadcn_ {...form}>\n+        <form id={formId} onSubmit={form.handleSubmit(onSubmit)}>\n+          {isError ? (\n+            <AlertError error={error} subject=\"Failed to retrieve realtime settings\" />\n+          ) : (\n+            <Card>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"private_only\"\n+                  render={({ field }) => (\n+                    <FormSection\n+                      className=\"!p-0 !pt-2\"\n+                      header={<FormSectionLabel>Channel restrictions</FormSectionLabel>}\n+                    >\n+                      <FormSectionContent loading={isLoading}>\n+                        <FormItemLayout\n+                          layout=\"flex\"\n+                          label=\"Private channels only\"\n+                          description=\"If this is enabled, only private channels will be allowed\"\n+                        >\n+                          <FormControl_Shadcn_>\n+                            <Switch\n+                              checked={field.value}\n+                              onCheckedChange={field.onChange}\n+                              disabled={!canUpdateConfig}\n+                            />\n+                          </FormControl_Shadcn_>\n+                        </FormItemLayout>\n+                      </FormSectionContent>\n+                    </FormSection>\n+                  )}\n+                />\n+              </CardContent>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"connection_pool\"\n+                  render={({ field }) => (\n+                    <FormSection\n+                      className=\"!p-0 !py-2\"\n+                      header={\n+                        <FormSectionLabel\n+                          description={\n+                            <p className=\"text-foreground-lighter text-sm !mt-1\">\n+                              Sets connection pool size for Realtime Authorization\n+                            </p>\n+                          }\n+                        >\n+                          Connection pool size\n+                        </FormSectionLabel>\n+                      }\n+                    >\n+                      <FormSectionContent loading={isLoading}>\n+                        <FormControl_Shadcn_>\n+                          <Input_Shadcn_\n+                            {...field}\n+                            type=\"number\"\n+                            disabled={!canUpdateConfig}\n+                            value={field.value || ''}\n+                            {...form.register('connection_pool', { valueAsNumber: true })}\n+                          />\n+                        </FormControl_Shadcn_>\n+                      </FormSectionContent>\n+                    </FormSection>\n+                  )}\n+                />\n+              </CardContent>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"max_concurrent_users\"\n+                  render={({ field }) => (\n+                    <FormSection\n+                      className=\"!p-0 !py-2\"\n+                      header={\n+                        <FormSectionLabel\n+                          description={\n+                            <p className=\"text-foreground-lighter text-sm !mt-1\">\n+                              Sets maximum number of concurrent users rate limit\n+                            </p>\n+                          }\n+                        >\n+                          Max concurrent users\n+                        </FormSectionLabel>\n+                      }\n+                    >\n+                      <FormSectionContent loading={isLoading}>\n+                        <FormControl_Shadcn_>\n+                          <Input_Shadcn_\n+                            {...field}\n+                            type=\"number\"\n+                            disabled={!canUpdateConfig}\n+                            value={field.value || ''}\n+                            {...form.register('max_concurrent_users', { valueAsNumber: true })}\n+                          />\n+                        </FormControl_Shadcn_>\n+                      </FormSectionContent>\n+                    </FormSection>\n+                  )}\n+                />\n+              </CardContent>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"max_events_per_second\"\n+                  render={({ field }) => (\n+                    <FormSection\n+                      className=\"!p-0 !py-2\"\n+                      header={\n+                        <FormSectionLabel\n+                          description={\n+                            <p className=\"text-foreground-lighter text-sm !mt-1\">\n+                              Sets maximum number of events per second rate per channel limit\n+                            </p>\n+                          }\n+                        >\n+                          Max events per second\n+                        </FormSectionLabel>\n+                      }\n+                    >\n+                      <FormSectionContent loading={isLoading}>\n+                        <FormControl_Shadcn_>\n+                          <Input_Shadcn_\n+                            {...field}\n+                            type=\"number\"\n+                            disabled={!canUpdateConfig}\n+                            value={field.value || ''}\n+                            {...form.register('max_events_per_second', { valueAsNumber: true })}\n+                          />\n+                        </FormControl_Shadcn_>\n+                      </FormSectionContent>\n+                    </FormSection>\n+                  )}\n+                />\n+              </CardContent>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"max_bytes_per_second\"\n+                  render={({ field }) => {\n+                    const { value, unit } = convertFromBytes(max_bytes_per_second ?? 0)",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "1973056509",
        "repo_full_name": "supabase/supabase",
        "pr_number": 33875,
        "pr_file": "apps/studio/components/interfaces/Realtime/RealtimeSettings.tsx",
        "discussion_id": "1973056509",
        "commented_code": "@@ -0,0 +1,345 @@\n+import { zodResolver } from '@hookform/resolvers/zod'\n+import { PermissionAction } from '@supabase/shared-types/out/constants'\n+import { useEffect } from 'react'\n+import { SubmitHandler, useForm } from 'react-hook-form'\n+import { toast } from 'sonner'\n+import * as z from 'zod'\n+\n+import { useParams } from 'common'\n+import { ScaffoldSection } from 'components/layouts/Scaffold'\n+import { convertFromBytes } from 'components/to-be-cleaned/Storage/StorageSettings/StorageSettings.utils'\n+import AlertError from 'components/ui/AlertError'\n+import { FormSection, FormSectionContent, FormSectionLabel } from 'components/ui/Forms/FormSection'\n+import { useRealtimeConfigurationUpdateMutation } from 'data/realtime/realtime-config-mutation'\n+import {\n+  REALTIME_DEFAULT_CONFIG,\n+  useRealtimeConfigurationQuery,\n+} from 'data/realtime/realtime-config-query'\n+import { useCheckPermissions } from 'hooks/misc/useCheckPermissions'\n+import {\n+  Button,\n+  Card,\n+  CardContent,\n+  CardFooter,\n+  Form_Shadcn_,\n+  FormControl_Shadcn_,\n+  FormField_Shadcn_,\n+  Input_Shadcn_,\n+  Switch,\n+} from 'ui'\n+import { FormItemLayout } from 'ui-patterns/form/FormItemLayout/FormItemLayout'\n+\n+const formId = 'realtime-configuration-form'\n+\n+const FormSchema = z.object({\n+  private_only: z.boolean(),\n+  connection_pool: z.number().min(1).max(100),\n+  max_concurrent_users: z.number().min(1).max(50000),\n+  max_events_per_second: z.number().min(1).max(50000),\n+  max_bytes_per_second: z.number().min(1).max(10000000),\n+  max_channels_per_client: z.number().min(1).max(10000),\n+  max_joins_per_second: z.number().min(1).max(5000),\n+})\n+\n+export const RealtimeSettings = () => {\n+  const { ref: projectRef } = useParams()\n+  const canUpdateConfig = useCheckPermissions(PermissionAction.REALTIME_ADMIN_READ, '*')\n+\n+  const { data, error, isLoading, isSuccess, isError } = useRealtimeConfigurationQuery({\n+    projectRef,\n+  })\n+  const { mutate: updateRealtimeConfig, isLoading: isUpdatingConfig } =\n+    useRealtimeConfigurationUpdateMutation({\n+      onSuccess: () => {\n+        form.reset(form.getValues())\n+        toast.success('Successfully updated realtime settings')\n+      },\n+    })\n+\n+  const form = useForm<z.infer<typeof FormSchema>>({\n+    resolver: zodResolver(FormSchema),\n+    defaultValues: REALTIME_DEFAULT_CONFIG,\n+  })\n+  const { max_bytes_per_second } = form.watch()\n+\n+  const onSubmit: SubmitHandler<z.infer<typeof FormSchema>> = (data) => {\n+    if (!projectRef) return console.error('Project ref is required')\n+    updateRealtimeConfig({ ref: projectRef, ...data })\n+  }\n+\n+  useEffect(() => {\n+    // [Joshen] Temp typed with any - API typing marks all the properties as nullable,\n+    // but checked with Filipe that they're not supposed to\n+    if (data) form.reset(data as any)\n+  }, [isSuccess])\n+\n+  return (\n+    <ScaffoldSection isFullWidth>\n+      <Form_Shadcn_ {...form}>\n+        <form id={formId} onSubmit={form.handleSubmit(onSubmit)}>\n+          {isError ? (\n+            <AlertError error={error} subject=\"Failed to retrieve realtime settings\" />\n+          ) : (\n+            <Card>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"private_only\"\n+                  render={({ field }) => (\n+                    <FormSection\n+                      className=\"!p-0 !pt-2\"\n+                      header={<FormSectionLabel>Channel restrictions</FormSectionLabel>}\n+                    >\n+                      <FormSectionContent loading={isLoading}>\n+                        <FormItemLayout\n+                          layout=\"flex\"\n+                          label=\"Private channels only\"\n+                          description=\"If this is enabled, only private channels will be allowed\"\n+                        >\n+                          <FormControl_Shadcn_>\n+                            <Switch\n+                              checked={field.value}\n+                              onCheckedChange={field.onChange}\n+                              disabled={!canUpdateConfig}\n+                            />\n+                          </FormControl_Shadcn_>\n+                        </FormItemLayout>\n+                      </FormSectionContent>\n+                    </FormSection>\n+                  )}\n+                />\n+              </CardContent>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"connection_pool\"\n+                  render={({ field }) => (\n+                    <FormSection\n+                      className=\"!p-0 !py-2\"\n+                      header={\n+                        <FormSectionLabel\n+                          description={\n+                            <p className=\"text-foreground-lighter text-sm !mt-1\">\n+                              Sets connection pool size for Realtime Authorization\n+                            </p>\n+                          }\n+                        >\n+                          Connection pool size\n+                        </FormSectionLabel>\n+                      }\n+                    >\n+                      <FormSectionContent loading={isLoading}>\n+                        <FormControl_Shadcn_>\n+                          <Input_Shadcn_\n+                            {...field}\n+                            type=\"number\"\n+                            disabled={!canUpdateConfig}\n+                            value={field.value || ''}\n+                            {...form.register('connection_pool', { valueAsNumber: true })}\n+                          />\n+                        </FormControl_Shadcn_>\n+                      </FormSectionContent>\n+                    </FormSection>\n+                  )}\n+                />\n+              </CardContent>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"max_concurrent_users\"\n+                  render={({ field }) => (\n+                    <FormSection\n+                      className=\"!p-0 !py-2\"\n+                      header={\n+                        <FormSectionLabel\n+                          description={\n+                            <p className=\"text-foreground-lighter text-sm !mt-1\">\n+                              Sets maximum number of concurrent users rate limit\n+                            </p>\n+                          }\n+                        >\n+                          Max concurrent users\n+                        </FormSectionLabel>\n+                      }\n+                    >\n+                      <FormSectionContent loading={isLoading}>\n+                        <FormControl_Shadcn_>\n+                          <Input_Shadcn_\n+                            {...field}\n+                            type=\"number\"\n+                            disabled={!canUpdateConfig}\n+                            value={field.value || ''}\n+                            {...form.register('max_concurrent_users', { valueAsNumber: true })}\n+                          />\n+                        </FormControl_Shadcn_>\n+                      </FormSectionContent>\n+                    </FormSection>\n+                  )}\n+                />\n+              </CardContent>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"max_events_per_second\"\n+                  render={({ field }) => (\n+                    <FormSection\n+                      className=\"!p-0 !py-2\"\n+                      header={\n+                        <FormSectionLabel\n+                          description={\n+                            <p className=\"text-foreground-lighter text-sm !mt-1\">\n+                              Sets maximum number of events per second rate per channel limit\n+                            </p>\n+                          }\n+                        >\n+                          Max events per second\n+                        </FormSectionLabel>\n+                      }\n+                    >\n+                      <FormSectionContent loading={isLoading}>\n+                        <FormControl_Shadcn_>\n+                          <Input_Shadcn_\n+                            {...field}\n+                            type=\"number\"\n+                            disabled={!canUpdateConfig}\n+                            value={field.value || ''}\n+                            {...form.register('max_events_per_second', { valueAsNumber: true })}\n+                          />\n+                        </FormControl_Shadcn_>\n+                      </FormSectionContent>\n+                    </FormSection>\n+                  )}\n+                />\n+              </CardContent>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"max_bytes_per_second\"\n+                  render={({ field }) => {\n+                    const { value, unit } = convertFromBytes(max_bytes_per_second ?? 0)",
        "comment_created_at": "2025-02-27T08:01:33+00:00",
        "comment_author": "ivasilov",
        "comment_body": "you can use `field.value` here instead of `max_bytes_per_second`. The current approach with `form.watch` will cause entire form to rerender.",
        "pr_file_module": null
      },
      {
        "comment_id": "1973064204",
        "repo_full_name": "supabase/supabase",
        "pr_number": 33875,
        "pr_file": "apps/studio/components/interfaces/Realtime/RealtimeSettings.tsx",
        "discussion_id": "1973056509",
        "commented_code": "@@ -0,0 +1,345 @@\n+import { zodResolver } from '@hookform/resolvers/zod'\n+import { PermissionAction } from '@supabase/shared-types/out/constants'\n+import { useEffect } from 'react'\n+import { SubmitHandler, useForm } from 'react-hook-form'\n+import { toast } from 'sonner'\n+import * as z from 'zod'\n+\n+import { useParams } from 'common'\n+import { ScaffoldSection } from 'components/layouts/Scaffold'\n+import { convertFromBytes } from 'components/to-be-cleaned/Storage/StorageSettings/StorageSettings.utils'\n+import AlertError from 'components/ui/AlertError'\n+import { FormSection, FormSectionContent, FormSectionLabel } from 'components/ui/Forms/FormSection'\n+import { useRealtimeConfigurationUpdateMutation } from 'data/realtime/realtime-config-mutation'\n+import {\n+  REALTIME_DEFAULT_CONFIG,\n+  useRealtimeConfigurationQuery,\n+} from 'data/realtime/realtime-config-query'\n+import { useCheckPermissions } from 'hooks/misc/useCheckPermissions'\n+import {\n+  Button,\n+  Card,\n+  CardContent,\n+  CardFooter,\n+  Form_Shadcn_,\n+  FormControl_Shadcn_,\n+  FormField_Shadcn_,\n+  Input_Shadcn_,\n+  Switch,\n+} from 'ui'\n+import { FormItemLayout } from 'ui-patterns/form/FormItemLayout/FormItemLayout'\n+\n+const formId = 'realtime-configuration-form'\n+\n+const FormSchema = z.object({\n+  private_only: z.boolean(),\n+  connection_pool: z.number().min(1).max(100),\n+  max_concurrent_users: z.number().min(1).max(50000),\n+  max_events_per_second: z.number().min(1).max(50000),\n+  max_bytes_per_second: z.number().min(1).max(10000000),\n+  max_channels_per_client: z.number().min(1).max(10000),\n+  max_joins_per_second: z.number().min(1).max(5000),\n+})\n+\n+export const RealtimeSettings = () => {\n+  const { ref: projectRef } = useParams()\n+  const canUpdateConfig = useCheckPermissions(PermissionAction.REALTIME_ADMIN_READ, '*')\n+\n+  const { data, error, isLoading, isSuccess, isError } = useRealtimeConfigurationQuery({\n+    projectRef,\n+  })\n+  const { mutate: updateRealtimeConfig, isLoading: isUpdatingConfig } =\n+    useRealtimeConfigurationUpdateMutation({\n+      onSuccess: () => {\n+        form.reset(form.getValues())\n+        toast.success('Successfully updated realtime settings')\n+      },\n+    })\n+\n+  const form = useForm<z.infer<typeof FormSchema>>({\n+    resolver: zodResolver(FormSchema),\n+    defaultValues: REALTIME_DEFAULT_CONFIG,\n+  })\n+  const { max_bytes_per_second } = form.watch()\n+\n+  const onSubmit: SubmitHandler<z.infer<typeof FormSchema>> = (data) => {\n+    if (!projectRef) return console.error('Project ref is required')\n+    updateRealtimeConfig({ ref: projectRef, ...data })\n+  }\n+\n+  useEffect(() => {\n+    // [Joshen] Temp typed with any - API typing marks all the properties as nullable,\n+    // but checked with Filipe that they're not supposed to\n+    if (data) form.reset(data as any)\n+  }, [isSuccess])\n+\n+  return (\n+    <ScaffoldSection isFullWidth>\n+      <Form_Shadcn_ {...form}>\n+        <form id={formId} onSubmit={form.handleSubmit(onSubmit)}>\n+          {isError ? (\n+            <AlertError error={error} subject=\"Failed to retrieve realtime settings\" />\n+          ) : (\n+            <Card>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"private_only\"\n+                  render={({ field }) => (\n+                    <FormSection\n+                      className=\"!p-0 !pt-2\"\n+                      header={<FormSectionLabel>Channel restrictions</FormSectionLabel>}\n+                    >\n+                      <FormSectionContent loading={isLoading}>\n+                        <FormItemLayout\n+                          layout=\"flex\"\n+                          label=\"Private channels only\"\n+                          description=\"If this is enabled, only private channels will be allowed\"\n+                        >\n+                          <FormControl_Shadcn_>\n+                            <Switch\n+                              checked={field.value}\n+                              onCheckedChange={field.onChange}\n+                              disabled={!canUpdateConfig}\n+                            />\n+                          </FormControl_Shadcn_>\n+                        </FormItemLayout>\n+                      </FormSectionContent>\n+                    </FormSection>\n+                  )}\n+                />\n+              </CardContent>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"connection_pool\"\n+                  render={({ field }) => (\n+                    <FormSection\n+                      className=\"!p-0 !py-2\"\n+                      header={\n+                        <FormSectionLabel\n+                          description={\n+                            <p className=\"text-foreground-lighter text-sm !mt-1\">\n+                              Sets connection pool size for Realtime Authorization\n+                            </p>\n+                          }\n+                        >\n+                          Connection pool size\n+                        </FormSectionLabel>\n+                      }\n+                    >\n+                      <FormSectionContent loading={isLoading}>\n+                        <FormControl_Shadcn_>\n+                          <Input_Shadcn_\n+                            {...field}\n+                            type=\"number\"\n+                            disabled={!canUpdateConfig}\n+                            value={field.value || ''}\n+                            {...form.register('connection_pool', { valueAsNumber: true })}\n+                          />\n+                        </FormControl_Shadcn_>\n+                      </FormSectionContent>\n+                    </FormSection>\n+                  )}\n+                />\n+              </CardContent>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"max_concurrent_users\"\n+                  render={({ field }) => (\n+                    <FormSection\n+                      className=\"!p-0 !py-2\"\n+                      header={\n+                        <FormSectionLabel\n+                          description={\n+                            <p className=\"text-foreground-lighter text-sm !mt-1\">\n+                              Sets maximum number of concurrent users rate limit\n+                            </p>\n+                          }\n+                        >\n+                          Max concurrent users\n+                        </FormSectionLabel>\n+                      }\n+                    >\n+                      <FormSectionContent loading={isLoading}>\n+                        <FormControl_Shadcn_>\n+                          <Input_Shadcn_\n+                            {...field}\n+                            type=\"number\"\n+                            disabled={!canUpdateConfig}\n+                            value={field.value || ''}\n+                            {...form.register('max_concurrent_users', { valueAsNumber: true })}\n+                          />\n+                        </FormControl_Shadcn_>\n+                      </FormSectionContent>\n+                    </FormSection>\n+                  )}\n+                />\n+              </CardContent>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"max_events_per_second\"\n+                  render={({ field }) => (\n+                    <FormSection\n+                      className=\"!p-0 !py-2\"\n+                      header={\n+                        <FormSectionLabel\n+                          description={\n+                            <p className=\"text-foreground-lighter text-sm !mt-1\">\n+                              Sets maximum number of events per second rate per channel limit\n+                            </p>\n+                          }\n+                        >\n+                          Max events per second\n+                        </FormSectionLabel>\n+                      }\n+                    >\n+                      <FormSectionContent loading={isLoading}>\n+                        <FormControl_Shadcn_>\n+                          <Input_Shadcn_\n+                            {...field}\n+                            type=\"number\"\n+                            disabled={!canUpdateConfig}\n+                            value={field.value || ''}\n+                            {...form.register('max_events_per_second', { valueAsNumber: true })}\n+                          />\n+                        </FormControl_Shadcn_>\n+                      </FormSectionContent>\n+                    </FormSection>\n+                  )}\n+                />\n+              </CardContent>\n+              <CardContent>\n+                <FormField_Shadcn_\n+                  control={form.control}\n+                  name=\"max_bytes_per_second\"\n+                  render={({ field }) => {\n+                    const { value, unit } = convertFromBytes(max_bytes_per_second ?? 0)",
        "comment_created_at": "2025-02-27T08:07:17+00:00",
        "comment_author": "joshenlim",
        "comment_body": "oooh good catch \ud83d\ude4f ",
        "pr_file_module": null
      }
    ]
  }
]