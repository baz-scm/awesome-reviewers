[
  {
    "discussion_id": "2077864232",
    "pr_number": 35107,
    "pr_file": "apps/studio/data/database-indexes/index-create-mutation.ts",
    "created_at": "2025-05-07T15:06:35+00:00",
    "commented_code": "+import { useMutation, UseMutationOptions, useQueryClient } from '@tanstack/react-query'\n+import { toast } from 'sonner'\n+\n+import { executeSql } from 'data/sql/execute-sql-query'\n+import type { ResponseError } from 'types'\n+import { databaseIndexesKeys } from './keys'\n+\n+export type DatabaseIndexCreateVariables = {\n+  projectRef: string\n+  connectionString?: string\n+  payload: {\n+    schema: string\n+    entity: string\n+    type: string\n+    columns: string[]\n+  }\n+}\n+\n+export async function createDatabaseIndex({\n+  projectRef,\n+  connectionString,\n+  payload,\n+}: DatabaseIndexCreateVariables) {\n+  const { schema, entity, type, columns } = payload\n+\n+  const sql = `\n+  CREATE INDEX ON \"${schema}\".\"${entity}\" USING ${type} (${columns",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2077864232",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35107,
        "pr_file": "apps/studio/data/database-indexes/index-create-mutation.ts",
        "discussion_id": "2077864232",
        "commented_code": "@@ -0,0 +1,72 @@\n+import { useMutation, UseMutationOptions, useQueryClient } from '@tanstack/react-query'\n+import { toast } from 'sonner'\n+\n+import { executeSql } from 'data/sql/execute-sql-query'\n+import type { ResponseError } from 'types'\n+import { databaseIndexesKeys } from './keys'\n+\n+export type DatabaseIndexCreateVariables = {\n+  projectRef: string\n+  connectionString?: string\n+  payload: {\n+    schema: string\n+    entity: string\n+    type: string\n+    columns: string[]\n+  }\n+}\n+\n+export async function createDatabaseIndex({\n+  projectRef,\n+  connectionString,\n+  payload,\n+}: DatabaseIndexCreateVariables) {\n+  const { schema, entity, type, columns } = payload\n+\n+  const sql = `\n+  CREATE INDEX ON \"${schema}\".\"${entity}\" USING ${type} (${columns",
        "comment_created_at": "2025-05-07T15:06:35+00:00",
        "comment_author": "sweatybridge",
        "comment_body": "@MildTomato given this edit comes from index advisor, which is typically useful for a busy database, we should consider using `create index concurrently` by default to avoid locking out user's database.\r\n\r\n> When this option is used, PostgreSQL will build the index without taking any locks that prevent concurrent inserts, updates, or deletes on the table; whereas a standard index build locks out writes (but not reads) on the table until it's done. There are several caveats to be aware of when using this option â€” see [Building Indexes Concurrently](https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY) below.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2077917809",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35107,
        "pr_file": "apps/studio/data/database-indexes/index-create-mutation.ts",
        "discussion_id": "2077864232",
        "commented_code": "@@ -0,0 +1,72 @@\n+import { useMutation, UseMutationOptions, useQueryClient } from '@tanstack/react-query'\n+import { toast } from 'sonner'\n+\n+import { executeSql } from 'data/sql/execute-sql-query'\n+import type { ResponseError } from 'types'\n+import { databaseIndexesKeys } from './keys'\n+\n+export type DatabaseIndexCreateVariables = {\n+  projectRef: string\n+  connectionString?: string\n+  payload: {\n+    schema: string\n+    entity: string\n+    type: string\n+    columns: string[]\n+  }\n+}\n+\n+export async function createDatabaseIndex({\n+  projectRef,\n+  connectionString,\n+  payload,\n+}: DatabaseIndexCreateVariables) {\n+  const { schema, entity, type, columns } = payload\n+\n+  const sql = `\n+  CREATE INDEX ON \"${schema}\".\"${entity}\" USING ${type} (${columns",
        "comment_created_at": "2025-05-07T15:25:44+00:00",
        "comment_author": "sweatybridge",
        "comment_body": "created a PR here https://github.com/supabase/supabase/pull/35527",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1959416800",
    "pr_number": 33679,
    "pr_file": "packages/pg-meta/src/pg-meta-roles.ts",
    "created_at": "2025-02-18T09:56:20+00:00",
    "commented_code": "${canLogin === undefined ? '' : canLogin ? 'login' : 'nologin'}\n     ${isReplicationRole === undefined ? '' : isReplicationRole ? 'replication' : 'noreplication'}\n     ${canBypassRls === undefined ? '' : canBypassRls ? 'bypassrls' : 'nobypassrls'}\n-    ${connectionLimit === undefined ? '' : `connection limit ${literal(connectionLimit)}`}\n+    ${connectionLimit === undefined ? '' : `connection limit ${connectionLimit}`}\n     ${password === undefined ? '' : `password ${literal(password)}`}\n-    ${validUntil === undefined ? '' : `valid until ${literal(validUntil)}`}\n-  ', old.rolname));\n+    ${validUntil === undefined ? '' : `valid until %L`}\n+  ', old.name${validUntil === undefined ? '' : `, ${literal(validUntil)}`}));",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "1959416800",
        "repo_full_name": "supabase/supabase",
        "pr_number": 33679,
        "pr_file": "packages/pg-meta/src/pg-meta-roles.ts",
        "discussion_id": "1959416800",
        "commented_code": "@@ -199,18 +192,18 @@ begin\n     ${canLogin === undefined ? '' : canLogin ? 'login' : 'nologin'}\n     ${isReplicationRole === undefined ? '' : isReplicationRole ? 'replication' : 'noreplication'}\n     ${canBypassRls === undefined ? '' : canBypassRls ? 'bypassrls' : 'nobypassrls'}\n-    ${connectionLimit === undefined ? '' : `connection limit ${literal(connectionLimit)}`}\n+    ${connectionLimit === undefined ? '' : `connection limit ${connectionLimit}`}\n     ${password === undefined ? '' : `password ${literal(password)}`}\n-    ${validUntil === undefined ? '' : `valid until ${literal(validUntil)}`}\n-  ', old.rolname));\n+    ${validUntil === undefined ? '' : `valid until %L`}\n+  ', old.name${validUntil === undefined ? '' : `, ${literal(validUntil)}`}));",
        "comment_created_at": "2025-02-18T09:56:20+00:00",
        "comment_author": "avallete",
        "comment_body": "**remark**\r\n\r\nHere had to escape the date value that way to avoid escaping clash between JS and sql within the format string.",
        "pr_file_module": null
      }
    ]
  }
]