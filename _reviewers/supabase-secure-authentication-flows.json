[
  {
    "discussion_id": "1954752295",
    "pr_number": 32997,
    "pr_file": "apps/docs/content/guides/functions/auth.mdx",
    "created_at": "2025-02-13T15:39:24+00:00",
    "commented_code": "const supabaseClient = createClient(\n     Deno.env.get('SUPABASE_URL') ?? '',\n     Deno.env.get('SUPABASE_ANON_KEY') ?? '',\n+    {\n+      global: {\n+        headers: { Authorization: req.headers.get('Authorization')! },",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "1954752295",
        "repo_full_name": "supabase/supabase",
        "pr_number": 32997,
        "pr_file": "apps/docs/content/guides/functions/auth.mdx",
        "discussion_id": "1954752295",
        "commented_code": "@@ -43,6 +48,11 @@ Deno.serve(async (req: Request) => {\n   const supabaseClient = createClient(\n     Deno.env.get('SUPABASE_URL') ?? '',\n     Deno.env.get('SUPABASE_ANON_KEY') ?? '',\n+    {\n+      global: {\n+        headers: { Authorization: req.headers.get('Authorization')! },",
        "comment_created_at": "2025-02-13T15:39:24+00:00",
        "comment_author": "charislam",
        "comment_body": "```suggestion\r\n        headers: { Authorization: req.headers.get('Authorization') },\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2093230340",
    "pr_number": 35650,
    "pr_file": "apps/docs/content/guides/auth/auth-web3.mdx",
    "created_at": "2025-05-16T15:05:55+00:00",
    "commented_code": "+---\n+id: 'auth-web3'\n+title: 'Sign in with Web3'\n+subtitle: 'Use your Web3 wallet to authenticate users with Supabase'\n+---\n+\n+[Enable Sign In with Web3](/dashboard/project/_/auth/providers) to allow users to sign in to your application using only their Web3 wallet.\n+\n+Supported Web3 wallets:\n+\n+- All Solana wallets\n+- Coming soon: All Ethereum wallets\n+\n+## How does it work?\n+\n+Sign in with Web3 utilizes the [EIP 4361](https://eips.ethereum.org/EIPS/eip-4361) standard to authenticate wallet addresses off-chain. This standard was also adopted by Solana ecosystem with some minor differences from Ethereum.\n+\n+Authentication works by asking the Web3 wallet application to sign a predefined message with the user's wallet. This message is parsed both by the Web3 wallet application and Supabase Auth to verify its validity and purpose, before creating a user account or session.\n+\n+The Web3 wallet application uses the information contained in the message to provide the user with a confirmation dialog whether they want to allow sign in with your project.\n+\n+Not all Web3 wallet applications show a dedicated confirmation dialog for these sign in messages. In that case the Web3 wallet shows a traditional message signature confirmation dialog.\n+\n+### Potential for abuse\n+\n+User accounts that sign in with their Web3 wallet will not have an email address or phone number associated with them. This can open your project to abuse as creating a Web3 wallet account is free and easy to automate and difficult to correlate with a real person's identity.\n+\n+Control your project's exposure by setting up [Rate Limits for Web3](/dashboard/project/_/auth/rate-limits).\n+\n+Many wallet applications will warn the user if the message sent for signing is not coming from the page they are currently visiting. To further prevent your Supabase project from receiving signed messages destined for other applications, you will need to register your application's URL using the [Redirect URL settings](/docs/guides/auth/redirect-urls).",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2093230340",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35650,
        "pr_file": "apps/docs/content/guides/auth/auth-web3.mdx",
        "discussion_id": "2093230340",
        "commented_code": "@@ -0,0 +1,140 @@\n+---\n+id: 'auth-web3'\n+title: 'Sign in with Web3'\n+subtitle: 'Use your Web3 wallet to authenticate users with Supabase'\n+---\n+\n+[Enable Sign In with Web3](/dashboard/project/_/auth/providers) to allow users to sign in to your application using only their Web3 wallet.\n+\n+Supported Web3 wallets:\n+\n+- All Solana wallets\n+- Coming soon: All Ethereum wallets\n+\n+## How does it work?\n+\n+Sign in with Web3 utilizes the [EIP 4361](https://eips.ethereum.org/EIPS/eip-4361) standard to authenticate wallet addresses off-chain. This standard was also adopted by Solana ecosystem with some minor differences from Ethereum.\n+\n+Authentication works by asking the Web3 wallet application to sign a predefined message with the user's wallet. This message is parsed both by the Web3 wallet application and Supabase Auth to verify its validity and purpose, before creating a user account or session.\n+\n+The Web3 wallet application uses the information contained in the message to provide the user with a confirmation dialog whether they want to allow sign in with your project.\n+\n+Not all Web3 wallet applications show a dedicated confirmation dialog for these sign in messages. In that case the Web3 wallet shows a traditional message signature confirmation dialog.\n+\n+### Potential for abuse\n+\n+User accounts that sign in with their Web3 wallet will not have an email address or phone number associated with them. This can open your project to abuse as creating a Web3 wallet account is free and easy to automate and difficult to correlate with a real person's identity.\n+\n+Control your project's exposure by setting up [Rate Limits for Web3](/dashboard/project/_/auth/rate-limits).\n+\n+Many wallet applications will warn the user if the message sent for signing is not coming from the page they are currently visiting. To further prevent your Supabase project from receiving signed messages destined for other applications, you will need to register your application's URL using the [Redirect URL settings](/docs/guides/auth/redirect-urls).",
        "comment_created_at": "2025-05-16T15:05:55+00:00",
        "comment_author": "cemalkilic",
        "comment_body": "Redirect URL configuration in Supabase must end with `/` as the auth-js [uses](https://github.com/supabase/auth-js/blob/1bcb76e479e51cd9bca2d7732d0bf3199e07a693/src/GoTrueClient.ts#L667) the default `window.location.href` for the URI value. Also auth server [explicitly](https://github.com/supabase/auth/blob/066c53a36cbcb55f5563fd7dd4b6241a4c5f0919/internal/api/web3.go#L79-L86) checks it.\r\n\r\nI think it's better to explicitly raise this in the docs (I spent a good few minutes on setting up this)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2042564795",
    "pr_number": 34803,
    "pr_file": "apps/ui-library/content/docs/nextjs/social-auth.mdx",
    "created_at": "2025-04-14T17:04:15+00:00",
    "commented_code": "+---\n+title: Social Authentication\n+description: Social authentication block for Next.js\n+---\n+\n+<BlockPreview name=\"social-auth/auth/login\" />\n+<Callout>\n+  The block is using Github provider by default, but can be easily switched by changing a single\n+  parameter.\n+</Callout>\n+\n+## Installation\n+\n+<BlockItem name=\"social-auth-nextjs\" description=\"All needed components for the social auth flow\" />\n+\n+## Folder structure\n+\n+This block includes the [Supabase client](/ui/docs/nextjs/client). When installing, you can skip overwriting it.\n+\n+<RegistryBlock itemName=\"social-auth-nextjs\" />\n+\n+## Usage\n+\n+Once you install the block in your Next.js project, you'll get all the necessary pages and components to set up a social authentication flow.\n+\n+### Getting started\n+\n+First, add a `.env` file to your project with the following environment variables:\n+\n+```env\n+NEXT_PUBLIC_SUPABASE_URL=\n+NEXT_PUBLIC_SUPABASE_ANON_KEY=\n+```\n+\n+- If you're using supabase.com, you can find these values in the [Connect modal](https://supabase.com/dashboard/project/_?showConnect=true) under App Frameworks or in your project's [API settings](https://supabase.com/dashboard/project/_/settings/api).\n+\n+- If you're using a local instance of Supabase, you can find these values by running `supabase start` or `supabase status` (if you already have it running).\n+\n+### Setting up third party providers\n+\n+We support a wide variety of social providers that you can use to integrate with your application. The full list is available [here](https://supabase.com/docs/guides/auth/social-login).\n+The block is using PKCE flow and Github as a provider, but you could easily change it by changing the `provider` field in `supabase.auth.signInWithOAuth` call.",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2042564795",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34803,
        "pr_file": "apps/ui-library/content/docs/nextjs/social-auth.mdx",
        "discussion_id": "2042564795",
        "commented_code": "@@ -0,0 +1,67 @@\n+---\n+title: Social Authentication\n+description: Social authentication block for Next.js\n+---\n+\n+<BlockPreview name=\"social-auth/auth/login\" />\n+<Callout>\n+  The block is using Github provider by default, but can be easily switched by changing a single\n+  parameter.\n+</Callout>\n+\n+## Installation\n+\n+<BlockItem name=\"social-auth-nextjs\" description=\"All needed components for the social auth flow\" />\n+\n+## Folder structure\n+\n+This block includes the [Supabase client](/ui/docs/nextjs/client). When installing, you can skip overwriting it.\n+\n+<RegistryBlock itemName=\"social-auth-nextjs\" />\n+\n+## Usage\n+\n+Once you install the block in your Next.js project, you'll get all the necessary pages and components to set up a social authentication flow.\n+\n+### Getting started\n+\n+First, add a `.env` file to your project with the following environment variables:\n+\n+```env\n+NEXT_PUBLIC_SUPABASE_URL=\n+NEXT_PUBLIC_SUPABASE_ANON_KEY=\n+```\n+\n+- If you're using supabase.com, you can find these values in the [Connect modal](https://supabase.com/dashboard/project/_?showConnect=true) under App Frameworks or in your project's [API settings](https://supabase.com/dashboard/project/_/settings/api).\n+\n+- If you're using a local instance of Supabase, you can find these values by running `supabase start` or `supabase status` (if you already have it running).\n+\n+### Setting up third party providers\n+\n+We support a wide variety of social providers that you can use to integrate with your application. The full list is available [here](https://supabase.com/docs/guides/auth/social-login).\n+The block is using PKCE flow and Github as a provider, but you could easily change it by changing the `provider` field in `supabase.auth.signInWithOAuth` call.",
        "comment_created_at": "2025-04-14T17:04:15+00:00",
        "comment_author": "saltcod",
        "comment_body": "Enable the provider you want to use under [Auth Providers](https://supabase.com/dashboard/project/nviyjbgwadmkjigqlkwp/auth/providers) in the Supabase Dashboard and add the necessary credentials.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2046500025",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34803,
        "pr_file": "apps/ui-library/content/docs/nextjs/social-auth.mdx",
        "discussion_id": "2042564795",
        "commented_code": "@@ -0,0 +1,67 @@\n+---\n+title: Social Authentication\n+description: Social authentication block for Next.js\n+---\n+\n+<BlockPreview name=\"social-auth/auth/login\" />\n+<Callout>\n+  The block is using Github provider by default, but can be easily switched by changing a single\n+  parameter.\n+</Callout>\n+\n+## Installation\n+\n+<BlockItem name=\"social-auth-nextjs\" description=\"All needed components for the social auth flow\" />\n+\n+## Folder structure\n+\n+This block includes the [Supabase client](/ui/docs/nextjs/client). When installing, you can skip overwriting it.\n+\n+<RegistryBlock itemName=\"social-auth-nextjs\" />\n+\n+## Usage\n+\n+Once you install the block in your Next.js project, you'll get all the necessary pages and components to set up a social authentication flow.\n+\n+### Getting started\n+\n+First, add a `.env` file to your project with the following environment variables:\n+\n+```env\n+NEXT_PUBLIC_SUPABASE_URL=\n+NEXT_PUBLIC_SUPABASE_ANON_KEY=\n+```\n+\n+- If you're using supabase.com, you can find these values in the [Connect modal](https://supabase.com/dashboard/project/_?showConnect=true) under App Frameworks or in your project's [API settings](https://supabase.com/dashboard/project/_/settings/api).\n+\n+- If you're using a local instance of Supabase, you can find these values by running `supabase start` or `supabase status` (if you already have it running).\n+\n+### Setting up third party providers\n+\n+We support a wide variety of social providers that you can use to integrate with your application. The full list is available [here](https://supabase.com/docs/guides/auth/social-login).\n+The block is using PKCE flow and Github as a provider, but you could easily change it by changing the `provider` field in `supabase.auth.signInWithOAuth` call.",
        "comment_created_at": "2025-04-16T09:24:17+00:00",
        "comment_author": "ivasilov",
        "comment_body": "Fixed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2014809388",
    "pr_number": 34439,
    "pr_file": "apps/docs/content/guides/auth/third-party/clerk.mdx",
    "created_at": "2025-03-26T18:44:48+00:00",
    "commented_code": "+---\n+id: 'auth-third-party-clerk'\n+title: 'Clerk'\n+subtitle: 'Use Clerk with your Supabase project'\n+---\n+\n+Clerk can be used as a third-party authentication provider alongside Supabase Auth, or standalone, with your Supabase project.\n+\n+## Getting started\n+\n+Getting started is incredibly easy. Start off by visiting [Clerk's Connect with Supabase page](https://dashboard.clerk.com/setup/supabase) to configure your Clerk instance for Supabase compatibility.\n+\n+Finally add a [new Third-Party Auth integration with Clerk](/dashboard/project/_/auth/third-party) in the Supabase dashboard.\n+\n+### Setting up the Supabase CLI\n+\n+In the CLI add the following config to your `supabase/config.toml` file:\n+\n+```toml\n+[auth.third_party.clerk]\n+enabled = true\n+domain = \"example.clerk.accounts.dev\"\n+```\n+\n+### Manually configuring your Clerk instance\n+\n+If you are not able to use [Clerk's Connect with Supabase page](https://dashboard.clerk.com/setup/supabase) to easily configure your Clerk instance for working with Supabase, follow these steps.\n+\n+All Clerk [session tokens](https://clerk.com/docs/backend-requests/resources/session-tokens) you send to Supabase must contain a `role` claim. End-users who are authenticated should have the `authenticated` value. In some cases you may wish to change the role to match your advanced Postgres setup.\n+\n+Follow Clerk's guide on [customizing the session token](https://clerk.com/docs/backend-requests/custom-session-token) to add or modify the `role` claim based on your project's needs.\n+\n+Once all Clerk session tokens for your instance contain the `role` claim, add a [new Third-Party Auth integration with Clerk](/dashboard/project/_/auth/third-party) in the Supabase dashboard or register it in the CLI as instructed above.\n+\n+## Setup the Supabase client library\n+\n+<Tabs type=\"underlined\" queryGroup=\"clerk-create-client\">\n+\n+<TabPanel id=\"ts\" label=\"TypeScript\">\n+\n+```typescript\n+import { createClient } from '@supabase/supabase-js'\n+\n+const supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {\n+  accessToken: () => {\n+    return Clerk.session?.getToken()\n+  },\n+})\n+```\n+\n+</TabPanel>\n+\n+<TabPanel id=\"dart\" label=\"Flutter\">\n+\n+```dart\n+import 'package:clerk_flutter/clerk_flutter.dart';\n+import 'package:supabase_flutter/supabase_flutter.dart';\n+...\n+\n+await Supabase.initialize(\n+  url: 'SUPABASE_URL',\n+  anonKey: 'SUPABASE_ANON_KEY',\n+  accessToken: () async {\n+    final token = await ClerkAuth.of(context).sessionToken();\n+    return token.jwt;\n+  },\n+);\n+```\n+\n+</TabPanel>\n+\n+<TabPanel id=\"swift\" label=\"Swift (iOS)\">\n+\n+```swift\n+import Clerk\n+import Supabase\n+\n+let supabase = SupabaseClient(\n+  supabaseURL: URL(string: \"https://project-ref.supabase.io\")!,\n+  supabaseKey: \"supabase.anon.key\",\n+  options: SupabaseClientOptions(\n+    auth: SupabaseClientOptions.AuthOptions(\n+      accessToken: {\n+        try await Clerk.shared.session?.getToken()?.jwt\n+      }\n+    )\n+  )\n+)\n+```\n+\n+</TabPanel>\n+\n+</Tabs>\n+\n+## Using RLS policies\n+\n+Once you've configured the Supabase client library to use Clerk session tokens, you can use RLS policies to secure access to your project's database, Storage objects and Realtime channels.\n+\n+The recommended way to design RLS policies with Clerk is to use claims present in your Clerk session token to allow or reject access to your project's data. Check [Clerk's docs](https://clerk.com/docs/backend-requests/resources/session-tokens) on the available JWT claims and their values.\n+\n+### Example: Check user organization role\n+\n+```sql\n+create policy \"Only organization admins can insert in table\"\n+  on table_name\n+  to authenticated\n+  with check (\n+    (auth.jwt()->>'org_role' = 'org:admin')\n+      and\n+    (organization_id = auth.jwt()->>'org_id')\n+  );\n+```\n+\n+This RLS policy checks that the newly inserted row in the table has the user's declared organization ID (from the `org_id` session token claim) in the `organization_id` column. Additionally it ensures that they're an `org:admin`.\n+\n+This way only organization admins can add rows to the table, for organizations they're a member of.\n+\n+### Example: Check user has passed second factor verification\n+\n+```sql\n+create policy \"Only users that have passed second factor verification can read from table\"\n+  on table_name\n+  as restrictive\n+  to authenticated\n+  using (\n+    (auth.jwt()->'fva'->>1 != '-1')\n+  );\n+```\n+\n+This example uses a restrictive RLS policy checks that the second factor verification age element in the `fva` claim is not `'-1'` indicating the user has passed through second factor verification.\n+\n+## Deprecated integration with JWT templates\n+\n+As of 1st April 2025 the previously available [Clerk Integration with Supabase](https://supabase.com/partners/integrations/clerk) is considered deprecated and is no longer recommended for use. Additionally all projects using this integration will not be charged for Third-Party Monthly Active Users (TP-MAU) until at least 1st January 2026.\n+\n+As this integration used low-level primitives in Supabase and Clerk such as a [configurable JWT secret](/dashboard/project/_/settings/api) and [JWT templates from Clerk](https://clerk.com/docs/backend-requests/jwt-templates) you are free to continue using it in an unofficial manner. Some limited support will remain to be offered.\n+\n+Here's the main reasons why this integration is being deprecated:",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2014809388",
        "repo_full_name": "supabase/supabase",
        "pr_number": 34439,
        "pr_file": "apps/docs/content/guides/auth/third-party/clerk.mdx",
        "discussion_id": "2014809388",
        "commented_code": "@@ -0,0 +1,142 @@\n+---\n+id: 'auth-third-party-clerk'\n+title: 'Clerk'\n+subtitle: 'Use Clerk with your Supabase project'\n+---\n+\n+Clerk can be used as a third-party authentication provider alongside Supabase Auth, or standalone, with your Supabase project.\n+\n+## Getting started\n+\n+Getting started is incredibly easy. Start off by visiting [Clerk's Connect with Supabase page](https://dashboard.clerk.com/setup/supabase) to configure your Clerk instance for Supabase compatibility.\n+\n+Finally add a [new Third-Party Auth integration with Clerk](/dashboard/project/_/auth/third-party) in the Supabase dashboard.\n+\n+### Setting up the Supabase CLI\n+\n+In the CLI add the following config to your `supabase/config.toml` file:\n+\n+```toml\n+[auth.third_party.clerk]\n+enabled = true\n+domain = \"example.clerk.accounts.dev\"\n+```\n+\n+### Manually configuring your Clerk instance\n+\n+If you are not able to use [Clerk's Connect with Supabase page](https://dashboard.clerk.com/setup/supabase) to easily configure your Clerk instance for working with Supabase, follow these steps.\n+\n+All Clerk [session tokens](https://clerk.com/docs/backend-requests/resources/session-tokens) you send to Supabase must contain a `role` claim. End-users who are authenticated should have the `authenticated` value. In some cases you may wish to change the role to match your advanced Postgres setup.\n+\n+Follow Clerk's guide on [customizing the session token](https://clerk.com/docs/backend-requests/custom-session-token) to add or modify the `role` claim based on your project's needs.\n+\n+Once all Clerk session tokens for your instance contain the `role` claim, add a [new Third-Party Auth integration with Clerk](/dashboard/project/_/auth/third-party) in the Supabase dashboard or register it in the CLI as instructed above.\n+\n+## Setup the Supabase client library\n+\n+<Tabs type=\"underlined\" queryGroup=\"clerk-create-client\">\n+\n+<TabPanel id=\"ts\" label=\"TypeScript\">\n+\n+```typescript\n+import { createClient } from '@supabase/supabase-js'\n+\n+const supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {\n+  accessToken: () => {\n+    return Clerk.session?.getToken()\n+  },\n+})\n+```\n+\n+</TabPanel>\n+\n+<TabPanel id=\"dart\" label=\"Flutter\">\n+\n+```dart\n+import 'package:clerk_flutter/clerk_flutter.dart';\n+import 'package:supabase_flutter/supabase_flutter.dart';\n+...\n+\n+await Supabase.initialize(\n+  url: 'SUPABASE_URL',\n+  anonKey: 'SUPABASE_ANON_KEY',\n+  accessToken: () async {\n+    final token = await ClerkAuth.of(context).sessionToken();\n+    return token.jwt;\n+  },\n+);\n+```\n+\n+</TabPanel>\n+\n+<TabPanel id=\"swift\" label=\"Swift (iOS)\">\n+\n+```swift\n+import Clerk\n+import Supabase\n+\n+let supabase = SupabaseClient(\n+  supabaseURL: URL(string: \"https://project-ref.supabase.io\")!,\n+  supabaseKey: \"supabase.anon.key\",\n+  options: SupabaseClientOptions(\n+    auth: SupabaseClientOptions.AuthOptions(\n+      accessToken: {\n+        try await Clerk.shared.session?.getToken()?.jwt\n+      }\n+    )\n+  )\n+)\n+```\n+\n+</TabPanel>\n+\n+</Tabs>\n+\n+## Using RLS policies\n+\n+Once you've configured the Supabase client library to use Clerk session tokens, you can use RLS policies to secure access to your project's database, Storage objects and Realtime channels.\n+\n+The recommended way to design RLS policies with Clerk is to use claims present in your Clerk session token to allow or reject access to your project's data. Check [Clerk's docs](https://clerk.com/docs/backend-requests/resources/session-tokens) on the available JWT claims and their values.\n+\n+### Example: Check user organization role\n+\n+```sql\n+create policy \"Only organization admins can insert in table\"\n+  on table_name\n+  to authenticated\n+  with check (\n+    (auth.jwt()->>'org_role' = 'org:admin')\n+      and\n+    (organization_id = auth.jwt()->>'org_id')\n+  );\n+```\n+\n+This RLS policy checks that the newly inserted row in the table has the user's declared organization ID (from the `org_id` session token claim) in the `organization_id` column. Additionally it ensures that they're an `org:admin`.\n+\n+This way only organization admins can add rows to the table, for organizations they're a member of.\n+\n+### Example: Check user has passed second factor verification\n+\n+```sql\n+create policy \"Only users that have passed second factor verification can read from table\"\n+  on table_name\n+  as restrictive\n+  to authenticated\n+  using (\n+    (auth.jwt()->'fva'->>1 != '-1')\n+  );\n+```\n+\n+This example uses a restrictive RLS policy checks that the second factor verification age element in the `fva` claim is not `'-1'` indicating the user has passed through second factor verification.\n+\n+## Deprecated integration with JWT templates\n+\n+As of 1st April 2025 the previously available [Clerk Integration with Supabase](https://supabase.com/partners/integrations/clerk) is considered deprecated and is no longer recommended for use. Additionally all projects using this integration will not be charged for Third-Party Monthly Active Users (TP-MAU) until at least 1st January 2026.\n+\n+As this integration used low-level primitives in Supabase and Clerk such as a [configurable JWT secret](/dashboard/project/_/settings/api) and [JWT templates from Clerk](https://clerk.com/docs/backend-requests/jwt-templates) you are free to continue using it in an unofficial manner. Some limited support will remain to be offered.\n+\n+Here's the main reasons why this integration is being deprecated:",
        "comment_created_at": "2025-03-26T18:44:48+00:00",
        "comment_author": "charislam",
        "comment_body": "```suggestion\r\nThis integration used low-level primitives that are still available in Supabase and Clerk, such as a [configurable JWT secret](/dashboard/project/_/settings/api) and [JWT templates from Clerk](https://clerk.com/docs/backend-requests/jwt-templates). This enables you to keep using it in an unofficial manner, though only limited support will be offered.\r\n\r\nThe integration is being deprecated for the following reasons:\r\n```",
        "pr_file_module": null
      }
    ]
  }
]