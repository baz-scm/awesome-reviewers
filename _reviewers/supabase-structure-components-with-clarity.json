[
  {
    "discussion_id": "2225354668",
    "pr_number": 37258,
    "pr_file": "apps/studio/components/interfaces/Integrations/Vault/Secrets/SecretsManagement.tsx",
    "created_at": "2025-07-23T12:05:05+00:00",
    "commented_code": "</div>\n       </div>\n \n-      <EditSecretModal\n-        selectedSecret={selectedSecretToEdit}\n-        onClose={() => setSelectedSecretToEdit(undefined)}\n-      />\n       <DeleteSecretModal\n         selectedSecret={selectedSecretToRemove}\n         onClose={() => setSelectedSecretToRemove(undefined)}",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2225354668",
        "repo_full_name": "supabase/supabase",
        "pr_number": 37258,
        "pr_file": "apps/studio/components/interfaces/Integrations/Vault/Secrets/SecretsManagement.tsx",
        "discussion_id": "2225354668",
        "commented_code": "@@ -167,10 +165,6 @@ export const SecretsManagement = () => {\n         </div>\n       </div>\n \n-      <EditSecretModal\n-        selectedSecret={selectedSecretToEdit}\n-        onClose={() => setSelectedSecretToEdit(undefined)}\n-      />\n       <DeleteSecretModal\n         selectedSecret={selectedSecretToRemove}\n         onClose={() => setSelectedSecretToRemove(undefined)}",
        "comment_created_at": "2025-07-23T12:05:05+00:00",
        "comment_author": "Saeris",
        "comment_body": "both of these get moved into `SecretRow` because it doesn't really make sense to have this awkward sibling relationship where the dialog trigger is nested, causing state management in the parent. I think it's the kind of wonky coupling of components that we'd want to avoid",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2224670492",
    "pr_number": 36972,
    "pr_file": "apps/studio/components/interfaces/Account/__tests__/NewAccessTokenButton.test.tsx",
    "created_at": "2025-07-23T07:30:50+00:00",
    "commented_code": null,
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2224670492",
        "repo_full_name": "supabase/supabase",
        "pr_number": 36972,
        "pr_file": "apps/studio/components/interfaces/Account/__tests__/NewAccessTokenButton.test.tsx",
        "discussion_id": "2224670492",
        "commented_code": null,
        "comment_created_at": "2025-07-23T07:30:50+00:00",
        "comment_author": "joshenlim",
        "comment_body": "generally don't need to create a separate folder for tests - we typically just keep test files beside where their component is\r\n\r\nso having this in components/interfaces/Account/NewAccessTokenButton.test.tsx is okay",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2203788760",
    "pr_number": 37080,
    "pr_file": "apps/studio/pages/project/[ref]/branches/merge-requests.tsx",
    "created_at": "2025-07-14T03:36:23+00:00",
    "commented_code": ")\n }\n \n-MergeRequestsPage.getLayout = (page) => {\n-  const MergeRequestsPageWrapper = () => {\n-    const router = useRouter()\n-    const { ref } = useParams()\n-    const project = useSelectedProject()\n-    const gitlessBranching = useFlag('gitlessBranching')\n-    const isBranch = project?.parent_project_ref !== undefined\n-    const projectRef =\n-      project !== undefined ? (isBranch ? project.parent_project_ref : ref) : undefined\n-    const { data: branches } = useBranchesQuery({ projectRef })\n-    const previewBranches = (branches || []).filter((b) => !b.is_default)\n-    const { mutate: updateBranch, isLoading: isUpdating } = useBranchUpdateMutation({\n-      onError: () => {\n-        toast.error(`Failed to update the branch`)\n-      },\n-    })\n-    const handleMarkBranchForReview = (branch: Branch) => {\n-      if (branch.id && projectRef) {\n-        updateBranch(\n-          {\n-            id: branch.id,\n-            projectRef,\n-            requestReview: true,\n+const MergeRequestsPageWrapper = ({ children }: PropsWithChildren<{}>) => {",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2203788760",
        "repo_full_name": "supabase/supabase",
        "pr_number": 37080,
        "pr_file": "apps/studio/pages/project/[ref]/branches/merge-requests.tsx",
        "discussion_id": "2203788760",
        "commented_code": "@@ -323,77 +326,84 @@ const MergeRequestsPage: NextPageWithLayout = () => {\n   )\n }\n \n-MergeRequestsPage.getLayout = (page) => {\n-  const MergeRequestsPageWrapper = () => {\n-    const router = useRouter()\n-    const { ref } = useParams()\n-    const project = useSelectedProject()\n-    const gitlessBranching = useFlag('gitlessBranching')\n-    const isBranch = project?.parent_project_ref !== undefined\n-    const projectRef =\n-      project !== undefined ? (isBranch ? project.parent_project_ref : ref) : undefined\n-    const { data: branches } = useBranchesQuery({ projectRef })\n-    const previewBranches = (branches || []).filter((b) => !b.is_default)\n-    const { mutate: updateBranch, isLoading: isUpdating } = useBranchUpdateMutation({\n-      onError: () => {\n-        toast.error(`Failed to update the branch`)\n-      },\n-    })\n-    const handleMarkBranchForReview = (branch: Branch) => {\n-      if (branch.id && projectRef) {\n-        updateBranch(\n-          {\n-            id: branch.id,\n-            projectRef,\n-            requestReview: true,\n+const MergeRequestsPageWrapper = ({ children }: PropsWithChildren<{}>) => {",
        "comment_created_at": "2025-07-14T03:36:23+00:00",
        "comment_author": "joshenlim",
        "comment_body": "just shifting this outside - ideally we don't declare components within components",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2092768757",
    "pr_number": 35318,
    "pr_file": "apps/studio/components/ui/AIAssistantPanel/DisplayBlockRenderer.tsx",
    "created_at": "2025-05-16T10:13:46+00:00",
    "commented_code": "+import React, { useState, useMemo, DragEvent } from 'react'\n+import { useRouter } from 'next/router'\n+import { MessagePart } from '@ai-sdk/react' // Assuming this type is needed\n+\n+import { QueryBlock, DEFAULT_CHART_CONFIG } from '../QueryBlock/QueryBlock'\n+import { ChartConfig } from 'components/interfaces/SQLEditor/UtilityPanel/ChartConfig'\n+import { useAiAssistantStateSnapshot } from 'state/ai-assistant-state'\n+import { findResultForManualId } from './Message.utils' // We'll move the helper here or import\n+import { useCheckPermissions } from 'hooks/misc/useCheckPermissions'\n+import { useFlag } from 'hooks/ui/useFlag'\n+import { useProfile } from 'lib/profile'\n+import { useSendEventMutation } from 'data/telemetry/send-event-mutation'\n+import { PermissionAction } from '@supabase/shared-types/out/constants'\n+import { identifyQueryType } from './AIAssistant.utils'\n+\n+interface DisplayBlockRendererProps {\n+  messageId: string\n+  manualId: string\n+  initialArgs: {\n+    // Args specific to this displayBlock invocation\n+    sql: string\n+    label?: string\n+    view?: 'table' | 'chart'\n+    xAxis?: string\n+    yAxis?: string\n+  }\n+  messageParts: Readonly<MessagePart[]> | undefined\n+  isLoading: boolean\n+  onResults: (args: { messageId: string; resultId?: string; results: any[] }) => void\n+}\n+\n+export const DisplayBlockRenderer: React.FC<DisplayBlockRendererProps> = ({",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2092768757",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35318,
        "pr_file": "apps/studio/components/ui/AIAssistantPanel/DisplayBlockRenderer.tsx",
        "discussion_id": "2092768757",
        "commented_code": "@@ -0,0 +1,119 @@\n+import React, { useState, useMemo, DragEvent } from 'react'\n+import { useRouter } from 'next/router'\n+import { MessagePart } from '@ai-sdk/react' // Assuming this type is needed\n+\n+import { QueryBlock, DEFAULT_CHART_CONFIG } from '../QueryBlock/QueryBlock'\n+import { ChartConfig } from 'components/interfaces/SQLEditor/UtilityPanel/ChartConfig'\n+import { useAiAssistantStateSnapshot } from 'state/ai-assistant-state'\n+import { findResultForManualId } from './Message.utils' // We'll move the helper here or import\n+import { useCheckPermissions } from 'hooks/misc/useCheckPermissions'\n+import { useFlag } from 'hooks/ui/useFlag'\n+import { useProfile } from 'lib/profile'\n+import { useSendEventMutation } from 'data/telemetry/send-event-mutation'\n+import { PermissionAction } from '@supabase/shared-types/out/constants'\n+import { identifyQueryType } from './AIAssistant.utils'\n+\n+interface DisplayBlockRendererProps {\n+  messageId: string\n+  manualId: string\n+  initialArgs: {\n+    // Args specific to this displayBlock invocation\n+    sql: string\n+    label?: string\n+    view?: 'table' | 'chart'\n+    xAxis?: string\n+    yAxis?: string\n+  }\n+  messageParts: Readonly<MessagePart[]> | undefined\n+  isLoading: boolean\n+  onResults: (args: { messageId: string; resultId?: string; results: any[] }) => void\n+}\n+\n+export const DisplayBlockRenderer: React.FC<DisplayBlockRendererProps> = ({",
        "comment_created_at": "2025-05-16T10:13:46+00:00",
        "comment_author": "joshenlim",
        "comment_body": "avoid using `FC` - replace with `PropsWithChildren`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2065844577",
    "pr_number": 35138,
    "pr_file": "apps/studio/components/grid/components/header/Header.tsx",
    "created_at": "2025-04-29T09:03:00+00:00",
    "commented_code": "customHeader: ReactNode\n }\n \n-const Header = ({ sorts, filters, customHeader }: HeaderProps) => {\n+const Header = ({ sorts: sortsProp, filters: filtersProp, customHeader }: HeaderProps) => {\n   const snap = useTableEditorTableStateSnapshot()\n \n+  const filters = filtersProp",
    "repo_full_name": "supabase/supabase",
    "discussion_comments": [
      {
        "comment_id": "2065844577",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35138,
        "pr_file": "apps/studio/components/grid/components/header/Header.tsx",
        "discussion_id": "2065844577",
        "commented_code": "@@ -63,9 +57,12 @@ export type HeaderProps = {\n   customHeader: ReactNode\n }\n \n-const Header = ({ sorts, filters, customHeader }: HeaderProps) => {\n+const Header = ({ sorts: sortsProp, filters: filtersProp, customHeader }: HeaderProps) => {\n   const snap = useTableEditorTableStateSnapshot()\n \n+  const filters = filtersProp",
        "comment_created_at": "2025-04-29T09:03:00+00:00",
        "comment_author": "joshenlim",
        "comment_body": "nit: seems unnecessary? can just name the incoming props `sorts` and `filters` (will clean this up)",
        "pr_file_module": null
      },
      {
        "comment_id": "2065846650",
        "repo_full_name": "supabase/supabase",
        "pr_number": 35138,
        "pr_file": "apps/studio/components/grid/components/header/Header.tsx",
        "discussion_id": "2065844577",
        "commented_code": "@@ -63,9 +57,12 @@ export type HeaderProps = {\n   customHeader: ReactNode\n }\n \n-const Header = ({ sorts, filters, customHeader }: HeaderProps) => {\n+const Header = ({ sorts: sortsProp, filters: filtersProp, customHeader }: HeaderProps) => {\n   const snap = useTableEditorTableStateSnapshot()\n \n+  const filters = filtersProp",
        "comment_created_at": "2025-04-29T09:03:45+00:00",
        "comment_author": "joshenlim",
        "comment_body": "actually can't we just use the hooks instead of passing them as props? \r\n\r\ncan probably avoid prop drilling here - RowHeader can just retrieve the sorts and filters from the respective hooks (will clean this up)",
        "pr_file_module": null
      }
    ]
  }
]