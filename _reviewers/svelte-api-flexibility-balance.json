[
  {
    "discussion_id": "2223810280",
    "pr_number": 16477,
    "pr_file": "packages/svelte/src/internal/client/reactivity/deriveds.js",
    "created_at": "2025-07-22T20:55:02+00:00",
    "commented_code": "return value;\n }\n \n+// in process_effects if state is written to in a user effect we reschedule the rest of the\n+// tree. However if a derived is updated in an effect we also increase the write version\n+// so we need to keep track of how many deriveds were written to in the effect so\n+// that we can subtract that from the write version before rescheduling unnnecessarily\n+let derived_writes = 0;\n+\n+export function get_derived_writes() {\n+\treturn derived_writes;\n+}",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "2223810280",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 16477,
        "pr_file": "packages/svelte/src/internal/client/reactivity/deriveds.js",
        "discussion_id": "2223810280",
        "commented_code": "@@ -323,6 +323,20 @@ export function execute_derived(derived) {\n \treturn value;\n }\n \n+// in process_effects if state is written to in a user effect we reschedule the rest of the\n+// tree. However if a derived is updated in an effect we also increase the write version\n+// so we need to keep track of how many deriveds were written to in the effect so\n+// that we can subtract that from the write version before rescheduling unnnecessarily\n+let derived_writes = 0;\n+\n+export function get_derived_writes() {\n+\treturn derived_writes;\n+}",
        "comment_created_at": "2025-07-22T20:55:02+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "FWIW we don't need to expose function wrappers to get values from different modules, only to set them. we can just `export let derived_writes`",
        "pr_file_module": null
      },
      {
        "comment_id": "2223828225",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 16477,
        "pr_file": "packages/svelte/src/internal/client/reactivity/deriveds.js",
        "discussion_id": "2223810280",
        "commented_code": "@@ -323,6 +323,20 @@ export function execute_derived(derived) {\n \treturn value;\n }\n \n+// in process_effects if state is written to in a user effect we reschedule the rest of the\n+// tree. However if a derived is updated in an effect we also increase the write version\n+// so we need to keep track of how many deriveds were written to in the effect so\n+// that we can subtract that from the write version before rescheduling unnnecessarily\n+let derived_writes = 0;\n+\n+export function get_derived_writes() {\n+\treturn derived_writes;\n+}",
        "comment_created_at": "2025-07-22T21:05:53+00:00",
        "comment_author": "paoloricciuti",
        "comment_body": "I'm always so skeptical of live exports...like under my skin I know they works but I just can't trust myself enough to do it \ud83d\ude02",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1859182908",
    "pr_number": 14397,
    "pr_file": "packages/svelte/src/internal/server/index.js",
    "created_at": "2024-11-26T20:24:14+00:00",
    "commented_code": "return {\n \t\thead,\n \t\thtml: payload.out,\n-\t\tbody: payload.out\n+\t\tbody: payload.out,\n+\t\thtmlAttributes: [...payload.htmlAttributes]\n+\t\t\t.map(([name, value]) => `${name}=\"${value}\"`)\n+\t\t\t.join(' ')",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1859182908",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14397,
        "pr_file": "packages/svelte/src/internal/server/index.js",
        "discussion_id": "1859182908",
        "commented_code": "@@ -138,7 +144,10 @@ export function render(component, options = {}) {\n \treturn {\n \t\thead,\n \t\thtml: payload.out,\n-\t\tbody: payload.out\n+\t\tbody: payload.out,\n+\t\thtmlAttributes: [...payload.htmlAttributes]\n+\t\t\t.map(([name, value]) => `${name}=\"${value}\"`)\n+\t\t\t.join(' ')",
        "comment_created_at": "2024-11-26T20:24:14+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "Someone might have an existing classname in their HTML template, in which case giving them a string would make it awkward to combine stuff. Should we return an object instead of a string, so that they have more flexibility?",
        "pr_file_module": null
      },
      {
        "comment_id": "1859185833",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14397,
        "pr_file": "packages/svelte/src/internal/server/index.js",
        "discussion_id": "1859182908",
        "commented_code": "@@ -138,7 +144,10 @@ export function render(component, options = {}) {\n \treturn {\n \t\thead,\n \t\thtml: payload.out,\n-\t\tbody: payload.out\n+\t\tbody: payload.out,\n+\t\thtmlAttributes: [...payload.htmlAttributes]\n+\t\t\t.map(([name, value]) => `${name}=\"${value}\"`)\n+\t\t\t.join(' ')",
        "comment_created_at": "2024-11-26T20:27:11+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "I briefly thought about that but it seemed unnecessary - in which case would you have existing attributes on a html tag but in such a way that you know which ones to then merge them in some way? Even if, the regex for adjusting the html attributes string would be straightforward. So I opted for making the simple case more ergonomic.\r\n\r\nIt _is_ an interesting question for SvelteKit specifically though, which currently sets `lang=\"en\"` in `app.html` by default. What would we do here? (regardless of whether we return a string or an object). The easiest would be to have `lang=\"en\"` after the string and rely on browser being forgiving about it (they ignore duplicate attributes) / the user removing it in case they set it themselves in `<svelte:html>`",
        "pr_file_module": null
      },
      {
        "comment_id": "1859251760",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14397,
        "pr_file": "packages/svelte/src/internal/server/index.js",
        "discussion_id": "1859182908",
        "commented_code": "@@ -138,7 +144,10 @@ export function render(component, options = {}) {\n \treturn {\n \t\thead,\n \t\thtml: payload.out,\n-\t\tbody: payload.out\n+\t\tbody: payload.out,\n+\t\thtmlAttributes: [...payload.htmlAttributes]\n+\t\t\t.map(([name, value]) => `${name}=\"${value}\"`)\n+\t\t\t.join(' ')",
        "comment_created_at": "2024-11-26T21:29:58+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "it only really matters for new projects, I think, since we can't retroactively add `%htmlAttributes%` anyway. I think we just replace `lang=\"en\"` with `%htmlAttributes%` in the template project's `app.html`, and add this to the root layout:\r\n\r\n```svelte\r\n<svelte:html lang=\"en\" />\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1835780822",
    "pr_number": 14249,
    "pr_file": "packages/svelte/src/compiler/phases/3-transform/client/visitors/shared/fragment.js",
    "created_at": "2024-11-10T20:55:34+00:00",
    "commented_code": "return false;\n \t\t}\n \n-\t\tif (node.name.includes('-')) {\n-\t\t\treturn false; // we're setting all attributes on custom elements through properties\n+\t\tif (\n+\t\t\tattribute.value !== true &&\n+\t\t\t!is_text_attribute(attribute) &&\n+\t\t\t// if the attribute is not a text attribute but is inlinable we will directly inline it in the\n+\t\t\t// the template so if it's not inlinable we can return false but if it is inlinable (or a text)\n+\t\t\t// attribute we keep count of the inlinable attributes so that if all the attributes are inlinable\n+\t\t\t// we deem the node as static\n+\t\t\t!is_inlinable_expression(\n+\t\t\t\tArray.isArray(attribute.value) ? attribute.value : [attribute.value],",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1835780822",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14249,
        "pr_file": "packages/svelte/src/compiler/phases/3-transform/client/visitors/shared/fragment.js",
        "discussion_id": "1835780822",
        "commented_code": "@@ -155,8 +154,19 @@ function is_static_element(node) {\n \t\t\treturn false;\n \t\t}\n \n-\t\tif (node.name.includes('-')) {\n-\t\t\treturn false; // we're setting all attributes on custom elements through properties\n+\t\tif (\n+\t\t\tattribute.value !== true &&\n+\t\t\t!is_text_attribute(attribute) &&\n+\t\t\t// if the attribute is not a text attribute but is inlinable we will directly inline it in the\n+\t\t\t// the template so if it's not inlinable we can return false but if it is inlinable (or a text)\n+\t\t\t// attribute we keep count of the inlinable attributes so that if all the attributes are inlinable\n+\t\t\t// we deem the node as static\n+\t\t\t!is_inlinable_expression(\n+\t\t\t\tArray.isArray(attribute.value) ? attribute.value : [attribute.value],",
        "comment_created_at": "2024-11-10T20:55:34+00:00",
        "comment_author": "benmccann",
        "comment_body": "I wonder if the method should take `Node | Node[]` so that we can just pass `attribute.value` rather than having to do `Array.isArray(attribute.value) ? attribute.value : [attribute.value]` both places we call it",
        "pr_file_module": null
      },
      {
        "comment_id": "1835783859",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14249,
        "pr_file": "packages/svelte/src/compiler/phases/3-transform/client/visitors/shared/fragment.js",
        "discussion_id": "1835780822",
        "commented_code": "@@ -155,8 +154,19 @@ function is_static_element(node) {\n \t\t\treturn false;\n \t\t}\n \n-\t\tif (node.name.includes('-')) {\n-\t\t\treturn false; // we're setting all attributes on custom elements through properties\n+\t\tif (\n+\t\t\tattribute.value !== true &&\n+\t\t\t!is_text_attribute(attribute) &&\n+\t\t\t// if the attribute is not a text attribute but is inlinable we will directly inline it in the\n+\t\t\t// the template so if it's not inlinable we can return false but if it is inlinable (or a text)\n+\t\t\t// attribute we keep count of the inlinable attributes so that if all the attributes are inlinable\n+\t\t\t// we deem the node as static\n+\t\t\t!is_inlinable_expression(\n+\t\t\t\tArray.isArray(attribute.value) ? attribute.value : [attribute.value],",
        "comment_created_at": "2024-11-10T21:14:45+00:00",
        "comment_author": "paoloricciuti",
        "comment_body": "I guess it's a good idea since it will always be called on attributes which could be arrays.\r\n\r\nI'll fix it in a bit ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1788541670",
    "pr_number": 13504,
    "pr_file": "packages/svelte/src/compiler/migrate/index.js",
    "created_at": "2024-10-05T08:44:50+00:00",
    "commented_code": "* May throw an error if the code is too complex to migrate automatically.\n  *\n  * @param {string} source\n+ * @param {string} [filename]\n  * @returns {{ code: string; }}\n  */\n-export function migrate(source) {\n+export function migrate(source, filename) {",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1788541670",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 13504,
        "pr_file": "packages/svelte/src/compiler/migrate/index.js",
        "discussion_id": "1788541670",
        "commented_code": "@@ -27,9 +27,10 @@ const style_placeholder = '/*$$__STYLE_CONTENT__$$*/';\n  * May throw an error if the code is too complex to migrate automatically.\n  *\n  * @param {string} source\n+ * @param {string} [filename]\n  * @returns {{ code: string; }}\n  */\n-export function migrate(source) {\n+export function migrate(source, filename) {",
        "comment_created_at": "2024-10-05T08:44:50+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "let's play it save and make this an options argument, so we can enhance this in the future of needed",
        "pr_file_module": null
      },
      {
        "comment_id": "1788543488",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 13504,
        "pr_file": "packages/svelte/src/compiler/migrate/index.js",
        "discussion_id": "1788541670",
        "commented_code": "@@ -27,9 +27,10 @@ const style_placeholder = '/*$$__STYLE_CONTENT__$$*/';\n  * May throw an error if the code is too complex to migrate automatically.\n  *\n  * @param {string} source\n+ * @param {string} [filename]\n  * @returns {{ code: string; }}\n  */\n-export function migrate(source) {\n+export function migrate(source, filename) {",
        "comment_created_at": "2024-10-05T08:57:11+00:00",
        "comment_author": "paoloricciuti",
        "comment_body": "Good idea, will do \ud83d\ude09",
        "pr_file_module": null
      }
    ]
  }
]