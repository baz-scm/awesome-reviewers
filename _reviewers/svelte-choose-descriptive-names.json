[
  {
    "discussion_id": "1966255998",
    "pr_number": 15352,
    "pr_file": "packages/svelte/src/internal/shared/attributes.js",
    "created_at": "2025-02-21T22:01:02+00:00",
    "commented_code": "return value ?? '';\n \t}\n }\n+\n+/**\n+ * @param {any} clazz\n+ * @param {string|null} [hash]\n+ * @param {Record<string,boolean>} [classes]\n+ * @returns {string|null}\n+ */\n+export function to_class(clazz, hash, classes) {\n+\tlet class_name = clazz == null ? '' : '' + clazz;",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1966255998",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15352,
        "pr_file": "packages/svelte/src/internal/shared/attributes.js",
        "discussion_id": "1966255998",
        "commented_code": "@@ -40,3 +40,46 @@ export function clsx(value) {\n \t\treturn value ?? '';\n \t}\n }\n+\n+/**\n+ * @param {any} clazz\n+ * @param {string|null} [hash]\n+ * @param {Record<string,boolean>} [classes]\n+ * @returns {string|null}\n+ */\n+export function to_class(clazz, hash, classes) {\n+\tlet class_name = clazz == null ? '' : '' + clazz;",
        "comment_created_at": "2025-02-21T22:01:02+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "please, anything but `clazz` \ud83d\ude06 \r\n\r\n```suggestion\r\nexport function to_class(value, hash, classes) {\r\n\tlet class_name = value == null ? '' : '' + value;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1903929011",
    "pr_number": 14887,
    "pr_file": "packages/svelte/src/compiler/phases/1-parse/read/expression.js",
    "created_at": "2025-01-06T09:43:49+00:00",
    "commented_code": "/**\n  * @param {Parser} parser\n  * @param {string} [opening_token]\n+ * @returns {Expression | undefined}\n+ */\n+export function get_loose_identifier(parser, opening_token) {\n+\t// Find the next } and treat it as the end of the expression\n+\tconst end = find_matching_bracket(parser.template, parser.index, opening_token ?? '{');\n+\tif (end) {\n+\t\tconst start = parser.index;\n+\t\tparser.index = end;\n+\t\t// We don't know what the expression is and signal this by returning an empty identifier\n+\t\treturn {\n+\t\t\ttype: 'Identifier',\n+\t\t\tstart,\n+\t\t\tend,\n+\t\t\tname: ''\n+\t\t};\n+\t}\n+}\n+\n+/**\n+ * @param {Parser} parser\n+ * @param {string} [opening_token]\n+ * @param {boolean} [is_each]\n  * @returns {Expression}\n  */\n-export default function read_expression(parser, opening_token) {\n+export default function read_expression(parser, opening_token, is_each) {",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1903929011",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14887,
        "pr_file": "packages/svelte/src/compiler/phases/1-parse/read/expression.js",
        "discussion_id": "1903929011",
        "commented_code": "@@ -8,9 +8,31 @@ import { find_matching_bracket } from '../utils/bracket.js';\n /**\n  * @param {Parser} parser\n  * @param {string} [opening_token]\n+ * @returns {Expression | undefined}\n+ */\n+export function get_loose_identifier(parser, opening_token) {\n+\t// Find the next } and treat it as the end of the expression\n+\tconst end = find_matching_bracket(parser.template, parser.index, opening_token ?? '{');\n+\tif (end) {\n+\t\tconst start = parser.index;\n+\t\tparser.index = end;\n+\t\t// We don't know what the expression is and signal this by returning an empty identifier\n+\t\treturn {\n+\t\t\ttype: 'Identifier',\n+\t\t\tstart,\n+\t\t\tend,\n+\t\t\tname: ''\n+\t\t};\n+\t}\n+}\n+\n+/**\n+ * @param {Parser} parser\n+ * @param {string} [opening_token]\n+ * @param {boolean} [is_each]\n  * @returns {Expression}\n  */\n-export default function read_expression(parser, opening_token) {\n+export default function read_expression(parser, opening_token, is_each) {",
        "comment_created_at": "2025-01-06T09:43:49+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "```suggestion\r\nexport default function read_expression(parser, opening_token, disallow_loose) {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1856993510",
    "pr_number": 14422,
    "pr_file": "packages/svelte/src/reactivity/start-stop-notifier.js",
    "created_at": "2024-11-25T17:20:56+00:00",
    "commented_code": "+import { tick, untrack } from '../internal/client/runtime.js';\n+import { effect_tracking, render_effect } from '../internal/client/reactivity/effects.js';\n+\n+/**\n+ * Returns a function that, when invoked in a reactive context, calls the `start` function once,\n+ * and calls the `stop` function returned from `start` when all reactive contexts it's called in\n+ * are destroyed. This is useful for creating a notifier that starts and stops when the\n+ * \"subscriber\" count goes from 0 to 1 and back to 0.\n+ * @param {() => () => void} start\n+ */\n+export function createStartStopNotifier(start) {",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1856993510",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14422,
        "pr_file": "packages/svelte/src/reactivity/start-stop-notifier.js",
        "discussion_id": "1856993510",
        "commented_code": "@@ -0,0 +1,40 @@\n+import { tick, untrack } from '../internal/client/runtime.js';\n+import { effect_tracking, render_effect } from '../internal/client/reactivity/effects.js';\n+\n+/**\n+ * Returns a function that, when invoked in a reactive context, calls the `start` function once,\n+ * and calls the `stop` function returned from `start` when all reactive contexts it's called in\n+ * are destroyed. This is useful for creating a notifier that starts and stops when the\n+ * \"subscriber\" count goes from 0 to 1 and back to 0.\n+ * @param {() => () => void} start\n+ */\n+export function createStartStopNotifier(start) {",
        "comment_created_at": "2024-11-25T17:20:56+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "wondering if this is the right name for this function. `StartStopNotifier` is slightly esoteric. what if it was `this.#subscribe = createSubscriber(fn)` instead? would that make sense?",
        "pr_file_module": null
      },
      {
        "comment_id": "1857188727",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14422,
        "pr_file": "packages/svelte/src/reactivity/start-stop-notifier.js",
        "discussion_id": "1856993510",
        "commented_code": "@@ -0,0 +1,40 @@\n+import { tick, untrack } from '../internal/client/runtime.js';\n+import { effect_tracking, render_effect } from '../internal/client/reactivity/effects.js';\n+\n+/**\n+ * Returns a function that, when invoked in a reactive context, calls the `start` function once,\n+ * and calls the `stop` function returned from `start` when all reactive contexts it's called in\n+ * are destroyed. This is useful for creating a notifier that starts and stops when the\n+ * \"subscriber\" count goes from 0 to 1 and back to 0.\n+ * @param {() => () => void} start\n+ */\n+export function createStartStopNotifier(start) {",
        "comment_created_at": "2024-11-25T18:50:22+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "I think so - I was hesitant to adopt the subscriber nomenclature because of it sounding too much like stores, but it explains the concept much better",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1837242380",
    "pr_number": 14269,
    "pr_file": "packages/svelte/src/compiler/phases/utils.js",
    "created_at": "2024-11-11T21:46:09+00:00",
    "commented_code": "+/** @import { AST, Binding } from '#compiler' */\n+\n+/**\n+ * Whether a variable can be referenced directly from template string.\n+ * @param {Binding | undefined} binding\n+ * @returns {boolean}\n+ */\n+function can_inline_variable(binding) {\n+\treturn (\n+\t\t!!binding &&\n+\t\t// in a `<script module>` block\n+\t\t!binding.scope.parent &&\n+\t\t// to prevent the need for escaping\n+\t\tbinding.initial?.type === 'Literal'\n+\t);\n+}\n+\n+/**\n+ * @param {(AST.Text | AST.ExpressionTag) | (AST.Text | AST.ExpressionTag)[]} node_or_nodes\n+ * @param {import('./scope.js').Scope} scope\n+ */\n+export function is_inlinable_expression(node_or_nodes, scope) {",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1837242380",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14269,
        "pr_file": "packages/svelte/src/compiler/phases/utils.js",
        "discussion_id": "1837242380",
        "commented_code": "@@ -0,0 +1,39 @@\n+/** @import { AST, Binding } from '#compiler' */\n+\n+/**\n+ * Whether a variable can be referenced directly from template string.\n+ * @param {Binding | undefined} binding\n+ * @returns {boolean}\n+ */\n+function can_inline_variable(binding) {\n+\treturn (\n+\t\t!!binding &&\n+\t\t// in a `<script module>` block\n+\t\t!binding.scope.parent &&\n+\t\t// to prevent the need for escaping\n+\t\tbinding.initial?.type === 'Literal'\n+\t);\n+}\n+\n+/**\n+ * @param {(AST.Text | AST.ExpressionTag) | (AST.Text | AST.ExpressionTag)[]} node_or_nodes\n+ * @param {import('./scope.js').Scope} scope\n+ */\n+export function is_inlinable_expression(node_or_nodes, scope) {",
        "comment_created_at": "2024-11-11T21:46:09+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "this signature (`node_or_nodes`) feels like a code smell. can we change it to this?\r\n\r\n```suggestion\r\n * @param {AST.Attribute} attribute\r\n * @param {Scope} scope\r\n */\r\nexport function is_inlinable_attribute(attribute, scope) {\r\n```\r\n\r\n(note that I got rid of the `import('...')` as well \u2014 we should use `/** @import ... */` instead)",
        "pr_file_module": null
      },
      {
        "comment_id": "1837244949",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14269,
        "pr_file": "packages/svelte/src/compiler/phases/utils.js",
        "discussion_id": "1837242380",
        "commented_code": "@@ -0,0 +1,39 @@\n+/** @import { AST, Binding } from '#compiler' */\n+\n+/**\n+ * Whether a variable can be referenced directly from template string.\n+ * @param {Binding | undefined} binding\n+ * @returns {boolean}\n+ */\n+function can_inline_variable(binding) {\n+\treturn (\n+\t\t!!binding &&\n+\t\t// in a `<script module>` block\n+\t\t!binding.scope.parent &&\n+\t\t// to prevent the need for escaping\n+\t\tbinding.initial?.type === 'Literal'\n+\t);\n+}\n+\n+/**\n+ * @param {(AST.Text | AST.ExpressionTag) | (AST.Text | AST.ExpressionTag)[]} node_or_nodes\n+ * @param {import('./scope.js').Scope} scope\n+ */\n+export function is_inlinable_expression(node_or_nodes, scope) {",
        "comment_created_at": "2024-11-11T21:49:44+00:00",
        "comment_author": "paoloricciuti",
        "comment_body": "This was based on the initial code from @benmccann but let me see if it's doable",
        "pr_file_module": null
      },
      {
        "comment_id": "1837248711",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14269,
        "pr_file": "packages/svelte/src/compiler/phases/utils.js",
        "discussion_id": "1837242380",
        "commented_code": "@@ -0,0 +1,39 @@\n+/** @import { AST, Binding } from '#compiler' */\n+\n+/**\n+ * Whether a variable can be referenced directly from template string.\n+ * @param {Binding | undefined} binding\n+ * @returns {boolean}\n+ */\n+function can_inline_variable(binding) {\n+\treturn (\n+\t\t!!binding &&\n+\t\t// in a `<script module>` block\n+\t\t!binding.scope.parent &&\n+\t\t// to prevent the need for escaping\n+\t\tbinding.initial?.type === 'Literal'\n+\t);\n+}\n+\n+/**\n+ * @param {(AST.Text | AST.ExpressionTag) | (AST.Text | AST.ExpressionTag)[]} node_or_nodes\n+ * @param {import('./scope.js').Scope} scope\n+ */\n+export function is_inlinable_expression(node_or_nodes, scope) {",
        "comment_created_at": "2024-11-11T21:55:13+00:00",
        "comment_author": "paoloricciuti",
        "comment_body": "Should be doable",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1760484597",
    "pr_number": 13242,
    "pr_file": "packages/svelte/src/compiler/phases/3-transform/client/visitors/RegularElement.js",
    "created_at": "2024-09-16T03:20:45+00:00",
    "commented_code": "*/\n function is_inlinable_expression(nodes, state) {\n \tlet has_expression_tag = false;\n+\tlet need_to_escape = false;\n \tfor (let value of nodes) {\n \t\tif (value.type === 'ExpressionTag') {\n \t\t\tif (value.expression.type === 'Identifier') {\n \t\t\t\tconst binding = state.scope\n \t\t\t\t\t.owner(value.expression.name)\n \t\t\t\t\t?.declarations.get(value.expression.name);\n-\t\t\t\tif (!can_inline_variable(binding)) {\n+\t\t\t\tif (!binding || !can_inline_variable(binding)) {\n \t\t\t\t\treturn false;\n \t\t\t\t}\n+\t\t\t\tneed_to_escape = need_to_escape || binding.initial?.type !== 'Literal';\n \t\t\t} else {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\thas_expression_tag = true;\n \t\t}\n \t}\n-\treturn has_expression_tag;\n+\treturn { need_to_escape };",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1760484597",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 13242,
        "pr_file": "packages/svelte/src/compiler/phases/3-transform/client/visitors/RegularElement.js",
        "discussion_id": "1760484597",
        "commented_code": "@@ -646,22 +648,24 @@ function build_element_attribute_update_assignment(element, node_id, attribute,\n  */\n function is_inlinable_expression(nodes, state) {\n \tlet has_expression_tag = false;\n+\tlet need_to_escape = false;\n \tfor (let value of nodes) {\n \t\tif (value.type === 'ExpressionTag') {\n \t\t\tif (value.expression.type === 'Identifier') {\n \t\t\t\tconst binding = state.scope\n \t\t\t\t\t.owner(value.expression.name)\n \t\t\t\t\t?.declarations.get(value.expression.name);\n-\t\t\t\tif (!can_inline_variable(binding)) {\n+\t\t\t\tif (!binding || !can_inline_variable(binding)) {\n \t\t\t\t\treturn false;\n \t\t\t\t}\n+\t\t\t\tneed_to_escape = need_to_escape || binding.initial?.type !== 'Literal';\n \t\t\t} else {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\thas_expression_tag = true;\n \t\t}\n \t}\n-\treturn has_expression_tag;\n+\treturn { need_to_escape };",
        "comment_created_at": "2024-09-16T03:20:45+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "Really not a fan of a function returning `false | { need_to_escape: boolean }` \u2014 it's a messy and confusing type. If a function name begins with `is_` then it ought to return a boolean; if it needs to return more granular information than that then something like `analyze_expression` would probably be better",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1730008295",
    "pr_number": 12985,
    "pr_file": "packages/svelte/src/internal/client/reactivity/sources.js",
    "created_at": "2024-08-24T14:38:09+00:00",
    "commented_code": "/**\n  * @template V\n  * @param {V} v\n+ * @param {boolean} [skip_derived_source]\n  * @returns {Source<V>}\n  */\n /*#__NO_SIDE_EFFECTS__*/\n-export function source(v) {\n-\treturn {\n+export function source(v, skip_derived_source = false) {",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1730008295",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12985,
        "pr_file": "packages/svelte/src/internal/client/reactivity/sources.js",
        "discussion_id": "1730008295",
        "commented_code": "@@ -32,27 +34,37 @@ let inspect_effects = new Set();\n /**\n  * @template V\n  * @param {V} v\n+ * @param {boolean} [skip_derived_source]\n  * @returns {Source<V>}\n  */\n /*#__NO_SIDE_EFFECTS__*/\n-export function source(v) {\n-\treturn {\n+export function source(v, skip_derived_source = false) {",
        "comment_created_at": "2024-08-24T14:38:09+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "I tend to think it's better to avoid negatives in variable names (even though a few other `skip_` things have slipped in) since you have to mentally invert stuff to understand what's happening. At first I thought replacing `if (!skip_derived_source ...)` with `if (track_owner ...)` might be clearer...\r\n\r\n```suggestion\r\nexport function source(v, track_owner = true) {\r\n```\r\n\r\n...but then it occurred to me that we could even do this...\r\n\r\n```suggestion\r\nexport function source(v, owner = current_reaction) {\r\n```\r\n\r\n...and then just do this below:\r\n\r\n```js\r\nif (owner !== null && (owner.f & DERIVED) !== 0) {...}\r\n```\r\n\r\nOne less thing to check. Thoughts?",
        "pr_file_module": null
      },
      {
        "comment_id": "1730022897",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12985,
        "pr_file": "packages/svelte/src/internal/client/reactivity/sources.js",
        "discussion_id": "1730008295",
        "commented_code": "@@ -32,27 +34,37 @@ let inspect_effects = new Set();\n /**\n  * @template V\n  * @param {V} v\n+ * @param {boolean} [skip_derived_source]\n  * @returns {Source<V>}\n  */\n /*#__NO_SIDE_EFFECTS__*/\n-export function source(v) {\n-\treturn {\n+export function source(v, skip_derived_source = false) {",
        "comment_created_at": "2024-08-24T15:34:18+00:00",
        "comment_author": "trueadm",
        "comment_body": "Good idea",
        "pr_file_module": null
      },
      {
        "comment_id": "1730025547",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12985,
        "pr_file": "packages/svelte/src/internal/client/reactivity/sources.js",
        "discussion_id": "1730008295",
        "commented_code": "@@ -32,27 +34,37 @@ let inspect_effects = new Set();\n /**\n  * @template V\n  * @param {V} v\n+ * @param {boolean} [skip_derived_source]\n  * @returns {Source<V>}\n  */\n /*#__NO_SIDE_EFFECTS__*/\n-export function source(v) {\n-\treturn {\n+export function source(v, skip_derived_source = false) {",
        "comment_created_at": "2024-08-24T15:45:17+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "made that change",
        "pr_file_module": null
      }
    ]
  }
]