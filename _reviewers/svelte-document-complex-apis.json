[
  {
    "discussion_id": "2178744380",
    "pr_number": 15844,
    "pr_file": "packages/svelte/src/internal/client/reactivity/batch.js",
    "created_at": "2025-07-02T00:00:43+00:00",
    "commented_code": "+/** @import { Derived, Effect, Source } from '#client' */\n+import { CLEAN, DIRTY } from '#client/constants';\n+import { deferred } from '../../shared/utils.js';\n+import {\n+\tflush_queued_effects,\n+\tflush_queued_root_effects,\n+\tprocess_effects,\n+\tschedule_effect,\n+\tset_queued_root_effects,\n+\tset_signal_status,\n+\tupdate_effect\n+} from '../runtime.js';\n+\n+/** @type {Set<Batch>} */\n+const batches = new Set();\n+\n+/** @type {Batch | null} */\n+export let current_batch = null;\n+\n+/** @type {Map<Derived, any> | null} */\n+export let batch_deriveds = null;\n+\n+/** TODO handy for debugging, but we should probably eventually delete it */\n+let uid = 1;\n+\n+export class Batch {",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "2178744380",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15844,
        "pr_file": "packages/svelte/src/internal/client/reactivity/batch.js",
        "discussion_id": "2178744380",
        "commented_code": "@@ -0,0 +1,314 @@\n+/** @import { Derived, Effect, Source } from '#client' */\n+import { CLEAN, DIRTY } from '#client/constants';\n+import { deferred } from '../../shared/utils.js';\n+import {\n+\tflush_queued_effects,\n+\tflush_queued_root_effects,\n+\tprocess_effects,\n+\tschedule_effect,\n+\tset_queued_root_effects,\n+\tset_signal_status,\n+\tupdate_effect\n+} from '../runtime.js';\n+\n+/** @type {Set<Batch>} */\n+const batches = new Set();\n+\n+/** @type {Batch | null} */\n+export let current_batch = null;\n+\n+/** @type {Map<Derived, any> | null} */\n+export let batch_deriveds = null;\n+\n+/** TODO handy for debugging, but we should probably eventually delete it */\n+let uid = 1;\n+\n+export class Batch {",
        "comment_created_at": "2025-07-02T00:00:43+00:00",
        "comment_author": "elliott-with-the-longest-name-on-github",
        "comment_body": "This class would _really_ benefit from good JSDoc, especially given its reach across the codebase, _especially_ on complex methods like `process`. I can see what the code _does_ but trying to intuit _why_ is quite challenging",
        "pr_file_module": null
      },
      {
        "comment_id": "2191336796",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15844,
        "pr_file": "packages/svelte/src/internal/client/reactivity/batch.js",
        "discussion_id": "2178744380",
        "commented_code": "@@ -0,0 +1,314 @@\n+/** @import { Derived, Effect, Source } from '#client' */\n+import { CLEAN, DIRTY } from '#client/constants';\n+import { deferred } from '../../shared/utils.js';\n+import {\n+\tflush_queued_effects,\n+\tflush_queued_root_effects,\n+\tprocess_effects,\n+\tschedule_effect,\n+\tset_queued_root_effects,\n+\tset_signal_status,\n+\tupdate_effect\n+} from '../runtime.js';\n+\n+/** @type {Set<Batch>} */\n+const batches = new Set();\n+\n+/** @type {Batch | null} */\n+export let current_batch = null;\n+\n+/** @type {Map<Derived, any> | null} */\n+export let batch_deriveds = null;\n+\n+/** TODO handy for debugging, but we should probably eventually delete it */\n+let uid = 1;\n+\n+export class Batch {",
        "comment_created_at": "2025-07-08T02:15:12+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "I've added a bunch of JSDoc comments around the less self-explanatory stuff. No doubt there's more that could be added but I'll mark this resolved for now",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2178745535",
    "pr_number": 15844,
    "pr_file": "packages/svelte/src/internal/client/reactivity/async.js",
    "created_at": "2025-07-02T00:02:36+00:00",
    "commented_code": "+/** @import { Effect, Value } from '#client' */\n+\n+import { DESTROYED } from '#client/constants';\n+import { is_runes } from '../context.js';\n+import { capture, get_pending_boundary } from '../dom/blocks/boundary.js';\n+import { invoke_error_boundary } from '../error-handling.js';\n+import { active_effect } from '../runtime.js';\n+import { current_batch } from './batch.js';\n+import { async_derived, derived, derived_safe_equal } from './deriveds.js';\n+\n+/**\n+ *\n+ * @param {Array<() => any>} sync\n+ * @param {Array<() => Promise<any>>} async\n+ * @param {(values: Value[]) => any} fn\n+ */\n+export function flatten(sync, async, fn) {",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "2178745535",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15844,
        "pr_file": "packages/svelte/src/internal/client/reactivity/async.js",
        "discussion_id": "2178745535",
        "commented_code": "@@ -0,0 +1,50 @@\n+/** @import { Effect, Value } from '#client' */\n+\n+import { DESTROYED } from '#client/constants';\n+import { is_runes } from '../context.js';\n+import { capture, get_pending_boundary } from '../dom/blocks/boundary.js';\n+import { invoke_error_boundary } from '../error-handling.js';\n+import { active_effect } from '../runtime.js';\n+import { current_batch } from './batch.js';\n+import { async_derived, derived, derived_safe_equal } from './deriveds.js';\n+\n+/**\n+ *\n+ * @param {Array<() => any>} sync\n+ * @param {Array<() => Promise<any>>} async\n+ * @param {(values: Value[]) => any} fn\n+ */\n+export function flatten(sync, async, fn) {",
        "comment_created_at": "2025-07-02T00:02:36+00:00",
        "comment_author": "elliott-with-the-longest-name-on-github",
        "comment_body": "Another one that would really benefit from JSDoc",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2183742783",
    "pr_number": 15844,
    "pr_file": "packages/svelte/src/internal/client/dom/blocks/boundary.js",
    "created_at": "2025-07-03T20:57:52+00:00",
    "commented_code": "}\n \t}\n }\n+\n+/**\n+ *\n+ * @param {Effect} effect\n+ * @param {DocumentFragment} fragment\n+ */\n+function move_effect(effect, fragment) {\n+\tvar node = effect.nodes_start;\n+\tvar end = effect.nodes_end;\n+\n+\twhile (node !== null) {\n+\t\t/** @type {TemplateNode | null} */\n+\t\tvar next = node === end ? null : /** @type {TemplateNode} */ (get_next_sibling(node));\n+\n+\t\tfragment.append(node);\n+\t\tnode = next;\n+\t}\n+}\n+\n+export function get_pending_boundary() {\n+\tvar boundary = /** @type {Effect} */ (active_effect).b;\n+\n+\twhile (boundary !== null && !boundary.has_pending_snippet()) {\n+\t\tboundary = boundary.parent;\n+\t}\n+\n+\tif (boundary === null) {\n+\t\te.await_outside_boundary();\n+\t}\n+\n+\treturn boundary;\n+}\n+\n+export function capture(track = true) {",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "2183742783",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15844,
        "pr_file": "packages/svelte/src/internal/client/dom/blocks/boundary.js",
        "discussion_id": "2183742783",
        "commented_code": "@@ -187,3 +329,105 @@ export class Boundary {\n \t\t}\n \t}\n }\n+\n+/**\n+ *\n+ * @param {Effect} effect\n+ * @param {DocumentFragment} fragment\n+ */\n+function move_effect(effect, fragment) {\n+\tvar node = effect.nodes_start;\n+\tvar end = effect.nodes_end;\n+\n+\twhile (node !== null) {\n+\t\t/** @type {TemplateNode | null} */\n+\t\tvar next = node === end ? null : /** @type {TemplateNode} */ (get_next_sibling(node));\n+\n+\t\tfragment.append(node);\n+\t\tnode = next;\n+\t}\n+}\n+\n+export function get_pending_boundary() {\n+\tvar boundary = /** @type {Effect} */ (active_effect).b;\n+\n+\twhile (boundary !== null && !boundary.has_pending_snippet()) {\n+\t\tboundary = boundary.parent;\n+\t}\n+\n+\tif (boundary === null) {\n+\t\te.await_outside_boundary();\n+\t}\n+\n+\treturn boundary;\n+}\n+\n+export function capture(track = true) {",
        "comment_created_at": "2025-07-03T20:57:52+00:00",
        "comment_author": "elliott-with-the-longest-name-on-github",
        "comment_body": "Would be nice to have JSDoc on this one -- I've been seeing it throughout the codebase and its name is vague enough that it's like \"ok... what is this actually doing\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2183744961",
    "pr_number": 15844,
    "pr_file": "packages/svelte/src/internal/client/dom/blocks/boundary.js",
    "created_at": "2025-07-03T20:59:26+00:00",
    "commented_code": "}\n \t}\n }\n+\n+/**\n+ *\n+ * @param {Effect} effect\n+ * @param {DocumentFragment} fragment\n+ */\n+function move_effect(effect, fragment) {\n+\tvar node = effect.nodes_start;\n+\tvar end = effect.nodes_end;\n+\n+\twhile (node !== null) {\n+\t\t/** @type {TemplateNode | null} */\n+\t\tvar next = node === end ? null : /** @type {TemplateNode} */ (get_next_sibling(node));\n+\n+\t\tfragment.append(node);\n+\t\tnode = next;\n+\t}\n+}\n+\n+export function get_pending_boundary() {\n+\tvar boundary = /** @type {Effect} */ (active_effect).b;\n+\n+\twhile (boundary !== null && !boundary.has_pending_snippet()) {\n+\t\tboundary = boundary.parent;\n+\t}\n+\n+\tif (boundary === null) {\n+\t\te.await_outside_boundary();\n+\t}\n+\n+\treturn boundary;\n+}\n+\n+export function capture(track = true) {\n+\tvar previous_effect = active_effect;\n+\tvar previous_reaction = active_reaction;\n+\tvar previous_component_context = component_context;\n+\n+\tif (DEV && !track) {\n+\t\tvar was_from_async_derived = from_async_derived;\n+\t}\n+\n+\treturn function restore() {\n+\t\tif (track) {\n+\t\t\tset_active_effect(previous_effect);\n+\t\t\tset_active_reaction(previous_reaction);\n+\t\t\tset_component_context(previous_component_context);\n+\t\t}\n+\n+\t\tif (DEV) {\n+\t\t\tset_from_async_derived(track ? null : was_from_async_derived);\n+\t\t}\n+\n+\t\t// prevent the active effect from outstaying its welcome\n+\t\tqueue_micro_task(exit);\n+\t};\n+}\n+\n+// TODO we should probably be incrementing the current batch, not the boundary?\n+export function suspend() {\n+\tlet boundary = get_pending_boundary();\n+\n+\tboundary.update_pending_count(1);\n+\n+\treturn function unsuspend() {\n+\t\tboundary.update_pending_count(-1);\n+\t};\n+}\n+\n+/**\n+ * @template T\n+ * @param {Promise<T>} promise\n+ * @param {boolean} [track]\n+ * @returns {Promise<() => T>}",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "2183744961",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15844,
        "pr_file": "packages/svelte/src/internal/client/dom/blocks/boundary.js",
        "discussion_id": "2183744961",
        "commented_code": "@@ -187,3 +329,105 @@ export class Boundary {\n \t\t}\n \t}\n }\n+\n+/**\n+ *\n+ * @param {Effect} effect\n+ * @param {DocumentFragment} fragment\n+ */\n+function move_effect(effect, fragment) {\n+\tvar node = effect.nodes_start;\n+\tvar end = effect.nodes_end;\n+\n+\twhile (node !== null) {\n+\t\t/** @type {TemplateNode | null} */\n+\t\tvar next = node === end ? null : /** @type {TemplateNode} */ (get_next_sibling(node));\n+\n+\t\tfragment.append(node);\n+\t\tnode = next;\n+\t}\n+}\n+\n+export function get_pending_boundary() {\n+\tvar boundary = /** @type {Effect} */ (active_effect).b;\n+\n+\twhile (boundary !== null && !boundary.has_pending_snippet()) {\n+\t\tboundary = boundary.parent;\n+\t}\n+\n+\tif (boundary === null) {\n+\t\te.await_outside_boundary();\n+\t}\n+\n+\treturn boundary;\n+}\n+\n+export function capture(track = true) {\n+\tvar previous_effect = active_effect;\n+\tvar previous_reaction = active_reaction;\n+\tvar previous_component_context = component_context;\n+\n+\tif (DEV && !track) {\n+\t\tvar was_from_async_derived = from_async_derived;\n+\t}\n+\n+\treturn function restore() {\n+\t\tif (track) {\n+\t\t\tset_active_effect(previous_effect);\n+\t\t\tset_active_reaction(previous_reaction);\n+\t\t\tset_component_context(previous_component_context);\n+\t\t}\n+\n+\t\tif (DEV) {\n+\t\t\tset_from_async_derived(track ? null : was_from_async_derived);\n+\t\t}\n+\n+\t\t// prevent the active effect from outstaying its welcome\n+\t\tqueue_micro_task(exit);\n+\t};\n+}\n+\n+// TODO we should probably be incrementing the current batch, not the boundary?\n+export function suspend() {\n+\tlet boundary = get_pending_boundary();\n+\n+\tboundary.update_pending_count(1);\n+\n+\treturn function unsuspend() {\n+\t\tboundary.update_pending_count(-1);\n+\t};\n+}\n+\n+/**\n+ * @template T\n+ * @param {Promise<T>} promise\n+ * @param {boolean} [track]\n+ * @returns {Promise<() => T>}",
        "comment_created_at": "2025-07-03T20:59:26+00:00",
        "comment_author": "elliott-with-the-longest-name-on-github",
        "comment_body": "Having some JSDoc on these exports would make learning the codebase a lot friendlier",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1906251857",
    "pr_number": 14945,
    "pr_file": "packages/svelte/src/internal/client/runtime.js",
    "created_at": "2025-01-08T02:20:06+00:00",
    "commented_code": "}\n \n /** @type {number} Used by sources and deriveds for handling updates to unowned deriveds it starts from 1 to differentiate between a created effect and a run one for tracing */",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1906251857",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14945,
        "pr_file": "packages/svelte/src/internal/client/runtime.js",
        "discussion_id": "1906251857",
        "commented_code": "@@ -128,7 +128,8 @@ export function set_untracked_writes(value) {\n }\n \n /** @type {number} Used by sources and deriveds for handling updates to unowned deriveds it starts from 1 to differentiate between a created effect and a run one for tracing */",
        "comment_created_at": "2025-01-08T02:20:06+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "unrelated to this PR but I think this comment is out of date? write versions are used for everything, not just unowned deriveds.\r\n\r\nseparately, would be good to have a comment explaining what `read_version` is",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1835728608",
    "pr_number": 14237,
    "pr_file": "packages/svelte/src/compiler/phases/3-transform/client/visitors/shared/fragment.js",
    "created_at": "2024-11-10T15:57:28+00:00",
    "commented_code": "return false;\n \t\t}\n \n+\t\t// an img with loading lazy is not static but needs the `img` to be\n+\t\t// generated to be passed to `handle_lazy_img`",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1835728608",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14237,
        "pr_file": "packages/svelte/src/compiler/phases/3-transform/client/visitors/shared/fragment.js",
        "discussion_id": "1835728608",
        "commented_code": "@@ -150,6 +150,12 @@ function is_static_element(node) {\n \t\t\treturn false;\n \t\t}\n \n+\t\t// an img with loading lazy is not static but needs the `img` to be\n+\t\t// generated to be passed to `handle_lazy_img`",
        "comment_created_at": "2024-11-10T15:57:28+00:00",
        "comment_author": "benmccann",
        "comment_body": "I couldn't understand this comment without reading through the code as it assumes some familiarity with why `handle_lazy_img` is needed. How about something like this instead?\r\n```suggestion\r\n\t\t// We need to apply src and loading after appending the img to the DOM for lazy loading to work\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1835730632",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14237,
        "pr_file": "packages/svelte/src/compiler/phases/3-transform/client/visitors/shared/fragment.js",
        "discussion_id": "1835728608",
        "commented_code": "@@ -150,6 +150,12 @@ function is_static_element(node) {\n \t\t\treturn false;\n \t\t}\n \n+\t\t// an img with loading lazy is not static but needs the `img` to be\n+\t\t// generated to be passed to `handle_lazy_img`",
        "comment_created_at": "2024-11-10T16:09:21+00:00",
        "comment_author": "paoloricciuti",
        "comment_body": "Yup much better",
        "pr_file_module": null
      }
    ]
  }
]