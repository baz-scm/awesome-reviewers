[
  {
    "discussion_id": "2208347247",
    "pr_number": 16376,
    "pr_file": "documentation/docs/03-template-syntax/19-await-expressions.md",
    "created_at": "2025-07-15T18:44:35+00:00",
    "commented_code": "+---\n+title: await\n+---\n+\n+As of Svelte 5.36, you can use the `await` keyword inside your components in three places where it was previously unavailable:\n+\n+- at the top level of your component's `<script>`\n+- inside `$derived(...)` declarations\n+- inside your markup\n+\n+This feature is currently experimental, and you must opt in by adding the `experimental.async` option wherever you [configure](https://svelte.dev/docs/kit/configuration) Svelte, usually `svelte.config.js`:",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "2208347247",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 16376,
        "pr_file": "documentation/docs/03-template-syntax/19-await-expressions.md",
        "discussion_id": "2208347247",
        "commented_code": "@@ -0,0 +1,138 @@\n+---\n+title: await\n+---\n+\n+As of Svelte 5.36, you can use the `await` keyword inside your components in three places where it was previously unavailable:\n+\n+- at the top level of your component's `<script>`\n+- inside `$derived(...)` declarations\n+- inside your markup\n+\n+This feature is currently experimental, and you must opt in by adding the `experimental.async` option wherever you [configure](https://svelte.dev/docs/kit/configuration) Svelte, usually `svelte.config.js`:",
        "comment_created_at": "2025-07-15T18:44:35+00:00",
        "comment_author": "Conduitry",
        "comment_body": "```suggestion\r\nThis feature is currently experimental, and you must opt in by adding the `experimental.async` option wherever you [configure](/docs/kit/configuration) Svelte, usually `svelte.config.js`:\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2208369723",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 16376,
        "pr_file": "documentation/docs/03-template-syntax/19-await-expressions.md",
        "discussion_id": "2208347247",
        "commented_code": "@@ -0,0 +1,138 @@\n+---\n+title: await\n+---\n+\n+As of Svelte 5.36, you can use the `await` keyword inside your components in three places where it was previously unavailable:\n+\n+- at the top level of your component's `<script>`\n+- inside `$derived(...)` declarations\n+- inside your markup\n+\n+This feature is currently experimental, and you must opt in by adding the `experimental.async` option wherever you [configure](https://svelte.dev/docs/kit/configuration) Svelte, usually `svelte.config.js`:",
        "comment_created_at": "2025-07-15T18:50:11+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "good catch, thanks",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2107357963",
    "pr_number": 16003,
    "pr_file": "packages/svelte/messages/compile-warnings/script.md",
    "created_at": "2025-05-26T13:26:21+00:00",
    "commented_code": "+## custom_element_props_identifier\n+\n+> Using an identifier or a rest element as the declarator for `$props` when compiling to custom elements without declaring `props` in the component options means that Svelte can't know which props to expose as properties on the DOM element. Consider explicitly destructure all the props or add the `customElement.props` option.",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "2107357963",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 16003,
        "pr_file": "packages/svelte/messages/compile-warnings/script.md",
        "discussion_id": "2107357963",
        "commented_code": "@@ -1,3 +1,7 @@\n+## custom_element_props_identifier\n+\n+> Using an identifier or a rest element as the declarator for `$props` when compiling to custom elements without declaring `props` in the component options means that Svelte can't know which props to expose as properties on the DOM element. Consider explicitly destructure all the props or add the `customElement.props` option.",
        "comment_created_at": "2025-05-26T13:26:21+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "```suggestion\r\n> Using an identifier or a rest element as the declarator for `$props` when compiling to custom elements without declaring `props` in the component options means that Svelte can't know which props to expose as properties on the DOM element. Consider explicitly destructuring all the props or add the `customElement.props` option.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1116005710",
    "pr_number": 7774,
    "pr_file": "site/content/docs/06-accessibility-warnings.md",
    "created_at": "2023-02-23T17:12:47+00:00",
    "commented_code": "<label>A</label>\n ```\n \n+If your label and input are Svelte components, you can configure the rule to be aware of your Svelte components.\n+\n+```svelte\n+<CustomInputLabel label=\"Surname\">\n+  <CustomInput type=\"text\" bind:value />\n+</CustomInputLabel>\n+```\n+\n+And the configuration:\n+\n+```js\n+// svelte.config.js\n+export default {\n+  compilerOptions: {\n+\t\ta11y: {\n+\t\t\trules: {\n+\t\t\t\t'label-has-associated-control': {\n+\t\t\t\t\tlabelComponents: ['CustomInputLabel'],\n+      \t\tcontrolComponents: ['CustomInput'],\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t},\n+}\n+```\n+\n+**Configuration**\n+\n+```js\n+// svelte.config.js\n+export default {\n+  compilerOptions: {\n+\t\ta11y: {\n+\t\t\trules: {\n+\t\t\t\t'label-has-associated-control': {\n+\t\t\t\t\tlabelComponents: ['CustomInputLabel'],\n+      \t\tcontrolComponents: ['CustomInput'],\n+      \t\tdepth: 3,\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t},\n+}\n+```\n+\n+- `labelComponents` is a list of Svelte component names that should be checked for an associated control.\n+- `controlComponents` is a list of Svelte component names that will output an input element.\n+- `depth` (default 3, max 25) is an integer that determines how deep within the label element the rule should look for an element to determine if the label element has associated control.",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1116005710",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 7774,
        "pr_file": "site/content/docs/06-accessibility-warnings.md",
        "discussion_id": "1116005710",
        "commented_code": "@@ -141,6 +141,55 @@ There are two supported ways to associate a label with a control:\n <label>A</label>\n ```\n \n+If your label and input are Svelte components, you can configure the rule to be aware of your Svelte components.\n+\n+```svelte\n+<CustomInputLabel label=\"Surname\">\n+  <CustomInput type=\"text\" bind:value />\n+</CustomInputLabel>\n+```\n+\n+And the configuration:\n+\n+```js\n+// svelte.config.js\n+export default {\n+  compilerOptions: {\n+\t\ta11y: {\n+\t\t\trules: {\n+\t\t\t\t'label-has-associated-control': {\n+\t\t\t\t\tlabelComponents: ['CustomInputLabel'],\n+      \t\tcontrolComponents: ['CustomInput'],\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t},\n+}\n+```\n+\n+**Configuration**\n+\n+```js\n+// svelte.config.js\n+export default {\n+  compilerOptions: {\n+\t\ta11y: {\n+\t\t\trules: {\n+\t\t\t\t'label-has-associated-control': {\n+\t\t\t\t\tlabelComponents: ['CustomInputLabel'],\n+      \t\tcontrolComponents: ['CustomInput'],\n+      \t\tdepth: 3,\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t},\n+}\n+```\n+\n+- `labelComponents` is a list of Svelte component names that should be checked for an associated control.\n+- `controlComponents` is a list of Svelte component names that will output an input element.\n+- `depth` (default 3, max 25) is an integer that determines how deep within the label element the rule should look for an element to determine if the label element has associated control.",
        "comment_created_at": "2023-02-23T17:12:47+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "previously the depth was unlimited. Are we confident with `3` being a right number which doesn't turn up false positives for people previously having no warning?",
        "pr_file_module": null
      },
      {
        "comment_id": "1118785658",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 7774,
        "pr_file": "site/content/docs/06-accessibility-warnings.md",
        "discussion_id": "1116005710",
        "commented_code": "@@ -141,6 +141,55 @@ There are two supported ways to associate a label with a control:\n <label>A</label>\n ```\n \n+If your label and input are Svelte components, you can configure the rule to be aware of your Svelte components.\n+\n+```svelte\n+<CustomInputLabel label=\"Surname\">\n+  <CustomInput type=\"text\" bind:value />\n+</CustomInputLabel>\n+```\n+\n+And the configuration:\n+\n+```js\n+// svelte.config.js\n+export default {\n+  compilerOptions: {\n+\t\ta11y: {\n+\t\t\trules: {\n+\t\t\t\t'label-has-associated-control': {\n+\t\t\t\t\tlabelComponents: ['CustomInputLabel'],\n+      \t\tcontrolComponents: ['CustomInput'],\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t},\n+}\n+```\n+\n+**Configuration**\n+\n+```js\n+// svelte.config.js\n+export default {\n+  compilerOptions: {\n+\t\ta11y: {\n+\t\t\trules: {\n+\t\t\t\t'label-has-associated-control': {\n+\t\t\t\t\tlabelComponents: ['CustomInputLabel'],\n+      \t\tcontrolComponents: ['CustomInput'],\n+      \t\tdepth: 3,\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t},\n+}\n+```\n+\n+- `labelComponents` is a list of Svelte component names that should be checked for an associated control.\n+- `controlComponents` is a list of Svelte component names that will output an input element.\n+- `depth` (default 3, max 25) is an integer that determines how deep within the label element the rule should look for an element to determine if the label element has associated control.",
        "comment_created_at": "2023-02-27T14:06:36+00:00",
        "comment_author": "tanhauhau",
        "comment_body": "i would say it's a safe enough number, or what number would u suggest?",
        "pr_file_module": null
      },
      {
        "comment_id": "1118908715",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 7774,
        "pr_file": "site/content/docs/06-accessibility-warnings.md",
        "discussion_id": "1116005710",
        "commented_code": "@@ -141,6 +141,55 @@ There are two supported ways to associate a label with a control:\n <label>A</label>\n ```\n \n+If your label and input are Svelte components, you can configure the rule to be aware of your Svelte components.\n+\n+```svelte\n+<CustomInputLabel label=\"Surname\">\n+  <CustomInput type=\"text\" bind:value />\n+</CustomInputLabel>\n+```\n+\n+And the configuration:\n+\n+```js\n+// svelte.config.js\n+export default {\n+  compilerOptions: {\n+\t\ta11y: {\n+\t\t\trules: {\n+\t\t\t\t'label-has-associated-control': {\n+\t\t\t\t\tlabelComponents: ['CustomInputLabel'],\n+      \t\tcontrolComponents: ['CustomInput'],\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t},\n+}\n+```\n+\n+**Configuration**\n+\n+```js\n+// svelte.config.js\n+export default {\n+  compilerOptions: {\n+\t\ta11y: {\n+\t\t\trules: {\n+\t\t\t\t'label-has-associated-control': {\n+\t\t\t\t\tlabelComponents: ['CustomInputLabel'],\n+      \t\tcontrolComponents: ['CustomInput'],\n+      \t\tdepth: 3,\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t},\n+}\n+```\n+\n+- `labelComponents` is a list of Svelte component names that should be checked for an associated control.\n+- `controlComponents` is a list of Svelte component names that will output an input element.\n+- `depth` (default 3, max 25) is an integer that determines how deep within the label element the rule should look for an element to determine if the label element has associated control.",
        "comment_created_at": "2023-02-27T15:30:45+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "If I were to design this from scratch I'd also take 3, it's more about people not seing a warning now which they previously didn't. But having such a deeply nested input is probably super rare. Maybe I'd go with 5.",
        "pr_file_module": null
      },
      {
        "comment_id": "1118981420",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 7774,
        "pr_file": "site/content/docs/06-accessibility-warnings.md",
        "discussion_id": "1116005710",
        "commented_code": "@@ -141,6 +141,55 @@ There are two supported ways to associate a label with a control:\n <label>A</label>\n ```\n \n+If your label and input are Svelte components, you can configure the rule to be aware of your Svelte components.\n+\n+```svelte\n+<CustomInputLabel label=\"Surname\">\n+  <CustomInput type=\"text\" bind:value />\n+</CustomInputLabel>\n+```\n+\n+And the configuration:\n+\n+```js\n+// svelte.config.js\n+export default {\n+  compilerOptions: {\n+\t\ta11y: {\n+\t\t\trules: {\n+\t\t\t\t'label-has-associated-control': {\n+\t\t\t\t\tlabelComponents: ['CustomInputLabel'],\n+      \t\tcontrolComponents: ['CustomInput'],\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t},\n+}\n+```\n+\n+**Configuration**\n+\n+```js\n+// svelte.config.js\n+export default {\n+  compilerOptions: {\n+\t\ta11y: {\n+\t\t\trules: {\n+\t\t\t\t'label-has-associated-control': {\n+\t\t\t\t\tlabelComponents: ['CustomInputLabel'],\n+      \t\tcontrolComponents: ['CustomInput'],\n+      \t\tdepth: 3,\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t},\n+}\n+```\n+\n+- `labelComponents` is a list of Svelte component names that should be checked for an associated control.\n+- `controlComponents` is a list of Svelte component names that will output an input element.\n+- `depth` (default 3, max 25) is an integer that determines how deep within the label element the rule should look for an element to determine if the label element has associated control.",
        "comment_created_at": "2023-02-27T16:22:42+00:00",
        "comment_author": "tanhauhau",
        "comment_body": "sure, i dont have a strong opinion on any number",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1867831175",
    "pr_number": 14519,
    "pr_file": "documentation/docs/07-misc/03-typescript.md",
    "created_at": "2024-12-03T14:31:58+00:00",
    "commented_code": "> [!NOTE] If you're starting a new project, we recommend using SvelteKit or Vite instead\n \n+## tsconfig.json settings\n+\n+When using TypeScript, make sure your `tsconfig.json` is setup correctly.\n+\n+- Use a [`target`](https://www.typescriptlang.org/tsconfig/#target) of at least `ES2022`, or a `target` of at least `Es2015` alongside [`useDefineForClassFields`](https://www.typescriptlang.org/tsconfig/#useDefineForClassFields). This ensures that rune declarations on class fields are not messed with, which would break the Svelte compiler",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1867831175",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14519,
        "pr_file": "documentation/docs/07-misc/03-typescript.md",
        "discussion_id": "1867831175",
        "commented_code": "@@ -77,6 +79,14 @@ If you're using tools like Rollup or Webpack instead, install their respective S\n \n > [!NOTE] If you're starting a new project, we recommend using SvelteKit or Vite instead\n \n+## tsconfig.json settings\n+\n+When using TypeScript, make sure your `tsconfig.json` is setup correctly.\n+\n+- Use a [`target`](https://www.typescriptlang.org/tsconfig/#target) of at least `ES2022`, or a `target` of at least `Es2015` alongside [`useDefineForClassFields`](https://www.typescriptlang.org/tsconfig/#useDefineForClassFields). This ensures that rune declarations on class fields are not messed with, which would break the Svelte compiler",
        "comment_created_at": "2024-12-03T14:31:58+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "```suggestion\r\n- Use a [`target`](https://www.typescriptlang.org/tsconfig/#target) of at least `ES2022`, or a `target` of at least `ES2015` alongside [`useDefineForClassFields`](https://www.typescriptlang.org/tsconfig/#useDefineForClassFields). This ensures that rune declarations on class fields are not messed with, which would break the Svelte compiler\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1762975756",
    "pr_number": 13280,
    "pr_file": "sites/svelte-5-preview/src/routes/docs/content/03-appendix/02-breaking-changes.md",
    "created_at": "2024-09-17T10:14:56+00:00",
    "commented_code": "In Svelte 4, rendering a component to a string also returned the CSS of all components. In Svelte 5, this is no longer the case by default because most of the time you're using a tooling chain that takes care of it in other ways (like SvelteKit). If you need CSS to be returned from `render`, you can set the `css` compiler option to `'injected'` and it will add `<style>` elements to the `head`.\n \n+You can set this option:\n+\n+- Globally through the `compilerOption` property in your svelte config.\n+- On a per component basis through the `<svelte:options css=\"injected\" />` tag.\n+- Dynamically using the [`dynamicCompileOption`](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#dynamiccompileoptions) property of `vite-plugin-svelte`",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1762975756",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 13280,
        "pr_file": "sites/svelte-5-preview/src/routes/docs/content/03-appendix/02-breaking-changes.md",
        "discussion_id": "1762975756",
        "commented_code": "@@ -99,6 +99,12 @@ import App from './App.svelte';\n \n In Svelte 4, rendering a component to a string also returned the CSS of all components. In Svelte 5, this is no longer the case by default because most of the time you're using a tooling chain that takes care of it in other ways (like SvelteKit). If you need CSS to be returned from `render`, you can set the `css` compiler option to `'injected'` and it will add `<style>` elements to the `head`.\n \n+You can set this option:\n+\n+- Globally through the `compilerOption` property in your svelte config.\n+- On a per component basis through the `<svelte:options css=\"injected\" />` tag.\n+- Dynamically using the [`dynamicCompileOption`](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#dynamiccompileoptions) property of `vite-plugin-svelte`",
        "comment_created_at": "2024-09-17T10:14:56+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "```suggestion\r\nThere are several ways to set this option:\r\n\r\n- Globally, via the `compilerOptions.css` option in your `svelte.config.js` or the options passed to `svelte.compile`\r\n- Dynamically, using [`dynamicCompileOptions`](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#dynamiccompileoptions) in `vite-plugin-svelte`\r\n- Per-component, with `<svelte:options css=\"injected\" />` (this will override options set any other way)\r\n```\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1741261617",
    "pr_number": 13017,
    "pr_file": "documentation/blog/2024-09-01-whats-new-in-svelte-september-2024.md",
    "created_at": "2024-09-02T21:54:21+00:00",
    "commented_code": "+---\n+title: \"What's new in Svelte: September 2024\"\n+description: 'More useful `svelte:options` and `:global`, plus the deprecation of `<svelte:component>` in Svelte 5'\n+author: Dani Sandoval\n+authorURL: https://dreamindani.com\n+---\n+\n+A bunch of updates to Svelte dropped in the last few weeks, plus a few quality of life improvements in the Svelte language tools.\n+\n+Let's take a look...\n+\n+## What's new in Svelte and Language Tools\n+\n+- `$state.frozen` has been replaced with `$state.raw` (**5.0.0-next.218**, [Docs](https://svelte-5-preview.vercel.app/docs/runes#state-raw), [#12808](https://github.com/sveltejs/svelte/pull/12808))\n+- `$state.is` has been removed. RIP, little guy ([#12916](https://github.com/sveltejs/svelte/pull/12916))\n+- `$state.link` was added, experimented with, and then removed (**5.0.0-next.229 - 232**, [#12545](https://github.com/sveltejs/svelte/pull/12545) and [#12943](https://github.com/sveltejs/svelte/pull/12943))\n+- `svelte:options` lets you do a per-component css injection (**5.0.0-next.209**, [#12660](https://github.com/sveltejs/svelte/pull/12660))",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1741261617",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 13017,
        "pr_file": "documentation/blog/2024-09-01-whats-new-in-svelte-september-2024.md",
        "discussion_id": "1741261617",
        "commented_code": "@@ -0,0 +1,85 @@\n+---\n+title: \"What's new in Svelte: September 2024\"\n+description: 'More useful `svelte:options` and `:global`, plus the deprecation of `<svelte:component>` in Svelte 5'\n+author: Dani Sandoval\n+authorURL: https://dreamindani.com\n+---\n+\n+A bunch of updates to Svelte dropped in the last few weeks, plus a few quality of life improvements in the Svelte language tools.\n+\n+Let's take a look...\n+\n+## What's new in Svelte and Language Tools\n+\n+- `$state.frozen` has been replaced with `$state.raw` (**5.0.0-next.218**, [Docs](https://svelte-5-preview.vercel.app/docs/runes#state-raw), [#12808](https://github.com/sveltejs/svelte/pull/12808))\n+- `$state.is` has been removed. RIP, little guy ([#12916](https://github.com/sveltejs/svelte/pull/12916))\n+- `$state.link` was added, experimented with, and then removed (**5.0.0-next.229 - 232**, [#12545](https://github.com/sveltejs/svelte/pull/12545) and [#12943](https://github.com/sveltejs/svelte/pull/12943))\n+- `svelte:options` lets you do a per-component css injection (**5.0.0-next.209**, [#12660](https://github.com/sveltejs/svelte/pull/12660))",
        "comment_created_at": "2024-09-02T21:54:21+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "```suggestion\r\n- `svelte:options` now lets you set the `css: \"inject\"` compiler option on a per-component basis (**5.0.0-next.209**, [#12660](https://github.com/sveltejs/svelte/pull/12660))\r\n```",
        "pr_file_module": null
      }
    ]
  }
]