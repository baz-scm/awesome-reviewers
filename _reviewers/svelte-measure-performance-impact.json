[
  {
    "discussion_id": "1923743531",
    "pr_number": 15069,
    "pr_file": "packages/svelte/src/internal/client/proxy.js",
    "created_at": "2025-01-21T13:36:21+00:00",
    "commented_code": "return v === UNINITIALIZED ? undefined : v;\n \t\t\t}\n \n-\t\t\treturn Reflect.get(target, prop, receiver);\n+\t\t\tv = Reflect.get(target, prop, receiver);\n+\n+\t\t\tif (is_proxied_array && array_methods.includes(/** @type {string} */ (prop))) {\n+\t\t\t\treturn batch_onchange(v);",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1923743531",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15069,
        "pr_file": "packages/svelte/src/internal/client/proxy.js",
        "discussion_id": "1923743531",
        "commented_code": "@@ -167,7 +170,13 @@ export function proxy(value, parent = null, prev) {\n \t\t\t\treturn v === UNINITIALIZED ? undefined : v;\n \t\t\t}\n \n-\t\t\treturn Reflect.get(target, prop, receiver);\n+\t\t\tv = Reflect.get(target, prop, receiver);\n+\n+\t\t\tif (is_proxied_array && array_methods.includes(/** @type {string} */ (prop))) {\n+\t\t\t\treturn batch_onchange(v);",
        "comment_created_at": "2025-01-21T13:36:21+00:00",
        "comment_author": "trueadm",
        "comment_body": "Can we only do this if we know that we're working with `onchange`. This is going to have a significant hit on performance otherwise.",
        "pr_file_module": null
      },
      {
        "comment_id": "1923837525",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15069,
        "pr_file": "packages/svelte/src/internal/client/proxy.js",
        "discussion_id": "1923743531",
        "commented_code": "@@ -167,7 +170,13 @@ export function proxy(value, parent = null, prev) {\n \t\t\t\treturn v === UNINITIALIZED ? undefined : v;\n \t\t\t}\n \n-\t\t\treturn Reflect.get(target, prop, receiver);\n+\t\t\tv = Reflect.get(target, prop, receiver);\n+\n+\t\t\tif (is_proxied_array && array_methods.includes(/** @type {string} */ (prop))) {\n+\t\t\t\treturn batch_onchange(v);",
        "comment_created_at": "2025-01-21T14:32:26+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "Came here to say the same https://github.com/sveltejs/svelte/pull/15073#issuecomment-2604895320",
        "pr_file_module": null
      },
      {
        "comment_id": "1923848791",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15069,
        "pr_file": "packages/svelte/src/internal/client/proxy.js",
        "discussion_id": "1923743531",
        "commented_code": "@@ -167,7 +170,13 @@ export function proxy(value, parent = null, prev) {\n \t\t\t\treturn v === UNINITIALIZED ? undefined : v;\n \t\t\t}\n \n-\t\t\treturn Reflect.get(target, prop, receiver);\n+\t\t\tv = Reflect.get(target, prop, receiver);\n+\n+\t\t\tif (is_proxied_array && array_methods.includes(/** @type {string} */ (prop))) {\n+\t\t\t\treturn batch_onchange(v);",
        "comment_created_at": "2025-01-21T14:38:43+00:00",
        "comment_author": "paoloricciuti",
        "comment_body": "Added an extra check for this.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1896803372",
    "pr_number": 14816,
    "pr_file": "packages/svelte/src/internal/client/dom/elements/bindings/select.js",
    "created_at": "2024-12-24T14:47:32+00:00",
    "commented_code": "}\n \n /**\n- * @template V\n  * @param {HTMLSelectElement} select\n- * @param {V} value\n+ * @param {unknown[]} value\n  */\n function select_options(select, value) {\n \tfor (var option of select.options) {\n-\t\t// @ts-ignore\n-\t\toption.selected = ~value.indexOf(get_option_value(option));\n+\t\toption.selected = value.includes(get_option_value(option));",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1896803372",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14816,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/bindings/select.js",
        "discussion_id": "1896803372",
        "commented_code": "@@ -124,14 +137,12 @@ export function bind_select_value(select, get, set = get) {\n }\n \n /**\n- * @template V\n  * @param {HTMLSelectElement} select\n- * @param {V} value\n+ * @param {unknown[]} value\n  */\n function select_options(select, value) {\n \tfor (var option of select.options) {\n-\t\t// @ts-ignore\n-\t\toption.selected = ~value.indexOf(get_option_value(option));\n+\t\toption.selected = value.includes(get_option_value(option));",
        "comment_created_at": "2024-12-24T14:47:32+00:00",
        "comment_author": "paoloricciuti",
        "comment_body": "I'm pretty sure this has performance implications...I don't know why it was written this way tho",
        "pr_file_module": null
      },
      {
        "comment_id": "1896853945",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14816,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/bindings/select.js",
        "discussion_id": "1896803372",
        "commented_code": "@@ -124,14 +137,12 @@ export function bind_select_value(select, get, set = get) {\n }\n \n /**\n- * @template V\n  * @param {HTMLSelectElement} select\n- * @param {V} value\n+ * @param {unknown[]} value\n  */\n function select_options(select, value) {\n \tfor (var option of select.options) {\n-\t\t// @ts-ignore\n-\t\toption.selected = ~value.indexOf(get_option_value(option));\n+\t\toption.selected = value.includes(get_option_value(option));",
        "comment_created_at": "2024-12-24T16:15:12+00:00",
        "comment_author": "GauBen",
        "comment_body": "If we want better (theoretical) performance, we should use neither `.indexOf` nor `.includes` (code  will be `O(select.options.length * value.length)`) but rewrite it as\r\n\r\n```ts\r\nconst values = new Set(value);\r\nfor (var option of select.options) {\r\n  option.selected = values.has(get_option_value(option));\r\n}\r\n```\r\n\r\nwhich is now `O(select.options.length + value.length)`\r\n\r\nWe'll see what perf addicts say of this :eyes:",
        "pr_file_module": null
      },
      {
        "comment_id": "1896858694",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14816,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/bindings/select.js",
        "discussion_id": "1896803372",
        "commented_code": "@@ -124,14 +137,12 @@ export function bind_select_value(select, get, set = get) {\n }\n \n /**\n- * @template V\n  * @param {HTMLSelectElement} select\n- * @param {V} value\n+ * @param {unknown[]} value\n  */\n function select_options(select, value) {\n \tfor (var option of select.options) {\n-\t\t// @ts-ignore\n-\t\toption.selected = ~value.indexOf(get_option_value(option));\n+\t\toption.selected = value.includes(get_option_value(option));",
        "comment_created_at": "2024-12-24T16:23:34+00:00",
        "comment_author": "GauBen",
        "comment_body": "Includes is fast! https://www.measurethat.net/Benchmarks/Show/6029/0/some-vs-filter-vs-indexof-vs-includes",
        "pr_file_module": null
      },
      {
        "comment_id": "1896866429",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14816,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/bindings/select.js",
        "discussion_id": "1896803372",
        "commented_code": "@@ -124,14 +137,12 @@ export function bind_select_value(select, get, set = get) {\n }\n \n /**\n- * @template V\n  * @param {HTMLSelectElement} select\n- * @param {V} value\n+ * @param {unknown[]} value\n  */\n function select_options(select, value) {\n \tfor (var option of select.options) {\n-\t\t// @ts-ignore\n-\t\toption.selected = ~value.indexOf(get_option_value(option));\n+\t\toption.selected = value.includes(get_option_value(option));",
        "comment_created_at": "2024-12-24T16:39:07+00:00",
        "comment_author": "paoloricciuti",
        "comment_body": "It might be the better choice... I'm just saying that it seems an odd change I would like whoever wrote that code opinion on \ud83d\ude01",
        "pr_file_module": null
      },
      {
        "comment_id": "2098517358",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14816,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/bindings/select.js",
        "discussion_id": "1896803372",
        "commented_code": "@@ -124,14 +137,12 @@ export function bind_select_value(select, get, set = get) {\n }\n \n /**\n- * @template V\n  * @param {HTMLSelectElement} select\n- * @param {V} value\n+ * @param {unknown[]} value\n  */\n function select_options(select, value) {\n \tfor (var option of select.options) {\n-\t\t// @ts-ignore\n-\t\toption.selected = ~value.indexOf(get_option_value(option));\n+\t\toption.selected = value.includes(get_option_value(option));",
        "comment_created_at": "2025-05-20T17:30:02+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "it was probably me (I used to be quite fond of the `~array.indexOf` trick), and I probably wrote it before `includes` was implemented everywhere",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1981678707",
    "pr_number": 15443,
    "pr_file": "packages/svelte/src/internal/client/dom/elements/attributes.js",
    "created_at": "2025-03-05T15:39:55+00:00",
    "commented_code": "return current;\n }\n \n+/**\n+ *\n+ * @param {Element} element\n+ */\n+function get_attributes(element) {\n+\treturn /** @type {Record<string | symbol, unknown>} **/ (\n+\t\t// @ts-expect-error\n+\t\telement.__attributes ??= {\n+\t\t\t[IS_CUSTOM_ELEMENT]: element.nodeName.includes('-'),",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1981678707",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15443,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/attributes.js",
        "discussion_id": "1981678707",
        "commented_code": "@@ -448,6 +441,20 @@ export function set_attributes(\n \treturn current;\n }\n \n+/**\n+ *\n+ * @param {Element} element\n+ */\n+function get_attributes(element) {\n+\treturn /** @type {Record<string | symbol, unknown>} **/ (\n+\t\t// @ts-expect-error\n+\t\telement.__attributes ??= {\n+\t\t\t[IS_CUSTOM_ELEMENT]: element.nodeName.includes('-'),",
        "comment_created_at": "2025-03-05T15:39:55+00:00",
        "comment_author": "trueadm",
        "comment_body": "It would be good to get an idea from our website or something how many times this is normally called. If it's a lot then we probably want to avoid it for the simple element case \u2013 which is the vast majority of elements.",
        "pr_file_module": null
      },
      {
        "comment_id": "1981761336",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15443,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/attributes.js",
        "discussion_id": "1981678707",
        "commented_code": "@@ -448,6 +441,20 @@ export function set_attributes(\n \treturn current;\n }\n \n+/**\n+ *\n+ * @param {Element} element\n+ */\n+function get_attributes(element) {\n+\treturn /** @type {Record<string | symbol, unknown>} **/ (\n+\t\t// @ts-expect-error\n+\t\telement.__attributes ??= {\n+\t\t\t[IS_CUSTOM_ELEMENT]: element.nodeName.includes('-'),",
        "comment_created_at": "2025-03-05T16:25:51+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "For svelte.dev it's 147, for svelte.dev/playground it's 260, for svelte.dev/tutorial it's 302. If you interact with the search box it will increase by a few hundred. Obviously if you had a very large list then it would be more, but the upshot is that we're typically talking about hundreds of operations.\r\n\r\nI don't know if this is a valid microbenchmark, but on this M1 MBP I can run the check 10,000 times (i.e. `run(1e4)` before it takes more than a single millisecond:\r\n\r\n```js\r\nfunction run(i = 1e6) {\r\n  console.time('test');\r\n  let div = document.createElement('div');\r\n  while (i--) {\r\n    div.nodeName.includes('-');\r\n    div.namespaceURI === 'http://www.w3.org/1999/xhtml';\r\n  }\r\n  console.timeEnd('test');\r\n}\r\n```\r\n\r\nSo... it's measurable, but seems pretty negligible. I don't know, what do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "1981768512",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15443,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/attributes.js",
        "discussion_id": "1981678707",
        "commented_code": "@@ -448,6 +441,20 @@ export function set_attributes(\n \treturn current;\n }\n \n+/**\n+ *\n+ * @param {Element} element\n+ */\n+function get_attributes(element) {\n+\treturn /** @type {Record<string | symbol, unknown>} **/ (\n+\t\t// @ts-expect-error\n+\t\telement.__attributes ??= {\n+\t\t\t[IS_CUSTOM_ELEMENT]: element.nodeName.includes('-'),",
        "comment_created_at": "2025-03-05T16:29:18+00:00",
        "comment_author": "trueadm",
        "comment_body": "What if you create the elements and attach them to the DOM and then test the lookup cost? It seems more realistic to check attached elements and to remove the cost of creating the DOM element from the benchmark.",
        "pr_file_module": null
      },
      {
        "comment_id": "1981779270",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15443,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/attributes.js",
        "discussion_id": "1981678707",
        "commented_code": "@@ -448,6 +441,20 @@ export function set_attributes(\n \treturn current;\n }\n \n+/**\n+ *\n+ * @param {Element} element\n+ */\n+function get_attributes(element) {\n+\treturn /** @type {Record<string | symbol, unknown>} **/ (\n+\t\t// @ts-expect-error\n+\t\telement.__attributes ??= {\n+\t\t\t[IS_CUSTOM_ELEMENT]: element.nodeName.includes('-'),",
        "comment_created_at": "2025-03-05T16:35:43+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "Makes no real difference \r\n\r\n```js\r\nfunction run(i = 1e6) {\r\n  let div = document.createElement('div');\r\n  document.body.append(div);\r\n  console.time('test');\r\n  while (i--) {\r\n    div.nodeName.includes('-');\r\n    div.namespaceURI === 'http://www.w3.org/1999/xhtml';\r\n  }\r\n  console.timeEnd('test');\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1981783974",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15443,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/attributes.js",
        "discussion_id": "1981678707",
        "commented_code": "@@ -448,6 +441,20 @@ export function set_attributes(\n \treturn current;\n }\n \n+/**\n+ *\n+ * @param {Element} element\n+ */\n+function get_attributes(element) {\n+\treturn /** @type {Record<string | symbol, unknown>} **/ (\n+\t\t// @ts-expect-error\n+\t\telement.__attributes ??= {\n+\t\t\t[IS_CUSTOM_ELEMENT]: element.nodeName.includes('-'),",
        "comment_created_at": "2025-03-05T16:38:21+00:00",
        "comment_author": "trueadm",
        "comment_body": "I mean:\r\n\r\n```js\r\nfunction run(i = 1e6) {\r\n  const els = Array(1e6);\r\n  let s = i;\r\n  while (s--) {\r\n    let div = document.createElement('div');\r\n    document.body.append(div);\r\n    els[s] = div;\r\n  }\r\n  console.time('test');\r\n  while (i--) {\r\n    const div = els[i];\r\n    div.nodeName.includes('-');\r\n    div.namespaceURI === 'http://www.w3.org/1999/xhtml';\r\n  }\r\n  console.timeEnd('test');\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1981792689",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15443,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/attributes.js",
        "discussion_id": "1981678707",
        "commented_code": "@@ -448,6 +441,20 @@ export function set_attributes(\n \treturn current;\n }\n \n+/**\n+ *\n+ * @param {Element} element\n+ */\n+function get_attributes(element) {\n+\treturn /** @type {Record<string | symbol, unknown>} **/ (\n+\t\t// @ts-expect-error\n+\t\telement.__attributes ??= {\n+\t\t\t[IS_CUSTOM_ELEMENT]: element.nodeName.includes('-'),",
        "comment_created_at": "2025-03-05T16:43:34+00:00",
        "comment_author": "trueadm",
        "comment_body": "Still looks good though, let's ship it and if needed we can revisit and optimise in the future.",
        "pr_file_module": null
      },
      {
        "comment_id": "1981795101",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15443,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/attributes.js",
        "discussion_id": "1981678707",
        "commented_code": "@@ -448,6 +441,20 @@ export function set_attributes(\n \treturn current;\n }\n \n+/**\n+ *\n+ * @param {Element} element\n+ */\n+function get_attributes(element) {\n+\treturn /** @type {Record<string | symbol, unknown>} **/ (\n+\t\t// @ts-expect-error\n+\t\telement.__attributes ??= {\n+\t\t\t[IS_CUSTOM_ELEMENT]: element.nodeName.includes('-'),",
        "comment_created_at": "2025-03-05T16:45:09+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "Try it! The results are basically the same. Though the code above isn't correct, it should be this:\r\n\r\n```js\r\nfunction run(n = 1e6) {\r\n  const els = Array(n);\r\n  let i = n;\r\n  while (i--) {\r\n    let div = document.createElement('div');\r\n    document.body.append(div);\r\n    els[i] = div;\r\n  }\r\n  console.time('test');\r\n  i = n;\r\n  while (i--) {\r\n    const div = els[i];\r\n    div.nodeName.includes('-');\r\n    div.namespaceURI === 'http://www.w3.org/1999/xhtml';\r\n  }\r\n  console.timeEnd('test');\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1877663195",
    "pr_number": 14116,
    "pr_file": "packages/svelte/src/internal/client/dom/elements/misc.js",
    "created_at": "2024-12-10T09:14:24+00:00",
    "commented_code": ");\n \t}\n }\n+\n+/**\n+ * @param {string} text\n+ */\n+export function title(text) {\n+\trender_effect(() => {\n+\t\tconst previous = document.title;\n+\t\tdocument.title = text;\n+\n+\t\treturn () => {\n+\t\t\tdocument.title = previous;",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1877663195",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14116,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/misc.js",
        "discussion_id": "1877663195",
        "commented_code": "@@ -56,3 +57,17 @@ export function add_form_reset_listener() {\n \t\t);\n \t}\n }\n+\n+/**\n+ * @param {string} text\n+ */\n+export function title(text) {\n+\trender_effect(() => {\n+\t\tconst previous = document.title;\n+\t\tdocument.title = text;\n+\n+\t\treturn () => {\n+\t\t\tdocument.title = previous;",
        "comment_created_at": "2024-12-10T09:14:24+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "We can also do this, would handle the case described in https://github.com/sveltejs/svelte/pull/14116/files#r1876874053\r\n```suggestion\r\n\t\tconst previous = document.title;\r\n\t\tconst own = {};\r\n\t\t// @ts-expect-error\r\n\t\tdocument._last_title_setter = own;\r\n\t\tdocument.title = text;\r\n\r\n\t\treturn () => {\r\n\t\t\t// @ts-expect-error\r\n\t\t\tif (document._last_title_setter === own) {\r\n\t\t\t\tdocument.title = previous;\r\n\t\t\t}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1877669115",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14116,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/misc.js",
        "discussion_id": "1877663195",
        "commented_code": "@@ -56,3 +57,17 @@ export function add_form_reset_listener() {\n \t\t);\n \t}\n }\n+\n+/**\n+ * @param {string} text\n+ */\n+export function title(text) {\n+\trender_effect(() => {\n+\t\tconst previous = document.title;\n+\t\tdocument.title = text;\n+\n+\t\treturn () => {\n+\t\t\tdocument.title = previous;",
        "comment_created_at": "2024-12-10T09:16:40+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "Looking at how the code is generated, we should switch it up anyway - right now if your title would contain dynamic content, you would set it two times on an update - once to revert to the previous value, then right away again for the updated value. Wasteful.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1838647187",
    "pr_number": 14269,
    "pr_file": "packages/svelte/src/compiler/phases/3-transform/client/visitors/shared/fragment.js",
    "created_at": "2024-11-12T19:25:00+00:00",
    "commented_code": "} else if (has_state && !within_bound_contenteditable) {\n \t\t\tstate.update.push(update);\n \t\t} else {\n-\t\t\tstate.init.push(b.stmt(b.assignment('=', b.member(id, 'nodeValue'), value)));\n+\t\t\t// if the expression is inlinable we just push it to the template\n+\t\t\tif (is_inlinable_expression(sequence, state.scope) && !is_text) {",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1838647187",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14269,
        "pr_file": "packages/svelte/src/compiler/phases/3-transform/client/visitors/shared/fragment.js",
        "discussion_id": "1838647187",
        "commented_code": "@@ -83,7 +83,14 @@ export function process_children(nodes, initial, is_element, { visit, state }) {\n \t\t} else if (has_state && !within_bound_contenteditable) {\n \t\t\tstate.update.push(update);\n \t\t} else {\n-\t\t\tstate.init.push(b.stmt(b.assignment('=', b.member(id, 'nodeValue'), value)));\n+\t\t\t// if the expression is inlinable we just push it to the template\n+\t\t\tif (is_inlinable_expression(sequence, state.scope) && !is_text) {",
        "comment_created_at": "2024-11-12T19:25:00+00:00",
        "comment_author": "benmccann",
        "comment_body": "it might be a bit more performant to do the simple check first and only call the function if needed\r\n```suggestion\r\n\t\t\tif (!is_text && is_inlinable_expression(sequence, state.scope)) {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1838711098",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14269,
        "pr_file": "packages/svelte/src/compiler/phases/3-transform/client/visitors/shared/fragment.js",
        "discussion_id": "1838647187",
        "commented_code": "@@ -83,7 +83,14 @@ export function process_children(nodes, initial, is_element, { visit, state }) {\n \t\t} else if (has_state && !within_bound_contenteditable) {\n \t\t\tstate.update.push(update);\n \t\t} else {\n-\t\t\tstate.init.push(b.stmt(b.assignment('=', b.member(id, 'nodeValue'), value)));\n+\t\t\t// if the expression is inlinable we just push it to the template\n+\t\t\tif (is_inlinable_expression(sequence, state.scope) && !is_text) {",
        "comment_created_at": "2024-11-12T20:10:54+00:00",
        "comment_author": "paoloricciuti",
        "comment_body": "Oh yeah",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1793400057",
    "pr_number": 13542,
    "pr_file": "packages/svelte/src/internal/client/render.js",
    "created_at": "2024-10-09T12:05:48+00:00",
    "commented_code": "* @returns {void}\n  */\n export function set_text(text, value) {\n+\t// For objects, we apply string coercion before diffing\n+\tif (typeof value === 'object' && value !== null) {\n+\t\tvalue = value + '';\n+\t}",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1793400057",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 13542,
        "pr_file": "packages/svelte/src/internal/client/render.js",
        "discussion_id": "1793400057",
        "commented_code": "@@ -48,6 +48,10 @@ export function set_should_intro(value) {\n  * @returns {void}\n  */\n export function set_text(text, value) {\n+\t// For objects, we apply string coercion before diffing\n+\tif (typeof value === 'object' && value !== null) {\n+\t\tvalue = value + '';\n+\t}",
        "comment_created_at": "2024-10-09T12:05:48+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "I think it was you who taught me that we should avoid reassigning parameters, since mutating the `arguments` object carries overhead. Should it be something like this instead?\r\n\r\n```suggestion\r\n\tvar str = value == null ? '' : typeof value === 'object' ? value + '' : value;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1793402924",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 13542,
        "pr_file": "packages/svelte/src/internal/client/render.js",
        "discussion_id": "1793400057",
        "commented_code": "@@ -48,6 +48,10 @@ export function set_should_intro(value) {\n  * @returns {void}\n  */\n export function set_text(text, value) {\n+\t// For objects, we apply string coercion before diffing\n+\tif (typeof value === 'object' && value !== null) {\n+\t\tvalue = value + '';\n+\t}",
        "comment_created_at": "2024-10-09T12:08:05+00:00",
        "comment_author": "trueadm",
        "comment_body": "Good point!",
        "pr_file_module": null
      },
      {
        "comment_id": "1794523760",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 13542,
        "pr_file": "packages/svelte/src/internal/client/render.js",
        "discussion_id": "1793400057",
        "commented_code": "@@ -48,6 +48,10 @@ export function set_should_intro(value) {\n  * @returns {void}\n  */\n export function set_text(text, value) {\n+\t// For objects, we apply string coercion before diffing\n+\tif (typeof value === 'object' && value !== null) {\n+\t\tvalue = value + '';\n+\t}",
        "comment_created_at": "2024-10-10T02:34:43+00:00",
        "comment_author": "Azarattum",
        "comment_body": "> mutating the arguments object carries overhead\r\n\r\nThat is an interesting observation. Could you point to any sources? I couldn't find any measurable difference between two approaches https://jsben.ch/Op7ml ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1722285993",
    "pr_number": 12912,
    "pr_file": "packages/svelte/src/internal/client/proxy.js",
    "created_at": "2024-08-19T20:00:50+00:00",
    "commented_code": "const prototype = get_prototype_of(value);\n \n \t\tif (prototype === object_prototype || prototype === array_prototype) {\n-\t\t\tconst proxy = new Proxy(value, state_proxy_handler);\n-\n-\t\t\tdefine_property(value, STATE_SYMBOL, {\n-\t\t\t\tvalue: /** @type {ProxyMetadata} */ ({\n-\t\t\t\t\ts: new Map(),\n-\t\t\t\t\tv: source(0),\n-\t\t\t\t\ta: is_array(value),\n-\t\t\t\t\tp: proxy,\n-\t\t\t\t\tt: value\n-\t\t\t\t}),\n-\t\t\t\twritable: true,\n-\t\t\t\tenumerable: false\n+\t\t\tlet metadata = /** @type {ProxyMetadata} */ ({",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1722285993",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12912,
        "pr_file": "packages/svelte/src/internal/client/proxy.js",
        "discussion_id": "1722285993",
        "commented_code": "@@ -46,34 +46,195 @@ export function proxy(value, parent = null, prev) {\n \t\tconst prototype = get_prototype_of(value);\n \n \t\tif (prototype === object_prototype || prototype === array_prototype) {\n-\t\t\tconst proxy = new Proxy(value, state_proxy_handler);\n-\n-\t\t\tdefine_property(value, STATE_SYMBOL, {\n-\t\t\t\tvalue: /** @type {ProxyMetadata} */ ({\n-\t\t\t\t\ts: new Map(),\n-\t\t\t\t\tv: source(0),\n-\t\t\t\t\ta: is_array(value),\n-\t\t\t\t\tp: proxy,\n-\t\t\t\t\tt: value\n-\t\t\t\t}),\n-\t\t\t\twritable: true,\n-\t\t\t\tenumerable: false\n+\t\t\tlet metadata = /** @type {ProxyMetadata} */ ({",
        "comment_created_at": "2024-08-19T20:00:50+00:00",
        "comment_author": "trueadm",
        "comment_body": "I wonder if it's faster to avoid using an object here and just use variables.",
        "pr_file_module": null
      },
      {
        "comment_id": "1722289668",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12912,
        "pr_file": "packages/svelte/src/internal/client/proxy.js",
        "discussion_id": "1722285993",
        "commented_code": "@@ -46,34 +46,195 @@ export function proxy(value, parent = null, prev) {\n \t\tconst prototype = get_prototype_of(value);\n \n \t\tif (prototype === object_prototype || prototype === array_prototype) {\n-\t\t\tconst proxy = new Proxy(value, state_proxy_handler);\n-\n-\t\t\tdefine_property(value, STATE_SYMBOL, {\n-\t\t\t\tvalue: /** @type {ProxyMetadata} */ ({\n-\t\t\t\t\ts: new Map(),\n-\t\t\t\t\tv: source(0),\n-\t\t\t\t\ta: is_array(value),\n-\t\t\t\t\tp: proxy,\n-\t\t\t\t\tt: value\n-\t\t\t\t}),\n-\t\t\t\twritable: true,\n-\t\t\t\tenumerable: false\n+\t\t\tlet metadata = /** @type {ProxyMetadata} */ ({",
        "comment_created_at": "2024-08-19T20:04:29+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "probably. there's still a few places where we need to expose these properties to the world (via the `STATE_SYMBOL` property) so we can't totally get rid of it, but will make that change",
        "pr_file_module": null
      }
    ]
  }
]