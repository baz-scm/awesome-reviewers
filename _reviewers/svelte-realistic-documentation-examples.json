[
  {
    "discussion_id": "2040675150",
    "pr_number": 15069,
    "pr_file": "documentation/docs/02-runes/02-$state.md",
    "created_at": "2025-04-12T15:11:22+00:00",
    "commented_code": "This can improve performance with large arrays and objects that you weren't planning to mutate anyway, since it avoids the cost of making them reactive. Note that raw state can _contain_ reactive state (for example, a raw array of reactive objects).\n \n+## State options\n+\n+Both `$state` and `$state.raw` can optionally accept a second argument. This allows you to specify an `onchange` function that will be called synchronously whenever the state value changes (for `$state` it will also be called for deep mutations).\n+\n+The `onchange` function is untracked so even if you assign within an `$effect` it will not cause unwanted dependencies.\n+\n+```js\n+let count = $state(0, {\n+\tonchange(){\n+\t\tconsole.log(\"count is now\", count);\n+\t}\n+});\n+\n+// this will log \"count is now 1\"\n+count++;\n+```\n+\n+this could be especially useful if you want to sync some stateful variable that could be mutated without using an effect.\n+\n+```js\n+let array = $state([], {\n+\tonchange(){\n+\t\tlocalStorage.setItem('array', JSON.stringify(array));\n+\t}\n+});\n+\n+array.push(array.length);\n+```",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "2040675150",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15069,
        "pr_file": "documentation/docs/02-runes/02-$state.md",
        "discussion_id": "2040675150",
        "commented_code": "@@ -147,6 +147,35 @@ person = {\n \n This can improve performance with large arrays and objects that you weren't planning to mutate anyway, since it avoids the cost of making them reactive. Note that raw state can _contain_ reactive state (for example, a raw array of reactive objects).\n \n+## State options\n+\n+Both `$state` and `$state.raw` can optionally accept a second argument. This allows you to specify an `onchange` function that will be called synchronously whenever the state value changes (for `$state` it will also be called for deep mutations).\n+\n+The `onchange` function is untracked so even if you assign within an `$effect` it will not cause unwanted dependencies.\n+\n+```js\n+let count = $state(0, {\n+\tonchange(){\n+\t\tconsole.log(\"count is now\", count);\n+\t}\n+});\n+\n+// this will log \"count is now 1\"\n+count++;\n+```\n+\n+this could be especially useful if you want to sync some stateful variable that could be mutated without using an effect.\n+\n+```js\n+let array = $state([], {\n+\tonchange(){\n+\t\tlocalStorage.setItem('array', JSON.stringify(array));\n+\t}\n+});\n+\n+array.push(array.length);\n+```",
        "comment_created_at": "2025-04-12T15:11:22+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "even though localStorage was one of the primary motivators for this work I think we need to omit it from these docs, because it's just too hard to illustrate concisely without cutting corners:\r\n\r\n- needs to accept initial data _without_ blowing up in SSR (i.e. needs `typeof localStorage` checks etc)\r\n- needs to be composable\r\n- needs to react to `storage` events, which basically means using `createSubscriber` which is a whole thing\r\n\r\nI think a simpler and clearer example would be validation. Will push a change",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2208366031",
    "pr_number": 16376,
    "pr_file": "documentation/docs/02-runes/04-$effect.md",
    "created_at": "2025-07-15T18:49:22+00:00",
    "commented_code": "It is used to implement abstractions like [`createSubscriber`](/docs/svelte/svelte-reactivity#createSubscriber), which will create listeners to update reactive values but _only_ if those values are being tracked (rather than, for example, read inside an event handler).\n \n+## `$effect.pending`\n+\n+When using [`await`](await-expressions) in components, the `$effect.pending()` rune tells you how many promises are pending in the current [boundary](svelte-boundary), not including child boundaries ([demo](/playground/untitled#H4sIAAAAAAAAE3WRMU_DMBCF_8rJdHDUqilILGkaiY2RgY0yOPYZWbiOFV8IleX_jpMUEAIWS_7u-d27c2ROnJBV7B6t7WDsequAozKEqmAbpo3FwKqnyOjsJ90EMr-8uvN-G97Q0sRaEfAvLjtH6CjbsDrI3nhqju5IFgkEHGAVSBDy62L_SdtvejPTzEU4Owl6cJJM50AoxcUG2gLiVM31URgChyM89N3JBORcF3BoICA9mhN2A3G9gdvdrij2UJYgejLaSCMsKLTivNj0SEOf7WEN7ZwnHV1dfqd2dTsQ5QCdk9bI10PkcxexXqcmH3W51Jt_le2kbH8os9Y3UaTcNLYpDx-Xab6GTHXpZ128MhpWqDVK2np0yrgXXqQpaLa4APDLBkIF8bd2sYql0Sn_DeE7sYr6AdNzvgljR-MUq7SwAdMHeUtgHR4CAAA=)):",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "2208366031",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 16376,
        "pr_file": "documentation/docs/02-runes/04-$effect.md",
        "discussion_id": "2208366031",
        "commented_code": "@@ -221,6 +221,21 @@ The `$effect.tracking` rune is an advanced feature that tells you whether or not\n \n It is used to implement abstractions like [`createSubscriber`](/docs/svelte/svelte-reactivity#createSubscriber), which will create listeners to update reactive values but _only_ if those values are being tracked (rather than, for example, read inside an event handler).\n \n+## `$effect.pending`\n+\n+When using [`await`](await-expressions) in components, the `$effect.pending()` rune tells you how many promises are pending in the current [boundary](svelte-boundary), not including child boundaries ([demo](/playground/untitled#H4sIAAAAAAAAE3WRMU_DMBCF_8rJdHDUqilILGkaiY2RgY0yOPYZWbiOFV8IleX_jpMUEAIWS_7u-d27c2ROnJBV7B6t7WDsequAozKEqmAbpo3FwKqnyOjsJ90EMr-8uvN-G97Q0sRaEfAvLjtH6CjbsDrI3nhqju5IFgkEHGAVSBDy62L_SdtvejPTzEU4Owl6cJJM50AoxcUG2gLiVM31URgChyM89N3JBORcF3BoICA9mhN2A3G9gdvdrij2UJYgejLaSCMsKLTivNj0SEOf7WEN7ZwnHV1dfqd2dTsQ5QCdk9bI10PkcxexXqcmH3W51Jt_le2kbH8os9Y3UaTcNLYpDx-Xab6GTHXpZ128MhpWqDVK2np0yrgXXqQpaLa4APDLBkIF8bd2sYql0Sn_DeE7sYr6AdNzvgljR-MUq7SwAdMHeUtgHR4CAAA=)):",
        "comment_created_at": "2025-07-15T18:49:22+00:00",
        "comment_author": "Conduitry",
        "comment_body": "I'm trying unsuccessfully to think of a non-contrived example that doesn't just use 0 vs >0. I'm guessing that's exactly how we ended up with this contrived example here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2208381112",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 16376,
        "pr_file": "documentation/docs/02-runes/04-$effect.md",
        "discussion_id": "2208366031",
        "commented_code": "@@ -221,6 +221,21 @@ The `$effect.tracking` rune is an advanced feature that tells you whether or not\n \n It is used to implement abstractions like [`createSubscriber`](/docs/svelte/svelte-reactivity#createSubscriber), which will create listeners to update reactive values but _only_ if those values are being tracked (rather than, for example, read inside an event handler).\n \n+## `$effect.pending`\n+\n+When using [`await`](await-expressions) in components, the `$effect.pending()` rune tells you how many promises are pending in the current [boundary](svelte-boundary), not including child boundaries ([demo](/playground/untitled#H4sIAAAAAAAAE3WRMU_DMBCF_8rJdHDUqilILGkaiY2RgY0yOPYZWbiOFV8IleX_jpMUEAIWS_7u-d27c2ROnJBV7B6t7WDsequAozKEqmAbpo3FwKqnyOjsJ90EMr-8uvN-G97Q0sRaEfAvLjtH6CjbsDrI3nhqju5IFgkEHGAVSBDy62L_SdtvejPTzEU4Owl6cJJM50AoxcUG2gLiVM31URgChyM89N3JBORcF3BoICA9mhN2A3G9gdvdrij2UJYgejLaSCMsKLTivNj0SEOf7WEN7ZwnHV1dfqd2dTsQ5QCdk9bI10PkcxexXqcmH3W51Jt_le2kbH8os9Y3UaTcNLYpDx-Xab6GTHXpZ128MhpWqDVK2np0yrgXXqQpaLa4APDLBkIF8bd2sYql0Sn_DeE7sYr6AdNzvgljR-MUq7SwAdMHeUtgHR4CAAA=)):",
        "comment_created_at": "2025-07-15T18:52:43+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "You could imagine someone doing something cute like\r\n\r\n```js\r\nexport const messages = [\r\n  \"reticulating splines...\",\r\n  \"generating witty dialog...\",\r\n  \"swapping time and space...\",\r\n  \"640K ought to be enough for anybody\",\r\n  \"checking the gravitational constant in your locale...\",\r\n  \"keep calm and npm install\",\r\n  \"counting backwards from Infinity\",\r\n  \"I'm sorry Dave, I can't do that.\",\r\n  \"adjusting flux capacitor...\",\r\n  \"constructing additional pylons...\",\r\n  \"rm -rf /\",\r\n];\r\n\r\nconst loading_message = $derived(messages[$effect.pending() % messages.length]);\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2208401251",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 16376,
        "pr_file": "documentation/docs/02-runes/04-$effect.md",
        "discussion_id": "2208366031",
        "commented_code": "@@ -221,6 +221,21 @@ The `$effect.tracking` rune is an advanced feature that tells you whether or not\n \n It is used to implement abstractions like [`createSubscriber`](/docs/svelte/svelte-reactivity#createSubscriber), which will create listeners to update reactive values but _only_ if those values are being tracked (rather than, for example, read inside an event handler).\n \n+## `$effect.pending`\n+\n+When using [`await`](await-expressions) in components, the `$effect.pending()` rune tells you how many promises are pending in the current [boundary](svelte-boundary), not including child boundaries ([demo](/playground/untitled#H4sIAAAAAAAAE3WRMU_DMBCF_8rJdHDUqilILGkaiY2RgY0yOPYZWbiOFV8IleX_jpMUEAIWS_7u-d27c2ROnJBV7B6t7WDsequAozKEqmAbpo3FwKqnyOjsJ90EMr-8uvN-G97Q0sRaEfAvLjtH6CjbsDrI3nhqju5IFgkEHGAVSBDy62L_SdtvejPTzEU4Owl6cJJM50AoxcUG2gLiVM31URgChyM89N3JBORcF3BoICA9mhN2A3G9gdvdrij2UJYgejLaSCMsKLTivNj0SEOf7WEN7ZwnHV1dfqd2dTsQ5QCdk9bI10PkcxexXqcmH3W51Jt_le2kbH8os9Y3UaTcNLYpDx-Xab6GTHXpZ128MhpWqDVK2np0yrgXXqQpaLa4APDLBkIF8bd2sYql0Sn_DeE7sYr6AdNzvgljR-MUq7SwAdMHeUtgHR4CAAA=)):",
        "comment_created_at": "2025-07-15T18:57:46+00:00",
        "comment_author": "Conduitry",
        "comment_body": "Oh. Cute, okay. My comment/question was less of a 'why does this feature exist?' and more of a 'what can we show here in the docs that doesn't feel contrived?'. I don't know that we'd want the distraction of an example like the one you just gave, though. I'm not sure.",
        "pr_file_module": null
      },
      {
        "comment_id": "2208419573",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 16376,
        "pr_file": "documentation/docs/02-runes/04-$effect.md",
        "discussion_id": "2208366031",
        "commented_code": "@@ -221,6 +221,21 @@ The `$effect.tracking` rune is an advanced feature that tells you whether or not\n \n It is used to implement abstractions like [`createSubscriber`](/docs/svelte/svelte-reactivity#createSubscriber), which will create listeners to update reactive values but _only_ if those values are being tracked (rather than, for example, read inside an event handler).\n \n+## `$effect.pending`\n+\n+When using [`await`](await-expressions) in components, the `$effect.pending()` rune tells you how many promises are pending in the current [boundary](svelte-boundary), not including child boundaries ([demo](/playground/untitled#H4sIAAAAAAAAE3WRMU_DMBCF_8rJdHDUqilILGkaiY2RgY0yOPYZWbiOFV8IleX_jpMUEAIWS_7u-d27c2ROnJBV7B6t7WDsequAozKEqmAbpo3FwKqnyOjsJ90EMr-8uvN-G97Q0sRaEfAvLjtH6CjbsDrI3nhqju5IFgkEHGAVSBDy62L_SdtvejPTzEU4Owl6cJJM50AoxcUG2gLiVM31URgChyM89N3JBORcF3BoICA9mhN2A3G9gdvdrij2UJYgejLaSCMsKLTivNj0SEOf7WEN7ZwnHV1dfqd2dTsQ5QCdk9bI10PkcxexXqcmH3W51Jt_le2kbH8os9Y3UaTcNLYpDx-Xab6GTHXpZ128MhpWqDVK2np0yrgXXqQpaLa4APDLBkIF8bd2sYql0Sn_DeE7sYr6AdNzvgljR-MUq7SwAdMHeUtgHR4CAAA=)):",
        "comment_created_at": "2025-07-15T19:02:51+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "yeah, that was my thought process too\u00a0\u2014\u00a0figured this would get the point across most concisely",
        "pr_file_module": null
      },
      {
        "comment_id": "2208453175",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 16376,
        "pr_file": "documentation/docs/02-runes/04-$effect.md",
        "discussion_id": "2208366031",
        "commented_code": "@@ -221,6 +221,21 @@ The `$effect.tracking` rune is an advanced feature that tells you whether or not\n \n It is used to implement abstractions like [`createSubscriber`](/docs/svelte/svelte-reactivity#createSubscriber), which will create listeners to update reactive values but _only_ if those values are being tracked (rather than, for example, read inside an event handler).\n \n+## `$effect.pending`\n+\n+When using [`await`](await-expressions) in components, the `$effect.pending()` rune tells you how many promises are pending in the current [boundary](svelte-boundary), not including child boundaries ([demo](/playground/untitled#H4sIAAAAAAAAE3WRMU_DMBCF_8rJdHDUqilILGkaiY2RgY0yOPYZWbiOFV8IleX_jpMUEAIWS_7u-d27c2ROnJBV7B6t7WDsequAozKEqmAbpo3FwKqnyOjsJ90EMr-8uvN-G97Q0sRaEfAvLjtH6CjbsDrI3nhqju5IFgkEHGAVSBDy62L_SdtvejPTzEU4Owl6cJJM50AoxcUG2gLiVM31URgChyM89N3JBORcF3BoICA9mhN2A3G9gdvdrij2UJYgejLaSCMsKLTivNj0SEOf7WEN7ZwnHV1dfqd2dTsQ5QCdk9bI10PkcxexXqcmH3W51Jt_le2kbH8os9Y3UaTcNLYpDx-Xab6GTHXpZ128MhpWqDVK2np0yrgXXqQpaLa4APDLBkIF8bd2sYql0Sn_DeE7sYr6AdNzvgljR-MUq7SwAdMHeUtgHR4CAAA=)):",
        "comment_created_at": "2025-07-15T19:16:39+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "thought about something like [this](https://svelte.dev/playground/hello-world?version=5.36.1#H4sIAAAAAAAAE3VSwY6bMBD9lamzWpltEtg9sgRpL1UvlXrorenBC8PGWmMjewiJvPx7DYSkFe0BbL95780bsGda1MhS9hWVMtAZq0rgWErCMmJrVkmFjqU_PaNzM_AGIOAX1UvTbN0RFQ3Yq3D4L7wwmlBTsGGZK6xsKN_rPSkk6A6C8IgWdnDnKOx5Ej3PRTIk1KIyPFWrC5JGgxW6NDWPwI8lskit1aCxg-_W1NIh51UEu3wm7Mkh_ZA1mpY4HysV_ybosJ2ttmS-yBOW_CmK1vBXCR7gKUnmHNRPmz68wnKHVYXFbHpp98d8jxN51PyPfp14Km4b1KXUb4Fzfz9FqcWJj6z1khTdOmTx7UPr7LUNzhqMLpQs3nd-6nnN9jmE6_O2KcM5iyfyJGzysVcKflz7LG7yEV70DpQFdqEHwafNBrLGmjeLzsFRqBZDiuWU8fTPI_j4gKTPg_6iyWGzGa38Sla35HlgDTP71Tuer3A_fUy_QlEc4MVaceaPSdTPNyDk96ITkq7XZ046qOJBNbnGwTXsfCyrsISbTHgilpJtsf8VTkKqTuqSpZVQDvvf-aQbl0wDAAA=) and discovered that a) it doesn't decrement when it should and b) there's some weird NaN action happening \ud83e\udd14 \r\n\r\ninvestigating",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1949487161",
    "pr_number": 15257,
    "pr_file": "documentation/docs/03-template-syntax/01-basic-markup.md",
    "created_at": "2025-02-10T16:38:20+00:00",
    "commented_code": "{expression}\n ```\n \n+When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it. The conversion follows JavaScript's standard behavior:\n+\n+- Primitive values (number, boolean, string) are directly converted to strings.\n+- Objects call their .toString() method (if not overridden, it defaults to [object Object]).\n+- undefined and null are treated as empty strings (\"\").\n+\n+```svelte\n+<script>\n+\tlet num = 1;\n+\tlet bool = false;\n+\tlet obj = { key: \"value\" };\n+\tlet empty = undefined;\n+</script>\n+\n+<p>{num}</p>   <!-- Renders as: <p>1</p> -->\n+<p>{bool}</p>  <!-- Renders as: <p>false</p> -->\n+<p>{obj}</p>   <!-- Renders as: <p>[object Object]</p> -->\n+<p>{empty}</p> <!-- Renders as: <p></p> (empty string) -->",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1949487161",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15257,
        "pr_file": "documentation/docs/03-template-syntax/01-basic-markup.md",
        "discussion_id": "1949487161",
        "commented_code": "@@ -154,6 +177,26 @@ A JavaScript expression can be included as text by surrounding it with curly bra\n {expression}\n ```\n \n+When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it. The conversion follows JavaScript's standard behavior:\n+\n+- Primitive values (number, boolean, string) are directly converted to strings.\n+- Objects call their .toString() method (if not overridden, it defaults to [object Object]).\n+- undefined and null are treated as empty strings (\"\").\n+\n+```svelte\n+<script>\n+\tlet num = 1;\n+\tlet bool = false;\n+\tlet obj = { key: \"value\" };\n+\tlet empty = undefined;\n+</script>\n+\n+<p>{num}</p>   <!-- Renders as: <p>1</p> -->\n+<p>{bool}</p>  <!-- Renders as: <p>false</p> -->\n+<p>{obj}</p>   <!-- Renders as: <p>[object Object]</p> -->\n+<p>{empty}</p> <!-- Renders as: <p></p> (empty string) -->",
        "comment_created_at": "2025-02-10T16:38:20+00:00",
        "comment_author": "AlexRMU",
        "comment_body": "Add an example with an empty string, null, and an object with the toString method.\r\nPerhaps it's better to shorten the example by removing the script tag.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1949809298",
    "pr_number": 15257,
    "pr_file": "documentation/docs/03-template-syntax/01-basic-markup.md",
    "created_at": "2025-02-10T20:07:51+00:00",
    "commented_code": "{expression}\n ```\n \n-When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it. The conversion follows JavaScript's standard behavior:\n+When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it and makes the expression reactive (similar to wrapping it in $derived). The conversion follows JavaScript's standard behavior:\n \n - Primitive values (number, boolean, string) are directly converted to strings.\n - Objects call their .toString() method (if not overridden, it defaults to [object Object]).\n-- undefined and null are treated as empty strings (\"\").\n+- Undefined and null are treated as empty strings (\"\").\n+- Expressions using runes ($state, $derived, etc.) maintain their specific reactive behavior.\n \n ```svelte\n-<script>\n+\tlet emptyStr = \"\";\n \tlet num = 1;\n \tlet bool = false;\n \tlet obj = { key: \"value\" };\n+\tlet objToStr = obj.toString();",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1949809298",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15257,
        "pr_file": "documentation/docs/03-template-syntax/01-basic-markup.md",
        "discussion_id": "1949809298",
        "commented_code": "@@ -177,24 +177,30 @@ A JavaScript expression can be included as text by surrounding it with curly bra\n {expression}\n ```\n \n-When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it. The conversion follows JavaScript's standard behavior:\n+When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it and makes the expression reactive (similar to wrapping it in $derived). The conversion follows JavaScript's standard behavior:\n \n - Primitive values (number, boolean, string) are directly converted to strings.\n - Objects call their .toString() method (if not overridden, it defaults to [object Object]).\n-- undefined and null are treated as empty strings (\"\").\n+- Undefined and null are treated as empty strings (\"\").\n+- Expressions using runes ($state, $derived, etc.) maintain their specific reactive behavior.\n \n ```svelte\n-<script>\n+\tlet emptyStr = \"\";\n \tlet num = 1;\n \tlet bool = false;\n \tlet obj = { key: \"value\" };\n+\tlet objToStr = obj.toString();",
        "comment_created_at": "2025-02-10T20:07:51+00:00",
        "comment_author": "AlexRMU",
        "comment_body": "I meant this:\r\n```svelte\r\n<script lang=\"ts\">\r\n    let obj1 = { toString: () => \"str\" };\r\n</script>\r\n\r\n<p>{obj1}</p> <!-- Renders as: <p>str</p> -->\r\n```\r\nAnd add a link to [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString).",
        "pr_file_module": null
      },
      {
        "comment_id": "1949812337",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15257,
        "pr_file": "documentation/docs/03-template-syntax/01-basic-markup.md",
        "discussion_id": "1949809298",
        "commented_code": "@@ -177,24 +177,30 @@ A JavaScript expression can be included as text by surrounding it with curly bra\n {expression}\n ```\n \n-When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it. The conversion follows JavaScript's standard behavior:\n+When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it and makes the expression reactive (similar to wrapping it in $derived). The conversion follows JavaScript's standard behavior:\n \n - Primitive values (number, boolean, string) are directly converted to strings.\n - Objects call their .toString() method (if not overridden, it defaults to [object Object]).\n-- undefined and null are treated as empty strings (\"\").\n+- Undefined and null are treated as empty strings (\"\").\n+- Expressions using runes ($state, $derived, etc.) maintain their specific reactive behavior.\n \n ```svelte\n-<script>\n+\tlet emptyStr = \"\";\n \tlet num = 1;\n \tlet bool = false;\n \tlet obj = { key: \"value\" };\n+\tlet objToStr = obj.toString();",
        "comment_created_at": "2025-02-10T20:10:09+00:00",
        "comment_author": "melihguleyupoglu",
        "comment_body": "Oh, ok. My bad. So you want me to override the toString function right?",
        "pr_file_module": null
      },
      {
        "comment_id": "1949815583",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15257,
        "pr_file": "documentation/docs/03-template-syntax/01-basic-markup.md",
        "discussion_id": "1949809298",
        "commented_code": "@@ -177,24 +177,30 @@ A JavaScript expression can be included as text by surrounding it with curly bra\n {expression}\n ```\n \n-When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it. The conversion follows JavaScript's standard behavior:\n+When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it and makes the expression reactive (similar to wrapping it in $derived). The conversion follows JavaScript's standard behavior:\n \n - Primitive values (number, boolean, string) are directly converted to strings.\n - Objects call their .toString() method (if not overridden, it defaults to [object Object]).\n-- undefined and null are treated as empty strings (\"\").\n+- Undefined and null are treated as empty strings (\"\").\n+- Expressions using runes ($state, $derived, etc.) maintain their specific reactive behavior.\n \n ```svelte\n-<script>\n+\tlet emptyStr = \"\";\n \tlet num = 1;\n \tlet bool = false;\n \tlet obj = { key: \"value\" };\n+\tlet objToStr = obj.toString();",
        "comment_created_at": "2025-02-10T20:13:00+00:00",
        "comment_author": "AlexRMU",
        "comment_body": "Add this instead of objToStr.",
        "pr_file_module": null
      },
      {
        "comment_id": "1949828101",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15257,
        "pr_file": "documentation/docs/03-template-syntax/01-basic-markup.md",
        "discussion_id": "1949809298",
        "commented_code": "@@ -177,24 +177,30 @@ A JavaScript expression can be included as text by surrounding it with curly bra\n {expression}\n ```\n \n-When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it. The conversion follows JavaScript's standard behavior:\n+When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it and makes the expression reactive (similar to wrapping it in $derived). The conversion follows JavaScript's standard behavior:\n \n - Primitive values (number, boolean, string) are directly converted to strings.\n - Objects call their .toString() method (if not overridden, it defaults to [object Object]).\n-- undefined and null are treated as empty strings (\"\").\n+- Undefined and null are treated as empty strings (\"\").\n+- Expressions using runes ($state, $derived, etc.) maintain their specific reactive behavior.\n \n ```svelte\n-<script>\n+\tlet emptyStr = \"\";\n \tlet num = 1;\n \tlet bool = false;\n \tlet obj = { key: \"value\" };\n+\tlet objToStr = obj.toString();",
        "comment_created_at": "2025-02-10T20:23:24+00:00",
        "comment_author": "melihguleyupoglu",
        "comment_body": "Should i add the MDN link to documents? Or you just share with me for the reference?",
        "pr_file_module": null
      },
      {
        "comment_id": "1949834075",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15257,
        "pr_file": "documentation/docs/03-template-syntax/01-basic-markup.md",
        "discussion_id": "1949809298",
        "commented_code": "@@ -177,24 +177,30 @@ A JavaScript expression can be included as text by surrounding it with curly bra\n {expression}\n ```\n \n-When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it. The conversion follows JavaScript's standard behavior:\n+When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it and makes the expression reactive (similar to wrapping it in $derived). The conversion follows JavaScript's standard behavior:\n \n - Primitive values (number, boolean, string) are directly converted to strings.\n - Objects call their .toString() method (if not overridden, it defaults to [object Object]).\n-- undefined and null are treated as empty strings (\"\").\n+- Undefined and null are treated as empty strings (\"\").\n+- Expressions using runes ($state, $derived, etc.) maintain their specific reactive behavior.\n \n ```svelte\n-<script>\n+\tlet emptyStr = \"\";\n \tlet num = 1;\n \tlet bool = false;\n \tlet obj = { key: \"value\" };\n+\tlet objToStr = obj.toString();",
        "comment_created_at": "2025-02-10T20:27:55+00:00",
        "comment_author": "AlexRMU",
        "comment_body": "I don't know.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1949834208",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15257,
        "pr_file": "documentation/docs/03-template-syntax/01-basic-markup.md",
        "discussion_id": "1949809298",
        "commented_code": "@@ -177,24 +177,30 @@ A JavaScript expression can be included as text by surrounding it with curly bra\n {expression}\n ```\n \n-When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it. The conversion follows JavaScript's standard behavior:\n+When using {expression} inside markup, Svelte automatically converts the value to a string before rendering it and makes the expression reactive (similar to wrapping it in $derived). The conversion follows JavaScript's standard behavior:\n \n - Primitive values (number, boolean, string) are directly converted to strings.\n - Objects call their .toString() method (if not overridden, it defaults to [object Object]).\n-- undefined and null are treated as empty strings (\"\").\n+- Undefined and null are treated as empty strings (\"\").\n+- Expressions using runes ($state, $derived, etc.) maintain their specific reactive behavior.\n \n ```svelte\n-<script>\n+\tlet emptyStr = \"\";\n \tlet num = 1;\n \tlet bool = false;\n \tlet obj = { key: \"value\" };\n+\tlet objToStr = obj.toString();",
        "comment_created_at": "2025-02-10T20:28:00+00:00",
        "comment_author": "AlexRMU",
        "comment_body": "Now let's wait for what the team says.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1759106669",
    "pr_number": 13235,
    "pr_file": "documentation/docs/02-template-syntax/08-bindings.md",
    "created_at": "2024-09-13T15:52:34+00:00",
    "commented_code": "<button onclick={clear}>clear</button>\n ```\n \n+`FileList` objects also cannot be modified, so if you want to e.g. delete a single file from the list, you need to create a new `DataTransfer` object and add the files you want to keep.\n+\n+```svelte\n+<script>\n+\tlet files = $state();\n+\n+\tfunction removeFile(file) {\n+\t\tconst dataTransfer = new DataTransfer();\n+\t\tfor (const oldFile of files)\n+\t\t\tif (oldFile !== file)\n+\t\t\t\tdataTransfer.items.add(oldFile);\n+\n+\t\tfiles = dataTransfer.files;\n+\t}\n+</script>\n+\n+<input bind:files multiple />\n+\n+{#each files as file (file)}\n+\t<div>\n+\t\t{file.name}\n+\t\t<button onclick={() => removeFile(file)}>Remove</button>\n+\t</div>\n+{/each}\n+```",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1759106669",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 13235,
        "pr_file": "documentation/docs/02-template-syntax/08-bindings.md",
        "discussion_id": "1759106669",
        "commented_code": "@@ -58,6 +58,34 @@ On `<input>` elements with `type=\"file\"`, you can use `bind:files` to get the [`\n <button onclick={clear}>clear</button>\n ```\n \n+`FileList` objects also cannot be modified, so if you want to e.g. delete a single file from the list, you need to create a new `DataTransfer` object and add the files you want to keep.\n+\n+```svelte\n+<script>\n+\tlet files = $state();\n+\n+\tfunction removeFile(file) {\n+\t\tconst dataTransfer = new DataTransfer();\n+\t\tfor (const oldFile of files)\n+\t\t\tif (oldFile !== file)\n+\t\t\t\tdataTransfer.items.add(oldFile);\n+\n+\t\tfiles = dataTransfer.files;\n+\t}\n+</script>\n+\n+<input bind:files multiple />\n+\n+{#each files as file (file)}\n+\t<div>\n+\t\t{file.name}\n+\t\t<button onclick={() => removeFile(file)}>Remove</button>\n+\t</div>\n+{/each}\n+```",
        "comment_created_at": "2024-09-13T15:52:34+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "Is that code example necessary? It's taking up quite a bit of space, I think the \"hey watch out for that\" is enough, and then people can read up on how the `DataTransfer` API works (like I should have done, to not provoke this PR \ud83d\ude04 )",
        "pr_file_module": null
      },
      {
        "comment_id": "1759128993",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 13235,
        "pr_file": "documentation/docs/02-template-syntax/08-bindings.md",
        "discussion_id": "1759106669",
        "commented_code": "@@ -58,6 +58,34 @@ On `<input>` elements with `type=\"file\"`, you can use `bind:files` to get the [`\n <button onclick={clear}>clear</button>\n ```\n \n+`FileList` objects also cannot be modified, so if you want to e.g. delete a single file from the list, you need to create a new `DataTransfer` object and add the files you want to keep.\n+\n+```svelte\n+<script>\n+\tlet files = $state();\n+\n+\tfunction removeFile(file) {\n+\t\tconst dataTransfer = new DataTransfer();\n+\t\tfor (const oldFile of files)\n+\t\t\tif (oldFile !== file)\n+\t\t\t\tdataTransfer.items.add(oldFile);\n+\n+\t\tfiles = dataTransfer.files;\n+\t}\n+</script>\n+\n+<input bind:files multiple />\n+\n+{#each files as file (file)}\n+\t<div>\n+\t\t{file.name}\n+\t\t<button onclick={() => removeFile(file)}>Remove</button>\n+\t</div>\n+{/each}\n+```",
        "comment_created_at": "2024-09-13T16:09:29+00:00",
        "comment_author": "brunnerh",
        "comment_body": "Removed the code but kept the note above if that's what you meant.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091186921",
    "pr_number": 15927,
    "pr_file": "documentation/docs/03-template-syntax/09-@attach.md",
    "created_at": "2025-05-15T13:32:39+00:00",
    "commented_code": "title: {@attach ...}\n ---\n \n-Attachments are functions that run when an element is mounted to the DOM. Optionally, they can return a function that is called when the element is later removed from the DOM.\n+Attachments are functions that run in an [effect]($effect) when an element is mounted to the DOM or when [state]($state) read inside the function updates.\n+\n+Optionally, they can return a function that is called when the element is later removed from the DOM.",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "2091186921",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15927,
        "pr_file": "documentation/docs/03-template-syntax/09-@attach.md",
        "discussion_id": "2091186921",
        "commented_code": "@@ -2,7 +2,9 @@\n title: {@attach ...}\n ---\n \n-Attachments are functions that run when an element is mounted to the DOM. Optionally, they can return a function that is called when the element is later removed from the DOM.\n+Attachments are functions that run in an [effect]($effect) when an element is mounted to the DOM or when [state]($state) read inside the function updates.\n+\n+Optionally, they can return a function that is called when the element is later removed from the DOM.",
        "comment_created_at": "2025-05-15T13:32:39+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "```suggestion\r\nOptionally, they can return a function that is called before the attachment re-runs, or when the element is later removed from the DOM.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091191246",
    "pr_number": 15927,
    "pr_file": "documentation/docs/03-template-syntax/09-@attach.md",
    "created_at": "2025-05-15T13:34:37+00:00",
    "commented_code": "title: {@attach ...}\n ---\n \n-Attachments are functions that run when an element is mounted to the DOM. Optionally, they can return a function that is called when the element is later removed from the DOM.\n+Attachments are functions that run in an [effect]($effect) when an element is mounted to the DOM or when [state]($state) read inside the function updates.\n+\n+Optionally, they can return a function that is called before the attachment re-runs, or when the element is later removed from the DOM.",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "2091191246",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15927,
        "pr_file": "documentation/docs/03-template-syntax/09-@attach.md",
        "discussion_id": "2091191246",
        "commented_code": "@@ -2,7 +2,9 @@\n title: {@attach ...}\n ---\n \n-Attachments are functions that run when an element is mounted to the DOM. Optionally, they can return a function that is called when the element is later removed from the DOM.\n+Attachments are functions that run in an [effect]($effect) when an element is mounted to the DOM or when [state]($state) read inside the function updates.\n+\n+Optionally, they can return a function that is called before the attachment re-runs, or when the element is later removed from the DOM.",
        "comment_created_at": "2025-05-15T13:34:37+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "```suggestion\r\nOptionally, they can return a function that is called before the attachment re-runs, or after the element is later removed from the DOM.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091237200",
    "pr_number": 15927,
    "pr_file": "documentation/docs/03-template-syntax/09-@attach.md",
    "created_at": "2025-05-15T13:55:31+00:00",
    "commented_code": "</button>\n ```\n \n-Since the `tooltip(content)` expression runs inside an [effect]($effect), the attachment will be destroyed and recreated whenever `content` changes.\n+Since the `tooltip(content)` expression runs inside an [effect]($effect), the attachment will be destroyed and recreated whenever `content` changes. The same thing would happen for any state read _inside_ the attachment function when it first runs.",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "2091237200",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15927,
        "pr_file": "documentation/docs/03-template-syntax/09-@attach.md",
        "discussion_id": "2091237200",
        "commented_code": "@@ -55,7 +57,7 @@ A useful pattern is for a function, such as `tooltip` in this example, to _retur\n </button>\n ```\n \n-Since the `tooltip(content)` expression runs inside an [effect]($effect), the attachment will be destroyed and recreated whenever `content` changes.\n+Since the `tooltip(content)` expression runs inside an [effect]($effect), the attachment will be destroyed and recreated whenever `content` changes. The same thing would happen for any state read _inside_ the attachment function when it first runs.",
        "comment_created_at": "2025-05-15T13:55:31+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "Good clarification, but I think we also should have a code example showing how to do it if that's not what you want.\r\n\r\n````suggestion\r\nSince the `tooltip(content)` expression runs inside an [effect]($effect), the attachment will be destroyed and recreated whenever `content` changes. The same thing would happen for any state read _inside_ the attachment function when it first runs.\r\n\r\nIn case this is not the desired behavior, and you instead want the attachment to only be executed once on mount, then make sure to not read state eagerly inside the function body. Assuming `tippy` would be very expensive to setup and tear down (which it isn't), then you could rewrite the above example by passing a reference to the `content` variable and invoke it inside a nested effect:\r\n\r\n```svelte\r\n<!--- file: App.svelte --->\r\n<script>\r\n\timport tippy from 'tippy.js';\r\n\tlet content = $state('Hello!');\r\n\t/**\r\n\t * @param {() => string} content\r\n\t * @returns {import('svelte/attachments').Attachment}\r\n\t */\r\n\tfunction tooltip(content) {\r\n\t\treturn (element) => {\r\n\t\t\tconst tooltip = tippy(element);\r\n\t\t\t$effect(() => {\r\n\t\t\t\ttippy.setContent(content());\r\n\t\t\t});\r\n\t\t\treturn tooltip.destroy;\r\n\t\t};\r\n\t}\r\n</script>\r\n<input bind:value={content} />\r\n<button {@attach tooltip(() => content)}>\r\n\tHover me\r\n</button>\r\n```\r\n````",
        "pr_file_module": null
      },
      {
        "comment_id": "2091396840",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15927,
        "pr_file": "documentation/docs/03-template-syntax/09-@attach.md",
        "discussion_id": "2091237200",
        "commented_code": "@@ -55,7 +57,7 @@ A useful pattern is for a function, such as `tooltip` in this example, to _retur\n </button>\n ```\n \n-Since the `tooltip(content)` expression runs inside an [effect]($effect), the attachment will be destroyed and recreated whenever `content` changes.\n+Since the `tooltip(content)` expression runs inside an [effect]($effect), the attachment will be destroyed and recreated whenever `content` changes. The same thing would happen for any state read _inside_ the attachment function when it first runs.",
        "comment_created_at": "2025-05-15T14:58:50+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "I think this is probably a niche enough thing that we could move it to a separate 'Controlling when attachments re-run' section further down \u2014 thoughts?",
        "pr_file_module": null
      },
      {
        "comment_id": "2091657272",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15927,
        "pr_file": "documentation/docs/03-template-syntax/09-@attach.md",
        "discussion_id": "2091237200",
        "commented_code": "@@ -55,7 +57,7 @@ A useful pattern is for a function, such as `tooltip` in this example, to _retur\n </button>\n ```\n \n-Since the `tooltip(content)` expression runs inside an [effect]($effect), the attachment will be destroyed and recreated whenever `content` changes.\n+Since the `tooltip(content)` expression runs inside an [effect]($effect), the attachment will be destroyed and recreated whenever `content` changes. The same thing would happen for any state read _inside_ the attachment function when it first runs.",
        "comment_created_at": "2025-05-15T17:22:08+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "Fine with me, I just want to have it mentioned somewhere",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1876331436",
    "pr_number": 14632,
    "pr_file": "documentation/docs/98-reference/.generated/client-warnings.md",
    "created_at": "2024-12-09T16:47:09+00:00",
    "commented_code": "The `%attribute%` attribute on `%html%` changed its value between server and client renders. The client value, `%value%`, will be ignored in favour of the server value\n ```\n \n+Certain attributes like `src` on an `<img>` element will not be repaired during hydration, i.e. the server value will be kept. That's because for some attributes it is very expensive to properly calculate whether or not their value has really changed.\n+\n+To fix this, either silence the warning with an ignore comment, or ensure that the value stays the same between server and client. If you really need the value to change on hydration, you can force an update like this:",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1876331436",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14632,
        "pr_file": "documentation/docs/98-reference/.generated/client-warnings.md",
        "discussion_id": "1876331436",
        "commented_code": "@@ -66,6 +66,31 @@ The easiest way to log a value as it changes over time is to use the [`$inspect`\n The `%attribute%` attribute on `%html%` changed its value between server and client renders. The client value, `%value%`, will be ignored in favour of the server value\n ```\n \n+Certain attributes like `src` on an `<img>` element will not be repaired during hydration, i.e. the server value will be kept. That's because for some attributes it is very expensive to properly calculate whether or not their value has really changed.\n+\n+To fix this, either silence the warning with an ignore comment, or ensure that the value stays the same between server and client. If you really need the value to change on hydration, you can force an update like this:",
        "comment_created_at": "2024-12-09T16:47:09+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "```suggestion\r\nTo fix this, either silence the warning with a [`svelte-ignore`](basic-markup#Comments) comment, or ensure that the value stays the same between server and client. If you really need the value to change on hydration, you can force an update like this:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1876336698",
    "pr_number": 14632,
    "pr_file": "documentation/docs/98-reference/.generated/client-warnings.md",
    "created_at": "2024-12-09T16:50:34+00:00",
    "commented_code": "The value of an `{@html ...}` block %location% changed between server and client renders. The client value will be ignored in favour of the server value\n ```\n \n+If the a `{@html ...}` value changes between the server and the client, it will not be repaired during hydration, i.e. the server value will be kept. That's because it is very expensive to properly calculate whether or not their value have really changed.\n+\n+To fix this, either silence the warning with an ignore comment, or ensure that the value stays the same between server and client. If you really need the value to change on hydration, you can force an update like this:",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1876336698",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14632,
        "pr_file": "documentation/docs/98-reference/.generated/client-warnings.md",
        "discussion_id": "1876336698",
        "commented_code": "@@ -76,6 +101,31 @@ The value of an `{@html ...}` block changed between server and client renders. T\n The value of an `{@html ...}` block %location% changed between server and client renders. The client value will be ignored in favour of the server value\n ```\n \n+If the a `{@html ...}` value changes between the server and the client, it will not be repaired during hydration, i.e. the server value will be kept. That's because it is very expensive to properly calculate whether or not their value have really changed.\n+\n+To fix this, either silence the warning with an ignore comment, or ensure that the value stays the same between server and client. If you really need the value to change on hydration, you can force an update like this:",
        "comment_created_at": "2024-12-09T16:50:34+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "```suggestion\r\nTo fix this, either silence the warning with a [`svelte-ignore`](basic-markup#Comments) comment, or ensure that the value stays the same between server and client. If you really need the value to change on hydration, you can force an update like this:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1864373367",
    "pr_number": 14289,
    "pr_file": "documentation/docs/03-template-syntax/11-bind.md",
    "created_at": "2024-11-30T17:37:36+00:00",
    "commented_code": "If the input is empty or invalid (in the case of `type=\"number\"`), the value is `undefined`.\n \n+You can give the input a default value by setting the `defaultValue` property. This way, when the input is part of a form and its `form.reset()` method is invoked, it will revert to that value instead of the empty string. Note that for the initial render the value of the binding takes precedence if it's not `null` or `undefined`.",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1864373367",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14289,
        "pr_file": "documentation/docs/03-template-syntax/11-bind.md",
        "discussion_id": "1864373367",
        "commented_code": "@@ -53,6 +53,19 @@ In the case of a numeric input (`type=\"number\"` or `type=\"range\"`), the value wi\n \n If the input is empty or invalid (in the case of `type=\"number\"`), the value is `undefined`.\n \n+You can give the input a default value by setting the `defaultValue` property. This way, when the input is part of a form and its `form.reset()` method is invoked, it will revert to that value instead of the empty string. Note that for the initial render the value of the binding takes precedence if it's not `null` or `undefined`.",
        "comment_created_at": "2024-11-30T17:37:36+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "I think it probably makes sense to talk more abstractly about form resets, since in the provided example we're not using the `form.reset()` method (at least, not explicitly)\r\n\r\n```suggestion\r\nIf an `<input>` has a `defaultValue` and is part of a form, it will revert to that value instead of the empty string when the form is reset. Note that for the initial render the value of the binding takes precedence unless it is `null` or `undefined`.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1864374287",
    "pr_number": 14289,
    "pr_file": "documentation/docs/03-template-syntax/11-bind.md",
    "created_at": "2024-11-30T17:40:57+00:00",
    "commented_code": "If the input is empty or invalid (in the case of `type=\"number\"`), the value is `undefined`.\n \n+You can give the input a default value by setting the `defaultValue` property. This way, when the input is part of a form and its `form.reset()` method is invoked, it will revert to that value instead of the empty string. Note that for the initial render the value of the binding takes precedence if it's not `null` or `undefined`.\n+\n+```svelte\n+<script>\n+\tlet value = $state('');\n+</script>\n+\n+<form>\n+\t<input bind:value defaultValue=\"x\">\n+\t<input type=\"reset\" value=\"Reset\">\n+</form>\n+```",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1864374287",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14289,
        "pr_file": "documentation/docs/03-template-syntax/11-bind.md",
        "discussion_id": "1864374287",
        "commented_code": "@@ -53,6 +53,19 @@ In the case of a numeric input (`type=\"number\"` or `type=\"range\"`), the value wi\n \n If the input is empty or invalid (in the case of `type=\"number\"`), the value is `undefined`.\n \n+You can give the input a default value by setting the `defaultValue` property. This way, when the input is part of a form and its `form.reset()` method is invoked, it will revert to that value instead of the empty string. Note that for the initial render the value of the binding takes precedence if it's not `null` or `undefined`.\n+\n+```svelte\n+<script>\n+\tlet value = $state('');\n+</script>\n+\n+<form>\n+\t<input bind:value defaultValue=\"x\">\n+\t<input type=\"reset\" value=\"Reset\">\n+</form>\n+```",
        "comment_created_at": "2024-11-30T17:40:57+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "MDN [has a note about default values](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/reset) which I think it worth reiterating here\r\n\r\n````suggestion\r\n```\r\n\r\n> [!NOTE]\r\n> Use reset buttons sparingly, and ensure that users won't accidentally click them while trying to submit the form.\r\n````",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1864382863",
    "pr_number": 14289,
    "pr_file": "documentation/docs/03-template-syntax/11-bind.md",
    "created_at": "2024-11-30T17:52:12+00:00",
    "commented_code": "</select>\n ```\n \n+You can give the select a default value by setting the `selected` property on the elements that should be selected initially. This way, when the select is part of a form and its `form.reset()` method is invoked, it will revert to that value instead of the empty string (for single-value selects) or the empty array (for multi-value selects). Note that for the initial render the value of the binding takes precedence if it's not `undefined`.",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1864382863",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14289,
        "pr_file": "documentation/docs/03-template-syntax/11-bind.md",
        "discussion_id": "1864382863",
        "commented_code": "@@ -146,6 +172,16 @@ When the value of an `<option>` matches its text content, the attribute can be o\n </select>\n ```\n \n+You can give the select a default value by setting the `selected` property on the elements that should be selected initially. This way, when the select is part of a form and its `form.reset()` method is invoked, it will revert to that value instead of the empty string (for single-value selects) or the empty array (for multi-value selects). Note that for the initial render the value of the binding takes precedence if it's not `undefined`.",
        "comment_created_at": "2024-11-30T17:52:12+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "'instead of the empty string' doesn't really make sense here, because the default behaviour if no option has the `selected` attribute is to select the first option. I think we can just leave that implied\r\n\r\n```suggestion\r\nYou can give the `<select>` a default value by adding a `selected` attribute to the`<option>` (or options, in the case of `<select multiple>`) that should be initially selected. If the `<select>` is part of a form, it will revert to that selection when the form is reset. Note that for the initial render the value of the binding takes precedence if it's not `undefined`.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1687845742",
    "pr_number": 12545,
    "pr_file": "sites/svelte-5-preview/src/routes/docs/content/01-api/02-runes.md",
    "created_at": "2024-07-23T10:48:33+00:00",
    "commented_code": "In non-runes mode, a `let` declaration is treated as reactive state if it is updated at some point. Unlike `$state(...)`, which works anywhere in your app, `let` only behaves this way at the top level of a component.\n \n+## `$state.link`\n+\n+State declared with `$state.link` behaves like `$state`, with the key difference being that rather than take an initial value, the value passed into `$state.link` maintains and persistant one-way link. Updating the `$state.link` directly will temporarily override the value until the linked state next updates.\n+\n+```svelte\n+<script>\n+\tlet { parent_value = $bindable() } = $props();\n+\n+\t// `child_value` is linked to `parent_value`\n+\tlet child_value = $state.link(parent_value);\n+\n+\tparent_value = 10;\n+\n+\tconsole.log(child_value); // 10\n+\n+\tchild_value = 20;\n+\n+\tconsole.log(child_value); // 20\n+\n+\t// `parent_value` remains the same\n+\tconsole.log(parent_value); // 10\n+</script>\n+```",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1687845742",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12545,
        "pr_file": "sites/svelte-5-preview/src/routes/docs/content/01-api/02-runes.md",
        "discussion_id": "1687845742",
        "commented_code": "@@ -64,6 +64,30 @@ Only plain objects and arrays [are made deeply reactive](/#H4sIAAAAAAAAE42QwWrDM\n \n In non-runes mode, a `let` declaration is treated as reactive state if it is updated at some point. Unlike `$state(...)`, which works anywhere in your app, `let` only behaves this way at the top level of a component.\n \n+## `$state.link`\n+\n+State declared with `$state.link` behaves like `$state`, with the key difference being that rather than take an initial value, the value passed into `$state.link` maintains and persistant one-way link. Updating the `$state.link` directly will temporarily override the value until the linked state next updates.\n+\n+```svelte\n+<script>\n+\tlet { parent_value = $bindable() } = $props();\n+\n+\t// `child_value` is linked to `parent_value`\n+\tlet child_value = $state.link(parent_value);\n+\n+\tparent_value = 10;\n+\n+\tconsole.log(child_value); // 10\n+\n+\tchild_value = 20;\n+\n+\tconsole.log(child_value); // 20\n+\n+\t// `parent_value` remains the same\n+\tconsole.log(parent_value); // 10\n+</script>\n+```",
        "comment_created_at": "2024-07-23T10:48:33+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "Maybe something additional like \"note that if you mutate the value, you're mutating the original value, unless you do something like `$state.snapshot` to clone it\" here?\r\n\r\nAlso, can you copy that section over to `documentation/docs/03-runes/01-state.md`? That's where the docs for the final site live.",
        "pr_file_module": null
      },
      {
        "comment_id": "1687888502",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12545,
        "pr_file": "sites/svelte-5-preview/src/routes/docs/content/01-api/02-runes.md",
        "discussion_id": "1687845742",
        "commented_code": "@@ -64,6 +64,30 @@ Only plain objects and arrays [are made deeply reactive](/#H4sIAAAAAAAAE42QwWrDM\n \n In non-runes mode, a `let` declaration is treated as reactive state if it is updated at some point. Unlike `$state(...)`, which works anywhere in your app, `let` only behaves this way at the top level of a component.\n \n+## `$state.link`\n+\n+State declared with `$state.link` behaves like `$state`, with the key difference being that rather than take an initial value, the value passed into `$state.link` maintains and persistant one-way link. Updating the `$state.link` directly will temporarily override the value until the linked state next updates.\n+\n+```svelte\n+<script>\n+\tlet { parent_value = $bindable() } = $props();\n+\n+\t// `child_value` is linked to `parent_value`\n+\tlet child_value = $state.link(parent_value);\n+\n+\tparent_value = 10;\n+\n+\tconsole.log(child_value); // 10\n+\n+\tchild_value = 20;\n+\n+\tconsole.log(child_value); // 20\n+\n+\t// `parent_value` remains the same\n+\tconsole.log(parent_value); // 10\n+</script>\n+```",
        "comment_created_at": "2024-07-23T11:25:31+00:00",
        "comment_author": "trueadm",
        "comment_body": "Good point",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1693625006",
    "pr_number": 12618,
    "pr_file": "packages/svelte/messages/compile-warnings/template.md",
    "created_at": "2024-07-26T21:35:15+00:00",
    "commented_code": "> Using `on:%name%` to listen to the %name% event is deprecated. Use the event attribute `on%name%` instead\n \n+## node_invalid_placement_ssr\n+\n+> %thing% is invalid inside <%parent%>. When rendering this component on the server, the resulting HTML will be modified by the browser, likely resulting in a `hydration_mismatch` warning\n+\n+HTML has some restrictions where certain elements can appear. For example, a `<div>` inside a `<p>` is invalid. Some violations \"only\" result in invalid HTML, others result in the HTML being repaired by the browser, resulting in content shifting around. Some examples:\n+\n+- `<p>hello <div>world</div></p>` will result in `<p>hello </p><div>world</div><p></p>` for example (the `<div>` autoclosed the `<p>`)\n+- `<option><div>option a</div></option>` will result in `<option>option a</option>` (the `<div>` is removed)\n+- `<table><tr><td>cell</td></tr></table>` will result in `<table><tbody><tr><td>cell</td></tr></tbody></table>` (a `<tbody>` is auto-inserted)\n+\n+Svelte issues a compiler warning when it detects that it will generate the HTML in such a way that it will work on the client, but always fail when using server side rendering, because the resulting HTML will be repaired and result in the client runtime not finding the nodes at the expected locations when hydrating the DOM.",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1693625006",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12618,
        "pr_file": "packages/svelte/messages/compile-warnings/template.md",
        "discussion_id": "1693625006",
        "commented_code": "@@ -38,6 +38,18 @@\n \n > Using `on:%name%` to listen to the %name% event is deprecated. Use the event attribute `on%name%` instead\n \n+## node_invalid_placement_ssr\n+\n+> %thing% is invalid inside <%parent%>. When rendering this component on the server, the resulting HTML will be modified by the browser, likely resulting in a `hydration_mismatch` warning\n+\n+HTML has some restrictions where certain elements can appear. For example, a `<div>` inside a `<p>` is invalid. Some violations \"only\" result in invalid HTML, others result in the HTML being repaired by the browser, resulting in content shifting around. Some examples:\n+\n+- `<p>hello <div>world</div></p>` will result in `<p>hello </p><div>world</div><p></p>` for example (the `<div>` autoclosed the `<p>`)\n+- `<option><div>option a</div></option>` will result in `<option>option a</option>` (the `<div>` is removed)\n+- `<table><tr><td>cell</td></tr></table>` will result in `<table><tbody><tr><td>cell</td></tr></tbody></table>` (a `<tbody>` is auto-inserted)\n+\n+Svelte issues a compiler warning when it detects that it will generate the HTML in such a way that it will work on the client, but always fail when using server side rendering, because the resulting HTML will be repaired and result in the client runtime not finding the nodes at the expected locations when hydrating the DOM.",
        "comment_created_at": "2024-07-26T21:35:15+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "We're in the compiler warnings section of the (hypothetical future) docs, I don't think we need to say that Svelte will issue a compiler warning \u2014 if someone is here it's most likely because they just experienced one\r\n\r\n```suggestion\r\nHTML restricts where certain elements can appear. For example, a `<p>` element cannot contain another `<p>`, or a `<div>`, or any other block-level element. The browser will 'repair' the HTML in a way that breaks Svelte's assumptions about the structure of your components. Some more examples:\r\n\r\n- `<option><div>...</div></option>` will result in `<option>...</option>` (everything except text is removed)\r\n- `<table><tr><td>...</td></tr></table>` will result in `<table><tbody><tr><td>...</td></tr></tbody></table>` (a `<tbody>` is auto-inserted)\r\n\r\nThis code will work when the component is rendered on the client, but if you use server rendering it will cause hydration to fail.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1693627125",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12618,
        "pr_file": "packages/svelte/messages/compile-warnings/template.md",
        "discussion_id": "1693625006",
        "commented_code": "@@ -38,6 +38,18 @@\n \n > Using `on:%name%` to listen to the %name% event is deprecated. Use the event attribute `on%name%` instead\n \n+## node_invalid_placement_ssr\n+\n+> %thing% is invalid inside <%parent%>. When rendering this component on the server, the resulting HTML will be modified by the browser, likely resulting in a `hydration_mismatch` warning\n+\n+HTML has some restrictions where certain elements can appear. For example, a `<div>` inside a `<p>` is invalid. Some violations \"only\" result in invalid HTML, others result in the HTML being repaired by the browser, resulting in content shifting around. Some examples:\n+\n+- `<p>hello <div>world</div></p>` will result in `<p>hello </p><div>world</div><p></p>` for example (the `<div>` autoclosed the `<p>`)\n+- `<option><div>option a</div></option>` will result in `<option>option a</option>` (the `<div>` is removed)\n+- `<table><tr><td>cell</td></tr></table>` will result in `<table><tbody><tr><td>cell</td></tr></tbody></table>` (a `<tbody>` is auto-inserted)\n+\n+Svelte issues a compiler warning when it detects that it will generate the HTML in such a way that it will work on the client, but always fail when using server side rendering, because the resulting HTML will be repaired and result in the client runtime not finding the nodes at the expected locations when hydrating the DOM.",
        "comment_created_at": "2024-07-26T21:39:12+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "The idea was that there's a compiler error version of this and so there's a bit of context why there's also a warning version of this (thought that's likely not very clear still, and so we can either just omit it [your suggestion] or expand on it by actually referencing the other variant)",
        "pr_file_module": null
      },
      {
        "comment_id": "1693631116",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12618,
        "pr_file": "packages/svelte/messages/compile-warnings/template.md",
        "discussion_id": "1693625006",
        "commented_code": "@@ -38,6 +38,18 @@\n \n > Using `on:%name%` to listen to the %name% event is deprecated. Use the event attribute `on%name%` instead\n \n+## node_invalid_placement_ssr\n+\n+> %thing% is invalid inside <%parent%>. When rendering this component on the server, the resulting HTML will be modified by the browser, likely resulting in a `hydration_mismatch` warning\n+\n+HTML has some restrictions where certain elements can appear. For example, a `<div>` inside a `<p>` is invalid. Some violations \"only\" result in invalid HTML, others result in the HTML being repaired by the browser, resulting in content shifting around. Some examples:\n+\n+- `<p>hello <div>world</div></p>` will result in `<p>hello </p><div>world</div><p></p>` for example (the `<div>` autoclosed the `<p>`)\n+- `<option><div>option a</div></option>` will result in `<option>option a</option>` (the `<div>` is removed)\n+- `<table><tr><td>cell</td></tr></table>` will result in `<table><tbody><tr><td>cell</td></tr></tbody></table>` (a `<tbody>` is auto-inserted)\n+\n+Svelte issues a compiler warning when it detects that it will generate the HTML in such a way that it will work on the client, but always fail when using server side rendering, because the resulting HTML will be repaired and result in the client runtime not finding the nodes at the expected locations when hydrating the DOM.",
        "comment_created_at": "2024-07-26T21:44:38+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "what about\r\n\r\n> This code will work when the component is rendered on the client (which is why this is a warning rather than an error), but if you use server rendering it will cause hydration to fail.",
        "pr_file_module": null
      },
      {
        "comment_id": "1693637509",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12618,
        "pr_file": "packages/svelte/messages/compile-warnings/template.md",
        "discussion_id": "1693625006",
        "commented_code": "@@ -38,6 +38,18 @@\n \n > Using `on:%name%` to listen to the %name% event is deprecated. Use the event attribute `on%name%` instead\n \n+## node_invalid_placement_ssr\n+\n+> %thing% is invalid inside <%parent%>. When rendering this component on the server, the resulting HTML will be modified by the browser, likely resulting in a `hydration_mismatch` warning\n+\n+HTML has some restrictions where certain elements can appear. For example, a `<div>` inside a `<p>` is invalid. Some violations \"only\" result in invalid HTML, others result in the HTML being repaired by the browser, resulting in content shifting around. Some examples:\n+\n+- `<p>hello <div>world</div></p>` will result in `<p>hello </p><div>world</div><p></p>` for example (the `<div>` autoclosed the `<p>`)\n+- `<option><div>option a</div></option>` will result in `<option>option a</option>` (the `<div>` is removed)\n+- `<table><tr><td>cell</td></tr></table>` will result in `<table><tbody><tr><td>cell</td></tr></tbody></table>` (a `<tbody>` is auto-inserted)\n+\n+Svelte issues a compiler warning when it detects that it will generate the HTML in such a way that it will work on the client, but always fail when using server side rendering, because the resulting HTML will be repaired and result in the client runtime not finding the nodes at the expected locations when hydrating the DOM.",
        "comment_created_at": "2024-07-26T21:56:26+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "yeah that sounds good. My suggestion then (mirroring my other error text suggestion):\r\n```suggestion\r\nHTML restricts where certain elements can appear. In case of a violation the browser will 'repair' the HTML in a way that breaks Svelte's assumptions about the structure of your components. Some examples:\r\n\r\n- `<p>hello <div>world</div></p>` will result in `<p>hello </p><div>world</div><p></p>` for example (the `<div>` autoclosed the `<p>` because `<p>` cannot contain block-level elements)\r\n- `<option><div>option a</div></option>` will result in `<option>option a</option>` (the `<div>` is removed)\r\n- `<table><tr><td>cell</td></tr></table>` will result in `<table><tbody><tr><td>cell</td></tr></tbody></table>` (a `<tbody>` is auto-inserted)\r\n\r\nThis code will work when the component is rendered on the client (which is why this is a warning rather than an error), but if you use server rendering it will cause hydration to fail.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]