[
  {
    "discussion_id": "1918532726",
    "pr_number": 15035,
    "pr_file": "packages/svelte/elements.d.ts",
    "created_at": "2025-01-16T13:20:31+00:00",
    "commented_code": "[name: string]: { [name: string]: any };\n }\n+\n+export type ClassValue = import('clsx').ClassArray | import('clsx').ClassDictionary;",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1918532726",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15035,
        "pr_file": "packages/svelte/elements.d.ts",
        "discussion_id": "1918532726",
        "commented_code": "@@ -2059,3 +2059,5 @@ export interface SvelteHTMLElements {\n \n \t[name: string]: { [name: string]: any };\n }\n+\n+export type ClassValue = import('clsx').ClassArray | import('clsx').ClassDictionary;",
        "comment_created_at": "2025-01-16T13:20:31+00:00",
        "comment_author": "paoloricciuti",
        "comment_body": "Since we are exporting this I think it would be easier to also include string here right? So whoever is using it can just use this without adding string by itself",
        "pr_file_module": null
      },
      {
        "comment_id": "1918537323",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15035,
        "pr_file": "packages/svelte/elements.d.ts",
        "discussion_id": "1918532726",
        "commented_code": "@@ -2059,3 +2059,5 @@ export interface SvelteHTMLElements {\n \n \t[name: string]: { [name: string]: any };\n }\n+\n+export type ClassValue = import('clsx').ClassArray | import('clsx').ClassDictionary;",
        "comment_created_at": "2025-01-16T13:22:40+00:00",
        "comment_author": "PuruVJ",
        "comment_body": "Good catch",
        "pr_file_module": null
      },
      {
        "comment_id": "1918538472",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15035,
        "pr_file": "packages/svelte/elements.d.ts",
        "discussion_id": "1918532726",
        "commented_code": "@@ -2059,3 +2059,5 @@ export interface SvelteHTMLElements {\n \n \t[name: string]: { [name: string]: any };\n }\n+\n+export type ClassValue = import('clsx').ClassArray | import('clsx').ClassDictionary;",
        "comment_created_at": "2025-01-16T13:23:15+00:00",
        "comment_author": "PuruVJ",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1906228573",
    "pr_number": 14945,
    "pr_file": "packages/svelte/src/internal/client/reactivity/types.d.ts",
    "created_at": "2025-01-08T01:46:30+00:00",
    "commented_code": "fn: () => V;\n \t/** Reactions created inside this signal */\n \tchildren: null | Reaction[];\n+\t/** Read version */\n+\tr_version: number;",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1906228573",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14945,
        "pr_file": "packages/svelte/src/internal/client/reactivity/types.d.ts",
        "discussion_id": "1906228573",
        "commented_code": "@@ -36,6 +38,8 @@ export interface Derived<V = unknown> extends Value<V>, Reaction {\n \tfn: () => V;\n \t/** Reactions created inside this signal */\n \tchildren: null | Reaction[];\n+\t/** Read version */\n+\tr_version: number;",
        "comment_created_at": "2025-01-08T01:46:30+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "no need to repeat this, we're extending `Value` which has this property\r\n\r\n```suggestion\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "945232256",
    "pr_number": 7774,
    "pr_file": "src/compiler/compile/nodes/Element.ts",
    "created_at": "2022-08-14T05:43:14+00:00",
    "commented_code": "}\n \n \t\tif (this.name === 'label') {\n-\t\t\tconst has_input_child = (children: INode[]) => {\n-\t\t\t\tif (children.some(child => (child instanceof Element && (a11y_labelable.has(child.name) || child.name === 'slot')))) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\n-\t\t\t\tfor (const child of children) {\n-\t\t\t\t\tif (!('children' in child) || child.children.length === 0) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\t\t\t\t\tif (has_input_child(child.children)) {\n-\t\t\t\t\t\treturn true;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\treturn false;\n-\t\t\t};\n+\t\t\tconst rule_options = component.compile_options.a11y?.rules?.['label-has-associated-control'];\n+\t\t\t// magic number inspired from https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/src/rules/label-has-associated-control.js\n+\t\t\tconst recursion_depth = Math.min(rule_options?.depth ?? 3, 25);",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "945232256",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 7774,
        "pr_file": "src/compiler/compile/nodes/Element.ts",
        "discussion_id": "945232256",
        "commented_code": "@@ -626,24 +615,11 @@ export default class Element extends Node {\n \t\t}\n \n \t\tif (this.name === 'label') {\n-\t\t\tconst has_input_child = (children: INode[]) => {\n-\t\t\t\tif (children.some(child => (child instanceof Element && (a11y_labelable.has(child.name) || child.name === 'slot')))) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\n-\t\t\t\tfor (const child of children) {\n-\t\t\t\t\tif (!('children' in child) || child.children.length === 0) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\t\t\t\t\tif (has_input_child(child.children)) {\n-\t\t\t\t\t\treturn true;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\treturn false;\n-\t\t\t};\n+\t\t\tconst rule_options = component.compile_options.a11y?.rules?.['label-has-associated-control'];\n+\t\t\t// magic number inspired from https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/src/rules/label-has-associated-control.js\n+\t\t\tconst recursion_depth = Math.min(rule_options?.depth ?? 3, 25);",
        "comment_created_at": "2022-08-14T05:43:14+00:00",
        "comment_author": "baseballyama",
        "comment_body": "[imo]\r\n\r\nHow about moving this line into `may_contain_input_child`?\r\nThen we can prevent writing this line twice at this file and `src/compiler/compile/nodes/InlineComponent.ts`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "497623387",
    "pr_number": 4296,
    "pr_file": "src/runtime/slot/index.ts",
    "created_at": "2020-09-30T15:57:55+00:00",
    "commented_code": "+import { noop, insert, detach } from 'svelte/internal';\n+\n+function create_root_slot_fn(elements) {\n+\treturn function create_root_slot() {\n+\t\treturn {\n+\t\t\tc: noop,\n+\n+\t\t\tm: function mount(target, anchor) {\n+\t\t\t\telements.forEach(element => {\n+\t\t\t\t\tinsert(target, element, anchor);\n+\t\t\t\t});\n+\t\t\t},\n+\n+\t\t\td: function destroy(detaching) {\n+\t\t\t\tif (detaching) {\n+\t\t\t\t\telements.forEach(element => detach(element));",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "497623387",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 4296,
        "pr_file": "src/runtime/slot/index.ts",
        "discussion_id": "497623387",
        "commented_code": "@@ -0,0 +1,35 @@\n+import { noop, insert, detach } from 'svelte/internal';\n+\n+function create_root_slot_fn(elements) {\n+\treturn function create_root_slot() {\n+\t\treturn {\n+\t\t\tc: noop,\n+\n+\t\t\tm: function mount(target, anchor) {\n+\t\t\t\telements.forEach(element => {\n+\t\t\t\t\tinsert(target, element, anchor);\n+\t\t\t\t});\n+\t\t\t},\n+\n+\t\t\td: function destroy(detaching) {\n+\t\t\t\tif (detaching) {\n+\t\t\t\t\telements.forEach(element => detach(element));",
        "comment_created_at": "2020-09-30T15:57:55+00:00",
        "comment_author": "lukeed",
        "comment_body": "```suggestion\r\n\t\t\t\t\telements.forEach(detach);\r\n```",
        "pr_file_module": null
      }
    ]
  }
]