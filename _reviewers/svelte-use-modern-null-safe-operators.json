[
  {
    "discussion_id": "1933706514",
    "pr_number": 15137,
    "pr_file": "packages/svelte/src/internal/client/runtime.js",
    "created_at": "2025-01-29T11:25:38+00:00",
    "commented_code": "skipped_deps = 0;\n \tuntracked_writes = null;\n \tactive_reaction = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? reaction : null;\n-\tskip_reaction = !is_flushing_effect && (flags & UNOWNED) !== 0;\n+\t// prettier-ignore\n+\tskip_reaction =\n+\t\t(flags & UNOWNED) !== 0 &&\n+\t\t(!is_flushing_effect ||\n+\t\t\t// If we were previously not in a reactive context and we're reading an unowned derived\n+\t\t\t// that was created inside another derived, then we don't fully know the real owner and thus\n+\t\t\t// we need to skip adding any reactions for this unowned\n+\t\t\t\t((previous_reaction === null || previous_untracking) &&\n+\t\t\t\t(/** @type {Derived} */ (reaction).parent !== null &&\n+\t\t\t\t(/** @type {Derived} */ (reaction).parent.f & DERIVED) !== 0)));",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1933706514",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15137,
        "pr_file": "packages/svelte/src/internal/client/runtime.js",
        "discussion_id": "1933706514",
        "commented_code": "@@ -409,7 +414,17 @@ export function update_reaction(reaction) {\n \tskipped_deps = 0;\n \tuntracked_writes = null;\n \tactive_reaction = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? reaction : null;\n-\tskip_reaction = !is_flushing_effect && (flags & UNOWNED) !== 0;\n+\t// prettier-ignore\n+\tskip_reaction =\n+\t\t(flags & UNOWNED) !== 0 &&\n+\t\t(!is_flushing_effect ||\n+\t\t\t// If we were previously not in a reactive context and we're reading an unowned derived\n+\t\t\t// that was created inside another derived, then we don't fully know the real owner and thus\n+\t\t\t// we need to skip adding any reactions for this unowned\n+\t\t\t\t((previous_reaction === null || previous_untracking) &&\n+\t\t\t\t(/** @type {Derived} */ (reaction).parent !== null &&\n+\t\t\t\t(/** @type {Derived} */ (reaction).parent.f & DERIVED) !== 0)));",
        "comment_created_at": "2025-01-29T11:25:38+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "Pretty sure you can reduce this to `/** @type {Derived} */ (reaction).parent?.f & DERIVED) !== 0`",
        "pr_file_module": null
      },
      {
        "comment_id": "1933763338",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15137,
        "pr_file": "packages/svelte/src/internal/client/runtime.js",
        "discussion_id": "1933706514",
        "commented_code": "@@ -409,7 +414,17 @@ export function update_reaction(reaction) {\n \tskipped_deps = 0;\n \tuntracked_writes = null;\n \tactive_reaction = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? reaction : null;\n-\tskip_reaction = !is_flushing_effect && (flags & UNOWNED) !== 0;\n+\t// prettier-ignore\n+\tskip_reaction =\n+\t\t(flags & UNOWNED) !== 0 &&\n+\t\t(!is_flushing_effect ||\n+\t\t\t// If we were previously not in a reactive context and we're reading an unowned derived\n+\t\t\t// that was created inside another derived, then we don't fully know the real owner and thus\n+\t\t\t// we need to skip adding any reactions for this unowned\n+\t\t\t\t((previous_reaction === null || previous_untracking) &&\n+\t\t\t\t(/** @type {Derived} */ (reaction).parent !== null &&\n+\t\t\t\t(/** @type {Derived} */ (reaction).parent.f & DERIVED) !== 0)));",
        "comment_created_at": "2025-01-29T12:06:10+00:00",
        "comment_author": "trueadm",
        "comment_body": "You can't use optional chaining with a bitwise flag?",
        "pr_file_module": null
      },
      {
        "comment_id": "1933798830",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15137,
        "pr_file": "packages/svelte/src/internal/client/runtime.js",
        "discussion_id": "1933706514",
        "commented_code": "@@ -409,7 +414,17 @@ export function update_reaction(reaction) {\n \tskipped_deps = 0;\n \tuntracked_writes = null;\n \tactive_reaction = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? reaction : null;\n-\tskip_reaction = !is_flushing_effect && (flags & UNOWNED) !== 0;\n+\t// prettier-ignore\n+\tskip_reaction =\n+\t\t(flags & UNOWNED) !== 0 &&\n+\t\t(!is_flushing_effect ||\n+\t\t\t// If we were previously not in a reactive context and we're reading an unowned derived\n+\t\t\t// that was created inside another derived, then we don't fully know the real owner and thus\n+\t\t\t// we need to skip adding any reactions for this unowned\n+\t\t\t\t((previous_reaction === null || previous_untracking) &&\n+\t\t\t\t(/** @type {Derived} */ (reaction).parent !== null &&\n+\t\t\t\t(/** @type {Derived} */ (reaction).parent.f & DERIVED) !== 0)));",
        "comment_created_at": "2025-01-29T12:33:05+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "Of course you can?\r\n```js\r\nlet foo = { x: { i: 2 } };\r\nconsole.log((foo.x.i & 2) !== 0); // true\r\nconsole.log((foo.y?.i & 2) !== 0); // false\r\n```\r\nit doesn't work in the case of `=== 0` because then regardless of undefined or a number it's always 0, but it works in the `!== 0` case",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1925231664",
    "pr_number": 15087,
    "pr_file": "packages/svelte/src/internal/client/dom/elements/events.js",
    "created_at": "2025-01-22T12:23:18+00:00",
    "commented_code": "}\n \t\tif (!event.cancelBubble) {\n \t\t\treturn without_reactive_context(() => {\n-\t\t\t\treturn handler.call(this, event);\n+\t\t\t\treturn handler?.call(this, event);",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1925231664",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15087,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/events.js",
        "discussion_id": "1925231664",
        "commented_code": "@@ -63,7 +63,7 @@ export function create_event(event_name, dom, handler, options) {\n \t\t}\n \t\tif (!event.cancelBubble) {\n \t\t\treturn without_reactive_context(() => {\n-\t\t\t\treturn handler.call(this, event);\n+\t\t\t\treturn handler?.call(this, event);",
        "comment_created_at": "2025-01-22T12:23:18+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "we should probably also adjust the call signature to allow undefined for the handler param, and adjust that for `export function event(...)` aswell ",
        "pr_file_module": null
      },
      {
        "comment_id": "1925233932",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15087,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/events.js",
        "discussion_id": "1925231664",
        "commented_code": "@@ -63,7 +63,7 @@ export function create_event(event_name, dom, handler, options) {\n \t\t}\n \t\tif (!event.cancelBubble) {\n \t\t\treturn without_reactive_context(() => {\n-\t\t\t\treturn handler.call(this, event);\n+\t\t\t\treturn handler?.call(this, event);",
        "comment_created_at": "2025-01-22T12:24:59+00:00",
        "comment_author": "paoloricciuti",
        "comment_body": "Oh good catch...gonna fix them soon",
        "pr_file_module": null
      },
      {
        "comment_id": "1925332232",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 15087,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/events.js",
        "discussion_id": "1925231664",
        "commented_code": "@@ -63,7 +63,7 @@ export function create_event(event_name, dom, handler, options) {\n \t\t}\n \t\tif (!event.cancelBubble) {\n \t\t\treturn without_reactive_context(() => {\n-\t\t\t\treturn handler.call(this, event);\n+\t\t\t\treturn handler?.call(this, event);",
        "comment_created_at": "2025-01-22T13:34:27+00:00",
        "comment_author": "paoloricciuti",
        "comment_body": "Fixed it",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1844166613",
    "pr_number": 14314,
    "pr_file": "packages/svelte/src/compiler/validate-options.js",
    "created_at": "2024-11-15T16:48:25+00:00",
    "commented_code": "const common = {\n \tfilename: string('(unknown)'),\n \n-\t// default to process.cwd() where it exists to replicate svelte4 behavior\n+\t// default to process.cwd() where it exists to replicate svelte4 behavior (and make Deno work with this as well)\n \t// see https://github.com/sveltejs/svelte/blob/b62fc8c8fd2640c9b99168f01b9d958cb2f7574f/packages/svelte/src/compiler/compile/Component.js#L211\n-\trootDir: string(typeof process !== 'undefined' ? process.cwd?.() : undefined),\n+\t/* eslint-disable */\n+\trootDir: string(\n+\t\ttypeof process !== 'undefined'\n+\t\t\t? process.cwd()",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1844166613",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14314,
        "pr_file": "packages/svelte/src/compiler/validate-options.js",
        "discussion_id": "1844166613",
        "commented_code": "@@ -13,9 +11,19 @@ import * as w from './warnings.js';\n const common = {\n \tfilename: string('(unknown)'),\n \n-\t// default to process.cwd() where it exists to replicate svelte4 behavior\n+\t// default to process.cwd() where it exists to replicate svelte4 behavior (and make Deno work with this as well)\n \t// see https://github.com/sveltejs/svelte/blob/b62fc8c8fd2640c9b99168f01b9d958cb2f7574f/packages/svelte/src/compiler/compile/Component.js#L211\n-\trootDir: string(typeof process !== 'undefined' ? process.cwd?.() : undefined),\n+\t/* eslint-disable */\n+\trootDir: string(\n+\t\ttypeof process !== 'undefined'\n+\t\t\t? process.cwd()",
        "comment_created_at": "2024-11-15T16:48:25+00:00",
        "comment_author": "dominikg",
        "comment_body": "the previous code had a ? for cwd to not fail if process global exists but without cwd",
        "pr_file_module": null
      },
      {
        "comment_id": "1844189713",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14314,
        "pr_file": "packages/svelte/src/compiler/validate-options.js",
        "discussion_id": "1844166613",
        "commented_code": "@@ -13,9 +11,19 @@ import * as w from './warnings.js';\n const common = {\n \tfilename: string('(unknown)'),\n \n-\t// default to process.cwd() where it exists to replicate svelte4 behavior\n+\t// default to process.cwd() where it exists to replicate svelte4 behavior (and make Deno work with this as well)\n \t// see https://github.com/sveltejs/svelte/blob/b62fc8c8fd2640c9b99168f01b9d958cb2f7574f/packages/svelte/src/compiler/compile/Component.js#L211\n-\trootDir: string(typeof process !== 'undefined' ? process.cwd?.() : undefined),\n+\t/* eslint-disable */\n+\trootDir: string(\n+\t\ttypeof process !== 'undefined'\n+\t\t\t? process.cwd()",
        "comment_created_at": "2024-11-15T17:07:22+00:00",
        "comment_author": "dummdidumm",
        "comment_body": "```suggestion\r\n\t\t\t? process.cwd?.()\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1859100896",
    "pr_number": 14443,
    "pr_file": "packages/svelte/src/internal/client/reactivity/deriveds.js",
    "created_at": "2024-11-26T19:10:43+00:00",
    "commented_code": "reactions: null,\n \t\tv: /** @type {V} */ (null),\n \t\tversion: 0,\n-\t\tparent: active_effect\n+\t\tparent: parent_derived || active_effect",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1859100896",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 14443,
        "pr_file": "packages/svelte/src/internal/client/reactivity/deriveds.js",
        "discussion_id": "1859100896",
        "commented_code": "@@ -53,12 +58,11 @@ export function derived(fn) {\n \t\treactions: null,\n \t\tv: /** @type {V} */ (null),\n \t\tversion: 0,\n-\t\tparent: active_effect\n+\t\tparent: parent_derived || active_effect",
        "comment_created_at": "2024-11-26T19:10:43+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "```suggestion\r\n\t\tparent: parent_derived ?? active_effect\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1720770647",
    "pr_number": 12884,
    "pr_file": "packages/svelte/src/internal/client/dom/blocks/each.js",
    "created_at": "2024-08-17T12:36:07+00:00",
    "commented_code": "if (item !== undefined) {\n \t\t\t\titem.a?.measure();\n+\t\t\t\tif (to_animate === undefined) to_animate = new Set();\n \t\t\t\tto_animate.add(item);",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1720770647",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12884,
        "pr_file": "packages/svelte/src/internal/client/dom/blocks/each.js",
        "discussion_id": "1720770647",
        "commented_code": "@@ -277,6 +277,7 @@ function reconcile(array, state, anchor, render_fn, flags, get_key) {\n \n \t\t\tif (item !== undefined) {\n \t\t\t\titem.a?.measure();\n+\t\t\t\tif (to_animate === undefined) to_animate = new Set();\n \t\t\t\tto_animate.add(item);",
        "comment_created_at": "2024-08-17T12:36:07+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "```suggestion\r\n\t\t\t\t(to_animate ??= new Set()).add(item);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1720770686",
    "pr_number": 12884,
    "pr_file": "packages/svelte/src/internal/client/dom/blocks/each.js",
    "created_at": "2024-08-17T12:36:23+00:00",
    "commented_code": "resume_effect(item.e);\n \t\t\tif (is_animated) {\n \t\t\t\titem.a?.unfix();\n+\t\t\t\tif (to_animate === undefined) to_animate = new Set();\n \t\t\t\tto_animate.delete(item);",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1720770686",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12884,
        "pr_file": "packages/svelte/src/internal/client/dom/blocks/each.js",
        "discussion_id": "1720770686",
        "commented_code": "@@ -319,12 +320,13 @@ function reconcile(array, state, anchor, render_fn, flags, get_key) {\n \t\t\tresume_effect(item.e);\n \t\t\tif (is_animated) {\n \t\t\t\titem.a?.unfix();\n+\t\t\t\tif (to_animate === undefined) to_animate = new Set();\n \t\t\t\tto_animate.delete(item);",
        "comment_created_at": "2024-08-17T12:36:23+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "```suggestion\r\n\t\t\t\t(to_animate ??= new Set()).delete(item);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1720770713",
    "pr_number": 12884,
    "pr_file": "packages/svelte/src/internal/client/dom/blocks/each.js",
    "created_at": "2024-08-17T12:36:43+00:00",
    "commented_code": "stashed = [];\n \n \t\t\twhile (current !== null && current.k !== key) {\n+\t\t\t\tif (seen === undefined) seen = new Set();\n \t\t\t\tseen.add(current);",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1720770713",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12884,
        "pr_file": "packages/svelte/src/internal/client/dom/blocks/each.js",
        "discussion_id": "1720770713",
        "commented_code": "@@ -372,6 +374,7 @@ function reconcile(array, state, anchor, render_fn, flags, get_key) {\n \t\t\tstashed = [];\n \n \t\t\twhile (current !== null && current.k !== key) {\n+\t\t\t\tif (seen === undefined) seen = new Set();\n \t\t\t\tseen.add(current);",
        "comment_created_at": "2024-08-17T12:36:43+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "```suggestion\r\n\t\t\t\t(seen ??= new Set()).add(current);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1716249808",
    "pr_number": 12831,
    "pr_file": "packages/svelte/src/internal/client/runtime.js",
    "created_at": "2024-08-14T03:01:56+00:00",
    "commented_code": "var reactions = dependency.reactions;",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1716249808",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12831,
        "pr_file": "packages/svelte/src/internal/client/runtime.js",
        "discussion_id": "1716249808",
        "commented_code": "@@ -327,13 +327,9 @@ export function update_reaction(reaction) {\n \t\t\t\t\tvar reactions = dependency.reactions;",
        "comment_created_at": "2024-08-14T03:01:56+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "I think this whole block could become a one-liner?\r\n\r\n```js\r\n(dependency.reactions ??= new Set()).add(reaction);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1707405261",
    "pr_number": 12759,
    "pr_file": "packages/svelte/src/internal/client/dom/elements/transitions.js",
    "created_at": "2024-08-07T16:33:19+00:00",
    "commented_code": "// ...but we want to do so without using `async`/`await` everywhere, so\n \t\t// we return a facade that allows everything to remain synchronous\n \t\treturn {\n-\t\t\tabort: () => a.abort(),\n+\t\t\tabort: () => a?.abort(),",
    "repo_full_name": "sveltejs/svelte",
    "discussion_comments": [
      {
        "comment_id": "1707405261",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12759,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/transitions.js",
        "discussion_id": "1707405261",
        "commented_code": "@@ -331,7 +335,7 @@ function animate(element, options, counterpart, t2, on_finish, on_abort) {\n \t\t// ...but we want to do so without using `async`/`await` everywhere, so\n \t\t// we return a facade that allows everything to remain synchronous\n \t\treturn {\n-\t\t\tabort: () => a.abort(),\n+\t\t\tabort: () => a?.abort(),",
        "comment_created_at": "2024-08-07T16:33:19+00:00",
        "comment_author": "Rich-Harris",
        "comment_body": "this makes me a bit nervous \u2014 if this is now being called before `a` exists, then will `a` still get created (but never aborted) in the microtask?",
        "pr_file_module": null
      },
      {
        "comment_id": "1707454076",
        "repo_full_name": "sveltejs/svelte",
        "pr_number": 12759,
        "pr_file": "packages/svelte/src/internal/client/dom/elements/transitions.js",
        "discussion_id": "1707405261",
        "commented_code": "@@ -331,7 +335,7 @@ function animate(element, options, counterpart, t2, on_finish, on_abort) {\n \t\t// ...but we want to do so without using `async`/`await` everywhere, so\n \t\t// we return a facade that allows everything to remain synchronous\n \t\treturn {\n-\t\t\tabort: () => a.abort(),\n+\t\t\tabort: () => a?.abort(),",
        "comment_created_at": "2024-08-07T16:57:38+00:00",
        "comment_author": "trueadm",
        "comment_body": "Good point, added a guard for it.",
        "pr_file_module": null
      }
    ]
  }
]