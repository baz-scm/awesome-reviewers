[
  {
    "discussion_id": "2096480816",
    "pr_number": 1140,
    "pr_file": "sweagent/agent/models.py",
    "created_at": "2025-05-19T20:58:47+00:00",
    "commented_code": "\"completion_kwargs to {'extra_headers': {'anthropic-beta': 'output-128k-2025-02-19'}}.\"\n                 )\n \n-        self.lm_provider = litellm.model_cost.get(self.config.name, {}).get(\"litellm_provider\")\n+        self.lm_provider = litellm.model_cost.get(self.config.name, {}).get(\"litellm_provider\", self.config.name)\n+        if self.config.per_instance_cost_limit == 0 and self.config.total_cost_limit == 0:  # Local model",
    "repo_full_name": "SWE-agent/SWE-agent",
    "discussion_comments": [
      {
        "comment_id": "2096480816",
        "repo_full_name": "SWE-agent/SWE-agent",
        "pr_number": 1140,
        "pr_file": "sweagent/agent/models.py",
        "discussion_id": "2096480816",
        "commented_code": "@@ -594,7 +596,28 @@ def __init__(self, args: GenericAPIModelConfig, tools: ToolConfig):\n                     \"completion_kwargs to {'extra_headers': {'anthropic-beta': 'output-128k-2025-02-19'}}.\"\n                 )\n \n-        self.lm_provider = litellm.model_cost.get(self.config.name, {}).get(\"litellm_provider\")\n+        self.lm_provider = litellm.model_cost.get(self.config.name, {}).get(\"litellm_provider\", self.config.name)\n+        if self.config.per_instance_cost_limit == 0 and self.config.total_cost_limit == 0:  # Local model",
        "comment_created_at": "2025-05-19T20:58:47+00:00",
        "comment_author": "klieret",
        "comment_body": "Hmm, I don't like this conditional for activating this, especially because the default settings will be nonzero, so this will have false negatives. Also you can set both of these to 0 to disable the limits, so also false positives.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2100936011",
    "pr_number": 1132,
    "pr_file": "sweagent/agent/agents.py",
    "created_at": "2025-05-21T18:38:27+00:00",
    "commented_code": "repo_name = \"/\"\n         if self._env.repo is not None:\n             repo_name = f\"/{self._env.repo.repo_name}\"\n-        submission_command = \"git add -A && git diff --cached > /root/model.patch\"\n+        repo_name = f\"{repo_base_dir}{repo_name}\"",
    "repo_full_name": "SWE-agent/SWE-agent",
    "discussion_comments": [
      {
        "comment_id": "2100936011",
        "repo_full_name": "SWE-agent/SWE-agent",
        "pr_number": 1132,
        "pr_file": "sweagent/agent/agents.py",
        "discussion_id": "2100936011",
        "commented_code": "@@ -812,13 +816,14 @@ def attempt_autosubmission_after_error(self, step: StepOutput) -> StepOutput:\n         repo_name = \"/\"\n         if self._env.repo is not None:\n             repo_name = f\"/{self._env.repo.repo_name}\"\n-        submission_command = \"git add -A && git diff --cached > /root/model.patch\"\n+        repo_name = f\"{repo_base_dir}{repo_name}\"",
        "comment_created_at": "2025-05-21T18:38:27+00:00",
        "comment_author": "klieret",
        "comment_body": "This feels wrong, isn't there a `/` missing here? \r\n\r\nAlso probably in line 816 should then set this to `repo_base_dir` instead of `/`",
        "pr_file_module": null
      },
      {
        "comment_id": "2101719080",
        "repo_full_name": "SWE-agent/SWE-agent",
        "pr_number": 1132,
        "pr_file": "sweagent/agent/agents.py",
        "discussion_id": "2100936011",
        "commented_code": "@@ -812,13 +816,14 @@ def attempt_autosubmission_after_error(self, step: StepOutput) -> StepOutput:\n         repo_name = \"/\"\n         if self._env.repo is not None:\n             repo_name = f\"/{self._env.repo.repo_name}\"\n-        submission_command = \"git add -A && git diff --cached > /root/model.patch\"\n+        repo_name = f\"{repo_base_dir}{repo_name}\"",
        "comment_created_at": "2025-05-22T06:16:02+00:00",
        "comment_author": "askender",
        "comment_body": "env_dir = os.environ.get('ENV_DIR', '/root').rstrip('/')\r\nrepo_base_dir = os.environ.get('REPO_BASE_DIR', '').rstrip('/')\r\n\r\nrefer to\r\n```\r\nenv_dir = os.environ.get('ENV_DIR', '/root').rstrip('/')\r\nrepo_base_dir = os.environ.get('REPO_BASE_DIR', '').rstrip('/')\r\n```\r\n\r\nfor the default config:\r\nenv_dir = '/root'\r\nrepo_base_dir = ''\r\n\r\nI didn't change 816-818\r\n```\r\n        repo_name = \"/\"\r\n        if self._env.repo is not None:\r\n            repo_name = f\"/{self._env.repo.repo_name}\"\r\n```\r\n\r\nIn this patch:\r\n819 chage from:\r\n```\r\nsubmission_command = \"git add -A && git diff --cached > /root/model.patch\"\r\n```\r\n\r\nto:\r\n```\r\nrepo_name = f\"{repo_base_dir}{repo_name}\"\r\nsubmission_command = f\"git add -A && git diff --cached > {env_dir}/model.patch\"\r\n```\r\n\r\nIn default config,\r\nrepo_name should be same because `repo_base_dir=''`\r\nIf people change them to sth like:\r\nenv_dir = '/tmp/root'\r\nrepo_base_dir = '/tmp/repos'\r\n\r\n```\r\nrepo_name = /the_repo_name\r\nrepo_name = f\"/tmp/repos{repo_name}\"\r\n```\r\n\r\nSo, there is not a `/` missing here.\r\n\r\n---\r\n\r\nYou suggest change the code from\r\n```\r\nrepo_name = \"/\"\r\nif self._env.repo is not None:\r\n    repo_name = f\"/{self._env.repo.repo_name}\"\r\nrepo_name = f\"{repo_base_dir}{repo_name}\"\r\n```\r\nto\r\n```\r\nrepo_name = \"{repo_base_dir}\"\r\nif not repo_name:\r\n    repo_name = \"/\"\r\nif self._env.repo is not None:\r\n    repo_name = f\"{repo_name}/{self._env.repo.repo_name}\"\r\n```\r\nwhich has the same result.\r\n\r\nmy raw patch add 1 new line.\r\nYour suggestion changed 2 lines, add 2 new lines.\r\n\r\n---\r\n\r\nYou may suggest that `repo_base_dir` should start with a `/` at all times, as it is clearer.\r\n```\r\nrepo_base_dir = os.environ.get('REPO_BASE_DIR', '').rstrip('/') # rstrip is not so good for '/'\r\nif repo_base_dir == \"/\":\r\n    repo_base_dir = \"/\"\r\n```\r\n\r\nI will do that when `add these two variables as part of the environment config` as you said.\r\n\r\nSo: \r\n\r\nraw code:\r\n```\r\nPurePosixPath(\"/\") / self._env.repo.repo_name / path\r\n f\"mkdir /{self.repo_name}\",\r\n```\r\n\r\npatch_not_so_good:\r\n```\r\nPurePosixPath(f\"{repo_base_dir}/\") / self._env.repo.repo_name / path\r\nf\"mkdir {repo_base_dir}/{self.repo_name}\",\r\n```\r\n\r\npatch_as_you_suggest:\r\n```\r\nPurePosixPath(self._env.repo.repo_base_dir) / self._env.repo.repo_name / path\r\nf\"mkdir PurePosixPath(self.repo_base_dir) / self.repo_name\",\r\n```\r\n\r\n---\r\n\r\n\r\nThanks a lot!\r\n\r\n\r\nWhen I write code, I find myself standing at a forked path:\r\nOne way is **lazy** \u2014 swift and brief, a whisper of logic that gets the job done.\r\nThe other, **semantic** \u2014 deliberate, clear, a language of meaning stretched in lines.\r\nAnd I ask myself:\r\nWhy does my hand so often reach for the shortcut,\r\nwhen my mind knows the beauty lies in clarity?\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1997696804",
    "pr_number": 1026,
    "pr_file": "sweagent/agent/problem_statement.py",
    "created_at": "2025-03-16T20:06:44+00:00",
    "commented_code": "return self.extra_fields\n \n \n-ProblemStatementConfig = TextProblemStatement | GithubIssue | EmptyProblemStatement | FileProblemStatement\n+class CTFProblemStatement(BaseModel):\n+    path: Path\n+\n+    name: str = None  # type: ignore\n+    category: Literal[\"crypto\", \"rev\", \"web\", \"forensics\", \"pwn\", \"misc\"] = None  # type: ignore\n+    description: str = None  # type: ignore\n+    files: list[str] = None  # type: ignore\n+    flag: str = None  # type: ignore\n+\n+    extra_fields: dict[str, Any] = Field(default_factory=dict)\n+    \"\"\"Any additional data to be added to the instance.\n+    This data will be available when formatting prompt templates.\n+    \"\"\"\n+\n+    type: Literal[\"ctf_json\"] = \"ctf_json\"\n+    \"\"\"Discriminator for (de)serialization/CLI. Do not change.\"\"\"\n+\n+    id: str = None  # type: ignore\n+\n+    model_config = ConfigDict(extra=\"forbid\")\n+\n+    def model_post_init(self, __context: Any) -> None:",
    "repo_full_name": "SWE-agent/SWE-agent",
    "discussion_comments": [
      {
        "comment_id": "1997696804",
        "repo_full_name": "SWE-agent/SWE-agent",
        "pr_number": 1026,
        "pr_file": "sweagent/agent/problem_statement.py",
        "discussion_id": "1997696804",
        "commented_code": "@@ -125,11 +126,56 @@ def get_extra_fields(self) -> dict[str, Any]:\n         return self.extra_fields\n \n \n-ProblemStatementConfig = TextProblemStatement | GithubIssue | EmptyProblemStatement | FileProblemStatement\n+class CTFProblemStatement(BaseModel):\n+    path: Path\n+\n+    name: str = None  # type: ignore\n+    category: Literal[\"crypto\", \"rev\", \"web\", \"forensics\", \"pwn\", \"misc\"] = None  # type: ignore\n+    description: str = None  # type: ignore\n+    files: list[str] = None  # type: ignore\n+    flag: str = None  # type: ignore\n+\n+    extra_fields: dict[str, Any] = Field(default_factory=dict)\n+    \"\"\"Any additional data to be added to the instance.\n+    This data will be available when formatting prompt templates.\n+    \"\"\"\n+\n+    type: Literal[\"ctf_json\"] = \"ctf_json\"\n+    \"\"\"Discriminator for (de)serialization/CLI. Do not change.\"\"\"\n+\n+    id: str = None  # type: ignore\n+\n+    model_config = ConfigDict(extra=\"forbid\")\n+\n+    def model_post_init(self, __context: Any) -> None:",
        "comment_created_at": "2025-03-16T20:06:44+00:00",
        "comment_author": "klieret",
        "comment_body": "hmm, I generally hate `model_post_init` and similar, because it creates confusion (e.g., here a lot of fields will be overwritten). Both for typing and because these classes here are used for a command line argument/for python bindings. \r\n\r\nAnother idea: Can't we just keep the `path` as the input and then do the loading in `get_problem_statement` and return all the extra fields in `get_extra_fields`? That would make it a bit clearer as to what the real input is. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1998292298",
        "repo_full_name": "SWE-agent/SWE-agent",
        "pr_number": 1026,
        "pr_file": "sweagent/agent/problem_statement.py",
        "discussion_id": "1997696804",
        "commented_code": "@@ -125,11 +126,56 @@ def get_extra_fields(self) -> dict[str, Any]:\n         return self.extra_fields\n \n \n-ProblemStatementConfig = TextProblemStatement | GithubIssue | EmptyProblemStatement | FileProblemStatement\n+class CTFProblemStatement(BaseModel):\n+    path: Path\n+\n+    name: str = None  # type: ignore\n+    category: Literal[\"crypto\", \"rev\", \"web\", \"forensics\", \"pwn\", \"misc\"] = None  # type: ignore\n+    description: str = None  # type: ignore\n+    files: list[str] = None  # type: ignore\n+    flag: str = None  # type: ignore\n+\n+    extra_fields: dict[str, Any] = Field(default_factory=dict)\n+    \"\"\"Any additional data to be added to the instance.\n+    This data will be available when formatting prompt templates.\n+    \"\"\"\n+\n+    type: Literal[\"ctf_json\"] = \"ctf_json\"\n+    \"\"\"Discriminator for (de)serialization/CLI. Do not change.\"\"\"\n+\n+    id: str = None  # type: ignore\n+\n+    model_config = ConfigDict(extra=\"forbid\")\n+\n+    def model_post_init(self, __context: Any) -> None:",
        "comment_created_at": "2025-03-17T09:17:35+00:00",
        "comment_author": "talorabr",
        "comment_body": "I used another option which is to use the `default_factory` in `Field` to initialize values after the path is given by the user. Tell me if it looks better ",
        "pr_file_module": null
      },
      {
        "comment_id": "2029653628",
        "repo_full_name": "SWE-agent/SWE-agent",
        "pr_number": 1026,
        "pr_file": "sweagent/agent/problem_statement.py",
        "discussion_id": "1997696804",
        "commented_code": "@@ -125,11 +126,56 @@ def get_extra_fields(self) -> dict[str, Any]:\n         return self.extra_fields\n \n \n-ProblemStatementConfig = TextProblemStatement | GithubIssue | EmptyProblemStatement | FileProblemStatement\n+class CTFProblemStatement(BaseModel):\n+    path: Path\n+\n+    name: str = None  # type: ignore\n+    category: Literal[\"crypto\", \"rev\", \"web\", \"forensics\", \"pwn\", \"misc\"] = None  # type: ignore\n+    description: str = None  # type: ignore\n+    files: list[str] = None  # type: ignore\n+    flag: str = None  # type: ignore\n+\n+    extra_fields: dict[str, Any] = Field(default_factory=dict)\n+    \"\"\"Any additional data to be added to the instance.\n+    This data will be available when formatting prompt templates.\n+    \"\"\"\n+\n+    type: Literal[\"ctf_json\"] = \"ctf_json\"\n+    \"\"\"Discriminator for (de)serialization/CLI. Do not change.\"\"\"\n+\n+    id: str = None  # type: ignore\n+\n+    model_config = ConfigDict(extra=\"forbid\")\n+\n+    def model_post_init(self, __context: Any) -> None:",
        "comment_created_at": "2025-04-05T02:08:50+00:00",
        "comment_author": "klieret",
        "comment_body": "The `default_factory` thing does not work if with a lot of pydantic mechanics. `data` is not always present there. For example when I was simply running `sweagent run --agent.model.name=human`, which is valid, this would throw an error:\r\n\r\n```\r\n\ud83d\udc4b INFO     This is SWE-agent version 1.0.1 (hash='33adb47983f5825aac91e68e5e65fb7ebb2cd2c6') with SWE-ReX version 1.2.1 (rex_hash='unavailable').\r\n/opt/miniconda3/envs/swea13/lib/python3.13/site-packages/pydantic/_internal/_config.py:341: UserWarning: Valid config keys have changed in V2:\r\n* 'fields' has been removed\r\n  warnings.warn(message, UserWarning)\r\n\ud83d\udd27 INFO     Loading default config from /Users/fuchur/Documents/24/git_sync/SWE-agent/config/anthropic_filemap.yaml, because no other config file is specified. Specify --no_config_file to disable this.\r\n\ud83d\udd27 INFO     Loaded environment variables from /Users/fuchur/Documents/24/git_sync/SWE-agent/.env\r\n\ud83e\udd16 DEBUG    Loading readline history from /Users/fuchur/Documents/24/git_sync/SWE-agent/.swe-agent-human-history\r\nTraceback (most recent call last):\r\n  File \"/opt/miniconda3/envs/swea13/bin/sweagent\", line 8, in <module>\r\n    sys.exit(main())\r\n             ~~~~^^\r\n  File \"/Users/fuchur/Documents/24/git_sync/SWE-agent/sweagent/run/run.py\", line 87, in main\r\n    run_single_main(remaining_args)\r\n    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^\r\n  File \"/Users/fuchur/Documents/24/git_sync/SWE-agent/sweagent/run/run_single.py\", line 224, in run_from_cli\r\n    run_from_config(BasicCLI(RunSingleConfig, help_text=help_text).get_config(args))  # type: ignore\r\n    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/fuchur/Documents/24/git_sync/SWE-agent/sweagent/run/run_single.py\", line 214, in run_from_config\r\n    RunSingle.from_config(config).run()\r\n    ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^\r\n  File \"/Users/fuchur/Documents/24/git_sync/SWE-agent/sweagent/run/run_single.py\", line 173, in from_config\r\n    agent.replay_config = config  # type: ignore[attr-defined]\r\n    ^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/fuchur/Documents/24/git_sync/SWE-agent/sweagent/agent/agents.py\", line 500, in replay_config\r\n    self._replay_config = RunSingleConfig.model_validate(_strip_abspath_from_dict(value.model_dump()))\r\n                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/miniconda3/envs/swea13/lib/python3.13/site-packages/pydantic/main.py\", line 596, in model_validate\r\n    return cls.__pydantic_validator__.validate_python(\r\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\r\n        obj, strict=strict, from_attributes=from_attributes, context=context\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    )\r\n    ^\r\n  File \"/opt/miniconda3/envs/swea13/lib/python3.13/site-packages/pydantic_settings/main.py\", line 167, in __init__\r\n    super().__init__(\r\n    ~~~~~~~~~~~~~~~~^\r\n        **__pydantic_self__._settings_build_values(\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    ...<24 lines>...\r\n        )\r\n        ^\r\n    )\r\n    ^\r\n  File \"/opt/miniconda3/envs/swea13/lib/python3.13/site-packages/pydantic/main.py\", line 212, in __init__\r\n    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)\r\nTypeError: _get_ctf_json() missing 1 required positional argument: 'data'\r\n```\r\n\r\nso I actually had to roll merging this PR back...",
        "pr_file_module": null
      },
      {
        "comment_id": "2029811334",
        "repo_full_name": "SWE-agent/SWE-agent",
        "pr_number": 1026,
        "pr_file": "sweagent/agent/problem_statement.py",
        "discussion_id": "1997696804",
        "commented_code": "@@ -125,11 +126,56 @@ def get_extra_fields(self) -> dict[str, Any]:\n         return self.extra_fields\n \n \n-ProblemStatementConfig = TextProblemStatement | GithubIssue | EmptyProblemStatement | FileProblemStatement\n+class CTFProblemStatement(BaseModel):\n+    path: Path\n+\n+    name: str = None  # type: ignore\n+    category: Literal[\"crypto\", \"rev\", \"web\", \"forensics\", \"pwn\", \"misc\"] = None  # type: ignore\n+    description: str = None  # type: ignore\n+    files: list[str] = None  # type: ignore\n+    flag: str = None  # type: ignore\n+\n+    extra_fields: dict[str, Any] = Field(default_factory=dict)\n+    \"\"\"Any additional data to be added to the instance.\n+    This data will be available when formatting prompt templates.\n+    \"\"\"\n+\n+    type: Literal[\"ctf_json\"] = \"ctf_json\"\n+    \"\"\"Discriminator for (de)serialization/CLI. Do not change.\"\"\"\n+\n+    id: str = None  # type: ignore\n+\n+    model_config = ConfigDict(extra=\"forbid\")\n+\n+    def model_post_init(self, __context: Any) -> None:",
        "comment_created_at": "2025-04-05T08:31:25+00:00",
        "comment_author": "talorabr",
        "comment_body": "oh no :( \r\nI will change the implementation.\r\nIt is because of pydantic automatic solving of Union types trying all these different classes, I thought I solved it but apparently not for all cases.\r\nSorry for that!",
        "pr_file_module": null
      },
      {
        "comment_id": "2029954160",
        "repo_full_name": "SWE-agent/SWE-agent",
        "pr_number": 1026,
        "pr_file": "sweagent/agent/problem_statement.py",
        "discussion_id": "1997696804",
        "commented_code": "@@ -125,11 +126,56 @@ def get_extra_fields(self) -> dict[str, Any]:\n         return self.extra_fields\n \n \n-ProblemStatementConfig = TextProblemStatement | GithubIssue | EmptyProblemStatement | FileProblemStatement\n+class CTFProblemStatement(BaseModel):\n+    path: Path\n+\n+    name: str = None  # type: ignore\n+    category: Literal[\"crypto\", \"rev\", \"web\", \"forensics\", \"pwn\", \"misc\"] = None  # type: ignore\n+    description: str = None  # type: ignore\n+    files: list[str] = None  # type: ignore\n+    flag: str = None  # type: ignore\n+\n+    extra_fields: dict[str, Any] = Field(default_factory=dict)\n+    \"\"\"Any additional data to be added to the instance.\n+    This data will be available when formatting prompt templates.\n+    \"\"\"\n+\n+    type: Literal[\"ctf_json\"] = \"ctf_json\"\n+    \"\"\"Discriminator for (de)serialization/CLI. Do not change.\"\"\"\n+\n+    id: str = None  # type: ignore\n+\n+    model_config = ConfigDict(extra=\"forbid\")\n+\n+    def model_post_init(self, __context: Any) -> None:",
        "comment_created_at": "2025-04-05T19:38:24+00:00",
        "comment_author": "klieret",
        "comment_body": "Yeah, exactly. Pydantic can be a real pain haha",
        "pr_file_module": null
      },
      {
        "comment_id": "2029954289",
        "repo_full_name": "SWE-agent/SWE-agent",
        "pr_number": 1026,
        "pr_file": "sweagent/agent/problem_statement.py",
        "discussion_id": "1997696804",
        "commented_code": "@@ -125,11 +126,56 @@ def get_extra_fields(self) -> dict[str, Any]:\n         return self.extra_fields\n \n \n-ProblemStatementConfig = TextProblemStatement | GithubIssue | EmptyProblemStatement | FileProblemStatement\n+class CTFProblemStatement(BaseModel):\n+    path: Path\n+\n+    name: str = None  # type: ignore\n+    category: Literal[\"crypto\", \"rev\", \"web\", \"forensics\", \"pwn\", \"misc\"] = None  # type: ignore\n+    description: str = None  # type: ignore\n+    files: list[str] = None  # type: ignore\n+    flag: str = None  # type: ignore\n+\n+    extra_fields: dict[str, Any] = Field(default_factory=dict)\n+    \"\"\"Any additional data to be added to the instance.\n+    This data will be available when formatting prompt templates.\n+    \"\"\"\n+\n+    type: Literal[\"ctf_json\"] = \"ctf_json\"\n+    \"\"\"Discriminator for (de)serialization/CLI. Do not change.\"\"\"\n+\n+    id: str = None  # type: ignore\n+\n+    model_config = ConfigDict(extra=\"forbid\")\n+\n+    def model_post_init(self, __context: Any) -> None:",
        "comment_created_at": "2025-04-05T19:38:55+00:00",
        "comment_author": "klieret",
        "comment_body": "But I think either way it makes more sense to just have the path to the json as the one variable that is set ",
        "pr_file_module": null
      },
      {
        "comment_id": "2029954458",
        "repo_full_name": "SWE-agent/SWE-agent",
        "pr_number": 1026,
        "pr_file": "sweagent/agent/problem_statement.py",
        "discussion_id": "1997696804",
        "commented_code": "@@ -125,11 +126,56 @@ def get_extra_fields(self) -> dict[str, Any]:\n         return self.extra_fields\n \n \n-ProblemStatementConfig = TextProblemStatement | GithubIssue | EmptyProblemStatement | FileProblemStatement\n+class CTFProblemStatement(BaseModel):\n+    path: Path\n+\n+    name: str = None  # type: ignore\n+    category: Literal[\"crypto\", \"rev\", \"web\", \"forensics\", \"pwn\", \"misc\"] = None  # type: ignore\n+    description: str = None  # type: ignore\n+    files: list[str] = None  # type: ignore\n+    flag: str = None  # type: ignore\n+\n+    extra_fields: dict[str, Any] = Field(default_factory=dict)\n+    \"\"\"Any additional data to be added to the instance.\n+    This data will be available when formatting prompt templates.\n+    \"\"\"\n+\n+    type: Literal[\"ctf_json\"] = \"ctf_json\"\n+    \"\"\"Discriminator for (de)serialization/CLI. Do not change.\"\"\"\n+\n+    id: str = None  # type: ignore\n+\n+    model_config = ConfigDict(extra=\"forbid\")\n+\n+    def model_post_init(self, __context: Any) -> None:",
        "comment_created_at": "2025-04-05T19:40:01+00:00",
        "comment_author": "klieret",
        "comment_body": "Feel free to either push to the #1059 branch or start a new PR whatever is easier! Hopefully I'll be able to review faster this time!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1671561953",
    "pr_number": 638,
    "pr_file": "sweagent/agent/models.py",
    "created_at": "2024-07-10T03:26:04+00:00",
    "commented_code": "azure_endpoint=keys_config[\"AZURE_OPENAI_ENDPOINT\"],\n                 api_version=keys_config.get(\"AZURE_OPENAI_API_VERSION\", \"2024-02-01\"),\n             )\n+        elif self.args.model_name.startswith(\"deepseek\") or self.args.model_name.startswith(\"coder\"):\n+            api_base_url: str | None = keys_config.get(\"DEEPSEEK_API_BASE_URL\", None)",
    "repo_full_name": "SWE-agent/SWE-agent",
    "discussion_comments": [
      {
        "comment_id": "1671561953",
        "repo_full_name": "SWE-agent/SWE-agent",
        "pr_number": 638,
        "pr_file": "sweagent/agent/models.py",
        "discussion_id": "1671561953",
        "commented_code": "@@ -257,6 +263,9 @@ def __init__(self, args: ModelArguments, commands: list[Command]):\n                 azure_endpoint=keys_config[\"AZURE_OPENAI_ENDPOINT\"],\n                 api_version=keys_config.get(\"AZURE_OPENAI_API_VERSION\", \"2024-02-01\"),\n             )\n+        elif self.args.model_name.startswith(\"deepseek\") or self.args.model_name.startswith(\"coder\"):\n+            api_base_url: str | None = keys_config.get(\"DEEPSEEK_API_BASE_URL\", None)",
        "comment_created_at": "2024-07-10T03:26:04+00:00",
        "comment_author": "klieret",
        "comment_body": "we should let it fail if the base url isn't specified, because else it's just normal openai with wrong key",
        "pr_file_module": null
      },
      {
        "comment_id": "1674250654",
        "repo_full_name": "SWE-agent/SWE-agent",
        "pr_number": 638,
        "pr_file": "sweagent/agent/models.py",
        "discussion_id": "1671561953",
        "commented_code": "@@ -257,6 +263,9 @@ def __init__(self, args: ModelArguments, commands: list[Command]):\n                 azure_endpoint=keys_config[\"AZURE_OPENAI_ENDPOINT\"],\n                 api_version=keys_config.get(\"AZURE_OPENAI_API_VERSION\", \"2024-02-01\"),\n             )\n+        elif self.args.model_name.startswith(\"deepseek\") or self.args.model_name.startswith(\"coder\"):\n+            api_base_url: str | None = keys_config.get(\"DEEPSEEK_API_BASE_URL\", None)",
        "comment_created_at": "2024-07-11T15:41:34+00:00",
        "comment_author": "jcraftsman",
        "comment_body": "[Here](https://github.com/princeton-nlp/SWE-agent/pull/638/commits/0aa2956e87ad224d8971aadcecc9492c032b03b8) you go \ud83d\ude42 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1599025682",
    "pr_number": 317,
    "pr_file": "sweagent/environment/swe_env.py",
    "created_at": "2024-05-13T20:08:03+00:00",
    "commented_code": "self.image_name = args.image_name\n         self._reset_container()\n \n+        # Prepare image tag prefix for cached task environments\n+        if self.args.cache_task_images:\n+            logger.info(\"Task environment caching enabled\")\n+            tag = f\"{self.args.data_path.replace('/', '_')}__{self.args.split}__{self.args.base_commit or 'head'}__\"",
    "repo_full_name": "SWE-agent/SWE-agent",
    "discussion_comments": [
      {
        "comment_id": "1599025682",
        "repo_full_name": "SWE-agent/SWE-agent",
        "pr_number": 317,
        "pr_file": "sweagent/environment/swe_env.py",
        "discussion_id": "1599025682",
        "commented_code": "@@ -135,6 +137,14 @@ def __init__(self, args: EnvironmentArguments):\n         self.image_name = args.image_name\n         self._reset_container()\n \n+        # Prepare image tag prefix for cached task environments\n+        if self.args.cache_task_images:\n+            logger.info(\"Task environment caching enabled\")\n+            tag = f\"{self.args.data_path.replace('/', '_')}__{self.args.split}__{self.args.base_commit or 'head'}__\"",
        "comment_created_at": "2024-05-13T20:08:03+00:00",
        "comment_author": "klieret",
        "comment_body": "Data path can now be all kinds of things, including the full text of the problem statement. I could push some code to work around these things.\r\n\r\nThough I also wonder if `data_path` is really what we should make this depend on. Perhaps we could rather intercept the actual setup stages and hash the setup config or something like that? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1599106668",
        "repo_full_name": "SWE-agent/SWE-agent",
        "pr_number": 317,
        "pr_file": "sweagent/environment/swe_env.py",
        "discussion_id": "1599025682",
        "commented_code": "@@ -135,6 +137,14 @@ def __init__(self, args: EnvironmentArguments):\n         self.image_name = args.image_name\n         self._reset_container()\n \n+        # Prepare image tag prefix for cached task environments\n+        if self.args.cache_task_images:\n+            logger.info(\"Task environment caching enabled\")\n+            tag = f\"{self.args.data_path.replace('/', '_')}__{self.args.split}__{self.args.base_commit or 'head'}__\"",
        "comment_created_at": "2024-05-13T21:28:17+00:00",
        "comment_author": "ollmer",
        "comment_body": "Some dataset fingerprints would be even better, I agree. Also, there is a limit of 128 characters for the docker image tag, so this would help stay within the limit with any dataset. I will try to implement the idea with the config hash.",
        "pr_file_module": null
      }
    ]
  }
]