[
  {
    "discussion_id": "270603555",
    "pr_number": 165,
    "pr_file": "docs/site/tutorials/python_interoperability.ipynb",
    "created_at": "2019-03-30T00:09:36+00:00",
    "commented_code": "{\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0,\n  \"metadata\": {\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"colab_type\": \"text\",\n    \"id\": \"9TV7IYeqifSv\"\n   },\n   \"source\": [\n    \"##### Copyright 2018 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=ByZjmtFgB_Y5).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 0,\n   \"metadata\": {\n    \"colab\": {},\n    \"colab_type\": \"code\",\n    \"id\": \"tRIJp_4m_Afz\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n    \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n    \"// you may not use this file except in compliance with the License.\\n\",\n    \"// You may obtain a copy of the License at\\n\",\n    \"//\\n\",\n    \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n    \"//\\n\",\n    \"// Unless required by applicable law or agreed to in writing, software\\n\",\n    \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n    \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n    \"// See the License for the specific language governing permissions and\\n\",\n    \"// limitations under the License.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"colab_type\": \"text\",\n    \"id\": \"sI1ZtrdiA4aY\"\n   },\n   \"source\": [\n    \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n    \"  <td>\\n\",\n    \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/python_interoperability\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n    \"  </td>\\n\",\n    \"  <td>\\n\",\n    \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n    \"  </td>\\n\",\n    \"  <td>\\n\",\n    \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n    \"  </td>\\n\",\n    \"</table>\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"colab_type\": \"text\",\n    \"id\": \"8sa42_NblqRE\"\n   },\n   \"source\": [\n    \"# Python interoperability\\n\",\n    \"\\n\",\n    \"Swift For TensorFlow supports Python interoperability.\\n\",\n    \"\\n\",\n    \"You can import Python modules from Swift, call Python functions, and convert values between Swift and Python.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Python Versions\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The easiest way to use a particular version of Python is by setting `PYTHON_LIBRARY` in your shell.  For example: \\n\",",
    "repo_full_name": "tensorflow/swift",
    "discussion_comments": [
      {
        "comment_id": "270603555",
        "repo_full_name": "tensorflow/swift",
        "pr_number": 165,
        "pr_file": "docs/site/tutorials/python_interoperability.ipynb",
        "discussion_id": "270603555",
        "commented_code": "@@ -1,608 +1,667 @@\n {\n-  \"nbformat\": 4,\n-  \"nbformat_minor\": 0,\n-  \"metadata\": {\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {\n+    \"colab_type\": \"text\",\n+    \"id\": \"9TV7IYeqifSv\"\n+   },\n+   \"source\": [\n+    \"##### Copyright 2018 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=ByZjmtFgB_Y5).\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 0,\n+   \"metadata\": {\n+    \"colab\": {},\n+    \"colab_type\": \"code\",\n+    \"id\": \"tRIJp_4m_Afz\"\n+   },\n+   \"outputs\": [],\n+   \"source\": [\n+    \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n+    \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n+    \"// you may not use this file except in compliance with the License.\\n\",\n+    \"// You may obtain a copy of the License at\\n\",\n+    \"//\\n\",\n+    \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n+    \"//\\n\",\n+    \"// Unless required by applicable law or agreed to in writing, software\\n\",\n+    \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n+    \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n+    \"// See the License for the specific language governing permissions and\\n\",\n+    \"// limitations under the License.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {\n+    \"colab_type\": \"text\",\n+    \"id\": \"sI1ZtrdiA4aY\"\n+   },\n+   \"source\": [\n+    \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n+    \"  <td>\\n\",\n+    \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/python_interoperability\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n+    \"  </td>\\n\",\n+    \"  <td>\\n\",\n+    \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n+    \"  </td>\\n\",\n+    \"  <td>\\n\",\n+    \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n+    \"  </td>\\n\",\n+    \"</table>\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {\n+    \"colab_type\": \"text\",\n+    \"id\": \"8sa42_NblqRE\"\n+   },\n+   \"source\": [\n+    \"# Python interoperability\\n\",\n+    \"\\n\",\n+    \"Swift For TensorFlow supports Python interoperability.\\n\",\n+    \"\\n\",\n+    \"You can import Python modules from Swift, call Python functions, and convert values between Swift and Python.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Python Versions\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"The easiest way to use a particular version of Python is by setting `PYTHON_LIBRARY` in your shell.  For example: \\n\",",
        "comment_created_at": "2019-03-30T00:09:36+00:00",
        "comment_author": "dan-zheng",
        "comment_body": "```suggestion\r\n    \"To use a specific Python installation, set the `PYTHON_LIBRARY` environment variable to the `libpython` shared library provided by the installation. For example:\\n\",\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "270603791",
    "pr_number": 165,
    "pr_file": "docs/site/tutorials/python_interoperability.ipynb",
    "created_at": "2019-03-30T00:12:28+00:00",
    "commented_code": "{\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0,\n  \"metadata\": {\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"colab_type\": \"text\",\n    \"id\": \"9TV7IYeqifSv\"\n   },\n   \"source\": [\n    \"##### Copyright 2018 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=ByZjmtFgB_Y5).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 0,\n   \"metadata\": {\n    \"colab\": {},\n    \"colab_type\": \"code\",\n    \"id\": \"tRIJp_4m_Afz\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n    \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n    \"// you may not use this file except in compliance with the License.\\n\",\n    \"// You may obtain a copy of the License at\\n\",\n    \"//\\n\",\n    \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n    \"//\\n\",\n    \"// Unless required by applicable law or agreed to in writing, software\\n\",\n    \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n    \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n    \"// See the License for the specific language governing permissions and\\n\",\n    \"// limitations under the License.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"colab_type\": \"text\",\n    \"id\": \"sI1ZtrdiA4aY\"\n   },\n   \"source\": [\n    \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n    \"  <td>\\n\",\n    \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/python_interoperability\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n    \"  </td>\\n\",\n    \"  <td>\\n\",\n    \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n    \"  </td>\\n\",\n    \"  <td>\\n\",\n    \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n    \"  </td>\\n\",\n    \"</table>\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"colab_type\": \"text\",\n    \"id\": \"8sa42_NblqRE\"\n   },\n   \"source\": [\n    \"# Python interoperability\\n\",\n    \"\\n\",\n    \"Swift For TensorFlow supports Python interoperability.\\n\",\n    \"\\n\",\n    \"You can import Python modules from Swift, call Python functions, and convert values between Swift and Python.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Python Versions\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The easiest way to use a particular version of Python is by setting `PYTHON_LIBRARY` in your shell.  For example: \\n\",\n    \"\\n\",\n    \"`export PYTHON_LIBRARY=\\\"~/anaconda3/lib/libpython3.7m.so\\\"`\\n\",\n    \"\\n\",\n    \"If using anaconda, the exact filename will differ on different platforms.\"",
    "repo_full_name": "tensorflow/swift",
    "discussion_comments": [
      {
        "comment_id": "270603791",
        "repo_full_name": "tensorflow/swift",
        "pr_number": 165,
        "pr_file": "docs/site/tutorials/python_interoperability.ipynb",
        "discussion_id": "270603791",
        "commented_code": "@@ -1,608 +1,667 @@\n {\n-  \"nbformat\": 4,\n-  \"nbformat_minor\": 0,\n-  \"metadata\": {\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {\n+    \"colab_type\": \"text\",\n+    \"id\": \"9TV7IYeqifSv\"\n+   },\n+   \"source\": [\n+    \"##### Copyright 2018 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=ByZjmtFgB_Y5).\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 0,\n+   \"metadata\": {\n+    \"colab\": {},\n+    \"colab_type\": \"code\",\n+    \"id\": \"tRIJp_4m_Afz\"\n+   },\n+   \"outputs\": [],\n+   \"source\": [\n+    \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n+    \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n+    \"// you may not use this file except in compliance with the License.\\n\",\n+    \"// You may obtain a copy of the License at\\n\",\n+    \"//\\n\",\n+    \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n+    \"//\\n\",\n+    \"// Unless required by applicable law or agreed to in writing, software\\n\",\n+    \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n+    \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n+    \"// See the License for the specific language governing permissions and\\n\",\n+    \"// limitations under the License.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {\n+    \"colab_type\": \"text\",\n+    \"id\": \"sI1ZtrdiA4aY\"\n+   },\n+   \"source\": [\n+    \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n+    \"  <td>\\n\",\n+    \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/python_interoperability\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n+    \"  </td>\\n\",\n+    \"  <td>\\n\",\n+    \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n+    \"  </td>\\n\",\n+    \"  <td>\\n\",\n+    \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n+    \"  </td>\\n\",\n+    \"</table>\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {\n+    \"colab_type\": \"text\",\n+    \"id\": \"8sa42_NblqRE\"\n+   },\n+   \"source\": [\n+    \"# Python interoperability\\n\",\n+    \"\\n\",\n+    \"Swift For TensorFlow supports Python interoperability.\\n\",\n+    \"\\n\",\n+    \"You can import Python modules from Swift, call Python functions, and convert values between Swift and Python.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Python Versions\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"The easiest way to use a particular version of Python is by setting `PYTHON_LIBRARY` in your shell.  For example: \\n\",\n+    \"\\n\",\n+    \"`export PYTHON_LIBRARY=\\\"~/anaconda3/lib/libpython3.7m.so\\\"`\\n\",\n+    \"\\n\",\n+    \"If using anaconda, the exact filename will differ on different platforms.\"",
        "comment_created_at": "2019-03-30T00:12:28+00:00",
        "comment_author": "dan-zheng",
        "comment_body": "The exact filename will differ across Python environments and platforms.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "270603997",
    "pr_number": 165,
    "pr_file": "docs/site/tutorials/python_interoperability.ipynb",
    "created_at": "2019-03-30T00:15:12+00:00",
    "commented_code": "{\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0,\n  \"metadata\": {\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"colab_type\": \"text\",\n    \"id\": \"9TV7IYeqifSv\"\n   },\n   \"source\": [\n    \"##### Copyright 2018 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=ByZjmtFgB_Y5).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 0,\n   \"metadata\": {\n    \"colab\": {},\n    \"colab_type\": \"code\",\n    \"id\": \"tRIJp_4m_Afz\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n    \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n    \"// you may not use this file except in compliance with the License.\\n\",\n    \"// You may obtain a copy of the License at\\n\",\n    \"//\\n\",\n    \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n    \"//\\n\",\n    \"// Unless required by applicable law or agreed to in writing, software\\n\",\n    \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n    \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n    \"// See the License for the specific language governing permissions and\\n\",\n    \"// limitations under the License.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"colab_type\": \"text\",\n    \"id\": \"sI1ZtrdiA4aY\"\n   },\n   \"source\": [\n    \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n    \"  <td>\\n\",\n    \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/python_interoperability\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n    \"  </td>\\n\",\n    \"  <td>\\n\",\n    \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n    \"  </td>\\n\",\n    \"  <td>\\n\",\n    \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n    \"  </td>\\n\",\n    \"</table>\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"colab_type\": \"text\",\n    \"id\": \"8sa42_NblqRE\"\n   },\n   \"source\": [\n    \"# Python interoperability\\n\",\n    \"\\n\",\n    \"Swift For TensorFlow supports Python interoperability.\\n\",\n    \"\\n\",\n    \"You can import Python modules from Swift, call Python functions, and convert values between Swift and Python.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Python Versions\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The easiest way to use a particular version of Python is by setting `PYTHON_LIBRARY` in your shell.  For example: \\n\",\n    \"\\n\",\n    \"`export PYTHON_LIBRARY=\\\"~/anaconda3/lib/libpython3.7m.so\\\"`\\n\",\n    \"\\n\",\n    \"If using anaconda, the exact filename will differ on different platforms.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {\n    \"colab\": {\n      \"name\": \"Python interoperability.ipynb\",\n      \"version\": \"0.3.2\",\n      \"provenance\": [],\n      \"collapsed_sections\": [],\n      \"toc_visible\": true\n     \"base_uri\": \"https://localhost:8080/\",\n     \"height\": 51\n    },\n    \"kernelspec\": {\n      \"name\": \"swift\",\n      \"display_name\": \"Swift\"\n    \"colab_type\": \"code\",\n    \"id\": \"kZRlD4utdPuX\",\n    \"outputId\": \"101c8d8f-9d75-485f-9678-d27ece433fbb\"\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"3.6.7 (default, Oct 22 2018, 11:32:17) \\r\\n\",\n      \"[GCC 8.2.0]\\r\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"// export PYTHON_LIBRARY=\\\"~/anaconda3/lib/libpython3.6m.so\\\"\\n\",\n    \"import Python\\n\",\n    \"print(Python.version)\"\n   ]\n  },\n  \"cells\": [\n    {\n      \"metadata\": {\n        \"id\": \"9TV7IYeqifSv\",\n        \"colab_type\": \"text\"\n      },\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"##### Copyright 2018 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=ByZjmtFgB_Y5).\"\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"tRIJp_4m_Afz\",\n        \"colab_type\": \"code\",\n        \"colab\": {}\n      },\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n        \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n        \"// you may not use this file except in compliance with the License.\\n\",\n        \"// You may obtain a copy of the License at\\n\",\n        \"//\\n\",\n        \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n        \"//\\n\",\n        \"// Unless required by applicable law or agreed to in writing, software\\n\",\n        \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n        \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n        \"// See the License for the specific language governing permissions and\\n\",\n        \"// limitations under the License.\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": []\n    },\n    {\n      \"metadata\": {\n        \"id\": \"sI1ZtrdiA4aY\",\n        \"colab_type\": \"text\"\n      },\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n        \"  <td>\\n\",\n        \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/python_interoperability\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n        \"  </td>\\n\",\n        \"  <td>\\n\",\n        \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n        \"  </td>\\n\",\n        \"  <td>\\n\",\n        \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n        \"  </td>\\n\",\n        \"</table>\"\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"8sa42_NblqRE\",\n        \"colab_type\": \"text\"\n      },\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"# Python interoperability\\n\",\n        \"\\n\",\n        \"Swift For TensorFlow supports Python interoperability.\\n\",\n        \"\\n\",\n        \"You can import Python modules from Swift, call Python functions, and convert values between Swift and Python.\"\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"kZRlD4utdPuX\",\n        \"colab_type\": \"code\",\n        \"outputId\": \"101c8d8f-9d75-485f-9678-d27ece433fbb\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 51\n        }\n      },\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"import Python\\n\",\n        \"print(Python.version)\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"3.6.7 (default, Oct 22 2018, 11:32:17) \\r\\n\",\n            \"[GCC 8.2.0]\\r\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"rU0WY_sJodio\",\n        \"colab_type\": \"text\"\n      },\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"## Basics\\n\",\n        \"\\n\",\n        \"In Swift, `PythonObject` represents an object from Python.\\n\",\n        \"All Python APIs use and return `PythonObject` instances.\\n\",\n        \"\\n\",\n        \"Basic types in Swift (like numbers and arrays) are convertible to `PythonObject`. In some cases (for literals and functions taking `PythonConvertible` arguments), conversion happens implicitly. To explicitly cast a Swift value to `PythonObject`, use the `PythonObject` initializer.\\n\",\n        \"\\n\",\n        \"`PythonObject` defines many standard operations, including numeric operations, indexing, and iteration.\"\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"kqXILiXhq-iM\",\n        \"colab_type\": \"code\",\n        \"outputId\": \"074fbc43-9c87-4fb2-b970-ffeaff12987a\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 102\n        }\n      },\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"// Convert standard Swift types to Python.\\n\",\n        \"let pythonInt: PythonObject = 1\\n\",\n        \"let pythonFloat: PythonObject = 3.0\\n\",\n        \"let pythonString: PythonObject = \\\"Hello Python!\\\"\\n\",\n        \"let pythonRange: PythonObject = PythonObject(5..<10)\\n\",\n        \"let pythonArray: PythonObject = [1, 2, 3, 4]\\n\",\n        \"let pythonDict: PythonObject = [\\\"foo\\\": [0], \\\"bar\\\": [1, 2, 3]]\\n\",\n        \"\\n\",\n        \"// Perform standard operations on Python objects.\\n\",\n        \"print(pythonInt + pythonFloat)\\n\",\n        \"print(pythonString[0..<6])\\n\",\n        \"print(pythonRange)\\n\",\n        \"print(pythonArray[2])\\n\",\n        \"print(pythonDict[\\\"bar\\\"])\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"4.0\\r\\n\",\n            \"Hello \\r\\n\",\n            \"slice(5, 10, None)\\r\\n\",\n            \"3\\r\\n\",\n            \"[1, 2, 3]\\r\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"fEAEyUExXT3I\",\n        \"colab_type\": \"code\",\n        \"outputId\": \"6e53881b-8520-4d3a-efda-9ac3e4f5a53a\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 102\n        }\n      },\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"// Convert Python objects back to Swift.\\n\",\n        \"let int = Int(pythonInt)!\\n\",\n        \"let float = Float(pythonFloat)!\\n\",\n        \"let string = String(pythonString)!\\n\",\n        \"let range = Range<Int>(pythonRange)!\\n\",\n        \"let array: [Int] = Array(pythonArray)!\\n\",\n        \"let dict: [String: [Int]] = Dictionary(pythonDict)!\\n\",\n        \"\\n\",\n        \"// Perform standard operations.\\n\",\n        \"// Outputs are the same as Python!\\n\",\n        \"print(Float(int) + float)\\n\",\n        \"print(string.prefix(6))\\n\",\n        \"print(range)\\n\",\n        \"print(array[2])\\n\",\n        \"print(dict[\\\"bar\\\"]!)\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"4.0\\r\\n\",\n            \"Hello \\r\\n\",\n            \"5..<10\\r\\n\",\n            \"3\\r\\n\",\n            \"[1, 2, 3]\\r\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"1pMewsl0VgnJ\",\n        \"colab_type\": \"text\"\n      },\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"`PythonObject` defines conformances to many standard Swift protocols:\\n\",\n        \"* `Equatable`\\n\",\n        \"* `Comparable`\\n\",\n        \"* `Hashable`\\n\",\n        \"* `SignedNumeric`\\n\",\n        \"* `Strideable`\\n\",\n        \"* `MutableCollection`\\n\",\n        \"* All of the `ExpressibleBy_Literal` protocols\\n\",\n        \"\\n\",\n        \"Note that these conformances are not type-safe: crashes will occur if you attempt to use protocol functionality from an incompatible `PythonObject` instance.\"\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"W9bUsiOxVf_v\",\n        \"colab_type\": \"code\",\n        \"outputId\": \"abd837e0-de01-415d-d09e-a414aff54af7\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 119\n        }\n      },\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"let one: PythonObject = 1\\n\",\n        \"print(one == one)\\n\",\n        \"print(one < one)\\n\",\n        \"print(one + one)\\n\",\n        \"\\n\",\n        \"let array: PythonObject = [1, 2, 3]\\n\",\n        \"for (i, x) in array.enumerated() {\\n\",\n        \"    print(i, x)\\n\",\n        \"}\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"true\\r\\n\",\n            \"false\\r\\n\",\n            \"2\\r\\n\",\n            \"0 1\\r\\n\",\n            \"1 2\\r\\n\",\n            \"2 3\\r\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"w3lmTRCWT5sS\",\n        \"colab_type\": \"text\"\n      },\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"To convert tuples from Python to Swift, you must statically know the arity of the tuple.\\n\",\n        \"\\n\",\n        \"Call one of the following instance methods:\\n\",\n        \"- `PythonObject.tuple2`\\n\",\n        \"- `PythonObject.tuple3`\\n\",\n        \"- `PythonObject.tuple4`\"\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"fQ0HEX89T4mW\",\n        \"colab_type\": \"code\",\n        \"outputId\": \"e8333b10-0d79-443d-fa2c-7322ce199be4\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 51\n        }\n      },\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"let pythonTuple = Python.tuple([1, 2, 3])\\n\",\n        \"print(pythonTuple, Python.len(pythonTuple))\\n\",\n        \"\\n\",\n        \"// Convert to Swift.\\n\",\n        \"let tuple = pythonTuple.tuple3\\n\",\n        \"print(tuple)\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"(1, 2, 3) 3\\r\\n\",\n            \"(1, 2, 3)\\r\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Alternatively, you can also set `PYTHON_VERSION`.  This will cause swift to iteratively search the default path for your system for a matching version.  `PYTHON_LIBRARY` holds precedence over `PYTHON_VERSION`.\\n\",\n    \"\\n\",\n    \"There is also a `PythonLibrary.useVersion` function which is the equivalent of setting `PYTHON_VERSION`.\"",
    "repo_full_name": "tensorflow/swift",
    "discussion_comments": [
      {
        "comment_id": "270603997",
        "repo_full_name": "tensorflow/swift",
        "pr_number": 165,
        "pr_file": "docs/site/tutorials/python_interoperability.ipynb",
        "discussion_id": "270603997",
        "commented_code": "@@ -1,608 +1,667 @@\n {\n-  \"nbformat\": 4,\n-  \"nbformat_minor\": 0,\n-  \"metadata\": {\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {\n+    \"colab_type\": \"text\",\n+    \"id\": \"9TV7IYeqifSv\"\n+   },\n+   \"source\": [\n+    \"##### Copyright 2018 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=ByZjmtFgB_Y5).\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 0,\n+   \"metadata\": {\n+    \"colab\": {},\n+    \"colab_type\": \"code\",\n+    \"id\": \"tRIJp_4m_Afz\"\n+   },\n+   \"outputs\": [],\n+   \"source\": [\n+    \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n+    \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n+    \"// you may not use this file except in compliance with the License.\\n\",\n+    \"// You may obtain a copy of the License at\\n\",\n+    \"//\\n\",\n+    \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n+    \"//\\n\",\n+    \"// Unless required by applicable law or agreed to in writing, software\\n\",\n+    \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n+    \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n+    \"// See the License for the specific language governing permissions and\\n\",\n+    \"// limitations under the License.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {\n+    \"colab_type\": \"text\",\n+    \"id\": \"sI1ZtrdiA4aY\"\n+   },\n+   \"source\": [\n+    \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n+    \"  <td>\\n\",\n+    \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/python_interoperability\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n+    \"  </td>\\n\",\n+    \"  <td>\\n\",\n+    \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n+    \"  </td>\\n\",\n+    \"  <td>\\n\",\n+    \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n+    \"  </td>\\n\",\n+    \"</table>\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {\n+    \"colab_type\": \"text\",\n+    \"id\": \"8sa42_NblqRE\"\n+   },\n+   \"source\": [\n+    \"# Python interoperability\\n\",\n+    \"\\n\",\n+    \"Swift For TensorFlow supports Python interoperability.\\n\",\n+    \"\\n\",\n+    \"You can import Python modules from Swift, call Python functions, and convert values between Swift and Python.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Python Versions\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"The easiest way to use a particular version of Python is by setting `PYTHON_LIBRARY` in your shell.  For example: \\n\",\n+    \"\\n\",\n+    \"`export PYTHON_LIBRARY=\\\"~/anaconda3/lib/libpython3.7m.so\\\"`\\n\",\n+    \"\\n\",\n+    \"If using anaconda, the exact filename will differ on different platforms.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 5,\n+   \"metadata\": {\n     \"colab\": {\n-      \"name\": \"Python interoperability.ipynb\",\n-      \"version\": \"0.3.2\",\n-      \"provenance\": [],\n-      \"collapsed_sections\": [],\n-      \"toc_visible\": true\n+     \"base_uri\": \"https://localhost:8080/\",\n+     \"height\": 51\n     },\n-    \"kernelspec\": {\n-      \"name\": \"swift\",\n-      \"display_name\": \"Swift\"\n+    \"colab_type\": \"code\",\n+    \"id\": \"kZRlD4utdPuX\",\n+    \"outputId\": \"101c8d8f-9d75-485f-9678-d27ece433fbb\"\n+   },\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"3.6.7 (default, Oct 22 2018, 11:32:17) \\r\\n\",\n+      \"[GCC 8.2.0]\\r\\n\"\n+     ]\n     }\n+   ],\n+   \"source\": [\n+    \"// export PYTHON_LIBRARY=\\\"~/anaconda3/lib/libpython3.6m.so\\\"\\n\",\n+    \"import Python\\n\",\n+    \"print(Python.version)\"\n+   ]\n   },\n-  \"cells\": [\n-    {\n-      \"metadata\": {\n-        \"id\": \"9TV7IYeqifSv\",\n-        \"colab_type\": \"text\"\n-      },\n-      \"cell_type\": \"markdown\",\n-      \"source\": [\n-        \"##### Copyright 2018 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=ByZjmtFgB_Y5).\"\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"tRIJp_4m_Afz\",\n-        \"colab_type\": \"code\",\n-        \"colab\": {}\n-      },\n-      \"cell_type\": \"code\",\n-      \"source\": [\n-        \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n-        \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n-        \"// you may not use this file except in compliance with the License.\\n\",\n-        \"// You may obtain a copy of the License at\\n\",\n-        \"//\\n\",\n-        \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n-        \"//\\n\",\n-        \"// Unless required by applicable law or agreed to in writing, software\\n\",\n-        \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n-        \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n-        \"// See the License for the specific language governing permissions and\\n\",\n-        \"// limitations under the License.\"\n-      ],\n-      \"execution_count\": 0,\n-      \"outputs\": []\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"sI1ZtrdiA4aY\",\n-        \"colab_type\": \"text\"\n-      },\n-      \"cell_type\": \"markdown\",\n-      \"source\": [\n-        \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n-        \"  <td>\\n\",\n-        \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/python_interoperability\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n-        \"  </td>\\n\",\n-        \"  <td>\\n\",\n-        \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n-        \"  </td>\\n\",\n-        \"  <td>\\n\",\n-        \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n-        \"  </td>\\n\",\n-        \"</table>\"\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"8sa42_NblqRE\",\n-        \"colab_type\": \"text\"\n-      },\n-      \"cell_type\": \"markdown\",\n-      \"source\": [\n-        \"# Python interoperability\\n\",\n-        \"\\n\",\n-        \"Swift For TensorFlow supports Python interoperability.\\n\",\n-        \"\\n\",\n-        \"You can import Python modules from Swift, call Python functions, and convert values between Swift and Python.\"\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"kZRlD4utdPuX\",\n-        \"colab_type\": \"code\",\n-        \"outputId\": \"101c8d8f-9d75-485f-9678-d27ece433fbb\",\n-        \"colab\": {\n-          \"base_uri\": \"https://localhost:8080/\",\n-          \"height\": 51\n-        }\n-      },\n-      \"cell_type\": \"code\",\n-      \"source\": [\n-        \"import Python\\n\",\n-        \"print(Python.version)\"\n-      ],\n-      \"execution_count\": 0,\n-      \"outputs\": [\n-        {\n-          \"output_type\": \"stream\",\n-          \"text\": [\n-            \"3.6.7 (default, Oct 22 2018, 11:32:17) \\r\\n\",\n-            \"[GCC 8.2.0]\\r\\n\"\n-          ],\n-          \"name\": \"stdout\"\n-        }\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"rU0WY_sJodio\",\n-        \"colab_type\": \"text\"\n-      },\n-      \"cell_type\": \"markdown\",\n-      \"source\": [\n-        \"## Basics\\n\",\n-        \"\\n\",\n-        \"In Swift, `PythonObject` represents an object from Python.\\n\",\n-        \"All Python APIs use and return `PythonObject` instances.\\n\",\n-        \"\\n\",\n-        \"Basic types in Swift (like numbers and arrays) are convertible to `PythonObject`. In some cases (for literals and functions taking `PythonConvertible` arguments), conversion happens implicitly. To explicitly cast a Swift value to `PythonObject`, use the `PythonObject` initializer.\\n\",\n-        \"\\n\",\n-        \"`PythonObject` defines many standard operations, including numeric operations, indexing, and iteration.\"\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"kqXILiXhq-iM\",\n-        \"colab_type\": \"code\",\n-        \"outputId\": \"074fbc43-9c87-4fb2-b970-ffeaff12987a\",\n-        \"colab\": {\n-          \"base_uri\": \"https://localhost:8080/\",\n-          \"height\": 102\n-        }\n-      },\n-      \"cell_type\": \"code\",\n-      \"source\": [\n-        \"// Convert standard Swift types to Python.\\n\",\n-        \"let pythonInt: PythonObject = 1\\n\",\n-        \"let pythonFloat: PythonObject = 3.0\\n\",\n-        \"let pythonString: PythonObject = \\\"Hello Python!\\\"\\n\",\n-        \"let pythonRange: PythonObject = PythonObject(5..<10)\\n\",\n-        \"let pythonArray: PythonObject = [1, 2, 3, 4]\\n\",\n-        \"let pythonDict: PythonObject = [\\\"foo\\\": [0], \\\"bar\\\": [1, 2, 3]]\\n\",\n-        \"\\n\",\n-        \"// Perform standard operations on Python objects.\\n\",\n-        \"print(pythonInt + pythonFloat)\\n\",\n-        \"print(pythonString[0..<6])\\n\",\n-        \"print(pythonRange)\\n\",\n-        \"print(pythonArray[2])\\n\",\n-        \"print(pythonDict[\\\"bar\\\"])\"\n-      ],\n-      \"execution_count\": 0,\n-      \"outputs\": [\n-        {\n-          \"output_type\": \"stream\",\n-          \"text\": [\n-            \"4.0\\r\\n\",\n-            \"Hello \\r\\n\",\n-            \"slice(5, 10, None)\\r\\n\",\n-            \"3\\r\\n\",\n-            \"[1, 2, 3]\\r\\n\"\n-          ],\n-          \"name\": \"stdout\"\n-        }\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"fEAEyUExXT3I\",\n-        \"colab_type\": \"code\",\n-        \"outputId\": \"6e53881b-8520-4d3a-efda-9ac3e4f5a53a\",\n-        \"colab\": {\n-          \"base_uri\": \"https://localhost:8080/\",\n-          \"height\": 102\n-        }\n-      },\n-      \"cell_type\": \"code\",\n-      \"source\": [\n-        \"// Convert Python objects back to Swift.\\n\",\n-        \"let int = Int(pythonInt)!\\n\",\n-        \"let float = Float(pythonFloat)!\\n\",\n-        \"let string = String(pythonString)!\\n\",\n-        \"let range = Range<Int>(pythonRange)!\\n\",\n-        \"let array: [Int] = Array(pythonArray)!\\n\",\n-        \"let dict: [String: [Int]] = Dictionary(pythonDict)!\\n\",\n-        \"\\n\",\n-        \"// Perform standard operations.\\n\",\n-        \"// Outputs are the same as Python!\\n\",\n-        \"print(Float(int) + float)\\n\",\n-        \"print(string.prefix(6))\\n\",\n-        \"print(range)\\n\",\n-        \"print(array[2])\\n\",\n-        \"print(dict[\\\"bar\\\"]!)\"\n-      ],\n-      \"execution_count\": 0,\n-      \"outputs\": [\n-        {\n-          \"output_type\": \"stream\",\n-          \"text\": [\n-            \"4.0\\r\\n\",\n-            \"Hello \\r\\n\",\n-            \"5..<10\\r\\n\",\n-            \"3\\r\\n\",\n-            \"[1, 2, 3]\\r\\n\"\n-          ],\n-          \"name\": \"stdout\"\n-        }\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"1pMewsl0VgnJ\",\n-        \"colab_type\": \"text\"\n-      },\n-      \"cell_type\": \"markdown\",\n-      \"source\": [\n-        \"`PythonObject` defines conformances to many standard Swift protocols:\\n\",\n-        \"* `Equatable`\\n\",\n-        \"* `Comparable`\\n\",\n-        \"* `Hashable`\\n\",\n-        \"* `SignedNumeric`\\n\",\n-        \"* `Strideable`\\n\",\n-        \"* `MutableCollection`\\n\",\n-        \"* All of the `ExpressibleBy_Literal` protocols\\n\",\n-        \"\\n\",\n-        \"Note that these conformances are not type-safe: crashes will occur if you attempt to use protocol functionality from an incompatible `PythonObject` instance.\"\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"W9bUsiOxVf_v\",\n-        \"colab_type\": \"code\",\n-        \"outputId\": \"abd837e0-de01-415d-d09e-a414aff54af7\",\n-        \"colab\": {\n-          \"base_uri\": \"https://localhost:8080/\",\n-          \"height\": 119\n-        }\n-      },\n-      \"cell_type\": \"code\",\n-      \"source\": [\n-        \"let one: PythonObject = 1\\n\",\n-        \"print(one == one)\\n\",\n-        \"print(one < one)\\n\",\n-        \"print(one + one)\\n\",\n-        \"\\n\",\n-        \"let array: PythonObject = [1, 2, 3]\\n\",\n-        \"for (i, x) in array.enumerated() {\\n\",\n-        \"    print(i, x)\\n\",\n-        \"}\"\n-      ],\n-      \"execution_count\": 0,\n-      \"outputs\": [\n-        {\n-          \"output_type\": \"stream\",\n-          \"text\": [\n-            \"true\\r\\n\",\n-            \"false\\r\\n\",\n-            \"2\\r\\n\",\n-            \"0 1\\r\\n\",\n-            \"1 2\\r\\n\",\n-            \"2 3\\r\\n\"\n-          ],\n-          \"name\": \"stdout\"\n-        }\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"w3lmTRCWT5sS\",\n-        \"colab_type\": \"text\"\n-      },\n-      \"cell_type\": \"markdown\",\n-      \"source\": [\n-        \"To convert tuples from Python to Swift, you must statically know the arity of the tuple.\\n\",\n-        \"\\n\",\n-        \"Call one of the following instance methods:\\n\",\n-        \"- `PythonObject.tuple2`\\n\",\n-        \"- `PythonObject.tuple3`\\n\",\n-        \"- `PythonObject.tuple4`\"\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"fQ0HEX89T4mW\",\n-        \"colab_type\": \"code\",\n-        \"outputId\": \"e8333b10-0d79-443d-fa2c-7322ce199be4\",\n-        \"colab\": {\n-          \"base_uri\": \"https://localhost:8080/\",\n-          \"height\": 51\n-        }\n-      },\n-      \"cell_type\": \"code\",\n-      \"source\": [\n-        \"let pythonTuple = Python.tuple([1, 2, 3])\\n\",\n-        \"print(pythonTuple, Python.len(pythonTuple))\\n\",\n-        \"\\n\",\n-        \"// Convert to Swift.\\n\",\n-        \"let tuple = pythonTuple.tuple3\\n\",\n-        \"print(tuple)\"\n-      ],\n-      \"execution_count\": 0,\n-      \"outputs\": [\n-        {\n-          \"output_type\": \"stream\",\n-          \"text\": [\n-            \"(1, 2, 3) 3\\r\\n\",\n-            \"(1, 2, 3)\\r\\n\"\n-          ],\n-          \"name\": \"stdout\"\n-        }\n-      ]\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Alternatively, you can also set `PYTHON_VERSION`.  This will cause swift to iteratively search the default path for your system for a matching version.  `PYTHON_LIBRARY` holds precedence over `PYTHON_VERSION`.\\n\",\n+    \"\\n\",\n+    \"There is also a `PythonLibrary.useVersion` function which is the equivalent of setting `PYTHON_VERSION`.\"",
        "comment_created_at": "2019-03-30T00:15:12+00:00",
        "comment_author": "dan-zheng",
        "comment_body": "```suggestion\r\n    \"In your code, you can also call the `PythonLibrary.useVersion` function, which is equivalent to setting `PYTHON_VERSION`.\"\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "270604377",
    "pr_number": 165,
    "pr_file": "docs/site/tutorials/python_interoperability.ipynb",
    "created_at": "2019-03-30T00:20:56+00:00",
    "commented_code": "{\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0,\n  \"metadata\": {\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"colab_type\": \"text\",\n    \"id\": \"9TV7IYeqifSv\"\n   },\n   \"source\": [\n    \"##### Copyright 2018 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=ByZjmtFgB_Y5).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 0,\n   \"metadata\": {\n    \"colab\": {},\n    \"colab_type\": \"code\",\n    \"id\": \"tRIJp_4m_Afz\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n    \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n    \"// you may not use this file except in compliance with the License.\\n\",\n    \"// You may obtain a copy of the License at\\n\",\n    \"//\\n\",\n    \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n    \"//\\n\",\n    \"// Unless required by applicable law or agreed to in writing, software\\n\",\n    \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n    \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n    \"// See the License for the specific language governing permissions and\\n\",\n    \"// limitations under the License.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"colab_type\": \"text\",\n    \"id\": \"sI1ZtrdiA4aY\"\n   },\n   \"source\": [\n    \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n    \"  <td>\\n\",\n    \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/python_interoperability\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n    \"  </td>\\n\",\n    \"  <td>\\n\",\n    \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n    \"  </td>\\n\",\n    \"  <td>\\n\",\n    \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n    \"  </td>\\n\",\n    \"</table>\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"colab_type\": \"text\",\n    \"id\": \"8sa42_NblqRE\"\n   },\n   \"source\": [\n    \"# Python interoperability\\n\",\n    \"\\n\",\n    \"Swift For TensorFlow supports Python interoperability.\\n\",\n    \"\\n\",\n    \"You can import Python modules from Swift, call Python functions, and convert values between Swift and Python.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Python Versions\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The easiest way to use a particular version of Python is by setting `PYTHON_LIBRARY` in your shell.  For example: \\n\",\n    \"\\n\",\n    \"`export PYTHON_LIBRARY=\\\"~/anaconda3/lib/libpython3.7m.so\\\"`\\n\",\n    \"\\n\",\n    \"If using anaconda, the exact filename will differ on different platforms.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {\n    \"colab\": {\n      \"name\": \"Python interoperability.ipynb\",\n      \"version\": \"0.3.2\",\n      \"provenance\": [],\n      \"collapsed_sections\": [],\n      \"toc_visible\": true\n     \"base_uri\": \"https://localhost:8080/\",\n     \"height\": 51\n    },\n    \"kernelspec\": {\n      \"name\": \"swift\",\n      \"display_name\": \"Swift\"\n    \"colab_type\": \"code\",\n    \"id\": \"kZRlD4utdPuX\",\n    \"outputId\": \"101c8d8f-9d75-485f-9678-d27ece433fbb\"\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"3.6.7 (default, Oct 22 2018, 11:32:17) \\r\\n\",\n      \"[GCC 8.2.0]\\r\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"// export PYTHON_LIBRARY=\\\"~/anaconda3/lib/libpython3.6m.so\\\"\\n\",\n    \"import Python\\n\",\n    \"print(Python.version)\"\n   ]\n  },\n  \"cells\": [\n    {\n      \"metadata\": {\n        \"id\": \"9TV7IYeqifSv\",\n        \"colab_type\": \"text\"\n      },\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"##### Copyright 2018 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=ByZjmtFgB_Y5).\"\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"tRIJp_4m_Afz\",\n        \"colab_type\": \"code\",\n        \"colab\": {}\n      },\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n        \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n        \"// you may not use this file except in compliance with the License.\\n\",\n        \"// You may obtain a copy of the License at\\n\",\n        \"//\\n\",\n        \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n        \"//\\n\",\n        \"// Unless required by applicable law or agreed to in writing, software\\n\",\n        \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n        \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n        \"// See the License for the specific language governing permissions and\\n\",\n        \"// limitations under the License.\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": []\n    },\n    {\n      \"metadata\": {\n        \"id\": \"sI1ZtrdiA4aY\",\n        \"colab_type\": \"text\"\n      },\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n        \"  <td>\\n\",\n        \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/python_interoperability\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n        \"  </td>\\n\",\n        \"  <td>\\n\",\n        \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n        \"  </td>\\n\",\n        \"  <td>\\n\",\n        \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n        \"  </td>\\n\",\n        \"</table>\"\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"8sa42_NblqRE\",\n        \"colab_type\": \"text\"\n      },\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"# Python interoperability\\n\",\n        \"\\n\",\n        \"Swift For TensorFlow supports Python interoperability.\\n\",\n        \"\\n\",\n        \"You can import Python modules from Swift, call Python functions, and convert values between Swift and Python.\"\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"kZRlD4utdPuX\",\n        \"colab_type\": \"code\",\n        \"outputId\": \"101c8d8f-9d75-485f-9678-d27ece433fbb\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 51\n        }\n      },\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"import Python\\n\",\n        \"print(Python.version)\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"3.6.7 (default, Oct 22 2018, 11:32:17) \\r\\n\",\n            \"[GCC 8.2.0]\\r\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"rU0WY_sJodio\",\n        \"colab_type\": \"text\"\n      },\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"## Basics\\n\",\n        \"\\n\",\n        \"In Swift, `PythonObject` represents an object from Python.\\n\",\n        \"All Python APIs use and return `PythonObject` instances.\\n\",\n        \"\\n\",\n        \"Basic types in Swift (like numbers and arrays) are convertible to `PythonObject`. In some cases (for literals and functions taking `PythonConvertible` arguments), conversion happens implicitly. To explicitly cast a Swift value to `PythonObject`, use the `PythonObject` initializer.\\n\",\n        \"\\n\",\n        \"`PythonObject` defines many standard operations, including numeric operations, indexing, and iteration.\"\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"kqXILiXhq-iM\",\n        \"colab_type\": \"code\",\n        \"outputId\": \"074fbc43-9c87-4fb2-b970-ffeaff12987a\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 102\n        }\n      },\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"// Convert standard Swift types to Python.\\n\",\n        \"let pythonInt: PythonObject = 1\\n\",\n        \"let pythonFloat: PythonObject = 3.0\\n\",\n        \"let pythonString: PythonObject = \\\"Hello Python!\\\"\\n\",\n        \"let pythonRange: PythonObject = PythonObject(5..<10)\\n\",\n        \"let pythonArray: PythonObject = [1, 2, 3, 4]\\n\",\n        \"let pythonDict: PythonObject = [\\\"foo\\\": [0], \\\"bar\\\": [1, 2, 3]]\\n\",\n        \"\\n\",\n        \"// Perform standard operations on Python objects.\\n\",\n        \"print(pythonInt + pythonFloat)\\n\",\n        \"print(pythonString[0..<6])\\n\",\n        \"print(pythonRange)\\n\",\n        \"print(pythonArray[2])\\n\",\n        \"print(pythonDict[\\\"bar\\\"])\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"4.0\\r\\n\",\n            \"Hello \\r\\n\",\n            \"slice(5, 10, None)\\r\\n\",\n            \"3\\r\\n\",\n            \"[1, 2, 3]\\r\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"fEAEyUExXT3I\",\n        \"colab_type\": \"code\",\n        \"outputId\": \"6e53881b-8520-4d3a-efda-9ac3e4f5a53a\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 102\n        }\n      },\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"// Convert Python objects back to Swift.\\n\",\n        \"let int = Int(pythonInt)!\\n\",\n        \"let float = Float(pythonFloat)!\\n\",\n        \"let string = String(pythonString)!\\n\",\n        \"let range = Range<Int>(pythonRange)!\\n\",\n        \"let array: [Int] = Array(pythonArray)!\\n\",\n        \"let dict: [String: [Int]] = Dictionary(pythonDict)!\\n\",\n        \"\\n\",\n        \"// Perform standard operations.\\n\",\n        \"// Outputs are the same as Python!\\n\",\n        \"print(Float(int) + float)\\n\",\n        \"print(string.prefix(6))\\n\",\n        \"print(range)\\n\",\n        \"print(array[2])\\n\",\n        \"print(dict[\\\"bar\\\"]!)\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"4.0\\r\\n\",\n            \"Hello \\r\\n\",\n            \"5..<10\\r\\n\",\n            \"3\\r\\n\",\n            \"[1, 2, 3]\\r\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"1pMewsl0VgnJ\",\n        \"colab_type\": \"text\"\n      },\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"`PythonObject` defines conformances to many standard Swift protocols:\\n\",\n        \"* `Equatable`\\n\",\n        \"* `Comparable`\\n\",\n        \"* `Hashable`\\n\",\n        \"* `SignedNumeric`\\n\",\n        \"* `Strideable`\\n\",\n        \"* `MutableCollection`\\n\",\n        \"* All of the `ExpressibleBy_Literal` protocols\\n\",\n        \"\\n\",\n        \"Note that these conformances are not type-safe: crashes will occur if you attempt to use protocol functionality from an incompatible `PythonObject` instance.\"\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"W9bUsiOxVf_v\",\n        \"colab_type\": \"code\",\n        \"outputId\": \"abd837e0-de01-415d-d09e-a414aff54af7\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 119\n        }\n      },\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"let one: PythonObject = 1\\n\",\n        \"print(one == one)\\n\",\n        \"print(one < one)\\n\",\n        \"print(one + one)\\n\",\n        \"\\n\",\n        \"let array: PythonObject = [1, 2, 3]\\n\",\n        \"for (i, x) in array.enumerated() {\\n\",\n        \"    print(i, x)\\n\",\n        \"}\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"true\\r\\n\",\n            \"false\\r\\n\",\n            \"2\\r\\n\",\n            \"0 1\\r\\n\",\n            \"1 2\\r\\n\",\n            \"2 3\\r\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"w3lmTRCWT5sS\",\n        \"colab_type\": \"text\"\n      },\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"To convert tuples from Python to Swift, you must statically know the arity of the tuple.\\n\",\n        \"\\n\",\n        \"Call one of the following instance methods:\\n\",\n        \"- `PythonObject.tuple2`\\n\",\n        \"- `PythonObject.tuple3`\\n\",\n        \"- `PythonObject.tuple4`\"\n      ]\n    },\n    {\n      \"metadata\": {\n        \"id\": \"fQ0HEX89T4mW\",\n        \"colab_type\": \"code\",\n        \"outputId\": \"e8333b10-0d79-443d-fa2c-7322ce199be4\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 51\n        }\n      },\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"let pythonTuple = Python.tuple([1, 2, 3])\\n\",\n        \"print(pythonTuple, Python.len(pythonTuple))\\n\",\n        \"\\n\",\n        \"// Convert to Swift.\\n\",\n        \"let tuple = pythonTuple.tuple3\\n\",\n        \"print(tuple)\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": [\n        {\n          \"output_type\": \"stream\",\n          \"text\": [\n            \"(1, 2, 3) 3\\r\\n\",\n            \"(1, 2, 3)\\r\\n\"\n          ],\n          \"name\": \"stdout\"\n        }\n      ]\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Alternatively, you can also set `PYTHON_VERSION`.  This will cause swift to iteratively search the default path for your system for a matching version.  `PYTHON_LIBRARY` holds precedence over `PYTHON_VERSION`.\\n\",\n    \"\\n\",\n    \"There is also a `PythonLibrary.useVersion` function which is the equivalent of setting `PYTHON_VERSION`.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"// PythonLibrary.useVersion(2)\\n\",\n    \"// PythonLibrary.useVersion(3, 7)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"__NOTE: `useVersion` is only effective if run before Python is loaded.__  Python is lazily loaded the first time you invoke a method on the `Python` global.\"",
    "repo_full_name": "tensorflow/swift",
    "discussion_comments": [
      {
        "comment_id": "270604377",
        "repo_full_name": "tensorflow/swift",
        "pr_number": 165,
        "pr_file": "docs/site/tutorials/python_interoperability.ipynb",
        "discussion_id": "270604377",
        "commented_code": "@@ -1,608 +1,667 @@\n {\n-  \"nbformat\": 4,\n-  \"nbformat_minor\": 0,\n-  \"metadata\": {\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {\n+    \"colab_type\": \"text\",\n+    \"id\": \"9TV7IYeqifSv\"\n+   },\n+   \"source\": [\n+    \"##### Copyright 2018 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=ByZjmtFgB_Y5).\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 0,\n+   \"metadata\": {\n+    \"colab\": {},\n+    \"colab_type\": \"code\",\n+    \"id\": \"tRIJp_4m_Afz\"\n+   },\n+   \"outputs\": [],\n+   \"source\": [\n+    \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n+    \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n+    \"// you may not use this file except in compliance with the License.\\n\",\n+    \"// You may obtain a copy of the License at\\n\",\n+    \"//\\n\",\n+    \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n+    \"//\\n\",\n+    \"// Unless required by applicable law or agreed to in writing, software\\n\",\n+    \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n+    \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n+    \"// See the License for the specific language governing permissions and\\n\",\n+    \"// limitations under the License.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {\n+    \"colab_type\": \"text\",\n+    \"id\": \"sI1ZtrdiA4aY\"\n+   },\n+   \"source\": [\n+    \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n+    \"  <td>\\n\",\n+    \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/python_interoperability\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n+    \"  </td>\\n\",\n+    \"  <td>\\n\",\n+    \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n+    \"  </td>\\n\",\n+    \"  <td>\\n\",\n+    \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n+    \"  </td>\\n\",\n+    \"</table>\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {\n+    \"colab_type\": \"text\",\n+    \"id\": \"8sa42_NblqRE\"\n+   },\n+   \"source\": [\n+    \"# Python interoperability\\n\",\n+    \"\\n\",\n+    \"Swift For TensorFlow supports Python interoperability.\\n\",\n+    \"\\n\",\n+    \"You can import Python modules from Swift, call Python functions, and convert values between Swift and Python.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Python Versions\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"The easiest way to use a particular version of Python is by setting `PYTHON_LIBRARY` in your shell.  For example: \\n\",\n+    \"\\n\",\n+    \"`export PYTHON_LIBRARY=\\\"~/anaconda3/lib/libpython3.7m.so\\\"`\\n\",\n+    \"\\n\",\n+    \"If using anaconda, the exact filename will differ on different platforms.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 5,\n+   \"metadata\": {\n     \"colab\": {\n-      \"name\": \"Python interoperability.ipynb\",\n-      \"version\": \"0.3.2\",\n-      \"provenance\": [],\n-      \"collapsed_sections\": [],\n-      \"toc_visible\": true\n+     \"base_uri\": \"https://localhost:8080/\",\n+     \"height\": 51\n     },\n-    \"kernelspec\": {\n-      \"name\": \"swift\",\n-      \"display_name\": \"Swift\"\n+    \"colab_type\": \"code\",\n+    \"id\": \"kZRlD4utdPuX\",\n+    \"outputId\": \"101c8d8f-9d75-485f-9678-d27ece433fbb\"\n+   },\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"3.6.7 (default, Oct 22 2018, 11:32:17) \\r\\n\",\n+      \"[GCC 8.2.0]\\r\\n\"\n+     ]\n     }\n+   ],\n+   \"source\": [\n+    \"// export PYTHON_LIBRARY=\\\"~/anaconda3/lib/libpython3.6m.so\\\"\\n\",\n+    \"import Python\\n\",\n+    \"print(Python.version)\"\n+   ]\n   },\n-  \"cells\": [\n-    {\n-      \"metadata\": {\n-        \"id\": \"9TV7IYeqifSv\",\n-        \"colab_type\": \"text\"\n-      },\n-      \"cell_type\": \"markdown\",\n-      \"source\": [\n-        \"##### Copyright 2018 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=ByZjmtFgB_Y5).\"\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"tRIJp_4m_Afz\",\n-        \"colab_type\": \"code\",\n-        \"colab\": {}\n-      },\n-      \"cell_type\": \"code\",\n-      \"source\": [\n-        \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n-        \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n-        \"// you may not use this file except in compliance with the License.\\n\",\n-        \"// You may obtain a copy of the License at\\n\",\n-        \"//\\n\",\n-        \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n-        \"//\\n\",\n-        \"// Unless required by applicable law or agreed to in writing, software\\n\",\n-        \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n-        \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n-        \"// See the License for the specific language governing permissions and\\n\",\n-        \"// limitations under the License.\"\n-      ],\n-      \"execution_count\": 0,\n-      \"outputs\": []\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"sI1ZtrdiA4aY\",\n-        \"colab_type\": \"text\"\n-      },\n-      \"cell_type\": \"markdown\",\n-      \"source\": [\n-        \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n-        \"  <td>\\n\",\n-        \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/python_interoperability\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n-        \"  </td>\\n\",\n-        \"  <td>\\n\",\n-        \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n-        \"  </td>\\n\",\n-        \"  <td>\\n\",\n-        \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n-        \"  </td>\\n\",\n-        \"</table>\"\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"8sa42_NblqRE\",\n-        \"colab_type\": \"text\"\n-      },\n-      \"cell_type\": \"markdown\",\n-      \"source\": [\n-        \"# Python interoperability\\n\",\n-        \"\\n\",\n-        \"Swift For TensorFlow supports Python interoperability.\\n\",\n-        \"\\n\",\n-        \"You can import Python modules from Swift, call Python functions, and convert values between Swift and Python.\"\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"kZRlD4utdPuX\",\n-        \"colab_type\": \"code\",\n-        \"outputId\": \"101c8d8f-9d75-485f-9678-d27ece433fbb\",\n-        \"colab\": {\n-          \"base_uri\": \"https://localhost:8080/\",\n-          \"height\": 51\n-        }\n-      },\n-      \"cell_type\": \"code\",\n-      \"source\": [\n-        \"import Python\\n\",\n-        \"print(Python.version)\"\n-      ],\n-      \"execution_count\": 0,\n-      \"outputs\": [\n-        {\n-          \"output_type\": \"stream\",\n-          \"text\": [\n-            \"3.6.7 (default, Oct 22 2018, 11:32:17) \\r\\n\",\n-            \"[GCC 8.2.0]\\r\\n\"\n-          ],\n-          \"name\": \"stdout\"\n-        }\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"rU0WY_sJodio\",\n-        \"colab_type\": \"text\"\n-      },\n-      \"cell_type\": \"markdown\",\n-      \"source\": [\n-        \"## Basics\\n\",\n-        \"\\n\",\n-        \"In Swift, `PythonObject` represents an object from Python.\\n\",\n-        \"All Python APIs use and return `PythonObject` instances.\\n\",\n-        \"\\n\",\n-        \"Basic types in Swift (like numbers and arrays) are convertible to `PythonObject`. In some cases (for literals and functions taking `PythonConvertible` arguments), conversion happens implicitly. To explicitly cast a Swift value to `PythonObject`, use the `PythonObject` initializer.\\n\",\n-        \"\\n\",\n-        \"`PythonObject` defines many standard operations, including numeric operations, indexing, and iteration.\"\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"kqXILiXhq-iM\",\n-        \"colab_type\": \"code\",\n-        \"outputId\": \"074fbc43-9c87-4fb2-b970-ffeaff12987a\",\n-        \"colab\": {\n-          \"base_uri\": \"https://localhost:8080/\",\n-          \"height\": 102\n-        }\n-      },\n-      \"cell_type\": \"code\",\n-      \"source\": [\n-        \"// Convert standard Swift types to Python.\\n\",\n-        \"let pythonInt: PythonObject = 1\\n\",\n-        \"let pythonFloat: PythonObject = 3.0\\n\",\n-        \"let pythonString: PythonObject = \\\"Hello Python!\\\"\\n\",\n-        \"let pythonRange: PythonObject = PythonObject(5..<10)\\n\",\n-        \"let pythonArray: PythonObject = [1, 2, 3, 4]\\n\",\n-        \"let pythonDict: PythonObject = [\\\"foo\\\": [0], \\\"bar\\\": [1, 2, 3]]\\n\",\n-        \"\\n\",\n-        \"// Perform standard operations on Python objects.\\n\",\n-        \"print(pythonInt + pythonFloat)\\n\",\n-        \"print(pythonString[0..<6])\\n\",\n-        \"print(pythonRange)\\n\",\n-        \"print(pythonArray[2])\\n\",\n-        \"print(pythonDict[\\\"bar\\\"])\"\n-      ],\n-      \"execution_count\": 0,\n-      \"outputs\": [\n-        {\n-          \"output_type\": \"stream\",\n-          \"text\": [\n-            \"4.0\\r\\n\",\n-            \"Hello \\r\\n\",\n-            \"slice(5, 10, None)\\r\\n\",\n-            \"3\\r\\n\",\n-            \"[1, 2, 3]\\r\\n\"\n-          ],\n-          \"name\": \"stdout\"\n-        }\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"fEAEyUExXT3I\",\n-        \"colab_type\": \"code\",\n-        \"outputId\": \"6e53881b-8520-4d3a-efda-9ac3e4f5a53a\",\n-        \"colab\": {\n-          \"base_uri\": \"https://localhost:8080/\",\n-          \"height\": 102\n-        }\n-      },\n-      \"cell_type\": \"code\",\n-      \"source\": [\n-        \"// Convert Python objects back to Swift.\\n\",\n-        \"let int = Int(pythonInt)!\\n\",\n-        \"let float = Float(pythonFloat)!\\n\",\n-        \"let string = String(pythonString)!\\n\",\n-        \"let range = Range<Int>(pythonRange)!\\n\",\n-        \"let array: [Int] = Array(pythonArray)!\\n\",\n-        \"let dict: [String: [Int]] = Dictionary(pythonDict)!\\n\",\n-        \"\\n\",\n-        \"// Perform standard operations.\\n\",\n-        \"// Outputs are the same as Python!\\n\",\n-        \"print(Float(int) + float)\\n\",\n-        \"print(string.prefix(6))\\n\",\n-        \"print(range)\\n\",\n-        \"print(array[2])\\n\",\n-        \"print(dict[\\\"bar\\\"]!)\"\n-      ],\n-      \"execution_count\": 0,\n-      \"outputs\": [\n-        {\n-          \"output_type\": \"stream\",\n-          \"text\": [\n-            \"4.0\\r\\n\",\n-            \"Hello \\r\\n\",\n-            \"5..<10\\r\\n\",\n-            \"3\\r\\n\",\n-            \"[1, 2, 3]\\r\\n\"\n-          ],\n-          \"name\": \"stdout\"\n-        }\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"1pMewsl0VgnJ\",\n-        \"colab_type\": \"text\"\n-      },\n-      \"cell_type\": \"markdown\",\n-      \"source\": [\n-        \"`PythonObject` defines conformances to many standard Swift protocols:\\n\",\n-        \"* `Equatable`\\n\",\n-        \"* `Comparable`\\n\",\n-        \"* `Hashable`\\n\",\n-        \"* `SignedNumeric`\\n\",\n-        \"* `Strideable`\\n\",\n-        \"* `MutableCollection`\\n\",\n-        \"* All of the `ExpressibleBy_Literal` protocols\\n\",\n-        \"\\n\",\n-        \"Note that these conformances are not type-safe: crashes will occur if you attempt to use protocol functionality from an incompatible `PythonObject` instance.\"\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"W9bUsiOxVf_v\",\n-        \"colab_type\": \"code\",\n-        \"outputId\": \"abd837e0-de01-415d-d09e-a414aff54af7\",\n-        \"colab\": {\n-          \"base_uri\": \"https://localhost:8080/\",\n-          \"height\": 119\n-        }\n-      },\n-      \"cell_type\": \"code\",\n-      \"source\": [\n-        \"let one: PythonObject = 1\\n\",\n-        \"print(one == one)\\n\",\n-        \"print(one < one)\\n\",\n-        \"print(one + one)\\n\",\n-        \"\\n\",\n-        \"let array: PythonObject = [1, 2, 3]\\n\",\n-        \"for (i, x) in array.enumerated() {\\n\",\n-        \"    print(i, x)\\n\",\n-        \"}\"\n-      ],\n-      \"execution_count\": 0,\n-      \"outputs\": [\n-        {\n-          \"output_type\": \"stream\",\n-          \"text\": [\n-            \"true\\r\\n\",\n-            \"false\\r\\n\",\n-            \"2\\r\\n\",\n-            \"0 1\\r\\n\",\n-            \"1 2\\r\\n\",\n-            \"2 3\\r\\n\"\n-          ],\n-          \"name\": \"stdout\"\n-        }\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"w3lmTRCWT5sS\",\n-        \"colab_type\": \"text\"\n-      },\n-      \"cell_type\": \"markdown\",\n-      \"source\": [\n-        \"To convert tuples from Python to Swift, you must statically know the arity of the tuple.\\n\",\n-        \"\\n\",\n-        \"Call one of the following instance methods:\\n\",\n-        \"- `PythonObject.tuple2`\\n\",\n-        \"- `PythonObject.tuple3`\\n\",\n-        \"- `PythonObject.tuple4`\"\n-      ]\n-    },\n-    {\n-      \"metadata\": {\n-        \"id\": \"fQ0HEX89T4mW\",\n-        \"colab_type\": \"code\",\n-        \"outputId\": \"e8333b10-0d79-443d-fa2c-7322ce199be4\",\n-        \"colab\": {\n-          \"base_uri\": \"https://localhost:8080/\",\n-          \"height\": 51\n-        }\n-      },\n-      \"cell_type\": \"code\",\n-      \"source\": [\n-        \"let pythonTuple = Python.tuple([1, 2, 3])\\n\",\n-        \"print(pythonTuple, Python.len(pythonTuple))\\n\",\n-        \"\\n\",\n-        \"// Convert to Swift.\\n\",\n-        \"let tuple = pythonTuple.tuple3\\n\",\n-        \"print(tuple)\"\n-      ],\n-      \"execution_count\": 0,\n-      \"outputs\": [\n-        {\n-          \"output_type\": \"stream\",\n-          \"text\": [\n-            \"(1, 2, 3) 3\\r\\n\",\n-            \"(1, 2, 3)\\r\\n\"\n-          ],\n-          \"name\": \"stdout\"\n-        }\n-      ]\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Alternatively, you can also set `PYTHON_VERSION`.  This will cause swift to iteratively search the default path for your system for a matching version.  `PYTHON_LIBRARY` holds precedence over `PYTHON_VERSION`.\\n\",\n+    \"\\n\",\n+    \"There is also a `PythonLibrary.useVersion` function which is the equivalent of setting `PYTHON_VERSION`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"// PythonLibrary.useVersion(2)\\n\",\n+    \"// PythonLibrary.useVersion(3, 7)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"__NOTE: `useVersion` is only effective if run before Python is loaded.__  Python is lazily loaded the first time you invoke a method on the `Python` global.\"",
        "comment_created_at": "2019-03-30T00:20:56+00:00",
        "comment_author": "dan-zheng",
        "comment_body": "```suggestion\r\n    \"__Note: you should run `PythonLibrary.useVersion` right after `import Python`, before calling any Python code. It cannot be used to dynamically switch Python versions.__\"\r\n```",
        "pr_file_module": null
      }
    ]
  }
]