[
  {
    "discussion_id": "277856389",
    "pr_number": 175,
    "pr_file": "RELEASES.md",
    "created_at": "2019-04-23T20:25:33+00:00",
    "commented_code": "# Swift for TensorFlow Release Notes\n\n## Version 0.3\n\n### Overview\n\nThis is the second public release of Swift for TensorFlow, available across\nGoogle Colaboratory, Linux and macOS. The focus is improving overall stability\nand refining APIs.\n\n### Notebook Environments (Colab and Jupyter)\n\n* Install SwiftPM packages using `%install` directives. See [documentation in\n  README](https://github.com/google/swift-jupyter#install-directives).\n  ([swift-jupyter#45](https://github.com/google/swift-jupyter/pull/45),\n  [swift-jupyter#48](https://github.com/google/swift-jupyter/pull/48),\n  [swift-jupyter#52](https://github.com/google/swift-jupyter/pull/52))\n* `swift-jupyter` can now be installed in a Conda environment. See\n  [documentation in\n  README](https://github.com/google/swift-jupyter#option-2-using-a-swift-for-tensorflow-toolchain-and-conda).\n\n### Swift Standard Library Enhancements\n\n* `AnyDerivative` has been added, representing a type-erased derivative.\n  ([apple/swift#23521](https://github.com/apple/swift/pull/23521))\n\n### TensorFlow Library\n\n* `Tensor` now supports advanced indexing and striding APIs.\n  ([apple/swift#24684](https://github.com/apple/swift/pull/23684))\n* `Tensor`s are now pretty-printed, based on the format of NumPy.\n  ([apple/swift#23837](https://github.com/apple/swift/pull/23837))\n* TensorFlow APIs now use `Int` instead of `Int32`.\n  ([apple/swift#24012](https://github.com/apple/swift/pull/24012))\n* The `saveV2` and `restoreV2` ops are now supported.",
    "repo_full_name": "tensorflow/swift",
    "discussion_comments": [
      {
        "comment_id": "277856389",
        "repo_full_name": "tensorflow/swift",
        "pr_number": 175,
        "pr_file": "RELEASES.md",
        "discussion_id": "277856389",
        "commented_code": "@@ -0,0 +1,188 @@\n+# Swift for TensorFlow Release Notes\n+\n+## Version 0.3\n+\n+### Overview\n+\n+This is the second public release of Swift for TensorFlow, available across\n+Google Colaboratory, Linux and macOS. The focus is improving overall stability\n+and refining APIs.\n+\n+### Notebook Environments (Colab and Jupyter)\n+\n+* Install SwiftPM packages using `%install` directives. See [documentation in\n+  README](https://github.com/google/swift-jupyter#install-directives).\n+  ([swift-jupyter#45](https://github.com/google/swift-jupyter/pull/45),\n+  [swift-jupyter#48](https://github.com/google/swift-jupyter/pull/48),\n+  [swift-jupyter#52](https://github.com/google/swift-jupyter/pull/52))\n+* `swift-jupyter` can now be installed in a Conda environment. See\n+  [documentation in\n+  README](https://github.com/google/swift-jupyter#option-2-using-a-swift-for-tensorflow-toolchain-and-conda).\n+\n+### Swift Standard Library Enhancements\n+\n+* `AnyDerivative` has been added, representing a type-erased derivative.\n+  ([apple/swift#23521](https://github.com/apple/swift/pull/23521))\n+\n+### TensorFlow Library\n+\n+* `Tensor` now supports advanced indexing and striding APIs.\n+  ([apple/swift#24684](https://github.com/apple/swift/pull/23684))\n+* `Tensor`s are now pretty-printed, based on the format of NumPy.\n+  ([apple/swift#23837](https://github.com/apple/swift/pull/23837))\n+* TensorFlow APIs now use `Int` instead of `Int32`.\n+  ([apple/swift#24012](https://github.com/apple/swift/pull/24012))\n+* The `saveV2` and `restoreV2` ops are now supported.",
        "comment_created_at": "2019-04-23T20:25:33+00:00",
        "comment_author": "rxwei",
        "comment_body": "I'd suggest explicitly stating they are raw operators (we are officially using the term \"operator\" instead of \"op\" also). Would you like to mention their TF name first, and their full Swift names? Something like:\r\n\r\n\"`SaveV2` (`Raw.saveV2(prefix:tensorNames:shapeAndSlices:tensors:)`), `RestoreV2` (`Raw.restoreV2(prefix:tensorNames:shapeAndSlices:dtypes:)`), `Split` (`Raw.split(splitDim:value:numSplit:)`) and `SplitV` (`Raw.splitV(value:sizeSplits:splitDim:numSplit:)`)\".\r\n\r\nAPI links would be great to have.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "256278636",
    "pr_number": 114,
    "pr_file": "README.md",
    "created_at": "2019-02-13T07:54:37+00:00",
    "commented_code": "# Swift for TensorFlow\n\nWelcome to the Swift for TensorFlow development community! For discussions, join the [swift@tensorflow.org mailing list](https://groups.google.com/a/tensorflow.org/d/forum/swift).\n> S4TF: No barriers.\n\nSwift for TensorFlow (aka S4TF) is a next-generation machine learning framework,\nincorporating the latest research across: machine learning, compilers, \ndifferential programming, systems design, and beyond. This project is\napproaching version _0.2_; it is neither feature complete nor production-ready.\nBut it is ready for _pioneers_ to try it for your own projects, give us\nfeedback, and help shape the future!\n\nThe S4TF project is currently focusing on 2 kinds of users:\n\n 1. **Advanced ML Researchers** who are limited by current ML frameworks.\n    S4TF's advantages include a seamless integration with a modern general-purpose\n    language, allowing for more dynamic and sophisticated models. Fast\n    abstractions can be developed \"in user-space\" (as opposed to in C/C++\n    aka \"framework-space\"), resulting in modular APIs that can be easily\n    customized.\n\n 2. **ML Learners** who are just getting started with machine learning. Thanks\n    to Swift's support for quality tooling (e.g. context-aware autocomplete),\n    S4ML can be one of the most productive ways to get started learning the\n    fundamentals of machine learning.\n\n## Getting started\n\n - **Colab**: The fastest way to get started is to try out S4TF right in your\n   browser. Just open up our [getting started\n   notebook](https://colab.research.google.com/github/tensorflow/swift-tutorials/blob/master/iris/swift_tensorflow_tutorial.ipynb) (or start from a\n   [blank notebook](https://colab.research.google.com/github/tensorflow/swift/blob/master/notebooks/blank_swift.ipynb))!\n   Read more in our [usage guide](Usage.md).\n\n - **Install locally**: you can [download a pre-built Swift for TensorFlow\n   package](Installation.md). After installation, you can follow these\n   [step-by-step instructions](Usage.md) to build and execute a S4TF program\n   on your computer.\n\n - **Compile from source**: If you'd like to customize S4TF or even contribute\n   back, follow our [instructions on building the S4TF compiler from source,\n   from in the compiler's README](https://github.com/apple/swift/tree/tensorflow).\n\nPlease do join the\n[swift@tensorflow.org mailing list](https://groups.google.com/a/tensorflow.org/d/forum/swift)\nto hear the latest announcements, get help, and share your thoughts!\n\n## Why S4TF?\n\nSwift for TensorFlow is a new way to develop machine learning models. It\ngives you the power of\n[TensorFlow](https://www.tensorflow.org) directly integrated into the\n[Swift programming language](https://swift.org/about).\nWith Swift, you can write the following imperative code, and Swift \nautomatically turns it into **a single TensorFlow Graph** and runs it \nwith the full performance of TensorFlow Sessions on CPU, GPU and \n[TPU](https://cloud.google.com/tpu).\n[Swift programming language](https://swift.org/about). We believe that\nmachine learning paradigms are so important that they deserve\n**first-class language and compiler support**. \n\nOptimizing parameters by taking the gradient of functions is a fundamental\nprimitive of machine learning. With Swift for TensorFlow,\nyou can write a normal function using arbitrary data types, and then\ntake the derivative of it with just a single annotation.\n\n```swift\nimport TensorFlow\n\nvar x = Tensor<Float>([[1, 2], [3, 4]])\n\nfor _ in 1...5 {\n    x += x • x // alternatively: x += matmul(x, x)\n    print(x)\n@differentiable\nfunc myWackyPowPlus(ofBase base: Tensor<Float>,\n                    toExponent exponent: Int) -> Tensor<Float>\n  var x = base\n  for _ in 1...exponent {\n      x += x • base // alternatively: x += matmul(x, base)\n      print(x)  // Debugging!\n  }\n  return x\n}\n```\n\nSwift combines the flexibility of \n[Eager Execution](https://www.tensorflow.org/programmers_guide/eager) with the \nhigh performance of [Graphs and Sessions](https://www.tensorflow.org/programmers_guide/graphs). \nBehind the scenes, Swift analyzes your Tensor code and automatically builds \ngraphs for you. Swift also catches type errors and shape mismatches before running \nyour code, has the ability to import any Python library, and has\n[Automatic Differentiation](https://en.wikipedia.org/wiki/Automatic_differentiation)\nbuilt right in. We believe that machine learning tools are so important that they\ndeserve **a first-class language and a compiler**.\nBeyond derivatives, the S4TF project comes with a sophisticated toolchain\nto make users more productive. You can run Swift interactively in a Jupyter\nnotebook, and get helpful autocomplete suggestions to help you explore the\nmassive API surface of a modern deep learning library. You can [get started\nright in your browser in\nseconds](https://colab.research.google.com/github/tensorflow/swift-tutorials/blob/master/iris/swift_tensorflow_tutorial.ipynb)!\n\n**Note:** Swift for TensorFlow is an early stage project. It has been released\nto enable open source development and is not yet ready for general use\nby machine learning developers.\nMigrating to S4TF is really easy thanks to Swift's powerful Python integration.\nYou can incrementally migrate your Python code over (or continue to use your\nfavorite Python libraries), because you can easily call your favorite Python\nlibrary with a familiar syntax:\n\n## Installation and Usage\n```swift\nimport Python\nimport TensorFlow\n\nYou can [download a pre-built package](Installation.md) for Swift for TensorFlow. \nAfter installation, you can follow these [instructions](Usage.md) to try it out.\nlet np = Python.import(\"numpy\")\n\nFor instructions on building from source, visit\n[apple/swift](https://github.com/apple/swift/tree/tensorflow).\nlet myNumpyArray = np.arange([10, 10])  // Create a 10x10 numpy array.\nlet myTensor = Tensor(fromNumpyArray: myNumpyArray)  // Seamless integration!",
    "repo_full_name": "tensorflow/swift",
    "discussion_comments": [
      {
        "comment_id": "256278636",
        "repo_full_name": "tensorflow/swift",
        "pr_number": 114,
        "pr_file": "README.md",
        "discussion_id": "256278636",
        "commented_code": "@@ -4,130 +4,180 @@\n \n # Swift for TensorFlow\n \n-Welcome to the Swift for TensorFlow development community! For discussions, join the [swift@tensorflow.org mailing list](https://groups.google.com/a/tensorflow.org/d/forum/swift).\n+> S4TF: No barriers.\n+\n+Swift for TensorFlow (aka S4TF) is a next-generation machine learning framework,\n+incorporating the latest research across: machine learning, compilers, \n+differential programming, systems design, and beyond. This project is\n+approaching version _0.2_; it is neither feature complete nor production-ready.\n+But it is ready for _pioneers_ to try it for your own projects, give us\n+feedback, and help shape the future!\n+\n+The S4TF project is currently focusing on 2 kinds of users:\n+\n+ 1. **Advanced ML Researchers** who are limited by current ML frameworks.\n+    S4TF's advantages include a seamless integration with a modern general-purpose\n+    language, allowing for more dynamic and sophisticated models. Fast\n+    abstractions can be developed \"in user-space\" (as opposed to in C/C++\n+    aka \"framework-space\"), resulting in modular APIs that can be easily\n+    customized.\n+\n+ 2. **ML Learners** who are just getting started with machine learning. Thanks\n+    to Swift's support for quality tooling (e.g. context-aware autocomplete),\n+    S4ML can be one of the most productive ways to get started learning the\n+    fundamentals of machine learning.\n+\n+## Getting started\n+\n+ - **Colab**: The fastest way to get started is to try out S4TF right in your\n+   browser. Just open up our [getting started\n+   notebook](https://colab.research.google.com/github/tensorflow/swift-tutorials/blob/master/iris/swift_tensorflow_tutorial.ipynb) (or start from a\n+   [blank notebook](https://colab.research.google.com/github/tensorflow/swift/blob/master/notebooks/blank_swift.ipynb))!\n+   Read more in our [usage guide](Usage.md).\n+\n+ - **Install locally**: you can [download a pre-built Swift for TensorFlow\n+   package](Installation.md). After installation, you can follow these\n+   [step-by-step instructions](Usage.md) to build and execute a S4TF program\n+   on your computer.\n+\n+ - **Compile from source**: If you'd like to customize S4TF or even contribute\n+   back, follow our [instructions on building the S4TF compiler from source,\n+   from in the compiler's README](https://github.com/apple/swift/tree/tensorflow).\n+\n+Please do join the\n+[swift@tensorflow.org mailing list](https://groups.google.com/a/tensorflow.org/d/forum/swift)\n+to hear the latest announcements, get help, and share your thoughts!\n+\n+## Why S4TF?\n \n Swift for TensorFlow is a new way to develop machine learning models. It\n gives you the power of\n [TensorFlow](https://www.tensorflow.org) directly integrated into the\n-[Swift programming language](https://swift.org/about).\n-With Swift, you can write the following imperative code, and Swift \n-automatically turns it into **a single TensorFlow Graph** and runs it \n-with the full performance of TensorFlow Sessions on CPU, GPU and \n-[TPU](https://cloud.google.com/tpu).\n+[Swift programming language](https://swift.org/about). We believe that\n+machine learning paradigms are so important that they deserve\n+**first-class language and compiler support**. \n+\n+Optimizing parameters by taking the gradient of functions is a fundamental\n+primitive of machine learning. With Swift for TensorFlow,\n+you can write a normal function using arbitrary data types, and then\n+take the derivative of it with just a single annotation.\n \n ```swift\n import TensorFlow\n \n var x = Tensor<Float>([[1, 2], [3, 4]])\n \n-for _ in 1...5 {\n-    x += x • x // alternatively: x += matmul(x, x)\n-    print(x)\n+@differentiable\n+func myWackyPowPlus(ofBase base: Tensor<Float>,\n+                    toExponent exponent: Int) -> Tensor<Float>\n+  var x = base\n+  for _ in 1...exponent {\n+      x += x • base // alternatively: x += matmul(x, base)\n+      print(x)  // Debugging!\n+  }\n+  return x\n }\n ```\n \n-Swift combines the flexibility of \n-[Eager Execution](https://www.tensorflow.org/programmers_guide/eager) with the \n-high performance of [Graphs and Sessions](https://www.tensorflow.org/programmers_guide/graphs). \n-Behind the scenes, Swift analyzes your Tensor code and automatically builds \n-graphs for you. Swift also catches type errors and shape mismatches before running \n-your code, has the ability to import any Python library, and has\n-[Automatic Differentiation](https://en.wikipedia.org/wiki/Automatic_differentiation)\n-built right in. We believe that machine learning tools are so important that they\n-deserve **a first-class language and a compiler**.\n+Beyond derivatives, the S4TF project comes with a sophisticated toolchain\n+to make users more productive. You can run Swift interactively in a Jupyter\n+notebook, and get helpful autocomplete suggestions to help you explore the\n+massive API surface of a modern deep learning library. You can [get started\n+right in your browser in\n+seconds](https://colab.research.google.com/github/tensorflow/swift-tutorials/blob/master/iris/swift_tensorflow_tutorial.ipynb)!\n \n-**Note:** Swift for TensorFlow is an early stage project. It has been released\n-to enable open source development and is not yet ready for general use\n-by machine learning developers.\n+Migrating to S4TF is really easy thanks to Swift's powerful Python integration.\n+You can incrementally migrate your Python code over (or continue to use your\n+favorite Python libraries), because you can easily call your favorite Python\n+library with a familiar syntax:\n \n-## Installation and Usage\n+```swift\n+import Python\n+import TensorFlow\n \n-You can [download a pre-built package](Installation.md) for Swift for TensorFlow. \n-After installation, you can follow these [instructions](Usage.md) to try it out.\n+let np = Python.import(\"numpy\")\n \n-For instructions on building from source, visit\n-[apple/swift](https://github.com/apple/swift/tree/tensorflow).\n+let myNumpyArray = np.arange([10, 10])  // Create a 10x10 numpy array.\n+let myTensor = Tensor(fromNumpyArray: myNumpyArray)  // Seamless integration!",
        "comment_created_at": "2019-02-13T07:54:37+00:00",
        "comment_author": "rxwei",
        "comment_body": "Initializers do not form a phrase with the argument label, so no preposition. The API is actually called `init(numpy:)`.\r\n\r\n```suggestion\r\nlet tensor = Tensor(numpy: array)  // Seamless integration!\r\n```",
        "pr_file_module": null
      }
    ]
  }
]