[
  {
    "discussion_id": "271288104",
    "pr_number": 168,
    "pr_file": "docs/site/tutorials/device_placement.ipynb",
    "created_at": "2019-04-02T12:56:14+00:00",
    "commented_code": "{",
    "repo_full_name": "tensorflow/swift",
    "discussion_comments": [
      {
        "comment_id": "271288104",
        "repo_full_name": "tensorflow/swift",
        "pr_number": 168,
        "pr_file": "docs/site/tutorials/device_placement.ipynb",
        "discussion_id": "271288104",
        "commented_code": "@@ -0,0 +1,378 @@\n+{",
        "comment_created_at": "2019-04-02T12:56:14+00:00",
        "comment_author": "rxwei",
        "comment_body": "<p>The use of a `get` prefix in function names is generally discouraged in Swift. The Swift API Design Guidelines state:</p><blockquote>Name functions and methods according to their side-effect.</blockquote><p><br></p><p>`get` should be removed from these names.</p><p><br></p><p>For more details on naming, see <a href=\"https://swift.org/documentation/api-design-guidelines/#promote-clear-usage\" target=\"_blank\">Swift API Design Guidelines - Promote Clear Usage</a>.</p><p><br></p><p><br></p><p>Moreover, the `getTimeString` function can be renamed to be more clear and not to repeat the return type information. And the body of the `getTimeString` function can be improved to use early return, or even better, pattern matching.</p><p><br></p><p>```swift</p><p>func timeDescription(_ nanoseconds: Double) -&gt; String {</p><p>switch nanoseconds {</p><p>case ..&lt;1e3:</p><p>return \"\\(nanoseconds) ns\"</p><p>case ..&lt;1e6:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return \"\\(nanoseconds/1e3) Âµs\"</p><p>case ..&lt;1e9:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return \"\\(nanoseconds/1e6) ms\"</p><p>default:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return \"\\(nanoseconds/1e9) seconds\"</p><p>}</p><p>}</p><p>```</p><p><br></p><p><br></p><p>In your first function, please avoid the use of&nbsp;explicit `Array&lt;T&gt;`. Also, prefer type inference and literal conversion over explicit calls to the initializer.</p><p>```swift</p><p>var timings: [Double] = 0.0</p><p>```</p><p>For more details on types with short hand names like array and dictionary, see the <a href=\"https://google.github.io/swift/#types-with-shorthand-names\" target=\"_blank\">Google Swift Style Guide</a>.</p>\n\n _Reply via <a href='https://app.reviewnb.com/tensorflow/swift/pull/168/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='9'/>",
        "pr_file_module": null
      },
      {
        "comment_id": "271570759",
        "repo_full_name": "tensorflow/swift",
        "pr_number": 168,
        "pr_file": "docs/site/tutorials/device_placement.ipynb",
        "discussion_id": "271288104",
        "commented_code": "@@ -0,0 +1,378 @@\n+{",
        "comment_created_at": "2019-04-03T03:50:15+00:00",
        "comment_author": "regrettable-username",
        "comment_body": "Ah, of course! This should be corrected now.",
        "pr_file_module": null
      },
      {
        "comment_id": "271570810",
        "repo_full_name": "tensorflow/swift",
        "pr_number": 168,
        "pr_file": "docs/site/tutorials/device_placement.ipynb",
        "discussion_id": "271288104",
        "commented_code": "@@ -0,0 +1,378 @@\n+{",
        "comment_created_at": "2019-04-03T03:50:37+00:00",
        "comment_author": "regrettable-username",
        "comment_body": "Got it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "310343712",
    "pr_number": 187,
    "pr_file": "docs/site/tutorials/protocol_oriented_generics.ipynb",
    "created_at": "2019-08-03T08:11:04+00:00",
    "commented_code": "{\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0,\n  \"metadata\": {\n    \"colab\": {\n      \"name\": \"protocol.ipynb\",\n      \"version\": \"0.3.2\",\n      \"provenance\": [],\n      \"collapsed_sections\": []\n    },\n    \"language_info\": {\n      \"file_extension\": \".swift\",\n      \"mimetype\": \"text/x-swift\",\n      \"name\": \"swift\",\n      \"version\": \"\"\n    },\n    \"kernelspec\": {\n      \"display_name\": \"Swift\",\n      \"language\": \"swift\",\n      \"name\": \"swift\"\n    }\n  },\n  \"cells\": [\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"colab_type\": \"text\",\n        \"id\": \"ZloPIuRHn97X\"\n      },\n      \"source\": [\n        \"##### Copyright 2019 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=Afd8bu4xJOgh).\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"colab_type\": \"code\",\n        \"id\": \"tNgCmfUvJNoF\",\n        \"colab\": {}\n      },\n      \"source\": [\n        \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n        \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n        \"// you may not use this file except in compliance with the License.\\n\",\n        \"// You may obtain a copy of the License at\\n\",\n        \"//\\n\",\n        \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n        \"//\\n\",\n        \"// Unless required by applicable law or agreed to in writing, software\\n\",\n        \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n        \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n        \"// See the License for the specific language governing permissions and\\n\",\n        \"// limitations under the License.\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": []\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"colab_type\": \"text\",\n        \"id\": \"AlvdCHw5JGyx\"\n      },\n      \"source\": [\n        \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n        \"  <td>\\n\",\n        \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/protocol_oriented_generics\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n        \"  </td>\\n\",\n        \"  <td>\\n\",\n        \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/protocol_oriented_generics.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n        \"  </td>\\n\",\n        \"  <td>\\n\",\n        \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/protocol_oriented_generics.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n        \"  </td>\\n\",\n        \"</table>\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"colab_type\": \"text\",\n        \"id\": \"c_1u7JSBMx3x\"\n      },\n      \"source\": [\n        \"# Protocol-oriented programming & generics\\n\",\n        \"\\n\",\n        \"This tutorial will go over protocol-oriented programming, and different examples of how they can be used with generics in day to day examples.\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"colab_type\": \"text\",\n        \"id\": \"LP0gMw56TlvH\"\n      },\n      \"source\": [\n        \"## Protocols\\n\",\n        \"\\n\",\n        \"Inheritence is a powerful way to organize code in programming languages that allows you to share code between multiple components of the program.\\n\",\n        \"\\n\",\n        \"In Swift, there are different ways to express inheritence. One of those ways you may be familiar with already - class inheritence. However, Swift has another way - protocols.\\n\",\n        \"\\n\",\n        \"In this tutorial, we will explore protocols - an alternative to subclassing that allows you to achieve similar goals through different tradeoffs. In Swift, protocols contain multiple abstract members. Classes, structs and enums can conform to multiple protocols and the conformance relationship can be established retroactively. All that enables some designs that aren't easily expressible in Swift using subclassing. We will walk through the idioms that support the use of protocols (extensions and protocol constraints), as well as the limitations of protocols.\\n\"\n      ]\n    },\n    {\n      \"cell_type\": \"markdown\",\n      \"metadata\": {\n        \"id\": \"5AIIH5Q59b41\",\n        \"colab_type\": \"text\"\n      },\n      \"source\": [\n        \"## Swift ðŸ’–'s value types!\\n\",\n        \"\\n\",\n        \"In addition to classes which have reference semantics, Swift supports enums and structs that are passed by value. Enums and structs support many features provided by classes. Let's take a look!\\n\",\n        \"\\n\",\n        \"Firstly let's look at how enums are similar to classes.\"\n      ]\n    },\n    {\n      \"cell_type\": \"code\",\n      \"metadata\": {\n        \"id\": \"zCN0Uc0w-gng\",\n        \"colab_type\": \"code\",\n        \"outputId\": \"4dbad5e2-fad0-4be9-f6f2-bf9982c94893\",\n        \"colab\": {\n          \"base_uri\": \"https://localhost:8080/\",\n          \"height\": 51\n        }\n      },\n      \"source\": [\n        \"enum Color: String {\\n\",\n        \"    case red = \\\"red\\\"\\n\",\n        \"    case green = \\\"green\\\"\\n\",\n        \"    case blue = \\\"blue\\\"\\n\",\n        \"    // A computed property. Note that enums cannot contain stored properties.\\n\",\n        \"    var giveHint: String {\\n\",\n        \"        switch self {\\n\",\n        \"            case .red:\\n\",\n        \"                return \\\"Roses are this color.\\\"\\n\",\n        \"            case .green:\\n\",\n        \"                return \\\"Grass is this color.\\\"\\n\",\n        \"            case .blue:\\n\",\n        \"                return \\\"The ocean is this color.\\\"\\n\",\n        \"        }\\n\",\n        \"    }\\n\",\n        \"    \\n\",\n        \"    // An initializer like for classes.\\n\",\n        \"    init?(color: String) {\\n\",\n        \"        switch color {\\n\",\n        \"        case \\\"red\\\":\\n\",\n        \"            self = .red\\n\",\n        \"        case \\\"green\\\":\\n\",\n        \"            self = .green\\n\",\n        \"        case \\\"blue\\\":\\n\",\n        \"            self = .blue\\n\",\n        \"        default:\\n\",\n        \"            return nil\\n\",\n        \"        }\\n\",\n        \"    }\\n\",\n        \"}\\n\",\n        \"\\n\",\n        \"// Can extend the enum as well!\\n\",\n        \"extension Color {\\n\",\n        \"    // A function.\\n\",\n        \"    func giveHintFunc() -> String {\\n\",",
    "repo_full_name": "tensorflow/swift",
    "discussion_comments": [
      {
        "comment_id": "310343712",
        "repo_full_name": "tensorflow/swift",
        "pr_number": 187,
        "pr_file": "docs/site/tutorials/protocol_oriented_generics.ipynb",
        "discussion_id": "310343712",
        "commented_code": "@@ -0,0 +1,1307 @@\n+{\n+  \"nbformat\": 4,\n+  \"nbformat_minor\": 0,\n+  \"metadata\": {\n+    \"colab\": {\n+      \"name\": \"protocol.ipynb\",\n+      \"version\": \"0.3.2\",\n+      \"provenance\": [],\n+      \"collapsed_sections\": []\n+    },\n+    \"language_info\": {\n+      \"file_extension\": \".swift\",\n+      \"mimetype\": \"text/x-swift\",\n+      \"name\": \"swift\",\n+      \"version\": \"\"\n+    },\n+    \"kernelspec\": {\n+      \"display_name\": \"Swift\",\n+      \"language\": \"swift\",\n+      \"name\": \"swift\"\n+    }\n+  },\n+  \"cells\": [\n+    {\n+      \"cell_type\": \"markdown\",\n+      \"metadata\": {\n+        \"colab_type\": \"text\",\n+        \"id\": \"ZloPIuRHn97X\"\n+      },\n+      \"source\": [\n+        \"##### Copyright 2019 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=Afd8bu4xJOgh).\"\n+      ]\n+    },\n+    {\n+      \"cell_type\": \"code\",\n+      \"metadata\": {\n+        \"colab_type\": \"code\",\n+        \"id\": \"tNgCmfUvJNoF\",\n+        \"colab\": {}\n+      },\n+      \"source\": [\n+        \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n+        \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n+        \"// you may not use this file except in compliance with the License.\\n\",\n+        \"// You may obtain a copy of the License at\\n\",\n+        \"//\\n\",\n+        \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n+        \"//\\n\",\n+        \"// Unless required by applicable law or agreed to in writing, software\\n\",\n+        \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n+        \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n+        \"// See the License for the specific language governing permissions and\\n\",\n+        \"// limitations under the License.\"\n+      ],\n+      \"execution_count\": 0,\n+      \"outputs\": []\n+    },\n+    {\n+      \"cell_type\": \"markdown\",\n+      \"metadata\": {\n+        \"colab_type\": \"text\",\n+        \"id\": \"AlvdCHw5JGyx\"\n+      },\n+      \"source\": [\n+        \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n+        \"  <td>\\n\",\n+        \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/protocol_oriented_generics\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n+        \"  </td>\\n\",\n+        \"  <td>\\n\",\n+        \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/protocol_oriented_generics.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n+        \"  </td>\\n\",\n+        \"  <td>\\n\",\n+        \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/protocol_oriented_generics.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n+        \"  </td>\\n\",\n+        \"</table>\"\n+      ]\n+    },\n+    {\n+      \"cell_type\": \"markdown\",\n+      \"metadata\": {\n+        \"colab_type\": \"text\",\n+        \"id\": \"c_1u7JSBMx3x\"\n+      },\n+      \"source\": [\n+        \"# Protocol-oriented programming & generics\\n\",\n+        \"\\n\",\n+        \"This tutorial will go over protocol-oriented programming, and different examples of how they can be used with generics in day to day examples.\"\n+      ]\n+    },\n+    {\n+      \"cell_type\": \"markdown\",\n+      \"metadata\": {\n+        \"colab_type\": \"text\",\n+        \"id\": \"LP0gMw56TlvH\"\n+      },\n+      \"source\": [\n+        \"## Protocols\\n\",\n+        \"\\n\",\n+        \"Inheritence is a powerful way to organize code in programming languages that allows you to share code between multiple components of the program.\\n\",\n+        \"\\n\",\n+        \"In Swift, there are different ways to express inheritence. One of those ways you may be familiar with already - class inheritence. However, Swift has another way - protocols.\\n\",\n+        \"\\n\",\n+        \"In this tutorial, we will explore protocols - an alternative to subclassing that allows you to achieve similar goals through different tradeoffs. In Swift, protocols contain multiple abstract members. Classes, structs and enums can conform to multiple protocols and the conformance relationship can be established retroactively. All that enables some designs that aren't easily expressible in Swift using subclassing. We will walk through the idioms that support the use of protocols (extensions and protocol constraints), as well as the limitations of protocols.\\n\"\n+      ]\n+    },\n+    {\n+      \"cell_type\": \"markdown\",\n+      \"metadata\": {\n+        \"id\": \"5AIIH5Q59b41\",\n+        \"colab_type\": \"text\"\n+      },\n+      \"source\": [\n+        \"## Swift ðŸ’–'s value types!\\n\",\n+        \"\\n\",\n+        \"In addition to classes which have reference semantics, Swift supports enums and structs that are passed by value. Enums and structs support many features provided by classes. Let's take a look!\\n\",\n+        \"\\n\",\n+        \"Firstly let's look at how enums are similar to classes.\"\n+      ]\n+    },\n+    {\n+      \"cell_type\": \"code\",\n+      \"metadata\": {\n+        \"id\": \"zCN0Uc0w-gng\",\n+        \"colab_type\": \"code\",\n+        \"outputId\": \"4dbad5e2-fad0-4be9-f6f2-bf9982c94893\",\n+        \"colab\": {\n+          \"base_uri\": \"https://localhost:8080/\",\n+          \"height\": 51\n+        }\n+      },\n+      \"source\": [\n+        \"enum Color: String {\\n\",\n+        \"    case red = \\\"red\\\"\\n\",\n+        \"    case green = \\\"green\\\"\\n\",\n+        \"    case blue = \\\"blue\\\"\\n\",\n+        \"    // A computed property. Note that enums cannot contain stored properties.\\n\",\n+        \"    var giveHint: String {\\n\",\n+        \"        switch self {\\n\",\n+        \"            case .red:\\n\",\n+        \"                return \\\"Roses are this color.\\\"\\n\",\n+        \"            case .green:\\n\",\n+        \"                return \\\"Grass is this color.\\\"\\n\",\n+        \"            case .blue:\\n\",\n+        \"                return \\\"The ocean is this color.\\\"\\n\",\n+        \"        }\\n\",\n+        \"    }\\n\",\n+        \"    \\n\",\n+        \"    // An initializer like for classes.\\n\",\n+        \"    init?(color: String) {\\n\",\n+        \"        switch color {\\n\",\n+        \"        case \\\"red\\\":\\n\",\n+        \"            self = .red\\n\",\n+        \"        case \\\"green\\\":\\n\",\n+        \"            self = .green\\n\",\n+        \"        case \\\"blue\\\":\\n\",\n+        \"            self = .blue\\n\",\n+        \"        default:\\n\",\n+        \"            return nil\\n\",\n+        \"        }\\n\",\n+        \"    }\\n\",\n+        \"}\\n\",\n+        \"\\n\",\n+        \"// Can extend the enum as well!\\n\",\n+        \"extension Color {\\n\",\n+        \"    // A function.\\n\",\n+        \"    func giveHintFunc() -> String {\\n\",",
        "comment_created_at": "2019-08-03T08:11:04+00:00",
        "comment_author": "rxwei",
        "comment_body": "```suggestion\r\n        \"    func hint() -> String {\\n\",\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "310433020",
        "repo_full_name": "tensorflow/swift",
        "pr_number": 187,
        "pr_file": "docs/site/tutorials/protocol_oriented_generics.ipynb",
        "discussion_id": "310343712",
        "commented_code": "@@ -0,0 +1,1307 @@\n+{\n+  \"nbformat\": 4,\n+  \"nbformat_minor\": 0,\n+  \"metadata\": {\n+    \"colab\": {\n+      \"name\": \"protocol.ipynb\",\n+      \"version\": \"0.3.2\",\n+      \"provenance\": [],\n+      \"collapsed_sections\": []\n+    },\n+    \"language_info\": {\n+      \"file_extension\": \".swift\",\n+      \"mimetype\": \"text/x-swift\",\n+      \"name\": \"swift\",\n+      \"version\": \"\"\n+    },\n+    \"kernelspec\": {\n+      \"display_name\": \"Swift\",\n+      \"language\": \"swift\",\n+      \"name\": \"swift\"\n+    }\n+  },\n+  \"cells\": [\n+    {\n+      \"cell_type\": \"markdown\",\n+      \"metadata\": {\n+        \"colab_type\": \"text\",\n+        \"id\": \"ZloPIuRHn97X\"\n+      },\n+      \"source\": [\n+        \"##### Copyright 2019 The TensorFlow Authors. [Licensed under the Apache License, Version 2.0](#scrollTo=Afd8bu4xJOgh).\"\n+      ]\n+    },\n+    {\n+      \"cell_type\": \"code\",\n+      \"metadata\": {\n+        \"colab_type\": \"code\",\n+        \"id\": \"tNgCmfUvJNoF\",\n+        \"colab\": {}\n+      },\n+      \"source\": [\n+        \"#@title Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); { display-mode: \\\"form\\\" }\\n\",\n+        \"// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n\",\n+        \"// you may not use this file except in compliance with the License.\\n\",\n+        \"// You may obtain a copy of the License at\\n\",\n+        \"//\\n\",\n+        \"// https://www.apache.org/licenses/LICENSE-2.0\\n\",\n+        \"//\\n\",\n+        \"// Unless required by applicable law or agreed to in writing, software\\n\",\n+        \"// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\",\n+        \"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\",\n+        \"// See the License for the specific language governing permissions and\\n\",\n+        \"// limitations under the License.\"\n+      ],\n+      \"execution_count\": 0,\n+      \"outputs\": []\n+    },\n+    {\n+      \"cell_type\": \"markdown\",\n+      \"metadata\": {\n+        \"colab_type\": \"text\",\n+        \"id\": \"AlvdCHw5JGyx\"\n+      },\n+      \"source\": [\n+        \"<table class=\\\"tfo-notebook-buttons\\\" align=\\\"left\\\">\\n\",\n+        \"  <td>\\n\",\n+        \"    <a target=\\\"_blank\\\" href=\\\"https://www.tensorflow.org/swift/tutorials/protocol_oriented_generics\\\"><img src=\\\"https://www.tensorflow.org/images/tf_logo_32px.png\\\" />View on TensorFlow.org</a>\\n\",\n+        \"  </td>\\n\",\n+        \"  <td>\\n\",\n+        \"    <a target=\\\"_blank\\\" href=\\\"https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/protocol_oriented_generics.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/colab_logo_32px.png\\\" />Run in Google Colab</a>\\n\",\n+        \"  </td>\\n\",\n+        \"  <td>\\n\",\n+        \"    <a target=\\\"_blank\\\" href=\\\"https://github.com/tensorflow/swift/blob/master/docs/site/tutorials/protocol_oriented_generics.ipynb\\\"><img src=\\\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\\\" />View source on GitHub</a>\\n\",\n+        \"  </td>\\n\",\n+        \"</table>\"\n+      ]\n+    },\n+    {\n+      \"cell_type\": \"markdown\",\n+      \"metadata\": {\n+        \"colab_type\": \"text\",\n+        \"id\": \"c_1u7JSBMx3x\"\n+      },\n+      \"source\": [\n+        \"# Protocol-oriented programming & generics\\n\",\n+        \"\\n\",\n+        \"This tutorial will go over protocol-oriented programming, and different examples of how they can be used with generics in day to day examples.\"\n+      ]\n+    },\n+    {\n+      \"cell_type\": \"markdown\",\n+      \"metadata\": {\n+        \"colab_type\": \"text\",\n+        \"id\": \"LP0gMw56TlvH\"\n+      },\n+      \"source\": [\n+        \"## Protocols\\n\",\n+        \"\\n\",\n+        \"Inheritence is a powerful way to organize code in programming languages that allows you to share code between multiple components of the program.\\n\",\n+        \"\\n\",\n+        \"In Swift, there are different ways to express inheritence. One of those ways you may be familiar with already - class inheritence. However, Swift has another way - protocols.\\n\",\n+        \"\\n\",\n+        \"In this tutorial, we will explore protocols - an alternative to subclassing that allows you to achieve similar goals through different tradeoffs. In Swift, protocols contain multiple abstract members. Classes, structs and enums can conform to multiple protocols and the conformance relationship can be established retroactively. All that enables some designs that aren't easily expressible in Swift using subclassing. We will walk through the idioms that support the use of protocols (extensions and protocol constraints), as well as the limitations of protocols.\\n\"\n+      ]\n+    },\n+    {\n+      \"cell_type\": \"markdown\",\n+      \"metadata\": {\n+        \"id\": \"5AIIH5Q59b41\",\n+        \"colab_type\": \"text\"\n+      },\n+      \"source\": [\n+        \"## Swift ðŸ’–'s value types!\\n\",\n+        \"\\n\",\n+        \"In addition to classes which have reference semantics, Swift supports enums and structs that are passed by value. Enums and structs support many features provided by classes. Let's take a look!\\n\",\n+        \"\\n\",\n+        \"Firstly let's look at how enums are similar to classes.\"\n+      ]\n+    },\n+    {\n+      \"cell_type\": \"code\",\n+      \"metadata\": {\n+        \"id\": \"zCN0Uc0w-gng\",\n+        \"colab_type\": \"code\",\n+        \"outputId\": \"4dbad5e2-fad0-4be9-f6f2-bf9982c94893\",\n+        \"colab\": {\n+          \"base_uri\": \"https://localhost:8080/\",\n+          \"height\": 51\n+        }\n+      },\n+      \"source\": [\n+        \"enum Color: String {\\n\",\n+        \"    case red = \\\"red\\\"\\n\",\n+        \"    case green = \\\"green\\\"\\n\",\n+        \"    case blue = \\\"blue\\\"\\n\",\n+        \"    // A computed property. Note that enums cannot contain stored properties.\\n\",\n+        \"    var giveHint: String {\\n\",\n+        \"        switch self {\\n\",\n+        \"            case .red:\\n\",\n+        \"                return \\\"Roses are this color.\\\"\\n\",\n+        \"            case .green:\\n\",\n+        \"                return \\\"Grass is this color.\\\"\\n\",\n+        \"            case .blue:\\n\",\n+        \"                return \\\"The ocean is this color.\\\"\\n\",\n+        \"        }\\n\",\n+        \"    }\\n\",\n+        \"    \\n\",\n+        \"    // An initializer like for classes.\\n\",\n+        \"    init?(color: String) {\\n\",\n+        \"        switch color {\\n\",\n+        \"        case \\\"red\\\":\\n\",\n+        \"            self = .red\\n\",\n+        \"        case \\\"green\\\":\\n\",\n+        \"            self = .green\\n\",\n+        \"        case \\\"blue\\\":\\n\",\n+        \"            self = .blue\\n\",\n+        \"        default:\\n\",\n+        \"            return nil\\n\",\n+        \"        }\\n\",\n+        \"    }\\n\",\n+        \"}\\n\",\n+        \"\\n\",\n+        \"// Can extend the enum as well!\\n\",\n+        \"extension Color {\\n\",\n+        \"    // A function.\\n\",\n+        \"    func giveHintFunc() -> String {\\n\",",
        "comment_created_at": "2019-08-05T04:09:04+00:00",
        "comment_author": "bartchr808",
        "comment_body": "This is an extension on `Color` so will rename it to `hintFunc` instead since we already have the `hint` computed property.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "279618902",
    "pr_number": 182,
    "pr_file": "docs/site/tutorials/a_swift_tour.ipynb",
    "created_at": "2019-04-30T05:43:59+00:00",
    "commented_code": "},\n    {\n      \"metadata\": {\n        \"id\": \"zgtd86KUp5qa\",\n        \"id\": \"Vz405lhC35ZX\",\n        \"colab_type\": \"code\",\n        \"colab\": {}\n      },\n      \"cell_type\": \"code\",\n      \"source\": [\n        \"var queen = Rank.two // Oops! Wrong value!\\n\",\n        \"queen = .queen\"\n      ],\n      \"execution_count\": 0,\n      \"outputs\": []\n    },\n    {\n      \"metadata\": {\n        \"id\": \"9R71YWaE4L_W\",\n        \"colab_type\": \"text\"\n      },\n      \"cell_type\": \"markdown\",\n      \"source\": [\n        \"Use the `init?(rawValue:)` initializer to make an instance of an enumeration from a raw value. It returns either the enumeration case matching the raw value or `nil` if there is no matching `Rank`.\"\n        \"Notice above that in the second line, `Rank.queen` is referred to by the abbreviated form `.queen` because the type of the variable `queen` is already known to be a `Rank`. You can use the abbreviated form anytime the valueâ€™s type is already known.\"",
    "repo_full_name": "tensorflow/swift",
    "discussion_comments": [
      {
        "comment_id": "279618902",
        "repo_full_name": "tensorflow/swift",
        "pr_number": 182,
        "pr_file": "docs/site/tutorials/a_swift_tour.ipynb",
        "discussion_id": "279618902",
        "commented_code": "@@ -1835,26 +1879,37 @@\n     },\n     {\n       \"metadata\": {\n-        \"id\": \"zgtd86KUp5qa\",\n+        \"id\": \"Vz405lhC35ZX\",\n+        \"colab_type\": \"code\",\n+        \"colab\": {}\n+      },\n+      \"cell_type\": \"code\",\n+      \"source\": [\n+        \"var queen = Rank.two // Oops! Wrong value!\\n\",\n+        \"queen = .queen\"\n+      ],\n+      \"execution_count\": 0,\n+      \"outputs\": []\n+    },\n+    {\n+      \"metadata\": {\n+        \"id\": \"9R71YWaE4L_W\",\n         \"colab_type\": \"text\"\n       },\n       \"cell_type\": \"markdown\",\n       \"source\": [\n-        \"Use the `init?(rawValue:)` initializer to make an instance of an enumeration from a raw value. It returns either the enumeration case matching the raw value or `nil` if there is no matching `Rank`.\"\n+        \"Notice above that in the second line, `Rank.queen` is referred to by the abbreviated form `.queen` because the type of the variable `queen` is already known to be a `Rank`. You can use the abbreviated form anytime the valueâ€™s type is already known.\"",
        "comment_created_at": "2019-04-30T05:43:59+00:00",
        "comment_author": "bartchr808",
        "comment_body": "Similar to the cell below where the dot notation is used on `self` in the switch case statement, I thought I should put a simple example on a variable type.",
        "pr_file_module": null
      }
    ]
  }
]