[
  {
    "discussion_id": "2300223582",
    "pr_number": 58297,
    "pr_file": "rfd/0222-access-list-templates.md",
    "created_at": "2025-08-26T08:28:51+00:00",
    "commented_code": "+---\n+author: Lisa Kim (lisa@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 222 - Templated Access Lists\n+\n+# Required Approvers\n+\n+- Engineering: @r0mant || @smallinsky (marek) && @kopiczko (pavel)\n+- Product: @r0mant\n+\n+## What\n+\n+Add support for templated Access List that have system behaviors such as Teleport creating the required roles and then Teleport assigning those roles to members and owners upon creating an Access List.\n+\n+## Why\n+\n+Improves Access List usability especially for day one users. Templated Access List allows an admin to focus on users and what resources users should have access to. It removes the need for an admin to learn how to create roles and removes how roles have relation to an Access List because Teleport will do it for them.\n+\n+### User story: As an admin, I want to create an access list that require members to request for access and then grants short-term access to resources\n+\n+The template type to use for this case is `short-term`.\n+\n+Template type `short-term` represents an access list that utilizes JIT. Owners are reviewers. Members are requesters that are required to request access to resources and then upon approval are granted short-term access to requested Teleport resources.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+### User story: As an admin, I want to create an accesss list that grants long-term access to resources for members\n+\n+The template type to use for this case is `long-term`.\n+\n+Template type `long-term` represents an access list that grants members standing access to Teleport resources. Owners will have no special purpose other than to audit.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+This type of template is similar to how access list works now (non integrated types). Only difference is Teleport will create the necessary role for the admin.\n+\n+### Data Model\n+\n+#### Type Field\n+\n+In the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model, there exists a field called `type`. We will introduce an additional type called `template` to indicate an access list used a template upon creation.\n+\n+```proto\n+message AccessListSpec {\n+  // ... other existing fields\n+\n+  // Existing type values: dynamic, scim, and static\n+  // NEW value: \"template\"\n+  string type = 12;\n+}\n+```\n+\n+#### Template Specification\n+\n+A new field `template_config` will be introduced in the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model.",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2300223582",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58297,
        "pr_file": "rfd/0222-access-list-templates.md",
        "discussion_id": "2300223582",
        "commented_code": "@@ -0,0 +1,258 @@\n+---\n+author: Lisa Kim (lisa@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 222 - Templated Access Lists\n+\n+# Required Approvers\n+\n+- Engineering: @r0mant || @smallinsky (marek) && @kopiczko (pavel)\n+- Product: @r0mant\n+\n+## What\n+\n+Add support for templated Access List that have system behaviors such as Teleport creating the required roles and then Teleport assigning those roles to members and owners upon creating an Access List.\n+\n+## Why\n+\n+Improves Access List usability especially for day one users. Templated Access List allows an admin to focus on users and what resources users should have access to. It removes the need for an admin to learn how to create roles and removes how roles have relation to an Access List because Teleport will do it for them.\n+\n+### User story: As an admin, I want to create an access list that require members to request for access and then grants short-term access to resources\n+\n+The template type to use for this case is `short-term`.\n+\n+Template type `short-term` represents an access list that utilizes JIT. Owners are reviewers. Members are requesters that are required to request access to resources and then upon approval are granted short-term access to requested Teleport resources.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+### User story: As an admin, I want to create an accesss list that grants long-term access to resources for members\n+\n+The template type to use for this case is `long-term`.\n+\n+Template type `long-term` represents an access list that grants members standing access to Teleport resources. Owners will have no special purpose other than to audit.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+This type of template is similar to how access list works now (non integrated types). Only difference is Teleport will create the necessary role for the admin.\n+\n+### Data Model\n+\n+#### Type Field\n+\n+In the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model, there exists a field called `type`. We will introduce an additional type called `template` to indicate an access list used a template upon creation.\n+\n+```proto\n+message AccessListSpec {\n+  // ... other existing fields\n+\n+  // Existing type values: dynamic, scim, and static\n+  // NEW value: \"template\"\n+  string type = 12;\n+}\n+```\n+\n+#### Template Specification\n+\n+A new field `template_config` will be introduced in the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model.",
        "comment_created_at": "2025-08-26T08:28:51+00:00",
        "comment_author": "smallinsky",
        "comment_body": ">> @smallinsky Why we need to add add template_config to access list and store this in backend ?\r\n\r\n> @kimlisa to support creating template access list through tctl and later iac tools like terraform\r\n\r\n\r\nHow does the UX will look like ? \r\n\r\nI think that terraform and tclt are used by experience users and they can create access list role by hand: \r\n\r\n\r\nSo instead of doing \r\n```hcl\r\nresource \"acesss_list\" foobar { \r\n  header { \r\n .. \r\n } \r\n template_config: {\r\n   app_labels: ..\r\n   db_labels: ...\r\n}\r\n```\r\n\r\nthey can always do\r\n\r\n```hcl\r\nresouce \"role\" \"acc1\" { \r\n  ...\r\n   app_labels: ..\r\n   db_labels: ...\r\n } \r\n}\r\n\r\nresouce \"acesss_list\" foobar { \r\n  grants= {role=[loca.role.acc1]}\r\n}\r\n```\r\nExpecialy if template_config is wrapper on AllowResourceAccessConditions\r\n\r\n\r\nThe issue is that the template is intermediary object by by the end will be represented by a role set in the spec.grants \r\n\r\nThis means that grants should be read only property and a user should not able to modify this fields \r\n\r\ncc: @kopiczko any thoughts on that ? \r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2301423715",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58297,
        "pr_file": "rfd/0222-access-list-templates.md",
        "discussion_id": "2300223582",
        "commented_code": "@@ -0,0 +1,258 @@\n+---\n+author: Lisa Kim (lisa@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 222 - Templated Access Lists\n+\n+# Required Approvers\n+\n+- Engineering: @r0mant || @smallinsky (marek) && @kopiczko (pavel)\n+- Product: @r0mant\n+\n+## What\n+\n+Add support for templated Access List that have system behaviors such as Teleport creating the required roles and then Teleport assigning those roles to members and owners upon creating an Access List.\n+\n+## Why\n+\n+Improves Access List usability especially for day one users. Templated Access List allows an admin to focus on users and what resources users should have access to. It removes the need for an admin to learn how to create roles and removes how roles have relation to an Access List because Teleport will do it for them.\n+\n+### User story: As an admin, I want to create an access list that require members to request for access and then grants short-term access to resources\n+\n+The template type to use for this case is `short-term`.\n+\n+Template type `short-term` represents an access list that utilizes JIT. Owners are reviewers. Members are requesters that are required to request access to resources and then upon approval are granted short-term access to requested Teleport resources.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+### User story: As an admin, I want to create an accesss list that grants long-term access to resources for members\n+\n+The template type to use for this case is `long-term`.\n+\n+Template type `long-term` represents an access list that grants members standing access to Teleport resources. Owners will have no special purpose other than to audit.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+This type of template is similar to how access list works now (non integrated types). Only difference is Teleport will create the necessary role for the admin.\n+\n+### Data Model\n+\n+#### Type Field\n+\n+In the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model, there exists a field called `type`. We will introduce an additional type called `template` to indicate an access list used a template upon creation.\n+\n+```proto\n+message AccessListSpec {\n+  // ... other existing fields\n+\n+  // Existing type values: dynamic, scim, and static\n+  // NEW value: \"template\"\n+  string type = 12;\n+}\n+```\n+\n+#### Template Specification\n+\n+A new field `template_config` will be introduced in the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model.",
        "comment_created_at": "2025-08-26T15:45:56+00:00",
        "comment_author": "kimlisa",
        "comment_body": "hrmm, but wouldn't that defeat the purpose of a `templated` access list? if a user had to define the role, then assign that role to grants, the user might as well create a regular access list?\r\n\r\nso essentially templated access list is only supported through the web UI (which ironically is how my POC currently works \ud83d\ude05, tctl and terraform came as an after thought)",
        "pr_file_module": null
      },
      {
        "comment_id": "2302413658",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58297,
        "pr_file": "rfd/0222-access-list-templates.md",
        "discussion_id": "2300223582",
        "commented_code": "@@ -0,0 +1,258 @@\n+---\n+author: Lisa Kim (lisa@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 222 - Templated Access Lists\n+\n+# Required Approvers\n+\n+- Engineering: @r0mant || @smallinsky (marek) && @kopiczko (pavel)\n+- Product: @r0mant\n+\n+## What\n+\n+Add support for templated Access List that have system behaviors such as Teleport creating the required roles and then Teleport assigning those roles to members and owners upon creating an Access List.\n+\n+## Why\n+\n+Improves Access List usability especially for day one users. Templated Access List allows an admin to focus on users and what resources users should have access to. It removes the need for an admin to learn how to create roles and removes how roles have relation to an Access List because Teleport will do it for them.\n+\n+### User story: As an admin, I want to create an access list that require members to request for access and then grants short-term access to resources\n+\n+The template type to use for this case is `short-term`.\n+\n+Template type `short-term` represents an access list that utilizes JIT. Owners are reviewers. Members are requesters that are required to request access to resources and then upon approval are granted short-term access to requested Teleport resources.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+### User story: As an admin, I want to create an accesss list that grants long-term access to resources for members\n+\n+The template type to use for this case is `long-term`.\n+\n+Template type `long-term` represents an access list that grants members standing access to Teleport resources. Owners will have no special purpose other than to audit.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+This type of template is similar to how access list works now (non integrated types). Only difference is Teleport will create the necessary role for the admin.\n+\n+### Data Model\n+\n+#### Type Field\n+\n+In the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model, there exists a field called `type`. We will introduce an additional type called `template` to indicate an access list used a template upon creation.\n+\n+```proto\n+message AccessListSpec {\n+  // ... other existing fields\n+\n+  // Existing type values: dynamic, scim, and static\n+  // NEW value: \"template\"\n+  string type = 12;\n+}\n+```\n+\n+#### Template Specification\n+\n+A new field `template_config` will be introduced in the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model.",
        "comment_created_at": "2025-08-26T23:52:42+00:00",
        "comment_author": "kopiczko",
        "comment_body": "I guess we can add a gRPC validation preventing from specifying `grants` when `type=template`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2302494405",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58297,
        "pr_file": "rfd/0222-access-list-templates.md",
        "discussion_id": "2300223582",
        "commented_code": "@@ -0,0 +1,258 @@\n+---\n+author: Lisa Kim (lisa@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 222 - Templated Access Lists\n+\n+# Required Approvers\n+\n+- Engineering: @r0mant || @smallinsky (marek) && @kopiczko (pavel)\n+- Product: @r0mant\n+\n+## What\n+\n+Add support for templated Access List that have system behaviors such as Teleport creating the required roles and then Teleport assigning those roles to members and owners upon creating an Access List.\n+\n+## Why\n+\n+Improves Access List usability especially for day one users. Templated Access List allows an admin to focus on users and what resources users should have access to. It removes the need for an admin to learn how to create roles and removes how roles have relation to an Access List because Teleport will do it for them.\n+\n+### User story: As an admin, I want to create an access list that require members to request for access and then grants short-term access to resources\n+\n+The template type to use for this case is `short-term`.\n+\n+Template type `short-term` represents an access list that utilizes JIT. Owners are reviewers. Members are requesters that are required to request access to resources and then upon approval are granted short-term access to requested Teleport resources.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+### User story: As an admin, I want to create an accesss list that grants long-term access to resources for members\n+\n+The template type to use for this case is `long-term`.\n+\n+Template type `long-term` represents an access list that grants members standing access to Teleport resources. Owners will have no special purpose other than to audit.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+This type of template is similar to how access list works now (non integrated types). Only difference is Teleport will create the necessary role for the admin.\n+\n+### Data Model\n+\n+#### Type Field\n+\n+In the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model, there exists a field called `type`. We will introduce an additional type called `template` to indicate an access list used a template upon creation.\n+\n+```proto\n+message AccessListSpec {\n+  // ... other existing fields\n+\n+  // Existing type values: dynamic, scim, and static\n+  // NEW value: \"template\"\n+  string type = 12;\n+}\n+```\n+\n+#### Template Specification\n+\n+A new field `template_config` will be introduced in the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model.",
        "comment_created_at": "2025-08-27T00:45:45+00:00",
        "comment_author": "kopiczko",
        "comment_body": "Actually further down in this RFD it says `grants` will be immutable for `type=template`. We should also validate if grants are are equal to `grants{roles=[access]}`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2317612992",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58297,
        "pr_file": "rfd/0222-access-list-templates.md",
        "discussion_id": "2300223582",
        "commented_code": "@@ -0,0 +1,258 @@\n+---\n+author: Lisa Kim (lisa@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 222 - Templated Access Lists\n+\n+# Required Approvers\n+\n+- Engineering: @r0mant || @smallinsky (marek) && @kopiczko (pavel)\n+- Product: @r0mant\n+\n+## What\n+\n+Add support for templated Access List that have system behaviors such as Teleport creating the required roles and then Teleport assigning those roles to members and owners upon creating an Access List.\n+\n+## Why\n+\n+Improves Access List usability especially for day one users. Templated Access List allows an admin to focus on users and what resources users should have access to. It removes the need for an admin to learn how to create roles and removes how roles have relation to an Access List because Teleport will do it for them.\n+\n+### User story: As an admin, I want to create an access list that require members to request for access and then grants short-term access to resources\n+\n+The template type to use for this case is `short-term`.\n+\n+Template type `short-term` represents an access list that utilizes JIT. Owners are reviewers. Members are requesters that are required to request access to resources and then upon approval are granted short-term access to requested Teleport resources.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+### User story: As an admin, I want to create an accesss list that grants long-term access to resources for members\n+\n+The template type to use for this case is `long-term`.\n+\n+Template type `long-term` represents an access list that grants members standing access to Teleport resources. Owners will have no special purpose other than to audit.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+This type of template is similar to how access list works now (non integrated types). Only difference is Teleport will create the necessary role for the admin.\n+\n+### Data Model\n+\n+#### Type Field\n+\n+In the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model, there exists a field called `type`. We will introduce an additional type called `template` to indicate an access list used a template upon creation.\n+\n+```proto\n+message AccessListSpec {\n+  // ... other existing fields\n+\n+  // Existing type values: dynamic, scim, and static\n+  // NEW value: \"template\"\n+  string type = 12;\n+}\n+```\n+\n+#### Template Specification\n+\n+A new field `template_config` will be introduced in the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model.",
        "comment_created_at": "2025-09-03T02:39:46+00:00",
        "comment_author": "kimlisa",
        "comment_body": "@smallinsky i added a [CLI UX section](https://github.com/gravitational/teleport/pull/58297/files#diff-cf3663b2d5041c9e3d6c7c4c0e66a7882cb17fd6ae833cf41ab17b24ca9e511eR150) with examples",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2302425589",
    "pr_number": 58297,
    "pr_file": "rfd/0222-access-list-templates.md",
    "created_at": "2025-08-26T23:57:13+00:00",
    "commented_code": "+---\n+author: Lisa Kim (lisa@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 222 - Templated Access Lists\n+\n+# Required Approvers\n+\n+- Engineering: @r0mant || @smallinsky (marek) && @kopiczko (pavel)\n+- Product: @r0mant\n+\n+## What\n+\n+Add support for templated Access List that have system behaviors such as Teleport creating the required roles and then Teleport assigning those roles to members and owners upon creating an Access List.\n+\n+## Why\n+\n+Improves Access List usability especially for day one users. Templated Access List allows an admin to focus on users and what resources users should have access to. It removes the need for an admin to learn how to create roles and removes how roles have relation to an Access List because Teleport will do it for them.\n+\n+### User story: As an admin, I want to create an access list that require members to request for access and then grants short-term access to resources\n+\n+The template type to use for this case is `short-term`.\n+\n+Template type `short-term` represents an access list that utilizes JIT. Owners are reviewers. Members are requesters that are required to request access to resources and then upon approval are granted short-term access to requested Teleport resources.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+### User story: As an admin, I want to create an accesss list that grants long-term access to resources for members\n+\n+The template type to use for this case is `long-term`.\n+\n+Template type `long-term` represents an access list that grants members standing access to Teleport resources. Owners will have no special purpose other than to audit.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+This type of template is similar to how access list works now (non integrated types). Only difference is Teleport will create the necessary role for the admin.\n+\n+### Data Model\n+\n+#### Type Field\n+\n+In the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model, there exists a field called `type`. We will introduce an additional type called `template` to indicate an access list used a template upon creation.\n+\n+```proto\n+message AccessListSpec {\n+  // ... other existing fields\n+\n+  // Existing type values: dynamic, scim, and static\n+  // NEW value: \"template\"\n+  string type = 12;\n+}\n+```\n+\n+#### Template Specification\n+\n+A new field `template_config` will be introduced in the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model.\n+\n+```proto\n+message AccessListSpec {\n+  // ... other existing fields\n+\n+  AccessListTemplateConfig template_config = 13;\n+}\n+\n+// AccessListTemplateConfig describes the template used.\n+message AccessListTemplateConfig {\n+  oneof template {\n+    TemplateLongTerm long_term = 1;\n+    TemplateShortTerm short_term = 2;\n+  }\n+}\n+\n+// TemplateLongTerm describes fields required to create\n+// an access list with long term access grant.\n+message TemplateLongTerm {\n+  // access_condition defines access to resources\n+  // and its principals.\n+  AllowResourceAccessConditions access_condition = 1;\n+}\n+\n+// TemplateShortTerm describes fields required to create\n+// an access list with short term access grant.\n+message TemplateShortTerm {\n+  // access_condition defines access to resources\n+  // and its principals.\n+  AllowResourceAccessConditions access_condition = 1;\n+}\n+```\n+\n+The field `AllowResourceAccessConditions` is really just a copy and paste of the existing type [RoleConditions](https://github.com/gravitational/teleport/blob/31143cca86ec73d7404e5f90044996eafff199c8/api/proto/teleport/legacy/types/types.proto#L3759) but only takes the fields that is relevant to an access list and molds it to an organized structure so it will be easier to define with `tctl` users.\n+\n+The `AllowResourceAccessConditions` model describes access to resources by its labels and relevant resource principals.\n+\n+```proto\n+// AllowResourceAccessConditions defines the access to different resources.\n+message AllowResourceAccessConditions {\n+  ApplicationAccess application = 1;\n+  DatabaseAccess database = 2;\n+  GitServerAccess git_server = 3;\n+  KubernetesAccess kubernetes = 4;\n+  ServerAccess server = 5;\n+  WindowsDesktopAccess windows_desktop = 6;\n+}\n+\n+// ApplicationAccess are access related fields for application resource.\n+message ApplicationAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string aws_role_arns = 2 [(gogoproto.jsontag) = \"aws_role_arns,omitempty\"];\n+  repeated string azure_identities = 3 [(gogoproto.jsontag) = \"azure_identities,omitempty\"];\n+  repeated string gcp_service_accounts = 4 [(gogoproto.jsontag) = \"gcp_service_accounts,omitempty\"];\n+  types.MCPPermissions mcp = 5 [(gogoproto.jsontag) = \"mcp,omitempty\"];\n+}\n+\n+// DatabaseAccess are access related fields for db resource.\n+message DatabaseAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string names = 2 [(gogoproto.jsontag) = \"names,omitempty\"];\n+  repeated string users = 3 [(gogoproto.jsontag) = \"users,omitempty\"];\n+}\n+\n+// GitServerAccess are access related fields for git server resource.\n+message GitServerAccess {\n+  repeated types.GitHubPermission permissions = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"permissions,omitempty\"\n+  ];\n+}\n+\n+// KubernetesAccess are access related fields for kube resource.\n+message KubernetesAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string groups = 2 [(gogoproto.jsontag) = \"groups,omitempty\"];\n+  repeated string users = 3 [(gogoproto.jsontag) = \"users,omitempty\"];\n+  repeated types.KubernetesResource resources = 4 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"resources,omitempty\"\n+  ];\n+}\n+\n+// ServerAccess are access related fields for server resource.\n+message ServerAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string logins = 2 [(gogoproto.jsontag) = \"logins,omitempty\"];\n+}\n+\n+// WindowsDesktopAccess are access related fields for windows desktop resource.\n+message WindowsDesktopAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string logins = 2 [(gogoproto.jsontag) = \"logins,omitempty\"];\n+}",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2302425589",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58297,
        "pr_file": "rfd/0222-access-list-templates.md",
        "discussion_id": "2302425589",
        "commented_code": "@@ -0,0 +1,258 @@\n+---\n+author: Lisa Kim (lisa@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 222 - Templated Access Lists\n+\n+# Required Approvers\n+\n+- Engineering: @r0mant || @smallinsky (marek) && @kopiczko (pavel)\n+- Product: @r0mant\n+\n+## What\n+\n+Add support for templated Access List that have system behaviors such as Teleport creating the required roles and then Teleport assigning those roles to members and owners upon creating an Access List.\n+\n+## Why\n+\n+Improves Access List usability especially for day one users. Templated Access List allows an admin to focus on users and what resources users should have access to. It removes the need for an admin to learn how to create roles and removes how roles have relation to an Access List because Teleport will do it for them.\n+\n+### User story: As an admin, I want to create an access list that require members to request for access and then grants short-term access to resources\n+\n+The template type to use for this case is `short-term`.\n+\n+Template type `short-term` represents an access list that utilizes JIT. Owners are reviewers. Members are requesters that are required to request access to resources and then upon approval are granted short-term access to requested Teleport resources.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+### User story: As an admin, I want to create an accesss list that grants long-term access to resources for members\n+\n+The template type to use for this case is `long-term`.\n+\n+Template type `long-term` represents an access list that grants members standing access to Teleport resources. Owners will have no special purpose other than to audit.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+This type of template is similar to how access list works now (non integrated types). Only difference is Teleport will create the necessary role for the admin.\n+\n+### Data Model\n+\n+#### Type Field\n+\n+In the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model, there exists a field called `type`. We will introduce an additional type called `template` to indicate an access list used a template upon creation.\n+\n+```proto\n+message AccessListSpec {\n+  // ... other existing fields\n+\n+  // Existing type values: dynamic, scim, and static\n+  // NEW value: \"template\"\n+  string type = 12;\n+}\n+```\n+\n+#### Template Specification\n+\n+A new field `template_config` will be introduced in the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model.\n+\n+```proto\n+message AccessListSpec {\n+  // ... other existing fields\n+\n+  AccessListTemplateConfig template_config = 13;\n+}\n+\n+// AccessListTemplateConfig describes the template used.\n+message AccessListTemplateConfig {\n+  oneof template {\n+    TemplateLongTerm long_term = 1;\n+    TemplateShortTerm short_term = 2;\n+  }\n+}\n+\n+// TemplateLongTerm describes fields required to create\n+// an access list with long term access grant.\n+message TemplateLongTerm {\n+  // access_condition defines access to resources\n+  // and its principals.\n+  AllowResourceAccessConditions access_condition = 1;\n+}\n+\n+// TemplateShortTerm describes fields required to create\n+// an access list with short term access grant.\n+message TemplateShortTerm {\n+  // access_condition defines access to resources\n+  // and its principals.\n+  AllowResourceAccessConditions access_condition = 1;\n+}\n+```\n+\n+The field `AllowResourceAccessConditions` is really just a copy and paste of the existing type [RoleConditions](https://github.com/gravitational/teleport/blob/31143cca86ec73d7404e5f90044996eafff199c8/api/proto/teleport/legacy/types/types.proto#L3759) but only takes the fields that is relevant to an access list and molds it to an organized structure so it will be easier to define with `tctl` users.\n+\n+The `AllowResourceAccessConditions` model describes access to resources by its labels and relevant resource principals.\n+\n+```proto\n+// AllowResourceAccessConditions defines the access to different resources.\n+message AllowResourceAccessConditions {\n+  ApplicationAccess application = 1;\n+  DatabaseAccess database = 2;\n+  GitServerAccess git_server = 3;\n+  KubernetesAccess kubernetes = 4;\n+  ServerAccess server = 5;\n+  WindowsDesktopAccess windows_desktop = 6;\n+}\n+\n+// ApplicationAccess are access related fields for application resource.\n+message ApplicationAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string aws_role_arns = 2 [(gogoproto.jsontag) = \"aws_role_arns,omitempty\"];\n+  repeated string azure_identities = 3 [(gogoproto.jsontag) = \"azure_identities,omitempty\"];\n+  repeated string gcp_service_accounts = 4 [(gogoproto.jsontag) = \"gcp_service_accounts,omitempty\"];\n+  types.MCPPermissions mcp = 5 [(gogoproto.jsontag) = \"mcp,omitempty\"];\n+}\n+\n+// DatabaseAccess are access related fields for db resource.\n+message DatabaseAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string names = 2 [(gogoproto.jsontag) = \"names,omitempty\"];\n+  repeated string users = 3 [(gogoproto.jsontag) = \"users,omitempty\"];\n+}\n+\n+// GitServerAccess are access related fields for git server resource.\n+message GitServerAccess {\n+  repeated types.GitHubPermission permissions = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"permissions,omitempty\"\n+  ];\n+}\n+\n+// KubernetesAccess are access related fields for kube resource.\n+message KubernetesAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string groups = 2 [(gogoproto.jsontag) = \"groups,omitempty\"];\n+  repeated string users = 3 [(gogoproto.jsontag) = \"users,omitempty\"];\n+  repeated types.KubernetesResource resources = 4 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"resources,omitempty\"\n+  ];\n+}\n+\n+// ServerAccess are access related fields for server resource.\n+message ServerAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string logins = 2 [(gogoproto.jsontag) = \"logins,omitempty\"];\n+}\n+\n+// WindowsDesktopAccess are access related fields for windows desktop resource.\n+message WindowsDesktopAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string logins = 2 [(gogoproto.jsontag) = \"logins,omitempty\"];\n+}",
        "comment_created_at": "2025-08-26T23:57:13+00:00",
        "comment_author": "kopiczko",
        "comment_body": "I wonder how much we duplicate the role spec in those `*Access` types. Maybe we should simply embed role spec or parts of it?",
        "pr_file_module": null
      },
      {
        "comment_id": "2317620793",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58297,
        "pr_file": "rfd/0222-access-list-templates.md",
        "discussion_id": "2302425589",
        "commented_code": "@@ -0,0 +1,258 @@\n+---\n+author: Lisa Kim (lisa@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 222 - Templated Access Lists\n+\n+# Required Approvers\n+\n+- Engineering: @r0mant || @smallinsky (marek) && @kopiczko (pavel)\n+- Product: @r0mant\n+\n+## What\n+\n+Add support for templated Access List that have system behaviors such as Teleport creating the required roles and then Teleport assigning those roles to members and owners upon creating an Access List.\n+\n+## Why\n+\n+Improves Access List usability especially for day one users. Templated Access List allows an admin to focus on users and what resources users should have access to. It removes the need for an admin to learn how to create roles and removes how roles have relation to an Access List because Teleport will do it for them.\n+\n+### User story: As an admin, I want to create an access list that require members to request for access and then grants short-term access to resources\n+\n+The template type to use for this case is `short-term`.\n+\n+Template type `short-term` represents an access list that utilizes JIT. Owners are reviewers. Members are requesters that are required to request access to resources and then upon approval are granted short-term access to requested Teleport resources.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+### User story: As an admin, I want to create an accesss list that grants long-term access to resources for members\n+\n+The template type to use for this case is `long-term`.\n+\n+Template type `long-term` represents an access list that grants members standing access to Teleport resources. Owners will have no special purpose other than to audit.\n+\n+Admin will define what resources members will have access to by specifying the resource kinds and its labels and its the resource principals.\n+\n+This type of template is similar to how access list works now (non integrated types). Only difference is Teleport will create the necessary role for the admin.\n+\n+### Data Model\n+\n+#### Type Field\n+\n+In the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model, there exists a field called `type`. We will introduce an additional type called `template` to indicate an access list used a template upon creation.\n+\n+```proto\n+message AccessListSpec {\n+  // ... other existing fields\n+\n+  // Existing type values: dynamic, scim, and static\n+  // NEW value: \"template\"\n+  string type = 12;\n+}\n+```\n+\n+#### Template Specification\n+\n+A new field `template_config` will be introduced in the current [AccessListSpec](https://github.com/gravitational/teleport/blob/bbb0f46b22ff88299908bef8dcf85d292aa379e1/api/proto/teleport/accesslist/v1/accesslist.proto#L75) model.\n+\n+```proto\n+message AccessListSpec {\n+  // ... other existing fields\n+\n+  AccessListTemplateConfig template_config = 13;\n+}\n+\n+// AccessListTemplateConfig describes the template used.\n+message AccessListTemplateConfig {\n+  oneof template {\n+    TemplateLongTerm long_term = 1;\n+    TemplateShortTerm short_term = 2;\n+  }\n+}\n+\n+// TemplateLongTerm describes fields required to create\n+// an access list with long term access grant.\n+message TemplateLongTerm {\n+  // access_condition defines access to resources\n+  // and its principals.\n+  AllowResourceAccessConditions access_condition = 1;\n+}\n+\n+// TemplateShortTerm describes fields required to create\n+// an access list with short term access grant.\n+message TemplateShortTerm {\n+  // access_condition defines access to resources\n+  // and its principals.\n+  AllowResourceAccessConditions access_condition = 1;\n+}\n+```\n+\n+The field `AllowResourceAccessConditions` is really just a copy and paste of the existing type [RoleConditions](https://github.com/gravitational/teleport/blob/31143cca86ec73d7404e5f90044996eafff199c8/api/proto/teleport/legacy/types/types.proto#L3759) but only takes the fields that is relevant to an access list and molds it to an organized structure so it will be easier to define with `tctl` users.\n+\n+The `AllowResourceAccessConditions` model describes access to resources by its labels and relevant resource principals.\n+\n+```proto\n+// AllowResourceAccessConditions defines the access to different resources.\n+message AllowResourceAccessConditions {\n+  ApplicationAccess application = 1;\n+  DatabaseAccess database = 2;\n+  GitServerAccess git_server = 3;\n+  KubernetesAccess kubernetes = 4;\n+  ServerAccess server = 5;\n+  WindowsDesktopAccess windows_desktop = 6;\n+}\n+\n+// ApplicationAccess are access related fields for application resource.\n+message ApplicationAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string aws_role_arns = 2 [(gogoproto.jsontag) = \"aws_role_arns,omitempty\"];\n+  repeated string azure_identities = 3 [(gogoproto.jsontag) = \"azure_identities,omitempty\"];\n+  repeated string gcp_service_accounts = 4 [(gogoproto.jsontag) = \"gcp_service_accounts,omitempty\"];\n+  types.MCPPermissions mcp = 5 [(gogoproto.jsontag) = \"mcp,omitempty\"];\n+}\n+\n+// DatabaseAccess are access related fields for db resource.\n+message DatabaseAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string names = 2 [(gogoproto.jsontag) = \"names,omitempty\"];\n+  repeated string users = 3 [(gogoproto.jsontag) = \"users,omitempty\"];\n+}\n+\n+// GitServerAccess are access related fields for git server resource.\n+message GitServerAccess {\n+  repeated types.GitHubPermission permissions = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"permissions,omitempty\"\n+  ];\n+}\n+\n+// KubernetesAccess are access related fields for kube resource.\n+message KubernetesAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string groups = 2 [(gogoproto.jsontag) = \"groups,omitempty\"];\n+  repeated string users = 3 [(gogoproto.jsontag) = \"users,omitempty\"];\n+  repeated types.KubernetesResource resources = 4 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"resources,omitempty\"\n+  ];\n+}\n+\n+// ServerAccess are access related fields for server resource.\n+message ServerAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string logins = 2 [(gogoproto.jsontag) = \"logins,omitempty\"];\n+}\n+\n+// WindowsDesktopAccess are access related fields for windows desktop resource.\n+message WindowsDesktopAccess {\n+  wrappers.LabelValues labels = 1 [\n+    (gogoproto.nullable) = false,\n+    (gogoproto.jsontag) = \"labels,omitempty\",\n+    (gogoproto.customtype) = \"Labels\"\n+  ];\n+  repeated string logins = 2 [(gogoproto.jsontag) = \"logins,omitempty\"];\n+}",
        "comment_created_at": "2025-09-03T02:47:39+00:00",
        "comment_author": "kimlisa",
        "comment_body": "> Maybe we should simply embed role spec or parts of it?\r\n\r\ni was originally thinking to do this, but its API is not very friendly because [there's no grouping of related fields](https://github.com/gravitational/teleport/blob/f102b39cafd688b19ef5b8a14665f1580dc7d078/api/proto/teleport/legacy/types/types.proto#L3763)\r\n\r\nhere is an example (below proto) if we were to embed RoleSpecV6. ignore the proto numbering, i copied and pasted then removed irrelevant fields.\r\n\r\nCons:\r\n- ordering, i'm not sure if i can change the ordering, the related fields are not really grouped together (eg: app, kube)\r\n- some resources like `app`, it's hard to know which fields are its related resource principals\r\n- if you add another field in `RoleCondition` and it is not related to access list template specs, then you have to explicitly ignore them in the `protoc-gen-terraform-accesslist.yaml` file. \r\n\r\n```proto\r\nmessage TemplateLongTerm { // example\r\n  RoleConditions allow = 1;\r\n}\r\n\r\nmessage RoleConditions {\r\n  repeated string Logins = 1;\r\n  wrappers.LabelValues NodeLabels = 3;\r\n\r\n  repeated string KubeGroups = 5;\r\n  repeated string KubeUsers = 7;\r\n\r\n  wrappers.LabelValues AppLabels = 8;\r\n\r\n  wrappers.LabelValues KubernetesLabels = 10;\r\n\r\n  wrappers.LabelValues DatabaseLabels = 11;\r\n  repeated string DatabaseNames = 12;\r\n  repeated string DatabaseUsers = 13;\r\n\r\n  repeated string AWSRoleARNs = 16;   // app\r\n\r\n  repeated string WindowsDesktopLogins = 17;\r\n  wrappers.LabelValues WindowsDesktopLabels = 18;\r\n\r\n  repeated string AzureIdentities = 23;  // app\r\n\r\n  repeated KubernetesResource KubernetesResources = 24;\r\n\r\n  repeated string GCPServiceAccounts = 25;  // app\r\n\r\n  repeated GitHubPermission git_hub_permissions = 43;\r\n\r\n  MCPPermissions MCP = 46;   // app\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2310191125",
    "pr_number": 57888,
    "pr_file": "rfd/0222-bot-instances-at-scale.md",
    "created_at": "2025-08-29T13:39:04+00:00",
    "commented_code": "+---\n+authors: Nick Marais (nicholas.marais@goteleport.com), Dan Upton (dan.upton@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 0222 - Bot Instances at Scale\n+\n+## Required Approvers\n+\n+- Engineering: @strideynet\n+- Product: @thedevelopnik\n+\n+# RFD 0222 - Bot Instances at Scale\n+\n+# What\n+\n+This proposal seeks to address the pain points of configuring and running a large fleet of Machine & Workload ID bots.\n+\n+It will focus solely on the Day 1 experience, and users are expected to be familiar with Teleport in general as well as the config and setup of their respective clusters. Day 0 tutorialization of setup steps and guided beginner scenarios are left to other initiatives.\n+\n+# Why\n+\n+As adoption of Machine & Workload ID increases, in part due to the drive to increase efficiency through automation as well as trends like Agentive AI, customers expect managing large fleets of bots to be simple and easy.\n+\n+It\u2019s the responsibility of the **infrastructure security team** to own and manage the Teleport cluster and enrol protected resources. For teams which make extensive use of Machine & Workload ID, it has become cumbersome to manage many bots and hundreds of instances. Where Dev/Dev Ops teams deploy bot instances themselves, it can be doubly difficult to coordinate upgrades and security initiatives.\n+\n+# Details\n+\n+## UX\n+\n+### User Stories\n+\n+**As a cluster owner (Infrastructure Security team), I want to know which Bot Instances, across all Bots, are blocking a safe cluster upgrade (major) due to their version.**\n+\n+The upgrade process can vary depending on the flavour of Teleport in use (cloud, oss, etc), and how it\u2019s deployed. A common step is to query for agents running a version which would become incompatible should an upgrade be done - using `tctl inventory ls --older-than=v18.0.0`. This command does not include bot instances, and `tctl bots instances ls` doesn\u2019t return versions numbers for instances.\n+\n+As such, it is a difficult task to identify bot instances that may be running an old version of `tbot`. This is especially difficult at scale. The current bot instance list available in the web app allows filtering by version, although it\u2019s a text search and it is not aware of semantic versioning - finding versions older than a given version is not possible.\n+\n+A breakdown of active instance versions will make the process of monitoring the version status easy at a glance, as well as provide convenient links to filter the instance list for versions already one or more major version behind the control plane (thereby preventing a safe upgrade). To facilitate this, the filter will allow queries such as `semver_lt(version, \"18.1\")`. The instance list will also indicate the status of an instance\u2019s most recent version (as up-to-date, upgrade available, patch available, or incompatible).",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2310191125",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 57888,
        "pr_file": "rfd/0222-bot-instances-at-scale.md",
        "discussion_id": "2310191125",
        "commented_code": "@@ -0,0 +1,367 @@\n+---\n+authors: Nick Marais (nicholas.marais@goteleport.com), Dan Upton (dan.upton@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 0222 - Bot Instances at Scale\n+\n+## Required Approvers\n+\n+- Engineering: @strideynet\n+- Product: @thedevelopnik\n+\n+# RFD 0222 - Bot Instances at Scale\n+\n+# What\n+\n+This proposal seeks to address the pain points of configuring and running a large fleet of Machine & Workload ID bots.\n+\n+It will focus solely on the Day 1 experience, and users are expected to be familiar with Teleport in general as well as the config and setup of their respective clusters. Day 0 tutorialization of setup steps and guided beginner scenarios are left to other initiatives.\n+\n+# Why\n+\n+As adoption of Machine & Workload ID increases, in part due to the drive to increase efficiency through automation as well as trends like Agentive AI, customers expect managing large fleets of bots to be simple and easy.\n+\n+It\u2019s the responsibility of the **infrastructure security team** to own and manage the Teleport cluster and enrol protected resources. For teams which make extensive use of Machine & Workload ID, it has become cumbersome to manage many bots and hundreds of instances. Where Dev/Dev Ops teams deploy bot instances themselves, it can be doubly difficult to coordinate upgrades and security initiatives.\n+\n+# Details\n+\n+## UX\n+\n+### User Stories\n+\n+**As a cluster owner (Infrastructure Security team), I want to know which Bot Instances, across all Bots, are blocking a safe cluster upgrade (major) due to their version.**\n+\n+The upgrade process can vary depending on the flavour of Teleport in use (cloud, oss, etc), and how it\u2019s deployed. A common step is to query for agents running a version which would become incompatible should an upgrade be done - using `tctl inventory ls --older-than=v18.0.0`. This command does not include bot instances, and `tctl bots instances ls` doesn\u2019t return versions numbers for instances.\n+\n+As such, it is a difficult task to identify bot instances that may be running an old version of `tbot`. This is especially difficult at scale. The current bot instance list available in the web app allows filtering by version, although it\u2019s a text search and it is not aware of semantic versioning - finding versions older than a given version is not possible.\n+\n+A breakdown of active instance versions will make the process of monitoring the version status easy at a glance, as well as provide convenient links to filter the instance list for versions already one or more major version behind the control plane (thereby preventing a safe upgrade). To facilitate this, the filter will allow queries such as `semver_lt(version, \"18.1\")`. The instance list will also indicate the status of an instance\u2019s most recent version (as up-to-date, upgrade available, patch available, or incompatible).",
        "comment_created_at": "2025-08-29T13:39:04+00:00",
        "comment_author": "rosstimothy",
        "comment_body": "Is this going to be exclusively available via the web UI? Is there any reason we can't add a CLI equivalent?",
        "pr_file_module": null
      },
      {
        "comment_id": "2313764703",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 57888,
        "pr_file": "rfd/0222-bot-instances-at-scale.md",
        "discussion_id": "2310191125",
        "commented_code": "@@ -0,0 +1,367 @@\n+---\n+authors: Nick Marais (nicholas.marais@goteleport.com), Dan Upton (dan.upton@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 0222 - Bot Instances at Scale\n+\n+## Required Approvers\n+\n+- Engineering: @strideynet\n+- Product: @thedevelopnik\n+\n+# RFD 0222 - Bot Instances at Scale\n+\n+# What\n+\n+This proposal seeks to address the pain points of configuring and running a large fleet of Machine & Workload ID bots.\n+\n+It will focus solely on the Day 1 experience, and users are expected to be familiar with Teleport in general as well as the config and setup of their respective clusters. Day 0 tutorialization of setup steps and guided beginner scenarios are left to other initiatives.\n+\n+# Why\n+\n+As adoption of Machine & Workload ID increases, in part due to the drive to increase efficiency through automation as well as trends like Agentive AI, customers expect managing large fleets of bots to be simple and easy.\n+\n+It\u2019s the responsibility of the **infrastructure security team** to own and manage the Teleport cluster and enrol protected resources. For teams which make extensive use of Machine & Workload ID, it has become cumbersome to manage many bots and hundreds of instances. Where Dev/Dev Ops teams deploy bot instances themselves, it can be doubly difficult to coordinate upgrades and security initiatives.\n+\n+# Details\n+\n+## UX\n+\n+### User Stories\n+\n+**As a cluster owner (Infrastructure Security team), I want to know which Bot Instances, across all Bots, are blocking a safe cluster upgrade (major) due to their version.**\n+\n+The upgrade process can vary depending on the flavour of Teleport in use (cloud, oss, etc), and how it\u2019s deployed. A common step is to query for agents running a version which would become incompatible should an upgrade be done - using `tctl inventory ls --older-than=v18.0.0`. This command does not include bot instances, and `tctl bots instances ls` doesn\u2019t return versions numbers for instances.\n+\n+As such, it is a difficult task to identify bot instances that may be running an old version of `tbot`. This is especially difficult at scale. The current bot instance list available in the web app allows filtering by version, although it\u2019s a text search and it is not aware of semantic versioning - finding versions older than a given version is not possible.\n+\n+A breakdown of active instance versions will make the process of monitoring the version status easy at a glance, as well as provide convenient links to filter the instance list for versions already one or more major version behind the control plane (thereby preventing a safe upgrade). To facilitate this, the filter will allow queries such as `semver_lt(version, \"18.1\")`. The instance list will also indicate the status of an instance\u2019s most recent version (as up-to-date, upgrade available, patch available, or incompatible).",
        "comment_created_at": "2025-09-01T12:01:56+00:00",
        "comment_author": "strideynet",
        "comment_body": "I expect most of this information will be exposed via the standard `tctl get` as we'll be reusing the existing bot_instance resource - but we should definitely include a task here to update the `tctl bots instances ls` grid to show the new information as appropriate.",
        "pr_file_module": null
      },
      {
        "comment_id": "2314312024",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 57888,
        "pr_file": "rfd/0222-bot-instances-at-scale.md",
        "discussion_id": "2310191125",
        "commented_code": "@@ -0,0 +1,367 @@\n+---\n+authors: Nick Marais (nicholas.marais@goteleport.com), Dan Upton (dan.upton@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 0222 - Bot Instances at Scale\n+\n+## Required Approvers\n+\n+- Engineering: @strideynet\n+- Product: @thedevelopnik\n+\n+# RFD 0222 - Bot Instances at Scale\n+\n+# What\n+\n+This proposal seeks to address the pain points of configuring and running a large fleet of Machine & Workload ID bots.\n+\n+It will focus solely on the Day 1 experience, and users are expected to be familiar with Teleport in general as well as the config and setup of their respective clusters. Day 0 tutorialization of setup steps and guided beginner scenarios are left to other initiatives.\n+\n+# Why\n+\n+As adoption of Machine & Workload ID increases, in part due to the drive to increase efficiency through automation as well as trends like Agentive AI, customers expect managing large fleets of bots to be simple and easy.\n+\n+It\u2019s the responsibility of the **infrastructure security team** to own and manage the Teleport cluster and enrol protected resources. For teams which make extensive use of Machine & Workload ID, it has become cumbersome to manage many bots and hundreds of instances. Where Dev/Dev Ops teams deploy bot instances themselves, it can be doubly difficult to coordinate upgrades and security initiatives.\n+\n+# Details\n+\n+## UX\n+\n+### User Stories\n+\n+**As a cluster owner (Infrastructure Security team), I want to know which Bot Instances, across all Bots, are blocking a safe cluster upgrade (major) due to their version.**\n+\n+The upgrade process can vary depending on the flavour of Teleport in use (cloud, oss, etc), and how it\u2019s deployed. A common step is to query for agents running a version which would become incompatible should an upgrade be done - using `tctl inventory ls --older-than=v18.0.0`. This command does not include bot instances, and `tctl bots instances ls` doesn\u2019t return versions numbers for instances.\n+\n+As such, it is a difficult task to identify bot instances that may be running an old version of `tbot`. This is especially difficult at scale. The current bot instance list available in the web app allows filtering by version, although it\u2019s a text search and it is not aware of semantic versioning - finding versions older than a given version is not possible.\n+\n+A breakdown of active instance versions will make the process of monitoring the version status easy at a glance, as well as provide convenient links to filter the instance list for versions already one or more major version behind the control plane (thereby preventing a safe upgrade). To facilitate this, the filter will allow queries such as `semver_lt(version, \"18.1\")`. The instance list will also indicate the status of an instance\u2019s most recent version (as up-to-date, upgrade available, patch available, or incompatible).",
        "comment_created_at": "2025-09-01T16:20:50+00:00",
        "comment_author": "nicholasmarais1158",
        "comment_body": "I've included some details to cover changes to `tctl`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2219942068",
    "pr_number": 56214,
    "pr_file": "rfd/0219-k8s-rbac-simplification.md",
    "created_at": "2025-07-21T18:23:15+00:00",
    "commented_code": "+---\n+authors: Guillaume Charmes (guillaume.charmes@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 0219 - Kubernetes RBAC Simplification\n+\n+## Required Approvers\n+\n+- Engineering: @rosstimothy && @hugoShaka && @tigrato\n+Product: klizhentas\n+\n+## What\n+\n+The purpose of this RFD is to propose a simplification of the Kubernetes\n+RBAC (Role-Based Access Control) within the Teleport project.\n+\n+The goal is to streamline the user experience and reduce the complexity of\n+getting up and running on day 1 and managing permissions later on.\n+\n+## Why\n+\n+Today, the Kubernetes RBAC in Teleport is complex and can be difficult for\n+users to manage.\n+A proper setup requires some external Kubernetes config and matching role\n+setup.\n+This complexity leads to misconfigurations and security issues.\n+\n+Simplifying the RBAC model will help improve usability and security.\n+\n+### References\n+\n+A common issue currently is the un-intuitive result of complex rule sets and\n+more critically, difficult to get setup on day 1.\n+\n+- @klizhentas struggling to setup a cluster following the `self-hosted` flow:\n+  (internal) <https://gravitational.slack.com/archives/C03SULRAAG3/p1715394587181739>\n+- Customer confusion on role resolution:\n+  - <https://github.com/gravitational/teleport/issues/45475>\n+  - (internal) <https://goteleport.slack.com/archives/C0582MBSMHN/p1738187497666819>\n+- Unexpected `exec` grant on read-only user:\n+  (internal) <https://gravitational.slack.com/archives/C32M8FP1V/p1739462454321459?thread_ts=1739462384.714419&cid=C32M8FP1V>\n+\n+## Goals\n+\n+- Discourage the use of `kubernetes_groups` and `kubernetes_users` fields from\n+role with custom values in favor of a wildcard (mapping to a new config value).\n+- Clarify / Improve documentation for the various ways to setup Kubernetes in\n+  Teleport.\n+\n+## Proposal\n+\n+### Background\n+\n+Currently, when enrolling a Kubernetes cluster and setting it up to use the\n+group `system:masters`, everything works as expected (except on GKE Autopilot\n+where this group is forbidden).\n+Teleport is setup to impersonate to yield reduced permissions to the user\n+based on the `kubernetes_resources` and `kubernetes_label` fields from the\n+Teleport role.\n+\n+### Prior work\n+\n+While initially planned to be included in this RFD, due to customer requests,\n+the following has already been implemented and shipped:\n+\n+- Support arbitrary resources, including CRDs #54426\n+- Simplify Namespace/Kind behavior #54938\n+- Handle all known resources on the Teleport side #55099\n+\n+Given this, as RBAC has already been simplified quite a lot, a scoped down\n+version of the proposal would be to focus on new installs without impacting\n+existing customers.\n+\n+### Wildcard `kubernetes_groups`\n+\n+To streamline the role setup and management, we will implement a new special\n+value, a wildcard `*` for the `kubernetes_groups` field in Teleport roles.\n+This role will map to a configuration value and will fallback to\n+`system:masters` in case it is not set. This will allow the vast majority of\n+users to access all features.\n+\n+Examples:\n+\n+- Configured cluster admin set to `teleport-cluster-admin`\n+- `kubernetes_groups` set to `['*']` in the role\n+- The user will be impersonated as `teleport-cluster-admin` when\n+  accessing the cluster.\n+\n+- No configuration set\n+- `kubernetes_groups` set to `['*']` in the role\n+- The user will be impersonated as `system:masters` when accessing the cluster.\n+\n+- Configured cluster admin set to `teleport-cluster-admin`\n+- `kubernetes_groups` set to `['privileged-group']` in the role\n+- The user will be impersonated as `privileged-group` when accessing the cluster.\n+\n+#### Downgrade / Backwards compatibility\n+\n+As we add a new `wildcard` which is not a valid value in Kubernetes for a\n+group, but is a valid value in Teleport, we don't need to bump the role version\n+and we don't need to apply specific downgrade logic. Older agents will try to\n+impersonate the `*` role which will result in no access, which is what we\n+would expect from an explicit downgrade logic.\n+\n+### Authoritative RBAC Documentation\n+\n+To simplify initial setup and long-term management, we'll update the\n+documentation to encourage users to use the wildcard for `kubernetes_groups` that\n+will be map to a configuration value.\n+That configuration value will be a cluster admin group created by provisioning\n+scripts or auto-discovery.\n+This will allow users to avoid the complexity of managing RBAC in multiple\n+places, avoid confusion around the `exec` subresource.\n+While we won't change or remove the `kubernetes_groups` and `kubernetes_users`\n+fields, we will discourage their use, allowing existing customers as well as\n+advanced users to continue leveraging the underlying Kubernetes RBAC for more\n+special use cases.\n+\n+### Configuration\n+\n+To know which group to use when mapping the wildcard `*` `kubernetes_groups`,\n+we will introduce a new configuration value, `cluster_admin_group`.\n+\n+This value will default to `system:masters` if not set.\n+\n+Example:\n+\n+```yaml\n+kubernetes_service:\n+  enabled: true\n+  cluster_admin_group: teleport-cluster-admin\n+  listen_addr: 0.0.0.0:3026\n+```\n+\n+### Provisioning\n+\n+To enable easy setup, provisioning methods will be updated to create an\n+cluster admin ClusterRole as well as a ClusterRoleBinding with a known group\n+name.\n+\n+#### Helm Chart\n+\n+The Helm Chart will provide the ability to specify custom names for all\n+resources, (clusterrole, clusterrolebinding) and for the Group.\n+\n+Example:\n+\n+```yaml\n+roles: kube,app,discovery\n+authToken: foo\n+proxyAddr: example.devteleport.com:443\n+kubeClusterName: myCluster\n+rbac:\n+  adminClusterRoleName: teleport-agent-cluster-admin\n+  adminClusterRoleBindingName: teleport-agent-cluster-admin\n+  adminGroupName: teleport-agent-cluster-admin\n+```\n+\n+The helm chart will populate the configmap with the new configuration value to\n+map the wildcard `kubernetes_groups` to the provided group name.\n+\n+#### Provision Script\n+\n+To adjust the values when provisioning with the provided script, environment\n+variables will be used to follow the existing pattern.\n+\n+Example:\n+\n+```bash\n+TELEPORT_KUBE_ADMIN_GROUP=teleport-cluster-admin ./get-kubeconfig.sh\n+```\n+\n+#### Auto Discovery\n+\n+##### EKS / AKS\n+\n+For both EKS and AKS, auto-discovery will be updated to create the proper admin\n+roles/bindings.\n+\n+##### GKE\n+\n+For GKE, we will need to change the documented GCP IAM role to enable admin\n+privileges.\n+\n+#### Auto-update\n+\n+Auto-update will not attempt to apply the new model, with the assumption that\n+existing setups are already working.\n+\n+### UX\n+\n+#### Exec confusion\n+\n+As the underlying Kubernetes RBAC gets discouraged, it will help with the\n+confusion around _exec_ being allowed with a `get` verb is gone.\n+Teleport uses a dedicated verb to control access to `exec`.\n+\n+#### Resource enrollment UI\n+\n+On the Web UI, the initial page generates a _Helm_ command line.\n+\n+After enrollment, a test page is shown, prompting for a `kubernetes_groups`\n+value, which defaults to the user's trait.\n+This step will be updated to verify the underlying Kubernetes RBAC permissions\n+and notify the user if the impersonation doesn't have sufficient\n+permissions to be authoritative.\n+\n+#### Role Editor\n+\n+The Web UI Role Editor will move the `kubernetes_groups` and `kubernetes_users`\n+based on the role version dropdown to be less prominent (currently they are\n+the first thing shown). They will still be available under a \"summary\" toggle,\n+folded by default, to update as needed for advanced use cases and existing\n+customers.\n+\n+- https://github.com/gravitational/teleport/blob/22eb8c6645909a26d1493d01d291e222a87b35e6/web/packages/teleport/src/Roles/RoleEditor/StandardEditor/Resources.tsx#L291-L321\n+\n+#### Error management\n+\n+The error messages when using `kubectl` will be improved to include a link to\n+the documentation and more details on what is expected. This will help with\n+initial custom setups that skipped the provided provisioning scripts.\n+\n+#### New preset role\n+\n+To help onboarding, as currently no preset role grants Kubernetes access,\n+a new preset role will be added, `kube-editor`, which will have wildcard access",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2219942068",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 56214,
        "pr_file": "rfd/0219-k8s-rbac-simplification.md",
        "discussion_id": "2219942068",
        "commented_code": "@@ -0,0 +1,294 @@\n+---\n+authors: Guillaume Charmes (guillaume.charmes@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 0219 - Kubernetes RBAC Simplification\n+\n+## Required Approvers\n+\n+- Engineering: @rosstimothy && @hugoShaka && @tigrato\n+Product: klizhentas\n+\n+## What\n+\n+The purpose of this RFD is to propose a simplification of the Kubernetes\n+RBAC (Role-Based Access Control) within the Teleport project.\n+\n+The goal is to streamline the user experience and reduce the complexity of\n+getting up and running on day 1 and managing permissions later on.\n+\n+## Why\n+\n+Today, the Kubernetes RBAC in Teleport is complex and can be difficult for\n+users to manage.\n+A proper setup requires some external Kubernetes config and matching role\n+setup.\n+This complexity leads to misconfigurations and security issues.\n+\n+Simplifying the RBAC model will help improve usability and security.\n+\n+### References\n+\n+A common issue currently is the un-intuitive result of complex rule sets and\n+more critically, difficult to get setup on day 1.\n+\n+- @klizhentas struggling to setup a cluster following the `self-hosted` flow:\n+  (internal) <https://gravitational.slack.com/archives/C03SULRAAG3/p1715394587181739>\n+- Customer confusion on role resolution:\n+  - <https://github.com/gravitational/teleport/issues/45475>\n+  - (internal) <https://goteleport.slack.com/archives/C0582MBSMHN/p1738187497666819>\n+- Unexpected `exec` grant on read-only user:\n+  (internal) <https://gravitational.slack.com/archives/C32M8FP1V/p1739462454321459?thread_ts=1739462384.714419&cid=C32M8FP1V>\n+\n+## Goals\n+\n+- Discourage the use of `kubernetes_groups` and `kubernetes_users` fields from\n+role with custom values in favor of a wildcard (mapping to a new config value).\n+- Clarify / Improve documentation for the various ways to setup Kubernetes in\n+  Teleport.\n+\n+## Proposal\n+\n+### Background\n+\n+Currently, when enrolling a Kubernetes cluster and setting it up to use the\n+group `system:masters`, everything works as expected (except on GKE Autopilot\n+where this group is forbidden).\n+Teleport is setup to impersonate to yield reduced permissions to the user\n+based on the `kubernetes_resources` and `kubernetes_label` fields from the\n+Teleport role.\n+\n+### Prior work\n+\n+While initially planned to be included in this RFD, due to customer requests,\n+the following has already been implemented and shipped:\n+\n+- Support arbitrary resources, including CRDs #54426\n+- Simplify Namespace/Kind behavior #54938\n+- Handle all known resources on the Teleport side #55099\n+\n+Given this, as RBAC has already been simplified quite a lot, a scoped down\n+version of the proposal would be to focus on new installs without impacting\n+existing customers.\n+\n+### Wildcard `kubernetes_groups`\n+\n+To streamline the role setup and management, we will implement a new special\n+value, a wildcard `*` for the `kubernetes_groups` field in Teleport roles.\n+This role will map to a configuration value and will fallback to\n+`system:masters` in case it is not set. This will allow the vast majority of\n+users to access all features.\n+\n+Examples:\n+\n+- Configured cluster admin set to `teleport-cluster-admin`\n+- `kubernetes_groups` set to `['*']` in the role\n+- The user will be impersonated as `teleport-cluster-admin` when\n+  accessing the cluster.\n+\n+- No configuration set\n+- `kubernetes_groups` set to `['*']` in the role\n+- The user will be impersonated as `system:masters` when accessing the cluster.\n+\n+- Configured cluster admin set to `teleport-cluster-admin`\n+- `kubernetes_groups` set to `['privileged-group']` in the role\n+- The user will be impersonated as `privileged-group` when accessing the cluster.\n+\n+#### Downgrade / Backwards compatibility\n+\n+As we add a new `wildcard` which is not a valid value in Kubernetes for a\n+group, but is a valid value in Teleport, we don't need to bump the role version\n+and we don't need to apply specific downgrade logic. Older agents will try to\n+impersonate the `*` role which will result in no access, which is what we\n+would expect from an explicit downgrade logic.\n+\n+### Authoritative RBAC Documentation\n+\n+To simplify initial setup and long-term management, we'll update the\n+documentation to encourage users to use the wildcard for `kubernetes_groups` that\n+will be map to a configuration value.\n+That configuration value will be a cluster admin group created by provisioning\n+scripts or auto-discovery.\n+This will allow users to avoid the complexity of managing RBAC in multiple\n+places, avoid confusion around the `exec` subresource.\n+While we won't change or remove the `kubernetes_groups` and `kubernetes_users`\n+fields, we will discourage their use, allowing existing customers as well as\n+advanced users to continue leveraging the underlying Kubernetes RBAC for more\n+special use cases.\n+\n+### Configuration\n+\n+To know which group to use when mapping the wildcard `*` `kubernetes_groups`,\n+we will introduce a new configuration value, `cluster_admin_group`.\n+\n+This value will default to `system:masters` if not set.\n+\n+Example:\n+\n+```yaml\n+kubernetes_service:\n+  enabled: true\n+  cluster_admin_group: teleport-cluster-admin\n+  listen_addr: 0.0.0.0:3026\n+```\n+\n+### Provisioning\n+\n+To enable easy setup, provisioning methods will be updated to create an\n+cluster admin ClusterRole as well as a ClusterRoleBinding with a known group\n+name.\n+\n+#### Helm Chart\n+\n+The Helm Chart will provide the ability to specify custom names for all\n+resources, (clusterrole, clusterrolebinding) and for the Group.\n+\n+Example:\n+\n+```yaml\n+roles: kube,app,discovery\n+authToken: foo\n+proxyAddr: example.devteleport.com:443\n+kubeClusterName: myCluster\n+rbac:\n+  adminClusterRoleName: teleport-agent-cluster-admin\n+  adminClusterRoleBindingName: teleport-agent-cluster-admin\n+  adminGroupName: teleport-agent-cluster-admin\n+```\n+\n+The helm chart will populate the configmap with the new configuration value to\n+map the wildcard `kubernetes_groups` to the provided group name.\n+\n+#### Provision Script\n+\n+To adjust the values when provisioning with the provided script, environment\n+variables will be used to follow the existing pattern.\n+\n+Example:\n+\n+```bash\n+TELEPORT_KUBE_ADMIN_GROUP=teleport-cluster-admin ./get-kubeconfig.sh\n+```\n+\n+#### Auto Discovery\n+\n+##### EKS / AKS\n+\n+For both EKS and AKS, auto-discovery will be updated to create the proper admin\n+roles/bindings.\n+\n+##### GKE\n+\n+For GKE, we will need to change the documented GCP IAM role to enable admin\n+privileges.\n+\n+#### Auto-update\n+\n+Auto-update will not attempt to apply the new model, with the assumption that\n+existing setups are already working.\n+\n+### UX\n+\n+#### Exec confusion\n+\n+As the underlying Kubernetes RBAC gets discouraged, it will help with the\n+confusion around _exec_ being allowed with a `get` verb is gone.\n+Teleport uses a dedicated verb to control access to `exec`.\n+\n+#### Resource enrollment UI\n+\n+On the Web UI, the initial page generates a _Helm_ command line.\n+\n+After enrollment, a test page is shown, prompting for a `kubernetes_groups`\n+value, which defaults to the user's trait.\n+This step will be updated to verify the underlying Kubernetes RBAC permissions\n+and notify the user if the impersonation doesn't have sufficient\n+permissions to be authoritative.\n+\n+#### Role Editor\n+\n+The Web UI Role Editor will move the `kubernetes_groups` and `kubernetes_users`\n+based on the role version dropdown to be less prominent (currently they are\n+the first thing shown). They will still be available under a \"summary\" toggle,\n+folded by default, to update as needed for advanced use cases and existing\n+customers.\n+\n+- https://github.com/gravitational/teleport/blob/22eb8c6645909a26d1493d01d291e222a87b35e6/web/packages/teleport/src/Roles/RoleEditor/StandardEditor/Resources.tsx#L291-L321\n+\n+#### Error management\n+\n+The error messages when using `kubectl` will be improved to include a link to\n+the documentation and more details on what is expected. This will help with\n+initial custom setups that skipped the provided provisioning scripts.\n+\n+#### New preset role\n+\n+To help onboarding, as currently no preset role grants Kubernetes access,\n+a new preset role will be added, `kube-editor`, which will have wildcard access",
        "comment_created_at": "2025-07-21T18:23:15+00:00",
        "comment_author": "rosstimothy",
        "comment_body": "The alternative to a new preset role is to require users create the Teleport Role themselves with the required permissions to enroll a new cluster as is currently the case today correct?",
        "pr_file_module": null
      },
      {
        "comment_id": "2220240284",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 56214,
        "pr_file": "rfd/0219-k8s-rbac-simplification.md",
        "discussion_id": "2219942068",
        "commented_code": "@@ -0,0 +1,294 @@\n+---\n+authors: Guillaume Charmes (guillaume.charmes@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 0219 - Kubernetes RBAC Simplification\n+\n+## Required Approvers\n+\n+- Engineering: @rosstimothy && @hugoShaka && @tigrato\n+Product: klizhentas\n+\n+## What\n+\n+The purpose of this RFD is to propose a simplification of the Kubernetes\n+RBAC (Role-Based Access Control) within the Teleport project.\n+\n+The goal is to streamline the user experience and reduce the complexity of\n+getting up and running on day 1 and managing permissions later on.\n+\n+## Why\n+\n+Today, the Kubernetes RBAC in Teleport is complex and can be difficult for\n+users to manage.\n+A proper setup requires some external Kubernetes config and matching role\n+setup.\n+This complexity leads to misconfigurations and security issues.\n+\n+Simplifying the RBAC model will help improve usability and security.\n+\n+### References\n+\n+A common issue currently is the un-intuitive result of complex rule sets and\n+more critically, difficult to get setup on day 1.\n+\n+- @klizhentas struggling to setup a cluster following the `self-hosted` flow:\n+  (internal) <https://gravitational.slack.com/archives/C03SULRAAG3/p1715394587181739>\n+- Customer confusion on role resolution:\n+  - <https://github.com/gravitational/teleport/issues/45475>\n+  - (internal) <https://goteleport.slack.com/archives/C0582MBSMHN/p1738187497666819>\n+- Unexpected `exec` grant on read-only user:\n+  (internal) <https://gravitational.slack.com/archives/C32M8FP1V/p1739462454321459?thread_ts=1739462384.714419&cid=C32M8FP1V>\n+\n+## Goals\n+\n+- Discourage the use of `kubernetes_groups` and `kubernetes_users` fields from\n+role with custom values in favor of a wildcard (mapping to a new config value).\n+- Clarify / Improve documentation for the various ways to setup Kubernetes in\n+  Teleport.\n+\n+## Proposal\n+\n+### Background\n+\n+Currently, when enrolling a Kubernetes cluster and setting it up to use the\n+group `system:masters`, everything works as expected (except on GKE Autopilot\n+where this group is forbidden).\n+Teleport is setup to impersonate to yield reduced permissions to the user\n+based on the `kubernetes_resources` and `kubernetes_label` fields from the\n+Teleport role.\n+\n+### Prior work\n+\n+While initially planned to be included in this RFD, due to customer requests,\n+the following has already been implemented and shipped:\n+\n+- Support arbitrary resources, including CRDs #54426\n+- Simplify Namespace/Kind behavior #54938\n+- Handle all known resources on the Teleport side #55099\n+\n+Given this, as RBAC has already been simplified quite a lot, a scoped down\n+version of the proposal would be to focus on new installs without impacting\n+existing customers.\n+\n+### Wildcard `kubernetes_groups`\n+\n+To streamline the role setup and management, we will implement a new special\n+value, a wildcard `*` for the `kubernetes_groups` field in Teleport roles.\n+This role will map to a configuration value and will fallback to\n+`system:masters` in case it is not set. This will allow the vast majority of\n+users to access all features.\n+\n+Examples:\n+\n+- Configured cluster admin set to `teleport-cluster-admin`\n+- `kubernetes_groups` set to `['*']` in the role\n+- The user will be impersonated as `teleport-cluster-admin` when\n+  accessing the cluster.\n+\n+- No configuration set\n+- `kubernetes_groups` set to `['*']` in the role\n+- The user will be impersonated as `system:masters` when accessing the cluster.\n+\n+- Configured cluster admin set to `teleport-cluster-admin`\n+- `kubernetes_groups` set to `['privileged-group']` in the role\n+- The user will be impersonated as `privileged-group` when accessing the cluster.\n+\n+#### Downgrade / Backwards compatibility\n+\n+As we add a new `wildcard` which is not a valid value in Kubernetes for a\n+group, but is a valid value in Teleport, we don't need to bump the role version\n+and we don't need to apply specific downgrade logic. Older agents will try to\n+impersonate the `*` role which will result in no access, which is what we\n+would expect from an explicit downgrade logic.\n+\n+### Authoritative RBAC Documentation\n+\n+To simplify initial setup and long-term management, we'll update the\n+documentation to encourage users to use the wildcard for `kubernetes_groups` that\n+will be map to a configuration value.\n+That configuration value will be a cluster admin group created by provisioning\n+scripts or auto-discovery.\n+This will allow users to avoid the complexity of managing RBAC in multiple\n+places, avoid confusion around the `exec` subresource.\n+While we won't change or remove the `kubernetes_groups` and `kubernetes_users`\n+fields, we will discourage their use, allowing existing customers as well as\n+advanced users to continue leveraging the underlying Kubernetes RBAC for more\n+special use cases.\n+\n+### Configuration\n+\n+To know which group to use when mapping the wildcard `*` `kubernetes_groups`,\n+we will introduce a new configuration value, `cluster_admin_group`.\n+\n+This value will default to `system:masters` if not set.\n+\n+Example:\n+\n+```yaml\n+kubernetes_service:\n+  enabled: true\n+  cluster_admin_group: teleport-cluster-admin\n+  listen_addr: 0.0.0.0:3026\n+```\n+\n+### Provisioning\n+\n+To enable easy setup, provisioning methods will be updated to create an\n+cluster admin ClusterRole as well as a ClusterRoleBinding with a known group\n+name.\n+\n+#### Helm Chart\n+\n+The Helm Chart will provide the ability to specify custom names for all\n+resources, (clusterrole, clusterrolebinding) and for the Group.\n+\n+Example:\n+\n+```yaml\n+roles: kube,app,discovery\n+authToken: foo\n+proxyAddr: example.devteleport.com:443\n+kubeClusterName: myCluster\n+rbac:\n+  adminClusterRoleName: teleport-agent-cluster-admin\n+  adminClusterRoleBindingName: teleport-agent-cluster-admin\n+  adminGroupName: teleport-agent-cluster-admin\n+```\n+\n+The helm chart will populate the configmap with the new configuration value to\n+map the wildcard `kubernetes_groups` to the provided group name.\n+\n+#### Provision Script\n+\n+To adjust the values when provisioning with the provided script, environment\n+variables will be used to follow the existing pattern.\n+\n+Example:\n+\n+```bash\n+TELEPORT_KUBE_ADMIN_GROUP=teleport-cluster-admin ./get-kubeconfig.sh\n+```\n+\n+#### Auto Discovery\n+\n+##### EKS / AKS\n+\n+For both EKS and AKS, auto-discovery will be updated to create the proper admin\n+roles/bindings.\n+\n+##### GKE\n+\n+For GKE, we will need to change the documented GCP IAM role to enable admin\n+privileges.\n+\n+#### Auto-update\n+\n+Auto-update will not attempt to apply the new model, with the assumption that\n+existing setups are already working.\n+\n+### UX\n+\n+#### Exec confusion\n+\n+As the underlying Kubernetes RBAC gets discouraged, it will help with the\n+confusion around _exec_ being allowed with a `get` verb is gone.\n+Teleport uses a dedicated verb to control access to `exec`.\n+\n+#### Resource enrollment UI\n+\n+On the Web UI, the initial page generates a _Helm_ command line.\n+\n+After enrollment, a test page is shown, prompting for a `kubernetes_groups`\n+value, which defaults to the user's trait.\n+This step will be updated to verify the underlying Kubernetes RBAC permissions\n+and notify the user if the impersonation doesn't have sufficient\n+permissions to be authoritative.\n+\n+#### Role Editor\n+\n+The Web UI Role Editor will move the `kubernetes_groups` and `kubernetes_users`\n+based on the role version dropdown to be less prominent (currently they are\n+the first thing shown). They will still be available under a \"summary\" toggle,\n+folded by default, to update as needed for advanced use cases and existing\n+customers.\n+\n+- https://github.com/gravitational/teleport/blob/22eb8c6645909a26d1493d01d291e222a87b35e6/web/packages/teleport/src/Roles/RoleEditor/StandardEditor/Resources.tsx#L291-L321\n+\n+#### Error management\n+\n+The error messages when using `kubectl` will be improved to include a link to\n+the documentation and more details on what is expected. This will help with\n+initial custom setups that skipped the provided provisioning scripts.\n+\n+#### New preset role\n+\n+To help onboarding, as currently no preset role grants Kubernetes access,\n+a new preset role will be added, `kube-editor`, which will have wildcard access",
        "comment_created_at": "2025-07-21T20:26:42+00:00",
        "comment_author": "creack",
        "comment_body": "Correct. Another alternative may be to update an existing preset role, but that comes with it's own set of drawbacks (different behavior between fresh install and upgrades)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2310361102",
    "pr_number": 56214,
    "pr_file": "rfd/0219-k8s-rbac-simplification.md",
    "created_at": "2025-08-29T14:40:09+00:00",
    "commented_code": "+---\n+authors: Guillaume Charmes (guillaume.charmes@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 0219 - Kubernetes RBAC Simplification\n+\n+## Required Approvers\n+\n+- Engineering: @rosstimothy && @hugoShaka && @tigrato\n+Product: klizhentas\n+\n+## What\n+\n+The purpose of this RFD is to propose a simplification of the Kubernetes\n+RBAC (Role-Based Access Control) within the Teleport project.\n+\n+The goal is to streamline the user experience and reduce the complexity of\n+getting up and running on day 1 and managing permissions later on.\n+\n+## Why\n+\n+Today, the Kubernetes RBAC in Teleport is complex and can be difficult for\n+users to manage.\n+A proper setup requires some external Kubernetes config and matching role\n+setup.\n+This complexity leads to misconfigurations and security issues.\n+\n+Simplifying the RBAC model will help improve usability and security.\n+\n+### References\n+\n+A common issue currently is the un-intuitive result of complex rule sets and\n+more critically, difficult to get setup on day 1.\n+\n+- @klizhentas struggling to setup a cluster following the `self-hosted` flow:\n+  (internal) <https://gravitational.slack.com/archives/C03SULRAAG3/p1715394587181739>\n+- Customer confusion on role resolution:\n+  - <https://github.com/gravitational/teleport/issues/45475>\n+  - (internal) <https://goteleport.slack.com/archives/C0582MBSMHN/p1738187497666819>\n+- Unexpected `exec` grant on read-only user:\n+  (internal) <https://gravitational.slack.com/archives/C32M8FP1V/p1739462454321459?thread_ts=1739462384.714419&cid=C32M8FP1V>\n+\n+## Goal\n+\n+Provide preset roles that can be used to get started quickly.\n+\n+## Proposal\n+\n+### Prior work\n+\n+While initially planned to be included in this RFD, due to customer requests,\n+the following has already been implemented and shipped:\n+\n+- Support arbitrary resources, including CRDs #54426\n+- Simplify Namespace/Kind behavior #54938\n+- Handle all known resources on the Teleport side #55099\n+\n+Given this, as RBAC has already been simplified quite a lot, a scoped down\n+version of the proposal would be to focus on new installs without impacting\n+existing customers.\n+\n+### Preset roles\n+\n+#### Background\n+\n+Originally, Teleport preset roles were inspired by Kubernetes roles,\n+specifically, `edit`, `cluster-admin` and `view`.\n+\n+- `cluster-admin` allows everything everywhere.\n+- `edit` allows CRUD on most builtin resources, but not administrative\n+  resources.\n+  - get/list/watch pods (including attach, exec, portforward and proxy),\n+    secrets and services/proxy\n+  - impersonate service accounts\n+  - create/delete/deletecollection/patch/update pods (including exec/attach/\n+    portforward/proxy)\n+  - create pods/evictions\n+  - create/delete/deletecollection/patch/update configmaps, events,\n+    persistentvolumeclaims, replicationcontrollers (including scale), secrets,\n+    serviceaccounts, services (including proxy)\n+  - create serviceaccounts/token\n+  - create/delete/deletecollection/patch/update deployments (including\n+    rollback, scale), replicasets (including scale), statefulsets (including\n+    scale), ingresses, networkpolicies\n+  - create/delete/deletecollection/patch/update horizontalpodautoscalers, cronjobs,\n+    jobs, poddisruptionbudgets, leases\n+  - get/list/watch controllerrevisions, daemonsets, deployments, replicasets,\n+    statefulsets, horizontalpodautoscalers, cronjobs, jobs, poddisruptionbudgets,\n+    ingresses, networkpolicies, leases\n+- `view` allows read-only access to most builtin resources.\n+  - get/list/watch pods, configmaps, endpoints, persistentvolumeclaims,\n+    replicationcontrollers (including scale), serviceaccounts, services,\n+    bindings, events, limitranges, namespaces, resourcequotas, endpointslices,\n+    controllerrevisions, daemonset, deployments, replicasets, statefulsets,\n+    horizontalpodautoscalers, cronjobs, jobs, poddisruptionbudgets, ingresses,\n+    networkpolicies, leases\n+\n+This resulted in the following Teleport roles:\n+\n+- `editor`, which maps to `cluster-admin` and can do everything.\n+- `access`, which maps to `edit` and can do most CRUD operations.\n+- `auditor`, which maps to `view` and can do read-only operations.\n+\n+#### New Teleport preset roles\n+\n+In order to be consistent and allow for seamless use of Kubernetes within\n+Teleport, we will introduce the following new preset roles:\n+\n+- `kube-access`: Maps to the Kubernetes preset `edit`. Can CRUD most basic\n+  builtin resources and read some limited administrative resources.\n+  This would be used in conjunction with the `access` Teleport role to grant\n+  most non-administrative access to users.\n+- `kube-editor`: Maps to the Kubernetes preset `cluster-admin`. Provides full\n+  access to all Kubernetes resources, including CRDs.\n+  This would be used in conjunction with the `editor` Teleport role to grant\n+  full administrative access to users.\n+- `kube-auditor`: Maps the the Kubernetes preset `view`. Provides read-only\n+  access to some Kubernetes resources.\n+  This would be used in conjunction with the `auditor` Teleport role to grant\n+  read-only access to users.",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2310361102",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 56214,
        "pr_file": "rfd/0219-k8s-rbac-simplification.md",
        "discussion_id": "2310361102",
        "commented_code": "@@ -0,0 +1,370 @@\n+---\n+authors: Guillaume Charmes (guillaume.charmes@goteleport.com)\n+state: draft\n+---\n+\n+# RFD 0219 - Kubernetes RBAC Simplification\n+\n+## Required Approvers\n+\n+- Engineering: @rosstimothy && @hugoShaka && @tigrato\n+Product: klizhentas\n+\n+## What\n+\n+The purpose of this RFD is to propose a simplification of the Kubernetes\n+RBAC (Role-Based Access Control) within the Teleport project.\n+\n+The goal is to streamline the user experience and reduce the complexity of\n+getting up and running on day 1 and managing permissions later on.\n+\n+## Why\n+\n+Today, the Kubernetes RBAC in Teleport is complex and can be difficult for\n+users to manage.\n+A proper setup requires some external Kubernetes config and matching role\n+setup.\n+This complexity leads to misconfigurations and security issues.\n+\n+Simplifying the RBAC model will help improve usability and security.\n+\n+### References\n+\n+A common issue currently is the un-intuitive result of complex rule sets and\n+more critically, difficult to get setup on day 1.\n+\n+- @klizhentas struggling to setup a cluster following the `self-hosted` flow:\n+  (internal) <https://gravitational.slack.com/archives/C03SULRAAG3/p1715394587181739>\n+- Customer confusion on role resolution:\n+  - <https://github.com/gravitational/teleport/issues/45475>\n+  - (internal) <https://goteleport.slack.com/archives/C0582MBSMHN/p1738187497666819>\n+- Unexpected `exec` grant on read-only user:\n+  (internal) <https://gravitational.slack.com/archives/C32M8FP1V/p1739462454321459?thread_ts=1739462384.714419&cid=C32M8FP1V>\n+\n+## Goal\n+\n+Provide preset roles that can be used to get started quickly.\n+\n+## Proposal\n+\n+### Prior work\n+\n+While initially planned to be included in this RFD, due to customer requests,\n+the following has already been implemented and shipped:\n+\n+- Support arbitrary resources, including CRDs #54426\n+- Simplify Namespace/Kind behavior #54938\n+- Handle all known resources on the Teleport side #55099\n+\n+Given this, as RBAC has already been simplified quite a lot, a scoped down\n+version of the proposal would be to focus on new installs without impacting\n+existing customers.\n+\n+### Preset roles\n+\n+#### Background\n+\n+Originally, Teleport preset roles were inspired by Kubernetes roles,\n+specifically, `edit`, `cluster-admin` and `view`.\n+\n+- `cluster-admin` allows everything everywhere.\n+- `edit` allows CRUD on most builtin resources, but not administrative\n+  resources.\n+  - get/list/watch pods (including attach, exec, portforward and proxy),\n+    secrets and services/proxy\n+  - impersonate service accounts\n+  - create/delete/deletecollection/patch/update pods (including exec/attach/\n+    portforward/proxy)\n+  - create pods/evictions\n+  - create/delete/deletecollection/patch/update configmaps, events,\n+    persistentvolumeclaims, replicationcontrollers (including scale), secrets,\n+    serviceaccounts, services (including proxy)\n+  - create serviceaccounts/token\n+  - create/delete/deletecollection/patch/update deployments (including\n+    rollback, scale), replicasets (including scale), statefulsets (including\n+    scale), ingresses, networkpolicies\n+  - create/delete/deletecollection/patch/update horizontalpodautoscalers, cronjobs,\n+    jobs, poddisruptionbudgets, leases\n+  - get/list/watch controllerrevisions, daemonsets, deployments, replicasets,\n+    statefulsets, horizontalpodautoscalers, cronjobs, jobs, poddisruptionbudgets,\n+    ingresses, networkpolicies, leases\n+- `view` allows read-only access to most builtin resources.\n+  - get/list/watch pods, configmaps, endpoints, persistentvolumeclaims,\n+    replicationcontrollers (including scale), serviceaccounts, services,\n+    bindings, events, limitranges, namespaces, resourcequotas, endpointslices,\n+    controllerrevisions, daemonset, deployments, replicasets, statefulsets,\n+    horizontalpodautoscalers, cronjobs, jobs, poddisruptionbudgets, ingresses,\n+    networkpolicies, leases\n+\n+This resulted in the following Teleport roles:\n+\n+- `editor`, which maps to `cluster-admin` and can do everything.\n+- `access`, which maps to `edit` and can do most CRUD operations.\n+- `auditor`, which maps to `view` and can do read-only operations.\n+\n+#### New Teleport preset roles\n+\n+In order to be consistent and allow for seamless use of Kubernetes within\n+Teleport, we will introduce the following new preset roles:\n+\n+- `kube-access`: Maps to the Kubernetes preset `edit`. Can CRUD most basic\n+  builtin resources and read some limited administrative resources.\n+  This would be used in conjunction with the `access` Teleport role to grant\n+  most non-administrative access to users.\n+- `kube-editor`: Maps to the Kubernetes preset `cluster-admin`. Provides full\n+  access to all Kubernetes resources, including CRDs.\n+  This would be used in conjunction with the `editor` Teleport role to grant\n+  full administrative access to users.\n+- `kube-auditor`: Maps the the Kubernetes preset `view`. Provides read-only\n+  access to some Kubernetes resources.\n+  This would be used in conjunction with the `auditor` Teleport role to grant\n+  read-only access to users.",
        "comment_created_at": "2025-08-29T14:40:09+00:00",
        "comment_author": "hugoShaka",
        "comment_body": "As this section is discussing consistency, I wonder if we should be consistent with the way we manage day-0 SSH access today.\r\n\r\nWe have the `access` role with a wildcard selector and we use the `logins` user traits to grant access to specific users. Database and windows access also work the same way with `database_users` and `windows_logins`.\r\n\r\nOnce the Kubernetes Bindings described in this RFD are created, we can provide access with the existing `access` preset and user traits, without creating new roles.\r\n\r\nThis approach would have the following advantages:\r\n- consistency with the other protocols which don't have their dedicated presets\r\n- reduce the probability of users shooting themselves in the foot with the awkward kube_group + kube_resoucres interactions\r\n- leaner and reduces the number of Teleport presets\r\n\r\nThe guides would tell day 0 users to do:\r\n\r\n```bash\r\ntctl users add hugo --logins root --kubernetes-group teleport:preset:editor --roles=access\r\n```\r\n\r\nAnd they would have access by default.",
        "pr_file_module": null
      }
    ]
  }
]