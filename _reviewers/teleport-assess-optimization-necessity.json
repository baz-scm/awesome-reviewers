[
  {
    "discussion_id": "2310081509",
    "pr_number": 58421,
    "pr_file": "web/packages/teleport/src/Integrations/Enroll/Shared/FilterPanel.tsx",
    "created_at": "2025-08-29T12:49:22+00:00",
    "commented_code": "+/**\n+ * Teleport\n+ * Copyright (C) 2025  Gravitational, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+import { useEffect, useRef, useState } from 'react';\n+import styled from 'styled-components';\n+\n+import { Box, Flex } from 'design';\n+import { SortType } from 'design/DataTable/types';\n+import * as Icons from 'design/Icon';\n+import { MultiselectMenu } from 'shared/components/Controls/MultiselectMenu';\n+import { SortMenu } from 'shared/components/Controls/SortMenu';\n+\n+import { type IntegrationTag } from './common';\n+\n+export function FilterPanel({ integrationTagOptions, params, setParams }) {\n+  const { sort, kinds } = params;\n+\n+  const sortFieldOptions = [{ label: 'Name', value: 'name' }];\n+\n+  const defaultSort: SortType = { dir: 'ASC', fieldName: 'name' };\n+\n+  const activeSort = sort || defaultSort;\n+\n+  const activeSortFieldOption = sortFieldOptions.find(\n+    opt => opt.value === activeSort.fieldName\n+  );\n+\n+  function oppositeSort(sort: SortType): SortType {\n+    switch (sort?.dir) {\n+      case 'ASC':\n+        return { ...sort, dir: 'DESC' };\n+      case 'DESC':\n+        return { ...sort, dir: 'ASC' };\n+      default:\n+        return sort;\n+    }\n+  }\n+\n+  const onSortFieldChange = (value: string) => {\n+    setParams({ ...params, sort: { ...activeSort, fieldName: value } });\n+  };\n+\n+  const onSortOrderButtonClicked = () => {\n+    setParams({ ...params, sort: oppositeSort(activeSort) });\n+  };\n+\n+  function setSearch(search: string) {\n+    setParams({ ...params, search: search });\n+  }\n+\n+  return (\n+    <>\n+      <Box maxWidth=\"600px\" width=\"100%\">\n+        <DebouncedSearchInput\n+          onSearch={value => {\n+            setSearch(value);\n+          }}\n+          placeholder={'Search for integrations...'}\n+          initialValue={params.search || ''}\n+        />\n+      </Box>\n+      <Flex justifyContent=\"space-between\" minWidth=\"419px\">\n+        <Flex justifyContent=\"flex-start\">\n+          <MultiselectMenu\n+            options={integrationTagOptions}\n+            onChange={integrationTags =>\n+              setParams({ ...params, kinds: integrationTags as string[] })\n+            }\n+            selected={(kinds as IntegrationTag[]) || []}\n+            label=\"Integration Type\"\n+            tooltip=\"Filter by integration type\"\n+          />\n+        </Flex>\n+        <Flex justifyContent=\"flex-end\">\n+          <SortMenu\n+            current={{\n+              fieldName: activeSortFieldOption.value,\n+              dir: activeSort.dir,\n+            }}\n+            fields={sortFieldOptions}\n+            onChange={newSort => {\n+              if (newSort.dir !== activeSort.dir) {\n+                onSortOrderButtonClicked();\n+              }\n+              if (newSort.fieldName !== activeSort.fieldName) {\n+                onSortFieldChange(newSort.fieldName);\n+              }\n+            }}\n+          />\n+        </Flex>\n+      </Flex>\n+    </>\n+  );\n+}\n+\n+const DebouncedSearchInput = ({\n+  onSearch,\n+  placeholder = '',\n+  initialValue = '',\n+}: {\n+  onSearch: (searchValue: string) => void;\n+  placeholder?: string;\n+  initialValue?: string;\n+}) => {\n+  const [searchTerm, setSearchTerm] = useState(initialValue);\n+  const [debouncedTerm, setDebouncedTerm] = useState('');\n+  const isFirstRender = useRef(true);\n+\n+  useEffect(() => {\n+    const timer = setTimeout(() => {\n+      setDebouncedTerm(searchTerm);\n+    }, 350);\n+\n+    return () => clearTimeout(timer);\n+  }, [searchTerm]);\n+\n+  useEffect(() => {\n+    if (isFirstRender.current && debouncedTerm === '') {\n+      isFirstRender.current = false;\n+      return;\n+    }\n+\n+    onSearch(debouncedTerm);\n+  }, [debouncedTerm]);",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2310081509",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58421,
        "pr_file": "web/packages/teleport/src/Integrations/Enroll/Shared/FilterPanel.tsx",
        "discussion_id": "2310081509",
        "commented_code": "@@ -0,0 +1,201 @@\n+/**\n+ * Teleport\n+ * Copyright (C) 2025  Gravitational, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+import { useEffect, useRef, useState } from 'react';\n+import styled from 'styled-components';\n+\n+import { Box, Flex } from 'design';\n+import { SortType } from 'design/DataTable/types';\n+import * as Icons from 'design/Icon';\n+import { MultiselectMenu } from 'shared/components/Controls/MultiselectMenu';\n+import { SortMenu } from 'shared/components/Controls/SortMenu';\n+\n+import { type IntegrationTag } from './common';\n+\n+export function FilterPanel({ integrationTagOptions, params, setParams }) {\n+  const { sort, kinds } = params;\n+\n+  const sortFieldOptions = [{ label: 'Name', value: 'name' }];\n+\n+  const defaultSort: SortType = { dir: 'ASC', fieldName: 'name' };\n+\n+  const activeSort = sort || defaultSort;\n+\n+  const activeSortFieldOption = sortFieldOptions.find(\n+    opt => opt.value === activeSort.fieldName\n+  );\n+\n+  function oppositeSort(sort: SortType): SortType {\n+    switch (sort?.dir) {\n+      case 'ASC':\n+        return { ...sort, dir: 'DESC' };\n+      case 'DESC':\n+        return { ...sort, dir: 'ASC' };\n+      default:\n+        return sort;\n+    }\n+  }\n+\n+  const onSortFieldChange = (value: string) => {\n+    setParams({ ...params, sort: { ...activeSort, fieldName: value } });\n+  };\n+\n+  const onSortOrderButtonClicked = () => {\n+    setParams({ ...params, sort: oppositeSort(activeSort) });\n+  };\n+\n+  function setSearch(search: string) {\n+    setParams({ ...params, search: search });\n+  }\n+\n+  return (\n+    <>\n+      <Box maxWidth=\"600px\" width=\"100%\">\n+        <DebouncedSearchInput\n+          onSearch={value => {\n+            setSearch(value);\n+          }}\n+          placeholder={'Search for integrations...'}\n+          initialValue={params.search || ''}\n+        />\n+      </Box>\n+      <Flex justifyContent=\"space-between\" minWidth=\"419px\">\n+        <Flex justifyContent=\"flex-start\">\n+          <MultiselectMenu\n+            options={integrationTagOptions}\n+            onChange={integrationTags =>\n+              setParams({ ...params, kinds: integrationTags as string[] })\n+            }\n+            selected={(kinds as IntegrationTag[]) || []}\n+            label=\"Integration Type\"\n+            tooltip=\"Filter by integration type\"\n+          />\n+        </Flex>\n+        <Flex justifyContent=\"flex-end\">\n+          <SortMenu\n+            current={{\n+              fieldName: activeSortFieldOption.value,\n+              dir: activeSort.dir,\n+            }}\n+            fields={sortFieldOptions}\n+            onChange={newSort => {\n+              if (newSort.dir !== activeSort.dir) {\n+                onSortOrderButtonClicked();\n+              }\n+              if (newSort.fieldName !== activeSort.fieldName) {\n+                onSortFieldChange(newSort.fieldName);\n+              }\n+            }}\n+          />\n+        </Flex>\n+      </Flex>\n+    </>\n+  );\n+}\n+\n+const DebouncedSearchInput = ({\n+  onSearch,\n+  placeholder = '',\n+  initialValue = '',\n+}: {\n+  onSearch: (searchValue: string) => void;\n+  placeholder?: string;\n+  initialValue?: string;\n+}) => {\n+  const [searchTerm, setSearchTerm] = useState(initialValue);\n+  const [debouncedTerm, setDebouncedTerm] = useState('');\n+  const isFirstRender = useRef(true);\n+\n+  useEffect(() => {\n+    const timer = setTimeout(() => {\n+      setDebouncedTerm(searchTerm);\n+    }, 350);\n+\n+    return () => clearTimeout(timer);\n+  }, [searchTerm]);\n+\n+  useEffect(() => {\n+    if (isFirstRender.current && debouncedTerm === '') {\n+      isFirstRender.current = false;\n+      return;\n+    }\n+\n+    onSearch(debouncedTerm);\n+  }, [debouncedTerm]);",
        "comment_created_at": "2025-08-29T12:49:22+00:00",
        "comment_author": "gzdunek",
        "comment_body": "Do we really need debouncing? There's around 30 items there, I'm not sure if this buys us anything.",
        "pr_file_module": null
      },
      {
        "comment_id": "2316598807",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58421,
        "pr_file": "web/packages/teleport/src/Integrations/Enroll/Shared/FilterPanel.tsx",
        "discussion_id": "2310081509",
        "commented_code": "@@ -0,0 +1,201 @@\n+/**\n+ * Teleport\n+ * Copyright (C) 2025  Gravitational, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+import { useEffect, useRef, useState } from 'react';\n+import styled from 'styled-components';\n+\n+import { Box, Flex } from 'design';\n+import { SortType } from 'design/DataTable/types';\n+import * as Icons from 'design/Icon';\n+import { MultiselectMenu } from 'shared/components/Controls/MultiselectMenu';\n+import { SortMenu } from 'shared/components/Controls/SortMenu';\n+\n+import { type IntegrationTag } from './common';\n+\n+export function FilterPanel({ integrationTagOptions, params, setParams }) {\n+  const { sort, kinds } = params;\n+\n+  const sortFieldOptions = [{ label: 'Name', value: 'name' }];\n+\n+  const defaultSort: SortType = { dir: 'ASC', fieldName: 'name' };\n+\n+  const activeSort = sort || defaultSort;\n+\n+  const activeSortFieldOption = sortFieldOptions.find(\n+    opt => opt.value === activeSort.fieldName\n+  );\n+\n+  function oppositeSort(sort: SortType): SortType {\n+    switch (sort?.dir) {\n+      case 'ASC':\n+        return { ...sort, dir: 'DESC' };\n+      case 'DESC':\n+        return { ...sort, dir: 'ASC' };\n+      default:\n+        return sort;\n+    }\n+  }\n+\n+  const onSortFieldChange = (value: string) => {\n+    setParams({ ...params, sort: { ...activeSort, fieldName: value } });\n+  };\n+\n+  const onSortOrderButtonClicked = () => {\n+    setParams({ ...params, sort: oppositeSort(activeSort) });\n+  };\n+\n+  function setSearch(search: string) {\n+    setParams({ ...params, search: search });\n+  }\n+\n+  return (\n+    <>\n+      <Box maxWidth=\"600px\" width=\"100%\">\n+        <DebouncedSearchInput\n+          onSearch={value => {\n+            setSearch(value);\n+          }}\n+          placeholder={'Search for integrations...'}\n+          initialValue={params.search || ''}\n+        />\n+      </Box>\n+      <Flex justifyContent=\"space-between\" minWidth=\"419px\">\n+        <Flex justifyContent=\"flex-start\">\n+          <MultiselectMenu\n+            options={integrationTagOptions}\n+            onChange={integrationTags =>\n+              setParams({ ...params, kinds: integrationTags as string[] })\n+            }\n+            selected={(kinds as IntegrationTag[]) || []}\n+            label=\"Integration Type\"\n+            tooltip=\"Filter by integration type\"\n+          />\n+        </Flex>\n+        <Flex justifyContent=\"flex-end\">\n+          <SortMenu\n+            current={{\n+              fieldName: activeSortFieldOption.value,\n+              dir: activeSort.dir,\n+            }}\n+            fields={sortFieldOptions}\n+            onChange={newSort => {\n+              if (newSort.dir !== activeSort.dir) {\n+                onSortOrderButtonClicked();\n+              }\n+              if (newSort.fieldName !== activeSort.fieldName) {\n+                onSortFieldChange(newSort.fieldName);\n+              }\n+            }}\n+          />\n+        </Flex>\n+      </Flex>\n+    </>\n+  );\n+}\n+\n+const DebouncedSearchInput = ({\n+  onSearch,\n+  placeholder = '',\n+  initialValue = '',\n+}: {\n+  onSearch: (searchValue: string) => void;\n+  placeholder?: string;\n+  initialValue?: string;\n+}) => {\n+  const [searchTerm, setSearchTerm] = useState(initialValue);\n+  const [debouncedTerm, setDebouncedTerm] = useState('');\n+  const isFirstRender = useRef(true);\n+\n+  useEffect(() => {\n+    const timer = setTimeout(() => {\n+      setDebouncedTerm(searchTerm);\n+    }, 350);\n+\n+    return () => clearTimeout(timer);\n+  }, [searchTerm]);\n+\n+  useEffect(() => {\n+    if (isFirstRender.current && debouncedTerm === '') {\n+      isFirstRender.current = false;\n+      return;\n+    }\n+\n+    onSearch(debouncedTerm);\n+  }, [debouncedTerm]);",
        "comment_created_at": "2025-09-02T16:25:52+00:00",
        "comment_author": "alexhemard",
        "comment_body": "Thinking it would if it's updating the URL parameters on change.\r\nReplacing it with DataTable.SearchInput would only update on submit, so it wouldn't be necessary",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2313691328",
    "pr_number": 58527,
    "pr_file": "web/packages/design/src/DataTable/Table.tsx",
    "created_at": "2025-09-01T11:25:57+00:00",
    "commented_code": "return <tbody>{rows}</tbody>;\n     }\n \n+    // if we provide infiniteScrollProps, we want to not render anything if\n+    // the fetch status is loading. this is so that the existing items dont dissapear\n+    // during the fetch, but also, we dont want the empty text to show while fetching\n+    // and lastly, the infinite scroll page will usually provide its own loading\n+    // indicator at the bottom of the component\n+    if (\n+      props.infiniteScrollProps &&\n+      props.infiniteScrollProps.fetchStatus === 'loading'",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2313691328",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58527,
        "pr_file": "web/packages/design/src/DataTable/Table.tsx",
        "discussion_id": "2313691328",
        "commented_code": "@@ -151,6 +151,18 @@ export default function Table<T>(props: TableProps<T>) {\n       return <tbody>{rows}</tbody>;\n     }\n \n+    // if we provide infiniteScrollProps, we want to not render anything if\n+    // the fetch status is loading. this is so that the existing items dont dissapear\n+    // during the fetch, but also, we dont want the empty text to show while fetching\n+    // and lastly, the infinite scroll page will usually provide its own loading\n+    // indicator at the bottom of the component\n+    if (\n+      props.infiniteScrollProps &&\n+      props.infiniteScrollProps.fetchStatus === 'loading'",
        "comment_created_at": "2025-09-01T11:25:57+00:00",
        "comment_author": "ryanclark",
        "comment_body": "```suggestion\n      props.infiniteScrollProps?.fetchStatus === 'loading'\n```",
        "pr_file_module": null
      }
    ]
  }
]