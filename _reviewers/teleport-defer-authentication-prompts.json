[
  {
    "discussion_id": "2319618036",
    "pr_number": 58575,
    "pr_file": "web/packages/teleterm/src/ui/Documents/DocumentsRenderer.tsx",
    "created_at": "2025-09-03T17:03:46+00:00",
    "commented_code": "topBarAccessRequestRef: MutableRefObject<HTMLDivElement>;\n }) {\n   const { workspacesService } = useAppContext();\n+  const isAnyDialogOpen = useStoreSelector('modalsService', state => {\n+    return !!state.regular || state.important.length > 0;\n+  });\n+  const isWindowVisible = useIsWindowVisibile();\n \n   function renderDocuments(documentsService: DocumentsService) {\n     return documentsService.getDocuments().map(doc => {\n       const isActiveDoc = workspacesService.isDocumentActive(doc.uri);\n-      return <MemoizedDocument doc={doc} visible={isActiveDoc} key={doc.uri} />;\n+      const document = <MemoizedDocument doc={doc} visible={isActiveDoc} />;\n+      const { kind } = doc;\n+      switch (kind) {\n+        case 'doc.authorize_web_session':\n+        case 'doc.access_requests':\n+        case 'doc.blank':\n+        case 'doc.cluster':\n+        case 'doc.connect_my_computer':\n+        case 'doc.vnet_diag_report':\n+        case 'doc.vnet_info':\n+        case 'doc.gateway':",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2319618036",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58575,
        "pr_file": "web/packages/teleterm/src/ui/Documents/DocumentsRenderer.tsx",
        "discussion_id": "2319618036",
        "commented_code": "@@ -59,11 +61,55 @@ export function DocumentsRenderer(props: {\n   topBarAccessRequestRef: MutableRefObject<HTMLDivElement>;\n }) {\n   const { workspacesService } = useAppContext();\n+  const isAnyDialogOpen = useStoreSelector('modalsService', state => {\n+    return !!state.regular || state.important.length > 0;\n+  });\n+  const isWindowVisible = useIsWindowVisibile();\n \n   function renderDocuments(documentsService: DocumentsService) {\n     return documentsService.getDocuments().map(doc => {\n       const isActiveDoc = workspacesService.isDocumentActive(doc.uri);\n-      return <MemoizedDocument doc={doc} visible={isActiveDoc} key={doc.uri} />;\n+      const document = <MemoizedDocument doc={doc} visible={isActiveDoc} />;\n+      const { kind } = doc;\n+      switch (kind) {\n+        case 'doc.authorize_web_session':\n+        case 'doc.access_requests':\n+        case 'doc.blank':\n+        case 'doc.cluster':\n+        case 'doc.connect_my_computer':\n+        case 'doc.vnet_diag_report':\n+        case 'doc.vnet_info':\n+        case 'doc.gateway':",
        "comment_created_at": "2025-09-03T17:03:46+00:00",
        "comment_author": "ravicious",
        "comment_body": "The more I think about it, the less I'm sure if we should do the whole `MountOnVisible` thing, at least when restoring previously opened tabs on app start.\r\n\r\nImagine that you're someone who mostly uses database gateways (the most common use case on macOS). Your workflow today is that you start the app, log in, reopen the tabs and you're ready to use the databases with 3rd-party apps.\r\n\r\nAfter this PR, you'll have to cycle through all open gateways to be able to use them.\r\n\r\n> This led to multiple per-session MFA prompts being triggered in a row, which caused them to fail (there is a mutex in the daemon, but maybe YubiKey needs some delay between prompts?).\r\n\r\nI just went through three modals in a row and none of them failed, I suppose it was maybe one of the regular failures that we see with tsh and Webauthn?\r\n\r\n---\r\n\r\nIt just feels like until someone complains about this behavior when per-session MFA is turned on, we shouldn't really change it. So in short we'd still terminate foreground sessions when the app enters background mode, but we wouldn't worry about visibility when mounting documents, neither when restoring tabs nor when exiting background mode. This also means ignoring the scenario described in https://github.com/gravitational/teleport/issues/54275#issuecomment-3233911937 until someone complains about it.\r\n\r\nWhat do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "2324475156",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58575,
        "pr_file": "web/packages/teleterm/src/ui/Documents/DocumentsRenderer.tsx",
        "discussion_id": "2319618036",
        "commented_code": "@@ -59,11 +61,55 @@ export function DocumentsRenderer(props: {\n   topBarAccessRequestRef: MutableRefObject<HTMLDivElement>;\n }) {\n   const { workspacesService } = useAppContext();\n+  const isAnyDialogOpen = useStoreSelector('modalsService', state => {\n+    return !!state.regular || state.important.length > 0;\n+  });\n+  const isWindowVisible = useIsWindowVisibile();\n \n   function renderDocuments(documentsService: DocumentsService) {\n     return documentsService.getDocuments().map(doc => {\n       const isActiveDoc = workspacesService.isDocumentActive(doc.uri);\n-      return <MemoizedDocument doc={doc} visible={isActiveDoc} key={doc.uri} />;\n+      const document = <MemoizedDocument doc={doc} visible={isActiveDoc} />;\n+      const { kind } = doc;\n+      switch (kind) {\n+        case 'doc.authorize_web_session':\n+        case 'doc.access_requests':\n+        case 'doc.blank':\n+        case 'doc.cluster':\n+        case 'doc.connect_my_computer':\n+        case 'doc.vnet_diag_report':\n+        case 'doc.vnet_info':\n+        case 'doc.gateway':",
        "comment_created_at": "2025-09-05T08:39:08+00:00",
        "comment_author": "gzdunek",
        "comment_body": ">I just went through three modals in a row and none of them failed, I suppose it was maybe one of the regular failures that we see with tsh and Webauthn?\r\n\r\nOh, the issue happens only for desktop sessions. \r\nI think it's because we don't guard their start with a mutex like for gateways, so it's possible to start multiple webuathn gouroutines at the same time. Although there's a mutex for the per-session MFA prompt, it guards only the Electron prompt. I tried to lock the entire `mfaPrompt.Run` but it results in an MFA response validation error \ud83e\udd14 \r\nAnyways, delaying mounting all tabs to solve this issue doesn't make much sense. \r\n\r\n>It just feels like until someone complains about this behavior when per-session MFA is turned on, we shouldn't really change it. So in short we'd still terminate foreground sessions when the app enters background mode, but we wouldn't worry about visibility when mounting documents, neither during restoring tabs nor when exiting background mode. This also means ignoring the scenario described in https://github.com/gravitational/teleport/issues/54275#issuecomment-3233911937 until someone complains about it.\r\n\r\nActually, the scenario described in the comment doesn\u2019t occur. Remounting the kube terminal document does not trigger a per-session MFA prompt, since the gateway is already running and no commands are sent to the local proxy.\r\n\r\nHowever, I believe we should still defer mounting certain documents until when they are `visible` - I mean `DocumentTerminal` and `DocumentDesktopSession`. \r\nYou can't use connections made by these documents outside the app (or at least you need to interact with that document first). This will improve the UX when restoring the previous session or reopening the window - we won't ask for the MFA if the user is not going to use these documents.\r\nOn the implementation side, I moved `ForegroundSession` lower in the components tree, so that it wraps only the terminal and desktop sessions. This will avoid delaying mounting `DocumentGatewayKube` which renders `DocumentTerminal` conditionally. \r\nI also got rid of the check for open dialogs, it was a bit convoluted and we can keep things simpler for now.",
        "pr_file_module": null
      }
    ]
  }
]