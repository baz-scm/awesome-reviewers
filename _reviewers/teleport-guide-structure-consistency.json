[
  {
    "discussion_id": "2307814459",
    "pr_number": 58441,
    "pr_file": "docs/pages/enroll-resources/database-access/enroll-google-cloud-databases/alloydb.mdx",
    "created_at": "2025-08-28T15:37:22+00:00",
    "commented_code": "+---\n+title: Database Access with AlloyDB\n+sidebar_label: AlloyDB\n+description: How to configure Teleport database access with AlloyDB.\n+labels:\n+ - how-to\n+ - zero-trust\n+---\n+\n+(!docs/pages/includes/database-access/db-introduction.mdx dbType=\"AlloyDB\" dbConfigure=\"with a service account\"!)\n+\n+## How it works\n+\n+(!docs/pages/includes/database-access/how-it-works/iam.mdx db=\"AlloyDB\" cloud=\"Google Cloud\"!)\n+\n+![Teleport Architecture for AlloyDB Access](../../../../img/database-access/guides/alloydb/architecture.png)\n+\n+## Prerequisites\n+\n+(!docs/pages/includes/edition-prereqs-tabs.mdx!)\n+\n+- Google Cloud account\n+- Command-line client `psql` installed and added to your system's `PATH` environment variable.\n+- A host, e.g., a Compute Engine instance, where you will run the Teleport Database\n+  Service\n+- (!docs/pages/includes/tctl.mdx!)\n+\n+## Step 1/9. Create a service account for the Teleport Database Service\n+\n+(!docs/pages/includes/database-access/gcp-create-service-account-for-db-service.mdx!)\n+\n+### Grant permissions\n+\n+The Teleport Database Service needs the following permissions to call appropriate Google Cloud APIs:\n+\n+```ini\n+# Used to generate client certificate\n+alloydb.clusters.generateClientCertificate\n+# Used to fetch connection information\n+alloydb.instances.connect\n+```\n+\n+You can create a custom IAM role with these permissions or use the predefined role \n+[`roles/alloydb.client` (Cloud AlloyDB Client)](https://cloud.google.com/alloydb/docs/reference/iam-roles-permissions), \n+which comes with some additional permissions.\n+\n+## Step 2/9. Create a service account for a database user\n+\n+Teleport uses service accounts to connect to AlloyDB databases.\n+\n+### Create a service account\n+\n+Go to the IAM & Admin [Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts)\n+page and create a new service account named \"alloydb-user\":\n+\n+![Create Service Account](../../../../img/database-access/guides/alloydb/create-user-service-account.png)\n+\n+Click \"Create and continue\".\n+\n+### Grant permissions\n+\n+The service account needs these permissions:\n+\n+```ini\n+alloydb.instances.connect\n+alloydb.users.login\n+serviceusage.services.use\n+```\n+\n+For least privilege, create and assign a custom IAM role containing exactly the permissions above. Alternatively, you may grant these [predefined roles](https://cloud.google.com/alloydb/docs/reference/iam-roles-permissions):\n+\n+* Cloud AlloyDB Database User (`roles/alloydb.databaseUser`)\n+* Cloud AlloyDB Client (`roles/alloydb.client`)\n+* [Service Usage Consumer (`roles/serviceusage.serviceUsageConsumer`)](https://cloud.google.com/service-usage/docs/access-control#serviceusage.serviceUsageConsumer)\n+\n+![Grant permissions to user Service Account](../../../../img/database-access/guides/alloydb/user-service-account-permissions.png)\n+\n+Click \"Done\".\n+\n+### Grant access to the service account\n+\n+The Teleport Database Service must be able to impersonate this service account.\n+Navigate to the \"alloydb-user\" service account overview page and select the\n+\"Principals with Access\" tab:\n+\n+![Select Principals with Access Tab](../../../../img/database-access/guides/alloydb/user-service-account-principals-with-access.png)\n+\n+Click \"Grant Access\" and add the \"teleport-db-service\" principal ID.\n+Select the \"Service Account Token Creator\" role and save the change:\n+\n+![Grant Service Account Token Creator to Database Service](../../../../img/database-access/guides/alloydb/user-service-account-grant-access.png)\n+\n+<Admonition type=\"note\" title=\"Service account permissions\">\n+  The \"Service Account Token Creator\" IAM role includes more permissions than\n+  the Teleport Database Service needs. To further restrict the service \n+  account, you can create a role that includes only the following permission:\n+  ```ini\n+  # Used to generate IAM auth tokens when connecting to a database instance.\n+  iam.serviceAccounts.getAccessToken\n+  ```\n+</Admonition>\n+\n+## Step 3/9. Configure your AlloyDB database\n+\n+Teleport uses [IAM database authentication](https://cloud.google.com/alloydb/docs/database-users/manage-iam-auth)\n+with AlloyDB instances.\n+\n+Navigate to your instance settings and enable the `alloydb.iam_authentication` flag under Advanced Configuration Options section.\n+\n+![Enable IAM Authentication](../../../../img/database-access/guides/alloydb/flag-iam-authentication-on.png)\n+\n+### Create a database user\n+\n+Now go back to the Users page of your AlloyDB instance and add a new user\n+account. In the sidebar, choose \"Cloud IAM\" authentication type and add the\n+\"alloydb-user\" service account that you created in\n+[the second step](#step-29-create-a-service-account-for-a-database-user):\n+\n+![Add AlloyDB User Account](../../../../img/database-access/guides/alloydb/add-user-account.png)\n+\n+Press \"Add\" and your Users table should look similar to this:\n+\n+![AlloyDB User Accounts Table](../../../../img/database-access/guides/alloydb/user-account-added.png)\n+\n+See [Manage IAM authentication](https://cloud.google.com/alloydb/docs/database-users/manage-iam-auth)\n+in Google Cloud documentation for more info.\n+\n+## Step 4/9. Install Teleport\n+\n+(!docs/pages/includes/install-linux.mdx!)\n+\n+## Step 5/9. Configure the Teleport Database Service",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2307814459",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58441,
        "pr_file": "docs/pages/enroll-resources/database-access/enroll-google-cloud-databases/alloydb.mdx",
        "discussion_id": "2307814459",
        "commented_code": "@@ -0,0 +1,307 @@\n+---\n+title: Database Access with AlloyDB\n+sidebar_label: AlloyDB\n+description: How to configure Teleport database access with AlloyDB.\n+labels:\n+ - how-to\n+ - zero-trust\n+---\n+\n+(!docs/pages/includes/database-access/db-introduction.mdx dbType=\"AlloyDB\" dbConfigure=\"with a service account\"!)\n+\n+## How it works\n+\n+(!docs/pages/includes/database-access/how-it-works/iam.mdx db=\"AlloyDB\" cloud=\"Google Cloud\"!)\n+\n+![Teleport Architecture for AlloyDB Access](../../../../img/database-access/guides/alloydb/architecture.png)\n+\n+## Prerequisites\n+\n+(!docs/pages/includes/edition-prereqs-tabs.mdx!)\n+\n+- Google Cloud account\n+- Command-line client `psql` installed and added to your system's `PATH` environment variable.\n+- A host, e.g., a Compute Engine instance, where you will run the Teleport Database\n+  Service\n+- (!docs/pages/includes/tctl.mdx!)\n+\n+## Step 1/9. Create a service account for the Teleport Database Service\n+\n+(!docs/pages/includes/database-access/gcp-create-service-account-for-db-service.mdx!)\n+\n+### Grant permissions\n+\n+The Teleport Database Service needs the following permissions to call appropriate Google Cloud APIs:\n+\n+```ini\n+# Used to generate client certificate\n+alloydb.clusters.generateClientCertificate\n+# Used to fetch connection information\n+alloydb.instances.connect\n+```\n+\n+You can create a custom IAM role with these permissions or use the predefined role \n+[`roles/alloydb.client` (Cloud AlloyDB Client)](https://cloud.google.com/alloydb/docs/reference/iam-roles-permissions), \n+which comes with some additional permissions.\n+\n+## Step 2/9. Create a service account for a database user\n+\n+Teleport uses service accounts to connect to AlloyDB databases.\n+\n+### Create a service account\n+\n+Go to the IAM & Admin [Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts)\n+page and create a new service account named \"alloydb-user\":\n+\n+![Create Service Account](../../../../img/database-access/guides/alloydb/create-user-service-account.png)\n+\n+Click \"Create and continue\".\n+\n+### Grant permissions\n+\n+The service account needs these permissions:\n+\n+```ini\n+alloydb.instances.connect\n+alloydb.users.login\n+serviceusage.services.use\n+```\n+\n+For least privilege, create and assign a custom IAM role containing exactly the permissions above. Alternatively, you may grant these [predefined roles](https://cloud.google.com/alloydb/docs/reference/iam-roles-permissions):\n+\n+* Cloud AlloyDB Database User (`roles/alloydb.databaseUser`)\n+* Cloud AlloyDB Client (`roles/alloydb.client`)\n+* [Service Usage Consumer (`roles/serviceusage.serviceUsageConsumer`)](https://cloud.google.com/service-usage/docs/access-control#serviceusage.serviceUsageConsumer)\n+\n+![Grant permissions to user Service Account](../../../../img/database-access/guides/alloydb/user-service-account-permissions.png)\n+\n+Click \"Done\".\n+\n+### Grant access to the service account\n+\n+The Teleport Database Service must be able to impersonate this service account.\n+Navigate to the \"alloydb-user\" service account overview page and select the\n+\"Principals with Access\" tab:\n+\n+![Select Principals with Access Tab](../../../../img/database-access/guides/alloydb/user-service-account-principals-with-access.png)\n+\n+Click \"Grant Access\" and add the \"teleport-db-service\" principal ID.\n+Select the \"Service Account Token Creator\" role and save the change:\n+\n+![Grant Service Account Token Creator to Database Service](../../../../img/database-access/guides/alloydb/user-service-account-grant-access.png)\n+\n+<Admonition type=\"note\" title=\"Service account permissions\">\n+  The \"Service Account Token Creator\" IAM role includes more permissions than\n+  the Teleport Database Service needs. To further restrict the service \n+  account, you can create a role that includes only the following permission:\n+  ```ini\n+  # Used to generate IAM auth tokens when connecting to a database instance.\n+  iam.serviceAccounts.getAccessToken\n+  ```\n+</Admonition>\n+\n+## Step 3/9. Configure your AlloyDB database\n+\n+Teleport uses [IAM database authentication](https://cloud.google.com/alloydb/docs/database-users/manage-iam-auth)\n+with AlloyDB instances.\n+\n+Navigate to your instance settings and enable the `alloydb.iam_authentication` flag under Advanced Configuration Options section.\n+\n+![Enable IAM Authentication](../../../../img/database-access/guides/alloydb/flag-iam-authentication-on.png)\n+\n+### Create a database user\n+\n+Now go back to the Users page of your AlloyDB instance and add a new user\n+account. In the sidebar, choose \"Cloud IAM\" authentication type and add the\n+\"alloydb-user\" service account that you created in\n+[the second step](#step-29-create-a-service-account-for-a-database-user):\n+\n+![Add AlloyDB User Account](../../../../img/database-access/guides/alloydb/add-user-account.png)\n+\n+Press \"Add\" and your Users table should look similar to this:\n+\n+![AlloyDB User Accounts Table](../../../../img/database-access/guides/alloydb/user-account-added.png)\n+\n+See [Manage IAM authentication](https://cloud.google.com/alloydb/docs/database-users/manage-iam-auth)\n+in Google Cloud documentation for more info.\n+\n+## Step 4/9. Install Teleport\n+\n+(!docs/pages/includes/install-linux.mdx!)\n+\n+## Step 5/9. Configure the Teleport Database Service",
        "comment_created_at": "2025-08-28T15:37:22+00:00",
        "comment_author": "r0mant",
        "comment_body": "Can steps \"install\", \"configure\" and \"start\" (4 through 7) be combined? 9-step guide feels pretty intimidating.",
        "pr_file_module": null
      },
      {
        "comment_id": "2321627216",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58441,
        "pr_file": "docs/pages/enroll-resources/database-access/enroll-google-cloud-databases/alloydb.mdx",
        "discussion_id": "2307814459",
        "commented_code": "@@ -0,0 +1,307 @@\n+---\n+title: Database Access with AlloyDB\n+sidebar_label: AlloyDB\n+description: How to configure Teleport database access with AlloyDB.\n+labels:\n+ - how-to\n+ - zero-trust\n+---\n+\n+(!docs/pages/includes/database-access/db-introduction.mdx dbType=\"AlloyDB\" dbConfigure=\"with a service account\"!)\n+\n+## How it works\n+\n+(!docs/pages/includes/database-access/how-it-works/iam.mdx db=\"AlloyDB\" cloud=\"Google Cloud\"!)\n+\n+![Teleport Architecture for AlloyDB Access](../../../../img/database-access/guides/alloydb/architecture.png)\n+\n+## Prerequisites\n+\n+(!docs/pages/includes/edition-prereqs-tabs.mdx!)\n+\n+- Google Cloud account\n+- Command-line client `psql` installed and added to your system's `PATH` environment variable.\n+- A host, e.g., a Compute Engine instance, where you will run the Teleport Database\n+  Service\n+- (!docs/pages/includes/tctl.mdx!)\n+\n+## Step 1/9. Create a service account for the Teleport Database Service\n+\n+(!docs/pages/includes/database-access/gcp-create-service-account-for-db-service.mdx!)\n+\n+### Grant permissions\n+\n+The Teleport Database Service needs the following permissions to call appropriate Google Cloud APIs:\n+\n+```ini\n+# Used to generate client certificate\n+alloydb.clusters.generateClientCertificate\n+# Used to fetch connection information\n+alloydb.instances.connect\n+```\n+\n+You can create a custom IAM role with these permissions or use the predefined role \n+[`roles/alloydb.client` (Cloud AlloyDB Client)](https://cloud.google.com/alloydb/docs/reference/iam-roles-permissions), \n+which comes with some additional permissions.\n+\n+## Step 2/9. Create a service account for a database user\n+\n+Teleport uses service accounts to connect to AlloyDB databases.\n+\n+### Create a service account\n+\n+Go to the IAM & Admin [Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts)\n+page and create a new service account named \"alloydb-user\":\n+\n+![Create Service Account](../../../../img/database-access/guides/alloydb/create-user-service-account.png)\n+\n+Click \"Create and continue\".\n+\n+### Grant permissions\n+\n+The service account needs these permissions:\n+\n+```ini\n+alloydb.instances.connect\n+alloydb.users.login\n+serviceusage.services.use\n+```\n+\n+For least privilege, create and assign a custom IAM role containing exactly the permissions above. Alternatively, you may grant these [predefined roles](https://cloud.google.com/alloydb/docs/reference/iam-roles-permissions):\n+\n+* Cloud AlloyDB Database User (`roles/alloydb.databaseUser`)\n+* Cloud AlloyDB Client (`roles/alloydb.client`)\n+* [Service Usage Consumer (`roles/serviceusage.serviceUsageConsumer`)](https://cloud.google.com/service-usage/docs/access-control#serviceusage.serviceUsageConsumer)\n+\n+![Grant permissions to user Service Account](../../../../img/database-access/guides/alloydb/user-service-account-permissions.png)\n+\n+Click \"Done\".\n+\n+### Grant access to the service account\n+\n+The Teleport Database Service must be able to impersonate this service account.\n+Navigate to the \"alloydb-user\" service account overview page and select the\n+\"Principals with Access\" tab:\n+\n+![Select Principals with Access Tab](../../../../img/database-access/guides/alloydb/user-service-account-principals-with-access.png)\n+\n+Click \"Grant Access\" and add the \"teleport-db-service\" principal ID.\n+Select the \"Service Account Token Creator\" role and save the change:\n+\n+![Grant Service Account Token Creator to Database Service](../../../../img/database-access/guides/alloydb/user-service-account-grant-access.png)\n+\n+<Admonition type=\"note\" title=\"Service account permissions\">\n+  The \"Service Account Token Creator\" IAM role includes more permissions than\n+  the Teleport Database Service needs. To further restrict the service \n+  account, you can create a role that includes only the following permission:\n+  ```ini\n+  # Used to generate IAM auth tokens when connecting to a database instance.\n+  iam.serviceAccounts.getAccessToken\n+  ```\n+</Admonition>\n+\n+## Step 3/9. Configure your AlloyDB database\n+\n+Teleport uses [IAM database authentication](https://cloud.google.com/alloydb/docs/database-users/manage-iam-auth)\n+with AlloyDB instances.\n+\n+Navigate to your instance settings and enable the `alloydb.iam_authentication` flag under Advanced Configuration Options section.\n+\n+![Enable IAM Authentication](../../../../img/database-access/guides/alloydb/flag-iam-authentication-on.png)\n+\n+### Create a database user\n+\n+Now go back to the Users page of your AlloyDB instance and add a new user\n+account. In the sidebar, choose \"Cloud IAM\" authentication type and add the\n+\"alloydb-user\" service account that you created in\n+[the second step](#step-29-create-a-service-account-for-a-database-user):\n+\n+![Add AlloyDB User Account](../../../../img/database-access/guides/alloydb/add-user-account.png)\n+\n+Press \"Add\" and your Users table should look similar to this:\n+\n+![AlloyDB User Accounts Table](../../../../img/database-access/guides/alloydb/user-account-added.png)\n+\n+See [Manage IAM authentication](https://cloud.google.com/alloydb/docs/database-users/manage-iam-auth)\n+in Google Cloud documentation for more info.\n+\n+## Step 4/9. Install Teleport\n+\n+(!docs/pages/includes/install-linux.mdx!)\n+\n+## Step 5/9. Configure the Teleport Database Service",
        "comment_created_at": "2025-09-04T10:52:49+00:00",
        "comment_author": "Tener",
        "comment_body": "I've reorganized the guide; we are at 3 steps now:\r\n- Configure GCP\r\n- Configure Teleport\r\n- Connect to your database",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2277536231",
    "pr_number": 57865,
    "pr_file": "docs/pages/upgrading/agent-managed-updates/bootstrap-ec2-agent.mdx",
    "created_at": "2025-08-14T19:26:16+00:00",
    "commented_code": "+---\n+title: Bootstrapping EC2 agents with \"teleport-update\"\n+description: Describes how to set up EC2 instance by cloud-init script and install Teleport with \"teleport-update enable\"\n+labels:\n+ - conceptual\n+ - platform-wide\n+---\n+\n+This guide shows two cloud-init patterns for bringing Linux EC2 instances under Managed Updates v2\n+and assigning them to an update group using:\n+\n+```code",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2277536231",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 57865,
        "pr_file": "docs/pages/upgrading/agent-managed-updates/bootstrap-ec2-agent.mdx",
        "discussion_id": "2277536231",
        "commented_code": "@@ -0,0 +1,249 @@\n+---\n+title: Bootstrapping EC2 agents with \"teleport-update\"\n+description: Describes how to set up EC2 instance by cloud-init script and install Teleport with \"teleport-update enable\"\n+labels:\n+ - conceptual\n+ - platform-wide\n+---\n+\n+This guide shows two cloud-init patterns for bringing Linux EC2 instances under Managed Updates v2\n+and assigning them to an update group using:\n+\n+```code",
        "comment_created_at": "2025-08-14T19:26:16+00:00",
        "comment_author": "ptgott",
        "comment_body": "In the introduction of a guide, it's typically less appropriate to include code examples, since the introduction of a guide operates at a higher, conceptual level.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2277542400",
    "pr_number": 57865,
    "pr_file": "docs/pages/upgrading/agent-managed-updates/bootstrap-ec2-agent.mdx",
    "created_at": "2025-08-14T19:29:06+00:00",
    "commented_code": "+---\n+title: Bootstrapping EC2 agents with \"teleport-update\"\n+description: Describes how to set up EC2 instance by cloud-init script and install Teleport with \"teleport-update enable\"\n+labels:\n+ - conceptual\n+ - platform-wide\n+---\n+\n+This guide shows two cloud-init patterns for bringing Linux EC2 instances under Managed Updates v2\n+and assigning them to an update group using:\n+\n+```code\n+sudo teleport-update enable -g <group_name> -p <proxy>\n+```\n+\n+It assumes you'll join the agent to your cluster during first boot (token or delegated join method)\n+and that your cluster has Managed Updates v2 enabled.\n+\n+What `teleport-update enable` responsible for:\n+ - Installs Teleport to the cluster-advertised version and turns on Managed Updates v2 on the host.\n+ - Creates systemd units for teleport and a teleport-update timer that periodically runs `teleport-update update`.\n+ - Persists most flags you pass (e.g., -g, -p, -b) so re-running enable updates the saved settings.\n+\n+For full Managed Updates v2 instructions, see [Managed Updates forAgents (v2)](./agent-managed-updates.mdx).\n+\n+Groups & schedules: Every agent belongs to an update group (e.g., development, staging, prod).\n+The cluster-side `autoupdate_config` resource defines when each group may update.\n+Cloud or self-hosted clusters use the same schedule model, self-hosted clusters also set the desired\n+version via `autoupdate_version`.\n+\n+## Define groups and schedules\n+\n+Pick simple, meaningful groups like `development`, `staging`, `production`. Then model your rollout windows\n+and sequencing in `autoupdate_config`.\n+\n+```yaml",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2277542400",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 57865,
        "pr_file": "docs/pages/upgrading/agent-managed-updates/bootstrap-ec2-agent.mdx",
        "discussion_id": "2277542400",
        "commented_code": "@@ -0,0 +1,249 @@\n+---\n+title: Bootstrapping EC2 agents with \"teleport-update\"\n+description: Describes how to set up EC2 instance by cloud-init script and install Teleport with \"teleport-update enable\"\n+labels:\n+ - conceptual\n+ - platform-wide\n+---\n+\n+This guide shows two cloud-init patterns for bringing Linux EC2 instances under Managed Updates v2\n+and assigning them to an update group using:\n+\n+```code\n+sudo teleport-update enable -g <group_name> -p <proxy>\n+```\n+\n+It assumes you'll join the agent to your cluster during first boot (token or delegated join method)\n+and that your cluster has Managed Updates v2 enabled.\n+\n+What `teleport-update enable` responsible for:\n+ - Installs Teleport to the cluster-advertised version and turns on Managed Updates v2 on the host.\n+ - Creates systemd units for teleport and a teleport-update timer that periodically runs `teleport-update update`.\n+ - Persists most flags you pass (e.g., -g, -p, -b) so re-running enable updates the saved settings.\n+\n+For full Managed Updates v2 instructions, see [Managed Updates forAgents (v2)](./agent-managed-updates.mdx).\n+\n+Groups & schedules: Every agent belongs to an update group (e.g., development, staging, prod).\n+The cluster-side `autoupdate_config` resource defines when each group may update.\n+Cloud or self-hosted clusters use the same schedule model, self-hosted clusters also set the desired\n+version via `autoupdate_version`.\n+\n+## Define groups and schedules\n+\n+Pick simple, meaningful groups like `development`, `staging`, `production`. Then model your rollout windows\n+and sequencing in `autoupdate_config`.\n+\n+```yaml",
        "comment_created_at": "2025-08-14T19:29:06+00:00",
        "comment_author": "ptgott",
        "comment_body": "This guide is telling the user to figure out which values to enter based on the example. I would be more descriptive about the precise fields and value types the user should enter.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2277545397",
    "pr_number": 57865,
    "pr_file": "docs/pages/upgrading/agent-managed-updates/bootstrap-ec2-agent.mdx",
    "created_at": "2025-08-14T19:30:48+00:00",
    "commented_code": "+---\n+title: Bootstrapping EC2 agents with \"teleport-update\"\n+description: Describes how to set up EC2 instance by cloud-init script and install Teleport with \"teleport-update enable\"\n+labels:\n+ - conceptual\n+ - platform-wide\n+---\n+",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2277545397",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 57865,
        "pr_file": "docs/pages/upgrading/agent-managed-updates/bootstrap-ec2-agent.mdx",
        "discussion_id": "2277545397",
        "commented_code": "@@ -0,0 +1,249 @@\n+---\n+title: Bootstrapping EC2 agents with \"teleport-update\"\n+description: Describes how to set up EC2 instance by cloud-init script and install Teleport with \"teleport-update enable\"\n+labels:\n+ - conceptual\n+ - platform-wide\n+---\n+",
        "comment_created_at": "2025-08-14T19:30:48+00:00",
        "comment_author": "ptgott",
        "comment_body": "This guide would benefit from having the structure of a Teleport how-to guide, rather than a conceptual guide, since it is a series of steps with a well-defined beginning and end.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2277550552",
    "pr_number": 57865,
    "pr_file": "docs/pages/upgrading/agent-managed-updates/bootstrap-ec2-agent.mdx",
    "created_at": "2025-08-14T19:33:08+00:00",
    "commented_code": "+---\n+title: Bootstrapping EC2 agents with \"teleport-update\"\n+description: Describes how to set up EC2 instance by cloud-init script and install Teleport with \"teleport-update enable\"\n+labels:\n+ - conceptual\n+ - platform-wide\n+---\n+\n+This guide shows two cloud-init patterns for bringing Linux EC2 instances under Managed Updates v2\n+and assigning them to an update group using:\n+\n+```code\n+sudo teleport-update enable -g <group_name> -p <proxy>\n+```\n+\n+It assumes you'll join the agent to your cluster during first boot (token or delegated join method)\n+and that your cluster has Managed Updates v2 enabled.\n+\n+What `teleport-update enable` responsible for:\n+ - Installs Teleport to the cluster-advertised version and turns on Managed Updates v2 on the host.\n+ - Creates systemd units for teleport and a teleport-update timer that periodically runs `teleport-update update`.\n+ - Persists most flags you pass (e.g., -g, -p, -b) so re-running enable updates the saved settings.\n+\n+For full Managed Updates v2 instructions, see [Managed Updates forAgents (v2)](./agent-managed-updates.mdx).\n+\n+Groups & schedules: Every agent belongs to an update group (e.g., development, staging, prod).\n+The cluster-side `autoupdate_config` resource defines when each group may update.\n+Cloud or self-hosted clusters use the same schedule model, self-hosted clusters also set the desired\n+version via `autoupdate_version`.\n+\n+## Define groups and schedules\n+\n+Pick simple, meaningful groups like `development`, `staging`, `production`. Then model your rollout windows\n+and sequencing in `autoupdate_config`.\n+\n+```yaml\n+# autoupdate_config.yaml\n+kind: autoupdate_config\n+metadata:\n+  name: autoupdate-config\n+spec:\n+  agents:\n+    mode: enabled\n+    strategy: halt-on-error\n+    schedules:\n+      regular:\n+        - name: development\n+          days: [\"Mon\",\"Tue\",\"Wed\",\"Thu\"]\n+          start_hour: 4   # UTC\n+        - name: staging\n+          days: [\"Mon\",\"Tue\",\"Wed\",\"Thu\"]\n+          start_hour: 5\n+          wait_hours: 24  # run a day later than development\n+```\n+\n+This resource is used to controls the update schedule by defining different groups, sequence and upgrade window.\n+\n+Run the following command to create or update the resource:\n+\n+```code\n+$ tctl create -f autoupdate_config.yaml\n+```\n+\n+## Join Methods and Tokens\n+\n+Joining a Teleport cluster is the act of establishing trust between a new Teleport instance and all\n+the existing instances already part of the Teleport cluster. At the end of the joining process,\n+the Auth Service signs certificates for the joining instance. Those certificates represent the\n+trust that was established. With them, the newly-joined instance can interact with the other Teleport instances.\n+\n+For bootstrapping EC2, the most appropriate methods are creating short-lived or long-lived tokens,\n+or using delegated join with the IAM join method.\n+\n+### Creating join tokens\n+\n+Create a join token with an explicit TTL and the right service type.\n+By default, `tctl tokens add` issues short-lived tokens (expiry is 30 minutes if you omit --ttl).\n+\n+```code\n+$ tctl tokens add --type=node --ttl=1h --format=text\n+```\n+\n+Long-lived option: a token resource with an explicit expiry. If you need something that lasts longer than\n+a few hours, prefer a token resource with a concrete `metadata.expires` timestamp instead of cranking\n+`--ttl` to very large values. Example (set an appropriate, bounded expiry):\n+\n+```yaml\n+# token-long-lived.yaml\n+kind: token\n+version: v2\n+metadata:\n+  name: node-join-24h\n+  expires: 2025-12-31T23:59:00Z\n+spec:\n+  join_method: token\n+  roles: [Node]\n+```\n+\n+```code\n+$ tctl create -f token-long-lived.yaml\n+```\n+\n+### Delegated joins\n+\n+Delegated joins avoid shipping any secret token in user-data. You create a named token resource\n+that encodes context rules (your AWS account, role ARNs, regions, etc.), then the agent proves\n+its identity to the Auth Service using cloud-issued credentials.\n+\n+Your agent can fetch IAM credentials (e.g., EC2 instance profile, IRSA, or env vars).\n+\n+Create a joining token that allows your account (optionally constrain to a role ARN):\n+\n+```yaml\n+# token-iam.yaml\n+kind: token\n+version: v2\n+metadata:\n+  name: iam-token\n+spec:\n+  roles: [Node]\n+  join_method: iam\n+  allow:\n+    - aws_account: \"111111111111\"\n+    # Optional: restrict to assumed-role pattern\n+    - aws_account: \"222222222222\"\n+      aws_arn: \"arn:aws:sts::222222222222:assumed-role/teleport-node-role/i-*\"\n+```\n+",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2277550552",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 57865,
        "pr_file": "docs/pages/upgrading/agent-managed-updates/bootstrap-ec2-agent.mdx",
        "discussion_id": "2277550552",
        "commented_code": "@@ -0,0 +1,249 @@\n+---\n+title: Bootstrapping EC2 agents with \"teleport-update\"\n+description: Describes how to set up EC2 instance by cloud-init script and install Teleport with \"teleport-update enable\"\n+labels:\n+ - conceptual\n+ - platform-wide\n+---\n+\n+This guide shows two cloud-init patterns for bringing Linux EC2 instances under Managed Updates v2\n+and assigning them to an update group using:\n+\n+```code\n+sudo teleport-update enable -g <group_name> -p <proxy>\n+```\n+\n+It assumes you'll join the agent to your cluster during first boot (token or delegated join method)\n+and that your cluster has Managed Updates v2 enabled.\n+\n+What `teleport-update enable` responsible for:\n+ - Installs Teleport to the cluster-advertised version and turns on Managed Updates v2 on the host.\n+ - Creates systemd units for teleport and a teleport-update timer that periodically runs `teleport-update update`.\n+ - Persists most flags you pass (e.g., -g, -p, -b) so re-running enable updates the saved settings.\n+\n+For full Managed Updates v2 instructions, see [Managed Updates forAgents (v2)](./agent-managed-updates.mdx).\n+\n+Groups & schedules: Every agent belongs to an update group (e.g., development, staging, prod).\n+The cluster-side `autoupdate_config` resource defines when each group may update.\n+Cloud or self-hosted clusters use the same schedule model, self-hosted clusters also set the desired\n+version via `autoupdate_version`.\n+\n+## Define groups and schedules\n+\n+Pick simple, meaningful groups like `development`, `staging`, `production`. Then model your rollout windows\n+and sequencing in `autoupdate_config`.\n+\n+```yaml\n+# autoupdate_config.yaml\n+kind: autoupdate_config\n+metadata:\n+  name: autoupdate-config\n+spec:\n+  agents:\n+    mode: enabled\n+    strategy: halt-on-error\n+    schedules:\n+      regular:\n+        - name: development\n+          days: [\"Mon\",\"Tue\",\"Wed\",\"Thu\"]\n+          start_hour: 4   # UTC\n+        - name: staging\n+          days: [\"Mon\",\"Tue\",\"Wed\",\"Thu\"]\n+          start_hour: 5\n+          wait_hours: 24  # run a day later than development\n+```\n+\n+This resource is used to controls the update schedule by defining different groups, sequence and upgrade window.\n+\n+Run the following command to create or update the resource:\n+\n+```code\n+$ tctl create -f autoupdate_config.yaml\n+```\n+\n+## Join Methods and Tokens\n+\n+Joining a Teleport cluster is the act of establishing trust between a new Teleport instance and all\n+the existing instances already part of the Teleport cluster. At the end of the joining process,\n+the Auth Service signs certificates for the joining instance. Those certificates represent the\n+trust that was established. With them, the newly-joined instance can interact with the other Teleport instances.\n+\n+For bootstrapping EC2, the most appropriate methods are creating short-lived or long-lived tokens,\n+or using delegated join with the IAM join method.\n+\n+### Creating join tokens\n+\n+Create a join token with an explicit TTL and the right service type.\n+By default, `tctl tokens add` issues short-lived tokens (expiry is 30 minutes if you omit --ttl).\n+\n+```code\n+$ tctl tokens add --type=node --ttl=1h --format=text\n+```\n+\n+Long-lived option: a token resource with an explicit expiry. If you need something that lasts longer than\n+a few hours, prefer a token resource with a concrete `metadata.expires` timestamp instead of cranking\n+`--ttl` to very large values. Example (set an appropriate, bounded expiry):\n+\n+```yaml\n+# token-long-lived.yaml\n+kind: token\n+version: v2\n+metadata:\n+  name: node-join-24h\n+  expires: 2025-12-31T23:59:00Z\n+spec:\n+  join_method: token\n+  roles: [Node]\n+```\n+\n+```code\n+$ tctl create -f token-long-lived.yaml\n+```\n+\n+### Delegated joins\n+\n+Delegated joins avoid shipping any secret token in user-data. You create a named token resource\n+that encodes context rules (your AWS account, role ARNs, regions, etc.), then the agent proves\n+its identity to the Auth Service using cloud-issued credentials.\n+\n+Your agent can fetch IAM credentials (e.g., EC2 instance profile, IRSA, or env vars).\n+\n+Create a joining token that allows your account (optionally constrain to a role ARN):\n+\n+```yaml\n+# token-iam.yaml\n+kind: token\n+version: v2\n+metadata:\n+  name: iam-token\n+spec:\n+  roles: [Node]\n+  join_method: iam\n+  allow:\n+    - aws_account: \"111111111111\"\n+    # Optional: restrict to assumed-role pattern\n+    - aws_account: \"222222222222\"\n+      aws_arn: \"arn:aws:sts::222222222222:assumed-role/teleport-node-role/i-*\"\n+```\n+",
        "comment_created_at": "2025-08-14T19:33:08+00:00",
        "comment_author": "ptgott",
        "comment_body": "I would add a sentence before each snippet to introduce what that snippet does.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2178329391",
    "pr_number": 55986,
    "pr_file": "docs/pages/enroll-resources/kubernetes-access/rancher-integration.mdx",
    "created_at": "2025-07-01T18:51:43+00:00",
    "commented_code": "+---\n+title: \"Secure and Simplify RedHat Rancher RBAC with Teleport\"\n+description: \"Comprehensive guide to integrating Teleport with Rancher for centralized, secure access control and audit logging\"\n+---\n+\n+# Rancher RBAC Integration with Teleport\n+\n+Teleport provides seamless integration with Rancher to centralize and secure access to Rancher clusters.\n+This integration enables:\n+\n+- **Centralized Access Control**: Manage permissions across all Rancher clusters from Teleport\n+- **Enhanced Security**: Enforce identity-based access with Teleport's RBAC\n+- **Simplified Management**: Reduce complexity of managing multiple RBAC systems\n+- **Comprehensive Auditing**: Maintain detailed logs of all access attempts\n+\n+In this guide, we will demonstrate how to integrate Teleport Kubernetes RBAC with Rancher RBAC to centralize and secure\n+access control for Rancher clusters. It demonstrates how to configure Teleport RBAC to grant Rancher's built-in Cluster Member role.\n+\n+## Prerequisites\n+\n+(!docs/pages/includes/edition-prereqs-tabs.mdx!)\n+\n+- (!docs/pages/includes/tctl.mdx!)\n+- Access to a Rancher UI Cluster with admin privileges\n+- Existing cluster(s) managed through Rancher\n+- (Optional) Rancher authentication configured with external auth providers\n+\n+Within Rancher, cluster and project roles are implemented on top of [Kubernetes RBAC](https://kubernetes.io/docs/reference/access-authn-authz/rbac/).\n+Therefore, enforcement of permissions and roles is performed by Kubernetes.\n+\n+## Step 1: Configure Rancher Access",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2178329391",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 55986,
        "pr_file": "docs/pages/enroll-resources/kubernetes-access/rancher-integration.mdx",
        "discussion_id": "2178329391",
        "commented_code": "@@ -0,0 +1,265 @@\n+---\n+title: \"Secure and Simplify RedHat Rancher RBAC with Teleport\"\n+description: \"Comprehensive guide to integrating Teleport with Rancher for centralized, secure access control and audit logging\"\n+---\n+\n+# Rancher RBAC Integration with Teleport\n+\n+Teleport provides seamless integration with Rancher to centralize and secure access to Rancher clusters.\n+This integration enables:\n+\n+- **Centralized Access Control**: Manage permissions across all Rancher clusters from Teleport\n+- **Enhanced Security**: Enforce identity-based access with Teleport's RBAC\n+- **Simplified Management**: Reduce complexity of managing multiple RBAC systems\n+- **Comprehensive Auditing**: Maintain detailed logs of all access attempts\n+\n+In this guide, we will demonstrate how to integrate Teleport Kubernetes RBAC with Rancher RBAC to centralize and secure\n+access control for Rancher clusters. It demonstrates how to configure Teleport RBAC to grant Rancher's built-in Cluster Member role.\n+\n+## Prerequisites\n+\n+(!docs/pages/includes/edition-prereqs-tabs.mdx!)\n+\n+- (!docs/pages/includes/tctl.mdx!)\n+- Access to a Rancher UI Cluster with admin privileges\n+- Existing cluster(s) managed through Rancher\n+- (Optional) Rancher authentication configured with external auth providers\n+\n+Within Rancher, cluster and project roles are implemented on top of [Kubernetes RBAC](https://kubernetes.io/docs/reference/access-authn-authz/rbac/).\n+Therefore, enforcement of permissions and roles is performed by Kubernetes.\n+\n+## Step 1: Configure Rancher Access",
        "comment_created_at": "2025-07-01T18:51:43+00:00",
        "comment_author": "ptgott",
        "comment_body": "We should format this and other H2s as we do other `Step` sections in how-to guides, e.g.:\r\n\r\n```\r\nStep 1/3. Configure Rancher access\r\n```\r\n\r\nIn our style guide, headings also use sentence case instead of title case.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2178333625",
    "pr_number": 55986,
    "pr_file": "docs/pages/enroll-resources/kubernetes-access/rancher-integration.mdx",
    "created_at": "2025-07-01T18:54:08+00:00",
    "commented_code": "+---\n+title: \"Secure and Simplify RedHat Rancher RBAC with Teleport\"\n+description: \"Comprehensive guide to integrating Teleport with Rancher for centralized, secure access control and audit logging\"\n+---\n+\n+# Rancher RBAC Integration with Teleport\n+\n+Teleport provides seamless integration with Rancher to centralize and secure access to Rancher clusters.\n+This integration enables:\n+\n+- **Centralized Access Control**: Manage permissions across all Rancher clusters from Teleport\n+- **Enhanced Security**: Enforce identity-based access with Teleport's RBAC\n+- **Simplified Management**: Reduce complexity of managing multiple RBAC systems\n+- **Comprehensive Auditing**: Maintain detailed logs of all access attempts\n+\n+In this guide, we will demonstrate how to integrate Teleport Kubernetes RBAC with Rancher RBAC to centralize and secure\n+access control for Rancher clusters. It demonstrates how to configure Teleport RBAC to grant Rancher's built-in Cluster Member role.\n+\n+## Prerequisites\n+\n+(!docs/pages/includes/edition-prereqs-tabs.mdx!)\n+\n+- (!docs/pages/includes/tctl.mdx!)\n+- Access to a Rancher UI Cluster with admin privileges\n+- Existing cluster(s) managed through Rancher\n+- (Optional) Rancher authentication configured with external auth providers\n+\n+Within Rancher, cluster and project roles are implemented on top of [Kubernetes RBAC](https://kubernetes.io/docs/reference/access-authn-authz/rbac/).\n+Therefore, enforcement of permissions and roles is performed by Kubernetes.\n+\n+## Step 1: Configure Rancher Access\n+\n+1. Add a user/group to your clusters and assign a Cluster Member role: [Adding Users to Clusters](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/manage-clusters/access-clusters/add-users-to-clusters)\n+\n+2. Authenticate to your cluster with an administrative priviledge. See guide to [Access a Rancher cluster with kubectl](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/manage-clusters/access-clusters/use-kubectl-and-kubeconfig)\n+\n+3. Discover Rancher RBAC bindings & identifiers:\n+   Run the command below to list Kubernetes RoleBindings in a specific namespace while extracting three key pieces of information in a clean table format:\n+\n+   ```bash\n+   # List all rolebindings with their names and associated groups\n+   kubectl get rolebindings -n <namespace> -o custom-columns='NAME:.metadata.name,ROLE:.roleRef.name,GROUPS:.subjects[?(@.kind==\"Group\")].name'\n+   \n+   # Example output:\n+     NAME                     ROLE            GROUPS\n+     crtb-w8l2g-cluster-member cluster-member github_team://7415717\n+   ```\n+\n+## Step 2: Enroll Clusters to Teleport\n+\n+To enroll your cluster(s), see the official [Teleport Kubernetes Access documentation](/docs/kubernetes-access/getting-started/)\n+for detailed enrollment instructions.\n+\n+## Step 3: Configure Cluster Access\n+\n+In this section, we will define a Teleport role that authenticates a Teleport user to the cluster\n+as a member of the `github_team://7415717` group subject assigned the Rancher `cluster-member` Role.\n+\n+In the previous section, we have assigned the built-in Cluster Member role authorizing members\n+of this group to perform read-only operations at the cluster level. This specific role:\n+- Enables the user to access cluster nodes\n+- Denies the user permissions to create, modify or delete resources (e.g. can't deploy workloads)\n+\n+For more information on permissions granted by the Cluster Member role, see the following guide on\n+[Cluster and Project Roles](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/manage-role-based-access-control-rbac/cluster-and-project-roles)\n+\n+### Define a Teleport Role\n+\n+Create a file called `kube-access.yaml` with the following content:\n+\n+```yaml\n+kind: role\n+version: v7\n+metadata:\n+  name: kube-access\n+spec:\n+  allow:\n+    kubernetes_groups: [\"github_team://7415717\"]\n+    kubernetes_labels:\n+      \"*\": \"*\"\n+    kubernetes_resources:\n+      - kind: \"*\"\n+        namespace: \"*\"\n+        name: \"*\"\n+```\n+\n+In this role, we have defined the following allow rules:\n+- `kubernetes_groups`: Authenticates the user to your Kubernetes cluster as a member of the Kubernetes group subject \n+`github_team://7415717`, authorizing members of this group with the Cluster Member Role permissions\n+\n+### Create the Role\n+\n+Once you have finished configuring the kube-access role, create it using the following command:\n+\n+```bash\n+tctl create -f kube-access.yaml\n+```\n+\n+### Assign the Role\n+\n+Assign the kube-access role to your Teleport user by running the appropriate commands for your authentication provider:\n+\n+```bash\n+tctl users update <username> --set-roles=kube-access\n+```\n+\n+## Step 4: Access Resources\n+\n+At this point, you have configured the Teleport Kubernetes Service to give your Teleport user\n+access to the Rancher cluster as a user with the built-in Rancher Cluster Member Role. In this step,\n+we will authenticate to your Rancher cluster via Teleport and test our new access controls.\n+\n+### Login to Teleport\n+\n+```bash\n+tsh login --proxy teleport.example.com\n+tsh status\n+\n+# Example output showing Kubernetes group membership:\n+> Profile URL:        https://teleport.example.com:443\n+  Logged in as:       user@example.com\n+  Cluster:            teleport.example.com\n+  Roles:              kube-access\n+  Kubernetes:         enabled\n+  Kubernetes groups:  github_team://7415717\n+  Valid until:        2025-04-14 09:02:31 +0100 BST\n+```\n+\n+### List Accessible Kubernetes Clusters\n+\n+```bash\n+tsh kube ls\n+\n+# You should see your enrolled clusters in the list:\n+Kube Cluster Name   Labels                         Selected\n+------------------  ------------------------------ --------\n+rancher-cluster\n+```\n+\n+### Access Your Cluster\n+\n+```bash\n+tsh kube login rancher-cluster\n+```\n+\n+### Verify Permissions\n+\n+```bash\n+# Check specific permissions\n+kubectl auth can-i create deployments\n+no\n+```\n+\n+## Optional: Using Role Templates for Scalable Access\n+\n+For organizations with many users, creating roles for individuals isn't scalable. Teleport's role templates allow dynamic group assignments using variable interpolation.\n+\n+### Key Benefits\n+\n+- Single template serves multiple users or nested access lists\n+- Dynamic group assignments via traits\n+- Simplified RBAC management\n+- Scale permissions across many departments\n+\n+### How It Works",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2178333625",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 55986,
        "pr_file": "docs/pages/enroll-resources/kubernetes-access/rancher-integration.mdx",
        "discussion_id": "2178333625",
        "commented_code": "@@ -0,0 +1,265 @@\n+---\n+title: \"Secure and Simplify RedHat Rancher RBAC with Teleport\"\n+description: \"Comprehensive guide to integrating Teleport with Rancher for centralized, secure access control and audit logging\"\n+---\n+\n+# Rancher RBAC Integration with Teleport\n+\n+Teleport provides seamless integration with Rancher to centralize and secure access to Rancher clusters.\n+This integration enables:\n+\n+- **Centralized Access Control**: Manage permissions across all Rancher clusters from Teleport\n+- **Enhanced Security**: Enforce identity-based access with Teleport's RBAC\n+- **Simplified Management**: Reduce complexity of managing multiple RBAC systems\n+- **Comprehensive Auditing**: Maintain detailed logs of all access attempts\n+\n+In this guide, we will demonstrate how to integrate Teleport Kubernetes RBAC with Rancher RBAC to centralize and secure\n+access control for Rancher clusters. It demonstrates how to configure Teleport RBAC to grant Rancher's built-in Cluster Member role.\n+\n+## Prerequisites\n+\n+(!docs/pages/includes/edition-prereqs-tabs.mdx!)\n+\n+- (!docs/pages/includes/tctl.mdx!)\n+- Access to a Rancher UI Cluster with admin privileges\n+- Existing cluster(s) managed through Rancher\n+- (Optional) Rancher authentication configured with external auth providers\n+\n+Within Rancher, cluster and project roles are implemented on top of [Kubernetes RBAC](https://kubernetes.io/docs/reference/access-authn-authz/rbac/).\n+Therefore, enforcement of permissions and roles is performed by Kubernetes.\n+\n+## Step 1: Configure Rancher Access\n+\n+1. Add a user/group to your clusters and assign a Cluster Member role: [Adding Users to Clusters](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/manage-clusters/access-clusters/add-users-to-clusters)\n+\n+2. Authenticate to your cluster with an administrative priviledge. See guide to [Access a Rancher cluster with kubectl](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/manage-clusters/access-clusters/use-kubectl-and-kubeconfig)\n+\n+3. Discover Rancher RBAC bindings & identifiers:\n+   Run the command below to list Kubernetes RoleBindings in a specific namespace while extracting three key pieces of information in a clean table format:\n+\n+   ```bash\n+   # List all rolebindings with their names and associated groups\n+   kubectl get rolebindings -n <namespace> -o custom-columns='NAME:.metadata.name,ROLE:.roleRef.name,GROUPS:.subjects[?(@.kind==\"Group\")].name'\n+   \n+   # Example output:\n+     NAME                     ROLE            GROUPS\n+     crtb-w8l2g-cluster-member cluster-member github_team://7415717\n+   ```\n+\n+## Step 2: Enroll Clusters to Teleport\n+\n+To enroll your cluster(s), see the official [Teleport Kubernetes Access documentation](/docs/kubernetes-access/getting-started/)\n+for detailed enrollment instructions.\n+\n+## Step 3: Configure Cluster Access\n+\n+In this section, we will define a Teleport role that authenticates a Teleport user to the cluster\n+as a member of the `github_team://7415717` group subject assigned the Rancher `cluster-member` Role.\n+\n+In the previous section, we have assigned the built-in Cluster Member role authorizing members\n+of this group to perform read-only operations at the cluster level. This specific role:\n+- Enables the user to access cluster nodes\n+- Denies the user permissions to create, modify or delete resources (e.g. can't deploy workloads)\n+\n+For more information on permissions granted by the Cluster Member role, see the following guide on\n+[Cluster and Project Roles](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/manage-role-based-access-control-rbac/cluster-and-project-roles)\n+\n+### Define a Teleport Role\n+\n+Create a file called `kube-access.yaml` with the following content:\n+\n+```yaml\n+kind: role\n+version: v7\n+metadata:\n+  name: kube-access\n+spec:\n+  allow:\n+    kubernetes_groups: [\"github_team://7415717\"]\n+    kubernetes_labels:\n+      \"*\": \"*\"\n+    kubernetes_resources:\n+      - kind: \"*\"\n+        namespace: \"*\"\n+        name: \"*\"\n+```\n+\n+In this role, we have defined the following allow rules:\n+- `kubernetes_groups`: Authenticates the user to your Kubernetes cluster as a member of the Kubernetes group subject \n+`github_team://7415717`, authorizing members of this group with the Cluster Member Role permissions\n+\n+### Create the Role\n+\n+Once you have finished configuring the kube-access role, create it using the following command:\n+\n+```bash\n+tctl create -f kube-access.yaml\n+```\n+\n+### Assign the Role\n+\n+Assign the kube-access role to your Teleport user by running the appropriate commands for your authentication provider:\n+\n+```bash\n+tctl users update <username> --set-roles=kube-access\n+```\n+\n+## Step 4: Access Resources\n+\n+At this point, you have configured the Teleport Kubernetes Service to give your Teleport user\n+access to the Rancher cluster as a user with the built-in Rancher Cluster Member Role. In this step,\n+we will authenticate to your Rancher cluster via Teleport and test our new access controls.\n+\n+### Login to Teleport\n+\n+```bash\n+tsh login --proxy teleport.example.com\n+tsh status\n+\n+# Example output showing Kubernetes group membership:\n+> Profile URL:        https://teleport.example.com:443\n+  Logged in as:       user@example.com\n+  Cluster:            teleport.example.com\n+  Roles:              kube-access\n+  Kubernetes:         enabled\n+  Kubernetes groups:  github_team://7415717\n+  Valid until:        2025-04-14 09:02:31 +0100 BST\n+```\n+\n+### List Accessible Kubernetes Clusters\n+\n+```bash\n+tsh kube ls\n+\n+# You should see your enrolled clusters in the list:\n+Kube Cluster Name   Labels                         Selected\n+------------------  ------------------------------ --------\n+rancher-cluster\n+```\n+\n+### Access Your Cluster\n+\n+```bash\n+tsh kube login rancher-cluster\n+```\n+\n+### Verify Permissions\n+\n+```bash\n+# Check specific permissions\n+kubectl auth can-i create deployments\n+no\n+```\n+\n+## Optional: Using Role Templates for Scalable Access\n+\n+For organizations with many users, creating roles for individuals isn't scalable. Teleport's role templates allow dynamic group assignments using variable interpolation.\n+\n+### Key Benefits\n+\n+- Single template serves multiple users or nested access lists\n+- Dynamic group assignments via traits\n+- Simplified RBAC management\n+- Scale permissions across many departments\n+\n+### How It Works",
        "comment_created_at": "2025-07-01T18:54:08+00:00",
        "comment_author": "ptgott",
        "comment_body": "By convention, we've been adding \"How it works\" as an H2 section before the Prerequisites section. This helps the user obtain a mental model of the guide that they can refer to as they work through the instructions.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2315713908",
    "pr_number": 58572,
    "pr_file": "docs/pages/identity-security/session-summaries.mdx",
    "created_at": "2025-09-02T10:50:57+00:00",
    "commented_code": "+---\n+title: Session Recording Summaries\n+description: Describes how to generate and view session recording summaries using a language model.\n+labels:\n+  - conceptual\n+  - identity-security\n+---\n+\n+Teleport Identity Security allows you to generate and view session recording\n+summaries for shell and database sessions. This allows you to see at a glance\n+what your users do and estimate legitimacy of their actions before digging\n+deeper and reviewing the entire recording.\n+\n+<Admonition type=\"warning\">\n+This feature is powered by AI, and as such, its accuracy may vary.\n+\n+Teleport doesn't currently support any spend controls; controlling the LLM\n+token budget is your responsibility.\n+</Admonition>\n+\n+## Prerequisites\n+\n+- A running Teleport Enterprise cluster v18.2.0 or later with Identity Security\n+  enabled.\n+- Access to OpenAI or OpenAI-compatible inference API, either public or\n+  self-hosted.\n+\n+## How session recording summarization works\n+\n+There are three fundamental concepts to that underpin session summarization:\n+\n+- **Inference providers** do the heavy lifting of summarization. Currently,\n+  Teleport only supports OpenAI or compatible inference providers.\n+- **Inference models** indicate *how* sessions get summarized: they are\n+  Teleport configuration resources that provide model settings.\n+- **Inference policies** indicate *what* gets summarized and which inference\n+  model is used in given case.\n+\n+After each session finishes, Teleport decides whether it should be summarized\n+or not by matching it against a set of inference policies. If a match is found,\n+Teleport uses an inference model configuration indicated by the policy to\n+generate a session recording summary using an inference provider. There is no\n+way to run this process on demand.\n+\n+## Step 1: Access control\n+\n+Every user who has access to given session recording also has access to its\n+summary through a `session` resource kind. The built-in `access` role allows\n+users to only view their sessions; in order to allow a user to view all\n+recordings and summaries, it's easiest to use the built-in `auditor` role.\n+\n+In order to manage the inference configuration, you need a write access to\n+`inference_model`, `inference_secret`, and `inference_policy` resources, which\n+is granted by default through the built-in `editor` role.\n+\n+You can either use the built-in roles or create a new one to make sure you have access to all necessary resources. To create a new role:\n+\n+1. Create a `summarizer-admin.yaml` file with the following content:\n+\n+   ```yaml\n+   kind: role\n+   metadata:\n+     name: summarizer-admin\n+   spec:\n+     allow:\n+       rules:\n+       - resources:\n+         - inference_model\n+         - inference_secret\n+         - inference_policy\n+         verbs:\n+         - read\n+         - list\n+         - create\n+         - update\n+         - delete\n+       - resources:\n+         - session\n+         verbs:\n+         - read\n+         - list\n+   version: v7\n+   ```\n+\n+1. Apply your changes:\n+\n+   ```code\n+   $ tctl create -f summarizer-admin.yaml\n+   ```\n+\n+   (!docs/pages/includes/create-role-using-web.mdx!)\n+\n+1. (!docs/pages/includes/add-role-to-user.mdx role=\"summarizer-admin\"!)\n+\n+## Step 2: Create the inference configuration resources\n+\n+Let's start by defining an `inference_model` resource. It tells Teleport how to\n+summarize a session by pointing it to a language model API. In particular, it\n+contains an API-specific model name. Note that the *Teleport inference model\n+name* and *API-specific model name* are two different things. This allows, for\n+example, using the same OpenAI model with different temperature settings or\n+using different API gateways by creating multiple Teleport inference models\n+with the same OpenAI model name.\n+\n+To communicate with OpenAI, an inference model needs an API key. It's stored\n+separately in an `inference_secret` resource and referenced by the\n+`inference_model`.\n+\n+<Admonition type=\"warning\">\n+To protect your API key, once written, an `inference_secret` value cannot be\n+retrieved through `tctl` or Teleport API.\n+</Admonition>\n+\n+Finally, we add an `inference_policy` that routes sessions to inference models\n+using session kinds and optional custom filters. Here are some example\n+scenarios that can be expressed using inference policies:\n+\n+- Only summarize sessions to your production resources using resource labels.",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2315713908",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58572,
        "pr_file": "docs/pages/identity-security/session-summaries.mdx",
        "discussion_id": "2315713908",
        "commented_code": "@@ -0,0 +1,299 @@\n+---\n+title: Session Recording Summaries\n+description: Describes how to generate and view session recording summaries using a language model.\n+labels:\n+  - conceptual\n+  - identity-security\n+---\n+\n+Teleport Identity Security allows you to generate and view session recording\n+summaries for shell and database sessions. This allows you to see at a glance\n+what your users do and estimate legitimacy of their actions before digging\n+deeper and reviewing the entire recording.\n+\n+<Admonition type=\"warning\">\n+This feature is powered by AI, and as such, its accuracy may vary.\n+\n+Teleport doesn't currently support any spend controls; controlling the LLM\n+token budget is your responsibility.\n+</Admonition>\n+\n+## Prerequisites\n+\n+- A running Teleport Enterprise cluster v18.2.0 or later with Identity Security\n+  enabled.\n+- Access to OpenAI or OpenAI-compatible inference API, either public or\n+  self-hosted.\n+\n+## How session recording summarization works\n+\n+There are three fundamental concepts to that underpin session summarization:\n+\n+- **Inference providers** do the heavy lifting of summarization. Currently,\n+  Teleport only supports OpenAI or compatible inference providers.\n+- **Inference models** indicate *how* sessions get summarized: they are\n+  Teleport configuration resources that provide model settings.\n+- **Inference policies** indicate *what* gets summarized and which inference\n+  model is used in given case.\n+\n+After each session finishes, Teleport decides whether it should be summarized\n+or not by matching it against a set of inference policies. If a match is found,\n+Teleport uses an inference model configuration indicated by the policy to\n+generate a session recording summary using an inference provider. There is no\n+way to run this process on demand.\n+\n+## Step 1: Access control\n+\n+Every user who has access to given session recording also has access to its\n+summary through a `session` resource kind. The built-in `access` role allows\n+users to only view their sessions; in order to allow a user to view all\n+recordings and summaries, it's easiest to use the built-in `auditor` role.\n+\n+In order to manage the inference configuration, you need a write access to\n+`inference_model`, `inference_secret`, and `inference_policy` resources, which\n+is granted by default through the built-in `editor` role.\n+\n+You can either use the built-in roles or create a new one to make sure you have access to all necessary resources. To create a new role:\n+\n+1. Create a `summarizer-admin.yaml` file with the following content:\n+\n+   ```yaml\n+   kind: role\n+   metadata:\n+     name: summarizer-admin\n+   spec:\n+     allow:\n+       rules:\n+       - resources:\n+         - inference_model\n+         - inference_secret\n+         - inference_policy\n+         verbs:\n+         - read\n+         - list\n+         - create\n+         - update\n+         - delete\n+       - resources:\n+         - session\n+         verbs:\n+         - read\n+         - list\n+   version: v7\n+   ```\n+\n+1. Apply your changes:\n+\n+   ```code\n+   $ tctl create -f summarizer-admin.yaml\n+   ```\n+\n+   (!docs/pages/includes/create-role-using-web.mdx!)\n+\n+1. (!docs/pages/includes/add-role-to-user.mdx role=\"summarizer-admin\"!)\n+\n+## Step 2: Create the inference configuration resources\n+\n+Let's start by defining an `inference_model` resource. It tells Teleport how to\n+summarize a session by pointing it to a language model API. In particular, it\n+contains an API-specific model name. Note that the *Teleport inference model\n+name* and *API-specific model name* are two different things. This allows, for\n+example, using the same OpenAI model with different temperature settings or\n+using different API gateways by creating multiple Teleport inference models\n+with the same OpenAI model name.\n+\n+To communicate with OpenAI, an inference model needs an API key. It's stored\n+separately in an `inference_secret` resource and referenced by the\n+`inference_model`.\n+\n+<Admonition type=\"warning\">\n+To protect your API key, once written, an `inference_secret` value cannot be\n+retrieved through `tctl` or Teleport API.\n+</Admonition>\n+\n+Finally, we add an `inference_policy` that routes sessions to inference models\n+using session kinds and optional custom filters. Here are some example\n+scenarios that can be expressed using inference policies:\n+\n+- Only summarize sessions to your production resources using resource labels.",
        "comment_created_at": "2025-09-02T10:50:57+00:00",
        "comment_author": "tigrato",
        "comment_body": "can we give examples of filter conditions for this?\n\nCan we also add a description of functions and fields that we can use to apply filters?\n\nLook at https://tigrato-session-end-rbac-docs.d1v2yqnl3ruxch.amplifyapp.com/reference/access-controls/roles/#filter-fields",
        "pr_file_module": null
      },
      {
        "comment_id": "2316425478",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58572,
        "pr_file": "docs/pages/identity-security/session-summaries.mdx",
        "discussion_id": "2315713908",
        "commented_code": "@@ -0,0 +1,299 @@\n+---\n+title: Session Recording Summaries\n+description: Describes how to generate and view session recording summaries using a language model.\n+labels:\n+  - conceptual\n+  - identity-security\n+---\n+\n+Teleport Identity Security allows you to generate and view session recording\n+summaries for shell and database sessions. This allows you to see at a glance\n+what your users do and estimate legitimacy of their actions before digging\n+deeper and reviewing the entire recording.\n+\n+<Admonition type=\"warning\">\n+This feature is powered by AI, and as such, its accuracy may vary.\n+\n+Teleport doesn't currently support any spend controls; controlling the LLM\n+token budget is your responsibility.\n+</Admonition>\n+\n+## Prerequisites\n+\n+- A running Teleport Enterprise cluster v18.2.0 or later with Identity Security\n+  enabled.\n+- Access to OpenAI or OpenAI-compatible inference API, either public or\n+  self-hosted.\n+\n+## How session recording summarization works\n+\n+There are three fundamental concepts to that underpin session summarization:\n+\n+- **Inference providers** do the heavy lifting of summarization. Currently,\n+  Teleport only supports OpenAI or compatible inference providers.\n+- **Inference models** indicate *how* sessions get summarized: they are\n+  Teleport configuration resources that provide model settings.\n+- **Inference policies** indicate *what* gets summarized and which inference\n+  model is used in given case.\n+\n+After each session finishes, Teleport decides whether it should be summarized\n+or not by matching it against a set of inference policies. If a match is found,\n+Teleport uses an inference model configuration indicated by the policy to\n+generate a session recording summary using an inference provider. There is no\n+way to run this process on demand.\n+\n+## Step 1: Access control\n+\n+Every user who has access to given session recording also has access to its\n+summary through a `session` resource kind. The built-in `access` role allows\n+users to only view their sessions; in order to allow a user to view all\n+recordings and summaries, it's easiest to use the built-in `auditor` role.\n+\n+In order to manage the inference configuration, you need a write access to\n+`inference_model`, `inference_secret`, and `inference_policy` resources, which\n+is granted by default through the built-in `editor` role.\n+\n+You can either use the built-in roles or create a new one to make sure you have access to all necessary resources. To create a new role:\n+\n+1. Create a `summarizer-admin.yaml` file with the following content:\n+\n+   ```yaml\n+   kind: role\n+   metadata:\n+     name: summarizer-admin\n+   spec:\n+     allow:\n+       rules:\n+       - resources:\n+         - inference_model\n+         - inference_secret\n+         - inference_policy\n+         verbs:\n+         - read\n+         - list\n+         - create\n+         - update\n+         - delete\n+       - resources:\n+         - session\n+         verbs:\n+         - read\n+         - list\n+   version: v7\n+   ```\n+\n+1. Apply your changes:\n+\n+   ```code\n+   $ tctl create -f summarizer-admin.yaml\n+   ```\n+\n+   (!docs/pages/includes/create-role-using-web.mdx!)\n+\n+1. (!docs/pages/includes/add-role-to-user.mdx role=\"summarizer-admin\"!)\n+\n+## Step 2: Create the inference configuration resources\n+\n+Let's start by defining an `inference_model` resource. It tells Teleport how to\n+summarize a session by pointing it to a language model API. In particular, it\n+contains an API-specific model name. Note that the *Teleport inference model\n+name* and *API-specific model name* are two different things. This allows, for\n+example, using the same OpenAI model with different temperature settings or\n+using different API gateways by creating multiple Teleport inference models\n+with the same OpenAI model name.\n+\n+To communicate with OpenAI, an inference model needs an API key. It's stored\n+separately in an `inference_secret` resource and referenced by the\n+`inference_model`.\n+\n+<Admonition type=\"warning\">\n+To protect your API key, once written, an `inference_secret` value cannot be\n+retrieved through `tctl` or Teleport API.\n+</Admonition>\n+\n+Finally, we add an `inference_policy` that routes sessions to inference models\n+using session kinds and optional custom filters. Here are some example\n+scenarios that can be expressed using inference policies:\n+\n+- Only summarize sessions to your production resources using resource labels.",
        "comment_created_at": "2025-09-02T15:22:28+00:00",
        "comment_author": "zmb3",
        "comment_body": "Yeah that would be good to include a few common examples.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2180353841",
    "pr_number": 56325,
    "pr_file": "docs/pages/reference/architecture/session-recording.mdx",
    "created_at": "2025-07-02T15:23:38+00:00",
    "commented_code": "</Admonition>\n \n+### Encryption\n+",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2180353841",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 56325,
        "pr_file": "docs/pages/reference/architecture/session-recording.mdx",
        "discussion_id": "2180353841",
        "commented_code": "@@ -78,6 +78,19 @@ and `proxy-sync` identically (perform synchronous recording).\n \n </Admonition>\n \n+### Encryption\n+",
        "comment_created_at": "2025-07-02T15:23:38+00:00",
        "comment_author": "ptgott",
        "comment_body": "To make this easier to read, I would add an example of each configuration field, showing it in context of a YAML snippet.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2302024692",
    "pr_number": 56325,
    "pr_file": "docs/pages/enroll-resources/server-access/guides/encrypted-session-recordings.mdx",
    "created_at": "2025-08-26T20:06:29+00:00",
    "commented_code": "+---\n+title: Encrypted Session Recordings\n+description: Encrypt session recordings using your CA key backend\n+labels:\n+  - how-to\n+  - zero-trust\n+---\n+\n+Encrypted Session Recordings were added to allow Teleport users to enable\n+at-rest encryption of their session recording data.\n+\n+## How it works\n+\n+When encrypted recordings are enabled, Teleport will encrypt session recording\n+data before saving it to disk or long term storage. Encryption keys are\n+provisioned using the same key storage backend configured for CAs defined by\n+the `ca_key_params` section of the Teleport Auth Service configuration file. In\n+`node-sync` and `proxy-sync` session recording modes, session recording events\n+are sent directly to the Teleport Auth Service where they are encrypted prior\n+to being written to long term storage. In `node` and `proxy` session recording\n+modes, session recording events are encrypted locally at the node or proxy\n+before being written to disk for future upload to the Auth Service.\n+\n+Decryption of session recordings for replay is always facilitated by the\n+Teleport Auth Service regardless of the session recording mode. This means\n+replays can be viewed using the Teleport Web UI, or by using `tsh play`\n+with a valid session ID. Replaying session recording files directly using\n+`tsh play` is not possible for encrypted files.\n+\n+## Step 1/2. Configure Teleport\n+\n+### Enable recording encryption\n+\n+Encrypted session recordings can be enabled through both the Teleport Auth\n+Service configuration file or by modifying the `session_recording_config`\n+resource dynamically using `tctl`.\n+\n+You can edit the Auth Service configuration file as follows:\n+\n+```yaml\n+# snippet from teleport.yaml\n+auth_service:\n+  session_recording_config:\n+    encryption:\n+      enabled: yes\n+```\n+\n+You can also edit the `session_recording_config` resource using\n+`tctl edit session_recording_config`:\n+\n+```yaml\n+# snippet from session_recording_config\n+spec:\n+  encryption:\n+    enabled: yes\n+```\n+\n+If you are already configuring session recording through the configuration file\n+it is recommended that you enable encryption there as well, as modifications\n+made through `tctl` will be overwritten when the Teleport Auth Service\n+restarts.\n+\n+### Optional step: Configure key storage backend\n+\n+Session recording encryption keys are provisioned using the same key storage\n+backend configured for CAs. Software keys stored in Teleport's backend storage\n+are the default, but other backends can also be configured:\n+\n+- [AWS KMS](../../../zero-trust-access/deploy-a-cluster/aws-kms.mdx)\n+- [Google Cloud KMS](../../../zero-trust-access/deploy-a-cluster/gcp-kms.mdx)\n+- [HSM](../../../zero-trust-access/deploy-a-cluster/hsm.mdx)\n+\n+It is important that all Teleport Auth Services have access to the same keys\n+and key storage backend to ensure all recorded sessions are always replayable.\n+\n+## Step 2/2. Confirm new recordings are encrypted\n+\n+It is possible to confirm that session recordings are now encrypted by\n+capturing a new recording and downloading the resulting `.tar` file from your\n+[audit sessions backend](../../../reference/architecture/session-recording.mdx#storage).\n+Replaying the session file directly with `tsh play` should fail and replaying\n+using the session ID should succeed.\n+\n+## Manual Encryption Key Management\n+\n+<Admonition type=\"note\">\n+Manual encryption key management places all responsibility and complexity of\n+managing keys on the administrator. This comes with much more risk of a\n+misconfiguration impacting Teleport's ability to record or replay sessions.\n+It's for this reason that Teleport Cloud does not allow use of manual\n+encryption key management. Consider using the default automatic key management\n+unless your usage explicitly requires manual key management.\n+</Admonition>\n+\n+By default, Teleport will automatically provision and manage session recording\n+encryption keys. However there may be cases where automatic management is not\n+possible or desired, such as environments where Teleport lacks sufficient\n+privileges to manage keys directly. For this reason, Teleport can be configured\n+to use externally managed keys.\n+\n+### Configuration\n+\n+```yaml\n+# snippet from session_recording_config\n+encryption:\n+  enabled: yes\n+  manual_key_management:\n+    enabled: yes\n+    active_keys:\n+      - type: pkcs11\n+        label: 'session_recordings_002'\n+    rotated_keys:\n+      - type: pkcs11\n+        label: 'session_recordings_001'\n+```\n+\n+This example enables `manual_key_management` with one active key and one\n+rotated key configured. Both expect a PKCS#11 compliant HSM as the key storage\n+backend and each have their own label used to identify the keys within the HSM.\n+\n+Teleport will search the HSM for the keys described in both `active_keys` and\n+`rotated_keys`. The active keys will be used during encryption and replay of\n+any new session recordings. The rotated keys will be used during replay of\n+historical session recordings, but will not be used during any encryption\n+operations.\n+\n+As mentioned previously, it is important that all Teleport Auth Services\n+have access to the same keys. Degraded availability of replays should be\n+expected if unshared keys are used.\n+\n+<Admonition type=\"warning\">\n+Session recording encryption relies on a form of envelope encryption using OAEP\n+with 4096-bit RSA key pairs. This means RSA 4096 is the only key type eligible\n+for use with `manual_key_management`. It is also important that these keys are\n+permitted to be used for decryption. What this means varies per key storage\n+backend, but generally must be defined when the key is first provisioned.\n+</Admonition>\n+\n+## Key rotation\n+\n+Session recording encryption keys are rotated using `tctl`. Rotation is a two\n+phase process that requires initiating a rotation and then completing the\n+rotation. It is also possible to rollback an in-progress rotation in the event\n+that the previous key state needs to be restored.\n+\n+## Step 1/3. Initiate a rotation",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2302024692",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 56325,
        "pr_file": "docs/pages/enroll-resources/server-access/guides/encrypted-session-recordings.mdx",
        "discussion_id": "2302024692",
        "commented_code": "@@ -0,0 +1,269 @@\n+---\n+title: Encrypted Session Recordings\n+description: Encrypt session recordings using your CA key backend\n+labels:\n+  - how-to\n+  - zero-trust\n+---\n+\n+Encrypted Session Recordings were added to allow Teleport users to enable\n+at-rest encryption of their session recording data.\n+\n+## How it works\n+\n+When encrypted recordings are enabled, Teleport will encrypt session recording\n+data before saving it to disk or long term storage. Encryption keys are\n+provisioned using the same key storage backend configured for CAs defined by\n+the `ca_key_params` section of the Teleport Auth Service configuration file. In\n+`node-sync` and `proxy-sync` session recording modes, session recording events\n+are sent directly to the Teleport Auth Service where they are encrypted prior\n+to being written to long term storage. In `node` and `proxy` session recording\n+modes, session recording events are encrypted locally at the node or proxy\n+before being written to disk for future upload to the Auth Service.\n+\n+Decryption of session recordings for replay is always facilitated by the\n+Teleport Auth Service regardless of the session recording mode. This means\n+replays can be viewed using the Teleport Web UI, or by using `tsh play`\n+with a valid session ID. Replaying session recording files directly using\n+`tsh play` is not possible for encrypted files.\n+\n+## Step 1/2. Configure Teleport\n+\n+### Enable recording encryption\n+\n+Encrypted session recordings can be enabled through both the Teleport Auth\n+Service configuration file or by modifying the `session_recording_config`\n+resource dynamically using `tctl`.\n+\n+You can edit the Auth Service configuration file as follows:\n+\n+```yaml\n+# snippet from teleport.yaml\n+auth_service:\n+  session_recording_config:\n+    encryption:\n+      enabled: yes\n+```\n+\n+You can also edit the `session_recording_config` resource using\n+`tctl edit session_recording_config`:\n+\n+```yaml\n+# snippet from session_recording_config\n+spec:\n+  encryption:\n+    enabled: yes\n+```\n+\n+If you are already configuring session recording through the configuration file\n+it is recommended that you enable encryption there as well, as modifications\n+made through `tctl` will be overwritten when the Teleport Auth Service\n+restarts.\n+\n+### Optional step: Configure key storage backend\n+\n+Session recording encryption keys are provisioned using the same key storage\n+backend configured for CAs. Software keys stored in Teleport's backend storage\n+are the default, but other backends can also be configured:\n+\n+- [AWS KMS](../../../zero-trust-access/deploy-a-cluster/aws-kms.mdx)\n+- [Google Cloud KMS](../../../zero-trust-access/deploy-a-cluster/gcp-kms.mdx)\n+- [HSM](../../../zero-trust-access/deploy-a-cluster/hsm.mdx)\n+\n+It is important that all Teleport Auth Services have access to the same keys\n+and key storage backend to ensure all recorded sessions are always replayable.\n+\n+## Step 2/2. Confirm new recordings are encrypted\n+\n+It is possible to confirm that session recordings are now encrypted by\n+capturing a new recording and downloading the resulting `.tar` file from your\n+[audit sessions backend](../../../reference/architecture/session-recording.mdx#storage).\n+Replaying the session file directly with `tsh play` should fail and replaying\n+using the session ID should succeed.\n+\n+## Manual Encryption Key Management\n+\n+<Admonition type=\"note\">\n+Manual encryption key management places all responsibility and complexity of\n+managing keys on the administrator. This comes with much more risk of a\n+misconfiguration impacting Teleport's ability to record or replay sessions.\n+It's for this reason that Teleport Cloud does not allow use of manual\n+encryption key management. Consider using the default automatic key management\n+unless your usage explicitly requires manual key management.\n+</Admonition>\n+\n+By default, Teleport will automatically provision and manage session recording\n+encryption keys. However there may be cases where automatic management is not\n+possible or desired, such as environments where Teleport lacks sufficient\n+privileges to manage keys directly. For this reason, Teleport can be configured\n+to use externally managed keys.\n+\n+### Configuration\n+\n+```yaml\n+# snippet from session_recording_config\n+encryption:\n+  enabled: yes\n+  manual_key_management:\n+    enabled: yes\n+    active_keys:\n+      - type: pkcs11\n+        label: 'session_recordings_002'\n+    rotated_keys:\n+      - type: pkcs11\n+        label: 'session_recordings_001'\n+```\n+\n+This example enables `manual_key_management` with one active key and one\n+rotated key configured. Both expect a PKCS#11 compliant HSM as the key storage\n+backend and each have their own label used to identify the keys within the HSM.\n+\n+Teleport will search the HSM for the keys described in both `active_keys` and\n+`rotated_keys`. The active keys will be used during encryption and replay of\n+any new session recordings. The rotated keys will be used during replay of\n+historical session recordings, but will not be used during any encryption\n+operations.\n+\n+As mentioned previously, it is important that all Teleport Auth Services\n+have access to the same keys. Degraded availability of replays should be\n+expected if unshared keys are used.\n+\n+<Admonition type=\"warning\">\n+Session recording encryption relies on a form of envelope encryption using OAEP\n+with 4096-bit RSA key pairs. This means RSA 4096 is the only key type eligible\n+for use with `manual_key_management`. It is also important that these keys are\n+permitted to be used for decryption. What this means varies per key storage\n+backend, but generally must be defined when the key is first provisioned.\n+</Admonition>\n+\n+## Key rotation\n+\n+Session recording encryption keys are rotated using `tctl`. Rotation is a two\n+phase process that requires initiating a rotation and then completing the\n+rotation. It is also possible to rollback an in-progress rotation in the event\n+that the previous key state needs to be restored.\n+\n+## Step 1/3. Initiate a rotation",
        "comment_created_at": "2025-08-26T20:06:29+00:00",
        "comment_author": "ptgott",
        "comment_body": "We generally don't want to include multiple sets of \"Step...\" H2s within a single guide, since this makes the structure a little convoluted. Would it make sense to split up this guide into its own subsection of the documentation, e.g., in `docs/pages/enroll-resources/server-access/encrypted-session-recordings/rotation.mdx`? ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2282732247",
    "pr_number": 55771,
    "pr_file": "docs/pages/installation/amazon-ecs.mdx",
    "created_at": "2025-08-18T15:23:16+00:00",
    "commented_code": "+---",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2282732247",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 55771,
        "pr_file": "docs/pages/installation/amazon-ecs.mdx",
        "discussion_id": "2282732247",
        "commented_code": "@@ -0,0 +1,81 @@\n+---",
        "comment_created_at": "2025-08-18T15:23:16+00:00",
        "comment_author": "ptgott",
        "comment_body": "For consistency, we should format this page similarly to how we format other how-to guides, with \"How it works\", \"Prerequisites\", and \"Step...\" sections.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2286083752",
    "pr_number": 55771,
    "pr_file": "docs/pages/installation/amazon-ecs.mdx",
    "created_at": "2025-08-19T18:57:03+00:00",
    "commented_code": "+---\n+title: Installing Teleport on Amazon ECS using Terraform\n+description: How to install and run Teleport agents on Amazon ECS\n+labels:\n+ - platform-wide\n+ - reference\n+---\n+\n+# Step 1/3. ....\n+\n+# How it works",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2286083752",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 55771,
        "pr_file": "docs/pages/installation/amazon-ecs.mdx",
        "discussion_id": "2286083752",
        "commented_code": "@@ -0,0 +1,77 @@\n+---\n+title: Installing Teleport on Amazon ECS using Terraform\n+description: How to install and run Teleport agents on Amazon ECS\n+labels:\n+ - platform-wide\n+ - reference\n+---\n+\n+# Step 1/3. ....\n+\n+# How it works",
        "comment_created_at": "2025-08-19T18:57:03+00:00",
        "comment_author": "ptgott",
        "comment_body": "Headings in docs pages start at H2 rather than H1\u2014there's a single H1 provided by the `title` frontmatter field.",
        "pr_file_module": null
      }
    ]
  }
]