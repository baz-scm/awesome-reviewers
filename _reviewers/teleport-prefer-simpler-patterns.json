[
  {
    "discussion_id": "2318975470",
    "pr_number": 58421,
    "pr_file": "web/packages/teleport/src/Integrations/Enroll/Shared/Tile.tsx",
    "created_at": "2025-09-03T13:24:56+00:00",
    "commented_code": "+/**\n+ * Teleport\n+ * Copyright (C) 2025  Gravitational, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+import { ReactNode } from 'react';\n+import { Link as InternalLink } from 'react-router-dom';\n+import styled from 'styled-components';\n+\n+import { Link as ExternalLink, Flex, Label, Text } from 'design';\n+import { NewTab } from 'design/Icon';\n+import * as Icons from 'design/Icon';\n+import { ResourceIconName } from 'design/ResourceIcon/resourceIconSpecs';\n+\n+import cfg from 'teleport/config';\n+import { IntegrationKind } from 'teleport/services/integrations';\n+\n+import { IntegrationIcon } from '../common';\n+import { type IntegrationTileSpec } from '../IntegrationTiles/integrations';\n+import {\n+  GenericNoPermBadge,\n+  renderExternalAuditStorageBadge,\n+} from '../IntegrationTiles/IntegrationTiles';\n+import { integrationTagOptions, type IntegrationTag } from './common';\n+\n+type IntegrationLink = {\n+  url: string | undefined;\n+  external?: boolean;\n+  onClick?: () => void;\n+};\n+\n+export function IntegrationTileWithSpec({\n+  spec,\n+  hasIntegrationAccess = true,\n+  hasExternalAuditStorage = true,\n+}: {\n+  spec: IntegrationTileSpec;\n+  hasIntegrationAccess?: boolean;\n+  hasExternalAuditStorage?: boolean;\n+}) {\n+  const link = hasExternalAuditStorage\n+    ? { external: false, url: cfg.getIntegrationEnrollRoute(spec.kind) }\n+    : null;\n+\n+  const hasAccess = (() => {\n+    if (spec.kind === IntegrationKind.ExternalAuditStorage) {\n+      const externalAuditStorageEnabled =\n+        cfg.entitlements.ExternalAuditStorage.enabled;\n+      return (\n+        hasIntegrationAccess &&\n+        hasExternalAuditStorage &&\n+        externalAuditStorageEnabled\n+      );\n+    }\n+\n+    return hasIntegrationAccess;\n+  })();",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2318975470",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58421,
        "pr_file": "web/packages/teleport/src/Integrations/Enroll/Shared/Tile.tsx",
        "discussion_id": "2318975470",
        "commented_code": "@@ -0,0 +1,307 @@\n+/**\n+ * Teleport\n+ * Copyright (C) 2025  Gravitational, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+import { ReactNode } from 'react';\n+import { Link as InternalLink } from 'react-router-dom';\n+import styled from 'styled-components';\n+\n+import { Link as ExternalLink, Flex, Label, Text } from 'design';\n+import { NewTab } from 'design/Icon';\n+import * as Icons from 'design/Icon';\n+import { ResourceIconName } from 'design/ResourceIcon/resourceIconSpecs';\n+\n+import cfg from 'teleport/config';\n+import { IntegrationKind } from 'teleport/services/integrations';\n+\n+import { IntegrationIcon } from '../common';\n+import { type IntegrationTileSpec } from '../IntegrationTiles/integrations';\n+import {\n+  GenericNoPermBadge,\n+  renderExternalAuditStorageBadge,\n+} from '../IntegrationTiles/IntegrationTiles';\n+import { integrationTagOptions, type IntegrationTag } from './common';\n+\n+type IntegrationLink = {\n+  url: string | undefined;\n+  external?: boolean;\n+  onClick?: () => void;\n+};\n+\n+export function IntegrationTileWithSpec({\n+  spec,\n+  hasIntegrationAccess = true,\n+  hasExternalAuditStorage = true,\n+}: {\n+  spec: IntegrationTileSpec;\n+  hasIntegrationAccess?: boolean;\n+  hasExternalAuditStorage?: boolean;\n+}) {\n+  const link = hasExternalAuditStorage\n+    ? { external: false, url: cfg.getIntegrationEnrollRoute(spec.kind) }\n+    : null;\n+\n+  const hasAccess = (() => {\n+    if (spec.kind === IntegrationKind.ExternalAuditStorage) {\n+      const externalAuditStorageEnabled =\n+        cfg.entitlements.ExternalAuditStorage.enabled;\n+      return (\n+        hasIntegrationAccess &&\n+        hasExternalAuditStorage &&\n+        externalAuditStorageEnabled\n+      );\n+    }\n+\n+    return hasIntegrationAccess;\n+  })();",
        "comment_created_at": "2025-09-03T13:24:56+00:00",
        "comment_author": "gzdunek",
        "comment_body": "I'm not against IIFE, but it makes reading code a bit harder as indentation increases, which makes it more difficult to see where the function returns or ends.\n\nWDYT of something like this:\n```tsx\nlet hasAccess = hasIntegrationAccess;\nif (spec.kind === IntegrationKind.ExternalAuditStorage) {\n  hasAccess &&=\n    cfg.entitlements.ExternalAuditStorage.enabled && hasExternalAuditStorage;\n}\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2316558434",
    "pr_number": 58096,
    "pr_file": "web/packages/teleport/src/Discover/Shared/Finished/Finished.tsx",
    "created_at": "2025-09-02T16:09:39+00:00",
    "commented_code": "if (props.resourceText) {\n     resourceText = props.resourceText;\n   }\n-  if (props.redirect) {\n-    redirect = props.redirect;\n+  if (props.primaryButtonText) {\n+    primaryButtonText = props.primaryButtonText;\n+  }\n+  if (props.primaryButtonAction) {\n+    primaryButtonAction = props.primaryButtonAction;\n+  }\n+  if (props.secondaryButtonText) {\n+    secondaryButtonText = props.secondaryButtonText;\n+  }\n+  if (props.secondaryButtonAction) {\n+    secondaryButtonAction = props.secondaryButtonAction;\n   }",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2316558434",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58096,
        "pr_file": "web/packages/teleport/src/Discover/Shared/Finished/Finished.tsx",
        "discussion_id": "2316558434",
        "commented_code": "@@ -55,8 +61,17 @@ export function Finished(props: AgentStepProps & Message) {\n   if (props.resourceText) {\n     resourceText = props.resourceText;\n   }\n-  if (props.redirect) {\n-    redirect = props.redirect;\n+  if (props.primaryButtonText) {\n+    primaryButtonText = props.primaryButtonText;\n+  }\n+  if (props.primaryButtonAction) {\n+    primaryButtonAction = props.primaryButtonAction;\n+  }\n+  if (props.secondaryButtonText) {\n+    secondaryButtonText = props.secondaryButtonText;\n+  }\n+  if (props.secondaryButtonAction) {\n+    secondaryButtonAction = props.secondaryButtonAction;\n   }",
        "comment_created_at": "2025-09-02T16:09:39+00:00",
        "comment_author": "avatus",
        "comment_body": "I would remove setting these 4 values with `let` and then conditionally setting them, and instead, use the \"default value pattern\" instead\r\n\r\n```ts\r\nexport function Finished({\r\n  primaryButtonAction = () => history.push(cfg.routes.root, true),\r\n  primaryButtonText = 'Browse Existing Resources',\r\n  secondaryButtonAction = () => history.reload(),\r\n  secondaryButtonText = 'Add Another Resource',\r\n  ...props\r\n}: AgentStepProps & Message) {\r\n```\r\n\r\ni know we did the \"overwriting pattern\" for other props in this file but, we can keep down the changes in the PR using this pattern and fix the old stuff at another time.\r\n```suggestion\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2316694535",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58096,
        "pr_file": "web/packages/teleport/src/Discover/Shared/Finished/Finished.tsx",
        "discussion_id": "2316558434",
        "commented_code": "@@ -55,8 +61,17 @@ export function Finished(props: AgentStepProps & Message) {\n   if (props.resourceText) {\n     resourceText = props.resourceText;\n   }\n-  if (props.redirect) {\n-    redirect = props.redirect;\n+  if (props.primaryButtonText) {\n+    primaryButtonText = props.primaryButtonText;\n+  }\n+  if (props.primaryButtonAction) {\n+    primaryButtonAction = props.primaryButtonAction;\n+  }\n+  if (props.secondaryButtonText) {\n+    secondaryButtonText = props.secondaryButtonText;\n+  }\n+  if (props.secondaryButtonAction) {\n+    secondaryButtonAction = props.secondaryButtonAction;\n   }",
        "comment_created_at": "2025-09-02T17:10:38+00:00",
        "comment_author": "michellescripts",
        "comment_body": "Great change.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2310479913",
    "pr_number": 58271,
    "pr_file": "web/packages/teleport/src/Support/Support.tsx",
    "created_at": "2025-08-29T15:31:15+00:00",
    "commented_code": "const docs = getDocUrls(authVersion, isEnterprise);\n \n   return (\n-    <FeatureBox maxWidth=\"2000px\">\n+    <FeatureBox\n+      maxWidth=\"2000px\"\n+      css={`\n+        @media screen and (max-width: ${props =>\n+            props.theme.breakpoints.mobile}) {\n+          padding: ${props => props.theme.space[2]}px;",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2310479913",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58271,
        "pr_file": "web/packages/teleport/src/Support/Support.tsx",
        "discussion_id": "2310479913",
        "commented_code": "@@ -69,41 +69,40 @@ export const Support = ({\n   const docs = getDocUrls(authVersion, isEnterprise);\n \n   return (\n-    <FeatureBox maxWidth=\"2000px\">\n+    <FeatureBox\n+      maxWidth=\"2000px\"\n+      css={`\n+        @media screen and (max-width: ${props =>\n+            props.theme.breakpoints.mobile}) {\n+          padding: ${props => props.theme.space[2]}px;",
        "comment_created_at": "2025-08-29T15:31:15+00:00",
        "comment_author": "ravicious",
        "comment_body": "This can use the object syntax for breakpoints.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2310495988",
    "pr_number": 58271,
    "pr_file": "web/packages/teleport/src/Support/Support.tsx",
    "created_at": "2025-08-29T15:38:58+00:00",
    "commented_code": "const docs = getDocUrls(authVersion, isEnterprise);\n \n   return (\n-    <FeatureBox maxWidth=\"2000px\">\n+    <FeatureBox\n+      maxWidth=\"2000px\"\n+      css={`\n+        @media screen and (max-width: ${props =>\n+            props.theme.breakpoints.mobile}) {\n+          padding: ${props => props.theme.space[2]}px;\n+        }\n+      `}\n+    >\n       <FeatureHeader>\n         <FeatureHeaderTitle>Help & Support</FeatureHeaderTitle>\n       </FeatureHeader>\n-      <StyledMultiRowBox mb={3}>\n-        <StyledRow>\n-          <Flex alignItems=\"center\" justifyContent=\"start\">\n-            <IconBox>\n-              <Icons.Cluster />\n-            </IconBox>\n-            <H2>Cluster Information</H2>\n-          </Flex>\n-        </StyledRow>\n-        <StyledRow\n+      <SupportSectionsWrapper isCloud={isCloud}>\n+        <SupportSectionCard\n           css={`\n-            padding-left: ${props => props.theme.space[6]}px;\n+            grid-column: span 2;\n+            @media screen and (max-width: ${props =>\n+                props.theme.breakpoints.mobile}) {\n+              grid-column: auto;\n+            }",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2310495988",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58271,
        "pr_file": "web/packages/teleport/src/Support/Support.tsx",
        "discussion_id": "2310495988",
        "commented_code": "@@ -69,41 +69,40 @@ export const Support = ({\n   const docs = getDocUrls(authVersion, isEnterprise);\n \n   return (\n-    <FeatureBox maxWidth=\"2000px\">\n+    <FeatureBox\n+      maxWidth=\"2000px\"\n+      css={`\n+        @media screen and (max-width: ${props =>\n+            props.theme.breakpoints.mobile}) {\n+          padding: ${props => props.theme.space[2]}px;\n+        }\n+      `}\n+    >\n       <FeatureHeader>\n         <FeatureHeaderTitle>Help & Support</FeatureHeaderTitle>\n       </FeatureHeader>\n-      <StyledMultiRowBox mb={3}>\n-        <StyledRow>\n-          <Flex alignItems=\"center\" justifyContent=\"start\">\n-            <IconBox>\n-              <Icons.Cluster />\n-            </IconBox>\n-            <H2>Cluster Information</H2>\n-          </Flex>\n-        </StyledRow>\n-        <StyledRow\n+      <SupportSectionsWrapper isCloud={isCloud}>\n+        <SupportSectionCard\n           css={`\n-            padding-left: ${props => props.theme.space[6]}px;\n+            grid-column: span 2;\n+            @media screen and (max-width: ${props =>\n+                props.theme.breakpoints.mobile}) {\n+              grid-column: auto;\n+            }",
        "comment_created_at": "2025-08-29T15:38:58+00:00",
        "comment_author": "ravicious",
        "comment_body": "I know that `grid-column` isn't currently supported as a prop on `Box`, but in that case could you at least refactor it to use the approach that styled-system uses? I believe it'd be something like this:\r\n\r\n```suggestion\r\n            grid-column: auto;\r\n            @media screen and (min-width: ${props =>\r\n                props.theme.breakpoints.small}) {\r\n              grid-column: span 2;\r\n            }\r\n```\r\n\r\nSince I did my first review of the ent PR, I figured out why styled-system does this. It's mobile-first, hence why you specify the baseline with `_` \u2013 that's the default style that's going to be used on mobile. Then when you cross a certain threshold, you switch to a bigger breakpoint.\r\n\r\nFrom that point of view, having a breakpoint such as `mobile` doesn't make that much sense because with this approach you always start with the the narrowest possible width as the default.\r\n\r\nHere you can see that Charka uses the same approach with min-midth rather than max-width. https://www.chakra-ui.com/docs/theming/breakpoints As I mentioned, min-width is always mobile-first because the baseline is mobile-friendly and only once min-width is crossed you change the styles.",
        "pr_file_module": null
      }
    ]
  }
]