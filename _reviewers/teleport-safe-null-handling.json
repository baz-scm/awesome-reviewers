[
  {
    "discussion_id": "2328826056",
    "pr_number": 58850,
    "pr_file": "web/packages/teleport/src/services/audit/makeEvent.ts",
    "created_at": "2025-09-07T20:04:17+00:00",
    "commented_code": "[eventCodes.DESKTOP_CLIPBOARD_RECEIVE]: {\n     type: 'desktop.clipboard.receive',\n     desc: 'Clipboard Data Received',\n-    format: ({ user, desktop_addr, length }) =>\n-      `User [${user}] received ${length} bytes of clipboard data from desktop [${desktop_addr}]`,\n+    format: ({ user, desktop_addr, length, desktop_name }) => {\n+      let desktopName = desktop_name ? desktop_name : desktop_addr;\n+      let message = `User [${user}] received ${length} bytes of clipboard data from desktop [${desktopName}]`;\n+      return message;",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2328826056",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58850,
        "pr_file": "web/packages/teleport/src/services/audit/makeEvent.ts",
        "discussion_id": "2328826056",
        "commented_code": "@@ -1244,50 +1244,102 @@ export const formatters: Formatters = {\n   [eventCodes.DESKTOP_CLIPBOARD_RECEIVE]: {\n     type: 'desktop.clipboard.receive',\n     desc: 'Clipboard Data Received',\n-    format: ({ user, desktop_addr, length }) =>\n-      `User [${user}] received ${length} bytes of clipboard data from desktop [${desktop_addr}]`,\n+    format: ({ user, desktop_addr, length, desktop_name }) => {\n+      let desktopName = desktop_name ? desktop_name : desktop_addr;\n+      let message = `User [${user}] received ${length} bytes of clipboard data from desktop [${desktopName}]`;\n+      return message;",
        "comment_created_at": "2025-09-07T20:04:17+00:00",
        "comment_author": "zmb3",
        "comment_body": "```suggestion\n      const desktop = desktop_name ?? desktop_addr;\n      return `User [${user}] received ${length} bytes of clipboard data from desktop [${desktop}]`;\n```\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2328831906",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58850,
        "pr_file": "web/packages/teleport/src/services/audit/makeEvent.ts",
        "discussion_id": "2328826056",
        "commented_code": "@@ -1244,50 +1244,102 @@ export const formatters: Formatters = {\n   [eventCodes.DESKTOP_CLIPBOARD_RECEIVE]: {\n     type: 'desktop.clipboard.receive',\n     desc: 'Clipboard Data Received',\n-    format: ({ user, desktop_addr, length }) =>\n-      `User [${user}] received ${length} bytes of clipboard data from desktop [${desktop_addr}]`,\n+    format: ({ user, desktop_addr, length, desktop_name }) => {\n+      let desktopName = desktop_name ? desktop_name : desktop_addr;\n+      let message = `User [${user}] received ${length} bytes of clipboard data from desktop [${desktopName}]`;\n+      return message;",
        "comment_created_at": "2025-09-07T20:23:23+00:00",
        "comment_author": "stevenGravy",
        "comment_body": "Unfortunately I'm seeing that using `??` results in it assigning to empty instead of `desktop_addr`.\r\n\r\nI can convert to the two line approach of \r\n\r\n```javascript\r\nconst desktopName = desktop_name ? desktop_name : desktop_addr;\r\nreturn `User [${user}] sent ${length} bytes of clipboard data to desktop [${desktopName}]`;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2328835269",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58850,
        "pr_file": "web/packages/teleport/src/services/audit/makeEvent.ts",
        "discussion_id": "2328826056",
        "commented_code": "@@ -1244,50 +1244,102 @@ export const formatters: Formatters = {\n   [eventCodes.DESKTOP_CLIPBOARD_RECEIVE]: {\n     type: 'desktop.clipboard.receive',\n     desc: 'Clipboard Data Received',\n-    format: ({ user, desktop_addr, length }) =>\n-      `User [${user}] received ${length} bytes of clipboard data from desktop [${desktop_addr}]`,\n+    format: ({ user, desktop_addr, length, desktop_name }) => {\n+      let desktopName = desktop_name ? desktop_name : desktop_addr;\n+      let message = `User [${user}] received ${length} bytes of clipboard data from desktop [${desktopName}]`;\n+      return message;",
        "comment_created_at": "2025-09-07T20:34:25+00:00",
        "comment_author": "zmb3",
        "comment_body": "That works too. Name the variable desktop though since it's not guaranteed to hold a name. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2318854454",
    "pr_number": 58421,
    "pr_file": "web/packages/teleport/src/Integrations/Enroll/Shared/filters.ts",
    "created_at": "2025-09-03T12:42:42+00:00",
    "commented_code": "+/**\n+ * Teleport\n+ * Copyright (C) 2025  Gravitational, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+import {\n+  displayName,\n+  type BaseIntegration,\n+  type IntegrationTag,\n+} from 'teleport/Integrations/Enroll/Shared';\n+\n+export function filterIntegrations<T extends BaseIntegration>(\n+  integrations: T[],\n+  tags: IntegrationTag[],\n+  search: string\n+): T[] {\n+  if (!integrations.length && !tags && search === '') {\n+    return integrations;\n+  }\n+\n+  const searches = search.split(' ').map(s => s.toLowerCase());\n+\n+  const found = integrations.filter(i =>\n+    searches.every(\n+      s =>\n+        displayName<T>(i).toLowerCase().includes(s) ||\n+        i.tags.some(tag => tag.includes(s)) ||\n+        (i.description && i.description.toLowerCase().includes(s))",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2318854454",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58421,
        "pr_file": "web/packages/teleport/src/Integrations/Enroll/Shared/filters.ts",
        "discussion_id": "2318854454",
        "commented_code": "@@ -0,0 +1,56 @@\n+/**\n+ * Teleport\n+ * Copyright (C) 2025  Gravitational, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+import {\n+  displayName,\n+  type BaseIntegration,\n+  type IntegrationTag,\n+} from 'teleport/Integrations/Enroll/Shared';\n+\n+export function filterIntegrations<T extends BaseIntegration>(\n+  integrations: T[],\n+  tags: IntegrationTag[],\n+  search: string\n+): T[] {\n+  if (!integrations.length && !tags && search === '') {\n+    return integrations;\n+  }\n+\n+  const searches = search.split(' ').map(s => s.toLowerCase());\n+\n+  const found = integrations.filter(i =>\n+    searches.every(\n+      s =>\n+        displayName<T>(i).toLowerCase().includes(s) ||\n+        i.tags.some(tag => tag.includes(s)) ||\n+        (i.description && i.description.toLowerCase().includes(s))",
        "comment_created_at": "2025-09-03T12:42:42+00:00",
        "comment_author": "gzdunek",
        "comment_body": "```suggestion\n        i.description?.toLowerCase().includes(s)\n```",
        "pr_file_module": null
      }
    ]
  }
]