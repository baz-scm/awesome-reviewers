[
  {
    "discussion_id": "2321940699",
    "pr_number": 58716,
    "pr_file": "api/client/accesslist/accesslist.go",
    "created_at": "2025-09-04T12:30:13+00:00",
    "commented_code": "return accessLists, resp.GetNextPageToken(), nil\n }\n \n+// RangeAccessLists returns access list resources within the range [start, end).\n+func (c *Client) RangeAccessLists(ctx context.Context, req *accesslistv1.ListAccessListsV2Request) iter.Seq2[*accesslist.AccessList, error] {",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2321940699",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58716,
        "pr_file": "api/client/accesslist/accesslist.go",
        "discussion_id": "2321940699",
        "commented_code": "@@ -104,6 +105,31 @@ func (c *Client) ListAccessListsV2(ctx context.Context, req *accesslistv1.ListAc\n \treturn accessLists, resp.GetNextPageToken(), nil\n }\n \n+// RangeAccessLists returns access list resources within the range [start, end).\n+func (c *Client) RangeAccessLists(ctx context.Context, req *accesslistv1.ListAccessListsV2Request) iter.Seq2[*accesslist.AccessList, error] {",
        "comment_created_at": "2025-09-04T12:30:13+00:00",
        "comment_author": "okraport",
        "comment_body": "While this is not solidified, the `Range*` signatures have taken a `[start, end)` parameters as indicated by the comment here.\n\nSee https://github.com/gravitational/teleport/blob/c213c0da5b9ce68ab4e06433c41b360451c2c004/api/client/client.go#L3578 \n\nMy suggestion would be to take the filter and sort as optional parameters:\nPerhaps:\n```\nfunc (c *Client) RangeAccessLists(ctx context.Context, start, end string, filter *accesslistv1.AccessListsFilter, sort *types.SortBy) iter.Seq2[*accesslist.AccessList, error] {\n```\n\nLet me know what you think.",
        "pr_file_module": null
      },
      {
        "comment_id": "2321994322",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58716,
        "pr_file": "api/client/accesslist/accesslist.go",
        "discussion_id": "2321940699",
        "commented_code": "@@ -104,6 +105,31 @@ func (c *Client) ListAccessListsV2(ctx context.Context, req *accesslistv1.ListAc\n \treturn accessLists, resp.GetNextPageToken(), nil\n }\n \n+// RangeAccessLists returns access list resources within the range [start, end).\n+func (c *Client) RangeAccessLists(ctx context.Context, req *accesslistv1.ListAccessListsV2Request) iter.Seq2[*accesslist.AccessList, error] {",
        "comment_created_at": "2025-09-04T12:44:23+00:00",
        "comment_author": "avatus",
        "comment_body": "sure im happy to change it. i made this signature this way because the `ListAccessListsV2` i just made got recommended the opposite (put all params in a struct), so maybe I jumped the gun on that one. I'm happy either way since you're the one doing a lot of the pagination stuff its your call! i'll update the sig",
        "pr_file_module": null
      },
      {
        "comment_id": "2322025845",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58716,
        "pr_file": "api/client/accesslist/accesslist.go",
        "discussion_id": "2321940699",
        "commented_code": "@@ -104,6 +105,31 @@ func (c *Client) ListAccessListsV2(ctx context.Context, req *accesslistv1.ListAc\n \treturn accessLists, resp.GetNextPageToken(), nil\n }\n \n+// RangeAccessLists returns access list resources within the range [start, end).\n+func (c *Client) RangeAccessLists(ctx context.Context, req *accesslistv1.ListAccessListsV2Request) iter.Seq2[*accesslist.AccessList, error] {",
        "comment_created_at": "2025-09-04T12:53:19+00:00",
        "comment_author": "okraport",
        "comment_body": "Thanks! Yes, I'm yet to solidify these convention in an RFD after converting some more of these. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2299834802",
    "pr_number": 58323,
    "pr_file": "lib/auth/authclient/api.go",
    "created_at": "2025-08-26T05:37:34+00:00",
    "commented_code": "GetAccessLists(context.Context) ([]*accesslist.AccessList, error)\n \t// ListAccessLists returns a paginated list of access lists.\n \tListAccessLists(context.Context, int, string) ([]*accesslist.AccessList, string, error)\n+\t// ListAccessListsWithFilter returns a paginated list of access lists.\n+\tListAccessListsWithFilter(context.Context, int, string, string, *types.SortBy) ([]*accesslist.AccessList, string, error)",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2299834802",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58323,
        "pr_file": "lib/auth/authclient/api.go",
        "discussion_id": "2299834802",
        "commented_code": "@@ -1217,6 +1217,8 @@ type Cache interface {\n \tGetAccessLists(context.Context) ([]*accesslist.AccessList, error)\n \t// ListAccessLists returns a paginated list of access lists.\n \tListAccessLists(context.Context, int, string) ([]*accesslist.AccessList, string, error)\n+\t// ListAccessListsWithFilter returns a paginated list of access lists.\n+\tListAccessListsWithFilter(context.Context, int, string, string, *types.SortBy) ([]*accesslist.AccessList, string, error)",
        "comment_created_at": "2025-08-26T05:37:34+00:00",
        "comment_author": "kimlisa",
        "comment_body": "can we create a struct to hold the params? it'll prevent accidental param switches (like the `string, string` which is which?) and make extension easier. \r\n\r\nor idk, is this a common go thing? i notice a lot of our go funcs have lots of params",
        "pr_file_module": null
      },
      {
        "comment_id": "2300825899",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58323,
        "pr_file": "lib/auth/authclient/api.go",
        "discussion_id": "2299834802",
        "commented_code": "@@ -1217,6 +1217,8 @@ type Cache interface {\n \tGetAccessLists(context.Context) ([]*accesslist.AccessList, error)\n \t// ListAccessLists returns a paginated list of access lists.\n \tListAccessLists(context.Context, int, string) ([]*accesslist.AccessList, string, error)\n+\t// ListAccessListsWithFilter returns a paginated list of access lists.\n+\tListAccessListsWithFilter(context.Context, int, string, string, *types.SortBy) ([]*accesslist.AccessList, string, error)",
        "comment_created_at": "2025-08-26T12:23:38+00:00",
        "comment_author": "rosstimothy",
        "comment_body": "cc @okraport - Whatever we do we should standardize on, especially given that Luke is working on unifying our APIs while addressing our current lack of pagination support.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2310169936",
    "pr_number": 58496,
    "pr_file": "lib/auth/authclient/api.go",
    "created_at": "2025-08-29T13:29:37+00:00",
    "commented_code": "GetBotInstance(ctx context.Context, botName, instanceID string) (*machineidv1.BotInstance, error)\n \n \t// ListBotInstances returns a page of BotInstance resources.\n-\tListBotInstances(ctx context.Context, botName string, pageSize int, lastToken string, search string, sort *types.SortBy) ([]*machineidv1.BotInstance, string, error)\n+\tListBotInstances(ctx context.Context, botName string, pageSize int, lastToken string, search string, sort *types.SortBy, query string) ([]*machineidv1.BotInstance, string, error)",
    "repo_full_name": "gravitational/teleport",
    "discussion_comments": [
      {
        "comment_id": "2310169936",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58496,
        "pr_file": "lib/auth/authclient/api.go",
        "discussion_id": "2310169936",
        "commented_code": "@@ -1330,7 +1330,7 @@ type Cache interface {\n \tGetBotInstance(ctx context.Context, botName, instanceID string) (*machineidv1.BotInstance, error)\n \n \t// ListBotInstances returns a page of BotInstance resources.\n-\tListBotInstances(ctx context.Context, botName string, pageSize int, lastToken string, search string, sort *types.SortBy) ([]*machineidv1.BotInstance, string, error)\n+\tListBotInstances(ctx context.Context, botName string, pageSize int, lastToken string, search string, sort *types.SortBy, query string) ([]*machineidv1.BotInstance, string, error)",
        "comment_created_at": "2025-08-29T13:29:37+00:00",
        "comment_author": "rosstimothy",
        "comment_body": "@okraport has been working on standardizing our List APIs and might have some opinions on this",
        "pr_file_module": null
      },
      {
        "comment_id": "2310258988",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58496,
        "pr_file": "lib/auth/authclient/api.go",
        "discussion_id": "2310169936",
        "commented_code": "@@ -1330,7 +1330,7 @@ type Cache interface {\n \tGetBotInstance(ctx context.Context, botName, instanceID string) (*machineidv1.BotInstance, error)\n \n \t// ListBotInstances returns a page of BotInstance resources.\n-\tListBotInstances(ctx context.Context, botName string, pageSize int, lastToken string, search string, sort *types.SortBy) ([]*machineidv1.BotInstance, string, error)\n+\tListBotInstances(ctx context.Context, botName string, pageSize int, lastToken string, search string, sort *types.SortBy, query string) ([]*machineidv1.BotInstance, string, error)",
        "comment_created_at": "2025-08-29T14:04:40+00:00",
        "comment_author": "okraport",
        "comment_body": "The general idea is to bundle filter related fields into a proto message (example `RoleFilter`) so that it can be extended without the function signature growing like this. \r\nSince sort and filter are optional we could then use a `...opts` functional pattern for all List calls.\r\n\r\nIt's tricky to do this retroactively, I think in this instance it's understandable to extend the existing API. I will work on a design to standardise these and propose a path forward once I have something concrete. Until then, if we are adding a filter to a List api without preexisting filter terms, let's use a proto message. If we are extending (as is the case here) then it may be necessary evil until we have a backwards compatible migration path. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2310281169",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58496,
        "pr_file": "lib/auth/authclient/api.go",
        "discussion_id": "2310169936",
        "commented_code": "@@ -1330,7 +1330,7 @@ type Cache interface {\n \tGetBotInstance(ctx context.Context, botName, instanceID string) (*machineidv1.BotInstance, error)\n \n \t// ListBotInstances returns a page of BotInstance resources.\n-\tListBotInstances(ctx context.Context, botName string, pageSize int, lastToken string, search string, sort *types.SortBy) ([]*machineidv1.BotInstance, string, error)\n+\tListBotInstances(ctx context.Context, botName string, pageSize int, lastToken string, search string, sort *types.SortBy, query string) ([]*machineidv1.BotInstance, string, error)",
        "comment_created_at": "2025-08-29T14:11:28+00:00",
        "comment_author": "rosstimothy",
        "comment_body": "We could always freeze the current ListBotInstances API and add ListBotInstancesV2 which followed that pattern.",
        "pr_file_module": null
      },
      {
        "comment_id": "2310340262",
        "repo_full_name": "gravitational/teleport",
        "pr_number": 58496,
        "pr_file": "lib/auth/authclient/api.go",
        "discussion_id": "2310169936",
        "commented_code": "@@ -1330,7 +1330,7 @@ type Cache interface {\n \tGetBotInstance(ctx context.Context, botName, instanceID string) (*machineidv1.BotInstance, error)\n \n \t// ListBotInstances returns a page of BotInstance resources.\n-\tListBotInstances(ctx context.Context, botName string, pageSize int, lastToken string, search string, sort *types.SortBy) ([]*machineidv1.BotInstance, string, error)\n+\tListBotInstances(ctx context.Context, botName string, pageSize int, lastToken string, search string, sort *types.SortBy, query string) ([]*machineidv1.BotInstance, string, error)",
        "comment_created_at": "2025-08-29T14:31:21+00:00",
        "comment_author": "nicholasmarais1158",
        "comment_body": "I was thinking the same thing when I added `query`. I'm more than happy to create a new call that uses a message for non-paging related params (filter and sort).\r\n\r\nIs the idea to create a V2 call to cater for the possibility that an older proxy version talks to a newer auth service? Are there any other steps that need to be taken to ensure backwards compatibility? ",
        "pr_file_module": null
      }
    ]
  }
]