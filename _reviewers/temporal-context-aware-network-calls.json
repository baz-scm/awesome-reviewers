[
  {
    "discussion_id": "2157837295",
    "pr_number": 7941,
    "pr_file": "tests/testcore/functional_test_base.go",
    "created_at": "2025-06-20T00:53:07+00:00",
    "commented_code": "s.initAssertions()\n \ts.setupSdk()\n \ts.taskPoller = taskpoller.New(s.T(), s.FrontendClient(), s.Namespace().String())\n+\ts.testCluster.host.grpcClientInterceptor.Set(func(ctx context.Context) context.Context {\n+\t\treturn metadata.AppendToOutgoingContext(ctx, \"temporal-test-name\", s.T().Name())\n+\t})",
    "repo_full_name": "temporalio/temporal",
    "discussion_comments": [
      {
        "comment_id": "2157837295",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7941,
        "pr_file": "tests/testcore/functional_test_base.go",
        "discussion_id": "2157837295",
        "commented_code": "@@ -270,6 +301,9 @@ func (s *FunctionalTestBase) SetupTest() {\n \ts.initAssertions()\n \ts.setupSdk()\n \ts.taskPoller = taskpoller.New(s.T(), s.FrontendClient(), s.Namespace().String())\n+\ts.testCluster.host.grpcClientInterceptor.Set(func(ctx context.Context) context.Context {\n+\t\treturn metadata.AppendToOutgoingContext(ctx, \"temporal-test-name\", s.T().Name())\n+\t})",
        "comment_created_at": "2025-06-20T00:53:07+00:00",
        "comment_author": "stephanos",
        "comment_body": "This is where the test name is injected.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1361025726",
    "pr_number": 4928,
    "pr_file": "common/sdk/headers_provider.go",
    "created_at": "2023-10-16T17:30:57+00:00",
    "commented_code": "+// The MIT License\n+//\n+// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.\n+//\n+// Copyright (c) 2020 Uber Technologies, Inc.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files (the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions:\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+\n+package sdk\n+\n+import (\n+\t\"context\"\n+\n+\t\"google.golang.org/grpc\"\n+\t\"google.golang.org/grpc/metadata\"\n+)\n+\n+type HeadersProvider interface {\n+\tGetHeaders(ctx context.Context) (map[string]string, error)\n+}\n+\n+func HeadersProviderInterceptor(headersProvider HeadersProvider) grpc.UnaryClientInterceptor {\n+\treturn func(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n+\t\theaders, err := headersProvider.GetHeaders(ctx)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tfor k, v := range headers {\n+\t\t\tctx = metadata.AppendToOutgoingContext(ctx, k, v)",
    "repo_full_name": "temporalio/temporal",
    "discussion_comments": [
      {
        "comment_id": "1361025726",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 4928,
        "pr_file": "common/sdk/headers_provider.go",
        "discussion_id": "1361025726",
        "commented_code": "@@ -0,0 +1,49 @@\n+// The MIT License\n+//\n+// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.\n+//\n+// Copyright (c) 2020 Uber Technologies, Inc.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files (the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions:\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+\n+package sdk\n+\n+import (\n+\t\"context\"\n+\n+\t\"google.golang.org/grpc\"\n+\t\"google.golang.org/grpc/metadata\"\n+)\n+\n+type HeadersProvider interface {\n+\tGetHeaders(ctx context.Context) (map[string]string, error)\n+}\n+\n+func HeadersProviderInterceptor(headersProvider HeadersProvider) grpc.UnaryClientInterceptor {\n+\treturn func(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n+\t\theaders, err := headersProvider.GetHeaders(ctx)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tfor k, v := range headers {\n+\t\t\tctx = metadata.AppendToOutgoingContext(ctx, k, v)",
        "comment_created_at": "2023-10-16T17:30:57+00:00",
        "comment_author": "dnr",
        "comment_body": "Would it be possible to do all the headers in one call to `metadata.AppendToOutgoingContext`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1048096899",
    "pr_number": 3702,
    "pr_file": "common/authorization/opa_authorizer.go",
    "created_at": "2022-12-14T07:22:24+00:00",
    "commented_code": "+// The MIT License\n+//\n+// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.\n+//\n+// Copyright (c) 2020 Uber Technologies, Inc.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files (the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions:\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+\n+package authorization\n+\n+import (\n+\t\"bytes\"\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"net/http\"\n+)\n+\n+type (\n+\topaAuthorizer struct {\n+\t\topaEndpoint string\n+\t}\n+)\n+\n+var _ Authorizer = (*opaAuthorizer)(nil)\n+\n+// NewDefaultAuthorizer creates a default authorizer\n+func NewOpaAuthorizer(opaEndpoint string) Authorizer {\n+\treturn &opaAuthorizer{\n+\t\topaEndpoint: opaEndpoint,\n+\t}\n+}\n+\n+type (\n+\topaInput struct {\n+\t\tClaims Claims\n+\t\tTarget CallTarget\n+\t}\n+\n+\topaRequest struct {\n+\t\tInput opaInput `json:\"input\"`\n+\t}\n+\n+\topaResult struct {\n+\t\tResult struct {\n+\t\t\tAllow bool `json:\"allow\"`\n+\t\t} `json:\"result\"`\n+\t}\n+)\n+\n+func (a *opaAuthorizer) Authorize(_ context.Context, claims *Claims, target *CallTarget) (Result, error) {\n+\topaRequest := opaRequest{\n+\t\tInput: opaInput{\n+\t\t\tClaims: *claims,\n+\t\t\tTarget: *target,\n+\t\t},\n+\t}\n+\n+\tjsonData, err := json.Marshal(opaRequest)\n+\tif err != nil {\n+\t\treturn resultDeny, err\n+\t}\n+\n+\tresponse, err := http.Post(a.opaEndpoint, \"application/json\", bytes.NewBuffer(jsonData))",
    "repo_full_name": "temporalio/temporal",
    "discussion_comments": [
      {
        "comment_id": "1048096899",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 3702,
        "pr_file": "common/authorization/opa_authorizer.go",
        "discussion_id": "1048096899",
        "commented_code": "@@ -0,0 +1,101 @@\n+// The MIT License\n+//\n+// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.\n+//\n+// Copyright (c) 2020 Uber Technologies, Inc.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files (the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions:\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+\n+package authorization\n+\n+import (\n+\t\"bytes\"\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"net/http\"\n+)\n+\n+type (\n+\topaAuthorizer struct {\n+\t\topaEndpoint string\n+\t}\n+)\n+\n+var _ Authorizer = (*opaAuthorizer)(nil)\n+\n+// NewDefaultAuthorizer creates a default authorizer\n+func NewOpaAuthorizer(opaEndpoint string) Authorizer {\n+\treturn &opaAuthorizer{\n+\t\topaEndpoint: opaEndpoint,\n+\t}\n+}\n+\n+type (\n+\topaInput struct {\n+\t\tClaims Claims\n+\t\tTarget CallTarget\n+\t}\n+\n+\topaRequest struct {\n+\t\tInput opaInput `json:\"input\"`\n+\t}\n+\n+\topaResult struct {\n+\t\tResult struct {\n+\t\t\tAllow bool `json:\"allow\"`\n+\t\t} `json:\"result\"`\n+\t}\n+)\n+\n+func (a *opaAuthorizer) Authorize(_ context.Context, claims *Claims, target *CallTarget) (Result, error) {\n+\topaRequest := opaRequest{\n+\t\tInput: opaInput{\n+\t\t\tClaims: *claims,\n+\t\t\tTarget: *target,\n+\t\t},\n+\t}\n+\n+\tjsonData, err := json.Marshal(opaRequest)\n+\tif err != nil {\n+\t\treturn resultDeny, err\n+\t}\n+\n+\tresponse, err := http.Post(a.opaEndpoint, \"application/json\", bytes.NewBuffer(jsonData))",
        "comment_created_at": "2022-12-14T07:22:24+00:00",
        "comment_author": "dnr",
        "comment_body": "Can you use NewRequestWithContext or WithContext to make the http call context-aware? ",
        "pr_file_module": null
      }
    ]
  }
]