[
  {
    "discussion_id": "2110313185",
    "pr_number": 7740,
    "pr_file": "service/matching/config.go",
    "created_at": "2025-05-27T21:32:26+00:00",
    "commented_code": "TaskQueueInfoByBuildIdTTL: func() time.Duration {\n \t\t\treturn config.TaskQueueInfoByBuildIdTTL(ns.String(), taskQueueName, taskType)\n \t\t},\n+\t\tRateLimiterRefreshInterval: func() time.Duration {\n+\t\t\treturn config.RateLimiterRefreshInterval(ns.String(), taskQueueName, taskType)\n+\t\t},",
    "repo_full_name": "temporalio/temporal",
    "discussion_comments": [
      {
        "comment_id": "2110313185",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7740,
        "pr_file": "service/matching/config.go",
        "discussion_id": "2110313185",
        "commented_code": "@@ -399,6 +404,9 @@ func newTaskQueueConfig(tq *tqid.TaskQueue, config *Config, ns namespace.Name) *\n \t\tTaskQueueInfoByBuildIdTTL: func() time.Duration {\n \t\t\treturn config.TaskQueueInfoByBuildIdTTL(ns.String(), taskQueueName, taskType)\n \t\t},\n+\t\tRateLimiterRefreshInterval: func() time.Duration {\n+\t\t\treturn config.RateLimiterRefreshInterval(ns.String(), taskQueueName, taskType)\n+\t\t},",
        "comment_created_at": "2025-05-27T21:32:26+00:00",
        "comment_author": "dnr",
        "comment_body": "we don't actually need a dynamic config here since we're not going to modify it in a real environment, just unit tests, so we can do it like:\r\n```suggestion\r\n    RateLimiterRefreshInterval: time.Minute,\r\n```\r\nand get rid of the dynamic config setting. then just set it to another value in the test.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2074723924",
    "pr_number": 7709,
    "pr_file": "common/dynamicconfig/constants.go",
    "created_at": "2025-05-06T04:40:02+00:00",
    "commented_code": "0.5,\n \t\t`HistoryHostErrorPercentage is the percentage of hosts that are unhealthy`,\n \t)\n+\tHistoryHostStartingPercentage = NewGlobalFloatSetting(\n+\t\t\"frontend.historyHostStartingPercentage\",\n+\t\t0.05,\n+\t\t`HistoryHostStartingPercentage is the percentage of hosts that are not yet ready to serve traffic`,",
    "repo_full_name": "temporalio/temporal",
    "discussion_comments": [
      {
        "comment_id": "2074723924",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7709,
        "pr_file": "common/dynamicconfig/constants.go",
        "discussion_id": "2074723924",
        "commented_code": "@@ -761,6 +761,11 @@ This config is EXPERIMENTAL and may be changed or removed in a later release.`,\n \t\t0.5,\n \t\t`HistoryHostErrorPercentage is the percentage of hosts that are unhealthy`,\n \t)\n+\tHistoryHostStartingPercentage = NewGlobalFloatSetting(\n+\t\t\"frontend.historyHostStartingPercentage\",\n+\t\t0.05,\n+\t\t`HistoryHostStartingPercentage is the percentage of hosts that are not yet ready to serve traffic`,",
        "comment_created_at": "2025-05-06T04:40:02+00:00",
        "comment_author": "dnr",
        "comment_body": "Maybe say a little more here about what happens when the percentage is above or below this threshold?",
        "pr_file_module": null
      },
      {
        "comment_id": "2075849795",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7709,
        "pr_file": "common/dynamicconfig/constants.go",
        "discussion_id": "2074723924",
        "commented_code": "@@ -761,6 +761,11 @@ This config is EXPERIMENTAL and may be changed or removed in a later release.`,\n \t\t0.5,\n \t\t`HistoryHostErrorPercentage is the percentage of hosts that are unhealthy`,\n \t)\n+\tHistoryHostStartingPercentage = NewGlobalFloatSetting(\n+\t\t\"frontend.historyHostStartingPercentage\",\n+\t\t0.05,\n+\t\t`HistoryHostStartingPercentage is the percentage of hosts that are not yet ready to serve traffic`,",
        "comment_created_at": "2025-05-06T16:27:03+00:00",
        "comment_author": "laniehei",
        "comment_body": "I think this is up to the consumer of the float setting, not the float setting itself.",
        "pr_file_module": null
      },
      {
        "comment_id": "2076261715",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7709,
        "pr_file": "common/dynamicconfig/constants.go",
        "discussion_id": "2074723924",
        "commented_code": "@@ -761,6 +761,11 @@ This config is EXPERIMENTAL and may be changed or removed in a later release.`,\n \t\t0.5,\n \t\t`HistoryHostErrorPercentage is the percentage of hosts that are unhealthy`,\n \t)\n+\tHistoryHostStartingPercentage = NewGlobalFloatSetting(\n+\t\t\"frontend.historyHostStartingPercentage\",\n+\t\t0.05,\n+\t\t`HistoryHostStartingPercentage is the percentage of hosts that are not yet ready to serve traffic`,",
        "comment_created_at": "2025-05-06T20:51:53+00:00",
        "comment_author": "dnr",
        "comment_body": "But the setting has a single meaning and a specific effect.. the docstring should describe those. And the name should too, ideally. There shouldn't be multiple consumers with different semantics for the same setting.\r\n\r\nAnyway, 0.05 isn't \"the percentage of hosts that are not yet ready to serve traffic\", the percentage of hosts not ready to serve traffic is usually 0%, sometimes 10%, sometimes 50%, etc. The setting is a threshold for some behavior to change based on that value.",
        "pr_file_module": null
      },
      {
        "comment_id": "2078454331",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7709,
        "pr_file": "common/dynamicconfig/constants.go",
        "discussion_id": "2074723924",
        "commented_code": "@@ -761,6 +761,11 @@ This config is EXPERIMENTAL and may be changed or removed in a later release.`,\n \t\t0.5,\n \t\t`HistoryHostErrorPercentage is the percentage of hosts that are unhealthy`,\n \t)\n+\tHistoryHostStartingPercentage = NewGlobalFloatSetting(\n+\t\t\"frontend.historyHostStartingPercentage\",\n+\t\t0.05,\n+\t\t`HistoryHostStartingPercentage is the percentage of hosts that are not yet ready to serve traffic`,",
        "comment_created_at": "2025-05-07T20:36:35+00:00",
        "comment_author": "laniehei",
        "comment_body": "I see your point. I've changed the dynamic config documentation and the naming to better reflect its intent. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2076548778",
    "pr_number": 7718,
    "pr_file": "common/rpc/interceptor/slow_request_logger.go",
    "created_at": "2025-05-06T23:43:19+00:00",
    "commented_code": "+package interceptor\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"go.temporal.io/server/common/log\"\n+\t\"go.temporal.io/server/common/rpc/interceptor/logtags\"\n+\t\"go.temporal.io/server/common/tasktoken\"\n+\t\"google.golang.org/grpc\"\n+)\n+\n+var (\n+\t// Requests over this threshold will be logged.\n+\tSlowRequestThreshold = 5 * time.Second",
    "repo_full_name": "temporalio/temporal",
    "discussion_comments": [
      {
        "comment_id": "2076548778",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7718,
        "pr_file": "common/rpc/interceptor/slow_request_logger.go",
        "discussion_id": "2076548778",
        "commented_code": "@@ -0,0 +1,80 @@\n+package interceptor\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"go.temporal.io/server/common/log\"\n+\t\"go.temporal.io/server/common/rpc/interceptor/logtags\"\n+\t\"go.temporal.io/server/common/tasktoken\"\n+\t\"google.golang.org/grpc\"\n+)\n+\n+var (\n+\t// Requests over this threshold will be logged.\n+\tSlowRequestThreshold = 5 * time.Second",
        "comment_created_at": "2025-05-06T23:43:19+00:00",
        "comment_author": "dnr",
        "comment_body": "should be dynamic config? (also to enable/disable)",
        "pr_file_module": null
      },
      {
        "comment_id": "2078034162",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7718,
        "pr_file": "common/rpc/interceptor/slow_request_logger.go",
        "discussion_id": "2076548778",
        "commented_code": "@@ -0,0 +1,80 @@\n+package interceptor\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"go.temporal.io/server/common/log\"\n+\t\"go.temporal.io/server/common/rpc/interceptor/logtags\"\n+\t\"go.temporal.io/server/common/tasktoken\"\n+\t\"google.golang.org/grpc\"\n+)\n+\n+var (\n+\t// Requests over this threshold will be logged.\n+\tSlowRequestThreshold = 5 * time.Second",
        "comment_created_at": "2025-05-07T16:28:41+00:00",
        "comment_author": "lina-temporal",
        "comment_body": "Sure, I'll update this to be a dynamic config. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2078301191",
    "pr_number": 7718,
    "pr_file": "common/rpc/interceptor/slow_request_logger.go",
    "created_at": "2025-05-07T18:56:21+00:00",
    "commented_code": "+package interceptor\n+\n+import (\n+\t\"context\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"go.temporal.io/server/common/dynamicconfig\"\n+\t\"go.temporal.io/server/common/log\"\n+\t\"go.temporal.io/server/common/log/tag\"\n+\t\"go.temporal.io/server/common/rpc/interceptor/logtags\"\n+\t\"go.temporal.io/server/common/tasktoken\"\n+\t\"google.golang.org/grpc\"\n+)\n+\n+// Certain types of methods are ignored as a rule.\n+var ignoredMethodSubstrings = []string{\"Poll\", \"GetWorkflowExecutionHistory\"}\n+\n+type SlowRequestLoggerInterceptor struct {\n+\tlogger       log.Logger\n+\tworkflowTags *logtags.WorkflowTags\n+\tdc           *dynamicconfig.Collection\n+}\n+\n+func NewSlowRequestLoggerInterceptor(\n+\tlogger log.Logger,\n+\tdc *dynamicconfig.Collection,",
    "repo_full_name": "temporalio/temporal",
    "discussion_comments": [
      {
        "comment_id": "2078301191",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7718,
        "pr_file": "common/rpc/interceptor/slow_request_logger.go",
        "discussion_id": "2078301191",
        "commented_code": "@@ -0,0 +1,74 @@\n+package interceptor\n+\n+import (\n+\t\"context\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"go.temporal.io/server/common/dynamicconfig\"\n+\t\"go.temporal.io/server/common/log\"\n+\t\"go.temporal.io/server/common/log/tag\"\n+\t\"go.temporal.io/server/common/rpc/interceptor/logtags\"\n+\t\"go.temporal.io/server/common/tasktoken\"\n+\t\"google.golang.org/grpc\"\n+)\n+\n+// Certain types of methods are ignored as a rule.\n+var ignoredMethodSubstrings = []string{\"Poll\", \"GetWorkflowExecutionHistory\"}\n+\n+type SlowRequestLoggerInterceptor struct {\n+\tlogger       log.Logger\n+\tworkflowTags *logtags.WorkflowTags\n+\tdc           *dynamicconfig.Collection\n+}\n+\n+func NewSlowRequestLoggerInterceptor(\n+\tlogger log.Logger,\n+\tdc *dynamicconfig.Collection,",
        "comment_created_at": "2025-05-07T18:56:21+00:00",
        "comment_author": "dnr",
        "comment_body": "don't take the whole Collection here, take a dynamicconfig.DurationPropertyFn (just `func () time.Duration`). that makes it easier to test and also more efficient (by a tiny bit).\r\n\r\nyou can use dynamicconfig.GetDurationPropertyFn to create a static one for tests",
        "pr_file_module": null
      }
    ]
  }
]