[
  {
    "discussion_id": "2093553419",
    "pr_number": 7786,
    "pr_file": "tests/activity_api_update_test.go",
    "created_at": "2025-05-16T19:07:40+00:00",
    "commented_code": "s.EventuallyWithT(func(t *assert.CollectT) {\n \t\tdescription, err = s.SdkClient().DescribeWorkflowExecution(ctx, workflowRun.GetID(), workflowRun.GetRunID())\n-\t\tassert.NoError(t, err)\n-\t\tif description.GetPendingActivities() != nil {\n-\t\t\tassert.Len(t, description.GetPendingActivities(), 0)\n-\t\t\tassert.Equal(t, int32(2), startedActivityCount.Load())\n-\t\t}\n+\t\trequire.NoError(t, err)\n+\t\trequire.Len(t, description.GetPendingActivities(), 0)",
    "repo_full_name": "temporalio/temporal",
    "discussion_comments": [
      {
        "comment_id": "2093553419",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7786,
        "pr_file": "tests/activity_api_update_test.go",
        "discussion_id": "2093553419",
        "commented_code": "@@ -134,11 +133,9 @@ func (s *ActivityApiUpdateClientTestSuite) TestActivityUpdateApi_ChangeRetryInte\n \n \ts.EventuallyWithT(func(t *assert.CollectT) {\n \t\tdescription, err = s.SdkClient().DescribeWorkflowExecution(ctx, workflowRun.GetID(), workflowRun.GetRunID())\n-\t\tassert.NoError(t, err)\n-\t\tif description.GetPendingActivities() != nil {\n-\t\t\tassert.Len(t, description.GetPendingActivities(), 0)\n-\t\t\tassert.Equal(t, int32(2), startedActivityCount.Load())\n-\t\t}\n+\t\trequire.NoError(t, err)\n+\t\trequire.Len(t, description.GetPendingActivities(), 0)",
        "comment_created_at": "2025-05-16T19:07:40+00:00",
        "comment_author": "dnr",
        "comment_body": "```suggestion\r\n\t\trequire.Empty(t, description.GetPendingActivities())\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2093553686",
    "pr_number": 7786,
    "pr_file": "tests/activity_api_update_test.go",
    "created_at": "2025-05-16T19:07:57+00:00",
    "commented_code": "// activity should fail immediately\n \ts.EventuallyWithT(func(t *assert.CollectT) {\n \t\tdescription, err := s.SdkClient().DescribeWorkflowExecution(ctx, workflowRun.GetID(), workflowRun.GetRunID())\n-\t\tassert.NoError(t, err)\n-\t\tif description.GetPendingActivities() != nil {\n-\t\t\tassert.Len(t, description.GetPendingActivities(), 0)\n-\t\t\tassert.Equal(t, int32(1), startedActivityCount.Load())\n-\t\t}\n+\t\trequire.NoError(t, err)\n+\t\trequire.Len(t, description.GetPendingActivities(), 0)",
    "repo_full_name": "temporalio/temporal",
    "discussion_comments": [
      {
        "comment_id": "2093553686",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7786,
        "pr_file": "tests/activity_api_update_test.go",
        "discussion_id": "2093553686",
        "commented_code": "@@ -207,11 +202,9 @@ func (s *ActivityApiUpdateClientTestSuite) TestActivityUpdateApi_ChangeScheduleT\n \t// activity should fail immediately\n \ts.EventuallyWithT(func(t *assert.CollectT) {\n \t\tdescription, err := s.SdkClient().DescribeWorkflowExecution(ctx, workflowRun.GetID(), workflowRun.GetRunID())\n-\t\tassert.NoError(t, err)\n-\t\tif description.GetPendingActivities() != nil {\n-\t\t\tassert.Len(t, description.GetPendingActivities(), 0)\n-\t\t\tassert.Equal(t, int32(1), startedActivityCount.Load())\n-\t\t}\n+\t\trequire.NoError(t, err)\n+\t\trequire.Len(t, description.GetPendingActivities(), 0)",
        "comment_created_at": "2025-05-16T19:07:57+00:00",
        "comment_author": "dnr",
        "comment_body": "```suggestion\r\n\t\trequire.Empty(t, description.GetPendingActivities())\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2093554518",
    "pr_number": 7786,
    "pr_file": "tests/activity_api_update_test.go",
    "created_at": "2025-05-16T19:08:46+00:00",
    "commented_code": "// wait for activity to start (and fail)\n \ts.EventuallyWithT(func(t *assert.CollectT) {\n-\t\tassert.True(t, startedActivityCount.Load() > 0)\n+\t\trequire.True(t, startedActivityCount.Load() > 0)",
    "repo_full_name": "temporalio/temporal",
    "discussion_comments": [
      {
        "comment_id": "2093554518",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7786,
        "pr_file": "tests/activity_api_update_test.go",
        "discussion_id": "2093554518",
        "commented_code": "@@ -264,7 +257,7 @@ func (s *ActivityApiUpdateClientTestSuite) TestActivityUpdateApi_ChangeScheduleT\n \n \t// wait for activity to start (and fail)\n \ts.EventuallyWithT(func(t *assert.CollectT) {\n-\t\tassert.True(t, startedActivityCount.Load() > 0)\n+\t\trequire.True(t, startedActivityCount.Load() > 0)",
        "comment_created_at": "2025-05-16T19:08:46+00:00",
        "comment_author": "dnr",
        "comment_body": "```suggestion\r\n\t\trequire.NotZero(t, startedActivityCount.Load())\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2027306788",
    "pr_number": 7562,
    "pr_file": "service/history/api/updateworkflowoptions/api_test.go",
    "created_at": "2025-04-03T15:51:18+00:00",
    "commented_code": "func TestMergeOptions_VersionOverrideMask(t *testing.T) {\n \tupdateMask := &fieldmaskpb.FieldMask{Paths: []string{\"versioning_override\"}}\n-\topts := &workflowpb.WorkflowExecutionOptions{}\n+\tinput := &workflowpb.WorkflowExecutionOptions{}\n \n \t// Merge unpinned into empty options\n-\topts, err := applyWorkflowExecutionOptions(opts, unpinnedOverrideOptions, updateMask)\n+\tmerged, err := applyWorkflowExecutionOptions(input, unpinnedOverrideOptions, updateMask)\n \tif err != nil {\n \t\tt.Error(err)\n \t}\n-\tassert.True(t, proto.Equal(unpinnedOverrideOptions, opts))\n+\tassert.EqualExportedValues(t, unpinnedOverrideOptions, merged)",
    "repo_full_name": "temporalio/temporal",
    "discussion_comments": [
      {
        "comment_id": "2027306788",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7562,
        "pr_file": "service/history/api/updateworkflowoptions/api_test.go",
        "discussion_id": "2027306788",
        "commented_code": "@@ -57,65 +56,75 @@ var (\n \n func TestMergeOptions_VersionOverrideMask(t *testing.T) {\n \tupdateMask := &fieldmaskpb.FieldMask{Paths: []string{\"versioning_override\"}}\n-\topts := &workflowpb.WorkflowExecutionOptions{}\n+\tinput := &workflowpb.WorkflowExecutionOptions{}\n \n \t// Merge unpinned into empty options\n-\topts, err := applyWorkflowExecutionOptions(opts, unpinnedOverrideOptions, updateMask)\n+\tmerged, err := applyWorkflowExecutionOptions(input, unpinnedOverrideOptions, updateMask)\n \tif err != nil {\n \t\tt.Error(err)\n \t}\n-\tassert.True(t, proto.Equal(unpinnedOverrideOptions, opts))\n+\tassert.EqualExportedValues(t, unpinnedOverrideOptions, merged)",
        "comment_created_at": "2025-04-03T15:51:18+00:00",
        "comment_author": "stephanos",
        "comment_body": "Using `EqualExportedValues` will show you the diff; which is handy!",
        "pr_file_module": null
      },
      {
        "comment_id": "2033701193",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7562,
        "pr_file": "service/history/api/updateworkflowoptions/api_test.go",
        "discussion_id": "2027306788",
        "commented_code": "@@ -57,65 +56,75 @@ var (\n \n func TestMergeOptions_VersionOverrideMask(t *testing.T) {\n \tupdateMask := &fieldmaskpb.FieldMask{Paths: []string{\"versioning_override\"}}\n-\topts := &workflowpb.WorkflowExecutionOptions{}\n+\tinput := &workflowpb.WorkflowExecutionOptions{}\n \n \t// Merge unpinned into empty options\n-\topts, err := applyWorkflowExecutionOptions(opts, unpinnedOverrideOptions, updateMask)\n+\tmerged, err := applyWorkflowExecutionOptions(input, unpinnedOverrideOptions, updateMask)\n \tif err != nil {\n \t\tt.Error(err)\n \t}\n-\tassert.True(t, proto.Equal(unpinnedOverrideOptions, opts))\n+\tassert.EqualExportedValues(t, unpinnedOverrideOptions, merged)",
        "comment_created_at": "2025-04-08T17:22:49+00:00",
        "comment_author": "carlydf",
        "comment_body": "nice!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2103628269",
    "pr_number": 7795,
    "pr_file": "chasm/tree_test.go",
    "created_at": "2025-05-23T01:10:55+00:00",
    "commented_code": "})\n }\n \n+// TODO: copy of test above but for collection with int key. Is there a way to unify these tests in one?",
    "repo_full_name": "temporalio/temporal",
    "discussion_comments": [
      {
        "comment_id": "2112620187",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7795,
        "pr_file": "chasm/tree_test.go",
        "discussion_id": "2103628269",
        "commented_code": "@@ -369,6 +369,7 @@ func (s *nodeSuite) TestCollectionAttributes_StringKey() {\n \t})\n }\n \n+// TODO: copy of test above but for collection with int key. Is there a way to unify these tests in one?",
        "comment_created_at": "2025-05-28T19:37:57+00:00",
        "comment_author": "alexshtin",
        "comment_body": "Tell me how :-)",
        "pr_file_module": null
      },
      {
        "comment_id": "2112694712",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 7795,
        "pr_file": "chasm/tree_test.go",
        "discussion_id": "2103628269",
        "commented_code": "@@ -369,6 +369,7 @@ func (s *nodeSuite) TestCollectionAttributes_StringKey() {\n \t})\n }\n \n+// TODO: copy of test above but for collection with int key. Is there a way to unify these tests in one?",
        "comment_created_at": "2025-05-28T20:28:31+00:00",
        "comment_author": "alexshtin",
        "comment_body": "ok, I figured it out with some help from your colleague :-) ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1558065102",
    "pr_number": 5231,
    "pr_file": "common/log/zap_logger_test.go",
    "created_at": "2024-04-09T17:35:31+00:00",
    "commented_code": "fmt.Println(out, lineNum)\n \tassert.Equal(t, `{\"level\":\"info\",\"msg\":\"`+defaultMsgForEmpty+`\",\"error\":\"test error\",\"wf-action\":\"add-workflow-started-event\",\"logging-call-at\":\"zap_logger_test.go:`+lineNum+`\"}`+\"\n\", out)\n }\n+\n+func TestRotationLogger(t *testing.T) {\n+\tdir := testutils.MkdirTemp(t, \"\", \"testRotationLogger\")\n+\tcfg := Config{\n+\t\tLevel:          \"info\",\n+\t\tOutputFile:     dir + \"/test.log\",\n+\t\tEnableRotation: true,\n+\t\tMaxSize:        1,\n+\t}\n+\n+\tlog, err := BuildZapLogger(cfg)\n+\tassert.NoError(t, err)\n+\tassert.NotNil(t, log)\n+\tfor i := 0; i < 20000; i++ {\n+\t\tlog.Info(\"this is dump log\")\n+\t}\n+\tfiles, err := os.ReadDir(dir)\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, 2, len(files))\n+\tsort.Slice(files, func(i, j int) bool {\n+\t\tfileI, _ := files[i].Info()\n+\t\tfileJ, _ := files[j].Info()\n+\t\treturn fileI.Size() < fileJ.Size()\n+\t})\n+\trotatedFile, _ := files[1].Info()\n+\tcurrentFile, _ := files[0].Info()\n+\tassert.LessOrEqual(t, int64(1024*1024)-rotatedFile.Size(), int64(100))\n+\tassert.Less(t, currentFile.Size(), int64(1024*1024))\n+}\n+\n+func TestNoRotationLogger(t *testing.T) {",
    "repo_full_name": "temporalio/temporal",
    "discussion_comments": [
      {
        "comment_id": "1558065102",
        "repo_full_name": "temporalio/temporal",
        "pr_number": 5231,
        "pr_file": "common/log/zap_logger_test.go",
        "discussion_id": "1558065102",
        "commented_code": "@@ -188,3 +191,55 @@ func TestEmptyMsg(t *testing.T) {\n \tfmt.Println(out, lineNum)\n \tassert.Equal(t, `{\"level\":\"info\",\"msg\":\"`+defaultMsgForEmpty+`\",\"error\":\"test error\",\"wf-action\":\"add-workflow-started-event\",\"logging-call-at\":\"zap_logger_test.go:`+lineNum+`\"}`+\"\\n\", out)\n }\n+\n+func TestRotationLogger(t *testing.T) {\n+\tdir := testutils.MkdirTemp(t, \"\", \"testRotationLogger\")\n+\tcfg := Config{\n+\t\tLevel:          \"info\",\n+\t\tOutputFile:     dir + \"/test.log\",\n+\t\tEnableRotation: true,\n+\t\tMaxSize:        1,\n+\t}\n+\n+\tlog, err := BuildZapLogger(cfg)\n+\tassert.NoError(t, err)\n+\tassert.NotNil(t, log)\n+\tfor i := 0; i < 20000; i++ {\n+\t\tlog.Info(\"this is dump log\")\n+\t}\n+\tfiles, err := os.ReadDir(dir)\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, 2, len(files))\n+\tsort.Slice(files, func(i, j int) bool {\n+\t\tfileI, _ := files[i].Info()\n+\t\tfileJ, _ := files[j].Info()\n+\t\treturn fileI.Size() < fileJ.Size()\n+\t})\n+\trotatedFile, _ := files[1].Info()\n+\tcurrentFile, _ := files[0].Info()\n+\tassert.LessOrEqual(t, int64(1024*1024)-rotatedFile.Size(), int64(100))\n+\tassert.Less(t, currentFile.Size(), int64(1024*1024))\n+}\n+\n+func TestNoRotationLogger(t *testing.T) {",
        "comment_created_at": "2024-04-09T17:35:31+00:00",
        "comment_author": "tdeebswihart",
        "comment_body": "Nit: how about\r\n```suggestion\r\nfunc TestLogger_FilesArentRotated_WhenDisabled(t *testing.T) {\r\n```\r\n\r\nThat's cleared about what you're testing (and the above could be `TestLogger_FilesAreRotated_WhenEnabled` or something)",
        "pr_file_module": null
      }
    ]
  }
]