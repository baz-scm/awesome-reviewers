[
  {
    "discussion_id": "142319959",
    "pr_number": 13450,
    "pr_file": "tensorflow/docs_src/install/install_sources.md",
    "created_at": "2017-10-03T06:15:32+00:00",
    "commented_code": "<pre>ImportError: cannot import name pywrap_tensorflow</pre></td>\n </tr>\n </table>\n+\n+## Tested source configurations\n+**Linux**\n+<table>\n+<tr><th>Version:</th><th>CPU/GPU:</th><th>Python Version:</th><th>Compiler:</th><th>Bazel/Cmake:</th><th>cuDNN:</th><th>CUDA:</th></tr>",
    "repo_full_name": "tensorflow/tensorflow",
    "discussion_comments": [
      {
        "comment_id": "142319959",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 13450,
        "pr_file": "tensorflow/docs_src/install/install_sources.md",
        "discussion_id": "142319959",
        "commented_code": "@@ -429,3 +429,41 @@ Stack Overflow and specify the `tensorflow` tag.\n   <pre>ImportError: cannot import name pywrap_tensorflow</pre></td>\n </tr>\n </table>\n+\n+## Tested source configurations\n+**Linux**\n+<table>\n+<tr><th>Version:</th><th>CPU/GPU:</th><th>Python Version:</th><th>Compiler:</th><th>Bazel/Cmake:</th><th>cuDNN:</th><th>CUDA:</th></tr>",
        "comment_created_at": "2017-10-03T06:15:32+00:00",
        "comment_author": "gunan",
        "comment_body": "Also, it is vague now in this table which one of bazel or cmake is used in the builds. In the table headers, let's replace \"Bazel/Cmake\" with \"Build tools\" and in the table itself, let's have the name of the tool included  with the version.\r\nFor example, instead of 0.4.5, we will have Bazel 0.4.5",
        "pr_file_module": null
      },
      {
        "comment_id": "142797511",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 13450,
        "pr_file": "tensorflow/docs_src/install/install_sources.md",
        "discussion_id": "142319959",
        "commented_code": "@@ -429,3 +429,41 @@ Stack Overflow and specify the `tensorflow` tag.\n   <pre>ImportError: cannot import name pywrap_tensorflow</pre></td>\n </tr>\n </table>\n+\n+## Tested source configurations\n+**Linux**\n+<table>\n+<tr><th>Version:</th><th>CPU/GPU:</th><th>Python Version:</th><th>Compiler:</th><th>Bazel/Cmake:</th><th>cuDNN:</th><th>CUDA:</th></tr>",
        "comment_created_at": "2017-10-04T21:27:44+00:00",
        "comment_author": "av8ramit",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1426827780",
    "pr_number": 62617,
    "pr_file": "ci/official/README.md",
    "created_at": "2023-12-14T14:53:00+00:00",
    "commented_code": "# Official CI Directory\n \n-> **Warning** This folder is still under construction. It is part of an ongoing\n-> effort to improve the structure of CI and build related files within the\n-> TensorFlow repo. This warning will be removed when the contents of this\n-> directory are stable and appropriate documentation around its usage is in\n-> place.\n-\n Maintainer: TensorFlow and TensorFlow DevInfra\n \n Issue Reporting: File an issue against this repo and tag\n [@devinfra](https://github.com/orgs/tensorflow/teams/devinfra)\n \n ********************************************************************************\n \n-This directory contains TensorFlow's official CI build scripts and tools. The\n-TensorFlow team uses these for:\n-\n-1.  Publishing the `tf-nightly` Python packages and other automated TensorFlow\n-    release artifacts\n-2.  Building (but not publishing) the `tensorflow` Python packages and other\n-    non-automated release artifacts\n-3.  Performing presubmit, continuous, and scheduled tests to verify TensorFlow's\n-    correctness. These mostly consist of `bazel test` invocations.\n-4.  Performing maintenance on the TensorFlow build configuration, such as the\n-    tooling in [requirements_updater](requirements_updater)\n-\n-This directory only contains build scripts, tools, and environment settings. It\n-does not include any orchestration. TensorFlow uses both Kokoro (a Google\n-internal system) and GitHub Actions for orchestration and scheduling, and those\n-are not configured in this directory.\n-\n-TensorFlow's CI tests cover a number of different platforms and configurations,\n-such as:\n-\n--   Linux, MacOS, and Windows\n--   CPU-only or with NVIDIA CUDA support (Linux only)\n--   Support for different Python versions.\n-\n-The scripts are configured with settings files (`env/`) to keep them tidy, and\n-each script reads its settings from the file denoted by the `TFCI` environment\n-variable. All settings are prepended by `TFCI_`. Executing a build script looks\n-like this:\n-\n-```\n-cd <tensorflow-root-directory>\n-mkdir -p build_output\n-cp ci/official/envs/sample build_output/env\n-vim build_output/env  # update \"your_choice_here\" to a real path\n-export TFCI=$(realpath build_output/env)\n-./ci/official/wheel.sh\n-ls build_output\n-```\n-\n-The scripts are intended to be easy to use for both CI systems and for local\n-replication.\n-\n-### The Important TensorFlow Test Scripts\n-\n-Generally speaking, changes to TensorFlow are gated by these test scripts:\n-\n-1.  `wheel.sh` builds the TensorFlow Pip package and verifies its contents.\n-2.  `pycpp.sh` runs an extensive `bazel test` suite whose targets vary depending\n-    on the platform (target selection is handled in TensorFlow's bazelrc)\n-3.  `libtensorflow.sh` builds\n-    [libtensorflow](https://www.tensorflow.org/install/lang_c).\n-4.  `code_check_full.sh` and `code_check_changed_files.sh` run some static code\n-    analysis checks.\n-\n-Our CI runs these under a variety of environments that will receive additional\n-documentation in the future.\n-\n-### Running Tests Yourself\n-\n-To run tests yourself, you'll copy the `envs/sample` file, adjust it to match\n-your environment, `export TFCI=your-path`, and then simply run the script you\n-want. A complete example is below this explanation. Some tips:\n-\n--   We generally use `<tensorflow-directory>/build_output` for all temporary\n-    storage and build artifacts, and you'll find all output files there,\n-    including `script.log`, the log of the last executed build script.\n--   You can find out which env file a TensorFlow job used by looking at the\n-    `TFCI` variable in the `BUILD_CONFIG` section of the Invocation Details for\n-    that job, either in Sponge (internal) or ResultStore (external).\n--   The files in `envs/` are configured to match TensorFlow's CI system and\n-    reference paths and settings. They will not work out-of-the-box, so you'll\n-    need to copy `sample` instead, which removes all of those custom details.\n--   `sample` also resets the Python version to TensorFlow's default. You can\n-    target a specific version by providing e.g.\n-    `--repo_env=TF_PYTHON_VERSION=3.10` in `TFCI_BAZEL_COMMON_ARGS` as the other\n-    `env` files do.\n-\n-Here is a complete example of how to set up and run a script:\n-\n-```\n-cd <tensorflow-root-directory>\n-mkdir -p build_output\n-cp ci/official/envs/sample build_output/env\n-vim build_output/env  # update \"your_choice_here\" to a real path\n-export TFCI=$(realpath build_output/env)\n-./ci/official/wheel.sh\n+## TensorFlow's Official CI and Build/Test Scripts\n+\n+TensorFlow's official CI jobs run the scripts in this folder. Our internal CI\n+system, Kokoro, schedules our CI jobs by combining a build script with an `env` file that is filled with configuration options:",
    "repo_full_name": "tensorflow/tensorflow",
    "discussion_comments": [
      {
        "comment_id": "1426827780",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 62617,
        "pr_file": "ci/official/README.md",
        "discussion_id": "1426827780",
        "commented_code": "@@ -1,295 +1,131 @@\n # Official CI Directory\n \n-> **Warning** This folder is still under construction. It is part of an ongoing\n-> effort to improve the structure of CI and build related files within the\n-> TensorFlow repo. This warning will be removed when the contents of this\n-> directory are stable and appropriate documentation around its usage is in\n-> place.\n-\n Maintainer: TensorFlow and TensorFlow DevInfra\n \n Issue Reporting: File an issue against this repo and tag\n [@devinfra](https://github.com/orgs/tensorflow/teams/devinfra)\n \n ********************************************************************************\n \n-This directory contains TensorFlow's official CI build scripts and tools. The\n-TensorFlow team uses these for:\n-\n-1.  Publishing the `tf-nightly` Python packages and other automated TensorFlow\n-    release artifacts\n-2.  Building (but not publishing) the `tensorflow` Python packages and other\n-    non-automated release artifacts\n-3.  Performing presubmit, continuous, and scheduled tests to verify TensorFlow's\n-    correctness. These mostly consist of `bazel test` invocations.\n-4.  Performing maintenance on the TensorFlow build configuration, such as the\n-    tooling in [requirements_updater](requirements_updater)\n-\n-This directory only contains build scripts, tools, and environment settings. It\n-does not include any orchestration. TensorFlow uses both Kokoro (a Google\n-internal system) and GitHub Actions for orchestration and scheduling, and those\n-are not configured in this directory.\n-\n-TensorFlow's CI tests cover a number of different platforms and configurations,\n-such as:\n-\n--   Linux, MacOS, and Windows\n--   CPU-only or with NVIDIA CUDA support (Linux only)\n--   Support for different Python versions.\n-\n-The scripts are configured with settings files (`env/`) to keep them tidy, and\n-each script reads its settings from the file denoted by the `TFCI` environment\n-variable. All settings are prepended by `TFCI_`. Executing a build script looks\n-like this:\n-\n-```\n-cd <tensorflow-root-directory>\n-mkdir -p build_output\n-cp ci/official/envs/sample build_output/env\n-vim build_output/env  # update \"your_choice_here\" to a real path\n-export TFCI=$(realpath build_output/env)\n-./ci/official/wheel.sh\n-ls build_output\n-```\n-\n-The scripts are intended to be easy to use for both CI systems and for local\n-replication.\n-\n-### The Important TensorFlow Test Scripts\n-\n-Generally speaking, changes to TensorFlow are gated by these test scripts:\n-\n-1.  `wheel.sh` builds the TensorFlow Pip package and verifies its contents.\n-2.  `pycpp.sh` runs an extensive `bazel test` suite whose targets vary depending\n-    on the platform (target selection is handled in TensorFlow's bazelrc)\n-3.  `libtensorflow.sh` builds\n-    [libtensorflow](https://www.tensorflow.org/install/lang_c).\n-4.  `code_check_full.sh` and `code_check_changed_files.sh` run some static code\n-    analysis checks.\n-\n-Our CI runs these under a variety of environments that will receive additional\n-documentation in the future.\n-\n-### Running Tests Yourself\n-\n-To run tests yourself, you'll copy the `envs/sample` file, adjust it to match\n-your environment, `export TFCI=your-path`, and then simply run the script you\n-want. A complete example is below this explanation. Some tips:\n-\n--   We generally use `<tensorflow-directory>/build_output` for all temporary\n-    storage and build artifacts, and you'll find all output files there,\n-    including `script.log`, the log of the last executed build script.\n--   You can find out which env file a TensorFlow job used by looking at the\n-    `TFCI` variable in the `BUILD_CONFIG` section of the Invocation Details for\n-    that job, either in Sponge (internal) or ResultStore (external).\n--   The files in `envs/` are configured to match TensorFlow's CI system and\n-    reference paths and settings. They will not work out-of-the-box, so you'll\n-    need to copy `sample` instead, which removes all of those custom details.\n--   `sample` also resets the Python version to TensorFlow's default. You can\n-    target a specific version by providing e.g.\n-    `--repo_env=TF_PYTHON_VERSION=3.10` in `TFCI_BAZEL_COMMON_ARGS` as the other\n-    `env` files do.\n-\n-Here is a complete example of how to set up and run a script:\n-\n-```\n-cd <tensorflow-root-directory>\n-mkdir -p build_output\n-cp ci/official/envs/sample build_output/env\n-vim build_output/env  # update \"your_choice_here\" to a real path\n-export TFCI=$(realpath build_output/env)\n-./ci/official/wheel.sh\n+## TensorFlow's Official CI and Build/Test Scripts\n+\n+TensorFlow's official CI jobs run the scripts in this folder. Our internal CI\n+system, Kokoro, schedules our CI jobs by combining a build script with an `env` file that is filled with configuration options:",
        "comment_created_at": "2023-12-14T14:53:00+00:00",
        "comment_author": "MichaelHudgins",
        "comment_body": "Hmm, maybe worth stating that the env files correspond to the envs folder in this directory.  I know most people will notice but i could see a few asking \"What env files\"?",
        "pr_file_module": null
      },
      {
        "comment_id": "1427161320",
        "repo_full_name": "tensorflow/tensorflow",
        "pr_number": 62617,
        "pr_file": "ci/official/README.md",
        "discussion_id": "1426827780",
        "commented_code": "@@ -1,295 +1,131 @@\n # Official CI Directory\n \n-> **Warning** This folder is still under construction. It is part of an ongoing\n-> effort to improve the structure of CI and build related files within the\n-> TensorFlow repo. This warning will be removed when the contents of this\n-> directory are stable and appropriate documentation around its usage is in\n-> place.\n-\n Maintainer: TensorFlow and TensorFlow DevInfra\n \n Issue Reporting: File an issue against this repo and tag\n [@devinfra](https://github.com/orgs/tensorflow/teams/devinfra)\n \n ********************************************************************************\n \n-This directory contains TensorFlow's official CI build scripts and tools. The\n-TensorFlow team uses these for:\n-\n-1.  Publishing the `tf-nightly` Python packages and other automated TensorFlow\n-    release artifacts\n-2.  Building (but not publishing) the `tensorflow` Python packages and other\n-    non-automated release artifacts\n-3.  Performing presubmit, continuous, and scheduled tests to verify TensorFlow's\n-    correctness. These mostly consist of `bazel test` invocations.\n-4.  Performing maintenance on the TensorFlow build configuration, such as the\n-    tooling in [requirements_updater](requirements_updater)\n-\n-This directory only contains build scripts, tools, and environment settings. It\n-does not include any orchestration. TensorFlow uses both Kokoro (a Google\n-internal system) and GitHub Actions for orchestration and scheduling, and those\n-are not configured in this directory.\n-\n-TensorFlow's CI tests cover a number of different platforms and configurations,\n-such as:\n-\n--   Linux, MacOS, and Windows\n--   CPU-only or with NVIDIA CUDA support (Linux only)\n--   Support for different Python versions.\n-\n-The scripts are configured with settings files (`env/`) to keep them tidy, and\n-each script reads its settings from the file denoted by the `TFCI` environment\n-variable. All settings are prepended by `TFCI_`. Executing a build script looks\n-like this:\n-\n-```\n-cd <tensorflow-root-directory>\n-mkdir -p build_output\n-cp ci/official/envs/sample build_output/env\n-vim build_output/env  # update \"your_choice_here\" to a real path\n-export TFCI=$(realpath build_output/env)\n-./ci/official/wheel.sh\n-ls build_output\n-```\n-\n-The scripts are intended to be easy to use for both CI systems and for local\n-replication.\n-\n-### The Important TensorFlow Test Scripts\n-\n-Generally speaking, changes to TensorFlow are gated by these test scripts:\n-\n-1.  `wheel.sh` builds the TensorFlow Pip package and verifies its contents.\n-2.  `pycpp.sh` runs an extensive `bazel test` suite whose targets vary depending\n-    on the platform (target selection is handled in TensorFlow's bazelrc)\n-3.  `libtensorflow.sh` builds\n-    [libtensorflow](https://www.tensorflow.org/install/lang_c).\n-4.  `code_check_full.sh` and `code_check_changed_files.sh` run some static code\n-    analysis checks.\n-\n-Our CI runs these under a variety of environments that will receive additional\n-documentation in the future.\n-\n-### Running Tests Yourself\n-\n-To run tests yourself, you'll copy the `envs/sample` file, adjust it to match\n-your environment, `export TFCI=your-path`, and then simply run the script you\n-want. A complete example is below this explanation. Some tips:\n-\n--   We generally use `<tensorflow-directory>/build_output` for all temporary\n-    storage and build artifacts, and you'll find all output files there,\n-    including `script.log`, the log of the last executed build script.\n--   You can find out which env file a TensorFlow job used by looking at the\n-    `TFCI` variable in the `BUILD_CONFIG` section of the Invocation Details for\n-    that job, either in Sponge (internal) or ResultStore (external).\n--   The files in `envs/` are configured to match TensorFlow's CI system and\n-    reference paths and settings. They will not work out-of-the-box, so you'll\n-    need to copy `sample` instead, which removes all of those custom details.\n--   `sample` also resets the Python version to TensorFlow's default. You can\n-    target a specific version by providing e.g.\n-    `--repo_env=TF_PYTHON_VERSION=3.10` in `TFCI_BAZEL_COMMON_ARGS` as the other\n-    `env` files do.\n-\n-Here is a complete example of how to set up and run a script:\n-\n-```\n-cd <tensorflow-root-directory>\n-mkdir -p build_output\n-cp ci/official/envs/sample build_output/env\n-vim build_output/env  # update \"your_choice_here\" to a real path\n-export TFCI=$(realpath build_output/env)\n-./ci/official/wheel.sh\n+## TensorFlow's Official CI and Build/Test Scripts\n+\n+TensorFlow's official CI jobs run the scripts in this folder. Our internal CI\n+system, Kokoro, schedules our CI jobs by combining a build script with an `env` file that is filled with configuration options:",
        "comment_created_at": "2023-12-14T19:11:08+00:00",
        "comment_author": "angerson",
        "comment_body": "Good idea, tweaked the wording here.",
        "pr_file_module": null
      }
    ]
  }
]